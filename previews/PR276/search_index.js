var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Rimu includes an unexported module RMPI, which must be imported to access additional MPI-related functionality.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"using Rimu.RMPI\nmpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"projectormontecarlo.html#Projector-Monte-Carlo-/-FCIQMC","page":"Projector Monte Carlo","title":"Projector Monte Carlo / FCIQMC","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The purpose of Projector Monte Carlo is to stochastically sample the ground state, i.e. the  eigenvector corresponding to the lowest eigenvalue of a quantum Hamiltonian, or more generally,  a very large matrix. Rimu implements a flavor of Projector Monte Carlo called  Full Configuration Interaction Quantum Monte Carlo (FCIQMC).","category":"page"},{"location":"projectormontecarlo.html#ProjectorMonteCarloProblem","page":"Projector Monte Carlo","title":"ProjectorMonteCarloProblem","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"To run a projector Monte Carlo simulation you set up a problem with ProjectorMonteCarloProblem and solve it with solve. Alternatively you can initialize a PMCSimulation struct, step!  through time steps, and solve! it to completion. ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"ProjectorMonteCarloProblem\ninit\nsolve\nsolve!\nstep!","category":"page"},{"location":"projectormontecarlo.html#Rimu.ProjectorMonteCarloProblem-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html#CommonSolve.init-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\ninit(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.step!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"After solve or solve! have been called the returned PMCSimulation contains the results of  the projector Monte Carlo calculation.","category":"page"},{"location":"projectormontecarlo.html#PMCSimulation-and-report-as-a-DataFrame","page":"Projector Monte Carlo","title":"PMCSimulation and report as a DataFrame","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Rimu.PMCSimulation","category":"page"},{"location":"projectormontecarlo.html#Rimu.PMCSimulation-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The DataFrame returned from DataFrame(::PMCSimulation) contains the time series data from  the projector Monte Carlo simulation that is of primary interest for analysis. Depending on the  reporting_strategy and other options passed as keyword arguments to  ProjectorMonteCarloProblem it can have different numbers of rows and columns. The rows  correspond to the reported time steps (Monte Carlo steps). There is at least one column with the name :step. Further columns are usually present with additional data reported from the simulation.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"For the default option algorithm = FCIQMC(; shift_strategy, time_step_strategy) with a single replica (n_replicas = 1) and single spectral state, the fields :shift, :norm, :len will  be present as well as others depending on the style argument and the post_step_strategy.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"If multiple replicas or spectral states are requested, then the relevant field names in the  DataFrame will have a suffix identifying the respective replica simulation, e.g. the shifts will be reported as shift_1, shift_2, ... ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Many tools for analysing the time series data obtained from a  ProjectorMonteCarloProblem are contained in the Module StatsTools.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"num_replicas = 3\nreplica_strategy = AllOverlaps(num_replicas; operator = G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntarget_walkers = 100;\ntime_step = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"problem = ProjectorMonteCarloProblem(H;\n    style=IsDynamicSemistochastic(),\n    time_step,\n    last_step = steps_equilibrate + steps_measure,\n    target_walkers,\n    replica_strategy,\n)\nresult = solve(problem)\ndf = DataFrame(result);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $num_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.21397658699777738 ± 0.0013328516683076945\n   G2(1) = 0.9174066632312667 ± 0.0006152647701484566\n   G2(2) = 0.9815843067961179 ± 0.0005691837937095182\n   G2(3) = 0.9880414729474543 ± 0.0010482658194476229\n   G2(4) = 0.9815843067961179 ± 0.0005691837937095182\n   G2(5) = 0.9174066632312667 ± 0.0006152647701484566\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $num_replicas replicas:\")\nfor i in 1:num_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -4.0370612584181425 ± 0.1277833750352615\n   Replica 2: -4.087388100586144 ± 0.12494231430994454\n   Replica 3: -3.9622027654685343 ± 0.13679076346314578\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"target_walkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    target_walkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [target_walkers];\n    label=\"target_walkers\", xlabel=\"step\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.step, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip730\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip730)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip731\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip730)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip732\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip732)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip732)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip732)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip732)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip730)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip730)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip730)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip730)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip730)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip730)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M1266.04 1391.71 L1266.04 1397.25 Q1263.56 1395.98 1260.88 1395.34 Q1258.21 1394.71 1255.34 1394.71 Q1250.98 1394.71 1248.79 1396.04 Q1246.62 1397.38 1246.62 1400.05 Q1246.62 1402.09 1248.18 1403.27 Q1249.74 1404.41 1254.45 1405.46 L1256.46 1405.91 Q1262.7 1407.25 1265.31 1409.7 Q1267.95 1412.12 1267.95 1416.48 Q1267.95 1421.44 1264 1424.34 Q1260.09 1427.23 1253.21 1427.23 Q1250.35 1427.23 1247.23 1426.66 Q1244.14 1426.12 1240.7 1425.01 L1240.7 1418.96 Q1243.95 1420.65 1247.1 1421.51 Q1250.25 1422.33 1253.34 1422.33 Q1257.48 1422.33 1259.7 1420.93 Q1261.93 1419.5 1261.93 1416.92 Q1261.93 1414.54 1260.31 1413.26 Q1258.72 1411.99 1253.27 1410.81 L1251.24 1410.33 Q1245.79 1409.19 1243.38 1406.83 Q1240.96 1404.45 1240.96 1400.31 Q1240.96 1395.28 1244.52 1392.54 Q1248.09 1389.8 1254.64 1389.8 Q1257.89 1389.8 1260.75 1390.28 Q1263.62 1390.76 1266.04 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M1283.07 1380.54 L1283.07 1390.66 L1295.13 1390.66 L1295.13 1395.22 L1283.07 1395.22 L1283.07 1414.57 Q1283.07 1418.93 1284.24 1420.17 Q1285.45 1421.41 1289.11 1421.41 L1295.13 1421.41 L1295.13 1426.31 L1289.11 1426.31 Q1282.33 1426.31 1279.76 1423.8 Q1277.18 1421.25 1277.18 1414.57 L1277.18 1395.22 L1272.88 1395.22 L1272.88 1390.66 L1277.18 1390.66 L1277.18 1380.54 L1283.07 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M1333.32 1407.02 L1333.32 1409.89 L1306.4 1409.89 Q1306.78 1415.94 1310.02 1419.12 Q1313.3 1422.27 1319.13 1422.27 Q1322.5 1422.27 1325.65 1421.44 Q1328.84 1420.61 1331.95 1418.96 L1331.95 1424.5 Q1328.8 1425.83 1325.49 1426.53 Q1322.18 1427.23 1318.78 1427.23 Q1310.25 1427.23 1305.25 1422.27 Q1300.29 1417.3 1300.29 1408.84 Q1300.29 1400.08 1305 1394.96 Q1309.74 1389.8 1317.76 1389.8 Q1324.95 1389.8 1329.12 1394.45 Q1333.32 1399.07 1333.32 1407.02 M1327.47 1405.3 Q1327.4 1400.5 1324.76 1397.63 Q1322.15 1394.77 1317.82 1394.77 Q1312.92 1394.77 1309.96 1397.54 Q1307.03 1400.31 1306.59 1405.34 L1327.47 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M1348.6 1420.96 L1348.6 1439.87 L1342.71 1439.87 L1342.71 1390.66 L1348.6 1390.66 L1348.6 1396.07 Q1350.45 1392.89 1353.25 1391.36 Q1356.08 1389.8 1360 1389.8 Q1366.49 1389.8 1370.53 1394.96 Q1374.6 1400.12 1374.6 1408.52 Q1374.6 1416.92 1370.53 1422.08 Q1366.49 1427.23 1360 1427.23 Q1356.08 1427.23 1353.25 1425.71 Q1350.45 1424.15 1348.6 1420.96 M1368.53 1408.52 Q1368.53 1402.06 1365.85 1398.4 Q1363.21 1394.71 1358.56 1394.71 Q1353.92 1394.71 1351.24 1398.4 Q1348.6 1402.06 1348.6 1408.52 Q1348.6 1414.98 1351.24 1418.67 Q1353.92 1422.33 1358.56 1422.33 Q1363.21 1422.33 1365.85 1418.67 Q1368.53 1414.98 1368.53 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip732)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1260.83 2211.02,1260.83 \"/>\n<polyline clip-path=\"url(#clip732)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1003.26 2211.02,1003.26 \"/>\n<polyline clip-path=\"url(#clip732)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,745.696 2211.02,745.696 \"/>\n<polyline clip-path=\"url(#clip732)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,488.128 2211.02,488.128 \"/>\n<polyline clip-path=\"url(#clip732)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,230.561 2211.02,230.561 \"/>\n<polyline clip-path=\"url(#clip730)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip730)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1260.83 423.181,1260.83 \"/>\n<polyline clip-path=\"url(#clip730)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1003.26 423.181,1003.26 \"/>\n<polyline clip-path=\"url(#clip730)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,745.696 423.181,745.696 \"/>\n<polyline clip-path=\"url(#clip730)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,488.128 423.181,488.128 \"/>\n<polyline clip-path=\"url(#clip730)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,230.561 423.181,230.561 \"/>\n<path clip-path=\"url(#clip730)\" d=\"M356.339 1246.63 Q352.728 1246.63 350.899 1250.19 Q349.094 1253.74 349.094 1260.87 Q349.094 1267.97 350.899 1271.54 Q352.728 1275.08 356.339 1275.08 Q359.973 1275.08 361.779 1271.54 Q363.608 1267.97 363.608 1260.87 Q363.608 1253.74 361.779 1250.19 Q359.973 1246.63 356.339 1246.63 M356.339 1242.93 Q362.149 1242.93 365.205 1247.53 Q368.284 1252.12 368.284 1260.87 Q368.284 1269.59 365.205 1274.2 Q362.149 1278.78 356.339 1278.78 Q350.529 1278.78 347.45 1274.2 Q344.395 1269.59 344.395 1260.87 Q344.395 1252.12 347.45 1247.53 Q350.529 1242.93 356.339 1242.93 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M290.043 1016.61 L306.363 1016.61 L306.363 1020.54 L284.418 1020.54 L284.418 1016.61 Q287.08 1013.85 291.664 1009.22 Q296.27 1004.57 297.451 1003.23 Q299.696 1000.71 300.576 998.97 Q301.478 997.21 301.478 995.521 Q301.478 992.766 299.534 991.03 Q297.613 989.294 294.511 989.294 Q292.312 989.294 289.858 990.058 Q287.427 990.822 284.65 992.372 L284.65 987.65 Q287.474 986.516 289.927 985.937 Q292.381 985.359 294.418 985.359 Q299.789 985.359 302.983 988.044 Q306.177 990.729 306.177 995.22 Q306.177 997.349 305.367 999.271 Q304.58 1001.17 302.474 1003.76 Q301.895 1004.43 298.793 1007.65 Q295.691 1010.84 290.043 1016.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M316.224 985.984 L334.58 985.984 L334.58 989.919 L320.506 989.919 L320.506 998.391 Q321.524 998.044 322.543 997.882 Q323.562 997.696 324.58 997.696 Q330.367 997.696 333.747 1000.87 Q337.126 1004.04 337.126 1009.46 Q337.126 1015.03 333.654 1018.14 Q330.182 1021.21 323.862 1021.21 Q321.687 1021.21 319.418 1020.84 Q317.173 1020.47 314.765 1019.73 L314.765 1015.03 Q316.849 1016.17 319.071 1016.72 Q321.293 1017.28 323.77 1017.28 Q327.774 1017.28 330.112 1015.17 Q332.45 1013.07 332.45 1009.46 Q332.45 1005.84 330.112 1003.74 Q327.774 1001.63 323.77 1001.63 Q321.895 1001.63 320.02 1002.05 Q318.168 1002.46 316.224 1003.34 L316.224 985.984 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M356.339 989.062 Q352.728 989.062 350.899 992.627 Q349.094 996.169 349.094 1003.3 Q349.094 1010.4 350.899 1013.97 Q352.728 1017.51 356.339 1017.51 Q359.973 1017.51 361.779 1013.97 Q363.608 1010.4 363.608 1003.3 Q363.608 996.169 361.779 992.627 Q359.973 989.062 356.339 989.062 M356.339 985.359 Q362.149 985.359 365.205 989.965 Q368.284 994.548 368.284 1003.3 Q368.284 1012.03 365.205 1016.63 Q362.149 1021.21 356.339 1021.21 Q350.529 1021.21 347.45 1016.63 Q344.395 1012.03 344.395 1003.3 Q344.395 994.548 347.45 989.965 Q350.529 985.359 356.339 985.359 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M286.062 728.416 L304.418 728.416 L304.418 732.351 L290.344 732.351 L290.344 740.823 Q291.363 740.476 292.381 740.314 Q293.4 740.129 294.418 740.129 Q300.205 740.129 303.585 743.3 Q306.964 746.471 306.964 751.888 Q306.964 757.467 303.492 760.569 Q300.02 763.647 293.701 763.647 Q291.525 763.647 289.256 763.277 Q287.011 762.906 284.603 762.166 L284.603 757.467 Q286.687 758.601 288.909 759.156 Q291.131 759.712 293.608 759.712 Q297.613 759.712 299.951 757.606 Q302.288 755.499 302.288 751.888 Q302.288 748.277 299.951 746.17 Q297.613 744.064 293.608 744.064 Q291.733 744.064 289.858 744.481 Q288.006 744.897 286.062 745.777 L286.062 728.416 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M326.177 731.495 Q322.566 731.495 320.737 735.059 Q318.932 738.601 318.932 745.731 Q318.932 752.837 320.737 756.402 Q322.566 759.944 326.177 759.944 Q329.811 759.944 331.617 756.402 Q333.446 752.837 333.446 745.731 Q333.446 738.601 331.617 735.059 Q329.811 731.495 326.177 731.495 M326.177 727.791 Q331.987 727.791 335.043 732.397 Q338.122 736.981 338.122 745.731 Q338.122 754.457 335.043 759.064 Q331.987 763.647 326.177 763.647 Q320.367 763.647 317.288 759.064 Q314.233 754.457 314.233 745.731 Q314.233 736.981 317.288 732.397 Q320.367 727.791 326.177 727.791 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M356.339 731.495 Q352.728 731.495 350.899 735.059 Q349.094 738.601 349.094 745.731 Q349.094 752.837 350.899 756.402 Q352.728 759.944 356.339 759.944 Q359.973 759.944 361.779 756.402 Q363.608 752.837 363.608 745.731 Q363.608 738.601 361.779 735.059 Q359.973 731.495 356.339 731.495 M356.339 727.791 Q362.149 727.791 365.205 732.397 Q368.284 736.981 368.284 745.731 Q368.284 754.457 365.205 759.064 Q362.149 763.647 356.339 763.647 Q350.529 763.647 347.45 759.064 Q344.395 754.457 344.395 745.731 Q344.395 736.981 347.45 732.397 Q350.529 727.791 356.339 727.791 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M284.835 470.848 L307.057 470.848 L307.057 472.839 L294.511 505.408 L289.627 505.408 L301.432 474.783 L284.835 474.783 L284.835 470.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M316.224 470.848 L334.58 470.848 L334.58 474.783 L320.506 474.783 L320.506 483.256 Q321.524 482.908 322.543 482.746 Q323.562 482.561 324.58 482.561 Q330.367 482.561 333.747 485.732 Q337.126 488.904 337.126 494.32 Q337.126 499.899 333.654 503.001 Q330.182 506.08 323.862 506.08 Q321.687 506.08 319.418 505.709 Q317.173 505.339 314.765 504.598 L314.765 499.899 Q316.849 501.033 319.071 501.589 Q321.293 502.144 323.77 502.144 Q327.774 502.144 330.112 500.038 Q332.45 497.931 332.45 494.32 Q332.45 490.709 330.112 488.603 Q327.774 486.496 323.77 486.496 Q321.895 486.496 320.02 486.913 Q318.168 487.33 316.224 488.209 L316.224 470.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M356.339 473.927 Q352.728 473.927 350.899 477.492 Q349.094 481.033 349.094 488.163 Q349.094 495.269 350.899 498.834 Q352.728 502.376 356.339 502.376 Q359.973 502.376 361.779 498.834 Q363.608 495.269 363.608 488.163 Q363.608 481.033 361.779 477.492 Q359.973 473.927 356.339 473.927 M356.339 470.223 Q362.149 470.223 365.205 474.83 Q368.284 479.413 368.284 488.163 Q368.284 496.89 365.205 501.496 Q362.149 506.08 356.339 506.08 Q350.529 506.08 347.45 501.496 Q344.395 496.89 344.395 488.163 Q344.395 479.413 347.45 474.83 Q350.529 470.223 356.339 470.223 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M256.664 243.905 L264.303 243.905 L264.303 217.54 L255.992 219.206 L255.992 214.947 L264.256 213.281 L268.932 213.281 L268.932 243.905 L276.571 243.905 L276.571 247.841 L256.664 247.841 L256.664 243.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M296.015 216.359 Q292.404 216.359 290.576 219.924 Q288.77 223.466 288.77 230.595 Q288.77 237.702 290.576 241.267 Q292.404 244.808 296.015 244.808 Q299.65 244.808 301.455 241.267 Q303.284 237.702 303.284 230.595 Q303.284 223.466 301.455 219.924 Q299.65 216.359 296.015 216.359 M296.015 212.656 Q301.826 212.656 304.881 217.262 Q307.96 221.845 307.96 230.595 Q307.96 239.322 304.881 243.929 Q301.826 248.512 296.015 248.512 Q290.205 248.512 287.127 243.929 Q284.071 239.322 284.071 230.595 Q284.071 221.845 287.127 217.262 Q290.205 212.656 296.015 212.656 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M326.177 216.359 Q322.566 216.359 320.737 219.924 Q318.932 223.466 318.932 230.595 Q318.932 237.702 320.737 241.267 Q322.566 244.808 326.177 244.808 Q329.811 244.808 331.617 241.267 Q333.446 237.702 333.446 230.595 Q333.446 223.466 331.617 219.924 Q329.811 216.359 326.177 216.359 M326.177 212.656 Q331.987 212.656 335.043 217.262 Q338.122 221.845 338.122 230.595 Q338.122 239.322 335.043 243.929 Q331.987 248.512 326.177 248.512 Q320.367 248.512 317.288 243.929 Q314.233 239.322 314.233 230.595 Q314.233 221.845 317.288 217.262 Q320.367 212.656 326.177 212.656 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M356.339 216.359 Q352.728 216.359 350.899 219.924 Q349.094 223.466 349.094 230.595 Q349.094 237.702 350.899 241.267 Q352.728 244.808 356.339 244.808 Q359.973 244.808 361.779 241.267 Q363.608 237.702 363.608 230.595 Q363.608 223.466 361.779 219.924 Q359.973 216.359 356.339 216.359 M356.339 212.656 Q362.149 212.656 365.205 217.262 Q368.284 221.845 368.284 230.595 Q368.284 239.322 365.205 243.929 Q362.149 248.512 356.339 248.512 Q350.529 248.512 347.45 243.929 Q344.395 239.322 344.395 230.595 Q344.395 221.845 347.45 217.262 Q350.529 212.656 356.339 212.656 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip732)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,230.561 4017.76,230.561 \"/>\n<polyline clip-path=\"url(#clip732)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1250.45 456.554,1250.31 457.123,1250.09 457.691,1249.81 458.259,1249.47 458.828,1249.06 459.396,1248.58 459.964,1248.04 460.533,1247.43 461.101,1246.75 461.669,1244.96 462.238,1244.13 462.806,1243.22 463.375,1241.19 463.943,1240.11 464.511,1238.92 465.08,1237.63 465.648,1236.22 466.216,1234.7 466.785,1231 467.353,1227.17 467.921,1224.21 468.49,1222.15 469.058,1218.92 469.626,1216.59 470.195,1213.09 470.763,1210.44 471.331,1206.58 471.9,1203.56 472.468,1200.39 473.036,1195.93 473.605,1191.24 474.173,1187.45 474.741,1183.51 475.31,1179.35 475.878,1174.98 476.446,1170.42 477.015,1163.54 477.583,1158.57 478.152,1153.39 478.72,1145.95 479.288,1138.37 479.857,1131.49 480.425,1124.41 480.993,1118.22 481.562,1110.71 482.13,1103.12 482.698,1096.32 483.267,1089.33 483.835,1080.17 484.403,1072.86 484.972,1063.3 485.54,1054.73 486.108,1045.95 486.677,1038.05 487.245,1030.1 487.813,1020.81 488.382,1011.48 488.95,1002.96 489.518,994.308 490.087,983.477 490.655,973.623 491.224,964.719 491.792,955.674 492.36,943.492 492.929,931.239 493.497,921.953 494.065,911.652 494.634,902.333 495.202,891.845 495.77,881.366 496.339,870.895 496.907,860.331 497.475,847.738 498.044,836.279 498.612,826.814 499.18,817.405 499.749,805.954 500.317,795.584 500.885,785.29 501.454,775.915 502.022,765.519 502.59,754.102 503.159,743.87 503.727,732.758 504.295,722.698 504.864,711.685 505.432,702.781 506.001,691.742 506.569,682.088 507.137,672.61 507.706,661.037 508.274,648.808 508.842,638.761 509.411,629.864 509.979,622.345 510.547,613.82 511.116,604.388 511.684,592.902 512.252,583.786 512.821,575.693 513.389,566.74 513.957,560.186 514.526,553.497 515.094,546.758 515.662,538.327 516.231,531.017 516.799,524.803 517.367,516.889 517.936,510.163 518.504,498.432 519.072,493.023 519.641,484.617 520.209,479.638 520.778,473.63 521.346,469.764 521.914,461.803 522.483,453.038 523.051,448.686 523.619,444.372 524.188,439.184 524.756,434.096 525.324,427.733 525.893,421.931 526.461,413.287 527.029,407.035 527.598,403.899 528.166,400.599 528.734,397.552 529.303,389.415 529.871,385.605 530.439,379.978 531.008,378.346 531.576,375.864 532.144,373.342 532.713,370.761 533.281,368.376 533.85,365.863 534.418,362.211 534.986,357.782 535.555,353.542 536.123,350.516 536.691,345.377 537.26,341.655 537.828,335.998 538.396,334.547 538.965,330.13 539.533,328.762 540.101,328.544 540.67,324.218 541.238,319.213 541.806,318.422 542.375,318.568 542.943,317.777 543.511,316.749 544.08,313.842 544.648,312.929 545.216,311 545.785,309.016 546.353,310.398 546.921,308.543 547.49,307.431 548.058,305.325 548.627,302.364 549.195,302.644 549.763,300.677 550.332,300.732 550.9,300.022 551.468,300.12 552.037,298.871 552.605,298.041 553.173,297.068 553.742,295.833 554.31,292.635 554.878,292.787 555.447,291.708 556.015,289.728 556.583,289.83 557.152,289.009 557.72,286.919 558.288,284.019 558.857,280.22 559.425,280.682 559.993,280.991 560.562,279.369 561.13,276.581 561.698,274.844 562.267,274.425 562.835,274.845 563.404,273.476 563.972,271.831 564.54,272.466 565.109,272.017 565.677,271.285 566.245,270.811 566.814,269.283 567.382,268.761 567.95,267.436 568.519,264.123 569.087,262.933 569.655,260.809 570.224,260.817 570.792,259.759 571.36,258.551 571.929,257.533 572.497,257.347 573.065,257.274 573.634,257.483 574.202,257.538 574.77,258.509 575.339,258.323 575.907,257.062 576.476,257.887 577.044,261.623 577.612,260.318 578.181,259.926 578.749,258.408 579.317,257.051 579.886,255.612 580.454,254.561 581.022,254.659 581.591,253.789 582.159,253.736 582.727,252.541 583.296,249.536 583.864,249.462 584.432,247.481 585.001,247.744 585.569,246.201 586.137,246.528 586.706,245.684 587.274,246.127 587.842,247.363 588.411,245.681 588.979,247.098 589.547,247.344 590.116,249.494 590.684,249.343 591.253,250.443 591.821,250.028 592.389,247.903 592.958,244.987 593.526,244.19 594.094,245.668 594.663,246.811 595.231,246.794 595.799,245.949 596.368,244.947 596.936,245.134 597.504,244.134 598.073,244.153 598.641,244.159 599.209,242.285 599.778,241.55 600.346,242.724 600.914,241.871 601.483,240.024 602.051,239.541 602.619,240.104 603.188,238.422 603.756,240.101 604.325,240.426 604.893,241.725 605.461,242.955 606.03,243.157 606.598,241.214 607.166,242.665 607.735,241.555 608.303,240.814 608.871,243.493 609.44,242.497 610.008,242.692 610.576,242.733 611.145,244.949 611.713,240.661 612.281,241.802 612.85,240.87 613.418,244.189 613.986,245.3 614.555,244.107 615.123,243.017 615.691,241.93 616.26,241.057 616.828,241.08 617.396,241.185 617.965,238.312 618.533,237.602 619.102,236.051 619.67,236.681 620.238,237.345 620.807,236.504 621.375,236.818 621.943,239.376 622.512,238.643 623.08,237.664 623.648,238.882 624.217,240.251 624.785,241.321 625.353,241.287 625.922,240.41 626.49,240.552 627.058,239.536 627.627,239.776 628.195,242.077 628.763,244.895 629.332,243.404 629.9,242.961 630.468,238.686 631.037,239.918 631.605,239.058 632.173,236.979 632.742,237.13 633.31,238.428 633.879,239.562 634.447,240.562 635.015,240.421 635.584,241.7 636.152,240.567 636.72,240.55 637.289,241.597 637.857,242.462 638.425,242.215 638.994,242.986 639.562,242.743 640.13,242.326 640.699,241.039 641.267,240.789 641.835,236.32 642.404,236.594 642.972,233.654 643.54,234.731 644.109,234.066 644.677,234.356 645.245,233.768 645.814,235.027 646.382,234.077 646.951,233.304 647.519,234.453 648.087,233.667 648.656,234.017 649.224,233.342 649.792,232.7 650.361,233.979 650.929,237.382 651.497,237.205 652.066,236.168 652.634,235.123 653.202,237.299 653.771,235.353 654.339,233.609 654.907,234.981 655.476,234.044 656.044,233.31 656.612,233.422 657.181,232.745 657.749,233.226 658.317,235.542 658.886,236.747 659.454,235.849 660.022,236.277 660.591,235.172 661.159,234.366 661.728,234.336 662.296,233.596 662.864,233.795 663.433,233.888 664.001,235.294 664.569,236.549 665.138,237.528 665.706,238.437 666.274,239.474 666.843,238.28 667.411,238.085 667.979,237.911 668.548,236.631 669.116,235.637 669.684,234.504 670.253,234.381 670.821,233.609 671.389,233.706 671.958,233.966 672.526,235.136 673.094,235.242 673.663,236.281 674.231,237.404 674.799,237.349 675.368,238.35 675.936,237.318 676.505,235.866 677.073,238.804 677.641,238.637 678.21,237.305 678.778,237.245 679.346,238.436 679.915,236.068 680.483,236.059 681.051,238.125 681.62,237.754 682.188,237.627 682.756,235.394 683.325,235.33 683.893,234.971 684.461,232.727 685.03,231.698 685.598,232.053 686.166,232.197 686.735,234.536 687.303,230.399 687.871,230.947 688.44,233.409 689.008,234.492 689.577,234.629 690.145,234.665 690.713,235.616 691.282,233.659 691.85,234.687 692.418,234.525 692.987,234.487 693.555,234.543 694.123,234.632 694.692,235.713 695.26,234.488 695.828,234.22 696.397,232.055 696.965,229.265 697.533,230.653 698.102,228.497 698.67,229.826 699.238,229.222 699.807,229.796 700.375,229.265 700.943,228.622 701.512,227.951 702.08,229.579 702.648,228.936 703.217,227.311 703.785,226.737 704.354,225.389 704.922,225.215 705.49,223.94 706.059,226.82 706.627,228.379 707.195,227.717 707.764,228.372 708.332,228.788 708.9,229.341 709.469,228.854 710.037,230.46 710.605,230.971 711.174,231.297 711.742,229.69 712.31,230.179 712.879,232.629 713.447,231.995 714.015,235.457 714.584,236.569 715.152,237.47 715.72,235.378 716.289,234.266 716.857,234.302 717.425,236.293 717.994,237.188 718.562,237.118 719.131,236.98 719.699,236.884 720.267,236.836 720.836,235.599 721.404,235.591 721.972,235.612 722.541,236.637 723.109,236.391 723.677,235.25 724.246,235.244 724.814,235.108 725.382,232.933 725.951,235.036 726.519,232.756 727.087,233.935 727.656,233.11 728.224,234.208 728.792,234.392 729.361,235.243 729.929,235.108 730.497,232.869 731.066,232.856 731.634,232.816 732.203,232.016 732.771,234.208 733.339,234.25 733.908,233.321 734.476,232.437 735.044,233.657 735.613,232.655 736.181,233.711 736.749,231.532 737.318,231.969 737.886,232.206 738.454,232.415 739.023,231.36 739.591,231.656 740.159,233.798 740.728,234.922 741.296,234.886 741.864,234.92 742.433,236.883 743.001,236.828 743.569,236.528 744.138,236.337 744.706,238.075 745.274,236.769 745.843,232.394 746.411,231.302 746.98,232.474 747.548,233.615 748.116,232.661 748.685,232.803 749.253,231.74 749.821,229.671 750.39,229.93 750.958,229.05 751.526,230.252 752.095,232.741 752.663,233.743 753.231,232.774 753.8,232.744 754.368,232.634 754.936,233.632 755.505,232.27 756.073,230.114 756.641,230.242 757.21,230.446 757.778,232.549 758.346,233.511 758.915,235.502 759.483,237.345 760.052,236.747 760.62,236.695 761.188,236.175 761.757,235.961 762.325,236.847 762.893,235.631 763.462,233.261 764.03,234.114 764.598,235.044 765.167,234.813 765.735,233.402 766.303,233.314 766.872,234.305 767.44,236.365 768.008,234.089 768.577,234.033 769.145,235.034 769.713,234.925 770.282,234.504 770.85,232.2 771.418,231.23 771.987,230.387 772.555,230.585 773.123,234.717 773.692,233.441 774.26,235.4 774.829,235.078 775.397,232.73 775.965,231.891 776.534,229.853 777.102,228.966 777.67,230.015 778.239,228.059 778.807,227.988 779.375,227.359 779.944,227.665 780.512,226.028 781.08,225.15 781.649,225.474 782.217,226.099 782.785,224.381 783.354,222.839 783.922,222.516 784.49,224.18 785.059,224.955 785.627,226.729 786.195,228.269 786.764,229.671 787.332,229.971 787.9,230.235 788.469,232.456 789.037,232.463 789.606,232.596 790.174,232.759 790.742,231.741 791.311,229.798 791.879,229.938 792.447,229.384 793.016,229.769 793.584,229.12 794.152,230.515 794.721,231.708 795.289,231.648 795.857,230.807 796.426,229.903 796.994,233.373 797.562,232.614 798.131,230.466 798.699,230.889 799.267,233.025 799.836,233.074 800.404,231.965 800.972,232.963 801.541,231.998 802.109,233.359 802.678,232.285 803.246,234.228 803.814,234.199 804.383,233.103 804.951,232.274 805.519,231.441 806.088,231.601 806.656,231.81 807.224,229.829 807.793,230.934 808.361,230.071 808.929,228.31 809.498,228.46 810.066,229.688 810.634,231.063 811.203,229.218 811.771,228.231 812.339,228.588 812.908,232.189 813.476,237.199 814.044,237.003 814.613,237.733 815.181,237.446 815.749,236.014 816.318,234.935 816.886,239.109 817.455,236.522 818.023,232.256 818.591,233.392 819.16,233.322 819.728,233.094 820.296,233.175 820.865,235.056 821.433,235.756 822.001,236.493 822.57,236.189 823.138,234.952 823.706,233.707 824.275,232.347 824.843,233.153 825.411,233.859 825.98,234.685 826.548,233.456 827.116,233.248 827.685,230.932 828.253,231.063 828.821,228.854 829.39,230.997 829.958,230.028 830.526,230.098 831.095,230.961 831.663,229.08 832.232,229.135 832.8,229.588 833.368,228.684 833.937,229.674 834.505,230.96 835.073,229.814 835.642,228.82 836.21,230.045 836.778,231.378 837.347,231.485 837.915,230.478 838.483,232.717 839.052,236 839.62,234.682 840.188,235.495 840.757,236.241 841.325,235.833 841.893,238.782 842.462,238.198 843.03,236.727 843.598,236.558 844.167,236.242 844.735,234.798 845.304,234.689 845.872,234.51 846.44,234.158 847.009,234.065 847.577,234.762 848.145,233.497 848.714,232.181 849.282,232.159 849.85,231.041 850.419,231.092 850.987,229.101 851.555,229.294 852.124,228.56 852.692,230.887 853.26,230.652 853.829,229.639 854.397,230.739 854.965,231.708 855.534,231.487 856.102,227.488 856.67,225.623 857.239,222.902 857.807,223.511 858.375,224.155 858.944,223.802 859.512,223.316 860.081,225.877 860.649,225.289 861.217,226.701 861.786,226.037 862.354,225.511 862.922,224.875 863.491,223.245 864.059,223.795 864.627,224.263 865.196,224.723 865.764,224.384 866.332,225.781 866.901,227.111 867.469,226.503 868.037,225.942 868.606,226.712 869.174,224.815 869.742,222.347 870.311,224.079 870.879,223.987 871.447,226.743 872.016,226.08 872.584,225.721 873.152,228.204 873.721,227.587 874.289,227.912 874.858,230.517 875.426,231.849 875.994,234.086 876.563,235.224 877.131,236.087 877.699,238.97 878.268,238.614 878.836,236.053 879.404,236.84 879.973,236.414 880.541,236.092 881.109,237.047 881.678,237.904 882.246,235.526 882.814,236.39 883.383,236.085 883.951,237.959 884.519,237.679 885.088,237.285 885.656,237.049 886.224,234.62 886.793,233.641 887.361,234.933 887.93,233.646 888.498,233.472 889.066,235.322 889.635,236.101 890.203,236.056 890.771,235.617 891.34,235.399 891.908,235.946 892.476,235.488 893.045,236.367 893.613,236.124 894.181,237.876 894.75,236.251 895.318,235.804 895.886,237.432 896.455,240.182 897.023,237.39 897.591,235.859 898.16,234.397 898.728,232.281 899.296,233.081 899.865,238.138 900.433,235.585 901.001,234.267 901.57,235.297 902.138,234.752 902.707,237.705 903.275,237.157 903.843,236.544 904.412,238.252 904.98,237.552 905.548,239.152 906.117,238.614 906.685,237.956 907.253,235.384 907.822,233.944 908.39,232.63 908.958,236.431 909.527,234.896 910.095,234.023 910.663,233.479 911.232,229.037 911.8,230.998 912.368,230.868 912.937,230.73 913.505,231.555 914.073,233.398 914.642,232.984 915.21,234.748 915.779,232.085 916.347,231.933 916.915,229.584 917.484,230.559 918.052,231.282 918.62,231.155 919.189,231.991 919.757,231.825 920.325,232.696 920.894,230.274 921.462,231.04 922.03,230.783 922.599,230.609 923.167,230.401 923.735,229.448 924.304,227.309 924.872,228.226 925.44,227.064 926.009,229.204 926.577,228.173 927.145,228.15 927.714,226.895 928.282,227.17 928.85,230.272 929.419,230.374 929.987,233.458 930.556,232.16 931.124,233.01 931.692,232.855 932.261,232.651 932.829,230.461 933.397,230.161 933.966,230 934.534,229.836 935.102,231.648 935.671,233.488 936.239,231.857 936.807,230.66 937.376,229.462 937.944,227.276 938.512,227.114 939.081,226.123 939.649,226.472 940.217,225.642 940.786,228.062 941.354,229.198 941.922,229.064 942.491,228.882 943.059,227.76 943.627,226.916 944.196,232.047 944.764,232.753 945.333,232.452 945.901,232.065 946.469,230.903 947.038,231.74 947.606,231.726 948.174,230.455 948.743,226.068 949.311,224.277 949.879,224.526 950.448,224.616 951.016,225.147 951.584,226.328 952.153,227.411 952.721,228.332 953.289,228.354 953.858,227.319 954.426,227.697 954.994,227.741 955.563,226.71 956.131,225.972 956.699,226.224 957.268,225.571 957.836,227.154 958.405,226.4 958.973,225.789 959.541,225.121 960.11,222.47 960.678,219.895 961.246,221.637 961.815,220.232 962.383,221.088 962.951,223.9 963.52,226.674 964.088,225.22 964.656,225.812 965.225,227.406 965.793,226.696 966.361,230.036 966.93,231.062 967.498,233.337 968.066,233.356 968.635,233.382 969.203,233.313 969.771,234.033 970.34,234.791 970.908,234.529 971.476,234.416 972.045,235.234 972.613,232.873 973.182,232.677 973.75,232.689 974.318,232.56 974.887,231.277 975.455,231.304 976.023,229.024 976.592,228.166 977.16,228.147 977.728,228.376 978.297,228.734 978.865,228.856 979.433,228.883 980.002,229.231 980.57,229.414 981.138,229.563 981.707,232.764 982.275,233.665 982.843,232.428 983.412,232.361 983.98,235.347 984.548,236.062 985.117,236.751 985.685,236.51 986.253,236.217 986.822,234.677 987.39,232.494 987.959,232.333 988.527,233.079 989.095,232.976 989.664,232.853 990.232,232.532 990.8,232.362 991.369,231.39 991.937,232.48 992.505,231.396 993.074,231.388 993.642,232.328 994.21,230.957 994.779,232.227 995.347,233.182 995.915,233.937 996.484,233.736 997.052,233.554 997.62,232.343 998.189,231.19 998.757,230.863 999.325,231.824 999.894,231.698 1000.46,231.501 1001.03,232.504 1001.6,233.324 1002.17,234.157 1002.74,235.048 1003.3,235.638 1003.87,234.287 1004.44,233.846 1005.01,234.654 1005.58,234.416 1006.15,233.017 1006.71,231.76 1007.28,230.705 1007.85,230.581 1008.42,230.475 1008.99,230.436 1009.56,230.511 1010.12,230.471 1010.69,230.278 1011.26,230.295 1011.83,230.351 1012.4,227.12 1012.97,227.256 1013.53,226.363 1014.1,226.541 1014.67,224.703 1015.24,224.92 1015.81,224.083 1016.38,223.599 1016.94,225.185 1017.51,225.699 1018.08,226.003 1018.65,226.242 1019.22,225.688 1019.79,225.067 1020.35,226.568 1020.92,227.003 1021.49,230.515 1022.06,229.314 1022.63,223.992 1023.2,222.495 1023.76,223.164 1024.33,223.792 1024.9,226.284 1025.47,227.818 1026.04,227.89 1026.61,226.916 1027.17,228.298 1027.74,228.411 1028.31,229.599 1028.88,229.673 1029.45,230.936 1030.02,229.905 1030.58,229.034 1031.15,230.376 1031.72,230.492 1032.29,229.43 1032.86,229.658 1033.43,227.875 1033.99,227.176 1034.56,227.406 1035.13,227.473 1035.7,227.788 1036.27,227.127 1036.84,226.446 1037.4,226.716 1037.97,226.17 1038.54,226.598 1039.11,227.963 1039.68,230.331 1040.25,230.494 1040.81,230.704 1041.38,229.703 1041.95,228.062 1042.52,227.466 1043.09,226.833 1043.66,227.355 1044.22,226.778 1044.79,225.906 1045.36,226.492 1045.93,226.727 1046.5,227.127 1047.07,227.466 1047.63,226.84 1048.2,227.224 1048.77,228.568 1049.34,227.857 1049.91,226.079 1050.48,225.776 1051.05,226.364 1051.61,225.775 1052.18,225.339 1052.75,223.772 1053.32,225.612 1053.89,226.103 1054.46,226.603 1055.02,228.153 1055.59,228.769 1056.16,229.098 1056.73,229.572 1057.3,227.925 1057.87,233.488 1058.43,234.635 1059,235.843 1059.57,236.808 1060.14,238.84 1060.71,238.415 1061.28,237.989 1061.84,239.714 1062.41,239.422 1062.98,237.916 1063.55,239.379 1064.12,240.886 1064.69,240.361 1065.25,239.699 1065.82,237.023 1066.39,238.556 1066.96,239.111 1067.53,237.571 1068.1,237.233 1068.66,236.747 1069.23,235.346 1069.8,233.199 1070.37,234.221 1070.94,232.841 1071.51,231.361 1072.07,231.367 1072.64,231.493 1073.21,231.441 1073.78,232.418 1074.35,233.255 1074.92,232.097 1075.48,232.112 1076.05,231.929 1076.62,231.634 1077.19,232.756 1077.76,235.789 1078.33,238.605 1078.89,236.123 1079.46,236.827 1080.03,236.226 1080.6,234.706 1081.17,234.443 1081.74,234.192 1082.3,235.144 1082.87,235.85 1083.44,236.603 1084.01,233.811 1084.58,232.56 1085.15,232.422 1085.71,233.16 1086.28,231.838 1086.85,230.74 1087.42,229.742 1087.99,229.7 1088.56,229.825 1089.12,230.905 1089.69,229.664 1090.26,229.611 1090.83,227.46 1091.4,227.649 1091.97,227.624 1092.53,226.689 1093.1,225.888 1093.67,226.212 1094.24,227.629 1094.81,226.765 1095.38,228.012 1095.94,228.023 1096.51,229.286 1097.08,228.442 1097.65,226.401 1098.22,225.781 1098.79,226.123 1099.35,226.534 1099.92,225.729 1100.49,225.914 1101.06,226.288 1101.63,224.653 1102.2,226.01 1102.76,224.53 1103.33,230.24 1103.9,229.548 1104.47,230.961 1105.04,229.014 1105.61,229.446 1106.17,229.526 1106.74,229.51 1107.31,229.722 1107.88,226.711 1108.45,227.053 1109.02,227.214 1109.58,229.698 1110.15,228.998 1110.72,230.183 1111.29,231.317 1111.86,230.243 1112.43,230.488 1112.99,231.859 1113.56,231.974 1114.13,230.103 1114.7,234.365 1115.27,233.332 1115.84,232.327 1116.4,235.403 1116.97,234.138 1117.54,233.111 1118.11,231.853 1118.68,231.887 1119.25,233.875 1119.81,234.746 1120.38,235.563 1120.95,235.111 1121.52,238.098 1122.09,236.496 1122.66,235.162 1123.23,234.792 1123.79,236.458 1124.36,240.162 1124.93,240.824 1125.5,240.092 1126.07,239.565 1126.64,238.951 1127.2,242.497 1127.77,241.502 1128.34,242.891 1128.91,240.869 1129.48,239.121 1130.05,239.517 1130.61,238.782 1131.18,239.201 1131.75,238.302 1132.32,236.439 1132.89,236.867 1133.46,232.003 1134.02,231.951 1134.59,230.471 1135.16,229.275 1135.73,227.274 1136.3,227.509 1136.87,228.592 1137.43,229.72 1138,226.422 1138.57,226.395 1139.14,225.718 1139.71,227.052 1140.28,228.229 1140.84,231.443 1141.41,231.393 1141.98,231.295 1142.55,233.333 1143.12,233.048 1143.69,231.858 1144.25,231.812 1144.82,231.505 1145.39,233.295 1145.96,234.9 1146.53,234.283 1147.1,233.986 1147.66,233.396 1148.23,232.063 1148.8,232.495 1149.37,232.092 1149.94,230.679 1150.51,229.373 1151.07,230.184 1151.64,228.733 1152.21,225.751 1152.78,228.002 1153.35,227.115 1153.92,228.254 1154.48,228.32 1155.05,228.443 1155.62,228.528 1156.19,225.516 1156.76,227.051 1157.33,228.345 1157.89,229.426 1158.46,230.43 1159.03,229.387 1159.6,231.3 1160.17,231.091 1160.74,229.886 1161.3,229.002 1161.87,228.315 1162.44,227.219 1163.01,227.29 1163.58,228.489 1164.15,231.512 1164.71,231.429 1165.28,233.343 1165.85,230.129 1166.42,231.389 1166.99,230.536 1167.56,229.444 1168.12,227.371 1168.69,229.571 1169.26,229.426 1169.83,231.667 1170.4,232.315 1170.97,230.193 1171.53,229.121 1172.1,229.111 1172.67,228.018 1173.24,228.972 1173.81,227.03 1174.38,228.407 1174.94,228.588 1175.51,227.651 1176.08,230.929 1176.65,230.954 1177.22,230.987 1177.79,229.974 1178.35,228.006 1178.92,229.026 1179.49,228.033 1180.06,228.265 1180.63,228.238 1181.2,228.28 1181.76,226.253 1182.33,225.592 1182.9,224.837 1183.47,229.188 1184.04,230.165 1184.61,230.347 1185.17,229.262 1185.74,230.184 1186.31,229.066 1186.88,230.274 1187.45,231.477 1188.02,231.266 1188.58,231.331 1189.15,231.265 1189.72,230.853 1190.29,233.825 1190.86,233.666 1191.43,235.329 1192,234.889 1192.56,235.498 1193.13,235.139 1193.7,234.828 1194.27,233.422 1194.84,232.216 1195.41,231.04 1195.97,231.927 1196.54,230.848 1197.11,229.779 1197.68,230.894 1198.25,230.681 1198.82,231.653 1199.38,231.777 1199.95,232.615 1200.52,230.348 1201.09,228.31 1201.66,228.357 1202.23,230.45 1202.79,229.332 1203.36,230.445 1203.93,230.655 1204.5,228.894 1205.07,229.699 1205.64,227.626 1206.2,226.936 1206.77,228.406 1207.34,229.357 1207.91,229.479 1208.48,231.726 1209.05,231.709 1209.61,231.394 1210.18,230.925 1210.75,230.878 1211.32,230.946 1211.89,229.843 1212.46,229.568 1213.02,230.459 1213.59,230.244 1214.16,230.094 1214.73,230.986 1215.3,231.256 1215.87,232.055 1216.43,230.847 1217,231.75 1217.57,233.602 1218.14,234.503 1218.71,234.175 1219.28,231.821 1219.84,230.434 1220.41,229.267 1220.98,228.341 1221.55,228.282 1222.12,228.176 1222.69,228.288 1223.25,226.121 1223.82,225.236 1224.39,224.602 1224.96,225.104 1225.53,226.484 1226.1,228.634 1226.66,228.899 1227.23,228.859 1227.8,227.999 1228.37,226.062 1228.94,226.439 1229.51,225.671 1230.07,225.936 1230.64,226.376 1231.21,227.54 1231.78,226.655 1232.35,229.12 1232.92,227.197 1233.48,225.473 1234.05,223.736 1234.62,227.505 1235.19,226.852 1235.76,226.173 1236.33,228.488 1236.89,230.753 1237.46,231.704 1238.03,231.665 1238.6,232.709 1239.17,233.783 1239.74,231.493 1240.3,233.499 1240.87,232.173 1241.44,233.134 1242.01,230.988 1242.58,230.99 1243.15,229.058 1243.71,228.144 1244.28,228.533 1244.85,228.613 1245.42,228.63 1245.99,228.793 1246.56,228.944 1247.12,228.01 1247.69,228.979 1248.26,229.302 1248.83,231.291 1249.4,230.26 1249.97,231.494 1250.53,229.654 1251.1,231.769 1251.67,229.589 1252.24,231.83 1252.81,230.99 1253.38,233.327 1253.94,233.084 1254.51,232.995 1255.08,231.891 1255.65,228.726 1256.22,229.082 1256.79,227.274 1257.35,227.841 1257.92,225.903 1258.49,226.347 1259.06,225.537 1259.63,226.868 1260.2,224.022 1260.76,225.694 1261.33,226.15 1261.9,225.734 1262.47,226.417 1263.04,228.91 1263.61,230.066 1264.18,232.223 1264.74,231.458 1265.31,233.605 1265.88,234.324 1266.45,235.158 1267.02,232.589 1267.59,230.371 1268.15,228.407 1268.72,228.736 1269.29,231.955 1269.86,233.809 1270.43,233.683 1271,232.534 1271.56,232.54 1272.13,231.329 1272.7,231.389 1273.27,231.331 1273.84,232.442 1274.41,232.199 1274.97,230.044 1275.54,229.17 1276.11,227.28 1276.68,230.829 1277.25,230.18 1277.82,230.323 1278.38,227.169 1278.95,228.356 1279.52,229.57 1280.09,229.8 1280.66,231.012 1281.23,229.109 1281.79,230.121 1282.36,229.236 1282.93,230.515 1283.5,227.665 1284.07,227.915 1284.64,229.287 1285.2,228.375 1285.77,227.818 1286.34,229.42 1286.91,229.631 1287.48,230.912 1288.05,231.807 1288.61,230.827 1289.18,231.959 1289.75,231.055 1290.32,231.347 1290.89,231.43 1291.46,230.663 1292.02,230.746 1292.59,230.812 1293.16,230.991 1293.73,229.004 1294.3,228.15 1294.87,229.581 1295.43,230.715 1296,232.914 1296.57,234.004 1297.14,234.112 1297.71,232.994 1298.28,233.967 1298.84,236.016 1299.41,234.858 1299.98,234.819 1300.55,234.425 1301.12,234.321 1301.69,234.149 1302.25,231.958 1302.82,230.773 1303.39,230.879 1303.96,231.896 1304.53,232.646 1305.1,231.398 1305.66,231.276 1306.23,231.016 1306.8,228.814 1307.37,227.987 1307.94,229.504 1308.51,232.839 1309.07,230.677 1309.64,231.712 1310.21,229.745 1310.78,227.791 1311.35,229.086 1311.92,229.227 1312.48,230.39 1313.05,230.347 1313.62,231.492 1314.19,229.433 1314.76,229.732 1315.33,229.698 1315.89,231.771 1316.46,230.791 1317.03,232.836 1317.6,233.7 1318.17,233.542 1318.74,232.251 1319.3,231.386 1319.87,234.52 1320.44,236.306 1321.01,239.116 1321.58,237.304 1322.15,238.839 1322.71,238.052 1323.28,236.337 1323.85,236.878 1324.42,234.108 1324.99,232.702 1325.56,232.408 1326.12,234.209 1326.69,230.734 1327.26,228.553 1327.83,227.342 1328.4,227.705 1328.97,226.908 1329.53,225.914 1330.1,227.256 1330.67,225.4 1331.24,226.753 1331.81,226.787 1332.38,225.991 1332.94,227.39 1333.51,227.859 1334.08,226.095 1334.65,227.554 1335.22,227.839 1335.79,229.033 1336.36,230.358 1336.92,231.69 1337.49,232.771 1338.06,231.678 1338.63,231.72 1339.2,230.63 1339.77,230.832 1340.33,230.96 1340.9,232.033 1341.47,231.795 1342.04,231.615 1342.61,230.529 1343.18,231.495 1343.74,232.551 1344.31,232.42 1344.88,233.392 1345.45,234.145 1346.02,233.838 1346.59,230.239 1347.15,229.277 1347.72,227.517 1348.29,227.505 1348.86,227.709 1349.43,227.749 1350,230.053 1350.56,229.993 1351.13,229.144 1351.7,229.122 1352.27,227.21 1352.84,226.578 1353.41,226.988 1353.97,228.32 1354.54,229.425 1355.11,229.844 1355.68,228.847 1356.25,229.012 1356.82,231.448 1357.38,233.494 1357.95,232.22 1358.52,231.223 1359.09,232.352 1359.66,232.273 1360.23,232.236 1360.79,232.024 1361.36,235.007 1361.93,235.763 1362.5,236.405 1363.07,237.02 1363.64,237.555 1364.2,236.996 1364.77,235.594 1365.34,235.255 1365.91,233.913 1366.48,231.64 1367.05,231.551 1367.61,231.624 1368.18,233.652 1368.75,234.6 1369.32,234.317 1369.89,233.98 1370.46,234.845 1371.02,234.799 1371.59,236.554 1372.16,238.158 1372.73,237.343 1373.3,238.79 1373.87,238.235 1374.43,236.586 1375,238.069 1375.57,237.596 1376.14,237.013 1376.71,236.275 1377.28,233.793 1377.84,232.261 1378.41,230.167 1378.98,233.277 1379.55,232.947 1380.12,233.703 1380.69,232.07 1381.25,231.964 1381.82,231.724 1382.39,231.519 1382.96,231.248 1383.53,227.83 1384.1,225.851 1384.66,226.955 1385.23,227.988 1385.8,228.964 1386.37,227.692 1386.94,227.056 1387.51,229.308 1388.07,226.291 1388.64,225.482 1389.21,226.692 1389.78,222.961 1390.35,222.288 1390.92,223.869 1391.48,223.298 1392.05,222.725 1392.62,222.936 1393.19,224.413 1393.76,222.965 1394.33,223.307 1394.89,222.701 1395.46,225.216 1396.03,223.456 1396.6,221.798 1397.17,222.294 1397.74,221.776 1398.3,223.49 1398.87,222.808 1399.44,222.035 1400.01,225.696 1400.58,222.96 1401.15,221.372 1401.71,221.077 1402.28,224.9 1402.85,225.413 1403.42,226.031 1403.99,226.601 1404.56,225.979 1405.13,228.401 1405.69,228.748 1406.26,230.231 1406.83,232.449 1407.4,234.336 1407.97,235.11 1408.54,234.803 1409.1,233.442 1409.67,231.321 1410.24,230.378 1410.81,231.352 1411.38,232.534 1411.95,233.606 1412.51,233.294 1413.08,232.35 1413.65,232.272 1414.22,232.1 1414.79,233.25 1415.36,233.038 1415.92,233.933 1416.49,234.89 1417.06,233.792 1417.63,232.667 1418.2,231.566 1418.77,231.481 1419.33,231.456 1419.9,232.638 1420.47,232.478 1421.04,230.194 1421.61,230.136 1422.18,230.243 1422.74,230.526 1423.31,229.574 1423.88,229.727 1424.45,230.871 1425.02,232.985 1425.59,233.999 1426.15,235.825 1426.72,235.394 1427.29,233.833 1427.86,233.566 1428.43,234.464 1429,235.258 1429.56,233.928 1430.13,233.771 1430.7,233.351 1431.27,230.881 1431.84,231.897 1432.41,230.77 1432.97,229.792 1433.54,228.634 1434.11,228.911 1434.68,228.083 1435.25,228.362 1435.82,228.625 1436.38,228.949 1436.95,230.064 1437.52,229.158 1438.09,229.225 1438.66,230.304 1439.23,230.537 1439.79,232.506 1440.36,231.36 1440.93,232.326 1441.5,232.085 1442.07,232.717 1442.64,232.604 1443.2,231.514 1443.77,232.65 1444.34,230.496 1444.91,231.565 1445.48,231.667 1446.05,228.503 1446.61,230.706 1447.18,230.708 1447.75,231.876 1448.32,230.865 1448.89,230.036 1449.46,232.143 1450.02,231.14 1450.59,233.027 1451.16,231.693 1451.73,230.641 1452.3,231.588 1452.87,232.463 1453.43,232.423 1454,233.251 1454.57,234.092 1455.14,233.832 1455.71,234.475 1456.28,232.106 1456.84,235.229 1457.41,232.828 1457.98,232.647 1458.55,233.664 1459.12,233.331 1459.69,234.119 1460.25,233.846 1460.82,232.413 1461.39,232.068 1461.96,230.775 1462.53,230.696 1463.1,230.714 1463.66,229.56 1464.23,228.681 1464.8,228.823 1465.37,229.938 1465.94,227.693 1466.51,228.844 1467.07,230.132 1467.64,229.139 1468.21,228.308 1468.78,227.411 1469.35,227.582 1469.92,227.766 1470.48,227.691 1471.05,225.719 1471.62,225.907 1472.19,228.354 1472.76,229.554 1473.33,229.499 1473.89,231.488 1474.46,233.432 1475.03,233.144 1475.6,236.068 1476.17,236.642 1476.74,236.216 1477.31,239.092 1477.87,237.377 1478.44,234.56 1479.01,234.216 1479.58,230.693 1480.15,229.693 1480.72,229.453 1481.28,229.53 1481.85,228.601 1482.42,226.6 1482.99,226.886 1483.56,228.3 1484.13,226.509 1484.69,224.921 1485.26,224.497 1485.83,224.702 1486.4,225.035 1486.97,225.722 1487.54,225.097 1488.1,226.275 1488.67,225.761 1489.24,225.142 1489.81,226.412 1490.38,227.016 1490.95,227.319 1491.51,225.532 1492.08,223.983 1492.65,226.756 1493.22,226.115 1493.79,225.53 1494.36,227.037 1494.92,228.452 1495.49,230.666 1496.06,230.757 1496.63,230.717 1497.2,231.972 1497.77,233.076 1498.33,232.917 1498.9,235.042 1499.47,233.936 1500.04,233.796 1500.61,233.641 1501.18,234.483 1501.74,234.213 1502.31,235.868 1502.88,235.43 1503.45,233.28 1504.02,232.989 1504.59,230.871 1505.15,231.032 1505.72,229.901 1506.29,231.126 1506.86,232.169 1507.43,231.354 1508,230.299 1508.56,228.096 1509.13,227.304 1509.7,226.385 1510.27,229.701 1510.84,230.776 1511.41,230.667 1511.97,231.563 1512.54,231.755 1513.11,231.888 1513.68,232.92 1514.25,231.951 1514.82,232.041 1515.38,232.271 1515.95,230.185 1516.52,230.18 1517.09,233.339 1517.66,234.26 1518.23,232.97 1518.79,233.927 1519.36,233.553 1519.93,234.349 1520.5,235.016 1521.07,234.748 1521.64,234.63 1522.2,231.454 1522.77,230.213 1523.34,230.232 1523.91,231.262 1524.48,230.19 1525.05,229.324 1525.61,231.475 1526.18,232.225 1526.75,232.153 1527.32,234.096 1527.89,233.849 1528.46,233.718 1529.02,235.549 1529.59,233.977 1530.16,234.776 1530.73,233.657 1531.3,231.462 1531.87,230.435 1532.43,230.482 1533,229.383 1533.57,226.253 1534.14,225.652 1534.71,227.962 1535.28,228.057 1535.84,227.051 1536.41,229.37 1536.98,231.373 1537.55,232.084 1538.12,233.892 1538.69,234.686 1539.25,232.193 1539.82,233.067 1540.39,233.973 1540.96,233.663 1541.53,234.393 1542.1,234.005 1542.66,232.638 1543.23,233.418 1543.8,233.161 1544.37,233.138 1544.94,233.039 1545.51,231.572 1546.08,230.257 1546.64,229.17 1547.21,230.238 1547.78,232.218 1548.35,231.786 1548.92,231.45 1549.49,227.202 1550.05,224.219 1550.62,223.25 1551.19,223.646 1551.76,223.928 1552.33,225.572 1552.9,227.006 1553.46,228.159 1554.03,230.293 1554.6,231.117 1555.17,231.035 1555.74,230.099 1556.31,230.217 1556.87,230.068 1557.44,230.156 1558.01,230.138 1558.58,230.316 1559.15,232.329 1559.72,234.23 1560.28,231.793 1560.85,230.785 1561.42,230.657 1561.99,231.625 1562.56,229.535 1563.13,228.805 1563.69,231.936 1564.26,231.932 1564.83,231.694 1565.4,233.571 1565.97,232.368 1566.54,232.09 1567.1,230.975 1567.67,231.098 1568.24,232.064 1568.81,232.928 1569.38,232.53 1569.95,233.361 1570.51,233.069 1571.08,230.523 1571.65,228.427 1572.22,229.603 1572.79,228.586 1573.36,229.709 1573.92,228.537 1574.49,229.703 1575.06,229.626 1575.63,229.326 1576.2,231.009 1576.77,229.718 1577.33,229.676 1577.9,229.702 1578.47,228.553 1579.04,227.57 1579.61,227.719 1580.18,230.173 1580.74,230.225 1581.31,229.38 1581.88,229.305 1582.45,228.505 1583.02,227.587 1583.59,226.711 1584.15,227.005 1584.72,227.342 1585.29,228.476 1585.86,228.398 1586.43,228.65 1587,226.747 1587.56,227.062 1588.13,228.439 1588.7,229.652 1589.27,230.634 1589.84,230.618 1590.41,230.456 1590.97,228.133 1591.54,228.088 1592.11,229.395 1592.68,230.583 1593.25,230.433 1593.82,231.517 1594.38,233.689 1594.95,232.414 1595.52,231.453 1596.09,229.16 1596.66,231.221 1597.23,231.315 1597.79,231.346 1598.36,231.283 1598.93,232.12 1599.5,230.841 1600.07,231.86 1600.64,231.787 1601.2,230.491 1601.77,229.369 1602.34,229.573 1602.91,229.47 1603.48,231.598 1604.05,230.351 1604.61,230.342 1605.18,230.339 1605.75,232.355 1606.32,232.088 1606.89,232.001 1607.46,233.786 1608.02,232.524 1608.59,231.543 1609.16,231.776 1609.73,232.574 1610.3,233.615 1610.87,233.364 1611.43,235.076 1612,233.863 1612.57,231.452 1613.14,229.416 1613.71,231.49 1614.28,232.19 1614.84,231.014 1615.41,231.987 1615.98,231.744 1616.55,232.677 1617.12,232.564 1617.69,233.379 1618.26,232.07 1618.82,233.059 1619.39,234.787 1619.96,234.488 1620.53,235.192 1621.1,236.783 1621.67,235.292 1622.23,233.715 1622.8,236.223 1623.37,235.803 1623.94,234.369 1624.51,233.831 1625.08,232.415 1625.64,232.885 1626.21,230.616 1626.78,229.383 1627.35,232.491 1627.92,232.559 1628.49,229.377 1629.05,228.253 1629.62,227.245 1630.19,226.221 1630.76,226.423 1631.33,226.563 1631.9,226.568 1632.46,223.434 1633.03,223.915 1633.6,222.315 1634.17,222.793 1634.74,224.316 1635.31,224.705 1635.87,225.244 1636.44,224.63 1637.01,224 1637.58,225.566 1638.15,225.951 1638.72,226.395 1639.28,227.639 1639.85,227.971 1640.42,229.084 1640.99,229.164 1641.56,230.123 1642.13,228.163 1642.69,228.245 1643.26,226.478 1643.83,227.71 1644.4,227.948 1644.97,225.809 1645.54,227.227 1646.1,229.413 1646.67,230.638 1647.24,232.865 1647.81,232.76 1648.38,230.515 1648.95,229.581 1649.51,229.899 1650.08,228.02 1650.65,227.201 1651.22,227.608 1651.79,228.94 1652.36,229.161 1652.92,232.424 1653.49,233.419 1654.06,233.029 1654.63,232.939 1655.2,232.733 1655.77,234.294 1656.33,233.041 1656.9,227.607 1657.47,229.851 1658.04,227.852 1658.61,228.011 1659.18,228.14 1659.74,228.298 1660.31,229.767 1660.88,230.935 1661.45,229.912 1662.02,227.874 1662.59,226.008 1663.15,225.603 1663.72,229.217 1664.29,226.336 1664.86,227.612 1665.43,226.643 1666,226.939 1666.56,230.452 1667.13,230.638 1667.7,228.48 1668.27,229.549 1668.84,230.764 1669.41,229.819 1669.97,229.137 1670.54,230.331 1671.11,228.18 1671.68,226.211 1672.25,226.812 1672.82,229.248 1673.38,234.574 1673.95,235.368 1674.52,233.874 1675.09,232.683 1675.66,232.289 1676.23,230.203 1676.79,231.349 1677.36,231.385 1677.93,230.357 1678.5,230.333 1679.07,231.276 1679.64,231.38 1680.2,232.374 1680.77,235.493 1681.34,233.084 1681.91,232.025 1682.48,233.872 1683.05,234.53 1683.61,234.326 1684.18,235.364 1684.75,232.943 1685.32,233.88 1685.89,234.744 1686.46,234.471 1687.02,234.277 1687.59,235.161 1688.16,234.817 1688.73,235.714 1689.3,233.335 1689.87,233.058 1690.44,232.923 1691,232.89 1691.57,231.68 1692.14,230.686 1692.71,230.592 1693.28,231.46 1693.85,229.219 1694.41,228.15 1694.98,225.351 1695.55,225.611 1696.12,225.863 1696.69,221.222 1697.26,222.93 1697.82,225.726 1698.39,228.092 1698.96,229.241 1699.53,229.555 1700.1,229.726 1700.67,229.716 1701.23,230.833 1701.8,230.996 1702.37,229.843 1702.94,229.838 1703.51,227.833 1704.08,226.032 1704.64,228.618 1705.21,228.888 1705.78,227.216 1706.35,228.826 1706.92,229.16 1707.49,225.162 1708.05,227.587 1708.62,228.065 1709.19,227.393 1709.76,224.636 1710.33,222.934 1710.9,223.546 1711.46,228.261 1712.03,228.327 1712.6,229.712 1713.17,230.927 1713.74,230.866 1714.31,232.08 1714.87,233.044 1715.44,232.922 1716.01,230.727 1716.58,230.652 1717.15,232.76 1717.72,233.497 1718.28,232.543 1718.85,233.752 1719.42,234.717 1719.99,232.289 1720.56,231.009 1721.13,230.99 1721.69,230.769 1722.26,231.071 1722.83,230.214 1723.4,229.436 1723.97,229.361 1724.54,229.428 1725.1,229.638 1725.67,229.668 1726.24,230.934 1726.81,232.015 1727.38,232.065 1727.95,231.227 1728.51,234.556 1729.08,235.532 1729.65,233.219 1730.22,233.001 1730.79,232.87 1731.36,233.644 1731.92,231.303 1732.49,231.447 1733.06,230.677 1733.63,231.974 1734.2,231.082 1734.77,232.278 1735.33,232.306 1735.9,233.28 1736.47,232.223 1737.04,230.026 1737.61,230.233 1738.18,231.35 1738.74,232.338 1739.31,232.015 1739.88,231.915 1740.45,230.732 1741.02,230.785 1741.59,229.679 1742.15,230.681 1742.72,228.48 1743.29,229.571 1743.86,230.578 1744.43,230.646 1745,230.749 1745.56,228.754 1746.13,227.827 1746.7,227.17 1747.27,227.491 1747.84,229.724 1748.41,229.82 1748.97,232.998 1749.54,234.028 1750.11,233.798 1750.68,235.746 1751.25,235.286 1751.82,236.138 1752.38,234.87 1752.95,237.683 1753.52,239.138 1754.09,238.481 1754.66,234.84 1755.23,237.397 1755.79,239.943 1756.36,241.401 1756.93,240.57 1757.5,239.76 1758.07,239.086 1758.64,237.132 1759.21,236.543 1759.77,234.043 1760.34,234.76 1760.91,234.305 1761.48,232.873 1762.05,233.563 1762.62,234.31 1763.18,234.901 1763.75,234.342 1764.32,234.014 1764.89,231.556 1765.46,231.225 1766.03,231.935 1766.59,231.662 1767.16,230.459 1767.73,231.51 1768.3,233.313 1768.87,233.969 1769.44,234.495 1770,233.989 1770.57,233.414 1771.14,230.125 1771.71,229.918 1772.28,230.852 1772.85,228.785 1773.41,228.883 1773.98,228.902 1774.55,227.662 1775.12,227.603 1775.69,226.621 1776.26,226.842 1776.82,227.047 1777.39,226.154 1777.96,223.205 1778.53,223.573 1779.1,224.962 1779.67,226.267 1780.23,227.642 1780.8,226.763 1781.37,227.036 1781.94,228.329 1782.51,229.514 1783.08,229.526 1783.64,228.714 1784.21,227.969 1784.78,228.153 1785.35,228.506 1785.92,227.747 1786.49,225.678 1787.05,228.173 1787.62,228.397 1788.19,227.41 1788.76,225.583 1789.33,224.939 1789.9,225.221 1790.46,225.458 1791.03,226.714 1791.6,226.127 1792.17,224.09 1792.74,225.78 1793.31,227.046 1793.87,227.244 1794.44,228.496 1795.01,228.577 1795.58,227.647 1796.15,226.664 1796.72,229.934 1797.28,230.045 1797.85,231.219 1798.42,231.105 1798.99,232.143 1799.56,230.891 1800.13,231.855 1800.69,230.666 1801.26,228.493 1801.83,229.848 1802.4,231.901 1802.97,229.621 1803.54,229.718 1804.1,228.745 1804.67,230.059 1805.24,229.007 1805.81,229.163 1806.38,231.173 1806.95,226.168 1807.51,225.405 1808.08,226.645 1808.65,226.034 1809.22,225.44 1809.79,223.736 1810.36,223.255 1810.92,223.808 1811.49,225.333 1812.06,226.773 1812.63,227.097 1813.2,227.318 1813.77,227.86 1814.33,227.991 1814.9,229.373 1815.47,229.702 1816.04,230.868 1816.61,230.806 1817.18,230.89 1817.74,230.867 1818.31,229.857 1818.88,229.996 1819.45,230.276 1820.02,231.454 1820.59,234.603 1821.15,235.402 1821.72,235.185 1822.29,236.986 1822.86,235.312 1823.43,233.154 1824,231.138 1824.56,232.048 1825.13,231.015 1825.7,231.122 1826.27,232.344 1826.84,233.196 1827.41,233.221 1827.97,233.318 1828.54,232.081 1829.11,229.12 1829.68,231.097 1830.25,229.04 1830.82,230.293 1831.39,232.523 1831.95,231.243 1832.52,229.475 1833.09,231.735 1833.66,229.576 1834.23,230.6 1834.8,230.353 1835.36,229.276 1835.93,228.479 1836.5,230.639 1837.07,227.723 1837.64,228.174 1838.21,227.336 1838.77,228.629 1839.34,228.834 1839.91,229.883 1840.48,230.312 1841.05,230.421 1841.62,229.712 1842.18,231.003 1842.75,228.074 1843.32,227.544 1843.89,228.849 1844.46,229.099 1845.03,229.309 1845.59,230.502 1846.16,230.718 1846.73,231.658 1847.3,232.546 1847.87,233.666 1848.44,233.421 1849,233.303 1849.57,233.02 1850.14,231.748 1850.71,232.701 1851.28,232.742 1851.85,233.572 1852.41,234.178 1852.98,234.035 1853.55,233.824 1854.12,230.733 1854.69,233.96 1855.26,233.857 1855.82,232.599 1856.39,232.706 1856.96,231.723 1857.53,230.574 1858.1,230.52 1858.67,229.471 1859.23,230.575 1859.8,229.585 1860.37,230.595 1860.94,231.815 1861.51,232.855 1862.08,233.908 1862.64,234.808 1863.21,235.445 1863.78,236.035 1864.35,239.904 1864.92,239.263 1865.49,238.569 1866.05,236.044 1866.62,236.569 1867.19,236.072 1867.76,235.658 1868.33,235.27 1868.9,233.834 1869.46,232.492 1870.03,230.11 1870.6,231.12 1871.17,229.139 1871.74,228.206 1872.31,227.437 1872.87,228.602 1873.44,227.782 1874.01,224.941 1874.58,226.253 1875.15,227.531 1875.72,226.841 1876.28,227.148 1876.85,227.442 1877.42,226.931 1877.99,228.397 1878.56,228.628 1879.13,231.263 1879.69,230.102 1880.26,229.204 1880.83,228.264 1881.4,228.51 1881.97,228.449 1882.54,231.797 1883.1,230.783 1883.67,230.778 1884.24,230.711 1884.81,228.572 1885.38,226.575 1885.95,224.928 1886.51,223.997 1887.08,225.473 1887.65,225.824 1888.22,227.264 1888.79,225.605 1889.36,227.052 1889.92,226.159 1890.49,226.74 1891.06,227.02 1891.63,228.312 1892.2,230.467 1892.77,231.582 1893.33,230.409 1893.9,231.568 1894.47,231.359 1895.04,228.378 1895.61,231.597 1896.18,231.723 1896.74,231.916 1897.31,230.758 1897.88,228.512 1898.45,230.761 1899.02,230.75 1899.59,234.002 1900.16,232.72 1900.72,234.695 1901.29,233.615 1901.86,235.476 1902.43,234.174 1903,235.978 1903.57,234.498 1904.13,235.185 1904.7,234.827 1905.27,236.596 1905.84,236.122 1906.41,236.603 1906.98,236.181 1907.54,232.591 1908.11,231.448 1908.68,231.436 1909.25,232.367 1909.82,230.906 1910.39,231.797 1910.95,232.571 1911.52,230.455 1912.09,228.669 1912.66,228.396 1913.23,230.45 1913.8,230.267 1914.36,229.139 1914.93,227.171 1915.5,229.396 1916.07,228.207 1916.64,227.41 1917.21,229.582 1917.77,229.56 1918.34,229.606 1918.91,228.697 1919.48,228.833 1920.05,229.818 1920.62,230.995 1921.18,230.902 1921.75,232.914 1922.32,234.614 1922.89,234.258 1923.46,233.787 1924.03,233.575 1924.59,234.295 1925.16,234.01 1925.73,233.519 1926.3,234.22 1926.87,234.122 1927.44,232.939 1928,233.892 1928.57,233.765 1929.14,233.199 1929.71,232.873 1930.28,233.594 1930.85,231.446 1931.41,232.35 1931.98,229.158 1932.55,230.435 1933.12,229.628 1933.69,228.743 1934.26,227.874 1934.82,225.876 1935.39,228.093 1935.96,227.208 1936.53,226.49 1937.1,224.808 1937.67,224.235 1938.23,223.339 1938.8,223.994 1939.37,224.602 1939.94,224.067 1940.51,226.754 1941.08,226.917 1941.64,228.238 1942.21,229.604 1942.78,228.631 1943.35,227.855 1943.92,230.145 1944.49,231.048 1945.05,230.987 1945.62,230.87 1946.19,229.692 1946.76,229.78 1947.33,229.961 1947.9,227.94 1948.46,228.035 1949.03,229.108 1949.6,229.055 1950.17,230.209 1950.74,231.321 1951.31,231.463 1951.87,231.343 1952.44,230.259 1953.01,229.341 1953.58,229.35 1954.15,228.564 1954.72,227.713 1955.28,224.722 1955.85,225.234 1956.42,225.549 1956.99,225.948 1957.56,227.283 1958.13,227.484 1958.69,226.81 1959.26,226.986 1959.83,227.285 1960.4,226.649 1960.97,226.088 1961.54,227.643 1962.1,228.858 1962.67,232.112 1963.24,234.221 1963.81,235.067 1964.38,234.86 1964.95,235.786 1965.51,236.342 1966.08,234.853 1966.65,237.508 1967.22,237.084 1967.79,238.607 1968.36,239.313 1968.92,240.786 1969.49,240.043 1970.06,241.23 1970.63,243.495 1971.2,241.443 1971.77,241.568 1972.34,240.801 1972.9,239.057 1973.47,238.482 1974.04,237.715 1974.61,236.22 1975.18,236.62 1975.75,236.069 1976.31,234.522 1976.88,234.175 1977.45,233.863 1978.02,233.569 1978.59,228.96 1979.16,227.981 1979.72,229.152 1980.29,229.01 1980.86,229.076 1981.43,229.113 1982,229.224 1982.57,226.996 1983.13,229.209 1983.7,228.171 1984.27,226.042 1984.84,227.207 1985.41,228.534 1985.98,227.655 1986.54,227.683 1987.11,228.982 1987.68,227.857 1988.25,230.088 1988.82,225.984 1989.39,226.227 1989.95,225.343 1990.52,227.682 1991.09,227.623 1991.66,227.828 1992.23,228.034 1992.8,229.265 1993.36,228.252 1993.93,228.349 1994.5,227.372 1995.07,224.473 1995.64,226.91 1996.21,225.949 1996.77,225.221 1997.34,226.572 1997.91,226.928 1998.48,228.132 1999.05,227.274 1999.62,227.301 2000.18,228.599 2000.75,230.635 2001.32,230.509 2001.89,231.625 2002.46,231.569 2003.03,230.608 2003.59,229.419 2004.16,227.305 2004.73,225.471 2005.3,225.73 2005.87,226.264 2006.44,226.389 2007,227.763 2007.57,231.128 2008.14,232.991 2008.71,230.974 2009.28,234.067 2009.85,234.622 2010.41,234.353 2010.98,232.017 2011.55,233.036 2012.12,232.793 2012.69,231.532 2013.26,231.589 2013.82,230.485 2014.39,228.347 2014.96,227.715 2015.53,229.907 2016.1,231.877 2016.67,230.588 2017.23,230.633 2017.8,230.708 2018.37,233.644 2018.94,233.435 2019.51,233.206 2020.08,230.872 2020.64,228.772 2021.21,229.848 2021.78,231.038 2022.35,233.214 2022.92,231.852 2023.49,231.718 2024.05,231.618 2024.62,229.55 2025.19,228.876 2025.76,230.127 2026.33,231.04 2026.9,230.984 2027.46,231.097 2028.03,232.21 2028.6,231.07 2029.17,233.177 2029.74,229.957 2030.31,228.831 2030.87,229.091 2031.44,231.248 2032.01,231.016 2032.58,231.973 2033.15,230.737 2033.72,230.798 2034.28,227.586 2034.85,227.761 2035.42,229.251 2035.99,229.425 2036.56,228.289 2037.13,226.368 2037.69,225.832 2038.26,230.289 2038.83,230.198 2039.4,230.075 2039.97,231.227 2040.54,231.164 2041.11,230.344 2041.67,231.465 2042.24,233.685 2042.81,232.444 2043.38,232.422 2043.95,231.048 2044.52,231.048 2045.08,230.934 2045.65,231.055 2046.22,232.137 2046.79,231.015 2047.36,229.855 2047.93,229.632 2048.49,227.638 2049.06,227.816 2049.63,230.204 2050.2,232.403 2050.77,235.517 2051.34,235.225 2051.9,234.868 2052.47,234.702 2053.04,234.377 2053.61,232.076 2054.18,234.028 2054.75,233.595 2055.31,236.26 2055.88,235.642 2056.45,235.142 2057.02,234.087 2057.59,232.887 2058.16,231.816 2058.72,232.877 2059.29,234.681 2059.86,235.353 2060.43,236.044 2061,235.625 2061.57,236.237 2062.13,233.764 2062.7,232.206 2063.27,230.915 2063.84,230.609 2064.41,231.685 2064.98,232.456 2065.54,232.078 2066.11,228.849 2066.68,229.93 2067.25,230.799 2067.82,231.74 2068.39,231.648 2068.95,231.609 2069.52,231.348 2070.09,231.093 2070.66,231.739 2071.23,232.598 2071.8,229.108 2072.36,229.296 2072.93,229.145 2073.5,228.982 2074.07,229.991 2074.64,227.935 2075.21,229.065 2075.77,230.309 2076.34,230.108 2076.91,231.043 2077.48,229.908 2078.05,229.827 2078.62,229.86 2079.18,229.953 2079.75,229.947 2080.32,230.019 2080.89,227.936 2081.46,231.115 2082.03,230.184 2082.59,228.974 2083.16,230.299 2083.73,232.277 2084.3,230.828 2084.87,231.844 2085.44,231.722 2086,231.72 2086.57,232.407 2087.14,231.187 2087.71,231.447 2088.28,230.264 2088.85,231.22 2089.41,230.081 2089.98,229.855 2090.55,228.726 2091.12,228.476 2091.69,226.426 2092.26,226.623 2092.82,224.582 2093.39,225.923 2093.96,225.205 2094.53,225.472 2095.1,225.708 2095.67,224.959 2096.23,226.308 2096.8,225.502 2097.37,224.914 2097.94,226.283 2098.51,228.513 2099.08,227.356 2099.64,226.569 2100.21,225.78 2100.78,225.977 2101.35,225.244 2101.92,223.355 2102.49,226.97 2103.05,226.165 2103.62,225.298 2104.19,225.673 2104.76,228.182 2105.33,228.344 2105.9,229.558 2106.46,230.705 2107.03,232.726 2107.6,231.629 2108.17,232.049 2108.74,231.845 2109.31,230.822 2109.87,230.922 2110.44,232.073 2111.01,231.097 2111.58,233.01 2112.15,230.506 2112.72,232.455 2113.29,230.193 2113.85,230.082 2114.42,231.133 2114.99,231.283 2115.56,231.354 2116.13,232.4 2116.7,232.304 2117.26,231.164 2117.83,231.165 2118.4,231.126 2118.97,231.181 2119.54,231.216 2120.11,231.214 2120.67,231.051 2121.24,226.965 2121.81,226.398 2122.38,228.81 2122.95,229.233 2123.52,229.386 2124.08,230.513 2124.65,230.556 2125.22,228.515 2125.79,230.672 2126.36,229.954 2126.93,232.274 2127.49,232.156 2128.06,230.773 2128.63,230.923 2129.2,230.125 2129.77,230.191 2130.34,228.25 2130.9,230.68 2131.47,231.944 2132.04,231.781 2132.61,232.937 2133.18,231.768 2133.75,230.716 2134.31,230.819 2134.88,230.145 2135.45,230.415 2136.02,230.526 2136.59,231.722 2137.16,230.752 2137.72,230.887 2138.29,230.982 2138.86,230.894 2139.43,230.992 2140,229.026 2140.57,225.863 2141.13,228.093 2141.7,226.333 2142.27,225.822 2142.84,226.099 2143.41,223.502 2143.98,225.18 2144.54,225.718 2145.11,225.124 2145.68,225.555 2146.25,226.041 2146.82,226.477 2147.39,227.985 2147.95,229.221 2148.52,228.412 2149.09,229.881 2149.66,230.136 2150.23,229.198 2150.8,229.559 2151.36,230.742 2151.93,233.138 2152.5,231.161 2153.07,231.35 2153.64,232.206 2154.21,234.209 2154.77,235.127 2155.34,233.763 2155.91,233.703 2156.48,233.584 2157.05,232.425 2157.62,233.463 2158.18,232.393 2158.75,231.537 2159.32,232.567 2159.89,232.449 \"/>\n<path clip-path=\"url(#clip730)\" d=\"M1625.75 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1625.75 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip730)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1625.75,1245.03 2150.8,1245.03 2150.8,1089.51 1625.75,1089.51 1625.75,1245.03 \"/>\n<polyline clip-path=\"url(#clip730)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1645.83,1141.35 1766.28,1141.35 \"/>\n<path clip-path=\"url(#clip730)\" d=\"M1793.76 1125.34 L1793.76 1132.71 L1802.53 1132.71 L1802.53 1136.02 L1793.76 1136.02 L1793.76 1150.09 Q1793.76 1153.26 1794.61 1154.16 Q1795.49 1155.07 1798.16 1155.07 L1802.53 1155.07 L1802.53 1158.63 L1798.16 1158.63 Q1793.23 1158.63 1791.35 1156.8 Q1789.48 1154.95 1789.48 1150.09 L1789.48 1136.02 L1786.35 1136.02 L1786.35 1132.71 L1789.48 1132.71 L1789.48 1125.34 L1793.76 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M1819.92 1145.6 Q1814.75 1145.6 1812.76 1146.78 Q1810.77 1147.96 1810.77 1150.81 Q1810.77 1153.08 1812.25 1154.42 Q1813.76 1155.74 1816.33 1155.74 Q1819.87 1155.74 1822 1153.24 Q1824.15 1150.72 1824.15 1146.55 L1824.15 1145.6 L1819.92 1145.6 M1828.41 1143.84 L1828.41 1158.63 L1824.15 1158.63 L1824.15 1154.7 Q1822.69 1157.06 1820.52 1158.19 Q1818.34 1159.3 1815.19 1159.3 Q1811.21 1159.3 1808.85 1157.08 Q1806.51 1154.84 1806.51 1151.09 Q1806.51 1146.71 1809.43 1144.49 Q1812.37 1142.27 1818.18 1142.27 L1824.15 1142.27 L1824.15 1141.85 Q1824.15 1138.91 1822.21 1137.31 Q1820.29 1135.69 1816.79 1135.69 Q1814.57 1135.69 1812.46 1136.22 Q1810.36 1136.76 1808.41 1137.82 L1808.41 1133.89 Q1810.75 1132.98 1812.95 1132.54 Q1815.15 1132.08 1817.23 1132.08 Q1822.86 1132.08 1825.63 1135 Q1828.41 1137.91 1828.41 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M1852.21 1136.69 Q1851.49 1136.27 1850.63 1136.09 Q1849.8 1135.88 1848.78 1135.88 Q1845.17 1135.88 1843.23 1138.24 Q1841.3 1140.58 1841.3 1144.97 L1841.3 1158.63 L1837.02 1158.63 L1837.02 1132.71 L1841.3 1132.71 L1841.3 1136.73 Q1842.65 1134.37 1844.8 1133.24 Q1846.95 1132.08 1850.03 1132.08 Q1850.47 1132.08 1851 1132.15 Q1851.54 1132.2 1852.18 1132.31 L1852.21 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M1872.9 1145.37 Q1872.9 1140.74 1870.98 1138.19 Q1869.08 1135.65 1865.63 1135.65 Q1862.21 1135.65 1860.29 1138.19 Q1858.39 1140.74 1858.39 1145.37 Q1858.39 1149.97 1860.29 1152.52 Q1862.21 1155.07 1865.63 1155.07 Q1869.08 1155.07 1870.98 1152.52 Q1872.9 1149.97 1872.9 1145.37 M1877.16 1155.41 Q1877.16 1162.03 1874.22 1165.25 Q1871.28 1168.49 1865.22 1168.49 Q1862.97 1168.49 1860.98 1168.15 Q1858.99 1167.82 1857.11 1167.13 L1857.11 1162.98 Q1858.99 1164 1860.82 1164.49 Q1862.65 1164.97 1864.54 1164.97 Q1868.73 1164.97 1870.82 1162.78 Q1872.9 1160.6 1872.9 1156.18 L1872.9 1154.07 Q1871.58 1156.36 1869.52 1157.5 Q1867.46 1158.63 1864.59 1158.63 Q1859.82 1158.63 1856.91 1155 Q1853.99 1151.36 1853.99 1145.37 Q1853.99 1139.35 1856.91 1135.72 Q1859.82 1132.08 1864.59 1132.08 Q1867.46 1132.08 1869.52 1133.22 Q1871.58 1134.35 1872.9 1136.64 L1872.9 1132.71 L1877.16 1132.71 L1877.16 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M1908.11 1144.6 L1908.11 1146.69 L1888.53 1146.69 Q1888.8 1151.09 1891.17 1153.4 Q1893.55 1155.69 1897.79 1155.69 Q1900.24 1155.69 1902.53 1155.09 Q1904.85 1154.49 1907.11 1153.28 L1907.11 1157.31 Q1904.82 1158.28 1902.42 1158.79 Q1900.01 1159.3 1897.53 1159.3 Q1891.33 1159.3 1887.69 1155.69 Q1884.08 1152.08 1884.08 1145.92 Q1884.08 1139.56 1887.51 1135.83 Q1890.96 1132.08 1896.79 1132.08 Q1902.02 1132.08 1905.05 1135.46 Q1908.11 1138.82 1908.11 1144.6 M1903.85 1143.35 Q1903.8 1139.86 1901.88 1137.78 Q1899.98 1135.69 1896.84 1135.69 Q1893.27 1135.69 1891.12 1137.71 Q1888.99 1139.72 1888.67 1143.38 L1903.85 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M1919.31 1125.34 L1919.31 1132.71 L1928.09 1132.71 L1928.09 1136.02 L1919.31 1136.02 L1919.31 1150.09 Q1919.31 1153.26 1920.17 1154.16 Q1921.05 1155.07 1923.71 1155.07 L1928.09 1155.07 L1928.09 1158.63 L1923.71 1158.63 Q1918.78 1158.63 1916.91 1156.8 Q1915.03 1154.95 1915.03 1150.09 L1915.03 1136.02 L1911.91 1136.02 L1911.91 1132.71 L1915.03 1132.71 L1915.03 1125.34 L1919.31 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M1953.39 1166.5 L1953.39 1169.81 L1928.76 1169.81 L1928.76 1166.5 L1953.39 1166.5 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip730)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1645.83,1193.19 1766.28,1193.19 \"/>\n<path clip-path=\"url(#clip730)\" d=\"M1808.06 1194.82 L1808.06 1210.47 L1803.8 1210.47 L1803.8 1194.96 Q1803.8 1191.28 1802.37 1189.45 Q1800.93 1187.62 1798.06 1187.62 Q1794.61 1187.62 1792.62 1189.82 Q1790.63 1192.02 1790.63 1195.82 L1790.63 1210.47 L1786.35 1210.47 L1786.35 1184.55 L1790.63 1184.55 L1790.63 1188.57 Q1792.16 1186.24 1794.22 1185.08 Q1796.3 1183.92 1799.01 1183.92 Q1803.48 1183.92 1805.77 1186.7 Q1808.06 1189.45 1808.06 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M1826.61 1187.53 Q1823.18 1187.53 1821.19 1190.22 Q1819.2 1192.88 1819.2 1197.53 Q1819.2 1202.18 1821.17 1204.87 Q1823.16 1207.53 1826.61 1207.53 Q1830.01 1207.53 1832 1204.85 Q1833.99 1202.16 1833.99 1197.53 Q1833.99 1192.93 1832 1190.24 Q1830.01 1187.53 1826.61 1187.53 M1826.61 1183.92 Q1832.16 1183.92 1835.33 1187.53 Q1838.5 1191.14 1838.5 1197.53 Q1838.5 1203.9 1835.33 1207.53 Q1832.16 1211.14 1826.61 1211.14 Q1821.03 1211.14 1817.86 1207.53 Q1814.71 1203.9 1814.71 1197.53 Q1814.71 1191.14 1817.86 1187.53 Q1821.03 1183.92 1826.61 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M1860.59 1188.53 Q1859.87 1188.11 1859.01 1187.93 Q1858.18 1187.72 1857.16 1187.72 Q1853.55 1187.72 1851.61 1190.08 Q1849.68 1192.42 1849.68 1196.81 L1849.68 1210.47 L1845.4 1210.47 L1845.4 1184.55 L1849.68 1184.55 L1849.68 1188.57 Q1851.03 1186.21 1853.18 1185.08 Q1855.33 1183.92 1858.41 1183.92 Q1858.85 1183.92 1859.38 1183.99 Q1859.92 1184.04 1860.56 1184.15 L1860.59 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip730)\" d=\"M1884.41 1189.52 Q1886 1186.65 1888.23 1185.29 Q1890.45 1183.92 1893.46 1183.92 Q1897.51 1183.92 1899.71 1186.77 Q1901.91 1189.59 1901.91 1194.82 L1901.91 1210.47 L1897.62 1210.47 L1897.62 1194.96 Q1897.62 1191.24 1896.3 1189.43 Q1894.98 1187.62 1892.28 1187.62 Q1888.97 1187.62 1887.04 1189.82 Q1885.12 1192.02 1885.12 1195.82 L1885.12 1210.47 L1880.84 1210.47 L1880.84 1194.96 Q1880.84 1191.21 1879.52 1189.43 Q1878.2 1187.62 1875.45 1187.62 Q1872.18 1187.62 1870.26 1189.85 Q1868.34 1192.05 1868.34 1195.82 L1868.34 1210.47 L1864.06 1210.47 L1864.06 1184.55 L1868.34 1184.55 L1868.34 1188.57 Q1869.8 1186.19 1871.84 1185.06 Q1873.87 1183.92 1876.67 1183.92 Q1879.5 1183.92 1881.47 1185.36 Q1883.46 1186.79 1884.41 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.036 ± 0.025\n  with uncertainty of ± 0.002275740370598819\n  from 62 blocks after 5 transformations (k = 6).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.01246 ± (0.00288692, 0.00288704) (MC)\n  95% confidence interval: [-4.01811, -4.00692]) (MC)\n  linear error propagation: -4.01323 ± 0.00283042\n  |δ_y| = |0.00193758| (≤ 0.1 for normal approx)\n  Blocking successful with 15 blocks after 7 transformations (k = 8).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.0124640607660815, val_l = 0.005640972185731563, val_u = 0.005546063779537036)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.step, df.shift, ylabel=\"energy\", xlabel=\"step\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.step[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.step[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip760\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip760)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip761\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip760)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip762\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip762)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip762)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip762)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip762)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip760)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip760)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip760)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip760)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip760)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip760)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1237.32 1391.71 L1237.32 1397.25 Q1234.84 1395.98 1232.17 1395.34 Q1229.49 1394.71 1226.63 1394.71 Q1222.27 1394.71 1220.07 1396.04 Q1217.91 1397.38 1217.91 1400.05 Q1217.91 1402.09 1219.47 1403.27 Q1221.03 1404.41 1225.74 1405.46 L1227.74 1405.91 Q1233.98 1407.25 1236.59 1409.7 Q1239.23 1412.12 1239.23 1416.48 Q1239.23 1421.44 1235.29 1424.34 Q1231.37 1427.23 1224.5 1427.23 Q1221.63 1427.23 1218.51 1426.66 Q1215.42 1426.12 1211.99 1425.01 L1211.99 1418.96 Q1215.23 1420.65 1218.38 1421.51 Q1221.54 1422.33 1224.62 1422.33 Q1228.76 1422.33 1230.99 1420.93 Q1233.22 1419.5 1233.22 1416.92 Q1233.22 1414.54 1231.59 1413.26 Q1230 1411.99 1224.56 1410.81 L1222.52 1410.33 Q1217.08 1409.19 1214.66 1406.83 Q1212.24 1404.45 1212.24 1400.31 Q1212.24 1395.28 1215.81 1392.54 Q1219.37 1389.8 1225.93 1389.8 Q1229.17 1389.8 1232.04 1390.28 Q1234.9 1390.76 1237.32 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1254.35 1380.54 L1254.35 1390.66 L1266.41 1390.66 L1266.41 1395.22 L1254.35 1395.22 L1254.35 1414.57 Q1254.35 1418.93 1255.53 1420.17 Q1256.74 1421.41 1260.4 1421.41 L1266.41 1421.41 L1266.41 1426.31 L1260.4 1426.31 Q1253.62 1426.31 1251.04 1423.8 Q1248.46 1421.25 1248.46 1414.57 L1248.46 1395.22 L1244.17 1395.22 L1244.17 1390.66 L1248.46 1390.66 L1248.46 1380.54 L1254.35 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1304.61 1407.02 L1304.61 1409.89 L1277.68 1409.89 Q1278.06 1415.94 1281.31 1419.12 Q1284.59 1422.27 1290.41 1422.27 Q1293.79 1422.27 1296.94 1421.44 Q1300.12 1420.61 1303.24 1418.96 L1303.24 1424.5 Q1300.09 1425.83 1296.78 1426.53 Q1293.47 1427.23 1290.06 1427.23 Q1281.53 1427.23 1276.54 1422.27 Q1271.57 1417.3 1271.57 1408.84 Q1271.57 1400.08 1276.28 1394.96 Q1281.02 1389.8 1289.04 1389.8 Q1296.24 1389.8 1300.41 1394.45 Q1304.61 1399.07 1304.61 1407.02 M1298.75 1405.3 Q1298.69 1400.5 1296.05 1397.63 Q1293.44 1394.77 1289.11 1394.77 Q1284.21 1394.77 1281.25 1397.54 Q1278.32 1400.31 1277.87 1405.34 L1298.75 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1319.89 1420.96 L1319.89 1439.87 L1314 1439.87 L1314 1390.66 L1319.89 1390.66 L1319.89 1396.07 Q1321.73 1392.89 1324.53 1391.36 Q1327.37 1389.8 1331.28 1389.8 Q1337.77 1389.8 1341.82 1394.96 Q1345.89 1400.12 1345.89 1408.52 Q1345.89 1416.92 1341.82 1422.08 Q1337.77 1427.23 1331.28 1427.23 Q1327.37 1427.23 1324.53 1425.71 Q1321.73 1424.15 1319.89 1420.96 M1339.81 1408.52 Q1339.81 1402.06 1337.14 1398.4 Q1334.5 1394.71 1329.85 1394.71 Q1325.2 1394.71 1322.53 1398.4 Q1319.89 1402.06 1319.89 1408.52 Q1319.89 1414.98 1322.53 1418.67 Q1325.2 1422.33 1329.85 1422.33 Q1334.5 1422.33 1337.14 1418.67 Q1339.81 1414.98 1339.81 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip762)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1154.84 2211.02,1154.84 \"/>\n<polyline clip-path=\"url(#clip762)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1001.37 2211.02,1001.37 \"/>\n<polyline clip-path=\"url(#clip762)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,847.889 2211.02,847.889 \"/>\n<polyline clip-path=\"url(#clip762)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,694.412 2211.02,694.412 \"/>\n<polyline clip-path=\"url(#clip762)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,540.935 2211.02,540.935 \"/>\n<polyline clip-path=\"url(#clip762)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,387.458 2211.02,387.458 \"/>\n<polyline clip-path=\"url(#clip762)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,233.981 2211.02,233.981 \"/>\n<polyline clip-path=\"url(#clip760)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip760)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1154.84 365.751,1154.84 \"/>\n<polyline clip-path=\"url(#clip760)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1001.37 365.751,1001.37 \"/>\n<polyline clip-path=\"url(#clip760)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,847.889 365.751,847.889 \"/>\n<polyline clip-path=\"url(#clip760)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,694.412 365.751,694.412 \"/>\n<polyline clip-path=\"url(#clip760)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,540.935 365.751,540.935 \"/>\n<polyline clip-path=\"url(#clip760)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,387.458 365.751,387.458 \"/>\n<polyline clip-path=\"url(#clip760)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,233.981 365.751,233.981 \"/>\n<path clip-path=\"url(#clip760)\" d=\"M298.909 1140.64 Q295.298 1140.64 293.469 1144.21 Q291.664 1147.75 291.664 1154.88 Q291.664 1161.98 293.469 1165.55 Q295.298 1169.09 298.909 1169.09 Q302.543 1169.09 304.349 1165.55 Q306.177 1161.98 306.177 1154.88 Q306.177 1147.75 304.349 1144.21 Q302.543 1140.64 298.909 1140.64 M298.909 1136.94 Q304.719 1136.94 307.775 1141.54 Q310.853 1146.13 310.853 1154.88 Q310.853 1163.6 307.775 1168.21 Q304.719 1172.79 298.909 1172.79 Q293.099 1172.79 290.02 1168.21 Q286.964 1163.6 286.964 1154.88 Q286.964 1146.13 290.02 1141.54 Q293.099 1136.94 298.909 1136.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M259.557 1014.71 L267.196 1014.71 L267.196 988.345 L258.886 990.012 L258.886 985.753 L267.15 984.086 L271.826 984.086 L271.826 1014.71 L279.465 1014.71 L279.465 1018.65 L259.557 1018.65 L259.557 1014.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M298.909 987.165 Q295.298 987.165 293.469 990.73 Q291.664 994.271 291.664 1001.4 Q291.664 1008.51 293.469 1012.07 Q295.298 1015.61 298.909 1015.61 Q302.543 1015.61 304.349 1012.07 Q306.177 1008.51 306.177 1001.4 Q306.177 994.271 304.349 990.73 Q302.543 987.165 298.909 987.165 M298.909 983.461 Q304.719 983.461 307.775 988.068 Q310.853 992.651 310.853 1001.4 Q310.853 1010.13 307.775 1014.73 Q304.719 1019.32 298.909 1019.32 Q293.099 1019.32 290.02 1014.73 Q286.964 1010.13 286.964 1001.4 Q286.964 992.651 290.02 988.068 Q293.099 983.461 298.909 983.461 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M262.775 861.234 L279.094 861.234 L279.094 865.169 L257.15 865.169 L257.15 861.234 Q259.812 858.479 264.395 853.85 Q269.002 849.197 270.182 847.855 Q272.428 845.331 273.307 843.595 Q274.21 841.836 274.21 840.146 Q274.21 837.392 272.266 835.656 Q270.344 833.919 267.242 833.919 Q265.043 833.919 262.59 834.683 Q260.159 835.447 257.381 836.998 L257.381 832.276 Q260.205 831.142 262.659 830.563 Q265.113 829.984 267.15 829.984 Q272.52 829.984 275.715 832.669 Q278.909 835.355 278.909 839.845 Q278.909 841.975 278.099 843.896 Q277.312 845.794 275.205 848.387 Q274.627 849.058 271.525 852.276 Q268.423 855.47 262.775 861.234 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M298.909 833.688 Q295.298 833.688 293.469 837.253 Q291.664 840.794 291.664 847.924 Q291.664 855.03 293.469 858.595 Q295.298 862.137 298.909 862.137 Q302.543 862.137 304.349 858.595 Q306.177 855.03 306.177 847.924 Q306.177 840.794 304.349 837.253 Q302.543 833.688 298.909 833.688 M298.909 829.984 Q304.719 829.984 307.775 834.591 Q310.853 839.174 310.853 847.924 Q310.853 856.651 307.775 861.257 Q304.719 865.841 298.909 865.841 Q293.099 865.841 290.02 861.257 Q286.964 856.651 286.964 847.924 Q286.964 839.174 290.02 834.591 Q293.099 829.984 298.909 829.984 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M272.914 693.058 Q276.27 693.776 278.145 696.044 Q280.043 698.313 280.043 701.646 Q280.043 706.762 276.525 709.563 Q273.006 712.364 266.525 712.364 Q264.349 712.364 262.034 711.924 Q259.742 711.507 257.289 710.651 L257.289 706.137 Q259.233 707.271 261.548 707.85 Q263.863 708.428 266.386 708.428 Q270.784 708.428 273.076 706.692 Q275.39 704.956 275.39 701.646 Q275.39 698.591 273.238 696.878 Q271.108 695.141 267.289 695.141 L263.261 695.141 L263.261 691.299 L267.474 691.299 Q270.923 691.299 272.752 689.933 Q274.58 688.544 274.58 685.952 Q274.58 683.29 272.682 681.878 Q270.807 680.442 267.289 680.442 Q265.367 680.442 263.168 680.859 Q260.969 681.276 258.33 682.155 L258.33 677.989 Q260.992 677.248 263.307 676.878 Q265.645 676.507 267.705 676.507 Q273.029 676.507 276.131 678.938 Q279.233 681.345 279.233 685.466 Q279.233 688.336 277.59 690.327 Q275.946 692.294 272.914 693.058 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M298.909 680.211 Q295.298 680.211 293.469 683.776 Q291.664 687.317 291.664 694.447 Q291.664 701.553 293.469 705.118 Q295.298 708.66 298.909 708.66 Q302.543 708.66 304.349 705.118 Q306.177 701.553 306.177 694.447 Q306.177 687.317 304.349 683.776 Q302.543 680.211 298.909 680.211 M298.909 676.507 Q304.719 676.507 307.775 681.114 Q310.853 685.697 310.853 694.447 Q310.853 703.174 307.775 707.78 Q304.719 712.364 298.909 712.364 Q293.099 712.364 290.02 707.78 Q286.964 703.174 286.964 694.447 Q286.964 685.697 290.02 681.114 Q293.099 676.507 298.909 676.507 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M271.594 527.729 L259.789 546.178 L271.594 546.178 L271.594 527.729 M270.367 523.655 L276.247 523.655 L276.247 546.178 L281.177 546.178 L281.177 550.067 L276.247 550.067 L276.247 558.215 L271.594 558.215 L271.594 550.067 L255.992 550.067 L255.992 545.553 L270.367 523.655 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M298.909 526.734 Q295.298 526.734 293.469 530.299 Q291.664 533.84 291.664 540.97 Q291.664 548.077 293.469 551.641 Q295.298 555.183 298.909 555.183 Q302.543 555.183 304.349 551.641 Q306.177 548.077 306.177 540.97 Q306.177 533.84 304.349 530.299 Q302.543 526.734 298.909 526.734 M298.909 523.03 Q304.719 523.03 307.775 527.637 Q310.853 532.22 310.853 540.97 Q310.853 549.697 307.775 554.303 Q304.719 558.887 298.909 558.887 Q293.099 558.887 290.02 554.303 Q286.964 549.697 286.964 540.97 Q286.964 532.22 290.02 527.637 Q293.099 523.03 298.909 523.03 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M258.793 370.178 L277.15 370.178 L277.15 374.114 L263.076 374.114 L263.076 382.586 Q264.094 382.239 265.113 382.076 Q266.131 381.891 267.15 381.891 Q272.937 381.891 276.316 385.063 Q279.696 388.234 279.696 393.651 Q279.696 399.229 276.224 402.331 Q272.752 405.41 266.432 405.41 Q264.256 405.41 261.988 405.039 Q259.742 404.669 257.335 403.928 L257.335 399.229 Q259.418 400.363 261.641 400.919 Q263.863 401.475 266.34 401.475 Q270.344 401.475 272.682 399.368 Q275.02 397.262 275.02 393.651 Q275.02 390.039 272.682 387.933 Q270.344 385.826 266.34 385.826 Q264.465 385.826 262.59 386.243 Q260.738 386.66 258.793 387.539 L258.793 370.178 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M298.909 373.257 Q295.298 373.257 293.469 376.822 Q291.664 380.364 291.664 387.493 Q291.664 394.6 293.469 398.164 Q295.298 401.706 298.909 401.706 Q302.543 401.706 304.349 398.164 Q306.177 394.6 306.177 387.493 Q306.177 380.364 304.349 376.822 Q302.543 373.257 298.909 373.257 M298.909 369.553 Q304.719 369.553 307.775 374.16 Q310.853 378.743 310.853 387.493 Q310.853 396.22 307.775 400.826 Q304.719 405.41 298.909 405.41 Q293.099 405.41 290.02 400.826 Q286.964 396.22 286.964 387.493 Q286.964 378.743 290.02 374.16 Q293.099 369.553 298.909 369.553 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M269.326 232.118 Q266.178 232.118 264.326 234.271 Q262.497 236.424 262.497 240.174 Q262.497 243.9 264.326 246.076 Q266.178 248.229 269.326 248.229 Q272.474 248.229 274.303 246.076 Q276.154 243.9 276.154 240.174 Q276.154 236.424 274.303 234.271 Q272.474 232.118 269.326 232.118 M278.608 217.465 L278.608 221.725 Q276.849 220.891 275.043 220.451 Q273.261 220.012 271.502 220.012 Q266.872 220.012 264.418 223.137 Q261.988 226.262 261.641 232.581 Q263.006 230.567 265.066 229.502 Q267.127 228.414 269.603 228.414 Q274.812 228.414 277.821 231.586 Q280.853 234.734 280.853 240.174 Q280.853 245.498 277.705 248.715 Q274.557 251.933 269.326 251.933 Q263.33 251.933 260.159 247.349 Q256.988 242.743 256.988 234.016 Q256.988 225.822 260.877 220.961 Q264.766 216.076 271.316 216.076 Q273.076 216.076 274.858 216.424 Q276.664 216.771 278.608 217.465 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M298.909 219.78 Q295.298 219.78 293.469 223.345 Q291.664 226.887 291.664 234.016 Q291.664 241.123 293.469 244.687 Q295.298 248.229 298.909 248.229 Q302.543 248.229 304.349 244.687 Q306.177 241.123 306.177 234.016 Q306.177 226.887 304.349 223.345 Q302.543 219.78 298.909 219.78 M298.909 216.076 Q304.719 216.076 307.775 220.683 Q310.853 225.266 310.853 234.016 Q310.853 242.743 307.775 247.349 Q304.719 251.933 298.909 251.933 Q293.099 251.933 290.02 247.349 Q286.964 242.743 286.964 234.016 Q286.964 225.266 290.02 220.683 Q293.099 216.076 298.909 216.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip762)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1041.76 400.199,937.865 400.786,842.541 401.372,755.208 401.958,675.335 402.545,602.429 403.131,536.034 403.718,475.726 404.304,421.11 404.891,371.818 405.477,327.506 406.063,371.894 406.65,332.846 407.236,298.06 407.823,334.75 408.409,304.836 408.995,278.539 409.582,255.619 410.168,236.768 410.755,219.895 411.341,295.42 411.927,359.918 412.514,381.428 413.1,367.861 413.687,387.78 414.273,376.93 414.86,394.953 415.446,387.35 416.032,405.502 416.619,401.024 417.205,397.635 417.792,417.11 418.378,436.694 418.964,436.804 419.551,437.463 420.137,439.5 420.724,442.584 421.31,446.468 421.896,478.573 422.483,483.045 423.069,488.113 423.656,516.537 424.242,542.693 424.829,558.799 425.415,574.628 426.001,580.55 426.588,596.192 427.174,610.704 427.761,617.492 428.347,624.525 428.933,645.644 429.52,652.593 430.106,672.932 430.693,685.581 431.279,698.315 431.865,705.021 432.452,711.329 433.038,724.048 433.625,736.035 434.211,743.268 434.798,750.57 435.384,767.255 435.97,778.751 436.557,785.62 437.143,792.685 437.73,811.829 438.316,830.356 438.902,837.166 439.489,847.363 440.075,853.78 440.662,863.968 441.248,873.826 441.835,883.387 442.421,893.005 443.007,908.576 443.594,920.401 444.18,926.245 444.767,931.876 445.353,943.103 445.939,951.259 446.526,959.144 447.112,964.608 447.699,972.668 448.285,983.223 448.871,990.833 449.458,1000.53 450.044,1007.76 450.631,1017.18 451.217,1021.87 451.804,1031.35 452.39,1037.84 452.976,1044.02 453.563,1054.66 454.149,1066.65 454.736,1074.25 455.322,1079.65 455.908,1082.44 456.495,1087.31 457.081,1094.01 457.668,1104.66 458.254,1111 458.84,1115.57 459.427,1121.81 460.013,1123.88 460.6,1126.31 461.186,1128.95 461.773,1134.65 462.359,1138.54 462.945,1140.69 463.532,1145.83 464.118,1149.11 464.705,1160.75 465.291,1162.21 465.877,1168.63 466.464,1169.68 467.05,1172.48 467.637,1172.01 468.223,1178.06 468.809,1185.48 469.396,1186.24 469.982,1187.03 470.569,1189.25 471.155,1191.43 471.742,1195.62 472.328,1199.1 472.914,1206.89 473.501,1211.3 474.087,1211.28 474.674,1211.57 475.26,1211.57 475.846,1218.97 476.433,1220.33 477.019,1224.35 477.606,1222.82 478.192,1222.53 478.778,1222.36 479.365,1222.34 479.951,1222.1 480.538,1222.09 481.124,1223.73 481.711,1226.53 482.297,1229.16 482.883,1230.21 483.47,1234.22 484.056,1236.4 484.643,1241.28 485.229,1240.6 485.815,1243.94 486.402,1243.29 486.988,1241.12 487.575,1244.46 488.161,1248.8 488.748,1247.64 489.334,1245.26 489.92,1244.11 490.507,1243.31 491.093,1245.01 491.68,1244.15 492.266,1244.65 492.852,1245.27 493.439,1241.5 494.025,1241.96 494.612,1241.49 495.198,1242.35 495.784,1244.38 496.371,1242.24 496.957,1243.02 497.544,1241.22 498.13,1240.41 498.717,1238.57 499.303,1238.48 499.889,1237.88 500.476,1237.48 501.062,1237.44 501.649,1239.98 502.235,1238.26 502.821,1238.12 503.408,1239.18 503.994,1237.59 504.581,1237.2 505.167,1238.45 505.753,1240.8 506.34,1244.35 506.926,1242.54 507.513,1240.92 508.099,1241.76 508.686,1244.12 509.272,1245.21 509.858,1244.66 510.445,1243.06 511.031,1243.72 511.618,1244.76 512.204,1242.95 512.79,1242.5 513.377,1242.42 513.963,1242.03 514.55,1242.98 515.136,1242.7 515.722,1243.44 516.309,1246.72 516.895,1247.4 517.482,1249.28 518.068,1248.54 518.655,1249.13 519.241,1249.93 519.827,1250.53 520.414,1250.11 521,1249.55 521.587,1248.65 522.173,1247.93 522.759,1246.06 523.346,1245.62 523.932,1246.52 524.519,1244.86 525.105,1239.52 525.691,1240.4 526.278,1240.17 526.864,1241.36 527.451,1242.38 528.037,1243.54 528.624,1244.24 529.21,1243.54 529.796,1244.04 530.383,1243.55 530.969,1244.48 531.556,1247.67 532.142,1247.31 532.728,1249.3 533.315,1248.57 533.901,1250.07 534.488,1249.29 535.074,1249.94 535.661,1249.03 536.247,1247.13 536.833,1248.81 537.42,1246.7 538.006,1245.99 538.593,1242.93 539.179,1242.66 539.765,1240.85 540.352,1240.88 540.938,1243.05 541.525,1246.23 542.111,1246.86 542.697,1244.71 543.284,1242.94 543.87,1242.57 544.457,1243.22 545.043,1244.09 545.63,1243.52 546.216,1244.4 546.802,1244.05 547.389,1243.72 547.975,1245.7 548.562,1246.32 549.148,1244.61 549.734,1245.37 550.321,1247.37 550.907,1247.73 551.494,1246.83 552.08,1248.66 552.666,1246.41 553.253,1245.79 553.839,1243.95 554.426,1242.17 555.012,1241.63 555.599,1243.71 556.185,1241.68 556.771,1242.75 557.358,1243.4 557.944,1239.86 558.531,1240.77 559.117,1240.25 559.703,1239.91 560.29,1236.89 560.876,1241.82 561.463,1240.17 562.049,1241.05 562.635,1236.72 563.222,1235.02 563.808,1236.14 564.395,1237.16 564.981,1238.19 565.568,1238.99 566.154,1238.71 566.74,1238.33 567.327,1241.6 567.913,1242.29 568.5,1244.01 569.086,1243.11 569.672,1242.15 570.259,1243.02 570.845,1242.5 571.432,1239.21 572.018,1239.9 572.605,1240.91 573.191,1239.24 573.777,1237.37 574.364,1235.82 574.95,1235.6 575.537,1236.42 576.123,1236.01 576.709,1237.02 577.296,1236.51 577.882,1233.47 578.469,1229.72 579.055,1231.21 579.641,1231.45 580.228,1236.4 580.814,1234.7 581.401,1235.53 581.987,1237.87 582.574,1237.53 583.16,1235.79 583.746,1234.21 584.333,1232.76 584.919,1232.7 585.506,1230.89 586.092,1232.02 586.678,1231.8 587.265,1230.27 587.851,1228.94 588.438,1228.96 589.024,1227.74 589.61,1227.74 590.197,1227.96 590.783,1229.26 591.37,1229.31 591.956,1234.54 592.543,1234.07 593.129,1237.52 593.715,1236.13 594.302,1236.84 594.888,1236.4 595.475,1237.03 596.061,1235.42 596.647,1236.47 597.234,1237.33 597.82,1235.86 598.407,1236.73 598.993,1236.23 599.579,1236.97 600.166,1237.68 600.752,1236.07 601.339,1231.83 601.925,1231.89 602.512,1233 603.098,1234.14 603.684,1231.37 604.271,1233.59 604.857,1235.6 605.444,1233.85 606.03,1234.89 606.616,1235.7 607.203,1235.5 607.789,1236.26 608.376,1235.62 608.962,1232.73 609.548,1231.14 610.135,1232.09 610.721,1231.44 611.308,1232.65 611.894,1233.53 612.481,1233.47 613.067,1234.28 613.653,1233.97 614.24,1233.78 614.826,1231.98 615.413,1230.34 615.999,1229 616.585,1227.72 617.172,1226.26 617.758,1227.51 618.345,1227.56 618.931,1227.59 619.518,1228.98 620.104,1230.05 620.69,1231.32 621.277,1231.37 621.863,1232.22 622.45,1232.03 623.036,1231.64 623.622,1230.13 624.209,1229.89 624.795,1228.51 625.382,1227 625.968,1226.9 626.554,1225.52 627.141,1226.59 627.727,1228.21 628.314,1224.48 628.9,1224.49 629.487,1225.93 630.073,1225.84 630.659,1224.22 631.246,1226.93 631.832,1226.81 632.419,1224.15 633.005,1224.43 633.591,1224.41 634.178,1226.97 634.764,1226.93 635.351,1227.26 635.937,1229.89 636.523,1231.09 637.11,1230.63 637.696,1230.42 638.283,1227.53 638.869,1232.47 639.456,1231.81 640.042,1228.8 640.628,1227.42 641.215,1227.15 641.801,1227.01 642.388,1225.75 642.974,1228.02 643.56,1226.69 644.147,1226.79 644.733,1226.75 645.32,1226.58 645.906,1226.38 646.492,1224.96 647.079,1226.33 647.665,1226.57 648.252,1229.12 648.838,1232.47 649.425,1230.82 650.011,1233.44 650.597,1231.87 651.184,1232.62 651.77,1231.96 652.357,1232.62 652.943,1233.43 653.529,1234.29 654.116,1232.38 654.702,1233.18 655.289,1235.19 655.875,1235.96 656.462,1237.69 657.048,1238.02 657.634,1239.69 658.221,1236.36 658.807,1234.56 659.394,1235.42 659.98,1234.69 660.566,1234.24 661.153,1233.61 661.739,1234.23 662.326,1232.32 662.912,1231.7 663.498,1231.29 664.085,1233.23 664.671,1232.65 665.258,1229.68 665.844,1230.41 666.431,1226.15 667.017,1224.67 667.603,1223.43 668.19,1225.82 668.776,1227.06 669.363,1226.93 669.949,1224.41 670.535,1223.18 671.122,1223.11 671.708,1223.12 672.295,1223.08 672.881,1222.99 673.467,1224.35 674.054,1224.24 674.64,1224.09 675.227,1222.72 675.813,1222.88 676.4,1224.13 676.986,1224.03 677.572,1224.08 678.159,1226.63 678.745,1224 679.332,1226.68 679.918,1225.19 680.504,1226.11 681.091,1224.71 681.677,1224.4 682.264,1223.27 682.85,1223.32 683.436,1225.95 684.023,1225.91 684.609,1225.9 685.196,1226.82 685.782,1224.12 686.369,1223.98 686.955,1225.02 687.541,1226.03 688.128,1224.5 688.714,1225.65 689.301,1224.31 689.887,1226.89 690.473,1226.34 691.06,1226.01 691.646,1225.72 692.233,1226.96 692.819,1226.58 693.405,1223.95 693.992,1222.5 694.578,1222.44 695.165,1222.29 695.751,1219.79 696.338,1219.71 696.924,1219.92 697.51,1220.01 698.097,1217.75 698.683,1219.17 699.27,1224.36 699.856,1225.64 700.442,1224.2 701.029,1222.76 701.615,1223.85 702.202,1223.63 702.788,1224.87 703.375,1227.36 703.961,1227.06 704.547,1228.15 705.134,1226.72 705.72,1223.7 706.307,1222.43 706.893,1223.54 707.479,1223.52 708.066,1223.6 708.652,1222.34 709.239,1223.92 709.825,1226.5 710.411,1226.36 710.998,1226.12 711.584,1223.56 712.171,1222.34 712.757,1219.84 713.344,1217.47 713.93,1218.04 714.516,1217.96 715.103,1218.44 715.689,1218.57 716.276,1217.36 716.862,1218.7 717.448,1221.47 718.035,1220.36 718.621,1219.14 719.208,1219.32 719.794,1220.94 720.38,1220.98 720.967,1219.7 721.553,1217.1 722.14,1219.74 722.726,1219.72 723.313,1218.42 723.899,1218.44 724.485,1218.85 725.072,1221.57 725.658,1222.71 726.245,1223.72 726.831,1223.48 727.417,1218.45 728.004,1219.9 728.59,1217.45 729.177,1217.72 729.763,1220.48 730.349,1221.45 730.936,1223.9 731.522,1224.99 732.109,1223.75 732.695,1226.14 733.282,1226.29 733.868,1227.11 734.454,1226.81 735.041,1228.87 735.627,1230.04 736.214,1229.77 736.8,1229.14 737.386,1231.32 737.973,1233.33 738.559,1233.9 739.146,1232.09 739.732,1231.3 740.318,1229.29 740.905,1227.51 741.491,1225.87 742.078,1225.52 742.664,1225.22 743.251,1222.52 743.837,1222.47 744.423,1222.26 745.01,1222.01 745.596,1223.2 746.183,1225.53 746.769,1225.38 747.355,1226.07 747.942,1225.63 748.528,1226.44 749.115,1224.78 749.701,1223.33 750.288,1223.37 750.874,1224.37 751.46,1225.46 752.047,1221.26 752.633,1222.11 753.22,1224.68 753.806,1224.17 754.392,1221.56 754.979,1221.44 755.565,1222.73 756.152,1221.48 756.738,1222.6 757.324,1220.91 757.911,1222.15 758.497,1219.74 759.084,1219.69 759.67,1220.94 760.257,1221.89 760.843,1222.86 761.429,1222.64 762.016,1222.36 762.602,1224.74 763.189,1223.42 763.775,1224.46 764.361,1226.61 764.948,1226.48 765.534,1225.04 766.121,1223.39 766.707,1225.62 767.293,1226.85 767.88,1226.47 768.466,1222.14 769.053,1215.99 769.639,1216.07 770.226,1215.02 770.812,1215.2 771.398,1216.79 771.985,1217.97 772.571,1212.76 773.158,1215.73 773.744,1220.79 774.33,1219.36 774.917,1219.38 775.503,1219.59 776.09,1219.43 776.676,1217.08 777.262,1216.12 777.849,1215.09 778.435,1215.32 779.022,1216.7 779.608,1218.11 780.195,1219.69 780.781,1218.67 781.367,1217.75 781.954,1216.66 782.54,1218.06 783.127,1218.24 783.713,1221 784.299,1220.83 784.886,1223.5 785.472,1220.94 786.059,1222.11 786.645,1222.04 787.232,1221 787.818,1223.27 788.404,1223.24 788.991,1222.73 789.577,1223.85 790.164,1222.69 790.75,1221.15 791.336,1222.53 791.923,1223.76 792.509,1222.31 793.096,1220.7 793.682,1220.55 794.268,1221.75 794.855,1219.03 795.441,1214.97 796.028,1216.45 796.614,1215.36 797.201,1214.33 797.787,1214.7 798.373,1210.96 798.96,1211.48 799.546,1213.1 800.133,1213.16 800.719,1213.4 801.305,1215.03 801.892,1215.06 802.478,1215.18 803.065,1215.52 803.651,1215.54 804.237,1214.61 804.824,1216.05 805.41,1217.58 805.997,1217.57 806.583,1218.9 807.17,1218.82 807.756,1221.23 808.342,1221.03 808.929,1221.95 809.515,1219.17 810.102,1219.45 810.688,1220.68 811.274,1219.36 811.861,1218.18 812.447,1218.42 813.034,1223.26 813.62,1225.59 814.206,1228.99 814.793,1228.44 815.379,1227.83 815.966,1228.41 816.552,1229.15 817.139,1226.23 817.725,1227.05 818.311,1225.47 818.898,1226.37 819.484,1227.11 820.071,1228 820.657,1230.1 821.243,1229.61 821.83,1229.21 822.416,1228.8 823.003,1229.35 823.589,1227.81 824.175,1226.31 824.762,1227.13 825.348,1227.9 825.935,1227.08 826.521,1229.47 827.108,1232.59 827.694,1230.69 828.28,1230.96 828.867,1227.78 829.453,1228.67 830.04,1229.21 830.626,1226.32 831.212,1227.12 831.799,1226.8 832.385,1223.7 832.972,1222.08 833.558,1219.33 834.145,1217.85 834.731,1216.69 835.317,1213.03 835.904,1213.26 836.49,1216.2 837.077,1215.11 837.663,1215.48 838.249,1215.73 838.836,1214.43 839.422,1213.23 840.009,1215.96 840.595,1214.79 841.181,1215.02 841.768,1212.6 842.354,1212.76 842.941,1213.08 843.527,1213.2 844.114,1216.02 844.7,1217.11 845.286,1215.46 845.873,1216.93 846.459,1217.07 847.046,1214.74 847.632,1213.68 848.218,1213.6 848.805,1214 849.391,1214.15 849.978,1213.37 850.564,1213.8 851.15,1212.6 851.737,1212.76 852.323,1210.49 852.91,1212.3 853.496,1212.71 854.083,1210.59 854.669,1207.06 855.255,1210.25 855.842,1211.96 856.428,1213.62 857.015,1216.1 857.601,1215.09 858.187,1208.85 858.774,1211.79 859.36,1213.28 859.947,1211.94 860.533,1212.49 861.119,1208.78 861.706,1209.28 862.292,1209.87 862.879,1207.64 863.465,1208.31 864.052,1206.18 864.638,1206.64 865.224,1207.25 865.811,1210.22 866.397,1211.86 866.984,1213.38 867.57,1208.69 868.156,1210.43 868.743,1211.39 869.329,1211.97 869.916,1217.3 870.502,1214.96 871.089,1215.11 871.675,1215.27 872.261,1214.26 872.848,1211.99 873.434,1212.43 874.021,1210.22 874.607,1213.36 875.193,1213.51 875.78,1216.34 876.366,1215.18 876.953,1214.3 877.539,1214.43 878.125,1213.4 878.712,1213.57 879.298,1212.48 879.885,1215.38 880.471,1214.45 881.058,1214.75 881.644,1214.96 882.23,1215.21 882.817,1216.37 883.403,1218.99 883.99,1217.96 884.576,1219.42 885.162,1216.91 885.749,1218.19 886.335,1218.28 886.922,1219.86 887.508,1219.61 888.094,1215.93 888.681,1215.81 889.267,1212.06 889.854,1213.57 890.44,1212.5 891.027,1212.63 891.613,1212.82 892.199,1215.44 892.786,1215.81 893.372,1216.01 893.959,1216.22 894.545,1214.04 895.131,1211.77 895.718,1213.69 896.304,1215.11 896.891,1216.57 897.477,1219.24 898.063,1219.52 898.65,1220.8 899.236,1220.48 899.823,1221.58 900.409,1218.77 900.996,1217.45 901.582,1217.65 902.168,1217.9 902.755,1219.3 903.341,1220.39 903.928,1214.25 904.514,1213.35 905.1,1213.67 905.687,1214.09 906.273,1215.47 906.86,1214.45 907.446,1214.44 908.032,1215.95 908.619,1221.28 909.205,1223.55 909.792,1223.4 910.378,1223.43 910.965,1222.93 911.551,1221.63 912.137,1220.42 912.724,1219.38 913.31,1219.4 913.897,1220.71 914.483,1220.33 915.069,1220.35 915.656,1221.66 916.242,1222.65 916.829,1222.45 917.415,1223.34 918.002,1221.55 918.588,1222.54 919.174,1223.38 919.761,1224.3 920.347,1227.63 920.934,1230.93 921.52,1229.08 922.106,1230.99 922.693,1230.2 923.279,1227.03 923.866,1223.84 924.452,1225.69 925.038,1225.1 925.625,1223.28 926.211,1224.22 926.798,1220.26 927.384,1219.02 927.971,1216.24 928.557,1216.15 929.143,1216.05 929.73,1216.07 930.316,1215.13 930.903,1214.12 931.489,1214.34 932.075,1214.38 932.662,1213.29 933.248,1216.06 933.835,1216.24 934.421,1216.18 935.007,1216.28 935.594,1217.8 936.18,1217.75 936.767,1220.5 937.353,1221.58 937.94,1221.66 938.526,1221.44 939.112,1221.05 939.699,1220.95 940.285,1220.96 940.872,1220.58 941.458,1220.39 942.044,1220.23 942.631,1216.36 943.217,1215.21 943.804,1216.64 944.39,1216.68 944.976,1213 945.563,1212.01 946.149,1211.04 946.736,1211.18 947.322,1211.4 947.909,1213.14 948.495,1215.71 949.081,1215.86 949.668,1214.91 950.254,1214.97 950.841,1215.06 951.427,1215.4 952.013,1215.56 952.6,1216.7 953.186,1215.35 953.773,1216.63 954.359,1216.62 954.945,1215.45 955.532,1217.08 956.118,1215.52 956.705,1214.32 957.291,1213.34 957.878,1213.5 958.464,1213.65 959.05,1215.05 959.637,1216.41 960.223,1216.8 960.81,1215.62 961.396,1215.74 961.982,1215.96 962.569,1214.71 963.155,1213.67 963.742,1212.59 964.328,1211.41 964.915,1210.58 965.501,1212.11 966.087,1212.56 966.674,1211.5 967.26,1211.69 967.847,1213.3 968.433,1214.78 969.019,1216.03 969.606,1216.18 970.192,1216.31 970.779,1216.36 971.365,1216.27 971.951,1216.32 972.538,1216.55 973.124,1216.54 973.711,1216.48 974.297,1220.4 974.884,1220.32 975.47,1221.48 976.056,1221.36 976.643,1223.68 977.229,1223.56 977.816,1224.71 978.402,1225.45 978.988,1223.69 979.575,1223.2 980.161,1222.95 980.748,1222.77 981.334,1223.54 981.92,1224.41 982.507,1222.72 983.093,1222.29 983.68,1218.11 984.266,1219.57 984.853,1226.05 985.439,1228.01 986.025,1227.39 986.612,1226.81 987.198,1223.96 987.785,1222.2 988.371,1222.18 988.957,1223.43 989.544,1221.84 990.13,1221.75 990.717,1220.36 991.303,1220.3 991.889,1218.78 992.476,1220.03 993.062,1221.1 993.649,1219.51 994.235,1219.37 994.822,1220.66 995.408,1220.41 995.994,1222.6 996.581,1223.51 997.167,1223.31 997.754,1223.3 998.34,1222.99 998.926,1223.86 999.513,1224.77 1000.1,1224.54 1000.69,1225.29 1001.27,1224.88 1001.86,1223.32 1002.44,1220.51 1003.03,1220.31 1003.62,1220.06 1004.2,1221.27 1004.79,1223.28 1005.38,1224.07 1005.96,1224.91 1006.55,1224.36 1007.14,1225.14 1007.72,1226.28 1008.31,1225.69 1008.9,1225.5 1009.48,1225.1 1010.07,1224.78 1010.65,1225.61 1011.24,1225.23 1011.83,1223.68 1012.41,1224.59 1013,1226.81 1013.59,1227.28 1014.17,1226.68 1014.76,1227.5 1015.35,1228.14 1015.93,1230.16 1016.52,1228.09 1017.11,1227.62 1017.69,1227.12 1018.28,1225.33 1018.86,1224.64 1019.45,1224.29 1020.04,1223.75 1020.62,1225.77 1021.21,1219.07 1021.8,1217.6 1022.38,1216.03 1022.97,1214.72 1023.56,1212.08 1024.14,1212.41 1024.73,1212.74 1025.32,1210.45 1025.9,1210.59 1026.49,1212.22 1027.07,1210.25 1027.66,1208.19 1028.25,1208.59 1028.83,1209.17 1029.42,1212.22 1030.01,1210.19 1030.59,1209.32 1031.18,1211 1031.77,1211.25 1032.35,1211.68 1032.94,1213.25 1033.52,1215.75 1034.11,1214.44 1034.7,1216.04 1035.28,1217.79 1035.87,1217.76 1036.46,1217.59 1037.04,1217.63 1037.63,1216.42 1038.22,1215.35 1038.8,1216.7 1039.39,1216.65 1039.98,1216.83 1040.56,1217.16 1041.15,1215.77 1041.73,1212.01 1042.32,1208.44 1042.91,1211.29 1043.49,1210.29 1044.08,1210.88 1044.67,1212.6 1045.25,1212.82 1045.84,1213.04 1046.43,1211.79 1047.01,1210.82 1047.6,1209.77 1048.19,1213.03 1048.77,1214.48 1049.36,1214.6 1049.94,1213.66 1050.53,1215.21 1051.12,1216.51 1051.7,1217.72 1052.29,1217.79 1052.88,1217.66 1053.46,1216.36 1054.05,1217.86 1054.64,1217.95 1055.22,1220.58 1055.81,1220.43 1056.39,1220.53 1056.98,1221.73 1057.57,1222.79 1058.15,1222.51 1058.74,1220.9 1059.33,1222.01 1059.91,1220.59 1060.5,1220.64 1061.09,1219.17 1061.67,1220.22 1062.26,1222.75 1062.85,1223.6 1063.43,1223.3 1064.02,1222.9 1064.6,1223.97 1065.19,1223.86 1065.78,1223.52 1066.36,1225.6 1066.95,1224.1 1067.54,1226 1068.12,1219.22 1068.71,1220.07 1069.3,1218.38 1069.88,1220.73 1070.47,1220.25 1071.06,1220.18 1071.64,1220.22 1072.23,1219.99 1072.81,1223.66 1073.4,1223.34 1073.99,1223.22 1074.57,1220.29 1075.16,1221.16 1075.75,1219.76 1076.33,1218.39 1076.92,1219.68 1077.51,1219.39 1078.09,1217.72 1078.68,1217.55 1079.26,1219.79 1079.85,1214.61 1080.44,1215.78 1081.02,1216.94 1081.61,1213.15 1082.2,1214.58 1082.78,1215.74 1083.37,1217.21 1083.96,1217.14 1084.54,1214.69 1085.13,1213.55 1085.72,1212.45 1086.3,1212.88 1086.89,1209.12 1087.47,1210.9 1088.06,1212.39 1088.65,1212.73 1089.23,1210.59 1089.82,1205.92 1090.41,1204.87 1090.99,1205.53 1091.58,1205.94 1092.17,1206.48 1092.75,1201.93 1093.34,1202.86 1093.93,1200.89 1094.51,1203.08 1095.1,1204.98 1095.68,1204.29 1096.27,1204.98 1096.86,1204.27 1097.44,1205.16 1098.03,1207.26 1098.62,1206.59 1099.2,1212.38 1099.79,1212.41 1100.38,1214.17 1100.96,1215.63 1101.55,1218.09 1102.14,1217.88 1102.72,1216.64 1103.31,1215.32 1103.89,1219.34 1104.48,1219.47 1105.07,1220.38 1105.65,1218.88 1106.24,1217.54 1106.83,1213.69 1107.41,1213.73 1108,1213.83 1108.59,1211.33 1109.17,1211.61 1109.76,1213 1110.34,1213.03 1110.93,1213.37 1111.52,1211.17 1112.1,1209.15 1112.69,1209.8 1113.28,1210.07 1113.86,1210.71 1114.45,1212.26 1115.04,1211.7 1115.62,1212.15 1116.21,1213.83 1116.8,1215.41 1117.38,1214.46 1117.97,1216.23 1118.55,1219.88 1119.14,1217.27 1119.73,1218.41 1120.31,1217.11 1120.9,1217.08 1121.49,1216.99 1122.07,1216.93 1122.66,1220.63 1123.25,1218.89 1123.83,1217.41 1124.42,1216.15 1125.01,1214.96 1125.59,1216.23 1126.18,1213.93 1126.76,1214.17 1127.35,1215.62 1127.94,1216.71 1128.52,1217.58 1129.11,1218.96 1129.7,1218.95 1130.28,1217.58 1130.87,1213.96 1131.46,1214.03 1132.04,1211.68 1132.63,1215.53 1133.21,1214.01 1133.8,1215.02 1134.39,1216.35 1134.97,1218.89 1135.56,1216.3 1136.15,1216.5 1136.73,1213.8 1137.32,1212.99 1137.91,1215.53 1138.49,1216.84 1139.08,1216.88 1139.67,1218.24 1140.25,1217.15 1140.84,1219.54 1141.42,1217.95 1142.01,1217.79 1142.6,1218.97 1143.18,1215.06 1143.77,1215.02 1144.36,1214.97 1144.94,1216.19 1145.53,1218.59 1146.12,1217.42 1146.7,1218.66 1147.29,1218.44 1147.88,1218.52 1148.46,1218.53 1149.05,1221.04 1149.63,1221.94 1150.22,1222.97 1150.81,1217.84 1151.39,1216.68 1151.98,1216.47 1152.57,1217.8 1153.15,1216.71 1153.74,1218.07 1154.33,1216.64 1154.91,1215.19 1155.5,1215.42 1156.09,1215.32 1156.67,1215.39 1157.26,1215.87 1157.84,1212.24 1158.43,1212.36 1159.02,1210.26 1159.6,1210.68 1160.19,1209.83 1160.78,1210.15 1161.36,1210.42 1161.95,1212.04 1162.54,1213.44 1163.12,1214.83 1163.71,1213.74 1164.29,1215.02 1164.88,1216.31 1165.47,1214.98 1166.05,1215.23 1166.64,1214.04 1167.23,1213.86 1167.81,1212.81 1168.4,1215.52 1168.99,1218 1169.57,1218 1170.16,1215.51 1170.75,1216.87 1171.33,1215.55 1171.92,1215.3 1172.5,1217.43 1173.09,1216.5 1173.68,1219.03 1174.26,1219.94 1174.85,1218.24 1175.44,1217.14 1176.02,1217.02 1176.61,1214.31 1177.2,1214.31 1177.78,1214.66 1178.37,1215.21 1178.96,1215.26 1179.54,1215.17 1180.13,1216.5 1180.71,1216.85 1181.3,1215.8 1181.89,1216.06 1182.47,1216.25 1183.06,1215.17 1183.65,1214.84 1184.23,1213.85 1184.82,1215.28 1185.41,1214.18 1185.99,1211.89 1186.58,1210.72 1187.16,1211.03 1187.75,1213.81 1188.34,1215.47 1188.92,1216.89 1189.51,1218.04 1190.1,1218.16 1190.68,1218.35 1191.27,1218.27 1191.86,1220.95 1192.44,1222.12 1193.03,1223.02 1193.62,1222.55 1194.2,1221.01 1194.79,1218.5 1195.37,1218.23 1195.96,1218.32 1196.55,1219.4 1197.13,1221.81 1197.72,1221.46 1198.31,1222.49 1198.89,1222.28 1199.48,1221.86 1200.07,1220.55 1200.65,1221.69 1201.24,1218.8 1201.83,1221.16 1202.41,1223.33 1203,1225.55 1203.58,1221.15 1204.17,1222.02 1204.76,1222.93 1205.34,1220.23 1205.93,1217.53 1206.52,1216.36 1207.1,1216.38 1207.69,1215.09 1208.28,1213.73 1208.86,1216.44 1209.45,1213.97 1210.03,1215.52 1210.62,1214.31 1211.21,1216.86 1211.79,1216.85 1212.38,1219.18 1212.97,1220.33 1213.55,1219.91 1214.14,1219.87 1214.73,1219.89 1215.31,1219.74 1215.9,1219.6 1216.49,1220.77 1217.07,1219.66 1217.66,1219.3 1218.24,1216.91 1218.83,1218.15 1219.42,1216.66 1220,1218.87 1220.59,1216.32 1221.18,1218.94 1221.76,1216.24 1222.35,1217.23 1222.94,1214.38 1223.52,1214.61 1224.11,1214.66 1224.7,1215.94 1225.28,1219.76 1225.87,1219.37 1226.45,1221.6 1227.04,1220.99 1227.63,1223.4 1228.21,1222.97 1228.8,1224.05 1229.39,1222.56 1229.97,1226.09 1230.56,1224.23 1231.15,1223.79 1231.73,1224.4 1232.32,1223.69 1232.91,1220.76 1233.49,1219.4 1234.08,1216.79 1234.66,1217.68 1235.25,1215.04 1235.84,1214.09 1236.42,1212.99 1237.01,1216.01 1237.6,1218.66 1238.18,1221.05 1238.77,1220.7 1239.36,1216.83 1239.94,1214.54 1240.53,1214.62 1241.11,1215.94 1241.7,1215.89 1242.29,1217.31 1242.87,1217.22 1243.46,1217.27 1244.05,1215.9 1244.63,1216.15 1245.22,1218.73 1245.81,1219.81 1246.39,1222.13 1246.98,1217.9 1247.57,1218.69 1248.15,1218.52 1248.74,1222.36 1249.32,1221 1249.91,1219.58 1250.5,1219.32 1251.08,1217.87 1251.67,1220.17 1252.26,1218.97 1252.84,1220.06 1253.43,1218.54 1254.02,1222 1254.6,1221.76 1255.19,1220.16 1255.78,1221.3 1256.36,1222.03 1256.95,1220.15 1257.53,1219.92 1258.12,1218.38 1258.71,1217.29 1259.29,1218.45 1259.88,1217.06 1260.47,1218.13 1261.05,1217.76 1261.64,1217.64 1262.23,1218.56 1262.81,1218.45 1263.4,1218.37 1263.98,1218.14 1264.57,1220.55 1265.16,1221.62 1265.74,1219.94 1266.33,1218.59 1266.92,1215.91 1267.5,1214.52 1268.09,1214.31 1268.68,1215.59 1269.26,1214.34 1269.85,1211.76 1270.44,1213.04 1271.02,1212.99 1271.61,1213.37 1272.19,1213.4 1272.78,1213.52 1273.37,1216.11 1273.95,1217.52 1274.54,1217.38 1275.13,1216.14 1275.71,1215.19 1276.3,1216.66 1276.89,1216.79 1277.47,1217.09 1278.06,1219.75 1278.65,1220.8 1279.23,1219.02 1279.82,1214.99 1280.4,1217.56 1280.99,1216.3 1281.58,1218.67 1282.16,1221.06 1282.75,1219.55 1283.34,1219.42 1283.92,1218.03 1284.51,1218.09 1285.1,1216.7 1285.68,1219.18 1286.27,1218.85 1286.86,1218.91 1287.44,1216.41 1288.03,1217.57 1288.61,1215.08 1289.2,1213.97 1289.79,1214.09 1290.37,1215.59 1290.96,1216.6 1291.55,1212.76 1292.13,1210.49 1292.72,1206.91 1293.31,1208.92 1293.89,1206.88 1294.48,1207.65 1295.06,1209.57 1295.65,1208.77 1296.24,1212 1296.82,1213.63 1297.41,1213.94 1298,1211.7 1298.58,1215.84 1299.17,1218.49 1299.76,1220 1300.34,1219.64 1300.93,1220.68 1301.52,1221.97 1302.1,1220.45 1302.69,1222.78 1303.27,1221.26 1303.86,1221.31 1304.45,1222.36 1305.03,1220.78 1305.62,1220.29 1306.21,1222.49 1306.79,1220.83 1307.38,1220.55 1307.97,1219.17 1308.55,1217.6 1309.14,1215.98 1309.73,1214.64 1310.31,1215.92 1310.9,1215.84 1311.48,1217.14 1312.07,1216.89 1312.66,1216.73 1313.24,1215.41 1313.83,1215.67 1314.42,1215.86 1315,1217.15 1315.59,1215.98 1316.18,1214.67 1316.76,1214.78 1317.35,1213.55 1317.93,1212.57 1318.52,1212.86 1319.11,1217.16 1319.69,1218.34 1320.28,1220.5 1320.87,1220.59 1321.45,1220.41 1322.04,1220.43 1322.63,1217.7 1323.21,1217.79 1323.8,1218.83 1324.39,1218.89 1324.97,1221.25 1325.56,1222.09 1326.14,1221.69 1326.73,1220.16 1327.32,1218.87 1327.9,1218.39 1328.49,1219.62 1329.08,1219.46 1329.66,1216.54 1330.25,1214.02 1330.84,1215.51 1331.42,1216.68 1332.01,1215.29 1332.6,1215.34 1333.18,1215.35 1333.77,1215.56 1334.35,1211.89 1334.94,1210.86 1335.53,1209.95 1336.11,1209.06 1336.7,1208.25 1337.29,1208.77 1337.87,1210.33 1338.46,1210.62 1339.05,1212.15 1339.63,1214.84 1340.22,1214.92 1340.8,1214.81 1341.39,1212.31 1341.98,1211.08 1342.56,1211.33 1343.15,1211.65 1343.74,1210.52 1344.32,1210.47 1344.91,1208.22 1345.5,1206.12 1346.08,1206.94 1346.67,1205 1347.26,1205.48 1347.84,1207.32 1348.43,1205.36 1349.01,1205.76 1349.6,1206.3 1350.19,1207.05 1350.77,1209.95 1351.36,1211.73 1351.95,1214.24 1352.53,1210.47 1353.12,1210.8 1353.71,1209.82 1354.29,1211.74 1354.88,1211.83 1355.47,1212.09 1356.05,1212.31 1356.64,1212.62 1357.22,1216.75 1357.81,1219.22 1358.4,1217.99 1358.98,1216.83 1359.57,1215.7 1360.16,1217.28 1360.74,1218.12 1361.33,1215.47 1361.92,1219.16 1362.5,1220.24 1363.09,1218.9 1363.68,1223.5 1364.26,1224.49 1364.85,1222.78 1365.43,1223.63 1366.02,1224.49 1366.61,1224.43 1367.19,1222.82 1367.78,1224.72 1368.37,1224.49 1368.95,1225.39 1369.54,1222.54 1370.13,1224.79 1370.71,1226.96 1371.3,1226.57 1371.88,1227.39 1372.47,1225.53 1373.06,1226.52 1373.64,1227.64 1374.23,1223.42 1374.82,1226.84 1375.4,1228.94 1375.99,1229.51 1376.58,1225.12 1377.16,1224.64 1377.75,1224.01 1378.34,1223.43 1378.92,1224.28 1379.51,1221.45 1380.09,1221.08 1380.68,1219.32 1381.27,1216.63 1381.85,1214.29 1382.44,1213.25 1383.03,1213.52 1383.61,1215.08 1384.2,1217.59 1384.79,1218.72 1385.37,1217.54 1385.96,1216.08 1386.55,1214.73 1387.13,1215.04 1387.72,1216.12 1388.3,1216.17 1388.89,1216.34 1389.48,1214.9 1390.06,1215.1 1390.65,1213.95 1391.24,1212.7 1391.82,1213.94 1392.41,1215.23 1393,1216.52 1393.58,1216.6 1394.17,1216.61 1394.75,1215.15 1395.34,1215.29 1395.93,1218.03 1396.51,1218.11 1397.1,1217.99 1397.69,1217.65 1398.27,1218.81 1398.86,1218.64 1399.45,1217.27 1400.03,1214.69 1400.62,1213.4 1401.21,1211.09 1401.79,1211.49 1402.38,1213.28 1402.96,1213.53 1403.55,1212.36 1404.14,1211.3 1404.72,1212.81 1405.31,1212.92 1405.9,1213.35 1406.48,1216.3 1407.07,1215.05 1407.66,1216.39 1408.24,1217.57 1408.83,1219 1409.42,1218.71 1410,1219.75 1410.59,1219.47 1411.17,1219.21 1411.76,1218.86 1412.35,1217.54 1412.93,1218.65 1413.52,1218.61 1414.11,1217.33 1414.69,1217.05 1415.28,1214.66 1415.87,1216 1416.45,1214.81 1417.04,1215.06 1417.63,1214.25 1418.21,1214.34 1418.8,1215.62 1419.38,1214.21 1419.97,1216.78 1420.56,1215.49 1421.14,1215.34 1421.73,1219.16 1422.32,1216.53 1422.9,1216.52 1423.49,1215.1 1424.08,1216.3 1424.66,1217.3 1425.25,1214.75 1425.83,1215.93 1426.42,1213.62 1427.01,1215.19 1427.59,1216.44 1428.18,1215.28 1428.77,1214.19 1429.35,1214.2 1429.94,1213.14 1430.53,1212.06 1431.11,1212.29 1431.7,1211.43 1432.29,1214.22 1432.87,1210.37 1433.46,1213.19 1434.04,1213.36 1434.63,1212.07 1435.22,1212.4 1435.8,1211.37 1436.39,1211.62 1436.98,1213.29 1437.56,1213.67 1438.15,1215.2 1438.74,1215.29 1439.32,1215.27 1439.91,1216.67 1440.5,1217.76 1441.08,1217.63 1441.67,1216.32 1442.25,1219.06 1442.84,1217.73 1443.43,1216.21 1444.01,1217.42 1444.6,1218.46 1445.19,1219.61 1445.77,1219.47 1446.36,1219.32 1446.95,1219.48 1447.53,1221.94 1448.12,1221.82 1448.7,1218.97 1449.29,1217.56 1449.88,1217.66 1450.46,1215.26 1451.05,1212.87 1451.64,1213.16 1452.22,1209.53 1452.81,1208.69 1453.4,1209.07 1453.98,1205.41 1454.57,1207.31 1455.16,1210.59 1455.74,1210.91 1456.33,1215.12 1456.91,1216.33 1457.5,1216.64 1458.09,1216.57 1458.67,1217.72 1459.26,1220.2 1459.85,1219.95 1460.43,1218.32 1461.02,1220.54 1461.61,1222.56 1462.19,1223.21 1462.78,1223.1 1463.37,1222.84 1463.95,1222.14 1464.54,1223.01 1465.12,1221.72 1465.71,1222.44 1466.3,1223.3 1466.88,1221.9 1467.47,1221.26 1468.06,1220.98 1468.64,1223.22 1469.23,1225.21 1469.82,1222.01 1470.4,1222.88 1470.99,1223.69 1471.57,1221.99 1472.16,1220.36 1472.75,1217.72 1473.33,1217.61 1473.92,1217.65 1474.51,1216.12 1475.09,1214.74 1475.68,1214.88 1476.27,1212.23 1476.85,1213.47 1477.44,1213.56 1478.03,1213.67 1478.61,1212.57 1479.2,1212.81 1479.78,1210.7 1480.37,1211.11 1480.96,1213.61 1481.54,1213.91 1482.13,1216.42 1482.72,1216.22 1483.3,1217.58 1483.89,1216.11 1484.48,1214.83 1485.06,1215.78 1485.65,1217.05 1486.24,1219.73 1486.82,1220.75 1487.41,1221.94 1487.99,1218.01 1488.58,1216.73 1489.17,1216.86 1489.75,1215.76 1490.34,1215.51 1490.93,1215.32 1491.51,1214.03 1492.1,1215.15 1492.69,1215.01 1493.27,1214.69 1493.86,1217.19 1494.45,1217.2 1495.03,1213.37 1495.62,1212.18 1496.2,1213.66 1496.79,1212.44 1497.38,1212.82 1497.96,1211.77 1498.55,1210.87 1499.14,1211.09 1499.72,1211.13 1500.31,1214.91 1500.9,1216.39 1501.48,1216.38 1502.07,1215.13 1502.65,1216.42 1503.24,1217.48 1503.83,1214.9 1504.41,1213.96 1505,1214.01 1505.59,1211.6 1506.17,1211.82 1506.76,1211.9 1507.35,1209.59 1507.93,1211.39 1508.52,1210.34 1509.11,1211.6 1509.69,1214.2 1510.28,1215.43 1510.86,1215.37 1511.45,1216.71 1512.04,1220.53 1512.62,1221.36 1513.21,1218.68 1513.8,1218.63 1514.38,1219.91 1514.97,1217.18 1515.56,1214.77 1516.14,1213.89 1516.73,1211.65 1517.32,1210.6 1517.9,1213.54 1518.49,1212.44 1519.07,1211.27 1519.66,1211.57 1520.25,1210.61 1520.83,1210.99 1521.42,1212.57 1522.01,1211.57 1522.59,1211.82 1523.18,1211.78 1523.77,1211.84 1524.35,1213.57 1524.94,1215.14 1525.52,1216.47 1526.11,1215.21 1526.7,1212.81 1527.28,1213.29 1527.87,1213.67 1528.46,1218.81 1529.04,1222.5 1529.63,1223.82 1530.22,1223.51 1530.8,1223.34 1531.39,1221.51 1531.98,1219.89 1532.56,1218.58 1533.15,1216.04 1533.73,1215.05 1534.32,1215.13 1534.91,1216.26 1535.49,1216.13 1536.08,1216.32 1536.67,1216.22 1537.25,1216.25 1537.84,1216.05 1538.43,1213.6 1539.01,1211.25 1539.6,1214.13 1540.19,1215.32 1540.77,1215.48 1541.36,1214.3 1541.94,1216.81 1542.53,1217.72 1543.12,1213.96 1543.7,1213.93 1544.29,1214.19 1544.88,1211.87 1545.46,1213.27 1546.05,1213.56 1546.64,1214.88 1547.22,1214.72 1547.81,1213.54 1548.4,1212.45 1548.98,1212.87 1549.57,1211.82 1550.15,1212.1 1550.74,1215.14 1551.33,1217.69 1551.91,1216.31 1552.5,1217.57 1553.09,1216.25 1553.67,1217.7 1554.26,1216.33 1554.85,1216.44 1555.43,1216.83 1556.02,1214.81 1556.6,1216.37 1557.19,1216.44 1557.78,1216.43 1558.36,1217.85 1558.95,1219.09 1559.54,1218.98 1560.12,1216.07 1560.71,1216.01 1561.3,1217.05 1561.88,1217.17 1562.47,1218.17 1563.06,1219.33 1563.64,1220.46 1564.23,1220.2 1564.81,1219.88 1565.4,1218.58 1565.99,1218.72 1566.57,1218.47 1567.16,1220.82 1567.75,1220.53 1568.33,1218.94 1568.92,1217.52 1569.51,1216.35 1570.09,1216.37 1570.68,1216.56 1571.27,1219.39 1571.85,1219.5 1572.44,1217.97 1573.02,1216.55 1573.61,1216.74 1574.2,1215.42 1574.78,1212.75 1575.37,1214.23 1575.96,1215.36 1576.54,1218.12 1577.13,1215.65 1577.72,1215.52 1578.3,1215.47 1578.89,1215.52 1579.47,1214.49 1580.06,1216.01 1580.65,1214.76 1581.23,1214.82 1581.82,1216.37 1582.41,1217.73 1582.99,1217.51 1583.58,1217.66 1584.17,1215.1 1584.75,1216.59 1585.34,1216.61 1585.93,1216.61 1586.51,1214.17 1587.1,1214.45 1587.68,1214.52 1588.27,1212.31 1588.86,1213.77 1589.44,1214.92 1590.03,1214.61 1590.62,1213.61 1591.2,1212.29 1591.79,1212.53 1592.38,1210.37 1592.96,1211.74 1593.55,1214.6 1594.14,1217.06 1594.72,1214.56 1595.31,1213.69 1595.89,1215.08 1596.48,1213.89 1597.07,1214.15 1597.65,1212.98 1598.24,1213.07 1598.83,1212.03 1599.41,1213.56 1600,1212.32 1600.59,1210.15 1601.17,1210.41 1601.76,1209.46 1602.34,1207.41 1602.93,1209.08 1603.52,1210.89 1604.1,1207.75 1604.69,1208.13 1605.28,1209.76 1605.86,1210.32 1606.45,1211.97 1607.04,1211.35 1607.62,1214.06 1608.21,1215.55 1608.8,1211.8 1609.38,1211.67 1609.97,1215.5 1610.55,1216.89 1611.14,1218.17 1611.73,1219.49 1612.31,1219.34 1612.9,1219.27 1613.49,1219.36 1614.07,1223.25 1614.66,1222.83 1615.25,1224.92 1615.83,1224.54 1616.42,1222.89 1617.01,1222.57 1617.59,1222.05 1618.18,1222.92 1618.76,1223.82 1619.35,1222.09 1619.94,1221.74 1620.52,1221.31 1621.11,1219.9 1621.7,1219.57 1622.28,1218.28 1622.87,1218.22 1623.46,1217.09 1624.04,1219.48 1624.63,1219.44 1625.22,1221.63 1625.8,1220.24 1626.39,1220.02 1626.97,1222.67 1627.56,1221.07 1628.15,1218.49 1628.73,1217.03 1629.32,1214.32 1629.91,1214.39 1630.49,1217.07 1631.08,1218.21 1631.67,1217.85 1632.25,1220.14 1632.84,1221.2 1633.42,1220.78 1634.01,1219.24 1634.6,1219.01 1635.18,1215.07 1635.77,1213.82 1636.36,1214.22 1636.94,1214.27 1637.53,1214.47 1638.12,1212.51 1638.7,1213.95 1639.29,1220.5 1639.88,1217.85 1640.46,1220.29 1641.05,1220.16 1641.63,1220.06 1642.22,1219.93 1642.81,1218.2 1643.39,1216.8 1643.98,1218.03 1644.57,1220.52 1645.15,1222.85 1645.74,1223.44 1646.33,1219.18 1646.91,1222.71 1647.5,1221.26 1648.09,1222.51 1648.67,1222.24 1649.26,1218.07 1649.84,1217.84 1650.43,1220.46 1651.02,1219.21 1651.6,1217.76 1652.19,1218.9 1652.78,1219.75 1653.36,1218.33 1653.95,1220.95 1654.54,1223.39 1655.12,1222.77 1655.71,1219.9 1656.29,1213.45 1656.88,1212.39 1657.47,1214.1 1658.05,1215.47 1658.64,1215.9 1659.23,1218.39 1659.81,1217.01 1660.4,1216.95 1660.99,1218.18 1661.57,1218.21 1662.16,1217.07 1662.75,1216.93 1663.33,1215.7 1663.92,1211.85 1664.5,1214.67 1665.09,1215.9 1665.68,1213.61 1666.26,1212.73 1666.85,1212.89 1667.44,1211.53 1668.02,1214.37 1668.61,1213.17 1669.2,1212.04 1669.78,1212.27 1670.37,1212.41 1670.96,1211.25 1671.54,1211.55 1672.13,1210.36 1672.71,1213.14 1673.3,1213.41 1673.89,1213.51 1674.47,1213.5 1675.06,1214.92 1675.65,1216.1 1676.23,1216.21 1676.82,1215.15 1677.41,1217.86 1677.99,1219.18 1678.58,1222.63 1679.17,1222.44 1679.75,1222.25 1680.34,1227.97 1680.92,1226.13 1681.51,1222.93 1682.1,1220.18 1682.68,1218.85 1683.27,1218.5 1683.86,1218.31 1684.44,1218.35 1685.03,1217.01 1685.62,1216.8 1686.2,1218.2 1686.79,1218.22 1687.37,1220.67 1687.96,1222.91 1688.55,1219.89 1689.13,1219.61 1689.72,1221.67 1690.31,1219.8 1690.89,1219.44 1691.48,1224.32 1692.07,1221.51 1692.65,1221 1693.24,1221.87 1693.83,1225.29 1694.41,1227.48 1695,1226.92 1695.58,1221.38 1696.17,1221.36 1696.76,1219.73 1697.34,1218.28 1697.93,1218.34 1698.52,1216.86 1699.1,1215.65 1699.69,1215.74 1700.28,1218.35 1700.86,1218.44 1701.45,1215.87 1702.04,1214.92 1702.62,1216.01 1703.21,1214.49 1703.79,1213.24 1704.38,1216.1 1704.97,1217.62 1705.55,1217.63 1706.14,1217.89 1706.73,1217.51 1707.31,1218.54 1707.9,1219.5 1708.49,1219.61 1709.07,1219.56 1709.66,1219.33 1710.24,1219.32 1710.83,1217.8 1711.42,1216.48 1712,1216.38 1712.59,1217.37 1713.18,1213.29 1713.76,1212.01 1714.35,1214.71 1714.94,1214.91 1715.52,1215.01 1716.11,1214.02 1716.7,1216.79 1717.28,1216.6 1717.87,1217.52 1718.45,1215.94 1719.04,1216.99 1719.63,1215.52 1720.21,1215.44 1720.8,1214.22 1721.39,1215.44 1721.97,1218.07 1722.56,1217.83 1723.15,1216.48 1723.73,1215.26 1724.32,1215.61 1724.91,1215.7 1725.49,1217.1 1726.08,1217.04 1726.66,1218.38 1727.25,1217.18 1727.84,1219.85 1728.42,1218.57 1729.01,1217.37 1729.6,1217.29 1730.18,1217.16 1730.77,1219.58 1731.36,1220.75 1731.94,1221.61 1732.53,1221.3 1733.11,1218.67 1733.7,1218.57 1734.29,1214.72 1734.87,1213.41 1735.46,1213.61 1736.05,1211.15 1736.63,1211.59 1737.22,1210.43 1737.81,1211.85 1738.39,1208.31 1738.98,1206.36 1739.57,1206.96 1740.15,1211.22 1740.74,1207.99 1741.32,1204.71 1741.91,1202.69 1742.5,1203.45 1743.08,1204.21 1743.67,1204.82 1744.26,1207 1744.84,1207.57 1745.43,1210.48 1746.02,1209.52 1746.6,1209.97 1747.19,1211.63 1747.78,1210.73 1748.36,1209.75 1748.95,1208.94 1749.53,1209.52 1750.12,1209.83 1750.71,1212.74 1751.29,1213.12 1751.88,1212.24 1752.47,1212.54 1753.05,1213.98 1753.64,1212.7 1754.23,1210.48 1754.81,1209.62 1755.4,1208.89 1755.99,1209.42 1756.57,1210.04 1757.16,1213.97 1757.74,1214.23 1758.33,1213.11 1758.92,1215.62 1759.5,1215.54 1760.09,1215.56 1760.68,1217.1 1761.26,1217.24 1761.85,1218.5 1762.44,1218.33 1763.02,1218.17 1763.61,1219.33 1764.19,1223 1764.78,1222.73 1765.37,1221.22 1765.95,1219.77 1766.54,1218.21 1767.13,1219.34 1767.71,1219.11 1768.3,1217.62 1768.89,1216.24 1769.47,1216.25 1770.06,1217.26 1770.65,1218.2 1771.23,1218.04 1771.82,1217.67 1772.4,1218.64 1772.99,1221.21 1773.58,1218.31 1774.16,1218.09 1774.75,1219.34 1775.34,1221.63 1775.92,1222.53 1776.51,1222.32 1777.1,1222.16 1777.68,1220.76 1778.27,1221.56 1778.86,1224.13 1779.44,1222.24 1780.03,1220.82 1780.61,1220.67 1781.2,1219.23 1781.79,1219.18 1782.37,1220.35 1782.96,1221.61 1783.55,1217.74 1784.13,1217.62 1784.72,1216.21 1785.31,1216.33 1785.89,1215.05 1786.48,1216.54 1787.06,1215.36 1787.65,1216.77 1788.24,1219.41 1788.82,1217.81 1789.41,1215.33 1790,1218.07 1790.58,1217.98 1791.17,1219.18 1791.76,1217.63 1792.34,1218.92 1792.93,1218.76 1793.52,1216.36 1794.1,1222.41 1794.69,1223.44 1795.27,1222.06 1795.86,1222.9 1796.45,1223.72 1797.03,1225.9 1797.62,1226.65 1798.21,1226.15 1798.79,1224.47 1799.38,1222.85 1799.97,1222.55 1800.55,1222.36 1801.14,1221.78 1801.73,1221.69 1802.31,1220.07 1802.9,1219.7 1803.48,1218.31 1804.07,1218.37 1804.66,1218.27 1805.24,1218.29 1805.83,1219.51 1806.42,1219.35 1807,1219.03 1807.59,1217.6 1808.18,1213.74 1808.76,1212.67 1809.35,1212.82 1809.94,1210.51 1810.52,1212.4 1811.11,1214.92 1811.69,1217.31 1812.28,1216.19 1812.87,1217.41 1813.45,1217.27 1814.04,1215.77 1814.63,1214.69 1815.21,1214.6 1815.8,1214.42 1816.39,1215.86 1816.97,1219.42 1817.56,1217.05 1818.14,1219.54 1818.73,1218.05 1819.32,1215.35 1819.9,1216.86 1820.49,1218.99 1821.08,1216.27 1821.66,1218.87 1822.25,1217.64 1822.84,1217.94 1823.42,1219.26 1824.01,1220.25 1824.6,1217.68 1825.18,1221.22 1825.77,1220.74 1826.35,1221.81 1826.94,1220.32 1827.53,1220.12 1828.11,1218.89 1828.7,1218.38 1829.29,1218.25 1829.87,1219.12 1830.46,1217.57 1831.05,1221.12 1831.63,1221.82 1832.22,1220.31 1832.81,1220.04 1833.39,1219.83 1833.98,1218.41 1834.56,1218.14 1835.15,1217 1835.74,1215.89 1836.32,1214.48 1836.91,1214.7 1837.5,1214.78 1838.08,1215.06 1838.67,1216.55 1839.26,1215.36 1839.84,1215.26 1840.43,1214.19 1841.01,1213.38 1841.6,1213.47 1842.19,1213.65 1842.77,1217.33 1843.36,1213.4 1843.95,1213.44 1844.53,1214.9 1845.12,1214.72 1845.71,1215.86 1846.29,1217.23 1846.88,1217.3 1847.47,1218.57 1848.05,1217.26 1848.64,1218.46 1849.22,1217.26 1849.81,1215.77 1850.4,1214.48 1850.98,1213.14 1851.57,1211.96 1852.16,1211.08 1852.74,1210.24 1853.33,1205.38 1853.92,1205.94 1854.5,1206.58 1855.09,1209.48 1855.68,1208.71 1856.26,1209.17 1856.85,1209.54 1857.43,1209.9 1858.02,1211.53 1858.61,1213.09 1859.19,1215.94 1859.78,1214.73 1860.37,1217.12 1860.95,1218.29 1861.54,1219.28 1862.13,1217.94 1862.71,1218.98 1863.3,1222.48 1863.88,1221.03 1864.47,1219.58 1865.06,1220.49 1865.64,1220.21 1866.23,1219.93 1866.82,1220.63 1867.4,1218.94 1867.99,1218.71 1868.58,1215.55 1869.16,1216.95 1869.75,1218.05 1870.34,1219.22 1870.92,1218.98 1871.51,1219.1 1872.09,1215.08 1872.68,1216.29 1873.27,1216.29 1873.85,1216.36 1874.44,1218.96 1875.03,1221.43 1875.61,1223.51 1876.2,1224.77 1876.79,1223.15 1877.37,1222.84 1877.96,1221.21 1878.55,1223.3 1879.13,1221.66 1879.72,1222.83 1880.3,1222.23 1880.89,1221.98 1881.48,1220.5 1882.06,1217.94 1882.65,1216.58 1883.24,1217.98 1883.82,1216.58 1884.41,1216.81 1885,1220.41 1885.58,1216.55 1886.17,1216.37 1886.76,1216.11 1887.34,1217.49 1887.93,1220.21 1888.51,1217.53 1889.1,1217.54 1889.69,1213.57 1890.27,1215.05 1890.86,1212.59 1891.45,1213.81 1892.03,1211.47 1892.62,1212.94 1893.21,1210.65 1893.79,1212.33 1894.38,1211.4 1894.96,1211.72 1895.55,1209.46 1896.14,1209.9 1896.72,1209.17 1897.31,1209.55 1897.9,1213.79 1898.48,1215.13 1899.07,1215.13 1899.66,1213.97 1900.24,1215.71 1900.83,1214.62 1901.42,1213.64 1902,1216.17 1902.59,1218.34 1903.17,1218.72 1903.76,1216.28 1904.35,1216.5 1904.93,1217.88 1905.52,1220.3 1906.11,1217.68 1906.69,1219.15 1907.28,1220.17 1907.87,1217.61 1908.45,1217.66 1909.04,1217.63 1909.63,1218.76 1910.21,1218.64 1910.8,1217.48 1911.38,1216.07 1911.97,1216.17 1912.56,1213.71 1913.14,1211.59 1913.73,1211.92 1914.32,1212.41 1914.9,1212.59 1915.49,1211.64 1916.08,1211.9 1916.66,1212.42 1917.25,1211.49 1917.83,1211.52 1918.42,1212.88 1919.01,1211.66 1919.59,1211.74 1920.18,1212.35 1920.77,1212.68 1921.35,1211.75 1921.94,1214.29 1922.53,1213.17 1923.11,1217.01 1923.7,1215.49 1924.29,1216.48 1924.87,1217.57 1925.46,1218.67 1926.04,1221.15 1926.63,1218.58 1927.22,1219.71 1927.8,1220.66 1928.39,1222.79 1928.98,1223.62 1929.56,1224.85 1930.15,1224.23 1930.74,1223.66 1931.32,1224.44 1931.91,1221.35 1932.5,1221.24 1933.08,1219.73 1933.67,1218.12 1934.25,1219.33 1934.84,1220.32 1935.43,1217.6 1936.01,1216.51 1936.6,1216.58 1937.19,1216.71 1937.77,1218.13 1938.36,1218.05 1938.95,1217.84 1939.53,1220.31 1940.12,1220.26 1940.71,1219.02 1941.29,1219.12 1941.88,1217.75 1942.46,1216.41 1943.05,1216.22 1943.64,1216.34 1944.22,1217.64 1944.81,1218.76 1945.4,1218.78 1945.98,1219.76 1946.57,1220.84 1947.16,1224.53 1947.74,1224.05 1948.33,1223.8 1948.91,1223.43 1949.5,1221.93 1950.09,1221.76 1950.67,1222.65 1951.26,1222.53 1951.85,1222.25 1952.43,1223.1 1953.02,1223.87 1953.61,1222.09 1954.19,1220.69 1954.78,1216.77 1955.37,1214.17 1955.95,1213.05 1956.54,1213.19 1957.12,1211.96 1957.71,1211.15 1958.3,1212.84 1958.88,1209.49 1959.47,1209.84 1960.06,1207.82 1960.64,1206.76 1961.23,1204.74 1961.82,1205.41 1962.4,1203.73 1962.99,1200.69 1963.58,1202.9 1964.16,1202.49 1964.75,1203.16 1965.33,1205.06 1965.92,1205.56 1966.51,1206.31 1967.09,1207.97 1967.68,1207.34 1968.27,1207.87 1968.85,1209.63 1969.44,1209.96 1970.03,1210.25 1970.61,1210.53 1971.2,1216.07 1971.78,1217.29 1972.37,1215.93 1972.96,1216.14 1973.54,1216.1 1974.13,1216.09 1974.72,1215.99 1975.3,1218.72 1975.89,1216.12 1976.48,1217.41 1977.06,1220.05 1977.65,1218.74 1978.24,1217.22 1978.82,1218.33 1979.41,1218.36 1979.99,1216.86 1980.58,1218.26 1981.17,1215.62 1981.75,1220.6 1982.34,1220.42 1982.93,1221.59 1983.51,1218.88 1984.1,1219.02 1984.69,1218.85 1985.27,1218.66 1985.86,1217.23 1986.45,1218.49 1987.03,1218.42 1987.62,1219.66 1988.2,1223.25 1988.79,1220.44 1989.38,1221.69 1989.96,1222.68 1990.55,1221.17 1991.14,1220.84 1991.72,1219.47 1992.31,1220.56 1992.9,1220.61 1993.48,1219.11 1994.07,1216.69 1994.65,1216.84 1995.24,1215.48 1995.83,1215.52 1996.41,1216.67 1997,1218.11 1997.59,1220.7 1998.17,1223 1998.76,1222.81 1999.35,1222.28 1999.93,1222.23 2000.52,1220.66 2001.11,1216.65 2001.69,1214.36 2002.28,1216.76 2002.86,1212.98 2003.45,1212.22 2004.04,1212.45 2004.62,1215.21 2005.21,1213.94 2005.8,1214.17 2006.38,1215.65 2006.97,1215.56 2007.56,1216.88 2008.14,1219.48 2008.73,1220.3 2009.32,1217.7 2009.9,1215.32 2010.49,1216.86 2011.07,1216.8 2011.66,1216.71 2012.25,1213.13 2012.83,1213.31 2013.42,1213.53 2014.01,1216.3 2014.59,1218.85 2015.18,1217.58 2015.77,1216.15 2016.35,1213.49 2016.94,1215.09 2017.53,1215.22 2018.11,1215.32 2018.7,1217.8 2019.28,1218.65 2019.87,1217.17 2020.46,1216.07 2021.04,1216.12 2021.63,1215.98 2022.22,1214.61 2022.8,1215.96 2023.39,1213.38 2023.98,1217.24 2024.56,1218.62 2025.15,1218.34 2025.73,1215.76 2026.32,1216.02 2026.91,1214.85 2027.49,1216.32 2028.08,1216.24 2028.67,1220.13 2029.25,1219.99 2029.84,1218.25 2030.43,1218.07 2031.01,1219.48 2031.6,1221.86 2032.19,1222.61 2032.77,1217.31 2033.36,1217.43 2033.94,1217.59 2034.53,1216.2 2035.12,1216.26 2035.7,1217.24 2036.29,1215.89 2036.88,1213.16 2037.46,1214.6 2038.05,1214.58 2038.64,1216.21 2039.22,1216.2 2039.81,1216.32 2040.4,1216.17 2040.98,1214.84 2041.57,1216.17 2042.15,1217.57 2042.74,1217.85 2043.33,1220.29 2043.91,1220.15 2044.5,1217.31 2045.09,1214.65 2045.67,1210.81 2046.26,1211.04 2046.85,1211.37 2047.43,1211.47 2048.02,1211.77 2048.6,1214.48 2049.19,1212.07 2049.78,1212.51 2050.36,1209.18 2050.95,1209.8 2051.54,1210.29 2052.12,1211.47 2052.71,1212.85 2053.3,1214.1 2053.88,1212.78 2054.47,1210.52 2055.06,1209.6 2055.64,1208.64 2056.23,1209.02 2056.81,1208.16 2057.4,1211.04 2057.99,1212.86 2058.57,1214.39 2059.16,1214.76 2059.75,1213.45 2060.33,1212.48 2060.92,1212.9 2061.51,1216.78 2062.09,1215.51 2062.68,1214.47 2063.27,1213.32 2063.85,1213.41 2064.44,1213.43 2065.02,1213.72 2065.61,1214.01 2066.2,1213.21 2066.78,1212.14 2067.37,1216.33 2067.96,1216.14 2068.54,1216.35 2069.13,1216.58 2069.72,1215.4 2070.3,1217.91 2070.89,1216.6 2071.48,1215.12 2072.06,1215.37 2072.65,1214.25 2073.23,1215.61 2073.82,1215.73 2074.41,1215.71 2074.99,1215.61 2075.58,1215.63 2076.17,1215.56 2076.75,1218.1 2077.34,1214.3 2077.93,1215.42 2078.51,1216.9 2079.1,1215.33 2079.68,1212.93 2080.27,1214.65 2080.86,1213.41 2081.44,1213.53 2082.03,1213.5 2082.62,1212.64 2083.2,1214.08 2083.79,1213.74 2084.38,1215.16 2084.96,1214.01 2085.55,1215.38 2086.14,1215.66 2086.72,1217.05 2087.31,1217.4 2087.89,1219.93 2088.48,1219.79 2089.07,1222.35 2089.65,1220.87 2090.24,1221.85 2090.83,1221.66 2091.41,1221.49 2092,1222.51 2092.59,1221.02 2093.17,1222.09 2093.76,1222.92 2094.35,1221.4 2094.93,1218.8 2095.52,1220.25 2096.1,1221.28 2096.69,1222.33 2097.28,1222.21 2097.86,1223.2 2098.45,1225.61 2099.04,1221.41 2099.62,1222.47 2100.21,1223.62 2100.8,1223.3 2101.38,1220.37 2101.97,1220.23 2102.55,1218.81 2103.14,1217.44 2103.73,1214.98 2104.31,1216.26 2104.9,1215.73 2105.49,1215.94 2106.07,1217.15 2106.66,1217.03 2107.25,1215.62 2107.83,1216.77 2108.42,1214.43 2109.01,1217.42 2109.59,1215.05 2110.18,1217.75 2110.76,1217.9 2111.35,1216.63 2111.94,1216.43 2112.52,1216.33 2113.11,1215.04 2113.7,1215.11 2114.28,1216.46 2114.87,1216.44 2115.46,1216.47 2116.04,1216.39 2116.63,1216.34 2117.22,1216.32 2117.8,1216.51 2118.39,1221.45 2118.97,1222.23 2119.56,1219.4 2120.15,1218.93 2120.73,1218.78 2121.32,1217.43 2121.91,1217.38 2122.49,1219.86 2123.08,1217.29 2123.67,1218.16 2124.25,1215.35 2124.84,1215.46 2125.42,1217.1 2126.01,1216.91 2126.6,1217.88 2127.18,1217.81 2127.77,1220.17 2128.36,1217.27 2128.94,1215.73 2129.53,1215.9 2130.12,1214.46 2130.7,1215.83 2131.29,1217.08 2131.88,1216.95 2132.46,1217.76 2133.05,1217.45 2133.63,1217.31 2134.22,1215.86 2134.81,1217.01 2135.39,1216.84 2135.98,1216.72 2136.57,1216.82 2137.15,1216.69 2137.74,1219.07 2138.33,1222.94 2138.91,1220.35 2139.5,1222.54 2140.09,1223.26 2140.67,1223.04 2141.26,1226.28 2141.84,1224.42 2142.43,1223.9 2143.02,1224.73 2143.6,1224.34 2144.19,1223.87 2144.78,1223.45 2145.36,1221.72 2145.95,1220.28 2146.54,1221.3 2147.12,1219.57 2147.71,1219.27 2148.3,1220.42 2148.88,1220.02 2149.47,1218.6 2150.05,1215.68 2150.64,1218.03 2151.23,1217.78 2151.81,1216.72 2152.4,1214.24 2152.99,1213.03 2153.57,1214.59 2154.16,1214.59 2154.75,1214.66 2155.33,1216 2155.92,1214.69 2156.5,1215.92 2157.09,1216.92 2157.68,1215.64 2158.26,1215.74 \"/>\n<path clip-path=\"url(#clip762)\" d=\"M986.025 1217.17 L986.612 1217.17 L987.198 1217.17 L987.785 1217.17 L988.371 1217.17 L988.957 1217.17 L989.544 1217.17 L990.13 1217.17 L990.717 1217.17 L991.303 1217.17 L991.889 1217.17 L992.476 1217.17 L993.062 1217.17 L993.649 1217.17 L994.235 1217.17 L994.822 1217.17 L995.408 1217.17 L995.994 1217.17 L996.581 1217.17 L997.167 1217.17 L997.754 1217.17 L998.34 1217.17 L998.926 1217.17 L999.513 1217.17 L1000.1 1217.17 L1000.69 1217.17 L1001.27 1217.17 L1001.86 1217.17 L1002.44 1217.17 L1003.03 1217.17 L1003.62 1217.17 L1004.2 1217.17 L1004.79 1217.17 L1005.38 1217.17 L1005.96 1217.17 L1006.55 1217.17 L1007.14 1217.17 L1007.72 1217.17 L1008.31 1217.17 L1008.9 1217.17 L1009.48 1217.17 L1010.07 1217.17 L1010.65 1217.17 L1011.24 1217.17 L1011.83 1217.17 L1012.41 1217.17 L1013 1217.17 L1013.59 1217.17 L1014.17 1217.17 L1014.76 1217.17 L1015.35 1217.17 L1015.93 1217.17 L1016.52 1217.17 L1017.11 1217.17 L1017.69 1217.17 L1018.28 1217.17 L1018.86 1217.17 L1019.45 1217.17 L1020.04 1217.17 L1020.62 1217.17 L1021.21 1217.17 L1021.8 1217.17 L1022.38 1217.17 L1022.97 1217.17 L1023.56 1217.17 L1024.14 1217.17 L1024.73 1217.17 L1025.32 1217.17 L1025.9 1217.17 L1026.49 1217.17 L1027.07 1217.17 L1027.66 1217.17 L1028.25 1217.17 L1028.83 1217.17 L1029.42 1217.17 L1030.01 1217.17 L1030.59 1217.17 L1031.18 1217.17 L1031.77 1217.17 L1032.35 1217.17 L1032.94 1217.17 L1033.52 1217.17 L1034.11 1217.17 L1034.7 1217.17 L1035.28 1217.17 L1035.87 1217.17 L1036.46 1217.17 L1037.04 1217.17 L1037.63 1217.17 L1038.22 1217.17 L1038.8 1217.17 L1039.39 1217.17 L1039.98 1217.17 L1040.56 1217.17 L1041.15 1217.17 L1041.73 1217.17 L1042.32 1217.17 L1042.91 1217.17 L1043.49 1217.17 L1044.08 1217.17 L1044.67 1217.17 L1045.25 1217.17 L1045.84 1217.17 L1046.43 1217.17 L1047.01 1217.17 L1047.6 1217.17 L1048.19 1217.17 L1048.77 1217.17 L1049.36 1217.17 L1049.94 1217.17 L1050.53 1217.17 L1051.12 1217.17 L1051.7 1217.17 L1052.29 1217.17 L1052.88 1217.17 L1053.46 1217.17 L1054.05 1217.17 L1054.64 1217.17 L1055.22 1217.17 L1055.81 1217.17 L1056.39 1217.17 L1056.98 1217.17 L1057.57 1217.17 L1058.15 1217.17 L1058.74 1217.17 L1059.33 1217.17 L1059.91 1217.17 L1060.5 1217.17 L1061.09 1217.17 L1061.67 1217.17 L1062.26 1217.17 L1062.85 1217.17 L1063.43 1217.17 L1064.02 1217.17 L1064.6 1217.17 L1065.19 1217.17 L1065.78 1217.17 L1066.36 1217.17 L1066.95 1217.17 L1067.54 1217.17 L1068.12 1217.17 L1068.71 1217.17 L1069.3 1217.17 L1069.88 1217.17 L1070.47 1217.17 L1071.06 1217.17 L1071.64 1217.17 L1072.23 1217.17 L1072.81 1217.17 L1073.4 1217.17 L1073.99 1217.17 L1074.57 1217.17 L1075.16 1217.17 L1075.75 1217.17 L1076.33 1217.17 L1076.92 1217.17 L1077.51 1217.17 L1078.09 1217.17 L1078.68 1217.17 L1079.26 1217.17 L1079.85 1217.17 L1080.44 1217.17 L1081.02 1217.17 L1081.61 1217.17 L1082.2 1217.17 L1082.78 1217.17 L1083.37 1217.17 L1083.96 1217.17 L1084.54 1217.17 L1085.13 1217.17 L1085.72 1217.17 L1086.3 1217.17 L1086.89 1217.17 L1087.47 1217.17 L1088.06 1217.17 L1088.65 1217.17 L1089.23 1217.17 L1089.82 1217.17 L1090.41 1217.17 L1090.99 1217.17 L1091.58 1217.17 L1092.17 1217.17 L1092.75 1217.17 L1093.34 1217.17 L1093.93 1217.17 L1094.51 1217.17 L1095.1 1217.17 L1095.68 1217.17 L1096.27 1217.17 L1096.86 1217.17 L1097.44 1217.17 L1098.03 1217.17 L1098.62 1217.17 L1099.2 1217.17 L1099.79 1217.17 L1100.38 1217.17 L1100.96 1217.17 L1101.55 1217.17 L1102.14 1217.17 L1102.72 1217.17 L1103.31 1217.17 L1103.89 1217.17 L1104.48 1217.17 L1105.07 1217.17 L1105.65 1217.17 L1106.24 1217.17 L1106.83 1217.17 L1107.41 1217.17 L1108 1217.17 L1108.59 1217.17 L1109.17 1217.17 L1109.76 1217.17 L1110.34 1217.17 L1110.93 1217.17 L1111.52 1217.17 L1112.1 1217.17 L1112.69 1217.17 L1113.28 1217.17 L1113.86 1217.17 L1114.45 1217.17 L1115.04 1217.17 L1115.62 1217.17 L1116.21 1217.17 L1116.8 1217.17 L1117.38 1217.17 L1117.97 1217.17 L1118.55 1217.17 L1119.14 1217.17 L1119.73 1217.17 L1120.31 1217.17 L1120.9 1217.17 L1121.49 1217.17 L1122.07 1217.17 L1122.66 1217.17 L1123.25 1217.17 L1123.83 1217.17 L1124.42 1217.17 L1125.01 1217.17 L1125.59 1217.17 L1126.18 1217.17 L1126.76 1217.17 L1127.35 1217.17 L1127.94 1217.17 L1128.52 1217.17 L1129.11 1217.17 L1129.7 1217.17 L1130.28 1217.17 L1130.87 1217.17 L1131.46 1217.17 L1132.04 1217.17 L1132.63 1217.17 L1133.21 1217.17 L1133.8 1217.17 L1134.39 1217.17 L1134.97 1217.17 L1135.56 1217.17 L1136.15 1217.17 L1136.73 1217.17 L1137.32 1217.17 L1137.91 1217.17 L1138.49 1217.17 L1139.08 1217.17 L1139.67 1217.17 L1140.25 1217.17 L1140.84 1217.17 L1141.42 1217.17 L1142.01 1217.17 L1142.6 1217.17 L1143.18 1217.17 L1143.77 1217.17 L1144.36 1217.17 L1144.94 1217.17 L1145.53 1217.17 L1146.12 1217.17 L1146.7 1217.17 L1147.29 1217.17 L1147.88 1217.17 L1148.46 1217.17 L1149.05 1217.17 L1149.63 1217.17 L1150.22 1217.17 L1150.81 1217.17 L1151.39 1217.17 L1151.98 1217.17 L1152.57 1217.17 L1153.15 1217.17 L1153.74 1217.17 L1154.33 1217.17 L1154.91 1217.17 L1155.5 1217.17 L1156.09 1217.17 L1156.67 1217.17 L1157.26 1217.17 L1157.84 1217.17 L1158.43 1217.17 L1159.02 1217.17 L1159.6 1217.17 L1160.19 1217.17 L1160.78 1217.17 L1161.36 1217.17 L1161.95 1217.17 L1162.54 1217.17 L1163.12 1217.17 L1163.71 1217.17 L1164.29 1217.17 L1164.88 1217.17 L1165.47 1217.17 L1166.05 1217.17 L1166.64 1217.17 L1167.23 1217.17 L1167.81 1217.17 L1168.4 1217.17 L1168.99 1217.17 L1169.57 1217.17 L1170.16 1217.17 L1170.75 1217.17 L1171.33 1217.17 L1171.92 1217.17 L1172.5 1217.17 L1173.09 1217.17 L1173.68 1217.17 L1174.26 1217.17 L1174.85 1217.17 L1175.44 1217.17 L1176.02 1217.17 L1176.61 1217.17 L1177.2 1217.17 L1177.78 1217.17 L1178.37 1217.17 L1178.96 1217.17 L1179.54 1217.17 L1180.13 1217.17 L1180.71 1217.17 L1181.3 1217.17 L1181.89 1217.17 L1182.47 1217.17 L1183.06 1217.17 L1183.65 1217.17 L1184.23 1217.17 L1184.82 1217.17 L1185.41 1217.17 L1185.99 1217.17 L1186.58 1217.17 L1187.16 1217.17 L1187.75 1217.17 L1188.34 1217.17 L1188.92 1217.17 L1189.51 1217.17 L1190.1 1217.17 L1190.68 1217.17 L1191.27 1217.17 L1191.86 1217.17 L1192.44 1217.17 L1193.03 1217.17 L1193.62 1217.17 L1194.2 1217.17 L1194.79 1217.17 L1195.37 1217.17 L1195.96 1217.17 L1196.55 1217.17 L1197.13 1217.17 L1197.72 1217.17 L1198.31 1217.17 L1198.89 1217.17 L1199.48 1217.17 L1200.07 1217.17 L1200.65 1217.17 L1201.24 1217.17 L1201.83 1217.17 L1202.41 1217.17 L1203 1217.17 L1203.58 1217.17 L1204.17 1217.17 L1204.76 1217.17 L1205.34 1217.17 L1205.93 1217.17 L1206.52 1217.17 L1207.1 1217.17 L1207.69 1217.17 L1208.28 1217.17 L1208.86 1217.17 L1209.45 1217.17 L1210.03 1217.17 L1210.62 1217.17 L1211.21 1217.17 L1211.79 1217.17 L1212.38 1217.17 L1212.97 1217.17 L1213.55 1217.17 L1214.14 1217.17 L1214.73 1217.17 L1215.31 1217.17 L1215.9 1217.17 L1216.49 1217.17 L1217.07 1217.17 L1217.66 1217.17 L1218.24 1217.17 L1218.83 1217.17 L1219.42 1217.17 L1220 1217.17 L1220.59 1217.17 L1221.18 1217.17 L1221.76 1217.17 L1222.35 1217.17 L1222.94 1217.17 L1223.52 1217.17 L1224.11 1217.17 L1224.7 1217.17 L1225.28 1217.17 L1225.87 1217.17 L1226.45 1217.17 L1227.04 1217.17 L1227.63 1217.17 L1228.21 1217.17 L1228.8 1217.17 L1229.39 1217.17 L1229.97 1217.17 L1230.56 1217.17 L1231.15 1217.17 L1231.73 1217.17 L1232.32 1217.17 L1232.91 1217.17 L1233.49 1217.17 L1234.08 1217.17 L1234.66 1217.17 L1235.25 1217.17 L1235.84 1217.17 L1236.42 1217.17 L1237.01 1217.17 L1237.6 1217.17 L1238.18 1217.17 L1238.77 1217.17 L1239.36 1217.17 L1239.94 1217.17 L1240.53 1217.17 L1241.11 1217.17 L1241.7 1217.17 L1242.29 1217.17 L1242.87 1217.17 L1243.46 1217.17 L1244.05 1217.17 L1244.63 1217.17 L1245.22 1217.17 L1245.81 1217.17 L1246.39 1217.17 L1246.98 1217.17 L1247.57 1217.17 L1248.15 1217.17 L1248.74 1217.17 L1249.32 1217.17 L1249.91 1217.17 L1250.5 1217.17 L1251.08 1217.17 L1251.67 1217.17 L1252.26 1217.17 L1252.84 1217.17 L1253.43 1217.17 L1254.02 1217.17 L1254.6 1217.17 L1255.19 1217.17 L1255.78 1217.17 L1256.36 1217.17 L1256.95 1217.17 L1257.53 1217.17 L1258.12 1217.17 L1258.71 1217.17 L1259.29 1217.17 L1259.88 1217.17 L1260.47 1217.17 L1261.05 1217.17 L1261.64 1217.17 L1262.23 1217.17 L1262.81 1217.17 L1263.4 1217.17 L1263.98 1217.17 L1264.57 1217.17 L1265.16 1217.17 L1265.74 1217.17 L1266.33 1217.17 L1266.92 1217.17 L1267.5 1217.17 L1268.09 1217.17 L1268.68 1217.17 L1269.26 1217.17 L1269.85 1217.17 L1270.44 1217.17 L1271.02 1217.17 L1271.61 1217.17 L1272.19 1217.17 L1272.78 1217.17 L1273.37 1217.17 L1273.95 1217.17 L1274.54 1217.17 L1275.13 1217.17 L1275.71 1217.17 L1276.3 1217.17 L1276.89 1217.17 L1277.47 1217.17 L1278.06 1217.17 L1278.65 1217.17 L1279.23 1217.17 L1279.82 1217.17 L1280.4 1217.17 L1280.99 1217.17 L1281.58 1217.17 L1282.16 1217.17 L1282.75 1217.17 L1283.34 1217.17 L1283.92 1217.17 L1284.51 1217.17 L1285.1 1217.17 L1285.68 1217.17 L1286.27 1217.17 L1286.86 1217.17 L1287.44 1217.17 L1288.03 1217.17 L1288.61 1217.17 L1289.2 1217.17 L1289.79 1217.17 L1290.37 1217.17 L1290.96 1217.17 L1291.55 1217.17 L1292.13 1217.17 L1292.72 1217.17 L1293.31 1217.17 L1293.89 1217.17 L1294.48 1217.17 L1295.06 1217.17 L1295.65 1217.17 L1296.24 1217.17 L1296.82 1217.17 L1297.41 1217.17 L1298 1217.17 L1298.58 1217.17 L1299.17 1217.17 L1299.76 1217.17 L1300.34 1217.17 L1300.93 1217.17 L1301.52 1217.17 L1302.1 1217.17 L1302.69 1217.17 L1303.27 1217.17 L1303.86 1217.17 L1304.45 1217.17 L1305.03 1217.17 L1305.62 1217.17 L1306.21 1217.17 L1306.79 1217.17 L1307.38 1217.17 L1307.97 1217.17 L1308.55 1217.17 L1309.14 1217.17 L1309.73 1217.17 L1310.31 1217.17 L1310.9 1217.17 L1311.48 1217.17 L1312.07 1217.17 L1312.66 1217.17 L1313.24 1217.17 L1313.83 1217.17 L1314.42 1217.17 L1315 1217.17 L1315.59 1217.17 L1316.18 1217.17 L1316.76 1217.17 L1317.35 1217.17 L1317.93 1217.17 L1318.52 1217.17 L1319.11 1217.17 L1319.69 1217.17 L1320.28 1217.17 L1320.87 1217.17 L1321.45 1217.17 L1322.04 1217.17 L1322.63 1217.17 L1323.21 1217.17 L1323.8 1217.17 L1324.39 1217.17 L1324.97 1217.17 L1325.56 1217.17 L1326.14 1217.17 L1326.73 1217.17 L1327.32 1217.17 L1327.9 1217.17 L1328.49 1217.17 L1329.08 1217.17 L1329.66 1217.17 L1330.25 1217.17 L1330.84 1217.17 L1331.42 1217.17 L1332.01 1217.17 L1332.6 1217.17 L1333.18 1217.17 L1333.77 1217.17 L1334.35 1217.17 L1334.94 1217.17 L1335.53 1217.17 L1336.11 1217.17 L1336.7 1217.17 L1337.29 1217.17 L1337.87 1217.17 L1338.46 1217.17 L1339.05 1217.17 L1339.63 1217.17 L1340.22 1217.17 L1340.8 1217.17 L1341.39 1217.17 L1341.98 1217.17 L1342.56 1217.17 L1343.15 1217.17 L1343.74 1217.17 L1344.32 1217.17 L1344.91 1217.17 L1345.5 1217.17 L1346.08 1217.17 L1346.67 1217.17 L1347.26 1217.17 L1347.84 1217.17 L1348.43 1217.17 L1349.01 1217.17 L1349.6 1217.17 L1350.19 1217.17 L1350.77 1217.17 L1351.36 1217.17 L1351.95 1217.17 L1352.53 1217.17 L1353.12 1217.17 L1353.71 1217.17 L1354.29 1217.17 L1354.88 1217.17 L1355.47 1217.17 L1356.05 1217.17 L1356.64 1217.17 L1357.22 1217.17 L1357.81 1217.17 L1358.4 1217.17 L1358.98 1217.17 L1359.57 1217.17 L1360.16 1217.17 L1360.74 1217.17 L1361.33 1217.17 L1361.92 1217.17 L1362.5 1217.17 L1363.09 1217.17 L1363.68 1217.17 L1364.26 1217.17 L1364.85 1217.17 L1365.43 1217.17 L1366.02 1217.17 L1366.61 1217.17 L1367.19 1217.17 L1367.78 1217.17 L1368.37 1217.17 L1368.95 1217.17 L1369.54 1217.17 L1370.13 1217.17 L1370.71 1217.17 L1371.3 1217.17 L1371.88 1217.17 L1372.47 1217.17 L1373.06 1217.17 L1373.64 1217.17 L1374.23 1217.17 L1374.82 1217.17 L1375.4 1217.17 L1375.99 1217.17 L1376.58 1217.17 L1377.16 1217.17 L1377.75 1217.17 L1378.34 1217.17 L1378.92 1217.17 L1379.51 1217.17 L1380.09 1217.17 L1380.68 1217.17 L1381.27 1217.17 L1381.85 1217.17 L1382.44 1217.17 L1383.03 1217.17 L1383.61 1217.17 L1384.2 1217.17 L1384.79 1217.17 L1385.37 1217.17 L1385.96 1217.17 L1386.55 1217.17 L1387.13 1217.17 L1387.72 1217.17 L1388.3 1217.17 L1388.89 1217.17 L1389.48 1217.17 L1390.06 1217.17 L1390.65 1217.17 L1391.24 1217.17 L1391.82 1217.17 L1392.41 1217.17 L1393 1217.17 L1393.58 1217.17 L1394.17 1217.17 L1394.75 1217.17 L1395.34 1217.17 L1395.93 1217.17 L1396.51 1217.17 L1397.1 1217.17 L1397.69 1217.17 L1398.27 1217.17 L1398.86 1217.17 L1399.45 1217.17 L1400.03 1217.17 L1400.62 1217.17 L1401.21 1217.17 L1401.79 1217.17 L1402.38 1217.17 L1402.96 1217.17 L1403.55 1217.17 L1404.14 1217.17 L1404.72 1217.17 L1405.31 1217.17 L1405.9 1217.17 L1406.48 1217.17 L1407.07 1217.17 L1407.66 1217.17 L1408.24 1217.17 L1408.83 1217.17 L1409.42 1217.17 L1410 1217.17 L1410.59 1217.17 L1411.17 1217.17 L1411.76 1217.17 L1412.35 1217.17 L1412.93 1217.17 L1413.52 1217.17 L1414.11 1217.17 L1414.69 1217.17 L1415.28 1217.17 L1415.87 1217.17 L1416.45 1217.17 L1417.04 1217.17 L1417.63 1217.17 L1418.21 1217.17 L1418.8 1217.17 L1419.38 1217.17 L1419.97 1217.17 L1420.56 1217.17 L1421.14 1217.17 L1421.73 1217.17 L1422.32 1217.17 L1422.9 1217.17 L1423.49 1217.17 L1424.08 1217.17 L1424.66 1217.17 L1425.25 1217.17 L1425.83 1217.17 L1426.42 1217.17 L1427.01 1217.17 L1427.59 1217.17 L1428.18 1217.17 L1428.77 1217.17 L1429.35 1217.17 L1429.94 1217.17 L1430.53 1217.17 L1431.11 1217.17 L1431.7 1217.17 L1432.29 1217.17 L1432.87 1217.17 L1433.46 1217.17 L1434.04 1217.17 L1434.63 1217.17 L1435.22 1217.17 L1435.8 1217.17 L1436.39 1217.17 L1436.98 1217.17 L1437.56 1217.17 L1438.15 1217.17 L1438.74 1217.17 L1439.32 1217.17 L1439.91 1217.17 L1440.5 1217.17 L1441.08 1217.17 L1441.67 1217.17 L1442.25 1217.17 L1442.84 1217.17 L1443.43 1217.17 L1444.01 1217.17 L1444.6 1217.17 L1445.19 1217.17 L1445.77 1217.17 L1446.36 1217.17 L1446.95 1217.17 L1447.53 1217.17 L1448.12 1217.17 L1448.7 1217.17 L1449.29 1217.17 L1449.88 1217.17 L1450.46 1217.17 L1451.05 1217.17 L1451.64 1217.17 L1452.22 1217.17 L1452.81 1217.17 L1453.4 1217.17 L1453.98 1217.17 L1454.57 1217.17 L1455.16 1217.17 L1455.74 1217.17 L1456.33 1217.17 L1456.91 1217.17 L1457.5 1217.17 L1458.09 1217.17 L1458.67 1217.17 L1459.26 1217.17 L1459.85 1217.17 L1460.43 1217.17 L1461.02 1217.17 L1461.61 1217.17 L1462.19 1217.17 L1462.78 1217.17 L1463.37 1217.17 L1463.95 1217.17 L1464.54 1217.17 L1465.12 1217.17 L1465.71 1217.17 L1466.3 1217.17 L1466.88 1217.17 L1467.47 1217.17 L1468.06 1217.17 L1468.64 1217.17 L1469.23 1217.17 L1469.82 1217.17 L1470.4 1217.17 L1470.99 1217.17 L1471.57 1217.17 L1472.16 1217.17 L1472.75 1217.17 L1473.33 1217.17 L1473.92 1217.17 L1474.51 1217.17 L1475.09 1217.17 L1475.68 1217.17 L1476.27 1217.17 L1476.85 1217.17 L1477.44 1217.17 L1478.03 1217.17 L1478.61 1217.17 L1479.2 1217.17 L1479.78 1217.17 L1480.37 1217.17 L1480.96 1217.17 L1481.54 1217.17 L1482.13 1217.17 L1482.72 1217.17 L1483.3 1217.17 L1483.89 1217.17 L1484.48 1217.17 L1485.06 1217.17 L1485.65 1217.17 L1486.24 1217.17 L1486.82 1217.17 L1487.41 1217.17 L1487.99 1217.17 L1488.58 1217.17 L1489.17 1217.17 L1489.75 1217.17 L1490.34 1217.17 L1490.93 1217.17 L1491.51 1217.17 L1492.1 1217.17 L1492.69 1217.17 L1493.27 1217.17 L1493.86 1217.17 L1494.45 1217.17 L1495.03 1217.17 L1495.62 1217.17 L1496.2 1217.17 L1496.79 1217.17 L1497.38 1217.17 L1497.96 1217.17 L1498.55 1217.17 L1499.14 1217.17 L1499.72 1217.17 L1500.31 1217.17 L1500.9 1217.17 L1501.48 1217.17 L1502.07 1217.17 L1502.65 1217.17 L1503.24 1217.17 L1503.83 1217.17 L1504.41 1217.17 L1505 1217.17 L1505.59 1217.17 L1506.17 1217.17 L1506.76 1217.17 L1507.35 1217.17 L1507.93 1217.17 L1508.52 1217.17 L1509.11 1217.17 L1509.69 1217.17 L1510.28 1217.17 L1510.86 1217.17 L1511.45 1217.17 L1512.04 1217.17 L1512.62 1217.17 L1513.21 1217.17 L1513.8 1217.17 L1514.38 1217.17 L1514.97 1217.17 L1515.56 1217.17 L1516.14 1217.17 L1516.73 1217.17 L1517.32 1217.17 L1517.9 1217.17 L1518.49 1217.17 L1519.07 1217.17 L1519.66 1217.17 L1520.25 1217.17 L1520.83 1217.17 L1521.42 1217.17 L1522.01 1217.17 L1522.59 1217.17 L1523.18 1217.17 L1523.77 1217.17 L1524.35 1217.17 L1524.94 1217.17 L1525.52 1217.17 L1526.11 1217.17 L1526.7 1217.17 L1527.28 1217.17 L1527.87 1217.17 L1528.46 1217.17 L1529.04 1217.17 L1529.63 1217.17 L1530.22 1217.17 L1530.8 1217.17 L1531.39 1217.17 L1531.98 1217.17 L1532.56 1217.17 L1533.15 1217.17 L1533.73 1217.17 L1534.32 1217.17 L1534.91 1217.17 L1535.49 1217.17 L1536.08 1217.17 L1536.67 1217.17 L1537.25 1217.17 L1537.84 1217.17 L1538.43 1217.17 L1539.01 1217.17 L1539.6 1217.17 L1540.19 1217.17 L1540.77 1217.17 L1541.36 1217.17 L1541.94 1217.17 L1542.53 1217.17 L1543.12 1217.17 L1543.7 1217.17 L1544.29 1217.17 L1544.88 1217.17 L1545.46 1217.17 L1546.05 1217.17 L1546.64 1217.17 L1547.22 1217.17 L1547.81 1217.17 L1548.4 1217.17 L1548.98 1217.17 L1549.57 1217.17 L1550.15 1217.17 L1550.74 1217.17 L1551.33 1217.17 L1551.91 1217.17 L1552.5 1217.17 L1553.09 1217.17 L1553.67 1217.17 L1554.26 1217.17 L1554.85 1217.17 L1555.43 1217.17 L1556.02 1217.17 L1556.6 1217.17 L1557.19 1217.17 L1557.78 1217.17 L1558.36 1217.17 L1558.95 1217.17 L1559.54 1217.17 L1560.12 1217.17 L1560.71 1217.17 L1561.3 1217.17 L1561.88 1217.17 L1562.47 1217.17 L1563.06 1217.17 L1563.64 1217.17 L1564.23 1217.17 L1564.81 1217.17 L1565.4 1217.17 L1565.99 1217.17 L1566.57 1217.17 L1567.16 1217.17 L1567.75 1217.17 L1568.33 1217.17 L1568.92 1217.17 L1569.51 1217.17 L1570.09 1217.17 L1570.68 1217.17 L1571.27 1217.17 L1571.85 1217.17 L1572.44 1217.17 L1573.02 1217.17 L1573.61 1217.17 L1574.2 1217.17 L1574.78 1217.17 L1575.37 1217.17 L1575.96 1217.17 L1576.54 1217.17 L1577.13 1217.17 L1577.72 1217.17 L1578.3 1217.17 L1578.89 1217.17 L1579.47 1217.17 L1580.06 1217.17 L1580.65 1217.17 L1581.23 1217.17 L1581.82 1217.17 L1582.41 1217.17 L1582.99 1217.17 L1583.58 1217.17 L1584.17 1217.17 L1584.75 1217.17 L1585.34 1217.17 L1585.93 1217.17 L1586.51 1217.17 L1587.1 1217.17 L1587.68 1217.17 L1588.27 1217.17 L1588.86 1217.17 L1589.44 1217.17 L1590.03 1217.17 L1590.62 1217.17 L1591.2 1217.17 L1591.79 1217.17 L1592.38 1217.17 L1592.96 1217.17 L1593.55 1217.17 L1594.14 1217.17 L1594.72 1217.17 L1595.31 1217.17 L1595.89 1217.17 L1596.48 1217.17 L1597.07 1217.17 L1597.65 1217.17 L1598.24 1217.17 L1598.83 1217.17 L1599.41 1217.17 L1600 1217.17 L1600.59 1217.17 L1601.17 1217.17 L1601.76 1217.17 L1602.34 1217.17 L1602.93 1217.17 L1603.52 1217.17 L1604.1 1217.17 L1604.69 1217.17 L1605.28 1217.17 L1605.86 1217.17 L1606.45 1217.17 L1607.04 1217.17 L1607.62 1217.17 L1608.21 1217.17 L1608.8 1217.17 L1609.38 1217.17 L1609.97 1217.17 L1610.55 1217.17 L1611.14 1217.17 L1611.73 1217.17 L1612.31 1217.17 L1612.9 1217.17 L1613.49 1217.17 L1614.07 1217.17 L1614.66 1217.17 L1615.25 1217.17 L1615.83 1217.17 L1616.42 1217.17 L1617.01 1217.17 L1617.59 1217.17 L1618.18 1217.17 L1618.76 1217.17 L1619.35 1217.17 L1619.94 1217.17 L1620.52 1217.17 L1621.11 1217.17 L1621.7 1217.17 L1622.28 1217.17 L1622.87 1217.17 L1623.46 1217.17 L1624.04 1217.17 L1624.63 1217.17 L1625.22 1217.17 L1625.8 1217.17 L1626.39 1217.17 L1626.97 1217.17 L1627.56 1217.17 L1628.15 1217.17 L1628.73 1217.17 L1629.32 1217.17 L1629.91 1217.17 L1630.49 1217.17 L1631.08 1217.17 L1631.67 1217.17 L1632.25 1217.17 L1632.84 1217.17 L1633.42 1217.17 L1634.01 1217.17 L1634.6 1217.17 L1635.18 1217.17 L1635.77 1217.17 L1636.36 1217.17 L1636.94 1217.17 L1637.53 1217.17 L1638.12 1217.17 L1638.7 1217.17 L1639.29 1217.17 L1639.88 1217.17 L1640.46 1217.17 L1641.05 1217.17 L1641.63 1217.17 L1642.22 1217.17 L1642.81 1217.17 L1643.39 1217.17 L1643.98 1217.17 L1644.57 1217.17 L1645.15 1217.17 L1645.74 1217.17 L1646.33 1217.17 L1646.91 1217.17 L1647.5 1217.17 L1648.09 1217.17 L1648.67 1217.17 L1649.26 1217.17 L1649.84 1217.17 L1650.43 1217.17 L1651.02 1217.17 L1651.6 1217.17 L1652.19 1217.17 L1652.78 1217.17 L1653.36 1217.17 L1653.95 1217.17 L1654.54 1217.17 L1655.12 1217.17 L1655.71 1217.17 L1656.29 1217.17 L1656.88 1217.17 L1657.47 1217.17 L1658.05 1217.17 L1658.64 1217.17 L1659.23 1217.17 L1659.81 1217.17 L1660.4 1217.17 L1660.99 1217.17 L1661.57 1217.17 L1662.16 1217.17 L1662.75 1217.17 L1663.33 1217.17 L1663.92 1217.17 L1664.5 1217.17 L1665.09 1217.17 L1665.68 1217.17 L1666.26 1217.17 L1666.85 1217.17 L1667.44 1217.17 L1668.02 1217.17 L1668.61 1217.17 L1669.2 1217.17 L1669.78 1217.17 L1670.37 1217.17 L1670.96 1217.17 L1671.54 1217.17 L1672.13 1217.17 L1672.71 1217.17 L1673.3 1217.17 L1673.89 1217.17 L1674.47 1217.17 L1675.06 1217.17 L1675.65 1217.17 L1676.23 1217.17 L1676.82 1217.17 L1677.41 1217.17 L1677.99 1217.17 L1678.58 1217.17 L1679.17 1217.17 L1679.75 1217.17 L1680.34 1217.17 L1680.92 1217.17 L1681.51 1217.17 L1682.1 1217.17 L1682.68 1217.17 L1683.27 1217.17 L1683.86 1217.17 L1684.44 1217.17 L1685.03 1217.17 L1685.62 1217.17 L1686.2 1217.17 L1686.79 1217.17 L1687.37 1217.17 L1687.96 1217.17 L1688.55 1217.17 L1689.13 1217.17 L1689.72 1217.17 L1690.31 1217.17 L1690.89 1217.17 L1691.48 1217.17 L1692.07 1217.17 L1692.65 1217.17 L1693.24 1217.17 L1693.83 1217.17 L1694.41 1217.17 L1695 1217.17 L1695.58 1217.17 L1696.17 1217.17 L1696.76 1217.17 L1697.34 1217.17 L1697.93 1217.17 L1698.52 1217.17 L1699.1 1217.17 L1699.69 1217.17 L1700.28 1217.17 L1700.86 1217.17 L1701.45 1217.17 L1702.04 1217.17 L1702.62 1217.17 L1703.21 1217.17 L1703.79 1217.17 L1704.38 1217.17 L1704.97 1217.17 L1705.55 1217.17 L1706.14 1217.17 L1706.73 1217.17 L1707.31 1217.17 L1707.9 1217.17 L1708.49 1217.17 L1709.07 1217.17 L1709.66 1217.17 L1710.24 1217.17 L1710.83 1217.17 L1711.42 1217.17 L1712 1217.17 L1712.59 1217.17 L1713.18 1217.17 L1713.76 1217.17 L1714.35 1217.17 L1714.94 1217.17 L1715.52 1217.17 L1716.11 1217.17 L1716.7 1217.17 L1717.28 1217.17 L1717.87 1217.17 L1718.45 1217.17 L1719.04 1217.17 L1719.63 1217.17 L1720.21 1217.17 L1720.8 1217.17 L1721.39 1217.17 L1721.97 1217.17 L1722.56 1217.17 L1723.15 1217.17 L1723.73 1217.17 L1724.32 1217.17 L1724.91 1217.17 L1725.49 1217.17 L1726.08 1217.17 L1726.66 1217.17 L1727.25 1217.17 L1727.84 1217.17 L1728.42 1217.17 L1729.01 1217.17 L1729.6 1217.17 L1730.18 1217.17 L1730.77 1217.17 L1731.36 1217.17 L1731.94 1217.17 L1732.53 1217.17 L1733.11 1217.17 L1733.7 1217.17 L1734.29 1217.17 L1734.87 1217.17 L1735.46 1217.17 L1736.05 1217.17 L1736.63 1217.17 L1737.22 1217.17 L1737.81 1217.17 L1738.39 1217.17 L1738.98 1217.17 L1739.57 1217.17 L1740.15 1217.17 L1740.74 1217.17 L1741.32 1217.17 L1741.91 1217.17 L1742.5 1217.17 L1743.08 1217.17 L1743.67 1217.17 L1744.26 1217.17 L1744.84 1217.17 L1745.43 1217.17 L1746.02 1217.17 L1746.6 1217.17 L1747.19 1217.17 L1747.78 1217.17 L1748.36 1217.17 L1748.95 1217.17 L1749.53 1217.17 L1750.12 1217.17 L1750.71 1217.17 L1751.29 1217.17 L1751.88 1217.17 L1752.47 1217.17 L1753.05 1217.17 L1753.64 1217.17 L1754.23 1217.17 L1754.81 1217.17 L1755.4 1217.17 L1755.99 1217.17 L1756.57 1217.17 L1757.16 1217.17 L1757.74 1217.17 L1758.33 1217.17 L1758.92 1217.17 L1759.5 1217.17 L1760.09 1217.17 L1760.68 1217.17 L1761.26 1217.17 L1761.85 1217.17 L1762.44 1217.17 L1763.02 1217.17 L1763.61 1217.17 L1764.19 1217.17 L1764.78 1217.17 L1765.37 1217.17 L1765.95 1217.17 L1766.54 1217.17 L1767.13 1217.17 L1767.71 1217.17 L1768.3 1217.17 L1768.89 1217.17 L1769.47 1217.17 L1770.06 1217.17 L1770.65 1217.17 L1771.23 1217.17 L1771.82 1217.17 L1772.4 1217.17 L1772.99 1217.17 L1773.58 1217.17 L1774.16 1217.17 L1774.75 1217.17 L1775.34 1217.17 L1775.92 1217.17 L1776.51 1217.17 L1777.1 1217.17 L1777.68 1217.17 L1778.27 1217.17 L1778.86 1217.17 L1779.44 1217.17 L1780.03 1217.17 L1780.61 1217.17 L1781.2 1217.17 L1781.79 1217.17 L1782.37 1217.17 L1782.96 1217.17 L1783.55 1217.17 L1784.13 1217.17 L1784.72 1217.17 L1785.31 1217.17 L1785.89 1217.17 L1786.48 1217.17 L1787.06 1217.17 L1787.65 1217.17 L1788.24 1217.17 L1788.82 1217.17 L1789.41 1217.17 L1790 1217.17 L1790.58 1217.17 L1791.17 1217.17 L1791.76 1217.17 L1792.34 1217.17 L1792.93 1217.17 L1793.52 1217.17 L1794.1 1217.17 L1794.69 1217.17 L1795.27 1217.17 L1795.86 1217.17 L1796.45 1217.17 L1797.03 1217.17 L1797.62 1217.17 L1798.21 1217.17 L1798.79 1217.17 L1799.38 1217.17 L1799.97 1217.17 L1800.55 1217.17 L1801.14 1217.17 L1801.73 1217.17 L1802.31 1217.17 L1802.9 1217.17 L1803.48 1217.17 L1804.07 1217.17 L1804.66 1217.17 L1805.24 1217.17 L1805.83 1217.17 L1806.42 1217.17 L1807 1217.17 L1807.59 1217.17 L1808.18 1217.17 L1808.76 1217.17 L1809.35 1217.17 L1809.94 1217.17 L1810.52 1217.17 L1811.11 1217.17 L1811.69 1217.17 L1812.28 1217.17 L1812.87 1217.17 L1813.45 1217.17 L1814.04 1217.17 L1814.63 1217.17 L1815.21 1217.17 L1815.8 1217.17 L1816.39 1217.17 L1816.97 1217.17 L1817.56 1217.17 L1818.14 1217.17 L1818.73 1217.17 L1819.32 1217.17 L1819.9 1217.17 L1820.49 1217.17 L1821.08 1217.17 L1821.66 1217.17 L1822.25 1217.17 L1822.84 1217.17 L1823.42 1217.17 L1824.01 1217.17 L1824.6 1217.17 L1825.18 1217.17 L1825.77 1217.17 L1826.35 1217.17 L1826.94 1217.17 L1827.53 1217.17 L1828.11 1217.17 L1828.7 1217.17 L1829.29 1217.17 L1829.87 1217.17 L1830.46 1217.17 L1831.05 1217.17 L1831.63 1217.17 L1832.22 1217.17 L1832.81 1217.17 L1833.39 1217.17 L1833.98 1217.17 L1834.56 1217.17 L1835.15 1217.17 L1835.74 1217.17 L1836.32 1217.17 L1836.91 1217.17 L1837.5 1217.17 L1838.08 1217.17 L1838.67 1217.17 L1839.26 1217.17 L1839.84 1217.17 L1840.43 1217.17 L1841.01 1217.17 L1841.6 1217.17 L1842.19 1217.17 L1842.77 1217.17 L1843.36 1217.17 L1843.95 1217.17 L1844.53 1217.17 L1845.12 1217.17 L1845.71 1217.17 L1846.29 1217.17 L1846.88 1217.17 L1847.47 1217.17 L1848.05 1217.17 L1848.64 1217.17 L1849.22 1217.17 L1849.81 1217.17 L1850.4 1217.17 L1850.98 1217.17 L1851.57 1217.17 L1852.16 1217.17 L1852.74 1217.17 L1853.33 1217.17 L1853.92 1217.17 L1854.5 1217.17 L1855.09 1217.17 L1855.68 1217.17 L1856.26 1217.17 L1856.85 1217.17 L1857.43 1217.17 L1858.02 1217.17 L1858.61 1217.17 L1859.19 1217.17 L1859.78 1217.17 L1860.37 1217.17 L1860.95 1217.17 L1861.54 1217.17 L1862.13 1217.17 L1862.71 1217.17 L1863.3 1217.17 L1863.88 1217.17 L1864.47 1217.17 L1865.06 1217.17 L1865.64 1217.17 L1866.23 1217.17 L1866.82 1217.17 L1867.4 1217.17 L1867.99 1217.17 L1868.58 1217.17 L1869.16 1217.17 L1869.75 1217.17 L1870.34 1217.17 L1870.92 1217.17 L1871.51 1217.17 L1872.09 1217.17 L1872.68 1217.17 L1873.27 1217.17 L1873.85 1217.17 L1874.44 1217.17 L1875.03 1217.17 L1875.61 1217.17 L1876.2 1217.17 L1876.79 1217.17 L1877.37 1217.17 L1877.96 1217.17 L1878.55 1217.17 L1879.13 1217.17 L1879.72 1217.17 L1880.3 1217.17 L1880.89 1217.17 L1881.48 1217.17 L1882.06 1217.17 L1882.65 1217.17 L1883.24 1217.17 L1883.82 1217.17 L1884.41 1217.17 L1885 1217.17 L1885.58 1217.17 L1886.17 1217.17 L1886.76 1217.17 L1887.34 1217.17 L1887.93 1217.17 L1888.51 1217.17 L1889.1 1217.17 L1889.69 1217.17 L1890.27 1217.17 L1890.86 1217.17 L1891.45 1217.17 L1892.03 1217.17 L1892.62 1217.17 L1893.21 1217.17 L1893.79 1217.17 L1894.38 1217.17 L1894.96 1217.17 L1895.55 1217.17 L1896.14 1217.17 L1896.72 1217.17 L1897.31 1217.17 L1897.9 1217.17 L1898.48 1217.17 L1899.07 1217.17 L1899.66 1217.17 L1900.24 1217.17 L1900.83 1217.17 L1901.42 1217.17 L1902 1217.17 L1902.59 1217.17 L1903.17 1217.17 L1903.76 1217.17 L1904.35 1217.17 L1904.93 1217.17 L1905.52 1217.17 L1906.11 1217.17 L1906.69 1217.17 L1907.28 1217.17 L1907.87 1217.17 L1908.45 1217.17 L1909.04 1217.17 L1909.63 1217.17 L1910.21 1217.17 L1910.8 1217.17 L1911.38 1217.17 L1911.97 1217.17 L1912.56 1217.17 L1913.14 1217.17 L1913.73 1217.17 L1914.32 1217.17 L1914.9 1217.17 L1915.49 1217.17 L1916.08 1217.17 L1916.66 1217.17 L1917.25 1217.17 L1917.83 1217.17 L1918.42 1217.17 L1919.01 1217.17 L1919.59 1217.17 L1920.18 1217.17 L1920.77 1217.17 L1921.35 1217.17 L1921.94 1217.17 L1922.53 1217.17 L1923.11 1217.17 L1923.7 1217.17 L1924.29 1217.17 L1924.87 1217.17 L1925.46 1217.17 L1926.04 1217.17 L1926.63 1217.17 L1927.22 1217.17 L1927.8 1217.17 L1928.39 1217.17 L1928.98 1217.17 L1929.56 1217.17 L1930.15 1217.17 L1930.74 1217.17 L1931.32 1217.17 L1931.91 1217.17 L1932.5 1217.17 L1933.08 1217.17 L1933.67 1217.17 L1934.25 1217.17 L1934.84 1217.17 L1935.43 1217.17 L1936.01 1217.17 L1936.6 1217.17 L1937.19 1217.17 L1937.77 1217.17 L1938.36 1217.17 L1938.95 1217.17 L1939.53 1217.17 L1940.12 1217.17 L1940.71 1217.17 L1941.29 1217.17 L1941.88 1217.17 L1942.46 1217.17 L1943.05 1217.17 L1943.64 1217.17 L1944.22 1217.17 L1944.81 1217.17 L1945.4 1217.17 L1945.98 1217.17 L1946.57 1217.17 L1947.16 1217.17 L1947.74 1217.17 L1948.33 1217.17 L1948.91 1217.17 L1949.5 1217.17 L1950.09 1217.17 L1950.67 1217.17 L1951.26 1217.17 L1951.85 1217.17 L1952.43 1217.17 L1953.02 1217.17 L1953.61 1217.17 L1954.19 1217.17 L1954.78 1217.17 L1955.37 1217.17 L1955.95 1217.17 L1956.54 1217.17 L1957.12 1217.17 L1957.71 1217.17 L1958.3 1217.17 L1958.88 1217.17 L1959.47 1217.17 L1960.06 1217.17 L1960.64 1217.17 L1961.23 1217.17 L1961.82 1217.17 L1962.4 1217.17 L1962.99 1217.17 L1963.58 1217.17 L1964.16 1217.17 L1964.75 1217.17 L1965.33 1217.17 L1965.92 1217.17 L1966.51 1217.17 L1967.09 1217.17 L1967.68 1217.17 L1968.27 1217.17 L1968.85 1217.17 L1969.44 1217.17 L1970.03 1217.17 L1970.61 1217.17 L1971.2 1217.17 L1971.78 1217.17 L1972.37 1217.17 L1972.96 1217.17 L1973.54 1217.17 L1974.13 1217.17 L1974.72 1217.17 L1975.3 1217.17 L1975.89 1217.17 L1976.48 1217.17 L1977.06 1217.17 L1977.65 1217.17 L1978.24 1217.17 L1978.82 1217.17 L1979.41 1217.17 L1979.99 1217.17 L1980.58 1217.17 L1981.17 1217.17 L1981.75 1217.17 L1982.34 1217.17 L1982.93 1217.17 L1983.51 1217.17 L1984.1 1217.17 L1984.69 1217.17 L1985.27 1217.17 L1985.86 1217.17 L1986.45 1217.17 L1987.03 1217.17 L1987.62 1217.17 L1988.2 1217.17 L1988.79 1217.17 L1989.38 1217.17 L1989.96 1217.17 L1990.55 1217.17 L1991.14 1217.17 L1991.72 1217.17 L1992.31 1217.17 L1992.9 1217.17 L1993.48 1217.17 L1994.07 1217.17 L1994.65 1217.17 L1995.24 1217.17 L1995.83 1217.17 L1996.41 1217.17 L1997 1217.17 L1997.59 1217.17 L1998.17 1217.17 L1998.76 1217.17 L1999.35 1217.17 L1999.93 1217.17 L2000.52 1217.17 L2001.11 1217.17 L2001.69 1217.17 L2002.28 1217.17 L2002.86 1217.17 L2003.45 1217.17 L2004.04 1217.17 L2004.62 1217.17 L2005.21 1217.17 L2005.8 1217.17 L2006.38 1217.17 L2006.97 1217.17 L2007.56 1217.17 L2008.14 1217.17 L2008.73 1217.17 L2009.32 1217.17 L2009.9 1217.17 L2010.49 1217.17 L2011.07 1217.17 L2011.66 1217.17 L2012.25 1217.17 L2012.83 1217.17 L2013.42 1217.17 L2014.01 1217.17 L2014.59 1217.17 L2015.18 1217.17 L2015.77 1217.17 L2016.35 1217.17 L2016.94 1217.17 L2017.53 1217.17 L2018.11 1217.17 L2018.7 1217.17 L2019.28 1217.17 L2019.87 1217.17 L2020.46 1217.17 L2021.04 1217.17 L2021.63 1217.17 L2022.22 1217.17 L2022.8 1217.17 L2023.39 1217.17 L2023.98 1217.17 L2024.56 1217.17 L2025.15 1217.17 L2025.73 1217.17 L2026.32 1217.17 L2026.91 1217.17 L2027.49 1217.17 L2028.08 1217.17 L2028.67 1217.17 L2029.25 1217.17 L2029.84 1217.17 L2030.43 1217.17 L2031.01 1217.17 L2031.6 1217.17 L2032.19 1217.17 L2032.77 1217.17 L2033.36 1217.17 L2033.94 1217.17 L2034.53 1217.17 L2035.12 1217.17 L2035.7 1217.17 L2036.29 1217.17 L2036.88 1217.17 L2037.46 1217.17 L2038.05 1217.17 L2038.64 1217.17 L2039.22 1217.17 L2039.81 1217.17 L2040.4 1217.17 L2040.98 1217.17 L2041.57 1217.17 L2042.15 1217.17 L2042.74 1217.17 L2043.33 1217.17 L2043.91 1217.17 L2044.5 1217.17 L2045.09 1217.17 L2045.67 1217.17 L2046.26 1217.17 L2046.85 1217.17 L2047.43 1217.17 L2048.02 1217.17 L2048.6 1217.17 L2049.19 1217.17 L2049.78 1217.17 L2050.36 1217.17 L2050.95 1217.17 L2051.54 1217.17 L2052.12 1217.17 L2052.71 1217.17 L2053.3 1217.17 L2053.88 1217.17 L2054.47 1217.17 L2055.06 1217.17 L2055.64 1217.17 L2056.23 1217.17 L2056.81 1217.17 L2057.4 1217.17 L2057.99 1217.17 L2058.57 1217.17 L2059.16 1217.17 L2059.75 1217.17 L2060.33 1217.17 L2060.92 1217.17 L2061.51 1217.17 L2062.09 1217.17 L2062.68 1217.17 L2063.27 1217.17 L2063.85 1217.17 L2064.44 1217.17 L2065.02 1217.17 L2065.61 1217.17 L2066.2 1217.17 L2066.78 1217.17 L2067.37 1217.17 L2067.96 1217.17 L2068.54 1217.17 L2069.13 1217.17 L2069.72 1217.17 L2070.3 1217.17 L2070.89 1217.17 L2071.48 1217.17 L2072.06 1217.17 L2072.65 1217.17 L2073.23 1217.17 L2073.82 1217.17 L2074.41 1217.17 L2074.99 1217.17 L2075.58 1217.17 L2076.17 1217.17 L2076.75 1217.17 L2077.34 1217.17 L2077.93 1217.17 L2078.51 1217.17 L2079.1 1217.17 L2079.68 1217.17 L2080.27 1217.17 L2080.86 1217.17 L2081.44 1217.17 L2082.03 1217.17 L2082.62 1217.17 L2083.2 1217.17 L2083.79 1217.17 L2084.38 1217.17 L2084.96 1217.17 L2085.55 1217.17 L2086.14 1217.17 L2086.72 1217.17 L2087.31 1217.17 L2087.89 1217.17 L2088.48 1217.17 L2089.07 1217.17 L2089.65 1217.17 L2090.24 1217.17 L2090.83 1217.17 L2091.41 1217.17 L2092 1217.17 L2092.59 1217.17 L2093.17 1217.17 L2093.76 1217.17 L2094.35 1217.17 L2094.93 1217.17 L2095.52 1217.17 L2096.1 1217.17 L2096.69 1217.17 L2097.28 1217.17 L2097.86 1217.17 L2098.45 1217.17 L2099.04 1217.17 L2099.62 1217.17 L2100.21 1217.17 L2100.8 1217.17 L2101.38 1217.17 L2101.97 1217.17 L2102.55 1217.17 L2103.14 1217.17 L2103.73 1217.17 L2104.31 1217.17 L2104.9 1217.17 L2105.49 1217.17 L2106.07 1217.17 L2106.66 1217.17 L2107.25 1217.17 L2107.83 1217.17 L2108.42 1217.17 L2109.01 1217.17 L2109.59 1217.17 L2110.18 1217.17 L2110.76 1217.17 L2111.35 1217.17 L2111.94 1217.17 L2112.52 1217.17 L2113.11 1217.17 L2113.7 1217.17 L2114.28 1217.17 L2114.87 1217.17 L2115.46 1217.17 L2116.04 1217.17 L2116.63 1217.17 L2117.22 1217.17 L2117.8 1217.17 L2118.39 1217.17 L2118.97 1217.17 L2119.56 1217.17 L2120.15 1217.17 L2120.73 1217.17 L2121.32 1217.17 L2121.91 1217.17 L2122.49 1217.17 L2123.08 1217.17 L2123.67 1217.17 L2124.25 1217.17 L2124.84 1217.17 L2125.42 1217.17 L2126.01 1217.17 L2126.6 1217.17 L2127.18 1217.17 L2127.77 1217.17 L2128.36 1217.17 L2128.94 1217.17 L2129.53 1217.17 L2130.12 1217.17 L2130.7 1217.17 L2131.29 1217.17 L2131.88 1217.17 L2132.46 1217.17 L2133.05 1217.17 L2133.63 1217.17 L2134.22 1217.17 L2134.81 1217.17 L2135.39 1217.17 L2135.98 1217.17 L2136.57 1217.17 L2137.15 1217.17 L2137.74 1217.17 L2138.33 1217.17 L2138.91 1217.17 L2139.5 1217.17 L2140.09 1217.17 L2140.67 1217.17 L2141.26 1217.17 L2141.84 1217.17 L2142.43 1217.17 L2143.02 1217.17 L2143.6 1217.17 L2144.19 1217.17 L2144.78 1217.17 L2145.36 1217.17 L2145.95 1217.17 L2146.54 1217.17 L2147.12 1217.17 L2147.71 1217.17 L2148.3 1217.17 L2148.88 1217.17 L2149.47 1217.17 L2150.05 1217.17 L2150.64 1217.17 L2151.23 1217.17 L2151.81 1217.17 L2152.4 1217.17 L2152.99 1217.17 L2153.57 1217.17 L2154.16 1217.17 L2154.75 1217.17 L2155.33 1217.17 L2155.92 1217.17 L2156.5 1217.17 L2157.09 1217.17 L2157.68 1217.17 L2158.26 1217.17 L2158.26 1216.4 L2157.68 1216.4 L2157.09 1216.4 L2156.5 1216.4 L2155.92 1216.4 L2155.33 1216.4 L2154.75 1216.4 L2154.16 1216.4 L2153.57 1216.4 L2152.99 1216.4 L2152.4 1216.4 L2151.81 1216.4 L2151.23 1216.4 L2150.64 1216.4 L2150.05 1216.4 L2149.47 1216.4 L2148.88 1216.4 L2148.3 1216.4 L2147.71 1216.4 L2147.12 1216.4 L2146.54 1216.4 L2145.95 1216.4 L2145.36 1216.4 L2144.78 1216.4 L2144.19 1216.4 L2143.6 1216.4 L2143.02 1216.4 L2142.43 1216.4 L2141.84 1216.4 L2141.26 1216.4 L2140.67 1216.4 L2140.09 1216.4 L2139.5 1216.4 L2138.91 1216.4 L2138.33 1216.4 L2137.74 1216.4 L2137.15 1216.4 L2136.57 1216.4 L2135.98 1216.4 L2135.39 1216.4 L2134.81 1216.4 L2134.22 1216.4 L2133.63 1216.4 L2133.05 1216.4 L2132.46 1216.4 L2131.88 1216.4 L2131.29 1216.4 L2130.7 1216.4 L2130.12 1216.4 L2129.53 1216.4 L2128.94 1216.4 L2128.36 1216.4 L2127.77 1216.4 L2127.18 1216.4 L2126.6 1216.4 L2126.01 1216.4 L2125.42 1216.4 L2124.84 1216.4 L2124.25 1216.4 L2123.67 1216.4 L2123.08 1216.4 L2122.49 1216.4 L2121.91 1216.4 L2121.32 1216.4 L2120.73 1216.4 L2120.15 1216.4 L2119.56 1216.4 L2118.97 1216.4 L2118.39 1216.4 L2117.8 1216.4 L2117.22 1216.4 L2116.63 1216.4 L2116.04 1216.4 L2115.46 1216.4 L2114.87 1216.4 L2114.28 1216.4 L2113.7 1216.4 L2113.11 1216.4 L2112.52 1216.4 L2111.94 1216.4 L2111.35 1216.4 L2110.76 1216.4 L2110.18 1216.4 L2109.59 1216.4 L2109.01 1216.4 L2108.42 1216.4 L2107.83 1216.4 L2107.25 1216.4 L2106.66 1216.4 L2106.07 1216.4 L2105.49 1216.4 L2104.9 1216.4 L2104.31 1216.4 L2103.73 1216.4 L2103.14 1216.4 L2102.55 1216.4 L2101.97 1216.4 L2101.38 1216.4 L2100.8 1216.4 L2100.21 1216.4 L2099.62 1216.4 L2099.04 1216.4 L2098.45 1216.4 L2097.86 1216.4 L2097.28 1216.4 L2096.69 1216.4 L2096.1 1216.4 L2095.52 1216.4 L2094.93 1216.4 L2094.35 1216.4 L2093.76 1216.4 L2093.17 1216.4 L2092.59 1216.4 L2092 1216.4 L2091.41 1216.4 L2090.83 1216.4 L2090.24 1216.4 L2089.65 1216.4 L2089.07 1216.4 L2088.48 1216.4 L2087.89 1216.4 L2087.31 1216.4 L2086.72 1216.4 L2086.14 1216.4 L2085.55 1216.4 L2084.96 1216.4 L2084.38 1216.4 L2083.79 1216.4 L2083.2 1216.4 L2082.62 1216.4 L2082.03 1216.4 L2081.44 1216.4 L2080.86 1216.4 L2080.27 1216.4 L2079.68 1216.4 L2079.1 1216.4 L2078.51 1216.4 L2077.93 1216.4 L2077.34 1216.4 L2076.75 1216.4 L2076.17 1216.4 L2075.58 1216.4 L2074.99 1216.4 L2074.41 1216.4 L2073.82 1216.4 L2073.23 1216.4 L2072.65 1216.4 L2072.06 1216.4 L2071.48 1216.4 L2070.89 1216.4 L2070.3 1216.4 L2069.72 1216.4 L2069.13 1216.4 L2068.54 1216.4 L2067.96 1216.4 L2067.37 1216.4 L2066.78 1216.4 L2066.2 1216.4 L2065.61 1216.4 L2065.02 1216.4 L2064.44 1216.4 L2063.85 1216.4 L2063.27 1216.4 L2062.68 1216.4 L2062.09 1216.4 L2061.51 1216.4 L2060.92 1216.4 L2060.33 1216.4 L2059.75 1216.4 L2059.16 1216.4 L2058.57 1216.4 L2057.99 1216.4 L2057.4 1216.4 L2056.81 1216.4 L2056.23 1216.4 L2055.64 1216.4 L2055.06 1216.4 L2054.47 1216.4 L2053.88 1216.4 L2053.3 1216.4 L2052.71 1216.4 L2052.12 1216.4 L2051.54 1216.4 L2050.95 1216.4 L2050.36 1216.4 L2049.78 1216.4 L2049.19 1216.4 L2048.6 1216.4 L2048.02 1216.4 L2047.43 1216.4 L2046.85 1216.4 L2046.26 1216.4 L2045.67 1216.4 L2045.09 1216.4 L2044.5 1216.4 L2043.91 1216.4 L2043.33 1216.4 L2042.74 1216.4 L2042.15 1216.4 L2041.57 1216.4 L2040.98 1216.4 L2040.4 1216.4 L2039.81 1216.4 L2039.22 1216.4 L2038.64 1216.4 L2038.05 1216.4 L2037.46 1216.4 L2036.88 1216.4 L2036.29 1216.4 L2035.7 1216.4 L2035.12 1216.4 L2034.53 1216.4 L2033.94 1216.4 L2033.36 1216.4 L2032.77 1216.4 L2032.19 1216.4 L2031.6 1216.4 L2031.01 1216.4 L2030.43 1216.4 L2029.84 1216.4 L2029.25 1216.4 L2028.67 1216.4 L2028.08 1216.4 L2027.49 1216.4 L2026.91 1216.4 L2026.32 1216.4 L2025.73 1216.4 L2025.15 1216.4 L2024.56 1216.4 L2023.98 1216.4 L2023.39 1216.4 L2022.8 1216.4 L2022.22 1216.4 L2021.63 1216.4 L2021.04 1216.4 L2020.46 1216.4 L2019.87 1216.4 L2019.28 1216.4 L2018.7 1216.4 L2018.11 1216.4 L2017.53 1216.4 L2016.94 1216.4 L2016.35 1216.4 L2015.77 1216.4 L2015.18 1216.4 L2014.59 1216.4 L2014.01 1216.4 L2013.42 1216.4 L2012.83 1216.4 L2012.25 1216.4 L2011.66 1216.4 L2011.07 1216.4 L2010.49 1216.4 L2009.9 1216.4 L2009.32 1216.4 L2008.73 1216.4 L2008.14 1216.4 L2007.56 1216.4 L2006.97 1216.4 L2006.38 1216.4 L2005.8 1216.4 L2005.21 1216.4 L2004.62 1216.4 L2004.04 1216.4 L2003.45 1216.4 L2002.86 1216.4 L2002.28 1216.4 L2001.69 1216.4 L2001.11 1216.4 L2000.52 1216.4 L1999.93 1216.4 L1999.35 1216.4 L1998.76 1216.4 L1998.17 1216.4 L1997.59 1216.4 L1997 1216.4 L1996.41 1216.4 L1995.83 1216.4 L1995.24 1216.4 L1994.65 1216.4 L1994.07 1216.4 L1993.48 1216.4 L1992.9 1216.4 L1992.31 1216.4 L1991.72 1216.4 L1991.14 1216.4 L1990.55 1216.4 L1989.96 1216.4 L1989.38 1216.4 L1988.79 1216.4 L1988.2 1216.4 L1987.62 1216.4 L1987.03 1216.4 L1986.45 1216.4 L1985.86 1216.4 L1985.27 1216.4 L1984.69 1216.4 L1984.1 1216.4 L1983.51 1216.4 L1982.93 1216.4 L1982.34 1216.4 L1981.75 1216.4 L1981.17 1216.4 L1980.58 1216.4 L1979.99 1216.4 L1979.41 1216.4 L1978.82 1216.4 L1978.24 1216.4 L1977.65 1216.4 L1977.06 1216.4 L1976.48 1216.4 L1975.89 1216.4 L1975.3 1216.4 L1974.72 1216.4 L1974.13 1216.4 L1973.54 1216.4 L1972.96 1216.4 L1972.37 1216.4 L1971.78 1216.4 L1971.2 1216.4 L1970.61 1216.4 L1970.03 1216.4 L1969.44 1216.4 L1968.85 1216.4 L1968.27 1216.4 L1967.68 1216.4 L1967.09 1216.4 L1966.51 1216.4 L1965.92 1216.4 L1965.33 1216.4 L1964.75 1216.4 L1964.16 1216.4 L1963.58 1216.4 L1962.99 1216.4 L1962.4 1216.4 L1961.82 1216.4 L1961.23 1216.4 L1960.64 1216.4 L1960.06 1216.4 L1959.47 1216.4 L1958.88 1216.4 L1958.3 1216.4 L1957.71 1216.4 L1957.12 1216.4 L1956.54 1216.4 L1955.95 1216.4 L1955.37 1216.4 L1954.78 1216.4 L1954.19 1216.4 L1953.61 1216.4 L1953.02 1216.4 L1952.43 1216.4 L1951.85 1216.4 L1951.26 1216.4 L1950.67 1216.4 L1950.09 1216.4 L1949.5 1216.4 L1948.91 1216.4 L1948.33 1216.4 L1947.74 1216.4 L1947.16 1216.4 L1946.57 1216.4 L1945.98 1216.4 L1945.4 1216.4 L1944.81 1216.4 L1944.22 1216.4 L1943.64 1216.4 L1943.05 1216.4 L1942.46 1216.4 L1941.88 1216.4 L1941.29 1216.4 L1940.71 1216.4 L1940.12 1216.4 L1939.53 1216.4 L1938.95 1216.4 L1938.36 1216.4 L1937.77 1216.4 L1937.19 1216.4 L1936.6 1216.4 L1936.01 1216.4 L1935.43 1216.4 L1934.84 1216.4 L1934.25 1216.4 L1933.67 1216.4 L1933.08 1216.4 L1932.5 1216.4 L1931.91 1216.4 L1931.32 1216.4 L1930.74 1216.4 L1930.15 1216.4 L1929.56 1216.4 L1928.98 1216.4 L1928.39 1216.4 L1927.8 1216.4 L1927.22 1216.4 L1926.63 1216.4 L1926.04 1216.4 L1925.46 1216.4 L1924.87 1216.4 L1924.29 1216.4 L1923.7 1216.4 L1923.11 1216.4 L1922.53 1216.4 L1921.94 1216.4 L1921.35 1216.4 L1920.77 1216.4 L1920.18 1216.4 L1919.59 1216.4 L1919.01 1216.4 L1918.42 1216.4 L1917.83 1216.4 L1917.25 1216.4 L1916.66 1216.4 L1916.08 1216.4 L1915.49 1216.4 L1914.9 1216.4 L1914.32 1216.4 L1913.73 1216.4 L1913.14 1216.4 L1912.56 1216.4 L1911.97 1216.4 L1911.38 1216.4 L1910.8 1216.4 L1910.21 1216.4 L1909.63 1216.4 L1909.04 1216.4 L1908.45 1216.4 L1907.87 1216.4 L1907.28 1216.4 L1906.69 1216.4 L1906.11 1216.4 L1905.52 1216.4 L1904.93 1216.4 L1904.35 1216.4 L1903.76 1216.4 L1903.17 1216.4 L1902.59 1216.4 L1902 1216.4 L1901.42 1216.4 L1900.83 1216.4 L1900.24 1216.4 L1899.66 1216.4 L1899.07 1216.4 L1898.48 1216.4 L1897.9 1216.4 L1897.31 1216.4 L1896.72 1216.4 L1896.14 1216.4 L1895.55 1216.4 L1894.96 1216.4 L1894.38 1216.4 L1893.79 1216.4 L1893.21 1216.4 L1892.62 1216.4 L1892.03 1216.4 L1891.45 1216.4 L1890.86 1216.4 L1890.27 1216.4 L1889.69 1216.4 L1889.1 1216.4 L1888.51 1216.4 L1887.93 1216.4 L1887.34 1216.4 L1886.76 1216.4 L1886.17 1216.4 L1885.58 1216.4 L1885 1216.4 L1884.41 1216.4 L1883.82 1216.4 L1883.24 1216.4 L1882.65 1216.4 L1882.06 1216.4 L1881.48 1216.4 L1880.89 1216.4 L1880.3 1216.4 L1879.72 1216.4 L1879.13 1216.4 L1878.55 1216.4 L1877.96 1216.4 L1877.37 1216.4 L1876.79 1216.4 L1876.2 1216.4 L1875.61 1216.4 L1875.03 1216.4 L1874.44 1216.4 L1873.85 1216.4 L1873.27 1216.4 L1872.68 1216.4 L1872.09 1216.4 L1871.51 1216.4 L1870.92 1216.4 L1870.34 1216.4 L1869.75 1216.4 L1869.16 1216.4 L1868.58 1216.4 L1867.99 1216.4 L1867.4 1216.4 L1866.82 1216.4 L1866.23 1216.4 L1865.64 1216.4 L1865.06 1216.4 L1864.47 1216.4 L1863.88 1216.4 L1863.3 1216.4 L1862.71 1216.4 L1862.13 1216.4 L1861.54 1216.4 L1860.95 1216.4 L1860.37 1216.4 L1859.78 1216.4 L1859.19 1216.4 L1858.61 1216.4 L1858.02 1216.4 L1857.43 1216.4 L1856.85 1216.4 L1856.26 1216.4 L1855.68 1216.4 L1855.09 1216.4 L1854.5 1216.4 L1853.92 1216.4 L1853.33 1216.4 L1852.74 1216.4 L1852.16 1216.4 L1851.57 1216.4 L1850.98 1216.4 L1850.4 1216.4 L1849.81 1216.4 L1849.22 1216.4 L1848.64 1216.4 L1848.05 1216.4 L1847.47 1216.4 L1846.88 1216.4 L1846.29 1216.4 L1845.71 1216.4 L1845.12 1216.4 L1844.53 1216.4 L1843.95 1216.4 L1843.36 1216.4 L1842.77 1216.4 L1842.19 1216.4 L1841.6 1216.4 L1841.01 1216.4 L1840.43 1216.4 L1839.84 1216.4 L1839.26 1216.4 L1838.67 1216.4 L1838.08 1216.4 L1837.5 1216.4 L1836.91 1216.4 L1836.32 1216.4 L1835.74 1216.4 L1835.15 1216.4 L1834.56 1216.4 L1833.98 1216.4 L1833.39 1216.4 L1832.81 1216.4 L1832.22 1216.4 L1831.63 1216.4 L1831.05 1216.4 L1830.46 1216.4 L1829.87 1216.4 L1829.29 1216.4 L1828.7 1216.4 L1828.11 1216.4 L1827.53 1216.4 L1826.94 1216.4 L1826.35 1216.4 L1825.77 1216.4 L1825.18 1216.4 L1824.6 1216.4 L1824.01 1216.4 L1823.42 1216.4 L1822.84 1216.4 L1822.25 1216.4 L1821.66 1216.4 L1821.08 1216.4 L1820.49 1216.4 L1819.9 1216.4 L1819.32 1216.4 L1818.73 1216.4 L1818.14 1216.4 L1817.56 1216.4 L1816.97 1216.4 L1816.39 1216.4 L1815.8 1216.4 L1815.21 1216.4 L1814.63 1216.4 L1814.04 1216.4 L1813.45 1216.4 L1812.87 1216.4 L1812.28 1216.4 L1811.69 1216.4 L1811.11 1216.4 L1810.52 1216.4 L1809.94 1216.4 L1809.35 1216.4 L1808.76 1216.4 L1808.18 1216.4 L1807.59 1216.4 L1807 1216.4 L1806.42 1216.4 L1805.83 1216.4 L1805.24 1216.4 L1804.66 1216.4 L1804.07 1216.4 L1803.48 1216.4 L1802.9 1216.4 L1802.31 1216.4 L1801.73 1216.4 L1801.14 1216.4 L1800.55 1216.4 L1799.97 1216.4 L1799.38 1216.4 L1798.79 1216.4 L1798.21 1216.4 L1797.62 1216.4 L1797.03 1216.4 L1796.45 1216.4 L1795.86 1216.4 L1795.27 1216.4 L1794.69 1216.4 L1794.1 1216.4 L1793.52 1216.4 L1792.93 1216.4 L1792.34 1216.4 L1791.76 1216.4 L1791.17 1216.4 L1790.58 1216.4 L1790 1216.4 L1789.41 1216.4 L1788.82 1216.4 L1788.24 1216.4 L1787.65 1216.4 L1787.06 1216.4 L1786.48 1216.4 L1785.89 1216.4 L1785.31 1216.4 L1784.72 1216.4 L1784.13 1216.4 L1783.55 1216.4 L1782.96 1216.4 L1782.37 1216.4 L1781.79 1216.4 L1781.2 1216.4 L1780.61 1216.4 L1780.03 1216.4 L1779.44 1216.4 L1778.86 1216.4 L1778.27 1216.4 L1777.68 1216.4 L1777.1 1216.4 L1776.51 1216.4 L1775.92 1216.4 L1775.34 1216.4 L1774.75 1216.4 L1774.16 1216.4 L1773.58 1216.4 L1772.99 1216.4 L1772.4 1216.4 L1771.82 1216.4 L1771.23 1216.4 L1770.65 1216.4 L1770.06 1216.4 L1769.47 1216.4 L1768.89 1216.4 L1768.3 1216.4 L1767.71 1216.4 L1767.13 1216.4 L1766.54 1216.4 L1765.95 1216.4 L1765.37 1216.4 L1764.78 1216.4 L1764.19 1216.4 L1763.61 1216.4 L1763.02 1216.4 L1762.44 1216.4 L1761.85 1216.4 L1761.26 1216.4 L1760.68 1216.4 L1760.09 1216.4 L1759.5 1216.4 L1758.92 1216.4 L1758.33 1216.4 L1757.74 1216.4 L1757.16 1216.4 L1756.57 1216.4 L1755.99 1216.4 L1755.4 1216.4 L1754.81 1216.4 L1754.23 1216.4 L1753.64 1216.4 L1753.05 1216.4 L1752.47 1216.4 L1751.88 1216.4 L1751.29 1216.4 L1750.71 1216.4 L1750.12 1216.4 L1749.53 1216.4 L1748.95 1216.4 L1748.36 1216.4 L1747.78 1216.4 L1747.19 1216.4 L1746.6 1216.4 L1746.02 1216.4 L1745.43 1216.4 L1744.84 1216.4 L1744.26 1216.4 L1743.67 1216.4 L1743.08 1216.4 L1742.5 1216.4 L1741.91 1216.4 L1741.32 1216.4 L1740.74 1216.4 L1740.15 1216.4 L1739.57 1216.4 L1738.98 1216.4 L1738.39 1216.4 L1737.81 1216.4 L1737.22 1216.4 L1736.63 1216.4 L1736.05 1216.4 L1735.46 1216.4 L1734.87 1216.4 L1734.29 1216.4 L1733.7 1216.4 L1733.11 1216.4 L1732.53 1216.4 L1731.94 1216.4 L1731.36 1216.4 L1730.77 1216.4 L1730.18 1216.4 L1729.6 1216.4 L1729.01 1216.4 L1728.42 1216.4 L1727.84 1216.4 L1727.25 1216.4 L1726.66 1216.4 L1726.08 1216.4 L1725.49 1216.4 L1724.91 1216.4 L1724.32 1216.4 L1723.73 1216.4 L1723.15 1216.4 L1722.56 1216.4 L1721.97 1216.4 L1721.39 1216.4 L1720.8 1216.4 L1720.21 1216.4 L1719.63 1216.4 L1719.04 1216.4 L1718.45 1216.4 L1717.87 1216.4 L1717.28 1216.4 L1716.7 1216.4 L1716.11 1216.4 L1715.52 1216.4 L1714.94 1216.4 L1714.35 1216.4 L1713.76 1216.4 L1713.18 1216.4 L1712.59 1216.4 L1712 1216.4 L1711.42 1216.4 L1710.83 1216.4 L1710.24 1216.4 L1709.66 1216.4 L1709.07 1216.4 L1708.49 1216.4 L1707.9 1216.4 L1707.31 1216.4 L1706.73 1216.4 L1706.14 1216.4 L1705.55 1216.4 L1704.97 1216.4 L1704.38 1216.4 L1703.79 1216.4 L1703.21 1216.4 L1702.62 1216.4 L1702.04 1216.4 L1701.45 1216.4 L1700.86 1216.4 L1700.28 1216.4 L1699.69 1216.4 L1699.1 1216.4 L1698.52 1216.4 L1697.93 1216.4 L1697.34 1216.4 L1696.76 1216.4 L1696.17 1216.4 L1695.58 1216.4 L1695 1216.4 L1694.41 1216.4 L1693.83 1216.4 L1693.24 1216.4 L1692.65 1216.4 L1692.07 1216.4 L1691.48 1216.4 L1690.89 1216.4 L1690.31 1216.4 L1689.72 1216.4 L1689.13 1216.4 L1688.55 1216.4 L1687.96 1216.4 L1687.37 1216.4 L1686.79 1216.4 L1686.2 1216.4 L1685.62 1216.4 L1685.03 1216.4 L1684.44 1216.4 L1683.86 1216.4 L1683.27 1216.4 L1682.68 1216.4 L1682.1 1216.4 L1681.51 1216.4 L1680.92 1216.4 L1680.34 1216.4 L1679.75 1216.4 L1679.17 1216.4 L1678.58 1216.4 L1677.99 1216.4 L1677.41 1216.4 L1676.82 1216.4 L1676.23 1216.4 L1675.65 1216.4 L1675.06 1216.4 L1674.47 1216.4 L1673.89 1216.4 L1673.3 1216.4 L1672.71 1216.4 L1672.13 1216.4 L1671.54 1216.4 L1670.96 1216.4 L1670.37 1216.4 L1669.78 1216.4 L1669.2 1216.4 L1668.61 1216.4 L1668.02 1216.4 L1667.44 1216.4 L1666.85 1216.4 L1666.26 1216.4 L1665.68 1216.4 L1665.09 1216.4 L1664.5 1216.4 L1663.92 1216.4 L1663.33 1216.4 L1662.75 1216.4 L1662.16 1216.4 L1661.57 1216.4 L1660.99 1216.4 L1660.4 1216.4 L1659.81 1216.4 L1659.23 1216.4 L1658.64 1216.4 L1658.05 1216.4 L1657.47 1216.4 L1656.88 1216.4 L1656.29 1216.4 L1655.71 1216.4 L1655.12 1216.4 L1654.54 1216.4 L1653.95 1216.4 L1653.36 1216.4 L1652.78 1216.4 L1652.19 1216.4 L1651.6 1216.4 L1651.02 1216.4 L1650.43 1216.4 L1649.84 1216.4 L1649.26 1216.4 L1648.67 1216.4 L1648.09 1216.4 L1647.5 1216.4 L1646.91 1216.4 L1646.33 1216.4 L1645.74 1216.4 L1645.15 1216.4 L1644.57 1216.4 L1643.98 1216.4 L1643.39 1216.4 L1642.81 1216.4 L1642.22 1216.4 L1641.63 1216.4 L1641.05 1216.4 L1640.46 1216.4 L1639.88 1216.4 L1639.29 1216.4 L1638.7 1216.4 L1638.12 1216.4 L1637.53 1216.4 L1636.94 1216.4 L1636.36 1216.4 L1635.77 1216.4 L1635.18 1216.4 L1634.6 1216.4 L1634.01 1216.4 L1633.42 1216.4 L1632.84 1216.4 L1632.25 1216.4 L1631.67 1216.4 L1631.08 1216.4 L1630.49 1216.4 L1629.91 1216.4 L1629.32 1216.4 L1628.73 1216.4 L1628.15 1216.4 L1627.56 1216.4 L1626.97 1216.4 L1626.39 1216.4 L1625.8 1216.4 L1625.22 1216.4 L1624.63 1216.4 L1624.04 1216.4 L1623.46 1216.4 L1622.87 1216.4 L1622.28 1216.4 L1621.7 1216.4 L1621.11 1216.4 L1620.52 1216.4 L1619.94 1216.4 L1619.35 1216.4 L1618.76 1216.4 L1618.18 1216.4 L1617.59 1216.4 L1617.01 1216.4 L1616.42 1216.4 L1615.83 1216.4 L1615.25 1216.4 L1614.66 1216.4 L1614.07 1216.4 L1613.49 1216.4 L1612.9 1216.4 L1612.31 1216.4 L1611.73 1216.4 L1611.14 1216.4 L1610.55 1216.4 L1609.97 1216.4 L1609.38 1216.4 L1608.8 1216.4 L1608.21 1216.4 L1607.62 1216.4 L1607.04 1216.4 L1606.45 1216.4 L1605.86 1216.4 L1605.28 1216.4 L1604.69 1216.4 L1604.1 1216.4 L1603.52 1216.4 L1602.93 1216.4 L1602.34 1216.4 L1601.76 1216.4 L1601.17 1216.4 L1600.59 1216.4 L1600 1216.4 L1599.41 1216.4 L1598.83 1216.4 L1598.24 1216.4 L1597.65 1216.4 L1597.07 1216.4 L1596.48 1216.4 L1595.89 1216.4 L1595.31 1216.4 L1594.72 1216.4 L1594.14 1216.4 L1593.55 1216.4 L1592.96 1216.4 L1592.38 1216.4 L1591.79 1216.4 L1591.2 1216.4 L1590.62 1216.4 L1590.03 1216.4 L1589.44 1216.4 L1588.86 1216.4 L1588.27 1216.4 L1587.68 1216.4 L1587.1 1216.4 L1586.51 1216.4 L1585.93 1216.4 L1585.34 1216.4 L1584.75 1216.4 L1584.17 1216.4 L1583.58 1216.4 L1582.99 1216.4 L1582.41 1216.4 L1581.82 1216.4 L1581.23 1216.4 L1580.65 1216.4 L1580.06 1216.4 L1579.47 1216.4 L1578.89 1216.4 L1578.3 1216.4 L1577.72 1216.4 L1577.13 1216.4 L1576.54 1216.4 L1575.96 1216.4 L1575.37 1216.4 L1574.78 1216.4 L1574.2 1216.4 L1573.61 1216.4 L1573.02 1216.4 L1572.44 1216.4 L1571.85 1216.4 L1571.27 1216.4 L1570.68 1216.4 L1570.09 1216.4 L1569.51 1216.4 L1568.92 1216.4 L1568.33 1216.4 L1567.75 1216.4 L1567.16 1216.4 L1566.57 1216.4 L1565.99 1216.4 L1565.4 1216.4 L1564.81 1216.4 L1564.23 1216.4 L1563.64 1216.4 L1563.06 1216.4 L1562.47 1216.4 L1561.88 1216.4 L1561.3 1216.4 L1560.71 1216.4 L1560.12 1216.4 L1559.54 1216.4 L1558.95 1216.4 L1558.36 1216.4 L1557.78 1216.4 L1557.19 1216.4 L1556.6 1216.4 L1556.02 1216.4 L1555.43 1216.4 L1554.85 1216.4 L1554.26 1216.4 L1553.67 1216.4 L1553.09 1216.4 L1552.5 1216.4 L1551.91 1216.4 L1551.33 1216.4 L1550.74 1216.4 L1550.15 1216.4 L1549.57 1216.4 L1548.98 1216.4 L1548.4 1216.4 L1547.81 1216.4 L1547.22 1216.4 L1546.64 1216.4 L1546.05 1216.4 L1545.46 1216.4 L1544.88 1216.4 L1544.29 1216.4 L1543.7 1216.4 L1543.12 1216.4 L1542.53 1216.4 L1541.94 1216.4 L1541.36 1216.4 L1540.77 1216.4 L1540.19 1216.4 L1539.6 1216.4 L1539.01 1216.4 L1538.43 1216.4 L1537.84 1216.4 L1537.25 1216.4 L1536.67 1216.4 L1536.08 1216.4 L1535.49 1216.4 L1534.91 1216.4 L1534.32 1216.4 L1533.73 1216.4 L1533.15 1216.4 L1532.56 1216.4 L1531.98 1216.4 L1531.39 1216.4 L1530.8 1216.4 L1530.22 1216.4 L1529.63 1216.4 L1529.04 1216.4 L1528.46 1216.4 L1527.87 1216.4 L1527.28 1216.4 L1526.7 1216.4 L1526.11 1216.4 L1525.52 1216.4 L1524.94 1216.4 L1524.35 1216.4 L1523.77 1216.4 L1523.18 1216.4 L1522.59 1216.4 L1522.01 1216.4 L1521.42 1216.4 L1520.83 1216.4 L1520.25 1216.4 L1519.66 1216.4 L1519.07 1216.4 L1518.49 1216.4 L1517.9 1216.4 L1517.32 1216.4 L1516.73 1216.4 L1516.14 1216.4 L1515.56 1216.4 L1514.97 1216.4 L1514.38 1216.4 L1513.8 1216.4 L1513.21 1216.4 L1512.62 1216.4 L1512.04 1216.4 L1511.45 1216.4 L1510.86 1216.4 L1510.28 1216.4 L1509.69 1216.4 L1509.11 1216.4 L1508.52 1216.4 L1507.93 1216.4 L1507.35 1216.4 L1506.76 1216.4 L1506.17 1216.4 L1505.59 1216.4 L1505 1216.4 L1504.41 1216.4 L1503.83 1216.4 L1503.24 1216.4 L1502.65 1216.4 L1502.07 1216.4 L1501.48 1216.4 L1500.9 1216.4 L1500.31 1216.4 L1499.72 1216.4 L1499.14 1216.4 L1498.55 1216.4 L1497.96 1216.4 L1497.38 1216.4 L1496.79 1216.4 L1496.2 1216.4 L1495.62 1216.4 L1495.03 1216.4 L1494.45 1216.4 L1493.86 1216.4 L1493.27 1216.4 L1492.69 1216.4 L1492.1 1216.4 L1491.51 1216.4 L1490.93 1216.4 L1490.34 1216.4 L1489.75 1216.4 L1489.17 1216.4 L1488.58 1216.4 L1487.99 1216.4 L1487.41 1216.4 L1486.82 1216.4 L1486.24 1216.4 L1485.65 1216.4 L1485.06 1216.4 L1484.48 1216.4 L1483.89 1216.4 L1483.3 1216.4 L1482.72 1216.4 L1482.13 1216.4 L1481.54 1216.4 L1480.96 1216.4 L1480.37 1216.4 L1479.78 1216.4 L1479.2 1216.4 L1478.61 1216.4 L1478.03 1216.4 L1477.44 1216.4 L1476.85 1216.4 L1476.27 1216.4 L1475.68 1216.4 L1475.09 1216.4 L1474.51 1216.4 L1473.92 1216.4 L1473.33 1216.4 L1472.75 1216.4 L1472.16 1216.4 L1471.57 1216.4 L1470.99 1216.4 L1470.4 1216.4 L1469.82 1216.4 L1469.23 1216.4 L1468.64 1216.4 L1468.06 1216.4 L1467.47 1216.4 L1466.88 1216.4 L1466.3 1216.4 L1465.71 1216.4 L1465.12 1216.4 L1464.54 1216.4 L1463.95 1216.4 L1463.37 1216.4 L1462.78 1216.4 L1462.19 1216.4 L1461.61 1216.4 L1461.02 1216.4 L1460.43 1216.4 L1459.85 1216.4 L1459.26 1216.4 L1458.67 1216.4 L1458.09 1216.4 L1457.5 1216.4 L1456.91 1216.4 L1456.33 1216.4 L1455.74 1216.4 L1455.16 1216.4 L1454.57 1216.4 L1453.98 1216.4 L1453.4 1216.4 L1452.81 1216.4 L1452.22 1216.4 L1451.64 1216.4 L1451.05 1216.4 L1450.46 1216.4 L1449.88 1216.4 L1449.29 1216.4 L1448.7 1216.4 L1448.12 1216.4 L1447.53 1216.4 L1446.95 1216.4 L1446.36 1216.4 L1445.77 1216.4 L1445.19 1216.4 L1444.6 1216.4 L1444.01 1216.4 L1443.43 1216.4 L1442.84 1216.4 L1442.25 1216.4 L1441.67 1216.4 L1441.08 1216.4 L1440.5 1216.4 L1439.91 1216.4 L1439.32 1216.4 L1438.74 1216.4 L1438.15 1216.4 L1437.56 1216.4 L1436.98 1216.4 L1436.39 1216.4 L1435.8 1216.4 L1435.22 1216.4 L1434.63 1216.4 L1434.04 1216.4 L1433.46 1216.4 L1432.87 1216.4 L1432.29 1216.4 L1431.7 1216.4 L1431.11 1216.4 L1430.53 1216.4 L1429.94 1216.4 L1429.35 1216.4 L1428.77 1216.4 L1428.18 1216.4 L1427.59 1216.4 L1427.01 1216.4 L1426.42 1216.4 L1425.83 1216.4 L1425.25 1216.4 L1424.66 1216.4 L1424.08 1216.4 L1423.49 1216.4 L1422.9 1216.4 L1422.32 1216.4 L1421.73 1216.4 L1421.14 1216.4 L1420.56 1216.4 L1419.97 1216.4 L1419.38 1216.4 L1418.8 1216.4 L1418.21 1216.4 L1417.63 1216.4 L1417.04 1216.4 L1416.45 1216.4 L1415.87 1216.4 L1415.28 1216.4 L1414.69 1216.4 L1414.11 1216.4 L1413.52 1216.4 L1412.93 1216.4 L1412.35 1216.4 L1411.76 1216.4 L1411.17 1216.4 L1410.59 1216.4 L1410 1216.4 L1409.42 1216.4 L1408.83 1216.4 L1408.24 1216.4 L1407.66 1216.4 L1407.07 1216.4 L1406.48 1216.4 L1405.9 1216.4 L1405.31 1216.4 L1404.72 1216.4 L1404.14 1216.4 L1403.55 1216.4 L1402.96 1216.4 L1402.38 1216.4 L1401.79 1216.4 L1401.21 1216.4 L1400.62 1216.4 L1400.03 1216.4 L1399.45 1216.4 L1398.86 1216.4 L1398.27 1216.4 L1397.69 1216.4 L1397.1 1216.4 L1396.51 1216.4 L1395.93 1216.4 L1395.34 1216.4 L1394.75 1216.4 L1394.17 1216.4 L1393.58 1216.4 L1393 1216.4 L1392.41 1216.4 L1391.82 1216.4 L1391.24 1216.4 L1390.65 1216.4 L1390.06 1216.4 L1389.48 1216.4 L1388.89 1216.4 L1388.3 1216.4 L1387.72 1216.4 L1387.13 1216.4 L1386.55 1216.4 L1385.96 1216.4 L1385.37 1216.4 L1384.79 1216.4 L1384.2 1216.4 L1383.61 1216.4 L1383.03 1216.4 L1382.44 1216.4 L1381.85 1216.4 L1381.27 1216.4 L1380.68 1216.4 L1380.09 1216.4 L1379.51 1216.4 L1378.92 1216.4 L1378.34 1216.4 L1377.75 1216.4 L1377.16 1216.4 L1376.58 1216.4 L1375.99 1216.4 L1375.4 1216.4 L1374.82 1216.4 L1374.23 1216.4 L1373.64 1216.4 L1373.06 1216.4 L1372.47 1216.4 L1371.88 1216.4 L1371.3 1216.4 L1370.71 1216.4 L1370.13 1216.4 L1369.54 1216.4 L1368.95 1216.4 L1368.37 1216.4 L1367.78 1216.4 L1367.19 1216.4 L1366.61 1216.4 L1366.02 1216.4 L1365.43 1216.4 L1364.85 1216.4 L1364.26 1216.4 L1363.68 1216.4 L1363.09 1216.4 L1362.5 1216.4 L1361.92 1216.4 L1361.33 1216.4 L1360.74 1216.4 L1360.16 1216.4 L1359.57 1216.4 L1358.98 1216.4 L1358.4 1216.4 L1357.81 1216.4 L1357.22 1216.4 L1356.64 1216.4 L1356.05 1216.4 L1355.47 1216.4 L1354.88 1216.4 L1354.29 1216.4 L1353.71 1216.4 L1353.12 1216.4 L1352.53 1216.4 L1351.95 1216.4 L1351.36 1216.4 L1350.77 1216.4 L1350.19 1216.4 L1349.6 1216.4 L1349.01 1216.4 L1348.43 1216.4 L1347.84 1216.4 L1347.26 1216.4 L1346.67 1216.4 L1346.08 1216.4 L1345.5 1216.4 L1344.91 1216.4 L1344.32 1216.4 L1343.74 1216.4 L1343.15 1216.4 L1342.56 1216.4 L1341.98 1216.4 L1341.39 1216.4 L1340.8 1216.4 L1340.22 1216.4 L1339.63 1216.4 L1339.05 1216.4 L1338.46 1216.4 L1337.87 1216.4 L1337.29 1216.4 L1336.7 1216.4 L1336.11 1216.4 L1335.53 1216.4 L1334.94 1216.4 L1334.35 1216.4 L1333.77 1216.4 L1333.18 1216.4 L1332.6 1216.4 L1332.01 1216.4 L1331.42 1216.4 L1330.84 1216.4 L1330.25 1216.4 L1329.66 1216.4 L1329.08 1216.4 L1328.49 1216.4 L1327.9 1216.4 L1327.32 1216.4 L1326.73 1216.4 L1326.14 1216.4 L1325.56 1216.4 L1324.97 1216.4 L1324.39 1216.4 L1323.8 1216.4 L1323.21 1216.4 L1322.63 1216.4 L1322.04 1216.4 L1321.45 1216.4 L1320.87 1216.4 L1320.28 1216.4 L1319.69 1216.4 L1319.11 1216.4 L1318.52 1216.4 L1317.93 1216.4 L1317.35 1216.4 L1316.76 1216.4 L1316.18 1216.4 L1315.59 1216.4 L1315 1216.4 L1314.42 1216.4 L1313.83 1216.4 L1313.24 1216.4 L1312.66 1216.4 L1312.07 1216.4 L1311.48 1216.4 L1310.9 1216.4 L1310.31 1216.4 L1309.73 1216.4 L1309.14 1216.4 L1308.55 1216.4 L1307.97 1216.4 L1307.38 1216.4 L1306.79 1216.4 L1306.21 1216.4 L1305.62 1216.4 L1305.03 1216.4 L1304.45 1216.4 L1303.86 1216.4 L1303.27 1216.4 L1302.69 1216.4 L1302.1 1216.4 L1301.52 1216.4 L1300.93 1216.4 L1300.34 1216.4 L1299.76 1216.4 L1299.17 1216.4 L1298.58 1216.4 L1298 1216.4 L1297.41 1216.4 L1296.82 1216.4 L1296.24 1216.4 L1295.65 1216.4 L1295.06 1216.4 L1294.48 1216.4 L1293.89 1216.4 L1293.31 1216.4 L1292.72 1216.4 L1292.13 1216.4 L1291.55 1216.4 L1290.96 1216.4 L1290.37 1216.4 L1289.79 1216.4 L1289.2 1216.4 L1288.61 1216.4 L1288.03 1216.4 L1287.44 1216.4 L1286.86 1216.4 L1286.27 1216.4 L1285.68 1216.4 L1285.1 1216.4 L1284.51 1216.4 L1283.92 1216.4 L1283.34 1216.4 L1282.75 1216.4 L1282.16 1216.4 L1281.58 1216.4 L1280.99 1216.4 L1280.4 1216.4 L1279.82 1216.4 L1279.23 1216.4 L1278.65 1216.4 L1278.06 1216.4 L1277.47 1216.4 L1276.89 1216.4 L1276.3 1216.4 L1275.71 1216.4 L1275.13 1216.4 L1274.54 1216.4 L1273.95 1216.4 L1273.37 1216.4 L1272.78 1216.4 L1272.19 1216.4 L1271.61 1216.4 L1271.02 1216.4 L1270.44 1216.4 L1269.85 1216.4 L1269.26 1216.4 L1268.68 1216.4 L1268.09 1216.4 L1267.5 1216.4 L1266.92 1216.4 L1266.33 1216.4 L1265.74 1216.4 L1265.16 1216.4 L1264.57 1216.4 L1263.98 1216.4 L1263.4 1216.4 L1262.81 1216.4 L1262.23 1216.4 L1261.64 1216.4 L1261.05 1216.4 L1260.47 1216.4 L1259.88 1216.4 L1259.29 1216.4 L1258.71 1216.4 L1258.12 1216.4 L1257.53 1216.4 L1256.95 1216.4 L1256.36 1216.4 L1255.78 1216.4 L1255.19 1216.4 L1254.6 1216.4 L1254.02 1216.4 L1253.43 1216.4 L1252.84 1216.4 L1252.26 1216.4 L1251.67 1216.4 L1251.08 1216.4 L1250.5 1216.4 L1249.91 1216.4 L1249.32 1216.4 L1248.74 1216.4 L1248.15 1216.4 L1247.57 1216.4 L1246.98 1216.4 L1246.39 1216.4 L1245.81 1216.4 L1245.22 1216.4 L1244.63 1216.4 L1244.05 1216.4 L1243.46 1216.4 L1242.87 1216.4 L1242.29 1216.4 L1241.7 1216.4 L1241.11 1216.4 L1240.53 1216.4 L1239.94 1216.4 L1239.36 1216.4 L1238.77 1216.4 L1238.18 1216.4 L1237.6 1216.4 L1237.01 1216.4 L1236.42 1216.4 L1235.84 1216.4 L1235.25 1216.4 L1234.66 1216.4 L1234.08 1216.4 L1233.49 1216.4 L1232.91 1216.4 L1232.32 1216.4 L1231.73 1216.4 L1231.15 1216.4 L1230.56 1216.4 L1229.97 1216.4 L1229.39 1216.4 L1228.8 1216.4 L1228.21 1216.4 L1227.63 1216.4 L1227.04 1216.4 L1226.45 1216.4 L1225.87 1216.4 L1225.28 1216.4 L1224.7 1216.4 L1224.11 1216.4 L1223.52 1216.4 L1222.94 1216.4 L1222.35 1216.4 L1221.76 1216.4 L1221.18 1216.4 L1220.59 1216.4 L1220 1216.4 L1219.42 1216.4 L1218.83 1216.4 L1218.24 1216.4 L1217.66 1216.4 L1217.07 1216.4 L1216.49 1216.4 L1215.9 1216.4 L1215.31 1216.4 L1214.73 1216.4 L1214.14 1216.4 L1213.55 1216.4 L1212.97 1216.4 L1212.38 1216.4 L1211.79 1216.4 L1211.21 1216.4 L1210.62 1216.4 L1210.03 1216.4 L1209.45 1216.4 L1208.86 1216.4 L1208.28 1216.4 L1207.69 1216.4 L1207.1 1216.4 L1206.52 1216.4 L1205.93 1216.4 L1205.34 1216.4 L1204.76 1216.4 L1204.17 1216.4 L1203.58 1216.4 L1203 1216.4 L1202.41 1216.4 L1201.83 1216.4 L1201.24 1216.4 L1200.65 1216.4 L1200.07 1216.4 L1199.48 1216.4 L1198.89 1216.4 L1198.31 1216.4 L1197.72 1216.4 L1197.13 1216.4 L1196.55 1216.4 L1195.96 1216.4 L1195.37 1216.4 L1194.79 1216.4 L1194.2 1216.4 L1193.62 1216.4 L1193.03 1216.4 L1192.44 1216.4 L1191.86 1216.4 L1191.27 1216.4 L1190.68 1216.4 L1190.1 1216.4 L1189.51 1216.4 L1188.92 1216.4 L1188.34 1216.4 L1187.75 1216.4 L1187.16 1216.4 L1186.58 1216.4 L1185.99 1216.4 L1185.41 1216.4 L1184.82 1216.4 L1184.23 1216.4 L1183.65 1216.4 L1183.06 1216.4 L1182.47 1216.4 L1181.89 1216.4 L1181.3 1216.4 L1180.71 1216.4 L1180.13 1216.4 L1179.54 1216.4 L1178.96 1216.4 L1178.37 1216.4 L1177.78 1216.4 L1177.2 1216.4 L1176.61 1216.4 L1176.02 1216.4 L1175.44 1216.4 L1174.85 1216.4 L1174.26 1216.4 L1173.68 1216.4 L1173.09 1216.4 L1172.5 1216.4 L1171.92 1216.4 L1171.33 1216.4 L1170.75 1216.4 L1170.16 1216.4 L1169.57 1216.4 L1168.99 1216.4 L1168.4 1216.4 L1167.81 1216.4 L1167.23 1216.4 L1166.64 1216.4 L1166.05 1216.4 L1165.47 1216.4 L1164.88 1216.4 L1164.29 1216.4 L1163.71 1216.4 L1163.12 1216.4 L1162.54 1216.4 L1161.95 1216.4 L1161.36 1216.4 L1160.78 1216.4 L1160.19 1216.4 L1159.6 1216.4 L1159.02 1216.4 L1158.43 1216.4 L1157.84 1216.4 L1157.26 1216.4 L1156.67 1216.4 L1156.09 1216.4 L1155.5 1216.4 L1154.91 1216.4 L1154.33 1216.4 L1153.74 1216.4 L1153.15 1216.4 L1152.57 1216.4 L1151.98 1216.4 L1151.39 1216.4 L1150.81 1216.4 L1150.22 1216.4 L1149.63 1216.4 L1149.05 1216.4 L1148.46 1216.4 L1147.88 1216.4 L1147.29 1216.4 L1146.7 1216.4 L1146.12 1216.4 L1145.53 1216.4 L1144.94 1216.4 L1144.36 1216.4 L1143.77 1216.4 L1143.18 1216.4 L1142.6 1216.4 L1142.01 1216.4 L1141.42 1216.4 L1140.84 1216.4 L1140.25 1216.4 L1139.67 1216.4 L1139.08 1216.4 L1138.49 1216.4 L1137.91 1216.4 L1137.32 1216.4 L1136.73 1216.4 L1136.15 1216.4 L1135.56 1216.4 L1134.97 1216.4 L1134.39 1216.4 L1133.8 1216.4 L1133.21 1216.4 L1132.63 1216.4 L1132.04 1216.4 L1131.46 1216.4 L1130.87 1216.4 L1130.28 1216.4 L1129.7 1216.4 L1129.11 1216.4 L1128.52 1216.4 L1127.94 1216.4 L1127.35 1216.4 L1126.76 1216.4 L1126.18 1216.4 L1125.59 1216.4 L1125.01 1216.4 L1124.42 1216.4 L1123.83 1216.4 L1123.25 1216.4 L1122.66 1216.4 L1122.07 1216.4 L1121.49 1216.4 L1120.9 1216.4 L1120.31 1216.4 L1119.73 1216.4 L1119.14 1216.4 L1118.55 1216.4 L1117.97 1216.4 L1117.38 1216.4 L1116.8 1216.4 L1116.21 1216.4 L1115.62 1216.4 L1115.04 1216.4 L1114.45 1216.4 L1113.86 1216.4 L1113.28 1216.4 L1112.69 1216.4 L1112.1 1216.4 L1111.52 1216.4 L1110.93 1216.4 L1110.34 1216.4 L1109.76 1216.4 L1109.17 1216.4 L1108.59 1216.4 L1108 1216.4 L1107.41 1216.4 L1106.83 1216.4 L1106.24 1216.4 L1105.65 1216.4 L1105.07 1216.4 L1104.48 1216.4 L1103.89 1216.4 L1103.31 1216.4 L1102.72 1216.4 L1102.14 1216.4 L1101.55 1216.4 L1100.96 1216.4 L1100.38 1216.4 L1099.79 1216.4 L1099.2 1216.4 L1098.62 1216.4 L1098.03 1216.4 L1097.44 1216.4 L1096.86 1216.4 L1096.27 1216.4 L1095.68 1216.4 L1095.1 1216.4 L1094.51 1216.4 L1093.93 1216.4 L1093.34 1216.4 L1092.75 1216.4 L1092.17 1216.4 L1091.58 1216.4 L1090.99 1216.4 L1090.41 1216.4 L1089.82 1216.4 L1089.23 1216.4 L1088.65 1216.4 L1088.06 1216.4 L1087.47 1216.4 L1086.89 1216.4 L1086.3 1216.4 L1085.72 1216.4 L1085.13 1216.4 L1084.54 1216.4 L1083.96 1216.4 L1083.37 1216.4 L1082.78 1216.4 L1082.2 1216.4 L1081.61 1216.4 L1081.02 1216.4 L1080.44 1216.4 L1079.85 1216.4 L1079.26 1216.4 L1078.68 1216.4 L1078.09 1216.4 L1077.51 1216.4 L1076.92 1216.4 L1076.33 1216.4 L1075.75 1216.4 L1075.16 1216.4 L1074.57 1216.4 L1073.99 1216.4 L1073.4 1216.4 L1072.81 1216.4 L1072.23 1216.4 L1071.64 1216.4 L1071.06 1216.4 L1070.47 1216.4 L1069.88 1216.4 L1069.3 1216.4 L1068.71 1216.4 L1068.12 1216.4 L1067.54 1216.4 L1066.95 1216.4 L1066.36 1216.4 L1065.78 1216.4 L1065.19 1216.4 L1064.6 1216.4 L1064.02 1216.4 L1063.43 1216.4 L1062.85 1216.4 L1062.26 1216.4 L1061.67 1216.4 L1061.09 1216.4 L1060.5 1216.4 L1059.91 1216.4 L1059.33 1216.4 L1058.74 1216.4 L1058.15 1216.4 L1057.57 1216.4 L1056.98 1216.4 L1056.39 1216.4 L1055.81 1216.4 L1055.22 1216.4 L1054.64 1216.4 L1054.05 1216.4 L1053.46 1216.4 L1052.88 1216.4 L1052.29 1216.4 L1051.7 1216.4 L1051.12 1216.4 L1050.53 1216.4 L1049.94 1216.4 L1049.36 1216.4 L1048.77 1216.4 L1048.19 1216.4 L1047.6 1216.4 L1047.01 1216.4 L1046.43 1216.4 L1045.84 1216.4 L1045.25 1216.4 L1044.67 1216.4 L1044.08 1216.4 L1043.49 1216.4 L1042.91 1216.4 L1042.32 1216.4 L1041.73 1216.4 L1041.15 1216.4 L1040.56 1216.4 L1039.98 1216.4 L1039.39 1216.4 L1038.8 1216.4 L1038.22 1216.4 L1037.63 1216.4 L1037.04 1216.4 L1036.46 1216.4 L1035.87 1216.4 L1035.28 1216.4 L1034.7 1216.4 L1034.11 1216.4 L1033.52 1216.4 L1032.94 1216.4 L1032.35 1216.4 L1031.77 1216.4 L1031.18 1216.4 L1030.59 1216.4 L1030.01 1216.4 L1029.42 1216.4 L1028.83 1216.4 L1028.25 1216.4 L1027.66 1216.4 L1027.07 1216.4 L1026.49 1216.4 L1025.9 1216.4 L1025.32 1216.4 L1024.73 1216.4 L1024.14 1216.4 L1023.56 1216.4 L1022.97 1216.4 L1022.38 1216.4 L1021.8 1216.4 L1021.21 1216.4 L1020.62 1216.4 L1020.04 1216.4 L1019.45 1216.4 L1018.86 1216.4 L1018.28 1216.4 L1017.69 1216.4 L1017.11 1216.4 L1016.52 1216.4 L1015.93 1216.4 L1015.35 1216.4 L1014.76 1216.4 L1014.17 1216.4 L1013.59 1216.4 L1013 1216.4 L1012.41 1216.4 L1011.83 1216.4 L1011.24 1216.4 L1010.65 1216.4 L1010.07 1216.4 L1009.48 1216.4 L1008.9 1216.4 L1008.31 1216.4 L1007.72 1216.4 L1007.14 1216.4 L1006.55 1216.4 L1005.96 1216.4 L1005.38 1216.4 L1004.79 1216.4 L1004.2 1216.4 L1003.62 1216.4 L1003.03 1216.4 L1002.44 1216.4 L1001.86 1216.4 L1001.27 1216.4 L1000.69 1216.4 L1000.1 1216.4 L999.513 1216.4 L998.926 1216.4 L998.34 1216.4 L997.754 1216.4 L997.167 1216.4 L996.581 1216.4 L995.994 1216.4 L995.408 1216.4 L994.822 1216.4 L994.235 1216.4 L993.649 1216.4 L993.062 1216.4 L992.476 1216.4 L991.889 1216.4 L991.303 1216.4 L990.717 1216.4 L990.13 1216.4 L989.544 1216.4 L988.957 1216.4 L988.371 1216.4 L987.785 1216.4 L987.198 1216.4 L986.612 1216.4 L986.025 1216.4  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip762)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1216.78 986.612,1216.78 987.198,1216.78 987.785,1216.78 988.371,1216.78 988.957,1216.78 989.544,1216.78 990.13,1216.78 990.717,1216.78 991.303,1216.78 991.889,1216.78 992.476,1216.78 993.062,1216.78 993.649,1216.78 994.235,1216.78 994.822,1216.78 995.408,1216.78 995.994,1216.78 996.581,1216.78 997.167,1216.78 997.754,1216.78 998.34,1216.78 998.926,1216.78 999.513,1216.78 1000.1,1216.78 1000.69,1216.78 1001.27,1216.78 1001.86,1216.78 1002.44,1216.78 1003.03,1216.78 1003.62,1216.78 1004.2,1216.78 1004.79,1216.78 1005.38,1216.78 1005.96,1216.78 1006.55,1216.78 1007.14,1216.78 1007.72,1216.78 1008.31,1216.78 1008.9,1216.78 1009.48,1216.78 1010.07,1216.78 1010.65,1216.78 1011.24,1216.78 1011.83,1216.78 1012.41,1216.78 1013,1216.78 1013.59,1216.78 1014.17,1216.78 1014.76,1216.78 1015.35,1216.78 1015.93,1216.78 1016.52,1216.78 1017.11,1216.78 1017.69,1216.78 1018.28,1216.78 1018.86,1216.78 1019.45,1216.78 1020.04,1216.78 1020.62,1216.78 1021.21,1216.78 1021.8,1216.78 1022.38,1216.78 1022.97,1216.78 1023.56,1216.78 1024.14,1216.78 1024.73,1216.78 1025.32,1216.78 1025.9,1216.78 1026.49,1216.78 1027.07,1216.78 1027.66,1216.78 1028.25,1216.78 1028.83,1216.78 1029.42,1216.78 1030.01,1216.78 1030.59,1216.78 1031.18,1216.78 1031.77,1216.78 1032.35,1216.78 1032.94,1216.78 1033.52,1216.78 1034.11,1216.78 1034.7,1216.78 1035.28,1216.78 1035.87,1216.78 1036.46,1216.78 1037.04,1216.78 1037.63,1216.78 1038.22,1216.78 1038.8,1216.78 1039.39,1216.78 1039.98,1216.78 1040.56,1216.78 1041.15,1216.78 1041.73,1216.78 1042.32,1216.78 1042.91,1216.78 1043.49,1216.78 1044.08,1216.78 1044.67,1216.78 1045.25,1216.78 1045.84,1216.78 1046.43,1216.78 1047.01,1216.78 1047.6,1216.78 1048.19,1216.78 1048.77,1216.78 1049.36,1216.78 1049.94,1216.78 1050.53,1216.78 1051.12,1216.78 1051.7,1216.78 1052.29,1216.78 1052.88,1216.78 1053.46,1216.78 1054.05,1216.78 1054.64,1216.78 1055.22,1216.78 1055.81,1216.78 1056.39,1216.78 1056.98,1216.78 1057.57,1216.78 1058.15,1216.78 1058.74,1216.78 1059.33,1216.78 1059.91,1216.78 1060.5,1216.78 1061.09,1216.78 1061.67,1216.78 1062.26,1216.78 1062.85,1216.78 1063.43,1216.78 1064.02,1216.78 1064.6,1216.78 1065.19,1216.78 1065.78,1216.78 1066.36,1216.78 1066.95,1216.78 1067.54,1216.78 1068.12,1216.78 1068.71,1216.78 1069.3,1216.78 1069.88,1216.78 1070.47,1216.78 1071.06,1216.78 1071.64,1216.78 1072.23,1216.78 1072.81,1216.78 1073.4,1216.78 1073.99,1216.78 1074.57,1216.78 1075.16,1216.78 1075.75,1216.78 1076.33,1216.78 1076.92,1216.78 1077.51,1216.78 1078.09,1216.78 1078.68,1216.78 1079.26,1216.78 1079.85,1216.78 1080.44,1216.78 1081.02,1216.78 1081.61,1216.78 1082.2,1216.78 1082.78,1216.78 1083.37,1216.78 1083.96,1216.78 1084.54,1216.78 1085.13,1216.78 1085.72,1216.78 1086.3,1216.78 1086.89,1216.78 1087.47,1216.78 1088.06,1216.78 1088.65,1216.78 1089.23,1216.78 1089.82,1216.78 1090.41,1216.78 1090.99,1216.78 1091.58,1216.78 1092.17,1216.78 1092.75,1216.78 1093.34,1216.78 1093.93,1216.78 1094.51,1216.78 1095.1,1216.78 1095.68,1216.78 1096.27,1216.78 1096.86,1216.78 1097.44,1216.78 1098.03,1216.78 1098.62,1216.78 1099.2,1216.78 1099.79,1216.78 1100.38,1216.78 1100.96,1216.78 1101.55,1216.78 1102.14,1216.78 1102.72,1216.78 1103.31,1216.78 1103.89,1216.78 1104.48,1216.78 1105.07,1216.78 1105.65,1216.78 1106.24,1216.78 1106.83,1216.78 1107.41,1216.78 1108,1216.78 1108.59,1216.78 1109.17,1216.78 1109.76,1216.78 1110.34,1216.78 1110.93,1216.78 1111.52,1216.78 1112.1,1216.78 1112.69,1216.78 1113.28,1216.78 1113.86,1216.78 1114.45,1216.78 1115.04,1216.78 1115.62,1216.78 1116.21,1216.78 1116.8,1216.78 1117.38,1216.78 1117.97,1216.78 1118.55,1216.78 1119.14,1216.78 1119.73,1216.78 1120.31,1216.78 1120.9,1216.78 1121.49,1216.78 1122.07,1216.78 1122.66,1216.78 1123.25,1216.78 1123.83,1216.78 1124.42,1216.78 1125.01,1216.78 1125.59,1216.78 1126.18,1216.78 1126.76,1216.78 1127.35,1216.78 1127.94,1216.78 1128.52,1216.78 1129.11,1216.78 1129.7,1216.78 1130.28,1216.78 1130.87,1216.78 1131.46,1216.78 1132.04,1216.78 1132.63,1216.78 1133.21,1216.78 1133.8,1216.78 1134.39,1216.78 1134.97,1216.78 1135.56,1216.78 1136.15,1216.78 1136.73,1216.78 1137.32,1216.78 1137.91,1216.78 1138.49,1216.78 1139.08,1216.78 1139.67,1216.78 1140.25,1216.78 1140.84,1216.78 1141.42,1216.78 1142.01,1216.78 1142.6,1216.78 1143.18,1216.78 1143.77,1216.78 1144.36,1216.78 1144.94,1216.78 1145.53,1216.78 1146.12,1216.78 1146.7,1216.78 1147.29,1216.78 1147.88,1216.78 1148.46,1216.78 1149.05,1216.78 1149.63,1216.78 1150.22,1216.78 1150.81,1216.78 1151.39,1216.78 1151.98,1216.78 1152.57,1216.78 1153.15,1216.78 1153.74,1216.78 1154.33,1216.78 1154.91,1216.78 1155.5,1216.78 1156.09,1216.78 1156.67,1216.78 1157.26,1216.78 1157.84,1216.78 1158.43,1216.78 1159.02,1216.78 1159.6,1216.78 1160.19,1216.78 1160.78,1216.78 1161.36,1216.78 1161.95,1216.78 1162.54,1216.78 1163.12,1216.78 1163.71,1216.78 1164.29,1216.78 1164.88,1216.78 1165.47,1216.78 1166.05,1216.78 1166.64,1216.78 1167.23,1216.78 1167.81,1216.78 1168.4,1216.78 1168.99,1216.78 1169.57,1216.78 1170.16,1216.78 1170.75,1216.78 1171.33,1216.78 1171.92,1216.78 1172.5,1216.78 1173.09,1216.78 1173.68,1216.78 1174.26,1216.78 1174.85,1216.78 1175.44,1216.78 1176.02,1216.78 1176.61,1216.78 1177.2,1216.78 1177.78,1216.78 1178.37,1216.78 1178.96,1216.78 1179.54,1216.78 1180.13,1216.78 1180.71,1216.78 1181.3,1216.78 1181.89,1216.78 1182.47,1216.78 1183.06,1216.78 1183.65,1216.78 1184.23,1216.78 1184.82,1216.78 1185.41,1216.78 1185.99,1216.78 1186.58,1216.78 1187.16,1216.78 1187.75,1216.78 1188.34,1216.78 1188.92,1216.78 1189.51,1216.78 1190.1,1216.78 1190.68,1216.78 1191.27,1216.78 1191.86,1216.78 1192.44,1216.78 1193.03,1216.78 1193.62,1216.78 1194.2,1216.78 1194.79,1216.78 1195.37,1216.78 1195.96,1216.78 1196.55,1216.78 1197.13,1216.78 1197.72,1216.78 1198.31,1216.78 1198.89,1216.78 1199.48,1216.78 1200.07,1216.78 1200.65,1216.78 1201.24,1216.78 1201.83,1216.78 1202.41,1216.78 1203,1216.78 1203.58,1216.78 1204.17,1216.78 1204.76,1216.78 1205.34,1216.78 1205.93,1216.78 1206.52,1216.78 1207.1,1216.78 1207.69,1216.78 1208.28,1216.78 1208.86,1216.78 1209.45,1216.78 1210.03,1216.78 1210.62,1216.78 1211.21,1216.78 1211.79,1216.78 1212.38,1216.78 1212.97,1216.78 1213.55,1216.78 1214.14,1216.78 1214.73,1216.78 1215.31,1216.78 1215.9,1216.78 1216.49,1216.78 1217.07,1216.78 1217.66,1216.78 1218.24,1216.78 1218.83,1216.78 1219.42,1216.78 1220,1216.78 1220.59,1216.78 1221.18,1216.78 1221.76,1216.78 1222.35,1216.78 1222.94,1216.78 1223.52,1216.78 1224.11,1216.78 1224.7,1216.78 1225.28,1216.78 1225.87,1216.78 1226.45,1216.78 1227.04,1216.78 1227.63,1216.78 1228.21,1216.78 1228.8,1216.78 1229.39,1216.78 1229.97,1216.78 1230.56,1216.78 1231.15,1216.78 1231.73,1216.78 1232.32,1216.78 1232.91,1216.78 1233.49,1216.78 1234.08,1216.78 1234.66,1216.78 1235.25,1216.78 1235.84,1216.78 1236.42,1216.78 1237.01,1216.78 1237.6,1216.78 1238.18,1216.78 1238.77,1216.78 1239.36,1216.78 1239.94,1216.78 1240.53,1216.78 1241.11,1216.78 1241.7,1216.78 1242.29,1216.78 1242.87,1216.78 1243.46,1216.78 1244.05,1216.78 1244.63,1216.78 1245.22,1216.78 1245.81,1216.78 1246.39,1216.78 1246.98,1216.78 1247.57,1216.78 1248.15,1216.78 1248.74,1216.78 1249.32,1216.78 1249.91,1216.78 1250.5,1216.78 1251.08,1216.78 1251.67,1216.78 1252.26,1216.78 1252.84,1216.78 1253.43,1216.78 1254.02,1216.78 1254.6,1216.78 1255.19,1216.78 1255.78,1216.78 1256.36,1216.78 1256.95,1216.78 1257.53,1216.78 1258.12,1216.78 1258.71,1216.78 1259.29,1216.78 1259.88,1216.78 1260.47,1216.78 1261.05,1216.78 1261.64,1216.78 1262.23,1216.78 1262.81,1216.78 1263.4,1216.78 1263.98,1216.78 1264.57,1216.78 1265.16,1216.78 1265.74,1216.78 1266.33,1216.78 1266.92,1216.78 1267.5,1216.78 1268.09,1216.78 1268.68,1216.78 1269.26,1216.78 1269.85,1216.78 1270.44,1216.78 1271.02,1216.78 1271.61,1216.78 1272.19,1216.78 1272.78,1216.78 1273.37,1216.78 1273.95,1216.78 1274.54,1216.78 1275.13,1216.78 1275.71,1216.78 1276.3,1216.78 1276.89,1216.78 1277.47,1216.78 1278.06,1216.78 1278.65,1216.78 1279.23,1216.78 1279.82,1216.78 1280.4,1216.78 1280.99,1216.78 1281.58,1216.78 1282.16,1216.78 1282.75,1216.78 1283.34,1216.78 1283.92,1216.78 1284.51,1216.78 1285.1,1216.78 1285.68,1216.78 1286.27,1216.78 1286.86,1216.78 1287.44,1216.78 1288.03,1216.78 1288.61,1216.78 1289.2,1216.78 1289.79,1216.78 1290.37,1216.78 1290.96,1216.78 1291.55,1216.78 1292.13,1216.78 1292.72,1216.78 1293.31,1216.78 1293.89,1216.78 1294.48,1216.78 1295.06,1216.78 1295.65,1216.78 1296.24,1216.78 1296.82,1216.78 1297.41,1216.78 1298,1216.78 1298.58,1216.78 1299.17,1216.78 1299.76,1216.78 1300.34,1216.78 1300.93,1216.78 1301.52,1216.78 1302.1,1216.78 1302.69,1216.78 1303.27,1216.78 1303.86,1216.78 1304.45,1216.78 1305.03,1216.78 1305.62,1216.78 1306.21,1216.78 1306.79,1216.78 1307.38,1216.78 1307.97,1216.78 1308.55,1216.78 1309.14,1216.78 1309.73,1216.78 1310.31,1216.78 1310.9,1216.78 1311.48,1216.78 1312.07,1216.78 1312.66,1216.78 1313.24,1216.78 1313.83,1216.78 1314.42,1216.78 1315,1216.78 1315.59,1216.78 1316.18,1216.78 1316.76,1216.78 1317.35,1216.78 1317.93,1216.78 1318.52,1216.78 1319.11,1216.78 1319.69,1216.78 1320.28,1216.78 1320.87,1216.78 1321.45,1216.78 1322.04,1216.78 1322.63,1216.78 1323.21,1216.78 1323.8,1216.78 1324.39,1216.78 1324.97,1216.78 1325.56,1216.78 1326.14,1216.78 1326.73,1216.78 1327.32,1216.78 1327.9,1216.78 1328.49,1216.78 1329.08,1216.78 1329.66,1216.78 1330.25,1216.78 1330.84,1216.78 1331.42,1216.78 1332.01,1216.78 1332.6,1216.78 1333.18,1216.78 1333.77,1216.78 1334.35,1216.78 1334.94,1216.78 1335.53,1216.78 1336.11,1216.78 1336.7,1216.78 1337.29,1216.78 1337.87,1216.78 1338.46,1216.78 1339.05,1216.78 1339.63,1216.78 1340.22,1216.78 1340.8,1216.78 1341.39,1216.78 1341.98,1216.78 1342.56,1216.78 1343.15,1216.78 1343.74,1216.78 1344.32,1216.78 1344.91,1216.78 1345.5,1216.78 1346.08,1216.78 1346.67,1216.78 1347.26,1216.78 1347.84,1216.78 1348.43,1216.78 1349.01,1216.78 1349.6,1216.78 1350.19,1216.78 1350.77,1216.78 1351.36,1216.78 1351.95,1216.78 1352.53,1216.78 1353.12,1216.78 1353.71,1216.78 1354.29,1216.78 1354.88,1216.78 1355.47,1216.78 1356.05,1216.78 1356.64,1216.78 1357.22,1216.78 1357.81,1216.78 1358.4,1216.78 1358.98,1216.78 1359.57,1216.78 1360.16,1216.78 1360.74,1216.78 1361.33,1216.78 1361.92,1216.78 1362.5,1216.78 1363.09,1216.78 1363.68,1216.78 1364.26,1216.78 1364.85,1216.78 1365.43,1216.78 1366.02,1216.78 1366.61,1216.78 1367.19,1216.78 1367.78,1216.78 1368.37,1216.78 1368.95,1216.78 1369.54,1216.78 1370.13,1216.78 1370.71,1216.78 1371.3,1216.78 1371.88,1216.78 1372.47,1216.78 1373.06,1216.78 1373.64,1216.78 1374.23,1216.78 1374.82,1216.78 1375.4,1216.78 1375.99,1216.78 1376.58,1216.78 1377.16,1216.78 1377.75,1216.78 1378.34,1216.78 1378.92,1216.78 1379.51,1216.78 1380.09,1216.78 1380.68,1216.78 1381.27,1216.78 1381.85,1216.78 1382.44,1216.78 1383.03,1216.78 1383.61,1216.78 1384.2,1216.78 1384.79,1216.78 1385.37,1216.78 1385.96,1216.78 1386.55,1216.78 1387.13,1216.78 1387.72,1216.78 1388.3,1216.78 1388.89,1216.78 1389.48,1216.78 1390.06,1216.78 1390.65,1216.78 1391.24,1216.78 1391.82,1216.78 1392.41,1216.78 1393,1216.78 1393.58,1216.78 1394.17,1216.78 1394.75,1216.78 1395.34,1216.78 1395.93,1216.78 1396.51,1216.78 1397.1,1216.78 1397.69,1216.78 1398.27,1216.78 1398.86,1216.78 1399.45,1216.78 1400.03,1216.78 1400.62,1216.78 1401.21,1216.78 1401.79,1216.78 1402.38,1216.78 1402.96,1216.78 1403.55,1216.78 1404.14,1216.78 1404.72,1216.78 1405.31,1216.78 1405.9,1216.78 1406.48,1216.78 1407.07,1216.78 1407.66,1216.78 1408.24,1216.78 1408.83,1216.78 1409.42,1216.78 1410,1216.78 1410.59,1216.78 1411.17,1216.78 1411.76,1216.78 1412.35,1216.78 1412.93,1216.78 1413.52,1216.78 1414.11,1216.78 1414.69,1216.78 1415.28,1216.78 1415.87,1216.78 1416.45,1216.78 1417.04,1216.78 1417.63,1216.78 1418.21,1216.78 1418.8,1216.78 1419.38,1216.78 1419.97,1216.78 1420.56,1216.78 1421.14,1216.78 1421.73,1216.78 1422.32,1216.78 1422.9,1216.78 1423.49,1216.78 1424.08,1216.78 1424.66,1216.78 1425.25,1216.78 1425.83,1216.78 1426.42,1216.78 1427.01,1216.78 1427.59,1216.78 1428.18,1216.78 1428.77,1216.78 1429.35,1216.78 1429.94,1216.78 1430.53,1216.78 1431.11,1216.78 1431.7,1216.78 1432.29,1216.78 1432.87,1216.78 1433.46,1216.78 1434.04,1216.78 1434.63,1216.78 1435.22,1216.78 1435.8,1216.78 1436.39,1216.78 1436.98,1216.78 1437.56,1216.78 1438.15,1216.78 1438.74,1216.78 1439.32,1216.78 1439.91,1216.78 1440.5,1216.78 1441.08,1216.78 1441.67,1216.78 1442.25,1216.78 1442.84,1216.78 1443.43,1216.78 1444.01,1216.78 1444.6,1216.78 1445.19,1216.78 1445.77,1216.78 1446.36,1216.78 1446.95,1216.78 1447.53,1216.78 1448.12,1216.78 1448.7,1216.78 1449.29,1216.78 1449.88,1216.78 1450.46,1216.78 1451.05,1216.78 1451.64,1216.78 1452.22,1216.78 1452.81,1216.78 1453.4,1216.78 1453.98,1216.78 1454.57,1216.78 1455.16,1216.78 1455.74,1216.78 1456.33,1216.78 1456.91,1216.78 1457.5,1216.78 1458.09,1216.78 1458.67,1216.78 1459.26,1216.78 1459.85,1216.78 1460.43,1216.78 1461.02,1216.78 1461.61,1216.78 1462.19,1216.78 1462.78,1216.78 1463.37,1216.78 1463.95,1216.78 1464.54,1216.78 1465.12,1216.78 1465.71,1216.78 1466.3,1216.78 1466.88,1216.78 1467.47,1216.78 1468.06,1216.78 1468.64,1216.78 1469.23,1216.78 1469.82,1216.78 1470.4,1216.78 1470.99,1216.78 1471.57,1216.78 1472.16,1216.78 1472.75,1216.78 1473.33,1216.78 1473.92,1216.78 1474.51,1216.78 1475.09,1216.78 1475.68,1216.78 1476.27,1216.78 1476.85,1216.78 1477.44,1216.78 1478.03,1216.78 1478.61,1216.78 1479.2,1216.78 1479.78,1216.78 1480.37,1216.78 1480.96,1216.78 1481.54,1216.78 1482.13,1216.78 1482.72,1216.78 1483.3,1216.78 1483.89,1216.78 1484.48,1216.78 1485.06,1216.78 1485.65,1216.78 1486.24,1216.78 1486.82,1216.78 1487.41,1216.78 1487.99,1216.78 1488.58,1216.78 1489.17,1216.78 1489.75,1216.78 1490.34,1216.78 1490.93,1216.78 1491.51,1216.78 1492.1,1216.78 1492.69,1216.78 1493.27,1216.78 1493.86,1216.78 1494.45,1216.78 1495.03,1216.78 1495.62,1216.78 1496.2,1216.78 1496.79,1216.78 1497.38,1216.78 1497.96,1216.78 1498.55,1216.78 1499.14,1216.78 1499.72,1216.78 1500.31,1216.78 1500.9,1216.78 1501.48,1216.78 1502.07,1216.78 1502.65,1216.78 1503.24,1216.78 1503.83,1216.78 1504.41,1216.78 1505,1216.78 1505.59,1216.78 1506.17,1216.78 1506.76,1216.78 1507.35,1216.78 1507.93,1216.78 1508.52,1216.78 1509.11,1216.78 1509.69,1216.78 1510.28,1216.78 1510.86,1216.78 1511.45,1216.78 1512.04,1216.78 1512.62,1216.78 1513.21,1216.78 1513.8,1216.78 1514.38,1216.78 1514.97,1216.78 1515.56,1216.78 1516.14,1216.78 1516.73,1216.78 1517.32,1216.78 1517.9,1216.78 1518.49,1216.78 1519.07,1216.78 1519.66,1216.78 1520.25,1216.78 1520.83,1216.78 1521.42,1216.78 1522.01,1216.78 1522.59,1216.78 1523.18,1216.78 1523.77,1216.78 1524.35,1216.78 1524.94,1216.78 1525.52,1216.78 1526.11,1216.78 1526.7,1216.78 1527.28,1216.78 1527.87,1216.78 1528.46,1216.78 1529.04,1216.78 1529.63,1216.78 1530.22,1216.78 1530.8,1216.78 1531.39,1216.78 1531.98,1216.78 1532.56,1216.78 1533.15,1216.78 1533.73,1216.78 1534.32,1216.78 1534.91,1216.78 1535.49,1216.78 1536.08,1216.78 1536.67,1216.78 1537.25,1216.78 1537.84,1216.78 1538.43,1216.78 1539.01,1216.78 1539.6,1216.78 1540.19,1216.78 1540.77,1216.78 1541.36,1216.78 1541.94,1216.78 1542.53,1216.78 1543.12,1216.78 1543.7,1216.78 1544.29,1216.78 1544.88,1216.78 1545.46,1216.78 1546.05,1216.78 1546.64,1216.78 1547.22,1216.78 1547.81,1216.78 1548.4,1216.78 1548.98,1216.78 1549.57,1216.78 1550.15,1216.78 1550.74,1216.78 1551.33,1216.78 1551.91,1216.78 1552.5,1216.78 1553.09,1216.78 1553.67,1216.78 1554.26,1216.78 1554.85,1216.78 1555.43,1216.78 1556.02,1216.78 1556.6,1216.78 1557.19,1216.78 1557.78,1216.78 1558.36,1216.78 1558.95,1216.78 1559.54,1216.78 1560.12,1216.78 1560.71,1216.78 1561.3,1216.78 1561.88,1216.78 1562.47,1216.78 1563.06,1216.78 1563.64,1216.78 1564.23,1216.78 1564.81,1216.78 1565.4,1216.78 1565.99,1216.78 1566.57,1216.78 1567.16,1216.78 1567.75,1216.78 1568.33,1216.78 1568.92,1216.78 1569.51,1216.78 1570.09,1216.78 1570.68,1216.78 1571.27,1216.78 1571.85,1216.78 1572.44,1216.78 1573.02,1216.78 1573.61,1216.78 1574.2,1216.78 1574.78,1216.78 1575.37,1216.78 1575.96,1216.78 1576.54,1216.78 1577.13,1216.78 1577.72,1216.78 1578.3,1216.78 1578.89,1216.78 1579.47,1216.78 1580.06,1216.78 1580.65,1216.78 1581.23,1216.78 1581.82,1216.78 1582.41,1216.78 1582.99,1216.78 1583.58,1216.78 1584.17,1216.78 1584.75,1216.78 1585.34,1216.78 1585.93,1216.78 1586.51,1216.78 1587.1,1216.78 1587.68,1216.78 1588.27,1216.78 1588.86,1216.78 1589.44,1216.78 1590.03,1216.78 1590.62,1216.78 1591.2,1216.78 1591.79,1216.78 1592.38,1216.78 1592.96,1216.78 1593.55,1216.78 1594.14,1216.78 1594.72,1216.78 1595.31,1216.78 1595.89,1216.78 1596.48,1216.78 1597.07,1216.78 1597.65,1216.78 1598.24,1216.78 1598.83,1216.78 1599.41,1216.78 1600,1216.78 1600.59,1216.78 1601.17,1216.78 1601.76,1216.78 1602.34,1216.78 1602.93,1216.78 1603.52,1216.78 1604.1,1216.78 1604.69,1216.78 1605.28,1216.78 1605.86,1216.78 1606.45,1216.78 1607.04,1216.78 1607.62,1216.78 1608.21,1216.78 1608.8,1216.78 1609.38,1216.78 1609.97,1216.78 1610.55,1216.78 1611.14,1216.78 1611.73,1216.78 1612.31,1216.78 1612.9,1216.78 1613.49,1216.78 1614.07,1216.78 1614.66,1216.78 1615.25,1216.78 1615.83,1216.78 1616.42,1216.78 1617.01,1216.78 1617.59,1216.78 1618.18,1216.78 1618.76,1216.78 1619.35,1216.78 1619.94,1216.78 1620.52,1216.78 1621.11,1216.78 1621.7,1216.78 1622.28,1216.78 1622.87,1216.78 1623.46,1216.78 1624.04,1216.78 1624.63,1216.78 1625.22,1216.78 1625.8,1216.78 1626.39,1216.78 1626.97,1216.78 1627.56,1216.78 1628.15,1216.78 1628.73,1216.78 1629.32,1216.78 1629.91,1216.78 1630.49,1216.78 1631.08,1216.78 1631.67,1216.78 1632.25,1216.78 1632.84,1216.78 1633.42,1216.78 1634.01,1216.78 1634.6,1216.78 1635.18,1216.78 1635.77,1216.78 1636.36,1216.78 1636.94,1216.78 1637.53,1216.78 1638.12,1216.78 1638.7,1216.78 1639.29,1216.78 1639.88,1216.78 1640.46,1216.78 1641.05,1216.78 1641.63,1216.78 1642.22,1216.78 1642.81,1216.78 1643.39,1216.78 1643.98,1216.78 1644.57,1216.78 1645.15,1216.78 1645.74,1216.78 1646.33,1216.78 1646.91,1216.78 1647.5,1216.78 1648.09,1216.78 1648.67,1216.78 1649.26,1216.78 1649.84,1216.78 1650.43,1216.78 1651.02,1216.78 1651.6,1216.78 1652.19,1216.78 1652.78,1216.78 1653.36,1216.78 1653.95,1216.78 1654.54,1216.78 1655.12,1216.78 1655.71,1216.78 1656.29,1216.78 1656.88,1216.78 1657.47,1216.78 1658.05,1216.78 1658.64,1216.78 1659.23,1216.78 1659.81,1216.78 1660.4,1216.78 1660.99,1216.78 1661.57,1216.78 1662.16,1216.78 1662.75,1216.78 1663.33,1216.78 1663.92,1216.78 1664.5,1216.78 1665.09,1216.78 1665.68,1216.78 1666.26,1216.78 1666.85,1216.78 1667.44,1216.78 1668.02,1216.78 1668.61,1216.78 1669.2,1216.78 1669.78,1216.78 1670.37,1216.78 1670.96,1216.78 1671.54,1216.78 1672.13,1216.78 1672.71,1216.78 1673.3,1216.78 1673.89,1216.78 1674.47,1216.78 1675.06,1216.78 1675.65,1216.78 1676.23,1216.78 1676.82,1216.78 1677.41,1216.78 1677.99,1216.78 1678.58,1216.78 1679.17,1216.78 1679.75,1216.78 1680.34,1216.78 1680.92,1216.78 1681.51,1216.78 1682.1,1216.78 1682.68,1216.78 1683.27,1216.78 1683.86,1216.78 1684.44,1216.78 1685.03,1216.78 1685.62,1216.78 1686.2,1216.78 1686.79,1216.78 1687.37,1216.78 1687.96,1216.78 1688.55,1216.78 1689.13,1216.78 1689.72,1216.78 1690.31,1216.78 1690.89,1216.78 1691.48,1216.78 1692.07,1216.78 1692.65,1216.78 1693.24,1216.78 1693.83,1216.78 1694.41,1216.78 1695,1216.78 1695.58,1216.78 1696.17,1216.78 1696.76,1216.78 1697.34,1216.78 1697.93,1216.78 1698.52,1216.78 1699.1,1216.78 1699.69,1216.78 1700.28,1216.78 1700.86,1216.78 1701.45,1216.78 1702.04,1216.78 1702.62,1216.78 1703.21,1216.78 1703.79,1216.78 1704.38,1216.78 1704.97,1216.78 1705.55,1216.78 1706.14,1216.78 1706.73,1216.78 1707.31,1216.78 1707.9,1216.78 1708.49,1216.78 1709.07,1216.78 1709.66,1216.78 1710.24,1216.78 1710.83,1216.78 1711.42,1216.78 1712,1216.78 1712.59,1216.78 1713.18,1216.78 1713.76,1216.78 1714.35,1216.78 1714.94,1216.78 1715.52,1216.78 1716.11,1216.78 1716.7,1216.78 1717.28,1216.78 1717.87,1216.78 1718.45,1216.78 1719.04,1216.78 1719.63,1216.78 1720.21,1216.78 1720.8,1216.78 1721.39,1216.78 1721.97,1216.78 1722.56,1216.78 1723.15,1216.78 1723.73,1216.78 1724.32,1216.78 1724.91,1216.78 1725.49,1216.78 1726.08,1216.78 1726.66,1216.78 1727.25,1216.78 1727.84,1216.78 1728.42,1216.78 1729.01,1216.78 1729.6,1216.78 1730.18,1216.78 1730.77,1216.78 1731.36,1216.78 1731.94,1216.78 1732.53,1216.78 1733.11,1216.78 1733.7,1216.78 1734.29,1216.78 1734.87,1216.78 1735.46,1216.78 1736.05,1216.78 1736.63,1216.78 1737.22,1216.78 1737.81,1216.78 1738.39,1216.78 1738.98,1216.78 1739.57,1216.78 1740.15,1216.78 1740.74,1216.78 1741.32,1216.78 1741.91,1216.78 1742.5,1216.78 1743.08,1216.78 1743.67,1216.78 1744.26,1216.78 1744.84,1216.78 1745.43,1216.78 1746.02,1216.78 1746.6,1216.78 1747.19,1216.78 1747.78,1216.78 1748.36,1216.78 1748.95,1216.78 1749.53,1216.78 1750.12,1216.78 1750.71,1216.78 1751.29,1216.78 1751.88,1216.78 1752.47,1216.78 1753.05,1216.78 1753.64,1216.78 1754.23,1216.78 1754.81,1216.78 1755.4,1216.78 1755.99,1216.78 1756.57,1216.78 1757.16,1216.78 1757.74,1216.78 1758.33,1216.78 1758.92,1216.78 1759.5,1216.78 1760.09,1216.78 1760.68,1216.78 1761.26,1216.78 1761.85,1216.78 1762.44,1216.78 1763.02,1216.78 1763.61,1216.78 1764.19,1216.78 1764.78,1216.78 1765.37,1216.78 1765.95,1216.78 1766.54,1216.78 1767.13,1216.78 1767.71,1216.78 1768.3,1216.78 1768.89,1216.78 1769.47,1216.78 1770.06,1216.78 1770.65,1216.78 1771.23,1216.78 1771.82,1216.78 1772.4,1216.78 1772.99,1216.78 1773.58,1216.78 1774.16,1216.78 1774.75,1216.78 1775.34,1216.78 1775.92,1216.78 1776.51,1216.78 1777.1,1216.78 1777.68,1216.78 1778.27,1216.78 1778.86,1216.78 1779.44,1216.78 1780.03,1216.78 1780.61,1216.78 1781.2,1216.78 1781.79,1216.78 1782.37,1216.78 1782.96,1216.78 1783.55,1216.78 1784.13,1216.78 1784.72,1216.78 1785.31,1216.78 1785.89,1216.78 1786.48,1216.78 1787.06,1216.78 1787.65,1216.78 1788.24,1216.78 1788.82,1216.78 1789.41,1216.78 1790,1216.78 1790.58,1216.78 1791.17,1216.78 1791.76,1216.78 1792.34,1216.78 1792.93,1216.78 1793.52,1216.78 1794.1,1216.78 1794.69,1216.78 1795.27,1216.78 1795.86,1216.78 1796.45,1216.78 1797.03,1216.78 1797.62,1216.78 1798.21,1216.78 1798.79,1216.78 1799.38,1216.78 1799.97,1216.78 1800.55,1216.78 1801.14,1216.78 1801.73,1216.78 1802.31,1216.78 1802.9,1216.78 1803.48,1216.78 1804.07,1216.78 1804.66,1216.78 1805.24,1216.78 1805.83,1216.78 1806.42,1216.78 1807,1216.78 1807.59,1216.78 1808.18,1216.78 1808.76,1216.78 1809.35,1216.78 1809.94,1216.78 1810.52,1216.78 1811.11,1216.78 1811.69,1216.78 1812.28,1216.78 1812.87,1216.78 1813.45,1216.78 1814.04,1216.78 1814.63,1216.78 1815.21,1216.78 1815.8,1216.78 1816.39,1216.78 1816.97,1216.78 1817.56,1216.78 1818.14,1216.78 1818.73,1216.78 1819.32,1216.78 1819.9,1216.78 1820.49,1216.78 1821.08,1216.78 1821.66,1216.78 1822.25,1216.78 1822.84,1216.78 1823.42,1216.78 1824.01,1216.78 1824.6,1216.78 1825.18,1216.78 1825.77,1216.78 1826.35,1216.78 1826.94,1216.78 1827.53,1216.78 1828.11,1216.78 1828.7,1216.78 1829.29,1216.78 1829.87,1216.78 1830.46,1216.78 1831.05,1216.78 1831.63,1216.78 1832.22,1216.78 1832.81,1216.78 1833.39,1216.78 1833.98,1216.78 1834.56,1216.78 1835.15,1216.78 1835.74,1216.78 1836.32,1216.78 1836.91,1216.78 1837.5,1216.78 1838.08,1216.78 1838.67,1216.78 1839.26,1216.78 1839.84,1216.78 1840.43,1216.78 1841.01,1216.78 1841.6,1216.78 1842.19,1216.78 1842.77,1216.78 1843.36,1216.78 1843.95,1216.78 1844.53,1216.78 1845.12,1216.78 1845.71,1216.78 1846.29,1216.78 1846.88,1216.78 1847.47,1216.78 1848.05,1216.78 1848.64,1216.78 1849.22,1216.78 1849.81,1216.78 1850.4,1216.78 1850.98,1216.78 1851.57,1216.78 1852.16,1216.78 1852.74,1216.78 1853.33,1216.78 1853.92,1216.78 1854.5,1216.78 1855.09,1216.78 1855.68,1216.78 1856.26,1216.78 1856.85,1216.78 1857.43,1216.78 1858.02,1216.78 1858.61,1216.78 1859.19,1216.78 1859.78,1216.78 1860.37,1216.78 1860.95,1216.78 1861.54,1216.78 1862.13,1216.78 1862.71,1216.78 1863.3,1216.78 1863.88,1216.78 1864.47,1216.78 1865.06,1216.78 1865.64,1216.78 1866.23,1216.78 1866.82,1216.78 1867.4,1216.78 1867.99,1216.78 1868.58,1216.78 1869.16,1216.78 1869.75,1216.78 1870.34,1216.78 1870.92,1216.78 1871.51,1216.78 1872.09,1216.78 1872.68,1216.78 1873.27,1216.78 1873.85,1216.78 1874.44,1216.78 1875.03,1216.78 1875.61,1216.78 1876.2,1216.78 1876.79,1216.78 1877.37,1216.78 1877.96,1216.78 1878.55,1216.78 1879.13,1216.78 1879.72,1216.78 1880.3,1216.78 1880.89,1216.78 1881.48,1216.78 1882.06,1216.78 1882.65,1216.78 1883.24,1216.78 1883.82,1216.78 1884.41,1216.78 1885,1216.78 1885.58,1216.78 1886.17,1216.78 1886.76,1216.78 1887.34,1216.78 1887.93,1216.78 1888.51,1216.78 1889.1,1216.78 1889.69,1216.78 1890.27,1216.78 1890.86,1216.78 1891.45,1216.78 1892.03,1216.78 1892.62,1216.78 1893.21,1216.78 1893.79,1216.78 1894.38,1216.78 1894.96,1216.78 1895.55,1216.78 1896.14,1216.78 1896.72,1216.78 1897.31,1216.78 1897.9,1216.78 1898.48,1216.78 1899.07,1216.78 1899.66,1216.78 1900.24,1216.78 1900.83,1216.78 1901.42,1216.78 1902,1216.78 1902.59,1216.78 1903.17,1216.78 1903.76,1216.78 1904.35,1216.78 1904.93,1216.78 1905.52,1216.78 1906.11,1216.78 1906.69,1216.78 1907.28,1216.78 1907.87,1216.78 1908.45,1216.78 1909.04,1216.78 1909.63,1216.78 1910.21,1216.78 1910.8,1216.78 1911.38,1216.78 1911.97,1216.78 1912.56,1216.78 1913.14,1216.78 1913.73,1216.78 1914.32,1216.78 1914.9,1216.78 1915.49,1216.78 1916.08,1216.78 1916.66,1216.78 1917.25,1216.78 1917.83,1216.78 1918.42,1216.78 1919.01,1216.78 1919.59,1216.78 1920.18,1216.78 1920.77,1216.78 1921.35,1216.78 1921.94,1216.78 1922.53,1216.78 1923.11,1216.78 1923.7,1216.78 1924.29,1216.78 1924.87,1216.78 1925.46,1216.78 1926.04,1216.78 1926.63,1216.78 1927.22,1216.78 1927.8,1216.78 1928.39,1216.78 1928.98,1216.78 1929.56,1216.78 1930.15,1216.78 1930.74,1216.78 1931.32,1216.78 1931.91,1216.78 1932.5,1216.78 1933.08,1216.78 1933.67,1216.78 1934.25,1216.78 1934.84,1216.78 1935.43,1216.78 1936.01,1216.78 1936.6,1216.78 1937.19,1216.78 1937.77,1216.78 1938.36,1216.78 1938.95,1216.78 1939.53,1216.78 1940.12,1216.78 1940.71,1216.78 1941.29,1216.78 1941.88,1216.78 1942.46,1216.78 1943.05,1216.78 1943.64,1216.78 1944.22,1216.78 1944.81,1216.78 1945.4,1216.78 1945.98,1216.78 1946.57,1216.78 1947.16,1216.78 1947.74,1216.78 1948.33,1216.78 1948.91,1216.78 1949.5,1216.78 1950.09,1216.78 1950.67,1216.78 1951.26,1216.78 1951.85,1216.78 1952.43,1216.78 1953.02,1216.78 1953.61,1216.78 1954.19,1216.78 1954.78,1216.78 1955.37,1216.78 1955.95,1216.78 1956.54,1216.78 1957.12,1216.78 1957.71,1216.78 1958.3,1216.78 1958.88,1216.78 1959.47,1216.78 1960.06,1216.78 1960.64,1216.78 1961.23,1216.78 1961.82,1216.78 1962.4,1216.78 1962.99,1216.78 1963.58,1216.78 1964.16,1216.78 1964.75,1216.78 1965.33,1216.78 1965.92,1216.78 1966.51,1216.78 1967.09,1216.78 1967.68,1216.78 1968.27,1216.78 1968.85,1216.78 1969.44,1216.78 1970.03,1216.78 1970.61,1216.78 1971.2,1216.78 1971.78,1216.78 1972.37,1216.78 1972.96,1216.78 1973.54,1216.78 1974.13,1216.78 1974.72,1216.78 1975.3,1216.78 1975.89,1216.78 1976.48,1216.78 1977.06,1216.78 1977.65,1216.78 1978.24,1216.78 1978.82,1216.78 1979.41,1216.78 1979.99,1216.78 1980.58,1216.78 1981.17,1216.78 1981.75,1216.78 1982.34,1216.78 1982.93,1216.78 1983.51,1216.78 1984.1,1216.78 1984.69,1216.78 1985.27,1216.78 1985.86,1216.78 1986.45,1216.78 1987.03,1216.78 1987.62,1216.78 1988.2,1216.78 1988.79,1216.78 1989.38,1216.78 1989.96,1216.78 1990.55,1216.78 1991.14,1216.78 1991.72,1216.78 1992.31,1216.78 1992.9,1216.78 1993.48,1216.78 1994.07,1216.78 1994.65,1216.78 1995.24,1216.78 1995.83,1216.78 1996.41,1216.78 1997,1216.78 1997.59,1216.78 1998.17,1216.78 1998.76,1216.78 1999.35,1216.78 1999.93,1216.78 2000.52,1216.78 2001.11,1216.78 2001.69,1216.78 2002.28,1216.78 2002.86,1216.78 2003.45,1216.78 2004.04,1216.78 2004.62,1216.78 2005.21,1216.78 2005.8,1216.78 2006.38,1216.78 2006.97,1216.78 2007.56,1216.78 2008.14,1216.78 2008.73,1216.78 2009.32,1216.78 2009.9,1216.78 2010.49,1216.78 2011.07,1216.78 2011.66,1216.78 2012.25,1216.78 2012.83,1216.78 2013.42,1216.78 2014.01,1216.78 2014.59,1216.78 2015.18,1216.78 2015.77,1216.78 2016.35,1216.78 2016.94,1216.78 2017.53,1216.78 2018.11,1216.78 2018.7,1216.78 2019.28,1216.78 2019.87,1216.78 2020.46,1216.78 2021.04,1216.78 2021.63,1216.78 2022.22,1216.78 2022.8,1216.78 2023.39,1216.78 2023.98,1216.78 2024.56,1216.78 2025.15,1216.78 2025.73,1216.78 2026.32,1216.78 2026.91,1216.78 2027.49,1216.78 2028.08,1216.78 2028.67,1216.78 2029.25,1216.78 2029.84,1216.78 2030.43,1216.78 2031.01,1216.78 2031.6,1216.78 2032.19,1216.78 2032.77,1216.78 2033.36,1216.78 2033.94,1216.78 2034.53,1216.78 2035.12,1216.78 2035.7,1216.78 2036.29,1216.78 2036.88,1216.78 2037.46,1216.78 2038.05,1216.78 2038.64,1216.78 2039.22,1216.78 2039.81,1216.78 2040.4,1216.78 2040.98,1216.78 2041.57,1216.78 2042.15,1216.78 2042.74,1216.78 2043.33,1216.78 2043.91,1216.78 2044.5,1216.78 2045.09,1216.78 2045.67,1216.78 2046.26,1216.78 2046.85,1216.78 2047.43,1216.78 2048.02,1216.78 2048.6,1216.78 2049.19,1216.78 2049.78,1216.78 2050.36,1216.78 2050.95,1216.78 2051.54,1216.78 2052.12,1216.78 2052.71,1216.78 2053.3,1216.78 2053.88,1216.78 2054.47,1216.78 2055.06,1216.78 2055.64,1216.78 2056.23,1216.78 2056.81,1216.78 2057.4,1216.78 2057.99,1216.78 2058.57,1216.78 2059.16,1216.78 2059.75,1216.78 2060.33,1216.78 2060.92,1216.78 2061.51,1216.78 2062.09,1216.78 2062.68,1216.78 2063.27,1216.78 2063.85,1216.78 2064.44,1216.78 2065.02,1216.78 2065.61,1216.78 2066.2,1216.78 2066.78,1216.78 2067.37,1216.78 2067.96,1216.78 2068.54,1216.78 2069.13,1216.78 2069.72,1216.78 2070.3,1216.78 2070.89,1216.78 2071.48,1216.78 2072.06,1216.78 2072.65,1216.78 2073.23,1216.78 2073.82,1216.78 2074.41,1216.78 2074.99,1216.78 2075.58,1216.78 2076.17,1216.78 2076.75,1216.78 2077.34,1216.78 2077.93,1216.78 2078.51,1216.78 2079.1,1216.78 2079.68,1216.78 2080.27,1216.78 2080.86,1216.78 2081.44,1216.78 2082.03,1216.78 2082.62,1216.78 2083.2,1216.78 2083.79,1216.78 2084.38,1216.78 2084.96,1216.78 2085.55,1216.78 2086.14,1216.78 2086.72,1216.78 2087.31,1216.78 2087.89,1216.78 2088.48,1216.78 2089.07,1216.78 2089.65,1216.78 2090.24,1216.78 2090.83,1216.78 2091.41,1216.78 2092,1216.78 2092.59,1216.78 2093.17,1216.78 2093.76,1216.78 2094.35,1216.78 2094.93,1216.78 2095.52,1216.78 2096.1,1216.78 2096.69,1216.78 2097.28,1216.78 2097.86,1216.78 2098.45,1216.78 2099.04,1216.78 2099.62,1216.78 2100.21,1216.78 2100.8,1216.78 2101.38,1216.78 2101.97,1216.78 2102.55,1216.78 2103.14,1216.78 2103.73,1216.78 2104.31,1216.78 2104.9,1216.78 2105.49,1216.78 2106.07,1216.78 2106.66,1216.78 2107.25,1216.78 2107.83,1216.78 2108.42,1216.78 2109.01,1216.78 2109.59,1216.78 2110.18,1216.78 2110.76,1216.78 2111.35,1216.78 2111.94,1216.78 2112.52,1216.78 2113.11,1216.78 2113.7,1216.78 2114.28,1216.78 2114.87,1216.78 2115.46,1216.78 2116.04,1216.78 2116.63,1216.78 2117.22,1216.78 2117.8,1216.78 2118.39,1216.78 2118.97,1216.78 2119.56,1216.78 2120.15,1216.78 2120.73,1216.78 2121.32,1216.78 2121.91,1216.78 2122.49,1216.78 2123.08,1216.78 2123.67,1216.78 2124.25,1216.78 2124.84,1216.78 2125.42,1216.78 2126.01,1216.78 2126.6,1216.78 2127.18,1216.78 2127.77,1216.78 2128.36,1216.78 2128.94,1216.78 2129.53,1216.78 2130.12,1216.78 2130.7,1216.78 2131.29,1216.78 2131.88,1216.78 2132.46,1216.78 2133.05,1216.78 2133.63,1216.78 2134.22,1216.78 2134.81,1216.78 2135.39,1216.78 2135.98,1216.78 2136.57,1216.78 2137.15,1216.78 2137.74,1216.78 2138.33,1216.78 2138.91,1216.78 2139.5,1216.78 2140.09,1216.78 2140.67,1216.78 2141.26,1216.78 2141.84,1216.78 2142.43,1216.78 2143.02,1216.78 2143.6,1216.78 2144.19,1216.78 2144.78,1216.78 2145.36,1216.78 2145.95,1216.78 2146.54,1216.78 2147.12,1216.78 2147.71,1216.78 2148.3,1216.78 2148.88,1216.78 2149.47,1216.78 2150.05,1216.78 2150.64,1216.78 2151.23,1216.78 2151.81,1216.78 2152.4,1216.78 2152.99,1216.78 2153.57,1216.78 2154.16,1216.78 2154.75,1216.78 2155.33,1216.78 2155.92,1216.78 2156.5,1216.78 2157.09,1216.78 2157.68,1216.78 2158.26,1216.78 \"/>\n<path clip-path=\"url(#clip762)\" d=\"M986.025 1216.51 L986.612 1216.51 L987.198 1216.51 L987.785 1216.51 L988.371 1216.51 L988.957 1216.51 L989.544 1216.51 L990.13 1216.51 L990.717 1216.51 L991.303 1216.51 L991.889 1216.51 L992.476 1216.51 L993.062 1216.51 L993.649 1216.51 L994.235 1216.51 L994.822 1216.51 L995.408 1216.51 L995.994 1216.51 L996.581 1216.51 L997.167 1216.51 L997.754 1216.51 L998.34 1216.51 L998.926 1216.51 L999.513 1216.51 L1000.1 1216.51 L1000.69 1216.51 L1001.27 1216.51 L1001.86 1216.51 L1002.44 1216.51 L1003.03 1216.51 L1003.62 1216.51 L1004.2 1216.51 L1004.79 1216.51 L1005.38 1216.51 L1005.96 1216.51 L1006.55 1216.51 L1007.14 1216.51 L1007.72 1216.51 L1008.31 1216.51 L1008.9 1216.51 L1009.48 1216.51 L1010.07 1216.51 L1010.65 1216.51 L1011.24 1216.51 L1011.83 1216.51 L1012.41 1216.51 L1013 1216.51 L1013.59 1216.51 L1014.17 1216.51 L1014.76 1216.51 L1015.35 1216.51 L1015.93 1216.51 L1016.52 1216.51 L1017.11 1216.51 L1017.69 1216.51 L1018.28 1216.51 L1018.86 1216.51 L1019.45 1216.51 L1020.04 1216.51 L1020.62 1216.51 L1021.21 1216.51 L1021.8 1216.51 L1022.38 1216.51 L1022.97 1216.51 L1023.56 1216.51 L1024.14 1216.51 L1024.73 1216.51 L1025.32 1216.51 L1025.9 1216.51 L1026.49 1216.51 L1027.07 1216.51 L1027.66 1216.51 L1028.25 1216.51 L1028.83 1216.51 L1029.42 1216.51 L1030.01 1216.51 L1030.59 1216.51 L1031.18 1216.51 L1031.77 1216.51 L1032.35 1216.51 L1032.94 1216.51 L1033.52 1216.51 L1034.11 1216.51 L1034.7 1216.51 L1035.28 1216.51 L1035.87 1216.51 L1036.46 1216.51 L1037.04 1216.51 L1037.63 1216.51 L1038.22 1216.51 L1038.8 1216.51 L1039.39 1216.51 L1039.98 1216.51 L1040.56 1216.51 L1041.15 1216.51 L1041.73 1216.51 L1042.32 1216.51 L1042.91 1216.51 L1043.49 1216.51 L1044.08 1216.51 L1044.67 1216.51 L1045.25 1216.51 L1045.84 1216.51 L1046.43 1216.51 L1047.01 1216.51 L1047.6 1216.51 L1048.19 1216.51 L1048.77 1216.51 L1049.36 1216.51 L1049.94 1216.51 L1050.53 1216.51 L1051.12 1216.51 L1051.7 1216.51 L1052.29 1216.51 L1052.88 1216.51 L1053.46 1216.51 L1054.05 1216.51 L1054.64 1216.51 L1055.22 1216.51 L1055.81 1216.51 L1056.39 1216.51 L1056.98 1216.51 L1057.57 1216.51 L1058.15 1216.51 L1058.74 1216.51 L1059.33 1216.51 L1059.91 1216.51 L1060.5 1216.51 L1061.09 1216.51 L1061.67 1216.51 L1062.26 1216.51 L1062.85 1216.51 L1063.43 1216.51 L1064.02 1216.51 L1064.6 1216.51 L1065.19 1216.51 L1065.78 1216.51 L1066.36 1216.51 L1066.95 1216.51 L1067.54 1216.51 L1068.12 1216.51 L1068.71 1216.51 L1069.3 1216.51 L1069.88 1216.51 L1070.47 1216.51 L1071.06 1216.51 L1071.64 1216.51 L1072.23 1216.51 L1072.81 1216.51 L1073.4 1216.51 L1073.99 1216.51 L1074.57 1216.51 L1075.16 1216.51 L1075.75 1216.51 L1076.33 1216.51 L1076.92 1216.51 L1077.51 1216.51 L1078.09 1216.51 L1078.68 1216.51 L1079.26 1216.51 L1079.85 1216.51 L1080.44 1216.51 L1081.02 1216.51 L1081.61 1216.51 L1082.2 1216.51 L1082.78 1216.51 L1083.37 1216.51 L1083.96 1216.51 L1084.54 1216.51 L1085.13 1216.51 L1085.72 1216.51 L1086.3 1216.51 L1086.89 1216.51 L1087.47 1216.51 L1088.06 1216.51 L1088.65 1216.51 L1089.23 1216.51 L1089.82 1216.51 L1090.41 1216.51 L1090.99 1216.51 L1091.58 1216.51 L1092.17 1216.51 L1092.75 1216.51 L1093.34 1216.51 L1093.93 1216.51 L1094.51 1216.51 L1095.1 1216.51 L1095.68 1216.51 L1096.27 1216.51 L1096.86 1216.51 L1097.44 1216.51 L1098.03 1216.51 L1098.62 1216.51 L1099.2 1216.51 L1099.79 1216.51 L1100.38 1216.51 L1100.96 1216.51 L1101.55 1216.51 L1102.14 1216.51 L1102.72 1216.51 L1103.31 1216.51 L1103.89 1216.51 L1104.48 1216.51 L1105.07 1216.51 L1105.65 1216.51 L1106.24 1216.51 L1106.83 1216.51 L1107.41 1216.51 L1108 1216.51 L1108.59 1216.51 L1109.17 1216.51 L1109.76 1216.51 L1110.34 1216.51 L1110.93 1216.51 L1111.52 1216.51 L1112.1 1216.51 L1112.69 1216.51 L1113.28 1216.51 L1113.86 1216.51 L1114.45 1216.51 L1115.04 1216.51 L1115.62 1216.51 L1116.21 1216.51 L1116.8 1216.51 L1117.38 1216.51 L1117.97 1216.51 L1118.55 1216.51 L1119.14 1216.51 L1119.73 1216.51 L1120.31 1216.51 L1120.9 1216.51 L1121.49 1216.51 L1122.07 1216.51 L1122.66 1216.51 L1123.25 1216.51 L1123.83 1216.51 L1124.42 1216.51 L1125.01 1216.51 L1125.59 1216.51 L1126.18 1216.51 L1126.76 1216.51 L1127.35 1216.51 L1127.94 1216.51 L1128.52 1216.51 L1129.11 1216.51 L1129.7 1216.51 L1130.28 1216.51 L1130.87 1216.51 L1131.46 1216.51 L1132.04 1216.51 L1132.63 1216.51 L1133.21 1216.51 L1133.8 1216.51 L1134.39 1216.51 L1134.97 1216.51 L1135.56 1216.51 L1136.15 1216.51 L1136.73 1216.51 L1137.32 1216.51 L1137.91 1216.51 L1138.49 1216.51 L1139.08 1216.51 L1139.67 1216.51 L1140.25 1216.51 L1140.84 1216.51 L1141.42 1216.51 L1142.01 1216.51 L1142.6 1216.51 L1143.18 1216.51 L1143.77 1216.51 L1144.36 1216.51 L1144.94 1216.51 L1145.53 1216.51 L1146.12 1216.51 L1146.7 1216.51 L1147.29 1216.51 L1147.88 1216.51 L1148.46 1216.51 L1149.05 1216.51 L1149.63 1216.51 L1150.22 1216.51 L1150.81 1216.51 L1151.39 1216.51 L1151.98 1216.51 L1152.57 1216.51 L1153.15 1216.51 L1153.74 1216.51 L1154.33 1216.51 L1154.91 1216.51 L1155.5 1216.51 L1156.09 1216.51 L1156.67 1216.51 L1157.26 1216.51 L1157.84 1216.51 L1158.43 1216.51 L1159.02 1216.51 L1159.6 1216.51 L1160.19 1216.51 L1160.78 1216.51 L1161.36 1216.51 L1161.95 1216.51 L1162.54 1216.51 L1163.12 1216.51 L1163.71 1216.51 L1164.29 1216.51 L1164.88 1216.51 L1165.47 1216.51 L1166.05 1216.51 L1166.64 1216.51 L1167.23 1216.51 L1167.81 1216.51 L1168.4 1216.51 L1168.99 1216.51 L1169.57 1216.51 L1170.16 1216.51 L1170.75 1216.51 L1171.33 1216.51 L1171.92 1216.51 L1172.5 1216.51 L1173.09 1216.51 L1173.68 1216.51 L1174.26 1216.51 L1174.85 1216.51 L1175.44 1216.51 L1176.02 1216.51 L1176.61 1216.51 L1177.2 1216.51 L1177.78 1216.51 L1178.37 1216.51 L1178.96 1216.51 L1179.54 1216.51 L1180.13 1216.51 L1180.71 1216.51 L1181.3 1216.51 L1181.89 1216.51 L1182.47 1216.51 L1183.06 1216.51 L1183.65 1216.51 L1184.23 1216.51 L1184.82 1216.51 L1185.41 1216.51 L1185.99 1216.51 L1186.58 1216.51 L1187.16 1216.51 L1187.75 1216.51 L1188.34 1216.51 L1188.92 1216.51 L1189.51 1216.51 L1190.1 1216.51 L1190.68 1216.51 L1191.27 1216.51 L1191.86 1216.51 L1192.44 1216.51 L1193.03 1216.51 L1193.62 1216.51 L1194.2 1216.51 L1194.79 1216.51 L1195.37 1216.51 L1195.96 1216.51 L1196.55 1216.51 L1197.13 1216.51 L1197.72 1216.51 L1198.31 1216.51 L1198.89 1216.51 L1199.48 1216.51 L1200.07 1216.51 L1200.65 1216.51 L1201.24 1216.51 L1201.83 1216.51 L1202.41 1216.51 L1203 1216.51 L1203.58 1216.51 L1204.17 1216.51 L1204.76 1216.51 L1205.34 1216.51 L1205.93 1216.51 L1206.52 1216.51 L1207.1 1216.51 L1207.69 1216.51 L1208.28 1216.51 L1208.86 1216.51 L1209.45 1216.51 L1210.03 1216.51 L1210.62 1216.51 L1211.21 1216.51 L1211.79 1216.51 L1212.38 1216.51 L1212.97 1216.51 L1213.55 1216.51 L1214.14 1216.51 L1214.73 1216.51 L1215.31 1216.51 L1215.9 1216.51 L1216.49 1216.51 L1217.07 1216.51 L1217.66 1216.51 L1218.24 1216.51 L1218.83 1216.51 L1219.42 1216.51 L1220 1216.51 L1220.59 1216.51 L1221.18 1216.51 L1221.76 1216.51 L1222.35 1216.51 L1222.94 1216.51 L1223.52 1216.51 L1224.11 1216.51 L1224.7 1216.51 L1225.28 1216.51 L1225.87 1216.51 L1226.45 1216.51 L1227.04 1216.51 L1227.63 1216.51 L1228.21 1216.51 L1228.8 1216.51 L1229.39 1216.51 L1229.97 1216.51 L1230.56 1216.51 L1231.15 1216.51 L1231.73 1216.51 L1232.32 1216.51 L1232.91 1216.51 L1233.49 1216.51 L1234.08 1216.51 L1234.66 1216.51 L1235.25 1216.51 L1235.84 1216.51 L1236.42 1216.51 L1237.01 1216.51 L1237.6 1216.51 L1238.18 1216.51 L1238.77 1216.51 L1239.36 1216.51 L1239.94 1216.51 L1240.53 1216.51 L1241.11 1216.51 L1241.7 1216.51 L1242.29 1216.51 L1242.87 1216.51 L1243.46 1216.51 L1244.05 1216.51 L1244.63 1216.51 L1245.22 1216.51 L1245.81 1216.51 L1246.39 1216.51 L1246.98 1216.51 L1247.57 1216.51 L1248.15 1216.51 L1248.74 1216.51 L1249.32 1216.51 L1249.91 1216.51 L1250.5 1216.51 L1251.08 1216.51 L1251.67 1216.51 L1252.26 1216.51 L1252.84 1216.51 L1253.43 1216.51 L1254.02 1216.51 L1254.6 1216.51 L1255.19 1216.51 L1255.78 1216.51 L1256.36 1216.51 L1256.95 1216.51 L1257.53 1216.51 L1258.12 1216.51 L1258.71 1216.51 L1259.29 1216.51 L1259.88 1216.51 L1260.47 1216.51 L1261.05 1216.51 L1261.64 1216.51 L1262.23 1216.51 L1262.81 1216.51 L1263.4 1216.51 L1263.98 1216.51 L1264.57 1216.51 L1265.16 1216.51 L1265.74 1216.51 L1266.33 1216.51 L1266.92 1216.51 L1267.5 1216.51 L1268.09 1216.51 L1268.68 1216.51 L1269.26 1216.51 L1269.85 1216.51 L1270.44 1216.51 L1271.02 1216.51 L1271.61 1216.51 L1272.19 1216.51 L1272.78 1216.51 L1273.37 1216.51 L1273.95 1216.51 L1274.54 1216.51 L1275.13 1216.51 L1275.71 1216.51 L1276.3 1216.51 L1276.89 1216.51 L1277.47 1216.51 L1278.06 1216.51 L1278.65 1216.51 L1279.23 1216.51 L1279.82 1216.51 L1280.4 1216.51 L1280.99 1216.51 L1281.58 1216.51 L1282.16 1216.51 L1282.75 1216.51 L1283.34 1216.51 L1283.92 1216.51 L1284.51 1216.51 L1285.1 1216.51 L1285.68 1216.51 L1286.27 1216.51 L1286.86 1216.51 L1287.44 1216.51 L1288.03 1216.51 L1288.61 1216.51 L1289.2 1216.51 L1289.79 1216.51 L1290.37 1216.51 L1290.96 1216.51 L1291.55 1216.51 L1292.13 1216.51 L1292.72 1216.51 L1293.31 1216.51 L1293.89 1216.51 L1294.48 1216.51 L1295.06 1216.51 L1295.65 1216.51 L1296.24 1216.51 L1296.82 1216.51 L1297.41 1216.51 L1298 1216.51 L1298.58 1216.51 L1299.17 1216.51 L1299.76 1216.51 L1300.34 1216.51 L1300.93 1216.51 L1301.52 1216.51 L1302.1 1216.51 L1302.69 1216.51 L1303.27 1216.51 L1303.86 1216.51 L1304.45 1216.51 L1305.03 1216.51 L1305.62 1216.51 L1306.21 1216.51 L1306.79 1216.51 L1307.38 1216.51 L1307.97 1216.51 L1308.55 1216.51 L1309.14 1216.51 L1309.73 1216.51 L1310.31 1216.51 L1310.9 1216.51 L1311.48 1216.51 L1312.07 1216.51 L1312.66 1216.51 L1313.24 1216.51 L1313.83 1216.51 L1314.42 1216.51 L1315 1216.51 L1315.59 1216.51 L1316.18 1216.51 L1316.76 1216.51 L1317.35 1216.51 L1317.93 1216.51 L1318.52 1216.51 L1319.11 1216.51 L1319.69 1216.51 L1320.28 1216.51 L1320.87 1216.51 L1321.45 1216.51 L1322.04 1216.51 L1322.63 1216.51 L1323.21 1216.51 L1323.8 1216.51 L1324.39 1216.51 L1324.97 1216.51 L1325.56 1216.51 L1326.14 1216.51 L1326.73 1216.51 L1327.32 1216.51 L1327.9 1216.51 L1328.49 1216.51 L1329.08 1216.51 L1329.66 1216.51 L1330.25 1216.51 L1330.84 1216.51 L1331.42 1216.51 L1332.01 1216.51 L1332.6 1216.51 L1333.18 1216.51 L1333.77 1216.51 L1334.35 1216.51 L1334.94 1216.51 L1335.53 1216.51 L1336.11 1216.51 L1336.7 1216.51 L1337.29 1216.51 L1337.87 1216.51 L1338.46 1216.51 L1339.05 1216.51 L1339.63 1216.51 L1340.22 1216.51 L1340.8 1216.51 L1341.39 1216.51 L1341.98 1216.51 L1342.56 1216.51 L1343.15 1216.51 L1343.74 1216.51 L1344.32 1216.51 L1344.91 1216.51 L1345.5 1216.51 L1346.08 1216.51 L1346.67 1216.51 L1347.26 1216.51 L1347.84 1216.51 L1348.43 1216.51 L1349.01 1216.51 L1349.6 1216.51 L1350.19 1216.51 L1350.77 1216.51 L1351.36 1216.51 L1351.95 1216.51 L1352.53 1216.51 L1353.12 1216.51 L1353.71 1216.51 L1354.29 1216.51 L1354.88 1216.51 L1355.47 1216.51 L1356.05 1216.51 L1356.64 1216.51 L1357.22 1216.51 L1357.81 1216.51 L1358.4 1216.51 L1358.98 1216.51 L1359.57 1216.51 L1360.16 1216.51 L1360.74 1216.51 L1361.33 1216.51 L1361.92 1216.51 L1362.5 1216.51 L1363.09 1216.51 L1363.68 1216.51 L1364.26 1216.51 L1364.85 1216.51 L1365.43 1216.51 L1366.02 1216.51 L1366.61 1216.51 L1367.19 1216.51 L1367.78 1216.51 L1368.37 1216.51 L1368.95 1216.51 L1369.54 1216.51 L1370.13 1216.51 L1370.71 1216.51 L1371.3 1216.51 L1371.88 1216.51 L1372.47 1216.51 L1373.06 1216.51 L1373.64 1216.51 L1374.23 1216.51 L1374.82 1216.51 L1375.4 1216.51 L1375.99 1216.51 L1376.58 1216.51 L1377.16 1216.51 L1377.75 1216.51 L1378.34 1216.51 L1378.92 1216.51 L1379.51 1216.51 L1380.09 1216.51 L1380.68 1216.51 L1381.27 1216.51 L1381.85 1216.51 L1382.44 1216.51 L1383.03 1216.51 L1383.61 1216.51 L1384.2 1216.51 L1384.79 1216.51 L1385.37 1216.51 L1385.96 1216.51 L1386.55 1216.51 L1387.13 1216.51 L1387.72 1216.51 L1388.3 1216.51 L1388.89 1216.51 L1389.48 1216.51 L1390.06 1216.51 L1390.65 1216.51 L1391.24 1216.51 L1391.82 1216.51 L1392.41 1216.51 L1393 1216.51 L1393.58 1216.51 L1394.17 1216.51 L1394.75 1216.51 L1395.34 1216.51 L1395.93 1216.51 L1396.51 1216.51 L1397.1 1216.51 L1397.69 1216.51 L1398.27 1216.51 L1398.86 1216.51 L1399.45 1216.51 L1400.03 1216.51 L1400.62 1216.51 L1401.21 1216.51 L1401.79 1216.51 L1402.38 1216.51 L1402.96 1216.51 L1403.55 1216.51 L1404.14 1216.51 L1404.72 1216.51 L1405.31 1216.51 L1405.9 1216.51 L1406.48 1216.51 L1407.07 1216.51 L1407.66 1216.51 L1408.24 1216.51 L1408.83 1216.51 L1409.42 1216.51 L1410 1216.51 L1410.59 1216.51 L1411.17 1216.51 L1411.76 1216.51 L1412.35 1216.51 L1412.93 1216.51 L1413.52 1216.51 L1414.11 1216.51 L1414.69 1216.51 L1415.28 1216.51 L1415.87 1216.51 L1416.45 1216.51 L1417.04 1216.51 L1417.63 1216.51 L1418.21 1216.51 L1418.8 1216.51 L1419.38 1216.51 L1419.97 1216.51 L1420.56 1216.51 L1421.14 1216.51 L1421.73 1216.51 L1422.32 1216.51 L1422.9 1216.51 L1423.49 1216.51 L1424.08 1216.51 L1424.66 1216.51 L1425.25 1216.51 L1425.83 1216.51 L1426.42 1216.51 L1427.01 1216.51 L1427.59 1216.51 L1428.18 1216.51 L1428.77 1216.51 L1429.35 1216.51 L1429.94 1216.51 L1430.53 1216.51 L1431.11 1216.51 L1431.7 1216.51 L1432.29 1216.51 L1432.87 1216.51 L1433.46 1216.51 L1434.04 1216.51 L1434.63 1216.51 L1435.22 1216.51 L1435.8 1216.51 L1436.39 1216.51 L1436.98 1216.51 L1437.56 1216.51 L1438.15 1216.51 L1438.74 1216.51 L1439.32 1216.51 L1439.91 1216.51 L1440.5 1216.51 L1441.08 1216.51 L1441.67 1216.51 L1442.25 1216.51 L1442.84 1216.51 L1443.43 1216.51 L1444.01 1216.51 L1444.6 1216.51 L1445.19 1216.51 L1445.77 1216.51 L1446.36 1216.51 L1446.95 1216.51 L1447.53 1216.51 L1448.12 1216.51 L1448.7 1216.51 L1449.29 1216.51 L1449.88 1216.51 L1450.46 1216.51 L1451.05 1216.51 L1451.64 1216.51 L1452.22 1216.51 L1452.81 1216.51 L1453.4 1216.51 L1453.98 1216.51 L1454.57 1216.51 L1455.16 1216.51 L1455.74 1216.51 L1456.33 1216.51 L1456.91 1216.51 L1457.5 1216.51 L1458.09 1216.51 L1458.67 1216.51 L1459.26 1216.51 L1459.85 1216.51 L1460.43 1216.51 L1461.02 1216.51 L1461.61 1216.51 L1462.19 1216.51 L1462.78 1216.51 L1463.37 1216.51 L1463.95 1216.51 L1464.54 1216.51 L1465.12 1216.51 L1465.71 1216.51 L1466.3 1216.51 L1466.88 1216.51 L1467.47 1216.51 L1468.06 1216.51 L1468.64 1216.51 L1469.23 1216.51 L1469.82 1216.51 L1470.4 1216.51 L1470.99 1216.51 L1471.57 1216.51 L1472.16 1216.51 L1472.75 1216.51 L1473.33 1216.51 L1473.92 1216.51 L1474.51 1216.51 L1475.09 1216.51 L1475.68 1216.51 L1476.27 1216.51 L1476.85 1216.51 L1477.44 1216.51 L1478.03 1216.51 L1478.61 1216.51 L1479.2 1216.51 L1479.78 1216.51 L1480.37 1216.51 L1480.96 1216.51 L1481.54 1216.51 L1482.13 1216.51 L1482.72 1216.51 L1483.3 1216.51 L1483.89 1216.51 L1484.48 1216.51 L1485.06 1216.51 L1485.65 1216.51 L1486.24 1216.51 L1486.82 1216.51 L1487.41 1216.51 L1487.99 1216.51 L1488.58 1216.51 L1489.17 1216.51 L1489.75 1216.51 L1490.34 1216.51 L1490.93 1216.51 L1491.51 1216.51 L1492.1 1216.51 L1492.69 1216.51 L1493.27 1216.51 L1493.86 1216.51 L1494.45 1216.51 L1495.03 1216.51 L1495.62 1216.51 L1496.2 1216.51 L1496.79 1216.51 L1497.38 1216.51 L1497.96 1216.51 L1498.55 1216.51 L1499.14 1216.51 L1499.72 1216.51 L1500.31 1216.51 L1500.9 1216.51 L1501.48 1216.51 L1502.07 1216.51 L1502.65 1216.51 L1503.24 1216.51 L1503.83 1216.51 L1504.41 1216.51 L1505 1216.51 L1505.59 1216.51 L1506.17 1216.51 L1506.76 1216.51 L1507.35 1216.51 L1507.93 1216.51 L1508.52 1216.51 L1509.11 1216.51 L1509.69 1216.51 L1510.28 1216.51 L1510.86 1216.51 L1511.45 1216.51 L1512.04 1216.51 L1512.62 1216.51 L1513.21 1216.51 L1513.8 1216.51 L1514.38 1216.51 L1514.97 1216.51 L1515.56 1216.51 L1516.14 1216.51 L1516.73 1216.51 L1517.32 1216.51 L1517.9 1216.51 L1518.49 1216.51 L1519.07 1216.51 L1519.66 1216.51 L1520.25 1216.51 L1520.83 1216.51 L1521.42 1216.51 L1522.01 1216.51 L1522.59 1216.51 L1523.18 1216.51 L1523.77 1216.51 L1524.35 1216.51 L1524.94 1216.51 L1525.52 1216.51 L1526.11 1216.51 L1526.7 1216.51 L1527.28 1216.51 L1527.87 1216.51 L1528.46 1216.51 L1529.04 1216.51 L1529.63 1216.51 L1530.22 1216.51 L1530.8 1216.51 L1531.39 1216.51 L1531.98 1216.51 L1532.56 1216.51 L1533.15 1216.51 L1533.73 1216.51 L1534.32 1216.51 L1534.91 1216.51 L1535.49 1216.51 L1536.08 1216.51 L1536.67 1216.51 L1537.25 1216.51 L1537.84 1216.51 L1538.43 1216.51 L1539.01 1216.51 L1539.6 1216.51 L1540.19 1216.51 L1540.77 1216.51 L1541.36 1216.51 L1541.94 1216.51 L1542.53 1216.51 L1543.12 1216.51 L1543.7 1216.51 L1544.29 1216.51 L1544.88 1216.51 L1545.46 1216.51 L1546.05 1216.51 L1546.64 1216.51 L1547.22 1216.51 L1547.81 1216.51 L1548.4 1216.51 L1548.98 1216.51 L1549.57 1216.51 L1550.15 1216.51 L1550.74 1216.51 L1551.33 1216.51 L1551.91 1216.51 L1552.5 1216.51 L1553.09 1216.51 L1553.67 1216.51 L1554.26 1216.51 L1554.85 1216.51 L1555.43 1216.51 L1556.02 1216.51 L1556.6 1216.51 L1557.19 1216.51 L1557.78 1216.51 L1558.36 1216.51 L1558.95 1216.51 L1559.54 1216.51 L1560.12 1216.51 L1560.71 1216.51 L1561.3 1216.51 L1561.88 1216.51 L1562.47 1216.51 L1563.06 1216.51 L1563.64 1216.51 L1564.23 1216.51 L1564.81 1216.51 L1565.4 1216.51 L1565.99 1216.51 L1566.57 1216.51 L1567.16 1216.51 L1567.75 1216.51 L1568.33 1216.51 L1568.92 1216.51 L1569.51 1216.51 L1570.09 1216.51 L1570.68 1216.51 L1571.27 1216.51 L1571.85 1216.51 L1572.44 1216.51 L1573.02 1216.51 L1573.61 1216.51 L1574.2 1216.51 L1574.78 1216.51 L1575.37 1216.51 L1575.96 1216.51 L1576.54 1216.51 L1577.13 1216.51 L1577.72 1216.51 L1578.3 1216.51 L1578.89 1216.51 L1579.47 1216.51 L1580.06 1216.51 L1580.65 1216.51 L1581.23 1216.51 L1581.82 1216.51 L1582.41 1216.51 L1582.99 1216.51 L1583.58 1216.51 L1584.17 1216.51 L1584.75 1216.51 L1585.34 1216.51 L1585.93 1216.51 L1586.51 1216.51 L1587.1 1216.51 L1587.68 1216.51 L1588.27 1216.51 L1588.86 1216.51 L1589.44 1216.51 L1590.03 1216.51 L1590.62 1216.51 L1591.2 1216.51 L1591.79 1216.51 L1592.38 1216.51 L1592.96 1216.51 L1593.55 1216.51 L1594.14 1216.51 L1594.72 1216.51 L1595.31 1216.51 L1595.89 1216.51 L1596.48 1216.51 L1597.07 1216.51 L1597.65 1216.51 L1598.24 1216.51 L1598.83 1216.51 L1599.41 1216.51 L1600 1216.51 L1600.59 1216.51 L1601.17 1216.51 L1601.76 1216.51 L1602.34 1216.51 L1602.93 1216.51 L1603.52 1216.51 L1604.1 1216.51 L1604.69 1216.51 L1605.28 1216.51 L1605.86 1216.51 L1606.45 1216.51 L1607.04 1216.51 L1607.62 1216.51 L1608.21 1216.51 L1608.8 1216.51 L1609.38 1216.51 L1609.97 1216.51 L1610.55 1216.51 L1611.14 1216.51 L1611.73 1216.51 L1612.31 1216.51 L1612.9 1216.51 L1613.49 1216.51 L1614.07 1216.51 L1614.66 1216.51 L1615.25 1216.51 L1615.83 1216.51 L1616.42 1216.51 L1617.01 1216.51 L1617.59 1216.51 L1618.18 1216.51 L1618.76 1216.51 L1619.35 1216.51 L1619.94 1216.51 L1620.52 1216.51 L1621.11 1216.51 L1621.7 1216.51 L1622.28 1216.51 L1622.87 1216.51 L1623.46 1216.51 L1624.04 1216.51 L1624.63 1216.51 L1625.22 1216.51 L1625.8 1216.51 L1626.39 1216.51 L1626.97 1216.51 L1627.56 1216.51 L1628.15 1216.51 L1628.73 1216.51 L1629.32 1216.51 L1629.91 1216.51 L1630.49 1216.51 L1631.08 1216.51 L1631.67 1216.51 L1632.25 1216.51 L1632.84 1216.51 L1633.42 1216.51 L1634.01 1216.51 L1634.6 1216.51 L1635.18 1216.51 L1635.77 1216.51 L1636.36 1216.51 L1636.94 1216.51 L1637.53 1216.51 L1638.12 1216.51 L1638.7 1216.51 L1639.29 1216.51 L1639.88 1216.51 L1640.46 1216.51 L1641.05 1216.51 L1641.63 1216.51 L1642.22 1216.51 L1642.81 1216.51 L1643.39 1216.51 L1643.98 1216.51 L1644.57 1216.51 L1645.15 1216.51 L1645.74 1216.51 L1646.33 1216.51 L1646.91 1216.51 L1647.5 1216.51 L1648.09 1216.51 L1648.67 1216.51 L1649.26 1216.51 L1649.84 1216.51 L1650.43 1216.51 L1651.02 1216.51 L1651.6 1216.51 L1652.19 1216.51 L1652.78 1216.51 L1653.36 1216.51 L1653.95 1216.51 L1654.54 1216.51 L1655.12 1216.51 L1655.71 1216.51 L1656.29 1216.51 L1656.88 1216.51 L1657.47 1216.51 L1658.05 1216.51 L1658.64 1216.51 L1659.23 1216.51 L1659.81 1216.51 L1660.4 1216.51 L1660.99 1216.51 L1661.57 1216.51 L1662.16 1216.51 L1662.75 1216.51 L1663.33 1216.51 L1663.92 1216.51 L1664.5 1216.51 L1665.09 1216.51 L1665.68 1216.51 L1666.26 1216.51 L1666.85 1216.51 L1667.44 1216.51 L1668.02 1216.51 L1668.61 1216.51 L1669.2 1216.51 L1669.78 1216.51 L1670.37 1216.51 L1670.96 1216.51 L1671.54 1216.51 L1672.13 1216.51 L1672.71 1216.51 L1673.3 1216.51 L1673.89 1216.51 L1674.47 1216.51 L1675.06 1216.51 L1675.65 1216.51 L1676.23 1216.51 L1676.82 1216.51 L1677.41 1216.51 L1677.99 1216.51 L1678.58 1216.51 L1679.17 1216.51 L1679.75 1216.51 L1680.34 1216.51 L1680.92 1216.51 L1681.51 1216.51 L1682.1 1216.51 L1682.68 1216.51 L1683.27 1216.51 L1683.86 1216.51 L1684.44 1216.51 L1685.03 1216.51 L1685.62 1216.51 L1686.2 1216.51 L1686.79 1216.51 L1687.37 1216.51 L1687.96 1216.51 L1688.55 1216.51 L1689.13 1216.51 L1689.72 1216.51 L1690.31 1216.51 L1690.89 1216.51 L1691.48 1216.51 L1692.07 1216.51 L1692.65 1216.51 L1693.24 1216.51 L1693.83 1216.51 L1694.41 1216.51 L1695 1216.51 L1695.58 1216.51 L1696.17 1216.51 L1696.76 1216.51 L1697.34 1216.51 L1697.93 1216.51 L1698.52 1216.51 L1699.1 1216.51 L1699.69 1216.51 L1700.28 1216.51 L1700.86 1216.51 L1701.45 1216.51 L1702.04 1216.51 L1702.62 1216.51 L1703.21 1216.51 L1703.79 1216.51 L1704.38 1216.51 L1704.97 1216.51 L1705.55 1216.51 L1706.14 1216.51 L1706.73 1216.51 L1707.31 1216.51 L1707.9 1216.51 L1708.49 1216.51 L1709.07 1216.51 L1709.66 1216.51 L1710.24 1216.51 L1710.83 1216.51 L1711.42 1216.51 L1712 1216.51 L1712.59 1216.51 L1713.18 1216.51 L1713.76 1216.51 L1714.35 1216.51 L1714.94 1216.51 L1715.52 1216.51 L1716.11 1216.51 L1716.7 1216.51 L1717.28 1216.51 L1717.87 1216.51 L1718.45 1216.51 L1719.04 1216.51 L1719.63 1216.51 L1720.21 1216.51 L1720.8 1216.51 L1721.39 1216.51 L1721.97 1216.51 L1722.56 1216.51 L1723.15 1216.51 L1723.73 1216.51 L1724.32 1216.51 L1724.91 1216.51 L1725.49 1216.51 L1726.08 1216.51 L1726.66 1216.51 L1727.25 1216.51 L1727.84 1216.51 L1728.42 1216.51 L1729.01 1216.51 L1729.6 1216.51 L1730.18 1216.51 L1730.77 1216.51 L1731.36 1216.51 L1731.94 1216.51 L1732.53 1216.51 L1733.11 1216.51 L1733.7 1216.51 L1734.29 1216.51 L1734.87 1216.51 L1735.46 1216.51 L1736.05 1216.51 L1736.63 1216.51 L1737.22 1216.51 L1737.81 1216.51 L1738.39 1216.51 L1738.98 1216.51 L1739.57 1216.51 L1740.15 1216.51 L1740.74 1216.51 L1741.32 1216.51 L1741.91 1216.51 L1742.5 1216.51 L1743.08 1216.51 L1743.67 1216.51 L1744.26 1216.51 L1744.84 1216.51 L1745.43 1216.51 L1746.02 1216.51 L1746.6 1216.51 L1747.19 1216.51 L1747.78 1216.51 L1748.36 1216.51 L1748.95 1216.51 L1749.53 1216.51 L1750.12 1216.51 L1750.71 1216.51 L1751.29 1216.51 L1751.88 1216.51 L1752.47 1216.51 L1753.05 1216.51 L1753.64 1216.51 L1754.23 1216.51 L1754.81 1216.51 L1755.4 1216.51 L1755.99 1216.51 L1756.57 1216.51 L1757.16 1216.51 L1757.74 1216.51 L1758.33 1216.51 L1758.92 1216.51 L1759.5 1216.51 L1760.09 1216.51 L1760.68 1216.51 L1761.26 1216.51 L1761.85 1216.51 L1762.44 1216.51 L1763.02 1216.51 L1763.61 1216.51 L1764.19 1216.51 L1764.78 1216.51 L1765.37 1216.51 L1765.95 1216.51 L1766.54 1216.51 L1767.13 1216.51 L1767.71 1216.51 L1768.3 1216.51 L1768.89 1216.51 L1769.47 1216.51 L1770.06 1216.51 L1770.65 1216.51 L1771.23 1216.51 L1771.82 1216.51 L1772.4 1216.51 L1772.99 1216.51 L1773.58 1216.51 L1774.16 1216.51 L1774.75 1216.51 L1775.34 1216.51 L1775.92 1216.51 L1776.51 1216.51 L1777.1 1216.51 L1777.68 1216.51 L1778.27 1216.51 L1778.86 1216.51 L1779.44 1216.51 L1780.03 1216.51 L1780.61 1216.51 L1781.2 1216.51 L1781.79 1216.51 L1782.37 1216.51 L1782.96 1216.51 L1783.55 1216.51 L1784.13 1216.51 L1784.72 1216.51 L1785.31 1216.51 L1785.89 1216.51 L1786.48 1216.51 L1787.06 1216.51 L1787.65 1216.51 L1788.24 1216.51 L1788.82 1216.51 L1789.41 1216.51 L1790 1216.51 L1790.58 1216.51 L1791.17 1216.51 L1791.76 1216.51 L1792.34 1216.51 L1792.93 1216.51 L1793.52 1216.51 L1794.1 1216.51 L1794.69 1216.51 L1795.27 1216.51 L1795.86 1216.51 L1796.45 1216.51 L1797.03 1216.51 L1797.62 1216.51 L1798.21 1216.51 L1798.79 1216.51 L1799.38 1216.51 L1799.97 1216.51 L1800.55 1216.51 L1801.14 1216.51 L1801.73 1216.51 L1802.31 1216.51 L1802.9 1216.51 L1803.48 1216.51 L1804.07 1216.51 L1804.66 1216.51 L1805.24 1216.51 L1805.83 1216.51 L1806.42 1216.51 L1807 1216.51 L1807.59 1216.51 L1808.18 1216.51 L1808.76 1216.51 L1809.35 1216.51 L1809.94 1216.51 L1810.52 1216.51 L1811.11 1216.51 L1811.69 1216.51 L1812.28 1216.51 L1812.87 1216.51 L1813.45 1216.51 L1814.04 1216.51 L1814.63 1216.51 L1815.21 1216.51 L1815.8 1216.51 L1816.39 1216.51 L1816.97 1216.51 L1817.56 1216.51 L1818.14 1216.51 L1818.73 1216.51 L1819.32 1216.51 L1819.9 1216.51 L1820.49 1216.51 L1821.08 1216.51 L1821.66 1216.51 L1822.25 1216.51 L1822.84 1216.51 L1823.42 1216.51 L1824.01 1216.51 L1824.6 1216.51 L1825.18 1216.51 L1825.77 1216.51 L1826.35 1216.51 L1826.94 1216.51 L1827.53 1216.51 L1828.11 1216.51 L1828.7 1216.51 L1829.29 1216.51 L1829.87 1216.51 L1830.46 1216.51 L1831.05 1216.51 L1831.63 1216.51 L1832.22 1216.51 L1832.81 1216.51 L1833.39 1216.51 L1833.98 1216.51 L1834.56 1216.51 L1835.15 1216.51 L1835.74 1216.51 L1836.32 1216.51 L1836.91 1216.51 L1837.5 1216.51 L1838.08 1216.51 L1838.67 1216.51 L1839.26 1216.51 L1839.84 1216.51 L1840.43 1216.51 L1841.01 1216.51 L1841.6 1216.51 L1842.19 1216.51 L1842.77 1216.51 L1843.36 1216.51 L1843.95 1216.51 L1844.53 1216.51 L1845.12 1216.51 L1845.71 1216.51 L1846.29 1216.51 L1846.88 1216.51 L1847.47 1216.51 L1848.05 1216.51 L1848.64 1216.51 L1849.22 1216.51 L1849.81 1216.51 L1850.4 1216.51 L1850.98 1216.51 L1851.57 1216.51 L1852.16 1216.51 L1852.74 1216.51 L1853.33 1216.51 L1853.92 1216.51 L1854.5 1216.51 L1855.09 1216.51 L1855.68 1216.51 L1856.26 1216.51 L1856.85 1216.51 L1857.43 1216.51 L1858.02 1216.51 L1858.61 1216.51 L1859.19 1216.51 L1859.78 1216.51 L1860.37 1216.51 L1860.95 1216.51 L1861.54 1216.51 L1862.13 1216.51 L1862.71 1216.51 L1863.3 1216.51 L1863.88 1216.51 L1864.47 1216.51 L1865.06 1216.51 L1865.64 1216.51 L1866.23 1216.51 L1866.82 1216.51 L1867.4 1216.51 L1867.99 1216.51 L1868.58 1216.51 L1869.16 1216.51 L1869.75 1216.51 L1870.34 1216.51 L1870.92 1216.51 L1871.51 1216.51 L1872.09 1216.51 L1872.68 1216.51 L1873.27 1216.51 L1873.85 1216.51 L1874.44 1216.51 L1875.03 1216.51 L1875.61 1216.51 L1876.2 1216.51 L1876.79 1216.51 L1877.37 1216.51 L1877.96 1216.51 L1878.55 1216.51 L1879.13 1216.51 L1879.72 1216.51 L1880.3 1216.51 L1880.89 1216.51 L1881.48 1216.51 L1882.06 1216.51 L1882.65 1216.51 L1883.24 1216.51 L1883.82 1216.51 L1884.41 1216.51 L1885 1216.51 L1885.58 1216.51 L1886.17 1216.51 L1886.76 1216.51 L1887.34 1216.51 L1887.93 1216.51 L1888.51 1216.51 L1889.1 1216.51 L1889.69 1216.51 L1890.27 1216.51 L1890.86 1216.51 L1891.45 1216.51 L1892.03 1216.51 L1892.62 1216.51 L1893.21 1216.51 L1893.79 1216.51 L1894.38 1216.51 L1894.96 1216.51 L1895.55 1216.51 L1896.14 1216.51 L1896.72 1216.51 L1897.31 1216.51 L1897.9 1216.51 L1898.48 1216.51 L1899.07 1216.51 L1899.66 1216.51 L1900.24 1216.51 L1900.83 1216.51 L1901.42 1216.51 L1902 1216.51 L1902.59 1216.51 L1903.17 1216.51 L1903.76 1216.51 L1904.35 1216.51 L1904.93 1216.51 L1905.52 1216.51 L1906.11 1216.51 L1906.69 1216.51 L1907.28 1216.51 L1907.87 1216.51 L1908.45 1216.51 L1909.04 1216.51 L1909.63 1216.51 L1910.21 1216.51 L1910.8 1216.51 L1911.38 1216.51 L1911.97 1216.51 L1912.56 1216.51 L1913.14 1216.51 L1913.73 1216.51 L1914.32 1216.51 L1914.9 1216.51 L1915.49 1216.51 L1916.08 1216.51 L1916.66 1216.51 L1917.25 1216.51 L1917.83 1216.51 L1918.42 1216.51 L1919.01 1216.51 L1919.59 1216.51 L1920.18 1216.51 L1920.77 1216.51 L1921.35 1216.51 L1921.94 1216.51 L1922.53 1216.51 L1923.11 1216.51 L1923.7 1216.51 L1924.29 1216.51 L1924.87 1216.51 L1925.46 1216.51 L1926.04 1216.51 L1926.63 1216.51 L1927.22 1216.51 L1927.8 1216.51 L1928.39 1216.51 L1928.98 1216.51 L1929.56 1216.51 L1930.15 1216.51 L1930.74 1216.51 L1931.32 1216.51 L1931.91 1216.51 L1932.5 1216.51 L1933.08 1216.51 L1933.67 1216.51 L1934.25 1216.51 L1934.84 1216.51 L1935.43 1216.51 L1936.01 1216.51 L1936.6 1216.51 L1937.19 1216.51 L1937.77 1216.51 L1938.36 1216.51 L1938.95 1216.51 L1939.53 1216.51 L1940.12 1216.51 L1940.71 1216.51 L1941.29 1216.51 L1941.88 1216.51 L1942.46 1216.51 L1943.05 1216.51 L1943.64 1216.51 L1944.22 1216.51 L1944.81 1216.51 L1945.4 1216.51 L1945.98 1216.51 L1946.57 1216.51 L1947.16 1216.51 L1947.74 1216.51 L1948.33 1216.51 L1948.91 1216.51 L1949.5 1216.51 L1950.09 1216.51 L1950.67 1216.51 L1951.26 1216.51 L1951.85 1216.51 L1952.43 1216.51 L1953.02 1216.51 L1953.61 1216.51 L1954.19 1216.51 L1954.78 1216.51 L1955.37 1216.51 L1955.95 1216.51 L1956.54 1216.51 L1957.12 1216.51 L1957.71 1216.51 L1958.3 1216.51 L1958.88 1216.51 L1959.47 1216.51 L1960.06 1216.51 L1960.64 1216.51 L1961.23 1216.51 L1961.82 1216.51 L1962.4 1216.51 L1962.99 1216.51 L1963.58 1216.51 L1964.16 1216.51 L1964.75 1216.51 L1965.33 1216.51 L1965.92 1216.51 L1966.51 1216.51 L1967.09 1216.51 L1967.68 1216.51 L1968.27 1216.51 L1968.85 1216.51 L1969.44 1216.51 L1970.03 1216.51 L1970.61 1216.51 L1971.2 1216.51 L1971.78 1216.51 L1972.37 1216.51 L1972.96 1216.51 L1973.54 1216.51 L1974.13 1216.51 L1974.72 1216.51 L1975.3 1216.51 L1975.89 1216.51 L1976.48 1216.51 L1977.06 1216.51 L1977.65 1216.51 L1978.24 1216.51 L1978.82 1216.51 L1979.41 1216.51 L1979.99 1216.51 L1980.58 1216.51 L1981.17 1216.51 L1981.75 1216.51 L1982.34 1216.51 L1982.93 1216.51 L1983.51 1216.51 L1984.1 1216.51 L1984.69 1216.51 L1985.27 1216.51 L1985.86 1216.51 L1986.45 1216.51 L1987.03 1216.51 L1987.62 1216.51 L1988.2 1216.51 L1988.79 1216.51 L1989.38 1216.51 L1989.96 1216.51 L1990.55 1216.51 L1991.14 1216.51 L1991.72 1216.51 L1992.31 1216.51 L1992.9 1216.51 L1993.48 1216.51 L1994.07 1216.51 L1994.65 1216.51 L1995.24 1216.51 L1995.83 1216.51 L1996.41 1216.51 L1997 1216.51 L1997.59 1216.51 L1998.17 1216.51 L1998.76 1216.51 L1999.35 1216.51 L1999.93 1216.51 L2000.52 1216.51 L2001.11 1216.51 L2001.69 1216.51 L2002.28 1216.51 L2002.86 1216.51 L2003.45 1216.51 L2004.04 1216.51 L2004.62 1216.51 L2005.21 1216.51 L2005.8 1216.51 L2006.38 1216.51 L2006.97 1216.51 L2007.56 1216.51 L2008.14 1216.51 L2008.73 1216.51 L2009.32 1216.51 L2009.9 1216.51 L2010.49 1216.51 L2011.07 1216.51 L2011.66 1216.51 L2012.25 1216.51 L2012.83 1216.51 L2013.42 1216.51 L2014.01 1216.51 L2014.59 1216.51 L2015.18 1216.51 L2015.77 1216.51 L2016.35 1216.51 L2016.94 1216.51 L2017.53 1216.51 L2018.11 1216.51 L2018.7 1216.51 L2019.28 1216.51 L2019.87 1216.51 L2020.46 1216.51 L2021.04 1216.51 L2021.63 1216.51 L2022.22 1216.51 L2022.8 1216.51 L2023.39 1216.51 L2023.98 1216.51 L2024.56 1216.51 L2025.15 1216.51 L2025.73 1216.51 L2026.32 1216.51 L2026.91 1216.51 L2027.49 1216.51 L2028.08 1216.51 L2028.67 1216.51 L2029.25 1216.51 L2029.84 1216.51 L2030.43 1216.51 L2031.01 1216.51 L2031.6 1216.51 L2032.19 1216.51 L2032.77 1216.51 L2033.36 1216.51 L2033.94 1216.51 L2034.53 1216.51 L2035.12 1216.51 L2035.7 1216.51 L2036.29 1216.51 L2036.88 1216.51 L2037.46 1216.51 L2038.05 1216.51 L2038.64 1216.51 L2039.22 1216.51 L2039.81 1216.51 L2040.4 1216.51 L2040.98 1216.51 L2041.57 1216.51 L2042.15 1216.51 L2042.74 1216.51 L2043.33 1216.51 L2043.91 1216.51 L2044.5 1216.51 L2045.09 1216.51 L2045.67 1216.51 L2046.26 1216.51 L2046.85 1216.51 L2047.43 1216.51 L2048.02 1216.51 L2048.6 1216.51 L2049.19 1216.51 L2049.78 1216.51 L2050.36 1216.51 L2050.95 1216.51 L2051.54 1216.51 L2052.12 1216.51 L2052.71 1216.51 L2053.3 1216.51 L2053.88 1216.51 L2054.47 1216.51 L2055.06 1216.51 L2055.64 1216.51 L2056.23 1216.51 L2056.81 1216.51 L2057.4 1216.51 L2057.99 1216.51 L2058.57 1216.51 L2059.16 1216.51 L2059.75 1216.51 L2060.33 1216.51 L2060.92 1216.51 L2061.51 1216.51 L2062.09 1216.51 L2062.68 1216.51 L2063.27 1216.51 L2063.85 1216.51 L2064.44 1216.51 L2065.02 1216.51 L2065.61 1216.51 L2066.2 1216.51 L2066.78 1216.51 L2067.37 1216.51 L2067.96 1216.51 L2068.54 1216.51 L2069.13 1216.51 L2069.72 1216.51 L2070.3 1216.51 L2070.89 1216.51 L2071.48 1216.51 L2072.06 1216.51 L2072.65 1216.51 L2073.23 1216.51 L2073.82 1216.51 L2074.41 1216.51 L2074.99 1216.51 L2075.58 1216.51 L2076.17 1216.51 L2076.75 1216.51 L2077.34 1216.51 L2077.93 1216.51 L2078.51 1216.51 L2079.1 1216.51 L2079.68 1216.51 L2080.27 1216.51 L2080.86 1216.51 L2081.44 1216.51 L2082.03 1216.51 L2082.62 1216.51 L2083.2 1216.51 L2083.79 1216.51 L2084.38 1216.51 L2084.96 1216.51 L2085.55 1216.51 L2086.14 1216.51 L2086.72 1216.51 L2087.31 1216.51 L2087.89 1216.51 L2088.48 1216.51 L2089.07 1216.51 L2089.65 1216.51 L2090.24 1216.51 L2090.83 1216.51 L2091.41 1216.51 L2092 1216.51 L2092.59 1216.51 L2093.17 1216.51 L2093.76 1216.51 L2094.35 1216.51 L2094.93 1216.51 L2095.52 1216.51 L2096.1 1216.51 L2096.69 1216.51 L2097.28 1216.51 L2097.86 1216.51 L2098.45 1216.51 L2099.04 1216.51 L2099.62 1216.51 L2100.21 1216.51 L2100.8 1216.51 L2101.38 1216.51 L2101.97 1216.51 L2102.55 1216.51 L2103.14 1216.51 L2103.73 1216.51 L2104.31 1216.51 L2104.9 1216.51 L2105.49 1216.51 L2106.07 1216.51 L2106.66 1216.51 L2107.25 1216.51 L2107.83 1216.51 L2108.42 1216.51 L2109.01 1216.51 L2109.59 1216.51 L2110.18 1216.51 L2110.76 1216.51 L2111.35 1216.51 L2111.94 1216.51 L2112.52 1216.51 L2113.11 1216.51 L2113.7 1216.51 L2114.28 1216.51 L2114.87 1216.51 L2115.46 1216.51 L2116.04 1216.51 L2116.63 1216.51 L2117.22 1216.51 L2117.8 1216.51 L2118.39 1216.51 L2118.97 1216.51 L2119.56 1216.51 L2120.15 1216.51 L2120.73 1216.51 L2121.32 1216.51 L2121.91 1216.51 L2122.49 1216.51 L2123.08 1216.51 L2123.67 1216.51 L2124.25 1216.51 L2124.84 1216.51 L2125.42 1216.51 L2126.01 1216.51 L2126.6 1216.51 L2127.18 1216.51 L2127.77 1216.51 L2128.36 1216.51 L2128.94 1216.51 L2129.53 1216.51 L2130.12 1216.51 L2130.7 1216.51 L2131.29 1216.51 L2131.88 1216.51 L2132.46 1216.51 L2133.05 1216.51 L2133.63 1216.51 L2134.22 1216.51 L2134.81 1216.51 L2135.39 1216.51 L2135.98 1216.51 L2136.57 1216.51 L2137.15 1216.51 L2137.74 1216.51 L2138.33 1216.51 L2138.91 1216.51 L2139.5 1216.51 L2140.09 1216.51 L2140.67 1216.51 L2141.26 1216.51 L2141.84 1216.51 L2142.43 1216.51 L2143.02 1216.51 L2143.6 1216.51 L2144.19 1216.51 L2144.78 1216.51 L2145.36 1216.51 L2145.95 1216.51 L2146.54 1216.51 L2147.12 1216.51 L2147.71 1216.51 L2148.3 1216.51 L2148.88 1216.51 L2149.47 1216.51 L2150.05 1216.51 L2150.64 1216.51 L2151.23 1216.51 L2151.81 1216.51 L2152.4 1216.51 L2152.99 1216.51 L2153.57 1216.51 L2154.16 1216.51 L2154.75 1216.51 L2155.33 1216.51 L2155.92 1216.51 L2156.5 1216.51 L2157.09 1216.51 L2157.68 1216.51 L2158.26 1216.51 L2158.26 1216.34 L2157.68 1216.34 L2157.09 1216.34 L2156.5 1216.34 L2155.92 1216.34 L2155.33 1216.34 L2154.75 1216.34 L2154.16 1216.34 L2153.57 1216.34 L2152.99 1216.34 L2152.4 1216.34 L2151.81 1216.34 L2151.23 1216.34 L2150.64 1216.34 L2150.05 1216.34 L2149.47 1216.34 L2148.88 1216.34 L2148.3 1216.34 L2147.71 1216.34 L2147.12 1216.34 L2146.54 1216.34 L2145.95 1216.34 L2145.36 1216.34 L2144.78 1216.34 L2144.19 1216.34 L2143.6 1216.34 L2143.02 1216.34 L2142.43 1216.34 L2141.84 1216.34 L2141.26 1216.34 L2140.67 1216.34 L2140.09 1216.34 L2139.5 1216.34 L2138.91 1216.34 L2138.33 1216.34 L2137.74 1216.34 L2137.15 1216.34 L2136.57 1216.34 L2135.98 1216.34 L2135.39 1216.34 L2134.81 1216.34 L2134.22 1216.34 L2133.63 1216.34 L2133.05 1216.34 L2132.46 1216.34 L2131.88 1216.34 L2131.29 1216.34 L2130.7 1216.34 L2130.12 1216.34 L2129.53 1216.34 L2128.94 1216.34 L2128.36 1216.34 L2127.77 1216.34 L2127.18 1216.34 L2126.6 1216.34 L2126.01 1216.34 L2125.42 1216.34 L2124.84 1216.34 L2124.25 1216.34 L2123.67 1216.34 L2123.08 1216.34 L2122.49 1216.34 L2121.91 1216.34 L2121.32 1216.34 L2120.73 1216.34 L2120.15 1216.34 L2119.56 1216.34 L2118.97 1216.34 L2118.39 1216.34 L2117.8 1216.34 L2117.22 1216.34 L2116.63 1216.34 L2116.04 1216.34 L2115.46 1216.34 L2114.87 1216.34 L2114.28 1216.34 L2113.7 1216.34 L2113.11 1216.34 L2112.52 1216.34 L2111.94 1216.34 L2111.35 1216.34 L2110.76 1216.34 L2110.18 1216.34 L2109.59 1216.34 L2109.01 1216.34 L2108.42 1216.34 L2107.83 1216.34 L2107.25 1216.34 L2106.66 1216.34 L2106.07 1216.34 L2105.49 1216.34 L2104.9 1216.34 L2104.31 1216.34 L2103.73 1216.34 L2103.14 1216.34 L2102.55 1216.34 L2101.97 1216.34 L2101.38 1216.34 L2100.8 1216.34 L2100.21 1216.34 L2099.62 1216.34 L2099.04 1216.34 L2098.45 1216.34 L2097.86 1216.34 L2097.28 1216.34 L2096.69 1216.34 L2096.1 1216.34 L2095.52 1216.34 L2094.93 1216.34 L2094.35 1216.34 L2093.76 1216.34 L2093.17 1216.34 L2092.59 1216.34 L2092 1216.34 L2091.41 1216.34 L2090.83 1216.34 L2090.24 1216.34 L2089.65 1216.34 L2089.07 1216.34 L2088.48 1216.34 L2087.89 1216.34 L2087.31 1216.34 L2086.72 1216.34 L2086.14 1216.34 L2085.55 1216.34 L2084.96 1216.34 L2084.38 1216.34 L2083.79 1216.34 L2083.2 1216.34 L2082.62 1216.34 L2082.03 1216.34 L2081.44 1216.34 L2080.86 1216.34 L2080.27 1216.34 L2079.68 1216.34 L2079.1 1216.34 L2078.51 1216.34 L2077.93 1216.34 L2077.34 1216.34 L2076.75 1216.34 L2076.17 1216.34 L2075.58 1216.34 L2074.99 1216.34 L2074.41 1216.34 L2073.82 1216.34 L2073.23 1216.34 L2072.65 1216.34 L2072.06 1216.34 L2071.48 1216.34 L2070.89 1216.34 L2070.3 1216.34 L2069.72 1216.34 L2069.13 1216.34 L2068.54 1216.34 L2067.96 1216.34 L2067.37 1216.34 L2066.78 1216.34 L2066.2 1216.34 L2065.61 1216.34 L2065.02 1216.34 L2064.44 1216.34 L2063.85 1216.34 L2063.27 1216.34 L2062.68 1216.34 L2062.09 1216.34 L2061.51 1216.34 L2060.92 1216.34 L2060.33 1216.34 L2059.75 1216.34 L2059.16 1216.34 L2058.57 1216.34 L2057.99 1216.34 L2057.4 1216.34 L2056.81 1216.34 L2056.23 1216.34 L2055.64 1216.34 L2055.06 1216.34 L2054.47 1216.34 L2053.88 1216.34 L2053.3 1216.34 L2052.71 1216.34 L2052.12 1216.34 L2051.54 1216.34 L2050.95 1216.34 L2050.36 1216.34 L2049.78 1216.34 L2049.19 1216.34 L2048.6 1216.34 L2048.02 1216.34 L2047.43 1216.34 L2046.85 1216.34 L2046.26 1216.34 L2045.67 1216.34 L2045.09 1216.34 L2044.5 1216.34 L2043.91 1216.34 L2043.33 1216.34 L2042.74 1216.34 L2042.15 1216.34 L2041.57 1216.34 L2040.98 1216.34 L2040.4 1216.34 L2039.81 1216.34 L2039.22 1216.34 L2038.64 1216.34 L2038.05 1216.34 L2037.46 1216.34 L2036.88 1216.34 L2036.29 1216.34 L2035.7 1216.34 L2035.12 1216.34 L2034.53 1216.34 L2033.94 1216.34 L2033.36 1216.34 L2032.77 1216.34 L2032.19 1216.34 L2031.6 1216.34 L2031.01 1216.34 L2030.43 1216.34 L2029.84 1216.34 L2029.25 1216.34 L2028.67 1216.34 L2028.08 1216.34 L2027.49 1216.34 L2026.91 1216.34 L2026.32 1216.34 L2025.73 1216.34 L2025.15 1216.34 L2024.56 1216.34 L2023.98 1216.34 L2023.39 1216.34 L2022.8 1216.34 L2022.22 1216.34 L2021.63 1216.34 L2021.04 1216.34 L2020.46 1216.34 L2019.87 1216.34 L2019.28 1216.34 L2018.7 1216.34 L2018.11 1216.34 L2017.53 1216.34 L2016.94 1216.34 L2016.35 1216.34 L2015.77 1216.34 L2015.18 1216.34 L2014.59 1216.34 L2014.01 1216.34 L2013.42 1216.34 L2012.83 1216.34 L2012.25 1216.34 L2011.66 1216.34 L2011.07 1216.34 L2010.49 1216.34 L2009.9 1216.34 L2009.32 1216.34 L2008.73 1216.34 L2008.14 1216.34 L2007.56 1216.34 L2006.97 1216.34 L2006.38 1216.34 L2005.8 1216.34 L2005.21 1216.34 L2004.62 1216.34 L2004.04 1216.34 L2003.45 1216.34 L2002.86 1216.34 L2002.28 1216.34 L2001.69 1216.34 L2001.11 1216.34 L2000.52 1216.34 L1999.93 1216.34 L1999.35 1216.34 L1998.76 1216.34 L1998.17 1216.34 L1997.59 1216.34 L1997 1216.34 L1996.41 1216.34 L1995.83 1216.34 L1995.24 1216.34 L1994.65 1216.34 L1994.07 1216.34 L1993.48 1216.34 L1992.9 1216.34 L1992.31 1216.34 L1991.72 1216.34 L1991.14 1216.34 L1990.55 1216.34 L1989.96 1216.34 L1989.38 1216.34 L1988.79 1216.34 L1988.2 1216.34 L1987.62 1216.34 L1987.03 1216.34 L1986.45 1216.34 L1985.86 1216.34 L1985.27 1216.34 L1984.69 1216.34 L1984.1 1216.34 L1983.51 1216.34 L1982.93 1216.34 L1982.34 1216.34 L1981.75 1216.34 L1981.17 1216.34 L1980.58 1216.34 L1979.99 1216.34 L1979.41 1216.34 L1978.82 1216.34 L1978.24 1216.34 L1977.65 1216.34 L1977.06 1216.34 L1976.48 1216.34 L1975.89 1216.34 L1975.3 1216.34 L1974.72 1216.34 L1974.13 1216.34 L1973.54 1216.34 L1972.96 1216.34 L1972.37 1216.34 L1971.78 1216.34 L1971.2 1216.34 L1970.61 1216.34 L1970.03 1216.34 L1969.44 1216.34 L1968.85 1216.34 L1968.27 1216.34 L1967.68 1216.34 L1967.09 1216.34 L1966.51 1216.34 L1965.92 1216.34 L1965.33 1216.34 L1964.75 1216.34 L1964.16 1216.34 L1963.58 1216.34 L1962.99 1216.34 L1962.4 1216.34 L1961.82 1216.34 L1961.23 1216.34 L1960.64 1216.34 L1960.06 1216.34 L1959.47 1216.34 L1958.88 1216.34 L1958.3 1216.34 L1957.71 1216.34 L1957.12 1216.34 L1956.54 1216.34 L1955.95 1216.34 L1955.37 1216.34 L1954.78 1216.34 L1954.19 1216.34 L1953.61 1216.34 L1953.02 1216.34 L1952.43 1216.34 L1951.85 1216.34 L1951.26 1216.34 L1950.67 1216.34 L1950.09 1216.34 L1949.5 1216.34 L1948.91 1216.34 L1948.33 1216.34 L1947.74 1216.34 L1947.16 1216.34 L1946.57 1216.34 L1945.98 1216.34 L1945.4 1216.34 L1944.81 1216.34 L1944.22 1216.34 L1943.64 1216.34 L1943.05 1216.34 L1942.46 1216.34 L1941.88 1216.34 L1941.29 1216.34 L1940.71 1216.34 L1940.12 1216.34 L1939.53 1216.34 L1938.95 1216.34 L1938.36 1216.34 L1937.77 1216.34 L1937.19 1216.34 L1936.6 1216.34 L1936.01 1216.34 L1935.43 1216.34 L1934.84 1216.34 L1934.25 1216.34 L1933.67 1216.34 L1933.08 1216.34 L1932.5 1216.34 L1931.91 1216.34 L1931.32 1216.34 L1930.74 1216.34 L1930.15 1216.34 L1929.56 1216.34 L1928.98 1216.34 L1928.39 1216.34 L1927.8 1216.34 L1927.22 1216.34 L1926.63 1216.34 L1926.04 1216.34 L1925.46 1216.34 L1924.87 1216.34 L1924.29 1216.34 L1923.7 1216.34 L1923.11 1216.34 L1922.53 1216.34 L1921.94 1216.34 L1921.35 1216.34 L1920.77 1216.34 L1920.18 1216.34 L1919.59 1216.34 L1919.01 1216.34 L1918.42 1216.34 L1917.83 1216.34 L1917.25 1216.34 L1916.66 1216.34 L1916.08 1216.34 L1915.49 1216.34 L1914.9 1216.34 L1914.32 1216.34 L1913.73 1216.34 L1913.14 1216.34 L1912.56 1216.34 L1911.97 1216.34 L1911.38 1216.34 L1910.8 1216.34 L1910.21 1216.34 L1909.63 1216.34 L1909.04 1216.34 L1908.45 1216.34 L1907.87 1216.34 L1907.28 1216.34 L1906.69 1216.34 L1906.11 1216.34 L1905.52 1216.34 L1904.93 1216.34 L1904.35 1216.34 L1903.76 1216.34 L1903.17 1216.34 L1902.59 1216.34 L1902 1216.34 L1901.42 1216.34 L1900.83 1216.34 L1900.24 1216.34 L1899.66 1216.34 L1899.07 1216.34 L1898.48 1216.34 L1897.9 1216.34 L1897.31 1216.34 L1896.72 1216.34 L1896.14 1216.34 L1895.55 1216.34 L1894.96 1216.34 L1894.38 1216.34 L1893.79 1216.34 L1893.21 1216.34 L1892.62 1216.34 L1892.03 1216.34 L1891.45 1216.34 L1890.86 1216.34 L1890.27 1216.34 L1889.69 1216.34 L1889.1 1216.34 L1888.51 1216.34 L1887.93 1216.34 L1887.34 1216.34 L1886.76 1216.34 L1886.17 1216.34 L1885.58 1216.34 L1885 1216.34 L1884.41 1216.34 L1883.82 1216.34 L1883.24 1216.34 L1882.65 1216.34 L1882.06 1216.34 L1881.48 1216.34 L1880.89 1216.34 L1880.3 1216.34 L1879.72 1216.34 L1879.13 1216.34 L1878.55 1216.34 L1877.96 1216.34 L1877.37 1216.34 L1876.79 1216.34 L1876.2 1216.34 L1875.61 1216.34 L1875.03 1216.34 L1874.44 1216.34 L1873.85 1216.34 L1873.27 1216.34 L1872.68 1216.34 L1872.09 1216.34 L1871.51 1216.34 L1870.92 1216.34 L1870.34 1216.34 L1869.75 1216.34 L1869.16 1216.34 L1868.58 1216.34 L1867.99 1216.34 L1867.4 1216.34 L1866.82 1216.34 L1866.23 1216.34 L1865.64 1216.34 L1865.06 1216.34 L1864.47 1216.34 L1863.88 1216.34 L1863.3 1216.34 L1862.71 1216.34 L1862.13 1216.34 L1861.54 1216.34 L1860.95 1216.34 L1860.37 1216.34 L1859.78 1216.34 L1859.19 1216.34 L1858.61 1216.34 L1858.02 1216.34 L1857.43 1216.34 L1856.85 1216.34 L1856.26 1216.34 L1855.68 1216.34 L1855.09 1216.34 L1854.5 1216.34 L1853.92 1216.34 L1853.33 1216.34 L1852.74 1216.34 L1852.16 1216.34 L1851.57 1216.34 L1850.98 1216.34 L1850.4 1216.34 L1849.81 1216.34 L1849.22 1216.34 L1848.64 1216.34 L1848.05 1216.34 L1847.47 1216.34 L1846.88 1216.34 L1846.29 1216.34 L1845.71 1216.34 L1845.12 1216.34 L1844.53 1216.34 L1843.95 1216.34 L1843.36 1216.34 L1842.77 1216.34 L1842.19 1216.34 L1841.6 1216.34 L1841.01 1216.34 L1840.43 1216.34 L1839.84 1216.34 L1839.26 1216.34 L1838.67 1216.34 L1838.08 1216.34 L1837.5 1216.34 L1836.91 1216.34 L1836.32 1216.34 L1835.74 1216.34 L1835.15 1216.34 L1834.56 1216.34 L1833.98 1216.34 L1833.39 1216.34 L1832.81 1216.34 L1832.22 1216.34 L1831.63 1216.34 L1831.05 1216.34 L1830.46 1216.34 L1829.87 1216.34 L1829.29 1216.34 L1828.7 1216.34 L1828.11 1216.34 L1827.53 1216.34 L1826.94 1216.34 L1826.35 1216.34 L1825.77 1216.34 L1825.18 1216.34 L1824.6 1216.34 L1824.01 1216.34 L1823.42 1216.34 L1822.84 1216.34 L1822.25 1216.34 L1821.66 1216.34 L1821.08 1216.34 L1820.49 1216.34 L1819.9 1216.34 L1819.32 1216.34 L1818.73 1216.34 L1818.14 1216.34 L1817.56 1216.34 L1816.97 1216.34 L1816.39 1216.34 L1815.8 1216.34 L1815.21 1216.34 L1814.63 1216.34 L1814.04 1216.34 L1813.45 1216.34 L1812.87 1216.34 L1812.28 1216.34 L1811.69 1216.34 L1811.11 1216.34 L1810.52 1216.34 L1809.94 1216.34 L1809.35 1216.34 L1808.76 1216.34 L1808.18 1216.34 L1807.59 1216.34 L1807 1216.34 L1806.42 1216.34 L1805.83 1216.34 L1805.24 1216.34 L1804.66 1216.34 L1804.07 1216.34 L1803.48 1216.34 L1802.9 1216.34 L1802.31 1216.34 L1801.73 1216.34 L1801.14 1216.34 L1800.55 1216.34 L1799.97 1216.34 L1799.38 1216.34 L1798.79 1216.34 L1798.21 1216.34 L1797.62 1216.34 L1797.03 1216.34 L1796.45 1216.34 L1795.86 1216.34 L1795.27 1216.34 L1794.69 1216.34 L1794.1 1216.34 L1793.52 1216.34 L1792.93 1216.34 L1792.34 1216.34 L1791.76 1216.34 L1791.17 1216.34 L1790.58 1216.34 L1790 1216.34 L1789.41 1216.34 L1788.82 1216.34 L1788.24 1216.34 L1787.65 1216.34 L1787.06 1216.34 L1786.48 1216.34 L1785.89 1216.34 L1785.31 1216.34 L1784.72 1216.34 L1784.13 1216.34 L1783.55 1216.34 L1782.96 1216.34 L1782.37 1216.34 L1781.79 1216.34 L1781.2 1216.34 L1780.61 1216.34 L1780.03 1216.34 L1779.44 1216.34 L1778.86 1216.34 L1778.27 1216.34 L1777.68 1216.34 L1777.1 1216.34 L1776.51 1216.34 L1775.92 1216.34 L1775.34 1216.34 L1774.75 1216.34 L1774.16 1216.34 L1773.58 1216.34 L1772.99 1216.34 L1772.4 1216.34 L1771.82 1216.34 L1771.23 1216.34 L1770.65 1216.34 L1770.06 1216.34 L1769.47 1216.34 L1768.89 1216.34 L1768.3 1216.34 L1767.71 1216.34 L1767.13 1216.34 L1766.54 1216.34 L1765.95 1216.34 L1765.37 1216.34 L1764.78 1216.34 L1764.19 1216.34 L1763.61 1216.34 L1763.02 1216.34 L1762.44 1216.34 L1761.85 1216.34 L1761.26 1216.34 L1760.68 1216.34 L1760.09 1216.34 L1759.5 1216.34 L1758.92 1216.34 L1758.33 1216.34 L1757.74 1216.34 L1757.16 1216.34 L1756.57 1216.34 L1755.99 1216.34 L1755.4 1216.34 L1754.81 1216.34 L1754.23 1216.34 L1753.64 1216.34 L1753.05 1216.34 L1752.47 1216.34 L1751.88 1216.34 L1751.29 1216.34 L1750.71 1216.34 L1750.12 1216.34 L1749.53 1216.34 L1748.95 1216.34 L1748.36 1216.34 L1747.78 1216.34 L1747.19 1216.34 L1746.6 1216.34 L1746.02 1216.34 L1745.43 1216.34 L1744.84 1216.34 L1744.26 1216.34 L1743.67 1216.34 L1743.08 1216.34 L1742.5 1216.34 L1741.91 1216.34 L1741.32 1216.34 L1740.74 1216.34 L1740.15 1216.34 L1739.57 1216.34 L1738.98 1216.34 L1738.39 1216.34 L1737.81 1216.34 L1737.22 1216.34 L1736.63 1216.34 L1736.05 1216.34 L1735.46 1216.34 L1734.87 1216.34 L1734.29 1216.34 L1733.7 1216.34 L1733.11 1216.34 L1732.53 1216.34 L1731.94 1216.34 L1731.36 1216.34 L1730.77 1216.34 L1730.18 1216.34 L1729.6 1216.34 L1729.01 1216.34 L1728.42 1216.34 L1727.84 1216.34 L1727.25 1216.34 L1726.66 1216.34 L1726.08 1216.34 L1725.49 1216.34 L1724.91 1216.34 L1724.32 1216.34 L1723.73 1216.34 L1723.15 1216.34 L1722.56 1216.34 L1721.97 1216.34 L1721.39 1216.34 L1720.8 1216.34 L1720.21 1216.34 L1719.63 1216.34 L1719.04 1216.34 L1718.45 1216.34 L1717.87 1216.34 L1717.28 1216.34 L1716.7 1216.34 L1716.11 1216.34 L1715.52 1216.34 L1714.94 1216.34 L1714.35 1216.34 L1713.76 1216.34 L1713.18 1216.34 L1712.59 1216.34 L1712 1216.34 L1711.42 1216.34 L1710.83 1216.34 L1710.24 1216.34 L1709.66 1216.34 L1709.07 1216.34 L1708.49 1216.34 L1707.9 1216.34 L1707.31 1216.34 L1706.73 1216.34 L1706.14 1216.34 L1705.55 1216.34 L1704.97 1216.34 L1704.38 1216.34 L1703.79 1216.34 L1703.21 1216.34 L1702.62 1216.34 L1702.04 1216.34 L1701.45 1216.34 L1700.86 1216.34 L1700.28 1216.34 L1699.69 1216.34 L1699.1 1216.34 L1698.52 1216.34 L1697.93 1216.34 L1697.34 1216.34 L1696.76 1216.34 L1696.17 1216.34 L1695.58 1216.34 L1695 1216.34 L1694.41 1216.34 L1693.83 1216.34 L1693.24 1216.34 L1692.65 1216.34 L1692.07 1216.34 L1691.48 1216.34 L1690.89 1216.34 L1690.31 1216.34 L1689.72 1216.34 L1689.13 1216.34 L1688.55 1216.34 L1687.96 1216.34 L1687.37 1216.34 L1686.79 1216.34 L1686.2 1216.34 L1685.62 1216.34 L1685.03 1216.34 L1684.44 1216.34 L1683.86 1216.34 L1683.27 1216.34 L1682.68 1216.34 L1682.1 1216.34 L1681.51 1216.34 L1680.92 1216.34 L1680.34 1216.34 L1679.75 1216.34 L1679.17 1216.34 L1678.58 1216.34 L1677.99 1216.34 L1677.41 1216.34 L1676.82 1216.34 L1676.23 1216.34 L1675.65 1216.34 L1675.06 1216.34 L1674.47 1216.34 L1673.89 1216.34 L1673.3 1216.34 L1672.71 1216.34 L1672.13 1216.34 L1671.54 1216.34 L1670.96 1216.34 L1670.37 1216.34 L1669.78 1216.34 L1669.2 1216.34 L1668.61 1216.34 L1668.02 1216.34 L1667.44 1216.34 L1666.85 1216.34 L1666.26 1216.34 L1665.68 1216.34 L1665.09 1216.34 L1664.5 1216.34 L1663.92 1216.34 L1663.33 1216.34 L1662.75 1216.34 L1662.16 1216.34 L1661.57 1216.34 L1660.99 1216.34 L1660.4 1216.34 L1659.81 1216.34 L1659.23 1216.34 L1658.64 1216.34 L1658.05 1216.34 L1657.47 1216.34 L1656.88 1216.34 L1656.29 1216.34 L1655.71 1216.34 L1655.12 1216.34 L1654.54 1216.34 L1653.95 1216.34 L1653.36 1216.34 L1652.78 1216.34 L1652.19 1216.34 L1651.6 1216.34 L1651.02 1216.34 L1650.43 1216.34 L1649.84 1216.34 L1649.26 1216.34 L1648.67 1216.34 L1648.09 1216.34 L1647.5 1216.34 L1646.91 1216.34 L1646.33 1216.34 L1645.74 1216.34 L1645.15 1216.34 L1644.57 1216.34 L1643.98 1216.34 L1643.39 1216.34 L1642.81 1216.34 L1642.22 1216.34 L1641.63 1216.34 L1641.05 1216.34 L1640.46 1216.34 L1639.88 1216.34 L1639.29 1216.34 L1638.7 1216.34 L1638.12 1216.34 L1637.53 1216.34 L1636.94 1216.34 L1636.36 1216.34 L1635.77 1216.34 L1635.18 1216.34 L1634.6 1216.34 L1634.01 1216.34 L1633.42 1216.34 L1632.84 1216.34 L1632.25 1216.34 L1631.67 1216.34 L1631.08 1216.34 L1630.49 1216.34 L1629.91 1216.34 L1629.32 1216.34 L1628.73 1216.34 L1628.15 1216.34 L1627.56 1216.34 L1626.97 1216.34 L1626.39 1216.34 L1625.8 1216.34 L1625.22 1216.34 L1624.63 1216.34 L1624.04 1216.34 L1623.46 1216.34 L1622.87 1216.34 L1622.28 1216.34 L1621.7 1216.34 L1621.11 1216.34 L1620.52 1216.34 L1619.94 1216.34 L1619.35 1216.34 L1618.76 1216.34 L1618.18 1216.34 L1617.59 1216.34 L1617.01 1216.34 L1616.42 1216.34 L1615.83 1216.34 L1615.25 1216.34 L1614.66 1216.34 L1614.07 1216.34 L1613.49 1216.34 L1612.9 1216.34 L1612.31 1216.34 L1611.73 1216.34 L1611.14 1216.34 L1610.55 1216.34 L1609.97 1216.34 L1609.38 1216.34 L1608.8 1216.34 L1608.21 1216.34 L1607.62 1216.34 L1607.04 1216.34 L1606.45 1216.34 L1605.86 1216.34 L1605.28 1216.34 L1604.69 1216.34 L1604.1 1216.34 L1603.52 1216.34 L1602.93 1216.34 L1602.34 1216.34 L1601.76 1216.34 L1601.17 1216.34 L1600.59 1216.34 L1600 1216.34 L1599.41 1216.34 L1598.83 1216.34 L1598.24 1216.34 L1597.65 1216.34 L1597.07 1216.34 L1596.48 1216.34 L1595.89 1216.34 L1595.31 1216.34 L1594.72 1216.34 L1594.14 1216.34 L1593.55 1216.34 L1592.96 1216.34 L1592.38 1216.34 L1591.79 1216.34 L1591.2 1216.34 L1590.62 1216.34 L1590.03 1216.34 L1589.44 1216.34 L1588.86 1216.34 L1588.27 1216.34 L1587.68 1216.34 L1587.1 1216.34 L1586.51 1216.34 L1585.93 1216.34 L1585.34 1216.34 L1584.75 1216.34 L1584.17 1216.34 L1583.58 1216.34 L1582.99 1216.34 L1582.41 1216.34 L1581.82 1216.34 L1581.23 1216.34 L1580.65 1216.34 L1580.06 1216.34 L1579.47 1216.34 L1578.89 1216.34 L1578.3 1216.34 L1577.72 1216.34 L1577.13 1216.34 L1576.54 1216.34 L1575.96 1216.34 L1575.37 1216.34 L1574.78 1216.34 L1574.2 1216.34 L1573.61 1216.34 L1573.02 1216.34 L1572.44 1216.34 L1571.85 1216.34 L1571.27 1216.34 L1570.68 1216.34 L1570.09 1216.34 L1569.51 1216.34 L1568.92 1216.34 L1568.33 1216.34 L1567.75 1216.34 L1567.16 1216.34 L1566.57 1216.34 L1565.99 1216.34 L1565.4 1216.34 L1564.81 1216.34 L1564.23 1216.34 L1563.64 1216.34 L1563.06 1216.34 L1562.47 1216.34 L1561.88 1216.34 L1561.3 1216.34 L1560.71 1216.34 L1560.12 1216.34 L1559.54 1216.34 L1558.95 1216.34 L1558.36 1216.34 L1557.78 1216.34 L1557.19 1216.34 L1556.6 1216.34 L1556.02 1216.34 L1555.43 1216.34 L1554.85 1216.34 L1554.26 1216.34 L1553.67 1216.34 L1553.09 1216.34 L1552.5 1216.34 L1551.91 1216.34 L1551.33 1216.34 L1550.74 1216.34 L1550.15 1216.34 L1549.57 1216.34 L1548.98 1216.34 L1548.4 1216.34 L1547.81 1216.34 L1547.22 1216.34 L1546.64 1216.34 L1546.05 1216.34 L1545.46 1216.34 L1544.88 1216.34 L1544.29 1216.34 L1543.7 1216.34 L1543.12 1216.34 L1542.53 1216.34 L1541.94 1216.34 L1541.36 1216.34 L1540.77 1216.34 L1540.19 1216.34 L1539.6 1216.34 L1539.01 1216.34 L1538.43 1216.34 L1537.84 1216.34 L1537.25 1216.34 L1536.67 1216.34 L1536.08 1216.34 L1535.49 1216.34 L1534.91 1216.34 L1534.32 1216.34 L1533.73 1216.34 L1533.15 1216.34 L1532.56 1216.34 L1531.98 1216.34 L1531.39 1216.34 L1530.8 1216.34 L1530.22 1216.34 L1529.63 1216.34 L1529.04 1216.34 L1528.46 1216.34 L1527.87 1216.34 L1527.28 1216.34 L1526.7 1216.34 L1526.11 1216.34 L1525.52 1216.34 L1524.94 1216.34 L1524.35 1216.34 L1523.77 1216.34 L1523.18 1216.34 L1522.59 1216.34 L1522.01 1216.34 L1521.42 1216.34 L1520.83 1216.34 L1520.25 1216.34 L1519.66 1216.34 L1519.07 1216.34 L1518.49 1216.34 L1517.9 1216.34 L1517.32 1216.34 L1516.73 1216.34 L1516.14 1216.34 L1515.56 1216.34 L1514.97 1216.34 L1514.38 1216.34 L1513.8 1216.34 L1513.21 1216.34 L1512.62 1216.34 L1512.04 1216.34 L1511.45 1216.34 L1510.86 1216.34 L1510.28 1216.34 L1509.69 1216.34 L1509.11 1216.34 L1508.52 1216.34 L1507.93 1216.34 L1507.35 1216.34 L1506.76 1216.34 L1506.17 1216.34 L1505.59 1216.34 L1505 1216.34 L1504.41 1216.34 L1503.83 1216.34 L1503.24 1216.34 L1502.65 1216.34 L1502.07 1216.34 L1501.48 1216.34 L1500.9 1216.34 L1500.31 1216.34 L1499.72 1216.34 L1499.14 1216.34 L1498.55 1216.34 L1497.96 1216.34 L1497.38 1216.34 L1496.79 1216.34 L1496.2 1216.34 L1495.62 1216.34 L1495.03 1216.34 L1494.45 1216.34 L1493.86 1216.34 L1493.27 1216.34 L1492.69 1216.34 L1492.1 1216.34 L1491.51 1216.34 L1490.93 1216.34 L1490.34 1216.34 L1489.75 1216.34 L1489.17 1216.34 L1488.58 1216.34 L1487.99 1216.34 L1487.41 1216.34 L1486.82 1216.34 L1486.24 1216.34 L1485.65 1216.34 L1485.06 1216.34 L1484.48 1216.34 L1483.89 1216.34 L1483.3 1216.34 L1482.72 1216.34 L1482.13 1216.34 L1481.54 1216.34 L1480.96 1216.34 L1480.37 1216.34 L1479.78 1216.34 L1479.2 1216.34 L1478.61 1216.34 L1478.03 1216.34 L1477.44 1216.34 L1476.85 1216.34 L1476.27 1216.34 L1475.68 1216.34 L1475.09 1216.34 L1474.51 1216.34 L1473.92 1216.34 L1473.33 1216.34 L1472.75 1216.34 L1472.16 1216.34 L1471.57 1216.34 L1470.99 1216.34 L1470.4 1216.34 L1469.82 1216.34 L1469.23 1216.34 L1468.64 1216.34 L1468.06 1216.34 L1467.47 1216.34 L1466.88 1216.34 L1466.3 1216.34 L1465.71 1216.34 L1465.12 1216.34 L1464.54 1216.34 L1463.95 1216.34 L1463.37 1216.34 L1462.78 1216.34 L1462.19 1216.34 L1461.61 1216.34 L1461.02 1216.34 L1460.43 1216.34 L1459.85 1216.34 L1459.26 1216.34 L1458.67 1216.34 L1458.09 1216.34 L1457.5 1216.34 L1456.91 1216.34 L1456.33 1216.34 L1455.74 1216.34 L1455.16 1216.34 L1454.57 1216.34 L1453.98 1216.34 L1453.4 1216.34 L1452.81 1216.34 L1452.22 1216.34 L1451.64 1216.34 L1451.05 1216.34 L1450.46 1216.34 L1449.88 1216.34 L1449.29 1216.34 L1448.7 1216.34 L1448.12 1216.34 L1447.53 1216.34 L1446.95 1216.34 L1446.36 1216.34 L1445.77 1216.34 L1445.19 1216.34 L1444.6 1216.34 L1444.01 1216.34 L1443.43 1216.34 L1442.84 1216.34 L1442.25 1216.34 L1441.67 1216.34 L1441.08 1216.34 L1440.5 1216.34 L1439.91 1216.34 L1439.32 1216.34 L1438.74 1216.34 L1438.15 1216.34 L1437.56 1216.34 L1436.98 1216.34 L1436.39 1216.34 L1435.8 1216.34 L1435.22 1216.34 L1434.63 1216.34 L1434.04 1216.34 L1433.46 1216.34 L1432.87 1216.34 L1432.29 1216.34 L1431.7 1216.34 L1431.11 1216.34 L1430.53 1216.34 L1429.94 1216.34 L1429.35 1216.34 L1428.77 1216.34 L1428.18 1216.34 L1427.59 1216.34 L1427.01 1216.34 L1426.42 1216.34 L1425.83 1216.34 L1425.25 1216.34 L1424.66 1216.34 L1424.08 1216.34 L1423.49 1216.34 L1422.9 1216.34 L1422.32 1216.34 L1421.73 1216.34 L1421.14 1216.34 L1420.56 1216.34 L1419.97 1216.34 L1419.38 1216.34 L1418.8 1216.34 L1418.21 1216.34 L1417.63 1216.34 L1417.04 1216.34 L1416.45 1216.34 L1415.87 1216.34 L1415.28 1216.34 L1414.69 1216.34 L1414.11 1216.34 L1413.52 1216.34 L1412.93 1216.34 L1412.35 1216.34 L1411.76 1216.34 L1411.17 1216.34 L1410.59 1216.34 L1410 1216.34 L1409.42 1216.34 L1408.83 1216.34 L1408.24 1216.34 L1407.66 1216.34 L1407.07 1216.34 L1406.48 1216.34 L1405.9 1216.34 L1405.31 1216.34 L1404.72 1216.34 L1404.14 1216.34 L1403.55 1216.34 L1402.96 1216.34 L1402.38 1216.34 L1401.79 1216.34 L1401.21 1216.34 L1400.62 1216.34 L1400.03 1216.34 L1399.45 1216.34 L1398.86 1216.34 L1398.27 1216.34 L1397.69 1216.34 L1397.1 1216.34 L1396.51 1216.34 L1395.93 1216.34 L1395.34 1216.34 L1394.75 1216.34 L1394.17 1216.34 L1393.58 1216.34 L1393 1216.34 L1392.41 1216.34 L1391.82 1216.34 L1391.24 1216.34 L1390.65 1216.34 L1390.06 1216.34 L1389.48 1216.34 L1388.89 1216.34 L1388.3 1216.34 L1387.72 1216.34 L1387.13 1216.34 L1386.55 1216.34 L1385.96 1216.34 L1385.37 1216.34 L1384.79 1216.34 L1384.2 1216.34 L1383.61 1216.34 L1383.03 1216.34 L1382.44 1216.34 L1381.85 1216.34 L1381.27 1216.34 L1380.68 1216.34 L1380.09 1216.34 L1379.51 1216.34 L1378.92 1216.34 L1378.34 1216.34 L1377.75 1216.34 L1377.16 1216.34 L1376.58 1216.34 L1375.99 1216.34 L1375.4 1216.34 L1374.82 1216.34 L1374.23 1216.34 L1373.64 1216.34 L1373.06 1216.34 L1372.47 1216.34 L1371.88 1216.34 L1371.3 1216.34 L1370.71 1216.34 L1370.13 1216.34 L1369.54 1216.34 L1368.95 1216.34 L1368.37 1216.34 L1367.78 1216.34 L1367.19 1216.34 L1366.61 1216.34 L1366.02 1216.34 L1365.43 1216.34 L1364.85 1216.34 L1364.26 1216.34 L1363.68 1216.34 L1363.09 1216.34 L1362.5 1216.34 L1361.92 1216.34 L1361.33 1216.34 L1360.74 1216.34 L1360.16 1216.34 L1359.57 1216.34 L1358.98 1216.34 L1358.4 1216.34 L1357.81 1216.34 L1357.22 1216.34 L1356.64 1216.34 L1356.05 1216.34 L1355.47 1216.34 L1354.88 1216.34 L1354.29 1216.34 L1353.71 1216.34 L1353.12 1216.34 L1352.53 1216.34 L1351.95 1216.34 L1351.36 1216.34 L1350.77 1216.34 L1350.19 1216.34 L1349.6 1216.34 L1349.01 1216.34 L1348.43 1216.34 L1347.84 1216.34 L1347.26 1216.34 L1346.67 1216.34 L1346.08 1216.34 L1345.5 1216.34 L1344.91 1216.34 L1344.32 1216.34 L1343.74 1216.34 L1343.15 1216.34 L1342.56 1216.34 L1341.98 1216.34 L1341.39 1216.34 L1340.8 1216.34 L1340.22 1216.34 L1339.63 1216.34 L1339.05 1216.34 L1338.46 1216.34 L1337.87 1216.34 L1337.29 1216.34 L1336.7 1216.34 L1336.11 1216.34 L1335.53 1216.34 L1334.94 1216.34 L1334.35 1216.34 L1333.77 1216.34 L1333.18 1216.34 L1332.6 1216.34 L1332.01 1216.34 L1331.42 1216.34 L1330.84 1216.34 L1330.25 1216.34 L1329.66 1216.34 L1329.08 1216.34 L1328.49 1216.34 L1327.9 1216.34 L1327.32 1216.34 L1326.73 1216.34 L1326.14 1216.34 L1325.56 1216.34 L1324.97 1216.34 L1324.39 1216.34 L1323.8 1216.34 L1323.21 1216.34 L1322.63 1216.34 L1322.04 1216.34 L1321.45 1216.34 L1320.87 1216.34 L1320.28 1216.34 L1319.69 1216.34 L1319.11 1216.34 L1318.52 1216.34 L1317.93 1216.34 L1317.35 1216.34 L1316.76 1216.34 L1316.18 1216.34 L1315.59 1216.34 L1315 1216.34 L1314.42 1216.34 L1313.83 1216.34 L1313.24 1216.34 L1312.66 1216.34 L1312.07 1216.34 L1311.48 1216.34 L1310.9 1216.34 L1310.31 1216.34 L1309.73 1216.34 L1309.14 1216.34 L1308.55 1216.34 L1307.97 1216.34 L1307.38 1216.34 L1306.79 1216.34 L1306.21 1216.34 L1305.62 1216.34 L1305.03 1216.34 L1304.45 1216.34 L1303.86 1216.34 L1303.27 1216.34 L1302.69 1216.34 L1302.1 1216.34 L1301.52 1216.34 L1300.93 1216.34 L1300.34 1216.34 L1299.76 1216.34 L1299.17 1216.34 L1298.58 1216.34 L1298 1216.34 L1297.41 1216.34 L1296.82 1216.34 L1296.24 1216.34 L1295.65 1216.34 L1295.06 1216.34 L1294.48 1216.34 L1293.89 1216.34 L1293.31 1216.34 L1292.72 1216.34 L1292.13 1216.34 L1291.55 1216.34 L1290.96 1216.34 L1290.37 1216.34 L1289.79 1216.34 L1289.2 1216.34 L1288.61 1216.34 L1288.03 1216.34 L1287.44 1216.34 L1286.86 1216.34 L1286.27 1216.34 L1285.68 1216.34 L1285.1 1216.34 L1284.51 1216.34 L1283.92 1216.34 L1283.34 1216.34 L1282.75 1216.34 L1282.16 1216.34 L1281.58 1216.34 L1280.99 1216.34 L1280.4 1216.34 L1279.82 1216.34 L1279.23 1216.34 L1278.65 1216.34 L1278.06 1216.34 L1277.47 1216.34 L1276.89 1216.34 L1276.3 1216.34 L1275.71 1216.34 L1275.13 1216.34 L1274.54 1216.34 L1273.95 1216.34 L1273.37 1216.34 L1272.78 1216.34 L1272.19 1216.34 L1271.61 1216.34 L1271.02 1216.34 L1270.44 1216.34 L1269.85 1216.34 L1269.26 1216.34 L1268.68 1216.34 L1268.09 1216.34 L1267.5 1216.34 L1266.92 1216.34 L1266.33 1216.34 L1265.74 1216.34 L1265.16 1216.34 L1264.57 1216.34 L1263.98 1216.34 L1263.4 1216.34 L1262.81 1216.34 L1262.23 1216.34 L1261.64 1216.34 L1261.05 1216.34 L1260.47 1216.34 L1259.88 1216.34 L1259.29 1216.34 L1258.71 1216.34 L1258.12 1216.34 L1257.53 1216.34 L1256.95 1216.34 L1256.36 1216.34 L1255.78 1216.34 L1255.19 1216.34 L1254.6 1216.34 L1254.02 1216.34 L1253.43 1216.34 L1252.84 1216.34 L1252.26 1216.34 L1251.67 1216.34 L1251.08 1216.34 L1250.5 1216.34 L1249.91 1216.34 L1249.32 1216.34 L1248.74 1216.34 L1248.15 1216.34 L1247.57 1216.34 L1246.98 1216.34 L1246.39 1216.34 L1245.81 1216.34 L1245.22 1216.34 L1244.63 1216.34 L1244.05 1216.34 L1243.46 1216.34 L1242.87 1216.34 L1242.29 1216.34 L1241.7 1216.34 L1241.11 1216.34 L1240.53 1216.34 L1239.94 1216.34 L1239.36 1216.34 L1238.77 1216.34 L1238.18 1216.34 L1237.6 1216.34 L1237.01 1216.34 L1236.42 1216.34 L1235.84 1216.34 L1235.25 1216.34 L1234.66 1216.34 L1234.08 1216.34 L1233.49 1216.34 L1232.91 1216.34 L1232.32 1216.34 L1231.73 1216.34 L1231.15 1216.34 L1230.56 1216.34 L1229.97 1216.34 L1229.39 1216.34 L1228.8 1216.34 L1228.21 1216.34 L1227.63 1216.34 L1227.04 1216.34 L1226.45 1216.34 L1225.87 1216.34 L1225.28 1216.34 L1224.7 1216.34 L1224.11 1216.34 L1223.52 1216.34 L1222.94 1216.34 L1222.35 1216.34 L1221.76 1216.34 L1221.18 1216.34 L1220.59 1216.34 L1220 1216.34 L1219.42 1216.34 L1218.83 1216.34 L1218.24 1216.34 L1217.66 1216.34 L1217.07 1216.34 L1216.49 1216.34 L1215.9 1216.34 L1215.31 1216.34 L1214.73 1216.34 L1214.14 1216.34 L1213.55 1216.34 L1212.97 1216.34 L1212.38 1216.34 L1211.79 1216.34 L1211.21 1216.34 L1210.62 1216.34 L1210.03 1216.34 L1209.45 1216.34 L1208.86 1216.34 L1208.28 1216.34 L1207.69 1216.34 L1207.1 1216.34 L1206.52 1216.34 L1205.93 1216.34 L1205.34 1216.34 L1204.76 1216.34 L1204.17 1216.34 L1203.58 1216.34 L1203 1216.34 L1202.41 1216.34 L1201.83 1216.34 L1201.24 1216.34 L1200.65 1216.34 L1200.07 1216.34 L1199.48 1216.34 L1198.89 1216.34 L1198.31 1216.34 L1197.72 1216.34 L1197.13 1216.34 L1196.55 1216.34 L1195.96 1216.34 L1195.37 1216.34 L1194.79 1216.34 L1194.2 1216.34 L1193.62 1216.34 L1193.03 1216.34 L1192.44 1216.34 L1191.86 1216.34 L1191.27 1216.34 L1190.68 1216.34 L1190.1 1216.34 L1189.51 1216.34 L1188.92 1216.34 L1188.34 1216.34 L1187.75 1216.34 L1187.16 1216.34 L1186.58 1216.34 L1185.99 1216.34 L1185.41 1216.34 L1184.82 1216.34 L1184.23 1216.34 L1183.65 1216.34 L1183.06 1216.34 L1182.47 1216.34 L1181.89 1216.34 L1181.3 1216.34 L1180.71 1216.34 L1180.13 1216.34 L1179.54 1216.34 L1178.96 1216.34 L1178.37 1216.34 L1177.78 1216.34 L1177.2 1216.34 L1176.61 1216.34 L1176.02 1216.34 L1175.44 1216.34 L1174.85 1216.34 L1174.26 1216.34 L1173.68 1216.34 L1173.09 1216.34 L1172.5 1216.34 L1171.92 1216.34 L1171.33 1216.34 L1170.75 1216.34 L1170.16 1216.34 L1169.57 1216.34 L1168.99 1216.34 L1168.4 1216.34 L1167.81 1216.34 L1167.23 1216.34 L1166.64 1216.34 L1166.05 1216.34 L1165.47 1216.34 L1164.88 1216.34 L1164.29 1216.34 L1163.71 1216.34 L1163.12 1216.34 L1162.54 1216.34 L1161.95 1216.34 L1161.36 1216.34 L1160.78 1216.34 L1160.19 1216.34 L1159.6 1216.34 L1159.02 1216.34 L1158.43 1216.34 L1157.84 1216.34 L1157.26 1216.34 L1156.67 1216.34 L1156.09 1216.34 L1155.5 1216.34 L1154.91 1216.34 L1154.33 1216.34 L1153.74 1216.34 L1153.15 1216.34 L1152.57 1216.34 L1151.98 1216.34 L1151.39 1216.34 L1150.81 1216.34 L1150.22 1216.34 L1149.63 1216.34 L1149.05 1216.34 L1148.46 1216.34 L1147.88 1216.34 L1147.29 1216.34 L1146.7 1216.34 L1146.12 1216.34 L1145.53 1216.34 L1144.94 1216.34 L1144.36 1216.34 L1143.77 1216.34 L1143.18 1216.34 L1142.6 1216.34 L1142.01 1216.34 L1141.42 1216.34 L1140.84 1216.34 L1140.25 1216.34 L1139.67 1216.34 L1139.08 1216.34 L1138.49 1216.34 L1137.91 1216.34 L1137.32 1216.34 L1136.73 1216.34 L1136.15 1216.34 L1135.56 1216.34 L1134.97 1216.34 L1134.39 1216.34 L1133.8 1216.34 L1133.21 1216.34 L1132.63 1216.34 L1132.04 1216.34 L1131.46 1216.34 L1130.87 1216.34 L1130.28 1216.34 L1129.7 1216.34 L1129.11 1216.34 L1128.52 1216.34 L1127.94 1216.34 L1127.35 1216.34 L1126.76 1216.34 L1126.18 1216.34 L1125.59 1216.34 L1125.01 1216.34 L1124.42 1216.34 L1123.83 1216.34 L1123.25 1216.34 L1122.66 1216.34 L1122.07 1216.34 L1121.49 1216.34 L1120.9 1216.34 L1120.31 1216.34 L1119.73 1216.34 L1119.14 1216.34 L1118.55 1216.34 L1117.97 1216.34 L1117.38 1216.34 L1116.8 1216.34 L1116.21 1216.34 L1115.62 1216.34 L1115.04 1216.34 L1114.45 1216.34 L1113.86 1216.34 L1113.28 1216.34 L1112.69 1216.34 L1112.1 1216.34 L1111.52 1216.34 L1110.93 1216.34 L1110.34 1216.34 L1109.76 1216.34 L1109.17 1216.34 L1108.59 1216.34 L1108 1216.34 L1107.41 1216.34 L1106.83 1216.34 L1106.24 1216.34 L1105.65 1216.34 L1105.07 1216.34 L1104.48 1216.34 L1103.89 1216.34 L1103.31 1216.34 L1102.72 1216.34 L1102.14 1216.34 L1101.55 1216.34 L1100.96 1216.34 L1100.38 1216.34 L1099.79 1216.34 L1099.2 1216.34 L1098.62 1216.34 L1098.03 1216.34 L1097.44 1216.34 L1096.86 1216.34 L1096.27 1216.34 L1095.68 1216.34 L1095.1 1216.34 L1094.51 1216.34 L1093.93 1216.34 L1093.34 1216.34 L1092.75 1216.34 L1092.17 1216.34 L1091.58 1216.34 L1090.99 1216.34 L1090.41 1216.34 L1089.82 1216.34 L1089.23 1216.34 L1088.65 1216.34 L1088.06 1216.34 L1087.47 1216.34 L1086.89 1216.34 L1086.3 1216.34 L1085.72 1216.34 L1085.13 1216.34 L1084.54 1216.34 L1083.96 1216.34 L1083.37 1216.34 L1082.78 1216.34 L1082.2 1216.34 L1081.61 1216.34 L1081.02 1216.34 L1080.44 1216.34 L1079.85 1216.34 L1079.26 1216.34 L1078.68 1216.34 L1078.09 1216.34 L1077.51 1216.34 L1076.92 1216.34 L1076.33 1216.34 L1075.75 1216.34 L1075.16 1216.34 L1074.57 1216.34 L1073.99 1216.34 L1073.4 1216.34 L1072.81 1216.34 L1072.23 1216.34 L1071.64 1216.34 L1071.06 1216.34 L1070.47 1216.34 L1069.88 1216.34 L1069.3 1216.34 L1068.71 1216.34 L1068.12 1216.34 L1067.54 1216.34 L1066.95 1216.34 L1066.36 1216.34 L1065.78 1216.34 L1065.19 1216.34 L1064.6 1216.34 L1064.02 1216.34 L1063.43 1216.34 L1062.85 1216.34 L1062.26 1216.34 L1061.67 1216.34 L1061.09 1216.34 L1060.5 1216.34 L1059.91 1216.34 L1059.33 1216.34 L1058.74 1216.34 L1058.15 1216.34 L1057.57 1216.34 L1056.98 1216.34 L1056.39 1216.34 L1055.81 1216.34 L1055.22 1216.34 L1054.64 1216.34 L1054.05 1216.34 L1053.46 1216.34 L1052.88 1216.34 L1052.29 1216.34 L1051.7 1216.34 L1051.12 1216.34 L1050.53 1216.34 L1049.94 1216.34 L1049.36 1216.34 L1048.77 1216.34 L1048.19 1216.34 L1047.6 1216.34 L1047.01 1216.34 L1046.43 1216.34 L1045.84 1216.34 L1045.25 1216.34 L1044.67 1216.34 L1044.08 1216.34 L1043.49 1216.34 L1042.91 1216.34 L1042.32 1216.34 L1041.73 1216.34 L1041.15 1216.34 L1040.56 1216.34 L1039.98 1216.34 L1039.39 1216.34 L1038.8 1216.34 L1038.22 1216.34 L1037.63 1216.34 L1037.04 1216.34 L1036.46 1216.34 L1035.87 1216.34 L1035.28 1216.34 L1034.7 1216.34 L1034.11 1216.34 L1033.52 1216.34 L1032.94 1216.34 L1032.35 1216.34 L1031.77 1216.34 L1031.18 1216.34 L1030.59 1216.34 L1030.01 1216.34 L1029.42 1216.34 L1028.83 1216.34 L1028.25 1216.34 L1027.66 1216.34 L1027.07 1216.34 L1026.49 1216.34 L1025.9 1216.34 L1025.32 1216.34 L1024.73 1216.34 L1024.14 1216.34 L1023.56 1216.34 L1022.97 1216.34 L1022.38 1216.34 L1021.8 1216.34 L1021.21 1216.34 L1020.62 1216.34 L1020.04 1216.34 L1019.45 1216.34 L1018.86 1216.34 L1018.28 1216.34 L1017.69 1216.34 L1017.11 1216.34 L1016.52 1216.34 L1015.93 1216.34 L1015.35 1216.34 L1014.76 1216.34 L1014.17 1216.34 L1013.59 1216.34 L1013 1216.34 L1012.41 1216.34 L1011.83 1216.34 L1011.24 1216.34 L1010.65 1216.34 L1010.07 1216.34 L1009.48 1216.34 L1008.9 1216.34 L1008.31 1216.34 L1007.72 1216.34 L1007.14 1216.34 L1006.55 1216.34 L1005.96 1216.34 L1005.38 1216.34 L1004.79 1216.34 L1004.2 1216.34 L1003.62 1216.34 L1003.03 1216.34 L1002.44 1216.34 L1001.86 1216.34 L1001.27 1216.34 L1000.69 1216.34 L1000.1 1216.34 L999.513 1216.34 L998.926 1216.34 L998.34 1216.34 L997.754 1216.34 L997.167 1216.34 L996.581 1216.34 L995.994 1216.34 L995.408 1216.34 L994.822 1216.34 L994.235 1216.34 L993.649 1216.34 L993.062 1216.34 L992.476 1216.34 L991.889 1216.34 L991.303 1216.34 L990.717 1216.34 L990.13 1216.34 L989.544 1216.34 L988.957 1216.34 L988.371 1216.34 L987.785 1216.34 L987.198 1216.34 L986.612 1216.34 L986.025 1216.34  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip762)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1216.43 986.612,1216.43 987.198,1216.43 987.785,1216.43 988.371,1216.43 988.957,1216.43 989.544,1216.43 990.13,1216.43 990.717,1216.43 991.303,1216.43 991.889,1216.43 992.476,1216.43 993.062,1216.43 993.649,1216.43 994.235,1216.43 994.822,1216.43 995.408,1216.43 995.994,1216.43 996.581,1216.43 997.167,1216.43 997.754,1216.43 998.34,1216.43 998.926,1216.43 999.513,1216.43 1000.1,1216.43 1000.69,1216.43 1001.27,1216.43 1001.86,1216.43 1002.44,1216.43 1003.03,1216.43 1003.62,1216.43 1004.2,1216.43 1004.79,1216.43 1005.38,1216.43 1005.96,1216.43 1006.55,1216.43 1007.14,1216.43 1007.72,1216.43 1008.31,1216.43 1008.9,1216.43 1009.48,1216.43 1010.07,1216.43 1010.65,1216.43 1011.24,1216.43 1011.83,1216.43 1012.41,1216.43 1013,1216.43 1013.59,1216.43 1014.17,1216.43 1014.76,1216.43 1015.35,1216.43 1015.93,1216.43 1016.52,1216.43 1017.11,1216.43 1017.69,1216.43 1018.28,1216.43 1018.86,1216.43 1019.45,1216.43 1020.04,1216.43 1020.62,1216.43 1021.21,1216.43 1021.8,1216.43 1022.38,1216.43 1022.97,1216.43 1023.56,1216.43 1024.14,1216.43 1024.73,1216.43 1025.32,1216.43 1025.9,1216.43 1026.49,1216.43 1027.07,1216.43 1027.66,1216.43 1028.25,1216.43 1028.83,1216.43 1029.42,1216.43 1030.01,1216.43 1030.59,1216.43 1031.18,1216.43 1031.77,1216.43 1032.35,1216.43 1032.94,1216.43 1033.52,1216.43 1034.11,1216.43 1034.7,1216.43 1035.28,1216.43 1035.87,1216.43 1036.46,1216.43 1037.04,1216.43 1037.63,1216.43 1038.22,1216.43 1038.8,1216.43 1039.39,1216.43 1039.98,1216.43 1040.56,1216.43 1041.15,1216.43 1041.73,1216.43 1042.32,1216.43 1042.91,1216.43 1043.49,1216.43 1044.08,1216.43 1044.67,1216.43 1045.25,1216.43 1045.84,1216.43 1046.43,1216.43 1047.01,1216.43 1047.6,1216.43 1048.19,1216.43 1048.77,1216.43 1049.36,1216.43 1049.94,1216.43 1050.53,1216.43 1051.12,1216.43 1051.7,1216.43 1052.29,1216.43 1052.88,1216.43 1053.46,1216.43 1054.05,1216.43 1054.64,1216.43 1055.22,1216.43 1055.81,1216.43 1056.39,1216.43 1056.98,1216.43 1057.57,1216.43 1058.15,1216.43 1058.74,1216.43 1059.33,1216.43 1059.91,1216.43 1060.5,1216.43 1061.09,1216.43 1061.67,1216.43 1062.26,1216.43 1062.85,1216.43 1063.43,1216.43 1064.02,1216.43 1064.6,1216.43 1065.19,1216.43 1065.78,1216.43 1066.36,1216.43 1066.95,1216.43 1067.54,1216.43 1068.12,1216.43 1068.71,1216.43 1069.3,1216.43 1069.88,1216.43 1070.47,1216.43 1071.06,1216.43 1071.64,1216.43 1072.23,1216.43 1072.81,1216.43 1073.4,1216.43 1073.99,1216.43 1074.57,1216.43 1075.16,1216.43 1075.75,1216.43 1076.33,1216.43 1076.92,1216.43 1077.51,1216.43 1078.09,1216.43 1078.68,1216.43 1079.26,1216.43 1079.85,1216.43 1080.44,1216.43 1081.02,1216.43 1081.61,1216.43 1082.2,1216.43 1082.78,1216.43 1083.37,1216.43 1083.96,1216.43 1084.54,1216.43 1085.13,1216.43 1085.72,1216.43 1086.3,1216.43 1086.89,1216.43 1087.47,1216.43 1088.06,1216.43 1088.65,1216.43 1089.23,1216.43 1089.82,1216.43 1090.41,1216.43 1090.99,1216.43 1091.58,1216.43 1092.17,1216.43 1092.75,1216.43 1093.34,1216.43 1093.93,1216.43 1094.51,1216.43 1095.1,1216.43 1095.68,1216.43 1096.27,1216.43 1096.86,1216.43 1097.44,1216.43 1098.03,1216.43 1098.62,1216.43 1099.2,1216.43 1099.79,1216.43 1100.38,1216.43 1100.96,1216.43 1101.55,1216.43 1102.14,1216.43 1102.72,1216.43 1103.31,1216.43 1103.89,1216.43 1104.48,1216.43 1105.07,1216.43 1105.65,1216.43 1106.24,1216.43 1106.83,1216.43 1107.41,1216.43 1108,1216.43 1108.59,1216.43 1109.17,1216.43 1109.76,1216.43 1110.34,1216.43 1110.93,1216.43 1111.52,1216.43 1112.1,1216.43 1112.69,1216.43 1113.28,1216.43 1113.86,1216.43 1114.45,1216.43 1115.04,1216.43 1115.62,1216.43 1116.21,1216.43 1116.8,1216.43 1117.38,1216.43 1117.97,1216.43 1118.55,1216.43 1119.14,1216.43 1119.73,1216.43 1120.31,1216.43 1120.9,1216.43 1121.49,1216.43 1122.07,1216.43 1122.66,1216.43 1123.25,1216.43 1123.83,1216.43 1124.42,1216.43 1125.01,1216.43 1125.59,1216.43 1126.18,1216.43 1126.76,1216.43 1127.35,1216.43 1127.94,1216.43 1128.52,1216.43 1129.11,1216.43 1129.7,1216.43 1130.28,1216.43 1130.87,1216.43 1131.46,1216.43 1132.04,1216.43 1132.63,1216.43 1133.21,1216.43 1133.8,1216.43 1134.39,1216.43 1134.97,1216.43 1135.56,1216.43 1136.15,1216.43 1136.73,1216.43 1137.32,1216.43 1137.91,1216.43 1138.49,1216.43 1139.08,1216.43 1139.67,1216.43 1140.25,1216.43 1140.84,1216.43 1141.42,1216.43 1142.01,1216.43 1142.6,1216.43 1143.18,1216.43 1143.77,1216.43 1144.36,1216.43 1144.94,1216.43 1145.53,1216.43 1146.12,1216.43 1146.7,1216.43 1147.29,1216.43 1147.88,1216.43 1148.46,1216.43 1149.05,1216.43 1149.63,1216.43 1150.22,1216.43 1150.81,1216.43 1151.39,1216.43 1151.98,1216.43 1152.57,1216.43 1153.15,1216.43 1153.74,1216.43 1154.33,1216.43 1154.91,1216.43 1155.5,1216.43 1156.09,1216.43 1156.67,1216.43 1157.26,1216.43 1157.84,1216.43 1158.43,1216.43 1159.02,1216.43 1159.6,1216.43 1160.19,1216.43 1160.78,1216.43 1161.36,1216.43 1161.95,1216.43 1162.54,1216.43 1163.12,1216.43 1163.71,1216.43 1164.29,1216.43 1164.88,1216.43 1165.47,1216.43 1166.05,1216.43 1166.64,1216.43 1167.23,1216.43 1167.81,1216.43 1168.4,1216.43 1168.99,1216.43 1169.57,1216.43 1170.16,1216.43 1170.75,1216.43 1171.33,1216.43 1171.92,1216.43 1172.5,1216.43 1173.09,1216.43 1173.68,1216.43 1174.26,1216.43 1174.85,1216.43 1175.44,1216.43 1176.02,1216.43 1176.61,1216.43 1177.2,1216.43 1177.78,1216.43 1178.37,1216.43 1178.96,1216.43 1179.54,1216.43 1180.13,1216.43 1180.71,1216.43 1181.3,1216.43 1181.89,1216.43 1182.47,1216.43 1183.06,1216.43 1183.65,1216.43 1184.23,1216.43 1184.82,1216.43 1185.41,1216.43 1185.99,1216.43 1186.58,1216.43 1187.16,1216.43 1187.75,1216.43 1188.34,1216.43 1188.92,1216.43 1189.51,1216.43 1190.1,1216.43 1190.68,1216.43 1191.27,1216.43 1191.86,1216.43 1192.44,1216.43 1193.03,1216.43 1193.62,1216.43 1194.2,1216.43 1194.79,1216.43 1195.37,1216.43 1195.96,1216.43 1196.55,1216.43 1197.13,1216.43 1197.72,1216.43 1198.31,1216.43 1198.89,1216.43 1199.48,1216.43 1200.07,1216.43 1200.65,1216.43 1201.24,1216.43 1201.83,1216.43 1202.41,1216.43 1203,1216.43 1203.58,1216.43 1204.17,1216.43 1204.76,1216.43 1205.34,1216.43 1205.93,1216.43 1206.52,1216.43 1207.1,1216.43 1207.69,1216.43 1208.28,1216.43 1208.86,1216.43 1209.45,1216.43 1210.03,1216.43 1210.62,1216.43 1211.21,1216.43 1211.79,1216.43 1212.38,1216.43 1212.97,1216.43 1213.55,1216.43 1214.14,1216.43 1214.73,1216.43 1215.31,1216.43 1215.9,1216.43 1216.49,1216.43 1217.07,1216.43 1217.66,1216.43 1218.24,1216.43 1218.83,1216.43 1219.42,1216.43 1220,1216.43 1220.59,1216.43 1221.18,1216.43 1221.76,1216.43 1222.35,1216.43 1222.94,1216.43 1223.52,1216.43 1224.11,1216.43 1224.7,1216.43 1225.28,1216.43 1225.87,1216.43 1226.45,1216.43 1227.04,1216.43 1227.63,1216.43 1228.21,1216.43 1228.8,1216.43 1229.39,1216.43 1229.97,1216.43 1230.56,1216.43 1231.15,1216.43 1231.73,1216.43 1232.32,1216.43 1232.91,1216.43 1233.49,1216.43 1234.08,1216.43 1234.66,1216.43 1235.25,1216.43 1235.84,1216.43 1236.42,1216.43 1237.01,1216.43 1237.6,1216.43 1238.18,1216.43 1238.77,1216.43 1239.36,1216.43 1239.94,1216.43 1240.53,1216.43 1241.11,1216.43 1241.7,1216.43 1242.29,1216.43 1242.87,1216.43 1243.46,1216.43 1244.05,1216.43 1244.63,1216.43 1245.22,1216.43 1245.81,1216.43 1246.39,1216.43 1246.98,1216.43 1247.57,1216.43 1248.15,1216.43 1248.74,1216.43 1249.32,1216.43 1249.91,1216.43 1250.5,1216.43 1251.08,1216.43 1251.67,1216.43 1252.26,1216.43 1252.84,1216.43 1253.43,1216.43 1254.02,1216.43 1254.6,1216.43 1255.19,1216.43 1255.78,1216.43 1256.36,1216.43 1256.95,1216.43 1257.53,1216.43 1258.12,1216.43 1258.71,1216.43 1259.29,1216.43 1259.88,1216.43 1260.47,1216.43 1261.05,1216.43 1261.64,1216.43 1262.23,1216.43 1262.81,1216.43 1263.4,1216.43 1263.98,1216.43 1264.57,1216.43 1265.16,1216.43 1265.74,1216.43 1266.33,1216.43 1266.92,1216.43 1267.5,1216.43 1268.09,1216.43 1268.68,1216.43 1269.26,1216.43 1269.85,1216.43 1270.44,1216.43 1271.02,1216.43 1271.61,1216.43 1272.19,1216.43 1272.78,1216.43 1273.37,1216.43 1273.95,1216.43 1274.54,1216.43 1275.13,1216.43 1275.71,1216.43 1276.3,1216.43 1276.89,1216.43 1277.47,1216.43 1278.06,1216.43 1278.65,1216.43 1279.23,1216.43 1279.82,1216.43 1280.4,1216.43 1280.99,1216.43 1281.58,1216.43 1282.16,1216.43 1282.75,1216.43 1283.34,1216.43 1283.92,1216.43 1284.51,1216.43 1285.1,1216.43 1285.68,1216.43 1286.27,1216.43 1286.86,1216.43 1287.44,1216.43 1288.03,1216.43 1288.61,1216.43 1289.2,1216.43 1289.79,1216.43 1290.37,1216.43 1290.96,1216.43 1291.55,1216.43 1292.13,1216.43 1292.72,1216.43 1293.31,1216.43 1293.89,1216.43 1294.48,1216.43 1295.06,1216.43 1295.65,1216.43 1296.24,1216.43 1296.82,1216.43 1297.41,1216.43 1298,1216.43 1298.58,1216.43 1299.17,1216.43 1299.76,1216.43 1300.34,1216.43 1300.93,1216.43 1301.52,1216.43 1302.1,1216.43 1302.69,1216.43 1303.27,1216.43 1303.86,1216.43 1304.45,1216.43 1305.03,1216.43 1305.62,1216.43 1306.21,1216.43 1306.79,1216.43 1307.38,1216.43 1307.97,1216.43 1308.55,1216.43 1309.14,1216.43 1309.73,1216.43 1310.31,1216.43 1310.9,1216.43 1311.48,1216.43 1312.07,1216.43 1312.66,1216.43 1313.24,1216.43 1313.83,1216.43 1314.42,1216.43 1315,1216.43 1315.59,1216.43 1316.18,1216.43 1316.76,1216.43 1317.35,1216.43 1317.93,1216.43 1318.52,1216.43 1319.11,1216.43 1319.69,1216.43 1320.28,1216.43 1320.87,1216.43 1321.45,1216.43 1322.04,1216.43 1322.63,1216.43 1323.21,1216.43 1323.8,1216.43 1324.39,1216.43 1324.97,1216.43 1325.56,1216.43 1326.14,1216.43 1326.73,1216.43 1327.32,1216.43 1327.9,1216.43 1328.49,1216.43 1329.08,1216.43 1329.66,1216.43 1330.25,1216.43 1330.84,1216.43 1331.42,1216.43 1332.01,1216.43 1332.6,1216.43 1333.18,1216.43 1333.77,1216.43 1334.35,1216.43 1334.94,1216.43 1335.53,1216.43 1336.11,1216.43 1336.7,1216.43 1337.29,1216.43 1337.87,1216.43 1338.46,1216.43 1339.05,1216.43 1339.63,1216.43 1340.22,1216.43 1340.8,1216.43 1341.39,1216.43 1341.98,1216.43 1342.56,1216.43 1343.15,1216.43 1343.74,1216.43 1344.32,1216.43 1344.91,1216.43 1345.5,1216.43 1346.08,1216.43 1346.67,1216.43 1347.26,1216.43 1347.84,1216.43 1348.43,1216.43 1349.01,1216.43 1349.6,1216.43 1350.19,1216.43 1350.77,1216.43 1351.36,1216.43 1351.95,1216.43 1352.53,1216.43 1353.12,1216.43 1353.71,1216.43 1354.29,1216.43 1354.88,1216.43 1355.47,1216.43 1356.05,1216.43 1356.64,1216.43 1357.22,1216.43 1357.81,1216.43 1358.4,1216.43 1358.98,1216.43 1359.57,1216.43 1360.16,1216.43 1360.74,1216.43 1361.33,1216.43 1361.92,1216.43 1362.5,1216.43 1363.09,1216.43 1363.68,1216.43 1364.26,1216.43 1364.85,1216.43 1365.43,1216.43 1366.02,1216.43 1366.61,1216.43 1367.19,1216.43 1367.78,1216.43 1368.37,1216.43 1368.95,1216.43 1369.54,1216.43 1370.13,1216.43 1370.71,1216.43 1371.3,1216.43 1371.88,1216.43 1372.47,1216.43 1373.06,1216.43 1373.64,1216.43 1374.23,1216.43 1374.82,1216.43 1375.4,1216.43 1375.99,1216.43 1376.58,1216.43 1377.16,1216.43 1377.75,1216.43 1378.34,1216.43 1378.92,1216.43 1379.51,1216.43 1380.09,1216.43 1380.68,1216.43 1381.27,1216.43 1381.85,1216.43 1382.44,1216.43 1383.03,1216.43 1383.61,1216.43 1384.2,1216.43 1384.79,1216.43 1385.37,1216.43 1385.96,1216.43 1386.55,1216.43 1387.13,1216.43 1387.72,1216.43 1388.3,1216.43 1388.89,1216.43 1389.48,1216.43 1390.06,1216.43 1390.65,1216.43 1391.24,1216.43 1391.82,1216.43 1392.41,1216.43 1393,1216.43 1393.58,1216.43 1394.17,1216.43 1394.75,1216.43 1395.34,1216.43 1395.93,1216.43 1396.51,1216.43 1397.1,1216.43 1397.69,1216.43 1398.27,1216.43 1398.86,1216.43 1399.45,1216.43 1400.03,1216.43 1400.62,1216.43 1401.21,1216.43 1401.79,1216.43 1402.38,1216.43 1402.96,1216.43 1403.55,1216.43 1404.14,1216.43 1404.72,1216.43 1405.31,1216.43 1405.9,1216.43 1406.48,1216.43 1407.07,1216.43 1407.66,1216.43 1408.24,1216.43 1408.83,1216.43 1409.42,1216.43 1410,1216.43 1410.59,1216.43 1411.17,1216.43 1411.76,1216.43 1412.35,1216.43 1412.93,1216.43 1413.52,1216.43 1414.11,1216.43 1414.69,1216.43 1415.28,1216.43 1415.87,1216.43 1416.45,1216.43 1417.04,1216.43 1417.63,1216.43 1418.21,1216.43 1418.8,1216.43 1419.38,1216.43 1419.97,1216.43 1420.56,1216.43 1421.14,1216.43 1421.73,1216.43 1422.32,1216.43 1422.9,1216.43 1423.49,1216.43 1424.08,1216.43 1424.66,1216.43 1425.25,1216.43 1425.83,1216.43 1426.42,1216.43 1427.01,1216.43 1427.59,1216.43 1428.18,1216.43 1428.77,1216.43 1429.35,1216.43 1429.94,1216.43 1430.53,1216.43 1431.11,1216.43 1431.7,1216.43 1432.29,1216.43 1432.87,1216.43 1433.46,1216.43 1434.04,1216.43 1434.63,1216.43 1435.22,1216.43 1435.8,1216.43 1436.39,1216.43 1436.98,1216.43 1437.56,1216.43 1438.15,1216.43 1438.74,1216.43 1439.32,1216.43 1439.91,1216.43 1440.5,1216.43 1441.08,1216.43 1441.67,1216.43 1442.25,1216.43 1442.84,1216.43 1443.43,1216.43 1444.01,1216.43 1444.6,1216.43 1445.19,1216.43 1445.77,1216.43 1446.36,1216.43 1446.95,1216.43 1447.53,1216.43 1448.12,1216.43 1448.7,1216.43 1449.29,1216.43 1449.88,1216.43 1450.46,1216.43 1451.05,1216.43 1451.64,1216.43 1452.22,1216.43 1452.81,1216.43 1453.4,1216.43 1453.98,1216.43 1454.57,1216.43 1455.16,1216.43 1455.74,1216.43 1456.33,1216.43 1456.91,1216.43 1457.5,1216.43 1458.09,1216.43 1458.67,1216.43 1459.26,1216.43 1459.85,1216.43 1460.43,1216.43 1461.02,1216.43 1461.61,1216.43 1462.19,1216.43 1462.78,1216.43 1463.37,1216.43 1463.95,1216.43 1464.54,1216.43 1465.12,1216.43 1465.71,1216.43 1466.3,1216.43 1466.88,1216.43 1467.47,1216.43 1468.06,1216.43 1468.64,1216.43 1469.23,1216.43 1469.82,1216.43 1470.4,1216.43 1470.99,1216.43 1471.57,1216.43 1472.16,1216.43 1472.75,1216.43 1473.33,1216.43 1473.92,1216.43 1474.51,1216.43 1475.09,1216.43 1475.68,1216.43 1476.27,1216.43 1476.85,1216.43 1477.44,1216.43 1478.03,1216.43 1478.61,1216.43 1479.2,1216.43 1479.78,1216.43 1480.37,1216.43 1480.96,1216.43 1481.54,1216.43 1482.13,1216.43 1482.72,1216.43 1483.3,1216.43 1483.89,1216.43 1484.48,1216.43 1485.06,1216.43 1485.65,1216.43 1486.24,1216.43 1486.82,1216.43 1487.41,1216.43 1487.99,1216.43 1488.58,1216.43 1489.17,1216.43 1489.75,1216.43 1490.34,1216.43 1490.93,1216.43 1491.51,1216.43 1492.1,1216.43 1492.69,1216.43 1493.27,1216.43 1493.86,1216.43 1494.45,1216.43 1495.03,1216.43 1495.62,1216.43 1496.2,1216.43 1496.79,1216.43 1497.38,1216.43 1497.96,1216.43 1498.55,1216.43 1499.14,1216.43 1499.72,1216.43 1500.31,1216.43 1500.9,1216.43 1501.48,1216.43 1502.07,1216.43 1502.65,1216.43 1503.24,1216.43 1503.83,1216.43 1504.41,1216.43 1505,1216.43 1505.59,1216.43 1506.17,1216.43 1506.76,1216.43 1507.35,1216.43 1507.93,1216.43 1508.52,1216.43 1509.11,1216.43 1509.69,1216.43 1510.28,1216.43 1510.86,1216.43 1511.45,1216.43 1512.04,1216.43 1512.62,1216.43 1513.21,1216.43 1513.8,1216.43 1514.38,1216.43 1514.97,1216.43 1515.56,1216.43 1516.14,1216.43 1516.73,1216.43 1517.32,1216.43 1517.9,1216.43 1518.49,1216.43 1519.07,1216.43 1519.66,1216.43 1520.25,1216.43 1520.83,1216.43 1521.42,1216.43 1522.01,1216.43 1522.59,1216.43 1523.18,1216.43 1523.77,1216.43 1524.35,1216.43 1524.94,1216.43 1525.52,1216.43 1526.11,1216.43 1526.7,1216.43 1527.28,1216.43 1527.87,1216.43 1528.46,1216.43 1529.04,1216.43 1529.63,1216.43 1530.22,1216.43 1530.8,1216.43 1531.39,1216.43 1531.98,1216.43 1532.56,1216.43 1533.15,1216.43 1533.73,1216.43 1534.32,1216.43 1534.91,1216.43 1535.49,1216.43 1536.08,1216.43 1536.67,1216.43 1537.25,1216.43 1537.84,1216.43 1538.43,1216.43 1539.01,1216.43 1539.6,1216.43 1540.19,1216.43 1540.77,1216.43 1541.36,1216.43 1541.94,1216.43 1542.53,1216.43 1543.12,1216.43 1543.7,1216.43 1544.29,1216.43 1544.88,1216.43 1545.46,1216.43 1546.05,1216.43 1546.64,1216.43 1547.22,1216.43 1547.81,1216.43 1548.4,1216.43 1548.98,1216.43 1549.57,1216.43 1550.15,1216.43 1550.74,1216.43 1551.33,1216.43 1551.91,1216.43 1552.5,1216.43 1553.09,1216.43 1553.67,1216.43 1554.26,1216.43 1554.85,1216.43 1555.43,1216.43 1556.02,1216.43 1556.6,1216.43 1557.19,1216.43 1557.78,1216.43 1558.36,1216.43 1558.95,1216.43 1559.54,1216.43 1560.12,1216.43 1560.71,1216.43 1561.3,1216.43 1561.88,1216.43 1562.47,1216.43 1563.06,1216.43 1563.64,1216.43 1564.23,1216.43 1564.81,1216.43 1565.4,1216.43 1565.99,1216.43 1566.57,1216.43 1567.16,1216.43 1567.75,1216.43 1568.33,1216.43 1568.92,1216.43 1569.51,1216.43 1570.09,1216.43 1570.68,1216.43 1571.27,1216.43 1571.85,1216.43 1572.44,1216.43 1573.02,1216.43 1573.61,1216.43 1574.2,1216.43 1574.78,1216.43 1575.37,1216.43 1575.96,1216.43 1576.54,1216.43 1577.13,1216.43 1577.72,1216.43 1578.3,1216.43 1578.89,1216.43 1579.47,1216.43 1580.06,1216.43 1580.65,1216.43 1581.23,1216.43 1581.82,1216.43 1582.41,1216.43 1582.99,1216.43 1583.58,1216.43 1584.17,1216.43 1584.75,1216.43 1585.34,1216.43 1585.93,1216.43 1586.51,1216.43 1587.1,1216.43 1587.68,1216.43 1588.27,1216.43 1588.86,1216.43 1589.44,1216.43 1590.03,1216.43 1590.62,1216.43 1591.2,1216.43 1591.79,1216.43 1592.38,1216.43 1592.96,1216.43 1593.55,1216.43 1594.14,1216.43 1594.72,1216.43 1595.31,1216.43 1595.89,1216.43 1596.48,1216.43 1597.07,1216.43 1597.65,1216.43 1598.24,1216.43 1598.83,1216.43 1599.41,1216.43 1600,1216.43 1600.59,1216.43 1601.17,1216.43 1601.76,1216.43 1602.34,1216.43 1602.93,1216.43 1603.52,1216.43 1604.1,1216.43 1604.69,1216.43 1605.28,1216.43 1605.86,1216.43 1606.45,1216.43 1607.04,1216.43 1607.62,1216.43 1608.21,1216.43 1608.8,1216.43 1609.38,1216.43 1609.97,1216.43 1610.55,1216.43 1611.14,1216.43 1611.73,1216.43 1612.31,1216.43 1612.9,1216.43 1613.49,1216.43 1614.07,1216.43 1614.66,1216.43 1615.25,1216.43 1615.83,1216.43 1616.42,1216.43 1617.01,1216.43 1617.59,1216.43 1618.18,1216.43 1618.76,1216.43 1619.35,1216.43 1619.94,1216.43 1620.52,1216.43 1621.11,1216.43 1621.7,1216.43 1622.28,1216.43 1622.87,1216.43 1623.46,1216.43 1624.04,1216.43 1624.63,1216.43 1625.22,1216.43 1625.8,1216.43 1626.39,1216.43 1626.97,1216.43 1627.56,1216.43 1628.15,1216.43 1628.73,1216.43 1629.32,1216.43 1629.91,1216.43 1630.49,1216.43 1631.08,1216.43 1631.67,1216.43 1632.25,1216.43 1632.84,1216.43 1633.42,1216.43 1634.01,1216.43 1634.6,1216.43 1635.18,1216.43 1635.77,1216.43 1636.36,1216.43 1636.94,1216.43 1637.53,1216.43 1638.12,1216.43 1638.7,1216.43 1639.29,1216.43 1639.88,1216.43 1640.46,1216.43 1641.05,1216.43 1641.63,1216.43 1642.22,1216.43 1642.81,1216.43 1643.39,1216.43 1643.98,1216.43 1644.57,1216.43 1645.15,1216.43 1645.74,1216.43 1646.33,1216.43 1646.91,1216.43 1647.5,1216.43 1648.09,1216.43 1648.67,1216.43 1649.26,1216.43 1649.84,1216.43 1650.43,1216.43 1651.02,1216.43 1651.6,1216.43 1652.19,1216.43 1652.78,1216.43 1653.36,1216.43 1653.95,1216.43 1654.54,1216.43 1655.12,1216.43 1655.71,1216.43 1656.29,1216.43 1656.88,1216.43 1657.47,1216.43 1658.05,1216.43 1658.64,1216.43 1659.23,1216.43 1659.81,1216.43 1660.4,1216.43 1660.99,1216.43 1661.57,1216.43 1662.16,1216.43 1662.75,1216.43 1663.33,1216.43 1663.92,1216.43 1664.5,1216.43 1665.09,1216.43 1665.68,1216.43 1666.26,1216.43 1666.85,1216.43 1667.44,1216.43 1668.02,1216.43 1668.61,1216.43 1669.2,1216.43 1669.78,1216.43 1670.37,1216.43 1670.96,1216.43 1671.54,1216.43 1672.13,1216.43 1672.71,1216.43 1673.3,1216.43 1673.89,1216.43 1674.47,1216.43 1675.06,1216.43 1675.65,1216.43 1676.23,1216.43 1676.82,1216.43 1677.41,1216.43 1677.99,1216.43 1678.58,1216.43 1679.17,1216.43 1679.75,1216.43 1680.34,1216.43 1680.92,1216.43 1681.51,1216.43 1682.1,1216.43 1682.68,1216.43 1683.27,1216.43 1683.86,1216.43 1684.44,1216.43 1685.03,1216.43 1685.62,1216.43 1686.2,1216.43 1686.79,1216.43 1687.37,1216.43 1687.96,1216.43 1688.55,1216.43 1689.13,1216.43 1689.72,1216.43 1690.31,1216.43 1690.89,1216.43 1691.48,1216.43 1692.07,1216.43 1692.65,1216.43 1693.24,1216.43 1693.83,1216.43 1694.41,1216.43 1695,1216.43 1695.58,1216.43 1696.17,1216.43 1696.76,1216.43 1697.34,1216.43 1697.93,1216.43 1698.52,1216.43 1699.1,1216.43 1699.69,1216.43 1700.28,1216.43 1700.86,1216.43 1701.45,1216.43 1702.04,1216.43 1702.62,1216.43 1703.21,1216.43 1703.79,1216.43 1704.38,1216.43 1704.97,1216.43 1705.55,1216.43 1706.14,1216.43 1706.73,1216.43 1707.31,1216.43 1707.9,1216.43 1708.49,1216.43 1709.07,1216.43 1709.66,1216.43 1710.24,1216.43 1710.83,1216.43 1711.42,1216.43 1712,1216.43 1712.59,1216.43 1713.18,1216.43 1713.76,1216.43 1714.35,1216.43 1714.94,1216.43 1715.52,1216.43 1716.11,1216.43 1716.7,1216.43 1717.28,1216.43 1717.87,1216.43 1718.45,1216.43 1719.04,1216.43 1719.63,1216.43 1720.21,1216.43 1720.8,1216.43 1721.39,1216.43 1721.97,1216.43 1722.56,1216.43 1723.15,1216.43 1723.73,1216.43 1724.32,1216.43 1724.91,1216.43 1725.49,1216.43 1726.08,1216.43 1726.66,1216.43 1727.25,1216.43 1727.84,1216.43 1728.42,1216.43 1729.01,1216.43 1729.6,1216.43 1730.18,1216.43 1730.77,1216.43 1731.36,1216.43 1731.94,1216.43 1732.53,1216.43 1733.11,1216.43 1733.7,1216.43 1734.29,1216.43 1734.87,1216.43 1735.46,1216.43 1736.05,1216.43 1736.63,1216.43 1737.22,1216.43 1737.81,1216.43 1738.39,1216.43 1738.98,1216.43 1739.57,1216.43 1740.15,1216.43 1740.74,1216.43 1741.32,1216.43 1741.91,1216.43 1742.5,1216.43 1743.08,1216.43 1743.67,1216.43 1744.26,1216.43 1744.84,1216.43 1745.43,1216.43 1746.02,1216.43 1746.6,1216.43 1747.19,1216.43 1747.78,1216.43 1748.36,1216.43 1748.95,1216.43 1749.53,1216.43 1750.12,1216.43 1750.71,1216.43 1751.29,1216.43 1751.88,1216.43 1752.47,1216.43 1753.05,1216.43 1753.64,1216.43 1754.23,1216.43 1754.81,1216.43 1755.4,1216.43 1755.99,1216.43 1756.57,1216.43 1757.16,1216.43 1757.74,1216.43 1758.33,1216.43 1758.92,1216.43 1759.5,1216.43 1760.09,1216.43 1760.68,1216.43 1761.26,1216.43 1761.85,1216.43 1762.44,1216.43 1763.02,1216.43 1763.61,1216.43 1764.19,1216.43 1764.78,1216.43 1765.37,1216.43 1765.95,1216.43 1766.54,1216.43 1767.13,1216.43 1767.71,1216.43 1768.3,1216.43 1768.89,1216.43 1769.47,1216.43 1770.06,1216.43 1770.65,1216.43 1771.23,1216.43 1771.82,1216.43 1772.4,1216.43 1772.99,1216.43 1773.58,1216.43 1774.16,1216.43 1774.75,1216.43 1775.34,1216.43 1775.92,1216.43 1776.51,1216.43 1777.1,1216.43 1777.68,1216.43 1778.27,1216.43 1778.86,1216.43 1779.44,1216.43 1780.03,1216.43 1780.61,1216.43 1781.2,1216.43 1781.79,1216.43 1782.37,1216.43 1782.96,1216.43 1783.55,1216.43 1784.13,1216.43 1784.72,1216.43 1785.31,1216.43 1785.89,1216.43 1786.48,1216.43 1787.06,1216.43 1787.65,1216.43 1788.24,1216.43 1788.82,1216.43 1789.41,1216.43 1790,1216.43 1790.58,1216.43 1791.17,1216.43 1791.76,1216.43 1792.34,1216.43 1792.93,1216.43 1793.52,1216.43 1794.1,1216.43 1794.69,1216.43 1795.27,1216.43 1795.86,1216.43 1796.45,1216.43 1797.03,1216.43 1797.62,1216.43 1798.21,1216.43 1798.79,1216.43 1799.38,1216.43 1799.97,1216.43 1800.55,1216.43 1801.14,1216.43 1801.73,1216.43 1802.31,1216.43 1802.9,1216.43 1803.48,1216.43 1804.07,1216.43 1804.66,1216.43 1805.24,1216.43 1805.83,1216.43 1806.42,1216.43 1807,1216.43 1807.59,1216.43 1808.18,1216.43 1808.76,1216.43 1809.35,1216.43 1809.94,1216.43 1810.52,1216.43 1811.11,1216.43 1811.69,1216.43 1812.28,1216.43 1812.87,1216.43 1813.45,1216.43 1814.04,1216.43 1814.63,1216.43 1815.21,1216.43 1815.8,1216.43 1816.39,1216.43 1816.97,1216.43 1817.56,1216.43 1818.14,1216.43 1818.73,1216.43 1819.32,1216.43 1819.9,1216.43 1820.49,1216.43 1821.08,1216.43 1821.66,1216.43 1822.25,1216.43 1822.84,1216.43 1823.42,1216.43 1824.01,1216.43 1824.6,1216.43 1825.18,1216.43 1825.77,1216.43 1826.35,1216.43 1826.94,1216.43 1827.53,1216.43 1828.11,1216.43 1828.7,1216.43 1829.29,1216.43 1829.87,1216.43 1830.46,1216.43 1831.05,1216.43 1831.63,1216.43 1832.22,1216.43 1832.81,1216.43 1833.39,1216.43 1833.98,1216.43 1834.56,1216.43 1835.15,1216.43 1835.74,1216.43 1836.32,1216.43 1836.91,1216.43 1837.5,1216.43 1838.08,1216.43 1838.67,1216.43 1839.26,1216.43 1839.84,1216.43 1840.43,1216.43 1841.01,1216.43 1841.6,1216.43 1842.19,1216.43 1842.77,1216.43 1843.36,1216.43 1843.95,1216.43 1844.53,1216.43 1845.12,1216.43 1845.71,1216.43 1846.29,1216.43 1846.88,1216.43 1847.47,1216.43 1848.05,1216.43 1848.64,1216.43 1849.22,1216.43 1849.81,1216.43 1850.4,1216.43 1850.98,1216.43 1851.57,1216.43 1852.16,1216.43 1852.74,1216.43 1853.33,1216.43 1853.92,1216.43 1854.5,1216.43 1855.09,1216.43 1855.68,1216.43 1856.26,1216.43 1856.85,1216.43 1857.43,1216.43 1858.02,1216.43 1858.61,1216.43 1859.19,1216.43 1859.78,1216.43 1860.37,1216.43 1860.95,1216.43 1861.54,1216.43 1862.13,1216.43 1862.71,1216.43 1863.3,1216.43 1863.88,1216.43 1864.47,1216.43 1865.06,1216.43 1865.64,1216.43 1866.23,1216.43 1866.82,1216.43 1867.4,1216.43 1867.99,1216.43 1868.58,1216.43 1869.16,1216.43 1869.75,1216.43 1870.34,1216.43 1870.92,1216.43 1871.51,1216.43 1872.09,1216.43 1872.68,1216.43 1873.27,1216.43 1873.85,1216.43 1874.44,1216.43 1875.03,1216.43 1875.61,1216.43 1876.2,1216.43 1876.79,1216.43 1877.37,1216.43 1877.96,1216.43 1878.55,1216.43 1879.13,1216.43 1879.72,1216.43 1880.3,1216.43 1880.89,1216.43 1881.48,1216.43 1882.06,1216.43 1882.65,1216.43 1883.24,1216.43 1883.82,1216.43 1884.41,1216.43 1885,1216.43 1885.58,1216.43 1886.17,1216.43 1886.76,1216.43 1887.34,1216.43 1887.93,1216.43 1888.51,1216.43 1889.1,1216.43 1889.69,1216.43 1890.27,1216.43 1890.86,1216.43 1891.45,1216.43 1892.03,1216.43 1892.62,1216.43 1893.21,1216.43 1893.79,1216.43 1894.38,1216.43 1894.96,1216.43 1895.55,1216.43 1896.14,1216.43 1896.72,1216.43 1897.31,1216.43 1897.9,1216.43 1898.48,1216.43 1899.07,1216.43 1899.66,1216.43 1900.24,1216.43 1900.83,1216.43 1901.42,1216.43 1902,1216.43 1902.59,1216.43 1903.17,1216.43 1903.76,1216.43 1904.35,1216.43 1904.93,1216.43 1905.52,1216.43 1906.11,1216.43 1906.69,1216.43 1907.28,1216.43 1907.87,1216.43 1908.45,1216.43 1909.04,1216.43 1909.63,1216.43 1910.21,1216.43 1910.8,1216.43 1911.38,1216.43 1911.97,1216.43 1912.56,1216.43 1913.14,1216.43 1913.73,1216.43 1914.32,1216.43 1914.9,1216.43 1915.49,1216.43 1916.08,1216.43 1916.66,1216.43 1917.25,1216.43 1917.83,1216.43 1918.42,1216.43 1919.01,1216.43 1919.59,1216.43 1920.18,1216.43 1920.77,1216.43 1921.35,1216.43 1921.94,1216.43 1922.53,1216.43 1923.11,1216.43 1923.7,1216.43 1924.29,1216.43 1924.87,1216.43 1925.46,1216.43 1926.04,1216.43 1926.63,1216.43 1927.22,1216.43 1927.8,1216.43 1928.39,1216.43 1928.98,1216.43 1929.56,1216.43 1930.15,1216.43 1930.74,1216.43 1931.32,1216.43 1931.91,1216.43 1932.5,1216.43 1933.08,1216.43 1933.67,1216.43 1934.25,1216.43 1934.84,1216.43 1935.43,1216.43 1936.01,1216.43 1936.6,1216.43 1937.19,1216.43 1937.77,1216.43 1938.36,1216.43 1938.95,1216.43 1939.53,1216.43 1940.12,1216.43 1940.71,1216.43 1941.29,1216.43 1941.88,1216.43 1942.46,1216.43 1943.05,1216.43 1943.64,1216.43 1944.22,1216.43 1944.81,1216.43 1945.4,1216.43 1945.98,1216.43 1946.57,1216.43 1947.16,1216.43 1947.74,1216.43 1948.33,1216.43 1948.91,1216.43 1949.5,1216.43 1950.09,1216.43 1950.67,1216.43 1951.26,1216.43 1951.85,1216.43 1952.43,1216.43 1953.02,1216.43 1953.61,1216.43 1954.19,1216.43 1954.78,1216.43 1955.37,1216.43 1955.95,1216.43 1956.54,1216.43 1957.12,1216.43 1957.71,1216.43 1958.3,1216.43 1958.88,1216.43 1959.47,1216.43 1960.06,1216.43 1960.64,1216.43 1961.23,1216.43 1961.82,1216.43 1962.4,1216.43 1962.99,1216.43 1963.58,1216.43 1964.16,1216.43 1964.75,1216.43 1965.33,1216.43 1965.92,1216.43 1966.51,1216.43 1967.09,1216.43 1967.68,1216.43 1968.27,1216.43 1968.85,1216.43 1969.44,1216.43 1970.03,1216.43 1970.61,1216.43 1971.2,1216.43 1971.78,1216.43 1972.37,1216.43 1972.96,1216.43 1973.54,1216.43 1974.13,1216.43 1974.72,1216.43 1975.3,1216.43 1975.89,1216.43 1976.48,1216.43 1977.06,1216.43 1977.65,1216.43 1978.24,1216.43 1978.82,1216.43 1979.41,1216.43 1979.99,1216.43 1980.58,1216.43 1981.17,1216.43 1981.75,1216.43 1982.34,1216.43 1982.93,1216.43 1983.51,1216.43 1984.1,1216.43 1984.69,1216.43 1985.27,1216.43 1985.86,1216.43 1986.45,1216.43 1987.03,1216.43 1987.62,1216.43 1988.2,1216.43 1988.79,1216.43 1989.38,1216.43 1989.96,1216.43 1990.55,1216.43 1991.14,1216.43 1991.72,1216.43 1992.31,1216.43 1992.9,1216.43 1993.48,1216.43 1994.07,1216.43 1994.65,1216.43 1995.24,1216.43 1995.83,1216.43 1996.41,1216.43 1997,1216.43 1997.59,1216.43 1998.17,1216.43 1998.76,1216.43 1999.35,1216.43 1999.93,1216.43 2000.52,1216.43 2001.11,1216.43 2001.69,1216.43 2002.28,1216.43 2002.86,1216.43 2003.45,1216.43 2004.04,1216.43 2004.62,1216.43 2005.21,1216.43 2005.8,1216.43 2006.38,1216.43 2006.97,1216.43 2007.56,1216.43 2008.14,1216.43 2008.73,1216.43 2009.32,1216.43 2009.9,1216.43 2010.49,1216.43 2011.07,1216.43 2011.66,1216.43 2012.25,1216.43 2012.83,1216.43 2013.42,1216.43 2014.01,1216.43 2014.59,1216.43 2015.18,1216.43 2015.77,1216.43 2016.35,1216.43 2016.94,1216.43 2017.53,1216.43 2018.11,1216.43 2018.7,1216.43 2019.28,1216.43 2019.87,1216.43 2020.46,1216.43 2021.04,1216.43 2021.63,1216.43 2022.22,1216.43 2022.8,1216.43 2023.39,1216.43 2023.98,1216.43 2024.56,1216.43 2025.15,1216.43 2025.73,1216.43 2026.32,1216.43 2026.91,1216.43 2027.49,1216.43 2028.08,1216.43 2028.67,1216.43 2029.25,1216.43 2029.84,1216.43 2030.43,1216.43 2031.01,1216.43 2031.6,1216.43 2032.19,1216.43 2032.77,1216.43 2033.36,1216.43 2033.94,1216.43 2034.53,1216.43 2035.12,1216.43 2035.7,1216.43 2036.29,1216.43 2036.88,1216.43 2037.46,1216.43 2038.05,1216.43 2038.64,1216.43 2039.22,1216.43 2039.81,1216.43 2040.4,1216.43 2040.98,1216.43 2041.57,1216.43 2042.15,1216.43 2042.74,1216.43 2043.33,1216.43 2043.91,1216.43 2044.5,1216.43 2045.09,1216.43 2045.67,1216.43 2046.26,1216.43 2046.85,1216.43 2047.43,1216.43 2048.02,1216.43 2048.6,1216.43 2049.19,1216.43 2049.78,1216.43 2050.36,1216.43 2050.95,1216.43 2051.54,1216.43 2052.12,1216.43 2052.71,1216.43 2053.3,1216.43 2053.88,1216.43 2054.47,1216.43 2055.06,1216.43 2055.64,1216.43 2056.23,1216.43 2056.81,1216.43 2057.4,1216.43 2057.99,1216.43 2058.57,1216.43 2059.16,1216.43 2059.75,1216.43 2060.33,1216.43 2060.92,1216.43 2061.51,1216.43 2062.09,1216.43 2062.68,1216.43 2063.27,1216.43 2063.85,1216.43 2064.44,1216.43 2065.02,1216.43 2065.61,1216.43 2066.2,1216.43 2066.78,1216.43 2067.37,1216.43 2067.96,1216.43 2068.54,1216.43 2069.13,1216.43 2069.72,1216.43 2070.3,1216.43 2070.89,1216.43 2071.48,1216.43 2072.06,1216.43 2072.65,1216.43 2073.23,1216.43 2073.82,1216.43 2074.41,1216.43 2074.99,1216.43 2075.58,1216.43 2076.17,1216.43 2076.75,1216.43 2077.34,1216.43 2077.93,1216.43 2078.51,1216.43 2079.1,1216.43 2079.68,1216.43 2080.27,1216.43 2080.86,1216.43 2081.44,1216.43 2082.03,1216.43 2082.62,1216.43 2083.2,1216.43 2083.79,1216.43 2084.38,1216.43 2084.96,1216.43 2085.55,1216.43 2086.14,1216.43 2086.72,1216.43 2087.31,1216.43 2087.89,1216.43 2088.48,1216.43 2089.07,1216.43 2089.65,1216.43 2090.24,1216.43 2090.83,1216.43 2091.41,1216.43 2092,1216.43 2092.59,1216.43 2093.17,1216.43 2093.76,1216.43 2094.35,1216.43 2094.93,1216.43 2095.52,1216.43 2096.1,1216.43 2096.69,1216.43 2097.28,1216.43 2097.86,1216.43 2098.45,1216.43 2099.04,1216.43 2099.62,1216.43 2100.21,1216.43 2100.8,1216.43 2101.38,1216.43 2101.97,1216.43 2102.55,1216.43 2103.14,1216.43 2103.73,1216.43 2104.31,1216.43 2104.9,1216.43 2105.49,1216.43 2106.07,1216.43 2106.66,1216.43 2107.25,1216.43 2107.83,1216.43 2108.42,1216.43 2109.01,1216.43 2109.59,1216.43 2110.18,1216.43 2110.76,1216.43 2111.35,1216.43 2111.94,1216.43 2112.52,1216.43 2113.11,1216.43 2113.7,1216.43 2114.28,1216.43 2114.87,1216.43 2115.46,1216.43 2116.04,1216.43 2116.63,1216.43 2117.22,1216.43 2117.8,1216.43 2118.39,1216.43 2118.97,1216.43 2119.56,1216.43 2120.15,1216.43 2120.73,1216.43 2121.32,1216.43 2121.91,1216.43 2122.49,1216.43 2123.08,1216.43 2123.67,1216.43 2124.25,1216.43 2124.84,1216.43 2125.42,1216.43 2126.01,1216.43 2126.6,1216.43 2127.18,1216.43 2127.77,1216.43 2128.36,1216.43 2128.94,1216.43 2129.53,1216.43 2130.12,1216.43 2130.7,1216.43 2131.29,1216.43 2131.88,1216.43 2132.46,1216.43 2133.05,1216.43 2133.63,1216.43 2134.22,1216.43 2134.81,1216.43 2135.39,1216.43 2135.98,1216.43 2136.57,1216.43 2137.15,1216.43 2137.74,1216.43 2138.33,1216.43 2138.91,1216.43 2139.5,1216.43 2140.09,1216.43 2140.67,1216.43 2141.26,1216.43 2141.84,1216.43 2142.43,1216.43 2143.02,1216.43 2143.6,1216.43 2144.19,1216.43 2144.78,1216.43 2145.36,1216.43 2145.95,1216.43 2146.54,1216.43 2147.12,1216.43 2147.71,1216.43 2148.3,1216.43 2148.88,1216.43 2149.47,1216.43 2150.05,1216.43 2150.64,1216.43 2151.23,1216.43 2151.81,1216.43 2152.4,1216.43 2152.99,1216.43 2153.57,1216.43 2154.16,1216.43 2154.75,1216.43 2155.33,1216.43 2155.92,1216.43 2156.5,1216.43 2157.09,1216.43 2157.68,1216.43 2158.26,1216.43 \"/>\n<polyline clip-path=\"url(#clip762)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1562.62,1199.35 1398.42,899.083 \"/>\n<polyline clip-path=\"url(#clip762)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1233.12 985.439,1199.35 2158.26,1199.35 2158.26,1233.12 985.439,1233.12 \"/>\n<path clip-path=\"url(#clip760)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip760)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip760)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip760)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip760)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip760)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip760)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip760)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip763\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip763)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip763)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip763)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip763)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip763)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip760)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip760)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip760)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip760)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip760)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip760)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip760)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip763)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip763)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip763)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip763)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip763)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip760)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip760)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip760)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip760)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip760)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip760)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip760)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip760)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip763)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-1577.5 161.555,-2922.08 162.114,-4155.78 162.673,-5286.05 163.232,-6319.78 163.792,-7263.33 164.351,-8122.62 164.91,-8903.13 165.469,-9609.97 166.029,-10247.9 166.588,-10821.4 167.147,-10246.9 167.706,-10752.3 168.266,-11202.5 168.825,-10727.7 169.384,-11114.8 169.943,-11455.1 170.503,-11751.8 171.062,-11995.7 171.621,-12214.1 172.18,-11236.7 172.74,-10401.9 173.299,-10123.5 173.858,-10299.1 174.417,-10041.3 174.977,-10181.8 175.536,-9948.5 176.095,-10046.9 176.655,-9811.98 177.214,-9869.93 177.773,-9913.79 178.332,-9661.74 178.892,-9408.28 179.451,-9406.86 180.01,-9398.33 180.569,-9371.97 181.129,-9332.05 181.688,-9281.79 182.247,-8866.28 182.806,-8808.41 183.366,-8742.82 183.925,-8374.94 184.484,-8036.44 185.043,-7827.99 185.603,-7623.12 186.162,-7546.48 186.721,-7344.05 187.28,-7156.23 187.84,-7068.38 188.399,-6977.36 188.958,-6704.04 189.517,-6614.09 190.077,-6350.87 190.636,-6187.16 191.195,-6022.36 191.754,-5935.58 192.314,-5853.94 192.873,-5689.33 193.432,-5534.19 193.991,-5440.58 194.551,-5346.07 195.11,-5130.13 195.669,-4981.35 196.228,-4892.46 196.788,-4801.02 197.347,-4553.25 197.906,-4313.48 198.465,-4225.34 199.025,-4093.36 199.584,-4010.33 200.143,-3878.47 200.702,-3750.88 201.262,-3627.14 201.821,-3502.67 202.38,-3301.14 202.939,-3148.11 203.499,-3072.47 204.058,-2999.59 204.617,-2854.29 205.176,-2748.73 205.736,-2646.69 206.295,-2575.98 206.854,-2471.66 207.413,-2335.06 207.973,-2236.57 208.532,-2111.02 209.091,-2017.55 209.65,-1895.59 210.21,-1834.86 210.769,-1712.24 211.328,-1628.22 211.887,-1548.22 212.447,-1410.55 213.006,-1255.35 213.565,-1156.93 214.124,-1087.1 214.684,-1050.93 215.243,-988.007 215.802,-901.28 216.361,-763.379 216.921,-681.42 217.48,-622.237 218.039,-541.471 218.598,-514.665 219.158,-483.195 219.717,-449.03 220.276,-375.278 220.835,-324.905 221.395,-297.055 221.954,-230.579 222.513,-188.194 223.072,-37.4795 223.632,-18.59 224.191,64.4469 224.75,78.0929 225.309,114.323 225.869,108.199 226.428,186.535 226.987,282.59 227.546,292.372 228.106,302.631 228.665,331.368 229.224,359.528 229.783,413.851 230.343,458.829 230.902,559.672 231.461,616.749 232.02,616.464 232.58,620.21 233.139,620.193 233.698,716.056 234.257,733.546 234.817,785.582 235.376,765.787 235.935,762.11 236.494,759.922 237.054,759.575 237.613,756.458 238.172,756.393 238.731,777.653 239.291,813.897 239.85,847.937 240.409,861.496 240.968,913.406 241.528,941.616 242.087,1004.8 242.646,995.906 243.205,1039.2 243.765,1030.7 244.324,1002.66 244.883,1045.94 245.442,1102.02 246.002,1087.04 246.561,1056.19 247.12,1041.42 247.679,1030.97 248.239,1053.04 248.798,1041.86 249.357,1048.33 249.916,1056.33 250.476,1007.59 251.035,1013.57 251.594,1007.46 252.153,1018.58 252.713,1044.8 253.272,1017.11 253.831,1027.29 254.39,1003.97 254.95,993.528 255.509,969.693 256.068,968.521 256.627,960.703 257.187,955.543 257.746,955.1 258.305,987.924 258.864,965.631 259.424,963.889 259.983,977.521 260.542,957.012 261.101,951.894 261.661,968.151 262.22,998.462 262.779,1044.43 263.338,1021.1 263.898,1000.13 264.457,1010.99 265.016,1041.55 265.575,1055.61 266.135,1048.53 266.694,1027.8 267.253,1036.33 267.812,1049.79 268.372,1026.38 268.931,1020.55 269.49,1019.49 270.049,1014.44 270.609,1026.77 271.168,1023.13 271.727,1032.75 272.286,1075.13 272.846,1083.95 273.405,1108.26 273.964,1098.67 274.523,1106.32 275.083,1116.74 275.642,1124.43 276.201,1119.01 276.76,1111.81 277.32,1100.09 277.879,1090.79 278.438,1066.66 278.997,1060.93 279.557,1072.61 280.116,1051.01 280.675,981.975 281.234,993.401 281.794,990.435 282.353,1005.82 282.912,1019.03 283.471,1033.98 284.031,1043.09 284.59,1034.01 285.149,1040.5 285.708,1034.11 286.268,1046.11 286.827,1087.48 287.386,1082.76 287.945,1108.58 288.505,1099.13 289.064,1118.44 289.623,1108.35 290.182,1116.87 290.742,1105.09 291.301,1080.51 291.86,1102.15 292.419,1074.82 292.979,1065.75 293.538,1026.11 294.097,1022.63 294.656,999.135 295.216,999.599 295.775,1027.59 296.334,1068.78 296.893,1077.01 297.453,1049.19 298.012,1026.23 298.571,1021.45 299.13,1029.91 299.69,1041.13 300.249,1033.67 300.808,1045.1 301.368,1040.57 301.927,1036.26 302.486,1061.89 303.045,1069.94 303.605,1047.85 304.164,1057.66 304.723,1083.51 305.282,1088.24 305.842,1076.52 306.401,1100.24 306.96,1071.17 307.519,1063.04 308.079,1039.35 308.638,1016.31 309.197,1009.25 309.756,1036.25 310.316,1009.86 310.875,1023.78 311.434,1032.15 311.993,986.333 312.553,998.191 313.112,991.382 313.671,986.952 314.23,947.859 314.79,1011.67 315.349,990.392 315.908,1001.73 316.467,945.708 317.027,923.743 317.586,938.195 318.145,951.361 318.704,964.788 319.264,975.147 319.823,971.531 320.382,966.598 320.941,1008.9 321.501,1017.75 322.06,1040.13 322.619,1028.46 323.178,1016.06 323.738,1027.27 324.297,1020.47 324.856,977.986 325.415,986.877 325.975,999.9 326.534,978.392 327.093,954.078 327.652,934.078 328.212,931.278 328.771,941.89 329.33,936.582 329.889,949.621 330.449,943.031 331.008,903.602 331.567,855.145 332.126,874.448 332.686,877.524 333.245,941.6 333.804,919.545 334.363,930.294 334.923,960.605 335.482,956.223 336.041,933.627 336.6,913.206 337.16,894.533 337.719,893.676 338.278,870.291 338.837,884.852 339.397,882.011 339.956,862.271 340.515,845.087 341.074,845.326 341.634,829.448 342.193,829.464 342.752,832.309 343.311,849.136 343.871,849.855 344.43,917.538 344.989,911.425 345.548,956.015 346.108,938.058 346.667,947.27 347.226,941.61 347.785,949.711 348.345,928.843 348.904,942.469 349.463,953.578 350.022,934.593 350.582,945.798 351.141,939.318 351.7,948.906 352.259,958.161 352.819,937.329 353.378,882.471 353.937,883.165 354.496,897.52 355.056,912.301 355.615,876.479 356.174,905.167 356.733,931.237 357.293,908.622 357.852,922.063 358.411,932.561 358.97,929.947 359.53,939.746 360.089,931.487 360.648,894.095 361.207,873.485 361.767,885.774 362.326,877.373 362.885,893.074 363.444,904.39 364.004,903.677 364.563,914.192 365.122,910.114 365.681,907.651 366.241,884.42 366.8,863.112 367.359,845.747 367.918,829.201 368.478,810.308 369.037,826.486 369.596,827.177 370.155,827.61 370.715,845.601 371.274,859.446 371.833,875.784 372.392,876.508 372.952,887.512 373.511,885.031 374.07,879.966 374.629,860.432 375.189,857.336 375.748,839.471 376.307,819.919 376.866,818.668 377.426,800.705 377.985,814.652 378.544,835.544 379.103,787.364 379.663,787.471 380.222,806.065 380.781,804.928 381.34,783.993 381.9,819.057 382.459,817.487 383.018,783.081 383.577,786.617 384.137,786.397 384.696,819.55 385.255,819.07 385.814,823.262 386.374,857.312 386.933,872.856 387.492,866.925 388.051,864.187 388.611,826.792 389.17,890.759 389.729,882.186 390.288,843.28 390.848,825.299 391.407,821.919 391.966,820.098 392.525,803.797 393.085,833.142 393.644,815.96 394.203,817.243 394.762,816.625 395.322,814.525 395.881,811.88 396.44,793.538 396.999,811.31 397.559,814.332 398.118,847.336 398.677,890.776 399.236,869.354 399.796,903.212 400.355,882.961 400.914,892.678 401.473,884.069 402.033,892.653 402.592,903.155 403.151,914.283 403.71,889.523 404.27,899.93 404.829,925.929 405.388,935.937 405.947,958.228 406.507,962.536 407.066,984.121 407.625,941.083 408.184,917.779 408.744,928.835 409.303,919.438 409.862,913.579 410.421,905.44 410.981,913.471 411.54,888.754 412.099,880.734 412.658,875.482 413.218,900.526 413.777,893.11 414.336,854.649 414.895,864.01 415.455,808.939 416.014,789.83 416.573,773.704 417.132,804.674 417.692,820.75 418.251,819.038 418.81,786.413 419.369,770.466 419.929,769.521 420.488,769.69 421.047,769.214 421.606,768.017 422.166,785.65 422.725,784.215 423.284,782.324 423.843,764.55 424.403,766.569 424.962,782.798 425.521,781.456 426.08,782.157 426.64,815.08 427.199,781.154 427.758,815.75 428.318,796.471 428.877,808.442 429.436,790.339 429.995,786.295 430.555,771.681 431.114,772.359 431.673,806.294 432.232,805.789 432.792,805.717 433.351,817.616 433.91,782.61 434.469,780.818 435.029,794.341 435.588,807.418 436.147,787.608 436.706,802.448 437.266,785.145 437.825,818.528 438.384,811.346 438.943,807.165 439.503,803.369 440.062,819.42 440.621,814.514 441.18,780.395 441.74,761.648 442.299,760.867 442.858,759.003 443.417,726.599 443.977,725.52 444.536,728.324 445.095,729.505 445.654,700.204 446.214,718.558 446.773,785.738 447.332,802.37 447.891,783.68 448.451,765.092 449.01,779.196 449.569,776.303 450.128,792.363 450.688,824.55 451.247,820.753 451.806,834.776 452.365,816.356 452.925,777.257 453.484,760.777 454.043,775.088 454.602,774.877 455.162,775.938 455.721,759.551 456.28,780.083 456.839,813.488 457.399,811.614 457.958,808.497 458.517,775.427 459.076,759.637 459.636,727.281 460.195,696.602 460.754,703.96 461.313,702.875 461.873,709.199 462.432,710.858 462.991,695.163 463.55,712.458 464.11,748.312 464.669,734.011 465.228,718.235 465.787,720.502 466.347,741.455 466.906,741.973 467.465,725.475 468.024,691.76 468.584,725.926 469.143,725.728 469.702,708.842 470.261,709.181 470.821,714.488 471.38,749.608 471.939,764.387 472.498,777.439 473.058,774.384 473.617,709.233 474.176,728.087 474.735,696.264 475.295,699.86 475.854,735.526 476.413,748.077 476.972,779.741 477.532,793.895 478.091,777.893 478.65,808.798 479.209,810.676 479.769,821.336 480.328,817.523 480.887,844.082 481.446,859.217 482.006,855.819 482.565,847.593 483.124,875.85 483.683,901.845 484.243,909.261 484.802,885.744 485.361,875.579 485.92,849.526 486.48,826.549 487.039,805.236 487.598,800.797 488.157,796.827 488.717,761.951 489.276,761.258 489.835,758.578 490.394,755.375 490.954,770.733 491.513,800.942 492.072,798.979 492.631,807.889 493.191,802.202 493.75,812.636 494.309,791.154 494.868,772.394 495.428,772.985 495.987,785.88 496.546,800.017 497.105,745.586 497.665,756.684 498.224,789.867 498.783,783.251 499.342,749.496 499.902,747.96 500.461,764.66 501.02,748.507 501.579,762.963 502.139,741.064 502.698,757.135 503.257,725.954 503.816,725.287 504.376,741.449 504.935,753.73 505.494,766.322 506.053,763.539 506.613,759.93 507.172,790.707 507.731,773.56 508.29,787.01 508.85,814.833 509.409,813.179 509.968,794.531 510.527,773.165 511.087,802.037 511.646,817.941 512.205,813.052 512.764,757.021 513.324,677.383 513.883,678.433 514.442,664.872 515.001,667.211 515.561,687.737 516.12,703.101 516.679,635.677 517.238,674.012 517.798,739.541 518.357,721.098 518.916,721.323 519.475,724.066 520.035,722.004 520.594,691.507 521.153,679.049 521.712,665.791 522.272,668.76 522.831,686.574 523.39,704.875 523.949,725.354 524.509,712.102 525.068,700.154 525.627,686.104 526.186,704.227 526.746,706.612 527.305,742.263 527.864,740.093 528.423,774.673 528.983,741.498 529.542,756.616 530.101,755.674 530.66,742.24 531.22,771.701 531.779,771.29 532.338,764.601 532.897,779.114 533.457,764.141 534.016,744.181 534.575,762.089 535.134,777.937 535.694,759.217 536.253,738.397 536.812,736.472 537.371,752.036 537.931,716.792 538.49,664.293 539.049,683.435 539.608,669.312 540.168,655.991 540.727,660.688 541.286,612.355 541.845,619.077 542.405,640.009 542.964,640.778 543.523,643.917 544.082,664.991 544.642,665.394 545.201,666.949 545.76,671.29 546.319,671.646 546.879,659.549 547.438,678.223 547.997,698.062 548.556,697.92 549.116,715.031 549.675,714.077 550.234,745.223 550.793,742.636 551.353,754.562 551.912,718.604 552.471,722.193 553.031,738.099 553.59,721.083 554.149,705.778 554.708,708.904 555.268,771.458 555.827,801.63 556.386,845.701 556.945,838.541 557.505,830.634 558.064,838.134 558.623,847.803 559.182,809.965 559.742,820.613 560.301,800.122 560.86,811.716 561.419,821.339 561.979,832.846 562.538,860.083 563.097,853.741 563.656,848.509 564.216,843.25 564.775,850.346 565.334,830.378 565.893,811.009 566.453,821.61 567.012,831.636 567.571,820.996 568.13,851.886 568.69,892.228 569.249,867.695 569.808,871.13 570.367,830.005 570.927,841.576 571.486,848.575 572.045,811.133 572.604,821.539 573.164,817.357 573.723,777.239 574.282,756.288 574.841,720.616 575.401,701.55 575.96,686.466 576.519,639.096 577.078,642.134 577.638,680.193 578.197,666.041 578.756,670.85 579.315,674.12 579.875,657.304 580.434,641.721 580.993,677.092 581.552,661.882 582.112,664.901 582.671,633.532 583.23,635.674 583.789,639.72 584.349,641.371 584.908,677.775 585.467,691.971 586.026,670.623 586.586,689.591 587.145,691.378 587.704,661.271 588.263,647.478 588.823,646.471 589.382,651.715 589.941,653.597 590.5,643.462 591.06,649.028 591.619,633.616 592.178,635.659 592.737,606.2 593.297,629.665 593.856,634.967 594.415,607.589 594.974,561.844 595.534,603.141 596.093,625.266 596.652,646.717 597.211,678.914 597.771,665.772 598.33,585.042 598.889,623.116 599.448,642.386 600.008,624.961 600.567,632.109 601.126,584.106 601.685,590.567 602.245,598.224 602.804,569.326 603.363,578.034 603.922,550.511 604.482,556.389 605.041,564.325 605.6,602.733 606.159,623.985 606.719,643.663 607.278,583.007 607.837,605.461 608.396,617.895 608.956,625.418 609.515,694.436 610.074,664.077 610.633,665.997 611.193,668.074 611.752,655.024 612.311,625.678 612.87,631.331 613.43,602.743 613.989,643.45 614.548,645.379 615.107,681.918 615.667,666.887 616.226,655.505 616.785,657.287 617.344,643.943 617.904,646.104 618.463,631.995 619.022,669.479 619.581,657.501 620.141,661.398 620.7,664.079 621.259,667.337 621.818,682.371 622.378,716.289 622.937,702.905 623.496,721.854 624.055,689.344 624.615,705.943 625.174,707.047 625.733,727.48 626.292,724.29 626.852,676.614 627.411,675.097 627.97,626.578 628.529,646.15 629.089,632.259 629.648,633.947 630.207,636.449 630.766,670.295 631.326,675.041 631.885,677.703 632.444,680.449 633.003,652.161 633.563,622.825 634.122,647.623 634.681,666.075 635.24,684.887 635.8,719.541 636.359,723.095 636.918,739.687 637.477,735.578 638.037,749.832 638.596,713.41 639.155,696.344 639.714,698.873 640.274,702.196 640.833,720.331 641.392,734.419 641.951,654.906 642.511,643.318 643.07,647.39 643.629,652.905 644.188,670.737 644.748,657.454 645.307,657.315 645.866,676.959 646.425,745.849 646.985,775.266 647.544,773.307 648.103,773.756 648.662,767.275 649.222,750.448 649.781,734.765 650.34,721.291 650.899,721.624 651.459,738.55 652.018,733.618 652.577,733.813 653.136,750.851 653.696,763.59 654.255,761.059 654.814,772.618 655.373,749.352 655.933,762.217 656.492,773.079 657.051,785 657.61,828.102 658.17,870.732 658.729,846.858 659.288,871.507 659.847,861.332 660.407,820.347 660.966,778.974 661.525,802.94 662.084,795.325 662.644,771.804 663.203,783.9 663.762,732.668 664.321,716.678 664.881,680.678 665.44,679.518 665.999,678.254 666.558,678.466 667.118,666.261 667.677,653.207 668.236,656.037 668.795,656.603 669.355,642.486 669.914,678.314 670.473,680.693 671.032,679.847 671.592,681.224 672.151,700.809 672.71,700.163 673.269,735.794 673.829,749.744 674.388,750.774 674.947,747.919 675.506,742.974 676.066,741.629 676.625,741.729 677.184,736.771 677.743,734.317 678.303,732.327 678.862,682.235 679.421,667.357 679.981,685.905 680.54,686.374 681.099,638.699 681.658,625.908 682.218,613.315 682.777,615.2 683.336,618.006 683.895,640.593 684.455,673.763 685.014,675.709 685.573,663.397 686.132,664.241 686.692,665.438 687.251,669.796 687.81,671.855 688.369,686.616 688.929,669.184 689.488,685.675 690.047,685.541 690.606,670.484 691.166,691.527 691.725,671.403 692.284,655.829 692.843,643.114 693.403,645.248 693.962,647.14 694.521,665.308 695.08,682.906 695.64,687.87 696.199,672.648 696.758,674.239 697.317,676.99 697.877,660.891 698.436,647.36 698.995,633.371 699.554,618.18 700.114,607.476 700.673,627.244 701.232,633.054 701.791,619.29 702.351,621.784 702.91,642.665 703.469,661.722 704.028,677.959 704.588,679.857 705.147,681.517 705.706,682.168 706.265,681.012 706.825,681.661 707.384,684.731 707.943,684.542 708.502,683.742 709.062,734.549 709.621,733.478 710.18,748.491 710.739,746.994 711.299,777.012 711.858,775.419 712.417,790.247 712.976,799.801 713.536,777.135 714.095,770.747 714.654,767.485 715.213,765.146 715.773,775.154 716.332,786.374 716.891,764.56 717.45,758.962 718.01,704.911 718.569,723.805 719.128,807.601 719.687,832.997 720.247,825.028 720.806,817.493 721.365,780.58 721.924,757.851 722.484,757.557 723.043,773.664 723.602,753.098 724.161,752.03 724.721,734.024 725.28,733.165 725.839,713.562 726.398,729.67 726.958,743.558 727.517,722.929 728.076,721.164 728.635,737.894 729.195,734.652 729.754,762.926 730.313,774.72 730.872,772.165 731.432,772.078 731.991,768.082 732.55,779.316 733.109,791.043 733.669,788.084 734.228,797.821 734.787,792.46 735.346,772.282 735.906,735.881 736.465,733.384 737.024,730.1 737.583,745.789 738.143,771.831 738.702,781.96 739.261,792.835 739.82,785.796 740.38,795.825 740.939,810.653 741.498,802.914 742.057,800.481 742.617,795.388 743.176,791.135 743.735,801.902 744.294,797.024 744.854,776.965 745.413,788.732 745.972,817.452 746.531,823.568 747.091,815.828 747.65,826.343 748.209,834.647 748.768,860.769 749.328,834.072 749.887,827.897 750.446,821.447 751.005,798.347 751.565,789.427 752.124,784.8 752.683,777.802 753.242,803.977 753.802,717.255 754.361,698.245 754.92,677.897 755.479,660.998 756.039,626.871 756.598,631.04 757.157,635.371 757.716,605.713 758.276,607.503 758.835,628.644 759.394,603.168 759.953,576.507 760.513,581.639 761.072,589.11 761.631,628.699 762.19,602.419 762.75,591.145 763.309,612.899 763.868,616.083 764.427,621.708 764.987,641.952 765.546,674.375 766.105,657.435 766.664,678.08 767.224,700.684 767.783,700.348 768.342,698.111 768.901,698.645 769.461,682.987 770.02,669.211 770.579,686.641 771.138,685.923 771.698,688.329 772.257,692.557 772.816,674.55 773.375,625.975 773.935,579.774 774.494,616.593 775.053,603.722 775.612,611.296 776.172,633.566 776.731,636.441 777.29,639.214 777.849,623.053 778.409,610.466 778.968,596.927 779.527,639.185 780.086,657.908 780.646,659.47 781.205,647.256 781.764,667.286 782.323,684.182 782.883,699.827 783.442,700.726 784.001,699.038 784.56,682.273 785.12,701.691 785.679,702.798 786.238,736.853 786.797,734.856 787.357,736.144 787.916,751.712 788.475,765.45 789.034,761.817 789.594,740.935 790.153,755.385 790.712,736.995 791.271,737.602 791.831,718.559 792.39,732.201 792.949,764.869 793.508,775.869 794.068,771.983 794.627,766.899 795.186,780.762 795.745,779.338 796.305,774.91 796.864,801.821 797.423,782.409 797.982,806.968 798.542,719.268 799.101,730.243 799.66,708.335 800.219,738.82 800.779,732.508 801.338,731.609 801.897,732.165 802.456,729.161 803.016,776.678 803.575,772.515 804.134,771.057 804.693,733.097 805.253,744.36 805.812,726.223 806.371,708.494 806.931,725.156 807.49,721.395 808.049,699.849 808.608,697.633 809.168,726.639 809.727,659.626 810.286,674.75 810.845,689.748 811.405,640.65 811.964,659.133 812.523,674.229 813.082,693.268 813.642,692.336 814.201,660.582 814.76,645.803 815.319,631.597 815.879,637.202 816.438,588.53 816.997,611.556 817.556,630.812 818.116,635.245 818.675,607.596 819.234,547.061 819.793,533.566 820.353,542.006 820.912,547.427 821.471,554.368 822.03,495.43 822.59,507.551 823.149,482.063 823.708,510.404 824.267,534.959 824.827,526.018 825.386,534.902 825.945,525.718 826.504,537.294 827.064,564.407 827.623,555.816 828.182,630.673 828.741,631.046 829.301,653.907 829.86,672.74 830.419,704.55 830.978,701.881 831.538,685.815 832.097,668.705 832.656,720.726 833.215,722.415 833.775,734.311 834.334,714.897 834.893,697.514 835.452,647.709 836.012,648.212 836.571,649.504 837.13,617.161 837.689,620.796 838.249,638.788 838.808,639.112 839.367,643.564 839.926,615.06 840.486,588.882 841.045,597.278 841.604,600.819 842.163,609.067 842.723,629.208 843.282,621.935 843.841,627.687 844.4,649.459 844.96,669.965 845.519,657.585 846.078,680.504 846.637,727.82 847.197,694.018 847.756,708.727 848.315,691.91 848.874,691.594 849.434,690.352 849.993,689.661 850.552,737.514 851.111,715.014 851.671,695.8 852.23,679.504 852.789,664.069 853.348,680.501 853.908,650.779 854.467,653.844 855.026,672.633 855.585,686.731 856.145,698 856.704,715.889 857.263,715.802 857.822,697.999 858.382,651.096 858.941,652.119 859.5,621.679 860.059,671.449 860.619,651.758 861.178,664.927 861.737,682.095 862.296,714.993 862.856,681.423 863.415,684.008 863.974,649.107 864.533,638.555 865.093,671.42 865.652,688.38 866.211,688.983 866.77,706.601 867.33,692.397 867.889,723.357 868.448,702.853 869.007,700.675 869.567,715.987 870.126,665.37 870.685,664.871 871.244,664.234 871.804,680.026 872.363,711.133 872.922,695.9 873.481,711.958 874.041,709.096 874.6,710.236 875.159,710.284 875.718,742.769 876.278,754.453 876.837,767.797 877.396,701.346 877.955,686.411 878.515,683.674 879.074,700.796 879.633,686.706 880.192,704.385 880.752,685.864 881.311,667.015 881.87,670.06 882.429,668.815 882.989,669.616 883.548,675.883 884.107,628.959 884.666,630.457 885.226,603.24 885.785,608.722 886.344,597.752 886.903,601.908 887.463,605.403 888.022,626.271 888.581,644.412 889.14,662.414 889.7,648.306 890.259,664.864 890.818,681.589 891.377,664.302 891.937,667.546 892.496,652.211 893.055,649.92 893.614,636.33 894.174,671.404 894.733,703.494 895.292,703.447 895.851,671.239 896.411,688.844 896.97,671.723 897.529,668.452 898.088,696.107 898.648,683.971 899.207,716.79 899.766,728.521 900.325,706.57 900.885,692.3 901.444,690.757 902.003,655.74 902.562,655.648 903.122,660.251 903.681,667.383 904.24,668.007 904.799,666.842 905.359,684.061 905.918,688.609 906.477,674.911 907.036,678.321 907.596,680.783 908.155,666.879 908.714,662.503 909.273,649.712 909.833,668.274 910.392,653.969 910.951,624.405 911.51,609.236 912.07,613.193 912.629,649.199 913.188,670.64 913.747,689.028 914.307,703.976 914.866,705.578 915.425,707.956 915.984,706.924 916.544,741.609 917.103,756.825 917.662,768.394 918.221,762.36 918.781,742.441 919.34,709.97 919.899,706.404 920.458,707.537 921.018,721.567 921.577,752.729 922.136,748.205 922.695,761.499 923.255,758.855 923.814,753.388 924.373,736.423 924.932,751.238 925.492,713.748 926.051,744.378 926.61,772.427 927.169,801.165 927.729,744.249 928.288,755.431 928.847,767.218 929.406,732.253 929.966,697.303 930.525,682.267 931.084,682.528 931.644,665.736 932.203,648.13 932.762,683.236 933.321,651.323 933.881,671.334 934.44,655.686 934.999,688.699 935.558,688.538 936.118,718.779 936.677,733.599 937.236,728.227 937.795,727.595 938.355,727.933 938.914,725.968 939.473,724.149 940.032,739.313 940.592,724.872 941.151,720.295 941.71,689.392 942.269,705.387 942.829,686.074 943.388,714.728 943.947,681.721 944.506,715.658 945.066,680.696 945.625,693.526 946.184,656.567 946.743,659.542 947.303,660.17 947.862,676.818 948.421,726.197 948.98,721.172 949.54,749.998 950.099,742.114 950.658,773.334 951.217,767.811 951.777,781.792 952.336,762.488 952.895,808.175 953.454,784.025 954.014,778.384 954.573,786.259 955.132,777.041 955.691,739.219 956.251,721.548 956.81,687.748 957.369,699.296 957.928,665.167 958.488,652.882 959.047,638.544 959.606,677.665 960.165,711.962 960.725,742.897 961.284,738.394 961.843,688.315 962.402,658.651 962.962,659.636 963.521,676.792 964.08,676.085 964.639,694.55 965.199,693.375 965.758,694.025 966.317,676.3 966.876,679.543 967.436,712.952 967.995,726.847 968.554,756.943 969.113,702.207 969.673,712.337 970.232,710.196 970.791,759.809 971.35,742.23 971.91,723.832 972.469,720.522 973.028,701.703 973.587,731.477 974.147,716.025 974.706,730.076 975.265,710.374 975.824,755.164 976.384,752.13 976.943,731.399 977.502,746.108 978.061,755.537 978.621,731.22 979.18,728.251 979.739,708.396 980.298,694.195 980.858,709.238 981.417,691.333 981.976,705.134 982.535,700.383 983.095,698.839 983.654,710.636 984.213,709.311 984.772,708.203 985.332,705.307 985.891,736.419 986.45,750.309 987.009,728.575 987.569,711.055 988.128,676.359 988.687,658.437 989.246,655.665 989.806,672.22 990.365,656.117 990.924,622.682 991.483,639.301 992.043,638.59 992.602,643.492 993.161,643.952 993.72,645.497 994.28,678.942 994.839,697.172 995.398,695.436 995.957,679.321 996.517,667.09 997.076,686.115 997.635,687.772 998.194,691.64 998.754,726.125 999.313,739.644 999.872,716.609 1000.43,664.441 1000.99,697.789 1001.55,681.462 1002.11,712.059 1002.67,743.003 1003.23,723.518 1003.79,721.765 1004.35,703.882 1004.91,704.608 1005.46,686.654 1006.02,718.759 1006.58,714.408 1007.14,715.197 1007.7,682.855 1008.26,697.899 1008.82,665.623 1009.38,651.287 1009.94,652.813 1010.5,672.252 1011.06,685.346 1011.62,635.671 1012.18,606.218 1012.73,559.934 1013.29,585.991 1013.85,559.584 1014.41,569.502 1014.97,594.337 1015.53,583.983 1016.09,625.813 1016.65,646.898 1017.21,650.869 1017.77,621.892 1018.33,675.542 1018.89,709.769 1019.45,729.386 1020.01,724.688 1020.56,738.073 1021.12,754.766 1021.68,735.16 1022.24,765.263 1022.8,745.649 1023.36,746.299 1023.92,759.933 1024.48,739.415 1025.04,733.03 1025.6,761.514 1026.16,740.013 1026.72,736.476 1027.28,718.565 1027.83,698.218 1028.39,677.305 1028.95,659.919 1029.51,676.472 1030.07,675.458 1030.63,692.257 1031.19,689.055 1031.75,686.962 1032.31,669.95 1032.87,673.233 1033.43,675.698 1033.99,692.455 1034.55,677.261 1035.1,660.348 1035.66,661.788 1036.22,645.888 1036.78,633.13 1037.34,636.868 1037.9,692.563 1038.46,707.783 1039.02,735.81 1039.58,736.925 1040.14,734.671 1040.7,734.919 1041.26,699.605 1041.82,700.71 1042.38,714.219 1042.93,715 1043.49,745.463 1044.05,756.4 1044.61,751.198 1045.17,731.406 1045.73,714.735 1046.29,708.505 1046.85,724.389 1047.41,722.327 1047.97,684.489 1048.53,651.967 1049.09,671.154 1049.65,686.34 1050.2,668.348 1050.76,669.037 1051.32,669.1 1051.88,671.92 1052.44,624.408 1053,611.085 1053.56,599.317 1054.12,587.782 1054.68,577.309 1055.24,583.987 1055.8,604.187 1056.36,607.983 1056.92,627.73 1057.48,662.522 1058.03,663.599 1058.59,662.14 1059.15,629.845 1059.71,613.922 1060.27,617.139 1060.83,621.307 1061.39,606.579 1061.95,605.99 1062.51,576.931 1063.07,549.67 1063.63,560.242 1064.19,535.2 1064.75,541.451 1065.3,565.199 1065.86,539.846 1066.42,545.017 1066.98,552.074 1067.54,561.754 1068.1,599.198 1068.66,622.356 1069.22,654.803 1069.78,605.933 1070.34,610.302 1070.9,597.636 1071.46,622.419 1072.02,623.621 1072.57,626.967 1073.13,629.849 1073.69,633.819 1074.25,687.327 1074.81,719.184 1075.37,703.335 1075.93,688.238 1076.49,673.715 1077.05,694.173 1077.61,705.022 1078.17,670.759 1078.73,718.486 1079.29,732.466 1079.85,715.08 1080.4,774.632 1080.96,787.484 1081.52,765.335 1082.08,776.314 1082.64,787.493 1083.2,786.613 1083.76,765.867 1084.32,790.393 1084.88,787.38 1085.44,799.08 1086,762.173 1086.56,791.336 1087.12,819.415 1087.67,814.363 1088.23,824.992 1088.79,800.916 1089.35,813.745 1089.91,828.198 1090.47,773.586 1091.03,817.877 1091.59,844.995 1092.15,852.42 1092.71,795.623 1093.27,789.338 1093.83,781.232 1094.39,773.701 1094.94,784.662 1095.5,748.106 1096.06,743.319 1096.62,720.562 1097.18,685.747 1097.74,655.398 1098.3,642.009 1098.86,645.455 1099.42,665.627 1099.98,698.167 1100.54,712.763 1101.1,697.494 1101.66,678.633 1102.22,661.116 1102.77,665.091 1103.33,679.128 1103.89,679.807 1104.45,681.996 1105.01,663.381 1105.57,665.909 1106.13,651.017 1106.69,634.858 1107.25,650.855 1107.81,667.615 1108.37,684.302 1108.93,685.335 1109.49,685.442 1110.04,666.545 1110.6,668.419 1111.16,703.784 1111.72,704.812 1112.28,703.264 1112.84,698.914 1113.4,713.885 1113.96,711.79 1114.52,694.06 1115.08,660.649 1115.64,643.916 1116.2,614.005 1116.76,619.179 1117.31,642.342 1117.87,645.548 1118.43,630.447 1118.99,616.691 1119.55,636.243 1120.11,637.678 1120.67,643.321 1121.23,681.379 1121.79,665.278 1122.35,682.607 1122.91,697.927 1123.47,716.364 1124.03,712.609 1124.59,726.11 1125.14,722.492 1125.7,719.047 1126.26,714.554 1126.82,697.522 1127.38,711.918 1127.94,711.304 1128.5,694.742 1129.06,691.165 1129.62,660.165 1130.18,677.612 1130.74,662.146 1131.3,665.399 1131.86,654.967 1132.41,656.092 1132.97,672.624 1133.53,654.444 1134.09,687.714 1134.65,670.909 1135.21,668.998 1135.77,718.41 1136.33,684.411 1136.89,684.328 1137.45,665.902 1138.01,681.412 1138.57,694.355 1139.13,661.355 1139.68,676.658 1140.24,646.753 1140.8,667.021 1141.36,683.22 1141.92,668.293 1142.48,654.195 1143.04,654.234 1143.6,640.6 1144.16,626.507 1144.72,629.514 1145.28,618.36 1145.84,654.51 1146.4,604.761 1146.96,641.215 1147.51,643.366 1148.07,626.685 1148.63,630.984 1149.19,617.682 1149.75,620.898 1150.31,642.475 1150.87,647.347 1151.43,667.245 1151.99,668.42 1152.55,668.091 1153.11,686.189 1153.67,700.306 1154.23,698.656 1154.78,681.679 1155.34,717.125 1155.9,699.945 1156.46,680.22 1157.02,695.961 1157.58,709.459 1158.14,724.228 1158.7,722.508 1159.26,720.549 1159.82,722.582 1160.38,754.379 1160.94,752.915 1161.5,715.99 1162.05,697.814 1162.61,698.992 1163.17,668.031 1163.73,637.096 1164.29,640.761 1164.85,593.784 1165.41,582.999 1165.97,587.853 1166.53,540.547 1167.09,565.078 1167.65,607.524 1168.21,611.724 1168.77,666.111 1169.33,681.795 1169.88,685.834 1170.44,684.969 1171,699.881 1171.56,731.878 1172.12,728.618 1172.68,707.57 1173.24,736.345 1173.8,762.458 1174.36,770.828 1174.92,769.489 1175.48,766.075 1176.04,757.027 1176.6,768.302 1177.15,751.544 1177.71,760.915 1178.27,772.07 1178.83,753.855 1179.39,745.66 1179.95,742.001 1180.51,771.01 1181.07,796.788 1181.63,755.401 1182.19,766.614 1182.75,777.146 1183.31,755.081 1183.87,733.971 1184.43,699.82 1184.98,698.359 1185.54,698.924 1186.1,679.111 1186.66,661.273 1187.22,663.013 1187.78,628.733 1188.34,644.829 1188.9,645.992 1189.46,647.429 1190.02,633.199 1190.58,636.242 1191.14,608.958 1191.7,614.251 1192.25,646.685 1192.81,650.448 1193.37,683.059 1193.93,680.43 1194.49,698.066 1195.05,679.002 1195.61,662.41 1196.17,674.744 1196.73,691.106 1197.29,725.79 1197.85,738.981 1198.41,754.381 1198.97,703.624 1199.52,686.985 1200.08,688.632 1200.64,674.506 1201.2,671.173 1201.76,668.709 1202.32,652.031 1202.88,666.574 1203.44,664.726 1204,660.648 1204.56,692.958 1205.12,693.152 1205.68,643.518 1206.24,628.122 1206.8,647.339 1207.35,631.482 1207.91,636.351 1208.47,622.862 1209.03,611.161 1209.59,614.015 1210.15,614.579 1210.71,663.408 1211.27,682.661 1211.83,682.467 1212.39,666.363 1212.95,683.023 1213.51,696.744 1214.07,663.287 1214.62,651.188 1215.18,651.822 1215.74,620.675 1216.3,623.483 1216.86,624.531 1217.42,594.642 1217.98,617.936 1218.54,604.259 1219.1,620.631 1219.66,654.273 1220.22,670.154 1220.78,669.459 1221.34,686.748 1221.89,736.235 1222.45,746.961 1223.01,712.266 1223.57,711.581 1224.13,728.134 1224.69,692.81 1225.25,661.671 1225.81,650.225 1226.37,621.246 1226.93,607.676 1227.49,645.739 1228.05,631.456 1228.61,616.384 1229.17,620.216 1229.72,607.741 1230.28,612.672 1230.84,633.173 1231.4,620.235 1231.96,623.413 1232.52,622.974 1233.08,623.725 1233.64,646.077 1234.2,666.474 1234.76,683.647 1235.32,667.281 1235.88,636.219 1236.44,642.515 1236.99,647.429 1237.55,713.903 1238.11,761.641 1238.67,778.743 1239.23,774.804 1239.79,772.514 1240.35,748.831 1240.91,727.906 1241.47,710.913 1242.03,678.121 1242.59,665.238 1243.15,666.361 1243.71,680.948 1244.26,679.22 1244.82,681.672 1245.38,680.443 1245.94,680.847 1246.5,678.186 1247.06,646.559 1247.62,616.036 1248.18,653.327 1248.74,668.823 1249.3,670.768 1249.86,655.503 1250.42,688.057 1250.98,699.83 1251.54,651.123 1252.09,650.77 1252.65,654.099 1253.21,624.151 1253.77,642.193 1254.33,646.009 1254.89,663.104 1255.45,661.036 1256.01,645.664 1256.57,631.572 1257.13,637.115 1257.69,623.41 1258.25,627.147 1258.81,666.471 1259.36,699.422 1259.92,681.618 1260.48,697.882 1261.04,680.849 1261.6,699.528 1262.16,681.826 1262.72,683.302 1263.28,688.302 1263.84,662.222 1264.4,682.392 1264.96,683.301 1265.52,683.181 1266.08,701.483 1266.63,717.539 1267.19,716.112 1267.75,678.45 1268.31,677.742 1268.87,691.13 1269.43,692.684 1269.99,705.638 1270.55,720.665 1271.11,735.322 1271.67,731.906 1272.23,727.715 1272.79,710.902 1273.35,712.77 1273.91,709.477 1274.46,739.924 1275.02,736.163 1275.58,715.644 1276.14,697.238 1276.7,682.072 1277.26,682.301 1277.82,684.839 1278.38,721.37 1278.94,722.82 1279.5,703.05 1280.06,684.74 1280.62,687.085 1281.18,670.067 1281.73,635.532 1282.29,654.68 1282.85,669.245 1283.41,705.037 1283.97,673.049 1284.53,671.366 1285.09,670.64 1285.65,671.399 1286.21,657.984 1286.77,677.646 1287.33,661.518 1287.89,662.267 1288.45,682.29 1289,699.947 1289.56,697.111 1290.12,699.036 1290.68,665.891 1291.24,685.206 1291.8,685.407 1292.36,685.515 1292.92,653.845 1293.48,657.507 1294.04,658.397 1294.6,629.819 1295.16,648.722 1295.72,663.571 1296.28,659.59 1296.83,646.654 1297.39,629.604 1297.95,632.621 1298.51,604.732 1299.07,622.488 1299.63,659.483 1300.19,691.228 1300.75,658.962 1301.31,647.649 1301.87,665.655 1302.43,650.192 1302.99,653.582 1303.55,638.522 1304.1,639.653 1304.66,626.182 1305.22,645.95 1305.78,629.886 1306.34,601.839 1306.9,605.257 1307.46,592.928 1308.02,566.327 1308.58,587.992 1309.14,611.428 1309.7,570.832 1310.26,575.719 1310.82,596.749 1311.38,604.071 1311.93,625.393 1312.49,617.406 1313.05,652.429 1313.61,671.794 1314.17,623.251 1314.73,621.576 1315.29,671.052 1315.85,689.067 1316.41,705.586 1316.97,722.665 1317.53,720.831 1318.09,719.918 1318.65,721.066 1319.2,771.328 1319.76,766.007 1320.32,793.034 1320.88,788.111 1321.44,766.695 1322,762.544 1322.56,755.911 1323.12,767.153 1323.68,778.827 1324.24,756.341 1324.8,751.842 1325.36,746.308 1325.92,728.087 1326.47,723.779 1327.03,707.102 1327.59,706.303 1328.15,691.659 1328.71,722.581 1329.27,722.046 1329.83,750.46 1330.39,732.407 1330.95,729.55 1331.51,763.88 1332.07,743.129 1332.63,709.839 1333.19,690.931 1333.75,655.826 1334.3,656.768 1334.86,691.453 1335.42,706.147 1335.98,701.447 1336.54,731.173 1337.1,744.802 1337.66,739.455 1338.22,719.448 1338.78,716.474 1339.34,665.574 1339.9,649.309 1340.46,654.574 1341.02,655.225 1341.57,657.74 1342.13,632.437 1342.69,651.058 1343.25,735.764 1343.81,701.44 1344.37,733.054 1344.93,731.389 1345.49,730.156 1346.05,728.422 1346.61,706.029 1347.17,687.91 1347.73,703.888 1348.29,736.088 1348.84,766.174 1349.4,773.913 1349.96,718.756 1350.52,764.385 1351.08,745.682 1351.64,761.773 1352.2,758.341 1352.76,704.298 1353.32,701.395 1353.88,735.293 1354.44,719.14 1355,700.343 1355.56,715.152 1356.12,726.085 1356.67,707.764 1357.23,741.628 1357.79,773.235 1358.35,765.161 1358.91,728.086 1359.47,644.592 1360.03,630.798 1360.59,652.909 1361.15,670.678 1361.71,676.225 1362.27,708.53 1362.83,690.619 1363.39,689.8 1363.94,705.726 1364.5,706.162 1365.06,691.394 1365.62,689.542 1366.18,673.627 1366.74,623.842 1367.3,660.358 1367.86,676.269 1368.42,646.689 1368.98,635.276 1369.54,637.265 1370.1,619.714 1370.66,656.443 1371.21,640.931 1371.77,626.266 1372.33,629.284 1372.89,631.128 1373.45,616.021 1374.01,620.03 1374.57,604.547 1375.13,640.52 1375.69,644.028 1376.25,645.382 1376.81,645.184 1377.37,663.522 1377.93,678.83 1378.49,680.271 1379.04,666.6 1379.6,701.574 1380.16,718.766 1380.72,763.386 1381.28,760.915 1381.84,758.499 1382.4,832.466 1382.96,808.681 1383.52,767.303 1384.08,731.692 1384.64,714.405 1385.2,709.883 1385.76,707.502 1386.31,707.917 1386.87,690.609 1387.43,687.959 1387.99,705.972 1388.55,706.274 1389.11,737.988 1389.67,767.052 1390.23,727.895 1390.79,724.244 1391.35,751 1391.91,726.771 1392.47,722.054 1393.03,785.179 1393.58,748.848 1394.14,742.267 1394.7,753.576 1395.26,797.734 1395.82,826.161 1396.38,818.937 1396.94,747.246 1397.5,746.923 1398.06,725.857 1398.62,707.004 1399.18,707.859 1399.74,688.649 1400.3,672.988 1400.86,674.141 1401.41,707.99 1401.97,709.114 1402.53,675.878 1403.09,663.584 1403.65,677.719 1404.21,658.036 1404.77,641.809 1405.33,678.846 1405.89,698.466 1406.45,698.622 1407.01,701.961 1407.57,697.159 1408.13,710.483 1408.68,722.816 1409.24,724.341 1409.8,723.655 1410.36,720.711 1410.92,720.516 1411.48,700.876 1412.04,683.748 1412.6,682.506 1413.16,695.249 1413.72,642.548 1414.28,625.896 1414.84,660.881 1415.4,663.49 1415.95,664.809 1416.51,651.886 1417.07,687.831 1417.63,685.332 1418.19,697.176 1418.75,676.722 1419.31,690.337 1419.87,671.338 1420.43,670.366 1420.99,654.467 1421.55,670.293 1422.11,704.369 1422.67,701.271 1423.23,683.803 1423.78,667.986 1424.34,672.524 1424.9,673.651 1425.46,691.861 1426.02,690.98 1426.58,708.298 1427.14,692.82 1427.7,727.373 1428.26,710.879 1428.82,695.345 1429.38,694.278 1429.94,692.626 1430.5,723.934 1431.05,739.028 1431.61,750.184 1432.17,746.187 1432.73,712.072 1433.29,710.815 1433.85,661.015 1434.41,644.017 1434.97,646.573 1435.53,614.803 1436.09,620.468 1436.65,605.53 1437.21,623.851 1437.77,578.017 1438.33,552.744 1438.88,560.515 1439.44,615.68 1440,573.917 1440.56,531.428 1441.12,505.35 1441.68,515.199 1442.24,524.95 1442.8,532.807 1443.36,561.135 1443.92,568.414 1444.48,606.072 1445.04,593.684 1445.6,599.568 1446.15,621.013 1446.71,609.415 1447.27,596.698 1447.83,586.191 1448.39,593.687 1448.95,597.69 1449.51,635.385 1450.07,640.282 1450.63,628.9 1451.19,632.774 1451.75,651.374 1452.31,634.864 1452.87,606.157 1453.42,594.952 1453.98,585.595 1454.54,592.359 1455.1,600.386 1455.66,651.295 1456.22,654.692 1456.78,640.197 1457.34,672.607 1457.9,671.604 1458.46,671.831 1459.02,691.801 1459.58,693.62 1460.14,709.924 1460.7,707.686 1461.25,705.615 1461.81,720.686 1462.37,768.17 1462.93,764.69 1463.49,745.11 1464.05,726.407 1464.61,706.174 1465.17,720.849 1465.73,717.752 1466.29,698.549 1466.85,680.625 1467.41,680.761 1467.97,693.836 1468.52,706.096 1469.08,703.998 1469.64,699.201 1470.2,711.757 1470.76,745.042 1471.32,707.438 1471.88,704.657 1472.44,720.809 1473,750.403 1473.56,762.019 1474.12,759.344 1474.68,757.271 1475.24,739.17 1475.79,749.541 1476.35,782.792 1476.91,758.336 1477.47,739.97 1478.03,737.947 1478.59,719.33 1479.15,718.693 1479.71,733.899 1480.27,750.215 1480.83,700.073 1481.39,698.521 1481.95,680.219 1482.51,681.811 1483.07,665.295 1483.62,684.511 1484.18,669.24 1484.74,687.556 1485.3,721.67 1485.86,701.018 1486.42,668.936 1486.98,704.395 1487.54,703.163 1488.1,718.717 1488.66,698.628 1489.22,715.311 1489.78,713.338 1490.34,682.163 1490.89,760.573 1491.45,773.859 1492.01,756.029 1492.57,766.802 1493.13,777.501 1493.69,805.732 1494.25,815.345 1494.81,808.951 1495.37,787.17 1495.93,766.224 1496.49,762.31 1497.05,759.915 1497.61,752.405 1498.16,751.186 1498.72,730.279 1499.28,725.479 1499.84,707.399 1500.4,708.277 1500.96,706.877 1501.52,707.136 1502.08,722.928 1502.64,720.957 1503.2,716.743 1503.76,698.29 1504.32,648.344 1504.88,634.482 1505.44,636.405 1505.99,606.491 1506.55,630.985 1507.11,663.579 1507.67,694.556 1508.23,680.04 1508.79,695.85 1509.35,694.024 1509.91,674.598 1510.47,660.624 1511.03,659.408 1511.59,657.064 1512.15,675.716 1512.71,721.821 1513.26,691.182 1513.82,723.363 1514.38,704.142 1514.94,669.107 1515.5,688.664 1516.06,716.268 1516.62,681.039 1517.18,714.647 1517.74,698.842 1518.3,702.725 1518.86,719.716 1519.42,732.623 1519.98,699.322 1520.53,745.111 1521.09,738.912 1521.65,752.794 1522.21,733.489 1522.77,730.87 1523.33,714.924 1523.89,708.386 1524.45,706.736 1525.01,717.933 1525.57,697.885 1526.13,743.795 1526.69,752.866 1527.25,733.324 1527.81,729.909 1528.36,727.072 1528.92,708.695 1529.48,705.31 1530.04,690.475 1530.6,676.135 1531.16,657.863 1531.72,660.776 1532.28,661.745 1532.84,665.362 1533.4,684.649 1533.96,669.267 1534.52,667.955 1535.08,654.198 1535.63,643.698 1536.19,644.841 1536.75,647.093 1537.31,694.803 1537.87,643.894 1538.43,644.46 1538.99,663.284 1539.55,660.971 1540.11,675.806 1540.67,693.533 1541.23,694.377 1541.79,710.881 1542.35,693.852 1542.9,709.424 1543.46,693.833 1544.02,674.617 1544.58,657.851 1545.14,640.522 1545.7,625.284 1546.26,613.899 1546.82,603.06 1547.38,540.063 1547.94,547.336 1548.5,555.644 1549.06,593.163 1549.62,583.154 1550.18,589.151 1550.73,594.001 1551.29,598.559 1551.85,619.773 1552.41,639.938 1552.97,676.843 1553.53,661.081 1554.09,692.064 1554.65,707.153 1555.21,719.951 1555.77,702.629 1556.33,716.094 1556.89,761.471 1557.45,742.661 1558,723.951 1558.56,735.704 1559.12,732.037 1559.68,728.481 1560.24,737.448 1560.8,715.574 1561.36,712.61 1561.92,671.768 1562.48,689.819 1563.04,704.083 1563.6,719.259 1564.16,716.109 1564.72,717.692 1565.28,665.704 1565.83,681.281 1566.39,681.297 1566.95,682.274 1567.51,715.855 1568.07,747.791 1568.63,774.813 1569.19,791.106 1569.75,770.037 1570.31,766.095 1570.87,744.992 1571.43,771.999 1571.99,750.862 1572.55,765.932 1573.1,758.18 1573.66,754.964 1574.22,735.795 1574.78,702.615 1575.34,685.104 1575.9,703.245 1576.46,685.053 1577.02,688.029 1577.58,734.653 1578.14,684.71 1578.7,682.407 1579.26,679.011 1579.82,696.814 1580.37,732.062 1580.93,697.345 1581.49,697.461 1582.05,646.142 1582.61,665.306 1583.17,633.465 1583.73,649.238 1584.29,618.911 1584.85,637.964 1585.41,608.34 1585.97,630.049 1586.53,617.978 1587.09,622.199 1587.65,592.921 1588.2,598.555 1588.76,589.227 1589.32,594.027 1589.88,648.976 1590.44,666.351 1591,666.278 1591.56,651.332 1592.12,673.786 1592.68,659.647 1593.24,647.081 1593.8,679.776 1594.36,707.878 1594.92,712.75 1595.47,681.131 1596.03,684.054 1596.59,701.872 1597.15,733.202 1597.71,699.315 1598.27,718.353 1598.83,731.573 1599.39,698.447 1599.95,699.091 1600.51,698.683 1601.07,713.26 1601.63,711.691 1602.19,696.752 1602.74,678.463 1603.3,679.79 1603.86,647.985 1604.42,620.432 1604.98,624.806 1605.54,631.097 1606.1,633.442 1606.66,621.156 1607.22,624.495 1607.78,631.174 1608.34,619.209 1608.9,619.611 1609.46,637.176 1610.02,621.417 1610.57,622.39 1611.13,630.334 1611.69,634.65 1612.25,622.562 1612.81,655.492 1613.37,640.978 1613.93,690.644 1614.49,671.001 1615.05,683.727 1615.61,697.924 1616.17,712.121 1616.73,744.274 1617.29,710.952 1617.84,725.599 1618.4,737.892 1618.96,765.48 1619.52,776.21 1620.08,792.156 1620.64,784.137 1621.2,776.657 1621.76,786.853 1622.32,746.785 1622.88,745.402 1623.44,725.805 1624,705.061 1624.56,720.652 1625.11,733.428 1625.67,698.278 1626.23,684.203 1626.79,685.017 1627.35,686.731 1627.91,705.162 1628.47,704.035 1629.03,701.435 1629.59,733.363 1630.15,732.682 1630.71,716.611 1631.27,717.889 1631.83,700.226 1632.39,682.827 1632.94,680.358 1633.5,681.965 1634.06,698.786 1634.62,713.303 1635.18,713.547 1635.74,726.262 1636.3,740.24 1636.86,787.972 1637.42,781.76 1637.98,778.459 1638.54,773.754 1639.1,754.252 1639.66,752.113 1640.21,763.631 1640.77,762.018 1641.33,758.428 1641.89,769.41 1642.45,779.408 1643.01,756.407 1643.57,738.243 1644.13,687.57 1644.69,653.837 1645.25,639.338 1645.81,641.223 1646.37,625.25 1646.93,614.839 1647.48,636.6 1648.04,593.272 1648.6,597.83 1649.16,571.678 1649.72,557.996 1650.28,531.892 1650.84,540.531 1651.4,518.724 1651.96,479.372 1652.52,508.012 1653.08,502.661 1653.64,511.436 1654.2,535.941 1654.76,542.438 1655.31,552.14 1655.87,573.589 1656.43,565.503 1656.99,572.35 1657.55,595.103 1658.11,599.353 1658.67,603.16 1659.23,606.784 1659.79,678.416 1660.35,694.276 1660.91,676.685 1661.47,679.347 1662.03,678.794 1662.58,678.664 1663.14,677.372 1663.7,712.749 1664.26,679.119 1664.82,695.832 1665.38,729.953 1665.94,713.079 1666.5,693.287 1667.06,707.718 1667.62,708.161 1668.18,688.661 1668.74,706.809 1669.3,672.598 1669.85,737.156 1670.41,734.747 1670.97,749.924 1671.53,714.886 1672.09,716.694 1672.65,714.388 1673.21,711.999 1673.77,693.44 1674.33,709.744 1674.89,708.943 1675.45,724.951 1676.01,771.332 1676.57,735.047 1677.13,751.232 1677.68,764.048 1678.24,744.523 1678.8,740.175 1679.36,722.414 1679.92,736.628 1680.48,737.212 1681.04,717.843 1681.6,686.444 1682.16,688.41 1682.72,670.86 1683.28,671.411 1683.84,686.219 1684.4,704.912 1684.95,738.449 1685.51,768.179 1686.07,765.696 1686.63,758.822 1687.19,758.177 1687.75,737.923 1688.31,685.912 1688.87,656.378 1689.43,687.404 1689.99,638.52 1690.55,628.678 1691.11,631.673 1691.67,667.337 1692.23,650.837 1692.78,653.891 1693.34,673.073 1693.9,671.881 1694.46,688.943 1695.02,722.552 1695.58,733.163 1696.14,699.612 1696.7,668.81 1697.26,688.698 1697.82,687.977 1698.38,686.772 1698.94,640.463 1699.5,642.806 1700.05,645.536 1700.61,681.489 1701.17,714.409 1701.73,698.057 1702.29,679.554 1702.85,645.115 1703.41,665.77 1703.97,667.481 1704.53,668.7 1705.09,700.907 1705.65,711.809 1706.21,692.662 1706.77,678.444 1707.32,679.168 1707.88,677.263 1708.44,659.573 1709,677.009 1709.56,643.664 1710.12,693.554 1710.68,711.434 1711.24,707.889 1711.8,674.42 1712.36,677.859 1712.92,662.649 1713.48,681.669 1714.04,680.662 1714.6,731.049 1715.15,729.226 1715.71,706.694 1716.27,704.351 1716.83,722.552 1717.39,753.378 1717.95,763.061 1718.51,694.562 1719.07,696.085 1719.63,698.127 1720.19,680.154 1720.75,680.949 1721.31,693.661 1721.87,676.089 1722.42,640.805 1722.98,659.414 1723.54,659.178 1724.1,680.243 1724.66,680.1 1725.22,681.737 1725.78,679.723 1726.34,662.522 1726.9,679.715 1727.46,697.82 1728.02,701.537 1728.58,733.131 1729.14,731.241 1729.69,694.575 1730.25,660.076 1730.81,610.355 1731.37,613.431 1731.93,617.629 1732.49,618.926 1733.05,622.767 1733.61,657.889 1734.17,626.634 1734.73,632.403 1735.29,589.351 1735.85,597.364 1736.41,603.694 1736.97,618.943 1737.52,636.788 1738.08,652.946 1738.64,635.84 1739.2,606.659 1739.76,594.768 1740.32,582.363 1740.88,587.279 1741.44,576.044 1742,613.354 1742.56,636.939 1743.12,656.765 1743.68,661.468 1744.24,644.515 1744.79,632.017 1745.35,637.395 1745.91,687.712 1746.47,671.257 1747.03,657.775 1747.59,642.889 1748.15,643.985 1748.71,644.261 1749.27,648.043 1749.83,651.821 1750.39,641.472 1750.95,627.579 1751.51,681.873 1752.06,679.369 1752.62,682.124 1753.18,685.12 1753.74,669.762 1754.3,702.229 1754.86,685.298 1755.42,666.204 1755.98,669.441 1756.54,654.874 1757.1,672.569 1757.66,674.043 1758.22,673.76 1758.78,672.515 1759.34,672.785 1759.89,671.848 1760.45,704.732 1761.01,655.578 1761.57,670.051 1762.13,689.197 1762.69,668.851 1763.25,637.79 1763.81,660.085 1764.37,644 1764.93,645.536 1765.49,645.21 1766.05,634.019 1766.61,652.676 1767.16,648.374 1767.72,666.727 1768.28,651.77 1768.84,669.491 1769.4,673.199 1769.96,691.144 1770.52,695.644 1771.08,728.429 1771.64,726.619 1772.2,759.783 1772.76,740.645 1773.32,753.309 1773.88,750.779 1774.43,748.651 1774.99,761.863 1775.55,742.466 1776.11,756.404 1776.67,767.159 1777.23,747.453 1777.79,713.801 1778.35,732.59 1778.91,745.912 1779.47,759.509 1780.03,757.889 1780.59,770.779 1781.15,801.945 1781.71,747.591 1782.26,761.305 1782.82,776.235 1783.38,771.986 1783.94,734.162 1784.5,732.345 1785.06,713.97 1785.62,696.233 1786.18,664.368 1786.74,680.981 1787.3,674.035 1787.86,676.785 1788.42,692.502 1788.98,690.835 1789.53,672.611 1790.09,687.509 1790.65,657.197 1791.21,695.883 1791.77,665.22 1792.33,700.242 1792.89,702.103 1793.45,685.711 1794.01,683.175 1794.57,681.841 1795.13,665.119 1795.69,666.065 1796.25,683.471 1796.8,683.279 1797.36,683.699 1797.92,682.655 1798.48,681.913 1799.04,681.754 1799.6,684.116 1800.16,748.139 1800.72,758.139 1801.28,721.583 1801.84,715.476 1802.4,713.488 1802.96,696.118 1803.52,695.46 1804.08,727.543 1804.63,694.271 1805.19,705.523 1805.75,669.191 1806.31,670.526 1806.87,691.818 1807.43,689.389 1807.99,701.829 1808.55,700.924 1809.11,731.528 1809.67,694.056 1810.23,674.119 1810.79,676.258 1811.35,657.673 1811.9,675.36 1812.46,691.549 1813.02,689.87 1813.58,700.393 1814.14,696.28 1814.7,694.576 1815.26,675.757 1815.82,690.671 1816.38,688.489 1816.94,686.89 1817.5,688.148 1818.06,686.511 1818.62,717.278 1819.18,767.363 1819.73,733.846 1820.29,762.211 1820.85,771.516 1821.41,768.637 1821.97,810.64 1822.53,786.566 1823.09,779.807 1823.65,790.588 1824.21,785.521 1824.77,779.446 1825.33,774.007 1825.89,751.621 1826.45,733.007 1827,746.121 1827.56,723.704 1828.12,719.91 1828.68,734.779 1829.24,729.529 1829.8,711.228 1830.36,673.425 1830.92,703.785 1831.48,700.627 1832.04,686.897 1832.6,654.793 1833.16,639.174 1833.72,659.301 1834.27,659.259 1834.83,660.164 1835.39,677.513 1835.95,660.569 1836.51,676.536 1837.07,689.456 1837.63,672.928 1838.19,674.175 \"/>\n<path clip-path=\"url(#clip763)\" d=\"M720.247 692.66 L720.806 692.66 L721.365 692.66 L721.924 692.66 L722.484 692.66 L723.043 692.66 L723.602 692.66 L724.161 692.66 L724.721 692.66 L725.28 692.66 L725.839 692.66 L726.398 692.66 L726.958 692.66 L727.517 692.66 L728.076 692.66 L728.635 692.66 L729.195 692.66 L729.754 692.66 L730.313 692.66 L730.872 692.66 L731.432 692.66 L731.991 692.66 L732.55 692.66 L733.109 692.66 L733.669 692.66 L734.228 692.66 L734.787 692.66 L735.346 692.66 L735.906 692.66 L736.465 692.66 L737.024 692.66 L737.583 692.66 L738.143 692.66 L738.702 692.66 L739.261 692.66 L739.82 692.66 L740.38 692.66 L740.939 692.66 L741.498 692.66 L742.057 692.66 L742.617 692.66 L743.176 692.66 L743.735 692.66 L744.294 692.66 L744.854 692.66 L745.413 692.66 L745.972 692.66 L746.531 692.66 L747.091 692.66 L747.65 692.66 L748.209 692.66 L748.768 692.66 L749.328 692.66 L749.887 692.66 L750.446 692.66 L751.005 692.66 L751.565 692.66 L752.124 692.66 L752.683 692.66 L753.242 692.66 L753.802 692.66 L754.361 692.66 L754.92 692.66 L755.479 692.66 L756.039 692.66 L756.598 692.66 L757.157 692.66 L757.716 692.66 L758.276 692.66 L758.835 692.66 L759.394 692.66 L759.953 692.66 L760.513 692.66 L761.072 692.66 L761.631 692.66 L762.19 692.66 L762.75 692.66 L763.309 692.66 L763.868 692.66 L764.427 692.66 L764.987 692.66 L765.546 692.66 L766.105 692.66 L766.664 692.66 L767.224 692.66 L767.783 692.66 L768.342 692.66 L768.901 692.66 L769.461 692.66 L770.02 692.66 L770.579 692.66 L771.138 692.66 L771.698 692.66 L772.257 692.66 L772.816 692.66 L773.375 692.66 L773.935 692.66 L774.494 692.66 L775.053 692.66 L775.612 692.66 L776.172 692.66 L776.731 692.66 L777.29 692.66 L777.849 692.66 L778.409 692.66 L778.968 692.66 L779.527 692.66 L780.086 692.66 L780.646 692.66 L781.205 692.66 L781.764 692.66 L782.323 692.66 L782.883 692.66 L783.442 692.66 L784.001 692.66 L784.56 692.66 L785.12 692.66 L785.679 692.66 L786.238 692.66 L786.797 692.66 L787.357 692.66 L787.916 692.66 L788.475 692.66 L789.034 692.66 L789.594 692.66 L790.153 692.66 L790.712 692.66 L791.271 692.66 L791.831 692.66 L792.39 692.66 L792.949 692.66 L793.508 692.66 L794.068 692.66 L794.627 692.66 L795.186 692.66 L795.745 692.66 L796.305 692.66 L796.864 692.66 L797.423 692.66 L797.982 692.66 L798.542 692.66 L799.101 692.66 L799.66 692.66 L800.219 692.66 L800.779 692.66 L801.338 692.66 L801.897 692.66 L802.456 692.66 L803.016 692.66 L803.575 692.66 L804.134 692.66 L804.693 692.66 L805.253 692.66 L805.812 692.66 L806.371 692.66 L806.931 692.66 L807.49 692.66 L808.049 692.66 L808.608 692.66 L809.168 692.66 L809.727 692.66 L810.286 692.66 L810.845 692.66 L811.405 692.66 L811.964 692.66 L812.523 692.66 L813.082 692.66 L813.642 692.66 L814.201 692.66 L814.76 692.66 L815.319 692.66 L815.879 692.66 L816.438 692.66 L816.997 692.66 L817.556 692.66 L818.116 692.66 L818.675 692.66 L819.234 692.66 L819.793 692.66 L820.353 692.66 L820.912 692.66 L821.471 692.66 L822.03 692.66 L822.59 692.66 L823.149 692.66 L823.708 692.66 L824.267 692.66 L824.827 692.66 L825.386 692.66 L825.945 692.66 L826.504 692.66 L827.064 692.66 L827.623 692.66 L828.182 692.66 L828.741 692.66 L829.301 692.66 L829.86 692.66 L830.419 692.66 L830.978 692.66 L831.538 692.66 L832.097 692.66 L832.656 692.66 L833.215 692.66 L833.775 692.66 L834.334 692.66 L834.893 692.66 L835.452 692.66 L836.012 692.66 L836.571 692.66 L837.13 692.66 L837.689 692.66 L838.249 692.66 L838.808 692.66 L839.367 692.66 L839.926 692.66 L840.486 692.66 L841.045 692.66 L841.604 692.66 L842.163 692.66 L842.723 692.66 L843.282 692.66 L843.841 692.66 L844.4 692.66 L844.96 692.66 L845.519 692.66 L846.078 692.66 L846.637 692.66 L847.197 692.66 L847.756 692.66 L848.315 692.66 L848.874 692.66 L849.434 692.66 L849.993 692.66 L850.552 692.66 L851.111 692.66 L851.671 692.66 L852.23 692.66 L852.789 692.66 L853.348 692.66 L853.908 692.66 L854.467 692.66 L855.026 692.66 L855.585 692.66 L856.145 692.66 L856.704 692.66 L857.263 692.66 L857.822 692.66 L858.382 692.66 L858.941 692.66 L859.5 692.66 L860.059 692.66 L860.619 692.66 L861.178 692.66 L861.737 692.66 L862.296 692.66 L862.856 692.66 L863.415 692.66 L863.974 692.66 L864.533 692.66 L865.093 692.66 L865.652 692.66 L866.211 692.66 L866.77 692.66 L867.33 692.66 L867.889 692.66 L868.448 692.66 L869.007 692.66 L869.567 692.66 L870.126 692.66 L870.685 692.66 L871.244 692.66 L871.804 692.66 L872.363 692.66 L872.922 692.66 L873.481 692.66 L874.041 692.66 L874.6 692.66 L875.159 692.66 L875.718 692.66 L876.278 692.66 L876.837 692.66 L877.396 692.66 L877.955 692.66 L878.515 692.66 L879.074 692.66 L879.633 692.66 L880.192 692.66 L880.752 692.66 L881.311 692.66 L881.87 692.66 L882.429 692.66 L882.989 692.66 L883.548 692.66 L884.107 692.66 L884.666 692.66 L885.226 692.66 L885.785 692.66 L886.344 692.66 L886.903 692.66 L887.463 692.66 L888.022 692.66 L888.581 692.66 L889.14 692.66 L889.7 692.66 L890.259 692.66 L890.818 692.66 L891.377 692.66 L891.937 692.66 L892.496 692.66 L893.055 692.66 L893.614 692.66 L894.174 692.66 L894.733 692.66 L895.292 692.66 L895.851 692.66 L896.411 692.66 L896.97 692.66 L897.529 692.66 L898.088 692.66 L898.648 692.66 L899.207 692.66 L899.766 692.66 L900.325 692.66 L900.885 692.66 L901.444 692.66 L902.003 692.66 L902.562 692.66 L903.122 692.66 L903.681 692.66 L904.24 692.66 L904.799 692.66 L905.359 692.66 L905.918 692.66 L906.477 692.66 L907.036 692.66 L907.596 692.66 L908.155 692.66 L908.714 692.66 L909.273 692.66 L909.833 692.66 L910.392 692.66 L910.951 692.66 L911.51 692.66 L912.07 692.66 L912.629 692.66 L913.188 692.66 L913.747 692.66 L914.307 692.66 L914.866 692.66 L915.425 692.66 L915.984 692.66 L916.544 692.66 L917.103 692.66 L917.662 692.66 L918.221 692.66 L918.781 692.66 L919.34 692.66 L919.899 692.66 L920.458 692.66 L921.018 692.66 L921.577 692.66 L922.136 692.66 L922.695 692.66 L923.255 692.66 L923.814 692.66 L924.373 692.66 L924.932 692.66 L925.492 692.66 L926.051 692.66 L926.61 692.66 L927.169 692.66 L927.729 692.66 L928.288 692.66 L928.847 692.66 L929.406 692.66 L929.966 692.66 L930.525 692.66 L931.084 692.66 L931.644 692.66 L932.203 692.66 L932.762 692.66 L933.321 692.66 L933.881 692.66 L934.44 692.66 L934.999 692.66 L935.558 692.66 L936.118 692.66 L936.677 692.66 L937.236 692.66 L937.795 692.66 L938.355 692.66 L938.914 692.66 L939.473 692.66 L940.032 692.66 L940.592 692.66 L941.151 692.66 L941.71 692.66 L942.269 692.66 L942.829 692.66 L943.388 692.66 L943.947 692.66 L944.506 692.66 L945.066 692.66 L945.625 692.66 L946.184 692.66 L946.743 692.66 L947.303 692.66 L947.862 692.66 L948.421 692.66 L948.98 692.66 L949.54 692.66 L950.099 692.66 L950.658 692.66 L951.217 692.66 L951.777 692.66 L952.336 692.66 L952.895 692.66 L953.454 692.66 L954.014 692.66 L954.573 692.66 L955.132 692.66 L955.691 692.66 L956.251 692.66 L956.81 692.66 L957.369 692.66 L957.928 692.66 L958.488 692.66 L959.047 692.66 L959.606 692.66 L960.165 692.66 L960.725 692.66 L961.284 692.66 L961.843 692.66 L962.402 692.66 L962.962 692.66 L963.521 692.66 L964.08 692.66 L964.639 692.66 L965.199 692.66 L965.758 692.66 L966.317 692.66 L966.876 692.66 L967.436 692.66 L967.995 692.66 L968.554 692.66 L969.113 692.66 L969.673 692.66 L970.232 692.66 L970.791 692.66 L971.35 692.66 L971.91 692.66 L972.469 692.66 L973.028 692.66 L973.587 692.66 L974.147 692.66 L974.706 692.66 L975.265 692.66 L975.824 692.66 L976.384 692.66 L976.943 692.66 L977.502 692.66 L978.061 692.66 L978.621 692.66 L979.18 692.66 L979.739 692.66 L980.298 692.66 L980.858 692.66 L981.417 692.66 L981.976 692.66 L982.535 692.66 L983.095 692.66 L983.654 692.66 L984.213 692.66 L984.772 692.66 L985.332 692.66 L985.891 692.66 L986.45 692.66 L987.009 692.66 L987.569 692.66 L988.128 692.66 L988.687 692.66 L989.246 692.66 L989.806 692.66 L990.365 692.66 L990.924 692.66 L991.483 692.66 L992.043 692.66 L992.602 692.66 L993.161 692.66 L993.72 692.66 L994.28 692.66 L994.839 692.66 L995.398 692.66 L995.957 692.66 L996.517 692.66 L997.076 692.66 L997.635 692.66 L998.194 692.66 L998.754 692.66 L999.313 692.66 L999.872 692.66 L1000.43 692.66 L1000.99 692.66 L1001.55 692.66 L1002.11 692.66 L1002.67 692.66 L1003.23 692.66 L1003.79 692.66 L1004.35 692.66 L1004.91 692.66 L1005.46 692.66 L1006.02 692.66 L1006.58 692.66 L1007.14 692.66 L1007.7 692.66 L1008.26 692.66 L1008.82 692.66 L1009.38 692.66 L1009.94 692.66 L1010.5 692.66 L1011.06 692.66 L1011.62 692.66 L1012.18 692.66 L1012.73 692.66 L1013.29 692.66 L1013.85 692.66 L1014.41 692.66 L1014.97 692.66 L1015.53 692.66 L1016.09 692.66 L1016.65 692.66 L1017.21 692.66 L1017.77 692.66 L1018.33 692.66 L1018.89 692.66 L1019.45 692.66 L1020.01 692.66 L1020.56 692.66 L1021.12 692.66 L1021.68 692.66 L1022.24 692.66 L1022.8 692.66 L1023.36 692.66 L1023.92 692.66 L1024.48 692.66 L1025.04 692.66 L1025.6 692.66 L1026.16 692.66 L1026.72 692.66 L1027.28 692.66 L1027.83 692.66 L1028.39 692.66 L1028.95 692.66 L1029.51 692.66 L1030.07 692.66 L1030.63 692.66 L1031.19 692.66 L1031.75 692.66 L1032.31 692.66 L1032.87 692.66 L1033.43 692.66 L1033.99 692.66 L1034.55 692.66 L1035.1 692.66 L1035.66 692.66 L1036.22 692.66 L1036.78 692.66 L1037.34 692.66 L1037.9 692.66 L1038.46 692.66 L1039.02 692.66 L1039.58 692.66 L1040.14 692.66 L1040.7 692.66 L1041.26 692.66 L1041.82 692.66 L1042.38 692.66 L1042.93 692.66 L1043.49 692.66 L1044.05 692.66 L1044.61 692.66 L1045.17 692.66 L1045.73 692.66 L1046.29 692.66 L1046.85 692.66 L1047.41 692.66 L1047.97 692.66 L1048.53 692.66 L1049.09 692.66 L1049.65 692.66 L1050.2 692.66 L1050.76 692.66 L1051.32 692.66 L1051.88 692.66 L1052.44 692.66 L1053 692.66 L1053.56 692.66 L1054.12 692.66 L1054.68 692.66 L1055.24 692.66 L1055.8 692.66 L1056.36 692.66 L1056.92 692.66 L1057.48 692.66 L1058.03 692.66 L1058.59 692.66 L1059.15 692.66 L1059.71 692.66 L1060.27 692.66 L1060.83 692.66 L1061.39 692.66 L1061.95 692.66 L1062.51 692.66 L1063.07 692.66 L1063.63 692.66 L1064.19 692.66 L1064.75 692.66 L1065.3 692.66 L1065.86 692.66 L1066.42 692.66 L1066.98 692.66 L1067.54 692.66 L1068.1 692.66 L1068.66 692.66 L1069.22 692.66 L1069.78 692.66 L1070.34 692.66 L1070.9 692.66 L1071.46 692.66 L1072.02 692.66 L1072.57 692.66 L1073.13 692.66 L1073.69 692.66 L1074.25 692.66 L1074.81 692.66 L1075.37 692.66 L1075.93 692.66 L1076.49 692.66 L1077.05 692.66 L1077.61 692.66 L1078.17 692.66 L1078.73 692.66 L1079.29 692.66 L1079.85 692.66 L1080.4 692.66 L1080.96 692.66 L1081.52 692.66 L1082.08 692.66 L1082.64 692.66 L1083.2 692.66 L1083.76 692.66 L1084.32 692.66 L1084.88 692.66 L1085.44 692.66 L1086 692.66 L1086.56 692.66 L1087.12 692.66 L1087.67 692.66 L1088.23 692.66 L1088.79 692.66 L1089.35 692.66 L1089.91 692.66 L1090.47 692.66 L1091.03 692.66 L1091.59 692.66 L1092.15 692.66 L1092.71 692.66 L1093.27 692.66 L1093.83 692.66 L1094.39 692.66 L1094.94 692.66 L1095.5 692.66 L1096.06 692.66 L1096.62 692.66 L1097.18 692.66 L1097.74 692.66 L1098.3 692.66 L1098.86 692.66 L1099.42 692.66 L1099.98 692.66 L1100.54 692.66 L1101.1 692.66 L1101.66 692.66 L1102.22 692.66 L1102.77 692.66 L1103.33 692.66 L1103.89 692.66 L1104.45 692.66 L1105.01 692.66 L1105.57 692.66 L1106.13 692.66 L1106.69 692.66 L1107.25 692.66 L1107.81 692.66 L1108.37 692.66 L1108.93 692.66 L1109.49 692.66 L1110.04 692.66 L1110.6 692.66 L1111.16 692.66 L1111.72 692.66 L1112.28 692.66 L1112.84 692.66 L1113.4 692.66 L1113.96 692.66 L1114.52 692.66 L1115.08 692.66 L1115.64 692.66 L1116.2 692.66 L1116.76 692.66 L1117.31 692.66 L1117.87 692.66 L1118.43 692.66 L1118.99 692.66 L1119.55 692.66 L1120.11 692.66 L1120.67 692.66 L1121.23 692.66 L1121.79 692.66 L1122.35 692.66 L1122.91 692.66 L1123.47 692.66 L1124.03 692.66 L1124.59 692.66 L1125.14 692.66 L1125.7 692.66 L1126.26 692.66 L1126.82 692.66 L1127.38 692.66 L1127.94 692.66 L1128.5 692.66 L1129.06 692.66 L1129.62 692.66 L1130.18 692.66 L1130.74 692.66 L1131.3 692.66 L1131.86 692.66 L1132.41 692.66 L1132.97 692.66 L1133.53 692.66 L1134.09 692.66 L1134.65 692.66 L1135.21 692.66 L1135.77 692.66 L1136.33 692.66 L1136.89 692.66 L1137.45 692.66 L1138.01 692.66 L1138.57 692.66 L1139.13 692.66 L1139.68 692.66 L1140.24 692.66 L1140.8 692.66 L1141.36 692.66 L1141.92 692.66 L1142.48 692.66 L1143.04 692.66 L1143.6 692.66 L1144.16 692.66 L1144.72 692.66 L1145.28 692.66 L1145.84 692.66 L1146.4 692.66 L1146.96 692.66 L1147.51 692.66 L1148.07 692.66 L1148.63 692.66 L1149.19 692.66 L1149.75 692.66 L1150.31 692.66 L1150.87 692.66 L1151.43 692.66 L1151.99 692.66 L1152.55 692.66 L1153.11 692.66 L1153.67 692.66 L1154.23 692.66 L1154.78 692.66 L1155.34 692.66 L1155.9 692.66 L1156.46 692.66 L1157.02 692.66 L1157.58 692.66 L1158.14 692.66 L1158.7 692.66 L1159.26 692.66 L1159.82 692.66 L1160.38 692.66 L1160.94 692.66 L1161.5 692.66 L1162.05 692.66 L1162.61 692.66 L1163.17 692.66 L1163.73 692.66 L1164.29 692.66 L1164.85 692.66 L1165.41 692.66 L1165.97 692.66 L1166.53 692.66 L1167.09 692.66 L1167.65 692.66 L1168.21 692.66 L1168.77 692.66 L1169.33 692.66 L1169.88 692.66 L1170.44 692.66 L1171 692.66 L1171.56 692.66 L1172.12 692.66 L1172.68 692.66 L1173.24 692.66 L1173.8 692.66 L1174.36 692.66 L1174.92 692.66 L1175.48 692.66 L1176.04 692.66 L1176.6 692.66 L1177.15 692.66 L1177.71 692.66 L1178.27 692.66 L1178.83 692.66 L1179.39 692.66 L1179.95 692.66 L1180.51 692.66 L1181.07 692.66 L1181.63 692.66 L1182.19 692.66 L1182.75 692.66 L1183.31 692.66 L1183.87 692.66 L1184.43 692.66 L1184.98 692.66 L1185.54 692.66 L1186.1 692.66 L1186.66 692.66 L1187.22 692.66 L1187.78 692.66 L1188.34 692.66 L1188.9 692.66 L1189.46 692.66 L1190.02 692.66 L1190.58 692.66 L1191.14 692.66 L1191.7 692.66 L1192.25 692.66 L1192.81 692.66 L1193.37 692.66 L1193.93 692.66 L1194.49 692.66 L1195.05 692.66 L1195.61 692.66 L1196.17 692.66 L1196.73 692.66 L1197.29 692.66 L1197.85 692.66 L1198.41 692.66 L1198.97 692.66 L1199.52 692.66 L1200.08 692.66 L1200.64 692.66 L1201.2 692.66 L1201.76 692.66 L1202.32 692.66 L1202.88 692.66 L1203.44 692.66 L1204 692.66 L1204.56 692.66 L1205.12 692.66 L1205.68 692.66 L1206.24 692.66 L1206.8 692.66 L1207.35 692.66 L1207.91 692.66 L1208.47 692.66 L1209.03 692.66 L1209.59 692.66 L1210.15 692.66 L1210.71 692.66 L1211.27 692.66 L1211.83 692.66 L1212.39 692.66 L1212.95 692.66 L1213.51 692.66 L1214.07 692.66 L1214.62 692.66 L1215.18 692.66 L1215.74 692.66 L1216.3 692.66 L1216.86 692.66 L1217.42 692.66 L1217.98 692.66 L1218.54 692.66 L1219.1 692.66 L1219.66 692.66 L1220.22 692.66 L1220.78 692.66 L1221.34 692.66 L1221.89 692.66 L1222.45 692.66 L1223.01 692.66 L1223.57 692.66 L1224.13 692.66 L1224.69 692.66 L1225.25 692.66 L1225.81 692.66 L1226.37 692.66 L1226.93 692.66 L1227.49 692.66 L1228.05 692.66 L1228.61 692.66 L1229.17 692.66 L1229.72 692.66 L1230.28 692.66 L1230.84 692.66 L1231.4 692.66 L1231.96 692.66 L1232.52 692.66 L1233.08 692.66 L1233.64 692.66 L1234.2 692.66 L1234.76 692.66 L1235.32 692.66 L1235.88 692.66 L1236.44 692.66 L1236.99 692.66 L1237.55 692.66 L1238.11 692.66 L1238.67 692.66 L1239.23 692.66 L1239.79 692.66 L1240.35 692.66 L1240.91 692.66 L1241.47 692.66 L1242.03 692.66 L1242.59 692.66 L1243.15 692.66 L1243.71 692.66 L1244.26 692.66 L1244.82 692.66 L1245.38 692.66 L1245.94 692.66 L1246.5 692.66 L1247.06 692.66 L1247.62 692.66 L1248.18 692.66 L1248.74 692.66 L1249.3 692.66 L1249.86 692.66 L1250.42 692.66 L1250.98 692.66 L1251.54 692.66 L1252.09 692.66 L1252.65 692.66 L1253.21 692.66 L1253.77 692.66 L1254.33 692.66 L1254.89 692.66 L1255.45 692.66 L1256.01 692.66 L1256.57 692.66 L1257.13 692.66 L1257.69 692.66 L1258.25 692.66 L1258.81 692.66 L1259.36 692.66 L1259.92 692.66 L1260.48 692.66 L1261.04 692.66 L1261.6 692.66 L1262.16 692.66 L1262.72 692.66 L1263.28 692.66 L1263.84 692.66 L1264.4 692.66 L1264.96 692.66 L1265.52 692.66 L1266.08 692.66 L1266.63 692.66 L1267.19 692.66 L1267.75 692.66 L1268.31 692.66 L1268.87 692.66 L1269.43 692.66 L1269.99 692.66 L1270.55 692.66 L1271.11 692.66 L1271.67 692.66 L1272.23 692.66 L1272.79 692.66 L1273.35 692.66 L1273.91 692.66 L1274.46 692.66 L1275.02 692.66 L1275.58 692.66 L1276.14 692.66 L1276.7 692.66 L1277.26 692.66 L1277.82 692.66 L1278.38 692.66 L1278.94 692.66 L1279.5 692.66 L1280.06 692.66 L1280.62 692.66 L1281.18 692.66 L1281.73 692.66 L1282.29 692.66 L1282.85 692.66 L1283.41 692.66 L1283.97 692.66 L1284.53 692.66 L1285.09 692.66 L1285.65 692.66 L1286.21 692.66 L1286.77 692.66 L1287.33 692.66 L1287.89 692.66 L1288.45 692.66 L1289 692.66 L1289.56 692.66 L1290.12 692.66 L1290.68 692.66 L1291.24 692.66 L1291.8 692.66 L1292.36 692.66 L1292.92 692.66 L1293.48 692.66 L1294.04 692.66 L1294.6 692.66 L1295.16 692.66 L1295.72 692.66 L1296.28 692.66 L1296.83 692.66 L1297.39 692.66 L1297.95 692.66 L1298.51 692.66 L1299.07 692.66 L1299.63 692.66 L1300.19 692.66 L1300.75 692.66 L1301.31 692.66 L1301.87 692.66 L1302.43 692.66 L1302.99 692.66 L1303.55 692.66 L1304.1 692.66 L1304.66 692.66 L1305.22 692.66 L1305.78 692.66 L1306.34 692.66 L1306.9 692.66 L1307.46 692.66 L1308.02 692.66 L1308.58 692.66 L1309.14 692.66 L1309.7 692.66 L1310.26 692.66 L1310.82 692.66 L1311.38 692.66 L1311.93 692.66 L1312.49 692.66 L1313.05 692.66 L1313.61 692.66 L1314.17 692.66 L1314.73 692.66 L1315.29 692.66 L1315.85 692.66 L1316.41 692.66 L1316.97 692.66 L1317.53 692.66 L1318.09 692.66 L1318.65 692.66 L1319.2 692.66 L1319.76 692.66 L1320.32 692.66 L1320.88 692.66 L1321.44 692.66 L1322 692.66 L1322.56 692.66 L1323.12 692.66 L1323.68 692.66 L1324.24 692.66 L1324.8 692.66 L1325.36 692.66 L1325.92 692.66 L1326.47 692.66 L1327.03 692.66 L1327.59 692.66 L1328.15 692.66 L1328.71 692.66 L1329.27 692.66 L1329.83 692.66 L1330.39 692.66 L1330.95 692.66 L1331.51 692.66 L1332.07 692.66 L1332.63 692.66 L1333.19 692.66 L1333.75 692.66 L1334.3 692.66 L1334.86 692.66 L1335.42 692.66 L1335.98 692.66 L1336.54 692.66 L1337.1 692.66 L1337.66 692.66 L1338.22 692.66 L1338.78 692.66 L1339.34 692.66 L1339.9 692.66 L1340.46 692.66 L1341.02 692.66 L1341.57 692.66 L1342.13 692.66 L1342.69 692.66 L1343.25 692.66 L1343.81 692.66 L1344.37 692.66 L1344.93 692.66 L1345.49 692.66 L1346.05 692.66 L1346.61 692.66 L1347.17 692.66 L1347.73 692.66 L1348.29 692.66 L1348.84 692.66 L1349.4 692.66 L1349.96 692.66 L1350.52 692.66 L1351.08 692.66 L1351.64 692.66 L1352.2 692.66 L1352.76 692.66 L1353.32 692.66 L1353.88 692.66 L1354.44 692.66 L1355 692.66 L1355.56 692.66 L1356.12 692.66 L1356.67 692.66 L1357.23 692.66 L1357.79 692.66 L1358.35 692.66 L1358.91 692.66 L1359.47 692.66 L1360.03 692.66 L1360.59 692.66 L1361.15 692.66 L1361.71 692.66 L1362.27 692.66 L1362.83 692.66 L1363.39 692.66 L1363.94 692.66 L1364.5 692.66 L1365.06 692.66 L1365.62 692.66 L1366.18 692.66 L1366.74 692.66 L1367.3 692.66 L1367.86 692.66 L1368.42 692.66 L1368.98 692.66 L1369.54 692.66 L1370.1 692.66 L1370.66 692.66 L1371.21 692.66 L1371.77 692.66 L1372.33 692.66 L1372.89 692.66 L1373.45 692.66 L1374.01 692.66 L1374.57 692.66 L1375.13 692.66 L1375.69 692.66 L1376.25 692.66 L1376.81 692.66 L1377.37 692.66 L1377.93 692.66 L1378.49 692.66 L1379.04 692.66 L1379.6 692.66 L1380.16 692.66 L1380.72 692.66 L1381.28 692.66 L1381.84 692.66 L1382.4 692.66 L1382.96 692.66 L1383.52 692.66 L1384.08 692.66 L1384.64 692.66 L1385.2 692.66 L1385.76 692.66 L1386.31 692.66 L1386.87 692.66 L1387.43 692.66 L1387.99 692.66 L1388.55 692.66 L1389.11 692.66 L1389.67 692.66 L1390.23 692.66 L1390.79 692.66 L1391.35 692.66 L1391.91 692.66 L1392.47 692.66 L1393.03 692.66 L1393.58 692.66 L1394.14 692.66 L1394.7 692.66 L1395.26 692.66 L1395.82 692.66 L1396.38 692.66 L1396.94 692.66 L1397.5 692.66 L1398.06 692.66 L1398.62 692.66 L1399.18 692.66 L1399.74 692.66 L1400.3 692.66 L1400.86 692.66 L1401.41 692.66 L1401.97 692.66 L1402.53 692.66 L1403.09 692.66 L1403.65 692.66 L1404.21 692.66 L1404.77 692.66 L1405.33 692.66 L1405.89 692.66 L1406.45 692.66 L1407.01 692.66 L1407.57 692.66 L1408.13 692.66 L1408.68 692.66 L1409.24 692.66 L1409.8 692.66 L1410.36 692.66 L1410.92 692.66 L1411.48 692.66 L1412.04 692.66 L1412.6 692.66 L1413.16 692.66 L1413.72 692.66 L1414.28 692.66 L1414.84 692.66 L1415.4 692.66 L1415.95 692.66 L1416.51 692.66 L1417.07 692.66 L1417.63 692.66 L1418.19 692.66 L1418.75 692.66 L1419.31 692.66 L1419.87 692.66 L1420.43 692.66 L1420.99 692.66 L1421.55 692.66 L1422.11 692.66 L1422.67 692.66 L1423.23 692.66 L1423.78 692.66 L1424.34 692.66 L1424.9 692.66 L1425.46 692.66 L1426.02 692.66 L1426.58 692.66 L1427.14 692.66 L1427.7 692.66 L1428.26 692.66 L1428.82 692.66 L1429.38 692.66 L1429.94 692.66 L1430.5 692.66 L1431.05 692.66 L1431.61 692.66 L1432.17 692.66 L1432.73 692.66 L1433.29 692.66 L1433.85 692.66 L1434.41 692.66 L1434.97 692.66 L1435.53 692.66 L1436.09 692.66 L1436.65 692.66 L1437.21 692.66 L1437.77 692.66 L1438.33 692.66 L1438.88 692.66 L1439.44 692.66 L1440 692.66 L1440.56 692.66 L1441.12 692.66 L1441.68 692.66 L1442.24 692.66 L1442.8 692.66 L1443.36 692.66 L1443.92 692.66 L1444.48 692.66 L1445.04 692.66 L1445.6 692.66 L1446.15 692.66 L1446.71 692.66 L1447.27 692.66 L1447.83 692.66 L1448.39 692.66 L1448.95 692.66 L1449.51 692.66 L1450.07 692.66 L1450.63 692.66 L1451.19 692.66 L1451.75 692.66 L1452.31 692.66 L1452.87 692.66 L1453.42 692.66 L1453.98 692.66 L1454.54 692.66 L1455.1 692.66 L1455.66 692.66 L1456.22 692.66 L1456.78 692.66 L1457.34 692.66 L1457.9 692.66 L1458.46 692.66 L1459.02 692.66 L1459.58 692.66 L1460.14 692.66 L1460.7 692.66 L1461.25 692.66 L1461.81 692.66 L1462.37 692.66 L1462.93 692.66 L1463.49 692.66 L1464.05 692.66 L1464.61 692.66 L1465.17 692.66 L1465.73 692.66 L1466.29 692.66 L1466.85 692.66 L1467.41 692.66 L1467.97 692.66 L1468.52 692.66 L1469.08 692.66 L1469.64 692.66 L1470.2 692.66 L1470.76 692.66 L1471.32 692.66 L1471.88 692.66 L1472.44 692.66 L1473 692.66 L1473.56 692.66 L1474.12 692.66 L1474.68 692.66 L1475.24 692.66 L1475.79 692.66 L1476.35 692.66 L1476.91 692.66 L1477.47 692.66 L1478.03 692.66 L1478.59 692.66 L1479.15 692.66 L1479.71 692.66 L1480.27 692.66 L1480.83 692.66 L1481.39 692.66 L1481.95 692.66 L1482.51 692.66 L1483.07 692.66 L1483.62 692.66 L1484.18 692.66 L1484.74 692.66 L1485.3 692.66 L1485.86 692.66 L1486.42 692.66 L1486.98 692.66 L1487.54 692.66 L1488.1 692.66 L1488.66 692.66 L1489.22 692.66 L1489.78 692.66 L1490.34 692.66 L1490.89 692.66 L1491.45 692.66 L1492.01 692.66 L1492.57 692.66 L1493.13 692.66 L1493.69 692.66 L1494.25 692.66 L1494.81 692.66 L1495.37 692.66 L1495.93 692.66 L1496.49 692.66 L1497.05 692.66 L1497.61 692.66 L1498.16 692.66 L1498.72 692.66 L1499.28 692.66 L1499.84 692.66 L1500.4 692.66 L1500.96 692.66 L1501.52 692.66 L1502.08 692.66 L1502.64 692.66 L1503.2 692.66 L1503.76 692.66 L1504.32 692.66 L1504.88 692.66 L1505.44 692.66 L1505.99 692.66 L1506.55 692.66 L1507.11 692.66 L1507.67 692.66 L1508.23 692.66 L1508.79 692.66 L1509.35 692.66 L1509.91 692.66 L1510.47 692.66 L1511.03 692.66 L1511.59 692.66 L1512.15 692.66 L1512.71 692.66 L1513.26 692.66 L1513.82 692.66 L1514.38 692.66 L1514.94 692.66 L1515.5 692.66 L1516.06 692.66 L1516.62 692.66 L1517.18 692.66 L1517.74 692.66 L1518.3 692.66 L1518.86 692.66 L1519.42 692.66 L1519.98 692.66 L1520.53 692.66 L1521.09 692.66 L1521.65 692.66 L1522.21 692.66 L1522.77 692.66 L1523.33 692.66 L1523.89 692.66 L1524.45 692.66 L1525.01 692.66 L1525.57 692.66 L1526.13 692.66 L1526.69 692.66 L1527.25 692.66 L1527.81 692.66 L1528.36 692.66 L1528.92 692.66 L1529.48 692.66 L1530.04 692.66 L1530.6 692.66 L1531.16 692.66 L1531.72 692.66 L1532.28 692.66 L1532.84 692.66 L1533.4 692.66 L1533.96 692.66 L1534.52 692.66 L1535.08 692.66 L1535.63 692.66 L1536.19 692.66 L1536.75 692.66 L1537.31 692.66 L1537.87 692.66 L1538.43 692.66 L1538.99 692.66 L1539.55 692.66 L1540.11 692.66 L1540.67 692.66 L1541.23 692.66 L1541.79 692.66 L1542.35 692.66 L1542.9 692.66 L1543.46 692.66 L1544.02 692.66 L1544.58 692.66 L1545.14 692.66 L1545.7 692.66 L1546.26 692.66 L1546.82 692.66 L1547.38 692.66 L1547.94 692.66 L1548.5 692.66 L1549.06 692.66 L1549.62 692.66 L1550.18 692.66 L1550.73 692.66 L1551.29 692.66 L1551.85 692.66 L1552.41 692.66 L1552.97 692.66 L1553.53 692.66 L1554.09 692.66 L1554.65 692.66 L1555.21 692.66 L1555.77 692.66 L1556.33 692.66 L1556.89 692.66 L1557.45 692.66 L1558 692.66 L1558.56 692.66 L1559.12 692.66 L1559.68 692.66 L1560.24 692.66 L1560.8 692.66 L1561.36 692.66 L1561.92 692.66 L1562.48 692.66 L1563.04 692.66 L1563.6 692.66 L1564.16 692.66 L1564.72 692.66 L1565.28 692.66 L1565.83 692.66 L1566.39 692.66 L1566.95 692.66 L1567.51 692.66 L1568.07 692.66 L1568.63 692.66 L1569.19 692.66 L1569.75 692.66 L1570.31 692.66 L1570.87 692.66 L1571.43 692.66 L1571.99 692.66 L1572.55 692.66 L1573.1 692.66 L1573.66 692.66 L1574.22 692.66 L1574.78 692.66 L1575.34 692.66 L1575.9 692.66 L1576.46 692.66 L1577.02 692.66 L1577.58 692.66 L1578.14 692.66 L1578.7 692.66 L1579.26 692.66 L1579.82 692.66 L1580.37 692.66 L1580.93 692.66 L1581.49 692.66 L1582.05 692.66 L1582.61 692.66 L1583.17 692.66 L1583.73 692.66 L1584.29 692.66 L1584.85 692.66 L1585.41 692.66 L1585.97 692.66 L1586.53 692.66 L1587.09 692.66 L1587.65 692.66 L1588.2 692.66 L1588.76 692.66 L1589.32 692.66 L1589.88 692.66 L1590.44 692.66 L1591 692.66 L1591.56 692.66 L1592.12 692.66 L1592.68 692.66 L1593.24 692.66 L1593.8 692.66 L1594.36 692.66 L1594.92 692.66 L1595.47 692.66 L1596.03 692.66 L1596.59 692.66 L1597.15 692.66 L1597.71 692.66 L1598.27 692.66 L1598.83 692.66 L1599.39 692.66 L1599.95 692.66 L1600.51 692.66 L1601.07 692.66 L1601.63 692.66 L1602.19 692.66 L1602.74 692.66 L1603.3 692.66 L1603.86 692.66 L1604.42 692.66 L1604.98 692.66 L1605.54 692.66 L1606.1 692.66 L1606.66 692.66 L1607.22 692.66 L1607.78 692.66 L1608.34 692.66 L1608.9 692.66 L1609.46 692.66 L1610.02 692.66 L1610.57 692.66 L1611.13 692.66 L1611.69 692.66 L1612.25 692.66 L1612.81 692.66 L1613.37 692.66 L1613.93 692.66 L1614.49 692.66 L1615.05 692.66 L1615.61 692.66 L1616.17 692.66 L1616.73 692.66 L1617.29 692.66 L1617.84 692.66 L1618.4 692.66 L1618.96 692.66 L1619.52 692.66 L1620.08 692.66 L1620.64 692.66 L1621.2 692.66 L1621.76 692.66 L1622.32 692.66 L1622.88 692.66 L1623.44 692.66 L1624 692.66 L1624.56 692.66 L1625.11 692.66 L1625.67 692.66 L1626.23 692.66 L1626.79 692.66 L1627.35 692.66 L1627.91 692.66 L1628.47 692.66 L1629.03 692.66 L1629.59 692.66 L1630.15 692.66 L1630.71 692.66 L1631.27 692.66 L1631.83 692.66 L1632.39 692.66 L1632.94 692.66 L1633.5 692.66 L1634.06 692.66 L1634.62 692.66 L1635.18 692.66 L1635.74 692.66 L1636.3 692.66 L1636.86 692.66 L1637.42 692.66 L1637.98 692.66 L1638.54 692.66 L1639.1 692.66 L1639.66 692.66 L1640.21 692.66 L1640.77 692.66 L1641.33 692.66 L1641.89 692.66 L1642.45 692.66 L1643.01 692.66 L1643.57 692.66 L1644.13 692.66 L1644.69 692.66 L1645.25 692.66 L1645.81 692.66 L1646.37 692.66 L1646.93 692.66 L1647.48 692.66 L1648.04 692.66 L1648.6 692.66 L1649.16 692.66 L1649.72 692.66 L1650.28 692.66 L1650.84 692.66 L1651.4 692.66 L1651.96 692.66 L1652.52 692.66 L1653.08 692.66 L1653.64 692.66 L1654.2 692.66 L1654.76 692.66 L1655.31 692.66 L1655.87 692.66 L1656.43 692.66 L1656.99 692.66 L1657.55 692.66 L1658.11 692.66 L1658.67 692.66 L1659.23 692.66 L1659.79 692.66 L1660.35 692.66 L1660.91 692.66 L1661.47 692.66 L1662.03 692.66 L1662.58 692.66 L1663.14 692.66 L1663.7 692.66 L1664.26 692.66 L1664.82 692.66 L1665.38 692.66 L1665.94 692.66 L1666.5 692.66 L1667.06 692.66 L1667.62 692.66 L1668.18 692.66 L1668.74 692.66 L1669.3 692.66 L1669.85 692.66 L1670.41 692.66 L1670.97 692.66 L1671.53 692.66 L1672.09 692.66 L1672.65 692.66 L1673.21 692.66 L1673.77 692.66 L1674.33 692.66 L1674.89 692.66 L1675.45 692.66 L1676.01 692.66 L1676.57 692.66 L1677.13 692.66 L1677.68 692.66 L1678.24 692.66 L1678.8 692.66 L1679.36 692.66 L1679.92 692.66 L1680.48 692.66 L1681.04 692.66 L1681.6 692.66 L1682.16 692.66 L1682.72 692.66 L1683.28 692.66 L1683.84 692.66 L1684.4 692.66 L1684.95 692.66 L1685.51 692.66 L1686.07 692.66 L1686.63 692.66 L1687.19 692.66 L1687.75 692.66 L1688.31 692.66 L1688.87 692.66 L1689.43 692.66 L1689.99 692.66 L1690.55 692.66 L1691.11 692.66 L1691.67 692.66 L1692.23 692.66 L1692.78 692.66 L1693.34 692.66 L1693.9 692.66 L1694.46 692.66 L1695.02 692.66 L1695.58 692.66 L1696.14 692.66 L1696.7 692.66 L1697.26 692.66 L1697.82 692.66 L1698.38 692.66 L1698.94 692.66 L1699.5 692.66 L1700.05 692.66 L1700.61 692.66 L1701.17 692.66 L1701.73 692.66 L1702.29 692.66 L1702.85 692.66 L1703.41 692.66 L1703.97 692.66 L1704.53 692.66 L1705.09 692.66 L1705.65 692.66 L1706.21 692.66 L1706.77 692.66 L1707.32 692.66 L1707.88 692.66 L1708.44 692.66 L1709 692.66 L1709.56 692.66 L1710.12 692.66 L1710.68 692.66 L1711.24 692.66 L1711.8 692.66 L1712.36 692.66 L1712.92 692.66 L1713.48 692.66 L1714.04 692.66 L1714.6 692.66 L1715.15 692.66 L1715.71 692.66 L1716.27 692.66 L1716.83 692.66 L1717.39 692.66 L1717.95 692.66 L1718.51 692.66 L1719.07 692.66 L1719.63 692.66 L1720.19 692.66 L1720.75 692.66 L1721.31 692.66 L1721.87 692.66 L1722.42 692.66 L1722.98 692.66 L1723.54 692.66 L1724.1 692.66 L1724.66 692.66 L1725.22 692.66 L1725.78 692.66 L1726.34 692.66 L1726.9 692.66 L1727.46 692.66 L1728.02 692.66 L1728.58 692.66 L1729.14 692.66 L1729.69 692.66 L1730.25 692.66 L1730.81 692.66 L1731.37 692.66 L1731.93 692.66 L1732.49 692.66 L1733.05 692.66 L1733.61 692.66 L1734.17 692.66 L1734.73 692.66 L1735.29 692.66 L1735.85 692.66 L1736.41 692.66 L1736.97 692.66 L1737.52 692.66 L1738.08 692.66 L1738.64 692.66 L1739.2 692.66 L1739.76 692.66 L1740.32 692.66 L1740.88 692.66 L1741.44 692.66 L1742 692.66 L1742.56 692.66 L1743.12 692.66 L1743.68 692.66 L1744.24 692.66 L1744.79 692.66 L1745.35 692.66 L1745.91 692.66 L1746.47 692.66 L1747.03 692.66 L1747.59 692.66 L1748.15 692.66 L1748.71 692.66 L1749.27 692.66 L1749.83 692.66 L1750.39 692.66 L1750.95 692.66 L1751.51 692.66 L1752.06 692.66 L1752.62 692.66 L1753.18 692.66 L1753.74 692.66 L1754.3 692.66 L1754.86 692.66 L1755.42 692.66 L1755.98 692.66 L1756.54 692.66 L1757.1 692.66 L1757.66 692.66 L1758.22 692.66 L1758.78 692.66 L1759.34 692.66 L1759.89 692.66 L1760.45 692.66 L1761.01 692.66 L1761.57 692.66 L1762.13 692.66 L1762.69 692.66 L1763.25 692.66 L1763.81 692.66 L1764.37 692.66 L1764.93 692.66 L1765.49 692.66 L1766.05 692.66 L1766.61 692.66 L1767.16 692.66 L1767.72 692.66 L1768.28 692.66 L1768.84 692.66 L1769.4 692.66 L1769.96 692.66 L1770.52 692.66 L1771.08 692.66 L1771.64 692.66 L1772.2 692.66 L1772.76 692.66 L1773.32 692.66 L1773.88 692.66 L1774.43 692.66 L1774.99 692.66 L1775.55 692.66 L1776.11 692.66 L1776.67 692.66 L1777.23 692.66 L1777.79 692.66 L1778.35 692.66 L1778.91 692.66 L1779.47 692.66 L1780.03 692.66 L1780.59 692.66 L1781.15 692.66 L1781.71 692.66 L1782.26 692.66 L1782.82 692.66 L1783.38 692.66 L1783.94 692.66 L1784.5 692.66 L1785.06 692.66 L1785.62 692.66 L1786.18 692.66 L1786.74 692.66 L1787.3 692.66 L1787.86 692.66 L1788.42 692.66 L1788.98 692.66 L1789.53 692.66 L1790.09 692.66 L1790.65 692.66 L1791.21 692.66 L1791.77 692.66 L1792.33 692.66 L1792.89 692.66 L1793.45 692.66 L1794.01 692.66 L1794.57 692.66 L1795.13 692.66 L1795.69 692.66 L1796.25 692.66 L1796.8 692.66 L1797.36 692.66 L1797.92 692.66 L1798.48 692.66 L1799.04 692.66 L1799.6 692.66 L1800.16 692.66 L1800.72 692.66 L1801.28 692.66 L1801.84 692.66 L1802.4 692.66 L1802.96 692.66 L1803.52 692.66 L1804.08 692.66 L1804.63 692.66 L1805.19 692.66 L1805.75 692.66 L1806.31 692.66 L1806.87 692.66 L1807.43 692.66 L1807.99 692.66 L1808.55 692.66 L1809.11 692.66 L1809.67 692.66 L1810.23 692.66 L1810.79 692.66 L1811.35 692.66 L1811.9 692.66 L1812.46 692.66 L1813.02 692.66 L1813.58 692.66 L1814.14 692.66 L1814.7 692.66 L1815.26 692.66 L1815.82 692.66 L1816.38 692.66 L1816.94 692.66 L1817.5 692.66 L1818.06 692.66 L1818.62 692.66 L1819.18 692.66 L1819.73 692.66 L1820.29 692.66 L1820.85 692.66 L1821.41 692.66 L1821.97 692.66 L1822.53 692.66 L1823.09 692.66 L1823.65 692.66 L1824.21 692.66 L1824.77 692.66 L1825.33 692.66 L1825.89 692.66 L1826.45 692.66 L1827 692.66 L1827.56 692.66 L1828.12 692.66 L1828.68 692.66 L1829.24 692.66 L1829.8 692.66 L1830.36 692.66 L1830.92 692.66 L1831.48 692.66 L1832.04 692.66 L1832.6 692.66 L1833.16 692.66 L1833.72 692.66 L1834.27 692.66 L1834.83 692.66 L1835.39 692.66 L1835.95 692.66 L1836.51 692.66 L1837.07 692.66 L1837.63 692.66 L1838.19 692.66 L1838.19 682.675 L1837.63 682.675 L1837.07 682.675 L1836.51 682.675 L1835.95 682.675 L1835.39 682.675 L1834.83 682.675 L1834.27 682.675 L1833.72 682.675 L1833.16 682.675 L1832.6 682.675 L1832.04 682.675 L1831.48 682.675 L1830.92 682.675 L1830.36 682.675 L1829.8 682.675 L1829.24 682.675 L1828.68 682.675 L1828.12 682.675 L1827.56 682.675 L1827 682.675 L1826.45 682.675 L1825.89 682.675 L1825.33 682.675 L1824.77 682.675 L1824.21 682.675 L1823.65 682.675 L1823.09 682.675 L1822.53 682.675 L1821.97 682.675 L1821.41 682.675 L1820.85 682.675 L1820.29 682.675 L1819.73 682.675 L1819.18 682.675 L1818.62 682.675 L1818.06 682.675 L1817.5 682.675 L1816.94 682.675 L1816.38 682.675 L1815.82 682.675 L1815.26 682.675 L1814.7 682.675 L1814.14 682.675 L1813.58 682.675 L1813.02 682.675 L1812.46 682.675 L1811.9 682.675 L1811.35 682.675 L1810.79 682.675 L1810.23 682.675 L1809.67 682.675 L1809.11 682.675 L1808.55 682.675 L1807.99 682.675 L1807.43 682.675 L1806.87 682.675 L1806.31 682.675 L1805.75 682.675 L1805.19 682.675 L1804.63 682.675 L1804.08 682.675 L1803.52 682.675 L1802.96 682.675 L1802.4 682.675 L1801.84 682.675 L1801.28 682.675 L1800.72 682.675 L1800.16 682.675 L1799.6 682.675 L1799.04 682.675 L1798.48 682.675 L1797.92 682.675 L1797.36 682.675 L1796.8 682.675 L1796.25 682.675 L1795.69 682.675 L1795.13 682.675 L1794.57 682.675 L1794.01 682.675 L1793.45 682.675 L1792.89 682.675 L1792.33 682.675 L1791.77 682.675 L1791.21 682.675 L1790.65 682.675 L1790.09 682.675 L1789.53 682.675 L1788.98 682.675 L1788.42 682.675 L1787.86 682.675 L1787.3 682.675 L1786.74 682.675 L1786.18 682.675 L1785.62 682.675 L1785.06 682.675 L1784.5 682.675 L1783.94 682.675 L1783.38 682.675 L1782.82 682.675 L1782.26 682.675 L1781.71 682.675 L1781.15 682.675 L1780.59 682.675 L1780.03 682.675 L1779.47 682.675 L1778.91 682.675 L1778.35 682.675 L1777.79 682.675 L1777.23 682.675 L1776.67 682.675 L1776.11 682.675 L1775.55 682.675 L1774.99 682.675 L1774.43 682.675 L1773.88 682.675 L1773.32 682.675 L1772.76 682.675 L1772.2 682.675 L1771.64 682.675 L1771.08 682.675 L1770.52 682.675 L1769.96 682.675 L1769.4 682.675 L1768.84 682.675 L1768.28 682.675 L1767.72 682.675 L1767.16 682.675 L1766.61 682.675 L1766.05 682.675 L1765.49 682.675 L1764.93 682.675 L1764.37 682.675 L1763.81 682.675 L1763.25 682.675 L1762.69 682.675 L1762.13 682.675 L1761.57 682.675 L1761.01 682.675 L1760.45 682.675 L1759.89 682.675 L1759.34 682.675 L1758.78 682.675 L1758.22 682.675 L1757.66 682.675 L1757.1 682.675 L1756.54 682.675 L1755.98 682.675 L1755.42 682.675 L1754.86 682.675 L1754.3 682.675 L1753.74 682.675 L1753.18 682.675 L1752.62 682.675 L1752.06 682.675 L1751.51 682.675 L1750.95 682.675 L1750.39 682.675 L1749.83 682.675 L1749.27 682.675 L1748.71 682.675 L1748.15 682.675 L1747.59 682.675 L1747.03 682.675 L1746.47 682.675 L1745.91 682.675 L1745.35 682.675 L1744.79 682.675 L1744.24 682.675 L1743.68 682.675 L1743.12 682.675 L1742.56 682.675 L1742 682.675 L1741.44 682.675 L1740.88 682.675 L1740.32 682.675 L1739.76 682.675 L1739.2 682.675 L1738.64 682.675 L1738.08 682.675 L1737.52 682.675 L1736.97 682.675 L1736.41 682.675 L1735.85 682.675 L1735.29 682.675 L1734.73 682.675 L1734.17 682.675 L1733.61 682.675 L1733.05 682.675 L1732.49 682.675 L1731.93 682.675 L1731.37 682.675 L1730.81 682.675 L1730.25 682.675 L1729.69 682.675 L1729.14 682.675 L1728.58 682.675 L1728.02 682.675 L1727.46 682.675 L1726.9 682.675 L1726.34 682.675 L1725.78 682.675 L1725.22 682.675 L1724.66 682.675 L1724.1 682.675 L1723.54 682.675 L1722.98 682.675 L1722.42 682.675 L1721.87 682.675 L1721.31 682.675 L1720.75 682.675 L1720.19 682.675 L1719.63 682.675 L1719.07 682.675 L1718.51 682.675 L1717.95 682.675 L1717.39 682.675 L1716.83 682.675 L1716.27 682.675 L1715.71 682.675 L1715.15 682.675 L1714.6 682.675 L1714.04 682.675 L1713.48 682.675 L1712.92 682.675 L1712.36 682.675 L1711.8 682.675 L1711.24 682.675 L1710.68 682.675 L1710.12 682.675 L1709.56 682.675 L1709 682.675 L1708.44 682.675 L1707.88 682.675 L1707.32 682.675 L1706.77 682.675 L1706.21 682.675 L1705.65 682.675 L1705.09 682.675 L1704.53 682.675 L1703.97 682.675 L1703.41 682.675 L1702.85 682.675 L1702.29 682.675 L1701.73 682.675 L1701.17 682.675 L1700.61 682.675 L1700.05 682.675 L1699.5 682.675 L1698.94 682.675 L1698.38 682.675 L1697.82 682.675 L1697.26 682.675 L1696.7 682.675 L1696.14 682.675 L1695.58 682.675 L1695.02 682.675 L1694.46 682.675 L1693.9 682.675 L1693.34 682.675 L1692.78 682.675 L1692.23 682.675 L1691.67 682.675 L1691.11 682.675 L1690.55 682.675 L1689.99 682.675 L1689.43 682.675 L1688.87 682.675 L1688.31 682.675 L1687.75 682.675 L1687.19 682.675 L1686.63 682.675 L1686.07 682.675 L1685.51 682.675 L1684.95 682.675 L1684.4 682.675 L1683.84 682.675 L1683.28 682.675 L1682.72 682.675 L1682.16 682.675 L1681.6 682.675 L1681.04 682.675 L1680.48 682.675 L1679.92 682.675 L1679.36 682.675 L1678.8 682.675 L1678.24 682.675 L1677.68 682.675 L1677.13 682.675 L1676.57 682.675 L1676.01 682.675 L1675.45 682.675 L1674.89 682.675 L1674.33 682.675 L1673.77 682.675 L1673.21 682.675 L1672.65 682.675 L1672.09 682.675 L1671.53 682.675 L1670.97 682.675 L1670.41 682.675 L1669.85 682.675 L1669.3 682.675 L1668.74 682.675 L1668.18 682.675 L1667.62 682.675 L1667.06 682.675 L1666.5 682.675 L1665.94 682.675 L1665.38 682.675 L1664.82 682.675 L1664.26 682.675 L1663.7 682.675 L1663.14 682.675 L1662.58 682.675 L1662.03 682.675 L1661.47 682.675 L1660.91 682.675 L1660.35 682.675 L1659.79 682.675 L1659.23 682.675 L1658.67 682.675 L1658.11 682.675 L1657.55 682.675 L1656.99 682.675 L1656.43 682.675 L1655.87 682.675 L1655.31 682.675 L1654.76 682.675 L1654.2 682.675 L1653.64 682.675 L1653.08 682.675 L1652.52 682.675 L1651.96 682.675 L1651.4 682.675 L1650.84 682.675 L1650.28 682.675 L1649.72 682.675 L1649.16 682.675 L1648.6 682.675 L1648.04 682.675 L1647.48 682.675 L1646.93 682.675 L1646.37 682.675 L1645.81 682.675 L1645.25 682.675 L1644.69 682.675 L1644.13 682.675 L1643.57 682.675 L1643.01 682.675 L1642.45 682.675 L1641.89 682.675 L1641.33 682.675 L1640.77 682.675 L1640.21 682.675 L1639.66 682.675 L1639.1 682.675 L1638.54 682.675 L1637.98 682.675 L1637.42 682.675 L1636.86 682.675 L1636.3 682.675 L1635.74 682.675 L1635.18 682.675 L1634.62 682.675 L1634.06 682.675 L1633.5 682.675 L1632.94 682.675 L1632.39 682.675 L1631.83 682.675 L1631.27 682.675 L1630.71 682.675 L1630.15 682.675 L1629.59 682.675 L1629.03 682.675 L1628.47 682.675 L1627.91 682.675 L1627.35 682.675 L1626.79 682.675 L1626.23 682.675 L1625.67 682.675 L1625.11 682.675 L1624.56 682.675 L1624 682.675 L1623.44 682.675 L1622.88 682.675 L1622.32 682.675 L1621.76 682.675 L1621.2 682.675 L1620.64 682.675 L1620.08 682.675 L1619.52 682.675 L1618.96 682.675 L1618.4 682.675 L1617.84 682.675 L1617.29 682.675 L1616.73 682.675 L1616.17 682.675 L1615.61 682.675 L1615.05 682.675 L1614.49 682.675 L1613.93 682.675 L1613.37 682.675 L1612.81 682.675 L1612.25 682.675 L1611.69 682.675 L1611.13 682.675 L1610.57 682.675 L1610.02 682.675 L1609.46 682.675 L1608.9 682.675 L1608.34 682.675 L1607.78 682.675 L1607.22 682.675 L1606.66 682.675 L1606.1 682.675 L1605.54 682.675 L1604.98 682.675 L1604.42 682.675 L1603.86 682.675 L1603.3 682.675 L1602.74 682.675 L1602.19 682.675 L1601.63 682.675 L1601.07 682.675 L1600.51 682.675 L1599.95 682.675 L1599.39 682.675 L1598.83 682.675 L1598.27 682.675 L1597.71 682.675 L1597.15 682.675 L1596.59 682.675 L1596.03 682.675 L1595.47 682.675 L1594.92 682.675 L1594.36 682.675 L1593.8 682.675 L1593.24 682.675 L1592.68 682.675 L1592.12 682.675 L1591.56 682.675 L1591 682.675 L1590.44 682.675 L1589.88 682.675 L1589.32 682.675 L1588.76 682.675 L1588.2 682.675 L1587.65 682.675 L1587.09 682.675 L1586.53 682.675 L1585.97 682.675 L1585.41 682.675 L1584.85 682.675 L1584.29 682.675 L1583.73 682.675 L1583.17 682.675 L1582.61 682.675 L1582.05 682.675 L1581.49 682.675 L1580.93 682.675 L1580.37 682.675 L1579.82 682.675 L1579.26 682.675 L1578.7 682.675 L1578.14 682.675 L1577.58 682.675 L1577.02 682.675 L1576.46 682.675 L1575.9 682.675 L1575.34 682.675 L1574.78 682.675 L1574.22 682.675 L1573.66 682.675 L1573.1 682.675 L1572.55 682.675 L1571.99 682.675 L1571.43 682.675 L1570.87 682.675 L1570.31 682.675 L1569.75 682.675 L1569.19 682.675 L1568.63 682.675 L1568.07 682.675 L1567.51 682.675 L1566.95 682.675 L1566.39 682.675 L1565.83 682.675 L1565.28 682.675 L1564.72 682.675 L1564.16 682.675 L1563.6 682.675 L1563.04 682.675 L1562.48 682.675 L1561.92 682.675 L1561.36 682.675 L1560.8 682.675 L1560.24 682.675 L1559.68 682.675 L1559.12 682.675 L1558.56 682.675 L1558 682.675 L1557.45 682.675 L1556.89 682.675 L1556.33 682.675 L1555.77 682.675 L1555.21 682.675 L1554.65 682.675 L1554.09 682.675 L1553.53 682.675 L1552.97 682.675 L1552.41 682.675 L1551.85 682.675 L1551.29 682.675 L1550.73 682.675 L1550.18 682.675 L1549.62 682.675 L1549.06 682.675 L1548.5 682.675 L1547.94 682.675 L1547.38 682.675 L1546.82 682.675 L1546.26 682.675 L1545.7 682.675 L1545.14 682.675 L1544.58 682.675 L1544.02 682.675 L1543.46 682.675 L1542.9 682.675 L1542.35 682.675 L1541.79 682.675 L1541.23 682.675 L1540.67 682.675 L1540.11 682.675 L1539.55 682.675 L1538.99 682.675 L1538.43 682.675 L1537.87 682.675 L1537.31 682.675 L1536.75 682.675 L1536.19 682.675 L1535.63 682.675 L1535.08 682.675 L1534.52 682.675 L1533.96 682.675 L1533.4 682.675 L1532.84 682.675 L1532.28 682.675 L1531.72 682.675 L1531.16 682.675 L1530.6 682.675 L1530.04 682.675 L1529.48 682.675 L1528.92 682.675 L1528.36 682.675 L1527.81 682.675 L1527.25 682.675 L1526.69 682.675 L1526.13 682.675 L1525.57 682.675 L1525.01 682.675 L1524.45 682.675 L1523.89 682.675 L1523.33 682.675 L1522.77 682.675 L1522.21 682.675 L1521.65 682.675 L1521.09 682.675 L1520.53 682.675 L1519.98 682.675 L1519.42 682.675 L1518.86 682.675 L1518.3 682.675 L1517.74 682.675 L1517.18 682.675 L1516.62 682.675 L1516.06 682.675 L1515.5 682.675 L1514.94 682.675 L1514.38 682.675 L1513.82 682.675 L1513.26 682.675 L1512.71 682.675 L1512.15 682.675 L1511.59 682.675 L1511.03 682.675 L1510.47 682.675 L1509.91 682.675 L1509.35 682.675 L1508.79 682.675 L1508.23 682.675 L1507.67 682.675 L1507.11 682.675 L1506.55 682.675 L1505.99 682.675 L1505.44 682.675 L1504.88 682.675 L1504.32 682.675 L1503.76 682.675 L1503.2 682.675 L1502.64 682.675 L1502.08 682.675 L1501.52 682.675 L1500.96 682.675 L1500.4 682.675 L1499.84 682.675 L1499.28 682.675 L1498.72 682.675 L1498.16 682.675 L1497.61 682.675 L1497.05 682.675 L1496.49 682.675 L1495.93 682.675 L1495.37 682.675 L1494.81 682.675 L1494.25 682.675 L1493.69 682.675 L1493.13 682.675 L1492.57 682.675 L1492.01 682.675 L1491.45 682.675 L1490.89 682.675 L1490.34 682.675 L1489.78 682.675 L1489.22 682.675 L1488.66 682.675 L1488.1 682.675 L1487.54 682.675 L1486.98 682.675 L1486.42 682.675 L1485.86 682.675 L1485.3 682.675 L1484.74 682.675 L1484.18 682.675 L1483.62 682.675 L1483.07 682.675 L1482.51 682.675 L1481.95 682.675 L1481.39 682.675 L1480.83 682.675 L1480.27 682.675 L1479.71 682.675 L1479.15 682.675 L1478.59 682.675 L1478.03 682.675 L1477.47 682.675 L1476.91 682.675 L1476.35 682.675 L1475.79 682.675 L1475.24 682.675 L1474.68 682.675 L1474.12 682.675 L1473.56 682.675 L1473 682.675 L1472.44 682.675 L1471.88 682.675 L1471.32 682.675 L1470.76 682.675 L1470.2 682.675 L1469.64 682.675 L1469.08 682.675 L1468.52 682.675 L1467.97 682.675 L1467.41 682.675 L1466.85 682.675 L1466.29 682.675 L1465.73 682.675 L1465.17 682.675 L1464.61 682.675 L1464.05 682.675 L1463.49 682.675 L1462.93 682.675 L1462.37 682.675 L1461.81 682.675 L1461.25 682.675 L1460.7 682.675 L1460.14 682.675 L1459.58 682.675 L1459.02 682.675 L1458.46 682.675 L1457.9 682.675 L1457.34 682.675 L1456.78 682.675 L1456.22 682.675 L1455.66 682.675 L1455.1 682.675 L1454.54 682.675 L1453.98 682.675 L1453.42 682.675 L1452.87 682.675 L1452.31 682.675 L1451.75 682.675 L1451.19 682.675 L1450.63 682.675 L1450.07 682.675 L1449.51 682.675 L1448.95 682.675 L1448.39 682.675 L1447.83 682.675 L1447.27 682.675 L1446.71 682.675 L1446.15 682.675 L1445.6 682.675 L1445.04 682.675 L1444.48 682.675 L1443.92 682.675 L1443.36 682.675 L1442.8 682.675 L1442.24 682.675 L1441.68 682.675 L1441.12 682.675 L1440.56 682.675 L1440 682.675 L1439.44 682.675 L1438.88 682.675 L1438.33 682.675 L1437.77 682.675 L1437.21 682.675 L1436.65 682.675 L1436.09 682.675 L1435.53 682.675 L1434.97 682.675 L1434.41 682.675 L1433.85 682.675 L1433.29 682.675 L1432.73 682.675 L1432.17 682.675 L1431.61 682.675 L1431.05 682.675 L1430.5 682.675 L1429.94 682.675 L1429.38 682.675 L1428.82 682.675 L1428.26 682.675 L1427.7 682.675 L1427.14 682.675 L1426.58 682.675 L1426.02 682.675 L1425.46 682.675 L1424.9 682.675 L1424.34 682.675 L1423.78 682.675 L1423.23 682.675 L1422.67 682.675 L1422.11 682.675 L1421.55 682.675 L1420.99 682.675 L1420.43 682.675 L1419.87 682.675 L1419.31 682.675 L1418.75 682.675 L1418.19 682.675 L1417.63 682.675 L1417.07 682.675 L1416.51 682.675 L1415.95 682.675 L1415.4 682.675 L1414.84 682.675 L1414.28 682.675 L1413.72 682.675 L1413.16 682.675 L1412.6 682.675 L1412.04 682.675 L1411.48 682.675 L1410.92 682.675 L1410.36 682.675 L1409.8 682.675 L1409.24 682.675 L1408.68 682.675 L1408.13 682.675 L1407.57 682.675 L1407.01 682.675 L1406.45 682.675 L1405.89 682.675 L1405.33 682.675 L1404.77 682.675 L1404.21 682.675 L1403.65 682.675 L1403.09 682.675 L1402.53 682.675 L1401.97 682.675 L1401.41 682.675 L1400.86 682.675 L1400.3 682.675 L1399.74 682.675 L1399.18 682.675 L1398.62 682.675 L1398.06 682.675 L1397.5 682.675 L1396.94 682.675 L1396.38 682.675 L1395.82 682.675 L1395.26 682.675 L1394.7 682.675 L1394.14 682.675 L1393.58 682.675 L1393.03 682.675 L1392.47 682.675 L1391.91 682.675 L1391.35 682.675 L1390.79 682.675 L1390.23 682.675 L1389.67 682.675 L1389.11 682.675 L1388.55 682.675 L1387.99 682.675 L1387.43 682.675 L1386.87 682.675 L1386.31 682.675 L1385.76 682.675 L1385.2 682.675 L1384.64 682.675 L1384.08 682.675 L1383.52 682.675 L1382.96 682.675 L1382.4 682.675 L1381.84 682.675 L1381.28 682.675 L1380.72 682.675 L1380.16 682.675 L1379.6 682.675 L1379.04 682.675 L1378.49 682.675 L1377.93 682.675 L1377.37 682.675 L1376.81 682.675 L1376.25 682.675 L1375.69 682.675 L1375.13 682.675 L1374.57 682.675 L1374.01 682.675 L1373.45 682.675 L1372.89 682.675 L1372.33 682.675 L1371.77 682.675 L1371.21 682.675 L1370.66 682.675 L1370.1 682.675 L1369.54 682.675 L1368.98 682.675 L1368.42 682.675 L1367.86 682.675 L1367.3 682.675 L1366.74 682.675 L1366.18 682.675 L1365.62 682.675 L1365.06 682.675 L1364.5 682.675 L1363.94 682.675 L1363.39 682.675 L1362.83 682.675 L1362.27 682.675 L1361.71 682.675 L1361.15 682.675 L1360.59 682.675 L1360.03 682.675 L1359.47 682.675 L1358.91 682.675 L1358.35 682.675 L1357.79 682.675 L1357.23 682.675 L1356.67 682.675 L1356.12 682.675 L1355.56 682.675 L1355 682.675 L1354.44 682.675 L1353.88 682.675 L1353.32 682.675 L1352.76 682.675 L1352.2 682.675 L1351.64 682.675 L1351.08 682.675 L1350.52 682.675 L1349.96 682.675 L1349.4 682.675 L1348.84 682.675 L1348.29 682.675 L1347.73 682.675 L1347.17 682.675 L1346.61 682.675 L1346.05 682.675 L1345.49 682.675 L1344.93 682.675 L1344.37 682.675 L1343.81 682.675 L1343.25 682.675 L1342.69 682.675 L1342.13 682.675 L1341.57 682.675 L1341.02 682.675 L1340.46 682.675 L1339.9 682.675 L1339.34 682.675 L1338.78 682.675 L1338.22 682.675 L1337.66 682.675 L1337.1 682.675 L1336.54 682.675 L1335.98 682.675 L1335.42 682.675 L1334.86 682.675 L1334.3 682.675 L1333.75 682.675 L1333.19 682.675 L1332.63 682.675 L1332.07 682.675 L1331.51 682.675 L1330.95 682.675 L1330.39 682.675 L1329.83 682.675 L1329.27 682.675 L1328.71 682.675 L1328.15 682.675 L1327.59 682.675 L1327.03 682.675 L1326.47 682.675 L1325.92 682.675 L1325.36 682.675 L1324.8 682.675 L1324.24 682.675 L1323.68 682.675 L1323.12 682.675 L1322.56 682.675 L1322 682.675 L1321.44 682.675 L1320.88 682.675 L1320.32 682.675 L1319.76 682.675 L1319.2 682.675 L1318.65 682.675 L1318.09 682.675 L1317.53 682.675 L1316.97 682.675 L1316.41 682.675 L1315.85 682.675 L1315.29 682.675 L1314.73 682.675 L1314.17 682.675 L1313.61 682.675 L1313.05 682.675 L1312.49 682.675 L1311.93 682.675 L1311.38 682.675 L1310.82 682.675 L1310.26 682.675 L1309.7 682.675 L1309.14 682.675 L1308.58 682.675 L1308.02 682.675 L1307.46 682.675 L1306.9 682.675 L1306.34 682.675 L1305.78 682.675 L1305.22 682.675 L1304.66 682.675 L1304.1 682.675 L1303.55 682.675 L1302.99 682.675 L1302.43 682.675 L1301.87 682.675 L1301.31 682.675 L1300.75 682.675 L1300.19 682.675 L1299.63 682.675 L1299.07 682.675 L1298.51 682.675 L1297.95 682.675 L1297.39 682.675 L1296.83 682.675 L1296.28 682.675 L1295.72 682.675 L1295.16 682.675 L1294.6 682.675 L1294.04 682.675 L1293.48 682.675 L1292.92 682.675 L1292.36 682.675 L1291.8 682.675 L1291.24 682.675 L1290.68 682.675 L1290.12 682.675 L1289.56 682.675 L1289 682.675 L1288.45 682.675 L1287.89 682.675 L1287.33 682.675 L1286.77 682.675 L1286.21 682.675 L1285.65 682.675 L1285.09 682.675 L1284.53 682.675 L1283.97 682.675 L1283.41 682.675 L1282.85 682.675 L1282.29 682.675 L1281.73 682.675 L1281.18 682.675 L1280.62 682.675 L1280.06 682.675 L1279.5 682.675 L1278.94 682.675 L1278.38 682.675 L1277.82 682.675 L1277.26 682.675 L1276.7 682.675 L1276.14 682.675 L1275.58 682.675 L1275.02 682.675 L1274.46 682.675 L1273.91 682.675 L1273.35 682.675 L1272.79 682.675 L1272.23 682.675 L1271.67 682.675 L1271.11 682.675 L1270.55 682.675 L1269.99 682.675 L1269.43 682.675 L1268.87 682.675 L1268.31 682.675 L1267.75 682.675 L1267.19 682.675 L1266.63 682.675 L1266.08 682.675 L1265.52 682.675 L1264.96 682.675 L1264.4 682.675 L1263.84 682.675 L1263.28 682.675 L1262.72 682.675 L1262.16 682.675 L1261.6 682.675 L1261.04 682.675 L1260.48 682.675 L1259.92 682.675 L1259.36 682.675 L1258.81 682.675 L1258.25 682.675 L1257.69 682.675 L1257.13 682.675 L1256.57 682.675 L1256.01 682.675 L1255.45 682.675 L1254.89 682.675 L1254.33 682.675 L1253.77 682.675 L1253.21 682.675 L1252.65 682.675 L1252.09 682.675 L1251.54 682.675 L1250.98 682.675 L1250.42 682.675 L1249.86 682.675 L1249.3 682.675 L1248.74 682.675 L1248.18 682.675 L1247.62 682.675 L1247.06 682.675 L1246.5 682.675 L1245.94 682.675 L1245.38 682.675 L1244.82 682.675 L1244.26 682.675 L1243.71 682.675 L1243.15 682.675 L1242.59 682.675 L1242.03 682.675 L1241.47 682.675 L1240.91 682.675 L1240.35 682.675 L1239.79 682.675 L1239.23 682.675 L1238.67 682.675 L1238.11 682.675 L1237.55 682.675 L1236.99 682.675 L1236.44 682.675 L1235.88 682.675 L1235.32 682.675 L1234.76 682.675 L1234.2 682.675 L1233.64 682.675 L1233.08 682.675 L1232.52 682.675 L1231.96 682.675 L1231.4 682.675 L1230.84 682.675 L1230.28 682.675 L1229.72 682.675 L1229.17 682.675 L1228.61 682.675 L1228.05 682.675 L1227.49 682.675 L1226.93 682.675 L1226.37 682.675 L1225.81 682.675 L1225.25 682.675 L1224.69 682.675 L1224.13 682.675 L1223.57 682.675 L1223.01 682.675 L1222.45 682.675 L1221.89 682.675 L1221.34 682.675 L1220.78 682.675 L1220.22 682.675 L1219.66 682.675 L1219.1 682.675 L1218.54 682.675 L1217.98 682.675 L1217.42 682.675 L1216.86 682.675 L1216.3 682.675 L1215.74 682.675 L1215.18 682.675 L1214.62 682.675 L1214.07 682.675 L1213.51 682.675 L1212.95 682.675 L1212.39 682.675 L1211.83 682.675 L1211.27 682.675 L1210.71 682.675 L1210.15 682.675 L1209.59 682.675 L1209.03 682.675 L1208.47 682.675 L1207.91 682.675 L1207.35 682.675 L1206.8 682.675 L1206.24 682.675 L1205.68 682.675 L1205.12 682.675 L1204.56 682.675 L1204 682.675 L1203.44 682.675 L1202.88 682.675 L1202.32 682.675 L1201.76 682.675 L1201.2 682.675 L1200.64 682.675 L1200.08 682.675 L1199.52 682.675 L1198.97 682.675 L1198.41 682.675 L1197.85 682.675 L1197.29 682.675 L1196.73 682.675 L1196.17 682.675 L1195.61 682.675 L1195.05 682.675 L1194.49 682.675 L1193.93 682.675 L1193.37 682.675 L1192.81 682.675 L1192.25 682.675 L1191.7 682.675 L1191.14 682.675 L1190.58 682.675 L1190.02 682.675 L1189.46 682.675 L1188.9 682.675 L1188.34 682.675 L1187.78 682.675 L1187.22 682.675 L1186.66 682.675 L1186.1 682.675 L1185.54 682.675 L1184.98 682.675 L1184.43 682.675 L1183.87 682.675 L1183.31 682.675 L1182.75 682.675 L1182.19 682.675 L1181.63 682.675 L1181.07 682.675 L1180.51 682.675 L1179.95 682.675 L1179.39 682.675 L1178.83 682.675 L1178.27 682.675 L1177.71 682.675 L1177.15 682.675 L1176.6 682.675 L1176.04 682.675 L1175.48 682.675 L1174.92 682.675 L1174.36 682.675 L1173.8 682.675 L1173.24 682.675 L1172.68 682.675 L1172.12 682.675 L1171.56 682.675 L1171 682.675 L1170.44 682.675 L1169.88 682.675 L1169.33 682.675 L1168.77 682.675 L1168.21 682.675 L1167.65 682.675 L1167.09 682.675 L1166.53 682.675 L1165.97 682.675 L1165.41 682.675 L1164.85 682.675 L1164.29 682.675 L1163.73 682.675 L1163.17 682.675 L1162.61 682.675 L1162.05 682.675 L1161.5 682.675 L1160.94 682.675 L1160.38 682.675 L1159.82 682.675 L1159.26 682.675 L1158.7 682.675 L1158.14 682.675 L1157.58 682.675 L1157.02 682.675 L1156.46 682.675 L1155.9 682.675 L1155.34 682.675 L1154.78 682.675 L1154.23 682.675 L1153.67 682.675 L1153.11 682.675 L1152.55 682.675 L1151.99 682.675 L1151.43 682.675 L1150.87 682.675 L1150.31 682.675 L1149.75 682.675 L1149.19 682.675 L1148.63 682.675 L1148.07 682.675 L1147.51 682.675 L1146.96 682.675 L1146.4 682.675 L1145.84 682.675 L1145.28 682.675 L1144.72 682.675 L1144.16 682.675 L1143.6 682.675 L1143.04 682.675 L1142.48 682.675 L1141.92 682.675 L1141.36 682.675 L1140.8 682.675 L1140.24 682.675 L1139.68 682.675 L1139.13 682.675 L1138.57 682.675 L1138.01 682.675 L1137.45 682.675 L1136.89 682.675 L1136.33 682.675 L1135.77 682.675 L1135.21 682.675 L1134.65 682.675 L1134.09 682.675 L1133.53 682.675 L1132.97 682.675 L1132.41 682.675 L1131.86 682.675 L1131.3 682.675 L1130.74 682.675 L1130.18 682.675 L1129.62 682.675 L1129.06 682.675 L1128.5 682.675 L1127.94 682.675 L1127.38 682.675 L1126.82 682.675 L1126.26 682.675 L1125.7 682.675 L1125.14 682.675 L1124.59 682.675 L1124.03 682.675 L1123.47 682.675 L1122.91 682.675 L1122.35 682.675 L1121.79 682.675 L1121.23 682.675 L1120.67 682.675 L1120.11 682.675 L1119.55 682.675 L1118.99 682.675 L1118.43 682.675 L1117.87 682.675 L1117.31 682.675 L1116.76 682.675 L1116.2 682.675 L1115.64 682.675 L1115.08 682.675 L1114.52 682.675 L1113.96 682.675 L1113.4 682.675 L1112.84 682.675 L1112.28 682.675 L1111.72 682.675 L1111.16 682.675 L1110.6 682.675 L1110.04 682.675 L1109.49 682.675 L1108.93 682.675 L1108.37 682.675 L1107.81 682.675 L1107.25 682.675 L1106.69 682.675 L1106.13 682.675 L1105.57 682.675 L1105.01 682.675 L1104.45 682.675 L1103.89 682.675 L1103.33 682.675 L1102.77 682.675 L1102.22 682.675 L1101.66 682.675 L1101.1 682.675 L1100.54 682.675 L1099.98 682.675 L1099.42 682.675 L1098.86 682.675 L1098.3 682.675 L1097.74 682.675 L1097.18 682.675 L1096.62 682.675 L1096.06 682.675 L1095.5 682.675 L1094.94 682.675 L1094.39 682.675 L1093.83 682.675 L1093.27 682.675 L1092.71 682.675 L1092.15 682.675 L1091.59 682.675 L1091.03 682.675 L1090.47 682.675 L1089.91 682.675 L1089.35 682.675 L1088.79 682.675 L1088.23 682.675 L1087.67 682.675 L1087.12 682.675 L1086.56 682.675 L1086 682.675 L1085.44 682.675 L1084.88 682.675 L1084.32 682.675 L1083.76 682.675 L1083.2 682.675 L1082.64 682.675 L1082.08 682.675 L1081.52 682.675 L1080.96 682.675 L1080.4 682.675 L1079.85 682.675 L1079.29 682.675 L1078.73 682.675 L1078.17 682.675 L1077.61 682.675 L1077.05 682.675 L1076.49 682.675 L1075.93 682.675 L1075.37 682.675 L1074.81 682.675 L1074.25 682.675 L1073.69 682.675 L1073.13 682.675 L1072.57 682.675 L1072.02 682.675 L1071.46 682.675 L1070.9 682.675 L1070.34 682.675 L1069.78 682.675 L1069.22 682.675 L1068.66 682.675 L1068.1 682.675 L1067.54 682.675 L1066.98 682.675 L1066.42 682.675 L1065.86 682.675 L1065.3 682.675 L1064.75 682.675 L1064.19 682.675 L1063.63 682.675 L1063.07 682.675 L1062.51 682.675 L1061.95 682.675 L1061.39 682.675 L1060.83 682.675 L1060.27 682.675 L1059.71 682.675 L1059.15 682.675 L1058.59 682.675 L1058.03 682.675 L1057.48 682.675 L1056.92 682.675 L1056.36 682.675 L1055.8 682.675 L1055.24 682.675 L1054.68 682.675 L1054.12 682.675 L1053.56 682.675 L1053 682.675 L1052.44 682.675 L1051.88 682.675 L1051.32 682.675 L1050.76 682.675 L1050.2 682.675 L1049.65 682.675 L1049.09 682.675 L1048.53 682.675 L1047.97 682.675 L1047.41 682.675 L1046.85 682.675 L1046.29 682.675 L1045.73 682.675 L1045.17 682.675 L1044.61 682.675 L1044.05 682.675 L1043.49 682.675 L1042.93 682.675 L1042.38 682.675 L1041.82 682.675 L1041.26 682.675 L1040.7 682.675 L1040.14 682.675 L1039.58 682.675 L1039.02 682.675 L1038.46 682.675 L1037.9 682.675 L1037.34 682.675 L1036.78 682.675 L1036.22 682.675 L1035.66 682.675 L1035.1 682.675 L1034.55 682.675 L1033.99 682.675 L1033.43 682.675 L1032.87 682.675 L1032.31 682.675 L1031.75 682.675 L1031.19 682.675 L1030.63 682.675 L1030.07 682.675 L1029.51 682.675 L1028.95 682.675 L1028.39 682.675 L1027.83 682.675 L1027.28 682.675 L1026.72 682.675 L1026.16 682.675 L1025.6 682.675 L1025.04 682.675 L1024.48 682.675 L1023.92 682.675 L1023.36 682.675 L1022.8 682.675 L1022.24 682.675 L1021.68 682.675 L1021.12 682.675 L1020.56 682.675 L1020.01 682.675 L1019.45 682.675 L1018.89 682.675 L1018.33 682.675 L1017.77 682.675 L1017.21 682.675 L1016.65 682.675 L1016.09 682.675 L1015.53 682.675 L1014.97 682.675 L1014.41 682.675 L1013.85 682.675 L1013.29 682.675 L1012.73 682.675 L1012.18 682.675 L1011.62 682.675 L1011.06 682.675 L1010.5 682.675 L1009.94 682.675 L1009.38 682.675 L1008.82 682.675 L1008.26 682.675 L1007.7 682.675 L1007.14 682.675 L1006.58 682.675 L1006.02 682.675 L1005.46 682.675 L1004.91 682.675 L1004.35 682.675 L1003.79 682.675 L1003.23 682.675 L1002.67 682.675 L1002.11 682.675 L1001.55 682.675 L1000.99 682.675 L1000.43 682.675 L999.872 682.675 L999.313 682.675 L998.754 682.675 L998.194 682.675 L997.635 682.675 L997.076 682.675 L996.517 682.675 L995.957 682.675 L995.398 682.675 L994.839 682.675 L994.28 682.675 L993.72 682.675 L993.161 682.675 L992.602 682.675 L992.043 682.675 L991.483 682.675 L990.924 682.675 L990.365 682.675 L989.806 682.675 L989.246 682.675 L988.687 682.675 L988.128 682.675 L987.569 682.675 L987.009 682.675 L986.45 682.675 L985.891 682.675 L985.332 682.675 L984.772 682.675 L984.213 682.675 L983.654 682.675 L983.095 682.675 L982.535 682.675 L981.976 682.675 L981.417 682.675 L980.858 682.675 L980.298 682.675 L979.739 682.675 L979.18 682.675 L978.621 682.675 L978.061 682.675 L977.502 682.675 L976.943 682.675 L976.384 682.675 L975.824 682.675 L975.265 682.675 L974.706 682.675 L974.147 682.675 L973.587 682.675 L973.028 682.675 L972.469 682.675 L971.91 682.675 L971.35 682.675 L970.791 682.675 L970.232 682.675 L969.673 682.675 L969.113 682.675 L968.554 682.675 L967.995 682.675 L967.436 682.675 L966.876 682.675 L966.317 682.675 L965.758 682.675 L965.199 682.675 L964.639 682.675 L964.08 682.675 L963.521 682.675 L962.962 682.675 L962.402 682.675 L961.843 682.675 L961.284 682.675 L960.725 682.675 L960.165 682.675 L959.606 682.675 L959.047 682.675 L958.488 682.675 L957.928 682.675 L957.369 682.675 L956.81 682.675 L956.251 682.675 L955.691 682.675 L955.132 682.675 L954.573 682.675 L954.014 682.675 L953.454 682.675 L952.895 682.675 L952.336 682.675 L951.777 682.675 L951.217 682.675 L950.658 682.675 L950.099 682.675 L949.54 682.675 L948.98 682.675 L948.421 682.675 L947.862 682.675 L947.303 682.675 L946.743 682.675 L946.184 682.675 L945.625 682.675 L945.066 682.675 L944.506 682.675 L943.947 682.675 L943.388 682.675 L942.829 682.675 L942.269 682.675 L941.71 682.675 L941.151 682.675 L940.592 682.675 L940.032 682.675 L939.473 682.675 L938.914 682.675 L938.355 682.675 L937.795 682.675 L937.236 682.675 L936.677 682.675 L936.118 682.675 L935.558 682.675 L934.999 682.675 L934.44 682.675 L933.881 682.675 L933.321 682.675 L932.762 682.675 L932.203 682.675 L931.644 682.675 L931.084 682.675 L930.525 682.675 L929.966 682.675 L929.406 682.675 L928.847 682.675 L928.288 682.675 L927.729 682.675 L927.169 682.675 L926.61 682.675 L926.051 682.675 L925.492 682.675 L924.932 682.675 L924.373 682.675 L923.814 682.675 L923.255 682.675 L922.695 682.675 L922.136 682.675 L921.577 682.675 L921.018 682.675 L920.458 682.675 L919.899 682.675 L919.34 682.675 L918.781 682.675 L918.221 682.675 L917.662 682.675 L917.103 682.675 L916.544 682.675 L915.984 682.675 L915.425 682.675 L914.866 682.675 L914.307 682.675 L913.747 682.675 L913.188 682.675 L912.629 682.675 L912.07 682.675 L911.51 682.675 L910.951 682.675 L910.392 682.675 L909.833 682.675 L909.273 682.675 L908.714 682.675 L908.155 682.675 L907.596 682.675 L907.036 682.675 L906.477 682.675 L905.918 682.675 L905.359 682.675 L904.799 682.675 L904.24 682.675 L903.681 682.675 L903.122 682.675 L902.562 682.675 L902.003 682.675 L901.444 682.675 L900.885 682.675 L900.325 682.675 L899.766 682.675 L899.207 682.675 L898.648 682.675 L898.088 682.675 L897.529 682.675 L896.97 682.675 L896.411 682.675 L895.851 682.675 L895.292 682.675 L894.733 682.675 L894.174 682.675 L893.614 682.675 L893.055 682.675 L892.496 682.675 L891.937 682.675 L891.377 682.675 L890.818 682.675 L890.259 682.675 L889.7 682.675 L889.14 682.675 L888.581 682.675 L888.022 682.675 L887.463 682.675 L886.903 682.675 L886.344 682.675 L885.785 682.675 L885.226 682.675 L884.666 682.675 L884.107 682.675 L883.548 682.675 L882.989 682.675 L882.429 682.675 L881.87 682.675 L881.311 682.675 L880.752 682.675 L880.192 682.675 L879.633 682.675 L879.074 682.675 L878.515 682.675 L877.955 682.675 L877.396 682.675 L876.837 682.675 L876.278 682.675 L875.718 682.675 L875.159 682.675 L874.6 682.675 L874.041 682.675 L873.481 682.675 L872.922 682.675 L872.363 682.675 L871.804 682.675 L871.244 682.675 L870.685 682.675 L870.126 682.675 L869.567 682.675 L869.007 682.675 L868.448 682.675 L867.889 682.675 L867.33 682.675 L866.77 682.675 L866.211 682.675 L865.652 682.675 L865.093 682.675 L864.533 682.675 L863.974 682.675 L863.415 682.675 L862.856 682.675 L862.296 682.675 L861.737 682.675 L861.178 682.675 L860.619 682.675 L860.059 682.675 L859.5 682.675 L858.941 682.675 L858.382 682.675 L857.822 682.675 L857.263 682.675 L856.704 682.675 L856.145 682.675 L855.585 682.675 L855.026 682.675 L854.467 682.675 L853.908 682.675 L853.348 682.675 L852.789 682.675 L852.23 682.675 L851.671 682.675 L851.111 682.675 L850.552 682.675 L849.993 682.675 L849.434 682.675 L848.874 682.675 L848.315 682.675 L847.756 682.675 L847.197 682.675 L846.637 682.675 L846.078 682.675 L845.519 682.675 L844.96 682.675 L844.4 682.675 L843.841 682.675 L843.282 682.675 L842.723 682.675 L842.163 682.675 L841.604 682.675 L841.045 682.675 L840.486 682.675 L839.926 682.675 L839.367 682.675 L838.808 682.675 L838.249 682.675 L837.689 682.675 L837.13 682.675 L836.571 682.675 L836.012 682.675 L835.452 682.675 L834.893 682.675 L834.334 682.675 L833.775 682.675 L833.215 682.675 L832.656 682.675 L832.097 682.675 L831.538 682.675 L830.978 682.675 L830.419 682.675 L829.86 682.675 L829.301 682.675 L828.741 682.675 L828.182 682.675 L827.623 682.675 L827.064 682.675 L826.504 682.675 L825.945 682.675 L825.386 682.675 L824.827 682.675 L824.267 682.675 L823.708 682.675 L823.149 682.675 L822.59 682.675 L822.03 682.675 L821.471 682.675 L820.912 682.675 L820.353 682.675 L819.793 682.675 L819.234 682.675 L818.675 682.675 L818.116 682.675 L817.556 682.675 L816.997 682.675 L816.438 682.675 L815.879 682.675 L815.319 682.675 L814.76 682.675 L814.201 682.675 L813.642 682.675 L813.082 682.675 L812.523 682.675 L811.964 682.675 L811.405 682.675 L810.845 682.675 L810.286 682.675 L809.727 682.675 L809.168 682.675 L808.608 682.675 L808.049 682.675 L807.49 682.675 L806.931 682.675 L806.371 682.675 L805.812 682.675 L805.253 682.675 L804.693 682.675 L804.134 682.675 L803.575 682.675 L803.016 682.675 L802.456 682.675 L801.897 682.675 L801.338 682.675 L800.779 682.675 L800.219 682.675 L799.66 682.675 L799.101 682.675 L798.542 682.675 L797.982 682.675 L797.423 682.675 L796.864 682.675 L796.305 682.675 L795.745 682.675 L795.186 682.675 L794.627 682.675 L794.068 682.675 L793.508 682.675 L792.949 682.675 L792.39 682.675 L791.831 682.675 L791.271 682.675 L790.712 682.675 L790.153 682.675 L789.594 682.675 L789.034 682.675 L788.475 682.675 L787.916 682.675 L787.357 682.675 L786.797 682.675 L786.238 682.675 L785.679 682.675 L785.12 682.675 L784.56 682.675 L784.001 682.675 L783.442 682.675 L782.883 682.675 L782.323 682.675 L781.764 682.675 L781.205 682.675 L780.646 682.675 L780.086 682.675 L779.527 682.675 L778.968 682.675 L778.409 682.675 L777.849 682.675 L777.29 682.675 L776.731 682.675 L776.172 682.675 L775.612 682.675 L775.053 682.675 L774.494 682.675 L773.935 682.675 L773.375 682.675 L772.816 682.675 L772.257 682.675 L771.698 682.675 L771.138 682.675 L770.579 682.675 L770.02 682.675 L769.461 682.675 L768.901 682.675 L768.342 682.675 L767.783 682.675 L767.224 682.675 L766.664 682.675 L766.105 682.675 L765.546 682.675 L764.987 682.675 L764.427 682.675 L763.868 682.675 L763.309 682.675 L762.75 682.675 L762.19 682.675 L761.631 682.675 L761.072 682.675 L760.513 682.675 L759.953 682.675 L759.394 682.675 L758.835 682.675 L758.276 682.675 L757.716 682.675 L757.157 682.675 L756.598 682.675 L756.039 682.675 L755.479 682.675 L754.92 682.675 L754.361 682.675 L753.802 682.675 L753.242 682.675 L752.683 682.675 L752.124 682.675 L751.565 682.675 L751.005 682.675 L750.446 682.675 L749.887 682.675 L749.328 682.675 L748.768 682.675 L748.209 682.675 L747.65 682.675 L747.091 682.675 L746.531 682.675 L745.972 682.675 L745.413 682.675 L744.854 682.675 L744.294 682.675 L743.735 682.675 L743.176 682.675 L742.617 682.675 L742.057 682.675 L741.498 682.675 L740.939 682.675 L740.38 682.675 L739.82 682.675 L739.261 682.675 L738.702 682.675 L738.143 682.675 L737.583 682.675 L737.024 682.675 L736.465 682.675 L735.906 682.675 L735.346 682.675 L734.787 682.675 L734.228 682.675 L733.669 682.675 L733.109 682.675 L732.55 682.675 L731.991 682.675 L731.432 682.675 L730.872 682.675 L730.313 682.675 L729.754 682.675 L729.195 682.675 L728.635 682.675 L728.076 682.675 L727.517 682.675 L726.958 682.675 L726.398 682.675 L725.839 682.675 L725.28 682.675 L724.721 682.675 L724.161 682.675 L723.602 682.675 L723.043 682.675 L722.484 682.675 L721.924 682.675 L721.365 682.675 L720.806 682.675 L720.247 682.675  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip763)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,687.667 720.806,687.667 721.365,687.667 721.924,687.667 722.484,687.667 723.043,687.667 723.602,687.667 724.161,687.667 724.721,687.667 725.28,687.667 725.839,687.667 726.398,687.667 726.958,687.667 727.517,687.667 728.076,687.667 728.635,687.667 729.195,687.667 729.754,687.667 730.313,687.667 730.872,687.667 731.432,687.667 731.991,687.667 732.55,687.667 733.109,687.667 733.669,687.667 734.228,687.667 734.787,687.667 735.346,687.667 735.906,687.667 736.465,687.667 737.024,687.667 737.583,687.667 738.143,687.667 738.702,687.667 739.261,687.667 739.82,687.667 740.38,687.667 740.939,687.667 741.498,687.667 742.057,687.667 742.617,687.667 743.176,687.667 743.735,687.667 744.294,687.667 744.854,687.667 745.413,687.667 745.972,687.667 746.531,687.667 747.091,687.667 747.65,687.667 748.209,687.667 748.768,687.667 749.328,687.667 749.887,687.667 750.446,687.667 751.005,687.667 751.565,687.667 752.124,687.667 752.683,687.667 753.242,687.667 753.802,687.667 754.361,687.667 754.92,687.667 755.479,687.667 756.039,687.667 756.598,687.667 757.157,687.667 757.716,687.667 758.276,687.667 758.835,687.667 759.394,687.667 759.953,687.667 760.513,687.667 761.072,687.667 761.631,687.667 762.19,687.667 762.75,687.667 763.309,687.667 763.868,687.667 764.427,687.667 764.987,687.667 765.546,687.667 766.105,687.667 766.664,687.667 767.224,687.667 767.783,687.667 768.342,687.667 768.901,687.667 769.461,687.667 770.02,687.667 770.579,687.667 771.138,687.667 771.698,687.667 772.257,687.667 772.816,687.667 773.375,687.667 773.935,687.667 774.494,687.667 775.053,687.667 775.612,687.667 776.172,687.667 776.731,687.667 777.29,687.667 777.849,687.667 778.409,687.667 778.968,687.667 779.527,687.667 780.086,687.667 780.646,687.667 781.205,687.667 781.764,687.667 782.323,687.667 782.883,687.667 783.442,687.667 784.001,687.667 784.56,687.667 785.12,687.667 785.679,687.667 786.238,687.667 786.797,687.667 787.357,687.667 787.916,687.667 788.475,687.667 789.034,687.667 789.594,687.667 790.153,687.667 790.712,687.667 791.271,687.667 791.831,687.667 792.39,687.667 792.949,687.667 793.508,687.667 794.068,687.667 794.627,687.667 795.186,687.667 795.745,687.667 796.305,687.667 796.864,687.667 797.423,687.667 797.982,687.667 798.542,687.667 799.101,687.667 799.66,687.667 800.219,687.667 800.779,687.667 801.338,687.667 801.897,687.667 802.456,687.667 803.016,687.667 803.575,687.667 804.134,687.667 804.693,687.667 805.253,687.667 805.812,687.667 806.371,687.667 806.931,687.667 807.49,687.667 808.049,687.667 808.608,687.667 809.168,687.667 809.727,687.667 810.286,687.667 810.845,687.667 811.405,687.667 811.964,687.667 812.523,687.667 813.082,687.667 813.642,687.667 814.201,687.667 814.76,687.667 815.319,687.667 815.879,687.667 816.438,687.667 816.997,687.667 817.556,687.667 818.116,687.667 818.675,687.667 819.234,687.667 819.793,687.667 820.353,687.667 820.912,687.667 821.471,687.667 822.03,687.667 822.59,687.667 823.149,687.667 823.708,687.667 824.267,687.667 824.827,687.667 825.386,687.667 825.945,687.667 826.504,687.667 827.064,687.667 827.623,687.667 828.182,687.667 828.741,687.667 829.301,687.667 829.86,687.667 830.419,687.667 830.978,687.667 831.538,687.667 832.097,687.667 832.656,687.667 833.215,687.667 833.775,687.667 834.334,687.667 834.893,687.667 835.452,687.667 836.012,687.667 836.571,687.667 837.13,687.667 837.689,687.667 838.249,687.667 838.808,687.667 839.367,687.667 839.926,687.667 840.486,687.667 841.045,687.667 841.604,687.667 842.163,687.667 842.723,687.667 843.282,687.667 843.841,687.667 844.4,687.667 844.96,687.667 845.519,687.667 846.078,687.667 846.637,687.667 847.197,687.667 847.756,687.667 848.315,687.667 848.874,687.667 849.434,687.667 849.993,687.667 850.552,687.667 851.111,687.667 851.671,687.667 852.23,687.667 852.789,687.667 853.348,687.667 853.908,687.667 854.467,687.667 855.026,687.667 855.585,687.667 856.145,687.667 856.704,687.667 857.263,687.667 857.822,687.667 858.382,687.667 858.941,687.667 859.5,687.667 860.059,687.667 860.619,687.667 861.178,687.667 861.737,687.667 862.296,687.667 862.856,687.667 863.415,687.667 863.974,687.667 864.533,687.667 865.093,687.667 865.652,687.667 866.211,687.667 866.77,687.667 867.33,687.667 867.889,687.667 868.448,687.667 869.007,687.667 869.567,687.667 870.126,687.667 870.685,687.667 871.244,687.667 871.804,687.667 872.363,687.667 872.922,687.667 873.481,687.667 874.041,687.667 874.6,687.667 875.159,687.667 875.718,687.667 876.278,687.667 876.837,687.667 877.396,687.667 877.955,687.667 878.515,687.667 879.074,687.667 879.633,687.667 880.192,687.667 880.752,687.667 881.311,687.667 881.87,687.667 882.429,687.667 882.989,687.667 883.548,687.667 884.107,687.667 884.666,687.667 885.226,687.667 885.785,687.667 886.344,687.667 886.903,687.667 887.463,687.667 888.022,687.667 888.581,687.667 889.14,687.667 889.7,687.667 890.259,687.667 890.818,687.667 891.377,687.667 891.937,687.667 892.496,687.667 893.055,687.667 893.614,687.667 894.174,687.667 894.733,687.667 895.292,687.667 895.851,687.667 896.411,687.667 896.97,687.667 897.529,687.667 898.088,687.667 898.648,687.667 899.207,687.667 899.766,687.667 900.325,687.667 900.885,687.667 901.444,687.667 902.003,687.667 902.562,687.667 903.122,687.667 903.681,687.667 904.24,687.667 904.799,687.667 905.359,687.667 905.918,687.667 906.477,687.667 907.036,687.667 907.596,687.667 908.155,687.667 908.714,687.667 909.273,687.667 909.833,687.667 910.392,687.667 910.951,687.667 911.51,687.667 912.07,687.667 912.629,687.667 913.188,687.667 913.747,687.667 914.307,687.667 914.866,687.667 915.425,687.667 915.984,687.667 916.544,687.667 917.103,687.667 917.662,687.667 918.221,687.667 918.781,687.667 919.34,687.667 919.899,687.667 920.458,687.667 921.018,687.667 921.577,687.667 922.136,687.667 922.695,687.667 923.255,687.667 923.814,687.667 924.373,687.667 924.932,687.667 925.492,687.667 926.051,687.667 926.61,687.667 927.169,687.667 927.729,687.667 928.288,687.667 928.847,687.667 929.406,687.667 929.966,687.667 930.525,687.667 931.084,687.667 931.644,687.667 932.203,687.667 932.762,687.667 933.321,687.667 933.881,687.667 934.44,687.667 934.999,687.667 935.558,687.667 936.118,687.667 936.677,687.667 937.236,687.667 937.795,687.667 938.355,687.667 938.914,687.667 939.473,687.667 940.032,687.667 940.592,687.667 941.151,687.667 941.71,687.667 942.269,687.667 942.829,687.667 943.388,687.667 943.947,687.667 944.506,687.667 945.066,687.667 945.625,687.667 946.184,687.667 946.743,687.667 947.303,687.667 947.862,687.667 948.421,687.667 948.98,687.667 949.54,687.667 950.099,687.667 950.658,687.667 951.217,687.667 951.777,687.667 952.336,687.667 952.895,687.667 953.454,687.667 954.014,687.667 954.573,687.667 955.132,687.667 955.691,687.667 956.251,687.667 956.81,687.667 957.369,687.667 957.928,687.667 958.488,687.667 959.047,687.667 959.606,687.667 960.165,687.667 960.725,687.667 961.284,687.667 961.843,687.667 962.402,687.667 962.962,687.667 963.521,687.667 964.08,687.667 964.639,687.667 965.199,687.667 965.758,687.667 966.317,687.667 966.876,687.667 967.436,687.667 967.995,687.667 968.554,687.667 969.113,687.667 969.673,687.667 970.232,687.667 970.791,687.667 971.35,687.667 971.91,687.667 972.469,687.667 973.028,687.667 973.587,687.667 974.147,687.667 974.706,687.667 975.265,687.667 975.824,687.667 976.384,687.667 976.943,687.667 977.502,687.667 978.061,687.667 978.621,687.667 979.18,687.667 979.739,687.667 980.298,687.667 980.858,687.667 981.417,687.667 981.976,687.667 982.535,687.667 983.095,687.667 983.654,687.667 984.213,687.667 984.772,687.667 985.332,687.667 985.891,687.667 986.45,687.667 987.009,687.667 987.569,687.667 988.128,687.667 988.687,687.667 989.246,687.667 989.806,687.667 990.365,687.667 990.924,687.667 991.483,687.667 992.043,687.667 992.602,687.667 993.161,687.667 993.72,687.667 994.28,687.667 994.839,687.667 995.398,687.667 995.957,687.667 996.517,687.667 997.076,687.667 997.635,687.667 998.194,687.667 998.754,687.667 999.313,687.667 999.872,687.667 1000.43,687.667 1000.99,687.667 1001.55,687.667 1002.11,687.667 1002.67,687.667 1003.23,687.667 1003.79,687.667 1004.35,687.667 1004.91,687.667 1005.46,687.667 1006.02,687.667 1006.58,687.667 1007.14,687.667 1007.7,687.667 1008.26,687.667 1008.82,687.667 1009.38,687.667 1009.94,687.667 1010.5,687.667 1011.06,687.667 1011.62,687.667 1012.18,687.667 1012.73,687.667 1013.29,687.667 1013.85,687.667 1014.41,687.667 1014.97,687.667 1015.53,687.667 1016.09,687.667 1016.65,687.667 1017.21,687.667 1017.77,687.667 1018.33,687.667 1018.89,687.667 1019.45,687.667 1020.01,687.667 1020.56,687.667 1021.12,687.667 1021.68,687.667 1022.24,687.667 1022.8,687.667 1023.36,687.667 1023.92,687.667 1024.48,687.667 1025.04,687.667 1025.6,687.667 1026.16,687.667 1026.72,687.667 1027.28,687.667 1027.83,687.667 1028.39,687.667 1028.95,687.667 1029.51,687.667 1030.07,687.667 1030.63,687.667 1031.19,687.667 1031.75,687.667 1032.31,687.667 1032.87,687.667 1033.43,687.667 1033.99,687.667 1034.55,687.667 1035.1,687.667 1035.66,687.667 1036.22,687.667 1036.78,687.667 1037.34,687.667 1037.9,687.667 1038.46,687.667 1039.02,687.667 1039.58,687.667 1040.14,687.667 1040.7,687.667 1041.26,687.667 1041.82,687.667 1042.38,687.667 1042.93,687.667 1043.49,687.667 1044.05,687.667 1044.61,687.667 1045.17,687.667 1045.73,687.667 1046.29,687.667 1046.85,687.667 1047.41,687.667 1047.97,687.667 1048.53,687.667 1049.09,687.667 1049.65,687.667 1050.2,687.667 1050.76,687.667 1051.32,687.667 1051.88,687.667 1052.44,687.667 1053,687.667 1053.56,687.667 1054.12,687.667 1054.68,687.667 1055.24,687.667 1055.8,687.667 1056.36,687.667 1056.92,687.667 1057.48,687.667 1058.03,687.667 1058.59,687.667 1059.15,687.667 1059.71,687.667 1060.27,687.667 1060.83,687.667 1061.39,687.667 1061.95,687.667 1062.51,687.667 1063.07,687.667 1063.63,687.667 1064.19,687.667 1064.75,687.667 1065.3,687.667 1065.86,687.667 1066.42,687.667 1066.98,687.667 1067.54,687.667 1068.1,687.667 1068.66,687.667 1069.22,687.667 1069.78,687.667 1070.34,687.667 1070.9,687.667 1071.46,687.667 1072.02,687.667 1072.57,687.667 1073.13,687.667 1073.69,687.667 1074.25,687.667 1074.81,687.667 1075.37,687.667 1075.93,687.667 1076.49,687.667 1077.05,687.667 1077.61,687.667 1078.17,687.667 1078.73,687.667 1079.29,687.667 1079.85,687.667 1080.4,687.667 1080.96,687.667 1081.52,687.667 1082.08,687.667 1082.64,687.667 1083.2,687.667 1083.76,687.667 1084.32,687.667 1084.88,687.667 1085.44,687.667 1086,687.667 1086.56,687.667 1087.12,687.667 1087.67,687.667 1088.23,687.667 1088.79,687.667 1089.35,687.667 1089.91,687.667 1090.47,687.667 1091.03,687.667 1091.59,687.667 1092.15,687.667 1092.71,687.667 1093.27,687.667 1093.83,687.667 1094.39,687.667 1094.94,687.667 1095.5,687.667 1096.06,687.667 1096.62,687.667 1097.18,687.667 1097.74,687.667 1098.3,687.667 1098.86,687.667 1099.42,687.667 1099.98,687.667 1100.54,687.667 1101.1,687.667 1101.66,687.667 1102.22,687.667 1102.77,687.667 1103.33,687.667 1103.89,687.667 1104.45,687.667 1105.01,687.667 1105.57,687.667 1106.13,687.667 1106.69,687.667 1107.25,687.667 1107.81,687.667 1108.37,687.667 1108.93,687.667 1109.49,687.667 1110.04,687.667 1110.6,687.667 1111.16,687.667 1111.72,687.667 1112.28,687.667 1112.84,687.667 1113.4,687.667 1113.96,687.667 1114.52,687.667 1115.08,687.667 1115.64,687.667 1116.2,687.667 1116.76,687.667 1117.31,687.667 1117.87,687.667 1118.43,687.667 1118.99,687.667 1119.55,687.667 1120.11,687.667 1120.67,687.667 1121.23,687.667 1121.79,687.667 1122.35,687.667 1122.91,687.667 1123.47,687.667 1124.03,687.667 1124.59,687.667 1125.14,687.667 1125.7,687.667 1126.26,687.667 1126.82,687.667 1127.38,687.667 1127.94,687.667 1128.5,687.667 1129.06,687.667 1129.62,687.667 1130.18,687.667 1130.74,687.667 1131.3,687.667 1131.86,687.667 1132.41,687.667 1132.97,687.667 1133.53,687.667 1134.09,687.667 1134.65,687.667 1135.21,687.667 1135.77,687.667 1136.33,687.667 1136.89,687.667 1137.45,687.667 1138.01,687.667 1138.57,687.667 1139.13,687.667 1139.68,687.667 1140.24,687.667 1140.8,687.667 1141.36,687.667 1141.92,687.667 1142.48,687.667 1143.04,687.667 1143.6,687.667 1144.16,687.667 1144.72,687.667 1145.28,687.667 1145.84,687.667 1146.4,687.667 1146.96,687.667 1147.51,687.667 1148.07,687.667 1148.63,687.667 1149.19,687.667 1149.75,687.667 1150.31,687.667 1150.87,687.667 1151.43,687.667 1151.99,687.667 1152.55,687.667 1153.11,687.667 1153.67,687.667 1154.23,687.667 1154.78,687.667 1155.34,687.667 1155.9,687.667 1156.46,687.667 1157.02,687.667 1157.58,687.667 1158.14,687.667 1158.7,687.667 1159.26,687.667 1159.82,687.667 1160.38,687.667 1160.94,687.667 1161.5,687.667 1162.05,687.667 1162.61,687.667 1163.17,687.667 1163.73,687.667 1164.29,687.667 1164.85,687.667 1165.41,687.667 1165.97,687.667 1166.53,687.667 1167.09,687.667 1167.65,687.667 1168.21,687.667 1168.77,687.667 1169.33,687.667 1169.88,687.667 1170.44,687.667 1171,687.667 1171.56,687.667 1172.12,687.667 1172.68,687.667 1173.24,687.667 1173.8,687.667 1174.36,687.667 1174.92,687.667 1175.48,687.667 1176.04,687.667 1176.6,687.667 1177.15,687.667 1177.71,687.667 1178.27,687.667 1178.83,687.667 1179.39,687.667 1179.95,687.667 1180.51,687.667 1181.07,687.667 1181.63,687.667 1182.19,687.667 1182.75,687.667 1183.31,687.667 1183.87,687.667 1184.43,687.667 1184.98,687.667 1185.54,687.667 1186.1,687.667 1186.66,687.667 1187.22,687.667 1187.78,687.667 1188.34,687.667 1188.9,687.667 1189.46,687.667 1190.02,687.667 1190.58,687.667 1191.14,687.667 1191.7,687.667 1192.25,687.667 1192.81,687.667 1193.37,687.667 1193.93,687.667 1194.49,687.667 1195.05,687.667 1195.61,687.667 1196.17,687.667 1196.73,687.667 1197.29,687.667 1197.85,687.667 1198.41,687.667 1198.97,687.667 1199.52,687.667 1200.08,687.667 1200.64,687.667 1201.2,687.667 1201.76,687.667 1202.32,687.667 1202.88,687.667 1203.44,687.667 1204,687.667 1204.56,687.667 1205.12,687.667 1205.68,687.667 1206.24,687.667 1206.8,687.667 1207.35,687.667 1207.91,687.667 1208.47,687.667 1209.03,687.667 1209.59,687.667 1210.15,687.667 1210.71,687.667 1211.27,687.667 1211.83,687.667 1212.39,687.667 1212.95,687.667 1213.51,687.667 1214.07,687.667 1214.62,687.667 1215.18,687.667 1215.74,687.667 1216.3,687.667 1216.86,687.667 1217.42,687.667 1217.98,687.667 1218.54,687.667 1219.1,687.667 1219.66,687.667 1220.22,687.667 1220.78,687.667 1221.34,687.667 1221.89,687.667 1222.45,687.667 1223.01,687.667 1223.57,687.667 1224.13,687.667 1224.69,687.667 1225.25,687.667 1225.81,687.667 1226.37,687.667 1226.93,687.667 1227.49,687.667 1228.05,687.667 1228.61,687.667 1229.17,687.667 1229.72,687.667 1230.28,687.667 1230.84,687.667 1231.4,687.667 1231.96,687.667 1232.52,687.667 1233.08,687.667 1233.64,687.667 1234.2,687.667 1234.76,687.667 1235.32,687.667 1235.88,687.667 1236.44,687.667 1236.99,687.667 1237.55,687.667 1238.11,687.667 1238.67,687.667 1239.23,687.667 1239.79,687.667 1240.35,687.667 1240.91,687.667 1241.47,687.667 1242.03,687.667 1242.59,687.667 1243.15,687.667 1243.71,687.667 1244.26,687.667 1244.82,687.667 1245.38,687.667 1245.94,687.667 1246.5,687.667 1247.06,687.667 1247.62,687.667 1248.18,687.667 1248.74,687.667 1249.3,687.667 1249.86,687.667 1250.42,687.667 1250.98,687.667 1251.54,687.667 1252.09,687.667 1252.65,687.667 1253.21,687.667 1253.77,687.667 1254.33,687.667 1254.89,687.667 1255.45,687.667 1256.01,687.667 1256.57,687.667 1257.13,687.667 1257.69,687.667 1258.25,687.667 1258.81,687.667 1259.36,687.667 1259.92,687.667 1260.48,687.667 1261.04,687.667 1261.6,687.667 1262.16,687.667 1262.72,687.667 1263.28,687.667 1263.84,687.667 1264.4,687.667 1264.96,687.667 1265.52,687.667 1266.08,687.667 1266.63,687.667 1267.19,687.667 1267.75,687.667 1268.31,687.667 1268.87,687.667 1269.43,687.667 1269.99,687.667 1270.55,687.667 1271.11,687.667 1271.67,687.667 1272.23,687.667 1272.79,687.667 1273.35,687.667 1273.91,687.667 1274.46,687.667 1275.02,687.667 1275.58,687.667 1276.14,687.667 1276.7,687.667 1277.26,687.667 1277.82,687.667 1278.38,687.667 1278.94,687.667 1279.5,687.667 1280.06,687.667 1280.62,687.667 1281.18,687.667 1281.73,687.667 1282.29,687.667 1282.85,687.667 1283.41,687.667 1283.97,687.667 1284.53,687.667 1285.09,687.667 1285.65,687.667 1286.21,687.667 1286.77,687.667 1287.33,687.667 1287.89,687.667 1288.45,687.667 1289,687.667 1289.56,687.667 1290.12,687.667 1290.68,687.667 1291.24,687.667 1291.8,687.667 1292.36,687.667 1292.92,687.667 1293.48,687.667 1294.04,687.667 1294.6,687.667 1295.16,687.667 1295.72,687.667 1296.28,687.667 1296.83,687.667 1297.39,687.667 1297.95,687.667 1298.51,687.667 1299.07,687.667 1299.63,687.667 1300.19,687.667 1300.75,687.667 1301.31,687.667 1301.87,687.667 1302.43,687.667 1302.99,687.667 1303.55,687.667 1304.1,687.667 1304.66,687.667 1305.22,687.667 1305.78,687.667 1306.34,687.667 1306.9,687.667 1307.46,687.667 1308.02,687.667 1308.58,687.667 1309.14,687.667 1309.7,687.667 1310.26,687.667 1310.82,687.667 1311.38,687.667 1311.93,687.667 1312.49,687.667 1313.05,687.667 1313.61,687.667 1314.17,687.667 1314.73,687.667 1315.29,687.667 1315.85,687.667 1316.41,687.667 1316.97,687.667 1317.53,687.667 1318.09,687.667 1318.65,687.667 1319.2,687.667 1319.76,687.667 1320.32,687.667 1320.88,687.667 1321.44,687.667 1322,687.667 1322.56,687.667 1323.12,687.667 1323.68,687.667 1324.24,687.667 1324.8,687.667 1325.36,687.667 1325.92,687.667 1326.47,687.667 1327.03,687.667 1327.59,687.667 1328.15,687.667 1328.71,687.667 1329.27,687.667 1329.83,687.667 1330.39,687.667 1330.95,687.667 1331.51,687.667 1332.07,687.667 1332.63,687.667 1333.19,687.667 1333.75,687.667 1334.3,687.667 1334.86,687.667 1335.42,687.667 1335.98,687.667 1336.54,687.667 1337.1,687.667 1337.66,687.667 1338.22,687.667 1338.78,687.667 1339.34,687.667 1339.9,687.667 1340.46,687.667 1341.02,687.667 1341.57,687.667 1342.13,687.667 1342.69,687.667 1343.25,687.667 1343.81,687.667 1344.37,687.667 1344.93,687.667 1345.49,687.667 1346.05,687.667 1346.61,687.667 1347.17,687.667 1347.73,687.667 1348.29,687.667 1348.84,687.667 1349.4,687.667 1349.96,687.667 1350.52,687.667 1351.08,687.667 1351.64,687.667 1352.2,687.667 1352.76,687.667 1353.32,687.667 1353.88,687.667 1354.44,687.667 1355,687.667 1355.56,687.667 1356.12,687.667 1356.67,687.667 1357.23,687.667 1357.79,687.667 1358.35,687.667 1358.91,687.667 1359.47,687.667 1360.03,687.667 1360.59,687.667 1361.15,687.667 1361.71,687.667 1362.27,687.667 1362.83,687.667 1363.39,687.667 1363.94,687.667 1364.5,687.667 1365.06,687.667 1365.62,687.667 1366.18,687.667 1366.74,687.667 1367.3,687.667 1367.86,687.667 1368.42,687.667 1368.98,687.667 1369.54,687.667 1370.1,687.667 1370.66,687.667 1371.21,687.667 1371.77,687.667 1372.33,687.667 1372.89,687.667 1373.45,687.667 1374.01,687.667 1374.57,687.667 1375.13,687.667 1375.69,687.667 1376.25,687.667 1376.81,687.667 1377.37,687.667 1377.93,687.667 1378.49,687.667 1379.04,687.667 1379.6,687.667 1380.16,687.667 1380.72,687.667 1381.28,687.667 1381.84,687.667 1382.4,687.667 1382.96,687.667 1383.52,687.667 1384.08,687.667 1384.64,687.667 1385.2,687.667 1385.76,687.667 1386.31,687.667 1386.87,687.667 1387.43,687.667 1387.99,687.667 1388.55,687.667 1389.11,687.667 1389.67,687.667 1390.23,687.667 1390.79,687.667 1391.35,687.667 1391.91,687.667 1392.47,687.667 1393.03,687.667 1393.58,687.667 1394.14,687.667 1394.7,687.667 1395.26,687.667 1395.82,687.667 1396.38,687.667 1396.94,687.667 1397.5,687.667 1398.06,687.667 1398.62,687.667 1399.18,687.667 1399.74,687.667 1400.3,687.667 1400.86,687.667 1401.41,687.667 1401.97,687.667 1402.53,687.667 1403.09,687.667 1403.65,687.667 1404.21,687.667 1404.77,687.667 1405.33,687.667 1405.89,687.667 1406.45,687.667 1407.01,687.667 1407.57,687.667 1408.13,687.667 1408.68,687.667 1409.24,687.667 1409.8,687.667 1410.36,687.667 1410.92,687.667 1411.48,687.667 1412.04,687.667 1412.6,687.667 1413.16,687.667 1413.72,687.667 1414.28,687.667 1414.84,687.667 1415.4,687.667 1415.95,687.667 1416.51,687.667 1417.07,687.667 1417.63,687.667 1418.19,687.667 1418.75,687.667 1419.31,687.667 1419.87,687.667 1420.43,687.667 1420.99,687.667 1421.55,687.667 1422.11,687.667 1422.67,687.667 1423.23,687.667 1423.78,687.667 1424.34,687.667 1424.9,687.667 1425.46,687.667 1426.02,687.667 1426.58,687.667 1427.14,687.667 1427.7,687.667 1428.26,687.667 1428.82,687.667 1429.38,687.667 1429.94,687.667 1430.5,687.667 1431.05,687.667 1431.61,687.667 1432.17,687.667 1432.73,687.667 1433.29,687.667 1433.85,687.667 1434.41,687.667 1434.97,687.667 1435.53,687.667 1436.09,687.667 1436.65,687.667 1437.21,687.667 1437.77,687.667 1438.33,687.667 1438.88,687.667 1439.44,687.667 1440,687.667 1440.56,687.667 1441.12,687.667 1441.68,687.667 1442.24,687.667 1442.8,687.667 1443.36,687.667 1443.92,687.667 1444.48,687.667 1445.04,687.667 1445.6,687.667 1446.15,687.667 1446.71,687.667 1447.27,687.667 1447.83,687.667 1448.39,687.667 1448.95,687.667 1449.51,687.667 1450.07,687.667 1450.63,687.667 1451.19,687.667 1451.75,687.667 1452.31,687.667 1452.87,687.667 1453.42,687.667 1453.98,687.667 1454.54,687.667 1455.1,687.667 1455.66,687.667 1456.22,687.667 1456.78,687.667 1457.34,687.667 1457.9,687.667 1458.46,687.667 1459.02,687.667 1459.58,687.667 1460.14,687.667 1460.7,687.667 1461.25,687.667 1461.81,687.667 1462.37,687.667 1462.93,687.667 1463.49,687.667 1464.05,687.667 1464.61,687.667 1465.17,687.667 1465.73,687.667 1466.29,687.667 1466.85,687.667 1467.41,687.667 1467.97,687.667 1468.52,687.667 1469.08,687.667 1469.64,687.667 1470.2,687.667 1470.76,687.667 1471.32,687.667 1471.88,687.667 1472.44,687.667 1473,687.667 1473.56,687.667 1474.12,687.667 1474.68,687.667 1475.24,687.667 1475.79,687.667 1476.35,687.667 1476.91,687.667 1477.47,687.667 1478.03,687.667 1478.59,687.667 1479.15,687.667 1479.71,687.667 1480.27,687.667 1480.83,687.667 1481.39,687.667 1481.95,687.667 1482.51,687.667 1483.07,687.667 1483.62,687.667 1484.18,687.667 1484.74,687.667 1485.3,687.667 1485.86,687.667 1486.42,687.667 1486.98,687.667 1487.54,687.667 1488.1,687.667 1488.66,687.667 1489.22,687.667 1489.78,687.667 1490.34,687.667 1490.89,687.667 1491.45,687.667 1492.01,687.667 1492.57,687.667 1493.13,687.667 1493.69,687.667 1494.25,687.667 1494.81,687.667 1495.37,687.667 1495.93,687.667 1496.49,687.667 1497.05,687.667 1497.61,687.667 1498.16,687.667 1498.72,687.667 1499.28,687.667 1499.84,687.667 1500.4,687.667 1500.96,687.667 1501.52,687.667 1502.08,687.667 1502.64,687.667 1503.2,687.667 1503.76,687.667 1504.32,687.667 1504.88,687.667 1505.44,687.667 1505.99,687.667 1506.55,687.667 1507.11,687.667 1507.67,687.667 1508.23,687.667 1508.79,687.667 1509.35,687.667 1509.91,687.667 1510.47,687.667 1511.03,687.667 1511.59,687.667 1512.15,687.667 1512.71,687.667 1513.26,687.667 1513.82,687.667 1514.38,687.667 1514.94,687.667 1515.5,687.667 1516.06,687.667 1516.62,687.667 1517.18,687.667 1517.74,687.667 1518.3,687.667 1518.86,687.667 1519.42,687.667 1519.98,687.667 1520.53,687.667 1521.09,687.667 1521.65,687.667 1522.21,687.667 1522.77,687.667 1523.33,687.667 1523.89,687.667 1524.45,687.667 1525.01,687.667 1525.57,687.667 1526.13,687.667 1526.69,687.667 1527.25,687.667 1527.81,687.667 1528.36,687.667 1528.92,687.667 1529.48,687.667 1530.04,687.667 1530.6,687.667 1531.16,687.667 1531.72,687.667 1532.28,687.667 1532.84,687.667 1533.4,687.667 1533.96,687.667 1534.52,687.667 1535.08,687.667 1535.63,687.667 1536.19,687.667 1536.75,687.667 1537.31,687.667 1537.87,687.667 1538.43,687.667 1538.99,687.667 1539.55,687.667 1540.11,687.667 1540.67,687.667 1541.23,687.667 1541.79,687.667 1542.35,687.667 1542.9,687.667 1543.46,687.667 1544.02,687.667 1544.58,687.667 1545.14,687.667 1545.7,687.667 1546.26,687.667 1546.82,687.667 1547.38,687.667 1547.94,687.667 1548.5,687.667 1549.06,687.667 1549.62,687.667 1550.18,687.667 1550.73,687.667 1551.29,687.667 1551.85,687.667 1552.41,687.667 1552.97,687.667 1553.53,687.667 1554.09,687.667 1554.65,687.667 1555.21,687.667 1555.77,687.667 1556.33,687.667 1556.89,687.667 1557.45,687.667 1558,687.667 1558.56,687.667 1559.12,687.667 1559.68,687.667 1560.24,687.667 1560.8,687.667 1561.36,687.667 1561.92,687.667 1562.48,687.667 1563.04,687.667 1563.6,687.667 1564.16,687.667 1564.72,687.667 1565.28,687.667 1565.83,687.667 1566.39,687.667 1566.95,687.667 1567.51,687.667 1568.07,687.667 1568.63,687.667 1569.19,687.667 1569.75,687.667 1570.31,687.667 1570.87,687.667 1571.43,687.667 1571.99,687.667 1572.55,687.667 1573.1,687.667 1573.66,687.667 1574.22,687.667 1574.78,687.667 1575.34,687.667 1575.9,687.667 1576.46,687.667 1577.02,687.667 1577.58,687.667 1578.14,687.667 1578.7,687.667 1579.26,687.667 1579.82,687.667 1580.37,687.667 1580.93,687.667 1581.49,687.667 1582.05,687.667 1582.61,687.667 1583.17,687.667 1583.73,687.667 1584.29,687.667 1584.85,687.667 1585.41,687.667 1585.97,687.667 1586.53,687.667 1587.09,687.667 1587.65,687.667 1588.2,687.667 1588.76,687.667 1589.32,687.667 1589.88,687.667 1590.44,687.667 1591,687.667 1591.56,687.667 1592.12,687.667 1592.68,687.667 1593.24,687.667 1593.8,687.667 1594.36,687.667 1594.92,687.667 1595.47,687.667 1596.03,687.667 1596.59,687.667 1597.15,687.667 1597.71,687.667 1598.27,687.667 1598.83,687.667 1599.39,687.667 1599.95,687.667 1600.51,687.667 1601.07,687.667 1601.63,687.667 1602.19,687.667 1602.74,687.667 1603.3,687.667 1603.86,687.667 1604.42,687.667 1604.98,687.667 1605.54,687.667 1606.1,687.667 1606.66,687.667 1607.22,687.667 1607.78,687.667 1608.34,687.667 1608.9,687.667 1609.46,687.667 1610.02,687.667 1610.57,687.667 1611.13,687.667 1611.69,687.667 1612.25,687.667 1612.81,687.667 1613.37,687.667 1613.93,687.667 1614.49,687.667 1615.05,687.667 1615.61,687.667 1616.17,687.667 1616.73,687.667 1617.29,687.667 1617.84,687.667 1618.4,687.667 1618.96,687.667 1619.52,687.667 1620.08,687.667 1620.64,687.667 1621.2,687.667 1621.76,687.667 1622.32,687.667 1622.88,687.667 1623.44,687.667 1624,687.667 1624.56,687.667 1625.11,687.667 1625.67,687.667 1626.23,687.667 1626.79,687.667 1627.35,687.667 1627.91,687.667 1628.47,687.667 1629.03,687.667 1629.59,687.667 1630.15,687.667 1630.71,687.667 1631.27,687.667 1631.83,687.667 1632.39,687.667 1632.94,687.667 1633.5,687.667 1634.06,687.667 1634.62,687.667 1635.18,687.667 1635.74,687.667 1636.3,687.667 1636.86,687.667 1637.42,687.667 1637.98,687.667 1638.54,687.667 1639.1,687.667 1639.66,687.667 1640.21,687.667 1640.77,687.667 1641.33,687.667 1641.89,687.667 1642.45,687.667 1643.01,687.667 1643.57,687.667 1644.13,687.667 1644.69,687.667 1645.25,687.667 1645.81,687.667 1646.37,687.667 1646.93,687.667 1647.48,687.667 1648.04,687.667 1648.6,687.667 1649.16,687.667 1649.72,687.667 1650.28,687.667 1650.84,687.667 1651.4,687.667 1651.96,687.667 1652.52,687.667 1653.08,687.667 1653.64,687.667 1654.2,687.667 1654.76,687.667 1655.31,687.667 1655.87,687.667 1656.43,687.667 1656.99,687.667 1657.55,687.667 1658.11,687.667 1658.67,687.667 1659.23,687.667 1659.79,687.667 1660.35,687.667 1660.91,687.667 1661.47,687.667 1662.03,687.667 1662.58,687.667 1663.14,687.667 1663.7,687.667 1664.26,687.667 1664.82,687.667 1665.38,687.667 1665.94,687.667 1666.5,687.667 1667.06,687.667 1667.62,687.667 1668.18,687.667 1668.74,687.667 1669.3,687.667 1669.85,687.667 1670.41,687.667 1670.97,687.667 1671.53,687.667 1672.09,687.667 1672.65,687.667 1673.21,687.667 1673.77,687.667 1674.33,687.667 1674.89,687.667 1675.45,687.667 1676.01,687.667 1676.57,687.667 1677.13,687.667 1677.68,687.667 1678.24,687.667 1678.8,687.667 1679.36,687.667 1679.92,687.667 1680.48,687.667 1681.04,687.667 1681.6,687.667 1682.16,687.667 1682.72,687.667 1683.28,687.667 1683.84,687.667 1684.4,687.667 1684.95,687.667 1685.51,687.667 1686.07,687.667 1686.63,687.667 1687.19,687.667 1687.75,687.667 1688.31,687.667 1688.87,687.667 1689.43,687.667 1689.99,687.667 1690.55,687.667 1691.11,687.667 1691.67,687.667 1692.23,687.667 1692.78,687.667 1693.34,687.667 1693.9,687.667 1694.46,687.667 1695.02,687.667 1695.58,687.667 1696.14,687.667 1696.7,687.667 1697.26,687.667 1697.82,687.667 1698.38,687.667 1698.94,687.667 1699.5,687.667 1700.05,687.667 1700.61,687.667 1701.17,687.667 1701.73,687.667 1702.29,687.667 1702.85,687.667 1703.41,687.667 1703.97,687.667 1704.53,687.667 1705.09,687.667 1705.65,687.667 1706.21,687.667 1706.77,687.667 1707.32,687.667 1707.88,687.667 1708.44,687.667 1709,687.667 1709.56,687.667 1710.12,687.667 1710.68,687.667 1711.24,687.667 1711.8,687.667 1712.36,687.667 1712.92,687.667 1713.48,687.667 1714.04,687.667 1714.6,687.667 1715.15,687.667 1715.71,687.667 1716.27,687.667 1716.83,687.667 1717.39,687.667 1717.95,687.667 1718.51,687.667 1719.07,687.667 1719.63,687.667 1720.19,687.667 1720.75,687.667 1721.31,687.667 1721.87,687.667 1722.42,687.667 1722.98,687.667 1723.54,687.667 1724.1,687.667 1724.66,687.667 1725.22,687.667 1725.78,687.667 1726.34,687.667 1726.9,687.667 1727.46,687.667 1728.02,687.667 1728.58,687.667 1729.14,687.667 1729.69,687.667 1730.25,687.667 1730.81,687.667 1731.37,687.667 1731.93,687.667 1732.49,687.667 1733.05,687.667 1733.61,687.667 1734.17,687.667 1734.73,687.667 1735.29,687.667 1735.85,687.667 1736.41,687.667 1736.97,687.667 1737.52,687.667 1738.08,687.667 1738.64,687.667 1739.2,687.667 1739.76,687.667 1740.32,687.667 1740.88,687.667 1741.44,687.667 1742,687.667 1742.56,687.667 1743.12,687.667 1743.68,687.667 1744.24,687.667 1744.79,687.667 1745.35,687.667 1745.91,687.667 1746.47,687.667 1747.03,687.667 1747.59,687.667 1748.15,687.667 1748.71,687.667 1749.27,687.667 1749.83,687.667 1750.39,687.667 1750.95,687.667 1751.51,687.667 1752.06,687.667 1752.62,687.667 1753.18,687.667 1753.74,687.667 1754.3,687.667 1754.86,687.667 1755.42,687.667 1755.98,687.667 1756.54,687.667 1757.1,687.667 1757.66,687.667 1758.22,687.667 1758.78,687.667 1759.34,687.667 1759.89,687.667 1760.45,687.667 1761.01,687.667 1761.57,687.667 1762.13,687.667 1762.69,687.667 1763.25,687.667 1763.81,687.667 1764.37,687.667 1764.93,687.667 1765.49,687.667 1766.05,687.667 1766.61,687.667 1767.16,687.667 1767.72,687.667 1768.28,687.667 1768.84,687.667 1769.4,687.667 1769.96,687.667 1770.52,687.667 1771.08,687.667 1771.64,687.667 1772.2,687.667 1772.76,687.667 1773.32,687.667 1773.88,687.667 1774.43,687.667 1774.99,687.667 1775.55,687.667 1776.11,687.667 1776.67,687.667 1777.23,687.667 1777.79,687.667 1778.35,687.667 1778.91,687.667 1779.47,687.667 1780.03,687.667 1780.59,687.667 1781.15,687.667 1781.71,687.667 1782.26,687.667 1782.82,687.667 1783.38,687.667 1783.94,687.667 1784.5,687.667 1785.06,687.667 1785.62,687.667 1786.18,687.667 1786.74,687.667 1787.3,687.667 1787.86,687.667 1788.42,687.667 1788.98,687.667 1789.53,687.667 1790.09,687.667 1790.65,687.667 1791.21,687.667 1791.77,687.667 1792.33,687.667 1792.89,687.667 1793.45,687.667 1794.01,687.667 1794.57,687.667 1795.13,687.667 1795.69,687.667 1796.25,687.667 1796.8,687.667 1797.36,687.667 1797.92,687.667 1798.48,687.667 1799.04,687.667 1799.6,687.667 1800.16,687.667 1800.72,687.667 1801.28,687.667 1801.84,687.667 1802.4,687.667 1802.96,687.667 1803.52,687.667 1804.08,687.667 1804.63,687.667 1805.19,687.667 1805.75,687.667 1806.31,687.667 1806.87,687.667 1807.43,687.667 1807.99,687.667 1808.55,687.667 1809.11,687.667 1809.67,687.667 1810.23,687.667 1810.79,687.667 1811.35,687.667 1811.9,687.667 1812.46,687.667 1813.02,687.667 1813.58,687.667 1814.14,687.667 1814.7,687.667 1815.26,687.667 1815.82,687.667 1816.38,687.667 1816.94,687.667 1817.5,687.667 1818.06,687.667 1818.62,687.667 1819.18,687.667 1819.73,687.667 1820.29,687.667 1820.85,687.667 1821.41,687.667 1821.97,687.667 1822.53,687.667 1823.09,687.667 1823.65,687.667 1824.21,687.667 1824.77,687.667 1825.33,687.667 1825.89,687.667 1826.45,687.667 1827,687.667 1827.56,687.667 1828.12,687.667 1828.68,687.667 1829.24,687.667 1829.8,687.667 1830.36,687.667 1830.92,687.667 1831.48,687.667 1832.04,687.667 1832.6,687.667 1833.16,687.667 1833.72,687.667 1834.27,687.667 1834.83,687.667 1835.39,687.667 1835.95,687.667 1836.51,687.667 1837.07,687.667 1837.63,687.667 1838.19,687.667 \"/>\n<path clip-path=\"url(#clip763)\" d=\"M720.247 684.185 L720.806 684.185 L721.365 684.185 L721.924 684.185 L722.484 684.185 L723.043 684.185 L723.602 684.185 L724.161 684.185 L724.721 684.185 L725.28 684.185 L725.839 684.185 L726.398 684.185 L726.958 684.185 L727.517 684.185 L728.076 684.185 L728.635 684.185 L729.195 684.185 L729.754 684.185 L730.313 684.185 L730.872 684.185 L731.432 684.185 L731.991 684.185 L732.55 684.185 L733.109 684.185 L733.669 684.185 L734.228 684.185 L734.787 684.185 L735.346 684.185 L735.906 684.185 L736.465 684.185 L737.024 684.185 L737.583 684.185 L738.143 684.185 L738.702 684.185 L739.261 684.185 L739.82 684.185 L740.38 684.185 L740.939 684.185 L741.498 684.185 L742.057 684.185 L742.617 684.185 L743.176 684.185 L743.735 684.185 L744.294 684.185 L744.854 684.185 L745.413 684.185 L745.972 684.185 L746.531 684.185 L747.091 684.185 L747.65 684.185 L748.209 684.185 L748.768 684.185 L749.328 684.185 L749.887 684.185 L750.446 684.185 L751.005 684.185 L751.565 684.185 L752.124 684.185 L752.683 684.185 L753.242 684.185 L753.802 684.185 L754.361 684.185 L754.92 684.185 L755.479 684.185 L756.039 684.185 L756.598 684.185 L757.157 684.185 L757.716 684.185 L758.276 684.185 L758.835 684.185 L759.394 684.185 L759.953 684.185 L760.513 684.185 L761.072 684.185 L761.631 684.185 L762.19 684.185 L762.75 684.185 L763.309 684.185 L763.868 684.185 L764.427 684.185 L764.987 684.185 L765.546 684.185 L766.105 684.185 L766.664 684.185 L767.224 684.185 L767.783 684.185 L768.342 684.185 L768.901 684.185 L769.461 684.185 L770.02 684.185 L770.579 684.185 L771.138 684.185 L771.698 684.185 L772.257 684.185 L772.816 684.185 L773.375 684.185 L773.935 684.185 L774.494 684.185 L775.053 684.185 L775.612 684.185 L776.172 684.185 L776.731 684.185 L777.29 684.185 L777.849 684.185 L778.409 684.185 L778.968 684.185 L779.527 684.185 L780.086 684.185 L780.646 684.185 L781.205 684.185 L781.764 684.185 L782.323 684.185 L782.883 684.185 L783.442 684.185 L784.001 684.185 L784.56 684.185 L785.12 684.185 L785.679 684.185 L786.238 684.185 L786.797 684.185 L787.357 684.185 L787.916 684.185 L788.475 684.185 L789.034 684.185 L789.594 684.185 L790.153 684.185 L790.712 684.185 L791.271 684.185 L791.831 684.185 L792.39 684.185 L792.949 684.185 L793.508 684.185 L794.068 684.185 L794.627 684.185 L795.186 684.185 L795.745 684.185 L796.305 684.185 L796.864 684.185 L797.423 684.185 L797.982 684.185 L798.542 684.185 L799.101 684.185 L799.66 684.185 L800.219 684.185 L800.779 684.185 L801.338 684.185 L801.897 684.185 L802.456 684.185 L803.016 684.185 L803.575 684.185 L804.134 684.185 L804.693 684.185 L805.253 684.185 L805.812 684.185 L806.371 684.185 L806.931 684.185 L807.49 684.185 L808.049 684.185 L808.608 684.185 L809.168 684.185 L809.727 684.185 L810.286 684.185 L810.845 684.185 L811.405 684.185 L811.964 684.185 L812.523 684.185 L813.082 684.185 L813.642 684.185 L814.201 684.185 L814.76 684.185 L815.319 684.185 L815.879 684.185 L816.438 684.185 L816.997 684.185 L817.556 684.185 L818.116 684.185 L818.675 684.185 L819.234 684.185 L819.793 684.185 L820.353 684.185 L820.912 684.185 L821.471 684.185 L822.03 684.185 L822.59 684.185 L823.149 684.185 L823.708 684.185 L824.267 684.185 L824.827 684.185 L825.386 684.185 L825.945 684.185 L826.504 684.185 L827.064 684.185 L827.623 684.185 L828.182 684.185 L828.741 684.185 L829.301 684.185 L829.86 684.185 L830.419 684.185 L830.978 684.185 L831.538 684.185 L832.097 684.185 L832.656 684.185 L833.215 684.185 L833.775 684.185 L834.334 684.185 L834.893 684.185 L835.452 684.185 L836.012 684.185 L836.571 684.185 L837.13 684.185 L837.689 684.185 L838.249 684.185 L838.808 684.185 L839.367 684.185 L839.926 684.185 L840.486 684.185 L841.045 684.185 L841.604 684.185 L842.163 684.185 L842.723 684.185 L843.282 684.185 L843.841 684.185 L844.4 684.185 L844.96 684.185 L845.519 684.185 L846.078 684.185 L846.637 684.185 L847.197 684.185 L847.756 684.185 L848.315 684.185 L848.874 684.185 L849.434 684.185 L849.993 684.185 L850.552 684.185 L851.111 684.185 L851.671 684.185 L852.23 684.185 L852.789 684.185 L853.348 684.185 L853.908 684.185 L854.467 684.185 L855.026 684.185 L855.585 684.185 L856.145 684.185 L856.704 684.185 L857.263 684.185 L857.822 684.185 L858.382 684.185 L858.941 684.185 L859.5 684.185 L860.059 684.185 L860.619 684.185 L861.178 684.185 L861.737 684.185 L862.296 684.185 L862.856 684.185 L863.415 684.185 L863.974 684.185 L864.533 684.185 L865.093 684.185 L865.652 684.185 L866.211 684.185 L866.77 684.185 L867.33 684.185 L867.889 684.185 L868.448 684.185 L869.007 684.185 L869.567 684.185 L870.126 684.185 L870.685 684.185 L871.244 684.185 L871.804 684.185 L872.363 684.185 L872.922 684.185 L873.481 684.185 L874.041 684.185 L874.6 684.185 L875.159 684.185 L875.718 684.185 L876.278 684.185 L876.837 684.185 L877.396 684.185 L877.955 684.185 L878.515 684.185 L879.074 684.185 L879.633 684.185 L880.192 684.185 L880.752 684.185 L881.311 684.185 L881.87 684.185 L882.429 684.185 L882.989 684.185 L883.548 684.185 L884.107 684.185 L884.666 684.185 L885.226 684.185 L885.785 684.185 L886.344 684.185 L886.903 684.185 L887.463 684.185 L888.022 684.185 L888.581 684.185 L889.14 684.185 L889.7 684.185 L890.259 684.185 L890.818 684.185 L891.377 684.185 L891.937 684.185 L892.496 684.185 L893.055 684.185 L893.614 684.185 L894.174 684.185 L894.733 684.185 L895.292 684.185 L895.851 684.185 L896.411 684.185 L896.97 684.185 L897.529 684.185 L898.088 684.185 L898.648 684.185 L899.207 684.185 L899.766 684.185 L900.325 684.185 L900.885 684.185 L901.444 684.185 L902.003 684.185 L902.562 684.185 L903.122 684.185 L903.681 684.185 L904.24 684.185 L904.799 684.185 L905.359 684.185 L905.918 684.185 L906.477 684.185 L907.036 684.185 L907.596 684.185 L908.155 684.185 L908.714 684.185 L909.273 684.185 L909.833 684.185 L910.392 684.185 L910.951 684.185 L911.51 684.185 L912.07 684.185 L912.629 684.185 L913.188 684.185 L913.747 684.185 L914.307 684.185 L914.866 684.185 L915.425 684.185 L915.984 684.185 L916.544 684.185 L917.103 684.185 L917.662 684.185 L918.221 684.185 L918.781 684.185 L919.34 684.185 L919.899 684.185 L920.458 684.185 L921.018 684.185 L921.577 684.185 L922.136 684.185 L922.695 684.185 L923.255 684.185 L923.814 684.185 L924.373 684.185 L924.932 684.185 L925.492 684.185 L926.051 684.185 L926.61 684.185 L927.169 684.185 L927.729 684.185 L928.288 684.185 L928.847 684.185 L929.406 684.185 L929.966 684.185 L930.525 684.185 L931.084 684.185 L931.644 684.185 L932.203 684.185 L932.762 684.185 L933.321 684.185 L933.881 684.185 L934.44 684.185 L934.999 684.185 L935.558 684.185 L936.118 684.185 L936.677 684.185 L937.236 684.185 L937.795 684.185 L938.355 684.185 L938.914 684.185 L939.473 684.185 L940.032 684.185 L940.592 684.185 L941.151 684.185 L941.71 684.185 L942.269 684.185 L942.829 684.185 L943.388 684.185 L943.947 684.185 L944.506 684.185 L945.066 684.185 L945.625 684.185 L946.184 684.185 L946.743 684.185 L947.303 684.185 L947.862 684.185 L948.421 684.185 L948.98 684.185 L949.54 684.185 L950.099 684.185 L950.658 684.185 L951.217 684.185 L951.777 684.185 L952.336 684.185 L952.895 684.185 L953.454 684.185 L954.014 684.185 L954.573 684.185 L955.132 684.185 L955.691 684.185 L956.251 684.185 L956.81 684.185 L957.369 684.185 L957.928 684.185 L958.488 684.185 L959.047 684.185 L959.606 684.185 L960.165 684.185 L960.725 684.185 L961.284 684.185 L961.843 684.185 L962.402 684.185 L962.962 684.185 L963.521 684.185 L964.08 684.185 L964.639 684.185 L965.199 684.185 L965.758 684.185 L966.317 684.185 L966.876 684.185 L967.436 684.185 L967.995 684.185 L968.554 684.185 L969.113 684.185 L969.673 684.185 L970.232 684.185 L970.791 684.185 L971.35 684.185 L971.91 684.185 L972.469 684.185 L973.028 684.185 L973.587 684.185 L974.147 684.185 L974.706 684.185 L975.265 684.185 L975.824 684.185 L976.384 684.185 L976.943 684.185 L977.502 684.185 L978.061 684.185 L978.621 684.185 L979.18 684.185 L979.739 684.185 L980.298 684.185 L980.858 684.185 L981.417 684.185 L981.976 684.185 L982.535 684.185 L983.095 684.185 L983.654 684.185 L984.213 684.185 L984.772 684.185 L985.332 684.185 L985.891 684.185 L986.45 684.185 L987.009 684.185 L987.569 684.185 L988.128 684.185 L988.687 684.185 L989.246 684.185 L989.806 684.185 L990.365 684.185 L990.924 684.185 L991.483 684.185 L992.043 684.185 L992.602 684.185 L993.161 684.185 L993.72 684.185 L994.28 684.185 L994.839 684.185 L995.398 684.185 L995.957 684.185 L996.517 684.185 L997.076 684.185 L997.635 684.185 L998.194 684.185 L998.754 684.185 L999.313 684.185 L999.872 684.185 L1000.43 684.185 L1000.99 684.185 L1001.55 684.185 L1002.11 684.185 L1002.67 684.185 L1003.23 684.185 L1003.79 684.185 L1004.35 684.185 L1004.91 684.185 L1005.46 684.185 L1006.02 684.185 L1006.58 684.185 L1007.14 684.185 L1007.7 684.185 L1008.26 684.185 L1008.82 684.185 L1009.38 684.185 L1009.94 684.185 L1010.5 684.185 L1011.06 684.185 L1011.62 684.185 L1012.18 684.185 L1012.73 684.185 L1013.29 684.185 L1013.85 684.185 L1014.41 684.185 L1014.97 684.185 L1015.53 684.185 L1016.09 684.185 L1016.65 684.185 L1017.21 684.185 L1017.77 684.185 L1018.33 684.185 L1018.89 684.185 L1019.45 684.185 L1020.01 684.185 L1020.56 684.185 L1021.12 684.185 L1021.68 684.185 L1022.24 684.185 L1022.8 684.185 L1023.36 684.185 L1023.92 684.185 L1024.48 684.185 L1025.04 684.185 L1025.6 684.185 L1026.16 684.185 L1026.72 684.185 L1027.28 684.185 L1027.83 684.185 L1028.39 684.185 L1028.95 684.185 L1029.51 684.185 L1030.07 684.185 L1030.63 684.185 L1031.19 684.185 L1031.75 684.185 L1032.31 684.185 L1032.87 684.185 L1033.43 684.185 L1033.99 684.185 L1034.55 684.185 L1035.1 684.185 L1035.66 684.185 L1036.22 684.185 L1036.78 684.185 L1037.34 684.185 L1037.9 684.185 L1038.46 684.185 L1039.02 684.185 L1039.58 684.185 L1040.14 684.185 L1040.7 684.185 L1041.26 684.185 L1041.82 684.185 L1042.38 684.185 L1042.93 684.185 L1043.49 684.185 L1044.05 684.185 L1044.61 684.185 L1045.17 684.185 L1045.73 684.185 L1046.29 684.185 L1046.85 684.185 L1047.41 684.185 L1047.97 684.185 L1048.53 684.185 L1049.09 684.185 L1049.65 684.185 L1050.2 684.185 L1050.76 684.185 L1051.32 684.185 L1051.88 684.185 L1052.44 684.185 L1053 684.185 L1053.56 684.185 L1054.12 684.185 L1054.68 684.185 L1055.24 684.185 L1055.8 684.185 L1056.36 684.185 L1056.92 684.185 L1057.48 684.185 L1058.03 684.185 L1058.59 684.185 L1059.15 684.185 L1059.71 684.185 L1060.27 684.185 L1060.83 684.185 L1061.39 684.185 L1061.95 684.185 L1062.51 684.185 L1063.07 684.185 L1063.63 684.185 L1064.19 684.185 L1064.75 684.185 L1065.3 684.185 L1065.86 684.185 L1066.42 684.185 L1066.98 684.185 L1067.54 684.185 L1068.1 684.185 L1068.66 684.185 L1069.22 684.185 L1069.78 684.185 L1070.34 684.185 L1070.9 684.185 L1071.46 684.185 L1072.02 684.185 L1072.57 684.185 L1073.13 684.185 L1073.69 684.185 L1074.25 684.185 L1074.81 684.185 L1075.37 684.185 L1075.93 684.185 L1076.49 684.185 L1077.05 684.185 L1077.61 684.185 L1078.17 684.185 L1078.73 684.185 L1079.29 684.185 L1079.85 684.185 L1080.4 684.185 L1080.96 684.185 L1081.52 684.185 L1082.08 684.185 L1082.64 684.185 L1083.2 684.185 L1083.76 684.185 L1084.32 684.185 L1084.88 684.185 L1085.44 684.185 L1086 684.185 L1086.56 684.185 L1087.12 684.185 L1087.67 684.185 L1088.23 684.185 L1088.79 684.185 L1089.35 684.185 L1089.91 684.185 L1090.47 684.185 L1091.03 684.185 L1091.59 684.185 L1092.15 684.185 L1092.71 684.185 L1093.27 684.185 L1093.83 684.185 L1094.39 684.185 L1094.94 684.185 L1095.5 684.185 L1096.06 684.185 L1096.62 684.185 L1097.18 684.185 L1097.74 684.185 L1098.3 684.185 L1098.86 684.185 L1099.42 684.185 L1099.98 684.185 L1100.54 684.185 L1101.1 684.185 L1101.66 684.185 L1102.22 684.185 L1102.77 684.185 L1103.33 684.185 L1103.89 684.185 L1104.45 684.185 L1105.01 684.185 L1105.57 684.185 L1106.13 684.185 L1106.69 684.185 L1107.25 684.185 L1107.81 684.185 L1108.37 684.185 L1108.93 684.185 L1109.49 684.185 L1110.04 684.185 L1110.6 684.185 L1111.16 684.185 L1111.72 684.185 L1112.28 684.185 L1112.84 684.185 L1113.4 684.185 L1113.96 684.185 L1114.52 684.185 L1115.08 684.185 L1115.64 684.185 L1116.2 684.185 L1116.76 684.185 L1117.31 684.185 L1117.87 684.185 L1118.43 684.185 L1118.99 684.185 L1119.55 684.185 L1120.11 684.185 L1120.67 684.185 L1121.23 684.185 L1121.79 684.185 L1122.35 684.185 L1122.91 684.185 L1123.47 684.185 L1124.03 684.185 L1124.59 684.185 L1125.14 684.185 L1125.7 684.185 L1126.26 684.185 L1126.82 684.185 L1127.38 684.185 L1127.94 684.185 L1128.5 684.185 L1129.06 684.185 L1129.62 684.185 L1130.18 684.185 L1130.74 684.185 L1131.3 684.185 L1131.86 684.185 L1132.41 684.185 L1132.97 684.185 L1133.53 684.185 L1134.09 684.185 L1134.65 684.185 L1135.21 684.185 L1135.77 684.185 L1136.33 684.185 L1136.89 684.185 L1137.45 684.185 L1138.01 684.185 L1138.57 684.185 L1139.13 684.185 L1139.68 684.185 L1140.24 684.185 L1140.8 684.185 L1141.36 684.185 L1141.92 684.185 L1142.48 684.185 L1143.04 684.185 L1143.6 684.185 L1144.16 684.185 L1144.72 684.185 L1145.28 684.185 L1145.84 684.185 L1146.4 684.185 L1146.96 684.185 L1147.51 684.185 L1148.07 684.185 L1148.63 684.185 L1149.19 684.185 L1149.75 684.185 L1150.31 684.185 L1150.87 684.185 L1151.43 684.185 L1151.99 684.185 L1152.55 684.185 L1153.11 684.185 L1153.67 684.185 L1154.23 684.185 L1154.78 684.185 L1155.34 684.185 L1155.9 684.185 L1156.46 684.185 L1157.02 684.185 L1157.58 684.185 L1158.14 684.185 L1158.7 684.185 L1159.26 684.185 L1159.82 684.185 L1160.38 684.185 L1160.94 684.185 L1161.5 684.185 L1162.05 684.185 L1162.61 684.185 L1163.17 684.185 L1163.73 684.185 L1164.29 684.185 L1164.85 684.185 L1165.41 684.185 L1165.97 684.185 L1166.53 684.185 L1167.09 684.185 L1167.65 684.185 L1168.21 684.185 L1168.77 684.185 L1169.33 684.185 L1169.88 684.185 L1170.44 684.185 L1171 684.185 L1171.56 684.185 L1172.12 684.185 L1172.68 684.185 L1173.24 684.185 L1173.8 684.185 L1174.36 684.185 L1174.92 684.185 L1175.48 684.185 L1176.04 684.185 L1176.6 684.185 L1177.15 684.185 L1177.71 684.185 L1178.27 684.185 L1178.83 684.185 L1179.39 684.185 L1179.95 684.185 L1180.51 684.185 L1181.07 684.185 L1181.63 684.185 L1182.19 684.185 L1182.75 684.185 L1183.31 684.185 L1183.87 684.185 L1184.43 684.185 L1184.98 684.185 L1185.54 684.185 L1186.1 684.185 L1186.66 684.185 L1187.22 684.185 L1187.78 684.185 L1188.34 684.185 L1188.9 684.185 L1189.46 684.185 L1190.02 684.185 L1190.58 684.185 L1191.14 684.185 L1191.7 684.185 L1192.25 684.185 L1192.81 684.185 L1193.37 684.185 L1193.93 684.185 L1194.49 684.185 L1195.05 684.185 L1195.61 684.185 L1196.17 684.185 L1196.73 684.185 L1197.29 684.185 L1197.85 684.185 L1198.41 684.185 L1198.97 684.185 L1199.52 684.185 L1200.08 684.185 L1200.64 684.185 L1201.2 684.185 L1201.76 684.185 L1202.32 684.185 L1202.88 684.185 L1203.44 684.185 L1204 684.185 L1204.56 684.185 L1205.12 684.185 L1205.68 684.185 L1206.24 684.185 L1206.8 684.185 L1207.35 684.185 L1207.91 684.185 L1208.47 684.185 L1209.03 684.185 L1209.59 684.185 L1210.15 684.185 L1210.71 684.185 L1211.27 684.185 L1211.83 684.185 L1212.39 684.185 L1212.95 684.185 L1213.51 684.185 L1214.07 684.185 L1214.62 684.185 L1215.18 684.185 L1215.74 684.185 L1216.3 684.185 L1216.86 684.185 L1217.42 684.185 L1217.98 684.185 L1218.54 684.185 L1219.1 684.185 L1219.66 684.185 L1220.22 684.185 L1220.78 684.185 L1221.34 684.185 L1221.89 684.185 L1222.45 684.185 L1223.01 684.185 L1223.57 684.185 L1224.13 684.185 L1224.69 684.185 L1225.25 684.185 L1225.81 684.185 L1226.37 684.185 L1226.93 684.185 L1227.49 684.185 L1228.05 684.185 L1228.61 684.185 L1229.17 684.185 L1229.72 684.185 L1230.28 684.185 L1230.84 684.185 L1231.4 684.185 L1231.96 684.185 L1232.52 684.185 L1233.08 684.185 L1233.64 684.185 L1234.2 684.185 L1234.76 684.185 L1235.32 684.185 L1235.88 684.185 L1236.44 684.185 L1236.99 684.185 L1237.55 684.185 L1238.11 684.185 L1238.67 684.185 L1239.23 684.185 L1239.79 684.185 L1240.35 684.185 L1240.91 684.185 L1241.47 684.185 L1242.03 684.185 L1242.59 684.185 L1243.15 684.185 L1243.71 684.185 L1244.26 684.185 L1244.82 684.185 L1245.38 684.185 L1245.94 684.185 L1246.5 684.185 L1247.06 684.185 L1247.62 684.185 L1248.18 684.185 L1248.74 684.185 L1249.3 684.185 L1249.86 684.185 L1250.42 684.185 L1250.98 684.185 L1251.54 684.185 L1252.09 684.185 L1252.65 684.185 L1253.21 684.185 L1253.77 684.185 L1254.33 684.185 L1254.89 684.185 L1255.45 684.185 L1256.01 684.185 L1256.57 684.185 L1257.13 684.185 L1257.69 684.185 L1258.25 684.185 L1258.81 684.185 L1259.36 684.185 L1259.92 684.185 L1260.48 684.185 L1261.04 684.185 L1261.6 684.185 L1262.16 684.185 L1262.72 684.185 L1263.28 684.185 L1263.84 684.185 L1264.4 684.185 L1264.96 684.185 L1265.52 684.185 L1266.08 684.185 L1266.63 684.185 L1267.19 684.185 L1267.75 684.185 L1268.31 684.185 L1268.87 684.185 L1269.43 684.185 L1269.99 684.185 L1270.55 684.185 L1271.11 684.185 L1271.67 684.185 L1272.23 684.185 L1272.79 684.185 L1273.35 684.185 L1273.91 684.185 L1274.46 684.185 L1275.02 684.185 L1275.58 684.185 L1276.14 684.185 L1276.7 684.185 L1277.26 684.185 L1277.82 684.185 L1278.38 684.185 L1278.94 684.185 L1279.5 684.185 L1280.06 684.185 L1280.62 684.185 L1281.18 684.185 L1281.73 684.185 L1282.29 684.185 L1282.85 684.185 L1283.41 684.185 L1283.97 684.185 L1284.53 684.185 L1285.09 684.185 L1285.65 684.185 L1286.21 684.185 L1286.77 684.185 L1287.33 684.185 L1287.89 684.185 L1288.45 684.185 L1289 684.185 L1289.56 684.185 L1290.12 684.185 L1290.68 684.185 L1291.24 684.185 L1291.8 684.185 L1292.36 684.185 L1292.92 684.185 L1293.48 684.185 L1294.04 684.185 L1294.6 684.185 L1295.16 684.185 L1295.72 684.185 L1296.28 684.185 L1296.83 684.185 L1297.39 684.185 L1297.95 684.185 L1298.51 684.185 L1299.07 684.185 L1299.63 684.185 L1300.19 684.185 L1300.75 684.185 L1301.31 684.185 L1301.87 684.185 L1302.43 684.185 L1302.99 684.185 L1303.55 684.185 L1304.1 684.185 L1304.66 684.185 L1305.22 684.185 L1305.78 684.185 L1306.34 684.185 L1306.9 684.185 L1307.46 684.185 L1308.02 684.185 L1308.58 684.185 L1309.14 684.185 L1309.7 684.185 L1310.26 684.185 L1310.82 684.185 L1311.38 684.185 L1311.93 684.185 L1312.49 684.185 L1313.05 684.185 L1313.61 684.185 L1314.17 684.185 L1314.73 684.185 L1315.29 684.185 L1315.85 684.185 L1316.41 684.185 L1316.97 684.185 L1317.53 684.185 L1318.09 684.185 L1318.65 684.185 L1319.2 684.185 L1319.76 684.185 L1320.32 684.185 L1320.88 684.185 L1321.44 684.185 L1322 684.185 L1322.56 684.185 L1323.12 684.185 L1323.68 684.185 L1324.24 684.185 L1324.8 684.185 L1325.36 684.185 L1325.92 684.185 L1326.47 684.185 L1327.03 684.185 L1327.59 684.185 L1328.15 684.185 L1328.71 684.185 L1329.27 684.185 L1329.83 684.185 L1330.39 684.185 L1330.95 684.185 L1331.51 684.185 L1332.07 684.185 L1332.63 684.185 L1333.19 684.185 L1333.75 684.185 L1334.3 684.185 L1334.86 684.185 L1335.42 684.185 L1335.98 684.185 L1336.54 684.185 L1337.1 684.185 L1337.66 684.185 L1338.22 684.185 L1338.78 684.185 L1339.34 684.185 L1339.9 684.185 L1340.46 684.185 L1341.02 684.185 L1341.57 684.185 L1342.13 684.185 L1342.69 684.185 L1343.25 684.185 L1343.81 684.185 L1344.37 684.185 L1344.93 684.185 L1345.49 684.185 L1346.05 684.185 L1346.61 684.185 L1347.17 684.185 L1347.73 684.185 L1348.29 684.185 L1348.84 684.185 L1349.4 684.185 L1349.96 684.185 L1350.52 684.185 L1351.08 684.185 L1351.64 684.185 L1352.2 684.185 L1352.76 684.185 L1353.32 684.185 L1353.88 684.185 L1354.44 684.185 L1355 684.185 L1355.56 684.185 L1356.12 684.185 L1356.67 684.185 L1357.23 684.185 L1357.79 684.185 L1358.35 684.185 L1358.91 684.185 L1359.47 684.185 L1360.03 684.185 L1360.59 684.185 L1361.15 684.185 L1361.71 684.185 L1362.27 684.185 L1362.83 684.185 L1363.39 684.185 L1363.94 684.185 L1364.5 684.185 L1365.06 684.185 L1365.62 684.185 L1366.18 684.185 L1366.74 684.185 L1367.3 684.185 L1367.86 684.185 L1368.42 684.185 L1368.98 684.185 L1369.54 684.185 L1370.1 684.185 L1370.66 684.185 L1371.21 684.185 L1371.77 684.185 L1372.33 684.185 L1372.89 684.185 L1373.45 684.185 L1374.01 684.185 L1374.57 684.185 L1375.13 684.185 L1375.69 684.185 L1376.25 684.185 L1376.81 684.185 L1377.37 684.185 L1377.93 684.185 L1378.49 684.185 L1379.04 684.185 L1379.6 684.185 L1380.16 684.185 L1380.72 684.185 L1381.28 684.185 L1381.84 684.185 L1382.4 684.185 L1382.96 684.185 L1383.52 684.185 L1384.08 684.185 L1384.64 684.185 L1385.2 684.185 L1385.76 684.185 L1386.31 684.185 L1386.87 684.185 L1387.43 684.185 L1387.99 684.185 L1388.55 684.185 L1389.11 684.185 L1389.67 684.185 L1390.23 684.185 L1390.79 684.185 L1391.35 684.185 L1391.91 684.185 L1392.47 684.185 L1393.03 684.185 L1393.58 684.185 L1394.14 684.185 L1394.7 684.185 L1395.26 684.185 L1395.82 684.185 L1396.38 684.185 L1396.94 684.185 L1397.5 684.185 L1398.06 684.185 L1398.62 684.185 L1399.18 684.185 L1399.74 684.185 L1400.3 684.185 L1400.86 684.185 L1401.41 684.185 L1401.97 684.185 L1402.53 684.185 L1403.09 684.185 L1403.65 684.185 L1404.21 684.185 L1404.77 684.185 L1405.33 684.185 L1405.89 684.185 L1406.45 684.185 L1407.01 684.185 L1407.57 684.185 L1408.13 684.185 L1408.68 684.185 L1409.24 684.185 L1409.8 684.185 L1410.36 684.185 L1410.92 684.185 L1411.48 684.185 L1412.04 684.185 L1412.6 684.185 L1413.16 684.185 L1413.72 684.185 L1414.28 684.185 L1414.84 684.185 L1415.4 684.185 L1415.95 684.185 L1416.51 684.185 L1417.07 684.185 L1417.63 684.185 L1418.19 684.185 L1418.75 684.185 L1419.31 684.185 L1419.87 684.185 L1420.43 684.185 L1420.99 684.185 L1421.55 684.185 L1422.11 684.185 L1422.67 684.185 L1423.23 684.185 L1423.78 684.185 L1424.34 684.185 L1424.9 684.185 L1425.46 684.185 L1426.02 684.185 L1426.58 684.185 L1427.14 684.185 L1427.7 684.185 L1428.26 684.185 L1428.82 684.185 L1429.38 684.185 L1429.94 684.185 L1430.5 684.185 L1431.05 684.185 L1431.61 684.185 L1432.17 684.185 L1432.73 684.185 L1433.29 684.185 L1433.85 684.185 L1434.41 684.185 L1434.97 684.185 L1435.53 684.185 L1436.09 684.185 L1436.65 684.185 L1437.21 684.185 L1437.77 684.185 L1438.33 684.185 L1438.88 684.185 L1439.44 684.185 L1440 684.185 L1440.56 684.185 L1441.12 684.185 L1441.68 684.185 L1442.24 684.185 L1442.8 684.185 L1443.36 684.185 L1443.92 684.185 L1444.48 684.185 L1445.04 684.185 L1445.6 684.185 L1446.15 684.185 L1446.71 684.185 L1447.27 684.185 L1447.83 684.185 L1448.39 684.185 L1448.95 684.185 L1449.51 684.185 L1450.07 684.185 L1450.63 684.185 L1451.19 684.185 L1451.75 684.185 L1452.31 684.185 L1452.87 684.185 L1453.42 684.185 L1453.98 684.185 L1454.54 684.185 L1455.1 684.185 L1455.66 684.185 L1456.22 684.185 L1456.78 684.185 L1457.34 684.185 L1457.9 684.185 L1458.46 684.185 L1459.02 684.185 L1459.58 684.185 L1460.14 684.185 L1460.7 684.185 L1461.25 684.185 L1461.81 684.185 L1462.37 684.185 L1462.93 684.185 L1463.49 684.185 L1464.05 684.185 L1464.61 684.185 L1465.17 684.185 L1465.73 684.185 L1466.29 684.185 L1466.85 684.185 L1467.41 684.185 L1467.97 684.185 L1468.52 684.185 L1469.08 684.185 L1469.64 684.185 L1470.2 684.185 L1470.76 684.185 L1471.32 684.185 L1471.88 684.185 L1472.44 684.185 L1473 684.185 L1473.56 684.185 L1474.12 684.185 L1474.68 684.185 L1475.24 684.185 L1475.79 684.185 L1476.35 684.185 L1476.91 684.185 L1477.47 684.185 L1478.03 684.185 L1478.59 684.185 L1479.15 684.185 L1479.71 684.185 L1480.27 684.185 L1480.83 684.185 L1481.39 684.185 L1481.95 684.185 L1482.51 684.185 L1483.07 684.185 L1483.62 684.185 L1484.18 684.185 L1484.74 684.185 L1485.3 684.185 L1485.86 684.185 L1486.42 684.185 L1486.98 684.185 L1487.54 684.185 L1488.1 684.185 L1488.66 684.185 L1489.22 684.185 L1489.78 684.185 L1490.34 684.185 L1490.89 684.185 L1491.45 684.185 L1492.01 684.185 L1492.57 684.185 L1493.13 684.185 L1493.69 684.185 L1494.25 684.185 L1494.81 684.185 L1495.37 684.185 L1495.93 684.185 L1496.49 684.185 L1497.05 684.185 L1497.61 684.185 L1498.16 684.185 L1498.72 684.185 L1499.28 684.185 L1499.84 684.185 L1500.4 684.185 L1500.96 684.185 L1501.52 684.185 L1502.08 684.185 L1502.64 684.185 L1503.2 684.185 L1503.76 684.185 L1504.32 684.185 L1504.88 684.185 L1505.44 684.185 L1505.99 684.185 L1506.55 684.185 L1507.11 684.185 L1507.67 684.185 L1508.23 684.185 L1508.79 684.185 L1509.35 684.185 L1509.91 684.185 L1510.47 684.185 L1511.03 684.185 L1511.59 684.185 L1512.15 684.185 L1512.71 684.185 L1513.26 684.185 L1513.82 684.185 L1514.38 684.185 L1514.94 684.185 L1515.5 684.185 L1516.06 684.185 L1516.62 684.185 L1517.18 684.185 L1517.74 684.185 L1518.3 684.185 L1518.86 684.185 L1519.42 684.185 L1519.98 684.185 L1520.53 684.185 L1521.09 684.185 L1521.65 684.185 L1522.21 684.185 L1522.77 684.185 L1523.33 684.185 L1523.89 684.185 L1524.45 684.185 L1525.01 684.185 L1525.57 684.185 L1526.13 684.185 L1526.69 684.185 L1527.25 684.185 L1527.81 684.185 L1528.36 684.185 L1528.92 684.185 L1529.48 684.185 L1530.04 684.185 L1530.6 684.185 L1531.16 684.185 L1531.72 684.185 L1532.28 684.185 L1532.84 684.185 L1533.4 684.185 L1533.96 684.185 L1534.52 684.185 L1535.08 684.185 L1535.63 684.185 L1536.19 684.185 L1536.75 684.185 L1537.31 684.185 L1537.87 684.185 L1538.43 684.185 L1538.99 684.185 L1539.55 684.185 L1540.11 684.185 L1540.67 684.185 L1541.23 684.185 L1541.79 684.185 L1542.35 684.185 L1542.9 684.185 L1543.46 684.185 L1544.02 684.185 L1544.58 684.185 L1545.14 684.185 L1545.7 684.185 L1546.26 684.185 L1546.82 684.185 L1547.38 684.185 L1547.94 684.185 L1548.5 684.185 L1549.06 684.185 L1549.62 684.185 L1550.18 684.185 L1550.73 684.185 L1551.29 684.185 L1551.85 684.185 L1552.41 684.185 L1552.97 684.185 L1553.53 684.185 L1554.09 684.185 L1554.65 684.185 L1555.21 684.185 L1555.77 684.185 L1556.33 684.185 L1556.89 684.185 L1557.45 684.185 L1558 684.185 L1558.56 684.185 L1559.12 684.185 L1559.68 684.185 L1560.24 684.185 L1560.8 684.185 L1561.36 684.185 L1561.92 684.185 L1562.48 684.185 L1563.04 684.185 L1563.6 684.185 L1564.16 684.185 L1564.72 684.185 L1565.28 684.185 L1565.83 684.185 L1566.39 684.185 L1566.95 684.185 L1567.51 684.185 L1568.07 684.185 L1568.63 684.185 L1569.19 684.185 L1569.75 684.185 L1570.31 684.185 L1570.87 684.185 L1571.43 684.185 L1571.99 684.185 L1572.55 684.185 L1573.1 684.185 L1573.66 684.185 L1574.22 684.185 L1574.78 684.185 L1575.34 684.185 L1575.9 684.185 L1576.46 684.185 L1577.02 684.185 L1577.58 684.185 L1578.14 684.185 L1578.7 684.185 L1579.26 684.185 L1579.82 684.185 L1580.37 684.185 L1580.93 684.185 L1581.49 684.185 L1582.05 684.185 L1582.61 684.185 L1583.17 684.185 L1583.73 684.185 L1584.29 684.185 L1584.85 684.185 L1585.41 684.185 L1585.97 684.185 L1586.53 684.185 L1587.09 684.185 L1587.65 684.185 L1588.2 684.185 L1588.76 684.185 L1589.32 684.185 L1589.88 684.185 L1590.44 684.185 L1591 684.185 L1591.56 684.185 L1592.12 684.185 L1592.68 684.185 L1593.24 684.185 L1593.8 684.185 L1594.36 684.185 L1594.92 684.185 L1595.47 684.185 L1596.03 684.185 L1596.59 684.185 L1597.15 684.185 L1597.71 684.185 L1598.27 684.185 L1598.83 684.185 L1599.39 684.185 L1599.95 684.185 L1600.51 684.185 L1601.07 684.185 L1601.63 684.185 L1602.19 684.185 L1602.74 684.185 L1603.3 684.185 L1603.86 684.185 L1604.42 684.185 L1604.98 684.185 L1605.54 684.185 L1606.1 684.185 L1606.66 684.185 L1607.22 684.185 L1607.78 684.185 L1608.34 684.185 L1608.9 684.185 L1609.46 684.185 L1610.02 684.185 L1610.57 684.185 L1611.13 684.185 L1611.69 684.185 L1612.25 684.185 L1612.81 684.185 L1613.37 684.185 L1613.93 684.185 L1614.49 684.185 L1615.05 684.185 L1615.61 684.185 L1616.17 684.185 L1616.73 684.185 L1617.29 684.185 L1617.84 684.185 L1618.4 684.185 L1618.96 684.185 L1619.52 684.185 L1620.08 684.185 L1620.64 684.185 L1621.2 684.185 L1621.76 684.185 L1622.32 684.185 L1622.88 684.185 L1623.44 684.185 L1624 684.185 L1624.56 684.185 L1625.11 684.185 L1625.67 684.185 L1626.23 684.185 L1626.79 684.185 L1627.35 684.185 L1627.91 684.185 L1628.47 684.185 L1629.03 684.185 L1629.59 684.185 L1630.15 684.185 L1630.71 684.185 L1631.27 684.185 L1631.83 684.185 L1632.39 684.185 L1632.94 684.185 L1633.5 684.185 L1634.06 684.185 L1634.62 684.185 L1635.18 684.185 L1635.74 684.185 L1636.3 684.185 L1636.86 684.185 L1637.42 684.185 L1637.98 684.185 L1638.54 684.185 L1639.1 684.185 L1639.66 684.185 L1640.21 684.185 L1640.77 684.185 L1641.33 684.185 L1641.89 684.185 L1642.45 684.185 L1643.01 684.185 L1643.57 684.185 L1644.13 684.185 L1644.69 684.185 L1645.25 684.185 L1645.81 684.185 L1646.37 684.185 L1646.93 684.185 L1647.48 684.185 L1648.04 684.185 L1648.6 684.185 L1649.16 684.185 L1649.72 684.185 L1650.28 684.185 L1650.84 684.185 L1651.4 684.185 L1651.96 684.185 L1652.52 684.185 L1653.08 684.185 L1653.64 684.185 L1654.2 684.185 L1654.76 684.185 L1655.31 684.185 L1655.87 684.185 L1656.43 684.185 L1656.99 684.185 L1657.55 684.185 L1658.11 684.185 L1658.67 684.185 L1659.23 684.185 L1659.79 684.185 L1660.35 684.185 L1660.91 684.185 L1661.47 684.185 L1662.03 684.185 L1662.58 684.185 L1663.14 684.185 L1663.7 684.185 L1664.26 684.185 L1664.82 684.185 L1665.38 684.185 L1665.94 684.185 L1666.5 684.185 L1667.06 684.185 L1667.62 684.185 L1668.18 684.185 L1668.74 684.185 L1669.3 684.185 L1669.85 684.185 L1670.41 684.185 L1670.97 684.185 L1671.53 684.185 L1672.09 684.185 L1672.65 684.185 L1673.21 684.185 L1673.77 684.185 L1674.33 684.185 L1674.89 684.185 L1675.45 684.185 L1676.01 684.185 L1676.57 684.185 L1677.13 684.185 L1677.68 684.185 L1678.24 684.185 L1678.8 684.185 L1679.36 684.185 L1679.92 684.185 L1680.48 684.185 L1681.04 684.185 L1681.6 684.185 L1682.16 684.185 L1682.72 684.185 L1683.28 684.185 L1683.84 684.185 L1684.4 684.185 L1684.95 684.185 L1685.51 684.185 L1686.07 684.185 L1686.63 684.185 L1687.19 684.185 L1687.75 684.185 L1688.31 684.185 L1688.87 684.185 L1689.43 684.185 L1689.99 684.185 L1690.55 684.185 L1691.11 684.185 L1691.67 684.185 L1692.23 684.185 L1692.78 684.185 L1693.34 684.185 L1693.9 684.185 L1694.46 684.185 L1695.02 684.185 L1695.58 684.185 L1696.14 684.185 L1696.7 684.185 L1697.26 684.185 L1697.82 684.185 L1698.38 684.185 L1698.94 684.185 L1699.5 684.185 L1700.05 684.185 L1700.61 684.185 L1701.17 684.185 L1701.73 684.185 L1702.29 684.185 L1702.85 684.185 L1703.41 684.185 L1703.97 684.185 L1704.53 684.185 L1705.09 684.185 L1705.65 684.185 L1706.21 684.185 L1706.77 684.185 L1707.32 684.185 L1707.88 684.185 L1708.44 684.185 L1709 684.185 L1709.56 684.185 L1710.12 684.185 L1710.68 684.185 L1711.24 684.185 L1711.8 684.185 L1712.36 684.185 L1712.92 684.185 L1713.48 684.185 L1714.04 684.185 L1714.6 684.185 L1715.15 684.185 L1715.71 684.185 L1716.27 684.185 L1716.83 684.185 L1717.39 684.185 L1717.95 684.185 L1718.51 684.185 L1719.07 684.185 L1719.63 684.185 L1720.19 684.185 L1720.75 684.185 L1721.31 684.185 L1721.87 684.185 L1722.42 684.185 L1722.98 684.185 L1723.54 684.185 L1724.1 684.185 L1724.66 684.185 L1725.22 684.185 L1725.78 684.185 L1726.34 684.185 L1726.9 684.185 L1727.46 684.185 L1728.02 684.185 L1728.58 684.185 L1729.14 684.185 L1729.69 684.185 L1730.25 684.185 L1730.81 684.185 L1731.37 684.185 L1731.93 684.185 L1732.49 684.185 L1733.05 684.185 L1733.61 684.185 L1734.17 684.185 L1734.73 684.185 L1735.29 684.185 L1735.85 684.185 L1736.41 684.185 L1736.97 684.185 L1737.52 684.185 L1738.08 684.185 L1738.64 684.185 L1739.2 684.185 L1739.76 684.185 L1740.32 684.185 L1740.88 684.185 L1741.44 684.185 L1742 684.185 L1742.56 684.185 L1743.12 684.185 L1743.68 684.185 L1744.24 684.185 L1744.79 684.185 L1745.35 684.185 L1745.91 684.185 L1746.47 684.185 L1747.03 684.185 L1747.59 684.185 L1748.15 684.185 L1748.71 684.185 L1749.27 684.185 L1749.83 684.185 L1750.39 684.185 L1750.95 684.185 L1751.51 684.185 L1752.06 684.185 L1752.62 684.185 L1753.18 684.185 L1753.74 684.185 L1754.3 684.185 L1754.86 684.185 L1755.42 684.185 L1755.98 684.185 L1756.54 684.185 L1757.1 684.185 L1757.66 684.185 L1758.22 684.185 L1758.78 684.185 L1759.34 684.185 L1759.89 684.185 L1760.45 684.185 L1761.01 684.185 L1761.57 684.185 L1762.13 684.185 L1762.69 684.185 L1763.25 684.185 L1763.81 684.185 L1764.37 684.185 L1764.93 684.185 L1765.49 684.185 L1766.05 684.185 L1766.61 684.185 L1767.16 684.185 L1767.72 684.185 L1768.28 684.185 L1768.84 684.185 L1769.4 684.185 L1769.96 684.185 L1770.52 684.185 L1771.08 684.185 L1771.64 684.185 L1772.2 684.185 L1772.76 684.185 L1773.32 684.185 L1773.88 684.185 L1774.43 684.185 L1774.99 684.185 L1775.55 684.185 L1776.11 684.185 L1776.67 684.185 L1777.23 684.185 L1777.79 684.185 L1778.35 684.185 L1778.91 684.185 L1779.47 684.185 L1780.03 684.185 L1780.59 684.185 L1781.15 684.185 L1781.71 684.185 L1782.26 684.185 L1782.82 684.185 L1783.38 684.185 L1783.94 684.185 L1784.5 684.185 L1785.06 684.185 L1785.62 684.185 L1786.18 684.185 L1786.74 684.185 L1787.3 684.185 L1787.86 684.185 L1788.42 684.185 L1788.98 684.185 L1789.53 684.185 L1790.09 684.185 L1790.65 684.185 L1791.21 684.185 L1791.77 684.185 L1792.33 684.185 L1792.89 684.185 L1793.45 684.185 L1794.01 684.185 L1794.57 684.185 L1795.13 684.185 L1795.69 684.185 L1796.25 684.185 L1796.8 684.185 L1797.36 684.185 L1797.92 684.185 L1798.48 684.185 L1799.04 684.185 L1799.6 684.185 L1800.16 684.185 L1800.72 684.185 L1801.28 684.185 L1801.84 684.185 L1802.4 684.185 L1802.96 684.185 L1803.52 684.185 L1804.08 684.185 L1804.63 684.185 L1805.19 684.185 L1805.75 684.185 L1806.31 684.185 L1806.87 684.185 L1807.43 684.185 L1807.99 684.185 L1808.55 684.185 L1809.11 684.185 L1809.67 684.185 L1810.23 684.185 L1810.79 684.185 L1811.35 684.185 L1811.9 684.185 L1812.46 684.185 L1813.02 684.185 L1813.58 684.185 L1814.14 684.185 L1814.7 684.185 L1815.26 684.185 L1815.82 684.185 L1816.38 684.185 L1816.94 684.185 L1817.5 684.185 L1818.06 684.185 L1818.62 684.185 L1819.18 684.185 L1819.73 684.185 L1820.29 684.185 L1820.85 684.185 L1821.41 684.185 L1821.97 684.185 L1822.53 684.185 L1823.09 684.185 L1823.65 684.185 L1824.21 684.185 L1824.77 684.185 L1825.33 684.185 L1825.89 684.185 L1826.45 684.185 L1827 684.185 L1827.56 684.185 L1828.12 684.185 L1828.68 684.185 L1829.24 684.185 L1829.8 684.185 L1830.36 684.185 L1830.92 684.185 L1831.48 684.185 L1832.04 684.185 L1832.6 684.185 L1833.16 684.185 L1833.72 684.185 L1834.27 684.185 L1834.83 684.185 L1835.39 684.185 L1835.95 684.185 L1836.51 684.185 L1837.07 684.185 L1837.63 684.185 L1838.19 684.185 L1838.19 681.963 L1837.63 681.963 L1837.07 681.963 L1836.51 681.963 L1835.95 681.963 L1835.39 681.963 L1834.83 681.963 L1834.27 681.963 L1833.72 681.963 L1833.16 681.963 L1832.6 681.963 L1832.04 681.963 L1831.48 681.963 L1830.92 681.963 L1830.36 681.963 L1829.8 681.963 L1829.24 681.963 L1828.68 681.963 L1828.12 681.963 L1827.56 681.963 L1827 681.963 L1826.45 681.963 L1825.89 681.963 L1825.33 681.963 L1824.77 681.963 L1824.21 681.963 L1823.65 681.963 L1823.09 681.963 L1822.53 681.963 L1821.97 681.963 L1821.41 681.963 L1820.85 681.963 L1820.29 681.963 L1819.73 681.963 L1819.18 681.963 L1818.62 681.963 L1818.06 681.963 L1817.5 681.963 L1816.94 681.963 L1816.38 681.963 L1815.82 681.963 L1815.26 681.963 L1814.7 681.963 L1814.14 681.963 L1813.58 681.963 L1813.02 681.963 L1812.46 681.963 L1811.9 681.963 L1811.35 681.963 L1810.79 681.963 L1810.23 681.963 L1809.67 681.963 L1809.11 681.963 L1808.55 681.963 L1807.99 681.963 L1807.43 681.963 L1806.87 681.963 L1806.31 681.963 L1805.75 681.963 L1805.19 681.963 L1804.63 681.963 L1804.08 681.963 L1803.52 681.963 L1802.96 681.963 L1802.4 681.963 L1801.84 681.963 L1801.28 681.963 L1800.72 681.963 L1800.16 681.963 L1799.6 681.963 L1799.04 681.963 L1798.48 681.963 L1797.92 681.963 L1797.36 681.963 L1796.8 681.963 L1796.25 681.963 L1795.69 681.963 L1795.13 681.963 L1794.57 681.963 L1794.01 681.963 L1793.45 681.963 L1792.89 681.963 L1792.33 681.963 L1791.77 681.963 L1791.21 681.963 L1790.65 681.963 L1790.09 681.963 L1789.53 681.963 L1788.98 681.963 L1788.42 681.963 L1787.86 681.963 L1787.3 681.963 L1786.74 681.963 L1786.18 681.963 L1785.62 681.963 L1785.06 681.963 L1784.5 681.963 L1783.94 681.963 L1783.38 681.963 L1782.82 681.963 L1782.26 681.963 L1781.71 681.963 L1781.15 681.963 L1780.59 681.963 L1780.03 681.963 L1779.47 681.963 L1778.91 681.963 L1778.35 681.963 L1777.79 681.963 L1777.23 681.963 L1776.67 681.963 L1776.11 681.963 L1775.55 681.963 L1774.99 681.963 L1774.43 681.963 L1773.88 681.963 L1773.32 681.963 L1772.76 681.963 L1772.2 681.963 L1771.64 681.963 L1771.08 681.963 L1770.52 681.963 L1769.96 681.963 L1769.4 681.963 L1768.84 681.963 L1768.28 681.963 L1767.72 681.963 L1767.16 681.963 L1766.61 681.963 L1766.05 681.963 L1765.49 681.963 L1764.93 681.963 L1764.37 681.963 L1763.81 681.963 L1763.25 681.963 L1762.69 681.963 L1762.13 681.963 L1761.57 681.963 L1761.01 681.963 L1760.45 681.963 L1759.89 681.963 L1759.34 681.963 L1758.78 681.963 L1758.22 681.963 L1757.66 681.963 L1757.1 681.963 L1756.54 681.963 L1755.98 681.963 L1755.42 681.963 L1754.86 681.963 L1754.3 681.963 L1753.74 681.963 L1753.18 681.963 L1752.62 681.963 L1752.06 681.963 L1751.51 681.963 L1750.95 681.963 L1750.39 681.963 L1749.83 681.963 L1749.27 681.963 L1748.71 681.963 L1748.15 681.963 L1747.59 681.963 L1747.03 681.963 L1746.47 681.963 L1745.91 681.963 L1745.35 681.963 L1744.79 681.963 L1744.24 681.963 L1743.68 681.963 L1743.12 681.963 L1742.56 681.963 L1742 681.963 L1741.44 681.963 L1740.88 681.963 L1740.32 681.963 L1739.76 681.963 L1739.2 681.963 L1738.64 681.963 L1738.08 681.963 L1737.52 681.963 L1736.97 681.963 L1736.41 681.963 L1735.85 681.963 L1735.29 681.963 L1734.73 681.963 L1734.17 681.963 L1733.61 681.963 L1733.05 681.963 L1732.49 681.963 L1731.93 681.963 L1731.37 681.963 L1730.81 681.963 L1730.25 681.963 L1729.69 681.963 L1729.14 681.963 L1728.58 681.963 L1728.02 681.963 L1727.46 681.963 L1726.9 681.963 L1726.34 681.963 L1725.78 681.963 L1725.22 681.963 L1724.66 681.963 L1724.1 681.963 L1723.54 681.963 L1722.98 681.963 L1722.42 681.963 L1721.87 681.963 L1721.31 681.963 L1720.75 681.963 L1720.19 681.963 L1719.63 681.963 L1719.07 681.963 L1718.51 681.963 L1717.95 681.963 L1717.39 681.963 L1716.83 681.963 L1716.27 681.963 L1715.71 681.963 L1715.15 681.963 L1714.6 681.963 L1714.04 681.963 L1713.48 681.963 L1712.92 681.963 L1712.36 681.963 L1711.8 681.963 L1711.24 681.963 L1710.68 681.963 L1710.12 681.963 L1709.56 681.963 L1709 681.963 L1708.44 681.963 L1707.88 681.963 L1707.32 681.963 L1706.77 681.963 L1706.21 681.963 L1705.65 681.963 L1705.09 681.963 L1704.53 681.963 L1703.97 681.963 L1703.41 681.963 L1702.85 681.963 L1702.29 681.963 L1701.73 681.963 L1701.17 681.963 L1700.61 681.963 L1700.05 681.963 L1699.5 681.963 L1698.94 681.963 L1698.38 681.963 L1697.82 681.963 L1697.26 681.963 L1696.7 681.963 L1696.14 681.963 L1695.58 681.963 L1695.02 681.963 L1694.46 681.963 L1693.9 681.963 L1693.34 681.963 L1692.78 681.963 L1692.23 681.963 L1691.67 681.963 L1691.11 681.963 L1690.55 681.963 L1689.99 681.963 L1689.43 681.963 L1688.87 681.963 L1688.31 681.963 L1687.75 681.963 L1687.19 681.963 L1686.63 681.963 L1686.07 681.963 L1685.51 681.963 L1684.95 681.963 L1684.4 681.963 L1683.84 681.963 L1683.28 681.963 L1682.72 681.963 L1682.16 681.963 L1681.6 681.963 L1681.04 681.963 L1680.48 681.963 L1679.92 681.963 L1679.36 681.963 L1678.8 681.963 L1678.24 681.963 L1677.68 681.963 L1677.13 681.963 L1676.57 681.963 L1676.01 681.963 L1675.45 681.963 L1674.89 681.963 L1674.33 681.963 L1673.77 681.963 L1673.21 681.963 L1672.65 681.963 L1672.09 681.963 L1671.53 681.963 L1670.97 681.963 L1670.41 681.963 L1669.85 681.963 L1669.3 681.963 L1668.74 681.963 L1668.18 681.963 L1667.62 681.963 L1667.06 681.963 L1666.5 681.963 L1665.94 681.963 L1665.38 681.963 L1664.82 681.963 L1664.26 681.963 L1663.7 681.963 L1663.14 681.963 L1662.58 681.963 L1662.03 681.963 L1661.47 681.963 L1660.91 681.963 L1660.35 681.963 L1659.79 681.963 L1659.23 681.963 L1658.67 681.963 L1658.11 681.963 L1657.55 681.963 L1656.99 681.963 L1656.43 681.963 L1655.87 681.963 L1655.31 681.963 L1654.76 681.963 L1654.2 681.963 L1653.64 681.963 L1653.08 681.963 L1652.52 681.963 L1651.96 681.963 L1651.4 681.963 L1650.84 681.963 L1650.28 681.963 L1649.72 681.963 L1649.16 681.963 L1648.6 681.963 L1648.04 681.963 L1647.48 681.963 L1646.93 681.963 L1646.37 681.963 L1645.81 681.963 L1645.25 681.963 L1644.69 681.963 L1644.13 681.963 L1643.57 681.963 L1643.01 681.963 L1642.45 681.963 L1641.89 681.963 L1641.33 681.963 L1640.77 681.963 L1640.21 681.963 L1639.66 681.963 L1639.1 681.963 L1638.54 681.963 L1637.98 681.963 L1637.42 681.963 L1636.86 681.963 L1636.3 681.963 L1635.74 681.963 L1635.18 681.963 L1634.62 681.963 L1634.06 681.963 L1633.5 681.963 L1632.94 681.963 L1632.39 681.963 L1631.83 681.963 L1631.27 681.963 L1630.71 681.963 L1630.15 681.963 L1629.59 681.963 L1629.03 681.963 L1628.47 681.963 L1627.91 681.963 L1627.35 681.963 L1626.79 681.963 L1626.23 681.963 L1625.67 681.963 L1625.11 681.963 L1624.56 681.963 L1624 681.963 L1623.44 681.963 L1622.88 681.963 L1622.32 681.963 L1621.76 681.963 L1621.2 681.963 L1620.64 681.963 L1620.08 681.963 L1619.52 681.963 L1618.96 681.963 L1618.4 681.963 L1617.84 681.963 L1617.29 681.963 L1616.73 681.963 L1616.17 681.963 L1615.61 681.963 L1615.05 681.963 L1614.49 681.963 L1613.93 681.963 L1613.37 681.963 L1612.81 681.963 L1612.25 681.963 L1611.69 681.963 L1611.13 681.963 L1610.57 681.963 L1610.02 681.963 L1609.46 681.963 L1608.9 681.963 L1608.34 681.963 L1607.78 681.963 L1607.22 681.963 L1606.66 681.963 L1606.1 681.963 L1605.54 681.963 L1604.98 681.963 L1604.42 681.963 L1603.86 681.963 L1603.3 681.963 L1602.74 681.963 L1602.19 681.963 L1601.63 681.963 L1601.07 681.963 L1600.51 681.963 L1599.95 681.963 L1599.39 681.963 L1598.83 681.963 L1598.27 681.963 L1597.71 681.963 L1597.15 681.963 L1596.59 681.963 L1596.03 681.963 L1595.47 681.963 L1594.92 681.963 L1594.36 681.963 L1593.8 681.963 L1593.24 681.963 L1592.68 681.963 L1592.12 681.963 L1591.56 681.963 L1591 681.963 L1590.44 681.963 L1589.88 681.963 L1589.32 681.963 L1588.76 681.963 L1588.2 681.963 L1587.65 681.963 L1587.09 681.963 L1586.53 681.963 L1585.97 681.963 L1585.41 681.963 L1584.85 681.963 L1584.29 681.963 L1583.73 681.963 L1583.17 681.963 L1582.61 681.963 L1582.05 681.963 L1581.49 681.963 L1580.93 681.963 L1580.37 681.963 L1579.82 681.963 L1579.26 681.963 L1578.7 681.963 L1578.14 681.963 L1577.58 681.963 L1577.02 681.963 L1576.46 681.963 L1575.9 681.963 L1575.34 681.963 L1574.78 681.963 L1574.22 681.963 L1573.66 681.963 L1573.1 681.963 L1572.55 681.963 L1571.99 681.963 L1571.43 681.963 L1570.87 681.963 L1570.31 681.963 L1569.75 681.963 L1569.19 681.963 L1568.63 681.963 L1568.07 681.963 L1567.51 681.963 L1566.95 681.963 L1566.39 681.963 L1565.83 681.963 L1565.28 681.963 L1564.72 681.963 L1564.16 681.963 L1563.6 681.963 L1563.04 681.963 L1562.48 681.963 L1561.92 681.963 L1561.36 681.963 L1560.8 681.963 L1560.24 681.963 L1559.68 681.963 L1559.12 681.963 L1558.56 681.963 L1558 681.963 L1557.45 681.963 L1556.89 681.963 L1556.33 681.963 L1555.77 681.963 L1555.21 681.963 L1554.65 681.963 L1554.09 681.963 L1553.53 681.963 L1552.97 681.963 L1552.41 681.963 L1551.85 681.963 L1551.29 681.963 L1550.73 681.963 L1550.18 681.963 L1549.62 681.963 L1549.06 681.963 L1548.5 681.963 L1547.94 681.963 L1547.38 681.963 L1546.82 681.963 L1546.26 681.963 L1545.7 681.963 L1545.14 681.963 L1544.58 681.963 L1544.02 681.963 L1543.46 681.963 L1542.9 681.963 L1542.35 681.963 L1541.79 681.963 L1541.23 681.963 L1540.67 681.963 L1540.11 681.963 L1539.55 681.963 L1538.99 681.963 L1538.43 681.963 L1537.87 681.963 L1537.31 681.963 L1536.75 681.963 L1536.19 681.963 L1535.63 681.963 L1535.08 681.963 L1534.52 681.963 L1533.96 681.963 L1533.4 681.963 L1532.84 681.963 L1532.28 681.963 L1531.72 681.963 L1531.16 681.963 L1530.6 681.963 L1530.04 681.963 L1529.48 681.963 L1528.92 681.963 L1528.36 681.963 L1527.81 681.963 L1527.25 681.963 L1526.69 681.963 L1526.13 681.963 L1525.57 681.963 L1525.01 681.963 L1524.45 681.963 L1523.89 681.963 L1523.33 681.963 L1522.77 681.963 L1522.21 681.963 L1521.65 681.963 L1521.09 681.963 L1520.53 681.963 L1519.98 681.963 L1519.42 681.963 L1518.86 681.963 L1518.3 681.963 L1517.74 681.963 L1517.18 681.963 L1516.62 681.963 L1516.06 681.963 L1515.5 681.963 L1514.94 681.963 L1514.38 681.963 L1513.82 681.963 L1513.26 681.963 L1512.71 681.963 L1512.15 681.963 L1511.59 681.963 L1511.03 681.963 L1510.47 681.963 L1509.91 681.963 L1509.35 681.963 L1508.79 681.963 L1508.23 681.963 L1507.67 681.963 L1507.11 681.963 L1506.55 681.963 L1505.99 681.963 L1505.44 681.963 L1504.88 681.963 L1504.32 681.963 L1503.76 681.963 L1503.2 681.963 L1502.64 681.963 L1502.08 681.963 L1501.52 681.963 L1500.96 681.963 L1500.4 681.963 L1499.84 681.963 L1499.28 681.963 L1498.72 681.963 L1498.16 681.963 L1497.61 681.963 L1497.05 681.963 L1496.49 681.963 L1495.93 681.963 L1495.37 681.963 L1494.81 681.963 L1494.25 681.963 L1493.69 681.963 L1493.13 681.963 L1492.57 681.963 L1492.01 681.963 L1491.45 681.963 L1490.89 681.963 L1490.34 681.963 L1489.78 681.963 L1489.22 681.963 L1488.66 681.963 L1488.1 681.963 L1487.54 681.963 L1486.98 681.963 L1486.42 681.963 L1485.86 681.963 L1485.3 681.963 L1484.74 681.963 L1484.18 681.963 L1483.62 681.963 L1483.07 681.963 L1482.51 681.963 L1481.95 681.963 L1481.39 681.963 L1480.83 681.963 L1480.27 681.963 L1479.71 681.963 L1479.15 681.963 L1478.59 681.963 L1478.03 681.963 L1477.47 681.963 L1476.91 681.963 L1476.35 681.963 L1475.79 681.963 L1475.24 681.963 L1474.68 681.963 L1474.12 681.963 L1473.56 681.963 L1473 681.963 L1472.44 681.963 L1471.88 681.963 L1471.32 681.963 L1470.76 681.963 L1470.2 681.963 L1469.64 681.963 L1469.08 681.963 L1468.52 681.963 L1467.97 681.963 L1467.41 681.963 L1466.85 681.963 L1466.29 681.963 L1465.73 681.963 L1465.17 681.963 L1464.61 681.963 L1464.05 681.963 L1463.49 681.963 L1462.93 681.963 L1462.37 681.963 L1461.81 681.963 L1461.25 681.963 L1460.7 681.963 L1460.14 681.963 L1459.58 681.963 L1459.02 681.963 L1458.46 681.963 L1457.9 681.963 L1457.34 681.963 L1456.78 681.963 L1456.22 681.963 L1455.66 681.963 L1455.1 681.963 L1454.54 681.963 L1453.98 681.963 L1453.42 681.963 L1452.87 681.963 L1452.31 681.963 L1451.75 681.963 L1451.19 681.963 L1450.63 681.963 L1450.07 681.963 L1449.51 681.963 L1448.95 681.963 L1448.39 681.963 L1447.83 681.963 L1447.27 681.963 L1446.71 681.963 L1446.15 681.963 L1445.6 681.963 L1445.04 681.963 L1444.48 681.963 L1443.92 681.963 L1443.36 681.963 L1442.8 681.963 L1442.24 681.963 L1441.68 681.963 L1441.12 681.963 L1440.56 681.963 L1440 681.963 L1439.44 681.963 L1438.88 681.963 L1438.33 681.963 L1437.77 681.963 L1437.21 681.963 L1436.65 681.963 L1436.09 681.963 L1435.53 681.963 L1434.97 681.963 L1434.41 681.963 L1433.85 681.963 L1433.29 681.963 L1432.73 681.963 L1432.17 681.963 L1431.61 681.963 L1431.05 681.963 L1430.5 681.963 L1429.94 681.963 L1429.38 681.963 L1428.82 681.963 L1428.26 681.963 L1427.7 681.963 L1427.14 681.963 L1426.58 681.963 L1426.02 681.963 L1425.46 681.963 L1424.9 681.963 L1424.34 681.963 L1423.78 681.963 L1423.23 681.963 L1422.67 681.963 L1422.11 681.963 L1421.55 681.963 L1420.99 681.963 L1420.43 681.963 L1419.87 681.963 L1419.31 681.963 L1418.75 681.963 L1418.19 681.963 L1417.63 681.963 L1417.07 681.963 L1416.51 681.963 L1415.95 681.963 L1415.4 681.963 L1414.84 681.963 L1414.28 681.963 L1413.72 681.963 L1413.16 681.963 L1412.6 681.963 L1412.04 681.963 L1411.48 681.963 L1410.92 681.963 L1410.36 681.963 L1409.8 681.963 L1409.24 681.963 L1408.68 681.963 L1408.13 681.963 L1407.57 681.963 L1407.01 681.963 L1406.45 681.963 L1405.89 681.963 L1405.33 681.963 L1404.77 681.963 L1404.21 681.963 L1403.65 681.963 L1403.09 681.963 L1402.53 681.963 L1401.97 681.963 L1401.41 681.963 L1400.86 681.963 L1400.3 681.963 L1399.74 681.963 L1399.18 681.963 L1398.62 681.963 L1398.06 681.963 L1397.5 681.963 L1396.94 681.963 L1396.38 681.963 L1395.82 681.963 L1395.26 681.963 L1394.7 681.963 L1394.14 681.963 L1393.58 681.963 L1393.03 681.963 L1392.47 681.963 L1391.91 681.963 L1391.35 681.963 L1390.79 681.963 L1390.23 681.963 L1389.67 681.963 L1389.11 681.963 L1388.55 681.963 L1387.99 681.963 L1387.43 681.963 L1386.87 681.963 L1386.31 681.963 L1385.76 681.963 L1385.2 681.963 L1384.64 681.963 L1384.08 681.963 L1383.52 681.963 L1382.96 681.963 L1382.4 681.963 L1381.84 681.963 L1381.28 681.963 L1380.72 681.963 L1380.16 681.963 L1379.6 681.963 L1379.04 681.963 L1378.49 681.963 L1377.93 681.963 L1377.37 681.963 L1376.81 681.963 L1376.25 681.963 L1375.69 681.963 L1375.13 681.963 L1374.57 681.963 L1374.01 681.963 L1373.45 681.963 L1372.89 681.963 L1372.33 681.963 L1371.77 681.963 L1371.21 681.963 L1370.66 681.963 L1370.1 681.963 L1369.54 681.963 L1368.98 681.963 L1368.42 681.963 L1367.86 681.963 L1367.3 681.963 L1366.74 681.963 L1366.18 681.963 L1365.62 681.963 L1365.06 681.963 L1364.5 681.963 L1363.94 681.963 L1363.39 681.963 L1362.83 681.963 L1362.27 681.963 L1361.71 681.963 L1361.15 681.963 L1360.59 681.963 L1360.03 681.963 L1359.47 681.963 L1358.91 681.963 L1358.35 681.963 L1357.79 681.963 L1357.23 681.963 L1356.67 681.963 L1356.12 681.963 L1355.56 681.963 L1355 681.963 L1354.44 681.963 L1353.88 681.963 L1353.32 681.963 L1352.76 681.963 L1352.2 681.963 L1351.64 681.963 L1351.08 681.963 L1350.52 681.963 L1349.96 681.963 L1349.4 681.963 L1348.84 681.963 L1348.29 681.963 L1347.73 681.963 L1347.17 681.963 L1346.61 681.963 L1346.05 681.963 L1345.49 681.963 L1344.93 681.963 L1344.37 681.963 L1343.81 681.963 L1343.25 681.963 L1342.69 681.963 L1342.13 681.963 L1341.57 681.963 L1341.02 681.963 L1340.46 681.963 L1339.9 681.963 L1339.34 681.963 L1338.78 681.963 L1338.22 681.963 L1337.66 681.963 L1337.1 681.963 L1336.54 681.963 L1335.98 681.963 L1335.42 681.963 L1334.86 681.963 L1334.3 681.963 L1333.75 681.963 L1333.19 681.963 L1332.63 681.963 L1332.07 681.963 L1331.51 681.963 L1330.95 681.963 L1330.39 681.963 L1329.83 681.963 L1329.27 681.963 L1328.71 681.963 L1328.15 681.963 L1327.59 681.963 L1327.03 681.963 L1326.47 681.963 L1325.92 681.963 L1325.36 681.963 L1324.8 681.963 L1324.24 681.963 L1323.68 681.963 L1323.12 681.963 L1322.56 681.963 L1322 681.963 L1321.44 681.963 L1320.88 681.963 L1320.32 681.963 L1319.76 681.963 L1319.2 681.963 L1318.65 681.963 L1318.09 681.963 L1317.53 681.963 L1316.97 681.963 L1316.41 681.963 L1315.85 681.963 L1315.29 681.963 L1314.73 681.963 L1314.17 681.963 L1313.61 681.963 L1313.05 681.963 L1312.49 681.963 L1311.93 681.963 L1311.38 681.963 L1310.82 681.963 L1310.26 681.963 L1309.7 681.963 L1309.14 681.963 L1308.58 681.963 L1308.02 681.963 L1307.46 681.963 L1306.9 681.963 L1306.34 681.963 L1305.78 681.963 L1305.22 681.963 L1304.66 681.963 L1304.1 681.963 L1303.55 681.963 L1302.99 681.963 L1302.43 681.963 L1301.87 681.963 L1301.31 681.963 L1300.75 681.963 L1300.19 681.963 L1299.63 681.963 L1299.07 681.963 L1298.51 681.963 L1297.95 681.963 L1297.39 681.963 L1296.83 681.963 L1296.28 681.963 L1295.72 681.963 L1295.16 681.963 L1294.6 681.963 L1294.04 681.963 L1293.48 681.963 L1292.92 681.963 L1292.36 681.963 L1291.8 681.963 L1291.24 681.963 L1290.68 681.963 L1290.12 681.963 L1289.56 681.963 L1289 681.963 L1288.45 681.963 L1287.89 681.963 L1287.33 681.963 L1286.77 681.963 L1286.21 681.963 L1285.65 681.963 L1285.09 681.963 L1284.53 681.963 L1283.97 681.963 L1283.41 681.963 L1282.85 681.963 L1282.29 681.963 L1281.73 681.963 L1281.18 681.963 L1280.62 681.963 L1280.06 681.963 L1279.5 681.963 L1278.94 681.963 L1278.38 681.963 L1277.82 681.963 L1277.26 681.963 L1276.7 681.963 L1276.14 681.963 L1275.58 681.963 L1275.02 681.963 L1274.46 681.963 L1273.91 681.963 L1273.35 681.963 L1272.79 681.963 L1272.23 681.963 L1271.67 681.963 L1271.11 681.963 L1270.55 681.963 L1269.99 681.963 L1269.43 681.963 L1268.87 681.963 L1268.31 681.963 L1267.75 681.963 L1267.19 681.963 L1266.63 681.963 L1266.08 681.963 L1265.52 681.963 L1264.96 681.963 L1264.4 681.963 L1263.84 681.963 L1263.28 681.963 L1262.72 681.963 L1262.16 681.963 L1261.6 681.963 L1261.04 681.963 L1260.48 681.963 L1259.92 681.963 L1259.36 681.963 L1258.81 681.963 L1258.25 681.963 L1257.69 681.963 L1257.13 681.963 L1256.57 681.963 L1256.01 681.963 L1255.45 681.963 L1254.89 681.963 L1254.33 681.963 L1253.77 681.963 L1253.21 681.963 L1252.65 681.963 L1252.09 681.963 L1251.54 681.963 L1250.98 681.963 L1250.42 681.963 L1249.86 681.963 L1249.3 681.963 L1248.74 681.963 L1248.18 681.963 L1247.62 681.963 L1247.06 681.963 L1246.5 681.963 L1245.94 681.963 L1245.38 681.963 L1244.82 681.963 L1244.26 681.963 L1243.71 681.963 L1243.15 681.963 L1242.59 681.963 L1242.03 681.963 L1241.47 681.963 L1240.91 681.963 L1240.35 681.963 L1239.79 681.963 L1239.23 681.963 L1238.67 681.963 L1238.11 681.963 L1237.55 681.963 L1236.99 681.963 L1236.44 681.963 L1235.88 681.963 L1235.32 681.963 L1234.76 681.963 L1234.2 681.963 L1233.64 681.963 L1233.08 681.963 L1232.52 681.963 L1231.96 681.963 L1231.4 681.963 L1230.84 681.963 L1230.28 681.963 L1229.72 681.963 L1229.17 681.963 L1228.61 681.963 L1228.05 681.963 L1227.49 681.963 L1226.93 681.963 L1226.37 681.963 L1225.81 681.963 L1225.25 681.963 L1224.69 681.963 L1224.13 681.963 L1223.57 681.963 L1223.01 681.963 L1222.45 681.963 L1221.89 681.963 L1221.34 681.963 L1220.78 681.963 L1220.22 681.963 L1219.66 681.963 L1219.1 681.963 L1218.54 681.963 L1217.98 681.963 L1217.42 681.963 L1216.86 681.963 L1216.3 681.963 L1215.74 681.963 L1215.18 681.963 L1214.62 681.963 L1214.07 681.963 L1213.51 681.963 L1212.95 681.963 L1212.39 681.963 L1211.83 681.963 L1211.27 681.963 L1210.71 681.963 L1210.15 681.963 L1209.59 681.963 L1209.03 681.963 L1208.47 681.963 L1207.91 681.963 L1207.35 681.963 L1206.8 681.963 L1206.24 681.963 L1205.68 681.963 L1205.12 681.963 L1204.56 681.963 L1204 681.963 L1203.44 681.963 L1202.88 681.963 L1202.32 681.963 L1201.76 681.963 L1201.2 681.963 L1200.64 681.963 L1200.08 681.963 L1199.52 681.963 L1198.97 681.963 L1198.41 681.963 L1197.85 681.963 L1197.29 681.963 L1196.73 681.963 L1196.17 681.963 L1195.61 681.963 L1195.05 681.963 L1194.49 681.963 L1193.93 681.963 L1193.37 681.963 L1192.81 681.963 L1192.25 681.963 L1191.7 681.963 L1191.14 681.963 L1190.58 681.963 L1190.02 681.963 L1189.46 681.963 L1188.9 681.963 L1188.34 681.963 L1187.78 681.963 L1187.22 681.963 L1186.66 681.963 L1186.1 681.963 L1185.54 681.963 L1184.98 681.963 L1184.43 681.963 L1183.87 681.963 L1183.31 681.963 L1182.75 681.963 L1182.19 681.963 L1181.63 681.963 L1181.07 681.963 L1180.51 681.963 L1179.95 681.963 L1179.39 681.963 L1178.83 681.963 L1178.27 681.963 L1177.71 681.963 L1177.15 681.963 L1176.6 681.963 L1176.04 681.963 L1175.48 681.963 L1174.92 681.963 L1174.36 681.963 L1173.8 681.963 L1173.24 681.963 L1172.68 681.963 L1172.12 681.963 L1171.56 681.963 L1171 681.963 L1170.44 681.963 L1169.88 681.963 L1169.33 681.963 L1168.77 681.963 L1168.21 681.963 L1167.65 681.963 L1167.09 681.963 L1166.53 681.963 L1165.97 681.963 L1165.41 681.963 L1164.85 681.963 L1164.29 681.963 L1163.73 681.963 L1163.17 681.963 L1162.61 681.963 L1162.05 681.963 L1161.5 681.963 L1160.94 681.963 L1160.38 681.963 L1159.82 681.963 L1159.26 681.963 L1158.7 681.963 L1158.14 681.963 L1157.58 681.963 L1157.02 681.963 L1156.46 681.963 L1155.9 681.963 L1155.34 681.963 L1154.78 681.963 L1154.23 681.963 L1153.67 681.963 L1153.11 681.963 L1152.55 681.963 L1151.99 681.963 L1151.43 681.963 L1150.87 681.963 L1150.31 681.963 L1149.75 681.963 L1149.19 681.963 L1148.63 681.963 L1148.07 681.963 L1147.51 681.963 L1146.96 681.963 L1146.4 681.963 L1145.84 681.963 L1145.28 681.963 L1144.72 681.963 L1144.16 681.963 L1143.6 681.963 L1143.04 681.963 L1142.48 681.963 L1141.92 681.963 L1141.36 681.963 L1140.8 681.963 L1140.24 681.963 L1139.68 681.963 L1139.13 681.963 L1138.57 681.963 L1138.01 681.963 L1137.45 681.963 L1136.89 681.963 L1136.33 681.963 L1135.77 681.963 L1135.21 681.963 L1134.65 681.963 L1134.09 681.963 L1133.53 681.963 L1132.97 681.963 L1132.41 681.963 L1131.86 681.963 L1131.3 681.963 L1130.74 681.963 L1130.18 681.963 L1129.62 681.963 L1129.06 681.963 L1128.5 681.963 L1127.94 681.963 L1127.38 681.963 L1126.82 681.963 L1126.26 681.963 L1125.7 681.963 L1125.14 681.963 L1124.59 681.963 L1124.03 681.963 L1123.47 681.963 L1122.91 681.963 L1122.35 681.963 L1121.79 681.963 L1121.23 681.963 L1120.67 681.963 L1120.11 681.963 L1119.55 681.963 L1118.99 681.963 L1118.43 681.963 L1117.87 681.963 L1117.31 681.963 L1116.76 681.963 L1116.2 681.963 L1115.64 681.963 L1115.08 681.963 L1114.52 681.963 L1113.96 681.963 L1113.4 681.963 L1112.84 681.963 L1112.28 681.963 L1111.72 681.963 L1111.16 681.963 L1110.6 681.963 L1110.04 681.963 L1109.49 681.963 L1108.93 681.963 L1108.37 681.963 L1107.81 681.963 L1107.25 681.963 L1106.69 681.963 L1106.13 681.963 L1105.57 681.963 L1105.01 681.963 L1104.45 681.963 L1103.89 681.963 L1103.33 681.963 L1102.77 681.963 L1102.22 681.963 L1101.66 681.963 L1101.1 681.963 L1100.54 681.963 L1099.98 681.963 L1099.42 681.963 L1098.86 681.963 L1098.3 681.963 L1097.74 681.963 L1097.18 681.963 L1096.62 681.963 L1096.06 681.963 L1095.5 681.963 L1094.94 681.963 L1094.39 681.963 L1093.83 681.963 L1093.27 681.963 L1092.71 681.963 L1092.15 681.963 L1091.59 681.963 L1091.03 681.963 L1090.47 681.963 L1089.91 681.963 L1089.35 681.963 L1088.79 681.963 L1088.23 681.963 L1087.67 681.963 L1087.12 681.963 L1086.56 681.963 L1086 681.963 L1085.44 681.963 L1084.88 681.963 L1084.32 681.963 L1083.76 681.963 L1083.2 681.963 L1082.64 681.963 L1082.08 681.963 L1081.52 681.963 L1080.96 681.963 L1080.4 681.963 L1079.85 681.963 L1079.29 681.963 L1078.73 681.963 L1078.17 681.963 L1077.61 681.963 L1077.05 681.963 L1076.49 681.963 L1075.93 681.963 L1075.37 681.963 L1074.81 681.963 L1074.25 681.963 L1073.69 681.963 L1073.13 681.963 L1072.57 681.963 L1072.02 681.963 L1071.46 681.963 L1070.9 681.963 L1070.34 681.963 L1069.78 681.963 L1069.22 681.963 L1068.66 681.963 L1068.1 681.963 L1067.54 681.963 L1066.98 681.963 L1066.42 681.963 L1065.86 681.963 L1065.3 681.963 L1064.75 681.963 L1064.19 681.963 L1063.63 681.963 L1063.07 681.963 L1062.51 681.963 L1061.95 681.963 L1061.39 681.963 L1060.83 681.963 L1060.27 681.963 L1059.71 681.963 L1059.15 681.963 L1058.59 681.963 L1058.03 681.963 L1057.48 681.963 L1056.92 681.963 L1056.36 681.963 L1055.8 681.963 L1055.24 681.963 L1054.68 681.963 L1054.12 681.963 L1053.56 681.963 L1053 681.963 L1052.44 681.963 L1051.88 681.963 L1051.32 681.963 L1050.76 681.963 L1050.2 681.963 L1049.65 681.963 L1049.09 681.963 L1048.53 681.963 L1047.97 681.963 L1047.41 681.963 L1046.85 681.963 L1046.29 681.963 L1045.73 681.963 L1045.17 681.963 L1044.61 681.963 L1044.05 681.963 L1043.49 681.963 L1042.93 681.963 L1042.38 681.963 L1041.82 681.963 L1041.26 681.963 L1040.7 681.963 L1040.14 681.963 L1039.58 681.963 L1039.02 681.963 L1038.46 681.963 L1037.9 681.963 L1037.34 681.963 L1036.78 681.963 L1036.22 681.963 L1035.66 681.963 L1035.1 681.963 L1034.55 681.963 L1033.99 681.963 L1033.43 681.963 L1032.87 681.963 L1032.31 681.963 L1031.75 681.963 L1031.19 681.963 L1030.63 681.963 L1030.07 681.963 L1029.51 681.963 L1028.95 681.963 L1028.39 681.963 L1027.83 681.963 L1027.28 681.963 L1026.72 681.963 L1026.16 681.963 L1025.6 681.963 L1025.04 681.963 L1024.48 681.963 L1023.92 681.963 L1023.36 681.963 L1022.8 681.963 L1022.24 681.963 L1021.68 681.963 L1021.12 681.963 L1020.56 681.963 L1020.01 681.963 L1019.45 681.963 L1018.89 681.963 L1018.33 681.963 L1017.77 681.963 L1017.21 681.963 L1016.65 681.963 L1016.09 681.963 L1015.53 681.963 L1014.97 681.963 L1014.41 681.963 L1013.85 681.963 L1013.29 681.963 L1012.73 681.963 L1012.18 681.963 L1011.62 681.963 L1011.06 681.963 L1010.5 681.963 L1009.94 681.963 L1009.38 681.963 L1008.82 681.963 L1008.26 681.963 L1007.7 681.963 L1007.14 681.963 L1006.58 681.963 L1006.02 681.963 L1005.46 681.963 L1004.91 681.963 L1004.35 681.963 L1003.79 681.963 L1003.23 681.963 L1002.67 681.963 L1002.11 681.963 L1001.55 681.963 L1000.99 681.963 L1000.43 681.963 L999.872 681.963 L999.313 681.963 L998.754 681.963 L998.194 681.963 L997.635 681.963 L997.076 681.963 L996.517 681.963 L995.957 681.963 L995.398 681.963 L994.839 681.963 L994.28 681.963 L993.72 681.963 L993.161 681.963 L992.602 681.963 L992.043 681.963 L991.483 681.963 L990.924 681.963 L990.365 681.963 L989.806 681.963 L989.246 681.963 L988.687 681.963 L988.128 681.963 L987.569 681.963 L987.009 681.963 L986.45 681.963 L985.891 681.963 L985.332 681.963 L984.772 681.963 L984.213 681.963 L983.654 681.963 L983.095 681.963 L982.535 681.963 L981.976 681.963 L981.417 681.963 L980.858 681.963 L980.298 681.963 L979.739 681.963 L979.18 681.963 L978.621 681.963 L978.061 681.963 L977.502 681.963 L976.943 681.963 L976.384 681.963 L975.824 681.963 L975.265 681.963 L974.706 681.963 L974.147 681.963 L973.587 681.963 L973.028 681.963 L972.469 681.963 L971.91 681.963 L971.35 681.963 L970.791 681.963 L970.232 681.963 L969.673 681.963 L969.113 681.963 L968.554 681.963 L967.995 681.963 L967.436 681.963 L966.876 681.963 L966.317 681.963 L965.758 681.963 L965.199 681.963 L964.639 681.963 L964.08 681.963 L963.521 681.963 L962.962 681.963 L962.402 681.963 L961.843 681.963 L961.284 681.963 L960.725 681.963 L960.165 681.963 L959.606 681.963 L959.047 681.963 L958.488 681.963 L957.928 681.963 L957.369 681.963 L956.81 681.963 L956.251 681.963 L955.691 681.963 L955.132 681.963 L954.573 681.963 L954.014 681.963 L953.454 681.963 L952.895 681.963 L952.336 681.963 L951.777 681.963 L951.217 681.963 L950.658 681.963 L950.099 681.963 L949.54 681.963 L948.98 681.963 L948.421 681.963 L947.862 681.963 L947.303 681.963 L946.743 681.963 L946.184 681.963 L945.625 681.963 L945.066 681.963 L944.506 681.963 L943.947 681.963 L943.388 681.963 L942.829 681.963 L942.269 681.963 L941.71 681.963 L941.151 681.963 L940.592 681.963 L940.032 681.963 L939.473 681.963 L938.914 681.963 L938.355 681.963 L937.795 681.963 L937.236 681.963 L936.677 681.963 L936.118 681.963 L935.558 681.963 L934.999 681.963 L934.44 681.963 L933.881 681.963 L933.321 681.963 L932.762 681.963 L932.203 681.963 L931.644 681.963 L931.084 681.963 L930.525 681.963 L929.966 681.963 L929.406 681.963 L928.847 681.963 L928.288 681.963 L927.729 681.963 L927.169 681.963 L926.61 681.963 L926.051 681.963 L925.492 681.963 L924.932 681.963 L924.373 681.963 L923.814 681.963 L923.255 681.963 L922.695 681.963 L922.136 681.963 L921.577 681.963 L921.018 681.963 L920.458 681.963 L919.899 681.963 L919.34 681.963 L918.781 681.963 L918.221 681.963 L917.662 681.963 L917.103 681.963 L916.544 681.963 L915.984 681.963 L915.425 681.963 L914.866 681.963 L914.307 681.963 L913.747 681.963 L913.188 681.963 L912.629 681.963 L912.07 681.963 L911.51 681.963 L910.951 681.963 L910.392 681.963 L909.833 681.963 L909.273 681.963 L908.714 681.963 L908.155 681.963 L907.596 681.963 L907.036 681.963 L906.477 681.963 L905.918 681.963 L905.359 681.963 L904.799 681.963 L904.24 681.963 L903.681 681.963 L903.122 681.963 L902.562 681.963 L902.003 681.963 L901.444 681.963 L900.885 681.963 L900.325 681.963 L899.766 681.963 L899.207 681.963 L898.648 681.963 L898.088 681.963 L897.529 681.963 L896.97 681.963 L896.411 681.963 L895.851 681.963 L895.292 681.963 L894.733 681.963 L894.174 681.963 L893.614 681.963 L893.055 681.963 L892.496 681.963 L891.937 681.963 L891.377 681.963 L890.818 681.963 L890.259 681.963 L889.7 681.963 L889.14 681.963 L888.581 681.963 L888.022 681.963 L887.463 681.963 L886.903 681.963 L886.344 681.963 L885.785 681.963 L885.226 681.963 L884.666 681.963 L884.107 681.963 L883.548 681.963 L882.989 681.963 L882.429 681.963 L881.87 681.963 L881.311 681.963 L880.752 681.963 L880.192 681.963 L879.633 681.963 L879.074 681.963 L878.515 681.963 L877.955 681.963 L877.396 681.963 L876.837 681.963 L876.278 681.963 L875.718 681.963 L875.159 681.963 L874.6 681.963 L874.041 681.963 L873.481 681.963 L872.922 681.963 L872.363 681.963 L871.804 681.963 L871.244 681.963 L870.685 681.963 L870.126 681.963 L869.567 681.963 L869.007 681.963 L868.448 681.963 L867.889 681.963 L867.33 681.963 L866.77 681.963 L866.211 681.963 L865.652 681.963 L865.093 681.963 L864.533 681.963 L863.974 681.963 L863.415 681.963 L862.856 681.963 L862.296 681.963 L861.737 681.963 L861.178 681.963 L860.619 681.963 L860.059 681.963 L859.5 681.963 L858.941 681.963 L858.382 681.963 L857.822 681.963 L857.263 681.963 L856.704 681.963 L856.145 681.963 L855.585 681.963 L855.026 681.963 L854.467 681.963 L853.908 681.963 L853.348 681.963 L852.789 681.963 L852.23 681.963 L851.671 681.963 L851.111 681.963 L850.552 681.963 L849.993 681.963 L849.434 681.963 L848.874 681.963 L848.315 681.963 L847.756 681.963 L847.197 681.963 L846.637 681.963 L846.078 681.963 L845.519 681.963 L844.96 681.963 L844.4 681.963 L843.841 681.963 L843.282 681.963 L842.723 681.963 L842.163 681.963 L841.604 681.963 L841.045 681.963 L840.486 681.963 L839.926 681.963 L839.367 681.963 L838.808 681.963 L838.249 681.963 L837.689 681.963 L837.13 681.963 L836.571 681.963 L836.012 681.963 L835.452 681.963 L834.893 681.963 L834.334 681.963 L833.775 681.963 L833.215 681.963 L832.656 681.963 L832.097 681.963 L831.538 681.963 L830.978 681.963 L830.419 681.963 L829.86 681.963 L829.301 681.963 L828.741 681.963 L828.182 681.963 L827.623 681.963 L827.064 681.963 L826.504 681.963 L825.945 681.963 L825.386 681.963 L824.827 681.963 L824.267 681.963 L823.708 681.963 L823.149 681.963 L822.59 681.963 L822.03 681.963 L821.471 681.963 L820.912 681.963 L820.353 681.963 L819.793 681.963 L819.234 681.963 L818.675 681.963 L818.116 681.963 L817.556 681.963 L816.997 681.963 L816.438 681.963 L815.879 681.963 L815.319 681.963 L814.76 681.963 L814.201 681.963 L813.642 681.963 L813.082 681.963 L812.523 681.963 L811.964 681.963 L811.405 681.963 L810.845 681.963 L810.286 681.963 L809.727 681.963 L809.168 681.963 L808.608 681.963 L808.049 681.963 L807.49 681.963 L806.931 681.963 L806.371 681.963 L805.812 681.963 L805.253 681.963 L804.693 681.963 L804.134 681.963 L803.575 681.963 L803.016 681.963 L802.456 681.963 L801.897 681.963 L801.338 681.963 L800.779 681.963 L800.219 681.963 L799.66 681.963 L799.101 681.963 L798.542 681.963 L797.982 681.963 L797.423 681.963 L796.864 681.963 L796.305 681.963 L795.745 681.963 L795.186 681.963 L794.627 681.963 L794.068 681.963 L793.508 681.963 L792.949 681.963 L792.39 681.963 L791.831 681.963 L791.271 681.963 L790.712 681.963 L790.153 681.963 L789.594 681.963 L789.034 681.963 L788.475 681.963 L787.916 681.963 L787.357 681.963 L786.797 681.963 L786.238 681.963 L785.679 681.963 L785.12 681.963 L784.56 681.963 L784.001 681.963 L783.442 681.963 L782.883 681.963 L782.323 681.963 L781.764 681.963 L781.205 681.963 L780.646 681.963 L780.086 681.963 L779.527 681.963 L778.968 681.963 L778.409 681.963 L777.849 681.963 L777.29 681.963 L776.731 681.963 L776.172 681.963 L775.612 681.963 L775.053 681.963 L774.494 681.963 L773.935 681.963 L773.375 681.963 L772.816 681.963 L772.257 681.963 L771.698 681.963 L771.138 681.963 L770.579 681.963 L770.02 681.963 L769.461 681.963 L768.901 681.963 L768.342 681.963 L767.783 681.963 L767.224 681.963 L766.664 681.963 L766.105 681.963 L765.546 681.963 L764.987 681.963 L764.427 681.963 L763.868 681.963 L763.309 681.963 L762.75 681.963 L762.19 681.963 L761.631 681.963 L761.072 681.963 L760.513 681.963 L759.953 681.963 L759.394 681.963 L758.835 681.963 L758.276 681.963 L757.716 681.963 L757.157 681.963 L756.598 681.963 L756.039 681.963 L755.479 681.963 L754.92 681.963 L754.361 681.963 L753.802 681.963 L753.242 681.963 L752.683 681.963 L752.124 681.963 L751.565 681.963 L751.005 681.963 L750.446 681.963 L749.887 681.963 L749.328 681.963 L748.768 681.963 L748.209 681.963 L747.65 681.963 L747.091 681.963 L746.531 681.963 L745.972 681.963 L745.413 681.963 L744.854 681.963 L744.294 681.963 L743.735 681.963 L743.176 681.963 L742.617 681.963 L742.057 681.963 L741.498 681.963 L740.939 681.963 L740.38 681.963 L739.82 681.963 L739.261 681.963 L738.702 681.963 L738.143 681.963 L737.583 681.963 L737.024 681.963 L736.465 681.963 L735.906 681.963 L735.346 681.963 L734.787 681.963 L734.228 681.963 L733.669 681.963 L733.109 681.963 L732.55 681.963 L731.991 681.963 L731.432 681.963 L730.872 681.963 L730.313 681.963 L729.754 681.963 L729.195 681.963 L728.635 681.963 L728.076 681.963 L727.517 681.963 L726.958 681.963 L726.398 681.963 L725.839 681.963 L725.28 681.963 L724.721 681.963 L724.161 681.963 L723.602 681.963 L723.043 681.963 L722.484 681.963 L721.924 681.963 L721.365 681.963 L720.806 681.963 L720.247 681.963  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip763)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,683.064 720.806,683.064 721.365,683.064 721.924,683.064 722.484,683.064 723.043,683.064 723.602,683.064 724.161,683.064 724.721,683.064 725.28,683.064 725.839,683.064 726.398,683.064 726.958,683.064 727.517,683.064 728.076,683.064 728.635,683.064 729.195,683.064 729.754,683.064 730.313,683.064 730.872,683.064 731.432,683.064 731.991,683.064 732.55,683.064 733.109,683.064 733.669,683.064 734.228,683.064 734.787,683.064 735.346,683.064 735.906,683.064 736.465,683.064 737.024,683.064 737.583,683.064 738.143,683.064 738.702,683.064 739.261,683.064 739.82,683.064 740.38,683.064 740.939,683.064 741.498,683.064 742.057,683.064 742.617,683.064 743.176,683.064 743.735,683.064 744.294,683.064 744.854,683.064 745.413,683.064 745.972,683.064 746.531,683.064 747.091,683.064 747.65,683.064 748.209,683.064 748.768,683.064 749.328,683.064 749.887,683.064 750.446,683.064 751.005,683.064 751.565,683.064 752.124,683.064 752.683,683.064 753.242,683.064 753.802,683.064 754.361,683.064 754.92,683.064 755.479,683.064 756.039,683.064 756.598,683.064 757.157,683.064 757.716,683.064 758.276,683.064 758.835,683.064 759.394,683.064 759.953,683.064 760.513,683.064 761.072,683.064 761.631,683.064 762.19,683.064 762.75,683.064 763.309,683.064 763.868,683.064 764.427,683.064 764.987,683.064 765.546,683.064 766.105,683.064 766.664,683.064 767.224,683.064 767.783,683.064 768.342,683.064 768.901,683.064 769.461,683.064 770.02,683.064 770.579,683.064 771.138,683.064 771.698,683.064 772.257,683.064 772.816,683.064 773.375,683.064 773.935,683.064 774.494,683.064 775.053,683.064 775.612,683.064 776.172,683.064 776.731,683.064 777.29,683.064 777.849,683.064 778.409,683.064 778.968,683.064 779.527,683.064 780.086,683.064 780.646,683.064 781.205,683.064 781.764,683.064 782.323,683.064 782.883,683.064 783.442,683.064 784.001,683.064 784.56,683.064 785.12,683.064 785.679,683.064 786.238,683.064 786.797,683.064 787.357,683.064 787.916,683.064 788.475,683.064 789.034,683.064 789.594,683.064 790.153,683.064 790.712,683.064 791.271,683.064 791.831,683.064 792.39,683.064 792.949,683.064 793.508,683.064 794.068,683.064 794.627,683.064 795.186,683.064 795.745,683.064 796.305,683.064 796.864,683.064 797.423,683.064 797.982,683.064 798.542,683.064 799.101,683.064 799.66,683.064 800.219,683.064 800.779,683.064 801.338,683.064 801.897,683.064 802.456,683.064 803.016,683.064 803.575,683.064 804.134,683.064 804.693,683.064 805.253,683.064 805.812,683.064 806.371,683.064 806.931,683.064 807.49,683.064 808.049,683.064 808.608,683.064 809.168,683.064 809.727,683.064 810.286,683.064 810.845,683.064 811.405,683.064 811.964,683.064 812.523,683.064 813.082,683.064 813.642,683.064 814.201,683.064 814.76,683.064 815.319,683.064 815.879,683.064 816.438,683.064 816.997,683.064 817.556,683.064 818.116,683.064 818.675,683.064 819.234,683.064 819.793,683.064 820.353,683.064 820.912,683.064 821.471,683.064 822.03,683.064 822.59,683.064 823.149,683.064 823.708,683.064 824.267,683.064 824.827,683.064 825.386,683.064 825.945,683.064 826.504,683.064 827.064,683.064 827.623,683.064 828.182,683.064 828.741,683.064 829.301,683.064 829.86,683.064 830.419,683.064 830.978,683.064 831.538,683.064 832.097,683.064 832.656,683.064 833.215,683.064 833.775,683.064 834.334,683.064 834.893,683.064 835.452,683.064 836.012,683.064 836.571,683.064 837.13,683.064 837.689,683.064 838.249,683.064 838.808,683.064 839.367,683.064 839.926,683.064 840.486,683.064 841.045,683.064 841.604,683.064 842.163,683.064 842.723,683.064 843.282,683.064 843.841,683.064 844.4,683.064 844.96,683.064 845.519,683.064 846.078,683.064 846.637,683.064 847.197,683.064 847.756,683.064 848.315,683.064 848.874,683.064 849.434,683.064 849.993,683.064 850.552,683.064 851.111,683.064 851.671,683.064 852.23,683.064 852.789,683.064 853.348,683.064 853.908,683.064 854.467,683.064 855.026,683.064 855.585,683.064 856.145,683.064 856.704,683.064 857.263,683.064 857.822,683.064 858.382,683.064 858.941,683.064 859.5,683.064 860.059,683.064 860.619,683.064 861.178,683.064 861.737,683.064 862.296,683.064 862.856,683.064 863.415,683.064 863.974,683.064 864.533,683.064 865.093,683.064 865.652,683.064 866.211,683.064 866.77,683.064 867.33,683.064 867.889,683.064 868.448,683.064 869.007,683.064 869.567,683.064 870.126,683.064 870.685,683.064 871.244,683.064 871.804,683.064 872.363,683.064 872.922,683.064 873.481,683.064 874.041,683.064 874.6,683.064 875.159,683.064 875.718,683.064 876.278,683.064 876.837,683.064 877.396,683.064 877.955,683.064 878.515,683.064 879.074,683.064 879.633,683.064 880.192,683.064 880.752,683.064 881.311,683.064 881.87,683.064 882.429,683.064 882.989,683.064 883.548,683.064 884.107,683.064 884.666,683.064 885.226,683.064 885.785,683.064 886.344,683.064 886.903,683.064 887.463,683.064 888.022,683.064 888.581,683.064 889.14,683.064 889.7,683.064 890.259,683.064 890.818,683.064 891.377,683.064 891.937,683.064 892.496,683.064 893.055,683.064 893.614,683.064 894.174,683.064 894.733,683.064 895.292,683.064 895.851,683.064 896.411,683.064 896.97,683.064 897.529,683.064 898.088,683.064 898.648,683.064 899.207,683.064 899.766,683.064 900.325,683.064 900.885,683.064 901.444,683.064 902.003,683.064 902.562,683.064 903.122,683.064 903.681,683.064 904.24,683.064 904.799,683.064 905.359,683.064 905.918,683.064 906.477,683.064 907.036,683.064 907.596,683.064 908.155,683.064 908.714,683.064 909.273,683.064 909.833,683.064 910.392,683.064 910.951,683.064 911.51,683.064 912.07,683.064 912.629,683.064 913.188,683.064 913.747,683.064 914.307,683.064 914.866,683.064 915.425,683.064 915.984,683.064 916.544,683.064 917.103,683.064 917.662,683.064 918.221,683.064 918.781,683.064 919.34,683.064 919.899,683.064 920.458,683.064 921.018,683.064 921.577,683.064 922.136,683.064 922.695,683.064 923.255,683.064 923.814,683.064 924.373,683.064 924.932,683.064 925.492,683.064 926.051,683.064 926.61,683.064 927.169,683.064 927.729,683.064 928.288,683.064 928.847,683.064 929.406,683.064 929.966,683.064 930.525,683.064 931.084,683.064 931.644,683.064 932.203,683.064 932.762,683.064 933.321,683.064 933.881,683.064 934.44,683.064 934.999,683.064 935.558,683.064 936.118,683.064 936.677,683.064 937.236,683.064 937.795,683.064 938.355,683.064 938.914,683.064 939.473,683.064 940.032,683.064 940.592,683.064 941.151,683.064 941.71,683.064 942.269,683.064 942.829,683.064 943.388,683.064 943.947,683.064 944.506,683.064 945.066,683.064 945.625,683.064 946.184,683.064 946.743,683.064 947.303,683.064 947.862,683.064 948.421,683.064 948.98,683.064 949.54,683.064 950.099,683.064 950.658,683.064 951.217,683.064 951.777,683.064 952.336,683.064 952.895,683.064 953.454,683.064 954.014,683.064 954.573,683.064 955.132,683.064 955.691,683.064 956.251,683.064 956.81,683.064 957.369,683.064 957.928,683.064 958.488,683.064 959.047,683.064 959.606,683.064 960.165,683.064 960.725,683.064 961.284,683.064 961.843,683.064 962.402,683.064 962.962,683.064 963.521,683.064 964.08,683.064 964.639,683.064 965.199,683.064 965.758,683.064 966.317,683.064 966.876,683.064 967.436,683.064 967.995,683.064 968.554,683.064 969.113,683.064 969.673,683.064 970.232,683.064 970.791,683.064 971.35,683.064 971.91,683.064 972.469,683.064 973.028,683.064 973.587,683.064 974.147,683.064 974.706,683.064 975.265,683.064 975.824,683.064 976.384,683.064 976.943,683.064 977.502,683.064 978.061,683.064 978.621,683.064 979.18,683.064 979.739,683.064 980.298,683.064 980.858,683.064 981.417,683.064 981.976,683.064 982.535,683.064 983.095,683.064 983.654,683.064 984.213,683.064 984.772,683.064 985.332,683.064 985.891,683.064 986.45,683.064 987.009,683.064 987.569,683.064 988.128,683.064 988.687,683.064 989.246,683.064 989.806,683.064 990.365,683.064 990.924,683.064 991.483,683.064 992.043,683.064 992.602,683.064 993.161,683.064 993.72,683.064 994.28,683.064 994.839,683.064 995.398,683.064 995.957,683.064 996.517,683.064 997.076,683.064 997.635,683.064 998.194,683.064 998.754,683.064 999.313,683.064 999.872,683.064 1000.43,683.064 1000.99,683.064 1001.55,683.064 1002.11,683.064 1002.67,683.064 1003.23,683.064 1003.79,683.064 1004.35,683.064 1004.91,683.064 1005.46,683.064 1006.02,683.064 1006.58,683.064 1007.14,683.064 1007.7,683.064 1008.26,683.064 1008.82,683.064 1009.38,683.064 1009.94,683.064 1010.5,683.064 1011.06,683.064 1011.62,683.064 1012.18,683.064 1012.73,683.064 1013.29,683.064 1013.85,683.064 1014.41,683.064 1014.97,683.064 1015.53,683.064 1016.09,683.064 1016.65,683.064 1017.21,683.064 1017.77,683.064 1018.33,683.064 1018.89,683.064 1019.45,683.064 1020.01,683.064 1020.56,683.064 1021.12,683.064 1021.68,683.064 1022.24,683.064 1022.8,683.064 1023.36,683.064 1023.92,683.064 1024.48,683.064 1025.04,683.064 1025.6,683.064 1026.16,683.064 1026.72,683.064 1027.28,683.064 1027.83,683.064 1028.39,683.064 1028.95,683.064 1029.51,683.064 1030.07,683.064 1030.63,683.064 1031.19,683.064 1031.75,683.064 1032.31,683.064 1032.87,683.064 1033.43,683.064 1033.99,683.064 1034.55,683.064 1035.1,683.064 1035.66,683.064 1036.22,683.064 1036.78,683.064 1037.34,683.064 1037.9,683.064 1038.46,683.064 1039.02,683.064 1039.58,683.064 1040.14,683.064 1040.7,683.064 1041.26,683.064 1041.82,683.064 1042.38,683.064 1042.93,683.064 1043.49,683.064 1044.05,683.064 1044.61,683.064 1045.17,683.064 1045.73,683.064 1046.29,683.064 1046.85,683.064 1047.41,683.064 1047.97,683.064 1048.53,683.064 1049.09,683.064 1049.65,683.064 1050.2,683.064 1050.76,683.064 1051.32,683.064 1051.88,683.064 1052.44,683.064 1053,683.064 1053.56,683.064 1054.12,683.064 1054.68,683.064 1055.24,683.064 1055.8,683.064 1056.36,683.064 1056.92,683.064 1057.48,683.064 1058.03,683.064 1058.59,683.064 1059.15,683.064 1059.71,683.064 1060.27,683.064 1060.83,683.064 1061.39,683.064 1061.95,683.064 1062.51,683.064 1063.07,683.064 1063.63,683.064 1064.19,683.064 1064.75,683.064 1065.3,683.064 1065.86,683.064 1066.42,683.064 1066.98,683.064 1067.54,683.064 1068.1,683.064 1068.66,683.064 1069.22,683.064 1069.78,683.064 1070.34,683.064 1070.9,683.064 1071.46,683.064 1072.02,683.064 1072.57,683.064 1073.13,683.064 1073.69,683.064 1074.25,683.064 1074.81,683.064 1075.37,683.064 1075.93,683.064 1076.49,683.064 1077.05,683.064 1077.61,683.064 1078.17,683.064 1078.73,683.064 1079.29,683.064 1079.85,683.064 1080.4,683.064 1080.96,683.064 1081.52,683.064 1082.08,683.064 1082.64,683.064 1083.2,683.064 1083.76,683.064 1084.32,683.064 1084.88,683.064 1085.44,683.064 1086,683.064 1086.56,683.064 1087.12,683.064 1087.67,683.064 1088.23,683.064 1088.79,683.064 1089.35,683.064 1089.91,683.064 1090.47,683.064 1091.03,683.064 1091.59,683.064 1092.15,683.064 1092.71,683.064 1093.27,683.064 1093.83,683.064 1094.39,683.064 1094.94,683.064 1095.5,683.064 1096.06,683.064 1096.62,683.064 1097.18,683.064 1097.74,683.064 1098.3,683.064 1098.86,683.064 1099.42,683.064 1099.98,683.064 1100.54,683.064 1101.1,683.064 1101.66,683.064 1102.22,683.064 1102.77,683.064 1103.33,683.064 1103.89,683.064 1104.45,683.064 1105.01,683.064 1105.57,683.064 1106.13,683.064 1106.69,683.064 1107.25,683.064 1107.81,683.064 1108.37,683.064 1108.93,683.064 1109.49,683.064 1110.04,683.064 1110.6,683.064 1111.16,683.064 1111.72,683.064 1112.28,683.064 1112.84,683.064 1113.4,683.064 1113.96,683.064 1114.52,683.064 1115.08,683.064 1115.64,683.064 1116.2,683.064 1116.76,683.064 1117.31,683.064 1117.87,683.064 1118.43,683.064 1118.99,683.064 1119.55,683.064 1120.11,683.064 1120.67,683.064 1121.23,683.064 1121.79,683.064 1122.35,683.064 1122.91,683.064 1123.47,683.064 1124.03,683.064 1124.59,683.064 1125.14,683.064 1125.7,683.064 1126.26,683.064 1126.82,683.064 1127.38,683.064 1127.94,683.064 1128.5,683.064 1129.06,683.064 1129.62,683.064 1130.18,683.064 1130.74,683.064 1131.3,683.064 1131.86,683.064 1132.41,683.064 1132.97,683.064 1133.53,683.064 1134.09,683.064 1134.65,683.064 1135.21,683.064 1135.77,683.064 1136.33,683.064 1136.89,683.064 1137.45,683.064 1138.01,683.064 1138.57,683.064 1139.13,683.064 1139.68,683.064 1140.24,683.064 1140.8,683.064 1141.36,683.064 1141.92,683.064 1142.48,683.064 1143.04,683.064 1143.6,683.064 1144.16,683.064 1144.72,683.064 1145.28,683.064 1145.84,683.064 1146.4,683.064 1146.96,683.064 1147.51,683.064 1148.07,683.064 1148.63,683.064 1149.19,683.064 1149.75,683.064 1150.31,683.064 1150.87,683.064 1151.43,683.064 1151.99,683.064 1152.55,683.064 1153.11,683.064 1153.67,683.064 1154.23,683.064 1154.78,683.064 1155.34,683.064 1155.9,683.064 1156.46,683.064 1157.02,683.064 1157.58,683.064 1158.14,683.064 1158.7,683.064 1159.26,683.064 1159.82,683.064 1160.38,683.064 1160.94,683.064 1161.5,683.064 1162.05,683.064 1162.61,683.064 1163.17,683.064 1163.73,683.064 1164.29,683.064 1164.85,683.064 1165.41,683.064 1165.97,683.064 1166.53,683.064 1167.09,683.064 1167.65,683.064 1168.21,683.064 1168.77,683.064 1169.33,683.064 1169.88,683.064 1170.44,683.064 1171,683.064 1171.56,683.064 1172.12,683.064 1172.68,683.064 1173.24,683.064 1173.8,683.064 1174.36,683.064 1174.92,683.064 1175.48,683.064 1176.04,683.064 1176.6,683.064 1177.15,683.064 1177.71,683.064 1178.27,683.064 1178.83,683.064 1179.39,683.064 1179.95,683.064 1180.51,683.064 1181.07,683.064 1181.63,683.064 1182.19,683.064 1182.75,683.064 1183.31,683.064 1183.87,683.064 1184.43,683.064 1184.98,683.064 1185.54,683.064 1186.1,683.064 1186.66,683.064 1187.22,683.064 1187.78,683.064 1188.34,683.064 1188.9,683.064 1189.46,683.064 1190.02,683.064 1190.58,683.064 1191.14,683.064 1191.7,683.064 1192.25,683.064 1192.81,683.064 1193.37,683.064 1193.93,683.064 1194.49,683.064 1195.05,683.064 1195.61,683.064 1196.17,683.064 1196.73,683.064 1197.29,683.064 1197.85,683.064 1198.41,683.064 1198.97,683.064 1199.52,683.064 1200.08,683.064 1200.64,683.064 1201.2,683.064 1201.76,683.064 1202.32,683.064 1202.88,683.064 1203.44,683.064 1204,683.064 1204.56,683.064 1205.12,683.064 1205.68,683.064 1206.24,683.064 1206.8,683.064 1207.35,683.064 1207.91,683.064 1208.47,683.064 1209.03,683.064 1209.59,683.064 1210.15,683.064 1210.71,683.064 1211.27,683.064 1211.83,683.064 1212.39,683.064 1212.95,683.064 1213.51,683.064 1214.07,683.064 1214.62,683.064 1215.18,683.064 1215.74,683.064 1216.3,683.064 1216.86,683.064 1217.42,683.064 1217.98,683.064 1218.54,683.064 1219.1,683.064 1219.66,683.064 1220.22,683.064 1220.78,683.064 1221.34,683.064 1221.89,683.064 1222.45,683.064 1223.01,683.064 1223.57,683.064 1224.13,683.064 1224.69,683.064 1225.25,683.064 1225.81,683.064 1226.37,683.064 1226.93,683.064 1227.49,683.064 1228.05,683.064 1228.61,683.064 1229.17,683.064 1229.72,683.064 1230.28,683.064 1230.84,683.064 1231.4,683.064 1231.96,683.064 1232.52,683.064 1233.08,683.064 1233.64,683.064 1234.2,683.064 1234.76,683.064 1235.32,683.064 1235.88,683.064 1236.44,683.064 1236.99,683.064 1237.55,683.064 1238.11,683.064 1238.67,683.064 1239.23,683.064 1239.79,683.064 1240.35,683.064 1240.91,683.064 1241.47,683.064 1242.03,683.064 1242.59,683.064 1243.15,683.064 1243.71,683.064 1244.26,683.064 1244.82,683.064 1245.38,683.064 1245.94,683.064 1246.5,683.064 1247.06,683.064 1247.62,683.064 1248.18,683.064 1248.74,683.064 1249.3,683.064 1249.86,683.064 1250.42,683.064 1250.98,683.064 1251.54,683.064 1252.09,683.064 1252.65,683.064 1253.21,683.064 1253.77,683.064 1254.33,683.064 1254.89,683.064 1255.45,683.064 1256.01,683.064 1256.57,683.064 1257.13,683.064 1257.69,683.064 1258.25,683.064 1258.81,683.064 1259.36,683.064 1259.92,683.064 1260.48,683.064 1261.04,683.064 1261.6,683.064 1262.16,683.064 1262.72,683.064 1263.28,683.064 1263.84,683.064 1264.4,683.064 1264.96,683.064 1265.52,683.064 1266.08,683.064 1266.63,683.064 1267.19,683.064 1267.75,683.064 1268.31,683.064 1268.87,683.064 1269.43,683.064 1269.99,683.064 1270.55,683.064 1271.11,683.064 1271.67,683.064 1272.23,683.064 1272.79,683.064 1273.35,683.064 1273.91,683.064 1274.46,683.064 1275.02,683.064 1275.58,683.064 1276.14,683.064 1276.7,683.064 1277.26,683.064 1277.82,683.064 1278.38,683.064 1278.94,683.064 1279.5,683.064 1280.06,683.064 1280.62,683.064 1281.18,683.064 1281.73,683.064 1282.29,683.064 1282.85,683.064 1283.41,683.064 1283.97,683.064 1284.53,683.064 1285.09,683.064 1285.65,683.064 1286.21,683.064 1286.77,683.064 1287.33,683.064 1287.89,683.064 1288.45,683.064 1289,683.064 1289.56,683.064 1290.12,683.064 1290.68,683.064 1291.24,683.064 1291.8,683.064 1292.36,683.064 1292.92,683.064 1293.48,683.064 1294.04,683.064 1294.6,683.064 1295.16,683.064 1295.72,683.064 1296.28,683.064 1296.83,683.064 1297.39,683.064 1297.95,683.064 1298.51,683.064 1299.07,683.064 1299.63,683.064 1300.19,683.064 1300.75,683.064 1301.31,683.064 1301.87,683.064 1302.43,683.064 1302.99,683.064 1303.55,683.064 1304.1,683.064 1304.66,683.064 1305.22,683.064 1305.78,683.064 1306.34,683.064 1306.9,683.064 1307.46,683.064 1308.02,683.064 1308.58,683.064 1309.14,683.064 1309.7,683.064 1310.26,683.064 1310.82,683.064 1311.38,683.064 1311.93,683.064 1312.49,683.064 1313.05,683.064 1313.61,683.064 1314.17,683.064 1314.73,683.064 1315.29,683.064 1315.85,683.064 1316.41,683.064 1316.97,683.064 1317.53,683.064 1318.09,683.064 1318.65,683.064 1319.2,683.064 1319.76,683.064 1320.32,683.064 1320.88,683.064 1321.44,683.064 1322,683.064 1322.56,683.064 1323.12,683.064 1323.68,683.064 1324.24,683.064 1324.8,683.064 1325.36,683.064 1325.92,683.064 1326.47,683.064 1327.03,683.064 1327.59,683.064 1328.15,683.064 1328.71,683.064 1329.27,683.064 1329.83,683.064 1330.39,683.064 1330.95,683.064 1331.51,683.064 1332.07,683.064 1332.63,683.064 1333.19,683.064 1333.75,683.064 1334.3,683.064 1334.86,683.064 1335.42,683.064 1335.98,683.064 1336.54,683.064 1337.1,683.064 1337.66,683.064 1338.22,683.064 1338.78,683.064 1339.34,683.064 1339.9,683.064 1340.46,683.064 1341.02,683.064 1341.57,683.064 1342.13,683.064 1342.69,683.064 1343.25,683.064 1343.81,683.064 1344.37,683.064 1344.93,683.064 1345.49,683.064 1346.05,683.064 1346.61,683.064 1347.17,683.064 1347.73,683.064 1348.29,683.064 1348.84,683.064 1349.4,683.064 1349.96,683.064 1350.52,683.064 1351.08,683.064 1351.64,683.064 1352.2,683.064 1352.76,683.064 1353.32,683.064 1353.88,683.064 1354.44,683.064 1355,683.064 1355.56,683.064 1356.12,683.064 1356.67,683.064 1357.23,683.064 1357.79,683.064 1358.35,683.064 1358.91,683.064 1359.47,683.064 1360.03,683.064 1360.59,683.064 1361.15,683.064 1361.71,683.064 1362.27,683.064 1362.83,683.064 1363.39,683.064 1363.94,683.064 1364.5,683.064 1365.06,683.064 1365.62,683.064 1366.18,683.064 1366.74,683.064 1367.3,683.064 1367.86,683.064 1368.42,683.064 1368.98,683.064 1369.54,683.064 1370.1,683.064 1370.66,683.064 1371.21,683.064 1371.77,683.064 1372.33,683.064 1372.89,683.064 1373.45,683.064 1374.01,683.064 1374.57,683.064 1375.13,683.064 1375.69,683.064 1376.25,683.064 1376.81,683.064 1377.37,683.064 1377.93,683.064 1378.49,683.064 1379.04,683.064 1379.6,683.064 1380.16,683.064 1380.72,683.064 1381.28,683.064 1381.84,683.064 1382.4,683.064 1382.96,683.064 1383.52,683.064 1384.08,683.064 1384.64,683.064 1385.2,683.064 1385.76,683.064 1386.31,683.064 1386.87,683.064 1387.43,683.064 1387.99,683.064 1388.55,683.064 1389.11,683.064 1389.67,683.064 1390.23,683.064 1390.79,683.064 1391.35,683.064 1391.91,683.064 1392.47,683.064 1393.03,683.064 1393.58,683.064 1394.14,683.064 1394.7,683.064 1395.26,683.064 1395.82,683.064 1396.38,683.064 1396.94,683.064 1397.5,683.064 1398.06,683.064 1398.62,683.064 1399.18,683.064 1399.74,683.064 1400.3,683.064 1400.86,683.064 1401.41,683.064 1401.97,683.064 1402.53,683.064 1403.09,683.064 1403.65,683.064 1404.21,683.064 1404.77,683.064 1405.33,683.064 1405.89,683.064 1406.45,683.064 1407.01,683.064 1407.57,683.064 1408.13,683.064 1408.68,683.064 1409.24,683.064 1409.8,683.064 1410.36,683.064 1410.92,683.064 1411.48,683.064 1412.04,683.064 1412.6,683.064 1413.16,683.064 1413.72,683.064 1414.28,683.064 1414.84,683.064 1415.4,683.064 1415.95,683.064 1416.51,683.064 1417.07,683.064 1417.63,683.064 1418.19,683.064 1418.75,683.064 1419.31,683.064 1419.87,683.064 1420.43,683.064 1420.99,683.064 1421.55,683.064 1422.11,683.064 1422.67,683.064 1423.23,683.064 1423.78,683.064 1424.34,683.064 1424.9,683.064 1425.46,683.064 1426.02,683.064 1426.58,683.064 1427.14,683.064 1427.7,683.064 1428.26,683.064 1428.82,683.064 1429.38,683.064 1429.94,683.064 1430.5,683.064 1431.05,683.064 1431.61,683.064 1432.17,683.064 1432.73,683.064 1433.29,683.064 1433.85,683.064 1434.41,683.064 1434.97,683.064 1435.53,683.064 1436.09,683.064 1436.65,683.064 1437.21,683.064 1437.77,683.064 1438.33,683.064 1438.88,683.064 1439.44,683.064 1440,683.064 1440.56,683.064 1441.12,683.064 1441.68,683.064 1442.24,683.064 1442.8,683.064 1443.36,683.064 1443.92,683.064 1444.48,683.064 1445.04,683.064 1445.6,683.064 1446.15,683.064 1446.71,683.064 1447.27,683.064 1447.83,683.064 1448.39,683.064 1448.95,683.064 1449.51,683.064 1450.07,683.064 1450.63,683.064 1451.19,683.064 1451.75,683.064 1452.31,683.064 1452.87,683.064 1453.42,683.064 1453.98,683.064 1454.54,683.064 1455.1,683.064 1455.66,683.064 1456.22,683.064 1456.78,683.064 1457.34,683.064 1457.9,683.064 1458.46,683.064 1459.02,683.064 1459.58,683.064 1460.14,683.064 1460.7,683.064 1461.25,683.064 1461.81,683.064 1462.37,683.064 1462.93,683.064 1463.49,683.064 1464.05,683.064 1464.61,683.064 1465.17,683.064 1465.73,683.064 1466.29,683.064 1466.85,683.064 1467.41,683.064 1467.97,683.064 1468.52,683.064 1469.08,683.064 1469.64,683.064 1470.2,683.064 1470.76,683.064 1471.32,683.064 1471.88,683.064 1472.44,683.064 1473,683.064 1473.56,683.064 1474.12,683.064 1474.68,683.064 1475.24,683.064 1475.79,683.064 1476.35,683.064 1476.91,683.064 1477.47,683.064 1478.03,683.064 1478.59,683.064 1479.15,683.064 1479.71,683.064 1480.27,683.064 1480.83,683.064 1481.39,683.064 1481.95,683.064 1482.51,683.064 1483.07,683.064 1483.62,683.064 1484.18,683.064 1484.74,683.064 1485.3,683.064 1485.86,683.064 1486.42,683.064 1486.98,683.064 1487.54,683.064 1488.1,683.064 1488.66,683.064 1489.22,683.064 1489.78,683.064 1490.34,683.064 1490.89,683.064 1491.45,683.064 1492.01,683.064 1492.57,683.064 1493.13,683.064 1493.69,683.064 1494.25,683.064 1494.81,683.064 1495.37,683.064 1495.93,683.064 1496.49,683.064 1497.05,683.064 1497.61,683.064 1498.16,683.064 1498.72,683.064 1499.28,683.064 1499.84,683.064 1500.4,683.064 1500.96,683.064 1501.52,683.064 1502.08,683.064 1502.64,683.064 1503.2,683.064 1503.76,683.064 1504.32,683.064 1504.88,683.064 1505.44,683.064 1505.99,683.064 1506.55,683.064 1507.11,683.064 1507.67,683.064 1508.23,683.064 1508.79,683.064 1509.35,683.064 1509.91,683.064 1510.47,683.064 1511.03,683.064 1511.59,683.064 1512.15,683.064 1512.71,683.064 1513.26,683.064 1513.82,683.064 1514.38,683.064 1514.94,683.064 1515.5,683.064 1516.06,683.064 1516.62,683.064 1517.18,683.064 1517.74,683.064 1518.3,683.064 1518.86,683.064 1519.42,683.064 1519.98,683.064 1520.53,683.064 1521.09,683.064 1521.65,683.064 1522.21,683.064 1522.77,683.064 1523.33,683.064 1523.89,683.064 1524.45,683.064 1525.01,683.064 1525.57,683.064 1526.13,683.064 1526.69,683.064 1527.25,683.064 1527.81,683.064 1528.36,683.064 1528.92,683.064 1529.48,683.064 1530.04,683.064 1530.6,683.064 1531.16,683.064 1531.72,683.064 1532.28,683.064 1532.84,683.064 1533.4,683.064 1533.96,683.064 1534.52,683.064 1535.08,683.064 1535.63,683.064 1536.19,683.064 1536.75,683.064 1537.31,683.064 1537.87,683.064 1538.43,683.064 1538.99,683.064 1539.55,683.064 1540.11,683.064 1540.67,683.064 1541.23,683.064 1541.79,683.064 1542.35,683.064 1542.9,683.064 1543.46,683.064 1544.02,683.064 1544.58,683.064 1545.14,683.064 1545.7,683.064 1546.26,683.064 1546.82,683.064 1547.38,683.064 1547.94,683.064 1548.5,683.064 1549.06,683.064 1549.62,683.064 1550.18,683.064 1550.73,683.064 1551.29,683.064 1551.85,683.064 1552.41,683.064 1552.97,683.064 1553.53,683.064 1554.09,683.064 1554.65,683.064 1555.21,683.064 1555.77,683.064 1556.33,683.064 1556.89,683.064 1557.45,683.064 1558,683.064 1558.56,683.064 1559.12,683.064 1559.68,683.064 1560.24,683.064 1560.8,683.064 1561.36,683.064 1561.92,683.064 1562.48,683.064 1563.04,683.064 1563.6,683.064 1564.16,683.064 1564.72,683.064 1565.28,683.064 1565.83,683.064 1566.39,683.064 1566.95,683.064 1567.51,683.064 1568.07,683.064 1568.63,683.064 1569.19,683.064 1569.75,683.064 1570.31,683.064 1570.87,683.064 1571.43,683.064 1571.99,683.064 1572.55,683.064 1573.1,683.064 1573.66,683.064 1574.22,683.064 1574.78,683.064 1575.34,683.064 1575.9,683.064 1576.46,683.064 1577.02,683.064 1577.58,683.064 1578.14,683.064 1578.7,683.064 1579.26,683.064 1579.82,683.064 1580.37,683.064 1580.93,683.064 1581.49,683.064 1582.05,683.064 1582.61,683.064 1583.17,683.064 1583.73,683.064 1584.29,683.064 1584.85,683.064 1585.41,683.064 1585.97,683.064 1586.53,683.064 1587.09,683.064 1587.65,683.064 1588.2,683.064 1588.76,683.064 1589.32,683.064 1589.88,683.064 1590.44,683.064 1591,683.064 1591.56,683.064 1592.12,683.064 1592.68,683.064 1593.24,683.064 1593.8,683.064 1594.36,683.064 1594.92,683.064 1595.47,683.064 1596.03,683.064 1596.59,683.064 1597.15,683.064 1597.71,683.064 1598.27,683.064 1598.83,683.064 1599.39,683.064 1599.95,683.064 1600.51,683.064 1601.07,683.064 1601.63,683.064 1602.19,683.064 1602.74,683.064 1603.3,683.064 1603.86,683.064 1604.42,683.064 1604.98,683.064 1605.54,683.064 1606.1,683.064 1606.66,683.064 1607.22,683.064 1607.78,683.064 1608.34,683.064 1608.9,683.064 1609.46,683.064 1610.02,683.064 1610.57,683.064 1611.13,683.064 1611.69,683.064 1612.25,683.064 1612.81,683.064 1613.37,683.064 1613.93,683.064 1614.49,683.064 1615.05,683.064 1615.61,683.064 1616.17,683.064 1616.73,683.064 1617.29,683.064 1617.84,683.064 1618.4,683.064 1618.96,683.064 1619.52,683.064 1620.08,683.064 1620.64,683.064 1621.2,683.064 1621.76,683.064 1622.32,683.064 1622.88,683.064 1623.44,683.064 1624,683.064 1624.56,683.064 1625.11,683.064 1625.67,683.064 1626.23,683.064 1626.79,683.064 1627.35,683.064 1627.91,683.064 1628.47,683.064 1629.03,683.064 1629.59,683.064 1630.15,683.064 1630.71,683.064 1631.27,683.064 1631.83,683.064 1632.39,683.064 1632.94,683.064 1633.5,683.064 1634.06,683.064 1634.62,683.064 1635.18,683.064 1635.74,683.064 1636.3,683.064 1636.86,683.064 1637.42,683.064 1637.98,683.064 1638.54,683.064 1639.1,683.064 1639.66,683.064 1640.21,683.064 1640.77,683.064 1641.33,683.064 1641.89,683.064 1642.45,683.064 1643.01,683.064 1643.57,683.064 1644.13,683.064 1644.69,683.064 1645.25,683.064 1645.81,683.064 1646.37,683.064 1646.93,683.064 1647.48,683.064 1648.04,683.064 1648.6,683.064 1649.16,683.064 1649.72,683.064 1650.28,683.064 1650.84,683.064 1651.4,683.064 1651.96,683.064 1652.52,683.064 1653.08,683.064 1653.64,683.064 1654.2,683.064 1654.76,683.064 1655.31,683.064 1655.87,683.064 1656.43,683.064 1656.99,683.064 1657.55,683.064 1658.11,683.064 1658.67,683.064 1659.23,683.064 1659.79,683.064 1660.35,683.064 1660.91,683.064 1661.47,683.064 1662.03,683.064 1662.58,683.064 1663.14,683.064 1663.7,683.064 1664.26,683.064 1664.82,683.064 1665.38,683.064 1665.94,683.064 1666.5,683.064 1667.06,683.064 1667.62,683.064 1668.18,683.064 1668.74,683.064 1669.3,683.064 1669.85,683.064 1670.41,683.064 1670.97,683.064 1671.53,683.064 1672.09,683.064 1672.65,683.064 1673.21,683.064 1673.77,683.064 1674.33,683.064 1674.89,683.064 1675.45,683.064 1676.01,683.064 1676.57,683.064 1677.13,683.064 1677.68,683.064 1678.24,683.064 1678.8,683.064 1679.36,683.064 1679.92,683.064 1680.48,683.064 1681.04,683.064 1681.6,683.064 1682.16,683.064 1682.72,683.064 1683.28,683.064 1683.84,683.064 1684.4,683.064 1684.95,683.064 1685.51,683.064 1686.07,683.064 1686.63,683.064 1687.19,683.064 1687.75,683.064 1688.31,683.064 1688.87,683.064 1689.43,683.064 1689.99,683.064 1690.55,683.064 1691.11,683.064 1691.67,683.064 1692.23,683.064 1692.78,683.064 1693.34,683.064 1693.9,683.064 1694.46,683.064 1695.02,683.064 1695.58,683.064 1696.14,683.064 1696.7,683.064 1697.26,683.064 1697.82,683.064 1698.38,683.064 1698.94,683.064 1699.5,683.064 1700.05,683.064 1700.61,683.064 1701.17,683.064 1701.73,683.064 1702.29,683.064 1702.85,683.064 1703.41,683.064 1703.97,683.064 1704.53,683.064 1705.09,683.064 1705.65,683.064 1706.21,683.064 1706.77,683.064 1707.32,683.064 1707.88,683.064 1708.44,683.064 1709,683.064 1709.56,683.064 1710.12,683.064 1710.68,683.064 1711.24,683.064 1711.8,683.064 1712.36,683.064 1712.92,683.064 1713.48,683.064 1714.04,683.064 1714.6,683.064 1715.15,683.064 1715.71,683.064 1716.27,683.064 1716.83,683.064 1717.39,683.064 1717.95,683.064 1718.51,683.064 1719.07,683.064 1719.63,683.064 1720.19,683.064 1720.75,683.064 1721.31,683.064 1721.87,683.064 1722.42,683.064 1722.98,683.064 1723.54,683.064 1724.1,683.064 1724.66,683.064 1725.22,683.064 1725.78,683.064 1726.34,683.064 1726.9,683.064 1727.46,683.064 1728.02,683.064 1728.58,683.064 1729.14,683.064 1729.69,683.064 1730.25,683.064 1730.81,683.064 1731.37,683.064 1731.93,683.064 1732.49,683.064 1733.05,683.064 1733.61,683.064 1734.17,683.064 1734.73,683.064 1735.29,683.064 1735.85,683.064 1736.41,683.064 1736.97,683.064 1737.52,683.064 1738.08,683.064 1738.64,683.064 1739.2,683.064 1739.76,683.064 1740.32,683.064 1740.88,683.064 1741.44,683.064 1742,683.064 1742.56,683.064 1743.12,683.064 1743.68,683.064 1744.24,683.064 1744.79,683.064 1745.35,683.064 1745.91,683.064 1746.47,683.064 1747.03,683.064 1747.59,683.064 1748.15,683.064 1748.71,683.064 1749.27,683.064 1749.83,683.064 1750.39,683.064 1750.95,683.064 1751.51,683.064 1752.06,683.064 1752.62,683.064 1753.18,683.064 1753.74,683.064 1754.3,683.064 1754.86,683.064 1755.42,683.064 1755.98,683.064 1756.54,683.064 1757.1,683.064 1757.66,683.064 1758.22,683.064 1758.78,683.064 1759.34,683.064 1759.89,683.064 1760.45,683.064 1761.01,683.064 1761.57,683.064 1762.13,683.064 1762.69,683.064 1763.25,683.064 1763.81,683.064 1764.37,683.064 1764.93,683.064 1765.49,683.064 1766.05,683.064 1766.61,683.064 1767.16,683.064 1767.72,683.064 1768.28,683.064 1768.84,683.064 1769.4,683.064 1769.96,683.064 1770.52,683.064 1771.08,683.064 1771.64,683.064 1772.2,683.064 1772.76,683.064 1773.32,683.064 1773.88,683.064 1774.43,683.064 1774.99,683.064 1775.55,683.064 1776.11,683.064 1776.67,683.064 1777.23,683.064 1777.79,683.064 1778.35,683.064 1778.91,683.064 1779.47,683.064 1780.03,683.064 1780.59,683.064 1781.15,683.064 1781.71,683.064 1782.26,683.064 1782.82,683.064 1783.38,683.064 1783.94,683.064 1784.5,683.064 1785.06,683.064 1785.62,683.064 1786.18,683.064 1786.74,683.064 1787.3,683.064 1787.86,683.064 1788.42,683.064 1788.98,683.064 1789.53,683.064 1790.09,683.064 1790.65,683.064 1791.21,683.064 1791.77,683.064 1792.33,683.064 1792.89,683.064 1793.45,683.064 1794.01,683.064 1794.57,683.064 1795.13,683.064 1795.69,683.064 1796.25,683.064 1796.8,683.064 1797.36,683.064 1797.92,683.064 1798.48,683.064 1799.04,683.064 1799.6,683.064 1800.16,683.064 1800.72,683.064 1801.28,683.064 1801.84,683.064 1802.4,683.064 1802.96,683.064 1803.52,683.064 1804.08,683.064 1804.63,683.064 1805.19,683.064 1805.75,683.064 1806.31,683.064 1806.87,683.064 1807.43,683.064 1807.99,683.064 1808.55,683.064 1809.11,683.064 1809.67,683.064 1810.23,683.064 1810.79,683.064 1811.35,683.064 1811.9,683.064 1812.46,683.064 1813.02,683.064 1813.58,683.064 1814.14,683.064 1814.7,683.064 1815.26,683.064 1815.82,683.064 1816.38,683.064 1816.94,683.064 1817.5,683.064 1818.06,683.064 1818.62,683.064 1819.18,683.064 1819.73,683.064 1820.29,683.064 1820.85,683.064 1821.41,683.064 1821.97,683.064 1822.53,683.064 1823.09,683.064 1823.65,683.064 1824.21,683.064 1824.77,683.064 1825.33,683.064 1825.89,683.064 1826.45,683.064 1827,683.064 1827.56,683.064 1828.12,683.064 1828.68,683.064 1829.24,683.064 1829.8,683.064 1830.36,683.064 1830.92,683.064 1831.48,683.064 1832.04,683.064 1832.6,683.064 1833.16,683.064 1833.72,683.064 1834.27,683.064 1834.83,683.064 1835.39,683.064 1835.95,683.064 1836.51,683.064 1837.07,683.064 1837.63,683.064 1838.19,683.064 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906472","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $target_walkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.03563933133634 ± 0.025136373974651485\nProjected Energy: -4.0124640607660815 ± (0.005640972185731563, 0.005546063779537036)\nExact Energy: -4.021502406906472\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from solve as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b];\n    shift=:shift,\n    norm=:norm,\n    time_step=determine_constant_time_step(df),\n    skip=0\n)\ngrowth_witness(sim::PMCSimulation, [b]; kwargs...)\n\nCalculate the growth witness directly from the result (DataFrame or PMCSimulation) of solveing a ProjectorMonteCarloProblem. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0)\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n)\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\ngrowth_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively.  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m) \n\nwhere dτ is the time_step\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator.  Error propagation is done with MonteCarloMeasurements. Propagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a PMCSimulation or DataFrame returned by solve. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\ngrowth_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df or PMCSimulation sim. repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-Tuple{AbstractVector, AbstractVector, AbstractVector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\nmixed_estimator(sim::PMCSimulation, h; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up).  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.  Additional keyword arguments are passed on to ratio_of_means.\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2), where dτ is the time_step, and potentially increased confidence intervals compared to the unweighted ratio.  Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\nmixed_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(df::DataFrame; skip=0, hproj=:hproj, vproj=:vproj, kwargs...)\nprojected_energy(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy(...) to set these up in ProjectorMonteCarloProblem). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n)\nrayleigh_replica_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin. Additional keyword arguments are passed on to ratio_of_means.\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\nrayleigh_replica_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...)\nshift_estimator(sim::PMCSimulation; kwargs...)\n-> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_lin, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_exp, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\nreplica_fidelity(sim::PMCSimulation; kwargs...)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the PMCSimulation or DataFrame returned by solve, using replicas _1 and _2. Calls ratio_of_means to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\nvariational_energy_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame and PMCSimulation versions can extract the relevant information from the result of solve. Set up the ProjectorMonteCarloProblem with the keyword argument replica_strategy = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.determine_constant_time_step-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.determine_constant_time_step","text":"determine_constant_time_step(df) -> time_step\n\nGiven a DataFrame df, determine the time step that was used to compute it. Throw an error if time step is not constant.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by ProjectorMonteCarloProblem as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallowed_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">0.455993</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">1.4457e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">1.4477e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">9.568e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">1.382e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">2.625e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">8.025e-6</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0-1.41421im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im      0.0-2.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+1.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im\n 0.0-1.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999991\n -0.9999999999999991\n -0.9999999999999982\n -0.9999999999999973\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000027\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n       0.0+0.0im       -5.55112e-17-0.353553im         0.534676-0.217841im      2.77556e-17-0.204124im             0.0+0.0im           0.534676+0.217841im      2.77556e-17+0.204124im             0.0+0.0im       -5.55112e-17+0.353553im           0.0+0.0im\n       0.0+0.0im        5.55112e-17-0.5im             -0.378073+0.154037im              0.0-0.288675im             0.0+0.0im          -0.378073-0.154037im     -5.55112e-17+0.288675im             0.0+0.0im                0.0+0.5im                0.0+0.0im\n       0.0+0.612372im           0.0+0.0im          -5.55112e-17+0.0im           -1.2326e-32+2.77556e-17im          0.0+0.353553im           0.0+0.0im                   0.0+2.77556e-17im          0.0+0.353553im           0.0+0.0im                0.0+0.612372im\n       0.0+0.0im                0.0+0.353553im      5.55112e-17+6.93889e-17im           0.0-0.612372im             0.0+0.0im        5.55112e-17-1.38778e-16im           0.0+0.612372im             0.0+0.0im                0.0-0.353553im           0.0+0.0im\n       0.0-0.353553im    1.2326e-32+1.11022e-16im   5.55112e-17-2.77556e-17im  -2.46519e-32-2.77556e-17im          0.0+0.612372im  -1.11022e-16-2.77556e-17im   4.93038e-32-2.77556e-17im          0.0+0.612372im   -1.2326e-32+8.32667e-17im        0.0-0.353553im\n       0.0+0.0im           0.353553+0.0im                   0.0+0.0im              0.612372+0.0im                  0.0+0.0im                0.0+0.0im              0.612372+0.0im                  0.0+0.0im           0.353553+0.0im                0.0+0.0im\n -0.353553+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.612372+0.0im                0.0+0.0im                   0.0+0.0im             0.612372+0.0im                0.0+0.0im           0.353553+0.0im\n       0.0+0.0im               -0.5+7.02973e-17im     -0.154037-0.378073im         0.288675-1.95105e-16im          0.0+0.0im          -0.154037+0.378073im         0.288675+2.29062e-16im          0.0+0.0im               -0.5-7.48398e-17im        0.0+0.0im\n       0.0+0.0im          -0.353553+8.84171e-17im      0.217841+0.534676im         0.204124-1.1389e-16im   8.32667e-17+0.0im           0.217841-0.534676im         0.204124+2.4427e-16im   8.32667e-17+0.0im          -0.353553-8.31718e-17im        0.0+0.0im\n  0.612372+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.353553-0.0im                0.0+0.0im                   0.0+0.0im             0.353553+0.0im                0.0+0.0im          -0.612372-0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -1.6810327175633306e-17\n  3.469966302164114e-17\n  0.15915494309189535\n  0.1591549430918954\n  0.1591549430918954","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(fs\"|0 0 4 0 0⟩\"; u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 1 0 0 3⟩\"\n fs\"|1 3 0 0 0⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843  0.0       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8        0.0       0.282843  0.565685  0.0       0.0       0.0       0.0\n  0.0       0.8       0.4       0.581966  0.4       0.0       0.4        0.282843  0.565685  0.0       0.69282   0.69282   0.0       0.0\n  0.0       0.4       0.8       0.4       2.81803   0.4       0.0        0.0       0.565685  0.282843  0.69282   0.0       0.69282   0.0\n  0.0       0.8       0.4       0.0       0.4       0.581966  0.4        0.282843  0.565685  0.0       0.0       0.0       0.69282   0.69282\n  0.0       0.4       0.8       0.4       0.0       0.4       2.81803    0.0       0.565685  0.282843  0.0       0.69282   0.0       0.69282\n  0.0       0.565685  0.0       0.282843  0.0       0.282843  0.0       -0.472136  0.8       0.0       0.489898  0.0       0.0       0.489898\n  0.0       0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n  0.0       0.0       0.565685  0.0       0.282843  0.0       0.282843   0.0       0.8       8.47214   0.0       0.489898  0.489898  0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.0       0.0        0.489898  0.489898  0.0       1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.69282    0.0       0.489898  0.489898  0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.69282   0.0        0.0       0.489898  0.489898  0.0       0.0       6.03607   0.0\n  0.0       0.0       0.0       0.0       0.0       0.69282   0.69282    0.489898  0.489898  0.0       0.0       0.0       0.0       1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.9798639983216155\n -3.363124291613371\n -0.7590191922770746\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781396\n  1.530592997097333\n  1.5835732611867464\n  3.072870330325867\n  3.125672653951849\n  4.862107221562182\n  6.26069485038059\n  6.402671211183119\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348     0.175378     0.0135766   -2.81719e-15  -0.0221221  -0.0697193   1.3739e-15    0.0314466   -2.35922e-16  -0.0360987   -0.0161557  -5.55112e-17   0.00625248  -0.0058099\n  0.177701     0.932229     0.105473     3.01009e-14   0.225254   -0.132826    9.71445e-17  -0.00292026  -2.09555e-15  -0.0861158   -0.0907789  -4.996e-16     0.0591715   -0.0264275\n  0.0768085   -0.0622307    0.0129069   -6.06251e-14  -0.447424   -0.63969     2.05322e-14   0.383444    -6.54338e-15  -0.431051    -0.181167   -6.10623e-16   0.0599783   -0.106852\n -0.0214153   -0.175119    -0.20169      0.616673      0.522017   -0.296818   -0.31234      -0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797    0.0693699     0.0495446   0.416847    0.33773       0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153   -0.175119    -0.20169     -0.616673      0.522017   -0.296818    0.31234      -0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797   -0.0693699     0.0495446   0.416847   -0.33773       0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.0138439   -0.165902     0.922758     1.00753e-14   0.1111     -0.172508   -1.30521e-14  -0.207974     2.66454e-15   0.0848902   -0.149153   -8.32667e-16   0.0712921   -0.0301968\n -0.00234782   0.00840544  -0.098969    -9.6867e-15   -0.0847116   0.082999    1.51129e-14   0.274424     3.60822e-15   0.575786    -0.61385    -2.72005e-15   0.353775    -0.259338\n -0.00237613   0.00294196   0.00143189   5.56152e-15   0.0427486   0.0110863  -3.72619e-15  -0.0663108    9.50628e-16   0.00167015   0.0832916   2.91434e-15  -0.448519    -0.8863\n  0.00363555   0.0455298   -0.133824    -0.332825     -0.290831   -0.057199   -0.527627     -0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478   0.0150664    0.0206752   -0.0642658    -0.0638689  -0.0250518   0.0999631    -0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499\n  0.00195478   0.0150664    0.0206752    0.0642658    -0.0638689  -0.0250518  -0.0999631    -0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555   0.0455298   -0.133824     0.332825     -0.290831   -0.057199    0.527627     -0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133606\n -0.7590191922770747","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133672\n -0.7590191922770835\n  0.13584182219622853\n  0.15789998694608975\n  0.876711441178136\n  1.5305929970973233\n  1.5835732611867472\n  3.0728703303258698\n  3.125672653951839\n  4.862107221562172\n  6.260694850380592\n  6.402671211183112\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321621\n -3.3631242916133637\n -0.759019192277076\n  0.1578999869460802\n  0.8767114411781437\n  1.5835732611867417\n  3.125672653951844\n  4.862107221562179\n  6.402671211183117\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.0066861389450877905\n 0.033070399772041625\n 3.9204869225657406\n 0.03307039977204162\n 0.006686138945087839","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html#Model-Hamiltonians","page":"Hamiltonians","title":"Model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardReal1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardReal1D2C","text":"BoseHubbardReal1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0)\n\nImplements a two-component one-dimensional Bose Hubbard chain in real space.\n\nhatH = hatH_a + hatH_b + Vsum_i n_a_in_b_i\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nua: the on-site interaction parameter parameter for Hamiltonian a.\nub: the on-site interaction parameter parameter for Hamiltonian b.\nta: the hopping strength for Hamiltonian a.\ntb: the hopping strength for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nSee also\n\nHubbardReal1D\nBoseHubbardMom1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0, boundary_condition=:periodic)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space. This Hamiltonian can be either real or complex, depending on the choice of boundary_condition.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) +\nv sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\nboundary_condition The following values are supported:\n:periodic: usual period boundary condition realising a ring geometry.\n:hard_wall: hopping over the boundary is not allowed.\n:twisted: like :periodic but hopping over the boundary incurs an additional factor of -1.\nθ <: Number: like :periodic and :twisted but hopping over the boundary incurs a factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left. With this choice the Hamiltonian will have a complex eltype whereas otherwise the eltype is determined by the type of the parameters t, u, and v.\n\nSee also HubbardRealSpace.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2t cos(k)\ncontinuum_dispersion: ϵ_k = tk^2\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardMom1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardMom1D2C","text":"BoseHubbardMom1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0, kwargs...)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with a two-component Bose gas.\n\nhatH = hatH_a + hatH_b + fracVMsum_kpqr b^_r a^_q b_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address.\nua: the u parameter for Hamiltonian a.\nub: the u parameter for Hamiltonian b.\nta: the t parameter for Hamiltonian a.\ntb: the t parameter for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nFurther keyword arguments are passed on to the constructor of HubbardMom1D.\n\nSee also\n\nBoseFS2C\nBoseHubbardReal1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2t cos(k)\ncontinuum_dispersion: ϵ_k = tk^2\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl\n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl\n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between basis states of any noninteracting energy level, leading to many more offdiagonals and fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The   allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make   the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the   interactions. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without   comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, see four_oscillator_integral_general, with the additional restriction that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to   make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi\n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix representation of this Hamiltonian for a single particle is completely dense in the even-parity subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty   for a 1D trap or contain values greater than 1.0. The maximum index   in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,   including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if   only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of\nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other","page":"Hamiltonians","title":"Other","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of ProjectorMonteCarloProblem() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(k)\n\nDispersion relation for HubbardMom1D. Returns -2cos(k).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(k)\n\nDispersion relation for HubbardMom1D. Returns k^2.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(fs\"|0 2 1⟩\"; u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Observables are AbstractHamiltonians that represent a physical observable. Their ground state expectation values can be sampled by passing them into AllOverlaps.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"ParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator([address]) <: AbstractHamiltonian\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. Passing an address is optional.\n\njulia> h = FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3); bsr = BasisSetRepresentation(h);\n\njulia> gs = DVec(zip(bsr.basis, eigen(Matrix(bsr)).vectors[:,1])); # ground state\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractHamiltonian{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int,c=:cross) <: AbstractHamiltonian{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d of a two component system in a momentum-space Fock-state basis. It returns a Complex value.\n\nCorrelation across two components:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s b^_p  b_q a_r δ_s+pq+r\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\nc: possible instructions: :cross: default instruction, computing correlation between particles across two components; :first: computing correlation between particles within the first component; :second: computing correlation between particles within the second component. These are the only defined instructions, using anything else will produce errors.\n\nTo use on a one-component system\n\nFor a system with only one component, e.g. with BoseFS, the second argument c is irrelevant and can be any of the above instructions, one could simply skip this argument and let it be the default value.\n\nSee also\n\nBoseHubbardMom1D2C\nBoseFS2C\nG2RealCorrelator\nG2RealSpace\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into ProjectorMonteCarloProblem with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractHamiltonian, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    hatC_textstring(d) = frac1M sum_j^M delta n_j (e^i pi sum_j leq k  j + d delta n_k) delta n_j+d\n\nHere, delta hatn_j = hatn_j - barn is the boson number deviation from the mean filling number and barn = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractHamiltonian, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SingleParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.SingleParticleExcitation","text":"SingleParticleExcitation(i, j) <: AbstractHamiltonian\n\nRepresent the ij element of the single-particle reduced density matrix:\n\nhatρ^(1)_ij = hat a^_i hat a_j\n\nwhere i <: Int and j <: Int specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nTwoParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TwoParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.TwoParticleExcitation","text":"TwoParticleExcitation(i, j, k, l) <: AbstractHamiltonian\n\nRepresent the ij kl element of the two-particle reduced density matrix:\n\nhatρ^(2)_ij kl =  hat a^_i hat a^_j hat a_l hat a_k \n\nwhere i, j, k, and l (all <: Int) specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator hatp.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(add => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(add => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(add => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Hamiltonians-interface","page":"Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. The most general form of a model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with ProjectorMonteCarloProblem). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallowed_address_type(h::AbstractHamiltonian): defaults to typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.starting_address","page":"Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, add, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address add and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallowed_address_type","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, add)\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address add of the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRep.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.allowed_address_type","page":"Hamiltonians","title":"Rimu.Interfaces.allowed_address_type","text":"allowed_address_type(h::AbstractHamiltonian)\n\nReturn the type of addresses that can be used with Hamiltonian h.\n\nPart of the AbstractHamiltonian interface.\n\nDefaults to typeof(starting_address(h)). Overload this function if the Hamiltonian can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"hamiltonians.html#Base.adjoint","page":"Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractHamiltonian)\n\nRepresent the adjoint of an AbstractHamiltonian. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.dot","page":"Hamiltonians","title":"LinearAlgebra.dot","text":"dot(map::OccupiedModeMap, vec::AbstractVector)\ndot(map1::OccupiedModeMap, map2::OccupiedModeMap)\n\nDot product extracting mode occupation numbers from an OccupiedModeMap similar to onr.\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> dot(mb, 1:7)\n27\n\njulia> mb⋅(1:7) == onr(b)⋅(1:7)\ntrue\n\nSee also SingleComponentFockAddress.\n\n\n\n\n\ndot(w, op::AbstractHamiltonian, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\ndot(y::PDVec, A::AbstractHamiltonian, x::PDVec[, w::PDWorkingMemory])\n\nPerform y ⋅ A ⋅ x. The working memory w is required to facilitate threaded/distributed operations with non-diagonal A. If needed and not passed a new instance will be allocated. A can be replaced with a tuple of operators.\n\nSee PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractHamiltonian, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allowed_address_type.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here for HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Harmonic-Oscillator","page":"Hamiltonians","title":"Harmonic Oscillator","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim}; \n    target_energy = nothing, \n    max_energy = nothing, \n    max_blocks = nothing, \n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns \n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRep\nindices: tuple of mode indices that allow recreation of the generating address    addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when    the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating    tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved    after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.    Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds  addr are determined by parity. In this case the blocks are not generated; t_basis  will be zero, and block_size will be an estimate. Pass the seed addresses to  BasisSetRep with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis  indices n_xn_yldots. These indices are bounded by S which is a  tuple of the maximum number of states in each dimension. By default the  groundstate in each dimension is indexed by 0, but this can be changed  by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions,\n\n    mathcalI(ijkl) = int_-infty^infty dx \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function, and is non-zero unless i+j+k+l is odd. See e.g. Titchmarsh (1948). This is a generalisation of the closed form in Papenbrock (2002), which is is the special case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin,\n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state corresponds to a D-tuple of harmonic oscillator indices mathbfn_i. S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of phi_i(0) to speed-up the calculation. The values can be calculated with log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"RMPI.html#Module-RMPI","page":"RMPI","title":"Module RMPI","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI","category":"page"},{"location":"RMPI.html#Rimu.RMPI","page":"RMPI","title":"Rimu.RMPI","text":"Module for providing MPI functionality for Rimu. This module is unexported. To use it, run\n\nusing Rimu.RMPI\n\n\n\n\n\n","category":"module"},{"location":"RMPI.html#MPIData","page":"RMPI","title":"MPIData","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIData","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIData","page":"RMPI","title":"Rimu.RMPI.MPIData","text":"MPIData(data; kwargs...)\n\nWrapper used for signaling that this data is part of a distributed data structure and communication should happen with MPI. MPIData can generally be used where an AbstractDVec would be used otherwise. Unlike AbstractDVecs, MPIData does not support indexing, or iteration over keys, values, and pairs.\n\nKeyword arguments:\n\nsetup = mpi_point_to_point - controls the communication stratgy\nmpi_one_sided uses one-sided communication with remote memory access (RMA), sets MPIOneSided strategy.\nmpi_point_to_point uses MPIPointToPoint strategy.\nmpi_all_to_all uses MPIAllToAll strategy.\nmpi_no_exchange sets MPINoWalkerExchange strategy. Experimental. Use with caution!\ncomm = mpi_comm()\nroot = mpi_root\nThe rest of the keyword arguments are passed to setup.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Setup-functions","page":"RMPI","title":"Setup functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"The following distribute strategies are available. The functions are unexported.","category":"page"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.mpi_point_to_point\nRimu.RMPI.mpi_one_sided\nRimu.RMPI.mpi_all_to_all\nRimu.RMPI.mpi_no_exchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_point_to_point","page":"RMPI","title":"Rimu.RMPI.mpi_point_to_point","text":"mpi_point_to_point(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to point-to-point.\n\nSets up the MPIData structure with MPIPointToPoint strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_one_sided","page":"RMPI","title":"Rimu.RMPI.mpi_one_sided","text":"mpi_one_sided(data, comm = mpi_comm(), root = mpi_root; capacity)\n\nDeclare data as mpi-distributed and set communication strategy to one-sided with remote memory access (RMA). capacity sets the capacity of the RMA windows.\n\nSets up the MPIData structure with MPIOneSided strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_all_to_all","page":"RMPI","title":"Rimu.RMPI.mpi_all_to_all","text":"mpi_all_to_all(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to all-to-all.\n\nSets up the MPIData structure with MPIAllToAll strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_no_exchange","page":"RMPI","title":"Rimu.RMPI.mpi_no_exchange","text":"mpi_no_exchange(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to MPINoWalkerExchange. Sets up the MPIData structure with MPINoWalkerExchange strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Strategies","page":"RMPI","title":"Strategies","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIPointToPoint\nRimu.RMPI.MPIOneSided\nRimu.RMPI.MPIAllToAll\nRimu.RMPI.MPINoWalkerExchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIPointToPoint","page":"RMPI","title":"Rimu.RMPI.MPIPointToPoint","text":"MPIPointToPoint{N,A}\n\nPoint-to-point communication strategy. Uses circular communication using MPI.Send and MPI.Recv!.\n\nConstructor\n\nMPIPointToPoint(::Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIOneSided","page":"RMPI","title":"Rimu.RMPI.MPIOneSided","text":"MPIOneSided(nprocs, myrank, comm, ::Type{T}, capacity)\n\nCommunication buffer for use with MPI one-sided communication (remote memory access). Up to capacity elements of type T can be exchanged between MPI ranks via put. It is important that isbitstype(T) == true. Objects of type MPIOneSided have to be freed manually with a (blocking) call to free().\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIAllToAll","page":"RMPI","title":"Rimu.RMPI.MPIAllToAll","text":" MPIAllToAll\n\nAll-to-all communication strategy. The communication works in two steps: first MPI.Alltoall! is used to communicate the number of walkers each rank wants to send to other ranks, then MPI.Alltoallv! is used to send the walkers around.\n\nConstructor\n\nMPIAllToAll(Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPINoWalkerExchange","page":"RMPI","title":"Rimu.RMPI.MPINoWalkerExchange","text":"MPINoWalkerExchange(nprocs, my_rank, comm)\n\nStrategy for not exchanging walkers between ranks. Consequently there will be no cross-rank annihilations.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#MPI-convenience-functions","page":"RMPI","title":"MPI convenience functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Modules = [Rimu.RMPI]\nPages = [\"helpers.jl\"]\nPrivate = true\nPublic = true","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_root","page":"RMPI","title":"Rimu.RMPI.mpi_root","text":"Default MPI root for RMPI.\n\n\n\n\n\n","category":"constant"},{"location":"RMPI.html#Rimu.DictVectors.mpi_comm-Tuple{}","page":"RMPI","title":"Rimu.DictVectors.mpi_comm","text":"Default MPI communicator for RMPI.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.DictVectors.mpi_rank","page":"RMPI","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.DictVectors.mpi_size","page":"RMPI","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.is_mpi_root","page":"RMPI","title":"Rimu.RMPI.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_allprintln-Tuple","page":"RMPI","title":"Rimu.RMPI.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_barrier","page":"RMPI","title":"Rimu.RMPI.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_combine_walkers!-Tuple{Rimu.RMPI.MPIData, AbstractDVec}","page":"RMPI","title":"Rimu.RMPI.mpi_combine_walkers!","text":"mpi_combine_walkers!(target, source, [strategy])\n\nDistribute the entries of source to the target data structure such that all entries in the target are on the process with the correct mpi rank as controlled by targetrank(). MPI syncronizing.\n\nNote: the storage of the source is communicated rather than the source itself.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_seed!","page":"RMPI","title":"Rimu.RMPI.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.next_mpiID","page":"RMPI","title":"Rimu.RMPI.next_mpiID","text":"next_mpiID()\n\nProduce a new ID number for MPI distributed objects. Uses an internal counter.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.targetrank-Tuple{Union{Integer, AbstractFockAddress}, Any}","page":"RMPI","title":"Rimu.RMPI.targetrank","text":"targetrank(key, np)\n\nCompute the rank where the key belongs.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.@mpi_root-Tuple","page":"RMPI","title":"Rimu.RMPI.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"RMPI.html#Index","page":"RMPI","title":"Index","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Pages   = [\"RMPI.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nnnzs = 0: The number of non-zero elements in the basis set representation. Setting a   non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^6, nnzs, cutoff, filter, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 3 and 9 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int64} with 9 stored entries:\n  0.0  -1.0  -1.0\n -1.0   0.0  -1.0\n -1.0  -1.0   0.0\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 2 and 4 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int64} with 4 stored entries:\n  0.0  -1.0\n -1.0   0.0\n\njulia> using LinearAlgebra; round.(eigvals(Matrix(bsr)); digits = 4) # eigenvalues\n3-element Vector{Float64}:\n -2.0\n  1.0\n  1.0\n\njulia> ev = eigvecs(Matrix(bsr))[:,1]; ev = ev .* sign(ev[1]) # ground state eigenvector\n3-element Vector{Float64}:\n 0.5773502691896257\n 0.5773502691896255\n 0.5773502691896257\n\njulia> dv = DVec(zip(bsr.basis, ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => 0.57735\n  fs\"|0 1 0⟩\" => 0.57735\n  fs\"|1 0 0⟩\" => 0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. A maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nSetting sort to true will sort the basis. Any additional keyword arguments are passed on to Base.sort!.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"randomnumbers.html#Random-numbers-in-Rimu","page":"Random numbers","title":"Random numbers in Rimu","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"Rimu uses Julia's built-in random number generator, which currently defaults to Xoshiro256++.","category":"page"},{"location":"randomnumbers.html#Reproducibility","page":"Random numbers","title":"Reproducibility","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"If you want FCIQMC runs to be reproducible, make sure to seed the RNG with Random.seed!.","category":"page"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"MPI-distributed runs can also be made reproducible by seeding the RNG with Rimu.RMPI.mpi_seed!.","category":"page"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://joachimbrand.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for  parsing by Literate. The process of generating  documentation is automated in the docs/make.jl file and assumes that the following line is  at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example, ","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, value = hopnextneighbour(add, chosen, boundary_condition)\n\nCompute the new address of a hopping event for the Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes multiplied by a term consistent with boundary condition as the value.  The following boundary conditions are supported:\n\n:periodic: hopping over the boundary gives does not change the value.\n:twisted: hopping over the boundary flips the sign of the value.\n:hard_wall: hopping over the boundary gives a value of zero.\nθ <: Number: hopping over the boundary gives a value multiplied by exp(iθ) or exp(iθ) depending on the direction of hopping.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :twisted)\n(BoseFS{2,3}(2, 0, 0), -1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :hard_wall)\n(BoseFS{2,3}(2, 0, 0), 0.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, π/4)\n(BoseFS{2,3}(2, 0, 0), 1.0000000000000002 + 1.0im)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS2C","text":"BoseFS2C{NA,NB,M,AA,AB} <: AbstractFockAddress\nBoseFS2C(onr_a, onr_b)\n\nAddress type that constructed with two BoseFS{N,M,S}. It represents a Fock state with two components, e.g. two different species of bosons with particle number NA from species S and particle number NB from species B. The number of modes M is expected to be the same for both components.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, Tuple{Vararg{Int64, var\"#s61\"}} where var\"#s61\", Tuple{Vararg{Int64, var\"#s5\"}} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.12.1. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(num_replicas=2; operator=nothing, transform=nothing, vecnorm=true) <: ReplicaStrategy{num_replicas}\n\nRun num_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee ProjectorMonteCarloProblem, ReplicaStrategy and AbstractHamiltonian (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to ProjectorMonteCarloProblem then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep time_step constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; target_walkers = 1_000) <: ShiftStrategy\n\nDon't update the shift.  Return when target_walkers is reached.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in ProjectorMonteCarloProblem is advised as the default may not be appropriate.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; target_walkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, time_step) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian, dτ the time_step and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt{S} <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nThis will work with MPIData.\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to ProjectorMonteCarloProblem. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates.\n\nIndexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nSee also ReplicaStrategy, SpectralState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to ProjectorMonteCarloProblem and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_reporting_strategy\nreport!\nreport_after_step!\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to ProjectorMonteCarloProblem or to FCIQMC.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in ProjectorMonteCarloProblem()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, walltime = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the walltime is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with advance!.\n\nSee also SpectralState, SpectralStrategy, ReplicaState, ReplicaStrategy, replica_stats, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several SingleStates representing the ground state and excited states of a single replica.\n\nIndexing the SpectralState state[i] returns the ith SingleState.\n\nSee also SpectralStrategy, ReplicaState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_time_step(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, shift_strategy)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Tuple, Tuple{Vararg{AbstractDVec, N}}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators. This function is overloaded for MPIData. The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main ProjectorMonteCarloProblem loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in solve! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> address = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(address);\n\njulia> df1, state = lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 9)\n\njulia> size(df2)\n(200, 9)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(fs\\\"|1 2 3⟩\\\"; u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; target_walkers=targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.target_walkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from ProjectorMonteCarloProblem, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before ProjectorMonteCarloProblem exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{R}, Tuple{S}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{S, R}, Any, Any}} where {S, R}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 1.6, 1.6, 0.4, 0.4)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an AbstractMatrix of configuration vectors from the state. The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also SingleState, ReplicaState, SpectralState, PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.update_time_step-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_time_step","text":"update_time_step(s<:TimeStepStrategy, time_step, tnorm) -> new_time_step\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#RMPI","page":"API","title":"RMPI","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module RMPI","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by ProjectorMonteCarloProblem when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of ProjectorMonteCarloProblem, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with ProjectorMonteCarloProblem, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI. MPI is a standard for parallel and distributed computing, and it is widely used in high-performance computing. Rimu provides support for MPI to enable parallel computations on multiple nodes.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with 2 MPI ranks with mpirun -n 2 julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu and Rimu.RMPI, which contains MPI-related functionality.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu\nusing Rimu.RMPI","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum, which is located at mode 5 in the momentum grid. We put all 10 particles, all in the zero momentum mode.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(fs\"|0 0 0 0 10 0 0 0 0 0⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for MPI calculations, as they will typically run non-interactively. The reports will be written to disk and can be inspected later. This has the additional benefit of reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The default settings will ensure that only the root MPI rank will write to the file, which is reasonable, and that data is saved in chunks of 1000 time steps. We choose to suppress progress messages with setting io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"For running parallel computations with MPI, it is important that a compatible state vector is used. Here we explicitly set up an MPI-enabled state vector, PDVec, which is automatically MPI-distributed over the available number of MPI ranks. In addition, threading will be used with all threads available to Julia.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10000 walkers and for 10000 time steps. We will also compute the projected energy by passing a ProjectedEnergy object as a post_step_strategy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"problem = ProjectorMonteCarloProblem(H;\n    start_at=initial_vector,\n    reporting_strategy,\n    post_step_strategy=ProjectedEnergy(H, initial_vector),\n    target_walkers=10_000,\n    time_step=1e-4,\n    last_step=10_000\n);","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"simulation = solve(problem);\n\n@mpi_root println(\"Simulation success = \", simulation.success)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Simulation success = true\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Once the calculation is done, the results are available in the arrow file on disk.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In a typical workflow, the simulation results would be loaded from disk and analysed in the REPL or with a separate script. The arrow file can be loaded into a DataFrame with metadata using the load_df function.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. ProjectorMonteCarloProblem, ExactDiagonalizationProblem.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary. Additional MPI-related functionality is provided by the module RMPI.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with ProjectorMonteCarloProblem and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with ProjectorMonteCarloProblem and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and AllToAll when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nSee also PDWorkingMemory.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> scale!(pv, -1); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce!.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded and MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface.jl\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\nIf dv is an MPIData, synchronize its contents among the ranks first.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(md::MPIData)\n\nCompute the walkernumber of the distributed data on every MPI rank with MPI.Allreduce. MPI syncronizing.\n\n\n\n\n\nwalkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.dot_from_right","page":"Dict vectors","title":"Rimu.DictVectors.dot_from_right","text":"dot_from_right(w, op::AbstractHamiltonian, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in ProjectorMonteCarloProblem.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.FirstColumnIterator","page":"Dict vectors","title":"Rimu.DictVectors.FirstColumnIterator","text":"FirstColumnIterator{W,D} <: AbstractVector{D}\n\nIterates segments in the first column of a working memory that belong to a specified rank.\n\nSee PDWorkingMemory, remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured as a two-dimensional array of segments, which themselves are Dicts (see PDVec). The number of rows in this array is equal to the number of segments across all MPI ranks (covering the entire address space), while the number of columns corresponds to the number of segments in the current MPI rank (i.e. column corresponds to the part of the address space that is local to the current rank).\n\nThe purpose of this organisation is to allow spawning in parallel without using locks or atomic operations. The spawning is performed by applying the following sequence of operations:\n\nperform_spawns!: each segment in the PDVec is multiplied by the operator independently, with the results being stored in a column of the working memory.\ncollect_local!: the rows of the working memory are summed to the first column.\nsynchronize_remote!: the segments corresponding to other MPI ranks are distributed and transferred to the first column.\nmove_and_compress!: the results are stochastically compressed and moved to the result PDVec\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports getindex, deposit! and StochasticStyle and acts as a target for spawning. Can be used as a target in a three-way dot-product.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nSum each row in w and store the result in the first column. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.first_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.first_column","text":"first_column(::PDWorkingMemory)\n\nReturn the first column of the working memory. This is where the vectors are collected with collect_local!, synchronize_remote!, copy_to_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the segments in the first column of w on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local MPI rank.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all MPI ranks.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, v::PDVec, ham, boost)\n\nPerform spawns from v through ham to w. boost increases the number of spawns without affecting the expectation value of the process.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the segments in the first column of w that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] w::PDWorkingMemory) -> names, values\n\nSynchronize non-local segments across MPI and add the results to the first column. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nShould return a Tuple of names and a Tuple of values to report.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AllToAll","page":"Dict vectors","title":"Rimu.DictVectors.AllToAll","text":"AllToAll{K,V}(; mpi_comm, n_segments, report) <: Communicator\n\nCommunicator that uses collective communication using MPI.Alltoall[v]!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nn_segments=Threads.nthreads(): the number of segments per rank to use. Should match the PDVec the communicator is used with.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, three implementations are provided, NotDistributed, AllToAll and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\nSee also: PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NestedSegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.NestedSegmentedBuffer","text":"NestedSegmentedBuffer{T}(nrows) <: AbstractMatrix{AbstractVector{T}}\n\nMatrix of vectors stored in a single buffer with collective MPI communication support. The number of rows in the matrix is fixed to nrows.\n\nUsed in the AllToAll communication strategy, where each column corresponds to an MPI rank and each row corresponds to a segment in the PDVec.\n\nSupported operations\n\nappend_collections!: add a column to the matrix.\nappend_empty_column!: add an empty column to the matrix.\nmpi_exchange_alltoall!: each rank sends the i-th column of the matrix to the (i-1)-st rank.\nmpi_exchange_allgather!: each rank sends the 1-st column of the matrix to all ranks.\n\nSee also: SegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint{K,V}(; mpi_comm, report) <: Communicator\n\nMPI Communicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer{T}() <: AbstractVector{AbstractVector{T}}\n\nBehaves like a vector of vectors, but is stored in a single buffer. It can be sent/received over MPI keeping its structure intact. Used in the PointToPoint communication strategy.\n\nSupported operations\n\nreplace_collections!: insert data into the buffers\nmpi_send: send the contents of a buffer to a given rank\nmpi_recv_any!: receive a message sent by mpi_send from any rank, storing the contents in this buffer\n\nSee also: NestedSegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.append_collections!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.append_collections!","text":"append_collections!(buf::NestedSegmentedBuffer, iters)\n\nAdd a column to buf. The length of iters should match buf.nrows.\n\nSee also: NestedSegmentedBuffer, append_empty_column!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.append_empty_column!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer}","page":"Dict vectors","title":"Rimu.DictVectors.append_empty_column!","text":"append_empty_column!(buf::NestedSegmentedBuffer)\n\nLike append_collections!, but adds an empty column.\n\nSee also: NestedSegmentedBuffer, append_collections!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as a (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\nSee also: PDVec, PDWorkingMemory, Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if Communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_comm","page":"Dict vectors","title":"Rimu.DictVectors.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_allgather!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_allgather!","text":"mpi_exchange_allgather!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe first and only column in src will be sent to all ranks. The data from all ranks will be gethered in dst. After this operation, dst will contain the same data on all ranks.\n\nSee also NestedSegmentedBuffer, mpi_exchange_alltoall!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_alltoall!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_alltoall!","text":"mpi_exchange_alltoall!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe n-th column from src will be sent to rank n-1. The data sent from rank r will be stored in the (r+1)-st column of dst.\n\nSee also: NestedSegmentedBuffer, mpi_exchange_allgather!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_rank","page":"Dict vectors","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm::MPI_Comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm::MPI.Comm)\n\nSend the buffer to rank with id dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_size","page":"Dict vectors","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into a SegmentedBuffer.\n\njulia> using Rimu.DictVectors: SegmentedBuffer\n\njulia> buf = SegmentedBuffer{Int}()\n0-element SegmentedBuffer{Int64}\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1,2,3], [4,5]])\n2-element SegmentedBuffer{Int64}:\n [1, 2, 3]\n [4, 5]\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1], [2,3], [4]])\n3-element SegmentedBuffer{Int64}:\n [1]\n [2, 3]\n [4]\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored. If the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"}]
}
