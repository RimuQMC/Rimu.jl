var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Rimu includes an unexported module RMPI, which must be imported to access additional MPI-related functionality.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"using Rimu.RMPI\nmpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"projectormontecarlo.html#Projector-Monte-Carlo-/-FCIQMC","page":"Projector Monte Carlo","title":"Projector Monte Carlo / FCIQMC","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The purpose of Projector Monte Carlo is to stochastically sample the ground state, i.e. the  eigenvector corresponding to the lowest eigenvalue of a quantum Hamiltonian, or more generally,  a very large matrix. Rimu implements a flavor of Projector Monte Carlo called  Full Configuration Interaction Quantum Monte Carlo (FCIQMC).","category":"page"},{"location":"projectormontecarlo.html#ProjectorMonteCarloProblem","page":"Projector Monte Carlo","title":"ProjectorMonteCarloProblem","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"To run a projector Monte Carlo simulation you set up a problem with ProjectorMonteCarloProblem and solve it with solve. Alternatively you can initialize a PMCSimulation struct, step!  through time steps, and solve! it to completion. ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"ProjectorMonteCarloProblem\ninit\nsolve\nsolve!\nstep!","category":"page"},{"location":"projectormontecarlo.html#Rimu.ProjectorMonteCarloProblem-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html#CommonSolve.init-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\ninit(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.step!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"After solve or solve! have been called the returned PMCSimulation contains the results of  the projector Monte Carlo calculation.","category":"page"},{"location":"projectormontecarlo.html#PMCSimulation-and-report-as-a-DataFrame","page":"Projector Monte Carlo","title":"PMCSimulation and report as a DataFrame","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Rimu.PMCSimulation","category":"page"},{"location":"projectormontecarlo.html#Rimu.PMCSimulation-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The DataFrame returned from DataFrame(::PMCSimulation) contains the time series data from  the projector Monte Carlo simulation that is of primary interest for analysis. Depending on the  reporting_strategy and other options passed as keyword arguments to  ProjectorMonteCarloProblem it can have different numbers of rows and columns. The rows  correspond to the reported time steps (Monte Carlo steps). There is at least one column with the name :step. Further columns are usually present with additional data reported from the simulation.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"For the default option algorithm = FCIQMC(; shift_strategy, time_step_strategy) with a single replica (n_replicas = 1) and single spectral state, the fields :shift, :norm, :len will  be present as well as others depending on the style argument and the post_step_strategy.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"If multiple replicas or spectral states are requested, then the relevant field names in the  DataFrame will have a suffix identifying the respective replica simulation, e.g. the shifts will be reported as shift_1, shift_2, ... ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Many tools for analysing the time series data obtained from a  ProjectorMonteCarloProblem are contained in the Module StatsTools.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"num_replicas = 3\nreplica_strategy = AllOverlaps(num_replicas; operator = G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntarget_walkers = 100;\ntime_step = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"problem = ProjectorMonteCarloProblem(H;\n    style=IsDynamicSemistochastic(),\n    time_step,\n    last_step = steps_equilibrate + steps_measure,\n    target_walkers,\n    replica_strategy,\n)\nresult = solve(problem)\ndf = DataFrame(result);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $num_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.2112697332731342 ± 0.0031189380770533168\n   G2(1) = 0.9185993812592198 ± 0.0012014800674317327\n   G2(2) = 0.9805389596693134 ± 0.0008378820135531874\n   G2(3) = 0.9904535848697994 ± 0.0009642146504964042\n   G2(4) = 0.9805389596693134 ± 0.0008378820135531874\n   G2(5) = 0.9185993812592198 ± 0.0012014800674317327\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $num_replicas replicas:\")\nfor i in 1:num_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -4.031150509836695 ± 0.12290875416807971\n   Replica 2: -4.05859517525248 ± 0.14166967036566488\n   Replica 3: -3.922087126104753 ± 0.148730523639956\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"target_walkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    target_walkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [target_walkers];\n    label=\"target_walkers\", xlabel=\"step\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.step, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip210\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip210)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip211\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip210)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip212\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip212)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip212)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip212)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip212)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip210)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip210)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip210)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip210)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip210)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip210)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M1266.04 1391.71 L1266.04 1397.25 Q1263.56 1395.98 1260.88 1395.34 Q1258.21 1394.71 1255.34 1394.71 Q1250.98 1394.71 1248.79 1396.04 Q1246.62 1397.38 1246.62 1400.05 Q1246.62 1402.09 1248.18 1403.27 Q1249.74 1404.41 1254.45 1405.46 L1256.46 1405.91 Q1262.7 1407.25 1265.31 1409.7 Q1267.95 1412.12 1267.95 1416.48 Q1267.95 1421.44 1264 1424.34 Q1260.09 1427.23 1253.21 1427.23 Q1250.35 1427.23 1247.23 1426.66 Q1244.14 1426.12 1240.7 1425.01 L1240.7 1418.96 Q1243.95 1420.65 1247.1 1421.51 Q1250.25 1422.33 1253.34 1422.33 Q1257.48 1422.33 1259.7 1420.93 Q1261.93 1419.5 1261.93 1416.92 Q1261.93 1414.54 1260.31 1413.26 Q1258.72 1411.99 1253.27 1410.81 L1251.24 1410.33 Q1245.79 1409.19 1243.38 1406.83 Q1240.96 1404.45 1240.96 1400.31 Q1240.96 1395.28 1244.52 1392.54 Q1248.09 1389.8 1254.64 1389.8 Q1257.89 1389.8 1260.75 1390.28 Q1263.62 1390.76 1266.04 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M1283.07 1380.54 L1283.07 1390.66 L1295.13 1390.66 L1295.13 1395.22 L1283.07 1395.22 L1283.07 1414.57 Q1283.07 1418.93 1284.24 1420.17 Q1285.45 1421.41 1289.11 1421.41 L1295.13 1421.41 L1295.13 1426.31 L1289.11 1426.31 Q1282.33 1426.31 1279.76 1423.8 Q1277.18 1421.25 1277.18 1414.57 L1277.18 1395.22 L1272.88 1395.22 L1272.88 1390.66 L1277.18 1390.66 L1277.18 1380.54 L1283.07 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M1333.32 1407.02 L1333.32 1409.89 L1306.4 1409.89 Q1306.78 1415.94 1310.02 1419.12 Q1313.3 1422.27 1319.13 1422.27 Q1322.5 1422.27 1325.65 1421.44 Q1328.84 1420.61 1331.95 1418.96 L1331.95 1424.5 Q1328.8 1425.83 1325.49 1426.53 Q1322.18 1427.23 1318.78 1427.23 Q1310.25 1427.23 1305.25 1422.27 Q1300.29 1417.3 1300.29 1408.84 Q1300.29 1400.08 1305 1394.96 Q1309.74 1389.8 1317.76 1389.8 Q1324.95 1389.8 1329.12 1394.45 Q1333.32 1399.07 1333.32 1407.02 M1327.47 1405.3 Q1327.4 1400.5 1324.76 1397.63 Q1322.15 1394.77 1317.82 1394.77 Q1312.92 1394.77 1309.96 1397.54 Q1307.03 1400.31 1306.59 1405.34 L1327.47 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M1348.6 1420.96 L1348.6 1439.87 L1342.71 1439.87 L1342.71 1390.66 L1348.6 1390.66 L1348.6 1396.07 Q1350.45 1392.89 1353.25 1391.36 Q1356.08 1389.8 1360 1389.8 Q1366.49 1389.8 1370.53 1394.96 Q1374.6 1400.12 1374.6 1408.52 Q1374.6 1416.92 1370.53 1422.08 Q1366.49 1427.23 1360 1427.23 Q1356.08 1427.23 1353.25 1425.71 Q1350.45 1424.15 1348.6 1420.96 M1368.53 1408.52 Q1368.53 1402.06 1365.85 1398.4 Q1363.21 1394.71 1358.56 1394.71 Q1353.92 1394.71 1351.24 1398.4 Q1348.6 1402.06 1348.6 1408.52 Q1348.6 1414.98 1351.24 1418.67 Q1353.92 1422.33 1358.56 1422.33 Q1363.21 1422.33 1365.85 1418.67 Q1368.53 1414.98 1368.53 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip212)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1260.85 2211.02,1260.85 \"/>\n<polyline clip-path=\"url(#clip212)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1002.76 2211.02,1002.76 \"/>\n<polyline clip-path=\"url(#clip212)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,744.666 2211.02,744.666 \"/>\n<polyline clip-path=\"url(#clip212)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,486.572 2211.02,486.572 \"/>\n<polyline clip-path=\"url(#clip212)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,228.479 2211.02,228.479 \"/>\n<polyline clip-path=\"url(#clip210)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip210)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1260.85 423.181,1260.85 \"/>\n<polyline clip-path=\"url(#clip210)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1002.76 423.181,1002.76 \"/>\n<polyline clip-path=\"url(#clip210)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,744.666 423.181,744.666 \"/>\n<polyline clip-path=\"url(#clip210)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,486.572 423.181,486.572 \"/>\n<polyline clip-path=\"url(#clip210)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,228.479 423.181,228.479 \"/>\n<path clip-path=\"url(#clip210)\" d=\"M356.339 1246.65 Q352.728 1246.65 350.899 1250.22 Q349.094 1253.76 349.094 1260.89 Q349.094 1267.99 350.899 1271.56 Q352.728 1275.1 356.339 1275.1 Q359.973 1275.1 361.779 1271.56 Q363.608 1267.99 363.608 1260.89 Q363.608 1253.76 361.779 1250.22 Q359.973 1246.65 356.339 1246.65 M356.339 1242.95 Q362.149 1242.95 365.205 1247.55 Q368.284 1252.14 368.284 1260.89 Q368.284 1269.61 365.205 1274.22 Q362.149 1278.8 356.339 1278.8 Q350.529 1278.8 347.45 1274.22 Q344.395 1269.61 344.395 1260.89 Q344.395 1252.14 347.45 1247.55 Q350.529 1242.95 356.339 1242.95 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M290.043 1016.1 L306.363 1016.1 L306.363 1020.04 L284.418 1020.04 L284.418 1016.1 Q287.08 1013.35 291.664 1008.72 Q296.27 1004.07 297.451 1002.72 Q299.696 1000.2 300.576 998.465 Q301.478 996.706 301.478 995.016 Q301.478 992.261 299.534 990.525 Q297.613 988.789 294.511 988.789 Q292.312 988.789 289.858 989.553 Q287.427 990.317 284.65 991.868 L284.65 987.146 Q287.474 986.011 289.927 985.433 Q292.381 984.854 294.418 984.854 Q299.789 984.854 302.983 987.539 Q306.177 990.224 306.177 994.715 Q306.177 996.845 305.367 998.766 Q304.58 1000.66 302.474 1003.26 Q301.895 1003.93 298.793 1007.15 Q295.691 1010.34 290.043 1016.1 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M316.224 985.479 L334.58 985.479 L334.58 989.414 L320.506 989.414 L320.506 997.886 Q321.524 997.539 322.543 997.377 Q323.562 997.192 324.58 997.192 Q330.367 997.192 333.747 1000.36 Q337.126 1003.53 337.126 1008.95 Q337.126 1014.53 333.654 1017.63 Q330.182 1020.71 323.862 1020.71 Q321.687 1020.71 319.418 1020.34 Q317.173 1019.97 314.765 1019.23 L314.765 1014.53 Q316.849 1015.66 319.071 1016.22 Q321.293 1016.78 323.77 1016.78 Q327.774 1016.78 330.112 1014.67 Q332.45 1012.56 332.45 1008.95 Q332.45 1005.34 330.112 1003.23 Q327.774 1001.13 323.77 1001.13 Q321.895 1001.13 320.02 1001.54 Q318.168 1001.96 316.224 1002.84 L316.224 985.479 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M356.339 988.558 Q352.728 988.558 350.899 992.122 Q349.094 995.664 349.094 1002.79 Q349.094 1009.9 350.899 1013.46 Q352.728 1017.01 356.339 1017.01 Q359.973 1017.01 361.779 1013.46 Q363.608 1009.9 363.608 1002.79 Q363.608 995.664 361.779 992.122 Q359.973 988.558 356.339 988.558 M356.339 984.854 Q362.149 984.854 365.205 989.46 Q368.284 994.044 368.284 1002.79 Q368.284 1011.52 365.205 1016.13 Q362.149 1020.71 356.339 1020.71 Q350.529 1020.71 347.45 1016.13 Q344.395 1011.52 344.395 1002.79 Q344.395 994.044 347.45 989.46 Q350.529 984.854 356.339 984.854 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M286.062 727.386 L304.418 727.386 L304.418 731.321 L290.344 731.321 L290.344 739.793 Q291.363 739.446 292.381 739.284 Q293.4 739.099 294.418 739.099 Q300.205 739.099 303.585 742.27 Q306.964 745.441 306.964 750.858 Q306.964 756.436 303.492 759.538 Q300.02 762.617 293.701 762.617 Q291.525 762.617 289.256 762.247 Q287.011 761.876 284.603 761.135 L284.603 756.436 Q286.687 757.571 288.909 758.126 Q291.131 758.682 293.608 758.682 Q297.613 758.682 299.951 756.575 Q302.288 754.469 302.288 750.858 Q302.288 747.247 299.951 745.14 Q297.613 743.034 293.608 743.034 Q291.733 743.034 289.858 743.45 Q288.006 743.867 286.062 744.747 L286.062 727.386 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M326.177 730.464 Q322.566 730.464 320.737 734.029 Q318.932 737.571 318.932 744.7 Q318.932 751.807 320.737 755.372 Q322.566 758.913 326.177 758.913 Q329.811 758.913 331.617 755.372 Q333.446 751.807 333.446 744.7 Q333.446 737.571 331.617 734.029 Q329.811 730.464 326.177 730.464 M326.177 726.761 Q331.987 726.761 335.043 731.367 Q338.122 735.95 338.122 744.7 Q338.122 753.427 335.043 758.034 Q331.987 762.617 326.177 762.617 Q320.367 762.617 317.288 758.034 Q314.233 753.427 314.233 744.7 Q314.233 735.95 317.288 731.367 Q320.367 726.761 326.177 726.761 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M356.339 730.464 Q352.728 730.464 350.899 734.029 Q349.094 737.571 349.094 744.7 Q349.094 751.807 350.899 755.372 Q352.728 758.913 356.339 758.913 Q359.973 758.913 361.779 755.372 Q363.608 751.807 363.608 744.7 Q363.608 737.571 361.779 734.029 Q359.973 730.464 356.339 730.464 M356.339 726.761 Q362.149 726.761 365.205 731.367 Q368.284 735.95 368.284 744.7 Q368.284 753.427 365.205 758.034 Q362.149 762.617 356.339 762.617 Q350.529 762.617 347.45 758.034 Q344.395 753.427 344.395 744.7 Q344.395 735.95 347.45 731.367 Q350.529 726.761 356.339 726.761 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M284.835 469.292 L307.057 469.292 L307.057 471.283 L294.511 503.852 L289.627 503.852 L301.432 473.227 L284.835 473.227 L284.835 469.292 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M316.224 469.292 L334.58 469.292 L334.58 473.227 L320.506 473.227 L320.506 481.7 Q321.524 481.352 322.543 481.19 Q323.562 481.005 324.58 481.005 Q330.367 481.005 333.747 484.177 Q337.126 487.348 337.126 492.764 Q337.126 498.343 333.654 501.445 Q330.182 504.524 323.862 504.524 Q321.687 504.524 319.418 504.153 Q317.173 503.783 314.765 503.042 L314.765 498.343 Q316.849 499.477 319.071 500.033 Q321.293 500.588 323.77 500.588 Q327.774 500.588 330.112 498.482 Q332.45 496.376 332.45 492.764 Q332.45 489.153 330.112 487.047 Q327.774 484.94 323.77 484.94 Q321.895 484.94 320.02 485.357 Q318.168 485.774 316.224 486.653 L316.224 469.292 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M356.339 472.371 Q352.728 472.371 350.899 475.936 Q349.094 479.477 349.094 486.607 Q349.094 493.713 350.899 497.278 Q352.728 500.82 356.339 500.82 Q359.973 500.82 361.779 497.278 Q363.608 493.713 363.608 486.607 Q363.608 479.477 361.779 475.936 Q359.973 472.371 356.339 472.371 M356.339 468.667 Q362.149 468.667 365.205 473.274 Q368.284 477.857 368.284 486.607 Q368.284 495.334 365.205 499.94 Q362.149 504.524 356.339 504.524 Q350.529 504.524 347.45 499.94 Q344.395 495.334 344.395 486.607 Q344.395 477.857 347.45 473.274 Q350.529 468.667 356.339 468.667 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M256.664 241.824 L264.303 241.824 L264.303 215.458 L255.992 217.125 L255.992 212.866 L264.256 211.199 L268.932 211.199 L268.932 241.824 L276.571 241.824 L276.571 245.759 L256.664 245.759 L256.664 241.824 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M296.015 214.278 Q292.404 214.278 290.576 217.842 Q288.77 221.384 288.77 228.514 Q288.77 235.62 290.576 239.185 Q292.404 242.727 296.015 242.727 Q299.65 242.727 301.455 239.185 Q303.284 235.62 303.284 228.514 Q303.284 221.384 301.455 217.842 Q299.65 214.278 296.015 214.278 M296.015 210.574 Q301.826 210.574 304.881 215.18 Q307.96 219.764 307.96 228.514 Q307.96 237.241 304.881 241.847 Q301.826 246.43 296.015 246.43 Q290.205 246.43 287.127 241.847 Q284.071 237.241 284.071 228.514 Q284.071 219.764 287.127 215.18 Q290.205 210.574 296.015 210.574 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M326.177 214.278 Q322.566 214.278 320.737 217.842 Q318.932 221.384 318.932 228.514 Q318.932 235.62 320.737 239.185 Q322.566 242.727 326.177 242.727 Q329.811 242.727 331.617 239.185 Q333.446 235.62 333.446 228.514 Q333.446 221.384 331.617 217.842 Q329.811 214.278 326.177 214.278 M326.177 210.574 Q331.987 210.574 335.043 215.18 Q338.122 219.764 338.122 228.514 Q338.122 237.241 335.043 241.847 Q331.987 246.43 326.177 246.43 Q320.367 246.43 317.288 241.847 Q314.233 237.241 314.233 228.514 Q314.233 219.764 317.288 215.18 Q320.367 210.574 326.177 210.574 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M356.339 214.278 Q352.728 214.278 350.899 217.842 Q349.094 221.384 349.094 228.514 Q349.094 235.62 350.899 239.185 Q352.728 242.727 356.339 242.727 Q359.973 242.727 361.779 239.185 Q363.608 235.62 363.608 228.514 Q363.608 221.384 361.779 217.842 Q359.973 214.278 356.339 214.278 M356.339 210.574 Q362.149 210.574 365.205 215.18 Q368.284 219.764 368.284 228.514 Q368.284 237.241 365.205 241.847 Q362.149 246.43 356.339 246.43 Q350.529 246.43 347.45 241.847 Q344.395 237.241 344.395 228.514 Q344.395 219.764 347.45 215.18 Q350.529 210.574 356.339 210.574 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip212)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,228.479 4017.76,228.479 \"/>\n<polyline clip-path=\"url(#clip212)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1250.45 456.554,1250.31 457.123,1249.06 457.691,1247.81 458.259,1246.53 458.828,1246.23 459.396,1245.9 459.964,1245.48 460.533,1244.97 461.101,1244.38 461.669,1243.72 462.238,1242.96 462.806,1242.11 463.375,1241.17 463.943,1240.15 464.511,1239.04 465.08,1237.81 465.648,1236.49 466.216,1233 466.785,1231.44 467.353,1229.76 467.921,1227.96 468.49,1225.99 469.058,1223.86 469.626,1220.56 470.195,1218.15 470.763,1215.58 471.331,1211.81 471.9,1208.92 472.468,1204.84 473.036,1201.66 473.605,1198.25 474.173,1192.55 474.741,1188.74 475.31,1183.72 475.878,1178.39 476.446,1173.98 477.015,1168.34 477.583,1160.43 478.152,1153.29 478.72,1148.11 479.288,1141.63 479.857,1134.86 480.425,1129.01 480.993,1120.88 481.562,1114.47 482.13,1106.83 482.698,1100.02 483.267,1090.99 483.835,1083.71 484.403,1076.16 484.972,1068.6 485.54,1060.81 486.108,1051.71 486.677,1043.39 487.245,1034.82 487.813,1025.18 488.382,1014.44 488.95,1004.44 489.518,992.405 490.087,982.456 490.655,970.364 491.224,961.425 491.792,951.213 492.36,939.811 492.929,930.519 493.497,919.154 494.065,907.718 494.634,894.169 495.202,881.871 495.77,872.752 496.339,862.454 496.907,852.154 497.475,840.604 498.044,830.113 498.612,819.693 499.18,808.251 499.749,797.071 500.317,787.768 500.885,777.581 501.454,766.276 502.022,755.356 502.59,744.19 503.159,733.29 503.727,723.634 504.295,712.913 504.864,702.398 505.432,691.03 506.001,682.745 506.569,674.478 507.137,664.381 507.706,655.343 508.274,646.349 508.842,637.483 509.411,627.647 509.979,618.892 510.547,611.453 511.116,598.762 511.684,587.578 512.252,578.913 512.821,571.264 513.389,563.797 513.957,555.368 514.526,548.097 515.094,541.023 515.662,533.06 516.231,526.224 516.799,519.611 517.367,511.902 517.936,505.454 518.504,500.014 519.072,494.746 519.641,486.441 520.209,481.395 520.778,477.42 521.346,472.442 521.914,466.504 522.483,460.724 523.051,455.069 523.619,449.444 524.188,444.942 524.756,438.467 525.324,433.252 525.893,428.056 526.461,425.951 527.029,420.784 527.598,415.796 528.166,410.79 528.734,405.806 529.303,400.784 529.871,396.048 530.439,386.528 531.008,382.712 531.576,379.807 532.144,375.971 532.713,373.415 533.281,371.512 533.85,367.674 534.418,365.09 534.986,360.134 535.555,357.426 536.123,355.008 536.691,352.368 537.26,349.881 537.828,346.31 538.396,341.818 538.965,339.526 539.533,337.382 540.101,333.221 540.67,332.335 541.238,327.198 541.806,324.332 542.375,323.748 542.943,322.085 543.511,317.161 544.08,311.44 544.648,311.536 545.216,308.003 545.785,305.871 546.353,302.826 546.921,301.894 547.49,300.018 548.058,295.031 548.627,293.386 549.195,291.946 549.763,290.352 550.332,289.995 550.9,286.251 551.468,283.752 552.037,283.654 552.605,282.262 553.173,278.933 553.742,278.978 554.31,280.876 554.878,280.564 555.447,278.193 556.015,279.043 556.583,278.552 557.152,277.323 557.72,275.111 558.288,274.729 558.857,275.509 559.425,275.326 559.993,275.044 560.562,272.229 561.13,273.79 561.698,273.457 562.267,272.96 562.835,273.385 563.404,272.939 563.972,270.985 564.54,271.648 565.109,270.936 565.677,270.373 566.245,268.758 566.814,267.07 567.382,267.725 567.95,264.313 568.519,261.876 569.087,260.677 569.655,259.366 570.224,258.407 570.792,256.458 571.36,253.34 571.929,253.778 572.497,259.147 573.065,256.748 573.634,256.614 574.202,258.609 574.77,258.305 575.339,258.354 575.907,259.122 576.476,257.625 577.044,257.247 577.612,258.997 578.181,258.553 578.749,257.219 579.317,258.061 579.886,256.507 580.454,257.275 581.022,256.727 581.591,255.412 582.159,256.035 582.727,255.305 583.296,252.705 583.864,253.382 584.432,253.009 585.001,251.557 585.569,251.232 586.137,247.913 586.706,245.846 587.274,242.885 587.842,243.085 588.411,242.165 588.979,242.562 589.547,239.746 590.116,238.307 590.684,239.803 591.253,239.141 591.821,239.719 592.389,239.402 592.958,238.931 593.526,239.527 594.094,239.948 594.663,242.132 595.231,240.433 595.799,241.675 596.368,241.989 596.936,242.096 597.504,241.149 598.073,241.609 598.641,241.846 599.209,246.076 599.778,245.934 600.346,245.834 600.914,244.509 601.483,244.573 602.051,242.315 602.619,242.215 603.188,242.146 603.756,242.135 604.325,242.152 604.893,240.195 605.461,241.296 606.03,239.318 606.598,240.591 607.166,241.684 607.735,241.704 608.303,240.725 608.871,239.886 609.44,242.128 610.008,240.033 610.576,240.157 611.145,240.228 611.713,240.283 612.281,239.337 612.85,239.34 613.418,238.311 613.986,238.51 614.555,237.706 615.123,239.903 615.691,238.071 616.26,239.246 616.828,239.297 617.396,239.312 617.965,239.528 618.533,237.507 619.102,236.577 619.67,235.677 620.238,234.071 620.807,234.09 621.375,235.518 621.943,237.892 622.512,237.1 623.08,236.107 623.648,238.248 624.217,239.129 624.785,238.066 625.353,238.035 625.922,237.227 626.49,235.923 627.058,237.241 627.627,236.09 628.195,235.455 628.763,233.608 629.332,233.852 629.9,234.327 630.468,234.654 631.037,234.979 631.605,235.274 632.173,236.508 632.742,236.495 633.31,236.737 633.879,236.786 634.447,236.891 635.015,237.684 635.584,236.456 636.152,234.46 636.72,236.829 637.289,234.894 637.857,234.795 638.425,236.832 638.994,235.687 639.562,235.953 640.13,236.867 640.699,236.006 641.267,234.919 641.835,234.996 642.404,234.062 642.972,233.027 643.54,233.24 644.109,235.463 644.677,236.747 645.245,236.626 645.814,237.73 646.382,237.689 646.951,236.497 647.519,235.625 648.087,235.503 648.656,234.462 649.224,234.265 649.792,234.318 650.361,235.297 650.929,236.373 651.497,235.41 652.066,235.333 652.634,235.353 653.202,233.391 653.771,232.406 654.339,231.428 654.907,231.673 655.476,232.08 656.044,232.263 656.612,229.395 657.181,228.925 657.749,228.045 658.317,229.502 658.886,228.723 659.454,229.301 660.022,229.684 660.591,228.894 661.159,230.276 661.728,230.525 662.296,229.649 662.864,228.894 663.433,229.339 664.001,229.781 664.569,231.237 665.138,232.557 665.706,231.703 666.274,230.868 666.843,231.106 667.411,230.472 667.979,231.042 668.548,233.418 669.116,234.631 669.684,234.825 670.253,233.909 670.821,233.818 671.389,233.918 671.958,234.771 672.526,233.593 673.094,234.539 673.663,236.364 674.231,237.137 674.799,235.734 675.368,235.536 675.936,236.167 676.505,233.988 677.073,232.757 677.641,230.75 678.21,229.71 678.778,229.018 679.346,229.472 679.915,233.841 680.483,230.705 681.051,229.739 681.62,231.221 682.188,230.523 682.756,232.032 683.325,233.318 683.893,234.358 684.461,235.204 685.03,231.086 685.598,230.172 686.166,231.711 686.735,231.863 687.303,231.005 687.871,230.905 688.44,230.022 689.008,230.228 689.577,229.381 690.145,229.843 690.713,228.991 691.282,229.196 691.85,231.828 692.418,232.062 692.987,232.24 693.555,233.384 694.123,231.277 694.692,230.399 695.26,228.633 695.828,231.048 696.397,231.101 696.965,229.03 697.533,228.346 698.102,227.792 698.67,227.02 699.238,227.53 699.807,227.098 700.375,227.798 700.943,229.142 701.512,230.208 702.08,230.645 702.648,231.753 703.217,232.832 703.785,233.9 704.354,237.905 704.922,237.661 705.49,239.559 706.059,241.159 706.627,240.478 707.195,239.94 707.764,238.529 708.332,240.165 708.9,239.602 709.469,238.969 710.037,240.437 710.605,240.66 711.174,240.951 711.742,240.105 712.31,239.507 712.879,236.824 713.447,233.352 714.015,235.147 714.584,232.759 715.152,232.389 715.72,232.328 716.289,233.297 716.857,234.041 717.425,234.804 717.994,235.391 718.562,234.915 719.131,234.621 719.699,232.436 720.267,233.36 720.836,231.958 721.404,229.997 721.972,226.886 722.541,225.993 723.109,225.073 723.677,226.621 724.246,225.835 724.814,226.264 725.382,224.597 725.951,223.985 726.519,227.534 727.087,228.79 727.656,226.962 728.224,225.089 728.792,224.43 729.361,222.734 729.929,223.079 730.497,220.599 731.066,221.13 731.634,220.812 732.203,222.536 732.771,224.995 733.339,225.347 733.908,225.574 734.476,224.981 735.044,227.528 735.613,229.71 736.181,230.665 736.749,231.65 737.318,231.794 737.886,230.801 738.454,229.003 739.023,232.171 739.591,234.401 740.159,234.159 740.728,234.982 741.296,234.995 741.864,234.493 742.433,235.65 743.001,235.331 743.569,234.888 744.138,234.585 744.706,235.337 745.274,236.042 745.843,233.734 746.411,233.818 746.98,234.365 747.548,235.149 748.116,235.654 748.685,234.198 749.253,235.961 749.821,232.407 750.39,232.413 750.958,232.424 751.526,232.293 752.095,232.19 752.663,228.054 753.231,231.347 753.8,230.103 754.368,229.153 754.936,224.237 755.505,221.411 756.073,222.12 756.641,222.684 757.21,222.198 757.778,220.563 758.346,221.201 758.915,221.871 759.483,224.77 760.052,226.115 760.62,226.501 761.188,223.792 761.757,224.557 762.325,225.175 762.893,224.65 763.462,226.065 764.03,224.382 764.598,222.661 765.167,220.374 765.735,220.32 766.303,224.256 766.872,222.738 767.44,222.41 768.008,223.288 768.577,223.169 769.145,225.799 769.713,227.307 770.282,226.668 770.85,228.068 771.418,229.339 771.987,230.716 772.555,229.74 773.123,229.915 773.692,230.092 774.26,231.425 774.829,232.215 775.397,232.386 775.965,233.279 776.534,231.108 777.102,231.233 777.67,231.486 778.239,232.766 778.807,231.839 779.375,231.008 779.944,231.968 780.512,230.867 781.08,231.189 781.649,231.3 782.217,232.393 782.785,232.548 783.354,232.687 783.922,232.482 784.49,230.63 785.059,231.606 785.627,230.597 786.195,231.643 786.764,230.711 787.332,229.817 787.9,230.947 788.469,230.907 789.037,230.983 789.606,231.082 790.174,231.914 790.742,232.804 791.311,234.922 791.879,233.571 792.447,231.532 793.016,232.559 793.584,230.411 794.152,232.431 794.721,232.344 795.289,231.462 795.857,232.456 796.426,233.431 796.994,235.446 797.562,236.067 798.131,236.591 798.699,236.153 799.267,234.673 799.836,234.123 800.404,231.719 800.972,232.711 801.541,234.59 802.109,234.584 802.678,233.205 803.246,233.854 803.814,231.465 804.383,232.462 804.951,233.343 805.519,233.055 806.088,231.784 806.656,229.392 807.224,230.589 807.793,230.514 808.361,230.49 808.929,231.466 809.498,233.408 810.066,234.107 810.634,232.755 811.203,232.63 811.771,232.573 812.339,232.323 812.908,230.041 813.476,228.919 814.044,231.22 814.613,229.998 815.181,228.988 815.749,230.063 816.318,229.823 816.886,229.659 817.455,229.663 818.023,229.455 818.591,229.216 819.16,226.102 819.728,227.501 820.296,228.757 820.865,229.913 821.433,228.933 822.001,228.838 822.57,229.019 823.138,229.118 823.706,229.159 824.275,230.253 824.843,230.113 825.411,230.011 825.98,229.819 826.548,230.771 827.116,231.705 827.685,231.577 828.253,231.366 828.821,232.191 829.39,230.752 829.958,228.597 830.526,228.517 831.095,230.408 831.663,230.072 832.232,229.016 832.8,228.947 833.368,229.991 833.937,229.896 834.505,231.602 835.073,232.51 835.642,234.231 836.21,233.672 836.778,232.104 837.347,230.658 837.915,230.487 838.483,230.124 839.052,229.919 839.62,229.712 840.188,228.491 840.757,226.218 841.325,226.323 841.893,227.473 842.462,226.502 843.03,225.494 843.598,225.311 844.167,224.587 844.735,221.773 845.304,220.972 845.872,221.534 846.44,221.959 847.009,220.425 847.577,220.827 848.145,221.574 848.714,221.157 849.282,221.886 849.85,224.624 850.419,225.119 850.987,223.595 851.555,225.015 852.124,224.277 852.692,225.658 853.26,224.941 853.829,225.376 854.397,225.969 854.965,226.273 855.534,227.63 856.102,226.717 856.67,225.834 857.239,228.148 857.807,229.486 858.375,228.542 858.944,229.699 859.512,230.879 860.081,229.784 860.649,228.857 861.217,228.099 861.786,227.262 862.354,228.44 862.922,229.63 863.491,228.657 864.059,230.886 864.627,228.817 865.196,229.963 865.764,230.942 866.332,229.917 866.901,229.896 867.469,230.136 868.037,230.28 868.606,229.36 869.174,228.551 869.742,228.678 870.311,228.886 870.879,231.053 871.447,230.954 872.016,230.708 872.584,230.776 873.152,230.558 873.721,231.404 874.289,231.394 874.858,230.481 875.426,230.631 875.994,230.646 876.563,230.601 877.131,231.515 877.699,228.489 878.268,228.739 878.836,229.858 879.404,229.964 879.973,229.959 880.541,230.968 881.109,231.929 881.678,231.63 882.246,232.32 882.814,231.154 883.383,232.165 883.951,232.977 884.519,232.809 885.088,233.515 885.656,234.125 886.224,233.757 886.793,233.367 887.361,232.081 887.93,232.833 888.498,232.24 889.066,231.868 889.635,231.668 890.203,232.557 890.771,232.095 891.34,230.799 891.908,229.709 892.476,228.843 893.045,228.644 893.613,227.809 894.181,229.101 894.75,228.25 895.318,227.228 895.886,227.582 896.455,226.69 897.023,225.723 897.591,227.067 898.16,227.198 898.728,227.07 899.296,227.296 899.865,225.441 900.433,227.791 901.001,231.186 901.57,229.875 902.138,229.046 902.707,225.928 903.275,228.073 903.843,229.021 904.412,227.936 904.98,226.887 905.548,227.116 906.117,228.382 906.685,228.455 907.253,227.396 907.822,226.536 908.39,225.563 908.958,226.93 909.527,227.815 910.095,228.883 910.663,228.827 911.232,229.018 911.8,229.032 912.368,232.046 912.937,231.826 913.505,231.645 914.073,229.603 914.642,229.464 915.21,228.471 915.779,228.487 916.347,228.183 916.915,227.234 917.484,226.537 918.052,225.547 918.62,224.677 919.189,227.843 919.757,228.014 920.325,226.177 920.894,226.461 921.462,225.595 922.03,226.921 922.599,226.759 923.167,226.079 923.735,226.35 924.304,227.47 924.872,225.473 925.44,223.784 926.009,227.334 926.577,229.747 927.145,228.657 927.714,228.803 928.282,228.666 928.85,229.922 929.419,229.205 929.987,228.139 930.556,229.327 931.124,230.274 931.692,231.477 932.261,230.091 932.829,229.958 933.397,227.822 933.966,227.816 934.534,225.902 935.102,223.135 935.671,224.755 936.239,225.207 936.807,225.494 937.376,225.945 937.944,226.139 938.512,224.425 939.081,226.937 939.649,226.952 940.217,229.19 940.786,229.464 941.354,227.334 941.922,229.632 942.491,228.666 943.059,233.136 943.627,232.064 944.196,234.2 944.764,234.105 945.333,229.623 945.901,229.488 946.469,228.686 947.038,230.931 947.606,230.031 948.174,228.922 948.743,228.793 949.311,227.926 949.879,227.98 950.448,229.325 951.016,229.159 951.584,231.441 952.153,229.993 952.721,227.904 953.289,229.023 953.858,230.232 954.426,231.346 954.994,230.292 955.563,229.43 956.131,230.453 956.699,231.245 957.268,231.129 957.836,229.923 958.405,232.065 958.973,233.998 959.541,232.481 960.11,232.403 960.678,233.228 961.246,231.817 961.815,231.724 962.383,228.575 962.951,229.806 963.52,230.914 964.088,231.729 964.656,232.717 965.225,232.665 965.793,231.553 966.361,232.305 966.93,230.991 967.498,234.075 968.066,234.677 968.635,232.111 969.203,232.756 969.771,233.563 970.34,233.453 970.908,234.961 971.476,234.501 972.045,232.978 972.613,231.584 973.182,231.32 973.75,232.142 974.318,233.786 974.887,231.152 975.455,232.072 976.023,230.662 976.592,231.385 977.16,229.984 977.728,229.857 978.297,227.584 978.865,227.548 979.433,227.76 980.002,226.687 980.57,225.698 981.138,225.831 981.707,226.081 982.275,226.375 982.843,225.369 983.412,223.562 983.98,224.99 984.548,226.163 985.117,225.435 985.685,225.659 986.253,226.806 986.822,228.989 987.39,228.902 987.959,230.819 988.527,230.486 989.095,229.269 989.664,226.964 990.232,226.777 990.8,230.009 991.369,231.829 991.937,232.524 992.505,229.195 993.074,229.163 993.642,228.98 994.21,227.673 994.779,225.628 995.347,226.631 995.915,225.871 996.484,226.039 997.052,226.072 997.62,227.468 998.189,228.345 998.757,229.563 999.325,228.336 999.894,226.365 1000.46,225.355 1001.03,225.536 1001.6,225.844 1002.17,228.042 1002.74,226.893 1003.3,227.087 1003.87,224.991 1004.44,227.297 1005.01,228.273 1005.58,231.367 1006.15,229.915 1006.71,230.058 1007.28,231.127 1007.85,230.963 1008.42,230.021 1008.99,227.658 1009.56,227.723 1010.12,226.837 1010.69,226.947 1011.26,230.22 1011.83,230.99 1012.4,230.597 1012.97,229.369 1013.53,230.305 1014.1,227.979 1014.67,229.195 1015.24,229.893 1015.81,226.775 1016.38,226.233 1016.94,225.454 1017.51,226.508 1018.08,225.775 1018.65,225.812 1019.22,226.056 1019.79,225.157 1020.35,225.39 1020.92,225.662 1021.49,225.646 1022.06,225.851 1022.63,224.09 1023.2,222.487 1023.76,224.145 1024.33,223.49 1024.9,221.745 1025.47,220.39 1026.04,223.073 1026.61,223.338 1027.17,223.393 1027.74,222.99 1028.31,224.62 1028.88,226.001 1029.45,226.375 1030.02,225.564 1030.58,223.843 1031.15,225.328 1031.72,227.658 1032.29,227.651 1032.86,225.805 1033.43,225.074 1033.99,227.589 1034.56,227.655 1035.13,227.797 1035.7,230.202 1036.27,229.315 1036.84,230.294 1037.4,231.28 1037.97,232.22 1038.54,230.911 1039.11,227.723 1039.68,228.749 1040.25,227.452 1040.81,227.554 1041.38,226.902 1041.95,228.094 1042.52,228.947 1043.09,230.277 1043.66,231.274 1044.22,231.175 1044.79,231.411 1045.36,232.448 1045.93,232.288 1046.5,228.067 1047.07,227.214 1047.63,227.385 1048.2,230.384 1048.77,233.479 1049.34,234.149 1049.91,233.722 1050.48,231.51 1051.05,230.391 1051.61,228.251 1052.18,228.32 1052.75,229.374 1053.32,228.46 1053.89,229.406 1054.46,229.239 1055.02,233.318 1055.59,234.011 1056.16,234.752 1056.73,232.336 1057.3,231.184 1057.87,230.114 1058.43,231.119 1059,228.813 1059.57,228.708 1060.14,228.734 1060.71,227.708 1061.28,228.739 1061.84,228.755 1062.41,230.812 1062.98,230.687 1063.55,231.478 1064.12,230.254 1064.69,231.094 1065.25,231.787 1065.82,229.509 1066.39,231.462 1066.96,232.408 1067.53,233.262 1068.1,235.209 1068.66,233.737 1069.23,234.442 1069.8,233.014 1070.37,232.636 1070.94,234.839 1071.51,234.277 1072.07,231.922 1072.64,230.53 1073.21,229.541 1073.78,228.424 1074.35,228.606 1074.92,228.693 1075.48,231.717 1076.05,229.135 1076.62,230.011 1077.19,228.58 1077.76,228.277 1078.33,229.315 1078.89,230.144 1079.46,231.944 1080.03,233.675 1080.6,231.206 1081.17,231.085 1081.74,230.889 1082.3,229.828 1082.87,230.652 1083.44,231.641 1084.01,232.126 1084.58,231.791 1085.15,231.515 1085.71,230.269 1086.28,231.867 1086.85,233.515 1087.42,233.935 1087.99,232.493 1088.56,229.768 1089.12,229.615 1089.69,228.454 1090.26,228.227 1090.83,227.083 1091.4,227.179 1091.97,229.435 1092.53,228.943 1093.1,230.887 1093.67,230.447 1094.24,228.936 1094.81,226.559 1095.38,224.46 1095.94,224.445 1096.51,225.712 1097.08,226.835 1097.65,226.927 1098.22,227.103 1098.79,227.153 1099.35,227.102 1099.92,227.11 1100.49,226.146 1101.06,227.253 1101.63,222.274 1102.2,222.581 1102.76,222.049 1103.33,222.723 1103.9,224.056 1104.47,222.363 1105.04,220.635 1105.61,222.294 1106.17,224.782 1106.74,224.856 1107.31,224.037 1107.88,224.244 1108.45,224.569 1109.02,223.657 1109.58,223.982 1110.15,223.25 1110.72,222.725 1111.29,223.179 1111.86,225.656 1112.43,226.08 1112.99,226.24 1113.56,226.549 1114.13,227.713 1114.7,227.781 1115.27,228.672 1115.84,226.734 1116.4,226.756 1116.97,227.08 1117.54,227.282 1118.11,225.216 1118.68,226.878 1119.25,227.214 1119.81,228.333 1120.38,228.611 1120.95,228.619 1121.52,228.643 1122.09,228.832 1122.66,228.976 1123.23,227.751 1123.79,227.848 1124.36,227.88 1124.93,229.128 1125.5,228.015 1126.07,231.016 1126.64,232.009 1127.2,233.932 1127.77,231.492 1128.34,234.334 1128.91,235.134 1129.48,232.392 1130.05,232.01 1130.61,230.968 1131.18,230.879 1131.75,229.697 1132.32,229.563 1132.89,228.28 1133.46,225.111 1134.02,227.249 1134.59,227.365 1135.16,227.539 1135.73,228.621 1136.3,227.59 1136.87,225.7 1137.43,229.02 1138,228.714 1138.57,231.581 1139.14,232.137 1139.71,233.08 1140.28,233.792 1140.84,231.281 1141.41,229.041 1141.98,228.084 1142.55,229.077 1143.12,227.806 1143.69,229.064 1144.25,227.102 1144.82,226.179 1145.39,226.585 1145.96,228.804 1146.53,228.596 1147.1,227.493 1147.66,227.543 1148.23,227.7 1148.8,227.862 1149.37,227.814 1149.94,228.995 1150.51,232.99 1151.07,233.619 1151.64,233.103 1152.21,230.873 1152.78,229.629 1153.35,230.917 1153.92,229.679 1154.48,232.445 1155.05,231.201 1155.62,230.853 1156.19,229.532 1156.76,229.338 1157.33,229.282 1157.89,227.23 1158.46,225.289 1159.03,225.726 1159.6,225.929 1160.17,229.144 1160.74,228.088 1161.3,227.799 1161.87,228.635 1162.44,229.668 1163.01,228.554 1163.58,231.603 1164.15,231.292 1164.71,231.154 1165.28,232.092 1165.85,229.893 1166.42,229.791 1166.99,228.662 1167.56,228.512 1168.12,229.597 1168.69,230.653 1169.26,231.645 1169.83,231.523 1170.4,230.1 1170.97,228.081 1171.53,226.906 1172.1,224.951 1172.67,225.975 1173.24,224.793 1173.81,222.085 1174.38,222.64 1174.94,224.136 1175.51,224.565 1176.08,224.921 1176.65,221.962 1177.22,224.528 1177.79,222.835 1178.35,223.362 1178.92,223.623 1179.49,222.951 1180.06,221.189 1180.63,220.652 1181.2,222.19 1181.76,222.827 1182.33,222.437 1182.9,222.924 1183.47,224.524 1184.04,224.879 1184.61,226.297 1185.17,227.58 1185.74,227.711 1186.31,226.691 1186.88,226.862 1187.45,227.013 1188.02,227.32 1188.58,227.335 1189.15,228.6 1189.72,228.941 1190.29,228.758 1190.86,229.207 1191.43,230.308 1192,231.439 1192.56,229.465 1193.13,226.355 1193.7,228.313 1194.27,228.362 1194.84,228.447 1195.41,229.361 1195.97,229.181 1196.54,231.214 1197.11,230.918 1197.68,231.813 1198.25,230.526 1198.82,228.431 1199.38,227.71 1199.95,227.861 1200.52,228.765 1201.09,227.62 1201.66,227.695 1202.23,228.864 1202.79,228.827 1203.36,227.891 1203.93,226.089 1204.5,228.372 1205.07,227.494 1205.64,227.586 1206.2,226.62 1206.77,226.638 1207.34,228.052 1207.91,227.238 1208.48,225.316 1209.05,226.747 1209.61,226.98 1210.18,227.254 1210.75,229.628 1211.32,228.591 1211.89,231.018 1212.46,232.001 1213.02,231.642 1213.59,232.732 1214.16,232.417 1214.73,232.273 1215.3,231.928 1215.87,232.93 1216.43,232.655 1217,232.411 1217.57,231.454 1218.14,233.499 1218.71,234.153 1219.28,232.824 1219.84,232.544 1220.41,232.327 1220.98,232.003 1221.55,229.058 1222.12,228.021 1222.69,228.019 1223.25,226.825 1223.82,226.867 1224.39,227.062 1224.96,225.02 1225.53,228.258 1226.1,226.291 1226.66,226.768 1227.23,226.713 1227.8,230.014 1228.37,229.88 1228.94,229.805 1229.51,229.595 1230.07,228.386 1230.64,228.328 1231.21,228.57 1231.78,227.454 1232.35,226.324 1232.92,227.167 1233.48,226.36 1234.05,228.579 1234.62,231.6 1235.19,232.346 1235.76,231.07 1236.33,231.784 1236.89,231.582 1237.46,233.489 1238.03,231.095 1238.6,230.89 1239.17,229.605 1239.74,230.632 1240.3,228.323 1240.87,228.209 1241.44,230.133 1242.01,229.793 1242.58,229.807 1243.15,229.976 1243.71,226.926 1244.28,227.027 1244.85,228.238 1245.42,230.537 1245.99,227.409 1246.56,225.318 1247.12,223.545 1247.69,221.844 1248.26,220.27 1248.83,224.951 1249.4,224.034 1249.97,225.378 1250.53,226.542 1251.1,226.587 1251.67,224.668 1252.24,221.933 1252.81,222.598 1253.38,226.248 1253.94,227.478 1254.51,227.502 1255.08,227.548 1255.65,226.501 1256.22,229.906 1256.79,230.857 1257.35,231.704 1257.92,231.902 1258.49,232.484 1259.06,233.129 1259.63,234.049 1260.2,232.503 1260.76,234.241 1261.33,232.937 1261.9,234.691 1262.47,233.218 1263.04,233.983 1263.61,233.499 1264.18,234.232 1264.74,232.939 1265.31,232.761 1265.88,235.628 1266.45,235.121 1267.02,235.778 1267.59,234.074 1268.15,233.662 1268.72,231.203 1269.29,227.787 1269.86,226.687 1270.43,224.55 1271,224.643 1271.56,224.846 1272.13,224.051 1272.7,224.238 1273.27,226.609 1273.84,226.789 1274.41,225.865 1274.97,225.01 1275.54,227.412 1276.11,226.453 1276.68,226.517 1277.25,227.581 1277.82,227.738 1278.38,228.711 1278.95,227.548 1279.52,226.448 1280.09,225.413 1280.66,226.781 1281.23,225.923 1281.79,226.176 1282.36,225.55 1282.93,225.701 1283.5,226.753 1284.07,226.741 1284.64,226.949 1285.2,227.156 1285.77,228.453 1286.34,227.542 1286.91,227.648 1287.48,225.611 1288.05,224.941 1288.61,225.122 1289.18,226.31 1289.75,228.702 1290.32,228.787 1290.89,229.123 1291.46,228.219 1292.02,228.945 1292.59,228.76 1293.16,229.736 1293.73,229.424 1294.3,229.301 1294.87,230.255 1295.43,229.193 1296,227.966 1296.57,228.277 1297.14,229.536 1297.71,231.713 1298.28,230.395 1298.84,231.328 1299.41,228.931 1299.98,229.911 1300.55,232.664 1301.12,231.124 1301.69,232.057 1302.25,231.884 1302.82,232.618 1303.39,233.221 1303.96,232.906 1304.53,231.499 1305.1,231.382 1305.66,232.356 1306.23,232.098 1306.8,231.728 1307.37,229.471 1307.94,230.405 1308.51,230.195 1309.07,231.21 1309.64,228.94 1310.21,227.983 1310.78,227.961 1311.35,230.997 1311.92,228.508 1312.48,229.63 1313.05,230.61 1313.62,229.436 1314.19,231.575 1314.76,230.399 1315.33,233.192 1315.89,229.596 1316.46,229.473 1317.03,228.263 1317.6,230.2 1318.17,230.932 1318.74,230.866 1319.3,231.767 1319.87,230.467 1320.44,230.044 1321.01,229.89 1321.58,228.67 1322.15,228.75 1322.71,228.406 1323.28,226.391 1323.85,226.121 1324.42,228.171 1324.99,229.17 1325.56,226.908 1326.12,229.084 1326.69,227.076 1327.26,228.408 1327.83,228.425 1328.4,228.393 1328.97,227.374 1329.53,229.678 1330.1,229.408 1330.67,229.26 1331.24,231.15 1331.81,230.989 1332.38,231.956 1332.94,230.555 1333.51,225.29 1334.08,224.317 1334.65,224.609 1335.22,223.556 1335.79,225.885 1336.36,226.956 1336.92,225.982 1337.49,226.047 1338.06,226.009 1338.63,227.419 1339.2,226.329 1339.77,224.406 1340.33,226.662 1340.9,227.821 1341.47,226.926 1342.04,228.782 1342.61,229.763 1343.18,230.532 1343.74,231.118 1344.31,231.869 1344.88,231.925 1345.45,233.833 1346.02,234.686 1346.59,233.24 1347.15,231.874 1347.72,231.358 1348.29,231.136 1348.86,230.793 1349.43,230.342 1350,229.051 1350.56,226.948 1351.13,221.872 1351.7,221.237 1352.27,220.908 1352.84,220.402 1353.41,222.987 1353.97,224.38 1354.54,223.56 1355.11,223.96 1355.68,223.331 1356.25,224.621 1356.82,222.604 1357.38,225.017 1357.95,224.083 1358.52,225.363 1359.09,227.794 1359.66,226.781 1360.23,226.045 1360.79,226.186 1361.36,226.417 1361.93,228.659 1362.5,229.616 1363.07,228.604 1363.64,230.727 1364.2,232.821 1364.77,229.479 1365.34,228.378 1365.91,226.246 1366.48,225.431 1367.05,224.452 1367.61,224.547 1368.18,224.611 1368.75,224.876 1369.32,224.318 1369.89,222.762 1370.46,226.217 1371.02,227.326 1371.59,225.4 1372.16,226.739 1372.73,228.072 1373.3,227.957 1373.87,226.972 1374.43,229.333 1375,229.361 1375.57,228.351 1376.14,226.014 1376.71,224.134 1377.28,226.462 1377.84,225.677 1378.41,226.828 1378.98,225.931 1379.55,227.132 1380.12,227.324 1380.69,227.402 1381.25,226.479 1381.82,226.691 1382.39,226.806 1382.96,226.825 1383.53,228.958 1384.1,226.864 1384.66,224.952 1385.23,226.497 1385.8,225.491 1386.37,226.958 1386.94,227.064 1387.51,227.17 1388.07,226.329 1388.64,227.809 1389.21,228.027 1389.78,228.005 1390.35,228.137 1390.92,228.956 1391.48,228.938 1392.05,227.739 1392.62,226.848 1393.19,229.023 1393.76,229.137 1394.33,232.248 1394.89,231.228 1395.46,231.003 1396.03,232.122 1396.6,229.982 1397.17,228.759 1397.74,227.555 1398.3,228.741 1398.87,229.837 1399.44,230.999 1400.01,232.023 1400.58,234.072 1401.15,233.661 1401.71,233.451 1402.28,234.181 1402.85,234.865 1403.42,233.449 1403.99,233.918 1404.56,231.263 1405.13,233.052 1405.69,232.794 1406.26,231.654 1406.83,229.666 1407.4,228.51 1407.97,230.625 1408.54,231.461 1409.1,231.44 1409.67,232.412 1410.24,233.136 1410.81,235.875 1411.38,234.491 1411.95,237.154 1412.51,234.413 1413.08,233.872 1413.65,233.31 1414.22,233.966 1414.79,233.554 1415.36,232.331 1415.92,232.807 1416.49,233.577 1417.06,232.95 1417.63,234.425 1418.2,234.008 1418.77,233.406 1419.33,230.931 1419.9,231.446 1420.47,231.079 1421.04,231.671 1421.61,230.349 1422.18,231.396 1422.74,230.765 1423.31,231.438 1423.88,231.196 1424.45,230.59 1425.02,230.327 1425.59,227.947 1426.15,227.746 1426.72,227.595 1427.29,227.519 1427.86,225.45 1428.43,227.437 1429,228.315 1429.56,228.081 1430.13,228.02 1430.7,226.822 1431.27,226.79 1431.84,226.681 1432.41,229.541 1432.97,229.406 1433.54,228.162 1434.11,225.021 1434.68,222.961 1435.25,222.462 1435.82,224.564 1436.38,223.425 1436.95,222.682 1437.52,224.058 1438.09,224.326 1438.66,224.712 1439.23,224.888 1439.79,224.023 1440.36,223.022 1440.93,223.379 1441.5,222.767 1442.07,223.999 1442.64,226.452 1443.2,226.429 1443.77,227.557 1444.34,227.613 1444.91,228.594 1445.48,226.368 1446.05,226.65 1446.61,227.465 1447.18,227.538 1447.75,227.458 1448.32,226.582 1448.89,226.893 1449.46,229.209 1450.02,229.085 1450.59,227.943 1451.16,225.96 1451.73,224.103 1452.3,225.49 1452.87,225.822 1453.43,227.073 1454,224.033 1454.57,226.221 1455.14,225.618 1455.71,226.015 1456.28,225.931 1456.84,225.035 1457.41,225.16 1457.98,227.506 1458.55,224.594 1459.12,222.785 1459.69,224.29 1460.25,225.708 1460.82,224.918 1461.39,224.149 1461.96,227.768 1462.53,227.861 1463.1,227.913 1463.66,227.933 1464.23,228.994 1464.8,228.039 1465.37,226.966 1465.94,225.867 1466.51,225.97 1467.07,227.306 1467.64,225.38 1468.21,225.777 1468.78,224.984 1469.35,227.36 1469.92,228.414 1470.48,229.739 1471.05,230.781 1471.62,230.878 1472.19,231.897 1472.76,230.877 1473.33,231.802 1473.89,232.427 1474.46,232.18 1475.03,230.035 1475.6,230.998 1476.17,232.113 1476.74,233.991 1477.31,234.848 1477.87,234.366 1478.44,235.036 1479.01,234.734 1479.58,233.121 1480.15,231.587 1480.72,231.314 1481.28,230.05 1481.85,227.866 1482.42,228.08 1482.99,228.226 1483.56,227.34 1484.13,229.671 1484.69,230.608 1485.26,229.356 1485.83,228.147 1486.4,228.466 1486.97,228.516 1487.54,230.646 1488.1,229.513 1488.67,231.402 1489.24,230.171 1489.81,229.956 1490.38,230.074 1490.95,227.834 1491.51,227.799 1492.08,227.772 1492.65,228.859 1493.22,228.647 1493.79,228.705 1494.36,227.872 1494.92,226.833 1495.49,227.092 1496.06,228.06 1496.63,229.148 1497.2,230.054 1497.77,229.905 1498.33,230.115 1498.9,231.178 1499.47,230.749 1500.04,229.666 1500.61,230.413 1501.18,229.429 1501.74,224.987 1502.31,226.117 1502.88,226.247 1503.45,227.544 1504.02,227.799 1504.59,226.78 1505.15,226.738 1505.72,229.038 1506.29,227.927 1506.86,227.818 1507.43,226.85 1508,225.866 1508.56,225.967 1509.13,227.361 1509.7,227.536 1510.27,226.594 1510.84,226.864 1511.41,228.043 1511.97,226.977 1512.54,225.901 1513.11,224.884 1513.68,223.871 1514.25,224.173 1514.82,225.383 1515.38,227.749 1515.95,227.855 1516.52,228.035 1517.09,233.179 1517.66,232.708 1518.23,233.498 1518.79,233.085 1519.36,231.461 1519.93,230.271 1520.5,228.211 1521.07,228.227 1521.64,227.262 1522.2,228.296 1522.77,227.333 1523.34,228.381 1523.91,225.207 1524.48,224.517 1525.05,223.659 1525.61,224.989 1526.18,226.2 1526.75,227.458 1527.32,227.344 1527.89,227.299 1528.46,225.468 1529.02,224.882 1529.59,226.211 1530.16,227.694 1530.73,224.818 1531.3,223.932 1531.87,224.977 1532.43,223.022 1533,225.636 1533.57,224.002 1534.14,226.41 1534.71,225.494 1535.28,228.906 1535.84,229.789 1536.41,231.785 1536.98,231.639 1537.55,233.591 1538.12,233.33 1538.69,234.137 1539.25,233.708 1539.82,232.365 1540.39,232.133 1540.96,234.028 1541.53,235.626 1542.1,234.252 1542.66,235.048 1543.23,235.669 1543.8,232.868 1544.37,231.547 1544.94,232.559 1545.51,229.343 1546.08,227.35 1546.64,227.454 1547.21,228.579 1547.78,227.559 1548.35,225.52 1548.92,227.713 1549.49,228.798 1550.05,230.776 1550.62,231.498 1551.19,228.967 1551.76,229.528 1552.33,231.295 1552.9,230.932 1553.46,230.545 1554.03,230.424 1554.6,227.871 1555.17,225.832 1555.74,226.195 1556.31,226.086 1556.87,226.467 1557.44,225.403 1558.01,226.379 1558.58,226.652 1559.15,226.842 1559.72,228.043 1560.28,225.961 1560.85,227.25 1561.42,229.485 1561.99,227.413 1562.56,229.617 1563.13,226.465 1563.69,225.473 1564.26,224.632 1564.83,226.187 1565.4,224.402 1565.97,222.455 1566.54,222.093 1567.1,226.677 1567.67,224.74 1568.24,224.902 1568.81,226.314 1569.38,226.414 1569.95,226.321 1570.51,226.769 1571.08,228.061 1571.65,227.111 1572.22,226.077 1572.79,228.536 1573.36,226.663 1573.92,227.733 1574.49,226.772 1575.06,225.849 1575.63,225.974 1576.2,229.485 1576.77,229.298 1577.33,229.504 1577.9,227.418 1578.47,228.667 1579.04,227.753 1579.61,227.821 1580.18,227.847 1580.74,223.645 1581.31,223.063 1581.88,224.642 1582.45,225.031 1583.02,225.396 1583.59,228.798 1584.15,228.919 1584.72,227.865 1585.29,226.035 1585.86,226.423 1586.43,226.723 1587,226.946 1587.56,227.025 1588.13,231.467 1588.7,230.128 1589.27,229.115 1589.84,229.033 1590.41,230.928 1590.97,230.91 1591.54,228.723 1592.11,230.983 1592.68,231.859 1593.25,230.657 1593.82,231.722 1594.38,231.525 1594.95,230.485 1595.52,231.4 1596.09,230.13 1596.66,232.219 1597.23,232.153 1597.79,231.976 1598.36,231.474 1598.93,230.299 1599.5,229.126 1600.07,228.947 1600.64,228.933 1601.2,230.106 1601.77,228.941 1602.34,228.85 1602.91,227.928 1603.48,229.99 1604.05,231.932 1604.61,229.755 1605.18,230.758 1605.75,228.636 1606.32,229.869 1606.89,229.763 1607.46,230.76 1608.02,229.618 1608.59,228.572 1609.16,229.672 1609.73,229.704 1610.3,228.832 1610.87,230.009 1611.43,231.98 1612,231.635 1612.57,230.32 1613.14,230.196 1613.71,228.835 1614.28,229.713 1614.84,228.645 1615.41,229.569 1615.98,229.327 1616.55,227.53 1617.12,226.49 1617.69,227.647 1618.26,227.771 1618.82,227.676 1619.39,227.828 1619.96,229.06 1620.53,229.093 1621.1,228.092 1621.67,229.045 1622.23,231.025 1622.8,227.889 1623.37,225.803 1623.94,222.881 1624.51,223.221 1625.08,225.527 1625.64,226.774 1626.21,225.82 1626.78,223.762 1627.35,226.035 1627.92,225.089 1628.49,226.276 1629.05,225.538 1629.62,223.755 1630.19,221.844 1630.76,222.523 1631.33,223.014 1631.9,226.668 1632.46,227.985 1633.03,226.196 1633.6,226.457 1634.17,227.833 1634.74,225.88 1635.31,227.265 1635.87,227.456 1636.44,227.694 1637.01,227.099 1637.58,227.493 1638.15,228.673 1638.72,227.963 1639.28,228.105 1639.85,228.19 1640.42,228.266 1640.99,230.417 1641.56,229.272 1642.13,229.31 1642.69,228.347 1643.26,230.364 1643.83,230.112 1644.4,231.123 1644.97,232.002 1645.54,233.017 1646.1,232.74 1646.67,231.241 1647.24,227.93 1647.81,224.119 1648.38,224.371 1648.95,225.486 1649.51,225.826 1650.08,225.982 1650.65,228.295 1651.22,229.39 1651.79,229.273 1652.36,230.595 1652.92,230.283 1653.49,229.055 1654.06,229.033 1654.63,231.005 1655.2,232.99 1655.77,234.911 1656.33,232.547 1656.9,232.468 1657.47,232.281 1658.04,232.102 1658.61,229.763 1659.18,228.753 1659.74,229.831 1660.31,227.846 1660.88,232.005 1661.45,230.866 1662.02,230.539 1662.59,232.279 1663.15,233.892 1663.72,232.499 1664.29,233.361 1664.86,232.111 1665.43,230.872 1666,231.672 1666.56,230.376 1667.13,230.312 1667.7,230.432 1668.27,226.211 1668.84,224.41 1669.41,221.704 1669.97,222.106 1670.54,222.465 1671.11,226.977 1671.68,231.2 1672.25,234.083 1672.82,233.756 1673.38,232.381 1673.95,229.2 1674.52,230.073 1675.09,229.921 1675.66,232.929 1676.23,232.47 1676.79,232.921 1677.36,232.699 1677.93,231.331 1678.5,233.103 1679.07,232.675 1679.64,231.269 1680.2,229.149 1680.77,225.958 1681.34,227.217 1681.91,227.231 1682.48,229.541 1683.05,230.701 1683.61,229.364 1684.18,228.09 1684.75,227.95 1685.32,228.052 1685.89,228.965 1686.46,225.702 1687.02,225.763 1687.59,225.542 1688.16,223.562 1688.73,224.785 1689.3,224.974 1689.87,222.966 1690.44,222.37 1691,225.9 1691.57,227.088 1692.14,228.195 1692.71,227.143 1693.28,227.229 1693.85,228.185 1694.41,228.309 1694.98,228.34 1695.55,228.279 1696.12,231.495 1696.69,227.984 1697.26,226.896 1697.82,226.071 1698.39,226.352 1698.96,226.609 1699.53,226.012 1700.1,226.091 1700.67,226.313 1701.23,227.426 1701.8,227.324 1702.37,228.486 1702.94,228.378 1703.51,229.379 1704.08,234.6 1704.64,234.202 1705.21,234.834 1705.78,233.374 1706.35,234.963 1706.92,234.488 1707.49,234.951 1708.05,234.432 1708.62,234.019 1709.19,231.49 1709.76,233.366 1710.33,234.103 1710.9,232.564 1711.46,232.303 1712.03,231.027 1712.6,230.592 1713.17,230.363 1713.74,228.924 1714.31,227.588 1714.87,227.571 1715.44,223.414 1716.01,224.737 1716.58,224.933 1717.15,223.982 1717.72,225.218 1718.28,223.438 1718.85,225.759 1719.42,222.94 1719.99,222.201 1720.56,221.5 1721.13,221.696 1721.69,223.194 1722.26,223.52 1722.83,224.923 1723.4,224.171 1723.97,221.498 1724.54,220.965 1725.1,222.502 1725.67,222.865 1726.24,226.537 1726.81,225.547 1727.38,224.557 1727.95,225.044 1728.51,223.293 1729.08,225.638 1729.65,226.967 1730.22,229.272 1730.79,229.157 1731.36,225.992 1731.92,227.241 1732.49,228.25 1733.06,225.229 1733.63,227.439 1734.2,226.443 1734.77,226.46 1735.33,225.659 1735.9,225.9 1736.47,228.218 1737.04,229.494 1737.61,230.814 1738.18,232.823 1738.74,229.56 1739.31,229.715 1739.88,228.917 1740.45,231.259 1741.02,229.209 1741.59,230.344 1742.15,230.388 1742.72,230.326 1743.29,229.141 1743.86,228.195 1744.43,229.417 1745,229.402 1745.56,229.172 1746.13,230.14 1746.7,229.963 1747.27,233.009 1747.84,233.588 1748.41,235.365 1748.97,233.932 1749.54,232.581 1750.11,232.171 1750.68,230.98 1751.25,230.93 1751.82,231.894 1752.38,232.586 1752.95,232.433 1753.52,232.094 1754.09,230.705 1754.66,227.653 1755.23,226.53 1755.79,226.812 1756.36,228.949 1756.93,229.081 1757.5,232.085 1758.07,231.739 1758.64,231.472 1759.21,230.264 1759.77,230.085 1760.34,231.016 1760.91,230.822 1761.48,229.672 1762.05,229.52 1762.62,229.375 1763.18,228.124 1763.75,230.271 1764.32,232.257 1764.89,229.035 1765.46,231.999 1766.03,232.662 1766.59,231.456 1767.16,231.36 1767.73,231.034 1768.3,228.735 1768.87,225.698 1769.44,224.629 1770,223.609 1770.57,222.96 1771.14,225.315 1771.71,224.404 1772.28,225.532 1772.85,222.56 1773.41,223.845 1773.98,225.249 1774.55,225.304 1775.12,225.346 1775.69,227.706 1776.26,227.694 1776.82,226.63 1777.39,228.772 1777.96,228.73 1778.53,226.49 1779.1,225.753 1779.67,225.023 1780.23,224.156 1780.8,222.603 1781.37,223.101 1781.94,225.639 1782.51,225.901 1783.08,227.063 1783.64,227.401 1784.21,229.387 1784.78,229.314 1785.35,229.604 1785.92,229.756 1786.49,230.582 1787.05,228.166 1787.62,228.358 1788.19,229.304 1788.76,226.967 1789.33,225.002 1789.9,226.374 1790.46,227.45 1791.03,230.437 1791.6,229.34 1792.17,229.15 1792.74,228.121 1793.31,228.181 1793.87,227.369 1794.44,227.264 1795.01,229.273 1795.58,228.059 1796.15,229.093 1796.72,231.804 1797.28,231.76 1797.85,232.693 1798.42,233.506 1798.99,234.317 1799.56,235.077 1800.13,233.606 1800.69,233.062 1801.26,232.902 1801.83,231.611 1802.4,230.21 1802.97,228.203 1803.54,226.088 1804.1,226.134 1804.67,225.236 1805.24,226.394 1805.81,228.544 1806.38,228.431 1806.95,228.448 1807.51,228.62 1808.08,228.586 1808.65,228.543 1809.22,227.343 1809.79,228.682 1810.36,226.616 1810.92,224.849 1811.49,226.197 1812.06,226.074 1812.63,229.248 1813.2,230.096 1813.77,228.934 1814.33,230.209 1814.9,228.232 1815.47,225.146 1816.04,225.27 1816.61,226.638 1817.18,228.809 1817.74,227.723 1818.31,224.812 1818.88,225.153 1819.45,225.285 1820.02,223.478 1820.59,223.572 1821.15,225.149 1821.72,225.438 1822.29,228.034 1822.86,227.066 1823.43,227.253 1824,228.424 1824.56,228.575 1825.13,230.803 1825.7,228.586 1826.27,226.571 1826.84,226.834 1827.41,223.967 1827.97,224.214 1828.54,224.57 1829.11,224.905 1829.68,225.231 1830.25,226.653 1830.82,227.947 1831.39,228.182 1831.95,228.402 1832.52,228.707 1833.09,229.809 1833.66,230.766 1834.23,229.468 1834.8,232.469 1835.36,232.092 1835.93,230.846 1836.5,230.926 1837.07,229.81 1837.64,228.926 1838.21,230.781 1838.77,232.594 1839.34,231.002 1839.91,231.02 1840.48,230.683 1841.05,229.677 1841.62,230.526 1842.18,230.313 1842.75,230.956 1843.32,230.756 1843.89,229.403 1844.46,229.512 1845.03,230.592 1845.59,227.372 1846.16,226.569 1846.73,227.759 1847.3,226.847 1847.87,224.92 1848.44,223.288 1849,224.565 1849.57,224.759 1850.14,228.965 1850.71,230.004 1851.28,229.756 1851.85,230.706 1852.41,233.809 1852.98,233.554 1853.55,234.354 1854.12,234.144 1854.69,233.858 1855.26,235.642 1855.82,234.973 1856.39,233.406 1856.96,230.975 1857.53,229.851 1858.1,228.745 1858.67,229.824 1859.23,228.448 1859.8,228.377 1860.37,226.062 1860.94,224.19 1861.51,224.525 1862.08,225.08 1862.64,225.29 1863.21,227.723 1863.78,226.677 1864.35,227.521 1864.92,226.397 1865.49,227.917 1866.05,227.918 1866.62,226.241 1867.19,228.432 1867.76,227.448 1868.33,225.486 1868.9,224.759 1869.46,224.095 1870.03,224.524 1870.6,222.769 1871.17,222.006 1871.74,224.579 1872.31,224.972 1872.87,224.183 1873.44,225.589 1874.01,224.706 1874.58,226.28 1875.15,224.48 1875.72,223.87 1876.28,223.373 1876.85,223.59 1877.42,223.089 1877.99,223.573 1878.56,225.053 1879.13,225.221 1879.69,225.668 1880.26,226.817 1880.83,227.063 1881.4,226.459 1881.97,227.701 1882.54,229.93 1883.1,232.001 1883.67,232.71 1884.24,232.137 1884.81,231.136 1885.38,233.074 1885.95,233.823 1886.51,235.287 1887.08,233.741 1887.65,233.549 1888.22,234.211 1888.79,229.736 1889.36,228.391 1889.92,230.721 1890.49,232.448 1891.06,234.224 1891.63,235.788 1892.2,233.468 1892.77,233.222 1893.33,232.773 1893.9,233.685 1894.47,232.336 1895.04,235.071 1895.61,236.788 1896.18,236.32 1896.74,234.74 1897.31,231.045 1897.88,232.019 1898.45,230.752 1899.02,229.429 1899.59,231.371 1900.16,232.28 1900.72,231.075 1901.29,230.943 1901.86,230.931 1902.43,230.841 1903,229.723 1903.57,229.688 1904.13,228.611 1904.7,230.362 1905.27,231.195 1905.84,230.941 1906.41,227.546 1906.98,227.29 1907.54,228.399 1908.11,229.348 1908.68,230.327 1909.25,230.02 1909.82,229.849 1910.39,227.584 1910.95,227.724 1911.52,228.896 1912.09,228.696 1912.66,227.756 1913.23,224.645 1913.8,222.796 1914.36,225.063 1914.93,226.33 1915.5,225.496 1916.07,225.666 1916.64,225.569 1917.21,224.488 1917.77,224.511 1918.34,223.78 1918.91,227.322 1919.48,228.541 1920.05,229.423 1920.62,229.053 1921.18,228.063 1921.75,232.26 1922.32,232.996 1922.89,231.679 1923.46,233.282 1924.03,234.614 1924.59,234.121 1925.16,235.614 1925.73,235.121 1926.3,233.522 1926.87,233.023 1927.44,232.482 1928,232.046 1928.57,229.337 1929.14,232.094 1929.71,232.619 1930.28,231.251 1930.85,228.814 1931.41,229.655 1931.98,229.588 1932.55,231.53 1933.12,231.079 1933.69,228.737 1934.26,230.579 1934.82,228.248 1935.39,227.267 1935.96,228.163 1936.53,227.175 1937.1,229.137 1937.67,228.837 1938.23,227.611 1938.8,227.471 1939.37,226.496 1939.94,224.49 1940.51,224.834 1941.08,225.767 1941.64,225.776 1942.21,225.843 1942.78,225.913 1943.35,226.959 1943.92,224.119 1944.49,225.517 1945.05,225.286 1945.62,226.572 1946.19,228.575 1946.76,228.56 1947.33,228.388 1947.9,227.345 1948.46,225.114 1949.03,225.372 1949.6,227.523 1950.17,229.614 1950.74,228.644 1951.31,230.595 1951.87,230.225 1952.44,231.085 1953.01,230.939 1953.58,230.682 1954.15,232.432 1954.72,232.001 1955.28,231.773 1955.85,230.352 1956.42,231.114 1956.99,231.588 1957.56,229.948 1958.13,230.816 1958.69,230.565 1959.26,227.201 1959.83,228.127 1960.4,228.057 1960.97,227.907 1961.54,227.724 1962.1,226.795 1962.67,226.824 1963.24,227.777 1963.81,228.937 1964.38,228.657 1964.95,228.527 1965.51,230.665 1966.08,230.41 1966.65,229.185 1967.22,229.933 1967.79,229.62 1968.36,231.359 1968.92,231.299 1969.49,232.107 1970.06,231.622 1970.63,231.179 1971.2,231.909 1971.77,232.647 1972.34,231.119 1972.9,229.845 1973.47,229.679 1974.04,229.45 1974.61,229.438 1975.18,231.562 1975.75,230.123 1976.31,227.696 1976.88,227.621 1977.45,225.502 1978.02,228.778 1978.59,226.695 1979.16,226.792 1979.72,224.704 1980.29,226.976 1980.86,226.143 1981.43,227.098 1982,225.954 1982.57,224.886 1983.13,225.135 1983.7,224.354 1984.27,224.604 1984.84,224.869 1985.41,226.062 1985.98,227.174 1986.54,225.911 1987.11,224.205 1987.68,223.421 1988.25,224.663 1988.82,224.794 1989.39,226.081 1989.95,224.981 1990.52,227.036 1991.09,224.942 1991.66,225.171 1992.23,227.45 1992.8,223.25 1993.36,225.449 1993.93,225.547 1994.5,225.653 1995.07,223.694 1995.64,225.056 1996.21,224.203 1996.77,222.459 1997.34,223.92 1997.91,224.26 1998.48,223.546 1999.05,224.935 1999.62,224.114 2000.18,224.478 2000.75,226.852 2001.32,228.063 2001.89,227.014 2002.46,225.894 2003.03,226.032 2003.59,225.113 2004.16,226.345 2004.73,227.645 2005.3,227.988 2005.87,229.995 2006.44,228.882 2007,228.033 2007.57,226.958 2008.14,226.119 2008.71,227.391 2009.28,228.445 2009.85,229.733 2010.41,227.717 2010.98,227.901 2011.55,227.018 2012.12,227.223 2012.69,224.493 2013.26,225.723 2013.82,227.83 2014.39,227.113 2014.96,228.929 2015.53,228.095 2016.1,228.939 2016.67,230.058 2017.23,231.089 2017.8,232.992 2018.37,231.663 2018.94,231.675 2019.51,228.447 2020.08,228.638 2020.64,229.821 2021.21,225.41 2021.78,225.686 2022.35,224.834 2022.92,226.034 2023.49,226.505 2024.05,227.641 2024.62,227.818 2025.19,227.717 2025.76,226.698 2026.33,226.992 2026.9,225.973 2027.46,225.22 2028.03,226.541 2028.6,226.859 2029.17,226.885 2029.74,228.14 2030.31,227.066 2030.87,229.413 2031.44,228.57 2032.01,226.535 2032.58,228.978 2033.15,230.198 2033.72,230.012 2034.28,229.961 2034.85,230.838 2035.42,230.648 2035.99,230.313 2036.56,229.157 2037.13,228.072 2037.69,229.237 2038.26,228.39 2038.83,228.259 2039.4,227.303 2039.97,227.648 2040.54,228.696 2041.11,228.761 2041.67,231.83 2042.24,230.333 2042.81,232.326 2043.38,233.323 2043.95,231.959 2044.52,232.647 2045.08,232.423 2045.65,231.931 2046.22,229.917 2046.79,228.731 2047.36,229.749 2047.93,229.719 2048.49,230.754 2049.06,231.468 2049.63,232.26 2050.2,233.111 2050.77,233.005 2051.34,230.659 2051.9,228.343 2052.47,230.344 2053.04,227.166 2053.61,230.388 2054.18,229.244 2054.75,229.236 2055.31,228.174 2055.88,228.172 2056.45,228.179 2057.02,227.108 2057.59,227.328 2058.16,227.288 2058.72,225.323 2059.29,227.714 2059.86,228.947 2060.43,228.625 2061,228.516 2061.57,229.681 2062.13,229.694 2062.7,227.705 2063.27,229.749 2063.84,230.574 2064.41,230.475 2064.98,230.253 2065.54,227.824 2066.11,226.836 2066.68,225.94 2067.25,225.849 2067.82,227.2 2068.39,227.246 2068.95,226.449 2069.52,228.604 2070.09,229.415 2070.66,228.362 2071.23,230.331 2071.8,230.053 2072.36,228.864 2072.93,228.87 2073.5,227.785 2074.07,228.905 2074.64,228.786 2075.21,227.72 2075.77,226.873 2076.34,226.663 2076.91,228.786 2077.48,228.713 2078.05,228.768 2078.62,227.737 2079.18,229.842 2079.75,230.554 2080.32,230.42 2080.89,230.265 2081.46,229.017 2082.03,231.221 2082.59,231.136 2083.16,231.062 2083.73,229.551 2084.3,230.718 2084.87,229.496 2085.44,228.376 2086,229.393 2086.57,228.16 2087.14,227.199 2087.71,226.374 2088.28,223.416 2088.85,224.613 2089.41,223.808 2089.98,227.351 2090.55,225.391 2091.12,227.711 2091.69,227.95 2092.26,229.051 2092.82,227.984 2093.39,227.017 2093.96,224.142 2094.53,222.603 2095.1,219.895 2095.67,221.536 2096.23,223.086 2096.8,224.575 2097.37,225.996 2097.94,226.238 2098.51,227.433 2099.08,226.324 2099.64,224.403 2100.21,223.568 2100.78,222.778 2101.35,224.397 2101.92,223.568 2102.49,221.896 2103.05,221.436 2103.62,221.178 2104.19,222.858 2104.76,224.273 2105.33,223.76 2105.9,224.165 2106.46,226.5 2107.03,225.734 2107.6,228.041 2108.17,230.163 2108.74,231.111 2109.31,232.122 2109.87,230.968 2110.44,230.863 2111.01,232.734 2111.58,231.641 2112.15,232.586 2112.72,233.277 2113.29,233.059 2113.85,235.757 2114.42,233.239 2114.99,232.184 2115.56,229.713 2116.13,230.65 2116.7,232.703 2117.26,231.414 2117.83,231.213 2118.4,229.994 2118.97,231.963 2119.54,231.967 2120.11,230.935 2120.67,228.745 2121.24,228.76 2121.81,227.687 2122.38,228.806 2122.95,231.123 2123.52,230.935 2124.08,231.583 2124.65,231.513 2125.22,233.367 2125.79,236.138 2126.36,233.596 2126.93,232.183 2127.49,232.038 2128.06,233.958 2128.63,230.551 2129.2,230.383 2129.77,231.138 2130.34,228.774 2130.9,227.69 2131.47,228.616 2132.04,229.703 2132.61,229.546 2133.18,229.207 2133.75,230.223 2134.31,229.229 2134.88,229.345 2135.45,229.374 2136.02,229.341 2136.59,228.144 2137.16,226.243 2137.72,227.565 2138.29,226.689 2138.86,228.871 2139.43,227.947 2140,229.072 2140.57,227.933 2141.13,229.165 2141.7,226.897 2142.27,227.114 2142.84,227.11 2143.41,227.376 2143.98,228.659 2144.54,228.7 2145.11,230.679 2145.68,230.244 2146.25,229.992 2146.82,228.756 2147.39,225.542 2147.95,225.805 2148.52,225.851 2149.09,227.303 2149.66,227.224 2150.23,229.599 2150.8,230.712 2151.36,227.346 2151.93,225.47 2152.5,224.439 2153.07,225.739 2153.64,226.991 2154.21,228.188 2154.77,228.21 2155.34,228.368 2155.91,228.503 2156.48,227.407 2157.05,226.421 2157.62,226.403 2158.18,226.441 2158.75,226.476 2159.32,225.823 2159.89,223.841 \"/>\n<path clip-path=\"url(#clip210)\" d=\"M1625.75 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1625.75 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip210)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1625.75,1245.03 2150.8,1245.03 2150.8,1089.51 1625.75,1089.51 1625.75,1245.03 \"/>\n<polyline clip-path=\"url(#clip210)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1645.83,1141.35 1766.28,1141.35 \"/>\n<path clip-path=\"url(#clip210)\" d=\"M1793.76 1125.34 L1793.76 1132.71 L1802.53 1132.71 L1802.53 1136.02 L1793.76 1136.02 L1793.76 1150.09 Q1793.76 1153.26 1794.61 1154.16 Q1795.49 1155.07 1798.16 1155.07 L1802.53 1155.07 L1802.53 1158.63 L1798.16 1158.63 Q1793.23 1158.63 1791.35 1156.8 Q1789.48 1154.95 1789.48 1150.09 L1789.48 1136.02 L1786.35 1136.02 L1786.35 1132.71 L1789.48 1132.71 L1789.48 1125.34 L1793.76 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M1819.92 1145.6 Q1814.75 1145.6 1812.76 1146.78 Q1810.77 1147.96 1810.77 1150.81 Q1810.77 1153.08 1812.25 1154.42 Q1813.76 1155.74 1816.33 1155.74 Q1819.87 1155.74 1822 1153.24 Q1824.15 1150.72 1824.15 1146.55 L1824.15 1145.6 L1819.92 1145.6 M1828.41 1143.84 L1828.41 1158.63 L1824.15 1158.63 L1824.15 1154.7 Q1822.69 1157.06 1820.52 1158.19 Q1818.34 1159.3 1815.19 1159.3 Q1811.21 1159.3 1808.85 1157.08 Q1806.51 1154.84 1806.51 1151.09 Q1806.51 1146.71 1809.43 1144.49 Q1812.37 1142.27 1818.18 1142.27 L1824.15 1142.27 L1824.15 1141.85 Q1824.15 1138.91 1822.21 1137.31 Q1820.29 1135.69 1816.79 1135.69 Q1814.57 1135.69 1812.46 1136.22 Q1810.36 1136.76 1808.41 1137.82 L1808.41 1133.89 Q1810.75 1132.98 1812.95 1132.54 Q1815.15 1132.08 1817.23 1132.08 Q1822.86 1132.08 1825.63 1135 Q1828.41 1137.91 1828.41 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M1852.21 1136.69 Q1851.49 1136.27 1850.63 1136.09 Q1849.8 1135.88 1848.78 1135.88 Q1845.17 1135.88 1843.23 1138.24 Q1841.3 1140.58 1841.3 1144.97 L1841.3 1158.63 L1837.02 1158.63 L1837.02 1132.71 L1841.3 1132.71 L1841.3 1136.73 Q1842.65 1134.37 1844.8 1133.24 Q1846.95 1132.08 1850.03 1132.08 Q1850.47 1132.08 1851 1132.15 Q1851.54 1132.2 1852.18 1132.31 L1852.21 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M1872.9 1145.37 Q1872.9 1140.74 1870.98 1138.19 Q1869.08 1135.65 1865.63 1135.65 Q1862.21 1135.65 1860.29 1138.19 Q1858.39 1140.74 1858.39 1145.37 Q1858.39 1149.97 1860.29 1152.52 Q1862.21 1155.07 1865.63 1155.07 Q1869.08 1155.07 1870.98 1152.52 Q1872.9 1149.97 1872.9 1145.37 M1877.16 1155.41 Q1877.16 1162.03 1874.22 1165.25 Q1871.28 1168.49 1865.22 1168.49 Q1862.97 1168.49 1860.98 1168.15 Q1858.99 1167.82 1857.11 1167.13 L1857.11 1162.98 Q1858.99 1164 1860.82 1164.49 Q1862.65 1164.97 1864.54 1164.97 Q1868.73 1164.97 1870.82 1162.78 Q1872.9 1160.6 1872.9 1156.18 L1872.9 1154.07 Q1871.58 1156.36 1869.52 1157.5 Q1867.46 1158.63 1864.59 1158.63 Q1859.82 1158.63 1856.91 1155 Q1853.99 1151.36 1853.99 1145.37 Q1853.99 1139.35 1856.91 1135.72 Q1859.82 1132.08 1864.59 1132.08 Q1867.46 1132.08 1869.52 1133.22 Q1871.58 1134.35 1872.9 1136.64 L1872.9 1132.71 L1877.16 1132.71 L1877.16 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M1908.11 1144.6 L1908.11 1146.69 L1888.53 1146.69 Q1888.8 1151.09 1891.17 1153.4 Q1893.55 1155.69 1897.79 1155.69 Q1900.24 1155.69 1902.53 1155.09 Q1904.85 1154.49 1907.11 1153.28 L1907.11 1157.31 Q1904.82 1158.28 1902.42 1158.79 Q1900.01 1159.3 1897.53 1159.3 Q1891.33 1159.3 1887.69 1155.69 Q1884.08 1152.08 1884.08 1145.92 Q1884.08 1139.56 1887.51 1135.83 Q1890.96 1132.08 1896.79 1132.08 Q1902.02 1132.08 1905.05 1135.46 Q1908.11 1138.82 1908.11 1144.6 M1903.85 1143.35 Q1903.8 1139.86 1901.88 1137.78 Q1899.98 1135.69 1896.84 1135.69 Q1893.27 1135.69 1891.12 1137.71 Q1888.99 1139.72 1888.67 1143.38 L1903.85 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M1919.31 1125.34 L1919.31 1132.71 L1928.09 1132.71 L1928.09 1136.02 L1919.31 1136.02 L1919.31 1150.09 Q1919.31 1153.26 1920.17 1154.16 Q1921.05 1155.07 1923.71 1155.07 L1928.09 1155.07 L1928.09 1158.63 L1923.71 1158.63 Q1918.78 1158.63 1916.91 1156.8 Q1915.03 1154.95 1915.03 1150.09 L1915.03 1136.02 L1911.91 1136.02 L1911.91 1132.71 L1915.03 1132.71 L1915.03 1125.34 L1919.31 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M1953.39 1166.5 L1953.39 1169.81 L1928.76 1169.81 L1928.76 1166.5 L1953.39 1166.5 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip210)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1645.83,1193.19 1766.28,1193.19 \"/>\n<path clip-path=\"url(#clip210)\" d=\"M1808.06 1194.82 L1808.06 1210.47 L1803.8 1210.47 L1803.8 1194.96 Q1803.8 1191.28 1802.37 1189.45 Q1800.93 1187.62 1798.06 1187.62 Q1794.61 1187.62 1792.62 1189.82 Q1790.63 1192.02 1790.63 1195.82 L1790.63 1210.47 L1786.35 1210.47 L1786.35 1184.55 L1790.63 1184.55 L1790.63 1188.57 Q1792.16 1186.24 1794.22 1185.08 Q1796.3 1183.92 1799.01 1183.92 Q1803.48 1183.92 1805.77 1186.7 Q1808.06 1189.45 1808.06 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M1826.61 1187.53 Q1823.18 1187.53 1821.19 1190.22 Q1819.2 1192.88 1819.2 1197.53 Q1819.2 1202.18 1821.17 1204.87 Q1823.16 1207.53 1826.61 1207.53 Q1830.01 1207.53 1832 1204.85 Q1833.99 1202.16 1833.99 1197.53 Q1833.99 1192.93 1832 1190.24 Q1830.01 1187.53 1826.61 1187.53 M1826.61 1183.92 Q1832.16 1183.92 1835.33 1187.53 Q1838.5 1191.14 1838.5 1197.53 Q1838.5 1203.9 1835.33 1207.53 Q1832.16 1211.14 1826.61 1211.14 Q1821.03 1211.14 1817.86 1207.53 Q1814.71 1203.9 1814.71 1197.53 Q1814.71 1191.14 1817.86 1187.53 Q1821.03 1183.92 1826.61 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M1860.59 1188.53 Q1859.87 1188.11 1859.01 1187.93 Q1858.18 1187.72 1857.16 1187.72 Q1853.55 1187.72 1851.61 1190.08 Q1849.68 1192.42 1849.68 1196.81 L1849.68 1210.47 L1845.4 1210.47 L1845.4 1184.55 L1849.68 1184.55 L1849.68 1188.57 Q1851.03 1186.21 1853.18 1185.08 Q1855.33 1183.92 1858.41 1183.92 Q1858.85 1183.92 1859.38 1183.99 Q1859.92 1184.04 1860.56 1184.15 L1860.59 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip210)\" d=\"M1884.41 1189.52 Q1886 1186.65 1888.23 1185.29 Q1890.45 1183.92 1893.46 1183.92 Q1897.51 1183.92 1899.71 1186.77 Q1901.91 1189.59 1901.91 1194.82 L1901.91 1210.47 L1897.62 1210.47 L1897.62 1194.96 Q1897.62 1191.24 1896.3 1189.43 Q1894.98 1187.62 1892.28 1187.62 Q1888.97 1187.62 1887.04 1189.82 Q1885.12 1192.02 1885.12 1195.82 L1885.12 1210.47 L1880.84 1210.47 L1880.84 1194.96 Q1880.84 1191.21 1879.52 1189.43 Q1878.2 1187.62 1875.45 1187.62 Q1872.18 1187.62 1870.26 1189.85 Q1868.34 1192.05 1868.34 1195.82 L1868.34 1210.47 L1864.06 1210.47 L1864.06 1184.55 L1868.34 1184.55 L1868.34 1188.57 Q1869.8 1186.19 1871.84 1185.06 Q1873.87 1183.92 1876.67 1183.92 Q1879.5 1183.92 1881.47 1185.36 Q1883.46 1186.79 1884.41 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.029 ± 0.02\n  with uncertainty of ± 0.0018375537674385496\n  from 62 blocks after 5 transformations (k = 6).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.0182 ± (0.00274161, 0.00258009) (MC)\n  95% confidence interval: [-4.02329, -4.01281]) (MC)\n  linear error propagation: -4.01817 ± 0.00265154\n  |δ_y| = |0.00179872| (≤ 0.1 for normal approx)\n  Blocking successful with 15 blocks after 7 transformations (k = 8).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.018203681914569, val_l = 0.005083219020449725, val_u = 0.005391935308852958)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.step, df.shift, ylabel=\"energy\", xlabel=\"step\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.step[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.step[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip240\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip240)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip241\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip240)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip242\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip242)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip242)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip242)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip242)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip240)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1237.32 1391.71 L1237.32 1397.25 Q1234.84 1395.98 1232.17 1395.34 Q1229.49 1394.71 1226.63 1394.71 Q1222.27 1394.71 1220.07 1396.04 Q1217.91 1397.38 1217.91 1400.05 Q1217.91 1402.09 1219.47 1403.27 Q1221.03 1404.41 1225.74 1405.46 L1227.74 1405.91 Q1233.98 1407.25 1236.59 1409.7 Q1239.23 1412.12 1239.23 1416.48 Q1239.23 1421.44 1235.29 1424.34 Q1231.37 1427.23 1224.5 1427.23 Q1221.63 1427.23 1218.51 1426.66 Q1215.42 1426.12 1211.99 1425.01 L1211.99 1418.96 Q1215.23 1420.65 1218.38 1421.51 Q1221.54 1422.33 1224.62 1422.33 Q1228.76 1422.33 1230.99 1420.93 Q1233.22 1419.5 1233.22 1416.92 Q1233.22 1414.54 1231.59 1413.26 Q1230 1411.99 1224.56 1410.81 L1222.52 1410.33 Q1217.08 1409.19 1214.66 1406.83 Q1212.24 1404.45 1212.24 1400.31 Q1212.24 1395.28 1215.81 1392.54 Q1219.37 1389.8 1225.93 1389.8 Q1229.17 1389.8 1232.04 1390.28 Q1234.9 1390.76 1237.32 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1254.35 1380.54 L1254.35 1390.66 L1266.41 1390.66 L1266.41 1395.22 L1254.35 1395.22 L1254.35 1414.57 Q1254.35 1418.93 1255.53 1420.17 Q1256.74 1421.41 1260.4 1421.41 L1266.41 1421.41 L1266.41 1426.31 L1260.4 1426.31 Q1253.62 1426.31 1251.04 1423.8 Q1248.46 1421.25 1248.46 1414.57 L1248.46 1395.22 L1244.17 1395.22 L1244.17 1390.66 L1248.46 1390.66 L1248.46 1380.54 L1254.35 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1304.61 1407.02 L1304.61 1409.89 L1277.68 1409.89 Q1278.06 1415.94 1281.31 1419.12 Q1284.59 1422.27 1290.41 1422.27 Q1293.79 1422.27 1296.94 1421.44 Q1300.12 1420.61 1303.24 1418.96 L1303.24 1424.5 Q1300.09 1425.83 1296.78 1426.53 Q1293.47 1427.23 1290.06 1427.23 Q1281.53 1427.23 1276.54 1422.27 Q1271.57 1417.3 1271.57 1408.84 Q1271.57 1400.08 1276.28 1394.96 Q1281.02 1389.8 1289.04 1389.8 Q1296.24 1389.8 1300.41 1394.45 Q1304.61 1399.07 1304.61 1407.02 M1298.75 1405.3 Q1298.69 1400.5 1296.05 1397.63 Q1293.44 1394.77 1289.11 1394.77 Q1284.21 1394.77 1281.25 1397.54 Q1278.32 1400.31 1277.87 1405.34 L1298.75 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1319.89 1420.96 L1319.89 1439.87 L1314 1439.87 L1314 1390.66 L1319.89 1390.66 L1319.89 1396.07 Q1321.73 1392.89 1324.53 1391.36 Q1327.37 1389.8 1331.28 1389.8 Q1337.77 1389.8 1341.82 1394.96 Q1345.89 1400.12 1345.89 1408.52 Q1345.89 1416.92 1341.82 1422.08 Q1337.77 1427.23 1331.28 1427.23 Q1327.37 1427.23 1324.53 1425.71 Q1321.73 1424.15 1319.89 1420.96 M1339.81 1408.52 Q1339.81 1402.06 1337.14 1398.4 Q1334.5 1394.71 1329.85 1394.71 Q1325.2 1394.71 1322.53 1398.4 Q1319.89 1402.06 1319.89 1408.52 Q1319.89 1414.98 1322.53 1418.67 Q1325.2 1422.33 1329.85 1422.33 Q1334.5 1422.33 1337.14 1418.67 Q1339.81 1414.98 1339.81 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip242)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1147.33 2211.02,1147.33 \"/>\n<polyline clip-path=\"url(#clip242)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,988.206 2211.02,988.206 \"/>\n<polyline clip-path=\"url(#clip242)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,829.077 2211.02,829.077 \"/>\n<polyline clip-path=\"url(#clip242)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,669.948 2211.02,669.948 \"/>\n<polyline clip-path=\"url(#clip242)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,510.819 2211.02,510.819 \"/>\n<polyline clip-path=\"url(#clip242)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,351.69 2211.02,351.69 \"/>\n<polyline clip-path=\"url(#clip242)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,192.561 2211.02,192.561 \"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1147.33 365.751,1147.33 \"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,988.206 365.751,988.206 \"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,829.077 365.751,829.077 \"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,669.948 365.751,669.948 \"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,510.819 365.751,510.819 \"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,351.69 365.751,351.69 \"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,192.561 365.751,192.561 \"/>\n<path clip-path=\"url(#clip240)\" d=\"M298.909 1133.13 Q295.298 1133.13 293.469 1136.7 Q291.664 1140.24 291.664 1147.37 Q291.664 1154.48 293.469 1158.04 Q295.298 1161.58 298.909 1161.58 Q302.543 1161.58 304.349 1158.04 Q306.177 1154.48 306.177 1147.37 Q306.177 1140.24 304.349 1136.7 Q302.543 1133.13 298.909 1133.13 M298.909 1129.43 Q304.719 1129.43 307.775 1134.04 Q310.853 1138.62 310.853 1147.37 Q310.853 1156.1 307.775 1160.7 Q304.719 1165.29 298.909 1165.29 Q293.099 1165.29 290.02 1160.7 Q286.964 1156.1 286.964 1147.37 Q286.964 1138.62 290.02 1134.04 Q293.099 1129.43 298.909 1129.43 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M259.557 1001.55 L267.196 1001.55 L267.196 975.185 L258.886 976.851 L258.886 972.592 L267.15 970.926 L271.826 970.926 L271.826 1001.55 L279.465 1001.55 L279.465 1005.49 L259.557 1005.49 L259.557 1001.55 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M298.909 974.004 Q295.298 974.004 293.469 977.569 Q291.664 981.111 291.664 988.24 Q291.664 995.347 293.469 998.911 Q295.298 1002.45 298.909 1002.45 Q302.543 1002.45 304.349 998.911 Q306.177 995.347 306.177 988.24 Q306.177 981.111 304.349 977.569 Q302.543 974.004 298.909 974.004 M298.909 970.301 Q304.719 970.301 307.775 974.907 Q310.853 979.49 310.853 988.24 Q310.853 996.967 307.775 1001.57 Q304.719 1006.16 298.909 1006.16 Q293.099 1006.16 290.02 1001.57 Q286.964 996.967 286.964 988.24 Q286.964 979.49 290.02 974.907 Q293.099 970.301 298.909 970.301 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M262.775 842.421 L279.094 842.421 L279.094 846.357 L257.15 846.357 L257.15 842.421 Q259.812 839.667 264.395 835.037 Q269.002 830.384 270.182 829.042 Q272.428 826.519 273.307 824.783 Q274.21 823.023 274.21 821.334 Q274.21 818.579 272.266 816.843 Q270.344 815.107 267.242 815.107 Q265.043 815.107 262.59 815.871 Q260.159 816.634 257.381 818.185 L257.381 813.463 Q260.205 812.329 262.659 811.75 Q265.113 811.172 267.15 811.172 Q272.52 811.172 275.715 813.857 Q278.909 816.542 278.909 821.033 Q278.909 823.162 278.099 825.084 Q277.312 826.982 275.205 829.574 Q274.627 830.246 271.525 833.463 Q268.423 836.658 262.775 842.421 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M298.909 814.875 Q295.298 814.875 293.469 818.44 Q291.664 821.982 291.664 829.111 Q291.664 836.218 293.469 839.782 Q295.298 843.324 298.909 843.324 Q302.543 843.324 304.349 839.782 Q306.177 836.218 306.177 829.111 Q306.177 821.982 304.349 818.44 Q302.543 814.875 298.909 814.875 M298.909 811.172 Q304.719 811.172 307.775 815.778 Q310.853 820.361 310.853 829.111 Q310.853 837.838 307.775 842.445 Q304.719 847.028 298.909 847.028 Q293.099 847.028 290.02 842.445 Q286.964 837.838 286.964 829.111 Q286.964 820.361 290.02 815.778 Q293.099 811.172 298.909 811.172 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M272.914 668.593 Q276.27 669.311 278.145 671.579 Q280.043 673.848 280.043 677.181 Q280.043 682.297 276.525 685.098 Q273.006 687.899 266.525 687.899 Q264.349 687.899 262.034 687.459 Q259.742 687.042 257.289 686.186 L257.289 681.672 Q259.233 682.806 261.548 683.385 Q263.863 683.964 266.386 683.964 Q270.784 683.964 273.076 682.228 Q275.39 680.491 275.39 677.181 Q275.39 674.126 273.238 672.413 Q271.108 670.677 267.289 670.677 L263.261 670.677 L263.261 666.834 L267.474 666.834 Q270.923 666.834 272.752 665.468 Q274.58 664.08 274.58 661.487 Q274.58 658.825 272.682 657.413 Q270.807 655.978 267.289 655.978 Q265.367 655.978 263.168 656.394 Q260.969 656.811 258.33 657.691 L258.33 653.524 Q260.992 652.783 263.307 652.413 Q265.645 652.043 267.705 652.043 Q273.029 652.043 276.131 654.473 Q279.233 656.88 279.233 661.001 Q279.233 663.871 277.59 665.862 Q275.946 667.83 272.914 668.593 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M298.909 655.746 Q295.298 655.746 293.469 659.311 Q291.664 662.853 291.664 669.982 Q291.664 677.089 293.469 680.654 Q295.298 684.195 298.909 684.195 Q302.543 684.195 304.349 680.654 Q306.177 677.089 306.177 669.982 Q306.177 662.853 304.349 659.311 Q302.543 655.746 298.909 655.746 M298.909 652.043 Q304.719 652.043 307.775 656.649 Q310.853 661.232 310.853 669.982 Q310.853 678.709 307.775 683.316 Q304.719 687.899 298.909 687.899 Q293.099 687.899 290.02 683.316 Q286.964 678.709 286.964 669.982 Q286.964 661.232 290.02 656.649 Q293.099 652.043 298.909 652.043 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M271.594 497.613 L259.789 516.062 L271.594 516.062 L271.594 497.613 M270.367 493.539 L276.247 493.539 L276.247 516.062 L281.177 516.062 L281.177 519.95 L276.247 519.95 L276.247 528.099 L271.594 528.099 L271.594 519.95 L255.992 519.95 L255.992 515.437 L270.367 493.539 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M298.909 496.617 Q295.298 496.617 293.469 500.182 Q291.664 503.724 291.664 510.853 Q291.664 517.96 293.469 521.525 Q295.298 525.066 298.909 525.066 Q302.543 525.066 304.349 521.525 Q306.177 517.96 306.177 510.853 Q306.177 503.724 304.349 500.182 Q302.543 496.617 298.909 496.617 M298.909 492.914 Q304.719 492.914 307.775 497.52 Q310.853 502.103 310.853 510.853 Q310.853 519.58 307.775 524.187 Q304.719 528.77 298.909 528.77 Q293.099 528.77 290.02 524.187 Q286.964 519.58 286.964 510.853 Q286.964 502.103 290.02 497.52 Q293.099 492.914 298.909 492.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M258.793 334.41 L277.15 334.41 L277.15 338.345 L263.076 338.345 L263.076 346.817 Q264.094 346.47 265.113 346.308 Q266.131 346.122 267.15 346.122 Q272.937 346.122 276.316 349.294 Q279.696 352.465 279.696 357.882 Q279.696 363.46 276.224 366.562 Q272.752 369.641 266.432 369.641 Q264.256 369.641 261.988 369.271 Q259.742 368.9 257.335 368.159 L257.335 363.46 Q259.418 364.595 261.641 365.15 Q263.863 365.706 266.34 365.706 Q270.344 365.706 272.682 363.599 Q275.02 361.493 275.02 357.882 Q275.02 354.271 272.682 352.164 Q270.344 350.058 266.34 350.058 Q264.465 350.058 262.59 350.474 Q260.738 350.891 258.793 351.771 L258.793 334.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M298.909 337.488 Q295.298 337.488 293.469 341.053 Q291.664 344.595 291.664 351.724 Q291.664 358.831 293.469 362.396 Q295.298 365.937 298.909 365.937 Q302.543 365.937 304.349 362.396 Q306.177 358.831 306.177 351.724 Q306.177 344.595 304.349 341.053 Q302.543 337.488 298.909 337.488 M298.909 333.785 Q304.719 333.785 307.775 338.391 Q310.853 342.974 310.853 351.724 Q310.853 360.451 307.775 365.058 Q304.719 369.641 298.909 369.641 Q293.099 369.641 290.02 365.058 Q286.964 360.451 286.964 351.724 Q286.964 342.974 290.02 338.391 Q293.099 333.785 298.909 333.785 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M269.326 190.697 Q266.178 190.697 264.326 192.85 Q262.497 195.003 262.497 198.753 Q262.497 202.48 264.326 204.655 Q266.178 206.808 269.326 206.808 Q272.474 206.808 274.303 204.655 Q276.154 202.48 276.154 198.753 Q276.154 195.003 274.303 192.85 Q272.474 190.697 269.326 190.697 M278.608 176.044 L278.608 180.304 Q276.849 179.47 275.043 179.031 Q273.261 178.591 271.502 178.591 Q266.872 178.591 264.418 181.716 Q261.988 184.841 261.641 191.16 Q263.006 189.146 265.066 188.081 Q267.127 186.993 269.603 186.993 Q274.812 186.993 277.821 190.165 Q280.853 193.313 280.853 198.753 Q280.853 204.077 277.705 207.294 Q274.557 210.512 269.326 210.512 Q263.33 210.512 260.159 205.929 Q256.988 201.322 256.988 192.595 Q256.988 184.401 260.877 179.54 Q264.766 174.656 271.316 174.656 Q273.076 174.656 274.858 175.003 Q276.664 175.35 278.608 176.044 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M298.909 178.359 Q295.298 178.359 293.469 181.924 Q291.664 185.466 291.664 192.595 Q291.664 199.702 293.469 203.267 Q295.298 206.808 298.909 206.808 Q302.543 206.808 304.349 203.267 Q306.177 199.702 306.177 192.595 Q306.177 185.466 304.349 181.924 Q302.543 178.359 298.909 178.359 M298.909 174.656 Q304.719 174.656 307.775 179.262 Q310.853 183.845 310.853 192.595 Q310.853 201.322 307.775 205.929 Q304.719 210.512 298.909 210.512 Q293.099 210.512 290.02 205.929 Q286.964 201.322 286.964 192.595 Q286.964 183.845 290.02 179.262 Q293.099 174.656 298.909 174.656 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip242)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1030.08 400.199,922.366 400.786,823.531 401.372,851.931 401.958,868.393 402.545,878.635 403.131,796.609 403.718,717.608 404.304,646.004 404.891,581.365 405.477,522.471 406.063,467.607 406.65,419.44 407.236,377.091 407.823,338.256 408.409,303.275 408.995,271.314 409.582,244.583 410.168,219.895 410.755,298.527 411.341,277.04 411.927,258.616 412.514,242.343 413.1,230.226 413.687,221.06 414.273,247.112 414.86,240.244 415.446,234.759 416.032,259.226 416.619,255.895 417.205,278.043 417.792,275.462 418.378,275.512 418.964,317.17 419.551,318.531 420.137,338.191 420.724,358.881 421.31,362.251 421.896,380.954 422.483,425.989 423.069,455.908 423.656,459.388 424.242,475.497 424.829,492.286 425.415,497.712 426.001,522.958 426.588,530.202 427.174,546.6 427.761,554.33 428.347,577.889 428.933,586.477 429.52,595.762 430.106,604.024 430.693,612.841 431.279,628.817 431.865,638.832 432.452,649.33 433.038,664.882 433.625,685.132 434.211,700.335 434.798,724.435 435.384,737.391 435.97,759.231 436.557,766.302 437.143,778.333 437.73,794.629 438.316,801.942 438.902,816.851 439.489,831.446 440.075,853.02 440.662,869.501 441.248,874.862 441.835,883.956 442.421,892.857 443.007,905.454 443.594,914.587 444.18,923.37 444.767,934.969 445.353,945.662 445.939,951.075 446.526,958.872 447.112,969.571 447.699,979.192 448.285,989.382 448.871,998.868 449.458,1005.33 450.044,1014.35 450.631,1022.91 451.217,1033.43 451.804,1037.04 452.39,1040.72 452.976,1048.48 453.563,1054.04 454.149,1059.6 454.736,1064.99 455.322,1072.48 455.908,1077.86 456.495,1080.73 457.081,1094.06 457.668,1104.5 458.254,1110.22 458.84,1114.15 459.427,1117.86 460.013,1123.46 460.6,1127.09 461.186,1130.48 461.773,1135.58 462.359,1138.82 462.945,1141.79 463.532,1146.79 464.118,1149.75 464.705,1151.12 465.291,1152.31 465.877,1158.71 466.464,1159.83 467.05,1159.28 467.637,1160.48 468.223,1163.35 468.809,1166.09 469.396,1168.75 469.982,1171.48 470.569,1172.53 471.155,1176.8 471.742,1179.22 472.328,1181.72 472.914,1179.52 473.501,1182.13 474.087,1184.57 474.674,1187.14 475.26,1189.79 475.846,1192.59 476.433,1195.07 477.019,1204.78 477.606,1206.2 478.192,1206.37 478.778,1207.98 479.365,1207.8 479.951,1206.73 480.538,1208.52 481.124,1208.59 481.711,1212.14 482.297,1212.56 482.883,1212.64 483.47,1213.09 484.056,1213.38 484.643,1215.28 485.229,1218.55 485.815,1218.83 486.402,1218.95 486.988,1221.95 487.575,1220.46 488.161,1224.93 488.748,1226.35 489.334,1224.68 489.92,1224.51 490.507,1228.89 491.093,1234.45 491.68,1232.18 492.266,1234.87 492.852,1235.73 493.439,1237.88 494.025,1237.24 494.612,1237.9 495.198,1242.8 495.784,1243.31 496.371,1243.59 496.957,1244.1 497.544,1243.01 498.13,1246.44 498.717,1248.3 499.303,1247.03 499.889,1247.48 500.476,1250.53 501.062,1249.19 501.649,1245.4 502.235,1244.49 502.821,1246.31 503.408,1243.93 503.994,1243.3 504.581,1243.66 505.167,1245.34 505.753,1244.67 506.34,1242.47 506.926,1241.53 507.513,1240.72 508.099,1243.24 508.686,1240.09 509.272,1239.38 509.858,1238.9 510.445,1237.22 511.031,1236.68 511.618,1238.12 512.204,1236.18 512.79,1236.03 513.377,1235.7 513.963,1236.76 514.55,1237.95 515.136,1236.13 515.722,1239.59 516.309,1241.87 516.895,1242.59 517.482,1243.48 518.068,1243.95 518.655,1245.72 519.241,1249.05 519.827,1247.86 520.414,1240.29 521,1242.63 521.587,1242.09 522.173,1238.81 522.759,1238.45 523.346,1237.64 523.932,1235.9 524.519,1237.07 525.105,1236.83 525.691,1233.84 526.278,1233.65 526.864,1234.63 527.451,1232.82 528.037,1234.09 528.624,1232.39 529.21,1232.38 529.796,1233.38 530.383,1231.9 530.969,1232.15 531.556,1234.84 532.142,1233.36 532.728,1233.22 533.315,1234.47 533.901,1234.32 534.488,1238.01 535.074,1240.17 535.661,1243.52 536.247,1242.91 536.833,1243.72 537.42,1242.88 538.006,1246.11 538.593,1247.66 539.179,1245.52 539.765,1246.08 540.352,1245.08 540.938,1245.2 541.525,1245.53 542.111,1244.51 542.697,1243.71 543.284,1240.64 543.87,1242.46 544.457,1240.59 545.043,1239.86 545.63,1239.39 546.216,1240.26 546.802,1239.36 547.389,1238.73 547.975,1233 548.562,1232.74 549.148,1232.43 549.734,1233.7 550.321,1233.21 550.907,1235.7 551.494,1235.48 552.08,1235.23 552.666,1234.9 553.253,1234.54 553.839,1236.69 554.426,1235 555.012,1237.2 555.599,1235.31 556.185,1233.62 556.771,1233.27 557.358,1234.19 557.944,1234.95 558.531,1231.81 559.117,1234.14 559.703,1233.7 560.29,1233.32 560.876,1232.95 561.463,1233.87 562.049,1233.59 562.635,1234.63 563.222,1234.13 563.808,1234.91 564.395,1231.89 564.981,1233.93 565.568,1232.2 566.154,1231.87 566.74,1231.58 567.327,1231.04 567.913,1233.33 568.5,1234.29 569.086,1235.23 569.672,1237.08 570.259,1236.92 570.845,1234.97 571.432,1231.79 572.018,1232.56 572.605,1233.61 573.191,1230.7 573.777,1229.34 574.364,1230.43 574.95,1230.23 575.537,1231.02 576.123,1232.45 576.709,1230.6 577.296,1231.84 577.882,1232.46 578.469,1234.62 579.055,1234.19 579.641,1233.45 580.228,1232.89 580.814,1232.33 581.401,1231.8 581.987,1230.06 582.574,1229.88 583.16,1229.38 583.746,1229.11 584.333,1228.77 584.919,1227.56 585.506,1228.89 586.092,1231.22 586.678,1228.07 587.265,1230.31 587.851,1230.28 588.438,1227.54 589.024,1228.79 589.61,1228.27 590.197,1226.93 590.783,1227.81 591.37,1229 591.956,1228.74 592.543,1229.77 593.129,1230.93 593.715,1230.55 594.302,1227.62 594.888,1225.82 595.475,1225.77 596.061,1224.17 596.647,1223.99 597.234,1225.28 597.82,1226.18 598.407,1226.16 598.993,1227.31 599.579,1227.41 600.166,1227.2 600.752,1225.81 601.339,1224.28 601.925,1225.31 602.512,1225.23 603.098,1225.04 603.684,1227.35 604.271,1228.47 604.857,1229.61 605.444,1229.23 606.03,1228.63 606.616,1228.31 607.203,1231.84 607.789,1232.4 608.376,1233.5 608.962,1231.68 609.548,1232.63 610.135,1231.9 610.721,1231.4 611.308,1232.36 611.894,1230.61 612.481,1230.25 613.067,1231.31 613.653,1232.23 614.24,1231.66 614.826,1231.08 615.413,1229.21 615.999,1227.48 616.585,1228.46 617.172,1229.43 617.758,1229.07 618.345,1229.8 618.931,1229.04 619.518,1225.97 620.104,1224.32 620.69,1223.92 621.277,1224.92 621.863,1224.9 622.45,1224.65 623.036,1223.43 623.622,1224.77 624.209,1223.44 624.795,1220.98 625.382,1219.81 625.968,1221.37 626.554,1221.44 627.141,1220.47 627.727,1223.04 628.314,1224.46 628.9,1226.88 629.487,1228.14 630.073,1228.98 630.659,1228.39 631.246,1222.86 631.832,1226.68 632.419,1227.84 633.005,1225.95 633.591,1226.76 634.178,1224.8 634.764,1223.09 635.351,1221.66 635.937,1220.44 636.523,1225.48 637.11,1226.57 637.696,1224.58 638.283,1224.31 638.869,1225.31 639.456,1225.37 640.042,1226.43 640.628,1226.13 641.215,1227.15 641.801,1226.55 642.388,1227.59 642.974,1227.32 643.56,1223.98 644.147,1223.61 644.733,1223.29 645.32,1221.75 645.906,1224.29 646.492,1225.33 647.079,1227.51 647.665,1224.46 648.252,1224.33 648.838,1226.87 649.425,1227.72 650.011,1228.42 650.597,1229.41 651.184,1228.8 651.77,1229.37 652.357,1228.52 652.943,1226.85 653.529,1225.49 654.116,1224.9 654.702,1223.45 655.289,1222.01 655.875,1220.55 656.462,1215.34 657.048,1215.42 657.634,1212.78 658.221,1210.47 658.807,1211.02 659.394,1211.41 659.98,1212.92 660.566,1210.59 661.153,1211.01 661.739,1211.54 662.326,1209.42 662.912,1208.83 663.498,1208.16 664.085,1208.93 664.671,1209.4 665.258,1212.53 665.844,1216.72 666.431,1214.33 667.017,1217.19 667.603,1217.55 668.19,1217.53 668.776,1216.21 669.363,1215.15 669.949,1214.05 670.535,1213.15 671.122,1213.58 671.708,1213.79 672.295,1216.4 672.881,1215.14 673.467,1216.79 674.054,1219.17 674.64,1223.05 675.227,1224.21 675.813,1225.42 676.4,1223.57 676.986,1224.6 677.572,1224.12 678.159,1226.27 678.745,1227.13 679.332,1222.79 679.918,1221.23 680.504,1223.52 681.091,1225.91 681.677,1226.82 682.264,1229.04 682.85,1228.75 683.436,1231.99 684.023,1231.52 684.609,1232.09 685.196,1230.13 685.782,1227.2 686.369,1226.84 686.955,1226.63 687.541,1227.45 688.128,1224.34 688.714,1221.62 689.301,1220.38 689.887,1219.09 690.473,1218.83 691.06,1220 691.646,1222.2 692.233,1218.2 692.819,1215.29 693.405,1215.45 693.992,1214.27 694.578,1214.09 695.165,1214.56 695.751,1212.95 696.338,1213.18 696.924,1213.57 697.51,1213.79 698.097,1212.69 698.683,1211.63 699.27,1214.36 699.856,1214.13 700.442,1213.3 701.029,1212.16 701.615,1211.36 702.202,1213.02 702.788,1210.65 703.375,1214.96 703.961,1214.86 704.547,1214.75 705.134,1214.81 705.72,1214.85 706.307,1219.97 706.893,1215.83 707.479,1217.33 708.066,1218.49 708.652,1224.64 709.239,1228.28 709.825,1227.57 710.411,1227.02 710.998,1227.77 711.584,1229.97 712.171,1229.36 712.757,1228.71 713.344,1225.24 713.93,1223.65 714.516,1223.22 715.103,1226.66 715.689,1225.82 716.276,1225.14 716.862,1225.88 717.448,1224.2 718.035,1226.37 718.621,1228.63 719.208,1231.63 719.794,1231.89 720.38,1227.17 720.967,1229.18 721.553,1229.73 722.14,1228.78 722.726,1229.06 723.313,1225.89 723.899,1224.06 724.485,1224.9 725.072,1223.18 725.658,1221.59 726.245,1219.84 726.831,1221.01 727.417,1220.76 728.004,1220.5 728.59,1218.78 729.177,1217.71 729.763,1217.4 730.349,1216.18 730.936,1218.8 731.522,1218.58 732.109,1218.19 732.695,1216.5 733.282,1217.57 733.868,1218.53 734.454,1217.26 735.041,1218.56 735.627,1218.1 736.214,1217.89 736.8,1216.44 737.386,1216.15 737.973,1215.87 738.559,1216.03 739.146,1218.26 739.732,1216.98 740.318,1218.17 740.905,1216.8 741.491,1217.9 742.078,1218.97 742.664,1217.51 743.251,1217.5 743.837,1217.35 744.423,1217.16 745.01,1216.05 745.596,1214.84 746.183,1212.05 746.769,1213.6 747.355,1216.05 747.942,1214.68 748.528,1217.29 749.115,1214.69 749.701,1214.71 750.288,1215.72 750.874,1214.4 751.46,1213.07 752.047,1210.39 752.633,1209.44 753.22,1208.58 753.806,1208.94 754.392,1210.62 754.979,1211.16 755.565,1214.06 756.152,1212.73 756.738,1210.25 757.324,1210.11 757.911,1211.7 758.497,1210.76 759.084,1213.65 759.67,1212.31 760.257,1211.1 760.843,1211.35 761.429,1212.84 762.016,1215.77 762.602,1214.24 763.189,1214.28 763.775,1214.26 764.361,1212.98 764.948,1210.46 765.534,1209.45 766.121,1211.02 766.707,1211.07 767.293,1211.04 767.88,1211.26 768.466,1214.04 769.053,1215.41 769.639,1212.5 770.226,1213.98 770.812,1215.21 771.398,1213.85 771.985,1214.11 772.571,1214.28 773.158,1214.25 773.744,1214.48 774.33,1214.76 774.917,1218.65 775.503,1216.95 776.09,1215.4 776.676,1213.94 777.262,1215.13 777.849,1215.24 778.435,1215.01 779.022,1214.87 779.608,1214.8 780.195,1213.41 780.781,1213.54 781.367,1213.63 781.954,1213.83 782.54,1212.6 783.127,1211.36 783.713,1211.45 784.299,1211.64 784.886,1210.52 785.472,1212.25 786.059,1214.9 786.645,1215 787.232,1212.62 787.818,1213 788.404,1214.29 788.991,1214.36 789.577,1213.03 790.164,1213.12 790.75,1210.93 791.336,1209.71 791.923,1207.43 792.509,1208 793.096,1209.85 793.682,1211.58 794.268,1211.75 794.855,1212.15 795.441,1212.37 796.028,1212.6 796.614,1214.1 797.201,1216.96 797.787,1216.88 798.373,1215.49 798.96,1216.74 799.546,1218.05 800.133,1218.35 800.719,1219.34 801.305,1222.96 801.892,1224.12 802.478,1223.6 803.065,1223.24 803.651,1225.32 804.237,1225.01 804.824,1224.27 805.41,1224.96 805.997,1224.23 806.583,1220.97 807.17,1220.44 807.756,1222.43 808.342,1220.77 808.929,1221.78 809.515,1220.16 810.102,1221.12 810.688,1220.67 811.274,1220 811.861,1219.68 812.447,1218.03 813.034,1219.2 813.62,1220.35 814.206,1217.51 814.793,1215.83 815.379,1216.99 815.966,1215.54 816.552,1214.02 817.139,1215.34 817.725,1216.48 818.311,1217.42 818.898,1218.48 819.484,1217.03 820.071,1215.53 820.657,1216.73 821.243,1213.92 821.83,1216.46 822.416,1215.01 823.003,1213.74 823.589,1214.97 824.175,1214.96 824.762,1214.63 825.348,1214.41 825.935,1215.52 826.521,1216.52 827.108,1216.35 827.694,1216.09 828.28,1213.35 828.867,1213.41 829.453,1213.66 830.04,1213.52 830.626,1213.74 831.212,1212.62 831.799,1212.56 832.385,1213.64 832.972,1213.4 833.558,1213.33 834.145,1213.33 834.731,1212.13 835.317,1215.86 835.904,1215.55 836.49,1214.13 837.077,1213.96 837.663,1213.93 838.249,1212.63 838.836,1211.35 839.422,1211.64 840.009,1210.7 840.595,1212.07 841.181,1210.73 841.768,1209.61 842.354,1209.72 842.941,1208.72 843.527,1207.82 844.114,1208.15 844.7,1208.51 845.286,1210.01 845.873,1208.97 846.459,1209.61 847.046,1209.99 847.632,1210.16 848.218,1208.96 848.805,1209.44 849.391,1210.99 849.978,1212.3 850.564,1213.36 851.15,1213.6 851.737,1214.65 852.323,1213.04 852.91,1214.1 853.496,1215.39 854.083,1214.97 854.669,1216.11 855.255,1217.37 855.842,1215.75 856.428,1215.62 857.015,1215.82 857.601,1215.57 858.187,1217.93 858.774,1215.05 859.36,1210.79 859.947,1212.38 860.533,1213.39 861.119,1217.29 861.706,1214.66 862.292,1213.48 862.879,1214.83 863.465,1216.16 864.052,1215.91 864.638,1214.35 865.224,1214.26 865.811,1215.6 866.397,1216.7 866.984,1217.97 867.57,1216.33 868.156,1215.25 868.743,1213.93 869.329,1213.99 869.916,1213.74 870.502,1213.71 871.089,1209.9 871.675,1210.08 872.261,1210.23 872.848,1212.73 873.434,1212.87 874.021,1214.1 874.607,1214.08 875.193,1214.46 875.78,1215.66 876.366,1216.57 876.953,1217.86 877.539,1219.02 878.125,1215.14 878.712,1214.94 879.298,1217.26 879.885,1216.96 880.471,1218.1 881.058,1216.5 881.644,1216.74 882.23,1217.64 882.817,1217.36 883.403,1216.01 883.99,1218.54 884.576,1220.73 885.162,1216.39 885.749,1213.38 886.335,1214.72 886.922,1214.54 887.508,1214.7 888.094,1213.12 888.681,1213.98 889.267,1215.31 889.854,1213.82 890.44,1212.61 891.027,1211.05 891.613,1212.72 892.199,1212.85 892.786,1215.5 893.372,1215.52 893.959,1217.94 894.545,1221.47 895.131,1219.57 895.718,1219.1 896.304,1218.82 896.891,1218.33 897.477,1218.15 898.063,1220.35 898.65,1217.3 899.236,1217.32 899.823,1214.55 900.409,1214.18 900.996,1216.84 901.582,1213.98 902.168,1215.16 902.755,1209.52 903.341,1210.76 903.928,1207.97 904.514,1207.95 905.1,1213.47 905.687,1213.61 906.273,1214.6 906.86,1211.76 907.446,1212.84 908.032,1214.19 908.619,1214.35 909.205,1215.43 909.792,1215.37 910.378,1213.69 910.965,1213.88 911.551,1210.99 912.137,1212.74 912.724,1215.33 913.31,1213.94 913.897,1212.41 914.483,1210.96 915.069,1212.22 915.656,1213.26 916.242,1211.94 916.829,1210.9 917.415,1210.98 918.002,1212.43 918.588,1209.69 919.174,1207.16 919.761,1208.94 920.347,1208.94 920.934,1207.8 921.52,1209.47 922.106,1209.5 922.693,1213.39 923.279,1211.84 923.866,1210.41 924.452,1209.32 925.038,1207.99 925.625,1207.95 926.211,1209.25 926.798,1208.23 927.384,1209.79 927.971,1205.84 928.557,1204.94 929.143,1208.03 929.73,1207.12 930.316,1206 930.903,1206.01 931.489,1203.98 932.075,1204.4 932.662,1206.18 933.248,1207.83 933.835,1208.08 934.421,1206.98 935.007,1204.81 935.594,1208 936.18,1206.78 936.767,1208.47 937.353,1207.5 937.94,1209.19 938.526,1209.32 939.112,1212.14 939.699,1212.21 940.285,1211.97 940.872,1213.33 941.458,1214.62 942.044,1214.52 942.631,1214.27 943.217,1213.96 943.804,1215.27 944.39,1217.62 944.976,1215.95 945.563,1214.56 946.149,1215.53 946.736,1215.33 947.322,1213.96 947.909,1211.25 948.495,1211.35 949.081,1208.93 949.668,1209.29 950.254,1210.77 950.841,1213.65 951.427,1213.92 952.013,1209.9 952.6,1207.57 953.186,1206.61 953.773,1210.7 954.359,1210.73 954.945,1210.94 955.532,1212.57 956.118,1215.16 956.705,1213.97 957.291,1214.97 957.878,1214.82 958.464,1214.84 959.05,1213.15 959.637,1212.07 960.223,1210.54 960.81,1212.06 961.396,1214.54 961.982,1215.86 962.569,1215.71 963.155,1215.39 963.742,1212.7 964.328,1214.15 964.915,1213.95 965.501,1216.61 966.087,1213.8 966.674,1212.61 967.26,1208.72 967.847,1210.47 968.433,1210.26 969.019,1208.87 969.606,1209.01 970.192,1210.14 970.779,1213.07 971.365,1213.01 971.951,1214.14 972.538,1214.05 973.124,1209.97 973.711,1208.95 974.297,1209.39 974.884,1210.88 975.47,1209.68 976.056,1212.56 976.643,1211.05 977.229,1210.15 977.816,1214.04 978.402,1214.76 978.988,1215.79 979.575,1214.54 980.161,1215.51 980.748,1215.53 981.334,1215.29 981.92,1216.48 982.507,1216.27 983.093,1216 983.68,1216.09 984.266,1215.9 984.853,1218.18 985.439,1220.29 986.025,1218.36 986.612,1219.29 987.198,1221.6 987.785,1223.45 988.371,1220.3 988.957,1220.1 989.544,1220.16 990.13,1220.79 990.717,1218.88 991.303,1217.25 991.889,1216.84 992.476,1217.91 993.062,1220.13 993.649,1218.39 994.235,1215.54 994.822,1215.57 995.408,1217.91 995.994,1218.89 996.581,1215.82 997.167,1215.76 997.754,1215.6 998.34,1212.59 998.926,1213.66 999.513,1212.41 1000.1,1211.12 1000.69,1209.87 1001.27,1211.43 1001.86,1215.38 1002.44,1214.11 1003.03,1215.73 1003.62,1215.63 1004.2,1216.47 1004.79,1215.01 1005.38,1213.95 1005.96,1212.26 1006.55,1210.96 1007.14,1211.02 1007.72,1210.65 1008.31,1209.27 1008.9,1209.38 1009.48,1214.6 1010.07,1215.68 1010.65,1215.5 1011.24,1211.75 1011.83,1207.8 1012.41,1206.83 1013,1207.23 1013.59,1209.89 1014.17,1211.23 1014.76,1213.87 1015.35,1213.79 1015.93,1212.47 1016.52,1213.6 1017.11,1212.41 1017.69,1212.6 1018.28,1207.43 1018.86,1206.44 1019.45,1205.36 1020.04,1208.26 1020.62,1209.62 1021.21,1210.9 1021.8,1209.59 1022.38,1212.43 1022.97,1212.56 1023.56,1212.52 1024.14,1213.8 1024.73,1212.53 1025.32,1212.5 1025.9,1209.9 1026.49,1210 1027.07,1208.95 1027.66,1210.42 1028.25,1209.32 1028.83,1208.38 1029.42,1211.17 1030.01,1208.68 1030.59,1207.41 1031.18,1206.24 1031.77,1203.66 1032.35,1205.35 1032.94,1204.33 1033.52,1205.99 1034.11,1206.35 1034.7,1203.47 1035.28,1204.02 1035.87,1206.85 1036.46,1208.52 1037.04,1209.72 1037.63,1211.1 1038.22,1210.87 1038.8,1210.76 1039.39,1206.94 1039.98,1210.11 1040.56,1209 1041.15,1210.76 1041.73,1211.14 1042.32,1209.84 1042.91,1208.77 1043.49,1206.46 1044.08,1204.19 1044.67,1207.18 1045.25,1207.26 1045.84,1207.45 1046.43,1208.72 1047.01,1207.65 1047.6,1206.35 1048.19,1205.66 1048.77,1205.99 1049.36,1206.26 1049.94,1207.76 1050.53,1205.7 1051.12,1203.53 1051.7,1202.88 1052.29,1204.56 1052.88,1207.9 1053.46,1208.06 1054.05,1209.49 1054.64,1209.78 1055.22,1211.22 1055.81,1211.14 1056.39,1208.33 1056.98,1208.93 1057.57,1206.47 1058.15,1206.96 1058.74,1208.82 1059.33,1211.79 1059.91,1214.47 1060.5,1214.59 1061.09,1213.1 1061.67,1211.76 1062.26,1211.69 1062.85,1211.5 1063.43,1211.47 1064.02,1211.57 1064.6,1211.6 1065.19,1212.84 1065.78,1211.51 1066.36,1217.78 1066.95,1217.55 1067.54,1218.36 1068.12,1217.67 1068.71,1216.14 1069.3,1218.37 1069.88,1220.68 1070.47,1218.8 1071.06,1215.84 1071.64,1215.84 1072.23,1216.95 1072.81,1216.8 1073.4,1216.5 1073.99,1217.74 1074.57,1217.45 1075.16,1218.48 1075.75,1219.26 1076.33,1218.84 1076.92,1215.86 1077.51,1215.4 1078.09,1215.26 1078.68,1214.93 1079.26,1213.51 1079.85,1213.45 1080.44,1212.34 1081.02,1214.77 1081.61,1214.79 1082.2,1214.42 1082.78,1214.21 1083.37,1216.83 1083.96,1214.82 1084.54,1214.44 1085.13,1213.06 1085.72,1212.72 1086.3,1212.71 1086.89,1212.67 1087.47,1212.43 1088.06,1212.24 1088.65,1213.77 1089.23,1213.66 1089.82,1213.64 1090.41,1212.08 1090.99,1213.47 1091.58,1209.7 1092.17,1208.39 1092.75,1205.87 1093.34,1208.82 1093.93,1205.15 1094.51,1203.99 1095.1,1207.3 1095.68,1207.68 1096.27,1208.91 1096.86,1208.96 1097.44,1210.39 1098.03,1210.53 1098.62,1212.12 1099.2,1216.1 1099.79,1213.5 1100.38,1213.39 1100.96,1213.19 1101.55,1211.86 1102.14,1213.15 1102.72,1215.54 1103.31,1211.44 1103.89,1211.81 1104.48,1208.2 1105.07,1207.42 1105.65,1206.14 1106.24,1205.12 1106.83,1208.16 1107.41,1210.91 1108,1212.1 1108.59,1210.87 1109.17,1212.45 1109.76,1210.88 1110.34,1213.34 1110.93,1214.53 1111.52,1214.08 1112.1,1211.33 1112.69,1211.59 1113.28,1212.97 1113.86,1212.93 1114.45,1212.76 1115.04,1212.57 1115.62,1212.65 1116.21,1211.18 1116.8,1206.13 1117.38,1205.22 1117.97,1205.75 1118.55,1208.45 1119.14,1209.96 1119.73,1208.31 1120.31,1209.81 1120.9,1206.29 1121.49,1207.76 1122.07,1208.13 1122.66,1209.74 1123.25,1209.96 1123.83,1210.01 1124.42,1212.57 1125.01,1215.03 1125.59,1214.56 1126.18,1214.38 1126.76,1210.4 1127.35,1211.71 1127.94,1212.08 1128.52,1211.05 1129.11,1209.75 1129.7,1211.12 1130.28,1207.28 1130.87,1207.59 1131.46,1207.69 1132.04,1206.45 1132.63,1209.13 1133.21,1209.22 1133.8,1210.61 1134.39,1210.79 1134.97,1209.43 1135.56,1208.07 1136.15,1206.77 1136.73,1206.84 1137.32,1208.56 1137.91,1211.06 1138.49,1212.55 1139.08,1215.04 1139.67,1213.84 1140.25,1215.39 1140.84,1218.87 1141.42,1218.33 1142.01,1216.6 1142.6,1216.17 1143.18,1215.82 1143.77,1219.61 1144.36,1216.56 1144.94,1218.78 1145.53,1218.26 1146.12,1218.06 1146.7,1219.02 1147.29,1221.36 1147.88,1222.2 1148.46,1220.48 1149.05,1219.83 1149.63,1220.46 1150.22,1220 1150.81,1218.13 1151.39,1217.79 1151.98,1216.1 1152.57,1214.54 1153.15,1214.4 1153.74,1215.7 1154.33,1215.53 1154.91,1215.38 1155.5,1215.03 1156.09,1215.04 1156.67,1213.47 1157.26,1213.04 1157.84,1213.26 1158.43,1212.69 1159.02,1211.28 1159.6,1209.81 1160.19,1212.23 1160.78,1216.11 1161.36,1213.71 1161.95,1213.65 1162.54,1213.54 1163.12,1212.39 1163.71,1212.6 1164.29,1210.02 1164.88,1210.33 1165.47,1209.14 1166.05,1210.68 1166.64,1213.26 1167.23,1214.17 1167.81,1214 1168.4,1212.88 1168.99,1214.31 1169.57,1214.24 1170.16,1212.79 1170.75,1212.83 1171.33,1213.99 1171.92,1216.27 1172.5,1213.46 1173.09,1214.57 1173.68,1214.48 1174.26,1215.71 1174.85,1215.74 1175.44,1214.01 1176.02,1215.04 1176.61,1217.48 1177.2,1215.76 1177.78,1215.51 1178.37,1215.21 1178.96,1212.25 1179.54,1213.53 1180.13,1210.47 1180.71,1209.17 1181.3,1209.53 1181.89,1208.08 1182.47,1208.37 1183.06,1208.46 1183.65,1208.8 1184.23,1207.45 1184.82,1207.68 1185.41,1207.89 1185.99,1209 1186.58,1206.34 1187.16,1205.39 1187.75,1206.93 1188.34,1207.18 1188.92,1207.35 1189.51,1207.67 1190.1,1211.29 1190.68,1212.58 1191.27,1212.6 1191.86,1214.11 1192.44,1214.09 1193.03,1213.89 1193.62,1216.49 1194.2,1212.51 1194.79,1214.98 1195.37,1214.44 1195.96,1214.55 1196.55,1210.44 1197.13,1210.57 1197.72,1210.63 1198.31,1210.86 1198.89,1212.36 1199.48,1212.43 1200.07,1212.13 1200.65,1213.53 1201.24,1214.98 1201.83,1213.97 1202.41,1215.02 1203,1212.28 1203.58,1208.47 1204.17,1207.46 1204.76,1208.97 1205.34,1208 1205.93,1208.18 1206.52,1205.69 1207.1,1208.59 1207.69,1208.79 1208.28,1210.34 1208.86,1209.02 1209.45,1211.88 1210.03,1212.02 1210.62,1209.61 1211.21,1210 1211.79,1209.95 1212.38,1209.7 1212.97,1213.5 1213.55,1213.41 1214.14,1211.93 1214.73,1209.04 1215.31,1212.92 1215.9,1215.57 1216.49,1217.87 1217.07,1220.12 1217.66,1222.25 1218.24,1216.6 1218.83,1217.83 1219.42,1216.26 1220,1214.87 1220.59,1214.87 1221.18,1217.32 1221.76,1220.84 1222.35,1220.17 1222.94,1215.74 1223.52,1214.25 1224.11,1214.24 1224.7,1214.21 1225.28,1215.55 1225.87,1211.31 1226.45,1210.08 1227.04,1208.95 1227.63,1208.62 1228.21,1207.81 1228.8,1206.89 1229.39,1205.61 1229.97,1207.43 1230.56,1205.13 1231.15,1206.64 1231.73,1204.31 1232.32,1206.02 1232.91,1204.94 1233.49,1205.41 1234.08,1204.36 1234.66,1205.85 1235.25,1205.97 1235.84,1202.24 1236.42,1202.7 1237.01,1201.7 1237.6,1203.68 1238.18,1204.06 1238.77,1207.04 1239.36,1211.27 1239.94,1212.67 1240.53,1215.4 1241.11,1215.38 1241.7,1215.22 1242.29,1216.3 1242.87,1216.18 1243.46,1213.31 1244.05,1213.13 1244.63,1214.33 1245.22,1215.47 1245.81,1212.54 1246.39,1213.77 1246.98,1213.74 1247.57,1212.45 1248.15,1212.27 1248.74,1211.07 1249.32,1212.52 1249.91,1213.93 1250.5,1215.28 1251.08,1213.64 1251.67,1214.76 1252.26,1214.5 1252.84,1215.34 1253.43,1215.23 1254.02,1213.97 1254.6,1214.03 1255.19,1213.81 1255.78,1213.59 1256.36,1211.99 1256.95,1213.14 1257.53,1213.03 1258.12,1215.61 1258.71,1216.52 1259.29,1216.38 1259.88,1214.97 1260.47,1212.02 1261.05,1211.91 1261.64,1211.48 1262.23,1212.6 1262.81,1211.69 1263.4,1211.91 1263.98,1210.68 1264.57,1211.04 1265.16,1211.17 1265.74,1209.95 1266.33,1211.24 1266.92,1212.77 1267.5,1212.39 1268.09,1210.81 1268.68,1208.04 1269.26,1209.62 1269.85,1208.4 1270.44,1211.35 1271.02,1210.1 1271.61,1206.59 1272.19,1208.43 1272.78,1207.19 1273.37,1207.32 1273.95,1206.31 1274.54,1205.45 1275.13,1205.73 1275.71,1207.4 1276.3,1207.47 1276.89,1206.17 1277.47,1206.4 1278.06,1206.78 1278.65,1209.54 1279.23,1208.34 1279.82,1208.56 1280.4,1207.23 1280.99,1210.03 1281.58,1211.22 1282.16,1211.26 1282.75,1207.45 1283.34,1210.52 1283.92,1209.11 1284.51,1207.85 1285.1,1209.27 1285.68,1206.55 1286.27,1207.96 1286.86,1204.39 1287.44,1208.81 1288.03,1208.93 1288.61,1210.43 1289.2,1208 1289.79,1207.03 1290.37,1207.06 1290.96,1205.86 1291.55,1207.42 1292.13,1207.9 1292.72,1208.06 1293.31,1209.56 1293.89,1209.45 1294.48,1209.88 1295.06,1212.41 1295.65,1212.8 1296.24,1210.29 1296.82,1209.04 1297.41,1211.86 1298,1209.17 1298.58,1211.68 1299.17,1210.04 1299.76,1210.02 1300.34,1210.06 1300.93,1211.34 1301.52,1208.47 1302.1,1208.78 1302.69,1208.95 1303.27,1206.54 1303.86,1206.68 1304.45,1205.4 1305.03,1207.08 1305.62,1213.65 1306.21,1214.95 1306.79,1214.68 1307.38,1216.1 1307.97,1213.3 1308.55,1212.02 1309.14,1213.28 1309.73,1213.26 1310.31,1213.37 1310.9,1211.66 1311.48,1213.05 1312.07,1215.52 1312.66,1212.79 1313.24,1211.38 1313.83,1212.52 1314.42,1210.22 1315,1208.98 1315.59,1207.98 1316.18,1207.19 1316.76,1206.18 1317.35,1206.02 1317.93,1203.53 1318.52,1202.32 1319.11,1203.99 1319.69,1205.6 1320.28,1206.17 1320.87,1206.37 1321.45,1206.74 1322.04,1207.25 1322.63,1208.83 1323.21,1211.46 1323.8,1217.86 1324.39,1218.81 1324.97,1219.4 1325.56,1220.22 1326.14,1217.19 1326.73,1215.58 1327.32,1216.71 1327.9,1216.33 1328.49,1217.23 1329.08,1215.74 1329.66,1218.36 1330.25,1215.48 1330.84,1216.74 1331.42,1215.24 1332.01,1212.27 1332.6,1213.56 1333.18,1214.52 1333.77,1214.4 1334.35,1214.17 1334.94,1211.4 1335.53,1210.2 1336.11,1211.44 1336.7,1208.76 1337.29,1206.07 1337.87,1210.17 1338.46,1211.54 1339.05,1214.22 1339.63,1215.29 1340.22,1216.6 1340.8,1216.58 1341.39,1216.59 1341.98,1216.36 1342.56,1217.14 1343.15,1219.19 1343.74,1215.01 1344.32,1213.67 1344.91,1216.11 1345.5,1214.51 1346.08,1212.88 1346.67,1213.03 1347.26,1214.28 1347.84,1211.35 1348.43,1211.29 1349.01,1212.54 1349.6,1215.48 1350.19,1217.9 1350.77,1215.09 1351.36,1216.12 1351.95,1214.75 1352.53,1215.91 1353.12,1214.47 1353.71,1214.26 1354.29,1214.19 1354.88,1215.38 1355.47,1215.16 1356.05,1215.06 1356.64,1215.08 1357.22,1212.44 1357.81,1215.06 1358.4,1217.5 1358.98,1215.65 1359.57,1216.96 1360.16,1215.19 1360.74,1215.09 1361.33,1214.99 1361.92,1216.08 1362.5,1214.28 1363.09,1214.02 1363.68,1214.06 1364.26,1213.9 1364.85,1212.88 1365.43,1212.89 1366.02,1214.39 1366.61,1215.53 1367.19,1212.83 1367.78,1212.68 1368.37,1208.74 1368.95,1209.93 1369.54,1210.15 1370.13,1208.67 1370.71,1211.28 1371.3,1212.79 1371.88,1214.29 1372.47,1212.82 1373.06,1211.44 1373.64,1209.94 1374.23,1208.59 1374.82,1205.91 1375.4,1206.29 1375.99,1206.43 1376.58,1205.38 1377.16,1204.38 1377.75,1206.01 1378.34,1205.29 1378.92,1208.51 1379.51,1206.18 1380.09,1206.4 1380.68,1207.73 1381.27,1210.16 1381.85,1211.58 1382.44,1208.92 1383.03,1207.81 1383.61,1207.76 1384.2,1206.46 1384.79,1205.45 1385.37,1201.87 1385.96,1203.44 1386.55,1199.92 1387.13,1203.18 1387.72,1203.71 1388.3,1204.29 1388.89,1203.34 1389.48,1203.73 1390.06,1205.15 1390.65,1204.45 1391.24,1203.37 1391.82,1204.04 1392.41,1202.06 1393,1202.44 1393.58,1203.07 1394.17,1206.07 1394.75,1205.36 1395.34,1205.75 1395.93,1204.94 1396.51,1206.53 1397.1,1205.16 1397.69,1205.88 1398.27,1204.98 1398.86,1205.21 1399.45,1205.91 1400.03,1206.19 1400.62,1209.14 1401.21,1209.4 1401.79,1209.61 1402.38,1209.73 1402.96,1212.35 1403.55,1209.93 1404.14,1208.85 1404.72,1209.15 1405.31,1209.24 1405.9,1210.75 1406.48,1210.83 1407.07,1211.01 1407.66,1207.46 1408.24,1207.6 1408.83,1209.15 1409.42,1213.1 1410,1215.76 1410.59,1216.52 1411.17,1214.04 1411.76,1215.56 1412.35,1216.62 1412.93,1215.04 1413.52,1214.81 1414.11,1214.43 1414.69,1214.3 1415.28,1215.47 1415.87,1216.84 1416.45,1216.52 1417.04,1217.41 1417.63,1216.01 1418.21,1213.05 1418.8,1213.13 1419.38,1211.76 1419.97,1211.71 1420.56,1210.5 1421.14,1213.29 1421.73,1212.99 1422.32,1212.01 1422.9,1211.95 1423.49,1212.07 1424.08,1213.2 1424.66,1212.85 1425.25,1209.98 1425.83,1210.12 1426.42,1211.54 1427.01,1214.04 1427.59,1216.43 1428.18,1214.8 1428.77,1214.46 1429.35,1212.95 1429.94,1216.8 1430.53,1214.17 1431.11,1214.98 1431.7,1214.55 1432.29,1214.72 1432.87,1215.91 1433.46,1215.83 1434.04,1212.97 1434.63,1216.65 1435.22,1219.01 1435.8,1217.27 1436.39,1215.59 1436.98,1216.65 1437.56,1217.7 1438.15,1213.27 1438.74,1213.17 1439.32,1213.12 1439.91,1213.11 1440.5,1211.79 1441.08,1212.97 1441.67,1214.33 1442.25,1215.75 1442.84,1215.68 1443.43,1214.07 1444.01,1216.51 1444.6,1216.09 1445.19,1217.15 1445.77,1214.26 1446.36,1212.96 1446.95,1211.3 1447.53,1209.95 1448.12,1209.77 1448.7,1208.43 1449.29,1209.63 1449.88,1208.4 1450.46,1207.53 1451.05,1207.75 1451.64,1210.36 1452.22,1209.11 1452.81,1207.64 1453.4,1205.18 1453.98,1203.96 1454.57,1204.41 1455.16,1203.42 1455.74,1203.64 1456.33,1205.52 1456.91,1207.34 1457.5,1207.61 1458.09,1209.13 1458.67,1211.84 1459.26,1211.59 1459.85,1211.42 1460.43,1212.54 1461.02,1209.63 1461.61,1208.42 1462.19,1209.95 1462.78,1211.45 1463.37,1211.05 1463.95,1210.99 1464.54,1208.31 1465.12,1209.68 1465.71,1207.27 1466.3,1208.75 1466.88,1208.98 1467.47,1208.8 1468.06,1211.58 1468.64,1211.64 1469.23,1211.69 1469.82,1210.34 1470.4,1210.6 1470.99,1210.52 1471.57,1211.56 1472.16,1212.88 1472.75,1212.6 1473.33,1211.41 1473.92,1210.06 1474.51,1208.9 1475.09,1209.05 1475.68,1208.75 1476.27,1207.37 1476.85,1207.84 1477.44,1209.15 1478.03,1208.18 1478.61,1209.37 1479.2,1214.93 1479.78,1213.6 1480.37,1213.49 1480.96,1211.92 1481.54,1211.62 1482.13,1212.92 1482.72,1213.01 1483.3,1210.16 1483.89,1211.55 1484.48,1211.7 1485.06,1212.93 1485.65,1214.21 1486.24,1214.14 1486.82,1212.45 1487.41,1212.26 1487.99,1213.47 1488.58,1213.18 1489.17,1211.73 1489.75,1213.08 1490.34,1214.47 1490.93,1215.81 1491.51,1217.17 1492.1,1216.9 1492.69,1215.49 1493.27,1212.6 1493.86,1212.48 1494.45,1212.27 1495.03,1205.8 1495.62,1206.28 1496.2,1205.18 1496.79,1205.58 1497.38,1207.51 1497.96,1208.94 1498.55,1211.49 1499.14,1211.47 1499.72,1212.69 1500.31,1211.42 1500.9,1212.64 1501.48,1211.35 1502.07,1215.34 1502.65,1216.28 1503.24,1217.45 1503.83,1215.91 1504.41,1214.47 1505,1212.95 1505.59,1213.12 1506.17,1213.2 1506.76,1215.53 1507.35,1216.34 1507.93,1214.76 1508.52,1212.95 1509.11,1216.58 1509.69,1217.78 1510.28,1216.59 1510.86,1219.12 1511.45,1215.98 1512.04,1218.1 1512.62,1215.19 1513.21,1216.39 1513.8,1212.18 1514.38,1211.05 1514.97,1208.51 1515.56,1208.61 1516.14,1206.07 1516.73,1206.27 1517.32,1205.13 1517.9,1205.53 1518.49,1207.1 1519.07,1207.3 1519.66,1204.81 1520.25,1202.65 1520.83,1204.21 1521.42,1203.06 1522.01,1202.12 1522.59,1205.48 1523.18,1207.04 1523.77,1205.69 1524.35,1209.64 1524.94,1212.13 1525.52,1212.02 1526.11,1210.63 1526.7,1211.91 1527.28,1214.5 1527.87,1211.82 1528.46,1210.47 1529.04,1207.97 1529.63,1207 1530.22,1210.12 1530.8,1209.4 1531.39,1207.15 1531.98,1207.53 1532.56,1207.96 1533.15,1208.06 1533.73,1211.23 1534.32,1213.8 1534.91,1213.41 1535.49,1213.61 1536.08,1213.19 1536.67,1214.57 1537.25,1213.42 1537.84,1213.13 1538.43,1212.94 1539.01,1211.47 1539.6,1214.1 1540.19,1212.54 1540.77,1209.76 1541.36,1212.34 1541.94,1209.59 1542.53,1213.53 1543.12,1214.82 1543.7,1215.95 1544.29,1214.1 1544.88,1216.39 1545.46,1218.93 1546.05,1219.53 1546.64,1213.94 1547.22,1216.42 1547.81,1216.31 1548.4,1214.62 1548.98,1214.55 1549.57,1214.72 1550.15,1214.21 1550.74,1212.63 1551.33,1213.83 1551.91,1215.16 1552.5,1212.13 1553.09,1214.49 1553.67,1213.19 1554.26,1214.41 1554.85,1215.61 1555.43,1215.52 1556.02,1211.17 1556.6,1211.38 1557.19,1211.1 1557.78,1213.7 1558.36,1212.16 1558.95,1213.3 1559.54,1213.23 1560.12,1213.22 1560.71,1218.5 1561.3,1219.35 1561.88,1217.51 1562.47,1217.11 1563.06,1216.74 1563.64,1212.54 1564.23,1212.38 1564.81,1213.7 1565.4,1216.01 1565.99,1215.59 1566.57,1215.26 1567.16,1215.02 1567.75,1214.96 1568.33,1209.41 1568.92,1211.02 1569.51,1212.25 1570.09,1212.34 1570.68,1209.94 1571.27,1209.9 1571.85,1212.6 1572.44,1209.75 1573.02,1208.58 1573.61,1210.01 1574.2,1208.61 1574.78,1208.78 1575.37,1210.02 1575.96,1208.82 1576.54,1210.34 1577.13,1207.67 1577.72,1207.66 1578.3,1207.79 1578.89,1208.34 1579.47,1209.75 1580.06,1211.18 1580.65,1211.39 1581.23,1211.39 1581.82,1209.91 1582.41,1211.33 1582.99,1211.44 1583.58,1212.59 1584.17,1210.01 1584.75,1207.52 1585.34,1210.18 1585.93,1208.88 1586.51,1211.5 1587.1,1209.94 1587.68,1210.04 1588.27,1208.75 1588.86,1210.14 1589.44,1211.43 1590.03,1210.04 1590.62,1209.97 1591.2,1211.04 1591.79,1209.55 1592.38,1207.02 1592.96,1207.37 1593.55,1208.95 1594.14,1209.06 1594.72,1210.73 1595.31,1209.62 1595.89,1210.93 1596.48,1209.77 1597.07,1210.05 1597.65,1212.28 1598.24,1213.61 1598.83,1212.21 1599.41,1212.07 1600,1212.21 1600.59,1212.04 1601.17,1210.51 1601.76,1210.45 1602.34,1211.7 1602.93,1210.51 1603.52,1208 1604.1,1211.88 1604.69,1214.52 1605.28,1218.24 1605.86,1217.96 1606.45,1215.2 1607.04,1213.7 1607.62,1214.94 1608.21,1217.59 1608.8,1214.85 1609.38,1216.1 1609.97,1214.7 1610.55,1215.68 1611.14,1217.98 1611.73,1220.49 1612.31,1219.8 1612.9,1219.34 1613.49,1214.89 1614.07,1213.28 1614.66,1215.54 1615.25,1215.27 1615.83,1213.59 1616.42,1216.06 1617.01,1214.38 1617.59,1214.17 1618.18,1213.9 1618.76,1214.67 1619.35,1214.21 1619.94,1212.75 1620.52,1213.63 1621.11,1213.47 1621.7,1213.37 1622.28,1213.28 1622.87,1210.58 1623.46,1211.97 1624.04,1211.91 1624.63,1213.1 1625.22,1210.56 1625.8,1210.83 1626.39,1209.52 1626.97,1208.35 1627.56,1206.98 1628.15,1207.21 1628.73,1209 1629.32,1213.1 1629.91,1217.9 1630.49,1217.69 1631.08,1216.39 1631.67,1216.04 1632.25,1215.91 1632.84,1213.07 1633.42,1211.69 1634.01,1211.82 1634.6,1210.13 1635.18,1210.47 1635.77,1211.97 1636.36,1211.99 1636.94,1209.49 1637.53,1206.92 1638.12,1204.38 1638.7,1207.21 1639.29,1207.21 1639.88,1207.35 1640.46,1207.48 1641.05,1210.34 1641.63,1211.58 1642.22,1210.22 1642.81,1212.68 1643.39,1207.46 1643.98,1208.81 1644.57,1209.16 1645.15,1206.91 1645.74,1204.78 1646.33,1206.41 1646.91,1205.22 1647.5,1206.68 1648.09,1208.15 1648.67,1207.08 1649.26,1208.64 1649.84,1208.67 1650.43,1208.48 1651.02,1213.74 1651.6,1216.05 1652.19,1219.54 1652.78,1219.2 1653.36,1218.91 1653.95,1213.4 1654.54,1208.12 1655.12,1204.42 1655.71,1204.69 1656.29,1206.3 1656.88,1210.21 1657.47,1209.09 1658.05,1209.25 1658.64,1205.42 1659.23,1205.89 1659.81,1205.22 1660.4,1205.39 1660.99,1207.01 1661.57,1204.7 1662.16,1205.13 1662.75,1206.8 1663.33,1209.4 1663.92,1213.4 1664.5,1211.88 1665.09,1211.89 1665.68,1209.02 1666.26,1207.53 1666.85,1209.16 1667.44,1210.74 1668.02,1210.92 1668.61,1210.81 1669.2,1209.67 1669.78,1213.76 1670.37,1213.75 1670.96,1214.09 1671.54,1216.65 1672.13,1215.24 1672.71,1215.09 1673.3,1217.69 1673.89,1218.57 1674.47,1214.3 1675.06,1212.88 1675.65,1211.52 1676.23,1212.85 1676.82,1212.77 1677.41,1211.6 1677.99,1211.45 1678.58,1211.42 1679.17,1211.5 1679.75,1207.45 1680.34,1211.8 1680.92,1213.18 1681.51,1214.25 1682.1,1213.96 1682.68,1213.69 1683.27,1214.49 1683.86,1214.45 1684.44,1214.23 1685.03,1212.88 1685.62,1213.04 1686.2,1211.6 1686.79,1211.74 1687.37,1210.48 1687.96,1203.87 1688.55,1204.22 1689.13,1203.28 1689.72,1204.97 1690.31,1202.84 1690.89,1203.28 1691.48,1202.55 1692.07,1203.04 1692.65,1203.42 1693.24,1206.48 1693.83,1204.03 1694.41,1202.98 1695,1204.79 1695.58,1205.02 1696.17,1206.53 1696.76,1207.02 1697.34,1207.25 1697.93,1209.02 1698.52,1210.69 1699.1,1210.73 1699.69,1215.97 1700.28,1214.43 1700.86,1214.28 1701.45,1215.56 1702.04,1214.12 1702.62,1216.43 1703.21,1213.65 1703.79,1217.24 1704.38,1218.31 1704.97,1219.34 1705.55,1219.26 1706.14,1217.56 1706.73,1217.28 1707.31,1215.64 1707.9,1216.67 1708.49,1220.12 1709.07,1220.96 1709.66,1219.22 1710.24,1218.92 1710.83,1214.45 1711.42,1215.74 1712,1217.06 1712.59,1216.54 1713.18,1218.82 1713.76,1216.01 1714.35,1214.41 1714.94,1211.55 1715.52,1211.68 1716.11,1215.64 1716.7,1214.13 1717.28,1212.89 1717.87,1216.69 1718.45,1214 1719.04,1215.27 1719.63,1215.3 1720.21,1216.36 1720.8,1216.12 1721.39,1213.28 1721.97,1211.68 1722.56,1209.99 1723.15,1207.4 1723.73,1211.4 1724.32,1211.18 1724.91,1212.16 1725.49,1209.19 1726.08,1211.71 1726.66,1210.26 1727.25,1210.16 1727.84,1210.19 1728.42,1211.64 1729.01,1212.81 1729.6,1211.28 1730.18,1211.28 1730.77,1211.54 1731.36,1210.31 1731.94,1210.49 1732.53,1206.61 1733.11,1205.77 1733.7,1203.39 1734.29,1205.04 1734.87,1206.61 1735.46,1207.02 1736.05,1208.44 1736.63,1208.44 1737.22,1207.16 1737.81,1206.2 1738.39,1206.29 1738.98,1206.62 1739.57,1208.29 1740.15,1212.07 1740.74,1213.5 1741.32,1213.2 1741.91,1210.55 1742.5,1210.38 1743.08,1206.57 1743.67,1206.92 1744.26,1207.18 1744.84,1208.63 1745.43,1208.81 1746.02,1207.6 1746.6,1207.78 1747.19,1209.17 1747.78,1209.33 1748.36,1209.49 1748.95,1211.04 1749.53,1208.35 1750.12,1205.8 1750.71,1209.76 1751.29,1206.02 1751.88,1205.09 1752.47,1206.51 1753.05,1206.56 1753.64,1206.9 1754.23,1209.73 1754.81,1213.54 1755.4,1214.95 1755.99,1216.32 1756.57,1217.25 1757.16,1214.44 1757.74,1215.66 1758.33,1214.34 1758.92,1218.14 1759.5,1216.68 1760.09,1215.03 1760.68,1215.04 1761.26,1215.07 1761.85,1212.18 1762.44,1212.22 1763.02,1213.57 1763.61,1210.93 1764.19,1210.97 1764.78,1213.78 1765.37,1214.75 1765.95,1215.74 1766.54,1216.91 1767.13,1218.96 1767.71,1218.48 1768.3,1215.43 1768.89,1215.17 1769.47,1213.78 1770.06,1213.39 1770.65,1210.92 1771.23,1210.99 1771.82,1210.6 1772.4,1210.38 1772.99,1209.31 1773.58,1212.3 1774.16,1212.07 1774.75,1210.88 1775.34,1213.8 1775.92,1216.3 1776.51,1214.66 1777.1,1213.36 1777.68,1209.63 1778.27,1210.96 1778.86,1211.18 1779.44,1212.46 1780.03,1212.39 1780.61,1213.42 1781.2,1213.58 1781.79,1211.08 1782.37,1212.59 1782.96,1211.3 1783.55,1207.87 1784.13,1207.84 1784.72,1206.58 1785.31,1205.45 1785.89,1204.3 1786.48,1203.2 1787.06,1204.9 1787.65,1205.46 1788.24,1205.55 1788.82,1207.07 1789.41,1208.75 1790,1211.24 1790.58,1213.9 1791.17,1213.9 1791.76,1215.09 1792.34,1213.71 1792.93,1211.06 1793.52,1211.2 1794.1,1211.18 1794.69,1210.97 1795.27,1211.01 1795.86,1211.06 1796.45,1212.57 1797.03,1210.91 1797.62,1213.5 1798.21,1215.76 1798.79,1214.16 1799.38,1214.37 1799.97,1210.44 1800.55,1209.36 1801.14,1210.78 1801.73,1209.16 1802.31,1211.61 1802.9,1215.49 1803.48,1215.42 1804.07,1213.78 1804.66,1211.1 1805.24,1212.45 1805.83,1216.13 1806.42,1215.79 1807,1215.71 1807.59,1218.05 1808.18,1218.05 1808.76,1216.2 1809.35,1215.92 1809.94,1212.73 1810.52,1213.96 1811.11,1213.76 1811.69,1212.32 1812.28,1212.13 1812.87,1209.32 1813.45,1212.06 1814.04,1214.59 1814.63,1214.3 1815.21,1217.94 1815.8,1217.74 1816.39,1217.4 1816.97,1217.08 1817.56,1216.75 1818.14,1215.05 1818.73,1213.47 1819.32,1213.19 1819.9,1212.92 1820.49,1212.54 1821.08,1211.14 1821.66,1209.91 1822.25,1211.48 1822.84,1207.68 1823.42,1208.05 1824.01,1209.54 1824.6,1209.38 1825.18,1210.72 1825.77,1211.8 1826.35,1209.45 1826.94,1207.11 1827.53,1209.02 1828.11,1208.93 1828.7,1209.29 1829.29,1210.51 1829.87,1209.41 1830.46,1209.63 1831.05,1208.77 1831.63,1208.96 1832.22,1210.61 1832.81,1210.45 1833.39,1209.06 1833.98,1213.06 1834.56,1214.1 1835.15,1212.65 1835.74,1213.82 1836.32,1216.27 1836.91,1218.41 1837.5,1216.93 1838.08,1216.79 1838.67,1211.6 1839.26,1210.28 1839.84,1210.55 1840.43,1209.32 1841.01,1205.35 1841.6,1205.54 1842.19,1204.4 1842.77,1204.52 1843.36,1204.75 1843.95,1202.36 1844.53,1203.02 1845.12,1204.85 1845.71,1207.79 1846.29,1209.15 1846.88,1210.51 1847.47,1209.14 1848.05,1210.84 1848.64,1210.93 1849.22,1213.84 1849.81,1216.25 1850.4,1215.93 1850.98,1215.34 1851.57,1215.16 1852.16,1212.18 1852.74,1213.51 1853.33,1212.5 1853.92,1213.93 1854.5,1212.07 1855.09,1212.09 1855.68,1214.21 1856.26,1211.51 1856.85,1212.75 1857.43,1215.24 1858.02,1216.22 1858.61,1217.14 1859.19,1216.71 1859.78,1219.01 1860.37,1220.1 1860.95,1217.04 1861.54,1216.65 1862.13,1217.72 1862.71,1216.06 1863.3,1217.24 1863.88,1215.36 1864.47,1217.67 1865.06,1218.53 1865.64,1219.27 1866.23,1219.12 1866.82,1219.87 1867.4,1219.4 1867.99,1217.67 1868.58,1217.54 1869.16,1217.06 1869.75,1215.69 1870.34,1215.42 1870.92,1216.21 1871.51,1214.7 1872.09,1211.92 1872.68,1209.27 1873.27,1208.29 1873.85,1208.91 1874.44,1210.08 1875.03,1207.57 1875.61,1206.51 1876.2,1204.52 1876.79,1206.31 1877.37,1206.42 1877.96,1205.46 1878.55,1210.97 1879.13,1212.63 1879.72,1209.7 1880.3,1207.46 1880.89,1205.12 1881.48,1203 1882.06,1205.75 1882.65,1205.94 1883.24,1206.39 1883.82,1205.13 1884.41,1206.71 1885,1203.15 1885.58,1200.82 1886.17,1201.2 1886.76,1203.01 1887.34,1207.52 1887.93,1206.23 1888.51,1207.74 1889.1,1209.35 1889.69,1206.88 1890.27,1205.66 1890.86,1207.09 1891.45,1207.19 1892.03,1207.15 1892.62,1207.2 1893.21,1208.55 1893.79,1208.56 1894.38,1209.89 1894.96,1207.68 1895.55,1206.58 1896.14,1206.84 1896.72,1211.05 1897.31,1211.39 1897.9,1210.03 1898.48,1208.84 1899.07,1207.58 1899.66,1207.92 1900.24,1208.1 1900.83,1210.92 1901.42,1210.76 1902,1209.31 1902.59,1209.55 1903.17,1210.73 1903.76,1214.65 1904.35,1217.06 1904.93,1214.36 1905.52,1212.85 1906.11,1213.95 1906.69,1213.81 1907.28,1214 1907.87,1215.43 1908.45,1215.5 1909.04,1216.51 1909.63,1212.19 1910.21,1210.68 1910.8,1209.57 1911.38,1210.01 1911.97,1211.24 1912.56,1205.97 1913.14,1204.94 1913.73,1206.5 1914.32,1204.39 1914.9,1202.59 1915.49,1203.06 1916.08,1201.03 1916.66,1201.48 1917.25,1203.34 1917.83,1203.84 1918.42,1204.41 1919.01,1204.87 1919.59,1208.19 1920.18,1204.7 1920.77,1203.94 1921.35,1205.57 1921.94,1208.57 1922.53,1207.5 1923.11,1207.56 1923.7,1205.08 1924.29,1205.58 1924.87,1208.46 1925.46,1206.14 1926.04,1209.02 1926.63,1210.26 1927.22,1209.16 1927.8,1210.41 1928.39,1207.98 1928.98,1208.34 1929.56,1209.87 1930.15,1210.07 1930.74,1211.32 1931.32,1213.88 1931.91,1213.55 1932.5,1212.47 1933.08,1212.52 1933.67,1212.51 1934.25,1212.48 1934.84,1211.23 1935.43,1214.83 1936.01,1213.19 1936.6,1213.55 1937.19,1212.02 1937.77,1209.55 1938.36,1209.56 1938.95,1209.78 1939.53,1211.09 1940.12,1213.92 1940.71,1213.68 1941.29,1211.05 1941.88,1208.45 1942.46,1209.64 1943.05,1207.18 1943.64,1207.59 1944.22,1206.47 1944.81,1206.59 1945.4,1206.85 1945.98,1204.59 1946.57,1205.03 1947.16,1205.23 1947.74,1206.94 1948.33,1205.94 1948.91,1205.28 1949.5,1207.27 1950.09,1206.14 1950.67,1206.39 1951.26,1210.58 1951.85,1209.44 1952.43,1209.54 1953.02,1209.74 1953.61,1209.98 1954.19,1211.17 1954.78,1211.17 1955.37,1210.02 1955.95,1208.58 1956.54,1208.92 1957.12,1209.08 1957.71,1206.38 1958.3,1206.65 1958.88,1208.15 1959.47,1207.19 1960.06,1207.54 1960.64,1205.33 1961.23,1205.33 1961.82,1204.24 1962.4,1204.76 1962.99,1205.24 1963.58,1204.26 1964.16,1203.24 1964.75,1205.07 1965.33,1206.61 1965.92,1206.78 1966.51,1207.04 1967.09,1207.03 1967.68,1204.33 1968.27,1206.07 1968.85,1209.08 1969.44,1209.19 1970.03,1211.88 1970.61,1207.83 1971.2,1210.44 1971.78,1210.37 1972.37,1213.03 1972.96,1210.27 1973.54,1211.35 1974.13,1210.21 1974.72,1211.68 1975.3,1213.08 1975.89,1212.86 1976.48,1213.92 1977.06,1213.71 1977.65,1213.47 1978.24,1212.07 1978.82,1210.73 1979.41,1212.35 1979.99,1214.55 1980.58,1215.64 1981.17,1214.21 1981.75,1214.13 1982.34,1212.61 1982.93,1214.05 1983.51,1211.56 1984.1,1214.22 1984.69,1214.02 1985.27,1211.24 1985.86,1216.53 1986.45,1213.91 1987.03,1213.86 1987.62,1213.8 1988.2,1216.32 1988.79,1214.73 1989.38,1215.89 1989.96,1218.18 1990.55,1216.5 1991.14,1216.18 1991.72,1217.18 1992.31,1215.56 1992.9,1216.68 1993.48,1216.33 1994.07,1213.45 1994.65,1211.97 1995.24,1213.3 1995.83,1214.74 1996.41,1214.63 1997,1215.84 1997.59,1214.38 1998.17,1212.8 1998.76,1212.39 1999.35,1209.87 1999.93,1211.24 2000.52,1212.3 2001.11,1213.66 2001.69,1214.75 2002.28,1213.21 2002.86,1211.91 2003.45,1210.29 2004.04,1212.8 2004.62,1212.58 2005.21,1213.71 2005.8,1213.49 2006.38,1216.94 2006.97,1215.5 2007.56,1212.92 2008.14,1213.84 2008.73,1211.59 2009.32,1212.63 2009.9,1211.57 2010.49,1210.15 2011.07,1208.81 2011.66,1206.35 2012.25,1207.91 2012.83,1207.82 2013.42,1211.81 2014.01,1211.57 2014.59,1210.08 2015.18,1215.59 2015.77,1215.32 2016.35,1216.45 2016.94,1215.04 2017.53,1214.51 2018.11,1213.13 2018.7,1212.93 2019.28,1213.07 2019.87,1214.37 2020.46,1214.04 2021.04,1215.36 2021.63,1216.37 2022.22,1214.79 2022.8,1214.44 2023.39,1214.44 2023.98,1212.91 2024.56,1214.26 2025.15,1211.35 2025.73,1212.39 2026.32,1214.94 2026.91,1211.92 2027.49,1210.37 2028.08,1210.56 2028.67,1210.59 2029.25,1209.45 2029.84,1209.63 2030.43,1210 2031.01,1211.41 2031.6,1212.75 2032.19,1211.3 2032.77,1212.35 2033.36,1212.51 2033.94,1213.72 2034.53,1213.32 2035.12,1212.02 2035.7,1211.93 2036.29,1208.06 2036.88,1209.86 2037.46,1207.3 2038.05,1205.95 2038.64,1207.55 2039.22,1206.6 2039.81,1206.78 2040.4,1207.3 2040.98,1209.75 2041.57,1211.21 2042.15,1209.92 2042.74,1209.93 2043.33,1208.6 2043.91,1207.64 2044.5,1206.57 2045.09,1205.4 2045.67,1205.42 2046.26,1208.27 2046.85,1211.13 2047.43,1208.61 2048.02,1212.56 2048.6,1208.54 2049.19,1209.94 2049.78,1209.93 2050.36,1211.25 2050.95,1211.26 2051.54,1211.25 2052.12,1212.61 2052.71,1212.37 2053.3,1212.44 2053.88,1214.94 2054.47,1212.02 2055.06,1210.48 2055.64,1210.88 2056.23,1211.01 2056.81,1209.54 2057.4,1209.5 2057.99,1211.97 2058.57,1209.42 2059.16,1208.35 2059.75,1208.42 2060.33,1208.65 2060.92,1211.66 2061.51,1212.92 2062.09,1214.09 2062.68,1214.26 2063.27,1212.63 2063.85,1212.61 2064.44,1213.64 2065.02,1210.98 2065.61,1209.95 2066.2,1211.26 2066.78,1208.78 2067.37,1209.09 2067.96,1210.54 2068.54,1210.53 2069.13,1211.88 2069.72,1210.49 2070.3,1210.63 2070.89,1211.96 2071.48,1213.04 2072.06,1213.35 2072.65,1210.72 2073.23,1210.81 2073.82,1210.73 2074.41,1212.02 2074.99,1209.39 2075.58,1208.46 2076.17,1208.58 2076.75,1208.73 2077.34,1210.25 2077.93,1207.47 2078.51,1207.51 2079.1,1207.53 2079.68,1209.37 2080.27,1207.88 2080.86,1209.36 2081.44,1210.74 2082.03,1209.47 2082.62,1211 2083.2,1212.21 2083.79,1213.28 2084.38,1217.04 2084.96,1215.66 2085.55,1216.77 2086.14,1212.44 2086.72,1214.93 2087.31,1212.09 2087.89,1211.81 2088.48,1210.44 2089.07,1211.77 2089.65,1212.99 2090.24,1216.63 2090.83,1218.67 2091.41,1222.19 2092,1220.36 2092.59,1218.59 2093.17,1216.86 2093.76,1215.17 2094.35,1214.93 2094.93,1213.48 2095.52,1214.9 2096.1,1217.36 2096.69,1218.51 2097.28,1219.62 2097.86,1217.73 2098.45,1218.87 2099.04,1221.08 2099.62,1221.82 2100.21,1222.32 2100.8,1220.4 2101.38,1218.76 2101.97,1219.51 2102.55,1219.12 2103.14,1216.3 2103.73,1217.31 2104.31,1214.48 2104.9,1211.82 2105.49,1210.58 2106.07,1209.24 2106.66,1210.6 2107.25,1210.68 2107.83,1208.26 2108.42,1209.53 2109.01,1208.26 2109.59,1207.29 2110.18,1207.44 2110.76,1203.92 2111.35,1206.92 2111.94,1208.14 2112.52,1211.16 2113.11,1209.95 2113.7,1207.31 2114.28,1208.83 2114.87,1209.01 2115.46,1210.48 2116.04,1207.96 2116.63,1207.87 2117.22,1209.08 2117.8,1211.78 2118.39,1211.75 2118.97,1213.1 2119.56,1211.71 2120.15,1208.78 2120.73,1208.95 2121.32,1208.08 2121.91,1208.09 2122.49,1205.67 2123.08,1202.04 2123.67,1205.07 2124.25,1206.73 2124.84,1206.82 2125.42,1204.31 2126.01,1208.47 2126.6,1208.63 2127.18,1207.64 2127.77,1210.55 2128.36,1211.9 2128.94,1210.76 2129.53,1209.39 2130.12,1209.56 2130.7,1209.96 2131.29,1208.66 2131.88,1209.87 2132.46,1209.7 2133.05,1209.64 2133.63,1209.66 2134.22,1211.15 2134.81,1213.54 2135.39,1211.94 2135.98,1213.06 2136.57,1210.36 2137.15,1211.52 2137.74,1210.11 2138.33,1211.53 2138.91,1210 2139.5,1212.83 2140.09,1212.6 2140.67,1212.64 2141.26,1212.34 2141.84,1210.75 2142.43,1210.69 2143.02,1208.2 2143.6,1208.69 2144.19,1208.96 2144.78,1210.48 2145.36,1214.51 2145.95,1214.26 2146.54,1214.26 2147.12,1212.51 2147.71,1212.63 2148.3,1209.68 2148.88,1208.25 2149.47,1212.43 2150.05,1214.81 2150.64,1216.18 2151.23,1214.65 2151.81,1213.14 2152.4,1211.68 2152.99,1211.66 2153.57,1211.46 2154.16,1211.3 2154.75,1212.67 2155.33,1213.94 2155.92,1214.01 2156.5,1214.01 2157.09,1214.02 2157.68,1214.89 2158.26,1217.44 \"/>\n<path clip-path=\"url(#clip242)\" d=\"M986.025 1211.78 L986.612 1211.78 L987.198 1211.78 L987.785 1211.78 L988.371 1211.78 L988.957 1211.78 L989.544 1211.78 L990.13 1211.78 L990.717 1211.78 L991.303 1211.78 L991.889 1211.78 L992.476 1211.78 L993.062 1211.78 L993.649 1211.78 L994.235 1211.78 L994.822 1211.78 L995.408 1211.78 L995.994 1211.78 L996.581 1211.78 L997.167 1211.78 L997.754 1211.78 L998.34 1211.78 L998.926 1211.78 L999.513 1211.78 L1000.1 1211.78 L1000.69 1211.78 L1001.27 1211.78 L1001.86 1211.78 L1002.44 1211.78 L1003.03 1211.78 L1003.62 1211.78 L1004.2 1211.78 L1004.79 1211.78 L1005.38 1211.78 L1005.96 1211.78 L1006.55 1211.78 L1007.14 1211.78 L1007.72 1211.78 L1008.31 1211.78 L1008.9 1211.78 L1009.48 1211.78 L1010.07 1211.78 L1010.65 1211.78 L1011.24 1211.78 L1011.83 1211.78 L1012.41 1211.78 L1013 1211.78 L1013.59 1211.78 L1014.17 1211.78 L1014.76 1211.78 L1015.35 1211.78 L1015.93 1211.78 L1016.52 1211.78 L1017.11 1211.78 L1017.69 1211.78 L1018.28 1211.78 L1018.86 1211.78 L1019.45 1211.78 L1020.04 1211.78 L1020.62 1211.78 L1021.21 1211.78 L1021.8 1211.78 L1022.38 1211.78 L1022.97 1211.78 L1023.56 1211.78 L1024.14 1211.78 L1024.73 1211.78 L1025.32 1211.78 L1025.9 1211.78 L1026.49 1211.78 L1027.07 1211.78 L1027.66 1211.78 L1028.25 1211.78 L1028.83 1211.78 L1029.42 1211.78 L1030.01 1211.78 L1030.59 1211.78 L1031.18 1211.78 L1031.77 1211.78 L1032.35 1211.78 L1032.94 1211.78 L1033.52 1211.78 L1034.11 1211.78 L1034.7 1211.78 L1035.28 1211.78 L1035.87 1211.78 L1036.46 1211.78 L1037.04 1211.78 L1037.63 1211.78 L1038.22 1211.78 L1038.8 1211.78 L1039.39 1211.78 L1039.98 1211.78 L1040.56 1211.78 L1041.15 1211.78 L1041.73 1211.78 L1042.32 1211.78 L1042.91 1211.78 L1043.49 1211.78 L1044.08 1211.78 L1044.67 1211.78 L1045.25 1211.78 L1045.84 1211.78 L1046.43 1211.78 L1047.01 1211.78 L1047.6 1211.78 L1048.19 1211.78 L1048.77 1211.78 L1049.36 1211.78 L1049.94 1211.78 L1050.53 1211.78 L1051.12 1211.78 L1051.7 1211.78 L1052.29 1211.78 L1052.88 1211.78 L1053.46 1211.78 L1054.05 1211.78 L1054.64 1211.78 L1055.22 1211.78 L1055.81 1211.78 L1056.39 1211.78 L1056.98 1211.78 L1057.57 1211.78 L1058.15 1211.78 L1058.74 1211.78 L1059.33 1211.78 L1059.91 1211.78 L1060.5 1211.78 L1061.09 1211.78 L1061.67 1211.78 L1062.26 1211.78 L1062.85 1211.78 L1063.43 1211.78 L1064.02 1211.78 L1064.6 1211.78 L1065.19 1211.78 L1065.78 1211.78 L1066.36 1211.78 L1066.95 1211.78 L1067.54 1211.78 L1068.12 1211.78 L1068.71 1211.78 L1069.3 1211.78 L1069.88 1211.78 L1070.47 1211.78 L1071.06 1211.78 L1071.64 1211.78 L1072.23 1211.78 L1072.81 1211.78 L1073.4 1211.78 L1073.99 1211.78 L1074.57 1211.78 L1075.16 1211.78 L1075.75 1211.78 L1076.33 1211.78 L1076.92 1211.78 L1077.51 1211.78 L1078.09 1211.78 L1078.68 1211.78 L1079.26 1211.78 L1079.85 1211.78 L1080.44 1211.78 L1081.02 1211.78 L1081.61 1211.78 L1082.2 1211.78 L1082.78 1211.78 L1083.37 1211.78 L1083.96 1211.78 L1084.54 1211.78 L1085.13 1211.78 L1085.72 1211.78 L1086.3 1211.78 L1086.89 1211.78 L1087.47 1211.78 L1088.06 1211.78 L1088.65 1211.78 L1089.23 1211.78 L1089.82 1211.78 L1090.41 1211.78 L1090.99 1211.78 L1091.58 1211.78 L1092.17 1211.78 L1092.75 1211.78 L1093.34 1211.78 L1093.93 1211.78 L1094.51 1211.78 L1095.1 1211.78 L1095.68 1211.78 L1096.27 1211.78 L1096.86 1211.78 L1097.44 1211.78 L1098.03 1211.78 L1098.62 1211.78 L1099.2 1211.78 L1099.79 1211.78 L1100.38 1211.78 L1100.96 1211.78 L1101.55 1211.78 L1102.14 1211.78 L1102.72 1211.78 L1103.31 1211.78 L1103.89 1211.78 L1104.48 1211.78 L1105.07 1211.78 L1105.65 1211.78 L1106.24 1211.78 L1106.83 1211.78 L1107.41 1211.78 L1108 1211.78 L1108.59 1211.78 L1109.17 1211.78 L1109.76 1211.78 L1110.34 1211.78 L1110.93 1211.78 L1111.52 1211.78 L1112.1 1211.78 L1112.69 1211.78 L1113.28 1211.78 L1113.86 1211.78 L1114.45 1211.78 L1115.04 1211.78 L1115.62 1211.78 L1116.21 1211.78 L1116.8 1211.78 L1117.38 1211.78 L1117.97 1211.78 L1118.55 1211.78 L1119.14 1211.78 L1119.73 1211.78 L1120.31 1211.78 L1120.9 1211.78 L1121.49 1211.78 L1122.07 1211.78 L1122.66 1211.78 L1123.25 1211.78 L1123.83 1211.78 L1124.42 1211.78 L1125.01 1211.78 L1125.59 1211.78 L1126.18 1211.78 L1126.76 1211.78 L1127.35 1211.78 L1127.94 1211.78 L1128.52 1211.78 L1129.11 1211.78 L1129.7 1211.78 L1130.28 1211.78 L1130.87 1211.78 L1131.46 1211.78 L1132.04 1211.78 L1132.63 1211.78 L1133.21 1211.78 L1133.8 1211.78 L1134.39 1211.78 L1134.97 1211.78 L1135.56 1211.78 L1136.15 1211.78 L1136.73 1211.78 L1137.32 1211.78 L1137.91 1211.78 L1138.49 1211.78 L1139.08 1211.78 L1139.67 1211.78 L1140.25 1211.78 L1140.84 1211.78 L1141.42 1211.78 L1142.01 1211.78 L1142.6 1211.78 L1143.18 1211.78 L1143.77 1211.78 L1144.36 1211.78 L1144.94 1211.78 L1145.53 1211.78 L1146.12 1211.78 L1146.7 1211.78 L1147.29 1211.78 L1147.88 1211.78 L1148.46 1211.78 L1149.05 1211.78 L1149.63 1211.78 L1150.22 1211.78 L1150.81 1211.78 L1151.39 1211.78 L1151.98 1211.78 L1152.57 1211.78 L1153.15 1211.78 L1153.74 1211.78 L1154.33 1211.78 L1154.91 1211.78 L1155.5 1211.78 L1156.09 1211.78 L1156.67 1211.78 L1157.26 1211.78 L1157.84 1211.78 L1158.43 1211.78 L1159.02 1211.78 L1159.6 1211.78 L1160.19 1211.78 L1160.78 1211.78 L1161.36 1211.78 L1161.95 1211.78 L1162.54 1211.78 L1163.12 1211.78 L1163.71 1211.78 L1164.29 1211.78 L1164.88 1211.78 L1165.47 1211.78 L1166.05 1211.78 L1166.64 1211.78 L1167.23 1211.78 L1167.81 1211.78 L1168.4 1211.78 L1168.99 1211.78 L1169.57 1211.78 L1170.16 1211.78 L1170.75 1211.78 L1171.33 1211.78 L1171.92 1211.78 L1172.5 1211.78 L1173.09 1211.78 L1173.68 1211.78 L1174.26 1211.78 L1174.85 1211.78 L1175.44 1211.78 L1176.02 1211.78 L1176.61 1211.78 L1177.2 1211.78 L1177.78 1211.78 L1178.37 1211.78 L1178.96 1211.78 L1179.54 1211.78 L1180.13 1211.78 L1180.71 1211.78 L1181.3 1211.78 L1181.89 1211.78 L1182.47 1211.78 L1183.06 1211.78 L1183.65 1211.78 L1184.23 1211.78 L1184.82 1211.78 L1185.41 1211.78 L1185.99 1211.78 L1186.58 1211.78 L1187.16 1211.78 L1187.75 1211.78 L1188.34 1211.78 L1188.92 1211.78 L1189.51 1211.78 L1190.1 1211.78 L1190.68 1211.78 L1191.27 1211.78 L1191.86 1211.78 L1192.44 1211.78 L1193.03 1211.78 L1193.62 1211.78 L1194.2 1211.78 L1194.79 1211.78 L1195.37 1211.78 L1195.96 1211.78 L1196.55 1211.78 L1197.13 1211.78 L1197.72 1211.78 L1198.31 1211.78 L1198.89 1211.78 L1199.48 1211.78 L1200.07 1211.78 L1200.65 1211.78 L1201.24 1211.78 L1201.83 1211.78 L1202.41 1211.78 L1203 1211.78 L1203.58 1211.78 L1204.17 1211.78 L1204.76 1211.78 L1205.34 1211.78 L1205.93 1211.78 L1206.52 1211.78 L1207.1 1211.78 L1207.69 1211.78 L1208.28 1211.78 L1208.86 1211.78 L1209.45 1211.78 L1210.03 1211.78 L1210.62 1211.78 L1211.21 1211.78 L1211.79 1211.78 L1212.38 1211.78 L1212.97 1211.78 L1213.55 1211.78 L1214.14 1211.78 L1214.73 1211.78 L1215.31 1211.78 L1215.9 1211.78 L1216.49 1211.78 L1217.07 1211.78 L1217.66 1211.78 L1218.24 1211.78 L1218.83 1211.78 L1219.42 1211.78 L1220 1211.78 L1220.59 1211.78 L1221.18 1211.78 L1221.76 1211.78 L1222.35 1211.78 L1222.94 1211.78 L1223.52 1211.78 L1224.11 1211.78 L1224.7 1211.78 L1225.28 1211.78 L1225.87 1211.78 L1226.45 1211.78 L1227.04 1211.78 L1227.63 1211.78 L1228.21 1211.78 L1228.8 1211.78 L1229.39 1211.78 L1229.97 1211.78 L1230.56 1211.78 L1231.15 1211.78 L1231.73 1211.78 L1232.32 1211.78 L1232.91 1211.78 L1233.49 1211.78 L1234.08 1211.78 L1234.66 1211.78 L1235.25 1211.78 L1235.84 1211.78 L1236.42 1211.78 L1237.01 1211.78 L1237.6 1211.78 L1238.18 1211.78 L1238.77 1211.78 L1239.36 1211.78 L1239.94 1211.78 L1240.53 1211.78 L1241.11 1211.78 L1241.7 1211.78 L1242.29 1211.78 L1242.87 1211.78 L1243.46 1211.78 L1244.05 1211.78 L1244.63 1211.78 L1245.22 1211.78 L1245.81 1211.78 L1246.39 1211.78 L1246.98 1211.78 L1247.57 1211.78 L1248.15 1211.78 L1248.74 1211.78 L1249.32 1211.78 L1249.91 1211.78 L1250.5 1211.78 L1251.08 1211.78 L1251.67 1211.78 L1252.26 1211.78 L1252.84 1211.78 L1253.43 1211.78 L1254.02 1211.78 L1254.6 1211.78 L1255.19 1211.78 L1255.78 1211.78 L1256.36 1211.78 L1256.95 1211.78 L1257.53 1211.78 L1258.12 1211.78 L1258.71 1211.78 L1259.29 1211.78 L1259.88 1211.78 L1260.47 1211.78 L1261.05 1211.78 L1261.64 1211.78 L1262.23 1211.78 L1262.81 1211.78 L1263.4 1211.78 L1263.98 1211.78 L1264.57 1211.78 L1265.16 1211.78 L1265.74 1211.78 L1266.33 1211.78 L1266.92 1211.78 L1267.5 1211.78 L1268.09 1211.78 L1268.68 1211.78 L1269.26 1211.78 L1269.85 1211.78 L1270.44 1211.78 L1271.02 1211.78 L1271.61 1211.78 L1272.19 1211.78 L1272.78 1211.78 L1273.37 1211.78 L1273.95 1211.78 L1274.54 1211.78 L1275.13 1211.78 L1275.71 1211.78 L1276.3 1211.78 L1276.89 1211.78 L1277.47 1211.78 L1278.06 1211.78 L1278.65 1211.78 L1279.23 1211.78 L1279.82 1211.78 L1280.4 1211.78 L1280.99 1211.78 L1281.58 1211.78 L1282.16 1211.78 L1282.75 1211.78 L1283.34 1211.78 L1283.92 1211.78 L1284.51 1211.78 L1285.1 1211.78 L1285.68 1211.78 L1286.27 1211.78 L1286.86 1211.78 L1287.44 1211.78 L1288.03 1211.78 L1288.61 1211.78 L1289.2 1211.78 L1289.79 1211.78 L1290.37 1211.78 L1290.96 1211.78 L1291.55 1211.78 L1292.13 1211.78 L1292.72 1211.78 L1293.31 1211.78 L1293.89 1211.78 L1294.48 1211.78 L1295.06 1211.78 L1295.65 1211.78 L1296.24 1211.78 L1296.82 1211.78 L1297.41 1211.78 L1298 1211.78 L1298.58 1211.78 L1299.17 1211.78 L1299.76 1211.78 L1300.34 1211.78 L1300.93 1211.78 L1301.52 1211.78 L1302.1 1211.78 L1302.69 1211.78 L1303.27 1211.78 L1303.86 1211.78 L1304.45 1211.78 L1305.03 1211.78 L1305.62 1211.78 L1306.21 1211.78 L1306.79 1211.78 L1307.38 1211.78 L1307.97 1211.78 L1308.55 1211.78 L1309.14 1211.78 L1309.73 1211.78 L1310.31 1211.78 L1310.9 1211.78 L1311.48 1211.78 L1312.07 1211.78 L1312.66 1211.78 L1313.24 1211.78 L1313.83 1211.78 L1314.42 1211.78 L1315 1211.78 L1315.59 1211.78 L1316.18 1211.78 L1316.76 1211.78 L1317.35 1211.78 L1317.93 1211.78 L1318.52 1211.78 L1319.11 1211.78 L1319.69 1211.78 L1320.28 1211.78 L1320.87 1211.78 L1321.45 1211.78 L1322.04 1211.78 L1322.63 1211.78 L1323.21 1211.78 L1323.8 1211.78 L1324.39 1211.78 L1324.97 1211.78 L1325.56 1211.78 L1326.14 1211.78 L1326.73 1211.78 L1327.32 1211.78 L1327.9 1211.78 L1328.49 1211.78 L1329.08 1211.78 L1329.66 1211.78 L1330.25 1211.78 L1330.84 1211.78 L1331.42 1211.78 L1332.01 1211.78 L1332.6 1211.78 L1333.18 1211.78 L1333.77 1211.78 L1334.35 1211.78 L1334.94 1211.78 L1335.53 1211.78 L1336.11 1211.78 L1336.7 1211.78 L1337.29 1211.78 L1337.87 1211.78 L1338.46 1211.78 L1339.05 1211.78 L1339.63 1211.78 L1340.22 1211.78 L1340.8 1211.78 L1341.39 1211.78 L1341.98 1211.78 L1342.56 1211.78 L1343.15 1211.78 L1343.74 1211.78 L1344.32 1211.78 L1344.91 1211.78 L1345.5 1211.78 L1346.08 1211.78 L1346.67 1211.78 L1347.26 1211.78 L1347.84 1211.78 L1348.43 1211.78 L1349.01 1211.78 L1349.6 1211.78 L1350.19 1211.78 L1350.77 1211.78 L1351.36 1211.78 L1351.95 1211.78 L1352.53 1211.78 L1353.12 1211.78 L1353.71 1211.78 L1354.29 1211.78 L1354.88 1211.78 L1355.47 1211.78 L1356.05 1211.78 L1356.64 1211.78 L1357.22 1211.78 L1357.81 1211.78 L1358.4 1211.78 L1358.98 1211.78 L1359.57 1211.78 L1360.16 1211.78 L1360.74 1211.78 L1361.33 1211.78 L1361.92 1211.78 L1362.5 1211.78 L1363.09 1211.78 L1363.68 1211.78 L1364.26 1211.78 L1364.85 1211.78 L1365.43 1211.78 L1366.02 1211.78 L1366.61 1211.78 L1367.19 1211.78 L1367.78 1211.78 L1368.37 1211.78 L1368.95 1211.78 L1369.54 1211.78 L1370.13 1211.78 L1370.71 1211.78 L1371.3 1211.78 L1371.88 1211.78 L1372.47 1211.78 L1373.06 1211.78 L1373.64 1211.78 L1374.23 1211.78 L1374.82 1211.78 L1375.4 1211.78 L1375.99 1211.78 L1376.58 1211.78 L1377.16 1211.78 L1377.75 1211.78 L1378.34 1211.78 L1378.92 1211.78 L1379.51 1211.78 L1380.09 1211.78 L1380.68 1211.78 L1381.27 1211.78 L1381.85 1211.78 L1382.44 1211.78 L1383.03 1211.78 L1383.61 1211.78 L1384.2 1211.78 L1384.79 1211.78 L1385.37 1211.78 L1385.96 1211.78 L1386.55 1211.78 L1387.13 1211.78 L1387.72 1211.78 L1388.3 1211.78 L1388.89 1211.78 L1389.48 1211.78 L1390.06 1211.78 L1390.65 1211.78 L1391.24 1211.78 L1391.82 1211.78 L1392.41 1211.78 L1393 1211.78 L1393.58 1211.78 L1394.17 1211.78 L1394.75 1211.78 L1395.34 1211.78 L1395.93 1211.78 L1396.51 1211.78 L1397.1 1211.78 L1397.69 1211.78 L1398.27 1211.78 L1398.86 1211.78 L1399.45 1211.78 L1400.03 1211.78 L1400.62 1211.78 L1401.21 1211.78 L1401.79 1211.78 L1402.38 1211.78 L1402.96 1211.78 L1403.55 1211.78 L1404.14 1211.78 L1404.72 1211.78 L1405.31 1211.78 L1405.9 1211.78 L1406.48 1211.78 L1407.07 1211.78 L1407.66 1211.78 L1408.24 1211.78 L1408.83 1211.78 L1409.42 1211.78 L1410 1211.78 L1410.59 1211.78 L1411.17 1211.78 L1411.76 1211.78 L1412.35 1211.78 L1412.93 1211.78 L1413.52 1211.78 L1414.11 1211.78 L1414.69 1211.78 L1415.28 1211.78 L1415.87 1211.78 L1416.45 1211.78 L1417.04 1211.78 L1417.63 1211.78 L1418.21 1211.78 L1418.8 1211.78 L1419.38 1211.78 L1419.97 1211.78 L1420.56 1211.78 L1421.14 1211.78 L1421.73 1211.78 L1422.32 1211.78 L1422.9 1211.78 L1423.49 1211.78 L1424.08 1211.78 L1424.66 1211.78 L1425.25 1211.78 L1425.83 1211.78 L1426.42 1211.78 L1427.01 1211.78 L1427.59 1211.78 L1428.18 1211.78 L1428.77 1211.78 L1429.35 1211.78 L1429.94 1211.78 L1430.53 1211.78 L1431.11 1211.78 L1431.7 1211.78 L1432.29 1211.78 L1432.87 1211.78 L1433.46 1211.78 L1434.04 1211.78 L1434.63 1211.78 L1435.22 1211.78 L1435.8 1211.78 L1436.39 1211.78 L1436.98 1211.78 L1437.56 1211.78 L1438.15 1211.78 L1438.74 1211.78 L1439.32 1211.78 L1439.91 1211.78 L1440.5 1211.78 L1441.08 1211.78 L1441.67 1211.78 L1442.25 1211.78 L1442.84 1211.78 L1443.43 1211.78 L1444.01 1211.78 L1444.6 1211.78 L1445.19 1211.78 L1445.77 1211.78 L1446.36 1211.78 L1446.95 1211.78 L1447.53 1211.78 L1448.12 1211.78 L1448.7 1211.78 L1449.29 1211.78 L1449.88 1211.78 L1450.46 1211.78 L1451.05 1211.78 L1451.64 1211.78 L1452.22 1211.78 L1452.81 1211.78 L1453.4 1211.78 L1453.98 1211.78 L1454.57 1211.78 L1455.16 1211.78 L1455.74 1211.78 L1456.33 1211.78 L1456.91 1211.78 L1457.5 1211.78 L1458.09 1211.78 L1458.67 1211.78 L1459.26 1211.78 L1459.85 1211.78 L1460.43 1211.78 L1461.02 1211.78 L1461.61 1211.78 L1462.19 1211.78 L1462.78 1211.78 L1463.37 1211.78 L1463.95 1211.78 L1464.54 1211.78 L1465.12 1211.78 L1465.71 1211.78 L1466.3 1211.78 L1466.88 1211.78 L1467.47 1211.78 L1468.06 1211.78 L1468.64 1211.78 L1469.23 1211.78 L1469.82 1211.78 L1470.4 1211.78 L1470.99 1211.78 L1471.57 1211.78 L1472.16 1211.78 L1472.75 1211.78 L1473.33 1211.78 L1473.92 1211.78 L1474.51 1211.78 L1475.09 1211.78 L1475.68 1211.78 L1476.27 1211.78 L1476.85 1211.78 L1477.44 1211.78 L1478.03 1211.78 L1478.61 1211.78 L1479.2 1211.78 L1479.78 1211.78 L1480.37 1211.78 L1480.96 1211.78 L1481.54 1211.78 L1482.13 1211.78 L1482.72 1211.78 L1483.3 1211.78 L1483.89 1211.78 L1484.48 1211.78 L1485.06 1211.78 L1485.65 1211.78 L1486.24 1211.78 L1486.82 1211.78 L1487.41 1211.78 L1487.99 1211.78 L1488.58 1211.78 L1489.17 1211.78 L1489.75 1211.78 L1490.34 1211.78 L1490.93 1211.78 L1491.51 1211.78 L1492.1 1211.78 L1492.69 1211.78 L1493.27 1211.78 L1493.86 1211.78 L1494.45 1211.78 L1495.03 1211.78 L1495.62 1211.78 L1496.2 1211.78 L1496.79 1211.78 L1497.38 1211.78 L1497.96 1211.78 L1498.55 1211.78 L1499.14 1211.78 L1499.72 1211.78 L1500.31 1211.78 L1500.9 1211.78 L1501.48 1211.78 L1502.07 1211.78 L1502.65 1211.78 L1503.24 1211.78 L1503.83 1211.78 L1504.41 1211.78 L1505 1211.78 L1505.59 1211.78 L1506.17 1211.78 L1506.76 1211.78 L1507.35 1211.78 L1507.93 1211.78 L1508.52 1211.78 L1509.11 1211.78 L1509.69 1211.78 L1510.28 1211.78 L1510.86 1211.78 L1511.45 1211.78 L1512.04 1211.78 L1512.62 1211.78 L1513.21 1211.78 L1513.8 1211.78 L1514.38 1211.78 L1514.97 1211.78 L1515.56 1211.78 L1516.14 1211.78 L1516.73 1211.78 L1517.32 1211.78 L1517.9 1211.78 L1518.49 1211.78 L1519.07 1211.78 L1519.66 1211.78 L1520.25 1211.78 L1520.83 1211.78 L1521.42 1211.78 L1522.01 1211.78 L1522.59 1211.78 L1523.18 1211.78 L1523.77 1211.78 L1524.35 1211.78 L1524.94 1211.78 L1525.52 1211.78 L1526.11 1211.78 L1526.7 1211.78 L1527.28 1211.78 L1527.87 1211.78 L1528.46 1211.78 L1529.04 1211.78 L1529.63 1211.78 L1530.22 1211.78 L1530.8 1211.78 L1531.39 1211.78 L1531.98 1211.78 L1532.56 1211.78 L1533.15 1211.78 L1533.73 1211.78 L1534.32 1211.78 L1534.91 1211.78 L1535.49 1211.78 L1536.08 1211.78 L1536.67 1211.78 L1537.25 1211.78 L1537.84 1211.78 L1538.43 1211.78 L1539.01 1211.78 L1539.6 1211.78 L1540.19 1211.78 L1540.77 1211.78 L1541.36 1211.78 L1541.94 1211.78 L1542.53 1211.78 L1543.12 1211.78 L1543.7 1211.78 L1544.29 1211.78 L1544.88 1211.78 L1545.46 1211.78 L1546.05 1211.78 L1546.64 1211.78 L1547.22 1211.78 L1547.81 1211.78 L1548.4 1211.78 L1548.98 1211.78 L1549.57 1211.78 L1550.15 1211.78 L1550.74 1211.78 L1551.33 1211.78 L1551.91 1211.78 L1552.5 1211.78 L1553.09 1211.78 L1553.67 1211.78 L1554.26 1211.78 L1554.85 1211.78 L1555.43 1211.78 L1556.02 1211.78 L1556.6 1211.78 L1557.19 1211.78 L1557.78 1211.78 L1558.36 1211.78 L1558.95 1211.78 L1559.54 1211.78 L1560.12 1211.78 L1560.71 1211.78 L1561.3 1211.78 L1561.88 1211.78 L1562.47 1211.78 L1563.06 1211.78 L1563.64 1211.78 L1564.23 1211.78 L1564.81 1211.78 L1565.4 1211.78 L1565.99 1211.78 L1566.57 1211.78 L1567.16 1211.78 L1567.75 1211.78 L1568.33 1211.78 L1568.92 1211.78 L1569.51 1211.78 L1570.09 1211.78 L1570.68 1211.78 L1571.27 1211.78 L1571.85 1211.78 L1572.44 1211.78 L1573.02 1211.78 L1573.61 1211.78 L1574.2 1211.78 L1574.78 1211.78 L1575.37 1211.78 L1575.96 1211.78 L1576.54 1211.78 L1577.13 1211.78 L1577.72 1211.78 L1578.3 1211.78 L1578.89 1211.78 L1579.47 1211.78 L1580.06 1211.78 L1580.65 1211.78 L1581.23 1211.78 L1581.82 1211.78 L1582.41 1211.78 L1582.99 1211.78 L1583.58 1211.78 L1584.17 1211.78 L1584.75 1211.78 L1585.34 1211.78 L1585.93 1211.78 L1586.51 1211.78 L1587.1 1211.78 L1587.68 1211.78 L1588.27 1211.78 L1588.86 1211.78 L1589.44 1211.78 L1590.03 1211.78 L1590.62 1211.78 L1591.2 1211.78 L1591.79 1211.78 L1592.38 1211.78 L1592.96 1211.78 L1593.55 1211.78 L1594.14 1211.78 L1594.72 1211.78 L1595.31 1211.78 L1595.89 1211.78 L1596.48 1211.78 L1597.07 1211.78 L1597.65 1211.78 L1598.24 1211.78 L1598.83 1211.78 L1599.41 1211.78 L1600 1211.78 L1600.59 1211.78 L1601.17 1211.78 L1601.76 1211.78 L1602.34 1211.78 L1602.93 1211.78 L1603.52 1211.78 L1604.1 1211.78 L1604.69 1211.78 L1605.28 1211.78 L1605.86 1211.78 L1606.45 1211.78 L1607.04 1211.78 L1607.62 1211.78 L1608.21 1211.78 L1608.8 1211.78 L1609.38 1211.78 L1609.97 1211.78 L1610.55 1211.78 L1611.14 1211.78 L1611.73 1211.78 L1612.31 1211.78 L1612.9 1211.78 L1613.49 1211.78 L1614.07 1211.78 L1614.66 1211.78 L1615.25 1211.78 L1615.83 1211.78 L1616.42 1211.78 L1617.01 1211.78 L1617.59 1211.78 L1618.18 1211.78 L1618.76 1211.78 L1619.35 1211.78 L1619.94 1211.78 L1620.52 1211.78 L1621.11 1211.78 L1621.7 1211.78 L1622.28 1211.78 L1622.87 1211.78 L1623.46 1211.78 L1624.04 1211.78 L1624.63 1211.78 L1625.22 1211.78 L1625.8 1211.78 L1626.39 1211.78 L1626.97 1211.78 L1627.56 1211.78 L1628.15 1211.78 L1628.73 1211.78 L1629.32 1211.78 L1629.91 1211.78 L1630.49 1211.78 L1631.08 1211.78 L1631.67 1211.78 L1632.25 1211.78 L1632.84 1211.78 L1633.42 1211.78 L1634.01 1211.78 L1634.6 1211.78 L1635.18 1211.78 L1635.77 1211.78 L1636.36 1211.78 L1636.94 1211.78 L1637.53 1211.78 L1638.12 1211.78 L1638.7 1211.78 L1639.29 1211.78 L1639.88 1211.78 L1640.46 1211.78 L1641.05 1211.78 L1641.63 1211.78 L1642.22 1211.78 L1642.81 1211.78 L1643.39 1211.78 L1643.98 1211.78 L1644.57 1211.78 L1645.15 1211.78 L1645.74 1211.78 L1646.33 1211.78 L1646.91 1211.78 L1647.5 1211.78 L1648.09 1211.78 L1648.67 1211.78 L1649.26 1211.78 L1649.84 1211.78 L1650.43 1211.78 L1651.02 1211.78 L1651.6 1211.78 L1652.19 1211.78 L1652.78 1211.78 L1653.36 1211.78 L1653.95 1211.78 L1654.54 1211.78 L1655.12 1211.78 L1655.71 1211.78 L1656.29 1211.78 L1656.88 1211.78 L1657.47 1211.78 L1658.05 1211.78 L1658.64 1211.78 L1659.23 1211.78 L1659.81 1211.78 L1660.4 1211.78 L1660.99 1211.78 L1661.57 1211.78 L1662.16 1211.78 L1662.75 1211.78 L1663.33 1211.78 L1663.92 1211.78 L1664.5 1211.78 L1665.09 1211.78 L1665.68 1211.78 L1666.26 1211.78 L1666.85 1211.78 L1667.44 1211.78 L1668.02 1211.78 L1668.61 1211.78 L1669.2 1211.78 L1669.78 1211.78 L1670.37 1211.78 L1670.96 1211.78 L1671.54 1211.78 L1672.13 1211.78 L1672.71 1211.78 L1673.3 1211.78 L1673.89 1211.78 L1674.47 1211.78 L1675.06 1211.78 L1675.65 1211.78 L1676.23 1211.78 L1676.82 1211.78 L1677.41 1211.78 L1677.99 1211.78 L1678.58 1211.78 L1679.17 1211.78 L1679.75 1211.78 L1680.34 1211.78 L1680.92 1211.78 L1681.51 1211.78 L1682.1 1211.78 L1682.68 1211.78 L1683.27 1211.78 L1683.86 1211.78 L1684.44 1211.78 L1685.03 1211.78 L1685.62 1211.78 L1686.2 1211.78 L1686.79 1211.78 L1687.37 1211.78 L1687.96 1211.78 L1688.55 1211.78 L1689.13 1211.78 L1689.72 1211.78 L1690.31 1211.78 L1690.89 1211.78 L1691.48 1211.78 L1692.07 1211.78 L1692.65 1211.78 L1693.24 1211.78 L1693.83 1211.78 L1694.41 1211.78 L1695 1211.78 L1695.58 1211.78 L1696.17 1211.78 L1696.76 1211.78 L1697.34 1211.78 L1697.93 1211.78 L1698.52 1211.78 L1699.1 1211.78 L1699.69 1211.78 L1700.28 1211.78 L1700.86 1211.78 L1701.45 1211.78 L1702.04 1211.78 L1702.62 1211.78 L1703.21 1211.78 L1703.79 1211.78 L1704.38 1211.78 L1704.97 1211.78 L1705.55 1211.78 L1706.14 1211.78 L1706.73 1211.78 L1707.31 1211.78 L1707.9 1211.78 L1708.49 1211.78 L1709.07 1211.78 L1709.66 1211.78 L1710.24 1211.78 L1710.83 1211.78 L1711.42 1211.78 L1712 1211.78 L1712.59 1211.78 L1713.18 1211.78 L1713.76 1211.78 L1714.35 1211.78 L1714.94 1211.78 L1715.52 1211.78 L1716.11 1211.78 L1716.7 1211.78 L1717.28 1211.78 L1717.87 1211.78 L1718.45 1211.78 L1719.04 1211.78 L1719.63 1211.78 L1720.21 1211.78 L1720.8 1211.78 L1721.39 1211.78 L1721.97 1211.78 L1722.56 1211.78 L1723.15 1211.78 L1723.73 1211.78 L1724.32 1211.78 L1724.91 1211.78 L1725.49 1211.78 L1726.08 1211.78 L1726.66 1211.78 L1727.25 1211.78 L1727.84 1211.78 L1728.42 1211.78 L1729.01 1211.78 L1729.6 1211.78 L1730.18 1211.78 L1730.77 1211.78 L1731.36 1211.78 L1731.94 1211.78 L1732.53 1211.78 L1733.11 1211.78 L1733.7 1211.78 L1734.29 1211.78 L1734.87 1211.78 L1735.46 1211.78 L1736.05 1211.78 L1736.63 1211.78 L1737.22 1211.78 L1737.81 1211.78 L1738.39 1211.78 L1738.98 1211.78 L1739.57 1211.78 L1740.15 1211.78 L1740.74 1211.78 L1741.32 1211.78 L1741.91 1211.78 L1742.5 1211.78 L1743.08 1211.78 L1743.67 1211.78 L1744.26 1211.78 L1744.84 1211.78 L1745.43 1211.78 L1746.02 1211.78 L1746.6 1211.78 L1747.19 1211.78 L1747.78 1211.78 L1748.36 1211.78 L1748.95 1211.78 L1749.53 1211.78 L1750.12 1211.78 L1750.71 1211.78 L1751.29 1211.78 L1751.88 1211.78 L1752.47 1211.78 L1753.05 1211.78 L1753.64 1211.78 L1754.23 1211.78 L1754.81 1211.78 L1755.4 1211.78 L1755.99 1211.78 L1756.57 1211.78 L1757.16 1211.78 L1757.74 1211.78 L1758.33 1211.78 L1758.92 1211.78 L1759.5 1211.78 L1760.09 1211.78 L1760.68 1211.78 L1761.26 1211.78 L1761.85 1211.78 L1762.44 1211.78 L1763.02 1211.78 L1763.61 1211.78 L1764.19 1211.78 L1764.78 1211.78 L1765.37 1211.78 L1765.95 1211.78 L1766.54 1211.78 L1767.13 1211.78 L1767.71 1211.78 L1768.3 1211.78 L1768.89 1211.78 L1769.47 1211.78 L1770.06 1211.78 L1770.65 1211.78 L1771.23 1211.78 L1771.82 1211.78 L1772.4 1211.78 L1772.99 1211.78 L1773.58 1211.78 L1774.16 1211.78 L1774.75 1211.78 L1775.34 1211.78 L1775.92 1211.78 L1776.51 1211.78 L1777.1 1211.78 L1777.68 1211.78 L1778.27 1211.78 L1778.86 1211.78 L1779.44 1211.78 L1780.03 1211.78 L1780.61 1211.78 L1781.2 1211.78 L1781.79 1211.78 L1782.37 1211.78 L1782.96 1211.78 L1783.55 1211.78 L1784.13 1211.78 L1784.72 1211.78 L1785.31 1211.78 L1785.89 1211.78 L1786.48 1211.78 L1787.06 1211.78 L1787.65 1211.78 L1788.24 1211.78 L1788.82 1211.78 L1789.41 1211.78 L1790 1211.78 L1790.58 1211.78 L1791.17 1211.78 L1791.76 1211.78 L1792.34 1211.78 L1792.93 1211.78 L1793.52 1211.78 L1794.1 1211.78 L1794.69 1211.78 L1795.27 1211.78 L1795.86 1211.78 L1796.45 1211.78 L1797.03 1211.78 L1797.62 1211.78 L1798.21 1211.78 L1798.79 1211.78 L1799.38 1211.78 L1799.97 1211.78 L1800.55 1211.78 L1801.14 1211.78 L1801.73 1211.78 L1802.31 1211.78 L1802.9 1211.78 L1803.48 1211.78 L1804.07 1211.78 L1804.66 1211.78 L1805.24 1211.78 L1805.83 1211.78 L1806.42 1211.78 L1807 1211.78 L1807.59 1211.78 L1808.18 1211.78 L1808.76 1211.78 L1809.35 1211.78 L1809.94 1211.78 L1810.52 1211.78 L1811.11 1211.78 L1811.69 1211.78 L1812.28 1211.78 L1812.87 1211.78 L1813.45 1211.78 L1814.04 1211.78 L1814.63 1211.78 L1815.21 1211.78 L1815.8 1211.78 L1816.39 1211.78 L1816.97 1211.78 L1817.56 1211.78 L1818.14 1211.78 L1818.73 1211.78 L1819.32 1211.78 L1819.9 1211.78 L1820.49 1211.78 L1821.08 1211.78 L1821.66 1211.78 L1822.25 1211.78 L1822.84 1211.78 L1823.42 1211.78 L1824.01 1211.78 L1824.6 1211.78 L1825.18 1211.78 L1825.77 1211.78 L1826.35 1211.78 L1826.94 1211.78 L1827.53 1211.78 L1828.11 1211.78 L1828.7 1211.78 L1829.29 1211.78 L1829.87 1211.78 L1830.46 1211.78 L1831.05 1211.78 L1831.63 1211.78 L1832.22 1211.78 L1832.81 1211.78 L1833.39 1211.78 L1833.98 1211.78 L1834.56 1211.78 L1835.15 1211.78 L1835.74 1211.78 L1836.32 1211.78 L1836.91 1211.78 L1837.5 1211.78 L1838.08 1211.78 L1838.67 1211.78 L1839.26 1211.78 L1839.84 1211.78 L1840.43 1211.78 L1841.01 1211.78 L1841.6 1211.78 L1842.19 1211.78 L1842.77 1211.78 L1843.36 1211.78 L1843.95 1211.78 L1844.53 1211.78 L1845.12 1211.78 L1845.71 1211.78 L1846.29 1211.78 L1846.88 1211.78 L1847.47 1211.78 L1848.05 1211.78 L1848.64 1211.78 L1849.22 1211.78 L1849.81 1211.78 L1850.4 1211.78 L1850.98 1211.78 L1851.57 1211.78 L1852.16 1211.78 L1852.74 1211.78 L1853.33 1211.78 L1853.92 1211.78 L1854.5 1211.78 L1855.09 1211.78 L1855.68 1211.78 L1856.26 1211.78 L1856.85 1211.78 L1857.43 1211.78 L1858.02 1211.78 L1858.61 1211.78 L1859.19 1211.78 L1859.78 1211.78 L1860.37 1211.78 L1860.95 1211.78 L1861.54 1211.78 L1862.13 1211.78 L1862.71 1211.78 L1863.3 1211.78 L1863.88 1211.78 L1864.47 1211.78 L1865.06 1211.78 L1865.64 1211.78 L1866.23 1211.78 L1866.82 1211.78 L1867.4 1211.78 L1867.99 1211.78 L1868.58 1211.78 L1869.16 1211.78 L1869.75 1211.78 L1870.34 1211.78 L1870.92 1211.78 L1871.51 1211.78 L1872.09 1211.78 L1872.68 1211.78 L1873.27 1211.78 L1873.85 1211.78 L1874.44 1211.78 L1875.03 1211.78 L1875.61 1211.78 L1876.2 1211.78 L1876.79 1211.78 L1877.37 1211.78 L1877.96 1211.78 L1878.55 1211.78 L1879.13 1211.78 L1879.72 1211.78 L1880.3 1211.78 L1880.89 1211.78 L1881.48 1211.78 L1882.06 1211.78 L1882.65 1211.78 L1883.24 1211.78 L1883.82 1211.78 L1884.41 1211.78 L1885 1211.78 L1885.58 1211.78 L1886.17 1211.78 L1886.76 1211.78 L1887.34 1211.78 L1887.93 1211.78 L1888.51 1211.78 L1889.1 1211.78 L1889.69 1211.78 L1890.27 1211.78 L1890.86 1211.78 L1891.45 1211.78 L1892.03 1211.78 L1892.62 1211.78 L1893.21 1211.78 L1893.79 1211.78 L1894.38 1211.78 L1894.96 1211.78 L1895.55 1211.78 L1896.14 1211.78 L1896.72 1211.78 L1897.31 1211.78 L1897.9 1211.78 L1898.48 1211.78 L1899.07 1211.78 L1899.66 1211.78 L1900.24 1211.78 L1900.83 1211.78 L1901.42 1211.78 L1902 1211.78 L1902.59 1211.78 L1903.17 1211.78 L1903.76 1211.78 L1904.35 1211.78 L1904.93 1211.78 L1905.52 1211.78 L1906.11 1211.78 L1906.69 1211.78 L1907.28 1211.78 L1907.87 1211.78 L1908.45 1211.78 L1909.04 1211.78 L1909.63 1211.78 L1910.21 1211.78 L1910.8 1211.78 L1911.38 1211.78 L1911.97 1211.78 L1912.56 1211.78 L1913.14 1211.78 L1913.73 1211.78 L1914.32 1211.78 L1914.9 1211.78 L1915.49 1211.78 L1916.08 1211.78 L1916.66 1211.78 L1917.25 1211.78 L1917.83 1211.78 L1918.42 1211.78 L1919.01 1211.78 L1919.59 1211.78 L1920.18 1211.78 L1920.77 1211.78 L1921.35 1211.78 L1921.94 1211.78 L1922.53 1211.78 L1923.11 1211.78 L1923.7 1211.78 L1924.29 1211.78 L1924.87 1211.78 L1925.46 1211.78 L1926.04 1211.78 L1926.63 1211.78 L1927.22 1211.78 L1927.8 1211.78 L1928.39 1211.78 L1928.98 1211.78 L1929.56 1211.78 L1930.15 1211.78 L1930.74 1211.78 L1931.32 1211.78 L1931.91 1211.78 L1932.5 1211.78 L1933.08 1211.78 L1933.67 1211.78 L1934.25 1211.78 L1934.84 1211.78 L1935.43 1211.78 L1936.01 1211.78 L1936.6 1211.78 L1937.19 1211.78 L1937.77 1211.78 L1938.36 1211.78 L1938.95 1211.78 L1939.53 1211.78 L1940.12 1211.78 L1940.71 1211.78 L1941.29 1211.78 L1941.88 1211.78 L1942.46 1211.78 L1943.05 1211.78 L1943.64 1211.78 L1944.22 1211.78 L1944.81 1211.78 L1945.4 1211.78 L1945.98 1211.78 L1946.57 1211.78 L1947.16 1211.78 L1947.74 1211.78 L1948.33 1211.78 L1948.91 1211.78 L1949.5 1211.78 L1950.09 1211.78 L1950.67 1211.78 L1951.26 1211.78 L1951.85 1211.78 L1952.43 1211.78 L1953.02 1211.78 L1953.61 1211.78 L1954.19 1211.78 L1954.78 1211.78 L1955.37 1211.78 L1955.95 1211.78 L1956.54 1211.78 L1957.12 1211.78 L1957.71 1211.78 L1958.3 1211.78 L1958.88 1211.78 L1959.47 1211.78 L1960.06 1211.78 L1960.64 1211.78 L1961.23 1211.78 L1961.82 1211.78 L1962.4 1211.78 L1962.99 1211.78 L1963.58 1211.78 L1964.16 1211.78 L1964.75 1211.78 L1965.33 1211.78 L1965.92 1211.78 L1966.51 1211.78 L1967.09 1211.78 L1967.68 1211.78 L1968.27 1211.78 L1968.85 1211.78 L1969.44 1211.78 L1970.03 1211.78 L1970.61 1211.78 L1971.2 1211.78 L1971.78 1211.78 L1972.37 1211.78 L1972.96 1211.78 L1973.54 1211.78 L1974.13 1211.78 L1974.72 1211.78 L1975.3 1211.78 L1975.89 1211.78 L1976.48 1211.78 L1977.06 1211.78 L1977.65 1211.78 L1978.24 1211.78 L1978.82 1211.78 L1979.41 1211.78 L1979.99 1211.78 L1980.58 1211.78 L1981.17 1211.78 L1981.75 1211.78 L1982.34 1211.78 L1982.93 1211.78 L1983.51 1211.78 L1984.1 1211.78 L1984.69 1211.78 L1985.27 1211.78 L1985.86 1211.78 L1986.45 1211.78 L1987.03 1211.78 L1987.62 1211.78 L1988.2 1211.78 L1988.79 1211.78 L1989.38 1211.78 L1989.96 1211.78 L1990.55 1211.78 L1991.14 1211.78 L1991.72 1211.78 L1992.31 1211.78 L1992.9 1211.78 L1993.48 1211.78 L1994.07 1211.78 L1994.65 1211.78 L1995.24 1211.78 L1995.83 1211.78 L1996.41 1211.78 L1997 1211.78 L1997.59 1211.78 L1998.17 1211.78 L1998.76 1211.78 L1999.35 1211.78 L1999.93 1211.78 L2000.52 1211.78 L2001.11 1211.78 L2001.69 1211.78 L2002.28 1211.78 L2002.86 1211.78 L2003.45 1211.78 L2004.04 1211.78 L2004.62 1211.78 L2005.21 1211.78 L2005.8 1211.78 L2006.38 1211.78 L2006.97 1211.78 L2007.56 1211.78 L2008.14 1211.78 L2008.73 1211.78 L2009.32 1211.78 L2009.9 1211.78 L2010.49 1211.78 L2011.07 1211.78 L2011.66 1211.78 L2012.25 1211.78 L2012.83 1211.78 L2013.42 1211.78 L2014.01 1211.78 L2014.59 1211.78 L2015.18 1211.78 L2015.77 1211.78 L2016.35 1211.78 L2016.94 1211.78 L2017.53 1211.78 L2018.11 1211.78 L2018.7 1211.78 L2019.28 1211.78 L2019.87 1211.78 L2020.46 1211.78 L2021.04 1211.78 L2021.63 1211.78 L2022.22 1211.78 L2022.8 1211.78 L2023.39 1211.78 L2023.98 1211.78 L2024.56 1211.78 L2025.15 1211.78 L2025.73 1211.78 L2026.32 1211.78 L2026.91 1211.78 L2027.49 1211.78 L2028.08 1211.78 L2028.67 1211.78 L2029.25 1211.78 L2029.84 1211.78 L2030.43 1211.78 L2031.01 1211.78 L2031.6 1211.78 L2032.19 1211.78 L2032.77 1211.78 L2033.36 1211.78 L2033.94 1211.78 L2034.53 1211.78 L2035.12 1211.78 L2035.7 1211.78 L2036.29 1211.78 L2036.88 1211.78 L2037.46 1211.78 L2038.05 1211.78 L2038.64 1211.78 L2039.22 1211.78 L2039.81 1211.78 L2040.4 1211.78 L2040.98 1211.78 L2041.57 1211.78 L2042.15 1211.78 L2042.74 1211.78 L2043.33 1211.78 L2043.91 1211.78 L2044.5 1211.78 L2045.09 1211.78 L2045.67 1211.78 L2046.26 1211.78 L2046.85 1211.78 L2047.43 1211.78 L2048.02 1211.78 L2048.6 1211.78 L2049.19 1211.78 L2049.78 1211.78 L2050.36 1211.78 L2050.95 1211.78 L2051.54 1211.78 L2052.12 1211.78 L2052.71 1211.78 L2053.3 1211.78 L2053.88 1211.78 L2054.47 1211.78 L2055.06 1211.78 L2055.64 1211.78 L2056.23 1211.78 L2056.81 1211.78 L2057.4 1211.78 L2057.99 1211.78 L2058.57 1211.78 L2059.16 1211.78 L2059.75 1211.78 L2060.33 1211.78 L2060.92 1211.78 L2061.51 1211.78 L2062.09 1211.78 L2062.68 1211.78 L2063.27 1211.78 L2063.85 1211.78 L2064.44 1211.78 L2065.02 1211.78 L2065.61 1211.78 L2066.2 1211.78 L2066.78 1211.78 L2067.37 1211.78 L2067.96 1211.78 L2068.54 1211.78 L2069.13 1211.78 L2069.72 1211.78 L2070.3 1211.78 L2070.89 1211.78 L2071.48 1211.78 L2072.06 1211.78 L2072.65 1211.78 L2073.23 1211.78 L2073.82 1211.78 L2074.41 1211.78 L2074.99 1211.78 L2075.58 1211.78 L2076.17 1211.78 L2076.75 1211.78 L2077.34 1211.78 L2077.93 1211.78 L2078.51 1211.78 L2079.1 1211.78 L2079.68 1211.78 L2080.27 1211.78 L2080.86 1211.78 L2081.44 1211.78 L2082.03 1211.78 L2082.62 1211.78 L2083.2 1211.78 L2083.79 1211.78 L2084.38 1211.78 L2084.96 1211.78 L2085.55 1211.78 L2086.14 1211.78 L2086.72 1211.78 L2087.31 1211.78 L2087.89 1211.78 L2088.48 1211.78 L2089.07 1211.78 L2089.65 1211.78 L2090.24 1211.78 L2090.83 1211.78 L2091.41 1211.78 L2092 1211.78 L2092.59 1211.78 L2093.17 1211.78 L2093.76 1211.78 L2094.35 1211.78 L2094.93 1211.78 L2095.52 1211.78 L2096.1 1211.78 L2096.69 1211.78 L2097.28 1211.78 L2097.86 1211.78 L2098.45 1211.78 L2099.04 1211.78 L2099.62 1211.78 L2100.21 1211.78 L2100.8 1211.78 L2101.38 1211.78 L2101.97 1211.78 L2102.55 1211.78 L2103.14 1211.78 L2103.73 1211.78 L2104.31 1211.78 L2104.9 1211.78 L2105.49 1211.78 L2106.07 1211.78 L2106.66 1211.78 L2107.25 1211.78 L2107.83 1211.78 L2108.42 1211.78 L2109.01 1211.78 L2109.59 1211.78 L2110.18 1211.78 L2110.76 1211.78 L2111.35 1211.78 L2111.94 1211.78 L2112.52 1211.78 L2113.11 1211.78 L2113.7 1211.78 L2114.28 1211.78 L2114.87 1211.78 L2115.46 1211.78 L2116.04 1211.78 L2116.63 1211.78 L2117.22 1211.78 L2117.8 1211.78 L2118.39 1211.78 L2118.97 1211.78 L2119.56 1211.78 L2120.15 1211.78 L2120.73 1211.78 L2121.32 1211.78 L2121.91 1211.78 L2122.49 1211.78 L2123.08 1211.78 L2123.67 1211.78 L2124.25 1211.78 L2124.84 1211.78 L2125.42 1211.78 L2126.01 1211.78 L2126.6 1211.78 L2127.18 1211.78 L2127.77 1211.78 L2128.36 1211.78 L2128.94 1211.78 L2129.53 1211.78 L2130.12 1211.78 L2130.7 1211.78 L2131.29 1211.78 L2131.88 1211.78 L2132.46 1211.78 L2133.05 1211.78 L2133.63 1211.78 L2134.22 1211.78 L2134.81 1211.78 L2135.39 1211.78 L2135.98 1211.78 L2136.57 1211.78 L2137.15 1211.78 L2137.74 1211.78 L2138.33 1211.78 L2138.91 1211.78 L2139.5 1211.78 L2140.09 1211.78 L2140.67 1211.78 L2141.26 1211.78 L2141.84 1211.78 L2142.43 1211.78 L2143.02 1211.78 L2143.6 1211.78 L2144.19 1211.78 L2144.78 1211.78 L2145.36 1211.78 L2145.95 1211.78 L2146.54 1211.78 L2147.12 1211.78 L2147.71 1211.78 L2148.3 1211.78 L2148.88 1211.78 L2149.47 1211.78 L2150.05 1211.78 L2150.64 1211.78 L2151.23 1211.78 L2151.81 1211.78 L2152.4 1211.78 L2152.99 1211.78 L2153.57 1211.78 L2154.16 1211.78 L2154.75 1211.78 L2155.33 1211.78 L2155.92 1211.78 L2156.5 1211.78 L2157.09 1211.78 L2157.68 1211.78 L2158.26 1211.78 L2158.26 1211.13 L2157.68 1211.13 L2157.09 1211.13 L2156.5 1211.13 L2155.92 1211.13 L2155.33 1211.13 L2154.75 1211.13 L2154.16 1211.13 L2153.57 1211.13 L2152.99 1211.13 L2152.4 1211.13 L2151.81 1211.13 L2151.23 1211.13 L2150.64 1211.13 L2150.05 1211.13 L2149.47 1211.13 L2148.88 1211.13 L2148.3 1211.13 L2147.71 1211.13 L2147.12 1211.13 L2146.54 1211.13 L2145.95 1211.13 L2145.36 1211.13 L2144.78 1211.13 L2144.19 1211.13 L2143.6 1211.13 L2143.02 1211.13 L2142.43 1211.13 L2141.84 1211.13 L2141.26 1211.13 L2140.67 1211.13 L2140.09 1211.13 L2139.5 1211.13 L2138.91 1211.13 L2138.33 1211.13 L2137.74 1211.13 L2137.15 1211.13 L2136.57 1211.13 L2135.98 1211.13 L2135.39 1211.13 L2134.81 1211.13 L2134.22 1211.13 L2133.63 1211.13 L2133.05 1211.13 L2132.46 1211.13 L2131.88 1211.13 L2131.29 1211.13 L2130.7 1211.13 L2130.12 1211.13 L2129.53 1211.13 L2128.94 1211.13 L2128.36 1211.13 L2127.77 1211.13 L2127.18 1211.13 L2126.6 1211.13 L2126.01 1211.13 L2125.42 1211.13 L2124.84 1211.13 L2124.25 1211.13 L2123.67 1211.13 L2123.08 1211.13 L2122.49 1211.13 L2121.91 1211.13 L2121.32 1211.13 L2120.73 1211.13 L2120.15 1211.13 L2119.56 1211.13 L2118.97 1211.13 L2118.39 1211.13 L2117.8 1211.13 L2117.22 1211.13 L2116.63 1211.13 L2116.04 1211.13 L2115.46 1211.13 L2114.87 1211.13 L2114.28 1211.13 L2113.7 1211.13 L2113.11 1211.13 L2112.52 1211.13 L2111.94 1211.13 L2111.35 1211.13 L2110.76 1211.13 L2110.18 1211.13 L2109.59 1211.13 L2109.01 1211.13 L2108.42 1211.13 L2107.83 1211.13 L2107.25 1211.13 L2106.66 1211.13 L2106.07 1211.13 L2105.49 1211.13 L2104.9 1211.13 L2104.31 1211.13 L2103.73 1211.13 L2103.14 1211.13 L2102.55 1211.13 L2101.97 1211.13 L2101.38 1211.13 L2100.8 1211.13 L2100.21 1211.13 L2099.62 1211.13 L2099.04 1211.13 L2098.45 1211.13 L2097.86 1211.13 L2097.28 1211.13 L2096.69 1211.13 L2096.1 1211.13 L2095.52 1211.13 L2094.93 1211.13 L2094.35 1211.13 L2093.76 1211.13 L2093.17 1211.13 L2092.59 1211.13 L2092 1211.13 L2091.41 1211.13 L2090.83 1211.13 L2090.24 1211.13 L2089.65 1211.13 L2089.07 1211.13 L2088.48 1211.13 L2087.89 1211.13 L2087.31 1211.13 L2086.72 1211.13 L2086.14 1211.13 L2085.55 1211.13 L2084.96 1211.13 L2084.38 1211.13 L2083.79 1211.13 L2083.2 1211.13 L2082.62 1211.13 L2082.03 1211.13 L2081.44 1211.13 L2080.86 1211.13 L2080.27 1211.13 L2079.68 1211.13 L2079.1 1211.13 L2078.51 1211.13 L2077.93 1211.13 L2077.34 1211.13 L2076.75 1211.13 L2076.17 1211.13 L2075.58 1211.13 L2074.99 1211.13 L2074.41 1211.13 L2073.82 1211.13 L2073.23 1211.13 L2072.65 1211.13 L2072.06 1211.13 L2071.48 1211.13 L2070.89 1211.13 L2070.3 1211.13 L2069.72 1211.13 L2069.13 1211.13 L2068.54 1211.13 L2067.96 1211.13 L2067.37 1211.13 L2066.78 1211.13 L2066.2 1211.13 L2065.61 1211.13 L2065.02 1211.13 L2064.44 1211.13 L2063.85 1211.13 L2063.27 1211.13 L2062.68 1211.13 L2062.09 1211.13 L2061.51 1211.13 L2060.92 1211.13 L2060.33 1211.13 L2059.75 1211.13 L2059.16 1211.13 L2058.57 1211.13 L2057.99 1211.13 L2057.4 1211.13 L2056.81 1211.13 L2056.23 1211.13 L2055.64 1211.13 L2055.06 1211.13 L2054.47 1211.13 L2053.88 1211.13 L2053.3 1211.13 L2052.71 1211.13 L2052.12 1211.13 L2051.54 1211.13 L2050.95 1211.13 L2050.36 1211.13 L2049.78 1211.13 L2049.19 1211.13 L2048.6 1211.13 L2048.02 1211.13 L2047.43 1211.13 L2046.85 1211.13 L2046.26 1211.13 L2045.67 1211.13 L2045.09 1211.13 L2044.5 1211.13 L2043.91 1211.13 L2043.33 1211.13 L2042.74 1211.13 L2042.15 1211.13 L2041.57 1211.13 L2040.98 1211.13 L2040.4 1211.13 L2039.81 1211.13 L2039.22 1211.13 L2038.64 1211.13 L2038.05 1211.13 L2037.46 1211.13 L2036.88 1211.13 L2036.29 1211.13 L2035.7 1211.13 L2035.12 1211.13 L2034.53 1211.13 L2033.94 1211.13 L2033.36 1211.13 L2032.77 1211.13 L2032.19 1211.13 L2031.6 1211.13 L2031.01 1211.13 L2030.43 1211.13 L2029.84 1211.13 L2029.25 1211.13 L2028.67 1211.13 L2028.08 1211.13 L2027.49 1211.13 L2026.91 1211.13 L2026.32 1211.13 L2025.73 1211.13 L2025.15 1211.13 L2024.56 1211.13 L2023.98 1211.13 L2023.39 1211.13 L2022.8 1211.13 L2022.22 1211.13 L2021.63 1211.13 L2021.04 1211.13 L2020.46 1211.13 L2019.87 1211.13 L2019.28 1211.13 L2018.7 1211.13 L2018.11 1211.13 L2017.53 1211.13 L2016.94 1211.13 L2016.35 1211.13 L2015.77 1211.13 L2015.18 1211.13 L2014.59 1211.13 L2014.01 1211.13 L2013.42 1211.13 L2012.83 1211.13 L2012.25 1211.13 L2011.66 1211.13 L2011.07 1211.13 L2010.49 1211.13 L2009.9 1211.13 L2009.32 1211.13 L2008.73 1211.13 L2008.14 1211.13 L2007.56 1211.13 L2006.97 1211.13 L2006.38 1211.13 L2005.8 1211.13 L2005.21 1211.13 L2004.62 1211.13 L2004.04 1211.13 L2003.45 1211.13 L2002.86 1211.13 L2002.28 1211.13 L2001.69 1211.13 L2001.11 1211.13 L2000.52 1211.13 L1999.93 1211.13 L1999.35 1211.13 L1998.76 1211.13 L1998.17 1211.13 L1997.59 1211.13 L1997 1211.13 L1996.41 1211.13 L1995.83 1211.13 L1995.24 1211.13 L1994.65 1211.13 L1994.07 1211.13 L1993.48 1211.13 L1992.9 1211.13 L1992.31 1211.13 L1991.72 1211.13 L1991.14 1211.13 L1990.55 1211.13 L1989.96 1211.13 L1989.38 1211.13 L1988.79 1211.13 L1988.2 1211.13 L1987.62 1211.13 L1987.03 1211.13 L1986.45 1211.13 L1985.86 1211.13 L1985.27 1211.13 L1984.69 1211.13 L1984.1 1211.13 L1983.51 1211.13 L1982.93 1211.13 L1982.34 1211.13 L1981.75 1211.13 L1981.17 1211.13 L1980.58 1211.13 L1979.99 1211.13 L1979.41 1211.13 L1978.82 1211.13 L1978.24 1211.13 L1977.65 1211.13 L1977.06 1211.13 L1976.48 1211.13 L1975.89 1211.13 L1975.3 1211.13 L1974.72 1211.13 L1974.13 1211.13 L1973.54 1211.13 L1972.96 1211.13 L1972.37 1211.13 L1971.78 1211.13 L1971.2 1211.13 L1970.61 1211.13 L1970.03 1211.13 L1969.44 1211.13 L1968.85 1211.13 L1968.27 1211.13 L1967.68 1211.13 L1967.09 1211.13 L1966.51 1211.13 L1965.92 1211.13 L1965.33 1211.13 L1964.75 1211.13 L1964.16 1211.13 L1963.58 1211.13 L1962.99 1211.13 L1962.4 1211.13 L1961.82 1211.13 L1961.23 1211.13 L1960.64 1211.13 L1960.06 1211.13 L1959.47 1211.13 L1958.88 1211.13 L1958.3 1211.13 L1957.71 1211.13 L1957.12 1211.13 L1956.54 1211.13 L1955.95 1211.13 L1955.37 1211.13 L1954.78 1211.13 L1954.19 1211.13 L1953.61 1211.13 L1953.02 1211.13 L1952.43 1211.13 L1951.85 1211.13 L1951.26 1211.13 L1950.67 1211.13 L1950.09 1211.13 L1949.5 1211.13 L1948.91 1211.13 L1948.33 1211.13 L1947.74 1211.13 L1947.16 1211.13 L1946.57 1211.13 L1945.98 1211.13 L1945.4 1211.13 L1944.81 1211.13 L1944.22 1211.13 L1943.64 1211.13 L1943.05 1211.13 L1942.46 1211.13 L1941.88 1211.13 L1941.29 1211.13 L1940.71 1211.13 L1940.12 1211.13 L1939.53 1211.13 L1938.95 1211.13 L1938.36 1211.13 L1937.77 1211.13 L1937.19 1211.13 L1936.6 1211.13 L1936.01 1211.13 L1935.43 1211.13 L1934.84 1211.13 L1934.25 1211.13 L1933.67 1211.13 L1933.08 1211.13 L1932.5 1211.13 L1931.91 1211.13 L1931.32 1211.13 L1930.74 1211.13 L1930.15 1211.13 L1929.56 1211.13 L1928.98 1211.13 L1928.39 1211.13 L1927.8 1211.13 L1927.22 1211.13 L1926.63 1211.13 L1926.04 1211.13 L1925.46 1211.13 L1924.87 1211.13 L1924.29 1211.13 L1923.7 1211.13 L1923.11 1211.13 L1922.53 1211.13 L1921.94 1211.13 L1921.35 1211.13 L1920.77 1211.13 L1920.18 1211.13 L1919.59 1211.13 L1919.01 1211.13 L1918.42 1211.13 L1917.83 1211.13 L1917.25 1211.13 L1916.66 1211.13 L1916.08 1211.13 L1915.49 1211.13 L1914.9 1211.13 L1914.32 1211.13 L1913.73 1211.13 L1913.14 1211.13 L1912.56 1211.13 L1911.97 1211.13 L1911.38 1211.13 L1910.8 1211.13 L1910.21 1211.13 L1909.63 1211.13 L1909.04 1211.13 L1908.45 1211.13 L1907.87 1211.13 L1907.28 1211.13 L1906.69 1211.13 L1906.11 1211.13 L1905.52 1211.13 L1904.93 1211.13 L1904.35 1211.13 L1903.76 1211.13 L1903.17 1211.13 L1902.59 1211.13 L1902 1211.13 L1901.42 1211.13 L1900.83 1211.13 L1900.24 1211.13 L1899.66 1211.13 L1899.07 1211.13 L1898.48 1211.13 L1897.9 1211.13 L1897.31 1211.13 L1896.72 1211.13 L1896.14 1211.13 L1895.55 1211.13 L1894.96 1211.13 L1894.38 1211.13 L1893.79 1211.13 L1893.21 1211.13 L1892.62 1211.13 L1892.03 1211.13 L1891.45 1211.13 L1890.86 1211.13 L1890.27 1211.13 L1889.69 1211.13 L1889.1 1211.13 L1888.51 1211.13 L1887.93 1211.13 L1887.34 1211.13 L1886.76 1211.13 L1886.17 1211.13 L1885.58 1211.13 L1885 1211.13 L1884.41 1211.13 L1883.82 1211.13 L1883.24 1211.13 L1882.65 1211.13 L1882.06 1211.13 L1881.48 1211.13 L1880.89 1211.13 L1880.3 1211.13 L1879.72 1211.13 L1879.13 1211.13 L1878.55 1211.13 L1877.96 1211.13 L1877.37 1211.13 L1876.79 1211.13 L1876.2 1211.13 L1875.61 1211.13 L1875.03 1211.13 L1874.44 1211.13 L1873.85 1211.13 L1873.27 1211.13 L1872.68 1211.13 L1872.09 1211.13 L1871.51 1211.13 L1870.92 1211.13 L1870.34 1211.13 L1869.75 1211.13 L1869.16 1211.13 L1868.58 1211.13 L1867.99 1211.13 L1867.4 1211.13 L1866.82 1211.13 L1866.23 1211.13 L1865.64 1211.13 L1865.06 1211.13 L1864.47 1211.13 L1863.88 1211.13 L1863.3 1211.13 L1862.71 1211.13 L1862.13 1211.13 L1861.54 1211.13 L1860.95 1211.13 L1860.37 1211.13 L1859.78 1211.13 L1859.19 1211.13 L1858.61 1211.13 L1858.02 1211.13 L1857.43 1211.13 L1856.85 1211.13 L1856.26 1211.13 L1855.68 1211.13 L1855.09 1211.13 L1854.5 1211.13 L1853.92 1211.13 L1853.33 1211.13 L1852.74 1211.13 L1852.16 1211.13 L1851.57 1211.13 L1850.98 1211.13 L1850.4 1211.13 L1849.81 1211.13 L1849.22 1211.13 L1848.64 1211.13 L1848.05 1211.13 L1847.47 1211.13 L1846.88 1211.13 L1846.29 1211.13 L1845.71 1211.13 L1845.12 1211.13 L1844.53 1211.13 L1843.95 1211.13 L1843.36 1211.13 L1842.77 1211.13 L1842.19 1211.13 L1841.6 1211.13 L1841.01 1211.13 L1840.43 1211.13 L1839.84 1211.13 L1839.26 1211.13 L1838.67 1211.13 L1838.08 1211.13 L1837.5 1211.13 L1836.91 1211.13 L1836.32 1211.13 L1835.74 1211.13 L1835.15 1211.13 L1834.56 1211.13 L1833.98 1211.13 L1833.39 1211.13 L1832.81 1211.13 L1832.22 1211.13 L1831.63 1211.13 L1831.05 1211.13 L1830.46 1211.13 L1829.87 1211.13 L1829.29 1211.13 L1828.7 1211.13 L1828.11 1211.13 L1827.53 1211.13 L1826.94 1211.13 L1826.35 1211.13 L1825.77 1211.13 L1825.18 1211.13 L1824.6 1211.13 L1824.01 1211.13 L1823.42 1211.13 L1822.84 1211.13 L1822.25 1211.13 L1821.66 1211.13 L1821.08 1211.13 L1820.49 1211.13 L1819.9 1211.13 L1819.32 1211.13 L1818.73 1211.13 L1818.14 1211.13 L1817.56 1211.13 L1816.97 1211.13 L1816.39 1211.13 L1815.8 1211.13 L1815.21 1211.13 L1814.63 1211.13 L1814.04 1211.13 L1813.45 1211.13 L1812.87 1211.13 L1812.28 1211.13 L1811.69 1211.13 L1811.11 1211.13 L1810.52 1211.13 L1809.94 1211.13 L1809.35 1211.13 L1808.76 1211.13 L1808.18 1211.13 L1807.59 1211.13 L1807 1211.13 L1806.42 1211.13 L1805.83 1211.13 L1805.24 1211.13 L1804.66 1211.13 L1804.07 1211.13 L1803.48 1211.13 L1802.9 1211.13 L1802.31 1211.13 L1801.73 1211.13 L1801.14 1211.13 L1800.55 1211.13 L1799.97 1211.13 L1799.38 1211.13 L1798.79 1211.13 L1798.21 1211.13 L1797.62 1211.13 L1797.03 1211.13 L1796.45 1211.13 L1795.86 1211.13 L1795.27 1211.13 L1794.69 1211.13 L1794.1 1211.13 L1793.52 1211.13 L1792.93 1211.13 L1792.34 1211.13 L1791.76 1211.13 L1791.17 1211.13 L1790.58 1211.13 L1790 1211.13 L1789.41 1211.13 L1788.82 1211.13 L1788.24 1211.13 L1787.65 1211.13 L1787.06 1211.13 L1786.48 1211.13 L1785.89 1211.13 L1785.31 1211.13 L1784.72 1211.13 L1784.13 1211.13 L1783.55 1211.13 L1782.96 1211.13 L1782.37 1211.13 L1781.79 1211.13 L1781.2 1211.13 L1780.61 1211.13 L1780.03 1211.13 L1779.44 1211.13 L1778.86 1211.13 L1778.27 1211.13 L1777.68 1211.13 L1777.1 1211.13 L1776.51 1211.13 L1775.92 1211.13 L1775.34 1211.13 L1774.75 1211.13 L1774.16 1211.13 L1773.58 1211.13 L1772.99 1211.13 L1772.4 1211.13 L1771.82 1211.13 L1771.23 1211.13 L1770.65 1211.13 L1770.06 1211.13 L1769.47 1211.13 L1768.89 1211.13 L1768.3 1211.13 L1767.71 1211.13 L1767.13 1211.13 L1766.54 1211.13 L1765.95 1211.13 L1765.37 1211.13 L1764.78 1211.13 L1764.19 1211.13 L1763.61 1211.13 L1763.02 1211.13 L1762.44 1211.13 L1761.85 1211.13 L1761.26 1211.13 L1760.68 1211.13 L1760.09 1211.13 L1759.5 1211.13 L1758.92 1211.13 L1758.33 1211.13 L1757.74 1211.13 L1757.16 1211.13 L1756.57 1211.13 L1755.99 1211.13 L1755.4 1211.13 L1754.81 1211.13 L1754.23 1211.13 L1753.64 1211.13 L1753.05 1211.13 L1752.47 1211.13 L1751.88 1211.13 L1751.29 1211.13 L1750.71 1211.13 L1750.12 1211.13 L1749.53 1211.13 L1748.95 1211.13 L1748.36 1211.13 L1747.78 1211.13 L1747.19 1211.13 L1746.6 1211.13 L1746.02 1211.13 L1745.43 1211.13 L1744.84 1211.13 L1744.26 1211.13 L1743.67 1211.13 L1743.08 1211.13 L1742.5 1211.13 L1741.91 1211.13 L1741.32 1211.13 L1740.74 1211.13 L1740.15 1211.13 L1739.57 1211.13 L1738.98 1211.13 L1738.39 1211.13 L1737.81 1211.13 L1737.22 1211.13 L1736.63 1211.13 L1736.05 1211.13 L1735.46 1211.13 L1734.87 1211.13 L1734.29 1211.13 L1733.7 1211.13 L1733.11 1211.13 L1732.53 1211.13 L1731.94 1211.13 L1731.36 1211.13 L1730.77 1211.13 L1730.18 1211.13 L1729.6 1211.13 L1729.01 1211.13 L1728.42 1211.13 L1727.84 1211.13 L1727.25 1211.13 L1726.66 1211.13 L1726.08 1211.13 L1725.49 1211.13 L1724.91 1211.13 L1724.32 1211.13 L1723.73 1211.13 L1723.15 1211.13 L1722.56 1211.13 L1721.97 1211.13 L1721.39 1211.13 L1720.8 1211.13 L1720.21 1211.13 L1719.63 1211.13 L1719.04 1211.13 L1718.45 1211.13 L1717.87 1211.13 L1717.28 1211.13 L1716.7 1211.13 L1716.11 1211.13 L1715.52 1211.13 L1714.94 1211.13 L1714.35 1211.13 L1713.76 1211.13 L1713.18 1211.13 L1712.59 1211.13 L1712 1211.13 L1711.42 1211.13 L1710.83 1211.13 L1710.24 1211.13 L1709.66 1211.13 L1709.07 1211.13 L1708.49 1211.13 L1707.9 1211.13 L1707.31 1211.13 L1706.73 1211.13 L1706.14 1211.13 L1705.55 1211.13 L1704.97 1211.13 L1704.38 1211.13 L1703.79 1211.13 L1703.21 1211.13 L1702.62 1211.13 L1702.04 1211.13 L1701.45 1211.13 L1700.86 1211.13 L1700.28 1211.13 L1699.69 1211.13 L1699.1 1211.13 L1698.52 1211.13 L1697.93 1211.13 L1697.34 1211.13 L1696.76 1211.13 L1696.17 1211.13 L1695.58 1211.13 L1695 1211.13 L1694.41 1211.13 L1693.83 1211.13 L1693.24 1211.13 L1692.65 1211.13 L1692.07 1211.13 L1691.48 1211.13 L1690.89 1211.13 L1690.31 1211.13 L1689.72 1211.13 L1689.13 1211.13 L1688.55 1211.13 L1687.96 1211.13 L1687.37 1211.13 L1686.79 1211.13 L1686.2 1211.13 L1685.62 1211.13 L1685.03 1211.13 L1684.44 1211.13 L1683.86 1211.13 L1683.27 1211.13 L1682.68 1211.13 L1682.1 1211.13 L1681.51 1211.13 L1680.92 1211.13 L1680.34 1211.13 L1679.75 1211.13 L1679.17 1211.13 L1678.58 1211.13 L1677.99 1211.13 L1677.41 1211.13 L1676.82 1211.13 L1676.23 1211.13 L1675.65 1211.13 L1675.06 1211.13 L1674.47 1211.13 L1673.89 1211.13 L1673.3 1211.13 L1672.71 1211.13 L1672.13 1211.13 L1671.54 1211.13 L1670.96 1211.13 L1670.37 1211.13 L1669.78 1211.13 L1669.2 1211.13 L1668.61 1211.13 L1668.02 1211.13 L1667.44 1211.13 L1666.85 1211.13 L1666.26 1211.13 L1665.68 1211.13 L1665.09 1211.13 L1664.5 1211.13 L1663.92 1211.13 L1663.33 1211.13 L1662.75 1211.13 L1662.16 1211.13 L1661.57 1211.13 L1660.99 1211.13 L1660.4 1211.13 L1659.81 1211.13 L1659.23 1211.13 L1658.64 1211.13 L1658.05 1211.13 L1657.47 1211.13 L1656.88 1211.13 L1656.29 1211.13 L1655.71 1211.13 L1655.12 1211.13 L1654.54 1211.13 L1653.95 1211.13 L1653.36 1211.13 L1652.78 1211.13 L1652.19 1211.13 L1651.6 1211.13 L1651.02 1211.13 L1650.43 1211.13 L1649.84 1211.13 L1649.26 1211.13 L1648.67 1211.13 L1648.09 1211.13 L1647.5 1211.13 L1646.91 1211.13 L1646.33 1211.13 L1645.74 1211.13 L1645.15 1211.13 L1644.57 1211.13 L1643.98 1211.13 L1643.39 1211.13 L1642.81 1211.13 L1642.22 1211.13 L1641.63 1211.13 L1641.05 1211.13 L1640.46 1211.13 L1639.88 1211.13 L1639.29 1211.13 L1638.7 1211.13 L1638.12 1211.13 L1637.53 1211.13 L1636.94 1211.13 L1636.36 1211.13 L1635.77 1211.13 L1635.18 1211.13 L1634.6 1211.13 L1634.01 1211.13 L1633.42 1211.13 L1632.84 1211.13 L1632.25 1211.13 L1631.67 1211.13 L1631.08 1211.13 L1630.49 1211.13 L1629.91 1211.13 L1629.32 1211.13 L1628.73 1211.13 L1628.15 1211.13 L1627.56 1211.13 L1626.97 1211.13 L1626.39 1211.13 L1625.8 1211.13 L1625.22 1211.13 L1624.63 1211.13 L1624.04 1211.13 L1623.46 1211.13 L1622.87 1211.13 L1622.28 1211.13 L1621.7 1211.13 L1621.11 1211.13 L1620.52 1211.13 L1619.94 1211.13 L1619.35 1211.13 L1618.76 1211.13 L1618.18 1211.13 L1617.59 1211.13 L1617.01 1211.13 L1616.42 1211.13 L1615.83 1211.13 L1615.25 1211.13 L1614.66 1211.13 L1614.07 1211.13 L1613.49 1211.13 L1612.9 1211.13 L1612.31 1211.13 L1611.73 1211.13 L1611.14 1211.13 L1610.55 1211.13 L1609.97 1211.13 L1609.38 1211.13 L1608.8 1211.13 L1608.21 1211.13 L1607.62 1211.13 L1607.04 1211.13 L1606.45 1211.13 L1605.86 1211.13 L1605.28 1211.13 L1604.69 1211.13 L1604.1 1211.13 L1603.52 1211.13 L1602.93 1211.13 L1602.34 1211.13 L1601.76 1211.13 L1601.17 1211.13 L1600.59 1211.13 L1600 1211.13 L1599.41 1211.13 L1598.83 1211.13 L1598.24 1211.13 L1597.65 1211.13 L1597.07 1211.13 L1596.48 1211.13 L1595.89 1211.13 L1595.31 1211.13 L1594.72 1211.13 L1594.14 1211.13 L1593.55 1211.13 L1592.96 1211.13 L1592.38 1211.13 L1591.79 1211.13 L1591.2 1211.13 L1590.62 1211.13 L1590.03 1211.13 L1589.44 1211.13 L1588.86 1211.13 L1588.27 1211.13 L1587.68 1211.13 L1587.1 1211.13 L1586.51 1211.13 L1585.93 1211.13 L1585.34 1211.13 L1584.75 1211.13 L1584.17 1211.13 L1583.58 1211.13 L1582.99 1211.13 L1582.41 1211.13 L1581.82 1211.13 L1581.23 1211.13 L1580.65 1211.13 L1580.06 1211.13 L1579.47 1211.13 L1578.89 1211.13 L1578.3 1211.13 L1577.72 1211.13 L1577.13 1211.13 L1576.54 1211.13 L1575.96 1211.13 L1575.37 1211.13 L1574.78 1211.13 L1574.2 1211.13 L1573.61 1211.13 L1573.02 1211.13 L1572.44 1211.13 L1571.85 1211.13 L1571.27 1211.13 L1570.68 1211.13 L1570.09 1211.13 L1569.51 1211.13 L1568.92 1211.13 L1568.33 1211.13 L1567.75 1211.13 L1567.16 1211.13 L1566.57 1211.13 L1565.99 1211.13 L1565.4 1211.13 L1564.81 1211.13 L1564.23 1211.13 L1563.64 1211.13 L1563.06 1211.13 L1562.47 1211.13 L1561.88 1211.13 L1561.3 1211.13 L1560.71 1211.13 L1560.12 1211.13 L1559.54 1211.13 L1558.95 1211.13 L1558.36 1211.13 L1557.78 1211.13 L1557.19 1211.13 L1556.6 1211.13 L1556.02 1211.13 L1555.43 1211.13 L1554.85 1211.13 L1554.26 1211.13 L1553.67 1211.13 L1553.09 1211.13 L1552.5 1211.13 L1551.91 1211.13 L1551.33 1211.13 L1550.74 1211.13 L1550.15 1211.13 L1549.57 1211.13 L1548.98 1211.13 L1548.4 1211.13 L1547.81 1211.13 L1547.22 1211.13 L1546.64 1211.13 L1546.05 1211.13 L1545.46 1211.13 L1544.88 1211.13 L1544.29 1211.13 L1543.7 1211.13 L1543.12 1211.13 L1542.53 1211.13 L1541.94 1211.13 L1541.36 1211.13 L1540.77 1211.13 L1540.19 1211.13 L1539.6 1211.13 L1539.01 1211.13 L1538.43 1211.13 L1537.84 1211.13 L1537.25 1211.13 L1536.67 1211.13 L1536.08 1211.13 L1535.49 1211.13 L1534.91 1211.13 L1534.32 1211.13 L1533.73 1211.13 L1533.15 1211.13 L1532.56 1211.13 L1531.98 1211.13 L1531.39 1211.13 L1530.8 1211.13 L1530.22 1211.13 L1529.63 1211.13 L1529.04 1211.13 L1528.46 1211.13 L1527.87 1211.13 L1527.28 1211.13 L1526.7 1211.13 L1526.11 1211.13 L1525.52 1211.13 L1524.94 1211.13 L1524.35 1211.13 L1523.77 1211.13 L1523.18 1211.13 L1522.59 1211.13 L1522.01 1211.13 L1521.42 1211.13 L1520.83 1211.13 L1520.25 1211.13 L1519.66 1211.13 L1519.07 1211.13 L1518.49 1211.13 L1517.9 1211.13 L1517.32 1211.13 L1516.73 1211.13 L1516.14 1211.13 L1515.56 1211.13 L1514.97 1211.13 L1514.38 1211.13 L1513.8 1211.13 L1513.21 1211.13 L1512.62 1211.13 L1512.04 1211.13 L1511.45 1211.13 L1510.86 1211.13 L1510.28 1211.13 L1509.69 1211.13 L1509.11 1211.13 L1508.52 1211.13 L1507.93 1211.13 L1507.35 1211.13 L1506.76 1211.13 L1506.17 1211.13 L1505.59 1211.13 L1505 1211.13 L1504.41 1211.13 L1503.83 1211.13 L1503.24 1211.13 L1502.65 1211.13 L1502.07 1211.13 L1501.48 1211.13 L1500.9 1211.13 L1500.31 1211.13 L1499.72 1211.13 L1499.14 1211.13 L1498.55 1211.13 L1497.96 1211.13 L1497.38 1211.13 L1496.79 1211.13 L1496.2 1211.13 L1495.62 1211.13 L1495.03 1211.13 L1494.45 1211.13 L1493.86 1211.13 L1493.27 1211.13 L1492.69 1211.13 L1492.1 1211.13 L1491.51 1211.13 L1490.93 1211.13 L1490.34 1211.13 L1489.75 1211.13 L1489.17 1211.13 L1488.58 1211.13 L1487.99 1211.13 L1487.41 1211.13 L1486.82 1211.13 L1486.24 1211.13 L1485.65 1211.13 L1485.06 1211.13 L1484.48 1211.13 L1483.89 1211.13 L1483.3 1211.13 L1482.72 1211.13 L1482.13 1211.13 L1481.54 1211.13 L1480.96 1211.13 L1480.37 1211.13 L1479.78 1211.13 L1479.2 1211.13 L1478.61 1211.13 L1478.03 1211.13 L1477.44 1211.13 L1476.85 1211.13 L1476.27 1211.13 L1475.68 1211.13 L1475.09 1211.13 L1474.51 1211.13 L1473.92 1211.13 L1473.33 1211.13 L1472.75 1211.13 L1472.16 1211.13 L1471.57 1211.13 L1470.99 1211.13 L1470.4 1211.13 L1469.82 1211.13 L1469.23 1211.13 L1468.64 1211.13 L1468.06 1211.13 L1467.47 1211.13 L1466.88 1211.13 L1466.3 1211.13 L1465.71 1211.13 L1465.12 1211.13 L1464.54 1211.13 L1463.95 1211.13 L1463.37 1211.13 L1462.78 1211.13 L1462.19 1211.13 L1461.61 1211.13 L1461.02 1211.13 L1460.43 1211.13 L1459.85 1211.13 L1459.26 1211.13 L1458.67 1211.13 L1458.09 1211.13 L1457.5 1211.13 L1456.91 1211.13 L1456.33 1211.13 L1455.74 1211.13 L1455.16 1211.13 L1454.57 1211.13 L1453.98 1211.13 L1453.4 1211.13 L1452.81 1211.13 L1452.22 1211.13 L1451.64 1211.13 L1451.05 1211.13 L1450.46 1211.13 L1449.88 1211.13 L1449.29 1211.13 L1448.7 1211.13 L1448.12 1211.13 L1447.53 1211.13 L1446.95 1211.13 L1446.36 1211.13 L1445.77 1211.13 L1445.19 1211.13 L1444.6 1211.13 L1444.01 1211.13 L1443.43 1211.13 L1442.84 1211.13 L1442.25 1211.13 L1441.67 1211.13 L1441.08 1211.13 L1440.5 1211.13 L1439.91 1211.13 L1439.32 1211.13 L1438.74 1211.13 L1438.15 1211.13 L1437.56 1211.13 L1436.98 1211.13 L1436.39 1211.13 L1435.8 1211.13 L1435.22 1211.13 L1434.63 1211.13 L1434.04 1211.13 L1433.46 1211.13 L1432.87 1211.13 L1432.29 1211.13 L1431.7 1211.13 L1431.11 1211.13 L1430.53 1211.13 L1429.94 1211.13 L1429.35 1211.13 L1428.77 1211.13 L1428.18 1211.13 L1427.59 1211.13 L1427.01 1211.13 L1426.42 1211.13 L1425.83 1211.13 L1425.25 1211.13 L1424.66 1211.13 L1424.08 1211.13 L1423.49 1211.13 L1422.9 1211.13 L1422.32 1211.13 L1421.73 1211.13 L1421.14 1211.13 L1420.56 1211.13 L1419.97 1211.13 L1419.38 1211.13 L1418.8 1211.13 L1418.21 1211.13 L1417.63 1211.13 L1417.04 1211.13 L1416.45 1211.13 L1415.87 1211.13 L1415.28 1211.13 L1414.69 1211.13 L1414.11 1211.13 L1413.52 1211.13 L1412.93 1211.13 L1412.35 1211.13 L1411.76 1211.13 L1411.17 1211.13 L1410.59 1211.13 L1410 1211.13 L1409.42 1211.13 L1408.83 1211.13 L1408.24 1211.13 L1407.66 1211.13 L1407.07 1211.13 L1406.48 1211.13 L1405.9 1211.13 L1405.31 1211.13 L1404.72 1211.13 L1404.14 1211.13 L1403.55 1211.13 L1402.96 1211.13 L1402.38 1211.13 L1401.79 1211.13 L1401.21 1211.13 L1400.62 1211.13 L1400.03 1211.13 L1399.45 1211.13 L1398.86 1211.13 L1398.27 1211.13 L1397.69 1211.13 L1397.1 1211.13 L1396.51 1211.13 L1395.93 1211.13 L1395.34 1211.13 L1394.75 1211.13 L1394.17 1211.13 L1393.58 1211.13 L1393 1211.13 L1392.41 1211.13 L1391.82 1211.13 L1391.24 1211.13 L1390.65 1211.13 L1390.06 1211.13 L1389.48 1211.13 L1388.89 1211.13 L1388.3 1211.13 L1387.72 1211.13 L1387.13 1211.13 L1386.55 1211.13 L1385.96 1211.13 L1385.37 1211.13 L1384.79 1211.13 L1384.2 1211.13 L1383.61 1211.13 L1383.03 1211.13 L1382.44 1211.13 L1381.85 1211.13 L1381.27 1211.13 L1380.68 1211.13 L1380.09 1211.13 L1379.51 1211.13 L1378.92 1211.13 L1378.34 1211.13 L1377.75 1211.13 L1377.16 1211.13 L1376.58 1211.13 L1375.99 1211.13 L1375.4 1211.13 L1374.82 1211.13 L1374.23 1211.13 L1373.64 1211.13 L1373.06 1211.13 L1372.47 1211.13 L1371.88 1211.13 L1371.3 1211.13 L1370.71 1211.13 L1370.13 1211.13 L1369.54 1211.13 L1368.95 1211.13 L1368.37 1211.13 L1367.78 1211.13 L1367.19 1211.13 L1366.61 1211.13 L1366.02 1211.13 L1365.43 1211.13 L1364.85 1211.13 L1364.26 1211.13 L1363.68 1211.13 L1363.09 1211.13 L1362.5 1211.13 L1361.92 1211.13 L1361.33 1211.13 L1360.74 1211.13 L1360.16 1211.13 L1359.57 1211.13 L1358.98 1211.13 L1358.4 1211.13 L1357.81 1211.13 L1357.22 1211.13 L1356.64 1211.13 L1356.05 1211.13 L1355.47 1211.13 L1354.88 1211.13 L1354.29 1211.13 L1353.71 1211.13 L1353.12 1211.13 L1352.53 1211.13 L1351.95 1211.13 L1351.36 1211.13 L1350.77 1211.13 L1350.19 1211.13 L1349.6 1211.13 L1349.01 1211.13 L1348.43 1211.13 L1347.84 1211.13 L1347.26 1211.13 L1346.67 1211.13 L1346.08 1211.13 L1345.5 1211.13 L1344.91 1211.13 L1344.32 1211.13 L1343.74 1211.13 L1343.15 1211.13 L1342.56 1211.13 L1341.98 1211.13 L1341.39 1211.13 L1340.8 1211.13 L1340.22 1211.13 L1339.63 1211.13 L1339.05 1211.13 L1338.46 1211.13 L1337.87 1211.13 L1337.29 1211.13 L1336.7 1211.13 L1336.11 1211.13 L1335.53 1211.13 L1334.94 1211.13 L1334.35 1211.13 L1333.77 1211.13 L1333.18 1211.13 L1332.6 1211.13 L1332.01 1211.13 L1331.42 1211.13 L1330.84 1211.13 L1330.25 1211.13 L1329.66 1211.13 L1329.08 1211.13 L1328.49 1211.13 L1327.9 1211.13 L1327.32 1211.13 L1326.73 1211.13 L1326.14 1211.13 L1325.56 1211.13 L1324.97 1211.13 L1324.39 1211.13 L1323.8 1211.13 L1323.21 1211.13 L1322.63 1211.13 L1322.04 1211.13 L1321.45 1211.13 L1320.87 1211.13 L1320.28 1211.13 L1319.69 1211.13 L1319.11 1211.13 L1318.52 1211.13 L1317.93 1211.13 L1317.35 1211.13 L1316.76 1211.13 L1316.18 1211.13 L1315.59 1211.13 L1315 1211.13 L1314.42 1211.13 L1313.83 1211.13 L1313.24 1211.13 L1312.66 1211.13 L1312.07 1211.13 L1311.48 1211.13 L1310.9 1211.13 L1310.31 1211.13 L1309.73 1211.13 L1309.14 1211.13 L1308.55 1211.13 L1307.97 1211.13 L1307.38 1211.13 L1306.79 1211.13 L1306.21 1211.13 L1305.62 1211.13 L1305.03 1211.13 L1304.45 1211.13 L1303.86 1211.13 L1303.27 1211.13 L1302.69 1211.13 L1302.1 1211.13 L1301.52 1211.13 L1300.93 1211.13 L1300.34 1211.13 L1299.76 1211.13 L1299.17 1211.13 L1298.58 1211.13 L1298 1211.13 L1297.41 1211.13 L1296.82 1211.13 L1296.24 1211.13 L1295.65 1211.13 L1295.06 1211.13 L1294.48 1211.13 L1293.89 1211.13 L1293.31 1211.13 L1292.72 1211.13 L1292.13 1211.13 L1291.55 1211.13 L1290.96 1211.13 L1290.37 1211.13 L1289.79 1211.13 L1289.2 1211.13 L1288.61 1211.13 L1288.03 1211.13 L1287.44 1211.13 L1286.86 1211.13 L1286.27 1211.13 L1285.68 1211.13 L1285.1 1211.13 L1284.51 1211.13 L1283.92 1211.13 L1283.34 1211.13 L1282.75 1211.13 L1282.16 1211.13 L1281.58 1211.13 L1280.99 1211.13 L1280.4 1211.13 L1279.82 1211.13 L1279.23 1211.13 L1278.65 1211.13 L1278.06 1211.13 L1277.47 1211.13 L1276.89 1211.13 L1276.3 1211.13 L1275.71 1211.13 L1275.13 1211.13 L1274.54 1211.13 L1273.95 1211.13 L1273.37 1211.13 L1272.78 1211.13 L1272.19 1211.13 L1271.61 1211.13 L1271.02 1211.13 L1270.44 1211.13 L1269.85 1211.13 L1269.26 1211.13 L1268.68 1211.13 L1268.09 1211.13 L1267.5 1211.13 L1266.92 1211.13 L1266.33 1211.13 L1265.74 1211.13 L1265.16 1211.13 L1264.57 1211.13 L1263.98 1211.13 L1263.4 1211.13 L1262.81 1211.13 L1262.23 1211.13 L1261.64 1211.13 L1261.05 1211.13 L1260.47 1211.13 L1259.88 1211.13 L1259.29 1211.13 L1258.71 1211.13 L1258.12 1211.13 L1257.53 1211.13 L1256.95 1211.13 L1256.36 1211.13 L1255.78 1211.13 L1255.19 1211.13 L1254.6 1211.13 L1254.02 1211.13 L1253.43 1211.13 L1252.84 1211.13 L1252.26 1211.13 L1251.67 1211.13 L1251.08 1211.13 L1250.5 1211.13 L1249.91 1211.13 L1249.32 1211.13 L1248.74 1211.13 L1248.15 1211.13 L1247.57 1211.13 L1246.98 1211.13 L1246.39 1211.13 L1245.81 1211.13 L1245.22 1211.13 L1244.63 1211.13 L1244.05 1211.13 L1243.46 1211.13 L1242.87 1211.13 L1242.29 1211.13 L1241.7 1211.13 L1241.11 1211.13 L1240.53 1211.13 L1239.94 1211.13 L1239.36 1211.13 L1238.77 1211.13 L1238.18 1211.13 L1237.6 1211.13 L1237.01 1211.13 L1236.42 1211.13 L1235.84 1211.13 L1235.25 1211.13 L1234.66 1211.13 L1234.08 1211.13 L1233.49 1211.13 L1232.91 1211.13 L1232.32 1211.13 L1231.73 1211.13 L1231.15 1211.13 L1230.56 1211.13 L1229.97 1211.13 L1229.39 1211.13 L1228.8 1211.13 L1228.21 1211.13 L1227.63 1211.13 L1227.04 1211.13 L1226.45 1211.13 L1225.87 1211.13 L1225.28 1211.13 L1224.7 1211.13 L1224.11 1211.13 L1223.52 1211.13 L1222.94 1211.13 L1222.35 1211.13 L1221.76 1211.13 L1221.18 1211.13 L1220.59 1211.13 L1220 1211.13 L1219.42 1211.13 L1218.83 1211.13 L1218.24 1211.13 L1217.66 1211.13 L1217.07 1211.13 L1216.49 1211.13 L1215.9 1211.13 L1215.31 1211.13 L1214.73 1211.13 L1214.14 1211.13 L1213.55 1211.13 L1212.97 1211.13 L1212.38 1211.13 L1211.79 1211.13 L1211.21 1211.13 L1210.62 1211.13 L1210.03 1211.13 L1209.45 1211.13 L1208.86 1211.13 L1208.28 1211.13 L1207.69 1211.13 L1207.1 1211.13 L1206.52 1211.13 L1205.93 1211.13 L1205.34 1211.13 L1204.76 1211.13 L1204.17 1211.13 L1203.58 1211.13 L1203 1211.13 L1202.41 1211.13 L1201.83 1211.13 L1201.24 1211.13 L1200.65 1211.13 L1200.07 1211.13 L1199.48 1211.13 L1198.89 1211.13 L1198.31 1211.13 L1197.72 1211.13 L1197.13 1211.13 L1196.55 1211.13 L1195.96 1211.13 L1195.37 1211.13 L1194.79 1211.13 L1194.2 1211.13 L1193.62 1211.13 L1193.03 1211.13 L1192.44 1211.13 L1191.86 1211.13 L1191.27 1211.13 L1190.68 1211.13 L1190.1 1211.13 L1189.51 1211.13 L1188.92 1211.13 L1188.34 1211.13 L1187.75 1211.13 L1187.16 1211.13 L1186.58 1211.13 L1185.99 1211.13 L1185.41 1211.13 L1184.82 1211.13 L1184.23 1211.13 L1183.65 1211.13 L1183.06 1211.13 L1182.47 1211.13 L1181.89 1211.13 L1181.3 1211.13 L1180.71 1211.13 L1180.13 1211.13 L1179.54 1211.13 L1178.96 1211.13 L1178.37 1211.13 L1177.78 1211.13 L1177.2 1211.13 L1176.61 1211.13 L1176.02 1211.13 L1175.44 1211.13 L1174.85 1211.13 L1174.26 1211.13 L1173.68 1211.13 L1173.09 1211.13 L1172.5 1211.13 L1171.92 1211.13 L1171.33 1211.13 L1170.75 1211.13 L1170.16 1211.13 L1169.57 1211.13 L1168.99 1211.13 L1168.4 1211.13 L1167.81 1211.13 L1167.23 1211.13 L1166.64 1211.13 L1166.05 1211.13 L1165.47 1211.13 L1164.88 1211.13 L1164.29 1211.13 L1163.71 1211.13 L1163.12 1211.13 L1162.54 1211.13 L1161.95 1211.13 L1161.36 1211.13 L1160.78 1211.13 L1160.19 1211.13 L1159.6 1211.13 L1159.02 1211.13 L1158.43 1211.13 L1157.84 1211.13 L1157.26 1211.13 L1156.67 1211.13 L1156.09 1211.13 L1155.5 1211.13 L1154.91 1211.13 L1154.33 1211.13 L1153.74 1211.13 L1153.15 1211.13 L1152.57 1211.13 L1151.98 1211.13 L1151.39 1211.13 L1150.81 1211.13 L1150.22 1211.13 L1149.63 1211.13 L1149.05 1211.13 L1148.46 1211.13 L1147.88 1211.13 L1147.29 1211.13 L1146.7 1211.13 L1146.12 1211.13 L1145.53 1211.13 L1144.94 1211.13 L1144.36 1211.13 L1143.77 1211.13 L1143.18 1211.13 L1142.6 1211.13 L1142.01 1211.13 L1141.42 1211.13 L1140.84 1211.13 L1140.25 1211.13 L1139.67 1211.13 L1139.08 1211.13 L1138.49 1211.13 L1137.91 1211.13 L1137.32 1211.13 L1136.73 1211.13 L1136.15 1211.13 L1135.56 1211.13 L1134.97 1211.13 L1134.39 1211.13 L1133.8 1211.13 L1133.21 1211.13 L1132.63 1211.13 L1132.04 1211.13 L1131.46 1211.13 L1130.87 1211.13 L1130.28 1211.13 L1129.7 1211.13 L1129.11 1211.13 L1128.52 1211.13 L1127.94 1211.13 L1127.35 1211.13 L1126.76 1211.13 L1126.18 1211.13 L1125.59 1211.13 L1125.01 1211.13 L1124.42 1211.13 L1123.83 1211.13 L1123.25 1211.13 L1122.66 1211.13 L1122.07 1211.13 L1121.49 1211.13 L1120.9 1211.13 L1120.31 1211.13 L1119.73 1211.13 L1119.14 1211.13 L1118.55 1211.13 L1117.97 1211.13 L1117.38 1211.13 L1116.8 1211.13 L1116.21 1211.13 L1115.62 1211.13 L1115.04 1211.13 L1114.45 1211.13 L1113.86 1211.13 L1113.28 1211.13 L1112.69 1211.13 L1112.1 1211.13 L1111.52 1211.13 L1110.93 1211.13 L1110.34 1211.13 L1109.76 1211.13 L1109.17 1211.13 L1108.59 1211.13 L1108 1211.13 L1107.41 1211.13 L1106.83 1211.13 L1106.24 1211.13 L1105.65 1211.13 L1105.07 1211.13 L1104.48 1211.13 L1103.89 1211.13 L1103.31 1211.13 L1102.72 1211.13 L1102.14 1211.13 L1101.55 1211.13 L1100.96 1211.13 L1100.38 1211.13 L1099.79 1211.13 L1099.2 1211.13 L1098.62 1211.13 L1098.03 1211.13 L1097.44 1211.13 L1096.86 1211.13 L1096.27 1211.13 L1095.68 1211.13 L1095.1 1211.13 L1094.51 1211.13 L1093.93 1211.13 L1093.34 1211.13 L1092.75 1211.13 L1092.17 1211.13 L1091.58 1211.13 L1090.99 1211.13 L1090.41 1211.13 L1089.82 1211.13 L1089.23 1211.13 L1088.65 1211.13 L1088.06 1211.13 L1087.47 1211.13 L1086.89 1211.13 L1086.3 1211.13 L1085.72 1211.13 L1085.13 1211.13 L1084.54 1211.13 L1083.96 1211.13 L1083.37 1211.13 L1082.78 1211.13 L1082.2 1211.13 L1081.61 1211.13 L1081.02 1211.13 L1080.44 1211.13 L1079.85 1211.13 L1079.26 1211.13 L1078.68 1211.13 L1078.09 1211.13 L1077.51 1211.13 L1076.92 1211.13 L1076.33 1211.13 L1075.75 1211.13 L1075.16 1211.13 L1074.57 1211.13 L1073.99 1211.13 L1073.4 1211.13 L1072.81 1211.13 L1072.23 1211.13 L1071.64 1211.13 L1071.06 1211.13 L1070.47 1211.13 L1069.88 1211.13 L1069.3 1211.13 L1068.71 1211.13 L1068.12 1211.13 L1067.54 1211.13 L1066.95 1211.13 L1066.36 1211.13 L1065.78 1211.13 L1065.19 1211.13 L1064.6 1211.13 L1064.02 1211.13 L1063.43 1211.13 L1062.85 1211.13 L1062.26 1211.13 L1061.67 1211.13 L1061.09 1211.13 L1060.5 1211.13 L1059.91 1211.13 L1059.33 1211.13 L1058.74 1211.13 L1058.15 1211.13 L1057.57 1211.13 L1056.98 1211.13 L1056.39 1211.13 L1055.81 1211.13 L1055.22 1211.13 L1054.64 1211.13 L1054.05 1211.13 L1053.46 1211.13 L1052.88 1211.13 L1052.29 1211.13 L1051.7 1211.13 L1051.12 1211.13 L1050.53 1211.13 L1049.94 1211.13 L1049.36 1211.13 L1048.77 1211.13 L1048.19 1211.13 L1047.6 1211.13 L1047.01 1211.13 L1046.43 1211.13 L1045.84 1211.13 L1045.25 1211.13 L1044.67 1211.13 L1044.08 1211.13 L1043.49 1211.13 L1042.91 1211.13 L1042.32 1211.13 L1041.73 1211.13 L1041.15 1211.13 L1040.56 1211.13 L1039.98 1211.13 L1039.39 1211.13 L1038.8 1211.13 L1038.22 1211.13 L1037.63 1211.13 L1037.04 1211.13 L1036.46 1211.13 L1035.87 1211.13 L1035.28 1211.13 L1034.7 1211.13 L1034.11 1211.13 L1033.52 1211.13 L1032.94 1211.13 L1032.35 1211.13 L1031.77 1211.13 L1031.18 1211.13 L1030.59 1211.13 L1030.01 1211.13 L1029.42 1211.13 L1028.83 1211.13 L1028.25 1211.13 L1027.66 1211.13 L1027.07 1211.13 L1026.49 1211.13 L1025.9 1211.13 L1025.32 1211.13 L1024.73 1211.13 L1024.14 1211.13 L1023.56 1211.13 L1022.97 1211.13 L1022.38 1211.13 L1021.8 1211.13 L1021.21 1211.13 L1020.62 1211.13 L1020.04 1211.13 L1019.45 1211.13 L1018.86 1211.13 L1018.28 1211.13 L1017.69 1211.13 L1017.11 1211.13 L1016.52 1211.13 L1015.93 1211.13 L1015.35 1211.13 L1014.76 1211.13 L1014.17 1211.13 L1013.59 1211.13 L1013 1211.13 L1012.41 1211.13 L1011.83 1211.13 L1011.24 1211.13 L1010.65 1211.13 L1010.07 1211.13 L1009.48 1211.13 L1008.9 1211.13 L1008.31 1211.13 L1007.72 1211.13 L1007.14 1211.13 L1006.55 1211.13 L1005.96 1211.13 L1005.38 1211.13 L1004.79 1211.13 L1004.2 1211.13 L1003.62 1211.13 L1003.03 1211.13 L1002.44 1211.13 L1001.86 1211.13 L1001.27 1211.13 L1000.69 1211.13 L1000.1 1211.13 L999.513 1211.13 L998.926 1211.13 L998.34 1211.13 L997.754 1211.13 L997.167 1211.13 L996.581 1211.13 L995.994 1211.13 L995.408 1211.13 L994.822 1211.13 L994.235 1211.13 L993.649 1211.13 L993.062 1211.13 L992.476 1211.13 L991.889 1211.13 L991.303 1211.13 L990.717 1211.13 L990.13 1211.13 L989.544 1211.13 L988.957 1211.13 L988.371 1211.13 L987.785 1211.13 L987.198 1211.13 L986.612 1211.13 L986.025 1211.13  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip242)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1211.45 986.612,1211.45 987.198,1211.45 987.785,1211.45 988.371,1211.45 988.957,1211.45 989.544,1211.45 990.13,1211.45 990.717,1211.45 991.303,1211.45 991.889,1211.45 992.476,1211.45 993.062,1211.45 993.649,1211.45 994.235,1211.45 994.822,1211.45 995.408,1211.45 995.994,1211.45 996.581,1211.45 997.167,1211.45 997.754,1211.45 998.34,1211.45 998.926,1211.45 999.513,1211.45 1000.1,1211.45 1000.69,1211.45 1001.27,1211.45 1001.86,1211.45 1002.44,1211.45 1003.03,1211.45 1003.62,1211.45 1004.2,1211.45 1004.79,1211.45 1005.38,1211.45 1005.96,1211.45 1006.55,1211.45 1007.14,1211.45 1007.72,1211.45 1008.31,1211.45 1008.9,1211.45 1009.48,1211.45 1010.07,1211.45 1010.65,1211.45 1011.24,1211.45 1011.83,1211.45 1012.41,1211.45 1013,1211.45 1013.59,1211.45 1014.17,1211.45 1014.76,1211.45 1015.35,1211.45 1015.93,1211.45 1016.52,1211.45 1017.11,1211.45 1017.69,1211.45 1018.28,1211.45 1018.86,1211.45 1019.45,1211.45 1020.04,1211.45 1020.62,1211.45 1021.21,1211.45 1021.8,1211.45 1022.38,1211.45 1022.97,1211.45 1023.56,1211.45 1024.14,1211.45 1024.73,1211.45 1025.32,1211.45 1025.9,1211.45 1026.49,1211.45 1027.07,1211.45 1027.66,1211.45 1028.25,1211.45 1028.83,1211.45 1029.42,1211.45 1030.01,1211.45 1030.59,1211.45 1031.18,1211.45 1031.77,1211.45 1032.35,1211.45 1032.94,1211.45 1033.52,1211.45 1034.11,1211.45 1034.7,1211.45 1035.28,1211.45 1035.87,1211.45 1036.46,1211.45 1037.04,1211.45 1037.63,1211.45 1038.22,1211.45 1038.8,1211.45 1039.39,1211.45 1039.98,1211.45 1040.56,1211.45 1041.15,1211.45 1041.73,1211.45 1042.32,1211.45 1042.91,1211.45 1043.49,1211.45 1044.08,1211.45 1044.67,1211.45 1045.25,1211.45 1045.84,1211.45 1046.43,1211.45 1047.01,1211.45 1047.6,1211.45 1048.19,1211.45 1048.77,1211.45 1049.36,1211.45 1049.94,1211.45 1050.53,1211.45 1051.12,1211.45 1051.7,1211.45 1052.29,1211.45 1052.88,1211.45 1053.46,1211.45 1054.05,1211.45 1054.64,1211.45 1055.22,1211.45 1055.81,1211.45 1056.39,1211.45 1056.98,1211.45 1057.57,1211.45 1058.15,1211.45 1058.74,1211.45 1059.33,1211.45 1059.91,1211.45 1060.5,1211.45 1061.09,1211.45 1061.67,1211.45 1062.26,1211.45 1062.85,1211.45 1063.43,1211.45 1064.02,1211.45 1064.6,1211.45 1065.19,1211.45 1065.78,1211.45 1066.36,1211.45 1066.95,1211.45 1067.54,1211.45 1068.12,1211.45 1068.71,1211.45 1069.3,1211.45 1069.88,1211.45 1070.47,1211.45 1071.06,1211.45 1071.64,1211.45 1072.23,1211.45 1072.81,1211.45 1073.4,1211.45 1073.99,1211.45 1074.57,1211.45 1075.16,1211.45 1075.75,1211.45 1076.33,1211.45 1076.92,1211.45 1077.51,1211.45 1078.09,1211.45 1078.68,1211.45 1079.26,1211.45 1079.85,1211.45 1080.44,1211.45 1081.02,1211.45 1081.61,1211.45 1082.2,1211.45 1082.78,1211.45 1083.37,1211.45 1083.96,1211.45 1084.54,1211.45 1085.13,1211.45 1085.72,1211.45 1086.3,1211.45 1086.89,1211.45 1087.47,1211.45 1088.06,1211.45 1088.65,1211.45 1089.23,1211.45 1089.82,1211.45 1090.41,1211.45 1090.99,1211.45 1091.58,1211.45 1092.17,1211.45 1092.75,1211.45 1093.34,1211.45 1093.93,1211.45 1094.51,1211.45 1095.1,1211.45 1095.68,1211.45 1096.27,1211.45 1096.86,1211.45 1097.44,1211.45 1098.03,1211.45 1098.62,1211.45 1099.2,1211.45 1099.79,1211.45 1100.38,1211.45 1100.96,1211.45 1101.55,1211.45 1102.14,1211.45 1102.72,1211.45 1103.31,1211.45 1103.89,1211.45 1104.48,1211.45 1105.07,1211.45 1105.65,1211.45 1106.24,1211.45 1106.83,1211.45 1107.41,1211.45 1108,1211.45 1108.59,1211.45 1109.17,1211.45 1109.76,1211.45 1110.34,1211.45 1110.93,1211.45 1111.52,1211.45 1112.1,1211.45 1112.69,1211.45 1113.28,1211.45 1113.86,1211.45 1114.45,1211.45 1115.04,1211.45 1115.62,1211.45 1116.21,1211.45 1116.8,1211.45 1117.38,1211.45 1117.97,1211.45 1118.55,1211.45 1119.14,1211.45 1119.73,1211.45 1120.31,1211.45 1120.9,1211.45 1121.49,1211.45 1122.07,1211.45 1122.66,1211.45 1123.25,1211.45 1123.83,1211.45 1124.42,1211.45 1125.01,1211.45 1125.59,1211.45 1126.18,1211.45 1126.76,1211.45 1127.35,1211.45 1127.94,1211.45 1128.52,1211.45 1129.11,1211.45 1129.7,1211.45 1130.28,1211.45 1130.87,1211.45 1131.46,1211.45 1132.04,1211.45 1132.63,1211.45 1133.21,1211.45 1133.8,1211.45 1134.39,1211.45 1134.97,1211.45 1135.56,1211.45 1136.15,1211.45 1136.73,1211.45 1137.32,1211.45 1137.91,1211.45 1138.49,1211.45 1139.08,1211.45 1139.67,1211.45 1140.25,1211.45 1140.84,1211.45 1141.42,1211.45 1142.01,1211.45 1142.6,1211.45 1143.18,1211.45 1143.77,1211.45 1144.36,1211.45 1144.94,1211.45 1145.53,1211.45 1146.12,1211.45 1146.7,1211.45 1147.29,1211.45 1147.88,1211.45 1148.46,1211.45 1149.05,1211.45 1149.63,1211.45 1150.22,1211.45 1150.81,1211.45 1151.39,1211.45 1151.98,1211.45 1152.57,1211.45 1153.15,1211.45 1153.74,1211.45 1154.33,1211.45 1154.91,1211.45 1155.5,1211.45 1156.09,1211.45 1156.67,1211.45 1157.26,1211.45 1157.84,1211.45 1158.43,1211.45 1159.02,1211.45 1159.6,1211.45 1160.19,1211.45 1160.78,1211.45 1161.36,1211.45 1161.95,1211.45 1162.54,1211.45 1163.12,1211.45 1163.71,1211.45 1164.29,1211.45 1164.88,1211.45 1165.47,1211.45 1166.05,1211.45 1166.64,1211.45 1167.23,1211.45 1167.81,1211.45 1168.4,1211.45 1168.99,1211.45 1169.57,1211.45 1170.16,1211.45 1170.75,1211.45 1171.33,1211.45 1171.92,1211.45 1172.5,1211.45 1173.09,1211.45 1173.68,1211.45 1174.26,1211.45 1174.85,1211.45 1175.44,1211.45 1176.02,1211.45 1176.61,1211.45 1177.2,1211.45 1177.78,1211.45 1178.37,1211.45 1178.96,1211.45 1179.54,1211.45 1180.13,1211.45 1180.71,1211.45 1181.3,1211.45 1181.89,1211.45 1182.47,1211.45 1183.06,1211.45 1183.65,1211.45 1184.23,1211.45 1184.82,1211.45 1185.41,1211.45 1185.99,1211.45 1186.58,1211.45 1187.16,1211.45 1187.75,1211.45 1188.34,1211.45 1188.92,1211.45 1189.51,1211.45 1190.1,1211.45 1190.68,1211.45 1191.27,1211.45 1191.86,1211.45 1192.44,1211.45 1193.03,1211.45 1193.62,1211.45 1194.2,1211.45 1194.79,1211.45 1195.37,1211.45 1195.96,1211.45 1196.55,1211.45 1197.13,1211.45 1197.72,1211.45 1198.31,1211.45 1198.89,1211.45 1199.48,1211.45 1200.07,1211.45 1200.65,1211.45 1201.24,1211.45 1201.83,1211.45 1202.41,1211.45 1203,1211.45 1203.58,1211.45 1204.17,1211.45 1204.76,1211.45 1205.34,1211.45 1205.93,1211.45 1206.52,1211.45 1207.1,1211.45 1207.69,1211.45 1208.28,1211.45 1208.86,1211.45 1209.45,1211.45 1210.03,1211.45 1210.62,1211.45 1211.21,1211.45 1211.79,1211.45 1212.38,1211.45 1212.97,1211.45 1213.55,1211.45 1214.14,1211.45 1214.73,1211.45 1215.31,1211.45 1215.9,1211.45 1216.49,1211.45 1217.07,1211.45 1217.66,1211.45 1218.24,1211.45 1218.83,1211.45 1219.42,1211.45 1220,1211.45 1220.59,1211.45 1221.18,1211.45 1221.76,1211.45 1222.35,1211.45 1222.94,1211.45 1223.52,1211.45 1224.11,1211.45 1224.7,1211.45 1225.28,1211.45 1225.87,1211.45 1226.45,1211.45 1227.04,1211.45 1227.63,1211.45 1228.21,1211.45 1228.8,1211.45 1229.39,1211.45 1229.97,1211.45 1230.56,1211.45 1231.15,1211.45 1231.73,1211.45 1232.32,1211.45 1232.91,1211.45 1233.49,1211.45 1234.08,1211.45 1234.66,1211.45 1235.25,1211.45 1235.84,1211.45 1236.42,1211.45 1237.01,1211.45 1237.6,1211.45 1238.18,1211.45 1238.77,1211.45 1239.36,1211.45 1239.94,1211.45 1240.53,1211.45 1241.11,1211.45 1241.7,1211.45 1242.29,1211.45 1242.87,1211.45 1243.46,1211.45 1244.05,1211.45 1244.63,1211.45 1245.22,1211.45 1245.81,1211.45 1246.39,1211.45 1246.98,1211.45 1247.57,1211.45 1248.15,1211.45 1248.74,1211.45 1249.32,1211.45 1249.91,1211.45 1250.5,1211.45 1251.08,1211.45 1251.67,1211.45 1252.26,1211.45 1252.84,1211.45 1253.43,1211.45 1254.02,1211.45 1254.6,1211.45 1255.19,1211.45 1255.78,1211.45 1256.36,1211.45 1256.95,1211.45 1257.53,1211.45 1258.12,1211.45 1258.71,1211.45 1259.29,1211.45 1259.88,1211.45 1260.47,1211.45 1261.05,1211.45 1261.64,1211.45 1262.23,1211.45 1262.81,1211.45 1263.4,1211.45 1263.98,1211.45 1264.57,1211.45 1265.16,1211.45 1265.74,1211.45 1266.33,1211.45 1266.92,1211.45 1267.5,1211.45 1268.09,1211.45 1268.68,1211.45 1269.26,1211.45 1269.85,1211.45 1270.44,1211.45 1271.02,1211.45 1271.61,1211.45 1272.19,1211.45 1272.78,1211.45 1273.37,1211.45 1273.95,1211.45 1274.54,1211.45 1275.13,1211.45 1275.71,1211.45 1276.3,1211.45 1276.89,1211.45 1277.47,1211.45 1278.06,1211.45 1278.65,1211.45 1279.23,1211.45 1279.82,1211.45 1280.4,1211.45 1280.99,1211.45 1281.58,1211.45 1282.16,1211.45 1282.75,1211.45 1283.34,1211.45 1283.92,1211.45 1284.51,1211.45 1285.1,1211.45 1285.68,1211.45 1286.27,1211.45 1286.86,1211.45 1287.44,1211.45 1288.03,1211.45 1288.61,1211.45 1289.2,1211.45 1289.79,1211.45 1290.37,1211.45 1290.96,1211.45 1291.55,1211.45 1292.13,1211.45 1292.72,1211.45 1293.31,1211.45 1293.89,1211.45 1294.48,1211.45 1295.06,1211.45 1295.65,1211.45 1296.24,1211.45 1296.82,1211.45 1297.41,1211.45 1298,1211.45 1298.58,1211.45 1299.17,1211.45 1299.76,1211.45 1300.34,1211.45 1300.93,1211.45 1301.52,1211.45 1302.1,1211.45 1302.69,1211.45 1303.27,1211.45 1303.86,1211.45 1304.45,1211.45 1305.03,1211.45 1305.62,1211.45 1306.21,1211.45 1306.79,1211.45 1307.38,1211.45 1307.97,1211.45 1308.55,1211.45 1309.14,1211.45 1309.73,1211.45 1310.31,1211.45 1310.9,1211.45 1311.48,1211.45 1312.07,1211.45 1312.66,1211.45 1313.24,1211.45 1313.83,1211.45 1314.42,1211.45 1315,1211.45 1315.59,1211.45 1316.18,1211.45 1316.76,1211.45 1317.35,1211.45 1317.93,1211.45 1318.52,1211.45 1319.11,1211.45 1319.69,1211.45 1320.28,1211.45 1320.87,1211.45 1321.45,1211.45 1322.04,1211.45 1322.63,1211.45 1323.21,1211.45 1323.8,1211.45 1324.39,1211.45 1324.97,1211.45 1325.56,1211.45 1326.14,1211.45 1326.73,1211.45 1327.32,1211.45 1327.9,1211.45 1328.49,1211.45 1329.08,1211.45 1329.66,1211.45 1330.25,1211.45 1330.84,1211.45 1331.42,1211.45 1332.01,1211.45 1332.6,1211.45 1333.18,1211.45 1333.77,1211.45 1334.35,1211.45 1334.94,1211.45 1335.53,1211.45 1336.11,1211.45 1336.7,1211.45 1337.29,1211.45 1337.87,1211.45 1338.46,1211.45 1339.05,1211.45 1339.63,1211.45 1340.22,1211.45 1340.8,1211.45 1341.39,1211.45 1341.98,1211.45 1342.56,1211.45 1343.15,1211.45 1343.74,1211.45 1344.32,1211.45 1344.91,1211.45 1345.5,1211.45 1346.08,1211.45 1346.67,1211.45 1347.26,1211.45 1347.84,1211.45 1348.43,1211.45 1349.01,1211.45 1349.6,1211.45 1350.19,1211.45 1350.77,1211.45 1351.36,1211.45 1351.95,1211.45 1352.53,1211.45 1353.12,1211.45 1353.71,1211.45 1354.29,1211.45 1354.88,1211.45 1355.47,1211.45 1356.05,1211.45 1356.64,1211.45 1357.22,1211.45 1357.81,1211.45 1358.4,1211.45 1358.98,1211.45 1359.57,1211.45 1360.16,1211.45 1360.74,1211.45 1361.33,1211.45 1361.92,1211.45 1362.5,1211.45 1363.09,1211.45 1363.68,1211.45 1364.26,1211.45 1364.85,1211.45 1365.43,1211.45 1366.02,1211.45 1366.61,1211.45 1367.19,1211.45 1367.78,1211.45 1368.37,1211.45 1368.95,1211.45 1369.54,1211.45 1370.13,1211.45 1370.71,1211.45 1371.3,1211.45 1371.88,1211.45 1372.47,1211.45 1373.06,1211.45 1373.64,1211.45 1374.23,1211.45 1374.82,1211.45 1375.4,1211.45 1375.99,1211.45 1376.58,1211.45 1377.16,1211.45 1377.75,1211.45 1378.34,1211.45 1378.92,1211.45 1379.51,1211.45 1380.09,1211.45 1380.68,1211.45 1381.27,1211.45 1381.85,1211.45 1382.44,1211.45 1383.03,1211.45 1383.61,1211.45 1384.2,1211.45 1384.79,1211.45 1385.37,1211.45 1385.96,1211.45 1386.55,1211.45 1387.13,1211.45 1387.72,1211.45 1388.3,1211.45 1388.89,1211.45 1389.48,1211.45 1390.06,1211.45 1390.65,1211.45 1391.24,1211.45 1391.82,1211.45 1392.41,1211.45 1393,1211.45 1393.58,1211.45 1394.17,1211.45 1394.75,1211.45 1395.34,1211.45 1395.93,1211.45 1396.51,1211.45 1397.1,1211.45 1397.69,1211.45 1398.27,1211.45 1398.86,1211.45 1399.45,1211.45 1400.03,1211.45 1400.62,1211.45 1401.21,1211.45 1401.79,1211.45 1402.38,1211.45 1402.96,1211.45 1403.55,1211.45 1404.14,1211.45 1404.72,1211.45 1405.31,1211.45 1405.9,1211.45 1406.48,1211.45 1407.07,1211.45 1407.66,1211.45 1408.24,1211.45 1408.83,1211.45 1409.42,1211.45 1410,1211.45 1410.59,1211.45 1411.17,1211.45 1411.76,1211.45 1412.35,1211.45 1412.93,1211.45 1413.52,1211.45 1414.11,1211.45 1414.69,1211.45 1415.28,1211.45 1415.87,1211.45 1416.45,1211.45 1417.04,1211.45 1417.63,1211.45 1418.21,1211.45 1418.8,1211.45 1419.38,1211.45 1419.97,1211.45 1420.56,1211.45 1421.14,1211.45 1421.73,1211.45 1422.32,1211.45 1422.9,1211.45 1423.49,1211.45 1424.08,1211.45 1424.66,1211.45 1425.25,1211.45 1425.83,1211.45 1426.42,1211.45 1427.01,1211.45 1427.59,1211.45 1428.18,1211.45 1428.77,1211.45 1429.35,1211.45 1429.94,1211.45 1430.53,1211.45 1431.11,1211.45 1431.7,1211.45 1432.29,1211.45 1432.87,1211.45 1433.46,1211.45 1434.04,1211.45 1434.63,1211.45 1435.22,1211.45 1435.8,1211.45 1436.39,1211.45 1436.98,1211.45 1437.56,1211.45 1438.15,1211.45 1438.74,1211.45 1439.32,1211.45 1439.91,1211.45 1440.5,1211.45 1441.08,1211.45 1441.67,1211.45 1442.25,1211.45 1442.84,1211.45 1443.43,1211.45 1444.01,1211.45 1444.6,1211.45 1445.19,1211.45 1445.77,1211.45 1446.36,1211.45 1446.95,1211.45 1447.53,1211.45 1448.12,1211.45 1448.7,1211.45 1449.29,1211.45 1449.88,1211.45 1450.46,1211.45 1451.05,1211.45 1451.64,1211.45 1452.22,1211.45 1452.81,1211.45 1453.4,1211.45 1453.98,1211.45 1454.57,1211.45 1455.16,1211.45 1455.74,1211.45 1456.33,1211.45 1456.91,1211.45 1457.5,1211.45 1458.09,1211.45 1458.67,1211.45 1459.26,1211.45 1459.85,1211.45 1460.43,1211.45 1461.02,1211.45 1461.61,1211.45 1462.19,1211.45 1462.78,1211.45 1463.37,1211.45 1463.95,1211.45 1464.54,1211.45 1465.12,1211.45 1465.71,1211.45 1466.3,1211.45 1466.88,1211.45 1467.47,1211.45 1468.06,1211.45 1468.64,1211.45 1469.23,1211.45 1469.82,1211.45 1470.4,1211.45 1470.99,1211.45 1471.57,1211.45 1472.16,1211.45 1472.75,1211.45 1473.33,1211.45 1473.92,1211.45 1474.51,1211.45 1475.09,1211.45 1475.68,1211.45 1476.27,1211.45 1476.85,1211.45 1477.44,1211.45 1478.03,1211.45 1478.61,1211.45 1479.2,1211.45 1479.78,1211.45 1480.37,1211.45 1480.96,1211.45 1481.54,1211.45 1482.13,1211.45 1482.72,1211.45 1483.3,1211.45 1483.89,1211.45 1484.48,1211.45 1485.06,1211.45 1485.65,1211.45 1486.24,1211.45 1486.82,1211.45 1487.41,1211.45 1487.99,1211.45 1488.58,1211.45 1489.17,1211.45 1489.75,1211.45 1490.34,1211.45 1490.93,1211.45 1491.51,1211.45 1492.1,1211.45 1492.69,1211.45 1493.27,1211.45 1493.86,1211.45 1494.45,1211.45 1495.03,1211.45 1495.62,1211.45 1496.2,1211.45 1496.79,1211.45 1497.38,1211.45 1497.96,1211.45 1498.55,1211.45 1499.14,1211.45 1499.72,1211.45 1500.31,1211.45 1500.9,1211.45 1501.48,1211.45 1502.07,1211.45 1502.65,1211.45 1503.24,1211.45 1503.83,1211.45 1504.41,1211.45 1505,1211.45 1505.59,1211.45 1506.17,1211.45 1506.76,1211.45 1507.35,1211.45 1507.93,1211.45 1508.52,1211.45 1509.11,1211.45 1509.69,1211.45 1510.28,1211.45 1510.86,1211.45 1511.45,1211.45 1512.04,1211.45 1512.62,1211.45 1513.21,1211.45 1513.8,1211.45 1514.38,1211.45 1514.97,1211.45 1515.56,1211.45 1516.14,1211.45 1516.73,1211.45 1517.32,1211.45 1517.9,1211.45 1518.49,1211.45 1519.07,1211.45 1519.66,1211.45 1520.25,1211.45 1520.83,1211.45 1521.42,1211.45 1522.01,1211.45 1522.59,1211.45 1523.18,1211.45 1523.77,1211.45 1524.35,1211.45 1524.94,1211.45 1525.52,1211.45 1526.11,1211.45 1526.7,1211.45 1527.28,1211.45 1527.87,1211.45 1528.46,1211.45 1529.04,1211.45 1529.63,1211.45 1530.22,1211.45 1530.8,1211.45 1531.39,1211.45 1531.98,1211.45 1532.56,1211.45 1533.15,1211.45 1533.73,1211.45 1534.32,1211.45 1534.91,1211.45 1535.49,1211.45 1536.08,1211.45 1536.67,1211.45 1537.25,1211.45 1537.84,1211.45 1538.43,1211.45 1539.01,1211.45 1539.6,1211.45 1540.19,1211.45 1540.77,1211.45 1541.36,1211.45 1541.94,1211.45 1542.53,1211.45 1543.12,1211.45 1543.7,1211.45 1544.29,1211.45 1544.88,1211.45 1545.46,1211.45 1546.05,1211.45 1546.64,1211.45 1547.22,1211.45 1547.81,1211.45 1548.4,1211.45 1548.98,1211.45 1549.57,1211.45 1550.15,1211.45 1550.74,1211.45 1551.33,1211.45 1551.91,1211.45 1552.5,1211.45 1553.09,1211.45 1553.67,1211.45 1554.26,1211.45 1554.85,1211.45 1555.43,1211.45 1556.02,1211.45 1556.6,1211.45 1557.19,1211.45 1557.78,1211.45 1558.36,1211.45 1558.95,1211.45 1559.54,1211.45 1560.12,1211.45 1560.71,1211.45 1561.3,1211.45 1561.88,1211.45 1562.47,1211.45 1563.06,1211.45 1563.64,1211.45 1564.23,1211.45 1564.81,1211.45 1565.4,1211.45 1565.99,1211.45 1566.57,1211.45 1567.16,1211.45 1567.75,1211.45 1568.33,1211.45 1568.92,1211.45 1569.51,1211.45 1570.09,1211.45 1570.68,1211.45 1571.27,1211.45 1571.85,1211.45 1572.44,1211.45 1573.02,1211.45 1573.61,1211.45 1574.2,1211.45 1574.78,1211.45 1575.37,1211.45 1575.96,1211.45 1576.54,1211.45 1577.13,1211.45 1577.72,1211.45 1578.3,1211.45 1578.89,1211.45 1579.47,1211.45 1580.06,1211.45 1580.65,1211.45 1581.23,1211.45 1581.82,1211.45 1582.41,1211.45 1582.99,1211.45 1583.58,1211.45 1584.17,1211.45 1584.75,1211.45 1585.34,1211.45 1585.93,1211.45 1586.51,1211.45 1587.1,1211.45 1587.68,1211.45 1588.27,1211.45 1588.86,1211.45 1589.44,1211.45 1590.03,1211.45 1590.62,1211.45 1591.2,1211.45 1591.79,1211.45 1592.38,1211.45 1592.96,1211.45 1593.55,1211.45 1594.14,1211.45 1594.72,1211.45 1595.31,1211.45 1595.89,1211.45 1596.48,1211.45 1597.07,1211.45 1597.65,1211.45 1598.24,1211.45 1598.83,1211.45 1599.41,1211.45 1600,1211.45 1600.59,1211.45 1601.17,1211.45 1601.76,1211.45 1602.34,1211.45 1602.93,1211.45 1603.52,1211.45 1604.1,1211.45 1604.69,1211.45 1605.28,1211.45 1605.86,1211.45 1606.45,1211.45 1607.04,1211.45 1607.62,1211.45 1608.21,1211.45 1608.8,1211.45 1609.38,1211.45 1609.97,1211.45 1610.55,1211.45 1611.14,1211.45 1611.73,1211.45 1612.31,1211.45 1612.9,1211.45 1613.49,1211.45 1614.07,1211.45 1614.66,1211.45 1615.25,1211.45 1615.83,1211.45 1616.42,1211.45 1617.01,1211.45 1617.59,1211.45 1618.18,1211.45 1618.76,1211.45 1619.35,1211.45 1619.94,1211.45 1620.52,1211.45 1621.11,1211.45 1621.7,1211.45 1622.28,1211.45 1622.87,1211.45 1623.46,1211.45 1624.04,1211.45 1624.63,1211.45 1625.22,1211.45 1625.8,1211.45 1626.39,1211.45 1626.97,1211.45 1627.56,1211.45 1628.15,1211.45 1628.73,1211.45 1629.32,1211.45 1629.91,1211.45 1630.49,1211.45 1631.08,1211.45 1631.67,1211.45 1632.25,1211.45 1632.84,1211.45 1633.42,1211.45 1634.01,1211.45 1634.6,1211.45 1635.18,1211.45 1635.77,1211.45 1636.36,1211.45 1636.94,1211.45 1637.53,1211.45 1638.12,1211.45 1638.7,1211.45 1639.29,1211.45 1639.88,1211.45 1640.46,1211.45 1641.05,1211.45 1641.63,1211.45 1642.22,1211.45 1642.81,1211.45 1643.39,1211.45 1643.98,1211.45 1644.57,1211.45 1645.15,1211.45 1645.74,1211.45 1646.33,1211.45 1646.91,1211.45 1647.5,1211.45 1648.09,1211.45 1648.67,1211.45 1649.26,1211.45 1649.84,1211.45 1650.43,1211.45 1651.02,1211.45 1651.6,1211.45 1652.19,1211.45 1652.78,1211.45 1653.36,1211.45 1653.95,1211.45 1654.54,1211.45 1655.12,1211.45 1655.71,1211.45 1656.29,1211.45 1656.88,1211.45 1657.47,1211.45 1658.05,1211.45 1658.64,1211.45 1659.23,1211.45 1659.81,1211.45 1660.4,1211.45 1660.99,1211.45 1661.57,1211.45 1662.16,1211.45 1662.75,1211.45 1663.33,1211.45 1663.92,1211.45 1664.5,1211.45 1665.09,1211.45 1665.68,1211.45 1666.26,1211.45 1666.85,1211.45 1667.44,1211.45 1668.02,1211.45 1668.61,1211.45 1669.2,1211.45 1669.78,1211.45 1670.37,1211.45 1670.96,1211.45 1671.54,1211.45 1672.13,1211.45 1672.71,1211.45 1673.3,1211.45 1673.89,1211.45 1674.47,1211.45 1675.06,1211.45 1675.65,1211.45 1676.23,1211.45 1676.82,1211.45 1677.41,1211.45 1677.99,1211.45 1678.58,1211.45 1679.17,1211.45 1679.75,1211.45 1680.34,1211.45 1680.92,1211.45 1681.51,1211.45 1682.1,1211.45 1682.68,1211.45 1683.27,1211.45 1683.86,1211.45 1684.44,1211.45 1685.03,1211.45 1685.62,1211.45 1686.2,1211.45 1686.79,1211.45 1687.37,1211.45 1687.96,1211.45 1688.55,1211.45 1689.13,1211.45 1689.72,1211.45 1690.31,1211.45 1690.89,1211.45 1691.48,1211.45 1692.07,1211.45 1692.65,1211.45 1693.24,1211.45 1693.83,1211.45 1694.41,1211.45 1695,1211.45 1695.58,1211.45 1696.17,1211.45 1696.76,1211.45 1697.34,1211.45 1697.93,1211.45 1698.52,1211.45 1699.1,1211.45 1699.69,1211.45 1700.28,1211.45 1700.86,1211.45 1701.45,1211.45 1702.04,1211.45 1702.62,1211.45 1703.21,1211.45 1703.79,1211.45 1704.38,1211.45 1704.97,1211.45 1705.55,1211.45 1706.14,1211.45 1706.73,1211.45 1707.31,1211.45 1707.9,1211.45 1708.49,1211.45 1709.07,1211.45 1709.66,1211.45 1710.24,1211.45 1710.83,1211.45 1711.42,1211.45 1712,1211.45 1712.59,1211.45 1713.18,1211.45 1713.76,1211.45 1714.35,1211.45 1714.94,1211.45 1715.52,1211.45 1716.11,1211.45 1716.7,1211.45 1717.28,1211.45 1717.87,1211.45 1718.45,1211.45 1719.04,1211.45 1719.63,1211.45 1720.21,1211.45 1720.8,1211.45 1721.39,1211.45 1721.97,1211.45 1722.56,1211.45 1723.15,1211.45 1723.73,1211.45 1724.32,1211.45 1724.91,1211.45 1725.49,1211.45 1726.08,1211.45 1726.66,1211.45 1727.25,1211.45 1727.84,1211.45 1728.42,1211.45 1729.01,1211.45 1729.6,1211.45 1730.18,1211.45 1730.77,1211.45 1731.36,1211.45 1731.94,1211.45 1732.53,1211.45 1733.11,1211.45 1733.7,1211.45 1734.29,1211.45 1734.87,1211.45 1735.46,1211.45 1736.05,1211.45 1736.63,1211.45 1737.22,1211.45 1737.81,1211.45 1738.39,1211.45 1738.98,1211.45 1739.57,1211.45 1740.15,1211.45 1740.74,1211.45 1741.32,1211.45 1741.91,1211.45 1742.5,1211.45 1743.08,1211.45 1743.67,1211.45 1744.26,1211.45 1744.84,1211.45 1745.43,1211.45 1746.02,1211.45 1746.6,1211.45 1747.19,1211.45 1747.78,1211.45 1748.36,1211.45 1748.95,1211.45 1749.53,1211.45 1750.12,1211.45 1750.71,1211.45 1751.29,1211.45 1751.88,1211.45 1752.47,1211.45 1753.05,1211.45 1753.64,1211.45 1754.23,1211.45 1754.81,1211.45 1755.4,1211.45 1755.99,1211.45 1756.57,1211.45 1757.16,1211.45 1757.74,1211.45 1758.33,1211.45 1758.92,1211.45 1759.5,1211.45 1760.09,1211.45 1760.68,1211.45 1761.26,1211.45 1761.85,1211.45 1762.44,1211.45 1763.02,1211.45 1763.61,1211.45 1764.19,1211.45 1764.78,1211.45 1765.37,1211.45 1765.95,1211.45 1766.54,1211.45 1767.13,1211.45 1767.71,1211.45 1768.3,1211.45 1768.89,1211.45 1769.47,1211.45 1770.06,1211.45 1770.65,1211.45 1771.23,1211.45 1771.82,1211.45 1772.4,1211.45 1772.99,1211.45 1773.58,1211.45 1774.16,1211.45 1774.75,1211.45 1775.34,1211.45 1775.92,1211.45 1776.51,1211.45 1777.1,1211.45 1777.68,1211.45 1778.27,1211.45 1778.86,1211.45 1779.44,1211.45 1780.03,1211.45 1780.61,1211.45 1781.2,1211.45 1781.79,1211.45 1782.37,1211.45 1782.96,1211.45 1783.55,1211.45 1784.13,1211.45 1784.72,1211.45 1785.31,1211.45 1785.89,1211.45 1786.48,1211.45 1787.06,1211.45 1787.65,1211.45 1788.24,1211.45 1788.82,1211.45 1789.41,1211.45 1790,1211.45 1790.58,1211.45 1791.17,1211.45 1791.76,1211.45 1792.34,1211.45 1792.93,1211.45 1793.52,1211.45 1794.1,1211.45 1794.69,1211.45 1795.27,1211.45 1795.86,1211.45 1796.45,1211.45 1797.03,1211.45 1797.62,1211.45 1798.21,1211.45 1798.79,1211.45 1799.38,1211.45 1799.97,1211.45 1800.55,1211.45 1801.14,1211.45 1801.73,1211.45 1802.31,1211.45 1802.9,1211.45 1803.48,1211.45 1804.07,1211.45 1804.66,1211.45 1805.24,1211.45 1805.83,1211.45 1806.42,1211.45 1807,1211.45 1807.59,1211.45 1808.18,1211.45 1808.76,1211.45 1809.35,1211.45 1809.94,1211.45 1810.52,1211.45 1811.11,1211.45 1811.69,1211.45 1812.28,1211.45 1812.87,1211.45 1813.45,1211.45 1814.04,1211.45 1814.63,1211.45 1815.21,1211.45 1815.8,1211.45 1816.39,1211.45 1816.97,1211.45 1817.56,1211.45 1818.14,1211.45 1818.73,1211.45 1819.32,1211.45 1819.9,1211.45 1820.49,1211.45 1821.08,1211.45 1821.66,1211.45 1822.25,1211.45 1822.84,1211.45 1823.42,1211.45 1824.01,1211.45 1824.6,1211.45 1825.18,1211.45 1825.77,1211.45 1826.35,1211.45 1826.94,1211.45 1827.53,1211.45 1828.11,1211.45 1828.7,1211.45 1829.29,1211.45 1829.87,1211.45 1830.46,1211.45 1831.05,1211.45 1831.63,1211.45 1832.22,1211.45 1832.81,1211.45 1833.39,1211.45 1833.98,1211.45 1834.56,1211.45 1835.15,1211.45 1835.74,1211.45 1836.32,1211.45 1836.91,1211.45 1837.5,1211.45 1838.08,1211.45 1838.67,1211.45 1839.26,1211.45 1839.84,1211.45 1840.43,1211.45 1841.01,1211.45 1841.6,1211.45 1842.19,1211.45 1842.77,1211.45 1843.36,1211.45 1843.95,1211.45 1844.53,1211.45 1845.12,1211.45 1845.71,1211.45 1846.29,1211.45 1846.88,1211.45 1847.47,1211.45 1848.05,1211.45 1848.64,1211.45 1849.22,1211.45 1849.81,1211.45 1850.4,1211.45 1850.98,1211.45 1851.57,1211.45 1852.16,1211.45 1852.74,1211.45 1853.33,1211.45 1853.92,1211.45 1854.5,1211.45 1855.09,1211.45 1855.68,1211.45 1856.26,1211.45 1856.85,1211.45 1857.43,1211.45 1858.02,1211.45 1858.61,1211.45 1859.19,1211.45 1859.78,1211.45 1860.37,1211.45 1860.95,1211.45 1861.54,1211.45 1862.13,1211.45 1862.71,1211.45 1863.3,1211.45 1863.88,1211.45 1864.47,1211.45 1865.06,1211.45 1865.64,1211.45 1866.23,1211.45 1866.82,1211.45 1867.4,1211.45 1867.99,1211.45 1868.58,1211.45 1869.16,1211.45 1869.75,1211.45 1870.34,1211.45 1870.92,1211.45 1871.51,1211.45 1872.09,1211.45 1872.68,1211.45 1873.27,1211.45 1873.85,1211.45 1874.44,1211.45 1875.03,1211.45 1875.61,1211.45 1876.2,1211.45 1876.79,1211.45 1877.37,1211.45 1877.96,1211.45 1878.55,1211.45 1879.13,1211.45 1879.72,1211.45 1880.3,1211.45 1880.89,1211.45 1881.48,1211.45 1882.06,1211.45 1882.65,1211.45 1883.24,1211.45 1883.82,1211.45 1884.41,1211.45 1885,1211.45 1885.58,1211.45 1886.17,1211.45 1886.76,1211.45 1887.34,1211.45 1887.93,1211.45 1888.51,1211.45 1889.1,1211.45 1889.69,1211.45 1890.27,1211.45 1890.86,1211.45 1891.45,1211.45 1892.03,1211.45 1892.62,1211.45 1893.21,1211.45 1893.79,1211.45 1894.38,1211.45 1894.96,1211.45 1895.55,1211.45 1896.14,1211.45 1896.72,1211.45 1897.31,1211.45 1897.9,1211.45 1898.48,1211.45 1899.07,1211.45 1899.66,1211.45 1900.24,1211.45 1900.83,1211.45 1901.42,1211.45 1902,1211.45 1902.59,1211.45 1903.17,1211.45 1903.76,1211.45 1904.35,1211.45 1904.93,1211.45 1905.52,1211.45 1906.11,1211.45 1906.69,1211.45 1907.28,1211.45 1907.87,1211.45 1908.45,1211.45 1909.04,1211.45 1909.63,1211.45 1910.21,1211.45 1910.8,1211.45 1911.38,1211.45 1911.97,1211.45 1912.56,1211.45 1913.14,1211.45 1913.73,1211.45 1914.32,1211.45 1914.9,1211.45 1915.49,1211.45 1916.08,1211.45 1916.66,1211.45 1917.25,1211.45 1917.83,1211.45 1918.42,1211.45 1919.01,1211.45 1919.59,1211.45 1920.18,1211.45 1920.77,1211.45 1921.35,1211.45 1921.94,1211.45 1922.53,1211.45 1923.11,1211.45 1923.7,1211.45 1924.29,1211.45 1924.87,1211.45 1925.46,1211.45 1926.04,1211.45 1926.63,1211.45 1927.22,1211.45 1927.8,1211.45 1928.39,1211.45 1928.98,1211.45 1929.56,1211.45 1930.15,1211.45 1930.74,1211.45 1931.32,1211.45 1931.91,1211.45 1932.5,1211.45 1933.08,1211.45 1933.67,1211.45 1934.25,1211.45 1934.84,1211.45 1935.43,1211.45 1936.01,1211.45 1936.6,1211.45 1937.19,1211.45 1937.77,1211.45 1938.36,1211.45 1938.95,1211.45 1939.53,1211.45 1940.12,1211.45 1940.71,1211.45 1941.29,1211.45 1941.88,1211.45 1942.46,1211.45 1943.05,1211.45 1943.64,1211.45 1944.22,1211.45 1944.81,1211.45 1945.4,1211.45 1945.98,1211.45 1946.57,1211.45 1947.16,1211.45 1947.74,1211.45 1948.33,1211.45 1948.91,1211.45 1949.5,1211.45 1950.09,1211.45 1950.67,1211.45 1951.26,1211.45 1951.85,1211.45 1952.43,1211.45 1953.02,1211.45 1953.61,1211.45 1954.19,1211.45 1954.78,1211.45 1955.37,1211.45 1955.95,1211.45 1956.54,1211.45 1957.12,1211.45 1957.71,1211.45 1958.3,1211.45 1958.88,1211.45 1959.47,1211.45 1960.06,1211.45 1960.64,1211.45 1961.23,1211.45 1961.82,1211.45 1962.4,1211.45 1962.99,1211.45 1963.58,1211.45 1964.16,1211.45 1964.75,1211.45 1965.33,1211.45 1965.92,1211.45 1966.51,1211.45 1967.09,1211.45 1967.68,1211.45 1968.27,1211.45 1968.85,1211.45 1969.44,1211.45 1970.03,1211.45 1970.61,1211.45 1971.2,1211.45 1971.78,1211.45 1972.37,1211.45 1972.96,1211.45 1973.54,1211.45 1974.13,1211.45 1974.72,1211.45 1975.3,1211.45 1975.89,1211.45 1976.48,1211.45 1977.06,1211.45 1977.65,1211.45 1978.24,1211.45 1978.82,1211.45 1979.41,1211.45 1979.99,1211.45 1980.58,1211.45 1981.17,1211.45 1981.75,1211.45 1982.34,1211.45 1982.93,1211.45 1983.51,1211.45 1984.1,1211.45 1984.69,1211.45 1985.27,1211.45 1985.86,1211.45 1986.45,1211.45 1987.03,1211.45 1987.62,1211.45 1988.2,1211.45 1988.79,1211.45 1989.38,1211.45 1989.96,1211.45 1990.55,1211.45 1991.14,1211.45 1991.72,1211.45 1992.31,1211.45 1992.9,1211.45 1993.48,1211.45 1994.07,1211.45 1994.65,1211.45 1995.24,1211.45 1995.83,1211.45 1996.41,1211.45 1997,1211.45 1997.59,1211.45 1998.17,1211.45 1998.76,1211.45 1999.35,1211.45 1999.93,1211.45 2000.52,1211.45 2001.11,1211.45 2001.69,1211.45 2002.28,1211.45 2002.86,1211.45 2003.45,1211.45 2004.04,1211.45 2004.62,1211.45 2005.21,1211.45 2005.8,1211.45 2006.38,1211.45 2006.97,1211.45 2007.56,1211.45 2008.14,1211.45 2008.73,1211.45 2009.32,1211.45 2009.9,1211.45 2010.49,1211.45 2011.07,1211.45 2011.66,1211.45 2012.25,1211.45 2012.83,1211.45 2013.42,1211.45 2014.01,1211.45 2014.59,1211.45 2015.18,1211.45 2015.77,1211.45 2016.35,1211.45 2016.94,1211.45 2017.53,1211.45 2018.11,1211.45 2018.7,1211.45 2019.28,1211.45 2019.87,1211.45 2020.46,1211.45 2021.04,1211.45 2021.63,1211.45 2022.22,1211.45 2022.8,1211.45 2023.39,1211.45 2023.98,1211.45 2024.56,1211.45 2025.15,1211.45 2025.73,1211.45 2026.32,1211.45 2026.91,1211.45 2027.49,1211.45 2028.08,1211.45 2028.67,1211.45 2029.25,1211.45 2029.84,1211.45 2030.43,1211.45 2031.01,1211.45 2031.6,1211.45 2032.19,1211.45 2032.77,1211.45 2033.36,1211.45 2033.94,1211.45 2034.53,1211.45 2035.12,1211.45 2035.7,1211.45 2036.29,1211.45 2036.88,1211.45 2037.46,1211.45 2038.05,1211.45 2038.64,1211.45 2039.22,1211.45 2039.81,1211.45 2040.4,1211.45 2040.98,1211.45 2041.57,1211.45 2042.15,1211.45 2042.74,1211.45 2043.33,1211.45 2043.91,1211.45 2044.5,1211.45 2045.09,1211.45 2045.67,1211.45 2046.26,1211.45 2046.85,1211.45 2047.43,1211.45 2048.02,1211.45 2048.6,1211.45 2049.19,1211.45 2049.78,1211.45 2050.36,1211.45 2050.95,1211.45 2051.54,1211.45 2052.12,1211.45 2052.71,1211.45 2053.3,1211.45 2053.88,1211.45 2054.47,1211.45 2055.06,1211.45 2055.64,1211.45 2056.23,1211.45 2056.81,1211.45 2057.4,1211.45 2057.99,1211.45 2058.57,1211.45 2059.16,1211.45 2059.75,1211.45 2060.33,1211.45 2060.92,1211.45 2061.51,1211.45 2062.09,1211.45 2062.68,1211.45 2063.27,1211.45 2063.85,1211.45 2064.44,1211.45 2065.02,1211.45 2065.61,1211.45 2066.2,1211.45 2066.78,1211.45 2067.37,1211.45 2067.96,1211.45 2068.54,1211.45 2069.13,1211.45 2069.72,1211.45 2070.3,1211.45 2070.89,1211.45 2071.48,1211.45 2072.06,1211.45 2072.65,1211.45 2073.23,1211.45 2073.82,1211.45 2074.41,1211.45 2074.99,1211.45 2075.58,1211.45 2076.17,1211.45 2076.75,1211.45 2077.34,1211.45 2077.93,1211.45 2078.51,1211.45 2079.1,1211.45 2079.68,1211.45 2080.27,1211.45 2080.86,1211.45 2081.44,1211.45 2082.03,1211.45 2082.62,1211.45 2083.2,1211.45 2083.79,1211.45 2084.38,1211.45 2084.96,1211.45 2085.55,1211.45 2086.14,1211.45 2086.72,1211.45 2087.31,1211.45 2087.89,1211.45 2088.48,1211.45 2089.07,1211.45 2089.65,1211.45 2090.24,1211.45 2090.83,1211.45 2091.41,1211.45 2092,1211.45 2092.59,1211.45 2093.17,1211.45 2093.76,1211.45 2094.35,1211.45 2094.93,1211.45 2095.52,1211.45 2096.1,1211.45 2096.69,1211.45 2097.28,1211.45 2097.86,1211.45 2098.45,1211.45 2099.04,1211.45 2099.62,1211.45 2100.21,1211.45 2100.8,1211.45 2101.38,1211.45 2101.97,1211.45 2102.55,1211.45 2103.14,1211.45 2103.73,1211.45 2104.31,1211.45 2104.9,1211.45 2105.49,1211.45 2106.07,1211.45 2106.66,1211.45 2107.25,1211.45 2107.83,1211.45 2108.42,1211.45 2109.01,1211.45 2109.59,1211.45 2110.18,1211.45 2110.76,1211.45 2111.35,1211.45 2111.94,1211.45 2112.52,1211.45 2113.11,1211.45 2113.7,1211.45 2114.28,1211.45 2114.87,1211.45 2115.46,1211.45 2116.04,1211.45 2116.63,1211.45 2117.22,1211.45 2117.8,1211.45 2118.39,1211.45 2118.97,1211.45 2119.56,1211.45 2120.15,1211.45 2120.73,1211.45 2121.32,1211.45 2121.91,1211.45 2122.49,1211.45 2123.08,1211.45 2123.67,1211.45 2124.25,1211.45 2124.84,1211.45 2125.42,1211.45 2126.01,1211.45 2126.6,1211.45 2127.18,1211.45 2127.77,1211.45 2128.36,1211.45 2128.94,1211.45 2129.53,1211.45 2130.12,1211.45 2130.7,1211.45 2131.29,1211.45 2131.88,1211.45 2132.46,1211.45 2133.05,1211.45 2133.63,1211.45 2134.22,1211.45 2134.81,1211.45 2135.39,1211.45 2135.98,1211.45 2136.57,1211.45 2137.15,1211.45 2137.74,1211.45 2138.33,1211.45 2138.91,1211.45 2139.5,1211.45 2140.09,1211.45 2140.67,1211.45 2141.26,1211.45 2141.84,1211.45 2142.43,1211.45 2143.02,1211.45 2143.6,1211.45 2144.19,1211.45 2144.78,1211.45 2145.36,1211.45 2145.95,1211.45 2146.54,1211.45 2147.12,1211.45 2147.71,1211.45 2148.3,1211.45 2148.88,1211.45 2149.47,1211.45 2150.05,1211.45 2150.64,1211.45 2151.23,1211.45 2151.81,1211.45 2152.4,1211.45 2152.99,1211.45 2153.57,1211.45 2154.16,1211.45 2154.75,1211.45 2155.33,1211.45 2155.92,1211.45 2156.5,1211.45 2157.09,1211.45 2157.68,1211.45 2158.26,1211.45 \"/>\n<path clip-path=\"url(#clip242)\" d=\"M986.025 1211.36 L986.612 1211.36 L987.198 1211.36 L987.785 1211.36 L988.371 1211.36 L988.957 1211.36 L989.544 1211.36 L990.13 1211.36 L990.717 1211.36 L991.303 1211.36 L991.889 1211.36 L992.476 1211.36 L993.062 1211.36 L993.649 1211.36 L994.235 1211.36 L994.822 1211.36 L995.408 1211.36 L995.994 1211.36 L996.581 1211.36 L997.167 1211.36 L997.754 1211.36 L998.34 1211.36 L998.926 1211.36 L999.513 1211.36 L1000.1 1211.36 L1000.69 1211.36 L1001.27 1211.36 L1001.86 1211.36 L1002.44 1211.36 L1003.03 1211.36 L1003.62 1211.36 L1004.2 1211.36 L1004.79 1211.36 L1005.38 1211.36 L1005.96 1211.36 L1006.55 1211.36 L1007.14 1211.36 L1007.72 1211.36 L1008.31 1211.36 L1008.9 1211.36 L1009.48 1211.36 L1010.07 1211.36 L1010.65 1211.36 L1011.24 1211.36 L1011.83 1211.36 L1012.41 1211.36 L1013 1211.36 L1013.59 1211.36 L1014.17 1211.36 L1014.76 1211.36 L1015.35 1211.36 L1015.93 1211.36 L1016.52 1211.36 L1017.11 1211.36 L1017.69 1211.36 L1018.28 1211.36 L1018.86 1211.36 L1019.45 1211.36 L1020.04 1211.36 L1020.62 1211.36 L1021.21 1211.36 L1021.8 1211.36 L1022.38 1211.36 L1022.97 1211.36 L1023.56 1211.36 L1024.14 1211.36 L1024.73 1211.36 L1025.32 1211.36 L1025.9 1211.36 L1026.49 1211.36 L1027.07 1211.36 L1027.66 1211.36 L1028.25 1211.36 L1028.83 1211.36 L1029.42 1211.36 L1030.01 1211.36 L1030.59 1211.36 L1031.18 1211.36 L1031.77 1211.36 L1032.35 1211.36 L1032.94 1211.36 L1033.52 1211.36 L1034.11 1211.36 L1034.7 1211.36 L1035.28 1211.36 L1035.87 1211.36 L1036.46 1211.36 L1037.04 1211.36 L1037.63 1211.36 L1038.22 1211.36 L1038.8 1211.36 L1039.39 1211.36 L1039.98 1211.36 L1040.56 1211.36 L1041.15 1211.36 L1041.73 1211.36 L1042.32 1211.36 L1042.91 1211.36 L1043.49 1211.36 L1044.08 1211.36 L1044.67 1211.36 L1045.25 1211.36 L1045.84 1211.36 L1046.43 1211.36 L1047.01 1211.36 L1047.6 1211.36 L1048.19 1211.36 L1048.77 1211.36 L1049.36 1211.36 L1049.94 1211.36 L1050.53 1211.36 L1051.12 1211.36 L1051.7 1211.36 L1052.29 1211.36 L1052.88 1211.36 L1053.46 1211.36 L1054.05 1211.36 L1054.64 1211.36 L1055.22 1211.36 L1055.81 1211.36 L1056.39 1211.36 L1056.98 1211.36 L1057.57 1211.36 L1058.15 1211.36 L1058.74 1211.36 L1059.33 1211.36 L1059.91 1211.36 L1060.5 1211.36 L1061.09 1211.36 L1061.67 1211.36 L1062.26 1211.36 L1062.85 1211.36 L1063.43 1211.36 L1064.02 1211.36 L1064.6 1211.36 L1065.19 1211.36 L1065.78 1211.36 L1066.36 1211.36 L1066.95 1211.36 L1067.54 1211.36 L1068.12 1211.36 L1068.71 1211.36 L1069.3 1211.36 L1069.88 1211.36 L1070.47 1211.36 L1071.06 1211.36 L1071.64 1211.36 L1072.23 1211.36 L1072.81 1211.36 L1073.4 1211.36 L1073.99 1211.36 L1074.57 1211.36 L1075.16 1211.36 L1075.75 1211.36 L1076.33 1211.36 L1076.92 1211.36 L1077.51 1211.36 L1078.09 1211.36 L1078.68 1211.36 L1079.26 1211.36 L1079.85 1211.36 L1080.44 1211.36 L1081.02 1211.36 L1081.61 1211.36 L1082.2 1211.36 L1082.78 1211.36 L1083.37 1211.36 L1083.96 1211.36 L1084.54 1211.36 L1085.13 1211.36 L1085.72 1211.36 L1086.3 1211.36 L1086.89 1211.36 L1087.47 1211.36 L1088.06 1211.36 L1088.65 1211.36 L1089.23 1211.36 L1089.82 1211.36 L1090.41 1211.36 L1090.99 1211.36 L1091.58 1211.36 L1092.17 1211.36 L1092.75 1211.36 L1093.34 1211.36 L1093.93 1211.36 L1094.51 1211.36 L1095.1 1211.36 L1095.68 1211.36 L1096.27 1211.36 L1096.86 1211.36 L1097.44 1211.36 L1098.03 1211.36 L1098.62 1211.36 L1099.2 1211.36 L1099.79 1211.36 L1100.38 1211.36 L1100.96 1211.36 L1101.55 1211.36 L1102.14 1211.36 L1102.72 1211.36 L1103.31 1211.36 L1103.89 1211.36 L1104.48 1211.36 L1105.07 1211.36 L1105.65 1211.36 L1106.24 1211.36 L1106.83 1211.36 L1107.41 1211.36 L1108 1211.36 L1108.59 1211.36 L1109.17 1211.36 L1109.76 1211.36 L1110.34 1211.36 L1110.93 1211.36 L1111.52 1211.36 L1112.1 1211.36 L1112.69 1211.36 L1113.28 1211.36 L1113.86 1211.36 L1114.45 1211.36 L1115.04 1211.36 L1115.62 1211.36 L1116.21 1211.36 L1116.8 1211.36 L1117.38 1211.36 L1117.97 1211.36 L1118.55 1211.36 L1119.14 1211.36 L1119.73 1211.36 L1120.31 1211.36 L1120.9 1211.36 L1121.49 1211.36 L1122.07 1211.36 L1122.66 1211.36 L1123.25 1211.36 L1123.83 1211.36 L1124.42 1211.36 L1125.01 1211.36 L1125.59 1211.36 L1126.18 1211.36 L1126.76 1211.36 L1127.35 1211.36 L1127.94 1211.36 L1128.52 1211.36 L1129.11 1211.36 L1129.7 1211.36 L1130.28 1211.36 L1130.87 1211.36 L1131.46 1211.36 L1132.04 1211.36 L1132.63 1211.36 L1133.21 1211.36 L1133.8 1211.36 L1134.39 1211.36 L1134.97 1211.36 L1135.56 1211.36 L1136.15 1211.36 L1136.73 1211.36 L1137.32 1211.36 L1137.91 1211.36 L1138.49 1211.36 L1139.08 1211.36 L1139.67 1211.36 L1140.25 1211.36 L1140.84 1211.36 L1141.42 1211.36 L1142.01 1211.36 L1142.6 1211.36 L1143.18 1211.36 L1143.77 1211.36 L1144.36 1211.36 L1144.94 1211.36 L1145.53 1211.36 L1146.12 1211.36 L1146.7 1211.36 L1147.29 1211.36 L1147.88 1211.36 L1148.46 1211.36 L1149.05 1211.36 L1149.63 1211.36 L1150.22 1211.36 L1150.81 1211.36 L1151.39 1211.36 L1151.98 1211.36 L1152.57 1211.36 L1153.15 1211.36 L1153.74 1211.36 L1154.33 1211.36 L1154.91 1211.36 L1155.5 1211.36 L1156.09 1211.36 L1156.67 1211.36 L1157.26 1211.36 L1157.84 1211.36 L1158.43 1211.36 L1159.02 1211.36 L1159.6 1211.36 L1160.19 1211.36 L1160.78 1211.36 L1161.36 1211.36 L1161.95 1211.36 L1162.54 1211.36 L1163.12 1211.36 L1163.71 1211.36 L1164.29 1211.36 L1164.88 1211.36 L1165.47 1211.36 L1166.05 1211.36 L1166.64 1211.36 L1167.23 1211.36 L1167.81 1211.36 L1168.4 1211.36 L1168.99 1211.36 L1169.57 1211.36 L1170.16 1211.36 L1170.75 1211.36 L1171.33 1211.36 L1171.92 1211.36 L1172.5 1211.36 L1173.09 1211.36 L1173.68 1211.36 L1174.26 1211.36 L1174.85 1211.36 L1175.44 1211.36 L1176.02 1211.36 L1176.61 1211.36 L1177.2 1211.36 L1177.78 1211.36 L1178.37 1211.36 L1178.96 1211.36 L1179.54 1211.36 L1180.13 1211.36 L1180.71 1211.36 L1181.3 1211.36 L1181.89 1211.36 L1182.47 1211.36 L1183.06 1211.36 L1183.65 1211.36 L1184.23 1211.36 L1184.82 1211.36 L1185.41 1211.36 L1185.99 1211.36 L1186.58 1211.36 L1187.16 1211.36 L1187.75 1211.36 L1188.34 1211.36 L1188.92 1211.36 L1189.51 1211.36 L1190.1 1211.36 L1190.68 1211.36 L1191.27 1211.36 L1191.86 1211.36 L1192.44 1211.36 L1193.03 1211.36 L1193.62 1211.36 L1194.2 1211.36 L1194.79 1211.36 L1195.37 1211.36 L1195.96 1211.36 L1196.55 1211.36 L1197.13 1211.36 L1197.72 1211.36 L1198.31 1211.36 L1198.89 1211.36 L1199.48 1211.36 L1200.07 1211.36 L1200.65 1211.36 L1201.24 1211.36 L1201.83 1211.36 L1202.41 1211.36 L1203 1211.36 L1203.58 1211.36 L1204.17 1211.36 L1204.76 1211.36 L1205.34 1211.36 L1205.93 1211.36 L1206.52 1211.36 L1207.1 1211.36 L1207.69 1211.36 L1208.28 1211.36 L1208.86 1211.36 L1209.45 1211.36 L1210.03 1211.36 L1210.62 1211.36 L1211.21 1211.36 L1211.79 1211.36 L1212.38 1211.36 L1212.97 1211.36 L1213.55 1211.36 L1214.14 1211.36 L1214.73 1211.36 L1215.31 1211.36 L1215.9 1211.36 L1216.49 1211.36 L1217.07 1211.36 L1217.66 1211.36 L1218.24 1211.36 L1218.83 1211.36 L1219.42 1211.36 L1220 1211.36 L1220.59 1211.36 L1221.18 1211.36 L1221.76 1211.36 L1222.35 1211.36 L1222.94 1211.36 L1223.52 1211.36 L1224.11 1211.36 L1224.7 1211.36 L1225.28 1211.36 L1225.87 1211.36 L1226.45 1211.36 L1227.04 1211.36 L1227.63 1211.36 L1228.21 1211.36 L1228.8 1211.36 L1229.39 1211.36 L1229.97 1211.36 L1230.56 1211.36 L1231.15 1211.36 L1231.73 1211.36 L1232.32 1211.36 L1232.91 1211.36 L1233.49 1211.36 L1234.08 1211.36 L1234.66 1211.36 L1235.25 1211.36 L1235.84 1211.36 L1236.42 1211.36 L1237.01 1211.36 L1237.6 1211.36 L1238.18 1211.36 L1238.77 1211.36 L1239.36 1211.36 L1239.94 1211.36 L1240.53 1211.36 L1241.11 1211.36 L1241.7 1211.36 L1242.29 1211.36 L1242.87 1211.36 L1243.46 1211.36 L1244.05 1211.36 L1244.63 1211.36 L1245.22 1211.36 L1245.81 1211.36 L1246.39 1211.36 L1246.98 1211.36 L1247.57 1211.36 L1248.15 1211.36 L1248.74 1211.36 L1249.32 1211.36 L1249.91 1211.36 L1250.5 1211.36 L1251.08 1211.36 L1251.67 1211.36 L1252.26 1211.36 L1252.84 1211.36 L1253.43 1211.36 L1254.02 1211.36 L1254.6 1211.36 L1255.19 1211.36 L1255.78 1211.36 L1256.36 1211.36 L1256.95 1211.36 L1257.53 1211.36 L1258.12 1211.36 L1258.71 1211.36 L1259.29 1211.36 L1259.88 1211.36 L1260.47 1211.36 L1261.05 1211.36 L1261.64 1211.36 L1262.23 1211.36 L1262.81 1211.36 L1263.4 1211.36 L1263.98 1211.36 L1264.57 1211.36 L1265.16 1211.36 L1265.74 1211.36 L1266.33 1211.36 L1266.92 1211.36 L1267.5 1211.36 L1268.09 1211.36 L1268.68 1211.36 L1269.26 1211.36 L1269.85 1211.36 L1270.44 1211.36 L1271.02 1211.36 L1271.61 1211.36 L1272.19 1211.36 L1272.78 1211.36 L1273.37 1211.36 L1273.95 1211.36 L1274.54 1211.36 L1275.13 1211.36 L1275.71 1211.36 L1276.3 1211.36 L1276.89 1211.36 L1277.47 1211.36 L1278.06 1211.36 L1278.65 1211.36 L1279.23 1211.36 L1279.82 1211.36 L1280.4 1211.36 L1280.99 1211.36 L1281.58 1211.36 L1282.16 1211.36 L1282.75 1211.36 L1283.34 1211.36 L1283.92 1211.36 L1284.51 1211.36 L1285.1 1211.36 L1285.68 1211.36 L1286.27 1211.36 L1286.86 1211.36 L1287.44 1211.36 L1288.03 1211.36 L1288.61 1211.36 L1289.2 1211.36 L1289.79 1211.36 L1290.37 1211.36 L1290.96 1211.36 L1291.55 1211.36 L1292.13 1211.36 L1292.72 1211.36 L1293.31 1211.36 L1293.89 1211.36 L1294.48 1211.36 L1295.06 1211.36 L1295.65 1211.36 L1296.24 1211.36 L1296.82 1211.36 L1297.41 1211.36 L1298 1211.36 L1298.58 1211.36 L1299.17 1211.36 L1299.76 1211.36 L1300.34 1211.36 L1300.93 1211.36 L1301.52 1211.36 L1302.1 1211.36 L1302.69 1211.36 L1303.27 1211.36 L1303.86 1211.36 L1304.45 1211.36 L1305.03 1211.36 L1305.62 1211.36 L1306.21 1211.36 L1306.79 1211.36 L1307.38 1211.36 L1307.97 1211.36 L1308.55 1211.36 L1309.14 1211.36 L1309.73 1211.36 L1310.31 1211.36 L1310.9 1211.36 L1311.48 1211.36 L1312.07 1211.36 L1312.66 1211.36 L1313.24 1211.36 L1313.83 1211.36 L1314.42 1211.36 L1315 1211.36 L1315.59 1211.36 L1316.18 1211.36 L1316.76 1211.36 L1317.35 1211.36 L1317.93 1211.36 L1318.52 1211.36 L1319.11 1211.36 L1319.69 1211.36 L1320.28 1211.36 L1320.87 1211.36 L1321.45 1211.36 L1322.04 1211.36 L1322.63 1211.36 L1323.21 1211.36 L1323.8 1211.36 L1324.39 1211.36 L1324.97 1211.36 L1325.56 1211.36 L1326.14 1211.36 L1326.73 1211.36 L1327.32 1211.36 L1327.9 1211.36 L1328.49 1211.36 L1329.08 1211.36 L1329.66 1211.36 L1330.25 1211.36 L1330.84 1211.36 L1331.42 1211.36 L1332.01 1211.36 L1332.6 1211.36 L1333.18 1211.36 L1333.77 1211.36 L1334.35 1211.36 L1334.94 1211.36 L1335.53 1211.36 L1336.11 1211.36 L1336.7 1211.36 L1337.29 1211.36 L1337.87 1211.36 L1338.46 1211.36 L1339.05 1211.36 L1339.63 1211.36 L1340.22 1211.36 L1340.8 1211.36 L1341.39 1211.36 L1341.98 1211.36 L1342.56 1211.36 L1343.15 1211.36 L1343.74 1211.36 L1344.32 1211.36 L1344.91 1211.36 L1345.5 1211.36 L1346.08 1211.36 L1346.67 1211.36 L1347.26 1211.36 L1347.84 1211.36 L1348.43 1211.36 L1349.01 1211.36 L1349.6 1211.36 L1350.19 1211.36 L1350.77 1211.36 L1351.36 1211.36 L1351.95 1211.36 L1352.53 1211.36 L1353.12 1211.36 L1353.71 1211.36 L1354.29 1211.36 L1354.88 1211.36 L1355.47 1211.36 L1356.05 1211.36 L1356.64 1211.36 L1357.22 1211.36 L1357.81 1211.36 L1358.4 1211.36 L1358.98 1211.36 L1359.57 1211.36 L1360.16 1211.36 L1360.74 1211.36 L1361.33 1211.36 L1361.92 1211.36 L1362.5 1211.36 L1363.09 1211.36 L1363.68 1211.36 L1364.26 1211.36 L1364.85 1211.36 L1365.43 1211.36 L1366.02 1211.36 L1366.61 1211.36 L1367.19 1211.36 L1367.78 1211.36 L1368.37 1211.36 L1368.95 1211.36 L1369.54 1211.36 L1370.13 1211.36 L1370.71 1211.36 L1371.3 1211.36 L1371.88 1211.36 L1372.47 1211.36 L1373.06 1211.36 L1373.64 1211.36 L1374.23 1211.36 L1374.82 1211.36 L1375.4 1211.36 L1375.99 1211.36 L1376.58 1211.36 L1377.16 1211.36 L1377.75 1211.36 L1378.34 1211.36 L1378.92 1211.36 L1379.51 1211.36 L1380.09 1211.36 L1380.68 1211.36 L1381.27 1211.36 L1381.85 1211.36 L1382.44 1211.36 L1383.03 1211.36 L1383.61 1211.36 L1384.2 1211.36 L1384.79 1211.36 L1385.37 1211.36 L1385.96 1211.36 L1386.55 1211.36 L1387.13 1211.36 L1387.72 1211.36 L1388.3 1211.36 L1388.89 1211.36 L1389.48 1211.36 L1390.06 1211.36 L1390.65 1211.36 L1391.24 1211.36 L1391.82 1211.36 L1392.41 1211.36 L1393 1211.36 L1393.58 1211.36 L1394.17 1211.36 L1394.75 1211.36 L1395.34 1211.36 L1395.93 1211.36 L1396.51 1211.36 L1397.1 1211.36 L1397.69 1211.36 L1398.27 1211.36 L1398.86 1211.36 L1399.45 1211.36 L1400.03 1211.36 L1400.62 1211.36 L1401.21 1211.36 L1401.79 1211.36 L1402.38 1211.36 L1402.96 1211.36 L1403.55 1211.36 L1404.14 1211.36 L1404.72 1211.36 L1405.31 1211.36 L1405.9 1211.36 L1406.48 1211.36 L1407.07 1211.36 L1407.66 1211.36 L1408.24 1211.36 L1408.83 1211.36 L1409.42 1211.36 L1410 1211.36 L1410.59 1211.36 L1411.17 1211.36 L1411.76 1211.36 L1412.35 1211.36 L1412.93 1211.36 L1413.52 1211.36 L1414.11 1211.36 L1414.69 1211.36 L1415.28 1211.36 L1415.87 1211.36 L1416.45 1211.36 L1417.04 1211.36 L1417.63 1211.36 L1418.21 1211.36 L1418.8 1211.36 L1419.38 1211.36 L1419.97 1211.36 L1420.56 1211.36 L1421.14 1211.36 L1421.73 1211.36 L1422.32 1211.36 L1422.9 1211.36 L1423.49 1211.36 L1424.08 1211.36 L1424.66 1211.36 L1425.25 1211.36 L1425.83 1211.36 L1426.42 1211.36 L1427.01 1211.36 L1427.59 1211.36 L1428.18 1211.36 L1428.77 1211.36 L1429.35 1211.36 L1429.94 1211.36 L1430.53 1211.36 L1431.11 1211.36 L1431.7 1211.36 L1432.29 1211.36 L1432.87 1211.36 L1433.46 1211.36 L1434.04 1211.36 L1434.63 1211.36 L1435.22 1211.36 L1435.8 1211.36 L1436.39 1211.36 L1436.98 1211.36 L1437.56 1211.36 L1438.15 1211.36 L1438.74 1211.36 L1439.32 1211.36 L1439.91 1211.36 L1440.5 1211.36 L1441.08 1211.36 L1441.67 1211.36 L1442.25 1211.36 L1442.84 1211.36 L1443.43 1211.36 L1444.01 1211.36 L1444.6 1211.36 L1445.19 1211.36 L1445.77 1211.36 L1446.36 1211.36 L1446.95 1211.36 L1447.53 1211.36 L1448.12 1211.36 L1448.7 1211.36 L1449.29 1211.36 L1449.88 1211.36 L1450.46 1211.36 L1451.05 1211.36 L1451.64 1211.36 L1452.22 1211.36 L1452.81 1211.36 L1453.4 1211.36 L1453.98 1211.36 L1454.57 1211.36 L1455.16 1211.36 L1455.74 1211.36 L1456.33 1211.36 L1456.91 1211.36 L1457.5 1211.36 L1458.09 1211.36 L1458.67 1211.36 L1459.26 1211.36 L1459.85 1211.36 L1460.43 1211.36 L1461.02 1211.36 L1461.61 1211.36 L1462.19 1211.36 L1462.78 1211.36 L1463.37 1211.36 L1463.95 1211.36 L1464.54 1211.36 L1465.12 1211.36 L1465.71 1211.36 L1466.3 1211.36 L1466.88 1211.36 L1467.47 1211.36 L1468.06 1211.36 L1468.64 1211.36 L1469.23 1211.36 L1469.82 1211.36 L1470.4 1211.36 L1470.99 1211.36 L1471.57 1211.36 L1472.16 1211.36 L1472.75 1211.36 L1473.33 1211.36 L1473.92 1211.36 L1474.51 1211.36 L1475.09 1211.36 L1475.68 1211.36 L1476.27 1211.36 L1476.85 1211.36 L1477.44 1211.36 L1478.03 1211.36 L1478.61 1211.36 L1479.2 1211.36 L1479.78 1211.36 L1480.37 1211.36 L1480.96 1211.36 L1481.54 1211.36 L1482.13 1211.36 L1482.72 1211.36 L1483.3 1211.36 L1483.89 1211.36 L1484.48 1211.36 L1485.06 1211.36 L1485.65 1211.36 L1486.24 1211.36 L1486.82 1211.36 L1487.41 1211.36 L1487.99 1211.36 L1488.58 1211.36 L1489.17 1211.36 L1489.75 1211.36 L1490.34 1211.36 L1490.93 1211.36 L1491.51 1211.36 L1492.1 1211.36 L1492.69 1211.36 L1493.27 1211.36 L1493.86 1211.36 L1494.45 1211.36 L1495.03 1211.36 L1495.62 1211.36 L1496.2 1211.36 L1496.79 1211.36 L1497.38 1211.36 L1497.96 1211.36 L1498.55 1211.36 L1499.14 1211.36 L1499.72 1211.36 L1500.31 1211.36 L1500.9 1211.36 L1501.48 1211.36 L1502.07 1211.36 L1502.65 1211.36 L1503.24 1211.36 L1503.83 1211.36 L1504.41 1211.36 L1505 1211.36 L1505.59 1211.36 L1506.17 1211.36 L1506.76 1211.36 L1507.35 1211.36 L1507.93 1211.36 L1508.52 1211.36 L1509.11 1211.36 L1509.69 1211.36 L1510.28 1211.36 L1510.86 1211.36 L1511.45 1211.36 L1512.04 1211.36 L1512.62 1211.36 L1513.21 1211.36 L1513.8 1211.36 L1514.38 1211.36 L1514.97 1211.36 L1515.56 1211.36 L1516.14 1211.36 L1516.73 1211.36 L1517.32 1211.36 L1517.9 1211.36 L1518.49 1211.36 L1519.07 1211.36 L1519.66 1211.36 L1520.25 1211.36 L1520.83 1211.36 L1521.42 1211.36 L1522.01 1211.36 L1522.59 1211.36 L1523.18 1211.36 L1523.77 1211.36 L1524.35 1211.36 L1524.94 1211.36 L1525.52 1211.36 L1526.11 1211.36 L1526.7 1211.36 L1527.28 1211.36 L1527.87 1211.36 L1528.46 1211.36 L1529.04 1211.36 L1529.63 1211.36 L1530.22 1211.36 L1530.8 1211.36 L1531.39 1211.36 L1531.98 1211.36 L1532.56 1211.36 L1533.15 1211.36 L1533.73 1211.36 L1534.32 1211.36 L1534.91 1211.36 L1535.49 1211.36 L1536.08 1211.36 L1536.67 1211.36 L1537.25 1211.36 L1537.84 1211.36 L1538.43 1211.36 L1539.01 1211.36 L1539.6 1211.36 L1540.19 1211.36 L1540.77 1211.36 L1541.36 1211.36 L1541.94 1211.36 L1542.53 1211.36 L1543.12 1211.36 L1543.7 1211.36 L1544.29 1211.36 L1544.88 1211.36 L1545.46 1211.36 L1546.05 1211.36 L1546.64 1211.36 L1547.22 1211.36 L1547.81 1211.36 L1548.4 1211.36 L1548.98 1211.36 L1549.57 1211.36 L1550.15 1211.36 L1550.74 1211.36 L1551.33 1211.36 L1551.91 1211.36 L1552.5 1211.36 L1553.09 1211.36 L1553.67 1211.36 L1554.26 1211.36 L1554.85 1211.36 L1555.43 1211.36 L1556.02 1211.36 L1556.6 1211.36 L1557.19 1211.36 L1557.78 1211.36 L1558.36 1211.36 L1558.95 1211.36 L1559.54 1211.36 L1560.12 1211.36 L1560.71 1211.36 L1561.3 1211.36 L1561.88 1211.36 L1562.47 1211.36 L1563.06 1211.36 L1563.64 1211.36 L1564.23 1211.36 L1564.81 1211.36 L1565.4 1211.36 L1565.99 1211.36 L1566.57 1211.36 L1567.16 1211.36 L1567.75 1211.36 L1568.33 1211.36 L1568.92 1211.36 L1569.51 1211.36 L1570.09 1211.36 L1570.68 1211.36 L1571.27 1211.36 L1571.85 1211.36 L1572.44 1211.36 L1573.02 1211.36 L1573.61 1211.36 L1574.2 1211.36 L1574.78 1211.36 L1575.37 1211.36 L1575.96 1211.36 L1576.54 1211.36 L1577.13 1211.36 L1577.72 1211.36 L1578.3 1211.36 L1578.89 1211.36 L1579.47 1211.36 L1580.06 1211.36 L1580.65 1211.36 L1581.23 1211.36 L1581.82 1211.36 L1582.41 1211.36 L1582.99 1211.36 L1583.58 1211.36 L1584.17 1211.36 L1584.75 1211.36 L1585.34 1211.36 L1585.93 1211.36 L1586.51 1211.36 L1587.1 1211.36 L1587.68 1211.36 L1588.27 1211.36 L1588.86 1211.36 L1589.44 1211.36 L1590.03 1211.36 L1590.62 1211.36 L1591.2 1211.36 L1591.79 1211.36 L1592.38 1211.36 L1592.96 1211.36 L1593.55 1211.36 L1594.14 1211.36 L1594.72 1211.36 L1595.31 1211.36 L1595.89 1211.36 L1596.48 1211.36 L1597.07 1211.36 L1597.65 1211.36 L1598.24 1211.36 L1598.83 1211.36 L1599.41 1211.36 L1600 1211.36 L1600.59 1211.36 L1601.17 1211.36 L1601.76 1211.36 L1602.34 1211.36 L1602.93 1211.36 L1603.52 1211.36 L1604.1 1211.36 L1604.69 1211.36 L1605.28 1211.36 L1605.86 1211.36 L1606.45 1211.36 L1607.04 1211.36 L1607.62 1211.36 L1608.21 1211.36 L1608.8 1211.36 L1609.38 1211.36 L1609.97 1211.36 L1610.55 1211.36 L1611.14 1211.36 L1611.73 1211.36 L1612.31 1211.36 L1612.9 1211.36 L1613.49 1211.36 L1614.07 1211.36 L1614.66 1211.36 L1615.25 1211.36 L1615.83 1211.36 L1616.42 1211.36 L1617.01 1211.36 L1617.59 1211.36 L1618.18 1211.36 L1618.76 1211.36 L1619.35 1211.36 L1619.94 1211.36 L1620.52 1211.36 L1621.11 1211.36 L1621.7 1211.36 L1622.28 1211.36 L1622.87 1211.36 L1623.46 1211.36 L1624.04 1211.36 L1624.63 1211.36 L1625.22 1211.36 L1625.8 1211.36 L1626.39 1211.36 L1626.97 1211.36 L1627.56 1211.36 L1628.15 1211.36 L1628.73 1211.36 L1629.32 1211.36 L1629.91 1211.36 L1630.49 1211.36 L1631.08 1211.36 L1631.67 1211.36 L1632.25 1211.36 L1632.84 1211.36 L1633.42 1211.36 L1634.01 1211.36 L1634.6 1211.36 L1635.18 1211.36 L1635.77 1211.36 L1636.36 1211.36 L1636.94 1211.36 L1637.53 1211.36 L1638.12 1211.36 L1638.7 1211.36 L1639.29 1211.36 L1639.88 1211.36 L1640.46 1211.36 L1641.05 1211.36 L1641.63 1211.36 L1642.22 1211.36 L1642.81 1211.36 L1643.39 1211.36 L1643.98 1211.36 L1644.57 1211.36 L1645.15 1211.36 L1645.74 1211.36 L1646.33 1211.36 L1646.91 1211.36 L1647.5 1211.36 L1648.09 1211.36 L1648.67 1211.36 L1649.26 1211.36 L1649.84 1211.36 L1650.43 1211.36 L1651.02 1211.36 L1651.6 1211.36 L1652.19 1211.36 L1652.78 1211.36 L1653.36 1211.36 L1653.95 1211.36 L1654.54 1211.36 L1655.12 1211.36 L1655.71 1211.36 L1656.29 1211.36 L1656.88 1211.36 L1657.47 1211.36 L1658.05 1211.36 L1658.64 1211.36 L1659.23 1211.36 L1659.81 1211.36 L1660.4 1211.36 L1660.99 1211.36 L1661.57 1211.36 L1662.16 1211.36 L1662.75 1211.36 L1663.33 1211.36 L1663.92 1211.36 L1664.5 1211.36 L1665.09 1211.36 L1665.68 1211.36 L1666.26 1211.36 L1666.85 1211.36 L1667.44 1211.36 L1668.02 1211.36 L1668.61 1211.36 L1669.2 1211.36 L1669.78 1211.36 L1670.37 1211.36 L1670.96 1211.36 L1671.54 1211.36 L1672.13 1211.36 L1672.71 1211.36 L1673.3 1211.36 L1673.89 1211.36 L1674.47 1211.36 L1675.06 1211.36 L1675.65 1211.36 L1676.23 1211.36 L1676.82 1211.36 L1677.41 1211.36 L1677.99 1211.36 L1678.58 1211.36 L1679.17 1211.36 L1679.75 1211.36 L1680.34 1211.36 L1680.92 1211.36 L1681.51 1211.36 L1682.1 1211.36 L1682.68 1211.36 L1683.27 1211.36 L1683.86 1211.36 L1684.44 1211.36 L1685.03 1211.36 L1685.62 1211.36 L1686.2 1211.36 L1686.79 1211.36 L1687.37 1211.36 L1687.96 1211.36 L1688.55 1211.36 L1689.13 1211.36 L1689.72 1211.36 L1690.31 1211.36 L1690.89 1211.36 L1691.48 1211.36 L1692.07 1211.36 L1692.65 1211.36 L1693.24 1211.36 L1693.83 1211.36 L1694.41 1211.36 L1695 1211.36 L1695.58 1211.36 L1696.17 1211.36 L1696.76 1211.36 L1697.34 1211.36 L1697.93 1211.36 L1698.52 1211.36 L1699.1 1211.36 L1699.69 1211.36 L1700.28 1211.36 L1700.86 1211.36 L1701.45 1211.36 L1702.04 1211.36 L1702.62 1211.36 L1703.21 1211.36 L1703.79 1211.36 L1704.38 1211.36 L1704.97 1211.36 L1705.55 1211.36 L1706.14 1211.36 L1706.73 1211.36 L1707.31 1211.36 L1707.9 1211.36 L1708.49 1211.36 L1709.07 1211.36 L1709.66 1211.36 L1710.24 1211.36 L1710.83 1211.36 L1711.42 1211.36 L1712 1211.36 L1712.59 1211.36 L1713.18 1211.36 L1713.76 1211.36 L1714.35 1211.36 L1714.94 1211.36 L1715.52 1211.36 L1716.11 1211.36 L1716.7 1211.36 L1717.28 1211.36 L1717.87 1211.36 L1718.45 1211.36 L1719.04 1211.36 L1719.63 1211.36 L1720.21 1211.36 L1720.8 1211.36 L1721.39 1211.36 L1721.97 1211.36 L1722.56 1211.36 L1723.15 1211.36 L1723.73 1211.36 L1724.32 1211.36 L1724.91 1211.36 L1725.49 1211.36 L1726.08 1211.36 L1726.66 1211.36 L1727.25 1211.36 L1727.84 1211.36 L1728.42 1211.36 L1729.01 1211.36 L1729.6 1211.36 L1730.18 1211.36 L1730.77 1211.36 L1731.36 1211.36 L1731.94 1211.36 L1732.53 1211.36 L1733.11 1211.36 L1733.7 1211.36 L1734.29 1211.36 L1734.87 1211.36 L1735.46 1211.36 L1736.05 1211.36 L1736.63 1211.36 L1737.22 1211.36 L1737.81 1211.36 L1738.39 1211.36 L1738.98 1211.36 L1739.57 1211.36 L1740.15 1211.36 L1740.74 1211.36 L1741.32 1211.36 L1741.91 1211.36 L1742.5 1211.36 L1743.08 1211.36 L1743.67 1211.36 L1744.26 1211.36 L1744.84 1211.36 L1745.43 1211.36 L1746.02 1211.36 L1746.6 1211.36 L1747.19 1211.36 L1747.78 1211.36 L1748.36 1211.36 L1748.95 1211.36 L1749.53 1211.36 L1750.12 1211.36 L1750.71 1211.36 L1751.29 1211.36 L1751.88 1211.36 L1752.47 1211.36 L1753.05 1211.36 L1753.64 1211.36 L1754.23 1211.36 L1754.81 1211.36 L1755.4 1211.36 L1755.99 1211.36 L1756.57 1211.36 L1757.16 1211.36 L1757.74 1211.36 L1758.33 1211.36 L1758.92 1211.36 L1759.5 1211.36 L1760.09 1211.36 L1760.68 1211.36 L1761.26 1211.36 L1761.85 1211.36 L1762.44 1211.36 L1763.02 1211.36 L1763.61 1211.36 L1764.19 1211.36 L1764.78 1211.36 L1765.37 1211.36 L1765.95 1211.36 L1766.54 1211.36 L1767.13 1211.36 L1767.71 1211.36 L1768.3 1211.36 L1768.89 1211.36 L1769.47 1211.36 L1770.06 1211.36 L1770.65 1211.36 L1771.23 1211.36 L1771.82 1211.36 L1772.4 1211.36 L1772.99 1211.36 L1773.58 1211.36 L1774.16 1211.36 L1774.75 1211.36 L1775.34 1211.36 L1775.92 1211.36 L1776.51 1211.36 L1777.1 1211.36 L1777.68 1211.36 L1778.27 1211.36 L1778.86 1211.36 L1779.44 1211.36 L1780.03 1211.36 L1780.61 1211.36 L1781.2 1211.36 L1781.79 1211.36 L1782.37 1211.36 L1782.96 1211.36 L1783.55 1211.36 L1784.13 1211.36 L1784.72 1211.36 L1785.31 1211.36 L1785.89 1211.36 L1786.48 1211.36 L1787.06 1211.36 L1787.65 1211.36 L1788.24 1211.36 L1788.82 1211.36 L1789.41 1211.36 L1790 1211.36 L1790.58 1211.36 L1791.17 1211.36 L1791.76 1211.36 L1792.34 1211.36 L1792.93 1211.36 L1793.52 1211.36 L1794.1 1211.36 L1794.69 1211.36 L1795.27 1211.36 L1795.86 1211.36 L1796.45 1211.36 L1797.03 1211.36 L1797.62 1211.36 L1798.21 1211.36 L1798.79 1211.36 L1799.38 1211.36 L1799.97 1211.36 L1800.55 1211.36 L1801.14 1211.36 L1801.73 1211.36 L1802.31 1211.36 L1802.9 1211.36 L1803.48 1211.36 L1804.07 1211.36 L1804.66 1211.36 L1805.24 1211.36 L1805.83 1211.36 L1806.42 1211.36 L1807 1211.36 L1807.59 1211.36 L1808.18 1211.36 L1808.76 1211.36 L1809.35 1211.36 L1809.94 1211.36 L1810.52 1211.36 L1811.11 1211.36 L1811.69 1211.36 L1812.28 1211.36 L1812.87 1211.36 L1813.45 1211.36 L1814.04 1211.36 L1814.63 1211.36 L1815.21 1211.36 L1815.8 1211.36 L1816.39 1211.36 L1816.97 1211.36 L1817.56 1211.36 L1818.14 1211.36 L1818.73 1211.36 L1819.32 1211.36 L1819.9 1211.36 L1820.49 1211.36 L1821.08 1211.36 L1821.66 1211.36 L1822.25 1211.36 L1822.84 1211.36 L1823.42 1211.36 L1824.01 1211.36 L1824.6 1211.36 L1825.18 1211.36 L1825.77 1211.36 L1826.35 1211.36 L1826.94 1211.36 L1827.53 1211.36 L1828.11 1211.36 L1828.7 1211.36 L1829.29 1211.36 L1829.87 1211.36 L1830.46 1211.36 L1831.05 1211.36 L1831.63 1211.36 L1832.22 1211.36 L1832.81 1211.36 L1833.39 1211.36 L1833.98 1211.36 L1834.56 1211.36 L1835.15 1211.36 L1835.74 1211.36 L1836.32 1211.36 L1836.91 1211.36 L1837.5 1211.36 L1838.08 1211.36 L1838.67 1211.36 L1839.26 1211.36 L1839.84 1211.36 L1840.43 1211.36 L1841.01 1211.36 L1841.6 1211.36 L1842.19 1211.36 L1842.77 1211.36 L1843.36 1211.36 L1843.95 1211.36 L1844.53 1211.36 L1845.12 1211.36 L1845.71 1211.36 L1846.29 1211.36 L1846.88 1211.36 L1847.47 1211.36 L1848.05 1211.36 L1848.64 1211.36 L1849.22 1211.36 L1849.81 1211.36 L1850.4 1211.36 L1850.98 1211.36 L1851.57 1211.36 L1852.16 1211.36 L1852.74 1211.36 L1853.33 1211.36 L1853.92 1211.36 L1854.5 1211.36 L1855.09 1211.36 L1855.68 1211.36 L1856.26 1211.36 L1856.85 1211.36 L1857.43 1211.36 L1858.02 1211.36 L1858.61 1211.36 L1859.19 1211.36 L1859.78 1211.36 L1860.37 1211.36 L1860.95 1211.36 L1861.54 1211.36 L1862.13 1211.36 L1862.71 1211.36 L1863.3 1211.36 L1863.88 1211.36 L1864.47 1211.36 L1865.06 1211.36 L1865.64 1211.36 L1866.23 1211.36 L1866.82 1211.36 L1867.4 1211.36 L1867.99 1211.36 L1868.58 1211.36 L1869.16 1211.36 L1869.75 1211.36 L1870.34 1211.36 L1870.92 1211.36 L1871.51 1211.36 L1872.09 1211.36 L1872.68 1211.36 L1873.27 1211.36 L1873.85 1211.36 L1874.44 1211.36 L1875.03 1211.36 L1875.61 1211.36 L1876.2 1211.36 L1876.79 1211.36 L1877.37 1211.36 L1877.96 1211.36 L1878.55 1211.36 L1879.13 1211.36 L1879.72 1211.36 L1880.3 1211.36 L1880.89 1211.36 L1881.48 1211.36 L1882.06 1211.36 L1882.65 1211.36 L1883.24 1211.36 L1883.82 1211.36 L1884.41 1211.36 L1885 1211.36 L1885.58 1211.36 L1886.17 1211.36 L1886.76 1211.36 L1887.34 1211.36 L1887.93 1211.36 L1888.51 1211.36 L1889.1 1211.36 L1889.69 1211.36 L1890.27 1211.36 L1890.86 1211.36 L1891.45 1211.36 L1892.03 1211.36 L1892.62 1211.36 L1893.21 1211.36 L1893.79 1211.36 L1894.38 1211.36 L1894.96 1211.36 L1895.55 1211.36 L1896.14 1211.36 L1896.72 1211.36 L1897.31 1211.36 L1897.9 1211.36 L1898.48 1211.36 L1899.07 1211.36 L1899.66 1211.36 L1900.24 1211.36 L1900.83 1211.36 L1901.42 1211.36 L1902 1211.36 L1902.59 1211.36 L1903.17 1211.36 L1903.76 1211.36 L1904.35 1211.36 L1904.93 1211.36 L1905.52 1211.36 L1906.11 1211.36 L1906.69 1211.36 L1907.28 1211.36 L1907.87 1211.36 L1908.45 1211.36 L1909.04 1211.36 L1909.63 1211.36 L1910.21 1211.36 L1910.8 1211.36 L1911.38 1211.36 L1911.97 1211.36 L1912.56 1211.36 L1913.14 1211.36 L1913.73 1211.36 L1914.32 1211.36 L1914.9 1211.36 L1915.49 1211.36 L1916.08 1211.36 L1916.66 1211.36 L1917.25 1211.36 L1917.83 1211.36 L1918.42 1211.36 L1919.01 1211.36 L1919.59 1211.36 L1920.18 1211.36 L1920.77 1211.36 L1921.35 1211.36 L1921.94 1211.36 L1922.53 1211.36 L1923.11 1211.36 L1923.7 1211.36 L1924.29 1211.36 L1924.87 1211.36 L1925.46 1211.36 L1926.04 1211.36 L1926.63 1211.36 L1927.22 1211.36 L1927.8 1211.36 L1928.39 1211.36 L1928.98 1211.36 L1929.56 1211.36 L1930.15 1211.36 L1930.74 1211.36 L1931.32 1211.36 L1931.91 1211.36 L1932.5 1211.36 L1933.08 1211.36 L1933.67 1211.36 L1934.25 1211.36 L1934.84 1211.36 L1935.43 1211.36 L1936.01 1211.36 L1936.6 1211.36 L1937.19 1211.36 L1937.77 1211.36 L1938.36 1211.36 L1938.95 1211.36 L1939.53 1211.36 L1940.12 1211.36 L1940.71 1211.36 L1941.29 1211.36 L1941.88 1211.36 L1942.46 1211.36 L1943.05 1211.36 L1943.64 1211.36 L1944.22 1211.36 L1944.81 1211.36 L1945.4 1211.36 L1945.98 1211.36 L1946.57 1211.36 L1947.16 1211.36 L1947.74 1211.36 L1948.33 1211.36 L1948.91 1211.36 L1949.5 1211.36 L1950.09 1211.36 L1950.67 1211.36 L1951.26 1211.36 L1951.85 1211.36 L1952.43 1211.36 L1953.02 1211.36 L1953.61 1211.36 L1954.19 1211.36 L1954.78 1211.36 L1955.37 1211.36 L1955.95 1211.36 L1956.54 1211.36 L1957.12 1211.36 L1957.71 1211.36 L1958.3 1211.36 L1958.88 1211.36 L1959.47 1211.36 L1960.06 1211.36 L1960.64 1211.36 L1961.23 1211.36 L1961.82 1211.36 L1962.4 1211.36 L1962.99 1211.36 L1963.58 1211.36 L1964.16 1211.36 L1964.75 1211.36 L1965.33 1211.36 L1965.92 1211.36 L1966.51 1211.36 L1967.09 1211.36 L1967.68 1211.36 L1968.27 1211.36 L1968.85 1211.36 L1969.44 1211.36 L1970.03 1211.36 L1970.61 1211.36 L1971.2 1211.36 L1971.78 1211.36 L1972.37 1211.36 L1972.96 1211.36 L1973.54 1211.36 L1974.13 1211.36 L1974.72 1211.36 L1975.3 1211.36 L1975.89 1211.36 L1976.48 1211.36 L1977.06 1211.36 L1977.65 1211.36 L1978.24 1211.36 L1978.82 1211.36 L1979.41 1211.36 L1979.99 1211.36 L1980.58 1211.36 L1981.17 1211.36 L1981.75 1211.36 L1982.34 1211.36 L1982.93 1211.36 L1983.51 1211.36 L1984.1 1211.36 L1984.69 1211.36 L1985.27 1211.36 L1985.86 1211.36 L1986.45 1211.36 L1987.03 1211.36 L1987.62 1211.36 L1988.2 1211.36 L1988.79 1211.36 L1989.38 1211.36 L1989.96 1211.36 L1990.55 1211.36 L1991.14 1211.36 L1991.72 1211.36 L1992.31 1211.36 L1992.9 1211.36 L1993.48 1211.36 L1994.07 1211.36 L1994.65 1211.36 L1995.24 1211.36 L1995.83 1211.36 L1996.41 1211.36 L1997 1211.36 L1997.59 1211.36 L1998.17 1211.36 L1998.76 1211.36 L1999.35 1211.36 L1999.93 1211.36 L2000.52 1211.36 L2001.11 1211.36 L2001.69 1211.36 L2002.28 1211.36 L2002.86 1211.36 L2003.45 1211.36 L2004.04 1211.36 L2004.62 1211.36 L2005.21 1211.36 L2005.8 1211.36 L2006.38 1211.36 L2006.97 1211.36 L2007.56 1211.36 L2008.14 1211.36 L2008.73 1211.36 L2009.32 1211.36 L2009.9 1211.36 L2010.49 1211.36 L2011.07 1211.36 L2011.66 1211.36 L2012.25 1211.36 L2012.83 1211.36 L2013.42 1211.36 L2014.01 1211.36 L2014.59 1211.36 L2015.18 1211.36 L2015.77 1211.36 L2016.35 1211.36 L2016.94 1211.36 L2017.53 1211.36 L2018.11 1211.36 L2018.7 1211.36 L2019.28 1211.36 L2019.87 1211.36 L2020.46 1211.36 L2021.04 1211.36 L2021.63 1211.36 L2022.22 1211.36 L2022.8 1211.36 L2023.39 1211.36 L2023.98 1211.36 L2024.56 1211.36 L2025.15 1211.36 L2025.73 1211.36 L2026.32 1211.36 L2026.91 1211.36 L2027.49 1211.36 L2028.08 1211.36 L2028.67 1211.36 L2029.25 1211.36 L2029.84 1211.36 L2030.43 1211.36 L2031.01 1211.36 L2031.6 1211.36 L2032.19 1211.36 L2032.77 1211.36 L2033.36 1211.36 L2033.94 1211.36 L2034.53 1211.36 L2035.12 1211.36 L2035.7 1211.36 L2036.29 1211.36 L2036.88 1211.36 L2037.46 1211.36 L2038.05 1211.36 L2038.64 1211.36 L2039.22 1211.36 L2039.81 1211.36 L2040.4 1211.36 L2040.98 1211.36 L2041.57 1211.36 L2042.15 1211.36 L2042.74 1211.36 L2043.33 1211.36 L2043.91 1211.36 L2044.5 1211.36 L2045.09 1211.36 L2045.67 1211.36 L2046.26 1211.36 L2046.85 1211.36 L2047.43 1211.36 L2048.02 1211.36 L2048.6 1211.36 L2049.19 1211.36 L2049.78 1211.36 L2050.36 1211.36 L2050.95 1211.36 L2051.54 1211.36 L2052.12 1211.36 L2052.71 1211.36 L2053.3 1211.36 L2053.88 1211.36 L2054.47 1211.36 L2055.06 1211.36 L2055.64 1211.36 L2056.23 1211.36 L2056.81 1211.36 L2057.4 1211.36 L2057.99 1211.36 L2058.57 1211.36 L2059.16 1211.36 L2059.75 1211.36 L2060.33 1211.36 L2060.92 1211.36 L2061.51 1211.36 L2062.09 1211.36 L2062.68 1211.36 L2063.27 1211.36 L2063.85 1211.36 L2064.44 1211.36 L2065.02 1211.36 L2065.61 1211.36 L2066.2 1211.36 L2066.78 1211.36 L2067.37 1211.36 L2067.96 1211.36 L2068.54 1211.36 L2069.13 1211.36 L2069.72 1211.36 L2070.3 1211.36 L2070.89 1211.36 L2071.48 1211.36 L2072.06 1211.36 L2072.65 1211.36 L2073.23 1211.36 L2073.82 1211.36 L2074.41 1211.36 L2074.99 1211.36 L2075.58 1211.36 L2076.17 1211.36 L2076.75 1211.36 L2077.34 1211.36 L2077.93 1211.36 L2078.51 1211.36 L2079.1 1211.36 L2079.68 1211.36 L2080.27 1211.36 L2080.86 1211.36 L2081.44 1211.36 L2082.03 1211.36 L2082.62 1211.36 L2083.2 1211.36 L2083.79 1211.36 L2084.38 1211.36 L2084.96 1211.36 L2085.55 1211.36 L2086.14 1211.36 L2086.72 1211.36 L2087.31 1211.36 L2087.89 1211.36 L2088.48 1211.36 L2089.07 1211.36 L2089.65 1211.36 L2090.24 1211.36 L2090.83 1211.36 L2091.41 1211.36 L2092 1211.36 L2092.59 1211.36 L2093.17 1211.36 L2093.76 1211.36 L2094.35 1211.36 L2094.93 1211.36 L2095.52 1211.36 L2096.1 1211.36 L2096.69 1211.36 L2097.28 1211.36 L2097.86 1211.36 L2098.45 1211.36 L2099.04 1211.36 L2099.62 1211.36 L2100.21 1211.36 L2100.8 1211.36 L2101.38 1211.36 L2101.97 1211.36 L2102.55 1211.36 L2103.14 1211.36 L2103.73 1211.36 L2104.31 1211.36 L2104.9 1211.36 L2105.49 1211.36 L2106.07 1211.36 L2106.66 1211.36 L2107.25 1211.36 L2107.83 1211.36 L2108.42 1211.36 L2109.01 1211.36 L2109.59 1211.36 L2110.18 1211.36 L2110.76 1211.36 L2111.35 1211.36 L2111.94 1211.36 L2112.52 1211.36 L2113.11 1211.36 L2113.7 1211.36 L2114.28 1211.36 L2114.87 1211.36 L2115.46 1211.36 L2116.04 1211.36 L2116.63 1211.36 L2117.22 1211.36 L2117.8 1211.36 L2118.39 1211.36 L2118.97 1211.36 L2119.56 1211.36 L2120.15 1211.36 L2120.73 1211.36 L2121.32 1211.36 L2121.91 1211.36 L2122.49 1211.36 L2123.08 1211.36 L2123.67 1211.36 L2124.25 1211.36 L2124.84 1211.36 L2125.42 1211.36 L2126.01 1211.36 L2126.6 1211.36 L2127.18 1211.36 L2127.77 1211.36 L2128.36 1211.36 L2128.94 1211.36 L2129.53 1211.36 L2130.12 1211.36 L2130.7 1211.36 L2131.29 1211.36 L2131.88 1211.36 L2132.46 1211.36 L2133.05 1211.36 L2133.63 1211.36 L2134.22 1211.36 L2134.81 1211.36 L2135.39 1211.36 L2135.98 1211.36 L2136.57 1211.36 L2137.15 1211.36 L2137.74 1211.36 L2138.33 1211.36 L2138.91 1211.36 L2139.5 1211.36 L2140.09 1211.36 L2140.67 1211.36 L2141.26 1211.36 L2141.84 1211.36 L2142.43 1211.36 L2143.02 1211.36 L2143.6 1211.36 L2144.19 1211.36 L2144.78 1211.36 L2145.36 1211.36 L2145.95 1211.36 L2146.54 1211.36 L2147.12 1211.36 L2147.71 1211.36 L2148.3 1211.36 L2148.88 1211.36 L2149.47 1211.36 L2150.05 1211.36 L2150.64 1211.36 L2151.23 1211.36 L2151.81 1211.36 L2152.4 1211.36 L2152.99 1211.36 L2153.57 1211.36 L2154.16 1211.36 L2154.75 1211.36 L2155.33 1211.36 L2155.92 1211.36 L2156.5 1211.36 L2157.09 1211.36 L2157.68 1211.36 L2158.26 1211.36 L2158.26 1211.19 L2157.68 1211.19 L2157.09 1211.19 L2156.5 1211.19 L2155.92 1211.19 L2155.33 1211.19 L2154.75 1211.19 L2154.16 1211.19 L2153.57 1211.19 L2152.99 1211.19 L2152.4 1211.19 L2151.81 1211.19 L2151.23 1211.19 L2150.64 1211.19 L2150.05 1211.19 L2149.47 1211.19 L2148.88 1211.19 L2148.3 1211.19 L2147.71 1211.19 L2147.12 1211.19 L2146.54 1211.19 L2145.95 1211.19 L2145.36 1211.19 L2144.78 1211.19 L2144.19 1211.19 L2143.6 1211.19 L2143.02 1211.19 L2142.43 1211.19 L2141.84 1211.19 L2141.26 1211.19 L2140.67 1211.19 L2140.09 1211.19 L2139.5 1211.19 L2138.91 1211.19 L2138.33 1211.19 L2137.74 1211.19 L2137.15 1211.19 L2136.57 1211.19 L2135.98 1211.19 L2135.39 1211.19 L2134.81 1211.19 L2134.22 1211.19 L2133.63 1211.19 L2133.05 1211.19 L2132.46 1211.19 L2131.88 1211.19 L2131.29 1211.19 L2130.7 1211.19 L2130.12 1211.19 L2129.53 1211.19 L2128.94 1211.19 L2128.36 1211.19 L2127.77 1211.19 L2127.18 1211.19 L2126.6 1211.19 L2126.01 1211.19 L2125.42 1211.19 L2124.84 1211.19 L2124.25 1211.19 L2123.67 1211.19 L2123.08 1211.19 L2122.49 1211.19 L2121.91 1211.19 L2121.32 1211.19 L2120.73 1211.19 L2120.15 1211.19 L2119.56 1211.19 L2118.97 1211.19 L2118.39 1211.19 L2117.8 1211.19 L2117.22 1211.19 L2116.63 1211.19 L2116.04 1211.19 L2115.46 1211.19 L2114.87 1211.19 L2114.28 1211.19 L2113.7 1211.19 L2113.11 1211.19 L2112.52 1211.19 L2111.94 1211.19 L2111.35 1211.19 L2110.76 1211.19 L2110.18 1211.19 L2109.59 1211.19 L2109.01 1211.19 L2108.42 1211.19 L2107.83 1211.19 L2107.25 1211.19 L2106.66 1211.19 L2106.07 1211.19 L2105.49 1211.19 L2104.9 1211.19 L2104.31 1211.19 L2103.73 1211.19 L2103.14 1211.19 L2102.55 1211.19 L2101.97 1211.19 L2101.38 1211.19 L2100.8 1211.19 L2100.21 1211.19 L2099.62 1211.19 L2099.04 1211.19 L2098.45 1211.19 L2097.86 1211.19 L2097.28 1211.19 L2096.69 1211.19 L2096.1 1211.19 L2095.52 1211.19 L2094.93 1211.19 L2094.35 1211.19 L2093.76 1211.19 L2093.17 1211.19 L2092.59 1211.19 L2092 1211.19 L2091.41 1211.19 L2090.83 1211.19 L2090.24 1211.19 L2089.65 1211.19 L2089.07 1211.19 L2088.48 1211.19 L2087.89 1211.19 L2087.31 1211.19 L2086.72 1211.19 L2086.14 1211.19 L2085.55 1211.19 L2084.96 1211.19 L2084.38 1211.19 L2083.79 1211.19 L2083.2 1211.19 L2082.62 1211.19 L2082.03 1211.19 L2081.44 1211.19 L2080.86 1211.19 L2080.27 1211.19 L2079.68 1211.19 L2079.1 1211.19 L2078.51 1211.19 L2077.93 1211.19 L2077.34 1211.19 L2076.75 1211.19 L2076.17 1211.19 L2075.58 1211.19 L2074.99 1211.19 L2074.41 1211.19 L2073.82 1211.19 L2073.23 1211.19 L2072.65 1211.19 L2072.06 1211.19 L2071.48 1211.19 L2070.89 1211.19 L2070.3 1211.19 L2069.72 1211.19 L2069.13 1211.19 L2068.54 1211.19 L2067.96 1211.19 L2067.37 1211.19 L2066.78 1211.19 L2066.2 1211.19 L2065.61 1211.19 L2065.02 1211.19 L2064.44 1211.19 L2063.85 1211.19 L2063.27 1211.19 L2062.68 1211.19 L2062.09 1211.19 L2061.51 1211.19 L2060.92 1211.19 L2060.33 1211.19 L2059.75 1211.19 L2059.16 1211.19 L2058.57 1211.19 L2057.99 1211.19 L2057.4 1211.19 L2056.81 1211.19 L2056.23 1211.19 L2055.64 1211.19 L2055.06 1211.19 L2054.47 1211.19 L2053.88 1211.19 L2053.3 1211.19 L2052.71 1211.19 L2052.12 1211.19 L2051.54 1211.19 L2050.95 1211.19 L2050.36 1211.19 L2049.78 1211.19 L2049.19 1211.19 L2048.6 1211.19 L2048.02 1211.19 L2047.43 1211.19 L2046.85 1211.19 L2046.26 1211.19 L2045.67 1211.19 L2045.09 1211.19 L2044.5 1211.19 L2043.91 1211.19 L2043.33 1211.19 L2042.74 1211.19 L2042.15 1211.19 L2041.57 1211.19 L2040.98 1211.19 L2040.4 1211.19 L2039.81 1211.19 L2039.22 1211.19 L2038.64 1211.19 L2038.05 1211.19 L2037.46 1211.19 L2036.88 1211.19 L2036.29 1211.19 L2035.7 1211.19 L2035.12 1211.19 L2034.53 1211.19 L2033.94 1211.19 L2033.36 1211.19 L2032.77 1211.19 L2032.19 1211.19 L2031.6 1211.19 L2031.01 1211.19 L2030.43 1211.19 L2029.84 1211.19 L2029.25 1211.19 L2028.67 1211.19 L2028.08 1211.19 L2027.49 1211.19 L2026.91 1211.19 L2026.32 1211.19 L2025.73 1211.19 L2025.15 1211.19 L2024.56 1211.19 L2023.98 1211.19 L2023.39 1211.19 L2022.8 1211.19 L2022.22 1211.19 L2021.63 1211.19 L2021.04 1211.19 L2020.46 1211.19 L2019.87 1211.19 L2019.28 1211.19 L2018.7 1211.19 L2018.11 1211.19 L2017.53 1211.19 L2016.94 1211.19 L2016.35 1211.19 L2015.77 1211.19 L2015.18 1211.19 L2014.59 1211.19 L2014.01 1211.19 L2013.42 1211.19 L2012.83 1211.19 L2012.25 1211.19 L2011.66 1211.19 L2011.07 1211.19 L2010.49 1211.19 L2009.9 1211.19 L2009.32 1211.19 L2008.73 1211.19 L2008.14 1211.19 L2007.56 1211.19 L2006.97 1211.19 L2006.38 1211.19 L2005.8 1211.19 L2005.21 1211.19 L2004.62 1211.19 L2004.04 1211.19 L2003.45 1211.19 L2002.86 1211.19 L2002.28 1211.19 L2001.69 1211.19 L2001.11 1211.19 L2000.52 1211.19 L1999.93 1211.19 L1999.35 1211.19 L1998.76 1211.19 L1998.17 1211.19 L1997.59 1211.19 L1997 1211.19 L1996.41 1211.19 L1995.83 1211.19 L1995.24 1211.19 L1994.65 1211.19 L1994.07 1211.19 L1993.48 1211.19 L1992.9 1211.19 L1992.31 1211.19 L1991.72 1211.19 L1991.14 1211.19 L1990.55 1211.19 L1989.96 1211.19 L1989.38 1211.19 L1988.79 1211.19 L1988.2 1211.19 L1987.62 1211.19 L1987.03 1211.19 L1986.45 1211.19 L1985.86 1211.19 L1985.27 1211.19 L1984.69 1211.19 L1984.1 1211.19 L1983.51 1211.19 L1982.93 1211.19 L1982.34 1211.19 L1981.75 1211.19 L1981.17 1211.19 L1980.58 1211.19 L1979.99 1211.19 L1979.41 1211.19 L1978.82 1211.19 L1978.24 1211.19 L1977.65 1211.19 L1977.06 1211.19 L1976.48 1211.19 L1975.89 1211.19 L1975.3 1211.19 L1974.72 1211.19 L1974.13 1211.19 L1973.54 1211.19 L1972.96 1211.19 L1972.37 1211.19 L1971.78 1211.19 L1971.2 1211.19 L1970.61 1211.19 L1970.03 1211.19 L1969.44 1211.19 L1968.85 1211.19 L1968.27 1211.19 L1967.68 1211.19 L1967.09 1211.19 L1966.51 1211.19 L1965.92 1211.19 L1965.33 1211.19 L1964.75 1211.19 L1964.16 1211.19 L1963.58 1211.19 L1962.99 1211.19 L1962.4 1211.19 L1961.82 1211.19 L1961.23 1211.19 L1960.64 1211.19 L1960.06 1211.19 L1959.47 1211.19 L1958.88 1211.19 L1958.3 1211.19 L1957.71 1211.19 L1957.12 1211.19 L1956.54 1211.19 L1955.95 1211.19 L1955.37 1211.19 L1954.78 1211.19 L1954.19 1211.19 L1953.61 1211.19 L1953.02 1211.19 L1952.43 1211.19 L1951.85 1211.19 L1951.26 1211.19 L1950.67 1211.19 L1950.09 1211.19 L1949.5 1211.19 L1948.91 1211.19 L1948.33 1211.19 L1947.74 1211.19 L1947.16 1211.19 L1946.57 1211.19 L1945.98 1211.19 L1945.4 1211.19 L1944.81 1211.19 L1944.22 1211.19 L1943.64 1211.19 L1943.05 1211.19 L1942.46 1211.19 L1941.88 1211.19 L1941.29 1211.19 L1940.71 1211.19 L1940.12 1211.19 L1939.53 1211.19 L1938.95 1211.19 L1938.36 1211.19 L1937.77 1211.19 L1937.19 1211.19 L1936.6 1211.19 L1936.01 1211.19 L1935.43 1211.19 L1934.84 1211.19 L1934.25 1211.19 L1933.67 1211.19 L1933.08 1211.19 L1932.5 1211.19 L1931.91 1211.19 L1931.32 1211.19 L1930.74 1211.19 L1930.15 1211.19 L1929.56 1211.19 L1928.98 1211.19 L1928.39 1211.19 L1927.8 1211.19 L1927.22 1211.19 L1926.63 1211.19 L1926.04 1211.19 L1925.46 1211.19 L1924.87 1211.19 L1924.29 1211.19 L1923.7 1211.19 L1923.11 1211.19 L1922.53 1211.19 L1921.94 1211.19 L1921.35 1211.19 L1920.77 1211.19 L1920.18 1211.19 L1919.59 1211.19 L1919.01 1211.19 L1918.42 1211.19 L1917.83 1211.19 L1917.25 1211.19 L1916.66 1211.19 L1916.08 1211.19 L1915.49 1211.19 L1914.9 1211.19 L1914.32 1211.19 L1913.73 1211.19 L1913.14 1211.19 L1912.56 1211.19 L1911.97 1211.19 L1911.38 1211.19 L1910.8 1211.19 L1910.21 1211.19 L1909.63 1211.19 L1909.04 1211.19 L1908.45 1211.19 L1907.87 1211.19 L1907.28 1211.19 L1906.69 1211.19 L1906.11 1211.19 L1905.52 1211.19 L1904.93 1211.19 L1904.35 1211.19 L1903.76 1211.19 L1903.17 1211.19 L1902.59 1211.19 L1902 1211.19 L1901.42 1211.19 L1900.83 1211.19 L1900.24 1211.19 L1899.66 1211.19 L1899.07 1211.19 L1898.48 1211.19 L1897.9 1211.19 L1897.31 1211.19 L1896.72 1211.19 L1896.14 1211.19 L1895.55 1211.19 L1894.96 1211.19 L1894.38 1211.19 L1893.79 1211.19 L1893.21 1211.19 L1892.62 1211.19 L1892.03 1211.19 L1891.45 1211.19 L1890.86 1211.19 L1890.27 1211.19 L1889.69 1211.19 L1889.1 1211.19 L1888.51 1211.19 L1887.93 1211.19 L1887.34 1211.19 L1886.76 1211.19 L1886.17 1211.19 L1885.58 1211.19 L1885 1211.19 L1884.41 1211.19 L1883.82 1211.19 L1883.24 1211.19 L1882.65 1211.19 L1882.06 1211.19 L1881.48 1211.19 L1880.89 1211.19 L1880.3 1211.19 L1879.72 1211.19 L1879.13 1211.19 L1878.55 1211.19 L1877.96 1211.19 L1877.37 1211.19 L1876.79 1211.19 L1876.2 1211.19 L1875.61 1211.19 L1875.03 1211.19 L1874.44 1211.19 L1873.85 1211.19 L1873.27 1211.19 L1872.68 1211.19 L1872.09 1211.19 L1871.51 1211.19 L1870.92 1211.19 L1870.34 1211.19 L1869.75 1211.19 L1869.16 1211.19 L1868.58 1211.19 L1867.99 1211.19 L1867.4 1211.19 L1866.82 1211.19 L1866.23 1211.19 L1865.64 1211.19 L1865.06 1211.19 L1864.47 1211.19 L1863.88 1211.19 L1863.3 1211.19 L1862.71 1211.19 L1862.13 1211.19 L1861.54 1211.19 L1860.95 1211.19 L1860.37 1211.19 L1859.78 1211.19 L1859.19 1211.19 L1858.61 1211.19 L1858.02 1211.19 L1857.43 1211.19 L1856.85 1211.19 L1856.26 1211.19 L1855.68 1211.19 L1855.09 1211.19 L1854.5 1211.19 L1853.92 1211.19 L1853.33 1211.19 L1852.74 1211.19 L1852.16 1211.19 L1851.57 1211.19 L1850.98 1211.19 L1850.4 1211.19 L1849.81 1211.19 L1849.22 1211.19 L1848.64 1211.19 L1848.05 1211.19 L1847.47 1211.19 L1846.88 1211.19 L1846.29 1211.19 L1845.71 1211.19 L1845.12 1211.19 L1844.53 1211.19 L1843.95 1211.19 L1843.36 1211.19 L1842.77 1211.19 L1842.19 1211.19 L1841.6 1211.19 L1841.01 1211.19 L1840.43 1211.19 L1839.84 1211.19 L1839.26 1211.19 L1838.67 1211.19 L1838.08 1211.19 L1837.5 1211.19 L1836.91 1211.19 L1836.32 1211.19 L1835.74 1211.19 L1835.15 1211.19 L1834.56 1211.19 L1833.98 1211.19 L1833.39 1211.19 L1832.81 1211.19 L1832.22 1211.19 L1831.63 1211.19 L1831.05 1211.19 L1830.46 1211.19 L1829.87 1211.19 L1829.29 1211.19 L1828.7 1211.19 L1828.11 1211.19 L1827.53 1211.19 L1826.94 1211.19 L1826.35 1211.19 L1825.77 1211.19 L1825.18 1211.19 L1824.6 1211.19 L1824.01 1211.19 L1823.42 1211.19 L1822.84 1211.19 L1822.25 1211.19 L1821.66 1211.19 L1821.08 1211.19 L1820.49 1211.19 L1819.9 1211.19 L1819.32 1211.19 L1818.73 1211.19 L1818.14 1211.19 L1817.56 1211.19 L1816.97 1211.19 L1816.39 1211.19 L1815.8 1211.19 L1815.21 1211.19 L1814.63 1211.19 L1814.04 1211.19 L1813.45 1211.19 L1812.87 1211.19 L1812.28 1211.19 L1811.69 1211.19 L1811.11 1211.19 L1810.52 1211.19 L1809.94 1211.19 L1809.35 1211.19 L1808.76 1211.19 L1808.18 1211.19 L1807.59 1211.19 L1807 1211.19 L1806.42 1211.19 L1805.83 1211.19 L1805.24 1211.19 L1804.66 1211.19 L1804.07 1211.19 L1803.48 1211.19 L1802.9 1211.19 L1802.31 1211.19 L1801.73 1211.19 L1801.14 1211.19 L1800.55 1211.19 L1799.97 1211.19 L1799.38 1211.19 L1798.79 1211.19 L1798.21 1211.19 L1797.62 1211.19 L1797.03 1211.19 L1796.45 1211.19 L1795.86 1211.19 L1795.27 1211.19 L1794.69 1211.19 L1794.1 1211.19 L1793.52 1211.19 L1792.93 1211.19 L1792.34 1211.19 L1791.76 1211.19 L1791.17 1211.19 L1790.58 1211.19 L1790 1211.19 L1789.41 1211.19 L1788.82 1211.19 L1788.24 1211.19 L1787.65 1211.19 L1787.06 1211.19 L1786.48 1211.19 L1785.89 1211.19 L1785.31 1211.19 L1784.72 1211.19 L1784.13 1211.19 L1783.55 1211.19 L1782.96 1211.19 L1782.37 1211.19 L1781.79 1211.19 L1781.2 1211.19 L1780.61 1211.19 L1780.03 1211.19 L1779.44 1211.19 L1778.86 1211.19 L1778.27 1211.19 L1777.68 1211.19 L1777.1 1211.19 L1776.51 1211.19 L1775.92 1211.19 L1775.34 1211.19 L1774.75 1211.19 L1774.16 1211.19 L1773.58 1211.19 L1772.99 1211.19 L1772.4 1211.19 L1771.82 1211.19 L1771.23 1211.19 L1770.65 1211.19 L1770.06 1211.19 L1769.47 1211.19 L1768.89 1211.19 L1768.3 1211.19 L1767.71 1211.19 L1767.13 1211.19 L1766.54 1211.19 L1765.95 1211.19 L1765.37 1211.19 L1764.78 1211.19 L1764.19 1211.19 L1763.61 1211.19 L1763.02 1211.19 L1762.44 1211.19 L1761.85 1211.19 L1761.26 1211.19 L1760.68 1211.19 L1760.09 1211.19 L1759.5 1211.19 L1758.92 1211.19 L1758.33 1211.19 L1757.74 1211.19 L1757.16 1211.19 L1756.57 1211.19 L1755.99 1211.19 L1755.4 1211.19 L1754.81 1211.19 L1754.23 1211.19 L1753.64 1211.19 L1753.05 1211.19 L1752.47 1211.19 L1751.88 1211.19 L1751.29 1211.19 L1750.71 1211.19 L1750.12 1211.19 L1749.53 1211.19 L1748.95 1211.19 L1748.36 1211.19 L1747.78 1211.19 L1747.19 1211.19 L1746.6 1211.19 L1746.02 1211.19 L1745.43 1211.19 L1744.84 1211.19 L1744.26 1211.19 L1743.67 1211.19 L1743.08 1211.19 L1742.5 1211.19 L1741.91 1211.19 L1741.32 1211.19 L1740.74 1211.19 L1740.15 1211.19 L1739.57 1211.19 L1738.98 1211.19 L1738.39 1211.19 L1737.81 1211.19 L1737.22 1211.19 L1736.63 1211.19 L1736.05 1211.19 L1735.46 1211.19 L1734.87 1211.19 L1734.29 1211.19 L1733.7 1211.19 L1733.11 1211.19 L1732.53 1211.19 L1731.94 1211.19 L1731.36 1211.19 L1730.77 1211.19 L1730.18 1211.19 L1729.6 1211.19 L1729.01 1211.19 L1728.42 1211.19 L1727.84 1211.19 L1727.25 1211.19 L1726.66 1211.19 L1726.08 1211.19 L1725.49 1211.19 L1724.91 1211.19 L1724.32 1211.19 L1723.73 1211.19 L1723.15 1211.19 L1722.56 1211.19 L1721.97 1211.19 L1721.39 1211.19 L1720.8 1211.19 L1720.21 1211.19 L1719.63 1211.19 L1719.04 1211.19 L1718.45 1211.19 L1717.87 1211.19 L1717.28 1211.19 L1716.7 1211.19 L1716.11 1211.19 L1715.52 1211.19 L1714.94 1211.19 L1714.35 1211.19 L1713.76 1211.19 L1713.18 1211.19 L1712.59 1211.19 L1712 1211.19 L1711.42 1211.19 L1710.83 1211.19 L1710.24 1211.19 L1709.66 1211.19 L1709.07 1211.19 L1708.49 1211.19 L1707.9 1211.19 L1707.31 1211.19 L1706.73 1211.19 L1706.14 1211.19 L1705.55 1211.19 L1704.97 1211.19 L1704.38 1211.19 L1703.79 1211.19 L1703.21 1211.19 L1702.62 1211.19 L1702.04 1211.19 L1701.45 1211.19 L1700.86 1211.19 L1700.28 1211.19 L1699.69 1211.19 L1699.1 1211.19 L1698.52 1211.19 L1697.93 1211.19 L1697.34 1211.19 L1696.76 1211.19 L1696.17 1211.19 L1695.58 1211.19 L1695 1211.19 L1694.41 1211.19 L1693.83 1211.19 L1693.24 1211.19 L1692.65 1211.19 L1692.07 1211.19 L1691.48 1211.19 L1690.89 1211.19 L1690.31 1211.19 L1689.72 1211.19 L1689.13 1211.19 L1688.55 1211.19 L1687.96 1211.19 L1687.37 1211.19 L1686.79 1211.19 L1686.2 1211.19 L1685.62 1211.19 L1685.03 1211.19 L1684.44 1211.19 L1683.86 1211.19 L1683.27 1211.19 L1682.68 1211.19 L1682.1 1211.19 L1681.51 1211.19 L1680.92 1211.19 L1680.34 1211.19 L1679.75 1211.19 L1679.17 1211.19 L1678.58 1211.19 L1677.99 1211.19 L1677.41 1211.19 L1676.82 1211.19 L1676.23 1211.19 L1675.65 1211.19 L1675.06 1211.19 L1674.47 1211.19 L1673.89 1211.19 L1673.3 1211.19 L1672.71 1211.19 L1672.13 1211.19 L1671.54 1211.19 L1670.96 1211.19 L1670.37 1211.19 L1669.78 1211.19 L1669.2 1211.19 L1668.61 1211.19 L1668.02 1211.19 L1667.44 1211.19 L1666.85 1211.19 L1666.26 1211.19 L1665.68 1211.19 L1665.09 1211.19 L1664.5 1211.19 L1663.92 1211.19 L1663.33 1211.19 L1662.75 1211.19 L1662.16 1211.19 L1661.57 1211.19 L1660.99 1211.19 L1660.4 1211.19 L1659.81 1211.19 L1659.23 1211.19 L1658.64 1211.19 L1658.05 1211.19 L1657.47 1211.19 L1656.88 1211.19 L1656.29 1211.19 L1655.71 1211.19 L1655.12 1211.19 L1654.54 1211.19 L1653.95 1211.19 L1653.36 1211.19 L1652.78 1211.19 L1652.19 1211.19 L1651.6 1211.19 L1651.02 1211.19 L1650.43 1211.19 L1649.84 1211.19 L1649.26 1211.19 L1648.67 1211.19 L1648.09 1211.19 L1647.5 1211.19 L1646.91 1211.19 L1646.33 1211.19 L1645.74 1211.19 L1645.15 1211.19 L1644.57 1211.19 L1643.98 1211.19 L1643.39 1211.19 L1642.81 1211.19 L1642.22 1211.19 L1641.63 1211.19 L1641.05 1211.19 L1640.46 1211.19 L1639.88 1211.19 L1639.29 1211.19 L1638.7 1211.19 L1638.12 1211.19 L1637.53 1211.19 L1636.94 1211.19 L1636.36 1211.19 L1635.77 1211.19 L1635.18 1211.19 L1634.6 1211.19 L1634.01 1211.19 L1633.42 1211.19 L1632.84 1211.19 L1632.25 1211.19 L1631.67 1211.19 L1631.08 1211.19 L1630.49 1211.19 L1629.91 1211.19 L1629.32 1211.19 L1628.73 1211.19 L1628.15 1211.19 L1627.56 1211.19 L1626.97 1211.19 L1626.39 1211.19 L1625.8 1211.19 L1625.22 1211.19 L1624.63 1211.19 L1624.04 1211.19 L1623.46 1211.19 L1622.87 1211.19 L1622.28 1211.19 L1621.7 1211.19 L1621.11 1211.19 L1620.52 1211.19 L1619.94 1211.19 L1619.35 1211.19 L1618.76 1211.19 L1618.18 1211.19 L1617.59 1211.19 L1617.01 1211.19 L1616.42 1211.19 L1615.83 1211.19 L1615.25 1211.19 L1614.66 1211.19 L1614.07 1211.19 L1613.49 1211.19 L1612.9 1211.19 L1612.31 1211.19 L1611.73 1211.19 L1611.14 1211.19 L1610.55 1211.19 L1609.97 1211.19 L1609.38 1211.19 L1608.8 1211.19 L1608.21 1211.19 L1607.62 1211.19 L1607.04 1211.19 L1606.45 1211.19 L1605.86 1211.19 L1605.28 1211.19 L1604.69 1211.19 L1604.1 1211.19 L1603.52 1211.19 L1602.93 1211.19 L1602.34 1211.19 L1601.76 1211.19 L1601.17 1211.19 L1600.59 1211.19 L1600 1211.19 L1599.41 1211.19 L1598.83 1211.19 L1598.24 1211.19 L1597.65 1211.19 L1597.07 1211.19 L1596.48 1211.19 L1595.89 1211.19 L1595.31 1211.19 L1594.72 1211.19 L1594.14 1211.19 L1593.55 1211.19 L1592.96 1211.19 L1592.38 1211.19 L1591.79 1211.19 L1591.2 1211.19 L1590.62 1211.19 L1590.03 1211.19 L1589.44 1211.19 L1588.86 1211.19 L1588.27 1211.19 L1587.68 1211.19 L1587.1 1211.19 L1586.51 1211.19 L1585.93 1211.19 L1585.34 1211.19 L1584.75 1211.19 L1584.17 1211.19 L1583.58 1211.19 L1582.99 1211.19 L1582.41 1211.19 L1581.82 1211.19 L1581.23 1211.19 L1580.65 1211.19 L1580.06 1211.19 L1579.47 1211.19 L1578.89 1211.19 L1578.3 1211.19 L1577.72 1211.19 L1577.13 1211.19 L1576.54 1211.19 L1575.96 1211.19 L1575.37 1211.19 L1574.78 1211.19 L1574.2 1211.19 L1573.61 1211.19 L1573.02 1211.19 L1572.44 1211.19 L1571.85 1211.19 L1571.27 1211.19 L1570.68 1211.19 L1570.09 1211.19 L1569.51 1211.19 L1568.92 1211.19 L1568.33 1211.19 L1567.75 1211.19 L1567.16 1211.19 L1566.57 1211.19 L1565.99 1211.19 L1565.4 1211.19 L1564.81 1211.19 L1564.23 1211.19 L1563.64 1211.19 L1563.06 1211.19 L1562.47 1211.19 L1561.88 1211.19 L1561.3 1211.19 L1560.71 1211.19 L1560.12 1211.19 L1559.54 1211.19 L1558.95 1211.19 L1558.36 1211.19 L1557.78 1211.19 L1557.19 1211.19 L1556.6 1211.19 L1556.02 1211.19 L1555.43 1211.19 L1554.85 1211.19 L1554.26 1211.19 L1553.67 1211.19 L1553.09 1211.19 L1552.5 1211.19 L1551.91 1211.19 L1551.33 1211.19 L1550.74 1211.19 L1550.15 1211.19 L1549.57 1211.19 L1548.98 1211.19 L1548.4 1211.19 L1547.81 1211.19 L1547.22 1211.19 L1546.64 1211.19 L1546.05 1211.19 L1545.46 1211.19 L1544.88 1211.19 L1544.29 1211.19 L1543.7 1211.19 L1543.12 1211.19 L1542.53 1211.19 L1541.94 1211.19 L1541.36 1211.19 L1540.77 1211.19 L1540.19 1211.19 L1539.6 1211.19 L1539.01 1211.19 L1538.43 1211.19 L1537.84 1211.19 L1537.25 1211.19 L1536.67 1211.19 L1536.08 1211.19 L1535.49 1211.19 L1534.91 1211.19 L1534.32 1211.19 L1533.73 1211.19 L1533.15 1211.19 L1532.56 1211.19 L1531.98 1211.19 L1531.39 1211.19 L1530.8 1211.19 L1530.22 1211.19 L1529.63 1211.19 L1529.04 1211.19 L1528.46 1211.19 L1527.87 1211.19 L1527.28 1211.19 L1526.7 1211.19 L1526.11 1211.19 L1525.52 1211.19 L1524.94 1211.19 L1524.35 1211.19 L1523.77 1211.19 L1523.18 1211.19 L1522.59 1211.19 L1522.01 1211.19 L1521.42 1211.19 L1520.83 1211.19 L1520.25 1211.19 L1519.66 1211.19 L1519.07 1211.19 L1518.49 1211.19 L1517.9 1211.19 L1517.32 1211.19 L1516.73 1211.19 L1516.14 1211.19 L1515.56 1211.19 L1514.97 1211.19 L1514.38 1211.19 L1513.8 1211.19 L1513.21 1211.19 L1512.62 1211.19 L1512.04 1211.19 L1511.45 1211.19 L1510.86 1211.19 L1510.28 1211.19 L1509.69 1211.19 L1509.11 1211.19 L1508.52 1211.19 L1507.93 1211.19 L1507.35 1211.19 L1506.76 1211.19 L1506.17 1211.19 L1505.59 1211.19 L1505 1211.19 L1504.41 1211.19 L1503.83 1211.19 L1503.24 1211.19 L1502.65 1211.19 L1502.07 1211.19 L1501.48 1211.19 L1500.9 1211.19 L1500.31 1211.19 L1499.72 1211.19 L1499.14 1211.19 L1498.55 1211.19 L1497.96 1211.19 L1497.38 1211.19 L1496.79 1211.19 L1496.2 1211.19 L1495.62 1211.19 L1495.03 1211.19 L1494.45 1211.19 L1493.86 1211.19 L1493.27 1211.19 L1492.69 1211.19 L1492.1 1211.19 L1491.51 1211.19 L1490.93 1211.19 L1490.34 1211.19 L1489.75 1211.19 L1489.17 1211.19 L1488.58 1211.19 L1487.99 1211.19 L1487.41 1211.19 L1486.82 1211.19 L1486.24 1211.19 L1485.65 1211.19 L1485.06 1211.19 L1484.48 1211.19 L1483.89 1211.19 L1483.3 1211.19 L1482.72 1211.19 L1482.13 1211.19 L1481.54 1211.19 L1480.96 1211.19 L1480.37 1211.19 L1479.78 1211.19 L1479.2 1211.19 L1478.61 1211.19 L1478.03 1211.19 L1477.44 1211.19 L1476.85 1211.19 L1476.27 1211.19 L1475.68 1211.19 L1475.09 1211.19 L1474.51 1211.19 L1473.92 1211.19 L1473.33 1211.19 L1472.75 1211.19 L1472.16 1211.19 L1471.57 1211.19 L1470.99 1211.19 L1470.4 1211.19 L1469.82 1211.19 L1469.23 1211.19 L1468.64 1211.19 L1468.06 1211.19 L1467.47 1211.19 L1466.88 1211.19 L1466.3 1211.19 L1465.71 1211.19 L1465.12 1211.19 L1464.54 1211.19 L1463.95 1211.19 L1463.37 1211.19 L1462.78 1211.19 L1462.19 1211.19 L1461.61 1211.19 L1461.02 1211.19 L1460.43 1211.19 L1459.85 1211.19 L1459.26 1211.19 L1458.67 1211.19 L1458.09 1211.19 L1457.5 1211.19 L1456.91 1211.19 L1456.33 1211.19 L1455.74 1211.19 L1455.16 1211.19 L1454.57 1211.19 L1453.98 1211.19 L1453.4 1211.19 L1452.81 1211.19 L1452.22 1211.19 L1451.64 1211.19 L1451.05 1211.19 L1450.46 1211.19 L1449.88 1211.19 L1449.29 1211.19 L1448.7 1211.19 L1448.12 1211.19 L1447.53 1211.19 L1446.95 1211.19 L1446.36 1211.19 L1445.77 1211.19 L1445.19 1211.19 L1444.6 1211.19 L1444.01 1211.19 L1443.43 1211.19 L1442.84 1211.19 L1442.25 1211.19 L1441.67 1211.19 L1441.08 1211.19 L1440.5 1211.19 L1439.91 1211.19 L1439.32 1211.19 L1438.74 1211.19 L1438.15 1211.19 L1437.56 1211.19 L1436.98 1211.19 L1436.39 1211.19 L1435.8 1211.19 L1435.22 1211.19 L1434.63 1211.19 L1434.04 1211.19 L1433.46 1211.19 L1432.87 1211.19 L1432.29 1211.19 L1431.7 1211.19 L1431.11 1211.19 L1430.53 1211.19 L1429.94 1211.19 L1429.35 1211.19 L1428.77 1211.19 L1428.18 1211.19 L1427.59 1211.19 L1427.01 1211.19 L1426.42 1211.19 L1425.83 1211.19 L1425.25 1211.19 L1424.66 1211.19 L1424.08 1211.19 L1423.49 1211.19 L1422.9 1211.19 L1422.32 1211.19 L1421.73 1211.19 L1421.14 1211.19 L1420.56 1211.19 L1419.97 1211.19 L1419.38 1211.19 L1418.8 1211.19 L1418.21 1211.19 L1417.63 1211.19 L1417.04 1211.19 L1416.45 1211.19 L1415.87 1211.19 L1415.28 1211.19 L1414.69 1211.19 L1414.11 1211.19 L1413.52 1211.19 L1412.93 1211.19 L1412.35 1211.19 L1411.76 1211.19 L1411.17 1211.19 L1410.59 1211.19 L1410 1211.19 L1409.42 1211.19 L1408.83 1211.19 L1408.24 1211.19 L1407.66 1211.19 L1407.07 1211.19 L1406.48 1211.19 L1405.9 1211.19 L1405.31 1211.19 L1404.72 1211.19 L1404.14 1211.19 L1403.55 1211.19 L1402.96 1211.19 L1402.38 1211.19 L1401.79 1211.19 L1401.21 1211.19 L1400.62 1211.19 L1400.03 1211.19 L1399.45 1211.19 L1398.86 1211.19 L1398.27 1211.19 L1397.69 1211.19 L1397.1 1211.19 L1396.51 1211.19 L1395.93 1211.19 L1395.34 1211.19 L1394.75 1211.19 L1394.17 1211.19 L1393.58 1211.19 L1393 1211.19 L1392.41 1211.19 L1391.82 1211.19 L1391.24 1211.19 L1390.65 1211.19 L1390.06 1211.19 L1389.48 1211.19 L1388.89 1211.19 L1388.3 1211.19 L1387.72 1211.19 L1387.13 1211.19 L1386.55 1211.19 L1385.96 1211.19 L1385.37 1211.19 L1384.79 1211.19 L1384.2 1211.19 L1383.61 1211.19 L1383.03 1211.19 L1382.44 1211.19 L1381.85 1211.19 L1381.27 1211.19 L1380.68 1211.19 L1380.09 1211.19 L1379.51 1211.19 L1378.92 1211.19 L1378.34 1211.19 L1377.75 1211.19 L1377.16 1211.19 L1376.58 1211.19 L1375.99 1211.19 L1375.4 1211.19 L1374.82 1211.19 L1374.23 1211.19 L1373.64 1211.19 L1373.06 1211.19 L1372.47 1211.19 L1371.88 1211.19 L1371.3 1211.19 L1370.71 1211.19 L1370.13 1211.19 L1369.54 1211.19 L1368.95 1211.19 L1368.37 1211.19 L1367.78 1211.19 L1367.19 1211.19 L1366.61 1211.19 L1366.02 1211.19 L1365.43 1211.19 L1364.85 1211.19 L1364.26 1211.19 L1363.68 1211.19 L1363.09 1211.19 L1362.5 1211.19 L1361.92 1211.19 L1361.33 1211.19 L1360.74 1211.19 L1360.16 1211.19 L1359.57 1211.19 L1358.98 1211.19 L1358.4 1211.19 L1357.81 1211.19 L1357.22 1211.19 L1356.64 1211.19 L1356.05 1211.19 L1355.47 1211.19 L1354.88 1211.19 L1354.29 1211.19 L1353.71 1211.19 L1353.12 1211.19 L1352.53 1211.19 L1351.95 1211.19 L1351.36 1211.19 L1350.77 1211.19 L1350.19 1211.19 L1349.6 1211.19 L1349.01 1211.19 L1348.43 1211.19 L1347.84 1211.19 L1347.26 1211.19 L1346.67 1211.19 L1346.08 1211.19 L1345.5 1211.19 L1344.91 1211.19 L1344.32 1211.19 L1343.74 1211.19 L1343.15 1211.19 L1342.56 1211.19 L1341.98 1211.19 L1341.39 1211.19 L1340.8 1211.19 L1340.22 1211.19 L1339.63 1211.19 L1339.05 1211.19 L1338.46 1211.19 L1337.87 1211.19 L1337.29 1211.19 L1336.7 1211.19 L1336.11 1211.19 L1335.53 1211.19 L1334.94 1211.19 L1334.35 1211.19 L1333.77 1211.19 L1333.18 1211.19 L1332.6 1211.19 L1332.01 1211.19 L1331.42 1211.19 L1330.84 1211.19 L1330.25 1211.19 L1329.66 1211.19 L1329.08 1211.19 L1328.49 1211.19 L1327.9 1211.19 L1327.32 1211.19 L1326.73 1211.19 L1326.14 1211.19 L1325.56 1211.19 L1324.97 1211.19 L1324.39 1211.19 L1323.8 1211.19 L1323.21 1211.19 L1322.63 1211.19 L1322.04 1211.19 L1321.45 1211.19 L1320.87 1211.19 L1320.28 1211.19 L1319.69 1211.19 L1319.11 1211.19 L1318.52 1211.19 L1317.93 1211.19 L1317.35 1211.19 L1316.76 1211.19 L1316.18 1211.19 L1315.59 1211.19 L1315 1211.19 L1314.42 1211.19 L1313.83 1211.19 L1313.24 1211.19 L1312.66 1211.19 L1312.07 1211.19 L1311.48 1211.19 L1310.9 1211.19 L1310.31 1211.19 L1309.73 1211.19 L1309.14 1211.19 L1308.55 1211.19 L1307.97 1211.19 L1307.38 1211.19 L1306.79 1211.19 L1306.21 1211.19 L1305.62 1211.19 L1305.03 1211.19 L1304.45 1211.19 L1303.86 1211.19 L1303.27 1211.19 L1302.69 1211.19 L1302.1 1211.19 L1301.52 1211.19 L1300.93 1211.19 L1300.34 1211.19 L1299.76 1211.19 L1299.17 1211.19 L1298.58 1211.19 L1298 1211.19 L1297.41 1211.19 L1296.82 1211.19 L1296.24 1211.19 L1295.65 1211.19 L1295.06 1211.19 L1294.48 1211.19 L1293.89 1211.19 L1293.31 1211.19 L1292.72 1211.19 L1292.13 1211.19 L1291.55 1211.19 L1290.96 1211.19 L1290.37 1211.19 L1289.79 1211.19 L1289.2 1211.19 L1288.61 1211.19 L1288.03 1211.19 L1287.44 1211.19 L1286.86 1211.19 L1286.27 1211.19 L1285.68 1211.19 L1285.1 1211.19 L1284.51 1211.19 L1283.92 1211.19 L1283.34 1211.19 L1282.75 1211.19 L1282.16 1211.19 L1281.58 1211.19 L1280.99 1211.19 L1280.4 1211.19 L1279.82 1211.19 L1279.23 1211.19 L1278.65 1211.19 L1278.06 1211.19 L1277.47 1211.19 L1276.89 1211.19 L1276.3 1211.19 L1275.71 1211.19 L1275.13 1211.19 L1274.54 1211.19 L1273.95 1211.19 L1273.37 1211.19 L1272.78 1211.19 L1272.19 1211.19 L1271.61 1211.19 L1271.02 1211.19 L1270.44 1211.19 L1269.85 1211.19 L1269.26 1211.19 L1268.68 1211.19 L1268.09 1211.19 L1267.5 1211.19 L1266.92 1211.19 L1266.33 1211.19 L1265.74 1211.19 L1265.16 1211.19 L1264.57 1211.19 L1263.98 1211.19 L1263.4 1211.19 L1262.81 1211.19 L1262.23 1211.19 L1261.64 1211.19 L1261.05 1211.19 L1260.47 1211.19 L1259.88 1211.19 L1259.29 1211.19 L1258.71 1211.19 L1258.12 1211.19 L1257.53 1211.19 L1256.95 1211.19 L1256.36 1211.19 L1255.78 1211.19 L1255.19 1211.19 L1254.6 1211.19 L1254.02 1211.19 L1253.43 1211.19 L1252.84 1211.19 L1252.26 1211.19 L1251.67 1211.19 L1251.08 1211.19 L1250.5 1211.19 L1249.91 1211.19 L1249.32 1211.19 L1248.74 1211.19 L1248.15 1211.19 L1247.57 1211.19 L1246.98 1211.19 L1246.39 1211.19 L1245.81 1211.19 L1245.22 1211.19 L1244.63 1211.19 L1244.05 1211.19 L1243.46 1211.19 L1242.87 1211.19 L1242.29 1211.19 L1241.7 1211.19 L1241.11 1211.19 L1240.53 1211.19 L1239.94 1211.19 L1239.36 1211.19 L1238.77 1211.19 L1238.18 1211.19 L1237.6 1211.19 L1237.01 1211.19 L1236.42 1211.19 L1235.84 1211.19 L1235.25 1211.19 L1234.66 1211.19 L1234.08 1211.19 L1233.49 1211.19 L1232.91 1211.19 L1232.32 1211.19 L1231.73 1211.19 L1231.15 1211.19 L1230.56 1211.19 L1229.97 1211.19 L1229.39 1211.19 L1228.8 1211.19 L1228.21 1211.19 L1227.63 1211.19 L1227.04 1211.19 L1226.45 1211.19 L1225.87 1211.19 L1225.28 1211.19 L1224.7 1211.19 L1224.11 1211.19 L1223.52 1211.19 L1222.94 1211.19 L1222.35 1211.19 L1221.76 1211.19 L1221.18 1211.19 L1220.59 1211.19 L1220 1211.19 L1219.42 1211.19 L1218.83 1211.19 L1218.24 1211.19 L1217.66 1211.19 L1217.07 1211.19 L1216.49 1211.19 L1215.9 1211.19 L1215.31 1211.19 L1214.73 1211.19 L1214.14 1211.19 L1213.55 1211.19 L1212.97 1211.19 L1212.38 1211.19 L1211.79 1211.19 L1211.21 1211.19 L1210.62 1211.19 L1210.03 1211.19 L1209.45 1211.19 L1208.86 1211.19 L1208.28 1211.19 L1207.69 1211.19 L1207.1 1211.19 L1206.52 1211.19 L1205.93 1211.19 L1205.34 1211.19 L1204.76 1211.19 L1204.17 1211.19 L1203.58 1211.19 L1203 1211.19 L1202.41 1211.19 L1201.83 1211.19 L1201.24 1211.19 L1200.65 1211.19 L1200.07 1211.19 L1199.48 1211.19 L1198.89 1211.19 L1198.31 1211.19 L1197.72 1211.19 L1197.13 1211.19 L1196.55 1211.19 L1195.96 1211.19 L1195.37 1211.19 L1194.79 1211.19 L1194.2 1211.19 L1193.62 1211.19 L1193.03 1211.19 L1192.44 1211.19 L1191.86 1211.19 L1191.27 1211.19 L1190.68 1211.19 L1190.1 1211.19 L1189.51 1211.19 L1188.92 1211.19 L1188.34 1211.19 L1187.75 1211.19 L1187.16 1211.19 L1186.58 1211.19 L1185.99 1211.19 L1185.41 1211.19 L1184.82 1211.19 L1184.23 1211.19 L1183.65 1211.19 L1183.06 1211.19 L1182.47 1211.19 L1181.89 1211.19 L1181.3 1211.19 L1180.71 1211.19 L1180.13 1211.19 L1179.54 1211.19 L1178.96 1211.19 L1178.37 1211.19 L1177.78 1211.19 L1177.2 1211.19 L1176.61 1211.19 L1176.02 1211.19 L1175.44 1211.19 L1174.85 1211.19 L1174.26 1211.19 L1173.68 1211.19 L1173.09 1211.19 L1172.5 1211.19 L1171.92 1211.19 L1171.33 1211.19 L1170.75 1211.19 L1170.16 1211.19 L1169.57 1211.19 L1168.99 1211.19 L1168.4 1211.19 L1167.81 1211.19 L1167.23 1211.19 L1166.64 1211.19 L1166.05 1211.19 L1165.47 1211.19 L1164.88 1211.19 L1164.29 1211.19 L1163.71 1211.19 L1163.12 1211.19 L1162.54 1211.19 L1161.95 1211.19 L1161.36 1211.19 L1160.78 1211.19 L1160.19 1211.19 L1159.6 1211.19 L1159.02 1211.19 L1158.43 1211.19 L1157.84 1211.19 L1157.26 1211.19 L1156.67 1211.19 L1156.09 1211.19 L1155.5 1211.19 L1154.91 1211.19 L1154.33 1211.19 L1153.74 1211.19 L1153.15 1211.19 L1152.57 1211.19 L1151.98 1211.19 L1151.39 1211.19 L1150.81 1211.19 L1150.22 1211.19 L1149.63 1211.19 L1149.05 1211.19 L1148.46 1211.19 L1147.88 1211.19 L1147.29 1211.19 L1146.7 1211.19 L1146.12 1211.19 L1145.53 1211.19 L1144.94 1211.19 L1144.36 1211.19 L1143.77 1211.19 L1143.18 1211.19 L1142.6 1211.19 L1142.01 1211.19 L1141.42 1211.19 L1140.84 1211.19 L1140.25 1211.19 L1139.67 1211.19 L1139.08 1211.19 L1138.49 1211.19 L1137.91 1211.19 L1137.32 1211.19 L1136.73 1211.19 L1136.15 1211.19 L1135.56 1211.19 L1134.97 1211.19 L1134.39 1211.19 L1133.8 1211.19 L1133.21 1211.19 L1132.63 1211.19 L1132.04 1211.19 L1131.46 1211.19 L1130.87 1211.19 L1130.28 1211.19 L1129.7 1211.19 L1129.11 1211.19 L1128.52 1211.19 L1127.94 1211.19 L1127.35 1211.19 L1126.76 1211.19 L1126.18 1211.19 L1125.59 1211.19 L1125.01 1211.19 L1124.42 1211.19 L1123.83 1211.19 L1123.25 1211.19 L1122.66 1211.19 L1122.07 1211.19 L1121.49 1211.19 L1120.9 1211.19 L1120.31 1211.19 L1119.73 1211.19 L1119.14 1211.19 L1118.55 1211.19 L1117.97 1211.19 L1117.38 1211.19 L1116.8 1211.19 L1116.21 1211.19 L1115.62 1211.19 L1115.04 1211.19 L1114.45 1211.19 L1113.86 1211.19 L1113.28 1211.19 L1112.69 1211.19 L1112.1 1211.19 L1111.52 1211.19 L1110.93 1211.19 L1110.34 1211.19 L1109.76 1211.19 L1109.17 1211.19 L1108.59 1211.19 L1108 1211.19 L1107.41 1211.19 L1106.83 1211.19 L1106.24 1211.19 L1105.65 1211.19 L1105.07 1211.19 L1104.48 1211.19 L1103.89 1211.19 L1103.31 1211.19 L1102.72 1211.19 L1102.14 1211.19 L1101.55 1211.19 L1100.96 1211.19 L1100.38 1211.19 L1099.79 1211.19 L1099.2 1211.19 L1098.62 1211.19 L1098.03 1211.19 L1097.44 1211.19 L1096.86 1211.19 L1096.27 1211.19 L1095.68 1211.19 L1095.1 1211.19 L1094.51 1211.19 L1093.93 1211.19 L1093.34 1211.19 L1092.75 1211.19 L1092.17 1211.19 L1091.58 1211.19 L1090.99 1211.19 L1090.41 1211.19 L1089.82 1211.19 L1089.23 1211.19 L1088.65 1211.19 L1088.06 1211.19 L1087.47 1211.19 L1086.89 1211.19 L1086.3 1211.19 L1085.72 1211.19 L1085.13 1211.19 L1084.54 1211.19 L1083.96 1211.19 L1083.37 1211.19 L1082.78 1211.19 L1082.2 1211.19 L1081.61 1211.19 L1081.02 1211.19 L1080.44 1211.19 L1079.85 1211.19 L1079.26 1211.19 L1078.68 1211.19 L1078.09 1211.19 L1077.51 1211.19 L1076.92 1211.19 L1076.33 1211.19 L1075.75 1211.19 L1075.16 1211.19 L1074.57 1211.19 L1073.99 1211.19 L1073.4 1211.19 L1072.81 1211.19 L1072.23 1211.19 L1071.64 1211.19 L1071.06 1211.19 L1070.47 1211.19 L1069.88 1211.19 L1069.3 1211.19 L1068.71 1211.19 L1068.12 1211.19 L1067.54 1211.19 L1066.95 1211.19 L1066.36 1211.19 L1065.78 1211.19 L1065.19 1211.19 L1064.6 1211.19 L1064.02 1211.19 L1063.43 1211.19 L1062.85 1211.19 L1062.26 1211.19 L1061.67 1211.19 L1061.09 1211.19 L1060.5 1211.19 L1059.91 1211.19 L1059.33 1211.19 L1058.74 1211.19 L1058.15 1211.19 L1057.57 1211.19 L1056.98 1211.19 L1056.39 1211.19 L1055.81 1211.19 L1055.22 1211.19 L1054.64 1211.19 L1054.05 1211.19 L1053.46 1211.19 L1052.88 1211.19 L1052.29 1211.19 L1051.7 1211.19 L1051.12 1211.19 L1050.53 1211.19 L1049.94 1211.19 L1049.36 1211.19 L1048.77 1211.19 L1048.19 1211.19 L1047.6 1211.19 L1047.01 1211.19 L1046.43 1211.19 L1045.84 1211.19 L1045.25 1211.19 L1044.67 1211.19 L1044.08 1211.19 L1043.49 1211.19 L1042.91 1211.19 L1042.32 1211.19 L1041.73 1211.19 L1041.15 1211.19 L1040.56 1211.19 L1039.98 1211.19 L1039.39 1211.19 L1038.8 1211.19 L1038.22 1211.19 L1037.63 1211.19 L1037.04 1211.19 L1036.46 1211.19 L1035.87 1211.19 L1035.28 1211.19 L1034.7 1211.19 L1034.11 1211.19 L1033.52 1211.19 L1032.94 1211.19 L1032.35 1211.19 L1031.77 1211.19 L1031.18 1211.19 L1030.59 1211.19 L1030.01 1211.19 L1029.42 1211.19 L1028.83 1211.19 L1028.25 1211.19 L1027.66 1211.19 L1027.07 1211.19 L1026.49 1211.19 L1025.9 1211.19 L1025.32 1211.19 L1024.73 1211.19 L1024.14 1211.19 L1023.56 1211.19 L1022.97 1211.19 L1022.38 1211.19 L1021.8 1211.19 L1021.21 1211.19 L1020.62 1211.19 L1020.04 1211.19 L1019.45 1211.19 L1018.86 1211.19 L1018.28 1211.19 L1017.69 1211.19 L1017.11 1211.19 L1016.52 1211.19 L1015.93 1211.19 L1015.35 1211.19 L1014.76 1211.19 L1014.17 1211.19 L1013.59 1211.19 L1013 1211.19 L1012.41 1211.19 L1011.83 1211.19 L1011.24 1211.19 L1010.65 1211.19 L1010.07 1211.19 L1009.48 1211.19 L1008.9 1211.19 L1008.31 1211.19 L1007.72 1211.19 L1007.14 1211.19 L1006.55 1211.19 L1005.96 1211.19 L1005.38 1211.19 L1004.79 1211.19 L1004.2 1211.19 L1003.62 1211.19 L1003.03 1211.19 L1002.44 1211.19 L1001.86 1211.19 L1001.27 1211.19 L1000.69 1211.19 L1000.1 1211.19 L999.513 1211.19 L998.926 1211.19 L998.34 1211.19 L997.754 1211.19 L997.167 1211.19 L996.581 1211.19 L995.994 1211.19 L995.408 1211.19 L994.822 1211.19 L994.235 1211.19 L993.649 1211.19 L993.062 1211.19 L992.476 1211.19 L991.889 1211.19 L991.303 1211.19 L990.717 1211.19 L990.13 1211.19 L989.544 1211.19 L988.957 1211.19 L988.371 1211.19 L987.785 1211.19 L987.198 1211.19 L986.612 1211.19 L986.025 1211.19  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip242)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1211.28 986.612,1211.28 987.198,1211.28 987.785,1211.28 988.371,1211.28 988.957,1211.28 989.544,1211.28 990.13,1211.28 990.717,1211.28 991.303,1211.28 991.889,1211.28 992.476,1211.28 993.062,1211.28 993.649,1211.28 994.235,1211.28 994.822,1211.28 995.408,1211.28 995.994,1211.28 996.581,1211.28 997.167,1211.28 997.754,1211.28 998.34,1211.28 998.926,1211.28 999.513,1211.28 1000.1,1211.28 1000.69,1211.28 1001.27,1211.28 1001.86,1211.28 1002.44,1211.28 1003.03,1211.28 1003.62,1211.28 1004.2,1211.28 1004.79,1211.28 1005.38,1211.28 1005.96,1211.28 1006.55,1211.28 1007.14,1211.28 1007.72,1211.28 1008.31,1211.28 1008.9,1211.28 1009.48,1211.28 1010.07,1211.28 1010.65,1211.28 1011.24,1211.28 1011.83,1211.28 1012.41,1211.28 1013,1211.28 1013.59,1211.28 1014.17,1211.28 1014.76,1211.28 1015.35,1211.28 1015.93,1211.28 1016.52,1211.28 1017.11,1211.28 1017.69,1211.28 1018.28,1211.28 1018.86,1211.28 1019.45,1211.28 1020.04,1211.28 1020.62,1211.28 1021.21,1211.28 1021.8,1211.28 1022.38,1211.28 1022.97,1211.28 1023.56,1211.28 1024.14,1211.28 1024.73,1211.28 1025.32,1211.28 1025.9,1211.28 1026.49,1211.28 1027.07,1211.28 1027.66,1211.28 1028.25,1211.28 1028.83,1211.28 1029.42,1211.28 1030.01,1211.28 1030.59,1211.28 1031.18,1211.28 1031.77,1211.28 1032.35,1211.28 1032.94,1211.28 1033.52,1211.28 1034.11,1211.28 1034.7,1211.28 1035.28,1211.28 1035.87,1211.28 1036.46,1211.28 1037.04,1211.28 1037.63,1211.28 1038.22,1211.28 1038.8,1211.28 1039.39,1211.28 1039.98,1211.28 1040.56,1211.28 1041.15,1211.28 1041.73,1211.28 1042.32,1211.28 1042.91,1211.28 1043.49,1211.28 1044.08,1211.28 1044.67,1211.28 1045.25,1211.28 1045.84,1211.28 1046.43,1211.28 1047.01,1211.28 1047.6,1211.28 1048.19,1211.28 1048.77,1211.28 1049.36,1211.28 1049.94,1211.28 1050.53,1211.28 1051.12,1211.28 1051.7,1211.28 1052.29,1211.28 1052.88,1211.28 1053.46,1211.28 1054.05,1211.28 1054.64,1211.28 1055.22,1211.28 1055.81,1211.28 1056.39,1211.28 1056.98,1211.28 1057.57,1211.28 1058.15,1211.28 1058.74,1211.28 1059.33,1211.28 1059.91,1211.28 1060.5,1211.28 1061.09,1211.28 1061.67,1211.28 1062.26,1211.28 1062.85,1211.28 1063.43,1211.28 1064.02,1211.28 1064.6,1211.28 1065.19,1211.28 1065.78,1211.28 1066.36,1211.28 1066.95,1211.28 1067.54,1211.28 1068.12,1211.28 1068.71,1211.28 1069.3,1211.28 1069.88,1211.28 1070.47,1211.28 1071.06,1211.28 1071.64,1211.28 1072.23,1211.28 1072.81,1211.28 1073.4,1211.28 1073.99,1211.28 1074.57,1211.28 1075.16,1211.28 1075.75,1211.28 1076.33,1211.28 1076.92,1211.28 1077.51,1211.28 1078.09,1211.28 1078.68,1211.28 1079.26,1211.28 1079.85,1211.28 1080.44,1211.28 1081.02,1211.28 1081.61,1211.28 1082.2,1211.28 1082.78,1211.28 1083.37,1211.28 1083.96,1211.28 1084.54,1211.28 1085.13,1211.28 1085.72,1211.28 1086.3,1211.28 1086.89,1211.28 1087.47,1211.28 1088.06,1211.28 1088.65,1211.28 1089.23,1211.28 1089.82,1211.28 1090.41,1211.28 1090.99,1211.28 1091.58,1211.28 1092.17,1211.28 1092.75,1211.28 1093.34,1211.28 1093.93,1211.28 1094.51,1211.28 1095.1,1211.28 1095.68,1211.28 1096.27,1211.28 1096.86,1211.28 1097.44,1211.28 1098.03,1211.28 1098.62,1211.28 1099.2,1211.28 1099.79,1211.28 1100.38,1211.28 1100.96,1211.28 1101.55,1211.28 1102.14,1211.28 1102.72,1211.28 1103.31,1211.28 1103.89,1211.28 1104.48,1211.28 1105.07,1211.28 1105.65,1211.28 1106.24,1211.28 1106.83,1211.28 1107.41,1211.28 1108,1211.28 1108.59,1211.28 1109.17,1211.28 1109.76,1211.28 1110.34,1211.28 1110.93,1211.28 1111.52,1211.28 1112.1,1211.28 1112.69,1211.28 1113.28,1211.28 1113.86,1211.28 1114.45,1211.28 1115.04,1211.28 1115.62,1211.28 1116.21,1211.28 1116.8,1211.28 1117.38,1211.28 1117.97,1211.28 1118.55,1211.28 1119.14,1211.28 1119.73,1211.28 1120.31,1211.28 1120.9,1211.28 1121.49,1211.28 1122.07,1211.28 1122.66,1211.28 1123.25,1211.28 1123.83,1211.28 1124.42,1211.28 1125.01,1211.28 1125.59,1211.28 1126.18,1211.28 1126.76,1211.28 1127.35,1211.28 1127.94,1211.28 1128.52,1211.28 1129.11,1211.28 1129.7,1211.28 1130.28,1211.28 1130.87,1211.28 1131.46,1211.28 1132.04,1211.28 1132.63,1211.28 1133.21,1211.28 1133.8,1211.28 1134.39,1211.28 1134.97,1211.28 1135.56,1211.28 1136.15,1211.28 1136.73,1211.28 1137.32,1211.28 1137.91,1211.28 1138.49,1211.28 1139.08,1211.28 1139.67,1211.28 1140.25,1211.28 1140.84,1211.28 1141.42,1211.28 1142.01,1211.28 1142.6,1211.28 1143.18,1211.28 1143.77,1211.28 1144.36,1211.28 1144.94,1211.28 1145.53,1211.28 1146.12,1211.28 1146.7,1211.28 1147.29,1211.28 1147.88,1211.28 1148.46,1211.28 1149.05,1211.28 1149.63,1211.28 1150.22,1211.28 1150.81,1211.28 1151.39,1211.28 1151.98,1211.28 1152.57,1211.28 1153.15,1211.28 1153.74,1211.28 1154.33,1211.28 1154.91,1211.28 1155.5,1211.28 1156.09,1211.28 1156.67,1211.28 1157.26,1211.28 1157.84,1211.28 1158.43,1211.28 1159.02,1211.28 1159.6,1211.28 1160.19,1211.28 1160.78,1211.28 1161.36,1211.28 1161.95,1211.28 1162.54,1211.28 1163.12,1211.28 1163.71,1211.28 1164.29,1211.28 1164.88,1211.28 1165.47,1211.28 1166.05,1211.28 1166.64,1211.28 1167.23,1211.28 1167.81,1211.28 1168.4,1211.28 1168.99,1211.28 1169.57,1211.28 1170.16,1211.28 1170.75,1211.28 1171.33,1211.28 1171.92,1211.28 1172.5,1211.28 1173.09,1211.28 1173.68,1211.28 1174.26,1211.28 1174.85,1211.28 1175.44,1211.28 1176.02,1211.28 1176.61,1211.28 1177.2,1211.28 1177.78,1211.28 1178.37,1211.28 1178.96,1211.28 1179.54,1211.28 1180.13,1211.28 1180.71,1211.28 1181.3,1211.28 1181.89,1211.28 1182.47,1211.28 1183.06,1211.28 1183.65,1211.28 1184.23,1211.28 1184.82,1211.28 1185.41,1211.28 1185.99,1211.28 1186.58,1211.28 1187.16,1211.28 1187.75,1211.28 1188.34,1211.28 1188.92,1211.28 1189.51,1211.28 1190.1,1211.28 1190.68,1211.28 1191.27,1211.28 1191.86,1211.28 1192.44,1211.28 1193.03,1211.28 1193.62,1211.28 1194.2,1211.28 1194.79,1211.28 1195.37,1211.28 1195.96,1211.28 1196.55,1211.28 1197.13,1211.28 1197.72,1211.28 1198.31,1211.28 1198.89,1211.28 1199.48,1211.28 1200.07,1211.28 1200.65,1211.28 1201.24,1211.28 1201.83,1211.28 1202.41,1211.28 1203,1211.28 1203.58,1211.28 1204.17,1211.28 1204.76,1211.28 1205.34,1211.28 1205.93,1211.28 1206.52,1211.28 1207.1,1211.28 1207.69,1211.28 1208.28,1211.28 1208.86,1211.28 1209.45,1211.28 1210.03,1211.28 1210.62,1211.28 1211.21,1211.28 1211.79,1211.28 1212.38,1211.28 1212.97,1211.28 1213.55,1211.28 1214.14,1211.28 1214.73,1211.28 1215.31,1211.28 1215.9,1211.28 1216.49,1211.28 1217.07,1211.28 1217.66,1211.28 1218.24,1211.28 1218.83,1211.28 1219.42,1211.28 1220,1211.28 1220.59,1211.28 1221.18,1211.28 1221.76,1211.28 1222.35,1211.28 1222.94,1211.28 1223.52,1211.28 1224.11,1211.28 1224.7,1211.28 1225.28,1211.28 1225.87,1211.28 1226.45,1211.28 1227.04,1211.28 1227.63,1211.28 1228.21,1211.28 1228.8,1211.28 1229.39,1211.28 1229.97,1211.28 1230.56,1211.28 1231.15,1211.28 1231.73,1211.28 1232.32,1211.28 1232.91,1211.28 1233.49,1211.28 1234.08,1211.28 1234.66,1211.28 1235.25,1211.28 1235.84,1211.28 1236.42,1211.28 1237.01,1211.28 1237.6,1211.28 1238.18,1211.28 1238.77,1211.28 1239.36,1211.28 1239.94,1211.28 1240.53,1211.28 1241.11,1211.28 1241.7,1211.28 1242.29,1211.28 1242.87,1211.28 1243.46,1211.28 1244.05,1211.28 1244.63,1211.28 1245.22,1211.28 1245.81,1211.28 1246.39,1211.28 1246.98,1211.28 1247.57,1211.28 1248.15,1211.28 1248.74,1211.28 1249.32,1211.28 1249.91,1211.28 1250.5,1211.28 1251.08,1211.28 1251.67,1211.28 1252.26,1211.28 1252.84,1211.28 1253.43,1211.28 1254.02,1211.28 1254.6,1211.28 1255.19,1211.28 1255.78,1211.28 1256.36,1211.28 1256.95,1211.28 1257.53,1211.28 1258.12,1211.28 1258.71,1211.28 1259.29,1211.28 1259.88,1211.28 1260.47,1211.28 1261.05,1211.28 1261.64,1211.28 1262.23,1211.28 1262.81,1211.28 1263.4,1211.28 1263.98,1211.28 1264.57,1211.28 1265.16,1211.28 1265.74,1211.28 1266.33,1211.28 1266.92,1211.28 1267.5,1211.28 1268.09,1211.28 1268.68,1211.28 1269.26,1211.28 1269.85,1211.28 1270.44,1211.28 1271.02,1211.28 1271.61,1211.28 1272.19,1211.28 1272.78,1211.28 1273.37,1211.28 1273.95,1211.28 1274.54,1211.28 1275.13,1211.28 1275.71,1211.28 1276.3,1211.28 1276.89,1211.28 1277.47,1211.28 1278.06,1211.28 1278.65,1211.28 1279.23,1211.28 1279.82,1211.28 1280.4,1211.28 1280.99,1211.28 1281.58,1211.28 1282.16,1211.28 1282.75,1211.28 1283.34,1211.28 1283.92,1211.28 1284.51,1211.28 1285.1,1211.28 1285.68,1211.28 1286.27,1211.28 1286.86,1211.28 1287.44,1211.28 1288.03,1211.28 1288.61,1211.28 1289.2,1211.28 1289.79,1211.28 1290.37,1211.28 1290.96,1211.28 1291.55,1211.28 1292.13,1211.28 1292.72,1211.28 1293.31,1211.28 1293.89,1211.28 1294.48,1211.28 1295.06,1211.28 1295.65,1211.28 1296.24,1211.28 1296.82,1211.28 1297.41,1211.28 1298,1211.28 1298.58,1211.28 1299.17,1211.28 1299.76,1211.28 1300.34,1211.28 1300.93,1211.28 1301.52,1211.28 1302.1,1211.28 1302.69,1211.28 1303.27,1211.28 1303.86,1211.28 1304.45,1211.28 1305.03,1211.28 1305.62,1211.28 1306.21,1211.28 1306.79,1211.28 1307.38,1211.28 1307.97,1211.28 1308.55,1211.28 1309.14,1211.28 1309.73,1211.28 1310.31,1211.28 1310.9,1211.28 1311.48,1211.28 1312.07,1211.28 1312.66,1211.28 1313.24,1211.28 1313.83,1211.28 1314.42,1211.28 1315,1211.28 1315.59,1211.28 1316.18,1211.28 1316.76,1211.28 1317.35,1211.28 1317.93,1211.28 1318.52,1211.28 1319.11,1211.28 1319.69,1211.28 1320.28,1211.28 1320.87,1211.28 1321.45,1211.28 1322.04,1211.28 1322.63,1211.28 1323.21,1211.28 1323.8,1211.28 1324.39,1211.28 1324.97,1211.28 1325.56,1211.28 1326.14,1211.28 1326.73,1211.28 1327.32,1211.28 1327.9,1211.28 1328.49,1211.28 1329.08,1211.28 1329.66,1211.28 1330.25,1211.28 1330.84,1211.28 1331.42,1211.28 1332.01,1211.28 1332.6,1211.28 1333.18,1211.28 1333.77,1211.28 1334.35,1211.28 1334.94,1211.28 1335.53,1211.28 1336.11,1211.28 1336.7,1211.28 1337.29,1211.28 1337.87,1211.28 1338.46,1211.28 1339.05,1211.28 1339.63,1211.28 1340.22,1211.28 1340.8,1211.28 1341.39,1211.28 1341.98,1211.28 1342.56,1211.28 1343.15,1211.28 1343.74,1211.28 1344.32,1211.28 1344.91,1211.28 1345.5,1211.28 1346.08,1211.28 1346.67,1211.28 1347.26,1211.28 1347.84,1211.28 1348.43,1211.28 1349.01,1211.28 1349.6,1211.28 1350.19,1211.28 1350.77,1211.28 1351.36,1211.28 1351.95,1211.28 1352.53,1211.28 1353.12,1211.28 1353.71,1211.28 1354.29,1211.28 1354.88,1211.28 1355.47,1211.28 1356.05,1211.28 1356.64,1211.28 1357.22,1211.28 1357.81,1211.28 1358.4,1211.28 1358.98,1211.28 1359.57,1211.28 1360.16,1211.28 1360.74,1211.28 1361.33,1211.28 1361.92,1211.28 1362.5,1211.28 1363.09,1211.28 1363.68,1211.28 1364.26,1211.28 1364.85,1211.28 1365.43,1211.28 1366.02,1211.28 1366.61,1211.28 1367.19,1211.28 1367.78,1211.28 1368.37,1211.28 1368.95,1211.28 1369.54,1211.28 1370.13,1211.28 1370.71,1211.28 1371.3,1211.28 1371.88,1211.28 1372.47,1211.28 1373.06,1211.28 1373.64,1211.28 1374.23,1211.28 1374.82,1211.28 1375.4,1211.28 1375.99,1211.28 1376.58,1211.28 1377.16,1211.28 1377.75,1211.28 1378.34,1211.28 1378.92,1211.28 1379.51,1211.28 1380.09,1211.28 1380.68,1211.28 1381.27,1211.28 1381.85,1211.28 1382.44,1211.28 1383.03,1211.28 1383.61,1211.28 1384.2,1211.28 1384.79,1211.28 1385.37,1211.28 1385.96,1211.28 1386.55,1211.28 1387.13,1211.28 1387.72,1211.28 1388.3,1211.28 1388.89,1211.28 1389.48,1211.28 1390.06,1211.28 1390.65,1211.28 1391.24,1211.28 1391.82,1211.28 1392.41,1211.28 1393,1211.28 1393.58,1211.28 1394.17,1211.28 1394.75,1211.28 1395.34,1211.28 1395.93,1211.28 1396.51,1211.28 1397.1,1211.28 1397.69,1211.28 1398.27,1211.28 1398.86,1211.28 1399.45,1211.28 1400.03,1211.28 1400.62,1211.28 1401.21,1211.28 1401.79,1211.28 1402.38,1211.28 1402.96,1211.28 1403.55,1211.28 1404.14,1211.28 1404.72,1211.28 1405.31,1211.28 1405.9,1211.28 1406.48,1211.28 1407.07,1211.28 1407.66,1211.28 1408.24,1211.28 1408.83,1211.28 1409.42,1211.28 1410,1211.28 1410.59,1211.28 1411.17,1211.28 1411.76,1211.28 1412.35,1211.28 1412.93,1211.28 1413.52,1211.28 1414.11,1211.28 1414.69,1211.28 1415.28,1211.28 1415.87,1211.28 1416.45,1211.28 1417.04,1211.28 1417.63,1211.28 1418.21,1211.28 1418.8,1211.28 1419.38,1211.28 1419.97,1211.28 1420.56,1211.28 1421.14,1211.28 1421.73,1211.28 1422.32,1211.28 1422.9,1211.28 1423.49,1211.28 1424.08,1211.28 1424.66,1211.28 1425.25,1211.28 1425.83,1211.28 1426.42,1211.28 1427.01,1211.28 1427.59,1211.28 1428.18,1211.28 1428.77,1211.28 1429.35,1211.28 1429.94,1211.28 1430.53,1211.28 1431.11,1211.28 1431.7,1211.28 1432.29,1211.28 1432.87,1211.28 1433.46,1211.28 1434.04,1211.28 1434.63,1211.28 1435.22,1211.28 1435.8,1211.28 1436.39,1211.28 1436.98,1211.28 1437.56,1211.28 1438.15,1211.28 1438.74,1211.28 1439.32,1211.28 1439.91,1211.28 1440.5,1211.28 1441.08,1211.28 1441.67,1211.28 1442.25,1211.28 1442.84,1211.28 1443.43,1211.28 1444.01,1211.28 1444.6,1211.28 1445.19,1211.28 1445.77,1211.28 1446.36,1211.28 1446.95,1211.28 1447.53,1211.28 1448.12,1211.28 1448.7,1211.28 1449.29,1211.28 1449.88,1211.28 1450.46,1211.28 1451.05,1211.28 1451.64,1211.28 1452.22,1211.28 1452.81,1211.28 1453.4,1211.28 1453.98,1211.28 1454.57,1211.28 1455.16,1211.28 1455.74,1211.28 1456.33,1211.28 1456.91,1211.28 1457.5,1211.28 1458.09,1211.28 1458.67,1211.28 1459.26,1211.28 1459.85,1211.28 1460.43,1211.28 1461.02,1211.28 1461.61,1211.28 1462.19,1211.28 1462.78,1211.28 1463.37,1211.28 1463.95,1211.28 1464.54,1211.28 1465.12,1211.28 1465.71,1211.28 1466.3,1211.28 1466.88,1211.28 1467.47,1211.28 1468.06,1211.28 1468.64,1211.28 1469.23,1211.28 1469.82,1211.28 1470.4,1211.28 1470.99,1211.28 1471.57,1211.28 1472.16,1211.28 1472.75,1211.28 1473.33,1211.28 1473.92,1211.28 1474.51,1211.28 1475.09,1211.28 1475.68,1211.28 1476.27,1211.28 1476.85,1211.28 1477.44,1211.28 1478.03,1211.28 1478.61,1211.28 1479.2,1211.28 1479.78,1211.28 1480.37,1211.28 1480.96,1211.28 1481.54,1211.28 1482.13,1211.28 1482.72,1211.28 1483.3,1211.28 1483.89,1211.28 1484.48,1211.28 1485.06,1211.28 1485.65,1211.28 1486.24,1211.28 1486.82,1211.28 1487.41,1211.28 1487.99,1211.28 1488.58,1211.28 1489.17,1211.28 1489.75,1211.28 1490.34,1211.28 1490.93,1211.28 1491.51,1211.28 1492.1,1211.28 1492.69,1211.28 1493.27,1211.28 1493.86,1211.28 1494.45,1211.28 1495.03,1211.28 1495.62,1211.28 1496.2,1211.28 1496.79,1211.28 1497.38,1211.28 1497.96,1211.28 1498.55,1211.28 1499.14,1211.28 1499.72,1211.28 1500.31,1211.28 1500.9,1211.28 1501.48,1211.28 1502.07,1211.28 1502.65,1211.28 1503.24,1211.28 1503.83,1211.28 1504.41,1211.28 1505,1211.28 1505.59,1211.28 1506.17,1211.28 1506.76,1211.28 1507.35,1211.28 1507.93,1211.28 1508.52,1211.28 1509.11,1211.28 1509.69,1211.28 1510.28,1211.28 1510.86,1211.28 1511.45,1211.28 1512.04,1211.28 1512.62,1211.28 1513.21,1211.28 1513.8,1211.28 1514.38,1211.28 1514.97,1211.28 1515.56,1211.28 1516.14,1211.28 1516.73,1211.28 1517.32,1211.28 1517.9,1211.28 1518.49,1211.28 1519.07,1211.28 1519.66,1211.28 1520.25,1211.28 1520.83,1211.28 1521.42,1211.28 1522.01,1211.28 1522.59,1211.28 1523.18,1211.28 1523.77,1211.28 1524.35,1211.28 1524.94,1211.28 1525.52,1211.28 1526.11,1211.28 1526.7,1211.28 1527.28,1211.28 1527.87,1211.28 1528.46,1211.28 1529.04,1211.28 1529.63,1211.28 1530.22,1211.28 1530.8,1211.28 1531.39,1211.28 1531.98,1211.28 1532.56,1211.28 1533.15,1211.28 1533.73,1211.28 1534.32,1211.28 1534.91,1211.28 1535.49,1211.28 1536.08,1211.28 1536.67,1211.28 1537.25,1211.28 1537.84,1211.28 1538.43,1211.28 1539.01,1211.28 1539.6,1211.28 1540.19,1211.28 1540.77,1211.28 1541.36,1211.28 1541.94,1211.28 1542.53,1211.28 1543.12,1211.28 1543.7,1211.28 1544.29,1211.28 1544.88,1211.28 1545.46,1211.28 1546.05,1211.28 1546.64,1211.28 1547.22,1211.28 1547.81,1211.28 1548.4,1211.28 1548.98,1211.28 1549.57,1211.28 1550.15,1211.28 1550.74,1211.28 1551.33,1211.28 1551.91,1211.28 1552.5,1211.28 1553.09,1211.28 1553.67,1211.28 1554.26,1211.28 1554.85,1211.28 1555.43,1211.28 1556.02,1211.28 1556.6,1211.28 1557.19,1211.28 1557.78,1211.28 1558.36,1211.28 1558.95,1211.28 1559.54,1211.28 1560.12,1211.28 1560.71,1211.28 1561.3,1211.28 1561.88,1211.28 1562.47,1211.28 1563.06,1211.28 1563.64,1211.28 1564.23,1211.28 1564.81,1211.28 1565.4,1211.28 1565.99,1211.28 1566.57,1211.28 1567.16,1211.28 1567.75,1211.28 1568.33,1211.28 1568.92,1211.28 1569.51,1211.28 1570.09,1211.28 1570.68,1211.28 1571.27,1211.28 1571.85,1211.28 1572.44,1211.28 1573.02,1211.28 1573.61,1211.28 1574.2,1211.28 1574.78,1211.28 1575.37,1211.28 1575.96,1211.28 1576.54,1211.28 1577.13,1211.28 1577.72,1211.28 1578.3,1211.28 1578.89,1211.28 1579.47,1211.28 1580.06,1211.28 1580.65,1211.28 1581.23,1211.28 1581.82,1211.28 1582.41,1211.28 1582.99,1211.28 1583.58,1211.28 1584.17,1211.28 1584.75,1211.28 1585.34,1211.28 1585.93,1211.28 1586.51,1211.28 1587.1,1211.28 1587.68,1211.28 1588.27,1211.28 1588.86,1211.28 1589.44,1211.28 1590.03,1211.28 1590.62,1211.28 1591.2,1211.28 1591.79,1211.28 1592.38,1211.28 1592.96,1211.28 1593.55,1211.28 1594.14,1211.28 1594.72,1211.28 1595.31,1211.28 1595.89,1211.28 1596.48,1211.28 1597.07,1211.28 1597.65,1211.28 1598.24,1211.28 1598.83,1211.28 1599.41,1211.28 1600,1211.28 1600.59,1211.28 1601.17,1211.28 1601.76,1211.28 1602.34,1211.28 1602.93,1211.28 1603.52,1211.28 1604.1,1211.28 1604.69,1211.28 1605.28,1211.28 1605.86,1211.28 1606.45,1211.28 1607.04,1211.28 1607.62,1211.28 1608.21,1211.28 1608.8,1211.28 1609.38,1211.28 1609.97,1211.28 1610.55,1211.28 1611.14,1211.28 1611.73,1211.28 1612.31,1211.28 1612.9,1211.28 1613.49,1211.28 1614.07,1211.28 1614.66,1211.28 1615.25,1211.28 1615.83,1211.28 1616.42,1211.28 1617.01,1211.28 1617.59,1211.28 1618.18,1211.28 1618.76,1211.28 1619.35,1211.28 1619.94,1211.28 1620.52,1211.28 1621.11,1211.28 1621.7,1211.28 1622.28,1211.28 1622.87,1211.28 1623.46,1211.28 1624.04,1211.28 1624.63,1211.28 1625.22,1211.28 1625.8,1211.28 1626.39,1211.28 1626.97,1211.28 1627.56,1211.28 1628.15,1211.28 1628.73,1211.28 1629.32,1211.28 1629.91,1211.28 1630.49,1211.28 1631.08,1211.28 1631.67,1211.28 1632.25,1211.28 1632.84,1211.28 1633.42,1211.28 1634.01,1211.28 1634.6,1211.28 1635.18,1211.28 1635.77,1211.28 1636.36,1211.28 1636.94,1211.28 1637.53,1211.28 1638.12,1211.28 1638.7,1211.28 1639.29,1211.28 1639.88,1211.28 1640.46,1211.28 1641.05,1211.28 1641.63,1211.28 1642.22,1211.28 1642.81,1211.28 1643.39,1211.28 1643.98,1211.28 1644.57,1211.28 1645.15,1211.28 1645.74,1211.28 1646.33,1211.28 1646.91,1211.28 1647.5,1211.28 1648.09,1211.28 1648.67,1211.28 1649.26,1211.28 1649.84,1211.28 1650.43,1211.28 1651.02,1211.28 1651.6,1211.28 1652.19,1211.28 1652.78,1211.28 1653.36,1211.28 1653.95,1211.28 1654.54,1211.28 1655.12,1211.28 1655.71,1211.28 1656.29,1211.28 1656.88,1211.28 1657.47,1211.28 1658.05,1211.28 1658.64,1211.28 1659.23,1211.28 1659.81,1211.28 1660.4,1211.28 1660.99,1211.28 1661.57,1211.28 1662.16,1211.28 1662.75,1211.28 1663.33,1211.28 1663.92,1211.28 1664.5,1211.28 1665.09,1211.28 1665.68,1211.28 1666.26,1211.28 1666.85,1211.28 1667.44,1211.28 1668.02,1211.28 1668.61,1211.28 1669.2,1211.28 1669.78,1211.28 1670.37,1211.28 1670.96,1211.28 1671.54,1211.28 1672.13,1211.28 1672.71,1211.28 1673.3,1211.28 1673.89,1211.28 1674.47,1211.28 1675.06,1211.28 1675.65,1211.28 1676.23,1211.28 1676.82,1211.28 1677.41,1211.28 1677.99,1211.28 1678.58,1211.28 1679.17,1211.28 1679.75,1211.28 1680.34,1211.28 1680.92,1211.28 1681.51,1211.28 1682.1,1211.28 1682.68,1211.28 1683.27,1211.28 1683.86,1211.28 1684.44,1211.28 1685.03,1211.28 1685.62,1211.28 1686.2,1211.28 1686.79,1211.28 1687.37,1211.28 1687.96,1211.28 1688.55,1211.28 1689.13,1211.28 1689.72,1211.28 1690.31,1211.28 1690.89,1211.28 1691.48,1211.28 1692.07,1211.28 1692.65,1211.28 1693.24,1211.28 1693.83,1211.28 1694.41,1211.28 1695,1211.28 1695.58,1211.28 1696.17,1211.28 1696.76,1211.28 1697.34,1211.28 1697.93,1211.28 1698.52,1211.28 1699.1,1211.28 1699.69,1211.28 1700.28,1211.28 1700.86,1211.28 1701.45,1211.28 1702.04,1211.28 1702.62,1211.28 1703.21,1211.28 1703.79,1211.28 1704.38,1211.28 1704.97,1211.28 1705.55,1211.28 1706.14,1211.28 1706.73,1211.28 1707.31,1211.28 1707.9,1211.28 1708.49,1211.28 1709.07,1211.28 1709.66,1211.28 1710.24,1211.28 1710.83,1211.28 1711.42,1211.28 1712,1211.28 1712.59,1211.28 1713.18,1211.28 1713.76,1211.28 1714.35,1211.28 1714.94,1211.28 1715.52,1211.28 1716.11,1211.28 1716.7,1211.28 1717.28,1211.28 1717.87,1211.28 1718.45,1211.28 1719.04,1211.28 1719.63,1211.28 1720.21,1211.28 1720.8,1211.28 1721.39,1211.28 1721.97,1211.28 1722.56,1211.28 1723.15,1211.28 1723.73,1211.28 1724.32,1211.28 1724.91,1211.28 1725.49,1211.28 1726.08,1211.28 1726.66,1211.28 1727.25,1211.28 1727.84,1211.28 1728.42,1211.28 1729.01,1211.28 1729.6,1211.28 1730.18,1211.28 1730.77,1211.28 1731.36,1211.28 1731.94,1211.28 1732.53,1211.28 1733.11,1211.28 1733.7,1211.28 1734.29,1211.28 1734.87,1211.28 1735.46,1211.28 1736.05,1211.28 1736.63,1211.28 1737.22,1211.28 1737.81,1211.28 1738.39,1211.28 1738.98,1211.28 1739.57,1211.28 1740.15,1211.28 1740.74,1211.28 1741.32,1211.28 1741.91,1211.28 1742.5,1211.28 1743.08,1211.28 1743.67,1211.28 1744.26,1211.28 1744.84,1211.28 1745.43,1211.28 1746.02,1211.28 1746.6,1211.28 1747.19,1211.28 1747.78,1211.28 1748.36,1211.28 1748.95,1211.28 1749.53,1211.28 1750.12,1211.28 1750.71,1211.28 1751.29,1211.28 1751.88,1211.28 1752.47,1211.28 1753.05,1211.28 1753.64,1211.28 1754.23,1211.28 1754.81,1211.28 1755.4,1211.28 1755.99,1211.28 1756.57,1211.28 1757.16,1211.28 1757.74,1211.28 1758.33,1211.28 1758.92,1211.28 1759.5,1211.28 1760.09,1211.28 1760.68,1211.28 1761.26,1211.28 1761.85,1211.28 1762.44,1211.28 1763.02,1211.28 1763.61,1211.28 1764.19,1211.28 1764.78,1211.28 1765.37,1211.28 1765.95,1211.28 1766.54,1211.28 1767.13,1211.28 1767.71,1211.28 1768.3,1211.28 1768.89,1211.28 1769.47,1211.28 1770.06,1211.28 1770.65,1211.28 1771.23,1211.28 1771.82,1211.28 1772.4,1211.28 1772.99,1211.28 1773.58,1211.28 1774.16,1211.28 1774.75,1211.28 1775.34,1211.28 1775.92,1211.28 1776.51,1211.28 1777.1,1211.28 1777.68,1211.28 1778.27,1211.28 1778.86,1211.28 1779.44,1211.28 1780.03,1211.28 1780.61,1211.28 1781.2,1211.28 1781.79,1211.28 1782.37,1211.28 1782.96,1211.28 1783.55,1211.28 1784.13,1211.28 1784.72,1211.28 1785.31,1211.28 1785.89,1211.28 1786.48,1211.28 1787.06,1211.28 1787.65,1211.28 1788.24,1211.28 1788.82,1211.28 1789.41,1211.28 1790,1211.28 1790.58,1211.28 1791.17,1211.28 1791.76,1211.28 1792.34,1211.28 1792.93,1211.28 1793.52,1211.28 1794.1,1211.28 1794.69,1211.28 1795.27,1211.28 1795.86,1211.28 1796.45,1211.28 1797.03,1211.28 1797.62,1211.28 1798.21,1211.28 1798.79,1211.28 1799.38,1211.28 1799.97,1211.28 1800.55,1211.28 1801.14,1211.28 1801.73,1211.28 1802.31,1211.28 1802.9,1211.28 1803.48,1211.28 1804.07,1211.28 1804.66,1211.28 1805.24,1211.28 1805.83,1211.28 1806.42,1211.28 1807,1211.28 1807.59,1211.28 1808.18,1211.28 1808.76,1211.28 1809.35,1211.28 1809.94,1211.28 1810.52,1211.28 1811.11,1211.28 1811.69,1211.28 1812.28,1211.28 1812.87,1211.28 1813.45,1211.28 1814.04,1211.28 1814.63,1211.28 1815.21,1211.28 1815.8,1211.28 1816.39,1211.28 1816.97,1211.28 1817.56,1211.28 1818.14,1211.28 1818.73,1211.28 1819.32,1211.28 1819.9,1211.28 1820.49,1211.28 1821.08,1211.28 1821.66,1211.28 1822.25,1211.28 1822.84,1211.28 1823.42,1211.28 1824.01,1211.28 1824.6,1211.28 1825.18,1211.28 1825.77,1211.28 1826.35,1211.28 1826.94,1211.28 1827.53,1211.28 1828.11,1211.28 1828.7,1211.28 1829.29,1211.28 1829.87,1211.28 1830.46,1211.28 1831.05,1211.28 1831.63,1211.28 1832.22,1211.28 1832.81,1211.28 1833.39,1211.28 1833.98,1211.28 1834.56,1211.28 1835.15,1211.28 1835.74,1211.28 1836.32,1211.28 1836.91,1211.28 1837.5,1211.28 1838.08,1211.28 1838.67,1211.28 1839.26,1211.28 1839.84,1211.28 1840.43,1211.28 1841.01,1211.28 1841.6,1211.28 1842.19,1211.28 1842.77,1211.28 1843.36,1211.28 1843.95,1211.28 1844.53,1211.28 1845.12,1211.28 1845.71,1211.28 1846.29,1211.28 1846.88,1211.28 1847.47,1211.28 1848.05,1211.28 1848.64,1211.28 1849.22,1211.28 1849.81,1211.28 1850.4,1211.28 1850.98,1211.28 1851.57,1211.28 1852.16,1211.28 1852.74,1211.28 1853.33,1211.28 1853.92,1211.28 1854.5,1211.28 1855.09,1211.28 1855.68,1211.28 1856.26,1211.28 1856.85,1211.28 1857.43,1211.28 1858.02,1211.28 1858.61,1211.28 1859.19,1211.28 1859.78,1211.28 1860.37,1211.28 1860.95,1211.28 1861.54,1211.28 1862.13,1211.28 1862.71,1211.28 1863.3,1211.28 1863.88,1211.28 1864.47,1211.28 1865.06,1211.28 1865.64,1211.28 1866.23,1211.28 1866.82,1211.28 1867.4,1211.28 1867.99,1211.28 1868.58,1211.28 1869.16,1211.28 1869.75,1211.28 1870.34,1211.28 1870.92,1211.28 1871.51,1211.28 1872.09,1211.28 1872.68,1211.28 1873.27,1211.28 1873.85,1211.28 1874.44,1211.28 1875.03,1211.28 1875.61,1211.28 1876.2,1211.28 1876.79,1211.28 1877.37,1211.28 1877.96,1211.28 1878.55,1211.28 1879.13,1211.28 1879.72,1211.28 1880.3,1211.28 1880.89,1211.28 1881.48,1211.28 1882.06,1211.28 1882.65,1211.28 1883.24,1211.28 1883.82,1211.28 1884.41,1211.28 1885,1211.28 1885.58,1211.28 1886.17,1211.28 1886.76,1211.28 1887.34,1211.28 1887.93,1211.28 1888.51,1211.28 1889.1,1211.28 1889.69,1211.28 1890.27,1211.28 1890.86,1211.28 1891.45,1211.28 1892.03,1211.28 1892.62,1211.28 1893.21,1211.28 1893.79,1211.28 1894.38,1211.28 1894.96,1211.28 1895.55,1211.28 1896.14,1211.28 1896.72,1211.28 1897.31,1211.28 1897.9,1211.28 1898.48,1211.28 1899.07,1211.28 1899.66,1211.28 1900.24,1211.28 1900.83,1211.28 1901.42,1211.28 1902,1211.28 1902.59,1211.28 1903.17,1211.28 1903.76,1211.28 1904.35,1211.28 1904.93,1211.28 1905.52,1211.28 1906.11,1211.28 1906.69,1211.28 1907.28,1211.28 1907.87,1211.28 1908.45,1211.28 1909.04,1211.28 1909.63,1211.28 1910.21,1211.28 1910.8,1211.28 1911.38,1211.28 1911.97,1211.28 1912.56,1211.28 1913.14,1211.28 1913.73,1211.28 1914.32,1211.28 1914.9,1211.28 1915.49,1211.28 1916.08,1211.28 1916.66,1211.28 1917.25,1211.28 1917.83,1211.28 1918.42,1211.28 1919.01,1211.28 1919.59,1211.28 1920.18,1211.28 1920.77,1211.28 1921.35,1211.28 1921.94,1211.28 1922.53,1211.28 1923.11,1211.28 1923.7,1211.28 1924.29,1211.28 1924.87,1211.28 1925.46,1211.28 1926.04,1211.28 1926.63,1211.28 1927.22,1211.28 1927.8,1211.28 1928.39,1211.28 1928.98,1211.28 1929.56,1211.28 1930.15,1211.28 1930.74,1211.28 1931.32,1211.28 1931.91,1211.28 1932.5,1211.28 1933.08,1211.28 1933.67,1211.28 1934.25,1211.28 1934.84,1211.28 1935.43,1211.28 1936.01,1211.28 1936.6,1211.28 1937.19,1211.28 1937.77,1211.28 1938.36,1211.28 1938.95,1211.28 1939.53,1211.28 1940.12,1211.28 1940.71,1211.28 1941.29,1211.28 1941.88,1211.28 1942.46,1211.28 1943.05,1211.28 1943.64,1211.28 1944.22,1211.28 1944.81,1211.28 1945.4,1211.28 1945.98,1211.28 1946.57,1211.28 1947.16,1211.28 1947.74,1211.28 1948.33,1211.28 1948.91,1211.28 1949.5,1211.28 1950.09,1211.28 1950.67,1211.28 1951.26,1211.28 1951.85,1211.28 1952.43,1211.28 1953.02,1211.28 1953.61,1211.28 1954.19,1211.28 1954.78,1211.28 1955.37,1211.28 1955.95,1211.28 1956.54,1211.28 1957.12,1211.28 1957.71,1211.28 1958.3,1211.28 1958.88,1211.28 1959.47,1211.28 1960.06,1211.28 1960.64,1211.28 1961.23,1211.28 1961.82,1211.28 1962.4,1211.28 1962.99,1211.28 1963.58,1211.28 1964.16,1211.28 1964.75,1211.28 1965.33,1211.28 1965.92,1211.28 1966.51,1211.28 1967.09,1211.28 1967.68,1211.28 1968.27,1211.28 1968.85,1211.28 1969.44,1211.28 1970.03,1211.28 1970.61,1211.28 1971.2,1211.28 1971.78,1211.28 1972.37,1211.28 1972.96,1211.28 1973.54,1211.28 1974.13,1211.28 1974.72,1211.28 1975.3,1211.28 1975.89,1211.28 1976.48,1211.28 1977.06,1211.28 1977.65,1211.28 1978.24,1211.28 1978.82,1211.28 1979.41,1211.28 1979.99,1211.28 1980.58,1211.28 1981.17,1211.28 1981.75,1211.28 1982.34,1211.28 1982.93,1211.28 1983.51,1211.28 1984.1,1211.28 1984.69,1211.28 1985.27,1211.28 1985.86,1211.28 1986.45,1211.28 1987.03,1211.28 1987.62,1211.28 1988.2,1211.28 1988.79,1211.28 1989.38,1211.28 1989.96,1211.28 1990.55,1211.28 1991.14,1211.28 1991.72,1211.28 1992.31,1211.28 1992.9,1211.28 1993.48,1211.28 1994.07,1211.28 1994.65,1211.28 1995.24,1211.28 1995.83,1211.28 1996.41,1211.28 1997,1211.28 1997.59,1211.28 1998.17,1211.28 1998.76,1211.28 1999.35,1211.28 1999.93,1211.28 2000.52,1211.28 2001.11,1211.28 2001.69,1211.28 2002.28,1211.28 2002.86,1211.28 2003.45,1211.28 2004.04,1211.28 2004.62,1211.28 2005.21,1211.28 2005.8,1211.28 2006.38,1211.28 2006.97,1211.28 2007.56,1211.28 2008.14,1211.28 2008.73,1211.28 2009.32,1211.28 2009.9,1211.28 2010.49,1211.28 2011.07,1211.28 2011.66,1211.28 2012.25,1211.28 2012.83,1211.28 2013.42,1211.28 2014.01,1211.28 2014.59,1211.28 2015.18,1211.28 2015.77,1211.28 2016.35,1211.28 2016.94,1211.28 2017.53,1211.28 2018.11,1211.28 2018.7,1211.28 2019.28,1211.28 2019.87,1211.28 2020.46,1211.28 2021.04,1211.28 2021.63,1211.28 2022.22,1211.28 2022.8,1211.28 2023.39,1211.28 2023.98,1211.28 2024.56,1211.28 2025.15,1211.28 2025.73,1211.28 2026.32,1211.28 2026.91,1211.28 2027.49,1211.28 2028.08,1211.28 2028.67,1211.28 2029.25,1211.28 2029.84,1211.28 2030.43,1211.28 2031.01,1211.28 2031.6,1211.28 2032.19,1211.28 2032.77,1211.28 2033.36,1211.28 2033.94,1211.28 2034.53,1211.28 2035.12,1211.28 2035.7,1211.28 2036.29,1211.28 2036.88,1211.28 2037.46,1211.28 2038.05,1211.28 2038.64,1211.28 2039.22,1211.28 2039.81,1211.28 2040.4,1211.28 2040.98,1211.28 2041.57,1211.28 2042.15,1211.28 2042.74,1211.28 2043.33,1211.28 2043.91,1211.28 2044.5,1211.28 2045.09,1211.28 2045.67,1211.28 2046.26,1211.28 2046.85,1211.28 2047.43,1211.28 2048.02,1211.28 2048.6,1211.28 2049.19,1211.28 2049.78,1211.28 2050.36,1211.28 2050.95,1211.28 2051.54,1211.28 2052.12,1211.28 2052.71,1211.28 2053.3,1211.28 2053.88,1211.28 2054.47,1211.28 2055.06,1211.28 2055.64,1211.28 2056.23,1211.28 2056.81,1211.28 2057.4,1211.28 2057.99,1211.28 2058.57,1211.28 2059.16,1211.28 2059.75,1211.28 2060.33,1211.28 2060.92,1211.28 2061.51,1211.28 2062.09,1211.28 2062.68,1211.28 2063.27,1211.28 2063.85,1211.28 2064.44,1211.28 2065.02,1211.28 2065.61,1211.28 2066.2,1211.28 2066.78,1211.28 2067.37,1211.28 2067.96,1211.28 2068.54,1211.28 2069.13,1211.28 2069.72,1211.28 2070.3,1211.28 2070.89,1211.28 2071.48,1211.28 2072.06,1211.28 2072.65,1211.28 2073.23,1211.28 2073.82,1211.28 2074.41,1211.28 2074.99,1211.28 2075.58,1211.28 2076.17,1211.28 2076.75,1211.28 2077.34,1211.28 2077.93,1211.28 2078.51,1211.28 2079.1,1211.28 2079.68,1211.28 2080.27,1211.28 2080.86,1211.28 2081.44,1211.28 2082.03,1211.28 2082.62,1211.28 2083.2,1211.28 2083.79,1211.28 2084.38,1211.28 2084.96,1211.28 2085.55,1211.28 2086.14,1211.28 2086.72,1211.28 2087.31,1211.28 2087.89,1211.28 2088.48,1211.28 2089.07,1211.28 2089.65,1211.28 2090.24,1211.28 2090.83,1211.28 2091.41,1211.28 2092,1211.28 2092.59,1211.28 2093.17,1211.28 2093.76,1211.28 2094.35,1211.28 2094.93,1211.28 2095.52,1211.28 2096.1,1211.28 2096.69,1211.28 2097.28,1211.28 2097.86,1211.28 2098.45,1211.28 2099.04,1211.28 2099.62,1211.28 2100.21,1211.28 2100.8,1211.28 2101.38,1211.28 2101.97,1211.28 2102.55,1211.28 2103.14,1211.28 2103.73,1211.28 2104.31,1211.28 2104.9,1211.28 2105.49,1211.28 2106.07,1211.28 2106.66,1211.28 2107.25,1211.28 2107.83,1211.28 2108.42,1211.28 2109.01,1211.28 2109.59,1211.28 2110.18,1211.28 2110.76,1211.28 2111.35,1211.28 2111.94,1211.28 2112.52,1211.28 2113.11,1211.28 2113.7,1211.28 2114.28,1211.28 2114.87,1211.28 2115.46,1211.28 2116.04,1211.28 2116.63,1211.28 2117.22,1211.28 2117.8,1211.28 2118.39,1211.28 2118.97,1211.28 2119.56,1211.28 2120.15,1211.28 2120.73,1211.28 2121.32,1211.28 2121.91,1211.28 2122.49,1211.28 2123.08,1211.28 2123.67,1211.28 2124.25,1211.28 2124.84,1211.28 2125.42,1211.28 2126.01,1211.28 2126.6,1211.28 2127.18,1211.28 2127.77,1211.28 2128.36,1211.28 2128.94,1211.28 2129.53,1211.28 2130.12,1211.28 2130.7,1211.28 2131.29,1211.28 2131.88,1211.28 2132.46,1211.28 2133.05,1211.28 2133.63,1211.28 2134.22,1211.28 2134.81,1211.28 2135.39,1211.28 2135.98,1211.28 2136.57,1211.28 2137.15,1211.28 2137.74,1211.28 2138.33,1211.28 2138.91,1211.28 2139.5,1211.28 2140.09,1211.28 2140.67,1211.28 2141.26,1211.28 2141.84,1211.28 2142.43,1211.28 2143.02,1211.28 2143.6,1211.28 2144.19,1211.28 2144.78,1211.28 2145.36,1211.28 2145.95,1211.28 2146.54,1211.28 2147.12,1211.28 2147.71,1211.28 2148.3,1211.28 2148.88,1211.28 2149.47,1211.28 2150.05,1211.28 2150.64,1211.28 2151.23,1211.28 2151.81,1211.28 2152.4,1211.28 2152.99,1211.28 2153.57,1211.28 2154.16,1211.28 2154.75,1211.28 2155.33,1211.28 2155.92,1211.28 2156.5,1211.28 2157.09,1211.28 2157.68,1211.28 2158.26,1211.28 \"/>\n<polyline clip-path=\"url(#clip242)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1562.18,1193.48 1399.6,899.083 \"/>\n<polyline clip-path=\"url(#clip242)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1228.49 985.439,1193.48 2158.26,1193.48 2158.26,1228.49 985.439,1228.49 \"/>\n<path clip-path=\"url(#clip240)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip240)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip240)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip240)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip240)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip240)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip243\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip243)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip243)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip243)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip243)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip243)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip240)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip243)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip243)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip243)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip243)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip243)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip240)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip240)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip240)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip243)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-1577.5 161.555,-2922.08 162.114,-4155.78 162.673,-3801.28 163.232,-3595.8 163.792,-3467.96 164.351,-4491.83 164.91,-5477.96 165.469,-6371.74 166.029,-7178.6 166.588,-7913.73 167.147,-8598.56 167.706,-9199.8 168.266,-9728.43 168.825,-10213.2 169.384,-10649.8 169.943,-11048.8 170.503,-11382.4 171.062,-11690.6 171.621,-10709.1 172.18,-10977.3 172.74,-11207.3 173.299,-11410.4 173.858,-11561.6 174.417,-11676.1 174.977,-11350.9 175.536,-11436.6 176.095,-11505.1 176.655,-11199.7 177.214,-11241.2 177.773,-10964.8 178.332,-10997 178.892,-10996.4 179.451,-10476.4 180.01,-10459.4 180.569,-10214 181.129,-9955.73 181.688,-9913.66 182.247,-9680.21 182.806,-9118.06 183.366,-8744.6 183.925,-8701.16 184.484,-8500.08 185.043,-8290.51 185.603,-8222.78 186.162,-7907.66 186.721,-7817.23 187.28,-7612.54 187.84,-7516.05 188.399,-7221.98 188.958,-7114.78 189.517,-6998.89 190.077,-6895.75 190.636,-6785.69 191.195,-6586.28 191.754,-6461.27 192.314,-6330.22 192.873,-6136.09 193.432,-5883.33 193.991,-5693.56 194.551,-5392.74 195.11,-5231.01 195.669,-4958.4 196.228,-4870.13 196.788,-4719.95 197.347,-4516.54 197.906,-4425.26 198.465,-4239.16 199.025,-4056.98 199.584,-3787.68 200.143,-3581.97 200.702,-3515.05 201.262,-3401.54 201.821,-3290.42 202.38,-3133.19 202.939,-3019.18 203.499,-2909.55 204.058,-2764.76 204.617,-2631.3 205.176,-2563.73 205.736,-2466.4 206.295,-2332.84 206.854,-2212.75 207.413,-2085.56 207.973,-1967.16 208.532,-1886.54 209.091,-1773.88 209.65,-1667.08 210.21,-1535.74 210.769,-1490.64 211.328,-1444.79 211.887,-1347.85 212.447,-1278.44 213.006,-1209.01 213.565,-1141.73 214.124,-1048.29 214.684,-981.082 215.243,-945.323 215.802,-778.963 216.361,-648.62 216.921,-577.206 217.48,-528.21 218.039,-481.899 218.598,-411.895 219.158,-366.698 219.717,-324.367 220.276,-260.64 220.835,-220.215 221.395,-183.101 221.954,-120.704 222.513,-83.7596 223.072,-66.7118 223.632,-51.873 224.191,28.0824 224.75,41.9784 225.309,35.1115 225.869,50.0919 226.428,86.0205 226.987,120.235 227.546,153.408 228.106,187.399 228.665,200.528 229.224,253.881 229.783,284.062 230.343,315.244 230.902,287.875 231.461,320.404 232.02,350.852 232.58,382.966 233.139,415.957 233.698,450.986 234.257,481.948 234.817,603.118 235.376,620.892 235.935,622.996 236.494,643.043 237.054,640.796 237.613,627.441 238.172,649.847 238.731,650.637 239.291,694.951 239.85,700.265 240.409,701.184 240.968,706.793 241.528,710.472 242.087,734.13 242.646,775.025 243.205,778.45 243.765,779.951 244.324,817.396 244.883,798.859 245.442,854.591 246.002,872.32 246.561,851.469 247.12,849.422 247.679,904.021 248.239,973.426 248.798,945.169 249.357,978.727 249.916,989.475 250.476,1016.3 251.035,1008.31 251.594,1016.54 252.153,1077.64 252.713,1084.04 253.272,1087.51 253.831,1093.98 254.39,1080.31 254.95,1123.17 255.509,1146.37 256.068,1130.51 256.627,1136.13 257.187,1174.17 257.746,1157.5 258.305,1110.19 258.864,1098.81 259.424,1121.5 259.983,1091.8 260.542,1083.94 261.101,1088.41 261.661,1109.41 262.22,1101 262.779,1073.61 263.338,1061.81 263.898,1051.68 264.457,1083.23 265.016,1043.86 265.575,1035.06 266.135,1029.06 266.694,1008.08 267.253,1001.27 267.812,1019.3 268.372,995.093 268.931,993.175 269.49,989.046 270.049,1002.29 270.609,1017.19 271.168,994.402 271.727,1037.68 272.286,1066.03 272.846,1075.02 273.405,1086.18 273.964,1092.04 274.523,1114.17 275.083,1155.68 275.642,1140.89 276.201,1046.35 276.76,1075.55 277.32,1068.88 277.879,1027.88 278.438,1023.38 278.997,1013.26 279.557,991.513 280.116,1006.14 280.675,1003.14 281.234,965.882 281.794,963.521 282.353,975.686 282.912,953.112 283.471,968.957 284.031,947.815 284.59,947.679 285.149,960.064 285.708,941.621 286.268,944.799 286.827,978.281 287.386,959.847 287.945,958.092 288.505,973.775 289.064,971.814 289.623,1017.93 290.182,1044.92 290.742,1086.75 291.301,1079.1 291.86,1089.22 292.419,1078.66 292.979,1119.05 293.538,1138.4 294.097,1111.63 294.656,1118.63 295.216,1106.15 295.775,1107.7 296.334,1111.79 296.893,1099.1 297.453,1089.01 298.012,1050.73 298.571,1073.52 299.13,1050.08 299.69,1041 300.249,1035.11 300.808,1045.95 301.368,1034.7 301.927,1026.87 302.486,955.313 303.045,952.105 303.605,948.283 304.164,964.051 304.723,958.047 305.282,989.034 305.842,986.339 306.401,983.166 306.96,979.107 307.519,974.608 308.079,1001.48 308.638,980.357 309.197,1007.8 309.756,984.241 310.316,963.116 310.875,958.7 311.434,970.167 311.993,979.696 312.553,940.544 313.112,969.603 313.671,964.068 314.23,959.314 314.79,954.809 315.349,966.172 315.908,962.756 316.467,975.72 317.027,969.529 317.586,979.165 318.145,941.463 318.704,966.993 319.264,945.389 319.823,941.245 320.382,937.665 320.941,930.89 321.501,959.504 322.06,971.436 322.619,983.168 323.178,1006.32 323.738,1004.3 324.297,979.996 324.856,940.254 325.415,949.893 325.975,962.939 326.534,926.677 327.093,909.689 327.652,923.256 328.212,920.78 328.771,930.619 329.33,948.553 329.889,925.388 330.449,940.891 331.008,948.586 331.567,975.609 332.126,970.167 332.686,961.011 333.245,954.036 333.804,947.009 334.363,940.335 334.923,918.722 335.482,916.451 336.041,910.137 336.6,906.812 337.16,902.577 337.719,887.428 338.278,904.017 338.837,933.107 339.397,893.806 339.956,921.815 340.515,921.411 341.074,887.252 341.634,902.775 342.193,896.345 342.752,879.569 343.311,890.597 343.871,905.457 344.43,902.255 344.989,914.999 345.548,929.593 346.108,924.834 346.667,888.264 347.226,865.804 347.785,865.162 348.345,845.161 348.904,842.949 349.463,858.971 350.022,870.291 350.582,870.005 351.141,884.291 351.7,885.548 352.259,882.927 352.819,865.654 353.378,846.543 353.937,859.332 354.496,858.399 355.056,855.966 355.615,884.832 356.174,898.842 356.733,913.031 357.293,908.27 357.852,900.882 358.411,896.874 358.97,940.841 359.53,947.942 360.089,961.618 360.648,938.873 361.207,950.803 361.767,941.643 362.326,935.366 362.885,947.408 363.444,925.57 364.004,921.09 364.563,934.246 365.122,945.749 365.681,938.616 366.241,931.406 366.8,908.111 367.359,886.463 367.918,898.666 368.478,910.811 369.037,906.336 369.596,915.49 370.155,905.913 370.715,867.679 371.274,847.015 371.833,842.05 372.392,854.55 372.952,854.306 373.511,851.092 374.07,835.944 374.629,852.597 375.189,836.08 375.748,805.372 376.307,790.695 376.866,810.211 377.426,811.109 377.985,798.945 378.544,831.002 379.103,848.722 379.663,879.007 380.222,894.666 380.781,905.16 381.34,897.87 381.9,828.743 382.459,876.517 383.018,891.015 383.577,867.318 384.137,877.46 384.696,853.075 385.255,831.702 385.814,813.801 386.374,798.619 386.933,861.495 387.492,875.071 388.051,850.318 388.611,846.936 389.17,859.396 389.729,860.193 390.288,873.329 390.848,869.617 391.407,882.395 391.966,874.852 392.525,887.832 393.085,884.441 393.644,842.821 394.203,838.104 394.762,834.198 395.322,815.005 395.881,846.681 396.44,859.638 396.999,886.802 397.559,848.787 398.118,847.163 398.677,878.913 399.236,889.5 399.796,898.235 400.355,910.542 400.914,903.006 401.473,910.061 402.033,899.506 402.592,878.626 403.151,861.664 403.71,854.246 404.27,836.149 404.829,818.14 405.388,799.938 405.947,734.94 406.507,735.879 407.066,702.958 407.625,674.104 408.184,681.001 408.744,685.828 409.303,704.667 409.862,675.601 410.421,680.923 410.981,687.519 411.54,660.978 412.099,653.735 412.658,645.339 413.218,654.917 413.777,660.806 414.336,699.912 414.895,752.196 415.455,722.347 416.014,757.989 416.573,762.493 417.132,762.244 417.692,745.793 418.251,732.554 418.81,718.787 419.369,707.565 419.929,712.957 420.488,715.607 421.047,748.185 421.606,732.39 422.166,752.992 422.725,782.782 423.284,831.156 423.843,845.64 424.403,860.804 424.962,837.613 425.521,850.49 426.08,844.581 426.64,871.361 427.199,882.119 427.758,827.935 428.318,808.517 428.877,837.103 429.436,866.904 429.995,878.254 430.555,906.004 431.114,902.37 431.673,942.725 432.232,936.856 432.792,944.075 433.351,919.538 433.91,882.934 434.469,878.482 435.029,875.9 435.588,886.067 436.147,847.243 436.706,813.28 437.266,797.872 437.825,781.694 438.384,778.454 438.943,793.071 439.503,820.621 440.062,770.611 440.621,734.31 441.18,736.295 441.74,721.547 442.299,719.335 442.858,725.246 443.417,705.107 443.977,707.937 444.536,712.823 445.095,715.634 445.654,701.862 446.214,688.6 446.773,722.716 447.332,719.774 447.891,709.489 448.451,695.294 449.01,685.255 449.569,706.036 450.128,676.408 450.688,730.215 451.247,728.904 451.806,727.52 452.365,728.365 452.925,728.813 453.484,792.704 454.043,741.081 454.602,759.763 455.162,774.194 455.721,851.038 456.28,896.468 456.839,887.569 457.399,880.729 457.958,890.091 458.517,917.515 459.076,909.987 459.636,901.781 460.195,858.518 460.754,838.605 461.313,833.282 461.873,876.288 462.432,865.764 462.991,857.308 463.55,866.526 464.11,845.557 464.669,872.641 465.228,900.785 465.787,938.248 466.347,941.573 466.906,882.639 467.465,907.666 468.024,914.537 468.584,902.693 469.143,906.15 469.702,866.642 470.261,843.831 470.821,854.209 471.38,832.809 471.939,812.985 472.498,791.071 473.058,805.728 473.617,802.595 474.176,799.362 474.735,777.885 475.295,764.535 475.854,760.698 476.413,745.403 476.972,778.137 477.532,775.36 478.091,770.521 478.65,749.427 479.209,762.72 479.769,774.769 480.328,758.868 480.887,775.123 481.446,769.331 482.006,766.744 482.565,748.658 483.124,745.002 483.683,741.566 484.243,743.495 484.802,771.426 485.361,755.388 485.92,770.309 486.48,753.193 487.039,766.885 487.598,780.267 488.157,762.072 488.717,761.941 489.276,759.997 489.835,757.676 490.394,743.769 490.954,728.678 491.513,693.923 492.072,713.265 492.631,743.826 493.191,726.704 493.75,759.277 494.309,726.875 494.868,727.02 495.428,739.72 495.987,723.145 496.546,706.55 497.105,673.2 497.665,661.233 498.224,650.59 498.783,655.015 499.342,676.037 499.902,682.818 500.461,718.979 501.02,702.344 501.579,671.386 502.139,669.597 502.698,689.475 503.257,677.775 503.816,713.782 504.376,697.163 504.935,682.042 505.494,685.079 506.053,703.689 506.613,740.307 507.172,721.203 507.731,721.734 508.29,721.493 508.85,705.501 509.409,673.986 509.968,661.423 510.527,681.022 511.087,681.678 511.646,681.291 512.205,683.967 512.764,718.696 513.324,735.852 513.883,699.54 514.442,717.922 515.001,733.322 515.561,716.276 516.12,719.552 516.679,721.72 517.238,721.287 517.798,724.2 518.357,727.65 518.916,776.284 519.475,755.072 520.035,735.673 520.594,717.412 521.153,732.368 521.712,733.721 522.272,730.768 522.831,729.048 523.39,728.206 523.949,710.811 524.509,712.468 525.068,713.555 525.627,716.109 526.186,700.721 526.746,685.31 527.305,686.332 527.864,688.697 528.423,674.814 528.983,696.324 529.542,729.505 530.101,730.726 530.66,700.989 531.22,705.687 531.779,721.782 532.338,722.714 532.897,706.16 533.457,707.178 534.016,679.899 534.575,664.629 535.134,636.248 535.694,643.295 536.253,666.407 536.812,688.054 537.371,690.08 537.931,695.167 538.49,697.884 539.049,700.704 539.608,719.492 540.168,755.144 540.727,754.186 541.286,736.826 541.845,752.354 542.405,768.751 542.964,772.532 543.523,784.839 544.082,829.99 544.642,844.532 545.201,838.079 545.76,833.572 546.319,859.496 546.879,855.693 547.438,846.402 547.997,855.023 548.556,845.895 549.116,805.16 549.675,798.597 550.234,823.461 550.793,802.747 551.353,815.363 551.912,795.05 552.471,807.127 553.031,801.416 553.59,793.076 554.149,789.099 554.708,768.494 555.268,783.07 555.827,797.452 556.386,761.985 556.945,741.066 557.505,755.587 558.064,737.388 558.623,718.463 559.182,734.943 559.742,749.108 560.301,760.885 560.86,774.135 561.419,756.037 561.979,737.347 562.538,752.276 563.097,717.191 563.656,748.965 564.216,730.866 564.775,715.004 565.334,730.371 565.893,730.247 566.453,726.044 567.012,723.271 567.571,737.178 568.13,749.605 568.69,747.594 569.249,744.263 569.808,710.067 570.367,710.832 570.927,713.951 571.486,712.195 572.045,714.916 572.604,700.95 573.164,700.216 573.723,713.675 574.282,710.698 574.841,709.809 575.401,709.84 575.96,694.808 576.519,741.448 577.078,737.519 577.638,719.856 578.197,717.772 578.756,717.386 579.315,701.051 579.875,685.166 580.434,688.811 580.993,676.963 581.552,694.14 582.112,677.404 582.671,663.468 583.23,664.722 583.789,652.26 584.349,641.068 584.908,645.129 585.467,649.658 586.026,668.425 586.586,655.459 587.145,663.46 587.704,668.168 588.263,670.276 588.823,655.283 589.382,661.31 589.941,680.602 590.5,697.02 591.06,710.25 591.619,713.26 592.178,726.314 592.737,706.25 593.297,719.407 593.856,735.521 594.415,730.349 594.974,744.609 595.534,760.308 596.093,740.107 596.652,738.486 597.211,740.886 597.771,737.766 598.33,767.206 598.889,731.307 599.448,678.158 600.008,697.954 600.567,710.553 601.126,759.289 601.685,726.433 602.245,711.678 602.804,728.554 603.363,745.164 603.922,742.072 604.482,722.62 605.041,721.507 605.6,738.13 606.159,751.953 606.719,767.781 607.278,747.271 607.837,733.86 608.396,717.294 608.956,718.062 609.515,714.95 610.074,714.56 610.633,666.982 611.193,669.337 611.752,671.169 612.311,702.307 612.87,704.15 613.43,719.444 613.989,719.19 614.548,723.961 615.107,738.941 615.667,750.258 616.226,766.36 616.785,780.875 617.344,732.444 617.904,729.948 618.463,758.901 619.022,755.161 619.581,769.345 620.141,749.457 620.7,752.471 621.259,763.66 621.818,760.156 622.378,743.247 622.937,774.844 623.496,802.192 624.055,748.056 624.615,710.53 625.174,727.254 625.733,724.916 626.292,726.957 626.852,707.169 627.411,717.988 627.97,734.515 628.529,715.961 629.089,700.817 629.648,681.331 630.207,702.21 630.766,703.801 631.326,736.904 631.885,737.196 632.444,767.395 633.003,811.463 633.563,787.781 634.122,781.858 634.681,778.381 635.24,772.225 635.8,769.962 636.359,797.516 636.918,759.423 637.477,759.669 638.037,725.014 638.596,720.484 639.155,753.62 639.714,717.905 640.274,732.722 640.833,662.314 641.392,677.774 641.951,642.981 642.511,642.726 643.07,711.576 643.629,713.345 644.188,725.64 644.748,690.281 645.307,703.682 645.866,720.642 646.425,722.518 646.985,736.041 647.544,735.365 648.103,714.398 648.662,716.743 649.222,680.648 649.781,702.514 650.34,734.852 650.899,717.47 651.459,698.303 652.018,680.225 652.577,695.937 653.136,708.916 653.696,692.546 654.255,679.482 654.814,680.452 655.373,698.611 655.933,664.442 656.492,632.859 657.051,655.083 657.61,655.08 658.17,640.865 658.729,661.64 659.288,662.076 659.847,710.597 660.407,691.218 660.966,673.377 661.525,659.796 662.084,643.225 662.644,642.745 663.203,658.98 663.762,646.174 664.321,665.693 664.881,616.313 665.44,605.069 665.999,643.645 666.558,632.356 667.118,618.311 667.677,618.481 668.236,593.139 668.795,598.392 669.355,620.565 669.914,641.154 670.473,644.347 671.032,630.529 671.592,603.474 672.151,643.353 672.71,628.044 673.269,649.136 673.829,637.078 674.388,658.227 674.947,659.76 675.506,695.035 676.066,695.871 676.625,692.836 677.184,709.876 677.743,725.928 678.303,724.688 678.862,721.597 679.421,717.725 679.981,734.124 680.54,763.336 681.099,742.521 681.658,725.226 682.218,737.343 682.777,734.765 683.336,717.665 683.895,683.936 684.455,685.137 685.014,654.869 685.573,659.39 686.132,677.899 686.692,713.835 687.251,717.232 687.81,667.015 688.369,637.909 688.929,625.929 689.488,677.061 690.047,677.347 690.606,680.004 691.166,700.368 691.725,732.661 692.284,717.839 692.843,730.306 693.403,728.481 693.962,728.712 694.521,707.576 695.08,694.125 695.64,675.029 696.199,693.972 696.758,724.931 697.317,741.389 697.877,739.521 698.436,735.602 698.995,701.956 699.554,720.103 700.114,717.558 700.673,750.817 701.232,715.759 701.791,700.81 702.351,652.242 702.91,674.186 703.469,671.501 704.028,654.189 704.588,655.967 705.147,670.021 705.706,706.658 706.265,705.878 706.825,720.007 707.384,718.794 707.943,667.877 708.502,655.227 709.062,660.63 709.621,679.291 710.18,664.298 710.739,700.278 711.299,681.34 711.858,670.144 712.417,718.665 712.976,727.672 713.536,740.562 714.095,724.987 714.654,737.081 715.213,737.324 715.773,734.33 716.332,749.154 716.891,746.515 717.45,743.214 718.01,744.331 718.569,741.986 719.128,770.357 719.687,796.746 720.247,772.682 720.806,784.244 721.365,813.024 721.924,836.21 722.484,796.834 723.043,794.364 723.602,795.08 724.161,802.932 724.721,779.154 725.28,758.723 725.839,753.615 726.398,766.976 726.958,794.785 727.517,772.979 728.076,737.443 728.635,737.805 729.195,766.986 729.754,779.258 730.313,740.903 730.872,740.146 731.432,738.167 731.991,700.6 732.55,714.01 733.109,698.364 733.669,682.288 734.228,666.617 734.787,686.076 735.346,735.428 735.906,719.557 736.465,739.817 737.024,738.533 737.583,749.046 738.143,730.833 738.702,717.555 739.261,696.516 739.82,680.264 740.38,680.967 740.939,676.417 741.498,659.177 742.057,660.481 742.617,725.682 743.176,739.187 743.735,736.905 744.294,690.138 744.854,640.793 745.413,628.677 745.972,633.658 746.531,666.908 747.091,683.589 747.65,716.62 748.209,715.615 748.768,699.105 749.328,713.186 749.887,698.34 750.446,700.671 751.005,636.224 751.565,623.8 752.124,610.391 752.683,646.577 753.242,663.518 753.802,679.524 754.361,663.21 754.92,698.658 755.479,700.195 756.039,699.724 756.598,715.739 757.157,699.805 757.716,699.463 758.276,667.055 758.835,668.302 759.394,655.158 759.953,673.501 760.513,659.738 761.072,648.021 761.631,682.847 762.19,651.798 762.75,635.979 763.309,621.297 763.868,589.082 764.427,610.25 764.987,597.507 765.546,618.191 766.105,622.751 766.664,586.719 767.224,593.622 767.783,628.968 768.342,649.827 768.901,664.739 769.461,681.958 770.02,679.116 770.579,677.723 771.138,630.098 771.698,669.711 772.257,655.736 772.816,677.753 773.375,682.475 773.935,666.245 774.494,652.948 775.053,624.105 775.612,595.739 776.172,633.048 776.731,634.125 777.29,636.398 777.849,652.343 778.409,638.97 778.968,622.732 779.527,614.118 780.086,618.273 780.646,621.601 781.205,640.262 781.764,614.57 782.323,587.539 782.883,579.366 783.442,600.425 784.001,642.074 784.56,644.079 785.12,661.97 785.679,665.534 786.238,683.567 786.797,682.493 787.357,647.475 787.916,654.916 788.475,624.206 789.034,630.384 789.594,653.527 790.153,690.675 790.712,724.133 791.271,725.594 791.831,707.018 792.39,690.266 792.949,689.33 793.508,687.056 794.068,686.687 794.627,687.903 795.186,688.194 795.745,703.721 796.305,687.097 796.864,765.368 797.423,762.467 797.982,772.588 798.542,764.035 799.101,744.975 799.66,772.782 800.219,801.618 800.779,778.149 801.338,741.169 801.897,741.155 802.456,755.066 803.016,753.202 803.575,749.408 804.134,764.868 804.693,761.284 805.253,774.101 805.812,783.897 806.371,778.579 806.931,741.466 807.49,735.688 808.049,733.924 808.608,729.768 809.168,712.117 809.727,711.291 810.286,697.515 810.845,727.86 811.405,728.054 811.964,723.505 812.523,720.769 813.082,753.506 813.642,728.472 814.201,723.698 814.76,706.534 815.319,702.214 815.879,702.049 816.438,701.628 816.997,698.61 817.556,696.228 818.116,715.315 818.675,714.007 819.234,713.702 819.793,694.297 820.353,711.57 820.912,664.557 821.471,648.127 822.03,616.725 822.59,653.498 823.149,607.758 823.708,593.314 824.267,634.532 824.827,639.34 825.386,654.667 825.945,655.293 826.504,673.152 827.064,674.876 827.623,694.693 828.182,744.425 828.741,711.972 829.301,710.535 829.86,708.14 830.419,691.455 830.978,707.588 831.538,737.478 832.097,686.268 832.656,690.911 833.215,645.755 833.775,636.036 834.334,620.037 834.893,607.399 835.452,645.324 836.012,679.685 836.571,694.544 837.13,679.078 837.689,698.847 838.249,679.304 838.808,709.921 839.367,724.807 839.926,719.147 840.486,684.916 841.045,688.086 841.604,705.363 842.163,704.876 842.723,702.696 843.282,700.407 843.841,701.345 844.4,683.012 844.96,619.976 845.519,608.657 846.078,615.211 846.637,648.923 847.197,667.75 847.756,647.131 848.315,665.853 848.874,621.954 849.434,640.328 849.993,644.964 850.552,664.996 851.111,667.733 851.671,668.344 852.23,700.306 852.789,731.096 853.348,725.239 853.908,722.91 854.467,673.251 855.026,689.632 855.585,694.283 856.145,681.373 856.704,665.099 857.263,682.241 857.822,634.273 858.382,638.204 858.941,639.503 859.5,623.908 860.059,657.398 860.619,658.57 861.178,675.914 861.737,678.203 862.296,661.152 862.856,644.206 863.415,627.922 863.974,628.868 864.533,650.321 865.093,681.527 865.652,700.087 866.211,731.18 866.77,716.241 867.33,735.518 867.889,778.96 868.448,772.256 869.007,750.677 869.567,745.307 870.126,740.931 870.685,788.254 871.244,750.179 871.804,777.843 872.363,771.344 872.922,768.834 873.481,780.833 874.041,810.023 874.6,820.627 875.159,799.043 875.718,791.037 876.278,798.85 876.837,793.105 877.396,769.801 877.955,765.462 878.515,744.368 879.074,724.929 879.633,723.149 880.192,739.386 880.752,737.256 881.311,735.385 881.87,731.025 882.429,731.145 882.989,711.64 883.548,706.252 884.107,708.988 884.666,701.847 885.226,684.311 885.785,665.957 886.344,696.085 886.903,744.593 887.463,714.533 888.022,713.819 888.581,712.516 889.14,698.167 889.7,700.725 890.259,668.534 890.818,672.353 891.377,657.516 891.937,676.738 892.496,709.03 893.055,720.374 893.614,718.227 894.174,704.231 894.733,722.115 895.292,721.212 895.851,703.093 896.411,703.554 896.97,718.142 897.529,746.58 898.088,711.519 898.648,725.32 899.207,724.177 899.766,739.598 900.325,739.891 900.885,718.278 901.444,731.179 902.003,761.676 902.562,740.234 903.122,737.112 903.681,733.287 904.24,696.392 904.799,712.32 905.359,674.138 905.918,657.874 906.477,662.443 907.036,644.296 907.596,647.945 908.155,649 908.714,653.264 909.273,636.415 909.833,639.37 910.392,641.939 910.951,655.8 911.51,622.645 912.07,610.78 912.629,629.996 913.188,633.072 913.747,635.233 914.307,639.15 914.866,684.391 915.425,700.495 915.984,700.673 916.544,719.529 917.103,719.392 917.662,716.819 918.221,749.242 918.781,699.568 919.34,730.481 919.899,723.682 920.458,725.066 921.018,673.787 921.577,675.426 922.136,676.168 922.695,679.066 923.255,697.706 923.814,698.646 924.373,694.887 924.932,712.375 925.492,730.407 926.051,717.858 926.61,730.908 927.169,696.76 927.729,649.222 928.288,636.513 928.847,655.411 929.406,643.366 929.966,645.529 930.525,614.523 931.084,650.694 931.644,653.115 932.203,672.585 932.762,656.089 933.321,691.714 933.881,693.548 934.44,663.411 934.999,668.242 935.558,667.623 936.118,664.547 936.677,711.97 937.236,710.859 937.795,692.319 938.355,656.267 938.914,704.765 939.473,737.853 940.032,766.55 940.592,794.619 941.151,821.2 941.71,750.642 942.269,766.068 942.829,746.402 943.388,729.12 943.947,729.013 944.506,759.642 945.066,803.537 945.625,795.167 946.184,739.902 946.743,721.305 947.303,721.226 947.862,720.807 948.421,737.519 948.98,684.684 949.54,669.28 950.099,655.218 950.658,651.097 951.217,640.881 951.777,629.477 952.336,613.518 952.895,636.189 953.454,607.52 954.014,626.321 954.573,597.27 955.132,618.593 955.691,605.071 956.251,611.011 956.81,597.886 957.369,616.505 957.928,617.946 958.488,571.361 959.047,577.165 959.606,564.731 960.165,589.395 960.725,594.164 961.284,631.325 961.843,684.175 962.402,701.638 962.962,735.641 963.521,735.397 964.08,733.403 964.639,746.951 965.199,745.389 965.758,709.566 966.317,707.324 966.876,722.32 967.436,736.508 967.995,699.949 968.554,715.312 969.113,714.921 969.673,698.849 970.232,696.661 970.791,681.612 971.35,699.796 971.91,717.338 972.469,734.168 973.028,713.686 973.587,727.639 974.147,724.469 974.706,734.988 975.265,733.522 975.824,717.896 976.384,718.603 976.943,715.879 977.502,713.112 978.061,693.166 978.621,707.474 979.18,706.088 979.739,738.272 980.298,749.646 980.858,747.894 981.417,730.322 981.976,693.471 982.535,692.07 983.095,686.703 983.654,700.69 984.213,689.381 984.772,692.14 985.332,676.714 985.891,681.227 986.45,682.88 987.009,667.63 987.569,683.776 988.128,702.821 988.687,698.103 989.246,678.392 989.806,643.815 990.365,663.55 990.924,648.281 991.483,685.093 992.043,669.554 992.602,625.775 993.161,648.739 993.72,633.232 994.28,634.853 994.839,622.249 995.398,611.452 995.957,614.959 996.517,635.764 997.076,636.681 997.635,620.435 998.194,623.316 998.754,628.03 999.313,662.522 999.872,647.544 1000.43,650.253 1000.99,633.745 1001.55,668.597 1002.11,683.48 1002.67,683.976 1003.23,636.435 1003.79,674.784 1004.35,657.149 1004.91,641.381 1005.46,659.185 1006.02,625.234 1006.58,642.787 1007.14,598.204 1007.7,653.372 1008.26,654.96 1008.82,673.663 1009.38,643.295 1009.94,631.243 1010.5,631.533 1011.06,616.603 1011.62,636.051 1012.18,642.095 1012.73,644.031 1013.29,662.773 1013.85,661.461 1014.41,666.778 1014.97,698.405 1015.53,703.278 1016.09,671.861 1016.65,656.267 1017.21,691.539 1017.77,657.887 1018.33,689.214 1018.89,668.74 1019.45,668.503 1020.01,669.011 1020.56,685.034 1021.12,649.205 1021.68,653.073 1022.24,655.112 1022.8,625.153 1023.36,626.855 1023.92,610.866 1024.48,631.84 1025.04,713.816 1025.6,730.018 1026.16,726.728 1026.72,744.388 1027.28,709.471 1027.83,693.478 1028.39,709.217 1028.95,708.956 1029.51,710.303 1030.07,688.956 1030.63,706.375 1031.19,737.143 1031.75,703.074 1032.31,685.456 1032.87,699.701 1033.43,671.056 1033.99,655.538 1034.55,643.056 1035.1,633.194 1035.66,620.568 1036.22,618.631 1036.78,587.482 1037.34,572.374 1037.9,593.27 1038.46,613.335 1039.02,620.418 1039.58,623.02 1040.14,627.599 1040.7,633.993 1041.26,653.701 1041.82,686.529 1042.38,766.375 1042.93,778.307 1043.49,785.66 1044.05,795.873 1044.61,758.019 1045.17,737.942 1045.73,752.026 1046.29,747.276 1046.85,758.5 1047.41,739.915 1047.97,772.618 1048.53,736.713 1049.09,752.378 1049.65,733.703 1050.2,696.57 1050.76,712.657 1051.32,724.72 1051.88,723.253 1052.44,720.351 1053,685.815 1053.56,670.728 1054.12,686.264 1054.68,652.861 1055.24,619.192 1055.8,670.457 1056.36,687.441 1056.92,720.901 1057.48,734.356 1058.03,750.612 1058.59,750.359 1059.15,750.561 1059.71,747.613 1060.27,757.438 1060.83,783.036 1061.39,730.762 1061.95,714.073 1062.51,744.596 1063.07,724.57 1063.63,704.202 1064.19,706.136 1064.75,721.736 1065.3,685.149 1065.86,684.44 1066.42,700.033 1066.98,736.726 1067.54,766.9 1068.1,731.791 1068.66,744.713 1069.22,727.539 1069.78,742.102 1070.34,724.064 1070.9,721.464 1071.46,720.595 1072.02,735.404 1072.57,732.696 1073.13,731.438 1073.69,731.658 1074.25,698.697 1074.81,731.408 1075.37,761.846 1075.93,738.743 1076.49,755.114 1077.05,733.04 1077.61,731.858 1078.17,730.618 1078.73,744.206 1079.29,721.669 1079.85,718.448 1080.4,718.94 1080.96,717.014 1081.52,704.261 1082.08,704.397 1082.64,723.067 1083.2,737.268 1083.76,703.644 1084.32,701.682 1084.88,652.533 1085.44,667.44 1086,670.137 1086.56,651.736 1087.12,684.291 1087.67,703.047 1088.23,721.858 1088.79,703.53 1089.35,686.232 1089.91,667.528 1090.47,650.629 1091.03,617.228 1091.59,621.982 1092.15,623.693 1092.71,610.643 1093.27,598.084 1093.83,618.47 1094.39,609.53 1094.94,649.7 1095.5,620.658 1096.06,623.317 1096.62,639.945 1097.18,670.239 1097.74,688.035 1098.3,654.784 1098.86,640.964 1099.42,640.376 1099.98,624.152 1100.54,611.525 1101.1,566.829 1101.66,586.419 1102.22,542.45 1102.77,583.12 1103.33,589.819 1103.89,597.023 1104.45,585.187 1105.01,589.997 1105.57,607.715 1106.13,599.023 1106.69,585.545 1107.25,593.853 1107.81,569.209 1108.37,573.951 1108.93,581.745 1109.49,619.214 1110.04,610.363 1110.6,615.227 1111.16,605.105 1111.72,624.916 1112.28,607.864 1112.84,616.897 1113.4,605.596 1113.96,608.498 1114.52,617.207 1115.08,620.686 1115.64,657.505 1116.2,660.82 1116.76,663.413 1117.31,664.888 1117.87,697.595 1118.43,667.401 1118.99,653.934 1119.55,657.661 1120.11,658.745 1120.67,677.672 1121.23,678.679 1121.79,680.908 1122.35,636.574 1122.91,638.379 1123.47,657.621 1124.03,706.953 1124.59,740.207 1125.14,749.693 1125.7,718.705 1126.26,737.709 1126.82,750.859 1127.38,731.148 1127.94,728.309 1128.5,723.559 1129.06,721.962 1129.62,736.59 1130.18,753.598 1130.74,749.695 1131.3,760.826 1131.86,743.334 1132.41,706.311 1132.97,707.303 1133.53,690.247 1134.09,689.653 1134.65,674.523 1135.21,709.399 1135.77,705.621 1136.33,693.406 1136.89,692.574 1137.45,694.117 1138.01,708.175 1138.57,703.877 1139.13,668.019 1139.68,669.739 1140.24,687.486 1140.8,718.748 1141.36,748.572 1141.92,728.213 1142.48,723.945 1143.04,705.156 1143.6,753.175 1144.16,720.305 1144.72,730.447 1145.28,725.112 1145.84,727.18 1146.4,741.994 1146.96,741.098 1147.51,705.357 1148.07,751.274 1148.63,780.729 1149.19,758.971 1149.75,738.059 1150.31,751.274 1150.87,764.398 1151.43,709.053 1151.99,707.816 1152.55,707.181 1153.11,707.043 1153.67,690.563 1154.23,705.391 1154.78,722.364 1155.34,740.036 1155.9,739.232 1156.46,719.06 1157.02,749.598 1157.58,744.343 1158.14,757.581 1158.7,721.43 1159.26,705.244 1159.82,684.456 1160.38,667.672 1160.94,665.434 1161.5,648.646 1162.05,663.662 1162.61,648.36 1163.17,637.483 1163.73,640.155 1164.29,672.778 1164.85,657.154 1165.41,638.817 1165.97,608.077 1166.53,592.852 1167.09,598.491 1167.65,586.094 1168.21,588.84 1168.77,612.374 1169.33,635.114 1169.88,638.453 1170.44,657.463 1171,691.283 1171.56,688.112 1172.12,685.949 1172.68,699.923 1173.24,663.672 1173.8,648.579 1174.36,667.597 1174.92,686.324 1175.48,681.421 1176.04,680.628 1176.6,647.141 1177.15,664.299 1177.71,634.259 1178.27,652.724 1178.83,655.595 1179.39,653.275 1179.95,687.969 1180.51,688.713 1181.07,689.352 1181.63,672.502 1182.19,675.715 1182.75,674.759 1183.31,687.76 1183.87,704.245 1184.43,700.688 1184.98,685.925 1185.54,668.98 1186.1,654.53 1186.66,656.389 1187.22,652.64 1187.78,635.414 1188.34,641.333 1188.9,657.672 1189.46,645.56 1190.02,660.435 1190.58,729.793 1191.14,713.176 1191.7,711.874 1192.25,692.22 1192.81,688.506 1193.37,704.698 1193.93,705.885 1194.49,670.322 1195.05,687.597 1195.61,689.479 1196.17,704.853 1196.73,720.775 1197.29,719.995 1197.85,698.918 1198.41,696.523 1198.97,711.579 1199.52,707.935 1200.08,689.936 1200.64,706.786 1201.2,724.116 1201.76,740.822 1202.32,757.769 1202.88,754.462 1203.44,736.858 1204,700.728 1204.56,699.291 1205.12,696.668 1205.68,615.874 1206.24,621.853 1206.8,608.09 1207.35,613.046 1207.91,637.216 1208.47,655.021 1209.03,686.836 1209.59,686.672 1210.15,701.887 1210.71,686.047 1211.27,701.209 1211.83,685.118 1212.39,734.896 1212.95,746.704 1213.51,761.322 1214.07,742.016 1214.62,724.117 1215.18,705.098 1215.74,707.205 1216.3,708.269 1216.86,737.31 1217.42,747.408 1217.98,727.716 1218.54,705.158 1219.1,750.457 1219.66,765.438 1220.22,750.494 1220.78,782.129 1221.34,742.923 1221.89,769.362 1222.45,733.059 1223.01,748.032 1223.57,695.455 1224.13,681.444 1224.69,649.638 1225.25,650.916 1225.81,619.164 1226.37,621.714 1226.93,607.478 1227.49,612.499 1228.05,632.068 1228.61,634.518 1229.17,603.506 1229.72,576.554 1230.28,596.056 1230.84,581.705 1231.4,569.861 1231.96,611.863 1232.52,631.317 1233.08,614.426 1233.64,663.785 1234.2,694.811 1234.76,693.516 1235.32,676.187 1235.88,692.158 1236.44,724.393 1236.99,690.935 1237.55,674.149 1238.11,642.942 1238.67,630.873 1239.23,669.755 1239.79,660.786 1240.35,632.67 1240.91,637.508 1241.47,642.848 1242.03,644.111 1242.59,683.619 1243.15,715.772 1243.71,710.9 1244.26,713.308 1244.82,708.071 1245.38,725.356 1245.94,711.019 1246.5,707.383 1247.06,704.975 1247.62,686.641 1248.18,719.409 1248.74,699.982 1249.3,665.271 1249.86,697.491 1250.42,663.216 1250.98,712.332 1251.54,728.495 1252.09,742.583 1252.65,719.421 1253.21,748.064 1253.77,779.741 1254.33,787.228 1254.89,717.511 1255.45,748.394 1256.01,747.012 1256.57,725.992 1257.13,725.097 1257.69,727.19 1258.25,720.832 1258.81,701.088 1259.36,716.128 1259.92,732.749 1260.48,694.921 1261.04,724.284 1261.6,708.064 1262.16,723.369 1262.72,738.355 1263.28,737.211 1263.84,682.886 1264.4,685.527 1264.96,682.032 1265.52,714.459 1266.08,695.19 1266.63,709.483 1267.19,708.631 1267.75,708.438 1268.31,774.428 1268.87,784.996 1269.43,761.981 1269.99,757.07 1270.55,752.419 1271.11,700.038 1271.67,698.04 1272.23,714.442 1272.79,743.321 1273.35,738.002 1273.91,733.92 1274.46,730.978 1275.02,730.196 1275.58,660.865 1276.14,681.008 1276.7,696.425 1277.26,697.515 1277.82,667.544 1278.38,667.081 1278.94,700.702 1279.5,665.101 1280.06,650.544 1280.62,668.426 1281.18,650.987 1281.73,653.088 1282.29,668.507 1282.85,653.494 1283.41,672.574 1283.97,639.185 1284.53,639.081 1285.09,640.728 1285.65,647.561 1286.21,665.133 1286.77,683.001 1287.33,685.611 1287.89,685.691 1288.45,667.11 1289,684.925 1289.56,686.211 1290.12,700.567 1290.68,668.347 1291.24,637.318 1291.8,670.511 1292.36,654.343 1292.92,687.001 1293.48,667.573 1294.04,668.82 1294.6,652.735 1295.16,669.994 1295.72,686.087 1296.28,668.764 1296.83,667.903 1297.39,681.217 1297.95,662.613 1298.51,631.125 1299.07,635.482 1299.63,655.207 1300.19,656.591 1300.75,677.442 1301.31,663.542 1301.87,679.949 1302.43,665.38 1302.99,668.847 1303.55,696.794 1304.1,713.39 1304.66,695.864 1305.22,694.178 1305.78,695.882 1306.34,693.749 1306.9,674.599 1307.46,673.896 1308.02,689.439 1308.58,674.587 1309.14,643.277 1309.7,691.772 1310.26,724.66 1310.82,771.17 1311.38,767.587 1311.93,733.13 1312.49,714.501 1313.05,729.983 1313.61,762.992 1314.17,728.873 1314.73,744.439 1315.29,726.904 1315.85,739.133 1316.41,767.932 1316.97,799.209 1317.53,790.648 1318.09,784.819 1318.65,729.326 1319.2,709.239 1319.76,737.431 1320.32,734.051 1320.88,713.09 1321.44,743.899 1322,723.003 1322.56,720.372 1323.12,716.965 1323.68,726.537 1324.24,720.781 1324.8,702.562 1325.36,713.649 1325.92,711.581 1326.47,710.353 1327.03,709.258 1327.59,675.521 1328.15,692.92 1328.71,692.079 1329.27,706.951 1329.83,675.306 1330.39,678.684 1330.95,662.28 1331.51,647.625 1332.07,630.533 1332.63,633.501 1333.19,655.805 1333.75,706.984 1334.3,766.847 1334.86,764.24 1335.42,748.055 1335.98,743.661 1336.54,742.04 1337.1,706.539 1337.66,689.396 1338.22,690.953 1338.78,669.922 1339.34,674.179 1339.9,692.927 1340.46,693.09 1341.02,661.913 1341.57,629.868 1342.13,598.151 1342.69,633.474 1343.25,633.46 1343.81,635.181 1344.37,636.827 1344.93,672.514 1345.49,687.987 1346.05,670.972 1346.61,701.722 1347.17,636.539 1347.73,653.38 1348.29,657.783 1348.84,629.756 1349.4,603.156 1349.96,623.453 1350.52,608.613 1351.08,626.819 1351.64,645.213 1352.2,631.876 1352.76,651.288 1353.32,651.712 1353.88,649.251 1354.44,714.924 1355,743.808 1355.56,787.318 1356.12,783.126 1356.67,779.47 1357.23,710.737 1357.79,644.854 1358.35,598.571 1358.91,602.009 1359.47,622.059 1360.03,670.911 1360.59,656.963 1361.15,658.874 1361.71,611.066 1362.27,616.92 1362.83,608.588 1363.39,610.717 1363.94,630.962 1364.5,602.163 1365.06,607.482 1365.62,628.345 1366.18,660.828 1366.74,710.673 1367.3,691.719 1367.86,691.884 1368.42,655.996 1368.98,637.428 1369.54,657.775 1370.1,677.503 1370.66,679.817 1371.21,678.388 1371.77,664.186 1372.33,715.208 1372.89,715.102 1373.45,719.393 1374.01,751.266 1374.57,733.658 1375.13,731.84 1375.69,764.296 1376.25,775.305 1376.81,721.985 1377.37,704.17 1377.93,687.23 1378.49,703.816 1379.04,702.874 1379.6,688.261 1380.16,686.404 1380.72,685.979 1381.28,686.971 1381.84,636.473 1382.4,690.734 1382.96,707.946 1383.52,721.368 1384.08,717.701 1384.64,714.327 1385.2,724.264 1385.76,723.786 1386.31,721.046 1386.87,704.259 1387.43,706.184 1387.99,688.303 1388.55,689.992 1389.11,674.301 1389.67,591.78 1390.23,596.172 1390.79,584.432 1391.35,605.513 1391.91,578.91 1392.47,584.413 1393.03,575.248 1393.58,581.443 1394.14,586.137 1394.7,624.286 1395.26,593.795 1395.82,580.654 1396.38,603.198 1396.94,606.058 1397.5,624.973 1398.06,631.034 1398.62,633.979 1399.18,656.019 1399.74,676.846 1400.3,677.385 1400.86,742.746 1401.41,723.623 1401.97,721.698 1402.53,737.671 1403.09,719.72 1403.65,748.547 1404.21,713.802 1404.77,758.707 1405.33,771.954 1405.89,784.809 1406.45,783.895 1407.01,762.601 1407.57,759.12 1408.13,738.71 1408.68,751.56 1409.24,794.62 1409.8,805.085 1410.36,783.41 1410.92,779.574 1411.48,723.864 1412.04,739.959 1412.6,756.36 1413.16,749.94 1413.72,778.377 1414.28,743.29 1414.84,723.351 1415.4,687.636 1415.95,689.2 1416.51,738.635 1417.07,719.833 1417.63,704.37 1418.19,751.795 1418.75,718.176 1419.31,734.1 1419.87,734.459 1420.43,747.64 1420.99,744.725 1421.55,709.178 1422.11,689.21 1422.67,668.151 1423.23,635.79 1423.78,685.81 1424.34,683.04 1424.9,695.193 1425.46,658.226 1426.02,689.611 1426.58,671.543 1427.14,670.288 1427.7,670.665 1428.26,688.726 1428.82,703.371 1429.38,684.274 1429.94,684.226 1430.5,687.548 1431.05,672.119 1431.61,674.4 1432.17,625.98 1432.73,615.447 1433.29,585.808 1433.85,606.316 1434.41,625.937 1434.97,631.134 1435.53,648.752 1436.09,648.761 1436.65,632.839 1437.21,620.87 1437.77,622.028 1438.33,626.149 1438.88,646.899 1439.44,694.163 1440,712.017 1440.56,708.197 1441.12,675.187 1441.68,672.962 1442.24,625.522 1442.8,629.859 1443.36,633.058 1443.92,651.149 1444.48,653.416 1445.04,638.276 1445.6,640.541 1446.15,657.907 1446.71,659.921 1447.27,661.889 1447.83,681.255 1448.39,647.631 1448.95,615.82 1449.51,665.339 1450.07,618.541 1450.63,607.009 1451.19,624.714 1451.75,625.306 1452.31,629.556 1452.87,664.906 1453.42,712.462 1453.98,730.037 1454.54,747.177 1455.1,758.8 1455.66,723.682 1456.22,738.912 1456.78,722.507 1457.34,769.871 1457.9,751.622 1458.46,731.091 1459.02,731.221 1459.58,731.536 1460.14,695.517 1460.7,695.946 1461.25,712.866 1461.81,679.836 1462.37,680.401 1462.93,715.471 1463.49,727.614 1464.05,739.888 1464.61,754.502 1465.17,780.104 1465.73,774.118 1466.29,736.09 1466.85,732.864 1467.41,715.435 1467.97,710.583 1468.52,679.733 1469.08,680.602 1469.64,675.784 1470.2,673.05 1470.76,659.66 1471.32,696.983 1471.88,694.068 1472.44,679.246 1473,715.674 1473.56,746.906 1474.12,726.498 1474.68,710.271 1475.24,663.676 1475.79,680.312 1476.35,683.038 1476.91,698.991 1477.47,698.161 1478.03,710.994 1478.59,712.979 1479.15,681.814 1479.71,700.638 1480.27,684.532 1480.83,641.699 1481.39,641.37 1481.95,625.649 1482.51,611.533 1483.07,597.178 1483.62,583.378 1484.18,604.561 1484.74,611.564 1485.3,612.676 1485.86,631.648 1486.42,652.735 1486.98,683.726 1487.54,716.979 1488.1,716.994 1488.66,731.78 1489.22,714.632 1489.78,681.551 1490.34,683.317 1490.89,683.065 1491.45,680.367 1492.01,680.855 1492.57,681.494 1493.13,700.313 1493.69,679.641 1494.25,711.991 1494.81,740.232 1495.37,720.242 1495.93,722.868 1496.49,673.819 1497.05,660.261 1497.61,678.023 1498.16,657.845 1498.72,688.364 1499.28,736.808 1499.84,735.894 1500.4,715.453 1500.96,681.965 1501.52,698.906 1502.08,744.739 1502.64,740.543 1503.2,739.493 1503.76,768.737 1504.32,768.796 1504.88,745.649 1505.44,742.141 1505.99,702.398 1506.55,717.713 1507.11,715.212 1507.67,697.219 1508.23,694.866 1508.79,659.822 1509.35,693.955 1509.91,725.528 1510.47,721.993 1511.03,767.37 1511.59,764.899 1512.15,760.635 1512.71,756.595 1513.26,752.59 1513.82,731.319 1514.38,711.601 1514.94,708.065 1515.5,704.702 1516.06,699.938 1516.62,682.561 1517.18,667.096 1517.74,686.802 1518.3,639.262 1518.86,643.977 1519.42,662.491 1519.98,660.497 1520.53,677.289 1521.09,690.781 1521.65,661.47 1522.21,632.212 1522.77,656.012 1523.33,654.954 1523.89,659.477 1524.45,674.618 1525.01,660.896 1525.57,663.614 1526.13,652.93 1526.69,655.326 1527.25,675.889 1527.81,673.891 1528.36,656.604 1528.92,706.529 1529.48,719.455 1530.04,701.375 1530.6,715.907 1531.16,746.589 1531.72,773.201 1532.28,754.827 1532.84,752.999 1533.4,688.209 1533.96,671.737 1534.52,675.16 1535.08,659.828 1535.63,610.249 1536.19,612.615 1536.75,598.426 1537.31,599.934 1537.87,602.687 1538.43,572.861 1538.99,581.21 1539.55,603.945 1540.11,640.74 1540.67,657.636 1541.23,674.601 1541.79,657.559 1542.35,678.761 1542.9,679.89 1543.46,716.226 1544.02,746.258 1544.58,742.337 1545.14,734.874 1545.7,732.634 1546.26,695.482 1546.82,712.114 1547.38,699.436 1547.94,717.353 1548.5,694.17 1549.06,694.314 1549.62,720.784 1550.18,687.121 1550.73,702.565 1551.29,733.63 1551.85,745.928 1552.41,757.448 1552.97,752.086 1553.53,780.731 1554.09,794.394 1554.65,756.182 1555.21,751.237 1555.77,764.659 1556.33,743.983 1556.89,758.692 1557.45,735.204 1558,764.052 1558.56,774.814 1559.12,784.007 1559.68,782.18 1560.24,791.504 1560.8,785.61 1561.36,763.972 1561.92,762.385 1562.48,756.398 1563.04,739.259 1563.6,735.91 1564.16,745.812 1564.72,726.96 1565.28,692.203 1565.83,659.15 1566.39,646.898 1566.95,654.63 1567.51,669.256 1568.07,637.904 1568.63,624.667 1569.19,599.898 1569.75,622.209 1570.31,623.62 1570.87,611.601 1571.43,680.335 1571.99,701.078 1572.55,664.476 1573.1,636.593 1573.66,607.353 1574.22,580.877 1574.78,615.261 1575.34,617.601 1575.9,623.212 1576.46,607.5 1577.02,627.178 1577.58,582.826 1578.14,553.631 1578.7,558.473 1579.26,581.018 1579.82,637.347 1580.37,621.227 1580.93,640.079 1581.49,660.185 1582.05,629.338 1582.61,614.143 1583.17,631.945 1583.73,633.22 1584.29,632.646 1584.85,633.312 1585.41,650.162 1585.97,650.328 1586.53,666.884 1587.09,639.326 1587.65,625.637 1588.2,628.799 1588.76,681.383 1589.32,685.68 1589.88,668.647 1590.44,653.76 1591,638.109 1591.56,642.361 1592.12,644.578 1592.68,679.721 1593.24,677.806 1593.8,659.639 1594.36,662.651 1594.92,677.341 1595.47,726.292 1596.03,756.364 1596.59,722.672 1597.15,703.885 1597.71,717.612 1598.27,715.864 1598.83,718.249 1599.39,736.064 1599.95,736.923 1600.51,749.573 1601.07,695.561 1601.63,676.8 1602.19,662.921 1602.74,668.442 1603.3,683.806 1603.86,617.934 1604.42,605.165 1604.98,624.529 1605.54,598.281 1606.1,575.772 1606.66,581.663 1607.22,556.343 1607.78,561.927 1608.34,585.115 1608.9,591.437 1609.46,598.565 1610.02,604.2 1610.57,645.719 1611.13,602.076 1611.69,592.686 1612.25,612.961 1612.81,650.423 1613.37,637.115 1613.93,637.807 1614.49,606.906 1615.05,613.067 1615.61,649.091 1616.17,620.046 1616.73,656.03 1617.29,671.5 1617.84,657.815 1618.4,673.415 1618.96,643.024 1619.52,647.522 1620.08,666.654 1620.64,669.131 1621.2,684.727 1621.76,716.737 1622.32,712.571 1622.88,699.098 1623.44,699.794 1624,699.572 1624.56,699.279 1625.11,683.687 1625.67,728.612 1626.23,708.083 1626.79,712.611 1627.35,693.448 1627.91,662.619 1628.47,662.817 1629.03,665.497 1629.59,681.893 1630.15,717.188 1630.71,714.187 1631.27,681.441 1631.83,648.905 1632.39,663.782 1632.94,633.08 1633.5,638.243 1634.06,624.176 1634.62,625.674 1635.18,628.957 1635.74,600.721 1636.3,606.296 1636.86,608.791 1637.42,630.138 1637.98,617.584 1638.54,609.309 1639.1,634.145 1639.66,620.039 1640.21,623.268 1640.77,675.464 1641.33,661.34 1641.89,662.537 1642.45,665.025 1643.01,668.071 1643.57,682.877 1644.13,682.93 1644.69,668.492 1645.25,650.502 1645.81,654.762 1646.37,656.753 1646.93,623.125 1647.48,626.468 1648.04,645.135 1648.6,633.151 1649.16,637.631 1649.72,609.924 1650.28,609.972 1650.84,596.388 1651.4,602.9 1651.96,608.912 1652.52,596.588 1653.08,583.896 1653.64,606.681 1654.2,625.912 1654.76,628.089 1655.31,631.319 1655.87,631.216 1656.43,597.508 1656.99,619.204 1657.55,656.813 1658.11,658.227 1658.67,691.696 1659.23,641.252 1659.79,673.832 1660.35,672.865 1660.91,706.079 1661.47,671.659 1662.03,685.181 1662.58,670.93 1663.14,689.287 1663.7,706.781 1664.26,703.987 1664.82,717.229 1665.38,714.581 1665.94,711.63 1666.5,694.059 1667.06,677.382 1667.62,697.567 1668.18,725.055 1668.74,738.631 1669.3,720.769 1669.85,719.879 1670.41,700.867 1670.97,718.824 1671.53,687.724 1672.09,720.958 1672.65,718.469 1673.21,683.772 1673.77,749.824 1674.33,717.045 1674.89,716.447 1675.45,715.686 1676.01,747.204 1676.57,727.367 1677.13,741.767 1677.68,770.33 1678.24,749.359 1678.8,745.445 1679.36,757.901 1679.92,737.689 1680.48,751.623 1681.04,747.263 1681.6,711.329 1682.16,692.827 1682.72,709.418 1683.28,727.414 1683.84,726.056 1684.4,741.192 1684.95,722.932 1685.51,703.214 1686.07,698.086 1686.63,666.711 1687.19,683.734 1687.75,696.932 1688.31,713.94 1688.87,727.555 1689.43,708.346 1689.99,692.132 1690.55,671.916 1691.11,703.192 1691.67,700.533 1692.23,714.56 1692.78,711.802 1693.34,754.941 1693.9,736.907 1694.46,704.73 1695.02,716.173 1695.58,688.1 1696.14,701.064 1696.7,687.926 1697.26,670.204 1697.82,653.486 1698.38,622.705 1698.94,642.253 1699.5,641.089 1700.05,690.858 1700.61,687.871 1701.17,669.236 1701.73,738.008 1702.29,734.641 1702.85,748.828 1703.41,731.165 1703.97,724.543 1704.53,707.332 1705.09,704.816 1705.65,706.608 1706.21,722.824 1706.77,718.752 1707.32,735.181 1707.88,747.745 1708.44,728.051 1709,723.668 1709.56,723.756 1710.12,704.565 1710.68,721.508 1711.24,685.105 1711.8,698.068 1712.36,729.964 1712.92,692.229 1713.48,672.893 1714.04,675.29 1714.6,675.622 1715.15,661.378 1715.71,663.634 1716.27,668.24 1716.83,685.841 1717.39,702.667 1717.95,684.499 1718.51,697.576 1719.07,699.653 1719.63,714.726 1720.19,709.674 1720.75,693.48 1721.31,692.384 1721.87,644.035 1722.42,666.565 1722.98,634.619 1723.54,617.717 1724.1,637.72 1724.66,625.807 1725.22,628.05 1725.78,634.578 1726.34,665.219 1726.9,683.41 1727.46,667.333 1728.02,667.411 1728.58,650.764 1729.14,638.816 1729.69,625.428 1730.25,610.835 1730.81,611.086 1731.37,646.639 1731.93,682.367 1732.49,650.961 1733.05,700.296 1733.61,650.102 1734.17,667.501 1734.73,667.379 1735.29,683.83 1735.85,683.954 1736.41,683.942 1736.97,700.836 1737.52,697.8 1738.08,698.785 1738.64,729.946 1739.2,693.44 1739.76,674.315 1740.32,679.227 1740.88,680.906 1741.44,662.591 1742,662.013 1742.56,692.871 1743.12,661.015 1743.68,647.649 1744.24,648.565 1744.79,651.432 1745.35,689.052 1745.91,704.743 1746.47,719.287 1747.03,721.488 1747.59,701.124 1748.15,700.805 1748.71,713.673 1749.27,680.489 1749.83,667.717 1750.39,683.964 1750.95,653.064 1751.51,656.865 1752.06,675.063 1752.62,674.856 1753.18,691.772 1753.74,674.397 1754.3,676.131 1754.86,692.77 1755.42,706.287 1755.98,710.078 1756.54,677.321 1757.1,678.374 1757.66,677.435 1758.22,693.54 1758.78,660.714 1759.34,649.097 1759.89,650.558 1760.45,652.391 1761.01,671.458 1761.57,636.646 1762.13,637.137 1762.69,637.485 1763.25,660.451 1763.81,641.765 1764.37,660.287 1764.93,677.568 1765.49,661.633 1766.05,680.717 1766.61,695.887 1767.16,709.215 1767.72,756.142 1768.28,738.98 1768.84,752.758 1769.4,698.725 1769.96,729.773 1770.52,694.366 1771.08,690.857 1771.64,673.737 1772.2,690.317 1772.76,705.625 1773.32,751.095 1773.88,776.461 1774.43,820.484 1774.99,797.553 1775.55,775.483 1776.11,753.873 1776.67,732.828 1777.23,729.812 1777.79,711.769 1778.35,729.47 1778.91,760.2 1779.47,774.504 1780.03,788.351 1780.59,764.806 1781.15,779.02 1781.71,806.637 1782.26,815.821 1782.82,822.008 1783.38,798.044 1783.94,777.655 1784.5,786.966 1785.06,782.085 1785.62,746.864 1786.18,759.474 1786.74,724.155 1787.3,690.948 1787.86,675.519 1788.42,658.786 1788.98,675.826 1789.53,676.715 1790.09,646.502 1790.65,662.424 1791.21,646.548 1791.77,634.394 1792.33,636.349 1792.89,592.335 1793.45,629.855 1794.01,645.016 1794.57,682.758 1795.13,667.638 1795.69,634.648 1796.25,653.649 1796.8,655.907 1797.36,674.248 1797.92,642.792 1798.48,641.647 1799.04,656.819 1799.6,690.496 1800.16,690.179 1800.72,706.939 1801.28,689.617 1801.84,653.081 1802.4,655.22 1802.96,644.264 1803.52,644.406 1804.08,614.257 1804.63,568.971 1805.19,606.769 1805.75,627.477 1806.31,628.611 1806.87,597.235 1807.43,649.239 1807.99,651.236 1808.55,638.778 1809.11,675.113 1809.67,692.041 1810.23,677.751 1810.79,660.637 1811.35,662.729 1811.9,667.729 1812.46,651.535 1813.02,666.612 1813.58,664.561 1814.14,663.833 1814.7,664.089 1815.26,682.608 1815.82,712.526 1816.38,692.495 1816.94,706.509 1817.5,672.829 1818.06,687.203 1818.62,669.706 1819.18,687.409 1819.73,668.232 1820.29,703.618 1820.85,700.692 1821.41,701.177 1821.97,697.428 1822.53,677.643 1823.09,676.943 1823.65,645.77 1824.21,651.921 1824.77,655.338 1825.33,674.304 1825.89,724.607 1826.45,721.392 1827,721.494 1827.56,699.559 1828.12,701.159 1828.68,664.249 1829.24,646.41 1829.8,698.594 1830.36,728.342 1830.92,745.398 1831.48,726.294 1832.04,707.523 1832.6,689.194 1833.16,688.947 1833.72,686.547 1834.27,684.451 1834.83,701.648 1835.39,717.436 1835.95,718.35 1836.51,718.394 1837.07,718.466 1837.63,729.324 1838.19,761.138 \"/>\n<path clip-path=\"url(#clip243)\" d=\"M720.247 690.458 L720.806 690.458 L721.365 690.458 L721.924 690.458 L722.484 690.458 L723.043 690.458 L723.602 690.458 L724.161 690.458 L724.721 690.458 L725.28 690.458 L725.839 690.458 L726.398 690.458 L726.958 690.458 L727.517 690.458 L728.076 690.458 L728.635 690.458 L729.195 690.458 L729.754 690.458 L730.313 690.458 L730.872 690.458 L731.432 690.458 L731.991 690.458 L732.55 690.458 L733.109 690.458 L733.669 690.458 L734.228 690.458 L734.787 690.458 L735.346 690.458 L735.906 690.458 L736.465 690.458 L737.024 690.458 L737.583 690.458 L738.143 690.458 L738.702 690.458 L739.261 690.458 L739.82 690.458 L740.38 690.458 L740.939 690.458 L741.498 690.458 L742.057 690.458 L742.617 690.458 L743.176 690.458 L743.735 690.458 L744.294 690.458 L744.854 690.458 L745.413 690.458 L745.972 690.458 L746.531 690.458 L747.091 690.458 L747.65 690.458 L748.209 690.458 L748.768 690.458 L749.328 690.458 L749.887 690.458 L750.446 690.458 L751.005 690.458 L751.565 690.458 L752.124 690.458 L752.683 690.458 L753.242 690.458 L753.802 690.458 L754.361 690.458 L754.92 690.458 L755.479 690.458 L756.039 690.458 L756.598 690.458 L757.157 690.458 L757.716 690.458 L758.276 690.458 L758.835 690.458 L759.394 690.458 L759.953 690.458 L760.513 690.458 L761.072 690.458 L761.631 690.458 L762.19 690.458 L762.75 690.458 L763.309 690.458 L763.868 690.458 L764.427 690.458 L764.987 690.458 L765.546 690.458 L766.105 690.458 L766.664 690.458 L767.224 690.458 L767.783 690.458 L768.342 690.458 L768.901 690.458 L769.461 690.458 L770.02 690.458 L770.579 690.458 L771.138 690.458 L771.698 690.458 L772.257 690.458 L772.816 690.458 L773.375 690.458 L773.935 690.458 L774.494 690.458 L775.053 690.458 L775.612 690.458 L776.172 690.458 L776.731 690.458 L777.29 690.458 L777.849 690.458 L778.409 690.458 L778.968 690.458 L779.527 690.458 L780.086 690.458 L780.646 690.458 L781.205 690.458 L781.764 690.458 L782.323 690.458 L782.883 690.458 L783.442 690.458 L784.001 690.458 L784.56 690.458 L785.12 690.458 L785.679 690.458 L786.238 690.458 L786.797 690.458 L787.357 690.458 L787.916 690.458 L788.475 690.458 L789.034 690.458 L789.594 690.458 L790.153 690.458 L790.712 690.458 L791.271 690.458 L791.831 690.458 L792.39 690.458 L792.949 690.458 L793.508 690.458 L794.068 690.458 L794.627 690.458 L795.186 690.458 L795.745 690.458 L796.305 690.458 L796.864 690.458 L797.423 690.458 L797.982 690.458 L798.542 690.458 L799.101 690.458 L799.66 690.458 L800.219 690.458 L800.779 690.458 L801.338 690.458 L801.897 690.458 L802.456 690.458 L803.016 690.458 L803.575 690.458 L804.134 690.458 L804.693 690.458 L805.253 690.458 L805.812 690.458 L806.371 690.458 L806.931 690.458 L807.49 690.458 L808.049 690.458 L808.608 690.458 L809.168 690.458 L809.727 690.458 L810.286 690.458 L810.845 690.458 L811.405 690.458 L811.964 690.458 L812.523 690.458 L813.082 690.458 L813.642 690.458 L814.201 690.458 L814.76 690.458 L815.319 690.458 L815.879 690.458 L816.438 690.458 L816.997 690.458 L817.556 690.458 L818.116 690.458 L818.675 690.458 L819.234 690.458 L819.793 690.458 L820.353 690.458 L820.912 690.458 L821.471 690.458 L822.03 690.458 L822.59 690.458 L823.149 690.458 L823.708 690.458 L824.267 690.458 L824.827 690.458 L825.386 690.458 L825.945 690.458 L826.504 690.458 L827.064 690.458 L827.623 690.458 L828.182 690.458 L828.741 690.458 L829.301 690.458 L829.86 690.458 L830.419 690.458 L830.978 690.458 L831.538 690.458 L832.097 690.458 L832.656 690.458 L833.215 690.458 L833.775 690.458 L834.334 690.458 L834.893 690.458 L835.452 690.458 L836.012 690.458 L836.571 690.458 L837.13 690.458 L837.689 690.458 L838.249 690.458 L838.808 690.458 L839.367 690.458 L839.926 690.458 L840.486 690.458 L841.045 690.458 L841.604 690.458 L842.163 690.458 L842.723 690.458 L843.282 690.458 L843.841 690.458 L844.4 690.458 L844.96 690.458 L845.519 690.458 L846.078 690.458 L846.637 690.458 L847.197 690.458 L847.756 690.458 L848.315 690.458 L848.874 690.458 L849.434 690.458 L849.993 690.458 L850.552 690.458 L851.111 690.458 L851.671 690.458 L852.23 690.458 L852.789 690.458 L853.348 690.458 L853.908 690.458 L854.467 690.458 L855.026 690.458 L855.585 690.458 L856.145 690.458 L856.704 690.458 L857.263 690.458 L857.822 690.458 L858.382 690.458 L858.941 690.458 L859.5 690.458 L860.059 690.458 L860.619 690.458 L861.178 690.458 L861.737 690.458 L862.296 690.458 L862.856 690.458 L863.415 690.458 L863.974 690.458 L864.533 690.458 L865.093 690.458 L865.652 690.458 L866.211 690.458 L866.77 690.458 L867.33 690.458 L867.889 690.458 L868.448 690.458 L869.007 690.458 L869.567 690.458 L870.126 690.458 L870.685 690.458 L871.244 690.458 L871.804 690.458 L872.363 690.458 L872.922 690.458 L873.481 690.458 L874.041 690.458 L874.6 690.458 L875.159 690.458 L875.718 690.458 L876.278 690.458 L876.837 690.458 L877.396 690.458 L877.955 690.458 L878.515 690.458 L879.074 690.458 L879.633 690.458 L880.192 690.458 L880.752 690.458 L881.311 690.458 L881.87 690.458 L882.429 690.458 L882.989 690.458 L883.548 690.458 L884.107 690.458 L884.666 690.458 L885.226 690.458 L885.785 690.458 L886.344 690.458 L886.903 690.458 L887.463 690.458 L888.022 690.458 L888.581 690.458 L889.14 690.458 L889.7 690.458 L890.259 690.458 L890.818 690.458 L891.377 690.458 L891.937 690.458 L892.496 690.458 L893.055 690.458 L893.614 690.458 L894.174 690.458 L894.733 690.458 L895.292 690.458 L895.851 690.458 L896.411 690.458 L896.97 690.458 L897.529 690.458 L898.088 690.458 L898.648 690.458 L899.207 690.458 L899.766 690.458 L900.325 690.458 L900.885 690.458 L901.444 690.458 L902.003 690.458 L902.562 690.458 L903.122 690.458 L903.681 690.458 L904.24 690.458 L904.799 690.458 L905.359 690.458 L905.918 690.458 L906.477 690.458 L907.036 690.458 L907.596 690.458 L908.155 690.458 L908.714 690.458 L909.273 690.458 L909.833 690.458 L910.392 690.458 L910.951 690.458 L911.51 690.458 L912.07 690.458 L912.629 690.458 L913.188 690.458 L913.747 690.458 L914.307 690.458 L914.866 690.458 L915.425 690.458 L915.984 690.458 L916.544 690.458 L917.103 690.458 L917.662 690.458 L918.221 690.458 L918.781 690.458 L919.34 690.458 L919.899 690.458 L920.458 690.458 L921.018 690.458 L921.577 690.458 L922.136 690.458 L922.695 690.458 L923.255 690.458 L923.814 690.458 L924.373 690.458 L924.932 690.458 L925.492 690.458 L926.051 690.458 L926.61 690.458 L927.169 690.458 L927.729 690.458 L928.288 690.458 L928.847 690.458 L929.406 690.458 L929.966 690.458 L930.525 690.458 L931.084 690.458 L931.644 690.458 L932.203 690.458 L932.762 690.458 L933.321 690.458 L933.881 690.458 L934.44 690.458 L934.999 690.458 L935.558 690.458 L936.118 690.458 L936.677 690.458 L937.236 690.458 L937.795 690.458 L938.355 690.458 L938.914 690.458 L939.473 690.458 L940.032 690.458 L940.592 690.458 L941.151 690.458 L941.71 690.458 L942.269 690.458 L942.829 690.458 L943.388 690.458 L943.947 690.458 L944.506 690.458 L945.066 690.458 L945.625 690.458 L946.184 690.458 L946.743 690.458 L947.303 690.458 L947.862 690.458 L948.421 690.458 L948.98 690.458 L949.54 690.458 L950.099 690.458 L950.658 690.458 L951.217 690.458 L951.777 690.458 L952.336 690.458 L952.895 690.458 L953.454 690.458 L954.014 690.458 L954.573 690.458 L955.132 690.458 L955.691 690.458 L956.251 690.458 L956.81 690.458 L957.369 690.458 L957.928 690.458 L958.488 690.458 L959.047 690.458 L959.606 690.458 L960.165 690.458 L960.725 690.458 L961.284 690.458 L961.843 690.458 L962.402 690.458 L962.962 690.458 L963.521 690.458 L964.08 690.458 L964.639 690.458 L965.199 690.458 L965.758 690.458 L966.317 690.458 L966.876 690.458 L967.436 690.458 L967.995 690.458 L968.554 690.458 L969.113 690.458 L969.673 690.458 L970.232 690.458 L970.791 690.458 L971.35 690.458 L971.91 690.458 L972.469 690.458 L973.028 690.458 L973.587 690.458 L974.147 690.458 L974.706 690.458 L975.265 690.458 L975.824 690.458 L976.384 690.458 L976.943 690.458 L977.502 690.458 L978.061 690.458 L978.621 690.458 L979.18 690.458 L979.739 690.458 L980.298 690.458 L980.858 690.458 L981.417 690.458 L981.976 690.458 L982.535 690.458 L983.095 690.458 L983.654 690.458 L984.213 690.458 L984.772 690.458 L985.332 690.458 L985.891 690.458 L986.45 690.458 L987.009 690.458 L987.569 690.458 L988.128 690.458 L988.687 690.458 L989.246 690.458 L989.806 690.458 L990.365 690.458 L990.924 690.458 L991.483 690.458 L992.043 690.458 L992.602 690.458 L993.161 690.458 L993.72 690.458 L994.28 690.458 L994.839 690.458 L995.398 690.458 L995.957 690.458 L996.517 690.458 L997.076 690.458 L997.635 690.458 L998.194 690.458 L998.754 690.458 L999.313 690.458 L999.872 690.458 L1000.43 690.458 L1000.99 690.458 L1001.55 690.458 L1002.11 690.458 L1002.67 690.458 L1003.23 690.458 L1003.79 690.458 L1004.35 690.458 L1004.91 690.458 L1005.46 690.458 L1006.02 690.458 L1006.58 690.458 L1007.14 690.458 L1007.7 690.458 L1008.26 690.458 L1008.82 690.458 L1009.38 690.458 L1009.94 690.458 L1010.5 690.458 L1011.06 690.458 L1011.62 690.458 L1012.18 690.458 L1012.73 690.458 L1013.29 690.458 L1013.85 690.458 L1014.41 690.458 L1014.97 690.458 L1015.53 690.458 L1016.09 690.458 L1016.65 690.458 L1017.21 690.458 L1017.77 690.458 L1018.33 690.458 L1018.89 690.458 L1019.45 690.458 L1020.01 690.458 L1020.56 690.458 L1021.12 690.458 L1021.68 690.458 L1022.24 690.458 L1022.8 690.458 L1023.36 690.458 L1023.92 690.458 L1024.48 690.458 L1025.04 690.458 L1025.6 690.458 L1026.16 690.458 L1026.72 690.458 L1027.28 690.458 L1027.83 690.458 L1028.39 690.458 L1028.95 690.458 L1029.51 690.458 L1030.07 690.458 L1030.63 690.458 L1031.19 690.458 L1031.75 690.458 L1032.31 690.458 L1032.87 690.458 L1033.43 690.458 L1033.99 690.458 L1034.55 690.458 L1035.1 690.458 L1035.66 690.458 L1036.22 690.458 L1036.78 690.458 L1037.34 690.458 L1037.9 690.458 L1038.46 690.458 L1039.02 690.458 L1039.58 690.458 L1040.14 690.458 L1040.7 690.458 L1041.26 690.458 L1041.82 690.458 L1042.38 690.458 L1042.93 690.458 L1043.49 690.458 L1044.05 690.458 L1044.61 690.458 L1045.17 690.458 L1045.73 690.458 L1046.29 690.458 L1046.85 690.458 L1047.41 690.458 L1047.97 690.458 L1048.53 690.458 L1049.09 690.458 L1049.65 690.458 L1050.2 690.458 L1050.76 690.458 L1051.32 690.458 L1051.88 690.458 L1052.44 690.458 L1053 690.458 L1053.56 690.458 L1054.12 690.458 L1054.68 690.458 L1055.24 690.458 L1055.8 690.458 L1056.36 690.458 L1056.92 690.458 L1057.48 690.458 L1058.03 690.458 L1058.59 690.458 L1059.15 690.458 L1059.71 690.458 L1060.27 690.458 L1060.83 690.458 L1061.39 690.458 L1061.95 690.458 L1062.51 690.458 L1063.07 690.458 L1063.63 690.458 L1064.19 690.458 L1064.75 690.458 L1065.3 690.458 L1065.86 690.458 L1066.42 690.458 L1066.98 690.458 L1067.54 690.458 L1068.1 690.458 L1068.66 690.458 L1069.22 690.458 L1069.78 690.458 L1070.34 690.458 L1070.9 690.458 L1071.46 690.458 L1072.02 690.458 L1072.57 690.458 L1073.13 690.458 L1073.69 690.458 L1074.25 690.458 L1074.81 690.458 L1075.37 690.458 L1075.93 690.458 L1076.49 690.458 L1077.05 690.458 L1077.61 690.458 L1078.17 690.458 L1078.73 690.458 L1079.29 690.458 L1079.85 690.458 L1080.4 690.458 L1080.96 690.458 L1081.52 690.458 L1082.08 690.458 L1082.64 690.458 L1083.2 690.458 L1083.76 690.458 L1084.32 690.458 L1084.88 690.458 L1085.44 690.458 L1086 690.458 L1086.56 690.458 L1087.12 690.458 L1087.67 690.458 L1088.23 690.458 L1088.79 690.458 L1089.35 690.458 L1089.91 690.458 L1090.47 690.458 L1091.03 690.458 L1091.59 690.458 L1092.15 690.458 L1092.71 690.458 L1093.27 690.458 L1093.83 690.458 L1094.39 690.458 L1094.94 690.458 L1095.5 690.458 L1096.06 690.458 L1096.62 690.458 L1097.18 690.458 L1097.74 690.458 L1098.3 690.458 L1098.86 690.458 L1099.42 690.458 L1099.98 690.458 L1100.54 690.458 L1101.1 690.458 L1101.66 690.458 L1102.22 690.458 L1102.77 690.458 L1103.33 690.458 L1103.89 690.458 L1104.45 690.458 L1105.01 690.458 L1105.57 690.458 L1106.13 690.458 L1106.69 690.458 L1107.25 690.458 L1107.81 690.458 L1108.37 690.458 L1108.93 690.458 L1109.49 690.458 L1110.04 690.458 L1110.6 690.458 L1111.16 690.458 L1111.72 690.458 L1112.28 690.458 L1112.84 690.458 L1113.4 690.458 L1113.96 690.458 L1114.52 690.458 L1115.08 690.458 L1115.64 690.458 L1116.2 690.458 L1116.76 690.458 L1117.31 690.458 L1117.87 690.458 L1118.43 690.458 L1118.99 690.458 L1119.55 690.458 L1120.11 690.458 L1120.67 690.458 L1121.23 690.458 L1121.79 690.458 L1122.35 690.458 L1122.91 690.458 L1123.47 690.458 L1124.03 690.458 L1124.59 690.458 L1125.14 690.458 L1125.7 690.458 L1126.26 690.458 L1126.82 690.458 L1127.38 690.458 L1127.94 690.458 L1128.5 690.458 L1129.06 690.458 L1129.62 690.458 L1130.18 690.458 L1130.74 690.458 L1131.3 690.458 L1131.86 690.458 L1132.41 690.458 L1132.97 690.458 L1133.53 690.458 L1134.09 690.458 L1134.65 690.458 L1135.21 690.458 L1135.77 690.458 L1136.33 690.458 L1136.89 690.458 L1137.45 690.458 L1138.01 690.458 L1138.57 690.458 L1139.13 690.458 L1139.68 690.458 L1140.24 690.458 L1140.8 690.458 L1141.36 690.458 L1141.92 690.458 L1142.48 690.458 L1143.04 690.458 L1143.6 690.458 L1144.16 690.458 L1144.72 690.458 L1145.28 690.458 L1145.84 690.458 L1146.4 690.458 L1146.96 690.458 L1147.51 690.458 L1148.07 690.458 L1148.63 690.458 L1149.19 690.458 L1149.75 690.458 L1150.31 690.458 L1150.87 690.458 L1151.43 690.458 L1151.99 690.458 L1152.55 690.458 L1153.11 690.458 L1153.67 690.458 L1154.23 690.458 L1154.78 690.458 L1155.34 690.458 L1155.9 690.458 L1156.46 690.458 L1157.02 690.458 L1157.58 690.458 L1158.14 690.458 L1158.7 690.458 L1159.26 690.458 L1159.82 690.458 L1160.38 690.458 L1160.94 690.458 L1161.5 690.458 L1162.05 690.458 L1162.61 690.458 L1163.17 690.458 L1163.73 690.458 L1164.29 690.458 L1164.85 690.458 L1165.41 690.458 L1165.97 690.458 L1166.53 690.458 L1167.09 690.458 L1167.65 690.458 L1168.21 690.458 L1168.77 690.458 L1169.33 690.458 L1169.88 690.458 L1170.44 690.458 L1171 690.458 L1171.56 690.458 L1172.12 690.458 L1172.68 690.458 L1173.24 690.458 L1173.8 690.458 L1174.36 690.458 L1174.92 690.458 L1175.48 690.458 L1176.04 690.458 L1176.6 690.458 L1177.15 690.458 L1177.71 690.458 L1178.27 690.458 L1178.83 690.458 L1179.39 690.458 L1179.95 690.458 L1180.51 690.458 L1181.07 690.458 L1181.63 690.458 L1182.19 690.458 L1182.75 690.458 L1183.31 690.458 L1183.87 690.458 L1184.43 690.458 L1184.98 690.458 L1185.54 690.458 L1186.1 690.458 L1186.66 690.458 L1187.22 690.458 L1187.78 690.458 L1188.34 690.458 L1188.9 690.458 L1189.46 690.458 L1190.02 690.458 L1190.58 690.458 L1191.14 690.458 L1191.7 690.458 L1192.25 690.458 L1192.81 690.458 L1193.37 690.458 L1193.93 690.458 L1194.49 690.458 L1195.05 690.458 L1195.61 690.458 L1196.17 690.458 L1196.73 690.458 L1197.29 690.458 L1197.85 690.458 L1198.41 690.458 L1198.97 690.458 L1199.52 690.458 L1200.08 690.458 L1200.64 690.458 L1201.2 690.458 L1201.76 690.458 L1202.32 690.458 L1202.88 690.458 L1203.44 690.458 L1204 690.458 L1204.56 690.458 L1205.12 690.458 L1205.68 690.458 L1206.24 690.458 L1206.8 690.458 L1207.35 690.458 L1207.91 690.458 L1208.47 690.458 L1209.03 690.458 L1209.59 690.458 L1210.15 690.458 L1210.71 690.458 L1211.27 690.458 L1211.83 690.458 L1212.39 690.458 L1212.95 690.458 L1213.51 690.458 L1214.07 690.458 L1214.62 690.458 L1215.18 690.458 L1215.74 690.458 L1216.3 690.458 L1216.86 690.458 L1217.42 690.458 L1217.98 690.458 L1218.54 690.458 L1219.1 690.458 L1219.66 690.458 L1220.22 690.458 L1220.78 690.458 L1221.34 690.458 L1221.89 690.458 L1222.45 690.458 L1223.01 690.458 L1223.57 690.458 L1224.13 690.458 L1224.69 690.458 L1225.25 690.458 L1225.81 690.458 L1226.37 690.458 L1226.93 690.458 L1227.49 690.458 L1228.05 690.458 L1228.61 690.458 L1229.17 690.458 L1229.72 690.458 L1230.28 690.458 L1230.84 690.458 L1231.4 690.458 L1231.96 690.458 L1232.52 690.458 L1233.08 690.458 L1233.64 690.458 L1234.2 690.458 L1234.76 690.458 L1235.32 690.458 L1235.88 690.458 L1236.44 690.458 L1236.99 690.458 L1237.55 690.458 L1238.11 690.458 L1238.67 690.458 L1239.23 690.458 L1239.79 690.458 L1240.35 690.458 L1240.91 690.458 L1241.47 690.458 L1242.03 690.458 L1242.59 690.458 L1243.15 690.458 L1243.71 690.458 L1244.26 690.458 L1244.82 690.458 L1245.38 690.458 L1245.94 690.458 L1246.5 690.458 L1247.06 690.458 L1247.62 690.458 L1248.18 690.458 L1248.74 690.458 L1249.3 690.458 L1249.86 690.458 L1250.42 690.458 L1250.98 690.458 L1251.54 690.458 L1252.09 690.458 L1252.65 690.458 L1253.21 690.458 L1253.77 690.458 L1254.33 690.458 L1254.89 690.458 L1255.45 690.458 L1256.01 690.458 L1256.57 690.458 L1257.13 690.458 L1257.69 690.458 L1258.25 690.458 L1258.81 690.458 L1259.36 690.458 L1259.92 690.458 L1260.48 690.458 L1261.04 690.458 L1261.6 690.458 L1262.16 690.458 L1262.72 690.458 L1263.28 690.458 L1263.84 690.458 L1264.4 690.458 L1264.96 690.458 L1265.52 690.458 L1266.08 690.458 L1266.63 690.458 L1267.19 690.458 L1267.75 690.458 L1268.31 690.458 L1268.87 690.458 L1269.43 690.458 L1269.99 690.458 L1270.55 690.458 L1271.11 690.458 L1271.67 690.458 L1272.23 690.458 L1272.79 690.458 L1273.35 690.458 L1273.91 690.458 L1274.46 690.458 L1275.02 690.458 L1275.58 690.458 L1276.14 690.458 L1276.7 690.458 L1277.26 690.458 L1277.82 690.458 L1278.38 690.458 L1278.94 690.458 L1279.5 690.458 L1280.06 690.458 L1280.62 690.458 L1281.18 690.458 L1281.73 690.458 L1282.29 690.458 L1282.85 690.458 L1283.41 690.458 L1283.97 690.458 L1284.53 690.458 L1285.09 690.458 L1285.65 690.458 L1286.21 690.458 L1286.77 690.458 L1287.33 690.458 L1287.89 690.458 L1288.45 690.458 L1289 690.458 L1289.56 690.458 L1290.12 690.458 L1290.68 690.458 L1291.24 690.458 L1291.8 690.458 L1292.36 690.458 L1292.92 690.458 L1293.48 690.458 L1294.04 690.458 L1294.6 690.458 L1295.16 690.458 L1295.72 690.458 L1296.28 690.458 L1296.83 690.458 L1297.39 690.458 L1297.95 690.458 L1298.51 690.458 L1299.07 690.458 L1299.63 690.458 L1300.19 690.458 L1300.75 690.458 L1301.31 690.458 L1301.87 690.458 L1302.43 690.458 L1302.99 690.458 L1303.55 690.458 L1304.1 690.458 L1304.66 690.458 L1305.22 690.458 L1305.78 690.458 L1306.34 690.458 L1306.9 690.458 L1307.46 690.458 L1308.02 690.458 L1308.58 690.458 L1309.14 690.458 L1309.7 690.458 L1310.26 690.458 L1310.82 690.458 L1311.38 690.458 L1311.93 690.458 L1312.49 690.458 L1313.05 690.458 L1313.61 690.458 L1314.17 690.458 L1314.73 690.458 L1315.29 690.458 L1315.85 690.458 L1316.41 690.458 L1316.97 690.458 L1317.53 690.458 L1318.09 690.458 L1318.65 690.458 L1319.2 690.458 L1319.76 690.458 L1320.32 690.458 L1320.88 690.458 L1321.44 690.458 L1322 690.458 L1322.56 690.458 L1323.12 690.458 L1323.68 690.458 L1324.24 690.458 L1324.8 690.458 L1325.36 690.458 L1325.92 690.458 L1326.47 690.458 L1327.03 690.458 L1327.59 690.458 L1328.15 690.458 L1328.71 690.458 L1329.27 690.458 L1329.83 690.458 L1330.39 690.458 L1330.95 690.458 L1331.51 690.458 L1332.07 690.458 L1332.63 690.458 L1333.19 690.458 L1333.75 690.458 L1334.3 690.458 L1334.86 690.458 L1335.42 690.458 L1335.98 690.458 L1336.54 690.458 L1337.1 690.458 L1337.66 690.458 L1338.22 690.458 L1338.78 690.458 L1339.34 690.458 L1339.9 690.458 L1340.46 690.458 L1341.02 690.458 L1341.57 690.458 L1342.13 690.458 L1342.69 690.458 L1343.25 690.458 L1343.81 690.458 L1344.37 690.458 L1344.93 690.458 L1345.49 690.458 L1346.05 690.458 L1346.61 690.458 L1347.17 690.458 L1347.73 690.458 L1348.29 690.458 L1348.84 690.458 L1349.4 690.458 L1349.96 690.458 L1350.52 690.458 L1351.08 690.458 L1351.64 690.458 L1352.2 690.458 L1352.76 690.458 L1353.32 690.458 L1353.88 690.458 L1354.44 690.458 L1355 690.458 L1355.56 690.458 L1356.12 690.458 L1356.67 690.458 L1357.23 690.458 L1357.79 690.458 L1358.35 690.458 L1358.91 690.458 L1359.47 690.458 L1360.03 690.458 L1360.59 690.458 L1361.15 690.458 L1361.71 690.458 L1362.27 690.458 L1362.83 690.458 L1363.39 690.458 L1363.94 690.458 L1364.5 690.458 L1365.06 690.458 L1365.62 690.458 L1366.18 690.458 L1366.74 690.458 L1367.3 690.458 L1367.86 690.458 L1368.42 690.458 L1368.98 690.458 L1369.54 690.458 L1370.1 690.458 L1370.66 690.458 L1371.21 690.458 L1371.77 690.458 L1372.33 690.458 L1372.89 690.458 L1373.45 690.458 L1374.01 690.458 L1374.57 690.458 L1375.13 690.458 L1375.69 690.458 L1376.25 690.458 L1376.81 690.458 L1377.37 690.458 L1377.93 690.458 L1378.49 690.458 L1379.04 690.458 L1379.6 690.458 L1380.16 690.458 L1380.72 690.458 L1381.28 690.458 L1381.84 690.458 L1382.4 690.458 L1382.96 690.458 L1383.52 690.458 L1384.08 690.458 L1384.64 690.458 L1385.2 690.458 L1385.76 690.458 L1386.31 690.458 L1386.87 690.458 L1387.43 690.458 L1387.99 690.458 L1388.55 690.458 L1389.11 690.458 L1389.67 690.458 L1390.23 690.458 L1390.79 690.458 L1391.35 690.458 L1391.91 690.458 L1392.47 690.458 L1393.03 690.458 L1393.58 690.458 L1394.14 690.458 L1394.7 690.458 L1395.26 690.458 L1395.82 690.458 L1396.38 690.458 L1396.94 690.458 L1397.5 690.458 L1398.06 690.458 L1398.62 690.458 L1399.18 690.458 L1399.74 690.458 L1400.3 690.458 L1400.86 690.458 L1401.41 690.458 L1401.97 690.458 L1402.53 690.458 L1403.09 690.458 L1403.65 690.458 L1404.21 690.458 L1404.77 690.458 L1405.33 690.458 L1405.89 690.458 L1406.45 690.458 L1407.01 690.458 L1407.57 690.458 L1408.13 690.458 L1408.68 690.458 L1409.24 690.458 L1409.8 690.458 L1410.36 690.458 L1410.92 690.458 L1411.48 690.458 L1412.04 690.458 L1412.6 690.458 L1413.16 690.458 L1413.72 690.458 L1414.28 690.458 L1414.84 690.458 L1415.4 690.458 L1415.95 690.458 L1416.51 690.458 L1417.07 690.458 L1417.63 690.458 L1418.19 690.458 L1418.75 690.458 L1419.31 690.458 L1419.87 690.458 L1420.43 690.458 L1420.99 690.458 L1421.55 690.458 L1422.11 690.458 L1422.67 690.458 L1423.23 690.458 L1423.78 690.458 L1424.34 690.458 L1424.9 690.458 L1425.46 690.458 L1426.02 690.458 L1426.58 690.458 L1427.14 690.458 L1427.7 690.458 L1428.26 690.458 L1428.82 690.458 L1429.38 690.458 L1429.94 690.458 L1430.5 690.458 L1431.05 690.458 L1431.61 690.458 L1432.17 690.458 L1432.73 690.458 L1433.29 690.458 L1433.85 690.458 L1434.41 690.458 L1434.97 690.458 L1435.53 690.458 L1436.09 690.458 L1436.65 690.458 L1437.21 690.458 L1437.77 690.458 L1438.33 690.458 L1438.88 690.458 L1439.44 690.458 L1440 690.458 L1440.56 690.458 L1441.12 690.458 L1441.68 690.458 L1442.24 690.458 L1442.8 690.458 L1443.36 690.458 L1443.92 690.458 L1444.48 690.458 L1445.04 690.458 L1445.6 690.458 L1446.15 690.458 L1446.71 690.458 L1447.27 690.458 L1447.83 690.458 L1448.39 690.458 L1448.95 690.458 L1449.51 690.458 L1450.07 690.458 L1450.63 690.458 L1451.19 690.458 L1451.75 690.458 L1452.31 690.458 L1452.87 690.458 L1453.42 690.458 L1453.98 690.458 L1454.54 690.458 L1455.1 690.458 L1455.66 690.458 L1456.22 690.458 L1456.78 690.458 L1457.34 690.458 L1457.9 690.458 L1458.46 690.458 L1459.02 690.458 L1459.58 690.458 L1460.14 690.458 L1460.7 690.458 L1461.25 690.458 L1461.81 690.458 L1462.37 690.458 L1462.93 690.458 L1463.49 690.458 L1464.05 690.458 L1464.61 690.458 L1465.17 690.458 L1465.73 690.458 L1466.29 690.458 L1466.85 690.458 L1467.41 690.458 L1467.97 690.458 L1468.52 690.458 L1469.08 690.458 L1469.64 690.458 L1470.2 690.458 L1470.76 690.458 L1471.32 690.458 L1471.88 690.458 L1472.44 690.458 L1473 690.458 L1473.56 690.458 L1474.12 690.458 L1474.68 690.458 L1475.24 690.458 L1475.79 690.458 L1476.35 690.458 L1476.91 690.458 L1477.47 690.458 L1478.03 690.458 L1478.59 690.458 L1479.15 690.458 L1479.71 690.458 L1480.27 690.458 L1480.83 690.458 L1481.39 690.458 L1481.95 690.458 L1482.51 690.458 L1483.07 690.458 L1483.62 690.458 L1484.18 690.458 L1484.74 690.458 L1485.3 690.458 L1485.86 690.458 L1486.42 690.458 L1486.98 690.458 L1487.54 690.458 L1488.1 690.458 L1488.66 690.458 L1489.22 690.458 L1489.78 690.458 L1490.34 690.458 L1490.89 690.458 L1491.45 690.458 L1492.01 690.458 L1492.57 690.458 L1493.13 690.458 L1493.69 690.458 L1494.25 690.458 L1494.81 690.458 L1495.37 690.458 L1495.93 690.458 L1496.49 690.458 L1497.05 690.458 L1497.61 690.458 L1498.16 690.458 L1498.72 690.458 L1499.28 690.458 L1499.84 690.458 L1500.4 690.458 L1500.96 690.458 L1501.52 690.458 L1502.08 690.458 L1502.64 690.458 L1503.2 690.458 L1503.76 690.458 L1504.32 690.458 L1504.88 690.458 L1505.44 690.458 L1505.99 690.458 L1506.55 690.458 L1507.11 690.458 L1507.67 690.458 L1508.23 690.458 L1508.79 690.458 L1509.35 690.458 L1509.91 690.458 L1510.47 690.458 L1511.03 690.458 L1511.59 690.458 L1512.15 690.458 L1512.71 690.458 L1513.26 690.458 L1513.82 690.458 L1514.38 690.458 L1514.94 690.458 L1515.5 690.458 L1516.06 690.458 L1516.62 690.458 L1517.18 690.458 L1517.74 690.458 L1518.3 690.458 L1518.86 690.458 L1519.42 690.458 L1519.98 690.458 L1520.53 690.458 L1521.09 690.458 L1521.65 690.458 L1522.21 690.458 L1522.77 690.458 L1523.33 690.458 L1523.89 690.458 L1524.45 690.458 L1525.01 690.458 L1525.57 690.458 L1526.13 690.458 L1526.69 690.458 L1527.25 690.458 L1527.81 690.458 L1528.36 690.458 L1528.92 690.458 L1529.48 690.458 L1530.04 690.458 L1530.6 690.458 L1531.16 690.458 L1531.72 690.458 L1532.28 690.458 L1532.84 690.458 L1533.4 690.458 L1533.96 690.458 L1534.52 690.458 L1535.08 690.458 L1535.63 690.458 L1536.19 690.458 L1536.75 690.458 L1537.31 690.458 L1537.87 690.458 L1538.43 690.458 L1538.99 690.458 L1539.55 690.458 L1540.11 690.458 L1540.67 690.458 L1541.23 690.458 L1541.79 690.458 L1542.35 690.458 L1542.9 690.458 L1543.46 690.458 L1544.02 690.458 L1544.58 690.458 L1545.14 690.458 L1545.7 690.458 L1546.26 690.458 L1546.82 690.458 L1547.38 690.458 L1547.94 690.458 L1548.5 690.458 L1549.06 690.458 L1549.62 690.458 L1550.18 690.458 L1550.73 690.458 L1551.29 690.458 L1551.85 690.458 L1552.41 690.458 L1552.97 690.458 L1553.53 690.458 L1554.09 690.458 L1554.65 690.458 L1555.21 690.458 L1555.77 690.458 L1556.33 690.458 L1556.89 690.458 L1557.45 690.458 L1558 690.458 L1558.56 690.458 L1559.12 690.458 L1559.68 690.458 L1560.24 690.458 L1560.8 690.458 L1561.36 690.458 L1561.92 690.458 L1562.48 690.458 L1563.04 690.458 L1563.6 690.458 L1564.16 690.458 L1564.72 690.458 L1565.28 690.458 L1565.83 690.458 L1566.39 690.458 L1566.95 690.458 L1567.51 690.458 L1568.07 690.458 L1568.63 690.458 L1569.19 690.458 L1569.75 690.458 L1570.31 690.458 L1570.87 690.458 L1571.43 690.458 L1571.99 690.458 L1572.55 690.458 L1573.1 690.458 L1573.66 690.458 L1574.22 690.458 L1574.78 690.458 L1575.34 690.458 L1575.9 690.458 L1576.46 690.458 L1577.02 690.458 L1577.58 690.458 L1578.14 690.458 L1578.7 690.458 L1579.26 690.458 L1579.82 690.458 L1580.37 690.458 L1580.93 690.458 L1581.49 690.458 L1582.05 690.458 L1582.61 690.458 L1583.17 690.458 L1583.73 690.458 L1584.29 690.458 L1584.85 690.458 L1585.41 690.458 L1585.97 690.458 L1586.53 690.458 L1587.09 690.458 L1587.65 690.458 L1588.2 690.458 L1588.76 690.458 L1589.32 690.458 L1589.88 690.458 L1590.44 690.458 L1591 690.458 L1591.56 690.458 L1592.12 690.458 L1592.68 690.458 L1593.24 690.458 L1593.8 690.458 L1594.36 690.458 L1594.92 690.458 L1595.47 690.458 L1596.03 690.458 L1596.59 690.458 L1597.15 690.458 L1597.71 690.458 L1598.27 690.458 L1598.83 690.458 L1599.39 690.458 L1599.95 690.458 L1600.51 690.458 L1601.07 690.458 L1601.63 690.458 L1602.19 690.458 L1602.74 690.458 L1603.3 690.458 L1603.86 690.458 L1604.42 690.458 L1604.98 690.458 L1605.54 690.458 L1606.1 690.458 L1606.66 690.458 L1607.22 690.458 L1607.78 690.458 L1608.34 690.458 L1608.9 690.458 L1609.46 690.458 L1610.02 690.458 L1610.57 690.458 L1611.13 690.458 L1611.69 690.458 L1612.25 690.458 L1612.81 690.458 L1613.37 690.458 L1613.93 690.458 L1614.49 690.458 L1615.05 690.458 L1615.61 690.458 L1616.17 690.458 L1616.73 690.458 L1617.29 690.458 L1617.84 690.458 L1618.4 690.458 L1618.96 690.458 L1619.52 690.458 L1620.08 690.458 L1620.64 690.458 L1621.2 690.458 L1621.76 690.458 L1622.32 690.458 L1622.88 690.458 L1623.44 690.458 L1624 690.458 L1624.56 690.458 L1625.11 690.458 L1625.67 690.458 L1626.23 690.458 L1626.79 690.458 L1627.35 690.458 L1627.91 690.458 L1628.47 690.458 L1629.03 690.458 L1629.59 690.458 L1630.15 690.458 L1630.71 690.458 L1631.27 690.458 L1631.83 690.458 L1632.39 690.458 L1632.94 690.458 L1633.5 690.458 L1634.06 690.458 L1634.62 690.458 L1635.18 690.458 L1635.74 690.458 L1636.3 690.458 L1636.86 690.458 L1637.42 690.458 L1637.98 690.458 L1638.54 690.458 L1639.1 690.458 L1639.66 690.458 L1640.21 690.458 L1640.77 690.458 L1641.33 690.458 L1641.89 690.458 L1642.45 690.458 L1643.01 690.458 L1643.57 690.458 L1644.13 690.458 L1644.69 690.458 L1645.25 690.458 L1645.81 690.458 L1646.37 690.458 L1646.93 690.458 L1647.48 690.458 L1648.04 690.458 L1648.6 690.458 L1649.16 690.458 L1649.72 690.458 L1650.28 690.458 L1650.84 690.458 L1651.4 690.458 L1651.96 690.458 L1652.52 690.458 L1653.08 690.458 L1653.64 690.458 L1654.2 690.458 L1654.76 690.458 L1655.31 690.458 L1655.87 690.458 L1656.43 690.458 L1656.99 690.458 L1657.55 690.458 L1658.11 690.458 L1658.67 690.458 L1659.23 690.458 L1659.79 690.458 L1660.35 690.458 L1660.91 690.458 L1661.47 690.458 L1662.03 690.458 L1662.58 690.458 L1663.14 690.458 L1663.7 690.458 L1664.26 690.458 L1664.82 690.458 L1665.38 690.458 L1665.94 690.458 L1666.5 690.458 L1667.06 690.458 L1667.62 690.458 L1668.18 690.458 L1668.74 690.458 L1669.3 690.458 L1669.85 690.458 L1670.41 690.458 L1670.97 690.458 L1671.53 690.458 L1672.09 690.458 L1672.65 690.458 L1673.21 690.458 L1673.77 690.458 L1674.33 690.458 L1674.89 690.458 L1675.45 690.458 L1676.01 690.458 L1676.57 690.458 L1677.13 690.458 L1677.68 690.458 L1678.24 690.458 L1678.8 690.458 L1679.36 690.458 L1679.92 690.458 L1680.48 690.458 L1681.04 690.458 L1681.6 690.458 L1682.16 690.458 L1682.72 690.458 L1683.28 690.458 L1683.84 690.458 L1684.4 690.458 L1684.95 690.458 L1685.51 690.458 L1686.07 690.458 L1686.63 690.458 L1687.19 690.458 L1687.75 690.458 L1688.31 690.458 L1688.87 690.458 L1689.43 690.458 L1689.99 690.458 L1690.55 690.458 L1691.11 690.458 L1691.67 690.458 L1692.23 690.458 L1692.78 690.458 L1693.34 690.458 L1693.9 690.458 L1694.46 690.458 L1695.02 690.458 L1695.58 690.458 L1696.14 690.458 L1696.7 690.458 L1697.26 690.458 L1697.82 690.458 L1698.38 690.458 L1698.94 690.458 L1699.5 690.458 L1700.05 690.458 L1700.61 690.458 L1701.17 690.458 L1701.73 690.458 L1702.29 690.458 L1702.85 690.458 L1703.41 690.458 L1703.97 690.458 L1704.53 690.458 L1705.09 690.458 L1705.65 690.458 L1706.21 690.458 L1706.77 690.458 L1707.32 690.458 L1707.88 690.458 L1708.44 690.458 L1709 690.458 L1709.56 690.458 L1710.12 690.458 L1710.68 690.458 L1711.24 690.458 L1711.8 690.458 L1712.36 690.458 L1712.92 690.458 L1713.48 690.458 L1714.04 690.458 L1714.6 690.458 L1715.15 690.458 L1715.71 690.458 L1716.27 690.458 L1716.83 690.458 L1717.39 690.458 L1717.95 690.458 L1718.51 690.458 L1719.07 690.458 L1719.63 690.458 L1720.19 690.458 L1720.75 690.458 L1721.31 690.458 L1721.87 690.458 L1722.42 690.458 L1722.98 690.458 L1723.54 690.458 L1724.1 690.458 L1724.66 690.458 L1725.22 690.458 L1725.78 690.458 L1726.34 690.458 L1726.9 690.458 L1727.46 690.458 L1728.02 690.458 L1728.58 690.458 L1729.14 690.458 L1729.69 690.458 L1730.25 690.458 L1730.81 690.458 L1731.37 690.458 L1731.93 690.458 L1732.49 690.458 L1733.05 690.458 L1733.61 690.458 L1734.17 690.458 L1734.73 690.458 L1735.29 690.458 L1735.85 690.458 L1736.41 690.458 L1736.97 690.458 L1737.52 690.458 L1738.08 690.458 L1738.64 690.458 L1739.2 690.458 L1739.76 690.458 L1740.32 690.458 L1740.88 690.458 L1741.44 690.458 L1742 690.458 L1742.56 690.458 L1743.12 690.458 L1743.68 690.458 L1744.24 690.458 L1744.79 690.458 L1745.35 690.458 L1745.91 690.458 L1746.47 690.458 L1747.03 690.458 L1747.59 690.458 L1748.15 690.458 L1748.71 690.458 L1749.27 690.458 L1749.83 690.458 L1750.39 690.458 L1750.95 690.458 L1751.51 690.458 L1752.06 690.458 L1752.62 690.458 L1753.18 690.458 L1753.74 690.458 L1754.3 690.458 L1754.86 690.458 L1755.42 690.458 L1755.98 690.458 L1756.54 690.458 L1757.1 690.458 L1757.66 690.458 L1758.22 690.458 L1758.78 690.458 L1759.34 690.458 L1759.89 690.458 L1760.45 690.458 L1761.01 690.458 L1761.57 690.458 L1762.13 690.458 L1762.69 690.458 L1763.25 690.458 L1763.81 690.458 L1764.37 690.458 L1764.93 690.458 L1765.49 690.458 L1766.05 690.458 L1766.61 690.458 L1767.16 690.458 L1767.72 690.458 L1768.28 690.458 L1768.84 690.458 L1769.4 690.458 L1769.96 690.458 L1770.52 690.458 L1771.08 690.458 L1771.64 690.458 L1772.2 690.458 L1772.76 690.458 L1773.32 690.458 L1773.88 690.458 L1774.43 690.458 L1774.99 690.458 L1775.55 690.458 L1776.11 690.458 L1776.67 690.458 L1777.23 690.458 L1777.79 690.458 L1778.35 690.458 L1778.91 690.458 L1779.47 690.458 L1780.03 690.458 L1780.59 690.458 L1781.15 690.458 L1781.71 690.458 L1782.26 690.458 L1782.82 690.458 L1783.38 690.458 L1783.94 690.458 L1784.5 690.458 L1785.06 690.458 L1785.62 690.458 L1786.18 690.458 L1786.74 690.458 L1787.3 690.458 L1787.86 690.458 L1788.42 690.458 L1788.98 690.458 L1789.53 690.458 L1790.09 690.458 L1790.65 690.458 L1791.21 690.458 L1791.77 690.458 L1792.33 690.458 L1792.89 690.458 L1793.45 690.458 L1794.01 690.458 L1794.57 690.458 L1795.13 690.458 L1795.69 690.458 L1796.25 690.458 L1796.8 690.458 L1797.36 690.458 L1797.92 690.458 L1798.48 690.458 L1799.04 690.458 L1799.6 690.458 L1800.16 690.458 L1800.72 690.458 L1801.28 690.458 L1801.84 690.458 L1802.4 690.458 L1802.96 690.458 L1803.52 690.458 L1804.08 690.458 L1804.63 690.458 L1805.19 690.458 L1805.75 690.458 L1806.31 690.458 L1806.87 690.458 L1807.43 690.458 L1807.99 690.458 L1808.55 690.458 L1809.11 690.458 L1809.67 690.458 L1810.23 690.458 L1810.79 690.458 L1811.35 690.458 L1811.9 690.458 L1812.46 690.458 L1813.02 690.458 L1813.58 690.458 L1814.14 690.458 L1814.7 690.458 L1815.26 690.458 L1815.82 690.458 L1816.38 690.458 L1816.94 690.458 L1817.5 690.458 L1818.06 690.458 L1818.62 690.458 L1819.18 690.458 L1819.73 690.458 L1820.29 690.458 L1820.85 690.458 L1821.41 690.458 L1821.97 690.458 L1822.53 690.458 L1823.09 690.458 L1823.65 690.458 L1824.21 690.458 L1824.77 690.458 L1825.33 690.458 L1825.89 690.458 L1826.45 690.458 L1827 690.458 L1827.56 690.458 L1828.12 690.458 L1828.68 690.458 L1829.24 690.458 L1829.8 690.458 L1830.36 690.458 L1830.92 690.458 L1831.48 690.458 L1832.04 690.458 L1832.6 690.458 L1833.16 690.458 L1833.72 690.458 L1834.27 690.458 L1834.83 690.458 L1835.39 690.458 L1835.95 690.458 L1836.51 690.458 L1837.07 690.458 L1837.63 690.458 L1838.19 690.458 L1838.19 682.395 L1837.63 682.395 L1837.07 682.395 L1836.51 682.395 L1835.95 682.395 L1835.39 682.395 L1834.83 682.395 L1834.27 682.395 L1833.72 682.395 L1833.16 682.395 L1832.6 682.395 L1832.04 682.395 L1831.48 682.395 L1830.92 682.395 L1830.36 682.395 L1829.8 682.395 L1829.24 682.395 L1828.68 682.395 L1828.12 682.395 L1827.56 682.395 L1827 682.395 L1826.45 682.395 L1825.89 682.395 L1825.33 682.395 L1824.77 682.395 L1824.21 682.395 L1823.65 682.395 L1823.09 682.395 L1822.53 682.395 L1821.97 682.395 L1821.41 682.395 L1820.85 682.395 L1820.29 682.395 L1819.73 682.395 L1819.18 682.395 L1818.62 682.395 L1818.06 682.395 L1817.5 682.395 L1816.94 682.395 L1816.38 682.395 L1815.82 682.395 L1815.26 682.395 L1814.7 682.395 L1814.14 682.395 L1813.58 682.395 L1813.02 682.395 L1812.46 682.395 L1811.9 682.395 L1811.35 682.395 L1810.79 682.395 L1810.23 682.395 L1809.67 682.395 L1809.11 682.395 L1808.55 682.395 L1807.99 682.395 L1807.43 682.395 L1806.87 682.395 L1806.31 682.395 L1805.75 682.395 L1805.19 682.395 L1804.63 682.395 L1804.08 682.395 L1803.52 682.395 L1802.96 682.395 L1802.4 682.395 L1801.84 682.395 L1801.28 682.395 L1800.72 682.395 L1800.16 682.395 L1799.6 682.395 L1799.04 682.395 L1798.48 682.395 L1797.92 682.395 L1797.36 682.395 L1796.8 682.395 L1796.25 682.395 L1795.69 682.395 L1795.13 682.395 L1794.57 682.395 L1794.01 682.395 L1793.45 682.395 L1792.89 682.395 L1792.33 682.395 L1791.77 682.395 L1791.21 682.395 L1790.65 682.395 L1790.09 682.395 L1789.53 682.395 L1788.98 682.395 L1788.42 682.395 L1787.86 682.395 L1787.3 682.395 L1786.74 682.395 L1786.18 682.395 L1785.62 682.395 L1785.06 682.395 L1784.5 682.395 L1783.94 682.395 L1783.38 682.395 L1782.82 682.395 L1782.26 682.395 L1781.71 682.395 L1781.15 682.395 L1780.59 682.395 L1780.03 682.395 L1779.47 682.395 L1778.91 682.395 L1778.35 682.395 L1777.79 682.395 L1777.23 682.395 L1776.67 682.395 L1776.11 682.395 L1775.55 682.395 L1774.99 682.395 L1774.43 682.395 L1773.88 682.395 L1773.32 682.395 L1772.76 682.395 L1772.2 682.395 L1771.64 682.395 L1771.08 682.395 L1770.52 682.395 L1769.96 682.395 L1769.4 682.395 L1768.84 682.395 L1768.28 682.395 L1767.72 682.395 L1767.16 682.395 L1766.61 682.395 L1766.05 682.395 L1765.49 682.395 L1764.93 682.395 L1764.37 682.395 L1763.81 682.395 L1763.25 682.395 L1762.69 682.395 L1762.13 682.395 L1761.57 682.395 L1761.01 682.395 L1760.45 682.395 L1759.89 682.395 L1759.34 682.395 L1758.78 682.395 L1758.22 682.395 L1757.66 682.395 L1757.1 682.395 L1756.54 682.395 L1755.98 682.395 L1755.42 682.395 L1754.86 682.395 L1754.3 682.395 L1753.74 682.395 L1753.18 682.395 L1752.62 682.395 L1752.06 682.395 L1751.51 682.395 L1750.95 682.395 L1750.39 682.395 L1749.83 682.395 L1749.27 682.395 L1748.71 682.395 L1748.15 682.395 L1747.59 682.395 L1747.03 682.395 L1746.47 682.395 L1745.91 682.395 L1745.35 682.395 L1744.79 682.395 L1744.24 682.395 L1743.68 682.395 L1743.12 682.395 L1742.56 682.395 L1742 682.395 L1741.44 682.395 L1740.88 682.395 L1740.32 682.395 L1739.76 682.395 L1739.2 682.395 L1738.64 682.395 L1738.08 682.395 L1737.52 682.395 L1736.97 682.395 L1736.41 682.395 L1735.85 682.395 L1735.29 682.395 L1734.73 682.395 L1734.17 682.395 L1733.61 682.395 L1733.05 682.395 L1732.49 682.395 L1731.93 682.395 L1731.37 682.395 L1730.81 682.395 L1730.25 682.395 L1729.69 682.395 L1729.14 682.395 L1728.58 682.395 L1728.02 682.395 L1727.46 682.395 L1726.9 682.395 L1726.34 682.395 L1725.78 682.395 L1725.22 682.395 L1724.66 682.395 L1724.1 682.395 L1723.54 682.395 L1722.98 682.395 L1722.42 682.395 L1721.87 682.395 L1721.31 682.395 L1720.75 682.395 L1720.19 682.395 L1719.63 682.395 L1719.07 682.395 L1718.51 682.395 L1717.95 682.395 L1717.39 682.395 L1716.83 682.395 L1716.27 682.395 L1715.71 682.395 L1715.15 682.395 L1714.6 682.395 L1714.04 682.395 L1713.48 682.395 L1712.92 682.395 L1712.36 682.395 L1711.8 682.395 L1711.24 682.395 L1710.68 682.395 L1710.12 682.395 L1709.56 682.395 L1709 682.395 L1708.44 682.395 L1707.88 682.395 L1707.32 682.395 L1706.77 682.395 L1706.21 682.395 L1705.65 682.395 L1705.09 682.395 L1704.53 682.395 L1703.97 682.395 L1703.41 682.395 L1702.85 682.395 L1702.29 682.395 L1701.73 682.395 L1701.17 682.395 L1700.61 682.395 L1700.05 682.395 L1699.5 682.395 L1698.94 682.395 L1698.38 682.395 L1697.82 682.395 L1697.26 682.395 L1696.7 682.395 L1696.14 682.395 L1695.58 682.395 L1695.02 682.395 L1694.46 682.395 L1693.9 682.395 L1693.34 682.395 L1692.78 682.395 L1692.23 682.395 L1691.67 682.395 L1691.11 682.395 L1690.55 682.395 L1689.99 682.395 L1689.43 682.395 L1688.87 682.395 L1688.31 682.395 L1687.75 682.395 L1687.19 682.395 L1686.63 682.395 L1686.07 682.395 L1685.51 682.395 L1684.95 682.395 L1684.4 682.395 L1683.84 682.395 L1683.28 682.395 L1682.72 682.395 L1682.16 682.395 L1681.6 682.395 L1681.04 682.395 L1680.48 682.395 L1679.92 682.395 L1679.36 682.395 L1678.8 682.395 L1678.24 682.395 L1677.68 682.395 L1677.13 682.395 L1676.57 682.395 L1676.01 682.395 L1675.45 682.395 L1674.89 682.395 L1674.33 682.395 L1673.77 682.395 L1673.21 682.395 L1672.65 682.395 L1672.09 682.395 L1671.53 682.395 L1670.97 682.395 L1670.41 682.395 L1669.85 682.395 L1669.3 682.395 L1668.74 682.395 L1668.18 682.395 L1667.62 682.395 L1667.06 682.395 L1666.5 682.395 L1665.94 682.395 L1665.38 682.395 L1664.82 682.395 L1664.26 682.395 L1663.7 682.395 L1663.14 682.395 L1662.58 682.395 L1662.03 682.395 L1661.47 682.395 L1660.91 682.395 L1660.35 682.395 L1659.79 682.395 L1659.23 682.395 L1658.67 682.395 L1658.11 682.395 L1657.55 682.395 L1656.99 682.395 L1656.43 682.395 L1655.87 682.395 L1655.31 682.395 L1654.76 682.395 L1654.2 682.395 L1653.64 682.395 L1653.08 682.395 L1652.52 682.395 L1651.96 682.395 L1651.4 682.395 L1650.84 682.395 L1650.28 682.395 L1649.72 682.395 L1649.16 682.395 L1648.6 682.395 L1648.04 682.395 L1647.48 682.395 L1646.93 682.395 L1646.37 682.395 L1645.81 682.395 L1645.25 682.395 L1644.69 682.395 L1644.13 682.395 L1643.57 682.395 L1643.01 682.395 L1642.45 682.395 L1641.89 682.395 L1641.33 682.395 L1640.77 682.395 L1640.21 682.395 L1639.66 682.395 L1639.1 682.395 L1638.54 682.395 L1637.98 682.395 L1637.42 682.395 L1636.86 682.395 L1636.3 682.395 L1635.74 682.395 L1635.18 682.395 L1634.62 682.395 L1634.06 682.395 L1633.5 682.395 L1632.94 682.395 L1632.39 682.395 L1631.83 682.395 L1631.27 682.395 L1630.71 682.395 L1630.15 682.395 L1629.59 682.395 L1629.03 682.395 L1628.47 682.395 L1627.91 682.395 L1627.35 682.395 L1626.79 682.395 L1626.23 682.395 L1625.67 682.395 L1625.11 682.395 L1624.56 682.395 L1624 682.395 L1623.44 682.395 L1622.88 682.395 L1622.32 682.395 L1621.76 682.395 L1621.2 682.395 L1620.64 682.395 L1620.08 682.395 L1619.52 682.395 L1618.96 682.395 L1618.4 682.395 L1617.84 682.395 L1617.29 682.395 L1616.73 682.395 L1616.17 682.395 L1615.61 682.395 L1615.05 682.395 L1614.49 682.395 L1613.93 682.395 L1613.37 682.395 L1612.81 682.395 L1612.25 682.395 L1611.69 682.395 L1611.13 682.395 L1610.57 682.395 L1610.02 682.395 L1609.46 682.395 L1608.9 682.395 L1608.34 682.395 L1607.78 682.395 L1607.22 682.395 L1606.66 682.395 L1606.1 682.395 L1605.54 682.395 L1604.98 682.395 L1604.42 682.395 L1603.86 682.395 L1603.3 682.395 L1602.74 682.395 L1602.19 682.395 L1601.63 682.395 L1601.07 682.395 L1600.51 682.395 L1599.95 682.395 L1599.39 682.395 L1598.83 682.395 L1598.27 682.395 L1597.71 682.395 L1597.15 682.395 L1596.59 682.395 L1596.03 682.395 L1595.47 682.395 L1594.92 682.395 L1594.36 682.395 L1593.8 682.395 L1593.24 682.395 L1592.68 682.395 L1592.12 682.395 L1591.56 682.395 L1591 682.395 L1590.44 682.395 L1589.88 682.395 L1589.32 682.395 L1588.76 682.395 L1588.2 682.395 L1587.65 682.395 L1587.09 682.395 L1586.53 682.395 L1585.97 682.395 L1585.41 682.395 L1584.85 682.395 L1584.29 682.395 L1583.73 682.395 L1583.17 682.395 L1582.61 682.395 L1582.05 682.395 L1581.49 682.395 L1580.93 682.395 L1580.37 682.395 L1579.82 682.395 L1579.26 682.395 L1578.7 682.395 L1578.14 682.395 L1577.58 682.395 L1577.02 682.395 L1576.46 682.395 L1575.9 682.395 L1575.34 682.395 L1574.78 682.395 L1574.22 682.395 L1573.66 682.395 L1573.1 682.395 L1572.55 682.395 L1571.99 682.395 L1571.43 682.395 L1570.87 682.395 L1570.31 682.395 L1569.75 682.395 L1569.19 682.395 L1568.63 682.395 L1568.07 682.395 L1567.51 682.395 L1566.95 682.395 L1566.39 682.395 L1565.83 682.395 L1565.28 682.395 L1564.72 682.395 L1564.16 682.395 L1563.6 682.395 L1563.04 682.395 L1562.48 682.395 L1561.92 682.395 L1561.36 682.395 L1560.8 682.395 L1560.24 682.395 L1559.68 682.395 L1559.12 682.395 L1558.56 682.395 L1558 682.395 L1557.45 682.395 L1556.89 682.395 L1556.33 682.395 L1555.77 682.395 L1555.21 682.395 L1554.65 682.395 L1554.09 682.395 L1553.53 682.395 L1552.97 682.395 L1552.41 682.395 L1551.85 682.395 L1551.29 682.395 L1550.73 682.395 L1550.18 682.395 L1549.62 682.395 L1549.06 682.395 L1548.5 682.395 L1547.94 682.395 L1547.38 682.395 L1546.82 682.395 L1546.26 682.395 L1545.7 682.395 L1545.14 682.395 L1544.58 682.395 L1544.02 682.395 L1543.46 682.395 L1542.9 682.395 L1542.35 682.395 L1541.79 682.395 L1541.23 682.395 L1540.67 682.395 L1540.11 682.395 L1539.55 682.395 L1538.99 682.395 L1538.43 682.395 L1537.87 682.395 L1537.31 682.395 L1536.75 682.395 L1536.19 682.395 L1535.63 682.395 L1535.08 682.395 L1534.52 682.395 L1533.96 682.395 L1533.4 682.395 L1532.84 682.395 L1532.28 682.395 L1531.72 682.395 L1531.16 682.395 L1530.6 682.395 L1530.04 682.395 L1529.48 682.395 L1528.92 682.395 L1528.36 682.395 L1527.81 682.395 L1527.25 682.395 L1526.69 682.395 L1526.13 682.395 L1525.57 682.395 L1525.01 682.395 L1524.45 682.395 L1523.89 682.395 L1523.33 682.395 L1522.77 682.395 L1522.21 682.395 L1521.65 682.395 L1521.09 682.395 L1520.53 682.395 L1519.98 682.395 L1519.42 682.395 L1518.86 682.395 L1518.3 682.395 L1517.74 682.395 L1517.18 682.395 L1516.62 682.395 L1516.06 682.395 L1515.5 682.395 L1514.94 682.395 L1514.38 682.395 L1513.82 682.395 L1513.26 682.395 L1512.71 682.395 L1512.15 682.395 L1511.59 682.395 L1511.03 682.395 L1510.47 682.395 L1509.91 682.395 L1509.35 682.395 L1508.79 682.395 L1508.23 682.395 L1507.67 682.395 L1507.11 682.395 L1506.55 682.395 L1505.99 682.395 L1505.44 682.395 L1504.88 682.395 L1504.32 682.395 L1503.76 682.395 L1503.2 682.395 L1502.64 682.395 L1502.08 682.395 L1501.52 682.395 L1500.96 682.395 L1500.4 682.395 L1499.84 682.395 L1499.28 682.395 L1498.72 682.395 L1498.16 682.395 L1497.61 682.395 L1497.05 682.395 L1496.49 682.395 L1495.93 682.395 L1495.37 682.395 L1494.81 682.395 L1494.25 682.395 L1493.69 682.395 L1493.13 682.395 L1492.57 682.395 L1492.01 682.395 L1491.45 682.395 L1490.89 682.395 L1490.34 682.395 L1489.78 682.395 L1489.22 682.395 L1488.66 682.395 L1488.1 682.395 L1487.54 682.395 L1486.98 682.395 L1486.42 682.395 L1485.86 682.395 L1485.3 682.395 L1484.74 682.395 L1484.18 682.395 L1483.62 682.395 L1483.07 682.395 L1482.51 682.395 L1481.95 682.395 L1481.39 682.395 L1480.83 682.395 L1480.27 682.395 L1479.71 682.395 L1479.15 682.395 L1478.59 682.395 L1478.03 682.395 L1477.47 682.395 L1476.91 682.395 L1476.35 682.395 L1475.79 682.395 L1475.24 682.395 L1474.68 682.395 L1474.12 682.395 L1473.56 682.395 L1473 682.395 L1472.44 682.395 L1471.88 682.395 L1471.32 682.395 L1470.76 682.395 L1470.2 682.395 L1469.64 682.395 L1469.08 682.395 L1468.52 682.395 L1467.97 682.395 L1467.41 682.395 L1466.85 682.395 L1466.29 682.395 L1465.73 682.395 L1465.17 682.395 L1464.61 682.395 L1464.05 682.395 L1463.49 682.395 L1462.93 682.395 L1462.37 682.395 L1461.81 682.395 L1461.25 682.395 L1460.7 682.395 L1460.14 682.395 L1459.58 682.395 L1459.02 682.395 L1458.46 682.395 L1457.9 682.395 L1457.34 682.395 L1456.78 682.395 L1456.22 682.395 L1455.66 682.395 L1455.1 682.395 L1454.54 682.395 L1453.98 682.395 L1453.42 682.395 L1452.87 682.395 L1452.31 682.395 L1451.75 682.395 L1451.19 682.395 L1450.63 682.395 L1450.07 682.395 L1449.51 682.395 L1448.95 682.395 L1448.39 682.395 L1447.83 682.395 L1447.27 682.395 L1446.71 682.395 L1446.15 682.395 L1445.6 682.395 L1445.04 682.395 L1444.48 682.395 L1443.92 682.395 L1443.36 682.395 L1442.8 682.395 L1442.24 682.395 L1441.68 682.395 L1441.12 682.395 L1440.56 682.395 L1440 682.395 L1439.44 682.395 L1438.88 682.395 L1438.33 682.395 L1437.77 682.395 L1437.21 682.395 L1436.65 682.395 L1436.09 682.395 L1435.53 682.395 L1434.97 682.395 L1434.41 682.395 L1433.85 682.395 L1433.29 682.395 L1432.73 682.395 L1432.17 682.395 L1431.61 682.395 L1431.05 682.395 L1430.5 682.395 L1429.94 682.395 L1429.38 682.395 L1428.82 682.395 L1428.26 682.395 L1427.7 682.395 L1427.14 682.395 L1426.58 682.395 L1426.02 682.395 L1425.46 682.395 L1424.9 682.395 L1424.34 682.395 L1423.78 682.395 L1423.23 682.395 L1422.67 682.395 L1422.11 682.395 L1421.55 682.395 L1420.99 682.395 L1420.43 682.395 L1419.87 682.395 L1419.31 682.395 L1418.75 682.395 L1418.19 682.395 L1417.63 682.395 L1417.07 682.395 L1416.51 682.395 L1415.95 682.395 L1415.4 682.395 L1414.84 682.395 L1414.28 682.395 L1413.72 682.395 L1413.16 682.395 L1412.6 682.395 L1412.04 682.395 L1411.48 682.395 L1410.92 682.395 L1410.36 682.395 L1409.8 682.395 L1409.24 682.395 L1408.68 682.395 L1408.13 682.395 L1407.57 682.395 L1407.01 682.395 L1406.45 682.395 L1405.89 682.395 L1405.33 682.395 L1404.77 682.395 L1404.21 682.395 L1403.65 682.395 L1403.09 682.395 L1402.53 682.395 L1401.97 682.395 L1401.41 682.395 L1400.86 682.395 L1400.3 682.395 L1399.74 682.395 L1399.18 682.395 L1398.62 682.395 L1398.06 682.395 L1397.5 682.395 L1396.94 682.395 L1396.38 682.395 L1395.82 682.395 L1395.26 682.395 L1394.7 682.395 L1394.14 682.395 L1393.58 682.395 L1393.03 682.395 L1392.47 682.395 L1391.91 682.395 L1391.35 682.395 L1390.79 682.395 L1390.23 682.395 L1389.67 682.395 L1389.11 682.395 L1388.55 682.395 L1387.99 682.395 L1387.43 682.395 L1386.87 682.395 L1386.31 682.395 L1385.76 682.395 L1385.2 682.395 L1384.64 682.395 L1384.08 682.395 L1383.52 682.395 L1382.96 682.395 L1382.4 682.395 L1381.84 682.395 L1381.28 682.395 L1380.72 682.395 L1380.16 682.395 L1379.6 682.395 L1379.04 682.395 L1378.49 682.395 L1377.93 682.395 L1377.37 682.395 L1376.81 682.395 L1376.25 682.395 L1375.69 682.395 L1375.13 682.395 L1374.57 682.395 L1374.01 682.395 L1373.45 682.395 L1372.89 682.395 L1372.33 682.395 L1371.77 682.395 L1371.21 682.395 L1370.66 682.395 L1370.1 682.395 L1369.54 682.395 L1368.98 682.395 L1368.42 682.395 L1367.86 682.395 L1367.3 682.395 L1366.74 682.395 L1366.18 682.395 L1365.62 682.395 L1365.06 682.395 L1364.5 682.395 L1363.94 682.395 L1363.39 682.395 L1362.83 682.395 L1362.27 682.395 L1361.71 682.395 L1361.15 682.395 L1360.59 682.395 L1360.03 682.395 L1359.47 682.395 L1358.91 682.395 L1358.35 682.395 L1357.79 682.395 L1357.23 682.395 L1356.67 682.395 L1356.12 682.395 L1355.56 682.395 L1355 682.395 L1354.44 682.395 L1353.88 682.395 L1353.32 682.395 L1352.76 682.395 L1352.2 682.395 L1351.64 682.395 L1351.08 682.395 L1350.52 682.395 L1349.96 682.395 L1349.4 682.395 L1348.84 682.395 L1348.29 682.395 L1347.73 682.395 L1347.17 682.395 L1346.61 682.395 L1346.05 682.395 L1345.49 682.395 L1344.93 682.395 L1344.37 682.395 L1343.81 682.395 L1343.25 682.395 L1342.69 682.395 L1342.13 682.395 L1341.57 682.395 L1341.02 682.395 L1340.46 682.395 L1339.9 682.395 L1339.34 682.395 L1338.78 682.395 L1338.22 682.395 L1337.66 682.395 L1337.1 682.395 L1336.54 682.395 L1335.98 682.395 L1335.42 682.395 L1334.86 682.395 L1334.3 682.395 L1333.75 682.395 L1333.19 682.395 L1332.63 682.395 L1332.07 682.395 L1331.51 682.395 L1330.95 682.395 L1330.39 682.395 L1329.83 682.395 L1329.27 682.395 L1328.71 682.395 L1328.15 682.395 L1327.59 682.395 L1327.03 682.395 L1326.47 682.395 L1325.92 682.395 L1325.36 682.395 L1324.8 682.395 L1324.24 682.395 L1323.68 682.395 L1323.12 682.395 L1322.56 682.395 L1322 682.395 L1321.44 682.395 L1320.88 682.395 L1320.32 682.395 L1319.76 682.395 L1319.2 682.395 L1318.65 682.395 L1318.09 682.395 L1317.53 682.395 L1316.97 682.395 L1316.41 682.395 L1315.85 682.395 L1315.29 682.395 L1314.73 682.395 L1314.17 682.395 L1313.61 682.395 L1313.05 682.395 L1312.49 682.395 L1311.93 682.395 L1311.38 682.395 L1310.82 682.395 L1310.26 682.395 L1309.7 682.395 L1309.14 682.395 L1308.58 682.395 L1308.02 682.395 L1307.46 682.395 L1306.9 682.395 L1306.34 682.395 L1305.78 682.395 L1305.22 682.395 L1304.66 682.395 L1304.1 682.395 L1303.55 682.395 L1302.99 682.395 L1302.43 682.395 L1301.87 682.395 L1301.31 682.395 L1300.75 682.395 L1300.19 682.395 L1299.63 682.395 L1299.07 682.395 L1298.51 682.395 L1297.95 682.395 L1297.39 682.395 L1296.83 682.395 L1296.28 682.395 L1295.72 682.395 L1295.16 682.395 L1294.6 682.395 L1294.04 682.395 L1293.48 682.395 L1292.92 682.395 L1292.36 682.395 L1291.8 682.395 L1291.24 682.395 L1290.68 682.395 L1290.12 682.395 L1289.56 682.395 L1289 682.395 L1288.45 682.395 L1287.89 682.395 L1287.33 682.395 L1286.77 682.395 L1286.21 682.395 L1285.65 682.395 L1285.09 682.395 L1284.53 682.395 L1283.97 682.395 L1283.41 682.395 L1282.85 682.395 L1282.29 682.395 L1281.73 682.395 L1281.18 682.395 L1280.62 682.395 L1280.06 682.395 L1279.5 682.395 L1278.94 682.395 L1278.38 682.395 L1277.82 682.395 L1277.26 682.395 L1276.7 682.395 L1276.14 682.395 L1275.58 682.395 L1275.02 682.395 L1274.46 682.395 L1273.91 682.395 L1273.35 682.395 L1272.79 682.395 L1272.23 682.395 L1271.67 682.395 L1271.11 682.395 L1270.55 682.395 L1269.99 682.395 L1269.43 682.395 L1268.87 682.395 L1268.31 682.395 L1267.75 682.395 L1267.19 682.395 L1266.63 682.395 L1266.08 682.395 L1265.52 682.395 L1264.96 682.395 L1264.4 682.395 L1263.84 682.395 L1263.28 682.395 L1262.72 682.395 L1262.16 682.395 L1261.6 682.395 L1261.04 682.395 L1260.48 682.395 L1259.92 682.395 L1259.36 682.395 L1258.81 682.395 L1258.25 682.395 L1257.69 682.395 L1257.13 682.395 L1256.57 682.395 L1256.01 682.395 L1255.45 682.395 L1254.89 682.395 L1254.33 682.395 L1253.77 682.395 L1253.21 682.395 L1252.65 682.395 L1252.09 682.395 L1251.54 682.395 L1250.98 682.395 L1250.42 682.395 L1249.86 682.395 L1249.3 682.395 L1248.74 682.395 L1248.18 682.395 L1247.62 682.395 L1247.06 682.395 L1246.5 682.395 L1245.94 682.395 L1245.38 682.395 L1244.82 682.395 L1244.26 682.395 L1243.71 682.395 L1243.15 682.395 L1242.59 682.395 L1242.03 682.395 L1241.47 682.395 L1240.91 682.395 L1240.35 682.395 L1239.79 682.395 L1239.23 682.395 L1238.67 682.395 L1238.11 682.395 L1237.55 682.395 L1236.99 682.395 L1236.44 682.395 L1235.88 682.395 L1235.32 682.395 L1234.76 682.395 L1234.2 682.395 L1233.64 682.395 L1233.08 682.395 L1232.52 682.395 L1231.96 682.395 L1231.4 682.395 L1230.84 682.395 L1230.28 682.395 L1229.72 682.395 L1229.17 682.395 L1228.61 682.395 L1228.05 682.395 L1227.49 682.395 L1226.93 682.395 L1226.37 682.395 L1225.81 682.395 L1225.25 682.395 L1224.69 682.395 L1224.13 682.395 L1223.57 682.395 L1223.01 682.395 L1222.45 682.395 L1221.89 682.395 L1221.34 682.395 L1220.78 682.395 L1220.22 682.395 L1219.66 682.395 L1219.1 682.395 L1218.54 682.395 L1217.98 682.395 L1217.42 682.395 L1216.86 682.395 L1216.3 682.395 L1215.74 682.395 L1215.18 682.395 L1214.62 682.395 L1214.07 682.395 L1213.51 682.395 L1212.95 682.395 L1212.39 682.395 L1211.83 682.395 L1211.27 682.395 L1210.71 682.395 L1210.15 682.395 L1209.59 682.395 L1209.03 682.395 L1208.47 682.395 L1207.91 682.395 L1207.35 682.395 L1206.8 682.395 L1206.24 682.395 L1205.68 682.395 L1205.12 682.395 L1204.56 682.395 L1204 682.395 L1203.44 682.395 L1202.88 682.395 L1202.32 682.395 L1201.76 682.395 L1201.2 682.395 L1200.64 682.395 L1200.08 682.395 L1199.52 682.395 L1198.97 682.395 L1198.41 682.395 L1197.85 682.395 L1197.29 682.395 L1196.73 682.395 L1196.17 682.395 L1195.61 682.395 L1195.05 682.395 L1194.49 682.395 L1193.93 682.395 L1193.37 682.395 L1192.81 682.395 L1192.25 682.395 L1191.7 682.395 L1191.14 682.395 L1190.58 682.395 L1190.02 682.395 L1189.46 682.395 L1188.9 682.395 L1188.34 682.395 L1187.78 682.395 L1187.22 682.395 L1186.66 682.395 L1186.1 682.395 L1185.54 682.395 L1184.98 682.395 L1184.43 682.395 L1183.87 682.395 L1183.31 682.395 L1182.75 682.395 L1182.19 682.395 L1181.63 682.395 L1181.07 682.395 L1180.51 682.395 L1179.95 682.395 L1179.39 682.395 L1178.83 682.395 L1178.27 682.395 L1177.71 682.395 L1177.15 682.395 L1176.6 682.395 L1176.04 682.395 L1175.48 682.395 L1174.92 682.395 L1174.36 682.395 L1173.8 682.395 L1173.24 682.395 L1172.68 682.395 L1172.12 682.395 L1171.56 682.395 L1171 682.395 L1170.44 682.395 L1169.88 682.395 L1169.33 682.395 L1168.77 682.395 L1168.21 682.395 L1167.65 682.395 L1167.09 682.395 L1166.53 682.395 L1165.97 682.395 L1165.41 682.395 L1164.85 682.395 L1164.29 682.395 L1163.73 682.395 L1163.17 682.395 L1162.61 682.395 L1162.05 682.395 L1161.5 682.395 L1160.94 682.395 L1160.38 682.395 L1159.82 682.395 L1159.26 682.395 L1158.7 682.395 L1158.14 682.395 L1157.58 682.395 L1157.02 682.395 L1156.46 682.395 L1155.9 682.395 L1155.34 682.395 L1154.78 682.395 L1154.23 682.395 L1153.67 682.395 L1153.11 682.395 L1152.55 682.395 L1151.99 682.395 L1151.43 682.395 L1150.87 682.395 L1150.31 682.395 L1149.75 682.395 L1149.19 682.395 L1148.63 682.395 L1148.07 682.395 L1147.51 682.395 L1146.96 682.395 L1146.4 682.395 L1145.84 682.395 L1145.28 682.395 L1144.72 682.395 L1144.16 682.395 L1143.6 682.395 L1143.04 682.395 L1142.48 682.395 L1141.92 682.395 L1141.36 682.395 L1140.8 682.395 L1140.24 682.395 L1139.68 682.395 L1139.13 682.395 L1138.57 682.395 L1138.01 682.395 L1137.45 682.395 L1136.89 682.395 L1136.33 682.395 L1135.77 682.395 L1135.21 682.395 L1134.65 682.395 L1134.09 682.395 L1133.53 682.395 L1132.97 682.395 L1132.41 682.395 L1131.86 682.395 L1131.3 682.395 L1130.74 682.395 L1130.18 682.395 L1129.62 682.395 L1129.06 682.395 L1128.5 682.395 L1127.94 682.395 L1127.38 682.395 L1126.82 682.395 L1126.26 682.395 L1125.7 682.395 L1125.14 682.395 L1124.59 682.395 L1124.03 682.395 L1123.47 682.395 L1122.91 682.395 L1122.35 682.395 L1121.79 682.395 L1121.23 682.395 L1120.67 682.395 L1120.11 682.395 L1119.55 682.395 L1118.99 682.395 L1118.43 682.395 L1117.87 682.395 L1117.31 682.395 L1116.76 682.395 L1116.2 682.395 L1115.64 682.395 L1115.08 682.395 L1114.52 682.395 L1113.96 682.395 L1113.4 682.395 L1112.84 682.395 L1112.28 682.395 L1111.72 682.395 L1111.16 682.395 L1110.6 682.395 L1110.04 682.395 L1109.49 682.395 L1108.93 682.395 L1108.37 682.395 L1107.81 682.395 L1107.25 682.395 L1106.69 682.395 L1106.13 682.395 L1105.57 682.395 L1105.01 682.395 L1104.45 682.395 L1103.89 682.395 L1103.33 682.395 L1102.77 682.395 L1102.22 682.395 L1101.66 682.395 L1101.1 682.395 L1100.54 682.395 L1099.98 682.395 L1099.42 682.395 L1098.86 682.395 L1098.3 682.395 L1097.74 682.395 L1097.18 682.395 L1096.62 682.395 L1096.06 682.395 L1095.5 682.395 L1094.94 682.395 L1094.39 682.395 L1093.83 682.395 L1093.27 682.395 L1092.71 682.395 L1092.15 682.395 L1091.59 682.395 L1091.03 682.395 L1090.47 682.395 L1089.91 682.395 L1089.35 682.395 L1088.79 682.395 L1088.23 682.395 L1087.67 682.395 L1087.12 682.395 L1086.56 682.395 L1086 682.395 L1085.44 682.395 L1084.88 682.395 L1084.32 682.395 L1083.76 682.395 L1083.2 682.395 L1082.64 682.395 L1082.08 682.395 L1081.52 682.395 L1080.96 682.395 L1080.4 682.395 L1079.85 682.395 L1079.29 682.395 L1078.73 682.395 L1078.17 682.395 L1077.61 682.395 L1077.05 682.395 L1076.49 682.395 L1075.93 682.395 L1075.37 682.395 L1074.81 682.395 L1074.25 682.395 L1073.69 682.395 L1073.13 682.395 L1072.57 682.395 L1072.02 682.395 L1071.46 682.395 L1070.9 682.395 L1070.34 682.395 L1069.78 682.395 L1069.22 682.395 L1068.66 682.395 L1068.1 682.395 L1067.54 682.395 L1066.98 682.395 L1066.42 682.395 L1065.86 682.395 L1065.3 682.395 L1064.75 682.395 L1064.19 682.395 L1063.63 682.395 L1063.07 682.395 L1062.51 682.395 L1061.95 682.395 L1061.39 682.395 L1060.83 682.395 L1060.27 682.395 L1059.71 682.395 L1059.15 682.395 L1058.59 682.395 L1058.03 682.395 L1057.48 682.395 L1056.92 682.395 L1056.36 682.395 L1055.8 682.395 L1055.24 682.395 L1054.68 682.395 L1054.12 682.395 L1053.56 682.395 L1053 682.395 L1052.44 682.395 L1051.88 682.395 L1051.32 682.395 L1050.76 682.395 L1050.2 682.395 L1049.65 682.395 L1049.09 682.395 L1048.53 682.395 L1047.97 682.395 L1047.41 682.395 L1046.85 682.395 L1046.29 682.395 L1045.73 682.395 L1045.17 682.395 L1044.61 682.395 L1044.05 682.395 L1043.49 682.395 L1042.93 682.395 L1042.38 682.395 L1041.82 682.395 L1041.26 682.395 L1040.7 682.395 L1040.14 682.395 L1039.58 682.395 L1039.02 682.395 L1038.46 682.395 L1037.9 682.395 L1037.34 682.395 L1036.78 682.395 L1036.22 682.395 L1035.66 682.395 L1035.1 682.395 L1034.55 682.395 L1033.99 682.395 L1033.43 682.395 L1032.87 682.395 L1032.31 682.395 L1031.75 682.395 L1031.19 682.395 L1030.63 682.395 L1030.07 682.395 L1029.51 682.395 L1028.95 682.395 L1028.39 682.395 L1027.83 682.395 L1027.28 682.395 L1026.72 682.395 L1026.16 682.395 L1025.6 682.395 L1025.04 682.395 L1024.48 682.395 L1023.92 682.395 L1023.36 682.395 L1022.8 682.395 L1022.24 682.395 L1021.68 682.395 L1021.12 682.395 L1020.56 682.395 L1020.01 682.395 L1019.45 682.395 L1018.89 682.395 L1018.33 682.395 L1017.77 682.395 L1017.21 682.395 L1016.65 682.395 L1016.09 682.395 L1015.53 682.395 L1014.97 682.395 L1014.41 682.395 L1013.85 682.395 L1013.29 682.395 L1012.73 682.395 L1012.18 682.395 L1011.62 682.395 L1011.06 682.395 L1010.5 682.395 L1009.94 682.395 L1009.38 682.395 L1008.82 682.395 L1008.26 682.395 L1007.7 682.395 L1007.14 682.395 L1006.58 682.395 L1006.02 682.395 L1005.46 682.395 L1004.91 682.395 L1004.35 682.395 L1003.79 682.395 L1003.23 682.395 L1002.67 682.395 L1002.11 682.395 L1001.55 682.395 L1000.99 682.395 L1000.43 682.395 L999.872 682.395 L999.313 682.395 L998.754 682.395 L998.194 682.395 L997.635 682.395 L997.076 682.395 L996.517 682.395 L995.957 682.395 L995.398 682.395 L994.839 682.395 L994.28 682.395 L993.72 682.395 L993.161 682.395 L992.602 682.395 L992.043 682.395 L991.483 682.395 L990.924 682.395 L990.365 682.395 L989.806 682.395 L989.246 682.395 L988.687 682.395 L988.128 682.395 L987.569 682.395 L987.009 682.395 L986.45 682.395 L985.891 682.395 L985.332 682.395 L984.772 682.395 L984.213 682.395 L983.654 682.395 L983.095 682.395 L982.535 682.395 L981.976 682.395 L981.417 682.395 L980.858 682.395 L980.298 682.395 L979.739 682.395 L979.18 682.395 L978.621 682.395 L978.061 682.395 L977.502 682.395 L976.943 682.395 L976.384 682.395 L975.824 682.395 L975.265 682.395 L974.706 682.395 L974.147 682.395 L973.587 682.395 L973.028 682.395 L972.469 682.395 L971.91 682.395 L971.35 682.395 L970.791 682.395 L970.232 682.395 L969.673 682.395 L969.113 682.395 L968.554 682.395 L967.995 682.395 L967.436 682.395 L966.876 682.395 L966.317 682.395 L965.758 682.395 L965.199 682.395 L964.639 682.395 L964.08 682.395 L963.521 682.395 L962.962 682.395 L962.402 682.395 L961.843 682.395 L961.284 682.395 L960.725 682.395 L960.165 682.395 L959.606 682.395 L959.047 682.395 L958.488 682.395 L957.928 682.395 L957.369 682.395 L956.81 682.395 L956.251 682.395 L955.691 682.395 L955.132 682.395 L954.573 682.395 L954.014 682.395 L953.454 682.395 L952.895 682.395 L952.336 682.395 L951.777 682.395 L951.217 682.395 L950.658 682.395 L950.099 682.395 L949.54 682.395 L948.98 682.395 L948.421 682.395 L947.862 682.395 L947.303 682.395 L946.743 682.395 L946.184 682.395 L945.625 682.395 L945.066 682.395 L944.506 682.395 L943.947 682.395 L943.388 682.395 L942.829 682.395 L942.269 682.395 L941.71 682.395 L941.151 682.395 L940.592 682.395 L940.032 682.395 L939.473 682.395 L938.914 682.395 L938.355 682.395 L937.795 682.395 L937.236 682.395 L936.677 682.395 L936.118 682.395 L935.558 682.395 L934.999 682.395 L934.44 682.395 L933.881 682.395 L933.321 682.395 L932.762 682.395 L932.203 682.395 L931.644 682.395 L931.084 682.395 L930.525 682.395 L929.966 682.395 L929.406 682.395 L928.847 682.395 L928.288 682.395 L927.729 682.395 L927.169 682.395 L926.61 682.395 L926.051 682.395 L925.492 682.395 L924.932 682.395 L924.373 682.395 L923.814 682.395 L923.255 682.395 L922.695 682.395 L922.136 682.395 L921.577 682.395 L921.018 682.395 L920.458 682.395 L919.899 682.395 L919.34 682.395 L918.781 682.395 L918.221 682.395 L917.662 682.395 L917.103 682.395 L916.544 682.395 L915.984 682.395 L915.425 682.395 L914.866 682.395 L914.307 682.395 L913.747 682.395 L913.188 682.395 L912.629 682.395 L912.07 682.395 L911.51 682.395 L910.951 682.395 L910.392 682.395 L909.833 682.395 L909.273 682.395 L908.714 682.395 L908.155 682.395 L907.596 682.395 L907.036 682.395 L906.477 682.395 L905.918 682.395 L905.359 682.395 L904.799 682.395 L904.24 682.395 L903.681 682.395 L903.122 682.395 L902.562 682.395 L902.003 682.395 L901.444 682.395 L900.885 682.395 L900.325 682.395 L899.766 682.395 L899.207 682.395 L898.648 682.395 L898.088 682.395 L897.529 682.395 L896.97 682.395 L896.411 682.395 L895.851 682.395 L895.292 682.395 L894.733 682.395 L894.174 682.395 L893.614 682.395 L893.055 682.395 L892.496 682.395 L891.937 682.395 L891.377 682.395 L890.818 682.395 L890.259 682.395 L889.7 682.395 L889.14 682.395 L888.581 682.395 L888.022 682.395 L887.463 682.395 L886.903 682.395 L886.344 682.395 L885.785 682.395 L885.226 682.395 L884.666 682.395 L884.107 682.395 L883.548 682.395 L882.989 682.395 L882.429 682.395 L881.87 682.395 L881.311 682.395 L880.752 682.395 L880.192 682.395 L879.633 682.395 L879.074 682.395 L878.515 682.395 L877.955 682.395 L877.396 682.395 L876.837 682.395 L876.278 682.395 L875.718 682.395 L875.159 682.395 L874.6 682.395 L874.041 682.395 L873.481 682.395 L872.922 682.395 L872.363 682.395 L871.804 682.395 L871.244 682.395 L870.685 682.395 L870.126 682.395 L869.567 682.395 L869.007 682.395 L868.448 682.395 L867.889 682.395 L867.33 682.395 L866.77 682.395 L866.211 682.395 L865.652 682.395 L865.093 682.395 L864.533 682.395 L863.974 682.395 L863.415 682.395 L862.856 682.395 L862.296 682.395 L861.737 682.395 L861.178 682.395 L860.619 682.395 L860.059 682.395 L859.5 682.395 L858.941 682.395 L858.382 682.395 L857.822 682.395 L857.263 682.395 L856.704 682.395 L856.145 682.395 L855.585 682.395 L855.026 682.395 L854.467 682.395 L853.908 682.395 L853.348 682.395 L852.789 682.395 L852.23 682.395 L851.671 682.395 L851.111 682.395 L850.552 682.395 L849.993 682.395 L849.434 682.395 L848.874 682.395 L848.315 682.395 L847.756 682.395 L847.197 682.395 L846.637 682.395 L846.078 682.395 L845.519 682.395 L844.96 682.395 L844.4 682.395 L843.841 682.395 L843.282 682.395 L842.723 682.395 L842.163 682.395 L841.604 682.395 L841.045 682.395 L840.486 682.395 L839.926 682.395 L839.367 682.395 L838.808 682.395 L838.249 682.395 L837.689 682.395 L837.13 682.395 L836.571 682.395 L836.012 682.395 L835.452 682.395 L834.893 682.395 L834.334 682.395 L833.775 682.395 L833.215 682.395 L832.656 682.395 L832.097 682.395 L831.538 682.395 L830.978 682.395 L830.419 682.395 L829.86 682.395 L829.301 682.395 L828.741 682.395 L828.182 682.395 L827.623 682.395 L827.064 682.395 L826.504 682.395 L825.945 682.395 L825.386 682.395 L824.827 682.395 L824.267 682.395 L823.708 682.395 L823.149 682.395 L822.59 682.395 L822.03 682.395 L821.471 682.395 L820.912 682.395 L820.353 682.395 L819.793 682.395 L819.234 682.395 L818.675 682.395 L818.116 682.395 L817.556 682.395 L816.997 682.395 L816.438 682.395 L815.879 682.395 L815.319 682.395 L814.76 682.395 L814.201 682.395 L813.642 682.395 L813.082 682.395 L812.523 682.395 L811.964 682.395 L811.405 682.395 L810.845 682.395 L810.286 682.395 L809.727 682.395 L809.168 682.395 L808.608 682.395 L808.049 682.395 L807.49 682.395 L806.931 682.395 L806.371 682.395 L805.812 682.395 L805.253 682.395 L804.693 682.395 L804.134 682.395 L803.575 682.395 L803.016 682.395 L802.456 682.395 L801.897 682.395 L801.338 682.395 L800.779 682.395 L800.219 682.395 L799.66 682.395 L799.101 682.395 L798.542 682.395 L797.982 682.395 L797.423 682.395 L796.864 682.395 L796.305 682.395 L795.745 682.395 L795.186 682.395 L794.627 682.395 L794.068 682.395 L793.508 682.395 L792.949 682.395 L792.39 682.395 L791.831 682.395 L791.271 682.395 L790.712 682.395 L790.153 682.395 L789.594 682.395 L789.034 682.395 L788.475 682.395 L787.916 682.395 L787.357 682.395 L786.797 682.395 L786.238 682.395 L785.679 682.395 L785.12 682.395 L784.56 682.395 L784.001 682.395 L783.442 682.395 L782.883 682.395 L782.323 682.395 L781.764 682.395 L781.205 682.395 L780.646 682.395 L780.086 682.395 L779.527 682.395 L778.968 682.395 L778.409 682.395 L777.849 682.395 L777.29 682.395 L776.731 682.395 L776.172 682.395 L775.612 682.395 L775.053 682.395 L774.494 682.395 L773.935 682.395 L773.375 682.395 L772.816 682.395 L772.257 682.395 L771.698 682.395 L771.138 682.395 L770.579 682.395 L770.02 682.395 L769.461 682.395 L768.901 682.395 L768.342 682.395 L767.783 682.395 L767.224 682.395 L766.664 682.395 L766.105 682.395 L765.546 682.395 L764.987 682.395 L764.427 682.395 L763.868 682.395 L763.309 682.395 L762.75 682.395 L762.19 682.395 L761.631 682.395 L761.072 682.395 L760.513 682.395 L759.953 682.395 L759.394 682.395 L758.835 682.395 L758.276 682.395 L757.716 682.395 L757.157 682.395 L756.598 682.395 L756.039 682.395 L755.479 682.395 L754.92 682.395 L754.361 682.395 L753.802 682.395 L753.242 682.395 L752.683 682.395 L752.124 682.395 L751.565 682.395 L751.005 682.395 L750.446 682.395 L749.887 682.395 L749.328 682.395 L748.768 682.395 L748.209 682.395 L747.65 682.395 L747.091 682.395 L746.531 682.395 L745.972 682.395 L745.413 682.395 L744.854 682.395 L744.294 682.395 L743.735 682.395 L743.176 682.395 L742.617 682.395 L742.057 682.395 L741.498 682.395 L740.939 682.395 L740.38 682.395 L739.82 682.395 L739.261 682.395 L738.702 682.395 L738.143 682.395 L737.583 682.395 L737.024 682.395 L736.465 682.395 L735.906 682.395 L735.346 682.395 L734.787 682.395 L734.228 682.395 L733.669 682.395 L733.109 682.395 L732.55 682.395 L731.991 682.395 L731.432 682.395 L730.872 682.395 L730.313 682.395 L729.754 682.395 L729.195 682.395 L728.635 682.395 L728.076 682.395 L727.517 682.395 L726.958 682.395 L726.398 682.395 L725.839 682.395 L725.28 682.395 L724.721 682.395 L724.161 682.395 L723.602 682.395 L723.043 682.395 L722.484 682.395 L721.924 682.395 L721.365 682.395 L720.806 682.395 L720.247 682.395  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip243)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,686.427 720.806,686.427 721.365,686.427 721.924,686.427 722.484,686.427 723.043,686.427 723.602,686.427 724.161,686.427 724.721,686.427 725.28,686.427 725.839,686.427 726.398,686.427 726.958,686.427 727.517,686.427 728.076,686.427 728.635,686.427 729.195,686.427 729.754,686.427 730.313,686.427 730.872,686.427 731.432,686.427 731.991,686.427 732.55,686.427 733.109,686.427 733.669,686.427 734.228,686.427 734.787,686.427 735.346,686.427 735.906,686.427 736.465,686.427 737.024,686.427 737.583,686.427 738.143,686.427 738.702,686.427 739.261,686.427 739.82,686.427 740.38,686.427 740.939,686.427 741.498,686.427 742.057,686.427 742.617,686.427 743.176,686.427 743.735,686.427 744.294,686.427 744.854,686.427 745.413,686.427 745.972,686.427 746.531,686.427 747.091,686.427 747.65,686.427 748.209,686.427 748.768,686.427 749.328,686.427 749.887,686.427 750.446,686.427 751.005,686.427 751.565,686.427 752.124,686.427 752.683,686.427 753.242,686.427 753.802,686.427 754.361,686.427 754.92,686.427 755.479,686.427 756.039,686.427 756.598,686.427 757.157,686.427 757.716,686.427 758.276,686.427 758.835,686.427 759.394,686.427 759.953,686.427 760.513,686.427 761.072,686.427 761.631,686.427 762.19,686.427 762.75,686.427 763.309,686.427 763.868,686.427 764.427,686.427 764.987,686.427 765.546,686.427 766.105,686.427 766.664,686.427 767.224,686.427 767.783,686.427 768.342,686.427 768.901,686.427 769.461,686.427 770.02,686.427 770.579,686.427 771.138,686.427 771.698,686.427 772.257,686.427 772.816,686.427 773.375,686.427 773.935,686.427 774.494,686.427 775.053,686.427 775.612,686.427 776.172,686.427 776.731,686.427 777.29,686.427 777.849,686.427 778.409,686.427 778.968,686.427 779.527,686.427 780.086,686.427 780.646,686.427 781.205,686.427 781.764,686.427 782.323,686.427 782.883,686.427 783.442,686.427 784.001,686.427 784.56,686.427 785.12,686.427 785.679,686.427 786.238,686.427 786.797,686.427 787.357,686.427 787.916,686.427 788.475,686.427 789.034,686.427 789.594,686.427 790.153,686.427 790.712,686.427 791.271,686.427 791.831,686.427 792.39,686.427 792.949,686.427 793.508,686.427 794.068,686.427 794.627,686.427 795.186,686.427 795.745,686.427 796.305,686.427 796.864,686.427 797.423,686.427 797.982,686.427 798.542,686.427 799.101,686.427 799.66,686.427 800.219,686.427 800.779,686.427 801.338,686.427 801.897,686.427 802.456,686.427 803.016,686.427 803.575,686.427 804.134,686.427 804.693,686.427 805.253,686.427 805.812,686.427 806.371,686.427 806.931,686.427 807.49,686.427 808.049,686.427 808.608,686.427 809.168,686.427 809.727,686.427 810.286,686.427 810.845,686.427 811.405,686.427 811.964,686.427 812.523,686.427 813.082,686.427 813.642,686.427 814.201,686.427 814.76,686.427 815.319,686.427 815.879,686.427 816.438,686.427 816.997,686.427 817.556,686.427 818.116,686.427 818.675,686.427 819.234,686.427 819.793,686.427 820.353,686.427 820.912,686.427 821.471,686.427 822.03,686.427 822.59,686.427 823.149,686.427 823.708,686.427 824.267,686.427 824.827,686.427 825.386,686.427 825.945,686.427 826.504,686.427 827.064,686.427 827.623,686.427 828.182,686.427 828.741,686.427 829.301,686.427 829.86,686.427 830.419,686.427 830.978,686.427 831.538,686.427 832.097,686.427 832.656,686.427 833.215,686.427 833.775,686.427 834.334,686.427 834.893,686.427 835.452,686.427 836.012,686.427 836.571,686.427 837.13,686.427 837.689,686.427 838.249,686.427 838.808,686.427 839.367,686.427 839.926,686.427 840.486,686.427 841.045,686.427 841.604,686.427 842.163,686.427 842.723,686.427 843.282,686.427 843.841,686.427 844.4,686.427 844.96,686.427 845.519,686.427 846.078,686.427 846.637,686.427 847.197,686.427 847.756,686.427 848.315,686.427 848.874,686.427 849.434,686.427 849.993,686.427 850.552,686.427 851.111,686.427 851.671,686.427 852.23,686.427 852.789,686.427 853.348,686.427 853.908,686.427 854.467,686.427 855.026,686.427 855.585,686.427 856.145,686.427 856.704,686.427 857.263,686.427 857.822,686.427 858.382,686.427 858.941,686.427 859.5,686.427 860.059,686.427 860.619,686.427 861.178,686.427 861.737,686.427 862.296,686.427 862.856,686.427 863.415,686.427 863.974,686.427 864.533,686.427 865.093,686.427 865.652,686.427 866.211,686.427 866.77,686.427 867.33,686.427 867.889,686.427 868.448,686.427 869.007,686.427 869.567,686.427 870.126,686.427 870.685,686.427 871.244,686.427 871.804,686.427 872.363,686.427 872.922,686.427 873.481,686.427 874.041,686.427 874.6,686.427 875.159,686.427 875.718,686.427 876.278,686.427 876.837,686.427 877.396,686.427 877.955,686.427 878.515,686.427 879.074,686.427 879.633,686.427 880.192,686.427 880.752,686.427 881.311,686.427 881.87,686.427 882.429,686.427 882.989,686.427 883.548,686.427 884.107,686.427 884.666,686.427 885.226,686.427 885.785,686.427 886.344,686.427 886.903,686.427 887.463,686.427 888.022,686.427 888.581,686.427 889.14,686.427 889.7,686.427 890.259,686.427 890.818,686.427 891.377,686.427 891.937,686.427 892.496,686.427 893.055,686.427 893.614,686.427 894.174,686.427 894.733,686.427 895.292,686.427 895.851,686.427 896.411,686.427 896.97,686.427 897.529,686.427 898.088,686.427 898.648,686.427 899.207,686.427 899.766,686.427 900.325,686.427 900.885,686.427 901.444,686.427 902.003,686.427 902.562,686.427 903.122,686.427 903.681,686.427 904.24,686.427 904.799,686.427 905.359,686.427 905.918,686.427 906.477,686.427 907.036,686.427 907.596,686.427 908.155,686.427 908.714,686.427 909.273,686.427 909.833,686.427 910.392,686.427 910.951,686.427 911.51,686.427 912.07,686.427 912.629,686.427 913.188,686.427 913.747,686.427 914.307,686.427 914.866,686.427 915.425,686.427 915.984,686.427 916.544,686.427 917.103,686.427 917.662,686.427 918.221,686.427 918.781,686.427 919.34,686.427 919.899,686.427 920.458,686.427 921.018,686.427 921.577,686.427 922.136,686.427 922.695,686.427 923.255,686.427 923.814,686.427 924.373,686.427 924.932,686.427 925.492,686.427 926.051,686.427 926.61,686.427 927.169,686.427 927.729,686.427 928.288,686.427 928.847,686.427 929.406,686.427 929.966,686.427 930.525,686.427 931.084,686.427 931.644,686.427 932.203,686.427 932.762,686.427 933.321,686.427 933.881,686.427 934.44,686.427 934.999,686.427 935.558,686.427 936.118,686.427 936.677,686.427 937.236,686.427 937.795,686.427 938.355,686.427 938.914,686.427 939.473,686.427 940.032,686.427 940.592,686.427 941.151,686.427 941.71,686.427 942.269,686.427 942.829,686.427 943.388,686.427 943.947,686.427 944.506,686.427 945.066,686.427 945.625,686.427 946.184,686.427 946.743,686.427 947.303,686.427 947.862,686.427 948.421,686.427 948.98,686.427 949.54,686.427 950.099,686.427 950.658,686.427 951.217,686.427 951.777,686.427 952.336,686.427 952.895,686.427 953.454,686.427 954.014,686.427 954.573,686.427 955.132,686.427 955.691,686.427 956.251,686.427 956.81,686.427 957.369,686.427 957.928,686.427 958.488,686.427 959.047,686.427 959.606,686.427 960.165,686.427 960.725,686.427 961.284,686.427 961.843,686.427 962.402,686.427 962.962,686.427 963.521,686.427 964.08,686.427 964.639,686.427 965.199,686.427 965.758,686.427 966.317,686.427 966.876,686.427 967.436,686.427 967.995,686.427 968.554,686.427 969.113,686.427 969.673,686.427 970.232,686.427 970.791,686.427 971.35,686.427 971.91,686.427 972.469,686.427 973.028,686.427 973.587,686.427 974.147,686.427 974.706,686.427 975.265,686.427 975.824,686.427 976.384,686.427 976.943,686.427 977.502,686.427 978.061,686.427 978.621,686.427 979.18,686.427 979.739,686.427 980.298,686.427 980.858,686.427 981.417,686.427 981.976,686.427 982.535,686.427 983.095,686.427 983.654,686.427 984.213,686.427 984.772,686.427 985.332,686.427 985.891,686.427 986.45,686.427 987.009,686.427 987.569,686.427 988.128,686.427 988.687,686.427 989.246,686.427 989.806,686.427 990.365,686.427 990.924,686.427 991.483,686.427 992.043,686.427 992.602,686.427 993.161,686.427 993.72,686.427 994.28,686.427 994.839,686.427 995.398,686.427 995.957,686.427 996.517,686.427 997.076,686.427 997.635,686.427 998.194,686.427 998.754,686.427 999.313,686.427 999.872,686.427 1000.43,686.427 1000.99,686.427 1001.55,686.427 1002.11,686.427 1002.67,686.427 1003.23,686.427 1003.79,686.427 1004.35,686.427 1004.91,686.427 1005.46,686.427 1006.02,686.427 1006.58,686.427 1007.14,686.427 1007.7,686.427 1008.26,686.427 1008.82,686.427 1009.38,686.427 1009.94,686.427 1010.5,686.427 1011.06,686.427 1011.62,686.427 1012.18,686.427 1012.73,686.427 1013.29,686.427 1013.85,686.427 1014.41,686.427 1014.97,686.427 1015.53,686.427 1016.09,686.427 1016.65,686.427 1017.21,686.427 1017.77,686.427 1018.33,686.427 1018.89,686.427 1019.45,686.427 1020.01,686.427 1020.56,686.427 1021.12,686.427 1021.68,686.427 1022.24,686.427 1022.8,686.427 1023.36,686.427 1023.92,686.427 1024.48,686.427 1025.04,686.427 1025.6,686.427 1026.16,686.427 1026.72,686.427 1027.28,686.427 1027.83,686.427 1028.39,686.427 1028.95,686.427 1029.51,686.427 1030.07,686.427 1030.63,686.427 1031.19,686.427 1031.75,686.427 1032.31,686.427 1032.87,686.427 1033.43,686.427 1033.99,686.427 1034.55,686.427 1035.1,686.427 1035.66,686.427 1036.22,686.427 1036.78,686.427 1037.34,686.427 1037.9,686.427 1038.46,686.427 1039.02,686.427 1039.58,686.427 1040.14,686.427 1040.7,686.427 1041.26,686.427 1041.82,686.427 1042.38,686.427 1042.93,686.427 1043.49,686.427 1044.05,686.427 1044.61,686.427 1045.17,686.427 1045.73,686.427 1046.29,686.427 1046.85,686.427 1047.41,686.427 1047.97,686.427 1048.53,686.427 1049.09,686.427 1049.65,686.427 1050.2,686.427 1050.76,686.427 1051.32,686.427 1051.88,686.427 1052.44,686.427 1053,686.427 1053.56,686.427 1054.12,686.427 1054.68,686.427 1055.24,686.427 1055.8,686.427 1056.36,686.427 1056.92,686.427 1057.48,686.427 1058.03,686.427 1058.59,686.427 1059.15,686.427 1059.71,686.427 1060.27,686.427 1060.83,686.427 1061.39,686.427 1061.95,686.427 1062.51,686.427 1063.07,686.427 1063.63,686.427 1064.19,686.427 1064.75,686.427 1065.3,686.427 1065.86,686.427 1066.42,686.427 1066.98,686.427 1067.54,686.427 1068.1,686.427 1068.66,686.427 1069.22,686.427 1069.78,686.427 1070.34,686.427 1070.9,686.427 1071.46,686.427 1072.02,686.427 1072.57,686.427 1073.13,686.427 1073.69,686.427 1074.25,686.427 1074.81,686.427 1075.37,686.427 1075.93,686.427 1076.49,686.427 1077.05,686.427 1077.61,686.427 1078.17,686.427 1078.73,686.427 1079.29,686.427 1079.85,686.427 1080.4,686.427 1080.96,686.427 1081.52,686.427 1082.08,686.427 1082.64,686.427 1083.2,686.427 1083.76,686.427 1084.32,686.427 1084.88,686.427 1085.44,686.427 1086,686.427 1086.56,686.427 1087.12,686.427 1087.67,686.427 1088.23,686.427 1088.79,686.427 1089.35,686.427 1089.91,686.427 1090.47,686.427 1091.03,686.427 1091.59,686.427 1092.15,686.427 1092.71,686.427 1093.27,686.427 1093.83,686.427 1094.39,686.427 1094.94,686.427 1095.5,686.427 1096.06,686.427 1096.62,686.427 1097.18,686.427 1097.74,686.427 1098.3,686.427 1098.86,686.427 1099.42,686.427 1099.98,686.427 1100.54,686.427 1101.1,686.427 1101.66,686.427 1102.22,686.427 1102.77,686.427 1103.33,686.427 1103.89,686.427 1104.45,686.427 1105.01,686.427 1105.57,686.427 1106.13,686.427 1106.69,686.427 1107.25,686.427 1107.81,686.427 1108.37,686.427 1108.93,686.427 1109.49,686.427 1110.04,686.427 1110.6,686.427 1111.16,686.427 1111.72,686.427 1112.28,686.427 1112.84,686.427 1113.4,686.427 1113.96,686.427 1114.52,686.427 1115.08,686.427 1115.64,686.427 1116.2,686.427 1116.76,686.427 1117.31,686.427 1117.87,686.427 1118.43,686.427 1118.99,686.427 1119.55,686.427 1120.11,686.427 1120.67,686.427 1121.23,686.427 1121.79,686.427 1122.35,686.427 1122.91,686.427 1123.47,686.427 1124.03,686.427 1124.59,686.427 1125.14,686.427 1125.7,686.427 1126.26,686.427 1126.82,686.427 1127.38,686.427 1127.94,686.427 1128.5,686.427 1129.06,686.427 1129.62,686.427 1130.18,686.427 1130.74,686.427 1131.3,686.427 1131.86,686.427 1132.41,686.427 1132.97,686.427 1133.53,686.427 1134.09,686.427 1134.65,686.427 1135.21,686.427 1135.77,686.427 1136.33,686.427 1136.89,686.427 1137.45,686.427 1138.01,686.427 1138.57,686.427 1139.13,686.427 1139.68,686.427 1140.24,686.427 1140.8,686.427 1141.36,686.427 1141.92,686.427 1142.48,686.427 1143.04,686.427 1143.6,686.427 1144.16,686.427 1144.72,686.427 1145.28,686.427 1145.84,686.427 1146.4,686.427 1146.96,686.427 1147.51,686.427 1148.07,686.427 1148.63,686.427 1149.19,686.427 1149.75,686.427 1150.31,686.427 1150.87,686.427 1151.43,686.427 1151.99,686.427 1152.55,686.427 1153.11,686.427 1153.67,686.427 1154.23,686.427 1154.78,686.427 1155.34,686.427 1155.9,686.427 1156.46,686.427 1157.02,686.427 1157.58,686.427 1158.14,686.427 1158.7,686.427 1159.26,686.427 1159.82,686.427 1160.38,686.427 1160.94,686.427 1161.5,686.427 1162.05,686.427 1162.61,686.427 1163.17,686.427 1163.73,686.427 1164.29,686.427 1164.85,686.427 1165.41,686.427 1165.97,686.427 1166.53,686.427 1167.09,686.427 1167.65,686.427 1168.21,686.427 1168.77,686.427 1169.33,686.427 1169.88,686.427 1170.44,686.427 1171,686.427 1171.56,686.427 1172.12,686.427 1172.68,686.427 1173.24,686.427 1173.8,686.427 1174.36,686.427 1174.92,686.427 1175.48,686.427 1176.04,686.427 1176.6,686.427 1177.15,686.427 1177.71,686.427 1178.27,686.427 1178.83,686.427 1179.39,686.427 1179.95,686.427 1180.51,686.427 1181.07,686.427 1181.63,686.427 1182.19,686.427 1182.75,686.427 1183.31,686.427 1183.87,686.427 1184.43,686.427 1184.98,686.427 1185.54,686.427 1186.1,686.427 1186.66,686.427 1187.22,686.427 1187.78,686.427 1188.34,686.427 1188.9,686.427 1189.46,686.427 1190.02,686.427 1190.58,686.427 1191.14,686.427 1191.7,686.427 1192.25,686.427 1192.81,686.427 1193.37,686.427 1193.93,686.427 1194.49,686.427 1195.05,686.427 1195.61,686.427 1196.17,686.427 1196.73,686.427 1197.29,686.427 1197.85,686.427 1198.41,686.427 1198.97,686.427 1199.52,686.427 1200.08,686.427 1200.64,686.427 1201.2,686.427 1201.76,686.427 1202.32,686.427 1202.88,686.427 1203.44,686.427 1204,686.427 1204.56,686.427 1205.12,686.427 1205.68,686.427 1206.24,686.427 1206.8,686.427 1207.35,686.427 1207.91,686.427 1208.47,686.427 1209.03,686.427 1209.59,686.427 1210.15,686.427 1210.71,686.427 1211.27,686.427 1211.83,686.427 1212.39,686.427 1212.95,686.427 1213.51,686.427 1214.07,686.427 1214.62,686.427 1215.18,686.427 1215.74,686.427 1216.3,686.427 1216.86,686.427 1217.42,686.427 1217.98,686.427 1218.54,686.427 1219.1,686.427 1219.66,686.427 1220.22,686.427 1220.78,686.427 1221.34,686.427 1221.89,686.427 1222.45,686.427 1223.01,686.427 1223.57,686.427 1224.13,686.427 1224.69,686.427 1225.25,686.427 1225.81,686.427 1226.37,686.427 1226.93,686.427 1227.49,686.427 1228.05,686.427 1228.61,686.427 1229.17,686.427 1229.72,686.427 1230.28,686.427 1230.84,686.427 1231.4,686.427 1231.96,686.427 1232.52,686.427 1233.08,686.427 1233.64,686.427 1234.2,686.427 1234.76,686.427 1235.32,686.427 1235.88,686.427 1236.44,686.427 1236.99,686.427 1237.55,686.427 1238.11,686.427 1238.67,686.427 1239.23,686.427 1239.79,686.427 1240.35,686.427 1240.91,686.427 1241.47,686.427 1242.03,686.427 1242.59,686.427 1243.15,686.427 1243.71,686.427 1244.26,686.427 1244.82,686.427 1245.38,686.427 1245.94,686.427 1246.5,686.427 1247.06,686.427 1247.62,686.427 1248.18,686.427 1248.74,686.427 1249.3,686.427 1249.86,686.427 1250.42,686.427 1250.98,686.427 1251.54,686.427 1252.09,686.427 1252.65,686.427 1253.21,686.427 1253.77,686.427 1254.33,686.427 1254.89,686.427 1255.45,686.427 1256.01,686.427 1256.57,686.427 1257.13,686.427 1257.69,686.427 1258.25,686.427 1258.81,686.427 1259.36,686.427 1259.92,686.427 1260.48,686.427 1261.04,686.427 1261.6,686.427 1262.16,686.427 1262.72,686.427 1263.28,686.427 1263.84,686.427 1264.4,686.427 1264.96,686.427 1265.52,686.427 1266.08,686.427 1266.63,686.427 1267.19,686.427 1267.75,686.427 1268.31,686.427 1268.87,686.427 1269.43,686.427 1269.99,686.427 1270.55,686.427 1271.11,686.427 1271.67,686.427 1272.23,686.427 1272.79,686.427 1273.35,686.427 1273.91,686.427 1274.46,686.427 1275.02,686.427 1275.58,686.427 1276.14,686.427 1276.7,686.427 1277.26,686.427 1277.82,686.427 1278.38,686.427 1278.94,686.427 1279.5,686.427 1280.06,686.427 1280.62,686.427 1281.18,686.427 1281.73,686.427 1282.29,686.427 1282.85,686.427 1283.41,686.427 1283.97,686.427 1284.53,686.427 1285.09,686.427 1285.65,686.427 1286.21,686.427 1286.77,686.427 1287.33,686.427 1287.89,686.427 1288.45,686.427 1289,686.427 1289.56,686.427 1290.12,686.427 1290.68,686.427 1291.24,686.427 1291.8,686.427 1292.36,686.427 1292.92,686.427 1293.48,686.427 1294.04,686.427 1294.6,686.427 1295.16,686.427 1295.72,686.427 1296.28,686.427 1296.83,686.427 1297.39,686.427 1297.95,686.427 1298.51,686.427 1299.07,686.427 1299.63,686.427 1300.19,686.427 1300.75,686.427 1301.31,686.427 1301.87,686.427 1302.43,686.427 1302.99,686.427 1303.55,686.427 1304.1,686.427 1304.66,686.427 1305.22,686.427 1305.78,686.427 1306.34,686.427 1306.9,686.427 1307.46,686.427 1308.02,686.427 1308.58,686.427 1309.14,686.427 1309.7,686.427 1310.26,686.427 1310.82,686.427 1311.38,686.427 1311.93,686.427 1312.49,686.427 1313.05,686.427 1313.61,686.427 1314.17,686.427 1314.73,686.427 1315.29,686.427 1315.85,686.427 1316.41,686.427 1316.97,686.427 1317.53,686.427 1318.09,686.427 1318.65,686.427 1319.2,686.427 1319.76,686.427 1320.32,686.427 1320.88,686.427 1321.44,686.427 1322,686.427 1322.56,686.427 1323.12,686.427 1323.68,686.427 1324.24,686.427 1324.8,686.427 1325.36,686.427 1325.92,686.427 1326.47,686.427 1327.03,686.427 1327.59,686.427 1328.15,686.427 1328.71,686.427 1329.27,686.427 1329.83,686.427 1330.39,686.427 1330.95,686.427 1331.51,686.427 1332.07,686.427 1332.63,686.427 1333.19,686.427 1333.75,686.427 1334.3,686.427 1334.86,686.427 1335.42,686.427 1335.98,686.427 1336.54,686.427 1337.1,686.427 1337.66,686.427 1338.22,686.427 1338.78,686.427 1339.34,686.427 1339.9,686.427 1340.46,686.427 1341.02,686.427 1341.57,686.427 1342.13,686.427 1342.69,686.427 1343.25,686.427 1343.81,686.427 1344.37,686.427 1344.93,686.427 1345.49,686.427 1346.05,686.427 1346.61,686.427 1347.17,686.427 1347.73,686.427 1348.29,686.427 1348.84,686.427 1349.4,686.427 1349.96,686.427 1350.52,686.427 1351.08,686.427 1351.64,686.427 1352.2,686.427 1352.76,686.427 1353.32,686.427 1353.88,686.427 1354.44,686.427 1355,686.427 1355.56,686.427 1356.12,686.427 1356.67,686.427 1357.23,686.427 1357.79,686.427 1358.35,686.427 1358.91,686.427 1359.47,686.427 1360.03,686.427 1360.59,686.427 1361.15,686.427 1361.71,686.427 1362.27,686.427 1362.83,686.427 1363.39,686.427 1363.94,686.427 1364.5,686.427 1365.06,686.427 1365.62,686.427 1366.18,686.427 1366.74,686.427 1367.3,686.427 1367.86,686.427 1368.42,686.427 1368.98,686.427 1369.54,686.427 1370.1,686.427 1370.66,686.427 1371.21,686.427 1371.77,686.427 1372.33,686.427 1372.89,686.427 1373.45,686.427 1374.01,686.427 1374.57,686.427 1375.13,686.427 1375.69,686.427 1376.25,686.427 1376.81,686.427 1377.37,686.427 1377.93,686.427 1378.49,686.427 1379.04,686.427 1379.6,686.427 1380.16,686.427 1380.72,686.427 1381.28,686.427 1381.84,686.427 1382.4,686.427 1382.96,686.427 1383.52,686.427 1384.08,686.427 1384.64,686.427 1385.2,686.427 1385.76,686.427 1386.31,686.427 1386.87,686.427 1387.43,686.427 1387.99,686.427 1388.55,686.427 1389.11,686.427 1389.67,686.427 1390.23,686.427 1390.79,686.427 1391.35,686.427 1391.91,686.427 1392.47,686.427 1393.03,686.427 1393.58,686.427 1394.14,686.427 1394.7,686.427 1395.26,686.427 1395.82,686.427 1396.38,686.427 1396.94,686.427 1397.5,686.427 1398.06,686.427 1398.62,686.427 1399.18,686.427 1399.74,686.427 1400.3,686.427 1400.86,686.427 1401.41,686.427 1401.97,686.427 1402.53,686.427 1403.09,686.427 1403.65,686.427 1404.21,686.427 1404.77,686.427 1405.33,686.427 1405.89,686.427 1406.45,686.427 1407.01,686.427 1407.57,686.427 1408.13,686.427 1408.68,686.427 1409.24,686.427 1409.8,686.427 1410.36,686.427 1410.92,686.427 1411.48,686.427 1412.04,686.427 1412.6,686.427 1413.16,686.427 1413.72,686.427 1414.28,686.427 1414.84,686.427 1415.4,686.427 1415.95,686.427 1416.51,686.427 1417.07,686.427 1417.63,686.427 1418.19,686.427 1418.75,686.427 1419.31,686.427 1419.87,686.427 1420.43,686.427 1420.99,686.427 1421.55,686.427 1422.11,686.427 1422.67,686.427 1423.23,686.427 1423.78,686.427 1424.34,686.427 1424.9,686.427 1425.46,686.427 1426.02,686.427 1426.58,686.427 1427.14,686.427 1427.7,686.427 1428.26,686.427 1428.82,686.427 1429.38,686.427 1429.94,686.427 1430.5,686.427 1431.05,686.427 1431.61,686.427 1432.17,686.427 1432.73,686.427 1433.29,686.427 1433.85,686.427 1434.41,686.427 1434.97,686.427 1435.53,686.427 1436.09,686.427 1436.65,686.427 1437.21,686.427 1437.77,686.427 1438.33,686.427 1438.88,686.427 1439.44,686.427 1440,686.427 1440.56,686.427 1441.12,686.427 1441.68,686.427 1442.24,686.427 1442.8,686.427 1443.36,686.427 1443.92,686.427 1444.48,686.427 1445.04,686.427 1445.6,686.427 1446.15,686.427 1446.71,686.427 1447.27,686.427 1447.83,686.427 1448.39,686.427 1448.95,686.427 1449.51,686.427 1450.07,686.427 1450.63,686.427 1451.19,686.427 1451.75,686.427 1452.31,686.427 1452.87,686.427 1453.42,686.427 1453.98,686.427 1454.54,686.427 1455.1,686.427 1455.66,686.427 1456.22,686.427 1456.78,686.427 1457.34,686.427 1457.9,686.427 1458.46,686.427 1459.02,686.427 1459.58,686.427 1460.14,686.427 1460.7,686.427 1461.25,686.427 1461.81,686.427 1462.37,686.427 1462.93,686.427 1463.49,686.427 1464.05,686.427 1464.61,686.427 1465.17,686.427 1465.73,686.427 1466.29,686.427 1466.85,686.427 1467.41,686.427 1467.97,686.427 1468.52,686.427 1469.08,686.427 1469.64,686.427 1470.2,686.427 1470.76,686.427 1471.32,686.427 1471.88,686.427 1472.44,686.427 1473,686.427 1473.56,686.427 1474.12,686.427 1474.68,686.427 1475.24,686.427 1475.79,686.427 1476.35,686.427 1476.91,686.427 1477.47,686.427 1478.03,686.427 1478.59,686.427 1479.15,686.427 1479.71,686.427 1480.27,686.427 1480.83,686.427 1481.39,686.427 1481.95,686.427 1482.51,686.427 1483.07,686.427 1483.62,686.427 1484.18,686.427 1484.74,686.427 1485.3,686.427 1485.86,686.427 1486.42,686.427 1486.98,686.427 1487.54,686.427 1488.1,686.427 1488.66,686.427 1489.22,686.427 1489.78,686.427 1490.34,686.427 1490.89,686.427 1491.45,686.427 1492.01,686.427 1492.57,686.427 1493.13,686.427 1493.69,686.427 1494.25,686.427 1494.81,686.427 1495.37,686.427 1495.93,686.427 1496.49,686.427 1497.05,686.427 1497.61,686.427 1498.16,686.427 1498.72,686.427 1499.28,686.427 1499.84,686.427 1500.4,686.427 1500.96,686.427 1501.52,686.427 1502.08,686.427 1502.64,686.427 1503.2,686.427 1503.76,686.427 1504.32,686.427 1504.88,686.427 1505.44,686.427 1505.99,686.427 1506.55,686.427 1507.11,686.427 1507.67,686.427 1508.23,686.427 1508.79,686.427 1509.35,686.427 1509.91,686.427 1510.47,686.427 1511.03,686.427 1511.59,686.427 1512.15,686.427 1512.71,686.427 1513.26,686.427 1513.82,686.427 1514.38,686.427 1514.94,686.427 1515.5,686.427 1516.06,686.427 1516.62,686.427 1517.18,686.427 1517.74,686.427 1518.3,686.427 1518.86,686.427 1519.42,686.427 1519.98,686.427 1520.53,686.427 1521.09,686.427 1521.65,686.427 1522.21,686.427 1522.77,686.427 1523.33,686.427 1523.89,686.427 1524.45,686.427 1525.01,686.427 1525.57,686.427 1526.13,686.427 1526.69,686.427 1527.25,686.427 1527.81,686.427 1528.36,686.427 1528.92,686.427 1529.48,686.427 1530.04,686.427 1530.6,686.427 1531.16,686.427 1531.72,686.427 1532.28,686.427 1532.84,686.427 1533.4,686.427 1533.96,686.427 1534.52,686.427 1535.08,686.427 1535.63,686.427 1536.19,686.427 1536.75,686.427 1537.31,686.427 1537.87,686.427 1538.43,686.427 1538.99,686.427 1539.55,686.427 1540.11,686.427 1540.67,686.427 1541.23,686.427 1541.79,686.427 1542.35,686.427 1542.9,686.427 1543.46,686.427 1544.02,686.427 1544.58,686.427 1545.14,686.427 1545.7,686.427 1546.26,686.427 1546.82,686.427 1547.38,686.427 1547.94,686.427 1548.5,686.427 1549.06,686.427 1549.62,686.427 1550.18,686.427 1550.73,686.427 1551.29,686.427 1551.85,686.427 1552.41,686.427 1552.97,686.427 1553.53,686.427 1554.09,686.427 1554.65,686.427 1555.21,686.427 1555.77,686.427 1556.33,686.427 1556.89,686.427 1557.45,686.427 1558,686.427 1558.56,686.427 1559.12,686.427 1559.68,686.427 1560.24,686.427 1560.8,686.427 1561.36,686.427 1561.92,686.427 1562.48,686.427 1563.04,686.427 1563.6,686.427 1564.16,686.427 1564.72,686.427 1565.28,686.427 1565.83,686.427 1566.39,686.427 1566.95,686.427 1567.51,686.427 1568.07,686.427 1568.63,686.427 1569.19,686.427 1569.75,686.427 1570.31,686.427 1570.87,686.427 1571.43,686.427 1571.99,686.427 1572.55,686.427 1573.1,686.427 1573.66,686.427 1574.22,686.427 1574.78,686.427 1575.34,686.427 1575.9,686.427 1576.46,686.427 1577.02,686.427 1577.58,686.427 1578.14,686.427 1578.7,686.427 1579.26,686.427 1579.82,686.427 1580.37,686.427 1580.93,686.427 1581.49,686.427 1582.05,686.427 1582.61,686.427 1583.17,686.427 1583.73,686.427 1584.29,686.427 1584.85,686.427 1585.41,686.427 1585.97,686.427 1586.53,686.427 1587.09,686.427 1587.65,686.427 1588.2,686.427 1588.76,686.427 1589.32,686.427 1589.88,686.427 1590.44,686.427 1591,686.427 1591.56,686.427 1592.12,686.427 1592.68,686.427 1593.24,686.427 1593.8,686.427 1594.36,686.427 1594.92,686.427 1595.47,686.427 1596.03,686.427 1596.59,686.427 1597.15,686.427 1597.71,686.427 1598.27,686.427 1598.83,686.427 1599.39,686.427 1599.95,686.427 1600.51,686.427 1601.07,686.427 1601.63,686.427 1602.19,686.427 1602.74,686.427 1603.3,686.427 1603.86,686.427 1604.42,686.427 1604.98,686.427 1605.54,686.427 1606.1,686.427 1606.66,686.427 1607.22,686.427 1607.78,686.427 1608.34,686.427 1608.9,686.427 1609.46,686.427 1610.02,686.427 1610.57,686.427 1611.13,686.427 1611.69,686.427 1612.25,686.427 1612.81,686.427 1613.37,686.427 1613.93,686.427 1614.49,686.427 1615.05,686.427 1615.61,686.427 1616.17,686.427 1616.73,686.427 1617.29,686.427 1617.84,686.427 1618.4,686.427 1618.96,686.427 1619.52,686.427 1620.08,686.427 1620.64,686.427 1621.2,686.427 1621.76,686.427 1622.32,686.427 1622.88,686.427 1623.44,686.427 1624,686.427 1624.56,686.427 1625.11,686.427 1625.67,686.427 1626.23,686.427 1626.79,686.427 1627.35,686.427 1627.91,686.427 1628.47,686.427 1629.03,686.427 1629.59,686.427 1630.15,686.427 1630.71,686.427 1631.27,686.427 1631.83,686.427 1632.39,686.427 1632.94,686.427 1633.5,686.427 1634.06,686.427 1634.62,686.427 1635.18,686.427 1635.74,686.427 1636.3,686.427 1636.86,686.427 1637.42,686.427 1637.98,686.427 1638.54,686.427 1639.1,686.427 1639.66,686.427 1640.21,686.427 1640.77,686.427 1641.33,686.427 1641.89,686.427 1642.45,686.427 1643.01,686.427 1643.57,686.427 1644.13,686.427 1644.69,686.427 1645.25,686.427 1645.81,686.427 1646.37,686.427 1646.93,686.427 1647.48,686.427 1648.04,686.427 1648.6,686.427 1649.16,686.427 1649.72,686.427 1650.28,686.427 1650.84,686.427 1651.4,686.427 1651.96,686.427 1652.52,686.427 1653.08,686.427 1653.64,686.427 1654.2,686.427 1654.76,686.427 1655.31,686.427 1655.87,686.427 1656.43,686.427 1656.99,686.427 1657.55,686.427 1658.11,686.427 1658.67,686.427 1659.23,686.427 1659.79,686.427 1660.35,686.427 1660.91,686.427 1661.47,686.427 1662.03,686.427 1662.58,686.427 1663.14,686.427 1663.7,686.427 1664.26,686.427 1664.82,686.427 1665.38,686.427 1665.94,686.427 1666.5,686.427 1667.06,686.427 1667.62,686.427 1668.18,686.427 1668.74,686.427 1669.3,686.427 1669.85,686.427 1670.41,686.427 1670.97,686.427 1671.53,686.427 1672.09,686.427 1672.65,686.427 1673.21,686.427 1673.77,686.427 1674.33,686.427 1674.89,686.427 1675.45,686.427 1676.01,686.427 1676.57,686.427 1677.13,686.427 1677.68,686.427 1678.24,686.427 1678.8,686.427 1679.36,686.427 1679.92,686.427 1680.48,686.427 1681.04,686.427 1681.6,686.427 1682.16,686.427 1682.72,686.427 1683.28,686.427 1683.84,686.427 1684.4,686.427 1684.95,686.427 1685.51,686.427 1686.07,686.427 1686.63,686.427 1687.19,686.427 1687.75,686.427 1688.31,686.427 1688.87,686.427 1689.43,686.427 1689.99,686.427 1690.55,686.427 1691.11,686.427 1691.67,686.427 1692.23,686.427 1692.78,686.427 1693.34,686.427 1693.9,686.427 1694.46,686.427 1695.02,686.427 1695.58,686.427 1696.14,686.427 1696.7,686.427 1697.26,686.427 1697.82,686.427 1698.38,686.427 1698.94,686.427 1699.5,686.427 1700.05,686.427 1700.61,686.427 1701.17,686.427 1701.73,686.427 1702.29,686.427 1702.85,686.427 1703.41,686.427 1703.97,686.427 1704.53,686.427 1705.09,686.427 1705.65,686.427 1706.21,686.427 1706.77,686.427 1707.32,686.427 1707.88,686.427 1708.44,686.427 1709,686.427 1709.56,686.427 1710.12,686.427 1710.68,686.427 1711.24,686.427 1711.8,686.427 1712.36,686.427 1712.92,686.427 1713.48,686.427 1714.04,686.427 1714.6,686.427 1715.15,686.427 1715.71,686.427 1716.27,686.427 1716.83,686.427 1717.39,686.427 1717.95,686.427 1718.51,686.427 1719.07,686.427 1719.63,686.427 1720.19,686.427 1720.75,686.427 1721.31,686.427 1721.87,686.427 1722.42,686.427 1722.98,686.427 1723.54,686.427 1724.1,686.427 1724.66,686.427 1725.22,686.427 1725.78,686.427 1726.34,686.427 1726.9,686.427 1727.46,686.427 1728.02,686.427 1728.58,686.427 1729.14,686.427 1729.69,686.427 1730.25,686.427 1730.81,686.427 1731.37,686.427 1731.93,686.427 1732.49,686.427 1733.05,686.427 1733.61,686.427 1734.17,686.427 1734.73,686.427 1735.29,686.427 1735.85,686.427 1736.41,686.427 1736.97,686.427 1737.52,686.427 1738.08,686.427 1738.64,686.427 1739.2,686.427 1739.76,686.427 1740.32,686.427 1740.88,686.427 1741.44,686.427 1742,686.427 1742.56,686.427 1743.12,686.427 1743.68,686.427 1744.24,686.427 1744.79,686.427 1745.35,686.427 1745.91,686.427 1746.47,686.427 1747.03,686.427 1747.59,686.427 1748.15,686.427 1748.71,686.427 1749.27,686.427 1749.83,686.427 1750.39,686.427 1750.95,686.427 1751.51,686.427 1752.06,686.427 1752.62,686.427 1753.18,686.427 1753.74,686.427 1754.3,686.427 1754.86,686.427 1755.42,686.427 1755.98,686.427 1756.54,686.427 1757.1,686.427 1757.66,686.427 1758.22,686.427 1758.78,686.427 1759.34,686.427 1759.89,686.427 1760.45,686.427 1761.01,686.427 1761.57,686.427 1762.13,686.427 1762.69,686.427 1763.25,686.427 1763.81,686.427 1764.37,686.427 1764.93,686.427 1765.49,686.427 1766.05,686.427 1766.61,686.427 1767.16,686.427 1767.72,686.427 1768.28,686.427 1768.84,686.427 1769.4,686.427 1769.96,686.427 1770.52,686.427 1771.08,686.427 1771.64,686.427 1772.2,686.427 1772.76,686.427 1773.32,686.427 1773.88,686.427 1774.43,686.427 1774.99,686.427 1775.55,686.427 1776.11,686.427 1776.67,686.427 1777.23,686.427 1777.79,686.427 1778.35,686.427 1778.91,686.427 1779.47,686.427 1780.03,686.427 1780.59,686.427 1781.15,686.427 1781.71,686.427 1782.26,686.427 1782.82,686.427 1783.38,686.427 1783.94,686.427 1784.5,686.427 1785.06,686.427 1785.62,686.427 1786.18,686.427 1786.74,686.427 1787.3,686.427 1787.86,686.427 1788.42,686.427 1788.98,686.427 1789.53,686.427 1790.09,686.427 1790.65,686.427 1791.21,686.427 1791.77,686.427 1792.33,686.427 1792.89,686.427 1793.45,686.427 1794.01,686.427 1794.57,686.427 1795.13,686.427 1795.69,686.427 1796.25,686.427 1796.8,686.427 1797.36,686.427 1797.92,686.427 1798.48,686.427 1799.04,686.427 1799.6,686.427 1800.16,686.427 1800.72,686.427 1801.28,686.427 1801.84,686.427 1802.4,686.427 1802.96,686.427 1803.52,686.427 1804.08,686.427 1804.63,686.427 1805.19,686.427 1805.75,686.427 1806.31,686.427 1806.87,686.427 1807.43,686.427 1807.99,686.427 1808.55,686.427 1809.11,686.427 1809.67,686.427 1810.23,686.427 1810.79,686.427 1811.35,686.427 1811.9,686.427 1812.46,686.427 1813.02,686.427 1813.58,686.427 1814.14,686.427 1814.7,686.427 1815.26,686.427 1815.82,686.427 1816.38,686.427 1816.94,686.427 1817.5,686.427 1818.06,686.427 1818.62,686.427 1819.18,686.427 1819.73,686.427 1820.29,686.427 1820.85,686.427 1821.41,686.427 1821.97,686.427 1822.53,686.427 1823.09,686.427 1823.65,686.427 1824.21,686.427 1824.77,686.427 1825.33,686.427 1825.89,686.427 1826.45,686.427 1827,686.427 1827.56,686.427 1828.12,686.427 1828.68,686.427 1829.24,686.427 1829.8,686.427 1830.36,686.427 1830.92,686.427 1831.48,686.427 1832.04,686.427 1832.6,686.427 1833.16,686.427 1833.72,686.427 1834.27,686.427 1834.83,686.427 1835.39,686.427 1835.95,686.427 1836.51,686.427 1837.07,686.427 1837.63,686.427 1838.19,686.427 \"/>\n<path clip-path=\"url(#clip243)\" d=\"M720.247 685.214 L720.806 685.214 L721.365 685.214 L721.924 685.214 L722.484 685.214 L723.043 685.214 L723.602 685.214 L724.161 685.214 L724.721 685.214 L725.28 685.214 L725.839 685.214 L726.398 685.214 L726.958 685.214 L727.517 685.214 L728.076 685.214 L728.635 685.214 L729.195 685.214 L729.754 685.214 L730.313 685.214 L730.872 685.214 L731.432 685.214 L731.991 685.214 L732.55 685.214 L733.109 685.214 L733.669 685.214 L734.228 685.214 L734.787 685.214 L735.346 685.214 L735.906 685.214 L736.465 685.214 L737.024 685.214 L737.583 685.214 L738.143 685.214 L738.702 685.214 L739.261 685.214 L739.82 685.214 L740.38 685.214 L740.939 685.214 L741.498 685.214 L742.057 685.214 L742.617 685.214 L743.176 685.214 L743.735 685.214 L744.294 685.214 L744.854 685.214 L745.413 685.214 L745.972 685.214 L746.531 685.214 L747.091 685.214 L747.65 685.214 L748.209 685.214 L748.768 685.214 L749.328 685.214 L749.887 685.214 L750.446 685.214 L751.005 685.214 L751.565 685.214 L752.124 685.214 L752.683 685.214 L753.242 685.214 L753.802 685.214 L754.361 685.214 L754.92 685.214 L755.479 685.214 L756.039 685.214 L756.598 685.214 L757.157 685.214 L757.716 685.214 L758.276 685.214 L758.835 685.214 L759.394 685.214 L759.953 685.214 L760.513 685.214 L761.072 685.214 L761.631 685.214 L762.19 685.214 L762.75 685.214 L763.309 685.214 L763.868 685.214 L764.427 685.214 L764.987 685.214 L765.546 685.214 L766.105 685.214 L766.664 685.214 L767.224 685.214 L767.783 685.214 L768.342 685.214 L768.901 685.214 L769.461 685.214 L770.02 685.214 L770.579 685.214 L771.138 685.214 L771.698 685.214 L772.257 685.214 L772.816 685.214 L773.375 685.214 L773.935 685.214 L774.494 685.214 L775.053 685.214 L775.612 685.214 L776.172 685.214 L776.731 685.214 L777.29 685.214 L777.849 685.214 L778.409 685.214 L778.968 685.214 L779.527 685.214 L780.086 685.214 L780.646 685.214 L781.205 685.214 L781.764 685.214 L782.323 685.214 L782.883 685.214 L783.442 685.214 L784.001 685.214 L784.56 685.214 L785.12 685.214 L785.679 685.214 L786.238 685.214 L786.797 685.214 L787.357 685.214 L787.916 685.214 L788.475 685.214 L789.034 685.214 L789.594 685.214 L790.153 685.214 L790.712 685.214 L791.271 685.214 L791.831 685.214 L792.39 685.214 L792.949 685.214 L793.508 685.214 L794.068 685.214 L794.627 685.214 L795.186 685.214 L795.745 685.214 L796.305 685.214 L796.864 685.214 L797.423 685.214 L797.982 685.214 L798.542 685.214 L799.101 685.214 L799.66 685.214 L800.219 685.214 L800.779 685.214 L801.338 685.214 L801.897 685.214 L802.456 685.214 L803.016 685.214 L803.575 685.214 L804.134 685.214 L804.693 685.214 L805.253 685.214 L805.812 685.214 L806.371 685.214 L806.931 685.214 L807.49 685.214 L808.049 685.214 L808.608 685.214 L809.168 685.214 L809.727 685.214 L810.286 685.214 L810.845 685.214 L811.405 685.214 L811.964 685.214 L812.523 685.214 L813.082 685.214 L813.642 685.214 L814.201 685.214 L814.76 685.214 L815.319 685.214 L815.879 685.214 L816.438 685.214 L816.997 685.214 L817.556 685.214 L818.116 685.214 L818.675 685.214 L819.234 685.214 L819.793 685.214 L820.353 685.214 L820.912 685.214 L821.471 685.214 L822.03 685.214 L822.59 685.214 L823.149 685.214 L823.708 685.214 L824.267 685.214 L824.827 685.214 L825.386 685.214 L825.945 685.214 L826.504 685.214 L827.064 685.214 L827.623 685.214 L828.182 685.214 L828.741 685.214 L829.301 685.214 L829.86 685.214 L830.419 685.214 L830.978 685.214 L831.538 685.214 L832.097 685.214 L832.656 685.214 L833.215 685.214 L833.775 685.214 L834.334 685.214 L834.893 685.214 L835.452 685.214 L836.012 685.214 L836.571 685.214 L837.13 685.214 L837.689 685.214 L838.249 685.214 L838.808 685.214 L839.367 685.214 L839.926 685.214 L840.486 685.214 L841.045 685.214 L841.604 685.214 L842.163 685.214 L842.723 685.214 L843.282 685.214 L843.841 685.214 L844.4 685.214 L844.96 685.214 L845.519 685.214 L846.078 685.214 L846.637 685.214 L847.197 685.214 L847.756 685.214 L848.315 685.214 L848.874 685.214 L849.434 685.214 L849.993 685.214 L850.552 685.214 L851.111 685.214 L851.671 685.214 L852.23 685.214 L852.789 685.214 L853.348 685.214 L853.908 685.214 L854.467 685.214 L855.026 685.214 L855.585 685.214 L856.145 685.214 L856.704 685.214 L857.263 685.214 L857.822 685.214 L858.382 685.214 L858.941 685.214 L859.5 685.214 L860.059 685.214 L860.619 685.214 L861.178 685.214 L861.737 685.214 L862.296 685.214 L862.856 685.214 L863.415 685.214 L863.974 685.214 L864.533 685.214 L865.093 685.214 L865.652 685.214 L866.211 685.214 L866.77 685.214 L867.33 685.214 L867.889 685.214 L868.448 685.214 L869.007 685.214 L869.567 685.214 L870.126 685.214 L870.685 685.214 L871.244 685.214 L871.804 685.214 L872.363 685.214 L872.922 685.214 L873.481 685.214 L874.041 685.214 L874.6 685.214 L875.159 685.214 L875.718 685.214 L876.278 685.214 L876.837 685.214 L877.396 685.214 L877.955 685.214 L878.515 685.214 L879.074 685.214 L879.633 685.214 L880.192 685.214 L880.752 685.214 L881.311 685.214 L881.87 685.214 L882.429 685.214 L882.989 685.214 L883.548 685.214 L884.107 685.214 L884.666 685.214 L885.226 685.214 L885.785 685.214 L886.344 685.214 L886.903 685.214 L887.463 685.214 L888.022 685.214 L888.581 685.214 L889.14 685.214 L889.7 685.214 L890.259 685.214 L890.818 685.214 L891.377 685.214 L891.937 685.214 L892.496 685.214 L893.055 685.214 L893.614 685.214 L894.174 685.214 L894.733 685.214 L895.292 685.214 L895.851 685.214 L896.411 685.214 L896.97 685.214 L897.529 685.214 L898.088 685.214 L898.648 685.214 L899.207 685.214 L899.766 685.214 L900.325 685.214 L900.885 685.214 L901.444 685.214 L902.003 685.214 L902.562 685.214 L903.122 685.214 L903.681 685.214 L904.24 685.214 L904.799 685.214 L905.359 685.214 L905.918 685.214 L906.477 685.214 L907.036 685.214 L907.596 685.214 L908.155 685.214 L908.714 685.214 L909.273 685.214 L909.833 685.214 L910.392 685.214 L910.951 685.214 L911.51 685.214 L912.07 685.214 L912.629 685.214 L913.188 685.214 L913.747 685.214 L914.307 685.214 L914.866 685.214 L915.425 685.214 L915.984 685.214 L916.544 685.214 L917.103 685.214 L917.662 685.214 L918.221 685.214 L918.781 685.214 L919.34 685.214 L919.899 685.214 L920.458 685.214 L921.018 685.214 L921.577 685.214 L922.136 685.214 L922.695 685.214 L923.255 685.214 L923.814 685.214 L924.373 685.214 L924.932 685.214 L925.492 685.214 L926.051 685.214 L926.61 685.214 L927.169 685.214 L927.729 685.214 L928.288 685.214 L928.847 685.214 L929.406 685.214 L929.966 685.214 L930.525 685.214 L931.084 685.214 L931.644 685.214 L932.203 685.214 L932.762 685.214 L933.321 685.214 L933.881 685.214 L934.44 685.214 L934.999 685.214 L935.558 685.214 L936.118 685.214 L936.677 685.214 L937.236 685.214 L937.795 685.214 L938.355 685.214 L938.914 685.214 L939.473 685.214 L940.032 685.214 L940.592 685.214 L941.151 685.214 L941.71 685.214 L942.269 685.214 L942.829 685.214 L943.388 685.214 L943.947 685.214 L944.506 685.214 L945.066 685.214 L945.625 685.214 L946.184 685.214 L946.743 685.214 L947.303 685.214 L947.862 685.214 L948.421 685.214 L948.98 685.214 L949.54 685.214 L950.099 685.214 L950.658 685.214 L951.217 685.214 L951.777 685.214 L952.336 685.214 L952.895 685.214 L953.454 685.214 L954.014 685.214 L954.573 685.214 L955.132 685.214 L955.691 685.214 L956.251 685.214 L956.81 685.214 L957.369 685.214 L957.928 685.214 L958.488 685.214 L959.047 685.214 L959.606 685.214 L960.165 685.214 L960.725 685.214 L961.284 685.214 L961.843 685.214 L962.402 685.214 L962.962 685.214 L963.521 685.214 L964.08 685.214 L964.639 685.214 L965.199 685.214 L965.758 685.214 L966.317 685.214 L966.876 685.214 L967.436 685.214 L967.995 685.214 L968.554 685.214 L969.113 685.214 L969.673 685.214 L970.232 685.214 L970.791 685.214 L971.35 685.214 L971.91 685.214 L972.469 685.214 L973.028 685.214 L973.587 685.214 L974.147 685.214 L974.706 685.214 L975.265 685.214 L975.824 685.214 L976.384 685.214 L976.943 685.214 L977.502 685.214 L978.061 685.214 L978.621 685.214 L979.18 685.214 L979.739 685.214 L980.298 685.214 L980.858 685.214 L981.417 685.214 L981.976 685.214 L982.535 685.214 L983.095 685.214 L983.654 685.214 L984.213 685.214 L984.772 685.214 L985.332 685.214 L985.891 685.214 L986.45 685.214 L987.009 685.214 L987.569 685.214 L988.128 685.214 L988.687 685.214 L989.246 685.214 L989.806 685.214 L990.365 685.214 L990.924 685.214 L991.483 685.214 L992.043 685.214 L992.602 685.214 L993.161 685.214 L993.72 685.214 L994.28 685.214 L994.839 685.214 L995.398 685.214 L995.957 685.214 L996.517 685.214 L997.076 685.214 L997.635 685.214 L998.194 685.214 L998.754 685.214 L999.313 685.214 L999.872 685.214 L1000.43 685.214 L1000.99 685.214 L1001.55 685.214 L1002.11 685.214 L1002.67 685.214 L1003.23 685.214 L1003.79 685.214 L1004.35 685.214 L1004.91 685.214 L1005.46 685.214 L1006.02 685.214 L1006.58 685.214 L1007.14 685.214 L1007.7 685.214 L1008.26 685.214 L1008.82 685.214 L1009.38 685.214 L1009.94 685.214 L1010.5 685.214 L1011.06 685.214 L1011.62 685.214 L1012.18 685.214 L1012.73 685.214 L1013.29 685.214 L1013.85 685.214 L1014.41 685.214 L1014.97 685.214 L1015.53 685.214 L1016.09 685.214 L1016.65 685.214 L1017.21 685.214 L1017.77 685.214 L1018.33 685.214 L1018.89 685.214 L1019.45 685.214 L1020.01 685.214 L1020.56 685.214 L1021.12 685.214 L1021.68 685.214 L1022.24 685.214 L1022.8 685.214 L1023.36 685.214 L1023.92 685.214 L1024.48 685.214 L1025.04 685.214 L1025.6 685.214 L1026.16 685.214 L1026.72 685.214 L1027.28 685.214 L1027.83 685.214 L1028.39 685.214 L1028.95 685.214 L1029.51 685.214 L1030.07 685.214 L1030.63 685.214 L1031.19 685.214 L1031.75 685.214 L1032.31 685.214 L1032.87 685.214 L1033.43 685.214 L1033.99 685.214 L1034.55 685.214 L1035.1 685.214 L1035.66 685.214 L1036.22 685.214 L1036.78 685.214 L1037.34 685.214 L1037.9 685.214 L1038.46 685.214 L1039.02 685.214 L1039.58 685.214 L1040.14 685.214 L1040.7 685.214 L1041.26 685.214 L1041.82 685.214 L1042.38 685.214 L1042.93 685.214 L1043.49 685.214 L1044.05 685.214 L1044.61 685.214 L1045.17 685.214 L1045.73 685.214 L1046.29 685.214 L1046.85 685.214 L1047.41 685.214 L1047.97 685.214 L1048.53 685.214 L1049.09 685.214 L1049.65 685.214 L1050.2 685.214 L1050.76 685.214 L1051.32 685.214 L1051.88 685.214 L1052.44 685.214 L1053 685.214 L1053.56 685.214 L1054.12 685.214 L1054.68 685.214 L1055.24 685.214 L1055.8 685.214 L1056.36 685.214 L1056.92 685.214 L1057.48 685.214 L1058.03 685.214 L1058.59 685.214 L1059.15 685.214 L1059.71 685.214 L1060.27 685.214 L1060.83 685.214 L1061.39 685.214 L1061.95 685.214 L1062.51 685.214 L1063.07 685.214 L1063.63 685.214 L1064.19 685.214 L1064.75 685.214 L1065.3 685.214 L1065.86 685.214 L1066.42 685.214 L1066.98 685.214 L1067.54 685.214 L1068.1 685.214 L1068.66 685.214 L1069.22 685.214 L1069.78 685.214 L1070.34 685.214 L1070.9 685.214 L1071.46 685.214 L1072.02 685.214 L1072.57 685.214 L1073.13 685.214 L1073.69 685.214 L1074.25 685.214 L1074.81 685.214 L1075.37 685.214 L1075.93 685.214 L1076.49 685.214 L1077.05 685.214 L1077.61 685.214 L1078.17 685.214 L1078.73 685.214 L1079.29 685.214 L1079.85 685.214 L1080.4 685.214 L1080.96 685.214 L1081.52 685.214 L1082.08 685.214 L1082.64 685.214 L1083.2 685.214 L1083.76 685.214 L1084.32 685.214 L1084.88 685.214 L1085.44 685.214 L1086 685.214 L1086.56 685.214 L1087.12 685.214 L1087.67 685.214 L1088.23 685.214 L1088.79 685.214 L1089.35 685.214 L1089.91 685.214 L1090.47 685.214 L1091.03 685.214 L1091.59 685.214 L1092.15 685.214 L1092.71 685.214 L1093.27 685.214 L1093.83 685.214 L1094.39 685.214 L1094.94 685.214 L1095.5 685.214 L1096.06 685.214 L1096.62 685.214 L1097.18 685.214 L1097.74 685.214 L1098.3 685.214 L1098.86 685.214 L1099.42 685.214 L1099.98 685.214 L1100.54 685.214 L1101.1 685.214 L1101.66 685.214 L1102.22 685.214 L1102.77 685.214 L1103.33 685.214 L1103.89 685.214 L1104.45 685.214 L1105.01 685.214 L1105.57 685.214 L1106.13 685.214 L1106.69 685.214 L1107.25 685.214 L1107.81 685.214 L1108.37 685.214 L1108.93 685.214 L1109.49 685.214 L1110.04 685.214 L1110.6 685.214 L1111.16 685.214 L1111.72 685.214 L1112.28 685.214 L1112.84 685.214 L1113.4 685.214 L1113.96 685.214 L1114.52 685.214 L1115.08 685.214 L1115.64 685.214 L1116.2 685.214 L1116.76 685.214 L1117.31 685.214 L1117.87 685.214 L1118.43 685.214 L1118.99 685.214 L1119.55 685.214 L1120.11 685.214 L1120.67 685.214 L1121.23 685.214 L1121.79 685.214 L1122.35 685.214 L1122.91 685.214 L1123.47 685.214 L1124.03 685.214 L1124.59 685.214 L1125.14 685.214 L1125.7 685.214 L1126.26 685.214 L1126.82 685.214 L1127.38 685.214 L1127.94 685.214 L1128.5 685.214 L1129.06 685.214 L1129.62 685.214 L1130.18 685.214 L1130.74 685.214 L1131.3 685.214 L1131.86 685.214 L1132.41 685.214 L1132.97 685.214 L1133.53 685.214 L1134.09 685.214 L1134.65 685.214 L1135.21 685.214 L1135.77 685.214 L1136.33 685.214 L1136.89 685.214 L1137.45 685.214 L1138.01 685.214 L1138.57 685.214 L1139.13 685.214 L1139.68 685.214 L1140.24 685.214 L1140.8 685.214 L1141.36 685.214 L1141.92 685.214 L1142.48 685.214 L1143.04 685.214 L1143.6 685.214 L1144.16 685.214 L1144.72 685.214 L1145.28 685.214 L1145.84 685.214 L1146.4 685.214 L1146.96 685.214 L1147.51 685.214 L1148.07 685.214 L1148.63 685.214 L1149.19 685.214 L1149.75 685.214 L1150.31 685.214 L1150.87 685.214 L1151.43 685.214 L1151.99 685.214 L1152.55 685.214 L1153.11 685.214 L1153.67 685.214 L1154.23 685.214 L1154.78 685.214 L1155.34 685.214 L1155.9 685.214 L1156.46 685.214 L1157.02 685.214 L1157.58 685.214 L1158.14 685.214 L1158.7 685.214 L1159.26 685.214 L1159.82 685.214 L1160.38 685.214 L1160.94 685.214 L1161.5 685.214 L1162.05 685.214 L1162.61 685.214 L1163.17 685.214 L1163.73 685.214 L1164.29 685.214 L1164.85 685.214 L1165.41 685.214 L1165.97 685.214 L1166.53 685.214 L1167.09 685.214 L1167.65 685.214 L1168.21 685.214 L1168.77 685.214 L1169.33 685.214 L1169.88 685.214 L1170.44 685.214 L1171 685.214 L1171.56 685.214 L1172.12 685.214 L1172.68 685.214 L1173.24 685.214 L1173.8 685.214 L1174.36 685.214 L1174.92 685.214 L1175.48 685.214 L1176.04 685.214 L1176.6 685.214 L1177.15 685.214 L1177.71 685.214 L1178.27 685.214 L1178.83 685.214 L1179.39 685.214 L1179.95 685.214 L1180.51 685.214 L1181.07 685.214 L1181.63 685.214 L1182.19 685.214 L1182.75 685.214 L1183.31 685.214 L1183.87 685.214 L1184.43 685.214 L1184.98 685.214 L1185.54 685.214 L1186.1 685.214 L1186.66 685.214 L1187.22 685.214 L1187.78 685.214 L1188.34 685.214 L1188.9 685.214 L1189.46 685.214 L1190.02 685.214 L1190.58 685.214 L1191.14 685.214 L1191.7 685.214 L1192.25 685.214 L1192.81 685.214 L1193.37 685.214 L1193.93 685.214 L1194.49 685.214 L1195.05 685.214 L1195.61 685.214 L1196.17 685.214 L1196.73 685.214 L1197.29 685.214 L1197.85 685.214 L1198.41 685.214 L1198.97 685.214 L1199.52 685.214 L1200.08 685.214 L1200.64 685.214 L1201.2 685.214 L1201.76 685.214 L1202.32 685.214 L1202.88 685.214 L1203.44 685.214 L1204 685.214 L1204.56 685.214 L1205.12 685.214 L1205.68 685.214 L1206.24 685.214 L1206.8 685.214 L1207.35 685.214 L1207.91 685.214 L1208.47 685.214 L1209.03 685.214 L1209.59 685.214 L1210.15 685.214 L1210.71 685.214 L1211.27 685.214 L1211.83 685.214 L1212.39 685.214 L1212.95 685.214 L1213.51 685.214 L1214.07 685.214 L1214.62 685.214 L1215.18 685.214 L1215.74 685.214 L1216.3 685.214 L1216.86 685.214 L1217.42 685.214 L1217.98 685.214 L1218.54 685.214 L1219.1 685.214 L1219.66 685.214 L1220.22 685.214 L1220.78 685.214 L1221.34 685.214 L1221.89 685.214 L1222.45 685.214 L1223.01 685.214 L1223.57 685.214 L1224.13 685.214 L1224.69 685.214 L1225.25 685.214 L1225.81 685.214 L1226.37 685.214 L1226.93 685.214 L1227.49 685.214 L1228.05 685.214 L1228.61 685.214 L1229.17 685.214 L1229.72 685.214 L1230.28 685.214 L1230.84 685.214 L1231.4 685.214 L1231.96 685.214 L1232.52 685.214 L1233.08 685.214 L1233.64 685.214 L1234.2 685.214 L1234.76 685.214 L1235.32 685.214 L1235.88 685.214 L1236.44 685.214 L1236.99 685.214 L1237.55 685.214 L1238.11 685.214 L1238.67 685.214 L1239.23 685.214 L1239.79 685.214 L1240.35 685.214 L1240.91 685.214 L1241.47 685.214 L1242.03 685.214 L1242.59 685.214 L1243.15 685.214 L1243.71 685.214 L1244.26 685.214 L1244.82 685.214 L1245.38 685.214 L1245.94 685.214 L1246.5 685.214 L1247.06 685.214 L1247.62 685.214 L1248.18 685.214 L1248.74 685.214 L1249.3 685.214 L1249.86 685.214 L1250.42 685.214 L1250.98 685.214 L1251.54 685.214 L1252.09 685.214 L1252.65 685.214 L1253.21 685.214 L1253.77 685.214 L1254.33 685.214 L1254.89 685.214 L1255.45 685.214 L1256.01 685.214 L1256.57 685.214 L1257.13 685.214 L1257.69 685.214 L1258.25 685.214 L1258.81 685.214 L1259.36 685.214 L1259.92 685.214 L1260.48 685.214 L1261.04 685.214 L1261.6 685.214 L1262.16 685.214 L1262.72 685.214 L1263.28 685.214 L1263.84 685.214 L1264.4 685.214 L1264.96 685.214 L1265.52 685.214 L1266.08 685.214 L1266.63 685.214 L1267.19 685.214 L1267.75 685.214 L1268.31 685.214 L1268.87 685.214 L1269.43 685.214 L1269.99 685.214 L1270.55 685.214 L1271.11 685.214 L1271.67 685.214 L1272.23 685.214 L1272.79 685.214 L1273.35 685.214 L1273.91 685.214 L1274.46 685.214 L1275.02 685.214 L1275.58 685.214 L1276.14 685.214 L1276.7 685.214 L1277.26 685.214 L1277.82 685.214 L1278.38 685.214 L1278.94 685.214 L1279.5 685.214 L1280.06 685.214 L1280.62 685.214 L1281.18 685.214 L1281.73 685.214 L1282.29 685.214 L1282.85 685.214 L1283.41 685.214 L1283.97 685.214 L1284.53 685.214 L1285.09 685.214 L1285.65 685.214 L1286.21 685.214 L1286.77 685.214 L1287.33 685.214 L1287.89 685.214 L1288.45 685.214 L1289 685.214 L1289.56 685.214 L1290.12 685.214 L1290.68 685.214 L1291.24 685.214 L1291.8 685.214 L1292.36 685.214 L1292.92 685.214 L1293.48 685.214 L1294.04 685.214 L1294.6 685.214 L1295.16 685.214 L1295.72 685.214 L1296.28 685.214 L1296.83 685.214 L1297.39 685.214 L1297.95 685.214 L1298.51 685.214 L1299.07 685.214 L1299.63 685.214 L1300.19 685.214 L1300.75 685.214 L1301.31 685.214 L1301.87 685.214 L1302.43 685.214 L1302.99 685.214 L1303.55 685.214 L1304.1 685.214 L1304.66 685.214 L1305.22 685.214 L1305.78 685.214 L1306.34 685.214 L1306.9 685.214 L1307.46 685.214 L1308.02 685.214 L1308.58 685.214 L1309.14 685.214 L1309.7 685.214 L1310.26 685.214 L1310.82 685.214 L1311.38 685.214 L1311.93 685.214 L1312.49 685.214 L1313.05 685.214 L1313.61 685.214 L1314.17 685.214 L1314.73 685.214 L1315.29 685.214 L1315.85 685.214 L1316.41 685.214 L1316.97 685.214 L1317.53 685.214 L1318.09 685.214 L1318.65 685.214 L1319.2 685.214 L1319.76 685.214 L1320.32 685.214 L1320.88 685.214 L1321.44 685.214 L1322 685.214 L1322.56 685.214 L1323.12 685.214 L1323.68 685.214 L1324.24 685.214 L1324.8 685.214 L1325.36 685.214 L1325.92 685.214 L1326.47 685.214 L1327.03 685.214 L1327.59 685.214 L1328.15 685.214 L1328.71 685.214 L1329.27 685.214 L1329.83 685.214 L1330.39 685.214 L1330.95 685.214 L1331.51 685.214 L1332.07 685.214 L1332.63 685.214 L1333.19 685.214 L1333.75 685.214 L1334.3 685.214 L1334.86 685.214 L1335.42 685.214 L1335.98 685.214 L1336.54 685.214 L1337.1 685.214 L1337.66 685.214 L1338.22 685.214 L1338.78 685.214 L1339.34 685.214 L1339.9 685.214 L1340.46 685.214 L1341.02 685.214 L1341.57 685.214 L1342.13 685.214 L1342.69 685.214 L1343.25 685.214 L1343.81 685.214 L1344.37 685.214 L1344.93 685.214 L1345.49 685.214 L1346.05 685.214 L1346.61 685.214 L1347.17 685.214 L1347.73 685.214 L1348.29 685.214 L1348.84 685.214 L1349.4 685.214 L1349.96 685.214 L1350.52 685.214 L1351.08 685.214 L1351.64 685.214 L1352.2 685.214 L1352.76 685.214 L1353.32 685.214 L1353.88 685.214 L1354.44 685.214 L1355 685.214 L1355.56 685.214 L1356.12 685.214 L1356.67 685.214 L1357.23 685.214 L1357.79 685.214 L1358.35 685.214 L1358.91 685.214 L1359.47 685.214 L1360.03 685.214 L1360.59 685.214 L1361.15 685.214 L1361.71 685.214 L1362.27 685.214 L1362.83 685.214 L1363.39 685.214 L1363.94 685.214 L1364.5 685.214 L1365.06 685.214 L1365.62 685.214 L1366.18 685.214 L1366.74 685.214 L1367.3 685.214 L1367.86 685.214 L1368.42 685.214 L1368.98 685.214 L1369.54 685.214 L1370.1 685.214 L1370.66 685.214 L1371.21 685.214 L1371.77 685.214 L1372.33 685.214 L1372.89 685.214 L1373.45 685.214 L1374.01 685.214 L1374.57 685.214 L1375.13 685.214 L1375.69 685.214 L1376.25 685.214 L1376.81 685.214 L1377.37 685.214 L1377.93 685.214 L1378.49 685.214 L1379.04 685.214 L1379.6 685.214 L1380.16 685.214 L1380.72 685.214 L1381.28 685.214 L1381.84 685.214 L1382.4 685.214 L1382.96 685.214 L1383.52 685.214 L1384.08 685.214 L1384.64 685.214 L1385.2 685.214 L1385.76 685.214 L1386.31 685.214 L1386.87 685.214 L1387.43 685.214 L1387.99 685.214 L1388.55 685.214 L1389.11 685.214 L1389.67 685.214 L1390.23 685.214 L1390.79 685.214 L1391.35 685.214 L1391.91 685.214 L1392.47 685.214 L1393.03 685.214 L1393.58 685.214 L1394.14 685.214 L1394.7 685.214 L1395.26 685.214 L1395.82 685.214 L1396.38 685.214 L1396.94 685.214 L1397.5 685.214 L1398.06 685.214 L1398.62 685.214 L1399.18 685.214 L1399.74 685.214 L1400.3 685.214 L1400.86 685.214 L1401.41 685.214 L1401.97 685.214 L1402.53 685.214 L1403.09 685.214 L1403.65 685.214 L1404.21 685.214 L1404.77 685.214 L1405.33 685.214 L1405.89 685.214 L1406.45 685.214 L1407.01 685.214 L1407.57 685.214 L1408.13 685.214 L1408.68 685.214 L1409.24 685.214 L1409.8 685.214 L1410.36 685.214 L1410.92 685.214 L1411.48 685.214 L1412.04 685.214 L1412.6 685.214 L1413.16 685.214 L1413.72 685.214 L1414.28 685.214 L1414.84 685.214 L1415.4 685.214 L1415.95 685.214 L1416.51 685.214 L1417.07 685.214 L1417.63 685.214 L1418.19 685.214 L1418.75 685.214 L1419.31 685.214 L1419.87 685.214 L1420.43 685.214 L1420.99 685.214 L1421.55 685.214 L1422.11 685.214 L1422.67 685.214 L1423.23 685.214 L1423.78 685.214 L1424.34 685.214 L1424.9 685.214 L1425.46 685.214 L1426.02 685.214 L1426.58 685.214 L1427.14 685.214 L1427.7 685.214 L1428.26 685.214 L1428.82 685.214 L1429.38 685.214 L1429.94 685.214 L1430.5 685.214 L1431.05 685.214 L1431.61 685.214 L1432.17 685.214 L1432.73 685.214 L1433.29 685.214 L1433.85 685.214 L1434.41 685.214 L1434.97 685.214 L1435.53 685.214 L1436.09 685.214 L1436.65 685.214 L1437.21 685.214 L1437.77 685.214 L1438.33 685.214 L1438.88 685.214 L1439.44 685.214 L1440 685.214 L1440.56 685.214 L1441.12 685.214 L1441.68 685.214 L1442.24 685.214 L1442.8 685.214 L1443.36 685.214 L1443.92 685.214 L1444.48 685.214 L1445.04 685.214 L1445.6 685.214 L1446.15 685.214 L1446.71 685.214 L1447.27 685.214 L1447.83 685.214 L1448.39 685.214 L1448.95 685.214 L1449.51 685.214 L1450.07 685.214 L1450.63 685.214 L1451.19 685.214 L1451.75 685.214 L1452.31 685.214 L1452.87 685.214 L1453.42 685.214 L1453.98 685.214 L1454.54 685.214 L1455.1 685.214 L1455.66 685.214 L1456.22 685.214 L1456.78 685.214 L1457.34 685.214 L1457.9 685.214 L1458.46 685.214 L1459.02 685.214 L1459.58 685.214 L1460.14 685.214 L1460.7 685.214 L1461.25 685.214 L1461.81 685.214 L1462.37 685.214 L1462.93 685.214 L1463.49 685.214 L1464.05 685.214 L1464.61 685.214 L1465.17 685.214 L1465.73 685.214 L1466.29 685.214 L1466.85 685.214 L1467.41 685.214 L1467.97 685.214 L1468.52 685.214 L1469.08 685.214 L1469.64 685.214 L1470.2 685.214 L1470.76 685.214 L1471.32 685.214 L1471.88 685.214 L1472.44 685.214 L1473 685.214 L1473.56 685.214 L1474.12 685.214 L1474.68 685.214 L1475.24 685.214 L1475.79 685.214 L1476.35 685.214 L1476.91 685.214 L1477.47 685.214 L1478.03 685.214 L1478.59 685.214 L1479.15 685.214 L1479.71 685.214 L1480.27 685.214 L1480.83 685.214 L1481.39 685.214 L1481.95 685.214 L1482.51 685.214 L1483.07 685.214 L1483.62 685.214 L1484.18 685.214 L1484.74 685.214 L1485.3 685.214 L1485.86 685.214 L1486.42 685.214 L1486.98 685.214 L1487.54 685.214 L1488.1 685.214 L1488.66 685.214 L1489.22 685.214 L1489.78 685.214 L1490.34 685.214 L1490.89 685.214 L1491.45 685.214 L1492.01 685.214 L1492.57 685.214 L1493.13 685.214 L1493.69 685.214 L1494.25 685.214 L1494.81 685.214 L1495.37 685.214 L1495.93 685.214 L1496.49 685.214 L1497.05 685.214 L1497.61 685.214 L1498.16 685.214 L1498.72 685.214 L1499.28 685.214 L1499.84 685.214 L1500.4 685.214 L1500.96 685.214 L1501.52 685.214 L1502.08 685.214 L1502.64 685.214 L1503.2 685.214 L1503.76 685.214 L1504.32 685.214 L1504.88 685.214 L1505.44 685.214 L1505.99 685.214 L1506.55 685.214 L1507.11 685.214 L1507.67 685.214 L1508.23 685.214 L1508.79 685.214 L1509.35 685.214 L1509.91 685.214 L1510.47 685.214 L1511.03 685.214 L1511.59 685.214 L1512.15 685.214 L1512.71 685.214 L1513.26 685.214 L1513.82 685.214 L1514.38 685.214 L1514.94 685.214 L1515.5 685.214 L1516.06 685.214 L1516.62 685.214 L1517.18 685.214 L1517.74 685.214 L1518.3 685.214 L1518.86 685.214 L1519.42 685.214 L1519.98 685.214 L1520.53 685.214 L1521.09 685.214 L1521.65 685.214 L1522.21 685.214 L1522.77 685.214 L1523.33 685.214 L1523.89 685.214 L1524.45 685.214 L1525.01 685.214 L1525.57 685.214 L1526.13 685.214 L1526.69 685.214 L1527.25 685.214 L1527.81 685.214 L1528.36 685.214 L1528.92 685.214 L1529.48 685.214 L1530.04 685.214 L1530.6 685.214 L1531.16 685.214 L1531.72 685.214 L1532.28 685.214 L1532.84 685.214 L1533.4 685.214 L1533.96 685.214 L1534.52 685.214 L1535.08 685.214 L1535.63 685.214 L1536.19 685.214 L1536.75 685.214 L1537.31 685.214 L1537.87 685.214 L1538.43 685.214 L1538.99 685.214 L1539.55 685.214 L1540.11 685.214 L1540.67 685.214 L1541.23 685.214 L1541.79 685.214 L1542.35 685.214 L1542.9 685.214 L1543.46 685.214 L1544.02 685.214 L1544.58 685.214 L1545.14 685.214 L1545.7 685.214 L1546.26 685.214 L1546.82 685.214 L1547.38 685.214 L1547.94 685.214 L1548.5 685.214 L1549.06 685.214 L1549.62 685.214 L1550.18 685.214 L1550.73 685.214 L1551.29 685.214 L1551.85 685.214 L1552.41 685.214 L1552.97 685.214 L1553.53 685.214 L1554.09 685.214 L1554.65 685.214 L1555.21 685.214 L1555.77 685.214 L1556.33 685.214 L1556.89 685.214 L1557.45 685.214 L1558 685.214 L1558.56 685.214 L1559.12 685.214 L1559.68 685.214 L1560.24 685.214 L1560.8 685.214 L1561.36 685.214 L1561.92 685.214 L1562.48 685.214 L1563.04 685.214 L1563.6 685.214 L1564.16 685.214 L1564.72 685.214 L1565.28 685.214 L1565.83 685.214 L1566.39 685.214 L1566.95 685.214 L1567.51 685.214 L1568.07 685.214 L1568.63 685.214 L1569.19 685.214 L1569.75 685.214 L1570.31 685.214 L1570.87 685.214 L1571.43 685.214 L1571.99 685.214 L1572.55 685.214 L1573.1 685.214 L1573.66 685.214 L1574.22 685.214 L1574.78 685.214 L1575.34 685.214 L1575.9 685.214 L1576.46 685.214 L1577.02 685.214 L1577.58 685.214 L1578.14 685.214 L1578.7 685.214 L1579.26 685.214 L1579.82 685.214 L1580.37 685.214 L1580.93 685.214 L1581.49 685.214 L1582.05 685.214 L1582.61 685.214 L1583.17 685.214 L1583.73 685.214 L1584.29 685.214 L1584.85 685.214 L1585.41 685.214 L1585.97 685.214 L1586.53 685.214 L1587.09 685.214 L1587.65 685.214 L1588.2 685.214 L1588.76 685.214 L1589.32 685.214 L1589.88 685.214 L1590.44 685.214 L1591 685.214 L1591.56 685.214 L1592.12 685.214 L1592.68 685.214 L1593.24 685.214 L1593.8 685.214 L1594.36 685.214 L1594.92 685.214 L1595.47 685.214 L1596.03 685.214 L1596.59 685.214 L1597.15 685.214 L1597.71 685.214 L1598.27 685.214 L1598.83 685.214 L1599.39 685.214 L1599.95 685.214 L1600.51 685.214 L1601.07 685.214 L1601.63 685.214 L1602.19 685.214 L1602.74 685.214 L1603.3 685.214 L1603.86 685.214 L1604.42 685.214 L1604.98 685.214 L1605.54 685.214 L1606.1 685.214 L1606.66 685.214 L1607.22 685.214 L1607.78 685.214 L1608.34 685.214 L1608.9 685.214 L1609.46 685.214 L1610.02 685.214 L1610.57 685.214 L1611.13 685.214 L1611.69 685.214 L1612.25 685.214 L1612.81 685.214 L1613.37 685.214 L1613.93 685.214 L1614.49 685.214 L1615.05 685.214 L1615.61 685.214 L1616.17 685.214 L1616.73 685.214 L1617.29 685.214 L1617.84 685.214 L1618.4 685.214 L1618.96 685.214 L1619.52 685.214 L1620.08 685.214 L1620.64 685.214 L1621.2 685.214 L1621.76 685.214 L1622.32 685.214 L1622.88 685.214 L1623.44 685.214 L1624 685.214 L1624.56 685.214 L1625.11 685.214 L1625.67 685.214 L1626.23 685.214 L1626.79 685.214 L1627.35 685.214 L1627.91 685.214 L1628.47 685.214 L1629.03 685.214 L1629.59 685.214 L1630.15 685.214 L1630.71 685.214 L1631.27 685.214 L1631.83 685.214 L1632.39 685.214 L1632.94 685.214 L1633.5 685.214 L1634.06 685.214 L1634.62 685.214 L1635.18 685.214 L1635.74 685.214 L1636.3 685.214 L1636.86 685.214 L1637.42 685.214 L1637.98 685.214 L1638.54 685.214 L1639.1 685.214 L1639.66 685.214 L1640.21 685.214 L1640.77 685.214 L1641.33 685.214 L1641.89 685.214 L1642.45 685.214 L1643.01 685.214 L1643.57 685.214 L1644.13 685.214 L1644.69 685.214 L1645.25 685.214 L1645.81 685.214 L1646.37 685.214 L1646.93 685.214 L1647.48 685.214 L1648.04 685.214 L1648.6 685.214 L1649.16 685.214 L1649.72 685.214 L1650.28 685.214 L1650.84 685.214 L1651.4 685.214 L1651.96 685.214 L1652.52 685.214 L1653.08 685.214 L1653.64 685.214 L1654.2 685.214 L1654.76 685.214 L1655.31 685.214 L1655.87 685.214 L1656.43 685.214 L1656.99 685.214 L1657.55 685.214 L1658.11 685.214 L1658.67 685.214 L1659.23 685.214 L1659.79 685.214 L1660.35 685.214 L1660.91 685.214 L1661.47 685.214 L1662.03 685.214 L1662.58 685.214 L1663.14 685.214 L1663.7 685.214 L1664.26 685.214 L1664.82 685.214 L1665.38 685.214 L1665.94 685.214 L1666.5 685.214 L1667.06 685.214 L1667.62 685.214 L1668.18 685.214 L1668.74 685.214 L1669.3 685.214 L1669.85 685.214 L1670.41 685.214 L1670.97 685.214 L1671.53 685.214 L1672.09 685.214 L1672.65 685.214 L1673.21 685.214 L1673.77 685.214 L1674.33 685.214 L1674.89 685.214 L1675.45 685.214 L1676.01 685.214 L1676.57 685.214 L1677.13 685.214 L1677.68 685.214 L1678.24 685.214 L1678.8 685.214 L1679.36 685.214 L1679.92 685.214 L1680.48 685.214 L1681.04 685.214 L1681.6 685.214 L1682.16 685.214 L1682.72 685.214 L1683.28 685.214 L1683.84 685.214 L1684.4 685.214 L1684.95 685.214 L1685.51 685.214 L1686.07 685.214 L1686.63 685.214 L1687.19 685.214 L1687.75 685.214 L1688.31 685.214 L1688.87 685.214 L1689.43 685.214 L1689.99 685.214 L1690.55 685.214 L1691.11 685.214 L1691.67 685.214 L1692.23 685.214 L1692.78 685.214 L1693.34 685.214 L1693.9 685.214 L1694.46 685.214 L1695.02 685.214 L1695.58 685.214 L1696.14 685.214 L1696.7 685.214 L1697.26 685.214 L1697.82 685.214 L1698.38 685.214 L1698.94 685.214 L1699.5 685.214 L1700.05 685.214 L1700.61 685.214 L1701.17 685.214 L1701.73 685.214 L1702.29 685.214 L1702.85 685.214 L1703.41 685.214 L1703.97 685.214 L1704.53 685.214 L1705.09 685.214 L1705.65 685.214 L1706.21 685.214 L1706.77 685.214 L1707.32 685.214 L1707.88 685.214 L1708.44 685.214 L1709 685.214 L1709.56 685.214 L1710.12 685.214 L1710.68 685.214 L1711.24 685.214 L1711.8 685.214 L1712.36 685.214 L1712.92 685.214 L1713.48 685.214 L1714.04 685.214 L1714.6 685.214 L1715.15 685.214 L1715.71 685.214 L1716.27 685.214 L1716.83 685.214 L1717.39 685.214 L1717.95 685.214 L1718.51 685.214 L1719.07 685.214 L1719.63 685.214 L1720.19 685.214 L1720.75 685.214 L1721.31 685.214 L1721.87 685.214 L1722.42 685.214 L1722.98 685.214 L1723.54 685.214 L1724.1 685.214 L1724.66 685.214 L1725.22 685.214 L1725.78 685.214 L1726.34 685.214 L1726.9 685.214 L1727.46 685.214 L1728.02 685.214 L1728.58 685.214 L1729.14 685.214 L1729.69 685.214 L1730.25 685.214 L1730.81 685.214 L1731.37 685.214 L1731.93 685.214 L1732.49 685.214 L1733.05 685.214 L1733.61 685.214 L1734.17 685.214 L1734.73 685.214 L1735.29 685.214 L1735.85 685.214 L1736.41 685.214 L1736.97 685.214 L1737.52 685.214 L1738.08 685.214 L1738.64 685.214 L1739.2 685.214 L1739.76 685.214 L1740.32 685.214 L1740.88 685.214 L1741.44 685.214 L1742 685.214 L1742.56 685.214 L1743.12 685.214 L1743.68 685.214 L1744.24 685.214 L1744.79 685.214 L1745.35 685.214 L1745.91 685.214 L1746.47 685.214 L1747.03 685.214 L1747.59 685.214 L1748.15 685.214 L1748.71 685.214 L1749.27 685.214 L1749.83 685.214 L1750.39 685.214 L1750.95 685.214 L1751.51 685.214 L1752.06 685.214 L1752.62 685.214 L1753.18 685.214 L1753.74 685.214 L1754.3 685.214 L1754.86 685.214 L1755.42 685.214 L1755.98 685.214 L1756.54 685.214 L1757.1 685.214 L1757.66 685.214 L1758.22 685.214 L1758.78 685.214 L1759.34 685.214 L1759.89 685.214 L1760.45 685.214 L1761.01 685.214 L1761.57 685.214 L1762.13 685.214 L1762.69 685.214 L1763.25 685.214 L1763.81 685.214 L1764.37 685.214 L1764.93 685.214 L1765.49 685.214 L1766.05 685.214 L1766.61 685.214 L1767.16 685.214 L1767.72 685.214 L1768.28 685.214 L1768.84 685.214 L1769.4 685.214 L1769.96 685.214 L1770.52 685.214 L1771.08 685.214 L1771.64 685.214 L1772.2 685.214 L1772.76 685.214 L1773.32 685.214 L1773.88 685.214 L1774.43 685.214 L1774.99 685.214 L1775.55 685.214 L1776.11 685.214 L1776.67 685.214 L1777.23 685.214 L1777.79 685.214 L1778.35 685.214 L1778.91 685.214 L1779.47 685.214 L1780.03 685.214 L1780.59 685.214 L1781.15 685.214 L1781.71 685.214 L1782.26 685.214 L1782.82 685.214 L1783.38 685.214 L1783.94 685.214 L1784.5 685.214 L1785.06 685.214 L1785.62 685.214 L1786.18 685.214 L1786.74 685.214 L1787.3 685.214 L1787.86 685.214 L1788.42 685.214 L1788.98 685.214 L1789.53 685.214 L1790.09 685.214 L1790.65 685.214 L1791.21 685.214 L1791.77 685.214 L1792.33 685.214 L1792.89 685.214 L1793.45 685.214 L1794.01 685.214 L1794.57 685.214 L1795.13 685.214 L1795.69 685.214 L1796.25 685.214 L1796.8 685.214 L1797.36 685.214 L1797.92 685.214 L1798.48 685.214 L1799.04 685.214 L1799.6 685.214 L1800.16 685.214 L1800.72 685.214 L1801.28 685.214 L1801.84 685.214 L1802.4 685.214 L1802.96 685.214 L1803.52 685.214 L1804.08 685.214 L1804.63 685.214 L1805.19 685.214 L1805.75 685.214 L1806.31 685.214 L1806.87 685.214 L1807.43 685.214 L1807.99 685.214 L1808.55 685.214 L1809.11 685.214 L1809.67 685.214 L1810.23 685.214 L1810.79 685.214 L1811.35 685.214 L1811.9 685.214 L1812.46 685.214 L1813.02 685.214 L1813.58 685.214 L1814.14 685.214 L1814.7 685.214 L1815.26 685.214 L1815.82 685.214 L1816.38 685.214 L1816.94 685.214 L1817.5 685.214 L1818.06 685.214 L1818.62 685.214 L1819.18 685.214 L1819.73 685.214 L1820.29 685.214 L1820.85 685.214 L1821.41 685.214 L1821.97 685.214 L1822.53 685.214 L1823.09 685.214 L1823.65 685.214 L1824.21 685.214 L1824.77 685.214 L1825.33 685.214 L1825.89 685.214 L1826.45 685.214 L1827 685.214 L1827.56 685.214 L1828.12 685.214 L1828.68 685.214 L1829.24 685.214 L1829.8 685.214 L1830.36 685.214 L1830.92 685.214 L1831.48 685.214 L1832.04 685.214 L1832.6 685.214 L1833.16 685.214 L1833.72 685.214 L1834.27 685.214 L1834.83 685.214 L1835.39 685.214 L1835.95 685.214 L1836.51 685.214 L1837.07 685.214 L1837.63 685.214 L1838.19 685.214 L1838.19 683.133 L1837.63 683.133 L1837.07 683.133 L1836.51 683.133 L1835.95 683.133 L1835.39 683.133 L1834.83 683.133 L1834.27 683.133 L1833.72 683.133 L1833.16 683.133 L1832.6 683.133 L1832.04 683.133 L1831.48 683.133 L1830.92 683.133 L1830.36 683.133 L1829.8 683.133 L1829.24 683.133 L1828.68 683.133 L1828.12 683.133 L1827.56 683.133 L1827 683.133 L1826.45 683.133 L1825.89 683.133 L1825.33 683.133 L1824.77 683.133 L1824.21 683.133 L1823.65 683.133 L1823.09 683.133 L1822.53 683.133 L1821.97 683.133 L1821.41 683.133 L1820.85 683.133 L1820.29 683.133 L1819.73 683.133 L1819.18 683.133 L1818.62 683.133 L1818.06 683.133 L1817.5 683.133 L1816.94 683.133 L1816.38 683.133 L1815.82 683.133 L1815.26 683.133 L1814.7 683.133 L1814.14 683.133 L1813.58 683.133 L1813.02 683.133 L1812.46 683.133 L1811.9 683.133 L1811.35 683.133 L1810.79 683.133 L1810.23 683.133 L1809.67 683.133 L1809.11 683.133 L1808.55 683.133 L1807.99 683.133 L1807.43 683.133 L1806.87 683.133 L1806.31 683.133 L1805.75 683.133 L1805.19 683.133 L1804.63 683.133 L1804.08 683.133 L1803.52 683.133 L1802.96 683.133 L1802.4 683.133 L1801.84 683.133 L1801.28 683.133 L1800.72 683.133 L1800.16 683.133 L1799.6 683.133 L1799.04 683.133 L1798.48 683.133 L1797.92 683.133 L1797.36 683.133 L1796.8 683.133 L1796.25 683.133 L1795.69 683.133 L1795.13 683.133 L1794.57 683.133 L1794.01 683.133 L1793.45 683.133 L1792.89 683.133 L1792.33 683.133 L1791.77 683.133 L1791.21 683.133 L1790.65 683.133 L1790.09 683.133 L1789.53 683.133 L1788.98 683.133 L1788.42 683.133 L1787.86 683.133 L1787.3 683.133 L1786.74 683.133 L1786.18 683.133 L1785.62 683.133 L1785.06 683.133 L1784.5 683.133 L1783.94 683.133 L1783.38 683.133 L1782.82 683.133 L1782.26 683.133 L1781.71 683.133 L1781.15 683.133 L1780.59 683.133 L1780.03 683.133 L1779.47 683.133 L1778.91 683.133 L1778.35 683.133 L1777.79 683.133 L1777.23 683.133 L1776.67 683.133 L1776.11 683.133 L1775.55 683.133 L1774.99 683.133 L1774.43 683.133 L1773.88 683.133 L1773.32 683.133 L1772.76 683.133 L1772.2 683.133 L1771.64 683.133 L1771.08 683.133 L1770.52 683.133 L1769.96 683.133 L1769.4 683.133 L1768.84 683.133 L1768.28 683.133 L1767.72 683.133 L1767.16 683.133 L1766.61 683.133 L1766.05 683.133 L1765.49 683.133 L1764.93 683.133 L1764.37 683.133 L1763.81 683.133 L1763.25 683.133 L1762.69 683.133 L1762.13 683.133 L1761.57 683.133 L1761.01 683.133 L1760.45 683.133 L1759.89 683.133 L1759.34 683.133 L1758.78 683.133 L1758.22 683.133 L1757.66 683.133 L1757.1 683.133 L1756.54 683.133 L1755.98 683.133 L1755.42 683.133 L1754.86 683.133 L1754.3 683.133 L1753.74 683.133 L1753.18 683.133 L1752.62 683.133 L1752.06 683.133 L1751.51 683.133 L1750.95 683.133 L1750.39 683.133 L1749.83 683.133 L1749.27 683.133 L1748.71 683.133 L1748.15 683.133 L1747.59 683.133 L1747.03 683.133 L1746.47 683.133 L1745.91 683.133 L1745.35 683.133 L1744.79 683.133 L1744.24 683.133 L1743.68 683.133 L1743.12 683.133 L1742.56 683.133 L1742 683.133 L1741.44 683.133 L1740.88 683.133 L1740.32 683.133 L1739.76 683.133 L1739.2 683.133 L1738.64 683.133 L1738.08 683.133 L1737.52 683.133 L1736.97 683.133 L1736.41 683.133 L1735.85 683.133 L1735.29 683.133 L1734.73 683.133 L1734.17 683.133 L1733.61 683.133 L1733.05 683.133 L1732.49 683.133 L1731.93 683.133 L1731.37 683.133 L1730.81 683.133 L1730.25 683.133 L1729.69 683.133 L1729.14 683.133 L1728.58 683.133 L1728.02 683.133 L1727.46 683.133 L1726.9 683.133 L1726.34 683.133 L1725.78 683.133 L1725.22 683.133 L1724.66 683.133 L1724.1 683.133 L1723.54 683.133 L1722.98 683.133 L1722.42 683.133 L1721.87 683.133 L1721.31 683.133 L1720.75 683.133 L1720.19 683.133 L1719.63 683.133 L1719.07 683.133 L1718.51 683.133 L1717.95 683.133 L1717.39 683.133 L1716.83 683.133 L1716.27 683.133 L1715.71 683.133 L1715.15 683.133 L1714.6 683.133 L1714.04 683.133 L1713.48 683.133 L1712.92 683.133 L1712.36 683.133 L1711.8 683.133 L1711.24 683.133 L1710.68 683.133 L1710.12 683.133 L1709.56 683.133 L1709 683.133 L1708.44 683.133 L1707.88 683.133 L1707.32 683.133 L1706.77 683.133 L1706.21 683.133 L1705.65 683.133 L1705.09 683.133 L1704.53 683.133 L1703.97 683.133 L1703.41 683.133 L1702.85 683.133 L1702.29 683.133 L1701.73 683.133 L1701.17 683.133 L1700.61 683.133 L1700.05 683.133 L1699.5 683.133 L1698.94 683.133 L1698.38 683.133 L1697.82 683.133 L1697.26 683.133 L1696.7 683.133 L1696.14 683.133 L1695.58 683.133 L1695.02 683.133 L1694.46 683.133 L1693.9 683.133 L1693.34 683.133 L1692.78 683.133 L1692.23 683.133 L1691.67 683.133 L1691.11 683.133 L1690.55 683.133 L1689.99 683.133 L1689.43 683.133 L1688.87 683.133 L1688.31 683.133 L1687.75 683.133 L1687.19 683.133 L1686.63 683.133 L1686.07 683.133 L1685.51 683.133 L1684.95 683.133 L1684.4 683.133 L1683.84 683.133 L1683.28 683.133 L1682.72 683.133 L1682.16 683.133 L1681.6 683.133 L1681.04 683.133 L1680.48 683.133 L1679.92 683.133 L1679.36 683.133 L1678.8 683.133 L1678.24 683.133 L1677.68 683.133 L1677.13 683.133 L1676.57 683.133 L1676.01 683.133 L1675.45 683.133 L1674.89 683.133 L1674.33 683.133 L1673.77 683.133 L1673.21 683.133 L1672.65 683.133 L1672.09 683.133 L1671.53 683.133 L1670.97 683.133 L1670.41 683.133 L1669.85 683.133 L1669.3 683.133 L1668.74 683.133 L1668.18 683.133 L1667.62 683.133 L1667.06 683.133 L1666.5 683.133 L1665.94 683.133 L1665.38 683.133 L1664.82 683.133 L1664.26 683.133 L1663.7 683.133 L1663.14 683.133 L1662.58 683.133 L1662.03 683.133 L1661.47 683.133 L1660.91 683.133 L1660.35 683.133 L1659.79 683.133 L1659.23 683.133 L1658.67 683.133 L1658.11 683.133 L1657.55 683.133 L1656.99 683.133 L1656.43 683.133 L1655.87 683.133 L1655.31 683.133 L1654.76 683.133 L1654.2 683.133 L1653.64 683.133 L1653.08 683.133 L1652.52 683.133 L1651.96 683.133 L1651.4 683.133 L1650.84 683.133 L1650.28 683.133 L1649.72 683.133 L1649.16 683.133 L1648.6 683.133 L1648.04 683.133 L1647.48 683.133 L1646.93 683.133 L1646.37 683.133 L1645.81 683.133 L1645.25 683.133 L1644.69 683.133 L1644.13 683.133 L1643.57 683.133 L1643.01 683.133 L1642.45 683.133 L1641.89 683.133 L1641.33 683.133 L1640.77 683.133 L1640.21 683.133 L1639.66 683.133 L1639.1 683.133 L1638.54 683.133 L1637.98 683.133 L1637.42 683.133 L1636.86 683.133 L1636.3 683.133 L1635.74 683.133 L1635.18 683.133 L1634.62 683.133 L1634.06 683.133 L1633.5 683.133 L1632.94 683.133 L1632.39 683.133 L1631.83 683.133 L1631.27 683.133 L1630.71 683.133 L1630.15 683.133 L1629.59 683.133 L1629.03 683.133 L1628.47 683.133 L1627.91 683.133 L1627.35 683.133 L1626.79 683.133 L1626.23 683.133 L1625.67 683.133 L1625.11 683.133 L1624.56 683.133 L1624 683.133 L1623.44 683.133 L1622.88 683.133 L1622.32 683.133 L1621.76 683.133 L1621.2 683.133 L1620.64 683.133 L1620.08 683.133 L1619.52 683.133 L1618.96 683.133 L1618.4 683.133 L1617.84 683.133 L1617.29 683.133 L1616.73 683.133 L1616.17 683.133 L1615.61 683.133 L1615.05 683.133 L1614.49 683.133 L1613.93 683.133 L1613.37 683.133 L1612.81 683.133 L1612.25 683.133 L1611.69 683.133 L1611.13 683.133 L1610.57 683.133 L1610.02 683.133 L1609.46 683.133 L1608.9 683.133 L1608.34 683.133 L1607.78 683.133 L1607.22 683.133 L1606.66 683.133 L1606.1 683.133 L1605.54 683.133 L1604.98 683.133 L1604.42 683.133 L1603.86 683.133 L1603.3 683.133 L1602.74 683.133 L1602.19 683.133 L1601.63 683.133 L1601.07 683.133 L1600.51 683.133 L1599.95 683.133 L1599.39 683.133 L1598.83 683.133 L1598.27 683.133 L1597.71 683.133 L1597.15 683.133 L1596.59 683.133 L1596.03 683.133 L1595.47 683.133 L1594.92 683.133 L1594.36 683.133 L1593.8 683.133 L1593.24 683.133 L1592.68 683.133 L1592.12 683.133 L1591.56 683.133 L1591 683.133 L1590.44 683.133 L1589.88 683.133 L1589.32 683.133 L1588.76 683.133 L1588.2 683.133 L1587.65 683.133 L1587.09 683.133 L1586.53 683.133 L1585.97 683.133 L1585.41 683.133 L1584.85 683.133 L1584.29 683.133 L1583.73 683.133 L1583.17 683.133 L1582.61 683.133 L1582.05 683.133 L1581.49 683.133 L1580.93 683.133 L1580.37 683.133 L1579.82 683.133 L1579.26 683.133 L1578.7 683.133 L1578.14 683.133 L1577.58 683.133 L1577.02 683.133 L1576.46 683.133 L1575.9 683.133 L1575.34 683.133 L1574.78 683.133 L1574.22 683.133 L1573.66 683.133 L1573.1 683.133 L1572.55 683.133 L1571.99 683.133 L1571.43 683.133 L1570.87 683.133 L1570.31 683.133 L1569.75 683.133 L1569.19 683.133 L1568.63 683.133 L1568.07 683.133 L1567.51 683.133 L1566.95 683.133 L1566.39 683.133 L1565.83 683.133 L1565.28 683.133 L1564.72 683.133 L1564.16 683.133 L1563.6 683.133 L1563.04 683.133 L1562.48 683.133 L1561.92 683.133 L1561.36 683.133 L1560.8 683.133 L1560.24 683.133 L1559.68 683.133 L1559.12 683.133 L1558.56 683.133 L1558 683.133 L1557.45 683.133 L1556.89 683.133 L1556.33 683.133 L1555.77 683.133 L1555.21 683.133 L1554.65 683.133 L1554.09 683.133 L1553.53 683.133 L1552.97 683.133 L1552.41 683.133 L1551.85 683.133 L1551.29 683.133 L1550.73 683.133 L1550.18 683.133 L1549.62 683.133 L1549.06 683.133 L1548.5 683.133 L1547.94 683.133 L1547.38 683.133 L1546.82 683.133 L1546.26 683.133 L1545.7 683.133 L1545.14 683.133 L1544.58 683.133 L1544.02 683.133 L1543.46 683.133 L1542.9 683.133 L1542.35 683.133 L1541.79 683.133 L1541.23 683.133 L1540.67 683.133 L1540.11 683.133 L1539.55 683.133 L1538.99 683.133 L1538.43 683.133 L1537.87 683.133 L1537.31 683.133 L1536.75 683.133 L1536.19 683.133 L1535.63 683.133 L1535.08 683.133 L1534.52 683.133 L1533.96 683.133 L1533.4 683.133 L1532.84 683.133 L1532.28 683.133 L1531.72 683.133 L1531.16 683.133 L1530.6 683.133 L1530.04 683.133 L1529.48 683.133 L1528.92 683.133 L1528.36 683.133 L1527.81 683.133 L1527.25 683.133 L1526.69 683.133 L1526.13 683.133 L1525.57 683.133 L1525.01 683.133 L1524.45 683.133 L1523.89 683.133 L1523.33 683.133 L1522.77 683.133 L1522.21 683.133 L1521.65 683.133 L1521.09 683.133 L1520.53 683.133 L1519.98 683.133 L1519.42 683.133 L1518.86 683.133 L1518.3 683.133 L1517.74 683.133 L1517.18 683.133 L1516.62 683.133 L1516.06 683.133 L1515.5 683.133 L1514.94 683.133 L1514.38 683.133 L1513.82 683.133 L1513.26 683.133 L1512.71 683.133 L1512.15 683.133 L1511.59 683.133 L1511.03 683.133 L1510.47 683.133 L1509.91 683.133 L1509.35 683.133 L1508.79 683.133 L1508.23 683.133 L1507.67 683.133 L1507.11 683.133 L1506.55 683.133 L1505.99 683.133 L1505.44 683.133 L1504.88 683.133 L1504.32 683.133 L1503.76 683.133 L1503.2 683.133 L1502.64 683.133 L1502.08 683.133 L1501.52 683.133 L1500.96 683.133 L1500.4 683.133 L1499.84 683.133 L1499.28 683.133 L1498.72 683.133 L1498.16 683.133 L1497.61 683.133 L1497.05 683.133 L1496.49 683.133 L1495.93 683.133 L1495.37 683.133 L1494.81 683.133 L1494.25 683.133 L1493.69 683.133 L1493.13 683.133 L1492.57 683.133 L1492.01 683.133 L1491.45 683.133 L1490.89 683.133 L1490.34 683.133 L1489.78 683.133 L1489.22 683.133 L1488.66 683.133 L1488.1 683.133 L1487.54 683.133 L1486.98 683.133 L1486.42 683.133 L1485.86 683.133 L1485.3 683.133 L1484.74 683.133 L1484.18 683.133 L1483.62 683.133 L1483.07 683.133 L1482.51 683.133 L1481.95 683.133 L1481.39 683.133 L1480.83 683.133 L1480.27 683.133 L1479.71 683.133 L1479.15 683.133 L1478.59 683.133 L1478.03 683.133 L1477.47 683.133 L1476.91 683.133 L1476.35 683.133 L1475.79 683.133 L1475.24 683.133 L1474.68 683.133 L1474.12 683.133 L1473.56 683.133 L1473 683.133 L1472.44 683.133 L1471.88 683.133 L1471.32 683.133 L1470.76 683.133 L1470.2 683.133 L1469.64 683.133 L1469.08 683.133 L1468.52 683.133 L1467.97 683.133 L1467.41 683.133 L1466.85 683.133 L1466.29 683.133 L1465.73 683.133 L1465.17 683.133 L1464.61 683.133 L1464.05 683.133 L1463.49 683.133 L1462.93 683.133 L1462.37 683.133 L1461.81 683.133 L1461.25 683.133 L1460.7 683.133 L1460.14 683.133 L1459.58 683.133 L1459.02 683.133 L1458.46 683.133 L1457.9 683.133 L1457.34 683.133 L1456.78 683.133 L1456.22 683.133 L1455.66 683.133 L1455.1 683.133 L1454.54 683.133 L1453.98 683.133 L1453.42 683.133 L1452.87 683.133 L1452.31 683.133 L1451.75 683.133 L1451.19 683.133 L1450.63 683.133 L1450.07 683.133 L1449.51 683.133 L1448.95 683.133 L1448.39 683.133 L1447.83 683.133 L1447.27 683.133 L1446.71 683.133 L1446.15 683.133 L1445.6 683.133 L1445.04 683.133 L1444.48 683.133 L1443.92 683.133 L1443.36 683.133 L1442.8 683.133 L1442.24 683.133 L1441.68 683.133 L1441.12 683.133 L1440.56 683.133 L1440 683.133 L1439.44 683.133 L1438.88 683.133 L1438.33 683.133 L1437.77 683.133 L1437.21 683.133 L1436.65 683.133 L1436.09 683.133 L1435.53 683.133 L1434.97 683.133 L1434.41 683.133 L1433.85 683.133 L1433.29 683.133 L1432.73 683.133 L1432.17 683.133 L1431.61 683.133 L1431.05 683.133 L1430.5 683.133 L1429.94 683.133 L1429.38 683.133 L1428.82 683.133 L1428.26 683.133 L1427.7 683.133 L1427.14 683.133 L1426.58 683.133 L1426.02 683.133 L1425.46 683.133 L1424.9 683.133 L1424.34 683.133 L1423.78 683.133 L1423.23 683.133 L1422.67 683.133 L1422.11 683.133 L1421.55 683.133 L1420.99 683.133 L1420.43 683.133 L1419.87 683.133 L1419.31 683.133 L1418.75 683.133 L1418.19 683.133 L1417.63 683.133 L1417.07 683.133 L1416.51 683.133 L1415.95 683.133 L1415.4 683.133 L1414.84 683.133 L1414.28 683.133 L1413.72 683.133 L1413.16 683.133 L1412.6 683.133 L1412.04 683.133 L1411.48 683.133 L1410.92 683.133 L1410.36 683.133 L1409.8 683.133 L1409.24 683.133 L1408.68 683.133 L1408.13 683.133 L1407.57 683.133 L1407.01 683.133 L1406.45 683.133 L1405.89 683.133 L1405.33 683.133 L1404.77 683.133 L1404.21 683.133 L1403.65 683.133 L1403.09 683.133 L1402.53 683.133 L1401.97 683.133 L1401.41 683.133 L1400.86 683.133 L1400.3 683.133 L1399.74 683.133 L1399.18 683.133 L1398.62 683.133 L1398.06 683.133 L1397.5 683.133 L1396.94 683.133 L1396.38 683.133 L1395.82 683.133 L1395.26 683.133 L1394.7 683.133 L1394.14 683.133 L1393.58 683.133 L1393.03 683.133 L1392.47 683.133 L1391.91 683.133 L1391.35 683.133 L1390.79 683.133 L1390.23 683.133 L1389.67 683.133 L1389.11 683.133 L1388.55 683.133 L1387.99 683.133 L1387.43 683.133 L1386.87 683.133 L1386.31 683.133 L1385.76 683.133 L1385.2 683.133 L1384.64 683.133 L1384.08 683.133 L1383.52 683.133 L1382.96 683.133 L1382.4 683.133 L1381.84 683.133 L1381.28 683.133 L1380.72 683.133 L1380.16 683.133 L1379.6 683.133 L1379.04 683.133 L1378.49 683.133 L1377.93 683.133 L1377.37 683.133 L1376.81 683.133 L1376.25 683.133 L1375.69 683.133 L1375.13 683.133 L1374.57 683.133 L1374.01 683.133 L1373.45 683.133 L1372.89 683.133 L1372.33 683.133 L1371.77 683.133 L1371.21 683.133 L1370.66 683.133 L1370.1 683.133 L1369.54 683.133 L1368.98 683.133 L1368.42 683.133 L1367.86 683.133 L1367.3 683.133 L1366.74 683.133 L1366.18 683.133 L1365.62 683.133 L1365.06 683.133 L1364.5 683.133 L1363.94 683.133 L1363.39 683.133 L1362.83 683.133 L1362.27 683.133 L1361.71 683.133 L1361.15 683.133 L1360.59 683.133 L1360.03 683.133 L1359.47 683.133 L1358.91 683.133 L1358.35 683.133 L1357.79 683.133 L1357.23 683.133 L1356.67 683.133 L1356.12 683.133 L1355.56 683.133 L1355 683.133 L1354.44 683.133 L1353.88 683.133 L1353.32 683.133 L1352.76 683.133 L1352.2 683.133 L1351.64 683.133 L1351.08 683.133 L1350.52 683.133 L1349.96 683.133 L1349.4 683.133 L1348.84 683.133 L1348.29 683.133 L1347.73 683.133 L1347.17 683.133 L1346.61 683.133 L1346.05 683.133 L1345.49 683.133 L1344.93 683.133 L1344.37 683.133 L1343.81 683.133 L1343.25 683.133 L1342.69 683.133 L1342.13 683.133 L1341.57 683.133 L1341.02 683.133 L1340.46 683.133 L1339.9 683.133 L1339.34 683.133 L1338.78 683.133 L1338.22 683.133 L1337.66 683.133 L1337.1 683.133 L1336.54 683.133 L1335.98 683.133 L1335.42 683.133 L1334.86 683.133 L1334.3 683.133 L1333.75 683.133 L1333.19 683.133 L1332.63 683.133 L1332.07 683.133 L1331.51 683.133 L1330.95 683.133 L1330.39 683.133 L1329.83 683.133 L1329.27 683.133 L1328.71 683.133 L1328.15 683.133 L1327.59 683.133 L1327.03 683.133 L1326.47 683.133 L1325.92 683.133 L1325.36 683.133 L1324.8 683.133 L1324.24 683.133 L1323.68 683.133 L1323.12 683.133 L1322.56 683.133 L1322 683.133 L1321.44 683.133 L1320.88 683.133 L1320.32 683.133 L1319.76 683.133 L1319.2 683.133 L1318.65 683.133 L1318.09 683.133 L1317.53 683.133 L1316.97 683.133 L1316.41 683.133 L1315.85 683.133 L1315.29 683.133 L1314.73 683.133 L1314.17 683.133 L1313.61 683.133 L1313.05 683.133 L1312.49 683.133 L1311.93 683.133 L1311.38 683.133 L1310.82 683.133 L1310.26 683.133 L1309.7 683.133 L1309.14 683.133 L1308.58 683.133 L1308.02 683.133 L1307.46 683.133 L1306.9 683.133 L1306.34 683.133 L1305.78 683.133 L1305.22 683.133 L1304.66 683.133 L1304.1 683.133 L1303.55 683.133 L1302.99 683.133 L1302.43 683.133 L1301.87 683.133 L1301.31 683.133 L1300.75 683.133 L1300.19 683.133 L1299.63 683.133 L1299.07 683.133 L1298.51 683.133 L1297.95 683.133 L1297.39 683.133 L1296.83 683.133 L1296.28 683.133 L1295.72 683.133 L1295.16 683.133 L1294.6 683.133 L1294.04 683.133 L1293.48 683.133 L1292.92 683.133 L1292.36 683.133 L1291.8 683.133 L1291.24 683.133 L1290.68 683.133 L1290.12 683.133 L1289.56 683.133 L1289 683.133 L1288.45 683.133 L1287.89 683.133 L1287.33 683.133 L1286.77 683.133 L1286.21 683.133 L1285.65 683.133 L1285.09 683.133 L1284.53 683.133 L1283.97 683.133 L1283.41 683.133 L1282.85 683.133 L1282.29 683.133 L1281.73 683.133 L1281.18 683.133 L1280.62 683.133 L1280.06 683.133 L1279.5 683.133 L1278.94 683.133 L1278.38 683.133 L1277.82 683.133 L1277.26 683.133 L1276.7 683.133 L1276.14 683.133 L1275.58 683.133 L1275.02 683.133 L1274.46 683.133 L1273.91 683.133 L1273.35 683.133 L1272.79 683.133 L1272.23 683.133 L1271.67 683.133 L1271.11 683.133 L1270.55 683.133 L1269.99 683.133 L1269.43 683.133 L1268.87 683.133 L1268.31 683.133 L1267.75 683.133 L1267.19 683.133 L1266.63 683.133 L1266.08 683.133 L1265.52 683.133 L1264.96 683.133 L1264.4 683.133 L1263.84 683.133 L1263.28 683.133 L1262.72 683.133 L1262.16 683.133 L1261.6 683.133 L1261.04 683.133 L1260.48 683.133 L1259.92 683.133 L1259.36 683.133 L1258.81 683.133 L1258.25 683.133 L1257.69 683.133 L1257.13 683.133 L1256.57 683.133 L1256.01 683.133 L1255.45 683.133 L1254.89 683.133 L1254.33 683.133 L1253.77 683.133 L1253.21 683.133 L1252.65 683.133 L1252.09 683.133 L1251.54 683.133 L1250.98 683.133 L1250.42 683.133 L1249.86 683.133 L1249.3 683.133 L1248.74 683.133 L1248.18 683.133 L1247.62 683.133 L1247.06 683.133 L1246.5 683.133 L1245.94 683.133 L1245.38 683.133 L1244.82 683.133 L1244.26 683.133 L1243.71 683.133 L1243.15 683.133 L1242.59 683.133 L1242.03 683.133 L1241.47 683.133 L1240.91 683.133 L1240.35 683.133 L1239.79 683.133 L1239.23 683.133 L1238.67 683.133 L1238.11 683.133 L1237.55 683.133 L1236.99 683.133 L1236.44 683.133 L1235.88 683.133 L1235.32 683.133 L1234.76 683.133 L1234.2 683.133 L1233.64 683.133 L1233.08 683.133 L1232.52 683.133 L1231.96 683.133 L1231.4 683.133 L1230.84 683.133 L1230.28 683.133 L1229.72 683.133 L1229.17 683.133 L1228.61 683.133 L1228.05 683.133 L1227.49 683.133 L1226.93 683.133 L1226.37 683.133 L1225.81 683.133 L1225.25 683.133 L1224.69 683.133 L1224.13 683.133 L1223.57 683.133 L1223.01 683.133 L1222.45 683.133 L1221.89 683.133 L1221.34 683.133 L1220.78 683.133 L1220.22 683.133 L1219.66 683.133 L1219.1 683.133 L1218.54 683.133 L1217.98 683.133 L1217.42 683.133 L1216.86 683.133 L1216.3 683.133 L1215.74 683.133 L1215.18 683.133 L1214.62 683.133 L1214.07 683.133 L1213.51 683.133 L1212.95 683.133 L1212.39 683.133 L1211.83 683.133 L1211.27 683.133 L1210.71 683.133 L1210.15 683.133 L1209.59 683.133 L1209.03 683.133 L1208.47 683.133 L1207.91 683.133 L1207.35 683.133 L1206.8 683.133 L1206.24 683.133 L1205.68 683.133 L1205.12 683.133 L1204.56 683.133 L1204 683.133 L1203.44 683.133 L1202.88 683.133 L1202.32 683.133 L1201.76 683.133 L1201.2 683.133 L1200.64 683.133 L1200.08 683.133 L1199.52 683.133 L1198.97 683.133 L1198.41 683.133 L1197.85 683.133 L1197.29 683.133 L1196.73 683.133 L1196.17 683.133 L1195.61 683.133 L1195.05 683.133 L1194.49 683.133 L1193.93 683.133 L1193.37 683.133 L1192.81 683.133 L1192.25 683.133 L1191.7 683.133 L1191.14 683.133 L1190.58 683.133 L1190.02 683.133 L1189.46 683.133 L1188.9 683.133 L1188.34 683.133 L1187.78 683.133 L1187.22 683.133 L1186.66 683.133 L1186.1 683.133 L1185.54 683.133 L1184.98 683.133 L1184.43 683.133 L1183.87 683.133 L1183.31 683.133 L1182.75 683.133 L1182.19 683.133 L1181.63 683.133 L1181.07 683.133 L1180.51 683.133 L1179.95 683.133 L1179.39 683.133 L1178.83 683.133 L1178.27 683.133 L1177.71 683.133 L1177.15 683.133 L1176.6 683.133 L1176.04 683.133 L1175.48 683.133 L1174.92 683.133 L1174.36 683.133 L1173.8 683.133 L1173.24 683.133 L1172.68 683.133 L1172.12 683.133 L1171.56 683.133 L1171 683.133 L1170.44 683.133 L1169.88 683.133 L1169.33 683.133 L1168.77 683.133 L1168.21 683.133 L1167.65 683.133 L1167.09 683.133 L1166.53 683.133 L1165.97 683.133 L1165.41 683.133 L1164.85 683.133 L1164.29 683.133 L1163.73 683.133 L1163.17 683.133 L1162.61 683.133 L1162.05 683.133 L1161.5 683.133 L1160.94 683.133 L1160.38 683.133 L1159.82 683.133 L1159.26 683.133 L1158.7 683.133 L1158.14 683.133 L1157.58 683.133 L1157.02 683.133 L1156.46 683.133 L1155.9 683.133 L1155.34 683.133 L1154.78 683.133 L1154.23 683.133 L1153.67 683.133 L1153.11 683.133 L1152.55 683.133 L1151.99 683.133 L1151.43 683.133 L1150.87 683.133 L1150.31 683.133 L1149.75 683.133 L1149.19 683.133 L1148.63 683.133 L1148.07 683.133 L1147.51 683.133 L1146.96 683.133 L1146.4 683.133 L1145.84 683.133 L1145.28 683.133 L1144.72 683.133 L1144.16 683.133 L1143.6 683.133 L1143.04 683.133 L1142.48 683.133 L1141.92 683.133 L1141.36 683.133 L1140.8 683.133 L1140.24 683.133 L1139.68 683.133 L1139.13 683.133 L1138.57 683.133 L1138.01 683.133 L1137.45 683.133 L1136.89 683.133 L1136.33 683.133 L1135.77 683.133 L1135.21 683.133 L1134.65 683.133 L1134.09 683.133 L1133.53 683.133 L1132.97 683.133 L1132.41 683.133 L1131.86 683.133 L1131.3 683.133 L1130.74 683.133 L1130.18 683.133 L1129.62 683.133 L1129.06 683.133 L1128.5 683.133 L1127.94 683.133 L1127.38 683.133 L1126.82 683.133 L1126.26 683.133 L1125.7 683.133 L1125.14 683.133 L1124.59 683.133 L1124.03 683.133 L1123.47 683.133 L1122.91 683.133 L1122.35 683.133 L1121.79 683.133 L1121.23 683.133 L1120.67 683.133 L1120.11 683.133 L1119.55 683.133 L1118.99 683.133 L1118.43 683.133 L1117.87 683.133 L1117.31 683.133 L1116.76 683.133 L1116.2 683.133 L1115.64 683.133 L1115.08 683.133 L1114.52 683.133 L1113.96 683.133 L1113.4 683.133 L1112.84 683.133 L1112.28 683.133 L1111.72 683.133 L1111.16 683.133 L1110.6 683.133 L1110.04 683.133 L1109.49 683.133 L1108.93 683.133 L1108.37 683.133 L1107.81 683.133 L1107.25 683.133 L1106.69 683.133 L1106.13 683.133 L1105.57 683.133 L1105.01 683.133 L1104.45 683.133 L1103.89 683.133 L1103.33 683.133 L1102.77 683.133 L1102.22 683.133 L1101.66 683.133 L1101.1 683.133 L1100.54 683.133 L1099.98 683.133 L1099.42 683.133 L1098.86 683.133 L1098.3 683.133 L1097.74 683.133 L1097.18 683.133 L1096.62 683.133 L1096.06 683.133 L1095.5 683.133 L1094.94 683.133 L1094.39 683.133 L1093.83 683.133 L1093.27 683.133 L1092.71 683.133 L1092.15 683.133 L1091.59 683.133 L1091.03 683.133 L1090.47 683.133 L1089.91 683.133 L1089.35 683.133 L1088.79 683.133 L1088.23 683.133 L1087.67 683.133 L1087.12 683.133 L1086.56 683.133 L1086 683.133 L1085.44 683.133 L1084.88 683.133 L1084.32 683.133 L1083.76 683.133 L1083.2 683.133 L1082.64 683.133 L1082.08 683.133 L1081.52 683.133 L1080.96 683.133 L1080.4 683.133 L1079.85 683.133 L1079.29 683.133 L1078.73 683.133 L1078.17 683.133 L1077.61 683.133 L1077.05 683.133 L1076.49 683.133 L1075.93 683.133 L1075.37 683.133 L1074.81 683.133 L1074.25 683.133 L1073.69 683.133 L1073.13 683.133 L1072.57 683.133 L1072.02 683.133 L1071.46 683.133 L1070.9 683.133 L1070.34 683.133 L1069.78 683.133 L1069.22 683.133 L1068.66 683.133 L1068.1 683.133 L1067.54 683.133 L1066.98 683.133 L1066.42 683.133 L1065.86 683.133 L1065.3 683.133 L1064.75 683.133 L1064.19 683.133 L1063.63 683.133 L1063.07 683.133 L1062.51 683.133 L1061.95 683.133 L1061.39 683.133 L1060.83 683.133 L1060.27 683.133 L1059.71 683.133 L1059.15 683.133 L1058.59 683.133 L1058.03 683.133 L1057.48 683.133 L1056.92 683.133 L1056.36 683.133 L1055.8 683.133 L1055.24 683.133 L1054.68 683.133 L1054.12 683.133 L1053.56 683.133 L1053 683.133 L1052.44 683.133 L1051.88 683.133 L1051.32 683.133 L1050.76 683.133 L1050.2 683.133 L1049.65 683.133 L1049.09 683.133 L1048.53 683.133 L1047.97 683.133 L1047.41 683.133 L1046.85 683.133 L1046.29 683.133 L1045.73 683.133 L1045.17 683.133 L1044.61 683.133 L1044.05 683.133 L1043.49 683.133 L1042.93 683.133 L1042.38 683.133 L1041.82 683.133 L1041.26 683.133 L1040.7 683.133 L1040.14 683.133 L1039.58 683.133 L1039.02 683.133 L1038.46 683.133 L1037.9 683.133 L1037.34 683.133 L1036.78 683.133 L1036.22 683.133 L1035.66 683.133 L1035.1 683.133 L1034.55 683.133 L1033.99 683.133 L1033.43 683.133 L1032.87 683.133 L1032.31 683.133 L1031.75 683.133 L1031.19 683.133 L1030.63 683.133 L1030.07 683.133 L1029.51 683.133 L1028.95 683.133 L1028.39 683.133 L1027.83 683.133 L1027.28 683.133 L1026.72 683.133 L1026.16 683.133 L1025.6 683.133 L1025.04 683.133 L1024.48 683.133 L1023.92 683.133 L1023.36 683.133 L1022.8 683.133 L1022.24 683.133 L1021.68 683.133 L1021.12 683.133 L1020.56 683.133 L1020.01 683.133 L1019.45 683.133 L1018.89 683.133 L1018.33 683.133 L1017.77 683.133 L1017.21 683.133 L1016.65 683.133 L1016.09 683.133 L1015.53 683.133 L1014.97 683.133 L1014.41 683.133 L1013.85 683.133 L1013.29 683.133 L1012.73 683.133 L1012.18 683.133 L1011.62 683.133 L1011.06 683.133 L1010.5 683.133 L1009.94 683.133 L1009.38 683.133 L1008.82 683.133 L1008.26 683.133 L1007.7 683.133 L1007.14 683.133 L1006.58 683.133 L1006.02 683.133 L1005.46 683.133 L1004.91 683.133 L1004.35 683.133 L1003.79 683.133 L1003.23 683.133 L1002.67 683.133 L1002.11 683.133 L1001.55 683.133 L1000.99 683.133 L1000.43 683.133 L999.872 683.133 L999.313 683.133 L998.754 683.133 L998.194 683.133 L997.635 683.133 L997.076 683.133 L996.517 683.133 L995.957 683.133 L995.398 683.133 L994.839 683.133 L994.28 683.133 L993.72 683.133 L993.161 683.133 L992.602 683.133 L992.043 683.133 L991.483 683.133 L990.924 683.133 L990.365 683.133 L989.806 683.133 L989.246 683.133 L988.687 683.133 L988.128 683.133 L987.569 683.133 L987.009 683.133 L986.45 683.133 L985.891 683.133 L985.332 683.133 L984.772 683.133 L984.213 683.133 L983.654 683.133 L983.095 683.133 L982.535 683.133 L981.976 683.133 L981.417 683.133 L980.858 683.133 L980.298 683.133 L979.739 683.133 L979.18 683.133 L978.621 683.133 L978.061 683.133 L977.502 683.133 L976.943 683.133 L976.384 683.133 L975.824 683.133 L975.265 683.133 L974.706 683.133 L974.147 683.133 L973.587 683.133 L973.028 683.133 L972.469 683.133 L971.91 683.133 L971.35 683.133 L970.791 683.133 L970.232 683.133 L969.673 683.133 L969.113 683.133 L968.554 683.133 L967.995 683.133 L967.436 683.133 L966.876 683.133 L966.317 683.133 L965.758 683.133 L965.199 683.133 L964.639 683.133 L964.08 683.133 L963.521 683.133 L962.962 683.133 L962.402 683.133 L961.843 683.133 L961.284 683.133 L960.725 683.133 L960.165 683.133 L959.606 683.133 L959.047 683.133 L958.488 683.133 L957.928 683.133 L957.369 683.133 L956.81 683.133 L956.251 683.133 L955.691 683.133 L955.132 683.133 L954.573 683.133 L954.014 683.133 L953.454 683.133 L952.895 683.133 L952.336 683.133 L951.777 683.133 L951.217 683.133 L950.658 683.133 L950.099 683.133 L949.54 683.133 L948.98 683.133 L948.421 683.133 L947.862 683.133 L947.303 683.133 L946.743 683.133 L946.184 683.133 L945.625 683.133 L945.066 683.133 L944.506 683.133 L943.947 683.133 L943.388 683.133 L942.829 683.133 L942.269 683.133 L941.71 683.133 L941.151 683.133 L940.592 683.133 L940.032 683.133 L939.473 683.133 L938.914 683.133 L938.355 683.133 L937.795 683.133 L937.236 683.133 L936.677 683.133 L936.118 683.133 L935.558 683.133 L934.999 683.133 L934.44 683.133 L933.881 683.133 L933.321 683.133 L932.762 683.133 L932.203 683.133 L931.644 683.133 L931.084 683.133 L930.525 683.133 L929.966 683.133 L929.406 683.133 L928.847 683.133 L928.288 683.133 L927.729 683.133 L927.169 683.133 L926.61 683.133 L926.051 683.133 L925.492 683.133 L924.932 683.133 L924.373 683.133 L923.814 683.133 L923.255 683.133 L922.695 683.133 L922.136 683.133 L921.577 683.133 L921.018 683.133 L920.458 683.133 L919.899 683.133 L919.34 683.133 L918.781 683.133 L918.221 683.133 L917.662 683.133 L917.103 683.133 L916.544 683.133 L915.984 683.133 L915.425 683.133 L914.866 683.133 L914.307 683.133 L913.747 683.133 L913.188 683.133 L912.629 683.133 L912.07 683.133 L911.51 683.133 L910.951 683.133 L910.392 683.133 L909.833 683.133 L909.273 683.133 L908.714 683.133 L908.155 683.133 L907.596 683.133 L907.036 683.133 L906.477 683.133 L905.918 683.133 L905.359 683.133 L904.799 683.133 L904.24 683.133 L903.681 683.133 L903.122 683.133 L902.562 683.133 L902.003 683.133 L901.444 683.133 L900.885 683.133 L900.325 683.133 L899.766 683.133 L899.207 683.133 L898.648 683.133 L898.088 683.133 L897.529 683.133 L896.97 683.133 L896.411 683.133 L895.851 683.133 L895.292 683.133 L894.733 683.133 L894.174 683.133 L893.614 683.133 L893.055 683.133 L892.496 683.133 L891.937 683.133 L891.377 683.133 L890.818 683.133 L890.259 683.133 L889.7 683.133 L889.14 683.133 L888.581 683.133 L888.022 683.133 L887.463 683.133 L886.903 683.133 L886.344 683.133 L885.785 683.133 L885.226 683.133 L884.666 683.133 L884.107 683.133 L883.548 683.133 L882.989 683.133 L882.429 683.133 L881.87 683.133 L881.311 683.133 L880.752 683.133 L880.192 683.133 L879.633 683.133 L879.074 683.133 L878.515 683.133 L877.955 683.133 L877.396 683.133 L876.837 683.133 L876.278 683.133 L875.718 683.133 L875.159 683.133 L874.6 683.133 L874.041 683.133 L873.481 683.133 L872.922 683.133 L872.363 683.133 L871.804 683.133 L871.244 683.133 L870.685 683.133 L870.126 683.133 L869.567 683.133 L869.007 683.133 L868.448 683.133 L867.889 683.133 L867.33 683.133 L866.77 683.133 L866.211 683.133 L865.652 683.133 L865.093 683.133 L864.533 683.133 L863.974 683.133 L863.415 683.133 L862.856 683.133 L862.296 683.133 L861.737 683.133 L861.178 683.133 L860.619 683.133 L860.059 683.133 L859.5 683.133 L858.941 683.133 L858.382 683.133 L857.822 683.133 L857.263 683.133 L856.704 683.133 L856.145 683.133 L855.585 683.133 L855.026 683.133 L854.467 683.133 L853.908 683.133 L853.348 683.133 L852.789 683.133 L852.23 683.133 L851.671 683.133 L851.111 683.133 L850.552 683.133 L849.993 683.133 L849.434 683.133 L848.874 683.133 L848.315 683.133 L847.756 683.133 L847.197 683.133 L846.637 683.133 L846.078 683.133 L845.519 683.133 L844.96 683.133 L844.4 683.133 L843.841 683.133 L843.282 683.133 L842.723 683.133 L842.163 683.133 L841.604 683.133 L841.045 683.133 L840.486 683.133 L839.926 683.133 L839.367 683.133 L838.808 683.133 L838.249 683.133 L837.689 683.133 L837.13 683.133 L836.571 683.133 L836.012 683.133 L835.452 683.133 L834.893 683.133 L834.334 683.133 L833.775 683.133 L833.215 683.133 L832.656 683.133 L832.097 683.133 L831.538 683.133 L830.978 683.133 L830.419 683.133 L829.86 683.133 L829.301 683.133 L828.741 683.133 L828.182 683.133 L827.623 683.133 L827.064 683.133 L826.504 683.133 L825.945 683.133 L825.386 683.133 L824.827 683.133 L824.267 683.133 L823.708 683.133 L823.149 683.133 L822.59 683.133 L822.03 683.133 L821.471 683.133 L820.912 683.133 L820.353 683.133 L819.793 683.133 L819.234 683.133 L818.675 683.133 L818.116 683.133 L817.556 683.133 L816.997 683.133 L816.438 683.133 L815.879 683.133 L815.319 683.133 L814.76 683.133 L814.201 683.133 L813.642 683.133 L813.082 683.133 L812.523 683.133 L811.964 683.133 L811.405 683.133 L810.845 683.133 L810.286 683.133 L809.727 683.133 L809.168 683.133 L808.608 683.133 L808.049 683.133 L807.49 683.133 L806.931 683.133 L806.371 683.133 L805.812 683.133 L805.253 683.133 L804.693 683.133 L804.134 683.133 L803.575 683.133 L803.016 683.133 L802.456 683.133 L801.897 683.133 L801.338 683.133 L800.779 683.133 L800.219 683.133 L799.66 683.133 L799.101 683.133 L798.542 683.133 L797.982 683.133 L797.423 683.133 L796.864 683.133 L796.305 683.133 L795.745 683.133 L795.186 683.133 L794.627 683.133 L794.068 683.133 L793.508 683.133 L792.949 683.133 L792.39 683.133 L791.831 683.133 L791.271 683.133 L790.712 683.133 L790.153 683.133 L789.594 683.133 L789.034 683.133 L788.475 683.133 L787.916 683.133 L787.357 683.133 L786.797 683.133 L786.238 683.133 L785.679 683.133 L785.12 683.133 L784.56 683.133 L784.001 683.133 L783.442 683.133 L782.883 683.133 L782.323 683.133 L781.764 683.133 L781.205 683.133 L780.646 683.133 L780.086 683.133 L779.527 683.133 L778.968 683.133 L778.409 683.133 L777.849 683.133 L777.29 683.133 L776.731 683.133 L776.172 683.133 L775.612 683.133 L775.053 683.133 L774.494 683.133 L773.935 683.133 L773.375 683.133 L772.816 683.133 L772.257 683.133 L771.698 683.133 L771.138 683.133 L770.579 683.133 L770.02 683.133 L769.461 683.133 L768.901 683.133 L768.342 683.133 L767.783 683.133 L767.224 683.133 L766.664 683.133 L766.105 683.133 L765.546 683.133 L764.987 683.133 L764.427 683.133 L763.868 683.133 L763.309 683.133 L762.75 683.133 L762.19 683.133 L761.631 683.133 L761.072 683.133 L760.513 683.133 L759.953 683.133 L759.394 683.133 L758.835 683.133 L758.276 683.133 L757.716 683.133 L757.157 683.133 L756.598 683.133 L756.039 683.133 L755.479 683.133 L754.92 683.133 L754.361 683.133 L753.802 683.133 L753.242 683.133 L752.683 683.133 L752.124 683.133 L751.565 683.133 L751.005 683.133 L750.446 683.133 L749.887 683.133 L749.328 683.133 L748.768 683.133 L748.209 683.133 L747.65 683.133 L747.091 683.133 L746.531 683.133 L745.972 683.133 L745.413 683.133 L744.854 683.133 L744.294 683.133 L743.735 683.133 L743.176 683.133 L742.617 683.133 L742.057 683.133 L741.498 683.133 L740.939 683.133 L740.38 683.133 L739.82 683.133 L739.261 683.133 L738.702 683.133 L738.143 683.133 L737.583 683.133 L737.024 683.133 L736.465 683.133 L735.906 683.133 L735.346 683.133 L734.787 683.133 L734.228 683.133 L733.669 683.133 L733.109 683.133 L732.55 683.133 L731.991 683.133 L731.432 683.133 L730.872 683.133 L730.313 683.133 L729.754 683.133 L729.195 683.133 L728.635 683.133 L728.076 683.133 L727.517 683.133 L726.958 683.133 L726.398 683.133 L725.839 683.133 L725.28 683.133 L724.721 683.133 L724.161 683.133 L723.602 683.133 L723.043 683.133 L722.484 683.133 L721.924 683.133 L721.365 683.133 L720.806 683.133 L720.247 683.133  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip243)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,684.204 720.806,684.204 721.365,684.204 721.924,684.204 722.484,684.204 723.043,684.204 723.602,684.204 724.161,684.204 724.721,684.204 725.28,684.204 725.839,684.204 726.398,684.204 726.958,684.204 727.517,684.204 728.076,684.204 728.635,684.204 729.195,684.204 729.754,684.204 730.313,684.204 730.872,684.204 731.432,684.204 731.991,684.204 732.55,684.204 733.109,684.204 733.669,684.204 734.228,684.204 734.787,684.204 735.346,684.204 735.906,684.204 736.465,684.204 737.024,684.204 737.583,684.204 738.143,684.204 738.702,684.204 739.261,684.204 739.82,684.204 740.38,684.204 740.939,684.204 741.498,684.204 742.057,684.204 742.617,684.204 743.176,684.204 743.735,684.204 744.294,684.204 744.854,684.204 745.413,684.204 745.972,684.204 746.531,684.204 747.091,684.204 747.65,684.204 748.209,684.204 748.768,684.204 749.328,684.204 749.887,684.204 750.446,684.204 751.005,684.204 751.565,684.204 752.124,684.204 752.683,684.204 753.242,684.204 753.802,684.204 754.361,684.204 754.92,684.204 755.479,684.204 756.039,684.204 756.598,684.204 757.157,684.204 757.716,684.204 758.276,684.204 758.835,684.204 759.394,684.204 759.953,684.204 760.513,684.204 761.072,684.204 761.631,684.204 762.19,684.204 762.75,684.204 763.309,684.204 763.868,684.204 764.427,684.204 764.987,684.204 765.546,684.204 766.105,684.204 766.664,684.204 767.224,684.204 767.783,684.204 768.342,684.204 768.901,684.204 769.461,684.204 770.02,684.204 770.579,684.204 771.138,684.204 771.698,684.204 772.257,684.204 772.816,684.204 773.375,684.204 773.935,684.204 774.494,684.204 775.053,684.204 775.612,684.204 776.172,684.204 776.731,684.204 777.29,684.204 777.849,684.204 778.409,684.204 778.968,684.204 779.527,684.204 780.086,684.204 780.646,684.204 781.205,684.204 781.764,684.204 782.323,684.204 782.883,684.204 783.442,684.204 784.001,684.204 784.56,684.204 785.12,684.204 785.679,684.204 786.238,684.204 786.797,684.204 787.357,684.204 787.916,684.204 788.475,684.204 789.034,684.204 789.594,684.204 790.153,684.204 790.712,684.204 791.271,684.204 791.831,684.204 792.39,684.204 792.949,684.204 793.508,684.204 794.068,684.204 794.627,684.204 795.186,684.204 795.745,684.204 796.305,684.204 796.864,684.204 797.423,684.204 797.982,684.204 798.542,684.204 799.101,684.204 799.66,684.204 800.219,684.204 800.779,684.204 801.338,684.204 801.897,684.204 802.456,684.204 803.016,684.204 803.575,684.204 804.134,684.204 804.693,684.204 805.253,684.204 805.812,684.204 806.371,684.204 806.931,684.204 807.49,684.204 808.049,684.204 808.608,684.204 809.168,684.204 809.727,684.204 810.286,684.204 810.845,684.204 811.405,684.204 811.964,684.204 812.523,684.204 813.082,684.204 813.642,684.204 814.201,684.204 814.76,684.204 815.319,684.204 815.879,684.204 816.438,684.204 816.997,684.204 817.556,684.204 818.116,684.204 818.675,684.204 819.234,684.204 819.793,684.204 820.353,684.204 820.912,684.204 821.471,684.204 822.03,684.204 822.59,684.204 823.149,684.204 823.708,684.204 824.267,684.204 824.827,684.204 825.386,684.204 825.945,684.204 826.504,684.204 827.064,684.204 827.623,684.204 828.182,684.204 828.741,684.204 829.301,684.204 829.86,684.204 830.419,684.204 830.978,684.204 831.538,684.204 832.097,684.204 832.656,684.204 833.215,684.204 833.775,684.204 834.334,684.204 834.893,684.204 835.452,684.204 836.012,684.204 836.571,684.204 837.13,684.204 837.689,684.204 838.249,684.204 838.808,684.204 839.367,684.204 839.926,684.204 840.486,684.204 841.045,684.204 841.604,684.204 842.163,684.204 842.723,684.204 843.282,684.204 843.841,684.204 844.4,684.204 844.96,684.204 845.519,684.204 846.078,684.204 846.637,684.204 847.197,684.204 847.756,684.204 848.315,684.204 848.874,684.204 849.434,684.204 849.993,684.204 850.552,684.204 851.111,684.204 851.671,684.204 852.23,684.204 852.789,684.204 853.348,684.204 853.908,684.204 854.467,684.204 855.026,684.204 855.585,684.204 856.145,684.204 856.704,684.204 857.263,684.204 857.822,684.204 858.382,684.204 858.941,684.204 859.5,684.204 860.059,684.204 860.619,684.204 861.178,684.204 861.737,684.204 862.296,684.204 862.856,684.204 863.415,684.204 863.974,684.204 864.533,684.204 865.093,684.204 865.652,684.204 866.211,684.204 866.77,684.204 867.33,684.204 867.889,684.204 868.448,684.204 869.007,684.204 869.567,684.204 870.126,684.204 870.685,684.204 871.244,684.204 871.804,684.204 872.363,684.204 872.922,684.204 873.481,684.204 874.041,684.204 874.6,684.204 875.159,684.204 875.718,684.204 876.278,684.204 876.837,684.204 877.396,684.204 877.955,684.204 878.515,684.204 879.074,684.204 879.633,684.204 880.192,684.204 880.752,684.204 881.311,684.204 881.87,684.204 882.429,684.204 882.989,684.204 883.548,684.204 884.107,684.204 884.666,684.204 885.226,684.204 885.785,684.204 886.344,684.204 886.903,684.204 887.463,684.204 888.022,684.204 888.581,684.204 889.14,684.204 889.7,684.204 890.259,684.204 890.818,684.204 891.377,684.204 891.937,684.204 892.496,684.204 893.055,684.204 893.614,684.204 894.174,684.204 894.733,684.204 895.292,684.204 895.851,684.204 896.411,684.204 896.97,684.204 897.529,684.204 898.088,684.204 898.648,684.204 899.207,684.204 899.766,684.204 900.325,684.204 900.885,684.204 901.444,684.204 902.003,684.204 902.562,684.204 903.122,684.204 903.681,684.204 904.24,684.204 904.799,684.204 905.359,684.204 905.918,684.204 906.477,684.204 907.036,684.204 907.596,684.204 908.155,684.204 908.714,684.204 909.273,684.204 909.833,684.204 910.392,684.204 910.951,684.204 911.51,684.204 912.07,684.204 912.629,684.204 913.188,684.204 913.747,684.204 914.307,684.204 914.866,684.204 915.425,684.204 915.984,684.204 916.544,684.204 917.103,684.204 917.662,684.204 918.221,684.204 918.781,684.204 919.34,684.204 919.899,684.204 920.458,684.204 921.018,684.204 921.577,684.204 922.136,684.204 922.695,684.204 923.255,684.204 923.814,684.204 924.373,684.204 924.932,684.204 925.492,684.204 926.051,684.204 926.61,684.204 927.169,684.204 927.729,684.204 928.288,684.204 928.847,684.204 929.406,684.204 929.966,684.204 930.525,684.204 931.084,684.204 931.644,684.204 932.203,684.204 932.762,684.204 933.321,684.204 933.881,684.204 934.44,684.204 934.999,684.204 935.558,684.204 936.118,684.204 936.677,684.204 937.236,684.204 937.795,684.204 938.355,684.204 938.914,684.204 939.473,684.204 940.032,684.204 940.592,684.204 941.151,684.204 941.71,684.204 942.269,684.204 942.829,684.204 943.388,684.204 943.947,684.204 944.506,684.204 945.066,684.204 945.625,684.204 946.184,684.204 946.743,684.204 947.303,684.204 947.862,684.204 948.421,684.204 948.98,684.204 949.54,684.204 950.099,684.204 950.658,684.204 951.217,684.204 951.777,684.204 952.336,684.204 952.895,684.204 953.454,684.204 954.014,684.204 954.573,684.204 955.132,684.204 955.691,684.204 956.251,684.204 956.81,684.204 957.369,684.204 957.928,684.204 958.488,684.204 959.047,684.204 959.606,684.204 960.165,684.204 960.725,684.204 961.284,684.204 961.843,684.204 962.402,684.204 962.962,684.204 963.521,684.204 964.08,684.204 964.639,684.204 965.199,684.204 965.758,684.204 966.317,684.204 966.876,684.204 967.436,684.204 967.995,684.204 968.554,684.204 969.113,684.204 969.673,684.204 970.232,684.204 970.791,684.204 971.35,684.204 971.91,684.204 972.469,684.204 973.028,684.204 973.587,684.204 974.147,684.204 974.706,684.204 975.265,684.204 975.824,684.204 976.384,684.204 976.943,684.204 977.502,684.204 978.061,684.204 978.621,684.204 979.18,684.204 979.739,684.204 980.298,684.204 980.858,684.204 981.417,684.204 981.976,684.204 982.535,684.204 983.095,684.204 983.654,684.204 984.213,684.204 984.772,684.204 985.332,684.204 985.891,684.204 986.45,684.204 987.009,684.204 987.569,684.204 988.128,684.204 988.687,684.204 989.246,684.204 989.806,684.204 990.365,684.204 990.924,684.204 991.483,684.204 992.043,684.204 992.602,684.204 993.161,684.204 993.72,684.204 994.28,684.204 994.839,684.204 995.398,684.204 995.957,684.204 996.517,684.204 997.076,684.204 997.635,684.204 998.194,684.204 998.754,684.204 999.313,684.204 999.872,684.204 1000.43,684.204 1000.99,684.204 1001.55,684.204 1002.11,684.204 1002.67,684.204 1003.23,684.204 1003.79,684.204 1004.35,684.204 1004.91,684.204 1005.46,684.204 1006.02,684.204 1006.58,684.204 1007.14,684.204 1007.7,684.204 1008.26,684.204 1008.82,684.204 1009.38,684.204 1009.94,684.204 1010.5,684.204 1011.06,684.204 1011.62,684.204 1012.18,684.204 1012.73,684.204 1013.29,684.204 1013.85,684.204 1014.41,684.204 1014.97,684.204 1015.53,684.204 1016.09,684.204 1016.65,684.204 1017.21,684.204 1017.77,684.204 1018.33,684.204 1018.89,684.204 1019.45,684.204 1020.01,684.204 1020.56,684.204 1021.12,684.204 1021.68,684.204 1022.24,684.204 1022.8,684.204 1023.36,684.204 1023.92,684.204 1024.48,684.204 1025.04,684.204 1025.6,684.204 1026.16,684.204 1026.72,684.204 1027.28,684.204 1027.83,684.204 1028.39,684.204 1028.95,684.204 1029.51,684.204 1030.07,684.204 1030.63,684.204 1031.19,684.204 1031.75,684.204 1032.31,684.204 1032.87,684.204 1033.43,684.204 1033.99,684.204 1034.55,684.204 1035.1,684.204 1035.66,684.204 1036.22,684.204 1036.78,684.204 1037.34,684.204 1037.9,684.204 1038.46,684.204 1039.02,684.204 1039.58,684.204 1040.14,684.204 1040.7,684.204 1041.26,684.204 1041.82,684.204 1042.38,684.204 1042.93,684.204 1043.49,684.204 1044.05,684.204 1044.61,684.204 1045.17,684.204 1045.73,684.204 1046.29,684.204 1046.85,684.204 1047.41,684.204 1047.97,684.204 1048.53,684.204 1049.09,684.204 1049.65,684.204 1050.2,684.204 1050.76,684.204 1051.32,684.204 1051.88,684.204 1052.44,684.204 1053,684.204 1053.56,684.204 1054.12,684.204 1054.68,684.204 1055.24,684.204 1055.8,684.204 1056.36,684.204 1056.92,684.204 1057.48,684.204 1058.03,684.204 1058.59,684.204 1059.15,684.204 1059.71,684.204 1060.27,684.204 1060.83,684.204 1061.39,684.204 1061.95,684.204 1062.51,684.204 1063.07,684.204 1063.63,684.204 1064.19,684.204 1064.75,684.204 1065.3,684.204 1065.86,684.204 1066.42,684.204 1066.98,684.204 1067.54,684.204 1068.1,684.204 1068.66,684.204 1069.22,684.204 1069.78,684.204 1070.34,684.204 1070.9,684.204 1071.46,684.204 1072.02,684.204 1072.57,684.204 1073.13,684.204 1073.69,684.204 1074.25,684.204 1074.81,684.204 1075.37,684.204 1075.93,684.204 1076.49,684.204 1077.05,684.204 1077.61,684.204 1078.17,684.204 1078.73,684.204 1079.29,684.204 1079.85,684.204 1080.4,684.204 1080.96,684.204 1081.52,684.204 1082.08,684.204 1082.64,684.204 1083.2,684.204 1083.76,684.204 1084.32,684.204 1084.88,684.204 1085.44,684.204 1086,684.204 1086.56,684.204 1087.12,684.204 1087.67,684.204 1088.23,684.204 1088.79,684.204 1089.35,684.204 1089.91,684.204 1090.47,684.204 1091.03,684.204 1091.59,684.204 1092.15,684.204 1092.71,684.204 1093.27,684.204 1093.83,684.204 1094.39,684.204 1094.94,684.204 1095.5,684.204 1096.06,684.204 1096.62,684.204 1097.18,684.204 1097.74,684.204 1098.3,684.204 1098.86,684.204 1099.42,684.204 1099.98,684.204 1100.54,684.204 1101.1,684.204 1101.66,684.204 1102.22,684.204 1102.77,684.204 1103.33,684.204 1103.89,684.204 1104.45,684.204 1105.01,684.204 1105.57,684.204 1106.13,684.204 1106.69,684.204 1107.25,684.204 1107.81,684.204 1108.37,684.204 1108.93,684.204 1109.49,684.204 1110.04,684.204 1110.6,684.204 1111.16,684.204 1111.72,684.204 1112.28,684.204 1112.84,684.204 1113.4,684.204 1113.96,684.204 1114.52,684.204 1115.08,684.204 1115.64,684.204 1116.2,684.204 1116.76,684.204 1117.31,684.204 1117.87,684.204 1118.43,684.204 1118.99,684.204 1119.55,684.204 1120.11,684.204 1120.67,684.204 1121.23,684.204 1121.79,684.204 1122.35,684.204 1122.91,684.204 1123.47,684.204 1124.03,684.204 1124.59,684.204 1125.14,684.204 1125.7,684.204 1126.26,684.204 1126.82,684.204 1127.38,684.204 1127.94,684.204 1128.5,684.204 1129.06,684.204 1129.62,684.204 1130.18,684.204 1130.74,684.204 1131.3,684.204 1131.86,684.204 1132.41,684.204 1132.97,684.204 1133.53,684.204 1134.09,684.204 1134.65,684.204 1135.21,684.204 1135.77,684.204 1136.33,684.204 1136.89,684.204 1137.45,684.204 1138.01,684.204 1138.57,684.204 1139.13,684.204 1139.68,684.204 1140.24,684.204 1140.8,684.204 1141.36,684.204 1141.92,684.204 1142.48,684.204 1143.04,684.204 1143.6,684.204 1144.16,684.204 1144.72,684.204 1145.28,684.204 1145.84,684.204 1146.4,684.204 1146.96,684.204 1147.51,684.204 1148.07,684.204 1148.63,684.204 1149.19,684.204 1149.75,684.204 1150.31,684.204 1150.87,684.204 1151.43,684.204 1151.99,684.204 1152.55,684.204 1153.11,684.204 1153.67,684.204 1154.23,684.204 1154.78,684.204 1155.34,684.204 1155.9,684.204 1156.46,684.204 1157.02,684.204 1157.58,684.204 1158.14,684.204 1158.7,684.204 1159.26,684.204 1159.82,684.204 1160.38,684.204 1160.94,684.204 1161.5,684.204 1162.05,684.204 1162.61,684.204 1163.17,684.204 1163.73,684.204 1164.29,684.204 1164.85,684.204 1165.41,684.204 1165.97,684.204 1166.53,684.204 1167.09,684.204 1167.65,684.204 1168.21,684.204 1168.77,684.204 1169.33,684.204 1169.88,684.204 1170.44,684.204 1171,684.204 1171.56,684.204 1172.12,684.204 1172.68,684.204 1173.24,684.204 1173.8,684.204 1174.36,684.204 1174.92,684.204 1175.48,684.204 1176.04,684.204 1176.6,684.204 1177.15,684.204 1177.71,684.204 1178.27,684.204 1178.83,684.204 1179.39,684.204 1179.95,684.204 1180.51,684.204 1181.07,684.204 1181.63,684.204 1182.19,684.204 1182.75,684.204 1183.31,684.204 1183.87,684.204 1184.43,684.204 1184.98,684.204 1185.54,684.204 1186.1,684.204 1186.66,684.204 1187.22,684.204 1187.78,684.204 1188.34,684.204 1188.9,684.204 1189.46,684.204 1190.02,684.204 1190.58,684.204 1191.14,684.204 1191.7,684.204 1192.25,684.204 1192.81,684.204 1193.37,684.204 1193.93,684.204 1194.49,684.204 1195.05,684.204 1195.61,684.204 1196.17,684.204 1196.73,684.204 1197.29,684.204 1197.85,684.204 1198.41,684.204 1198.97,684.204 1199.52,684.204 1200.08,684.204 1200.64,684.204 1201.2,684.204 1201.76,684.204 1202.32,684.204 1202.88,684.204 1203.44,684.204 1204,684.204 1204.56,684.204 1205.12,684.204 1205.68,684.204 1206.24,684.204 1206.8,684.204 1207.35,684.204 1207.91,684.204 1208.47,684.204 1209.03,684.204 1209.59,684.204 1210.15,684.204 1210.71,684.204 1211.27,684.204 1211.83,684.204 1212.39,684.204 1212.95,684.204 1213.51,684.204 1214.07,684.204 1214.62,684.204 1215.18,684.204 1215.74,684.204 1216.3,684.204 1216.86,684.204 1217.42,684.204 1217.98,684.204 1218.54,684.204 1219.1,684.204 1219.66,684.204 1220.22,684.204 1220.78,684.204 1221.34,684.204 1221.89,684.204 1222.45,684.204 1223.01,684.204 1223.57,684.204 1224.13,684.204 1224.69,684.204 1225.25,684.204 1225.81,684.204 1226.37,684.204 1226.93,684.204 1227.49,684.204 1228.05,684.204 1228.61,684.204 1229.17,684.204 1229.72,684.204 1230.28,684.204 1230.84,684.204 1231.4,684.204 1231.96,684.204 1232.52,684.204 1233.08,684.204 1233.64,684.204 1234.2,684.204 1234.76,684.204 1235.32,684.204 1235.88,684.204 1236.44,684.204 1236.99,684.204 1237.55,684.204 1238.11,684.204 1238.67,684.204 1239.23,684.204 1239.79,684.204 1240.35,684.204 1240.91,684.204 1241.47,684.204 1242.03,684.204 1242.59,684.204 1243.15,684.204 1243.71,684.204 1244.26,684.204 1244.82,684.204 1245.38,684.204 1245.94,684.204 1246.5,684.204 1247.06,684.204 1247.62,684.204 1248.18,684.204 1248.74,684.204 1249.3,684.204 1249.86,684.204 1250.42,684.204 1250.98,684.204 1251.54,684.204 1252.09,684.204 1252.65,684.204 1253.21,684.204 1253.77,684.204 1254.33,684.204 1254.89,684.204 1255.45,684.204 1256.01,684.204 1256.57,684.204 1257.13,684.204 1257.69,684.204 1258.25,684.204 1258.81,684.204 1259.36,684.204 1259.92,684.204 1260.48,684.204 1261.04,684.204 1261.6,684.204 1262.16,684.204 1262.72,684.204 1263.28,684.204 1263.84,684.204 1264.4,684.204 1264.96,684.204 1265.52,684.204 1266.08,684.204 1266.63,684.204 1267.19,684.204 1267.75,684.204 1268.31,684.204 1268.87,684.204 1269.43,684.204 1269.99,684.204 1270.55,684.204 1271.11,684.204 1271.67,684.204 1272.23,684.204 1272.79,684.204 1273.35,684.204 1273.91,684.204 1274.46,684.204 1275.02,684.204 1275.58,684.204 1276.14,684.204 1276.7,684.204 1277.26,684.204 1277.82,684.204 1278.38,684.204 1278.94,684.204 1279.5,684.204 1280.06,684.204 1280.62,684.204 1281.18,684.204 1281.73,684.204 1282.29,684.204 1282.85,684.204 1283.41,684.204 1283.97,684.204 1284.53,684.204 1285.09,684.204 1285.65,684.204 1286.21,684.204 1286.77,684.204 1287.33,684.204 1287.89,684.204 1288.45,684.204 1289,684.204 1289.56,684.204 1290.12,684.204 1290.68,684.204 1291.24,684.204 1291.8,684.204 1292.36,684.204 1292.92,684.204 1293.48,684.204 1294.04,684.204 1294.6,684.204 1295.16,684.204 1295.72,684.204 1296.28,684.204 1296.83,684.204 1297.39,684.204 1297.95,684.204 1298.51,684.204 1299.07,684.204 1299.63,684.204 1300.19,684.204 1300.75,684.204 1301.31,684.204 1301.87,684.204 1302.43,684.204 1302.99,684.204 1303.55,684.204 1304.1,684.204 1304.66,684.204 1305.22,684.204 1305.78,684.204 1306.34,684.204 1306.9,684.204 1307.46,684.204 1308.02,684.204 1308.58,684.204 1309.14,684.204 1309.7,684.204 1310.26,684.204 1310.82,684.204 1311.38,684.204 1311.93,684.204 1312.49,684.204 1313.05,684.204 1313.61,684.204 1314.17,684.204 1314.73,684.204 1315.29,684.204 1315.85,684.204 1316.41,684.204 1316.97,684.204 1317.53,684.204 1318.09,684.204 1318.65,684.204 1319.2,684.204 1319.76,684.204 1320.32,684.204 1320.88,684.204 1321.44,684.204 1322,684.204 1322.56,684.204 1323.12,684.204 1323.68,684.204 1324.24,684.204 1324.8,684.204 1325.36,684.204 1325.92,684.204 1326.47,684.204 1327.03,684.204 1327.59,684.204 1328.15,684.204 1328.71,684.204 1329.27,684.204 1329.83,684.204 1330.39,684.204 1330.95,684.204 1331.51,684.204 1332.07,684.204 1332.63,684.204 1333.19,684.204 1333.75,684.204 1334.3,684.204 1334.86,684.204 1335.42,684.204 1335.98,684.204 1336.54,684.204 1337.1,684.204 1337.66,684.204 1338.22,684.204 1338.78,684.204 1339.34,684.204 1339.9,684.204 1340.46,684.204 1341.02,684.204 1341.57,684.204 1342.13,684.204 1342.69,684.204 1343.25,684.204 1343.81,684.204 1344.37,684.204 1344.93,684.204 1345.49,684.204 1346.05,684.204 1346.61,684.204 1347.17,684.204 1347.73,684.204 1348.29,684.204 1348.84,684.204 1349.4,684.204 1349.96,684.204 1350.52,684.204 1351.08,684.204 1351.64,684.204 1352.2,684.204 1352.76,684.204 1353.32,684.204 1353.88,684.204 1354.44,684.204 1355,684.204 1355.56,684.204 1356.12,684.204 1356.67,684.204 1357.23,684.204 1357.79,684.204 1358.35,684.204 1358.91,684.204 1359.47,684.204 1360.03,684.204 1360.59,684.204 1361.15,684.204 1361.71,684.204 1362.27,684.204 1362.83,684.204 1363.39,684.204 1363.94,684.204 1364.5,684.204 1365.06,684.204 1365.62,684.204 1366.18,684.204 1366.74,684.204 1367.3,684.204 1367.86,684.204 1368.42,684.204 1368.98,684.204 1369.54,684.204 1370.1,684.204 1370.66,684.204 1371.21,684.204 1371.77,684.204 1372.33,684.204 1372.89,684.204 1373.45,684.204 1374.01,684.204 1374.57,684.204 1375.13,684.204 1375.69,684.204 1376.25,684.204 1376.81,684.204 1377.37,684.204 1377.93,684.204 1378.49,684.204 1379.04,684.204 1379.6,684.204 1380.16,684.204 1380.72,684.204 1381.28,684.204 1381.84,684.204 1382.4,684.204 1382.96,684.204 1383.52,684.204 1384.08,684.204 1384.64,684.204 1385.2,684.204 1385.76,684.204 1386.31,684.204 1386.87,684.204 1387.43,684.204 1387.99,684.204 1388.55,684.204 1389.11,684.204 1389.67,684.204 1390.23,684.204 1390.79,684.204 1391.35,684.204 1391.91,684.204 1392.47,684.204 1393.03,684.204 1393.58,684.204 1394.14,684.204 1394.7,684.204 1395.26,684.204 1395.82,684.204 1396.38,684.204 1396.94,684.204 1397.5,684.204 1398.06,684.204 1398.62,684.204 1399.18,684.204 1399.74,684.204 1400.3,684.204 1400.86,684.204 1401.41,684.204 1401.97,684.204 1402.53,684.204 1403.09,684.204 1403.65,684.204 1404.21,684.204 1404.77,684.204 1405.33,684.204 1405.89,684.204 1406.45,684.204 1407.01,684.204 1407.57,684.204 1408.13,684.204 1408.68,684.204 1409.24,684.204 1409.8,684.204 1410.36,684.204 1410.92,684.204 1411.48,684.204 1412.04,684.204 1412.6,684.204 1413.16,684.204 1413.72,684.204 1414.28,684.204 1414.84,684.204 1415.4,684.204 1415.95,684.204 1416.51,684.204 1417.07,684.204 1417.63,684.204 1418.19,684.204 1418.75,684.204 1419.31,684.204 1419.87,684.204 1420.43,684.204 1420.99,684.204 1421.55,684.204 1422.11,684.204 1422.67,684.204 1423.23,684.204 1423.78,684.204 1424.34,684.204 1424.9,684.204 1425.46,684.204 1426.02,684.204 1426.58,684.204 1427.14,684.204 1427.7,684.204 1428.26,684.204 1428.82,684.204 1429.38,684.204 1429.94,684.204 1430.5,684.204 1431.05,684.204 1431.61,684.204 1432.17,684.204 1432.73,684.204 1433.29,684.204 1433.85,684.204 1434.41,684.204 1434.97,684.204 1435.53,684.204 1436.09,684.204 1436.65,684.204 1437.21,684.204 1437.77,684.204 1438.33,684.204 1438.88,684.204 1439.44,684.204 1440,684.204 1440.56,684.204 1441.12,684.204 1441.68,684.204 1442.24,684.204 1442.8,684.204 1443.36,684.204 1443.92,684.204 1444.48,684.204 1445.04,684.204 1445.6,684.204 1446.15,684.204 1446.71,684.204 1447.27,684.204 1447.83,684.204 1448.39,684.204 1448.95,684.204 1449.51,684.204 1450.07,684.204 1450.63,684.204 1451.19,684.204 1451.75,684.204 1452.31,684.204 1452.87,684.204 1453.42,684.204 1453.98,684.204 1454.54,684.204 1455.1,684.204 1455.66,684.204 1456.22,684.204 1456.78,684.204 1457.34,684.204 1457.9,684.204 1458.46,684.204 1459.02,684.204 1459.58,684.204 1460.14,684.204 1460.7,684.204 1461.25,684.204 1461.81,684.204 1462.37,684.204 1462.93,684.204 1463.49,684.204 1464.05,684.204 1464.61,684.204 1465.17,684.204 1465.73,684.204 1466.29,684.204 1466.85,684.204 1467.41,684.204 1467.97,684.204 1468.52,684.204 1469.08,684.204 1469.64,684.204 1470.2,684.204 1470.76,684.204 1471.32,684.204 1471.88,684.204 1472.44,684.204 1473,684.204 1473.56,684.204 1474.12,684.204 1474.68,684.204 1475.24,684.204 1475.79,684.204 1476.35,684.204 1476.91,684.204 1477.47,684.204 1478.03,684.204 1478.59,684.204 1479.15,684.204 1479.71,684.204 1480.27,684.204 1480.83,684.204 1481.39,684.204 1481.95,684.204 1482.51,684.204 1483.07,684.204 1483.62,684.204 1484.18,684.204 1484.74,684.204 1485.3,684.204 1485.86,684.204 1486.42,684.204 1486.98,684.204 1487.54,684.204 1488.1,684.204 1488.66,684.204 1489.22,684.204 1489.78,684.204 1490.34,684.204 1490.89,684.204 1491.45,684.204 1492.01,684.204 1492.57,684.204 1493.13,684.204 1493.69,684.204 1494.25,684.204 1494.81,684.204 1495.37,684.204 1495.93,684.204 1496.49,684.204 1497.05,684.204 1497.61,684.204 1498.16,684.204 1498.72,684.204 1499.28,684.204 1499.84,684.204 1500.4,684.204 1500.96,684.204 1501.52,684.204 1502.08,684.204 1502.64,684.204 1503.2,684.204 1503.76,684.204 1504.32,684.204 1504.88,684.204 1505.44,684.204 1505.99,684.204 1506.55,684.204 1507.11,684.204 1507.67,684.204 1508.23,684.204 1508.79,684.204 1509.35,684.204 1509.91,684.204 1510.47,684.204 1511.03,684.204 1511.59,684.204 1512.15,684.204 1512.71,684.204 1513.26,684.204 1513.82,684.204 1514.38,684.204 1514.94,684.204 1515.5,684.204 1516.06,684.204 1516.62,684.204 1517.18,684.204 1517.74,684.204 1518.3,684.204 1518.86,684.204 1519.42,684.204 1519.98,684.204 1520.53,684.204 1521.09,684.204 1521.65,684.204 1522.21,684.204 1522.77,684.204 1523.33,684.204 1523.89,684.204 1524.45,684.204 1525.01,684.204 1525.57,684.204 1526.13,684.204 1526.69,684.204 1527.25,684.204 1527.81,684.204 1528.36,684.204 1528.92,684.204 1529.48,684.204 1530.04,684.204 1530.6,684.204 1531.16,684.204 1531.72,684.204 1532.28,684.204 1532.84,684.204 1533.4,684.204 1533.96,684.204 1534.52,684.204 1535.08,684.204 1535.63,684.204 1536.19,684.204 1536.75,684.204 1537.31,684.204 1537.87,684.204 1538.43,684.204 1538.99,684.204 1539.55,684.204 1540.11,684.204 1540.67,684.204 1541.23,684.204 1541.79,684.204 1542.35,684.204 1542.9,684.204 1543.46,684.204 1544.02,684.204 1544.58,684.204 1545.14,684.204 1545.7,684.204 1546.26,684.204 1546.82,684.204 1547.38,684.204 1547.94,684.204 1548.5,684.204 1549.06,684.204 1549.62,684.204 1550.18,684.204 1550.73,684.204 1551.29,684.204 1551.85,684.204 1552.41,684.204 1552.97,684.204 1553.53,684.204 1554.09,684.204 1554.65,684.204 1555.21,684.204 1555.77,684.204 1556.33,684.204 1556.89,684.204 1557.45,684.204 1558,684.204 1558.56,684.204 1559.12,684.204 1559.68,684.204 1560.24,684.204 1560.8,684.204 1561.36,684.204 1561.92,684.204 1562.48,684.204 1563.04,684.204 1563.6,684.204 1564.16,684.204 1564.72,684.204 1565.28,684.204 1565.83,684.204 1566.39,684.204 1566.95,684.204 1567.51,684.204 1568.07,684.204 1568.63,684.204 1569.19,684.204 1569.75,684.204 1570.31,684.204 1570.87,684.204 1571.43,684.204 1571.99,684.204 1572.55,684.204 1573.1,684.204 1573.66,684.204 1574.22,684.204 1574.78,684.204 1575.34,684.204 1575.9,684.204 1576.46,684.204 1577.02,684.204 1577.58,684.204 1578.14,684.204 1578.7,684.204 1579.26,684.204 1579.82,684.204 1580.37,684.204 1580.93,684.204 1581.49,684.204 1582.05,684.204 1582.61,684.204 1583.17,684.204 1583.73,684.204 1584.29,684.204 1584.85,684.204 1585.41,684.204 1585.97,684.204 1586.53,684.204 1587.09,684.204 1587.65,684.204 1588.2,684.204 1588.76,684.204 1589.32,684.204 1589.88,684.204 1590.44,684.204 1591,684.204 1591.56,684.204 1592.12,684.204 1592.68,684.204 1593.24,684.204 1593.8,684.204 1594.36,684.204 1594.92,684.204 1595.47,684.204 1596.03,684.204 1596.59,684.204 1597.15,684.204 1597.71,684.204 1598.27,684.204 1598.83,684.204 1599.39,684.204 1599.95,684.204 1600.51,684.204 1601.07,684.204 1601.63,684.204 1602.19,684.204 1602.74,684.204 1603.3,684.204 1603.86,684.204 1604.42,684.204 1604.98,684.204 1605.54,684.204 1606.1,684.204 1606.66,684.204 1607.22,684.204 1607.78,684.204 1608.34,684.204 1608.9,684.204 1609.46,684.204 1610.02,684.204 1610.57,684.204 1611.13,684.204 1611.69,684.204 1612.25,684.204 1612.81,684.204 1613.37,684.204 1613.93,684.204 1614.49,684.204 1615.05,684.204 1615.61,684.204 1616.17,684.204 1616.73,684.204 1617.29,684.204 1617.84,684.204 1618.4,684.204 1618.96,684.204 1619.52,684.204 1620.08,684.204 1620.64,684.204 1621.2,684.204 1621.76,684.204 1622.32,684.204 1622.88,684.204 1623.44,684.204 1624,684.204 1624.56,684.204 1625.11,684.204 1625.67,684.204 1626.23,684.204 1626.79,684.204 1627.35,684.204 1627.91,684.204 1628.47,684.204 1629.03,684.204 1629.59,684.204 1630.15,684.204 1630.71,684.204 1631.27,684.204 1631.83,684.204 1632.39,684.204 1632.94,684.204 1633.5,684.204 1634.06,684.204 1634.62,684.204 1635.18,684.204 1635.74,684.204 1636.3,684.204 1636.86,684.204 1637.42,684.204 1637.98,684.204 1638.54,684.204 1639.1,684.204 1639.66,684.204 1640.21,684.204 1640.77,684.204 1641.33,684.204 1641.89,684.204 1642.45,684.204 1643.01,684.204 1643.57,684.204 1644.13,684.204 1644.69,684.204 1645.25,684.204 1645.81,684.204 1646.37,684.204 1646.93,684.204 1647.48,684.204 1648.04,684.204 1648.6,684.204 1649.16,684.204 1649.72,684.204 1650.28,684.204 1650.84,684.204 1651.4,684.204 1651.96,684.204 1652.52,684.204 1653.08,684.204 1653.64,684.204 1654.2,684.204 1654.76,684.204 1655.31,684.204 1655.87,684.204 1656.43,684.204 1656.99,684.204 1657.55,684.204 1658.11,684.204 1658.67,684.204 1659.23,684.204 1659.79,684.204 1660.35,684.204 1660.91,684.204 1661.47,684.204 1662.03,684.204 1662.58,684.204 1663.14,684.204 1663.7,684.204 1664.26,684.204 1664.82,684.204 1665.38,684.204 1665.94,684.204 1666.5,684.204 1667.06,684.204 1667.62,684.204 1668.18,684.204 1668.74,684.204 1669.3,684.204 1669.85,684.204 1670.41,684.204 1670.97,684.204 1671.53,684.204 1672.09,684.204 1672.65,684.204 1673.21,684.204 1673.77,684.204 1674.33,684.204 1674.89,684.204 1675.45,684.204 1676.01,684.204 1676.57,684.204 1677.13,684.204 1677.68,684.204 1678.24,684.204 1678.8,684.204 1679.36,684.204 1679.92,684.204 1680.48,684.204 1681.04,684.204 1681.6,684.204 1682.16,684.204 1682.72,684.204 1683.28,684.204 1683.84,684.204 1684.4,684.204 1684.95,684.204 1685.51,684.204 1686.07,684.204 1686.63,684.204 1687.19,684.204 1687.75,684.204 1688.31,684.204 1688.87,684.204 1689.43,684.204 1689.99,684.204 1690.55,684.204 1691.11,684.204 1691.67,684.204 1692.23,684.204 1692.78,684.204 1693.34,684.204 1693.9,684.204 1694.46,684.204 1695.02,684.204 1695.58,684.204 1696.14,684.204 1696.7,684.204 1697.26,684.204 1697.82,684.204 1698.38,684.204 1698.94,684.204 1699.5,684.204 1700.05,684.204 1700.61,684.204 1701.17,684.204 1701.73,684.204 1702.29,684.204 1702.85,684.204 1703.41,684.204 1703.97,684.204 1704.53,684.204 1705.09,684.204 1705.65,684.204 1706.21,684.204 1706.77,684.204 1707.32,684.204 1707.88,684.204 1708.44,684.204 1709,684.204 1709.56,684.204 1710.12,684.204 1710.68,684.204 1711.24,684.204 1711.8,684.204 1712.36,684.204 1712.92,684.204 1713.48,684.204 1714.04,684.204 1714.6,684.204 1715.15,684.204 1715.71,684.204 1716.27,684.204 1716.83,684.204 1717.39,684.204 1717.95,684.204 1718.51,684.204 1719.07,684.204 1719.63,684.204 1720.19,684.204 1720.75,684.204 1721.31,684.204 1721.87,684.204 1722.42,684.204 1722.98,684.204 1723.54,684.204 1724.1,684.204 1724.66,684.204 1725.22,684.204 1725.78,684.204 1726.34,684.204 1726.9,684.204 1727.46,684.204 1728.02,684.204 1728.58,684.204 1729.14,684.204 1729.69,684.204 1730.25,684.204 1730.81,684.204 1731.37,684.204 1731.93,684.204 1732.49,684.204 1733.05,684.204 1733.61,684.204 1734.17,684.204 1734.73,684.204 1735.29,684.204 1735.85,684.204 1736.41,684.204 1736.97,684.204 1737.52,684.204 1738.08,684.204 1738.64,684.204 1739.2,684.204 1739.76,684.204 1740.32,684.204 1740.88,684.204 1741.44,684.204 1742,684.204 1742.56,684.204 1743.12,684.204 1743.68,684.204 1744.24,684.204 1744.79,684.204 1745.35,684.204 1745.91,684.204 1746.47,684.204 1747.03,684.204 1747.59,684.204 1748.15,684.204 1748.71,684.204 1749.27,684.204 1749.83,684.204 1750.39,684.204 1750.95,684.204 1751.51,684.204 1752.06,684.204 1752.62,684.204 1753.18,684.204 1753.74,684.204 1754.3,684.204 1754.86,684.204 1755.42,684.204 1755.98,684.204 1756.54,684.204 1757.1,684.204 1757.66,684.204 1758.22,684.204 1758.78,684.204 1759.34,684.204 1759.89,684.204 1760.45,684.204 1761.01,684.204 1761.57,684.204 1762.13,684.204 1762.69,684.204 1763.25,684.204 1763.81,684.204 1764.37,684.204 1764.93,684.204 1765.49,684.204 1766.05,684.204 1766.61,684.204 1767.16,684.204 1767.72,684.204 1768.28,684.204 1768.84,684.204 1769.4,684.204 1769.96,684.204 1770.52,684.204 1771.08,684.204 1771.64,684.204 1772.2,684.204 1772.76,684.204 1773.32,684.204 1773.88,684.204 1774.43,684.204 1774.99,684.204 1775.55,684.204 1776.11,684.204 1776.67,684.204 1777.23,684.204 1777.79,684.204 1778.35,684.204 1778.91,684.204 1779.47,684.204 1780.03,684.204 1780.59,684.204 1781.15,684.204 1781.71,684.204 1782.26,684.204 1782.82,684.204 1783.38,684.204 1783.94,684.204 1784.5,684.204 1785.06,684.204 1785.62,684.204 1786.18,684.204 1786.74,684.204 1787.3,684.204 1787.86,684.204 1788.42,684.204 1788.98,684.204 1789.53,684.204 1790.09,684.204 1790.65,684.204 1791.21,684.204 1791.77,684.204 1792.33,684.204 1792.89,684.204 1793.45,684.204 1794.01,684.204 1794.57,684.204 1795.13,684.204 1795.69,684.204 1796.25,684.204 1796.8,684.204 1797.36,684.204 1797.92,684.204 1798.48,684.204 1799.04,684.204 1799.6,684.204 1800.16,684.204 1800.72,684.204 1801.28,684.204 1801.84,684.204 1802.4,684.204 1802.96,684.204 1803.52,684.204 1804.08,684.204 1804.63,684.204 1805.19,684.204 1805.75,684.204 1806.31,684.204 1806.87,684.204 1807.43,684.204 1807.99,684.204 1808.55,684.204 1809.11,684.204 1809.67,684.204 1810.23,684.204 1810.79,684.204 1811.35,684.204 1811.9,684.204 1812.46,684.204 1813.02,684.204 1813.58,684.204 1814.14,684.204 1814.7,684.204 1815.26,684.204 1815.82,684.204 1816.38,684.204 1816.94,684.204 1817.5,684.204 1818.06,684.204 1818.62,684.204 1819.18,684.204 1819.73,684.204 1820.29,684.204 1820.85,684.204 1821.41,684.204 1821.97,684.204 1822.53,684.204 1823.09,684.204 1823.65,684.204 1824.21,684.204 1824.77,684.204 1825.33,684.204 1825.89,684.204 1826.45,684.204 1827,684.204 1827.56,684.204 1828.12,684.204 1828.68,684.204 1829.24,684.204 1829.8,684.204 1830.36,684.204 1830.92,684.204 1831.48,684.204 1832.04,684.204 1832.6,684.204 1833.16,684.204 1833.72,684.204 1834.27,684.204 1834.83,684.204 1835.39,684.204 1835.95,684.204 1836.51,684.204 1837.07,684.204 1837.63,684.204 1838.19,684.204 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906472","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $target_walkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.029393122325742 ± 0.02029644474985134\nProjected Energy: -4.018203681914569 ± (0.005083219020449725, 0.005391935308852958)\nExact Energy: -4.021502406906472\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from solve as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b];\n    shift=:shift,\n    norm=:norm,\n    time_step=determine_constant_time_step(df),\n    skip=0\n)\ngrowth_witness(sim::PMCSimulation, [b]; kwargs...)\n\nCalculate the growth witness directly from the result (DataFrame or PMCSimulation) of solveing a ProjectorMonteCarloProblem. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0)\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n)\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\ngrowth_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively.  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m) \n\nwhere dτ is the time_step\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator.  Error propagation is done with MonteCarloMeasurements. Propagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a PMCSimulation or DataFrame returned by solve. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\ngrowth_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df or PMCSimulation sim. repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-Tuple{AbstractVector, AbstractVector, AbstractVector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\nmixed_estimator(sim::PMCSimulation, h; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up).  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.  Additional keyword arguments are passed on to ratio_of_means.\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2), where dτ is the time_step, and potentially increased confidence intervals compared to the unweighted ratio.  Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\nmixed_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(df::DataFrame; skip=0, hproj=:hproj, vproj=:vproj, kwargs...)\nprojected_energy(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy(...) to set these up in ProjectorMonteCarloProblem). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n)\nrayleigh_replica_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin. Additional keyword arguments are passed on to ratio_of_means.\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\nrayleigh_replica_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...)\nshift_estimator(sim::PMCSimulation; kwargs...)\n-> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_lin, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_exp, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\nreplica_fidelity(sim::PMCSimulation; kwargs...)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the PMCSimulation or DataFrame returned by solve, using replicas _1 and _2. Calls ratio_of_means to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\nvariational_energy_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame and PMCSimulation versions can extract the relevant information from the result of solve. Set up the ProjectorMonteCarloProblem with the keyword argument replica_strategy = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.determine_constant_time_step-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.determine_constant_time_step","text":"determine_constant_time_step(df) -> time_step\n\nGiven a DataFrame df, determine the time step that was used to compute it. Throw an error if time step is not constant.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by ProjectorMonteCarloProblem as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallowed_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">0.462462</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">1.2563e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">1.0539e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">8.807e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">1.463e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">2.645e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">8.426e-6</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0-1.41421im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im      0.0-2.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+1.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im\n 0.0-1.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999991\n -0.9999999999999991\n -0.9999999999999982\n -0.9999999999999973\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000027\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n       0.0+0.0im       -5.55112e-17-0.353553im         0.534676-0.217841im      2.77556e-17-0.204124im             0.0+0.0im           0.534676+0.217841im      2.77556e-17+0.204124im             0.0+0.0im       -5.55112e-17+0.353553im           0.0+0.0im\n       0.0+0.0im        5.55112e-17-0.5im             -0.378073+0.154037im              0.0-0.288675im             0.0+0.0im          -0.378073-0.154037im     -5.55112e-17+0.288675im             0.0+0.0im                0.0+0.5im                0.0+0.0im\n       0.0+0.612372im           0.0+0.0im          -5.55112e-17+0.0im           -1.2326e-32+2.77556e-17im          0.0+0.353553im           0.0+0.0im                   0.0+2.77556e-17im          0.0+0.353553im           0.0+0.0im                0.0+0.612372im\n       0.0+0.0im                0.0+0.353553im      5.55112e-17+6.93889e-17im           0.0-0.612372im             0.0+0.0im        5.55112e-17-1.38778e-16im           0.0+0.612372im             0.0+0.0im                0.0-0.353553im           0.0+0.0im\n       0.0-0.353553im    1.2326e-32+1.11022e-16im   5.55112e-17-2.77556e-17im  -2.46519e-32-2.77556e-17im          0.0+0.612372im  -1.11022e-16-2.77556e-17im   4.93038e-32-2.77556e-17im          0.0+0.612372im   -1.2326e-32+8.32667e-17im        0.0-0.353553im\n       0.0+0.0im           0.353553+0.0im                   0.0+0.0im              0.612372+0.0im                  0.0+0.0im                0.0+0.0im              0.612372+0.0im                  0.0+0.0im           0.353553+0.0im                0.0+0.0im\n -0.353553+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.612372+0.0im                0.0+0.0im                   0.0+0.0im             0.612372+0.0im                0.0+0.0im           0.353553+0.0im\n       0.0+0.0im               -0.5+7.02973e-17im     -0.154037-0.378073im         0.288675-1.95105e-16im          0.0+0.0im          -0.154037+0.378073im         0.288675+2.29062e-16im          0.0+0.0im               -0.5-7.48398e-17im        0.0+0.0im\n       0.0+0.0im          -0.353553+8.84171e-17im      0.217841+0.534676im         0.204124-1.1389e-16im   8.32667e-17+0.0im           0.217841-0.534676im         0.204124+2.4427e-16im   8.32667e-17+0.0im          -0.353553-8.31718e-17im        0.0+0.0im\n  0.612372+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.353553-0.0im                0.0+0.0im                   0.0+0.0im             0.353553+0.0im                0.0+0.0im          -0.612372-0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -1.6810327175633306e-17\n  3.469966302164114e-17\n  0.15915494309189535\n  0.1591549430918954\n  0.1591549430918954","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(fs\"|0 0 4 0 0⟩\"; u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 1 0 0 3⟩\"\n fs\"|1 3 0 0 0⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843  0.0       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8        0.0       0.282843  0.565685  0.0       0.0       0.0       0.0\n  0.0       0.8       0.4       0.581966  0.4       0.0       0.4        0.282843  0.565685  0.0       0.69282   0.69282   0.0       0.0\n  0.0       0.4       0.8       0.4       2.81803   0.4       0.0        0.0       0.565685  0.282843  0.69282   0.0       0.69282   0.0\n  0.0       0.8       0.4       0.0       0.4       0.581966  0.4        0.282843  0.565685  0.0       0.0       0.0       0.69282   0.69282\n  0.0       0.4       0.8       0.4       0.0       0.4       2.81803    0.0       0.565685  0.282843  0.0       0.69282   0.0       0.69282\n  0.0       0.565685  0.0       0.282843  0.0       0.282843  0.0       -0.472136  0.8       0.0       0.489898  0.0       0.0       0.489898\n  0.0       0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n  0.0       0.0       0.565685  0.0       0.282843  0.0       0.282843   0.0       0.8       8.47214   0.0       0.489898  0.489898  0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.0       0.0        0.489898  0.489898  0.0       1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.69282    0.0       0.489898  0.489898  0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.69282   0.0        0.0       0.489898  0.489898  0.0       0.0       6.03607   0.0\n  0.0       0.0       0.0       0.0       0.0       0.69282   0.69282    0.489898  0.489898  0.0       0.0       0.0       0.0       1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.9798639983216155\n -3.363124291613371\n -0.7590191922770746\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781396\n  1.530592997097333\n  1.5835732611867464\n  3.072870330325867\n  3.125672653951849\n  4.862107221562182\n  6.26069485038059\n  6.402671211183119\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348     0.175378     0.0135766   -2.81719e-15  -0.0221221  -0.0697193   1.3739e-15    0.0314466   -2.35922e-16  -0.0360987   -0.0161557  -5.55112e-17   0.00625248  -0.0058099\n  0.177701     0.932229     0.105473     3.01009e-14   0.225254   -0.132826    9.71445e-17  -0.00292026  -2.09555e-15  -0.0861158   -0.0907789  -4.996e-16     0.0591715   -0.0264275\n  0.0768085   -0.0622307    0.0129069   -6.06251e-14  -0.447424   -0.63969     2.05322e-14   0.383444    -6.54338e-15  -0.431051    -0.181167   -6.10623e-16   0.0599783   -0.106852\n -0.0214153   -0.175119    -0.20169      0.616673      0.522017   -0.296818   -0.31234      -0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797    0.0693699     0.0495446   0.416847    0.33773       0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153   -0.175119    -0.20169     -0.616673      0.522017   -0.296818    0.31234      -0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797   -0.0693699     0.0495446   0.416847   -0.33773       0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.0138439   -0.165902     0.922758     1.00753e-14   0.1111     -0.172508   -1.30521e-14  -0.207974     2.66454e-15   0.0848902   -0.149153   -8.32667e-16   0.0712921   -0.0301968\n -0.00234782   0.00840544  -0.098969    -9.6867e-15   -0.0847116   0.082999    1.51129e-14   0.274424     3.60822e-15   0.575786    -0.61385    -2.72005e-15   0.353775    -0.259338\n -0.00237613   0.00294196   0.00143189   5.56152e-15   0.0427486   0.0110863  -3.72619e-15  -0.0663108    9.50628e-16   0.00167015   0.0832916   2.91434e-15  -0.448519    -0.8863\n  0.00363555   0.0455298   -0.133824    -0.332825     -0.290831   -0.057199   -0.527627     -0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478   0.0150664    0.0206752   -0.0642658    -0.0638689  -0.0250518   0.0999631    -0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499\n  0.00195478   0.0150664    0.0206752    0.0642658    -0.0638689  -0.0250518  -0.0999631    -0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555   0.0455298   -0.133824     0.332825     -0.290831   -0.057199    0.527627     -0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133606\n -0.7590191922770747","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321633\n -3.36312429161336\n -0.7590191922770888\n  0.13584182219622498\n  0.15789998694608087\n  0.8767114411781431\n  1.5305929970973366\n  1.5835732611867472\n  3.0728703303258618\n  3.12567265395184\n  4.862107221562174\n  6.260694850380592\n  6.4026712111831126\n  9.093371706203955","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321621\n -3.3631242916133637\n -0.759019192277076\n  0.1578999869460802\n  0.8767114411781437\n  1.5835732611867417\n  3.125672653951844\n  4.862107221562179\n  6.402671211183117\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.0066861389450877905\n 0.033070399772041625\n 3.9204869225657406\n 0.03307039977204162\n 0.006686138945087839","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html#Model-Hamiltonians","page":"Hamiltonians","title":"Model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardReal1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardReal1D2C","text":"BoseHubbardReal1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0)\n\nImplements a two-component one-dimensional Bose Hubbard chain in real space.\n\nhatH = hatH_a + hatH_b + Vsum_i n_a_in_b_i\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nua: the on-site interaction parameter parameter for Hamiltonian a.\nub: the on-site interaction parameter parameter for Hamiltonian b.\nta: the hopping strength for Hamiltonian a.\ntb: the hopping strength for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nSee also\n\nHubbardReal1D\nBoseHubbardMom1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0, boundary_condition=:periodic)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space. This Hamiltonian can be either real or complex, depending on the choice of boundary_condition.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) +\nv sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\nboundary_condition The following values are supported:\n:periodic: usual period boundary condition realising a ring geometry.\n:hard_wall: hopping over the boundary is not allowed.\n:twisted: like :periodic but hopping over the boundary incurs an additional factor of -1.\nθ <: Number: like :periodic and :twisted but hopping over the boundary incurs a factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left. With this choice the Hamiltonian will have a complex eltype whereas otherwise the eltype is determined by the type of the parameters t, u, and v.\n\nSee also HubbardRealSpace.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2t cos(k)\ncontinuum_dispersion: ϵ_k = tk^2\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardMom1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardMom1D2C","text":"BoseHubbardMom1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0, kwargs...)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with a two-component Bose gas.\n\nhatH = hatH_a + hatH_b + fracVMsum_kpqr b^_r a^_q b_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address.\nua: the u parameter for Hamiltonian a.\nub: the u parameter for Hamiltonian b.\nta: the t parameter for Hamiltonian a.\ntb: the t parameter for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nFurther keyword arguments are passed on to the constructor of HubbardMom1D.\n\nSee also\n\nBoseFS2C\nBoseHubbardReal1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2t cos(k)\ncontinuum_dispersion: ϵ_k = tk^2\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl\n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl\n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between basis states of any noninteracting energy level, leading to many more offdiagonals and fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The   allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make   the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the   interactions. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without   comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, see four_oscillator_integral_general, with the additional restriction that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to   make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi\n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix representation of this Hamiltonian for a single particle is completely dense in the even-parity subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty   for a 1D trap or contain values greater than 1.0. The maximum index   in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,   including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if   only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of\nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other","page":"Hamiltonians","title":"Other","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of ProjectorMonteCarloProblem() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(k)\n\nDispersion relation for HubbardMom1D. Returns -2cos(k).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(k)\n\nDispersion relation for HubbardMom1D. Returns k^2.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(fs\"|0 2 1⟩\"; u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Observables are AbstractHamiltonians that represent a physical observable. Their ground state expectation values can be sampled by passing them into AllOverlaps.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"ParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator([address]) <: AbstractHamiltonian\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. Passing an address is optional.\n\njulia> h = FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3); bsr = BasisSetRepresentation(h);\n\njulia> gs = DVec(zip(bsr.basis, eigen(Matrix(bsr)).vectors[:,1])); # ground state\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractHamiltonian{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int,c=:cross) <: AbstractHamiltonian{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d of a two component system in a momentum-space Fock-state basis. It returns a Complex value.\n\nCorrelation across two components:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s b^_p  b_q a_r δ_s+pq+r\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\nc: possible instructions: :cross: default instruction, computing correlation between particles across two components; :first: computing correlation between particles within the first component; :second: computing correlation between particles within the second component. These are the only defined instructions, using anything else will produce errors.\n\nTo use on a one-component system\n\nFor a system with only one component, e.g. with BoseFS, the second argument c is irrelevant and can be any of the above instructions, one could simply skip this argument and let it be the default value.\n\nSee also\n\nBoseHubbardMom1D2C\nBoseFS2C\nG2RealCorrelator\nG2RealSpace\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into ProjectorMonteCarloProblem with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractHamiltonian, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    hatC_textstring(d) = frac1M sum_j^M delta n_j (e^i pi sum_j leq k  j + d delta n_k) delta n_j+d\n\nHere, delta hatn_j = hatn_j - barn is the boson number deviation from the mean filling number and barn = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractHamiltonian, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SingleParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.SingleParticleExcitation","text":"SingleParticleExcitation(i, j) <: AbstractHamiltonian\n\nRepresent {i,j} element of the single-particle reduced density matrix:\n\nhatρ^(1)_ij = hat a^_i hat a_j\n\nwhere i and j are the mode\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nTwoParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TwoParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.TwoParticleExcitation","text":"TwoParticleExcitation(i, j, k, l) <: AbstractHamiltonian\n\nRepresent {ij, kl} element of the two-particle reduced density matrix:\n\nhatρ^(2)_ij kl =  hat a^_i hat a^_j hat a_l hat a_k \n\nwhere i, j, k, and l are the mode\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator hatp.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(add => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(add => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(add => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Hamiltonians-interface","page":"Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. The most general form of a model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with ProjectorMonteCarloProblem). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallowed_address_type(h::AbstractHamiltonian): defaults to typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.starting_address","page":"Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, add, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address add and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallowed_address_type","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, add)\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address add of the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRep.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.allowed_address_type","page":"Hamiltonians","title":"Rimu.Interfaces.allowed_address_type","text":"allowed_address_type(h::AbstractHamiltonian)\n\nReturn the type of addresses that can be used with Hamiltonian h.\n\nPart of the AbstractHamiltonian interface.\n\nDefaults to typeof(starting_address(h)). Overload this function if the Hamiltonian can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"hamiltonians.html#Base.adjoint","page":"Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractHamiltonian)\n\nRepresent the adjoint of an AbstractHamiltonian. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.dot","page":"Hamiltonians","title":"LinearAlgebra.dot","text":"dot(map::OccupiedModeMap, vec::AbstractVector)\ndot(map1::OccupiedModeMap, map2::OccupiedModeMap)\n\nDot product extracting mode occupation numbers from an OccupiedModeMap similar to onr.\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> dot(mb, 1:7)\n27\n\njulia> mb⋅(1:7) == onr(b)⋅(1:7)\ntrue\n\nSee also SingleComponentFockAddress.\n\n\n\n\n\ndot(w, op::AbstractHamiltonian, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\ndot(y::PDVec, A::AbstractHamiltonian, x::PDVec[, w::PDWorkingMemory])\n\nPerform y ⋅ A ⋅ x. The working memory w is required to facilitate threaded/distributed operations with non-diagonal A. If needed and not passed a new instance will be allocated. A can be replaced with a tuple of operators.\n\nSee PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractHamiltonian, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allowed_address_type.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here for HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Harmonic-Oscillator","page":"Hamiltonians","title":"Harmonic Oscillator","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim}; \n    target_energy = nothing, \n    max_energy = nothing, \n    max_blocks = nothing, \n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns \n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRep\nindices: tuple of mode indices that allow recreation of the generating address    addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when    the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating    tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved    after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.    Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds  addr are determined by parity. In this case the blocks are not generated; t_basis  will be zero, and block_size will be an estimate. Pass the seed addresses to  BasisSetRep with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis  indices n_xn_yldots. These indices are bounded by S which is a  tuple of the maximum number of states in each dimension. By default the  groundstate in each dimension is indexed by 0, but this can be changed  by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions,\n\n    mathcalI(ijkl) = int_-infty^infty dx \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function, and is non-zero unless i+j+k+l is odd. See e.g. Titchmarsh (1948). This is a generalisation of the closed form in Papenbrock (2002), which is is the special case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin,\n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state corresponds to a D-tuple of harmonic oscillator indices mathbfn_i. S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of phi_i(0) to speed-up the calculation. The values can be calculated with log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"RMPI.html#Module-RMPI","page":"RMPI","title":"Module RMPI","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI","category":"page"},{"location":"RMPI.html#Rimu.RMPI","page":"RMPI","title":"Rimu.RMPI","text":"Module for providing MPI functionality for Rimu. This module is unexported. To use it, run\n\nusing Rimu.RMPI\n\n\n\n\n\n","category":"module"},{"location":"RMPI.html#MPIData","page":"RMPI","title":"MPIData","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIData","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIData","page":"RMPI","title":"Rimu.RMPI.MPIData","text":"MPIData(data; kwargs...)\n\nWrapper used for signaling that this data is part of a distributed data structure and communication should happen with MPI. MPIData can generally be used where an AbstractDVec would be used otherwise. Unlike AbstractDVecs, MPIData does not support indexing, or iteration over keys, values, and pairs.\n\nKeyword arguments:\n\nsetup = mpi_point_to_point - controls the communication stratgy\nmpi_one_sided uses one-sided communication with remote memory access (RMA), sets MPIOneSided strategy.\nmpi_point_to_point uses MPIPointToPoint strategy.\nmpi_all_to_all uses MPIAllToAll strategy.\nmpi_no_exchange sets MPINoWalkerExchange strategy. Experimental. Use with caution!\ncomm = mpi_comm()\nroot = mpi_root\nThe rest of the keyword arguments are passed to setup.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Setup-functions","page":"RMPI","title":"Setup functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"The following distribute strategies are available. The functions are unexported.","category":"page"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.mpi_point_to_point\nRimu.RMPI.mpi_one_sided\nRimu.RMPI.mpi_all_to_all\nRimu.RMPI.mpi_no_exchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_point_to_point","page":"RMPI","title":"Rimu.RMPI.mpi_point_to_point","text":"mpi_point_to_point(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to point-to-point.\n\nSets up the MPIData structure with MPIPointToPoint strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_one_sided","page":"RMPI","title":"Rimu.RMPI.mpi_one_sided","text":"mpi_one_sided(data, comm = mpi_comm(), root = mpi_root; capacity)\n\nDeclare data as mpi-distributed and set communication strategy to one-sided with remote memory access (RMA). capacity sets the capacity of the RMA windows.\n\nSets up the MPIData structure with MPIOneSided strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_all_to_all","page":"RMPI","title":"Rimu.RMPI.mpi_all_to_all","text":"mpi_all_to_all(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to all-to-all.\n\nSets up the MPIData structure with MPIAllToAll strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_no_exchange","page":"RMPI","title":"Rimu.RMPI.mpi_no_exchange","text":"mpi_no_exchange(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to MPINoWalkerExchange. Sets up the MPIData structure with MPINoWalkerExchange strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Strategies","page":"RMPI","title":"Strategies","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIPointToPoint\nRimu.RMPI.MPIOneSided\nRimu.RMPI.MPIAllToAll\nRimu.RMPI.MPINoWalkerExchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIPointToPoint","page":"RMPI","title":"Rimu.RMPI.MPIPointToPoint","text":"MPIPointToPoint{N,A}\n\nPoint-to-point communication strategy. Uses circular communication using MPI.Send and MPI.Recv!.\n\nConstructor\n\nMPIPointToPoint(::Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIOneSided","page":"RMPI","title":"Rimu.RMPI.MPIOneSided","text":"MPIOneSided(nprocs, myrank, comm, ::Type{T}, capacity)\n\nCommunication buffer for use with MPI one-sided communication (remote memory access). Up to capacity elements of type T can be exchanged between MPI ranks via put. It is important that isbitstype(T) == true. Objects of type MPIOneSided have to be freed manually with a (blocking) call to free().\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIAllToAll","page":"RMPI","title":"Rimu.RMPI.MPIAllToAll","text":" MPIAllToAll\n\nAll-to-all communication strategy. The communication works in two steps: first MPI.Alltoall! is used to communicate the number of walkers each rank wants to send to other ranks, then MPI.Alltoallv! is used to send the walkers around.\n\nConstructor\n\nMPIAllToAll(Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPINoWalkerExchange","page":"RMPI","title":"Rimu.RMPI.MPINoWalkerExchange","text":"MPINoWalkerExchange(nprocs, my_rank, comm)\n\nStrategy for not exchanging walkers between ranks. Consequently there will be no cross-rank annihilations.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#MPI-convenience-functions","page":"RMPI","title":"MPI convenience functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Modules = [Rimu.RMPI]\nPages = [\"helpers.jl\"]\nPrivate = true\nPublic = true","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_root","page":"RMPI","title":"Rimu.RMPI.mpi_root","text":"Default MPI root for RMPI.\n\n\n\n\n\n","category":"constant"},{"location":"RMPI.html#Rimu.DictVectors.mpi_comm-Tuple{}","page":"RMPI","title":"Rimu.DictVectors.mpi_comm","text":"Default MPI communicator for RMPI.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.DictVectors.mpi_rank","page":"RMPI","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.DictVectors.mpi_size","page":"RMPI","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.is_mpi_root","page":"RMPI","title":"Rimu.RMPI.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_allprintln-Tuple","page":"RMPI","title":"Rimu.RMPI.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_barrier","page":"RMPI","title":"Rimu.RMPI.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_combine_walkers!-Tuple{Rimu.RMPI.MPIData, AbstractDVec}","page":"RMPI","title":"Rimu.RMPI.mpi_combine_walkers!","text":"mpi_combine_walkers!(target, source, [strategy])\n\nDistribute the entries of source to the target data structure such that all entries in the target are on the process with the correct mpi rank as controlled by targetrank(). MPI syncronizing.\n\nNote: the storage of the source is communicated rather than the source itself.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_seed!","page":"RMPI","title":"Rimu.RMPI.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.next_mpiID","page":"RMPI","title":"Rimu.RMPI.next_mpiID","text":"next_mpiID()\n\nProduce a new ID number for MPI distributed objects. Uses an internal counter.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.targetrank-Tuple{Union{Integer, AbstractFockAddress}, Any}","page":"RMPI","title":"Rimu.RMPI.targetrank","text":"targetrank(key, np)\n\nCompute the rank where the key belongs.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.@mpi_root-Tuple","page":"RMPI","title":"Rimu.RMPI.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"RMPI.html#Index","page":"RMPI","title":"Index","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Pages   = [\"RMPI.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nnnzs = 0: The number of non-zero elements in the basis set representation. Setting a   non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^6, nnzs, cutoff, filter, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 3 and 9 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int64} with 9 stored entries:\n  0.0  -1.0  -1.0\n -1.0   0.0  -1.0\n -1.0  -1.0   0.0\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 2 and 4 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int64} with 4 stored entries:\n  0.0  -1.0\n -1.0   0.0\n\njulia> using LinearAlgebra; round.(eigvals(Matrix(bsr)); digits = 4) # eigenvalues\n3-element Vector{Float64}:\n -2.0\n  1.0\n  1.0\n\njulia> ev = eigvecs(Matrix(bsr))[:,1]; ev = ev .* sign(ev[1]) # ground state eigenvector\n3-element Vector{Float64}:\n 0.5773502691896257\n 0.5773502691896255\n 0.5773502691896257\n\njulia> dv = DVec(zip(bsr.basis, ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => 0.57735\n  fs\"|0 1 0⟩\" => 0.57735\n  fs\"|1 0 0⟩\" => 0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. A maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nSetting sort to true will sort the basis. Any additional keyword arguments are passed on to Base.sort!.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"randomnumbers.html#Random-numbers-in-Rimu","page":"Random numbers","title":"Random numbers in Rimu","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"Rimu uses Julia's built-in random number generator, which currently defaults to Xoshiro256++.","category":"page"},{"location":"randomnumbers.html#Reproducibility","page":"Random numbers","title":"Reproducibility","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"If you want FCIQMC runs to be reproducible, make sure to seed the RNG with Random.seed!.","category":"page"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"MPI-distributed runs can also be made reproducible by seeding the RNG with Rimu.RMPI.mpi_seed!.","category":"page"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://joachimbrand.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for  parsing by Literate. The process of generating  documentation is automated in the docs/make.jl file and assumes that the following line is  at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example, ","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, value = hopnextneighbour(add, chosen, boundary_condition)\n\nCompute the new address of a hopping event for the Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes multiplied by a term consistent with boundary condition as the value.  The following boundary conditions are supported:\n\n:periodic: hopping over the boundary gives does not change the value.\n:twisted: hopping over the boundary flips the sign of the value.\n:hard_wall: hopping over the boundary gives a value of zero.\nθ <: Number: hopping over the boundary gives a value multiplied by exp(iθ) or exp(iθ) depending on the direction of hopping.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :twisted)\n(BoseFS{2,3}(2, 0, 0), -1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :hard_wall)\n(BoseFS{2,3}(2, 0, 0), 0.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, π/4)\n(BoseFS{2,3}(2, 0, 0), 1.0000000000000002 + 1.0im)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS2C","text":"BoseFS2C{NA,NB,M,AA,AB} <: AbstractFockAddress\nBoseFS2C(onr_a, onr_b)\n\nAddress type that constructed with two BoseFS{N,M,S}. It represents a Fock state with two components, e.g. two different species of bosons with particle number NA from species S and particle number NB from species B. The number of modes M is expected to be the same for both components.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, Tuple{Vararg{Int64, var\"#s61\"}} where var\"#s61\", Tuple{Vararg{Int64, var\"#s5\"}} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.12.1. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(num_replicas=2; operator=nothing, transform=nothing, vecnorm=true) <: ReplicaStrategy{num_replicas}\n\nRun num_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee ProjectorMonteCarloProblem, ReplicaStrategy and AbstractHamiltonian (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to ProjectorMonteCarloProblem then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep time_step constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; target_walkers = 1_000) <: ShiftStrategy\n\nDon't update the shift.  Return when target_walkers is reached.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in ProjectorMonteCarloProblem is advised as the default may not be appropriate.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; target_walkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, time_step) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian, dτ the time_step and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt{S} <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nThis will work with MPIData.\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to ProjectorMonteCarloProblem. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates.\n\nIndexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nSee also ReplicaStrategy, SpectralState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to ProjectorMonteCarloProblem and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_reporting_strategy\nreport!\nreport_after_step!\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to ProjectorMonteCarloProblem or to FCIQMC.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in ProjectorMonteCarloProblem()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, walltime = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the walltime is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with advance!.\n\nSee also SpectralState, SpectralStrategy, ReplicaState, ReplicaStrategy, replica_stats, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several SingleStates representing the ground state and excited states of a single replica.\n\nIndexing the SpectralState state[i] returns the ith SingleState.\n\nSee also SpectralStrategy, ReplicaState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_time_step(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, shift_strategy)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Tuple, Tuple{Vararg{AbstractDVec, N}}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators. This function is overloaded for MPIData. The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main ProjectorMonteCarloProblem loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in solve! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> address = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(address);\n\njulia> df1, state = lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 9)\n\njulia> size(df2)\n(200, 9)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(fs\\\"|1 2 3⟩\\\"; u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; target_walkers=targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.target_walkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from ProjectorMonteCarloProblem, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before ProjectorMonteCarloProblem exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{R}, Tuple{S}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{S, R}, Any, Any}} where {S, R}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 1.6, 1.6, 0.4, 0.4)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an AbstractMatrix of configuration vectors from the state. The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also SingleState, ReplicaState, SpectralState, PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.update_time_step-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_time_step","text":"update_time_step(s<:TimeStepStrategy, time_step, tnorm) -> new_time_step\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#RMPI","page":"API","title":"RMPI","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module RMPI","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by ProjectorMonteCarloProblem when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of ProjectorMonteCarloProblem, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with ProjectorMonteCarloProblem, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI. MPI is a standard for parallel and distributed computing, and it is widely used in high-performance computing. Rimu provides support for MPI to enable parallel computations on multiple nodes.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with 2 MPI ranks with mpirun -n 2 julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu and Rimu.RMPI, which contains MPI-related functionality.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu\nusing Rimu.RMPI","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum, which is located at mode 5 in the momentum grid. We put all 10 particles, all in the zero momentum mode.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(fs\"|0 0 0 0 10 0 0 0 0 0⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for MPI calculations, as they will typically run non-interactively. The reports will be written to disk and can be inspected later. This has the additional benefit of reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The default settings will ensure that only the root MPI rank will write to the file, which is reasonable, and that data is saved in chunks of 1000 time steps. We choose to suppress progress messages with setting io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"For running parallel computations with MPI, it is important that a compatible state vector is used. Here we explicitly set up an MPI-enabled state vector, PDVec, which is automatically MPI-distributed over the available number of MPI ranks. In addition, threading will be used with all threads available to Julia.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10000 walkers and for 10000 time steps. We will also compute the projected energy by passing a ProjectedEnergy object as a post_step_strategy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"problem = ProjectorMonteCarloProblem(H;\n    start_at=initial_vector,\n    reporting_strategy,\n    post_step_strategy=ProjectedEnergy(H, initial_vector),\n    target_walkers=10_000,\n    time_step=1e-4,\n    last_step=10_000\n);","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"simulation = solve(problem);\n\n@mpi_root println(\"Simulation success = \", simulation.success)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Simulation success = true\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Once the calculation is done, the results are available in the arrow file on disk.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In a typical workflow, the simulation results would be loaded from disk and analysed in the REPL or with a separate script. The arrow file can be loaded into a DataFrame with metadata using the load_df function.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. ProjectorMonteCarloProblem, ExactDiagonalizationProblem.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary. Additional MPI-related functionality is provided by the module RMPI.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with ProjectorMonteCarloProblem and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with ProjectorMonteCarloProblem and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and AllToAll when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nSee also PDWorkingMemory.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> scale!(pv, -1); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce!.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded and MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface.jl\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\nIf dv is an MPIData, synchronize its contents among the ranks first.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(md::MPIData)\n\nCompute the walkernumber of the distributed data on every MPI rank with MPI.Allreduce. MPI syncronizing.\n\n\n\n\n\nwalkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.dot_from_right","page":"Dict vectors","title":"Rimu.DictVectors.dot_from_right","text":"dot_from_right(w, op::AbstractHamiltonian, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in ProjectorMonteCarloProblem.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.FirstColumnIterator","page":"Dict vectors","title":"Rimu.DictVectors.FirstColumnIterator","text":"FirstColumnIterator{W,D} <: AbstractVector{D}\n\nIterates segments in the first column of a working memory that belong to a specified rank.\n\nSee PDWorkingMemory, remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured as a two-dimensional array of segments, which themselves are Dicts (see PDVec). The number of rows in this array is equal to the number of segments across all MPI ranks (covering the entire address space), while the number of columns corresponds to the number of segments in the current MPI rank (i.e. column corresponds to the part of the address space that is local to the current rank).\n\nThe purpose of this organisation is to allow spawning in parallel without using locks or atomic operations. The spawning is performed by applying the following sequence of operations:\n\nperform_spawns!: each segment in the PDVec is multiplied by the operator independently, with the results being stored in a column of the working memory.\ncollect_local!: the rows of the working memory are summed to the first column.\nsynchronize_remote!: the segments corresponding to other MPI ranks are distributed and transferred to the first column.\nmove_and_compress!: the results are stochastically compressed and moved to the result PDVec\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports getindex, deposit! and StochasticStyle and acts as a target for spawning. Can be used as a target in a three-way dot-product.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nSum each row in w and store the result in the first column. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.first_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.first_column","text":"first_column(::PDWorkingMemory)\n\nReturn the first column of the working memory. This is where the vectors are collected with collect_local!, synchronize_remote!, copy_to_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the segments in the first column of w on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local MPI rank.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all MPI ranks.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, v::PDVec, ham, boost)\n\nPerform spawns from v through ham to w. boost increases the number of spawns without affecting the expectation value of the process.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the segments in the first column of w that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] w::PDWorkingMemory) -> names, values\n\nSynchronize non-local segments across MPI and add the results to the first column. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nShould return a Tuple of names and a Tuple of values to report.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AllToAll","page":"Dict vectors","title":"Rimu.DictVectors.AllToAll","text":"AllToAll{K,V}(; mpi_comm, n_segments, report) <: Communicator\n\nCommunicator that uses collective communication using MPI.Alltoall[v]!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nn_segments=Threads.nthreads(): the number of segments per rank to use. Should match the PDVec the communicator is used with.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, three implementations are provided, NotDistributed, AllToAll and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\nSee also: PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NestedSegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.NestedSegmentedBuffer","text":"NestedSegmentedBuffer{T}(nrows) <: AbstractMatrix{AbstractVector{T}}\n\nMatrix of vectors stored in a single buffer with collective MPI communication support. The number of rows in the matrix is fixed to nrows.\n\nUsed in the AllToAll communication strategy, where each column corresponds to an MPI rank and each row corresponds to a segment in the PDVec.\n\nSupported operations\n\nappend_collections!: add a column to the matrix.\nappend_empty_column!: add an empty column to the matrix.\nmpi_exchange_alltoall!: each rank sends the i-th column of the matrix to the (i-1)-st rank.\nmpi_exchange_allgather!: each rank sends the 1-st column of the matrix to all ranks.\n\nSee also: SegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint{K,V}(; mpi_comm, report) <: Communicator\n\nMPI Communicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer{T}() <: AbstractVector{AbstractVector{T}}\n\nBehaves like a vector of vectors, but is stored in a single buffer. It can be sent/received over MPI keeping its structure intact. Used in the PointToPoint communication strategy.\n\nSupported operations\n\nreplace_collections!: insert data into the buffers\nmpi_send: send the contents of a buffer to a given rank\nmpi_recv_any!: receive a message sent by mpi_send from any rank, storing the contents in this buffer\n\nSee also: NestedSegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.append_collections!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.append_collections!","text":"append_collections!(buf::NestedSegmentedBuffer, iters)\n\nAdd a column to buf. The length of iters should match buf.nrows.\n\nSee also: NestedSegmentedBuffer, append_empty_column!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.append_empty_column!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer}","page":"Dict vectors","title":"Rimu.DictVectors.append_empty_column!","text":"append_empty_column!(buf::NestedSegmentedBuffer)\n\nLike append_collections!, but adds an empty column.\n\nSee also: NestedSegmentedBuffer, append_collections!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as a (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\nSee also: PDVec, PDWorkingMemory, Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if Communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_comm","page":"Dict vectors","title":"Rimu.DictVectors.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_allgather!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_allgather!","text":"mpi_exchange_allgather!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe first and only column in src will be sent to all ranks. The data from all ranks will be gethered in dst. After this operation, dst will contain the same data on all ranks.\n\nSee also NestedSegmentedBuffer, mpi_exchange_alltoall!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_alltoall!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_alltoall!","text":"mpi_exchange_alltoall!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe n-th column from src will be sent to rank n-1. The data sent from rank r will be stored in the (r+1)-st column of dst.\n\nSee also: NestedSegmentedBuffer, mpi_exchange_allgather!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_rank","page":"Dict vectors","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm::MPI_Comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm::MPI.Comm)\n\nSend the buffer to rank with id dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_size","page":"Dict vectors","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into a SegmentedBuffer.\n\njulia> using Rimu.DictVectors: SegmentedBuffer\n\njulia> buf = SegmentedBuffer{Int}()\n0-element SegmentedBuffer{Int64}\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1,2,3], [4,5]])\n2-element SegmentedBuffer{Int64}:\n [1, 2, 3]\n [4, 5]\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1], [2,3], [4]])\n3-element SegmentedBuffer{Int64}:\n [1]\n [2, 3]\n [4]\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored. If the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"}]
}
