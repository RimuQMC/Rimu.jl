var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Rimu includes an unexported module RMPI, which must be imported to access additional MPI-related functionality.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"using Rimu.RMPI\nmpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"projectormontecarlo.html#Projector-Monte-Carlo-/-FCIQMC","page":"Projector Monte Carlo","title":"Projector Monte Carlo / FCIQMC","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The purpose of Projector Monte Carlo is to stochastically sample the ground state, i.e. the  eigenvector corresponding to the lowest eigenvalue of a quantum Hamiltonian, or more generally,  a very large matrix. Rimu implements a flavor of Projector Monte Carlo called  Full Configuration Interaction Quantum Monte Carlo (FCIQMC).","category":"page"},{"location":"projectormontecarlo.html#ProjectorMonteCarloProblem","page":"Projector Monte Carlo","title":"ProjectorMonteCarloProblem","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"To run a projector Monte Carlo simulation you set up a problem with ProjectorMonteCarloProblem and solve it with solve. Alternatively you can initialize a PMCSimulation struct, step!  through time steps, and solve! it to completion. ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"ProjectorMonteCarloProblem\ninit\nsolve\nsolve!\nstep!","category":"page"},{"location":"projectormontecarlo.html#Rimu.ProjectorMonteCarloProblem-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html#CommonSolve.init-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\ninit(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.step!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"After solve or solve! have been called the returned PMCSimulation contains the results of  the projector Monte Carlo calculation.","category":"page"},{"location":"projectormontecarlo.html#PMCSimulation-and-report-as-a-DataFrame","page":"Projector Monte Carlo","title":"PMCSimulation and report as a DataFrame","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Rimu.PMCSimulation","category":"page"},{"location":"projectormontecarlo.html#Rimu.PMCSimulation-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The DataFrame returned from DataFrame(::PMCSimulation) contains the time series data from  the projector Monte Carlo simulation that is of primary interest for analysis. Depending on the  reporting_strategy and other options passed as keyword arguments to  ProjectorMonteCarloProblem it can have different numbers of rows and columns. The rows  correspond to the reported time steps (Monte Carlo steps). There is at least one column with the name :step. Further columns are usually present with additional data reported from the simulation.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"For the default option algorithm = FCIQMC(; shift_strategy, time_step_strategy) with a single replica (n_replicas = 1) and single spectral state, the fields :shift, :norm, :len will  be present as well as others depending on the style argument and the post_step_strategy.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"If multiple replicas or spectral states are requested, then the relevant field names in the  DataFrame will have a suffix identifying the respective replica simulation, e.g. the shifts will be reported as shift_1, shift_2, ... ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Many tools for analysing the time series data obtained from a  ProjectorMonteCarloProblem are contained in the Module StatsTools.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"num_replicas = 3\nreplica_strategy = AllOverlaps(num_replicas; operator = G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntarget_walkers = 100;\ntime_step = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"problem = ProjectorMonteCarloProblem(H;\n    style=IsDynamicSemistochastic(),\n    time_step,\n    last_step = steps_equilibrate + steps_measure,\n    target_walkers,\n    replica_strategy,\n)\nresult = solve(problem)\ndf = DataFrame(result);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $num_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.2127284503054476 ± 0.0013628742349376581\n   G2(1) = 0.9179577415708947 ± 0.0006334770216833089\n   G2(2) = 0.9812160678201931 ± 0.0006776613612455318\n   G2(3) = 0.988923930912376 ± 0.0012426030650221714\n   G2(4) = 0.9812160678201931 ± 0.0006776613612455318\n   G2(5) = 0.9179577415708947 ± 0.0006334770216833089\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $num_replicas replicas:\")\nfor i in 1:num_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -4.044063267832244 ± 0.1525293636788764\n   Replica 2: -3.9903972108791437 ± 0.10689999190495966\n   Replica 3: -3.9270632039068807 ± 0.12835472688117255\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"target_walkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    target_walkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [target_walkers];\n    label=\"target_walkers\", xlabel=\"step\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.step, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip200\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip200)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip201\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip200)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip202\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip202)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip202)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip202)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip202)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip200)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip200)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip200)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip200)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip200)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip200)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M1266.04 1391.71 L1266.04 1397.25 Q1263.56 1395.98 1260.88 1395.34 Q1258.21 1394.71 1255.34 1394.71 Q1250.98 1394.71 1248.79 1396.04 Q1246.62 1397.38 1246.62 1400.05 Q1246.62 1402.09 1248.18 1403.27 Q1249.74 1404.41 1254.45 1405.46 L1256.46 1405.91 Q1262.7 1407.25 1265.31 1409.7 Q1267.95 1412.12 1267.95 1416.48 Q1267.95 1421.44 1264 1424.34 Q1260.09 1427.23 1253.21 1427.23 Q1250.35 1427.23 1247.23 1426.66 Q1244.14 1426.12 1240.7 1425.01 L1240.7 1418.96 Q1243.95 1420.65 1247.1 1421.51 Q1250.25 1422.33 1253.34 1422.33 Q1257.48 1422.33 1259.7 1420.93 Q1261.93 1419.5 1261.93 1416.92 Q1261.93 1414.54 1260.31 1413.26 Q1258.72 1411.99 1253.27 1410.81 L1251.24 1410.33 Q1245.79 1409.19 1243.38 1406.83 Q1240.96 1404.45 1240.96 1400.31 Q1240.96 1395.28 1244.52 1392.54 Q1248.09 1389.8 1254.64 1389.8 Q1257.89 1389.8 1260.75 1390.28 Q1263.62 1390.76 1266.04 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M1283.07 1380.54 L1283.07 1390.66 L1295.13 1390.66 L1295.13 1395.22 L1283.07 1395.22 L1283.07 1414.57 Q1283.07 1418.93 1284.24 1420.17 Q1285.45 1421.41 1289.11 1421.41 L1295.13 1421.41 L1295.13 1426.31 L1289.11 1426.31 Q1282.33 1426.31 1279.76 1423.8 Q1277.18 1421.25 1277.18 1414.57 L1277.18 1395.22 L1272.88 1395.22 L1272.88 1390.66 L1277.18 1390.66 L1277.18 1380.54 L1283.07 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M1333.32 1407.02 L1333.32 1409.89 L1306.4 1409.89 Q1306.78 1415.94 1310.02 1419.12 Q1313.3 1422.27 1319.13 1422.27 Q1322.5 1422.27 1325.65 1421.44 Q1328.84 1420.61 1331.95 1418.96 L1331.95 1424.5 Q1328.8 1425.83 1325.49 1426.53 Q1322.18 1427.23 1318.78 1427.23 Q1310.25 1427.23 1305.25 1422.27 Q1300.29 1417.3 1300.29 1408.84 Q1300.29 1400.08 1305 1394.96 Q1309.74 1389.8 1317.76 1389.8 Q1324.95 1389.8 1329.12 1394.45 Q1333.32 1399.07 1333.32 1407.02 M1327.47 1405.3 Q1327.4 1400.5 1324.76 1397.63 Q1322.15 1394.77 1317.82 1394.77 Q1312.92 1394.77 1309.96 1397.54 Q1307.03 1400.31 1306.59 1405.34 L1327.47 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M1348.6 1420.96 L1348.6 1439.87 L1342.71 1439.87 L1342.71 1390.66 L1348.6 1390.66 L1348.6 1396.07 Q1350.45 1392.89 1353.25 1391.36 Q1356.08 1389.8 1360 1389.8 Q1366.49 1389.8 1370.53 1394.96 Q1374.6 1400.12 1374.6 1408.52 Q1374.6 1416.92 1370.53 1422.08 Q1366.49 1427.23 1360 1427.23 Q1356.08 1427.23 1353.25 1425.71 Q1350.45 1424.15 1348.6 1420.96 M1368.53 1408.52 Q1368.53 1402.06 1365.85 1398.4 Q1363.21 1394.71 1358.56 1394.71 Q1353.92 1394.71 1351.24 1398.4 Q1348.6 1402.06 1348.6 1408.52 Q1348.6 1414.98 1351.24 1418.67 Q1353.92 1422.33 1358.56 1422.33 Q1363.21 1422.33 1365.85 1418.67 Q1368.53 1414.98 1368.53 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip202)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1260.81 2211.02,1260.81 \"/>\n<polyline clip-path=\"url(#clip202)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1003.71 2211.02,1003.71 \"/>\n<polyline clip-path=\"url(#clip202)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,746.611 2211.02,746.611 \"/>\n<polyline clip-path=\"url(#clip202)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,489.511 2211.02,489.511 \"/>\n<polyline clip-path=\"url(#clip202)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,232.41 2211.02,232.41 \"/>\n<polyline clip-path=\"url(#clip200)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip200)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1260.81 423.181,1260.81 \"/>\n<polyline clip-path=\"url(#clip200)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1003.71 423.181,1003.71 \"/>\n<polyline clip-path=\"url(#clip200)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,746.611 423.181,746.611 \"/>\n<polyline clip-path=\"url(#clip200)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,489.511 423.181,489.511 \"/>\n<polyline clip-path=\"url(#clip200)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,232.41 423.181,232.41 \"/>\n<path clip-path=\"url(#clip200)\" d=\"M356.339 1246.61 Q352.728 1246.61 350.899 1250.18 Q349.094 1253.72 349.094 1260.85 Q349.094 1267.95 350.899 1271.52 Q352.728 1275.06 356.339 1275.06 Q359.973 1275.06 361.779 1271.52 Q363.608 1267.95 363.608 1260.85 Q363.608 1253.72 361.779 1250.18 Q359.973 1246.61 356.339 1246.61 M356.339 1242.91 Q362.149 1242.91 365.205 1247.51 Q368.284 1252.1 368.284 1260.85 Q368.284 1269.57 365.205 1274.18 Q362.149 1278.76 356.339 1278.76 Q350.529 1278.76 347.45 1274.18 Q344.395 1269.57 344.395 1260.85 Q344.395 1252.1 347.45 1247.51 Q350.529 1242.91 356.339 1242.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M290.043 1017.06 L306.363 1017.06 L306.363 1020.99 L284.418 1020.99 L284.418 1017.06 Q287.08 1014.3 291.664 1009.67 Q296.27 1005.02 297.451 1003.68 Q299.696 1001.15 300.576 999.418 Q301.478 997.659 301.478 995.969 Q301.478 993.214 299.534 991.478 Q297.613 989.742 294.511 989.742 Q292.312 989.742 289.858 990.506 Q287.427 991.27 284.65 992.821 L284.65 988.099 Q287.474 986.964 289.927 986.386 Q292.381 985.807 294.418 985.807 Q299.789 985.807 302.983 988.492 Q306.177 991.177 306.177 995.668 Q306.177 997.798 305.367 999.719 Q304.58 1001.62 302.474 1004.21 Q301.895 1004.88 298.793 1008.1 Q295.691 1011.29 290.043 1017.06 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M316.224 986.432 L334.58 986.432 L334.58 990.367 L320.506 990.367 L320.506 998.839 Q321.524 998.492 322.543 998.33 Q323.562 998.145 324.58 998.145 Q330.367 998.145 333.747 1001.32 Q337.126 1004.49 337.126 1009.9 Q337.126 1015.48 333.654 1018.58 Q330.182 1021.66 323.862 1021.66 Q321.687 1021.66 319.418 1021.29 Q317.173 1020.92 314.765 1020.18 L314.765 1015.48 Q316.849 1016.62 319.071 1017.17 Q321.293 1017.73 323.77 1017.73 Q327.774 1017.73 330.112 1015.62 Q332.45 1013.52 332.45 1009.9 Q332.45 1006.29 330.112 1004.19 Q327.774 1002.08 323.77 1002.08 Q321.895 1002.08 320.02 1002.5 Q318.168 1002.91 316.224 1003.79 L316.224 986.432 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M356.339 989.511 Q352.728 989.511 350.899 993.075 Q349.094 996.617 349.094 1003.75 Q349.094 1010.85 350.899 1014.42 Q352.728 1017.96 356.339 1017.96 Q359.973 1017.96 361.779 1014.42 Q363.608 1010.85 363.608 1003.75 Q363.608 996.617 361.779 993.075 Q359.973 989.511 356.339 989.511 M356.339 985.807 Q362.149 985.807 365.205 990.413 Q368.284 994.997 368.284 1003.75 Q368.284 1012.47 365.205 1017.08 Q362.149 1021.66 356.339 1021.66 Q350.529 1021.66 347.45 1017.08 Q344.395 1012.47 344.395 1003.75 Q344.395 994.997 347.45 990.413 Q350.529 985.807 356.339 985.807 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M286.062 729.331 L304.418 729.331 L304.418 733.267 L290.344 733.267 L290.344 741.739 Q291.363 741.392 292.381 741.23 Q293.4 741.044 294.418 741.044 Q300.205 741.044 303.585 744.216 Q306.964 747.387 306.964 752.804 Q306.964 758.382 303.492 761.484 Q300.02 764.563 293.701 764.563 Q291.525 764.563 289.256 764.192 Q287.011 763.822 284.603 763.081 L284.603 758.382 Q286.687 759.516 288.909 760.072 Q291.131 760.628 293.608 760.628 Q297.613 760.628 299.951 758.521 Q302.288 756.415 302.288 752.804 Q302.288 749.192 299.951 747.086 Q297.613 744.98 293.608 744.98 Q291.733 744.98 289.858 745.396 Q288.006 745.813 286.062 746.692 L286.062 729.331 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M326.177 732.41 Q322.566 732.41 320.737 735.975 Q318.932 739.517 318.932 746.646 Q318.932 753.753 320.737 757.317 Q322.566 760.859 326.177 760.859 Q329.811 760.859 331.617 757.317 Q333.446 753.753 333.446 746.646 Q333.446 739.517 331.617 735.975 Q329.811 732.41 326.177 732.41 M326.177 728.706 Q331.987 728.706 335.043 733.313 Q338.122 737.896 338.122 746.646 Q338.122 755.373 335.043 759.979 Q331.987 764.563 326.177 764.563 Q320.367 764.563 317.288 759.979 Q314.233 755.373 314.233 746.646 Q314.233 737.896 317.288 733.313 Q320.367 728.706 326.177 728.706 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M356.339 732.41 Q352.728 732.41 350.899 735.975 Q349.094 739.517 349.094 746.646 Q349.094 753.753 350.899 757.317 Q352.728 760.859 356.339 760.859 Q359.973 760.859 361.779 757.317 Q363.608 753.753 363.608 746.646 Q363.608 739.517 361.779 735.975 Q359.973 732.41 356.339 732.41 M356.339 728.706 Q362.149 728.706 365.205 733.313 Q368.284 737.896 368.284 746.646 Q368.284 755.373 365.205 759.979 Q362.149 764.563 356.339 764.563 Q350.529 764.563 347.45 759.979 Q344.395 755.373 344.395 746.646 Q344.395 737.896 347.45 733.313 Q350.529 728.706 356.339 728.706 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M284.835 472.231 L307.057 472.231 L307.057 474.222 L294.511 506.791 L289.627 506.791 L301.432 476.166 L284.835 476.166 L284.835 472.231 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M316.224 472.231 L334.58 472.231 L334.58 476.166 L320.506 476.166 L320.506 484.638 Q321.524 484.291 322.543 484.129 Q323.562 483.944 324.58 483.944 Q330.367 483.944 333.747 487.115 Q337.126 490.286 337.126 495.703 Q337.126 501.282 333.654 504.383 Q330.182 507.462 323.862 507.462 Q321.687 507.462 319.418 507.092 Q317.173 506.721 314.765 505.981 L314.765 501.282 Q316.849 502.416 319.071 502.971 Q321.293 503.527 323.77 503.527 Q327.774 503.527 330.112 501.421 Q332.45 499.314 332.45 495.703 Q332.45 492.092 330.112 489.985 Q327.774 487.879 323.77 487.879 Q321.895 487.879 320.02 488.296 Q318.168 488.712 316.224 489.592 L316.224 472.231 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M356.339 475.31 Q352.728 475.31 350.899 478.874 Q349.094 482.416 349.094 489.546 Q349.094 496.652 350.899 500.217 Q352.728 503.758 356.339 503.758 Q359.973 503.758 361.779 500.217 Q363.608 496.652 363.608 489.546 Q363.608 482.416 361.779 478.874 Q359.973 475.31 356.339 475.31 M356.339 471.606 Q362.149 471.606 365.205 476.212 Q368.284 480.796 368.284 489.546 Q368.284 498.272 365.205 502.879 Q362.149 507.462 356.339 507.462 Q350.529 507.462 347.45 502.879 Q344.395 498.272 344.395 489.546 Q344.395 480.796 347.45 476.212 Q350.529 471.606 356.339 471.606 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M256.664 245.755 L264.303 245.755 L264.303 219.39 L255.992 221.056 L255.992 216.797 L264.256 215.13 L268.932 215.13 L268.932 245.755 L276.571 245.755 L276.571 249.69 L256.664 249.69 L256.664 245.755 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M296.015 218.209 Q292.404 218.209 290.576 221.774 Q288.77 225.315 288.77 232.445 Q288.77 239.551 290.576 243.116 Q292.404 246.658 296.015 246.658 Q299.65 246.658 301.455 243.116 Q303.284 239.551 303.284 232.445 Q303.284 225.315 301.455 221.774 Q299.65 218.209 296.015 218.209 M296.015 214.505 Q301.826 214.505 304.881 219.112 Q307.96 223.695 307.96 232.445 Q307.96 241.172 304.881 245.778 Q301.826 250.362 296.015 250.362 Q290.205 250.362 287.127 245.778 Q284.071 241.172 284.071 232.445 Q284.071 223.695 287.127 219.112 Q290.205 214.505 296.015 214.505 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M326.177 218.209 Q322.566 218.209 320.737 221.774 Q318.932 225.315 318.932 232.445 Q318.932 239.551 320.737 243.116 Q322.566 246.658 326.177 246.658 Q329.811 246.658 331.617 243.116 Q333.446 239.551 333.446 232.445 Q333.446 225.315 331.617 221.774 Q329.811 218.209 326.177 218.209 M326.177 214.505 Q331.987 214.505 335.043 219.112 Q338.122 223.695 338.122 232.445 Q338.122 241.172 335.043 245.778 Q331.987 250.362 326.177 250.362 Q320.367 250.362 317.288 245.778 Q314.233 241.172 314.233 232.445 Q314.233 223.695 317.288 219.112 Q320.367 214.505 326.177 214.505 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M356.339 218.209 Q352.728 218.209 350.899 221.774 Q349.094 225.315 349.094 232.445 Q349.094 239.551 350.899 243.116 Q352.728 246.658 356.339 246.658 Q359.973 246.658 361.779 243.116 Q363.608 239.551 363.608 232.445 Q363.608 225.315 361.779 221.774 Q359.973 218.209 356.339 218.209 M356.339 214.505 Q362.149 214.505 365.205 219.112 Q368.284 223.695 368.284 232.445 Q368.284 241.172 365.205 245.778 Q362.149 250.362 356.339 250.362 Q350.529 250.362 347.45 245.778 Q344.395 241.172 344.395 232.445 Q344.395 223.695 347.45 219.112 Q350.529 214.505 356.339 214.505 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip202)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,232.41 4017.76,232.41 \"/>\n<polyline clip-path=\"url(#clip202)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1250.45 456.554,1249.28 457.123,1249.14 457.691,1248.92 458.259,1247.59 458.828,1247.26 459.396,1246.84 459.964,1246.38 460.533,1245.83 461.101,1245.2 461.669,1244.5 462.238,1242.68 462.806,1241.83 463.375,1240.88 463.943,1239.84 464.511,1237.68 465.08,1236.45 465.648,1235.09 466.216,1232.6 466.785,1231.04 467.353,1229.31 467.921,1227.46 468.49,1223.41 469.058,1221.32 469.626,1219.1 470.195,1216.66 470.763,1213.08 471.331,1210.38 471.9,1206.41 472.468,1200.25 473.036,1195.95 473.605,1192.52 474.173,1188.94 474.741,1185.07 475.31,1180.02 475.878,1174.82 476.446,1169.41 477.015,1164.81 477.583,1157.82 478.152,1152.86 478.72,1147.72 479.288,1141.31 479.857,1134.8 480.425,1128.01 480.993,1119.88 481.562,1111.72 482.13,1104.41 482.698,1096.87 483.267,1089.14 483.835,1079.32 484.403,1072.6 484.972,1063.51 485.54,1055.24 486.108,1046.92 486.677,1038.51 487.245,1030.85 487.813,1023.09 488.382,1015.2 488.95,1007.19 489.518,995.895 490.087,984.481 490.655,972.994 491.224,963.746 491.792,954.358 492.36,945.862 492.929,937.269 493.497,925.407 494.065,916.624 494.634,906.714 495.202,896.8 495.77,886.86 496.339,877.736 496.907,865.431 497.475,856.236 498.044,843.917 498.612,831.801 499.18,822.958 499.749,812.887 500.317,803.853 500.885,794.952 501.454,785.028 502.022,774.948 502.59,765.921 503.159,756.838 503.727,743.728 504.295,733.86 504.864,722.085 505.432,711.528 506.001,702.038 506.569,691.605 507.137,683.192 507.706,674.076 508.274,664.963 508.842,656.979 509.411,643.89 509.979,631.035 510.547,620.758 511.116,612.327 511.684,603.093 512.252,595.173 512.821,588.215 513.389,579.289 513.957,570.489 514.526,563.877 515.094,553.12 515.662,543.675 516.231,535.71 516.799,529.538 517.367,522.592 517.936,512.671 518.504,505.281 519.072,498.98 519.641,491.877 520.209,486.892 520.778,480.849 521.346,476.075 521.914,471.136 522.483,465.216 523.051,460.607 523.619,454.995 524.188,449.415 524.756,442.991 525.324,438.74 525.893,433.128 526.461,424.929 527.029,421.049 527.598,415.12 528.166,409.446 528.734,405.203 529.303,402.843 529.871,397.634 530.439,394.645 531.008,390.388 531.576,386.297 532.144,383.276 532.713,379.404 533.281,374.53 533.85,369.781 534.418,366.243 534.986,362.819 535.555,358.461 536.123,357.395 536.691,356.081 537.26,352.768 537.828,350.389 538.396,347.183 538.965,342.904 539.533,343.145 540.101,337.93 540.67,336.078 541.238,333.273 541.806,332.504 542.375,329.667 542.943,328.059 543.511,325.269 544.08,325.599 544.648,323.945 545.216,321.88 545.785,319.949 546.353,318.276 546.921,316.574 547.49,314.747 548.058,310.856 548.627,309.274 549.195,306.855 549.763,304.501 550.332,301.3 550.9,301.159 551.468,299.094 552.037,299.025 552.605,296.693 553.173,295.49 553.742,294.171 554.31,292.052 554.878,289.89 555.447,289.815 556.015,286.706 556.583,286.924 557.152,285.012 557.72,283.116 558.288,284.356 558.857,281.262 559.425,277.44 559.993,273.753 560.562,274.486 561.13,273.82 561.698,271.47 562.267,268.124 562.835,268.919 563.404,269.662 563.972,268.142 564.54,264.868 565.109,264.799 565.677,263.639 566.245,262.32 566.814,263.358 567.382,265.348 567.95,264.001 568.519,262.713 569.087,261.548 569.655,259.488 570.224,260.825 570.792,259.796 571.36,259.58 571.929,259.459 572.497,259.462 573.065,260.474 573.634,261.243 574.202,260.914 574.77,260.623 575.339,258.299 575.907,258.19 576.476,254.899 577.044,253.934 577.612,253.022 578.181,251.263 578.749,249.625 579.317,247.987 579.886,247.409 580.454,249.935 581.022,249.177 581.591,249.664 582.159,250.881 582.727,254.174 583.296,252.944 583.864,252.874 584.432,252.747 585.001,250.703 585.569,248.851 586.137,248.131 586.706,245.071 587.274,245.473 587.842,244.817 588.411,245.202 588.979,246.604 589.547,248.001 590.116,247.002 590.684,247.221 591.253,247.399 591.821,246.531 592.389,245.857 592.958,245.052 593.526,248.593 594.094,250.622 594.663,246.528 595.231,246.839 595.799,247.12 596.368,246.89 596.936,245.833 597.504,247.863 598.073,247.819 598.641,246.73 599.209,249.045 599.778,247.883 600.346,247.757 600.914,247.836 601.483,245.803 602.051,243.648 602.619,244.637 603.188,245.842 603.756,244.808 604.325,244.894 604.893,243.894 605.461,240.925 606.03,240.47 606.598,240.002 607.166,241.492 607.735,242.03 608.303,241.394 608.871,240.488 609.44,239.858 610.008,240.131 610.576,235.363 611.145,241.358 611.713,240.593 612.281,240.013 612.85,240.321 613.418,240.488 613.986,240.638 614.555,240.879 615.123,240.954 615.691,242.169 616.26,240.236 616.828,238.431 617.396,237.849 617.965,236.215 618.533,235.766 619.102,236.437 619.67,237.042 620.238,238.748 620.807,240.06 621.375,238.086 621.943,238.49 622.512,237.821 623.08,239.222 623.648,238.555 624.217,241.961 624.785,244.142 625.353,243.95 625.922,245.078 626.49,245.83 627.058,246.443 627.627,248.019 628.195,247.833 628.763,248.504 629.332,248.979 629.9,246.522 630.468,246.469 631.037,245.169 631.605,246.004 632.173,247.808 632.742,246.215 633.31,244.934 633.879,245.589 634.447,245.35 635.015,244.126 635.584,242.903 636.152,243.748 636.72,245.61 637.289,246.351 637.857,243.946 638.425,244.607 638.994,241.316 639.562,239.013 640.13,237.92 640.699,236.653 641.267,236.979 641.835,234 642.404,235.376 642.972,235.778 643.54,238.174 644.109,238.241 644.677,236.328 645.245,235.243 645.814,236.741 646.382,235.819 646.951,237.08 647.519,239.116 648.087,239.067 648.656,237.921 649.224,238.978 649.792,238.973 650.361,239.871 650.929,239.825 651.497,239.745 652.066,240.719 652.634,238.286 653.202,237.166 653.771,237.32 654.339,235.962 654.907,237.043 655.476,234.61 656.044,235.736 656.612,237.809 657.181,237.965 657.749,236.756 658.317,237.912 658.886,237.755 659.454,238.071 660.022,238.031 660.591,239.156 661.159,237.195 661.728,239.46 662.296,239.232 662.864,240.185 663.433,242.039 664.001,240.636 664.569,239.45 665.138,238.311 665.706,238.033 666.274,238.04 666.843,237.851 667.411,237.895 667.979,235.912 668.548,237.071 669.116,235.949 669.684,235.949 670.253,233.786 670.821,232.823 671.389,231.993 671.958,229.359 672.526,229.238 673.094,229.574 673.663,230.895 674.231,232.431 674.799,231.931 675.368,232.258 675.936,233.558 676.505,234.916 677.073,234.868 677.641,233.995 678.21,233.28 678.778,235.647 679.346,234.684 679.915,232.88 680.483,232.135 681.051,232.515 681.62,232.676 682.188,233.718 682.756,233.985 683.325,232.282 683.893,232.604 684.461,232.944 685.03,234.427 685.598,232.512 686.166,235.114 686.735,236.269 687.303,238.589 687.871,239.532 688.44,237.177 689.008,237.173 689.577,235.104 690.145,235.106 690.713,237.325 691.282,237.488 691.85,237.399 692.418,236.338 692.987,237.574 693.555,237.531 694.123,237.266 694.692,236.17 695.26,234.059 695.828,234.245 696.397,234.469 696.965,234.606 697.533,234.761 698.102,234.792 698.67,232.808 699.238,234.261 699.807,232.365 700.375,233.681 700.943,232.812 701.512,233.168 702.08,233.507 702.648,232.749 703.217,233.934 703.785,236.097 704.354,237.049 704.922,237.981 705.49,237.85 706.059,238.848 706.627,238.704 707.195,237.531 707.764,236.305 708.332,238.56 708.9,236.332 709.469,235.144 710.037,235.183 710.605,235.308 711.174,233.324 711.742,235.614 712.31,232.631 712.879,234.01 713.447,235.96 714.015,236.775 714.584,236.464 715.152,236.226 715.72,234.91 716.289,233.961 716.857,236.012 717.425,233.961 717.994,232.16 718.562,231.464 719.131,231.853 719.699,230.938 720.267,231.415 720.836,231.727 721.404,233.988 721.972,235.126 722.541,233.416 723.109,234.693 723.677,232.7 724.246,233.908 724.814,235.155 725.382,235.367 725.951,235.369 726.519,237.238 727.087,238.145 727.656,236.882 728.224,236.797 728.792,236.694 729.361,238.611 729.929,238.537 730.497,237.948 731.066,236.63 731.634,234.75 732.203,234.662 732.771,234.69 733.339,233.598 733.908,234.538 734.476,233.473 735.044,232.59 735.613,235.14 736.181,233.198 736.749,233.387 737.318,233.604 737.886,233.525 738.454,233.478 739.023,232.579 739.591,234.789 740.159,236.102 740.728,233.042 741.296,233.238 741.864,234.531 742.433,235.536 743.001,234.32 743.569,234.289 744.138,234.186 744.706,237.315 745.274,237.255 745.843,236.994 746.411,236.648 746.98,235.447 747.548,236.249 748.116,235.087 748.685,235.155 749.253,236.086 749.821,234.093 750.39,233.246 750.958,232.219 751.526,232.241 752.095,232.38 752.663,233.752 753.231,231.858 753.8,232.059 754.368,231.151 754.936,231.295 755.505,231.625 756.073,232.968 756.641,234.177 757.21,234.311 757.778,233.251 758.346,233.477 758.915,232.568 759.483,232.991 760.052,232.1 760.62,233.256 761.188,233.332 761.757,229.285 762.325,231.814 762.893,232.031 763.462,235.334 764.03,235.183 764.598,234.125 765.167,236.068 765.735,234.987 766.303,235.134 766.872,236.183 767.44,234.955 768.008,237.924 768.577,236.636 769.145,235.477 769.713,234.305 770.282,234.242 770.85,235.214 771.418,236.103 771.987,236.01 772.555,235.758 773.123,239.662 773.692,241.292 774.26,240.534 774.829,239.243 775.397,238.916 775.965,238.442 776.534,237.1 777.102,236.869 777.67,237.454 778.239,239.184 778.807,238.596 779.375,239.044 779.944,238.708 780.512,237.169 781.08,233.787 781.649,232.545 782.217,231.67 782.785,231.817 783.354,231.834 783.922,231.095 784.49,230.051 785.059,229.282 785.627,228.475 786.195,230.778 786.764,228.751 787.332,225.124 787.9,226.85 788.469,226.176 789.037,228.822 789.606,229.101 790.174,231.317 790.742,233.418 791.311,233.287 791.879,234.34 792.447,235.543 793.016,235.488 793.584,235.182 794.152,237.03 794.721,234.713 795.289,233.45 795.857,232.544 796.426,232.63 796.994,232.598 797.562,232.615 798.131,232.78 798.699,232.844 799.267,231.946 799.836,230.047 800.404,231.297 800.972,231.47 801.541,232.704 802.109,233.878 802.678,233.842 803.246,231.577 803.814,230.754 804.383,232.115 804.951,232.223 805.519,234.347 806.088,234.327 806.656,234.274 807.224,233.309 807.793,232.466 808.361,229.722 808.929,230.077 809.498,231.445 810.066,232.435 810.634,232.89 811.203,233.224 811.771,232.339 812.339,232.653 812.908,232.782 813.476,230.766 814.044,230.989 814.613,230.128 815.181,230.267 815.749,231.399 816.318,230.556 816.886,230.776 817.455,231.088 818.023,232.251 818.591,234.484 819.16,234.519 819.728,233.425 820.296,233.695 820.865,231.581 821.433,232.899 822.001,233.142 822.57,232.992 823.138,233.226 823.706,234.386 824.275,235.617 824.843,236.32 825.411,235.068 825.98,236.047 826.548,235.708 827.116,234.664 827.685,235.655 828.253,235.677 828.821,236.872 829.39,237.857 829.958,237.542 830.526,239.231 831.095,239.146 831.663,237.669 832.232,235.391 832.8,235.335 833.368,234.986 833.937,233.976 834.505,233.871 835.073,233.88 835.642,231.678 836.21,231.896 836.778,233.143 837.347,233.268 837.915,233.222 838.483,233.115 839.052,233.282 839.62,233.49 840.188,232.624 840.757,231.563 841.325,231.869 841.893,231.159 842.462,231.077 843.03,231.372 843.598,231.549 844.167,231.545 844.735,231.572 845.304,229.606 845.872,231.883 846.44,225.944 847.009,224.61 847.577,223.501 848.145,224.209 848.714,224.848 849.282,227.715 849.85,231.1 850.419,231.317 850.987,231.371 851.555,231.619 852.124,235.085 852.692,235.253 853.26,237.413 853.829,237.112 854.397,237.82 854.965,237.41 855.534,237.189 856.102,236.809 856.67,237.559 857.239,236.155 857.807,235.842 858.375,236.584 858.944,237.266 859.512,237.116 860.081,236.702 860.649,238.777 861.217,238.211 861.786,238.01 862.354,237.595 862.922,237.329 863.491,235.961 864.059,234.629 864.627,233.546 865.196,235.368 865.764,237.44 866.332,231.996 866.901,233.294 867.469,233.115 868.037,234.076 868.606,233.914 869.174,233.997 869.742,233.894 870.311,233.841 870.879,234.76 871.447,237.68 872.016,237.503 872.584,233.06 873.152,232.143 873.721,234.065 874.289,232.884 874.858,233.98 875.426,231.863 875.994,233.08 876.563,234.028 877.131,233.898 877.699,233.647 878.268,232.312 878.836,233.346 879.404,232.072 879.973,230.839 880.541,229.655 881.109,229.781 881.678,232.024 882.246,232.994 882.814,232.95 883.383,230.856 883.951,232.089 884.519,232.027 885.088,230.026 885.656,229.007 886.224,229.112 886.793,227.109 887.361,227.261 887.93,227.805 888.498,228.018 889.066,228.386 889.635,227.601 890.203,228.029 890.771,228.45 891.34,229.878 891.908,227.937 892.476,227.385 893.045,226.71 893.613,225.164 894.181,224.818 894.75,226.5 895.318,227.124 895.886,228.732 896.455,226.004 897.023,228.604 897.591,230.87 898.16,232.094 898.728,232.577 899.296,231.699 899.865,231.95 900.433,231.107 901.001,231.313 901.57,232.288 902.138,229.457 902.707,228.774 903.275,232.076 903.843,233.252 904.412,233.331 904.98,231.401 905.548,232.566 906.117,231.802 906.685,229.922 907.253,230.459 907.822,228.754 908.39,229.326 908.958,233.077 909.527,232.148 910.095,233.293 910.663,233.436 911.232,235.586 911.8,235.499 912.368,235.562 912.937,235.567 913.505,237.685 914.073,237.431 914.642,235.136 915.21,236.129 915.779,238.003 916.347,237.832 916.915,237.599 917.484,237.274 918.052,236.269 918.62,236.14 919.189,235.947 919.757,237.922 920.325,235.573 920.894,236.352 921.462,235.196 922.03,234.207 922.599,235.056 923.167,236.112 923.735,235.012 924.304,234.659 924.872,234.737 925.44,235.635 926.009,237.662 926.577,239.372 927.145,238.823 927.714,236.474 928.282,235.973 928.85,233.851 929.419,233.958 929.987,233.744 930.556,232.519 931.124,231.515 931.692,232.585 932.261,234.703 932.829,234.75 933.397,234.702 933.966,232.809 934.534,229.756 935.102,228.965 935.671,230.326 936.239,229.394 936.807,229.667 937.376,231.969 937.944,232.206 938.512,232.234 939.081,230.118 939.649,233.501 940.217,231.481 940.786,231.392 941.354,230.497 941.922,232.751 942.491,233.146 943.059,232.123 943.627,235.47 944.196,234.345 944.764,236.117 945.333,235.857 945.901,236.518 946.469,235.16 947.038,234.992 947.606,235.871 948.174,236.544 948.743,236.302 949.311,237.012 949.879,236.509 950.448,235.104 951.016,234.76 951.584,232.668 952.153,233.593 952.721,232.38 953.289,233.404 953.858,232.291 954.426,230.323 954.994,230.568 955.563,230.755 956.131,231.87 956.699,229.845 957.268,230.098 957.836,230.261 958.405,231.425 958.973,231.233 959.541,231.303 960.11,232.388 960.678,233.407 961.246,233.61 961.815,232.618 962.383,234.561 962.951,235.474 963.52,235.1 964.088,234.098 964.656,235.032 965.225,236.833 965.793,237.613 966.361,239.418 966.93,239.777 967.498,238.113 968.066,236.778 968.635,236.219 969.203,234.698 969.771,234.641 970.34,233.46 970.908,237.487 971.476,238.062 972.045,238.525 972.613,236.917 973.182,233.475 973.75,231.325 974.318,232.32 974.887,234.207 975.455,233.036 976.023,233.937 976.592,234.813 977.16,234.599 977.728,233.335 978.297,233.219 978.865,234.999 979.433,234.648 980.002,238.555 980.57,237.907 981.138,237.507 981.707,238.125 982.275,237.681 982.843,236.042 983.412,235.41 983.98,234.961 984.548,234.644 985.117,232.34 985.685,230.965 986.253,230.825 986.822,227.87 987.39,229.098 987.959,228.256 988.527,228.664 989.095,228.811 989.664,229.002 990.232,224.135 990.8,223.585 991.369,224.168 991.937,226.839 992.505,228.082 993.074,228.439 993.642,227.956 994.21,228.132 994.779,227.475 995.347,226.911 995.915,230.317 996.484,230.378 997.052,230.697 997.62,231.841 998.189,231.945 998.757,232.185 999.325,235.159 999.894,235.841 1000.46,234.539 1001.03,231.926 1001.6,230.841 1002.17,234.972 1002.74,235.762 1003.3,235.312 1003.87,237.236 1004.44,236.687 1005.01,235.28 1005.58,231.779 1006.15,232.745 1006.71,233.746 1007.28,233.615 1007.85,231.69 1008.42,230.548 1008.99,228.693 1009.56,229.051 1010.12,229.33 1010.69,229.631 1011.26,232.011 1011.83,232.154 1012.4,232.071 1012.97,232.007 1013.53,231.982 1014.1,230.94 1014.67,228.984 1015.24,229.206 1015.81,230.54 1016.38,231.619 1016.94,233.571 1017.51,232.368 1018.08,232.482 1018.65,230.272 1019.22,230.503 1019.79,230.671 1020.35,227.913 1020.92,228.018 1021.49,228.233 1022.06,227.53 1022.63,228.04 1023.2,228.566 1023.76,228.802 1024.33,232.144 1024.9,231.945 1025.47,232.81 1026.04,233.764 1026.61,233.729 1027.17,232.457 1027.74,233.722 1028.31,232.486 1028.88,232.836 1029.45,229.851 1030.02,227.021 1030.58,228.556 1031.15,228.689 1031.72,228.104 1032.29,227.529 1032.86,228.994 1033.43,229.217 1033.99,232.808 1034.56,232.033 1035.13,232.086 1035.7,230.972 1036.27,231.194 1036.84,231.378 1037.4,230.281 1037.97,231.226 1038.54,232.351 1039.11,231.79 1039.68,230.818 1040.25,232.153 1040.81,231.3 1041.38,231.593 1041.95,229.568 1042.52,230.056 1043.09,229.48 1043.66,229.733 1044.22,232.12 1044.79,230.097 1045.36,229.395 1045.93,230.535 1046.5,229.78 1047.07,231.292 1047.63,232.338 1048.2,234.4 1048.77,232.397 1049.34,232.454 1049.91,232.627 1050.48,233.783 1051.05,235.634 1051.61,234.485 1052.18,233.459 1052.75,233.602 1053.32,233.411 1053.89,233.453 1054.46,232.568 1055.02,232.708 1055.59,231.613 1056.16,231.774 1056.73,231.926 1057.3,230.939 1057.87,231.202 1058.43,233.515 1059,232.63 1059.57,232.566 1060.14,232.654 1060.71,232.76 1061.28,232.834 1061.84,234.108 1062.41,233.205 1062.98,233.149 1063.55,234.413 1064.12,233.277 1064.69,233.608 1065.25,233.515 1065.82,232.343 1066.39,235.582 1066.96,236.464 1067.53,235.296 1068.1,236.144 1068.66,236.916 1069.23,236.805 1069.8,238.636 1070.37,238.241 1070.94,239.862 1071.51,238.706 1072.07,236.349 1072.64,234.164 1073.21,234.028 1073.78,232.158 1074.35,231.156 1074.92,234.064 1075.48,233.955 1076.05,232.915 1076.62,232.704 1077.19,235.723 1077.76,236.425 1078.33,236.083 1078.89,235.746 1079.46,237.454 1080.03,234.078 1080.6,234.845 1081.17,233.603 1081.74,233.52 1082.3,232.565 1082.87,232.494 1083.44,234.589 1084.01,236.481 1084.58,235.13 1085.15,233.809 1085.71,234.688 1086.28,234.138 1086.85,233.119 1087.42,232.899 1087.99,234.133 1088.56,234.948 1089.12,236.93 1089.69,236.506 1090.26,237.337 1090.83,236.898 1091.4,238.621 1091.97,238.078 1092.53,235.575 1093.1,235.357 1093.67,236.307 1094.24,235.898 1094.81,235.667 1095.38,235.215 1095.94,232.996 1096.51,233.821 1097.08,234.681 1097.65,234.495 1098.22,234.231 1098.79,233.008 1099.35,234.039 1099.92,233.82 1100.49,233.558 1101.06,233.445 1101.63,232.208 1102.2,230.117 1102.76,230.174 1103.33,224.08 1103.9,224.568 1104.47,223.005 1105.04,223.37 1105.61,225.058 1106.17,224.591 1106.74,227.233 1107.31,228.625 1107.88,230.007 1108.45,231.257 1109.02,230.351 1109.58,230.314 1110.15,231.382 1110.72,231.374 1111.29,231.458 1111.86,232.686 1112.43,233.538 1112.99,230.117 1113.56,231.212 1114.13,231.387 1114.7,229.585 1115.27,228.705 1115.84,230.855 1116.4,233.21 1116.97,230.94 1117.54,232.969 1118.11,234.145 1118.68,233.142 1119.25,233.033 1119.81,231.866 1120.38,231.738 1120.95,229.705 1121.52,229.125 1122.09,228.438 1122.66,228.669 1123.23,227.928 1123.79,229.282 1124.36,227.442 1124.93,228.819 1125.5,229.211 1126.07,229.438 1126.64,230.729 1127.2,231.606 1127.77,231.776 1128.34,228.596 1128.91,226.879 1129.48,228.313 1130.05,228.724 1130.61,229.261 1131.18,226.569 1131.75,225.97 1132.32,225.399 1132.89,228.021 1133.46,227.556 1134.02,228.948 1134.59,227.18 1135.16,228.708 1135.73,230.06 1136.3,230.034 1136.87,228.98 1137.43,230.649 1138,227.814 1138.57,229.528 1139.14,230.927 1139.71,231.274 1140.28,231.374 1140.84,233.792 1141.41,234.797 1141.98,236.804 1142.55,237.495 1143.12,237.955 1143.69,235.514 1144.25,237.299 1144.82,236.058 1145.39,234.786 1145.96,233.725 1146.53,234.899 1147.1,235.026 1147.66,233.971 1148.23,235.104 1148.8,237.027 1149.37,234.835 1149.94,232.655 1150.51,232.733 1151.07,232.927 1151.64,231.854 1152.21,232.103 1152.78,232.37 1153.35,231.272 1153.92,229.248 1154.48,228.57 1155.05,229.916 1155.62,232.257 1156.19,232.338 1156.76,232.179 1157.33,231.318 1157.89,235.365 1158.46,235.259 1159.03,233.123 1159.6,233.282 1160.17,233.155 1160.74,231.175 1161.3,234.203 1161.87,234.108 1162.44,236.314 1163.01,236.11 1163.58,236.033 1164.15,235.83 1164.71,235.449 1165.28,236.406 1165.85,235.302 1166.42,236.136 1166.99,236 1167.56,236.645 1168.12,235.505 1168.69,235.414 1169.26,235.29 1169.83,236.157 1170.4,236.168 1170.97,235.757 1171.53,238.818 1172.1,240.472 1172.67,237.837 1173.24,237.477 1173.81,236.028 1174.38,236.733 1174.94,237.533 1175.51,235.913 1176.08,235.63 1176.65,233.22 1177.22,235.134 1177.79,232.814 1178.35,233.774 1178.92,235.884 1179.49,235.375 1180.06,238.212 1180.63,236.678 1181.2,236.294 1181.76,235.902 1182.33,233.548 1182.9,232.461 1183.47,233.536 1184.04,232.324 1184.61,232.298 1185.17,234.385 1185.74,236.032 1186.31,232.688 1186.88,232.725 1187.45,235.821 1188.02,234.39 1188.58,235.107 1189.15,236.02 1189.72,233.553 1190.29,235.472 1190.86,236.274 1191.43,234.861 1192,234.603 1192.56,231.976 1193.13,230.844 1193.7,229.986 1194.27,228.14 1194.84,227.417 1195.41,224.624 1195.97,223.91 1196.54,220.455 1197.11,221.267 1197.68,219.895 1198.25,223.976 1198.82,224.615 1199.38,224.304 1199.95,223.66 1200.52,223.068 1201.09,224.85 1201.66,226.455 1202.23,226.978 1202.79,230.557 1203.36,232.134 1203.93,232.08 1204.5,231.125 1205.07,231.435 1205.64,234.519 1206.2,233.438 1206.77,235.6 1207.34,234.411 1207.91,234.147 1208.48,232.069 1209.05,233.185 1209.61,232.091 1210.18,231.984 1210.75,231.1 1211.32,228.146 1211.89,230.65 1212.46,229.766 1213.02,230.99 1213.59,232.049 1214.16,232.156 1214.73,232.142 1215.3,233.427 1215.87,232.406 1216.43,231.396 1217,231.541 1217.57,228.386 1218.14,227.585 1218.71,230.965 1219.28,235.236 1219.84,235.906 1220.41,233.61 1220.98,234.652 1221.55,234.641 1222.12,234.362 1222.69,233.28 1223.25,233.138 1223.82,232.145 1224.39,231.265 1224.96,232.342 1225.53,229.344 1226.1,228.527 1226.66,230.956 1227.23,232.171 1227.8,232.255 1228.37,233.313 1228.94,236.396 1229.51,236.18 1230.07,234.95 1230.64,232.934 1231.21,231.021 1231.78,230.394 1232.35,230.639 1232.92,230.828 1233.48,231.935 1234.05,232.01 1234.62,232.086 1235.19,234.208 1235.76,235.079 1236.33,233.858 1236.89,235.847 1237.46,236.787 1238.03,237.601 1238.6,238.105 1239.17,238.983 1239.74,237.576 1240.3,240.256 1240.87,239.563 1241.44,240.271 1242.01,237.674 1242.58,237.318 1243.15,235.493 1243.71,233.934 1244.28,233.786 1244.85,233.595 1245.42,236.45 1245.99,235.033 1246.56,232.696 1247.12,231.61 1247.69,231.804 1248.26,230.68 1248.83,230.824 1249.4,229.96 1249.97,233.051 1250.53,233.177 1251.1,231.937 1251.67,232.11 1252.24,231.266 1252.81,231.417 1253.38,232.514 1253.94,232.527 1254.51,232.762 1255.08,232.559 1255.65,234.616 1256.22,235.558 1256.79,237.476 1257.35,236.758 1257.92,233.226 1258.49,232.987 1259.06,230.995 1259.63,230.044 1260.2,228.077 1260.76,226.183 1261.33,225.615 1261.9,225.955 1262.47,226.054 1263.04,226.498 1263.61,225.694 1264.18,226.019 1264.74,230.541 1265.31,231.749 1265.88,230.764 1266.45,229.601 1267.02,231.787 1267.59,230.762 1268.15,232.081 1268.72,231.106 1269.29,232.165 1269.86,233.118 1270.43,233.239 1271,231.229 1271.56,231.345 1272.13,230.364 1272.7,231.452 1273.27,229.499 1273.84,229.811 1274.41,231.968 1274.97,229.933 1275.54,230.192 1276.11,229.195 1276.68,230.57 1277.25,228.614 1277.82,232.213 1278.38,232.365 1278.95,233.509 1279.52,232.674 1280.09,232.621 1280.66,233.506 1281.23,232.451 1281.79,230.423 1282.36,228.671 1282.93,229.1 1283.5,228.456 1284.07,229.846 1284.64,230.125 1285.2,229.303 1285.77,230.515 1286.34,228.778 1286.91,230.102 1287.48,231.33 1288.05,231.52 1288.61,230.407 1289.18,229.829 1289.75,228.189 1290.32,227.465 1290.89,229.906 1291.46,230.063 1292.02,232.157 1292.59,234.149 1293.16,233.135 1293.73,233.196 1294.3,233.223 1294.87,233.397 1295.43,233.408 1296,232.539 1296.57,231.408 1297.14,231.494 1297.71,230.718 1298.28,230.832 1298.84,228.112 1299.41,227.596 1299.98,229.234 1300.55,230.727 1301.12,232.839 1301.69,229.843 1302.25,233.173 1302.82,233.221 1303.39,231.278 1303.96,231.615 1304.53,231.883 1305.1,229.939 1305.66,230.301 1306.23,230.609 1306.8,230.707 1307.37,228.978 1307.94,232.437 1308.51,231.478 1309.07,231.652 1309.64,233.999 1310.21,234.003 1310.78,232.906 1311.35,233.08 1311.92,233.196 1312.48,233.146 1313.05,233.181 1313.62,232.118 1314.19,231.166 1314.76,231.323 1315.33,231.407 1315.89,233.753 1316.46,233.794 1317.03,232.664 1317.6,233.852 1318.17,232.953 1318.74,234.244 1319.3,234.274 1319.87,236.245 1320.44,236.279 1321.01,237.147 1321.58,237.888 1322.15,237.582 1322.71,238.386 1323.28,237.909 1323.85,237.621 1324.42,237.273 1324.99,236.874 1325.56,236.569 1326.12,237.219 1326.69,234.923 1327.26,234.826 1327.83,234.659 1328.4,232.411 1328.97,233.49 1329.53,233.693 1330.1,232.76 1330.67,232.946 1331.24,233.158 1331.81,234.28 1332.38,235.308 1332.94,233.171 1333.51,236.228 1334.08,237.983 1334.65,238.642 1335.22,238.395 1335.79,238.119 1336.36,238.521 1336.92,239.2 1337.49,238.523 1338.06,238.292 1338.63,235.887 1339.2,235.869 1339.77,233.628 1340.33,235.451 1340.9,235.044 1341.47,235.737 1342.04,235.356 1342.61,235.226 1343.18,235.196 1343.74,234.143 1344.31,230.986 1344.88,231.799 1345.45,231.877 1346.02,232.92 1346.59,233.036 1347.15,234.058 1347.72,235.101 1348.29,234.967 1348.86,236.792 1349.43,238.176 1350,237.673 1350.56,236.985 1351.13,236.455 1351.7,235.003 1352.27,232.526 1352.84,232.489 1353.41,232.383 1353.97,233.267 1354.54,232.233 1355.11,231.003 1355.68,227.768 1356.25,228.285 1356.82,228.531 1357.38,227.719 1357.95,227.912 1358.52,229.372 1359.09,229.629 1359.66,228.475 1360.23,229.787 1360.79,230.13 1361.36,229.22 1361.93,230.576 1362.5,230.527 1363.07,231.678 1363.64,233.752 1364.2,233.8 1364.77,230.483 1365.34,230.518 1365.91,232.727 1366.48,234.641 1367.05,233.305 1367.61,233.371 1368.18,233.382 1368.75,230.389 1369.32,231.525 1369.89,231.562 1370.46,230.599 1371.02,229.658 1371.59,228.798 1372.16,231.12 1372.73,234.472 1373.3,234.227 1373.87,234.208 1374.43,238.189 1375,238.054 1375.57,238.423 1376.14,239.027 1376.71,237.483 1377.28,236.939 1377.84,235.461 1378.41,235.118 1378.98,234.942 1379.55,234.617 1380.12,234.256 1380.69,235.083 1381.25,234.652 1381.82,235.701 1382.39,235.295 1382.96,233.872 1383.53,234.433 1384.1,232.066 1384.66,233.073 1385.23,234.069 1385.8,234.732 1386.37,232.539 1386.94,232.515 1387.51,234.568 1388.07,234.237 1388.64,233.945 1389.21,232.634 1389.78,232.436 1390.35,234.426 1390.92,233.227 1391.48,231.935 1392.05,232.73 1392.62,232.444 1393.19,233.339 1393.76,234.203 1394.33,231.781 1394.89,231.513 1395.46,231.405 1396.03,232.39 1396.6,231.299 1397.17,232.247 1397.74,231.028 1398.3,232.019 1398.87,231.9 1399.44,231.773 1400.01,230.787 1400.58,232.695 1401.15,233.628 1401.71,232.571 1402.28,232.653 1402.85,231.473 1403.42,232.397 1403.99,232.427 1404.56,232.063 1405.13,229.935 1405.69,230.12 1406.26,230.075 1406.83,232.396 1407.4,230.396 1407.97,230.492 1408.54,227.643 1409.1,228.785 1409.67,229.706 1410.24,228.669 1410.81,227.899 1411.38,226.198 1411.95,226.289 1412.51,226.786 1413.08,225.301 1413.65,225.797 1414.22,224.031 1414.79,224.555 1415.36,225.08 1415.92,225.661 1416.49,225.127 1417.06,226.537 1417.63,227.892 1418.2,227.164 1418.77,228.711 1419.33,228.121 1419.9,227.557 1420.47,227.865 1421.04,225.933 1421.61,226.311 1422.18,227.884 1422.74,230.251 1423.31,231.605 1423.88,231.596 1424.45,230.705 1425.02,230.005 1425.59,233.314 1426.15,232.385 1426.72,234.557 1427.29,233.561 1427.86,233.516 1428.43,233.414 1429,233.183 1429.56,232.941 1430.13,231.983 1430.7,232.065 1431.27,233.298 1431.84,235.388 1432.41,234.103 1432.97,232.966 1433.54,231.945 1434.11,233.056 1434.68,232.244 1435.25,231.286 1435.82,231.615 1436.38,231.676 1436.95,232.784 1437.52,234.023 1438.09,233.82 1438.66,234.571 1439.23,234.669 1439.79,233.573 1440.36,233.474 1440.93,233.381 1441.5,233.487 1442.07,235.574 1442.64,235.648 1443.2,234.52 1443.77,234.336 1444.34,234.455 1444.91,235.359 1445.48,235.094 1446.05,234.064 1446.61,234.043 1447.18,234.697 1447.75,233.516 1448.32,234.428 1448.89,233.254 1449.46,235.279 1450.02,236.962 1450.59,236.563 1451.16,237.358 1451.73,236.998 1452.3,236.758 1452.87,236.266 1453.43,236.9 1454,236.446 1454.57,236.35 1455.14,235.013 1455.71,234.885 1456.28,233.424 1456.84,233.158 1457.41,234.129 1457.98,232.926 1458.55,233.844 1459.12,233.78 1459.69,236.879 1460.25,236.445 1460.82,235.986 1461.39,235.753 1461.96,235.258 1462.53,234.161 1463.1,234.903 1463.66,233.53 1464.23,232.209 1464.8,229.933 1465.37,230.988 1465.94,230.988 1466.51,232.973 1467.07,232.74 1467.64,233.941 1468.21,233.91 1468.78,233.755 1469.35,233.549 1469.92,236.214 1470.48,238.104 1471.05,236.732 1471.62,236.351 1472.19,236.787 1472.76,236.192 1473.33,234.866 1473.89,232.6 1474.46,233.498 1475.03,232.031 1475.6,231.238 1476.17,228.412 1476.74,228.658 1477.31,227.735 1477.87,228.999 1478.44,227.969 1479.01,227.025 1479.58,226.261 1480.15,226.678 1480.72,228.12 1481.28,229.597 1481.85,228.958 1482.42,225.855 1482.99,227.657 1483.56,230.869 1484.13,229.786 1484.69,229.809 1485.26,229.777 1485.83,226.833 1486.4,226.255 1486.97,227.81 1487.54,225.96 1488.1,226.564 1488.67,229.196 1489.24,229.561 1489.81,229.792 1490.38,231.021 1490.95,231.271 1491.51,231.529 1492.08,230.52 1492.65,230.85 1493.22,229.893 1493.79,230.125 1494.36,228.397 1494.92,228.646 1495.49,228.031 1496.06,230.252 1496.63,229.326 1497.2,227.387 1497.77,224.804 1498.33,224.48 1498.9,225.409 1499.47,224.704 1500.04,226.282 1500.61,231.022 1501.18,232.464 1501.74,234.72 1502.31,233.61 1502.88,234.628 1503.45,230.279 1504.02,229.369 1504.59,228.746 1505.15,228.102 1505.72,231.749 1506.29,228.994 1506.86,228.018 1507.43,229.557 1508,231.958 1508.56,232.422 1509.13,232.548 1509.7,235.799 1510.27,234.665 1510.84,233.599 1511.41,234.863 1511.97,235.798 1512.54,233.583 1513.11,233.619 1513.68,235.724 1514.25,233.594 1514.82,234.26 1515.38,234.478 1515.95,234.205 1516.52,234.348 1517.09,233.355 1517.66,233.454 1518.23,235.621 1518.79,236.625 1519.36,238.29 1519.93,238.953 1520.5,237.649 1521.07,235.336 1521.64,234.303 1522.2,235.256 1522.77,234.218 1523.34,235.196 1523.91,236.08 1524.48,237.882 1525.05,236.429 1525.61,235.118 1526.18,233.862 1526.75,233.848 1527.32,235.577 1527.89,237.449 1528.46,238.23 1529.02,238.829 1529.59,239.294 1530.16,237.837 1530.73,237.6 1531.3,236.111 1531.87,234.89 1532.43,234.459 1533,235.466 1533.57,237.164 1534.14,238.011 1534.71,237.348 1535.28,236.659 1535.84,236.212 1536.41,235.632 1536.98,236.466 1537.55,236.337 1538.12,236.868 1538.69,236.479 1539.25,235.363 1539.82,235.11 1540.39,233.813 1540.96,234.936 1541.53,234.848 1542.1,235.646 1542.66,234.215 1543.23,234.178 1543.8,232.735 1544.37,231.638 1544.94,230.416 1545.51,230.622 1546.08,230.543 1546.64,230.565 1547.21,230.452 1547.78,231.507 1548.35,230.485 1548.92,229.415 1549.49,229.547 1550.05,228.887 1550.62,231.179 1551.19,231.228 1551.76,233.204 1552.33,235.184 1552.9,235 1553.46,235.695 1554.03,234.301 1554.6,232.054 1555.17,230.971 1555.74,233.089 1556.31,233.959 1556.87,231.752 1557.44,229.887 1558.01,228.81 1558.58,230.071 1559.15,228.986 1559.72,231.039 1560.28,229.892 1560.85,231.934 1561.42,230.902 1561.99,232.887 1562.56,232.615 1563.13,232.478 1563.69,230.375 1564.26,231.663 1564.83,232.438 1565.4,232.13 1565.97,233.1 1566.54,232.811 1567.1,233.731 1567.67,233.717 1568.24,234.467 1568.81,233.142 1569.38,232.087 1569.95,233.112 1570.51,232.753 1571.08,231.771 1571.65,231.639 1572.22,231.56 1572.79,231.612 1573.36,233.662 1573.92,231.68 1574.49,232.599 1575.06,233.6 1575.63,232.411 1576.2,233.228 1576.77,231.131 1577.33,231.201 1577.9,230.187 1578.47,229.536 1579.04,230.836 1579.61,230.902 1580.18,231.823 1580.74,230.935 1581.31,230.026 1581.88,229.011 1582.45,228.287 1583.02,228.308 1583.59,228.699 1584.15,229.966 1584.72,229.013 1585.29,227.207 1585.86,227.671 1586.43,227.004 1587,228.549 1587.56,227.753 1588.13,225.926 1588.7,225.506 1589.27,225.888 1589.84,225.308 1590.41,224.886 1590.97,226.523 1591.54,227.032 1592.11,227.332 1592.68,228.89 1593.25,232.374 1593.82,233.545 1594.38,236.518 1594.95,235.039 1595.52,233.033 1596.09,233.084 1596.66,235.235 1597.23,234.217 1597.79,233.041 1598.36,233.289 1598.93,230.098 1599.5,230.184 1600.07,229.251 1600.64,227.437 1601.2,229.039 1601.77,228.245 1602.34,227.459 1602.91,229.049 1603.48,228.363 1604.05,227.792 1604.61,229.174 1605.18,230.431 1605.75,229.553 1606.32,231.683 1606.89,232.796 1607.46,231.76 1608.02,229.914 1608.59,228.974 1609.16,230.404 1609.73,229.666 1610.3,230.093 1610.87,230.23 1611.43,231.544 1612,235.565 1612.57,235.344 1613.14,234.322 1613.71,233.156 1614.28,237.303 1614.84,235.085 1615.41,234.969 1615.98,234.119 1616.55,233.847 1617.12,232.8 1617.69,232.789 1618.26,231.781 1618.82,233.931 1619.39,233.94 1619.96,232.942 1620.53,233.915 1621.1,234.748 1621.67,236.536 1622.23,238.528 1622.8,238.095 1623.37,237.741 1623.94,236.433 1624.51,234.121 1625.08,234.092 1625.64,234.942 1626.21,234.987 1626.78,234.938 1627.35,233.573 1627.92,232.612 1628.49,232.415 1629.05,232.523 1629.62,232.65 1630.19,231.534 1630.76,231.447 1631.33,232.353 1631.9,233.54 1632.46,233.499 1633.03,233.513 1633.6,232.255 1634.17,235.386 1634.74,235.06 1635.31,235.07 1635.87,237.965 1636.44,237.203 1637.01,234.879 1637.58,234.813 1638.15,234.737 1638.72,232.555 1639.28,232.46 1639.85,232.563 1640.42,231.483 1640.99,232.771 1641.56,233.649 1642.13,231.575 1642.69,231.682 1643.26,230.776 1643.83,231.906 1644.4,230.883 1644.97,230.967 1645.54,232.089 1646.1,231.999 1646.67,231.853 1647.24,231.837 1647.81,231.973 1648.38,229.098 1648.95,229.283 1649.51,229.33 1650.08,230.773 1650.65,230.885 1651.22,232.946 1651.79,231.14 1652.36,229.27 1652.92,228.614 1653.49,227.883 1654.06,227.988 1654.63,224.322 1655.2,225.997 1655.77,225.531 1656.33,228.325 1656.9,228.764 1657.47,229.014 1658.04,231.364 1658.61,230.519 1659.18,230.668 1659.74,233.059 1660.31,235.169 1660.88,235.215 1661.45,233.098 1662.02,232.229 1662.59,233.346 1663.15,233.459 1663.72,233.576 1664.29,234.61 1664.86,236.516 1665.43,237.304 1666,236 1666.56,232.923 1667.13,232.95 1667.7,234.959 1668.27,234.713 1668.84,233.583 1669.41,232.505 1669.97,231.494 1670.54,232.773 1671.11,234.887 1671.68,234.851 1672.25,232.511 1672.82,233.691 1673.38,233.818 1673.95,235.735 1674.52,234.5 1675.09,236.378 1675.66,235.049 1676.23,236.802 1676.79,235.433 1677.36,234.157 1677.93,232.021 1678.5,232.973 1679.07,230.862 1679.64,229.093 1680.2,230.545 1680.77,231.711 1681.34,231.607 1681.91,230.573 1682.48,230.717 1683.05,232 1683.61,233.934 1684.18,233.784 1684.75,230.661 1685.32,229.71 1685.89,231.047 1686.46,231.243 1687.02,232.446 1687.59,232.351 1688.16,236.443 1688.73,235.087 1689.3,235.052 1689.87,235.017 1690.44,236.718 1691,236.516 1691.57,238.086 1692.14,237.652 1692.71,238.217 1693.28,236.855 1693.85,236.456 1694.41,235.136 1694.98,235.624 1695.55,234.291 1696.12,232.186 1696.69,233.412 1697.26,235.416 1697.82,232.246 1698.39,231.232 1698.96,231.142 1699.53,230.137 1700.1,229.28 1700.67,230.426 1701.23,230.562 1701.8,230.721 1702.37,229.508 1702.94,229.835 1703.51,226.868 1704.08,226.19 1704.64,225.768 1705.21,224.214 1705.78,225.726 1706.35,227.306 1706.92,229.824 1707.49,233.262 1708.05,234.226 1708.62,233.064 1709.19,231.97 1709.76,231.979 1710.33,232.874 1710.9,233.069 1711.46,234.971 1712.03,233.997 1712.6,232.959 1713.17,235.053 1713.74,235.076 1714.31,233.955 1714.87,234.881 1715.44,234.733 1716.01,234.568 1716.58,231.271 1717.15,231.422 1717.72,232.437 1718.28,232.35 1718.85,232.206 1719.42,234.427 1719.99,234.286 1720.56,234.256 1721.13,234.16 1721.69,233.192 1722.26,232.218 1722.83,233.181 1723.4,231.081 1723.97,230.237 1724.54,229.607 1725.1,228.015 1725.67,225.949 1726.24,227.68 1726.81,229.141 1727.38,231.384 1727.95,230.512 1728.51,231.58 1729.08,235.616 1729.65,235.598 1730.22,238.334 1730.79,235.855 1731.36,235.604 1731.92,234.475 1732.49,236.616 1733.06,236.139 1733.63,236.978 1734.2,237.513 1734.77,238.211 1735.33,239.854 1735.9,236.142 1736.47,235.654 1737.04,236.456 1737.61,236.255 1738.18,236.879 1738.74,235.445 1739.31,230.987 1739.88,231.009 1740.45,233.06 1741.02,231.014 1741.59,227.072 1742.15,229.336 1742.72,229.526 1743.29,231.867 1743.86,231.683 1744.43,230.832 1745,229.931 1745.56,229.33 1746.13,228.406 1746.7,230.578 1747.27,229.582 1747.84,228.886 1748.41,230.365 1748.97,231.5 1749.54,231.517 1750.11,233.625 1750.68,234.61 1751.25,233.665 1751.82,233.703 1752.38,233.621 1752.95,234.656 1753.52,235.383 1754.09,232.182 1754.66,232.999 1755.23,234.661 1755.79,236.469 1756.36,237.159 1756.93,235.888 1757.5,234.55 1758.07,232.207 1758.64,233.144 1759.21,234.08 1759.77,234.896 1760.34,234.752 1760.91,234.446 1761.48,233.051 1762.05,234.882 1762.62,234.949 1763.18,235.773 1763.75,235.687 1764.32,234.387 1764.89,235.263 1765.46,234.126 1766.03,233.898 1766.59,232.802 1767.16,233.844 1767.73,233.58 1768.3,231.166 1768.87,230.286 1769.44,230.414 1770,230.336 1770.57,230.334 1771.14,231.3 1771.71,231.487 1772.28,231.507 1772.85,232.323 1773.41,229.221 1773.98,231.553 1774.55,230.68 1775.12,230.665 1775.69,233.707 1776.26,231.582 1776.82,231.688 1777.39,231.744 1777.96,233.676 1778.53,234.442 1779.1,235.381 1779.67,237.289 1780.23,234.842 1780.8,232.814 1781.37,233.727 1781.94,233.798 1782.51,234.648 1783.08,232.388 1783.64,233.451 1784.21,233.178 1784.78,232.906 1785.35,231.719 1785.92,231.496 1786.49,231.417 1787.05,232.423 1787.62,231.163 1788.19,231.058 1788.76,229.992 1789.33,226.915 1789.9,226.222 1790.46,227.798 1791.03,227.047 1791.6,227.122 1792.17,227.573 1792.74,230.155 1793.31,230.212 1793.87,232.222 1794.44,232.178 1795.01,231.058 1795.58,231.038 1796.15,233.087 1796.72,231.805 1797.28,231.805 1797.85,232.851 1798.42,233.846 1798.99,233.684 1799.56,233.785 1800.13,233.58 1800.69,233.397 1801.26,232.372 1801.83,232.333 1802.4,231.234 1802.97,231.125 1803.54,232.171 1804.1,232.069 1804.67,230.959 1805.24,227.983 1805.81,228.243 1806.38,230.549 1806.95,230.703 1807.51,229.774 1808.08,230.827 1808.65,230.999 1809.22,231.204 1809.79,228.312 1810.36,227.26 1810.92,226.711 1811.49,226.227 1812.06,227.56 1812.63,227.901 1813.2,228.226 1813.77,227.684 1814.33,227.258 1814.9,228.807 1815.47,227.145 1816.04,228.402 1816.61,229.64 1817.18,230.011 1817.74,232.24 1818.31,232.225 1818.88,232.334 1819.45,230.504 1820.02,232.689 1820.59,234.829 1821.15,235.9 1821.72,235.916 1822.29,234.58 1822.86,236.68 1823.43,235.309 1824,237.34 1824.56,237.407 1825.13,235.133 1825.7,234.144 1826.27,234.006 1826.84,233.845 1827.41,232.923 1827.97,232.644 1828.54,232.762 1829.11,231.61 1829.68,232.778 1830.25,233.929 1830.82,234.725 1831.39,233.52 1831.95,233.818 1832.52,233.008 1833.09,232.955 1833.66,235.132 1834.23,232.808 1834.8,232.672 1835.36,234.828 1835.93,231.523 1836.5,231.662 1837.07,232.989 1837.64,234.112 1838.21,233.992 1838.77,236.01 1839.34,231.563 1839.91,232.693 1840.48,233.758 1841.05,233.628 1841.62,233.682 1842.18,233.801 1842.75,234.883 1843.32,234.85 1843.89,233.289 1844.46,232.153 1845.03,232.034 1845.59,234.209 1846.16,234.157 1846.73,233.086 1847.3,233.168 1847.87,232.087 1848.44,236.026 1849,235.8 1849.57,234.503 1850.14,234.329 1850.71,236.432 1851.28,237.11 1851.85,237.724 1852.41,237.066 1852.98,236.773 1853.55,237.338 1854.12,235.962 1854.69,235.538 1855.26,235.22 1855.82,234.183 1856.39,234.113 1856.96,231.973 1857.53,231.896 1858.1,229.97 1858.67,230.262 1859.23,234.511 1859.8,233.395 1860.37,235.366 1860.94,235.097 1861.51,232.832 1862.08,232.829 1862.64,232.8 1863.21,233.549 1863.78,232.161 1864.35,230.94 1864.92,229.974 1865.49,229.036 1866.05,227.243 1866.62,225.21 1867.19,227.648 1867.76,229.932 1868.33,230.002 1868.9,231.104 1869.46,232.15 1870.03,231.05 1870.6,231.045 1871.17,231.992 1871.74,232.199 1872.31,231.938 1872.87,230.906 1873.44,230.808 1874.01,230.884 1874.58,231.129 1875.15,232.211 1875.72,233.343 1876.28,232.331 1876.85,231.126 1877.42,231.149 1877.99,231.148 1878.56,229.261 1879.13,228.456 1879.69,228.632 1880.26,228.942 1880.83,229.315 1881.4,232.43 1881.97,232.402 1882.54,232.23 1883.1,231.447 1883.67,231.501 1884.24,232.571 1884.81,232.669 1885.38,233.156 1885.95,236.34 1886.51,236.117 1887.08,234.941 1887.65,231.673 1888.22,231.663 1888.79,230.791 1889.36,233.936 1889.92,233.719 1890.49,234.483 1891.06,233.438 1891.63,234.204 1892.2,235.211 1892.77,235.997 1893.33,233.675 1893.9,232.516 1894.47,232.57 1895.04,235.505 1895.61,234.364 1896.18,233.176 1896.74,234.191 1897.31,234.909 1897.88,235.892 1898.45,234.461 1899.02,233.301 1899.59,233.963 1900.16,232.638 1900.72,232.368 1901.29,231.333 1901.86,232.466 1902.43,233.231 1903,233.202 1903.57,232.007 1904.13,232.055 1904.7,231.912 1905.27,231.681 1905.84,233.739 1906.41,231.609 1906.98,232.407 1907.54,233.378 1908.11,233.381 1908.68,235.188 1909.25,233.91 1909.82,233.821 1910.39,234.867 1910.95,236.737 1911.52,236.678 1912.09,236.312 1912.66,236.861 1913.23,235.521 1913.8,235.014 1914.36,234.93 1914.93,232.538 1915.5,231.403 1916.07,233.482 1916.64,229.226 1917.21,229.419 1917.77,231.633 1918.34,233.625 1918.91,232.58 1919.48,231.48 1920.05,230.684 1920.62,229.539 1921.18,229.848 1921.75,231.193 1922.32,233.159 1922.89,232.057 1923.46,232.085 1924.03,231.762 1924.59,229.727 1925.16,228.836 1925.73,227.978 1926.3,229.172 1926.87,230.229 1927.44,234.441 1928,234.369 1928.57,233.308 1929.14,233.324 1929.71,232.073 1930.28,231.932 1930.85,232.998 1931.41,234.066 1931.98,233.884 1932.55,233.615 1933.12,233.523 1933.69,235.28 1934.26,233.096 1934.82,232.936 1935.39,232.703 1935.96,230.457 1936.53,229.607 1937.1,231.841 1937.67,230.669 1938.23,231.6 1938.8,232.552 1939.37,233.53 1939.94,234.402 1940.51,235.112 1941.08,234.53 1941.64,233.248 1942.21,233.068 1942.78,234.015 1943.35,232.754 1943.92,229.506 1944.49,228.728 1945.05,227.955 1945.62,229.107 1946.19,229.352 1946.76,229.382 1947.33,228.38 1947.9,228.318 1948.46,229.437 1949.03,231.661 1949.6,234.465 1950.17,234.276 1950.74,232.092 1951.31,231.145 1951.87,226.933 1952.44,228.359 1953.01,228.739 1953.58,230.263 1954.15,230.361 1954.72,231.39 1955.28,232.438 1955.85,230.376 1956.42,229.567 1956.99,229.843 1957.56,228.863 1958.13,230.072 1958.69,231.237 1959.26,232.37 1959.83,232.227 1960.4,232.357 1960.97,233.501 1961.54,232.516 1962.1,232.48 1962.67,232.533 1963.24,232.439 1963.81,232.45 1964.38,232.414 1964.95,231.567 1965.51,234.777 1966.08,233.547 1966.65,234.404 1967.22,235.275 1967.79,234.959 1968.36,235.92 1968.92,234.802 1969.49,234.542 1970.06,233.367 1970.63,234.221 1971.2,235.082 1971.77,234.679 1972.34,233.533 1972.9,234.634 1973.47,234.298 1974.04,235.125 1974.61,234.554 1975.18,234.385 1975.75,234.338 1976.31,233.03 1976.88,231.94 1977.45,231.99 1978.02,229.177 1978.59,229.501 1979.16,228.689 1979.72,227.742 1980.29,227.016 1980.86,229.276 1981.43,229.231 1982,227.53 1982.57,227.975 1983.13,227.248 1983.7,230.722 1984.27,230.819 1984.84,229.067 1985.41,230.391 1985.98,225.409 1986.54,226.97 1987.11,222.232 1987.68,224.965 1988.25,226.629 1988.82,227.18 1989.39,225.645 1989.95,225.088 1990.52,225.516 1991.09,227.348 1991.66,229.151 1992.23,230.529 1992.8,231.727 1993.36,232.812 1993.93,232.893 1994.5,232.03 1995.07,231.032 1995.64,233.205 1996.21,233.186 1996.77,235.321 1997.34,232.952 1997.91,233.838 1998.48,234.852 1999.05,235.783 1999.62,235.741 2000.18,235.467 2000.75,235.325 2001.32,235.152 2001.89,237.983 2002.46,238.823 2003.03,238.677 2003.59,238.197 2004.16,235.758 2004.73,235.76 2005.3,235.593 2005.87,235.287 2006.44,233.015 2007,233.008 2007.57,233.806 2008.14,233.729 2008.71,232.685 2009.28,232.605 2009.85,233.486 2010.41,235.509 2010.98,236.522 2011.55,235.269 2012.12,233.943 2012.69,233.908 2013.26,234.729 2013.82,233.702 2014.39,234.744 2014.96,232.696 2015.53,233.614 2016.1,230.463 2016.67,227.642 2017.23,224.973 2017.8,224.541 2018.37,226.145 2018.94,228.507 2019.51,228.712 2020.08,228.985 2020.64,228.107 2021.21,231.612 2021.78,231.889 2022.35,233.034 2022.92,235.059 2023.49,232.025 2024.05,233.182 2024.62,232.507 2025.19,232.672 2025.76,233.778 2026.33,230.817 2026.9,231.961 2027.46,229.943 2028.03,229.068 2028.6,230.234 2029.17,229.447 2029.74,230.907 2030.31,229.946 2030.87,229.044 2031.44,231.251 2032.01,233.394 2032.58,235.214 2033.15,237.192 2033.72,234.972 2034.28,237.885 2034.85,240.714 2035.42,239.169 2035.99,238.708 2036.56,237.219 2037.13,237.896 2037.69,235.504 2038.26,238.219 2038.83,234.845 2039.4,236.128 2039.97,235.827 2040.54,232.717 2041.11,232.87 2041.67,232.751 2042.24,231.52 2042.81,231.568 2043.38,231.616 2043.95,233.781 2044.52,233.722 2045.08,234.491 2045.65,233.303 2046.22,235.146 2046.79,234.919 2047.36,234.722 2047.93,234.601 2048.49,234.332 2049.06,230.134 2049.63,230.33 2050.2,230.599 2050.77,231.846 2051.34,230.708 2051.9,231.915 2052.47,230.878 2053.04,230.927 2053.61,231.187 2054.18,228.268 2054.75,230.673 2055.31,229.757 2055.88,230.789 2056.45,228.922 2057.02,228.338 2057.59,229.65 2058.16,229.9 2058.72,230.148 2059.29,229.165 2059.86,229.414 2060.43,228.774 2061,228.849 2061.57,228.098 2062.13,228.409 2062.7,227.731 2063.27,226.951 2063.84,228.205 2064.41,229.787 2064.98,229.121 2065.54,229.297 2066.11,229.605 2066.68,230.785 2067.25,231.052 2067.82,232.134 2068.39,232.539 2068.95,233.649 2069.52,233.669 2070.09,230.638 2070.66,231.928 2071.23,229.942 2071.8,229.064 2072.36,229.379 2072.93,229.583 2073.5,226.872 2074.07,225.448 2074.64,226.225 2075.21,228.778 2075.77,227.996 2076.34,228.4 2076.91,227.9 2077.48,229.329 2078.05,229.821 2078.62,230.332 2079.18,230.843 2079.75,232.067 2080.32,233.248 2080.89,233.329 2081.46,235.257 2082.03,235.223 2082.59,235.227 2083.16,234.144 2083.73,234.923 2084.3,234.667 2084.87,234.448 2085.44,237.332 2086,238.915 2086.57,233.594 2087.14,233.319 2087.71,232.361 2088.28,233.55 2088.85,233.56 2089.41,231.414 2089.98,231.618 2090.55,233.809 2091.12,233.922 2091.69,235.875 2092.26,233.766 2092.82,234.939 2093.39,233.924 2093.96,233.947 2094.53,234.961 2095.1,235.909 2095.67,234.636 2096.23,235.595 2096.8,235.375 2097.37,235.242 2097.94,236.289 2098.51,236.157 2099.08,234.954 2099.64,236.755 2100.21,235.391 2100.78,236.409 2101.35,234.902 2101.92,233.514 2102.49,233.532 2103.05,233.245 2103.62,233.051 2104.19,232.069 2104.76,231.236 2105.33,233.523 2105.9,233.242 2106.46,232.216 2107.03,233.214 2107.6,232.323 2108.17,234.311 2108.74,235.047 2109.31,234.859 2109.87,233.594 2110.44,234.559 2111.01,234.566 2111.58,234.485 2112.15,234.548 2112.72,235.33 2113.29,236.288 2113.85,238.143 2114.42,237.777 2114.99,240.584 2115.56,240.859 2116.13,242.291 2116.7,240.693 2117.26,237.847 2117.83,237.339 2118.4,234.908 2118.97,235.878 2119.54,235.446 2120.11,236.11 2120.67,236.962 2121.24,237.606 2121.81,236.27 2122.38,235.742 2122.95,235.494 2123.52,236.013 2124.08,235.743 2124.65,235.338 2125.22,236.046 2125.79,237.552 2126.36,234.954 2126.93,233.531 2127.49,234.23 2128.06,234.006 2128.63,235.765 2129.2,235.312 2129.77,235.047 2130.34,233.858 2130.9,233.757 2131.47,231.636 2132.04,229.383 2132.61,228.446 2133.18,227.493 2133.75,227.718 2134.31,227.866 2134.88,227.122 2135.45,227.326 2136.02,227.615 2136.59,228.01 2137.16,228.446 2137.72,228.78 2138.29,228.888 2138.86,229.069 2139.43,229.346 2140,230.421 2140.57,229.565 2141.13,227.862 2141.7,227.088 2142.27,227.519 2142.84,225.79 2143.41,227.098 2143.98,228.272 2144.54,228.465 2145.11,228.715 2145.68,227.789 2146.25,228.199 2146.82,229.653 2147.39,228.953 2147.95,228.025 2148.52,228.23 2149.09,227.568 2149.66,229.045 2150.23,227.443 2150.8,229.76 2151.36,230.908 2151.93,230.027 2152.5,230.258 2153.07,230.537 2153.64,231.749 2154.21,227.878 2154.77,229.311 2155.34,228.832 2155.91,228.157 2156.48,227.6 2157.05,226.955 2157.62,228.538 2158.18,228.767 2158.75,227.068 2159.32,230.652 2159.89,233.883 \"/>\n<path clip-path=\"url(#clip200)\" d=\"M1625.75 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1625.75 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip200)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1625.75,1245.03 2150.8,1245.03 2150.8,1089.51 1625.75,1089.51 1625.75,1245.03 \"/>\n<polyline clip-path=\"url(#clip200)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1645.83,1141.35 1766.28,1141.35 \"/>\n<path clip-path=\"url(#clip200)\" d=\"M1793.76 1125.34 L1793.76 1132.71 L1802.53 1132.71 L1802.53 1136.02 L1793.76 1136.02 L1793.76 1150.09 Q1793.76 1153.26 1794.61 1154.16 Q1795.49 1155.07 1798.16 1155.07 L1802.53 1155.07 L1802.53 1158.63 L1798.16 1158.63 Q1793.23 1158.63 1791.35 1156.8 Q1789.48 1154.95 1789.48 1150.09 L1789.48 1136.02 L1786.35 1136.02 L1786.35 1132.71 L1789.48 1132.71 L1789.48 1125.34 L1793.76 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M1819.92 1145.6 Q1814.75 1145.6 1812.76 1146.78 Q1810.77 1147.96 1810.77 1150.81 Q1810.77 1153.08 1812.25 1154.42 Q1813.76 1155.74 1816.33 1155.74 Q1819.87 1155.74 1822 1153.24 Q1824.15 1150.72 1824.15 1146.55 L1824.15 1145.6 L1819.92 1145.6 M1828.41 1143.84 L1828.41 1158.63 L1824.15 1158.63 L1824.15 1154.7 Q1822.69 1157.06 1820.52 1158.19 Q1818.34 1159.3 1815.19 1159.3 Q1811.21 1159.3 1808.85 1157.08 Q1806.51 1154.84 1806.51 1151.09 Q1806.51 1146.71 1809.43 1144.49 Q1812.37 1142.27 1818.18 1142.27 L1824.15 1142.27 L1824.15 1141.85 Q1824.15 1138.91 1822.21 1137.31 Q1820.29 1135.69 1816.79 1135.69 Q1814.57 1135.69 1812.46 1136.22 Q1810.36 1136.76 1808.41 1137.82 L1808.41 1133.89 Q1810.75 1132.98 1812.95 1132.54 Q1815.15 1132.08 1817.23 1132.08 Q1822.86 1132.08 1825.63 1135 Q1828.41 1137.91 1828.41 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M1852.21 1136.69 Q1851.49 1136.27 1850.63 1136.09 Q1849.8 1135.88 1848.78 1135.88 Q1845.17 1135.88 1843.23 1138.24 Q1841.3 1140.58 1841.3 1144.97 L1841.3 1158.63 L1837.02 1158.63 L1837.02 1132.71 L1841.3 1132.71 L1841.3 1136.73 Q1842.65 1134.37 1844.8 1133.24 Q1846.95 1132.08 1850.03 1132.08 Q1850.47 1132.08 1851 1132.15 Q1851.54 1132.2 1852.18 1132.31 L1852.21 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M1872.9 1145.37 Q1872.9 1140.74 1870.98 1138.19 Q1869.08 1135.65 1865.63 1135.65 Q1862.21 1135.65 1860.29 1138.19 Q1858.39 1140.74 1858.39 1145.37 Q1858.39 1149.97 1860.29 1152.52 Q1862.21 1155.07 1865.63 1155.07 Q1869.08 1155.07 1870.98 1152.52 Q1872.9 1149.97 1872.9 1145.37 M1877.16 1155.41 Q1877.16 1162.03 1874.22 1165.25 Q1871.28 1168.49 1865.22 1168.49 Q1862.97 1168.49 1860.98 1168.15 Q1858.99 1167.82 1857.11 1167.13 L1857.11 1162.98 Q1858.99 1164 1860.82 1164.49 Q1862.65 1164.97 1864.54 1164.97 Q1868.73 1164.97 1870.82 1162.78 Q1872.9 1160.6 1872.9 1156.18 L1872.9 1154.07 Q1871.58 1156.36 1869.52 1157.5 Q1867.46 1158.63 1864.59 1158.63 Q1859.82 1158.63 1856.91 1155 Q1853.99 1151.36 1853.99 1145.37 Q1853.99 1139.35 1856.91 1135.72 Q1859.82 1132.08 1864.59 1132.08 Q1867.46 1132.08 1869.52 1133.22 Q1871.58 1134.35 1872.9 1136.64 L1872.9 1132.71 L1877.16 1132.71 L1877.16 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M1908.11 1144.6 L1908.11 1146.69 L1888.53 1146.69 Q1888.8 1151.09 1891.17 1153.4 Q1893.55 1155.69 1897.79 1155.69 Q1900.24 1155.69 1902.53 1155.09 Q1904.85 1154.49 1907.11 1153.28 L1907.11 1157.31 Q1904.82 1158.28 1902.42 1158.79 Q1900.01 1159.3 1897.53 1159.3 Q1891.33 1159.3 1887.69 1155.69 Q1884.08 1152.08 1884.08 1145.92 Q1884.08 1139.56 1887.51 1135.83 Q1890.96 1132.08 1896.79 1132.08 Q1902.02 1132.08 1905.05 1135.46 Q1908.11 1138.82 1908.11 1144.6 M1903.85 1143.35 Q1903.8 1139.86 1901.88 1137.78 Q1899.98 1135.69 1896.84 1135.69 Q1893.27 1135.69 1891.12 1137.71 Q1888.99 1139.72 1888.67 1143.38 L1903.85 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M1919.31 1125.34 L1919.31 1132.71 L1928.09 1132.71 L1928.09 1136.02 L1919.31 1136.02 L1919.31 1150.09 Q1919.31 1153.26 1920.17 1154.16 Q1921.05 1155.07 1923.71 1155.07 L1928.09 1155.07 L1928.09 1158.63 L1923.71 1158.63 Q1918.78 1158.63 1916.91 1156.8 Q1915.03 1154.95 1915.03 1150.09 L1915.03 1136.02 L1911.91 1136.02 L1911.91 1132.71 L1915.03 1132.71 L1915.03 1125.34 L1919.31 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M1953.39 1166.5 L1953.39 1169.81 L1928.76 1169.81 L1928.76 1166.5 L1953.39 1166.5 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip200)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1645.83,1193.19 1766.28,1193.19 \"/>\n<path clip-path=\"url(#clip200)\" d=\"M1808.06 1194.82 L1808.06 1210.47 L1803.8 1210.47 L1803.8 1194.96 Q1803.8 1191.28 1802.37 1189.45 Q1800.93 1187.62 1798.06 1187.62 Q1794.61 1187.62 1792.62 1189.82 Q1790.63 1192.02 1790.63 1195.82 L1790.63 1210.47 L1786.35 1210.47 L1786.35 1184.55 L1790.63 1184.55 L1790.63 1188.57 Q1792.16 1186.24 1794.22 1185.08 Q1796.3 1183.92 1799.01 1183.92 Q1803.48 1183.92 1805.77 1186.7 Q1808.06 1189.45 1808.06 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M1826.61 1187.53 Q1823.18 1187.53 1821.19 1190.22 Q1819.2 1192.88 1819.2 1197.53 Q1819.2 1202.18 1821.17 1204.87 Q1823.16 1207.53 1826.61 1207.53 Q1830.01 1207.53 1832 1204.85 Q1833.99 1202.16 1833.99 1197.53 Q1833.99 1192.93 1832 1190.24 Q1830.01 1187.53 1826.61 1187.53 M1826.61 1183.92 Q1832.16 1183.92 1835.33 1187.53 Q1838.5 1191.14 1838.5 1197.53 Q1838.5 1203.9 1835.33 1207.53 Q1832.16 1211.14 1826.61 1211.14 Q1821.03 1211.14 1817.86 1207.53 Q1814.71 1203.9 1814.71 1197.53 Q1814.71 1191.14 1817.86 1187.53 Q1821.03 1183.92 1826.61 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M1860.59 1188.53 Q1859.87 1188.11 1859.01 1187.93 Q1858.18 1187.72 1857.16 1187.72 Q1853.55 1187.72 1851.61 1190.08 Q1849.68 1192.42 1849.68 1196.81 L1849.68 1210.47 L1845.4 1210.47 L1845.4 1184.55 L1849.68 1184.55 L1849.68 1188.57 Q1851.03 1186.21 1853.18 1185.08 Q1855.33 1183.92 1858.41 1183.92 Q1858.85 1183.92 1859.38 1183.99 Q1859.92 1184.04 1860.56 1184.15 L1860.59 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M1884.41 1189.52 Q1886 1186.65 1888.23 1185.29 Q1890.45 1183.92 1893.46 1183.92 Q1897.51 1183.92 1899.71 1186.77 Q1901.91 1189.59 1901.91 1194.82 L1901.91 1210.47 L1897.62 1210.47 L1897.62 1194.96 Q1897.62 1191.24 1896.3 1189.43 Q1894.98 1187.62 1892.28 1187.62 Q1888.97 1187.62 1887.04 1189.82 Q1885.12 1192.02 1885.12 1195.82 L1885.12 1210.47 L1880.84 1210.47 L1880.84 1194.96 Q1880.84 1191.21 1879.52 1189.43 Q1878.2 1187.62 1875.45 1187.62 Q1872.18 1187.62 1870.26 1189.85 Q1868.34 1192.05 1868.34 1195.82 L1868.34 1210.47 L1864.06 1210.47 L1864.06 1184.55 L1868.34 1184.55 L1868.34 1188.57 Q1869.8 1186.19 1871.84 1185.06 Q1873.87 1183.92 1876.67 1183.92 Q1879.5 1183.92 1881.47 1185.36 Q1883.46 1186.79 1884.41 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.037 ± 0.022\n  with uncertainty of ± 0.00200528782218194\n  from 62 blocks after 5 transformations (k = 6).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.01476 ± (0.00333741, 0.00322284) (MC)\n  95% confidence interval: [-4.02145, -4.00852]) (MC)\n  linear error propagation: -4.01521 ± 0.00323129\n  |δ_y| = |0.00251399| (≤ 0.1 for normal approx)\n  Blocking successful with 15 blocks after 7 transformations (k = 8).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.014757324164896, val_l = 0.0066916230917160036, val_u = 0.006241371787742089)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.step, df.shift, ylabel=\"energy\", xlabel=\"step\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.step[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.step[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip230\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip230)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip231\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip230)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip232\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip232)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip232)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip232)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip232)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip230)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip230)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip230)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip230)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip230)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip230)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M1237.32 1391.71 L1237.32 1397.25 Q1234.84 1395.98 1232.17 1395.34 Q1229.49 1394.71 1226.63 1394.71 Q1222.27 1394.71 1220.07 1396.04 Q1217.91 1397.38 1217.91 1400.05 Q1217.91 1402.09 1219.47 1403.27 Q1221.03 1404.41 1225.74 1405.46 L1227.74 1405.91 Q1233.98 1407.25 1236.59 1409.7 Q1239.23 1412.12 1239.23 1416.48 Q1239.23 1421.44 1235.29 1424.34 Q1231.37 1427.23 1224.5 1427.23 Q1221.63 1427.23 1218.51 1426.66 Q1215.42 1426.12 1211.99 1425.01 L1211.99 1418.96 Q1215.23 1420.65 1218.38 1421.51 Q1221.54 1422.33 1224.62 1422.33 Q1228.76 1422.33 1230.99 1420.93 Q1233.22 1419.5 1233.22 1416.92 Q1233.22 1414.54 1231.59 1413.26 Q1230 1411.99 1224.56 1410.81 L1222.52 1410.33 Q1217.08 1409.19 1214.66 1406.83 Q1212.24 1404.45 1212.24 1400.31 Q1212.24 1395.28 1215.81 1392.54 Q1219.37 1389.8 1225.93 1389.8 Q1229.17 1389.8 1232.04 1390.28 Q1234.9 1390.76 1237.32 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M1254.35 1380.54 L1254.35 1390.66 L1266.41 1390.66 L1266.41 1395.22 L1254.35 1395.22 L1254.35 1414.57 Q1254.35 1418.93 1255.53 1420.17 Q1256.74 1421.41 1260.4 1421.41 L1266.41 1421.41 L1266.41 1426.31 L1260.4 1426.31 Q1253.62 1426.31 1251.04 1423.8 Q1248.46 1421.25 1248.46 1414.57 L1248.46 1395.22 L1244.17 1395.22 L1244.17 1390.66 L1248.46 1390.66 L1248.46 1380.54 L1254.35 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M1304.61 1407.02 L1304.61 1409.89 L1277.68 1409.89 Q1278.06 1415.94 1281.31 1419.12 Q1284.59 1422.27 1290.41 1422.27 Q1293.79 1422.27 1296.94 1421.44 Q1300.12 1420.61 1303.24 1418.96 L1303.24 1424.5 Q1300.09 1425.83 1296.78 1426.53 Q1293.47 1427.23 1290.06 1427.23 Q1281.53 1427.23 1276.54 1422.27 Q1271.57 1417.3 1271.57 1408.84 Q1271.57 1400.08 1276.28 1394.96 Q1281.02 1389.8 1289.04 1389.8 Q1296.24 1389.8 1300.41 1394.45 Q1304.61 1399.07 1304.61 1407.02 M1298.75 1405.3 Q1298.69 1400.5 1296.05 1397.63 Q1293.44 1394.77 1289.11 1394.77 Q1284.21 1394.77 1281.25 1397.54 Q1278.32 1400.31 1277.87 1405.34 L1298.75 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M1319.89 1420.96 L1319.89 1439.87 L1314 1439.87 L1314 1390.66 L1319.89 1390.66 L1319.89 1396.07 Q1321.73 1392.89 1324.53 1391.36 Q1327.37 1389.8 1331.28 1389.8 Q1337.77 1389.8 1341.82 1394.96 Q1345.89 1400.12 1345.89 1408.52 Q1345.89 1416.92 1341.82 1422.08 Q1337.77 1427.23 1331.28 1427.23 Q1327.37 1427.23 1324.53 1425.71 Q1321.73 1424.15 1319.89 1420.96 M1339.81 1408.52 Q1339.81 1402.06 1337.14 1398.4 Q1334.5 1394.71 1329.85 1394.71 Q1325.2 1394.71 1322.53 1398.4 Q1319.89 1402.06 1319.89 1408.52 Q1319.89 1414.98 1322.53 1418.67 Q1325.2 1422.33 1329.85 1422.33 Q1334.5 1422.33 1337.14 1418.67 Q1339.81 1414.98 1339.81 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip232)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1145.3 2211.02,1145.3 \"/>\n<polyline clip-path=\"url(#clip232)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,978.888 2211.02,978.888 \"/>\n<polyline clip-path=\"url(#clip232)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,812.479 2211.02,812.479 \"/>\n<polyline clip-path=\"url(#clip232)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,646.07 2211.02,646.07 \"/>\n<polyline clip-path=\"url(#clip232)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,479.661 2211.02,479.661 \"/>\n<polyline clip-path=\"url(#clip232)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,313.252 2211.02,313.252 \"/>\n<polyline clip-path=\"url(#clip230)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip230)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1145.3 365.751,1145.3 \"/>\n<polyline clip-path=\"url(#clip230)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,978.888 365.751,978.888 \"/>\n<polyline clip-path=\"url(#clip230)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,812.479 365.751,812.479 \"/>\n<polyline clip-path=\"url(#clip230)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,646.07 365.751,646.07 \"/>\n<polyline clip-path=\"url(#clip230)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,479.661 365.751,479.661 \"/>\n<polyline clip-path=\"url(#clip230)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,313.252 365.751,313.252 \"/>\n<path clip-path=\"url(#clip230)\" d=\"M298.909 1131.1 Q295.298 1131.1 293.469 1134.66 Q291.664 1138.2 291.664 1145.33 Q291.664 1152.44 293.469 1156 Q295.298 1159.54 298.909 1159.54 Q302.543 1159.54 304.349 1156 Q306.177 1152.44 306.177 1145.33 Q306.177 1138.2 304.349 1134.66 Q302.543 1131.1 298.909 1131.1 M298.909 1127.39 Q304.719 1127.39 307.775 1132 Q310.853 1136.58 310.853 1145.33 Q310.853 1154.06 307.775 1158.67 Q304.719 1163.25 298.909 1163.25 Q293.099 1163.25 290.02 1158.67 Q286.964 1154.06 286.964 1145.33 Q286.964 1136.58 290.02 1132 Q293.099 1127.39 298.909 1127.39 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M259.557 992.233 L267.196 992.233 L267.196 965.868 L258.886 967.534 L258.886 963.275 L267.15 961.608 L271.826 961.608 L271.826 992.233 L279.465 992.233 L279.465 996.168 L259.557 996.168 L259.557 992.233 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M298.909 964.687 Q295.298 964.687 293.469 968.252 Q291.664 971.793 291.664 978.923 Q291.664 986.029 293.469 989.594 Q295.298 993.136 298.909 993.136 Q302.543 993.136 304.349 989.594 Q306.177 986.029 306.177 978.923 Q306.177 971.793 304.349 968.252 Q302.543 964.687 298.909 964.687 M298.909 960.983 Q304.719 960.983 307.775 965.59 Q310.853 970.173 310.853 978.923 Q310.853 987.65 307.775 992.256 Q304.719 996.84 298.909 996.84 Q293.099 996.84 290.02 992.256 Q286.964 987.65 286.964 978.923 Q286.964 970.173 290.02 965.59 Q293.099 960.983 298.909 960.983 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M262.775 825.824 L279.094 825.824 L279.094 829.759 L257.15 829.759 L257.15 825.824 Q259.812 823.07 264.395 818.44 Q269.002 813.787 270.182 812.445 Q272.428 809.921 273.307 808.185 Q274.21 806.426 274.21 804.736 Q274.21 801.982 272.266 800.246 Q270.344 798.509 267.242 798.509 Q265.043 798.509 262.59 799.273 Q260.159 800.037 257.381 801.588 L257.381 796.866 Q260.205 795.732 262.659 795.153 Q265.113 794.574 267.15 794.574 Q272.52 794.574 275.715 797.259 Q278.909 799.945 278.909 804.435 Q278.909 806.565 278.099 808.486 Q277.312 810.384 275.205 812.977 Q274.627 813.648 271.525 816.866 Q268.423 820.06 262.775 825.824 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M298.909 798.278 Q295.298 798.278 293.469 801.843 Q291.664 805.384 291.664 812.514 Q291.664 819.62 293.469 823.185 Q295.298 826.727 298.909 826.727 Q302.543 826.727 304.349 823.185 Q306.177 819.62 306.177 812.514 Q306.177 805.384 304.349 801.843 Q302.543 798.278 298.909 798.278 M298.909 794.574 Q304.719 794.574 307.775 799.181 Q310.853 803.764 310.853 812.514 Q310.853 821.241 307.775 825.847 Q304.719 830.431 298.909 830.431 Q293.099 830.431 290.02 825.847 Q286.964 821.241 286.964 812.514 Q286.964 803.764 290.02 799.181 Q293.099 794.574 298.909 794.574 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M272.914 644.716 Q276.27 645.434 278.145 647.702 Q280.043 649.971 280.043 653.304 Q280.043 658.42 276.525 661.221 Q273.006 664.022 266.525 664.022 Q264.349 664.022 262.034 663.582 Q259.742 663.165 257.289 662.309 L257.289 657.795 Q259.233 658.929 261.548 659.508 Q263.863 660.086 266.386 660.086 Q270.784 660.086 273.076 658.35 Q275.39 656.614 275.39 653.304 Q275.39 650.248 273.238 648.536 Q271.108 646.799 267.289 646.799 L263.261 646.799 L263.261 642.957 L267.474 642.957 Q270.923 642.957 272.752 641.591 Q274.58 640.202 274.58 637.61 Q274.58 634.948 272.682 633.536 Q270.807 632.1 267.289 632.1 Q265.367 632.1 263.168 632.517 Q260.969 632.934 258.33 633.813 L258.33 629.647 Q260.992 628.906 263.307 628.536 Q265.645 628.165 267.705 628.165 Q273.029 628.165 276.131 630.596 Q279.233 633.003 279.233 637.124 Q279.233 639.994 277.59 641.985 Q275.946 643.952 272.914 644.716 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M298.909 631.869 Q295.298 631.869 293.469 635.434 Q291.664 638.975 291.664 646.105 Q291.664 653.211 293.469 656.776 Q295.298 660.318 298.909 660.318 Q302.543 660.318 304.349 656.776 Q306.177 653.211 306.177 646.105 Q306.177 638.975 304.349 635.434 Q302.543 631.869 298.909 631.869 M298.909 628.165 Q304.719 628.165 307.775 632.772 Q310.853 637.355 310.853 646.105 Q310.853 654.832 307.775 659.438 Q304.719 664.022 298.909 664.022 Q293.099 664.022 290.02 659.438 Q286.964 654.832 286.964 646.105 Q286.964 637.355 290.02 632.772 Q293.099 628.165 298.909 628.165 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M271.594 466.455 L259.789 484.904 L271.594 484.904 L271.594 466.455 M270.367 462.381 L276.247 462.381 L276.247 484.904 L281.177 484.904 L281.177 488.793 L276.247 488.793 L276.247 496.941 L271.594 496.941 L271.594 488.793 L255.992 488.793 L255.992 484.279 L270.367 462.381 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M298.909 465.46 Q295.298 465.46 293.469 469.025 Q291.664 472.566 291.664 479.696 Q291.664 486.802 293.469 490.367 Q295.298 493.909 298.909 493.909 Q302.543 493.909 304.349 490.367 Q306.177 486.802 306.177 479.696 Q306.177 472.566 304.349 469.025 Q302.543 465.46 298.909 465.46 M298.909 461.756 Q304.719 461.756 307.775 466.363 Q310.853 470.946 310.853 479.696 Q310.853 488.423 307.775 493.029 Q304.719 497.613 298.909 497.613 Q293.099 497.613 290.02 493.029 Q286.964 488.423 286.964 479.696 Q286.964 470.946 290.02 466.363 Q293.099 461.756 298.909 461.756 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M258.793 295.972 L277.15 295.972 L277.15 299.907 L263.076 299.907 L263.076 308.38 Q264.094 308.032 265.113 307.87 Q266.131 307.685 267.15 307.685 Q272.937 307.685 276.316 310.856 Q279.696 314.028 279.696 319.444 Q279.696 325.023 276.224 328.125 Q272.752 331.204 266.432 331.204 Q264.256 331.204 261.988 330.833 Q259.742 330.463 257.335 329.722 L257.335 325.023 Q259.418 326.157 261.641 326.713 Q263.863 327.268 266.34 327.268 Q270.344 327.268 272.682 325.162 Q275.02 323.055 275.02 319.444 Q275.02 315.833 272.682 313.727 Q270.344 311.62 266.34 311.62 Q264.465 311.62 262.59 312.037 Q260.738 312.454 258.793 313.333 L258.793 295.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M298.909 299.051 Q295.298 299.051 293.469 302.616 Q291.664 306.157 291.664 313.287 Q291.664 320.393 293.469 323.958 Q295.298 327.5 298.909 327.5 Q302.543 327.5 304.349 323.958 Q306.177 320.393 306.177 313.287 Q306.177 306.157 304.349 302.616 Q302.543 299.051 298.909 299.051 M298.909 295.347 Q304.719 295.347 307.775 299.954 Q310.853 304.537 310.853 313.287 Q310.853 322.014 307.775 326.62 Q304.719 331.204 298.909 331.204 Q293.099 331.204 290.02 326.62 Q286.964 322.014 286.964 313.287 Q286.964 304.537 290.02 299.954 Q293.099 295.347 298.909 295.347 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip232)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1022.68 400.199,910.037 400.786,933.488 401.372,830.386 401.958,735.897 402.545,761.072 403.131,678.665 403.718,604.805 404.304,534.165 404.891,471.642 405.477,414.729 406.063,363.345 406.65,396.422 407.236,351.333 407.823,310.957 408.409,274.989 408.995,304.884 409.582,274.22 410.168,248.319 410.755,275.233 411.341,252.954 411.927,235.179 412.514,219.895 413.1,284.092 413.687,269.653 414.273,257.327 414.86,249.005 415.446,271.163 416.032,264.156 416.619,286.641 417.205,354.125 417.792,371.758 418.378,368.25 418.964,365.484 419.551,365.735 420.137,383.956 420.724,401.026 421.31,417.776 421.896,419.914 422.483,452.232 423.069,454.914 423.656,458.05 424.242,474.129 424.829,488.799 425.415,504.14 426.001,530.377 426.588,553.851 427.174,567.478 427.761,581.207 428.347,594.88 428.933,622.765 429.52,625.965 430.106,644.79 430.693,656.572 431.279,667.628 431.865,678.167 432.452,683.361 433.038,688.597 433.625,693.907 434.211,699.37 434.798,721.249 435.384,742.418 435.97,762.733 436.557,771.77 437.143,780.958 437.73,785.857 438.316,790.899 438.902,809.003 439.489,814.272 440.075,823.675 440.662,832.78 441.248,841.711 441.835,847.51 442.421,864.147 443.007,869.915 443.594,885.805 444.18,900.665 444.767,905.093 445.353,913.237 445.939,918.221 446.526,922.818 447.112,930.358 447.699,938.303 448.285,943.336 448.871,948.558 449.458,964.441 450.044,971.802 450.631,984.009 451.217,993.145 451.804,999.707 452.39,1008.59 452.976,1012.76 453.563,1018.66 454.149,1024.65 454.736,1028.19 455.322,1043.14 455.908,1057.53 456.495,1066.46 457.081,1071.6 457.668,1078.52 458.254,1082.87 458.84,1085.41 459.427,1092.01 460.013,1098.48 460.6,1100.81 461.186,1111.25 461.773,1119.3 462.359,1124.7 462.945,1126.9 463.532,1130.66 464.118,1139.96 464.705,1144.84 465.291,1147.91 465.877,1152.52 466.464,1153.55 467.05,1156.55 467.637,1157.47 468.223,1158.79 468.809,1161.9 469.396,1162.91 469.982,1165.72 470.569,1168.59 471.155,1172.99 471.742,1173.93 472.328,1177.21 472.914,1184.81 473.501,1185.58 474.087,1189.74 474.674,1193.61 475.26,1195.33 475.846,1194.18 476.433,1197.57 477.019,1197.6 477.606,1199.69 478.192,1201.61 478.778,1201.98 479.365,1203.74 479.951,1207.12 480.538,1210.41 481.124,1211.98 481.711,1213.45 482.297,1216.42 482.883,1214.54 483.47,1213.06 484.056,1214.61 484.643,1214.85 485.229,1216.38 485.815,1219.58 486.402,1216.19 486.988,1220.85 487.575,1220.69 488.161,1221.98 488.748,1220.35 489.334,1221.77 489.92,1221.47 490.507,1222.93 491.093,1219.93 491.68,1219.8 492.266,1220.3 492.852,1220.67 493.439,1220.71 494.025,1220.84 494.612,1221.2 495.198,1224.55 495.784,1224.69 496.371,1226.07 496.957,1227.42 497.544,1230.02 498.13,1228.37 498.717,1229.45 499.303,1227.76 499.889,1229.27 500.476,1229.24 501.062,1229.41 501.649,1230.74 502.235,1232.17 502.821,1230.75 503.408,1233.56 503.994,1231.81 504.581,1233.02 505.167,1234.26 505.753,1231.19 506.34,1234.11 506.926,1238.1 507.513,1241.99 508.099,1239.89 508.686,1239.69 509.272,1241.83 509.858,1245.38 510.445,1243.35 511.031,1241.37 511.618,1242.47 512.204,1246 512.79,1245.24 513.377,1245.97 513.963,1246.94 514.55,1244.74 515.136,1241.22 515.722,1242.19 516.309,1243.11 516.895,1243.9 517.482,1245.93 518.068,1243.41 518.655,1244.06 519.241,1243.63 519.827,1243.08 520.414,1242.37 521,1240.28 521.587,1238.5 522.173,1238.19 522.759,1237.84 523.346,1240.25 523.932,1239.72 524.519,1243.49 525.105,1244.21 525.691,1244.87 526.278,1246.7 526.864,1248.41 527.451,1250.16 528.037,1250.53 528.624,1246.75 529.21,1247.31 529.796,1246.22 530.383,1244.13 530.969,1239.21 531.556,1240.3 532.142,1239.86 532.728,1239.49 533.315,1241.71 533.901,1243.72 534.488,1244.26 535.074,1247.95 535.661,1247.08 536.247,1247.62 536.833,1246.78 537.42,1244.57 538.006,1242.33 538.593,1243.26 539.179,1242.59 539.765,1241.96 540.352,1242.73 540.938,1243.27 541.525,1243.99 542.111,1238.92 542.697,1235.78 543.284,1240.79 543.87,1240.01 544.457,1239.25 545.043,1239.18 545.63,1240.22 546.216,1237.15 546.802,1236.8 547.389,1237.86 547.975,1234.38 548.562,1235.51 549.148,1235.27 549.734,1234.77 550.321,1237.09 550.907,1239.62 551.494,1238 552.08,1236.08 552.666,1237.11 553.253,1236.67 553.839,1237.68 554.426,1241.34 555.012,1241.73 555.599,1242.14 556.185,1239.96 556.771,1239 557.358,1239.6 557.944,1240.57 558.531,1241.2 559.117,1240.65 559.703,1246.77 560.29,1238.73 560.876,1239.52 561.463,1240.08 562.049,1239.47 562.635,1239.05 563.222,1238.64 563.808,1238.1 564.395,1237.78 564.981,1235.94 565.568,1238.26 566.154,1240.46 566.74,1241.07 567.327,1243.1 567.913,1243.59 568.5,1242.62 569.086,1241.71 569.672,1239.33 570.259,1237.42 570.845,1239.84 571.432,1239.16 572.018,1239.89 572.605,1237.89 573.191,1238.6 573.777,1233.91 574.364,1230.75 574.95,1230.7 575.537,1228.89 576.123,1227.56 576.709,1226.39 577.296,1223.91 577.882,1223.75 578.469,1222.45 579.055,1221.39 579.641,1224.25 580.228,1223.95 580.814,1225.33 581.401,1223.88 581.987,1221.11 582.574,1222.84 583.16,1224.19 583.746,1222.99 584.333,1222.97 584.919,1224.27 585.506,1225.59 586.092,1224.19 586.678,1221.41 587.265,1220.07 587.851,1222.93 588.438,1221.74 589.024,1225.82 589.61,1228.65 590.197,1229.93 590.783,1231.47 591.37,1230.92 591.956,1234.75 592.543,1232.89 593.129,1232.28 593.715,1229.01 594.302,1228.78 594.888,1231.16 595.475,1232.5 596.061,1230.44 596.647,1231.55 597.234,1229.79 597.82,1226.96 598.407,1226.86 598.993,1228.2 599.579,1226.66 600.166,1226.49 600.752,1225.13 601.339,1225 601.925,1224.91 602.512,1223.42 603.098,1226.44 603.684,1227.78 604.271,1227.45 604.857,1229.12 605.444,1227.6 606.03,1230.7 606.616,1229.15 607.203,1226.32 607.789,1225.97 608.376,1227.43 608.962,1225.78 609.548,1225.85 610.135,1225.29 610.721,1225.2 611.308,1223.56 611.894,1225.98 612.481,1222.85 613.067,1222.97 613.653,1221.53 614.24,1218.86 614.826,1220.48 615.413,1221.84 615.999,1223.17 616.585,1223.39 617.172,1223.23 617.758,1223.34 618.345,1223.14 618.931,1225.62 619.518,1224 620.104,1225.36 620.69,1225.27 621.277,1228.04 621.863,1229.28 622.45,1230.36 623.036,1233.85 623.622,1234.09 624.209,1233.72 624.795,1232.06 625.382,1230.07 625.968,1230.73 626.554,1230.31 627.141,1228.6 627.727,1226.77 628.314,1226.77 628.9,1227.86 629.487,1228.76 630.073,1225.61 630.659,1226.8 631.246,1229.13 631.832,1230.1 632.419,1229.61 633.005,1229.39 633.591,1228.01 634.178,1227.62 634.764,1229.83 635.351,1229.41 635.937,1228.95 636.523,1226.98 637.11,1229.46 637.696,1226.01 638.283,1224.41 638.869,1221.24 639.456,1219.82 640.042,1222.76 640.628,1222.65 641.215,1225.27 641.801,1225.19 642.388,1222.18 642.974,1221.84 643.56,1221.82 644.147,1223.1 644.733,1221.36 645.32,1221.28 645.906,1221.5 646.492,1222.83 647.079,1225.53 647.665,1225.24 648.252,1224.89 648.838,1224.66 649.425,1224.4 650.011,1224.29 650.597,1226.86 651.184,1224.93 651.77,1227.38 652.357,1225.65 652.943,1226.76 653.529,1226.28 654.116,1225.81 654.702,1226.79 655.289,1225.21 655.875,1222.31 656.462,1220.95 657.048,1219.59 657.634,1219.62 658.221,1218.16 658.807,1218.18 659.394,1219.57 659.98,1221.07 660.566,1217.98 661.153,1220.77 661.739,1222.24 662.326,1222.12 662.912,1221.88 663.498,1224.43 664.085,1221.38 664.671,1225.24 665.258,1223.41 665.844,1220.79 666.431,1219.62 667.017,1219.92 667.603,1220.13 668.19,1221.77 668.776,1222.96 669.363,1220.21 669.949,1222.83 670.535,1225.17 671.122,1226.09 671.708,1225.6 672.295,1226.83 672.881,1226.23 673.467,1225.85 674.054,1222.88 674.64,1221.33 675.227,1223.52 675.813,1221.81 676.4,1224.39 676.986,1222.78 677.572,1221.09 678.159,1220.74 678.745,1220.66 679.332,1218.11 679.918,1216.78 680.504,1218.31 681.091,1218.3 681.677,1218.33 682.264,1215.67 682.85,1215.61 683.436,1216.23 684.023,1217.83 684.609,1220.22 685.196,1220.27 685.782,1220.18 686.369,1221.56 686.955,1220.29 687.541,1221.64 688.128,1222.78 688.714,1219.4 689.301,1221.9 689.887,1221.63 690.473,1221.32 691.06,1221.39 691.646,1221.43 692.233,1222.59 692.819,1219.66 693.405,1217.86 693.992,1221.81 694.578,1221.54 695.165,1219.81 695.751,1218.42 696.338,1219.95 696.924,1219.94 697.51,1220.03 698.097,1215.84 698.683,1215.79 699.27,1216.01 699.856,1216.35 700.442,1217.83 701.029,1216.69 701.615,1218.13 702.202,1217.97 702.788,1216.67 703.375,1219.21 703.961,1220.29 704.547,1221.62 705.134,1221.6 705.72,1221.42 706.307,1219.61 706.893,1222.07 707.479,1221.82 708.066,1223.03 708.652,1222.87 709.239,1222.46 709.825,1220.71 710.411,1219.1 710.998,1218.88 711.584,1220.23 712.171,1219.91 712.757,1221.08 713.344,1220.52 713.93,1221.68 714.516,1220.16 715.103,1220.04 715.689,1225.35 716.276,1222.1 716.862,1221.83 717.448,1217.47 718.035,1217.6 718.621,1218.92 719.208,1216.31 719.794,1217.65 720.38,1217.38 720.967,1215.92 721.553,1217.45 722.14,1213.45 722.726,1215.02 723.313,1216.44 723.899,1217.91 724.485,1217.95 725.072,1216.61 725.658,1215.36 726.245,1215.39 726.831,1215.63 727.417,1210.36 728.004,1208.01 728.59,1208.78 729.177,1210.29 729.763,1210.55 730.349,1211.01 730.936,1212.63 731.522,1212.82 732.109,1211.93 732.695,1209.5 733.282,1210.1 733.868,1209.35 734.454,1209.62 735.041,1211.5 735.627,1215.86 736.214,1217.46 736.8,1218.61 737.386,1218.44 737.973,1218.43 738.559,1219.42 739.146,1220.83 739.732,1221.9 740.318,1223.05 740.905,1220.12 741.491,1222.83 742.078,1227.69 742.664,1225.61 743.251,1226.64 743.837,1223.32 744.423,1223.05 745.01,1220.21 745.596,1217.47 746.183,1217.61 746.769,1216.2 747.355,1214.56 747.942,1214.55 748.528,1214.87 749.115,1212.35 749.701,1215.3 750.288,1216.91 750.874,1218.08 751.46,1217.97 752.047,1218 752.633,1217.98 753.22,1217.75 753.806,1217.66 754.392,1218.83 754.979,1221.35 755.565,1219.76 756.152,1219.56 756.738,1217.96 757.324,1216.4 757.911,1216.41 758.497,1219.36 759.084,1220.47 759.67,1218.72 760.257,1218.58 760.843,1215.78 761.429,1215.76 762.016,1215.78 762.602,1217.01 763.189,1218.1 763.775,1221.71 764.361,1221.32 764.948,1219.57 765.534,1218.29 766.121,1217.69 766.707,1217.24 767.293,1218.38 767.88,1217.97 768.466,1217.79 769.053,1220.44 769.639,1220.19 770.226,1221.36 770.812,1221.24 771.398,1219.8 771.985,1220.94 772.571,1220.7 773.158,1220.33 773.744,1218.83 774.33,1215.88 774.917,1215.78 775.503,1217.17 776.09,1216.79 776.676,1219.55 777.262,1217.83 777.849,1217.5 778.435,1217.68 779.022,1217.35 779.608,1215.8 780.195,1214.12 780.781,1213.1 781.367,1214.66 781.954,1213.29 782.54,1213.65 783.127,1214.95 783.713,1213.58 784.299,1213.46 784.886,1211.79 785.472,1210.37 786.059,1210.65 786.645,1208.27 787.232,1208.21 787.818,1209.99 788.404,1212.88 788.991,1212.87 789.577,1213.26 790.164,1214.53 790.75,1214.63 791.336,1214.58 791.923,1217.45 792.509,1217.18 793.096,1215.55 793.682,1215.36 794.268,1215.4 794.855,1215.52 795.441,1215.28 796.028,1214.99 796.614,1216.1 797.201,1217.5 797.787,1217.11 798.373,1218.06 798.96,1218.21 799.546,1217.85 800.133,1217.64 800.719,1217.67 801.305,1217.66 801.892,1220.27 802.478,1217.34 803.065,1225.17 803.651,1227.09 804.237,1228.74 804.824,1228.04 805.41,1227.42 805.997,1223.85 806.583,1219.51 807.17,1219.26 807.756,1219.22 808.342,1218.92 808.929,1214.36 809.515,1214.07 810.102,1211.13 810.688,1211.4 811.274,1210.34 811.861,1210.74 812.447,1210.91 813.034,1211.29 813.62,1210.18 814.206,1211.9 814.793,1212.22 815.379,1211.15 815.966,1210.14 816.552,1210.21 817.139,1210.64 817.725,1207.77 818.311,1208.36 818.898,1208.47 819.484,1208.88 820.071,1209.1 820.657,1210.78 821.243,1212.46 821.83,1213.83 822.416,1211.39 823.003,1208.57 823.589,1215.64 824.175,1213.94 824.762,1214.15 825.348,1212.86 825.935,1213.03 826.521,1212.88 827.108,1212.98 827.694,1213.01 828.28,1211.76 828.867,1207.83 829.453,1207.93 830.04,1213.68 830.626,1214.87 831.212,1212.34 831.799,1213.86 832.385,1212.4 832.972,1215.15 833.558,1213.56 834.145,1212.29 834.731,1212.42 835.317,1212.71 835.904,1214.44 836.49,1213.08 837.077,1214.74 837.663,1216.37 838.249,1217.97 838.836,1217.88 839.422,1214.99 840.009,1213.72 840.595,1213.76 841.181,1216.51 841.768,1214.93 842.354,1215.02 842.941,1217.66 843.527,1219.07 844.114,1219.02 844.7,1221.74 845.286,1221.67 845.873,1221.09 846.459,1220.93 847.046,1220.56 847.632,1221.7 848.218,1221.26 848.805,1220.82 849.391,1219.04 849.978,1221.66 850.564,1222.5 851.15,1223.52 851.737,1225.69 852.323,1226.33 852.91,1224.32 853.496,1223.66 854.083,1221.68 854.669,1225.36 855.255,1222.11 855.842,1219.22 856.428,1217.65 857.015,1217.02 857.601,1218.17 858.187,1217.86 858.774,1218.98 859.36,1218.75 859.947,1217.49 860.533,1221.22 861.119,1222.2 861.706,1217.94 862.292,1216.4 862.879,1216.27 863.465,1218.79 864.052,1217.28 864.638,1218.29 865.224,1220.78 865.811,1220.14 866.397,1222.43 866.984,1221.78 867.57,1216.91 868.156,1218.12 868.743,1216.61 869.329,1216.4 869.916,1213.53 870.502,1213.56 871.089,1213.4 871.675,1213.31 872.261,1210.42 872.848,1210.62 873.434,1213.53 874.021,1212.15 874.607,1209.56 875.193,1209.65 875.78,1209.82 876.366,1210.11 876.953,1211.32 877.539,1211.39 878.125,1211.55 878.712,1208.84 879.298,1211.81 879.885,1210.69 880.471,1212.12 881.058,1213.36 881.644,1212.19 882.23,1210.72 882.817,1212.08 883.403,1212.48 883.99,1212.32 884.576,1211.07 885.162,1208.3 885.749,1205.89 886.335,1206.44 886.922,1209.39 887.508,1209.95 888.094,1212.67 888.681,1212.49 889.267,1212.73 889.854,1214.32 890.44,1215.64 891.027,1214.25 891.613,1211.44 892.199,1211.32 892.786,1211.33 893.372,1213.77 893.959,1217.79 894.545,1218.9 895.131,1217.19 895.718,1218.47 896.304,1218.19 896.891,1215.23 897.477,1214.93 898.063,1214.9 898.65,1217.69 899.236,1213.29 899.823,1215.93 900.409,1216.07 900.996,1217.27 901.582,1214.35 902.168,1213.82 902.755,1215.15 903.341,1210.73 903.928,1212.14 904.514,1209.75 905.1,1209.99 905.687,1209.03 906.273,1210.72 906.86,1210.87 907.446,1209.64 908.032,1208.66 908.619,1208.87 909.205,1207.83 909.792,1208.38 910.378,1210.13 910.965,1210.52 911.551,1213.22 912.137,1212 912.724,1213.57 913.31,1212.22 913.897,1213.66 914.483,1216.26 915.069,1215.99 915.656,1215.79 916.242,1214.36 916.829,1217.05 917.415,1216.78 918.002,1216.62 918.588,1215.14 919.174,1215.42 919.761,1215.36 920.347,1213.96 920.934,1212.61 921.52,1212.32 922.106,1213.6 922.693,1211.03 923.279,1209.76 923.866,1210.18 924.452,1211.43 925.038,1210.15 925.625,1207.7 926.211,1206.55 926.798,1204.02 927.384,1203.36 927.971,1205.38 928.557,1207 929.143,1207.63 929.73,1209.54 930.316,1209.56 930.903,1211.06 931.489,1205.7 932.075,1204.81 932.662,1204.05 933.248,1206.02 933.835,1210.46 934.421,1213.27 935.007,1211.99 935.594,1209.5 936.18,1211 936.767,1209.79 937.353,1208.59 937.94,1208.81 938.526,1210.43 939.112,1210.56 939.699,1208.18 940.285,1208.58 940.872,1203.34 941.458,1204.04 942.044,1204.43 942.631,1203.48 943.217,1203.92 943.804,1205.96 944.39,1206.7 944.976,1207.22 945.563,1207.57 946.149,1210.56 946.736,1212.37 947.322,1212.6 947.909,1216.53 948.495,1215.03 949.081,1216.22 949.668,1215.79 950.254,1215.7 950.841,1215.54 951.427,1222.02 952.013,1222.95 952.6,1222.41 953.186,1219.12 953.773,1217.63 954.359,1217.28 954.945,1218.01 955.532,1217.9 956.118,1218.87 956.705,1219.74 957.291,1215.4 957.878,1215.38 958.464,1215.01 959.05,1213.54 959.637,1213.42 960.223,1213.12 960.81,1209.19 961.396,1208.22 961.982,1209.85 962.569,1213.25 963.155,1214.69 963.742,1209.28 964.328,1208.16 964.915,1208.67 965.501,1206.05 966.087,1206.65 966.674,1208.4 967.26,1212.96 967.847,1211.7 968.433,1210.37 969.019,1210.5 969.606,1213.02 970.192,1214.54 970.779,1217.03 971.365,1216.66 971.951,1216.37 972.538,1216.06 973.124,1212.99 973.711,1212.81 974.297,1212.93 974.884,1213.02 975.47,1213.07 976.056,1214.45 976.643,1217.07 977.229,1216.86 977.816,1215.19 978.402,1213.82 978.988,1211.26 979.575,1212.82 980.161,1212.67 980.748,1215.58 981.334,1215.33 981.92,1215.16 982.507,1218.84 983.093,1218.81 983.68,1218.64 984.266,1219.68 984.853,1219.13 985.439,1218.55 986.025,1218.34 986.612,1214.03 987.198,1214.3 987.785,1213.17 988.371,1211.9 988.957,1211.91 989.544,1213.56 990.13,1211.88 990.717,1213.48 991.303,1213.02 991.889,1216.95 992.476,1220.73 993.062,1218.86 993.649,1218.78 994.235,1219.65 994.822,1220.51 995.408,1218.71 995.994,1218.51 996.581,1213.86 997.167,1214.87 997.754,1214.81 998.34,1216.29 998.926,1216.03 999.513,1215.82 1000.1,1217.29 1000.69,1216.1 1001.27,1214.65 1001.86,1215.39 1002.44,1216.69 1003.03,1214.97 1003.62,1216.1 1004.2,1215.74 1004.79,1218.43 1005.38,1217.86 1005.96,1218.68 1006.55,1218.42 1007.14,1215.35 1007.72,1218.02 1008.31,1219.01 1008.9,1217.58 1009.48,1218.63 1010.07,1216.7 1010.65,1215.35 1011.24,1212.63 1011.83,1215.22 1012.41,1215.15 1013,1214.92 1013.59,1213.38 1014.17,1210.9 1014.76,1212.34 1015.35,1213.64 1015.93,1213.42 1016.52,1213.65 1017.11,1213.56 1017.69,1214.71 1018.28,1214.52 1018.86,1215.95 1019.45,1215.76 1020.04,1215.58 1020.62,1216.89 1021.21,1216.58 1021.8,1213.56 1022.38,1214.7 1022.97,1214.78 1023.56,1214.66 1024.14,1214.51 1024.73,1214.41 1025.32,1212.71 1025.9,1213.86 1026.49,1213.92 1027.07,1212.23 1027.66,1213.68 1028.25,1213.22 1028.83,1213.31 1029.42,1214.83 1030.01,1210.55 1030.59,1209.3 1031.18,1210.74 1031.77,1209.54 1032.35,1208.42 1032.94,1208.45 1033.52,1205.91 1034.11,1206.27 1034.7,1203.96 1035.28,1205.31 1035.87,1208.27 1036.46,1211.06 1037.04,1211.2 1037.63,1213.62 1038.22,1214.95 1038.8,1211.14 1039.39,1211.25 1039.98,1212.58 1040.56,1212.85 1041.15,1208.85 1041.73,1207.83 1042.32,1208.18 1042.91,1208.53 1043.49,1206.18 1044.08,1210.52 1044.67,1209.46 1045.25,1211.04 1045.84,1211.12 1046.43,1212.35 1047.01,1212.44 1047.6,1209.67 1048.19,1207.11 1048.77,1208.79 1049.36,1210.47 1049.94,1209.27 1050.53,1209.94 1051.12,1211.24 1051.7,1211.52 1052.29,1209.87 1052.88,1208.75 1053.46,1206.06 1054.05,1206.5 1054.64,1205.29 1055.22,1205.75 1055.81,1203.34 1056.39,1203.9 1056.98,1207.08 1057.57,1207.28 1058.15,1205.95 1058.74,1206.39 1059.33,1206.6 1059.91,1207.12 1060.5,1209.98 1061.09,1208.88 1061.67,1207.7 1062.26,1207.89 1062.85,1208.18 1063.43,1209.75 1064.02,1208.38 1064.6,1208.62 1065.19,1208.93 1065.78,1209.05 1066.36,1210.66 1066.95,1213.42 1067.54,1213.41 1068.12,1221.47 1068.71,1221.04 1069.3,1223.29 1069.88,1223.06 1070.47,1221.08 1071.06,1221.88 1071.64,1218.62 1072.23,1216.92 1072.81,1215.2 1073.4,1213.61 1073.99,1214.84 1074.57,1214.94 1075.16,1213.59 1075.75,1213.62 1076.33,1213.54 1076.92,1211.94 1077.51,1210.81 1078.09,1215.3 1078.68,1213.91 1079.26,1213.71 1079.85,1216.11 1080.44,1217.34 1081.02,1214.61 1081.61,1211.54 1082.2,1214.52 1082.78,1211.88 1083.37,1210.31 1083.96,1211.59 1084.54,1211.71 1085.13,1213.24 1085.72,1213.42 1086.3,1216.12 1086.89,1216.95 1087.47,1217.94 1088.06,1217.74 1088.65,1218.81 1089.23,1217.15 1089.82,1219.65 1090.41,1217.96 1090.99,1217.54 1091.58,1217.32 1092.17,1215.7 1092.75,1214.59 1093.34,1214.38 1093.93,1218.59 1094.51,1220.95 1095.1,1219.2 1095.68,1218.77 1096.27,1218.16 1096.86,1221.78 1097.44,1222.72 1098.03,1223.63 1098.62,1220.37 1099.2,1221.09 1099.79,1219.39 1100.38,1221.8 1100.96,1219.93 1101.55,1218.24 1102.14,1218.34 1102.72,1219.79 1103.31,1217.68 1103.89,1221.46 1104.48,1219.32 1105.07,1217.55 1105.65,1217.13 1106.24,1217.03 1106.83,1213.86 1107.41,1212.5 1108,1209.78 1108.59,1208.75 1109.17,1208 1109.76,1211.1 1110.34,1208.65 1110.93,1210.17 1111.52,1211.76 1112.1,1213.1 1112.69,1211.51 1113.28,1211.28 1113.86,1212.61 1114.45,1211.07 1115.04,1208.45 1115.62,1211.24 1116.21,1214.06 1116.8,1213.94 1117.38,1213.68 1117.97,1215.08 1118.55,1214.77 1119.14,1214.43 1119.73,1215.88 1120.31,1218.57 1120.9,1219.55 1121.49,1217.87 1122.07,1214.85 1122.66,1214.75 1123.25,1214.96 1123.83,1216.1 1124.42,1210.78 1125.01,1210.85 1125.59,1213.6 1126.18,1213.37 1126.76,1213.51 1127.35,1216.11 1127.94,1212.14 1128.52,1212.22 1129.11,1209.25 1129.7,1209.42 1130.28,1209.43 1130.87,1209.6 1131.46,1210.02 1132.04,1208.67 1132.63,1210.03 1133.21,1208.85 1133.8,1208.94 1134.39,1207.99 1134.97,1209.39 1135.56,1209.43 1136.15,1209.52 1136.73,1208.29 1137.32,1208.18 1137.91,1208.63 1138.49,1204.48 1139.08,1202.11 1139.67,1205.41 1140.25,1205.74 1140.84,1207.53 1141.42,1206.51 1142.01,1205.33 1142.6,1207.35 1143.18,1207.63 1143.77,1210.74 1144.36,1208.18 1144.94,1211.18 1145.53,1209.9 1146.12,1207.08 1146.7,1207.66 1147.29,1203.82 1147.88,1205.7 1148.46,1206.1 1149.05,1206.52 1149.63,1209.55 1150.22,1210.95 1150.81,1209.53 1151.39,1211.1 1151.98,1211.14 1152.57,1208.38 1153.15,1206.15 1153.74,1210.48 1154.33,1210.43 1154.91,1206.32 1155.5,1208.13 1156.09,1207.13 1156.67,1205.85 1157.26,1209.02 1157.84,1206.45 1158.43,1205.31 1159.02,1207.08 1159.6,1207.36 1160.19,1210.77 1160.78,1212.28 1161.36,1213.45 1161.95,1215.94 1162.54,1217 1163.12,1220.8 1163.71,1221.93 1164.29,1226.67 1164.88,1225.92 1165.47,1227.99 1166.05,1222.98 1166.64,1222.36 1167.23,1222.97 1167.81,1224.02 1168.4,1225.02 1168.99,1222.93 1169.57,1221.02 1170.16,1220.49 1170.75,1215.92 1171.33,1213.89 1171.92,1213.97 1172.5,1215.24 1173.09,1214.86 1173.68,1210.81 1174.26,1212.19 1174.85,1209.3 1175.44,1210.79 1176.02,1211.09 1176.61,1213.79 1177.2,1212.32 1177.78,1213.75 1178.37,1213.9 1178.96,1215.07 1179.54,1219 1180.13,1215.81 1180.71,1217.02 1181.3,1215.48 1181.89,1214.12 1182.47,1213.98 1183.06,1214.01 1183.65,1212.32 1184.23,1213.64 1184.82,1214.97 1185.41,1214.81 1185.99,1218.99 1186.58,1220.14 1187.16,1215.82 1187.75,1210.21 1188.34,1209.25 1188.92,1212.2 1189.51,1210.79 1190.1,1210.75 1190.68,1211.06 1191.27,1212.44 1191.86,1212.6 1192.44,1213.9 1193.03,1215.07 1193.62,1213.67 1194.2,1217.63 1194.79,1218.78 1195.37,1215.68 1195.96,1214.12 1196.55,1214.01 1197.13,1212.62 1197.72,1208.52 1198.31,1208.7 1198.89,1210.23 1199.48,1212.83 1200.07,1215.34 1200.65,1216.21 1201.24,1215.93 1201.83,1215.73 1202.41,1214.31 1203,1214.22 1203.58,1214.13 1204.17,1211.34 1204.76,1210.14 1205.34,1211.69 1205.93,1209.02 1206.52,1207.68 1207.1,1206.49 1207.69,1205.68 1208.28,1204.37 1208.86,1206.07 1209.45,1202.37 1210.03,1203.09 1210.62,1201.96 1211.21,1205.21 1211.79,1205.54 1212.38,1207.84 1212.97,1209.82 1213.55,1209.98 1214.14,1210.19 1214.73,1206.38 1215.31,1208.16 1215.9,1211.18 1216.49,1212.6 1217.07,1212.37 1217.66,1213.87 1218.24,1213.72 1218.83,1214.9 1219.42,1210.89 1220,1210.7 1220.59,1212.32 1221.18,1212.11 1221.76,1213.23 1222.35,1213.06 1222.94,1211.64 1223.52,1211.61 1224.11,1211.3 1224.7,1211.56 1225.28,1208.84 1225.87,1207.53 1226.45,1204.91 1227.04,1205.73 1227.63,1210.29 1228.21,1210.59 1228.8,1213.2 1229.39,1214.49 1229.97,1217.14 1230.56,1219.74 1231.15,1220.65 1231.73,1220.38 1232.32,1220.41 1232.91,1220 1233.49,1221.2 1234.08,1220.95 1234.66,1215.17 1235.25,1213.62 1235.84,1214.94 1236.42,1216.51 1237.01,1213.71 1237.6,1215.07 1238.18,1213.38 1238.77,1214.67 1239.36,1213.31 1239.94,1212.05 1240.53,1211.88 1241.11,1214.51 1241.7,1214.39 1242.29,1215.71 1242.87,1214.33 1243.46,1216.92 1244.05,1216.59 1244.63,1213.81 1245.22,1216.51 1245.81,1216.23 1246.39,1217.6 1246.98,1215.87 1247.57,1218.5 1248.15,1213.85 1248.74,1213.65 1249.32,1212.14 1249.91,1213.22 1250.5,1213.28 1251.08,1212.11 1251.67,1213.47 1252.26,1216.15 1252.84,1218.51 1253.43,1218.04 1254.02,1218.97 1254.6,1217.24 1255.19,1216.94 1255.78,1218.08 1256.36,1216.57 1256.95,1218.9 1257.53,1217.26 1258.12,1215.7 1258.71,1215.47 1259.29,1216.96 1259.88,1217.78 1260.47,1220 1261.05,1221.06 1261.64,1217.98 1262.23,1217.84 1262.81,1215.14 1263.4,1212.51 1263.98,1213.81 1264.57,1213.71 1265.16,1213.65 1265.74,1213.4 1266.33,1213.36 1266.92,1214.48 1267.5,1215.97 1268.09,1215.88 1268.68,1216.93 1269.26,1216.82 1269.85,1220.45 1270.44,1221.24 1271.02,1219.21 1271.61,1217.32 1272.19,1214.58 1272.78,1218.52 1273.37,1214.19 1273.95,1214.11 1274.54,1216.65 1275.13,1216.24 1275.71,1215.9 1276.3,1218.48 1276.89,1218.07 1277.47,1217.72 1278.06,1217.63 1278.65,1219.96 1279.23,1215.48 1279.82,1216.75 1280.4,1216.54 1280.99,1213.46 1281.58,1213.42 1282.16,1214.83 1282.75,1214.58 1283.34,1214.41 1283.92,1214.46 1284.51,1214.39 1285.1,1215.78 1285.68,1217.04 1286.27,1216.87 1286.86,1216.78 1287.44,1213.71 1288.03,1213.62 1288.61,1215.08 1289.2,1213.5 1289.79,1214.65 1290.37,1212.93 1290.96,1212.85 1291.55,1210.19 1292.13,1210.04 1292.72,1208.79 1293.31,1207.69 1293.89,1207.95 1294.48,1206.75 1295.06,1207.23 1295.65,1207.47 1296.24,1207.79 1296.82,1208.2 1297.41,1208.48 1298,1207.51 1298.58,1210.43 1299.17,1210.5 1299.76,1210.65 1300.34,1213.57 1300.93,1212.14 1301.52,1211.84 1302.1,1213.04 1302.69,1212.79 1303.27,1212.5 1303.86,1210.99 1304.45,1209.58 1305.03,1212.34 1305.62,1208.27 1306.21,1205.84 1306.79,1204.82 1307.38,1204.99 1307.97,1205.2 1308.55,1204.52 1309.14,1203.46 1309.73,1204.18 1310.31,1204.33 1310.9,1207.37 1311.48,1207.3 1312.07,1210.18 1312.66,1207.73 1313.24,1208.19 1313.83,1207.21 1314.42,1207.63 1315,1207.72 1315.59,1207.69 1316.18,1209.01 1316.76,1213.13 1317.35,1212.1 1317.93,1212.01 1318.52,1210.65 1319.11,1210.48 1319.69,1209.11 1320.28,1207.69 1320.87,1207.8 1321.45,1205.31 1322.04,1203.36 1322.63,1203.88 1323.21,1204.66 1323.8,1205.24 1324.39,1207.06 1324.97,1210.27 1325.56,1210.31 1326.14,1210.45 1326.73,1209.29 1327.32,1210.63 1327.9,1212.26 1328.49,1216.55 1329.08,1215.99 1329.66,1215.78 1330.25,1216.94 1330.84,1216.81 1331.42,1215.01 1332.01,1214.75 1332.6,1216.34 1333.18,1214.71 1333.77,1214.33 1334.35,1215.59 1334.94,1213.88 1335.53,1213.99 1336.11,1212.52 1336.7,1209.8 1337.29,1209.71 1337.87,1214.05 1338.46,1214.05 1339.05,1211.19 1339.63,1208.65 1340.22,1210.36 1340.8,1210.25 1341.39,1210.21 1341.98,1214.13 1342.56,1212.69 1343.15,1212.66 1343.74,1213.95 1344.32,1215.24 1344.91,1216.44 1345.5,1213.48 1346.08,1209.08 1346.67,1209.35 1347.26,1209.33 1347.84,1204.01 1348.43,1204.04 1349.01,1203.4 1349.6,1202.44 1350.19,1204.32 1350.77,1204.91 1351.36,1206.75 1351.95,1207.13 1352.53,1207.29 1353.12,1207.65 1353.71,1208.08 1354.29,1206.93 1354.88,1207.43 1355.47,1205.99 1356.05,1206.44 1356.64,1208.25 1357.22,1207.47 1357.81,1210.54 1358.4,1209.22 1358.98,1207.89 1359.57,1206.97 1360.16,1209.81 1360.74,1209.84 1361.33,1207.12 1361.92,1207.5 1362.5,1207.84 1363.09,1209.53 1363.68,1209.79 1364.26,1207.16 1364.85,1208.69 1365.43,1210.38 1366.02,1209.34 1366.61,1209.71 1367.19,1208.52 1367.78,1207.36 1368.37,1210.51 1368.95,1210.88 1369.54,1211.05 1370.13,1209.77 1370.71,1211.21 1371.3,1209.99 1371.88,1211.6 1372.47,1210.33 1373.06,1210.5 1373.64,1210.68 1374.23,1212 1374.82,1209.52 1375.4,1208.28 1375.99,1209.65 1376.58,1209.53 1377.16,1211.09 1377.75,1209.89 1378.34,1209.85 1378.92,1210.33 1379.51,1213.15 1380.09,1212.97 1380.68,1213.09 1381.27,1210.08 1381.85,1212.72 1382.44,1212.65 1383.03,1216.45 1383.61,1215.07 1384.2,1213.95 1384.79,1215.39 1385.37,1216.5 1385.96,1218.85 1386.55,1218.89 1387.13,1218.39 1387.72,1220.49 1388.3,1220.02 1388.89,1222.5 1389.48,1222.03 1390.06,1221.55 1390.65,1220.98 1391.24,1221.85 1391.82,1220.19 1392.41,1218.56 1393,1219.63 1393.58,1217.73 1394.17,1218.61 1394.75,1219.46 1395.34,1219.18 1395.93,1221.83 1396.51,1221.51 1397.1,1219.6 1397.69,1216.6 1398.27,1214.87 1398.86,1214.9 1399.45,1216.1 1400.03,1217.06 1400.62,1212.76 1401.21,1213.96 1401.79,1211.09 1402.38,1212.35 1402.96,1212.39 1403.55,1212.49 1404.14,1212.77 1404.72,1213.07 1405.31,1214.32 1405.9,1214.22 1406.48,1212.6 1407.07,1209.82 1407.66,1211.44 1408.24,1212.9 1408.83,1214.23 1409.42,1212.78 1410,1213.83 1410.59,1215.1 1411.17,1214.7 1411.76,1214.64 1412.35,1213.19 1412.93,1211.55 1413.52,1211.77 1414.11,1210.74 1414.69,1210.56 1415.28,1211.95 1415.87,1212.05 1416.45,1212.14 1417.04,1211.98 1417.63,1209.19 1418.21,1209.01 1418.8,1210.42 1419.38,1210.61 1419.97,1210.4 1420.56,1209.15 1421.14,1209.43 1421.73,1210.72 1422.32,1210.7 1422.9,1209.8 1423.49,1211.3 1424.08,1210.06 1424.66,1211.56 1425.25,1208.86 1425.83,1206.56 1426.42,1206.97 1427.01,1205.81 1427.59,1206.16 1428.18,1206.36 1428.77,1206.9 1429.35,1205.95 1429.94,1206.44 1430.53,1206.46 1431.11,1208.13 1431.7,1208.23 1432.29,1210.1 1432.87,1210.43 1433.46,1209.12 1434.04,1210.67 1434.63,1209.44 1435.22,1209.49 1435.8,1205.35 1436.39,1205.81 1436.98,1206.32 1437.56,1206.53 1438.15,1207.1 1438.74,1208.48 1439.32,1207.45 1439.91,1209.2 1440.5,1210.92 1441.08,1213.92 1441.67,1212.6 1442.25,1212.63 1442.84,1210.05 1443.43,1210.35 1444.01,1208.75 1444.6,1208.75 1445.19,1208.92 1445.77,1209.15 1446.36,1205.6 1446.95,1202.99 1447.53,1204.66 1448.12,1205.06 1448.7,1204.38 1449.29,1205.05 1449.88,1206.71 1450.46,1209.64 1451.05,1208.45 1451.64,1210.36 1452.22,1211.42 1452.81,1215.17 1453.4,1214.95 1453.98,1216.26 1454.57,1214.72 1455.16,1216.16 1455.74,1217.52 1456.33,1218.66 1456.91,1218.27 1457.5,1216.52 1458.09,1214.69 1458.67,1215.6 1459.26,1219.77 1459.85,1217.57 1460.43,1213.47 1461.02,1214.94 1461.61,1214.97 1462.19,1215.08 1462.78,1219.02 1463.37,1219.92 1463.95,1218.04 1464.54,1220.59 1465.12,1219.96 1465.71,1216.65 1466.3,1216.26 1466.88,1216.03 1467.47,1214.47 1468.06,1214.18 1468.64,1213.87 1469.23,1215.22 1469.82,1214.84 1470.4,1216.14 1470.99,1215.9 1471.57,1218.23 1472.16,1218.01 1472.75,1218.91 1473.33,1216.1 1473.92,1217.38 1474.51,1220.01 1475.09,1223.53 1475.68,1224.15 1476.27,1223.14 1476.85,1224.24 1477.44,1222.37 1478.03,1216.29 1478.61,1214.43 1479.2,1211.44 1479.78,1212.85 1480.37,1211.47 1480.96,1217.16 1481.54,1218.41 1482.13,1219.31 1482.72,1220.25 1483.3,1215.56 1483.89,1219.21 1484.48,1220.58 1485.06,1218.67 1485.65,1215.58 1486.24,1214.98 1486.82,1214.81 1487.41,1210.51 1487.99,1211.92 1488.58,1213.27 1489.17,1211.57 1489.75,1210.27 1490.34,1213.11 1490.93,1213.03 1491.51,1210.21 1492.1,1212.95 1492.69,1212.04 1493.27,1211.7 1493.86,1212.01 1494.45,1211.77 1495.03,1213.03 1495.62,1212.88 1496.2,1209.98 1496.79,1208.57 1497.38,1206.25 1497.96,1205.22 1498.55,1206.78 1499.14,1209.71 1499.72,1211 1500.31,1209.69 1500.9,1210.99 1501.48,1209.65 1502.07,1208.41 1502.65,1205.92 1503.24,1207.71 1503.83,1209.34 1504.41,1210.93 1505,1210.91 1505.59,1208.59 1506.17,1206.02 1506.76,1204.86 1507.35,1203.91 1507.93,1203.12 1508.52,1204.88 1509.11,1205.06 1509.69,1206.89 1510.28,1208.42 1510.86,1208.92 1511.45,1207.54 1512.04,1205.21 1512.62,1203.96 1513.21,1204.69 1513.8,1205.48 1514.38,1205.96 1514.97,1206.63 1515.56,1205.44 1516.14,1205.51 1516.73,1204.7 1517.32,1205.1 1517.9,1206.48 1518.49,1206.73 1519.07,1208.38 1519.66,1206.86 1520.25,1206.91 1520.83,1205.79 1521.42,1207.6 1522.01,1207.6 1522.59,1209.46 1523.18,1210.9 1523.77,1212.53 1524.35,1212.31 1524.94,1212.47 1525.52,1212.48 1526.11,1212.68 1526.7,1211.34 1527.28,1212.71 1527.87,1214.17 1528.46,1214.07 1529.04,1215.02 1529.63,1212.09 1530.22,1212.06 1530.8,1209.48 1531.39,1206.84 1531.98,1207.01 1532.56,1206.02 1533.15,1207.78 1533.73,1210.7 1534.32,1212.14 1534.91,1209.38 1535.49,1208.21 1536.08,1211.09 1536.67,1213.57 1537.25,1215.05 1537.84,1213.48 1538.43,1214.97 1539.01,1212.36 1539.6,1213.9 1540.19,1211.27 1540.77,1212.65 1541.36,1210.07 1541.94,1210.42 1542.53,1210.59 1543.12,1213.36 1543.7,1211.72 1544.29,1210.71 1544.88,1211.12 1545.46,1209.85 1546.05,1210.21 1546.64,1208.98 1547.22,1208.97 1547.81,1207.94 1548.4,1209.64 1548.98,1211.02 1549.57,1209.67 1550.15,1210.13 1550.74,1211.41 1551.33,1211.6 1551.91,1211.73 1552.5,1211.68 1553.09,1209 1553.67,1211.58 1554.26,1210.39 1554.85,1209.06 1555.43,1210.6 1556.02,1209.52 1556.6,1212.27 1557.19,1212.21 1557.78,1213.57 1558.36,1214.49 1558.95,1212.85 1559.54,1212.8 1560.12,1211.63 1560.71,1212.82 1561.3,1214.05 1561.88,1215.45 1562.47,1216.49 1563.06,1216.57 1563.64,1216.16 1564.23,1214.59 1564.81,1215.91 1565.4,1218.37 1565.99,1217.89 1566.57,1218.89 1567.16,1217 1567.75,1218.15 1568.33,1220.67 1568.92,1221.39 1569.51,1221.06 1570.09,1221.99 1570.68,1222.73 1571.27,1220.78 1571.85,1220.26 1572.44,1220 1573.02,1218.09 1573.61,1213.58 1574.2,1212.04 1574.78,1208.07 1575.37,1209.93 1575.96,1212.51 1576.54,1212.43 1577.13,1209.57 1577.72,1210.84 1578.3,1212.35 1578.89,1212 1579.47,1216.19 1580.06,1216.14 1580.65,1217.42 1581.23,1219.89 1581.82,1217.91 1582.41,1219.04 1582.99,1220.19 1583.58,1218.22 1584.17,1219.21 1584.75,1220.07 1585.34,1218.37 1585.93,1216.8 1586.51,1218 1587.1,1215.27 1587.68,1213.82 1588.27,1215.18 1588.86,1217.63 1589.44,1218.93 1590.03,1217.14 1590.62,1218.16 1591.2,1217.67 1591.79,1217.55 1592.38,1215.87 1592.96,1210.58 1593.55,1210.79 1594.14,1212.07 1594.72,1213.56 1595.31,1208.05 1595.89,1210.86 1596.48,1210.95 1597.07,1212 1597.65,1212.32 1598.24,1213.67 1598.83,1213.67 1599.41,1214.99 1600,1212.17 1600.59,1212.12 1601.17,1213.4 1601.76,1212.1 1602.34,1210.96 1602.93,1208.53 1603.52,1205.78 1604.1,1206.19 1604.69,1206.51 1605.28,1208.11 1605.86,1211.07 1606.45,1211.06 1607.04,1209.89 1607.62,1209.77 1608.21,1209.77 1608.8,1211.51 1609.38,1212.75 1609.97,1213 1610.55,1212.86 1611.14,1212.69 1611.73,1214.16 1612.31,1214.29 1612.9,1213.12 1613.49,1211.55 1614.07,1211.58 1614.66,1211.53 1615.25,1213.17 1615.83,1209.03 1616.42,1209.38 1617.01,1209.3 1617.59,1205.4 1618.18,1206.26 1618.76,1209.22 1619.35,1209.24 1619.94,1209.28 1620.52,1212.1 1621.11,1212.23 1621.7,1212.09 1622.28,1213.51 1622.87,1211.83 1623.46,1210.66 1624.04,1213.37 1624.63,1213.25 1625.22,1214.47 1625.8,1213.02 1626.39,1214.38 1626.97,1214.31 1627.56,1212.87 1628.15,1212.99 1628.73,1213.2 1629.32,1213.23 1629.91,1213.07 1630.49,1216.87 1631.08,1216.71 1631.67,1216.73 1632.25,1214.91 1632.84,1214.8 1633.42,1212.12 1634.01,1214.49 1634.6,1216.99 1635.18,1217.93 1635.77,1218.99 1636.36,1218.97 1636.94,1223.9 1637.53,1221.91 1638.12,1222.69 1638.7,1219.19 1639.29,1218.72 1639.88,1218.49 1640.46,1215.48 1641.05,1216.62 1641.63,1216.47 1642.22,1213.36 1642.81,1210.55 1643.39,1210.42 1643.98,1213.15 1644.57,1214.28 1645.15,1212.81 1645.74,1212.63 1646.33,1212.45 1646.91,1211.06 1647.5,1208.47 1648.09,1207.32 1648.67,1208.92 1649.26,1212.9 1649.84,1212.85 1650.43,1210.18 1651.02,1210.44 1651.6,1211.88 1652.19,1213.27 1652.78,1214.6 1653.36,1212.94 1653.95,1210.13 1654.54,1210.12 1655.12,1213.15 1655.71,1211.59 1656.29,1211.38 1656.88,1208.81 1657.47,1210.36 1658.05,1207.82 1658.64,1209.48 1659.23,1207.09 1659.81,1208.79 1660.4,1210.4 1660.99,1213.17 1661.57,1211.93 1662.16,1214.7 1662.75,1217.07 1663.33,1215.24 1663.92,1213.75 1664.5,1213.91 1665.09,1215.29 1665.68,1215.15 1666.26,1213.5 1666.85,1210.96 1667.44,1211.12 1668.02,1215.2 1668.61,1216.5 1669.2,1214.81 1669.78,1214.58 1670.37,1213.03 1670.96,1213.15 1671.54,1207.74 1672.13,1209.43 1672.71,1209.41 1673.3,1209.39 1673.89,1207.07 1674.47,1207.22 1675.06,1205.03 1675.65,1205.46 1676.23,1204.58 1676.82,1206.23 1677.41,1206.64 1677.99,1208.29 1678.58,1207.57 1679.17,1209.25 1679.75,1211.99 1680.34,1210.37 1680.92,1207.7 1681.51,1211.81 1682.1,1213.15 1682.68,1213.3 1683.27,1214.66 1683.86,1215.85 1684.44,1214.42 1685.03,1214.29 1685.62,1214.13 1686.2,1215.77 1686.79,1215.41 1687.37,1219.38 1687.96,1220.42 1688.55,1221.13 1689.13,1223.34 1689.72,1221.57 1690.31,1219.67 1690.89,1216.48 1691.48,1212.02 1692.07,1210.72 1692.65,1212.21 1693.24,1213.64 1693.83,1213.64 1694.41,1212.47 1695,1212.2 1695.58,1209.66 1696.17,1210.89 1696.76,1212.22 1697.34,1209.43 1697.93,1209.33 1698.52,1210.75 1699.1,1209.48 1699.69,1209.61 1700.28,1209.77 1700.86,1214.07 1701.45,1213.9 1702.04,1212.59 1702.62,1212.7 1703.21,1212.89 1703.79,1209.96 1704.38,1210.1 1704.97,1210.09 1705.55,1210.17 1706.14,1211.4 1706.73,1212.67 1707.31,1211.4 1707.9,1214.16 1708.49,1215.3 1709.07,1216.19 1709.66,1218.36 1710.24,1221.18 1710.83,1219.08 1711.42,1217.28 1712,1214.4 1712.59,1215.58 1713.18,1214.22 1713.76,1208.91 1714.35,1208.85 1714.94,1205.14 1715.52,1208.27 1716.11,1208.52 1716.7,1209.93 1717.28,1207.04 1717.87,1207.56 1718.45,1206.35 1719.04,1205.52 1719.63,1204.47 1720.21,1202.13 1720.8,1206.87 1721.39,1207.42 1721.97,1206.27 1722.56,1206.43 1723.15,1205.5 1723.73,1207.29 1724.32,1213.1 1724.91,1213.11 1725.49,1210.44 1726.08,1213.12 1726.66,1218.34 1727.25,1215.51 1727.84,1215.34 1728.42,1212.32 1729.01,1212.58 1729.6,1213.72 1730.18,1214.95 1730.77,1215.8 1731.36,1217.1 1731.94,1214.35 1732.53,1215.7 1733.11,1216.69 1733.7,1214.84 1734.29,1213.39 1734.87,1213.39 1735.46,1210.63 1736.05,1209.3 1736.63,1210.49 1737.22,1210.41 1737.81,1210.48 1738.39,1209.08 1738.98,1208.06 1739.57,1212.22 1740.15,1211.15 1740.74,1208.93 1741.32,1206.48 1741.91,1205.46 1742.5,1207.02 1743.08,1208.7 1743.67,1211.74 1744.26,1210.51 1744.84,1209.26 1745.43,1208.13 1746.02,1208.26 1746.6,1208.6 1747.19,1210.39 1747.78,1207.96 1748.36,1207.8 1748.95,1206.65 1749.53,1206.67 1750.12,1208.31 1750.71,1207.1 1751.29,1208.53 1751.88,1208.79 1752.47,1210.2 1753.05,1208.81 1753.64,1209.12 1754.23,1212.28 1754.81,1213.47 1755.4,1213.36 1755.99,1213.51 1756.57,1213.57 1757.16,1212.35 1757.74,1212.13 1758.33,1212.13 1758.92,1211.07 1759.5,1215.16 1760.09,1212.17 1760.68,1213.35 1761.26,1213.41 1761.85,1209.44 1762.44,1212.21 1763.02,1212.1 1763.61,1212.04 1764.19,1209.51 1764.78,1208.46 1765.37,1207.17 1765.95,1204.56 1766.54,1207.68 1767.13,1210.29 1767.71,1209.08 1768.3,1208.95 1768.89,1207.79 1769.47,1210.72 1770.06,1209.31 1770.65,1209.65 1771.23,1209.99 1771.82,1211.54 1772.4,1211.85 1772.99,1211.98 1773.58,1210.68 1774.16,1212.34 1774.75,1212.51 1775.34,1213.95 1775.92,1218.06 1776.51,1219.11 1777.1,1217.2 1777.68,1218.31 1778.27,1218.35 1778.86,1217.89 1779.44,1214.62 1780.03,1214.61 1780.61,1212.01 1781.2,1212.07 1781.79,1213.56 1782.37,1213.62 1782.96,1210.95 1783.55,1212.62 1784.13,1212.64 1784.72,1211.28 1785.31,1209.95 1785.89,1210.13 1786.48,1209.96 1787.06,1210.19 1787.65,1210.41 1788.24,1211.74 1788.82,1211.79 1789.41,1213.24 1790,1213.41 1790.58,1212.07 1791.17,1212.21 1791.76,1213.68 1792.34,1217.64 1792.93,1217.41 1793.52,1214.48 1794.1,1214.33 1794.69,1215.59 1795.27,1214.28 1795.86,1214.09 1796.45,1213.86 1797.03,1217.7 1797.62,1219.18 1798.21,1220.04 1798.79,1220.82 1799.38,1219.23 1799.97,1218.91 1800.55,1218.6 1801.14,1219.42 1801.73,1220.1 1802.31,1218.2 1802.9,1220.47 1803.48,1218.96 1804.07,1217.43 1804.66,1217.01 1805.24,1214.14 1805.83,1214.16 1806.42,1214.02 1807,1216.44 1807.59,1213.6 1808.18,1210.77 1808.76,1209.29 1809.35,1209.17 1809.94,1210.85 1810.52,1208.01 1811.11,1209.72 1811.69,1206.95 1812.28,1206.74 1812.87,1209.62 1813.45,1210.86 1814.04,1211 1814.63,1211.17 1815.21,1212.35 1815.8,1212.71 1816.39,1212.54 1816.97,1214.05 1817.56,1212.53 1818.14,1211 1818.73,1209.91 1819.32,1211.44 1819.9,1211.02 1820.49,1212.06 1821.08,1212.11 1821.66,1209.22 1822.25,1212.22 1822.84,1212.39 1823.42,1209.53 1824.01,1213.84 1824.6,1213.68 1825.18,1211.94 1825.77,1210.44 1826.35,1210.56 1826.94,1207.85 1827.53,1213.63 1828.11,1212.16 1828.7,1210.75 1829.29,1210.89 1829.87,1210.78 1830.46,1210.59 1831.05,1209.12 1831.63,1209.1 1832.22,1211.1 1832.81,1212.58 1833.39,1212.75 1833.98,1209.88 1834.56,1209.91 1835.15,1211.28 1835.74,1211.15 1836.32,1212.56 1836.91,1207.36 1837.5,1207.56 1838.08,1209.19 1838.67,1209.37 1839.26,1206.53 1839.84,1205.53 1840.43,1204.59 1841.01,1205.33 1841.6,1205.6 1842.19,1204.73 1842.77,1206.43 1843.36,1206.9 1843.95,1207.24 1844.53,1208.54 1845.12,1208.58 1845.71,1211.37 1846.29,1211.48 1846.88,1214.03 1847.47,1213.71 1848.05,1208.16 1848.64,1209.58 1849.22,1206.95 1849.81,1207.23 1850.4,1210.15 1850.98,1210.14 1851.57,1210.17 1852.16,1209.17 1852.74,1210.98 1853.33,1212.59 1853.92,1213.9 1854.5,1215.2 1855.09,1217.65 1855.68,1220.45 1856.26,1217.43 1856.85,1214.55 1857.43,1214.52 1858.02,1213.13 1858.61,1211.79 1859.19,1213.25 1859.78,1213.29 1860.37,1212.07 1860.95,1211.81 1861.54,1212.16 1862.13,1213.54 1862.71,1213.7 1863.3,1213.64 1863.88,1213.36 1864.47,1211.97 1865.06,1210.48 1865.64,1211.79 1866.23,1213.38 1866.82,1213.38 1867.4,1213.42 1867.99,1215.94 1868.58,1217.08 1869.16,1216.95 1869.75,1216.64 1870.34,1216.24 1870.92,1212.21 1871.51,1212.25 1872.09,1212.47 1872.68,1213.51 1873.27,1213.46 1873.85,1212.08 1874.44,1211.94 1875.03,1211.29 1875.61,1207.06 1876.2,1207.25 1876.79,1208.71 1877.37,1212.97 1877.96,1213 1878.55,1214.17 1879.13,1210.06 1879.72,1210.31 1880.3,1209.26 1880.89,1210.59 1881.48,1209.55 1882.06,1208.17 1882.65,1207.06 1883.24,1210.04 1883.82,1211.54 1884.41,1211.46 1885,1207.58 1885.58,1209.01 1886.17,1210.53 1886.76,1209.17 1887.34,1208.17 1887.93,1206.8 1888.51,1208.61 1889.1,1210.09 1889.69,1209.19 1890.27,1210.9 1890.86,1211.25 1891.45,1212.62 1892.03,1211.15 1892.62,1210.14 1893.21,1210.16 1893.79,1211.71 1894.38,1211.66 1894.96,1211.86 1895.55,1212.18 1896.14,1209.48 1896.72,1212.26 1897.31,1211.22 1897.9,1209.94 1898.48,1209.91 1899.07,1207.5 1899.66,1209.11 1900.24,1209.19 1900.83,1207.77 1901.42,1205.23 1902,1205.2 1902.59,1205.57 1903.17,1204.74 1903.76,1206.4 1904.35,1206.99 1904.93,1207.04 1905.52,1210.14 1906.11,1211.63 1906.69,1208.91 1907.28,1214.5 1907.87,1214.33 1908.45,1211.48 1909.04,1208.87 1909.63,1210.22 1910.21,1211.67 1910.8,1212.74 1911.38,1214.3 1911.97,1213.96 1912.56,1212.26 1913.14,1209.69 1913.73,1211.13 1914.32,1211.1 1914.9,1211.54 1915.49,1214.24 1916.08,1215.48 1916.66,1216.7 1917.25,1215.24 1917.83,1213.94 1918.42,1208.43 1919.01,1208.47 1919.59,1209.83 1920.18,1209.78 1920.77,1211.41 1921.35,1211.6 1921.94,1210.21 1922.53,1208.78 1923.11,1208.98 1923.7,1209.3 1924.29,1209.39 1924.87,1207.03 1925.46,1209.85 1926.04,1210.04 1926.63,1210.34 1927.22,1213.29 1927.8,1214.46 1928.39,1211.59 1928.98,1213.15 1929.56,1211.97 1930.15,1210.73 1930.74,1209.44 1931.32,1208.25 1931.91,1207.26 1932.5,1207.96 1933.08,1209.6 1933.67,1209.82 1934.25,1208.55 1934.84,1210.18 1935.43,1214.45 1936.01,1215.55 1936.6,1216.66 1937.19,1215.26 1937.77,1215.02 1938.36,1215.06 1938.95,1216.46 1939.53,1216.65 1940.12,1215.28 1940.71,1212.42 1941.29,1208.74 1941.88,1208.94 1942.46,1211.77 1943.05,1213.03 1943.64,1218.61 1944.22,1216.88 1944.81,1216.48 1945.4,1214.57 1945.98,1214.5 1946.57,1213.19 1947.16,1211.83 1947.74,1214.55 1948.33,1215.67 1948.91,1215.38 1949.5,1216.74 1950.09,1215.24 1950.67,1213.76 1951.26,1212.3 1951.85,1212.49 1952.43,1212.32 1953.02,1210.81 1953.61,1212.08 1954.19,1212.13 1954.78,1212.06 1955.37,1212.18 1955.95,1212.16 1956.54,1212.21 1957.12,1213.33 1957.71,1209.11 1958.3,1210.67 1958.88,1209.51 1959.47,1208.31 1960.06,1208.65 1960.64,1207.31 1961.23,1208.7 1961.82,1208.98 1962.4,1210.48 1962.99,1209.33 1963.58,1208.14 1964.16,1208.6 1964.75,1210.06 1965.33,1208.58 1965.92,1208.96 1966.51,1207.82 1967.09,1208.51 1967.68,1208.67 1968.27,1208.69 1968.85,1210.36 1969.44,1211.79 1970.03,1211.73 1970.61,1215.45 1971.2,1215.11 1971.78,1216.25 1972.37,1217.59 1972.96,1218.67 1973.54,1215.84 1974.13,1215.98 1974.72,1218.3 1975.3,1217.84 1975.89,1218.91 1976.48,1214.47 1977.06,1214.39 1977.65,1216.73 1978.24,1215.08 1978.82,1221.68 1979.41,1219.81 1979.99,1226.16 1980.58,1222.84 1981.17,1220.85 1981.75,1220.28 1982.34,1222.43 1982.93,1223.33 1983.51,1222.96 1984.1,1220.73 1984.69,1218.49 1985.27,1216.76 1985.86,1215.23 1986.45,1213.82 1987.03,1213.7 1987.62,1214.83 1988.2,1216.15 1988.79,1213.32 1989.38,1213.33 1989.96,1210.48 1990.55,1213.54 1991.14,1212.35 1991.72,1210.98 1992.31,1209.68 1992.9,1209.65 1993.48,1209.92 1994.07,1210.03 1994.65,1210.19 1995.24,1206.36 1995.83,1205.1 1996.41,1205.13 1997,1205.6 1997.59,1208.69 1998.17,1208.6 1998.76,1208.73 1999.35,1209.06 1999.93,1211.99 2000.52,1211.98 2001.11,1210.91 2001.69,1210.98 2002.28,1212.32 2002.86,1212.42 2003.45,1211.25 2004.04,1208.55 2004.62,1207.12 2005.21,1208.68 2005.8,1210.36 2006.38,1210.36 2006.97,1209.24 2007.56,1210.54 2008.14,1209.13 2008.73,1211.77 2009.32,1210.55 2009.9,1214.68 2010.49,1218.44 2011.07,1222.07 2011.66,1222.83 2012.25,1220.93 2012.83,1217.99 2013.42,1217.82 2014.01,1217.55 2014.59,1218.8 2015.18,1214.29 2015.77,1213.95 2016.35,1212.45 2016.94,1209.75 2017.53,1213.7 2018.11,1212.18 2018.7,1213.05 2019.28,1212.83 2019.87,1211.36 2020.46,1215.23 2021.04,1213.77 2021.63,1216.44 2022.22,1217.66 2022.8,1216.21 2023.39,1217.3 2023.98,1215.45 2024.56,1216.76 2025.15,1218.01 2025.73,1215.19 2026.32,1212.39 2026.91,1209.96 2027.49,1207.26 2028.08,1210.08 2028.67,1206.15 2029.25,1202.25 2029.84,1204.09 2030.43,1204.53 2031.01,1206.34 2031.6,1205.31 2032.19,1208.34 2032.77,1204.66 2033.36,1208.99 2033.94,1207.22 2034.53,1207.53 2035.12,1211.55 2035.7,1211.34 2036.29,1211.49 2036.88,1213.1 2037.46,1213.06 2038.05,1213.02 2038.64,1210.18 2039.22,1210.22 2039.81,1209.17 2040.4,1210.69 2040.98,1208.23 2041.57,1208.46 2042.15,1208.65 2042.74,1208.75 2043.33,1209.05 2043.91,1214.55 2044.5,1214.35 2045.09,1214.05 2045.67,1212.45 2046.26,1213.96 2046.85,1212.42 2047.43,1213.8 2048.02,1213.77 2048.6,1213.47 2049.19,1217.34 2049.78,1214.28 2050.36,1215.54 2050.95,1214.24 2051.54,1216.74 2052.12,1217.6 2052.71,1215.98 2053.3,1215.72 2053.88,1215.46 2054.47,1216.81 2055.06,1216.57 2055.64,1217.49 2056.23,1217.49 2056.81,1218.57 2057.4,1218.27 2057.99,1219.26 2058.57,1220.41 2059.16,1218.9 2059.75,1216.93 2060.33,1217.87 2060.92,1217.73 2061.51,1217.4 2062.09,1215.92 2062.68,1215.61 2063.27,1214.22 2063.85,1213.69 2064.44,1212.22 2065.02,1212.16 2065.61,1216.13 2066.2,1214.47 2066.78,1217.11 2067.37,1218.33 2067.96,1218 2068.54,1217.81 2069.13,1221.44 2069.72,1223.46 2070.3,1222.62 2070.89,1219.42 2071.48,1220.54 2072.06,1220.13 2072.65,1220.89 2073.23,1219.12 2073.82,1218.56 2074.41,1217.95 2074.99,1217.33 2075.58,1215.76 2076.17,1214.21 2076.75,1214.08 2077.34,1211.5 2077.93,1211.47 2078.51,1211.4 2079.1,1212.76 2079.68,1211.68 2080.27,1211.95 2080.86,1212.19 2081.44,1208.31 2082.03,1206.08 2082.62,1212.97 2083.2,1213.3 2083.79,1214.54 2084.38,1212.97 2084.96,1212.93 2085.55,1215.73 2086.14,1215.49 2086.72,1212.62 2087.31,1212.43 2087.89,1209.81 2088.48,1212.51 2089.07,1210.92 2089.65,1212.2 2090.24,1212.13 2090.83,1210.75 2091.41,1209.42 2092,1211.02 2092.59,1209.69 2093.17,1209.9 2093.76,1210 2094.35,1208.54 2094.93,1208.61 2095.52,1210.11 2096.1,1207.66 2096.69,1209.35 2097.28,1207.93 2097.86,1209.82 2098.45,1211.59 2099.04,1211.54 2099.62,1211.89 2100.21,1212.12 2100.8,1213.4 2101.38,1214.51 2101.97,1211.52 2102.55,1211.86 2103.14,1213.2 2103.73,1211.89 2104.31,1213.04 2104.9,1210.42 2105.49,1209.39 2106.07,1209.57 2106.66,1211.18 2107.25,1209.88 2107.83,1209.81 2108.42,1209.86 2109.01,1209.72 2109.59,1208.63 2110.18,1207.29 2110.76,1204.73 2111.35,1205.07 2111.94,1201.2 2112.52,1200.62 2113.11,1198.49 2113.7,1200.36 2114.28,1203.93 2114.87,1204.46 2115.46,1207.56 2116.04,1206.21 2116.63,1206.69 2117.22,1205.73 2117.8,1204.5 2118.39,1203.53 2118.97,1205.17 2119.56,1205.77 2120.15,1206.01 2120.73,1205.24 2121.32,1205.51 2121.91,1205.96 2122.49,1204.94 2123.08,1202.85 2123.67,1206.16 2124.25,1207.98 2124.84,1207.02 2125.42,1207.27 2126.01,1204.9 2126.6,1205.42 2127.18,1205.69 2127.77,1207.2 2128.36,1207.29 2128.94,1210.06 2129.53,1213.05 2130.12,1214.36 2130.7,1215.72 2131.29,1215.55 2131.88,1215.47 2132.46,1216.57 2133.05,1216.44 2133.63,1216.19 2134.22,1215.79 2134.81,1215.33 2135.39,1215 2135.98,1214.95 2136.57,1214.8 2137.15,1214.52 2137.74,1213.19 2138.33,1214.37 2138.91,1216.68 2139.5,1217.82 2140.09,1217.39 2140.67,1219.78 2141.26,1218.24 2141.84,1216.83 2142.43,1216.68 2143.02,1216.46 2143.6,1217.77 2144.19,1217.35 2144.78,1215.55 2145.36,1216.54 2145.95,1217.85 2146.54,1217.69 2147.12,1218.67 2147.71,1216.85 2148.3,1219.05 2148.88,1216.13 2149.47,1214.68 2150.05,1215.88 2150.64,1215.64 2151.23,1215.33 2151.81,1213.78 2152.4,1218.89 2152.99,1217.13 2153.57,1217.84 2154.16,1218.82 2154.75,1219.66 2155.33,1220.63 2155.92,1218.69 2156.5,1218.49 2157.09,1220.82 2157.68,1216.24 2158.26,1212.02 \"/>\n<path clip-path=\"url(#clip232)\" d=\"M986.025 1212.85 L986.612 1212.85 L987.198 1212.85 L987.785 1212.85 L988.371 1212.85 L988.957 1212.85 L989.544 1212.85 L990.13 1212.85 L990.717 1212.85 L991.303 1212.85 L991.889 1212.85 L992.476 1212.85 L993.062 1212.85 L993.649 1212.85 L994.235 1212.85 L994.822 1212.85 L995.408 1212.85 L995.994 1212.85 L996.581 1212.85 L997.167 1212.85 L997.754 1212.85 L998.34 1212.85 L998.926 1212.85 L999.513 1212.85 L1000.1 1212.85 L1000.69 1212.85 L1001.27 1212.85 L1001.86 1212.85 L1002.44 1212.85 L1003.03 1212.85 L1003.62 1212.85 L1004.2 1212.85 L1004.79 1212.85 L1005.38 1212.85 L1005.96 1212.85 L1006.55 1212.85 L1007.14 1212.85 L1007.72 1212.85 L1008.31 1212.85 L1008.9 1212.85 L1009.48 1212.85 L1010.07 1212.85 L1010.65 1212.85 L1011.24 1212.85 L1011.83 1212.85 L1012.41 1212.85 L1013 1212.85 L1013.59 1212.85 L1014.17 1212.85 L1014.76 1212.85 L1015.35 1212.85 L1015.93 1212.85 L1016.52 1212.85 L1017.11 1212.85 L1017.69 1212.85 L1018.28 1212.85 L1018.86 1212.85 L1019.45 1212.85 L1020.04 1212.85 L1020.62 1212.85 L1021.21 1212.85 L1021.8 1212.85 L1022.38 1212.85 L1022.97 1212.85 L1023.56 1212.85 L1024.14 1212.85 L1024.73 1212.85 L1025.32 1212.85 L1025.9 1212.85 L1026.49 1212.85 L1027.07 1212.85 L1027.66 1212.85 L1028.25 1212.85 L1028.83 1212.85 L1029.42 1212.85 L1030.01 1212.85 L1030.59 1212.85 L1031.18 1212.85 L1031.77 1212.85 L1032.35 1212.85 L1032.94 1212.85 L1033.52 1212.85 L1034.11 1212.85 L1034.7 1212.85 L1035.28 1212.85 L1035.87 1212.85 L1036.46 1212.85 L1037.04 1212.85 L1037.63 1212.85 L1038.22 1212.85 L1038.8 1212.85 L1039.39 1212.85 L1039.98 1212.85 L1040.56 1212.85 L1041.15 1212.85 L1041.73 1212.85 L1042.32 1212.85 L1042.91 1212.85 L1043.49 1212.85 L1044.08 1212.85 L1044.67 1212.85 L1045.25 1212.85 L1045.84 1212.85 L1046.43 1212.85 L1047.01 1212.85 L1047.6 1212.85 L1048.19 1212.85 L1048.77 1212.85 L1049.36 1212.85 L1049.94 1212.85 L1050.53 1212.85 L1051.12 1212.85 L1051.7 1212.85 L1052.29 1212.85 L1052.88 1212.85 L1053.46 1212.85 L1054.05 1212.85 L1054.64 1212.85 L1055.22 1212.85 L1055.81 1212.85 L1056.39 1212.85 L1056.98 1212.85 L1057.57 1212.85 L1058.15 1212.85 L1058.74 1212.85 L1059.33 1212.85 L1059.91 1212.85 L1060.5 1212.85 L1061.09 1212.85 L1061.67 1212.85 L1062.26 1212.85 L1062.85 1212.85 L1063.43 1212.85 L1064.02 1212.85 L1064.6 1212.85 L1065.19 1212.85 L1065.78 1212.85 L1066.36 1212.85 L1066.95 1212.85 L1067.54 1212.85 L1068.12 1212.85 L1068.71 1212.85 L1069.3 1212.85 L1069.88 1212.85 L1070.47 1212.85 L1071.06 1212.85 L1071.64 1212.85 L1072.23 1212.85 L1072.81 1212.85 L1073.4 1212.85 L1073.99 1212.85 L1074.57 1212.85 L1075.16 1212.85 L1075.75 1212.85 L1076.33 1212.85 L1076.92 1212.85 L1077.51 1212.85 L1078.09 1212.85 L1078.68 1212.85 L1079.26 1212.85 L1079.85 1212.85 L1080.44 1212.85 L1081.02 1212.85 L1081.61 1212.85 L1082.2 1212.85 L1082.78 1212.85 L1083.37 1212.85 L1083.96 1212.85 L1084.54 1212.85 L1085.13 1212.85 L1085.72 1212.85 L1086.3 1212.85 L1086.89 1212.85 L1087.47 1212.85 L1088.06 1212.85 L1088.65 1212.85 L1089.23 1212.85 L1089.82 1212.85 L1090.41 1212.85 L1090.99 1212.85 L1091.58 1212.85 L1092.17 1212.85 L1092.75 1212.85 L1093.34 1212.85 L1093.93 1212.85 L1094.51 1212.85 L1095.1 1212.85 L1095.68 1212.85 L1096.27 1212.85 L1096.86 1212.85 L1097.44 1212.85 L1098.03 1212.85 L1098.62 1212.85 L1099.2 1212.85 L1099.79 1212.85 L1100.38 1212.85 L1100.96 1212.85 L1101.55 1212.85 L1102.14 1212.85 L1102.72 1212.85 L1103.31 1212.85 L1103.89 1212.85 L1104.48 1212.85 L1105.07 1212.85 L1105.65 1212.85 L1106.24 1212.85 L1106.83 1212.85 L1107.41 1212.85 L1108 1212.85 L1108.59 1212.85 L1109.17 1212.85 L1109.76 1212.85 L1110.34 1212.85 L1110.93 1212.85 L1111.52 1212.85 L1112.1 1212.85 L1112.69 1212.85 L1113.28 1212.85 L1113.86 1212.85 L1114.45 1212.85 L1115.04 1212.85 L1115.62 1212.85 L1116.21 1212.85 L1116.8 1212.85 L1117.38 1212.85 L1117.97 1212.85 L1118.55 1212.85 L1119.14 1212.85 L1119.73 1212.85 L1120.31 1212.85 L1120.9 1212.85 L1121.49 1212.85 L1122.07 1212.85 L1122.66 1212.85 L1123.25 1212.85 L1123.83 1212.85 L1124.42 1212.85 L1125.01 1212.85 L1125.59 1212.85 L1126.18 1212.85 L1126.76 1212.85 L1127.35 1212.85 L1127.94 1212.85 L1128.52 1212.85 L1129.11 1212.85 L1129.7 1212.85 L1130.28 1212.85 L1130.87 1212.85 L1131.46 1212.85 L1132.04 1212.85 L1132.63 1212.85 L1133.21 1212.85 L1133.8 1212.85 L1134.39 1212.85 L1134.97 1212.85 L1135.56 1212.85 L1136.15 1212.85 L1136.73 1212.85 L1137.32 1212.85 L1137.91 1212.85 L1138.49 1212.85 L1139.08 1212.85 L1139.67 1212.85 L1140.25 1212.85 L1140.84 1212.85 L1141.42 1212.85 L1142.01 1212.85 L1142.6 1212.85 L1143.18 1212.85 L1143.77 1212.85 L1144.36 1212.85 L1144.94 1212.85 L1145.53 1212.85 L1146.12 1212.85 L1146.7 1212.85 L1147.29 1212.85 L1147.88 1212.85 L1148.46 1212.85 L1149.05 1212.85 L1149.63 1212.85 L1150.22 1212.85 L1150.81 1212.85 L1151.39 1212.85 L1151.98 1212.85 L1152.57 1212.85 L1153.15 1212.85 L1153.74 1212.85 L1154.33 1212.85 L1154.91 1212.85 L1155.5 1212.85 L1156.09 1212.85 L1156.67 1212.85 L1157.26 1212.85 L1157.84 1212.85 L1158.43 1212.85 L1159.02 1212.85 L1159.6 1212.85 L1160.19 1212.85 L1160.78 1212.85 L1161.36 1212.85 L1161.95 1212.85 L1162.54 1212.85 L1163.12 1212.85 L1163.71 1212.85 L1164.29 1212.85 L1164.88 1212.85 L1165.47 1212.85 L1166.05 1212.85 L1166.64 1212.85 L1167.23 1212.85 L1167.81 1212.85 L1168.4 1212.85 L1168.99 1212.85 L1169.57 1212.85 L1170.16 1212.85 L1170.75 1212.85 L1171.33 1212.85 L1171.92 1212.85 L1172.5 1212.85 L1173.09 1212.85 L1173.68 1212.85 L1174.26 1212.85 L1174.85 1212.85 L1175.44 1212.85 L1176.02 1212.85 L1176.61 1212.85 L1177.2 1212.85 L1177.78 1212.85 L1178.37 1212.85 L1178.96 1212.85 L1179.54 1212.85 L1180.13 1212.85 L1180.71 1212.85 L1181.3 1212.85 L1181.89 1212.85 L1182.47 1212.85 L1183.06 1212.85 L1183.65 1212.85 L1184.23 1212.85 L1184.82 1212.85 L1185.41 1212.85 L1185.99 1212.85 L1186.58 1212.85 L1187.16 1212.85 L1187.75 1212.85 L1188.34 1212.85 L1188.92 1212.85 L1189.51 1212.85 L1190.1 1212.85 L1190.68 1212.85 L1191.27 1212.85 L1191.86 1212.85 L1192.44 1212.85 L1193.03 1212.85 L1193.62 1212.85 L1194.2 1212.85 L1194.79 1212.85 L1195.37 1212.85 L1195.96 1212.85 L1196.55 1212.85 L1197.13 1212.85 L1197.72 1212.85 L1198.31 1212.85 L1198.89 1212.85 L1199.48 1212.85 L1200.07 1212.85 L1200.65 1212.85 L1201.24 1212.85 L1201.83 1212.85 L1202.41 1212.85 L1203 1212.85 L1203.58 1212.85 L1204.17 1212.85 L1204.76 1212.85 L1205.34 1212.85 L1205.93 1212.85 L1206.52 1212.85 L1207.1 1212.85 L1207.69 1212.85 L1208.28 1212.85 L1208.86 1212.85 L1209.45 1212.85 L1210.03 1212.85 L1210.62 1212.85 L1211.21 1212.85 L1211.79 1212.85 L1212.38 1212.85 L1212.97 1212.85 L1213.55 1212.85 L1214.14 1212.85 L1214.73 1212.85 L1215.31 1212.85 L1215.9 1212.85 L1216.49 1212.85 L1217.07 1212.85 L1217.66 1212.85 L1218.24 1212.85 L1218.83 1212.85 L1219.42 1212.85 L1220 1212.85 L1220.59 1212.85 L1221.18 1212.85 L1221.76 1212.85 L1222.35 1212.85 L1222.94 1212.85 L1223.52 1212.85 L1224.11 1212.85 L1224.7 1212.85 L1225.28 1212.85 L1225.87 1212.85 L1226.45 1212.85 L1227.04 1212.85 L1227.63 1212.85 L1228.21 1212.85 L1228.8 1212.85 L1229.39 1212.85 L1229.97 1212.85 L1230.56 1212.85 L1231.15 1212.85 L1231.73 1212.85 L1232.32 1212.85 L1232.91 1212.85 L1233.49 1212.85 L1234.08 1212.85 L1234.66 1212.85 L1235.25 1212.85 L1235.84 1212.85 L1236.42 1212.85 L1237.01 1212.85 L1237.6 1212.85 L1238.18 1212.85 L1238.77 1212.85 L1239.36 1212.85 L1239.94 1212.85 L1240.53 1212.85 L1241.11 1212.85 L1241.7 1212.85 L1242.29 1212.85 L1242.87 1212.85 L1243.46 1212.85 L1244.05 1212.85 L1244.63 1212.85 L1245.22 1212.85 L1245.81 1212.85 L1246.39 1212.85 L1246.98 1212.85 L1247.57 1212.85 L1248.15 1212.85 L1248.74 1212.85 L1249.32 1212.85 L1249.91 1212.85 L1250.5 1212.85 L1251.08 1212.85 L1251.67 1212.85 L1252.26 1212.85 L1252.84 1212.85 L1253.43 1212.85 L1254.02 1212.85 L1254.6 1212.85 L1255.19 1212.85 L1255.78 1212.85 L1256.36 1212.85 L1256.95 1212.85 L1257.53 1212.85 L1258.12 1212.85 L1258.71 1212.85 L1259.29 1212.85 L1259.88 1212.85 L1260.47 1212.85 L1261.05 1212.85 L1261.64 1212.85 L1262.23 1212.85 L1262.81 1212.85 L1263.4 1212.85 L1263.98 1212.85 L1264.57 1212.85 L1265.16 1212.85 L1265.74 1212.85 L1266.33 1212.85 L1266.92 1212.85 L1267.5 1212.85 L1268.09 1212.85 L1268.68 1212.85 L1269.26 1212.85 L1269.85 1212.85 L1270.44 1212.85 L1271.02 1212.85 L1271.61 1212.85 L1272.19 1212.85 L1272.78 1212.85 L1273.37 1212.85 L1273.95 1212.85 L1274.54 1212.85 L1275.13 1212.85 L1275.71 1212.85 L1276.3 1212.85 L1276.89 1212.85 L1277.47 1212.85 L1278.06 1212.85 L1278.65 1212.85 L1279.23 1212.85 L1279.82 1212.85 L1280.4 1212.85 L1280.99 1212.85 L1281.58 1212.85 L1282.16 1212.85 L1282.75 1212.85 L1283.34 1212.85 L1283.92 1212.85 L1284.51 1212.85 L1285.1 1212.85 L1285.68 1212.85 L1286.27 1212.85 L1286.86 1212.85 L1287.44 1212.85 L1288.03 1212.85 L1288.61 1212.85 L1289.2 1212.85 L1289.79 1212.85 L1290.37 1212.85 L1290.96 1212.85 L1291.55 1212.85 L1292.13 1212.85 L1292.72 1212.85 L1293.31 1212.85 L1293.89 1212.85 L1294.48 1212.85 L1295.06 1212.85 L1295.65 1212.85 L1296.24 1212.85 L1296.82 1212.85 L1297.41 1212.85 L1298 1212.85 L1298.58 1212.85 L1299.17 1212.85 L1299.76 1212.85 L1300.34 1212.85 L1300.93 1212.85 L1301.52 1212.85 L1302.1 1212.85 L1302.69 1212.85 L1303.27 1212.85 L1303.86 1212.85 L1304.45 1212.85 L1305.03 1212.85 L1305.62 1212.85 L1306.21 1212.85 L1306.79 1212.85 L1307.38 1212.85 L1307.97 1212.85 L1308.55 1212.85 L1309.14 1212.85 L1309.73 1212.85 L1310.31 1212.85 L1310.9 1212.85 L1311.48 1212.85 L1312.07 1212.85 L1312.66 1212.85 L1313.24 1212.85 L1313.83 1212.85 L1314.42 1212.85 L1315 1212.85 L1315.59 1212.85 L1316.18 1212.85 L1316.76 1212.85 L1317.35 1212.85 L1317.93 1212.85 L1318.52 1212.85 L1319.11 1212.85 L1319.69 1212.85 L1320.28 1212.85 L1320.87 1212.85 L1321.45 1212.85 L1322.04 1212.85 L1322.63 1212.85 L1323.21 1212.85 L1323.8 1212.85 L1324.39 1212.85 L1324.97 1212.85 L1325.56 1212.85 L1326.14 1212.85 L1326.73 1212.85 L1327.32 1212.85 L1327.9 1212.85 L1328.49 1212.85 L1329.08 1212.85 L1329.66 1212.85 L1330.25 1212.85 L1330.84 1212.85 L1331.42 1212.85 L1332.01 1212.85 L1332.6 1212.85 L1333.18 1212.85 L1333.77 1212.85 L1334.35 1212.85 L1334.94 1212.85 L1335.53 1212.85 L1336.11 1212.85 L1336.7 1212.85 L1337.29 1212.85 L1337.87 1212.85 L1338.46 1212.85 L1339.05 1212.85 L1339.63 1212.85 L1340.22 1212.85 L1340.8 1212.85 L1341.39 1212.85 L1341.98 1212.85 L1342.56 1212.85 L1343.15 1212.85 L1343.74 1212.85 L1344.32 1212.85 L1344.91 1212.85 L1345.5 1212.85 L1346.08 1212.85 L1346.67 1212.85 L1347.26 1212.85 L1347.84 1212.85 L1348.43 1212.85 L1349.01 1212.85 L1349.6 1212.85 L1350.19 1212.85 L1350.77 1212.85 L1351.36 1212.85 L1351.95 1212.85 L1352.53 1212.85 L1353.12 1212.85 L1353.71 1212.85 L1354.29 1212.85 L1354.88 1212.85 L1355.47 1212.85 L1356.05 1212.85 L1356.64 1212.85 L1357.22 1212.85 L1357.81 1212.85 L1358.4 1212.85 L1358.98 1212.85 L1359.57 1212.85 L1360.16 1212.85 L1360.74 1212.85 L1361.33 1212.85 L1361.92 1212.85 L1362.5 1212.85 L1363.09 1212.85 L1363.68 1212.85 L1364.26 1212.85 L1364.85 1212.85 L1365.43 1212.85 L1366.02 1212.85 L1366.61 1212.85 L1367.19 1212.85 L1367.78 1212.85 L1368.37 1212.85 L1368.95 1212.85 L1369.54 1212.85 L1370.13 1212.85 L1370.71 1212.85 L1371.3 1212.85 L1371.88 1212.85 L1372.47 1212.85 L1373.06 1212.85 L1373.64 1212.85 L1374.23 1212.85 L1374.82 1212.85 L1375.4 1212.85 L1375.99 1212.85 L1376.58 1212.85 L1377.16 1212.85 L1377.75 1212.85 L1378.34 1212.85 L1378.92 1212.85 L1379.51 1212.85 L1380.09 1212.85 L1380.68 1212.85 L1381.27 1212.85 L1381.85 1212.85 L1382.44 1212.85 L1383.03 1212.85 L1383.61 1212.85 L1384.2 1212.85 L1384.79 1212.85 L1385.37 1212.85 L1385.96 1212.85 L1386.55 1212.85 L1387.13 1212.85 L1387.72 1212.85 L1388.3 1212.85 L1388.89 1212.85 L1389.48 1212.85 L1390.06 1212.85 L1390.65 1212.85 L1391.24 1212.85 L1391.82 1212.85 L1392.41 1212.85 L1393 1212.85 L1393.58 1212.85 L1394.17 1212.85 L1394.75 1212.85 L1395.34 1212.85 L1395.93 1212.85 L1396.51 1212.85 L1397.1 1212.85 L1397.69 1212.85 L1398.27 1212.85 L1398.86 1212.85 L1399.45 1212.85 L1400.03 1212.85 L1400.62 1212.85 L1401.21 1212.85 L1401.79 1212.85 L1402.38 1212.85 L1402.96 1212.85 L1403.55 1212.85 L1404.14 1212.85 L1404.72 1212.85 L1405.31 1212.85 L1405.9 1212.85 L1406.48 1212.85 L1407.07 1212.85 L1407.66 1212.85 L1408.24 1212.85 L1408.83 1212.85 L1409.42 1212.85 L1410 1212.85 L1410.59 1212.85 L1411.17 1212.85 L1411.76 1212.85 L1412.35 1212.85 L1412.93 1212.85 L1413.52 1212.85 L1414.11 1212.85 L1414.69 1212.85 L1415.28 1212.85 L1415.87 1212.85 L1416.45 1212.85 L1417.04 1212.85 L1417.63 1212.85 L1418.21 1212.85 L1418.8 1212.85 L1419.38 1212.85 L1419.97 1212.85 L1420.56 1212.85 L1421.14 1212.85 L1421.73 1212.85 L1422.32 1212.85 L1422.9 1212.85 L1423.49 1212.85 L1424.08 1212.85 L1424.66 1212.85 L1425.25 1212.85 L1425.83 1212.85 L1426.42 1212.85 L1427.01 1212.85 L1427.59 1212.85 L1428.18 1212.85 L1428.77 1212.85 L1429.35 1212.85 L1429.94 1212.85 L1430.53 1212.85 L1431.11 1212.85 L1431.7 1212.85 L1432.29 1212.85 L1432.87 1212.85 L1433.46 1212.85 L1434.04 1212.85 L1434.63 1212.85 L1435.22 1212.85 L1435.8 1212.85 L1436.39 1212.85 L1436.98 1212.85 L1437.56 1212.85 L1438.15 1212.85 L1438.74 1212.85 L1439.32 1212.85 L1439.91 1212.85 L1440.5 1212.85 L1441.08 1212.85 L1441.67 1212.85 L1442.25 1212.85 L1442.84 1212.85 L1443.43 1212.85 L1444.01 1212.85 L1444.6 1212.85 L1445.19 1212.85 L1445.77 1212.85 L1446.36 1212.85 L1446.95 1212.85 L1447.53 1212.85 L1448.12 1212.85 L1448.7 1212.85 L1449.29 1212.85 L1449.88 1212.85 L1450.46 1212.85 L1451.05 1212.85 L1451.64 1212.85 L1452.22 1212.85 L1452.81 1212.85 L1453.4 1212.85 L1453.98 1212.85 L1454.57 1212.85 L1455.16 1212.85 L1455.74 1212.85 L1456.33 1212.85 L1456.91 1212.85 L1457.5 1212.85 L1458.09 1212.85 L1458.67 1212.85 L1459.26 1212.85 L1459.85 1212.85 L1460.43 1212.85 L1461.02 1212.85 L1461.61 1212.85 L1462.19 1212.85 L1462.78 1212.85 L1463.37 1212.85 L1463.95 1212.85 L1464.54 1212.85 L1465.12 1212.85 L1465.71 1212.85 L1466.3 1212.85 L1466.88 1212.85 L1467.47 1212.85 L1468.06 1212.85 L1468.64 1212.85 L1469.23 1212.85 L1469.82 1212.85 L1470.4 1212.85 L1470.99 1212.85 L1471.57 1212.85 L1472.16 1212.85 L1472.75 1212.85 L1473.33 1212.85 L1473.92 1212.85 L1474.51 1212.85 L1475.09 1212.85 L1475.68 1212.85 L1476.27 1212.85 L1476.85 1212.85 L1477.44 1212.85 L1478.03 1212.85 L1478.61 1212.85 L1479.2 1212.85 L1479.78 1212.85 L1480.37 1212.85 L1480.96 1212.85 L1481.54 1212.85 L1482.13 1212.85 L1482.72 1212.85 L1483.3 1212.85 L1483.89 1212.85 L1484.48 1212.85 L1485.06 1212.85 L1485.65 1212.85 L1486.24 1212.85 L1486.82 1212.85 L1487.41 1212.85 L1487.99 1212.85 L1488.58 1212.85 L1489.17 1212.85 L1489.75 1212.85 L1490.34 1212.85 L1490.93 1212.85 L1491.51 1212.85 L1492.1 1212.85 L1492.69 1212.85 L1493.27 1212.85 L1493.86 1212.85 L1494.45 1212.85 L1495.03 1212.85 L1495.62 1212.85 L1496.2 1212.85 L1496.79 1212.85 L1497.38 1212.85 L1497.96 1212.85 L1498.55 1212.85 L1499.14 1212.85 L1499.72 1212.85 L1500.31 1212.85 L1500.9 1212.85 L1501.48 1212.85 L1502.07 1212.85 L1502.65 1212.85 L1503.24 1212.85 L1503.83 1212.85 L1504.41 1212.85 L1505 1212.85 L1505.59 1212.85 L1506.17 1212.85 L1506.76 1212.85 L1507.35 1212.85 L1507.93 1212.85 L1508.52 1212.85 L1509.11 1212.85 L1509.69 1212.85 L1510.28 1212.85 L1510.86 1212.85 L1511.45 1212.85 L1512.04 1212.85 L1512.62 1212.85 L1513.21 1212.85 L1513.8 1212.85 L1514.38 1212.85 L1514.97 1212.85 L1515.56 1212.85 L1516.14 1212.85 L1516.73 1212.85 L1517.32 1212.85 L1517.9 1212.85 L1518.49 1212.85 L1519.07 1212.85 L1519.66 1212.85 L1520.25 1212.85 L1520.83 1212.85 L1521.42 1212.85 L1522.01 1212.85 L1522.59 1212.85 L1523.18 1212.85 L1523.77 1212.85 L1524.35 1212.85 L1524.94 1212.85 L1525.52 1212.85 L1526.11 1212.85 L1526.7 1212.85 L1527.28 1212.85 L1527.87 1212.85 L1528.46 1212.85 L1529.04 1212.85 L1529.63 1212.85 L1530.22 1212.85 L1530.8 1212.85 L1531.39 1212.85 L1531.98 1212.85 L1532.56 1212.85 L1533.15 1212.85 L1533.73 1212.85 L1534.32 1212.85 L1534.91 1212.85 L1535.49 1212.85 L1536.08 1212.85 L1536.67 1212.85 L1537.25 1212.85 L1537.84 1212.85 L1538.43 1212.85 L1539.01 1212.85 L1539.6 1212.85 L1540.19 1212.85 L1540.77 1212.85 L1541.36 1212.85 L1541.94 1212.85 L1542.53 1212.85 L1543.12 1212.85 L1543.7 1212.85 L1544.29 1212.85 L1544.88 1212.85 L1545.46 1212.85 L1546.05 1212.85 L1546.64 1212.85 L1547.22 1212.85 L1547.81 1212.85 L1548.4 1212.85 L1548.98 1212.85 L1549.57 1212.85 L1550.15 1212.85 L1550.74 1212.85 L1551.33 1212.85 L1551.91 1212.85 L1552.5 1212.85 L1553.09 1212.85 L1553.67 1212.85 L1554.26 1212.85 L1554.85 1212.85 L1555.43 1212.85 L1556.02 1212.85 L1556.6 1212.85 L1557.19 1212.85 L1557.78 1212.85 L1558.36 1212.85 L1558.95 1212.85 L1559.54 1212.85 L1560.12 1212.85 L1560.71 1212.85 L1561.3 1212.85 L1561.88 1212.85 L1562.47 1212.85 L1563.06 1212.85 L1563.64 1212.85 L1564.23 1212.85 L1564.81 1212.85 L1565.4 1212.85 L1565.99 1212.85 L1566.57 1212.85 L1567.16 1212.85 L1567.75 1212.85 L1568.33 1212.85 L1568.92 1212.85 L1569.51 1212.85 L1570.09 1212.85 L1570.68 1212.85 L1571.27 1212.85 L1571.85 1212.85 L1572.44 1212.85 L1573.02 1212.85 L1573.61 1212.85 L1574.2 1212.85 L1574.78 1212.85 L1575.37 1212.85 L1575.96 1212.85 L1576.54 1212.85 L1577.13 1212.85 L1577.72 1212.85 L1578.3 1212.85 L1578.89 1212.85 L1579.47 1212.85 L1580.06 1212.85 L1580.65 1212.85 L1581.23 1212.85 L1581.82 1212.85 L1582.41 1212.85 L1582.99 1212.85 L1583.58 1212.85 L1584.17 1212.85 L1584.75 1212.85 L1585.34 1212.85 L1585.93 1212.85 L1586.51 1212.85 L1587.1 1212.85 L1587.68 1212.85 L1588.27 1212.85 L1588.86 1212.85 L1589.44 1212.85 L1590.03 1212.85 L1590.62 1212.85 L1591.2 1212.85 L1591.79 1212.85 L1592.38 1212.85 L1592.96 1212.85 L1593.55 1212.85 L1594.14 1212.85 L1594.72 1212.85 L1595.31 1212.85 L1595.89 1212.85 L1596.48 1212.85 L1597.07 1212.85 L1597.65 1212.85 L1598.24 1212.85 L1598.83 1212.85 L1599.41 1212.85 L1600 1212.85 L1600.59 1212.85 L1601.17 1212.85 L1601.76 1212.85 L1602.34 1212.85 L1602.93 1212.85 L1603.52 1212.85 L1604.1 1212.85 L1604.69 1212.85 L1605.28 1212.85 L1605.86 1212.85 L1606.45 1212.85 L1607.04 1212.85 L1607.62 1212.85 L1608.21 1212.85 L1608.8 1212.85 L1609.38 1212.85 L1609.97 1212.85 L1610.55 1212.85 L1611.14 1212.85 L1611.73 1212.85 L1612.31 1212.85 L1612.9 1212.85 L1613.49 1212.85 L1614.07 1212.85 L1614.66 1212.85 L1615.25 1212.85 L1615.83 1212.85 L1616.42 1212.85 L1617.01 1212.85 L1617.59 1212.85 L1618.18 1212.85 L1618.76 1212.85 L1619.35 1212.85 L1619.94 1212.85 L1620.52 1212.85 L1621.11 1212.85 L1621.7 1212.85 L1622.28 1212.85 L1622.87 1212.85 L1623.46 1212.85 L1624.04 1212.85 L1624.63 1212.85 L1625.22 1212.85 L1625.8 1212.85 L1626.39 1212.85 L1626.97 1212.85 L1627.56 1212.85 L1628.15 1212.85 L1628.73 1212.85 L1629.32 1212.85 L1629.91 1212.85 L1630.49 1212.85 L1631.08 1212.85 L1631.67 1212.85 L1632.25 1212.85 L1632.84 1212.85 L1633.42 1212.85 L1634.01 1212.85 L1634.6 1212.85 L1635.18 1212.85 L1635.77 1212.85 L1636.36 1212.85 L1636.94 1212.85 L1637.53 1212.85 L1638.12 1212.85 L1638.7 1212.85 L1639.29 1212.85 L1639.88 1212.85 L1640.46 1212.85 L1641.05 1212.85 L1641.63 1212.85 L1642.22 1212.85 L1642.81 1212.85 L1643.39 1212.85 L1643.98 1212.85 L1644.57 1212.85 L1645.15 1212.85 L1645.74 1212.85 L1646.33 1212.85 L1646.91 1212.85 L1647.5 1212.85 L1648.09 1212.85 L1648.67 1212.85 L1649.26 1212.85 L1649.84 1212.85 L1650.43 1212.85 L1651.02 1212.85 L1651.6 1212.85 L1652.19 1212.85 L1652.78 1212.85 L1653.36 1212.85 L1653.95 1212.85 L1654.54 1212.85 L1655.12 1212.85 L1655.71 1212.85 L1656.29 1212.85 L1656.88 1212.85 L1657.47 1212.85 L1658.05 1212.85 L1658.64 1212.85 L1659.23 1212.85 L1659.81 1212.85 L1660.4 1212.85 L1660.99 1212.85 L1661.57 1212.85 L1662.16 1212.85 L1662.75 1212.85 L1663.33 1212.85 L1663.92 1212.85 L1664.5 1212.85 L1665.09 1212.85 L1665.68 1212.85 L1666.26 1212.85 L1666.85 1212.85 L1667.44 1212.85 L1668.02 1212.85 L1668.61 1212.85 L1669.2 1212.85 L1669.78 1212.85 L1670.37 1212.85 L1670.96 1212.85 L1671.54 1212.85 L1672.13 1212.85 L1672.71 1212.85 L1673.3 1212.85 L1673.89 1212.85 L1674.47 1212.85 L1675.06 1212.85 L1675.65 1212.85 L1676.23 1212.85 L1676.82 1212.85 L1677.41 1212.85 L1677.99 1212.85 L1678.58 1212.85 L1679.17 1212.85 L1679.75 1212.85 L1680.34 1212.85 L1680.92 1212.85 L1681.51 1212.85 L1682.1 1212.85 L1682.68 1212.85 L1683.27 1212.85 L1683.86 1212.85 L1684.44 1212.85 L1685.03 1212.85 L1685.62 1212.85 L1686.2 1212.85 L1686.79 1212.85 L1687.37 1212.85 L1687.96 1212.85 L1688.55 1212.85 L1689.13 1212.85 L1689.72 1212.85 L1690.31 1212.85 L1690.89 1212.85 L1691.48 1212.85 L1692.07 1212.85 L1692.65 1212.85 L1693.24 1212.85 L1693.83 1212.85 L1694.41 1212.85 L1695 1212.85 L1695.58 1212.85 L1696.17 1212.85 L1696.76 1212.85 L1697.34 1212.85 L1697.93 1212.85 L1698.52 1212.85 L1699.1 1212.85 L1699.69 1212.85 L1700.28 1212.85 L1700.86 1212.85 L1701.45 1212.85 L1702.04 1212.85 L1702.62 1212.85 L1703.21 1212.85 L1703.79 1212.85 L1704.38 1212.85 L1704.97 1212.85 L1705.55 1212.85 L1706.14 1212.85 L1706.73 1212.85 L1707.31 1212.85 L1707.9 1212.85 L1708.49 1212.85 L1709.07 1212.85 L1709.66 1212.85 L1710.24 1212.85 L1710.83 1212.85 L1711.42 1212.85 L1712 1212.85 L1712.59 1212.85 L1713.18 1212.85 L1713.76 1212.85 L1714.35 1212.85 L1714.94 1212.85 L1715.52 1212.85 L1716.11 1212.85 L1716.7 1212.85 L1717.28 1212.85 L1717.87 1212.85 L1718.45 1212.85 L1719.04 1212.85 L1719.63 1212.85 L1720.21 1212.85 L1720.8 1212.85 L1721.39 1212.85 L1721.97 1212.85 L1722.56 1212.85 L1723.15 1212.85 L1723.73 1212.85 L1724.32 1212.85 L1724.91 1212.85 L1725.49 1212.85 L1726.08 1212.85 L1726.66 1212.85 L1727.25 1212.85 L1727.84 1212.85 L1728.42 1212.85 L1729.01 1212.85 L1729.6 1212.85 L1730.18 1212.85 L1730.77 1212.85 L1731.36 1212.85 L1731.94 1212.85 L1732.53 1212.85 L1733.11 1212.85 L1733.7 1212.85 L1734.29 1212.85 L1734.87 1212.85 L1735.46 1212.85 L1736.05 1212.85 L1736.63 1212.85 L1737.22 1212.85 L1737.81 1212.85 L1738.39 1212.85 L1738.98 1212.85 L1739.57 1212.85 L1740.15 1212.85 L1740.74 1212.85 L1741.32 1212.85 L1741.91 1212.85 L1742.5 1212.85 L1743.08 1212.85 L1743.67 1212.85 L1744.26 1212.85 L1744.84 1212.85 L1745.43 1212.85 L1746.02 1212.85 L1746.6 1212.85 L1747.19 1212.85 L1747.78 1212.85 L1748.36 1212.85 L1748.95 1212.85 L1749.53 1212.85 L1750.12 1212.85 L1750.71 1212.85 L1751.29 1212.85 L1751.88 1212.85 L1752.47 1212.85 L1753.05 1212.85 L1753.64 1212.85 L1754.23 1212.85 L1754.81 1212.85 L1755.4 1212.85 L1755.99 1212.85 L1756.57 1212.85 L1757.16 1212.85 L1757.74 1212.85 L1758.33 1212.85 L1758.92 1212.85 L1759.5 1212.85 L1760.09 1212.85 L1760.68 1212.85 L1761.26 1212.85 L1761.85 1212.85 L1762.44 1212.85 L1763.02 1212.85 L1763.61 1212.85 L1764.19 1212.85 L1764.78 1212.85 L1765.37 1212.85 L1765.95 1212.85 L1766.54 1212.85 L1767.13 1212.85 L1767.71 1212.85 L1768.3 1212.85 L1768.89 1212.85 L1769.47 1212.85 L1770.06 1212.85 L1770.65 1212.85 L1771.23 1212.85 L1771.82 1212.85 L1772.4 1212.85 L1772.99 1212.85 L1773.58 1212.85 L1774.16 1212.85 L1774.75 1212.85 L1775.34 1212.85 L1775.92 1212.85 L1776.51 1212.85 L1777.1 1212.85 L1777.68 1212.85 L1778.27 1212.85 L1778.86 1212.85 L1779.44 1212.85 L1780.03 1212.85 L1780.61 1212.85 L1781.2 1212.85 L1781.79 1212.85 L1782.37 1212.85 L1782.96 1212.85 L1783.55 1212.85 L1784.13 1212.85 L1784.72 1212.85 L1785.31 1212.85 L1785.89 1212.85 L1786.48 1212.85 L1787.06 1212.85 L1787.65 1212.85 L1788.24 1212.85 L1788.82 1212.85 L1789.41 1212.85 L1790 1212.85 L1790.58 1212.85 L1791.17 1212.85 L1791.76 1212.85 L1792.34 1212.85 L1792.93 1212.85 L1793.52 1212.85 L1794.1 1212.85 L1794.69 1212.85 L1795.27 1212.85 L1795.86 1212.85 L1796.45 1212.85 L1797.03 1212.85 L1797.62 1212.85 L1798.21 1212.85 L1798.79 1212.85 L1799.38 1212.85 L1799.97 1212.85 L1800.55 1212.85 L1801.14 1212.85 L1801.73 1212.85 L1802.31 1212.85 L1802.9 1212.85 L1803.48 1212.85 L1804.07 1212.85 L1804.66 1212.85 L1805.24 1212.85 L1805.83 1212.85 L1806.42 1212.85 L1807 1212.85 L1807.59 1212.85 L1808.18 1212.85 L1808.76 1212.85 L1809.35 1212.85 L1809.94 1212.85 L1810.52 1212.85 L1811.11 1212.85 L1811.69 1212.85 L1812.28 1212.85 L1812.87 1212.85 L1813.45 1212.85 L1814.04 1212.85 L1814.63 1212.85 L1815.21 1212.85 L1815.8 1212.85 L1816.39 1212.85 L1816.97 1212.85 L1817.56 1212.85 L1818.14 1212.85 L1818.73 1212.85 L1819.32 1212.85 L1819.9 1212.85 L1820.49 1212.85 L1821.08 1212.85 L1821.66 1212.85 L1822.25 1212.85 L1822.84 1212.85 L1823.42 1212.85 L1824.01 1212.85 L1824.6 1212.85 L1825.18 1212.85 L1825.77 1212.85 L1826.35 1212.85 L1826.94 1212.85 L1827.53 1212.85 L1828.11 1212.85 L1828.7 1212.85 L1829.29 1212.85 L1829.87 1212.85 L1830.46 1212.85 L1831.05 1212.85 L1831.63 1212.85 L1832.22 1212.85 L1832.81 1212.85 L1833.39 1212.85 L1833.98 1212.85 L1834.56 1212.85 L1835.15 1212.85 L1835.74 1212.85 L1836.32 1212.85 L1836.91 1212.85 L1837.5 1212.85 L1838.08 1212.85 L1838.67 1212.85 L1839.26 1212.85 L1839.84 1212.85 L1840.43 1212.85 L1841.01 1212.85 L1841.6 1212.85 L1842.19 1212.85 L1842.77 1212.85 L1843.36 1212.85 L1843.95 1212.85 L1844.53 1212.85 L1845.12 1212.85 L1845.71 1212.85 L1846.29 1212.85 L1846.88 1212.85 L1847.47 1212.85 L1848.05 1212.85 L1848.64 1212.85 L1849.22 1212.85 L1849.81 1212.85 L1850.4 1212.85 L1850.98 1212.85 L1851.57 1212.85 L1852.16 1212.85 L1852.74 1212.85 L1853.33 1212.85 L1853.92 1212.85 L1854.5 1212.85 L1855.09 1212.85 L1855.68 1212.85 L1856.26 1212.85 L1856.85 1212.85 L1857.43 1212.85 L1858.02 1212.85 L1858.61 1212.85 L1859.19 1212.85 L1859.78 1212.85 L1860.37 1212.85 L1860.95 1212.85 L1861.54 1212.85 L1862.13 1212.85 L1862.71 1212.85 L1863.3 1212.85 L1863.88 1212.85 L1864.47 1212.85 L1865.06 1212.85 L1865.64 1212.85 L1866.23 1212.85 L1866.82 1212.85 L1867.4 1212.85 L1867.99 1212.85 L1868.58 1212.85 L1869.16 1212.85 L1869.75 1212.85 L1870.34 1212.85 L1870.92 1212.85 L1871.51 1212.85 L1872.09 1212.85 L1872.68 1212.85 L1873.27 1212.85 L1873.85 1212.85 L1874.44 1212.85 L1875.03 1212.85 L1875.61 1212.85 L1876.2 1212.85 L1876.79 1212.85 L1877.37 1212.85 L1877.96 1212.85 L1878.55 1212.85 L1879.13 1212.85 L1879.72 1212.85 L1880.3 1212.85 L1880.89 1212.85 L1881.48 1212.85 L1882.06 1212.85 L1882.65 1212.85 L1883.24 1212.85 L1883.82 1212.85 L1884.41 1212.85 L1885 1212.85 L1885.58 1212.85 L1886.17 1212.85 L1886.76 1212.85 L1887.34 1212.85 L1887.93 1212.85 L1888.51 1212.85 L1889.1 1212.85 L1889.69 1212.85 L1890.27 1212.85 L1890.86 1212.85 L1891.45 1212.85 L1892.03 1212.85 L1892.62 1212.85 L1893.21 1212.85 L1893.79 1212.85 L1894.38 1212.85 L1894.96 1212.85 L1895.55 1212.85 L1896.14 1212.85 L1896.72 1212.85 L1897.31 1212.85 L1897.9 1212.85 L1898.48 1212.85 L1899.07 1212.85 L1899.66 1212.85 L1900.24 1212.85 L1900.83 1212.85 L1901.42 1212.85 L1902 1212.85 L1902.59 1212.85 L1903.17 1212.85 L1903.76 1212.85 L1904.35 1212.85 L1904.93 1212.85 L1905.52 1212.85 L1906.11 1212.85 L1906.69 1212.85 L1907.28 1212.85 L1907.87 1212.85 L1908.45 1212.85 L1909.04 1212.85 L1909.63 1212.85 L1910.21 1212.85 L1910.8 1212.85 L1911.38 1212.85 L1911.97 1212.85 L1912.56 1212.85 L1913.14 1212.85 L1913.73 1212.85 L1914.32 1212.85 L1914.9 1212.85 L1915.49 1212.85 L1916.08 1212.85 L1916.66 1212.85 L1917.25 1212.85 L1917.83 1212.85 L1918.42 1212.85 L1919.01 1212.85 L1919.59 1212.85 L1920.18 1212.85 L1920.77 1212.85 L1921.35 1212.85 L1921.94 1212.85 L1922.53 1212.85 L1923.11 1212.85 L1923.7 1212.85 L1924.29 1212.85 L1924.87 1212.85 L1925.46 1212.85 L1926.04 1212.85 L1926.63 1212.85 L1927.22 1212.85 L1927.8 1212.85 L1928.39 1212.85 L1928.98 1212.85 L1929.56 1212.85 L1930.15 1212.85 L1930.74 1212.85 L1931.32 1212.85 L1931.91 1212.85 L1932.5 1212.85 L1933.08 1212.85 L1933.67 1212.85 L1934.25 1212.85 L1934.84 1212.85 L1935.43 1212.85 L1936.01 1212.85 L1936.6 1212.85 L1937.19 1212.85 L1937.77 1212.85 L1938.36 1212.85 L1938.95 1212.85 L1939.53 1212.85 L1940.12 1212.85 L1940.71 1212.85 L1941.29 1212.85 L1941.88 1212.85 L1942.46 1212.85 L1943.05 1212.85 L1943.64 1212.85 L1944.22 1212.85 L1944.81 1212.85 L1945.4 1212.85 L1945.98 1212.85 L1946.57 1212.85 L1947.16 1212.85 L1947.74 1212.85 L1948.33 1212.85 L1948.91 1212.85 L1949.5 1212.85 L1950.09 1212.85 L1950.67 1212.85 L1951.26 1212.85 L1951.85 1212.85 L1952.43 1212.85 L1953.02 1212.85 L1953.61 1212.85 L1954.19 1212.85 L1954.78 1212.85 L1955.37 1212.85 L1955.95 1212.85 L1956.54 1212.85 L1957.12 1212.85 L1957.71 1212.85 L1958.3 1212.85 L1958.88 1212.85 L1959.47 1212.85 L1960.06 1212.85 L1960.64 1212.85 L1961.23 1212.85 L1961.82 1212.85 L1962.4 1212.85 L1962.99 1212.85 L1963.58 1212.85 L1964.16 1212.85 L1964.75 1212.85 L1965.33 1212.85 L1965.92 1212.85 L1966.51 1212.85 L1967.09 1212.85 L1967.68 1212.85 L1968.27 1212.85 L1968.85 1212.85 L1969.44 1212.85 L1970.03 1212.85 L1970.61 1212.85 L1971.2 1212.85 L1971.78 1212.85 L1972.37 1212.85 L1972.96 1212.85 L1973.54 1212.85 L1974.13 1212.85 L1974.72 1212.85 L1975.3 1212.85 L1975.89 1212.85 L1976.48 1212.85 L1977.06 1212.85 L1977.65 1212.85 L1978.24 1212.85 L1978.82 1212.85 L1979.41 1212.85 L1979.99 1212.85 L1980.58 1212.85 L1981.17 1212.85 L1981.75 1212.85 L1982.34 1212.85 L1982.93 1212.85 L1983.51 1212.85 L1984.1 1212.85 L1984.69 1212.85 L1985.27 1212.85 L1985.86 1212.85 L1986.45 1212.85 L1987.03 1212.85 L1987.62 1212.85 L1988.2 1212.85 L1988.79 1212.85 L1989.38 1212.85 L1989.96 1212.85 L1990.55 1212.85 L1991.14 1212.85 L1991.72 1212.85 L1992.31 1212.85 L1992.9 1212.85 L1993.48 1212.85 L1994.07 1212.85 L1994.65 1212.85 L1995.24 1212.85 L1995.83 1212.85 L1996.41 1212.85 L1997 1212.85 L1997.59 1212.85 L1998.17 1212.85 L1998.76 1212.85 L1999.35 1212.85 L1999.93 1212.85 L2000.52 1212.85 L2001.11 1212.85 L2001.69 1212.85 L2002.28 1212.85 L2002.86 1212.85 L2003.45 1212.85 L2004.04 1212.85 L2004.62 1212.85 L2005.21 1212.85 L2005.8 1212.85 L2006.38 1212.85 L2006.97 1212.85 L2007.56 1212.85 L2008.14 1212.85 L2008.73 1212.85 L2009.32 1212.85 L2009.9 1212.85 L2010.49 1212.85 L2011.07 1212.85 L2011.66 1212.85 L2012.25 1212.85 L2012.83 1212.85 L2013.42 1212.85 L2014.01 1212.85 L2014.59 1212.85 L2015.18 1212.85 L2015.77 1212.85 L2016.35 1212.85 L2016.94 1212.85 L2017.53 1212.85 L2018.11 1212.85 L2018.7 1212.85 L2019.28 1212.85 L2019.87 1212.85 L2020.46 1212.85 L2021.04 1212.85 L2021.63 1212.85 L2022.22 1212.85 L2022.8 1212.85 L2023.39 1212.85 L2023.98 1212.85 L2024.56 1212.85 L2025.15 1212.85 L2025.73 1212.85 L2026.32 1212.85 L2026.91 1212.85 L2027.49 1212.85 L2028.08 1212.85 L2028.67 1212.85 L2029.25 1212.85 L2029.84 1212.85 L2030.43 1212.85 L2031.01 1212.85 L2031.6 1212.85 L2032.19 1212.85 L2032.77 1212.85 L2033.36 1212.85 L2033.94 1212.85 L2034.53 1212.85 L2035.12 1212.85 L2035.7 1212.85 L2036.29 1212.85 L2036.88 1212.85 L2037.46 1212.85 L2038.05 1212.85 L2038.64 1212.85 L2039.22 1212.85 L2039.81 1212.85 L2040.4 1212.85 L2040.98 1212.85 L2041.57 1212.85 L2042.15 1212.85 L2042.74 1212.85 L2043.33 1212.85 L2043.91 1212.85 L2044.5 1212.85 L2045.09 1212.85 L2045.67 1212.85 L2046.26 1212.85 L2046.85 1212.85 L2047.43 1212.85 L2048.02 1212.85 L2048.6 1212.85 L2049.19 1212.85 L2049.78 1212.85 L2050.36 1212.85 L2050.95 1212.85 L2051.54 1212.85 L2052.12 1212.85 L2052.71 1212.85 L2053.3 1212.85 L2053.88 1212.85 L2054.47 1212.85 L2055.06 1212.85 L2055.64 1212.85 L2056.23 1212.85 L2056.81 1212.85 L2057.4 1212.85 L2057.99 1212.85 L2058.57 1212.85 L2059.16 1212.85 L2059.75 1212.85 L2060.33 1212.85 L2060.92 1212.85 L2061.51 1212.85 L2062.09 1212.85 L2062.68 1212.85 L2063.27 1212.85 L2063.85 1212.85 L2064.44 1212.85 L2065.02 1212.85 L2065.61 1212.85 L2066.2 1212.85 L2066.78 1212.85 L2067.37 1212.85 L2067.96 1212.85 L2068.54 1212.85 L2069.13 1212.85 L2069.72 1212.85 L2070.3 1212.85 L2070.89 1212.85 L2071.48 1212.85 L2072.06 1212.85 L2072.65 1212.85 L2073.23 1212.85 L2073.82 1212.85 L2074.41 1212.85 L2074.99 1212.85 L2075.58 1212.85 L2076.17 1212.85 L2076.75 1212.85 L2077.34 1212.85 L2077.93 1212.85 L2078.51 1212.85 L2079.1 1212.85 L2079.68 1212.85 L2080.27 1212.85 L2080.86 1212.85 L2081.44 1212.85 L2082.03 1212.85 L2082.62 1212.85 L2083.2 1212.85 L2083.79 1212.85 L2084.38 1212.85 L2084.96 1212.85 L2085.55 1212.85 L2086.14 1212.85 L2086.72 1212.85 L2087.31 1212.85 L2087.89 1212.85 L2088.48 1212.85 L2089.07 1212.85 L2089.65 1212.85 L2090.24 1212.85 L2090.83 1212.85 L2091.41 1212.85 L2092 1212.85 L2092.59 1212.85 L2093.17 1212.85 L2093.76 1212.85 L2094.35 1212.85 L2094.93 1212.85 L2095.52 1212.85 L2096.1 1212.85 L2096.69 1212.85 L2097.28 1212.85 L2097.86 1212.85 L2098.45 1212.85 L2099.04 1212.85 L2099.62 1212.85 L2100.21 1212.85 L2100.8 1212.85 L2101.38 1212.85 L2101.97 1212.85 L2102.55 1212.85 L2103.14 1212.85 L2103.73 1212.85 L2104.31 1212.85 L2104.9 1212.85 L2105.49 1212.85 L2106.07 1212.85 L2106.66 1212.85 L2107.25 1212.85 L2107.83 1212.85 L2108.42 1212.85 L2109.01 1212.85 L2109.59 1212.85 L2110.18 1212.85 L2110.76 1212.85 L2111.35 1212.85 L2111.94 1212.85 L2112.52 1212.85 L2113.11 1212.85 L2113.7 1212.85 L2114.28 1212.85 L2114.87 1212.85 L2115.46 1212.85 L2116.04 1212.85 L2116.63 1212.85 L2117.22 1212.85 L2117.8 1212.85 L2118.39 1212.85 L2118.97 1212.85 L2119.56 1212.85 L2120.15 1212.85 L2120.73 1212.85 L2121.32 1212.85 L2121.91 1212.85 L2122.49 1212.85 L2123.08 1212.85 L2123.67 1212.85 L2124.25 1212.85 L2124.84 1212.85 L2125.42 1212.85 L2126.01 1212.85 L2126.6 1212.85 L2127.18 1212.85 L2127.77 1212.85 L2128.36 1212.85 L2128.94 1212.85 L2129.53 1212.85 L2130.12 1212.85 L2130.7 1212.85 L2131.29 1212.85 L2131.88 1212.85 L2132.46 1212.85 L2133.05 1212.85 L2133.63 1212.85 L2134.22 1212.85 L2134.81 1212.85 L2135.39 1212.85 L2135.98 1212.85 L2136.57 1212.85 L2137.15 1212.85 L2137.74 1212.85 L2138.33 1212.85 L2138.91 1212.85 L2139.5 1212.85 L2140.09 1212.85 L2140.67 1212.85 L2141.26 1212.85 L2141.84 1212.85 L2142.43 1212.85 L2143.02 1212.85 L2143.6 1212.85 L2144.19 1212.85 L2144.78 1212.85 L2145.36 1212.85 L2145.95 1212.85 L2146.54 1212.85 L2147.12 1212.85 L2147.71 1212.85 L2148.3 1212.85 L2148.88 1212.85 L2149.47 1212.85 L2150.05 1212.85 L2150.64 1212.85 L2151.23 1212.85 L2151.81 1212.85 L2152.4 1212.85 L2152.99 1212.85 L2153.57 1212.85 L2154.16 1212.85 L2154.75 1212.85 L2155.33 1212.85 L2155.92 1212.85 L2156.5 1212.85 L2157.09 1212.85 L2157.68 1212.85 L2158.26 1212.85 L2158.26 1212.11 L2157.68 1212.11 L2157.09 1212.11 L2156.5 1212.11 L2155.92 1212.11 L2155.33 1212.11 L2154.75 1212.11 L2154.16 1212.11 L2153.57 1212.11 L2152.99 1212.11 L2152.4 1212.11 L2151.81 1212.11 L2151.23 1212.11 L2150.64 1212.11 L2150.05 1212.11 L2149.47 1212.11 L2148.88 1212.11 L2148.3 1212.11 L2147.71 1212.11 L2147.12 1212.11 L2146.54 1212.11 L2145.95 1212.11 L2145.36 1212.11 L2144.78 1212.11 L2144.19 1212.11 L2143.6 1212.11 L2143.02 1212.11 L2142.43 1212.11 L2141.84 1212.11 L2141.26 1212.11 L2140.67 1212.11 L2140.09 1212.11 L2139.5 1212.11 L2138.91 1212.11 L2138.33 1212.11 L2137.74 1212.11 L2137.15 1212.11 L2136.57 1212.11 L2135.98 1212.11 L2135.39 1212.11 L2134.81 1212.11 L2134.22 1212.11 L2133.63 1212.11 L2133.05 1212.11 L2132.46 1212.11 L2131.88 1212.11 L2131.29 1212.11 L2130.7 1212.11 L2130.12 1212.11 L2129.53 1212.11 L2128.94 1212.11 L2128.36 1212.11 L2127.77 1212.11 L2127.18 1212.11 L2126.6 1212.11 L2126.01 1212.11 L2125.42 1212.11 L2124.84 1212.11 L2124.25 1212.11 L2123.67 1212.11 L2123.08 1212.11 L2122.49 1212.11 L2121.91 1212.11 L2121.32 1212.11 L2120.73 1212.11 L2120.15 1212.11 L2119.56 1212.11 L2118.97 1212.11 L2118.39 1212.11 L2117.8 1212.11 L2117.22 1212.11 L2116.63 1212.11 L2116.04 1212.11 L2115.46 1212.11 L2114.87 1212.11 L2114.28 1212.11 L2113.7 1212.11 L2113.11 1212.11 L2112.52 1212.11 L2111.94 1212.11 L2111.35 1212.11 L2110.76 1212.11 L2110.18 1212.11 L2109.59 1212.11 L2109.01 1212.11 L2108.42 1212.11 L2107.83 1212.11 L2107.25 1212.11 L2106.66 1212.11 L2106.07 1212.11 L2105.49 1212.11 L2104.9 1212.11 L2104.31 1212.11 L2103.73 1212.11 L2103.14 1212.11 L2102.55 1212.11 L2101.97 1212.11 L2101.38 1212.11 L2100.8 1212.11 L2100.21 1212.11 L2099.62 1212.11 L2099.04 1212.11 L2098.45 1212.11 L2097.86 1212.11 L2097.28 1212.11 L2096.69 1212.11 L2096.1 1212.11 L2095.52 1212.11 L2094.93 1212.11 L2094.35 1212.11 L2093.76 1212.11 L2093.17 1212.11 L2092.59 1212.11 L2092 1212.11 L2091.41 1212.11 L2090.83 1212.11 L2090.24 1212.11 L2089.65 1212.11 L2089.07 1212.11 L2088.48 1212.11 L2087.89 1212.11 L2087.31 1212.11 L2086.72 1212.11 L2086.14 1212.11 L2085.55 1212.11 L2084.96 1212.11 L2084.38 1212.11 L2083.79 1212.11 L2083.2 1212.11 L2082.62 1212.11 L2082.03 1212.11 L2081.44 1212.11 L2080.86 1212.11 L2080.27 1212.11 L2079.68 1212.11 L2079.1 1212.11 L2078.51 1212.11 L2077.93 1212.11 L2077.34 1212.11 L2076.75 1212.11 L2076.17 1212.11 L2075.58 1212.11 L2074.99 1212.11 L2074.41 1212.11 L2073.82 1212.11 L2073.23 1212.11 L2072.65 1212.11 L2072.06 1212.11 L2071.48 1212.11 L2070.89 1212.11 L2070.3 1212.11 L2069.72 1212.11 L2069.13 1212.11 L2068.54 1212.11 L2067.96 1212.11 L2067.37 1212.11 L2066.78 1212.11 L2066.2 1212.11 L2065.61 1212.11 L2065.02 1212.11 L2064.44 1212.11 L2063.85 1212.11 L2063.27 1212.11 L2062.68 1212.11 L2062.09 1212.11 L2061.51 1212.11 L2060.92 1212.11 L2060.33 1212.11 L2059.75 1212.11 L2059.16 1212.11 L2058.57 1212.11 L2057.99 1212.11 L2057.4 1212.11 L2056.81 1212.11 L2056.23 1212.11 L2055.64 1212.11 L2055.06 1212.11 L2054.47 1212.11 L2053.88 1212.11 L2053.3 1212.11 L2052.71 1212.11 L2052.12 1212.11 L2051.54 1212.11 L2050.95 1212.11 L2050.36 1212.11 L2049.78 1212.11 L2049.19 1212.11 L2048.6 1212.11 L2048.02 1212.11 L2047.43 1212.11 L2046.85 1212.11 L2046.26 1212.11 L2045.67 1212.11 L2045.09 1212.11 L2044.5 1212.11 L2043.91 1212.11 L2043.33 1212.11 L2042.74 1212.11 L2042.15 1212.11 L2041.57 1212.11 L2040.98 1212.11 L2040.4 1212.11 L2039.81 1212.11 L2039.22 1212.11 L2038.64 1212.11 L2038.05 1212.11 L2037.46 1212.11 L2036.88 1212.11 L2036.29 1212.11 L2035.7 1212.11 L2035.12 1212.11 L2034.53 1212.11 L2033.94 1212.11 L2033.36 1212.11 L2032.77 1212.11 L2032.19 1212.11 L2031.6 1212.11 L2031.01 1212.11 L2030.43 1212.11 L2029.84 1212.11 L2029.25 1212.11 L2028.67 1212.11 L2028.08 1212.11 L2027.49 1212.11 L2026.91 1212.11 L2026.32 1212.11 L2025.73 1212.11 L2025.15 1212.11 L2024.56 1212.11 L2023.98 1212.11 L2023.39 1212.11 L2022.8 1212.11 L2022.22 1212.11 L2021.63 1212.11 L2021.04 1212.11 L2020.46 1212.11 L2019.87 1212.11 L2019.28 1212.11 L2018.7 1212.11 L2018.11 1212.11 L2017.53 1212.11 L2016.94 1212.11 L2016.35 1212.11 L2015.77 1212.11 L2015.18 1212.11 L2014.59 1212.11 L2014.01 1212.11 L2013.42 1212.11 L2012.83 1212.11 L2012.25 1212.11 L2011.66 1212.11 L2011.07 1212.11 L2010.49 1212.11 L2009.9 1212.11 L2009.32 1212.11 L2008.73 1212.11 L2008.14 1212.11 L2007.56 1212.11 L2006.97 1212.11 L2006.38 1212.11 L2005.8 1212.11 L2005.21 1212.11 L2004.62 1212.11 L2004.04 1212.11 L2003.45 1212.11 L2002.86 1212.11 L2002.28 1212.11 L2001.69 1212.11 L2001.11 1212.11 L2000.52 1212.11 L1999.93 1212.11 L1999.35 1212.11 L1998.76 1212.11 L1998.17 1212.11 L1997.59 1212.11 L1997 1212.11 L1996.41 1212.11 L1995.83 1212.11 L1995.24 1212.11 L1994.65 1212.11 L1994.07 1212.11 L1993.48 1212.11 L1992.9 1212.11 L1992.31 1212.11 L1991.72 1212.11 L1991.14 1212.11 L1990.55 1212.11 L1989.96 1212.11 L1989.38 1212.11 L1988.79 1212.11 L1988.2 1212.11 L1987.62 1212.11 L1987.03 1212.11 L1986.45 1212.11 L1985.86 1212.11 L1985.27 1212.11 L1984.69 1212.11 L1984.1 1212.11 L1983.51 1212.11 L1982.93 1212.11 L1982.34 1212.11 L1981.75 1212.11 L1981.17 1212.11 L1980.58 1212.11 L1979.99 1212.11 L1979.41 1212.11 L1978.82 1212.11 L1978.24 1212.11 L1977.65 1212.11 L1977.06 1212.11 L1976.48 1212.11 L1975.89 1212.11 L1975.3 1212.11 L1974.72 1212.11 L1974.13 1212.11 L1973.54 1212.11 L1972.96 1212.11 L1972.37 1212.11 L1971.78 1212.11 L1971.2 1212.11 L1970.61 1212.11 L1970.03 1212.11 L1969.44 1212.11 L1968.85 1212.11 L1968.27 1212.11 L1967.68 1212.11 L1967.09 1212.11 L1966.51 1212.11 L1965.92 1212.11 L1965.33 1212.11 L1964.75 1212.11 L1964.16 1212.11 L1963.58 1212.11 L1962.99 1212.11 L1962.4 1212.11 L1961.82 1212.11 L1961.23 1212.11 L1960.64 1212.11 L1960.06 1212.11 L1959.47 1212.11 L1958.88 1212.11 L1958.3 1212.11 L1957.71 1212.11 L1957.12 1212.11 L1956.54 1212.11 L1955.95 1212.11 L1955.37 1212.11 L1954.78 1212.11 L1954.19 1212.11 L1953.61 1212.11 L1953.02 1212.11 L1952.43 1212.11 L1951.85 1212.11 L1951.26 1212.11 L1950.67 1212.11 L1950.09 1212.11 L1949.5 1212.11 L1948.91 1212.11 L1948.33 1212.11 L1947.74 1212.11 L1947.16 1212.11 L1946.57 1212.11 L1945.98 1212.11 L1945.4 1212.11 L1944.81 1212.11 L1944.22 1212.11 L1943.64 1212.11 L1943.05 1212.11 L1942.46 1212.11 L1941.88 1212.11 L1941.29 1212.11 L1940.71 1212.11 L1940.12 1212.11 L1939.53 1212.11 L1938.95 1212.11 L1938.36 1212.11 L1937.77 1212.11 L1937.19 1212.11 L1936.6 1212.11 L1936.01 1212.11 L1935.43 1212.11 L1934.84 1212.11 L1934.25 1212.11 L1933.67 1212.11 L1933.08 1212.11 L1932.5 1212.11 L1931.91 1212.11 L1931.32 1212.11 L1930.74 1212.11 L1930.15 1212.11 L1929.56 1212.11 L1928.98 1212.11 L1928.39 1212.11 L1927.8 1212.11 L1927.22 1212.11 L1926.63 1212.11 L1926.04 1212.11 L1925.46 1212.11 L1924.87 1212.11 L1924.29 1212.11 L1923.7 1212.11 L1923.11 1212.11 L1922.53 1212.11 L1921.94 1212.11 L1921.35 1212.11 L1920.77 1212.11 L1920.18 1212.11 L1919.59 1212.11 L1919.01 1212.11 L1918.42 1212.11 L1917.83 1212.11 L1917.25 1212.11 L1916.66 1212.11 L1916.08 1212.11 L1915.49 1212.11 L1914.9 1212.11 L1914.32 1212.11 L1913.73 1212.11 L1913.14 1212.11 L1912.56 1212.11 L1911.97 1212.11 L1911.38 1212.11 L1910.8 1212.11 L1910.21 1212.11 L1909.63 1212.11 L1909.04 1212.11 L1908.45 1212.11 L1907.87 1212.11 L1907.28 1212.11 L1906.69 1212.11 L1906.11 1212.11 L1905.52 1212.11 L1904.93 1212.11 L1904.35 1212.11 L1903.76 1212.11 L1903.17 1212.11 L1902.59 1212.11 L1902 1212.11 L1901.42 1212.11 L1900.83 1212.11 L1900.24 1212.11 L1899.66 1212.11 L1899.07 1212.11 L1898.48 1212.11 L1897.9 1212.11 L1897.31 1212.11 L1896.72 1212.11 L1896.14 1212.11 L1895.55 1212.11 L1894.96 1212.11 L1894.38 1212.11 L1893.79 1212.11 L1893.21 1212.11 L1892.62 1212.11 L1892.03 1212.11 L1891.45 1212.11 L1890.86 1212.11 L1890.27 1212.11 L1889.69 1212.11 L1889.1 1212.11 L1888.51 1212.11 L1887.93 1212.11 L1887.34 1212.11 L1886.76 1212.11 L1886.17 1212.11 L1885.58 1212.11 L1885 1212.11 L1884.41 1212.11 L1883.82 1212.11 L1883.24 1212.11 L1882.65 1212.11 L1882.06 1212.11 L1881.48 1212.11 L1880.89 1212.11 L1880.3 1212.11 L1879.72 1212.11 L1879.13 1212.11 L1878.55 1212.11 L1877.96 1212.11 L1877.37 1212.11 L1876.79 1212.11 L1876.2 1212.11 L1875.61 1212.11 L1875.03 1212.11 L1874.44 1212.11 L1873.85 1212.11 L1873.27 1212.11 L1872.68 1212.11 L1872.09 1212.11 L1871.51 1212.11 L1870.92 1212.11 L1870.34 1212.11 L1869.75 1212.11 L1869.16 1212.11 L1868.58 1212.11 L1867.99 1212.11 L1867.4 1212.11 L1866.82 1212.11 L1866.23 1212.11 L1865.64 1212.11 L1865.06 1212.11 L1864.47 1212.11 L1863.88 1212.11 L1863.3 1212.11 L1862.71 1212.11 L1862.13 1212.11 L1861.54 1212.11 L1860.95 1212.11 L1860.37 1212.11 L1859.78 1212.11 L1859.19 1212.11 L1858.61 1212.11 L1858.02 1212.11 L1857.43 1212.11 L1856.85 1212.11 L1856.26 1212.11 L1855.68 1212.11 L1855.09 1212.11 L1854.5 1212.11 L1853.92 1212.11 L1853.33 1212.11 L1852.74 1212.11 L1852.16 1212.11 L1851.57 1212.11 L1850.98 1212.11 L1850.4 1212.11 L1849.81 1212.11 L1849.22 1212.11 L1848.64 1212.11 L1848.05 1212.11 L1847.47 1212.11 L1846.88 1212.11 L1846.29 1212.11 L1845.71 1212.11 L1845.12 1212.11 L1844.53 1212.11 L1843.95 1212.11 L1843.36 1212.11 L1842.77 1212.11 L1842.19 1212.11 L1841.6 1212.11 L1841.01 1212.11 L1840.43 1212.11 L1839.84 1212.11 L1839.26 1212.11 L1838.67 1212.11 L1838.08 1212.11 L1837.5 1212.11 L1836.91 1212.11 L1836.32 1212.11 L1835.74 1212.11 L1835.15 1212.11 L1834.56 1212.11 L1833.98 1212.11 L1833.39 1212.11 L1832.81 1212.11 L1832.22 1212.11 L1831.63 1212.11 L1831.05 1212.11 L1830.46 1212.11 L1829.87 1212.11 L1829.29 1212.11 L1828.7 1212.11 L1828.11 1212.11 L1827.53 1212.11 L1826.94 1212.11 L1826.35 1212.11 L1825.77 1212.11 L1825.18 1212.11 L1824.6 1212.11 L1824.01 1212.11 L1823.42 1212.11 L1822.84 1212.11 L1822.25 1212.11 L1821.66 1212.11 L1821.08 1212.11 L1820.49 1212.11 L1819.9 1212.11 L1819.32 1212.11 L1818.73 1212.11 L1818.14 1212.11 L1817.56 1212.11 L1816.97 1212.11 L1816.39 1212.11 L1815.8 1212.11 L1815.21 1212.11 L1814.63 1212.11 L1814.04 1212.11 L1813.45 1212.11 L1812.87 1212.11 L1812.28 1212.11 L1811.69 1212.11 L1811.11 1212.11 L1810.52 1212.11 L1809.94 1212.11 L1809.35 1212.11 L1808.76 1212.11 L1808.18 1212.11 L1807.59 1212.11 L1807 1212.11 L1806.42 1212.11 L1805.83 1212.11 L1805.24 1212.11 L1804.66 1212.11 L1804.07 1212.11 L1803.48 1212.11 L1802.9 1212.11 L1802.31 1212.11 L1801.73 1212.11 L1801.14 1212.11 L1800.55 1212.11 L1799.97 1212.11 L1799.38 1212.11 L1798.79 1212.11 L1798.21 1212.11 L1797.62 1212.11 L1797.03 1212.11 L1796.45 1212.11 L1795.86 1212.11 L1795.27 1212.11 L1794.69 1212.11 L1794.1 1212.11 L1793.52 1212.11 L1792.93 1212.11 L1792.34 1212.11 L1791.76 1212.11 L1791.17 1212.11 L1790.58 1212.11 L1790 1212.11 L1789.41 1212.11 L1788.82 1212.11 L1788.24 1212.11 L1787.65 1212.11 L1787.06 1212.11 L1786.48 1212.11 L1785.89 1212.11 L1785.31 1212.11 L1784.72 1212.11 L1784.13 1212.11 L1783.55 1212.11 L1782.96 1212.11 L1782.37 1212.11 L1781.79 1212.11 L1781.2 1212.11 L1780.61 1212.11 L1780.03 1212.11 L1779.44 1212.11 L1778.86 1212.11 L1778.27 1212.11 L1777.68 1212.11 L1777.1 1212.11 L1776.51 1212.11 L1775.92 1212.11 L1775.34 1212.11 L1774.75 1212.11 L1774.16 1212.11 L1773.58 1212.11 L1772.99 1212.11 L1772.4 1212.11 L1771.82 1212.11 L1771.23 1212.11 L1770.65 1212.11 L1770.06 1212.11 L1769.47 1212.11 L1768.89 1212.11 L1768.3 1212.11 L1767.71 1212.11 L1767.13 1212.11 L1766.54 1212.11 L1765.95 1212.11 L1765.37 1212.11 L1764.78 1212.11 L1764.19 1212.11 L1763.61 1212.11 L1763.02 1212.11 L1762.44 1212.11 L1761.85 1212.11 L1761.26 1212.11 L1760.68 1212.11 L1760.09 1212.11 L1759.5 1212.11 L1758.92 1212.11 L1758.33 1212.11 L1757.74 1212.11 L1757.16 1212.11 L1756.57 1212.11 L1755.99 1212.11 L1755.4 1212.11 L1754.81 1212.11 L1754.23 1212.11 L1753.64 1212.11 L1753.05 1212.11 L1752.47 1212.11 L1751.88 1212.11 L1751.29 1212.11 L1750.71 1212.11 L1750.12 1212.11 L1749.53 1212.11 L1748.95 1212.11 L1748.36 1212.11 L1747.78 1212.11 L1747.19 1212.11 L1746.6 1212.11 L1746.02 1212.11 L1745.43 1212.11 L1744.84 1212.11 L1744.26 1212.11 L1743.67 1212.11 L1743.08 1212.11 L1742.5 1212.11 L1741.91 1212.11 L1741.32 1212.11 L1740.74 1212.11 L1740.15 1212.11 L1739.57 1212.11 L1738.98 1212.11 L1738.39 1212.11 L1737.81 1212.11 L1737.22 1212.11 L1736.63 1212.11 L1736.05 1212.11 L1735.46 1212.11 L1734.87 1212.11 L1734.29 1212.11 L1733.7 1212.11 L1733.11 1212.11 L1732.53 1212.11 L1731.94 1212.11 L1731.36 1212.11 L1730.77 1212.11 L1730.18 1212.11 L1729.6 1212.11 L1729.01 1212.11 L1728.42 1212.11 L1727.84 1212.11 L1727.25 1212.11 L1726.66 1212.11 L1726.08 1212.11 L1725.49 1212.11 L1724.91 1212.11 L1724.32 1212.11 L1723.73 1212.11 L1723.15 1212.11 L1722.56 1212.11 L1721.97 1212.11 L1721.39 1212.11 L1720.8 1212.11 L1720.21 1212.11 L1719.63 1212.11 L1719.04 1212.11 L1718.45 1212.11 L1717.87 1212.11 L1717.28 1212.11 L1716.7 1212.11 L1716.11 1212.11 L1715.52 1212.11 L1714.94 1212.11 L1714.35 1212.11 L1713.76 1212.11 L1713.18 1212.11 L1712.59 1212.11 L1712 1212.11 L1711.42 1212.11 L1710.83 1212.11 L1710.24 1212.11 L1709.66 1212.11 L1709.07 1212.11 L1708.49 1212.11 L1707.9 1212.11 L1707.31 1212.11 L1706.73 1212.11 L1706.14 1212.11 L1705.55 1212.11 L1704.97 1212.11 L1704.38 1212.11 L1703.79 1212.11 L1703.21 1212.11 L1702.62 1212.11 L1702.04 1212.11 L1701.45 1212.11 L1700.86 1212.11 L1700.28 1212.11 L1699.69 1212.11 L1699.1 1212.11 L1698.52 1212.11 L1697.93 1212.11 L1697.34 1212.11 L1696.76 1212.11 L1696.17 1212.11 L1695.58 1212.11 L1695 1212.11 L1694.41 1212.11 L1693.83 1212.11 L1693.24 1212.11 L1692.65 1212.11 L1692.07 1212.11 L1691.48 1212.11 L1690.89 1212.11 L1690.31 1212.11 L1689.72 1212.11 L1689.13 1212.11 L1688.55 1212.11 L1687.96 1212.11 L1687.37 1212.11 L1686.79 1212.11 L1686.2 1212.11 L1685.62 1212.11 L1685.03 1212.11 L1684.44 1212.11 L1683.86 1212.11 L1683.27 1212.11 L1682.68 1212.11 L1682.1 1212.11 L1681.51 1212.11 L1680.92 1212.11 L1680.34 1212.11 L1679.75 1212.11 L1679.17 1212.11 L1678.58 1212.11 L1677.99 1212.11 L1677.41 1212.11 L1676.82 1212.11 L1676.23 1212.11 L1675.65 1212.11 L1675.06 1212.11 L1674.47 1212.11 L1673.89 1212.11 L1673.3 1212.11 L1672.71 1212.11 L1672.13 1212.11 L1671.54 1212.11 L1670.96 1212.11 L1670.37 1212.11 L1669.78 1212.11 L1669.2 1212.11 L1668.61 1212.11 L1668.02 1212.11 L1667.44 1212.11 L1666.85 1212.11 L1666.26 1212.11 L1665.68 1212.11 L1665.09 1212.11 L1664.5 1212.11 L1663.92 1212.11 L1663.33 1212.11 L1662.75 1212.11 L1662.16 1212.11 L1661.57 1212.11 L1660.99 1212.11 L1660.4 1212.11 L1659.81 1212.11 L1659.23 1212.11 L1658.64 1212.11 L1658.05 1212.11 L1657.47 1212.11 L1656.88 1212.11 L1656.29 1212.11 L1655.71 1212.11 L1655.12 1212.11 L1654.54 1212.11 L1653.95 1212.11 L1653.36 1212.11 L1652.78 1212.11 L1652.19 1212.11 L1651.6 1212.11 L1651.02 1212.11 L1650.43 1212.11 L1649.84 1212.11 L1649.26 1212.11 L1648.67 1212.11 L1648.09 1212.11 L1647.5 1212.11 L1646.91 1212.11 L1646.33 1212.11 L1645.74 1212.11 L1645.15 1212.11 L1644.57 1212.11 L1643.98 1212.11 L1643.39 1212.11 L1642.81 1212.11 L1642.22 1212.11 L1641.63 1212.11 L1641.05 1212.11 L1640.46 1212.11 L1639.88 1212.11 L1639.29 1212.11 L1638.7 1212.11 L1638.12 1212.11 L1637.53 1212.11 L1636.94 1212.11 L1636.36 1212.11 L1635.77 1212.11 L1635.18 1212.11 L1634.6 1212.11 L1634.01 1212.11 L1633.42 1212.11 L1632.84 1212.11 L1632.25 1212.11 L1631.67 1212.11 L1631.08 1212.11 L1630.49 1212.11 L1629.91 1212.11 L1629.32 1212.11 L1628.73 1212.11 L1628.15 1212.11 L1627.56 1212.11 L1626.97 1212.11 L1626.39 1212.11 L1625.8 1212.11 L1625.22 1212.11 L1624.63 1212.11 L1624.04 1212.11 L1623.46 1212.11 L1622.87 1212.11 L1622.28 1212.11 L1621.7 1212.11 L1621.11 1212.11 L1620.52 1212.11 L1619.94 1212.11 L1619.35 1212.11 L1618.76 1212.11 L1618.18 1212.11 L1617.59 1212.11 L1617.01 1212.11 L1616.42 1212.11 L1615.83 1212.11 L1615.25 1212.11 L1614.66 1212.11 L1614.07 1212.11 L1613.49 1212.11 L1612.9 1212.11 L1612.31 1212.11 L1611.73 1212.11 L1611.14 1212.11 L1610.55 1212.11 L1609.97 1212.11 L1609.38 1212.11 L1608.8 1212.11 L1608.21 1212.11 L1607.62 1212.11 L1607.04 1212.11 L1606.45 1212.11 L1605.86 1212.11 L1605.28 1212.11 L1604.69 1212.11 L1604.1 1212.11 L1603.52 1212.11 L1602.93 1212.11 L1602.34 1212.11 L1601.76 1212.11 L1601.17 1212.11 L1600.59 1212.11 L1600 1212.11 L1599.41 1212.11 L1598.83 1212.11 L1598.24 1212.11 L1597.65 1212.11 L1597.07 1212.11 L1596.48 1212.11 L1595.89 1212.11 L1595.31 1212.11 L1594.72 1212.11 L1594.14 1212.11 L1593.55 1212.11 L1592.96 1212.11 L1592.38 1212.11 L1591.79 1212.11 L1591.2 1212.11 L1590.62 1212.11 L1590.03 1212.11 L1589.44 1212.11 L1588.86 1212.11 L1588.27 1212.11 L1587.68 1212.11 L1587.1 1212.11 L1586.51 1212.11 L1585.93 1212.11 L1585.34 1212.11 L1584.75 1212.11 L1584.17 1212.11 L1583.58 1212.11 L1582.99 1212.11 L1582.41 1212.11 L1581.82 1212.11 L1581.23 1212.11 L1580.65 1212.11 L1580.06 1212.11 L1579.47 1212.11 L1578.89 1212.11 L1578.3 1212.11 L1577.72 1212.11 L1577.13 1212.11 L1576.54 1212.11 L1575.96 1212.11 L1575.37 1212.11 L1574.78 1212.11 L1574.2 1212.11 L1573.61 1212.11 L1573.02 1212.11 L1572.44 1212.11 L1571.85 1212.11 L1571.27 1212.11 L1570.68 1212.11 L1570.09 1212.11 L1569.51 1212.11 L1568.92 1212.11 L1568.33 1212.11 L1567.75 1212.11 L1567.16 1212.11 L1566.57 1212.11 L1565.99 1212.11 L1565.4 1212.11 L1564.81 1212.11 L1564.23 1212.11 L1563.64 1212.11 L1563.06 1212.11 L1562.47 1212.11 L1561.88 1212.11 L1561.3 1212.11 L1560.71 1212.11 L1560.12 1212.11 L1559.54 1212.11 L1558.95 1212.11 L1558.36 1212.11 L1557.78 1212.11 L1557.19 1212.11 L1556.6 1212.11 L1556.02 1212.11 L1555.43 1212.11 L1554.85 1212.11 L1554.26 1212.11 L1553.67 1212.11 L1553.09 1212.11 L1552.5 1212.11 L1551.91 1212.11 L1551.33 1212.11 L1550.74 1212.11 L1550.15 1212.11 L1549.57 1212.11 L1548.98 1212.11 L1548.4 1212.11 L1547.81 1212.11 L1547.22 1212.11 L1546.64 1212.11 L1546.05 1212.11 L1545.46 1212.11 L1544.88 1212.11 L1544.29 1212.11 L1543.7 1212.11 L1543.12 1212.11 L1542.53 1212.11 L1541.94 1212.11 L1541.36 1212.11 L1540.77 1212.11 L1540.19 1212.11 L1539.6 1212.11 L1539.01 1212.11 L1538.43 1212.11 L1537.84 1212.11 L1537.25 1212.11 L1536.67 1212.11 L1536.08 1212.11 L1535.49 1212.11 L1534.91 1212.11 L1534.32 1212.11 L1533.73 1212.11 L1533.15 1212.11 L1532.56 1212.11 L1531.98 1212.11 L1531.39 1212.11 L1530.8 1212.11 L1530.22 1212.11 L1529.63 1212.11 L1529.04 1212.11 L1528.46 1212.11 L1527.87 1212.11 L1527.28 1212.11 L1526.7 1212.11 L1526.11 1212.11 L1525.52 1212.11 L1524.94 1212.11 L1524.35 1212.11 L1523.77 1212.11 L1523.18 1212.11 L1522.59 1212.11 L1522.01 1212.11 L1521.42 1212.11 L1520.83 1212.11 L1520.25 1212.11 L1519.66 1212.11 L1519.07 1212.11 L1518.49 1212.11 L1517.9 1212.11 L1517.32 1212.11 L1516.73 1212.11 L1516.14 1212.11 L1515.56 1212.11 L1514.97 1212.11 L1514.38 1212.11 L1513.8 1212.11 L1513.21 1212.11 L1512.62 1212.11 L1512.04 1212.11 L1511.45 1212.11 L1510.86 1212.11 L1510.28 1212.11 L1509.69 1212.11 L1509.11 1212.11 L1508.52 1212.11 L1507.93 1212.11 L1507.35 1212.11 L1506.76 1212.11 L1506.17 1212.11 L1505.59 1212.11 L1505 1212.11 L1504.41 1212.11 L1503.83 1212.11 L1503.24 1212.11 L1502.65 1212.11 L1502.07 1212.11 L1501.48 1212.11 L1500.9 1212.11 L1500.31 1212.11 L1499.72 1212.11 L1499.14 1212.11 L1498.55 1212.11 L1497.96 1212.11 L1497.38 1212.11 L1496.79 1212.11 L1496.2 1212.11 L1495.62 1212.11 L1495.03 1212.11 L1494.45 1212.11 L1493.86 1212.11 L1493.27 1212.11 L1492.69 1212.11 L1492.1 1212.11 L1491.51 1212.11 L1490.93 1212.11 L1490.34 1212.11 L1489.75 1212.11 L1489.17 1212.11 L1488.58 1212.11 L1487.99 1212.11 L1487.41 1212.11 L1486.82 1212.11 L1486.24 1212.11 L1485.65 1212.11 L1485.06 1212.11 L1484.48 1212.11 L1483.89 1212.11 L1483.3 1212.11 L1482.72 1212.11 L1482.13 1212.11 L1481.54 1212.11 L1480.96 1212.11 L1480.37 1212.11 L1479.78 1212.11 L1479.2 1212.11 L1478.61 1212.11 L1478.03 1212.11 L1477.44 1212.11 L1476.85 1212.11 L1476.27 1212.11 L1475.68 1212.11 L1475.09 1212.11 L1474.51 1212.11 L1473.92 1212.11 L1473.33 1212.11 L1472.75 1212.11 L1472.16 1212.11 L1471.57 1212.11 L1470.99 1212.11 L1470.4 1212.11 L1469.82 1212.11 L1469.23 1212.11 L1468.64 1212.11 L1468.06 1212.11 L1467.47 1212.11 L1466.88 1212.11 L1466.3 1212.11 L1465.71 1212.11 L1465.12 1212.11 L1464.54 1212.11 L1463.95 1212.11 L1463.37 1212.11 L1462.78 1212.11 L1462.19 1212.11 L1461.61 1212.11 L1461.02 1212.11 L1460.43 1212.11 L1459.85 1212.11 L1459.26 1212.11 L1458.67 1212.11 L1458.09 1212.11 L1457.5 1212.11 L1456.91 1212.11 L1456.33 1212.11 L1455.74 1212.11 L1455.16 1212.11 L1454.57 1212.11 L1453.98 1212.11 L1453.4 1212.11 L1452.81 1212.11 L1452.22 1212.11 L1451.64 1212.11 L1451.05 1212.11 L1450.46 1212.11 L1449.88 1212.11 L1449.29 1212.11 L1448.7 1212.11 L1448.12 1212.11 L1447.53 1212.11 L1446.95 1212.11 L1446.36 1212.11 L1445.77 1212.11 L1445.19 1212.11 L1444.6 1212.11 L1444.01 1212.11 L1443.43 1212.11 L1442.84 1212.11 L1442.25 1212.11 L1441.67 1212.11 L1441.08 1212.11 L1440.5 1212.11 L1439.91 1212.11 L1439.32 1212.11 L1438.74 1212.11 L1438.15 1212.11 L1437.56 1212.11 L1436.98 1212.11 L1436.39 1212.11 L1435.8 1212.11 L1435.22 1212.11 L1434.63 1212.11 L1434.04 1212.11 L1433.46 1212.11 L1432.87 1212.11 L1432.29 1212.11 L1431.7 1212.11 L1431.11 1212.11 L1430.53 1212.11 L1429.94 1212.11 L1429.35 1212.11 L1428.77 1212.11 L1428.18 1212.11 L1427.59 1212.11 L1427.01 1212.11 L1426.42 1212.11 L1425.83 1212.11 L1425.25 1212.11 L1424.66 1212.11 L1424.08 1212.11 L1423.49 1212.11 L1422.9 1212.11 L1422.32 1212.11 L1421.73 1212.11 L1421.14 1212.11 L1420.56 1212.11 L1419.97 1212.11 L1419.38 1212.11 L1418.8 1212.11 L1418.21 1212.11 L1417.63 1212.11 L1417.04 1212.11 L1416.45 1212.11 L1415.87 1212.11 L1415.28 1212.11 L1414.69 1212.11 L1414.11 1212.11 L1413.52 1212.11 L1412.93 1212.11 L1412.35 1212.11 L1411.76 1212.11 L1411.17 1212.11 L1410.59 1212.11 L1410 1212.11 L1409.42 1212.11 L1408.83 1212.11 L1408.24 1212.11 L1407.66 1212.11 L1407.07 1212.11 L1406.48 1212.11 L1405.9 1212.11 L1405.31 1212.11 L1404.72 1212.11 L1404.14 1212.11 L1403.55 1212.11 L1402.96 1212.11 L1402.38 1212.11 L1401.79 1212.11 L1401.21 1212.11 L1400.62 1212.11 L1400.03 1212.11 L1399.45 1212.11 L1398.86 1212.11 L1398.27 1212.11 L1397.69 1212.11 L1397.1 1212.11 L1396.51 1212.11 L1395.93 1212.11 L1395.34 1212.11 L1394.75 1212.11 L1394.17 1212.11 L1393.58 1212.11 L1393 1212.11 L1392.41 1212.11 L1391.82 1212.11 L1391.24 1212.11 L1390.65 1212.11 L1390.06 1212.11 L1389.48 1212.11 L1388.89 1212.11 L1388.3 1212.11 L1387.72 1212.11 L1387.13 1212.11 L1386.55 1212.11 L1385.96 1212.11 L1385.37 1212.11 L1384.79 1212.11 L1384.2 1212.11 L1383.61 1212.11 L1383.03 1212.11 L1382.44 1212.11 L1381.85 1212.11 L1381.27 1212.11 L1380.68 1212.11 L1380.09 1212.11 L1379.51 1212.11 L1378.92 1212.11 L1378.34 1212.11 L1377.75 1212.11 L1377.16 1212.11 L1376.58 1212.11 L1375.99 1212.11 L1375.4 1212.11 L1374.82 1212.11 L1374.23 1212.11 L1373.64 1212.11 L1373.06 1212.11 L1372.47 1212.11 L1371.88 1212.11 L1371.3 1212.11 L1370.71 1212.11 L1370.13 1212.11 L1369.54 1212.11 L1368.95 1212.11 L1368.37 1212.11 L1367.78 1212.11 L1367.19 1212.11 L1366.61 1212.11 L1366.02 1212.11 L1365.43 1212.11 L1364.85 1212.11 L1364.26 1212.11 L1363.68 1212.11 L1363.09 1212.11 L1362.5 1212.11 L1361.92 1212.11 L1361.33 1212.11 L1360.74 1212.11 L1360.16 1212.11 L1359.57 1212.11 L1358.98 1212.11 L1358.4 1212.11 L1357.81 1212.11 L1357.22 1212.11 L1356.64 1212.11 L1356.05 1212.11 L1355.47 1212.11 L1354.88 1212.11 L1354.29 1212.11 L1353.71 1212.11 L1353.12 1212.11 L1352.53 1212.11 L1351.95 1212.11 L1351.36 1212.11 L1350.77 1212.11 L1350.19 1212.11 L1349.6 1212.11 L1349.01 1212.11 L1348.43 1212.11 L1347.84 1212.11 L1347.26 1212.11 L1346.67 1212.11 L1346.08 1212.11 L1345.5 1212.11 L1344.91 1212.11 L1344.32 1212.11 L1343.74 1212.11 L1343.15 1212.11 L1342.56 1212.11 L1341.98 1212.11 L1341.39 1212.11 L1340.8 1212.11 L1340.22 1212.11 L1339.63 1212.11 L1339.05 1212.11 L1338.46 1212.11 L1337.87 1212.11 L1337.29 1212.11 L1336.7 1212.11 L1336.11 1212.11 L1335.53 1212.11 L1334.94 1212.11 L1334.35 1212.11 L1333.77 1212.11 L1333.18 1212.11 L1332.6 1212.11 L1332.01 1212.11 L1331.42 1212.11 L1330.84 1212.11 L1330.25 1212.11 L1329.66 1212.11 L1329.08 1212.11 L1328.49 1212.11 L1327.9 1212.11 L1327.32 1212.11 L1326.73 1212.11 L1326.14 1212.11 L1325.56 1212.11 L1324.97 1212.11 L1324.39 1212.11 L1323.8 1212.11 L1323.21 1212.11 L1322.63 1212.11 L1322.04 1212.11 L1321.45 1212.11 L1320.87 1212.11 L1320.28 1212.11 L1319.69 1212.11 L1319.11 1212.11 L1318.52 1212.11 L1317.93 1212.11 L1317.35 1212.11 L1316.76 1212.11 L1316.18 1212.11 L1315.59 1212.11 L1315 1212.11 L1314.42 1212.11 L1313.83 1212.11 L1313.24 1212.11 L1312.66 1212.11 L1312.07 1212.11 L1311.48 1212.11 L1310.9 1212.11 L1310.31 1212.11 L1309.73 1212.11 L1309.14 1212.11 L1308.55 1212.11 L1307.97 1212.11 L1307.38 1212.11 L1306.79 1212.11 L1306.21 1212.11 L1305.62 1212.11 L1305.03 1212.11 L1304.45 1212.11 L1303.86 1212.11 L1303.27 1212.11 L1302.69 1212.11 L1302.1 1212.11 L1301.52 1212.11 L1300.93 1212.11 L1300.34 1212.11 L1299.76 1212.11 L1299.17 1212.11 L1298.58 1212.11 L1298 1212.11 L1297.41 1212.11 L1296.82 1212.11 L1296.24 1212.11 L1295.65 1212.11 L1295.06 1212.11 L1294.48 1212.11 L1293.89 1212.11 L1293.31 1212.11 L1292.72 1212.11 L1292.13 1212.11 L1291.55 1212.11 L1290.96 1212.11 L1290.37 1212.11 L1289.79 1212.11 L1289.2 1212.11 L1288.61 1212.11 L1288.03 1212.11 L1287.44 1212.11 L1286.86 1212.11 L1286.27 1212.11 L1285.68 1212.11 L1285.1 1212.11 L1284.51 1212.11 L1283.92 1212.11 L1283.34 1212.11 L1282.75 1212.11 L1282.16 1212.11 L1281.58 1212.11 L1280.99 1212.11 L1280.4 1212.11 L1279.82 1212.11 L1279.23 1212.11 L1278.65 1212.11 L1278.06 1212.11 L1277.47 1212.11 L1276.89 1212.11 L1276.3 1212.11 L1275.71 1212.11 L1275.13 1212.11 L1274.54 1212.11 L1273.95 1212.11 L1273.37 1212.11 L1272.78 1212.11 L1272.19 1212.11 L1271.61 1212.11 L1271.02 1212.11 L1270.44 1212.11 L1269.85 1212.11 L1269.26 1212.11 L1268.68 1212.11 L1268.09 1212.11 L1267.5 1212.11 L1266.92 1212.11 L1266.33 1212.11 L1265.74 1212.11 L1265.16 1212.11 L1264.57 1212.11 L1263.98 1212.11 L1263.4 1212.11 L1262.81 1212.11 L1262.23 1212.11 L1261.64 1212.11 L1261.05 1212.11 L1260.47 1212.11 L1259.88 1212.11 L1259.29 1212.11 L1258.71 1212.11 L1258.12 1212.11 L1257.53 1212.11 L1256.95 1212.11 L1256.36 1212.11 L1255.78 1212.11 L1255.19 1212.11 L1254.6 1212.11 L1254.02 1212.11 L1253.43 1212.11 L1252.84 1212.11 L1252.26 1212.11 L1251.67 1212.11 L1251.08 1212.11 L1250.5 1212.11 L1249.91 1212.11 L1249.32 1212.11 L1248.74 1212.11 L1248.15 1212.11 L1247.57 1212.11 L1246.98 1212.11 L1246.39 1212.11 L1245.81 1212.11 L1245.22 1212.11 L1244.63 1212.11 L1244.05 1212.11 L1243.46 1212.11 L1242.87 1212.11 L1242.29 1212.11 L1241.7 1212.11 L1241.11 1212.11 L1240.53 1212.11 L1239.94 1212.11 L1239.36 1212.11 L1238.77 1212.11 L1238.18 1212.11 L1237.6 1212.11 L1237.01 1212.11 L1236.42 1212.11 L1235.84 1212.11 L1235.25 1212.11 L1234.66 1212.11 L1234.08 1212.11 L1233.49 1212.11 L1232.91 1212.11 L1232.32 1212.11 L1231.73 1212.11 L1231.15 1212.11 L1230.56 1212.11 L1229.97 1212.11 L1229.39 1212.11 L1228.8 1212.11 L1228.21 1212.11 L1227.63 1212.11 L1227.04 1212.11 L1226.45 1212.11 L1225.87 1212.11 L1225.28 1212.11 L1224.7 1212.11 L1224.11 1212.11 L1223.52 1212.11 L1222.94 1212.11 L1222.35 1212.11 L1221.76 1212.11 L1221.18 1212.11 L1220.59 1212.11 L1220 1212.11 L1219.42 1212.11 L1218.83 1212.11 L1218.24 1212.11 L1217.66 1212.11 L1217.07 1212.11 L1216.49 1212.11 L1215.9 1212.11 L1215.31 1212.11 L1214.73 1212.11 L1214.14 1212.11 L1213.55 1212.11 L1212.97 1212.11 L1212.38 1212.11 L1211.79 1212.11 L1211.21 1212.11 L1210.62 1212.11 L1210.03 1212.11 L1209.45 1212.11 L1208.86 1212.11 L1208.28 1212.11 L1207.69 1212.11 L1207.1 1212.11 L1206.52 1212.11 L1205.93 1212.11 L1205.34 1212.11 L1204.76 1212.11 L1204.17 1212.11 L1203.58 1212.11 L1203 1212.11 L1202.41 1212.11 L1201.83 1212.11 L1201.24 1212.11 L1200.65 1212.11 L1200.07 1212.11 L1199.48 1212.11 L1198.89 1212.11 L1198.31 1212.11 L1197.72 1212.11 L1197.13 1212.11 L1196.55 1212.11 L1195.96 1212.11 L1195.37 1212.11 L1194.79 1212.11 L1194.2 1212.11 L1193.62 1212.11 L1193.03 1212.11 L1192.44 1212.11 L1191.86 1212.11 L1191.27 1212.11 L1190.68 1212.11 L1190.1 1212.11 L1189.51 1212.11 L1188.92 1212.11 L1188.34 1212.11 L1187.75 1212.11 L1187.16 1212.11 L1186.58 1212.11 L1185.99 1212.11 L1185.41 1212.11 L1184.82 1212.11 L1184.23 1212.11 L1183.65 1212.11 L1183.06 1212.11 L1182.47 1212.11 L1181.89 1212.11 L1181.3 1212.11 L1180.71 1212.11 L1180.13 1212.11 L1179.54 1212.11 L1178.96 1212.11 L1178.37 1212.11 L1177.78 1212.11 L1177.2 1212.11 L1176.61 1212.11 L1176.02 1212.11 L1175.44 1212.11 L1174.85 1212.11 L1174.26 1212.11 L1173.68 1212.11 L1173.09 1212.11 L1172.5 1212.11 L1171.92 1212.11 L1171.33 1212.11 L1170.75 1212.11 L1170.16 1212.11 L1169.57 1212.11 L1168.99 1212.11 L1168.4 1212.11 L1167.81 1212.11 L1167.23 1212.11 L1166.64 1212.11 L1166.05 1212.11 L1165.47 1212.11 L1164.88 1212.11 L1164.29 1212.11 L1163.71 1212.11 L1163.12 1212.11 L1162.54 1212.11 L1161.95 1212.11 L1161.36 1212.11 L1160.78 1212.11 L1160.19 1212.11 L1159.6 1212.11 L1159.02 1212.11 L1158.43 1212.11 L1157.84 1212.11 L1157.26 1212.11 L1156.67 1212.11 L1156.09 1212.11 L1155.5 1212.11 L1154.91 1212.11 L1154.33 1212.11 L1153.74 1212.11 L1153.15 1212.11 L1152.57 1212.11 L1151.98 1212.11 L1151.39 1212.11 L1150.81 1212.11 L1150.22 1212.11 L1149.63 1212.11 L1149.05 1212.11 L1148.46 1212.11 L1147.88 1212.11 L1147.29 1212.11 L1146.7 1212.11 L1146.12 1212.11 L1145.53 1212.11 L1144.94 1212.11 L1144.36 1212.11 L1143.77 1212.11 L1143.18 1212.11 L1142.6 1212.11 L1142.01 1212.11 L1141.42 1212.11 L1140.84 1212.11 L1140.25 1212.11 L1139.67 1212.11 L1139.08 1212.11 L1138.49 1212.11 L1137.91 1212.11 L1137.32 1212.11 L1136.73 1212.11 L1136.15 1212.11 L1135.56 1212.11 L1134.97 1212.11 L1134.39 1212.11 L1133.8 1212.11 L1133.21 1212.11 L1132.63 1212.11 L1132.04 1212.11 L1131.46 1212.11 L1130.87 1212.11 L1130.28 1212.11 L1129.7 1212.11 L1129.11 1212.11 L1128.52 1212.11 L1127.94 1212.11 L1127.35 1212.11 L1126.76 1212.11 L1126.18 1212.11 L1125.59 1212.11 L1125.01 1212.11 L1124.42 1212.11 L1123.83 1212.11 L1123.25 1212.11 L1122.66 1212.11 L1122.07 1212.11 L1121.49 1212.11 L1120.9 1212.11 L1120.31 1212.11 L1119.73 1212.11 L1119.14 1212.11 L1118.55 1212.11 L1117.97 1212.11 L1117.38 1212.11 L1116.8 1212.11 L1116.21 1212.11 L1115.62 1212.11 L1115.04 1212.11 L1114.45 1212.11 L1113.86 1212.11 L1113.28 1212.11 L1112.69 1212.11 L1112.1 1212.11 L1111.52 1212.11 L1110.93 1212.11 L1110.34 1212.11 L1109.76 1212.11 L1109.17 1212.11 L1108.59 1212.11 L1108 1212.11 L1107.41 1212.11 L1106.83 1212.11 L1106.24 1212.11 L1105.65 1212.11 L1105.07 1212.11 L1104.48 1212.11 L1103.89 1212.11 L1103.31 1212.11 L1102.72 1212.11 L1102.14 1212.11 L1101.55 1212.11 L1100.96 1212.11 L1100.38 1212.11 L1099.79 1212.11 L1099.2 1212.11 L1098.62 1212.11 L1098.03 1212.11 L1097.44 1212.11 L1096.86 1212.11 L1096.27 1212.11 L1095.68 1212.11 L1095.1 1212.11 L1094.51 1212.11 L1093.93 1212.11 L1093.34 1212.11 L1092.75 1212.11 L1092.17 1212.11 L1091.58 1212.11 L1090.99 1212.11 L1090.41 1212.11 L1089.82 1212.11 L1089.23 1212.11 L1088.65 1212.11 L1088.06 1212.11 L1087.47 1212.11 L1086.89 1212.11 L1086.3 1212.11 L1085.72 1212.11 L1085.13 1212.11 L1084.54 1212.11 L1083.96 1212.11 L1083.37 1212.11 L1082.78 1212.11 L1082.2 1212.11 L1081.61 1212.11 L1081.02 1212.11 L1080.44 1212.11 L1079.85 1212.11 L1079.26 1212.11 L1078.68 1212.11 L1078.09 1212.11 L1077.51 1212.11 L1076.92 1212.11 L1076.33 1212.11 L1075.75 1212.11 L1075.16 1212.11 L1074.57 1212.11 L1073.99 1212.11 L1073.4 1212.11 L1072.81 1212.11 L1072.23 1212.11 L1071.64 1212.11 L1071.06 1212.11 L1070.47 1212.11 L1069.88 1212.11 L1069.3 1212.11 L1068.71 1212.11 L1068.12 1212.11 L1067.54 1212.11 L1066.95 1212.11 L1066.36 1212.11 L1065.78 1212.11 L1065.19 1212.11 L1064.6 1212.11 L1064.02 1212.11 L1063.43 1212.11 L1062.85 1212.11 L1062.26 1212.11 L1061.67 1212.11 L1061.09 1212.11 L1060.5 1212.11 L1059.91 1212.11 L1059.33 1212.11 L1058.74 1212.11 L1058.15 1212.11 L1057.57 1212.11 L1056.98 1212.11 L1056.39 1212.11 L1055.81 1212.11 L1055.22 1212.11 L1054.64 1212.11 L1054.05 1212.11 L1053.46 1212.11 L1052.88 1212.11 L1052.29 1212.11 L1051.7 1212.11 L1051.12 1212.11 L1050.53 1212.11 L1049.94 1212.11 L1049.36 1212.11 L1048.77 1212.11 L1048.19 1212.11 L1047.6 1212.11 L1047.01 1212.11 L1046.43 1212.11 L1045.84 1212.11 L1045.25 1212.11 L1044.67 1212.11 L1044.08 1212.11 L1043.49 1212.11 L1042.91 1212.11 L1042.32 1212.11 L1041.73 1212.11 L1041.15 1212.11 L1040.56 1212.11 L1039.98 1212.11 L1039.39 1212.11 L1038.8 1212.11 L1038.22 1212.11 L1037.63 1212.11 L1037.04 1212.11 L1036.46 1212.11 L1035.87 1212.11 L1035.28 1212.11 L1034.7 1212.11 L1034.11 1212.11 L1033.52 1212.11 L1032.94 1212.11 L1032.35 1212.11 L1031.77 1212.11 L1031.18 1212.11 L1030.59 1212.11 L1030.01 1212.11 L1029.42 1212.11 L1028.83 1212.11 L1028.25 1212.11 L1027.66 1212.11 L1027.07 1212.11 L1026.49 1212.11 L1025.9 1212.11 L1025.32 1212.11 L1024.73 1212.11 L1024.14 1212.11 L1023.56 1212.11 L1022.97 1212.11 L1022.38 1212.11 L1021.8 1212.11 L1021.21 1212.11 L1020.62 1212.11 L1020.04 1212.11 L1019.45 1212.11 L1018.86 1212.11 L1018.28 1212.11 L1017.69 1212.11 L1017.11 1212.11 L1016.52 1212.11 L1015.93 1212.11 L1015.35 1212.11 L1014.76 1212.11 L1014.17 1212.11 L1013.59 1212.11 L1013 1212.11 L1012.41 1212.11 L1011.83 1212.11 L1011.24 1212.11 L1010.65 1212.11 L1010.07 1212.11 L1009.48 1212.11 L1008.9 1212.11 L1008.31 1212.11 L1007.72 1212.11 L1007.14 1212.11 L1006.55 1212.11 L1005.96 1212.11 L1005.38 1212.11 L1004.79 1212.11 L1004.2 1212.11 L1003.62 1212.11 L1003.03 1212.11 L1002.44 1212.11 L1001.86 1212.11 L1001.27 1212.11 L1000.69 1212.11 L1000.1 1212.11 L999.513 1212.11 L998.926 1212.11 L998.34 1212.11 L997.754 1212.11 L997.167 1212.11 L996.581 1212.11 L995.994 1212.11 L995.408 1212.11 L994.822 1212.11 L994.235 1212.11 L993.649 1212.11 L993.062 1212.11 L992.476 1212.11 L991.889 1212.11 L991.303 1212.11 L990.717 1212.11 L990.13 1212.11 L989.544 1212.11 L988.957 1212.11 L988.371 1212.11 L987.785 1212.11 L987.198 1212.11 L986.612 1212.11 L986.025 1212.11  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip232)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1212.48 986.612,1212.48 987.198,1212.48 987.785,1212.48 988.371,1212.48 988.957,1212.48 989.544,1212.48 990.13,1212.48 990.717,1212.48 991.303,1212.48 991.889,1212.48 992.476,1212.48 993.062,1212.48 993.649,1212.48 994.235,1212.48 994.822,1212.48 995.408,1212.48 995.994,1212.48 996.581,1212.48 997.167,1212.48 997.754,1212.48 998.34,1212.48 998.926,1212.48 999.513,1212.48 1000.1,1212.48 1000.69,1212.48 1001.27,1212.48 1001.86,1212.48 1002.44,1212.48 1003.03,1212.48 1003.62,1212.48 1004.2,1212.48 1004.79,1212.48 1005.38,1212.48 1005.96,1212.48 1006.55,1212.48 1007.14,1212.48 1007.72,1212.48 1008.31,1212.48 1008.9,1212.48 1009.48,1212.48 1010.07,1212.48 1010.65,1212.48 1011.24,1212.48 1011.83,1212.48 1012.41,1212.48 1013,1212.48 1013.59,1212.48 1014.17,1212.48 1014.76,1212.48 1015.35,1212.48 1015.93,1212.48 1016.52,1212.48 1017.11,1212.48 1017.69,1212.48 1018.28,1212.48 1018.86,1212.48 1019.45,1212.48 1020.04,1212.48 1020.62,1212.48 1021.21,1212.48 1021.8,1212.48 1022.38,1212.48 1022.97,1212.48 1023.56,1212.48 1024.14,1212.48 1024.73,1212.48 1025.32,1212.48 1025.9,1212.48 1026.49,1212.48 1027.07,1212.48 1027.66,1212.48 1028.25,1212.48 1028.83,1212.48 1029.42,1212.48 1030.01,1212.48 1030.59,1212.48 1031.18,1212.48 1031.77,1212.48 1032.35,1212.48 1032.94,1212.48 1033.52,1212.48 1034.11,1212.48 1034.7,1212.48 1035.28,1212.48 1035.87,1212.48 1036.46,1212.48 1037.04,1212.48 1037.63,1212.48 1038.22,1212.48 1038.8,1212.48 1039.39,1212.48 1039.98,1212.48 1040.56,1212.48 1041.15,1212.48 1041.73,1212.48 1042.32,1212.48 1042.91,1212.48 1043.49,1212.48 1044.08,1212.48 1044.67,1212.48 1045.25,1212.48 1045.84,1212.48 1046.43,1212.48 1047.01,1212.48 1047.6,1212.48 1048.19,1212.48 1048.77,1212.48 1049.36,1212.48 1049.94,1212.48 1050.53,1212.48 1051.12,1212.48 1051.7,1212.48 1052.29,1212.48 1052.88,1212.48 1053.46,1212.48 1054.05,1212.48 1054.64,1212.48 1055.22,1212.48 1055.81,1212.48 1056.39,1212.48 1056.98,1212.48 1057.57,1212.48 1058.15,1212.48 1058.74,1212.48 1059.33,1212.48 1059.91,1212.48 1060.5,1212.48 1061.09,1212.48 1061.67,1212.48 1062.26,1212.48 1062.85,1212.48 1063.43,1212.48 1064.02,1212.48 1064.6,1212.48 1065.19,1212.48 1065.78,1212.48 1066.36,1212.48 1066.95,1212.48 1067.54,1212.48 1068.12,1212.48 1068.71,1212.48 1069.3,1212.48 1069.88,1212.48 1070.47,1212.48 1071.06,1212.48 1071.64,1212.48 1072.23,1212.48 1072.81,1212.48 1073.4,1212.48 1073.99,1212.48 1074.57,1212.48 1075.16,1212.48 1075.75,1212.48 1076.33,1212.48 1076.92,1212.48 1077.51,1212.48 1078.09,1212.48 1078.68,1212.48 1079.26,1212.48 1079.85,1212.48 1080.44,1212.48 1081.02,1212.48 1081.61,1212.48 1082.2,1212.48 1082.78,1212.48 1083.37,1212.48 1083.96,1212.48 1084.54,1212.48 1085.13,1212.48 1085.72,1212.48 1086.3,1212.48 1086.89,1212.48 1087.47,1212.48 1088.06,1212.48 1088.65,1212.48 1089.23,1212.48 1089.82,1212.48 1090.41,1212.48 1090.99,1212.48 1091.58,1212.48 1092.17,1212.48 1092.75,1212.48 1093.34,1212.48 1093.93,1212.48 1094.51,1212.48 1095.1,1212.48 1095.68,1212.48 1096.27,1212.48 1096.86,1212.48 1097.44,1212.48 1098.03,1212.48 1098.62,1212.48 1099.2,1212.48 1099.79,1212.48 1100.38,1212.48 1100.96,1212.48 1101.55,1212.48 1102.14,1212.48 1102.72,1212.48 1103.31,1212.48 1103.89,1212.48 1104.48,1212.48 1105.07,1212.48 1105.65,1212.48 1106.24,1212.48 1106.83,1212.48 1107.41,1212.48 1108,1212.48 1108.59,1212.48 1109.17,1212.48 1109.76,1212.48 1110.34,1212.48 1110.93,1212.48 1111.52,1212.48 1112.1,1212.48 1112.69,1212.48 1113.28,1212.48 1113.86,1212.48 1114.45,1212.48 1115.04,1212.48 1115.62,1212.48 1116.21,1212.48 1116.8,1212.48 1117.38,1212.48 1117.97,1212.48 1118.55,1212.48 1119.14,1212.48 1119.73,1212.48 1120.31,1212.48 1120.9,1212.48 1121.49,1212.48 1122.07,1212.48 1122.66,1212.48 1123.25,1212.48 1123.83,1212.48 1124.42,1212.48 1125.01,1212.48 1125.59,1212.48 1126.18,1212.48 1126.76,1212.48 1127.35,1212.48 1127.94,1212.48 1128.52,1212.48 1129.11,1212.48 1129.7,1212.48 1130.28,1212.48 1130.87,1212.48 1131.46,1212.48 1132.04,1212.48 1132.63,1212.48 1133.21,1212.48 1133.8,1212.48 1134.39,1212.48 1134.97,1212.48 1135.56,1212.48 1136.15,1212.48 1136.73,1212.48 1137.32,1212.48 1137.91,1212.48 1138.49,1212.48 1139.08,1212.48 1139.67,1212.48 1140.25,1212.48 1140.84,1212.48 1141.42,1212.48 1142.01,1212.48 1142.6,1212.48 1143.18,1212.48 1143.77,1212.48 1144.36,1212.48 1144.94,1212.48 1145.53,1212.48 1146.12,1212.48 1146.7,1212.48 1147.29,1212.48 1147.88,1212.48 1148.46,1212.48 1149.05,1212.48 1149.63,1212.48 1150.22,1212.48 1150.81,1212.48 1151.39,1212.48 1151.98,1212.48 1152.57,1212.48 1153.15,1212.48 1153.74,1212.48 1154.33,1212.48 1154.91,1212.48 1155.5,1212.48 1156.09,1212.48 1156.67,1212.48 1157.26,1212.48 1157.84,1212.48 1158.43,1212.48 1159.02,1212.48 1159.6,1212.48 1160.19,1212.48 1160.78,1212.48 1161.36,1212.48 1161.95,1212.48 1162.54,1212.48 1163.12,1212.48 1163.71,1212.48 1164.29,1212.48 1164.88,1212.48 1165.47,1212.48 1166.05,1212.48 1166.64,1212.48 1167.23,1212.48 1167.81,1212.48 1168.4,1212.48 1168.99,1212.48 1169.57,1212.48 1170.16,1212.48 1170.75,1212.48 1171.33,1212.48 1171.92,1212.48 1172.5,1212.48 1173.09,1212.48 1173.68,1212.48 1174.26,1212.48 1174.85,1212.48 1175.44,1212.48 1176.02,1212.48 1176.61,1212.48 1177.2,1212.48 1177.78,1212.48 1178.37,1212.48 1178.96,1212.48 1179.54,1212.48 1180.13,1212.48 1180.71,1212.48 1181.3,1212.48 1181.89,1212.48 1182.47,1212.48 1183.06,1212.48 1183.65,1212.48 1184.23,1212.48 1184.82,1212.48 1185.41,1212.48 1185.99,1212.48 1186.58,1212.48 1187.16,1212.48 1187.75,1212.48 1188.34,1212.48 1188.92,1212.48 1189.51,1212.48 1190.1,1212.48 1190.68,1212.48 1191.27,1212.48 1191.86,1212.48 1192.44,1212.48 1193.03,1212.48 1193.62,1212.48 1194.2,1212.48 1194.79,1212.48 1195.37,1212.48 1195.96,1212.48 1196.55,1212.48 1197.13,1212.48 1197.72,1212.48 1198.31,1212.48 1198.89,1212.48 1199.48,1212.48 1200.07,1212.48 1200.65,1212.48 1201.24,1212.48 1201.83,1212.48 1202.41,1212.48 1203,1212.48 1203.58,1212.48 1204.17,1212.48 1204.76,1212.48 1205.34,1212.48 1205.93,1212.48 1206.52,1212.48 1207.1,1212.48 1207.69,1212.48 1208.28,1212.48 1208.86,1212.48 1209.45,1212.48 1210.03,1212.48 1210.62,1212.48 1211.21,1212.48 1211.79,1212.48 1212.38,1212.48 1212.97,1212.48 1213.55,1212.48 1214.14,1212.48 1214.73,1212.48 1215.31,1212.48 1215.9,1212.48 1216.49,1212.48 1217.07,1212.48 1217.66,1212.48 1218.24,1212.48 1218.83,1212.48 1219.42,1212.48 1220,1212.48 1220.59,1212.48 1221.18,1212.48 1221.76,1212.48 1222.35,1212.48 1222.94,1212.48 1223.52,1212.48 1224.11,1212.48 1224.7,1212.48 1225.28,1212.48 1225.87,1212.48 1226.45,1212.48 1227.04,1212.48 1227.63,1212.48 1228.21,1212.48 1228.8,1212.48 1229.39,1212.48 1229.97,1212.48 1230.56,1212.48 1231.15,1212.48 1231.73,1212.48 1232.32,1212.48 1232.91,1212.48 1233.49,1212.48 1234.08,1212.48 1234.66,1212.48 1235.25,1212.48 1235.84,1212.48 1236.42,1212.48 1237.01,1212.48 1237.6,1212.48 1238.18,1212.48 1238.77,1212.48 1239.36,1212.48 1239.94,1212.48 1240.53,1212.48 1241.11,1212.48 1241.7,1212.48 1242.29,1212.48 1242.87,1212.48 1243.46,1212.48 1244.05,1212.48 1244.63,1212.48 1245.22,1212.48 1245.81,1212.48 1246.39,1212.48 1246.98,1212.48 1247.57,1212.48 1248.15,1212.48 1248.74,1212.48 1249.32,1212.48 1249.91,1212.48 1250.5,1212.48 1251.08,1212.48 1251.67,1212.48 1252.26,1212.48 1252.84,1212.48 1253.43,1212.48 1254.02,1212.48 1254.6,1212.48 1255.19,1212.48 1255.78,1212.48 1256.36,1212.48 1256.95,1212.48 1257.53,1212.48 1258.12,1212.48 1258.71,1212.48 1259.29,1212.48 1259.88,1212.48 1260.47,1212.48 1261.05,1212.48 1261.64,1212.48 1262.23,1212.48 1262.81,1212.48 1263.4,1212.48 1263.98,1212.48 1264.57,1212.48 1265.16,1212.48 1265.74,1212.48 1266.33,1212.48 1266.92,1212.48 1267.5,1212.48 1268.09,1212.48 1268.68,1212.48 1269.26,1212.48 1269.85,1212.48 1270.44,1212.48 1271.02,1212.48 1271.61,1212.48 1272.19,1212.48 1272.78,1212.48 1273.37,1212.48 1273.95,1212.48 1274.54,1212.48 1275.13,1212.48 1275.71,1212.48 1276.3,1212.48 1276.89,1212.48 1277.47,1212.48 1278.06,1212.48 1278.65,1212.48 1279.23,1212.48 1279.82,1212.48 1280.4,1212.48 1280.99,1212.48 1281.58,1212.48 1282.16,1212.48 1282.75,1212.48 1283.34,1212.48 1283.92,1212.48 1284.51,1212.48 1285.1,1212.48 1285.68,1212.48 1286.27,1212.48 1286.86,1212.48 1287.44,1212.48 1288.03,1212.48 1288.61,1212.48 1289.2,1212.48 1289.79,1212.48 1290.37,1212.48 1290.96,1212.48 1291.55,1212.48 1292.13,1212.48 1292.72,1212.48 1293.31,1212.48 1293.89,1212.48 1294.48,1212.48 1295.06,1212.48 1295.65,1212.48 1296.24,1212.48 1296.82,1212.48 1297.41,1212.48 1298,1212.48 1298.58,1212.48 1299.17,1212.48 1299.76,1212.48 1300.34,1212.48 1300.93,1212.48 1301.52,1212.48 1302.1,1212.48 1302.69,1212.48 1303.27,1212.48 1303.86,1212.48 1304.45,1212.48 1305.03,1212.48 1305.62,1212.48 1306.21,1212.48 1306.79,1212.48 1307.38,1212.48 1307.97,1212.48 1308.55,1212.48 1309.14,1212.48 1309.73,1212.48 1310.31,1212.48 1310.9,1212.48 1311.48,1212.48 1312.07,1212.48 1312.66,1212.48 1313.24,1212.48 1313.83,1212.48 1314.42,1212.48 1315,1212.48 1315.59,1212.48 1316.18,1212.48 1316.76,1212.48 1317.35,1212.48 1317.93,1212.48 1318.52,1212.48 1319.11,1212.48 1319.69,1212.48 1320.28,1212.48 1320.87,1212.48 1321.45,1212.48 1322.04,1212.48 1322.63,1212.48 1323.21,1212.48 1323.8,1212.48 1324.39,1212.48 1324.97,1212.48 1325.56,1212.48 1326.14,1212.48 1326.73,1212.48 1327.32,1212.48 1327.9,1212.48 1328.49,1212.48 1329.08,1212.48 1329.66,1212.48 1330.25,1212.48 1330.84,1212.48 1331.42,1212.48 1332.01,1212.48 1332.6,1212.48 1333.18,1212.48 1333.77,1212.48 1334.35,1212.48 1334.94,1212.48 1335.53,1212.48 1336.11,1212.48 1336.7,1212.48 1337.29,1212.48 1337.87,1212.48 1338.46,1212.48 1339.05,1212.48 1339.63,1212.48 1340.22,1212.48 1340.8,1212.48 1341.39,1212.48 1341.98,1212.48 1342.56,1212.48 1343.15,1212.48 1343.74,1212.48 1344.32,1212.48 1344.91,1212.48 1345.5,1212.48 1346.08,1212.48 1346.67,1212.48 1347.26,1212.48 1347.84,1212.48 1348.43,1212.48 1349.01,1212.48 1349.6,1212.48 1350.19,1212.48 1350.77,1212.48 1351.36,1212.48 1351.95,1212.48 1352.53,1212.48 1353.12,1212.48 1353.71,1212.48 1354.29,1212.48 1354.88,1212.48 1355.47,1212.48 1356.05,1212.48 1356.64,1212.48 1357.22,1212.48 1357.81,1212.48 1358.4,1212.48 1358.98,1212.48 1359.57,1212.48 1360.16,1212.48 1360.74,1212.48 1361.33,1212.48 1361.92,1212.48 1362.5,1212.48 1363.09,1212.48 1363.68,1212.48 1364.26,1212.48 1364.85,1212.48 1365.43,1212.48 1366.02,1212.48 1366.61,1212.48 1367.19,1212.48 1367.78,1212.48 1368.37,1212.48 1368.95,1212.48 1369.54,1212.48 1370.13,1212.48 1370.71,1212.48 1371.3,1212.48 1371.88,1212.48 1372.47,1212.48 1373.06,1212.48 1373.64,1212.48 1374.23,1212.48 1374.82,1212.48 1375.4,1212.48 1375.99,1212.48 1376.58,1212.48 1377.16,1212.48 1377.75,1212.48 1378.34,1212.48 1378.92,1212.48 1379.51,1212.48 1380.09,1212.48 1380.68,1212.48 1381.27,1212.48 1381.85,1212.48 1382.44,1212.48 1383.03,1212.48 1383.61,1212.48 1384.2,1212.48 1384.79,1212.48 1385.37,1212.48 1385.96,1212.48 1386.55,1212.48 1387.13,1212.48 1387.72,1212.48 1388.3,1212.48 1388.89,1212.48 1389.48,1212.48 1390.06,1212.48 1390.65,1212.48 1391.24,1212.48 1391.82,1212.48 1392.41,1212.48 1393,1212.48 1393.58,1212.48 1394.17,1212.48 1394.75,1212.48 1395.34,1212.48 1395.93,1212.48 1396.51,1212.48 1397.1,1212.48 1397.69,1212.48 1398.27,1212.48 1398.86,1212.48 1399.45,1212.48 1400.03,1212.48 1400.62,1212.48 1401.21,1212.48 1401.79,1212.48 1402.38,1212.48 1402.96,1212.48 1403.55,1212.48 1404.14,1212.48 1404.72,1212.48 1405.31,1212.48 1405.9,1212.48 1406.48,1212.48 1407.07,1212.48 1407.66,1212.48 1408.24,1212.48 1408.83,1212.48 1409.42,1212.48 1410,1212.48 1410.59,1212.48 1411.17,1212.48 1411.76,1212.48 1412.35,1212.48 1412.93,1212.48 1413.52,1212.48 1414.11,1212.48 1414.69,1212.48 1415.28,1212.48 1415.87,1212.48 1416.45,1212.48 1417.04,1212.48 1417.63,1212.48 1418.21,1212.48 1418.8,1212.48 1419.38,1212.48 1419.97,1212.48 1420.56,1212.48 1421.14,1212.48 1421.73,1212.48 1422.32,1212.48 1422.9,1212.48 1423.49,1212.48 1424.08,1212.48 1424.66,1212.48 1425.25,1212.48 1425.83,1212.48 1426.42,1212.48 1427.01,1212.48 1427.59,1212.48 1428.18,1212.48 1428.77,1212.48 1429.35,1212.48 1429.94,1212.48 1430.53,1212.48 1431.11,1212.48 1431.7,1212.48 1432.29,1212.48 1432.87,1212.48 1433.46,1212.48 1434.04,1212.48 1434.63,1212.48 1435.22,1212.48 1435.8,1212.48 1436.39,1212.48 1436.98,1212.48 1437.56,1212.48 1438.15,1212.48 1438.74,1212.48 1439.32,1212.48 1439.91,1212.48 1440.5,1212.48 1441.08,1212.48 1441.67,1212.48 1442.25,1212.48 1442.84,1212.48 1443.43,1212.48 1444.01,1212.48 1444.6,1212.48 1445.19,1212.48 1445.77,1212.48 1446.36,1212.48 1446.95,1212.48 1447.53,1212.48 1448.12,1212.48 1448.7,1212.48 1449.29,1212.48 1449.88,1212.48 1450.46,1212.48 1451.05,1212.48 1451.64,1212.48 1452.22,1212.48 1452.81,1212.48 1453.4,1212.48 1453.98,1212.48 1454.57,1212.48 1455.16,1212.48 1455.74,1212.48 1456.33,1212.48 1456.91,1212.48 1457.5,1212.48 1458.09,1212.48 1458.67,1212.48 1459.26,1212.48 1459.85,1212.48 1460.43,1212.48 1461.02,1212.48 1461.61,1212.48 1462.19,1212.48 1462.78,1212.48 1463.37,1212.48 1463.95,1212.48 1464.54,1212.48 1465.12,1212.48 1465.71,1212.48 1466.3,1212.48 1466.88,1212.48 1467.47,1212.48 1468.06,1212.48 1468.64,1212.48 1469.23,1212.48 1469.82,1212.48 1470.4,1212.48 1470.99,1212.48 1471.57,1212.48 1472.16,1212.48 1472.75,1212.48 1473.33,1212.48 1473.92,1212.48 1474.51,1212.48 1475.09,1212.48 1475.68,1212.48 1476.27,1212.48 1476.85,1212.48 1477.44,1212.48 1478.03,1212.48 1478.61,1212.48 1479.2,1212.48 1479.78,1212.48 1480.37,1212.48 1480.96,1212.48 1481.54,1212.48 1482.13,1212.48 1482.72,1212.48 1483.3,1212.48 1483.89,1212.48 1484.48,1212.48 1485.06,1212.48 1485.65,1212.48 1486.24,1212.48 1486.82,1212.48 1487.41,1212.48 1487.99,1212.48 1488.58,1212.48 1489.17,1212.48 1489.75,1212.48 1490.34,1212.48 1490.93,1212.48 1491.51,1212.48 1492.1,1212.48 1492.69,1212.48 1493.27,1212.48 1493.86,1212.48 1494.45,1212.48 1495.03,1212.48 1495.62,1212.48 1496.2,1212.48 1496.79,1212.48 1497.38,1212.48 1497.96,1212.48 1498.55,1212.48 1499.14,1212.48 1499.72,1212.48 1500.31,1212.48 1500.9,1212.48 1501.48,1212.48 1502.07,1212.48 1502.65,1212.48 1503.24,1212.48 1503.83,1212.48 1504.41,1212.48 1505,1212.48 1505.59,1212.48 1506.17,1212.48 1506.76,1212.48 1507.35,1212.48 1507.93,1212.48 1508.52,1212.48 1509.11,1212.48 1509.69,1212.48 1510.28,1212.48 1510.86,1212.48 1511.45,1212.48 1512.04,1212.48 1512.62,1212.48 1513.21,1212.48 1513.8,1212.48 1514.38,1212.48 1514.97,1212.48 1515.56,1212.48 1516.14,1212.48 1516.73,1212.48 1517.32,1212.48 1517.9,1212.48 1518.49,1212.48 1519.07,1212.48 1519.66,1212.48 1520.25,1212.48 1520.83,1212.48 1521.42,1212.48 1522.01,1212.48 1522.59,1212.48 1523.18,1212.48 1523.77,1212.48 1524.35,1212.48 1524.94,1212.48 1525.52,1212.48 1526.11,1212.48 1526.7,1212.48 1527.28,1212.48 1527.87,1212.48 1528.46,1212.48 1529.04,1212.48 1529.63,1212.48 1530.22,1212.48 1530.8,1212.48 1531.39,1212.48 1531.98,1212.48 1532.56,1212.48 1533.15,1212.48 1533.73,1212.48 1534.32,1212.48 1534.91,1212.48 1535.49,1212.48 1536.08,1212.48 1536.67,1212.48 1537.25,1212.48 1537.84,1212.48 1538.43,1212.48 1539.01,1212.48 1539.6,1212.48 1540.19,1212.48 1540.77,1212.48 1541.36,1212.48 1541.94,1212.48 1542.53,1212.48 1543.12,1212.48 1543.7,1212.48 1544.29,1212.48 1544.88,1212.48 1545.46,1212.48 1546.05,1212.48 1546.64,1212.48 1547.22,1212.48 1547.81,1212.48 1548.4,1212.48 1548.98,1212.48 1549.57,1212.48 1550.15,1212.48 1550.74,1212.48 1551.33,1212.48 1551.91,1212.48 1552.5,1212.48 1553.09,1212.48 1553.67,1212.48 1554.26,1212.48 1554.85,1212.48 1555.43,1212.48 1556.02,1212.48 1556.6,1212.48 1557.19,1212.48 1557.78,1212.48 1558.36,1212.48 1558.95,1212.48 1559.54,1212.48 1560.12,1212.48 1560.71,1212.48 1561.3,1212.48 1561.88,1212.48 1562.47,1212.48 1563.06,1212.48 1563.64,1212.48 1564.23,1212.48 1564.81,1212.48 1565.4,1212.48 1565.99,1212.48 1566.57,1212.48 1567.16,1212.48 1567.75,1212.48 1568.33,1212.48 1568.92,1212.48 1569.51,1212.48 1570.09,1212.48 1570.68,1212.48 1571.27,1212.48 1571.85,1212.48 1572.44,1212.48 1573.02,1212.48 1573.61,1212.48 1574.2,1212.48 1574.78,1212.48 1575.37,1212.48 1575.96,1212.48 1576.54,1212.48 1577.13,1212.48 1577.72,1212.48 1578.3,1212.48 1578.89,1212.48 1579.47,1212.48 1580.06,1212.48 1580.65,1212.48 1581.23,1212.48 1581.82,1212.48 1582.41,1212.48 1582.99,1212.48 1583.58,1212.48 1584.17,1212.48 1584.75,1212.48 1585.34,1212.48 1585.93,1212.48 1586.51,1212.48 1587.1,1212.48 1587.68,1212.48 1588.27,1212.48 1588.86,1212.48 1589.44,1212.48 1590.03,1212.48 1590.62,1212.48 1591.2,1212.48 1591.79,1212.48 1592.38,1212.48 1592.96,1212.48 1593.55,1212.48 1594.14,1212.48 1594.72,1212.48 1595.31,1212.48 1595.89,1212.48 1596.48,1212.48 1597.07,1212.48 1597.65,1212.48 1598.24,1212.48 1598.83,1212.48 1599.41,1212.48 1600,1212.48 1600.59,1212.48 1601.17,1212.48 1601.76,1212.48 1602.34,1212.48 1602.93,1212.48 1603.52,1212.48 1604.1,1212.48 1604.69,1212.48 1605.28,1212.48 1605.86,1212.48 1606.45,1212.48 1607.04,1212.48 1607.62,1212.48 1608.21,1212.48 1608.8,1212.48 1609.38,1212.48 1609.97,1212.48 1610.55,1212.48 1611.14,1212.48 1611.73,1212.48 1612.31,1212.48 1612.9,1212.48 1613.49,1212.48 1614.07,1212.48 1614.66,1212.48 1615.25,1212.48 1615.83,1212.48 1616.42,1212.48 1617.01,1212.48 1617.59,1212.48 1618.18,1212.48 1618.76,1212.48 1619.35,1212.48 1619.94,1212.48 1620.52,1212.48 1621.11,1212.48 1621.7,1212.48 1622.28,1212.48 1622.87,1212.48 1623.46,1212.48 1624.04,1212.48 1624.63,1212.48 1625.22,1212.48 1625.8,1212.48 1626.39,1212.48 1626.97,1212.48 1627.56,1212.48 1628.15,1212.48 1628.73,1212.48 1629.32,1212.48 1629.91,1212.48 1630.49,1212.48 1631.08,1212.48 1631.67,1212.48 1632.25,1212.48 1632.84,1212.48 1633.42,1212.48 1634.01,1212.48 1634.6,1212.48 1635.18,1212.48 1635.77,1212.48 1636.36,1212.48 1636.94,1212.48 1637.53,1212.48 1638.12,1212.48 1638.7,1212.48 1639.29,1212.48 1639.88,1212.48 1640.46,1212.48 1641.05,1212.48 1641.63,1212.48 1642.22,1212.48 1642.81,1212.48 1643.39,1212.48 1643.98,1212.48 1644.57,1212.48 1645.15,1212.48 1645.74,1212.48 1646.33,1212.48 1646.91,1212.48 1647.5,1212.48 1648.09,1212.48 1648.67,1212.48 1649.26,1212.48 1649.84,1212.48 1650.43,1212.48 1651.02,1212.48 1651.6,1212.48 1652.19,1212.48 1652.78,1212.48 1653.36,1212.48 1653.95,1212.48 1654.54,1212.48 1655.12,1212.48 1655.71,1212.48 1656.29,1212.48 1656.88,1212.48 1657.47,1212.48 1658.05,1212.48 1658.64,1212.48 1659.23,1212.48 1659.81,1212.48 1660.4,1212.48 1660.99,1212.48 1661.57,1212.48 1662.16,1212.48 1662.75,1212.48 1663.33,1212.48 1663.92,1212.48 1664.5,1212.48 1665.09,1212.48 1665.68,1212.48 1666.26,1212.48 1666.85,1212.48 1667.44,1212.48 1668.02,1212.48 1668.61,1212.48 1669.2,1212.48 1669.78,1212.48 1670.37,1212.48 1670.96,1212.48 1671.54,1212.48 1672.13,1212.48 1672.71,1212.48 1673.3,1212.48 1673.89,1212.48 1674.47,1212.48 1675.06,1212.48 1675.65,1212.48 1676.23,1212.48 1676.82,1212.48 1677.41,1212.48 1677.99,1212.48 1678.58,1212.48 1679.17,1212.48 1679.75,1212.48 1680.34,1212.48 1680.92,1212.48 1681.51,1212.48 1682.1,1212.48 1682.68,1212.48 1683.27,1212.48 1683.86,1212.48 1684.44,1212.48 1685.03,1212.48 1685.62,1212.48 1686.2,1212.48 1686.79,1212.48 1687.37,1212.48 1687.96,1212.48 1688.55,1212.48 1689.13,1212.48 1689.72,1212.48 1690.31,1212.48 1690.89,1212.48 1691.48,1212.48 1692.07,1212.48 1692.65,1212.48 1693.24,1212.48 1693.83,1212.48 1694.41,1212.48 1695,1212.48 1695.58,1212.48 1696.17,1212.48 1696.76,1212.48 1697.34,1212.48 1697.93,1212.48 1698.52,1212.48 1699.1,1212.48 1699.69,1212.48 1700.28,1212.48 1700.86,1212.48 1701.45,1212.48 1702.04,1212.48 1702.62,1212.48 1703.21,1212.48 1703.79,1212.48 1704.38,1212.48 1704.97,1212.48 1705.55,1212.48 1706.14,1212.48 1706.73,1212.48 1707.31,1212.48 1707.9,1212.48 1708.49,1212.48 1709.07,1212.48 1709.66,1212.48 1710.24,1212.48 1710.83,1212.48 1711.42,1212.48 1712,1212.48 1712.59,1212.48 1713.18,1212.48 1713.76,1212.48 1714.35,1212.48 1714.94,1212.48 1715.52,1212.48 1716.11,1212.48 1716.7,1212.48 1717.28,1212.48 1717.87,1212.48 1718.45,1212.48 1719.04,1212.48 1719.63,1212.48 1720.21,1212.48 1720.8,1212.48 1721.39,1212.48 1721.97,1212.48 1722.56,1212.48 1723.15,1212.48 1723.73,1212.48 1724.32,1212.48 1724.91,1212.48 1725.49,1212.48 1726.08,1212.48 1726.66,1212.48 1727.25,1212.48 1727.84,1212.48 1728.42,1212.48 1729.01,1212.48 1729.6,1212.48 1730.18,1212.48 1730.77,1212.48 1731.36,1212.48 1731.94,1212.48 1732.53,1212.48 1733.11,1212.48 1733.7,1212.48 1734.29,1212.48 1734.87,1212.48 1735.46,1212.48 1736.05,1212.48 1736.63,1212.48 1737.22,1212.48 1737.81,1212.48 1738.39,1212.48 1738.98,1212.48 1739.57,1212.48 1740.15,1212.48 1740.74,1212.48 1741.32,1212.48 1741.91,1212.48 1742.5,1212.48 1743.08,1212.48 1743.67,1212.48 1744.26,1212.48 1744.84,1212.48 1745.43,1212.48 1746.02,1212.48 1746.6,1212.48 1747.19,1212.48 1747.78,1212.48 1748.36,1212.48 1748.95,1212.48 1749.53,1212.48 1750.12,1212.48 1750.71,1212.48 1751.29,1212.48 1751.88,1212.48 1752.47,1212.48 1753.05,1212.48 1753.64,1212.48 1754.23,1212.48 1754.81,1212.48 1755.4,1212.48 1755.99,1212.48 1756.57,1212.48 1757.16,1212.48 1757.74,1212.48 1758.33,1212.48 1758.92,1212.48 1759.5,1212.48 1760.09,1212.48 1760.68,1212.48 1761.26,1212.48 1761.85,1212.48 1762.44,1212.48 1763.02,1212.48 1763.61,1212.48 1764.19,1212.48 1764.78,1212.48 1765.37,1212.48 1765.95,1212.48 1766.54,1212.48 1767.13,1212.48 1767.71,1212.48 1768.3,1212.48 1768.89,1212.48 1769.47,1212.48 1770.06,1212.48 1770.65,1212.48 1771.23,1212.48 1771.82,1212.48 1772.4,1212.48 1772.99,1212.48 1773.58,1212.48 1774.16,1212.48 1774.75,1212.48 1775.34,1212.48 1775.92,1212.48 1776.51,1212.48 1777.1,1212.48 1777.68,1212.48 1778.27,1212.48 1778.86,1212.48 1779.44,1212.48 1780.03,1212.48 1780.61,1212.48 1781.2,1212.48 1781.79,1212.48 1782.37,1212.48 1782.96,1212.48 1783.55,1212.48 1784.13,1212.48 1784.72,1212.48 1785.31,1212.48 1785.89,1212.48 1786.48,1212.48 1787.06,1212.48 1787.65,1212.48 1788.24,1212.48 1788.82,1212.48 1789.41,1212.48 1790,1212.48 1790.58,1212.48 1791.17,1212.48 1791.76,1212.48 1792.34,1212.48 1792.93,1212.48 1793.52,1212.48 1794.1,1212.48 1794.69,1212.48 1795.27,1212.48 1795.86,1212.48 1796.45,1212.48 1797.03,1212.48 1797.62,1212.48 1798.21,1212.48 1798.79,1212.48 1799.38,1212.48 1799.97,1212.48 1800.55,1212.48 1801.14,1212.48 1801.73,1212.48 1802.31,1212.48 1802.9,1212.48 1803.48,1212.48 1804.07,1212.48 1804.66,1212.48 1805.24,1212.48 1805.83,1212.48 1806.42,1212.48 1807,1212.48 1807.59,1212.48 1808.18,1212.48 1808.76,1212.48 1809.35,1212.48 1809.94,1212.48 1810.52,1212.48 1811.11,1212.48 1811.69,1212.48 1812.28,1212.48 1812.87,1212.48 1813.45,1212.48 1814.04,1212.48 1814.63,1212.48 1815.21,1212.48 1815.8,1212.48 1816.39,1212.48 1816.97,1212.48 1817.56,1212.48 1818.14,1212.48 1818.73,1212.48 1819.32,1212.48 1819.9,1212.48 1820.49,1212.48 1821.08,1212.48 1821.66,1212.48 1822.25,1212.48 1822.84,1212.48 1823.42,1212.48 1824.01,1212.48 1824.6,1212.48 1825.18,1212.48 1825.77,1212.48 1826.35,1212.48 1826.94,1212.48 1827.53,1212.48 1828.11,1212.48 1828.7,1212.48 1829.29,1212.48 1829.87,1212.48 1830.46,1212.48 1831.05,1212.48 1831.63,1212.48 1832.22,1212.48 1832.81,1212.48 1833.39,1212.48 1833.98,1212.48 1834.56,1212.48 1835.15,1212.48 1835.74,1212.48 1836.32,1212.48 1836.91,1212.48 1837.5,1212.48 1838.08,1212.48 1838.67,1212.48 1839.26,1212.48 1839.84,1212.48 1840.43,1212.48 1841.01,1212.48 1841.6,1212.48 1842.19,1212.48 1842.77,1212.48 1843.36,1212.48 1843.95,1212.48 1844.53,1212.48 1845.12,1212.48 1845.71,1212.48 1846.29,1212.48 1846.88,1212.48 1847.47,1212.48 1848.05,1212.48 1848.64,1212.48 1849.22,1212.48 1849.81,1212.48 1850.4,1212.48 1850.98,1212.48 1851.57,1212.48 1852.16,1212.48 1852.74,1212.48 1853.33,1212.48 1853.92,1212.48 1854.5,1212.48 1855.09,1212.48 1855.68,1212.48 1856.26,1212.48 1856.85,1212.48 1857.43,1212.48 1858.02,1212.48 1858.61,1212.48 1859.19,1212.48 1859.78,1212.48 1860.37,1212.48 1860.95,1212.48 1861.54,1212.48 1862.13,1212.48 1862.71,1212.48 1863.3,1212.48 1863.88,1212.48 1864.47,1212.48 1865.06,1212.48 1865.64,1212.48 1866.23,1212.48 1866.82,1212.48 1867.4,1212.48 1867.99,1212.48 1868.58,1212.48 1869.16,1212.48 1869.75,1212.48 1870.34,1212.48 1870.92,1212.48 1871.51,1212.48 1872.09,1212.48 1872.68,1212.48 1873.27,1212.48 1873.85,1212.48 1874.44,1212.48 1875.03,1212.48 1875.61,1212.48 1876.2,1212.48 1876.79,1212.48 1877.37,1212.48 1877.96,1212.48 1878.55,1212.48 1879.13,1212.48 1879.72,1212.48 1880.3,1212.48 1880.89,1212.48 1881.48,1212.48 1882.06,1212.48 1882.65,1212.48 1883.24,1212.48 1883.82,1212.48 1884.41,1212.48 1885,1212.48 1885.58,1212.48 1886.17,1212.48 1886.76,1212.48 1887.34,1212.48 1887.93,1212.48 1888.51,1212.48 1889.1,1212.48 1889.69,1212.48 1890.27,1212.48 1890.86,1212.48 1891.45,1212.48 1892.03,1212.48 1892.62,1212.48 1893.21,1212.48 1893.79,1212.48 1894.38,1212.48 1894.96,1212.48 1895.55,1212.48 1896.14,1212.48 1896.72,1212.48 1897.31,1212.48 1897.9,1212.48 1898.48,1212.48 1899.07,1212.48 1899.66,1212.48 1900.24,1212.48 1900.83,1212.48 1901.42,1212.48 1902,1212.48 1902.59,1212.48 1903.17,1212.48 1903.76,1212.48 1904.35,1212.48 1904.93,1212.48 1905.52,1212.48 1906.11,1212.48 1906.69,1212.48 1907.28,1212.48 1907.87,1212.48 1908.45,1212.48 1909.04,1212.48 1909.63,1212.48 1910.21,1212.48 1910.8,1212.48 1911.38,1212.48 1911.97,1212.48 1912.56,1212.48 1913.14,1212.48 1913.73,1212.48 1914.32,1212.48 1914.9,1212.48 1915.49,1212.48 1916.08,1212.48 1916.66,1212.48 1917.25,1212.48 1917.83,1212.48 1918.42,1212.48 1919.01,1212.48 1919.59,1212.48 1920.18,1212.48 1920.77,1212.48 1921.35,1212.48 1921.94,1212.48 1922.53,1212.48 1923.11,1212.48 1923.7,1212.48 1924.29,1212.48 1924.87,1212.48 1925.46,1212.48 1926.04,1212.48 1926.63,1212.48 1927.22,1212.48 1927.8,1212.48 1928.39,1212.48 1928.98,1212.48 1929.56,1212.48 1930.15,1212.48 1930.74,1212.48 1931.32,1212.48 1931.91,1212.48 1932.5,1212.48 1933.08,1212.48 1933.67,1212.48 1934.25,1212.48 1934.84,1212.48 1935.43,1212.48 1936.01,1212.48 1936.6,1212.48 1937.19,1212.48 1937.77,1212.48 1938.36,1212.48 1938.95,1212.48 1939.53,1212.48 1940.12,1212.48 1940.71,1212.48 1941.29,1212.48 1941.88,1212.48 1942.46,1212.48 1943.05,1212.48 1943.64,1212.48 1944.22,1212.48 1944.81,1212.48 1945.4,1212.48 1945.98,1212.48 1946.57,1212.48 1947.16,1212.48 1947.74,1212.48 1948.33,1212.48 1948.91,1212.48 1949.5,1212.48 1950.09,1212.48 1950.67,1212.48 1951.26,1212.48 1951.85,1212.48 1952.43,1212.48 1953.02,1212.48 1953.61,1212.48 1954.19,1212.48 1954.78,1212.48 1955.37,1212.48 1955.95,1212.48 1956.54,1212.48 1957.12,1212.48 1957.71,1212.48 1958.3,1212.48 1958.88,1212.48 1959.47,1212.48 1960.06,1212.48 1960.64,1212.48 1961.23,1212.48 1961.82,1212.48 1962.4,1212.48 1962.99,1212.48 1963.58,1212.48 1964.16,1212.48 1964.75,1212.48 1965.33,1212.48 1965.92,1212.48 1966.51,1212.48 1967.09,1212.48 1967.68,1212.48 1968.27,1212.48 1968.85,1212.48 1969.44,1212.48 1970.03,1212.48 1970.61,1212.48 1971.2,1212.48 1971.78,1212.48 1972.37,1212.48 1972.96,1212.48 1973.54,1212.48 1974.13,1212.48 1974.72,1212.48 1975.3,1212.48 1975.89,1212.48 1976.48,1212.48 1977.06,1212.48 1977.65,1212.48 1978.24,1212.48 1978.82,1212.48 1979.41,1212.48 1979.99,1212.48 1980.58,1212.48 1981.17,1212.48 1981.75,1212.48 1982.34,1212.48 1982.93,1212.48 1983.51,1212.48 1984.1,1212.48 1984.69,1212.48 1985.27,1212.48 1985.86,1212.48 1986.45,1212.48 1987.03,1212.48 1987.62,1212.48 1988.2,1212.48 1988.79,1212.48 1989.38,1212.48 1989.96,1212.48 1990.55,1212.48 1991.14,1212.48 1991.72,1212.48 1992.31,1212.48 1992.9,1212.48 1993.48,1212.48 1994.07,1212.48 1994.65,1212.48 1995.24,1212.48 1995.83,1212.48 1996.41,1212.48 1997,1212.48 1997.59,1212.48 1998.17,1212.48 1998.76,1212.48 1999.35,1212.48 1999.93,1212.48 2000.52,1212.48 2001.11,1212.48 2001.69,1212.48 2002.28,1212.48 2002.86,1212.48 2003.45,1212.48 2004.04,1212.48 2004.62,1212.48 2005.21,1212.48 2005.8,1212.48 2006.38,1212.48 2006.97,1212.48 2007.56,1212.48 2008.14,1212.48 2008.73,1212.48 2009.32,1212.48 2009.9,1212.48 2010.49,1212.48 2011.07,1212.48 2011.66,1212.48 2012.25,1212.48 2012.83,1212.48 2013.42,1212.48 2014.01,1212.48 2014.59,1212.48 2015.18,1212.48 2015.77,1212.48 2016.35,1212.48 2016.94,1212.48 2017.53,1212.48 2018.11,1212.48 2018.7,1212.48 2019.28,1212.48 2019.87,1212.48 2020.46,1212.48 2021.04,1212.48 2021.63,1212.48 2022.22,1212.48 2022.8,1212.48 2023.39,1212.48 2023.98,1212.48 2024.56,1212.48 2025.15,1212.48 2025.73,1212.48 2026.32,1212.48 2026.91,1212.48 2027.49,1212.48 2028.08,1212.48 2028.67,1212.48 2029.25,1212.48 2029.84,1212.48 2030.43,1212.48 2031.01,1212.48 2031.6,1212.48 2032.19,1212.48 2032.77,1212.48 2033.36,1212.48 2033.94,1212.48 2034.53,1212.48 2035.12,1212.48 2035.7,1212.48 2036.29,1212.48 2036.88,1212.48 2037.46,1212.48 2038.05,1212.48 2038.64,1212.48 2039.22,1212.48 2039.81,1212.48 2040.4,1212.48 2040.98,1212.48 2041.57,1212.48 2042.15,1212.48 2042.74,1212.48 2043.33,1212.48 2043.91,1212.48 2044.5,1212.48 2045.09,1212.48 2045.67,1212.48 2046.26,1212.48 2046.85,1212.48 2047.43,1212.48 2048.02,1212.48 2048.6,1212.48 2049.19,1212.48 2049.78,1212.48 2050.36,1212.48 2050.95,1212.48 2051.54,1212.48 2052.12,1212.48 2052.71,1212.48 2053.3,1212.48 2053.88,1212.48 2054.47,1212.48 2055.06,1212.48 2055.64,1212.48 2056.23,1212.48 2056.81,1212.48 2057.4,1212.48 2057.99,1212.48 2058.57,1212.48 2059.16,1212.48 2059.75,1212.48 2060.33,1212.48 2060.92,1212.48 2061.51,1212.48 2062.09,1212.48 2062.68,1212.48 2063.27,1212.48 2063.85,1212.48 2064.44,1212.48 2065.02,1212.48 2065.61,1212.48 2066.2,1212.48 2066.78,1212.48 2067.37,1212.48 2067.96,1212.48 2068.54,1212.48 2069.13,1212.48 2069.72,1212.48 2070.3,1212.48 2070.89,1212.48 2071.48,1212.48 2072.06,1212.48 2072.65,1212.48 2073.23,1212.48 2073.82,1212.48 2074.41,1212.48 2074.99,1212.48 2075.58,1212.48 2076.17,1212.48 2076.75,1212.48 2077.34,1212.48 2077.93,1212.48 2078.51,1212.48 2079.1,1212.48 2079.68,1212.48 2080.27,1212.48 2080.86,1212.48 2081.44,1212.48 2082.03,1212.48 2082.62,1212.48 2083.2,1212.48 2083.79,1212.48 2084.38,1212.48 2084.96,1212.48 2085.55,1212.48 2086.14,1212.48 2086.72,1212.48 2087.31,1212.48 2087.89,1212.48 2088.48,1212.48 2089.07,1212.48 2089.65,1212.48 2090.24,1212.48 2090.83,1212.48 2091.41,1212.48 2092,1212.48 2092.59,1212.48 2093.17,1212.48 2093.76,1212.48 2094.35,1212.48 2094.93,1212.48 2095.52,1212.48 2096.1,1212.48 2096.69,1212.48 2097.28,1212.48 2097.86,1212.48 2098.45,1212.48 2099.04,1212.48 2099.62,1212.48 2100.21,1212.48 2100.8,1212.48 2101.38,1212.48 2101.97,1212.48 2102.55,1212.48 2103.14,1212.48 2103.73,1212.48 2104.31,1212.48 2104.9,1212.48 2105.49,1212.48 2106.07,1212.48 2106.66,1212.48 2107.25,1212.48 2107.83,1212.48 2108.42,1212.48 2109.01,1212.48 2109.59,1212.48 2110.18,1212.48 2110.76,1212.48 2111.35,1212.48 2111.94,1212.48 2112.52,1212.48 2113.11,1212.48 2113.7,1212.48 2114.28,1212.48 2114.87,1212.48 2115.46,1212.48 2116.04,1212.48 2116.63,1212.48 2117.22,1212.48 2117.8,1212.48 2118.39,1212.48 2118.97,1212.48 2119.56,1212.48 2120.15,1212.48 2120.73,1212.48 2121.32,1212.48 2121.91,1212.48 2122.49,1212.48 2123.08,1212.48 2123.67,1212.48 2124.25,1212.48 2124.84,1212.48 2125.42,1212.48 2126.01,1212.48 2126.6,1212.48 2127.18,1212.48 2127.77,1212.48 2128.36,1212.48 2128.94,1212.48 2129.53,1212.48 2130.12,1212.48 2130.7,1212.48 2131.29,1212.48 2131.88,1212.48 2132.46,1212.48 2133.05,1212.48 2133.63,1212.48 2134.22,1212.48 2134.81,1212.48 2135.39,1212.48 2135.98,1212.48 2136.57,1212.48 2137.15,1212.48 2137.74,1212.48 2138.33,1212.48 2138.91,1212.48 2139.5,1212.48 2140.09,1212.48 2140.67,1212.48 2141.26,1212.48 2141.84,1212.48 2142.43,1212.48 2143.02,1212.48 2143.6,1212.48 2144.19,1212.48 2144.78,1212.48 2145.36,1212.48 2145.95,1212.48 2146.54,1212.48 2147.12,1212.48 2147.71,1212.48 2148.3,1212.48 2148.88,1212.48 2149.47,1212.48 2150.05,1212.48 2150.64,1212.48 2151.23,1212.48 2151.81,1212.48 2152.4,1212.48 2152.99,1212.48 2153.57,1212.48 2154.16,1212.48 2154.75,1212.48 2155.33,1212.48 2155.92,1212.48 2156.5,1212.48 2157.09,1212.48 2157.68,1212.48 2158.26,1212.48 \"/>\n<path clip-path=\"url(#clip232)\" d=\"M986.025 1212.22 L986.612 1212.22 L987.198 1212.22 L987.785 1212.22 L988.371 1212.22 L988.957 1212.22 L989.544 1212.22 L990.13 1212.22 L990.717 1212.22 L991.303 1212.22 L991.889 1212.22 L992.476 1212.22 L993.062 1212.22 L993.649 1212.22 L994.235 1212.22 L994.822 1212.22 L995.408 1212.22 L995.994 1212.22 L996.581 1212.22 L997.167 1212.22 L997.754 1212.22 L998.34 1212.22 L998.926 1212.22 L999.513 1212.22 L1000.1 1212.22 L1000.69 1212.22 L1001.27 1212.22 L1001.86 1212.22 L1002.44 1212.22 L1003.03 1212.22 L1003.62 1212.22 L1004.2 1212.22 L1004.79 1212.22 L1005.38 1212.22 L1005.96 1212.22 L1006.55 1212.22 L1007.14 1212.22 L1007.72 1212.22 L1008.31 1212.22 L1008.9 1212.22 L1009.48 1212.22 L1010.07 1212.22 L1010.65 1212.22 L1011.24 1212.22 L1011.83 1212.22 L1012.41 1212.22 L1013 1212.22 L1013.59 1212.22 L1014.17 1212.22 L1014.76 1212.22 L1015.35 1212.22 L1015.93 1212.22 L1016.52 1212.22 L1017.11 1212.22 L1017.69 1212.22 L1018.28 1212.22 L1018.86 1212.22 L1019.45 1212.22 L1020.04 1212.22 L1020.62 1212.22 L1021.21 1212.22 L1021.8 1212.22 L1022.38 1212.22 L1022.97 1212.22 L1023.56 1212.22 L1024.14 1212.22 L1024.73 1212.22 L1025.32 1212.22 L1025.9 1212.22 L1026.49 1212.22 L1027.07 1212.22 L1027.66 1212.22 L1028.25 1212.22 L1028.83 1212.22 L1029.42 1212.22 L1030.01 1212.22 L1030.59 1212.22 L1031.18 1212.22 L1031.77 1212.22 L1032.35 1212.22 L1032.94 1212.22 L1033.52 1212.22 L1034.11 1212.22 L1034.7 1212.22 L1035.28 1212.22 L1035.87 1212.22 L1036.46 1212.22 L1037.04 1212.22 L1037.63 1212.22 L1038.22 1212.22 L1038.8 1212.22 L1039.39 1212.22 L1039.98 1212.22 L1040.56 1212.22 L1041.15 1212.22 L1041.73 1212.22 L1042.32 1212.22 L1042.91 1212.22 L1043.49 1212.22 L1044.08 1212.22 L1044.67 1212.22 L1045.25 1212.22 L1045.84 1212.22 L1046.43 1212.22 L1047.01 1212.22 L1047.6 1212.22 L1048.19 1212.22 L1048.77 1212.22 L1049.36 1212.22 L1049.94 1212.22 L1050.53 1212.22 L1051.12 1212.22 L1051.7 1212.22 L1052.29 1212.22 L1052.88 1212.22 L1053.46 1212.22 L1054.05 1212.22 L1054.64 1212.22 L1055.22 1212.22 L1055.81 1212.22 L1056.39 1212.22 L1056.98 1212.22 L1057.57 1212.22 L1058.15 1212.22 L1058.74 1212.22 L1059.33 1212.22 L1059.91 1212.22 L1060.5 1212.22 L1061.09 1212.22 L1061.67 1212.22 L1062.26 1212.22 L1062.85 1212.22 L1063.43 1212.22 L1064.02 1212.22 L1064.6 1212.22 L1065.19 1212.22 L1065.78 1212.22 L1066.36 1212.22 L1066.95 1212.22 L1067.54 1212.22 L1068.12 1212.22 L1068.71 1212.22 L1069.3 1212.22 L1069.88 1212.22 L1070.47 1212.22 L1071.06 1212.22 L1071.64 1212.22 L1072.23 1212.22 L1072.81 1212.22 L1073.4 1212.22 L1073.99 1212.22 L1074.57 1212.22 L1075.16 1212.22 L1075.75 1212.22 L1076.33 1212.22 L1076.92 1212.22 L1077.51 1212.22 L1078.09 1212.22 L1078.68 1212.22 L1079.26 1212.22 L1079.85 1212.22 L1080.44 1212.22 L1081.02 1212.22 L1081.61 1212.22 L1082.2 1212.22 L1082.78 1212.22 L1083.37 1212.22 L1083.96 1212.22 L1084.54 1212.22 L1085.13 1212.22 L1085.72 1212.22 L1086.3 1212.22 L1086.89 1212.22 L1087.47 1212.22 L1088.06 1212.22 L1088.65 1212.22 L1089.23 1212.22 L1089.82 1212.22 L1090.41 1212.22 L1090.99 1212.22 L1091.58 1212.22 L1092.17 1212.22 L1092.75 1212.22 L1093.34 1212.22 L1093.93 1212.22 L1094.51 1212.22 L1095.1 1212.22 L1095.68 1212.22 L1096.27 1212.22 L1096.86 1212.22 L1097.44 1212.22 L1098.03 1212.22 L1098.62 1212.22 L1099.2 1212.22 L1099.79 1212.22 L1100.38 1212.22 L1100.96 1212.22 L1101.55 1212.22 L1102.14 1212.22 L1102.72 1212.22 L1103.31 1212.22 L1103.89 1212.22 L1104.48 1212.22 L1105.07 1212.22 L1105.65 1212.22 L1106.24 1212.22 L1106.83 1212.22 L1107.41 1212.22 L1108 1212.22 L1108.59 1212.22 L1109.17 1212.22 L1109.76 1212.22 L1110.34 1212.22 L1110.93 1212.22 L1111.52 1212.22 L1112.1 1212.22 L1112.69 1212.22 L1113.28 1212.22 L1113.86 1212.22 L1114.45 1212.22 L1115.04 1212.22 L1115.62 1212.22 L1116.21 1212.22 L1116.8 1212.22 L1117.38 1212.22 L1117.97 1212.22 L1118.55 1212.22 L1119.14 1212.22 L1119.73 1212.22 L1120.31 1212.22 L1120.9 1212.22 L1121.49 1212.22 L1122.07 1212.22 L1122.66 1212.22 L1123.25 1212.22 L1123.83 1212.22 L1124.42 1212.22 L1125.01 1212.22 L1125.59 1212.22 L1126.18 1212.22 L1126.76 1212.22 L1127.35 1212.22 L1127.94 1212.22 L1128.52 1212.22 L1129.11 1212.22 L1129.7 1212.22 L1130.28 1212.22 L1130.87 1212.22 L1131.46 1212.22 L1132.04 1212.22 L1132.63 1212.22 L1133.21 1212.22 L1133.8 1212.22 L1134.39 1212.22 L1134.97 1212.22 L1135.56 1212.22 L1136.15 1212.22 L1136.73 1212.22 L1137.32 1212.22 L1137.91 1212.22 L1138.49 1212.22 L1139.08 1212.22 L1139.67 1212.22 L1140.25 1212.22 L1140.84 1212.22 L1141.42 1212.22 L1142.01 1212.22 L1142.6 1212.22 L1143.18 1212.22 L1143.77 1212.22 L1144.36 1212.22 L1144.94 1212.22 L1145.53 1212.22 L1146.12 1212.22 L1146.7 1212.22 L1147.29 1212.22 L1147.88 1212.22 L1148.46 1212.22 L1149.05 1212.22 L1149.63 1212.22 L1150.22 1212.22 L1150.81 1212.22 L1151.39 1212.22 L1151.98 1212.22 L1152.57 1212.22 L1153.15 1212.22 L1153.74 1212.22 L1154.33 1212.22 L1154.91 1212.22 L1155.5 1212.22 L1156.09 1212.22 L1156.67 1212.22 L1157.26 1212.22 L1157.84 1212.22 L1158.43 1212.22 L1159.02 1212.22 L1159.6 1212.22 L1160.19 1212.22 L1160.78 1212.22 L1161.36 1212.22 L1161.95 1212.22 L1162.54 1212.22 L1163.12 1212.22 L1163.71 1212.22 L1164.29 1212.22 L1164.88 1212.22 L1165.47 1212.22 L1166.05 1212.22 L1166.64 1212.22 L1167.23 1212.22 L1167.81 1212.22 L1168.4 1212.22 L1168.99 1212.22 L1169.57 1212.22 L1170.16 1212.22 L1170.75 1212.22 L1171.33 1212.22 L1171.92 1212.22 L1172.5 1212.22 L1173.09 1212.22 L1173.68 1212.22 L1174.26 1212.22 L1174.85 1212.22 L1175.44 1212.22 L1176.02 1212.22 L1176.61 1212.22 L1177.2 1212.22 L1177.78 1212.22 L1178.37 1212.22 L1178.96 1212.22 L1179.54 1212.22 L1180.13 1212.22 L1180.71 1212.22 L1181.3 1212.22 L1181.89 1212.22 L1182.47 1212.22 L1183.06 1212.22 L1183.65 1212.22 L1184.23 1212.22 L1184.82 1212.22 L1185.41 1212.22 L1185.99 1212.22 L1186.58 1212.22 L1187.16 1212.22 L1187.75 1212.22 L1188.34 1212.22 L1188.92 1212.22 L1189.51 1212.22 L1190.1 1212.22 L1190.68 1212.22 L1191.27 1212.22 L1191.86 1212.22 L1192.44 1212.22 L1193.03 1212.22 L1193.62 1212.22 L1194.2 1212.22 L1194.79 1212.22 L1195.37 1212.22 L1195.96 1212.22 L1196.55 1212.22 L1197.13 1212.22 L1197.72 1212.22 L1198.31 1212.22 L1198.89 1212.22 L1199.48 1212.22 L1200.07 1212.22 L1200.65 1212.22 L1201.24 1212.22 L1201.83 1212.22 L1202.41 1212.22 L1203 1212.22 L1203.58 1212.22 L1204.17 1212.22 L1204.76 1212.22 L1205.34 1212.22 L1205.93 1212.22 L1206.52 1212.22 L1207.1 1212.22 L1207.69 1212.22 L1208.28 1212.22 L1208.86 1212.22 L1209.45 1212.22 L1210.03 1212.22 L1210.62 1212.22 L1211.21 1212.22 L1211.79 1212.22 L1212.38 1212.22 L1212.97 1212.22 L1213.55 1212.22 L1214.14 1212.22 L1214.73 1212.22 L1215.31 1212.22 L1215.9 1212.22 L1216.49 1212.22 L1217.07 1212.22 L1217.66 1212.22 L1218.24 1212.22 L1218.83 1212.22 L1219.42 1212.22 L1220 1212.22 L1220.59 1212.22 L1221.18 1212.22 L1221.76 1212.22 L1222.35 1212.22 L1222.94 1212.22 L1223.52 1212.22 L1224.11 1212.22 L1224.7 1212.22 L1225.28 1212.22 L1225.87 1212.22 L1226.45 1212.22 L1227.04 1212.22 L1227.63 1212.22 L1228.21 1212.22 L1228.8 1212.22 L1229.39 1212.22 L1229.97 1212.22 L1230.56 1212.22 L1231.15 1212.22 L1231.73 1212.22 L1232.32 1212.22 L1232.91 1212.22 L1233.49 1212.22 L1234.08 1212.22 L1234.66 1212.22 L1235.25 1212.22 L1235.84 1212.22 L1236.42 1212.22 L1237.01 1212.22 L1237.6 1212.22 L1238.18 1212.22 L1238.77 1212.22 L1239.36 1212.22 L1239.94 1212.22 L1240.53 1212.22 L1241.11 1212.22 L1241.7 1212.22 L1242.29 1212.22 L1242.87 1212.22 L1243.46 1212.22 L1244.05 1212.22 L1244.63 1212.22 L1245.22 1212.22 L1245.81 1212.22 L1246.39 1212.22 L1246.98 1212.22 L1247.57 1212.22 L1248.15 1212.22 L1248.74 1212.22 L1249.32 1212.22 L1249.91 1212.22 L1250.5 1212.22 L1251.08 1212.22 L1251.67 1212.22 L1252.26 1212.22 L1252.84 1212.22 L1253.43 1212.22 L1254.02 1212.22 L1254.6 1212.22 L1255.19 1212.22 L1255.78 1212.22 L1256.36 1212.22 L1256.95 1212.22 L1257.53 1212.22 L1258.12 1212.22 L1258.71 1212.22 L1259.29 1212.22 L1259.88 1212.22 L1260.47 1212.22 L1261.05 1212.22 L1261.64 1212.22 L1262.23 1212.22 L1262.81 1212.22 L1263.4 1212.22 L1263.98 1212.22 L1264.57 1212.22 L1265.16 1212.22 L1265.74 1212.22 L1266.33 1212.22 L1266.92 1212.22 L1267.5 1212.22 L1268.09 1212.22 L1268.68 1212.22 L1269.26 1212.22 L1269.85 1212.22 L1270.44 1212.22 L1271.02 1212.22 L1271.61 1212.22 L1272.19 1212.22 L1272.78 1212.22 L1273.37 1212.22 L1273.95 1212.22 L1274.54 1212.22 L1275.13 1212.22 L1275.71 1212.22 L1276.3 1212.22 L1276.89 1212.22 L1277.47 1212.22 L1278.06 1212.22 L1278.65 1212.22 L1279.23 1212.22 L1279.82 1212.22 L1280.4 1212.22 L1280.99 1212.22 L1281.58 1212.22 L1282.16 1212.22 L1282.75 1212.22 L1283.34 1212.22 L1283.92 1212.22 L1284.51 1212.22 L1285.1 1212.22 L1285.68 1212.22 L1286.27 1212.22 L1286.86 1212.22 L1287.44 1212.22 L1288.03 1212.22 L1288.61 1212.22 L1289.2 1212.22 L1289.79 1212.22 L1290.37 1212.22 L1290.96 1212.22 L1291.55 1212.22 L1292.13 1212.22 L1292.72 1212.22 L1293.31 1212.22 L1293.89 1212.22 L1294.48 1212.22 L1295.06 1212.22 L1295.65 1212.22 L1296.24 1212.22 L1296.82 1212.22 L1297.41 1212.22 L1298 1212.22 L1298.58 1212.22 L1299.17 1212.22 L1299.76 1212.22 L1300.34 1212.22 L1300.93 1212.22 L1301.52 1212.22 L1302.1 1212.22 L1302.69 1212.22 L1303.27 1212.22 L1303.86 1212.22 L1304.45 1212.22 L1305.03 1212.22 L1305.62 1212.22 L1306.21 1212.22 L1306.79 1212.22 L1307.38 1212.22 L1307.97 1212.22 L1308.55 1212.22 L1309.14 1212.22 L1309.73 1212.22 L1310.31 1212.22 L1310.9 1212.22 L1311.48 1212.22 L1312.07 1212.22 L1312.66 1212.22 L1313.24 1212.22 L1313.83 1212.22 L1314.42 1212.22 L1315 1212.22 L1315.59 1212.22 L1316.18 1212.22 L1316.76 1212.22 L1317.35 1212.22 L1317.93 1212.22 L1318.52 1212.22 L1319.11 1212.22 L1319.69 1212.22 L1320.28 1212.22 L1320.87 1212.22 L1321.45 1212.22 L1322.04 1212.22 L1322.63 1212.22 L1323.21 1212.22 L1323.8 1212.22 L1324.39 1212.22 L1324.97 1212.22 L1325.56 1212.22 L1326.14 1212.22 L1326.73 1212.22 L1327.32 1212.22 L1327.9 1212.22 L1328.49 1212.22 L1329.08 1212.22 L1329.66 1212.22 L1330.25 1212.22 L1330.84 1212.22 L1331.42 1212.22 L1332.01 1212.22 L1332.6 1212.22 L1333.18 1212.22 L1333.77 1212.22 L1334.35 1212.22 L1334.94 1212.22 L1335.53 1212.22 L1336.11 1212.22 L1336.7 1212.22 L1337.29 1212.22 L1337.87 1212.22 L1338.46 1212.22 L1339.05 1212.22 L1339.63 1212.22 L1340.22 1212.22 L1340.8 1212.22 L1341.39 1212.22 L1341.98 1212.22 L1342.56 1212.22 L1343.15 1212.22 L1343.74 1212.22 L1344.32 1212.22 L1344.91 1212.22 L1345.5 1212.22 L1346.08 1212.22 L1346.67 1212.22 L1347.26 1212.22 L1347.84 1212.22 L1348.43 1212.22 L1349.01 1212.22 L1349.6 1212.22 L1350.19 1212.22 L1350.77 1212.22 L1351.36 1212.22 L1351.95 1212.22 L1352.53 1212.22 L1353.12 1212.22 L1353.71 1212.22 L1354.29 1212.22 L1354.88 1212.22 L1355.47 1212.22 L1356.05 1212.22 L1356.64 1212.22 L1357.22 1212.22 L1357.81 1212.22 L1358.4 1212.22 L1358.98 1212.22 L1359.57 1212.22 L1360.16 1212.22 L1360.74 1212.22 L1361.33 1212.22 L1361.92 1212.22 L1362.5 1212.22 L1363.09 1212.22 L1363.68 1212.22 L1364.26 1212.22 L1364.85 1212.22 L1365.43 1212.22 L1366.02 1212.22 L1366.61 1212.22 L1367.19 1212.22 L1367.78 1212.22 L1368.37 1212.22 L1368.95 1212.22 L1369.54 1212.22 L1370.13 1212.22 L1370.71 1212.22 L1371.3 1212.22 L1371.88 1212.22 L1372.47 1212.22 L1373.06 1212.22 L1373.64 1212.22 L1374.23 1212.22 L1374.82 1212.22 L1375.4 1212.22 L1375.99 1212.22 L1376.58 1212.22 L1377.16 1212.22 L1377.75 1212.22 L1378.34 1212.22 L1378.92 1212.22 L1379.51 1212.22 L1380.09 1212.22 L1380.68 1212.22 L1381.27 1212.22 L1381.85 1212.22 L1382.44 1212.22 L1383.03 1212.22 L1383.61 1212.22 L1384.2 1212.22 L1384.79 1212.22 L1385.37 1212.22 L1385.96 1212.22 L1386.55 1212.22 L1387.13 1212.22 L1387.72 1212.22 L1388.3 1212.22 L1388.89 1212.22 L1389.48 1212.22 L1390.06 1212.22 L1390.65 1212.22 L1391.24 1212.22 L1391.82 1212.22 L1392.41 1212.22 L1393 1212.22 L1393.58 1212.22 L1394.17 1212.22 L1394.75 1212.22 L1395.34 1212.22 L1395.93 1212.22 L1396.51 1212.22 L1397.1 1212.22 L1397.69 1212.22 L1398.27 1212.22 L1398.86 1212.22 L1399.45 1212.22 L1400.03 1212.22 L1400.62 1212.22 L1401.21 1212.22 L1401.79 1212.22 L1402.38 1212.22 L1402.96 1212.22 L1403.55 1212.22 L1404.14 1212.22 L1404.72 1212.22 L1405.31 1212.22 L1405.9 1212.22 L1406.48 1212.22 L1407.07 1212.22 L1407.66 1212.22 L1408.24 1212.22 L1408.83 1212.22 L1409.42 1212.22 L1410 1212.22 L1410.59 1212.22 L1411.17 1212.22 L1411.76 1212.22 L1412.35 1212.22 L1412.93 1212.22 L1413.52 1212.22 L1414.11 1212.22 L1414.69 1212.22 L1415.28 1212.22 L1415.87 1212.22 L1416.45 1212.22 L1417.04 1212.22 L1417.63 1212.22 L1418.21 1212.22 L1418.8 1212.22 L1419.38 1212.22 L1419.97 1212.22 L1420.56 1212.22 L1421.14 1212.22 L1421.73 1212.22 L1422.32 1212.22 L1422.9 1212.22 L1423.49 1212.22 L1424.08 1212.22 L1424.66 1212.22 L1425.25 1212.22 L1425.83 1212.22 L1426.42 1212.22 L1427.01 1212.22 L1427.59 1212.22 L1428.18 1212.22 L1428.77 1212.22 L1429.35 1212.22 L1429.94 1212.22 L1430.53 1212.22 L1431.11 1212.22 L1431.7 1212.22 L1432.29 1212.22 L1432.87 1212.22 L1433.46 1212.22 L1434.04 1212.22 L1434.63 1212.22 L1435.22 1212.22 L1435.8 1212.22 L1436.39 1212.22 L1436.98 1212.22 L1437.56 1212.22 L1438.15 1212.22 L1438.74 1212.22 L1439.32 1212.22 L1439.91 1212.22 L1440.5 1212.22 L1441.08 1212.22 L1441.67 1212.22 L1442.25 1212.22 L1442.84 1212.22 L1443.43 1212.22 L1444.01 1212.22 L1444.6 1212.22 L1445.19 1212.22 L1445.77 1212.22 L1446.36 1212.22 L1446.95 1212.22 L1447.53 1212.22 L1448.12 1212.22 L1448.7 1212.22 L1449.29 1212.22 L1449.88 1212.22 L1450.46 1212.22 L1451.05 1212.22 L1451.64 1212.22 L1452.22 1212.22 L1452.81 1212.22 L1453.4 1212.22 L1453.98 1212.22 L1454.57 1212.22 L1455.16 1212.22 L1455.74 1212.22 L1456.33 1212.22 L1456.91 1212.22 L1457.5 1212.22 L1458.09 1212.22 L1458.67 1212.22 L1459.26 1212.22 L1459.85 1212.22 L1460.43 1212.22 L1461.02 1212.22 L1461.61 1212.22 L1462.19 1212.22 L1462.78 1212.22 L1463.37 1212.22 L1463.95 1212.22 L1464.54 1212.22 L1465.12 1212.22 L1465.71 1212.22 L1466.3 1212.22 L1466.88 1212.22 L1467.47 1212.22 L1468.06 1212.22 L1468.64 1212.22 L1469.23 1212.22 L1469.82 1212.22 L1470.4 1212.22 L1470.99 1212.22 L1471.57 1212.22 L1472.16 1212.22 L1472.75 1212.22 L1473.33 1212.22 L1473.92 1212.22 L1474.51 1212.22 L1475.09 1212.22 L1475.68 1212.22 L1476.27 1212.22 L1476.85 1212.22 L1477.44 1212.22 L1478.03 1212.22 L1478.61 1212.22 L1479.2 1212.22 L1479.78 1212.22 L1480.37 1212.22 L1480.96 1212.22 L1481.54 1212.22 L1482.13 1212.22 L1482.72 1212.22 L1483.3 1212.22 L1483.89 1212.22 L1484.48 1212.22 L1485.06 1212.22 L1485.65 1212.22 L1486.24 1212.22 L1486.82 1212.22 L1487.41 1212.22 L1487.99 1212.22 L1488.58 1212.22 L1489.17 1212.22 L1489.75 1212.22 L1490.34 1212.22 L1490.93 1212.22 L1491.51 1212.22 L1492.1 1212.22 L1492.69 1212.22 L1493.27 1212.22 L1493.86 1212.22 L1494.45 1212.22 L1495.03 1212.22 L1495.62 1212.22 L1496.2 1212.22 L1496.79 1212.22 L1497.38 1212.22 L1497.96 1212.22 L1498.55 1212.22 L1499.14 1212.22 L1499.72 1212.22 L1500.31 1212.22 L1500.9 1212.22 L1501.48 1212.22 L1502.07 1212.22 L1502.65 1212.22 L1503.24 1212.22 L1503.83 1212.22 L1504.41 1212.22 L1505 1212.22 L1505.59 1212.22 L1506.17 1212.22 L1506.76 1212.22 L1507.35 1212.22 L1507.93 1212.22 L1508.52 1212.22 L1509.11 1212.22 L1509.69 1212.22 L1510.28 1212.22 L1510.86 1212.22 L1511.45 1212.22 L1512.04 1212.22 L1512.62 1212.22 L1513.21 1212.22 L1513.8 1212.22 L1514.38 1212.22 L1514.97 1212.22 L1515.56 1212.22 L1516.14 1212.22 L1516.73 1212.22 L1517.32 1212.22 L1517.9 1212.22 L1518.49 1212.22 L1519.07 1212.22 L1519.66 1212.22 L1520.25 1212.22 L1520.83 1212.22 L1521.42 1212.22 L1522.01 1212.22 L1522.59 1212.22 L1523.18 1212.22 L1523.77 1212.22 L1524.35 1212.22 L1524.94 1212.22 L1525.52 1212.22 L1526.11 1212.22 L1526.7 1212.22 L1527.28 1212.22 L1527.87 1212.22 L1528.46 1212.22 L1529.04 1212.22 L1529.63 1212.22 L1530.22 1212.22 L1530.8 1212.22 L1531.39 1212.22 L1531.98 1212.22 L1532.56 1212.22 L1533.15 1212.22 L1533.73 1212.22 L1534.32 1212.22 L1534.91 1212.22 L1535.49 1212.22 L1536.08 1212.22 L1536.67 1212.22 L1537.25 1212.22 L1537.84 1212.22 L1538.43 1212.22 L1539.01 1212.22 L1539.6 1212.22 L1540.19 1212.22 L1540.77 1212.22 L1541.36 1212.22 L1541.94 1212.22 L1542.53 1212.22 L1543.12 1212.22 L1543.7 1212.22 L1544.29 1212.22 L1544.88 1212.22 L1545.46 1212.22 L1546.05 1212.22 L1546.64 1212.22 L1547.22 1212.22 L1547.81 1212.22 L1548.4 1212.22 L1548.98 1212.22 L1549.57 1212.22 L1550.15 1212.22 L1550.74 1212.22 L1551.33 1212.22 L1551.91 1212.22 L1552.5 1212.22 L1553.09 1212.22 L1553.67 1212.22 L1554.26 1212.22 L1554.85 1212.22 L1555.43 1212.22 L1556.02 1212.22 L1556.6 1212.22 L1557.19 1212.22 L1557.78 1212.22 L1558.36 1212.22 L1558.95 1212.22 L1559.54 1212.22 L1560.12 1212.22 L1560.71 1212.22 L1561.3 1212.22 L1561.88 1212.22 L1562.47 1212.22 L1563.06 1212.22 L1563.64 1212.22 L1564.23 1212.22 L1564.81 1212.22 L1565.4 1212.22 L1565.99 1212.22 L1566.57 1212.22 L1567.16 1212.22 L1567.75 1212.22 L1568.33 1212.22 L1568.92 1212.22 L1569.51 1212.22 L1570.09 1212.22 L1570.68 1212.22 L1571.27 1212.22 L1571.85 1212.22 L1572.44 1212.22 L1573.02 1212.22 L1573.61 1212.22 L1574.2 1212.22 L1574.78 1212.22 L1575.37 1212.22 L1575.96 1212.22 L1576.54 1212.22 L1577.13 1212.22 L1577.72 1212.22 L1578.3 1212.22 L1578.89 1212.22 L1579.47 1212.22 L1580.06 1212.22 L1580.65 1212.22 L1581.23 1212.22 L1581.82 1212.22 L1582.41 1212.22 L1582.99 1212.22 L1583.58 1212.22 L1584.17 1212.22 L1584.75 1212.22 L1585.34 1212.22 L1585.93 1212.22 L1586.51 1212.22 L1587.1 1212.22 L1587.68 1212.22 L1588.27 1212.22 L1588.86 1212.22 L1589.44 1212.22 L1590.03 1212.22 L1590.62 1212.22 L1591.2 1212.22 L1591.79 1212.22 L1592.38 1212.22 L1592.96 1212.22 L1593.55 1212.22 L1594.14 1212.22 L1594.72 1212.22 L1595.31 1212.22 L1595.89 1212.22 L1596.48 1212.22 L1597.07 1212.22 L1597.65 1212.22 L1598.24 1212.22 L1598.83 1212.22 L1599.41 1212.22 L1600 1212.22 L1600.59 1212.22 L1601.17 1212.22 L1601.76 1212.22 L1602.34 1212.22 L1602.93 1212.22 L1603.52 1212.22 L1604.1 1212.22 L1604.69 1212.22 L1605.28 1212.22 L1605.86 1212.22 L1606.45 1212.22 L1607.04 1212.22 L1607.62 1212.22 L1608.21 1212.22 L1608.8 1212.22 L1609.38 1212.22 L1609.97 1212.22 L1610.55 1212.22 L1611.14 1212.22 L1611.73 1212.22 L1612.31 1212.22 L1612.9 1212.22 L1613.49 1212.22 L1614.07 1212.22 L1614.66 1212.22 L1615.25 1212.22 L1615.83 1212.22 L1616.42 1212.22 L1617.01 1212.22 L1617.59 1212.22 L1618.18 1212.22 L1618.76 1212.22 L1619.35 1212.22 L1619.94 1212.22 L1620.52 1212.22 L1621.11 1212.22 L1621.7 1212.22 L1622.28 1212.22 L1622.87 1212.22 L1623.46 1212.22 L1624.04 1212.22 L1624.63 1212.22 L1625.22 1212.22 L1625.8 1212.22 L1626.39 1212.22 L1626.97 1212.22 L1627.56 1212.22 L1628.15 1212.22 L1628.73 1212.22 L1629.32 1212.22 L1629.91 1212.22 L1630.49 1212.22 L1631.08 1212.22 L1631.67 1212.22 L1632.25 1212.22 L1632.84 1212.22 L1633.42 1212.22 L1634.01 1212.22 L1634.6 1212.22 L1635.18 1212.22 L1635.77 1212.22 L1636.36 1212.22 L1636.94 1212.22 L1637.53 1212.22 L1638.12 1212.22 L1638.7 1212.22 L1639.29 1212.22 L1639.88 1212.22 L1640.46 1212.22 L1641.05 1212.22 L1641.63 1212.22 L1642.22 1212.22 L1642.81 1212.22 L1643.39 1212.22 L1643.98 1212.22 L1644.57 1212.22 L1645.15 1212.22 L1645.74 1212.22 L1646.33 1212.22 L1646.91 1212.22 L1647.5 1212.22 L1648.09 1212.22 L1648.67 1212.22 L1649.26 1212.22 L1649.84 1212.22 L1650.43 1212.22 L1651.02 1212.22 L1651.6 1212.22 L1652.19 1212.22 L1652.78 1212.22 L1653.36 1212.22 L1653.95 1212.22 L1654.54 1212.22 L1655.12 1212.22 L1655.71 1212.22 L1656.29 1212.22 L1656.88 1212.22 L1657.47 1212.22 L1658.05 1212.22 L1658.64 1212.22 L1659.23 1212.22 L1659.81 1212.22 L1660.4 1212.22 L1660.99 1212.22 L1661.57 1212.22 L1662.16 1212.22 L1662.75 1212.22 L1663.33 1212.22 L1663.92 1212.22 L1664.5 1212.22 L1665.09 1212.22 L1665.68 1212.22 L1666.26 1212.22 L1666.85 1212.22 L1667.44 1212.22 L1668.02 1212.22 L1668.61 1212.22 L1669.2 1212.22 L1669.78 1212.22 L1670.37 1212.22 L1670.96 1212.22 L1671.54 1212.22 L1672.13 1212.22 L1672.71 1212.22 L1673.3 1212.22 L1673.89 1212.22 L1674.47 1212.22 L1675.06 1212.22 L1675.65 1212.22 L1676.23 1212.22 L1676.82 1212.22 L1677.41 1212.22 L1677.99 1212.22 L1678.58 1212.22 L1679.17 1212.22 L1679.75 1212.22 L1680.34 1212.22 L1680.92 1212.22 L1681.51 1212.22 L1682.1 1212.22 L1682.68 1212.22 L1683.27 1212.22 L1683.86 1212.22 L1684.44 1212.22 L1685.03 1212.22 L1685.62 1212.22 L1686.2 1212.22 L1686.79 1212.22 L1687.37 1212.22 L1687.96 1212.22 L1688.55 1212.22 L1689.13 1212.22 L1689.72 1212.22 L1690.31 1212.22 L1690.89 1212.22 L1691.48 1212.22 L1692.07 1212.22 L1692.65 1212.22 L1693.24 1212.22 L1693.83 1212.22 L1694.41 1212.22 L1695 1212.22 L1695.58 1212.22 L1696.17 1212.22 L1696.76 1212.22 L1697.34 1212.22 L1697.93 1212.22 L1698.52 1212.22 L1699.1 1212.22 L1699.69 1212.22 L1700.28 1212.22 L1700.86 1212.22 L1701.45 1212.22 L1702.04 1212.22 L1702.62 1212.22 L1703.21 1212.22 L1703.79 1212.22 L1704.38 1212.22 L1704.97 1212.22 L1705.55 1212.22 L1706.14 1212.22 L1706.73 1212.22 L1707.31 1212.22 L1707.9 1212.22 L1708.49 1212.22 L1709.07 1212.22 L1709.66 1212.22 L1710.24 1212.22 L1710.83 1212.22 L1711.42 1212.22 L1712 1212.22 L1712.59 1212.22 L1713.18 1212.22 L1713.76 1212.22 L1714.35 1212.22 L1714.94 1212.22 L1715.52 1212.22 L1716.11 1212.22 L1716.7 1212.22 L1717.28 1212.22 L1717.87 1212.22 L1718.45 1212.22 L1719.04 1212.22 L1719.63 1212.22 L1720.21 1212.22 L1720.8 1212.22 L1721.39 1212.22 L1721.97 1212.22 L1722.56 1212.22 L1723.15 1212.22 L1723.73 1212.22 L1724.32 1212.22 L1724.91 1212.22 L1725.49 1212.22 L1726.08 1212.22 L1726.66 1212.22 L1727.25 1212.22 L1727.84 1212.22 L1728.42 1212.22 L1729.01 1212.22 L1729.6 1212.22 L1730.18 1212.22 L1730.77 1212.22 L1731.36 1212.22 L1731.94 1212.22 L1732.53 1212.22 L1733.11 1212.22 L1733.7 1212.22 L1734.29 1212.22 L1734.87 1212.22 L1735.46 1212.22 L1736.05 1212.22 L1736.63 1212.22 L1737.22 1212.22 L1737.81 1212.22 L1738.39 1212.22 L1738.98 1212.22 L1739.57 1212.22 L1740.15 1212.22 L1740.74 1212.22 L1741.32 1212.22 L1741.91 1212.22 L1742.5 1212.22 L1743.08 1212.22 L1743.67 1212.22 L1744.26 1212.22 L1744.84 1212.22 L1745.43 1212.22 L1746.02 1212.22 L1746.6 1212.22 L1747.19 1212.22 L1747.78 1212.22 L1748.36 1212.22 L1748.95 1212.22 L1749.53 1212.22 L1750.12 1212.22 L1750.71 1212.22 L1751.29 1212.22 L1751.88 1212.22 L1752.47 1212.22 L1753.05 1212.22 L1753.64 1212.22 L1754.23 1212.22 L1754.81 1212.22 L1755.4 1212.22 L1755.99 1212.22 L1756.57 1212.22 L1757.16 1212.22 L1757.74 1212.22 L1758.33 1212.22 L1758.92 1212.22 L1759.5 1212.22 L1760.09 1212.22 L1760.68 1212.22 L1761.26 1212.22 L1761.85 1212.22 L1762.44 1212.22 L1763.02 1212.22 L1763.61 1212.22 L1764.19 1212.22 L1764.78 1212.22 L1765.37 1212.22 L1765.95 1212.22 L1766.54 1212.22 L1767.13 1212.22 L1767.71 1212.22 L1768.3 1212.22 L1768.89 1212.22 L1769.47 1212.22 L1770.06 1212.22 L1770.65 1212.22 L1771.23 1212.22 L1771.82 1212.22 L1772.4 1212.22 L1772.99 1212.22 L1773.58 1212.22 L1774.16 1212.22 L1774.75 1212.22 L1775.34 1212.22 L1775.92 1212.22 L1776.51 1212.22 L1777.1 1212.22 L1777.68 1212.22 L1778.27 1212.22 L1778.86 1212.22 L1779.44 1212.22 L1780.03 1212.22 L1780.61 1212.22 L1781.2 1212.22 L1781.79 1212.22 L1782.37 1212.22 L1782.96 1212.22 L1783.55 1212.22 L1784.13 1212.22 L1784.72 1212.22 L1785.31 1212.22 L1785.89 1212.22 L1786.48 1212.22 L1787.06 1212.22 L1787.65 1212.22 L1788.24 1212.22 L1788.82 1212.22 L1789.41 1212.22 L1790 1212.22 L1790.58 1212.22 L1791.17 1212.22 L1791.76 1212.22 L1792.34 1212.22 L1792.93 1212.22 L1793.52 1212.22 L1794.1 1212.22 L1794.69 1212.22 L1795.27 1212.22 L1795.86 1212.22 L1796.45 1212.22 L1797.03 1212.22 L1797.62 1212.22 L1798.21 1212.22 L1798.79 1212.22 L1799.38 1212.22 L1799.97 1212.22 L1800.55 1212.22 L1801.14 1212.22 L1801.73 1212.22 L1802.31 1212.22 L1802.9 1212.22 L1803.48 1212.22 L1804.07 1212.22 L1804.66 1212.22 L1805.24 1212.22 L1805.83 1212.22 L1806.42 1212.22 L1807 1212.22 L1807.59 1212.22 L1808.18 1212.22 L1808.76 1212.22 L1809.35 1212.22 L1809.94 1212.22 L1810.52 1212.22 L1811.11 1212.22 L1811.69 1212.22 L1812.28 1212.22 L1812.87 1212.22 L1813.45 1212.22 L1814.04 1212.22 L1814.63 1212.22 L1815.21 1212.22 L1815.8 1212.22 L1816.39 1212.22 L1816.97 1212.22 L1817.56 1212.22 L1818.14 1212.22 L1818.73 1212.22 L1819.32 1212.22 L1819.9 1212.22 L1820.49 1212.22 L1821.08 1212.22 L1821.66 1212.22 L1822.25 1212.22 L1822.84 1212.22 L1823.42 1212.22 L1824.01 1212.22 L1824.6 1212.22 L1825.18 1212.22 L1825.77 1212.22 L1826.35 1212.22 L1826.94 1212.22 L1827.53 1212.22 L1828.11 1212.22 L1828.7 1212.22 L1829.29 1212.22 L1829.87 1212.22 L1830.46 1212.22 L1831.05 1212.22 L1831.63 1212.22 L1832.22 1212.22 L1832.81 1212.22 L1833.39 1212.22 L1833.98 1212.22 L1834.56 1212.22 L1835.15 1212.22 L1835.74 1212.22 L1836.32 1212.22 L1836.91 1212.22 L1837.5 1212.22 L1838.08 1212.22 L1838.67 1212.22 L1839.26 1212.22 L1839.84 1212.22 L1840.43 1212.22 L1841.01 1212.22 L1841.6 1212.22 L1842.19 1212.22 L1842.77 1212.22 L1843.36 1212.22 L1843.95 1212.22 L1844.53 1212.22 L1845.12 1212.22 L1845.71 1212.22 L1846.29 1212.22 L1846.88 1212.22 L1847.47 1212.22 L1848.05 1212.22 L1848.64 1212.22 L1849.22 1212.22 L1849.81 1212.22 L1850.4 1212.22 L1850.98 1212.22 L1851.57 1212.22 L1852.16 1212.22 L1852.74 1212.22 L1853.33 1212.22 L1853.92 1212.22 L1854.5 1212.22 L1855.09 1212.22 L1855.68 1212.22 L1856.26 1212.22 L1856.85 1212.22 L1857.43 1212.22 L1858.02 1212.22 L1858.61 1212.22 L1859.19 1212.22 L1859.78 1212.22 L1860.37 1212.22 L1860.95 1212.22 L1861.54 1212.22 L1862.13 1212.22 L1862.71 1212.22 L1863.3 1212.22 L1863.88 1212.22 L1864.47 1212.22 L1865.06 1212.22 L1865.64 1212.22 L1866.23 1212.22 L1866.82 1212.22 L1867.4 1212.22 L1867.99 1212.22 L1868.58 1212.22 L1869.16 1212.22 L1869.75 1212.22 L1870.34 1212.22 L1870.92 1212.22 L1871.51 1212.22 L1872.09 1212.22 L1872.68 1212.22 L1873.27 1212.22 L1873.85 1212.22 L1874.44 1212.22 L1875.03 1212.22 L1875.61 1212.22 L1876.2 1212.22 L1876.79 1212.22 L1877.37 1212.22 L1877.96 1212.22 L1878.55 1212.22 L1879.13 1212.22 L1879.72 1212.22 L1880.3 1212.22 L1880.89 1212.22 L1881.48 1212.22 L1882.06 1212.22 L1882.65 1212.22 L1883.24 1212.22 L1883.82 1212.22 L1884.41 1212.22 L1885 1212.22 L1885.58 1212.22 L1886.17 1212.22 L1886.76 1212.22 L1887.34 1212.22 L1887.93 1212.22 L1888.51 1212.22 L1889.1 1212.22 L1889.69 1212.22 L1890.27 1212.22 L1890.86 1212.22 L1891.45 1212.22 L1892.03 1212.22 L1892.62 1212.22 L1893.21 1212.22 L1893.79 1212.22 L1894.38 1212.22 L1894.96 1212.22 L1895.55 1212.22 L1896.14 1212.22 L1896.72 1212.22 L1897.31 1212.22 L1897.9 1212.22 L1898.48 1212.22 L1899.07 1212.22 L1899.66 1212.22 L1900.24 1212.22 L1900.83 1212.22 L1901.42 1212.22 L1902 1212.22 L1902.59 1212.22 L1903.17 1212.22 L1903.76 1212.22 L1904.35 1212.22 L1904.93 1212.22 L1905.52 1212.22 L1906.11 1212.22 L1906.69 1212.22 L1907.28 1212.22 L1907.87 1212.22 L1908.45 1212.22 L1909.04 1212.22 L1909.63 1212.22 L1910.21 1212.22 L1910.8 1212.22 L1911.38 1212.22 L1911.97 1212.22 L1912.56 1212.22 L1913.14 1212.22 L1913.73 1212.22 L1914.32 1212.22 L1914.9 1212.22 L1915.49 1212.22 L1916.08 1212.22 L1916.66 1212.22 L1917.25 1212.22 L1917.83 1212.22 L1918.42 1212.22 L1919.01 1212.22 L1919.59 1212.22 L1920.18 1212.22 L1920.77 1212.22 L1921.35 1212.22 L1921.94 1212.22 L1922.53 1212.22 L1923.11 1212.22 L1923.7 1212.22 L1924.29 1212.22 L1924.87 1212.22 L1925.46 1212.22 L1926.04 1212.22 L1926.63 1212.22 L1927.22 1212.22 L1927.8 1212.22 L1928.39 1212.22 L1928.98 1212.22 L1929.56 1212.22 L1930.15 1212.22 L1930.74 1212.22 L1931.32 1212.22 L1931.91 1212.22 L1932.5 1212.22 L1933.08 1212.22 L1933.67 1212.22 L1934.25 1212.22 L1934.84 1212.22 L1935.43 1212.22 L1936.01 1212.22 L1936.6 1212.22 L1937.19 1212.22 L1937.77 1212.22 L1938.36 1212.22 L1938.95 1212.22 L1939.53 1212.22 L1940.12 1212.22 L1940.71 1212.22 L1941.29 1212.22 L1941.88 1212.22 L1942.46 1212.22 L1943.05 1212.22 L1943.64 1212.22 L1944.22 1212.22 L1944.81 1212.22 L1945.4 1212.22 L1945.98 1212.22 L1946.57 1212.22 L1947.16 1212.22 L1947.74 1212.22 L1948.33 1212.22 L1948.91 1212.22 L1949.5 1212.22 L1950.09 1212.22 L1950.67 1212.22 L1951.26 1212.22 L1951.85 1212.22 L1952.43 1212.22 L1953.02 1212.22 L1953.61 1212.22 L1954.19 1212.22 L1954.78 1212.22 L1955.37 1212.22 L1955.95 1212.22 L1956.54 1212.22 L1957.12 1212.22 L1957.71 1212.22 L1958.3 1212.22 L1958.88 1212.22 L1959.47 1212.22 L1960.06 1212.22 L1960.64 1212.22 L1961.23 1212.22 L1961.82 1212.22 L1962.4 1212.22 L1962.99 1212.22 L1963.58 1212.22 L1964.16 1212.22 L1964.75 1212.22 L1965.33 1212.22 L1965.92 1212.22 L1966.51 1212.22 L1967.09 1212.22 L1967.68 1212.22 L1968.27 1212.22 L1968.85 1212.22 L1969.44 1212.22 L1970.03 1212.22 L1970.61 1212.22 L1971.2 1212.22 L1971.78 1212.22 L1972.37 1212.22 L1972.96 1212.22 L1973.54 1212.22 L1974.13 1212.22 L1974.72 1212.22 L1975.3 1212.22 L1975.89 1212.22 L1976.48 1212.22 L1977.06 1212.22 L1977.65 1212.22 L1978.24 1212.22 L1978.82 1212.22 L1979.41 1212.22 L1979.99 1212.22 L1980.58 1212.22 L1981.17 1212.22 L1981.75 1212.22 L1982.34 1212.22 L1982.93 1212.22 L1983.51 1212.22 L1984.1 1212.22 L1984.69 1212.22 L1985.27 1212.22 L1985.86 1212.22 L1986.45 1212.22 L1987.03 1212.22 L1987.62 1212.22 L1988.2 1212.22 L1988.79 1212.22 L1989.38 1212.22 L1989.96 1212.22 L1990.55 1212.22 L1991.14 1212.22 L1991.72 1212.22 L1992.31 1212.22 L1992.9 1212.22 L1993.48 1212.22 L1994.07 1212.22 L1994.65 1212.22 L1995.24 1212.22 L1995.83 1212.22 L1996.41 1212.22 L1997 1212.22 L1997.59 1212.22 L1998.17 1212.22 L1998.76 1212.22 L1999.35 1212.22 L1999.93 1212.22 L2000.52 1212.22 L2001.11 1212.22 L2001.69 1212.22 L2002.28 1212.22 L2002.86 1212.22 L2003.45 1212.22 L2004.04 1212.22 L2004.62 1212.22 L2005.21 1212.22 L2005.8 1212.22 L2006.38 1212.22 L2006.97 1212.22 L2007.56 1212.22 L2008.14 1212.22 L2008.73 1212.22 L2009.32 1212.22 L2009.9 1212.22 L2010.49 1212.22 L2011.07 1212.22 L2011.66 1212.22 L2012.25 1212.22 L2012.83 1212.22 L2013.42 1212.22 L2014.01 1212.22 L2014.59 1212.22 L2015.18 1212.22 L2015.77 1212.22 L2016.35 1212.22 L2016.94 1212.22 L2017.53 1212.22 L2018.11 1212.22 L2018.7 1212.22 L2019.28 1212.22 L2019.87 1212.22 L2020.46 1212.22 L2021.04 1212.22 L2021.63 1212.22 L2022.22 1212.22 L2022.8 1212.22 L2023.39 1212.22 L2023.98 1212.22 L2024.56 1212.22 L2025.15 1212.22 L2025.73 1212.22 L2026.32 1212.22 L2026.91 1212.22 L2027.49 1212.22 L2028.08 1212.22 L2028.67 1212.22 L2029.25 1212.22 L2029.84 1212.22 L2030.43 1212.22 L2031.01 1212.22 L2031.6 1212.22 L2032.19 1212.22 L2032.77 1212.22 L2033.36 1212.22 L2033.94 1212.22 L2034.53 1212.22 L2035.12 1212.22 L2035.7 1212.22 L2036.29 1212.22 L2036.88 1212.22 L2037.46 1212.22 L2038.05 1212.22 L2038.64 1212.22 L2039.22 1212.22 L2039.81 1212.22 L2040.4 1212.22 L2040.98 1212.22 L2041.57 1212.22 L2042.15 1212.22 L2042.74 1212.22 L2043.33 1212.22 L2043.91 1212.22 L2044.5 1212.22 L2045.09 1212.22 L2045.67 1212.22 L2046.26 1212.22 L2046.85 1212.22 L2047.43 1212.22 L2048.02 1212.22 L2048.6 1212.22 L2049.19 1212.22 L2049.78 1212.22 L2050.36 1212.22 L2050.95 1212.22 L2051.54 1212.22 L2052.12 1212.22 L2052.71 1212.22 L2053.3 1212.22 L2053.88 1212.22 L2054.47 1212.22 L2055.06 1212.22 L2055.64 1212.22 L2056.23 1212.22 L2056.81 1212.22 L2057.4 1212.22 L2057.99 1212.22 L2058.57 1212.22 L2059.16 1212.22 L2059.75 1212.22 L2060.33 1212.22 L2060.92 1212.22 L2061.51 1212.22 L2062.09 1212.22 L2062.68 1212.22 L2063.27 1212.22 L2063.85 1212.22 L2064.44 1212.22 L2065.02 1212.22 L2065.61 1212.22 L2066.2 1212.22 L2066.78 1212.22 L2067.37 1212.22 L2067.96 1212.22 L2068.54 1212.22 L2069.13 1212.22 L2069.72 1212.22 L2070.3 1212.22 L2070.89 1212.22 L2071.48 1212.22 L2072.06 1212.22 L2072.65 1212.22 L2073.23 1212.22 L2073.82 1212.22 L2074.41 1212.22 L2074.99 1212.22 L2075.58 1212.22 L2076.17 1212.22 L2076.75 1212.22 L2077.34 1212.22 L2077.93 1212.22 L2078.51 1212.22 L2079.1 1212.22 L2079.68 1212.22 L2080.27 1212.22 L2080.86 1212.22 L2081.44 1212.22 L2082.03 1212.22 L2082.62 1212.22 L2083.2 1212.22 L2083.79 1212.22 L2084.38 1212.22 L2084.96 1212.22 L2085.55 1212.22 L2086.14 1212.22 L2086.72 1212.22 L2087.31 1212.22 L2087.89 1212.22 L2088.48 1212.22 L2089.07 1212.22 L2089.65 1212.22 L2090.24 1212.22 L2090.83 1212.22 L2091.41 1212.22 L2092 1212.22 L2092.59 1212.22 L2093.17 1212.22 L2093.76 1212.22 L2094.35 1212.22 L2094.93 1212.22 L2095.52 1212.22 L2096.1 1212.22 L2096.69 1212.22 L2097.28 1212.22 L2097.86 1212.22 L2098.45 1212.22 L2099.04 1212.22 L2099.62 1212.22 L2100.21 1212.22 L2100.8 1212.22 L2101.38 1212.22 L2101.97 1212.22 L2102.55 1212.22 L2103.14 1212.22 L2103.73 1212.22 L2104.31 1212.22 L2104.9 1212.22 L2105.49 1212.22 L2106.07 1212.22 L2106.66 1212.22 L2107.25 1212.22 L2107.83 1212.22 L2108.42 1212.22 L2109.01 1212.22 L2109.59 1212.22 L2110.18 1212.22 L2110.76 1212.22 L2111.35 1212.22 L2111.94 1212.22 L2112.52 1212.22 L2113.11 1212.22 L2113.7 1212.22 L2114.28 1212.22 L2114.87 1212.22 L2115.46 1212.22 L2116.04 1212.22 L2116.63 1212.22 L2117.22 1212.22 L2117.8 1212.22 L2118.39 1212.22 L2118.97 1212.22 L2119.56 1212.22 L2120.15 1212.22 L2120.73 1212.22 L2121.32 1212.22 L2121.91 1212.22 L2122.49 1212.22 L2123.08 1212.22 L2123.67 1212.22 L2124.25 1212.22 L2124.84 1212.22 L2125.42 1212.22 L2126.01 1212.22 L2126.6 1212.22 L2127.18 1212.22 L2127.77 1212.22 L2128.36 1212.22 L2128.94 1212.22 L2129.53 1212.22 L2130.12 1212.22 L2130.7 1212.22 L2131.29 1212.22 L2131.88 1212.22 L2132.46 1212.22 L2133.05 1212.22 L2133.63 1212.22 L2134.22 1212.22 L2134.81 1212.22 L2135.39 1212.22 L2135.98 1212.22 L2136.57 1212.22 L2137.15 1212.22 L2137.74 1212.22 L2138.33 1212.22 L2138.91 1212.22 L2139.5 1212.22 L2140.09 1212.22 L2140.67 1212.22 L2141.26 1212.22 L2141.84 1212.22 L2142.43 1212.22 L2143.02 1212.22 L2143.6 1212.22 L2144.19 1212.22 L2144.78 1212.22 L2145.36 1212.22 L2145.95 1212.22 L2146.54 1212.22 L2147.12 1212.22 L2147.71 1212.22 L2148.3 1212.22 L2148.88 1212.22 L2149.47 1212.22 L2150.05 1212.22 L2150.64 1212.22 L2151.23 1212.22 L2151.81 1212.22 L2152.4 1212.22 L2152.99 1212.22 L2153.57 1212.22 L2154.16 1212.22 L2154.75 1212.22 L2155.33 1212.22 L2155.92 1212.22 L2156.5 1212.22 L2157.09 1212.22 L2157.68 1212.22 L2158.26 1212.22 L2158.26 1212 L2157.68 1212 L2157.09 1212 L2156.5 1212 L2155.92 1212 L2155.33 1212 L2154.75 1212 L2154.16 1212 L2153.57 1212 L2152.99 1212 L2152.4 1212 L2151.81 1212 L2151.23 1212 L2150.64 1212 L2150.05 1212 L2149.47 1212 L2148.88 1212 L2148.3 1212 L2147.71 1212 L2147.12 1212 L2146.54 1212 L2145.95 1212 L2145.36 1212 L2144.78 1212 L2144.19 1212 L2143.6 1212 L2143.02 1212 L2142.43 1212 L2141.84 1212 L2141.26 1212 L2140.67 1212 L2140.09 1212 L2139.5 1212 L2138.91 1212 L2138.33 1212 L2137.74 1212 L2137.15 1212 L2136.57 1212 L2135.98 1212 L2135.39 1212 L2134.81 1212 L2134.22 1212 L2133.63 1212 L2133.05 1212 L2132.46 1212 L2131.88 1212 L2131.29 1212 L2130.7 1212 L2130.12 1212 L2129.53 1212 L2128.94 1212 L2128.36 1212 L2127.77 1212 L2127.18 1212 L2126.6 1212 L2126.01 1212 L2125.42 1212 L2124.84 1212 L2124.25 1212 L2123.67 1212 L2123.08 1212 L2122.49 1212 L2121.91 1212 L2121.32 1212 L2120.73 1212 L2120.15 1212 L2119.56 1212 L2118.97 1212 L2118.39 1212 L2117.8 1212 L2117.22 1212 L2116.63 1212 L2116.04 1212 L2115.46 1212 L2114.87 1212 L2114.28 1212 L2113.7 1212 L2113.11 1212 L2112.52 1212 L2111.94 1212 L2111.35 1212 L2110.76 1212 L2110.18 1212 L2109.59 1212 L2109.01 1212 L2108.42 1212 L2107.83 1212 L2107.25 1212 L2106.66 1212 L2106.07 1212 L2105.49 1212 L2104.9 1212 L2104.31 1212 L2103.73 1212 L2103.14 1212 L2102.55 1212 L2101.97 1212 L2101.38 1212 L2100.8 1212 L2100.21 1212 L2099.62 1212 L2099.04 1212 L2098.45 1212 L2097.86 1212 L2097.28 1212 L2096.69 1212 L2096.1 1212 L2095.52 1212 L2094.93 1212 L2094.35 1212 L2093.76 1212 L2093.17 1212 L2092.59 1212 L2092 1212 L2091.41 1212 L2090.83 1212 L2090.24 1212 L2089.65 1212 L2089.07 1212 L2088.48 1212 L2087.89 1212 L2087.31 1212 L2086.72 1212 L2086.14 1212 L2085.55 1212 L2084.96 1212 L2084.38 1212 L2083.79 1212 L2083.2 1212 L2082.62 1212 L2082.03 1212 L2081.44 1212 L2080.86 1212 L2080.27 1212 L2079.68 1212 L2079.1 1212 L2078.51 1212 L2077.93 1212 L2077.34 1212 L2076.75 1212 L2076.17 1212 L2075.58 1212 L2074.99 1212 L2074.41 1212 L2073.82 1212 L2073.23 1212 L2072.65 1212 L2072.06 1212 L2071.48 1212 L2070.89 1212 L2070.3 1212 L2069.72 1212 L2069.13 1212 L2068.54 1212 L2067.96 1212 L2067.37 1212 L2066.78 1212 L2066.2 1212 L2065.61 1212 L2065.02 1212 L2064.44 1212 L2063.85 1212 L2063.27 1212 L2062.68 1212 L2062.09 1212 L2061.51 1212 L2060.92 1212 L2060.33 1212 L2059.75 1212 L2059.16 1212 L2058.57 1212 L2057.99 1212 L2057.4 1212 L2056.81 1212 L2056.23 1212 L2055.64 1212 L2055.06 1212 L2054.47 1212 L2053.88 1212 L2053.3 1212 L2052.71 1212 L2052.12 1212 L2051.54 1212 L2050.95 1212 L2050.36 1212 L2049.78 1212 L2049.19 1212 L2048.6 1212 L2048.02 1212 L2047.43 1212 L2046.85 1212 L2046.26 1212 L2045.67 1212 L2045.09 1212 L2044.5 1212 L2043.91 1212 L2043.33 1212 L2042.74 1212 L2042.15 1212 L2041.57 1212 L2040.98 1212 L2040.4 1212 L2039.81 1212 L2039.22 1212 L2038.64 1212 L2038.05 1212 L2037.46 1212 L2036.88 1212 L2036.29 1212 L2035.7 1212 L2035.12 1212 L2034.53 1212 L2033.94 1212 L2033.36 1212 L2032.77 1212 L2032.19 1212 L2031.6 1212 L2031.01 1212 L2030.43 1212 L2029.84 1212 L2029.25 1212 L2028.67 1212 L2028.08 1212 L2027.49 1212 L2026.91 1212 L2026.32 1212 L2025.73 1212 L2025.15 1212 L2024.56 1212 L2023.98 1212 L2023.39 1212 L2022.8 1212 L2022.22 1212 L2021.63 1212 L2021.04 1212 L2020.46 1212 L2019.87 1212 L2019.28 1212 L2018.7 1212 L2018.11 1212 L2017.53 1212 L2016.94 1212 L2016.35 1212 L2015.77 1212 L2015.18 1212 L2014.59 1212 L2014.01 1212 L2013.42 1212 L2012.83 1212 L2012.25 1212 L2011.66 1212 L2011.07 1212 L2010.49 1212 L2009.9 1212 L2009.32 1212 L2008.73 1212 L2008.14 1212 L2007.56 1212 L2006.97 1212 L2006.38 1212 L2005.8 1212 L2005.21 1212 L2004.62 1212 L2004.04 1212 L2003.45 1212 L2002.86 1212 L2002.28 1212 L2001.69 1212 L2001.11 1212 L2000.52 1212 L1999.93 1212 L1999.35 1212 L1998.76 1212 L1998.17 1212 L1997.59 1212 L1997 1212 L1996.41 1212 L1995.83 1212 L1995.24 1212 L1994.65 1212 L1994.07 1212 L1993.48 1212 L1992.9 1212 L1992.31 1212 L1991.72 1212 L1991.14 1212 L1990.55 1212 L1989.96 1212 L1989.38 1212 L1988.79 1212 L1988.2 1212 L1987.62 1212 L1987.03 1212 L1986.45 1212 L1985.86 1212 L1985.27 1212 L1984.69 1212 L1984.1 1212 L1983.51 1212 L1982.93 1212 L1982.34 1212 L1981.75 1212 L1981.17 1212 L1980.58 1212 L1979.99 1212 L1979.41 1212 L1978.82 1212 L1978.24 1212 L1977.65 1212 L1977.06 1212 L1976.48 1212 L1975.89 1212 L1975.3 1212 L1974.72 1212 L1974.13 1212 L1973.54 1212 L1972.96 1212 L1972.37 1212 L1971.78 1212 L1971.2 1212 L1970.61 1212 L1970.03 1212 L1969.44 1212 L1968.85 1212 L1968.27 1212 L1967.68 1212 L1967.09 1212 L1966.51 1212 L1965.92 1212 L1965.33 1212 L1964.75 1212 L1964.16 1212 L1963.58 1212 L1962.99 1212 L1962.4 1212 L1961.82 1212 L1961.23 1212 L1960.64 1212 L1960.06 1212 L1959.47 1212 L1958.88 1212 L1958.3 1212 L1957.71 1212 L1957.12 1212 L1956.54 1212 L1955.95 1212 L1955.37 1212 L1954.78 1212 L1954.19 1212 L1953.61 1212 L1953.02 1212 L1952.43 1212 L1951.85 1212 L1951.26 1212 L1950.67 1212 L1950.09 1212 L1949.5 1212 L1948.91 1212 L1948.33 1212 L1947.74 1212 L1947.16 1212 L1946.57 1212 L1945.98 1212 L1945.4 1212 L1944.81 1212 L1944.22 1212 L1943.64 1212 L1943.05 1212 L1942.46 1212 L1941.88 1212 L1941.29 1212 L1940.71 1212 L1940.12 1212 L1939.53 1212 L1938.95 1212 L1938.36 1212 L1937.77 1212 L1937.19 1212 L1936.6 1212 L1936.01 1212 L1935.43 1212 L1934.84 1212 L1934.25 1212 L1933.67 1212 L1933.08 1212 L1932.5 1212 L1931.91 1212 L1931.32 1212 L1930.74 1212 L1930.15 1212 L1929.56 1212 L1928.98 1212 L1928.39 1212 L1927.8 1212 L1927.22 1212 L1926.63 1212 L1926.04 1212 L1925.46 1212 L1924.87 1212 L1924.29 1212 L1923.7 1212 L1923.11 1212 L1922.53 1212 L1921.94 1212 L1921.35 1212 L1920.77 1212 L1920.18 1212 L1919.59 1212 L1919.01 1212 L1918.42 1212 L1917.83 1212 L1917.25 1212 L1916.66 1212 L1916.08 1212 L1915.49 1212 L1914.9 1212 L1914.32 1212 L1913.73 1212 L1913.14 1212 L1912.56 1212 L1911.97 1212 L1911.38 1212 L1910.8 1212 L1910.21 1212 L1909.63 1212 L1909.04 1212 L1908.45 1212 L1907.87 1212 L1907.28 1212 L1906.69 1212 L1906.11 1212 L1905.52 1212 L1904.93 1212 L1904.35 1212 L1903.76 1212 L1903.17 1212 L1902.59 1212 L1902 1212 L1901.42 1212 L1900.83 1212 L1900.24 1212 L1899.66 1212 L1899.07 1212 L1898.48 1212 L1897.9 1212 L1897.31 1212 L1896.72 1212 L1896.14 1212 L1895.55 1212 L1894.96 1212 L1894.38 1212 L1893.79 1212 L1893.21 1212 L1892.62 1212 L1892.03 1212 L1891.45 1212 L1890.86 1212 L1890.27 1212 L1889.69 1212 L1889.1 1212 L1888.51 1212 L1887.93 1212 L1887.34 1212 L1886.76 1212 L1886.17 1212 L1885.58 1212 L1885 1212 L1884.41 1212 L1883.82 1212 L1883.24 1212 L1882.65 1212 L1882.06 1212 L1881.48 1212 L1880.89 1212 L1880.3 1212 L1879.72 1212 L1879.13 1212 L1878.55 1212 L1877.96 1212 L1877.37 1212 L1876.79 1212 L1876.2 1212 L1875.61 1212 L1875.03 1212 L1874.44 1212 L1873.85 1212 L1873.27 1212 L1872.68 1212 L1872.09 1212 L1871.51 1212 L1870.92 1212 L1870.34 1212 L1869.75 1212 L1869.16 1212 L1868.58 1212 L1867.99 1212 L1867.4 1212 L1866.82 1212 L1866.23 1212 L1865.64 1212 L1865.06 1212 L1864.47 1212 L1863.88 1212 L1863.3 1212 L1862.71 1212 L1862.13 1212 L1861.54 1212 L1860.95 1212 L1860.37 1212 L1859.78 1212 L1859.19 1212 L1858.61 1212 L1858.02 1212 L1857.43 1212 L1856.85 1212 L1856.26 1212 L1855.68 1212 L1855.09 1212 L1854.5 1212 L1853.92 1212 L1853.33 1212 L1852.74 1212 L1852.16 1212 L1851.57 1212 L1850.98 1212 L1850.4 1212 L1849.81 1212 L1849.22 1212 L1848.64 1212 L1848.05 1212 L1847.47 1212 L1846.88 1212 L1846.29 1212 L1845.71 1212 L1845.12 1212 L1844.53 1212 L1843.95 1212 L1843.36 1212 L1842.77 1212 L1842.19 1212 L1841.6 1212 L1841.01 1212 L1840.43 1212 L1839.84 1212 L1839.26 1212 L1838.67 1212 L1838.08 1212 L1837.5 1212 L1836.91 1212 L1836.32 1212 L1835.74 1212 L1835.15 1212 L1834.56 1212 L1833.98 1212 L1833.39 1212 L1832.81 1212 L1832.22 1212 L1831.63 1212 L1831.05 1212 L1830.46 1212 L1829.87 1212 L1829.29 1212 L1828.7 1212 L1828.11 1212 L1827.53 1212 L1826.94 1212 L1826.35 1212 L1825.77 1212 L1825.18 1212 L1824.6 1212 L1824.01 1212 L1823.42 1212 L1822.84 1212 L1822.25 1212 L1821.66 1212 L1821.08 1212 L1820.49 1212 L1819.9 1212 L1819.32 1212 L1818.73 1212 L1818.14 1212 L1817.56 1212 L1816.97 1212 L1816.39 1212 L1815.8 1212 L1815.21 1212 L1814.63 1212 L1814.04 1212 L1813.45 1212 L1812.87 1212 L1812.28 1212 L1811.69 1212 L1811.11 1212 L1810.52 1212 L1809.94 1212 L1809.35 1212 L1808.76 1212 L1808.18 1212 L1807.59 1212 L1807 1212 L1806.42 1212 L1805.83 1212 L1805.24 1212 L1804.66 1212 L1804.07 1212 L1803.48 1212 L1802.9 1212 L1802.31 1212 L1801.73 1212 L1801.14 1212 L1800.55 1212 L1799.97 1212 L1799.38 1212 L1798.79 1212 L1798.21 1212 L1797.62 1212 L1797.03 1212 L1796.45 1212 L1795.86 1212 L1795.27 1212 L1794.69 1212 L1794.1 1212 L1793.52 1212 L1792.93 1212 L1792.34 1212 L1791.76 1212 L1791.17 1212 L1790.58 1212 L1790 1212 L1789.41 1212 L1788.82 1212 L1788.24 1212 L1787.65 1212 L1787.06 1212 L1786.48 1212 L1785.89 1212 L1785.31 1212 L1784.72 1212 L1784.13 1212 L1783.55 1212 L1782.96 1212 L1782.37 1212 L1781.79 1212 L1781.2 1212 L1780.61 1212 L1780.03 1212 L1779.44 1212 L1778.86 1212 L1778.27 1212 L1777.68 1212 L1777.1 1212 L1776.51 1212 L1775.92 1212 L1775.34 1212 L1774.75 1212 L1774.16 1212 L1773.58 1212 L1772.99 1212 L1772.4 1212 L1771.82 1212 L1771.23 1212 L1770.65 1212 L1770.06 1212 L1769.47 1212 L1768.89 1212 L1768.3 1212 L1767.71 1212 L1767.13 1212 L1766.54 1212 L1765.95 1212 L1765.37 1212 L1764.78 1212 L1764.19 1212 L1763.61 1212 L1763.02 1212 L1762.44 1212 L1761.85 1212 L1761.26 1212 L1760.68 1212 L1760.09 1212 L1759.5 1212 L1758.92 1212 L1758.33 1212 L1757.74 1212 L1757.16 1212 L1756.57 1212 L1755.99 1212 L1755.4 1212 L1754.81 1212 L1754.23 1212 L1753.64 1212 L1753.05 1212 L1752.47 1212 L1751.88 1212 L1751.29 1212 L1750.71 1212 L1750.12 1212 L1749.53 1212 L1748.95 1212 L1748.36 1212 L1747.78 1212 L1747.19 1212 L1746.6 1212 L1746.02 1212 L1745.43 1212 L1744.84 1212 L1744.26 1212 L1743.67 1212 L1743.08 1212 L1742.5 1212 L1741.91 1212 L1741.32 1212 L1740.74 1212 L1740.15 1212 L1739.57 1212 L1738.98 1212 L1738.39 1212 L1737.81 1212 L1737.22 1212 L1736.63 1212 L1736.05 1212 L1735.46 1212 L1734.87 1212 L1734.29 1212 L1733.7 1212 L1733.11 1212 L1732.53 1212 L1731.94 1212 L1731.36 1212 L1730.77 1212 L1730.18 1212 L1729.6 1212 L1729.01 1212 L1728.42 1212 L1727.84 1212 L1727.25 1212 L1726.66 1212 L1726.08 1212 L1725.49 1212 L1724.91 1212 L1724.32 1212 L1723.73 1212 L1723.15 1212 L1722.56 1212 L1721.97 1212 L1721.39 1212 L1720.8 1212 L1720.21 1212 L1719.63 1212 L1719.04 1212 L1718.45 1212 L1717.87 1212 L1717.28 1212 L1716.7 1212 L1716.11 1212 L1715.52 1212 L1714.94 1212 L1714.35 1212 L1713.76 1212 L1713.18 1212 L1712.59 1212 L1712 1212 L1711.42 1212 L1710.83 1212 L1710.24 1212 L1709.66 1212 L1709.07 1212 L1708.49 1212 L1707.9 1212 L1707.31 1212 L1706.73 1212 L1706.14 1212 L1705.55 1212 L1704.97 1212 L1704.38 1212 L1703.79 1212 L1703.21 1212 L1702.62 1212 L1702.04 1212 L1701.45 1212 L1700.86 1212 L1700.28 1212 L1699.69 1212 L1699.1 1212 L1698.52 1212 L1697.93 1212 L1697.34 1212 L1696.76 1212 L1696.17 1212 L1695.58 1212 L1695 1212 L1694.41 1212 L1693.83 1212 L1693.24 1212 L1692.65 1212 L1692.07 1212 L1691.48 1212 L1690.89 1212 L1690.31 1212 L1689.72 1212 L1689.13 1212 L1688.55 1212 L1687.96 1212 L1687.37 1212 L1686.79 1212 L1686.2 1212 L1685.62 1212 L1685.03 1212 L1684.44 1212 L1683.86 1212 L1683.27 1212 L1682.68 1212 L1682.1 1212 L1681.51 1212 L1680.92 1212 L1680.34 1212 L1679.75 1212 L1679.17 1212 L1678.58 1212 L1677.99 1212 L1677.41 1212 L1676.82 1212 L1676.23 1212 L1675.65 1212 L1675.06 1212 L1674.47 1212 L1673.89 1212 L1673.3 1212 L1672.71 1212 L1672.13 1212 L1671.54 1212 L1670.96 1212 L1670.37 1212 L1669.78 1212 L1669.2 1212 L1668.61 1212 L1668.02 1212 L1667.44 1212 L1666.85 1212 L1666.26 1212 L1665.68 1212 L1665.09 1212 L1664.5 1212 L1663.92 1212 L1663.33 1212 L1662.75 1212 L1662.16 1212 L1661.57 1212 L1660.99 1212 L1660.4 1212 L1659.81 1212 L1659.23 1212 L1658.64 1212 L1658.05 1212 L1657.47 1212 L1656.88 1212 L1656.29 1212 L1655.71 1212 L1655.12 1212 L1654.54 1212 L1653.95 1212 L1653.36 1212 L1652.78 1212 L1652.19 1212 L1651.6 1212 L1651.02 1212 L1650.43 1212 L1649.84 1212 L1649.26 1212 L1648.67 1212 L1648.09 1212 L1647.5 1212 L1646.91 1212 L1646.33 1212 L1645.74 1212 L1645.15 1212 L1644.57 1212 L1643.98 1212 L1643.39 1212 L1642.81 1212 L1642.22 1212 L1641.63 1212 L1641.05 1212 L1640.46 1212 L1639.88 1212 L1639.29 1212 L1638.7 1212 L1638.12 1212 L1637.53 1212 L1636.94 1212 L1636.36 1212 L1635.77 1212 L1635.18 1212 L1634.6 1212 L1634.01 1212 L1633.42 1212 L1632.84 1212 L1632.25 1212 L1631.67 1212 L1631.08 1212 L1630.49 1212 L1629.91 1212 L1629.32 1212 L1628.73 1212 L1628.15 1212 L1627.56 1212 L1626.97 1212 L1626.39 1212 L1625.8 1212 L1625.22 1212 L1624.63 1212 L1624.04 1212 L1623.46 1212 L1622.87 1212 L1622.28 1212 L1621.7 1212 L1621.11 1212 L1620.52 1212 L1619.94 1212 L1619.35 1212 L1618.76 1212 L1618.18 1212 L1617.59 1212 L1617.01 1212 L1616.42 1212 L1615.83 1212 L1615.25 1212 L1614.66 1212 L1614.07 1212 L1613.49 1212 L1612.9 1212 L1612.31 1212 L1611.73 1212 L1611.14 1212 L1610.55 1212 L1609.97 1212 L1609.38 1212 L1608.8 1212 L1608.21 1212 L1607.62 1212 L1607.04 1212 L1606.45 1212 L1605.86 1212 L1605.28 1212 L1604.69 1212 L1604.1 1212 L1603.52 1212 L1602.93 1212 L1602.34 1212 L1601.76 1212 L1601.17 1212 L1600.59 1212 L1600 1212 L1599.41 1212 L1598.83 1212 L1598.24 1212 L1597.65 1212 L1597.07 1212 L1596.48 1212 L1595.89 1212 L1595.31 1212 L1594.72 1212 L1594.14 1212 L1593.55 1212 L1592.96 1212 L1592.38 1212 L1591.79 1212 L1591.2 1212 L1590.62 1212 L1590.03 1212 L1589.44 1212 L1588.86 1212 L1588.27 1212 L1587.68 1212 L1587.1 1212 L1586.51 1212 L1585.93 1212 L1585.34 1212 L1584.75 1212 L1584.17 1212 L1583.58 1212 L1582.99 1212 L1582.41 1212 L1581.82 1212 L1581.23 1212 L1580.65 1212 L1580.06 1212 L1579.47 1212 L1578.89 1212 L1578.3 1212 L1577.72 1212 L1577.13 1212 L1576.54 1212 L1575.96 1212 L1575.37 1212 L1574.78 1212 L1574.2 1212 L1573.61 1212 L1573.02 1212 L1572.44 1212 L1571.85 1212 L1571.27 1212 L1570.68 1212 L1570.09 1212 L1569.51 1212 L1568.92 1212 L1568.33 1212 L1567.75 1212 L1567.16 1212 L1566.57 1212 L1565.99 1212 L1565.4 1212 L1564.81 1212 L1564.23 1212 L1563.64 1212 L1563.06 1212 L1562.47 1212 L1561.88 1212 L1561.3 1212 L1560.71 1212 L1560.12 1212 L1559.54 1212 L1558.95 1212 L1558.36 1212 L1557.78 1212 L1557.19 1212 L1556.6 1212 L1556.02 1212 L1555.43 1212 L1554.85 1212 L1554.26 1212 L1553.67 1212 L1553.09 1212 L1552.5 1212 L1551.91 1212 L1551.33 1212 L1550.74 1212 L1550.15 1212 L1549.57 1212 L1548.98 1212 L1548.4 1212 L1547.81 1212 L1547.22 1212 L1546.64 1212 L1546.05 1212 L1545.46 1212 L1544.88 1212 L1544.29 1212 L1543.7 1212 L1543.12 1212 L1542.53 1212 L1541.94 1212 L1541.36 1212 L1540.77 1212 L1540.19 1212 L1539.6 1212 L1539.01 1212 L1538.43 1212 L1537.84 1212 L1537.25 1212 L1536.67 1212 L1536.08 1212 L1535.49 1212 L1534.91 1212 L1534.32 1212 L1533.73 1212 L1533.15 1212 L1532.56 1212 L1531.98 1212 L1531.39 1212 L1530.8 1212 L1530.22 1212 L1529.63 1212 L1529.04 1212 L1528.46 1212 L1527.87 1212 L1527.28 1212 L1526.7 1212 L1526.11 1212 L1525.52 1212 L1524.94 1212 L1524.35 1212 L1523.77 1212 L1523.18 1212 L1522.59 1212 L1522.01 1212 L1521.42 1212 L1520.83 1212 L1520.25 1212 L1519.66 1212 L1519.07 1212 L1518.49 1212 L1517.9 1212 L1517.32 1212 L1516.73 1212 L1516.14 1212 L1515.56 1212 L1514.97 1212 L1514.38 1212 L1513.8 1212 L1513.21 1212 L1512.62 1212 L1512.04 1212 L1511.45 1212 L1510.86 1212 L1510.28 1212 L1509.69 1212 L1509.11 1212 L1508.52 1212 L1507.93 1212 L1507.35 1212 L1506.76 1212 L1506.17 1212 L1505.59 1212 L1505 1212 L1504.41 1212 L1503.83 1212 L1503.24 1212 L1502.65 1212 L1502.07 1212 L1501.48 1212 L1500.9 1212 L1500.31 1212 L1499.72 1212 L1499.14 1212 L1498.55 1212 L1497.96 1212 L1497.38 1212 L1496.79 1212 L1496.2 1212 L1495.62 1212 L1495.03 1212 L1494.45 1212 L1493.86 1212 L1493.27 1212 L1492.69 1212 L1492.1 1212 L1491.51 1212 L1490.93 1212 L1490.34 1212 L1489.75 1212 L1489.17 1212 L1488.58 1212 L1487.99 1212 L1487.41 1212 L1486.82 1212 L1486.24 1212 L1485.65 1212 L1485.06 1212 L1484.48 1212 L1483.89 1212 L1483.3 1212 L1482.72 1212 L1482.13 1212 L1481.54 1212 L1480.96 1212 L1480.37 1212 L1479.78 1212 L1479.2 1212 L1478.61 1212 L1478.03 1212 L1477.44 1212 L1476.85 1212 L1476.27 1212 L1475.68 1212 L1475.09 1212 L1474.51 1212 L1473.92 1212 L1473.33 1212 L1472.75 1212 L1472.16 1212 L1471.57 1212 L1470.99 1212 L1470.4 1212 L1469.82 1212 L1469.23 1212 L1468.64 1212 L1468.06 1212 L1467.47 1212 L1466.88 1212 L1466.3 1212 L1465.71 1212 L1465.12 1212 L1464.54 1212 L1463.95 1212 L1463.37 1212 L1462.78 1212 L1462.19 1212 L1461.61 1212 L1461.02 1212 L1460.43 1212 L1459.85 1212 L1459.26 1212 L1458.67 1212 L1458.09 1212 L1457.5 1212 L1456.91 1212 L1456.33 1212 L1455.74 1212 L1455.16 1212 L1454.57 1212 L1453.98 1212 L1453.4 1212 L1452.81 1212 L1452.22 1212 L1451.64 1212 L1451.05 1212 L1450.46 1212 L1449.88 1212 L1449.29 1212 L1448.7 1212 L1448.12 1212 L1447.53 1212 L1446.95 1212 L1446.36 1212 L1445.77 1212 L1445.19 1212 L1444.6 1212 L1444.01 1212 L1443.43 1212 L1442.84 1212 L1442.25 1212 L1441.67 1212 L1441.08 1212 L1440.5 1212 L1439.91 1212 L1439.32 1212 L1438.74 1212 L1438.15 1212 L1437.56 1212 L1436.98 1212 L1436.39 1212 L1435.8 1212 L1435.22 1212 L1434.63 1212 L1434.04 1212 L1433.46 1212 L1432.87 1212 L1432.29 1212 L1431.7 1212 L1431.11 1212 L1430.53 1212 L1429.94 1212 L1429.35 1212 L1428.77 1212 L1428.18 1212 L1427.59 1212 L1427.01 1212 L1426.42 1212 L1425.83 1212 L1425.25 1212 L1424.66 1212 L1424.08 1212 L1423.49 1212 L1422.9 1212 L1422.32 1212 L1421.73 1212 L1421.14 1212 L1420.56 1212 L1419.97 1212 L1419.38 1212 L1418.8 1212 L1418.21 1212 L1417.63 1212 L1417.04 1212 L1416.45 1212 L1415.87 1212 L1415.28 1212 L1414.69 1212 L1414.11 1212 L1413.52 1212 L1412.93 1212 L1412.35 1212 L1411.76 1212 L1411.17 1212 L1410.59 1212 L1410 1212 L1409.42 1212 L1408.83 1212 L1408.24 1212 L1407.66 1212 L1407.07 1212 L1406.48 1212 L1405.9 1212 L1405.31 1212 L1404.72 1212 L1404.14 1212 L1403.55 1212 L1402.96 1212 L1402.38 1212 L1401.79 1212 L1401.21 1212 L1400.62 1212 L1400.03 1212 L1399.45 1212 L1398.86 1212 L1398.27 1212 L1397.69 1212 L1397.1 1212 L1396.51 1212 L1395.93 1212 L1395.34 1212 L1394.75 1212 L1394.17 1212 L1393.58 1212 L1393 1212 L1392.41 1212 L1391.82 1212 L1391.24 1212 L1390.65 1212 L1390.06 1212 L1389.48 1212 L1388.89 1212 L1388.3 1212 L1387.72 1212 L1387.13 1212 L1386.55 1212 L1385.96 1212 L1385.37 1212 L1384.79 1212 L1384.2 1212 L1383.61 1212 L1383.03 1212 L1382.44 1212 L1381.85 1212 L1381.27 1212 L1380.68 1212 L1380.09 1212 L1379.51 1212 L1378.92 1212 L1378.34 1212 L1377.75 1212 L1377.16 1212 L1376.58 1212 L1375.99 1212 L1375.4 1212 L1374.82 1212 L1374.23 1212 L1373.64 1212 L1373.06 1212 L1372.47 1212 L1371.88 1212 L1371.3 1212 L1370.71 1212 L1370.13 1212 L1369.54 1212 L1368.95 1212 L1368.37 1212 L1367.78 1212 L1367.19 1212 L1366.61 1212 L1366.02 1212 L1365.43 1212 L1364.85 1212 L1364.26 1212 L1363.68 1212 L1363.09 1212 L1362.5 1212 L1361.92 1212 L1361.33 1212 L1360.74 1212 L1360.16 1212 L1359.57 1212 L1358.98 1212 L1358.4 1212 L1357.81 1212 L1357.22 1212 L1356.64 1212 L1356.05 1212 L1355.47 1212 L1354.88 1212 L1354.29 1212 L1353.71 1212 L1353.12 1212 L1352.53 1212 L1351.95 1212 L1351.36 1212 L1350.77 1212 L1350.19 1212 L1349.6 1212 L1349.01 1212 L1348.43 1212 L1347.84 1212 L1347.26 1212 L1346.67 1212 L1346.08 1212 L1345.5 1212 L1344.91 1212 L1344.32 1212 L1343.74 1212 L1343.15 1212 L1342.56 1212 L1341.98 1212 L1341.39 1212 L1340.8 1212 L1340.22 1212 L1339.63 1212 L1339.05 1212 L1338.46 1212 L1337.87 1212 L1337.29 1212 L1336.7 1212 L1336.11 1212 L1335.53 1212 L1334.94 1212 L1334.35 1212 L1333.77 1212 L1333.18 1212 L1332.6 1212 L1332.01 1212 L1331.42 1212 L1330.84 1212 L1330.25 1212 L1329.66 1212 L1329.08 1212 L1328.49 1212 L1327.9 1212 L1327.32 1212 L1326.73 1212 L1326.14 1212 L1325.56 1212 L1324.97 1212 L1324.39 1212 L1323.8 1212 L1323.21 1212 L1322.63 1212 L1322.04 1212 L1321.45 1212 L1320.87 1212 L1320.28 1212 L1319.69 1212 L1319.11 1212 L1318.52 1212 L1317.93 1212 L1317.35 1212 L1316.76 1212 L1316.18 1212 L1315.59 1212 L1315 1212 L1314.42 1212 L1313.83 1212 L1313.24 1212 L1312.66 1212 L1312.07 1212 L1311.48 1212 L1310.9 1212 L1310.31 1212 L1309.73 1212 L1309.14 1212 L1308.55 1212 L1307.97 1212 L1307.38 1212 L1306.79 1212 L1306.21 1212 L1305.62 1212 L1305.03 1212 L1304.45 1212 L1303.86 1212 L1303.27 1212 L1302.69 1212 L1302.1 1212 L1301.52 1212 L1300.93 1212 L1300.34 1212 L1299.76 1212 L1299.17 1212 L1298.58 1212 L1298 1212 L1297.41 1212 L1296.82 1212 L1296.24 1212 L1295.65 1212 L1295.06 1212 L1294.48 1212 L1293.89 1212 L1293.31 1212 L1292.72 1212 L1292.13 1212 L1291.55 1212 L1290.96 1212 L1290.37 1212 L1289.79 1212 L1289.2 1212 L1288.61 1212 L1288.03 1212 L1287.44 1212 L1286.86 1212 L1286.27 1212 L1285.68 1212 L1285.1 1212 L1284.51 1212 L1283.92 1212 L1283.34 1212 L1282.75 1212 L1282.16 1212 L1281.58 1212 L1280.99 1212 L1280.4 1212 L1279.82 1212 L1279.23 1212 L1278.65 1212 L1278.06 1212 L1277.47 1212 L1276.89 1212 L1276.3 1212 L1275.71 1212 L1275.13 1212 L1274.54 1212 L1273.95 1212 L1273.37 1212 L1272.78 1212 L1272.19 1212 L1271.61 1212 L1271.02 1212 L1270.44 1212 L1269.85 1212 L1269.26 1212 L1268.68 1212 L1268.09 1212 L1267.5 1212 L1266.92 1212 L1266.33 1212 L1265.74 1212 L1265.16 1212 L1264.57 1212 L1263.98 1212 L1263.4 1212 L1262.81 1212 L1262.23 1212 L1261.64 1212 L1261.05 1212 L1260.47 1212 L1259.88 1212 L1259.29 1212 L1258.71 1212 L1258.12 1212 L1257.53 1212 L1256.95 1212 L1256.36 1212 L1255.78 1212 L1255.19 1212 L1254.6 1212 L1254.02 1212 L1253.43 1212 L1252.84 1212 L1252.26 1212 L1251.67 1212 L1251.08 1212 L1250.5 1212 L1249.91 1212 L1249.32 1212 L1248.74 1212 L1248.15 1212 L1247.57 1212 L1246.98 1212 L1246.39 1212 L1245.81 1212 L1245.22 1212 L1244.63 1212 L1244.05 1212 L1243.46 1212 L1242.87 1212 L1242.29 1212 L1241.7 1212 L1241.11 1212 L1240.53 1212 L1239.94 1212 L1239.36 1212 L1238.77 1212 L1238.18 1212 L1237.6 1212 L1237.01 1212 L1236.42 1212 L1235.84 1212 L1235.25 1212 L1234.66 1212 L1234.08 1212 L1233.49 1212 L1232.91 1212 L1232.32 1212 L1231.73 1212 L1231.15 1212 L1230.56 1212 L1229.97 1212 L1229.39 1212 L1228.8 1212 L1228.21 1212 L1227.63 1212 L1227.04 1212 L1226.45 1212 L1225.87 1212 L1225.28 1212 L1224.7 1212 L1224.11 1212 L1223.52 1212 L1222.94 1212 L1222.35 1212 L1221.76 1212 L1221.18 1212 L1220.59 1212 L1220 1212 L1219.42 1212 L1218.83 1212 L1218.24 1212 L1217.66 1212 L1217.07 1212 L1216.49 1212 L1215.9 1212 L1215.31 1212 L1214.73 1212 L1214.14 1212 L1213.55 1212 L1212.97 1212 L1212.38 1212 L1211.79 1212 L1211.21 1212 L1210.62 1212 L1210.03 1212 L1209.45 1212 L1208.86 1212 L1208.28 1212 L1207.69 1212 L1207.1 1212 L1206.52 1212 L1205.93 1212 L1205.34 1212 L1204.76 1212 L1204.17 1212 L1203.58 1212 L1203 1212 L1202.41 1212 L1201.83 1212 L1201.24 1212 L1200.65 1212 L1200.07 1212 L1199.48 1212 L1198.89 1212 L1198.31 1212 L1197.72 1212 L1197.13 1212 L1196.55 1212 L1195.96 1212 L1195.37 1212 L1194.79 1212 L1194.2 1212 L1193.62 1212 L1193.03 1212 L1192.44 1212 L1191.86 1212 L1191.27 1212 L1190.68 1212 L1190.1 1212 L1189.51 1212 L1188.92 1212 L1188.34 1212 L1187.75 1212 L1187.16 1212 L1186.58 1212 L1185.99 1212 L1185.41 1212 L1184.82 1212 L1184.23 1212 L1183.65 1212 L1183.06 1212 L1182.47 1212 L1181.89 1212 L1181.3 1212 L1180.71 1212 L1180.13 1212 L1179.54 1212 L1178.96 1212 L1178.37 1212 L1177.78 1212 L1177.2 1212 L1176.61 1212 L1176.02 1212 L1175.44 1212 L1174.85 1212 L1174.26 1212 L1173.68 1212 L1173.09 1212 L1172.5 1212 L1171.92 1212 L1171.33 1212 L1170.75 1212 L1170.16 1212 L1169.57 1212 L1168.99 1212 L1168.4 1212 L1167.81 1212 L1167.23 1212 L1166.64 1212 L1166.05 1212 L1165.47 1212 L1164.88 1212 L1164.29 1212 L1163.71 1212 L1163.12 1212 L1162.54 1212 L1161.95 1212 L1161.36 1212 L1160.78 1212 L1160.19 1212 L1159.6 1212 L1159.02 1212 L1158.43 1212 L1157.84 1212 L1157.26 1212 L1156.67 1212 L1156.09 1212 L1155.5 1212 L1154.91 1212 L1154.33 1212 L1153.74 1212 L1153.15 1212 L1152.57 1212 L1151.98 1212 L1151.39 1212 L1150.81 1212 L1150.22 1212 L1149.63 1212 L1149.05 1212 L1148.46 1212 L1147.88 1212 L1147.29 1212 L1146.7 1212 L1146.12 1212 L1145.53 1212 L1144.94 1212 L1144.36 1212 L1143.77 1212 L1143.18 1212 L1142.6 1212 L1142.01 1212 L1141.42 1212 L1140.84 1212 L1140.25 1212 L1139.67 1212 L1139.08 1212 L1138.49 1212 L1137.91 1212 L1137.32 1212 L1136.73 1212 L1136.15 1212 L1135.56 1212 L1134.97 1212 L1134.39 1212 L1133.8 1212 L1133.21 1212 L1132.63 1212 L1132.04 1212 L1131.46 1212 L1130.87 1212 L1130.28 1212 L1129.7 1212 L1129.11 1212 L1128.52 1212 L1127.94 1212 L1127.35 1212 L1126.76 1212 L1126.18 1212 L1125.59 1212 L1125.01 1212 L1124.42 1212 L1123.83 1212 L1123.25 1212 L1122.66 1212 L1122.07 1212 L1121.49 1212 L1120.9 1212 L1120.31 1212 L1119.73 1212 L1119.14 1212 L1118.55 1212 L1117.97 1212 L1117.38 1212 L1116.8 1212 L1116.21 1212 L1115.62 1212 L1115.04 1212 L1114.45 1212 L1113.86 1212 L1113.28 1212 L1112.69 1212 L1112.1 1212 L1111.52 1212 L1110.93 1212 L1110.34 1212 L1109.76 1212 L1109.17 1212 L1108.59 1212 L1108 1212 L1107.41 1212 L1106.83 1212 L1106.24 1212 L1105.65 1212 L1105.07 1212 L1104.48 1212 L1103.89 1212 L1103.31 1212 L1102.72 1212 L1102.14 1212 L1101.55 1212 L1100.96 1212 L1100.38 1212 L1099.79 1212 L1099.2 1212 L1098.62 1212 L1098.03 1212 L1097.44 1212 L1096.86 1212 L1096.27 1212 L1095.68 1212 L1095.1 1212 L1094.51 1212 L1093.93 1212 L1093.34 1212 L1092.75 1212 L1092.17 1212 L1091.58 1212 L1090.99 1212 L1090.41 1212 L1089.82 1212 L1089.23 1212 L1088.65 1212 L1088.06 1212 L1087.47 1212 L1086.89 1212 L1086.3 1212 L1085.72 1212 L1085.13 1212 L1084.54 1212 L1083.96 1212 L1083.37 1212 L1082.78 1212 L1082.2 1212 L1081.61 1212 L1081.02 1212 L1080.44 1212 L1079.85 1212 L1079.26 1212 L1078.68 1212 L1078.09 1212 L1077.51 1212 L1076.92 1212 L1076.33 1212 L1075.75 1212 L1075.16 1212 L1074.57 1212 L1073.99 1212 L1073.4 1212 L1072.81 1212 L1072.23 1212 L1071.64 1212 L1071.06 1212 L1070.47 1212 L1069.88 1212 L1069.3 1212 L1068.71 1212 L1068.12 1212 L1067.54 1212 L1066.95 1212 L1066.36 1212 L1065.78 1212 L1065.19 1212 L1064.6 1212 L1064.02 1212 L1063.43 1212 L1062.85 1212 L1062.26 1212 L1061.67 1212 L1061.09 1212 L1060.5 1212 L1059.91 1212 L1059.33 1212 L1058.74 1212 L1058.15 1212 L1057.57 1212 L1056.98 1212 L1056.39 1212 L1055.81 1212 L1055.22 1212 L1054.64 1212 L1054.05 1212 L1053.46 1212 L1052.88 1212 L1052.29 1212 L1051.7 1212 L1051.12 1212 L1050.53 1212 L1049.94 1212 L1049.36 1212 L1048.77 1212 L1048.19 1212 L1047.6 1212 L1047.01 1212 L1046.43 1212 L1045.84 1212 L1045.25 1212 L1044.67 1212 L1044.08 1212 L1043.49 1212 L1042.91 1212 L1042.32 1212 L1041.73 1212 L1041.15 1212 L1040.56 1212 L1039.98 1212 L1039.39 1212 L1038.8 1212 L1038.22 1212 L1037.63 1212 L1037.04 1212 L1036.46 1212 L1035.87 1212 L1035.28 1212 L1034.7 1212 L1034.11 1212 L1033.52 1212 L1032.94 1212 L1032.35 1212 L1031.77 1212 L1031.18 1212 L1030.59 1212 L1030.01 1212 L1029.42 1212 L1028.83 1212 L1028.25 1212 L1027.66 1212 L1027.07 1212 L1026.49 1212 L1025.9 1212 L1025.32 1212 L1024.73 1212 L1024.14 1212 L1023.56 1212 L1022.97 1212 L1022.38 1212 L1021.8 1212 L1021.21 1212 L1020.62 1212 L1020.04 1212 L1019.45 1212 L1018.86 1212 L1018.28 1212 L1017.69 1212 L1017.11 1212 L1016.52 1212 L1015.93 1212 L1015.35 1212 L1014.76 1212 L1014.17 1212 L1013.59 1212 L1013 1212 L1012.41 1212 L1011.83 1212 L1011.24 1212 L1010.65 1212 L1010.07 1212 L1009.48 1212 L1008.9 1212 L1008.31 1212 L1007.72 1212 L1007.14 1212 L1006.55 1212 L1005.96 1212 L1005.38 1212 L1004.79 1212 L1004.2 1212 L1003.62 1212 L1003.03 1212 L1002.44 1212 L1001.86 1212 L1001.27 1212 L1000.69 1212 L1000.1 1212 L999.513 1212 L998.926 1212 L998.34 1212 L997.754 1212 L997.167 1212 L996.581 1212 L995.994 1212 L995.408 1212 L994.822 1212 L994.235 1212 L993.649 1212 L993.062 1212 L992.476 1212 L991.889 1212 L991.303 1212 L990.717 1212 L990.13 1212 L989.544 1212 L988.957 1212 L988.371 1212 L987.785 1212 L987.198 1212 L986.612 1212 L986.025 1212  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip232)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1212.11 986.612,1212.11 987.198,1212.11 987.785,1212.11 988.371,1212.11 988.957,1212.11 989.544,1212.11 990.13,1212.11 990.717,1212.11 991.303,1212.11 991.889,1212.11 992.476,1212.11 993.062,1212.11 993.649,1212.11 994.235,1212.11 994.822,1212.11 995.408,1212.11 995.994,1212.11 996.581,1212.11 997.167,1212.11 997.754,1212.11 998.34,1212.11 998.926,1212.11 999.513,1212.11 1000.1,1212.11 1000.69,1212.11 1001.27,1212.11 1001.86,1212.11 1002.44,1212.11 1003.03,1212.11 1003.62,1212.11 1004.2,1212.11 1004.79,1212.11 1005.38,1212.11 1005.96,1212.11 1006.55,1212.11 1007.14,1212.11 1007.72,1212.11 1008.31,1212.11 1008.9,1212.11 1009.48,1212.11 1010.07,1212.11 1010.65,1212.11 1011.24,1212.11 1011.83,1212.11 1012.41,1212.11 1013,1212.11 1013.59,1212.11 1014.17,1212.11 1014.76,1212.11 1015.35,1212.11 1015.93,1212.11 1016.52,1212.11 1017.11,1212.11 1017.69,1212.11 1018.28,1212.11 1018.86,1212.11 1019.45,1212.11 1020.04,1212.11 1020.62,1212.11 1021.21,1212.11 1021.8,1212.11 1022.38,1212.11 1022.97,1212.11 1023.56,1212.11 1024.14,1212.11 1024.73,1212.11 1025.32,1212.11 1025.9,1212.11 1026.49,1212.11 1027.07,1212.11 1027.66,1212.11 1028.25,1212.11 1028.83,1212.11 1029.42,1212.11 1030.01,1212.11 1030.59,1212.11 1031.18,1212.11 1031.77,1212.11 1032.35,1212.11 1032.94,1212.11 1033.52,1212.11 1034.11,1212.11 1034.7,1212.11 1035.28,1212.11 1035.87,1212.11 1036.46,1212.11 1037.04,1212.11 1037.63,1212.11 1038.22,1212.11 1038.8,1212.11 1039.39,1212.11 1039.98,1212.11 1040.56,1212.11 1041.15,1212.11 1041.73,1212.11 1042.32,1212.11 1042.91,1212.11 1043.49,1212.11 1044.08,1212.11 1044.67,1212.11 1045.25,1212.11 1045.84,1212.11 1046.43,1212.11 1047.01,1212.11 1047.6,1212.11 1048.19,1212.11 1048.77,1212.11 1049.36,1212.11 1049.94,1212.11 1050.53,1212.11 1051.12,1212.11 1051.7,1212.11 1052.29,1212.11 1052.88,1212.11 1053.46,1212.11 1054.05,1212.11 1054.64,1212.11 1055.22,1212.11 1055.81,1212.11 1056.39,1212.11 1056.98,1212.11 1057.57,1212.11 1058.15,1212.11 1058.74,1212.11 1059.33,1212.11 1059.91,1212.11 1060.5,1212.11 1061.09,1212.11 1061.67,1212.11 1062.26,1212.11 1062.85,1212.11 1063.43,1212.11 1064.02,1212.11 1064.6,1212.11 1065.19,1212.11 1065.78,1212.11 1066.36,1212.11 1066.95,1212.11 1067.54,1212.11 1068.12,1212.11 1068.71,1212.11 1069.3,1212.11 1069.88,1212.11 1070.47,1212.11 1071.06,1212.11 1071.64,1212.11 1072.23,1212.11 1072.81,1212.11 1073.4,1212.11 1073.99,1212.11 1074.57,1212.11 1075.16,1212.11 1075.75,1212.11 1076.33,1212.11 1076.92,1212.11 1077.51,1212.11 1078.09,1212.11 1078.68,1212.11 1079.26,1212.11 1079.85,1212.11 1080.44,1212.11 1081.02,1212.11 1081.61,1212.11 1082.2,1212.11 1082.78,1212.11 1083.37,1212.11 1083.96,1212.11 1084.54,1212.11 1085.13,1212.11 1085.72,1212.11 1086.3,1212.11 1086.89,1212.11 1087.47,1212.11 1088.06,1212.11 1088.65,1212.11 1089.23,1212.11 1089.82,1212.11 1090.41,1212.11 1090.99,1212.11 1091.58,1212.11 1092.17,1212.11 1092.75,1212.11 1093.34,1212.11 1093.93,1212.11 1094.51,1212.11 1095.1,1212.11 1095.68,1212.11 1096.27,1212.11 1096.86,1212.11 1097.44,1212.11 1098.03,1212.11 1098.62,1212.11 1099.2,1212.11 1099.79,1212.11 1100.38,1212.11 1100.96,1212.11 1101.55,1212.11 1102.14,1212.11 1102.72,1212.11 1103.31,1212.11 1103.89,1212.11 1104.48,1212.11 1105.07,1212.11 1105.65,1212.11 1106.24,1212.11 1106.83,1212.11 1107.41,1212.11 1108,1212.11 1108.59,1212.11 1109.17,1212.11 1109.76,1212.11 1110.34,1212.11 1110.93,1212.11 1111.52,1212.11 1112.1,1212.11 1112.69,1212.11 1113.28,1212.11 1113.86,1212.11 1114.45,1212.11 1115.04,1212.11 1115.62,1212.11 1116.21,1212.11 1116.8,1212.11 1117.38,1212.11 1117.97,1212.11 1118.55,1212.11 1119.14,1212.11 1119.73,1212.11 1120.31,1212.11 1120.9,1212.11 1121.49,1212.11 1122.07,1212.11 1122.66,1212.11 1123.25,1212.11 1123.83,1212.11 1124.42,1212.11 1125.01,1212.11 1125.59,1212.11 1126.18,1212.11 1126.76,1212.11 1127.35,1212.11 1127.94,1212.11 1128.52,1212.11 1129.11,1212.11 1129.7,1212.11 1130.28,1212.11 1130.87,1212.11 1131.46,1212.11 1132.04,1212.11 1132.63,1212.11 1133.21,1212.11 1133.8,1212.11 1134.39,1212.11 1134.97,1212.11 1135.56,1212.11 1136.15,1212.11 1136.73,1212.11 1137.32,1212.11 1137.91,1212.11 1138.49,1212.11 1139.08,1212.11 1139.67,1212.11 1140.25,1212.11 1140.84,1212.11 1141.42,1212.11 1142.01,1212.11 1142.6,1212.11 1143.18,1212.11 1143.77,1212.11 1144.36,1212.11 1144.94,1212.11 1145.53,1212.11 1146.12,1212.11 1146.7,1212.11 1147.29,1212.11 1147.88,1212.11 1148.46,1212.11 1149.05,1212.11 1149.63,1212.11 1150.22,1212.11 1150.81,1212.11 1151.39,1212.11 1151.98,1212.11 1152.57,1212.11 1153.15,1212.11 1153.74,1212.11 1154.33,1212.11 1154.91,1212.11 1155.5,1212.11 1156.09,1212.11 1156.67,1212.11 1157.26,1212.11 1157.84,1212.11 1158.43,1212.11 1159.02,1212.11 1159.6,1212.11 1160.19,1212.11 1160.78,1212.11 1161.36,1212.11 1161.95,1212.11 1162.54,1212.11 1163.12,1212.11 1163.71,1212.11 1164.29,1212.11 1164.88,1212.11 1165.47,1212.11 1166.05,1212.11 1166.64,1212.11 1167.23,1212.11 1167.81,1212.11 1168.4,1212.11 1168.99,1212.11 1169.57,1212.11 1170.16,1212.11 1170.75,1212.11 1171.33,1212.11 1171.92,1212.11 1172.5,1212.11 1173.09,1212.11 1173.68,1212.11 1174.26,1212.11 1174.85,1212.11 1175.44,1212.11 1176.02,1212.11 1176.61,1212.11 1177.2,1212.11 1177.78,1212.11 1178.37,1212.11 1178.96,1212.11 1179.54,1212.11 1180.13,1212.11 1180.71,1212.11 1181.3,1212.11 1181.89,1212.11 1182.47,1212.11 1183.06,1212.11 1183.65,1212.11 1184.23,1212.11 1184.82,1212.11 1185.41,1212.11 1185.99,1212.11 1186.58,1212.11 1187.16,1212.11 1187.75,1212.11 1188.34,1212.11 1188.92,1212.11 1189.51,1212.11 1190.1,1212.11 1190.68,1212.11 1191.27,1212.11 1191.86,1212.11 1192.44,1212.11 1193.03,1212.11 1193.62,1212.11 1194.2,1212.11 1194.79,1212.11 1195.37,1212.11 1195.96,1212.11 1196.55,1212.11 1197.13,1212.11 1197.72,1212.11 1198.31,1212.11 1198.89,1212.11 1199.48,1212.11 1200.07,1212.11 1200.65,1212.11 1201.24,1212.11 1201.83,1212.11 1202.41,1212.11 1203,1212.11 1203.58,1212.11 1204.17,1212.11 1204.76,1212.11 1205.34,1212.11 1205.93,1212.11 1206.52,1212.11 1207.1,1212.11 1207.69,1212.11 1208.28,1212.11 1208.86,1212.11 1209.45,1212.11 1210.03,1212.11 1210.62,1212.11 1211.21,1212.11 1211.79,1212.11 1212.38,1212.11 1212.97,1212.11 1213.55,1212.11 1214.14,1212.11 1214.73,1212.11 1215.31,1212.11 1215.9,1212.11 1216.49,1212.11 1217.07,1212.11 1217.66,1212.11 1218.24,1212.11 1218.83,1212.11 1219.42,1212.11 1220,1212.11 1220.59,1212.11 1221.18,1212.11 1221.76,1212.11 1222.35,1212.11 1222.94,1212.11 1223.52,1212.11 1224.11,1212.11 1224.7,1212.11 1225.28,1212.11 1225.87,1212.11 1226.45,1212.11 1227.04,1212.11 1227.63,1212.11 1228.21,1212.11 1228.8,1212.11 1229.39,1212.11 1229.97,1212.11 1230.56,1212.11 1231.15,1212.11 1231.73,1212.11 1232.32,1212.11 1232.91,1212.11 1233.49,1212.11 1234.08,1212.11 1234.66,1212.11 1235.25,1212.11 1235.84,1212.11 1236.42,1212.11 1237.01,1212.11 1237.6,1212.11 1238.18,1212.11 1238.77,1212.11 1239.36,1212.11 1239.94,1212.11 1240.53,1212.11 1241.11,1212.11 1241.7,1212.11 1242.29,1212.11 1242.87,1212.11 1243.46,1212.11 1244.05,1212.11 1244.63,1212.11 1245.22,1212.11 1245.81,1212.11 1246.39,1212.11 1246.98,1212.11 1247.57,1212.11 1248.15,1212.11 1248.74,1212.11 1249.32,1212.11 1249.91,1212.11 1250.5,1212.11 1251.08,1212.11 1251.67,1212.11 1252.26,1212.11 1252.84,1212.11 1253.43,1212.11 1254.02,1212.11 1254.6,1212.11 1255.19,1212.11 1255.78,1212.11 1256.36,1212.11 1256.95,1212.11 1257.53,1212.11 1258.12,1212.11 1258.71,1212.11 1259.29,1212.11 1259.88,1212.11 1260.47,1212.11 1261.05,1212.11 1261.64,1212.11 1262.23,1212.11 1262.81,1212.11 1263.4,1212.11 1263.98,1212.11 1264.57,1212.11 1265.16,1212.11 1265.74,1212.11 1266.33,1212.11 1266.92,1212.11 1267.5,1212.11 1268.09,1212.11 1268.68,1212.11 1269.26,1212.11 1269.85,1212.11 1270.44,1212.11 1271.02,1212.11 1271.61,1212.11 1272.19,1212.11 1272.78,1212.11 1273.37,1212.11 1273.95,1212.11 1274.54,1212.11 1275.13,1212.11 1275.71,1212.11 1276.3,1212.11 1276.89,1212.11 1277.47,1212.11 1278.06,1212.11 1278.65,1212.11 1279.23,1212.11 1279.82,1212.11 1280.4,1212.11 1280.99,1212.11 1281.58,1212.11 1282.16,1212.11 1282.75,1212.11 1283.34,1212.11 1283.92,1212.11 1284.51,1212.11 1285.1,1212.11 1285.68,1212.11 1286.27,1212.11 1286.86,1212.11 1287.44,1212.11 1288.03,1212.11 1288.61,1212.11 1289.2,1212.11 1289.79,1212.11 1290.37,1212.11 1290.96,1212.11 1291.55,1212.11 1292.13,1212.11 1292.72,1212.11 1293.31,1212.11 1293.89,1212.11 1294.48,1212.11 1295.06,1212.11 1295.65,1212.11 1296.24,1212.11 1296.82,1212.11 1297.41,1212.11 1298,1212.11 1298.58,1212.11 1299.17,1212.11 1299.76,1212.11 1300.34,1212.11 1300.93,1212.11 1301.52,1212.11 1302.1,1212.11 1302.69,1212.11 1303.27,1212.11 1303.86,1212.11 1304.45,1212.11 1305.03,1212.11 1305.62,1212.11 1306.21,1212.11 1306.79,1212.11 1307.38,1212.11 1307.97,1212.11 1308.55,1212.11 1309.14,1212.11 1309.73,1212.11 1310.31,1212.11 1310.9,1212.11 1311.48,1212.11 1312.07,1212.11 1312.66,1212.11 1313.24,1212.11 1313.83,1212.11 1314.42,1212.11 1315,1212.11 1315.59,1212.11 1316.18,1212.11 1316.76,1212.11 1317.35,1212.11 1317.93,1212.11 1318.52,1212.11 1319.11,1212.11 1319.69,1212.11 1320.28,1212.11 1320.87,1212.11 1321.45,1212.11 1322.04,1212.11 1322.63,1212.11 1323.21,1212.11 1323.8,1212.11 1324.39,1212.11 1324.97,1212.11 1325.56,1212.11 1326.14,1212.11 1326.73,1212.11 1327.32,1212.11 1327.9,1212.11 1328.49,1212.11 1329.08,1212.11 1329.66,1212.11 1330.25,1212.11 1330.84,1212.11 1331.42,1212.11 1332.01,1212.11 1332.6,1212.11 1333.18,1212.11 1333.77,1212.11 1334.35,1212.11 1334.94,1212.11 1335.53,1212.11 1336.11,1212.11 1336.7,1212.11 1337.29,1212.11 1337.87,1212.11 1338.46,1212.11 1339.05,1212.11 1339.63,1212.11 1340.22,1212.11 1340.8,1212.11 1341.39,1212.11 1341.98,1212.11 1342.56,1212.11 1343.15,1212.11 1343.74,1212.11 1344.32,1212.11 1344.91,1212.11 1345.5,1212.11 1346.08,1212.11 1346.67,1212.11 1347.26,1212.11 1347.84,1212.11 1348.43,1212.11 1349.01,1212.11 1349.6,1212.11 1350.19,1212.11 1350.77,1212.11 1351.36,1212.11 1351.95,1212.11 1352.53,1212.11 1353.12,1212.11 1353.71,1212.11 1354.29,1212.11 1354.88,1212.11 1355.47,1212.11 1356.05,1212.11 1356.64,1212.11 1357.22,1212.11 1357.81,1212.11 1358.4,1212.11 1358.98,1212.11 1359.57,1212.11 1360.16,1212.11 1360.74,1212.11 1361.33,1212.11 1361.92,1212.11 1362.5,1212.11 1363.09,1212.11 1363.68,1212.11 1364.26,1212.11 1364.85,1212.11 1365.43,1212.11 1366.02,1212.11 1366.61,1212.11 1367.19,1212.11 1367.78,1212.11 1368.37,1212.11 1368.95,1212.11 1369.54,1212.11 1370.13,1212.11 1370.71,1212.11 1371.3,1212.11 1371.88,1212.11 1372.47,1212.11 1373.06,1212.11 1373.64,1212.11 1374.23,1212.11 1374.82,1212.11 1375.4,1212.11 1375.99,1212.11 1376.58,1212.11 1377.16,1212.11 1377.75,1212.11 1378.34,1212.11 1378.92,1212.11 1379.51,1212.11 1380.09,1212.11 1380.68,1212.11 1381.27,1212.11 1381.85,1212.11 1382.44,1212.11 1383.03,1212.11 1383.61,1212.11 1384.2,1212.11 1384.79,1212.11 1385.37,1212.11 1385.96,1212.11 1386.55,1212.11 1387.13,1212.11 1387.72,1212.11 1388.3,1212.11 1388.89,1212.11 1389.48,1212.11 1390.06,1212.11 1390.65,1212.11 1391.24,1212.11 1391.82,1212.11 1392.41,1212.11 1393,1212.11 1393.58,1212.11 1394.17,1212.11 1394.75,1212.11 1395.34,1212.11 1395.93,1212.11 1396.51,1212.11 1397.1,1212.11 1397.69,1212.11 1398.27,1212.11 1398.86,1212.11 1399.45,1212.11 1400.03,1212.11 1400.62,1212.11 1401.21,1212.11 1401.79,1212.11 1402.38,1212.11 1402.96,1212.11 1403.55,1212.11 1404.14,1212.11 1404.72,1212.11 1405.31,1212.11 1405.9,1212.11 1406.48,1212.11 1407.07,1212.11 1407.66,1212.11 1408.24,1212.11 1408.83,1212.11 1409.42,1212.11 1410,1212.11 1410.59,1212.11 1411.17,1212.11 1411.76,1212.11 1412.35,1212.11 1412.93,1212.11 1413.52,1212.11 1414.11,1212.11 1414.69,1212.11 1415.28,1212.11 1415.87,1212.11 1416.45,1212.11 1417.04,1212.11 1417.63,1212.11 1418.21,1212.11 1418.8,1212.11 1419.38,1212.11 1419.97,1212.11 1420.56,1212.11 1421.14,1212.11 1421.73,1212.11 1422.32,1212.11 1422.9,1212.11 1423.49,1212.11 1424.08,1212.11 1424.66,1212.11 1425.25,1212.11 1425.83,1212.11 1426.42,1212.11 1427.01,1212.11 1427.59,1212.11 1428.18,1212.11 1428.77,1212.11 1429.35,1212.11 1429.94,1212.11 1430.53,1212.11 1431.11,1212.11 1431.7,1212.11 1432.29,1212.11 1432.87,1212.11 1433.46,1212.11 1434.04,1212.11 1434.63,1212.11 1435.22,1212.11 1435.8,1212.11 1436.39,1212.11 1436.98,1212.11 1437.56,1212.11 1438.15,1212.11 1438.74,1212.11 1439.32,1212.11 1439.91,1212.11 1440.5,1212.11 1441.08,1212.11 1441.67,1212.11 1442.25,1212.11 1442.84,1212.11 1443.43,1212.11 1444.01,1212.11 1444.6,1212.11 1445.19,1212.11 1445.77,1212.11 1446.36,1212.11 1446.95,1212.11 1447.53,1212.11 1448.12,1212.11 1448.7,1212.11 1449.29,1212.11 1449.88,1212.11 1450.46,1212.11 1451.05,1212.11 1451.64,1212.11 1452.22,1212.11 1452.81,1212.11 1453.4,1212.11 1453.98,1212.11 1454.57,1212.11 1455.16,1212.11 1455.74,1212.11 1456.33,1212.11 1456.91,1212.11 1457.5,1212.11 1458.09,1212.11 1458.67,1212.11 1459.26,1212.11 1459.85,1212.11 1460.43,1212.11 1461.02,1212.11 1461.61,1212.11 1462.19,1212.11 1462.78,1212.11 1463.37,1212.11 1463.95,1212.11 1464.54,1212.11 1465.12,1212.11 1465.71,1212.11 1466.3,1212.11 1466.88,1212.11 1467.47,1212.11 1468.06,1212.11 1468.64,1212.11 1469.23,1212.11 1469.82,1212.11 1470.4,1212.11 1470.99,1212.11 1471.57,1212.11 1472.16,1212.11 1472.75,1212.11 1473.33,1212.11 1473.92,1212.11 1474.51,1212.11 1475.09,1212.11 1475.68,1212.11 1476.27,1212.11 1476.85,1212.11 1477.44,1212.11 1478.03,1212.11 1478.61,1212.11 1479.2,1212.11 1479.78,1212.11 1480.37,1212.11 1480.96,1212.11 1481.54,1212.11 1482.13,1212.11 1482.72,1212.11 1483.3,1212.11 1483.89,1212.11 1484.48,1212.11 1485.06,1212.11 1485.65,1212.11 1486.24,1212.11 1486.82,1212.11 1487.41,1212.11 1487.99,1212.11 1488.58,1212.11 1489.17,1212.11 1489.75,1212.11 1490.34,1212.11 1490.93,1212.11 1491.51,1212.11 1492.1,1212.11 1492.69,1212.11 1493.27,1212.11 1493.86,1212.11 1494.45,1212.11 1495.03,1212.11 1495.62,1212.11 1496.2,1212.11 1496.79,1212.11 1497.38,1212.11 1497.96,1212.11 1498.55,1212.11 1499.14,1212.11 1499.72,1212.11 1500.31,1212.11 1500.9,1212.11 1501.48,1212.11 1502.07,1212.11 1502.65,1212.11 1503.24,1212.11 1503.83,1212.11 1504.41,1212.11 1505,1212.11 1505.59,1212.11 1506.17,1212.11 1506.76,1212.11 1507.35,1212.11 1507.93,1212.11 1508.52,1212.11 1509.11,1212.11 1509.69,1212.11 1510.28,1212.11 1510.86,1212.11 1511.45,1212.11 1512.04,1212.11 1512.62,1212.11 1513.21,1212.11 1513.8,1212.11 1514.38,1212.11 1514.97,1212.11 1515.56,1212.11 1516.14,1212.11 1516.73,1212.11 1517.32,1212.11 1517.9,1212.11 1518.49,1212.11 1519.07,1212.11 1519.66,1212.11 1520.25,1212.11 1520.83,1212.11 1521.42,1212.11 1522.01,1212.11 1522.59,1212.11 1523.18,1212.11 1523.77,1212.11 1524.35,1212.11 1524.94,1212.11 1525.52,1212.11 1526.11,1212.11 1526.7,1212.11 1527.28,1212.11 1527.87,1212.11 1528.46,1212.11 1529.04,1212.11 1529.63,1212.11 1530.22,1212.11 1530.8,1212.11 1531.39,1212.11 1531.98,1212.11 1532.56,1212.11 1533.15,1212.11 1533.73,1212.11 1534.32,1212.11 1534.91,1212.11 1535.49,1212.11 1536.08,1212.11 1536.67,1212.11 1537.25,1212.11 1537.84,1212.11 1538.43,1212.11 1539.01,1212.11 1539.6,1212.11 1540.19,1212.11 1540.77,1212.11 1541.36,1212.11 1541.94,1212.11 1542.53,1212.11 1543.12,1212.11 1543.7,1212.11 1544.29,1212.11 1544.88,1212.11 1545.46,1212.11 1546.05,1212.11 1546.64,1212.11 1547.22,1212.11 1547.81,1212.11 1548.4,1212.11 1548.98,1212.11 1549.57,1212.11 1550.15,1212.11 1550.74,1212.11 1551.33,1212.11 1551.91,1212.11 1552.5,1212.11 1553.09,1212.11 1553.67,1212.11 1554.26,1212.11 1554.85,1212.11 1555.43,1212.11 1556.02,1212.11 1556.6,1212.11 1557.19,1212.11 1557.78,1212.11 1558.36,1212.11 1558.95,1212.11 1559.54,1212.11 1560.12,1212.11 1560.71,1212.11 1561.3,1212.11 1561.88,1212.11 1562.47,1212.11 1563.06,1212.11 1563.64,1212.11 1564.23,1212.11 1564.81,1212.11 1565.4,1212.11 1565.99,1212.11 1566.57,1212.11 1567.16,1212.11 1567.75,1212.11 1568.33,1212.11 1568.92,1212.11 1569.51,1212.11 1570.09,1212.11 1570.68,1212.11 1571.27,1212.11 1571.85,1212.11 1572.44,1212.11 1573.02,1212.11 1573.61,1212.11 1574.2,1212.11 1574.78,1212.11 1575.37,1212.11 1575.96,1212.11 1576.54,1212.11 1577.13,1212.11 1577.72,1212.11 1578.3,1212.11 1578.89,1212.11 1579.47,1212.11 1580.06,1212.11 1580.65,1212.11 1581.23,1212.11 1581.82,1212.11 1582.41,1212.11 1582.99,1212.11 1583.58,1212.11 1584.17,1212.11 1584.75,1212.11 1585.34,1212.11 1585.93,1212.11 1586.51,1212.11 1587.1,1212.11 1587.68,1212.11 1588.27,1212.11 1588.86,1212.11 1589.44,1212.11 1590.03,1212.11 1590.62,1212.11 1591.2,1212.11 1591.79,1212.11 1592.38,1212.11 1592.96,1212.11 1593.55,1212.11 1594.14,1212.11 1594.72,1212.11 1595.31,1212.11 1595.89,1212.11 1596.48,1212.11 1597.07,1212.11 1597.65,1212.11 1598.24,1212.11 1598.83,1212.11 1599.41,1212.11 1600,1212.11 1600.59,1212.11 1601.17,1212.11 1601.76,1212.11 1602.34,1212.11 1602.93,1212.11 1603.52,1212.11 1604.1,1212.11 1604.69,1212.11 1605.28,1212.11 1605.86,1212.11 1606.45,1212.11 1607.04,1212.11 1607.62,1212.11 1608.21,1212.11 1608.8,1212.11 1609.38,1212.11 1609.97,1212.11 1610.55,1212.11 1611.14,1212.11 1611.73,1212.11 1612.31,1212.11 1612.9,1212.11 1613.49,1212.11 1614.07,1212.11 1614.66,1212.11 1615.25,1212.11 1615.83,1212.11 1616.42,1212.11 1617.01,1212.11 1617.59,1212.11 1618.18,1212.11 1618.76,1212.11 1619.35,1212.11 1619.94,1212.11 1620.52,1212.11 1621.11,1212.11 1621.7,1212.11 1622.28,1212.11 1622.87,1212.11 1623.46,1212.11 1624.04,1212.11 1624.63,1212.11 1625.22,1212.11 1625.8,1212.11 1626.39,1212.11 1626.97,1212.11 1627.56,1212.11 1628.15,1212.11 1628.73,1212.11 1629.32,1212.11 1629.91,1212.11 1630.49,1212.11 1631.08,1212.11 1631.67,1212.11 1632.25,1212.11 1632.84,1212.11 1633.42,1212.11 1634.01,1212.11 1634.6,1212.11 1635.18,1212.11 1635.77,1212.11 1636.36,1212.11 1636.94,1212.11 1637.53,1212.11 1638.12,1212.11 1638.7,1212.11 1639.29,1212.11 1639.88,1212.11 1640.46,1212.11 1641.05,1212.11 1641.63,1212.11 1642.22,1212.11 1642.81,1212.11 1643.39,1212.11 1643.98,1212.11 1644.57,1212.11 1645.15,1212.11 1645.74,1212.11 1646.33,1212.11 1646.91,1212.11 1647.5,1212.11 1648.09,1212.11 1648.67,1212.11 1649.26,1212.11 1649.84,1212.11 1650.43,1212.11 1651.02,1212.11 1651.6,1212.11 1652.19,1212.11 1652.78,1212.11 1653.36,1212.11 1653.95,1212.11 1654.54,1212.11 1655.12,1212.11 1655.71,1212.11 1656.29,1212.11 1656.88,1212.11 1657.47,1212.11 1658.05,1212.11 1658.64,1212.11 1659.23,1212.11 1659.81,1212.11 1660.4,1212.11 1660.99,1212.11 1661.57,1212.11 1662.16,1212.11 1662.75,1212.11 1663.33,1212.11 1663.92,1212.11 1664.5,1212.11 1665.09,1212.11 1665.68,1212.11 1666.26,1212.11 1666.85,1212.11 1667.44,1212.11 1668.02,1212.11 1668.61,1212.11 1669.2,1212.11 1669.78,1212.11 1670.37,1212.11 1670.96,1212.11 1671.54,1212.11 1672.13,1212.11 1672.71,1212.11 1673.3,1212.11 1673.89,1212.11 1674.47,1212.11 1675.06,1212.11 1675.65,1212.11 1676.23,1212.11 1676.82,1212.11 1677.41,1212.11 1677.99,1212.11 1678.58,1212.11 1679.17,1212.11 1679.75,1212.11 1680.34,1212.11 1680.92,1212.11 1681.51,1212.11 1682.1,1212.11 1682.68,1212.11 1683.27,1212.11 1683.86,1212.11 1684.44,1212.11 1685.03,1212.11 1685.62,1212.11 1686.2,1212.11 1686.79,1212.11 1687.37,1212.11 1687.96,1212.11 1688.55,1212.11 1689.13,1212.11 1689.72,1212.11 1690.31,1212.11 1690.89,1212.11 1691.48,1212.11 1692.07,1212.11 1692.65,1212.11 1693.24,1212.11 1693.83,1212.11 1694.41,1212.11 1695,1212.11 1695.58,1212.11 1696.17,1212.11 1696.76,1212.11 1697.34,1212.11 1697.93,1212.11 1698.52,1212.11 1699.1,1212.11 1699.69,1212.11 1700.28,1212.11 1700.86,1212.11 1701.45,1212.11 1702.04,1212.11 1702.62,1212.11 1703.21,1212.11 1703.79,1212.11 1704.38,1212.11 1704.97,1212.11 1705.55,1212.11 1706.14,1212.11 1706.73,1212.11 1707.31,1212.11 1707.9,1212.11 1708.49,1212.11 1709.07,1212.11 1709.66,1212.11 1710.24,1212.11 1710.83,1212.11 1711.42,1212.11 1712,1212.11 1712.59,1212.11 1713.18,1212.11 1713.76,1212.11 1714.35,1212.11 1714.94,1212.11 1715.52,1212.11 1716.11,1212.11 1716.7,1212.11 1717.28,1212.11 1717.87,1212.11 1718.45,1212.11 1719.04,1212.11 1719.63,1212.11 1720.21,1212.11 1720.8,1212.11 1721.39,1212.11 1721.97,1212.11 1722.56,1212.11 1723.15,1212.11 1723.73,1212.11 1724.32,1212.11 1724.91,1212.11 1725.49,1212.11 1726.08,1212.11 1726.66,1212.11 1727.25,1212.11 1727.84,1212.11 1728.42,1212.11 1729.01,1212.11 1729.6,1212.11 1730.18,1212.11 1730.77,1212.11 1731.36,1212.11 1731.94,1212.11 1732.53,1212.11 1733.11,1212.11 1733.7,1212.11 1734.29,1212.11 1734.87,1212.11 1735.46,1212.11 1736.05,1212.11 1736.63,1212.11 1737.22,1212.11 1737.81,1212.11 1738.39,1212.11 1738.98,1212.11 1739.57,1212.11 1740.15,1212.11 1740.74,1212.11 1741.32,1212.11 1741.91,1212.11 1742.5,1212.11 1743.08,1212.11 1743.67,1212.11 1744.26,1212.11 1744.84,1212.11 1745.43,1212.11 1746.02,1212.11 1746.6,1212.11 1747.19,1212.11 1747.78,1212.11 1748.36,1212.11 1748.95,1212.11 1749.53,1212.11 1750.12,1212.11 1750.71,1212.11 1751.29,1212.11 1751.88,1212.11 1752.47,1212.11 1753.05,1212.11 1753.64,1212.11 1754.23,1212.11 1754.81,1212.11 1755.4,1212.11 1755.99,1212.11 1756.57,1212.11 1757.16,1212.11 1757.74,1212.11 1758.33,1212.11 1758.92,1212.11 1759.5,1212.11 1760.09,1212.11 1760.68,1212.11 1761.26,1212.11 1761.85,1212.11 1762.44,1212.11 1763.02,1212.11 1763.61,1212.11 1764.19,1212.11 1764.78,1212.11 1765.37,1212.11 1765.95,1212.11 1766.54,1212.11 1767.13,1212.11 1767.71,1212.11 1768.3,1212.11 1768.89,1212.11 1769.47,1212.11 1770.06,1212.11 1770.65,1212.11 1771.23,1212.11 1771.82,1212.11 1772.4,1212.11 1772.99,1212.11 1773.58,1212.11 1774.16,1212.11 1774.75,1212.11 1775.34,1212.11 1775.92,1212.11 1776.51,1212.11 1777.1,1212.11 1777.68,1212.11 1778.27,1212.11 1778.86,1212.11 1779.44,1212.11 1780.03,1212.11 1780.61,1212.11 1781.2,1212.11 1781.79,1212.11 1782.37,1212.11 1782.96,1212.11 1783.55,1212.11 1784.13,1212.11 1784.72,1212.11 1785.31,1212.11 1785.89,1212.11 1786.48,1212.11 1787.06,1212.11 1787.65,1212.11 1788.24,1212.11 1788.82,1212.11 1789.41,1212.11 1790,1212.11 1790.58,1212.11 1791.17,1212.11 1791.76,1212.11 1792.34,1212.11 1792.93,1212.11 1793.52,1212.11 1794.1,1212.11 1794.69,1212.11 1795.27,1212.11 1795.86,1212.11 1796.45,1212.11 1797.03,1212.11 1797.62,1212.11 1798.21,1212.11 1798.79,1212.11 1799.38,1212.11 1799.97,1212.11 1800.55,1212.11 1801.14,1212.11 1801.73,1212.11 1802.31,1212.11 1802.9,1212.11 1803.48,1212.11 1804.07,1212.11 1804.66,1212.11 1805.24,1212.11 1805.83,1212.11 1806.42,1212.11 1807,1212.11 1807.59,1212.11 1808.18,1212.11 1808.76,1212.11 1809.35,1212.11 1809.94,1212.11 1810.52,1212.11 1811.11,1212.11 1811.69,1212.11 1812.28,1212.11 1812.87,1212.11 1813.45,1212.11 1814.04,1212.11 1814.63,1212.11 1815.21,1212.11 1815.8,1212.11 1816.39,1212.11 1816.97,1212.11 1817.56,1212.11 1818.14,1212.11 1818.73,1212.11 1819.32,1212.11 1819.9,1212.11 1820.49,1212.11 1821.08,1212.11 1821.66,1212.11 1822.25,1212.11 1822.84,1212.11 1823.42,1212.11 1824.01,1212.11 1824.6,1212.11 1825.18,1212.11 1825.77,1212.11 1826.35,1212.11 1826.94,1212.11 1827.53,1212.11 1828.11,1212.11 1828.7,1212.11 1829.29,1212.11 1829.87,1212.11 1830.46,1212.11 1831.05,1212.11 1831.63,1212.11 1832.22,1212.11 1832.81,1212.11 1833.39,1212.11 1833.98,1212.11 1834.56,1212.11 1835.15,1212.11 1835.74,1212.11 1836.32,1212.11 1836.91,1212.11 1837.5,1212.11 1838.08,1212.11 1838.67,1212.11 1839.26,1212.11 1839.84,1212.11 1840.43,1212.11 1841.01,1212.11 1841.6,1212.11 1842.19,1212.11 1842.77,1212.11 1843.36,1212.11 1843.95,1212.11 1844.53,1212.11 1845.12,1212.11 1845.71,1212.11 1846.29,1212.11 1846.88,1212.11 1847.47,1212.11 1848.05,1212.11 1848.64,1212.11 1849.22,1212.11 1849.81,1212.11 1850.4,1212.11 1850.98,1212.11 1851.57,1212.11 1852.16,1212.11 1852.74,1212.11 1853.33,1212.11 1853.92,1212.11 1854.5,1212.11 1855.09,1212.11 1855.68,1212.11 1856.26,1212.11 1856.85,1212.11 1857.43,1212.11 1858.02,1212.11 1858.61,1212.11 1859.19,1212.11 1859.78,1212.11 1860.37,1212.11 1860.95,1212.11 1861.54,1212.11 1862.13,1212.11 1862.71,1212.11 1863.3,1212.11 1863.88,1212.11 1864.47,1212.11 1865.06,1212.11 1865.64,1212.11 1866.23,1212.11 1866.82,1212.11 1867.4,1212.11 1867.99,1212.11 1868.58,1212.11 1869.16,1212.11 1869.75,1212.11 1870.34,1212.11 1870.92,1212.11 1871.51,1212.11 1872.09,1212.11 1872.68,1212.11 1873.27,1212.11 1873.85,1212.11 1874.44,1212.11 1875.03,1212.11 1875.61,1212.11 1876.2,1212.11 1876.79,1212.11 1877.37,1212.11 1877.96,1212.11 1878.55,1212.11 1879.13,1212.11 1879.72,1212.11 1880.3,1212.11 1880.89,1212.11 1881.48,1212.11 1882.06,1212.11 1882.65,1212.11 1883.24,1212.11 1883.82,1212.11 1884.41,1212.11 1885,1212.11 1885.58,1212.11 1886.17,1212.11 1886.76,1212.11 1887.34,1212.11 1887.93,1212.11 1888.51,1212.11 1889.1,1212.11 1889.69,1212.11 1890.27,1212.11 1890.86,1212.11 1891.45,1212.11 1892.03,1212.11 1892.62,1212.11 1893.21,1212.11 1893.79,1212.11 1894.38,1212.11 1894.96,1212.11 1895.55,1212.11 1896.14,1212.11 1896.72,1212.11 1897.31,1212.11 1897.9,1212.11 1898.48,1212.11 1899.07,1212.11 1899.66,1212.11 1900.24,1212.11 1900.83,1212.11 1901.42,1212.11 1902,1212.11 1902.59,1212.11 1903.17,1212.11 1903.76,1212.11 1904.35,1212.11 1904.93,1212.11 1905.52,1212.11 1906.11,1212.11 1906.69,1212.11 1907.28,1212.11 1907.87,1212.11 1908.45,1212.11 1909.04,1212.11 1909.63,1212.11 1910.21,1212.11 1910.8,1212.11 1911.38,1212.11 1911.97,1212.11 1912.56,1212.11 1913.14,1212.11 1913.73,1212.11 1914.32,1212.11 1914.9,1212.11 1915.49,1212.11 1916.08,1212.11 1916.66,1212.11 1917.25,1212.11 1917.83,1212.11 1918.42,1212.11 1919.01,1212.11 1919.59,1212.11 1920.18,1212.11 1920.77,1212.11 1921.35,1212.11 1921.94,1212.11 1922.53,1212.11 1923.11,1212.11 1923.7,1212.11 1924.29,1212.11 1924.87,1212.11 1925.46,1212.11 1926.04,1212.11 1926.63,1212.11 1927.22,1212.11 1927.8,1212.11 1928.39,1212.11 1928.98,1212.11 1929.56,1212.11 1930.15,1212.11 1930.74,1212.11 1931.32,1212.11 1931.91,1212.11 1932.5,1212.11 1933.08,1212.11 1933.67,1212.11 1934.25,1212.11 1934.84,1212.11 1935.43,1212.11 1936.01,1212.11 1936.6,1212.11 1937.19,1212.11 1937.77,1212.11 1938.36,1212.11 1938.95,1212.11 1939.53,1212.11 1940.12,1212.11 1940.71,1212.11 1941.29,1212.11 1941.88,1212.11 1942.46,1212.11 1943.05,1212.11 1943.64,1212.11 1944.22,1212.11 1944.81,1212.11 1945.4,1212.11 1945.98,1212.11 1946.57,1212.11 1947.16,1212.11 1947.74,1212.11 1948.33,1212.11 1948.91,1212.11 1949.5,1212.11 1950.09,1212.11 1950.67,1212.11 1951.26,1212.11 1951.85,1212.11 1952.43,1212.11 1953.02,1212.11 1953.61,1212.11 1954.19,1212.11 1954.78,1212.11 1955.37,1212.11 1955.95,1212.11 1956.54,1212.11 1957.12,1212.11 1957.71,1212.11 1958.3,1212.11 1958.88,1212.11 1959.47,1212.11 1960.06,1212.11 1960.64,1212.11 1961.23,1212.11 1961.82,1212.11 1962.4,1212.11 1962.99,1212.11 1963.58,1212.11 1964.16,1212.11 1964.75,1212.11 1965.33,1212.11 1965.92,1212.11 1966.51,1212.11 1967.09,1212.11 1967.68,1212.11 1968.27,1212.11 1968.85,1212.11 1969.44,1212.11 1970.03,1212.11 1970.61,1212.11 1971.2,1212.11 1971.78,1212.11 1972.37,1212.11 1972.96,1212.11 1973.54,1212.11 1974.13,1212.11 1974.72,1212.11 1975.3,1212.11 1975.89,1212.11 1976.48,1212.11 1977.06,1212.11 1977.65,1212.11 1978.24,1212.11 1978.82,1212.11 1979.41,1212.11 1979.99,1212.11 1980.58,1212.11 1981.17,1212.11 1981.75,1212.11 1982.34,1212.11 1982.93,1212.11 1983.51,1212.11 1984.1,1212.11 1984.69,1212.11 1985.27,1212.11 1985.86,1212.11 1986.45,1212.11 1987.03,1212.11 1987.62,1212.11 1988.2,1212.11 1988.79,1212.11 1989.38,1212.11 1989.96,1212.11 1990.55,1212.11 1991.14,1212.11 1991.72,1212.11 1992.31,1212.11 1992.9,1212.11 1993.48,1212.11 1994.07,1212.11 1994.65,1212.11 1995.24,1212.11 1995.83,1212.11 1996.41,1212.11 1997,1212.11 1997.59,1212.11 1998.17,1212.11 1998.76,1212.11 1999.35,1212.11 1999.93,1212.11 2000.52,1212.11 2001.11,1212.11 2001.69,1212.11 2002.28,1212.11 2002.86,1212.11 2003.45,1212.11 2004.04,1212.11 2004.62,1212.11 2005.21,1212.11 2005.8,1212.11 2006.38,1212.11 2006.97,1212.11 2007.56,1212.11 2008.14,1212.11 2008.73,1212.11 2009.32,1212.11 2009.9,1212.11 2010.49,1212.11 2011.07,1212.11 2011.66,1212.11 2012.25,1212.11 2012.83,1212.11 2013.42,1212.11 2014.01,1212.11 2014.59,1212.11 2015.18,1212.11 2015.77,1212.11 2016.35,1212.11 2016.94,1212.11 2017.53,1212.11 2018.11,1212.11 2018.7,1212.11 2019.28,1212.11 2019.87,1212.11 2020.46,1212.11 2021.04,1212.11 2021.63,1212.11 2022.22,1212.11 2022.8,1212.11 2023.39,1212.11 2023.98,1212.11 2024.56,1212.11 2025.15,1212.11 2025.73,1212.11 2026.32,1212.11 2026.91,1212.11 2027.49,1212.11 2028.08,1212.11 2028.67,1212.11 2029.25,1212.11 2029.84,1212.11 2030.43,1212.11 2031.01,1212.11 2031.6,1212.11 2032.19,1212.11 2032.77,1212.11 2033.36,1212.11 2033.94,1212.11 2034.53,1212.11 2035.12,1212.11 2035.7,1212.11 2036.29,1212.11 2036.88,1212.11 2037.46,1212.11 2038.05,1212.11 2038.64,1212.11 2039.22,1212.11 2039.81,1212.11 2040.4,1212.11 2040.98,1212.11 2041.57,1212.11 2042.15,1212.11 2042.74,1212.11 2043.33,1212.11 2043.91,1212.11 2044.5,1212.11 2045.09,1212.11 2045.67,1212.11 2046.26,1212.11 2046.85,1212.11 2047.43,1212.11 2048.02,1212.11 2048.6,1212.11 2049.19,1212.11 2049.78,1212.11 2050.36,1212.11 2050.95,1212.11 2051.54,1212.11 2052.12,1212.11 2052.71,1212.11 2053.3,1212.11 2053.88,1212.11 2054.47,1212.11 2055.06,1212.11 2055.64,1212.11 2056.23,1212.11 2056.81,1212.11 2057.4,1212.11 2057.99,1212.11 2058.57,1212.11 2059.16,1212.11 2059.75,1212.11 2060.33,1212.11 2060.92,1212.11 2061.51,1212.11 2062.09,1212.11 2062.68,1212.11 2063.27,1212.11 2063.85,1212.11 2064.44,1212.11 2065.02,1212.11 2065.61,1212.11 2066.2,1212.11 2066.78,1212.11 2067.37,1212.11 2067.96,1212.11 2068.54,1212.11 2069.13,1212.11 2069.72,1212.11 2070.3,1212.11 2070.89,1212.11 2071.48,1212.11 2072.06,1212.11 2072.65,1212.11 2073.23,1212.11 2073.82,1212.11 2074.41,1212.11 2074.99,1212.11 2075.58,1212.11 2076.17,1212.11 2076.75,1212.11 2077.34,1212.11 2077.93,1212.11 2078.51,1212.11 2079.1,1212.11 2079.68,1212.11 2080.27,1212.11 2080.86,1212.11 2081.44,1212.11 2082.03,1212.11 2082.62,1212.11 2083.2,1212.11 2083.79,1212.11 2084.38,1212.11 2084.96,1212.11 2085.55,1212.11 2086.14,1212.11 2086.72,1212.11 2087.31,1212.11 2087.89,1212.11 2088.48,1212.11 2089.07,1212.11 2089.65,1212.11 2090.24,1212.11 2090.83,1212.11 2091.41,1212.11 2092,1212.11 2092.59,1212.11 2093.17,1212.11 2093.76,1212.11 2094.35,1212.11 2094.93,1212.11 2095.52,1212.11 2096.1,1212.11 2096.69,1212.11 2097.28,1212.11 2097.86,1212.11 2098.45,1212.11 2099.04,1212.11 2099.62,1212.11 2100.21,1212.11 2100.8,1212.11 2101.38,1212.11 2101.97,1212.11 2102.55,1212.11 2103.14,1212.11 2103.73,1212.11 2104.31,1212.11 2104.9,1212.11 2105.49,1212.11 2106.07,1212.11 2106.66,1212.11 2107.25,1212.11 2107.83,1212.11 2108.42,1212.11 2109.01,1212.11 2109.59,1212.11 2110.18,1212.11 2110.76,1212.11 2111.35,1212.11 2111.94,1212.11 2112.52,1212.11 2113.11,1212.11 2113.7,1212.11 2114.28,1212.11 2114.87,1212.11 2115.46,1212.11 2116.04,1212.11 2116.63,1212.11 2117.22,1212.11 2117.8,1212.11 2118.39,1212.11 2118.97,1212.11 2119.56,1212.11 2120.15,1212.11 2120.73,1212.11 2121.32,1212.11 2121.91,1212.11 2122.49,1212.11 2123.08,1212.11 2123.67,1212.11 2124.25,1212.11 2124.84,1212.11 2125.42,1212.11 2126.01,1212.11 2126.6,1212.11 2127.18,1212.11 2127.77,1212.11 2128.36,1212.11 2128.94,1212.11 2129.53,1212.11 2130.12,1212.11 2130.7,1212.11 2131.29,1212.11 2131.88,1212.11 2132.46,1212.11 2133.05,1212.11 2133.63,1212.11 2134.22,1212.11 2134.81,1212.11 2135.39,1212.11 2135.98,1212.11 2136.57,1212.11 2137.15,1212.11 2137.74,1212.11 2138.33,1212.11 2138.91,1212.11 2139.5,1212.11 2140.09,1212.11 2140.67,1212.11 2141.26,1212.11 2141.84,1212.11 2142.43,1212.11 2143.02,1212.11 2143.6,1212.11 2144.19,1212.11 2144.78,1212.11 2145.36,1212.11 2145.95,1212.11 2146.54,1212.11 2147.12,1212.11 2147.71,1212.11 2148.3,1212.11 2148.88,1212.11 2149.47,1212.11 2150.05,1212.11 2150.64,1212.11 2151.23,1212.11 2151.81,1212.11 2152.4,1212.11 2152.99,1212.11 2153.57,1212.11 2154.16,1212.11 2154.75,1212.11 2155.33,1212.11 2155.92,1212.11 2156.5,1212.11 2157.09,1212.11 2157.68,1212.11 2158.26,1212.11 \"/>\n<polyline clip-path=\"url(#clip232)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1561.76,1193.56 1399.4,899.083 \"/>\n<polyline clip-path=\"url(#clip232)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1230.17 985.439,1193.56 2158.26,1193.56 2158.26,1230.17 985.439,1230.17 \"/>\n<path clip-path=\"url(#clip230)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip230)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip230)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip230)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip230)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip230)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip230)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip230)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip233\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip233)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip233)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip233)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip233)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip233)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip230)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip230)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip230)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip230)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip230)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip230)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip230)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip233)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip233)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip233)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip233)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip233)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip230)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip230)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip230)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip230)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip230)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip230)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip230)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip230)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip233)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-1577.5 161.555,-2922.08 162.114,-2642.16 162.673,-3872.82 163.232,-5000.67 163.792,-4700.17 164.351,-5683.81 164.91,-6565.42 165.469,-7408.6 166.029,-8154.91 166.588,-8834.24 167.147,-9447.56 167.706,-9052.75 168.266,-9590.94 168.825,-10072.9 169.384,-10502.2 169.943,-10145.4 170.503,-10511.4 171.062,-10820.6 171.621,-10499.3 172.18,-10765.2 172.74,-10977.4 173.299,-11159.8 173.858,-10393.6 174.417,-10565.9 174.977,-10713 175.536,-10812.4 176.095,-10547.9 176.655,-10631.5 177.214,-10363.1 177.773,-9557.62 178.332,-9347.15 178.892,-9389.03 179.451,-9422.03 180.01,-9419.04 180.569,-9201.55 181.129,-8997.79 181.688,-8797.87 182.247,-8772.34 182.806,-8386.59 183.366,-8354.57 183.925,-8317.14 184.484,-8125.22 185.043,-7950.1 185.603,-7766.99 186.162,-7453.82 186.721,-7173.63 187.28,-7010.97 187.84,-6847.09 188.399,-6683.89 188.958,-6351.05 189.517,-6312.86 190.077,-6088.15 190.636,-5947.51 191.195,-5815.56 191.754,-5689.75 192.314,-5627.76 192.873,-5565.26 193.432,-5501.87 193.991,-5436.67 194.551,-5175.52 195.11,-4922.83 195.669,-4680.34 196.228,-4572.47 196.788,-4462.8 197.347,-4404.33 197.906,-4344.15 198.465,-4128.05 199.025,-4065.15 199.584,-3952.93 200.143,-3844.24 200.702,-3737.64 201.262,-3668.42 201.821,-3469.84 202.38,-3400.99 202.939,-3211.32 203.499,-3033.94 204.058,-2981.09 204.617,-2883.88 205.176,-2824.39 205.736,-2769.52 206.295,-2679.52 206.854,-2584.69 207.413,-2524.61 207.973,-2462.28 208.532,-2272.7 209.091,-2184.84 209.65,-2039.12 210.21,-1930.08 210.769,-1851.74 211.328,-1745.78 211.887,-1695.96 212.447,-1625.48 213.006,-1554.02 213.565,-1511.72 214.124,-1333.36 214.684,-1161.52 215.243,-1055 215.802,-993.595 216.361,-910.995 216.921,-859.033 217.48,-828.733 218.039,-750.004 218.598,-672.8 219.158,-644.984 219.717,-520.374 220.276,-424.268 220.835,-359.808 221.395,-333.49 221.954,-288.616 222.513,-177.619 223.072,-119.419 223.632,-82.7825 224.191,-27.7306 224.75,-15.3877 225.309,20.3297 225.869,31.3514 226.428,47.1037 226.987,84.2072 227.546,96.2741 228.106,129.812 228.665,164.144 229.224,216.634 229.783,227.867 230.343,266.968 230.902,357.724 231.461,366.911 232.02,416.54 232.58,462.766 233.139,483.294 233.698,469.491 234.257,509.999 234.817,510.382 235.376,535.272 235.935,558.279 236.494,562.656 237.054,583.604 237.613,623.957 238.172,663.304 238.731,681.979 239.291,699.576 239.85,734.954 240.409,712.536 240.968,694.91 241.528,713.445 242.087,716.285 242.646,734.533 243.205,772.668 243.765,732.283 244.324,787.922 244.883,786.02 245.442,801.333 246.002,781.964 246.561,798.875 247.12,795.266 247.679,812.656 248.239,776.868 248.798,775.323 249.357,781.376 249.916,785.747 250.476,786.269 251.035,787.797 251.594,792.008 252.153,832.001 252.713,833.758 253.272,850.226 253.831,866.287 254.39,897.353 254.95,877.703 255.509,890.557 256.068,870.404 256.627,888.369 257.187,888.075 257.746,890.09 258.305,905.9 258.864,923.042 259.424,906.009 259.983,939.566 260.542,918.712 261.101,933.189 261.661,947.962 262.22,911.332 262.779,946.13 263.338,993.776 263.898,1040.2 264.457,1015.12 265.016,1012.79 265.575,1038.27 266.135,1080.7 266.694,1056.47 267.253,1032.84 267.812,1045.96 268.372,1088.09 268.931,1079.01 269.49,1087.71 270.049,1099.34 270.609,1073.1 271.168,1031.01 271.727,1042.59 272.286,1053.6 272.846,1063.01 273.405,1087.25 273.964,1057.11 274.523,1064.87 275.083,1059.79 275.642,1053.24 276.201,1044.72 276.76,1019.87 277.32,998.609 277.879,994.903 278.438,990.683 278.997,1019.47 279.557,1013.12 280.116,1058.16 280.675,1066.69 281.234,1074.64 281.794,1096.47 282.353,1116.87 282.912,1137.74 283.471,1142.14 284.031,1097.02 284.59,1103.71 285.149,1090.67 285.708,1065.77 286.268,1007.07 286.827,1020.07 287.386,1014.79 287.945,1010.44 288.505,1036.93 289.064,1060.91 289.623,1067.32 290.182,1111.33 290.742,1100.97 291.301,1107.38 291.86,1097.38 292.419,1071.01 292.979,1044.25 293.538,1055.38 294.097,1047.34 294.656,1039.87 295.216,1049.09 295.775,1055.45 296.334,1064.12 296.893,1003.59 297.453,966.035 298.012,1025.91 298.571,1016.55 299.13,1007.56 299.69,1006.66 300.249,1019.03 300.808,982.414 301.368,978.316 301.927,990.92 302.486,949.434 303.045,962.855 303.605,960.05 304.164,954.011 304.723,981.7 305.282,1011.91 305.842,992.648 306.401,969.624 306.96,981.943 307.519,976.713 308.079,988.781 308.638,1032.46 309.197,1037.06 309.756,1041.98 310.316,1015.95 310.875,1004.58 311.434,1011.71 311.993,1023.32 312.553,1030.82 313.112,1024.16 313.671,1097.31 314.23,1001.36 314.79,1010.75 315.349,1017.42 315.908,1010.17 316.467,1005.07 317.027,1000.18 317.586,993.791 318.145,989.965 318.704,968 319.264,995.704 319.823,1021.91 320.382,1029.27 320.941,1053.46 321.501,1059.37 322.06,1047.73 322.619,1036.9 323.178,1008.43 323.738,985.654 324.297,1014.58 324.856,1006.43 325.415,1015.14 325.975,991.265 326.534,999.73 327.093,943.731 327.652,906.026 328.212,905.443 328.771,883.869 329.33,867.924 329.889,853.961 330.449,824.384 331.008,822.506 331.567,806.963 332.126,794.34 332.686,828.49 333.245,824.943 333.804,841.331 334.363,824.035 334.923,790.966 335.482,811.633 336.041,827.79 336.6,813.444 337.16,813.161 337.719,828.664 338.278,844.515 338.837,827.794 339.397,794.56 339.956,778.632 340.515,812.669 341.074,798.54 341.634,847.157 342.193,880.964 342.752,896.241 343.311,914.61 343.871,908.129 344.43,953.811 344.989,931.579 345.548,924.314 346.108,885.337 346.667,882.492 347.226,910.979 347.785,926.917 348.345,902.343 348.904,915.596 349.463,894.589 350.022,860.873 350.582,859.577 351.141,875.675 351.7,857.204 352.259,855.26 352.819,838.976 353.378,837.382 353.937,836.351 354.496,818.616 355.056,854.643 355.615,870.562 356.174,866.66 356.733,886.633 357.293,868.417 357.852,905.459 358.411,886.985 358.97,853.144 359.53,849.006 360.089,866.421 360.648,846.774 361.207,847.552 361.767,840.89 362.326,839.767 362.885,820.192 363.444,849.175 364.004,811.796 364.563,813.22 365.122,795.992 365.681,764.098 366.241,783.414 366.8,799.694 367.359,815.574 367.918,818.158 368.478,816.298 369.037,817.554 369.596,815.179 370.155,844.864 370.715,825.443 371.274,841.756 371.833,840.653 372.392,873.733 372.952,888.494 373.511,901.456 374.07,943.017 374.629,945.87 375.189,941.558 375.748,921.673 376.307,897.936 376.866,905.81 377.426,900.806 377.985,880.354 378.544,858.562 379.103,858.547 379.663,871.565 380.222,882.356 380.781,844.713 381.34,858.931 381.9,886.704 382.459,898.296 383.018,892.399 383.577,889.823 384.137,873.298 384.696,868.689 385.255,895.059 385.814,890.021 386.374,884.605 386.933,861.028 387.492,890.628 388.051,849.535 388.611,830.431 389.17,792.483 389.729,775.616 390.288,810.739 390.848,809.33 391.407,840.586 391.966,839.717 392.525,803.777 393.085,799.674 393.644,799.507 394.203,814.758 394.762,793.978 395.322,793.051 395.881,795.672 396.44,811.507 396.999,843.7 397.559,840.264 398.118,836.156 398.677,833.358 399.236,830.229 399.796,829.003 400.355,859.584 400.914,836.528 401.473,865.867 402.033,845.125 402.592,858.448 403.151,852.704 403.71,847.129 404.27,858.736 404.829,839.947 405.388,805.302 405.947,789.094 406.507,772.895 407.066,773.242 407.625,755.727 408.184,756.029 408.744,772.657 409.303,790.485 409.862,753.568 410.421,786.944 410.981,804.516 411.54,803.058 412.099,800.223 412.658,830.647 413.218,794.204 413.777,840.3 414.336,818.482 414.895,787.181 415.455,773.19 416.014,776.754 416.573,779.258 417.132,798.89 417.692,813.107 418.251,780.212 418.81,811.509 419.369,839.429 419.929,850.465 420.488,844.631 421.047,859.22 421.606,852.159 422.166,847.55 422.725,812.114 423.284,793.656 423.843,819.813 424.403,799.34 424.962,830.089 425.521,810.946 426.08,790.782 426.64,786.591 427.199,785.634 427.758,755.152 428.318,739.295 428.877,757.519 429.436,757.472 429.995,757.749 430.555,726.055 431.114,725.303 431.673,732.739 432.232,751.892 432.792,780.314 433.351,780.982 433.91,779.844 434.469,796.381 435.029,781.17 435.588,797.33 436.147,810.926 436.706,770.617 437.266,800.431 437.825,797.204 438.384,793.49 438.943,794.366 439.503,794.759 440.062,808.6 440.621,773.683 441.18,752.186 441.74,799.37 442.299,796.087 442.858,775.417 443.417,758.894 443.977,777.135 444.536,777.025 445.095,778.081 445.654,728.051 446.214,727.481 446.773,730.121 447.332,734.176 447.891,751.847 448.451,738.24 449.01,755.41 449.569,753.513 450.128,737.945 450.688,768.299 451.247,781.141 451.806,797.084 452.365,796.788 452.925,794.654 453.484,773.025 454.043,802.469 454.602,799.482 455.162,813.877 455.721,812.008 456.28,807.159 456.839,786.226 457.399,766.991 457.958,764.315 458.517,780.46 459.076,776.639 459.636,790.649 460.195,783.92 460.754,797.783 461.313,779.656 461.873,778.207 462.432,841.625 462.991,802.806 463.55,799.574 464.11,747.565 464.669,749.056 465.228,764.901 465.787,733.671 466.347,749.63 466.906,746.509 467.465,729.073 468.024,747.332 468.584,699.557 469.143,718.252 469.702,735.267 470.261,752.838 470.821,753.249 471.38,737.319 471.939,722.397 472.498,722.726 473.058,725.603 473.617,662.719 474.176,634.579 474.735,643.869 475.295,661.839 475.854,664.916 476.413,670.402 476.972,689.804 477.532,692.006 478.091,681.367 478.65,652.368 479.209,659.596 479.769,650.583 480.328,653.857 480.887,676.285 481.446,728.281 482.006,747.436 482.565,761.187 483.124,759.091 483.683,759.005 484.243,770.824 484.802,787.653 485.361,800.476 485.92,814.114 486.48,779.121 487.039,811.494 487.598,869.491 488.157,844.696 488.717,856.976 489.276,817.384 489.835,814.113 490.394,780.291 490.954,747.505 491.513,749.258 492.072,732.369 492.631,712.767 493.191,712.675 493.75,716.561 494.309,686.471 494.868,721.673 495.428,740.897 495.987,754.862 496.546,753.477 497.105,753.915 497.665,753.585 498.224,750.917 498.783,749.793 499.342,763.815 499.902,793.838 500.461,774.904 501.02,772.527 501.579,753.379 502.139,734.766 502.698,734.88 503.257,770.148 503.816,783.36 504.376,762.438 504.935,760.829 505.494,727.389 506.053,727.107 506.613,727.345 507.172,742.002 507.731,755.018 508.29,798.188 508.85,793.436 509.409,772.627 509.968,757.327 510.527,750.154 511.087,744.741 511.646,758.435 512.205,753.503 512.764,751.396 513.324,783.044 513.883,780.035 514.442,794.015 515.001,792.545 515.561,775.387 516.12,788.966 516.679,786.079 517.238,781.669 517.798,763.767 518.357,728.587 518.916,727.387 519.475,744.017 520.035,739.434 520.594,772.371 521.153,751.854 521.712,747.862 522.272,750.005 522.831,746.143 523.39,727.584 523.949,707.513 524.509,695.408 525.068,713.983 525.627,697.692 526.186,701.926 526.746,717.409 527.305,701.048 527.864,699.701 528.423,679.782 528.983,662.796 529.542,666.093 530.101,637.739 530.66,636.966 531.22,658.287 531.779,692.71 532.338,692.672 532.897,697.291 533.457,712.439 534.016,713.604 534.575,713.016 535.134,747.281 535.694,744.07 536.253,724.58 536.812,722.375 537.371,722.835 537.931,724.27 538.49,721.422 539.049,717.879 539.608,731.2 540.168,747.845 540.727,743.296 541.286,754.641 541.845,756.315 542.405,752.081 542.964,749.616 543.523,749.94 544.082,749.784 544.642,780.976 545.201,746.016 545.76,839.457 546.319,862.34 546.879,882.069 547.438,873.754 547.997,866.278 548.556,823.689 549.116,771.944 549.675,768.928 550.234,768.413 550.793,764.827 551.353,710.399 551.912,706.922 552.471,671.861 553.031,675.074 553.59,662.412 554.149,667.229 554.708,669.179 555.268,673.719 555.827,660.481 556.386,681.102 556.945,684.906 557.505,672.106 558.064,660.01 558.623,660.883 559.182,665.972 559.742,631.774 560.301,638.773 560.86,640.168 561.419,645.005 561.979,647.606 562.538,667.731 563.097,687.685 563.656,704.095 564.216,674.978 564.775,641.278 565.334,725.714 565.893,705.379 566.453,707.932 567.012,692.546 567.571,694.588 568.13,692.806 568.69,693.952 569.249,694.33 569.808,679.379 570.367,632.447 570.927,633.624 571.486,702.27 572.045,716.527 572.604,686.295 573.164,704.417 573.723,686.983 574.282,719.873 574.841,700.858 575.401,685.693 575.96,687.242 576.519,690.754 577.078,711.42 577.638,695.138 578.197,714.947 578.756,734.452 579.315,753.567 579.875,752.442 580.434,717.948 580.993,702.775 581.552,703.295 582.112,736.104 582.671,717.178 583.23,718.254 583.789,749.862 584.349,766.612 584.908,766.016 585.467,798.479 586.026,797.725 586.586,790.779 587.145,788.849 587.704,784.425 588.263,797.988 588.823,792.757 589.382,787.508 589.941,766.296 590.5,797.558 591.06,807.591 591.619,819.728 592.178,845.704 592.737,853.348 593.297,829.347 593.856,821.386 594.415,797.789 594.974,841.698 595.534,802.907 596.093,768.448 596.652,749.658 597.211,742.149 597.771,755.924 598.33,752.197 598.889,765.604 599.448,762.765 600.008,747.742 600.567,792.34 601.126,803.98 601.685,753.158 602.245,734.722 602.804,733.217 603.363,763.346 603.922,745.309 604.482,757.292 605.041,787.065 605.6,779.389 606.159,806.796 606.719,798.941 607.278,740.834 607.837,755.272 608.396,737.309 608.956,734.784 609.515,700.515 610.074,700.903 610.633,698.946 611.193,697.894 611.752,663.403 612.311,665.792 612.87,700.541 613.43,683.995 613.989,653.174 614.548,654.151 615.107,656.17 615.667,659.696 616.226,674.107 616.785,674.945 617.344,676.85 617.904,644.485 618.463,679.958 619.022,666.664 619.581,683.724 620.141,698.476 620.7,684.506 621.259,667.005 621.818,683.24 622.378,688.02 622.937,686.092 623.496,671.183 624.055,638.103 624.615,609.356 625.174,615.919 625.733,651.141 626.292,657.803 626.852,690.231 627.411,688.09 627.97,690.994 628.529,709.904 629.089,725.681 629.648,709.1 630.207,675.622 630.766,674.168 631.326,674.206 631.885,703.367 632.444,751.319 633.003,764.566 633.563,744.237 634.122,759.525 634.681,756.174 635.24,720.793 635.8,717.196 636.359,716.809 636.918,750.186 637.477,697.593 638.037,729.109 638.596,730.795 639.155,745.19 639.714,710.277 640.274,703.955 640.833,719.857 641.392,667.114 641.951,683.936 642.511,655.333 643.07,658.306 643.629,646.778 644.188,666.984 644.748,668.785 645.307,654.087 645.866,642.37 646.425,644.919 646.985,632.482 647.544,639.026 648.103,659.965 648.662,664.57 649.222,696.849 649.781,682.193 650.34,700.942 650.899,684.815 651.459,702.055 652.018,733.076 652.577,729.861 653.136,727.488 653.696,710.443 654.255,742.476 654.814,739.3 655.373,737.441 655.933,719.787 656.492,723.113 657.051,722.387 657.61,705.625 658.17,689.569 658.729,686.062 659.288,701.329 659.847,670.613 660.407,655.519 660.966,660.477 661.525,675.485 662.084,660.201 662.644,630.908 663.203,617.192 663.762,586.965 664.321,579.083 664.881,603.192 665.44,622.571 665.999,630.062 666.558,652.928 667.118,653.126 667.677,671.077 668.236,607.098 668.795,596.407 669.355,587.325 669.914,610.897 670.473,663.898 671.032,697.461 671.592,682.115 672.151,652.379 672.71,670.302 673.269,655.893 673.829,641.587 674.388,644.229 674.947,663.504 675.506,665.045 676.066,636.687 676.625,641.444 677.184,578.919 677.743,587.276 678.303,591.925 678.862,580.553 679.421,585.804 679.981,610.123 680.54,618.995 681.099,625.152 681.658,629.381 682.218,665.032 682.777,686.707 683.336,689.366 683.895,736.291 684.455,718.401 685.014,732.648 685.573,727.531 686.132,726.371 686.692,724.491 687.251,801.814 687.81,812.958 688.369,806.552 688.929,767.276 689.488,749.5 690.047,745.229 690.606,754.041 691.166,752.648 691.725,764.278 692.284,774.638 692.843,722.851 693.403,722.542 693.962,718.148 694.521,700.67 695.08,699.198 695.64,695.559 696.199,648.699 696.758,637.08 697.317,656.58 697.877,697.148 698.436,714.382 698.995,649.73 699.554,636.444 700.114,642.525 700.673,611.179 701.232,618.376 701.791,639.303 702.351,693.653 702.91,678.629 703.469,662.742 704.028,664.392 704.588,694.37 705.147,712.569 705.706,742.293 706.265,737.823 706.825,734.469 707.384,730.688 707.943,694.101 708.502,691.972 709.062,693.363 709.621,694.472 710.18,694.991 710.739,711.528 711.299,742.737 711.858,740.311 712.417,720.325 712.976,703.92 713.536,673.383 714.095,692 714.654,690.224 715.213,724.994 715.773,722.022 716.332,719.961 716.891,763.845 717.45,763.576 718.01,761.55 718.569,773.875 719.128,767.386 719.687,760.467 720.247,757.957 720.806,706.483 721.365,709.699 721.924,696.225 722.484,681.044 723.043,681.184 723.602,700.828 724.161,680.874 724.721,699.961 725.28,694.409 725.839,741.279 726.398,786.505 726.958,764.085 727.517,763.175 728.076,773.516 728.635,783.864 729.195,762.374 729.754,759.918 730.313,704.391 730.872,716.47 731.432,715.763 731.991,733.406 732.55,730.348 733.109,727.827 733.669,745.411 734.228,731.198 734.787,713.849 735.346,722.706 735.906,738.204 736.465,717.673 737.024,731.188 737.583,726.908 738.143,759.029 738.702,752.226 739.261,762.012 739.82,758.929 740.38,722.193 740.939,754.127 741.498,765.886 742.057,748.887 742.617,761.344 743.176,738.356 743.735,722.239 744.294,689.723 744.854,720.711 745.413,719.822 745.972,717.077 746.531,698.772 747.091,669.107 747.65,686.266 748.209,701.826 748.768,699.244 749.328,701.89 749.887,700.919 750.446,714.551 751.005,712.296 751.565,729.447 752.124,727.17 752.683,724.963 753.242,740.658 753.802,736.969 754.361,700.899 754.92,714.513 755.479,715.448 756.039,714.007 756.598,712.266 757.157,711 757.716,690.769 758.276,704.483 758.835,705.12 759.394,684.946 759.953,702.252 760.513,696.773 761.072,697.861 761.631,716.005 762.19,664.899 762.75,649.974 763.309,667.188 763.868,652.875 764.427,639.514 764.987,639.867 765.546,609.504 766.105,613.835 766.664,586.32 767.224,602.346 767.783,637.724 768.342,671.036 768.901,672.651 769.461,701.633 770.02,717.496 770.579,672.041 771.138,673.248 771.698,689.18 772.257,692.346 772.816,644.594 773.375,632.463 773.935,636.63 774.494,640.823 775.053,612.77 775.612,664.583 776.172,651.96 776.731,670.804 777.29,671.747 777.849,686.464 778.409,687.542 778.968,654.458 779.527,623.881 780.086,643.977 780.646,664.002 781.205,649.69 781.764,657.667 782.323,673.207 782.883,676.463 783.442,656.85 784.001,643.431 784.56,611.308 785.12,616.612 785.679,602.191 786.238,607.626 786.797,578.929 787.357,585.612 787.916,623.48 788.475,625.949 789.034,610.002 789.594,615.276 790.153,617.845 790.712,623.989 791.271,658.15 791.831,644.952 792.39,630.934 792.949,633.165 793.508,636.701 794.068,655.425 794.627,638.979 795.186,641.931 795.745,645.623 796.305,647.055 796.864,666.234 797.423,699.225 797.982,699.037 798.542,795.274 799.101,790.21 799.66,817.051 800.219,814.25 800.779,790.629 801.338,800.204 801.897,761.236 802.456,740.979 803.016,720.442 803.575,701.513 804.134,716.115 804.693,717.344 805.253,701.187 805.812,701.631 806.371,700.622 806.931,681.572 807.49,668.051 808.049,721.584 808.608,705.063 809.168,702.677 809.727,731.341 810.286,746.034 810.845,713.388 811.405,676.763 811.964,712.272 812.523,680.761 813.082,662.044 813.642,677.336 814.201,678.831 814.76,697.019 815.319,699.211 815.879,731.4 816.438,741.355 816.997,753.154 817.556,750.762 818.116,763.545 818.675,743.67 819.234,773.516 819.793,753.433 820.353,748.386 820.912,745.808 821.471,726.416 822.03,713.137 822.59,710.708 823.149,760.916 823.708,789.029 824.267,768.233 824.827,763.047 825.386,755.754 825.945,798.965 826.504,810.148 827.064,821.075 827.623,782.138 828.182,790.779 828.741,770.424 829.301,799.249 829.86,776.876 830.419,756.776 830.978,757.908 831.538,775.211 832.097,750.023 832.656,795.117 833.215,769.616 833.775,748.513 834.334,743.508 834.893,742.286 835.452,704.479 836.012,688.194 836.571,655.715 837.13,643.409 837.689,634.542 838.249,671.462 838.808,642.257 839.367,660.393 839.926,679.363 840.486,695.387 841.045,676.436 841.604,673.657 842.163,689.519 842.723,671.13 843.282,639.884 843.841,673.119 844.4,706.78 844.96,705.464 845.519,702.31 846.078,719.056 846.637,715.31 847.197,711.202 847.756,728.511 848.315,760.694 848.874,772.324 849.434,752.35 849.993,716.281 850.552,715.051 851.111,717.573 851.671,731.2 852.23,667.695 852.789,668.463 853.348,701.301 853.908,698.576 854.467,700.31 855.026,731.275 855.585,683.925 856.145,684.865 856.704,649.481 857.263,651.496 857.822,651.568 858.382,653.657 858.941,658.629 859.5,642.551 860.059,658.772 860.619,644.698 861.178,645.686 861.737,634.372 862.296,651.088 862.856,651.572 863.415,652.605 863.974,638.008 864.533,636.669 865.093,642.002 865.652,592.501 866.211,564.25 866.77,603.562 867.33,607.58 867.889,628.952 868.448,616.668 869.007,602.665 869.567,626.712 870.126,630.104 870.685,667.172 871.244,636.708 871.804,672.477 872.363,657.206 872.922,623.463 873.481,630.425 874.041,584.605 874.6,607.1 875.159,611.853 875.718,616.853 876.278,652.958 876.837,669.747 877.396,652.788 877.955,671.541 878.515,671.981 879.074,639.087 879.633,612.458 880.192,664.139 880.752,663.462 881.311,614.495 881.87,636.044 882.429,624.106 882.989,608.833 883.548,646.7 884.107,616.038 884.666,602.405 885.226,623.544 885.785,626.868 886.344,667.619 886.903,685.576 887.463,699.568 888.022,729.306 888.581,741.969 889.14,787.253 889.7,800.814 890.259,857.357 890.818,848.366 891.377,873.165 891.937,813.347 892.496,805.955 893.055,813.219 893.614,825.778 894.174,837.717 894.733,812.741 895.292,789.937 895.851,783.568 896.411,729.029 896.97,704.775 897.529,705.709 898.088,720.863 898.648,716.373 899.207,668.04 899.766,684.457 900.325,649.99 900.885,667.784 901.444,671.345 902.003,703.572 902.562,686.088 903.122,703.092 903.681,704.882 904.24,718.926 904.799,765.774 905.359,727.727 905.918,742.171 906.477,723.74 907.036,707.498 907.596,705.923 908.155,706.223 908.714,686.059 909.273,701.833 909.833,717.744 910.392,715.783 910.951,765.648 911.51,779.46 912.07,727.838 912.629,660.937 913.188,649.467 913.747,684.654 914.307,667.831 914.866,667.304 915.425,671.029 915.984,687.501 916.544,689.468 917.103,704.892 917.662,718.836 918.221,702.228 918.781,749.43 919.34,763.207 919.899,726.216 920.458,707.546 921.018,706.297 921.577,689.659 922.136,640.666 922.695,642.859 923.255,661.137 923.814,692.164 924.373,722.151 924.932,732.443 925.492,729.213 926.051,726.779 926.61,709.834 927.169,708.799 927.729,707.729 928.288,674.358 928.847,660.049 929.406,678.498 929.966,646.643 930.525,630.703 931.084,616.452 931.644,606.869 932.203,591.183 932.762,611.447 933.321,567.333 933.881,575.898 934.44,562.447 934.999,601.192 935.558,605.198 936.118,632.565 936.677,656.231 937.236,658.1 937.795,660.691 938.355,615.204 938.914,636.37 939.473,672.439 940.032,689.458 940.592,686.653 941.151,704.538 941.71,702.81 942.269,716.884 942.829,668.96 943.388,666.786 943.947,686.091 944.506,683.503 945.066,696.89 945.625,694.868 946.184,677.897 946.743,677.652 947.303,673.918 947.862,677.018 948.421,644.506 948.98,628.942 949.54,597.616 950.099,607.41 950.658,661.867 951.217,665.386 951.777,696.602 952.336,711.992 952.895,743.621 953.454,774.652 954.014,785.469 954.573,782.237 955.132,782.678 955.691,777.681 956.251,792.092 956.81,789.075 957.369,720.054 957.928,701.623 958.488,717.337 959.047,736.138 959.606,702.603 960.165,718.928 960.725,698.673 961.284,714.134 961.843,697.851 962.402,682.904 962.962,680.784 963.521,712.203 964.08,710.733 964.639,726.505 965.199,710.016 965.758,741.023 966.317,737.018 966.876,703.878 967.436,736.045 967.995,732.735 968.554,749.1 969.113,728.469 969.673,759.782 970.232,704.341 970.791,702 971.35,683.976 971.91,696.816 972.469,697.565 973.028,683.533 973.587,699.838 974.147,731.765 974.706,759.907 975.265,754.325 975.824,765.465 976.384,744.843 976.943,741.238 977.502,754.874 978.061,736.773 978.621,764.658 979.18,744.977 979.739,726.364 980.298,723.71 980.858,741.498 981.417,751.211 981.976,777.775 982.535,790.429 983.095,753.62 983.654,751.932 984.213,719.684 984.772,688.351 985.332,703.813 985.891,702.621 986.45,701.957 987.009,698.962 987.569,698.476 988.128,711.883 988.687,729.648 989.246,728.605 989.806,741.105 990.365,739.837 990.924,783.074 991.483,792.494 992.043,768.255 992.602,745.766 993.161,713.026 993.72,760.05 994.28,708.413 994.839,707.413 995.398,737.787 995.957,732.833 996.517,728.857 997.076,759.609 997.635,754.689 998.194,750.488 998.754,749.509 999.313,777.218 999.872,723.844 1000.43,738.944 1000.99,736.488 1001.55,699.72 1002.11,699.166 1002.67,715.985 1003.23,713.077 1003.79,711.044 1004.35,711.586 1004.91,710.813 1005.46,727.334 1006.02,742.418 1006.58,740.324 1007.14,739.343 1007.7,702.663 1008.26,701.609 1008.82,718.998 1009.38,700.191 1009.94,713.926 1010.5,693.381 1011.06,692.343 1011.62,660.624 1012.18,658.891 1012.73,643.962 1013.29,630.757 1013.85,633.902 1014.41,619.559 1014.97,625.272 1015.53,628.123 1016.09,632.028 1016.65,636.84 1017.21,640.286 1017.77,628.698 1018.33,663.534 1018.89,664.287 1019.45,666.168 1020.01,700.94 1020.56,683.936 1021.12,680.388 1021.68,694.71 1022.24,691.683 1022.8,688.172 1023.36,670.227 1023.92,653.415 1024.48,686.251 1025.04,637.738 1025.6,608.764 1026.16,596.585 1026.72,598.58 1027.28,601.099 1027.83,592.954 1028.39,580.283 1028.95,588.924 1029.51,590.697 1030.07,626.95 1030.63,626.151 1031.19,660.475 1031.75,631.309 1032.31,636.807 1032.87,625.031 1033.43,630.037 1033.99,631.176 1034.55,630.769 1035.1,646.546 1035.66,695.779 1036.22,683.413 1036.78,682.377 1037.34,666.096 1037.9,664.11 1038.46,647.797 1039.02,630.812 1039.58,632.103 1040.14,602.441 1040.7,579.173 1041.26,585.355 1041.82,594.623 1042.38,601.58 1042.93,623.297 1043.49,661.582 1044.05,662.125 1044.61,663.771 1045.17,649.854 1045.73,665.879 1046.29,685.308 1046.85,736.58 1047.41,729.895 1047.97,727.314 1048.53,741.256 1049.09,739.66 1049.65,718.133 1050.2,715.027 1050.76,734.018 1051.32,714.62 1051.88,710.03 1052.44,725.043 1053,704.697 1053.56,706.04 1054.12,688.512 1054.68,656.042 1055.24,654.857 1055.8,706.694 1056.36,706.743 1056.92,672.537 1057.48,642.236 1058.03,662.639 1058.59,661.312 1059.15,660.838 1059.71,707.696 1060.27,690.445 1060.83,690.122 1061.39,705.546 1061.95,720.901 1062.51,735.26 1063.07,699.876 1063.63,647.418 1064.19,650.647 1064.75,650.386 1065.3,586.859 1065.86,587.214 1066.42,579.612 1066.98,568.16 1067.54,590.595 1068.1,597.64 1068.66,619.613 1069.22,624.091 1069.78,626.036 1070.34,630.379 1070.9,635.402 1071.46,621.764 1072.02,627.742 1072.57,610.479 1073.13,615.88 1073.69,637.46 1074.25,628.148 1074.81,664.854 1075.37,649.093 1075.93,633.178 1076.49,622.197 1077.05,656.073 1077.61,656.418 1078.17,623.987 1078.73,628.554 1079.29,632.591 1079.85,652.802 1080.4,655.857 1080.96,624.455 1081.52,642.748 1082.08,662.866 1082.64,650.483 1083.2,654.89 1083.76,640.763 1084.32,626.85 1084.88,664.484 1085.44,668.906 1086,670.88 1086.56,655.672 1087.12,672.858 1087.67,658.274 1088.23,677.516 1088.79,662.349 1089.35,664.338 1089.91,666.495 1090.47,682.223 1091.03,652.661 1091.59,637.863 1092.15,654.153 1092.71,652.821 1093.27,671.337 1093.83,657.06 1094.39,656.598 1094.94,662.335 1095.5,695.925 1096.06,693.784 1096.62,695.203 1097.18,659.378 1097.74,690.867 1098.3,689.985 1098.86,735.341 1099.42,718.885 1099.98,705.53 1100.54,722.659 1101.1,735.903 1101.66,763.964 1102.22,764.449 1102.77,758.548 1103.33,783.53 1103.89,777.967 1104.45,807.626 1105.01,802.017 1105.57,796.214 1106.13,789.383 1106.69,799.823 1107.25,779.983 1107.81,760.536 1108.37,773.349 1108.93,750.697 1109.49,761.104 1110.04,771.274 1110.6,767.932 1111.16,799.623 1111.72,795.704 1112.28,772.918 1112.84,737.133 1113.4,716.483 1113.96,716.874 1114.52,731.148 1115.08,742.688 1115.64,691.313 1116.2,705.678 1116.76,671.422 1117.31,686.482 1117.87,686.845 1118.43,688.103 1118.99,691.446 1119.55,695.013 1120.11,709.952 1120.67,708.794 1121.23,689.453 1121.79,656.18 1122.35,675.557 1122.91,692.977 1123.47,708.897 1124.03,691.526 1124.59,704.13 1125.14,719.278 1125.7,714.446 1126.26,713.716 1126.82,696.493 1127.38,676.822 1127.94,679.528 1128.5,667.24 1129.06,665.019 1129.62,681.625 1130.18,682.835 1130.74,683.972 1131.3,681.999 1131.86,648.703 1132.41,646.552 1132.97,663.375 1133.53,665.635 1134.09,663.151 1134.65,648.235 1135.21,651.523 1135.77,666.959 1136.33,666.768 1136.89,655.934 1137.45,673.874 1138.01,659.139 1138.57,677.051 1139.13,644.814 1139.68,617.305 1140.24,622.209 1140.8,608.336 1141.36,612.501 1141.92,614.884 1142.48,621.323 1143.04,610.089 1143.6,615.89 1144.16,616.162 1144.72,636.082 1145.28,637.29 1145.84,659.601 1146.4,663.475 1146.96,647.917 1147.51,666.376 1148.07,651.732 1148.63,652.294 1149.19,602.899 1149.75,608.379 1150.31,614.392 1150.87,616.968 1151.43,623.754 1151.99,640.211 1152.55,627.942 1153.11,648.858 1153.67,669.335 1154.23,705.22 1154.78,689.383 1155.34,689.824 1155.9,658.989 1156.46,662.498 1157.02,643.44 1157.58,643.468 1158.14,645.445 1158.7,648.275 1159.26,605.822 1159.82,574.727 1160.38,594.694 1160.94,599.375 1161.5,591.263 1162.05,599.315 1162.61,619.112 1163.17,654.114 1163.73,639.885 1164.29,662.685 1164.85,675.295 1165.41,720.079 1165.97,717.447 1166.53,733.1 1167.09,714.698 1167.65,731.918 1168.21,748.085 1168.77,761.723 1169.33,757.091 1169.88,736.237 1170.44,714.366 1171,725.276 1171.56,775 1172.12,748.772 1172.68,699.773 1173.24,717.29 1173.8,717.736 1174.36,719.041 1174.92,766.07 1175.48,776.838 1176.04,754.356 1176.6,784.78 1177.15,777.303 1177.71,737.807 1178.27,733.058 1178.83,730.314 1179.39,711.787 1179.95,708.274 1180.51,704.564 1181.07,720.726 1181.63,716.107 1182.19,731.646 1182.75,728.775 1183.31,756.64 1183.87,753.965 1184.43,764.782 1184.98,731.23 1185.54,746.456 1186.1,777.849 1186.66,819.867 1187.22,827.276 1187.78,815.182 1188.34,828.357 1188.9,806.029 1189.46,733.492 1190.02,711.206 1190.58,675.59 1191.14,692.399 1191.7,675.955 1192.25,743.816 1192.81,758.788 1193.37,769.501 1193.93,780.753 1194.49,724.731 1195.05,768.274 1195.61,784.657 1196.17,761.833 1196.73,724.941 1197.29,717.763 1197.85,715.781 1198.41,664.407 1198.97,681.274 1199.52,697.415 1200.08,677.094 1200.64,661.544 1201.2,695.496 1201.76,694.561 1202.32,660.942 1202.88,693.56 1203.44,682.669 1204,678.654 1204.56,682.33 1205.12,679.519 1205.68,694.594 1206.24,692.736 1206.8,658.186 1207.35,641.312 1207.91,613.639 1208.47,601.3 1209.03,619.94 1209.59,654.931 1210.15,670.337 1210.71,654.696 1211.27,670.217 1211.83,654.213 1212.39,639.371 1212.95,609.701 1213.51,631.02 1214.07,650.496 1214.62,669.504 1215.18,669.263 1215.74,641.516 1216.3,610.916 1216.86,596.981 1217.42,585.684 1217.98,576.309 1218.54,597.284 1219.1,599.355 1219.66,621.308 1220.22,639.475 1220.78,645.509 1221.34,628.957 1221.89,601.155 1222.45,586.268 1223.01,595.041 1223.57,604.413 1224.13,610.169 1224.69,618.166 1225.25,603.978 1225.81,604.766 1226.37,595.137 1226.93,599.925 1227.49,616.304 1228.05,619.397 1228.61,639.036 1229.17,620.874 1229.72,621.488 1230.28,608.118 1230.84,629.716 1231.4,629.754 1231.96,651.968 1232.52,669.157 1233.08,688.624 1233.64,686.003 1234.2,687.802 1234.76,688.031 1235.32,690.372 1235.88,674.373 1236.44,690.735 1236.99,708.153 1237.55,707.003 1238.11,718.262 1238.67,683.313 1239.23,682.914 1239.79,652.136 1240.35,620.637 1240.91,622.689 1241.47,610.901 1242.03,631.915 1242.59,666.766 1243.15,683.934 1243.71,651.008 1244.26,637.066 1244.82,671.396 1245.38,700.947 1245.94,718.65 1246.5,699.931 1247.06,717.717 1247.62,686.488 1248.18,704.962 1248.74,673.59 1249.3,689.995 1249.86,659.191 1250.42,663.336 1250.98,665.421 1251.54,698.51 1252.09,678.877 1252.65,666.887 1253.21,671.739 1253.77,656.532 1254.33,660.883 1254.89,646.239 1255.45,646.051 1256.01,633.807 1256.57,654.079 1257.13,670.491 1257.69,654.428 1258.25,659.874 1258.81,675.253 1259.36,677.525 1259.92,679.008 1260.48,678.451 1261.04,646.38 1261.6,677.238 1262.16,662.988 1262.72,647.138 1263.28,665.516 1263.84,652.631 1264.4,685.428 1264.96,684.716 1265.52,701.046 1266.08,711.97 1266.63,692.414 1267.19,691.854 1267.75,677.817 1268.31,691.98 1268.87,706.739 1269.43,723.434 1269.99,735.841 1270.55,736.783 1271.11,731.915 1271.67,713.156 1272.23,728.877 1272.79,758.283 1273.35,752.604 1273.91,764.524 1274.46,741.957 1275.02,755.638 1275.58,785.716 1276.14,794.292 1276.7,790.433 1277.26,801.521 1277.82,810.313 1278.38,787.003 1278.94,780.836 1279.5,777.791 1280.06,754.897 1280.62,701.162 1281.18,682.716 1281.73,635.383 1282.29,657.509 1282.85,688.361 1283.41,687.352 1283.97,653.194 1284.53,668.401 1285.09,686.398 1285.65,682.294 1286.21,732.28 1286.77,731.636 1287.33,746.983 1287.89,776.445 1288.45,752.835 1289,766.33 1289.56,779.952 1290.12,756.529 1290.68,768.335 1291.24,778.547 1291.8,758.27 1292.36,739.508 1292.92,753.918 1293.48,721.298 1294.04,703.971 1294.6,720.189 1295.16,749.441 1295.72,764.984 1296.28,743.567 1296.83,755.781 1297.39,749.916 1297.95,748.486 1298.51,728.472 1299.07,665.299 1299.63,667.815 1300.19,683.053 1300.75,700.853 1301.31,635.093 1301.87,668.666 1302.43,669.663 1302.99,682.292 1303.55,686.062 1304.1,702.129 1304.66,702.181 1305.22,717.958 1305.78,684.259 1306.34,683.644 1306.9,698.906 1307.46,683.392 1308.02,669.78 1308.58,640.781 1309.14,607.962 1309.7,612.926 1310.26,616.771 1310.82,635.832 1311.38,671.128 1311.93,671.051 1312.49,657.112 1313.05,655.617 1313.61,655.585 1314.17,676.359 1314.73,691.16 1315.29,694.192 1315.85,692.495 1316.41,690.458 1316.97,707.972 1317.53,709.61 1318.09,695.633 1318.65,676.934 1319.2,677.235 1319.76,676.67 1320.32,696.165 1320.88,646.805 1321.44,651.03 1322,650.059 1322.56,603.418 1323.12,613.767 1323.68,649.045 1324.24,649.324 1324.8,649.783 1325.36,683.494 1325.92,684.944 1326.47,683.301 1327.03,700.27 1327.59,680.262 1328.15,666.31 1328.71,698.622 1329.27,697.19 1329.83,711.681 1330.39,694.388 1330.95,710.656 1331.51,709.811 1332.07,692.574 1332.63,694.094 1333.19,696.529 1333.75,696.952 1334.3,694.987 1334.86,740.356 1335.42,738.46 1335.98,738.684 1336.54,716.949 1337.1,715.69 1337.66,683.704 1338.22,711.979 1338.78,741.791 1339.34,753.067 1339.9,765.711 1340.46,765.449 1341.02,824.255 1341.57,800.529 1342.13,809.791 1342.69,768.112 1343.25,762.477 1343.81,759.68 1344.37,723.763 1344.93,737.385 1345.49,735.627 1346.05,698.501 1346.61,664.992 1347.17,663.419 1347.73,695.966 1348.29,709.449 1348.84,691.904 1349.4,689.826 1349.96,687.66 1350.52,670.971 1351.08,640.165 1351.64,626.419 1352.2,645.542 1352.76,693.014 1353.32,692.439 1353.88,660.562 1354.44,663.659 1355,680.775 1355.56,697.413 1356.12,713.324 1356.67,693.449 1357.23,659.966 1357.79,659.769 1358.35,695.939 1358.91,677.297 1359.47,674.897 1360.03,644.188 1360.59,662.666 1361.15,632.333 1361.71,652.121 1362.27,623.589 1362.83,643.881 1363.39,663.102 1363.94,696.249 1364.5,681.365 1365.06,714.443 1365.62,742.737 1366.18,720.932 1366.74,703.152 1367.3,705.01 1367.86,721.538 1368.42,719.829 1368.98,700.157 1369.54,669.788 1370.1,671.688 1370.66,720.469 1371.21,735.957 1371.77,715.774 1372.33,713.1 1372.89,694.512 1373.45,695.997 1374.01,631.402 1374.57,651.589 1375.13,651.315 1375.69,651.054 1376.25,623.346 1376.81,625.216 1377.37,599.085 1377.93,604.2 1378.49,593.621 1379.04,613.393 1379.6,618.326 1380.16,637.95 1380.72,629.395 1381.28,649.457 1381.84,682.088 1382.4,662.816 1382.96,630.871 1383.52,679.959 1384.08,695.994 1384.64,697.762 1385.2,713.971 1385.76,728.145 1386.31,711.089 1386.87,709.569 1387.43,707.629 1387.99,727.237 1388.55,722.988 1389.11,770.36 1389.67,782.698 1390.23,791.221 1390.79,817.588 1391.35,796.447 1391.91,773.753 1392.47,735.776 1393.03,682.436 1393.58,666.971 1394.14,684.732 1394.7,701.788 1395.26,701.773 1395.82,687.805 1396.38,684.582 1396.94,654.352 1397.5,668.95 1398.06,684.835 1398.62,651.616 1399.18,650.424 1399.74,667.299 1400.3,652.198 1400.86,653.779 1401.41,655.659 1401.97,706.994 1402.53,704.957 1403.09,689.277 1403.65,690.635 1404.21,692.928 1404.77,657.949 1405.33,659.564 1405.89,659.449 1406.45,660.401 1407.01,675.135 1407.57,690.249 1408.13,675.116 1408.68,707.971 1409.24,721.657 1409.8,732.238 1410.36,758.108 1410.92,791.858 1411.48,766.705 1412.04,745.229 1412.6,710.954 1413.16,725.006 1413.72,708.784 1414.28,645.348 1414.84,644.64 1415.4,600.338 1415.95,637.754 1416.51,640.656 1417.07,657.503 1417.63,623.019 1418.19,629.271 1418.75,614.844 1419.31,604.957 1419.87,592.319 1420.43,564.459 1420.99,620.965 1421.55,627.533 1422.11,613.836 1422.67,615.762 1423.23,604.697 1423.78,626 1424.34,695.385 1424.9,695.47 1425.46,663.593 1426.02,695.629 1426.58,757.984 1427.14,724.085 1427.7,722.057 1428.26,686.114 1428.82,689.174 1429.38,702.797 1429.94,717.456 1430.5,727.664 1431.05,743.127 1431.61,710.239 1432.17,726.461 1432.73,738.268 1433.29,716.102 1433.85,698.878 1434.41,698.887 1434.97,665.938 1435.53,650.014 1436.09,664.244 1436.65,663.265 1437.21,664.16 1437.77,647.445 1438.33,635.258 1438.88,684.855 1439.44,672.055 1440,645.644 1440.56,616.366 1441.12,604.185 1441.68,622.821 1442.24,642.895 1442.8,679.184 1443.36,664.478 1443.92,649.494 1444.48,636.088 1445.04,637.595 1445.6,641.697 1446.15,663.086 1446.71,633.986 1447.27,632.154 1447.83,618.355 1448.39,618.666 1448.95,638.192 1449.51,623.746 1450.07,640.824 1450.63,643.896 1451.19,660.719 1451.75,644.166 1452.31,647.893 1452.87,685.574 1453.42,699.802 1453.98,698.441 1454.54,700.28 1455.1,700.953 1455.66,686.391 1456.22,683.788 1456.78,683.773 1457.34,671.185 1457.9,720.022 1458.46,684.326 1459.02,698.332 1459.58,699.111 1460.14,651.721 1460.7,684.814 1461.25,683.4 1461.81,682.742 1462.37,652.493 1462.93,640.009 1463.49,624.547 1464.05,593.431 1464.61,630.633 1465.17,661.887 1465.73,647.348 1466.29,645.829 1466.85,631.98 1467.41,666.949 1467.97,650.18 1468.52,654.172 1469.08,658.223 1469.64,676.781 1470.2,680.507 1470.76,682.035 1471.32,666.487 1471.88,686.329 1472.44,688.364 1473,705.551 1473.56,754.617 1474.12,767.168 1474.68,744.358 1475.24,757.559 1475.79,758.048 1476.35,752.607 1476.91,713.537 1477.47,713.343 1478.03,682.376 1478.59,683.133 1479.15,700.841 1479.71,701.561 1480.27,669.702 1480.83,689.704 1481.39,689.892 1481.95,673.601 1482.51,657.77 1483.07,659.876 1483.62,657.881 1484.18,660.692 1484.74,663.22 1485.3,679.087 1485.86,679.705 1486.42,697.044 1486.98,699.116 1487.54,683.042 1488.1,684.728 1488.66,702.311 1489.22,749.526 1489.78,746.817 1490.34,711.858 1490.89,710.01 1491.45,725.143 1492.01,709.408 1492.57,707.179 1493.13,704.392 1493.69,750.231 1494.25,767.997 1494.81,778.191 1495.37,787.528 1495.93,768.548 1496.49,764.685 1497.05,760.974 1497.61,770.778 1498.16,778.906 1498.72,756.195 1499.28,783.389 1499.84,765.29 1500.4,747.073 1500.96,742.1 1501.52,707.756 1502.08,708.036 1502.64,706.383 1503.2,735.217 1503.76,701.394 1504.32,667.534 1504.88,649.862 1505.44,648.521 1505.99,668.554 1506.55,634.676 1507.11,655.046 1507.67,622.017 1508.23,619.434 1508.79,653.85 1509.35,668.634 1509.91,670.273 1510.47,672.323 1511.03,686.431 1511.59,690.667 1512.15,688.728 1512.71,706.77 1513.26,688.613 1513.82,670.346 1514.38,657.309 1514.94,675.611 1515.5,670.568 1516.06,682.92 1516.62,683.571 1517.18,649.033 1517.74,684.874 1518.3,686.888 1518.86,652.784 1519.42,704.164 1519.98,702.252 1520.53,681.565 1521.09,663.671 1521.65,665.044 1522.21,632.665 1522.77,701.739 1523.33,684.195 1523.89,667.301 1524.45,668.941 1525.01,667.709 1525.57,665.435 1526.13,647.918 1526.69,647.686 1527.25,671.563 1527.81,689.201 1528.36,691.156 1528.92,656.978 1529.48,657.242 1530.04,673.605 1530.6,672.102 1531.16,688.909 1531.72,626.82 1532.28,629.279 1532.84,648.718 1533.4,650.825 1533.96,616.984 1534.52,605.011 1535.08,593.826 1535.63,602.615 1536.19,605.799 1536.75,595.514 1537.31,615.755 1537.87,621.363 1538.43,625.421 1538.99,640.936 1539.55,641.483 1540.11,674.704 1540.67,676.065 1541.23,706.532 1541.79,702.694 1542.35,636.382 1542.9,653.356 1543.46,621.92 1544.02,625.257 1544.58,660.184 1545.14,660.102 1545.7,660.421 1546.26,648.498 1546.82,670.033 1547.38,689.336 1547.94,704.98 1548.5,720.474 1549.06,749.657 1549.62,783.101 1550.18,747.121 1550.73,712.713 1551.29,712.382 1551.85,695.788 1552.41,679.721 1552.97,697.122 1553.53,697.623 1554.09,683.123 1554.65,679.999 1555.21,684.177 1555.77,700.571 1556.33,702.578 1556.89,701.869 1557.45,698.495 1558,681.847 1558.56,664.06 1559.12,679.732 1559.68,698.736 1560.24,698.762 1560.8,699.161 1561.36,729.233 1561.92,742.847 1562.48,741.311 1563.04,737.601 1563.6,732.815 1564.16,684.741 1564.72,685.182 1565.28,687.901 1565.83,700.288 1566.39,699.728 1566.95,683.159 1567.51,681.564 1568.07,673.806 1568.63,623.271 1569.19,625.587 1569.75,643.026 1570.31,693.795 1570.87,694.189 1571.43,708.141 1571.99,659.076 1572.55,662.029 1573.1,649.563 1573.66,665.417 1574.22,653.013 1574.78,636.556 1575.34,623.256 1575.9,658.831 1576.46,676.716 1577.02,675.832 1577.58,629.445 1578.14,646.517 1578.7,664.662 1579.26,648.411 1579.82,636.524 1580.37,620.203 1580.93,641.74 1581.49,659.413 1582.05,648.702 1582.61,669.118 1583.17,673.305 1583.73,689.629 1584.29,672.103 1584.85,660.02 1585.41,660.233 1585.97,678.824 1586.53,678.185 1587.09,680.558 1587.65,684.349 1588.2,652.124 1588.76,685.296 1589.32,672.964 1589.88,657.653 1590.44,657.321 1591,628.49 1591.56,647.805 1592.12,648.751 1592.68,631.792 1593.24,601.463 1593.8,601.062 1594.36,605.522 1594.92,595.636 1595.47,615.45 1596.03,622.498 1596.59,623.019 1597.15,659.996 1597.71,677.826 1598.27,645.376 1598.83,712.048 1599.39,710.009 1599.95,676.098 1600.51,644.933 1601.07,661.034 1601.63,678.316 1602.19,691.135 1602.74,709.678 1603.3,705.696 1603.86,685.328 1604.42,654.731 1604.98,671.869 1605.54,671.538 1606.1,676.729 1606.66,708.95 1607.22,723.78 1607.78,738.355 1608.34,720.972 1608.9,705.354 1609.46,639.652 1610.02,640.163 1610.57,656.302 1611.13,655.764 1611.69,675.206 1612.25,677.533 1612.81,660.878 1613.37,643.844 1613.93,646.204 1614.49,650.001 1615.05,651.08 1615.61,622.981 1616.17,656.578 1616.73,658.887 1617.29,662.392 1617.84,697.687 1618.4,711.642 1618.96,677.364 1619.52,695.983 1620.08,681.864 1620.64,667.118 1621.2,651.65 1621.76,637.546 1622.32,625.711 1622.88,634.069 1623.44,653.641 1624,656.231 1624.56,641.083 1625.11,660.488 1625.67,711.497 1626.23,724.621 1626.79,737.894 1627.35,721.17 1627.91,718.342 1628.47,718.813 1629.03,735.498 1629.59,737.701 1630.15,721.387 1630.71,687.317 1631.27,643.331 1631.83,645.683 1632.39,679.557 1632.94,694.57 1633.5,761.124 1634.06,740.442 1634.62,735.725 1635.18,712.906 1635.74,712.031 1636.3,696.462 1636.86,680.266 1637.42,712.725 1637.98,726.076 1638.54,722.612 1639.1,738.809 1639.66,720.894 1640.21,703.294 1640.77,685.812 1641.33,688.076 1641.89,686.087 1642.45,668.054 1643.01,683.259 1643.57,683.789 1644.13,682.941 1644.69,684.384 1645.25,684.194 1645.81,684.756 1646.37,698.087 1646.93,647.731 1647.48,666.416 1648.04,652.533 1648.6,638.15 1649.16,642.261 1649.72,626.289 1650.28,642.867 1650.84,646.229 1651.4,664.117 1651.96,650.355 1652.52,636.184 1653.08,641.723 1653.64,659.118 1654.2,641.398 1654.76,646.005 1655.31,632.356 1655.87,640.549 1656.43,642.548 1656.99,642.686 1657.55,662.732 1658.11,679.713 1658.67,679.074 1659.23,723.457 1659.79,719.369 1660.35,733.01 1660.91,749.026 1661.47,761.858 1662.03,728.046 1662.58,729.717 1663.14,757.406 1663.7,751.928 1664.26,764.703 1664.82,711.715 1665.38,710.722 1665.94,738.759 1666.5,718.976 1667.06,797.778 1667.62,775.475 1668.18,851.27 1668.74,811.69 1669.3,787.917 1669.85,781.071 1670.41,806.732 1670.97,817.539 1671.53,813.085 1672.09,786.502 1672.65,759.765 1673.21,739.105 1673.77,720.827 1674.33,703.939 1674.89,702.54 1675.45,715.986 1676.01,731.818 1676.57,698.014 1677.13,698.064 1677.68,664.122 1678.24,700.615 1678.8,686.479 1679.36,670.023 1679.92,654.543 1680.48,654.175 1681.04,657.476 1681.6,658.763 1682.16,660.603 1682.72,614.946 1683.28,599.902 1683.84,600.235 1684.4,605.901 1684.95,642.724 1685.51,641.651 1686.07,643.253 1686.63,647.111 1687.19,682.084 1687.75,682.006 1688.31,669.236 1688.87,670.022 1689.43,686.087 1689.99,687.264 1690.55,673.299 1691.11,641.027 1691.67,624.039 1692.23,642.585 1692.78,662.642 1693.34,662.721 1693.9,649.286 1694.46,664.795 1695.02,647.941 1695.58,679.532 1696.14,664.976 1696.7,714.236 1697.26,759.158 1697.82,802.445 1698.38,811.494 1698.94,788.804 1699.5,753.697 1700.05,751.684 1700.61,748.527 1701.17,763.379 1701.73,709.603 1702.29,705.486 1702.85,687.604 1703.41,655.431 1703.97,702.485 1704.53,684.362 1705.09,694.771 1705.65,692.14 1706.21,674.623 1706.77,720.855 1707.32,703.344 1707.88,735.238 1708.44,749.754 1709,732.444 1709.56,745.492 1710.12,723.442 1710.68,739.034 1711.24,753.964 1711.8,720.304 1712.36,686.89 1712.92,657.85 1713.48,625.682 1714.04,659.319 1714.6,612.441 1715.15,565.844 1715.71,587.81 1716.27,593.024 1716.83,614.664 1717.39,602.449 1717.95,638.612 1718.51,594.675 1719.07,646.261 1719.63,625.224 1720.19,628.839 1720.75,676.881 1721.31,674.381 1721.87,676.116 1722.42,695.41 1722.98,694.917 1723.54,694.421 1724.1,660.537 1724.66,661.042 1725.22,648.498 1725.78,666.612 1726.34,637.235 1726.9,639.971 1727.46,642.314 1728.02,643.5 1728.58,647.082 1729.14,712.633 1729.69,710.252 1730.25,706.664 1730.81,687.602 1731.37,705.691 1731.93,687.206 1732.49,703.688 1733.05,703.393 1733.61,699.753 1734.17,746.013 1734.73,709.506 1735.29,724.444 1735.85,709.035 1736.41,738.883 1736.97,749.138 1737.52,729.771 1738.08,726.694 1738.64,723.571 1739.2,739.719 1739.76,736.817 1740.32,747.797 1740.88,747.743 1741.44,760.621 1742,757.068 1742.56,768.956 1743.12,782.62 1743.68,764.642 1744.24,741.089 1744.79,752.361 1745.35,750.614 1745.91,746.734 1746.47,729.032 1747.03,725.333 1747.59,708.717 1748.15,702.42 1748.71,684.865 1749.27,684.179 1749.83,731.547 1750.39,711.786 1750.95,743.19 1751.51,757.745 1752.06,753.835 1752.62,751.561 1753.18,794.986 1753.74,818.998 1754.3,808.977 1754.86,770.841 1755.42,784.241 1755.98,779.256 1756.54,788.347 1757.1,767.284 1757.66,760.515 1758.22,753.275 1758.78,745.881 1759.34,727.083 1759.89,708.579 1760.45,707.038 1761.01,676.309 1761.57,675.965 1762.13,675.037 1762.69,691.276 1763.25,678.432 1763.81,681.69 1764.37,684.464 1764.93,638.218 1765.49,611.605 1766.05,693.772 1766.61,697.744 1767.16,712.568 1767.72,693.834 1768.28,693.316 1768.84,726.782 1769.4,723.882 1769.96,689.593 1770.52,687.366 1771.08,656.049 1771.64,688.297 1772.2,669.351 1772.76,684.605 1773.32,683.765 1773.88,667.277 1774.43,651.502 1774.99,670.541 1775.55,654.692 1776.11,657.186 1776.67,658.368 1777.23,640.934 1777.79,641.833 1778.35,659.682 1778.91,630.422 1779.47,650.652 1780.03,633.631 1780.59,656.216 1781.15,677.359 1781.71,676.73 1782.26,680.917 1782.82,683.712 1783.38,698.996 1783.94,712.216 1784.5,676.539 1785.06,680.623 1785.62,696.55 1786.18,680.881 1786.74,694.67 1787.3,663.346 1787.86,651.124 1788.42,653.289 1788.98,672.498 1789.53,656.896 1790.09,656.126 1790.65,656.735 1791.21,655.092 1791.77,642.077 1792.33,626.021 1792.89,595.457 1793.45,599.481 1794.01,553.286 1794.57,546.375 1795.13,520.975 1795.69,543.33 1796.25,585.906 1796.8,592.269 1797.36,629.205 1797.92,613.088 1798.48,618.845 1799.04,607.415 1799.6,592.777 1800.16,581.174 1800.72,600.708 1801.28,607.878 1801.84,610.758 1802.4,601.596 1802.96,604.752 1803.52,610.125 1804.08,598.028 1804.63,573.059 1805.19,612.562 1805.75,634.255 1806.31,622.863 1806.87,625.839 1807.43,597.556 1807.99,603.688 1808.55,606.967 1809.11,624.933 1809.67,626.084 1810.23,659.108 1810.79,694.785 1811.35,710.44 1811.9,726.616 1812.46,724.604 1813.02,723.721 1813.58,736.801 1814.14,735.23 1814.7,732.257 1815.26,727.535 1815.82,722.052 1816.38,718.038 1816.94,717.463 1817.5,715.704 1818.06,712.38 1818.62,696.421 1819.18,710.497 1819.73,738.123 1820.29,751.666 1820.85,746.538 1821.41,775.145 1821.97,756.7 1822.53,739.912 1823.09,738.153 1823.65,735.457 1824.21,751.129 1824.77,746.116 1825.33,724.579 1825.89,736.421 1826.45,752.059 1827,750.203 1827.56,761.882 1828.12,740.188 1828.68,766.375 1829.24,731.522 1829.8,714.274 1830.36,728.596 1830.92,725.705 1831.48,721.981 1832.04,703.48 1832.6,764.546 1833.16,743.441 1833.72,751.915 1834.27,763.613 1834.83,773.669 1835.39,785.268 1835.95,762.116 1836.51,759.705 1837.07,787.497 1837.63,732.857 1838.19,682.478 \"/>\n<path clip-path=\"url(#clip233)\" d=\"M720.247 692.372 L720.806 692.372 L721.365 692.372 L721.924 692.372 L722.484 692.372 L723.043 692.372 L723.602 692.372 L724.161 692.372 L724.721 692.372 L725.28 692.372 L725.839 692.372 L726.398 692.372 L726.958 692.372 L727.517 692.372 L728.076 692.372 L728.635 692.372 L729.195 692.372 L729.754 692.372 L730.313 692.372 L730.872 692.372 L731.432 692.372 L731.991 692.372 L732.55 692.372 L733.109 692.372 L733.669 692.372 L734.228 692.372 L734.787 692.372 L735.346 692.372 L735.906 692.372 L736.465 692.372 L737.024 692.372 L737.583 692.372 L738.143 692.372 L738.702 692.372 L739.261 692.372 L739.82 692.372 L740.38 692.372 L740.939 692.372 L741.498 692.372 L742.057 692.372 L742.617 692.372 L743.176 692.372 L743.735 692.372 L744.294 692.372 L744.854 692.372 L745.413 692.372 L745.972 692.372 L746.531 692.372 L747.091 692.372 L747.65 692.372 L748.209 692.372 L748.768 692.372 L749.328 692.372 L749.887 692.372 L750.446 692.372 L751.005 692.372 L751.565 692.372 L752.124 692.372 L752.683 692.372 L753.242 692.372 L753.802 692.372 L754.361 692.372 L754.92 692.372 L755.479 692.372 L756.039 692.372 L756.598 692.372 L757.157 692.372 L757.716 692.372 L758.276 692.372 L758.835 692.372 L759.394 692.372 L759.953 692.372 L760.513 692.372 L761.072 692.372 L761.631 692.372 L762.19 692.372 L762.75 692.372 L763.309 692.372 L763.868 692.372 L764.427 692.372 L764.987 692.372 L765.546 692.372 L766.105 692.372 L766.664 692.372 L767.224 692.372 L767.783 692.372 L768.342 692.372 L768.901 692.372 L769.461 692.372 L770.02 692.372 L770.579 692.372 L771.138 692.372 L771.698 692.372 L772.257 692.372 L772.816 692.372 L773.375 692.372 L773.935 692.372 L774.494 692.372 L775.053 692.372 L775.612 692.372 L776.172 692.372 L776.731 692.372 L777.29 692.372 L777.849 692.372 L778.409 692.372 L778.968 692.372 L779.527 692.372 L780.086 692.372 L780.646 692.372 L781.205 692.372 L781.764 692.372 L782.323 692.372 L782.883 692.372 L783.442 692.372 L784.001 692.372 L784.56 692.372 L785.12 692.372 L785.679 692.372 L786.238 692.372 L786.797 692.372 L787.357 692.372 L787.916 692.372 L788.475 692.372 L789.034 692.372 L789.594 692.372 L790.153 692.372 L790.712 692.372 L791.271 692.372 L791.831 692.372 L792.39 692.372 L792.949 692.372 L793.508 692.372 L794.068 692.372 L794.627 692.372 L795.186 692.372 L795.745 692.372 L796.305 692.372 L796.864 692.372 L797.423 692.372 L797.982 692.372 L798.542 692.372 L799.101 692.372 L799.66 692.372 L800.219 692.372 L800.779 692.372 L801.338 692.372 L801.897 692.372 L802.456 692.372 L803.016 692.372 L803.575 692.372 L804.134 692.372 L804.693 692.372 L805.253 692.372 L805.812 692.372 L806.371 692.372 L806.931 692.372 L807.49 692.372 L808.049 692.372 L808.608 692.372 L809.168 692.372 L809.727 692.372 L810.286 692.372 L810.845 692.372 L811.405 692.372 L811.964 692.372 L812.523 692.372 L813.082 692.372 L813.642 692.372 L814.201 692.372 L814.76 692.372 L815.319 692.372 L815.879 692.372 L816.438 692.372 L816.997 692.372 L817.556 692.372 L818.116 692.372 L818.675 692.372 L819.234 692.372 L819.793 692.372 L820.353 692.372 L820.912 692.372 L821.471 692.372 L822.03 692.372 L822.59 692.372 L823.149 692.372 L823.708 692.372 L824.267 692.372 L824.827 692.372 L825.386 692.372 L825.945 692.372 L826.504 692.372 L827.064 692.372 L827.623 692.372 L828.182 692.372 L828.741 692.372 L829.301 692.372 L829.86 692.372 L830.419 692.372 L830.978 692.372 L831.538 692.372 L832.097 692.372 L832.656 692.372 L833.215 692.372 L833.775 692.372 L834.334 692.372 L834.893 692.372 L835.452 692.372 L836.012 692.372 L836.571 692.372 L837.13 692.372 L837.689 692.372 L838.249 692.372 L838.808 692.372 L839.367 692.372 L839.926 692.372 L840.486 692.372 L841.045 692.372 L841.604 692.372 L842.163 692.372 L842.723 692.372 L843.282 692.372 L843.841 692.372 L844.4 692.372 L844.96 692.372 L845.519 692.372 L846.078 692.372 L846.637 692.372 L847.197 692.372 L847.756 692.372 L848.315 692.372 L848.874 692.372 L849.434 692.372 L849.993 692.372 L850.552 692.372 L851.111 692.372 L851.671 692.372 L852.23 692.372 L852.789 692.372 L853.348 692.372 L853.908 692.372 L854.467 692.372 L855.026 692.372 L855.585 692.372 L856.145 692.372 L856.704 692.372 L857.263 692.372 L857.822 692.372 L858.382 692.372 L858.941 692.372 L859.5 692.372 L860.059 692.372 L860.619 692.372 L861.178 692.372 L861.737 692.372 L862.296 692.372 L862.856 692.372 L863.415 692.372 L863.974 692.372 L864.533 692.372 L865.093 692.372 L865.652 692.372 L866.211 692.372 L866.77 692.372 L867.33 692.372 L867.889 692.372 L868.448 692.372 L869.007 692.372 L869.567 692.372 L870.126 692.372 L870.685 692.372 L871.244 692.372 L871.804 692.372 L872.363 692.372 L872.922 692.372 L873.481 692.372 L874.041 692.372 L874.6 692.372 L875.159 692.372 L875.718 692.372 L876.278 692.372 L876.837 692.372 L877.396 692.372 L877.955 692.372 L878.515 692.372 L879.074 692.372 L879.633 692.372 L880.192 692.372 L880.752 692.372 L881.311 692.372 L881.87 692.372 L882.429 692.372 L882.989 692.372 L883.548 692.372 L884.107 692.372 L884.666 692.372 L885.226 692.372 L885.785 692.372 L886.344 692.372 L886.903 692.372 L887.463 692.372 L888.022 692.372 L888.581 692.372 L889.14 692.372 L889.7 692.372 L890.259 692.372 L890.818 692.372 L891.377 692.372 L891.937 692.372 L892.496 692.372 L893.055 692.372 L893.614 692.372 L894.174 692.372 L894.733 692.372 L895.292 692.372 L895.851 692.372 L896.411 692.372 L896.97 692.372 L897.529 692.372 L898.088 692.372 L898.648 692.372 L899.207 692.372 L899.766 692.372 L900.325 692.372 L900.885 692.372 L901.444 692.372 L902.003 692.372 L902.562 692.372 L903.122 692.372 L903.681 692.372 L904.24 692.372 L904.799 692.372 L905.359 692.372 L905.918 692.372 L906.477 692.372 L907.036 692.372 L907.596 692.372 L908.155 692.372 L908.714 692.372 L909.273 692.372 L909.833 692.372 L910.392 692.372 L910.951 692.372 L911.51 692.372 L912.07 692.372 L912.629 692.372 L913.188 692.372 L913.747 692.372 L914.307 692.372 L914.866 692.372 L915.425 692.372 L915.984 692.372 L916.544 692.372 L917.103 692.372 L917.662 692.372 L918.221 692.372 L918.781 692.372 L919.34 692.372 L919.899 692.372 L920.458 692.372 L921.018 692.372 L921.577 692.372 L922.136 692.372 L922.695 692.372 L923.255 692.372 L923.814 692.372 L924.373 692.372 L924.932 692.372 L925.492 692.372 L926.051 692.372 L926.61 692.372 L927.169 692.372 L927.729 692.372 L928.288 692.372 L928.847 692.372 L929.406 692.372 L929.966 692.372 L930.525 692.372 L931.084 692.372 L931.644 692.372 L932.203 692.372 L932.762 692.372 L933.321 692.372 L933.881 692.372 L934.44 692.372 L934.999 692.372 L935.558 692.372 L936.118 692.372 L936.677 692.372 L937.236 692.372 L937.795 692.372 L938.355 692.372 L938.914 692.372 L939.473 692.372 L940.032 692.372 L940.592 692.372 L941.151 692.372 L941.71 692.372 L942.269 692.372 L942.829 692.372 L943.388 692.372 L943.947 692.372 L944.506 692.372 L945.066 692.372 L945.625 692.372 L946.184 692.372 L946.743 692.372 L947.303 692.372 L947.862 692.372 L948.421 692.372 L948.98 692.372 L949.54 692.372 L950.099 692.372 L950.658 692.372 L951.217 692.372 L951.777 692.372 L952.336 692.372 L952.895 692.372 L953.454 692.372 L954.014 692.372 L954.573 692.372 L955.132 692.372 L955.691 692.372 L956.251 692.372 L956.81 692.372 L957.369 692.372 L957.928 692.372 L958.488 692.372 L959.047 692.372 L959.606 692.372 L960.165 692.372 L960.725 692.372 L961.284 692.372 L961.843 692.372 L962.402 692.372 L962.962 692.372 L963.521 692.372 L964.08 692.372 L964.639 692.372 L965.199 692.372 L965.758 692.372 L966.317 692.372 L966.876 692.372 L967.436 692.372 L967.995 692.372 L968.554 692.372 L969.113 692.372 L969.673 692.372 L970.232 692.372 L970.791 692.372 L971.35 692.372 L971.91 692.372 L972.469 692.372 L973.028 692.372 L973.587 692.372 L974.147 692.372 L974.706 692.372 L975.265 692.372 L975.824 692.372 L976.384 692.372 L976.943 692.372 L977.502 692.372 L978.061 692.372 L978.621 692.372 L979.18 692.372 L979.739 692.372 L980.298 692.372 L980.858 692.372 L981.417 692.372 L981.976 692.372 L982.535 692.372 L983.095 692.372 L983.654 692.372 L984.213 692.372 L984.772 692.372 L985.332 692.372 L985.891 692.372 L986.45 692.372 L987.009 692.372 L987.569 692.372 L988.128 692.372 L988.687 692.372 L989.246 692.372 L989.806 692.372 L990.365 692.372 L990.924 692.372 L991.483 692.372 L992.043 692.372 L992.602 692.372 L993.161 692.372 L993.72 692.372 L994.28 692.372 L994.839 692.372 L995.398 692.372 L995.957 692.372 L996.517 692.372 L997.076 692.372 L997.635 692.372 L998.194 692.372 L998.754 692.372 L999.313 692.372 L999.872 692.372 L1000.43 692.372 L1000.99 692.372 L1001.55 692.372 L1002.11 692.372 L1002.67 692.372 L1003.23 692.372 L1003.79 692.372 L1004.35 692.372 L1004.91 692.372 L1005.46 692.372 L1006.02 692.372 L1006.58 692.372 L1007.14 692.372 L1007.7 692.372 L1008.26 692.372 L1008.82 692.372 L1009.38 692.372 L1009.94 692.372 L1010.5 692.372 L1011.06 692.372 L1011.62 692.372 L1012.18 692.372 L1012.73 692.372 L1013.29 692.372 L1013.85 692.372 L1014.41 692.372 L1014.97 692.372 L1015.53 692.372 L1016.09 692.372 L1016.65 692.372 L1017.21 692.372 L1017.77 692.372 L1018.33 692.372 L1018.89 692.372 L1019.45 692.372 L1020.01 692.372 L1020.56 692.372 L1021.12 692.372 L1021.68 692.372 L1022.24 692.372 L1022.8 692.372 L1023.36 692.372 L1023.92 692.372 L1024.48 692.372 L1025.04 692.372 L1025.6 692.372 L1026.16 692.372 L1026.72 692.372 L1027.28 692.372 L1027.83 692.372 L1028.39 692.372 L1028.95 692.372 L1029.51 692.372 L1030.07 692.372 L1030.63 692.372 L1031.19 692.372 L1031.75 692.372 L1032.31 692.372 L1032.87 692.372 L1033.43 692.372 L1033.99 692.372 L1034.55 692.372 L1035.1 692.372 L1035.66 692.372 L1036.22 692.372 L1036.78 692.372 L1037.34 692.372 L1037.9 692.372 L1038.46 692.372 L1039.02 692.372 L1039.58 692.372 L1040.14 692.372 L1040.7 692.372 L1041.26 692.372 L1041.82 692.372 L1042.38 692.372 L1042.93 692.372 L1043.49 692.372 L1044.05 692.372 L1044.61 692.372 L1045.17 692.372 L1045.73 692.372 L1046.29 692.372 L1046.85 692.372 L1047.41 692.372 L1047.97 692.372 L1048.53 692.372 L1049.09 692.372 L1049.65 692.372 L1050.2 692.372 L1050.76 692.372 L1051.32 692.372 L1051.88 692.372 L1052.44 692.372 L1053 692.372 L1053.56 692.372 L1054.12 692.372 L1054.68 692.372 L1055.24 692.372 L1055.8 692.372 L1056.36 692.372 L1056.92 692.372 L1057.48 692.372 L1058.03 692.372 L1058.59 692.372 L1059.15 692.372 L1059.71 692.372 L1060.27 692.372 L1060.83 692.372 L1061.39 692.372 L1061.95 692.372 L1062.51 692.372 L1063.07 692.372 L1063.63 692.372 L1064.19 692.372 L1064.75 692.372 L1065.3 692.372 L1065.86 692.372 L1066.42 692.372 L1066.98 692.372 L1067.54 692.372 L1068.1 692.372 L1068.66 692.372 L1069.22 692.372 L1069.78 692.372 L1070.34 692.372 L1070.9 692.372 L1071.46 692.372 L1072.02 692.372 L1072.57 692.372 L1073.13 692.372 L1073.69 692.372 L1074.25 692.372 L1074.81 692.372 L1075.37 692.372 L1075.93 692.372 L1076.49 692.372 L1077.05 692.372 L1077.61 692.372 L1078.17 692.372 L1078.73 692.372 L1079.29 692.372 L1079.85 692.372 L1080.4 692.372 L1080.96 692.372 L1081.52 692.372 L1082.08 692.372 L1082.64 692.372 L1083.2 692.372 L1083.76 692.372 L1084.32 692.372 L1084.88 692.372 L1085.44 692.372 L1086 692.372 L1086.56 692.372 L1087.12 692.372 L1087.67 692.372 L1088.23 692.372 L1088.79 692.372 L1089.35 692.372 L1089.91 692.372 L1090.47 692.372 L1091.03 692.372 L1091.59 692.372 L1092.15 692.372 L1092.71 692.372 L1093.27 692.372 L1093.83 692.372 L1094.39 692.372 L1094.94 692.372 L1095.5 692.372 L1096.06 692.372 L1096.62 692.372 L1097.18 692.372 L1097.74 692.372 L1098.3 692.372 L1098.86 692.372 L1099.42 692.372 L1099.98 692.372 L1100.54 692.372 L1101.1 692.372 L1101.66 692.372 L1102.22 692.372 L1102.77 692.372 L1103.33 692.372 L1103.89 692.372 L1104.45 692.372 L1105.01 692.372 L1105.57 692.372 L1106.13 692.372 L1106.69 692.372 L1107.25 692.372 L1107.81 692.372 L1108.37 692.372 L1108.93 692.372 L1109.49 692.372 L1110.04 692.372 L1110.6 692.372 L1111.16 692.372 L1111.72 692.372 L1112.28 692.372 L1112.84 692.372 L1113.4 692.372 L1113.96 692.372 L1114.52 692.372 L1115.08 692.372 L1115.64 692.372 L1116.2 692.372 L1116.76 692.372 L1117.31 692.372 L1117.87 692.372 L1118.43 692.372 L1118.99 692.372 L1119.55 692.372 L1120.11 692.372 L1120.67 692.372 L1121.23 692.372 L1121.79 692.372 L1122.35 692.372 L1122.91 692.372 L1123.47 692.372 L1124.03 692.372 L1124.59 692.372 L1125.14 692.372 L1125.7 692.372 L1126.26 692.372 L1126.82 692.372 L1127.38 692.372 L1127.94 692.372 L1128.5 692.372 L1129.06 692.372 L1129.62 692.372 L1130.18 692.372 L1130.74 692.372 L1131.3 692.372 L1131.86 692.372 L1132.41 692.372 L1132.97 692.372 L1133.53 692.372 L1134.09 692.372 L1134.65 692.372 L1135.21 692.372 L1135.77 692.372 L1136.33 692.372 L1136.89 692.372 L1137.45 692.372 L1138.01 692.372 L1138.57 692.372 L1139.13 692.372 L1139.68 692.372 L1140.24 692.372 L1140.8 692.372 L1141.36 692.372 L1141.92 692.372 L1142.48 692.372 L1143.04 692.372 L1143.6 692.372 L1144.16 692.372 L1144.72 692.372 L1145.28 692.372 L1145.84 692.372 L1146.4 692.372 L1146.96 692.372 L1147.51 692.372 L1148.07 692.372 L1148.63 692.372 L1149.19 692.372 L1149.75 692.372 L1150.31 692.372 L1150.87 692.372 L1151.43 692.372 L1151.99 692.372 L1152.55 692.372 L1153.11 692.372 L1153.67 692.372 L1154.23 692.372 L1154.78 692.372 L1155.34 692.372 L1155.9 692.372 L1156.46 692.372 L1157.02 692.372 L1157.58 692.372 L1158.14 692.372 L1158.7 692.372 L1159.26 692.372 L1159.82 692.372 L1160.38 692.372 L1160.94 692.372 L1161.5 692.372 L1162.05 692.372 L1162.61 692.372 L1163.17 692.372 L1163.73 692.372 L1164.29 692.372 L1164.85 692.372 L1165.41 692.372 L1165.97 692.372 L1166.53 692.372 L1167.09 692.372 L1167.65 692.372 L1168.21 692.372 L1168.77 692.372 L1169.33 692.372 L1169.88 692.372 L1170.44 692.372 L1171 692.372 L1171.56 692.372 L1172.12 692.372 L1172.68 692.372 L1173.24 692.372 L1173.8 692.372 L1174.36 692.372 L1174.92 692.372 L1175.48 692.372 L1176.04 692.372 L1176.6 692.372 L1177.15 692.372 L1177.71 692.372 L1178.27 692.372 L1178.83 692.372 L1179.39 692.372 L1179.95 692.372 L1180.51 692.372 L1181.07 692.372 L1181.63 692.372 L1182.19 692.372 L1182.75 692.372 L1183.31 692.372 L1183.87 692.372 L1184.43 692.372 L1184.98 692.372 L1185.54 692.372 L1186.1 692.372 L1186.66 692.372 L1187.22 692.372 L1187.78 692.372 L1188.34 692.372 L1188.9 692.372 L1189.46 692.372 L1190.02 692.372 L1190.58 692.372 L1191.14 692.372 L1191.7 692.372 L1192.25 692.372 L1192.81 692.372 L1193.37 692.372 L1193.93 692.372 L1194.49 692.372 L1195.05 692.372 L1195.61 692.372 L1196.17 692.372 L1196.73 692.372 L1197.29 692.372 L1197.85 692.372 L1198.41 692.372 L1198.97 692.372 L1199.52 692.372 L1200.08 692.372 L1200.64 692.372 L1201.2 692.372 L1201.76 692.372 L1202.32 692.372 L1202.88 692.372 L1203.44 692.372 L1204 692.372 L1204.56 692.372 L1205.12 692.372 L1205.68 692.372 L1206.24 692.372 L1206.8 692.372 L1207.35 692.372 L1207.91 692.372 L1208.47 692.372 L1209.03 692.372 L1209.59 692.372 L1210.15 692.372 L1210.71 692.372 L1211.27 692.372 L1211.83 692.372 L1212.39 692.372 L1212.95 692.372 L1213.51 692.372 L1214.07 692.372 L1214.62 692.372 L1215.18 692.372 L1215.74 692.372 L1216.3 692.372 L1216.86 692.372 L1217.42 692.372 L1217.98 692.372 L1218.54 692.372 L1219.1 692.372 L1219.66 692.372 L1220.22 692.372 L1220.78 692.372 L1221.34 692.372 L1221.89 692.372 L1222.45 692.372 L1223.01 692.372 L1223.57 692.372 L1224.13 692.372 L1224.69 692.372 L1225.25 692.372 L1225.81 692.372 L1226.37 692.372 L1226.93 692.372 L1227.49 692.372 L1228.05 692.372 L1228.61 692.372 L1229.17 692.372 L1229.72 692.372 L1230.28 692.372 L1230.84 692.372 L1231.4 692.372 L1231.96 692.372 L1232.52 692.372 L1233.08 692.372 L1233.64 692.372 L1234.2 692.372 L1234.76 692.372 L1235.32 692.372 L1235.88 692.372 L1236.44 692.372 L1236.99 692.372 L1237.55 692.372 L1238.11 692.372 L1238.67 692.372 L1239.23 692.372 L1239.79 692.372 L1240.35 692.372 L1240.91 692.372 L1241.47 692.372 L1242.03 692.372 L1242.59 692.372 L1243.15 692.372 L1243.71 692.372 L1244.26 692.372 L1244.82 692.372 L1245.38 692.372 L1245.94 692.372 L1246.5 692.372 L1247.06 692.372 L1247.62 692.372 L1248.18 692.372 L1248.74 692.372 L1249.3 692.372 L1249.86 692.372 L1250.42 692.372 L1250.98 692.372 L1251.54 692.372 L1252.09 692.372 L1252.65 692.372 L1253.21 692.372 L1253.77 692.372 L1254.33 692.372 L1254.89 692.372 L1255.45 692.372 L1256.01 692.372 L1256.57 692.372 L1257.13 692.372 L1257.69 692.372 L1258.25 692.372 L1258.81 692.372 L1259.36 692.372 L1259.92 692.372 L1260.48 692.372 L1261.04 692.372 L1261.6 692.372 L1262.16 692.372 L1262.72 692.372 L1263.28 692.372 L1263.84 692.372 L1264.4 692.372 L1264.96 692.372 L1265.52 692.372 L1266.08 692.372 L1266.63 692.372 L1267.19 692.372 L1267.75 692.372 L1268.31 692.372 L1268.87 692.372 L1269.43 692.372 L1269.99 692.372 L1270.55 692.372 L1271.11 692.372 L1271.67 692.372 L1272.23 692.372 L1272.79 692.372 L1273.35 692.372 L1273.91 692.372 L1274.46 692.372 L1275.02 692.372 L1275.58 692.372 L1276.14 692.372 L1276.7 692.372 L1277.26 692.372 L1277.82 692.372 L1278.38 692.372 L1278.94 692.372 L1279.5 692.372 L1280.06 692.372 L1280.62 692.372 L1281.18 692.372 L1281.73 692.372 L1282.29 692.372 L1282.85 692.372 L1283.41 692.372 L1283.97 692.372 L1284.53 692.372 L1285.09 692.372 L1285.65 692.372 L1286.21 692.372 L1286.77 692.372 L1287.33 692.372 L1287.89 692.372 L1288.45 692.372 L1289 692.372 L1289.56 692.372 L1290.12 692.372 L1290.68 692.372 L1291.24 692.372 L1291.8 692.372 L1292.36 692.372 L1292.92 692.372 L1293.48 692.372 L1294.04 692.372 L1294.6 692.372 L1295.16 692.372 L1295.72 692.372 L1296.28 692.372 L1296.83 692.372 L1297.39 692.372 L1297.95 692.372 L1298.51 692.372 L1299.07 692.372 L1299.63 692.372 L1300.19 692.372 L1300.75 692.372 L1301.31 692.372 L1301.87 692.372 L1302.43 692.372 L1302.99 692.372 L1303.55 692.372 L1304.1 692.372 L1304.66 692.372 L1305.22 692.372 L1305.78 692.372 L1306.34 692.372 L1306.9 692.372 L1307.46 692.372 L1308.02 692.372 L1308.58 692.372 L1309.14 692.372 L1309.7 692.372 L1310.26 692.372 L1310.82 692.372 L1311.38 692.372 L1311.93 692.372 L1312.49 692.372 L1313.05 692.372 L1313.61 692.372 L1314.17 692.372 L1314.73 692.372 L1315.29 692.372 L1315.85 692.372 L1316.41 692.372 L1316.97 692.372 L1317.53 692.372 L1318.09 692.372 L1318.65 692.372 L1319.2 692.372 L1319.76 692.372 L1320.32 692.372 L1320.88 692.372 L1321.44 692.372 L1322 692.372 L1322.56 692.372 L1323.12 692.372 L1323.68 692.372 L1324.24 692.372 L1324.8 692.372 L1325.36 692.372 L1325.92 692.372 L1326.47 692.372 L1327.03 692.372 L1327.59 692.372 L1328.15 692.372 L1328.71 692.372 L1329.27 692.372 L1329.83 692.372 L1330.39 692.372 L1330.95 692.372 L1331.51 692.372 L1332.07 692.372 L1332.63 692.372 L1333.19 692.372 L1333.75 692.372 L1334.3 692.372 L1334.86 692.372 L1335.42 692.372 L1335.98 692.372 L1336.54 692.372 L1337.1 692.372 L1337.66 692.372 L1338.22 692.372 L1338.78 692.372 L1339.34 692.372 L1339.9 692.372 L1340.46 692.372 L1341.02 692.372 L1341.57 692.372 L1342.13 692.372 L1342.69 692.372 L1343.25 692.372 L1343.81 692.372 L1344.37 692.372 L1344.93 692.372 L1345.49 692.372 L1346.05 692.372 L1346.61 692.372 L1347.17 692.372 L1347.73 692.372 L1348.29 692.372 L1348.84 692.372 L1349.4 692.372 L1349.96 692.372 L1350.52 692.372 L1351.08 692.372 L1351.64 692.372 L1352.2 692.372 L1352.76 692.372 L1353.32 692.372 L1353.88 692.372 L1354.44 692.372 L1355 692.372 L1355.56 692.372 L1356.12 692.372 L1356.67 692.372 L1357.23 692.372 L1357.79 692.372 L1358.35 692.372 L1358.91 692.372 L1359.47 692.372 L1360.03 692.372 L1360.59 692.372 L1361.15 692.372 L1361.71 692.372 L1362.27 692.372 L1362.83 692.372 L1363.39 692.372 L1363.94 692.372 L1364.5 692.372 L1365.06 692.372 L1365.62 692.372 L1366.18 692.372 L1366.74 692.372 L1367.3 692.372 L1367.86 692.372 L1368.42 692.372 L1368.98 692.372 L1369.54 692.372 L1370.1 692.372 L1370.66 692.372 L1371.21 692.372 L1371.77 692.372 L1372.33 692.372 L1372.89 692.372 L1373.45 692.372 L1374.01 692.372 L1374.57 692.372 L1375.13 692.372 L1375.69 692.372 L1376.25 692.372 L1376.81 692.372 L1377.37 692.372 L1377.93 692.372 L1378.49 692.372 L1379.04 692.372 L1379.6 692.372 L1380.16 692.372 L1380.72 692.372 L1381.28 692.372 L1381.84 692.372 L1382.4 692.372 L1382.96 692.372 L1383.52 692.372 L1384.08 692.372 L1384.64 692.372 L1385.2 692.372 L1385.76 692.372 L1386.31 692.372 L1386.87 692.372 L1387.43 692.372 L1387.99 692.372 L1388.55 692.372 L1389.11 692.372 L1389.67 692.372 L1390.23 692.372 L1390.79 692.372 L1391.35 692.372 L1391.91 692.372 L1392.47 692.372 L1393.03 692.372 L1393.58 692.372 L1394.14 692.372 L1394.7 692.372 L1395.26 692.372 L1395.82 692.372 L1396.38 692.372 L1396.94 692.372 L1397.5 692.372 L1398.06 692.372 L1398.62 692.372 L1399.18 692.372 L1399.74 692.372 L1400.3 692.372 L1400.86 692.372 L1401.41 692.372 L1401.97 692.372 L1402.53 692.372 L1403.09 692.372 L1403.65 692.372 L1404.21 692.372 L1404.77 692.372 L1405.33 692.372 L1405.89 692.372 L1406.45 692.372 L1407.01 692.372 L1407.57 692.372 L1408.13 692.372 L1408.68 692.372 L1409.24 692.372 L1409.8 692.372 L1410.36 692.372 L1410.92 692.372 L1411.48 692.372 L1412.04 692.372 L1412.6 692.372 L1413.16 692.372 L1413.72 692.372 L1414.28 692.372 L1414.84 692.372 L1415.4 692.372 L1415.95 692.372 L1416.51 692.372 L1417.07 692.372 L1417.63 692.372 L1418.19 692.372 L1418.75 692.372 L1419.31 692.372 L1419.87 692.372 L1420.43 692.372 L1420.99 692.372 L1421.55 692.372 L1422.11 692.372 L1422.67 692.372 L1423.23 692.372 L1423.78 692.372 L1424.34 692.372 L1424.9 692.372 L1425.46 692.372 L1426.02 692.372 L1426.58 692.372 L1427.14 692.372 L1427.7 692.372 L1428.26 692.372 L1428.82 692.372 L1429.38 692.372 L1429.94 692.372 L1430.5 692.372 L1431.05 692.372 L1431.61 692.372 L1432.17 692.372 L1432.73 692.372 L1433.29 692.372 L1433.85 692.372 L1434.41 692.372 L1434.97 692.372 L1435.53 692.372 L1436.09 692.372 L1436.65 692.372 L1437.21 692.372 L1437.77 692.372 L1438.33 692.372 L1438.88 692.372 L1439.44 692.372 L1440 692.372 L1440.56 692.372 L1441.12 692.372 L1441.68 692.372 L1442.24 692.372 L1442.8 692.372 L1443.36 692.372 L1443.92 692.372 L1444.48 692.372 L1445.04 692.372 L1445.6 692.372 L1446.15 692.372 L1446.71 692.372 L1447.27 692.372 L1447.83 692.372 L1448.39 692.372 L1448.95 692.372 L1449.51 692.372 L1450.07 692.372 L1450.63 692.372 L1451.19 692.372 L1451.75 692.372 L1452.31 692.372 L1452.87 692.372 L1453.42 692.372 L1453.98 692.372 L1454.54 692.372 L1455.1 692.372 L1455.66 692.372 L1456.22 692.372 L1456.78 692.372 L1457.34 692.372 L1457.9 692.372 L1458.46 692.372 L1459.02 692.372 L1459.58 692.372 L1460.14 692.372 L1460.7 692.372 L1461.25 692.372 L1461.81 692.372 L1462.37 692.372 L1462.93 692.372 L1463.49 692.372 L1464.05 692.372 L1464.61 692.372 L1465.17 692.372 L1465.73 692.372 L1466.29 692.372 L1466.85 692.372 L1467.41 692.372 L1467.97 692.372 L1468.52 692.372 L1469.08 692.372 L1469.64 692.372 L1470.2 692.372 L1470.76 692.372 L1471.32 692.372 L1471.88 692.372 L1472.44 692.372 L1473 692.372 L1473.56 692.372 L1474.12 692.372 L1474.68 692.372 L1475.24 692.372 L1475.79 692.372 L1476.35 692.372 L1476.91 692.372 L1477.47 692.372 L1478.03 692.372 L1478.59 692.372 L1479.15 692.372 L1479.71 692.372 L1480.27 692.372 L1480.83 692.372 L1481.39 692.372 L1481.95 692.372 L1482.51 692.372 L1483.07 692.372 L1483.62 692.372 L1484.18 692.372 L1484.74 692.372 L1485.3 692.372 L1485.86 692.372 L1486.42 692.372 L1486.98 692.372 L1487.54 692.372 L1488.1 692.372 L1488.66 692.372 L1489.22 692.372 L1489.78 692.372 L1490.34 692.372 L1490.89 692.372 L1491.45 692.372 L1492.01 692.372 L1492.57 692.372 L1493.13 692.372 L1493.69 692.372 L1494.25 692.372 L1494.81 692.372 L1495.37 692.372 L1495.93 692.372 L1496.49 692.372 L1497.05 692.372 L1497.61 692.372 L1498.16 692.372 L1498.72 692.372 L1499.28 692.372 L1499.84 692.372 L1500.4 692.372 L1500.96 692.372 L1501.52 692.372 L1502.08 692.372 L1502.64 692.372 L1503.2 692.372 L1503.76 692.372 L1504.32 692.372 L1504.88 692.372 L1505.44 692.372 L1505.99 692.372 L1506.55 692.372 L1507.11 692.372 L1507.67 692.372 L1508.23 692.372 L1508.79 692.372 L1509.35 692.372 L1509.91 692.372 L1510.47 692.372 L1511.03 692.372 L1511.59 692.372 L1512.15 692.372 L1512.71 692.372 L1513.26 692.372 L1513.82 692.372 L1514.38 692.372 L1514.94 692.372 L1515.5 692.372 L1516.06 692.372 L1516.62 692.372 L1517.18 692.372 L1517.74 692.372 L1518.3 692.372 L1518.86 692.372 L1519.42 692.372 L1519.98 692.372 L1520.53 692.372 L1521.09 692.372 L1521.65 692.372 L1522.21 692.372 L1522.77 692.372 L1523.33 692.372 L1523.89 692.372 L1524.45 692.372 L1525.01 692.372 L1525.57 692.372 L1526.13 692.372 L1526.69 692.372 L1527.25 692.372 L1527.81 692.372 L1528.36 692.372 L1528.92 692.372 L1529.48 692.372 L1530.04 692.372 L1530.6 692.372 L1531.16 692.372 L1531.72 692.372 L1532.28 692.372 L1532.84 692.372 L1533.4 692.372 L1533.96 692.372 L1534.52 692.372 L1535.08 692.372 L1535.63 692.372 L1536.19 692.372 L1536.75 692.372 L1537.31 692.372 L1537.87 692.372 L1538.43 692.372 L1538.99 692.372 L1539.55 692.372 L1540.11 692.372 L1540.67 692.372 L1541.23 692.372 L1541.79 692.372 L1542.35 692.372 L1542.9 692.372 L1543.46 692.372 L1544.02 692.372 L1544.58 692.372 L1545.14 692.372 L1545.7 692.372 L1546.26 692.372 L1546.82 692.372 L1547.38 692.372 L1547.94 692.372 L1548.5 692.372 L1549.06 692.372 L1549.62 692.372 L1550.18 692.372 L1550.73 692.372 L1551.29 692.372 L1551.85 692.372 L1552.41 692.372 L1552.97 692.372 L1553.53 692.372 L1554.09 692.372 L1554.65 692.372 L1555.21 692.372 L1555.77 692.372 L1556.33 692.372 L1556.89 692.372 L1557.45 692.372 L1558 692.372 L1558.56 692.372 L1559.12 692.372 L1559.68 692.372 L1560.24 692.372 L1560.8 692.372 L1561.36 692.372 L1561.92 692.372 L1562.48 692.372 L1563.04 692.372 L1563.6 692.372 L1564.16 692.372 L1564.72 692.372 L1565.28 692.372 L1565.83 692.372 L1566.39 692.372 L1566.95 692.372 L1567.51 692.372 L1568.07 692.372 L1568.63 692.372 L1569.19 692.372 L1569.75 692.372 L1570.31 692.372 L1570.87 692.372 L1571.43 692.372 L1571.99 692.372 L1572.55 692.372 L1573.1 692.372 L1573.66 692.372 L1574.22 692.372 L1574.78 692.372 L1575.34 692.372 L1575.9 692.372 L1576.46 692.372 L1577.02 692.372 L1577.58 692.372 L1578.14 692.372 L1578.7 692.372 L1579.26 692.372 L1579.82 692.372 L1580.37 692.372 L1580.93 692.372 L1581.49 692.372 L1582.05 692.372 L1582.61 692.372 L1583.17 692.372 L1583.73 692.372 L1584.29 692.372 L1584.85 692.372 L1585.41 692.372 L1585.97 692.372 L1586.53 692.372 L1587.09 692.372 L1587.65 692.372 L1588.2 692.372 L1588.76 692.372 L1589.32 692.372 L1589.88 692.372 L1590.44 692.372 L1591 692.372 L1591.56 692.372 L1592.12 692.372 L1592.68 692.372 L1593.24 692.372 L1593.8 692.372 L1594.36 692.372 L1594.92 692.372 L1595.47 692.372 L1596.03 692.372 L1596.59 692.372 L1597.15 692.372 L1597.71 692.372 L1598.27 692.372 L1598.83 692.372 L1599.39 692.372 L1599.95 692.372 L1600.51 692.372 L1601.07 692.372 L1601.63 692.372 L1602.19 692.372 L1602.74 692.372 L1603.3 692.372 L1603.86 692.372 L1604.42 692.372 L1604.98 692.372 L1605.54 692.372 L1606.1 692.372 L1606.66 692.372 L1607.22 692.372 L1607.78 692.372 L1608.34 692.372 L1608.9 692.372 L1609.46 692.372 L1610.02 692.372 L1610.57 692.372 L1611.13 692.372 L1611.69 692.372 L1612.25 692.372 L1612.81 692.372 L1613.37 692.372 L1613.93 692.372 L1614.49 692.372 L1615.05 692.372 L1615.61 692.372 L1616.17 692.372 L1616.73 692.372 L1617.29 692.372 L1617.84 692.372 L1618.4 692.372 L1618.96 692.372 L1619.52 692.372 L1620.08 692.372 L1620.64 692.372 L1621.2 692.372 L1621.76 692.372 L1622.32 692.372 L1622.88 692.372 L1623.44 692.372 L1624 692.372 L1624.56 692.372 L1625.11 692.372 L1625.67 692.372 L1626.23 692.372 L1626.79 692.372 L1627.35 692.372 L1627.91 692.372 L1628.47 692.372 L1629.03 692.372 L1629.59 692.372 L1630.15 692.372 L1630.71 692.372 L1631.27 692.372 L1631.83 692.372 L1632.39 692.372 L1632.94 692.372 L1633.5 692.372 L1634.06 692.372 L1634.62 692.372 L1635.18 692.372 L1635.74 692.372 L1636.3 692.372 L1636.86 692.372 L1637.42 692.372 L1637.98 692.372 L1638.54 692.372 L1639.1 692.372 L1639.66 692.372 L1640.21 692.372 L1640.77 692.372 L1641.33 692.372 L1641.89 692.372 L1642.45 692.372 L1643.01 692.372 L1643.57 692.372 L1644.13 692.372 L1644.69 692.372 L1645.25 692.372 L1645.81 692.372 L1646.37 692.372 L1646.93 692.372 L1647.48 692.372 L1648.04 692.372 L1648.6 692.372 L1649.16 692.372 L1649.72 692.372 L1650.28 692.372 L1650.84 692.372 L1651.4 692.372 L1651.96 692.372 L1652.52 692.372 L1653.08 692.372 L1653.64 692.372 L1654.2 692.372 L1654.76 692.372 L1655.31 692.372 L1655.87 692.372 L1656.43 692.372 L1656.99 692.372 L1657.55 692.372 L1658.11 692.372 L1658.67 692.372 L1659.23 692.372 L1659.79 692.372 L1660.35 692.372 L1660.91 692.372 L1661.47 692.372 L1662.03 692.372 L1662.58 692.372 L1663.14 692.372 L1663.7 692.372 L1664.26 692.372 L1664.82 692.372 L1665.38 692.372 L1665.94 692.372 L1666.5 692.372 L1667.06 692.372 L1667.62 692.372 L1668.18 692.372 L1668.74 692.372 L1669.3 692.372 L1669.85 692.372 L1670.41 692.372 L1670.97 692.372 L1671.53 692.372 L1672.09 692.372 L1672.65 692.372 L1673.21 692.372 L1673.77 692.372 L1674.33 692.372 L1674.89 692.372 L1675.45 692.372 L1676.01 692.372 L1676.57 692.372 L1677.13 692.372 L1677.68 692.372 L1678.24 692.372 L1678.8 692.372 L1679.36 692.372 L1679.92 692.372 L1680.48 692.372 L1681.04 692.372 L1681.6 692.372 L1682.16 692.372 L1682.72 692.372 L1683.28 692.372 L1683.84 692.372 L1684.4 692.372 L1684.95 692.372 L1685.51 692.372 L1686.07 692.372 L1686.63 692.372 L1687.19 692.372 L1687.75 692.372 L1688.31 692.372 L1688.87 692.372 L1689.43 692.372 L1689.99 692.372 L1690.55 692.372 L1691.11 692.372 L1691.67 692.372 L1692.23 692.372 L1692.78 692.372 L1693.34 692.372 L1693.9 692.372 L1694.46 692.372 L1695.02 692.372 L1695.58 692.372 L1696.14 692.372 L1696.7 692.372 L1697.26 692.372 L1697.82 692.372 L1698.38 692.372 L1698.94 692.372 L1699.5 692.372 L1700.05 692.372 L1700.61 692.372 L1701.17 692.372 L1701.73 692.372 L1702.29 692.372 L1702.85 692.372 L1703.41 692.372 L1703.97 692.372 L1704.53 692.372 L1705.09 692.372 L1705.65 692.372 L1706.21 692.372 L1706.77 692.372 L1707.32 692.372 L1707.88 692.372 L1708.44 692.372 L1709 692.372 L1709.56 692.372 L1710.12 692.372 L1710.68 692.372 L1711.24 692.372 L1711.8 692.372 L1712.36 692.372 L1712.92 692.372 L1713.48 692.372 L1714.04 692.372 L1714.6 692.372 L1715.15 692.372 L1715.71 692.372 L1716.27 692.372 L1716.83 692.372 L1717.39 692.372 L1717.95 692.372 L1718.51 692.372 L1719.07 692.372 L1719.63 692.372 L1720.19 692.372 L1720.75 692.372 L1721.31 692.372 L1721.87 692.372 L1722.42 692.372 L1722.98 692.372 L1723.54 692.372 L1724.1 692.372 L1724.66 692.372 L1725.22 692.372 L1725.78 692.372 L1726.34 692.372 L1726.9 692.372 L1727.46 692.372 L1728.02 692.372 L1728.58 692.372 L1729.14 692.372 L1729.69 692.372 L1730.25 692.372 L1730.81 692.372 L1731.37 692.372 L1731.93 692.372 L1732.49 692.372 L1733.05 692.372 L1733.61 692.372 L1734.17 692.372 L1734.73 692.372 L1735.29 692.372 L1735.85 692.372 L1736.41 692.372 L1736.97 692.372 L1737.52 692.372 L1738.08 692.372 L1738.64 692.372 L1739.2 692.372 L1739.76 692.372 L1740.32 692.372 L1740.88 692.372 L1741.44 692.372 L1742 692.372 L1742.56 692.372 L1743.12 692.372 L1743.68 692.372 L1744.24 692.372 L1744.79 692.372 L1745.35 692.372 L1745.91 692.372 L1746.47 692.372 L1747.03 692.372 L1747.59 692.372 L1748.15 692.372 L1748.71 692.372 L1749.27 692.372 L1749.83 692.372 L1750.39 692.372 L1750.95 692.372 L1751.51 692.372 L1752.06 692.372 L1752.62 692.372 L1753.18 692.372 L1753.74 692.372 L1754.3 692.372 L1754.86 692.372 L1755.42 692.372 L1755.98 692.372 L1756.54 692.372 L1757.1 692.372 L1757.66 692.372 L1758.22 692.372 L1758.78 692.372 L1759.34 692.372 L1759.89 692.372 L1760.45 692.372 L1761.01 692.372 L1761.57 692.372 L1762.13 692.372 L1762.69 692.372 L1763.25 692.372 L1763.81 692.372 L1764.37 692.372 L1764.93 692.372 L1765.49 692.372 L1766.05 692.372 L1766.61 692.372 L1767.16 692.372 L1767.72 692.372 L1768.28 692.372 L1768.84 692.372 L1769.4 692.372 L1769.96 692.372 L1770.52 692.372 L1771.08 692.372 L1771.64 692.372 L1772.2 692.372 L1772.76 692.372 L1773.32 692.372 L1773.88 692.372 L1774.43 692.372 L1774.99 692.372 L1775.55 692.372 L1776.11 692.372 L1776.67 692.372 L1777.23 692.372 L1777.79 692.372 L1778.35 692.372 L1778.91 692.372 L1779.47 692.372 L1780.03 692.372 L1780.59 692.372 L1781.15 692.372 L1781.71 692.372 L1782.26 692.372 L1782.82 692.372 L1783.38 692.372 L1783.94 692.372 L1784.5 692.372 L1785.06 692.372 L1785.62 692.372 L1786.18 692.372 L1786.74 692.372 L1787.3 692.372 L1787.86 692.372 L1788.42 692.372 L1788.98 692.372 L1789.53 692.372 L1790.09 692.372 L1790.65 692.372 L1791.21 692.372 L1791.77 692.372 L1792.33 692.372 L1792.89 692.372 L1793.45 692.372 L1794.01 692.372 L1794.57 692.372 L1795.13 692.372 L1795.69 692.372 L1796.25 692.372 L1796.8 692.372 L1797.36 692.372 L1797.92 692.372 L1798.48 692.372 L1799.04 692.372 L1799.6 692.372 L1800.16 692.372 L1800.72 692.372 L1801.28 692.372 L1801.84 692.372 L1802.4 692.372 L1802.96 692.372 L1803.52 692.372 L1804.08 692.372 L1804.63 692.372 L1805.19 692.372 L1805.75 692.372 L1806.31 692.372 L1806.87 692.372 L1807.43 692.372 L1807.99 692.372 L1808.55 692.372 L1809.11 692.372 L1809.67 692.372 L1810.23 692.372 L1810.79 692.372 L1811.35 692.372 L1811.9 692.372 L1812.46 692.372 L1813.02 692.372 L1813.58 692.372 L1814.14 692.372 L1814.7 692.372 L1815.26 692.372 L1815.82 692.372 L1816.38 692.372 L1816.94 692.372 L1817.5 692.372 L1818.06 692.372 L1818.62 692.372 L1819.18 692.372 L1819.73 692.372 L1820.29 692.372 L1820.85 692.372 L1821.41 692.372 L1821.97 692.372 L1822.53 692.372 L1823.09 692.372 L1823.65 692.372 L1824.21 692.372 L1824.77 692.372 L1825.33 692.372 L1825.89 692.372 L1826.45 692.372 L1827 692.372 L1827.56 692.372 L1828.12 692.372 L1828.68 692.372 L1829.24 692.372 L1829.8 692.372 L1830.36 692.372 L1830.92 692.372 L1831.48 692.372 L1832.04 692.372 L1832.6 692.372 L1833.16 692.372 L1833.72 692.372 L1834.27 692.372 L1834.83 692.372 L1835.39 692.372 L1835.95 692.372 L1836.51 692.372 L1837.07 692.372 L1837.63 692.372 L1838.19 692.372 L1838.19 683.573 L1837.63 683.573 L1837.07 683.573 L1836.51 683.573 L1835.95 683.573 L1835.39 683.573 L1834.83 683.573 L1834.27 683.573 L1833.72 683.573 L1833.16 683.573 L1832.6 683.573 L1832.04 683.573 L1831.48 683.573 L1830.92 683.573 L1830.36 683.573 L1829.8 683.573 L1829.24 683.573 L1828.68 683.573 L1828.12 683.573 L1827.56 683.573 L1827 683.573 L1826.45 683.573 L1825.89 683.573 L1825.33 683.573 L1824.77 683.573 L1824.21 683.573 L1823.65 683.573 L1823.09 683.573 L1822.53 683.573 L1821.97 683.573 L1821.41 683.573 L1820.85 683.573 L1820.29 683.573 L1819.73 683.573 L1819.18 683.573 L1818.62 683.573 L1818.06 683.573 L1817.5 683.573 L1816.94 683.573 L1816.38 683.573 L1815.82 683.573 L1815.26 683.573 L1814.7 683.573 L1814.14 683.573 L1813.58 683.573 L1813.02 683.573 L1812.46 683.573 L1811.9 683.573 L1811.35 683.573 L1810.79 683.573 L1810.23 683.573 L1809.67 683.573 L1809.11 683.573 L1808.55 683.573 L1807.99 683.573 L1807.43 683.573 L1806.87 683.573 L1806.31 683.573 L1805.75 683.573 L1805.19 683.573 L1804.63 683.573 L1804.08 683.573 L1803.52 683.573 L1802.96 683.573 L1802.4 683.573 L1801.84 683.573 L1801.28 683.573 L1800.72 683.573 L1800.16 683.573 L1799.6 683.573 L1799.04 683.573 L1798.48 683.573 L1797.92 683.573 L1797.36 683.573 L1796.8 683.573 L1796.25 683.573 L1795.69 683.573 L1795.13 683.573 L1794.57 683.573 L1794.01 683.573 L1793.45 683.573 L1792.89 683.573 L1792.33 683.573 L1791.77 683.573 L1791.21 683.573 L1790.65 683.573 L1790.09 683.573 L1789.53 683.573 L1788.98 683.573 L1788.42 683.573 L1787.86 683.573 L1787.3 683.573 L1786.74 683.573 L1786.18 683.573 L1785.62 683.573 L1785.06 683.573 L1784.5 683.573 L1783.94 683.573 L1783.38 683.573 L1782.82 683.573 L1782.26 683.573 L1781.71 683.573 L1781.15 683.573 L1780.59 683.573 L1780.03 683.573 L1779.47 683.573 L1778.91 683.573 L1778.35 683.573 L1777.79 683.573 L1777.23 683.573 L1776.67 683.573 L1776.11 683.573 L1775.55 683.573 L1774.99 683.573 L1774.43 683.573 L1773.88 683.573 L1773.32 683.573 L1772.76 683.573 L1772.2 683.573 L1771.64 683.573 L1771.08 683.573 L1770.52 683.573 L1769.96 683.573 L1769.4 683.573 L1768.84 683.573 L1768.28 683.573 L1767.72 683.573 L1767.16 683.573 L1766.61 683.573 L1766.05 683.573 L1765.49 683.573 L1764.93 683.573 L1764.37 683.573 L1763.81 683.573 L1763.25 683.573 L1762.69 683.573 L1762.13 683.573 L1761.57 683.573 L1761.01 683.573 L1760.45 683.573 L1759.89 683.573 L1759.34 683.573 L1758.78 683.573 L1758.22 683.573 L1757.66 683.573 L1757.1 683.573 L1756.54 683.573 L1755.98 683.573 L1755.42 683.573 L1754.86 683.573 L1754.3 683.573 L1753.74 683.573 L1753.18 683.573 L1752.62 683.573 L1752.06 683.573 L1751.51 683.573 L1750.95 683.573 L1750.39 683.573 L1749.83 683.573 L1749.27 683.573 L1748.71 683.573 L1748.15 683.573 L1747.59 683.573 L1747.03 683.573 L1746.47 683.573 L1745.91 683.573 L1745.35 683.573 L1744.79 683.573 L1744.24 683.573 L1743.68 683.573 L1743.12 683.573 L1742.56 683.573 L1742 683.573 L1741.44 683.573 L1740.88 683.573 L1740.32 683.573 L1739.76 683.573 L1739.2 683.573 L1738.64 683.573 L1738.08 683.573 L1737.52 683.573 L1736.97 683.573 L1736.41 683.573 L1735.85 683.573 L1735.29 683.573 L1734.73 683.573 L1734.17 683.573 L1733.61 683.573 L1733.05 683.573 L1732.49 683.573 L1731.93 683.573 L1731.37 683.573 L1730.81 683.573 L1730.25 683.573 L1729.69 683.573 L1729.14 683.573 L1728.58 683.573 L1728.02 683.573 L1727.46 683.573 L1726.9 683.573 L1726.34 683.573 L1725.78 683.573 L1725.22 683.573 L1724.66 683.573 L1724.1 683.573 L1723.54 683.573 L1722.98 683.573 L1722.42 683.573 L1721.87 683.573 L1721.31 683.573 L1720.75 683.573 L1720.19 683.573 L1719.63 683.573 L1719.07 683.573 L1718.51 683.573 L1717.95 683.573 L1717.39 683.573 L1716.83 683.573 L1716.27 683.573 L1715.71 683.573 L1715.15 683.573 L1714.6 683.573 L1714.04 683.573 L1713.48 683.573 L1712.92 683.573 L1712.36 683.573 L1711.8 683.573 L1711.24 683.573 L1710.68 683.573 L1710.12 683.573 L1709.56 683.573 L1709 683.573 L1708.44 683.573 L1707.88 683.573 L1707.32 683.573 L1706.77 683.573 L1706.21 683.573 L1705.65 683.573 L1705.09 683.573 L1704.53 683.573 L1703.97 683.573 L1703.41 683.573 L1702.85 683.573 L1702.29 683.573 L1701.73 683.573 L1701.17 683.573 L1700.61 683.573 L1700.05 683.573 L1699.5 683.573 L1698.94 683.573 L1698.38 683.573 L1697.82 683.573 L1697.26 683.573 L1696.7 683.573 L1696.14 683.573 L1695.58 683.573 L1695.02 683.573 L1694.46 683.573 L1693.9 683.573 L1693.34 683.573 L1692.78 683.573 L1692.23 683.573 L1691.67 683.573 L1691.11 683.573 L1690.55 683.573 L1689.99 683.573 L1689.43 683.573 L1688.87 683.573 L1688.31 683.573 L1687.75 683.573 L1687.19 683.573 L1686.63 683.573 L1686.07 683.573 L1685.51 683.573 L1684.95 683.573 L1684.4 683.573 L1683.84 683.573 L1683.28 683.573 L1682.72 683.573 L1682.16 683.573 L1681.6 683.573 L1681.04 683.573 L1680.48 683.573 L1679.92 683.573 L1679.36 683.573 L1678.8 683.573 L1678.24 683.573 L1677.68 683.573 L1677.13 683.573 L1676.57 683.573 L1676.01 683.573 L1675.45 683.573 L1674.89 683.573 L1674.33 683.573 L1673.77 683.573 L1673.21 683.573 L1672.65 683.573 L1672.09 683.573 L1671.53 683.573 L1670.97 683.573 L1670.41 683.573 L1669.85 683.573 L1669.3 683.573 L1668.74 683.573 L1668.18 683.573 L1667.62 683.573 L1667.06 683.573 L1666.5 683.573 L1665.94 683.573 L1665.38 683.573 L1664.82 683.573 L1664.26 683.573 L1663.7 683.573 L1663.14 683.573 L1662.58 683.573 L1662.03 683.573 L1661.47 683.573 L1660.91 683.573 L1660.35 683.573 L1659.79 683.573 L1659.23 683.573 L1658.67 683.573 L1658.11 683.573 L1657.55 683.573 L1656.99 683.573 L1656.43 683.573 L1655.87 683.573 L1655.31 683.573 L1654.76 683.573 L1654.2 683.573 L1653.64 683.573 L1653.08 683.573 L1652.52 683.573 L1651.96 683.573 L1651.4 683.573 L1650.84 683.573 L1650.28 683.573 L1649.72 683.573 L1649.16 683.573 L1648.6 683.573 L1648.04 683.573 L1647.48 683.573 L1646.93 683.573 L1646.37 683.573 L1645.81 683.573 L1645.25 683.573 L1644.69 683.573 L1644.13 683.573 L1643.57 683.573 L1643.01 683.573 L1642.45 683.573 L1641.89 683.573 L1641.33 683.573 L1640.77 683.573 L1640.21 683.573 L1639.66 683.573 L1639.1 683.573 L1638.54 683.573 L1637.98 683.573 L1637.42 683.573 L1636.86 683.573 L1636.3 683.573 L1635.74 683.573 L1635.18 683.573 L1634.62 683.573 L1634.06 683.573 L1633.5 683.573 L1632.94 683.573 L1632.39 683.573 L1631.83 683.573 L1631.27 683.573 L1630.71 683.573 L1630.15 683.573 L1629.59 683.573 L1629.03 683.573 L1628.47 683.573 L1627.91 683.573 L1627.35 683.573 L1626.79 683.573 L1626.23 683.573 L1625.67 683.573 L1625.11 683.573 L1624.56 683.573 L1624 683.573 L1623.44 683.573 L1622.88 683.573 L1622.32 683.573 L1621.76 683.573 L1621.2 683.573 L1620.64 683.573 L1620.08 683.573 L1619.52 683.573 L1618.96 683.573 L1618.4 683.573 L1617.84 683.573 L1617.29 683.573 L1616.73 683.573 L1616.17 683.573 L1615.61 683.573 L1615.05 683.573 L1614.49 683.573 L1613.93 683.573 L1613.37 683.573 L1612.81 683.573 L1612.25 683.573 L1611.69 683.573 L1611.13 683.573 L1610.57 683.573 L1610.02 683.573 L1609.46 683.573 L1608.9 683.573 L1608.34 683.573 L1607.78 683.573 L1607.22 683.573 L1606.66 683.573 L1606.1 683.573 L1605.54 683.573 L1604.98 683.573 L1604.42 683.573 L1603.86 683.573 L1603.3 683.573 L1602.74 683.573 L1602.19 683.573 L1601.63 683.573 L1601.07 683.573 L1600.51 683.573 L1599.95 683.573 L1599.39 683.573 L1598.83 683.573 L1598.27 683.573 L1597.71 683.573 L1597.15 683.573 L1596.59 683.573 L1596.03 683.573 L1595.47 683.573 L1594.92 683.573 L1594.36 683.573 L1593.8 683.573 L1593.24 683.573 L1592.68 683.573 L1592.12 683.573 L1591.56 683.573 L1591 683.573 L1590.44 683.573 L1589.88 683.573 L1589.32 683.573 L1588.76 683.573 L1588.2 683.573 L1587.65 683.573 L1587.09 683.573 L1586.53 683.573 L1585.97 683.573 L1585.41 683.573 L1584.85 683.573 L1584.29 683.573 L1583.73 683.573 L1583.17 683.573 L1582.61 683.573 L1582.05 683.573 L1581.49 683.573 L1580.93 683.573 L1580.37 683.573 L1579.82 683.573 L1579.26 683.573 L1578.7 683.573 L1578.14 683.573 L1577.58 683.573 L1577.02 683.573 L1576.46 683.573 L1575.9 683.573 L1575.34 683.573 L1574.78 683.573 L1574.22 683.573 L1573.66 683.573 L1573.1 683.573 L1572.55 683.573 L1571.99 683.573 L1571.43 683.573 L1570.87 683.573 L1570.31 683.573 L1569.75 683.573 L1569.19 683.573 L1568.63 683.573 L1568.07 683.573 L1567.51 683.573 L1566.95 683.573 L1566.39 683.573 L1565.83 683.573 L1565.28 683.573 L1564.72 683.573 L1564.16 683.573 L1563.6 683.573 L1563.04 683.573 L1562.48 683.573 L1561.92 683.573 L1561.36 683.573 L1560.8 683.573 L1560.24 683.573 L1559.68 683.573 L1559.12 683.573 L1558.56 683.573 L1558 683.573 L1557.45 683.573 L1556.89 683.573 L1556.33 683.573 L1555.77 683.573 L1555.21 683.573 L1554.65 683.573 L1554.09 683.573 L1553.53 683.573 L1552.97 683.573 L1552.41 683.573 L1551.85 683.573 L1551.29 683.573 L1550.73 683.573 L1550.18 683.573 L1549.62 683.573 L1549.06 683.573 L1548.5 683.573 L1547.94 683.573 L1547.38 683.573 L1546.82 683.573 L1546.26 683.573 L1545.7 683.573 L1545.14 683.573 L1544.58 683.573 L1544.02 683.573 L1543.46 683.573 L1542.9 683.573 L1542.35 683.573 L1541.79 683.573 L1541.23 683.573 L1540.67 683.573 L1540.11 683.573 L1539.55 683.573 L1538.99 683.573 L1538.43 683.573 L1537.87 683.573 L1537.31 683.573 L1536.75 683.573 L1536.19 683.573 L1535.63 683.573 L1535.08 683.573 L1534.52 683.573 L1533.96 683.573 L1533.4 683.573 L1532.84 683.573 L1532.28 683.573 L1531.72 683.573 L1531.16 683.573 L1530.6 683.573 L1530.04 683.573 L1529.48 683.573 L1528.92 683.573 L1528.36 683.573 L1527.81 683.573 L1527.25 683.573 L1526.69 683.573 L1526.13 683.573 L1525.57 683.573 L1525.01 683.573 L1524.45 683.573 L1523.89 683.573 L1523.33 683.573 L1522.77 683.573 L1522.21 683.573 L1521.65 683.573 L1521.09 683.573 L1520.53 683.573 L1519.98 683.573 L1519.42 683.573 L1518.86 683.573 L1518.3 683.573 L1517.74 683.573 L1517.18 683.573 L1516.62 683.573 L1516.06 683.573 L1515.5 683.573 L1514.94 683.573 L1514.38 683.573 L1513.82 683.573 L1513.26 683.573 L1512.71 683.573 L1512.15 683.573 L1511.59 683.573 L1511.03 683.573 L1510.47 683.573 L1509.91 683.573 L1509.35 683.573 L1508.79 683.573 L1508.23 683.573 L1507.67 683.573 L1507.11 683.573 L1506.55 683.573 L1505.99 683.573 L1505.44 683.573 L1504.88 683.573 L1504.32 683.573 L1503.76 683.573 L1503.2 683.573 L1502.64 683.573 L1502.08 683.573 L1501.52 683.573 L1500.96 683.573 L1500.4 683.573 L1499.84 683.573 L1499.28 683.573 L1498.72 683.573 L1498.16 683.573 L1497.61 683.573 L1497.05 683.573 L1496.49 683.573 L1495.93 683.573 L1495.37 683.573 L1494.81 683.573 L1494.25 683.573 L1493.69 683.573 L1493.13 683.573 L1492.57 683.573 L1492.01 683.573 L1491.45 683.573 L1490.89 683.573 L1490.34 683.573 L1489.78 683.573 L1489.22 683.573 L1488.66 683.573 L1488.1 683.573 L1487.54 683.573 L1486.98 683.573 L1486.42 683.573 L1485.86 683.573 L1485.3 683.573 L1484.74 683.573 L1484.18 683.573 L1483.62 683.573 L1483.07 683.573 L1482.51 683.573 L1481.95 683.573 L1481.39 683.573 L1480.83 683.573 L1480.27 683.573 L1479.71 683.573 L1479.15 683.573 L1478.59 683.573 L1478.03 683.573 L1477.47 683.573 L1476.91 683.573 L1476.35 683.573 L1475.79 683.573 L1475.24 683.573 L1474.68 683.573 L1474.12 683.573 L1473.56 683.573 L1473 683.573 L1472.44 683.573 L1471.88 683.573 L1471.32 683.573 L1470.76 683.573 L1470.2 683.573 L1469.64 683.573 L1469.08 683.573 L1468.52 683.573 L1467.97 683.573 L1467.41 683.573 L1466.85 683.573 L1466.29 683.573 L1465.73 683.573 L1465.17 683.573 L1464.61 683.573 L1464.05 683.573 L1463.49 683.573 L1462.93 683.573 L1462.37 683.573 L1461.81 683.573 L1461.25 683.573 L1460.7 683.573 L1460.14 683.573 L1459.58 683.573 L1459.02 683.573 L1458.46 683.573 L1457.9 683.573 L1457.34 683.573 L1456.78 683.573 L1456.22 683.573 L1455.66 683.573 L1455.1 683.573 L1454.54 683.573 L1453.98 683.573 L1453.42 683.573 L1452.87 683.573 L1452.31 683.573 L1451.75 683.573 L1451.19 683.573 L1450.63 683.573 L1450.07 683.573 L1449.51 683.573 L1448.95 683.573 L1448.39 683.573 L1447.83 683.573 L1447.27 683.573 L1446.71 683.573 L1446.15 683.573 L1445.6 683.573 L1445.04 683.573 L1444.48 683.573 L1443.92 683.573 L1443.36 683.573 L1442.8 683.573 L1442.24 683.573 L1441.68 683.573 L1441.12 683.573 L1440.56 683.573 L1440 683.573 L1439.44 683.573 L1438.88 683.573 L1438.33 683.573 L1437.77 683.573 L1437.21 683.573 L1436.65 683.573 L1436.09 683.573 L1435.53 683.573 L1434.97 683.573 L1434.41 683.573 L1433.85 683.573 L1433.29 683.573 L1432.73 683.573 L1432.17 683.573 L1431.61 683.573 L1431.05 683.573 L1430.5 683.573 L1429.94 683.573 L1429.38 683.573 L1428.82 683.573 L1428.26 683.573 L1427.7 683.573 L1427.14 683.573 L1426.58 683.573 L1426.02 683.573 L1425.46 683.573 L1424.9 683.573 L1424.34 683.573 L1423.78 683.573 L1423.23 683.573 L1422.67 683.573 L1422.11 683.573 L1421.55 683.573 L1420.99 683.573 L1420.43 683.573 L1419.87 683.573 L1419.31 683.573 L1418.75 683.573 L1418.19 683.573 L1417.63 683.573 L1417.07 683.573 L1416.51 683.573 L1415.95 683.573 L1415.4 683.573 L1414.84 683.573 L1414.28 683.573 L1413.72 683.573 L1413.16 683.573 L1412.6 683.573 L1412.04 683.573 L1411.48 683.573 L1410.92 683.573 L1410.36 683.573 L1409.8 683.573 L1409.24 683.573 L1408.68 683.573 L1408.13 683.573 L1407.57 683.573 L1407.01 683.573 L1406.45 683.573 L1405.89 683.573 L1405.33 683.573 L1404.77 683.573 L1404.21 683.573 L1403.65 683.573 L1403.09 683.573 L1402.53 683.573 L1401.97 683.573 L1401.41 683.573 L1400.86 683.573 L1400.3 683.573 L1399.74 683.573 L1399.18 683.573 L1398.62 683.573 L1398.06 683.573 L1397.5 683.573 L1396.94 683.573 L1396.38 683.573 L1395.82 683.573 L1395.26 683.573 L1394.7 683.573 L1394.14 683.573 L1393.58 683.573 L1393.03 683.573 L1392.47 683.573 L1391.91 683.573 L1391.35 683.573 L1390.79 683.573 L1390.23 683.573 L1389.67 683.573 L1389.11 683.573 L1388.55 683.573 L1387.99 683.573 L1387.43 683.573 L1386.87 683.573 L1386.31 683.573 L1385.76 683.573 L1385.2 683.573 L1384.64 683.573 L1384.08 683.573 L1383.52 683.573 L1382.96 683.573 L1382.4 683.573 L1381.84 683.573 L1381.28 683.573 L1380.72 683.573 L1380.16 683.573 L1379.6 683.573 L1379.04 683.573 L1378.49 683.573 L1377.93 683.573 L1377.37 683.573 L1376.81 683.573 L1376.25 683.573 L1375.69 683.573 L1375.13 683.573 L1374.57 683.573 L1374.01 683.573 L1373.45 683.573 L1372.89 683.573 L1372.33 683.573 L1371.77 683.573 L1371.21 683.573 L1370.66 683.573 L1370.1 683.573 L1369.54 683.573 L1368.98 683.573 L1368.42 683.573 L1367.86 683.573 L1367.3 683.573 L1366.74 683.573 L1366.18 683.573 L1365.62 683.573 L1365.06 683.573 L1364.5 683.573 L1363.94 683.573 L1363.39 683.573 L1362.83 683.573 L1362.27 683.573 L1361.71 683.573 L1361.15 683.573 L1360.59 683.573 L1360.03 683.573 L1359.47 683.573 L1358.91 683.573 L1358.35 683.573 L1357.79 683.573 L1357.23 683.573 L1356.67 683.573 L1356.12 683.573 L1355.56 683.573 L1355 683.573 L1354.44 683.573 L1353.88 683.573 L1353.32 683.573 L1352.76 683.573 L1352.2 683.573 L1351.64 683.573 L1351.08 683.573 L1350.52 683.573 L1349.96 683.573 L1349.4 683.573 L1348.84 683.573 L1348.29 683.573 L1347.73 683.573 L1347.17 683.573 L1346.61 683.573 L1346.05 683.573 L1345.49 683.573 L1344.93 683.573 L1344.37 683.573 L1343.81 683.573 L1343.25 683.573 L1342.69 683.573 L1342.13 683.573 L1341.57 683.573 L1341.02 683.573 L1340.46 683.573 L1339.9 683.573 L1339.34 683.573 L1338.78 683.573 L1338.22 683.573 L1337.66 683.573 L1337.1 683.573 L1336.54 683.573 L1335.98 683.573 L1335.42 683.573 L1334.86 683.573 L1334.3 683.573 L1333.75 683.573 L1333.19 683.573 L1332.63 683.573 L1332.07 683.573 L1331.51 683.573 L1330.95 683.573 L1330.39 683.573 L1329.83 683.573 L1329.27 683.573 L1328.71 683.573 L1328.15 683.573 L1327.59 683.573 L1327.03 683.573 L1326.47 683.573 L1325.92 683.573 L1325.36 683.573 L1324.8 683.573 L1324.24 683.573 L1323.68 683.573 L1323.12 683.573 L1322.56 683.573 L1322 683.573 L1321.44 683.573 L1320.88 683.573 L1320.32 683.573 L1319.76 683.573 L1319.2 683.573 L1318.65 683.573 L1318.09 683.573 L1317.53 683.573 L1316.97 683.573 L1316.41 683.573 L1315.85 683.573 L1315.29 683.573 L1314.73 683.573 L1314.17 683.573 L1313.61 683.573 L1313.05 683.573 L1312.49 683.573 L1311.93 683.573 L1311.38 683.573 L1310.82 683.573 L1310.26 683.573 L1309.7 683.573 L1309.14 683.573 L1308.58 683.573 L1308.02 683.573 L1307.46 683.573 L1306.9 683.573 L1306.34 683.573 L1305.78 683.573 L1305.22 683.573 L1304.66 683.573 L1304.1 683.573 L1303.55 683.573 L1302.99 683.573 L1302.43 683.573 L1301.87 683.573 L1301.31 683.573 L1300.75 683.573 L1300.19 683.573 L1299.63 683.573 L1299.07 683.573 L1298.51 683.573 L1297.95 683.573 L1297.39 683.573 L1296.83 683.573 L1296.28 683.573 L1295.72 683.573 L1295.16 683.573 L1294.6 683.573 L1294.04 683.573 L1293.48 683.573 L1292.92 683.573 L1292.36 683.573 L1291.8 683.573 L1291.24 683.573 L1290.68 683.573 L1290.12 683.573 L1289.56 683.573 L1289 683.573 L1288.45 683.573 L1287.89 683.573 L1287.33 683.573 L1286.77 683.573 L1286.21 683.573 L1285.65 683.573 L1285.09 683.573 L1284.53 683.573 L1283.97 683.573 L1283.41 683.573 L1282.85 683.573 L1282.29 683.573 L1281.73 683.573 L1281.18 683.573 L1280.62 683.573 L1280.06 683.573 L1279.5 683.573 L1278.94 683.573 L1278.38 683.573 L1277.82 683.573 L1277.26 683.573 L1276.7 683.573 L1276.14 683.573 L1275.58 683.573 L1275.02 683.573 L1274.46 683.573 L1273.91 683.573 L1273.35 683.573 L1272.79 683.573 L1272.23 683.573 L1271.67 683.573 L1271.11 683.573 L1270.55 683.573 L1269.99 683.573 L1269.43 683.573 L1268.87 683.573 L1268.31 683.573 L1267.75 683.573 L1267.19 683.573 L1266.63 683.573 L1266.08 683.573 L1265.52 683.573 L1264.96 683.573 L1264.4 683.573 L1263.84 683.573 L1263.28 683.573 L1262.72 683.573 L1262.16 683.573 L1261.6 683.573 L1261.04 683.573 L1260.48 683.573 L1259.92 683.573 L1259.36 683.573 L1258.81 683.573 L1258.25 683.573 L1257.69 683.573 L1257.13 683.573 L1256.57 683.573 L1256.01 683.573 L1255.45 683.573 L1254.89 683.573 L1254.33 683.573 L1253.77 683.573 L1253.21 683.573 L1252.65 683.573 L1252.09 683.573 L1251.54 683.573 L1250.98 683.573 L1250.42 683.573 L1249.86 683.573 L1249.3 683.573 L1248.74 683.573 L1248.18 683.573 L1247.62 683.573 L1247.06 683.573 L1246.5 683.573 L1245.94 683.573 L1245.38 683.573 L1244.82 683.573 L1244.26 683.573 L1243.71 683.573 L1243.15 683.573 L1242.59 683.573 L1242.03 683.573 L1241.47 683.573 L1240.91 683.573 L1240.35 683.573 L1239.79 683.573 L1239.23 683.573 L1238.67 683.573 L1238.11 683.573 L1237.55 683.573 L1236.99 683.573 L1236.44 683.573 L1235.88 683.573 L1235.32 683.573 L1234.76 683.573 L1234.2 683.573 L1233.64 683.573 L1233.08 683.573 L1232.52 683.573 L1231.96 683.573 L1231.4 683.573 L1230.84 683.573 L1230.28 683.573 L1229.72 683.573 L1229.17 683.573 L1228.61 683.573 L1228.05 683.573 L1227.49 683.573 L1226.93 683.573 L1226.37 683.573 L1225.81 683.573 L1225.25 683.573 L1224.69 683.573 L1224.13 683.573 L1223.57 683.573 L1223.01 683.573 L1222.45 683.573 L1221.89 683.573 L1221.34 683.573 L1220.78 683.573 L1220.22 683.573 L1219.66 683.573 L1219.1 683.573 L1218.54 683.573 L1217.98 683.573 L1217.42 683.573 L1216.86 683.573 L1216.3 683.573 L1215.74 683.573 L1215.18 683.573 L1214.62 683.573 L1214.07 683.573 L1213.51 683.573 L1212.95 683.573 L1212.39 683.573 L1211.83 683.573 L1211.27 683.573 L1210.71 683.573 L1210.15 683.573 L1209.59 683.573 L1209.03 683.573 L1208.47 683.573 L1207.91 683.573 L1207.35 683.573 L1206.8 683.573 L1206.24 683.573 L1205.68 683.573 L1205.12 683.573 L1204.56 683.573 L1204 683.573 L1203.44 683.573 L1202.88 683.573 L1202.32 683.573 L1201.76 683.573 L1201.2 683.573 L1200.64 683.573 L1200.08 683.573 L1199.52 683.573 L1198.97 683.573 L1198.41 683.573 L1197.85 683.573 L1197.29 683.573 L1196.73 683.573 L1196.17 683.573 L1195.61 683.573 L1195.05 683.573 L1194.49 683.573 L1193.93 683.573 L1193.37 683.573 L1192.81 683.573 L1192.25 683.573 L1191.7 683.573 L1191.14 683.573 L1190.58 683.573 L1190.02 683.573 L1189.46 683.573 L1188.9 683.573 L1188.34 683.573 L1187.78 683.573 L1187.22 683.573 L1186.66 683.573 L1186.1 683.573 L1185.54 683.573 L1184.98 683.573 L1184.43 683.573 L1183.87 683.573 L1183.31 683.573 L1182.75 683.573 L1182.19 683.573 L1181.63 683.573 L1181.07 683.573 L1180.51 683.573 L1179.95 683.573 L1179.39 683.573 L1178.83 683.573 L1178.27 683.573 L1177.71 683.573 L1177.15 683.573 L1176.6 683.573 L1176.04 683.573 L1175.48 683.573 L1174.92 683.573 L1174.36 683.573 L1173.8 683.573 L1173.24 683.573 L1172.68 683.573 L1172.12 683.573 L1171.56 683.573 L1171 683.573 L1170.44 683.573 L1169.88 683.573 L1169.33 683.573 L1168.77 683.573 L1168.21 683.573 L1167.65 683.573 L1167.09 683.573 L1166.53 683.573 L1165.97 683.573 L1165.41 683.573 L1164.85 683.573 L1164.29 683.573 L1163.73 683.573 L1163.17 683.573 L1162.61 683.573 L1162.05 683.573 L1161.5 683.573 L1160.94 683.573 L1160.38 683.573 L1159.82 683.573 L1159.26 683.573 L1158.7 683.573 L1158.14 683.573 L1157.58 683.573 L1157.02 683.573 L1156.46 683.573 L1155.9 683.573 L1155.34 683.573 L1154.78 683.573 L1154.23 683.573 L1153.67 683.573 L1153.11 683.573 L1152.55 683.573 L1151.99 683.573 L1151.43 683.573 L1150.87 683.573 L1150.31 683.573 L1149.75 683.573 L1149.19 683.573 L1148.63 683.573 L1148.07 683.573 L1147.51 683.573 L1146.96 683.573 L1146.4 683.573 L1145.84 683.573 L1145.28 683.573 L1144.72 683.573 L1144.16 683.573 L1143.6 683.573 L1143.04 683.573 L1142.48 683.573 L1141.92 683.573 L1141.36 683.573 L1140.8 683.573 L1140.24 683.573 L1139.68 683.573 L1139.13 683.573 L1138.57 683.573 L1138.01 683.573 L1137.45 683.573 L1136.89 683.573 L1136.33 683.573 L1135.77 683.573 L1135.21 683.573 L1134.65 683.573 L1134.09 683.573 L1133.53 683.573 L1132.97 683.573 L1132.41 683.573 L1131.86 683.573 L1131.3 683.573 L1130.74 683.573 L1130.18 683.573 L1129.62 683.573 L1129.06 683.573 L1128.5 683.573 L1127.94 683.573 L1127.38 683.573 L1126.82 683.573 L1126.26 683.573 L1125.7 683.573 L1125.14 683.573 L1124.59 683.573 L1124.03 683.573 L1123.47 683.573 L1122.91 683.573 L1122.35 683.573 L1121.79 683.573 L1121.23 683.573 L1120.67 683.573 L1120.11 683.573 L1119.55 683.573 L1118.99 683.573 L1118.43 683.573 L1117.87 683.573 L1117.31 683.573 L1116.76 683.573 L1116.2 683.573 L1115.64 683.573 L1115.08 683.573 L1114.52 683.573 L1113.96 683.573 L1113.4 683.573 L1112.84 683.573 L1112.28 683.573 L1111.72 683.573 L1111.16 683.573 L1110.6 683.573 L1110.04 683.573 L1109.49 683.573 L1108.93 683.573 L1108.37 683.573 L1107.81 683.573 L1107.25 683.573 L1106.69 683.573 L1106.13 683.573 L1105.57 683.573 L1105.01 683.573 L1104.45 683.573 L1103.89 683.573 L1103.33 683.573 L1102.77 683.573 L1102.22 683.573 L1101.66 683.573 L1101.1 683.573 L1100.54 683.573 L1099.98 683.573 L1099.42 683.573 L1098.86 683.573 L1098.3 683.573 L1097.74 683.573 L1097.18 683.573 L1096.62 683.573 L1096.06 683.573 L1095.5 683.573 L1094.94 683.573 L1094.39 683.573 L1093.83 683.573 L1093.27 683.573 L1092.71 683.573 L1092.15 683.573 L1091.59 683.573 L1091.03 683.573 L1090.47 683.573 L1089.91 683.573 L1089.35 683.573 L1088.79 683.573 L1088.23 683.573 L1087.67 683.573 L1087.12 683.573 L1086.56 683.573 L1086 683.573 L1085.44 683.573 L1084.88 683.573 L1084.32 683.573 L1083.76 683.573 L1083.2 683.573 L1082.64 683.573 L1082.08 683.573 L1081.52 683.573 L1080.96 683.573 L1080.4 683.573 L1079.85 683.573 L1079.29 683.573 L1078.73 683.573 L1078.17 683.573 L1077.61 683.573 L1077.05 683.573 L1076.49 683.573 L1075.93 683.573 L1075.37 683.573 L1074.81 683.573 L1074.25 683.573 L1073.69 683.573 L1073.13 683.573 L1072.57 683.573 L1072.02 683.573 L1071.46 683.573 L1070.9 683.573 L1070.34 683.573 L1069.78 683.573 L1069.22 683.573 L1068.66 683.573 L1068.1 683.573 L1067.54 683.573 L1066.98 683.573 L1066.42 683.573 L1065.86 683.573 L1065.3 683.573 L1064.75 683.573 L1064.19 683.573 L1063.63 683.573 L1063.07 683.573 L1062.51 683.573 L1061.95 683.573 L1061.39 683.573 L1060.83 683.573 L1060.27 683.573 L1059.71 683.573 L1059.15 683.573 L1058.59 683.573 L1058.03 683.573 L1057.48 683.573 L1056.92 683.573 L1056.36 683.573 L1055.8 683.573 L1055.24 683.573 L1054.68 683.573 L1054.12 683.573 L1053.56 683.573 L1053 683.573 L1052.44 683.573 L1051.88 683.573 L1051.32 683.573 L1050.76 683.573 L1050.2 683.573 L1049.65 683.573 L1049.09 683.573 L1048.53 683.573 L1047.97 683.573 L1047.41 683.573 L1046.85 683.573 L1046.29 683.573 L1045.73 683.573 L1045.17 683.573 L1044.61 683.573 L1044.05 683.573 L1043.49 683.573 L1042.93 683.573 L1042.38 683.573 L1041.82 683.573 L1041.26 683.573 L1040.7 683.573 L1040.14 683.573 L1039.58 683.573 L1039.02 683.573 L1038.46 683.573 L1037.9 683.573 L1037.34 683.573 L1036.78 683.573 L1036.22 683.573 L1035.66 683.573 L1035.1 683.573 L1034.55 683.573 L1033.99 683.573 L1033.43 683.573 L1032.87 683.573 L1032.31 683.573 L1031.75 683.573 L1031.19 683.573 L1030.63 683.573 L1030.07 683.573 L1029.51 683.573 L1028.95 683.573 L1028.39 683.573 L1027.83 683.573 L1027.28 683.573 L1026.72 683.573 L1026.16 683.573 L1025.6 683.573 L1025.04 683.573 L1024.48 683.573 L1023.92 683.573 L1023.36 683.573 L1022.8 683.573 L1022.24 683.573 L1021.68 683.573 L1021.12 683.573 L1020.56 683.573 L1020.01 683.573 L1019.45 683.573 L1018.89 683.573 L1018.33 683.573 L1017.77 683.573 L1017.21 683.573 L1016.65 683.573 L1016.09 683.573 L1015.53 683.573 L1014.97 683.573 L1014.41 683.573 L1013.85 683.573 L1013.29 683.573 L1012.73 683.573 L1012.18 683.573 L1011.62 683.573 L1011.06 683.573 L1010.5 683.573 L1009.94 683.573 L1009.38 683.573 L1008.82 683.573 L1008.26 683.573 L1007.7 683.573 L1007.14 683.573 L1006.58 683.573 L1006.02 683.573 L1005.46 683.573 L1004.91 683.573 L1004.35 683.573 L1003.79 683.573 L1003.23 683.573 L1002.67 683.573 L1002.11 683.573 L1001.55 683.573 L1000.99 683.573 L1000.43 683.573 L999.872 683.573 L999.313 683.573 L998.754 683.573 L998.194 683.573 L997.635 683.573 L997.076 683.573 L996.517 683.573 L995.957 683.573 L995.398 683.573 L994.839 683.573 L994.28 683.573 L993.72 683.573 L993.161 683.573 L992.602 683.573 L992.043 683.573 L991.483 683.573 L990.924 683.573 L990.365 683.573 L989.806 683.573 L989.246 683.573 L988.687 683.573 L988.128 683.573 L987.569 683.573 L987.009 683.573 L986.45 683.573 L985.891 683.573 L985.332 683.573 L984.772 683.573 L984.213 683.573 L983.654 683.573 L983.095 683.573 L982.535 683.573 L981.976 683.573 L981.417 683.573 L980.858 683.573 L980.298 683.573 L979.739 683.573 L979.18 683.573 L978.621 683.573 L978.061 683.573 L977.502 683.573 L976.943 683.573 L976.384 683.573 L975.824 683.573 L975.265 683.573 L974.706 683.573 L974.147 683.573 L973.587 683.573 L973.028 683.573 L972.469 683.573 L971.91 683.573 L971.35 683.573 L970.791 683.573 L970.232 683.573 L969.673 683.573 L969.113 683.573 L968.554 683.573 L967.995 683.573 L967.436 683.573 L966.876 683.573 L966.317 683.573 L965.758 683.573 L965.199 683.573 L964.639 683.573 L964.08 683.573 L963.521 683.573 L962.962 683.573 L962.402 683.573 L961.843 683.573 L961.284 683.573 L960.725 683.573 L960.165 683.573 L959.606 683.573 L959.047 683.573 L958.488 683.573 L957.928 683.573 L957.369 683.573 L956.81 683.573 L956.251 683.573 L955.691 683.573 L955.132 683.573 L954.573 683.573 L954.014 683.573 L953.454 683.573 L952.895 683.573 L952.336 683.573 L951.777 683.573 L951.217 683.573 L950.658 683.573 L950.099 683.573 L949.54 683.573 L948.98 683.573 L948.421 683.573 L947.862 683.573 L947.303 683.573 L946.743 683.573 L946.184 683.573 L945.625 683.573 L945.066 683.573 L944.506 683.573 L943.947 683.573 L943.388 683.573 L942.829 683.573 L942.269 683.573 L941.71 683.573 L941.151 683.573 L940.592 683.573 L940.032 683.573 L939.473 683.573 L938.914 683.573 L938.355 683.573 L937.795 683.573 L937.236 683.573 L936.677 683.573 L936.118 683.573 L935.558 683.573 L934.999 683.573 L934.44 683.573 L933.881 683.573 L933.321 683.573 L932.762 683.573 L932.203 683.573 L931.644 683.573 L931.084 683.573 L930.525 683.573 L929.966 683.573 L929.406 683.573 L928.847 683.573 L928.288 683.573 L927.729 683.573 L927.169 683.573 L926.61 683.573 L926.051 683.573 L925.492 683.573 L924.932 683.573 L924.373 683.573 L923.814 683.573 L923.255 683.573 L922.695 683.573 L922.136 683.573 L921.577 683.573 L921.018 683.573 L920.458 683.573 L919.899 683.573 L919.34 683.573 L918.781 683.573 L918.221 683.573 L917.662 683.573 L917.103 683.573 L916.544 683.573 L915.984 683.573 L915.425 683.573 L914.866 683.573 L914.307 683.573 L913.747 683.573 L913.188 683.573 L912.629 683.573 L912.07 683.573 L911.51 683.573 L910.951 683.573 L910.392 683.573 L909.833 683.573 L909.273 683.573 L908.714 683.573 L908.155 683.573 L907.596 683.573 L907.036 683.573 L906.477 683.573 L905.918 683.573 L905.359 683.573 L904.799 683.573 L904.24 683.573 L903.681 683.573 L903.122 683.573 L902.562 683.573 L902.003 683.573 L901.444 683.573 L900.885 683.573 L900.325 683.573 L899.766 683.573 L899.207 683.573 L898.648 683.573 L898.088 683.573 L897.529 683.573 L896.97 683.573 L896.411 683.573 L895.851 683.573 L895.292 683.573 L894.733 683.573 L894.174 683.573 L893.614 683.573 L893.055 683.573 L892.496 683.573 L891.937 683.573 L891.377 683.573 L890.818 683.573 L890.259 683.573 L889.7 683.573 L889.14 683.573 L888.581 683.573 L888.022 683.573 L887.463 683.573 L886.903 683.573 L886.344 683.573 L885.785 683.573 L885.226 683.573 L884.666 683.573 L884.107 683.573 L883.548 683.573 L882.989 683.573 L882.429 683.573 L881.87 683.573 L881.311 683.573 L880.752 683.573 L880.192 683.573 L879.633 683.573 L879.074 683.573 L878.515 683.573 L877.955 683.573 L877.396 683.573 L876.837 683.573 L876.278 683.573 L875.718 683.573 L875.159 683.573 L874.6 683.573 L874.041 683.573 L873.481 683.573 L872.922 683.573 L872.363 683.573 L871.804 683.573 L871.244 683.573 L870.685 683.573 L870.126 683.573 L869.567 683.573 L869.007 683.573 L868.448 683.573 L867.889 683.573 L867.33 683.573 L866.77 683.573 L866.211 683.573 L865.652 683.573 L865.093 683.573 L864.533 683.573 L863.974 683.573 L863.415 683.573 L862.856 683.573 L862.296 683.573 L861.737 683.573 L861.178 683.573 L860.619 683.573 L860.059 683.573 L859.5 683.573 L858.941 683.573 L858.382 683.573 L857.822 683.573 L857.263 683.573 L856.704 683.573 L856.145 683.573 L855.585 683.573 L855.026 683.573 L854.467 683.573 L853.908 683.573 L853.348 683.573 L852.789 683.573 L852.23 683.573 L851.671 683.573 L851.111 683.573 L850.552 683.573 L849.993 683.573 L849.434 683.573 L848.874 683.573 L848.315 683.573 L847.756 683.573 L847.197 683.573 L846.637 683.573 L846.078 683.573 L845.519 683.573 L844.96 683.573 L844.4 683.573 L843.841 683.573 L843.282 683.573 L842.723 683.573 L842.163 683.573 L841.604 683.573 L841.045 683.573 L840.486 683.573 L839.926 683.573 L839.367 683.573 L838.808 683.573 L838.249 683.573 L837.689 683.573 L837.13 683.573 L836.571 683.573 L836.012 683.573 L835.452 683.573 L834.893 683.573 L834.334 683.573 L833.775 683.573 L833.215 683.573 L832.656 683.573 L832.097 683.573 L831.538 683.573 L830.978 683.573 L830.419 683.573 L829.86 683.573 L829.301 683.573 L828.741 683.573 L828.182 683.573 L827.623 683.573 L827.064 683.573 L826.504 683.573 L825.945 683.573 L825.386 683.573 L824.827 683.573 L824.267 683.573 L823.708 683.573 L823.149 683.573 L822.59 683.573 L822.03 683.573 L821.471 683.573 L820.912 683.573 L820.353 683.573 L819.793 683.573 L819.234 683.573 L818.675 683.573 L818.116 683.573 L817.556 683.573 L816.997 683.573 L816.438 683.573 L815.879 683.573 L815.319 683.573 L814.76 683.573 L814.201 683.573 L813.642 683.573 L813.082 683.573 L812.523 683.573 L811.964 683.573 L811.405 683.573 L810.845 683.573 L810.286 683.573 L809.727 683.573 L809.168 683.573 L808.608 683.573 L808.049 683.573 L807.49 683.573 L806.931 683.573 L806.371 683.573 L805.812 683.573 L805.253 683.573 L804.693 683.573 L804.134 683.573 L803.575 683.573 L803.016 683.573 L802.456 683.573 L801.897 683.573 L801.338 683.573 L800.779 683.573 L800.219 683.573 L799.66 683.573 L799.101 683.573 L798.542 683.573 L797.982 683.573 L797.423 683.573 L796.864 683.573 L796.305 683.573 L795.745 683.573 L795.186 683.573 L794.627 683.573 L794.068 683.573 L793.508 683.573 L792.949 683.573 L792.39 683.573 L791.831 683.573 L791.271 683.573 L790.712 683.573 L790.153 683.573 L789.594 683.573 L789.034 683.573 L788.475 683.573 L787.916 683.573 L787.357 683.573 L786.797 683.573 L786.238 683.573 L785.679 683.573 L785.12 683.573 L784.56 683.573 L784.001 683.573 L783.442 683.573 L782.883 683.573 L782.323 683.573 L781.764 683.573 L781.205 683.573 L780.646 683.573 L780.086 683.573 L779.527 683.573 L778.968 683.573 L778.409 683.573 L777.849 683.573 L777.29 683.573 L776.731 683.573 L776.172 683.573 L775.612 683.573 L775.053 683.573 L774.494 683.573 L773.935 683.573 L773.375 683.573 L772.816 683.573 L772.257 683.573 L771.698 683.573 L771.138 683.573 L770.579 683.573 L770.02 683.573 L769.461 683.573 L768.901 683.573 L768.342 683.573 L767.783 683.573 L767.224 683.573 L766.664 683.573 L766.105 683.573 L765.546 683.573 L764.987 683.573 L764.427 683.573 L763.868 683.573 L763.309 683.573 L762.75 683.573 L762.19 683.573 L761.631 683.573 L761.072 683.573 L760.513 683.573 L759.953 683.573 L759.394 683.573 L758.835 683.573 L758.276 683.573 L757.716 683.573 L757.157 683.573 L756.598 683.573 L756.039 683.573 L755.479 683.573 L754.92 683.573 L754.361 683.573 L753.802 683.573 L753.242 683.573 L752.683 683.573 L752.124 683.573 L751.565 683.573 L751.005 683.573 L750.446 683.573 L749.887 683.573 L749.328 683.573 L748.768 683.573 L748.209 683.573 L747.65 683.573 L747.091 683.573 L746.531 683.573 L745.972 683.573 L745.413 683.573 L744.854 683.573 L744.294 683.573 L743.735 683.573 L743.176 683.573 L742.617 683.573 L742.057 683.573 L741.498 683.573 L740.939 683.573 L740.38 683.573 L739.82 683.573 L739.261 683.573 L738.702 683.573 L738.143 683.573 L737.583 683.573 L737.024 683.573 L736.465 683.573 L735.906 683.573 L735.346 683.573 L734.787 683.573 L734.228 683.573 L733.669 683.573 L733.109 683.573 L732.55 683.573 L731.991 683.573 L731.432 683.573 L730.872 683.573 L730.313 683.573 L729.754 683.573 L729.195 683.573 L728.635 683.573 L728.076 683.573 L727.517 683.573 L726.958 683.573 L726.398 683.573 L725.839 683.573 L725.28 683.573 L724.721 683.573 L724.161 683.573 L723.602 683.573 L723.043 683.573 L722.484 683.573 L721.924 683.573 L721.365 683.573 L720.806 683.573 L720.247 683.573  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip233)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,687.973 720.806,687.973 721.365,687.973 721.924,687.973 722.484,687.973 723.043,687.973 723.602,687.973 724.161,687.973 724.721,687.973 725.28,687.973 725.839,687.973 726.398,687.973 726.958,687.973 727.517,687.973 728.076,687.973 728.635,687.973 729.195,687.973 729.754,687.973 730.313,687.973 730.872,687.973 731.432,687.973 731.991,687.973 732.55,687.973 733.109,687.973 733.669,687.973 734.228,687.973 734.787,687.973 735.346,687.973 735.906,687.973 736.465,687.973 737.024,687.973 737.583,687.973 738.143,687.973 738.702,687.973 739.261,687.973 739.82,687.973 740.38,687.973 740.939,687.973 741.498,687.973 742.057,687.973 742.617,687.973 743.176,687.973 743.735,687.973 744.294,687.973 744.854,687.973 745.413,687.973 745.972,687.973 746.531,687.973 747.091,687.973 747.65,687.973 748.209,687.973 748.768,687.973 749.328,687.973 749.887,687.973 750.446,687.973 751.005,687.973 751.565,687.973 752.124,687.973 752.683,687.973 753.242,687.973 753.802,687.973 754.361,687.973 754.92,687.973 755.479,687.973 756.039,687.973 756.598,687.973 757.157,687.973 757.716,687.973 758.276,687.973 758.835,687.973 759.394,687.973 759.953,687.973 760.513,687.973 761.072,687.973 761.631,687.973 762.19,687.973 762.75,687.973 763.309,687.973 763.868,687.973 764.427,687.973 764.987,687.973 765.546,687.973 766.105,687.973 766.664,687.973 767.224,687.973 767.783,687.973 768.342,687.973 768.901,687.973 769.461,687.973 770.02,687.973 770.579,687.973 771.138,687.973 771.698,687.973 772.257,687.973 772.816,687.973 773.375,687.973 773.935,687.973 774.494,687.973 775.053,687.973 775.612,687.973 776.172,687.973 776.731,687.973 777.29,687.973 777.849,687.973 778.409,687.973 778.968,687.973 779.527,687.973 780.086,687.973 780.646,687.973 781.205,687.973 781.764,687.973 782.323,687.973 782.883,687.973 783.442,687.973 784.001,687.973 784.56,687.973 785.12,687.973 785.679,687.973 786.238,687.973 786.797,687.973 787.357,687.973 787.916,687.973 788.475,687.973 789.034,687.973 789.594,687.973 790.153,687.973 790.712,687.973 791.271,687.973 791.831,687.973 792.39,687.973 792.949,687.973 793.508,687.973 794.068,687.973 794.627,687.973 795.186,687.973 795.745,687.973 796.305,687.973 796.864,687.973 797.423,687.973 797.982,687.973 798.542,687.973 799.101,687.973 799.66,687.973 800.219,687.973 800.779,687.973 801.338,687.973 801.897,687.973 802.456,687.973 803.016,687.973 803.575,687.973 804.134,687.973 804.693,687.973 805.253,687.973 805.812,687.973 806.371,687.973 806.931,687.973 807.49,687.973 808.049,687.973 808.608,687.973 809.168,687.973 809.727,687.973 810.286,687.973 810.845,687.973 811.405,687.973 811.964,687.973 812.523,687.973 813.082,687.973 813.642,687.973 814.201,687.973 814.76,687.973 815.319,687.973 815.879,687.973 816.438,687.973 816.997,687.973 817.556,687.973 818.116,687.973 818.675,687.973 819.234,687.973 819.793,687.973 820.353,687.973 820.912,687.973 821.471,687.973 822.03,687.973 822.59,687.973 823.149,687.973 823.708,687.973 824.267,687.973 824.827,687.973 825.386,687.973 825.945,687.973 826.504,687.973 827.064,687.973 827.623,687.973 828.182,687.973 828.741,687.973 829.301,687.973 829.86,687.973 830.419,687.973 830.978,687.973 831.538,687.973 832.097,687.973 832.656,687.973 833.215,687.973 833.775,687.973 834.334,687.973 834.893,687.973 835.452,687.973 836.012,687.973 836.571,687.973 837.13,687.973 837.689,687.973 838.249,687.973 838.808,687.973 839.367,687.973 839.926,687.973 840.486,687.973 841.045,687.973 841.604,687.973 842.163,687.973 842.723,687.973 843.282,687.973 843.841,687.973 844.4,687.973 844.96,687.973 845.519,687.973 846.078,687.973 846.637,687.973 847.197,687.973 847.756,687.973 848.315,687.973 848.874,687.973 849.434,687.973 849.993,687.973 850.552,687.973 851.111,687.973 851.671,687.973 852.23,687.973 852.789,687.973 853.348,687.973 853.908,687.973 854.467,687.973 855.026,687.973 855.585,687.973 856.145,687.973 856.704,687.973 857.263,687.973 857.822,687.973 858.382,687.973 858.941,687.973 859.5,687.973 860.059,687.973 860.619,687.973 861.178,687.973 861.737,687.973 862.296,687.973 862.856,687.973 863.415,687.973 863.974,687.973 864.533,687.973 865.093,687.973 865.652,687.973 866.211,687.973 866.77,687.973 867.33,687.973 867.889,687.973 868.448,687.973 869.007,687.973 869.567,687.973 870.126,687.973 870.685,687.973 871.244,687.973 871.804,687.973 872.363,687.973 872.922,687.973 873.481,687.973 874.041,687.973 874.6,687.973 875.159,687.973 875.718,687.973 876.278,687.973 876.837,687.973 877.396,687.973 877.955,687.973 878.515,687.973 879.074,687.973 879.633,687.973 880.192,687.973 880.752,687.973 881.311,687.973 881.87,687.973 882.429,687.973 882.989,687.973 883.548,687.973 884.107,687.973 884.666,687.973 885.226,687.973 885.785,687.973 886.344,687.973 886.903,687.973 887.463,687.973 888.022,687.973 888.581,687.973 889.14,687.973 889.7,687.973 890.259,687.973 890.818,687.973 891.377,687.973 891.937,687.973 892.496,687.973 893.055,687.973 893.614,687.973 894.174,687.973 894.733,687.973 895.292,687.973 895.851,687.973 896.411,687.973 896.97,687.973 897.529,687.973 898.088,687.973 898.648,687.973 899.207,687.973 899.766,687.973 900.325,687.973 900.885,687.973 901.444,687.973 902.003,687.973 902.562,687.973 903.122,687.973 903.681,687.973 904.24,687.973 904.799,687.973 905.359,687.973 905.918,687.973 906.477,687.973 907.036,687.973 907.596,687.973 908.155,687.973 908.714,687.973 909.273,687.973 909.833,687.973 910.392,687.973 910.951,687.973 911.51,687.973 912.07,687.973 912.629,687.973 913.188,687.973 913.747,687.973 914.307,687.973 914.866,687.973 915.425,687.973 915.984,687.973 916.544,687.973 917.103,687.973 917.662,687.973 918.221,687.973 918.781,687.973 919.34,687.973 919.899,687.973 920.458,687.973 921.018,687.973 921.577,687.973 922.136,687.973 922.695,687.973 923.255,687.973 923.814,687.973 924.373,687.973 924.932,687.973 925.492,687.973 926.051,687.973 926.61,687.973 927.169,687.973 927.729,687.973 928.288,687.973 928.847,687.973 929.406,687.973 929.966,687.973 930.525,687.973 931.084,687.973 931.644,687.973 932.203,687.973 932.762,687.973 933.321,687.973 933.881,687.973 934.44,687.973 934.999,687.973 935.558,687.973 936.118,687.973 936.677,687.973 937.236,687.973 937.795,687.973 938.355,687.973 938.914,687.973 939.473,687.973 940.032,687.973 940.592,687.973 941.151,687.973 941.71,687.973 942.269,687.973 942.829,687.973 943.388,687.973 943.947,687.973 944.506,687.973 945.066,687.973 945.625,687.973 946.184,687.973 946.743,687.973 947.303,687.973 947.862,687.973 948.421,687.973 948.98,687.973 949.54,687.973 950.099,687.973 950.658,687.973 951.217,687.973 951.777,687.973 952.336,687.973 952.895,687.973 953.454,687.973 954.014,687.973 954.573,687.973 955.132,687.973 955.691,687.973 956.251,687.973 956.81,687.973 957.369,687.973 957.928,687.973 958.488,687.973 959.047,687.973 959.606,687.973 960.165,687.973 960.725,687.973 961.284,687.973 961.843,687.973 962.402,687.973 962.962,687.973 963.521,687.973 964.08,687.973 964.639,687.973 965.199,687.973 965.758,687.973 966.317,687.973 966.876,687.973 967.436,687.973 967.995,687.973 968.554,687.973 969.113,687.973 969.673,687.973 970.232,687.973 970.791,687.973 971.35,687.973 971.91,687.973 972.469,687.973 973.028,687.973 973.587,687.973 974.147,687.973 974.706,687.973 975.265,687.973 975.824,687.973 976.384,687.973 976.943,687.973 977.502,687.973 978.061,687.973 978.621,687.973 979.18,687.973 979.739,687.973 980.298,687.973 980.858,687.973 981.417,687.973 981.976,687.973 982.535,687.973 983.095,687.973 983.654,687.973 984.213,687.973 984.772,687.973 985.332,687.973 985.891,687.973 986.45,687.973 987.009,687.973 987.569,687.973 988.128,687.973 988.687,687.973 989.246,687.973 989.806,687.973 990.365,687.973 990.924,687.973 991.483,687.973 992.043,687.973 992.602,687.973 993.161,687.973 993.72,687.973 994.28,687.973 994.839,687.973 995.398,687.973 995.957,687.973 996.517,687.973 997.076,687.973 997.635,687.973 998.194,687.973 998.754,687.973 999.313,687.973 999.872,687.973 1000.43,687.973 1000.99,687.973 1001.55,687.973 1002.11,687.973 1002.67,687.973 1003.23,687.973 1003.79,687.973 1004.35,687.973 1004.91,687.973 1005.46,687.973 1006.02,687.973 1006.58,687.973 1007.14,687.973 1007.7,687.973 1008.26,687.973 1008.82,687.973 1009.38,687.973 1009.94,687.973 1010.5,687.973 1011.06,687.973 1011.62,687.973 1012.18,687.973 1012.73,687.973 1013.29,687.973 1013.85,687.973 1014.41,687.973 1014.97,687.973 1015.53,687.973 1016.09,687.973 1016.65,687.973 1017.21,687.973 1017.77,687.973 1018.33,687.973 1018.89,687.973 1019.45,687.973 1020.01,687.973 1020.56,687.973 1021.12,687.973 1021.68,687.973 1022.24,687.973 1022.8,687.973 1023.36,687.973 1023.92,687.973 1024.48,687.973 1025.04,687.973 1025.6,687.973 1026.16,687.973 1026.72,687.973 1027.28,687.973 1027.83,687.973 1028.39,687.973 1028.95,687.973 1029.51,687.973 1030.07,687.973 1030.63,687.973 1031.19,687.973 1031.75,687.973 1032.31,687.973 1032.87,687.973 1033.43,687.973 1033.99,687.973 1034.55,687.973 1035.1,687.973 1035.66,687.973 1036.22,687.973 1036.78,687.973 1037.34,687.973 1037.9,687.973 1038.46,687.973 1039.02,687.973 1039.58,687.973 1040.14,687.973 1040.7,687.973 1041.26,687.973 1041.82,687.973 1042.38,687.973 1042.93,687.973 1043.49,687.973 1044.05,687.973 1044.61,687.973 1045.17,687.973 1045.73,687.973 1046.29,687.973 1046.85,687.973 1047.41,687.973 1047.97,687.973 1048.53,687.973 1049.09,687.973 1049.65,687.973 1050.2,687.973 1050.76,687.973 1051.32,687.973 1051.88,687.973 1052.44,687.973 1053,687.973 1053.56,687.973 1054.12,687.973 1054.68,687.973 1055.24,687.973 1055.8,687.973 1056.36,687.973 1056.92,687.973 1057.48,687.973 1058.03,687.973 1058.59,687.973 1059.15,687.973 1059.71,687.973 1060.27,687.973 1060.83,687.973 1061.39,687.973 1061.95,687.973 1062.51,687.973 1063.07,687.973 1063.63,687.973 1064.19,687.973 1064.75,687.973 1065.3,687.973 1065.86,687.973 1066.42,687.973 1066.98,687.973 1067.54,687.973 1068.1,687.973 1068.66,687.973 1069.22,687.973 1069.78,687.973 1070.34,687.973 1070.9,687.973 1071.46,687.973 1072.02,687.973 1072.57,687.973 1073.13,687.973 1073.69,687.973 1074.25,687.973 1074.81,687.973 1075.37,687.973 1075.93,687.973 1076.49,687.973 1077.05,687.973 1077.61,687.973 1078.17,687.973 1078.73,687.973 1079.29,687.973 1079.85,687.973 1080.4,687.973 1080.96,687.973 1081.52,687.973 1082.08,687.973 1082.64,687.973 1083.2,687.973 1083.76,687.973 1084.32,687.973 1084.88,687.973 1085.44,687.973 1086,687.973 1086.56,687.973 1087.12,687.973 1087.67,687.973 1088.23,687.973 1088.79,687.973 1089.35,687.973 1089.91,687.973 1090.47,687.973 1091.03,687.973 1091.59,687.973 1092.15,687.973 1092.71,687.973 1093.27,687.973 1093.83,687.973 1094.39,687.973 1094.94,687.973 1095.5,687.973 1096.06,687.973 1096.62,687.973 1097.18,687.973 1097.74,687.973 1098.3,687.973 1098.86,687.973 1099.42,687.973 1099.98,687.973 1100.54,687.973 1101.1,687.973 1101.66,687.973 1102.22,687.973 1102.77,687.973 1103.33,687.973 1103.89,687.973 1104.45,687.973 1105.01,687.973 1105.57,687.973 1106.13,687.973 1106.69,687.973 1107.25,687.973 1107.81,687.973 1108.37,687.973 1108.93,687.973 1109.49,687.973 1110.04,687.973 1110.6,687.973 1111.16,687.973 1111.72,687.973 1112.28,687.973 1112.84,687.973 1113.4,687.973 1113.96,687.973 1114.52,687.973 1115.08,687.973 1115.64,687.973 1116.2,687.973 1116.76,687.973 1117.31,687.973 1117.87,687.973 1118.43,687.973 1118.99,687.973 1119.55,687.973 1120.11,687.973 1120.67,687.973 1121.23,687.973 1121.79,687.973 1122.35,687.973 1122.91,687.973 1123.47,687.973 1124.03,687.973 1124.59,687.973 1125.14,687.973 1125.7,687.973 1126.26,687.973 1126.82,687.973 1127.38,687.973 1127.94,687.973 1128.5,687.973 1129.06,687.973 1129.62,687.973 1130.18,687.973 1130.74,687.973 1131.3,687.973 1131.86,687.973 1132.41,687.973 1132.97,687.973 1133.53,687.973 1134.09,687.973 1134.65,687.973 1135.21,687.973 1135.77,687.973 1136.33,687.973 1136.89,687.973 1137.45,687.973 1138.01,687.973 1138.57,687.973 1139.13,687.973 1139.68,687.973 1140.24,687.973 1140.8,687.973 1141.36,687.973 1141.92,687.973 1142.48,687.973 1143.04,687.973 1143.6,687.973 1144.16,687.973 1144.72,687.973 1145.28,687.973 1145.84,687.973 1146.4,687.973 1146.96,687.973 1147.51,687.973 1148.07,687.973 1148.63,687.973 1149.19,687.973 1149.75,687.973 1150.31,687.973 1150.87,687.973 1151.43,687.973 1151.99,687.973 1152.55,687.973 1153.11,687.973 1153.67,687.973 1154.23,687.973 1154.78,687.973 1155.34,687.973 1155.9,687.973 1156.46,687.973 1157.02,687.973 1157.58,687.973 1158.14,687.973 1158.7,687.973 1159.26,687.973 1159.82,687.973 1160.38,687.973 1160.94,687.973 1161.5,687.973 1162.05,687.973 1162.61,687.973 1163.17,687.973 1163.73,687.973 1164.29,687.973 1164.85,687.973 1165.41,687.973 1165.97,687.973 1166.53,687.973 1167.09,687.973 1167.65,687.973 1168.21,687.973 1168.77,687.973 1169.33,687.973 1169.88,687.973 1170.44,687.973 1171,687.973 1171.56,687.973 1172.12,687.973 1172.68,687.973 1173.24,687.973 1173.8,687.973 1174.36,687.973 1174.92,687.973 1175.48,687.973 1176.04,687.973 1176.6,687.973 1177.15,687.973 1177.71,687.973 1178.27,687.973 1178.83,687.973 1179.39,687.973 1179.95,687.973 1180.51,687.973 1181.07,687.973 1181.63,687.973 1182.19,687.973 1182.75,687.973 1183.31,687.973 1183.87,687.973 1184.43,687.973 1184.98,687.973 1185.54,687.973 1186.1,687.973 1186.66,687.973 1187.22,687.973 1187.78,687.973 1188.34,687.973 1188.9,687.973 1189.46,687.973 1190.02,687.973 1190.58,687.973 1191.14,687.973 1191.7,687.973 1192.25,687.973 1192.81,687.973 1193.37,687.973 1193.93,687.973 1194.49,687.973 1195.05,687.973 1195.61,687.973 1196.17,687.973 1196.73,687.973 1197.29,687.973 1197.85,687.973 1198.41,687.973 1198.97,687.973 1199.52,687.973 1200.08,687.973 1200.64,687.973 1201.2,687.973 1201.76,687.973 1202.32,687.973 1202.88,687.973 1203.44,687.973 1204,687.973 1204.56,687.973 1205.12,687.973 1205.68,687.973 1206.24,687.973 1206.8,687.973 1207.35,687.973 1207.91,687.973 1208.47,687.973 1209.03,687.973 1209.59,687.973 1210.15,687.973 1210.71,687.973 1211.27,687.973 1211.83,687.973 1212.39,687.973 1212.95,687.973 1213.51,687.973 1214.07,687.973 1214.62,687.973 1215.18,687.973 1215.74,687.973 1216.3,687.973 1216.86,687.973 1217.42,687.973 1217.98,687.973 1218.54,687.973 1219.1,687.973 1219.66,687.973 1220.22,687.973 1220.78,687.973 1221.34,687.973 1221.89,687.973 1222.45,687.973 1223.01,687.973 1223.57,687.973 1224.13,687.973 1224.69,687.973 1225.25,687.973 1225.81,687.973 1226.37,687.973 1226.93,687.973 1227.49,687.973 1228.05,687.973 1228.61,687.973 1229.17,687.973 1229.72,687.973 1230.28,687.973 1230.84,687.973 1231.4,687.973 1231.96,687.973 1232.52,687.973 1233.08,687.973 1233.64,687.973 1234.2,687.973 1234.76,687.973 1235.32,687.973 1235.88,687.973 1236.44,687.973 1236.99,687.973 1237.55,687.973 1238.11,687.973 1238.67,687.973 1239.23,687.973 1239.79,687.973 1240.35,687.973 1240.91,687.973 1241.47,687.973 1242.03,687.973 1242.59,687.973 1243.15,687.973 1243.71,687.973 1244.26,687.973 1244.82,687.973 1245.38,687.973 1245.94,687.973 1246.5,687.973 1247.06,687.973 1247.62,687.973 1248.18,687.973 1248.74,687.973 1249.3,687.973 1249.86,687.973 1250.42,687.973 1250.98,687.973 1251.54,687.973 1252.09,687.973 1252.65,687.973 1253.21,687.973 1253.77,687.973 1254.33,687.973 1254.89,687.973 1255.45,687.973 1256.01,687.973 1256.57,687.973 1257.13,687.973 1257.69,687.973 1258.25,687.973 1258.81,687.973 1259.36,687.973 1259.92,687.973 1260.48,687.973 1261.04,687.973 1261.6,687.973 1262.16,687.973 1262.72,687.973 1263.28,687.973 1263.84,687.973 1264.4,687.973 1264.96,687.973 1265.52,687.973 1266.08,687.973 1266.63,687.973 1267.19,687.973 1267.75,687.973 1268.31,687.973 1268.87,687.973 1269.43,687.973 1269.99,687.973 1270.55,687.973 1271.11,687.973 1271.67,687.973 1272.23,687.973 1272.79,687.973 1273.35,687.973 1273.91,687.973 1274.46,687.973 1275.02,687.973 1275.58,687.973 1276.14,687.973 1276.7,687.973 1277.26,687.973 1277.82,687.973 1278.38,687.973 1278.94,687.973 1279.5,687.973 1280.06,687.973 1280.62,687.973 1281.18,687.973 1281.73,687.973 1282.29,687.973 1282.85,687.973 1283.41,687.973 1283.97,687.973 1284.53,687.973 1285.09,687.973 1285.65,687.973 1286.21,687.973 1286.77,687.973 1287.33,687.973 1287.89,687.973 1288.45,687.973 1289,687.973 1289.56,687.973 1290.12,687.973 1290.68,687.973 1291.24,687.973 1291.8,687.973 1292.36,687.973 1292.92,687.973 1293.48,687.973 1294.04,687.973 1294.6,687.973 1295.16,687.973 1295.72,687.973 1296.28,687.973 1296.83,687.973 1297.39,687.973 1297.95,687.973 1298.51,687.973 1299.07,687.973 1299.63,687.973 1300.19,687.973 1300.75,687.973 1301.31,687.973 1301.87,687.973 1302.43,687.973 1302.99,687.973 1303.55,687.973 1304.1,687.973 1304.66,687.973 1305.22,687.973 1305.78,687.973 1306.34,687.973 1306.9,687.973 1307.46,687.973 1308.02,687.973 1308.58,687.973 1309.14,687.973 1309.7,687.973 1310.26,687.973 1310.82,687.973 1311.38,687.973 1311.93,687.973 1312.49,687.973 1313.05,687.973 1313.61,687.973 1314.17,687.973 1314.73,687.973 1315.29,687.973 1315.85,687.973 1316.41,687.973 1316.97,687.973 1317.53,687.973 1318.09,687.973 1318.65,687.973 1319.2,687.973 1319.76,687.973 1320.32,687.973 1320.88,687.973 1321.44,687.973 1322,687.973 1322.56,687.973 1323.12,687.973 1323.68,687.973 1324.24,687.973 1324.8,687.973 1325.36,687.973 1325.92,687.973 1326.47,687.973 1327.03,687.973 1327.59,687.973 1328.15,687.973 1328.71,687.973 1329.27,687.973 1329.83,687.973 1330.39,687.973 1330.95,687.973 1331.51,687.973 1332.07,687.973 1332.63,687.973 1333.19,687.973 1333.75,687.973 1334.3,687.973 1334.86,687.973 1335.42,687.973 1335.98,687.973 1336.54,687.973 1337.1,687.973 1337.66,687.973 1338.22,687.973 1338.78,687.973 1339.34,687.973 1339.9,687.973 1340.46,687.973 1341.02,687.973 1341.57,687.973 1342.13,687.973 1342.69,687.973 1343.25,687.973 1343.81,687.973 1344.37,687.973 1344.93,687.973 1345.49,687.973 1346.05,687.973 1346.61,687.973 1347.17,687.973 1347.73,687.973 1348.29,687.973 1348.84,687.973 1349.4,687.973 1349.96,687.973 1350.52,687.973 1351.08,687.973 1351.64,687.973 1352.2,687.973 1352.76,687.973 1353.32,687.973 1353.88,687.973 1354.44,687.973 1355,687.973 1355.56,687.973 1356.12,687.973 1356.67,687.973 1357.23,687.973 1357.79,687.973 1358.35,687.973 1358.91,687.973 1359.47,687.973 1360.03,687.973 1360.59,687.973 1361.15,687.973 1361.71,687.973 1362.27,687.973 1362.83,687.973 1363.39,687.973 1363.94,687.973 1364.5,687.973 1365.06,687.973 1365.62,687.973 1366.18,687.973 1366.74,687.973 1367.3,687.973 1367.86,687.973 1368.42,687.973 1368.98,687.973 1369.54,687.973 1370.1,687.973 1370.66,687.973 1371.21,687.973 1371.77,687.973 1372.33,687.973 1372.89,687.973 1373.45,687.973 1374.01,687.973 1374.57,687.973 1375.13,687.973 1375.69,687.973 1376.25,687.973 1376.81,687.973 1377.37,687.973 1377.93,687.973 1378.49,687.973 1379.04,687.973 1379.6,687.973 1380.16,687.973 1380.72,687.973 1381.28,687.973 1381.84,687.973 1382.4,687.973 1382.96,687.973 1383.52,687.973 1384.08,687.973 1384.64,687.973 1385.2,687.973 1385.76,687.973 1386.31,687.973 1386.87,687.973 1387.43,687.973 1387.99,687.973 1388.55,687.973 1389.11,687.973 1389.67,687.973 1390.23,687.973 1390.79,687.973 1391.35,687.973 1391.91,687.973 1392.47,687.973 1393.03,687.973 1393.58,687.973 1394.14,687.973 1394.7,687.973 1395.26,687.973 1395.82,687.973 1396.38,687.973 1396.94,687.973 1397.5,687.973 1398.06,687.973 1398.62,687.973 1399.18,687.973 1399.74,687.973 1400.3,687.973 1400.86,687.973 1401.41,687.973 1401.97,687.973 1402.53,687.973 1403.09,687.973 1403.65,687.973 1404.21,687.973 1404.77,687.973 1405.33,687.973 1405.89,687.973 1406.45,687.973 1407.01,687.973 1407.57,687.973 1408.13,687.973 1408.68,687.973 1409.24,687.973 1409.8,687.973 1410.36,687.973 1410.92,687.973 1411.48,687.973 1412.04,687.973 1412.6,687.973 1413.16,687.973 1413.72,687.973 1414.28,687.973 1414.84,687.973 1415.4,687.973 1415.95,687.973 1416.51,687.973 1417.07,687.973 1417.63,687.973 1418.19,687.973 1418.75,687.973 1419.31,687.973 1419.87,687.973 1420.43,687.973 1420.99,687.973 1421.55,687.973 1422.11,687.973 1422.67,687.973 1423.23,687.973 1423.78,687.973 1424.34,687.973 1424.9,687.973 1425.46,687.973 1426.02,687.973 1426.58,687.973 1427.14,687.973 1427.7,687.973 1428.26,687.973 1428.82,687.973 1429.38,687.973 1429.94,687.973 1430.5,687.973 1431.05,687.973 1431.61,687.973 1432.17,687.973 1432.73,687.973 1433.29,687.973 1433.85,687.973 1434.41,687.973 1434.97,687.973 1435.53,687.973 1436.09,687.973 1436.65,687.973 1437.21,687.973 1437.77,687.973 1438.33,687.973 1438.88,687.973 1439.44,687.973 1440,687.973 1440.56,687.973 1441.12,687.973 1441.68,687.973 1442.24,687.973 1442.8,687.973 1443.36,687.973 1443.92,687.973 1444.48,687.973 1445.04,687.973 1445.6,687.973 1446.15,687.973 1446.71,687.973 1447.27,687.973 1447.83,687.973 1448.39,687.973 1448.95,687.973 1449.51,687.973 1450.07,687.973 1450.63,687.973 1451.19,687.973 1451.75,687.973 1452.31,687.973 1452.87,687.973 1453.42,687.973 1453.98,687.973 1454.54,687.973 1455.1,687.973 1455.66,687.973 1456.22,687.973 1456.78,687.973 1457.34,687.973 1457.9,687.973 1458.46,687.973 1459.02,687.973 1459.58,687.973 1460.14,687.973 1460.7,687.973 1461.25,687.973 1461.81,687.973 1462.37,687.973 1462.93,687.973 1463.49,687.973 1464.05,687.973 1464.61,687.973 1465.17,687.973 1465.73,687.973 1466.29,687.973 1466.85,687.973 1467.41,687.973 1467.97,687.973 1468.52,687.973 1469.08,687.973 1469.64,687.973 1470.2,687.973 1470.76,687.973 1471.32,687.973 1471.88,687.973 1472.44,687.973 1473,687.973 1473.56,687.973 1474.12,687.973 1474.68,687.973 1475.24,687.973 1475.79,687.973 1476.35,687.973 1476.91,687.973 1477.47,687.973 1478.03,687.973 1478.59,687.973 1479.15,687.973 1479.71,687.973 1480.27,687.973 1480.83,687.973 1481.39,687.973 1481.95,687.973 1482.51,687.973 1483.07,687.973 1483.62,687.973 1484.18,687.973 1484.74,687.973 1485.3,687.973 1485.86,687.973 1486.42,687.973 1486.98,687.973 1487.54,687.973 1488.1,687.973 1488.66,687.973 1489.22,687.973 1489.78,687.973 1490.34,687.973 1490.89,687.973 1491.45,687.973 1492.01,687.973 1492.57,687.973 1493.13,687.973 1493.69,687.973 1494.25,687.973 1494.81,687.973 1495.37,687.973 1495.93,687.973 1496.49,687.973 1497.05,687.973 1497.61,687.973 1498.16,687.973 1498.72,687.973 1499.28,687.973 1499.84,687.973 1500.4,687.973 1500.96,687.973 1501.52,687.973 1502.08,687.973 1502.64,687.973 1503.2,687.973 1503.76,687.973 1504.32,687.973 1504.88,687.973 1505.44,687.973 1505.99,687.973 1506.55,687.973 1507.11,687.973 1507.67,687.973 1508.23,687.973 1508.79,687.973 1509.35,687.973 1509.91,687.973 1510.47,687.973 1511.03,687.973 1511.59,687.973 1512.15,687.973 1512.71,687.973 1513.26,687.973 1513.82,687.973 1514.38,687.973 1514.94,687.973 1515.5,687.973 1516.06,687.973 1516.62,687.973 1517.18,687.973 1517.74,687.973 1518.3,687.973 1518.86,687.973 1519.42,687.973 1519.98,687.973 1520.53,687.973 1521.09,687.973 1521.65,687.973 1522.21,687.973 1522.77,687.973 1523.33,687.973 1523.89,687.973 1524.45,687.973 1525.01,687.973 1525.57,687.973 1526.13,687.973 1526.69,687.973 1527.25,687.973 1527.81,687.973 1528.36,687.973 1528.92,687.973 1529.48,687.973 1530.04,687.973 1530.6,687.973 1531.16,687.973 1531.72,687.973 1532.28,687.973 1532.84,687.973 1533.4,687.973 1533.96,687.973 1534.52,687.973 1535.08,687.973 1535.63,687.973 1536.19,687.973 1536.75,687.973 1537.31,687.973 1537.87,687.973 1538.43,687.973 1538.99,687.973 1539.55,687.973 1540.11,687.973 1540.67,687.973 1541.23,687.973 1541.79,687.973 1542.35,687.973 1542.9,687.973 1543.46,687.973 1544.02,687.973 1544.58,687.973 1545.14,687.973 1545.7,687.973 1546.26,687.973 1546.82,687.973 1547.38,687.973 1547.94,687.973 1548.5,687.973 1549.06,687.973 1549.62,687.973 1550.18,687.973 1550.73,687.973 1551.29,687.973 1551.85,687.973 1552.41,687.973 1552.97,687.973 1553.53,687.973 1554.09,687.973 1554.65,687.973 1555.21,687.973 1555.77,687.973 1556.33,687.973 1556.89,687.973 1557.45,687.973 1558,687.973 1558.56,687.973 1559.12,687.973 1559.68,687.973 1560.24,687.973 1560.8,687.973 1561.36,687.973 1561.92,687.973 1562.48,687.973 1563.04,687.973 1563.6,687.973 1564.16,687.973 1564.72,687.973 1565.28,687.973 1565.83,687.973 1566.39,687.973 1566.95,687.973 1567.51,687.973 1568.07,687.973 1568.63,687.973 1569.19,687.973 1569.75,687.973 1570.31,687.973 1570.87,687.973 1571.43,687.973 1571.99,687.973 1572.55,687.973 1573.1,687.973 1573.66,687.973 1574.22,687.973 1574.78,687.973 1575.34,687.973 1575.9,687.973 1576.46,687.973 1577.02,687.973 1577.58,687.973 1578.14,687.973 1578.7,687.973 1579.26,687.973 1579.82,687.973 1580.37,687.973 1580.93,687.973 1581.49,687.973 1582.05,687.973 1582.61,687.973 1583.17,687.973 1583.73,687.973 1584.29,687.973 1584.85,687.973 1585.41,687.973 1585.97,687.973 1586.53,687.973 1587.09,687.973 1587.65,687.973 1588.2,687.973 1588.76,687.973 1589.32,687.973 1589.88,687.973 1590.44,687.973 1591,687.973 1591.56,687.973 1592.12,687.973 1592.68,687.973 1593.24,687.973 1593.8,687.973 1594.36,687.973 1594.92,687.973 1595.47,687.973 1596.03,687.973 1596.59,687.973 1597.15,687.973 1597.71,687.973 1598.27,687.973 1598.83,687.973 1599.39,687.973 1599.95,687.973 1600.51,687.973 1601.07,687.973 1601.63,687.973 1602.19,687.973 1602.74,687.973 1603.3,687.973 1603.86,687.973 1604.42,687.973 1604.98,687.973 1605.54,687.973 1606.1,687.973 1606.66,687.973 1607.22,687.973 1607.78,687.973 1608.34,687.973 1608.9,687.973 1609.46,687.973 1610.02,687.973 1610.57,687.973 1611.13,687.973 1611.69,687.973 1612.25,687.973 1612.81,687.973 1613.37,687.973 1613.93,687.973 1614.49,687.973 1615.05,687.973 1615.61,687.973 1616.17,687.973 1616.73,687.973 1617.29,687.973 1617.84,687.973 1618.4,687.973 1618.96,687.973 1619.52,687.973 1620.08,687.973 1620.64,687.973 1621.2,687.973 1621.76,687.973 1622.32,687.973 1622.88,687.973 1623.44,687.973 1624,687.973 1624.56,687.973 1625.11,687.973 1625.67,687.973 1626.23,687.973 1626.79,687.973 1627.35,687.973 1627.91,687.973 1628.47,687.973 1629.03,687.973 1629.59,687.973 1630.15,687.973 1630.71,687.973 1631.27,687.973 1631.83,687.973 1632.39,687.973 1632.94,687.973 1633.5,687.973 1634.06,687.973 1634.62,687.973 1635.18,687.973 1635.74,687.973 1636.3,687.973 1636.86,687.973 1637.42,687.973 1637.98,687.973 1638.54,687.973 1639.1,687.973 1639.66,687.973 1640.21,687.973 1640.77,687.973 1641.33,687.973 1641.89,687.973 1642.45,687.973 1643.01,687.973 1643.57,687.973 1644.13,687.973 1644.69,687.973 1645.25,687.973 1645.81,687.973 1646.37,687.973 1646.93,687.973 1647.48,687.973 1648.04,687.973 1648.6,687.973 1649.16,687.973 1649.72,687.973 1650.28,687.973 1650.84,687.973 1651.4,687.973 1651.96,687.973 1652.52,687.973 1653.08,687.973 1653.64,687.973 1654.2,687.973 1654.76,687.973 1655.31,687.973 1655.87,687.973 1656.43,687.973 1656.99,687.973 1657.55,687.973 1658.11,687.973 1658.67,687.973 1659.23,687.973 1659.79,687.973 1660.35,687.973 1660.91,687.973 1661.47,687.973 1662.03,687.973 1662.58,687.973 1663.14,687.973 1663.7,687.973 1664.26,687.973 1664.82,687.973 1665.38,687.973 1665.94,687.973 1666.5,687.973 1667.06,687.973 1667.62,687.973 1668.18,687.973 1668.74,687.973 1669.3,687.973 1669.85,687.973 1670.41,687.973 1670.97,687.973 1671.53,687.973 1672.09,687.973 1672.65,687.973 1673.21,687.973 1673.77,687.973 1674.33,687.973 1674.89,687.973 1675.45,687.973 1676.01,687.973 1676.57,687.973 1677.13,687.973 1677.68,687.973 1678.24,687.973 1678.8,687.973 1679.36,687.973 1679.92,687.973 1680.48,687.973 1681.04,687.973 1681.6,687.973 1682.16,687.973 1682.72,687.973 1683.28,687.973 1683.84,687.973 1684.4,687.973 1684.95,687.973 1685.51,687.973 1686.07,687.973 1686.63,687.973 1687.19,687.973 1687.75,687.973 1688.31,687.973 1688.87,687.973 1689.43,687.973 1689.99,687.973 1690.55,687.973 1691.11,687.973 1691.67,687.973 1692.23,687.973 1692.78,687.973 1693.34,687.973 1693.9,687.973 1694.46,687.973 1695.02,687.973 1695.58,687.973 1696.14,687.973 1696.7,687.973 1697.26,687.973 1697.82,687.973 1698.38,687.973 1698.94,687.973 1699.5,687.973 1700.05,687.973 1700.61,687.973 1701.17,687.973 1701.73,687.973 1702.29,687.973 1702.85,687.973 1703.41,687.973 1703.97,687.973 1704.53,687.973 1705.09,687.973 1705.65,687.973 1706.21,687.973 1706.77,687.973 1707.32,687.973 1707.88,687.973 1708.44,687.973 1709,687.973 1709.56,687.973 1710.12,687.973 1710.68,687.973 1711.24,687.973 1711.8,687.973 1712.36,687.973 1712.92,687.973 1713.48,687.973 1714.04,687.973 1714.6,687.973 1715.15,687.973 1715.71,687.973 1716.27,687.973 1716.83,687.973 1717.39,687.973 1717.95,687.973 1718.51,687.973 1719.07,687.973 1719.63,687.973 1720.19,687.973 1720.75,687.973 1721.31,687.973 1721.87,687.973 1722.42,687.973 1722.98,687.973 1723.54,687.973 1724.1,687.973 1724.66,687.973 1725.22,687.973 1725.78,687.973 1726.34,687.973 1726.9,687.973 1727.46,687.973 1728.02,687.973 1728.58,687.973 1729.14,687.973 1729.69,687.973 1730.25,687.973 1730.81,687.973 1731.37,687.973 1731.93,687.973 1732.49,687.973 1733.05,687.973 1733.61,687.973 1734.17,687.973 1734.73,687.973 1735.29,687.973 1735.85,687.973 1736.41,687.973 1736.97,687.973 1737.52,687.973 1738.08,687.973 1738.64,687.973 1739.2,687.973 1739.76,687.973 1740.32,687.973 1740.88,687.973 1741.44,687.973 1742,687.973 1742.56,687.973 1743.12,687.973 1743.68,687.973 1744.24,687.973 1744.79,687.973 1745.35,687.973 1745.91,687.973 1746.47,687.973 1747.03,687.973 1747.59,687.973 1748.15,687.973 1748.71,687.973 1749.27,687.973 1749.83,687.973 1750.39,687.973 1750.95,687.973 1751.51,687.973 1752.06,687.973 1752.62,687.973 1753.18,687.973 1753.74,687.973 1754.3,687.973 1754.86,687.973 1755.42,687.973 1755.98,687.973 1756.54,687.973 1757.1,687.973 1757.66,687.973 1758.22,687.973 1758.78,687.973 1759.34,687.973 1759.89,687.973 1760.45,687.973 1761.01,687.973 1761.57,687.973 1762.13,687.973 1762.69,687.973 1763.25,687.973 1763.81,687.973 1764.37,687.973 1764.93,687.973 1765.49,687.973 1766.05,687.973 1766.61,687.973 1767.16,687.973 1767.72,687.973 1768.28,687.973 1768.84,687.973 1769.4,687.973 1769.96,687.973 1770.52,687.973 1771.08,687.973 1771.64,687.973 1772.2,687.973 1772.76,687.973 1773.32,687.973 1773.88,687.973 1774.43,687.973 1774.99,687.973 1775.55,687.973 1776.11,687.973 1776.67,687.973 1777.23,687.973 1777.79,687.973 1778.35,687.973 1778.91,687.973 1779.47,687.973 1780.03,687.973 1780.59,687.973 1781.15,687.973 1781.71,687.973 1782.26,687.973 1782.82,687.973 1783.38,687.973 1783.94,687.973 1784.5,687.973 1785.06,687.973 1785.62,687.973 1786.18,687.973 1786.74,687.973 1787.3,687.973 1787.86,687.973 1788.42,687.973 1788.98,687.973 1789.53,687.973 1790.09,687.973 1790.65,687.973 1791.21,687.973 1791.77,687.973 1792.33,687.973 1792.89,687.973 1793.45,687.973 1794.01,687.973 1794.57,687.973 1795.13,687.973 1795.69,687.973 1796.25,687.973 1796.8,687.973 1797.36,687.973 1797.92,687.973 1798.48,687.973 1799.04,687.973 1799.6,687.973 1800.16,687.973 1800.72,687.973 1801.28,687.973 1801.84,687.973 1802.4,687.973 1802.96,687.973 1803.52,687.973 1804.08,687.973 1804.63,687.973 1805.19,687.973 1805.75,687.973 1806.31,687.973 1806.87,687.973 1807.43,687.973 1807.99,687.973 1808.55,687.973 1809.11,687.973 1809.67,687.973 1810.23,687.973 1810.79,687.973 1811.35,687.973 1811.9,687.973 1812.46,687.973 1813.02,687.973 1813.58,687.973 1814.14,687.973 1814.7,687.973 1815.26,687.973 1815.82,687.973 1816.38,687.973 1816.94,687.973 1817.5,687.973 1818.06,687.973 1818.62,687.973 1819.18,687.973 1819.73,687.973 1820.29,687.973 1820.85,687.973 1821.41,687.973 1821.97,687.973 1822.53,687.973 1823.09,687.973 1823.65,687.973 1824.21,687.973 1824.77,687.973 1825.33,687.973 1825.89,687.973 1826.45,687.973 1827,687.973 1827.56,687.973 1828.12,687.973 1828.68,687.973 1829.24,687.973 1829.8,687.973 1830.36,687.973 1830.92,687.973 1831.48,687.973 1832.04,687.973 1832.6,687.973 1833.16,687.973 1833.72,687.973 1834.27,687.973 1834.83,687.973 1835.39,687.973 1835.95,687.973 1836.51,687.973 1837.07,687.973 1837.63,687.973 1838.19,687.973 \"/>\n<path clip-path=\"url(#clip233)\" d=\"M720.247 684.849 L720.806 684.849 L721.365 684.849 L721.924 684.849 L722.484 684.849 L723.043 684.849 L723.602 684.849 L724.161 684.849 L724.721 684.849 L725.28 684.849 L725.839 684.849 L726.398 684.849 L726.958 684.849 L727.517 684.849 L728.076 684.849 L728.635 684.849 L729.195 684.849 L729.754 684.849 L730.313 684.849 L730.872 684.849 L731.432 684.849 L731.991 684.849 L732.55 684.849 L733.109 684.849 L733.669 684.849 L734.228 684.849 L734.787 684.849 L735.346 684.849 L735.906 684.849 L736.465 684.849 L737.024 684.849 L737.583 684.849 L738.143 684.849 L738.702 684.849 L739.261 684.849 L739.82 684.849 L740.38 684.849 L740.939 684.849 L741.498 684.849 L742.057 684.849 L742.617 684.849 L743.176 684.849 L743.735 684.849 L744.294 684.849 L744.854 684.849 L745.413 684.849 L745.972 684.849 L746.531 684.849 L747.091 684.849 L747.65 684.849 L748.209 684.849 L748.768 684.849 L749.328 684.849 L749.887 684.849 L750.446 684.849 L751.005 684.849 L751.565 684.849 L752.124 684.849 L752.683 684.849 L753.242 684.849 L753.802 684.849 L754.361 684.849 L754.92 684.849 L755.479 684.849 L756.039 684.849 L756.598 684.849 L757.157 684.849 L757.716 684.849 L758.276 684.849 L758.835 684.849 L759.394 684.849 L759.953 684.849 L760.513 684.849 L761.072 684.849 L761.631 684.849 L762.19 684.849 L762.75 684.849 L763.309 684.849 L763.868 684.849 L764.427 684.849 L764.987 684.849 L765.546 684.849 L766.105 684.849 L766.664 684.849 L767.224 684.849 L767.783 684.849 L768.342 684.849 L768.901 684.849 L769.461 684.849 L770.02 684.849 L770.579 684.849 L771.138 684.849 L771.698 684.849 L772.257 684.849 L772.816 684.849 L773.375 684.849 L773.935 684.849 L774.494 684.849 L775.053 684.849 L775.612 684.849 L776.172 684.849 L776.731 684.849 L777.29 684.849 L777.849 684.849 L778.409 684.849 L778.968 684.849 L779.527 684.849 L780.086 684.849 L780.646 684.849 L781.205 684.849 L781.764 684.849 L782.323 684.849 L782.883 684.849 L783.442 684.849 L784.001 684.849 L784.56 684.849 L785.12 684.849 L785.679 684.849 L786.238 684.849 L786.797 684.849 L787.357 684.849 L787.916 684.849 L788.475 684.849 L789.034 684.849 L789.594 684.849 L790.153 684.849 L790.712 684.849 L791.271 684.849 L791.831 684.849 L792.39 684.849 L792.949 684.849 L793.508 684.849 L794.068 684.849 L794.627 684.849 L795.186 684.849 L795.745 684.849 L796.305 684.849 L796.864 684.849 L797.423 684.849 L797.982 684.849 L798.542 684.849 L799.101 684.849 L799.66 684.849 L800.219 684.849 L800.779 684.849 L801.338 684.849 L801.897 684.849 L802.456 684.849 L803.016 684.849 L803.575 684.849 L804.134 684.849 L804.693 684.849 L805.253 684.849 L805.812 684.849 L806.371 684.849 L806.931 684.849 L807.49 684.849 L808.049 684.849 L808.608 684.849 L809.168 684.849 L809.727 684.849 L810.286 684.849 L810.845 684.849 L811.405 684.849 L811.964 684.849 L812.523 684.849 L813.082 684.849 L813.642 684.849 L814.201 684.849 L814.76 684.849 L815.319 684.849 L815.879 684.849 L816.438 684.849 L816.997 684.849 L817.556 684.849 L818.116 684.849 L818.675 684.849 L819.234 684.849 L819.793 684.849 L820.353 684.849 L820.912 684.849 L821.471 684.849 L822.03 684.849 L822.59 684.849 L823.149 684.849 L823.708 684.849 L824.267 684.849 L824.827 684.849 L825.386 684.849 L825.945 684.849 L826.504 684.849 L827.064 684.849 L827.623 684.849 L828.182 684.849 L828.741 684.849 L829.301 684.849 L829.86 684.849 L830.419 684.849 L830.978 684.849 L831.538 684.849 L832.097 684.849 L832.656 684.849 L833.215 684.849 L833.775 684.849 L834.334 684.849 L834.893 684.849 L835.452 684.849 L836.012 684.849 L836.571 684.849 L837.13 684.849 L837.689 684.849 L838.249 684.849 L838.808 684.849 L839.367 684.849 L839.926 684.849 L840.486 684.849 L841.045 684.849 L841.604 684.849 L842.163 684.849 L842.723 684.849 L843.282 684.849 L843.841 684.849 L844.4 684.849 L844.96 684.849 L845.519 684.849 L846.078 684.849 L846.637 684.849 L847.197 684.849 L847.756 684.849 L848.315 684.849 L848.874 684.849 L849.434 684.849 L849.993 684.849 L850.552 684.849 L851.111 684.849 L851.671 684.849 L852.23 684.849 L852.789 684.849 L853.348 684.849 L853.908 684.849 L854.467 684.849 L855.026 684.849 L855.585 684.849 L856.145 684.849 L856.704 684.849 L857.263 684.849 L857.822 684.849 L858.382 684.849 L858.941 684.849 L859.5 684.849 L860.059 684.849 L860.619 684.849 L861.178 684.849 L861.737 684.849 L862.296 684.849 L862.856 684.849 L863.415 684.849 L863.974 684.849 L864.533 684.849 L865.093 684.849 L865.652 684.849 L866.211 684.849 L866.77 684.849 L867.33 684.849 L867.889 684.849 L868.448 684.849 L869.007 684.849 L869.567 684.849 L870.126 684.849 L870.685 684.849 L871.244 684.849 L871.804 684.849 L872.363 684.849 L872.922 684.849 L873.481 684.849 L874.041 684.849 L874.6 684.849 L875.159 684.849 L875.718 684.849 L876.278 684.849 L876.837 684.849 L877.396 684.849 L877.955 684.849 L878.515 684.849 L879.074 684.849 L879.633 684.849 L880.192 684.849 L880.752 684.849 L881.311 684.849 L881.87 684.849 L882.429 684.849 L882.989 684.849 L883.548 684.849 L884.107 684.849 L884.666 684.849 L885.226 684.849 L885.785 684.849 L886.344 684.849 L886.903 684.849 L887.463 684.849 L888.022 684.849 L888.581 684.849 L889.14 684.849 L889.7 684.849 L890.259 684.849 L890.818 684.849 L891.377 684.849 L891.937 684.849 L892.496 684.849 L893.055 684.849 L893.614 684.849 L894.174 684.849 L894.733 684.849 L895.292 684.849 L895.851 684.849 L896.411 684.849 L896.97 684.849 L897.529 684.849 L898.088 684.849 L898.648 684.849 L899.207 684.849 L899.766 684.849 L900.325 684.849 L900.885 684.849 L901.444 684.849 L902.003 684.849 L902.562 684.849 L903.122 684.849 L903.681 684.849 L904.24 684.849 L904.799 684.849 L905.359 684.849 L905.918 684.849 L906.477 684.849 L907.036 684.849 L907.596 684.849 L908.155 684.849 L908.714 684.849 L909.273 684.849 L909.833 684.849 L910.392 684.849 L910.951 684.849 L911.51 684.849 L912.07 684.849 L912.629 684.849 L913.188 684.849 L913.747 684.849 L914.307 684.849 L914.866 684.849 L915.425 684.849 L915.984 684.849 L916.544 684.849 L917.103 684.849 L917.662 684.849 L918.221 684.849 L918.781 684.849 L919.34 684.849 L919.899 684.849 L920.458 684.849 L921.018 684.849 L921.577 684.849 L922.136 684.849 L922.695 684.849 L923.255 684.849 L923.814 684.849 L924.373 684.849 L924.932 684.849 L925.492 684.849 L926.051 684.849 L926.61 684.849 L927.169 684.849 L927.729 684.849 L928.288 684.849 L928.847 684.849 L929.406 684.849 L929.966 684.849 L930.525 684.849 L931.084 684.849 L931.644 684.849 L932.203 684.849 L932.762 684.849 L933.321 684.849 L933.881 684.849 L934.44 684.849 L934.999 684.849 L935.558 684.849 L936.118 684.849 L936.677 684.849 L937.236 684.849 L937.795 684.849 L938.355 684.849 L938.914 684.849 L939.473 684.849 L940.032 684.849 L940.592 684.849 L941.151 684.849 L941.71 684.849 L942.269 684.849 L942.829 684.849 L943.388 684.849 L943.947 684.849 L944.506 684.849 L945.066 684.849 L945.625 684.849 L946.184 684.849 L946.743 684.849 L947.303 684.849 L947.862 684.849 L948.421 684.849 L948.98 684.849 L949.54 684.849 L950.099 684.849 L950.658 684.849 L951.217 684.849 L951.777 684.849 L952.336 684.849 L952.895 684.849 L953.454 684.849 L954.014 684.849 L954.573 684.849 L955.132 684.849 L955.691 684.849 L956.251 684.849 L956.81 684.849 L957.369 684.849 L957.928 684.849 L958.488 684.849 L959.047 684.849 L959.606 684.849 L960.165 684.849 L960.725 684.849 L961.284 684.849 L961.843 684.849 L962.402 684.849 L962.962 684.849 L963.521 684.849 L964.08 684.849 L964.639 684.849 L965.199 684.849 L965.758 684.849 L966.317 684.849 L966.876 684.849 L967.436 684.849 L967.995 684.849 L968.554 684.849 L969.113 684.849 L969.673 684.849 L970.232 684.849 L970.791 684.849 L971.35 684.849 L971.91 684.849 L972.469 684.849 L973.028 684.849 L973.587 684.849 L974.147 684.849 L974.706 684.849 L975.265 684.849 L975.824 684.849 L976.384 684.849 L976.943 684.849 L977.502 684.849 L978.061 684.849 L978.621 684.849 L979.18 684.849 L979.739 684.849 L980.298 684.849 L980.858 684.849 L981.417 684.849 L981.976 684.849 L982.535 684.849 L983.095 684.849 L983.654 684.849 L984.213 684.849 L984.772 684.849 L985.332 684.849 L985.891 684.849 L986.45 684.849 L987.009 684.849 L987.569 684.849 L988.128 684.849 L988.687 684.849 L989.246 684.849 L989.806 684.849 L990.365 684.849 L990.924 684.849 L991.483 684.849 L992.043 684.849 L992.602 684.849 L993.161 684.849 L993.72 684.849 L994.28 684.849 L994.839 684.849 L995.398 684.849 L995.957 684.849 L996.517 684.849 L997.076 684.849 L997.635 684.849 L998.194 684.849 L998.754 684.849 L999.313 684.849 L999.872 684.849 L1000.43 684.849 L1000.99 684.849 L1001.55 684.849 L1002.11 684.849 L1002.67 684.849 L1003.23 684.849 L1003.79 684.849 L1004.35 684.849 L1004.91 684.849 L1005.46 684.849 L1006.02 684.849 L1006.58 684.849 L1007.14 684.849 L1007.7 684.849 L1008.26 684.849 L1008.82 684.849 L1009.38 684.849 L1009.94 684.849 L1010.5 684.849 L1011.06 684.849 L1011.62 684.849 L1012.18 684.849 L1012.73 684.849 L1013.29 684.849 L1013.85 684.849 L1014.41 684.849 L1014.97 684.849 L1015.53 684.849 L1016.09 684.849 L1016.65 684.849 L1017.21 684.849 L1017.77 684.849 L1018.33 684.849 L1018.89 684.849 L1019.45 684.849 L1020.01 684.849 L1020.56 684.849 L1021.12 684.849 L1021.68 684.849 L1022.24 684.849 L1022.8 684.849 L1023.36 684.849 L1023.92 684.849 L1024.48 684.849 L1025.04 684.849 L1025.6 684.849 L1026.16 684.849 L1026.72 684.849 L1027.28 684.849 L1027.83 684.849 L1028.39 684.849 L1028.95 684.849 L1029.51 684.849 L1030.07 684.849 L1030.63 684.849 L1031.19 684.849 L1031.75 684.849 L1032.31 684.849 L1032.87 684.849 L1033.43 684.849 L1033.99 684.849 L1034.55 684.849 L1035.1 684.849 L1035.66 684.849 L1036.22 684.849 L1036.78 684.849 L1037.34 684.849 L1037.9 684.849 L1038.46 684.849 L1039.02 684.849 L1039.58 684.849 L1040.14 684.849 L1040.7 684.849 L1041.26 684.849 L1041.82 684.849 L1042.38 684.849 L1042.93 684.849 L1043.49 684.849 L1044.05 684.849 L1044.61 684.849 L1045.17 684.849 L1045.73 684.849 L1046.29 684.849 L1046.85 684.849 L1047.41 684.849 L1047.97 684.849 L1048.53 684.849 L1049.09 684.849 L1049.65 684.849 L1050.2 684.849 L1050.76 684.849 L1051.32 684.849 L1051.88 684.849 L1052.44 684.849 L1053 684.849 L1053.56 684.849 L1054.12 684.849 L1054.68 684.849 L1055.24 684.849 L1055.8 684.849 L1056.36 684.849 L1056.92 684.849 L1057.48 684.849 L1058.03 684.849 L1058.59 684.849 L1059.15 684.849 L1059.71 684.849 L1060.27 684.849 L1060.83 684.849 L1061.39 684.849 L1061.95 684.849 L1062.51 684.849 L1063.07 684.849 L1063.63 684.849 L1064.19 684.849 L1064.75 684.849 L1065.3 684.849 L1065.86 684.849 L1066.42 684.849 L1066.98 684.849 L1067.54 684.849 L1068.1 684.849 L1068.66 684.849 L1069.22 684.849 L1069.78 684.849 L1070.34 684.849 L1070.9 684.849 L1071.46 684.849 L1072.02 684.849 L1072.57 684.849 L1073.13 684.849 L1073.69 684.849 L1074.25 684.849 L1074.81 684.849 L1075.37 684.849 L1075.93 684.849 L1076.49 684.849 L1077.05 684.849 L1077.61 684.849 L1078.17 684.849 L1078.73 684.849 L1079.29 684.849 L1079.85 684.849 L1080.4 684.849 L1080.96 684.849 L1081.52 684.849 L1082.08 684.849 L1082.64 684.849 L1083.2 684.849 L1083.76 684.849 L1084.32 684.849 L1084.88 684.849 L1085.44 684.849 L1086 684.849 L1086.56 684.849 L1087.12 684.849 L1087.67 684.849 L1088.23 684.849 L1088.79 684.849 L1089.35 684.849 L1089.91 684.849 L1090.47 684.849 L1091.03 684.849 L1091.59 684.849 L1092.15 684.849 L1092.71 684.849 L1093.27 684.849 L1093.83 684.849 L1094.39 684.849 L1094.94 684.849 L1095.5 684.849 L1096.06 684.849 L1096.62 684.849 L1097.18 684.849 L1097.74 684.849 L1098.3 684.849 L1098.86 684.849 L1099.42 684.849 L1099.98 684.849 L1100.54 684.849 L1101.1 684.849 L1101.66 684.849 L1102.22 684.849 L1102.77 684.849 L1103.33 684.849 L1103.89 684.849 L1104.45 684.849 L1105.01 684.849 L1105.57 684.849 L1106.13 684.849 L1106.69 684.849 L1107.25 684.849 L1107.81 684.849 L1108.37 684.849 L1108.93 684.849 L1109.49 684.849 L1110.04 684.849 L1110.6 684.849 L1111.16 684.849 L1111.72 684.849 L1112.28 684.849 L1112.84 684.849 L1113.4 684.849 L1113.96 684.849 L1114.52 684.849 L1115.08 684.849 L1115.64 684.849 L1116.2 684.849 L1116.76 684.849 L1117.31 684.849 L1117.87 684.849 L1118.43 684.849 L1118.99 684.849 L1119.55 684.849 L1120.11 684.849 L1120.67 684.849 L1121.23 684.849 L1121.79 684.849 L1122.35 684.849 L1122.91 684.849 L1123.47 684.849 L1124.03 684.849 L1124.59 684.849 L1125.14 684.849 L1125.7 684.849 L1126.26 684.849 L1126.82 684.849 L1127.38 684.849 L1127.94 684.849 L1128.5 684.849 L1129.06 684.849 L1129.62 684.849 L1130.18 684.849 L1130.74 684.849 L1131.3 684.849 L1131.86 684.849 L1132.41 684.849 L1132.97 684.849 L1133.53 684.849 L1134.09 684.849 L1134.65 684.849 L1135.21 684.849 L1135.77 684.849 L1136.33 684.849 L1136.89 684.849 L1137.45 684.849 L1138.01 684.849 L1138.57 684.849 L1139.13 684.849 L1139.68 684.849 L1140.24 684.849 L1140.8 684.849 L1141.36 684.849 L1141.92 684.849 L1142.48 684.849 L1143.04 684.849 L1143.6 684.849 L1144.16 684.849 L1144.72 684.849 L1145.28 684.849 L1145.84 684.849 L1146.4 684.849 L1146.96 684.849 L1147.51 684.849 L1148.07 684.849 L1148.63 684.849 L1149.19 684.849 L1149.75 684.849 L1150.31 684.849 L1150.87 684.849 L1151.43 684.849 L1151.99 684.849 L1152.55 684.849 L1153.11 684.849 L1153.67 684.849 L1154.23 684.849 L1154.78 684.849 L1155.34 684.849 L1155.9 684.849 L1156.46 684.849 L1157.02 684.849 L1157.58 684.849 L1158.14 684.849 L1158.7 684.849 L1159.26 684.849 L1159.82 684.849 L1160.38 684.849 L1160.94 684.849 L1161.5 684.849 L1162.05 684.849 L1162.61 684.849 L1163.17 684.849 L1163.73 684.849 L1164.29 684.849 L1164.85 684.849 L1165.41 684.849 L1165.97 684.849 L1166.53 684.849 L1167.09 684.849 L1167.65 684.849 L1168.21 684.849 L1168.77 684.849 L1169.33 684.849 L1169.88 684.849 L1170.44 684.849 L1171 684.849 L1171.56 684.849 L1172.12 684.849 L1172.68 684.849 L1173.24 684.849 L1173.8 684.849 L1174.36 684.849 L1174.92 684.849 L1175.48 684.849 L1176.04 684.849 L1176.6 684.849 L1177.15 684.849 L1177.71 684.849 L1178.27 684.849 L1178.83 684.849 L1179.39 684.849 L1179.95 684.849 L1180.51 684.849 L1181.07 684.849 L1181.63 684.849 L1182.19 684.849 L1182.75 684.849 L1183.31 684.849 L1183.87 684.849 L1184.43 684.849 L1184.98 684.849 L1185.54 684.849 L1186.1 684.849 L1186.66 684.849 L1187.22 684.849 L1187.78 684.849 L1188.34 684.849 L1188.9 684.849 L1189.46 684.849 L1190.02 684.849 L1190.58 684.849 L1191.14 684.849 L1191.7 684.849 L1192.25 684.849 L1192.81 684.849 L1193.37 684.849 L1193.93 684.849 L1194.49 684.849 L1195.05 684.849 L1195.61 684.849 L1196.17 684.849 L1196.73 684.849 L1197.29 684.849 L1197.85 684.849 L1198.41 684.849 L1198.97 684.849 L1199.52 684.849 L1200.08 684.849 L1200.64 684.849 L1201.2 684.849 L1201.76 684.849 L1202.32 684.849 L1202.88 684.849 L1203.44 684.849 L1204 684.849 L1204.56 684.849 L1205.12 684.849 L1205.68 684.849 L1206.24 684.849 L1206.8 684.849 L1207.35 684.849 L1207.91 684.849 L1208.47 684.849 L1209.03 684.849 L1209.59 684.849 L1210.15 684.849 L1210.71 684.849 L1211.27 684.849 L1211.83 684.849 L1212.39 684.849 L1212.95 684.849 L1213.51 684.849 L1214.07 684.849 L1214.62 684.849 L1215.18 684.849 L1215.74 684.849 L1216.3 684.849 L1216.86 684.849 L1217.42 684.849 L1217.98 684.849 L1218.54 684.849 L1219.1 684.849 L1219.66 684.849 L1220.22 684.849 L1220.78 684.849 L1221.34 684.849 L1221.89 684.849 L1222.45 684.849 L1223.01 684.849 L1223.57 684.849 L1224.13 684.849 L1224.69 684.849 L1225.25 684.849 L1225.81 684.849 L1226.37 684.849 L1226.93 684.849 L1227.49 684.849 L1228.05 684.849 L1228.61 684.849 L1229.17 684.849 L1229.72 684.849 L1230.28 684.849 L1230.84 684.849 L1231.4 684.849 L1231.96 684.849 L1232.52 684.849 L1233.08 684.849 L1233.64 684.849 L1234.2 684.849 L1234.76 684.849 L1235.32 684.849 L1235.88 684.849 L1236.44 684.849 L1236.99 684.849 L1237.55 684.849 L1238.11 684.849 L1238.67 684.849 L1239.23 684.849 L1239.79 684.849 L1240.35 684.849 L1240.91 684.849 L1241.47 684.849 L1242.03 684.849 L1242.59 684.849 L1243.15 684.849 L1243.71 684.849 L1244.26 684.849 L1244.82 684.849 L1245.38 684.849 L1245.94 684.849 L1246.5 684.849 L1247.06 684.849 L1247.62 684.849 L1248.18 684.849 L1248.74 684.849 L1249.3 684.849 L1249.86 684.849 L1250.42 684.849 L1250.98 684.849 L1251.54 684.849 L1252.09 684.849 L1252.65 684.849 L1253.21 684.849 L1253.77 684.849 L1254.33 684.849 L1254.89 684.849 L1255.45 684.849 L1256.01 684.849 L1256.57 684.849 L1257.13 684.849 L1257.69 684.849 L1258.25 684.849 L1258.81 684.849 L1259.36 684.849 L1259.92 684.849 L1260.48 684.849 L1261.04 684.849 L1261.6 684.849 L1262.16 684.849 L1262.72 684.849 L1263.28 684.849 L1263.84 684.849 L1264.4 684.849 L1264.96 684.849 L1265.52 684.849 L1266.08 684.849 L1266.63 684.849 L1267.19 684.849 L1267.75 684.849 L1268.31 684.849 L1268.87 684.849 L1269.43 684.849 L1269.99 684.849 L1270.55 684.849 L1271.11 684.849 L1271.67 684.849 L1272.23 684.849 L1272.79 684.849 L1273.35 684.849 L1273.91 684.849 L1274.46 684.849 L1275.02 684.849 L1275.58 684.849 L1276.14 684.849 L1276.7 684.849 L1277.26 684.849 L1277.82 684.849 L1278.38 684.849 L1278.94 684.849 L1279.5 684.849 L1280.06 684.849 L1280.62 684.849 L1281.18 684.849 L1281.73 684.849 L1282.29 684.849 L1282.85 684.849 L1283.41 684.849 L1283.97 684.849 L1284.53 684.849 L1285.09 684.849 L1285.65 684.849 L1286.21 684.849 L1286.77 684.849 L1287.33 684.849 L1287.89 684.849 L1288.45 684.849 L1289 684.849 L1289.56 684.849 L1290.12 684.849 L1290.68 684.849 L1291.24 684.849 L1291.8 684.849 L1292.36 684.849 L1292.92 684.849 L1293.48 684.849 L1294.04 684.849 L1294.6 684.849 L1295.16 684.849 L1295.72 684.849 L1296.28 684.849 L1296.83 684.849 L1297.39 684.849 L1297.95 684.849 L1298.51 684.849 L1299.07 684.849 L1299.63 684.849 L1300.19 684.849 L1300.75 684.849 L1301.31 684.849 L1301.87 684.849 L1302.43 684.849 L1302.99 684.849 L1303.55 684.849 L1304.1 684.849 L1304.66 684.849 L1305.22 684.849 L1305.78 684.849 L1306.34 684.849 L1306.9 684.849 L1307.46 684.849 L1308.02 684.849 L1308.58 684.849 L1309.14 684.849 L1309.7 684.849 L1310.26 684.849 L1310.82 684.849 L1311.38 684.849 L1311.93 684.849 L1312.49 684.849 L1313.05 684.849 L1313.61 684.849 L1314.17 684.849 L1314.73 684.849 L1315.29 684.849 L1315.85 684.849 L1316.41 684.849 L1316.97 684.849 L1317.53 684.849 L1318.09 684.849 L1318.65 684.849 L1319.2 684.849 L1319.76 684.849 L1320.32 684.849 L1320.88 684.849 L1321.44 684.849 L1322 684.849 L1322.56 684.849 L1323.12 684.849 L1323.68 684.849 L1324.24 684.849 L1324.8 684.849 L1325.36 684.849 L1325.92 684.849 L1326.47 684.849 L1327.03 684.849 L1327.59 684.849 L1328.15 684.849 L1328.71 684.849 L1329.27 684.849 L1329.83 684.849 L1330.39 684.849 L1330.95 684.849 L1331.51 684.849 L1332.07 684.849 L1332.63 684.849 L1333.19 684.849 L1333.75 684.849 L1334.3 684.849 L1334.86 684.849 L1335.42 684.849 L1335.98 684.849 L1336.54 684.849 L1337.1 684.849 L1337.66 684.849 L1338.22 684.849 L1338.78 684.849 L1339.34 684.849 L1339.9 684.849 L1340.46 684.849 L1341.02 684.849 L1341.57 684.849 L1342.13 684.849 L1342.69 684.849 L1343.25 684.849 L1343.81 684.849 L1344.37 684.849 L1344.93 684.849 L1345.49 684.849 L1346.05 684.849 L1346.61 684.849 L1347.17 684.849 L1347.73 684.849 L1348.29 684.849 L1348.84 684.849 L1349.4 684.849 L1349.96 684.849 L1350.52 684.849 L1351.08 684.849 L1351.64 684.849 L1352.2 684.849 L1352.76 684.849 L1353.32 684.849 L1353.88 684.849 L1354.44 684.849 L1355 684.849 L1355.56 684.849 L1356.12 684.849 L1356.67 684.849 L1357.23 684.849 L1357.79 684.849 L1358.35 684.849 L1358.91 684.849 L1359.47 684.849 L1360.03 684.849 L1360.59 684.849 L1361.15 684.849 L1361.71 684.849 L1362.27 684.849 L1362.83 684.849 L1363.39 684.849 L1363.94 684.849 L1364.5 684.849 L1365.06 684.849 L1365.62 684.849 L1366.18 684.849 L1366.74 684.849 L1367.3 684.849 L1367.86 684.849 L1368.42 684.849 L1368.98 684.849 L1369.54 684.849 L1370.1 684.849 L1370.66 684.849 L1371.21 684.849 L1371.77 684.849 L1372.33 684.849 L1372.89 684.849 L1373.45 684.849 L1374.01 684.849 L1374.57 684.849 L1375.13 684.849 L1375.69 684.849 L1376.25 684.849 L1376.81 684.849 L1377.37 684.849 L1377.93 684.849 L1378.49 684.849 L1379.04 684.849 L1379.6 684.849 L1380.16 684.849 L1380.72 684.849 L1381.28 684.849 L1381.84 684.849 L1382.4 684.849 L1382.96 684.849 L1383.52 684.849 L1384.08 684.849 L1384.64 684.849 L1385.2 684.849 L1385.76 684.849 L1386.31 684.849 L1386.87 684.849 L1387.43 684.849 L1387.99 684.849 L1388.55 684.849 L1389.11 684.849 L1389.67 684.849 L1390.23 684.849 L1390.79 684.849 L1391.35 684.849 L1391.91 684.849 L1392.47 684.849 L1393.03 684.849 L1393.58 684.849 L1394.14 684.849 L1394.7 684.849 L1395.26 684.849 L1395.82 684.849 L1396.38 684.849 L1396.94 684.849 L1397.5 684.849 L1398.06 684.849 L1398.62 684.849 L1399.18 684.849 L1399.74 684.849 L1400.3 684.849 L1400.86 684.849 L1401.41 684.849 L1401.97 684.849 L1402.53 684.849 L1403.09 684.849 L1403.65 684.849 L1404.21 684.849 L1404.77 684.849 L1405.33 684.849 L1405.89 684.849 L1406.45 684.849 L1407.01 684.849 L1407.57 684.849 L1408.13 684.849 L1408.68 684.849 L1409.24 684.849 L1409.8 684.849 L1410.36 684.849 L1410.92 684.849 L1411.48 684.849 L1412.04 684.849 L1412.6 684.849 L1413.16 684.849 L1413.72 684.849 L1414.28 684.849 L1414.84 684.849 L1415.4 684.849 L1415.95 684.849 L1416.51 684.849 L1417.07 684.849 L1417.63 684.849 L1418.19 684.849 L1418.75 684.849 L1419.31 684.849 L1419.87 684.849 L1420.43 684.849 L1420.99 684.849 L1421.55 684.849 L1422.11 684.849 L1422.67 684.849 L1423.23 684.849 L1423.78 684.849 L1424.34 684.849 L1424.9 684.849 L1425.46 684.849 L1426.02 684.849 L1426.58 684.849 L1427.14 684.849 L1427.7 684.849 L1428.26 684.849 L1428.82 684.849 L1429.38 684.849 L1429.94 684.849 L1430.5 684.849 L1431.05 684.849 L1431.61 684.849 L1432.17 684.849 L1432.73 684.849 L1433.29 684.849 L1433.85 684.849 L1434.41 684.849 L1434.97 684.849 L1435.53 684.849 L1436.09 684.849 L1436.65 684.849 L1437.21 684.849 L1437.77 684.849 L1438.33 684.849 L1438.88 684.849 L1439.44 684.849 L1440 684.849 L1440.56 684.849 L1441.12 684.849 L1441.68 684.849 L1442.24 684.849 L1442.8 684.849 L1443.36 684.849 L1443.92 684.849 L1444.48 684.849 L1445.04 684.849 L1445.6 684.849 L1446.15 684.849 L1446.71 684.849 L1447.27 684.849 L1447.83 684.849 L1448.39 684.849 L1448.95 684.849 L1449.51 684.849 L1450.07 684.849 L1450.63 684.849 L1451.19 684.849 L1451.75 684.849 L1452.31 684.849 L1452.87 684.849 L1453.42 684.849 L1453.98 684.849 L1454.54 684.849 L1455.1 684.849 L1455.66 684.849 L1456.22 684.849 L1456.78 684.849 L1457.34 684.849 L1457.9 684.849 L1458.46 684.849 L1459.02 684.849 L1459.58 684.849 L1460.14 684.849 L1460.7 684.849 L1461.25 684.849 L1461.81 684.849 L1462.37 684.849 L1462.93 684.849 L1463.49 684.849 L1464.05 684.849 L1464.61 684.849 L1465.17 684.849 L1465.73 684.849 L1466.29 684.849 L1466.85 684.849 L1467.41 684.849 L1467.97 684.849 L1468.52 684.849 L1469.08 684.849 L1469.64 684.849 L1470.2 684.849 L1470.76 684.849 L1471.32 684.849 L1471.88 684.849 L1472.44 684.849 L1473 684.849 L1473.56 684.849 L1474.12 684.849 L1474.68 684.849 L1475.24 684.849 L1475.79 684.849 L1476.35 684.849 L1476.91 684.849 L1477.47 684.849 L1478.03 684.849 L1478.59 684.849 L1479.15 684.849 L1479.71 684.849 L1480.27 684.849 L1480.83 684.849 L1481.39 684.849 L1481.95 684.849 L1482.51 684.849 L1483.07 684.849 L1483.62 684.849 L1484.18 684.849 L1484.74 684.849 L1485.3 684.849 L1485.86 684.849 L1486.42 684.849 L1486.98 684.849 L1487.54 684.849 L1488.1 684.849 L1488.66 684.849 L1489.22 684.849 L1489.78 684.849 L1490.34 684.849 L1490.89 684.849 L1491.45 684.849 L1492.01 684.849 L1492.57 684.849 L1493.13 684.849 L1493.69 684.849 L1494.25 684.849 L1494.81 684.849 L1495.37 684.849 L1495.93 684.849 L1496.49 684.849 L1497.05 684.849 L1497.61 684.849 L1498.16 684.849 L1498.72 684.849 L1499.28 684.849 L1499.84 684.849 L1500.4 684.849 L1500.96 684.849 L1501.52 684.849 L1502.08 684.849 L1502.64 684.849 L1503.2 684.849 L1503.76 684.849 L1504.32 684.849 L1504.88 684.849 L1505.44 684.849 L1505.99 684.849 L1506.55 684.849 L1507.11 684.849 L1507.67 684.849 L1508.23 684.849 L1508.79 684.849 L1509.35 684.849 L1509.91 684.849 L1510.47 684.849 L1511.03 684.849 L1511.59 684.849 L1512.15 684.849 L1512.71 684.849 L1513.26 684.849 L1513.82 684.849 L1514.38 684.849 L1514.94 684.849 L1515.5 684.849 L1516.06 684.849 L1516.62 684.849 L1517.18 684.849 L1517.74 684.849 L1518.3 684.849 L1518.86 684.849 L1519.42 684.849 L1519.98 684.849 L1520.53 684.849 L1521.09 684.849 L1521.65 684.849 L1522.21 684.849 L1522.77 684.849 L1523.33 684.849 L1523.89 684.849 L1524.45 684.849 L1525.01 684.849 L1525.57 684.849 L1526.13 684.849 L1526.69 684.849 L1527.25 684.849 L1527.81 684.849 L1528.36 684.849 L1528.92 684.849 L1529.48 684.849 L1530.04 684.849 L1530.6 684.849 L1531.16 684.849 L1531.72 684.849 L1532.28 684.849 L1532.84 684.849 L1533.4 684.849 L1533.96 684.849 L1534.52 684.849 L1535.08 684.849 L1535.63 684.849 L1536.19 684.849 L1536.75 684.849 L1537.31 684.849 L1537.87 684.849 L1538.43 684.849 L1538.99 684.849 L1539.55 684.849 L1540.11 684.849 L1540.67 684.849 L1541.23 684.849 L1541.79 684.849 L1542.35 684.849 L1542.9 684.849 L1543.46 684.849 L1544.02 684.849 L1544.58 684.849 L1545.14 684.849 L1545.7 684.849 L1546.26 684.849 L1546.82 684.849 L1547.38 684.849 L1547.94 684.849 L1548.5 684.849 L1549.06 684.849 L1549.62 684.849 L1550.18 684.849 L1550.73 684.849 L1551.29 684.849 L1551.85 684.849 L1552.41 684.849 L1552.97 684.849 L1553.53 684.849 L1554.09 684.849 L1554.65 684.849 L1555.21 684.849 L1555.77 684.849 L1556.33 684.849 L1556.89 684.849 L1557.45 684.849 L1558 684.849 L1558.56 684.849 L1559.12 684.849 L1559.68 684.849 L1560.24 684.849 L1560.8 684.849 L1561.36 684.849 L1561.92 684.849 L1562.48 684.849 L1563.04 684.849 L1563.6 684.849 L1564.16 684.849 L1564.72 684.849 L1565.28 684.849 L1565.83 684.849 L1566.39 684.849 L1566.95 684.849 L1567.51 684.849 L1568.07 684.849 L1568.63 684.849 L1569.19 684.849 L1569.75 684.849 L1570.31 684.849 L1570.87 684.849 L1571.43 684.849 L1571.99 684.849 L1572.55 684.849 L1573.1 684.849 L1573.66 684.849 L1574.22 684.849 L1574.78 684.849 L1575.34 684.849 L1575.9 684.849 L1576.46 684.849 L1577.02 684.849 L1577.58 684.849 L1578.14 684.849 L1578.7 684.849 L1579.26 684.849 L1579.82 684.849 L1580.37 684.849 L1580.93 684.849 L1581.49 684.849 L1582.05 684.849 L1582.61 684.849 L1583.17 684.849 L1583.73 684.849 L1584.29 684.849 L1584.85 684.849 L1585.41 684.849 L1585.97 684.849 L1586.53 684.849 L1587.09 684.849 L1587.65 684.849 L1588.2 684.849 L1588.76 684.849 L1589.32 684.849 L1589.88 684.849 L1590.44 684.849 L1591 684.849 L1591.56 684.849 L1592.12 684.849 L1592.68 684.849 L1593.24 684.849 L1593.8 684.849 L1594.36 684.849 L1594.92 684.849 L1595.47 684.849 L1596.03 684.849 L1596.59 684.849 L1597.15 684.849 L1597.71 684.849 L1598.27 684.849 L1598.83 684.849 L1599.39 684.849 L1599.95 684.849 L1600.51 684.849 L1601.07 684.849 L1601.63 684.849 L1602.19 684.849 L1602.74 684.849 L1603.3 684.849 L1603.86 684.849 L1604.42 684.849 L1604.98 684.849 L1605.54 684.849 L1606.1 684.849 L1606.66 684.849 L1607.22 684.849 L1607.78 684.849 L1608.34 684.849 L1608.9 684.849 L1609.46 684.849 L1610.02 684.849 L1610.57 684.849 L1611.13 684.849 L1611.69 684.849 L1612.25 684.849 L1612.81 684.849 L1613.37 684.849 L1613.93 684.849 L1614.49 684.849 L1615.05 684.849 L1615.61 684.849 L1616.17 684.849 L1616.73 684.849 L1617.29 684.849 L1617.84 684.849 L1618.4 684.849 L1618.96 684.849 L1619.52 684.849 L1620.08 684.849 L1620.64 684.849 L1621.2 684.849 L1621.76 684.849 L1622.32 684.849 L1622.88 684.849 L1623.44 684.849 L1624 684.849 L1624.56 684.849 L1625.11 684.849 L1625.67 684.849 L1626.23 684.849 L1626.79 684.849 L1627.35 684.849 L1627.91 684.849 L1628.47 684.849 L1629.03 684.849 L1629.59 684.849 L1630.15 684.849 L1630.71 684.849 L1631.27 684.849 L1631.83 684.849 L1632.39 684.849 L1632.94 684.849 L1633.5 684.849 L1634.06 684.849 L1634.62 684.849 L1635.18 684.849 L1635.74 684.849 L1636.3 684.849 L1636.86 684.849 L1637.42 684.849 L1637.98 684.849 L1638.54 684.849 L1639.1 684.849 L1639.66 684.849 L1640.21 684.849 L1640.77 684.849 L1641.33 684.849 L1641.89 684.849 L1642.45 684.849 L1643.01 684.849 L1643.57 684.849 L1644.13 684.849 L1644.69 684.849 L1645.25 684.849 L1645.81 684.849 L1646.37 684.849 L1646.93 684.849 L1647.48 684.849 L1648.04 684.849 L1648.6 684.849 L1649.16 684.849 L1649.72 684.849 L1650.28 684.849 L1650.84 684.849 L1651.4 684.849 L1651.96 684.849 L1652.52 684.849 L1653.08 684.849 L1653.64 684.849 L1654.2 684.849 L1654.76 684.849 L1655.31 684.849 L1655.87 684.849 L1656.43 684.849 L1656.99 684.849 L1657.55 684.849 L1658.11 684.849 L1658.67 684.849 L1659.23 684.849 L1659.79 684.849 L1660.35 684.849 L1660.91 684.849 L1661.47 684.849 L1662.03 684.849 L1662.58 684.849 L1663.14 684.849 L1663.7 684.849 L1664.26 684.849 L1664.82 684.849 L1665.38 684.849 L1665.94 684.849 L1666.5 684.849 L1667.06 684.849 L1667.62 684.849 L1668.18 684.849 L1668.74 684.849 L1669.3 684.849 L1669.85 684.849 L1670.41 684.849 L1670.97 684.849 L1671.53 684.849 L1672.09 684.849 L1672.65 684.849 L1673.21 684.849 L1673.77 684.849 L1674.33 684.849 L1674.89 684.849 L1675.45 684.849 L1676.01 684.849 L1676.57 684.849 L1677.13 684.849 L1677.68 684.849 L1678.24 684.849 L1678.8 684.849 L1679.36 684.849 L1679.92 684.849 L1680.48 684.849 L1681.04 684.849 L1681.6 684.849 L1682.16 684.849 L1682.72 684.849 L1683.28 684.849 L1683.84 684.849 L1684.4 684.849 L1684.95 684.849 L1685.51 684.849 L1686.07 684.849 L1686.63 684.849 L1687.19 684.849 L1687.75 684.849 L1688.31 684.849 L1688.87 684.849 L1689.43 684.849 L1689.99 684.849 L1690.55 684.849 L1691.11 684.849 L1691.67 684.849 L1692.23 684.849 L1692.78 684.849 L1693.34 684.849 L1693.9 684.849 L1694.46 684.849 L1695.02 684.849 L1695.58 684.849 L1696.14 684.849 L1696.7 684.849 L1697.26 684.849 L1697.82 684.849 L1698.38 684.849 L1698.94 684.849 L1699.5 684.849 L1700.05 684.849 L1700.61 684.849 L1701.17 684.849 L1701.73 684.849 L1702.29 684.849 L1702.85 684.849 L1703.41 684.849 L1703.97 684.849 L1704.53 684.849 L1705.09 684.849 L1705.65 684.849 L1706.21 684.849 L1706.77 684.849 L1707.32 684.849 L1707.88 684.849 L1708.44 684.849 L1709 684.849 L1709.56 684.849 L1710.12 684.849 L1710.68 684.849 L1711.24 684.849 L1711.8 684.849 L1712.36 684.849 L1712.92 684.849 L1713.48 684.849 L1714.04 684.849 L1714.6 684.849 L1715.15 684.849 L1715.71 684.849 L1716.27 684.849 L1716.83 684.849 L1717.39 684.849 L1717.95 684.849 L1718.51 684.849 L1719.07 684.849 L1719.63 684.849 L1720.19 684.849 L1720.75 684.849 L1721.31 684.849 L1721.87 684.849 L1722.42 684.849 L1722.98 684.849 L1723.54 684.849 L1724.1 684.849 L1724.66 684.849 L1725.22 684.849 L1725.78 684.849 L1726.34 684.849 L1726.9 684.849 L1727.46 684.849 L1728.02 684.849 L1728.58 684.849 L1729.14 684.849 L1729.69 684.849 L1730.25 684.849 L1730.81 684.849 L1731.37 684.849 L1731.93 684.849 L1732.49 684.849 L1733.05 684.849 L1733.61 684.849 L1734.17 684.849 L1734.73 684.849 L1735.29 684.849 L1735.85 684.849 L1736.41 684.849 L1736.97 684.849 L1737.52 684.849 L1738.08 684.849 L1738.64 684.849 L1739.2 684.849 L1739.76 684.849 L1740.32 684.849 L1740.88 684.849 L1741.44 684.849 L1742 684.849 L1742.56 684.849 L1743.12 684.849 L1743.68 684.849 L1744.24 684.849 L1744.79 684.849 L1745.35 684.849 L1745.91 684.849 L1746.47 684.849 L1747.03 684.849 L1747.59 684.849 L1748.15 684.849 L1748.71 684.849 L1749.27 684.849 L1749.83 684.849 L1750.39 684.849 L1750.95 684.849 L1751.51 684.849 L1752.06 684.849 L1752.62 684.849 L1753.18 684.849 L1753.74 684.849 L1754.3 684.849 L1754.86 684.849 L1755.42 684.849 L1755.98 684.849 L1756.54 684.849 L1757.1 684.849 L1757.66 684.849 L1758.22 684.849 L1758.78 684.849 L1759.34 684.849 L1759.89 684.849 L1760.45 684.849 L1761.01 684.849 L1761.57 684.849 L1762.13 684.849 L1762.69 684.849 L1763.25 684.849 L1763.81 684.849 L1764.37 684.849 L1764.93 684.849 L1765.49 684.849 L1766.05 684.849 L1766.61 684.849 L1767.16 684.849 L1767.72 684.849 L1768.28 684.849 L1768.84 684.849 L1769.4 684.849 L1769.96 684.849 L1770.52 684.849 L1771.08 684.849 L1771.64 684.849 L1772.2 684.849 L1772.76 684.849 L1773.32 684.849 L1773.88 684.849 L1774.43 684.849 L1774.99 684.849 L1775.55 684.849 L1776.11 684.849 L1776.67 684.849 L1777.23 684.849 L1777.79 684.849 L1778.35 684.849 L1778.91 684.849 L1779.47 684.849 L1780.03 684.849 L1780.59 684.849 L1781.15 684.849 L1781.71 684.849 L1782.26 684.849 L1782.82 684.849 L1783.38 684.849 L1783.94 684.849 L1784.5 684.849 L1785.06 684.849 L1785.62 684.849 L1786.18 684.849 L1786.74 684.849 L1787.3 684.849 L1787.86 684.849 L1788.42 684.849 L1788.98 684.849 L1789.53 684.849 L1790.09 684.849 L1790.65 684.849 L1791.21 684.849 L1791.77 684.849 L1792.33 684.849 L1792.89 684.849 L1793.45 684.849 L1794.01 684.849 L1794.57 684.849 L1795.13 684.849 L1795.69 684.849 L1796.25 684.849 L1796.8 684.849 L1797.36 684.849 L1797.92 684.849 L1798.48 684.849 L1799.04 684.849 L1799.6 684.849 L1800.16 684.849 L1800.72 684.849 L1801.28 684.849 L1801.84 684.849 L1802.4 684.849 L1802.96 684.849 L1803.52 684.849 L1804.08 684.849 L1804.63 684.849 L1805.19 684.849 L1805.75 684.849 L1806.31 684.849 L1806.87 684.849 L1807.43 684.849 L1807.99 684.849 L1808.55 684.849 L1809.11 684.849 L1809.67 684.849 L1810.23 684.849 L1810.79 684.849 L1811.35 684.849 L1811.9 684.849 L1812.46 684.849 L1813.02 684.849 L1813.58 684.849 L1814.14 684.849 L1814.7 684.849 L1815.26 684.849 L1815.82 684.849 L1816.38 684.849 L1816.94 684.849 L1817.5 684.849 L1818.06 684.849 L1818.62 684.849 L1819.18 684.849 L1819.73 684.849 L1820.29 684.849 L1820.85 684.849 L1821.41 684.849 L1821.97 684.849 L1822.53 684.849 L1823.09 684.849 L1823.65 684.849 L1824.21 684.849 L1824.77 684.849 L1825.33 684.849 L1825.89 684.849 L1826.45 684.849 L1827 684.849 L1827.56 684.849 L1828.12 684.849 L1828.68 684.849 L1829.24 684.849 L1829.8 684.849 L1830.36 684.849 L1830.92 684.849 L1831.48 684.849 L1832.04 684.849 L1832.6 684.849 L1833.16 684.849 L1833.72 684.849 L1834.27 684.849 L1834.83 684.849 L1835.39 684.849 L1835.95 684.849 L1836.51 684.849 L1837.07 684.849 L1837.63 684.849 L1838.19 684.849 L1838.19 682.28 L1837.63 682.28 L1837.07 682.28 L1836.51 682.28 L1835.95 682.28 L1835.39 682.28 L1834.83 682.28 L1834.27 682.28 L1833.72 682.28 L1833.16 682.28 L1832.6 682.28 L1832.04 682.28 L1831.48 682.28 L1830.92 682.28 L1830.36 682.28 L1829.8 682.28 L1829.24 682.28 L1828.68 682.28 L1828.12 682.28 L1827.56 682.28 L1827 682.28 L1826.45 682.28 L1825.89 682.28 L1825.33 682.28 L1824.77 682.28 L1824.21 682.28 L1823.65 682.28 L1823.09 682.28 L1822.53 682.28 L1821.97 682.28 L1821.41 682.28 L1820.85 682.28 L1820.29 682.28 L1819.73 682.28 L1819.18 682.28 L1818.62 682.28 L1818.06 682.28 L1817.5 682.28 L1816.94 682.28 L1816.38 682.28 L1815.82 682.28 L1815.26 682.28 L1814.7 682.28 L1814.14 682.28 L1813.58 682.28 L1813.02 682.28 L1812.46 682.28 L1811.9 682.28 L1811.35 682.28 L1810.79 682.28 L1810.23 682.28 L1809.67 682.28 L1809.11 682.28 L1808.55 682.28 L1807.99 682.28 L1807.43 682.28 L1806.87 682.28 L1806.31 682.28 L1805.75 682.28 L1805.19 682.28 L1804.63 682.28 L1804.08 682.28 L1803.52 682.28 L1802.96 682.28 L1802.4 682.28 L1801.84 682.28 L1801.28 682.28 L1800.72 682.28 L1800.16 682.28 L1799.6 682.28 L1799.04 682.28 L1798.48 682.28 L1797.92 682.28 L1797.36 682.28 L1796.8 682.28 L1796.25 682.28 L1795.69 682.28 L1795.13 682.28 L1794.57 682.28 L1794.01 682.28 L1793.45 682.28 L1792.89 682.28 L1792.33 682.28 L1791.77 682.28 L1791.21 682.28 L1790.65 682.28 L1790.09 682.28 L1789.53 682.28 L1788.98 682.28 L1788.42 682.28 L1787.86 682.28 L1787.3 682.28 L1786.74 682.28 L1786.18 682.28 L1785.62 682.28 L1785.06 682.28 L1784.5 682.28 L1783.94 682.28 L1783.38 682.28 L1782.82 682.28 L1782.26 682.28 L1781.71 682.28 L1781.15 682.28 L1780.59 682.28 L1780.03 682.28 L1779.47 682.28 L1778.91 682.28 L1778.35 682.28 L1777.79 682.28 L1777.23 682.28 L1776.67 682.28 L1776.11 682.28 L1775.55 682.28 L1774.99 682.28 L1774.43 682.28 L1773.88 682.28 L1773.32 682.28 L1772.76 682.28 L1772.2 682.28 L1771.64 682.28 L1771.08 682.28 L1770.52 682.28 L1769.96 682.28 L1769.4 682.28 L1768.84 682.28 L1768.28 682.28 L1767.72 682.28 L1767.16 682.28 L1766.61 682.28 L1766.05 682.28 L1765.49 682.28 L1764.93 682.28 L1764.37 682.28 L1763.81 682.28 L1763.25 682.28 L1762.69 682.28 L1762.13 682.28 L1761.57 682.28 L1761.01 682.28 L1760.45 682.28 L1759.89 682.28 L1759.34 682.28 L1758.78 682.28 L1758.22 682.28 L1757.66 682.28 L1757.1 682.28 L1756.54 682.28 L1755.98 682.28 L1755.42 682.28 L1754.86 682.28 L1754.3 682.28 L1753.74 682.28 L1753.18 682.28 L1752.62 682.28 L1752.06 682.28 L1751.51 682.28 L1750.95 682.28 L1750.39 682.28 L1749.83 682.28 L1749.27 682.28 L1748.71 682.28 L1748.15 682.28 L1747.59 682.28 L1747.03 682.28 L1746.47 682.28 L1745.91 682.28 L1745.35 682.28 L1744.79 682.28 L1744.24 682.28 L1743.68 682.28 L1743.12 682.28 L1742.56 682.28 L1742 682.28 L1741.44 682.28 L1740.88 682.28 L1740.32 682.28 L1739.76 682.28 L1739.2 682.28 L1738.64 682.28 L1738.08 682.28 L1737.52 682.28 L1736.97 682.28 L1736.41 682.28 L1735.85 682.28 L1735.29 682.28 L1734.73 682.28 L1734.17 682.28 L1733.61 682.28 L1733.05 682.28 L1732.49 682.28 L1731.93 682.28 L1731.37 682.28 L1730.81 682.28 L1730.25 682.28 L1729.69 682.28 L1729.14 682.28 L1728.58 682.28 L1728.02 682.28 L1727.46 682.28 L1726.9 682.28 L1726.34 682.28 L1725.78 682.28 L1725.22 682.28 L1724.66 682.28 L1724.1 682.28 L1723.54 682.28 L1722.98 682.28 L1722.42 682.28 L1721.87 682.28 L1721.31 682.28 L1720.75 682.28 L1720.19 682.28 L1719.63 682.28 L1719.07 682.28 L1718.51 682.28 L1717.95 682.28 L1717.39 682.28 L1716.83 682.28 L1716.27 682.28 L1715.71 682.28 L1715.15 682.28 L1714.6 682.28 L1714.04 682.28 L1713.48 682.28 L1712.92 682.28 L1712.36 682.28 L1711.8 682.28 L1711.24 682.28 L1710.68 682.28 L1710.12 682.28 L1709.56 682.28 L1709 682.28 L1708.44 682.28 L1707.88 682.28 L1707.32 682.28 L1706.77 682.28 L1706.21 682.28 L1705.65 682.28 L1705.09 682.28 L1704.53 682.28 L1703.97 682.28 L1703.41 682.28 L1702.85 682.28 L1702.29 682.28 L1701.73 682.28 L1701.17 682.28 L1700.61 682.28 L1700.05 682.28 L1699.5 682.28 L1698.94 682.28 L1698.38 682.28 L1697.82 682.28 L1697.26 682.28 L1696.7 682.28 L1696.14 682.28 L1695.58 682.28 L1695.02 682.28 L1694.46 682.28 L1693.9 682.28 L1693.34 682.28 L1692.78 682.28 L1692.23 682.28 L1691.67 682.28 L1691.11 682.28 L1690.55 682.28 L1689.99 682.28 L1689.43 682.28 L1688.87 682.28 L1688.31 682.28 L1687.75 682.28 L1687.19 682.28 L1686.63 682.28 L1686.07 682.28 L1685.51 682.28 L1684.95 682.28 L1684.4 682.28 L1683.84 682.28 L1683.28 682.28 L1682.72 682.28 L1682.16 682.28 L1681.6 682.28 L1681.04 682.28 L1680.48 682.28 L1679.92 682.28 L1679.36 682.28 L1678.8 682.28 L1678.24 682.28 L1677.68 682.28 L1677.13 682.28 L1676.57 682.28 L1676.01 682.28 L1675.45 682.28 L1674.89 682.28 L1674.33 682.28 L1673.77 682.28 L1673.21 682.28 L1672.65 682.28 L1672.09 682.28 L1671.53 682.28 L1670.97 682.28 L1670.41 682.28 L1669.85 682.28 L1669.3 682.28 L1668.74 682.28 L1668.18 682.28 L1667.62 682.28 L1667.06 682.28 L1666.5 682.28 L1665.94 682.28 L1665.38 682.28 L1664.82 682.28 L1664.26 682.28 L1663.7 682.28 L1663.14 682.28 L1662.58 682.28 L1662.03 682.28 L1661.47 682.28 L1660.91 682.28 L1660.35 682.28 L1659.79 682.28 L1659.23 682.28 L1658.67 682.28 L1658.11 682.28 L1657.55 682.28 L1656.99 682.28 L1656.43 682.28 L1655.87 682.28 L1655.31 682.28 L1654.76 682.28 L1654.2 682.28 L1653.64 682.28 L1653.08 682.28 L1652.52 682.28 L1651.96 682.28 L1651.4 682.28 L1650.84 682.28 L1650.28 682.28 L1649.72 682.28 L1649.16 682.28 L1648.6 682.28 L1648.04 682.28 L1647.48 682.28 L1646.93 682.28 L1646.37 682.28 L1645.81 682.28 L1645.25 682.28 L1644.69 682.28 L1644.13 682.28 L1643.57 682.28 L1643.01 682.28 L1642.45 682.28 L1641.89 682.28 L1641.33 682.28 L1640.77 682.28 L1640.21 682.28 L1639.66 682.28 L1639.1 682.28 L1638.54 682.28 L1637.98 682.28 L1637.42 682.28 L1636.86 682.28 L1636.3 682.28 L1635.74 682.28 L1635.18 682.28 L1634.62 682.28 L1634.06 682.28 L1633.5 682.28 L1632.94 682.28 L1632.39 682.28 L1631.83 682.28 L1631.27 682.28 L1630.71 682.28 L1630.15 682.28 L1629.59 682.28 L1629.03 682.28 L1628.47 682.28 L1627.91 682.28 L1627.35 682.28 L1626.79 682.28 L1626.23 682.28 L1625.67 682.28 L1625.11 682.28 L1624.56 682.28 L1624 682.28 L1623.44 682.28 L1622.88 682.28 L1622.32 682.28 L1621.76 682.28 L1621.2 682.28 L1620.64 682.28 L1620.08 682.28 L1619.52 682.28 L1618.96 682.28 L1618.4 682.28 L1617.84 682.28 L1617.29 682.28 L1616.73 682.28 L1616.17 682.28 L1615.61 682.28 L1615.05 682.28 L1614.49 682.28 L1613.93 682.28 L1613.37 682.28 L1612.81 682.28 L1612.25 682.28 L1611.69 682.28 L1611.13 682.28 L1610.57 682.28 L1610.02 682.28 L1609.46 682.28 L1608.9 682.28 L1608.34 682.28 L1607.78 682.28 L1607.22 682.28 L1606.66 682.28 L1606.1 682.28 L1605.54 682.28 L1604.98 682.28 L1604.42 682.28 L1603.86 682.28 L1603.3 682.28 L1602.74 682.28 L1602.19 682.28 L1601.63 682.28 L1601.07 682.28 L1600.51 682.28 L1599.95 682.28 L1599.39 682.28 L1598.83 682.28 L1598.27 682.28 L1597.71 682.28 L1597.15 682.28 L1596.59 682.28 L1596.03 682.28 L1595.47 682.28 L1594.92 682.28 L1594.36 682.28 L1593.8 682.28 L1593.24 682.28 L1592.68 682.28 L1592.12 682.28 L1591.56 682.28 L1591 682.28 L1590.44 682.28 L1589.88 682.28 L1589.32 682.28 L1588.76 682.28 L1588.2 682.28 L1587.65 682.28 L1587.09 682.28 L1586.53 682.28 L1585.97 682.28 L1585.41 682.28 L1584.85 682.28 L1584.29 682.28 L1583.73 682.28 L1583.17 682.28 L1582.61 682.28 L1582.05 682.28 L1581.49 682.28 L1580.93 682.28 L1580.37 682.28 L1579.82 682.28 L1579.26 682.28 L1578.7 682.28 L1578.14 682.28 L1577.58 682.28 L1577.02 682.28 L1576.46 682.28 L1575.9 682.28 L1575.34 682.28 L1574.78 682.28 L1574.22 682.28 L1573.66 682.28 L1573.1 682.28 L1572.55 682.28 L1571.99 682.28 L1571.43 682.28 L1570.87 682.28 L1570.31 682.28 L1569.75 682.28 L1569.19 682.28 L1568.63 682.28 L1568.07 682.28 L1567.51 682.28 L1566.95 682.28 L1566.39 682.28 L1565.83 682.28 L1565.28 682.28 L1564.72 682.28 L1564.16 682.28 L1563.6 682.28 L1563.04 682.28 L1562.48 682.28 L1561.92 682.28 L1561.36 682.28 L1560.8 682.28 L1560.24 682.28 L1559.68 682.28 L1559.12 682.28 L1558.56 682.28 L1558 682.28 L1557.45 682.28 L1556.89 682.28 L1556.33 682.28 L1555.77 682.28 L1555.21 682.28 L1554.65 682.28 L1554.09 682.28 L1553.53 682.28 L1552.97 682.28 L1552.41 682.28 L1551.85 682.28 L1551.29 682.28 L1550.73 682.28 L1550.18 682.28 L1549.62 682.28 L1549.06 682.28 L1548.5 682.28 L1547.94 682.28 L1547.38 682.28 L1546.82 682.28 L1546.26 682.28 L1545.7 682.28 L1545.14 682.28 L1544.58 682.28 L1544.02 682.28 L1543.46 682.28 L1542.9 682.28 L1542.35 682.28 L1541.79 682.28 L1541.23 682.28 L1540.67 682.28 L1540.11 682.28 L1539.55 682.28 L1538.99 682.28 L1538.43 682.28 L1537.87 682.28 L1537.31 682.28 L1536.75 682.28 L1536.19 682.28 L1535.63 682.28 L1535.08 682.28 L1534.52 682.28 L1533.96 682.28 L1533.4 682.28 L1532.84 682.28 L1532.28 682.28 L1531.72 682.28 L1531.16 682.28 L1530.6 682.28 L1530.04 682.28 L1529.48 682.28 L1528.92 682.28 L1528.36 682.28 L1527.81 682.28 L1527.25 682.28 L1526.69 682.28 L1526.13 682.28 L1525.57 682.28 L1525.01 682.28 L1524.45 682.28 L1523.89 682.28 L1523.33 682.28 L1522.77 682.28 L1522.21 682.28 L1521.65 682.28 L1521.09 682.28 L1520.53 682.28 L1519.98 682.28 L1519.42 682.28 L1518.86 682.28 L1518.3 682.28 L1517.74 682.28 L1517.18 682.28 L1516.62 682.28 L1516.06 682.28 L1515.5 682.28 L1514.94 682.28 L1514.38 682.28 L1513.82 682.28 L1513.26 682.28 L1512.71 682.28 L1512.15 682.28 L1511.59 682.28 L1511.03 682.28 L1510.47 682.28 L1509.91 682.28 L1509.35 682.28 L1508.79 682.28 L1508.23 682.28 L1507.67 682.28 L1507.11 682.28 L1506.55 682.28 L1505.99 682.28 L1505.44 682.28 L1504.88 682.28 L1504.32 682.28 L1503.76 682.28 L1503.2 682.28 L1502.64 682.28 L1502.08 682.28 L1501.52 682.28 L1500.96 682.28 L1500.4 682.28 L1499.84 682.28 L1499.28 682.28 L1498.72 682.28 L1498.16 682.28 L1497.61 682.28 L1497.05 682.28 L1496.49 682.28 L1495.93 682.28 L1495.37 682.28 L1494.81 682.28 L1494.25 682.28 L1493.69 682.28 L1493.13 682.28 L1492.57 682.28 L1492.01 682.28 L1491.45 682.28 L1490.89 682.28 L1490.34 682.28 L1489.78 682.28 L1489.22 682.28 L1488.66 682.28 L1488.1 682.28 L1487.54 682.28 L1486.98 682.28 L1486.42 682.28 L1485.86 682.28 L1485.3 682.28 L1484.74 682.28 L1484.18 682.28 L1483.62 682.28 L1483.07 682.28 L1482.51 682.28 L1481.95 682.28 L1481.39 682.28 L1480.83 682.28 L1480.27 682.28 L1479.71 682.28 L1479.15 682.28 L1478.59 682.28 L1478.03 682.28 L1477.47 682.28 L1476.91 682.28 L1476.35 682.28 L1475.79 682.28 L1475.24 682.28 L1474.68 682.28 L1474.12 682.28 L1473.56 682.28 L1473 682.28 L1472.44 682.28 L1471.88 682.28 L1471.32 682.28 L1470.76 682.28 L1470.2 682.28 L1469.64 682.28 L1469.08 682.28 L1468.52 682.28 L1467.97 682.28 L1467.41 682.28 L1466.85 682.28 L1466.29 682.28 L1465.73 682.28 L1465.17 682.28 L1464.61 682.28 L1464.05 682.28 L1463.49 682.28 L1462.93 682.28 L1462.37 682.28 L1461.81 682.28 L1461.25 682.28 L1460.7 682.28 L1460.14 682.28 L1459.58 682.28 L1459.02 682.28 L1458.46 682.28 L1457.9 682.28 L1457.34 682.28 L1456.78 682.28 L1456.22 682.28 L1455.66 682.28 L1455.1 682.28 L1454.54 682.28 L1453.98 682.28 L1453.42 682.28 L1452.87 682.28 L1452.31 682.28 L1451.75 682.28 L1451.19 682.28 L1450.63 682.28 L1450.07 682.28 L1449.51 682.28 L1448.95 682.28 L1448.39 682.28 L1447.83 682.28 L1447.27 682.28 L1446.71 682.28 L1446.15 682.28 L1445.6 682.28 L1445.04 682.28 L1444.48 682.28 L1443.92 682.28 L1443.36 682.28 L1442.8 682.28 L1442.24 682.28 L1441.68 682.28 L1441.12 682.28 L1440.56 682.28 L1440 682.28 L1439.44 682.28 L1438.88 682.28 L1438.33 682.28 L1437.77 682.28 L1437.21 682.28 L1436.65 682.28 L1436.09 682.28 L1435.53 682.28 L1434.97 682.28 L1434.41 682.28 L1433.85 682.28 L1433.29 682.28 L1432.73 682.28 L1432.17 682.28 L1431.61 682.28 L1431.05 682.28 L1430.5 682.28 L1429.94 682.28 L1429.38 682.28 L1428.82 682.28 L1428.26 682.28 L1427.7 682.28 L1427.14 682.28 L1426.58 682.28 L1426.02 682.28 L1425.46 682.28 L1424.9 682.28 L1424.34 682.28 L1423.78 682.28 L1423.23 682.28 L1422.67 682.28 L1422.11 682.28 L1421.55 682.28 L1420.99 682.28 L1420.43 682.28 L1419.87 682.28 L1419.31 682.28 L1418.75 682.28 L1418.19 682.28 L1417.63 682.28 L1417.07 682.28 L1416.51 682.28 L1415.95 682.28 L1415.4 682.28 L1414.84 682.28 L1414.28 682.28 L1413.72 682.28 L1413.16 682.28 L1412.6 682.28 L1412.04 682.28 L1411.48 682.28 L1410.92 682.28 L1410.36 682.28 L1409.8 682.28 L1409.24 682.28 L1408.68 682.28 L1408.13 682.28 L1407.57 682.28 L1407.01 682.28 L1406.45 682.28 L1405.89 682.28 L1405.33 682.28 L1404.77 682.28 L1404.21 682.28 L1403.65 682.28 L1403.09 682.28 L1402.53 682.28 L1401.97 682.28 L1401.41 682.28 L1400.86 682.28 L1400.3 682.28 L1399.74 682.28 L1399.18 682.28 L1398.62 682.28 L1398.06 682.28 L1397.5 682.28 L1396.94 682.28 L1396.38 682.28 L1395.82 682.28 L1395.26 682.28 L1394.7 682.28 L1394.14 682.28 L1393.58 682.28 L1393.03 682.28 L1392.47 682.28 L1391.91 682.28 L1391.35 682.28 L1390.79 682.28 L1390.23 682.28 L1389.67 682.28 L1389.11 682.28 L1388.55 682.28 L1387.99 682.28 L1387.43 682.28 L1386.87 682.28 L1386.31 682.28 L1385.76 682.28 L1385.2 682.28 L1384.64 682.28 L1384.08 682.28 L1383.52 682.28 L1382.96 682.28 L1382.4 682.28 L1381.84 682.28 L1381.28 682.28 L1380.72 682.28 L1380.16 682.28 L1379.6 682.28 L1379.04 682.28 L1378.49 682.28 L1377.93 682.28 L1377.37 682.28 L1376.81 682.28 L1376.25 682.28 L1375.69 682.28 L1375.13 682.28 L1374.57 682.28 L1374.01 682.28 L1373.45 682.28 L1372.89 682.28 L1372.33 682.28 L1371.77 682.28 L1371.21 682.28 L1370.66 682.28 L1370.1 682.28 L1369.54 682.28 L1368.98 682.28 L1368.42 682.28 L1367.86 682.28 L1367.3 682.28 L1366.74 682.28 L1366.18 682.28 L1365.62 682.28 L1365.06 682.28 L1364.5 682.28 L1363.94 682.28 L1363.39 682.28 L1362.83 682.28 L1362.27 682.28 L1361.71 682.28 L1361.15 682.28 L1360.59 682.28 L1360.03 682.28 L1359.47 682.28 L1358.91 682.28 L1358.35 682.28 L1357.79 682.28 L1357.23 682.28 L1356.67 682.28 L1356.12 682.28 L1355.56 682.28 L1355 682.28 L1354.44 682.28 L1353.88 682.28 L1353.32 682.28 L1352.76 682.28 L1352.2 682.28 L1351.64 682.28 L1351.08 682.28 L1350.52 682.28 L1349.96 682.28 L1349.4 682.28 L1348.84 682.28 L1348.29 682.28 L1347.73 682.28 L1347.17 682.28 L1346.61 682.28 L1346.05 682.28 L1345.49 682.28 L1344.93 682.28 L1344.37 682.28 L1343.81 682.28 L1343.25 682.28 L1342.69 682.28 L1342.13 682.28 L1341.57 682.28 L1341.02 682.28 L1340.46 682.28 L1339.9 682.28 L1339.34 682.28 L1338.78 682.28 L1338.22 682.28 L1337.66 682.28 L1337.1 682.28 L1336.54 682.28 L1335.98 682.28 L1335.42 682.28 L1334.86 682.28 L1334.3 682.28 L1333.75 682.28 L1333.19 682.28 L1332.63 682.28 L1332.07 682.28 L1331.51 682.28 L1330.95 682.28 L1330.39 682.28 L1329.83 682.28 L1329.27 682.28 L1328.71 682.28 L1328.15 682.28 L1327.59 682.28 L1327.03 682.28 L1326.47 682.28 L1325.92 682.28 L1325.36 682.28 L1324.8 682.28 L1324.24 682.28 L1323.68 682.28 L1323.12 682.28 L1322.56 682.28 L1322 682.28 L1321.44 682.28 L1320.88 682.28 L1320.32 682.28 L1319.76 682.28 L1319.2 682.28 L1318.65 682.28 L1318.09 682.28 L1317.53 682.28 L1316.97 682.28 L1316.41 682.28 L1315.85 682.28 L1315.29 682.28 L1314.73 682.28 L1314.17 682.28 L1313.61 682.28 L1313.05 682.28 L1312.49 682.28 L1311.93 682.28 L1311.38 682.28 L1310.82 682.28 L1310.26 682.28 L1309.7 682.28 L1309.14 682.28 L1308.58 682.28 L1308.02 682.28 L1307.46 682.28 L1306.9 682.28 L1306.34 682.28 L1305.78 682.28 L1305.22 682.28 L1304.66 682.28 L1304.1 682.28 L1303.55 682.28 L1302.99 682.28 L1302.43 682.28 L1301.87 682.28 L1301.31 682.28 L1300.75 682.28 L1300.19 682.28 L1299.63 682.28 L1299.07 682.28 L1298.51 682.28 L1297.95 682.28 L1297.39 682.28 L1296.83 682.28 L1296.28 682.28 L1295.72 682.28 L1295.16 682.28 L1294.6 682.28 L1294.04 682.28 L1293.48 682.28 L1292.92 682.28 L1292.36 682.28 L1291.8 682.28 L1291.24 682.28 L1290.68 682.28 L1290.12 682.28 L1289.56 682.28 L1289 682.28 L1288.45 682.28 L1287.89 682.28 L1287.33 682.28 L1286.77 682.28 L1286.21 682.28 L1285.65 682.28 L1285.09 682.28 L1284.53 682.28 L1283.97 682.28 L1283.41 682.28 L1282.85 682.28 L1282.29 682.28 L1281.73 682.28 L1281.18 682.28 L1280.62 682.28 L1280.06 682.28 L1279.5 682.28 L1278.94 682.28 L1278.38 682.28 L1277.82 682.28 L1277.26 682.28 L1276.7 682.28 L1276.14 682.28 L1275.58 682.28 L1275.02 682.28 L1274.46 682.28 L1273.91 682.28 L1273.35 682.28 L1272.79 682.28 L1272.23 682.28 L1271.67 682.28 L1271.11 682.28 L1270.55 682.28 L1269.99 682.28 L1269.43 682.28 L1268.87 682.28 L1268.31 682.28 L1267.75 682.28 L1267.19 682.28 L1266.63 682.28 L1266.08 682.28 L1265.52 682.28 L1264.96 682.28 L1264.4 682.28 L1263.84 682.28 L1263.28 682.28 L1262.72 682.28 L1262.16 682.28 L1261.6 682.28 L1261.04 682.28 L1260.48 682.28 L1259.92 682.28 L1259.36 682.28 L1258.81 682.28 L1258.25 682.28 L1257.69 682.28 L1257.13 682.28 L1256.57 682.28 L1256.01 682.28 L1255.45 682.28 L1254.89 682.28 L1254.33 682.28 L1253.77 682.28 L1253.21 682.28 L1252.65 682.28 L1252.09 682.28 L1251.54 682.28 L1250.98 682.28 L1250.42 682.28 L1249.86 682.28 L1249.3 682.28 L1248.74 682.28 L1248.18 682.28 L1247.62 682.28 L1247.06 682.28 L1246.5 682.28 L1245.94 682.28 L1245.38 682.28 L1244.82 682.28 L1244.26 682.28 L1243.71 682.28 L1243.15 682.28 L1242.59 682.28 L1242.03 682.28 L1241.47 682.28 L1240.91 682.28 L1240.35 682.28 L1239.79 682.28 L1239.23 682.28 L1238.67 682.28 L1238.11 682.28 L1237.55 682.28 L1236.99 682.28 L1236.44 682.28 L1235.88 682.28 L1235.32 682.28 L1234.76 682.28 L1234.2 682.28 L1233.64 682.28 L1233.08 682.28 L1232.52 682.28 L1231.96 682.28 L1231.4 682.28 L1230.84 682.28 L1230.28 682.28 L1229.72 682.28 L1229.17 682.28 L1228.61 682.28 L1228.05 682.28 L1227.49 682.28 L1226.93 682.28 L1226.37 682.28 L1225.81 682.28 L1225.25 682.28 L1224.69 682.28 L1224.13 682.28 L1223.57 682.28 L1223.01 682.28 L1222.45 682.28 L1221.89 682.28 L1221.34 682.28 L1220.78 682.28 L1220.22 682.28 L1219.66 682.28 L1219.1 682.28 L1218.54 682.28 L1217.98 682.28 L1217.42 682.28 L1216.86 682.28 L1216.3 682.28 L1215.74 682.28 L1215.18 682.28 L1214.62 682.28 L1214.07 682.28 L1213.51 682.28 L1212.95 682.28 L1212.39 682.28 L1211.83 682.28 L1211.27 682.28 L1210.71 682.28 L1210.15 682.28 L1209.59 682.28 L1209.03 682.28 L1208.47 682.28 L1207.91 682.28 L1207.35 682.28 L1206.8 682.28 L1206.24 682.28 L1205.68 682.28 L1205.12 682.28 L1204.56 682.28 L1204 682.28 L1203.44 682.28 L1202.88 682.28 L1202.32 682.28 L1201.76 682.28 L1201.2 682.28 L1200.64 682.28 L1200.08 682.28 L1199.52 682.28 L1198.97 682.28 L1198.41 682.28 L1197.85 682.28 L1197.29 682.28 L1196.73 682.28 L1196.17 682.28 L1195.61 682.28 L1195.05 682.28 L1194.49 682.28 L1193.93 682.28 L1193.37 682.28 L1192.81 682.28 L1192.25 682.28 L1191.7 682.28 L1191.14 682.28 L1190.58 682.28 L1190.02 682.28 L1189.46 682.28 L1188.9 682.28 L1188.34 682.28 L1187.78 682.28 L1187.22 682.28 L1186.66 682.28 L1186.1 682.28 L1185.54 682.28 L1184.98 682.28 L1184.43 682.28 L1183.87 682.28 L1183.31 682.28 L1182.75 682.28 L1182.19 682.28 L1181.63 682.28 L1181.07 682.28 L1180.51 682.28 L1179.95 682.28 L1179.39 682.28 L1178.83 682.28 L1178.27 682.28 L1177.71 682.28 L1177.15 682.28 L1176.6 682.28 L1176.04 682.28 L1175.48 682.28 L1174.92 682.28 L1174.36 682.28 L1173.8 682.28 L1173.24 682.28 L1172.68 682.28 L1172.12 682.28 L1171.56 682.28 L1171 682.28 L1170.44 682.28 L1169.88 682.28 L1169.33 682.28 L1168.77 682.28 L1168.21 682.28 L1167.65 682.28 L1167.09 682.28 L1166.53 682.28 L1165.97 682.28 L1165.41 682.28 L1164.85 682.28 L1164.29 682.28 L1163.73 682.28 L1163.17 682.28 L1162.61 682.28 L1162.05 682.28 L1161.5 682.28 L1160.94 682.28 L1160.38 682.28 L1159.82 682.28 L1159.26 682.28 L1158.7 682.28 L1158.14 682.28 L1157.58 682.28 L1157.02 682.28 L1156.46 682.28 L1155.9 682.28 L1155.34 682.28 L1154.78 682.28 L1154.23 682.28 L1153.67 682.28 L1153.11 682.28 L1152.55 682.28 L1151.99 682.28 L1151.43 682.28 L1150.87 682.28 L1150.31 682.28 L1149.75 682.28 L1149.19 682.28 L1148.63 682.28 L1148.07 682.28 L1147.51 682.28 L1146.96 682.28 L1146.4 682.28 L1145.84 682.28 L1145.28 682.28 L1144.72 682.28 L1144.16 682.28 L1143.6 682.28 L1143.04 682.28 L1142.48 682.28 L1141.92 682.28 L1141.36 682.28 L1140.8 682.28 L1140.24 682.28 L1139.68 682.28 L1139.13 682.28 L1138.57 682.28 L1138.01 682.28 L1137.45 682.28 L1136.89 682.28 L1136.33 682.28 L1135.77 682.28 L1135.21 682.28 L1134.65 682.28 L1134.09 682.28 L1133.53 682.28 L1132.97 682.28 L1132.41 682.28 L1131.86 682.28 L1131.3 682.28 L1130.74 682.28 L1130.18 682.28 L1129.62 682.28 L1129.06 682.28 L1128.5 682.28 L1127.94 682.28 L1127.38 682.28 L1126.82 682.28 L1126.26 682.28 L1125.7 682.28 L1125.14 682.28 L1124.59 682.28 L1124.03 682.28 L1123.47 682.28 L1122.91 682.28 L1122.35 682.28 L1121.79 682.28 L1121.23 682.28 L1120.67 682.28 L1120.11 682.28 L1119.55 682.28 L1118.99 682.28 L1118.43 682.28 L1117.87 682.28 L1117.31 682.28 L1116.76 682.28 L1116.2 682.28 L1115.64 682.28 L1115.08 682.28 L1114.52 682.28 L1113.96 682.28 L1113.4 682.28 L1112.84 682.28 L1112.28 682.28 L1111.72 682.28 L1111.16 682.28 L1110.6 682.28 L1110.04 682.28 L1109.49 682.28 L1108.93 682.28 L1108.37 682.28 L1107.81 682.28 L1107.25 682.28 L1106.69 682.28 L1106.13 682.28 L1105.57 682.28 L1105.01 682.28 L1104.45 682.28 L1103.89 682.28 L1103.33 682.28 L1102.77 682.28 L1102.22 682.28 L1101.66 682.28 L1101.1 682.28 L1100.54 682.28 L1099.98 682.28 L1099.42 682.28 L1098.86 682.28 L1098.3 682.28 L1097.74 682.28 L1097.18 682.28 L1096.62 682.28 L1096.06 682.28 L1095.5 682.28 L1094.94 682.28 L1094.39 682.28 L1093.83 682.28 L1093.27 682.28 L1092.71 682.28 L1092.15 682.28 L1091.59 682.28 L1091.03 682.28 L1090.47 682.28 L1089.91 682.28 L1089.35 682.28 L1088.79 682.28 L1088.23 682.28 L1087.67 682.28 L1087.12 682.28 L1086.56 682.28 L1086 682.28 L1085.44 682.28 L1084.88 682.28 L1084.32 682.28 L1083.76 682.28 L1083.2 682.28 L1082.64 682.28 L1082.08 682.28 L1081.52 682.28 L1080.96 682.28 L1080.4 682.28 L1079.85 682.28 L1079.29 682.28 L1078.73 682.28 L1078.17 682.28 L1077.61 682.28 L1077.05 682.28 L1076.49 682.28 L1075.93 682.28 L1075.37 682.28 L1074.81 682.28 L1074.25 682.28 L1073.69 682.28 L1073.13 682.28 L1072.57 682.28 L1072.02 682.28 L1071.46 682.28 L1070.9 682.28 L1070.34 682.28 L1069.78 682.28 L1069.22 682.28 L1068.66 682.28 L1068.1 682.28 L1067.54 682.28 L1066.98 682.28 L1066.42 682.28 L1065.86 682.28 L1065.3 682.28 L1064.75 682.28 L1064.19 682.28 L1063.63 682.28 L1063.07 682.28 L1062.51 682.28 L1061.95 682.28 L1061.39 682.28 L1060.83 682.28 L1060.27 682.28 L1059.71 682.28 L1059.15 682.28 L1058.59 682.28 L1058.03 682.28 L1057.48 682.28 L1056.92 682.28 L1056.36 682.28 L1055.8 682.28 L1055.24 682.28 L1054.68 682.28 L1054.12 682.28 L1053.56 682.28 L1053 682.28 L1052.44 682.28 L1051.88 682.28 L1051.32 682.28 L1050.76 682.28 L1050.2 682.28 L1049.65 682.28 L1049.09 682.28 L1048.53 682.28 L1047.97 682.28 L1047.41 682.28 L1046.85 682.28 L1046.29 682.28 L1045.73 682.28 L1045.17 682.28 L1044.61 682.28 L1044.05 682.28 L1043.49 682.28 L1042.93 682.28 L1042.38 682.28 L1041.82 682.28 L1041.26 682.28 L1040.7 682.28 L1040.14 682.28 L1039.58 682.28 L1039.02 682.28 L1038.46 682.28 L1037.9 682.28 L1037.34 682.28 L1036.78 682.28 L1036.22 682.28 L1035.66 682.28 L1035.1 682.28 L1034.55 682.28 L1033.99 682.28 L1033.43 682.28 L1032.87 682.28 L1032.31 682.28 L1031.75 682.28 L1031.19 682.28 L1030.63 682.28 L1030.07 682.28 L1029.51 682.28 L1028.95 682.28 L1028.39 682.28 L1027.83 682.28 L1027.28 682.28 L1026.72 682.28 L1026.16 682.28 L1025.6 682.28 L1025.04 682.28 L1024.48 682.28 L1023.92 682.28 L1023.36 682.28 L1022.8 682.28 L1022.24 682.28 L1021.68 682.28 L1021.12 682.28 L1020.56 682.28 L1020.01 682.28 L1019.45 682.28 L1018.89 682.28 L1018.33 682.28 L1017.77 682.28 L1017.21 682.28 L1016.65 682.28 L1016.09 682.28 L1015.53 682.28 L1014.97 682.28 L1014.41 682.28 L1013.85 682.28 L1013.29 682.28 L1012.73 682.28 L1012.18 682.28 L1011.62 682.28 L1011.06 682.28 L1010.5 682.28 L1009.94 682.28 L1009.38 682.28 L1008.82 682.28 L1008.26 682.28 L1007.7 682.28 L1007.14 682.28 L1006.58 682.28 L1006.02 682.28 L1005.46 682.28 L1004.91 682.28 L1004.35 682.28 L1003.79 682.28 L1003.23 682.28 L1002.67 682.28 L1002.11 682.28 L1001.55 682.28 L1000.99 682.28 L1000.43 682.28 L999.872 682.28 L999.313 682.28 L998.754 682.28 L998.194 682.28 L997.635 682.28 L997.076 682.28 L996.517 682.28 L995.957 682.28 L995.398 682.28 L994.839 682.28 L994.28 682.28 L993.72 682.28 L993.161 682.28 L992.602 682.28 L992.043 682.28 L991.483 682.28 L990.924 682.28 L990.365 682.28 L989.806 682.28 L989.246 682.28 L988.687 682.28 L988.128 682.28 L987.569 682.28 L987.009 682.28 L986.45 682.28 L985.891 682.28 L985.332 682.28 L984.772 682.28 L984.213 682.28 L983.654 682.28 L983.095 682.28 L982.535 682.28 L981.976 682.28 L981.417 682.28 L980.858 682.28 L980.298 682.28 L979.739 682.28 L979.18 682.28 L978.621 682.28 L978.061 682.28 L977.502 682.28 L976.943 682.28 L976.384 682.28 L975.824 682.28 L975.265 682.28 L974.706 682.28 L974.147 682.28 L973.587 682.28 L973.028 682.28 L972.469 682.28 L971.91 682.28 L971.35 682.28 L970.791 682.28 L970.232 682.28 L969.673 682.28 L969.113 682.28 L968.554 682.28 L967.995 682.28 L967.436 682.28 L966.876 682.28 L966.317 682.28 L965.758 682.28 L965.199 682.28 L964.639 682.28 L964.08 682.28 L963.521 682.28 L962.962 682.28 L962.402 682.28 L961.843 682.28 L961.284 682.28 L960.725 682.28 L960.165 682.28 L959.606 682.28 L959.047 682.28 L958.488 682.28 L957.928 682.28 L957.369 682.28 L956.81 682.28 L956.251 682.28 L955.691 682.28 L955.132 682.28 L954.573 682.28 L954.014 682.28 L953.454 682.28 L952.895 682.28 L952.336 682.28 L951.777 682.28 L951.217 682.28 L950.658 682.28 L950.099 682.28 L949.54 682.28 L948.98 682.28 L948.421 682.28 L947.862 682.28 L947.303 682.28 L946.743 682.28 L946.184 682.28 L945.625 682.28 L945.066 682.28 L944.506 682.28 L943.947 682.28 L943.388 682.28 L942.829 682.28 L942.269 682.28 L941.71 682.28 L941.151 682.28 L940.592 682.28 L940.032 682.28 L939.473 682.28 L938.914 682.28 L938.355 682.28 L937.795 682.28 L937.236 682.28 L936.677 682.28 L936.118 682.28 L935.558 682.28 L934.999 682.28 L934.44 682.28 L933.881 682.28 L933.321 682.28 L932.762 682.28 L932.203 682.28 L931.644 682.28 L931.084 682.28 L930.525 682.28 L929.966 682.28 L929.406 682.28 L928.847 682.28 L928.288 682.28 L927.729 682.28 L927.169 682.28 L926.61 682.28 L926.051 682.28 L925.492 682.28 L924.932 682.28 L924.373 682.28 L923.814 682.28 L923.255 682.28 L922.695 682.28 L922.136 682.28 L921.577 682.28 L921.018 682.28 L920.458 682.28 L919.899 682.28 L919.34 682.28 L918.781 682.28 L918.221 682.28 L917.662 682.28 L917.103 682.28 L916.544 682.28 L915.984 682.28 L915.425 682.28 L914.866 682.28 L914.307 682.28 L913.747 682.28 L913.188 682.28 L912.629 682.28 L912.07 682.28 L911.51 682.28 L910.951 682.28 L910.392 682.28 L909.833 682.28 L909.273 682.28 L908.714 682.28 L908.155 682.28 L907.596 682.28 L907.036 682.28 L906.477 682.28 L905.918 682.28 L905.359 682.28 L904.799 682.28 L904.24 682.28 L903.681 682.28 L903.122 682.28 L902.562 682.28 L902.003 682.28 L901.444 682.28 L900.885 682.28 L900.325 682.28 L899.766 682.28 L899.207 682.28 L898.648 682.28 L898.088 682.28 L897.529 682.28 L896.97 682.28 L896.411 682.28 L895.851 682.28 L895.292 682.28 L894.733 682.28 L894.174 682.28 L893.614 682.28 L893.055 682.28 L892.496 682.28 L891.937 682.28 L891.377 682.28 L890.818 682.28 L890.259 682.28 L889.7 682.28 L889.14 682.28 L888.581 682.28 L888.022 682.28 L887.463 682.28 L886.903 682.28 L886.344 682.28 L885.785 682.28 L885.226 682.28 L884.666 682.28 L884.107 682.28 L883.548 682.28 L882.989 682.28 L882.429 682.28 L881.87 682.28 L881.311 682.28 L880.752 682.28 L880.192 682.28 L879.633 682.28 L879.074 682.28 L878.515 682.28 L877.955 682.28 L877.396 682.28 L876.837 682.28 L876.278 682.28 L875.718 682.28 L875.159 682.28 L874.6 682.28 L874.041 682.28 L873.481 682.28 L872.922 682.28 L872.363 682.28 L871.804 682.28 L871.244 682.28 L870.685 682.28 L870.126 682.28 L869.567 682.28 L869.007 682.28 L868.448 682.28 L867.889 682.28 L867.33 682.28 L866.77 682.28 L866.211 682.28 L865.652 682.28 L865.093 682.28 L864.533 682.28 L863.974 682.28 L863.415 682.28 L862.856 682.28 L862.296 682.28 L861.737 682.28 L861.178 682.28 L860.619 682.28 L860.059 682.28 L859.5 682.28 L858.941 682.28 L858.382 682.28 L857.822 682.28 L857.263 682.28 L856.704 682.28 L856.145 682.28 L855.585 682.28 L855.026 682.28 L854.467 682.28 L853.908 682.28 L853.348 682.28 L852.789 682.28 L852.23 682.28 L851.671 682.28 L851.111 682.28 L850.552 682.28 L849.993 682.28 L849.434 682.28 L848.874 682.28 L848.315 682.28 L847.756 682.28 L847.197 682.28 L846.637 682.28 L846.078 682.28 L845.519 682.28 L844.96 682.28 L844.4 682.28 L843.841 682.28 L843.282 682.28 L842.723 682.28 L842.163 682.28 L841.604 682.28 L841.045 682.28 L840.486 682.28 L839.926 682.28 L839.367 682.28 L838.808 682.28 L838.249 682.28 L837.689 682.28 L837.13 682.28 L836.571 682.28 L836.012 682.28 L835.452 682.28 L834.893 682.28 L834.334 682.28 L833.775 682.28 L833.215 682.28 L832.656 682.28 L832.097 682.28 L831.538 682.28 L830.978 682.28 L830.419 682.28 L829.86 682.28 L829.301 682.28 L828.741 682.28 L828.182 682.28 L827.623 682.28 L827.064 682.28 L826.504 682.28 L825.945 682.28 L825.386 682.28 L824.827 682.28 L824.267 682.28 L823.708 682.28 L823.149 682.28 L822.59 682.28 L822.03 682.28 L821.471 682.28 L820.912 682.28 L820.353 682.28 L819.793 682.28 L819.234 682.28 L818.675 682.28 L818.116 682.28 L817.556 682.28 L816.997 682.28 L816.438 682.28 L815.879 682.28 L815.319 682.28 L814.76 682.28 L814.201 682.28 L813.642 682.28 L813.082 682.28 L812.523 682.28 L811.964 682.28 L811.405 682.28 L810.845 682.28 L810.286 682.28 L809.727 682.28 L809.168 682.28 L808.608 682.28 L808.049 682.28 L807.49 682.28 L806.931 682.28 L806.371 682.28 L805.812 682.28 L805.253 682.28 L804.693 682.28 L804.134 682.28 L803.575 682.28 L803.016 682.28 L802.456 682.28 L801.897 682.28 L801.338 682.28 L800.779 682.28 L800.219 682.28 L799.66 682.28 L799.101 682.28 L798.542 682.28 L797.982 682.28 L797.423 682.28 L796.864 682.28 L796.305 682.28 L795.745 682.28 L795.186 682.28 L794.627 682.28 L794.068 682.28 L793.508 682.28 L792.949 682.28 L792.39 682.28 L791.831 682.28 L791.271 682.28 L790.712 682.28 L790.153 682.28 L789.594 682.28 L789.034 682.28 L788.475 682.28 L787.916 682.28 L787.357 682.28 L786.797 682.28 L786.238 682.28 L785.679 682.28 L785.12 682.28 L784.56 682.28 L784.001 682.28 L783.442 682.28 L782.883 682.28 L782.323 682.28 L781.764 682.28 L781.205 682.28 L780.646 682.28 L780.086 682.28 L779.527 682.28 L778.968 682.28 L778.409 682.28 L777.849 682.28 L777.29 682.28 L776.731 682.28 L776.172 682.28 L775.612 682.28 L775.053 682.28 L774.494 682.28 L773.935 682.28 L773.375 682.28 L772.816 682.28 L772.257 682.28 L771.698 682.28 L771.138 682.28 L770.579 682.28 L770.02 682.28 L769.461 682.28 L768.901 682.28 L768.342 682.28 L767.783 682.28 L767.224 682.28 L766.664 682.28 L766.105 682.28 L765.546 682.28 L764.987 682.28 L764.427 682.28 L763.868 682.28 L763.309 682.28 L762.75 682.28 L762.19 682.28 L761.631 682.28 L761.072 682.28 L760.513 682.28 L759.953 682.28 L759.394 682.28 L758.835 682.28 L758.276 682.28 L757.716 682.28 L757.157 682.28 L756.598 682.28 L756.039 682.28 L755.479 682.28 L754.92 682.28 L754.361 682.28 L753.802 682.28 L753.242 682.28 L752.683 682.28 L752.124 682.28 L751.565 682.28 L751.005 682.28 L750.446 682.28 L749.887 682.28 L749.328 682.28 L748.768 682.28 L748.209 682.28 L747.65 682.28 L747.091 682.28 L746.531 682.28 L745.972 682.28 L745.413 682.28 L744.854 682.28 L744.294 682.28 L743.735 682.28 L743.176 682.28 L742.617 682.28 L742.057 682.28 L741.498 682.28 L740.939 682.28 L740.38 682.28 L739.82 682.28 L739.261 682.28 L738.702 682.28 L738.143 682.28 L737.583 682.28 L737.024 682.28 L736.465 682.28 L735.906 682.28 L735.346 682.28 L734.787 682.28 L734.228 682.28 L733.669 682.28 L733.109 682.28 L732.55 682.28 L731.991 682.28 L731.432 682.28 L730.872 682.28 L730.313 682.28 L729.754 682.28 L729.195 682.28 L728.635 682.28 L728.076 682.28 L727.517 682.28 L726.958 682.28 L726.398 682.28 L725.839 682.28 L725.28 682.28 L724.721 682.28 L724.161 682.28 L723.602 682.28 L723.043 682.28 L722.484 682.28 L721.924 682.28 L721.365 682.28 L720.806 682.28 L720.247 682.28  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip233)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,683.52 720.806,683.52 721.365,683.52 721.924,683.52 722.484,683.52 723.043,683.52 723.602,683.52 724.161,683.52 724.721,683.52 725.28,683.52 725.839,683.52 726.398,683.52 726.958,683.52 727.517,683.52 728.076,683.52 728.635,683.52 729.195,683.52 729.754,683.52 730.313,683.52 730.872,683.52 731.432,683.52 731.991,683.52 732.55,683.52 733.109,683.52 733.669,683.52 734.228,683.52 734.787,683.52 735.346,683.52 735.906,683.52 736.465,683.52 737.024,683.52 737.583,683.52 738.143,683.52 738.702,683.52 739.261,683.52 739.82,683.52 740.38,683.52 740.939,683.52 741.498,683.52 742.057,683.52 742.617,683.52 743.176,683.52 743.735,683.52 744.294,683.52 744.854,683.52 745.413,683.52 745.972,683.52 746.531,683.52 747.091,683.52 747.65,683.52 748.209,683.52 748.768,683.52 749.328,683.52 749.887,683.52 750.446,683.52 751.005,683.52 751.565,683.52 752.124,683.52 752.683,683.52 753.242,683.52 753.802,683.52 754.361,683.52 754.92,683.52 755.479,683.52 756.039,683.52 756.598,683.52 757.157,683.52 757.716,683.52 758.276,683.52 758.835,683.52 759.394,683.52 759.953,683.52 760.513,683.52 761.072,683.52 761.631,683.52 762.19,683.52 762.75,683.52 763.309,683.52 763.868,683.52 764.427,683.52 764.987,683.52 765.546,683.52 766.105,683.52 766.664,683.52 767.224,683.52 767.783,683.52 768.342,683.52 768.901,683.52 769.461,683.52 770.02,683.52 770.579,683.52 771.138,683.52 771.698,683.52 772.257,683.52 772.816,683.52 773.375,683.52 773.935,683.52 774.494,683.52 775.053,683.52 775.612,683.52 776.172,683.52 776.731,683.52 777.29,683.52 777.849,683.52 778.409,683.52 778.968,683.52 779.527,683.52 780.086,683.52 780.646,683.52 781.205,683.52 781.764,683.52 782.323,683.52 782.883,683.52 783.442,683.52 784.001,683.52 784.56,683.52 785.12,683.52 785.679,683.52 786.238,683.52 786.797,683.52 787.357,683.52 787.916,683.52 788.475,683.52 789.034,683.52 789.594,683.52 790.153,683.52 790.712,683.52 791.271,683.52 791.831,683.52 792.39,683.52 792.949,683.52 793.508,683.52 794.068,683.52 794.627,683.52 795.186,683.52 795.745,683.52 796.305,683.52 796.864,683.52 797.423,683.52 797.982,683.52 798.542,683.52 799.101,683.52 799.66,683.52 800.219,683.52 800.779,683.52 801.338,683.52 801.897,683.52 802.456,683.52 803.016,683.52 803.575,683.52 804.134,683.52 804.693,683.52 805.253,683.52 805.812,683.52 806.371,683.52 806.931,683.52 807.49,683.52 808.049,683.52 808.608,683.52 809.168,683.52 809.727,683.52 810.286,683.52 810.845,683.52 811.405,683.52 811.964,683.52 812.523,683.52 813.082,683.52 813.642,683.52 814.201,683.52 814.76,683.52 815.319,683.52 815.879,683.52 816.438,683.52 816.997,683.52 817.556,683.52 818.116,683.52 818.675,683.52 819.234,683.52 819.793,683.52 820.353,683.52 820.912,683.52 821.471,683.52 822.03,683.52 822.59,683.52 823.149,683.52 823.708,683.52 824.267,683.52 824.827,683.52 825.386,683.52 825.945,683.52 826.504,683.52 827.064,683.52 827.623,683.52 828.182,683.52 828.741,683.52 829.301,683.52 829.86,683.52 830.419,683.52 830.978,683.52 831.538,683.52 832.097,683.52 832.656,683.52 833.215,683.52 833.775,683.52 834.334,683.52 834.893,683.52 835.452,683.52 836.012,683.52 836.571,683.52 837.13,683.52 837.689,683.52 838.249,683.52 838.808,683.52 839.367,683.52 839.926,683.52 840.486,683.52 841.045,683.52 841.604,683.52 842.163,683.52 842.723,683.52 843.282,683.52 843.841,683.52 844.4,683.52 844.96,683.52 845.519,683.52 846.078,683.52 846.637,683.52 847.197,683.52 847.756,683.52 848.315,683.52 848.874,683.52 849.434,683.52 849.993,683.52 850.552,683.52 851.111,683.52 851.671,683.52 852.23,683.52 852.789,683.52 853.348,683.52 853.908,683.52 854.467,683.52 855.026,683.52 855.585,683.52 856.145,683.52 856.704,683.52 857.263,683.52 857.822,683.52 858.382,683.52 858.941,683.52 859.5,683.52 860.059,683.52 860.619,683.52 861.178,683.52 861.737,683.52 862.296,683.52 862.856,683.52 863.415,683.52 863.974,683.52 864.533,683.52 865.093,683.52 865.652,683.52 866.211,683.52 866.77,683.52 867.33,683.52 867.889,683.52 868.448,683.52 869.007,683.52 869.567,683.52 870.126,683.52 870.685,683.52 871.244,683.52 871.804,683.52 872.363,683.52 872.922,683.52 873.481,683.52 874.041,683.52 874.6,683.52 875.159,683.52 875.718,683.52 876.278,683.52 876.837,683.52 877.396,683.52 877.955,683.52 878.515,683.52 879.074,683.52 879.633,683.52 880.192,683.52 880.752,683.52 881.311,683.52 881.87,683.52 882.429,683.52 882.989,683.52 883.548,683.52 884.107,683.52 884.666,683.52 885.226,683.52 885.785,683.52 886.344,683.52 886.903,683.52 887.463,683.52 888.022,683.52 888.581,683.52 889.14,683.52 889.7,683.52 890.259,683.52 890.818,683.52 891.377,683.52 891.937,683.52 892.496,683.52 893.055,683.52 893.614,683.52 894.174,683.52 894.733,683.52 895.292,683.52 895.851,683.52 896.411,683.52 896.97,683.52 897.529,683.52 898.088,683.52 898.648,683.52 899.207,683.52 899.766,683.52 900.325,683.52 900.885,683.52 901.444,683.52 902.003,683.52 902.562,683.52 903.122,683.52 903.681,683.52 904.24,683.52 904.799,683.52 905.359,683.52 905.918,683.52 906.477,683.52 907.036,683.52 907.596,683.52 908.155,683.52 908.714,683.52 909.273,683.52 909.833,683.52 910.392,683.52 910.951,683.52 911.51,683.52 912.07,683.52 912.629,683.52 913.188,683.52 913.747,683.52 914.307,683.52 914.866,683.52 915.425,683.52 915.984,683.52 916.544,683.52 917.103,683.52 917.662,683.52 918.221,683.52 918.781,683.52 919.34,683.52 919.899,683.52 920.458,683.52 921.018,683.52 921.577,683.52 922.136,683.52 922.695,683.52 923.255,683.52 923.814,683.52 924.373,683.52 924.932,683.52 925.492,683.52 926.051,683.52 926.61,683.52 927.169,683.52 927.729,683.52 928.288,683.52 928.847,683.52 929.406,683.52 929.966,683.52 930.525,683.52 931.084,683.52 931.644,683.52 932.203,683.52 932.762,683.52 933.321,683.52 933.881,683.52 934.44,683.52 934.999,683.52 935.558,683.52 936.118,683.52 936.677,683.52 937.236,683.52 937.795,683.52 938.355,683.52 938.914,683.52 939.473,683.52 940.032,683.52 940.592,683.52 941.151,683.52 941.71,683.52 942.269,683.52 942.829,683.52 943.388,683.52 943.947,683.52 944.506,683.52 945.066,683.52 945.625,683.52 946.184,683.52 946.743,683.52 947.303,683.52 947.862,683.52 948.421,683.52 948.98,683.52 949.54,683.52 950.099,683.52 950.658,683.52 951.217,683.52 951.777,683.52 952.336,683.52 952.895,683.52 953.454,683.52 954.014,683.52 954.573,683.52 955.132,683.52 955.691,683.52 956.251,683.52 956.81,683.52 957.369,683.52 957.928,683.52 958.488,683.52 959.047,683.52 959.606,683.52 960.165,683.52 960.725,683.52 961.284,683.52 961.843,683.52 962.402,683.52 962.962,683.52 963.521,683.52 964.08,683.52 964.639,683.52 965.199,683.52 965.758,683.52 966.317,683.52 966.876,683.52 967.436,683.52 967.995,683.52 968.554,683.52 969.113,683.52 969.673,683.52 970.232,683.52 970.791,683.52 971.35,683.52 971.91,683.52 972.469,683.52 973.028,683.52 973.587,683.52 974.147,683.52 974.706,683.52 975.265,683.52 975.824,683.52 976.384,683.52 976.943,683.52 977.502,683.52 978.061,683.52 978.621,683.52 979.18,683.52 979.739,683.52 980.298,683.52 980.858,683.52 981.417,683.52 981.976,683.52 982.535,683.52 983.095,683.52 983.654,683.52 984.213,683.52 984.772,683.52 985.332,683.52 985.891,683.52 986.45,683.52 987.009,683.52 987.569,683.52 988.128,683.52 988.687,683.52 989.246,683.52 989.806,683.52 990.365,683.52 990.924,683.52 991.483,683.52 992.043,683.52 992.602,683.52 993.161,683.52 993.72,683.52 994.28,683.52 994.839,683.52 995.398,683.52 995.957,683.52 996.517,683.52 997.076,683.52 997.635,683.52 998.194,683.52 998.754,683.52 999.313,683.52 999.872,683.52 1000.43,683.52 1000.99,683.52 1001.55,683.52 1002.11,683.52 1002.67,683.52 1003.23,683.52 1003.79,683.52 1004.35,683.52 1004.91,683.52 1005.46,683.52 1006.02,683.52 1006.58,683.52 1007.14,683.52 1007.7,683.52 1008.26,683.52 1008.82,683.52 1009.38,683.52 1009.94,683.52 1010.5,683.52 1011.06,683.52 1011.62,683.52 1012.18,683.52 1012.73,683.52 1013.29,683.52 1013.85,683.52 1014.41,683.52 1014.97,683.52 1015.53,683.52 1016.09,683.52 1016.65,683.52 1017.21,683.52 1017.77,683.52 1018.33,683.52 1018.89,683.52 1019.45,683.52 1020.01,683.52 1020.56,683.52 1021.12,683.52 1021.68,683.52 1022.24,683.52 1022.8,683.52 1023.36,683.52 1023.92,683.52 1024.48,683.52 1025.04,683.52 1025.6,683.52 1026.16,683.52 1026.72,683.52 1027.28,683.52 1027.83,683.52 1028.39,683.52 1028.95,683.52 1029.51,683.52 1030.07,683.52 1030.63,683.52 1031.19,683.52 1031.75,683.52 1032.31,683.52 1032.87,683.52 1033.43,683.52 1033.99,683.52 1034.55,683.52 1035.1,683.52 1035.66,683.52 1036.22,683.52 1036.78,683.52 1037.34,683.52 1037.9,683.52 1038.46,683.52 1039.02,683.52 1039.58,683.52 1040.14,683.52 1040.7,683.52 1041.26,683.52 1041.82,683.52 1042.38,683.52 1042.93,683.52 1043.49,683.52 1044.05,683.52 1044.61,683.52 1045.17,683.52 1045.73,683.52 1046.29,683.52 1046.85,683.52 1047.41,683.52 1047.97,683.52 1048.53,683.52 1049.09,683.52 1049.65,683.52 1050.2,683.52 1050.76,683.52 1051.32,683.52 1051.88,683.52 1052.44,683.52 1053,683.52 1053.56,683.52 1054.12,683.52 1054.68,683.52 1055.24,683.52 1055.8,683.52 1056.36,683.52 1056.92,683.52 1057.48,683.52 1058.03,683.52 1058.59,683.52 1059.15,683.52 1059.71,683.52 1060.27,683.52 1060.83,683.52 1061.39,683.52 1061.95,683.52 1062.51,683.52 1063.07,683.52 1063.63,683.52 1064.19,683.52 1064.75,683.52 1065.3,683.52 1065.86,683.52 1066.42,683.52 1066.98,683.52 1067.54,683.52 1068.1,683.52 1068.66,683.52 1069.22,683.52 1069.78,683.52 1070.34,683.52 1070.9,683.52 1071.46,683.52 1072.02,683.52 1072.57,683.52 1073.13,683.52 1073.69,683.52 1074.25,683.52 1074.81,683.52 1075.37,683.52 1075.93,683.52 1076.49,683.52 1077.05,683.52 1077.61,683.52 1078.17,683.52 1078.73,683.52 1079.29,683.52 1079.85,683.52 1080.4,683.52 1080.96,683.52 1081.52,683.52 1082.08,683.52 1082.64,683.52 1083.2,683.52 1083.76,683.52 1084.32,683.52 1084.88,683.52 1085.44,683.52 1086,683.52 1086.56,683.52 1087.12,683.52 1087.67,683.52 1088.23,683.52 1088.79,683.52 1089.35,683.52 1089.91,683.52 1090.47,683.52 1091.03,683.52 1091.59,683.52 1092.15,683.52 1092.71,683.52 1093.27,683.52 1093.83,683.52 1094.39,683.52 1094.94,683.52 1095.5,683.52 1096.06,683.52 1096.62,683.52 1097.18,683.52 1097.74,683.52 1098.3,683.52 1098.86,683.52 1099.42,683.52 1099.98,683.52 1100.54,683.52 1101.1,683.52 1101.66,683.52 1102.22,683.52 1102.77,683.52 1103.33,683.52 1103.89,683.52 1104.45,683.52 1105.01,683.52 1105.57,683.52 1106.13,683.52 1106.69,683.52 1107.25,683.52 1107.81,683.52 1108.37,683.52 1108.93,683.52 1109.49,683.52 1110.04,683.52 1110.6,683.52 1111.16,683.52 1111.72,683.52 1112.28,683.52 1112.84,683.52 1113.4,683.52 1113.96,683.52 1114.52,683.52 1115.08,683.52 1115.64,683.52 1116.2,683.52 1116.76,683.52 1117.31,683.52 1117.87,683.52 1118.43,683.52 1118.99,683.52 1119.55,683.52 1120.11,683.52 1120.67,683.52 1121.23,683.52 1121.79,683.52 1122.35,683.52 1122.91,683.52 1123.47,683.52 1124.03,683.52 1124.59,683.52 1125.14,683.52 1125.7,683.52 1126.26,683.52 1126.82,683.52 1127.38,683.52 1127.94,683.52 1128.5,683.52 1129.06,683.52 1129.62,683.52 1130.18,683.52 1130.74,683.52 1131.3,683.52 1131.86,683.52 1132.41,683.52 1132.97,683.52 1133.53,683.52 1134.09,683.52 1134.65,683.52 1135.21,683.52 1135.77,683.52 1136.33,683.52 1136.89,683.52 1137.45,683.52 1138.01,683.52 1138.57,683.52 1139.13,683.52 1139.68,683.52 1140.24,683.52 1140.8,683.52 1141.36,683.52 1141.92,683.52 1142.48,683.52 1143.04,683.52 1143.6,683.52 1144.16,683.52 1144.72,683.52 1145.28,683.52 1145.84,683.52 1146.4,683.52 1146.96,683.52 1147.51,683.52 1148.07,683.52 1148.63,683.52 1149.19,683.52 1149.75,683.52 1150.31,683.52 1150.87,683.52 1151.43,683.52 1151.99,683.52 1152.55,683.52 1153.11,683.52 1153.67,683.52 1154.23,683.52 1154.78,683.52 1155.34,683.52 1155.9,683.52 1156.46,683.52 1157.02,683.52 1157.58,683.52 1158.14,683.52 1158.7,683.52 1159.26,683.52 1159.82,683.52 1160.38,683.52 1160.94,683.52 1161.5,683.52 1162.05,683.52 1162.61,683.52 1163.17,683.52 1163.73,683.52 1164.29,683.52 1164.85,683.52 1165.41,683.52 1165.97,683.52 1166.53,683.52 1167.09,683.52 1167.65,683.52 1168.21,683.52 1168.77,683.52 1169.33,683.52 1169.88,683.52 1170.44,683.52 1171,683.52 1171.56,683.52 1172.12,683.52 1172.68,683.52 1173.24,683.52 1173.8,683.52 1174.36,683.52 1174.92,683.52 1175.48,683.52 1176.04,683.52 1176.6,683.52 1177.15,683.52 1177.71,683.52 1178.27,683.52 1178.83,683.52 1179.39,683.52 1179.95,683.52 1180.51,683.52 1181.07,683.52 1181.63,683.52 1182.19,683.52 1182.75,683.52 1183.31,683.52 1183.87,683.52 1184.43,683.52 1184.98,683.52 1185.54,683.52 1186.1,683.52 1186.66,683.52 1187.22,683.52 1187.78,683.52 1188.34,683.52 1188.9,683.52 1189.46,683.52 1190.02,683.52 1190.58,683.52 1191.14,683.52 1191.7,683.52 1192.25,683.52 1192.81,683.52 1193.37,683.52 1193.93,683.52 1194.49,683.52 1195.05,683.52 1195.61,683.52 1196.17,683.52 1196.73,683.52 1197.29,683.52 1197.85,683.52 1198.41,683.52 1198.97,683.52 1199.52,683.52 1200.08,683.52 1200.64,683.52 1201.2,683.52 1201.76,683.52 1202.32,683.52 1202.88,683.52 1203.44,683.52 1204,683.52 1204.56,683.52 1205.12,683.52 1205.68,683.52 1206.24,683.52 1206.8,683.52 1207.35,683.52 1207.91,683.52 1208.47,683.52 1209.03,683.52 1209.59,683.52 1210.15,683.52 1210.71,683.52 1211.27,683.52 1211.83,683.52 1212.39,683.52 1212.95,683.52 1213.51,683.52 1214.07,683.52 1214.62,683.52 1215.18,683.52 1215.74,683.52 1216.3,683.52 1216.86,683.52 1217.42,683.52 1217.98,683.52 1218.54,683.52 1219.1,683.52 1219.66,683.52 1220.22,683.52 1220.78,683.52 1221.34,683.52 1221.89,683.52 1222.45,683.52 1223.01,683.52 1223.57,683.52 1224.13,683.52 1224.69,683.52 1225.25,683.52 1225.81,683.52 1226.37,683.52 1226.93,683.52 1227.49,683.52 1228.05,683.52 1228.61,683.52 1229.17,683.52 1229.72,683.52 1230.28,683.52 1230.84,683.52 1231.4,683.52 1231.96,683.52 1232.52,683.52 1233.08,683.52 1233.64,683.52 1234.2,683.52 1234.76,683.52 1235.32,683.52 1235.88,683.52 1236.44,683.52 1236.99,683.52 1237.55,683.52 1238.11,683.52 1238.67,683.52 1239.23,683.52 1239.79,683.52 1240.35,683.52 1240.91,683.52 1241.47,683.52 1242.03,683.52 1242.59,683.52 1243.15,683.52 1243.71,683.52 1244.26,683.52 1244.82,683.52 1245.38,683.52 1245.94,683.52 1246.5,683.52 1247.06,683.52 1247.62,683.52 1248.18,683.52 1248.74,683.52 1249.3,683.52 1249.86,683.52 1250.42,683.52 1250.98,683.52 1251.54,683.52 1252.09,683.52 1252.65,683.52 1253.21,683.52 1253.77,683.52 1254.33,683.52 1254.89,683.52 1255.45,683.52 1256.01,683.52 1256.57,683.52 1257.13,683.52 1257.69,683.52 1258.25,683.52 1258.81,683.52 1259.36,683.52 1259.92,683.52 1260.48,683.52 1261.04,683.52 1261.6,683.52 1262.16,683.52 1262.72,683.52 1263.28,683.52 1263.84,683.52 1264.4,683.52 1264.96,683.52 1265.52,683.52 1266.08,683.52 1266.63,683.52 1267.19,683.52 1267.75,683.52 1268.31,683.52 1268.87,683.52 1269.43,683.52 1269.99,683.52 1270.55,683.52 1271.11,683.52 1271.67,683.52 1272.23,683.52 1272.79,683.52 1273.35,683.52 1273.91,683.52 1274.46,683.52 1275.02,683.52 1275.58,683.52 1276.14,683.52 1276.7,683.52 1277.26,683.52 1277.82,683.52 1278.38,683.52 1278.94,683.52 1279.5,683.52 1280.06,683.52 1280.62,683.52 1281.18,683.52 1281.73,683.52 1282.29,683.52 1282.85,683.52 1283.41,683.52 1283.97,683.52 1284.53,683.52 1285.09,683.52 1285.65,683.52 1286.21,683.52 1286.77,683.52 1287.33,683.52 1287.89,683.52 1288.45,683.52 1289,683.52 1289.56,683.52 1290.12,683.52 1290.68,683.52 1291.24,683.52 1291.8,683.52 1292.36,683.52 1292.92,683.52 1293.48,683.52 1294.04,683.52 1294.6,683.52 1295.16,683.52 1295.72,683.52 1296.28,683.52 1296.83,683.52 1297.39,683.52 1297.95,683.52 1298.51,683.52 1299.07,683.52 1299.63,683.52 1300.19,683.52 1300.75,683.52 1301.31,683.52 1301.87,683.52 1302.43,683.52 1302.99,683.52 1303.55,683.52 1304.1,683.52 1304.66,683.52 1305.22,683.52 1305.78,683.52 1306.34,683.52 1306.9,683.52 1307.46,683.52 1308.02,683.52 1308.58,683.52 1309.14,683.52 1309.7,683.52 1310.26,683.52 1310.82,683.52 1311.38,683.52 1311.93,683.52 1312.49,683.52 1313.05,683.52 1313.61,683.52 1314.17,683.52 1314.73,683.52 1315.29,683.52 1315.85,683.52 1316.41,683.52 1316.97,683.52 1317.53,683.52 1318.09,683.52 1318.65,683.52 1319.2,683.52 1319.76,683.52 1320.32,683.52 1320.88,683.52 1321.44,683.52 1322,683.52 1322.56,683.52 1323.12,683.52 1323.68,683.52 1324.24,683.52 1324.8,683.52 1325.36,683.52 1325.92,683.52 1326.47,683.52 1327.03,683.52 1327.59,683.52 1328.15,683.52 1328.71,683.52 1329.27,683.52 1329.83,683.52 1330.39,683.52 1330.95,683.52 1331.51,683.52 1332.07,683.52 1332.63,683.52 1333.19,683.52 1333.75,683.52 1334.3,683.52 1334.86,683.52 1335.42,683.52 1335.98,683.52 1336.54,683.52 1337.1,683.52 1337.66,683.52 1338.22,683.52 1338.78,683.52 1339.34,683.52 1339.9,683.52 1340.46,683.52 1341.02,683.52 1341.57,683.52 1342.13,683.52 1342.69,683.52 1343.25,683.52 1343.81,683.52 1344.37,683.52 1344.93,683.52 1345.49,683.52 1346.05,683.52 1346.61,683.52 1347.17,683.52 1347.73,683.52 1348.29,683.52 1348.84,683.52 1349.4,683.52 1349.96,683.52 1350.52,683.52 1351.08,683.52 1351.64,683.52 1352.2,683.52 1352.76,683.52 1353.32,683.52 1353.88,683.52 1354.44,683.52 1355,683.52 1355.56,683.52 1356.12,683.52 1356.67,683.52 1357.23,683.52 1357.79,683.52 1358.35,683.52 1358.91,683.52 1359.47,683.52 1360.03,683.52 1360.59,683.52 1361.15,683.52 1361.71,683.52 1362.27,683.52 1362.83,683.52 1363.39,683.52 1363.94,683.52 1364.5,683.52 1365.06,683.52 1365.62,683.52 1366.18,683.52 1366.74,683.52 1367.3,683.52 1367.86,683.52 1368.42,683.52 1368.98,683.52 1369.54,683.52 1370.1,683.52 1370.66,683.52 1371.21,683.52 1371.77,683.52 1372.33,683.52 1372.89,683.52 1373.45,683.52 1374.01,683.52 1374.57,683.52 1375.13,683.52 1375.69,683.52 1376.25,683.52 1376.81,683.52 1377.37,683.52 1377.93,683.52 1378.49,683.52 1379.04,683.52 1379.6,683.52 1380.16,683.52 1380.72,683.52 1381.28,683.52 1381.84,683.52 1382.4,683.52 1382.96,683.52 1383.52,683.52 1384.08,683.52 1384.64,683.52 1385.2,683.52 1385.76,683.52 1386.31,683.52 1386.87,683.52 1387.43,683.52 1387.99,683.52 1388.55,683.52 1389.11,683.52 1389.67,683.52 1390.23,683.52 1390.79,683.52 1391.35,683.52 1391.91,683.52 1392.47,683.52 1393.03,683.52 1393.58,683.52 1394.14,683.52 1394.7,683.52 1395.26,683.52 1395.82,683.52 1396.38,683.52 1396.94,683.52 1397.5,683.52 1398.06,683.52 1398.62,683.52 1399.18,683.52 1399.74,683.52 1400.3,683.52 1400.86,683.52 1401.41,683.52 1401.97,683.52 1402.53,683.52 1403.09,683.52 1403.65,683.52 1404.21,683.52 1404.77,683.52 1405.33,683.52 1405.89,683.52 1406.45,683.52 1407.01,683.52 1407.57,683.52 1408.13,683.52 1408.68,683.52 1409.24,683.52 1409.8,683.52 1410.36,683.52 1410.92,683.52 1411.48,683.52 1412.04,683.52 1412.6,683.52 1413.16,683.52 1413.72,683.52 1414.28,683.52 1414.84,683.52 1415.4,683.52 1415.95,683.52 1416.51,683.52 1417.07,683.52 1417.63,683.52 1418.19,683.52 1418.75,683.52 1419.31,683.52 1419.87,683.52 1420.43,683.52 1420.99,683.52 1421.55,683.52 1422.11,683.52 1422.67,683.52 1423.23,683.52 1423.78,683.52 1424.34,683.52 1424.9,683.52 1425.46,683.52 1426.02,683.52 1426.58,683.52 1427.14,683.52 1427.7,683.52 1428.26,683.52 1428.82,683.52 1429.38,683.52 1429.94,683.52 1430.5,683.52 1431.05,683.52 1431.61,683.52 1432.17,683.52 1432.73,683.52 1433.29,683.52 1433.85,683.52 1434.41,683.52 1434.97,683.52 1435.53,683.52 1436.09,683.52 1436.65,683.52 1437.21,683.52 1437.77,683.52 1438.33,683.52 1438.88,683.52 1439.44,683.52 1440,683.52 1440.56,683.52 1441.12,683.52 1441.68,683.52 1442.24,683.52 1442.8,683.52 1443.36,683.52 1443.92,683.52 1444.48,683.52 1445.04,683.52 1445.6,683.52 1446.15,683.52 1446.71,683.52 1447.27,683.52 1447.83,683.52 1448.39,683.52 1448.95,683.52 1449.51,683.52 1450.07,683.52 1450.63,683.52 1451.19,683.52 1451.75,683.52 1452.31,683.52 1452.87,683.52 1453.42,683.52 1453.98,683.52 1454.54,683.52 1455.1,683.52 1455.66,683.52 1456.22,683.52 1456.78,683.52 1457.34,683.52 1457.9,683.52 1458.46,683.52 1459.02,683.52 1459.58,683.52 1460.14,683.52 1460.7,683.52 1461.25,683.52 1461.81,683.52 1462.37,683.52 1462.93,683.52 1463.49,683.52 1464.05,683.52 1464.61,683.52 1465.17,683.52 1465.73,683.52 1466.29,683.52 1466.85,683.52 1467.41,683.52 1467.97,683.52 1468.52,683.52 1469.08,683.52 1469.64,683.52 1470.2,683.52 1470.76,683.52 1471.32,683.52 1471.88,683.52 1472.44,683.52 1473,683.52 1473.56,683.52 1474.12,683.52 1474.68,683.52 1475.24,683.52 1475.79,683.52 1476.35,683.52 1476.91,683.52 1477.47,683.52 1478.03,683.52 1478.59,683.52 1479.15,683.52 1479.71,683.52 1480.27,683.52 1480.83,683.52 1481.39,683.52 1481.95,683.52 1482.51,683.52 1483.07,683.52 1483.62,683.52 1484.18,683.52 1484.74,683.52 1485.3,683.52 1485.86,683.52 1486.42,683.52 1486.98,683.52 1487.54,683.52 1488.1,683.52 1488.66,683.52 1489.22,683.52 1489.78,683.52 1490.34,683.52 1490.89,683.52 1491.45,683.52 1492.01,683.52 1492.57,683.52 1493.13,683.52 1493.69,683.52 1494.25,683.52 1494.81,683.52 1495.37,683.52 1495.93,683.52 1496.49,683.52 1497.05,683.52 1497.61,683.52 1498.16,683.52 1498.72,683.52 1499.28,683.52 1499.84,683.52 1500.4,683.52 1500.96,683.52 1501.52,683.52 1502.08,683.52 1502.64,683.52 1503.2,683.52 1503.76,683.52 1504.32,683.52 1504.88,683.52 1505.44,683.52 1505.99,683.52 1506.55,683.52 1507.11,683.52 1507.67,683.52 1508.23,683.52 1508.79,683.52 1509.35,683.52 1509.91,683.52 1510.47,683.52 1511.03,683.52 1511.59,683.52 1512.15,683.52 1512.71,683.52 1513.26,683.52 1513.82,683.52 1514.38,683.52 1514.94,683.52 1515.5,683.52 1516.06,683.52 1516.62,683.52 1517.18,683.52 1517.74,683.52 1518.3,683.52 1518.86,683.52 1519.42,683.52 1519.98,683.52 1520.53,683.52 1521.09,683.52 1521.65,683.52 1522.21,683.52 1522.77,683.52 1523.33,683.52 1523.89,683.52 1524.45,683.52 1525.01,683.52 1525.57,683.52 1526.13,683.52 1526.69,683.52 1527.25,683.52 1527.81,683.52 1528.36,683.52 1528.92,683.52 1529.48,683.52 1530.04,683.52 1530.6,683.52 1531.16,683.52 1531.72,683.52 1532.28,683.52 1532.84,683.52 1533.4,683.52 1533.96,683.52 1534.52,683.52 1535.08,683.52 1535.63,683.52 1536.19,683.52 1536.75,683.52 1537.31,683.52 1537.87,683.52 1538.43,683.52 1538.99,683.52 1539.55,683.52 1540.11,683.52 1540.67,683.52 1541.23,683.52 1541.79,683.52 1542.35,683.52 1542.9,683.52 1543.46,683.52 1544.02,683.52 1544.58,683.52 1545.14,683.52 1545.7,683.52 1546.26,683.52 1546.82,683.52 1547.38,683.52 1547.94,683.52 1548.5,683.52 1549.06,683.52 1549.62,683.52 1550.18,683.52 1550.73,683.52 1551.29,683.52 1551.85,683.52 1552.41,683.52 1552.97,683.52 1553.53,683.52 1554.09,683.52 1554.65,683.52 1555.21,683.52 1555.77,683.52 1556.33,683.52 1556.89,683.52 1557.45,683.52 1558,683.52 1558.56,683.52 1559.12,683.52 1559.68,683.52 1560.24,683.52 1560.8,683.52 1561.36,683.52 1561.92,683.52 1562.48,683.52 1563.04,683.52 1563.6,683.52 1564.16,683.52 1564.72,683.52 1565.28,683.52 1565.83,683.52 1566.39,683.52 1566.95,683.52 1567.51,683.52 1568.07,683.52 1568.63,683.52 1569.19,683.52 1569.75,683.52 1570.31,683.52 1570.87,683.52 1571.43,683.52 1571.99,683.52 1572.55,683.52 1573.1,683.52 1573.66,683.52 1574.22,683.52 1574.78,683.52 1575.34,683.52 1575.9,683.52 1576.46,683.52 1577.02,683.52 1577.58,683.52 1578.14,683.52 1578.7,683.52 1579.26,683.52 1579.82,683.52 1580.37,683.52 1580.93,683.52 1581.49,683.52 1582.05,683.52 1582.61,683.52 1583.17,683.52 1583.73,683.52 1584.29,683.52 1584.85,683.52 1585.41,683.52 1585.97,683.52 1586.53,683.52 1587.09,683.52 1587.65,683.52 1588.2,683.52 1588.76,683.52 1589.32,683.52 1589.88,683.52 1590.44,683.52 1591,683.52 1591.56,683.52 1592.12,683.52 1592.68,683.52 1593.24,683.52 1593.8,683.52 1594.36,683.52 1594.92,683.52 1595.47,683.52 1596.03,683.52 1596.59,683.52 1597.15,683.52 1597.71,683.52 1598.27,683.52 1598.83,683.52 1599.39,683.52 1599.95,683.52 1600.51,683.52 1601.07,683.52 1601.63,683.52 1602.19,683.52 1602.74,683.52 1603.3,683.52 1603.86,683.52 1604.42,683.52 1604.98,683.52 1605.54,683.52 1606.1,683.52 1606.66,683.52 1607.22,683.52 1607.78,683.52 1608.34,683.52 1608.9,683.52 1609.46,683.52 1610.02,683.52 1610.57,683.52 1611.13,683.52 1611.69,683.52 1612.25,683.52 1612.81,683.52 1613.37,683.52 1613.93,683.52 1614.49,683.52 1615.05,683.52 1615.61,683.52 1616.17,683.52 1616.73,683.52 1617.29,683.52 1617.84,683.52 1618.4,683.52 1618.96,683.52 1619.52,683.52 1620.08,683.52 1620.64,683.52 1621.2,683.52 1621.76,683.52 1622.32,683.52 1622.88,683.52 1623.44,683.52 1624,683.52 1624.56,683.52 1625.11,683.52 1625.67,683.52 1626.23,683.52 1626.79,683.52 1627.35,683.52 1627.91,683.52 1628.47,683.52 1629.03,683.52 1629.59,683.52 1630.15,683.52 1630.71,683.52 1631.27,683.52 1631.83,683.52 1632.39,683.52 1632.94,683.52 1633.5,683.52 1634.06,683.52 1634.62,683.52 1635.18,683.52 1635.74,683.52 1636.3,683.52 1636.86,683.52 1637.42,683.52 1637.98,683.52 1638.54,683.52 1639.1,683.52 1639.66,683.52 1640.21,683.52 1640.77,683.52 1641.33,683.52 1641.89,683.52 1642.45,683.52 1643.01,683.52 1643.57,683.52 1644.13,683.52 1644.69,683.52 1645.25,683.52 1645.81,683.52 1646.37,683.52 1646.93,683.52 1647.48,683.52 1648.04,683.52 1648.6,683.52 1649.16,683.52 1649.72,683.52 1650.28,683.52 1650.84,683.52 1651.4,683.52 1651.96,683.52 1652.52,683.52 1653.08,683.52 1653.64,683.52 1654.2,683.52 1654.76,683.52 1655.31,683.52 1655.87,683.52 1656.43,683.52 1656.99,683.52 1657.55,683.52 1658.11,683.52 1658.67,683.52 1659.23,683.52 1659.79,683.52 1660.35,683.52 1660.91,683.52 1661.47,683.52 1662.03,683.52 1662.58,683.52 1663.14,683.52 1663.7,683.52 1664.26,683.52 1664.82,683.52 1665.38,683.52 1665.94,683.52 1666.5,683.52 1667.06,683.52 1667.62,683.52 1668.18,683.52 1668.74,683.52 1669.3,683.52 1669.85,683.52 1670.41,683.52 1670.97,683.52 1671.53,683.52 1672.09,683.52 1672.65,683.52 1673.21,683.52 1673.77,683.52 1674.33,683.52 1674.89,683.52 1675.45,683.52 1676.01,683.52 1676.57,683.52 1677.13,683.52 1677.68,683.52 1678.24,683.52 1678.8,683.52 1679.36,683.52 1679.92,683.52 1680.48,683.52 1681.04,683.52 1681.6,683.52 1682.16,683.52 1682.72,683.52 1683.28,683.52 1683.84,683.52 1684.4,683.52 1684.95,683.52 1685.51,683.52 1686.07,683.52 1686.63,683.52 1687.19,683.52 1687.75,683.52 1688.31,683.52 1688.87,683.52 1689.43,683.52 1689.99,683.52 1690.55,683.52 1691.11,683.52 1691.67,683.52 1692.23,683.52 1692.78,683.52 1693.34,683.52 1693.9,683.52 1694.46,683.52 1695.02,683.52 1695.58,683.52 1696.14,683.52 1696.7,683.52 1697.26,683.52 1697.82,683.52 1698.38,683.52 1698.94,683.52 1699.5,683.52 1700.05,683.52 1700.61,683.52 1701.17,683.52 1701.73,683.52 1702.29,683.52 1702.85,683.52 1703.41,683.52 1703.97,683.52 1704.53,683.52 1705.09,683.52 1705.65,683.52 1706.21,683.52 1706.77,683.52 1707.32,683.52 1707.88,683.52 1708.44,683.52 1709,683.52 1709.56,683.52 1710.12,683.52 1710.68,683.52 1711.24,683.52 1711.8,683.52 1712.36,683.52 1712.92,683.52 1713.48,683.52 1714.04,683.52 1714.6,683.52 1715.15,683.52 1715.71,683.52 1716.27,683.52 1716.83,683.52 1717.39,683.52 1717.95,683.52 1718.51,683.52 1719.07,683.52 1719.63,683.52 1720.19,683.52 1720.75,683.52 1721.31,683.52 1721.87,683.52 1722.42,683.52 1722.98,683.52 1723.54,683.52 1724.1,683.52 1724.66,683.52 1725.22,683.52 1725.78,683.52 1726.34,683.52 1726.9,683.52 1727.46,683.52 1728.02,683.52 1728.58,683.52 1729.14,683.52 1729.69,683.52 1730.25,683.52 1730.81,683.52 1731.37,683.52 1731.93,683.52 1732.49,683.52 1733.05,683.52 1733.61,683.52 1734.17,683.52 1734.73,683.52 1735.29,683.52 1735.85,683.52 1736.41,683.52 1736.97,683.52 1737.52,683.52 1738.08,683.52 1738.64,683.52 1739.2,683.52 1739.76,683.52 1740.32,683.52 1740.88,683.52 1741.44,683.52 1742,683.52 1742.56,683.52 1743.12,683.52 1743.68,683.52 1744.24,683.52 1744.79,683.52 1745.35,683.52 1745.91,683.52 1746.47,683.52 1747.03,683.52 1747.59,683.52 1748.15,683.52 1748.71,683.52 1749.27,683.52 1749.83,683.52 1750.39,683.52 1750.95,683.52 1751.51,683.52 1752.06,683.52 1752.62,683.52 1753.18,683.52 1753.74,683.52 1754.3,683.52 1754.86,683.52 1755.42,683.52 1755.98,683.52 1756.54,683.52 1757.1,683.52 1757.66,683.52 1758.22,683.52 1758.78,683.52 1759.34,683.52 1759.89,683.52 1760.45,683.52 1761.01,683.52 1761.57,683.52 1762.13,683.52 1762.69,683.52 1763.25,683.52 1763.81,683.52 1764.37,683.52 1764.93,683.52 1765.49,683.52 1766.05,683.52 1766.61,683.52 1767.16,683.52 1767.72,683.52 1768.28,683.52 1768.84,683.52 1769.4,683.52 1769.96,683.52 1770.52,683.52 1771.08,683.52 1771.64,683.52 1772.2,683.52 1772.76,683.52 1773.32,683.52 1773.88,683.52 1774.43,683.52 1774.99,683.52 1775.55,683.52 1776.11,683.52 1776.67,683.52 1777.23,683.52 1777.79,683.52 1778.35,683.52 1778.91,683.52 1779.47,683.52 1780.03,683.52 1780.59,683.52 1781.15,683.52 1781.71,683.52 1782.26,683.52 1782.82,683.52 1783.38,683.52 1783.94,683.52 1784.5,683.52 1785.06,683.52 1785.62,683.52 1786.18,683.52 1786.74,683.52 1787.3,683.52 1787.86,683.52 1788.42,683.52 1788.98,683.52 1789.53,683.52 1790.09,683.52 1790.65,683.52 1791.21,683.52 1791.77,683.52 1792.33,683.52 1792.89,683.52 1793.45,683.52 1794.01,683.52 1794.57,683.52 1795.13,683.52 1795.69,683.52 1796.25,683.52 1796.8,683.52 1797.36,683.52 1797.92,683.52 1798.48,683.52 1799.04,683.52 1799.6,683.52 1800.16,683.52 1800.72,683.52 1801.28,683.52 1801.84,683.52 1802.4,683.52 1802.96,683.52 1803.52,683.52 1804.08,683.52 1804.63,683.52 1805.19,683.52 1805.75,683.52 1806.31,683.52 1806.87,683.52 1807.43,683.52 1807.99,683.52 1808.55,683.52 1809.11,683.52 1809.67,683.52 1810.23,683.52 1810.79,683.52 1811.35,683.52 1811.9,683.52 1812.46,683.52 1813.02,683.52 1813.58,683.52 1814.14,683.52 1814.7,683.52 1815.26,683.52 1815.82,683.52 1816.38,683.52 1816.94,683.52 1817.5,683.52 1818.06,683.52 1818.62,683.52 1819.18,683.52 1819.73,683.52 1820.29,683.52 1820.85,683.52 1821.41,683.52 1821.97,683.52 1822.53,683.52 1823.09,683.52 1823.65,683.52 1824.21,683.52 1824.77,683.52 1825.33,683.52 1825.89,683.52 1826.45,683.52 1827,683.52 1827.56,683.52 1828.12,683.52 1828.68,683.52 1829.24,683.52 1829.8,683.52 1830.36,683.52 1830.92,683.52 1831.48,683.52 1832.04,683.52 1832.6,683.52 1833.16,683.52 1833.72,683.52 1834.27,683.52 1834.83,683.52 1835.39,683.52 1835.95,683.52 1836.51,683.52 1837.07,683.52 1837.63,683.52 1838.19,683.52 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906472","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $target_walkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.0371773766410035 ± 0.02214912793936874\nProjected Energy: -4.014757324164896 ± (0.0066916230917160036, 0.006241371787742089)\nExact Energy: -4.021502406906472\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from solve as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b];\n    shift=:shift,\n    norm=:norm,\n    time_step=determine_constant_time_step(df),\n    skip=0\n)\ngrowth_witness(sim::PMCSimulation, [b]; kwargs...)\n\nCalculate the growth witness directly from the result (DataFrame or PMCSimulation) of solveing a ProjectorMonteCarloProblem. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0)\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n)\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\ngrowth_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively.  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m) \n\nwhere dτ is the time_step\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator.  Error propagation is done with MonteCarloMeasurements. Propagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a PMCSimulation or DataFrame returned by solve. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\ngrowth_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df or PMCSimulation sim. repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-Tuple{AbstractVector, AbstractVector, AbstractVector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\nmixed_estimator(sim::PMCSimulation, h; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up).  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.  Additional keyword arguments are passed on to ratio_of_means.\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2), where dτ is the time_step, and potentially increased confidence intervals compared to the unweighted ratio.  Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\nmixed_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(df::DataFrame; skip=0, hproj=:hproj, vproj=:vproj, kwargs...)\nprojected_energy(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy(...) to set these up in ProjectorMonteCarloProblem). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n)\nrayleigh_replica_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin. Additional keyword arguments are passed on to ratio_of_means.\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\nrayleigh_replica_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...)\nshift_estimator(sim::PMCSimulation; kwargs...)\n-> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_lin, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_exp, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\nreplica_fidelity(sim::PMCSimulation; kwargs...)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the PMCSimulation or DataFrame returned by solve, using replicas _1 and _2. Calls ratio_of_means to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\nvariational_energy_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame and PMCSimulation versions can extract the relevant information from the result of solve. Set up the ProjectorMonteCarloProblem with the keyword argument replica_strategy = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.determine_constant_time_step-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.determine_constant_time_step","text":"determine_constant_time_step(df) -> time_step\n\nGiven a DataFrame df, determine the time step that was used to compute it. Throw an error if time step is not constant.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by ProjectorMonteCarloProblem as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallowed_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">0.478356</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">1.4077e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">1.3314e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">9.137e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">1.643e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">2.665e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">8.566e-6</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0-1.41421im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im      0.0-2.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+1.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im\n 0.0-1.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999991\n -0.9999999999999991\n -0.9999999999999982\n -0.9999999999999973\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000027\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n       0.0+0.0im       -5.55112e-17-0.353553im         0.534676-0.217841im      2.77556e-17-0.204124im             0.0+0.0im           0.534676+0.217841im      2.77556e-17+0.204124im             0.0+0.0im       -5.55112e-17+0.353553im           0.0+0.0im\n       0.0+0.0im        5.55112e-17-0.5im             -0.378073+0.154037im              0.0-0.288675im             0.0+0.0im          -0.378073-0.154037im     -5.55112e-17+0.288675im             0.0+0.0im                0.0+0.5im                0.0+0.0im\n       0.0+0.612372im           0.0+0.0im          -5.55112e-17+0.0im           -1.2326e-32+2.77556e-17im          0.0+0.353553im           0.0+0.0im                   0.0+2.77556e-17im          0.0+0.353553im           0.0+0.0im                0.0+0.612372im\n       0.0+0.0im                0.0+0.353553im      5.55112e-17+6.93889e-17im           0.0-0.612372im             0.0+0.0im        5.55112e-17-1.38778e-16im           0.0+0.612372im             0.0+0.0im                0.0-0.353553im           0.0+0.0im\n       0.0-0.353553im    1.2326e-32+1.11022e-16im   5.55112e-17-2.77556e-17im  -2.46519e-32-2.77556e-17im          0.0+0.612372im  -1.11022e-16-2.77556e-17im   4.93038e-32-2.77556e-17im          0.0+0.612372im   -1.2326e-32+8.32667e-17im        0.0-0.353553im\n       0.0+0.0im           0.353553+0.0im                   0.0+0.0im              0.612372+0.0im                  0.0+0.0im                0.0+0.0im              0.612372+0.0im                  0.0+0.0im           0.353553+0.0im                0.0+0.0im\n -0.353553+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.612372+0.0im                0.0+0.0im                   0.0+0.0im             0.612372+0.0im                0.0+0.0im           0.353553+0.0im\n       0.0+0.0im               -0.5+7.02973e-17im     -0.154037-0.378073im         0.288675-1.95105e-16im          0.0+0.0im          -0.154037+0.378073im         0.288675+2.29062e-16im          0.0+0.0im               -0.5-7.48398e-17im        0.0+0.0im\n       0.0+0.0im          -0.353553+8.84171e-17im      0.217841+0.534676im         0.204124-1.1389e-16im   8.32667e-17+0.0im           0.217841-0.534676im         0.204124+2.4427e-16im   8.32667e-17+0.0im          -0.353553-8.31718e-17im        0.0+0.0im\n  0.612372+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.353553-0.0im                0.0+0.0im                   0.0+0.0im             0.353553+0.0im                0.0+0.0im          -0.612372-0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -1.6810327175633306e-17\n  3.469966302164114e-17\n  0.15915494309189535\n  0.1591549430918954\n  0.1591549430918954","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(fs\"|0 0 4 0 0⟩\"; u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 1 0 0 3⟩\"\n fs\"|1 3 0 0 0⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843  0.0       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8        0.0       0.282843  0.565685  0.0       0.0       0.0       0.0\n  0.0       0.8       0.4       0.581966  0.4       0.0       0.4        0.282843  0.565685  0.0       0.69282   0.69282   0.0       0.0\n  0.0       0.4       0.8       0.4       2.81803   0.4       0.0        0.0       0.565685  0.282843  0.69282   0.0       0.69282   0.0\n  0.0       0.8       0.4       0.0       0.4       0.581966  0.4        0.282843  0.565685  0.0       0.0       0.0       0.69282   0.69282\n  0.0       0.4       0.8       0.4       0.0       0.4       2.81803    0.0       0.565685  0.282843  0.0       0.69282   0.0       0.69282\n  0.0       0.565685  0.0       0.282843  0.0       0.282843  0.0       -0.472136  0.8       0.0       0.489898  0.0       0.0       0.489898\n  0.0       0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n  0.0       0.0       0.565685  0.0       0.282843  0.0       0.282843   0.0       0.8       8.47214   0.0       0.489898  0.489898  0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.0       0.0        0.489898  0.489898  0.0       1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.69282    0.0       0.489898  0.489898  0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.69282   0.0        0.0       0.489898  0.489898  0.0       0.0       6.03607   0.0\n  0.0       0.0       0.0       0.0       0.0       0.69282   0.69282    0.489898  0.489898  0.0       0.0       0.0       0.0       1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.9798639983216155\n -3.363124291613371\n -0.7590191922770746\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781396\n  1.530592997097333\n  1.5835732611867464\n  3.072870330325867\n  3.125672653951849\n  4.862107221562182\n  6.26069485038059\n  6.402671211183119\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348     0.175378     0.0135766   -2.81719e-15  -0.0221221  -0.0697193   1.3739e-15    0.0314466   -2.35922e-16  -0.0360987   -0.0161557  -5.55112e-17   0.00625248  -0.0058099\n  0.177701     0.932229     0.105473     3.01009e-14   0.225254   -0.132826    9.71445e-17  -0.00292026  -2.09555e-15  -0.0861158   -0.0907789  -4.996e-16     0.0591715   -0.0264275\n  0.0768085   -0.0622307    0.0129069   -6.06251e-14  -0.447424   -0.63969     2.05322e-14   0.383444    -6.54338e-15  -0.431051    -0.181167   -6.10623e-16   0.0599783   -0.106852\n -0.0214153   -0.175119    -0.20169      0.616673      0.522017   -0.296818   -0.31234      -0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797    0.0693699     0.0495446   0.416847    0.33773       0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153   -0.175119    -0.20169     -0.616673      0.522017   -0.296818    0.31234      -0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797   -0.0693699     0.0495446   0.416847   -0.33773       0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.0138439   -0.165902     0.922758     1.00753e-14   0.1111     -0.172508   -1.30521e-14  -0.207974     2.66454e-15   0.0848902   -0.149153   -8.32667e-16   0.0712921   -0.0301968\n -0.00234782   0.00840544  -0.098969    -9.6867e-15   -0.0847116   0.082999    1.51129e-14   0.274424     3.60822e-15   0.575786    -0.61385    -2.72005e-15   0.353775    -0.259338\n -0.00237613   0.00294196   0.00143189   5.56152e-15   0.0427486   0.0110863  -3.72619e-15  -0.0663108    9.50628e-16   0.00167015   0.0832916   2.91434e-15  -0.448519    -0.8863\n  0.00363555   0.0455298   -0.133824    -0.332825     -0.290831   -0.057199   -0.527627     -0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478   0.0150664    0.0206752   -0.0642658    -0.0638689  -0.0250518   0.0999631    -0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499\n  0.00195478   0.0150664    0.0206752    0.0642658    -0.0638689  -0.0250518  -0.0999631    -0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555   0.0455298   -0.133824     0.332825     -0.290831   -0.057199    0.527627     -0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133606\n -0.7590191922770747","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321598\n -3.363124291613371\n -0.7590191922770906\n  0.13584182219622143\n  0.15789998694608798\n  0.8767114411781325\n  1.530592997097334\n  1.5835732611867313\n  3.0728703303258698\n  3.1256726539518365\n  4.862107221562167\n  6.260694850380596\n  6.40267121118311\n  9.093371706203955","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321621\n -3.3631242916133637\n -0.759019192277076\n  0.1578999869460802\n  0.8767114411781437\n  1.5835732611867417\n  3.125672653951844\n  4.862107221562179\n  6.402671211183117\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.0066861389450877905\n 0.033070399772041625\n 3.9204869225657406\n 0.03307039977204162\n 0.006686138945087839","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html#Model-Hamiltonians","page":"Hamiltonians","title":"Model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardReal1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardReal1D2C","text":"BoseHubbardReal1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0)\n\nImplements a two-component one-dimensional Bose Hubbard chain in real space.\n\nhatH = hatH_a + hatH_b + Vsum_i n_a_in_b_i\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nua: the on-site interaction parameter parameter for Hamiltonian a.\nub: the on-site interaction parameter parameter for Hamiltonian b.\nta: the hopping strength for Hamiltonian a.\ntb: the hopping strength for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nSee also\n\nHubbardReal1D\nBoseHubbardMom1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0, boundary_condition=:periodic)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space. This Hamiltonian can be either real or complex, depending on the choice of boundary_condition.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) +\nv sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\nboundary_condition The following values are supported:\n:periodic: usual period boundary condition realising a ring geometry.\n:hard_wall: hopping over the boundary is not allowed.\n:twisted: like :periodic but hopping over the boundary incurs an additional factor of -1.\nθ <: Number: like :periodic and :twisted but hopping over the boundary incurs a factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left. With this choice the Hamiltonian will have a complex eltype whereas otherwise the eltype is determined by the type of the parameters t, u, and v.\n\nSee also HubbardRealSpace.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2t cos(k)\ncontinuum_dispersion: ϵ_k = tk^2\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardMom1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardMom1D2C","text":"BoseHubbardMom1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0, kwargs...)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with a two-component Bose gas.\n\nhatH = hatH_a + hatH_b + fracVMsum_kpqr b^_r a^_q b_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address.\nua: the u parameter for Hamiltonian a.\nub: the u parameter for Hamiltonian b.\nta: the t parameter for Hamiltonian a.\ntb: the t parameter for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nFurther keyword arguments are passed on to the constructor of HubbardMom1D.\n\nSee also\n\nBoseFS2C\nBoseHubbardReal1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2t cos(k)\ncontinuum_dispersion: ϵ_k = tk^2\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl\n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl\n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between basis states of any noninteracting energy level, leading to many more offdiagonals and fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The   allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make   the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the   interactions. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without   comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, see four_oscillator_integral_general, with the additional restriction that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to   make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi\n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix representation of this Hamiltonian for a single particle is completely dense in the even-parity subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty   for a 1D trap or contain values greater than 1.0. The maximum index   in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,   including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if   only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of\nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other","page":"Hamiltonians","title":"Other","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of ProjectorMonteCarloProblem() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(k)\n\nDispersion relation for HubbardMom1D. Returns -2cos(k).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(k)\n\nDispersion relation for HubbardMom1D. Returns k^2.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(fs\"|0 2 1⟩\"; u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Observables are AbstractHamiltonians that represent a physical observable. Their ground state expectation values can be sampled by passing them into AllOverlaps.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"ParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator([address]) <: AbstractHamiltonian\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. Passing an address is optional.\n\njulia> h = FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3); bsr = BasisSetRepresentation(h);\n\njulia> gs = DVec(zip(bsr.basis, eigen(Matrix(bsr)).vectors[:,1])); # ground state\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractHamiltonian{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int,c=:cross) <: AbstractHamiltonian{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d of a two component system in a momentum-space Fock-state basis. It returns a Complex value.\n\nCorrelation across two components:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s b^_p  b_q a_r δ_s+pq+r\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\nc: possible instructions: :cross: default instruction, computing correlation between particles across two components; :first: computing correlation between particles within the first component; :second: computing correlation between particles within the second component. These are the only defined instructions, using anything else will produce errors.\n\nTo use on a one-component system\n\nFor a system with only one component, e.g. with BoseFS, the second argument c is irrelevant and can be any of the above instructions, one could simply skip this argument and let it be the default value.\n\nSee also\n\nBoseHubbardMom1D2C\nBoseFS2C\nG2RealCorrelator\nG2RealSpace\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into ProjectorMonteCarloProblem with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractHamiltonian, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    hatC_textstring(d) = frac1M sum_j^M delta n_j (e^i pi sum_j leq k  j + d delta n_k) delta n_j+d\n\nHere, delta hatn_j = hatn_j - barn is the boson number deviation from the mean filling number and barn = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractHamiltonian, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SingleParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.SingleParticleExcitation","text":"SingleParticleExcitation(i, j) <: AbstractHamiltonian\n\nRepresent {i,j} element of the single-particle reduced density matrix:\n\nhatρ^(1)_ij = hat a^_i hat a_j\n\nwhere i and j are the mode\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nTwoParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TwoParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.TwoParticleExcitation","text":"TwoParticleExcitation(i, j, k, l) <: AbstractHamiltonian\n\nRepresent {ij, kl} element of the two-particle reduced density matrix:\n\nhatρ^(2)_ij kl =  hat a^_i hat a^_j hat a_l hat a_k \n\nwhere i, j, k, and l are the mode\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator hatp.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(add => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(add => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(add => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Hamiltonians-interface","page":"Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. The most general form of a model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with ProjectorMonteCarloProblem). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallowed_address_type(h::AbstractHamiltonian): defaults to typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.starting_address","page":"Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, add, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address add and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallowed_address_type","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, add)\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address add of the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRep.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.allowed_address_type","page":"Hamiltonians","title":"Rimu.Interfaces.allowed_address_type","text":"allowed_address_type(h::AbstractHamiltonian)\n\nReturn the type of addresses that can be used with Hamiltonian h.\n\nPart of the AbstractHamiltonian interface.\n\nDefaults to typeof(starting_address(h)). Overload this function if the Hamiltonian can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"hamiltonians.html#Base.adjoint","page":"Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractHamiltonian)\n\nRepresent the adjoint of an AbstractHamiltonian. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.dot","page":"Hamiltonians","title":"LinearAlgebra.dot","text":"dot(map::OccupiedModeMap, vec::AbstractVector)\ndot(map1::OccupiedModeMap, map2::OccupiedModeMap)\n\nDot product extracting mode occupation numbers from an OccupiedModeMap similar to onr.\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> dot(mb, 1:7)\n27\n\njulia> mb⋅(1:7) == onr(b)⋅(1:7)\ntrue\n\nSee also SingleComponentFockAddress.\n\n\n\n\n\ndot(w, op::AbstractHamiltonian, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\ndot(y::PDVec, A::AbstractHamiltonian, x::PDVec[, w::PDWorkingMemory])\n\nPerform y ⋅ A ⋅ x. The working memory w is required to facilitate threaded/distributed operations with non-diagonal A. If needed and not passed a new instance will be allocated. A can be replaced with a tuple of operators.\n\nSee PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractHamiltonian, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allowed_address_type.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here for HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Harmonic-Oscillator","page":"Hamiltonians","title":"Harmonic Oscillator","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim}; \n    target_energy = nothing, \n    max_energy = nothing, \n    max_blocks = nothing, \n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns \n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRep\nindices: tuple of mode indices that allow recreation of the generating address    addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when    the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating    tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved    after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.    Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds  addr are determined by parity. In this case the blocks are not generated; t_basis  will be zero, and block_size will be an estimate. Pass the seed addresses to  BasisSetRep with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis  indices n_xn_yldots. These indices are bounded by S which is a  tuple of the maximum number of states in each dimension. By default the  groundstate in each dimension is indexed by 0, but this can be changed  by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions,\n\n    mathcalI(ijkl) = int_-infty^infty dx \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function, and is non-zero unless i+j+k+l is odd. See e.g. Titchmarsh (1948). This is a generalisation of the closed form in Papenbrock (2002), which is is the special case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin,\n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state corresponds to a D-tuple of harmonic oscillator indices mathbfn_i. S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of phi_i(0) to speed-up the calculation. The values can be calculated with log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"RMPI.html#Module-RMPI","page":"RMPI","title":"Module RMPI","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI","category":"page"},{"location":"RMPI.html#Rimu.RMPI","page":"RMPI","title":"Rimu.RMPI","text":"Module for providing MPI functionality for Rimu. This module is unexported. To use it, run\n\nusing Rimu.RMPI\n\n\n\n\n\n","category":"module"},{"location":"RMPI.html#MPIData","page":"RMPI","title":"MPIData","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIData","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIData","page":"RMPI","title":"Rimu.RMPI.MPIData","text":"MPIData(data; kwargs...)\n\nWrapper used for signaling that this data is part of a distributed data structure and communication should happen with MPI. MPIData can generally be used where an AbstractDVec would be used otherwise. Unlike AbstractDVecs, MPIData does not support indexing, or iteration over keys, values, and pairs.\n\nKeyword arguments:\n\nsetup = mpi_point_to_point - controls the communication stratgy\nmpi_one_sided uses one-sided communication with remote memory access (RMA), sets MPIOneSided strategy.\nmpi_point_to_point uses MPIPointToPoint strategy.\nmpi_all_to_all uses MPIAllToAll strategy.\nmpi_no_exchange sets MPINoWalkerExchange strategy. Experimental. Use with caution!\ncomm = mpi_comm()\nroot = mpi_root\nThe rest of the keyword arguments are passed to setup.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Setup-functions","page":"RMPI","title":"Setup functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"The following distribute strategies are available. The functions are unexported.","category":"page"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.mpi_point_to_point\nRimu.RMPI.mpi_one_sided\nRimu.RMPI.mpi_all_to_all\nRimu.RMPI.mpi_no_exchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_point_to_point","page":"RMPI","title":"Rimu.RMPI.mpi_point_to_point","text":"mpi_point_to_point(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to point-to-point.\n\nSets up the MPIData structure with MPIPointToPoint strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_one_sided","page":"RMPI","title":"Rimu.RMPI.mpi_one_sided","text":"mpi_one_sided(data, comm = mpi_comm(), root = mpi_root; capacity)\n\nDeclare data as mpi-distributed and set communication strategy to one-sided with remote memory access (RMA). capacity sets the capacity of the RMA windows.\n\nSets up the MPIData structure with MPIOneSided strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_all_to_all","page":"RMPI","title":"Rimu.RMPI.mpi_all_to_all","text":"mpi_all_to_all(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to all-to-all.\n\nSets up the MPIData structure with MPIAllToAll strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_no_exchange","page":"RMPI","title":"Rimu.RMPI.mpi_no_exchange","text":"mpi_no_exchange(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to MPINoWalkerExchange. Sets up the MPIData structure with MPINoWalkerExchange strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Strategies","page":"RMPI","title":"Strategies","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIPointToPoint\nRimu.RMPI.MPIOneSided\nRimu.RMPI.MPIAllToAll\nRimu.RMPI.MPINoWalkerExchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIPointToPoint","page":"RMPI","title":"Rimu.RMPI.MPIPointToPoint","text":"MPIPointToPoint{N,A}\n\nPoint-to-point communication strategy. Uses circular communication using MPI.Send and MPI.Recv!.\n\nConstructor\n\nMPIPointToPoint(::Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIOneSided","page":"RMPI","title":"Rimu.RMPI.MPIOneSided","text":"MPIOneSided(nprocs, myrank, comm, ::Type{T}, capacity)\n\nCommunication buffer for use with MPI one-sided communication (remote memory access). Up to capacity elements of type T can be exchanged between MPI ranks via put. It is important that isbitstype(T) == true. Objects of type MPIOneSided have to be freed manually with a (blocking) call to free().\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIAllToAll","page":"RMPI","title":"Rimu.RMPI.MPIAllToAll","text":" MPIAllToAll\n\nAll-to-all communication strategy. The communication works in two steps: first MPI.Alltoall! is used to communicate the number of walkers each rank wants to send to other ranks, then MPI.Alltoallv! is used to send the walkers around.\n\nConstructor\n\nMPIAllToAll(Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPINoWalkerExchange","page":"RMPI","title":"Rimu.RMPI.MPINoWalkerExchange","text":"MPINoWalkerExchange(nprocs, my_rank, comm)\n\nStrategy for not exchanging walkers between ranks. Consequently there will be no cross-rank annihilations.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#MPI-convenience-functions","page":"RMPI","title":"MPI convenience functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Modules = [Rimu.RMPI]\nPages = [\"helpers.jl\"]\nPrivate = true\nPublic = true","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_root","page":"RMPI","title":"Rimu.RMPI.mpi_root","text":"Default MPI root for RMPI.\n\n\n\n\n\n","category":"constant"},{"location":"RMPI.html#Rimu.DictVectors.mpi_comm-Tuple{}","page":"RMPI","title":"Rimu.DictVectors.mpi_comm","text":"Default MPI communicator for RMPI.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.DictVectors.mpi_rank","page":"RMPI","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.DictVectors.mpi_size","page":"RMPI","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.is_mpi_root","page":"RMPI","title":"Rimu.RMPI.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_allprintln-Tuple","page":"RMPI","title":"Rimu.RMPI.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_barrier","page":"RMPI","title":"Rimu.RMPI.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_combine_walkers!-Tuple{Rimu.RMPI.MPIData, AbstractDVec}","page":"RMPI","title":"Rimu.RMPI.mpi_combine_walkers!","text":"mpi_combine_walkers!(target, source, [strategy])\n\nDistribute the entries of source to the target data structure such that all entries in the target are on the process with the correct mpi rank as controlled by targetrank(). MPI syncronizing.\n\nNote: the storage of the source is communicated rather than the source itself.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_seed!","page":"RMPI","title":"Rimu.RMPI.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.next_mpiID","page":"RMPI","title":"Rimu.RMPI.next_mpiID","text":"next_mpiID()\n\nProduce a new ID number for MPI distributed objects. Uses an internal counter.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.targetrank-Tuple{Union{Integer, AbstractFockAddress}, Any}","page":"RMPI","title":"Rimu.RMPI.targetrank","text":"targetrank(key, np)\n\nCompute the rank where the key belongs.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.@mpi_root-Tuple","page":"RMPI","title":"Rimu.RMPI.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"RMPI.html#Index","page":"RMPI","title":"Index","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Pages   = [\"RMPI.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nnnzs = 0: The number of non-zero elements in the basis set representation. Setting a   non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^6, nnzs, cutoff, filter, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 3 and 9 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int64} with 9 stored entries:\n  0.0  -1.0  -1.0\n -1.0   0.0  -1.0\n -1.0  -1.0   0.0\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 2 and 4 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int64} with 4 stored entries:\n  0.0  -1.0\n -1.0   0.0\n\njulia> using LinearAlgebra; round.(eigvals(Matrix(bsr)); digits = 4) # eigenvalues\n3-element Vector{Float64}:\n -2.0\n  1.0\n  1.0\n\njulia> ev = eigvecs(Matrix(bsr))[:,1]; ev = ev .* sign(ev[1]) # ground state eigenvector\n3-element Vector{Float64}:\n 0.5773502691896257\n 0.5773502691896255\n 0.5773502691896257\n\njulia> dv = DVec(zip(bsr.basis, ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => 0.57735\n  fs\"|0 1 0⟩\" => 0.57735\n  fs\"|1 0 0⟩\" => 0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. A maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nSetting sort to true will sort the basis. Any additional keyword arguments are passed on to Base.sort!.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"randomnumbers.html#Random-numbers-in-Rimu","page":"Random numbers","title":"Random numbers in Rimu","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"Rimu uses Julia's built-in random number generator, which currently defaults to Xoshiro256++.","category":"page"},{"location":"randomnumbers.html#Reproducibility","page":"Random numbers","title":"Reproducibility","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"If you want FCIQMC runs to be reproducible, make sure to seed the RNG with Random.seed!.","category":"page"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"MPI-distributed runs can also be made reproducible by seeding the RNG with Rimu.RMPI.mpi_seed!.","category":"page"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://joachimbrand.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for  parsing by Literate. The process of generating  documentation is automated in the docs/make.jl file and assumes that the following line is  at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example, ","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, value = hopnextneighbour(add, chosen, boundary_condition)\n\nCompute the new address of a hopping event for the Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes multiplied by a term consistent with boundary condition as the value.  The following boundary conditions are supported:\n\n:periodic: hopping over the boundary gives does not change the value.\n:twisted: hopping over the boundary flips the sign of the value.\n:hard_wall: hopping over the boundary gives a value of zero.\nθ <: Number: hopping over the boundary gives a value multiplied by exp(iθ) or exp(iθ) depending on the direction of hopping.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :twisted)\n(BoseFS{2,3}(2, 0, 0), -1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :hard_wall)\n(BoseFS{2,3}(2, 0, 0), 0.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, π/4)\n(BoseFS{2,3}(2, 0, 0), 1.0000000000000002 + 1.0im)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS2C","text":"BoseFS2C{NA,NB,M,AA,AB} <: AbstractFockAddress\nBoseFS2C(onr_a, onr_b)\n\nAddress type that constructed with two BoseFS{N,M,S}. It represents a Fock state with two components, e.g. two different species of bosons with particle number NA from species S and particle number NB from species B. The number of modes M is expected to be the same for both components.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, Tuple{Vararg{Int64, var\"#s61\"}} where var\"#s61\", Tuple{Vararg{Int64, var\"#s5\"}} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.12.1. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(num_replicas=2; operator=nothing, transform=nothing, vecnorm=true) <: ReplicaStrategy{num_replicas}\n\nRun num_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee ProjectorMonteCarloProblem, ReplicaStrategy and AbstractHamiltonian (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to ProjectorMonteCarloProblem then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep time_step constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; target_walkers = 1_000) <: ShiftStrategy\n\nDon't update the shift.  Return when target_walkers is reached.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in ProjectorMonteCarloProblem is advised as the default may not be appropriate.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; target_walkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, time_step) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian, dτ the time_step and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt{S} <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nThis will work with MPIData.\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to ProjectorMonteCarloProblem. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates.\n\nIndexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nSee also ReplicaStrategy, SpectralState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to ProjectorMonteCarloProblem and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_reporting_strategy\nreport!\nreport_after_step!\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to ProjectorMonteCarloProblem or to FCIQMC.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in ProjectorMonteCarloProblem()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, walltime = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the walltime is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with advance!.\n\nSee also SpectralState, SpectralStrategy, ReplicaState, ReplicaStrategy, replica_stats, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several SingleStates representing the ground state and excited states of a single replica.\n\nIndexing the SpectralState state[i] returns the ith SingleState.\n\nSee also SpectralStrategy, ReplicaState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_time_step(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, shift_strategy)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Tuple, Tuple{Vararg{AbstractDVec, N}}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators. This function is overloaded for MPIData. The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main ProjectorMonteCarloProblem loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in solve! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> address = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(address);\n\njulia> df1, state = lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 9)\n\njulia> size(df2)\n(200, 9)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(fs\\\"|1 2 3⟩\\\"; u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; target_walkers=targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.target_walkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from ProjectorMonteCarloProblem, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before ProjectorMonteCarloProblem exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{R}, Tuple{S}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{S, R}, Any, Any}} where {S, R}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 1.6, 1.6, 0.4, 0.4)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an AbstractMatrix of configuration vectors from the state. The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also SingleState, ReplicaState, SpectralState, PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.update_time_step-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_time_step","text":"update_time_step(s<:TimeStepStrategy, time_step, tnorm) -> new_time_step\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#RMPI","page":"API","title":"RMPI","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module RMPI","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by ProjectorMonteCarloProblem when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of ProjectorMonteCarloProblem, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with ProjectorMonteCarloProblem, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI. MPI is a standard for parallel and distributed computing, and it is widely used in high-performance computing. Rimu provides support for MPI to enable parallel computations on multiple nodes.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with 2 MPI ranks with mpirun -n 2 julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu and Rimu.RMPI, which contains MPI-related functionality.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu\nusing Rimu.RMPI","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum, which is located at mode 5 in the momentum grid. We put all 10 particles, all in the zero momentum mode.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(fs\"|0 0 0 0 10 0 0 0 0 0⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for MPI calculations, as they will typically run non-interactively. The reports will be written to disk and can be inspected later. This has the additional benefit of reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The default settings will ensure that only the root MPI rank will write to the file, which is reasonable, and that data is saved in chunks of 1000 time steps. We choose to suppress progress messages with setting io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"For running parallel computations with MPI, it is important that a compatible state vector is used. Here we explicitly set up an MPI-enabled state vector, PDVec, which is automatically MPI-distributed over the available number of MPI ranks. In addition, threading will be used with all threads available to Julia.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10000 walkers and for 10000 time steps. We will also compute the projected energy by passing a ProjectedEnergy object as a post_step_strategy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"problem = ProjectorMonteCarloProblem(H;\n    start_at=initial_vector,\n    reporting_strategy,\n    post_step_strategy=ProjectedEnergy(H, initial_vector),\n    target_walkers=10_000,\n    time_step=1e-4,\n    last_step=10_000\n);","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"simulation = solve(problem);\n\n@mpi_root println(\"Simulation success = \", simulation.success)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Simulation success = true\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Once the calculation is done, the results are available in the arrow file on disk.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In a typical workflow, the simulation results would be loaded from disk and analysed in the REPL or with a separate script. The arrow file can be loaded into a DataFrame with metadata using the load_df function.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. ProjectorMonteCarloProblem, ExactDiagonalizationProblem.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary. Additional MPI-related functionality is provided by the module RMPI.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with ProjectorMonteCarloProblem and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with ProjectorMonteCarloProblem and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and AllToAll when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nSee also PDWorkingMemory.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> scale!(pv, -1); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce!.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded and MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface.jl\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\nIf dv is an MPIData, synchronize its contents among the ranks first.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(md::MPIData)\n\nCompute the walkernumber of the distributed data on every MPI rank with MPI.Allreduce. MPI syncronizing.\n\n\n\n\n\nwalkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.dot_from_right","page":"Dict vectors","title":"Rimu.DictVectors.dot_from_right","text":"dot_from_right(w, op::AbstractHamiltonian, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in ProjectorMonteCarloProblem.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.FirstColumnIterator","page":"Dict vectors","title":"Rimu.DictVectors.FirstColumnIterator","text":"FirstColumnIterator{W,D} <: AbstractVector{D}\n\nIterates segments in the first column of a working memory that belong to a specified rank.\n\nSee PDWorkingMemory, remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured as a two-dimensional array of segments, which themselves are Dicts (see PDVec). The number of rows in this array is equal to the number of segments across all MPI ranks (covering the entire address space), while the number of columns corresponds to the number of segments in the current MPI rank (i.e. column corresponds to the part of the address space that is local to the current rank).\n\nThe purpose of this organisation is to allow spawning in parallel without using locks or atomic operations. The spawning is performed by applying the following sequence of operations:\n\nperform_spawns!: each segment in the PDVec is multiplied by the operator independently, with the results being stored in a column of the working memory.\ncollect_local!: the rows of the working memory are summed to the first column.\nsynchronize_remote!: the segments corresponding to other MPI ranks are distributed and transferred to the first column.\nmove_and_compress!: the results are stochastically compressed and moved to the result PDVec\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports getindex, deposit! and StochasticStyle and acts as a target for spawning. Can be used as a target in a three-way dot-product.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nSum each row in w and store the result in the first column. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.first_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.first_column","text":"first_column(::PDWorkingMemory)\n\nReturn the first column of the working memory. This is where the vectors are collected with collect_local!, synchronize_remote!, copy_to_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the segments in the first column of w on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local MPI rank.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all MPI ranks.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, v::PDVec, ham, boost)\n\nPerform spawns from v through ham to w. boost increases the number of spawns without affecting the expectation value of the process.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the segments in the first column of w that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] w::PDWorkingMemory) -> names, values\n\nSynchronize non-local segments across MPI and add the results to the first column. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nShould return a Tuple of names and a Tuple of values to report.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AllToAll","page":"Dict vectors","title":"Rimu.DictVectors.AllToAll","text":"AllToAll{K,V}(; mpi_comm, n_segments, report) <: Communicator\n\nCommunicator that uses collective communication using MPI.Alltoall[v]!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nn_segments=Threads.nthreads(): the number of segments per rank to use. Should match the PDVec the communicator is used with.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, three implementations are provided, NotDistributed, AllToAll and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\nSee also: PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NestedSegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.NestedSegmentedBuffer","text":"NestedSegmentedBuffer{T}(nrows) <: AbstractMatrix{AbstractVector{T}}\n\nMatrix of vectors stored in a single buffer with collective MPI communication support. The number of rows in the matrix is fixed to nrows.\n\nUsed in the AllToAll communication strategy, where each column corresponds to an MPI rank and each row corresponds to a segment in the PDVec.\n\nSupported operations\n\nappend_collections!: add a column to the matrix.\nappend_empty_column!: add an empty column to the matrix.\nmpi_exchange_alltoall!: each rank sends the i-th column of the matrix to the (i-1)-st rank.\nmpi_exchange_allgather!: each rank sends the 1-st column of the matrix to all ranks.\n\nSee also: SegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint{K,V}(; mpi_comm, report) <: Communicator\n\nMPI Communicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer{T}() <: AbstractVector{AbstractVector{T}}\n\nBehaves like a vector of vectors, but is stored in a single buffer. It can be sent/received over MPI keeping its structure intact. Used in the PointToPoint communication strategy.\n\nSupported operations\n\nreplace_collections!: insert data into the buffers\nmpi_send: send the contents of a buffer to a given rank\nmpi_recv_any!: receive a message sent by mpi_send from any rank, storing the contents in this buffer\n\nSee also: NestedSegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.append_collections!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.append_collections!","text":"append_collections!(buf::NestedSegmentedBuffer, iters)\n\nAdd a column to buf. The length of iters should match buf.nrows.\n\nSee also: NestedSegmentedBuffer, append_empty_column!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.append_empty_column!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer}","page":"Dict vectors","title":"Rimu.DictVectors.append_empty_column!","text":"append_empty_column!(buf::NestedSegmentedBuffer)\n\nLike append_collections!, but adds an empty column.\n\nSee also: NestedSegmentedBuffer, append_collections!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as a (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\nSee also: PDVec, PDWorkingMemory, Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if Communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_comm","page":"Dict vectors","title":"Rimu.DictVectors.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_allgather!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_allgather!","text":"mpi_exchange_allgather!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe first and only column in src will be sent to all ranks. The data from all ranks will be gethered in dst. After this operation, dst will contain the same data on all ranks.\n\nSee also NestedSegmentedBuffer, mpi_exchange_alltoall!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_alltoall!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_alltoall!","text":"mpi_exchange_alltoall!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe n-th column from src will be sent to rank n-1. The data sent from rank r will be stored in the (r+1)-st column of dst.\n\nSee also: NestedSegmentedBuffer, mpi_exchange_allgather!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_rank","page":"Dict vectors","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm::MPI_Comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm::MPI.Comm)\n\nSend the buffer to rank with id dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_size","page":"Dict vectors","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into a SegmentedBuffer.\n\njulia> using Rimu.DictVectors: SegmentedBuffer\n\njulia> buf = SegmentedBuffer{Int}()\n0-element SegmentedBuffer{Int64}\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1,2,3], [4,5]])\n2-element SegmentedBuffer{Int64}:\n [1, 2, 3]\n [4, 5]\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1], [2,3], [4]])\n3-element SegmentedBuffer{Int64}:\n [1]\n [2, 3]\n [4]\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored. If the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"}]
}
