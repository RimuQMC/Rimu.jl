var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Rimu includes an unexported module RMPI, which must be imported to access additional MPI-related functionality.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"using Rimu.RMPI\nmpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"projectormontecarlo.html#Projector-Monte-Carlo-/-FCIQMC","page":"Projector Monte Carlo","title":"Projector Monte Carlo / FCIQMC","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The purpose of Projector Monte Carlo is to stochastically sample the ground state, i.e. the  eigenvector corresponding to the lowest eigenvalue of a quantum Hamiltonian, or more generally,  a very large matrix. Rimu implements a flavor of Projector Monte Carlo called  Full Configuration Interaction Quantum Monte Carlo (FCIQMC).","category":"page"},{"location":"projectormontecarlo.html#ProjectorMonteCarloProblem","page":"Projector Monte Carlo","title":"ProjectorMonteCarloProblem","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"To run a projector Monte Carlo simulation you set up a problem with ProjectorMonteCarloProblem and solve it with solve. Alternatively you can initialize a PMCSimulation struct, step!  through time steps, and solve! it to completion. ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"ProjectorMonteCarloProblem\ninit\nsolve\nsolve!\nstep!","category":"page"},{"location":"projectormontecarlo.html#Rimu.ProjectorMonteCarloProblem-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html#CommonSolve.init-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\ninit(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.step!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"After solve or solve! have been called the returned PMCSimulation contains the results of  the projector Monte Carlo calculation.","category":"page"},{"location":"projectormontecarlo.html#PMCSimulation-and-report-as-a-DataFrame","page":"Projector Monte Carlo","title":"PMCSimulation and report as a DataFrame","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Rimu.PMCSimulation","category":"page"},{"location":"projectormontecarlo.html#Rimu.PMCSimulation-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The DataFrame returned from DataFrame(::PMCSimulation) contains the time series data from  the projector Monte Carlo simulation that is of primary interest for analysis. Depending on the  reporting_strategy and other options passed as keyword arguments to  ProjectorMonteCarloProblem it can have different numbers of rows and columns. The rows  correspond to the reported time steps (Monte Carlo steps). There is at least one column with the name :step. Further columns are usually present with additional data reported from the simulation.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"For the default option algorithm = FCIQMC(; shift_strategy, time_step_strategy) with a single replica (n_replicas = 1) and single spectral state, the fields :shift, :norm, :len will  be present as well as others depending on the style argument and the post_step_strategy.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"If multiple replicas or spectral states are requested, then the relevant field names in the  DataFrame will have a suffix identifying the respective replica simulation, e.g. the shifts will be reported as shift_1, shift_2, ... ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Many tools for analysing the time series data obtained from a  ProjectorMonteCarloProblem are contained in the Module StatsTools.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"n_replicas = 3\nreplica_strategy = AllOverlaps(n_replicas; operator=G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntarget_walkers = 100;\ntime_step = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"problem = ProjectorMonteCarloProblem(H;\n    style=IsDynamicSemistochastic(),\n    time_step,\n    last_step = steps_equilibrate + steps_measure,\n    target_walkers,\n    replica_strategy,\n)\nresult = solve(problem)\ndf = DataFrame(result);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $n_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.21262283575631666 ± 0.0019473974661677323\n   G2(1) = 0.9179427532846665 ± 0.0008248899852068555\n   G2(2) = 0.9812000130954271 ± 0.000879204775277037\n   G2(3) = 0.9890916314834953 ± 0.0009361139962268391\n   G2(4) = 0.9812000130954271 ± 0.000879204775277037\n   G2(5) = 0.9179427532846665 ± 0.0008248899852068555\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $n_replicas replicas:\")\nfor i in 1:n_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -3.992191214203264 ± 0.14322425022140609\n   Replica 2: -4.012805801055901 ± 0.14238160029050972\n   Replica 3: -4.046941614824554 ± 0.12205272750315765\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"target_walkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    target_walkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [target_walkers];\n    label=\"target_walkers\", xlabel=\"step\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.step, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip250\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip250)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip251\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip250)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip252\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip252)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip252)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip252)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip252)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip252)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1261.86 2211.02,1261.86 \"/>\n<polyline clip-path=\"url(#clip252)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1004.32 2211.02,1004.32 \"/>\n<polyline clip-path=\"url(#clip252)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,746.771 2211.02,746.771 \"/>\n<polyline clip-path=\"url(#clip252)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,489.226 2211.02,489.226 \"/>\n<polyline clip-path=\"url(#clip252)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,231.682 2211.02,231.682 \"/>\n<polyline clip-path=\"url(#clip250)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip250)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip250)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip250)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip250)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip250)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M1266.04 1391.71 L1266.04 1397.25 Q1263.56 1395.98 1260.88 1395.34 Q1258.21 1394.71 1255.34 1394.71 Q1250.98 1394.71 1248.79 1396.04 Q1246.62 1397.38 1246.62 1400.05 Q1246.62 1402.09 1248.18 1403.27 Q1249.74 1404.41 1254.45 1405.46 L1256.46 1405.91 Q1262.7 1407.25 1265.31 1409.7 Q1267.95 1412.12 1267.95 1416.48 Q1267.95 1421.44 1264 1424.34 Q1260.09 1427.23 1253.21 1427.23 Q1250.35 1427.23 1247.23 1426.66 Q1244.14 1426.12 1240.7 1425.01 L1240.7 1418.96 Q1243.95 1420.65 1247.1 1421.51 Q1250.25 1422.33 1253.34 1422.33 Q1257.48 1422.33 1259.7 1420.93 Q1261.93 1419.5 1261.93 1416.92 Q1261.93 1414.54 1260.31 1413.26 Q1258.72 1411.99 1253.27 1410.81 L1251.24 1410.33 Q1245.79 1409.19 1243.38 1406.83 Q1240.96 1404.45 1240.96 1400.31 Q1240.96 1395.28 1244.52 1392.54 Q1248.09 1389.8 1254.64 1389.8 Q1257.89 1389.8 1260.75 1390.28 Q1263.62 1390.76 1266.04 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M1283.07 1380.54 L1283.07 1390.66 L1295.13 1390.66 L1295.13 1395.22 L1283.07 1395.22 L1283.07 1414.57 Q1283.07 1418.93 1284.24 1420.17 Q1285.45 1421.41 1289.11 1421.41 L1295.13 1421.41 L1295.13 1426.31 L1289.11 1426.31 Q1282.33 1426.31 1279.76 1423.8 Q1277.18 1421.25 1277.18 1414.57 L1277.18 1395.22 L1272.88 1395.22 L1272.88 1390.66 L1277.18 1390.66 L1277.18 1380.54 L1283.07 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M1333.32 1407.02 L1333.32 1409.89 L1306.4 1409.89 Q1306.78 1415.94 1310.02 1419.12 Q1313.3 1422.27 1319.13 1422.27 Q1322.5 1422.27 1325.65 1421.44 Q1328.84 1420.61 1331.95 1418.96 L1331.95 1424.5 Q1328.8 1425.83 1325.49 1426.53 Q1322.18 1427.23 1318.78 1427.23 Q1310.25 1427.23 1305.25 1422.27 Q1300.29 1417.3 1300.29 1408.84 Q1300.29 1400.08 1305 1394.96 Q1309.74 1389.8 1317.76 1389.8 Q1324.95 1389.8 1329.12 1394.45 Q1333.32 1399.07 1333.32 1407.02 M1327.47 1405.3 Q1327.4 1400.5 1324.76 1397.63 Q1322.15 1394.77 1317.82 1394.77 Q1312.92 1394.77 1309.96 1397.54 Q1307.03 1400.31 1306.59 1405.34 L1327.47 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M1348.6 1420.96 L1348.6 1439.87 L1342.71 1439.87 L1342.71 1390.66 L1348.6 1390.66 L1348.6 1396.07 Q1350.45 1392.89 1353.25 1391.36 Q1356.08 1389.8 1360 1389.8 Q1366.49 1389.8 1370.53 1394.96 Q1374.6 1400.12 1374.6 1408.52 Q1374.6 1416.92 1370.53 1422.08 Q1366.49 1427.23 1360 1427.23 Q1356.08 1427.23 1353.25 1425.71 Q1350.45 1424.15 1348.6 1420.96 M1368.53 1408.52 Q1368.53 1402.06 1365.85 1398.4 Q1363.21 1394.71 1358.56 1394.71 Q1353.92 1394.71 1351.24 1398.4 Q1348.6 1402.06 1348.6 1408.52 Q1348.6 1414.98 1351.24 1418.67 Q1353.92 1422.33 1358.56 1422.33 Q1363.21 1422.33 1365.85 1418.67 Q1368.53 1414.98 1368.53 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip250)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip250)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1261.86 423.181,1261.86 \"/>\n<polyline clip-path=\"url(#clip250)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1004.32 423.181,1004.32 \"/>\n<polyline clip-path=\"url(#clip250)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,746.771 423.181,746.771 \"/>\n<polyline clip-path=\"url(#clip250)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,489.226 423.181,489.226 \"/>\n<polyline clip-path=\"url(#clip250)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,231.682 423.181,231.682 \"/>\n<path clip-path=\"url(#clip250)\" d=\"M356.339 1247.66 Q352.728 1247.66 350.899 1251.22 Q349.094 1254.77 349.094 1261.9 Q349.094 1269 350.899 1272.57 Q352.728 1276.11 356.339 1276.11 Q359.973 1276.11 361.779 1272.57 Q363.608 1269 363.608 1261.9 Q363.608 1254.77 361.779 1251.22 Q359.973 1247.66 356.339 1247.66 M356.339 1243.96 Q362.149 1243.96 365.205 1248.56 Q368.284 1253.15 368.284 1261.9 Q368.284 1270.62 365.205 1275.23 Q362.149 1279.81 356.339 1279.81 Q350.529 1279.81 347.45 1275.23 Q344.395 1270.62 344.395 1261.9 Q344.395 1253.15 347.45 1248.56 Q350.529 1243.96 356.339 1243.96 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M290.043 1017.66 L306.363 1017.66 L306.363 1021.6 L284.418 1021.6 L284.418 1017.66 Q287.08 1014.91 291.664 1010.28 Q296.27 1005.62 297.451 1004.28 Q299.696 1001.76 300.576 1000.02 Q301.478 998.263 301.478 996.573 Q301.478 993.818 299.534 992.082 Q297.613 990.346 294.511 990.346 Q292.312 990.346 289.858 991.11 Q287.427 991.874 284.65 993.425 L284.65 988.702 Q287.474 987.568 289.927 986.989 Q292.381 986.411 294.418 986.411 Q299.789 986.411 302.983 989.096 Q306.177 991.781 306.177 996.272 Q306.177 998.401 305.367 1000.32 Q304.58 1002.22 302.474 1004.81 Q301.895 1005.48 298.793 1008.7 Q295.691 1011.9 290.043 1017.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M316.224 987.036 L334.58 987.036 L334.58 990.971 L320.506 990.971 L320.506 999.443 Q321.524 999.096 322.543 998.934 Q323.562 998.749 324.58 998.749 Q330.367 998.749 333.747 1001.92 Q337.126 1005.09 337.126 1010.51 Q337.126 1016.09 333.654 1019.19 Q330.182 1022.27 323.862 1022.27 Q321.687 1022.27 319.418 1021.9 Q317.173 1021.53 314.765 1020.79 L314.765 1016.09 Q316.849 1017.22 319.071 1017.78 Q321.293 1018.33 323.77 1018.33 Q327.774 1018.33 330.112 1016.23 Q332.45 1014.12 332.45 1010.51 Q332.45 1006.9 330.112 1004.79 Q327.774 1002.68 323.77 1002.68 Q321.895 1002.68 320.02 1003.1 Q318.168 1003.52 316.224 1004.4 L316.224 987.036 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M356.339 990.114 Q352.728 990.114 350.899 993.679 Q349.094 997.221 349.094 1004.35 Q349.094 1011.46 350.899 1015.02 Q352.728 1018.56 356.339 1018.56 Q359.973 1018.56 361.779 1015.02 Q363.608 1011.46 363.608 1004.35 Q363.608 997.221 361.779 993.679 Q359.973 990.114 356.339 990.114 M356.339 986.411 Q362.149 986.411 365.205 991.017 Q368.284 995.601 368.284 1004.35 Q368.284 1013.08 365.205 1017.68 Q362.149 1022.27 356.339 1022.27 Q350.529 1022.27 347.45 1017.68 Q344.395 1013.08 344.395 1004.35 Q344.395 995.601 347.45 991.017 Q350.529 986.411 356.339 986.411 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M286.062 729.491 L304.418 729.491 L304.418 733.426 L290.344 733.426 L290.344 741.898 Q291.363 741.551 292.381 741.389 Q293.4 741.204 294.418 741.204 Q300.205 741.204 303.585 744.375 Q306.964 747.546 306.964 752.963 Q306.964 758.542 303.492 761.644 Q300.02 764.722 293.701 764.722 Q291.525 764.722 289.256 764.352 Q287.011 763.982 284.603 763.241 L284.603 758.542 Q286.687 759.676 288.909 760.232 Q291.131 760.787 293.608 760.787 Q297.613 760.787 299.951 758.681 Q302.288 756.574 302.288 752.963 Q302.288 749.352 299.951 747.246 Q297.613 745.139 293.608 745.139 Q291.733 745.139 289.858 745.556 Q288.006 745.972 286.062 746.852 L286.062 729.491 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M326.177 732.57 Q322.566 732.57 320.737 736.135 Q318.932 739.676 318.932 746.806 Q318.932 753.912 320.737 757.477 Q322.566 761.019 326.177 761.019 Q329.811 761.019 331.617 757.477 Q333.446 753.912 333.446 746.806 Q333.446 739.676 331.617 736.135 Q329.811 732.57 326.177 732.57 M326.177 728.866 Q331.987 728.866 335.043 733.472 Q338.122 738.056 338.122 746.806 Q338.122 755.533 335.043 760.139 Q331.987 764.722 326.177 764.722 Q320.367 764.722 317.288 760.139 Q314.233 755.533 314.233 746.806 Q314.233 738.056 317.288 733.472 Q320.367 728.866 326.177 728.866 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M356.339 732.57 Q352.728 732.57 350.899 736.135 Q349.094 739.676 349.094 746.806 Q349.094 753.912 350.899 757.477 Q352.728 761.019 356.339 761.019 Q359.973 761.019 361.779 757.477 Q363.608 753.912 363.608 746.806 Q363.608 739.676 361.779 736.135 Q359.973 732.57 356.339 732.57 M356.339 728.866 Q362.149 728.866 365.205 733.472 Q368.284 738.056 368.284 746.806 Q368.284 755.533 365.205 760.139 Q362.149 764.722 356.339 764.722 Q350.529 764.722 347.45 760.139 Q344.395 755.533 344.395 746.806 Q344.395 738.056 347.45 733.472 Q350.529 728.866 356.339 728.866 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M284.835 471.946 L307.057 471.946 L307.057 473.937 L294.511 506.506 L289.627 506.506 L301.432 475.881 L284.835 475.881 L284.835 471.946 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M316.224 471.946 L334.58 471.946 L334.58 475.881 L320.506 475.881 L320.506 484.354 Q321.524 484.006 322.543 483.844 Q323.562 483.659 324.58 483.659 Q330.367 483.659 333.747 486.83 Q337.126 490.002 337.126 495.418 Q337.126 500.997 333.654 504.099 Q330.182 507.178 323.862 507.178 Q321.687 507.178 319.418 506.807 Q317.173 506.437 314.765 505.696 L314.765 500.997 Q316.849 502.131 319.071 502.687 Q321.293 503.242 323.77 503.242 Q327.774 503.242 330.112 501.136 Q332.45 499.029 332.45 495.418 Q332.45 491.807 330.112 489.701 Q327.774 487.594 323.77 487.594 Q321.895 487.594 320.02 488.011 Q318.168 488.428 316.224 489.307 L316.224 471.946 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M356.339 475.025 Q352.728 475.025 350.899 478.59 Q349.094 482.131 349.094 489.261 Q349.094 496.367 350.899 499.932 Q352.728 503.474 356.339 503.474 Q359.973 503.474 361.779 499.932 Q363.608 496.367 363.608 489.261 Q363.608 482.131 361.779 478.59 Q359.973 475.025 356.339 475.025 M356.339 471.321 Q362.149 471.321 365.205 475.928 Q368.284 480.511 368.284 489.261 Q368.284 497.988 365.205 502.594 Q362.149 507.178 356.339 507.178 Q350.529 507.178 347.45 502.594 Q344.395 497.988 344.395 489.261 Q344.395 480.511 347.45 475.928 Q350.529 471.321 356.339 471.321 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M256.664 245.026 L264.303 245.026 L264.303 218.661 L255.992 220.327 L255.992 216.068 L264.256 214.402 L268.932 214.402 L268.932 245.026 L276.571 245.026 L276.571 248.962 L256.664 248.962 L256.664 245.026 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M296.015 217.48 Q292.404 217.48 290.576 221.045 Q288.77 224.587 288.77 231.716 Q288.77 238.823 290.576 242.387 Q292.404 245.929 296.015 245.929 Q299.65 245.929 301.455 242.387 Q303.284 238.823 303.284 231.716 Q303.284 224.587 301.455 221.045 Q299.65 217.48 296.015 217.48 M296.015 213.777 Q301.826 213.777 304.881 218.383 Q307.96 222.966 307.96 231.716 Q307.96 240.443 304.881 245.049 Q301.826 249.633 296.015 249.633 Q290.205 249.633 287.127 245.049 Q284.071 240.443 284.071 231.716 Q284.071 222.966 287.127 218.383 Q290.205 213.777 296.015 213.777 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M326.177 217.48 Q322.566 217.48 320.737 221.045 Q318.932 224.587 318.932 231.716 Q318.932 238.823 320.737 242.387 Q322.566 245.929 326.177 245.929 Q329.811 245.929 331.617 242.387 Q333.446 238.823 333.446 231.716 Q333.446 224.587 331.617 221.045 Q329.811 217.48 326.177 217.48 M326.177 213.777 Q331.987 213.777 335.043 218.383 Q338.122 222.966 338.122 231.716 Q338.122 240.443 335.043 245.049 Q331.987 249.633 326.177 249.633 Q320.367 249.633 317.288 245.049 Q314.233 240.443 314.233 231.716 Q314.233 222.966 317.288 218.383 Q320.367 213.777 326.177 213.777 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M356.339 217.48 Q352.728 217.48 350.899 221.045 Q349.094 224.587 349.094 231.716 Q349.094 238.823 350.899 242.387 Q352.728 245.929 356.339 245.929 Q359.973 245.929 361.779 242.387 Q363.608 238.823 363.608 231.716 Q363.608 224.587 361.779 221.045 Q359.973 217.48 356.339 217.48 M356.339 213.777 Q362.149 213.777 365.205 218.383 Q368.284 222.966 368.284 231.716 Q368.284 240.443 365.205 245.049 Q362.149 249.633 356.339 249.633 Q350.529 249.633 347.45 245.049 Q344.395 240.443 344.395 231.716 Q344.395 222.966 347.45 218.383 Q350.529 213.777 356.339 213.777 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip252)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,231.682 4017.76,231.682 \"/>\n<polyline clip-path=\"url(#clip252)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1250.5 456.554,1250.44 457.123,1248.23 457.691,1248.15 458.259,1247.91 458.828,1247.67 459.396,1246.31 459.964,1245.97 460.533,1245.45 461.101,1244.91 461.669,1244.34 462.238,1243.57 462.806,1242.77 463.375,1241.84 463.943,1240.83 464.511,1239.75 465.08,1237.52 465.648,1235.19 466.216,1233.84 466.785,1232.35 467.353,1229.72 467.921,1228 468.49,1225.1 469.058,1223.1 469.626,1220.91 470.195,1218.58 470.763,1216.13 471.331,1213.47 471.9,1209.64 472.468,1206.71 473.036,1203.56 473.605,1200.19 474.173,1196.64 474.741,1191.89 475.31,1187.96 475.878,1183.82 476.446,1179.39 477.015,1172.75 477.583,1167.89 478.152,1160.73 478.72,1155.52 479.288,1150.11 479.857,1144.45 480.425,1137.5 480.993,1130.32 481.562,1123.06 482.13,1116.54 482.698,1109.73 483.267,1101.76 483.835,1094.58 484.403,1087.27 484.972,1077.64 485.54,1069.73 486.108,1060.65 486.677,1052.28 487.245,1043.74 487.813,1032.93 488.382,1021.83 488.95,1012.81 489.518,1003.6 490.087,992.163 490.655,981.759 491.224,971.151 491.792,960.565 492.36,948.802 492.929,936.968 493.497,926.202 494.065,916.32 494.634,904.402 495.202,891.496 495.77,880.681 496.339,867.703 496.907,855.834 497.475,844.066 498.044,832.279 498.612,821.646 499.18,810.086 499.749,800.524 500.317,790.12 500.885,779.585 501.454,767.109 502.022,754.719 502.59,745.565 503.159,734.423 503.727,725.405 504.295,714.482 504.864,705.655 505.432,696.865 506.001,686.036 506.569,675.203 507.137,664.531 507.706,655.252 508.274,645.936 508.842,635.663 509.411,626.675 509.979,614.617 510.547,604.838 511.116,594.168 511.684,586.061 512.252,578.883 512.821,569.734 513.389,561.876 513.957,553.11 514.526,544.519 515.094,538.183 515.662,530.068 516.231,523.274 516.799,512.319 517.367,504.657 517.936,498.21 518.504,493.049 519.072,487.779 519.641,482.54 520.209,476.459 520.778,469.37 521.346,463.587 521.914,457.928 522.483,453.233 523.051,446.684 523.619,441.283 524.188,436.197 524.756,431 525.324,423.947 525.893,419.304 526.461,414.677 527.029,409.926 527.598,407.594 528.166,403.052 528.734,399.704 529.303,396.214 529.871,392.711 530.439,389.309 531.008,385.06 531.576,380.832 532.144,376.752 532.713,374.91 533.281,370.013 533.85,366.116 534.418,361.339 534.986,357.753 535.555,353.421 536.123,351.243 536.691,347.024 537.26,345.069 537.828,341.027 538.396,341.187 538.965,337.033 539.533,333.358 540.101,329.546 540.67,324.939 541.238,322.497 541.806,320.262 542.375,319.103 542.943,317.85 543.511,317.608 544.08,313.279 544.648,308.093 545.216,306.309 545.785,305.766 546.353,302.712 546.921,297.762 547.49,296.416 548.058,296.198 548.627,295.839 549.195,297.403 549.763,296.784 550.332,296.059 550.9,294.412 551.468,293.667 552.037,292.831 552.605,290.136 553.173,289.682 553.742,290.277 554.31,288.585 554.878,287.738 555.447,286.481 556.015,285.828 556.583,282.11 557.152,281.601 557.72,280.121 558.288,280.813 558.857,282.201 559.425,283.648 559.993,282.853 560.562,280.938 561.13,278.291 561.698,276.611 562.267,278.277 562.835,279.657 563.404,274.774 563.972,274.126 564.54,274.673 565.109,273.912 565.677,272.224 566.245,270.697 566.814,270.27 567.382,269.836 567.95,268.323 568.519,265.921 569.087,265.866 569.655,265.394 570.224,263.934 570.792,265.677 571.36,265.149 571.929,263.72 572.497,261.207 573.065,260.048 573.634,260.055 574.202,257.863 574.77,255.879 575.339,256.046 575.907,256.101 576.476,256.155 577.044,255.932 577.612,251.977 578.181,252.334 578.749,252.384 579.317,253.719 579.886,250.709 580.454,249.926 581.022,250.239 581.591,249.445 582.159,249.801 582.727,252.369 583.296,250.401 583.864,253.739 584.432,254.848 585.001,253.674 585.569,254.429 586.137,254.183 586.706,253.079 587.274,256.054 587.842,254.452 588.411,251.998 588.979,251.927 589.547,250.697 590.116,248.552 590.684,248.794 591.253,248.8 591.821,249.002 592.389,246.87 592.958,247.198 593.526,247.362 594.094,243.243 594.663,242.419 595.231,239.771 595.799,242.372 596.368,242.655 596.936,242.015 597.504,243.468 598.073,241.877 598.641,242.307 599.209,244.817 599.778,242.054 600.346,243.24 600.914,242.233 601.483,243.643 602.051,243.753 602.619,245.069 603.188,242.118 603.756,241.41 604.325,241.46 604.893,244.016 605.461,241.987 606.03,241.237 606.598,240.536 607.166,239.872 607.735,241.322 608.303,238.634 608.871,237.966 609.44,236.375 610.008,236.878 610.576,235.608 611.145,234.171 611.713,234.823 612.281,234.517 612.85,239.58 613.418,238.598 613.986,238.257 614.555,238.84 615.123,237.239 615.691,238.635 616.26,242.184 616.828,241.024 617.396,244.335 617.965,244.276 618.533,244.073 619.102,245.231 619.67,243.198 620.238,243.389 620.807,242.168 621.375,241.209 621.943,241.31 622.512,241.302 623.08,242.516 623.648,242.649 624.217,242.595 624.785,243.804 625.353,243.865 625.922,243.708 626.49,241.609 627.058,242.746 627.627,238.539 628.195,237.561 628.763,236.846 629.332,235.148 629.9,235.663 630.468,235.888 631.037,236.676 631.605,239.023 632.173,241.355 632.742,240.333 633.31,239.437 633.879,237.539 634.447,240.818 635.015,240.749 635.584,241.817 636.152,242.869 636.72,243.82 637.289,245.608 637.857,245.114 638.425,246.81 638.994,248.507 639.562,247.807 640.13,245.321 640.699,247.162 641.267,246.699 641.835,250.343 642.404,249.543 642.972,248.799 643.54,248.005 644.109,247.253 644.677,247.484 645.245,246.722 645.814,243.965 646.382,243.572 646.951,245.116 647.519,242.421 648.087,238.887 648.656,237.78 649.224,236.661 649.792,235.731 650.361,234.923 650.929,235.165 651.497,234.138 652.066,234.341 652.634,233.546 653.202,233.738 653.771,234.747 654.339,236.04 654.907,236.181 655.476,234.249 656.044,235.689 656.612,232.503 657.181,229.798 657.749,230.341 658.317,230.954 658.886,229.457 659.454,229.868 660.022,230.428 660.591,230.769 661.159,232.16 661.728,232.455 662.296,232.649 662.864,233.187 663.433,231.356 664.001,231.964 664.569,232.196 665.138,232.616 665.706,233.018 666.274,235.188 666.843,233.35 667.411,233.404 667.979,234.664 668.548,236.057 669.116,236.135 669.684,235.352 670.253,235.375 670.821,233.591 671.389,232.006 671.958,231.417 672.526,231.672 673.094,233.257 673.663,232.381 674.231,233.892 674.799,233.248 675.368,233.502 675.936,233.676 676.505,233.051 677.073,231.304 677.641,232.137 678.21,230.502 678.778,232.067 679.346,232.314 679.915,230.677 680.483,230.011 681.051,229.565 681.62,232.137 682.188,233.586 682.756,231.81 683.325,233.307 683.893,232.622 684.461,231.043 685.03,232.599 685.598,234.023 686.166,231.146 686.735,231.976 687.303,231.394 687.871,231.72 688.44,234.357 689.008,234.687 689.577,233.813 690.145,233.104 690.713,232.421 691.282,234.723 691.85,233.723 692.418,232.929 692.987,233.317 693.555,232.812 694.123,233.292 694.692,233.047 695.26,235.636 695.828,234.741 696.397,234.002 696.965,234.302 697.533,235.483 698.102,233.698 698.67,233.925 699.238,235.315 699.807,234.41 700.375,233.657 700.943,232.803 701.512,235.161 702.08,235.26 702.648,236.467 703.217,236.541 703.785,236.657 704.354,237.804 704.922,241.158 705.49,240.781 706.059,242.66 706.627,242.436 707.195,245.306 707.764,245.596 708.332,245.076 708.9,244.616 709.469,244.873 710.037,243.19 710.605,241.787 711.174,242.153 711.742,241.716 712.31,242.375 712.879,241.769 713.447,241.25 714.015,240.813 714.584,240.434 715.152,241.273 715.72,240.79 716.289,240.229 716.857,238.929 717.425,239.708 717.994,237.206 718.562,237.014 719.131,235.813 719.699,235.824 720.267,237.951 720.836,239.715 721.404,238.411 721.972,238.097 722.541,236.821 723.109,235.637 723.677,234.398 724.246,234.044 724.814,233.871 725.382,234.85 725.951,234.764 726.519,234.571 727.087,233.691 727.656,235.732 728.224,235.537 728.792,235.483 729.361,237.324 729.929,237.183 730.497,238.067 731.066,238.836 731.634,237.213 732.203,236.651 732.771,236.543 733.339,236.265 733.908,236.209 734.476,234.995 735.044,234.91 735.613,234.77 736.181,233.691 736.749,232.438 737.318,233.471 737.886,230.573 738.454,232.562 739.023,231.454 739.591,232.464 740.159,232.518 740.728,234.686 741.296,234.448 741.864,235.397 742.433,235.085 743.001,234.798 743.569,233.534 744.138,234.439 744.706,235.074 745.274,235.855 745.843,234.724 746.411,235.491 746.98,237.378 747.548,236.023 748.116,236.747 748.685,236.669 749.253,236.388 749.821,235.048 750.39,235.948 750.958,233.632 751.526,233.4 752.095,232.244 752.663,232.286 753.231,233.324 753.8,233.107 754.368,234.057 754.936,229.718 755.505,230.852 756.073,231.107 756.641,234.175 757.21,236.107 757.778,235.981 758.346,235.742 758.915,234.33 759.483,231.083 760.052,231.169 760.62,230.378 761.188,228.387 761.757,228.449 762.325,228.816 762.893,227.031 763.462,228.537 764.03,230.9 764.598,231.015 765.167,231.304 765.735,231.369 766.303,230.183 766.872,230.43 767.44,228.608 768.008,227.737 768.577,228.081 769.145,228.533 769.713,227.763 770.282,228.187 770.85,226.336 771.418,227.785 771.987,230.144 772.555,232.645 773.123,230.429 773.692,228.604 774.26,230.041 774.829,231.211 775.397,232.613 775.965,231.656 776.534,232.004 777.102,232.046 777.67,232.177 778.239,232.301 778.807,231.647 779.375,231.765 779.944,231.885 780.512,231.096 781.08,231.166 781.649,230.47 782.217,232.615 782.785,231.925 783.354,231.931 783.922,234.097 784.49,234.1 785.059,231.078 785.627,231.272 786.195,231.529 786.764,231.491 787.332,232.729 787.9,232.71 788.469,233.869 789.037,232.646 789.606,233.78 790.174,232.571 790.742,232.785 791.311,232.796 791.879,233.67 792.447,233.517 793.016,232.46 793.584,231.621 794.152,231.686 794.721,228.586 795.289,228.034 795.857,228.367 796.426,228.828 796.994,226.137 797.562,226.474 798.131,226.759 798.699,229.443 799.267,229.62 799.836,229.779 800.404,228.962 800.972,229.266 801.541,229.856 802.109,232.234 802.678,231.61 803.246,231.662 803.814,232.85 804.383,232.071 804.951,232.973 805.519,231.119 806.088,233.53 806.656,232.691 807.224,232.631 807.793,234.759 808.361,234.777 808.929,235.839 809.498,235.573 810.066,235.49 810.634,233.302 811.203,234.45 811.771,235.562 812.339,235.113 812.908,234.935 813.476,234.791 814.044,233.654 814.613,233.523 815.181,234.526 815.749,235.494 816.318,237.369 816.886,234.971 817.455,234.962 818.023,231.588 818.591,229.462 819.16,229.78 819.728,230.077 820.296,231.545 820.865,233.53 821.433,232.638 822.001,232.635 822.57,232.543 823.138,230.566 823.706,229.706 824.275,229.01 824.843,229.313 825.411,229.567 825.98,229.804 826.548,233.229 827.116,232.345 827.685,229.51 828.253,233.997 828.821,235.124 829.39,234.964 829.958,233.82 830.526,231.626 831.095,231.803 831.663,230.734 832.232,230.905 832.8,231.196 833.368,230.13 833.937,230.343 834.505,231.55 835.073,231.595 835.642,231.796 836.21,231.624 836.778,231.678 837.347,231.716 837.915,229.662 838.483,228.601 839.052,229.759 839.62,229.989 840.188,230.222 840.757,232.324 841.325,234.576 841.893,236.344 842.462,235.191 843.03,234.977 843.598,234.062 844.167,232.845 844.735,231.821 845.304,232.074 845.872,232.084 846.44,232.443 847.009,232.575 847.577,233.476 848.145,234.524 848.714,237.523 849.282,237.162 849.85,236.678 850.419,237.246 850.987,234.756 851.555,232.539 852.124,231.495 852.692,231.689 853.26,232.909 853.829,232.988 854.397,232.86 854.965,232.962 855.534,230.912 856.102,230.922 856.67,229.958 857.239,229.156 857.807,228.295 858.375,227.702 858.944,228.039 859.512,227.287 860.081,225.795 860.649,227.533 861.217,226.917 861.786,228.569 862.354,227.925 862.922,229.47 863.491,227.748 864.059,227.25 864.627,225.588 865.196,227.27 865.764,228.965 866.332,229.464 866.901,228.826 867.469,230.535 868.037,234.133 868.606,234.055 869.174,236.28 869.742,236.31 870.311,234.178 870.879,235.076 871.447,237.022 872.016,237.002 872.584,233.736 873.152,230.874 873.721,230.932 874.289,228.975 874.858,229.237 875.426,228.489 875.994,228.787 876.563,229.047 877.131,230.566 877.699,229.853 878.268,228.199 878.836,228.618 879.404,229.836 879.973,228.258 880.541,228.589 881.109,230.007 881.678,229.424 882.246,228.772 882.814,227.199 883.383,228.744 883.951,232.249 884.519,233.525 885.088,235.805 885.656,234.431 886.224,235.429 886.793,234.352 887.361,234.413 887.93,233.391 888.498,232.639 889.066,232.688 889.635,234.055 890.203,234.005 890.771,234.029 891.34,233.074 891.908,234.153 892.476,234.203 893.045,234.232 893.613,234.088 894.181,236.143 894.75,233.791 895.318,234.683 895.886,234.615 896.455,234.766 897.023,235.666 897.591,234.362 898.16,236.426 898.728,237.231 899.296,237.907 899.865,235.606 900.433,238.666 901.001,238.307 901.57,236.127 902.138,235.841 902.707,234.682 903.275,233.543 903.843,234.457 904.412,233.18 904.98,234.137 905.548,235.248 906.117,236.172 906.685,236.071 907.253,236.745 907.822,236.544 908.39,235.114 908.958,234.896 909.527,233.662 910.095,233.626 910.663,234.516 911.232,235.456 911.8,238.124 912.368,237.73 912.937,237.45 913.505,238.139 914.073,234.545 914.642,235.44 915.21,234.202 915.779,232.082 916.347,232.053 916.915,231.291 917.484,230.499 918.052,230.533 918.62,230.769 919.189,231.889 919.757,233.076 920.325,237.237 920.894,236.083 921.462,236.801 922.03,236.346 922.599,236.112 923.167,236.758 923.735,235.532 924.304,235.3 924.872,235.028 925.44,235.711 926.009,234.533 926.577,234.462 927.145,232.289 927.714,232.128 928.282,230.002 928.85,230.219 929.419,228.217 929.987,229.389 930.556,229.258 931.124,233.84 931.692,233.431 932.261,233.115 932.829,232.95 933.397,231.705 933.966,231.42 934.534,230.669 935.102,230.901 935.671,229.676 936.239,229.717 936.807,231.08 937.376,228.082 937.944,228.292 938.512,227.482 939.081,228.781 939.649,229.966 940.217,230.913 940.786,228.962 941.354,234.358 941.922,234.357 942.491,234.273 943.059,232.098 943.627,231.184 944.196,229.284 944.764,230.242 945.333,230.533 945.901,230.527 946.469,230.905 947.038,233.124 947.606,232.141 948.174,231.056 948.743,232.12 949.311,232.026 949.879,231.948 950.448,229.941 951.016,230.387 951.584,231.524 952.153,231.445 952.721,233.429 953.289,232.231 953.858,232.072 954.426,232.028 954.994,230.92 955.563,233.078 956.131,236.111 956.699,237.989 957.268,239.695 957.836,240.097 958.405,239.559 958.973,236.168 959.541,237.032 960.11,235.656 960.678,236.143 961.246,234.837 961.815,234.672 962.383,233.521 962.951,233.524 963.52,232.494 964.088,232.424 964.656,233.339 965.225,232.009 965.793,234.052 966.361,233.733 966.93,233.255 967.498,232.069 968.066,232.861 968.635,231.538 969.203,230.459 969.771,231.269 970.34,230.224 970.908,231.385 971.476,229.397 972.045,229.473 972.613,229.688 973.182,228.731 973.75,227.866 974.318,226.909 974.887,227.142 975.455,226.603 976.023,226.839 976.592,227.178 977.16,227.295 977.728,226.587 978.297,228.096 978.865,229.249 979.433,228.37 980.002,229.479 980.57,229.724 981.138,228.94 981.707,229.184 982.275,228.444 982.843,226.809 983.412,227.298 983.98,227.43 984.548,230.909 985.117,228.733 985.685,228.132 986.253,227.402 986.822,228.947 987.39,229.084 987.959,229.277 988.527,228.513 989.095,230.698 989.664,230.648 990.232,227.77 990.8,224.121 991.369,226.662 991.937,228.194 992.505,226.854 993.074,225.281 993.642,225.618 994.21,229.204 994.779,231.636 995.347,232.664 995.915,231.638 996.484,232.829 997.052,236.07 997.62,235.992 998.189,235.854 998.757,234.742 999.325,235.684 999.894,236.532 1000.46,236.142 1001.03,236.874 1001.6,235.484 1002.17,236.082 1002.74,236.935 1003.3,235.645 1003.87,237.728 1004.44,239.494 1005.01,238.871 1005.58,236.476 1006.15,237.129 1006.71,237.987 1007.28,239.613 1007.85,239.39 1008.42,239.777 1008.99,239.063 1009.56,236.417 1010.12,235.042 1010.69,234.818 1011.26,233.638 1011.83,233.549 1012.4,234.561 1012.97,235.296 1013.53,235.027 1014.1,233.741 1014.67,233.642 1015.24,234.236 1015.81,233.989 1016.38,233.534 1016.94,233.335 1017.51,234.193 1018.08,233.931 1018.65,230.671 1019.22,228.546 1019.79,231.647 1020.35,230.548 1020.92,231.621 1021.49,231.721 1022.06,233.002 1022.63,231.931 1023.2,232.721 1023.76,232.751 1024.33,233.687 1024.9,234.589 1025.47,233.294 1026.04,232.874 1026.61,231.785 1027.17,232.751 1027.74,232.58 1028.31,231.296 1028.88,231.436 1029.45,232.349 1030.02,236.254 1030.58,234.646 1031.15,233.327 1031.72,234.907 1032.29,233.529 1032.86,233.377 1033.43,231.255 1033.99,232.163 1034.56,232.768 1035.13,232.766 1035.7,232.638 1036.27,231.557 1036.84,233.678 1037.4,235.545 1037.97,234.997 1038.54,230.732 1039.11,232.732 1039.68,232.594 1040.25,233.245 1040.81,232.848 1041.38,233.5 1041.95,232.142 1042.52,230.002 1043.09,232.094 1043.66,232.036 1044.22,231.037 1044.79,230.998 1045.36,229.636 1045.93,230.613 1046.5,229.573 1047.07,227.421 1047.63,227.671 1048.2,227.904 1048.77,226.996 1049.34,227.423 1049.91,226.53 1050.48,228.622 1051.05,228.72 1051.61,228.75 1052.18,228.756 1052.75,228.966 1053.32,227.99 1053.89,229.153 1054.46,228.181 1055.02,226.163 1055.59,224.488 1056.16,225.766 1056.73,224.054 1057.3,224.728 1057.87,225.353 1058.43,227.949 1059,228.28 1059.57,228.83 1060.14,227.859 1060.71,228.368 1061.28,227.619 1061.84,226.912 1062.41,228.431 1062.98,226.808 1063.55,227.34 1064.12,229.63 1064.69,230.734 1065.25,230.899 1065.82,229.855 1066.39,228.917 1066.96,229.197 1067.53,227.483 1068.1,228.78 1068.66,229.992 1069.23,231.26 1069.8,230.299 1070.37,230.353 1070.94,228.664 1071.51,230.194 1072.07,230.361 1072.64,229.434 1073.21,229.625 1073.78,228.796 1074.35,230.166 1074.92,230.434 1075.48,229.572 1076.05,229.971 1076.62,231.262 1077.19,232.339 1077.76,232.386 1078.33,232.422 1078.89,232.43 1079.46,233.503 1080.03,233.356 1080.6,232.679 1081.17,231.714 1081.74,235.179 1082.3,236.083 1082.87,236.738 1083.44,237.627 1084.01,237.368 1084.58,237.991 1085.15,236.79 1085.71,235.603 1086.28,235.307 1086.85,235.077 1087.42,233.889 1087.99,233.592 1088.56,233.551 1089.12,232.514 1089.69,236.612 1090.26,235.558 1090.83,235.253 1091.4,233.941 1091.97,236.005 1092.53,235.594 1093.1,235.49 1093.67,235.22 1094.24,237.129 1094.81,236.854 1095.38,236.566 1095.94,238.441 1096.51,238.025 1097.08,236.509 1097.65,238.115 1098.22,237.594 1098.79,236.087 1099.35,234.688 1099.92,234.328 1100.49,235.143 1101.06,235.707 1101.63,234.364 1102.2,234.032 1102.76,234.734 1103.33,235.376 1103.9,233.966 1104.47,233.859 1105.04,233.641 1105.61,233.294 1106.17,232.244 1106.74,229.053 1107.31,229.039 1107.88,232.194 1108.45,232.259 1109.02,234.219 1109.58,232.843 1110.15,232.628 1110.72,232.292 1111.29,232.142 1111.86,231.207 1112.43,233.27 1112.99,234.254 1113.56,233.16 1114.13,231.858 1114.7,231.767 1115.27,231.688 1115.84,231.447 1116.4,233.57 1116.97,233.114 1117.54,232.901 1118.11,231.687 1118.68,229.53 1119.25,230.608 1119.81,230.712 1120.38,229.745 1120.95,229.852 1121.52,227.914 1122.09,226 1122.66,225.127 1123.23,225.367 1123.79,223.757 1124.36,220.166 1124.93,219.895 1125.5,220.519 1126.07,220.295 1126.64,222.241 1127.2,224.956 1127.77,225.371 1128.34,225.5 1128.91,227.204 1129.48,227.513 1130.05,228.945 1130.61,228.106 1131.18,232.41 1131.75,231.452 1132.32,230.591 1132.89,230.67 1133.46,230.987 1134.02,229.13 1134.59,227.315 1135.16,225.614 1135.73,226.039 1136.3,226.5 1136.87,226.338 1137.43,226.731 1138,229.131 1138.57,230.126 1139.14,230.569 1139.71,229.63 1140.28,229.929 1140.84,229.034 1141.41,229.219 1141.98,230.426 1142.55,230.567 1143.12,228.563 1143.69,228.938 1144.25,228.355 1144.82,225.566 1145.39,228.191 1145.96,228.568 1146.53,229.601 1147.1,228.756 1147.66,229.173 1148.23,231.509 1148.8,232.913 1149.37,234.979 1149.94,238.02 1150.51,237.521 1151.07,238.24 1151.64,237.748 1152.21,239.489 1152.78,240.196 1153.35,238.518 1153.92,237.968 1154.48,235.342 1155.05,235.121 1155.62,234.723 1156.19,234.626 1156.76,234.465 1157.33,234.35 1157.89,235.189 1158.46,235.035 1159.03,235.806 1159.6,233.45 1160.17,231.424 1160.74,230.652 1161.3,232.989 1161.87,230.829 1162.44,232.896 1163.01,233.928 1163.58,233.79 1164.15,232.655 1164.71,233.655 1165.28,235.834 1165.85,236.556 1166.42,235.28 1166.99,235.334 1167.56,236.18 1168.12,236.931 1168.69,237.847 1169.26,237.519 1169.83,236.023 1170.4,236.999 1170.97,237.625 1171.53,236.157 1172.1,236.031 1172.67,236.797 1173.24,236.186 1173.81,236.745 1174.38,236.388 1174.94,238.092 1175.51,233.428 1176.08,234.993 1176.65,235.848 1177.22,235.468 1177.79,234.884 1178.35,234.535 1178.92,233.171 1179.49,233.82 1180.06,233.338 1180.63,232.943 1181.2,232.892 1181.76,235.694 1182.33,234.217 1182.9,234.038 1183.47,233.958 1184.04,233.758 1184.61,232.391 1185.17,232.943 1185.74,230.522 1186.31,232.544 1186.88,232.397 1187.45,232.108 1188.02,231.827 1188.58,230.735 1189.15,229.495 1189.72,228.596 1190.29,227.858 1190.86,228.105 1191.43,227.294 1192,225.647 1192.56,227.146 1193.13,228.378 1193.7,227.635 1194.27,226.809 1194.84,228.032 1195.41,227.313 1195.97,228.838 1196.54,226.784 1197.11,227.288 1197.68,227.82 1198.25,228.228 1198.82,227.451 1199.38,228.628 1199.95,227.013 1200.52,225.492 1201.09,226.09 1201.66,226.342 1202.23,226.676 1202.79,225.018 1203.36,226.549 1203.93,227.057 1204.5,227.62 1205.07,228.905 1205.64,229.239 1206.2,229.59 1206.77,231.017 1207.34,230.012 1207.91,230.119 1208.48,229.336 1209.05,228.746 1209.61,229.113 1210.18,229.241 1210.75,228.45 1211.32,227.835 1211.89,226.174 1212.46,227.518 1213.02,227.873 1213.59,228.112 1214.16,231.523 1214.73,232.618 1215.3,232.819 1215.87,233.755 1216.43,234.649 1217,235.226 1217.57,237.182 1218.14,234.856 1218.71,233.701 1219.28,233.474 1219.84,231.381 1220.41,232.27 1220.98,234.404 1221.55,234.194 1222.12,234.949 1222.69,233.712 1223.25,234.714 1223.82,235.537 1224.39,235.22 1224.96,236.038 1225.53,234.472 1226.1,233.331 1226.66,234.383 1227.23,232.921 1227.8,234.876 1228.37,234.553 1228.94,235.458 1229.51,234.973 1230.07,234.82 1230.64,236.714 1231.21,237.347 1231.78,236.835 1232.35,235.362 1232.92,232.982 1233.48,229.705 1234.05,229.799 1234.62,233.231 1235.19,234.226 1235.76,234.124 1236.33,233.929 1236.89,234.887 1237.46,234.308 1238.03,232.983 1238.6,231.919 1239.17,230.71 1239.74,230.736 1240.3,229.773 1240.87,227.873 1241.44,226.296 1242.01,226.702 1242.58,223.973 1243.15,225.593 1243.71,226.961 1244.28,227.322 1244.85,227.628 1245.42,228.766 1245.99,226.89 1246.56,229.223 1247.12,231.502 1247.69,228.624 1248.26,228.626 1248.83,227.642 1249.4,228.979 1249.97,227.112 1250.53,227.695 1251.1,226.898 1251.67,225.289 1252.24,225.833 1252.81,226.423 1253.38,228.058 1253.94,228.528 1254.51,231.775 1255.08,229.875 1255.65,229.026 1256.22,229.402 1256.79,229.411 1257.35,229.711 1257.92,228.83 1258.49,227.29 1259.06,227.773 1259.63,231.3 1260.2,230.607 1260.76,230.699 1261.33,232.908 1261.9,231.901 1262.47,230.878 1263.04,232.036 1263.61,232.155 1264.18,232.275 1264.74,234.652 1265.31,235.548 1265.88,235.395 1266.45,232.227 1267.02,234.29 1267.59,236.418 1268.15,237.254 1268.72,238.112 1269.29,236.535 1269.86,237.23 1270.43,236.814 1271,238.555 1271.56,239.159 1272.13,239.896 1272.7,239.291 1273.27,239.645 1273.84,238.152 1274.41,237.572 1274.97,236.968 1275.54,235.72 1276.11,237.392 1276.68,235.908 1277.25,233.51 1277.82,234.463 1278.38,234.211 1278.95,234.85 1279.52,234.435 1280.09,232.265 1280.66,231.034 1281.23,231.182 1281.79,231.271 1282.36,232.217 1282.93,228.067 1283.5,229.327 1284.07,227.259 1284.64,229.645 1285.2,229.745 1285.77,227.63 1286.34,228.865 1286.91,226.969 1287.48,228.298 1288.05,227.437 1288.61,228.545 1289.18,229.67 1289.75,231.773 1290.32,231.676 1290.89,230.478 1291.46,230.551 1292.02,232.816 1292.59,232.762 1293.16,231.557 1293.73,232.468 1294.3,234.548 1294.87,232.443 1295.43,232.393 1296,232.439 1296.57,233.435 1297.14,232.374 1297.71,233.264 1298.28,232.018 1298.84,232.812 1299.41,232.924 1299.98,233.813 1300.55,233.41 1301.12,232.086 1301.69,231.938 1302.25,231.091 1302.82,230.029 1303.39,228.206 1303.96,229.665 1304.53,229.815 1305.1,228.736 1305.66,227.842 1306.23,229.267 1306.8,227.347 1307.37,227.734 1307.94,229.17 1308.51,229.172 1309.07,229.297 1309.64,229.586 1310.21,232.738 1310.78,232.454 1311.35,231.373 1311.92,231.536 1312.48,231.723 1313.05,231.608 1313.62,230.91 1314.19,227.892 1314.76,229.145 1315.33,230.302 1315.89,231.695 1316.46,231.708 1317.03,232.736 1317.6,233.679 1318.17,231.367 1318.74,230.538 1319.3,231.806 1319.87,232.966 1320.44,233.184 1321.01,234.38 1321.58,234.149 1322.15,232.855 1322.71,232.759 1323.28,231.418 1323.85,232.566 1324.42,234.491 1324.99,232.411 1325.56,230.491 1326.12,230.846 1326.69,230.765 1327.26,229.746 1327.83,228.683 1328.4,229.62 1328.97,230.812 1329.53,230.92 1330.1,231.168 1330.67,229.108 1331.24,227.381 1331.81,229.975 1332.38,231.14 1332.94,232.112 1333.51,232.153 1334.08,232.056 1334.65,228.027 1335.22,230.48 1335.79,229.631 1336.36,228.627 1336.92,228.732 1337.49,228.943 1338.06,230.116 1338.63,229.936 1339.2,230.067 1339.77,230.341 1340.33,233.678 1340.9,235.505 1341.47,235.348 1342.04,236.157 1342.61,233.735 1343.18,232.688 1343.74,230.752 1344.31,230.889 1344.88,231.04 1345.45,229.208 1346.02,231.769 1346.59,230.675 1347.15,230.815 1347.72,229.965 1348.29,230.286 1348.86,231.532 1349.43,231.487 1350,233.534 1350.56,234.445 1351.13,234.196 1351.7,235.165 1352.27,233.979 1352.84,233.939 1353.41,235.944 1353.97,236.744 1354.54,236.577 1355.11,235.366 1355.68,237.135 1356.25,236.856 1356.82,233.447 1357.38,233.317 1357.95,233.411 1358.52,233.549 1359.09,232.469 1359.66,230.389 1360.23,228.521 1360.79,227.632 1361.36,227.787 1361.93,227.098 1362.5,229.391 1363.07,229.662 1363.64,228.794 1364.2,229.822 1364.77,231.012 1365.34,231.869 1365.91,230.716 1366.48,231.922 1367.05,234.287 1367.61,234.074 1368.18,233.9 1368.75,234.872 1369.32,233.611 1369.89,233.439 1370.46,232.061 1371.02,233.137 1371.59,233.179 1372.16,234.173 1372.73,233.105 1373.3,231.979 1373.87,231.955 1374.43,231.747 1375,230.747 1375.57,230.924 1376.14,230.865 1376.71,230.928 1377.28,229.94 1377.84,230.116 1378.41,230.196 1378.98,230.484 1379.55,230.654 1380.12,233.009 1380.69,230.818 1381.25,231.7 1381.82,231.763 1382.39,231.586 1382.96,230.576 1383.53,231.696 1384.1,231.835 1384.66,232.833 1385.23,232.995 1385.8,237.128 1386.37,236.921 1386.94,235.563 1387.51,235.466 1388.07,236.275 1388.64,234.818 1389.21,233.737 1389.78,234.663 1390.35,232.378 1390.92,235.539 1391.48,236.386 1392.05,235.876 1392.62,235.583 1393.19,237.462 1393.76,236.724 1394.33,236.239 1394.89,233.558 1395.46,233.375 1396.03,233.248 1396.6,234.339 1397.17,233.057 1397.74,229.81 1398.3,228.801 1398.87,230.882 1399.44,233.027 1400.01,232.87 1400.58,233.794 1401.15,233.521 1401.71,234.424 1402.28,234.249 1402.85,233.955 1403.42,231.855 1403.99,232.982 1404.56,232.93 1405.13,231.801 1405.69,230.91 1406.26,229.758 1406.83,228.764 1407.4,227.755 1407.97,226.915 1408.54,228.118 1409.1,227.311 1409.67,229.715 1410.24,232.024 1410.81,232.808 1411.38,234.871 1411.95,232.517 1412.51,232.453 1413.08,231.38 1413.65,231.048 1414.22,229.808 1414.79,228.763 1415.36,227.782 1415.92,229.086 1416.49,228.267 1417.06,229.505 1417.63,226.709 1418.2,226.84 1418.77,227.117 1419.33,226.363 1419.9,226.519 1420.47,226.638 1421.04,227.945 1421.61,228.273 1422.18,230.87 1422.74,230.952 1423.31,232.007 1423.88,232.789 1424.45,230.816 1425.02,231.688 1425.59,230.525 1426.15,230.646 1426.72,231.591 1427.29,228.707 1427.86,227.878 1428.43,227.343 1429,231.637 1429.56,231.748 1430.13,232.844 1430.7,230.743 1431.27,229.801 1431.84,229.965 1432.41,229.894 1432.97,230.2 1433.54,231.556 1434.11,232.6 1434.68,231.734 1435.25,232.679 1435.82,231.571 1436.38,229.461 1436.95,231.745 1437.52,230.89 1438.09,231.012 1438.66,229.77 1439.23,232.074 1439.79,228.768 1440.36,226.959 1440.93,227.416 1441.5,227.873 1442.07,226.25 1442.64,225.433 1443.2,225.78 1443.77,225.122 1444.34,226.789 1444.91,228.455 1445.48,228.764 1446.05,228.119 1446.61,228.605 1447.18,232.019 1447.75,232.17 1448.32,232.262 1448.89,232.3 1449.46,233.233 1450.02,232.096 1450.59,232.015 1451.16,233.94 1451.73,234 1452.3,235.028 1452.87,232.859 1453.43,232.894 1454,232.143 1454.57,233.284 1455.14,234.26 1455.71,233.167 1456.28,233.133 1456.84,236.122 1457.41,235.545 1457.98,234.305 1458.55,234.392 1459.12,236.314 1459.69,236.307 1460.25,235.887 1460.82,235.776 1461.39,233.497 1461.96,233.504 1462.53,231.543 1463.1,233.536 1463.66,233.603 1464.23,232.333 1464.8,234.277 1465.37,235.083 1465.94,232.986 1466.51,232.91 1467.07,233.713 1467.64,233.664 1468.21,234.403 1468.78,234.05 1469.35,235.926 1469.92,236.529 1470.48,236.077 1471.05,234.846 1471.62,234.644 1472.19,234.415 1472.76,234.352 1473.33,236.234 1473.89,236.007 1474.46,235.576 1475.03,236.243 1475.6,235.695 1476.17,235.485 1476.74,235.228 1477.31,232.739 1477.87,231.722 1478.44,232.661 1479.01,233.529 1479.58,231.126 1480.15,231.234 1480.72,229.259 1481.28,230.43 1481.85,229.554 1482.42,229.566 1482.99,228.532 1483.56,228.848 1484.13,225.949 1484.69,225.369 1485.26,226.537 1485.83,224.799 1486.4,228.252 1486.97,226.503 1487.54,224.819 1488.1,227.643 1488.67,226.936 1489.24,227.307 1489.81,227.282 1490.38,231.853 1490.95,231.017 1491.51,230.125 1492.08,230.299 1492.65,230.349 1493.22,228.408 1493.79,227.457 1494.36,226.609 1494.92,225.114 1495.49,225.511 1496.06,227.254 1496.63,228.596 1497.2,229.069 1497.77,230.449 1498.33,233.869 1498.9,231.727 1499.47,233.947 1500.04,234.767 1500.61,234.553 1501.18,236.424 1501.74,236.022 1502.31,239.999 1502.88,240.434 1503.45,238.816 1504.02,238.236 1504.59,237.739 1505.15,237.523 1505.72,236.973 1506.29,235.615 1506.86,236.612 1507.43,233.091 1508,231.732 1508.56,231.677 1509.13,231.435 1509.7,231.41 1510.27,231.137 1510.84,230.211 1511.41,229.316 1511.97,230.572 1512.54,230.748 1513.11,231.914 1513.68,234.647 1514.25,235.36 1514.82,235.176 1515.38,235.013 1515.95,234.718 1516.52,232.445 1517.09,233.14 1517.66,234.066 1518.23,232.666 1518.79,233.357 1519.36,236.289 1519.93,232.718 1520.5,230.195 1521.07,228.261 1521.64,229.789 1522.2,229.909 1522.77,230.074 1523.34,230.141 1523.91,231.95 1524.48,233.792 1525.05,233.702 1525.61,235.687 1526.18,233.152 1526.75,235.078 1527.32,235.928 1527.89,234.582 1528.46,232.429 1529.02,232.306 1529.59,233.21 1530.16,232.129 1530.73,229.93 1531.3,230.242 1531.87,229.08 1532.43,233.486 1533,232.407 1533.57,232.312 1534.14,231.038 1534.71,233.217 1535.28,232.969 1535.84,232.75 1536.41,231.485 1536.98,232.473 1537.55,234.486 1538.12,234.138 1538.69,233.968 1539.25,233.608 1539.82,233.204 1540.39,232.967 1540.96,231.851 1541.53,232.928 1542.1,232.602 1542.66,234.459 1543.23,234.114 1543.8,235.9 1544.37,233.56 1544.94,234.281 1545.51,235.057 1546.08,234.517 1546.64,232.929 1547.21,232.736 1547.78,232.803 1548.35,231.666 1548.92,231.393 1549.49,230.397 1550.05,230.241 1550.62,229.272 1551.19,233.157 1551.76,234.025 1552.33,233.723 1552.9,232.589 1553.46,230.499 1554.03,231.622 1554.6,231.339 1555.17,233.379 1555.74,234.025 1556.31,232.944 1556.87,235.018 1557.44,233.694 1558.01,233.356 1558.58,231.216 1559.15,232.27 1559.72,233.076 1560.28,232.859 1560.85,231.757 1561.42,230.615 1561.99,228.513 1562.56,231.765 1563.13,231.582 1563.69,231.464 1564.26,228.517 1564.83,228.651 1565.4,229.854 1565.97,230.994 1566.54,231.905 1567.1,231.864 1567.67,230.53 1568.24,230.429 1568.81,230.419 1569.38,229.523 1569.95,227.423 1570.51,226.646 1571.08,226.898 1571.65,227.946 1572.22,228.152 1572.79,229.593 1573.36,230.699 1573.92,229.608 1574.49,228.6 1575.06,227.816 1575.63,229.152 1576.2,230.485 1576.77,230.605 1577.33,230.791 1577.9,230.956 1578.47,231.773 1579.04,231.672 1579.61,230.484 1580.18,230.466 1580.74,230.39 1581.31,230.469 1581.88,227.642 1582.45,227.8 1583.02,227.752 1583.59,228.15 1584.15,228.35 1584.72,228.527 1585.29,229.985 1585.86,228.139 1586.43,227.494 1587,227.723 1587.56,229.115 1588.13,228.323 1588.7,228.563 1589.27,227.79 1589.84,227.032 1590.41,226.391 1590.97,227.828 1591.54,226.064 1592.11,227.493 1592.68,228.951 1593.25,228.411 1593.82,226.328 1594.38,225.728 1594.95,225.136 1595.52,224.515 1596.09,225.048 1596.66,225.487 1597.23,226.102 1597.79,228.429 1598.36,227.427 1598.93,227.827 1599.5,226.992 1600.07,227.332 1600.64,226.556 1601.2,229.166 1601.77,229.411 1602.34,231.609 1602.91,231.679 1603.48,231.893 1604.05,232.109 1604.61,233.384 1605.18,233.235 1605.75,232.353 1606.32,232.315 1606.89,231.25 1607.46,232.295 1608.02,231.33 1608.59,231.34 1609.16,231.482 1609.73,231.707 1610.3,231.733 1610.87,228.981 1611.43,228.229 1612,229.726 1612.57,231.996 1613.14,231.703 1613.71,233.18 1614.28,235.349 1614.84,234.325 1615.41,233.321 1615.98,232.441 1616.55,232.583 1617.12,232.446 1617.69,232.366 1618.26,231.569 1618.82,228.933 1619.39,229.272 1619.96,228.694 1620.53,229.162 1621.1,230.528 1621.67,230.659 1622.23,230.889 1622.8,232.11 1623.37,230.241 1623.94,231.401 1624.51,233.653 1625.08,236.039 1625.64,234.637 1626.21,233.23 1626.78,234.352 1627.35,234.289 1627.92,235.34 1628.49,236.126 1629.05,234.889 1629.62,232.635 1630.19,235.916 1630.76,237.588 1631.33,237.304 1631.9,237.958 1632.46,240.715 1633.03,240.205 1633.6,238.71 1634.17,240.025 1634.74,241.539 1635.31,240.873 1635.87,240.166 1636.44,239.42 1637.01,239.898 1637.58,238.363 1638.15,240.853 1638.72,237.878 1639.28,237.328 1639.85,236.972 1640.42,236.411 1640.99,237.063 1641.56,236.567 1642.13,234.995 1642.69,234.665 1643.26,235.302 1643.83,233.929 1644.4,233.928 1644.97,234.828 1645.54,231.663 1646.1,231.636 1646.67,234.666 1647.24,232.096 1647.81,230.868 1648.38,230.663 1648.95,230.764 1649.51,231.9 1650.08,232.943 1650.65,232.907 1651.22,232.904 1651.79,232.526 1652.36,231.431 1652.92,232.352 1653.49,230.29 1654.06,228.096 1654.63,228.347 1655.2,229.415 1655.77,229.431 1656.33,230.558 1656.9,231.383 1657.47,228.232 1658.04,228.556 1658.61,227.667 1659.18,227.722 1659.74,226.825 1660.31,227.884 1660.88,228.204 1661.45,229.34 1662.02,227.355 1662.59,227.645 1663.15,228.984 1663.72,228.246 1664.29,228.601 1664.86,228.855 1665.43,229.202 1666,231.603 1666.56,230.559 1667.13,228.518 1667.7,228.866 1668.27,230.159 1668.84,230.044 1669.41,229.342 1669.97,230.465 1670.54,230.325 1671.11,233.497 1671.68,232.196 1672.25,231.937 1672.82,232.846 1673.38,231.722 1673.95,232.603 1674.52,232.653 1675.09,231.598 1675.66,233.792 1676.23,233.633 1676.79,233.342 1677.36,232.18 1677.93,231.969 1678.5,232.897 1679.07,232.742 1679.64,231.396 1680.2,229.213 1680.77,228.355 1681.34,226.552 1681.91,225.805 1682.48,227.228 1683.05,230.739 1683.61,232.967 1684.18,233.948 1684.75,232.718 1685.32,233.525 1685.89,233.43 1686.46,233.436 1687.02,232.213 1687.59,233.203 1688.16,234.208 1688.73,235.052 1689.3,234.829 1689.87,232.456 1690.44,231.418 1691,230.432 1691.57,232.519 1692.14,231.422 1692.71,231.504 1693.28,231.609 1693.85,232.495 1694.41,234.683 1694.98,236.727 1695.55,233.978 1696.12,236.913 1696.69,234.553 1697.26,234.244 1697.82,235.055 1698.39,234.034 1698.96,232.819 1699.53,232.589 1700.1,234.444 1700.67,232.221 1701.23,232.209 1701.8,230.182 1702.37,230.344 1702.94,230.517 1703.51,231.622 1704.08,231.507 1704.64,231.635 1705.21,229.699 1705.78,229.463 1706.35,231.514 1706.92,230.294 1707.49,231.253 1708.05,230.243 1708.62,230.245 1709.19,230.198 1709.76,232.343 1710.33,231.296 1710.9,230.473 1711.46,232.827 1712.03,232.716 1712.6,232.476 1713.17,231.499 1713.74,233.54 1714.31,233.224 1714.87,231.018 1715.44,232.048 1716.01,231.079 1716.58,227.772 1717.15,228.958 1717.72,230.112 1718.28,230.154 1718.85,228.006 1719.42,227.445 1719.99,225.777 1720.56,226.065 1721.13,226.725 1721.69,229.211 1722.26,227.349 1722.83,227.451 1723.4,226.812 1723.97,229.248 1724.54,229.239 1725.1,229.721 1725.67,232.059 1726.24,231.297 1726.81,232.4 1727.38,232.452 1727.95,235.461 1728.51,236.355 1729.08,231.809 1729.65,231.669 1730.22,229.721 1730.79,230.808 1731.36,226.873 1731.92,227.169 1732.49,226.384 1733.06,227.89 1733.63,228.296 1734.2,229.604 1734.77,232.764 1735.33,232.837 1735.9,230.847 1736.47,230.882 1737.04,231.113 1737.61,233.286 1738.18,232.211 1738.74,232.234 1739.31,230.151 1739.88,231.455 1740.45,230.739 1741.02,228.685 1741.59,230.076 1742.15,228.412 1742.72,228.796 1743.29,228.879 1743.86,227.054 1744.43,228.495 1745,230.733 1745.56,233.041 1746.13,231.993 1746.7,234.127 1747.27,235.215 1747.84,236.078 1748.41,233.633 1748.97,231.652 1749.54,229.705 1750.11,230.676 1750.68,230.7 1751.25,229.774 1751.82,229.903 1752.38,231.012 1752.95,232.065 1753.52,232.157 1754.09,232.262 1754.66,231.331 1755.23,231.51 1755.79,233.617 1756.36,234.555 1756.93,233.428 1757.5,236.336 1758.07,238.096 1758.64,238.961 1759.21,237.437 1759.77,236.76 1760.34,237.544 1760.91,238.13 1761.48,237.666 1762.05,236.053 1762.62,235.703 1763.18,236.591 1763.75,238.195 1764.32,236.681 1764.89,238.249 1765.46,236.645 1766.03,233.781 1766.59,236.431 1767.16,235.906 1767.73,232.354 1768.3,233.211 1768.87,234.029 1769.44,235.767 1770,235.382 1770.57,233.893 1771.14,234.428 1771.71,233.149 1772.28,231.803 1772.85,230.799 1773.41,230.525 1773.98,228.544 1774.55,227.725 1775.12,228.975 1775.69,230.161 1776.26,232.187 1776.82,229.883 1777.39,229.933 1777.96,228.905 1778.53,229.071 1779.1,225.105 1779.67,226.697 1780.23,227.977 1780.8,229.022 1781.37,230.409 1781.94,230.367 1782.51,232.318 1783.08,232.453 1783.64,230.15 1784.21,232.241 1784.78,234.203 1785.35,230.936 1785.92,229.822 1786.49,233.232 1787.05,234.073 1787.62,233.969 1788.19,233.74 1788.76,233.637 1789.33,233.442 1789.9,234.204 1790.46,232.102 1791.03,229.966 1791.6,229.041 1792.17,231.373 1792.74,231.316 1793.31,231.465 1793.87,232.569 1794.44,233.478 1795.01,234.346 1795.58,235.196 1796.15,234.055 1796.72,233.738 1797.28,235.588 1797.85,234.386 1798.42,235.353 1798.99,234.731 1799.56,232.471 1800.13,232.324 1800.69,233.176 1801.26,233.143 1801.83,233.081 1802.4,234.921 1802.97,231.538 1803.54,233.731 1804.1,233.619 1804.67,235.362 1805.24,235.354 1805.81,234.037 1806.38,234.816 1806.95,234.532 1807.51,232.166 1808.08,233.176 1808.65,234.931 1809.22,234.789 1809.79,235.547 1810.36,235.316 1810.92,235.875 1811.49,233.346 1812.06,232.252 1812.63,233.194 1813.2,231.864 1813.77,229.886 1814.33,228.859 1814.9,230.066 1815.47,230.227 1816.04,230.492 1816.61,229.5 1817.18,227.541 1817.74,229.988 1818.31,230.955 1818.88,230.933 1819.45,228.606 1820.02,229.638 1820.59,226.707 1821.15,227.039 1821.72,228.296 1822.29,227.364 1822.86,226.476 1823.43,225.635 1824,227.231 1824.56,227.283 1825.13,226.339 1825.7,226.7 1826.27,227.053 1826.84,227.435 1827.41,226.705 1827.97,226.025 1828.54,228.65 1829.11,230.053 1829.68,228.144 1830.25,228.523 1830.82,230.799 1831.39,232.053 1831.95,231.187 1832.52,230.029 1833.09,231.268 1833.66,232.303 1834.23,231.042 1834.8,231.017 1835.36,231.14 1835.93,233.156 1836.5,226.922 1837.07,227.455 1837.64,226.588 1838.21,229.08 1838.77,228.277 1839.34,227.62 1839.91,228.832 1840.48,230.19 1841.05,228.982 1841.62,226.08 1842.18,226.58 1842.75,228.956 1843.32,231.145 1843.89,230.11 1844.46,231.356 1845.03,232.566 1845.59,231.535 1846.16,231.507 1846.73,229.502 1847.3,229.76 1847.87,229.855 1848.44,232.014 1849,229.876 1849.57,232.248 1850.14,233.424 1850.71,234.322 1851.28,237.162 1851.85,235.732 1852.41,235.324 1852.98,235.284 1853.55,234.795 1854.12,232.307 1854.69,230.247 1855.26,229.425 1855.82,229.566 1856.39,229.846 1856.96,229.939 1857.53,228.127 1858.1,229.294 1858.67,228.576 1859.23,227.905 1859.8,229.171 1860.37,229.367 1860.94,227.463 1861.51,226.904 1862.08,228.354 1862.64,227.518 1863.21,226.671 1863.78,225.904 1864.35,227.404 1864.92,227.727 1865.49,228.018 1866.05,227.542 1866.62,225.801 1867.19,224.155 1867.76,225.727 1868.33,227.405 1868.9,229.769 1869.46,229.949 1870.03,230.051 1870.6,230.429 1871.17,229.623 1871.74,232.102 1872.31,233.169 1872.87,234.218 1873.44,234.142 1874.01,233.086 1874.58,234.21 1875.15,235.294 1875.72,235.042 1876.28,233.761 1876.85,233.836 1877.42,233.872 1877.99,233.903 1878.56,234.723 1879.13,235.642 1879.69,235.341 1880.26,236.086 1880.83,235.754 1881.4,234.372 1881.97,234.394 1882.54,234.33 1883.1,238.211 1883.67,237.789 1884.24,239.433 1884.81,236.845 1885.38,235.29 1885.95,236.287 1886.51,237.082 1887.08,234.831 1887.65,233.409 1888.22,232.294 1888.79,230.161 1889.36,232.141 1889.92,231.987 1890.49,231.926 1891.06,234.999 1891.63,234.991 1892.2,232.864 1892.77,233.722 1893.33,233.723 1893.9,233.676 1894.47,232.697 1895.04,233.534 1895.61,232.249 1896.18,232.337 1896.74,233.389 1897.31,234.315 1897.88,236.242 1898.45,236.029 1899.02,237.734 1899.59,237.233 1900.16,236.768 1900.72,237.479 1901.29,236.218 1901.86,235.729 1902.43,235.489 1903,235.25 1903.57,234.998 1904.13,235.56 1904.7,236.206 1905.27,234.759 1905.84,232.24 1906.41,233.207 1906.98,233.82 1907.54,229.376 1908.11,229.492 1908.68,229.57 1909.25,228.417 1909.82,229.648 1910.39,229.959 1910.95,229.086 1911.52,229.512 1912.09,228.543 1912.66,229.662 1913.23,230.783 1913.8,230.656 1914.36,229.811 1914.93,229.965 1915.5,227.913 1916.07,229.079 1916.64,229.349 1917.21,227.556 1917.77,227.716 1918.34,228.908 1918.91,228.996 1919.48,229.481 1920.05,229.64 1920.62,229.541 1921.18,229.6 1921.75,229.838 1922.32,233.063 1922.89,233.965 1923.46,233.835 1924.03,235.647 1924.59,235.368 1925.16,233.958 1925.73,234.917 1926.3,234.781 1926.87,234.646 1927.44,235.408 1928,232.897 1928.57,233.97 1929.14,233.817 1929.71,233.669 1930.28,233.502 1930.85,233.382 1931.41,233.131 1931.98,232.953 1932.55,233.663 1933.12,235.318 1933.69,233.994 1934.26,233.828 1934.82,232.571 1935.39,231.543 1935.96,231.438 1936.53,230.568 1937.1,228.436 1937.67,227.733 1938.23,227.108 1938.8,227.267 1939.37,231.688 1939.94,232.512 1940.51,234.489 1941.08,237.06 1941.64,238.516 1942.21,236.628 1942.78,235.126 1943.35,235.876 1943.92,236.499 1944.49,236.016 1945.05,235.53 1945.62,234.207 1946.19,236.087 1946.76,235.742 1947.33,234.266 1947.9,232.878 1948.46,234.616 1949.03,234.262 1949.6,233.906 1950.17,234.504 1950.74,235.156 1951.31,234.939 1951.87,232.613 1952.44,231.506 1953.01,231.487 1953.58,231.448 1954.15,232.193 1954.72,231.975 1955.28,230.738 1955.85,229.586 1956.42,229.619 1956.99,228.665 1957.56,228.862 1958.13,226.824 1958.69,227.147 1959.26,228.344 1959.83,228.326 1960.4,227.557 1960.97,224.549 1961.54,225.949 1962.1,224.561 1962.67,225.087 1963.24,226.329 1963.81,227.815 1964.38,225.949 1964.95,227.258 1965.51,225.291 1966.08,225.626 1966.65,227.239 1967.22,226.491 1967.79,226.738 1968.36,226.176 1968.92,223.365 1969.49,222.801 1970.06,223.727 1970.63,227.576 1971.2,229.131 1971.77,228.39 1972.34,231.078 1972.9,232.267 1973.47,233.157 1974.04,232.002 1974.61,229.737 1975.18,227.84 1975.75,228.986 1976.31,230.115 1976.88,232.455 1977.45,232.293 1978.02,232.896 1978.59,232.676 1979.16,231.63 1979.72,233.876 1980.29,232.714 1980.86,230.611 1981.43,229.626 1982,229.871 1982.57,228.941 1983.13,231.114 1983.7,230.13 1984.27,231.575 1984.84,229.648 1985.41,228.63 1985.98,227.89 1986.54,230.087 1987.11,230.12 1987.68,229.245 1988.25,229.357 1988.82,229.636 1989.39,229.862 1989.95,230.063 1990.52,231.14 1991.09,229.368 1991.66,229.544 1992.23,229.626 1992.8,228.789 1993.36,228.102 1993.93,228.358 1994.5,228.542 1995.07,229.785 1995.64,230.891 1996.21,228.983 1996.77,229.38 1997.34,230.656 1997.91,228.714 1998.48,229.05 1999.05,228.418 1999.62,227.472 2000.18,227.933 2000.75,229.226 2001.32,231.684 2001.89,234.864 2002.46,234.893 2003.03,232.822 2003.59,231.671 2004.16,231.938 2004.73,230.013 2005.3,229.159 2005.87,228.527 2006.44,229.975 2007,229.35 2007.57,228.633 2008.14,228.961 2008.71,229.274 2009.28,230.486 2009.85,234.982 2010.41,236.896 2010.98,237.985 2011.55,233.752 2012.12,234.9 2012.69,233.671 2013.26,234.611 2013.82,237.558 2014.39,235.185 2014.96,236.027 2015.53,235.932 2016.1,235.727 2016.67,236.488 2017.23,233.969 2017.8,234.67 2018.37,234.3 2018.94,234.117 2019.51,237.934 2020.08,237.752 2020.64,236.419 2021.21,236.087 2021.78,236.899 2022.35,236.487 2022.92,235.976 2023.49,235.667 2024.05,235.144 2024.62,236.158 2025.19,236.682 2025.76,235.337 2026.33,239.306 2026.9,238.632 2027.46,239.324 2028.03,240.901 2028.6,239.234 2029.17,238.39 2029.74,238.756 2030.31,239.312 2030.87,238.711 2031.44,240.044 2032.01,239.319 2032.58,235.609 2033.15,234.254 2033.72,231.913 2034.28,231.633 2034.85,231.52 2035.42,233.57 2035.99,232.266 2036.56,233.105 2037.13,232.792 2037.69,233.757 2038.26,232.649 2038.83,233.763 2039.4,233.535 2039.97,234.577 2040.54,237.354 2041.11,236.791 2041.67,235.399 2042.24,235.129 2042.81,234.763 2043.38,235.582 2043.95,234.037 2044.52,231.68 2045.08,232.588 2045.65,232.491 2046.22,234.079 2046.79,233.731 2047.36,233.521 2047.93,234.312 2048.49,234.12 2049.06,231.792 2049.63,231.862 2050.2,231.58 2050.77,230.496 2051.34,228.261 2051.9,230.371 2052.47,229.538 2053.04,229.574 2053.61,227.461 2054.18,225.555 2054.75,225.938 2055.31,225.31 2055.88,225.656 2056.45,224.963 2057.02,225.521 2057.59,226.042 2058.16,223.48 2058.72,224.209 2059.29,224.876 2059.86,225.242 2060.43,227.554 2061,228.003 2061.57,228.279 2062.13,226.204 2062.7,227.403 2063.27,226.654 2063.84,226.869 2064.41,227.034 2064.98,225.414 2065.54,227.065 2066.11,228.477 2066.68,228.836 2067.25,229.107 2067.82,229.486 2068.39,229.375 2068.95,232.554 2069.52,232.675 2070.09,232.54 2070.66,232.309 2071.23,232.441 2071.8,231.567 2072.36,229.544 2072.93,227.5 2073.5,227.737 2074.07,229.267 2074.64,227.204 2075.21,228.464 2075.77,225.62 2076.34,224.099 2076.91,224.655 2077.48,223.249 2078.05,225.933 2078.62,227.354 2079.18,227.576 2079.75,227.961 2080.32,229.405 2080.89,230.725 2081.46,230.744 2082.03,230.108 2082.59,230.502 2083.16,229.783 2083.73,230.13 2084.3,229.254 2084.87,229.673 2085.44,230.024 2086,230.313 2086.57,228.65 2087.14,228.108 2087.71,227.501 2088.28,228.056 2088.85,229.7 2089.41,230.895 2089.98,230.001 2090.55,229.067 2091.12,229.477 2091.69,229.677 2092.26,230.85 2092.82,230.995 2093.39,233.324 2093.96,234.505 2094.53,234.197 2095.1,231.015 2095.67,232.297 2096.23,233.511 2096.8,235.537 2097.37,237.513 2097.94,237.035 2098.51,238.686 2099.08,238.243 2099.64,237.812 2100.21,239.417 2100.78,236.915 2101.35,235.777 2101.92,236.733 2102.49,234.21 2103.05,232.975 2103.62,233.852 2104.19,233.843 2104.76,237.662 2105.33,237.117 2105.9,236.725 2106.46,236.65 2107.03,236.322 2107.6,234.762 2108.17,234.821 2108.74,232.642 2109.31,231.601 2109.87,231.635 2110.44,231.621 2111.01,233.986 2111.58,232.856 2112.15,231.833 2112.72,233.941 2113.29,233.689 2113.85,233.858 2114.42,234.539 2114.99,232.385 2115.56,231.341 2116.13,231.595 2116.7,231.547 2117.26,231.562 2117.83,231.625 2118.4,232.793 2118.97,231.715 2119.54,231.717 2120.11,229.743 2120.67,228.647 2121.24,226.883 2121.81,229.453 2122.38,229.453 2122.95,228.433 2123.52,230.675 2124.08,230.825 2124.65,229.995 2125.22,229.236 2125.79,226.415 2126.36,230.141 2126.93,232.372 2127.49,233.414 2128.06,234.388 2128.63,232.29 2129.2,232.078 2129.77,232.909 2130.34,231.921 2130.9,230.762 2131.47,229.763 2132.04,228.949 2132.61,229.16 2133.18,229.264 2133.75,229.544 2134.31,230.672 2134.88,231.809 2135.45,231.93 2136.02,231.94 2136.59,229.161 2137.16,231.351 2137.72,230.547 2138.29,230.821 2138.86,231.799 2139.43,232.984 2140,231.868 2140.57,231.796 2141.13,233.805 2141.7,233.908 2142.27,233.813 2142.84,234.906 2143.41,233.752 2143.98,233.663 2144.54,232.428 2145.11,232.476 2145.68,232.404 2146.25,229.42 2146.82,232.609 2147.39,232.542 2147.95,229.267 2148.52,229.459 2149.09,230.652 2149.66,231.91 2150.23,233.043 2150.8,233.926 2151.36,234.861 2151.93,234.561 2152.5,235.158 2153.07,234.952 2153.64,236.007 2154.21,236.959 2154.77,236.567 2155.34,235.148 2155.91,233.866 2156.48,231.537 2157.05,233.598 2157.62,233.513 2158.18,233.433 2158.75,232.056 2159.32,233.253 2159.89,233.09 \"/>\n<path clip-path=\"url(#clip250)\" d=\"M1625.75 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1625.75 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip250)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1625.75,1245.03 2150.8,1245.03 2150.8,1089.51 1625.75,1089.51 1625.75,1245.03 \"/>\n<polyline clip-path=\"url(#clip250)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1645.83,1141.35 1766.28,1141.35 \"/>\n<path clip-path=\"url(#clip250)\" d=\"M1793.76 1125.34 L1793.76 1132.71 L1802.53 1132.71 L1802.53 1136.02 L1793.76 1136.02 L1793.76 1150.09 Q1793.76 1153.26 1794.61 1154.16 Q1795.49 1155.07 1798.16 1155.07 L1802.53 1155.07 L1802.53 1158.63 L1798.16 1158.63 Q1793.23 1158.63 1791.35 1156.8 Q1789.48 1154.95 1789.48 1150.09 L1789.48 1136.02 L1786.35 1136.02 L1786.35 1132.71 L1789.48 1132.71 L1789.48 1125.34 L1793.76 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M1819.92 1145.6 Q1814.75 1145.6 1812.76 1146.78 Q1810.77 1147.96 1810.77 1150.81 Q1810.77 1153.08 1812.25 1154.42 Q1813.76 1155.74 1816.33 1155.74 Q1819.87 1155.74 1822 1153.24 Q1824.15 1150.72 1824.15 1146.55 L1824.15 1145.6 L1819.92 1145.6 M1828.41 1143.84 L1828.41 1158.63 L1824.15 1158.63 L1824.15 1154.7 Q1822.69 1157.06 1820.52 1158.19 Q1818.34 1159.3 1815.19 1159.3 Q1811.21 1159.3 1808.85 1157.08 Q1806.51 1154.84 1806.51 1151.09 Q1806.51 1146.71 1809.43 1144.49 Q1812.37 1142.27 1818.18 1142.27 L1824.15 1142.27 L1824.15 1141.85 Q1824.15 1138.91 1822.21 1137.31 Q1820.29 1135.69 1816.79 1135.69 Q1814.57 1135.69 1812.46 1136.22 Q1810.36 1136.76 1808.41 1137.82 L1808.41 1133.89 Q1810.75 1132.98 1812.95 1132.54 Q1815.15 1132.08 1817.23 1132.08 Q1822.86 1132.08 1825.63 1135 Q1828.41 1137.91 1828.41 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M1852.21 1136.69 Q1851.49 1136.27 1850.63 1136.09 Q1849.8 1135.88 1848.78 1135.88 Q1845.17 1135.88 1843.23 1138.24 Q1841.3 1140.58 1841.3 1144.97 L1841.3 1158.63 L1837.02 1158.63 L1837.02 1132.71 L1841.3 1132.71 L1841.3 1136.73 Q1842.65 1134.37 1844.8 1133.24 Q1846.95 1132.08 1850.03 1132.08 Q1850.47 1132.08 1851 1132.15 Q1851.54 1132.2 1852.18 1132.31 L1852.21 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M1872.9 1145.37 Q1872.9 1140.74 1870.98 1138.19 Q1869.08 1135.65 1865.63 1135.65 Q1862.21 1135.65 1860.29 1138.19 Q1858.39 1140.74 1858.39 1145.37 Q1858.39 1149.97 1860.29 1152.52 Q1862.21 1155.07 1865.63 1155.07 Q1869.08 1155.07 1870.98 1152.52 Q1872.9 1149.97 1872.9 1145.37 M1877.16 1155.41 Q1877.16 1162.03 1874.22 1165.25 Q1871.28 1168.49 1865.22 1168.49 Q1862.97 1168.49 1860.98 1168.15 Q1858.99 1167.82 1857.11 1167.13 L1857.11 1162.98 Q1858.99 1164 1860.82 1164.49 Q1862.65 1164.97 1864.54 1164.97 Q1868.73 1164.97 1870.82 1162.78 Q1872.9 1160.6 1872.9 1156.18 L1872.9 1154.07 Q1871.58 1156.36 1869.52 1157.5 Q1867.46 1158.63 1864.59 1158.63 Q1859.82 1158.63 1856.91 1155 Q1853.99 1151.36 1853.99 1145.37 Q1853.99 1139.35 1856.91 1135.72 Q1859.82 1132.08 1864.59 1132.08 Q1867.46 1132.08 1869.52 1133.22 Q1871.58 1134.35 1872.9 1136.64 L1872.9 1132.71 L1877.16 1132.71 L1877.16 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M1908.11 1144.6 L1908.11 1146.69 L1888.53 1146.69 Q1888.8 1151.09 1891.17 1153.4 Q1893.55 1155.69 1897.79 1155.69 Q1900.24 1155.69 1902.53 1155.09 Q1904.85 1154.49 1907.11 1153.28 L1907.11 1157.31 Q1904.82 1158.28 1902.42 1158.79 Q1900.01 1159.3 1897.53 1159.3 Q1891.33 1159.3 1887.69 1155.69 Q1884.08 1152.08 1884.08 1145.92 Q1884.08 1139.56 1887.51 1135.83 Q1890.96 1132.08 1896.79 1132.08 Q1902.02 1132.08 1905.05 1135.46 Q1908.11 1138.82 1908.11 1144.6 M1903.85 1143.35 Q1903.8 1139.86 1901.88 1137.78 Q1899.98 1135.69 1896.84 1135.69 Q1893.27 1135.69 1891.12 1137.71 Q1888.99 1139.72 1888.67 1143.38 L1903.85 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M1919.31 1125.34 L1919.31 1132.71 L1928.09 1132.71 L1928.09 1136.02 L1919.31 1136.02 L1919.31 1150.09 Q1919.31 1153.26 1920.17 1154.16 Q1921.05 1155.07 1923.71 1155.07 L1928.09 1155.07 L1928.09 1158.63 L1923.71 1158.63 Q1918.78 1158.63 1916.91 1156.8 Q1915.03 1154.95 1915.03 1150.09 L1915.03 1136.02 L1911.91 1136.02 L1911.91 1132.71 L1915.03 1132.71 L1915.03 1125.34 L1919.31 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M1953.39 1166.5 L1953.39 1169.81 L1928.76 1169.81 L1928.76 1166.5 L1953.39 1166.5 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip250)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1645.83,1193.19 1766.28,1193.19 \"/>\n<path clip-path=\"url(#clip250)\" d=\"M1808.06 1194.82 L1808.06 1210.47 L1803.8 1210.47 L1803.8 1194.96 Q1803.8 1191.28 1802.37 1189.45 Q1800.93 1187.62 1798.06 1187.62 Q1794.61 1187.62 1792.62 1189.82 Q1790.63 1192.02 1790.63 1195.82 L1790.63 1210.47 L1786.35 1210.47 L1786.35 1184.55 L1790.63 1184.55 L1790.63 1188.57 Q1792.16 1186.24 1794.22 1185.08 Q1796.3 1183.92 1799.01 1183.92 Q1803.48 1183.92 1805.77 1186.7 Q1808.06 1189.45 1808.06 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M1826.61 1187.53 Q1823.18 1187.53 1821.19 1190.22 Q1819.2 1192.88 1819.2 1197.53 Q1819.2 1202.18 1821.17 1204.87 Q1823.16 1207.53 1826.61 1207.53 Q1830.01 1207.53 1832 1204.85 Q1833.99 1202.16 1833.99 1197.53 Q1833.99 1192.93 1832 1190.24 Q1830.01 1187.53 1826.61 1187.53 M1826.61 1183.92 Q1832.16 1183.92 1835.33 1187.53 Q1838.5 1191.14 1838.5 1197.53 Q1838.5 1203.9 1835.33 1207.53 Q1832.16 1211.14 1826.61 1211.14 Q1821.03 1211.14 1817.86 1207.53 Q1814.71 1203.9 1814.71 1197.53 Q1814.71 1191.14 1817.86 1187.53 Q1821.03 1183.92 1826.61 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M1860.59 1188.53 Q1859.87 1188.11 1859.01 1187.93 Q1858.18 1187.72 1857.16 1187.72 Q1853.55 1187.72 1851.61 1190.08 Q1849.68 1192.42 1849.68 1196.81 L1849.68 1210.47 L1845.4 1210.47 L1845.4 1184.55 L1849.68 1184.55 L1849.68 1188.57 Q1851.03 1186.21 1853.18 1185.08 Q1855.33 1183.92 1858.41 1183.92 Q1858.85 1183.92 1859.38 1183.99 Q1859.92 1184.04 1860.56 1184.15 L1860.59 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip250)\" d=\"M1884.41 1189.52 Q1886 1186.65 1888.23 1185.29 Q1890.45 1183.92 1893.46 1183.92 Q1897.51 1183.92 1899.71 1186.77 Q1901.91 1189.59 1901.91 1194.82 L1901.91 1210.47 L1897.62 1210.47 L1897.62 1194.96 Q1897.62 1191.24 1896.3 1189.43 Q1894.98 1187.62 1892.28 1187.62 Q1888.97 1187.62 1887.04 1189.82 Q1885.12 1192.02 1885.12 1195.82 L1885.12 1210.47 L1880.84 1210.47 L1880.84 1194.96 Q1880.84 1191.21 1879.52 1189.43 Q1878.2 1187.62 1875.45 1187.62 Q1872.18 1187.62 1870.26 1189.85 Q1868.34 1192.05 1868.34 1195.82 L1868.34 1210.47 L1864.06 1210.47 L1864.06 1184.55 L1868.34 1184.55 L1868.34 1188.57 Q1869.8 1186.19 1871.84 1185.06 Q1873.87 1183.92 1876.67 1183.92 Q1879.5 1183.92 1881.47 1185.36 Q1883.46 1186.79 1884.41 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.03 ± 0.025\n  with uncertainty of ± 0.002296673476574684\n  from 62 blocks after 5 transformations (k = 6).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.01497 ± (0.00190423, 0.00195548) (MC)\n  95% confidence interval: [-4.01898, -4.01095]) (MC)\n  linear error propagation: -4.01493 ± 0.00205688\n  |δ_y| = |0.00155063| (≤ 0.1 for normal approx)\n  Blocking successful with 31 blocks after 6 transformations (k = 7).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.014971140573074, val_l = 0.0040097042748206135, val_u = 0.004023701948433711)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.step, df.shift, ylabel=\"energy\", xlabel=\"step\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.step[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.step[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip280\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip280)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip281\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip280)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip282\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip282)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip282)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip282)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip282)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip282)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1144.43 2211.02,1144.43 \"/>\n<polyline clip-path=\"url(#clip282)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,976.466 2211.02,976.466 \"/>\n<polyline clip-path=\"url(#clip282)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,808.501 2211.02,808.501 \"/>\n<polyline clip-path=\"url(#clip282)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,640.536 2211.02,640.536 \"/>\n<polyline clip-path=\"url(#clip282)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,472.571 2211.02,472.571 \"/>\n<polyline clip-path=\"url(#clip282)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,304.606 2211.02,304.606 \"/>\n<polyline clip-path=\"url(#clip280)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip280)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip280)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip280)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip280)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip280)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M1237.32 1391.71 L1237.32 1397.25 Q1234.84 1395.98 1232.17 1395.34 Q1229.49 1394.71 1226.63 1394.71 Q1222.27 1394.71 1220.07 1396.04 Q1217.91 1397.38 1217.91 1400.05 Q1217.91 1402.09 1219.47 1403.27 Q1221.03 1404.41 1225.74 1405.46 L1227.74 1405.91 Q1233.98 1407.25 1236.59 1409.7 Q1239.23 1412.12 1239.23 1416.48 Q1239.23 1421.44 1235.29 1424.34 Q1231.37 1427.23 1224.5 1427.23 Q1221.63 1427.23 1218.51 1426.66 Q1215.42 1426.12 1211.99 1425.01 L1211.99 1418.96 Q1215.23 1420.65 1218.38 1421.51 Q1221.54 1422.33 1224.62 1422.33 Q1228.76 1422.33 1230.99 1420.93 Q1233.22 1419.5 1233.22 1416.92 Q1233.22 1414.54 1231.59 1413.26 Q1230 1411.99 1224.56 1410.81 L1222.52 1410.33 Q1217.08 1409.19 1214.66 1406.83 Q1212.24 1404.45 1212.24 1400.31 Q1212.24 1395.28 1215.81 1392.54 Q1219.37 1389.8 1225.93 1389.8 Q1229.17 1389.8 1232.04 1390.28 Q1234.9 1390.76 1237.32 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M1254.35 1380.54 L1254.35 1390.66 L1266.41 1390.66 L1266.41 1395.22 L1254.35 1395.22 L1254.35 1414.57 Q1254.35 1418.93 1255.53 1420.17 Q1256.74 1421.41 1260.4 1421.41 L1266.41 1421.41 L1266.41 1426.31 L1260.4 1426.31 Q1253.62 1426.31 1251.04 1423.8 Q1248.46 1421.25 1248.46 1414.57 L1248.46 1395.22 L1244.17 1395.22 L1244.17 1390.66 L1248.46 1390.66 L1248.46 1380.54 L1254.35 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M1304.61 1407.02 L1304.61 1409.89 L1277.68 1409.89 Q1278.06 1415.94 1281.31 1419.12 Q1284.59 1422.27 1290.41 1422.27 Q1293.79 1422.27 1296.94 1421.44 Q1300.12 1420.61 1303.24 1418.96 L1303.24 1424.5 Q1300.09 1425.83 1296.78 1426.53 Q1293.47 1427.23 1290.06 1427.23 Q1281.53 1427.23 1276.54 1422.27 Q1271.57 1417.3 1271.57 1408.84 Q1271.57 1400.08 1276.28 1394.96 Q1281.02 1389.8 1289.04 1389.8 Q1296.24 1389.8 1300.41 1394.45 Q1304.61 1399.07 1304.61 1407.02 M1298.75 1405.3 Q1298.69 1400.5 1296.05 1397.63 Q1293.44 1394.77 1289.11 1394.77 Q1284.21 1394.77 1281.25 1397.54 Q1278.32 1400.31 1277.87 1405.34 L1298.75 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M1319.89 1420.96 L1319.89 1439.87 L1314 1439.87 L1314 1390.66 L1319.89 1390.66 L1319.89 1396.07 Q1321.73 1392.89 1324.53 1391.36 Q1327.37 1389.8 1331.28 1389.8 Q1337.77 1389.8 1341.82 1394.96 Q1345.89 1400.12 1345.89 1408.52 Q1345.89 1416.92 1341.82 1422.08 Q1337.77 1427.23 1331.28 1427.23 Q1327.37 1427.23 1324.53 1425.71 Q1321.73 1424.15 1319.89 1420.96 M1339.81 1408.52 Q1339.81 1402.06 1337.14 1398.4 Q1334.5 1394.71 1329.85 1394.71 Q1325.2 1394.71 1322.53 1398.4 Q1319.89 1402.06 1319.89 1408.52 Q1319.89 1414.98 1322.53 1418.67 Q1325.2 1422.33 1329.85 1422.33 Q1334.5 1422.33 1337.14 1418.67 Q1339.81 1414.98 1339.81 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip280)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip280)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1144.43 365.751,1144.43 \"/>\n<polyline clip-path=\"url(#clip280)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,976.466 365.751,976.466 \"/>\n<polyline clip-path=\"url(#clip280)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,808.501 365.751,808.501 \"/>\n<polyline clip-path=\"url(#clip280)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,640.536 365.751,640.536 \"/>\n<polyline clip-path=\"url(#clip280)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,472.571 365.751,472.571 \"/>\n<polyline clip-path=\"url(#clip280)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,304.606 365.751,304.606 \"/>\n<path clip-path=\"url(#clip280)\" d=\"M298.909 1130.23 Q295.298 1130.23 293.469 1133.79 Q291.664 1137.34 291.664 1144.47 Q291.664 1151.57 293.469 1155.14 Q295.298 1158.68 298.909 1158.68 Q302.543 1158.68 304.349 1155.14 Q306.177 1151.57 306.177 1144.47 Q306.177 1137.34 304.349 1133.79 Q302.543 1130.23 298.909 1130.23 M298.909 1126.53 Q304.719 1126.53 307.775 1131.13 Q310.853 1135.72 310.853 1144.47 Q310.853 1153.19 307.775 1157.8 Q304.719 1162.38 298.909 1162.38 Q293.099 1162.38 290.02 1157.8 Q286.964 1153.19 286.964 1144.47 Q286.964 1135.72 290.02 1131.13 Q293.099 1126.53 298.909 1126.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M259.557 989.81 L267.196 989.81 L267.196 963.445 L258.886 965.112 L258.886 960.852 L267.15 959.186 L271.826 959.186 L271.826 989.81 L279.465 989.81 L279.465 993.746 L259.557 993.746 L259.557 989.81 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M298.909 962.264 Q295.298 962.264 293.469 965.829 Q291.664 969.371 291.664 976.5 Q291.664 983.607 293.469 987.172 Q295.298 990.713 298.909 990.713 Q302.543 990.713 304.349 987.172 Q306.177 983.607 306.177 976.5 Q306.177 969.371 304.349 965.829 Q302.543 962.264 298.909 962.264 M298.909 958.561 Q304.719 958.561 307.775 963.167 Q310.853 967.75 310.853 976.5 Q310.853 985.227 307.775 989.834 Q304.719 994.417 298.909 994.417 Q293.099 994.417 290.02 989.834 Q286.964 985.227 286.964 976.5 Q286.964 967.75 290.02 963.167 Q293.099 958.561 298.909 958.561 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M262.775 821.845 L279.094 821.845 L279.094 825.781 L257.15 825.781 L257.15 821.845 Q259.812 819.091 264.395 814.461 Q269.002 809.808 270.182 808.466 Q272.428 805.943 273.307 804.207 Q274.21 802.447 274.21 800.758 Q274.21 798.003 272.266 796.267 Q270.344 794.531 267.242 794.531 Q265.043 794.531 262.59 795.295 Q260.159 796.059 257.381 797.609 L257.381 792.887 Q260.205 791.753 262.659 791.174 Q265.113 790.596 267.15 790.596 Q272.52 790.596 275.715 793.281 Q278.909 795.966 278.909 800.457 Q278.909 802.586 278.099 804.508 Q277.312 806.406 275.205 808.998 Q274.627 809.67 271.525 812.887 Q268.423 816.082 262.775 821.845 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M298.909 794.299 Q295.298 794.299 293.469 797.864 Q291.664 801.406 291.664 808.535 Q291.664 815.642 293.469 819.207 Q295.298 822.748 298.909 822.748 Q302.543 822.748 304.349 819.207 Q306.177 815.642 306.177 808.535 Q306.177 801.406 304.349 797.864 Q302.543 794.299 298.909 794.299 M298.909 790.596 Q304.719 790.596 307.775 795.202 Q310.853 799.785 310.853 808.535 Q310.853 817.262 307.775 821.869 Q304.719 826.452 298.909 826.452 Q293.099 826.452 290.02 821.869 Q286.964 817.262 286.964 808.535 Q286.964 799.785 290.02 795.202 Q293.099 790.596 298.909 790.596 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M272.914 639.181 Q276.27 639.899 278.145 642.168 Q280.043 644.436 280.043 647.769 Q280.043 652.885 276.525 655.686 Q273.006 658.487 266.525 658.487 Q264.349 658.487 262.034 658.047 Q259.742 657.63 257.289 656.774 L257.289 652.26 Q259.233 653.394 261.548 653.973 Q263.863 654.552 266.386 654.552 Q270.784 654.552 273.076 652.816 Q275.39 651.08 275.39 647.769 Q275.39 644.714 273.238 643.001 Q271.108 641.265 267.289 641.265 L263.261 641.265 L263.261 637.422 L267.474 637.422 Q270.923 637.422 272.752 636.056 Q274.58 634.668 274.58 632.075 Q274.58 629.413 272.682 628.001 Q270.807 626.566 267.289 626.566 Q265.367 626.566 263.168 626.982 Q260.969 627.399 258.33 628.279 L258.33 624.112 Q260.992 623.371 263.307 623.001 Q265.645 622.631 267.705 622.631 Q273.029 622.631 276.131 625.061 Q279.233 627.469 279.233 631.589 Q279.233 634.459 277.59 636.45 Q275.946 638.418 272.914 639.181 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M298.909 626.334 Q295.298 626.334 293.469 629.899 Q291.664 633.441 291.664 640.57 Q291.664 647.677 293.469 651.242 Q295.298 654.783 298.909 654.783 Q302.543 654.783 304.349 651.242 Q306.177 647.677 306.177 640.57 Q306.177 633.441 304.349 629.899 Q302.543 626.334 298.909 626.334 M298.909 622.631 Q304.719 622.631 307.775 627.237 Q310.853 631.82 310.853 640.57 Q310.853 649.297 307.775 653.904 Q304.719 658.487 298.909 658.487 Q293.099 658.487 290.02 653.904 Q286.964 649.297 286.964 640.57 Q286.964 631.82 290.02 627.237 Q293.099 622.631 298.909 622.631 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M271.594 459.365 L259.789 477.814 L271.594 477.814 L271.594 459.365 M270.367 455.291 L276.247 455.291 L276.247 477.814 L281.177 477.814 L281.177 481.702 L276.247 481.702 L276.247 489.851 L271.594 489.851 L271.594 481.702 L255.992 481.702 L255.992 477.189 L270.367 455.291 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M298.909 458.369 Q295.298 458.369 293.469 461.934 Q291.664 465.476 291.664 472.605 Q291.664 479.712 293.469 483.277 Q295.298 486.818 298.909 486.818 Q302.543 486.818 304.349 483.277 Q306.177 479.712 306.177 472.605 Q306.177 465.476 304.349 461.934 Q302.543 458.369 298.909 458.369 M298.909 454.666 Q304.719 454.666 307.775 459.272 Q310.853 463.855 310.853 472.605 Q310.853 481.332 307.775 485.939 Q304.719 490.522 298.909 490.522 Q293.099 490.522 290.02 485.939 Q286.964 481.332 286.964 472.605 Q286.964 463.855 290.02 459.272 Q293.099 454.666 298.909 454.666 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M258.793 287.326 L277.15 287.326 L277.15 291.261 L263.076 291.261 L263.076 299.733 Q264.094 299.386 265.113 299.224 Q266.131 299.038 267.15 299.038 Q272.937 299.038 276.316 302.21 Q279.696 305.381 279.696 310.798 Q279.696 316.376 276.224 319.478 Q272.752 322.557 266.432 322.557 Q264.256 322.557 261.988 322.186 Q259.742 321.816 257.335 321.075 L257.335 316.376 Q259.418 317.511 261.641 318.066 Q263.863 318.622 266.34 318.622 Q270.344 318.622 272.682 316.515 Q275.02 314.409 275.02 310.798 Q275.02 307.187 272.682 305.08 Q270.344 302.974 266.34 302.974 Q264.465 302.974 262.59 303.39 Q260.738 303.807 258.793 304.687 L258.793 287.326 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M298.909 290.404 Q295.298 290.404 293.469 293.969 Q291.664 297.511 291.664 304.64 Q291.664 311.747 293.469 315.312 Q295.298 318.853 298.909 318.853 Q302.543 318.853 304.349 315.312 Q306.177 311.747 306.177 304.64 Q306.177 297.511 304.349 293.969 Q302.543 290.404 298.909 290.404 M298.909 286.701 Q304.719 286.701 307.775 291.307 Q310.853 295.89 310.853 304.64 Q310.853 313.367 307.775 317.974 Q304.719 322.557 298.909 322.557 Q293.099 322.557 290.02 317.974 Q286.964 313.367 286.964 304.64 Q286.964 295.89 290.02 291.307 Q293.099 286.701 298.909 286.701 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip282)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1151.3 400.199,1033.02 400.786,920.176 401.372,1041.22 401.958,933.271 402.545,840.686 403.131,748.285 403.718,758.339 404.304,675.602 404.891,607.278 405.477,540.765 406.063,475.994 406.65,425.337 407.236,375.712 407.823,333.467 408.409,294.863 408.995,259.14 409.582,287.683 410.168,312.35 410.755,281.815 411.341,255.661 411.927,277.558 412.514,255.597 413.1,276.412 413.687,259.628 414.273,246.862 414.86,235.776 415.446,226.236 416.032,219.895 416.619,242.289 417.205,236.851 417.792,234.38 418.378,234.135 418.964,235.083 419.551,257.303 420.137,259.965 420.724,263.925 421.31,270.208 421.896,308.57 422.483,315.574 423.069,351.773 423.656,358.332 424.242,365.314 424.829,373.283 425.415,393.749 426.001,413.817 426.588,432.171 427.174,441.244 427.761,451.341 428.347,469.922 428.933,480.062 429.52,489.809 430.106,515.714 430.693,527.077 431.279,545.204 431.865,557.159 432.452,569.099 433.038,593.669 433.625,618.161 434.211,629.587 434.798,641.208 435.384,663.408 435.97,679.269 436.557,695.216 437.143,710.238 437.73,729.69 438.316,748.537 438.902,762.206 439.489,771.835 440.075,788.956 440.662,809.122 441.248,821.078 441.835,840.248 442.421,855.093 443.007,869.23 443.594,883.107 444.18,893.114 444.767,905.791 445.353,912.343 445.939,921.321 446.526,930.601 447.112,945.211 447.699,959.401 448.285,964.873 448.871,975.573 449.458,980.817 450.044,990.909 450.631,995.841 451.217,1000.77 451.804,1010.64 452.39,1020.56 452.976,1030.14 453.563,1036.62 454.149,1043.27 454.736,1052.12 455.322,1058.27 455.908,1071.05 456.495,1079.12 457.081,1089.11 457.668,1094 458.254,1097.15 458.84,1104.34 459.427,1109.12 460.013,1115.8 460.6,1122.26 461.186,1124.58 461.773,1130.38 462.359,1133.85 462.945,1145.09 463.532,1150.48 464.118,1153.83 464.705,1155.02 465.291,1156.51 465.877,1158.08 466.464,1161.23 467.05,1166.26 467.637,1169.17 468.223,1172 468.809,1173.32 469.396,1177.87 469.982,1180.63 470.569,1182.98 471.155,1185.63 471.742,1191.44 472.328,1193.46 472.914,1195.57 473.501,1197.97 474.087,1196.62 474.674,1198.85 475.26,1199.3 475.846,1200.05 476.433,1200.91 477.019,1201.69 477.606,1203.89 478.192,1206.15 478.778,1208.28 479.365,1207.05 479.951,1210.57 480.538,1212.67 481.124,1216.2 481.711,1218.04 482.297,1221.08 482.883,1220.98 483.47,1224 484.056,1223.74 484.643,1226.63 485.229,1223.38 485.815,1226.53 486.402,1229.06 486.988,1231.89 487.575,1235.96 488.161,1236.98 488.748,1237.76 489.334,1237.03 489.92,1236.46 490.507,1234.47 491.093,1238.4 491.68,1243.65 492.266,1244.14 492.852,1242.9 493.439,1245.26 494.025,1250.4 494.612,1250.53 495.198,1249.09 495.784,1247.87 496.371,1243.92 496.957,1243.02 497.544,1242.3 498.13,1242.9 498.717,1242.27 499.303,1241.78 499.889,1243.94 500.476,1243.01 501.062,1240.62 501.649,1241.43 502.235,1241.09 502.821,1241.36 503.408,1240.81 503.994,1244.57 504.581,1243.93 505.167,1244.66 505.753,1242.4 506.34,1239.15 506.926,1235.77 507.513,1235.49 508.099,1236.8 508.686,1239.18 509.272,1240.27 509.858,1236.76 510.445,1233.59 511.031,1239.1 511.618,1238.85 512.204,1236.96 512.79,1236.88 513.377,1238.09 513.963,1239.12 514.55,1238.68 515.136,1238.25 515.722,1239.33 516.309,1241.66 516.895,1240.83 517.482,1240.57 518.068,1241.68 518.655,1238.43 519.241,1238.26 519.827,1239.33 520.414,1241.93 521,1242.74 521.587,1241.98 522.173,1244.22 522.759,1246.24 523.346,1245.37 523.932,1244.65 524.519,1243.93 525.105,1243.59 525.691,1248.33 526.278,1247.31 526.864,1246.7 527.451,1244.34 528.037,1247.84 528.624,1248.4 529.21,1247.5 529.796,1248.08 530.383,1247.14 530.969,1243.18 531.556,1245.3 532.142,1240.28 532.728,1238.19 533.315,1239.17 533.901,1237.57 534.488,1237.3 535.074,1238.21 535.661,1233.6 536.247,1235.13 536.833,1237.87 537.42,1237.43 538.006,1238.56 538.593,1240.97 539.179,1240.19 539.765,1239.74 540.352,1239.01 540.938,1241.44 541.525,1240.6 542.111,1239.97 542.697,1245.11 543.284,1245.91 543.87,1249.19 544.457,1245.48 545.043,1244.82 545.63,1245.4 546.216,1243.17 546.802,1245 547.389,1244.16 547.975,1240.5 548.562,1243.87 549.148,1242.01 549.734,1243.06 550.321,1240.88 550.907,1240.42 551.494,1238.33 552.08,1241.95 552.666,1242.63 553.253,1242.31 553.839,1238.61 554.426,1241.02 555.012,1241.76 555.599,1242.45 556.185,1243.11 556.771,1240.95 557.358,1244.3 557.944,1245.01 558.531,1246.97 559.117,1246.18 559.703,1247.74 560.29,1249.56 560.876,1248.62 561.463,1248.95 562.049,1242.1 562.635,1243.21 563.222,1243.49 563.808,1242.53 564.395,1244.49 564.981,1242.48 565.568,1237.53 566.154,1238.81 566.74,1234.12 567.327,1233.86 567.913,1233.81 568.5,1231.92 569.086,1234.3 569.672,1233.74 570.259,1235.08 570.845,1236.09 571.432,1235.71 572.018,1235.47 572.605,1233.58 573.191,1233.12 573.777,1232.9 574.364,1230.99 574.95,1230.59 575.537,1230.48 576.123,1232.99 576.709,1231.2 577.296,1236.56 577.882,1237.69 578.469,1238.49 579.055,1240.62 579.641,1239.85 580.228,1239.44 580.814,1238.28 581.401,1235.01 581.987,1231.69 582.574,1232.8 583.16,1233.78 583.746,1236.12 584.333,1231.57 584.919,1231.42 585.506,1229.75 586.092,1228.07 586.678,1226.5 587.265,1223.77 587.851,1224.07 588.438,1221.43 589.024,1218.74 589.61,1219.24 590.197,1222.18 590.783,1219.33 591.37,1219.55 591.956,1214.23 592.543,1214.82 593.129,1215.36 593.715,1215.98 594.302,1216.57 594.888,1215.85 595.475,1216.46 596.061,1219.78 596.647,1219.99 597.234,1217.6 597.82,1220.87 598.407,1225.33 598.993,1226.63 599.579,1227.96 600.166,1229.08 600.752,1230.05 601.339,1229.64 601.925,1230.92 602.512,1230.59 603.098,1231.58 603.684,1231.27 604.271,1229.87 604.857,1228.07 605.444,1227.76 606.03,1230.22 606.616,1228.24 607.203,1232.38 607.789,1235.96 608.376,1235.28 608.962,1234.5 609.548,1236.51 610.135,1236.02 610.721,1235.33 611.308,1234.91 611.894,1233.08 612.481,1232.68 613.067,1232.4 613.653,1231.66 614.24,1234.05 614.826,1233.25 615.413,1232.94 615.999,1232.36 616.585,1231.8 617.172,1228.87 617.758,1231.24 618.345,1231.12 618.931,1229.39 619.518,1227.46 620.104,1227.24 620.69,1228.17 621.277,1228.04 621.863,1230.32 622.45,1232.39 623.036,1233.16 623.622,1232.83 624.209,1230.72 624.795,1231.84 625.382,1229.81 625.968,1230.61 626.554,1230.23 627.141,1229.95 627.727,1230.74 628.314,1233.02 628.9,1231.93 629.487,1234.09 630.073,1232.04 630.659,1231.7 631.246,1233.86 631.832,1234.77 632.419,1235.41 633.005,1232.04 633.591,1230.1 634.178,1232.42 634.764,1230.42 635.351,1231.29 635.937,1233.37 636.523,1231.31 637.11,1229.39 637.696,1233.16 638.283,1232.07 638.869,1232.84 639.456,1232.41 640.042,1228.9 640.628,1228.39 641.215,1229.47 641.801,1230.36 642.388,1231.24 642.974,1228.15 643.56,1229.4 644.147,1230.41 644.733,1229.86 645.32,1230.49 645.906,1229.82 646.492,1230.1 647.079,1226.61 647.665,1227.71 648.252,1228.61 648.838,1228.15 649.425,1226.51 650.011,1228.79 650.597,1228.43 651.184,1226.52 651.77,1227.63 652.357,1228.57 652.943,1229.65 653.529,1226.48 654.116,1226.26 654.702,1224.55 655.289,1224.33 655.875,1224.04 656.462,1222.38 657.048,1217.72 657.634,1217.98 658.221,1215.22 658.807,1215.23 659.394,1211.09 659.98,1210.34 660.566,1210.67 661.153,1210.94 661.739,1210.25 662.326,1212.17 662.912,1213.76 663.498,1213 664.085,1213.31 664.671,1212.17 665.258,1212.7 665.844,1213.13 666.431,1213.47 667.017,1213.74 667.603,1212.38 668.19,1212.78 668.776,1213.29 669.363,1214.81 669.949,1213.58 670.535,1216.72 671.122,1216.83 671.708,1218.3 672.295,1218.17 672.881,1215.22 673.467,1212.69 674.054,1214.23 674.64,1214.48 675.227,1216.02 675.813,1217.46 676.4,1219.01 676.986,1219.42 677.572,1219.58 678.159,1218.22 678.745,1218.25 679.332,1218.43 679.918,1219.53 680.504,1216.75 681.091,1216.91 681.677,1216.88 682.264,1214.32 682.85,1214.36 683.436,1213.03 684.023,1211.83 684.609,1213.82 685.196,1214.43 685.782,1214.44 686.369,1214.69 686.955,1214.64 687.541,1216.14 688.128,1216.17 688.714,1216.27 689.301,1217.63 689.887,1219.25 690.473,1217.85 691.06,1221.66 691.646,1219.05 692.233,1220.5 692.819,1219.16 693.405,1219.07 693.992,1216.15 694.578,1216.39 695.165,1215.06 695.751,1215.38 696.338,1215.67 696.924,1217.27 697.51,1216.02 698.097,1215.1 698.683,1213.97 699.27,1215.37 699.856,1214.26 700.442,1211.64 701.029,1213.31 701.615,1212.22 702.202,1212.2 702.788,1212.44 703.375,1214.11 703.961,1212.82 704.547,1215.8 705.134,1216.06 705.72,1217.55 706.307,1217.48 706.893,1216.08 707.479,1216.33 708.066,1215.03 708.652,1220.74 709.239,1219.28 709.825,1218.96 710.411,1214.89 710.998,1212.25 711.584,1212.3 712.171,1212.51 712.757,1214.29 713.344,1218.54 713.93,1218.44 714.516,1219.51 715.103,1222.19 715.689,1222.19 716.276,1221.79 716.862,1224.23 717.448,1222.35 718.035,1219.3 718.621,1219.16 719.208,1218.8 719.794,1218.72 720.38,1220.3 720.967,1220.02 721.553,1222.47 722.14,1223.7 722.726,1223.35 723.313,1222.84 723.899,1223.95 724.485,1223.49 725.072,1226.03 725.658,1224.25 726.245,1221.22 726.831,1217.93 727.417,1220.86 728.004,1223.31 728.59,1221.48 729.177,1219.97 729.763,1218.12 730.349,1219.37 730.936,1218.91 731.522,1218.84 732.109,1218.66 732.695,1218.48 733.282,1219.33 733.868,1219.18 734.454,1219.02 735.041,1220.06 735.627,1219.98 736.214,1220.92 736.8,1218.1 737.386,1218.99 737.973,1218.98 738.559,1216.09 739.146,1216.02 739.732,1219.98 740.318,1219.74 740.905,1219.41 741.491,1219.46 742.078,1217.82 742.664,1217.82 743.251,1216.25 743.837,1217.82 744.423,1216.28 745.01,1217.84 745.596,1217.53 746.183,1217.49 746.769,1216.29 747.355,1216.45 747.942,1217.8 748.528,1218.9 749.115,1218.82 749.701,1222.94 750.288,1223.75 750.874,1223.4 751.46,1222.88 752.047,1226.52 752.633,1226.21 753.22,1225.97 753.806,1222.54 754.392,1222.37 754.979,1222.21 755.565,1223.34 756.152,1223.01 756.738,1222.29 757.324,1219.17 757.911,1219.99 758.497,1219.92 759.084,1218.34 759.67,1219.35 760.257,1218.14 760.843,1220.57 761.429,1217.38 762.016,1218.45 762.602,1218.5 763.189,1215.64 763.775,1215.53 764.361,1214.03 764.948,1214.28 765.534,1214.29 766.121,1217.11 766.707,1215.54 767.293,1213.98 767.88,1214.48 768.466,1214.63 769.053,1214.73 769.639,1216.17 770.226,1216.29 770.812,1214.91 771.398,1213.54 771.985,1210.93 772.571,1213.99 773.158,1213.92 773.744,1218.33 774.33,1221.15 774.917,1220.79 775.503,1220.44 776.09,1218.53 776.676,1215.9 777.262,1217.03 777.849,1217.01 778.435,1217.11 779.022,1219.72 779.608,1220.89 780.195,1221.87 780.781,1221.53 781.367,1221.26 781.954,1221 782.54,1216.49 783.127,1217.63 783.713,1221.38 784.299,1215.47 784.886,1213.9 785.472,1214.03 786.059,1215.47 786.645,1218.33 787.232,1218.1 787.818,1219.52 788.404,1219.31 788.991,1218.95 789.577,1220.38 790.164,1220.14 790.75,1218.57 791.336,1218.51 791.923,1218.24 792.509,1218.47 793.096,1218.4 793.682,1218.35 794.268,1221.08 794.855,1222.54 795.441,1221.08 796.028,1220.83 796.614,1220.56 797.201,1217.8 797.787,1214.79 798.373,1212.35 798.96,1213.77 799.546,1213.96 800.133,1215.1 800.719,1216.66 801.305,1217.99 801.892,1217.65 802.478,1217.62 803.065,1217.14 803.651,1216.94 804.237,1215.72 804.824,1214.27 805.41,1210.19 805.997,1210.52 806.583,1211.03 807.17,1210.14 807.756,1213.32 808.342,1216.19 808.929,1217.56 809.515,1217.31 810.102,1215.68 810.688,1215.54 811.274,1215.68 811.861,1215.51 812.447,1218.21 813.034,1218.21 813.62,1219.52 814.206,1220.63 814.793,1221.83 815.379,1222.71 815.966,1222.36 816.552,1223.46 817.139,1225.55 817.725,1223.4 818.311,1224.32 818.898,1222.26 819.484,1223.19 820.071,1221.24 820.657,1223.58 821.243,1224.34 821.83,1226.66 822.416,1224.59 823.003,1222.46 823.589,1221.87 824.175,1222.77 824.762,1220.58 825.348,1215.82 825.935,1215.86 826.521,1212.82 827.108,1212.66 827.694,1215.39 828.28,1214.13 828.867,1211.44 829.453,1211.32 830.04,1215.55 830.626,1219.3 831.212,1219.25 831.799,1221.87 832.385,1221.59 832.972,1222.64 833.558,1222.33 834.145,1222.06 834.731,1220.11 835.317,1221.09 835.904,1223.33 836.49,1222.87 837.077,1221.33 837.663,1223.47 838.249,1223.12 838.836,1221.32 839.422,1222.14 840.009,1223.06 840.595,1225.22 841.181,1223.29 841.768,1218.71 842.354,1217 842.941,1213.91 843.527,1215.63 844.114,1214.23 844.7,1215.57 845.286,1215.42 845.873,1216.71 846.459,1217.67 847.046,1217.58 847.632,1215.73 848.218,1215.73 848.805,1215.64 849.391,1216.85 849.978,1215.38 850.564,1215.25 851.15,1215.14 851.737,1215.27 852.323,1212.46 852.91,1215.48 853.496,1214.24 854.083,1214.25 854.669,1213.97 855.255,1212.69 855.842,1214.33 856.428,1211.5 857.015,1210.3 857.601,1209.25 858.187,1212.16 858.774,1207.97 859.36,1208.27 859.947,1211.01 860.533,1211.28 861.119,1212.71 861.706,1214.16 862.292,1212.89 862.879,1214.52 863.465,1213.2 864.052,1211.66 864.638,1210.33 865.224,1210.35 865.811,1209.33 866.397,1209.47 866.984,1211.25 867.57,1211.45 868.156,1213.01 868.743,1213.01 869.329,1211.77 869.916,1210.44 870.502,1206.78 871.089,1207.14 871.675,1207.35 872.261,1206.28 872.848,1210.91 873.434,1209.64 874.021,1211.2 874.607,1213.96 875.193,1213.98 875.78,1214.99 876.366,1216.05 876.953,1216.04 877.539,1215.75 878.125,1214.29 878.712,1212.7 879.298,1207.11 879.885,1208.51 880.471,1207.43 881.058,1207.91 881.644,1208.1 882.23,1207.12 882.817,1208.63 883.403,1208.83 883.99,1209.1 884.576,1208.1 885.162,1209.57 885.749,1209.59 886.335,1212.41 886.922,1212.61 887.508,1215.43 888.094,1215.18 888.681,1217.88 889.267,1216.41 889.854,1216.65 890.44,1210.62 891.027,1211.1 891.613,1211.48 892.199,1211.66 892.786,1213.29 893.372,1213.66 893.959,1214.67 894.545,1214.39 895.131,1216.04 895.718,1216.03 896.304,1214.27 896.891,1218.27 897.477,1218.09 898.063,1219.25 898.65,1217.63 899.236,1216.14 899.823,1214.92 900.409,1217.54 900.996,1210.43 901.582,1210.36 902.168,1210.4 902.755,1213.23 903.341,1214.43 903.928,1216.97 904.514,1215.76 905.1,1215.41 905.687,1215.45 906.273,1214.98 906.86,1212.05 907.446,1213.32 908.032,1214.75 908.619,1213.35 909.205,1213.46 909.792,1213.56 910.378,1216.22 910.965,1215.67 911.551,1214.2 912.137,1214.3 912.724,1211.67 913.31,1213.22 913.897,1213.42 914.483,1213.46 915.069,1214.93 915.656,1212.08 916.242,1207.99 916.829,1205.37 917.415,1202.92 918.002,1202.17 918.588,1202.67 919.174,1207 919.761,1205.73 920.347,1207.43 920.934,1206.67 921.52,1208.3 922.106,1208.44 922.693,1209.89 923.279,1209.84 923.866,1211.17 924.452,1211.24 925.038,1210 925.625,1211.73 926.211,1209 926.798,1209.36 927.384,1209.95 927.971,1211.48 928.557,1210.42 929.143,1212.15 929.73,1213.59 930.316,1212.54 930.903,1213.94 931.489,1212.44 932.075,1215.09 932.662,1215.04 933.248,1214.82 933.835,1216.14 934.421,1217.36 935.007,1218.73 935.594,1218.55 936.18,1219.38 936.767,1219.2 937.353,1218.87 937.94,1218.84 938.526,1219.89 939.112,1218.02 939.699,1216.59 940.285,1217.82 940.872,1216.43 941.458,1216.16 942.044,1217.25 942.631,1217 943.217,1218.05 943.804,1220.3 944.39,1219.78 944.976,1219.72 945.563,1215.21 946.149,1218.12 946.736,1218.99 947.322,1220.06 947.909,1218.12 948.495,1218.01 949.081,1217.82 949.668,1218.9 950.254,1216.08 950.841,1216.17 951.427,1220.02 952.013,1224.95 952.6,1221.78 953.186,1219.88 953.773,1221.75 954.359,1223.96 954.945,1223.68 955.532,1219.08 956.118,1215.92 956.705,1214.55 957.291,1215.89 957.878,1214.31 958.464,1209.95 959.05,1209.94 959.637,1210.01 960.223,1211.39 960.81,1210.05 961.396,1208.81 961.982,1209.21 962.569,1208.11 963.155,1209.83 963.742,1208.94 964.328,1207.68 964.915,1209.27 965.501,1206.38 966.087,1203.85 966.674,1204.48 967.26,1207.5 967.847,1206.5 968.433,1205.21 969.019,1202.87 969.606,1202.96 970.192,1202.24 970.779,1202.98 971.365,1206.33 971.951,1208.05 972.538,1208.26 973.124,1209.75 973.711,1209.82 974.297,1208.42 974.884,1207.36 975.47,1207.63 976.056,1209.25 976.643,1209.33 977.229,1208.49 977.816,1208.75 978.402,1209.3 978.988,1209.52 979.575,1208.33 980.161,1208.61 980.748,1212.89 981.334,1215.74 981.92,1211.7 982.507,1213.17 983.093,1211.77 983.68,1211.64 984.266,1209.93 984.853,1211.32 985.439,1210.26 986.025,1210.2 986.612,1208.92 987.198,1207.67 987.785,1209.32 988.371,1209.83 988.957,1211.25 989.544,1209.96 990.13,1210.16 990.717,1211.85 991.303,1211.67 991.889,1210.46 992.476,1205.24 993.062,1207.27 993.649,1208.95 994.235,1206.8 994.822,1208.55 995.408,1208.71 995.994,1211.49 996.581,1210.29 997.167,1209.47 997.754,1209.45 998.34,1209.59 998.926,1211 999.513,1208.18 1000.1,1205.64 1000.69,1206.27 1001.27,1211.86 1001.86,1209.23 1002.44,1209.38 1003.03,1208.49 1003.62,1208.98 1004.2,1208.08 1004.79,1209.84 1005.38,1212.68 1005.96,1209.94 1006.55,1210 1007.14,1211.32 1007.72,1211.39 1008.31,1213.22 1008.9,1211.98 1009.48,1213.38 1010.07,1216.29 1010.65,1216.07 1011.24,1215.87 1011.83,1217.17 1012.41,1216.73 1013,1218.02 1013.59,1215.38 1014.17,1215.33 1014.76,1215.37 1015.35,1215.44 1015.93,1215.23 1016.52,1216.6 1017.11,1215.15 1017.69,1216.51 1018.28,1219.27 1018.86,1221.63 1019.45,1220.13 1020.04,1222.55 1020.62,1221.85 1021.21,1221.21 1021.8,1217.94 1022.38,1217.59 1022.97,1216.95 1023.56,1218.31 1024.14,1217.74 1024.73,1218.82 1025.32,1219.86 1025.9,1217.97 1026.49,1220.21 1027.07,1219.63 1027.66,1216.71 1028.25,1215.29 1028.83,1215.1 1029.42,1216.51 1030.01,1217.8 1030.59,1217.5 1031.18,1219.84 1031.77,1218.23 1032.35,1216.69 1032.94,1215.05 1033.52,1216.34 1034.11,1216.3 1034.7,1218.58 1035.28,1216.63 1035.87,1216.45 1036.46,1217.71 1037.04,1217.52 1037.63,1218.67 1038.22,1216.93 1038.8,1216.61 1039.39,1217.79 1039.98,1217.31 1040.56,1215.64 1041.15,1214.22 1041.73,1214.14 1042.32,1214.07 1042.91,1214.04 1043.49,1212.59 1044.08,1212.74 1044.67,1213.6 1045.25,1214.86 1045.84,1210.24 1046.43,1208.94 1047.01,1207.95 1047.6,1206.63 1048.19,1206.82 1048.77,1205.84 1049.36,1207.28 1049.94,1208.73 1050.53,1209.03 1051.12,1209.24 1051.7,1210.73 1052.29,1211.07 1052.88,1211.08 1053.46,1212.41 1054.05,1206.92 1054.64,1208.2 1055.22,1208.51 1055.81,1210.16 1056.39,1207.35 1056.98,1207.78 1057.57,1207.82 1058.15,1208.08 1058.74,1205.44 1059.33,1205.67 1059.91,1205.91 1060.5,1203.28 1061.09,1203.66 1061.67,1205.52 1062.26,1203.25 1062.85,1203.77 1063.43,1205.63 1064.02,1207.39 1064.6,1207.79 1065.19,1206.63 1065.78,1205.79 1066.36,1207.48 1066.95,1207.85 1067.54,1206.85 1068.12,1205.91 1068.71,1207.7 1069.3,1207.78 1069.88,1208.02 1070.47,1208.43 1071.06,1209.78 1071.64,1214.01 1072.23,1214.1 1072.81,1209.97 1073.4,1209.87 1073.99,1207.25 1074.57,1209.01 1075.16,1209.27 1075.75,1209.69 1076.33,1209.88 1076.92,1211.11 1077.51,1208.37 1078.09,1207.02 1078.68,1208.41 1079.26,1210.11 1079.85,1210.22 1080.44,1210.33 1081.02,1210.65 1081.61,1207.83 1082.2,1208.38 1082.78,1208.63 1083.37,1210.22 1083.96,1213.08 1084.54,1211.71 1085.13,1211.6 1085.72,1212.91 1086.3,1212.81 1086.89,1215.43 1087.47,1218.07 1088.06,1219.37 1088.65,1219.22 1089.23,1221.51 1089.82,1226.45 1090.41,1227.11 1090.99,1226.59 1091.58,1227.18 1092.17,1224.91 1092.75,1221.57 1093.34,1221.2 1093.93,1221.19 1094.51,1219.1 1095.1,1218.8 1095.68,1217.01 1096.27,1218.2 1096.86,1212.57 1097.44,1213.83 1098.03,1214.98 1098.62,1214.9 1099.2,1214.51 1099.79,1216.99 1100.38,1219.46 1100.96,1221.83 1101.55,1221.42 1102.14,1220.96 1102.72,1221.31 1103.31,1220.93 1103.89,1217.88 1104.48,1216.62 1105.07,1216.07 1105.65,1217.35 1106.24,1217.01 1106.83,1218.24 1107.41,1218.06 1108,1216.53 1108.59,1216.37 1109.17,1219.06 1109.76,1218.64 1110.34,1219.49 1110.93,1223.27 1111.52,1219.95 1112.1,1219.54 1112.69,1218.25 1113.28,1219.43 1113.86,1218.95 1114.45,1215.91 1115.04,1214.05 1115.62,1211.26 1116.21,1207.11 1116.8,1207.61 1117.38,1206.5 1117.97,1206.98 1118.55,1204.49 1119.14,1203.34 1119.73,1205.37 1120.31,1205.93 1120.9,1209.27 1121.49,1209.47 1122.07,1209.91 1122.66,1209.96 1123.25,1210.1 1123.83,1210.18 1124.42,1208.99 1125.01,1209.11 1125.59,1207.99 1126.18,1211.02 1126.76,1213.68 1127.35,1214.71 1127.94,1211.63 1128.52,1214.47 1129.11,1211.74 1129.7,1210.33 1130.28,1210.46 1130.87,1211.91 1131.46,1210.56 1132.04,1207.6 1132.63,1206.52 1133.21,1208.1 1133.8,1207.93 1134.39,1206.71 1134.97,1205.59 1135.56,1204.22 1136.15,1204.5 1136.73,1206.35 1137.32,1204.93 1137.91,1203.96 1138.49,1205.76 1139.08,1205.81 1139.67,1204.68 1140.25,1205.36 1140.84,1204.49 1141.42,1204.84 1142.01,1202.44 1142.6,1208.5 1143.18,1206.37 1143.77,1205.14 1144.36,1205.54 1144.94,1206.22 1145.53,1206.6 1146.12,1208.34 1146.7,1207.44 1147.29,1208.03 1147.88,1208.51 1148.46,1208.54 1149.05,1204.77 1149.63,1206.64 1150.22,1206.81 1150.81,1206.86 1151.39,1207.07 1151.98,1208.83 1152.57,1208.08 1153.15,1211.27 1153.74,1208.61 1154.33,1208.78 1154.91,1209.15 1155.5,1209.51 1156.09,1210.96 1156.67,1212.63 1157.26,1213.88 1157.84,1214.94 1158.43,1214.71 1159.02,1215.88 1159.6,1218.17 1160.19,1216.35 1160.78,1214.83 1161.36,1215.9 1161.95,1217.1 1162.54,1215.61 1163.12,1216.66 1163.71,1214.75 1164.29,1217.54 1164.88,1217.01 1165.47,1216.42 1166.05,1215.97 1166.64,1217.09 1167.23,1215.64 1167.81,1217.86 1168.4,1220 1168.99,1219.37 1169.57,1219.18 1170.16,1218.88 1170.75,1221.2 1171.33,1219.35 1171.92,1218.81 1172.5,1218.18 1173.09,1216.59 1173.68,1216.21 1174.26,1215.81 1174.85,1213.97 1175.44,1215.32 1176.02,1215.23 1176.61,1216.31 1177.2,1217.15 1177.78,1216.74 1178.37,1216.64 1178.96,1217.75 1179.54,1218.65 1180.13,1220.95 1180.71,1219.31 1181.3,1218.95 1181.89,1218.73 1182.47,1214.3 1183.06,1212.84 1183.65,1212.55 1184.23,1211.27 1184.82,1210.03 1185.41,1209.18 1185.99,1206.47 1186.58,1209.44 1187.16,1210.9 1187.75,1211.14 1188.34,1213.88 1188.92,1212.71 1189.51,1209.85 1190.1,1210.06 1190.68,1208.99 1191.27,1210.55 1191.86,1209.16 1192.44,1207.98 1193.03,1208.31 1193.62,1207.12 1194.2,1209.1 1194.79,1210.55 1195.37,1209.1 1195.96,1210.98 1196.55,1208.34 1197.13,1208.69 1197.72,1207.4 1198.31,1207.95 1198.89,1208.07 1199.48,1205.46 1200.07,1204.48 1200.65,1205.02 1201.24,1206.85 1201.83,1209.93 1202.41,1214.25 1203,1214.18 1203.58,1209.66 1204.17,1208.3 1204.76,1208.37 1205.34,1208.56 1205.93,1207.23 1206.52,1207.92 1207.1,1209.61 1207.69,1211 1208.28,1212.6 1208.86,1212.59 1209.45,1213.89 1210.03,1216.46 1210.62,1218.65 1211.21,1218.25 1211.79,1221.99 1212.38,1220.05 1212.97,1218.4 1213.55,1218.04 1214.14,1217.75 1214.73,1216.35 1215.31,1218.91 1215.9,1215.94 1216.49,1212.98 1217.07,1216.81 1217.66,1216.88 1218.24,1218.27 1218.83,1216.6 1219.42,1219.14 1220,1218.49 1220.59,1219.65 1221.18,1221.9 1221.76,1221.35 1222.35,1220.72 1222.94,1218.69 1223.52,1218.17 1224.11,1213.93 1224.7,1216.46 1225.28,1217.63 1225.87,1217.2 1226.45,1217.25 1227.04,1216.91 1227.63,1218.13 1228.21,1220.25 1228.8,1219.72 1229.39,1215.14 1229.97,1216.07 1230.56,1215.98 1231.15,1213.06 1231.73,1214.37 1232.32,1215.73 1232.91,1214.21 1233.49,1214.04 1234.08,1213.87 1234.66,1210.68 1235.25,1209.41 1235.84,1209.51 1236.42,1213.64 1237.01,1210.88 1237.6,1207.97 1238.18,1206.73 1238.77,1205.43 1239.36,1207.37 1239.94,1206.32 1240.53,1206.73 1241.11,1204.26 1241.7,1203.27 1242.29,1202.09 1242.87,1202.69 1243.46,1202.01 1244.05,1203.81 1244.63,1204.41 1245.22,1205.07 1245.81,1206.6 1246.39,1204.26 1246.98,1206.09 1247.57,1209.18 1248.15,1207.86 1248.74,1208.12 1249.32,1207.21 1249.91,1207.68 1250.5,1210.5 1251.08,1212.12 1251.67,1211.94 1252.26,1211.83 1252.84,1210.59 1253.43,1216.08 1254.02,1214.51 1254.6,1217.31 1255.19,1214.26 1255.78,1214.18 1256.36,1217.04 1256.95,1215.51 1257.53,1218.09 1258.12,1216.45 1258.71,1217.68 1259.29,1216.32 1259.88,1214.91 1260.47,1212.17 1261.05,1212.3 1261.64,1213.89 1262.23,1213.82 1262.81,1210.84 1263.4,1210.88 1263.98,1212.46 1264.57,1211.25 1265.16,1208.46 1265.74,1211.19 1266.33,1211.23 1266.92,1211.16 1267.5,1209.81 1268.09,1211.18 1268.68,1209.97 1269.26,1211.59 1269.85,1210.52 1270.44,1210.35 1271.02,1209.13 1271.61,1209.61 1272.19,1211.33 1272.78,1211.51 1273.37,1212.63 1273.95,1214.06 1274.54,1216.52 1275.13,1214.68 1275.71,1214.53 1276.3,1216.01 1276.89,1217.27 1277.47,1215.48 1278.06,1218.09 1278.65,1217.69 1279.23,1215.89 1279.82,1215.95 1280.4,1215.85 1280.99,1215.53 1281.58,1211.4 1282.16,1211.75 1282.75,1213.17 1283.34,1212.96 1283.92,1212.71 1284.51,1212.86 1285.1,1213.79 1285.68,1217.82 1286.27,1216.26 1286.86,1214.79 1287.44,1212.97 1288.03,1212.95 1288.61,1211.58 1289.2,1210.3 1289.79,1213.33 1290.37,1214.44 1290.96,1212.78 1291.55,1211.23 1292.13,1210.91 1292.72,1209.27 1293.31,1209.51 1293.89,1211.17 1294.48,1211.27 1295.06,1213.03 1295.65,1211.51 1296.24,1208.92 1296.82,1211.62 1297.41,1214.15 1298,1213.71 1298.58,1213.84 1299.17,1215.22 1299.76,1216.68 1300.34,1215.51 1300.93,1213.98 1301.52,1213.86 1302.1,1213.55 1302.69,1216.3 1303.27,1218.66 1303.86,1215.33 1304.45,1213.83 1305.03,1212.55 1305.62,1212.48 1306.21,1212.6 1306.79,1217.94 1307.38,1214.78 1307.97,1215.94 1308.55,1217.32 1309.14,1217.26 1309.73,1217.06 1310.31,1215.57 1310.9,1215.85 1311.48,1215.73 1312.07,1215.4 1312.66,1211 1313.24,1208.51 1313.83,1208.62 1314.42,1207.44 1315,1210.56 1315.59,1211.9 1316.18,1214.45 1316.76,1214.29 1317.35,1214.11 1317.93,1216.56 1318.52,1213.22 1319.11,1214.67 1319.69,1214.51 1320.28,1215.67 1320.87,1215.29 1321.45,1213.66 1322.04,1213.73 1322.63,1211.01 1323.21,1209.74 1323.8,1210.01 1324.39,1208.65 1324.97,1210.14 1325.56,1210.13 1326.14,1207.4 1326.73,1206.22 1327.32,1206.31 1327.9,1207.8 1328.49,1205.34 1329.08,1205.57 1329.66,1209.98 1330.25,1210.11 1330.84,1209.94 1331.42,1209.71 1332.01,1211.1 1332.6,1213.85 1333.18,1216.36 1333.77,1217.62 1334.35,1217.52 1334.94,1218.54 1335.53,1215.62 1336.11,1215.32 1336.7,1216.52 1337.29,1215.23 1337.87,1213.7 1338.46,1212.58 1339.05,1214.1 1339.63,1212.53 1340.22,1209.37 1340.8,1209.58 1341.39,1209.75 1341.98,1208.4 1342.56,1210 1343.15,1210.18 1343.74,1211.97 1344.32,1210.52 1344.91,1210.43 1345.5,1209.07 1346.08,1210.42 1346.67,1211.89 1347.26,1211.91 1347.84,1212.18 1348.43,1213.51 1349.01,1213.3 1349.6,1213.4 1350.19,1213.33 1350.77,1214.67 1351.36,1214.48 1351.95,1214.41 1352.53,1214.07 1353.12,1213.87 1353.71,1210.77 1354.29,1213.65 1354.88,1212.5 1355.47,1212.41 1356.05,1212.65 1356.64,1213.99 1357.22,1212.53 1357.81,1212.34 1358.4,1211.01 1358.98,1210.77 1359.57,1205.22 1360.16,1205.35 1360.74,1207.03 1361.33,1207.06 1361.92,1205.88 1362.5,1207.7 1363.09,1209.06 1363.68,1207.77 1364.26,1210.74 1364.85,1206.51 1365.43,1205.28 1366.02,1205.83 1366.61,1206.11 1367.19,1203.5 1367.78,1204.34 1368.37,1204.85 1368.95,1208.31 1369.54,1208.51 1370.13,1208.63 1370.71,1207.14 1371.3,1208.78 1371.88,1213.06 1372.47,1214.45 1373.06,1211.76 1373.64,1208.93 1374.23,1209.1 1374.82,1207.84 1375.4,1208.15 1375.99,1206.89 1376.58,1207.06 1377.16,1207.38 1377.75,1210.12 1378.34,1208.61 1378.92,1208.65 1379.51,1210.12 1380.09,1211.3 1380.68,1212.85 1381.27,1214.22 1381.85,1215.64 1382.44,1216.85 1383.03,1215.38 1383.61,1216.54 1384.2,1213.47 1384.79,1210.45 1385.37,1209.4 1385.96,1206.62 1386.55,1209.67 1387.13,1209.74 1387.72,1211.14 1388.3,1211.59 1388.89,1213.26 1389.48,1214.69 1390.06,1216.07 1390.65,1214.44 1391.24,1215.6 1391.82,1214.04 1392.41,1217.81 1393,1217.76 1393.58,1217.52 1394.17,1218.64 1394.75,1218.57 1395.34,1218.55 1395.93,1216.95 1396.51,1216.61 1397.1,1213.25 1397.69,1213.16 1398.27,1211.78 1398.86,1210.73 1399.45,1213.32 1400.03,1212.19 1400.62,1213.73 1401.21,1213.6 1401.79,1212.37 1402.38,1216.21 1402.96,1217.38 1403.55,1218.19 1404.14,1212.6 1404.72,1212.46 1405.31,1211 1405.9,1213.76 1406.48,1215.04 1407.07,1214.87 1407.66,1215.01 1408.24,1214.65 1408.83,1212.88 1409.42,1211.5 1410,1212.63 1410.59,1211.37 1411.17,1212.82 1411.76,1215.62 1412.35,1212.65 1412.93,1213.78 1413.52,1213.64 1414.11,1215.31 1414.69,1212.29 1415.28,1216.68 1415.87,1219.15 1416.45,1218.67 1417.04,1218.17 1417.63,1220.42 1418.21,1221.64 1418.8,1221.35 1419.38,1222.37 1419.97,1220.34 1420.56,1218.26 1421.14,1217.93 1421.73,1218.86 1422.32,1218.31 1422.9,1213.85 1423.49,1213.64 1424.08,1213.51 1424.66,1213.44 1425.25,1212.18 1425.83,1213.66 1426.42,1213.76 1427.01,1211.18 1427.59,1211.04 1428.18,1209.61 1428.77,1212.42 1429.35,1212.34 1429.94,1213.31 1430.53,1211.77 1431.11,1210.43 1431.7,1211.82 1432.29,1211.83 1432.87,1207.8 1433.46,1208.46 1434.04,1210.01 1434.63,1209.83 1435.22,1207.19 1435.8,1207.08 1436.39,1207.52 1436.98,1207.56 1437.56,1210.49 1438.15,1210.43 1438.74,1213 1439.32,1210.35 1439.91,1210.21 1440.5,1211.85 1441.08,1209.24 1441.67,1208.1 1442.25,1210.81 1442.84,1210.87 1443.43,1209.77 1444.01,1209.78 1444.6,1208.75 1445.19,1209.15 1445.77,1206.58 1446.36,1205.66 1446.95,1206.14 1447.53,1207.67 1448.12,1207.86 1448.7,1208.09 1449.29,1208.1 1449.88,1205.52 1450.46,1205.7 1451.05,1206.16 1451.64,1205.17 1452.22,1205.78 1452.81,1205.96 1453.4,1206.2 1453.98,1209.43 1454.57,1210.75 1455.16,1209.5 1455.74,1208.32 1456.33,1211.47 1456.91,1211.34 1457.5,1213.98 1458.09,1212.49 1458.67,1213.68 1459.26,1213.72 1459.85,1215.15 1460.43,1214.81 1461.02,1218.73 1461.61,1219.64 1462.19,1218.26 1462.78,1220.7 1463.37,1216.3 1463.95,1218.71 1464.54,1221.07 1465.12,1217.51 1465.71,1218.55 1466.3,1218.19 1466.88,1218.33 1467.47,1212.38 1468.06,1213.49 1468.64,1214.69 1469.23,1214.5 1469.82,1214.47 1470.4,1217.08 1470.99,1218.43 1471.57,1219.66 1472.16,1221.77 1472.75,1221.41 1473.33,1219.27 1473.92,1217.6 1474.51,1217.06 1475.09,1215.29 1475.68,1210.77 1476.27,1213.57 1476.85,1210.61 1477.44,1209.46 1478.03,1209.66 1478.61,1207.09 1479.2,1207.5 1479.78,1202.06 1480.37,1201.26 1480.96,1203.2 1481.54,1203.79 1482.13,1204.29 1482.72,1204.42 1483.3,1205 1483.89,1206.68 1484.48,1205.24 1485.06,1209.81 1485.65,1211.58 1486.24,1211.66 1486.82,1211.98 1487.41,1212.02 1487.99,1212.39 1488.58,1213.63 1489.17,1214.86 1489.75,1213.25 1490.34,1213.05 1490.93,1211.52 1491.51,1207.87 1492.1,1206.84 1492.69,1206.99 1493.27,1207.12 1493.86,1207.43 1494.45,1210.38 1495.03,1209.43 1495.62,1208.16 1496.2,1209.96 1496.79,1209.02 1497.38,1205.06 1497.96,1209.7 1498.55,1213.03 1499.14,1215.64 1499.72,1213.7 1500.31,1213.59 1500.9,1213.42 1501.48,1213.37 1502.07,1211 1502.65,1208.54 1503.24,1208.61 1503.83,1205.91 1504.41,1209.18 1505,1206.58 1505.59,1205.35 1506.17,1207.04 1506.76,1209.83 1507.35,1209.98 1507.93,1208.76 1508.52,1210.16 1509.11,1213.07 1509.69,1212.7 1510.28,1214.28 1510.86,1208.49 1511.45,1209.88 1512.04,1209.99 1512.62,1211.67 1513.21,1208.78 1513.8,1209.07 1514.38,1209.33 1514.97,1210.99 1515.56,1209.68 1516.14,1206.97 1516.73,1207.36 1517.32,1207.53 1517.9,1207.95 1518.49,1208.44 1519.07,1208.71 1519.66,1210.16 1520.25,1208.72 1520.83,1209.13 1521.42,1206.63 1522.01,1207.02 1522.59,1204.57 1523.18,1207.58 1523.77,1206.57 1524.35,1205.47 1524.94,1206.1 1525.52,1208.14 1526.11,1208.37 1526.7,1208.25 1527.28,1209.73 1527.87,1210.1 1528.46,1211.43 1529.04,1211.67 1529.63,1212.99 1530.22,1207.89 1530.8,1206.69 1531.39,1207.04 1531.98,1208.49 1532.56,1211.25 1533.15,1209.79 1533.73,1210.17 1534.32,1207.46 1534.91,1206.55 1535.49,1207.93 1536.08,1205.13 1536.67,1206.81 1537.25,1207.21 1537.84,1210.02 1538.43,1208.63 1539.01,1207.54 1539.6,1207.79 1540.19,1209.23 1540.77,1210.74 1541.36,1213.56 1541.94,1209.32 1542.53,1209.57 1543.12,1209.72 1543.7,1213.64 1544.29,1213.55 1544.88,1212.03 1545.46,1210.56 1546.05,1209.37 1546.64,1209.42 1547.22,1211.19 1547.81,1211.35 1548.4,1211.4 1548.98,1212.62 1549.57,1215.46 1550.15,1216.6 1550.74,1216.4 1551.33,1215.14 1551.91,1214.96 1552.5,1213.14 1553.09,1211.73 1553.67,1213.2 1554.26,1214.59 1554.85,1215.71 1555.43,1214.04 1556.02,1212.34 1556.6,1212.21 1557.19,1211.99 1557.78,1211.79 1558.36,1210.73 1558.95,1210.86 1559.54,1212.44 1560.12,1212.49 1560.71,1212.62 1561.3,1212.55 1561.88,1216.34 1562.47,1216.23 1563.06,1216.4 1563.64,1215.97 1564.23,1215.8 1564.81,1215.65 1565.4,1213.8 1565.99,1216.29 1566.57,1217.24 1567.16,1217.04 1567.75,1215.3 1568.33,1216.42 1568.92,1216.19 1569.51,1217.29 1570.09,1218.4 1570.68,1219.37 1571.27,1217.6 1571.85,1220.04 1572.44,1218.3 1573.02,1216.47 1573.61,1217.26 1574.2,1220.1 1574.78,1221.04 1575.37,1221.97 1575.96,1222.96 1576.54,1222.45 1577.13,1222.04 1577.72,1221.39 1578.3,1218.45 1578.89,1219.86 1579.47,1219.44 1580.06,1220.65 1580.65,1220.32 1581.23,1221.46 1581.82,1218.14 1582.41,1217.88 1582.99,1215.01 1583.58,1214.92 1584.17,1214.64 1584.75,1214.34 1585.34,1212.64 1585.93,1212.79 1586.51,1213.92 1587.1,1213.96 1587.68,1215.36 1588.27,1213.98 1588.86,1215.25 1589.44,1215.24 1590.03,1215.06 1590.62,1214.77 1591.2,1214.73 1591.79,1218.39 1592.38,1219.46 1592.96,1217.56 1593.55,1214.59 1594.14,1214.97 1594.72,1213.01 1595.31,1210.08 1595.89,1211.35 1596.48,1212.61 1597.07,1213.75 1597.65,1213.54 1598.24,1213.69 1598.83,1213.78 1599.41,1214.82 1600,1218.33 1600.59,1217.95 1601.17,1218.78 1601.76,1218.24 1602.34,1216.49 1602.93,1216.35 1603.52,1216.07 1604.1,1214.46 1604.69,1216.94 1605.28,1215.43 1605.86,1212.44 1606.45,1209.21 1607.04,1210.96 1607.62,1212.76 1608.21,1211.23 1608.8,1211.24 1609.38,1209.77 1609.97,1208.62 1610.55,1210.16 1611.14,1213.08 1611.73,1208.68 1612.31,1206.33 1612.9,1206.56 1613.49,1205.54 1614.07,1201.68 1614.66,1202.12 1615.25,1203.91 1615.83,1201.96 1616.42,1199.71 1617.01,1200.34 1617.59,1201.05 1618.18,1201.83 1618.76,1200.99 1619.35,1202.83 1619.94,1199.32 1620.52,1203.06 1621.11,1203.64 1621.7,1203.96 1622.28,1204.58 1622.87,1203.58 1623.46,1204.1 1624.04,1206.08 1624.63,1206.43 1625.22,1205.5 1625.8,1207.24 1626.39,1207.18 1626.97,1205.92 1627.56,1210.06 1628.15,1210.09 1628.73,1206.06 1629.32,1209.41 1629.91,1211.03 1630.49,1211.32 1631.08,1211.21 1631.67,1209.73 1632.25,1208.33 1632.84,1208.35 1633.42,1208.32 1634.01,1208.79 1634.6,1210.23 1635.18,1209.01 1635.77,1211.73 1636.36,1214.68 1636.94,1214.44 1637.53,1213.11 1638.12,1213.15 1638.7,1211.71 1639.29,1210.64 1639.88,1214.83 1640.46,1214.49 1641.05,1215.76 1641.63,1215.79 1642.22,1217.08 1642.81,1215.8 1643.39,1215.48 1643.98,1214.06 1644.57,1216.75 1645.15,1216.48 1645.74,1214.81 1646.33,1215.86 1646.91,1215.48 1647.5,1215.22 1648.09,1214.83 1648.67,1211.71 1649.26,1213.1 1649.84,1215.84 1650.43,1215.46 1651.02,1213.82 1651.6,1214.01 1652.19,1214.98 1652.78,1213.55 1653.36,1213.77 1653.95,1209.58 1654.54,1211.27 1655.12,1211.6 1655.71,1210.38 1656.29,1211.85 1656.88,1210.68 1657.47,1210.59 1658.05,1211.96 1658.64,1209.04 1659.23,1209.2 1659.81,1209.54 1660.4,1211.04 1660.99,1211.31 1661.57,1210.07 1662.16,1210.24 1662.75,1212.01 1663.33,1214.91 1663.92,1216.12 1664.5,1218.59 1665.09,1219.71 1665.68,1217.98 1666.26,1213.44 1666.85,1210.5 1667.44,1209.16 1668.02,1210.74 1668.61,1209.64 1669.2,1209.72 1669.78,1209.66 1670.37,1211.24 1670.96,1209.91 1671.54,1208.53 1672.13,1207.34 1672.71,1207.55 1673.3,1210.63 1673.89,1211.99 1674.47,1213.31 1675.06,1210.57 1675.65,1212 1676.23,1211.9 1676.82,1211.77 1677.41,1210.59 1677.99,1207.65 1678.58,1204.84 1679.17,1208.38 1679.75,1204.4 1680.34,1207.42 1680.92,1207.76 1681.51,1206.61 1682.1,1207.88 1682.68,1209.44 1683.27,1209.72 1683.86,1207.22 1684.44,1210.11 1685.03,1210.11 1685.62,1212.79 1686.2,1212.62 1686.79,1212.42 1687.37,1210.98 1687.96,1211.14 1688.55,1210.97 1689.13,1213.55 1689.72,1213.91 1690.31,1211.24 1690.89,1212.87 1691.48,1211.63 1692.07,1212.99 1692.65,1213.02 1693.24,1213.12 1693.83,1210.31 1694.41,1211.68 1695,1212.79 1695.58,1209.69 1696.17,1209.8 1696.76,1210.1 1697.34,1211.38 1697.93,1208.66 1698.52,1209.04 1699.1,1211.93 1699.69,1210.58 1700.28,1211.86 1700.86,1216.26 1701.45,1214.79 1702.04,1213.33 1702.62,1213.32 1703.21,1216.21 1703.79,1217.05 1704.38,1219.37 1704.97,1219.14 1705.55,1218.41 1706.14,1215.24 1706.73,1217.78 1707.31,1217.76 1707.9,1218.71 1708.49,1215.61 1709.07,1215.68 1709.66,1215.11 1710.24,1212.05 1710.83,1213.05 1711.42,1211.6 1712,1211.51 1712.59,1207.48 1713.18,1206.18 1713.76,1212.12 1714.35,1212.31 1714.94,1214.9 1715.52,1213.5 1716.11,1218.75 1716.7,1218.48 1717.28,1219.64 1717.87,1217.78 1718.45,1217.34 1719.04,1215.69 1719.63,1211.54 1720.21,1211.42 1720.8,1214.04 1721.39,1214.01 1721.97,1213.73 1722.56,1210.85 1723.15,1212.24 1723.73,1212.19 1724.32,1214.95 1724.91,1213.26 1725.49,1214.21 1726.08,1216.97 1726.66,1215.2 1727.25,1217.45 1727.84,1217.02 1728.42,1216.99 1729.01,1219.48 1729.6,1217.69 1730.18,1214.8 1730.77,1211.76 1731.36,1213.12 1731.94,1210.26 1732.53,1208.75 1733.11,1207.5 1733.7,1210.65 1734.29,1213.24 1734.87,1215.83 1735.46,1214.59 1736.05,1214.58 1736.63,1215.84 1737.22,1215.72 1737.81,1214.29 1738.39,1212.91 1738.98,1212.78 1739.57,1212.62 1740.15,1213.85 1740.74,1213.62 1741.32,1210.82 1741.91,1209.52 1742.5,1210.94 1743.08,1207.02 1743.67,1204.54 1744.26,1203.21 1744.84,1205.06 1745.43,1205.82 1746.02,1204.64 1746.6,1203.7 1747.19,1204.15 1747.78,1206.15 1748.36,1206.51 1748.95,1205.21 1749.53,1202.94 1750.12,1204.79 1750.71,1202.57 1751.29,1204.54 1751.88,1208.23 1752.47,1204.64 1753.05,1205.22 1753.64,1209.85 1754.23,1208.69 1754.81,1207.56 1755.4,1205.18 1755.99,1205.58 1756.57,1207.47 1757.16,1206.7 1757.74,1208.34 1758.33,1210.09 1758.92,1211.42 1759.5,1211.81 1760.09,1214.47 1760.68,1215.64 1761.26,1214.08 1761.85,1212.58 1762.44,1209.92 1763.02,1212.97 1763.61,1212.95 1764.19,1214.36 1764.78,1214.22 1765.37,1219.54 1765.95,1217.6 1766.54,1216.04 1767.13,1214.75 1767.71,1212.97 1768.3,1213.06 1768.89,1210.5 1769.47,1210.31 1770.06,1213.35 1770.65,1210.61 1771.23,1207.98 1771.82,1212.26 1772.4,1213.76 1772.99,1209.28 1773.58,1208.11 1774.16,1208.19 1774.75,1208.44 1775.34,1208.52 1775.92,1208.73 1776.51,1207.67 1777.1,1210.4 1777.68,1213.23 1778.27,1214.5 1778.86,1211.47 1779.44,1211.56 1780.03,1211.37 1780.61,1209.91 1781.2,1208.67 1781.79,1207.47 1782.37,1206.26 1782.96,1207.69 1783.55,1208.05 1784.13,1205.53 1784.72,1207.03 1785.31,1205.67 1785.89,1206.41 1786.48,1209.34 1787.06,1209.51 1787.65,1208.36 1788.24,1208.37 1788.82,1208.41 1789.41,1205.92 1790,1210.35 1790.58,1207.43 1791.17,1207.52 1791.76,1205.15 1792.34,1205.06 1792.93,1206.72 1793.52,1205.62 1794.1,1205.92 1794.69,1209 1795.27,1207.64 1795.86,1205.26 1796.45,1205.37 1797.03,1204.27 1797.62,1204.48 1798.21,1203.64 1798.79,1206.9 1799.38,1208.32 1799.97,1207.05 1800.55,1208.78 1801.14,1211.41 1801.73,1212.82 1802.31,1211.29 1802.9,1211.12 1803.48,1210.8 1804.07,1212.15 1804.66,1214.8 1805.24,1211.67 1805.83,1210.43 1806.42,1210.47 1807,1213.58 1807.59,1212.29 1808.18,1216.23 1808.76,1215.92 1809.35,1214.38 1809.94,1215.7 1810.52,1216.99 1811.11,1218.24 1811.69,1216.28 1812.28,1216.33 1812.87,1217.69 1813.45,1217.35 1814.04,1217.02 1814.63,1216.63 1815.21,1217.71 1815.8,1218.74 1816.39,1215.41 1816.97,1213.63 1817.56,1216.2 1818.14,1215.79 1818.73,1212.85 1819.32,1211.21 1819.9,1212.35 1820.49,1213.9 1821.08,1212.3 1821.66,1210.93 1822.25,1212.59 1822.84,1212.64 1823.42,1212.49 1824.01,1209.83 1824.6,1218.07 1825.18,1217.49 1825.77,1218.74 1826.35,1215.57 1826.94,1216.71 1827.53,1217.67 1828.11,1216.16 1828.7,1214.44 1829.29,1216.08 1829.87,1219.99 1830.46,1219.48 1831.05,1216.46 1831.63,1213.63 1832.22,1215.01 1832.81,1213.4 1833.39,1211.8 1833.98,1213.15 1834.56,1213.19 1835.15,1215.86 1835.74,1215.57 1836.32,1215.49 1836.91,1212.67 1837.5,1215.51 1838.08,1212.4 1838.67,1210.82 1839.26,1209.58 1839.84,1205.71 1840.43,1207.48 1841.01,1207.92 1841.6,1207.88 1842.19,1208.44 1842.77,1211.67 1843.36,1214.39 1843.95,1215.52 1844.53,1215.4 1845.12,1215.08 1845.71,1215 1846.29,1217.45 1846.88,1216 1847.47,1217.01 1848.05,1217.98 1848.64,1216.4 1849.22,1216.21 1849.81,1218.79 1850.4,1219.64 1850.98,1217.85 1851.57,1219.04 1852.16,1220.27 1852.74,1221.42 1853.33,1219.58 1853.92,1219.26 1854.5,1218.98 1855.09,1219.71 1855.68,1222.12 1856.26,1224.45 1856.85,1222.57 1857.43,1220.5 1858.02,1217.48 1858.61,1217.29 1859.19,1217.2 1859.78,1216.74 1860.37,1217.84 1860.95,1214.6 1861.54,1213.17 1862.13,1211.73 1862.71,1211.77 1863.3,1213.11 1863.88,1211.57 1864.47,1210.06 1865.06,1210.3 1865.64,1211.92 1866.23,1211.77 1866.82,1211.66 1867.4,1211.57 1867.99,1210.41 1868.58,1209.11 1869.16,1209.41 1869.75,1208.32 1870.34,1208.64 1870.92,1210.38 1871.51,1210.28 1872.09,1210.3 1872.68,1205.04 1873.27,1205.44 1873.85,1203.07 1874.44,1206.34 1875.03,1208.28 1875.61,1206.85 1876.2,1205.67 1876.79,1208.54 1877.37,1210.35 1877.96,1211.79 1878.55,1214.61 1879.13,1212.02 1879.72,1212.21 1880.3,1212.28 1880.89,1208.18 1881.48,1208.1 1882.06,1210.85 1882.65,1209.68 1883.24,1209.63 1883.82,1209.63 1884.41,1210.89 1885,1209.75 1885.58,1211.41 1886.17,1211.28 1886.76,1209.86 1887.34,1208.58 1887.93,1205.94 1888.51,1206.1 1889.1,1203.71 1889.69,1204.22 1890.27,1204.7 1890.86,1203.61 1891.45,1205.15 1892.03,1205.68 1892.62,1205.9 1893.21,1206.12 1893.79,1206.36 1894.38,1205.52 1894.96,1204.56 1895.55,1206.37 1896.14,1209.65 1896.72,1208.35 1897.31,1207.49 1897.9,1213.35 1898.48,1213.25 1899.07,1213.21 1899.66,1214.79 1900.24,1213.24 1900.83,1212.88 1901.42,1214.09 1902,1213.59 1902.59,1214.93 1903.17,1213.53 1903.76,1212.09 1904.35,1212.28 1904.93,1213.43 1905.52,1213.28 1906.11,1216.05 1906.69,1214.6 1907.28,1214.31 1907.87,1216.75 1908.45,1216.64 1909.04,1215.16 1909.63,1215.12 1910.21,1214.54 1910.8,1214.39 1911.38,1214.58 1911.97,1214.55 1912.56,1214.29 1913.14,1210.05 1913.73,1208.81 1914.32,1208.93 1914.9,1206.45 1915.49,1206.72 1916.08,1208.5 1916.66,1207.17 1917.25,1207.26 1917.83,1207.36 1918.42,1206.27 1919.01,1209.52 1919.59,1208.06 1920.18,1208.2 1920.77,1208.34 1921.35,1208.51 1921.94,1208.63 1922.53,1208.92 1923.11,1209.12 1923.7,1208.14 1924.29,1205.88 1924.87,1207.55 1925.46,1207.71 1926.04,1209.33 1926.63,1210.67 1927.22,1210.82 1927.8,1211.98 1928.39,1214.84 1928.98,1215.86 1929.56,1216.79 1930.15,1216.69 1930.74,1210.94 1931.32,1209.84 1931.91,1207.19 1932.5,1203.68 1933.08,1201.59 1933.67,1203.94 1934.25,1205.81 1934.84,1204.72 1935.43,1203.78 1936.01,1204.3 1936.6,1204.84 1937.19,1206.5 1937.77,1203.93 1938.36,1204.27 1938.95,1206.14 1939.53,1207.92 1940.12,1205.57 1940.71,1205.96 1941.29,1206.37 1941.88,1205.52 1942.46,1204.57 1943.05,1204.77 1943.64,1207.79 1944.22,1209.24 1944.81,1209.27 1945.4,1209.32 1945.98,1208.34 1946.57,1208.62 1947.16,1210.25 1947.74,1211.81 1948.33,1211.82 1948.91,1213.14 1949.5,1212.96 1950.09,1215.73 1950.67,1215.43 1951.26,1213.96 1951.85,1214.07 1952.43,1215.18 1953.02,1219.27 1953.61,1217.6 1954.19,1219.58 1954.78,1219.07 1955.37,1217.6 1955.95,1215.77 1956.54,1218.35 1957.12,1216.76 1957.71,1219.48 1958.3,1219.2 1958.88,1217.23 1959.47,1218.33 1960.06,1218.14 1960.64,1219.01 1961.23,1222.87 1961.82,1223.83 1962.4,1222.84 1962.99,1217.96 1963.58,1216 1964.16,1217.05 1964.75,1213.57 1965.33,1212 1965.92,1210.8 1966.51,1212.3 1967.09,1215.3 1967.68,1217.87 1968.27,1216.45 1968.85,1215.02 1969.44,1211.95 1970.03,1212.14 1970.61,1211.33 1971.2,1211.59 1971.78,1212.95 1972.37,1209.96 1972.96,1211.45 1973.54,1214.23 1974.13,1215.56 1974.72,1215.29 1975.3,1216.57 1975.89,1213.76 1976.48,1215.08 1977.06,1213.2 1977.65,1215.76 1978.24,1217.17 1978.82,1218.23 1979.41,1215.41 1979.99,1215.41 1980.58,1216.61 1981.17,1216.53 1981.75,1216.22 1982.34,1215.97 1982.93,1215.75 1983.51,1214.36 1984.1,1216.73 1984.69,1216.56 1985.27,1216.5 1985.86,1217.67 1986.45,1218.65 1987.03,1218.41 1987.62,1218.25 1988.2,1216.68 1988.79,1215.26 1989.38,1217.82 1989.96,1217.36 1990.55,1215.72 1991.14,1218.33 1991.72,1217.96 1992.31,1218.87 1992.9,1220.21 1993.48,1219.71 1994.07,1218.09 1994.65,1214.89 1995.24,1210.65 1995.83,1210.53 1996.41,1213.21 1997,1214.71 1997.59,1214.35 1998.17,1216.9 1998.76,1218.08 1999.35,1218.99 1999.93,1217.15 2000.52,1218.02 2001.11,1219.03 2001.69,1218.68 2002.28,1218.33 2002.86,1216.79 2003.45,1210.83 2004.04,1208.19 2004.62,1206.59 2005.21,1212.08 2005.8,1210.5 2006.38,1212.05 2006.97,1210.75 2007.56,1206.73 2008.14,1209.75 2008.73,1208.54 2009.32,1208.55 2009.9,1208.71 2010.49,1207.59 2011.07,1210.83 2011.66,1209.83 2012.25,1210.25 2012.83,1210.42 2013.42,1205.26 2014.01,1205.34 2014.59,1206.96 2015.18,1207.28 2015.77,1206.08 2016.35,1206.5 2016.94,1207.05 2017.53,1207.35 2018.11,1207.95 2018.7,1206.5 2019.28,1205.69 2019.87,1207.35 2020.46,1201.95 2021.04,1202.65 2021.63,1201.54 2022.22,1199.23 2022.8,1201.22 2023.39,1202.15 2023.98,1201.49 2024.56,1200.56 2025.15,1201.16 2025.73,1199.19 2026.32,1199.94 2026.91,1204.71 2027.49,1206.41 2028.08,1209.47 2028.67,1209.83 2029.25,1209.98 2029.84,1207.26 2030.43,1208.95 2031.01,1207.81 2031.6,1208.19 2032.19,1206.88 2032.77,1208.3 2033.36,1206.79 2033.94,1207.04 2034.53,1205.6 2035.12,1201.82 2035.7,1202.42 2036.29,1204.15 2036.88,1204.41 2037.46,1204.81 2038.05,1203.64 2038.64,1205.6 2039.22,1208.67 2039.81,1207.47 2040.4,1207.57 2040.98,1205.43 2041.57,1205.84 2042.15,1206.06 2042.74,1204.96 2043.33,1205.15 2043.91,1208.18 2044.5,1208.09 2045.09,1208.46 2045.67,1209.9 2046.26,1212.9 2046.85,1210.19 2047.43,1211.33 2048.02,1211.34 2048.6,1214.19 2049.19,1216.83 2049.78,1216.48 2050.36,1217.46 2050.95,1217.17 2051.54,1218.24 2052.12,1217.68 2052.71,1217.15 2053.3,1220.68 2053.88,1219.93 2054.47,1219.25 2055.06,1218.94 2055.64,1216.05 2056.23,1215.56 2056.81,1215.29 2057.4,1218.12 2057.99,1216.68 2058.57,1217.78 2059.16,1217.63 2059.75,1217.54 2060.33,1219.8 2060.92,1217.78 2061.51,1216.03 2062.09,1215.64 2062.68,1215.35 2063.27,1214.91 2063.85,1215.12 2064.44,1210.95 2065.02,1210.77 2065.61,1210.92 2066.2,1211.21 2066.78,1211.01 2067.37,1212.16 2067.96,1214.85 2068.54,1217.62 2069.13,1217.41 2069.72,1215.48 2070.3,1218.28 2070.89,1216.73 2071.48,1220.58 2072.06,1222.75 2072.65,1222.21 2073.23,1224.25 2073.82,1220.92 2074.41,1219.19 2074.99,1219.01 2075.58,1218.61 2076.17,1216.79 2076.75,1215.09 2077.34,1215.09 2077.93,1215.96 2078.51,1215.48 2079.1,1216.47 2079.68,1216.05 2080.27,1217.26 2080.86,1216.76 2081.44,1216.35 2082.03,1216.01 2082.62,1218.25 2083.2,1219.05 2083.79,1219.95 2084.38,1219.32 2084.96,1217.24 2085.55,1215.7 2086.14,1216.91 2086.72,1218.19 2087.31,1217.72 2087.89,1217.51 2088.48,1216 2089.07,1215.83 2089.65,1212.75 2090.24,1211.13 2090.83,1211.47 2091.41,1215.64 2092,1213.95 2092.59,1212.32 2093.17,1209.57 2093.76,1206.82 2094.35,1207.31 2094.93,1204.96 2095.52,1205.37 2096.1,1205.78 2096.69,1203.47 2097.28,1206.61 2097.86,1208 2098.45,1206.61 2099.04,1209.85 2099.62,1211.43 2100.21,1210.23 2100.8,1210.18 2101.38,1205.03 2101.97,1205.6 2102.55,1205.98 2103.14,1205.95 2103.73,1206.26 2104.31,1208.22 2104.9,1208.06 2105.49,1210.88 2106.07,1212.24 2106.66,1212.2 2107.25,1212.22 2107.83,1209.07 2108.42,1210.52 2109.01,1211.85 2109.59,1209.04 2110.18,1209.31 2110.76,1209.04 2111.35,1208.07 2111.94,1210.87 2112.52,1212.24 2113.11,1211.91 2113.7,1211.98 2114.28,1211.96 2114.87,1211.88 2115.46,1210.32 2116.04,1211.73 2116.63,1211.73 2117.22,1214.35 2117.8,1215.86 2118.39,1218.27 2118.97,1214.99 2119.56,1215.05 2120.15,1216.46 2120.73,1213.57 2121.32,1213.39 2121.91,1214.52 2122.49,1215.57 2123.08,1219.37 2123.67,1214.57 2124.25,1211.64 2124.84,1210.24 2125.42,1208.89 2126.01,1211.62 2126.6,1211.88 2127.18,1210.77 2127.77,1212.05 2128.36,1213.59 2128.94,1214.94 2129.53,1216.07 2130.12,1215.86 2130.7,1215.79 2131.29,1215.48 2131.88,1214.04 2132.46,1212.55 2133.05,1212.39 2133.63,1212.37 2134.22,1216.05 2134.81,1213.21 2135.39,1214.29 2135.98,1213.95 2136.57,1212.67 2137.15,1211.09 2137.74,1212.54 2138.33,1212.64 2138.91,1209.96 2139.5,1209.76 2140.09,1209.83 2140.67,1208.32 2141.26,1209.77 2141.84,1209.84 2142.43,1211.43 2143.02,1211.35 2143.6,1211.42 2144.19,1215.37 2144.78,1211.19 2145.36,1211.26 2145.95,1215.59 2146.54,1215.39 2147.12,1213.87 2147.71,1212.22 2148.3,1210.71 2148.88,1209.5 2149.47,1208.19 2150.05,1208.51 2150.64,1207.63 2151.23,1207.82 2151.81,1206.32 2152.4,1204.94 2152.99,1205.32 2153.57,1207.09 2154.16,1208.71 2154.75,1211.76 2155.33,1209.02 2155.92,1209.08 2156.5,1209.14 2157.09,1210.93 2157.68,1209.32 2158.26,1209.5 \"/>\n<path clip-path=\"url(#clip282)\" d=\"M986.025 1212.54 L986.612 1212.54 L987.198 1212.54 L987.785 1212.54 L988.371 1212.54 L988.957 1212.54 L989.544 1212.54 L990.13 1212.54 L990.717 1212.54 L991.303 1212.54 L991.889 1212.54 L992.476 1212.54 L993.062 1212.54 L993.649 1212.54 L994.235 1212.54 L994.822 1212.54 L995.408 1212.54 L995.994 1212.54 L996.581 1212.54 L997.167 1212.54 L997.754 1212.54 L998.34 1212.54 L998.926 1212.54 L999.513 1212.54 L1000.1 1212.54 L1000.69 1212.54 L1001.27 1212.54 L1001.86 1212.54 L1002.44 1212.54 L1003.03 1212.54 L1003.62 1212.54 L1004.2 1212.54 L1004.79 1212.54 L1005.38 1212.54 L1005.96 1212.54 L1006.55 1212.54 L1007.14 1212.54 L1007.72 1212.54 L1008.31 1212.54 L1008.9 1212.54 L1009.48 1212.54 L1010.07 1212.54 L1010.65 1212.54 L1011.24 1212.54 L1011.83 1212.54 L1012.41 1212.54 L1013 1212.54 L1013.59 1212.54 L1014.17 1212.54 L1014.76 1212.54 L1015.35 1212.54 L1015.93 1212.54 L1016.52 1212.54 L1017.11 1212.54 L1017.69 1212.54 L1018.28 1212.54 L1018.86 1212.54 L1019.45 1212.54 L1020.04 1212.54 L1020.62 1212.54 L1021.21 1212.54 L1021.8 1212.54 L1022.38 1212.54 L1022.97 1212.54 L1023.56 1212.54 L1024.14 1212.54 L1024.73 1212.54 L1025.32 1212.54 L1025.9 1212.54 L1026.49 1212.54 L1027.07 1212.54 L1027.66 1212.54 L1028.25 1212.54 L1028.83 1212.54 L1029.42 1212.54 L1030.01 1212.54 L1030.59 1212.54 L1031.18 1212.54 L1031.77 1212.54 L1032.35 1212.54 L1032.94 1212.54 L1033.52 1212.54 L1034.11 1212.54 L1034.7 1212.54 L1035.28 1212.54 L1035.87 1212.54 L1036.46 1212.54 L1037.04 1212.54 L1037.63 1212.54 L1038.22 1212.54 L1038.8 1212.54 L1039.39 1212.54 L1039.98 1212.54 L1040.56 1212.54 L1041.15 1212.54 L1041.73 1212.54 L1042.32 1212.54 L1042.91 1212.54 L1043.49 1212.54 L1044.08 1212.54 L1044.67 1212.54 L1045.25 1212.54 L1045.84 1212.54 L1046.43 1212.54 L1047.01 1212.54 L1047.6 1212.54 L1048.19 1212.54 L1048.77 1212.54 L1049.36 1212.54 L1049.94 1212.54 L1050.53 1212.54 L1051.12 1212.54 L1051.7 1212.54 L1052.29 1212.54 L1052.88 1212.54 L1053.46 1212.54 L1054.05 1212.54 L1054.64 1212.54 L1055.22 1212.54 L1055.81 1212.54 L1056.39 1212.54 L1056.98 1212.54 L1057.57 1212.54 L1058.15 1212.54 L1058.74 1212.54 L1059.33 1212.54 L1059.91 1212.54 L1060.5 1212.54 L1061.09 1212.54 L1061.67 1212.54 L1062.26 1212.54 L1062.85 1212.54 L1063.43 1212.54 L1064.02 1212.54 L1064.6 1212.54 L1065.19 1212.54 L1065.78 1212.54 L1066.36 1212.54 L1066.95 1212.54 L1067.54 1212.54 L1068.12 1212.54 L1068.71 1212.54 L1069.3 1212.54 L1069.88 1212.54 L1070.47 1212.54 L1071.06 1212.54 L1071.64 1212.54 L1072.23 1212.54 L1072.81 1212.54 L1073.4 1212.54 L1073.99 1212.54 L1074.57 1212.54 L1075.16 1212.54 L1075.75 1212.54 L1076.33 1212.54 L1076.92 1212.54 L1077.51 1212.54 L1078.09 1212.54 L1078.68 1212.54 L1079.26 1212.54 L1079.85 1212.54 L1080.44 1212.54 L1081.02 1212.54 L1081.61 1212.54 L1082.2 1212.54 L1082.78 1212.54 L1083.37 1212.54 L1083.96 1212.54 L1084.54 1212.54 L1085.13 1212.54 L1085.72 1212.54 L1086.3 1212.54 L1086.89 1212.54 L1087.47 1212.54 L1088.06 1212.54 L1088.65 1212.54 L1089.23 1212.54 L1089.82 1212.54 L1090.41 1212.54 L1090.99 1212.54 L1091.58 1212.54 L1092.17 1212.54 L1092.75 1212.54 L1093.34 1212.54 L1093.93 1212.54 L1094.51 1212.54 L1095.1 1212.54 L1095.68 1212.54 L1096.27 1212.54 L1096.86 1212.54 L1097.44 1212.54 L1098.03 1212.54 L1098.62 1212.54 L1099.2 1212.54 L1099.79 1212.54 L1100.38 1212.54 L1100.96 1212.54 L1101.55 1212.54 L1102.14 1212.54 L1102.72 1212.54 L1103.31 1212.54 L1103.89 1212.54 L1104.48 1212.54 L1105.07 1212.54 L1105.65 1212.54 L1106.24 1212.54 L1106.83 1212.54 L1107.41 1212.54 L1108 1212.54 L1108.59 1212.54 L1109.17 1212.54 L1109.76 1212.54 L1110.34 1212.54 L1110.93 1212.54 L1111.52 1212.54 L1112.1 1212.54 L1112.69 1212.54 L1113.28 1212.54 L1113.86 1212.54 L1114.45 1212.54 L1115.04 1212.54 L1115.62 1212.54 L1116.21 1212.54 L1116.8 1212.54 L1117.38 1212.54 L1117.97 1212.54 L1118.55 1212.54 L1119.14 1212.54 L1119.73 1212.54 L1120.31 1212.54 L1120.9 1212.54 L1121.49 1212.54 L1122.07 1212.54 L1122.66 1212.54 L1123.25 1212.54 L1123.83 1212.54 L1124.42 1212.54 L1125.01 1212.54 L1125.59 1212.54 L1126.18 1212.54 L1126.76 1212.54 L1127.35 1212.54 L1127.94 1212.54 L1128.52 1212.54 L1129.11 1212.54 L1129.7 1212.54 L1130.28 1212.54 L1130.87 1212.54 L1131.46 1212.54 L1132.04 1212.54 L1132.63 1212.54 L1133.21 1212.54 L1133.8 1212.54 L1134.39 1212.54 L1134.97 1212.54 L1135.56 1212.54 L1136.15 1212.54 L1136.73 1212.54 L1137.32 1212.54 L1137.91 1212.54 L1138.49 1212.54 L1139.08 1212.54 L1139.67 1212.54 L1140.25 1212.54 L1140.84 1212.54 L1141.42 1212.54 L1142.01 1212.54 L1142.6 1212.54 L1143.18 1212.54 L1143.77 1212.54 L1144.36 1212.54 L1144.94 1212.54 L1145.53 1212.54 L1146.12 1212.54 L1146.7 1212.54 L1147.29 1212.54 L1147.88 1212.54 L1148.46 1212.54 L1149.05 1212.54 L1149.63 1212.54 L1150.22 1212.54 L1150.81 1212.54 L1151.39 1212.54 L1151.98 1212.54 L1152.57 1212.54 L1153.15 1212.54 L1153.74 1212.54 L1154.33 1212.54 L1154.91 1212.54 L1155.5 1212.54 L1156.09 1212.54 L1156.67 1212.54 L1157.26 1212.54 L1157.84 1212.54 L1158.43 1212.54 L1159.02 1212.54 L1159.6 1212.54 L1160.19 1212.54 L1160.78 1212.54 L1161.36 1212.54 L1161.95 1212.54 L1162.54 1212.54 L1163.12 1212.54 L1163.71 1212.54 L1164.29 1212.54 L1164.88 1212.54 L1165.47 1212.54 L1166.05 1212.54 L1166.64 1212.54 L1167.23 1212.54 L1167.81 1212.54 L1168.4 1212.54 L1168.99 1212.54 L1169.57 1212.54 L1170.16 1212.54 L1170.75 1212.54 L1171.33 1212.54 L1171.92 1212.54 L1172.5 1212.54 L1173.09 1212.54 L1173.68 1212.54 L1174.26 1212.54 L1174.85 1212.54 L1175.44 1212.54 L1176.02 1212.54 L1176.61 1212.54 L1177.2 1212.54 L1177.78 1212.54 L1178.37 1212.54 L1178.96 1212.54 L1179.54 1212.54 L1180.13 1212.54 L1180.71 1212.54 L1181.3 1212.54 L1181.89 1212.54 L1182.47 1212.54 L1183.06 1212.54 L1183.65 1212.54 L1184.23 1212.54 L1184.82 1212.54 L1185.41 1212.54 L1185.99 1212.54 L1186.58 1212.54 L1187.16 1212.54 L1187.75 1212.54 L1188.34 1212.54 L1188.92 1212.54 L1189.51 1212.54 L1190.1 1212.54 L1190.68 1212.54 L1191.27 1212.54 L1191.86 1212.54 L1192.44 1212.54 L1193.03 1212.54 L1193.62 1212.54 L1194.2 1212.54 L1194.79 1212.54 L1195.37 1212.54 L1195.96 1212.54 L1196.55 1212.54 L1197.13 1212.54 L1197.72 1212.54 L1198.31 1212.54 L1198.89 1212.54 L1199.48 1212.54 L1200.07 1212.54 L1200.65 1212.54 L1201.24 1212.54 L1201.83 1212.54 L1202.41 1212.54 L1203 1212.54 L1203.58 1212.54 L1204.17 1212.54 L1204.76 1212.54 L1205.34 1212.54 L1205.93 1212.54 L1206.52 1212.54 L1207.1 1212.54 L1207.69 1212.54 L1208.28 1212.54 L1208.86 1212.54 L1209.45 1212.54 L1210.03 1212.54 L1210.62 1212.54 L1211.21 1212.54 L1211.79 1212.54 L1212.38 1212.54 L1212.97 1212.54 L1213.55 1212.54 L1214.14 1212.54 L1214.73 1212.54 L1215.31 1212.54 L1215.9 1212.54 L1216.49 1212.54 L1217.07 1212.54 L1217.66 1212.54 L1218.24 1212.54 L1218.83 1212.54 L1219.42 1212.54 L1220 1212.54 L1220.59 1212.54 L1221.18 1212.54 L1221.76 1212.54 L1222.35 1212.54 L1222.94 1212.54 L1223.52 1212.54 L1224.11 1212.54 L1224.7 1212.54 L1225.28 1212.54 L1225.87 1212.54 L1226.45 1212.54 L1227.04 1212.54 L1227.63 1212.54 L1228.21 1212.54 L1228.8 1212.54 L1229.39 1212.54 L1229.97 1212.54 L1230.56 1212.54 L1231.15 1212.54 L1231.73 1212.54 L1232.32 1212.54 L1232.91 1212.54 L1233.49 1212.54 L1234.08 1212.54 L1234.66 1212.54 L1235.25 1212.54 L1235.84 1212.54 L1236.42 1212.54 L1237.01 1212.54 L1237.6 1212.54 L1238.18 1212.54 L1238.77 1212.54 L1239.36 1212.54 L1239.94 1212.54 L1240.53 1212.54 L1241.11 1212.54 L1241.7 1212.54 L1242.29 1212.54 L1242.87 1212.54 L1243.46 1212.54 L1244.05 1212.54 L1244.63 1212.54 L1245.22 1212.54 L1245.81 1212.54 L1246.39 1212.54 L1246.98 1212.54 L1247.57 1212.54 L1248.15 1212.54 L1248.74 1212.54 L1249.32 1212.54 L1249.91 1212.54 L1250.5 1212.54 L1251.08 1212.54 L1251.67 1212.54 L1252.26 1212.54 L1252.84 1212.54 L1253.43 1212.54 L1254.02 1212.54 L1254.6 1212.54 L1255.19 1212.54 L1255.78 1212.54 L1256.36 1212.54 L1256.95 1212.54 L1257.53 1212.54 L1258.12 1212.54 L1258.71 1212.54 L1259.29 1212.54 L1259.88 1212.54 L1260.47 1212.54 L1261.05 1212.54 L1261.64 1212.54 L1262.23 1212.54 L1262.81 1212.54 L1263.4 1212.54 L1263.98 1212.54 L1264.57 1212.54 L1265.16 1212.54 L1265.74 1212.54 L1266.33 1212.54 L1266.92 1212.54 L1267.5 1212.54 L1268.09 1212.54 L1268.68 1212.54 L1269.26 1212.54 L1269.85 1212.54 L1270.44 1212.54 L1271.02 1212.54 L1271.61 1212.54 L1272.19 1212.54 L1272.78 1212.54 L1273.37 1212.54 L1273.95 1212.54 L1274.54 1212.54 L1275.13 1212.54 L1275.71 1212.54 L1276.3 1212.54 L1276.89 1212.54 L1277.47 1212.54 L1278.06 1212.54 L1278.65 1212.54 L1279.23 1212.54 L1279.82 1212.54 L1280.4 1212.54 L1280.99 1212.54 L1281.58 1212.54 L1282.16 1212.54 L1282.75 1212.54 L1283.34 1212.54 L1283.92 1212.54 L1284.51 1212.54 L1285.1 1212.54 L1285.68 1212.54 L1286.27 1212.54 L1286.86 1212.54 L1287.44 1212.54 L1288.03 1212.54 L1288.61 1212.54 L1289.2 1212.54 L1289.79 1212.54 L1290.37 1212.54 L1290.96 1212.54 L1291.55 1212.54 L1292.13 1212.54 L1292.72 1212.54 L1293.31 1212.54 L1293.89 1212.54 L1294.48 1212.54 L1295.06 1212.54 L1295.65 1212.54 L1296.24 1212.54 L1296.82 1212.54 L1297.41 1212.54 L1298 1212.54 L1298.58 1212.54 L1299.17 1212.54 L1299.76 1212.54 L1300.34 1212.54 L1300.93 1212.54 L1301.52 1212.54 L1302.1 1212.54 L1302.69 1212.54 L1303.27 1212.54 L1303.86 1212.54 L1304.45 1212.54 L1305.03 1212.54 L1305.62 1212.54 L1306.21 1212.54 L1306.79 1212.54 L1307.38 1212.54 L1307.97 1212.54 L1308.55 1212.54 L1309.14 1212.54 L1309.73 1212.54 L1310.31 1212.54 L1310.9 1212.54 L1311.48 1212.54 L1312.07 1212.54 L1312.66 1212.54 L1313.24 1212.54 L1313.83 1212.54 L1314.42 1212.54 L1315 1212.54 L1315.59 1212.54 L1316.18 1212.54 L1316.76 1212.54 L1317.35 1212.54 L1317.93 1212.54 L1318.52 1212.54 L1319.11 1212.54 L1319.69 1212.54 L1320.28 1212.54 L1320.87 1212.54 L1321.45 1212.54 L1322.04 1212.54 L1322.63 1212.54 L1323.21 1212.54 L1323.8 1212.54 L1324.39 1212.54 L1324.97 1212.54 L1325.56 1212.54 L1326.14 1212.54 L1326.73 1212.54 L1327.32 1212.54 L1327.9 1212.54 L1328.49 1212.54 L1329.08 1212.54 L1329.66 1212.54 L1330.25 1212.54 L1330.84 1212.54 L1331.42 1212.54 L1332.01 1212.54 L1332.6 1212.54 L1333.18 1212.54 L1333.77 1212.54 L1334.35 1212.54 L1334.94 1212.54 L1335.53 1212.54 L1336.11 1212.54 L1336.7 1212.54 L1337.29 1212.54 L1337.87 1212.54 L1338.46 1212.54 L1339.05 1212.54 L1339.63 1212.54 L1340.22 1212.54 L1340.8 1212.54 L1341.39 1212.54 L1341.98 1212.54 L1342.56 1212.54 L1343.15 1212.54 L1343.74 1212.54 L1344.32 1212.54 L1344.91 1212.54 L1345.5 1212.54 L1346.08 1212.54 L1346.67 1212.54 L1347.26 1212.54 L1347.84 1212.54 L1348.43 1212.54 L1349.01 1212.54 L1349.6 1212.54 L1350.19 1212.54 L1350.77 1212.54 L1351.36 1212.54 L1351.95 1212.54 L1352.53 1212.54 L1353.12 1212.54 L1353.71 1212.54 L1354.29 1212.54 L1354.88 1212.54 L1355.47 1212.54 L1356.05 1212.54 L1356.64 1212.54 L1357.22 1212.54 L1357.81 1212.54 L1358.4 1212.54 L1358.98 1212.54 L1359.57 1212.54 L1360.16 1212.54 L1360.74 1212.54 L1361.33 1212.54 L1361.92 1212.54 L1362.5 1212.54 L1363.09 1212.54 L1363.68 1212.54 L1364.26 1212.54 L1364.85 1212.54 L1365.43 1212.54 L1366.02 1212.54 L1366.61 1212.54 L1367.19 1212.54 L1367.78 1212.54 L1368.37 1212.54 L1368.95 1212.54 L1369.54 1212.54 L1370.13 1212.54 L1370.71 1212.54 L1371.3 1212.54 L1371.88 1212.54 L1372.47 1212.54 L1373.06 1212.54 L1373.64 1212.54 L1374.23 1212.54 L1374.82 1212.54 L1375.4 1212.54 L1375.99 1212.54 L1376.58 1212.54 L1377.16 1212.54 L1377.75 1212.54 L1378.34 1212.54 L1378.92 1212.54 L1379.51 1212.54 L1380.09 1212.54 L1380.68 1212.54 L1381.27 1212.54 L1381.85 1212.54 L1382.44 1212.54 L1383.03 1212.54 L1383.61 1212.54 L1384.2 1212.54 L1384.79 1212.54 L1385.37 1212.54 L1385.96 1212.54 L1386.55 1212.54 L1387.13 1212.54 L1387.72 1212.54 L1388.3 1212.54 L1388.89 1212.54 L1389.48 1212.54 L1390.06 1212.54 L1390.65 1212.54 L1391.24 1212.54 L1391.82 1212.54 L1392.41 1212.54 L1393 1212.54 L1393.58 1212.54 L1394.17 1212.54 L1394.75 1212.54 L1395.34 1212.54 L1395.93 1212.54 L1396.51 1212.54 L1397.1 1212.54 L1397.69 1212.54 L1398.27 1212.54 L1398.86 1212.54 L1399.45 1212.54 L1400.03 1212.54 L1400.62 1212.54 L1401.21 1212.54 L1401.79 1212.54 L1402.38 1212.54 L1402.96 1212.54 L1403.55 1212.54 L1404.14 1212.54 L1404.72 1212.54 L1405.31 1212.54 L1405.9 1212.54 L1406.48 1212.54 L1407.07 1212.54 L1407.66 1212.54 L1408.24 1212.54 L1408.83 1212.54 L1409.42 1212.54 L1410 1212.54 L1410.59 1212.54 L1411.17 1212.54 L1411.76 1212.54 L1412.35 1212.54 L1412.93 1212.54 L1413.52 1212.54 L1414.11 1212.54 L1414.69 1212.54 L1415.28 1212.54 L1415.87 1212.54 L1416.45 1212.54 L1417.04 1212.54 L1417.63 1212.54 L1418.21 1212.54 L1418.8 1212.54 L1419.38 1212.54 L1419.97 1212.54 L1420.56 1212.54 L1421.14 1212.54 L1421.73 1212.54 L1422.32 1212.54 L1422.9 1212.54 L1423.49 1212.54 L1424.08 1212.54 L1424.66 1212.54 L1425.25 1212.54 L1425.83 1212.54 L1426.42 1212.54 L1427.01 1212.54 L1427.59 1212.54 L1428.18 1212.54 L1428.77 1212.54 L1429.35 1212.54 L1429.94 1212.54 L1430.53 1212.54 L1431.11 1212.54 L1431.7 1212.54 L1432.29 1212.54 L1432.87 1212.54 L1433.46 1212.54 L1434.04 1212.54 L1434.63 1212.54 L1435.22 1212.54 L1435.8 1212.54 L1436.39 1212.54 L1436.98 1212.54 L1437.56 1212.54 L1438.15 1212.54 L1438.74 1212.54 L1439.32 1212.54 L1439.91 1212.54 L1440.5 1212.54 L1441.08 1212.54 L1441.67 1212.54 L1442.25 1212.54 L1442.84 1212.54 L1443.43 1212.54 L1444.01 1212.54 L1444.6 1212.54 L1445.19 1212.54 L1445.77 1212.54 L1446.36 1212.54 L1446.95 1212.54 L1447.53 1212.54 L1448.12 1212.54 L1448.7 1212.54 L1449.29 1212.54 L1449.88 1212.54 L1450.46 1212.54 L1451.05 1212.54 L1451.64 1212.54 L1452.22 1212.54 L1452.81 1212.54 L1453.4 1212.54 L1453.98 1212.54 L1454.57 1212.54 L1455.16 1212.54 L1455.74 1212.54 L1456.33 1212.54 L1456.91 1212.54 L1457.5 1212.54 L1458.09 1212.54 L1458.67 1212.54 L1459.26 1212.54 L1459.85 1212.54 L1460.43 1212.54 L1461.02 1212.54 L1461.61 1212.54 L1462.19 1212.54 L1462.78 1212.54 L1463.37 1212.54 L1463.95 1212.54 L1464.54 1212.54 L1465.12 1212.54 L1465.71 1212.54 L1466.3 1212.54 L1466.88 1212.54 L1467.47 1212.54 L1468.06 1212.54 L1468.64 1212.54 L1469.23 1212.54 L1469.82 1212.54 L1470.4 1212.54 L1470.99 1212.54 L1471.57 1212.54 L1472.16 1212.54 L1472.75 1212.54 L1473.33 1212.54 L1473.92 1212.54 L1474.51 1212.54 L1475.09 1212.54 L1475.68 1212.54 L1476.27 1212.54 L1476.85 1212.54 L1477.44 1212.54 L1478.03 1212.54 L1478.61 1212.54 L1479.2 1212.54 L1479.78 1212.54 L1480.37 1212.54 L1480.96 1212.54 L1481.54 1212.54 L1482.13 1212.54 L1482.72 1212.54 L1483.3 1212.54 L1483.89 1212.54 L1484.48 1212.54 L1485.06 1212.54 L1485.65 1212.54 L1486.24 1212.54 L1486.82 1212.54 L1487.41 1212.54 L1487.99 1212.54 L1488.58 1212.54 L1489.17 1212.54 L1489.75 1212.54 L1490.34 1212.54 L1490.93 1212.54 L1491.51 1212.54 L1492.1 1212.54 L1492.69 1212.54 L1493.27 1212.54 L1493.86 1212.54 L1494.45 1212.54 L1495.03 1212.54 L1495.62 1212.54 L1496.2 1212.54 L1496.79 1212.54 L1497.38 1212.54 L1497.96 1212.54 L1498.55 1212.54 L1499.14 1212.54 L1499.72 1212.54 L1500.31 1212.54 L1500.9 1212.54 L1501.48 1212.54 L1502.07 1212.54 L1502.65 1212.54 L1503.24 1212.54 L1503.83 1212.54 L1504.41 1212.54 L1505 1212.54 L1505.59 1212.54 L1506.17 1212.54 L1506.76 1212.54 L1507.35 1212.54 L1507.93 1212.54 L1508.52 1212.54 L1509.11 1212.54 L1509.69 1212.54 L1510.28 1212.54 L1510.86 1212.54 L1511.45 1212.54 L1512.04 1212.54 L1512.62 1212.54 L1513.21 1212.54 L1513.8 1212.54 L1514.38 1212.54 L1514.97 1212.54 L1515.56 1212.54 L1516.14 1212.54 L1516.73 1212.54 L1517.32 1212.54 L1517.9 1212.54 L1518.49 1212.54 L1519.07 1212.54 L1519.66 1212.54 L1520.25 1212.54 L1520.83 1212.54 L1521.42 1212.54 L1522.01 1212.54 L1522.59 1212.54 L1523.18 1212.54 L1523.77 1212.54 L1524.35 1212.54 L1524.94 1212.54 L1525.52 1212.54 L1526.11 1212.54 L1526.7 1212.54 L1527.28 1212.54 L1527.87 1212.54 L1528.46 1212.54 L1529.04 1212.54 L1529.63 1212.54 L1530.22 1212.54 L1530.8 1212.54 L1531.39 1212.54 L1531.98 1212.54 L1532.56 1212.54 L1533.15 1212.54 L1533.73 1212.54 L1534.32 1212.54 L1534.91 1212.54 L1535.49 1212.54 L1536.08 1212.54 L1536.67 1212.54 L1537.25 1212.54 L1537.84 1212.54 L1538.43 1212.54 L1539.01 1212.54 L1539.6 1212.54 L1540.19 1212.54 L1540.77 1212.54 L1541.36 1212.54 L1541.94 1212.54 L1542.53 1212.54 L1543.12 1212.54 L1543.7 1212.54 L1544.29 1212.54 L1544.88 1212.54 L1545.46 1212.54 L1546.05 1212.54 L1546.64 1212.54 L1547.22 1212.54 L1547.81 1212.54 L1548.4 1212.54 L1548.98 1212.54 L1549.57 1212.54 L1550.15 1212.54 L1550.74 1212.54 L1551.33 1212.54 L1551.91 1212.54 L1552.5 1212.54 L1553.09 1212.54 L1553.67 1212.54 L1554.26 1212.54 L1554.85 1212.54 L1555.43 1212.54 L1556.02 1212.54 L1556.6 1212.54 L1557.19 1212.54 L1557.78 1212.54 L1558.36 1212.54 L1558.95 1212.54 L1559.54 1212.54 L1560.12 1212.54 L1560.71 1212.54 L1561.3 1212.54 L1561.88 1212.54 L1562.47 1212.54 L1563.06 1212.54 L1563.64 1212.54 L1564.23 1212.54 L1564.81 1212.54 L1565.4 1212.54 L1565.99 1212.54 L1566.57 1212.54 L1567.16 1212.54 L1567.75 1212.54 L1568.33 1212.54 L1568.92 1212.54 L1569.51 1212.54 L1570.09 1212.54 L1570.68 1212.54 L1571.27 1212.54 L1571.85 1212.54 L1572.44 1212.54 L1573.02 1212.54 L1573.61 1212.54 L1574.2 1212.54 L1574.78 1212.54 L1575.37 1212.54 L1575.96 1212.54 L1576.54 1212.54 L1577.13 1212.54 L1577.72 1212.54 L1578.3 1212.54 L1578.89 1212.54 L1579.47 1212.54 L1580.06 1212.54 L1580.65 1212.54 L1581.23 1212.54 L1581.82 1212.54 L1582.41 1212.54 L1582.99 1212.54 L1583.58 1212.54 L1584.17 1212.54 L1584.75 1212.54 L1585.34 1212.54 L1585.93 1212.54 L1586.51 1212.54 L1587.1 1212.54 L1587.68 1212.54 L1588.27 1212.54 L1588.86 1212.54 L1589.44 1212.54 L1590.03 1212.54 L1590.62 1212.54 L1591.2 1212.54 L1591.79 1212.54 L1592.38 1212.54 L1592.96 1212.54 L1593.55 1212.54 L1594.14 1212.54 L1594.72 1212.54 L1595.31 1212.54 L1595.89 1212.54 L1596.48 1212.54 L1597.07 1212.54 L1597.65 1212.54 L1598.24 1212.54 L1598.83 1212.54 L1599.41 1212.54 L1600 1212.54 L1600.59 1212.54 L1601.17 1212.54 L1601.76 1212.54 L1602.34 1212.54 L1602.93 1212.54 L1603.52 1212.54 L1604.1 1212.54 L1604.69 1212.54 L1605.28 1212.54 L1605.86 1212.54 L1606.45 1212.54 L1607.04 1212.54 L1607.62 1212.54 L1608.21 1212.54 L1608.8 1212.54 L1609.38 1212.54 L1609.97 1212.54 L1610.55 1212.54 L1611.14 1212.54 L1611.73 1212.54 L1612.31 1212.54 L1612.9 1212.54 L1613.49 1212.54 L1614.07 1212.54 L1614.66 1212.54 L1615.25 1212.54 L1615.83 1212.54 L1616.42 1212.54 L1617.01 1212.54 L1617.59 1212.54 L1618.18 1212.54 L1618.76 1212.54 L1619.35 1212.54 L1619.94 1212.54 L1620.52 1212.54 L1621.11 1212.54 L1621.7 1212.54 L1622.28 1212.54 L1622.87 1212.54 L1623.46 1212.54 L1624.04 1212.54 L1624.63 1212.54 L1625.22 1212.54 L1625.8 1212.54 L1626.39 1212.54 L1626.97 1212.54 L1627.56 1212.54 L1628.15 1212.54 L1628.73 1212.54 L1629.32 1212.54 L1629.91 1212.54 L1630.49 1212.54 L1631.08 1212.54 L1631.67 1212.54 L1632.25 1212.54 L1632.84 1212.54 L1633.42 1212.54 L1634.01 1212.54 L1634.6 1212.54 L1635.18 1212.54 L1635.77 1212.54 L1636.36 1212.54 L1636.94 1212.54 L1637.53 1212.54 L1638.12 1212.54 L1638.7 1212.54 L1639.29 1212.54 L1639.88 1212.54 L1640.46 1212.54 L1641.05 1212.54 L1641.63 1212.54 L1642.22 1212.54 L1642.81 1212.54 L1643.39 1212.54 L1643.98 1212.54 L1644.57 1212.54 L1645.15 1212.54 L1645.74 1212.54 L1646.33 1212.54 L1646.91 1212.54 L1647.5 1212.54 L1648.09 1212.54 L1648.67 1212.54 L1649.26 1212.54 L1649.84 1212.54 L1650.43 1212.54 L1651.02 1212.54 L1651.6 1212.54 L1652.19 1212.54 L1652.78 1212.54 L1653.36 1212.54 L1653.95 1212.54 L1654.54 1212.54 L1655.12 1212.54 L1655.71 1212.54 L1656.29 1212.54 L1656.88 1212.54 L1657.47 1212.54 L1658.05 1212.54 L1658.64 1212.54 L1659.23 1212.54 L1659.81 1212.54 L1660.4 1212.54 L1660.99 1212.54 L1661.57 1212.54 L1662.16 1212.54 L1662.75 1212.54 L1663.33 1212.54 L1663.92 1212.54 L1664.5 1212.54 L1665.09 1212.54 L1665.68 1212.54 L1666.26 1212.54 L1666.85 1212.54 L1667.44 1212.54 L1668.02 1212.54 L1668.61 1212.54 L1669.2 1212.54 L1669.78 1212.54 L1670.37 1212.54 L1670.96 1212.54 L1671.54 1212.54 L1672.13 1212.54 L1672.71 1212.54 L1673.3 1212.54 L1673.89 1212.54 L1674.47 1212.54 L1675.06 1212.54 L1675.65 1212.54 L1676.23 1212.54 L1676.82 1212.54 L1677.41 1212.54 L1677.99 1212.54 L1678.58 1212.54 L1679.17 1212.54 L1679.75 1212.54 L1680.34 1212.54 L1680.92 1212.54 L1681.51 1212.54 L1682.1 1212.54 L1682.68 1212.54 L1683.27 1212.54 L1683.86 1212.54 L1684.44 1212.54 L1685.03 1212.54 L1685.62 1212.54 L1686.2 1212.54 L1686.79 1212.54 L1687.37 1212.54 L1687.96 1212.54 L1688.55 1212.54 L1689.13 1212.54 L1689.72 1212.54 L1690.31 1212.54 L1690.89 1212.54 L1691.48 1212.54 L1692.07 1212.54 L1692.65 1212.54 L1693.24 1212.54 L1693.83 1212.54 L1694.41 1212.54 L1695 1212.54 L1695.58 1212.54 L1696.17 1212.54 L1696.76 1212.54 L1697.34 1212.54 L1697.93 1212.54 L1698.52 1212.54 L1699.1 1212.54 L1699.69 1212.54 L1700.28 1212.54 L1700.86 1212.54 L1701.45 1212.54 L1702.04 1212.54 L1702.62 1212.54 L1703.21 1212.54 L1703.79 1212.54 L1704.38 1212.54 L1704.97 1212.54 L1705.55 1212.54 L1706.14 1212.54 L1706.73 1212.54 L1707.31 1212.54 L1707.9 1212.54 L1708.49 1212.54 L1709.07 1212.54 L1709.66 1212.54 L1710.24 1212.54 L1710.83 1212.54 L1711.42 1212.54 L1712 1212.54 L1712.59 1212.54 L1713.18 1212.54 L1713.76 1212.54 L1714.35 1212.54 L1714.94 1212.54 L1715.52 1212.54 L1716.11 1212.54 L1716.7 1212.54 L1717.28 1212.54 L1717.87 1212.54 L1718.45 1212.54 L1719.04 1212.54 L1719.63 1212.54 L1720.21 1212.54 L1720.8 1212.54 L1721.39 1212.54 L1721.97 1212.54 L1722.56 1212.54 L1723.15 1212.54 L1723.73 1212.54 L1724.32 1212.54 L1724.91 1212.54 L1725.49 1212.54 L1726.08 1212.54 L1726.66 1212.54 L1727.25 1212.54 L1727.84 1212.54 L1728.42 1212.54 L1729.01 1212.54 L1729.6 1212.54 L1730.18 1212.54 L1730.77 1212.54 L1731.36 1212.54 L1731.94 1212.54 L1732.53 1212.54 L1733.11 1212.54 L1733.7 1212.54 L1734.29 1212.54 L1734.87 1212.54 L1735.46 1212.54 L1736.05 1212.54 L1736.63 1212.54 L1737.22 1212.54 L1737.81 1212.54 L1738.39 1212.54 L1738.98 1212.54 L1739.57 1212.54 L1740.15 1212.54 L1740.74 1212.54 L1741.32 1212.54 L1741.91 1212.54 L1742.5 1212.54 L1743.08 1212.54 L1743.67 1212.54 L1744.26 1212.54 L1744.84 1212.54 L1745.43 1212.54 L1746.02 1212.54 L1746.6 1212.54 L1747.19 1212.54 L1747.78 1212.54 L1748.36 1212.54 L1748.95 1212.54 L1749.53 1212.54 L1750.12 1212.54 L1750.71 1212.54 L1751.29 1212.54 L1751.88 1212.54 L1752.47 1212.54 L1753.05 1212.54 L1753.64 1212.54 L1754.23 1212.54 L1754.81 1212.54 L1755.4 1212.54 L1755.99 1212.54 L1756.57 1212.54 L1757.16 1212.54 L1757.74 1212.54 L1758.33 1212.54 L1758.92 1212.54 L1759.5 1212.54 L1760.09 1212.54 L1760.68 1212.54 L1761.26 1212.54 L1761.85 1212.54 L1762.44 1212.54 L1763.02 1212.54 L1763.61 1212.54 L1764.19 1212.54 L1764.78 1212.54 L1765.37 1212.54 L1765.95 1212.54 L1766.54 1212.54 L1767.13 1212.54 L1767.71 1212.54 L1768.3 1212.54 L1768.89 1212.54 L1769.47 1212.54 L1770.06 1212.54 L1770.65 1212.54 L1771.23 1212.54 L1771.82 1212.54 L1772.4 1212.54 L1772.99 1212.54 L1773.58 1212.54 L1774.16 1212.54 L1774.75 1212.54 L1775.34 1212.54 L1775.92 1212.54 L1776.51 1212.54 L1777.1 1212.54 L1777.68 1212.54 L1778.27 1212.54 L1778.86 1212.54 L1779.44 1212.54 L1780.03 1212.54 L1780.61 1212.54 L1781.2 1212.54 L1781.79 1212.54 L1782.37 1212.54 L1782.96 1212.54 L1783.55 1212.54 L1784.13 1212.54 L1784.72 1212.54 L1785.31 1212.54 L1785.89 1212.54 L1786.48 1212.54 L1787.06 1212.54 L1787.65 1212.54 L1788.24 1212.54 L1788.82 1212.54 L1789.41 1212.54 L1790 1212.54 L1790.58 1212.54 L1791.17 1212.54 L1791.76 1212.54 L1792.34 1212.54 L1792.93 1212.54 L1793.52 1212.54 L1794.1 1212.54 L1794.69 1212.54 L1795.27 1212.54 L1795.86 1212.54 L1796.45 1212.54 L1797.03 1212.54 L1797.62 1212.54 L1798.21 1212.54 L1798.79 1212.54 L1799.38 1212.54 L1799.97 1212.54 L1800.55 1212.54 L1801.14 1212.54 L1801.73 1212.54 L1802.31 1212.54 L1802.9 1212.54 L1803.48 1212.54 L1804.07 1212.54 L1804.66 1212.54 L1805.24 1212.54 L1805.83 1212.54 L1806.42 1212.54 L1807 1212.54 L1807.59 1212.54 L1808.18 1212.54 L1808.76 1212.54 L1809.35 1212.54 L1809.94 1212.54 L1810.52 1212.54 L1811.11 1212.54 L1811.69 1212.54 L1812.28 1212.54 L1812.87 1212.54 L1813.45 1212.54 L1814.04 1212.54 L1814.63 1212.54 L1815.21 1212.54 L1815.8 1212.54 L1816.39 1212.54 L1816.97 1212.54 L1817.56 1212.54 L1818.14 1212.54 L1818.73 1212.54 L1819.32 1212.54 L1819.9 1212.54 L1820.49 1212.54 L1821.08 1212.54 L1821.66 1212.54 L1822.25 1212.54 L1822.84 1212.54 L1823.42 1212.54 L1824.01 1212.54 L1824.6 1212.54 L1825.18 1212.54 L1825.77 1212.54 L1826.35 1212.54 L1826.94 1212.54 L1827.53 1212.54 L1828.11 1212.54 L1828.7 1212.54 L1829.29 1212.54 L1829.87 1212.54 L1830.46 1212.54 L1831.05 1212.54 L1831.63 1212.54 L1832.22 1212.54 L1832.81 1212.54 L1833.39 1212.54 L1833.98 1212.54 L1834.56 1212.54 L1835.15 1212.54 L1835.74 1212.54 L1836.32 1212.54 L1836.91 1212.54 L1837.5 1212.54 L1838.08 1212.54 L1838.67 1212.54 L1839.26 1212.54 L1839.84 1212.54 L1840.43 1212.54 L1841.01 1212.54 L1841.6 1212.54 L1842.19 1212.54 L1842.77 1212.54 L1843.36 1212.54 L1843.95 1212.54 L1844.53 1212.54 L1845.12 1212.54 L1845.71 1212.54 L1846.29 1212.54 L1846.88 1212.54 L1847.47 1212.54 L1848.05 1212.54 L1848.64 1212.54 L1849.22 1212.54 L1849.81 1212.54 L1850.4 1212.54 L1850.98 1212.54 L1851.57 1212.54 L1852.16 1212.54 L1852.74 1212.54 L1853.33 1212.54 L1853.92 1212.54 L1854.5 1212.54 L1855.09 1212.54 L1855.68 1212.54 L1856.26 1212.54 L1856.85 1212.54 L1857.43 1212.54 L1858.02 1212.54 L1858.61 1212.54 L1859.19 1212.54 L1859.78 1212.54 L1860.37 1212.54 L1860.95 1212.54 L1861.54 1212.54 L1862.13 1212.54 L1862.71 1212.54 L1863.3 1212.54 L1863.88 1212.54 L1864.47 1212.54 L1865.06 1212.54 L1865.64 1212.54 L1866.23 1212.54 L1866.82 1212.54 L1867.4 1212.54 L1867.99 1212.54 L1868.58 1212.54 L1869.16 1212.54 L1869.75 1212.54 L1870.34 1212.54 L1870.92 1212.54 L1871.51 1212.54 L1872.09 1212.54 L1872.68 1212.54 L1873.27 1212.54 L1873.85 1212.54 L1874.44 1212.54 L1875.03 1212.54 L1875.61 1212.54 L1876.2 1212.54 L1876.79 1212.54 L1877.37 1212.54 L1877.96 1212.54 L1878.55 1212.54 L1879.13 1212.54 L1879.72 1212.54 L1880.3 1212.54 L1880.89 1212.54 L1881.48 1212.54 L1882.06 1212.54 L1882.65 1212.54 L1883.24 1212.54 L1883.82 1212.54 L1884.41 1212.54 L1885 1212.54 L1885.58 1212.54 L1886.17 1212.54 L1886.76 1212.54 L1887.34 1212.54 L1887.93 1212.54 L1888.51 1212.54 L1889.1 1212.54 L1889.69 1212.54 L1890.27 1212.54 L1890.86 1212.54 L1891.45 1212.54 L1892.03 1212.54 L1892.62 1212.54 L1893.21 1212.54 L1893.79 1212.54 L1894.38 1212.54 L1894.96 1212.54 L1895.55 1212.54 L1896.14 1212.54 L1896.72 1212.54 L1897.31 1212.54 L1897.9 1212.54 L1898.48 1212.54 L1899.07 1212.54 L1899.66 1212.54 L1900.24 1212.54 L1900.83 1212.54 L1901.42 1212.54 L1902 1212.54 L1902.59 1212.54 L1903.17 1212.54 L1903.76 1212.54 L1904.35 1212.54 L1904.93 1212.54 L1905.52 1212.54 L1906.11 1212.54 L1906.69 1212.54 L1907.28 1212.54 L1907.87 1212.54 L1908.45 1212.54 L1909.04 1212.54 L1909.63 1212.54 L1910.21 1212.54 L1910.8 1212.54 L1911.38 1212.54 L1911.97 1212.54 L1912.56 1212.54 L1913.14 1212.54 L1913.73 1212.54 L1914.32 1212.54 L1914.9 1212.54 L1915.49 1212.54 L1916.08 1212.54 L1916.66 1212.54 L1917.25 1212.54 L1917.83 1212.54 L1918.42 1212.54 L1919.01 1212.54 L1919.59 1212.54 L1920.18 1212.54 L1920.77 1212.54 L1921.35 1212.54 L1921.94 1212.54 L1922.53 1212.54 L1923.11 1212.54 L1923.7 1212.54 L1924.29 1212.54 L1924.87 1212.54 L1925.46 1212.54 L1926.04 1212.54 L1926.63 1212.54 L1927.22 1212.54 L1927.8 1212.54 L1928.39 1212.54 L1928.98 1212.54 L1929.56 1212.54 L1930.15 1212.54 L1930.74 1212.54 L1931.32 1212.54 L1931.91 1212.54 L1932.5 1212.54 L1933.08 1212.54 L1933.67 1212.54 L1934.25 1212.54 L1934.84 1212.54 L1935.43 1212.54 L1936.01 1212.54 L1936.6 1212.54 L1937.19 1212.54 L1937.77 1212.54 L1938.36 1212.54 L1938.95 1212.54 L1939.53 1212.54 L1940.12 1212.54 L1940.71 1212.54 L1941.29 1212.54 L1941.88 1212.54 L1942.46 1212.54 L1943.05 1212.54 L1943.64 1212.54 L1944.22 1212.54 L1944.81 1212.54 L1945.4 1212.54 L1945.98 1212.54 L1946.57 1212.54 L1947.16 1212.54 L1947.74 1212.54 L1948.33 1212.54 L1948.91 1212.54 L1949.5 1212.54 L1950.09 1212.54 L1950.67 1212.54 L1951.26 1212.54 L1951.85 1212.54 L1952.43 1212.54 L1953.02 1212.54 L1953.61 1212.54 L1954.19 1212.54 L1954.78 1212.54 L1955.37 1212.54 L1955.95 1212.54 L1956.54 1212.54 L1957.12 1212.54 L1957.71 1212.54 L1958.3 1212.54 L1958.88 1212.54 L1959.47 1212.54 L1960.06 1212.54 L1960.64 1212.54 L1961.23 1212.54 L1961.82 1212.54 L1962.4 1212.54 L1962.99 1212.54 L1963.58 1212.54 L1964.16 1212.54 L1964.75 1212.54 L1965.33 1212.54 L1965.92 1212.54 L1966.51 1212.54 L1967.09 1212.54 L1967.68 1212.54 L1968.27 1212.54 L1968.85 1212.54 L1969.44 1212.54 L1970.03 1212.54 L1970.61 1212.54 L1971.2 1212.54 L1971.78 1212.54 L1972.37 1212.54 L1972.96 1212.54 L1973.54 1212.54 L1974.13 1212.54 L1974.72 1212.54 L1975.3 1212.54 L1975.89 1212.54 L1976.48 1212.54 L1977.06 1212.54 L1977.65 1212.54 L1978.24 1212.54 L1978.82 1212.54 L1979.41 1212.54 L1979.99 1212.54 L1980.58 1212.54 L1981.17 1212.54 L1981.75 1212.54 L1982.34 1212.54 L1982.93 1212.54 L1983.51 1212.54 L1984.1 1212.54 L1984.69 1212.54 L1985.27 1212.54 L1985.86 1212.54 L1986.45 1212.54 L1987.03 1212.54 L1987.62 1212.54 L1988.2 1212.54 L1988.79 1212.54 L1989.38 1212.54 L1989.96 1212.54 L1990.55 1212.54 L1991.14 1212.54 L1991.72 1212.54 L1992.31 1212.54 L1992.9 1212.54 L1993.48 1212.54 L1994.07 1212.54 L1994.65 1212.54 L1995.24 1212.54 L1995.83 1212.54 L1996.41 1212.54 L1997 1212.54 L1997.59 1212.54 L1998.17 1212.54 L1998.76 1212.54 L1999.35 1212.54 L1999.93 1212.54 L2000.52 1212.54 L2001.11 1212.54 L2001.69 1212.54 L2002.28 1212.54 L2002.86 1212.54 L2003.45 1212.54 L2004.04 1212.54 L2004.62 1212.54 L2005.21 1212.54 L2005.8 1212.54 L2006.38 1212.54 L2006.97 1212.54 L2007.56 1212.54 L2008.14 1212.54 L2008.73 1212.54 L2009.32 1212.54 L2009.9 1212.54 L2010.49 1212.54 L2011.07 1212.54 L2011.66 1212.54 L2012.25 1212.54 L2012.83 1212.54 L2013.42 1212.54 L2014.01 1212.54 L2014.59 1212.54 L2015.18 1212.54 L2015.77 1212.54 L2016.35 1212.54 L2016.94 1212.54 L2017.53 1212.54 L2018.11 1212.54 L2018.7 1212.54 L2019.28 1212.54 L2019.87 1212.54 L2020.46 1212.54 L2021.04 1212.54 L2021.63 1212.54 L2022.22 1212.54 L2022.8 1212.54 L2023.39 1212.54 L2023.98 1212.54 L2024.56 1212.54 L2025.15 1212.54 L2025.73 1212.54 L2026.32 1212.54 L2026.91 1212.54 L2027.49 1212.54 L2028.08 1212.54 L2028.67 1212.54 L2029.25 1212.54 L2029.84 1212.54 L2030.43 1212.54 L2031.01 1212.54 L2031.6 1212.54 L2032.19 1212.54 L2032.77 1212.54 L2033.36 1212.54 L2033.94 1212.54 L2034.53 1212.54 L2035.12 1212.54 L2035.7 1212.54 L2036.29 1212.54 L2036.88 1212.54 L2037.46 1212.54 L2038.05 1212.54 L2038.64 1212.54 L2039.22 1212.54 L2039.81 1212.54 L2040.4 1212.54 L2040.98 1212.54 L2041.57 1212.54 L2042.15 1212.54 L2042.74 1212.54 L2043.33 1212.54 L2043.91 1212.54 L2044.5 1212.54 L2045.09 1212.54 L2045.67 1212.54 L2046.26 1212.54 L2046.85 1212.54 L2047.43 1212.54 L2048.02 1212.54 L2048.6 1212.54 L2049.19 1212.54 L2049.78 1212.54 L2050.36 1212.54 L2050.95 1212.54 L2051.54 1212.54 L2052.12 1212.54 L2052.71 1212.54 L2053.3 1212.54 L2053.88 1212.54 L2054.47 1212.54 L2055.06 1212.54 L2055.64 1212.54 L2056.23 1212.54 L2056.81 1212.54 L2057.4 1212.54 L2057.99 1212.54 L2058.57 1212.54 L2059.16 1212.54 L2059.75 1212.54 L2060.33 1212.54 L2060.92 1212.54 L2061.51 1212.54 L2062.09 1212.54 L2062.68 1212.54 L2063.27 1212.54 L2063.85 1212.54 L2064.44 1212.54 L2065.02 1212.54 L2065.61 1212.54 L2066.2 1212.54 L2066.78 1212.54 L2067.37 1212.54 L2067.96 1212.54 L2068.54 1212.54 L2069.13 1212.54 L2069.72 1212.54 L2070.3 1212.54 L2070.89 1212.54 L2071.48 1212.54 L2072.06 1212.54 L2072.65 1212.54 L2073.23 1212.54 L2073.82 1212.54 L2074.41 1212.54 L2074.99 1212.54 L2075.58 1212.54 L2076.17 1212.54 L2076.75 1212.54 L2077.34 1212.54 L2077.93 1212.54 L2078.51 1212.54 L2079.1 1212.54 L2079.68 1212.54 L2080.27 1212.54 L2080.86 1212.54 L2081.44 1212.54 L2082.03 1212.54 L2082.62 1212.54 L2083.2 1212.54 L2083.79 1212.54 L2084.38 1212.54 L2084.96 1212.54 L2085.55 1212.54 L2086.14 1212.54 L2086.72 1212.54 L2087.31 1212.54 L2087.89 1212.54 L2088.48 1212.54 L2089.07 1212.54 L2089.65 1212.54 L2090.24 1212.54 L2090.83 1212.54 L2091.41 1212.54 L2092 1212.54 L2092.59 1212.54 L2093.17 1212.54 L2093.76 1212.54 L2094.35 1212.54 L2094.93 1212.54 L2095.52 1212.54 L2096.1 1212.54 L2096.69 1212.54 L2097.28 1212.54 L2097.86 1212.54 L2098.45 1212.54 L2099.04 1212.54 L2099.62 1212.54 L2100.21 1212.54 L2100.8 1212.54 L2101.38 1212.54 L2101.97 1212.54 L2102.55 1212.54 L2103.14 1212.54 L2103.73 1212.54 L2104.31 1212.54 L2104.9 1212.54 L2105.49 1212.54 L2106.07 1212.54 L2106.66 1212.54 L2107.25 1212.54 L2107.83 1212.54 L2108.42 1212.54 L2109.01 1212.54 L2109.59 1212.54 L2110.18 1212.54 L2110.76 1212.54 L2111.35 1212.54 L2111.94 1212.54 L2112.52 1212.54 L2113.11 1212.54 L2113.7 1212.54 L2114.28 1212.54 L2114.87 1212.54 L2115.46 1212.54 L2116.04 1212.54 L2116.63 1212.54 L2117.22 1212.54 L2117.8 1212.54 L2118.39 1212.54 L2118.97 1212.54 L2119.56 1212.54 L2120.15 1212.54 L2120.73 1212.54 L2121.32 1212.54 L2121.91 1212.54 L2122.49 1212.54 L2123.08 1212.54 L2123.67 1212.54 L2124.25 1212.54 L2124.84 1212.54 L2125.42 1212.54 L2126.01 1212.54 L2126.6 1212.54 L2127.18 1212.54 L2127.77 1212.54 L2128.36 1212.54 L2128.94 1212.54 L2129.53 1212.54 L2130.12 1212.54 L2130.7 1212.54 L2131.29 1212.54 L2131.88 1212.54 L2132.46 1212.54 L2133.05 1212.54 L2133.63 1212.54 L2134.22 1212.54 L2134.81 1212.54 L2135.39 1212.54 L2135.98 1212.54 L2136.57 1212.54 L2137.15 1212.54 L2137.74 1212.54 L2138.33 1212.54 L2138.91 1212.54 L2139.5 1212.54 L2140.09 1212.54 L2140.67 1212.54 L2141.26 1212.54 L2141.84 1212.54 L2142.43 1212.54 L2143.02 1212.54 L2143.6 1212.54 L2144.19 1212.54 L2144.78 1212.54 L2145.36 1212.54 L2145.95 1212.54 L2146.54 1212.54 L2147.12 1212.54 L2147.71 1212.54 L2148.3 1212.54 L2148.88 1212.54 L2149.47 1212.54 L2150.05 1212.54 L2150.64 1212.54 L2151.23 1212.54 L2151.81 1212.54 L2152.4 1212.54 L2152.99 1212.54 L2153.57 1212.54 L2154.16 1212.54 L2154.75 1212.54 L2155.33 1212.54 L2155.92 1212.54 L2156.5 1212.54 L2157.09 1212.54 L2157.68 1212.54 L2158.26 1212.54 L2158.26 1211.69 L2157.68 1211.69 L2157.09 1211.69 L2156.5 1211.69 L2155.92 1211.69 L2155.33 1211.69 L2154.75 1211.69 L2154.16 1211.69 L2153.57 1211.69 L2152.99 1211.69 L2152.4 1211.69 L2151.81 1211.69 L2151.23 1211.69 L2150.64 1211.69 L2150.05 1211.69 L2149.47 1211.69 L2148.88 1211.69 L2148.3 1211.69 L2147.71 1211.69 L2147.12 1211.69 L2146.54 1211.69 L2145.95 1211.69 L2145.36 1211.69 L2144.78 1211.69 L2144.19 1211.69 L2143.6 1211.69 L2143.02 1211.69 L2142.43 1211.69 L2141.84 1211.69 L2141.26 1211.69 L2140.67 1211.69 L2140.09 1211.69 L2139.5 1211.69 L2138.91 1211.69 L2138.33 1211.69 L2137.74 1211.69 L2137.15 1211.69 L2136.57 1211.69 L2135.98 1211.69 L2135.39 1211.69 L2134.81 1211.69 L2134.22 1211.69 L2133.63 1211.69 L2133.05 1211.69 L2132.46 1211.69 L2131.88 1211.69 L2131.29 1211.69 L2130.7 1211.69 L2130.12 1211.69 L2129.53 1211.69 L2128.94 1211.69 L2128.36 1211.69 L2127.77 1211.69 L2127.18 1211.69 L2126.6 1211.69 L2126.01 1211.69 L2125.42 1211.69 L2124.84 1211.69 L2124.25 1211.69 L2123.67 1211.69 L2123.08 1211.69 L2122.49 1211.69 L2121.91 1211.69 L2121.32 1211.69 L2120.73 1211.69 L2120.15 1211.69 L2119.56 1211.69 L2118.97 1211.69 L2118.39 1211.69 L2117.8 1211.69 L2117.22 1211.69 L2116.63 1211.69 L2116.04 1211.69 L2115.46 1211.69 L2114.87 1211.69 L2114.28 1211.69 L2113.7 1211.69 L2113.11 1211.69 L2112.52 1211.69 L2111.94 1211.69 L2111.35 1211.69 L2110.76 1211.69 L2110.18 1211.69 L2109.59 1211.69 L2109.01 1211.69 L2108.42 1211.69 L2107.83 1211.69 L2107.25 1211.69 L2106.66 1211.69 L2106.07 1211.69 L2105.49 1211.69 L2104.9 1211.69 L2104.31 1211.69 L2103.73 1211.69 L2103.14 1211.69 L2102.55 1211.69 L2101.97 1211.69 L2101.38 1211.69 L2100.8 1211.69 L2100.21 1211.69 L2099.62 1211.69 L2099.04 1211.69 L2098.45 1211.69 L2097.86 1211.69 L2097.28 1211.69 L2096.69 1211.69 L2096.1 1211.69 L2095.52 1211.69 L2094.93 1211.69 L2094.35 1211.69 L2093.76 1211.69 L2093.17 1211.69 L2092.59 1211.69 L2092 1211.69 L2091.41 1211.69 L2090.83 1211.69 L2090.24 1211.69 L2089.65 1211.69 L2089.07 1211.69 L2088.48 1211.69 L2087.89 1211.69 L2087.31 1211.69 L2086.72 1211.69 L2086.14 1211.69 L2085.55 1211.69 L2084.96 1211.69 L2084.38 1211.69 L2083.79 1211.69 L2083.2 1211.69 L2082.62 1211.69 L2082.03 1211.69 L2081.44 1211.69 L2080.86 1211.69 L2080.27 1211.69 L2079.68 1211.69 L2079.1 1211.69 L2078.51 1211.69 L2077.93 1211.69 L2077.34 1211.69 L2076.75 1211.69 L2076.17 1211.69 L2075.58 1211.69 L2074.99 1211.69 L2074.41 1211.69 L2073.82 1211.69 L2073.23 1211.69 L2072.65 1211.69 L2072.06 1211.69 L2071.48 1211.69 L2070.89 1211.69 L2070.3 1211.69 L2069.72 1211.69 L2069.13 1211.69 L2068.54 1211.69 L2067.96 1211.69 L2067.37 1211.69 L2066.78 1211.69 L2066.2 1211.69 L2065.61 1211.69 L2065.02 1211.69 L2064.44 1211.69 L2063.85 1211.69 L2063.27 1211.69 L2062.68 1211.69 L2062.09 1211.69 L2061.51 1211.69 L2060.92 1211.69 L2060.33 1211.69 L2059.75 1211.69 L2059.16 1211.69 L2058.57 1211.69 L2057.99 1211.69 L2057.4 1211.69 L2056.81 1211.69 L2056.23 1211.69 L2055.64 1211.69 L2055.06 1211.69 L2054.47 1211.69 L2053.88 1211.69 L2053.3 1211.69 L2052.71 1211.69 L2052.12 1211.69 L2051.54 1211.69 L2050.95 1211.69 L2050.36 1211.69 L2049.78 1211.69 L2049.19 1211.69 L2048.6 1211.69 L2048.02 1211.69 L2047.43 1211.69 L2046.85 1211.69 L2046.26 1211.69 L2045.67 1211.69 L2045.09 1211.69 L2044.5 1211.69 L2043.91 1211.69 L2043.33 1211.69 L2042.74 1211.69 L2042.15 1211.69 L2041.57 1211.69 L2040.98 1211.69 L2040.4 1211.69 L2039.81 1211.69 L2039.22 1211.69 L2038.64 1211.69 L2038.05 1211.69 L2037.46 1211.69 L2036.88 1211.69 L2036.29 1211.69 L2035.7 1211.69 L2035.12 1211.69 L2034.53 1211.69 L2033.94 1211.69 L2033.36 1211.69 L2032.77 1211.69 L2032.19 1211.69 L2031.6 1211.69 L2031.01 1211.69 L2030.43 1211.69 L2029.84 1211.69 L2029.25 1211.69 L2028.67 1211.69 L2028.08 1211.69 L2027.49 1211.69 L2026.91 1211.69 L2026.32 1211.69 L2025.73 1211.69 L2025.15 1211.69 L2024.56 1211.69 L2023.98 1211.69 L2023.39 1211.69 L2022.8 1211.69 L2022.22 1211.69 L2021.63 1211.69 L2021.04 1211.69 L2020.46 1211.69 L2019.87 1211.69 L2019.28 1211.69 L2018.7 1211.69 L2018.11 1211.69 L2017.53 1211.69 L2016.94 1211.69 L2016.35 1211.69 L2015.77 1211.69 L2015.18 1211.69 L2014.59 1211.69 L2014.01 1211.69 L2013.42 1211.69 L2012.83 1211.69 L2012.25 1211.69 L2011.66 1211.69 L2011.07 1211.69 L2010.49 1211.69 L2009.9 1211.69 L2009.32 1211.69 L2008.73 1211.69 L2008.14 1211.69 L2007.56 1211.69 L2006.97 1211.69 L2006.38 1211.69 L2005.8 1211.69 L2005.21 1211.69 L2004.62 1211.69 L2004.04 1211.69 L2003.45 1211.69 L2002.86 1211.69 L2002.28 1211.69 L2001.69 1211.69 L2001.11 1211.69 L2000.52 1211.69 L1999.93 1211.69 L1999.35 1211.69 L1998.76 1211.69 L1998.17 1211.69 L1997.59 1211.69 L1997 1211.69 L1996.41 1211.69 L1995.83 1211.69 L1995.24 1211.69 L1994.65 1211.69 L1994.07 1211.69 L1993.48 1211.69 L1992.9 1211.69 L1992.31 1211.69 L1991.72 1211.69 L1991.14 1211.69 L1990.55 1211.69 L1989.96 1211.69 L1989.38 1211.69 L1988.79 1211.69 L1988.2 1211.69 L1987.62 1211.69 L1987.03 1211.69 L1986.45 1211.69 L1985.86 1211.69 L1985.27 1211.69 L1984.69 1211.69 L1984.1 1211.69 L1983.51 1211.69 L1982.93 1211.69 L1982.34 1211.69 L1981.75 1211.69 L1981.17 1211.69 L1980.58 1211.69 L1979.99 1211.69 L1979.41 1211.69 L1978.82 1211.69 L1978.24 1211.69 L1977.65 1211.69 L1977.06 1211.69 L1976.48 1211.69 L1975.89 1211.69 L1975.3 1211.69 L1974.72 1211.69 L1974.13 1211.69 L1973.54 1211.69 L1972.96 1211.69 L1972.37 1211.69 L1971.78 1211.69 L1971.2 1211.69 L1970.61 1211.69 L1970.03 1211.69 L1969.44 1211.69 L1968.85 1211.69 L1968.27 1211.69 L1967.68 1211.69 L1967.09 1211.69 L1966.51 1211.69 L1965.92 1211.69 L1965.33 1211.69 L1964.75 1211.69 L1964.16 1211.69 L1963.58 1211.69 L1962.99 1211.69 L1962.4 1211.69 L1961.82 1211.69 L1961.23 1211.69 L1960.64 1211.69 L1960.06 1211.69 L1959.47 1211.69 L1958.88 1211.69 L1958.3 1211.69 L1957.71 1211.69 L1957.12 1211.69 L1956.54 1211.69 L1955.95 1211.69 L1955.37 1211.69 L1954.78 1211.69 L1954.19 1211.69 L1953.61 1211.69 L1953.02 1211.69 L1952.43 1211.69 L1951.85 1211.69 L1951.26 1211.69 L1950.67 1211.69 L1950.09 1211.69 L1949.5 1211.69 L1948.91 1211.69 L1948.33 1211.69 L1947.74 1211.69 L1947.16 1211.69 L1946.57 1211.69 L1945.98 1211.69 L1945.4 1211.69 L1944.81 1211.69 L1944.22 1211.69 L1943.64 1211.69 L1943.05 1211.69 L1942.46 1211.69 L1941.88 1211.69 L1941.29 1211.69 L1940.71 1211.69 L1940.12 1211.69 L1939.53 1211.69 L1938.95 1211.69 L1938.36 1211.69 L1937.77 1211.69 L1937.19 1211.69 L1936.6 1211.69 L1936.01 1211.69 L1935.43 1211.69 L1934.84 1211.69 L1934.25 1211.69 L1933.67 1211.69 L1933.08 1211.69 L1932.5 1211.69 L1931.91 1211.69 L1931.32 1211.69 L1930.74 1211.69 L1930.15 1211.69 L1929.56 1211.69 L1928.98 1211.69 L1928.39 1211.69 L1927.8 1211.69 L1927.22 1211.69 L1926.63 1211.69 L1926.04 1211.69 L1925.46 1211.69 L1924.87 1211.69 L1924.29 1211.69 L1923.7 1211.69 L1923.11 1211.69 L1922.53 1211.69 L1921.94 1211.69 L1921.35 1211.69 L1920.77 1211.69 L1920.18 1211.69 L1919.59 1211.69 L1919.01 1211.69 L1918.42 1211.69 L1917.83 1211.69 L1917.25 1211.69 L1916.66 1211.69 L1916.08 1211.69 L1915.49 1211.69 L1914.9 1211.69 L1914.32 1211.69 L1913.73 1211.69 L1913.14 1211.69 L1912.56 1211.69 L1911.97 1211.69 L1911.38 1211.69 L1910.8 1211.69 L1910.21 1211.69 L1909.63 1211.69 L1909.04 1211.69 L1908.45 1211.69 L1907.87 1211.69 L1907.28 1211.69 L1906.69 1211.69 L1906.11 1211.69 L1905.52 1211.69 L1904.93 1211.69 L1904.35 1211.69 L1903.76 1211.69 L1903.17 1211.69 L1902.59 1211.69 L1902 1211.69 L1901.42 1211.69 L1900.83 1211.69 L1900.24 1211.69 L1899.66 1211.69 L1899.07 1211.69 L1898.48 1211.69 L1897.9 1211.69 L1897.31 1211.69 L1896.72 1211.69 L1896.14 1211.69 L1895.55 1211.69 L1894.96 1211.69 L1894.38 1211.69 L1893.79 1211.69 L1893.21 1211.69 L1892.62 1211.69 L1892.03 1211.69 L1891.45 1211.69 L1890.86 1211.69 L1890.27 1211.69 L1889.69 1211.69 L1889.1 1211.69 L1888.51 1211.69 L1887.93 1211.69 L1887.34 1211.69 L1886.76 1211.69 L1886.17 1211.69 L1885.58 1211.69 L1885 1211.69 L1884.41 1211.69 L1883.82 1211.69 L1883.24 1211.69 L1882.65 1211.69 L1882.06 1211.69 L1881.48 1211.69 L1880.89 1211.69 L1880.3 1211.69 L1879.72 1211.69 L1879.13 1211.69 L1878.55 1211.69 L1877.96 1211.69 L1877.37 1211.69 L1876.79 1211.69 L1876.2 1211.69 L1875.61 1211.69 L1875.03 1211.69 L1874.44 1211.69 L1873.85 1211.69 L1873.27 1211.69 L1872.68 1211.69 L1872.09 1211.69 L1871.51 1211.69 L1870.92 1211.69 L1870.34 1211.69 L1869.75 1211.69 L1869.16 1211.69 L1868.58 1211.69 L1867.99 1211.69 L1867.4 1211.69 L1866.82 1211.69 L1866.23 1211.69 L1865.64 1211.69 L1865.06 1211.69 L1864.47 1211.69 L1863.88 1211.69 L1863.3 1211.69 L1862.71 1211.69 L1862.13 1211.69 L1861.54 1211.69 L1860.95 1211.69 L1860.37 1211.69 L1859.78 1211.69 L1859.19 1211.69 L1858.61 1211.69 L1858.02 1211.69 L1857.43 1211.69 L1856.85 1211.69 L1856.26 1211.69 L1855.68 1211.69 L1855.09 1211.69 L1854.5 1211.69 L1853.92 1211.69 L1853.33 1211.69 L1852.74 1211.69 L1852.16 1211.69 L1851.57 1211.69 L1850.98 1211.69 L1850.4 1211.69 L1849.81 1211.69 L1849.22 1211.69 L1848.64 1211.69 L1848.05 1211.69 L1847.47 1211.69 L1846.88 1211.69 L1846.29 1211.69 L1845.71 1211.69 L1845.12 1211.69 L1844.53 1211.69 L1843.95 1211.69 L1843.36 1211.69 L1842.77 1211.69 L1842.19 1211.69 L1841.6 1211.69 L1841.01 1211.69 L1840.43 1211.69 L1839.84 1211.69 L1839.26 1211.69 L1838.67 1211.69 L1838.08 1211.69 L1837.5 1211.69 L1836.91 1211.69 L1836.32 1211.69 L1835.74 1211.69 L1835.15 1211.69 L1834.56 1211.69 L1833.98 1211.69 L1833.39 1211.69 L1832.81 1211.69 L1832.22 1211.69 L1831.63 1211.69 L1831.05 1211.69 L1830.46 1211.69 L1829.87 1211.69 L1829.29 1211.69 L1828.7 1211.69 L1828.11 1211.69 L1827.53 1211.69 L1826.94 1211.69 L1826.35 1211.69 L1825.77 1211.69 L1825.18 1211.69 L1824.6 1211.69 L1824.01 1211.69 L1823.42 1211.69 L1822.84 1211.69 L1822.25 1211.69 L1821.66 1211.69 L1821.08 1211.69 L1820.49 1211.69 L1819.9 1211.69 L1819.32 1211.69 L1818.73 1211.69 L1818.14 1211.69 L1817.56 1211.69 L1816.97 1211.69 L1816.39 1211.69 L1815.8 1211.69 L1815.21 1211.69 L1814.63 1211.69 L1814.04 1211.69 L1813.45 1211.69 L1812.87 1211.69 L1812.28 1211.69 L1811.69 1211.69 L1811.11 1211.69 L1810.52 1211.69 L1809.94 1211.69 L1809.35 1211.69 L1808.76 1211.69 L1808.18 1211.69 L1807.59 1211.69 L1807 1211.69 L1806.42 1211.69 L1805.83 1211.69 L1805.24 1211.69 L1804.66 1211.69 L1804.07 1211.69 L1803.48 1211.69 L1802.9 1211.69 L1802.31 1211.69 L1801.73 1211.69 L1801.14 1211.69 L1800.55 1211.69 L1799.97 1211.69 L1799.38 1211.69 L1798.79 1211.69 L1798.21 1211.69 L1797.62 1211.69 L1797.03 1211.69 L1796.45 1211.69 L1795.86 1211.69 L1795.27 1211.69 L1794.69 1211.69 L1794.1 1211.69 L1793.52 1211.69 L1792.93 1211.69 L1792.34 1211.69 L1791.76 1211.69 L1791.17 1211.69 L1790.58 1211.69 L1790 1211.69 L1789.41 1211.69 L1788.82 1211.69 L1788.24 1211.69 L1787.65 1211.69 L1787.06 1211.69 L1786.48 1211.69 L1785.89 1211.69 L1785.31 1211.69 L1784.72 1211.69 L1784.13 1211.69 L1783.55 1211.69 L1782.96 1211.69 L1782.37 1211.69 L1781.79 1211.69 L1781.2 1211.69 L1780.61 1211.69 L1780.03 1211.69 L1779.44 1211.69 L1778.86 1211.69 L1778.27 1211.69 L1777.68 1211.69 L1777.1 1211.69 L1776.51 1211.69 L1775.92 1211.69 L1775.34 1211.69 L1774.75 1211.69 L1774.16 1211.69 L1773.58 1211.69 L1772.99 1211.69 L1772.4 1211.69 L1771.82 1211.69 L1771.23 1211.69 L1770.65 1211.69 L1770.06 1211.69 L1769.47 1211.69 L1768.89 1211.69 L1768.3 1211.69 L1767.71 1211.69 L1767.13 1211.69 L1766.54 1211.69 L1765.95 1211.69 L1765.37 1211.69 L1764.78 1211.69 L1764.19 1211.69 L1763.61 1211.69 L1763.02 1211.69 L1762.44 1211.69 L1761.85 1211.69 L1761.26 1211.69 L1760.68 1211.69 L1760.09 1211.69 L1759.5 1211.69 L1758.92 1211.69 L1758.33 1211.69 L1757.74 1211.69 L1757.16 1211.69 L1756.57 1211.69 L1755.99 1211.69 L1755.4 1211.69 L1754.81 1211.69 L1754.23 1211.69 L1753.64 1211.69 L1753.05 1211.69 L1752.47 1211.69 L1751.88 1211.69 L1751.29 1211.69 L1750.71 1211.69 L1750.12 1211.69 L1749.53 1211.69 L1748.95 1211.69 L1748.36 1211.69 L1747.78 1211.69 L1747.19 1211.69 L1746.6 1211.69 L1746.02 1211.69 L1745.43 1211.69 L1744.84 1211.69 L1744.26 1211.69 L1743.67 1211.69 L1743.08 1211.69 L1742.5 1211.69 L1741.91 1211.69 L1741.32 1211.69 L1740.74 1211.69 L1740.15 1211.69 L1739.57 1211.69 L1738.98 1211.69 L1738.39 1211.69 L1737.81 1211.69 L1737.22 1211.69 L1736.63 1211.69 L1736.05 1211.69 L1735.46 1211.69 L1734.87 1211.69 L1734.29 1211.69 L1733.7 1211.69 L1733.11 1211.69 L1732.53 1211.69 L1731.94 1211.69 L1731.36 1211.69 L1730.77 1211.69 L1730.18 1211.69 L1729.6 1211.69 L1729.01 1211.69 L1728.42 1211.69 L1727.84 1211.69 L1727.25 1211.69 L1726.66 1211.69 L1726.08 1211.69 L1725.49 1211.69 L1724.91 1211.69 L1724.32 1211.69 L1723.73 1211.69 L1723.15 1211.69 L1722.56 1211.69 L1721.97 1211.69 L1721.39 1211.69 L1720.8 1211.69 L1720.21 1211.69 L1719.63 1211.69 L1719.04 1211.69 L1718.45 1211.69 L1717.87 1211.69 L1717.28 1211.69 L1716.7 1211.69 L1716.11 1211.69 L1715.52 1211.69 L1714.94 1211.69 L1714.35 1211.69 L1713.76 1211.69 L1713.18 1211.69 L1712.59 1211.69 L1712 1211.69 L1711.42 1211.69 L1710.83 1211.69 L1710.24 1211.69 L1709.66 1211.69 L1709.07 1211.69 L1708.49 1211.69 L1707.9 1211.69 L1707.31 1211.69 L1706.73 1211.69 L1706.14 1211.69 L1705.55 1211.69 L1704.97 1211.69 L1704.38 1211.69 L1703.79 1211.69 L1703.21 1211.69 L1702.62 1211.69 L1702.04 1211.69 L1701.45 1211.69 L1700.86 1211.69 L1700.28 1211.69 L1699.69 1211.69 L1699.1 1211.69 L1698.52 1211.69 L1697.93 1211.69 L1697.34 1211.69 L1696.76 1211.69 L1696.17 1211.69 L1695.58 1211.69 L1695 1211.69 L1694.41 1211.69 L1693.83 1211.69 L1693.24 1211.69 L1692.65 1211.69 L1692.07 1211.69 L1691.48 1211.69 L1690.89 1211.69 L1690.31 1211.69 L1689.72 1211.69 L1689.13 1211.69 L1688.55 1211.69 L1687.96 1211.69 L1687.37 1211.69 L1686.79 1211.69 L1686.2 1211.69 L1685.62 1211.69 L1685.03 1211.69 L1684.44 1211.69 L1683.86 1211.69 L1683.27 1211.69 L1682.68 1211.69 L1682.1 1211.69 L1681.51 1211.69 L1680.92 1211.69 L1680.34 1211.69 L1679.75 1211.69 L1679.17 1211.69 L1678.58 1211.69 L1677.99 1211.69 L1677.41 1211.69 L1676.82 1211.69 L1676.23 1211.69 L1675.65 1211.69 L1675.06 1211.69 L1674.47 1211.69 L1673.89 1211.69 L1673.3 1211.69 L1672.71 1211.69 L1672.13 1211.69 L1671.54 1211.69 L1670.96 1211.69 L1670.37 1211.69 L1669.78 1211.69 L1669.2 1211.69 L1668.61 1211.69 L1668.02 1211.69 L1667.44 1211.69 L1666.85 1211.69 L1666.26 1211.69 L1665.68 1211.69 L1665.09 1211.69 L1664.5 1211.69 L1663.92 1211.69 L1663.33 1211.69 L1662.75 1211.69 L1662.16 1211.69 L1661.57 1211.69 L1660.99 1211.69 L1660.4 1211.69 L1659.81 1211.69 L1659.23 1211.69 L1658.64 1211.69 L1658.05 1211.69 L1657.47 1211.69 L1656.88 1211.69 L1656.29 1211.69 L1655.71 1211.69 L1655.12 1211.69 L1654.54 1211.69 L1653.95 1211.69 L1653.36 1211.69 L1652.78 1211.69 L1652.19 1211.69 L1651.6 1211.69 L1651.02 1211.69 L1650.43 1211.69 L1649.84 1211.69 L1649.26 1211.69 L1648.67 1211.69 L1648.09 1211.69 L1647.5 1211.69 L1646.91 1211.69 L1646.33 1211.69 L1645.74 1211.69 L1645.15 1211.69 L1644.57 1211.69 L1643.98 1211.69 L1643.39 1211.69 L1642.81 1211.69 L1642.22 1211.69 L1641.63 1211.69 L1641.05 1211.69 L1640.46 1211.69 L1639.88 1211.69 L1639.29 1211.69 L1638.7 1211.69 L1638.12 1211.69 L1637.53 1211.69 L1636.94 1211.69 L1636.36 1211.69 L1635.77 1211.69 L1635.18 1211.69 L1634.6 1211.69 L1634.01 1211.69 L1633.42 1211.69 L1632.84 1211.69 L1632.25 1211.69 L1631.67 1211.69 L1631.08 1211.69 L1630.49 1211.69 L1629.91 1211.69 L1629.32 1211.69 L1628.73 1211.69 L1628.15 1211.69 L1627.56 1211.69 L1626.97 1211.69 L1626.39 1211.69 L1625.8 1211.69 L1625.22 1211.69 L1624.63 1211.69 L1624.04 1211.69 L1623.46 1211.69 L1622.87 1211.69 L1622.28 1211.69 L1621.7 1211.69 L1621.11 1211.69 L1620.52 1211.69 L1619.94 1211.69 L1619.35 1211.69 L1618.76 1211.69 L1618.18 1211.69 L1617.59 1211.69 L1617.01 1211.69 L1616.42 1211.69 L1615.83 1211.69 L1615.25 1211.69 L1614.66 1211.69 L1614.07 1211.69 L1613.49 1211.69 L1612.9 1211.69 L1612.31 1211.69 L1611.73 1211.69 L1611.14 1211.69 L1610.55 1211.69 L1609.97 1211.69 L1609.38 1211.69 L1608.8 1211.69 L1608.21 1211.69 L1607.62 1211.69 L1607.04 1211.69 L1606.45 1211.69 L1605.86 1211.69 L1605.28 1211.69 L1604.69 1211.69 L1604.1 1211.69 L1603.52 1211.69 L1602.93 1211.69 L1602.34 1211.69 L1601.76 1211.69 L1601.17 1211.69 L1600.59 1211.69 L1600 1211.69 L1599.41 1211.69 L1598.83 1211.69 L1598.24 1211.69 L1597.65 1211.69 L1597.07 1211.69 L1596.48 1211.69 L1595.89 1211.69 L1595.31 1211.69 L1594.72 1211.69 L1594.14 1211.69 L1593.55 1211.69 L1592.96 1211.69 L1592.38 1211.69 L1591.79 1211.69 L1591.2 1211.69 L1590.62 1211.69 L1590.03 1211.69 L1589.44 1211.69 L1588.86 1211.69 L1588.27 1211.69 L1587.68 1211.69 L1587.1 1211.69 L1586.51 1211.69 L1585.93 1211.69 L1585.34 1211.69 L1584.75 1211.69 L1584.17 1211.69 L1583.58 1211.69 L1582.99 1211.69 L1582.41 1211.69 L1581.82 1211.69 L1581.23 1211.69 L1580.65 1211.69 L1580.06 1211.69 L1579.47 1211.69 L1578.89 1211.69 L1578.3 1211.69 L1577.72 1211.69 L1577.13 1211.69 L1576.54 1211.69 L1575.96 1211.69 L1575.37 1211.69 L1574.78 1211.69 L1574.2 1211.69 L1573.61 1211.69 L1573.02 1211.69 L1572.44 1211.69 L1571.85 1211.69 L1571.27 1211.69 L1570.68 1211.69 L1570.09 1211.69 L1569.51 1211.69 L1568.92 1211.69 L1568.33 1211.69 L1567.75 1211.69 L1567.16 1211.69 L1566.57 1211.69 L1565.99 1211.69 L1565.4 1211.69 L1564.81 1211.69 L1564.23 1211.69 L1563.64 1211.69 L1563.06 1211.69 L1562.47 1211.69 L1561.88 1211.69 L1561.3 1211.69 L1560.71 1211.69 L1560.12 1211.69 L1559.54 1211.69 L1558.95 1211.69 L1558.36 1211.69 L1557.78 1211.69 L1557.19 1211.69 L1556.6 1211.69 L1556.02 1211.69 L1555.43 1211.69 L1554.85 1211.69 L1554.26 1211.69 L1553.67 1211.69 L1553.09 1211.69 L1552.5 1211.69 L1551.91 1211.69 L1551.33 1211.69 L1550.74 1211.69 L1550.15 1211.69 L1549.57 1211.69 L1548.98 1211.69 L1548.4 1211.69 L1547.81 1211.69 L1547.22 1211.69 L1546.64 1211.69 L1546.05 1211.69 L1545.46 1211.69 L1544.88 1211.69 L1544.29 1211.69 L1543.7 1211.69 L1543.12 1211.69 L1542.53 1211.69 L1541.94 1211.69 L1541.36 1211.69 L1540.77 1211.69 L1540.19 1211.69 L1539.6 1211.69 L1539.01 1211.69 L1538.43 1211.69 L1537.84 1211.69 L1537.25 1211.69 L1536.67 1211.69 L1536.08 1211.69 L1535.49 1211.69 L1534.91 1211.69 L1534.32 1211.69 L1533.73 1211.69 L1533.15 1211.69 L1532.56 1211.69 L1531.98 1211.69 L1531.39 1211.69 L1530.8 1211.69 L1530.22 1211.69 L1529.63 1211.69 L1529.04 1211.69 L1528.46 1211.69 L1527.87 1211.69 L1527.28 1211.69 L1526.7 1211.69 L1526.11 1211.69 L1525.52 1211.69 L1524.94 1211.69 L1524.35 1211.69 L1523.77 1211.69 L1523.18 1211.69 L1522.59 1211.69 L1522.01 1211.69 L1521.42 1211.69 L1520.83 1211.69 L1520.25 1211.69 L1519.66 1211.69 L1519.07 1211.69 L1518.49 1211.69 L1517.9 1211.69 L1517.32 1211.69 L1516.73 1211.69 L1516.14 1211.69 L1515.56 1211.69 L1514.97 1211.69 L1514.38 1211.69 L1513.8 1211.69 L1513.21 1211.69 L1512.62 1211.69 L1512.04 1211.69 L1511.45 1211.69 L1510.86 1211.69 L1510.28 1211.69 L1509.69 1211.69 L1509.11 1211.69 L1508.52 1211.69 L1507.93 1211.69 L1507.35 1211.69 L1506.76 1211.69 L1506.17 1211.69 L1505.59 1211.69 L1505 1211.69 L1504.41 1211.69 L1503.83 1211.69 L1503.24 1211.69 L1502.65 1211.69 L1502.07 1211.69 L1501.48 1211.69 L1500.9 1211.69 L1500.31 1211.69 L1499.72 1211.69 L1499.14 1211.69 L1498.55 1211.69 L1497.96 1211.69 L1497.38 1211.69 L1496.79 1211.69 L1496.2 1211.69 L1495.62 1211.69 L1495.03 1211.69 L1494.45 1211.69 L1493.86 1211.69 L1493.27 1211.69 L1492.69 1211.69 L1492.1 1211.69 L1491.51 1211.69 L1490.93 1211.69 L1490.34 1211.69 L1489.75 1211.69 L1489.17 1211.69 L1488.58 1211.69 L1487.99 1211.69 L1487.41 1211.69 L1486.82 1211.69 L1486.24 1211.69 L1485.65 1211.69 L1485.06 1211.69 L1484.48 1211.69 L1483.89 1211.69 L1483.3 1211.69 L1482.72 1211.69 L1482.13 1211.69 L1481.54 1211.69 L1480.96 1211.69 L1480.37 1211.69 L1479.78 1211.69 L1479.2 1211.69 L1478.61 1211.69 L1478.03 1211.69 L1477.44 1211.69 L1476.85 1211.69 L1476.27 1211.69 L1475.68 1211.69 L1475.09 1211.69 L1474.51 1211.69 L1473.92 1211.69 L1473.33 1211.69 L1472.75 1211.69 L1472.16 1211.69 L1471.57 1211.69 L1470.99 1211.69 L1470.4 1211.69 L1469.82 1211.69 L1469.23 1211.69 L1468.64 1211.69 L1468.06 1211.69 L1467.47 1211.69 L1466.88 1211.69 L1466.3 1211.69 L1465.71 1211.69 L1465.12 1211.69 L1464.54 1211.69 L1463.95 1211.69 L1463.37 1211.69 L1462.78 1211.69 L1462.19 1211.69 L1461.61 1211.69 L1461.02 1211.69 L1460.43 1211.69 L1459.85 1211.69 L1459.26 1211.69 L1458.67 1211.69 L1458.09 1211.69 L1457.5 1211.69 L1456.91 1211.69 L1456.33 1211.69 L1455.74 1211.69 L1455.16 1211.69 L1454.57 1211.69 L1453.98 1211.69 L1453.4 1211.69 L1452.81 1211.69 L1452.22 1211.69 L1451.64 1211.69 L1451.05 1211.69 L1450.46 1211.69 L1449.88 1211.69 L1449.29 1211.69 L1448.7 1211.69 L1448.12 1211.69 L1447.53 1211.69 L1446.95 1211.69 L1446.36 1211.69 L1445.77 1211.69 L1445.19 1211.69 L1444.6 1211.69 L1444.01 1211.69 L1443.43 1211.69 L1442.84 1211.69 L1442.25 1211.69 L1441.67 1211.69 L1441.08 1211.69 L1440.5 1211.69 L1439.91 1211.69 L1439.32 1211.69 L1438.74 1211.69 L1438.15 1211.69 L1437.56 1211.69 L1436.98 1211.69 L1436.39 1211.69 L1435.8 1211.69 L1435.22 1211.69 L1434.63 1211.69 L1434.04 1211.69 L1433.46 1211.69 L1432.87 1211.69 L1432.29 1211.69 L1431.7 1211.69 L1431.11 1211.69 L1430.53 1211.69 L1429.94 1211.69 L1429.35 1211.69 L1428.77 1211.69 L1428.18 1211.69 L1427.59 1211.69 L1427.01 1211.69 L1426.42 1211.69 L1425.83 1211.69 L1425.25 1211.69 L1424.66 1211.69 L1424.08 1211.69 L1423.49 1211.69 L1422.9 1211.69 L1422.32 1211.69 L1421.73 1211.69 L1421.14 1211.69 L1420.56 1211.69 L1419.97 1211.69 L1419.38 1211.69 L1418.8 1211.69 L1418.21 1211.69 L1417.63 1211.69 L1417.04 1211.69 L1416.45 1211.69 L1415.87 1211.69 L1415.28 1211.69 L1414.69 1211.69 L1414.11 1211.69 L1413.52 1211.69 L1412.93 1211.69 L1412.35 1211.69 L1411.76 1211.69 L1411.17 1211.69 L1410.59 1211.69 L1410 1211.69 L1409.42 1211.69 L1408.83 1211.69 L1408.24 1211.69 L1407.66 1211.69 L1407.07 1211.69 L1406.48 1211.69 L1405.9 1211.69 L1405.31 1211.69 L1404.72 1211.69 L1404.14 1211.69 L1403.55 1211.69 L1402.96 1211.69 L1402.38 1211.69 L1401.79 1211.69 L1401.21 1211.69 L1400.62 1211.69 L1400.03 1211.69 L1399.45 1211.69 L1398.86 1211.69 L1398.27 1211.69 L1397.69 1211.69 L1397.1 1211.69 L1396.51 1211.69 L1395.93 1211.69 L1395.34 1211.69 L1394.75 1211.69 L1394.17 1211.69 L1393.58 1211.69 L1393 1211.69 L1392.41 1211.69 L1391.82 1211.69 L1391.24 1211.69 L1390.65 1211.69 L1390.06 1211.69 L1389.48 1211.69 L1388.89 1211.69 L1388.3 1211.69 L1387.72 1211.69 L1387.13 1211.69 L1386.55 1211.69 L1385.96 1211.69 L1385.37 1211.69 L1384.79 1211.69 L1384.2 1211.69 L1383.61 1211.69 L1383.03 1211.69 L1382.44 1211.69 L1381.85 1211.69 L1381.27 1211.69 L1380.68 1211.69 L1380.09 1211.69 L1379.51 1211.69 L1378.92 1211.69 L1378.34 1211.69 L1377.75 1211.69 L1377.16 1211.69 L1376.58 1211.69 L1375.99 1211.69 L1375.4 1211.69 L1374.82 1211.69 L1374.23 1211.69 L1373.64 1211.69 L1373.06 1211.69 L1372.47 1211.69 L1371.88 1211.69 L1371.3 1211.69 L1370.71 1211.69 L1370.13 1211.69 L1369.54 1211.69 L1368.95 1211.69 L1368.37 1211.69 L1367.78 1211.69 L1367.19 1211.69 L1366.61 1211.69 L1366.02 1211.69 L1365.43 1211.69 L1364.85 1211.69 L1364.26 1211.69 L1363.68 1211.69 L1363.09 1211.69 L1362.5 1211.69 L1361.92 1211.69 L1361.33 1211.69 L1360.74 1211.69 L1360.16 1211.69 L1359.57 1211.69 L1358.98 1211.69 L1358.4 1211.69 L1357.81 1211.69 L1357.22 1211.69 L1356.64 1211.69 L1356.05 1211.69 L1355.47 1211.69 L1354.88 1211.69 L1354.29 1211.69 L1353.71 1211.69 L1353.12 1211.69 L1352.53 1211.69 L1351.95 1211.69 L1351.36 1211.69 L1350.77 1211.69 L1350.19 1211.69 L1349.6 1211.69 L1349.01 1211.69 L1348.43 1211.69 L1347.84 1211.69 L1347.26 1211.69 L1346.67 1211.69 L1346.08 1211.69 L1345.5 1211.69 L1344.91 1211.69 L1344.32 1211.69 L1343.74 1211.69 L1343.15 1211.69 L1342.56 1211.69 L1341.98 1211.69 L1341.39 1211.69 L1340.8 1211.69 L1340.22 1211.69 L1339.63 1211.69 L1339.05 1211.69 L1338.46 1211.69 L1337.87 1211.69 L1337.29 1211.69 L1336.7 1211.69 L1336.11 1211.69 L1335.53 1211.69 L1334.94 1211.69 L1334.35 1211.69 L1333.77 1211.69 L1333.18 1211.69 L1332.6 1211.69 L1332.01 1211.69 L1331.42 1211.69 L1330.84 1211.69 L1330.25 1211.69 L1329.66 1211.69 L1329.08 1211.69 L1328.49 1211.69 L1327.9 1211.69 L1327.32 1211.69 L1326.73 1211.69 L1326.14 1211.69 L1325.56 1211.69 L1324.97 1211.69 L1324.39 1211.69 L1323.8 1211.69 L1323.21 1211.69 L1322.63 1211.69 L1322.04 1211.69 L1321.45 1211.69 L1320.87 1211.69 L1320.28 1211.69 L1319.69 1211.69 L1319.11 1211.69 L1318.52 1211.69 L1317.93 1211.69 L1317.35 1211.69 L1316.76 1211.69 L1316.18 1211.69 L1315.59 1211.69 L1315 1211.69 L1314.42 1211.69 L1313.83 1211.69 L1313.24 1211.69 L1312.66 1211.69 L1312.07 1211.69 L1311.48 1211.69 L1310.9 1211.69 L1310.31 1211.69 L1309.73 1211.69 L1309.14 1211.69 L1308.55 1211.69 L1307.97 1211.69 L1307.38 1211.69 L1306.79 1211.69 L1306.21 1211.69 L1305.62 1211.69 L1305.03 1211.69 L1304.45 1211.69 L1303.86 1211.69 L1303.27 1211.69 L1302.69 1211.69 L1302.1 1211.69 L1301.52 1211.69 L1300.93 1211.69 L1300.34 1211.69 L1299.76 1211.69 L1299.17 1211.69 L1298.58 1211.69 L1298 1211.69 L1297.41 1211.69 L1296.82 1211.69 L1296.24 1211.69 L1295.65 1211.69 L1295.06 1211.69 L1294.48 1211.69 L1293.89 1211.69 L1293.31 1211.69 L1292.72 1211.69 L1292.13 1211.69 L1291.55 1211.69 L1290.96 1211.69 L1290.37 1211.69 L1289.79 1211.69 L1289.2 1211.69 L1288.61 1211.69 L1288.03 1211.69 L1287.44 1211.69 L1286.86 1211.69 L1286.27 1211.69 L1285.68 1211.69 L1285.1 1211.69 L1284.51 1211.69 L1283.92 1211.69 L1283.34 1211.69 L1282.75 1211.69 L1282.16 1211.69 L1281.58 1211.69 L1280.99 1211.69 L1280.4 1211.69 L1279.82 1211.69 L1279.23 1211.69 L1278.65 1211.69 L1278.06 1211.69 L1277.47 1211.69 L1276.89 1211.69 L1276.3 1211.69 L1275.71 1211.69 L1275.13 1211.69 L1274.54 1211.69 L1273.95 1211.69 L1273.37 1211.69 L1272.78 1211.69 L1272.19 1211.69 L1271.61 1211.69 L1271.02 1211.69 L1270.44 1211.69 L1269.85 1211.69 L1269.26 1211.69 L1268.68 1211.69 L1268.09 1211.69 L1267.5 1211.69 L1266.92 1211.69 L1266.33 1211.69 L1265.74 1211.69 L1265.16 1211.69 L1264.57 1211.69 L1263.98 1211.69 L1263.4 1211.69 L1262.81 1211.69 L1262.23 1211.69 L1261.64 1211.69 L1261.05 1211.69 L1260.47 1211.69 L1259.88 1211.69 L1259.29 1211.69 L1258.71 1211.69 L1258.12 1211.69 L1257.53 1211.69 L1256.95 1211.69 L1256.36 1211.69 L1255.78 1211.69 L1255.19 1211.69 L1254.6 1211.69 L1254.02 1211.69 L1253.43 1211.69 L1252.84 1211.69 L1252.26 1211.69 L1251.67 1211.69 L1251.08 1211.69 L1250.5 1211.69 L1249.91 1211.69 L1249.32 1211.69 L1248.74 1211.69 L1248.15 1211.69 L1247.57 1211.69 L1246.98 1211.69 L1246.39 1211.69 L1245.81 1211.69 L1245.22 1211.69 L1244.63 1211.69 L1244.05 1211.69 L1243.46 1211.69 L1242.87 1211.69 L1242.29 1211.69 L1241.7 1211.69 L1241.11 1211.69 L1240.53 1211.69 L1239.94 1211.69 L1239.36 1211.69 L1238.77 1211.69 L1238.18 1211.69 L1237.6 1211.69 L1237.01 1211.69 L1236.42 1211.69 L1235.84 1211.69 L1235.25 1211.69 L1234.66 1211.69 L1234.08 1211.69 L1233.49 1211.69 L1232.91 1211.69 L1232.32 1211.69 L1231.73 1211.69 L1231.15 1211.69 L1230.56 1211.69 L1229.97 1211.69 L1229.39 1211.69 L1228.8 1211.69 L1228.21 1211.69 L1227.63 1211.69 L1227.04 1211.69 L1226.45 1211.69 L1225.87 1211.69 L1225.28 1211.69 L1224.7 1211.69 L1224.11 1211.69 L1223.52 1211.69 L1222.94 1211.69 L1222.35 1211.69 L1221.76 1211.69 L1221.18 1211.69 L1220.59 1211.69 L1220 1211.69 L1219.42 1211.69 L1218.83 1211.69 L1218.24 1211.69 L1217.66 1211.69 L1217.07 1211.69 L1216.49 1211.69 L1215.9 1211.69 L1215.31 1211.69 L1214.73 1211.69 L1214.14 1211.69 L1213.55 1211.69 L1212.97 1211.69 L1212.38 1211.69 L1211.79 1211.69 L1211.21 1211.69 L1210.62 1211.69 L1210.03 1211.69 L1209.45 1211.69 L1208.86 1211.69 L1208.28 1211.69 L1207.69 1211.69 L1207.1 1211.69 L1206.52 1211.69 L1205.93 1211.69 L1205.34 1211.69 L1204.76 1211.69 L1204.17 1211.69 L1203.58 1211.69 L1203 1211.69 L1202.41 1211.69 L1201.83 1211.69 L1201.24 1211.69 L1200.65 1211.69 L1200.07 1211.69 L1199.48 1211.69 L1198.89 1211.69 L1198.31 1211.69 L1197.72 1211.69 L1197.13 1211.69 L1196.55 1211.69 L1195.96 1211.69 L1195.37 1211.69 L1194.79 1211.69 L1194.2 1211.69 L1193.62 1211.69 L1193.03 1211.69 L1192.44 1211.69 L1191.86 1211.69 L1191.27 1211.69 L1190.68 1211.69 L1190.1 1211.69 L1189.51 1211.69 L1188.92 1211.69 L1188.34 1211.69 L1187.75 1211.69 L1187.16 1211.69 L1186.58 1211.69 L1185.99 1211.69 L1185.41 1211.69 L1184.82 1211.69 L1184.23 1211.69 L1183.65 1211.69 L1183.06 1211.69 L1182.47 1211.69 L1181.89 1211.69 L1181.3 1211.69 L1180.71 1211.69 L1180.13 1211.69 L1179.54 1211.69 L1178.96 1211.69 L1178.37 1211.69 L1177.78 1211.69 L1177.2 1211.69 L1176.61 1211.69 L1176.02 1211.69 L1175.44 1211.69 L1174.85 1211.69 L1174.26 1211.69 L1173.68 1211.69 L1173.09 1211.69 L1172.5 1211.69 L1171.92 1211.69 L1171.33 1211.69 L1170.75 1211.69 L1170.16 1211.69 L1169.57 1211.69 L1168.99 1211.69 L1168.4 1211.69 L1167.81 1211.69 L1167.23 1211.69 L1166.64 1211.69 L1166.05 1211.69 L1165.47 1211.69 L1164.88 1211.69 L1164.29 1211.69 L1163.71 1211.69 L1163.12 1211.69 L1162.54 1211.69 L1161.95 1211.69 L1161.36 1211.69 L1160.78 1211.69 L1160.19 1211.69 L1159.6 1211.69 L1159.02 1211.69 L1158.43 1211.69 L1157.84 1211.69 L1157.26 1211.69 L1156.67 1211.69 L1156.09 1211.69 L1155.5 1211.69 L1154.91 1211.69 L1154.33 1211.69 L1153.74 1211.69 L1153.15 1211.69 L1152.57 1211.69 L1151.98 1211.69 L1151.39 1211.69 L1150.81 1211.69 L1150.22 1211.69 L1149.63 1211.69 L1149.05 1211.69 L1148.46 1211.69 L1147.88 1211.69 L1147.29 1211.69 L1146.7 1211.69 L1146.12 1211.69 L1145.53 1211.69 L1144.94 1211.69 L1144.36 1211.69 L1143.77 1211.69 L1143.18 1211.69 L1142.6 1211.69 L1142.01 1211.69 L1141.42 1211.69 L1140.84 1211.69 L1140.25 1211.69 L1139.67 1211.69 L1139.08 1211.69 L1138.49 1211.69 L1137.91 1211.69 L1137.32 1211.69 L1136.73 1211.69 L1136.15 1211.69 L1135.56 1211.69 L1134.97 1211.69 L1134.39 1211.69 L1133.8 1211.69 L1133.21 1211.69 L1132.63 1211.69 L1132.04 1211.69 L1131.46 1211.69 L1130.87 1211.69 L1130.28 1211.69 L1129.7 1211.69 L1129.11 1211.69 L1128.52 1211.69 L1127.94 1211.69 L1127.35 1211.69 L1126.76 1211.69 L1126.18 1211.69 L1125.59 1211.69 L1125.01 1211.69 L1124.42 1211.69 L1123.83 1211.69 L1123.25 1211.69 L1122.66 1211.69 L1122.07 1211.69 L1121.49 1211.69 L1120.9 1211.69 L1120.31 1211.69 L1119.73 1211.69 L1119.14 1211.69 L1118.55 1211.69 L1117.97 1211.69 L1117.38 1211.69 L1116.8 1211.69 L1116.21 1211.69 L1115.62 1211.69 L1115.04 1211.69 L1114.45 1211.69 L1113.86 1211.69 L1113.28 1211.69 L1112.69 1211.69 L1112.1 1211.69 L1111.52 1211.69 L1110.93 1211.69 L1110.34 1211.69 L1109.76 1211.69 L1109.17 1211.69 L1108.59 1211.69 L1108 1211.69 L1107.41 1211.69 L1106.83 1211.69 L1106.24 1211.69 L1105.65 1211.69 L1105.07 1211.69 L1104.48 1211.69 L1103.89 1211.69 L1103.31 1211.69 L1102.72 1211.69 L1102.14 1211.69 L1101.55 1211.69 L1100.96 1211.69 L1100.38 1211.69 L1099.79 1211.69 L1099.2 1211.69 L1098.62 1211.69 L1098.03 1211.69 L1097.44 1211.69 L1096.86 1211.69 L1096.27 1211.69 L1095.68 1211.69 L1095.1 1211.69 L1094.51 1211.69 L1093.93 1211.69 L1093.34 1211.69 L1092.75 1211.69 L1092.17 1211.69 L1091.58 1211.69 L1090.99 1211.69 L1090.41 1211.69 L1089.82 1211.69 L1089.23 1211.69 L1088.65 1211.69 L1088.06 1211.69 L1087.47 1211.69 L1086.89 1211.69 L1086.3 1211.69 L1085.72 1211.69 L1085.13 1211.69 L1084.54 1211.69 L1083.96 1211.69 L1083.37 1211.69 L1082.78 1211.69 L1082.2 1211.69 L1081.61 1211.69 L1081.02 1211.69 L1080.44 1211.69 L1079.85 1211.69 L1079.26 1211.69 L1078.68 1211.69 L1078.09 1211.69 L1077.51 1211.69 L1076.92 1211.69 L1076.33 1211.69 L1075.75 1211.69 L1075.16 1211.69 L1074.57 1211.69 L1073.99 1211.69 L1073.4 1211.69 L1072.81 1211.69 L1072.23 1211.69 L1071.64 1211.69 L1071.06 1211.69 L1070.47 1211.69 L1069.88 1211.69 L1069.3 1211.69 L1068.71 1211.69 L1068.12 1211.69 L1067.54 1211.69 L1066.95 1211.69 L1066.36 1211.69 L1065.78 1211.69 L1065.19 1211.69 L1064.6 1211.69 L1064.02 1211.69 L1063.43 1211.69 L1062.85 1211.69 L1062.26 1211.69 L1061.67 1211.69 L1061.09 1211.69 L1060.5 1211.69 L1059.91 1211.69 L1059.33 1211.69 L1058.74 1211.69 L1058.15 1211.69 L1057.57 1211.69 L1056.98 1211.69 L1056.39 1211.69 L1055.81 1211.69 L1055.22 1211.69 L1054.64 1211.69 L1054.05 1211.69 L1053.46 1211.69 L1052.88 1211.69 L1052.29 1211.69 L1051.7 1211.69 L1051.12 1211.69 L1050.53 1211.69 L1049.94 1211.69 L1049.36 1211.69 L1048.77 1211.69 L1048.19 1211.69 L1047.6 1211.69 L1047.01 1211.69 L1046.43 1211.69 L1045.84 1211.69 L1045.25 1211.69 L1044.67 1211.69 L1044.08 1211.69 L1043.49 1211.69 L1042.91 1211.69 L1042.32 1211.69 L1041.73 1211.69 L1041.15 1211.69 L1040.56 1211.69 L1039.98 1211.69 L1039.39 1211.69 L1038.8 1211.69 L1038.22 1211.69 L1037.63 1211.69 L1037.04 1211.69 L1036.46 1211.69 L1035.87 1211.69 L1035.28 1211.69 L1034.7 1211.69 L1034.11 1211.69 L1033.52 1211.69 L1032.94 1211.69 L1032.35 1211.69 L1031.77 1211.69 L1031.18 1211.69 L1030.59 1211.69 L1030.01 1211.69 L1029.42 1211.69 L1028.83 1211.69 L1028.25 1211.69 L1027.66 1211.69 L1027.07 1211.69 L1026.49 1211.69 L1025.9 1211.69 L1025.32 1211.69 L1024.73 1211.69 L1024.14 1211.69 L1023.56 1211.69 L1022.97 1211.69 L1022.38 1211.69 L1021.8 1211.69 L1021.21 1211.69 L1020.62 1211.69 L1020.04 1211.69 L1019.45 1211.69 L1018.86 1211.69 L1018.28 1211.69 L1017.69 1211.69 L1017.11 1211.69 L1016.52 1211.69 L1015.93 1211.69 L1015.35 1211.69 L1014.76 1211.69 L1014.17 1211.69 L1013.59 1211.69 L1013 1211.69 L1012.41 1211.69 L1011.83 1211.69 L1011.24 1211.69 L1010.65 1211.69 L1010.07 1211.69 L1009.48 1211.69 L1008.9 1211.69 L1008.31 1211.69 L1007.72 1211.69 L1007.14 1211.69 L1006.55 1211.69 L1005.96 1211.69 L1005.38 1211.69 L1004.79 1211.69 L1004.2 1211.69 L1003.62 1211.69 L1003.03 1211.69 L1002.44 1211.69 L1001.86 1211.69 L1001.27 1211.69 L1000.69 1211.69 L1000.1 1211.69 L999.513 1211.69 L998.926 1211.69 L998.34 1211.69 L997.754 1211.69 L997.167 1211.69 L996.581 1211.69 L995.994 1211.69 L995.408 1211.69 L994.822 1211.69 L994.235 1211.69 L993.649 1211.69 L993.062 1211.69 L992.476 1211.69 L991.889 1211.69 L991.303 1211.69 L990.717 1211.69 L990.13 1211.69 L989.544 1211.69 L988.957 1211.69 L988.371 1211.69 L987.785 1211.69 L987.198 1211.69 L986.612 1211.69 L986.025 1211.69  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip282)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1212.11 986.612,1212.11 987.198,1212.11 987.785,1212.11 988.371,1212.11 988.957,1212.11 989.544,1212.11 990.13,1212.11 990.717,1212.11 991.303,1212.11 991.889,1212.11 992.476,1212.11 993.062,1212.11 993.649,1212.11 994.235,1212.11 994.822,1212.11 995.408,1212.11 995.994,1212.11 996.581,1212.11 997.167,1212.11 997.754,1212.11 998.34,1212.11 998.926,1212.11 999.513,1212.11 1000.1,1212.11 1000.69,1212.11 1001.27,1212.11 1001.86,1212.11 1002.44,1212.11 1003.03,1212.11 1003.62,1212.11 1004.2,1212.11 1004.79,1212.11 1005.38,1212.11 1005.96,1212.11 1006.55,1212.11 1007.14,1212.11 1007.72,1212.11 1008.31,1212.11 1008.9,1212.11 1009.48,1212.11 1010.07,1212.11 1010.65,1212.11 1011.24,1212.11 1011.83,1212.11 1012.41,1212.11 1013,1212.11 1013.59,1212.11 1014.17,1212.11 1014.76,1212.11 1015.35,1212.11 1015.93,1212.11 1016.52,1212.11 1017.11,1212.11 1017.69,1212.11 1018.28,1212.11 1018.86,1212.11 1019.45,1212.11 1020.04,1212.11 1020.62,1212.11 1021.21,1212.11 1021.8,1212.11 1022.38,1212.11 1022.97,1212.11 1023.56,1212.11 1024.14,1212.11 1024.73,1212.11 1025.32,1212.11 1025.9,1212.11 1026.49,1212.11 1027.07,1212.11 1027.66,1212.11 1028.25,1212.11 1028.83,1212.11 1029.42,1212.11 1030.01,1212.11 1030.59,1212.11 1031.18,1212.11 1031.77,1212.11 1032.35,1212.11 1032.94,1212.11 1033.52,1212.11 1034.11,1212.11 1034.7,1212.11 1035.28,1212.11 1035.87,1212.11 1036.46,1212.11 1037.04,1212.11 1037.63,1212.11 1038.22,1212.11 1038.8,1212.11 1039.39,1212.11 1039.98,1212.11 1040.56,1212.11 1041.15,1212.11 1041.73,1212.11 1042.32,1212.11 1042.91,1212.11 1043.49,1212.11 1044.08,1212.11 1044.67,1212.11 1045.25,1212.11 1045.84,1212.11 1046.43,1212.11 1047.01,1212.11 1047.6,1212.11 1048.19,1212.11 1048.77,1212.11 1049.36,1212.11 1049.94,1212.11 1050.53,1212.11 1051.12,1212.11 1051.7,1212.11 1052.29,1212.11 1052.88,1212.11 1053.46,1212.11 1054.05,1212.11 1054.64,1212.11 1055.22,1212.11 1055.81,1212.11 1056.39,1212.11 1056.98,1212.11 1057.57,1212.11 1058.15,1212.11 1058.74,1212.11 1059.33,1212.11 1059.91,1212.11 1060.5,1212.11 1061.09,1212.11 1061.67,1212.11 1062.26,1212.11 1062.85,1212.11 1063.43,1212.11 1064.02,1212.11 1064.6,1212.11 1065.19,1212.11 1065.78,1212.11 1066.36,1212.11 1066.95,1212.11 1067.54,1212.11 1068.12,1212.11 1068.71,1212.11 1069.3,1212.11 1069.88,1212.11 1070.47,1212.11 1071.06,1212.11 1071.64,1212.11 1072.23,1212.11 1072.81,1212.11 1073.4,1212.11 1073.99,1212.11 1074.57,1212.11 1075.16,1212.11 1075.75,1212.11 1076.33,1212.11 1076.92,1212.11 1077.51,1212.11 1078.09,1212.11 1078.68,1212.11 1079.26,1212.11 1079.85,1212.11 1080.44,1212.11 1081.02,1212.11 1081.61,1212.11 1082.2,1212.11 1082.78,1212.11 1083.37,1212.11 1083.96,1212.11 1084.54,1212.11 1085.13,1212.11 1085.72,1212.11 1086.3,1212.11 1086.89,1212.11 1087.47,1212.11 1088.06,1212.11 1088.65,1212.11 1089.23,1212.11 1089.82,1212.11 1090.41,1212.11 1090.99,1212.11 1091.58,1212.11 1092.17,1212.11 1092.75,1212.11 1093.34,1212.11 1093.93,1212.11 1094.51,1212.11 1095.1,1212.11 1095.68,1212.11 1096.27,1212.11 1096.86,1212.11 1097.44,1212.11 1098.03,1212.11 1098.62,1212.11 1099.2,1212.11 1099.79,1212.11 1100.38,1212.11 1100.96,1212.11 1101.55,1212.11 1102.14,1212.11 1102.72,1212.11 1103.31,1212.11 1103.89,1212.11 1104.48,1212.11 1105.07,1212.11 1105.65,1212.11 1106.24,1212.11 1106.83,1212.11 1107.41,1212.11 1108,1212.11 1108.59,1212.11 1109.17,1212.11 1109.76,1212.11 1110.34,1212.11 1110.93,1212.11 1111.52,1212.11 1112.1,1212.11 1112.69,1212.11 1113.28,1212.11 1113.86,1212.11 1114.45,1212.11 1115.04,1212.11 1115.62,1212.11 1116.21,1212.11 1116.8,1212.11 1117.38,1212.11 1117.97,1212.11 1118.55,1212.11 1119.14,1212.11 1119.73,1212.11 1120.31,1212.11 1120.9,1212.11 1121.49,1212.11 1122.07,1212.11 1122.66,1212.11 1123.25,1212.11 1123.83,1212.11 1124.42,1212.11 1125.01,1212.11 1125.59,1212.11 1126.18,1212.11 1126.76,1212.11 1127.35,1212.11 1127.94,1212.11 1128.52,1212.11 1129.11,1212.11 1129.7,1212.11 1130.28,1212.11 1130.87,1212.11 1131.46,1212.11 1132.04,1212.11 1132.63,1212.11 1133.21,1212.11 1133.8,1212.11 1134.39,1212.11 1134.97,1212.11 1135.56,1212.11 1136.15,1212.11 1136.73,1212.11 1137.32,1212.11 1137.91,1212.11 1138.49,1212.11 1139.08,1212.11 1139.67,1212.11 1140.25,1212.11 1140.84,1212.11 1141.42,1212.11 1142.01,1212.11 1142.6,1212.11 1143.18,1212.11 1143.77,1212.11 1144.36,1212.11 1144.94,1212.11 1145.53,1212.11 1146.12,1212.11 1146.7,1212.11 1147.29,1212.11 1147.88,1212.11 1148.46,1212.11 1149.05,1212.11 1149.63,1212.11 1150.22,1212.11 1150.81,1212.11 1151.39,1212.11 1151.98,1212.11 1152.57,1212.11 1153.15,1212.11 1153.74,1212.11 1154.33,1212.11 1154.91,1212.11 1155.5,1212.11 1156.09,1212.11 1156.67,1212.11 1157.26,1212.11 1157.84,1212.11 1158.43,1212.11 1159.02,1212.11 1159.6,1212.11 1160.19,1212.11 1160.78,1212.11 1161.36,1212.11 1161.95,1212.11 1162.54,1212.11 1163.12,1212.11 1163.71,1212.11 1164.29,1212.11 1164.88,1212.11 1165.47,1212.11 1166.05,1212.11 1166.64,1212.11 1167.23,1212.11 1167.81,1212.11 1168.4,1212.11 1168.99,1212.11 1169.57,1212.11 1170.16,1212.11 1170.75,1212.11 1171.33,1212.11 1171.92,1212.11 1172.5,1212.11 1173.09,1212.11 1173.68,1212.11 1174.26,1212.11 1174.85,1212.11 1175.44,1212.11 1176.02,1212.11 1176.61,1212.11 1177.2,1212.11 1177.78,1212.11 1178.37,1212.11 1178.96,1212.11 1179.54,1212.11 1180.13,1212.11 1180.71,1212.11 1181.3,1212.11 1181.89,1212.11 1182.47,1212.11 1183.06,1212.11 1183.65,1212.11 1184.23,1212.11 1184.82,1212.11 1185.41,1212.11 1185.99,1212.11 1186.58,1212.11 1187.16,1212.11 1187.75,1212.11 1188.34,1212.11 1188.92,1212.11 1189.51,1212.11 1190.1,1212.11 1190.68,1212.11 1191.27,1212.11 1191.86,1212.11 1192.44,1212.11 1193.03,1212.11 1193.62,1212.11 1194.2,1212.11 1194.79,1212.11 1195.37,1212.11 1195.96,1212.11 1196.55,1212.11 1197.13,1212.11 1197.72,1212.11 1198.31,1212.11 1198.89,1212.11 1199.48,1212.11 1200.07,1212.11 1200.65,1212.11 1201.24,1212.11 1201.83,1212.11 1202.41,1212.11 1203,1212.11 1203.58,1212.11 1204.17,1212.11 1204.76,1212.11 1205.34,1212.11 1205.93,1212.11 1206.52,1212.11 1207.1,1212.11 1207.69,1212.11 1208.28,1212.11 1208.86,1212.11 1209.45,1212.11 1210.03,1212.11 1210.62,1212.11 1211.21,1212.11 1211.79,1212.11 1212.38,1212.11 1212.97,1212.11 1213.55,1212.11 1214.14,1212.11 1214.73,1212.11 1215.31,1212.11 1215.9,1212.11 1216.49,1212.11 1217.07,1212.11 1217.66,1212.11 1218.24,1212.11 1218.83,1212.11 1219.42,1212.11 1220,1212.11 1220.59,1212.11 1221.18,1212.11 1221.76,1212.11 1222.35,1212.11 1222.94,1212.11 1223.52,1212.11 1224.11,1212.11 1224.7,1212.11 1225.28,1212.11 1225.87,1212.11 1226.45,1212.11 1227.04,1212.11 1227.63,1212.11 1228.21,1212.11 1228.8,1212.11 1229.39,1212.11 1229.97,1212.11 1230.56,1212.11 1231.15,1212.11 1231.73,1212.11 1232.32,1212.11 1232.91,1212.11 1233.49,1212.11 1234.08,1212.11 1234.66,1212.11 1235.25,1212.11 1235.84,1212.11 1236.42,1212.11 1237.01,1212.11 1237.6,1212.11 1238.18,1212.11 1238.77,1212.11 1239.36,1212.11 1239.94,1212.11 1240.53,1212.11 1241.11,1212.11 1241.7,1212.11 1242.29,1212.11 1242.87,1212.11 1243.46,1212.11 1244.05,1212.11 1244.63,1212.11 1245.22,1212.11 1245.81,1212.11 1246.39,1212.11 1246.98,1212.11 1247.57,1212.11 1248.15,1212.11 1248.74,1212.11 1249.32,1212.11 1249.91,1212.11 1250.5,1212.11 1251.08,1212.11 1251.67,1212.11 1252.26,1212.11 1252.84,1212.11 1253.43,1212.11 1254.02,1212.11 1254.6,1212.11 1255.19,1212.11 1255.78,1212.11 1256.36,1212.11 1256.95,1212.11 1257.53,1212.11 1258.12,1212.11 1258.71,1212.11 1259.29,1212.11 1259.88,1212.11 1260.47,1212.11 1261.05,1212.11 1261.64,1212.11 1262.23,1212.11 1262.81,1212.11 1263.4,1212.11 1263.98,1212.11 1264.57,1212.11 1265.16,1212.11 1265.74,1212.11 1266.33,1212.11 1266.92,1212.11 1267.5,1212.11 1268.09,1212.11 1268.68,1212.11 1269.26,1212.11 1269.85,1212.11 1270.44,1212.11 1271.02,1212.11 1271.61,1212.11 1272.19,1212.11 1272.78,1212.11 1273.37,1212.11 1273.95,1212.11 1274.54,1212.11 1275.13,1212.11 1275.71,1212.11 1276.3,1212.11 1276.89,1212.11 1277.47,1212.11 1278.06,1212.11 1278.65,1212.11 1279.23,1212.11 1279.82,1212.11 1280.4,1212.11 1280.99,1212.11 1281.58,1212.11 1282.16,1212.11 1282.75,1212.11 1283.34,1212.11 1283.92,1212.11 1284.51,1212.11 1285.1,1212.11 1285.68,1212.11 1286.27,1212.11 1286.86,1212.11 1287.44,1212.11 1288.03,1212.11 1288.61,1212.11 1289.2,1212.11 1289.79,1212.11 1290.37,1212.11 1290.96,1212.11 1291.55,1212.11 1292.13,1212.11 1292.72,1212.11 1293.31,1212.11 1293.89,1212.11 1294.48,1212.11 1295.06,1212.11 1295.65,1212.11 1296.24,1212.11 1296.82,1212.11 1297.41,1212.11 1298,1212.11 1298.58,1212.11 1299.17,1212.11 1299.76,1212.11 1300.34,1212.11 1300.93,1212.11 1301.52,1212.11 1302.1,1212.11 1302.69,1212.11 1303.27,1212.11 1303.86,1212.11 1304.45,1212.11 1305.03,1212.11 1305.62,1212.11 1306.21,1212.11 1306.79,1212.11 1307.38,1212.11 1307.97,1212.11 1308.55,1212.11 1309.14,1212.11 1309.73,1212.11 1310.31,1212.11 1310.9,1212.11 1311.48,1212.11 1312.07,1212.11 1312.66,1212.11 1313.24,1212.11 1313.83,1212.11 1314.42,1212.11 1315,1212.11 1315.59,1212.11 1316.18,1212.11 1316.76,1212.11 1317.35,1212.11 1317.93,1212.11 1318.52,1212.11 1319.11,1212.11 1319.69,1212.11 1320.28,1212.11 1320.87,1212.11 1321.45,1212.11 1322.04,1212.11 1322.63,1212.11 1323.21,1212.11 1323.8,1212.11 1324.39,1212.11 1324.97,1212.11 1325.56,1212.11 1326.14,1212.11 1326.73,1212.11 1327.32,1212.11 1327.9,1212.11 1328.49,1212.11 1329.08,1212.11 1329.66,1212.11 1330.25,1212.11 1330.84,1212.11 1331.42,1212.11 1332.01,1212.11 1332.6,1212.11 1333.18,1212.11 1333.77,1212.11 1334.35,1212.11 1334.94,1212.11 1335.53,1212.11 1336.11,1212.11 1336.7,1212.11 1337.29,1212.11 1337.87,1212.11 1338.46,1212.11 1339.05,1212.11 1339.63,1212.11 1340.22,1212.11 1340.8,1212.11 1341.39,1212.11 1341.98,1212.11 1342.56,1212.11 1343.15,1212.11 1343.74,1212.11 1344.32,1212.11 1344.91,1212.11 1345.5,1212.11 1346.08,1212.11 1346.67,1212.11 1347.26,1212.11 1347.84,1212.11 1348.43,1212.11 1349.01,1212.11 1349.6,1212.11 1350.19,1212.11 1350.77,1212.11 1351.36,1212.11 1351.95,1212.11 1352.53,1212.11 1353.12,1212.11 1353.71,1212.11 1354.29,1212.11 1354.88,1212.11 1355.47,1212.11 1356.05,1212.11 1356.64,1212.11 1357.22,1212.11 1357.81,1212.11 1358.4,1212.11 1358.98,1212.11 1359.57,1212.11 1360.16,1212.11 1360.74,1212.11 1361.33,1212.11 1361.92,1212.11 1362.5,1212.11 1363.09,1212.11 1363.68,1212.11 1364.26,1212.11 1364.85,1212.11 1365.43,1212.11 1366.02,1212.11 1366.61,1212.11 1367.19,1212.11 1367.78,1212.11 1368.37,1212.11 1368.95,1212.11 1369.54,1212.11 1370.13,1212.11 1370.71,1212.11 1371.3,1212.11 1371.88,1212.11 1372.47,1212.11 1373.06,1212.11 1373.64,1212.11 1374.23,1212.11 1374.82,1212.11 1375.4,1212.11 1375.99,1212.11 1376.58,1212.11 1377.16,1212.11 1377.75,1212.11 1378.34,1212.11 1378.92,1212.11 1379.51,1212.11 1380.09,1212.11 1380.68,1212.11 1381.27,1212.11 1381.85,1212.11 1382.44,1212.11 1383.03,1212.11 1383.61,1212.11 1384.2,1212.11 1384.79,1212.11 1385.37,1212.11 1385.96,1212.11 1386.55,1212.11 1387.13,1212.11 1387.72,1212.11 1388.3,1212.11 1388.89,1212.11 1389.48,1212.11 1390.06,1212.11 1390.65,1212.11 1391.24,1212.11 1391.82,1212.11 1392.41,1212.11 1393,1212.11 1393.58,1212.11 1394.17,1212.11 1394.75,1212.11 1395.34,1212.11 1395.93,1212.11 1396.51,1212.11 1397.1,1212.11 1397.69,1212.11 1398.27,1212.11 1398.86,1212.11 1399.45,1212.11 1400.03,1212.11 1400.62,1212.11 1401.21,1212.11 1401.79,1212.11 1402.38,1212.11 1402.96,1212.11 1403.55,1212.11 1404.14,1212.11 1404.72,1212.11 1405.31,1212.11 1405.9,1212.11 1406.48,1212.11 1407.07,1212.11 1407.66,1212.11 1408.24,1212.11 1408.83,1212.11 1409.42,1212.11 1410,1212.11 1410.59,1212.11 1411.17,1212.11 1411.76,1212.11 1412.35,1212.11 1412.93,1212.11 1413.52,1212.11 1414.11,1212.11 1414.69,1212.11 1415.28,1212.11 1415.87,1212.11 1416.45,1212.11 1417.04,1212.11 1417.63,1212.11 1418.21,1212.11 1418.8,1212.11 1419.38,1212.11 1419.97,1212.11 1420.56,1212.11 1421.14,1212.11 1421.73,1212.11 1422.32,1212.11 1422.9,1212.11 1423.49,1212.11 1424.08,1212.11 1424.66,1212.11 1425.25,1212.11 1425.83,1212.11 1426.42,1212.11 1427.01,1212.11 1427.59,1212.11 1428.18,1212.11 1428.77,1212.11 1429.35,1212.11 1429.94,1212.11 1430.53,1212.11 1431.11,1212.11 1431.7,1212.11 1432.29,1212.11 1432.87,1212.11 1433.46,1212.11 1434.04,1212.11 1434.63,1212.11 1435.22,1212.11 1435.8,1212.11 1436.39,1212.11 1436.98,1212.11 1437.56,1212.11 1438.15,1212.11 1438.74,1212.11 1439.32,1212.11 1439.91,1212.11 1440.5,1212.11 1441.08,1212.11 1441.67,1212.11 1442.25,1212.11 1442.84,1212.11 1443.43,1212.11 1444.01,1212.11 1444.6,1212.11 1445.19,1212.11 1445.77,1212.11 1446.36,1212.11 1446.95,1212.11 1447.53,1212.11 1448.12,1212.11 1448.7,1212.11 1449.29,1212.11 1449.88,1212.11 1450.46,1212.11 1451.05,1212.11 1451.64,1212.11 1452.22,1212.11 1452.81,1212.11 1453.4,1212.11 1453.98,1212.11 1454.57,1212.11 1455.16,1212.11 1455.74,1212.11 1456.33,1212.11 1456.91,1212.11 1457.5,1212.11 1458.09,1212.11 1458.67,1212.11 1459.26,1212.11 1459.85,1212.11 1460.43,1212.11 1461.02,1212.11 1461.61,1212.11 1462.19,1212.11 1462.78,1212.11 1463.37,1212.11 1463.95,1212.11 1464.54,1212.11 1465.12,1212.11 1465.71,1212.11 1466.3,1212.11 1466.88,1212.11 1467.47,1212.11 1468.06,1212.11 1468.64,1212.11 1469.23,1212.11 1469.82,1212.11 1470.4,1212.11 1470.99,1212.11 1471.57,1212.11 1472.16,1212.11 1472.75,1212.11 1473.33,1212.11 1473.92,1212.11 1474.51,1212.11 1475.09,1212.11 1475.68,1212.11 1476.27,1212.11 1476.85,1212.11 1477.44,1212.11 1478.03,1212.11 1478.61,1212.11 1479.2,1212.11 1479.78,1212.11 1480.37,1212.11 1480.96,1212.11 1481.54,1212.11 1482.13,1212.11 1482.72,1212.11 1483.3,1212.11 1483.89,1212.11 1484.48,1212.11 1485.06,1212.11 1485.65,1212.11 1486.24,1212.11 1486.82,1212.11 1487.41,1212.11 1487.99,1212.11 1488.58,1212.11 1489.17,1212.11 1489.75,1212.11 1490.34,1212.11 1490.93,1212.11 1491.51,1212.11 1492.1,1212.11 1492.69,1212.11 1493.27,1212.11 1493.86,1212.11 1494.45,1212.11 1495.03,1212.11 1495.62,1212.11 1496.2,1212.11 1496.79,1212.11 1497.38,1212.11 1497.96,1212.11 1498.55,1212.11 1499.14,1212.11 1499.72,1212.11 1500.31,1212.11 1500.9,1212.11 1501.48,1212.11 1502.07,1212.11 1502.65,1212.11 1503.24,1212.11 1503.83,1212.11 1504.41,1212.11 1505,1212.11 1505.59,1212.11 1506.17,1212.11 1506.76,1212.11 1507.35,1212.11 1507.93,1212.11 1508.52,1212.11 1509.11,1212.11 1509.69,1212.11 1510.28,1212.11 1510.86,1212.11 1511.45,1212.11 1512.04,1212.11 1512.62,1212.11 1513.21,1212.11 1513.8,1212.11 1514.38,1212.11 1514.97,1212.11 1515.56,1212.11 1516.14,1212.11 1516.73,1212.11 1517.32,1212.11 1517.9,1212.11 1518.49,1212.11 1519.07,1212.11 1519.66,1212.11 1520.25,1212.11 1520.83,1212.11 1521.42,1212.11 1522.01,1212.11 1522.59,1212.11 1523.18,1212.11 1523.77,1212.11 1524.35,1212.11 1524.94,1212.11 1525.52,1212.11 1526.11,1212.11 1526.7,1212.11 1527.28,1212.11 1527.87,1212.11 1528.46,1212.11 1529.04,1212.11 1529.63,1212.11 1530.22,1212.11 1530.8,1212.11 1531.39,1212.11 1531.98,1212.11 1532.56,1212.11 1533.15,1212.11 1533.73,1212.11 1534.32,1212.11 1534.91,1212.11 1535.49,1212.11 1536.08,1212.11 1536.67,1212.11 1537.25,1212.11 1537.84,1212.11 1538.43,1212.11 1539.01,1212.11 1539.6,1212.11 1540.19,1212.11 1540.77,1212.11 1541.36,1212.11 1541.94,1212.11 1542.53,1212.11 1543.12,1212.11 1543.7,1212.11 1544.29,1212.11 1544.88,1212.11 1545.46,1212.11 1546.05,1212.11 1546.64,1212.11 1547.22,1212.11 1547.81,1212.11 1548.4,1212.11 1548.98,1212.11 1549.57,1212.11 1550.15,1212.11 1550.74,1212.11 1551.33,1212.11 1551.91,1212.11 1552.5,1212.11 1553.09,1212.11 1553.67,1212.11 1554.26,1212.11 1554.85,1212.11 1555.43,1212.11 1556.02,1212.11 1556.6,1212.11 1557.19,1212.11 1557.78,1212.11 1558.36,1212.11 1558.95,1212.11 1559.54,1212.11 1560.12,1212.11 1560.71,1212.11 1561.3,1212.11 1561.88,1212.11 1562.47,1212.11 1563.06,1212.11 1563.64,1212.11 1564.23,1212.11 1564.81,1212.11 1565.4,1212.11 1565.99,1212.11 1566.57,1212.11 1567.16,1212.11 1567.75,1212.11 1568.33,1212.11 1568.92,1212.11 1569.51,1212.11 1570.09,1212.11 1570.68,1212.11 1571.27,1212.11 1571.85,1212.11 1572.44,1212.11 1573.02,1212.11 1573.61,1212.11 1574.2,1212.11 1574.78,1212.11 1575.37,1212.11 1575.96,1212.11 1576.54,1212.11 1577.13,1212.11 1577.72,1212.11 1578.3,1212.11 1578.89,1212.11 1579.47,1212.11 1580.06,1212.11 1580.65,1212.11 1581.23,1212.11 1581.82,1212.11 1582.41,1212.11 1582.99,1212.11 1583.58,1212.11 1584.17,1212.11 1584.75,1212.11 1585.34,1212.11 1585.93,1212.11 1586.51,1212.11 1587.1,1212.11 1587.68,1212.11 1588.27,1212.11 1588.86,1212.11 1589.44,1212.11 1590.03,1212.11 1590.62,1212.11 1591.2,1212.11 1591.79,1212.11 1592.38,1212.11 1592.96,1212.11 1593.55,1212.11 1594.14,1212.11 1594.72,1212.11 1595.31,1212.11 1595.89,1212.11 1596.48,1212.11 1597.07,1212.11 1597.65,1212.11 1598.24,1212.11 1598.83,1212.11 1599.41,1212.11 1600,1212.11 1600.59,1212.11 1601.17,1212.11 1601.76,1212.11 1602.34,1212.11 1602.93,1212.11 1603.52,1212.11 1604.1,1212.11 1604.69,1212.11 1605.28,1212.11 1605.86,1212.11 1606.45,1212.11 1607.04,1212.11 1607.62,1212.11 1608.21,1212.11 1608.8,1212.11 1609.38,1212.11 1609.97,1212.11 1610.55,1212.11 1611.14,1212.11 1611.73,1212.11 1612.31,1212.11 1612.9,1212.11 1613.49,1212.11 1614.07,1212.11 1614.66,1212.11 1615.25,1212.11 1615.83,1212.11 1616.42,1212.11 1617.01,1212.11 1617.59,1212.11 1618.18,1212.11 1618.76,1212.11 1619.35,1212.11 1619.94,1212.11 1620.52,1212.11 1621.11,1212.11 1621.7,1212.11 1622.28,1212.11 1622.87,1212.11 1623.46,1212.11 1624.04,1212.11 1624.63,1212.11 1625.22,1212.11 1625.8,1212.11 1626.39,1212.11 1626.97,1212.11 1627.56,1212.11 1628.15,1212.11 1628.73,1212.11 1629.32,1212.11 1629.91,1212.11 1630.49,1212.11 1631.08,1212.11 1631.67,1212.11 1632.25,1212.11 1632.84,1212.11 1633.42,1212.11 1634.01,1212.11 1634.6,1212.11 1635.18,1212.11 1635.77,1212.11 1636.36,1212.11 1636.94,1212.11 1637.53,1212.11 1638.12,1212.11 1638.7,1212.11 1639.29,1212.11 1639.88,1212.11 1640.46,1212.11 1641.05,1212.11 1641.63,1212.11 1642.22,1212.11 1642.81,1212.11 1643.39,1212.11 1643.98,1212.11 1644.57,1212.11 1645.15,1212.11 1645.74,1212.11 1646.33,1212.11 1646.91,1212.11 1647.5,1212.11 1648.09,1212.11 1648.67,1212.11 1649.26,1212.11 1649.84,1212.11 1650.43,1212.11 1651.02,1212.11 1651.6,1212.11 1652.19,1212.11 1652.78,1212.11 1653.36,1212.11 1653.95,1212.11 1654.54,1212.11 1655.12,1212.11 1655.71,1212.11 1656.29,1212.11 1656.88,1212.11 1657.47,1212.11 1658.05,1212.11 1658.64,1212.11 1659.23,1212.11 1659.81,1212.11 1660.4,1212.11 1660.99,1212.11 1661.57,1212.11 1662.16,1212.11 1662.75,1212.11 1663.33,1212.11 1663.92,1212.11 1664.5,1212.11 1665.09,1212.11 1665.68,1212.11 1666.26,1212.11 1666.85,1212.11 1667.44,1212.11 1668.02,1212.11 1668.61,1212.11 1669.2,1212.11 1669.78,1212.11 1670.37,1212.11 1670.96,1212.11 1671.54,1212.11 1672.13,1212.11 1672.71,1212.11 1673.3,1212.11 1673.89,1212.11 1674.47,1212.11 1675.06,1212.11 1675.65,1212.11 1676.23,1212.11 1676.82,1212.11 1677.41,1212.11 1677.99,1212.11 1678.58,1212.11 1679.17,1212.11 1679.75,1212.11 1680.34,1212.11 1680.92,1212.11 1681.51,1212.11 1682.1,1212.11 1682.68,1212.11 1683.27,1212.11 1683.86,1212.11 1684.44,1212.11 1685.03,1212.11 1685.62,1212.11 1686.2,1212.11 1686.79,1212.11 1687.37,1212.11 1687.96,1212.11 1688.55,1212.11 1689.13,1212.11 1689.72,1212.11 1690.31,1212.11 1690.89,1212.11 1691.48,1212.11 1692.07,1212.11 1692.65,1212.11 1693.24,1212.11 1693.83,1212.11 1694.41,1212.11 1695,1212.11 1695.58,1212.11 1696.17,1212.11 1696.76,1212.11 1697.34,1212.11 1697.93,1212.11 1698.52,1212.11 1699.1,1212.11 1699.69,1212.11 1700.28,1212.11 1700.86,1212.11 1701.45,1212.11 1702.04,1212.11 1702.62,1212.11 1703.21,1212.11 1703.79,1212.11 1704.38,1212.11 1704.97,1212.11 1705.55,1212.11 1706.14,1212.11 1706.73,1212.11 1707.31,1212.11 1707.9,1212.11 1708.49,1212.11 1709.07,1212.11 1709.66,1212.11 1710.24,1212.11 1710.83,1212.11 1711.42,1212.11 1712,1212.11 1712.59,1212.11 1713.18,1212.11 1713.76,1212.11 1714.35,1212.11 1714.94,1212.11 1715.52,1212.11 1716.11,1212.11 1716.7,1212.11 1717.28,1212.11 1717.87,1212.11 1718.45,1212.11 1719.04,1212.11 1719.63,1212.11 1720.21,1212.11 1720.8,1212.11 1721.39,1212.11 1721.97,1212.11 1722.56,1212.11 1723.15,1212.11 1723.73,1212.11 1724.32,1212.11 1724.91,1212.11 1725.49,1212.11 1726.08,1212.11 1726.66,1212.11 1727.25,1212.11 1727.84,1212.11 1728.42,1212.11 1729.01,1212.11 1729.6,1212.11 1730.18,1212.11 1730.77,1212.11 1731.36,1212.11 1731.94,1212.11 1732.53,1212.11 1733.11,1212.11 1733.7,1212.11 1734.29,1212.11 1734.87,1212.11 1735.46,1212.11 1736.05,1212.11 1736.63,1212.11 1737.22,1212.11 1737.81,1212.11 1738.39,1212.11 1738.98,1212.11 1739.57,1212.11 1740.15,1212.11 1740.74,1212.11 1741.32,1212.11 1741.91,1212.11 1742.5,1212.11 1743.08,1212.11 1743.67,1212.11 1744.26,1212.11 1744.84,1212.11 1745.43,1212.11 1746.02,1212.11 1746.6,1212.11 1747.19,1212.11 1747.78,1212.11 1748.36,1212.11 1748.95,1212.11 1749.53,1212.11 1750.12,1212.11 1750.71,1212.11 1751.29,1212.11 1751.88,1212.11 1752.47,1212.11 1753.05,1212.11 1753.64,1212.11 1754.23,1212.11 1754.81,1212.11 1755.4,1212.11 1755.99,1212.11 1756.57,1212.11 1757.16,1212.11 1757.74,1212.11 1758.33,1212.11 1758.92,1212.11 1759.5,1212.11 1760.09,1212.11 1760.68,1212.11 1761.26,1212.11 1761.85,1212.11 1762.44,1212.11 1763.02,1212.11 1763.61,1212.11 1764.19,1212.11 1764.78,1212.11 1765.37,1212.11 1765.95,1212.11 1766.54,1212.11 1767.13,1212.11 1767.71,1212.11 1768.3,1212.11 1768.89,1212.11 1769.47,1212.11 1770.06,1212.11 1770.65,1212.11 1771.23,1212.11 1771.82,1212.11 1772.4,1212.11 1772.99,1212.11 1773.58,1212.11 1774.16,1212.11 1774.75,1212.11 1775.34,1212.11 1775.92,1212.11 1776.51,1212.11 1777.1,1212.11 1777.68,1212.11 1778.27,1212.11 1778.86,1212.11 1779.44,1212.11 1780.03,1212.11 1780.61,1212.11 1781.2,1212.11 1781.79,1212.11 1782.37,1212.11 1782.96,1212.11 1783.55,1212.11 1784.13,1212.11 1784.72,1212.11 1785.31,1212.11 1785.89,1212.11 1786.48,1212.11 1787.06,1212.11 1787.65,1212.11 1788.24,1212.11 1788.82,1212.11 1789.41,1212.11 1790,1212.11 1790.58,1212.11 1791.17,1212.11 1791.76,1212.11 1792.34,1212.11 1792.93,1212.11 1793.52,1212.11 1794.1,1212.11 1794.69,1212.11 1795.27,1212.11 1795.86,1212.11 1796.45,1212.11 1797.03,1212.11 1797.62,1212.11 1798.21,1212.11 1798.79,1212.11 1799.38,1212.11 1799.97,1212.11 1800.55,1212.11 1801.14,1212.11 1801.73,1212.11 1802.31,1212.11 1802.9,1212.11 1803.48,1212.11 1804.07,1212.11 1804.66,1212.11 1805.24,1212.11 1805.83,1212.11 1806.42,1212.11 1807,1212.11 1807.59,1212.11 1808.18,1212.11 1808.76,1212.11 1809.35,1212.11 1809.94,1212.11 1810.52,1212.11 1811.11,1212.11 1811.69,1212.11 1812.28,1212.11 1812.87,1212.11 1813.45,1212.11 1814.04,1212.11 1814.63,1212.11 1815.21,1212.11 1815.8,1212.11 1816.39,1212.11 1816.97,1212.11 1817.56,1212.11 1818.14,1212.11 1818.73,1212.11 1819.32,1212.11 1819.9,1212.11 1820.49,1212.11 1821.08,1212.11 1821.66,1212.11 1822.25,1212.11 1822.84,1212.11 1823.42,1212.11 1824.01,1212.11 1824.6,1212.11 1825.18,1212.11 1825.77,1212.11 1826.35,1212.11 1826.94,1212.11 1827.53,1212.11 1828.11,1212.11 1828.7,1212.11 1829.29,1212.11 1829.87,1212.11 1830.46,1212.11 1831.05,1212.11 1831.63,1212.11 1832.22,1212.11 1832.81,1212.11 1833.39,1212.11 1833.98,1212.11 1834.56,1212.11 1835.15,1212.11 1835.74,1212.11 1836.32,1212.11 1836.91,1212.11 1837.5,1212.11 1838.08,1212.11 1838.67,1212.11 1839.26,1212.11 1839.84,1212.11 1840.43,1212.11 1841.01,1212.11 1841.6,1212.11 1842.19,1212.11 1842.77,1212.11 1843.36,1212.11 1843.95,1212.11 1844.53,1212.11 1845.12,1212.11 1845.71,1212.11 1846.29,1212.11 1846.88,1212.11 1847.47,1212.11 1848.05,1212.11 1848.64,1212.11 1849.22,1212.11 1849.81,1212.11 1850.4,1212.11 1850.98,1212.11 1851.57,1212.11 1852.16,1212.11 1852.74,1212.11 1853.33,1212.11 1853.92,1212.11 1854.5,1212.11 1855.09,1212.11 1855.68,1212.11 1856.26,1212.11 1856.85,1212.11 1857.43,1212.11 1858.02,1212.11 1858.61,1212.11 1859.19,1212.11 1859.78,1212.11 1860.37,1212.11 1860.95,1212.11 1861.54,1212.11 1862.13,1212.11 1862.71,1212.11 1863.3,1212.11 1863.88,1212.11 1864.47,1212.11 1865.06,1212.11 1865.64,1212.11 1866.23,1212.11 1866.82,1212.11 1867.4,1212.11 1867.99,1212.11 1868.58,1212.11 1869.16,1212.11 1869.75,1212.11 1870.34,1212.11 1870.92,1212.11 1871.51,1212.11 1872.09,1212.11 1872.68,1212.11 1873.27,1212.11 1873.85,1212.11 1874.44,1212.11 1875.03,1212.11 1875.61,1212.11 1876.2,1212.11 1876.79,1212.11 1877.37,1212.11 1877.96,1212.11 1878.55,1212.11 1879.13,1212.11 1879.72,1212.11 1880.3,1212.11 1880.89,1212.11 1881.48,1212.11 1882.06,1212.11 1882.65,1212.11 1883.24,1212.11 1883.82,1212.11 1884.41,1212.11 1885,1212.11 1885.58,1212.11 1886.17,1212.11 1886.76,1212.11 1887.34,1212.11 1887.93,1212.11 1888.51,1212.11 1889.1,1212.11 1889.69,1212.11 1890.27,1212.11 1890.86,1212.11 1891.45,1212.11 1892.03,1212.11 1892.62,1212.11 1893.21,1212.11 1893.79,1212.11 1894.38,1212.11 1894.96,1212.11 1895.55,1212.11 1896.14,1212.11 1896.72,1212.11 1897.31,1212.11 1897.9,1212.11 1898.48,1212.11 1899.07,1212.11 1899.66,1212.11 1900.24,1212.11 1900.83,1212.11 1901.42,1212.11 1902,1212.11 1902.59,1212.11 1903.17,1212.11 1903.76,1212.11 1904.35,1212.11 1904.93,1212.11 1905.52,1212.11 1906.11,1212.11 1906.69,1212.11 1907.28,1212.11 1907.87,1212.11 1908.45,1212.11 1909.04,1212.11 1909.63,1212.11 1910.21,1212.11 1910.8,1212.11 1911.38,1212.11 1911.97,1212.11 1912.56,1212.11 1913.14,1212.11 1913.73,1212.11 1914.32,1212.11 1914.9,1212.11 1915.49,1212.11 1916.08,1212.11 1916.66,1212.11 1917.25,1212.11 1917.83,1212.11 1918.42,1212.11 1919.01,1212.11 1919.59,1212.11 1920.18,1212.11 1920.77,1212.11 1921.35,1212.11 1921.94,1212.11 1922.53,1212.11 1923.11,1212.11 1923.7,1212.11 1924.29,1212.11 1924.87,1212.11 1925.46,1212.11 1926.04,1212.11 1926.63,1212.11 1927.22,1212.11 1927.8,1212.11 1928.39,1212.11 1928.98,1212.11 1929.56,1212.11 1930.15,1212.11 1930.74,1212.11 1931.32,1212.11 1931.91,1212.11 1932.5,1212.11 1933.08,1212.11 1933.67,1212.11 1934.25,1212.11 1934.84,1212.11 1935.43,1212.11 1936.01,1212.11 1936.6,1212.11 1937.19,1212.11 1937.77,1212.11 1938.36,1212.11 1938.95,1212.11 1939.53,1212.11 1940.12,1212.11 1940.71,1212.11 1941.29,1212.11 1941.88,1212.11 1942.46,1212.11 1943.05,1212.11 1943.64,1212.11 1944.22,1212.11 1944.81,1212.11 1945.4,1212.11 1945.98,1212.11 1946.57,1212.11 1947.16,1212.11 1947.74,1212.11 1948.33,1212.11 1948.91,1212.11 1949.5,1212.11 1950.09,1212.11 1950.67,1212.11 1951.26,1212.11 1951.85,1212.11 1952.43,1212.11 1953.02,1212.11 1953.61,1212.11 1954.19,1212.11 1954.78,1212.11 1955.37,1212.11 1955.95,1212.11 1956.54,1212.11 1957.12,1212.11 1957.71,1212.11 1958.3,1212.11 1958.88,1212.11 1959.47,1212.11 1960.06,1212.11 1960.64,1212.11 1961.23,1212.11 1961.82,1212.11 1962.4,1212.11 1962.99,1212.11 1963.58,1212.11 1964.16,1212.11 1964.75,1212.11 1965.33,1212.11 1965.92,1212.11 1966.51,1212.11 1967.09,1212.11 1967.68,1212.11 1968.27,1212.11 1968.85,1212.11 1969.44,1212.11 1970.03,1212.11 1970.61,1212.11 1971.2,1212.11 1971.78,1212.11 1972.37,1212.11 1972.96,1212.11 1973.54,1212.11 1974.13,1212.11 1974.72,1212.11 1975.3,1212.11 1975.89,1212.11 1976.48,1212.11 1977.06,1212.11 1977.65,1212.11 1978.24,1212.11 1978.82,1212.11 1979.41,1212.11 1979.99,1212.11 1980.58,1212.11 1981.17,1212.11 1981.75,1212.11 1982.34,1212.11 1982.93,1212.11 1983.51,1212.11 1984.1,1212.11 1984.69,1212.11 1985.27,1212.11 1985.86,1212.11 1986.45,1212.11 1987.03,1212.11 1987.62,1212.11 1988.2,1212.11 1988.79,1212.11 1989.38,1212.11 1989.96,1212.11 1990.55,1212.11 1991.14,1212.11 1991.72,1212.11 1992.31,1212.11 1992.9,1212.11 1993.48,1212.11 1994.07,1212.11 1994.65,1212.11 1995.24,1212.11 1995.83,1212.11 1996.41,1212.11 1997,1212.11 1997.59,1212.11 1998.17,1212.11 1998.76,1212.11 1999.35,1212.11 1999.93,1212.11 2000.52,1212.11 2001.11,1212.11 2001.69,1212.11 2002.28,1212.11 2002.86,1212.11 2003.45,1212.11 2004.04,1212.11 2004.62,1212.11 2005.21,1212.11 2005.8,1212.11 2006.38,1212.11 2006.97,1212.11 2007.56,1212.11 2008.14,1212.11 2008.73,1212.11 2009.32,1212.11 2009.9,1212.11 2010.49,1212.11 2011.07,1212.11 2011.66,1212.11 2012.25,1212.11 2012.83,1212.11 2013.42,1212.11 2014.01,1212.11 2014.59,1212.11 2015.18,1212.11 2015.77,1212.11 2016.35,1212.11 2016.94,1212.11 2017.53,1212.11 2018.11,1212.11 2018.7,1212.11 2019.28,1212.11 2019.87,1212.11 2020.46,1212.11 2021.04,1212.11 2021.63,1212.11 2022.22,1212.11 2022.8,1212.11 2023.39,1212.11 2023.98,1212.11 2024.56,1212.11 2025.15,1212.11 2025.73,1212.11 2026.32,1212.11 2026.91,1212.11 2027.49,1212.11 2028.08,1212.11 2028.67,1212.11 2029.25,1212.11 2029.84,1212.11 2030.43,1212.11 2031.01,1212.11 2031.6,1212.11 2032.19,1212.11 2032.77,1212.11 2033.36,1212.11 2033.94,1212.11 2034.53,1212.11 2035.12,1212.11 2035.7,1212.11 2036.29,1212.11 2036.88,1212.11 2037.46,1212.11 2038.05,1212.11 2038.64,1212.11 2039.22,1212.11 2039.81,1212.11 2040.4,1212.11 2040.98,1212.11 2041.57,1212.11 2042.15,1212.11 2042.74,1212.11 2043.33,1212.11 2043.91,1212.11 2044.5,1212.11 2045.09,1212.11 2045.67,1212.11 2046.26,1212.11 2046.85,1212.11 2047.43,1212.11 2048.02,1212.11 2048.6,1212.11 2049.19,1212.11 2049.78,1212.11 2050.36,1212.11 2050.95,1212.11 2051.54,1212.11 2052.12,1212.11 2052.71,1212.11 2053.3,1212.11 2053.88,1212.11 2054.47,1212.11 2055.06,1212.11 2055.64,1212.11 2056.23,1212.11 2056.81,1212.11 2057.4,1212.11 2057.99,1212.11 2058.57,1212.11 2059.16,1212.11 2059.75,1212.11 2060.33,1212.11 2060.92,1212.11 2061.51,1212.11 2062.09,1212.11 2062.68,1212.11 2063.27,1212.11 2063.85,1212.11 2064.44,1212.11 2065.02,1212.11 2065.61,1212.11 2066.2,1212.11 2066.78,1212.11 2067.37,1212.11 2067.96,1212.11 2068.54,1212.11 2069.13,1212.11 2069.72,1212.11 2070.3,1212.11 2070.89,1212.11 2071.48,1212.11 2072.06,1212.11 2072.65,1212.11 2073.23,1212.11 2073.82,1212.11 2074.41,1212.11 2074.99,1212.11 2075.58,1212.11 2076.17,1212.11 2076.75,1212.11 2077.34,1212.11 2077.93,1212.11 2078.51,1212.11 2079.1,1212.11 2079.68,1212.11 2080.27,1212.11 2080.86,1212.11 2081.44,1212.11 2082.03,1212.11 2082.62,1212.11 2083.2,1212.11 2083.79,1212.11 2084.38,1212.11 2084.96,1212.11 2085.55,1212.11 2086.14,1212.11 2086.72,1212.11 2087.31,1212.11 2087.89,1212.11 2088.48,1212.11 2089.07,1212.11 2089.65,1212.11 2090.24,1212.11 2090.83,1212.11 2091.41,1212.11 2092,1212.11 2092.59,1212.11 2093.17,1212.11 2093.76,1212.11 2094.35,1212.11 2094.93,1212.11 2095.52,1212.11 2096.1,1212.11 2096.69,1212.11 2097.28,1212.11 2097.86,1212.11 2098.45,1212.11 2099.04,1212.11 2099.62,1212.11 2100.21,1212.11 2100.8,1212.11 2101.38,1212.11 2101.97,1212.11 2102.55,1212.11 2103.14,1212.11 2103.73,1212.11 2104.31,1212.11 2104.9,1212.11 2105.49,1212.11 2106.07,1212.11 2106.66,1212.11 2107.25,1212.11 2107.83,1212.11 2108.42,1212.11 2109.01,1212.11 2109.59,1212.11 2110.18,1212.11 2110.76,1212.11 2111.35,1212.11 2111.94,1212.11 2112.52,1212.11 2113.11,1212.11 2113.7,1212.11 2114.28,1212.11 2114.87,1212.11 2115.46,1212.11 2116.04,1212.11 2116.63,1212.11 2117.22,1212.11 2117.8,1212.11 2118.39,1212.11 2118.97,1212.11 2119.56,1212.11 2120.15,1212.11 2120.73,1212.11 2121.32,1212.11 2121.91,1212.11 2122.49,1212.11 2123.08,1212.11 2123.67,1212.11 2124.25,1212.11 2124.84,1212.11 2125.42,1212.11 2126.01,1212.11 2126.6,1212.11 2127.18,1212.11 2127.77,1212.11 2128.36,1212.11 2128.94,1212.11 2129.53,1212.11 2130.12,1212.11 2130.7,1212.11 2131.29,1212.11 2131.88,1212.11 2132.46,1212.11 2133.05,1212.11 2133.63,1212.11 2134.22,1212.11 2134.81,1212.11 2135.39,1212.11 2135.98,1212.11 2136.57,1212.11 2137.15,1212.11 2137.74,1212.11 2138.33,1212.11 2138.91,1212.11 2139.5,1212.11 2140.09,1212.11 2140.67,1212.11 2141.26,1212.11 2141.84,1212.11 2142.43,1212.11 2143.02,1212.11 2143.6,1212.11 2144.19,1212.11 2144.78,1212.11 2145.36,1212.11 2145.95,1212.11 2146.54,1212.11 2147.12,1212.11 2147.71,1212.11 2148.3,1212.11 2148.88,1212.11 2149.47,1212.11 2150.05,1212.11 2150.64,1212.11 2151.23,1212.11 2151.81,1212.11 2152.4,1212.11 2152.99,1212.11 2153.57,1212.11 2154.16,1212.11 2154.75,1212.11 2155.33,1212.11 2155.92,1212.11 2156.5,1212.11 2157.09,1212.11 2157.68,1212.11 2158.26,1212.11 \"/>\n<path clip-path=\"url(#clip282)\" d=\"M986.025 1211.94 L986.612 1211.94 L987.198 1211.94 L987.785 1211.94 L988.371 1211.94 L988.957 1211.94 L989.544 1211.94 L990.13 1211.94 L990.717 1211.94 L991.303 1211.94 L991.889 1211.94 L992.476 1211.94 L993.062 1211.94 L993.649 1211.94 L994.235 1211.94 L994.822 1211.94 L995.408 1211.94 L995.994 1211.94 L996.581 1211.94 L997.167 1211.94 L997.754 1211.94 L998.34 1211.94 L998.926 1211.94 L999.513 1211.94 L1000.1 1211.94 L1000.69 1211.94 L1001.27 1211.94 L1001.86 1211.94 L1002.44 1211.94 L1003.03 1211.94 L1003.62 1211.94 L1004.2 1211.94 L1004.79 1211.94 L1005.38 1211.94 L1005.96 1211.94 L1006.55 1211.94 L1007.14 1211.94 L1007.72 1211.94 L1008.31 1211.94 L1008.9 1211.94 L1009.48 1211.94 L1010.07 1211.94 L1010.65 1211.94 L1011.24 1211.94 L1011.83 1211.94 L1012.41 1211.94 L1013 1211.94 L1013.59 1211.94 L1014.17 1211.94 L1014.76 1211.94 L1015.35 1211.94 L1015.93 1211.94 L1016.52 1211.94 L1017.11 1211.94 L1017.69 1211.94 L1018.28 1211.94 L1018.86 1211.94 L1019.45 1211.94 L1020.04 1211.94 L1020.62 1211.94 L1021.21 1211.94 L1021.8 1211.94 L1022.38 1211.94 L1022.97 1211.94 L1023.56 1211.94 L1024.14 1211.94 L1024.73 1211.94 L1025.32 1211.94 L1025.9 1211.94 L1026.49 1211.94 L1027.07 1211.94 L1027.66 1211.94 L1028.25 1211.94 L1028.83 1211.94 L1029.42 1211.94 L1030.01 1211.94 L1030.59 1211.94 L1031.18 1211.94 L1031.77 1211.94 L1032.35 1211.94 L1032.94 1211.94 L1033.52 1211.94 L1034.11 1211.94 L1034.7 1211.94 L1035.28 1211.94 L1035.87 1211.94 L1036.46 1211.94 L1037.04 1211.94 L1037.63 1211.94 L1038.22 1211.94 L1038.8 1211.94 L1039.39 1211.94 L1039.98 1211.94 L1040.56 1211.94 L1041.15 1211.94 L1041.73 1211.94 L1042.32 1211.94 L1042.91 1211.94 L1043.49 1211.94 L1044.08 1211.94 L1044.67 1211.94 L1045.25 1211.94 L1045.84 1211.94 L1046.43 1211.94 L1047.01 1211.94 L1047.6 1211.94 L1048.19 1211.94 L1048.77 1211.94 L1049.36 1211.94 L1049.94 1211.94 L1050.53 1211.94 L1051.12 1211.94 L1051.7 1211.94 L1052.29 1211.94 L1052.88 1211.94 L1053.46 1211.94 L1054.05 1211.94 L1054.64 1211.94 L1055.22 1211.94 L1055.81 1211.94 L1056.39 1211.94 L1056.98 1211.94 L1057.57 1211.94 L1058.15 1211.94 L1058.74 1211.94 L1059.33 1211.94 L1059.91 1211.94 L1060.5 1211.94 L1061.09 1211.94 L1061.67 1211.94 L1062.26 1211.94 L1062.85 1211.94 L1063.43 1211.94 L1064.02 1211.94 L1064.6 1211.94 L1065.19 1211.94 L1065.78 1211.94 L1066.36 1211.94 L1066.95 1211.94 L1067.54 1211.94 L1068.12 1211.94 L1068.71 1211.94 L1069.3 1211.94 L1069.88 1211.94 L1070.47 1211.94 L1071.06 1211.94 L1071.64 1211.94 L1072.23 1211.94 L1072.81 1211.94 L1073.4 1211.94 L1073.99 1211.94 L1074.57 1211.94 L1075.16 1211.94 L1075.75 1211.94 L1076.33 1211.94 L1076.92 1211.94 L1077.51 1211.94 L1078.09 1211.94 L1078.68 1211.94 L1079.26 1211.94 L1079.85 1211.94 L1080.44 1211.94 L1081.02 1211.94 L1081.61 1211.94 L1082.2 1211.94 L1082.78 1211.94 L1083.37 1211.94 L1083.96 1211.94 L1084.54 1211.94 L1085.13 1211.94 L1085.72 1211.94 L1086.3 1211.94 L1086.89 1211.94 L1087.47 1211.94 L1088.06 1211.94 L1088.65 1211.94 L1089.23 1211.94 L1089.82 1211.94 L1090.41 1211.94 L1090.99 1211.94 L1091.58 1211.94 L1092.17 1211.94 L1092.75 1211.94 L1093.34 1211.94 L1093.93 1211.94 L1094.51 1211.94 L1095.1 1211.94 L1095.68 1211.94 L1096.27 1211.94 L1096.86 1211.94 L1097.44 1211.94 L1098.03 1211.94 L1098.62 1211.94 L1099.2 1211.94 L1099.79 1211.94 L1100.38 1211.94 L1100.96 1211.94 L1101.55 1211.94 L1102.14 1211.94 L1102.72 1211.94 L1103.31 1211.94 L1103.89 1211.94 L1104.48 1211.94 L1105.07 1211.94 L1105.65 1211.94 L1106.24 1211.94 L1106.83 1211.94 L1107.41 1211.94 L1108 1211.94 L1108.59 1211.94 L1109.17 1211.94 L1109.76 1211.94 L1110.34 1211.94 L1110.93 1211.94 L1111.52 1211.94 L1112.1 1211.94 L1112.69 1211.94 L1113.28 1211.94 L1113.86 1211.94 L1114.45 1211.94 L1115.04 1211.94 L1115.62 1211.94 L1116.21 1211.94 L1116.8 1211.94 L1117.38 1211.94 L1117.97 1211.94 L1118.55 1211.94 L1119.14 1211.94 L1119.73 1211.94 L1120.31 1211.94 L1120.9 1211.94 L1121.49 1211.94 L1122.07 1211.94 L1122.66 1211.94 L1123.25 1211.94 L1123.83 1211.94 L1124.42 1211.94 L1125.01 1211.94 L1125.59 1211.94 L1126.18 1211.94 L1126.76 1211.94 L1127.35 1211.94 L1127.94 1211.94 L1128.52 1211.94 L1129.11 1211.94 L1129.7 1211.94 L1130.28 1211.94 L1130.87 1211.94 L1131.46 1211.94 L1132.04 1211.94 L1132.63 1211.94 L1133.21 1211.94 L1133.8 1211.94 L1134.39 1211.94 L1134.97 1211.94 L1135.56 1211.94 L1136.15 1211.94 L1136.73 1211.94 L1137.32 1211.94 L1137.91 1211.94 L1138.49 1211.94 L1139.08 1211.94 L1139.67 1211.94 L1140.25 1211.94 L1140.84 1211.94 L1141.42 1211.94 L1142.01 1211.94 L1142.6 1211.94 L1143.18 1211.94 L1143.77 1211.94 L1144.36 1211.94 L1144.94 1211.94 L1145.53 1211.94 L1146.12 1211.94 L1146.7 1211.94 L1147.29 1211.94 L1147.88 1211.94 L1148.46 1211.94 L1149.05 1211.94 L1149.63 1211.94 L1150.22 1211.94 L1150.81 1211.94 L1151.39 1211.94 L1151.98 1211.94 L1152.57 1211.94 L1153.15 1211.94 L1153.74 1211.94 L1154.33 1211.94 L1154.91 1211.94 L1155.5 1211.94 L1156.09 1211.94 L1156.67 1211.94 L1157.26 1211.94 L1157.84 1211.94 L1158.43 1211.94 L1159.02 1211.94 L1159.6 1211.94 L1160.19 1211.94 L1160.78 1211.94 L1161.36 1211.94 L1161.95 1211.94 L1162.54 1211.94 L1163.12 1211.94 L1163.71 1211.94 L1164.29 1211.94 L1164.88 1211.94 L1165.47 1211.94 L1166.05 1211.94 L1166.64 1211.94 L1167.23 1211.94 L1167.81 1211.94 L1168.4 1211.94 L1168.99 1211.94 L1169.57 1211.94 L1170.16 1211.94 L1170.75 1211.94 L1171.33 1211.94 L1171.92 1211.94 L1172.5 1211.94 L1173.09 1211.94 L1173.68 1211.94 L1174.26 1211.94 L1174.85 1211.94 L1175.44 1211.94 L1176.02 1211.94 L1176.61 1211.94 L1177.2 1211.94 L1177.78 1211.94 L1178.37 1211.94 L1178.96 1211.94 L1179.54 1211.94 L1180.13 1211.94 L1180.71 1211.94 L1181.3 1211.94 L1181.89 1211.94 L1182.47 1211.94 L1183.06 1211.94 L1183.65 1211.94 L1184.23 1211.94 L1184.82 1211.94 L1185.41 1211.94 L1185.99 1211.94 L1186.58 1211.94 L1187.16 1211.94 L1187.75 1211.94 L1188.34 1211.94 L1188.92 1211.94 L1189.51 1211.94 L1190.1 1211.94 L1190.68 1211.94 L1191.27 1211.94 L1191.86 1211.94 L1192.44 1211.94 L1193.03 1211.94 L1193.62 1211.94 L1194.2 1211.94 L1194.79 1211.94 L1195.37 1211.94 L1195.96 1211.94 L1196.55 1211.94 L1197.13 1211.94 L1197.72 1211.94 L1198.31 1211.94 L1198.89 1211.94 L1199.48 1211.94 L1200.07 1211.94 L1200.65 1211.94 L1201.24 1211.94 L1201.83 1211.94 L1202.41 1211.94 L1203 1211.94 L1203.58 1211.94 L1204.17 1211.94 L1204.76 1211.94 L1205.34 1211.94 L1205.93 1211.94 L1206.52 1211.94 L1207.1 1211.94 L1207.69 1211.94 L1208.28 1211.94 L1208.86 1211.94 L1209.45 1211.94 L1210.03 1211.94 L1210.62 1211.94 L1211.21 1211.94 L1211.79 1211.94 L1212.38 1211.94 L1212.97 1211.94 L1213.55 1211.94 L1214.14 1211.94 L1214.73 1211.94 L1215.31 1211.94 L1215.9 1211.94 L1216.49 1211.94 L1217.07 1211.94 L1217.66 1211.94 L1218.24 1211.94 L1218.83 1211.94 L1219.42 1211.94 L1220 1211.94 L1220.59 1211.94 L1221.18 1211.94 L1221.76 1211.94 L1222.35 1211.94 L1222.94 1211.94 L1223.52 1211.94 L1224.11 1211.94 L1224.7 1211.94 L1225.28 1211.94 L1225.87 1211.94 L1226.45 1211.94 L1227.04 1211.94 L1227.63 1211.94 L1228.21 1211.94 L1228.8 1211.94 L1229.39 1211.94 L1229.97 1211.94 L1230.56 1211.94 L1231.15 1211.94 L1231.73 1211.94 L1232.32 1211.94 L1232.91 1211.94 L1233.49 1211.94 L1234.08 1211.94 L1234.66 1211.94 L1235.25 1211.94 L1235.84 1211.94 L1236.42 1211.94 L1237.01 1211.94 L1237.6 1211.94 L1238.18 1211.94 L1238.77 1211.94 L1239.36 1211.94 L1239.94 1211.94 L1240.53 1211.94 L1241.11 1211.94 L1241.7 1211.94 L1242.29 1211.94 L1242.87 1211.94 L1243.46 1211.94 L1244.05 1211.94 L1244.63 1211.94 L1245.22 1211.94 L1245.81 1211.94 L1246.39 1211.94 L1246.98 1211.94 L1247.57 1211.94 L1248.15 1211.94 L1248.74 1211.94 L1249.32 1211.94 L1249.91 1211.94 L1250.5 1211.94 L1251.08 1211.94 L1251.67 1211.94 L1252.26 1211.94 L1252.84 1211.94 L1253.43 1211.94 L1254.02 1211.94 L1254.6 1211.94 L1255.19 1211.94 L1255.78 1211.94 L1256.36 1211.94 L1256.95 1211.94 L1257.53 1211.94 L1258.12 1211.94 L1258.71 1211.94 L1259.29 1211.94 L1259.88 1211.94 L1260.47 1211.94 L1261.05 1211.94 L1261.64 1211.94 L1262.23 1211.94 L1262.81 1211.94 L1263.4 1211.94 L1263.98 1211.94 L1264.57 1211.94 L1265.16 1211.94 L1265.74 1211.94 L1266.33 1211.94 L1266.92 1211.94 L1267.5 1211.94 L1268.09 1211.94 L1268.68 1211.94 L1269.26 1211.94 L1269.85 1211.94 L1270.44 1211.94 L1271.02 1211.94 L1271.61 1211.94 L1272.19 1211.94 L1272.78 1211.94 L1273.37 1211.94 L1273.95 1211.94 L1274.54 1211.94 L1275.13 1211.94 L1275.71 1211.94 L1276.3 1211.94 L1276.89 1211.94 L1277.47 1211.94 L1278.06 1211.94 L1278.65 1211.94 L1279.23 1211.94 L1279.82 1211.94 L1280.4 1211.94 L1280.99 1211.94 L1281.58 1211.94 L1282.16 1211.94 L1282.75 1211.94 L1283.34 1211.94 L1283.92 1211.94 L1284.51 1211.94 L1285.1 1211.94 L1285.68 1211.94 L1286.27 1211.94 L1286.86 1211.94 L1287.44 1211.94 L1288.03 1211.94 L1288.61 1211.94 L1289.2 1211.94 L1289.79 1211.94 L1290.37 1211.94 L1290.96 1211.94 L1291.55 1211.94 L1292.13 1211.94 L1292.72 1211.94 L1293.31 1211.94 L1293.89 1211.94 L1294.48 1211.94 L1295.06 1211.94 L1295.65 1211.94 L1296.24 1211.94 L1296.82 1211.94 L1297.41 1211.94 L1298 1211.94 L1298.58 1211.94 L1299.17 1211.94 L1299.76 1211.94 L1300.34 1211.94 L1300.93 1211.94 L1301.52 1211.94 L1302.1 1211.94 L1302.69 1211.94 L1303.27 1211.94 L1303.86 1211.94 L1304.45 1211.94 L1305.03 1211.94 L1305.62 1211.94 L1306.21 1211.94 L1306.79 1211.94 L1307.38 1211.94 L1307.97 1211.94 L1308.55 1211.94 L1309.14 1211.94 L1309.73 1211.94 L1310.31 1211.94 L1310.9 1211.94 L1311.48 1211.94 L1312.07 1211.94 L1312.66 1211.94 L1313.24 1211.94 L1313.83 1211.94 L1314.42 1211.94 L1315 1211.94 L1315.59 1211.94 L1316.18 1211.94 L1316.76 1211.94 L1317.35 1211.94 L1317.93 1211.94 L1318.52 1211.94 L1319.11 1211.94 L1319.69 1211.94 L1320.28 1211.94 L1320.87 1211.94 L1321.45 1211.94 L1322.04 1211.94 L1322.63 1211.94 L1323.21 1211.94 L1323.8 1211.94 L1324.39 1211.94 L1324.97 1211.94 L1325.56 1211.94 L1326.14 1211.94 L1326.73 1211.94 L1327.32 1211.94 L1327.9 1211.94 L1328.49 1211.94 L1329.08 1211.94 L1329.66 1211.94 L1330.25 1211.94 L1330.84 1211.94 L1331.42 1211.94 L1332.01 1211.94 L1332.6 1211.94 L1333.18 1211.94 L1333.77 1211.94 L1334.35 1211.94 L1334.94 1211.94 L1335.53 1211.94 L1336.11 1211.94 L1336.7 1211.94 L1337.29 1211.94 L1337.87 1211.94 L1338.46 1211.94 L1339.05 1211.94 L1339.63 1211.94 L1340.22 1211.94 L1340.8 1211.94 L1341.39 1211.94 L1341.98 1211.94 L1342.56 1211.94 L1343.15 1211.94 L1343.74 1211.94 L1344.32 1211.94 L1344.91 1211.94 L1345.5 1211.94 L1346.08 1211.94 L1346.67 1211.94 L1347.26 1211.94 L1347.84 1211.94 L1348.43 1211.94 L1349.01 1211.94 L1349.6 1211.94 L1350.19 1211.94 L1350.77 1211.94 L1351.36 1211.94 L1351.95 1211.94 L1352.53 1211.94 L1353.12 1211.94 L1353.71 1211.94 L1354.29 1211.94 L1354.88 1211.94 L1355.47 1211.94 L1356.05 1211.94 L1356.64 1211.94 L1357.22 1211.94 L1357.81 1211.94 L1358.4 1211.94 L1358.98 1211.94 L1359.57 1211.94 L1360.16 1211.94 L1360.74 1211.94 L1361.33 1211.94 L1361.92 1211.94 L1362.5 1211.94 L1363.09 1211.94 L1363.68 1211.94 L1364.26 1211.94 L1364.85 1211.94 L1365.43 1211.94 L1366.02 1211.94 L1366.61 1211.94 L1367.19 1211.94 L1367.78 1211.94 L1368.37 1211.94 L1368.95 1211.94 L1369.54 1211.94 L1370.13 1211.94 L1370.71 1211.94 L1371.3 1211.94 L1371.88 1211.94 L1372.47 1211.94 L1373.06 1211.94 L1373.64 1211.94 L1374.23 1211.94 L1374.82 1211.94 L1375.4 1211.94 L1375.99 1211.94 L1376.58 1211.94 L1377.16 1211.94 L1377.75 1211.94 L1378.34 1211.94 L1378.92 1211.94 L1379.51 1211.94 L1380.09 1211.94 L1380.68 1211.94 L1381.27 1211.94 L1381.85 1211.94 L1382.44 1211.94 L1383.03 1211.94 L1383.61 1211.94 L1384.2 1211.94 L1384.79 1211.94 L1385.37 1211.94 L1385.96 1211.94 L1386.55 1211.94 L1387.13 1211.94 L1387.72 1211.94 L1388.3 1211.94 L1388.89 1211.94 L1389.48 1211.94 L1390.06 1211.94 L1390.65 1211.94 L1391.24 1211.94 L1391.82 1211.94 L1392.41 1211.94 L1393 1211.94 L1393.58 1211.94 L1394.17 1211.94 L1394.75 1211.94 L1395.34 1211.94 L1395.93 1211.94 L1396.51 1211.94 L1397.1 1211.94 L1397.69 1211.94 L1398.27 1211.94 L1398.86 1211.94 L1399.45 1211.94 L1400.03 1211.94 L1400.62 1211.94 L1401.21 1211.94 L1401.79 1211.94 L1402.38 1211.94 L1402.96 1211.94 L1403.55 1211.94 L1404.14 1211.94 L1404.72 1211.94 L1405.31 1211.94 L1405.9 1211.94 L1406.48 1211.94 L1407.07 1211.94 L1407.66 1211.94 L1408.24 1211.94 L1408.83 1211.94 L1409.42 1211.94 L1410 1211.94 L1410.59 1211.94 L1411.17 1211.94 L1411.76 1211.94 L1412.35 1211.94 L1412.93 1211.94 L1413.52 1211.94 L1414.11 1211.94 L1414.69 1211.94 L1415.28 1211.94 L1415.87 1211.94 L1416.45 1211.94 L1417.04 1211.94 L1417.63 1211.94 L1418.21 1211.94 L1418.8 1211.94 L1419.38 1211.94 L1419.97 1211.94 L1420.56 1211.94 L1421.14 1211.94 L1421.73 1211.94 L1422.32 1211.94 L1422.9 1211.94 L1423.49 1211.94 L1424.08 1211.94 L1424.66 1211.94 L1425.25 1211.94 L1425.83 1211.94 L1426.42 1211.94 L1427.01 1211.94 L1427.59 1211.94 L1428.18 1211.94 L1428.77 1211.94 L1429.35 1211.94 L1429.94 1211.94 L1430.53 1211.94 L1431.11 1211.94 L1431.7 1211.94 L1432.29 1211.94 L1432.87 1211.94 L1433.46 1211.94 L1434.04 1211.94 L1434.63 1211.94 L1435.22 1211.94 L1435.8 1211.94 L1436.39 1211.94 L1436.98 1211.94 L1437.56 1211.94 L1438.15 1211.94 L1438.74 1211.94 L1439.32 1211.94 L1439.91 1211.94 L1440.5 1211.94 L1441.08 1211.94 L1441.67 1211.94 L1442.25 1211.94 L1442.84 1211.94 L1443.43 1211.94 L1444.01 1211.94 L1444.6 1211.94 L1445.19 1211.94 L1445.77 1211.94 L1446.36 1211.94 L1446.95 1211.94 L1447.53 1211.94 L1448.12 1211.94 L1448.7 1211.94 L1449.29 1211.94 L1449.88 1211.94 L1450.46 1211.94 L1451.05 1211.94 L1451.64 1211.94 L1452.22 1211.94 L1452.81 1211.94 L1453.4 1211.94 L1453.98 1211.94 L1454.57 1211.94 L1455.16 1211.94 L1455.74 1211.94 L1456.33 1211.94 L1456.91 1211.94 L1457.5 1211.94 L1458.09 1211.94 L1458.67 1211.94 L1459.26 1211.94 L1459.85 1211.94 L1460.43 1211.94 L1461.02 1211.94 L1461.61 1211.94 L1462.19 1211.94 L1462.78 1211.94 L1463.37 1211.94 L1463.95 1211.94 L1464.54 1211.94 L1465.12 1211.94 L1465.71 1211.94 L1466.3 1211.94 L1466.88 1211.94 L1467.47 1211.94 L1468.06 1211.94 L1468.64 1211.94 L1469.23 1211.94 L1469.82 1211.94 L1470.4 1211.94 L1470.99 1211.94 L1471.57 1211.94 L1472.16 1211.94 L1472.75 1211.94 L1473.33 1211.94 L1473.92 1211.94 L1474.51 1211.94 L1475.09 1211.94 L1475.68 1211.94 L1476.27 1211.94 L1476.85 1211.94 L1477.44 1211.94 L1478.03 1211.94 L1478.61 1211.94 L1479.2 1211.94 L1479.78 1211.94 L1480.37 1211.94 L1480.96 1211.94 L1481.54 1211.94 L1482.13 1211.94 L1482.72 1211.94 L1483.3 1211.94 L1483.89 1211.94 L1484.48 1211.94 L1485.06 1211.94 L1485.65 1211.94 L1486.24 1211.94 L1486.82 1211.94 L1487.41 1211.94 L1487.99 1211.94 L1488.58 1211.94 L1489.17 1211.94 L1489.75 1211.94 L1490.34 1211.94 L1490.93 1211.94 L1491.51 1211.94 L1492.1 1211.94 L1492.69 1211.94 L1493.27 1211.94 L1493.86 1211.94 L1494.45 1211.94 L1495.03 1211.94 L1495.62 1211.94 L1496.2 1211.94 L1496.79 1211.94 L1497.38 1211.94 L1497.96 1211.94 L1498.55 1211.94 L1499.14 1211.94 L1499.72 1211.94 L1500.31 1211.94 L1500.9 1211.94 L1501.48 1211.94 L1502.07 1211.94 L1502.65 1211.94 L1503.24 1211.94 L1503.83 1211.94 L1504.41 1211.94 L1505 1211.94 L1505.59 1211.94 L1506.17 1211.94 L1506.76 1211.94 L1507.35 1211.94 L1507.93 1211.94 L1508.52 1211.94 L1509.11 1211.94 L1509.69 1211.94 L1510.28 1211.94 L1510.86 1211.94 L1511.45 1211.94 L1512.04 1211.94 L1512.62 1211.94 L1513.21 1211.94 L1513.8 1211.94 L1514.38 1211.94 L1514.97 1211.94 L1515.56 1211.94 L1516.14 1211.94 L1516.73 1211.94 L1517.32 1211.94 L1517.9 1211.94 L1518.49 1211.94 L1519.07 1211.94 L1519.66 1211.94 L1520.25 1211.94 L1520.83 1211.94 L1521.42 1211.94 L1522.01 1211.94 L1522.59 1211.94 L1523.18 1211.94 L1523.77 1211.94 L1524.35 1211.94 L1524.94 1211.94 L1525.52 1211.94 L1526.11 1211.94 L1526.7 1211.94 L1527.28 1211.94 L1527.87 1211.94 L1528.46 1211.94 L1529.04 1211.94 L1529.63 1211.94 L1530.22 1211.94 L1530.8 1211.94 L1531.39 1211.94 L1531.98 1211.94 L1532.56 1211.94 L1533.15 1211.94 L1533.73 1211.94 L1534.32 1211.94 L1534.91 1211.94 L1535.49 1211.94 L1536.08 1211.94 L1536.67 1211.94 L1537.25 1211.94 L1537.84 1211.94 L1538.43 1211.94 L1539.01 1211.94 L1539.6 1211.94 L1540.19 1211.94 L1540.77 1211.94 L1541.36 1211.94 L1541.94 1211.94 L1542.53 1211.94 L1543.12 1211.94 L1543.7 1211.94 L1544.29 1211.94 L1544.88 1211.94 L1545.46 1211.94 L1546.05 1211.94 L1546.64 1211.94 L1547.22 1211.94 L1547.81 1211.94 L1548.4 1211.94 L1548.98 1211.94 L1549.57 1211.94 L1550.15 1211.94 L1550.74 1211.94 L1551.33 1211.94 L1551.91 1211.94 L1552.5 1211.94 L1553.09 1211.94 L1553.67 1211.94 L1554.26 1211.94 L1554.85 1211.94 L1555.43 1211.94 L1556.02 1211.94 L1556.6 1211.94 L1557.19 1211.94 L1557.78 1211.94 L1558.36 1211.94 L1558.95 1211.94 L1559.54 1211.94 L1560.12 1211.94 L1560.71 1211.94 L1561.3 1211.94 L1561.88 1211.94 L1562.47 1211.94 L1563.06 1211.94 L1563.64 1211.94 L1564.23 1211.94 L1564.81 1211.94 L1565.4 1211.94 L1565.99 1211.94 L1566.57 1211.94 L1567.16 1211.94 L1567.75 1211.94 L1568.33 1211.94 L1568.92 1211.94 L1569.51 1211.94 L1570.09 1211.94 L1570.68 1211.94 L1571.27 1211.94 L1571.85 1211.94 L1572.44 1211.94 L1573.02 1211.94 L1573.61 1211.94 L1574.2 1211.94 L1574.78 1211.94 L1575.37 1211.94 L1575.96 1211.94 L1576.54 1211.94 L1577.13 1211.94 L1577.72 1211.94 L1578.3 1211.94 L1578.89 1211.94 L1579.47 1211.94 L1580.06 1211.94 L1580.65 1211.94 L1581.23 1211.94 L1581.82 1211.94 L1582.41 1211.94 L1582.99 1211.94 L1583.58 1211.94 L1584.17 1211.94 L1584.75 1211.94 L1585.34 1211.94 L1585.93 1211.94 L1586.51 1211.94 L1587.1 1211.94 L1587.68 1211.94 L1588.27 1211.94 L1588.86 1211.94 L1589.44 1211.94 L1590.03 1211.94 L1590.62 1211.94 L1591.2 1211.94 L1591.79 1211.94 L1592.38 1211.94 L1592.96 1211.94 L1593.55 1211.94 L1594.14 1211.94 L1594.72 1211.94 L1595.31 1211.94 L1595.89 1211.94 L1596.48 1211.94 L1597.07 1211.94 L1597.65 1211.94 L1598.24 1211.94 L1598.83 1211.94 L1599.41 1211.94 L1600 1211.94 L1600.59 1211.94 L1601.17 1211.94 L1601.76 1211.94 L1602.34 1211.94 L1602.93 1211.94 L1603.52 1211.94 L1604.1 1211.94 L1604.69 1211.94 L1605.28 1211.94 L1605.86 1211.94 L1606.45 1211.94 L1607.04 1211.94 L1607.62 1211.94 L1608.21 1211.94 L1608.8 1211.94 L1609.38 1211.94 L1609.97 1211.94 L1610.55 1211.94 L1611.14 1211.94 L1611.73 1211.94 L1612.31 1211.94 L1612.9 1211.94 L1613.49 1211.94 L1614.07 1211.94 L1614.66 1211.94 L1615.25 1211.94 L1615.83 1211.94 L1616.42 1211.94 L1617.01 1211.94 L1617.59 1211.94 L1618.18 1211.94 L1618.76 1211.94 L1619.35 1211.94 L1619.94 1211.94 L1620.52 1211.94 L1621.11 1211.94 L1621.7 1211.94 L1622.28 1211.94 L1622.87 1211.94 L1623.46 1211.94 L1624.04 1211.94 L1624.63 1211.94 L1625.22 1211.94 L1625.8 1211.94 L1626.39 1211.94 L1626.97 1211.94 L1627.56 1211.94 L1628.15 1211.94 L1628.73 1211.94 L1629.32 1211.94 L1629.91 1211.94 L1630.49 1211.94 L1631.08 1211.94 L1631.67 1211.94 L1632.25 1211.94 L1632.84 1211.94 L1633.42 1211.94 L1634.01 1211.94 L1634.6 1211.94 L1635.18 1211.94 L1635.77 1211.94 L1636.36 1211.94 L1636.94 1211.94 L1637.53 1211.94 L1638.12 1211.94 L1638.7 1211.94 L1639.29 1211.94 L1639.88 1211.94 L1640.46 1211.94 L1641.05 1211.94 L1641.63 1211.94 L1642.22 1211.94 L1642.81 1211.94 L1643.39 1211.94 L1643.98 1211.94 L1644.57 1211.94 L1645.15 1211.94 L1645.74 1211.94 L1646.33 1211.94 L1646.91 1211.94 L1647.5 1211.94 L1648.09 1211.94 L1648.67 1211.94 L1649.26 1211.94 L1649.84 1211.94 L1650.43 1211.94 L1651.02 1211.94 L1651.6 1211.94 L1652.19 1211.94 L1652.78 1211.94 L1653.36 1211.94 L1653.95 1211.94 L1654.54 1211.94 L1655.12 1211.94 L1655.71 1211.94 L1656.29 1211.94 L1656.88 1211.94 L1657.47 1211.94 L1658.05 1211.94 L1658.64 1211.94 L1659.23 1211.94 L1659.81 1211.94 L1660.4 1211.94 L1660.99 1211.94 L1661.57 1211.94 L1662.16 1211.94 L1662.75 1211.94 L1663.33 1211.94 L1663.92 1211.94 L1664.5 1211.94 L1665.09 1211.94 L1665.68 1211.94 L1666.26 1211.94 L1666.85 1211.94 L1667.44 1211.94 L1668.02 1211.94 L1668.61 1211.94 L1669.2 1211.94 L1669.78 1211.94 L1670.37 1211.94 L1670.96 1211.94 L1671.54 1211.94 L1672.13 1211.94 L1672.71 1211.94 L1673.3 1211.94 L1673.89 1211.94 L1674.47 1211.94 L1675.06 1211.94 L1675.65 1211.94 L1676.23 1211.94 L1676.82 1211.94 L1677.41 1211.94 L1677.99 1211.94 L1678.58 1211.94 L1679.17 1211.94 L1679.75 1211.94 L1680.34 1211.94 L1680.92 1211.94 L1681.51 1211.94 L1682.1 1211.94 L1682.68 1211.94 L1683.27 1211.94 L1683.86 1211.94 L1684.44 1211.94 L1685.03 1211.94 L1685.62 1211.94 L1686.2 1211.94 L1686.79 1211.94 L1687.37 1211.94 L1687.96 1211.94 L1688.55 1211.94 L1689.13 1211.94 L1689.72 1211.94 L1690.31 1211.94 L1690.89 1211.94 L1691.48 1211.94 L1692.07 1211.94 L1692.65 1211.94 L1693.24 1211.94 L1693.83 1211.94 L1694.41 1211.94 L1695 1211.94 L1695.58 1211.94 L1696.17 1211.94 L1696.76 1211.94 L1697.34 1211.94 L1697.93 1211.94 L1698.52 1211.94 L1699.1 1211.94 L1699.69 1211.94 L1700.28 1211.94 L1700.86 1211.94 L1701.45 1211.94 L1702.04 1211.94 L1702.62 1211.94 L1703.21 1211.94 L1703.79 1211.94 L1704.38 1211.94 L1704.97 1211.94 L1705.55 1211.94 L1706.14 1211.94 L1706.73 1211.94 L1707.31 1211.94 L1707.9 1211.94 L1708.49 1211.94 L1709.07 1211.94 L1709.66 1211.94 L1710.24 1211.94 L1710.83 1211.94 L1711.42 1211.94 L1712 1211.94 L1712.59 1211.94 L1713.18 1211.94 L1713.76 1211.94 L1714.35 1211.94 L1714.94 1211.94 L1715.52 1211.94 L1716.11 1211.94 L1716.7 1211.94 L1717.28 1211.94 L1717.87 1211.94 L1718.45 1211.94 L1719.04 1211.94 L1719.63 1211.94 L1720.21 1211.94 L1720.8 1211.94 L1721.39 1211.94 L1721.97 1211.94 L1722.56 1211.94 L1723.15 1211.94 L1723.73 1211.94 L1724.32 1211.94 L1724.91 1211.94 L1725.49 1211.94 L1726.08 1211.94 L1726.66 1211.94 L1727.25 1211.94 L1727.84 1211.94 L1728.42 1211.94 L1729.01 1211.94 L1729.6 1211.94 L1730.18 1211.94 L1730.77 1211.94 L1731.36 1211.94 L1731.94 1211.94 L1732.53 1211.94 L1733.11 1211.94 L1733.7 1211.94 L1734.29 1211.94 L1734.87 1211.94 L1735.46 1211.94 L1736.05 1211.94 L1736.63 1211.94 L1737.22 1211.94 L1737.81 1211.94 L1738.39 1211.94 L1738.98 1211.94 L1739.57 1211.94 L1740.15 1211.94 L1740.74 1211.94 L1741.32 1211.94 L1741.91 1211.94 L1742.5 1211.94 L1743.08 1211.94 L1743.67 1211.94 L1744.26 1211.94 L1744.84 1211.94 L1745.43 1211.94 L1746.02 1211.94 L1746.6 1211.94 L1747.19 1211.94 L1747.78 1211.94 L1748.36 1211.94 L1748.95 1211.94 L1749.53 1211.94 L1750.12 1211.94 L1750.71 1211.94 L1751.29 1211.94 L1751.88 1211.94 L1752.47 1211.94 L1753.05 1211.94 L1753.64 1211.94 L1754.23 1211.94 L1754.81 1211.94 L1755.4 1211.94 L1755.99 1211.94 L1756.57 1211.94 L1757.16 1211.94 L1757.74 1211.94 L1758.33 1211.94 L1758.92 1211.94 L1759.5 1211.94 L1760.09 1211.94 L1760.68 1211.94 L1761.26 1211.94 L1761.85 1211.94 L1762.44 1211.94 L1763.02 1211.94 L1763.61 1211.94 L1764.19 1211.94 L1764.78 1211.94 L1765.37 1211.94 L1765.95 1211.94 L1766.54 1211.94 L1767.13 1211.94 L1767.71 1211.94 L1768.3 1211.94 L1768.89 1211.94 L1769.47 1211.94 L1770.06 1211.94 L1770.65 1211.94 L1771.23 1211.94 L1771.82 1211.94 L1772.4 1211.94 L1772.99 1211.94 L1773.58 1211.94 L1774.16 1211.94 L1774.75 1211.94 L1775.34 1211.94 L1775.92 1211.94 L1776.51 1211.94 L1777.1 1211.94 L1777.68 1211.94 L1778.27 1211.94 L1778.86 1211.94 L1779.44 1211.94 L1780.03 1211.94 L1780.61 1211.94 L1781.2 1211.94 L1781.79 1211.94 L1782.37 1211.94 L1782.96 1211.94 L1783.55 1211.94 L1784.13 1211.94 L1784.72 1211.94 L1785.31 1211.94 L1785.89 1211.94 L1786.48 1211.94 L1787.06 1211.94 L1787.65 1211.94 L1788.24 1211.94 L1788.82 1211.94 L1789.41 1211.94 L1790 1211.94 L1790.58 1211.94 L1791.17 1211.94 L1791.76 1211.94 L1792.34 1211.94 L1792.93 1211.94 L1793.52 1211.94 L1794.1 1211.94 L1794.69 1211.94 L1795.27 1211.94 L1795.86 1211.94 L1796.45 1211.94 L1797.03 1211.94 L1797.62 1211.94 L1798.21 1211.94 L1798.79 1211.94 L1799.38 1211.94 L1799.97 1211.94 L1800.55 1211.94 L1801.14 1211.94 L1801.73 1211.94 L1802.31 1211.94 L1802.9 1211.94 L1803.48 1211.94 L1804.07 1211.94 L1804.66 1211.94 L1805.24 1211.94 L1805.83 1211.94 L1806.42 1211.94 L1807 1211.94 L1807.59 1211.94 L1808.18 1211.94 L1808.76 1211.94 L1809.35 1211.94 L1809.94 1211.94 L1810.52 1211.94 L1811.11 1211.94 L1811.69 1211.94 L1812.28 1211.94 L1812.87 1211.94 L1813.45 1211.94 L1814.04 1211.94 L1814.63 1211.94 L1815.21 1211.94 L1815.8 1211.94 L1816.39 1211.94 L1816.97 1211.94 L1817.56 1211.94 L1818.14 1211.94 L1818.73 1211.94 L1819.32 1211.94 L1819.9 1211.94 L1820.49 1211.94 L1821.08 1211.94 L1821.66 1211.94 L1822.25 1211.94 L1822.84 1211.94 L1823.42 1211.94 L1824.01 1211.94 L1824.6 1211.94 L1825.18 1211.94 L1825.77 1211.94 L1826.35 1211.94 L1826.94 1211.94 L1827.53 1211.94 L1828.11 1211.94 L1828.7 1211.94 L1829.29 1211.94 L1829.87 1211.94 L1830.46 1211.94 L1831.05 1211.94 L1831.63 1211.94 L1832.22 1211.94 L1832.81 1211.94 L1833.39 1211.94 L1833.98 1211.94 L1834.56 1211.94 L1835.15 1211.94 L1835.74 1211.94 L1836.32 1211.94 L1836.91 1211.94 L1837.5 1211.94 L1838.08 1211.94 L1838.67 1211.94 L1839.26 1211.94 L1839.84 1211.94 L1840.43 1211.94 L1841.01 1211.94 L1841.6 1211.94 L1842.19 1211.94 L1842.77 1211.94 L1843.36 1211.94 L1843.95 1211.94 L1844.53 1211.94 L1845.12 1211.94 L1845.71 1211.94 L1846.29 1211.94 L1846.88 1211.94 L1847.47 1211.94 L1848.05 1211.94 L1848.64 1211.94 L1849.22 1211.94 L1849.81 1211.94 L1850.4 1211.94 L1850.98 1211.94 L1851.57 1211.94 L1852.16 1211.94 L1852.74 1211.94 L1853.33 1211.94 L1853.92 1211.94 L1854.5 1211.94 L1855.09 1211.94 L1855.68 1211.94 L1856.26 1211.94 L1856.85 1211.94 L1857.43 1211.94 L1858.02 1211.94 L1858.61 1211.94 L1859.19 1211.94 L1859.78 1211.94 L1860.37 1211.94 L1860.95 1211.94 L1861.54 1211.94 L1862.13 1211.94 L1862.71 1211.94 L1863.3 1211.94 L1863.88 1211.94 L1864.47 1211.94 L1865.06 1211.94 L1865.64 1211.94 L1866.23 1211.94 L1866.82 1211.94 L1867.4 1211.94 L1867.99 1211.94 L1868.58 1211.94 L1869.16 1211.94 L1869.75 1211.94 L1870.34 1211.94 L1870.92 1211.94 L1871.51 1211.94 L1872.09 1211.94 L1872.68 1211.94 L1873.27 1211.94 L1873.85 1211.94 L1874.44 1211.94 L1875.03 1211.94 L1875.61 1211.94 L1876.2 1211.94 L1876.79 1211.94 L1877.37 1211.94 L1877.96 1211.94 L1878.55 1211.94 L1879.13 1211.94 L1879.72 1211.94 L1880.3 1211.94 L1880.89 1211.94 L1881.48 1211.94 L1882.06 1211.94 L1882.65 1211.94 L1883.24 1211.94 L1883.82 1211.94 L1884.41 1211.94 L1885 1211.94 L1885.58 1211.94 L1886.17 1211.94 L1886.76 1211.94 L1887.34 1211.94 L1887.93 1211.94 L1888.51 1211.94 L1889.1 1211.94 L1889.69 1211.94 L1890.27 1211.94 L1890.86 1211.94 L1891.45 1211.94 L1892.03 1211.94 L1892.62 1211.94 L1893.21 1211.94 L1893.79 1211.94 L1894.38 1211.94 L1894.96 1211.94 L1895.55 1211.94 L1896.14 1211.94 L1896.72 1211.94 L1897.31 1211.94 L1897.9 1211.94 L1898.48 1211.94 L1899.07 1211.94 L1899.66 1211.94 L1900.24 1211.94 L1900.83 1211.94 L1901.42 1211.94 L1902 1211.94 L1902.59 1211.94 L1903.17 1211.94 L1903.76 1211.94 L1904.35 1211.94 L1904.93 1211.94 L1905.52 1211.94 L1906.11 1211.94 L1906.69 1211.94 L1907.28 1211.94 L1907.87 1211.94 L1908.45 1211.94 L1909.04 1211.94 L1909.63 1211.94 L1910.21 1211.94 L1910.8 1211.94 L1911.38 1211.94 L1911.97 1211.94 L1912.56 1211.94 L1913.14 1211.94 L1913.73 1211.94 L1914.32 1211.94 L1914.9 1211.94 L1915.49 1211.94 L1916.08 1211.94 L1916.66 1211.94 L1917.25 1211.94 L1917.83 1211.94 L1918.42 1211.94 L1919.01 1211.94 L1919.59 1211.94 L1920.18 1211.94 L1920.77 1211.94 L1921.35 1211.94 L1921.94 1211.94 L1922.53 1211.94 L1923.11 1211.94 L1923.7 1211.94 L1924.29 1211.94 L1924.87 1211.94 L1925.46 1211.94 L1926.04 1211.94 L1926.63 1211.94 L1927.22 1211.94 L1927.8 1211.94 L1928.39 1211.94 L1928.98 1211.94 L1929.56 1211.94 L1930.15 1211.94 L1930.74 1211.94 L1931.32 1211.94 L1931.91 1211.94 L1932.5 1211.94 L1933.08 1211.94 L1933.67 1211.94 L1934.25 1211.94 L1934.84 1211.94 L1935.43 1211.94 L1936.01 1211.94 L1936.6 1211.94 L1937.19 1211.94 L1937.77 1211.94 L1938.36 1211.94 L1938.95 1211.94 L1939.53 1211.94 L1940.12 1211.94 L1940.71 1211.94 L1941.29 1211.94 L1941.88 1211.94 L1942.46 1211.94 L1943.05 1211.94 L1943.64 1211.94 L1944.22 1211.94 L1944.81 1211.94 L1945.4 1211.94 L1945.98 1211.94 L1946.57 1211.94 L1947.16 1211.94 L1947.74 1211.94 L1948.33 1211.94 L1948.91 1211.94 L1949.5 1211.94 L1950.09 1211.94 L1950.67 1211.94 L1951.26 1211.94 L1951.85 1211.94 L1952.43 1211.94 L1953.02 1211.94 L1953.61 1211.94 L1954.19 1211.94 L1954.78 1211.94 L1955.37 1211.94 L1955.95 1211.94 L1956.54 1211.94 L1957.12 1211.94 L1957.71 1211.94 L1958.3 1211.94 L1958.88 1211.94 L1959.47 1211.94 L1960.06 1211.94 L1960.64 1211.94 L1961.23 1211.94 L1961.82 1211.94 L1962.4 1211.94 L1962.99 1211.94 L1963.58 1211.94 L1964.16 1211.94 L1964.75 1211.94 L1965.33 1211.94 L1965.92 1211.94 L1966.51 1211.94 L1967.09 1211.94 L1967.68 1211.94 L1968.27 1211.94 L1968.85 1211.94 L1969.44 1211.94 L1970.03 1211.94 L1970.61 1211.94 L1971.2 1211.94 L1971.78 1211.94 L1972.37 1211.94 L1972.96 1211.94 L1973.54 1211.94 L1974.13 1211.94 L1974.72 1211.94 L1975.3 1211.94 L1975.89 1211.94 L1976.48 1211.94 L1977.06 1211.94 L1977.65 1211.94 L1978.24 1211.94 L1978.82 1211.94 L1979.41 1211.94 L1979.99 1211.94 L1980.58 1211.94 L1981.17 1211.94 L1981.75 1211.94 L1982.34 1211.94 L1982.93 1211.94 L1983.51 1211.94 L1984.1 1211.94 L1984.69 1211.94 L1985.27 1211.94 L1985.86 1211.94 L1986.45 1211.94 L1987.03 1211.94 L1987.62 1211.94 L1988.2 1211.94 L1988.79 1211.94 L1989.38 1211.94 L1989.96 1211.94 L1990.55 1211.94 L1991.14 1211.94 L1991.72 1211.94 L1992.31 1211.94 L1992.9 1211.94 L1993.48 1211.94 L1994.07 1211.94 L1994.65 1211.94 L1995.24 1211.94 L1995.83 1211.94 L1996.41 1211.94 L1997 1211.94 L1997.59 1211.94 L1998.17 1211.94 L1998.76 1211.94 L1999.35 1211.94 L1999.93 1211.94 L2000.52 1211.94 L2001.11 1211.94 L2001.69 1211.94 L2002.28 1211.94 L2002.86 1211.94 L2003.45 1211.94 L2004.04 1211.94 L2004.62 1211.94 L2005.21 1211.94 L2005.8 1211.94 L2006.38 1211.94 L2006.97 1211.94 L2007.56 1211.94 L2008.14 1211.94 L2008.73 1211.94 L2009.32 1211.94 L2009.9 1211.94 L2010.49 1211.94 L2011.07 1211.94 L2011.66 1211.94 L2012.25 1211.94 L2012.83 1211.94 L2013.42 1211.94 L2014.01 1211.94 L2014.59 1211.94 L2015.18 1211.94 L2015.77 1211.94 L2016.35 1211.94 L2016.94 1211.94 L2017.53 1211.94 L2018.11 1211.94 L2018.7 1211.94 L2019.28 1211.94 L2019.87 1211.94 L2020.46 1211.94 L2021.04 1211.94 L2021.63 1211.94 L2022.22 1211.94 L2022.8 1211.94 L2023.39 1211.94 L2023.98 1211.94 L2024.56 1211.94 L2025.15 1211.94 L2025.73 1211.94 L2026.32 1211.94 L2026.91 1211.94 L2027.49 1211.94 L2028.08 1211.94 L2028.67 1211.94 L2029.25 1211.94 L2029.84 1211.94 L2030.43 1211.94 L2031.01 1211.94 L2031.6 1211.94 L2032.19 1211.94 L2032.77 1211.94 L2033.36 1211.94 L2033.94 1211.94 L2034.53 1211.94 L2035.12 1211.94 L2035.7 1211.94 L2036.29 1211.94 L2036.88 1211.94 L2037.46 1211.94 L2038.05 1211.94 L2038.64 1211.94 L2039.22 1211.94 L2039.81 1211.94 L2040.4 1211.94 L2040.98 1211.94 L2041.57 1211.94 L2042.15 1211.94 L2042.74 1211.94 L2043.33 1211.94 L2043.91 1211.94 L2044.5 1211.94 L2045.09 1211.94 L2045.67 1211.94 L2046.26 1211.94 L2046.85 1211.94 L2047.43 1211.94 L2048.02 1211.94 L2048.6 1211.94 L2049.19 1211.94 L2049.78 1211.94 L2050.36 1211.94 L2050.95 1211.94 L2051.54 1211.94 L2052.12 1211.94 L2052.71 1211.94 L2053.3 1211.94 L2053.88 1211.94 L2054.47 1211.94 L2055.06 1211.94 L2055.64 1211.94 L2056.23 1211.94 L2056.81 1211.94 L2057.4 1211.94 L2057.99 1211.94 L2058.57 1211.94 L2059.16 1211.94 L2059.75 1211.94 L2060.33 1211.94 L2060.92 1211.94 L2061.51 1211.94 L2062.09 1211.94 L2062.68 1211.94 L2063.27 1211.94 L2063.85 1211.94 L2064.44 1211.94 L2065.02 1211.94 L2065.61 1211.94 L2066.2 1211.94 L2066.78 1211.94 L2067.37 1211.94 L2067.96 1211.94 L2068.54 1211.94 L2069.13 1211.94 L2069.72 1211.94 L2070.3 1211.94 L2070.89 1211.94 L2071.48 1211.94 L2072.06 1211.94 L2072.65 1211.94 L2073.23 1211.94 L2073.82 1211.94 L2074.41 1211.94 L2074.99 1211.94 L2075.58 1211.94 L2076.17 1211.94 L2076.75 1211.94 L2077.34 1211.94 L2077.93 1211.94 L2078.51 1211.94 L2079.1 1211.94 L2079.68 1211.94 L2080.27 1211.94 L2080.86 1211.94 L2081.44 1211.94 L2082.03 1211.94 L2082.62 1211.94 L2083.2 1211.94 L2083.79 1211.94 L2084.38 1211.94 L2084.96 1211.94 L2085.55 1211.94 L2086.14 1211.94 L2086.72 1211.94 L2087.31 1211.94 L2087.89 1211.94 L2088.48 1211.94 L2089.07 1211.94 L2089.65 1211.94 L2090.24 1211.94 L2090.83 1211.94 L2091.41 1211.94 L2092 1211.94 L2092.59 1211.94 L2093.17 1211.94 L2093.76 1211.94 L2094.35 1211.94 L2094.93 1211.94 L2095.52 1211.94 L2096.1 1211.94 L2096.69 1211.94 L2097.28 1211.94 L2097.86 1211.94 L2098.45 1211.94 L2099.04 1211.94 L2099.62 1211.94 L2100.21 1211.94 L2100.8 1211.94 L2101.38 1211.94 L2101.97 1211.94 L2102.55 1211.94 L2103.14 1211.94 L2103.73 1211.94 L2104.31 1211.94 L2104.9 1211.94 L2105.49 1211.94 L2106.07 1211.94 L2106.66 1211.94 L2107.25 1211.94 L2107.83 1211.94 L2108.42 1211.94 L2109.01 1211.94 L2109.59 1211.94 L2110.18 1211.94 L2110.76 1211.94 L2111.35 1211.94 L2111.94 1211.94 L2112.52 1211.94 L2113.11 1211.94 L2113.7 1211.94 L2114.28 1211.94 L2114.87 1211.94 L2115.46 1211.94 L2116.04 1211.94 L2116.63 1211.94 L2117.22 1211.94 L2117.8 1211.94 L2118.39 1211.94 L2118.97 1211.94 L2119.56 1211.94 L2120.15 1211.94 L2120.73 1211.94 L2121.32 1211.94 L2121.91 1211.94 L2122.49 1211.94 L2123.08 1211.94 L2123.67 1211.94 L2124.25 1211.94 L2124.84 1211.94 L2125.42 1211.94 L2126.01 1211.94 L2126.6 1211.94 L2127.18 1211.94 L2127.77 1211.94 L2128.36 1211.94 L2128.94 1211.94 L2129.53 1211.94 L2130.12 1211.94 L2130.7 1211.94 L2131.29 1211.94 L2131.88 1211.94 L2132.46 1211.94 L2133.05 1211.94 L2133.63 1211.94 L2134.22 1211.94 L2134.81 1211.94 L2135.39 1211.94 L2135.98 1211.94 L2136.57 1211.94 L2137.15 1211.94 L2137.74 1211.94 L2138.33 1211.94 L2138.91 1211.94 L2139.5 1211.94 L2140.09 1211.94 L2140.67 1211.94 L2141.26 1211.94 L2141.84 1211.94 L2142.43 1211.94 L2143.02 1211.94 L2143.6 1211.94 L2144.19 1211.94 L2144.78 1211.94 L2145.36 1211.94 L2145.95 1211.94 L2146.54 1211.94 L2147.12 1211.94 L2147.71 1211.94 L2148.3 1211.94 L2148.88 1211.94 L2149.47 1211.94 L2150.05 1211.94 L2150.64 1211.94 L2151.23 1211.94 L2151.81 1211.94 L2152.4 1211.94 L2152.99 1211.94 L2153.57 1211.94 L2154.16 1211.94 L2154.75 1211.94 L2155.33 1211.94 L2155.92 1211.94 L2156.5 1211.94 L2157.09 1211.94 L2157.68 1211.94 L2158.26 1211.94 L2158.26 1211.8 L2157.68 1211.8 L2157.09 1211.8 L2156.5 1211.8 L2155.92 1211.8 L2155.33 1211.8 L2154.75 1211.8 L2154.16 1211.8 L2153.57 1211.8 L2152.99 1211.8 L2152.4 1211.8 L2151.81 1211.8 L2151.23 1211.8 L2150.64 1211.8 L2150.05 1211.8 L2149.47 1211.8 L2148.88 1211.8 L2148.3 1211.8 L2147.71 1211.8 L2147.12 1211.8 L2146.54 1211.8 L2145.95 1211.8 L2145.36 1211.8 L2144.78 1211.8 L2144.19 1211.8 L2143.6 1211.8 L2143.02 1211.8 L2142.43 1211.8 L2141.84 1211.8 L2141.26 1211.8 L2140.67 1211.8 L2140.09 1211.8 L2139.5 1211.8 L2138.91 1211.8 L2138.33 1211.8 L2137.74 1211.8 L2137.15 1211.8 L2136.57 1211.8 L2135.98 1211.8 L2135.39 1211.8 L2134.81 1211.8 L2134.22 1211.8 L2133.63 1211.8 L2133.05 1211.8 L2132.46 1211.8 L2131.88 1211.8 L2131.29 1211.8 L2130.7 1211.8 L2130.12 1211.8 L2129.53 1211.8 L2128.94 1211.8 L2128.36 1211.8 L2127.77 1211.8 L2127.18 1211.8 L2126.6 1211.8 L2126.01 1211.8 L2125.42 1211.8 L2124.84 1211.8 L2124.25 1211.8 L2123.67 1211.8 L2123.08 1211.8 L2122.49 1211.8 L2121.91 1211.8 L2121.32 1211.8 L2120.73 1211.8 L2120.15 1211.8 L2119.56 1211.8 L2118.97 1211.8 L2118.39 1211.8 L2117.8 1211.8 L2117.22 1211.8 L2116.63 1211.8 L2116.04 1211.8 L2115.46 1211.8 L2114.87 1211.8 L2114.28 1211.8 L2113.7 1211.8 L2113.11 1211.8 L2112.52 1211.8 L2111.94 1211.8 L2111.35 1211.8 L2110.76 1211.8 L2110.18 1211.8 L2109.59 1211.8 L2109.01 1211.8 L2108.42 1211.8 L2107.83 1211.8 L2107.25 1211.8 L2106.66 1211.8 L2106.07 1211.8 L2105.49 1211.8 L2104.9 1211.8 L2104.31 1211.8 L2103.73 1211.8 L2103.14 1211.8 L2102.55 1211.8 L2101.97 1211.8 L2101.38 1211.8 L2100.8 1211.8 L2100.21 1211.8 L2099.62 1211.8 L2099.04 1211.8 L2098.45 1211.8 L2097.86 1211.8 L2097.28 1211.8 L2096.69 1211.8 L2096.1 1211.8 L2095.52 1211.8 L2094.93 1211.8 L2094.35 1211.8 L2093.76 1211.8 L2093.17 1211.8 L2092.59 1211.8 L2092 1211.8 L2091.41 1211.8 L2090.83 1211.8 L2090.24 1211.8 L2089.65 1211.8 L2089.07 1211.8 L2088.48 1211.8 L2087.89 1211.8 L2087.31 1211.8 L2086.72 1211.8 L2086.14 1211.8 L2085.55 1211.8 L2084.96 1211.8 L2084.38 1211.8 L2083.79 1211.8 L2083.2 1211.8 L2082.62 1211.8 L2082.03 1211.8 L2081.44 1211.8 L2080.86 1211.8 L2080.27 1211.8 L2079.68 1211.8 L2079.1 1211.8 L2078.51 1211.8 L2077.93 1211.8 L2077.34 1211.8 L2076.75 1211.8 L2076.17 1211.8 L2075.58 1211.8 L2074.99 1211.8 L2074.41 1211.8 L2073.82 1211.8 L2073.23 1211.8 L2072.65 1211.8 L2072.06 1211.8 L2071.48 1211.8 L2070.89 1211.8 L2070.3 1211.8 L2069.72 1211.8 L2069.13 1211.8 L2068.54 1211.8 L2067.96 1211.8 L2067.37 1211.8 L2066.78 1211.8 L2066.2 1211.8 L2065.61 1211.8 L2065.02 1211.8 L2064.44 1211.8 L2063.85 1211.8 L2063.27 1211.8 L2062.68 1211.8 L2062.09 1211.8 L2061.51 1211.8 L2060.92 1211.8 L2060.33 1211.8 L2059.75 1211.8 L2059.16 1211.8 L2058.57 1211.8 L2057.99 1211.8 L2057.4 1211.8 L2056.81 1211.8 L2056.23 1211.8 L2055.64 1211.8 L2055.06 1211.8 L2054.47 1211.8 L2053.88 1211.8 L2053.3 1211.8 L2052.71 1211.8 L2052.12 1211.8 L2051.54 1211.8 L2050.95 1211.8 L2050.36 1211.8 L2049.78 1211.8 L2049.19 1211.8 L2048.6 1211.8 L2048.02 1211.8 L2047.43 1211.8 L2046.85 1211.8 L2046.26 1211.8 L2045.67 1211.8 L2045.09 1211.8 L2044.5 1211.8 L2043.91 1211.8 L2043.33 1211.8 L2042.74 1211.8 L2042.15 1211.8 L2041.57 1211.8 L2040.98 1211.8 L2040.4 1211.8 L2039.81 1211.8 L2039.22 1211.8 L2038.64 1211.8 L2038.05 1211.8 L2037.46 1211.8 L2036.88 1211.8 L2036.29 1211.8 L2035.7 1211.8 L2035.12 1211.8 L2034.53 1211.8 L2033.94 1211.8 L2033.36 1211.8 L2032.77 1211.8 L2032.19 1211.8 L2031.6 1211.8 L2031.01 1211.8 L2030.43 1211.8 L2029.84 1211.8 L2029.25 1211.8 L2028.67 1211.8 L2028.08 1211.8 L2027.49 1211.8 L2026.91 1211.8 L2026.32 1211.8 L2025.73 1211.8 L2025.15 1211.8 L2024.56 1211.8 L2023.98 1211.8 L2023.39 1211.8 L2022.8 1211.8 L2022.22 1211.8 L2021.63 1211.8 L2021.04 1211.8 L2020.46 1211.8 L2019.87 1211.8 L2019.28 1211.8 L2018.7 1211.8 L2018.11 1211.8 L2017.53 1211.8 L2016.94 1211.8 L2016.35 1211.8 L2015.77 1211.8 L2015.18 1211.8 L2014.59 1211.8 L2014.01 1211.8 L2013.42 1211.8 L2012.83 1211.8 L2012.25 1211.8 L2011.66 1211.8 L2011.07 1211.8 L2010.49 1211.8 L2009.9 1211.8 L2009.32 1211.8 L2008.73 1211.8 L2008.14 1211.8 L2007.56 1211.8 L2006.97 1211.8 L2006.38 1211.8 L2005.8 1211.8 L2005.21 1211.8 L2004.62 1211.8 L2004.04 1211.8 L2003.45 1211.8 L2002.86 1211.8 L2002.28 1211.8 L2001.69 1211.8 L2001.11 1211.8 L2000.52 1211.8 L1999.93 1211.8 L1999.35 1211.8 L1998.76 1211.8 L1998.17 1211.8 L1997.59 1211.8 L1997 1211.8 L1996.41 1211.8 L1995.83 1211.8 L1995.24 1211.8 L1994.65 1211.8 L1994.07 1211.8 L1993.48 1211.8 L1992.9 1211.8 L1992.31 1211.8 L1991.72 1211.8 L1991.14 1211.8 L1990.55 1211.8 L1989.96 1211.8 L1989.38 1211.8 L1988.79 1211.8 L1988.2 1211.8 L1987.62 1211.8 L1987.03 1211.8 L1986.45 1211.8 L1985.86 1211.8 L1985.27 1211.8 L1984.69 1211.8 L1984.1 1211.8 L1983.51 1211.8 L1982.93 1211.8 L1982.34 1211.8 L1981.75 1211.8 L1981.17 1211.8 L1980.58 1211.8 L1979.99 1211.8 L1979.41 1211.8 L1978.82 1211.8 L1978.24 1211.8 L1977.65 1211.8 L1977.06 1211.8 L1976.48 1211.8 L1975.89 1211.8 L1975.3 1211.8 L1974.72 1211.8 L1974.13 1211.8 L1973.54 1211.8 L1972.96 1211.8 L1972.37 1211.8 L1971.78 1211.8 L1971.2 1211.8 L1970.61 1211.8 L1970.03 1211.8 L1969.44 1211.8 L1968.85 1211.8 L1968.27 1211.8 L1967.68 1211.8 L1967.09 1211.8 L1966.51 1211.8 L1965.92 1211.8 L1965.33 1211.8 L1964.75 1211.8 L1964.16 1211.8 L1963.58 1211.8 L1962.99 1211.8 L1962.4 1211.8 L1961.82 1211.8 L1961.23 1211.8 L1960.64 1211.8 L1960.06 1211.8 L1959.47 1211.8 L1958.88 1211.8 L1958.3 1211.8 L1957.71 1211.8 L1957.12 1211.8 L1956.54 1211.8 L1955.95 1211.8 L1955.37 1211.8 L1954.78 1211.8 L1954.19 1211.8 L1953.61 1211.8 L1953.02 1211.8 L1952.43 1211.8 L1951.85 1211.8 L1951.26 1211.8 L1950.67 1211.8 L1950.09 1211.8 L1949.5 1211.8 L1948.91 1211.8 L1948.33 1211.8 L1947.74 1211.8 L1947.16 1211.8 L1946.57 1211.8 L1945.98 1211.8 L1945.4 1211.8 L1944.81 1211.8 L1944.22 1211.8 L1943.64 1211.8 L1943.05 1211.8 L1942.46 1211.8 L1941.88 1211.8 L1941.29 1211.8 L1940.71 1211.8 L1940.12 1211.8 L1939.53 1211.8 L1938.95 1211.8 L1938.36 1211.8 L1937.77 1211.8 L1937.19 1211.8 L1936.6 1211.8 L1936.01 1211.8 L1935.43 1211.8 L1934.84 1211.8 L1934.25 1211.8 L1933.67 1211.8 L1933.08 1211.8 L1932.5 1211.8 L1931.91 1211.8 L1931.32 1211.8 L1930.74 1211.8 L1930.15 1211.8 L1929.56 1211.8 L1928.98 1211.8 L1928.39 1211.8 L1927.8 1211.8 L1927.22 1211.8 L1926.63 1211.8 L1926.04 1211.8 L1925.46 1211.8 L1924.87 1211.8 L1924.29 1211.8 L1923.7 1211.8 L1923.11 1211.8 L1922.53 1211.8 L1921.94 1211.8 L1921.35 1211.8 L1920.77 1211.8 L1920.18 1211.8 L1919.59 1211.8 L1919.01 1211.8 L1918.42 1211.8 L1917.83 1211.8 L1917.25 1211.8 L1916.66 1211.8 L1916.08 1211.8 L1915.49 1211.8 L1914.9 1211.8 L1914.32 1211.8 L1913.73 1211.8 L1913.14 1211.8 L1912.56 1211.8 L1911.97 1211.8 L1911.38 1211.8 L1910.8 1211.8 L1910.21 1211.8 L1909.63 1211.8 L1909.04 1211.8 L1908.45 1211.8 L1907.87 1211.8 L1907.28 1211.8 L1906.69 1211.8 L1906.11 1211.8 L1905.52 1211.8 L1904.93 1211.8 L1904.35 1211.8 L1903.76 1211.8 L1903.17 1211.8 L1902.59 1211.8 L1902 1211.8 L1901.42 1211.8 L1900.83 1211.8 L1900.24 1211.8 L1899.66 1211.8 L1899.07 1211.8 L1898.48 1211.8 L1897.9 1211.8 L1897.31 1211.8 L1896.72 1211.8 L1896.14 1211.8 L1895.55 1211.8 L1894.96 1211.8 L1894.38 1211.8 L1893.79 1211.8 L1893.21 1211.8 L1892.62 1211.8 L1892.03 1211.8 L1891.45 1211.8 L1890.86 1211.8 L1890.27 1211.8 L1889.69 1211.8 L1889.1 1211.8 L1888.51 1211.8 L1887.93 1211.8 L1887.34 1211.8 L1886.76 1211.8 L1886.17 1211.8 L1885.58 1211.8 L1885 1211.8 L1884.41 1211.8 L1883.82 1211.8 L1883.24 1211.8 L1882.65 1211.8 L1882.06 1211.8 L1881.48 1211.8 L1880.89 1211.8 L1880.3 1211.8 L1879.72 1211.8 L1879.13 1211.8 L1878.55 1211.8 L1877.96 1211.8 L1877.37 1211.8 L1876.79 1211.8 L1876.2 1211.8 L1875.61 1211.8 L1875.03 1211.8 L1874.44 1211.8 L1873.85 1211.8 L1873.27 1211.8 L1872.68 1211.8 L1872.09 1211.8 L1871.51 1211.8 L1870.92 1211.8 L1870.34 1211.8 L1869.75 1211.8 L1869.16 1211.8 L1868.58 1211.8 L1867.99 1211.8 L1867.4 1211.8 L1866.82 1211.8 L1866.23 1211.8 L1865.64 1211.8 L1865.06 1211.8 L1864.47 1211.8 L1863.88 1211.8 L1863.3 1211.8 L1862.71 1211.8 L1862.13 1211.8 L1861.54 1211.8 L1860.95 1211.8 L1860.37 1211.8 L1859.78 1211.8 L1859.19 1211.8 L1858.61 1211.8 L1858.02 1211.8 L1857.43 1211.8 L1856.85 1211.8 L1856.26 1211.8 L1855.68 1211.8 L1855.09 1211.8 L1854.5 1211.8 L1853.92 1211.8 L1853.33 1211.8 L1852.74 1211.8 L1852.16 1211.8 L1851.57 1211.8 L1850.98 1211.8 L1850.4 1211.8 L1849.81 1211.8 L1849.22 1211.8 L1848.64 1211.8 L1848.05 1211.8 L1847.47 1211.8 L1846.88 1211.8 L1846.29 1211.8 L1845.71 1211.8 L1845.12 1211.8 L1844.53 1211.8 L1843.95 1211.8 L1843.36 1211.8 L1842.77 1211.8 L1842.19 1211.8 L1841.6 1211.8 L1841.01 1211.8 L1840.43 1211.8 L1839.84 1211.8 L1839.26 1211.8 L1838.67 1211.8 L1838.08 1211.8 L1837.5 1211.8 L1836.91 1211.8 L1836.32 1211.8 L1835.74 1211.8 L1835.15 1211.8 L1834.56 1211.8 L1833.98 1211.8 L1833.39 1211.8 L1832.81 1211.8 L1832.22 1211.8 L1831.63 1211.8 L1831.05 1211.8 L1830.46 1211.8 L1829.87 1211.8 L1829.29 1211.8 L1828.7 1211.8 L1828.11 1211.8 L1827.53 1211.8 L1826.94 1211.8 L1826.35 1211.8 L1825.77 1211.8 L1825.18 1211.8 L1824.6 1211.8 L1824.01 1211.8 L1823.42 1211.8 L1822.84 1211.8 L1822.25 1211.8 L1821.66 1211.8 L1821.08 1211.8 L1820.49 1211.8 L1819.9 1211.8 L1819.32 1211.8 L1818.73 1211.8 L1818.14 1211.8 L1817.56 1211.8 L1816.97 1211.8 L1816.39 1211.8 L1815.8 1211.8 L1815.21 1211.8 L1814.63 1211.8 L1814.04 1211.8 L1813.45 1211.8 L1812.87 1211.8 L1812.28 1211.8 L1811.69 1211.8 L1811.11 1211.8 L1810.52 1211.8 L1809.94 1211.8 L1809.35 1211.8 L1808.76 1211.8 L1808.18 1211.8 L1807.59 1211.8 L1807 1211.8 L1806.42 1211.8 L1805.83 1211.8 L1805.24 1211.8 L1804.66 1211.8 L1804.07 1211.8 L1803.48 1211.8 L1802.9 1211.8 L1802.31 1211.8 L1801.73 1211.8 L1801.14 1211.8 L1800.55 1211.8 L1799.97 1211.8 L1799.38 1211.8 L1798.79 1211.8 L1798.21 1211.8 L1797.62 1211.8 L1797.03 1211.8 L1796.45 1211.8 L1795.86 1211.8 L1795.27 1211.8 L1794.69 1211.8 L1794.1 1211.8 L1793.52 1211.8 L1792.93 1211.8 L1792.34 1211.8 L1791.76 1211.8 L1791.17 1211.8 L1790.58 1211.8 L1790 1211.8 L1789.41 1211.8 L1788.82 1211.8 L1788.24 1211.8 L1787.65 1211.8 L1787.06 1211.8 L1786.48 1211.8 L1785.89 1211.8 L1785.31 1211.8 L1784.72 1211.8 L1784.13 1211.8 L1783.55 1211.8 L1782.96 1211.8 L1782.37 1211.8 L1781.79 1211.8 L1781.2 1211.8 L1780.61 1211.8 L1780.03 1211.8 L1779.44 1211.8 L1778.86 1211.8 L1778.27 1211.8 L1777.68 1211.8 L1777.1 1211.8 L1776.51 1211.8 L1775.92 1211.8 L1775.34 1211.8 L1774.75 1211.8 L1774.16 1211.8 L1773.58 1211.8 L1772.99 1211.8 L1772.4 1211.8 L1771.82 1211.8 L1771.23 1211.8 L1770.65 1211.8 L1770.06 1211.8 L1769.47 1211.8 L1768.89 1211.8 L1768.3 1211.8 L1767.71 1211.8 L1767.13 1211.8 L1766.54 1211.8 L1765.95 1211.8 L1765.37 1211.8 L1764.78 1211.8 L1764.19 1211.8 L1763.61 1211.8 L1763.02 1211.8 L1762.44 1211.8 L1761.85 1211.8 L1761.26 1211.8 L1760.68 1211.8 L1760.09 1211.8 L1759.5 1211.8 L1758.92 1211.8 L1758.33 1211.8 L1757.74 1211.8 L1757.16 1211.8 L1756.57 1211.8 L1755.99 1211.8 L1755.4 1211.8 L1754.81 1211.8 L1754.23 1211.8 L1753.64 1211.8 L1753.05 1211.8 L1752.47 1211.8 L1751.88 1211.8 L1751.29 1211.8 L1750.71 1211.8 L1750.12 1211.8 L1749.53 1211.8 L1748.95 1211.8 L1748.36 1211.8 L1747.78 1211.8 L1747.19 1211.8 L1746.6 1211.8 L1746.02 1211.8 L1745.43 1211.8 L1744.84 1211.8 L1744.26 1211.8 L1743.67 1211.8 L1743.08 1211.8 L1742.5 1211.8 L1741.91 1211.8 L1741.32 1211.8 L1740.74 1211.8 L1740.15 1211.8 L1739.57 1211.8 L1738.98 1211.8 L1738.39 1211.8 L1737.81 1211.8 L1737.22 1211.8 L1736.63 1211.8 L1736.05 1211.8 L1735.46 1211.8 L1734.87 1211.8 L1734.29 1211.8 L1733.7 1211.8 L1733.11 1211.8 L1732.53 1211.8 L1731.94 1211.8 L1731.36 1211.8 L1730.77 1211.8 L1730.18 1211.8 L1729.6 1211.8 L1729.01 1211.8 L1728.42 1211.8 L1727.84 1211.8 L1727.25 1211.8 L1726.66 1211.8 L1726.08 1211.8 L1725.49 1211.8 L1724.91 1211.8 L1724.32 1211.8 L1723.73 1211.8 L1723.15 1211.8 L1722.56 1211.8 L1721.97 1211.8 L1721.39 1211.8 L1720.8 1211.8 L1720.21 1211.8 L1719.63 1211.8 L1719.04 1211.8 L1718.45 1211.8 L1717.87 1211.8 L1717.28 1211.8 L1716.7 1211.8 L1716.11 1211.8 L1715.52 1211.8 L1714.94 1211.8 L1714.35 1211.8 L1713.76 1211.8 L1713.18 1211.8 L1712.59 1211.8 L1712 1211.8 L1711.42 1211.8 L1710.83 1211.8 L1710.24 1211.8 L1709.66 1211.8 L1709.07 1211.8 L1708.49 1211.8 L1707.9 1211.8 L1707.31 1211.8 L1706.73 1211.8 L1706.14 1211.8 L1705.55 1211.8 L1704.97 1211.8 L1704.38 1211.8 L1703.79 1211.8 L1703.21 1211.8 L1702.62 1211.8 L1702.04 1211.8 L1701.45 1211.8 L1700.86 1211.8 L1700.28 1211.8 L1699.69 1211.8 L1699.1 1211.8 L1698.52 1211.8 L1697.93 1211.8 L1697.34 1211.8 L1696.76 1211.8 L1696.17 1211.8 L1695.58 1211.8 L1695 1211.8 L1694.41 1211.8 L1693.83 1211.8 L1693.24 1211.8 L1692.65 1211.8 L1692.07 1211.8 L1691.48 1211.8 L1690.89 1211.8 L1690.31 1211.8 L1689.72 1211.8 L1689.13 1211.8 L1688.55 1211.8 L1687.96 1211.8 L1687.37 1211.8 L1686.79 1211.8 L1686.2 1211.8 L1685.62 1211.8 L1685.03 1211.8 L1684.44 1211.8 L1683.86 1211.8 L1683.27 1211.8 L1682.68 1211.8 L1682.1 1211.8 L1681.51 1211.8 L1680.92 1211.8 L1680.34 1211.8 L1679.75 1211.8 L1679.17 1211.8 L1678.58 1211.8 L1677.99 1211.8 L1677.41 1211.8 L1676.82 1211.8 L1676.23 1211.8 L1675.65 1211.8 L1675.06 1211.8 L1674.47 1211.8 L1673.89 1211.8 L1673.3 1211.8 L1672.71 1211.8 L1672.13 1211.8 L1671.54 1211.8 L1670.96 1211.8 L1670.37 1211.8 L1669.78 1211.8 L1669.2 1211.8 L1668.61 1211.8 L1668.02 1211.8 L1667.44 1211.8 L1666.85 1211.8 L1666.26 1211.8 L1665.68 1211.8 L1665.09 1211.8 L1664.5 1211.8 L1663.92 1211.8 L1663.33 1211.8 L1662.75 1211.8 L1662.16 1211.8 L1661.57 1211.8 L1660.99 1211.8 L1660.4 1211.8 L1659.81 1211.8 L1659.23 1211.8 L1658.64 1211.8 L1658.05 1211.8 L1657.47 1211.8 L1656.88 1211.8 L1656.29 1211.8 L1655.71 1211.8 L1655.12 1211.8 L1654.54 1211.8 L1653.95 1211.8 L1653.36 1211.8 L1652.78 1211.8 L1652.19 1211.8 L1651.6 1211.8 L1651.02 1211.8 L1650.43 1211.8 L1649.84 1211.8 L1649.26 1211.8 L1648.67 1211.8 L1648.09 1211.8 L1647.5 1211.8 L1646.91 1211.8 L1646.33 1211.8 L1645.74 1211.8 L1645.15 1211.8 L1644.57 1211.8 L1643.98 1211.8 L1643.39 1211.8 L1642.81 1211.8 L1642.22 1211.8 L1641.63 1211.8 L1641.05 1211.8 L1640.46 1211.8 L1639.88 1211.8 L1639.29 1211.8 L1638.7 1211.8 L1638.12 1211.8 L1637.53 1211.8 L1636.94 1211.8 L1636.36 1211.8 L1635.77 1211.8 L1635.18 1211.8 L1634.6 1211.8 L1634.01 1211.8 L1633.42 1211.8 L1632.84 1211.8 L1632.25 1211.8 L1631.67 1211.8 L1631.08 1211.8 L1630.49 1211.8 L1629.91 1211.8 L1629.32 1211.8 L1628.73 1211.8 L1628.15 1211.8 L1627.56 1211.8 L1626.97 1211.8 L1626.39 1211.8 L1625.8 1211.8 L1625.22 1211.8 L1624.63 1211.8 L1624.04 1211.8 L1623.46 1211.8 L1622.87 1211.8 L1622.28 1211.8 L1621.7 1211.8 L1621.11 1211.8 L1620.52 1211.8 L1619.94 1211.8 L1619.35 1211.8 L1618.76 1211.8 L1618.18 1211.8 L1617.59 1211.8 L1617.01 1211.8 L1616.42 1211.8 L1615.83 1211.8 L1615.25 1211.8 L1614.66 1211.8 L1614.07 1211.8 L1613.49 1211.8 L1612.9 1211.8 L1612.31 1211.8 L1611.73 1211.8 L1611.14 1211.8 L1610.55 1211.8 L1609.97 1211.8 L1609.38 1211.8 L1608.8 1211.8 L1608.21 1211.8 L1607.62 1211.8 L1607.04 1211.8 L1606.45 1211.8 L1605.86 1211.8 L1605.28 1211.8 L1604.69 1211.8 L1604.1 1211.8 L1603.52 1211.8 L1602.93 1211.8 L1602.34 1211.8 L1601.76 1211.8 L1601.17 1211.8 L1600.59 1211.8 L1600 1211.8 L1599.41 1211.8 L1598.83 1211.8 L1598.24 1211.8 L1597.65 1211.8 L1597.07 1211.8 L1596.48 1211.8 L1595.89 1211.8 L1595.31 1211.8 L1594.72 1211.8 L1594.14 1211.8 L1593.55 1211.8 L1592.96 1211.8 L1592.38 1211.8 L1591.79 1211.8 L1591.2 1211.8 L1590.62 1211.8 L1590.03 1211.8 L1589.44 1211.8 L1588.86 1211.8 L1588.27 1211.8 L1587.68 1211.8 L1587.1 1211.8 L1586.51 1211.8 L1585.93 1211.8 L1585.34 1211.8 L1584.75 1211.8 L1584.17 1211.8 L1583.58 1211.8 L1582.99 1211.8 L1582.41 1211.8 L1581.82 1211.8 L1581.23 1211.8 L1580.65 1211.8 L1580.06 1211.8 L1579.47 1211.8 L1578.89 1211.8 L1578.3 1211.8 L1577.72 1211.8 L1577.13 1211.8 L1576.54 1211.8 L1575.96 1211.8 L1575.37 1211.8 L1574.78 1211.8 L1574.2 1211.8 L1573.61 1211.8 L1573.02 1211.8 L1572.44 1211.8 L1571.85 1211.8 L1571.27 1211.8 L1570.68 1211.8 L1570.09 1211.8 L1569.51 1211.8 L1568.92 1211.8 L1568.33 1211.8 L1567.75 1211.8 L1567.16 1211.8 L1566.57 1211.8 L1565.99 1211.8 L1565.4 1211.8 L1564.81 1211.8 L1564.23 1211.8 L1563.64 1211.8 L1563.06 1211.8 L1562.47 1211.8 L1561.88 1211.8 L1561.3 1211.8 L1560.71 1211.8 L1560.12 1211.8 L1559.54 1211.8 L1558.95 1211.8 L1558.36 1211.8 L1557.78 1211.8 L1557.19 1211.8 L1556.6 1211.8 L1556.02 1211.8 L1555.43 1211.8 L1554.85 1211.8 L1554.26 1211.8 L1553.67 1211.8 L1553.09 1211.8 L1552.5 1211.8 L1551.91 1211.8 L1551.33 1211.8 L1550.74 1211.8 L1550.15 1211.8 L1549.57 1211.8 L1548.98 1211.8 L1548.4 1211.8 L1547.81 1211.8 L1547.22 1211.8 L1546.64 1211.8 L1546.05 1211.8 L1545.46 1211.8 L1544.88 1211.8 L1544.29 1211.8 L1543.7 1211.8 L1543.12 1211.8 L1542.53 1211.8 L1541.94 1211.8 L1541.36 1211.8 L1540.77 1211.8 L1540.19 1211.8 L1539.6 1211.8 L1539.01 1211.8 L1538.43 1211.8 L1537.84 1211.8 L1537.25 1211.8 L1536.67 1211.8 L1536.08 1211.8 L1535.49 1211.8 L1534.91 1211.8 L1534.32 1211.8 L1533.73 1211.8 L1533.15 1211.8 L1532.56 1211.8 L1531.98 1211.8 L1531.39 1211.8 L1530.8 1211.8 L1530.22 1211.8 L1529.63 1211.8 L1529.04 1211.8 L1528.46 1211.8 L1527.87 1211.8 L1527.28 1211.8 L1526.7 1211.8 L1526.11 1211.8 L1525.52 1211.8 L1524.94 1211.8 L1524.35 1211.8 L1523.77 1211.8 L1523.18 1211.8 L1522.59 1211.8 L1522.01 1211.8 L1521.42 1211.8 L1520.83 1211.8 L1520.25 1211.8 L1519.66 1211.8 L1519.07 1211.8 L1518.49 1211.8 L1517.9 1211.8 L1517.32 1211.8 L1516.73 1211.8 L1516.14 1211.8 L1515.56 1211.8 L1514.97 1211.8 L1514.38 1211.8 L1513.8 1211.8 L1513.21 1211.8 L1512.62 1211.8 L1512.04 1211.8 L1511.45 1211.8 L1510.86 1211.8 L1510.28 1211.8 L1509.69 1211.8 L1509.11 1211.8 L1508.52 1211.8 L1507.93 1211.8 L1507.35 1211.8 L1506.76 1211.8 L1506.17 1211.8 L1505.59 1211.8 L1505 1211.8 L1504.41 1211.8 L1503.83 1211.8 L1503.24 1211.8 L1502.65 1211.8 L1502.07 1211.8 L1501.48 1211.8 L1500.9 1211.8 L1500.31 1211.8 L1499.72 1211.8 L1499.14 1211.8 L1498.55 1211.8 L1497.96 1211.8 L1497.38 1211.8 L1496.79 1211.8 L1496.2 1211.8 L1495.62 1211.8 L1495.03 1211.8 L1494.45 1211.8 L1493.86 1211.8 L1493.27 1211.8 L1492.69 1211.8 L1492.1 1211.8 L1491.51 1211.8 L1490.93 1211.8 L1490.34 1211.8 L1489.75 1211.8 L1489.17 1211.8 L1488.58 1211.8 L1487.99 1211.8 L1487.41 1211.8 L1486.82 1211.8 L1486.24 1211.8 L1485.65 1211.8 L1485.06 1211.8 L1484.48 1211.8 L1483.89 1211.8 L1483.3 1211.8 L1482.72 1211.8 L1482.13 1211.8 L1481.54 1211.8 L1480.96 1211.8 L1480.37 1211.8 L1479.78 1211.8 L1479.2 1211.8 L1478.61 1211.8 L1478.03 1211.8 L1477.44 1211.8 L1476.85 1211.8 L1476.27 1211.8 L1475.68 1211.8 L1475.09 1211.8 L1474.51 1211.8 L1473.92 1211.8 L1473.33 1211.8 L1472.75 1211.8 L1472.16 1211.8 L1471.57 1211.8 L1470.99 1211.8 L1470.4 1211.8 L1469.82 1211.8 L1469.23 1211.8 L1468.64 1211.8 L1468.06 1211.8 L1467.47 1211.8 L1466.88 1211.8 L1466.3 1211.8 L1465.71 1211.8 L1465.12 1211.8 L1464.54 1211.8 L1463.95 1211.8 L1463.37 1211.8 L1462.78 1211.8 L1462.19 1211.8 L1461.61 1211.8 L1461.02 1211.8 L1460.43 1211.8 L1459.85 1211.8 L1459.26 1211.8 L1458.67 1211.8 L1458.09 1211.8 L1457.5 1211.8 L1456.91 1211.8 L1456.33 1211.8 L1455.74 1211.8 L1455.16 1211.8 L1454.57 1211.8 L1453.98 1211.8 L1453.4 1211.8 L1452.81 1211.8 L1452.22 1211.8 L1451.64 1211.8 L1451.05 1211.8 L1450.46 1211.8 L1449.88 1211.8 L1449.29 1211.8 L1448.7 1211.8 L1448.12 1211.8 L1447.53 1211.8 L1446.95 1211.8 L1446.36 1211.8 L1445.77 1211.8 L1445.19 1211.8 L1444.6 1211.8 L1444.01 1211.8 L1443.43 1211.8 L1442.84 1211.8 L1442.25 1211.8 L1441.67 1211.8 L1441.08 1211.8 L1440.5 1211.8 L1439.91 1211.8 L1439.32 1211.8 L1438.74 1211.8 L1438.15 1211.8 L1437.56 1211.8 L1436.98 1211.8 L1436.39 1211.8 L1435.8 1211.8 L1435.22 1211.8 L1434.63 1211.8 L1434.04 1211.8 L1433.46 1211.8 L1432.87 1211.8 L1432.29 1211.8 L1431.7 1211.8 L1431.11 1211.8 L1430.53 1211.8 L1429.94 1211.8 L1429.35 1211.8 L1428.77 1211.8 L1428.18 1211.8 L1427.59 1211.8 L1427.01 1211.8 L1426.42 1211.8 L1425.83 1211.8 L1425.25 1211.8 L1424.66 1211.8 L1424.08 1211.8 L1423.49 1211.8 L1422.9 1211.8 L1422.32 1211.8 L1421.73 1211.8 L1421.14 1211.8 L1420.56 1211.8 L1419.97 1211.8 L1419.38 1211.8 L1418.8 1211.8 L1418.21 1211.8 L1417.63 1211.8 L1417.04 1211.8 L1416.45 1211.8 L1415.87 1211.8 L1415.28 1211.8 L1414.69 1211.8 L1414.11 1211.8 L1413.52 1211.8 L1412.93 1211.8 L1412.35 1211.8 L1411.76 1211.8 L1411.17 1211.8 L1410.59 1211.8 L1410 1211.8 L1409.42 1211.8 L1408.83 1211.8 L1408.24 1211.8 L1407.66 1211.8 L1407.07 1211.8 L1406.48 1211.8 L1405.9 1211.8 L1405.31 1211.8 L1404.72 1211.8 L1404.14 1211.8 L1403.55 1211.8 L1402.96 1211.8 L1402.38 1211.8 L1401.79 1211.8 L1401.21 1211.8 L1400.62 1211.8 L1400.03 1211.8 L1399.45 1211.8 L1398.86 1211.8 L1398.27 1211.8 L1397.69 1211.8 L1397.1 1211.8 L1396.51 1211.8 L1395.93 1211.8 L1395.34 1211.8 L1394.75 1211.8 L1394.17 1211.8 L1393.58 1211.8 L1393 1211.8 L1392.41 1211.8 L1391.82 1211.8 L1391.24 1211.8 L1390.65 1211.8 L1390.06 1211.8 L1389.48 1211.8 L1388.89 1211.8 L1388.3 1211.8 L1387.72 1211.8 L1387.13 1211.8 L1386.55 1211.8 L1385.96 1211.8 L1385.37 1211.8 L1384.79 1211.8 L1384.2 1211.8 L1383.61 1211.8 L1383.03 1211.8 L1382.44 1211.8 L1381.85 1211.8 L1381.27 1211.8 L1380.68 1211.8 L1380.09 1211.8 L1379.51 1211.8 L1378.92 1211.8 L1378.34 1211.8 L1377.75 1211.8 L1377.16 1211.8 L1376.58 1211.8 L1375.99 1211.8 L1375.4 1211.8 L1374.82 1211.8 L1374.23 1211.8 L1373.64 1211.8 L1373.06 1211.8 L1372.47 1211.8 L1371.88 1211.8 L1371.3 1211.8 L1370.71 1211.8 L1370.13 1211.8 L1369.54 1211.8 L1368.95 1211.8 L1368.37 1211.8 L1367.78 1211.8 L1367.19 1211.8 L1366.61 1211.8 L1366.02 1211.8 L1365.43 1211.8 L1364.85 1211.8 L1364.26 1211.8 L1363.68 1211.8 L1363.09 1211.8 L1362.5 1211.8 L1361.92 1211.8 L1361.33 1211.8 L1360.74 1211.8 L1360.16 1211.8 L1359.57 1211.8 L1358.98 1211.8 L1358.4 1211.8 L1357.81 1211.8 L1357.22 1211.8 L1356.64 1211.8 L1356.05 1211.8 L1355.47 1211.8 L1354.88 1211.8 L1354.29 1211.8 L1353.71 1211.8 L1353.12 1211.8 L1352.53 1211.8 L1351.95 1211.8 L1351.36 1211.8 L1350.77 1211.8 L1350.19 1211.8 L1349.6 1211.8 L1349.01 1211.8 L1348.43 1211.8 L1347.84 1211.8 L1347.26 1211.8 L1346.67 1211.8 L1346.08 1211.8 L1345.5 1211.8 L1344.91 1211.8 L1344.32 1211.8 L1343.74 1211.8 L1343.15 1211.8 L1342.56 1211.8 L1341.98 1211.8 L1341.39 1211.8 L1340.8 1211.8 L1340.22 1211.8 L1339.63 1211.8 L1339.05 1211.8 L1338.46 1211.8 L1337.87 1211.8 L1337.29 1211.8 L1336.7 1211.8 L1336.11 1211.8 L1335.53 1211.8 L1334.94 1211.8 L1334.35 1211.8 L1333.77 1211.8 L1333.18 1211.8 L1332.6 1211.8 L1332.01 1211.8 L1331.42 1211.8 L1330.84 1211.8 L1330.25 1211.8 L1329.66 1211.8 L1329.08 1211.8 L1328.49 1211.8 L1327.9 1211.8 L1327.32 1211.8 L1326.73 1211.8 L1326.14 1211.8 L1325.56 1211.8 L1324.97 1211.8 L1324.39 1211.8 L1323.8 1211.8 L1323.21 1211.8 L1322.63 1211.8 L1322.04 1211.8 L1321.45 1211.8 L1320.87 1211.8 L1320.28 1211.8 L1319.69 1211.8 L1319.11 1211.8 L1318.52 1211.8 L1317.93 1211.8 L1317.35 1211.8 L1316.76 1211.8 L1316.18 1211.8 L1315.59 1211.8 L1315 1211.8 L1314.42 1211.8 L1313.83 1211.8 L1313.24 1211.8 L1312.66 1211.8 L1312.07 1211.8 L1311.48 1211.8 L1310.9 1211.8 L1310.31 1211.8 L1309.73 1211.8 L1309.14 1211.8 L1308.55 1211.8 L1307.97 1211.8 L1307.38 1211.8 L1306.79 1211.8 L1306.21 1211.8 L1305.62 1211.8 L1305.03 1211.8 L1304.45 1211.8 L1303.86 1211.8 L1303.27 1211.8 L1302.69 1211.8 L1302.1 1211.8 L1301.52 1211.8 L1300.93 1211.8 L1300.34 1211.8 L1299.76 1211.8 L1299.17 1211.8 L1298.58 1211.8 L1298 1211.8 L1297.41 1211.8 L1296.82 1211.8 L1296.24 1211.8 L1295.65 1211.8 L1295.06 1211.8 L1294.48 1211.8 L1293.89 1211.8 L1293.31 1211.8 L1292.72 1211.8 L1292.13 1211.8 L1291.55 1211.8 L1290.96 1211.8 L1290.37 1211.8 L1289.79 1211.8 L1289.2 1211.8 L1288.61 1211.8 L1288.03 1211.8 L1287.44 1211.8 L1286.86 1211.8 L1286.27 1211.8 L1285.68 1211.8 L1285.1 1211.8 L1284.51 1211.8 L1283.92 1211.8 L1283.34 1211.8 L1282.75 1211.8 L1282.16 1211.8 L1281.58 1211.8 L1280.99 1211.8 L1280.4 1211.8 L1279.82 1211.8 L1279.23 1211.8 L1278.65 1211.8 L1278.06 1211.8 L1277.47 1211.8 L1276.89 1211.8 L1276.3 1211.8 L1275.71 1211.8 L1275.13 1211.8 L1274.54 1211.8 L1273.95 1211.8 L1273.37 1211.8 L1272.78 1211.8 L1272.19 1211.8 L1271.61 1211.8 L1271.02 1211.8 L1270.44 1211.8 L1269.85 1211.8 L1269.26 1211.8 L1268.68 1211.8 L1268.09 1211.8 L1267.5 1211.8 L1266.92 1211.8 L1266.33 1211.8 L1265.74 1211.8 L1265.16 1211.8 L1264.57 1211.8 L1263.98 1211.8 L1263.4 1211.8 L1262.81 1211.8 L1262.23 1211.8 L1261.64 1211.8 L1261.05 1211.8 L1260.47 1211.8 L1259.88 1211.8 L1259.29 1211.8 L1258.71 1211.8 L1258.12 1211.8 L1257.53 1211.8 L1256.95 1211.8 L1256.36 1211.8 L1255.78 1211.8 L1255.19 1211.8 L1254.6 1211.8 L1254.02 1211.8 L1253.43 1211.8 L1252.84 1211.8 L1252.26 1211.8 L1251.67 1211.8 L1251.08 1211.8 L1250.5 1211.8 L1249.91 1211.8 L1249.32 1211.8 L1248.74 1211.8 L1248.15 1211.8 L1247.57 1211.8 L1246.98 1211.8 L1246.39 1211.8 L1245.81 1211.8 L1245.22 1211.8 L1244.63 1211.8 L1244.05 1211.8 L1243.46 1211.8 L1242.87 1211.8 L1242.29 1211.8 L1241.7 1211.8 L1241.11 1211.8 L1240.53 1211.8 L1239.94 1211.8 L1239.36 1211.8 L1238.77 1211.8 L1238.18 1211.8 L1237.6 1211.8 L1237.01 1211.8 L1236.42 1211.8 L1235.84 1211.8 L1235.25 1211.8 L1234.66 1211.8 L1234.08 1211.8 L1233.49 1211.8 L1232.91 1211.8 L1232.32 1211.8 L1231.73 1211.8 L1231.15 1211.8 L1230.56 1211.8 L1229.97 1211.8 L1229.39 1211.8 L1228.8 1211.8 L1228.21 1211.8 L1227.63 1211.8 L1227.04 1211.8 L1226.45 1211.8 L1225.87 1211.8 L1225.28 1211.8 L1224.7 1211.8 L1224.11 1211.8 L1223.52 1211.8 L1222.94 1211.8 L1222.35 1211.8 L1221.76 1211.8 L1221.18 1211.8 L1220.59 1211.8 L1220 1211.8 L1219.42 1211.8 L1218.83 1211.8 L1218.24 1211.8 L1217.66 1211.8 L1217.07 1211.8 L1216.49 1211.8 L1215.9 1211.8 L1215.31 1211.8 L1214.73 1211.8 L1214.14 1211.8 L1213.55 1211.8 L1212.97 1211.8 L1212.38 1211.8 L1211.79 1211.8 L1211.21 1211.8 L1210.62 1211.8 L1210.03 1211.8 L1209.45 1211.8 L1208.86 1211.8 L1208.28 1211.8 L1207.69 1211.8 L1207.1 1211.8 L1206.52 1211.8 L1205.93 1211.8 L1205.34 1211.8 L1204.76 1211.8 L1204.17 1211.8 L1203.58 1211.8 L1203 1211.8 L1202.41 1211.8 L1201.83 1211.8 L1201.24 1211.8 L1200.65 1211.8 L1200.07 1211.8 L1199.48 1211.8 L1198.89 1211.8 L1198.31 1211.8 L1197.72 1211.8 L1197.13 1211.8 L1196.55 1211.8 L1195.96 1211.8 L1195.37 1211.8 L1194.79 1211.8 L1194.2 1211.8 L1193.62 1211.8 L1193.03 1211.8 L1192.44 1211.8 L1191.86 1211.8 L1191.27 1211.8 L1190.68 1211.8 L1190.1 1211.8 L1189.51 1211.8 L1188.92 1211.8 L1188.34 1211.8 L1187.75 1211.8 L1187.16 1211.8 L1186.58 1211.8 L1185.99 1211.8 L1185.41 1211.8 L1184.82 1211.8 L1184.23 1211.8 L1183.65 1211.8 L1183.06 1211.8 L1182.47 1211.8 L1181.89 1211.8 L1181.3 1211.8 L1180.71 1211.8 L1180.13 1211.8 L1179.54 1211.8 L1178.96 1211.8 L1178.37 1211.8 L1177.78 1211.8 L1177.2 1211.8 L1176.61 1211.8 L1176.02 1211.8 L1175.44 1211.8 L1174.85 1211.8 L1174.26 1211.8 L1173.68 1211.8 L1173.09 1211.8 L1172.5 1211.8 L1171.92 1211.8 L1171.33 1211.8 L1170.75 1211.8 L1170.16 1211.8 L1169.57 1211.8 L1168.99 1211.8 L1168.4 1211.8 L1167.81 1211.8 L1167.23 1211.8 L1166.64 1211.8 L1166.05 1211.8 L1165.47 1211.8 L1164.88 1211.8 L1164.29 1211.8 L1163.71 1211.8 L1163.12 1211.8 L1162.54 1211.8 L1161.95 1211.8 L1161.36 1211.8 L1160.78 1211.8 L1160.19 1211.8 L1159.6 1211.8 L1159.02 1211.8 L1158.43 1211.8 L1157.84 1211.8 L1157.26 1211.8 L1156.67 1211.8 L1156.09 1211.8 L1155.5 1211.8 L1154.91 1211.8 L1154.33 1211.8 L1153.74 1211.8 L1153.15 1211.8 L1152.57 1211.8 L1151.98 1211.8 L1151.39 1211.8 L1150.81 1211.8 L1150.22 1211.8 L1149.63 1211.8 L1149.05 1211.8 L1148.46 1211.8 L1147.88 1211.8 L1147.29 1211.8 L1146.7 1211.8 L1146.12 1211.8 L1145.53 1211.8 L1144.94 1211.8 L1144.36 1211.8 L1143.77 1211.8 L1143.18 1211.8 L1142.6 1211.8 L1142.01 1211.8 L1141.42 1211.8 L1140.84 1211.8 L1140.25 1211.8 L1139.67 1211.8 L1139.08 1211.8 L1138.49 1211.8 L1137.91 1211.8 L1137.32 1211.8 L1136.73 1211.8 L1136.15 1211.8 L1135.56 1211.8 L1134.97 1211.8 L1134.39 1211.8 L1133.8 1211.8 L1133.21 1211.8 L1132.63 1211.8 L1132.04 1211.8 L1131.46 1211.8 L1130.87 1211.8 L1130.28 1211.8 L1129.7 1211.8 L1129.11 1211.8 L1128.52 1211.8 L1127.94 1211.8 L1127.35 1211.8 L1126.76 1211.8 L1126.18 1211.8 L1125.59 1211.8 L1125.01 1211.8 L1124.42 1211.8 L1123.83 1211.8 L1123.25 1211.8 L1122.66 1211.8 L1122.07 1211.8 L1121.49 1211.8 L1120.9 1211.8 L1120.31 1211.8 L1119.73 1211.8 L1119.14 1211.8 L1118.55 1211.8 L1117.97 1211.8 L1117.38 1211.8 L1116.8 1211.8 L1116.21 1211.8 L1115.62 1211.8 L1115.04 1211.8 L1114.45 1211.8 L1113.86 1211.8 L1113.28 1211.8 L1112.69 1211.8 L1112.1 1211.8 L1111.52 1211.8 L1110.93 1211.8 L1110.34 1211.8 L1109.76 1211.8 L1109.17 1211.8 L1108.59 1211.8 L1108 1211.8 L1107.41 1211.8 L1106.83 1211.8 L1106.24 1211.8 L1105.65 1211.8 L1105.07 1211.8 L1104.48 1211.8 L1103.89 1211.8 L1103.31 1211.8 L1102.72 1211.8 L1102.14 1211.8 L1101.55 1211.8 L1100.96 1211.8 L1100.38 1211.8 L1099.79 1211.8 L1099.2 1211.8 L1098.62 1211.8 L1098.03 1211.8 L1097.44 1211.8 L1096.86 1211.8 L1096.27 1211.8 L1095.68 1211.8 L1095.1 1211.8 L1094.51 1211.8 L1093.93 1211.8 L1093.34 1211.8 L1092.75 1211.8 L1092.17 1211.8 L1091.58 1211.8 L1090.99 1211.8 L1090.41 1211.8 L1089.82 1211.8 L1089.23 1211.8 L1088.65 1211.8 L1088.06 1211.8 L1087.47 1211.8 L1086.89 1211.8 L1086.3 1211.8 L1085.72 1211.8 L1085.13 1211.8 L1084.54 1211.8 L1083.96 1211.8 L1083.37 1211.8 L1082.78 1211.8 L1082.2 1211.8 L1081.61 1211.8 L1081.02 1211.8 L1080.44 1211.8 L1079.85 1211.8 L1079.26 1211.8 L1078.68 1211.8 L1078.09 1211.8 L1077.51 1211.8 L1076.92 1211.8 L1076.33 1211.8 L1075.75 1211.8 L1075.16 1211.8 L1074.57 1211.8 L1073.99 1211.8 L1073.4 1211.8 L1072.81 1211.8 L1072.23 1211.8 L1071.64 1211.8 L1071.06 1211.8 L1070.47 1211.8 L1069.88 1211.8 L1069.3 1211.8 L1068.71 1211.8 L1068.12 1211.8 L1067.54 1211.8 L1066.95 1211.8 L1066.36 1211.8 L1065.78 1211.8 L1065.19 1211.8 L1064.6 1211.8 L1064.02 1211.8 L1063.43 1211.8 L1062.85 1211.8 L1062.26 1211.8 L1061.67 1211.8 L1061.09 1211.8 L1060.5 1211.8 L1059.91 1211.8 L1059.33 1211.8 L1058.74 1211.8 L1058.15 1211.8 L1057.57 1211.8 L1056.98 1211.8 L1056.39 1211.8 L1055.81 1211.8 L1055.22 1211.8 L1054.64 1211.8 L1054.05 1211.8 L1053.46 1211.8 L1052.88 1211.8 L1052.29 1211.8 L1051.7 1211.8 L1051.12 1211.8 L1050.53 1211.8 L1049.94 1211.8 L1049.36 1211.8 L1048.77 1211.8 L1048.19 1211.8 L1047.6 1211.8 L1047.01 1211.8 L1046.43 1211.8 L1045.84 1211.8 L1045.25 1211.8 L1044.67 1211.8 L1044.08 1211.8 L1043.49 1211.8 L1042.91 1211.8 L1042.32 1211.8 L1041.73 1211.8 L1041.15 1211.8 L1040.56 1211.8 L1039.98 1211.8 L1039.39 1211.8 L1038.8 1211.8 L1038.22 1211.8 L1037.63 1211.8 L1037.04 1211.8 L1036.46 1211.8 L1035.87 1211.8 L1035.28 1211.8 L1034.7 1211.8 L1034.11 1211.8 L1033.52 1211.8 L1032.94 1211.8 L1032.35 1211.8 L1031.77 1211.8 L1031.18 1211.8 L1030.59 1211.8 L1030.01 1211.8 L1029.42 1211.8 L1028.83 1211.8 L1028.25 1211.8 L1027.66 1211.8 L1027.07 1211.8 L1026.49 1211.8 L1025.9 1211.8 L1025.32 1211.8 L1024.73 1211.8 L1024.14 1211.8 L1023.56 1211.8 L1022.97 1211.8 L1022.38 1211.8 L1021.8 1211.8 L1021.21 1211.8 L1020.62 1211.8 L1020.04 1211.8 L1019.45 1211.8 L1018.86 1211.8 L1018.28 1211.8 L1017.69 1211.8 L1017.11 1211.8 L1016.52 1211.8 L1015.93 1211.8 L1015.35 1211.8 L1014.76 1211.8 L1014.17 1211.8 L1013.59 1211.8 L1013 1211.8 L1012.41 1211.8 L1011.83 1211.8 L1011.24 1211.8 L1010.65 1211.8 L1010.07 1211.8 L1009.48 1211.8 L1008.9 1211.8 L1008.31 1211.8 L1007.72 1211.8 L1007.14 1211.8 L1006.55 1211.8 L1005.96 1211.8 L1005.38 1211.8 L1004.79 1211.8 L1004.2 1211.8 L1003.62 1211.8 L1003.03 1211.8 L1002.44 1211.8 L1001.86 1211.8 L1001.27 1211.8 L1000.69 1211.8 L1000.1 1211.8 L999.513 1211.8 L998.926 1211.8 L998.34 1211.8 L997.754 1211.8 L997.167 1211.8 L996.581 1211.8 L995.994 1211.8 L995.408 1211.8 L994.822 1211.8 L994.235 1211.8 L993.649 1211.8 L993.062 1211.8 L992.476 1211.8 L991.889 1211.8 L991.303 1211.8 L990.717 1211.8 L990.13 1211.8 L989.544 1211.8 L988.957 1211.8 L988.371 1211.8 L987.785 1211.8 L987.198 1211.8 L986.612 1211.8 L986.025 1211.8  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip282)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1211.87 986.612,1211.87 987.198,1211.87 987.785,1211.87 988.371,1211.87 988.957,1211.87 989.544,1211.87 990.13,1211.87 990.717,1211.87 991.303,1211.87 991.889,1211.87 992.476,1211.87 993.062,1211.87 993.649,1211.87 994.235,1211.87 994.822,1211.87 995.408,1211.87 995.994,1211.87 996.581,1211.87 997.167,1211.87 997.754,1211.87 998.34,1211.87 998.926,1211.87 999.513,1211.87 1000.1,1211.87 1000.69,1211.87 1001.27,1211.87 1001.86,1211.87 1002.44,1211.87 1003.03,1211.87 1003.62,1211.87 1004.2,1211.87 1004.79,1211.87 1005.38,1211.87 1005.96,1211.87 1006.55,1211.87 1007.14,1211.87 1007.72,1211.87 1008.31,1211.87 1008.9,1211.87 1009.48,1211.87 1010.07,1211.87 1010.65,1211.87 1011.24,1211.87 1011.83,1211.87 1012.41,1211.87 1013,1211.87 1013.59,1211.87 1014.17,1211.87 1014.76,1211.87 1015.35,1211.87 1015.93,1211.87 1016.52,1211.87 1017.11,1211.87 1017.69,1211.87 1018.28,1211.87 1018.86,1211.87 1019.45,1211.87 1020.04,1211.87 1020.62,1211.87 1021.21,1211.87 1021.8,1211.87 1022.38,1211.87 1022.97,1211.87 1023.56,1211.87 1024.14,1211.87 1024.73,1211.87 1025.32,1211.87 1025.9,1211.87 1026.49,1211.87 1027.07,1211.87 1027.66,1211.87 1028.25,1211.87 1028.83,1211.87 1029.42,1211.87 1030.01,1211.87 1030.59,1211.87 1031.18,1211.87 1031.77,1211.87 1032.35,1211.87 1032.94,1211.87 1033.52,1211.87 1034.11,1211.87 1034.7,1211.87 1035.28,1211.87 1035.87,1211.87 1036.46,1211.87 1037.04,1211.87 1037.63,1211.87 1038.22,1211.87 1038.8,1211.87 1039.39,1211.87 1039.98,1211.87 1040.56,1211.87 1041.15,1211.87 1041.73,1211.87 1042.32,1211.87 1042.91,1211.87 1043.49,1211.87 1044.08,1211.87 1044.67,1211.87 1045.25,1211.87 1045.84,1211.87 1046.43,1211.87 1047.01,1211.87 1047.6,1211.87 1048.19,1211.87 1048.77,1211.87 1049.36,1211.87 1049.94,1211.87 1050.53,1211.87 1051.12,1211.87 1051.7,1211.87 1052.29,1211.87 1052.88,1211.87 1053.46,1211.87 1054.05,1211.87 1054.64,1211.87 1055.22,1211.87 1055.81,1211.87 1056.39,1211.87 1056.98,1211.87 1057.57,1211.87 1058.15,1211.87 1058.74,1211.87 1059.33,1211.87 1059.91,1211.87 1060.5,1211.87 1061.09,1211.87 1061.67,1211.87 1062.26,1211.87 1062.85,1211.87 1063.43,1211.87 1064.02,1211.87 1064.6,1211.87 1065.19,1211.87 1065.78,1211.87 1066.36,1211.87 1066.95,1211.87 1067.54,1211.87 1068.12,1211.87 1068.71,1211.87 1069.3,1211.87 1069.88,1211.87 1070.47,1211.87 1071.06,1211.87 1071.64,1211.87 1072.23,1211.87 1072.81,1211.87 1073.4,1211.87 1073.99,1211.87 1074.57,1211.87 1075.16,1211.87 1075.75,1211.87 1076.33,1211.87 1076.92,1211.87 1077.51,1211.87 1078.09,1211.87 1078.68,1211.87 1079.26,1211.87 1079.85,1211.87 1080.44,1211.87 1081.02,1211.87 1081.61,1211.87 1082.2,1211.87 1082.78,1211.87 1083.37,1211.87 1083.96,1211.87 1084.54,1211.87 1085.13,1211.87 1085.72,1211.87 1086.3,1211.87 1086.89,1211.87 1087.47,1211.87 1088.06,1211.87 1088.65,1211.87 1089.23,1211.87 1089.82,1211.87 1090.41,1211.87 1090.99,1211.87 1091.58,1211.87 1092.17,1211.87 1092.75,1211.87 1093.34,1211.87 1093.93,1211.87 1094.51,1211.87 1095.1,1211.87 1095.68,1211.87 1096.27,1211.87 1096.86,1211.87 1097.44,1211.87 1098.03,1211.87 1098.62,1211.87 1099.2,1211.87 1099.79,1211.87 1100.38,1211.87 1100.96,1211.87 1101.55,1211.87 1102.14,1211.87 1102.72,1211.87 1103.31,1211.87 1103.89,1211.87 1104.48,1211.87 1105.07,1211.87 1105.65,1211.87 1106.24,1211.87 1106.83,1211.87 1107.41,1211.87 1108,1211.87 1108.59,1211.87 1109.17,1211.87 1109.76,1211.87 1110.34,1211.87 1110.93,1211.87 1111.52,1211.87 1112.1,1211.87 1112.69,1211.87 1113.28,1211.87 1113.86,1211.87 1114.45,1211.87 1115.04,1211.87 1115.62,1211.87 1116.21,1211.87 1116.8,1211.87 1117.38,1211.87 1117.97,1211.87 1118.55,1211.87 1119.14,1211.87 1119.73,1211.87 1120.31,1211.87 1120.9,1211.87 1121.49,1211.87 1122.07,1211.87 1122.66,1211.87 1123.25,1211.87 1123.83,1211.87 1124.42,1211.87 1125.01,1211.87 1125.59,1211.87 1126.18,1211.87 1126.76,1211.87 1127.35,1211.87 1127.94,1211.87 1128.52,1211.87 1129.11,1211.87 1129.7,1211.87 1130.28,1211.87 1130.87,1211.87 1131.46,1211.87 1132.04,1211.87 1132.63,1211.87 1133.21,1211.87 1133.8,1211.87 1134.39,1211.87 1134.97,1211.87 1135.56,1211.87 1136.15,1211.87 1136.73,1211.87 1137.32,1211.87 1137.91,1211.87 1138.49,1211.87 1139.08,1211.87 1139.67,1211.87 1140.25,1211.87 1140.84,1211.87 1141.42,1211.87 1142.01,1211.87 1142.6,1211.87 1143.18,1211.87 1143.77,1211.87 1144.36,1211.87 1144.94,1211.87 1145.53,1211.87 1146.12,1211.87 1146.7,1211.87 1147.29,1211.87 1147.88,1211.87 1148.46,1211.87 1149.05,1211.87 1149.63,1211.87 1150.22,1211.87 1150.81,1211.87 1151.39,1211.87 1151.98,1211.87 1152.57,1211.87 1153.15,1211.87 1153.74,1211.87 1154.33,1211.87 1154.91,1211.87 1155.5,1211.87 1156.09,1211.87 1156.67,1211.87 1157.26,1211.87 1157.84,1211.87 1158.43,1211.87 1159.02,1211.87 1159.6,1211.87 1160.19,1211.87 1160.78,1211.87 1161.36,1211.87 1161.95,1211.87 1162.54,1211.87 1163.12,1211.87 1163.71,1211.87 1164.29,1211.87 1164.88,1211.87 1165.47,1211.87 1166.05,1211.87 1166.64,1211.87 1167.23,1211.87 1167.81,1211.87 1168.4,1211.87 1168.99,1211.87 1169.57,1211.87 1170.16,1211.87 1170.75,1211.87 1171.33,1211.87 1171.92,1211.87 1172.5,1211.87 1173.09,1211.87 1173.68,1211.87 1174.26,1211.87 1174.85,1211.87 1175.44,1211.87 1176.02,1211.87 1176.61,1211.87 1177.2,1211.87 1177.78,1211.87 1178.37,1211.87 1178.96,1211.87 1179.54,1211.87 1180.13,1211.87 1180.71,1211.87 1181.3,1211.87 1181.89,1211.87 1182.47,1211.87 1183.06,1211.87 1183.65,1211.87 1184.23,1211.87 1184.82,1211.87 1185.41,1211.87 1185.99,1211.87 1186.58,1211.87 1187.16,1211.87 1187.75,1211.87 1188.34,1211.87 1188.92,1211.87 1189.51,1211.87 1190.1,1211.87 1190.68,1211.87 1191.27,1211.87 1191.86,1211.87 1192.44,1211.87 1193.03,1211.87 1193.62,1211.87 1194.2,1211.87 1194.79,1211.87 1195.37,1211.87 1195.96,1211.87 1196.55,1211.87 1197.13,1211.87 1197.72,1211.87 1198.31,1211.87 1198.89,1211.87 1199.48,1211.87 1200.07,1211.87 1200.65,1211.87 1201.24,1211.87 1201.83,1211.87 1202.41,1211.87 1203,1211.87 1203.58,1211.87 1204.17,1211.87 1204.76,1211.87 1205.34,1211.87 1205.93,1211.87 1206.52,1211.87 1207.1,1211.87 1207.69,1211.87 1208.28,1211.87 1208.86,1211.87 1209.45,1211.87 1210.03,1211.87 1210.62,1211.87 1211.21,1211.87 1211.79,1211.87 1212.38,1211.87 1212.97,1211.87 1213.55,1211.87 1214.14,1211.87 1214.73,1211.87 1215.31,1211.87 1215.9,1211.87 1216.49,1211.87 1217.07,1211.87 1217.66,1211.87 1218.24,1211.87 1218.83,1211.87 1219.42,1211.87 1220,1211.87 1220.59,1211.87 1221.18,1211.87 1221.76,1211.87 1222.35,1211.87 1222.94,1211.87 1223.52,1211.87 1224.11,1211.87 1224.7,1211.87 1225.28,1211.87 1225.87,1211.87 1226.45,1211.87 1227.04,1211.87 1227.63,1211.87 1228.21,1211.87 1228.8,1211.87 1229.39,1211.87 1229.97,1211.87 1230.56,1211.87 1231.15,1211.87 1231.73,1211.87 1232.32,1211.87 1232.91,1211.87 1233.49,1211.87 1234.08,1211.87 1234.66,1211.87 1235.25,1211.87 1235.84,1211.87 1236.42,1211.87 1237.01,1211.87 1237.6,1211.87 1238.18,1211.87 1238.77,1211.87 1239.36,1211.87 1239.94,1211.87 1240.53,1211.87 1241.11,1211.87 1241.7,1211.87 1242.29,1211.87 1242.87,1211.87 1243.46,1211.87 1244.05,1211.87 1244.63,1211.87 1245.22,1211.87 1245.81,1211.87 1246.39,1211.87 1246.98,1211.87 1247.57,1211.87 1248.15,1211.87 1248.74,1211.87 1249.32,1211.87 1249.91,1211.87 1250.5,1211.87 1251.08,1211.87 1251.67,1211.87 1252.26,1211.87 1252.84,1211.87 1253.43,1211.87 1254.02,1211.87 1254.6,1211.87 1255.19,1211.87 1255.78,1211.87 1256.36,1211.87 1256.95,1211.87 1257.53,1211.87 1258.12,1211.87 1258.71,1211.87 1259.29,1211.87 1259.88,1211.87 1260.47,1211.87 1261.05,1211.87 1261.64,1211.87 1262.23,1211.87 1262.81,1211.87 1263.4,1211.87 1263.98,1211.87 1264.57,1211.87 1265.16,1211.87 1265.74,1211.87 1266.33,1211.87 1266.92,1211.87 1267.5,1211.87 1268.09,1211.87 1268.68,1211.87 1269.26,1211.87 1269.85,1211.87 1270.44,1211.87 1271.02,1211.87 1271.61,1211.87 1272.19,1211.87 1272.78,1211.87 1273.37,1211.87 1273.95,1211.87 1274.54,1211.87 1275.13,1211.87 1275.71,1211.87 1276.3,1211.87 1276.89,1211.87 1277.47,1211.87 1278.06,1211.87 1278.65,1211.87 1279.23,1211.87 1279.82,1211.87 1280.4,1211.87 1280.99,1211.87 1281.58,1211.87 1282.16,1211.87 1282.75,1211.87 1283.34,1211.87 1283.92,1211.87 1284.51,1211.87 1285.1,1211.87 1285.68,1211.87 1286.27,1211.87 1286.86,1211.87 1287.44,1211.87 1288.03,1211.87 1288.61,1211.87 1289.2,1211.87 1289.79,1211.87 1290.37,1211.87 1290.96,1211.87 1291.55,1211.87 1292.13,1211.87 1292.72,1211.87 1293.31,1211.87 1293.89,1211.87 1294.48,1211.87 1295.06,1211.87 1295.65,1211.87 1296.24,1211.87 1296.82,1211.87 1297.41,1211.87 1298,1211.87 1298.58,1211.87 1299.17,1211.87 1299.76,1211.87 1300.34,1211.87 1300.93,1211.87 1301.52,1211.87 1302.1,1211.87 1302.69,1211.87 1303.27,1211.87 1303.86,1211.87 1304.45,1211.87 1305.03,1211.87 1305.62,1211.87 1306.21,1211.87 1306.79,1211.87 1307.38,1211.87 1307.97,1211.87 1308.55,1211.87 1309.14,1211.87 1309.73,1211.87 1310.31,1211.87 1310.9,1211.87 1311.48,1211.87 1312.07,1211.87 1312.66,1211.87 1313.24,1211.87 1313.83,1211.87 1314.42,1211.87 1315,1211.87 1315.59,1211.87 1316.18,1211.87 1316.76,1211.87 1317.35,1211.87 1317.93,1211.87 1318.52,1211.87 1319.11,1211.87 1319.69,1211.87 1320.28,1211.87 1320.87,1211.87 1321.45,1211.87 1322.04,1211.87 1322.63,1211.87 1323.21,1211.87 1323.8,1211.87 1324.39,1211.87 1324.97,1211.87 1325.56,1211.87 1326.14,1211.87 1326.73,1211.87 1327.32,1211.87 1327.9,1211.87 1328.49,1211.87 1329.08,1211.87 1329.66,1211.87 1330.25,1211.87 1330.84,1211.87 1331.42,1211.87 1332.01,1211.87 1332.6,1211.87 1333.18,1211.87 1333.77,1211.87 1334.35,1211.87 1334.94,1211.87 1335.53,1211.87 1336.11,1211.87 1336.7,1211.87 1337.29,1211.87 1337.87,1211.87 1338.46,1211.87 1339.05,1211.87 1339.63,1211.87 1340.22,1211.87 1340.8,1211.87 1341.39,1211.87 1341.98,1211.87 1342.56,1211.87 1343.15,1211.87 1343.74,1211.87 1344.32,1211.87 1344.91,1211.87 1345.5,1211.87 1346.08,1211.87 1346.67,1211.87 1347.26,1211.87 1347.84,1211.87 1348.43,1211.87 1349.01,1211.87 1349.6,1211.87 1350.19,1211.87 1350.77,1211.87 1351.36,1211.87 1351.95,1211.87 1352.53,1211.87 1353.12,1211.87 1353.71,1211.87 1354.29,1211.87 1354.88,1211.87 1355.47,1211.87 1356.05,1211.87 1356.64,1211.87 1357.22,1211.87 1357.81,1211.87 1358.4,1211.87 1358.98,1211.87 1359.57,1211.87 1360.16,1211.87 1360.74,1211.87 1361.33,1211.87 1361.92,1211.87 1362.5,1211.87 1363.09,1211.87 1363.68,1211.87 1364.26,1211.87 1364.85,1211.87 1365.43,1211.87 1366.02,1211.87 1366.61,1211.87 1367.19,1211.87 1367.78,1211.87 1368.37,1211.87 1368.95,1211.87 1369.54,1211.87 1370.13,1211.87 1370.71,1211.87 1371.3,1211.87 1371.88,1211.87 1372.47,1211.87 1373.06,1211.87 1373.64,1211.87 1374.23,1211.87 1374.82,1211.87 1375.4,1211.87 1375.99,1211.87 1376.58,1211.87 1377.16,1211.87 1377.75,1211.87 1378.34,1211.87 1378.92,1211.87 1379.51,1211.87 1380.09,1211.87 1380.68,1211.87 1381.27,1211.87 1381.85,1211.87 1382.44,1211.87 1383.03,1211.87 1383.61,1211.87 1384.2,1211.87 1384.79,1211.87 1385.37,1211.87 1385.96,1211.87 1386.55,1211.87 1387.13,1211.87 1387.72,1211.87 1388.3,1211.87 1388.89,1211.87 1389.48,1211.87 1390.06,1211.87 1390.65,1211.87 1391.24,1211.87 1391.82,1211.87 1392.41,1211.87 1393,1211.87 1393.58,1211.87 1394.17,1211.87 1394.75,1211.87 1395.34,1211.87 1395.93,1211.87 1396.51,1211.87 1397.1,1211.87 1397.69,1211.87 1398.27,1211.87 1398.86,1211.87 1399.45,1211.87 1400.03,1211.87 1400.62,1211.87 1401.21,1211.87 1401.79,1211.87 1402.38,1211.87 1402.96,1211.87 1403.55,1211.87 1404.14,1211.87 1404.72,1211.87 1405.31,1211.87 1405.9,1211.87 1406.48,1211.87 1407.07,1211.87 1407.66,1211.87 1408.24,1211.87 1408.83,1211.87 1409.42,1211.87 1410,1211.87 1410.59,1211.87 1411.17,1211.87 1411.76,1211.87 1412.35,1211.87 1412.93,1211.87 1413.52,1211.87 1414.11,1211.87 1414.69,1211.87 1415.28,1211.87 1415.87,1211.87 1416.45,1211.87 1417.04,1211.87 1417.63,1211.87 1418.21,1211.87 1418.8,1211.87 1419.38,1211.87 1419.97,1211.87 1420.56,1211.87 1421.14,1211.87 1421.73,1211.87 1422.32,1211.87 1422.9,1211.87 1423.49,1211.87 1424.08,1211.87 1424.66,1211.87 1425.25,1211.87 1425.83,1211.87 1426.42,1211.87 1427.01,1211.87 1427.59,1211.87 1428.18,1211.87 1428.77,1211.87 1429.35,1211.87 1429.94,1211.87 1430.53,1211.87 1431.11,1211.87 1431.7,1211.87 1432.29,1211.87 1432.87,1211.87 1433.46,1211.87 1434.04,1211.87 1434.63,1211.87 1435.22,1211.87 1435.8,1211.87 1436.39,1211.87 1436.98,1211.87 1437.56,1211.87 1438.15,1211.87 1438.74,1211.87 1439.32,1211.87 1439.91,1211.87 1440.5,1211.87 1441.08,1211.87 1441.67,1211.87 1442.25,1211.87 1442.84,1211.87 1443.43,1211.87 1444.01,1211.87 1444.6,1211.87 1445.19,1211.87 1445.77,1211.87 1446.36,1211.87 1446.95,1211.87 1447.53,1211.87 1448.12,1211.87 1448.7,1211.87 1449.29,1211.87 1449.88,1211.87 1450.46,1211.87 1451.05,1211.87 1451.64,1211.87 1452.22,1211.87 1452.81,1211.87 1453.4,1211.87 1453.98,1211.87 1454.57,1211.87 1455.16,1211.87 1455.74,1211.87 1456.33,1211.87 1456.91,1211.87 1457.5,1211.87 1458.09,1211.87 1458.67,1211.87 1459.26,1211.87 1459.85,1211.87 1460.43,1211.87 1461.02,1211.87 1461.61,1211.87 1462.19,1211.87 1462.78,1211.87 1463.37,1211.87 1463.95,1211.87 1464.54,1211.87 1465.12,1211.87 1465.71,1211.87 1466.3,1211.87 1466.88,1211.87 1467.47,1211.87 1468.06,1211.87 1468.64,1211.87 1469.23,1211.87 1469.82,1211.87 1470.4,1211.87 1470.99,1211.87 1471.57,1211.87 1472.16,1211.87 1472.75,1211.87 1473.33,1211.87 1473.92,1211.87 1474.51,1211.87 1475.09,1211.87 1475.68,1211.87 1476.27,1211.87 1476.85,1211.87 1477.44,1211.87 1478.03,1211.87 1478.61,1211.87 1479.2,1211.87 1479.78,1211.87 1480.37,1211.87 1480.96,1211.87 1481.54,1211.87 1482.13,1211.87 1482.72,1211.87 1483.3,1211.87 1483.89,1211.87 1484.48,1211.87 1485.06,1211.87 1485.65,1211.87 1486.24,1211.87 1486.82,1211.87 1487.41,1211.87 1487.99,1211.87 1488.58,1211.87 1489.17,1211.87 1489.75,1211.87 1490.34,1211.87 1490.93,1211.87 1491.51,1211.87 1492.1,1211.87 1492.69,1211.87 1493.27,1211.87 1493.86,1211.87 1494.45,1211.87 1495.03,1211.87 1495.62,1211.87 1496.2,1211.87 1496.79,1211.87 1497.38,1211.87 1497.96,1211.87 1498.55,1211.87 1499.14,1211.87 1499.72,1211.87 1500.31,1211.87 1500.9,1211.87 1501.48,1211.87 1502.07,1211.87 1502.65,1211.87 1503.24,1211.87 1503.83,1211.87 1504.41,1211.87 1505,1211.87 1505.59,1211.87 1506.17,1211.87 1506.76,1211.87 1507.35,1211.87 1507.93,1211.87 1508.52,1211.87 1509.11,1211.87 1509.69,1211.87 1510.28,1211.87 1510.86,1211.87 1511.45,1211.87 1512.04,1211.87 1512.62,1211.87 1513.21,1211.87 1513.8,1211.87 1514.38,1211.87 1514.97,1211.87 1515.56,1211.87 1516.14,1211.87 1516.73,1211.87 1517.32,1211.87 1517.9,1211.87 1518.49,1211.87 1519.07,1211.87 1519.66,1211.87 1520.25,1211.87 1520.83,1211.87 1521.42,1211.87 1522.01,1211.87 1522.59,1211.87 1523.18,1211.87 1523.77,1211.87 1524.35,1211.87 1524.94,1211.87 1525.52,1211.87 1526.11,1211.87 1526.7,1211.87 1527.28,1211.87 1527.87,1211.87 1528.46,1211.87 1529.04,1211.87 1529.63,1211.87 1530.22,1211.87 1530.8,1211.87 1531.39,1211.87 1531.98,1211.87 1532.56,1211.87 1533.15,1211.87 1533.73,1211.87 1534.32,1211.87 1534.91,1211.87 1535.49,1211.87 1536.08,1211.87 1536.67,1211.87 1537.25,1211.87 1537.84,1211.87 1538.43,1211.87 1539.01,1211.87 1539.6,1211.87 1540.19,1211.87 1540.77,1211.87 1541.36,1211.87 1541.94,1211.87 1542.53,1211.87 1543.12,1211.87 1543.7,1211.87 1544.29,1211.87 1544.88,1211.87 1545.46,1211.87 1546.05,1211.87 1546.64,1211.87 1547.22,1211.87 1547.81,1211.87 1548.4,1211.87 1548.98,1211.87 1549.57,1211.87 1550.15,1211.87 1550.74,1211.87 1551.33,1211.87 1551.91,1211.87 1552.5,1211.87 1553.09,1211.87 1553.67,1211.87 1554.26,1211.87 1554.85,1211.87 1555.43,1211.87 1556.02,1211.87 1556.6,1211.87 1557.19,1211.87 1557.78,1211.87 1558.36,1211.87 1558.95,1211.87 1559.54,1211.87 1560.12,1211.87 1560.71,1211.87 1561.3,1211.87 1561.88,1211.87 1562.47,1211.87 1563.06,1211.87 1563.64,1211.87 1564.23,1211.87 1564.81,1211.87 1565.4,1211.87 1565.99,1211.87 1566.57,1211.87 1567.16,1211.87 1567.75,1211.87 1568.33,1211.87 1568.92,1211.87 1569.51,1211.87 1570.09,1211.87 1570.68,1211.87 1571.27,1211.87 1571.85,1211.87 1572.44,1211.87 1573.02,1211.87 1573.61,1211.87 1574.2,1211.87 1574.78,1211.87 1575.37,1211.87 1575.96,1211.87 1576.54,1211.87 1577.13,1211.87 1577.72,1211.87 1578.3,1211.87 1578.89,1211.87 1579.47,1211.87 1580.06,1211.87 1580.65,1211.87 1581.23,1211.87 1581.82,1211.87 1582.41,1211.87 1582.99,1211.87 1583.58,1211.87 1584.17,1211.87 1584.75,1211.87 1585.34,1211.87 1585.93,1211.87 1586.51,1211.87 1587.1,1211.87 1587.68,1211.87 1588.27,1211.87 1588.86,1211.87 1589.44,1211.87 1590.03,1211.87 1590.62,1211.87 1591.2,1211.87 1591.79,1211.87 1592.38,1211.87 1592.96,1211.87 1593.55,1211.87 1594.14,1211.87 1594.72,1211.87 1595.31,1211.87 1595.89,1211.87 1596.48,1211.87 1597.07,1211.87 1597.65,1211.87 1598.24,1211.87 1598.83,1211.87 1599.41,1211.87 1600,1211.87 1600.59,1211.87 1601.17,1211.87 1601.76,1211.87 1602.34,1211.87 1602.93,1211.87 1603.52,1211.87 1604.1,1211.87 1604.69,1211.87 1605.28,1211.87 1605.86,1211.87 1606.45,1211.87 1607.04,1211.87 1607.62,1211.87 1608.21,1211.87 1608.8,1211.87 1609.38,1211.87 1609.97,1211.87 1610.55,1211.87 1611.14,1211.87 1611.73,1211.87 1612.31,1211.87 1612.9,1211.87 1613.49,1211.87 1614.07,1211.87 1614.66,1211.87 1615.25,1211.87 1615.83,1211.87 1616.42,1211.87 1617.01,1211.87 1617.59,1211.87 1618.18,1211.87 1618.76,1211.87 1619.35,1211.87 1619.94,1211.87 1620.52,1211.87 1621.11,1211.87 1621.7,1211.87 1622.28,1211.87 1622.87,1211.87 1623.46,1211.87 1624.04,1211.87 1624.63,1211.87 1625.22,1211.87 1625.8,1211.87 1626.39,1211.87 1626.97,1211.87 1627.56,1211.87 1628.15,1211.87 1628.73,1211.87 1629.32,1211.87 1629.91,1211.87 1630.49,1211.87 1631.08,1211.87 1631.67,1211.87 1632.25,1211.87 1632.84,1211.87 1633.42,1211.87 1634.01,1211.87 1634.6,1211.87 1635.18,1211.87 1635.77,1211.87 1636.36,1211.87 1636.94,1211.87 1637.53,1211.87 1638.12,1211.87 1638.7,1211.87 1639.29,1211.87 1639.88,1211.87 1640.46,1211.87 1641.05,1211.87 1641.63,1211.87 1642.22,1211.87 1642.81,1211.87 1643.39,1211.87 1643.98,1211.87 1644.57,1211.87 1645.15,1211.87 1645.74,1211.87 1646.33,1211.87 1646.91,1211.87 1647.5,1211.87 1648.09,1211.87 1648.67,1211.87 1649.26,1211.87 1649.84,1211.87 1650.43,1211.87 1651.02,1211.87 1651.6,1211.87 1652.19,1211.87 1652.78,1211.87 1653.36,1211.87 1653.95,1211.87 1654.54,1211.87 1655.12,1211.87 1655.71,1211.87 1656.29,1211.87 1656.88,1211.87 1657.47,1211.87 1658.05,1211.87 1658.64,1211.87 1659.23,1211.87 1659.81,1211.87 1660.4,1211.87 1660.99,1211.87 1661.57,1211.87 1662.16,1211.87 1662.75,1211.87 1663.33,1211.87 1663.92,1211.87 1664.5,1211.87 1665.09,1211.87 1665.68,1211.87 1666.26,1211.87 1666.85,1211.87 1667.44,1211.87 1668.02,1211.87 1668.61,1211.87 1669.2,1211.87 1669.78,1211.87 1670.37,1211.87 1670.96,1211.87 1671.54,1211.87 1672.13,1211.87 1672.71,1211.87 1673.3,1211.87 1673.89,1211.87 1674.47,1211.87 1675.06,1211.87 1675.65,1211.87 1676.23,1211.87 1676.82,1211.87 1677.41,1211.87 1677.99,1211.87 1678.58,1211.87 1679.17,1211.87 1679.75,1211.87 1680.34,1211.87 1680.92,1211.87 1681.51,1211.87 1682.1,1211.87 1682.68,1211.87 1683.27,1211.87 1683.86,1211.87 1684.44,1211.87 1685.03,1211.87 1685.62,1211.87 1686.2,1211.87 1686.79,1211.87 1687.37,1211.87 1687.96,1211.87 1688.55,1211.87 1689.13,1211.87 1689.72,1211.87 1690.31,1211.87 1690.89,1211.87 1691.48,1211.87 1692.07,1211.87 1692.65,1211.87 1693.24,1211.87 1693.83,1211.87 1694.41,1211.87 1695,1211.87 1695.58,1211.87 1696.17,1211.87 1696.76,1211.87 1697.34,1211.87 1697.93,1211.87 1698.52,1211.87 1699.1,1211.87 1699.69,1211.87 1700.28,1211.87 1700.86,1211.87 1701.45,1211.87 1702.04,1211.87 1702.62,1211.87 1703.21,1211.87 1703.79,1211.87 1704.38,1211.87 1704.97,1211.87 1705.55,1211.87 1706.14,1211.87 1706.73,1211.87 1707.31,1211.87 1707.9,1211.87 1708.49,1211.87 1709.07,1211.87 1709.66,1211.87 1710.24,1211.87 1710.83,1211.87 1711.42,1211.87 1712,1211.87 1712.59,1211.87 1713.18,1211.87 1713.76,1211.87 1714.35,1211.87 1714.94,1211.87 1715.52,1211.87 1716.11,1211.87 1716.7,1211.87 1717.28,1211.87 1717.87,1211.87 1718.45,1211.87 1719.04,1211.87 1719.63,1211.87 1720.21,1211.87 1720.8,1211.87 1721.39,1211.87 1721.97,1211.87 1722.56,1211.87 1723.15,1211.87 1723.73,1211.87 1724.32,1211.87 1724.91,1211.87 1725.49,1211.87 1726.08,1211.87 1726.66,1211.87 1727.25,1211.87 1727.84,1211.87 1728.42,1211.87 1729.01,1211.87 1729.6,1211.87 1730.18,1211.87 1730.77,1211.87 1731.36,1211.87 1731.94,1211.87 1732.53,1211.87 1733.11,1211.87 1733.7,1211.87 1734.29,1211.87 1734.87,1211.87 1735.46,1211.87 1736.05,1211.87 1736.63,1211.87 1737.22,1211.87 1737.81,1211.87 1738.39,1211.87 1738.98,1211.87 1739.57,1211.87 1740.15,1211.87 1740.74,1211.87 1741.32,1211.87 1741.91,1211.87 1742.5,1211.87 1743.08,1211.87 1743.67,1211.87 1744.26,1211.87 1744.84,1211.87 1745.43,1211.87 1746.02,1211.87 1746.6,1211.87 1747.19,1211.87 1747.78,1211.87 1748.36,1211.87 1748.95,1211.87 1749.53,1211.87 1750.12,1211.87 1750.71,1211.87 1751.29,1211.87 1751.88,1211.87 1752.47,1211.87 1753.05,1211.87 1753.64,1211.87 1754.23,1211.87 1754.81,1211.87 1755.4,1211.87 1755.99,1211.87 1756.57,1211.87 1757.16,1211.87 1757.74,1211.87 1758.33,1211.87 1758.92,1211.87 1759.5,1211.87 1760.09,1211.87 1760.68,1211.87 1761.26,1211.87 1761.85,1211.87 1762.44,1211.87 1763.02,1211.87 1763.61,1211.87 1764.19,1211.87 1764.78,1211.87 1765.37,1211.87 1765.95,1211.87 1766.54,1211.87 1767.13,1211.87 1767.71,1211.87 1768.3,1211.87 1768.89,1211.87 1769.47,1211.87 1770.06,1211.87 1770.65,1211.87 1771.23,1211.87 1771.82,1211.87 1772.4,1211.87 1772.99,1211.87 1773.58,1211.87 1774.16,1211.87 1774.75,1211.87 1775.34,1211.87 1775.92,1211.87 1776.51,1211.87 1777.1,1211.87 1777.68,1211.87 1778.27,1211.87 1778.86,1211.87 1779.44,1211.87 1780.03,1211.87 1780.61,1211.87 1781.2,1211.87 1781.79,1211.87 1782.37,1211.87 1782.96,1211.87 1783.55,1211.87 1784.13,1211.87 1784.72,1211.87 1785.31,1211.87 1785.89,1211.87 1786.48,1211.87 1787.06,1211.87 1787.65,1211.87 1788.24,1211.87 1788.82,1211.87 1789.41,1211.87 1790,1211.87 1790.58,1211.87 1791.17,1211.87 1791.76,1211.87 1792.34,1211.87 1792.93,1211.87 1793.52,1211.87 1794.1,1211.87 1794.69,1211.87 1795.27,1211.87 1795.86,1211.87 1796.45,1211.87 1797.03,1211.87 1797.62,1211.87 1798.21,1211.87 1798.79,1211.87 1799.38,1211.87 1799.97,1211.87 1800.55,1211.87 1801.14,1211.87 1801.73,1211.87 1802.31,1211.87 1802.9,1211.87 1803.48,1211.87 1804.07,1211.87 1804.66,1211.87 1805.24,1211.87 1805.83,1211.87 1806.42,1211.87 1807,1211.87 1807.59,1211.87 1808.18,1211.87 1808.76,1211.87 1809.35,1211.87 1809.94,1211.87 1810.52,1211.87 1811.11,1211.87 1811.69,1211.87 1812.28,1211.87 1812.87,1211.87 1813.45,1211.87 1814.04,1211.87 1814.63,1211.87 1815.21,1211.87 1815.8,1211.87 1816.39,1211.87 1816.97,1211.87 1817.56,1211.87 1818.14,1211.87 1818.73,1211.87 1819.32,1211.87 1819.9,1211.87 1820.49,1211.87 1821.08,1211.87 1821.66,1211.87 1822.25,1211.87 1822.84,1211.87 1823.42,1211.87 1824.01,1211.87 1824.6,1211.87 1825.18,1211.87 1825.77,1211.87 1826.35,1211.87 1826.94,1211.87 1827.53,1211.87 1828.11,1211.87 1828.7,1211.87 1829.29,1211.87 1829.87,1211.87 1830.46,1211.87 1831.05,1211.87 1831.63,1211.87 1832.22,1211.87 1832.81,1211.87 1833.39,1211.87 1833.98,1211.87 1834.56,1211.87 1835.15,1211.87 1835.74,1211.87 1836.32,1211.87 1836.91,1211.87 1837.5,1211.87 1838.08,1211.87 1838.67,1211.87 1839.26,1211.87 1839.84,1211.87 1840.43,1211.87 1841.01,1211.87 1841.6,1211.87 1842.19,1211.87 1842.77,1211.87 1843.36,1211.87 1843.95,1211.87 1844.53,1211.87 1845.12,1211.87 1845.71,1211.87 1846.29,1211.87 1846.88,1211.87 1847.47,1211.87 1848.05,1211.87 1848.64,1211.87 1849.22,1211.87 1849.81,1211.87 1850.4,1211.87 1850.98,1211.87 1851.57,1211.87 1852.16,1211.87 1852.74,1211.87 1853.33,1211.87 1853.92,1211.87 1854.5,1211.87 1855.09,1211.87 1855.68,1211.87 1856.26,1211.87 1856.85,1211.87 1857.43,1211.87 1858.02,1211.87 1858.61,1211.87 1859.19,1211.87 1859.78,1211.87 1860.37,1211.87 1860.95,1211.87 1861.54,1211.87 1862.13,1211.87 1862.71,1211.87 1863.3,1211.87 1863.88,1211.87 1864.47,1211.87 1865.06,1211.87 1865.64,1211.87 1866.23,1211.87 1866.82,1211.87 1867.4,1211.87 1867.99,1211.87 1868.58,1211.87 1869.16,1211.87 1869.75,1211.87 1870.34,1211.87 1870.92,1211.87 1871.51,1211.87 1872.09,1211.87 1872.68,1211.87 1873.27,1211.87 1873.85,1211.87 1874.44,1211.87 1875.03,1211.87 1875.61,1211.87 1876.2,1211.87 1876.79,1211.87 1877.37,1211.87 1877.96,1211.87 1878.55,1211.87 1879.13,1211.87 1879.72,1211.87 1880.3,1211.87 1880.89,1211.87 1881.48,1211.87 1882.06,1211.87 1882.65,1211.87 1883.24,1211.87 1883.82,1211.87 1884.41,1211.87 1885,1211.87 1885.58,1211.87 1886.17,1211.87 1886.76,1211.87 1887.34,1211.87 1887.93,1211.87 1888.51,1211.87 1889.1,1211.87 1889.69,1211.87 1890.27,1211.87 1890.86,1211.87 1891.45,1211.87 1892.03,1211.87 1892.62,1211.87 1893.21,1211.87 1893.79,1211.87 1894.38,1211.87 1894.96,1211.87 1895.55,1211.87 1896.14,1211.87 1896.72,1211.87 1897.31,1211.87 1897.9,1211.87 1898.48,1211.87 1899.07,1211.87 1899.66,1211.87 1900.24,1211.87 1900.83,1211.87 1901.42,1211.87 1902,1211.87 1902.59,1211.87 1903.17,1211.87 1903.76,1211.87 1904.35,1211.87 1904.93,1211.87 1905.52,1211.87 1906.11,1211.87 1906.69,1211.87 1907.28,1211.87 1907.87,1211.87 1908.45,1211.87 1909.04,1211.87 1909.63,1211.87 1910.21,1211.87 1910.8,1211.87 1911.38,1211.87 1911.97,1211.87 1912.56,1211.87 1913.14,1211.87 1913.73,1211.87 1914.32,1211.87 1914.9,1211.87 1915.49,1211.87 1916.08,1211.87 1916.66,1211.87 1917.25,1211.87 1917.83,1211.87 1918.42,1211.87 1919.01,1211.87 1919.59,1211.87 1920.18,1211.87 1920.77,1211.87 1921.35,1211.87 1921.94,1211.87 1922.53,1211.87 1923.11,1211.87 1923.7,1211.87 1924.29,1211.87 1924.87,1211.87 1925.46,1211.87 1926.04,1211.87 1926.63,1211.87 1927.22,1211.87 1927.8,1211.87 1928.39,1211.87 1928.98,1211.87 1929.56,1211.87 1930.15,1211.87 1930.74,1211.87 1931.32,1211.87 1931.91,1211.87 1932.5,1211.87 1933.08,1211.87 1933.67,1211.87 1934.25,1211.87 1934.84,1211.87 1935.43,1211.87 1936.01,1211.87 1936.6,1211.87 1937.19,1211.87 1937.77,1211.87 1938.36,1211.87 1938.95,1211.87 1939.53,1211.87 1940.12,1211.87 1940.71,1211.87 1941.29,1211.87 1941.88,1211.87 1942.46,1211.87 1943.05,1211.87 1943.64,1211.87 1944.22,1211.87 1944.81,1211.87 1945.4,1211.87 1945.98,1211.87 1946.57,1211.87 1947.16,1211.87 1947.74,1211.87 1948.33,1211.87 1948.91,1211.87 1949.5,1211.87 1950.09,1211.87 1950.67,1211.87 1951.26,1211.87 1951.85,1211.87 1952.43,1211.87 1953.02,1211.87 1953.61,1211.87 1954.19,1211.87 1954.78,1211.87 1955.37,1211.87 1955.95,1211.87 1956.54,1211.87 1957.12,1211.87 1957.71,1211.87 1958.3,1211.87 1958.88,1211.87 1959.47,1211.87 1960.06,1211.87 1960.64,1211.87 1961.23,1211.87 1961.82,1211.87 1962.4,1211.87 1962.99,1211.87 1963.58,1211.87 1964.16,1211.87 1964.75,1211.87 1965.33,1211.87 1965.92,1211.87 1966.51,1211.87 1967.09,1211.87 1967.68,1211.87 1968.27,1211.87 1968.85,1211.87 1969.44,1211.87 1970.03,1211.87 1970.61,1211.87 1971.2,1211.87 1971.78,1211.87 1972.37,1211.87 1972.96,1211.87 1973.54,1211.87 1974.13,1211.87 1974.72,1211.87 1975.3,1211.87 1975.89,1211.87 1976.48,1211.87 1977.06,1211.87 1977.65,1211.87 1978.24,1211.87 1978.82,1211.87 1979.41,1211.87 1979.99,1211.87 1980.58,1211.87 1981.17,1211.87 1981.75,1211.87 1982.34,1211.87 1982.93,1211.87 1983.51,1211.87 1984.1,1211.87 1984.69,1211.87 1985.27,1211.87 1985.86,1211.87 1986.45,1211.87 1987.03,1211.87 1987.62,1211.87 1988.2,1211.87 1988.79,1211.87 1989.38,1211.87 1989.96,1211.87 1990.55,1211.87 1991.14,1211.87 1991.72,1211.87 1992.31,1211.87 1992.9,1211.87 1993.48,1211.87 1994.07,1211.87 1994.65,1211.87 1995.24,1211.87 1995.83,1211.87 1996.41,1211.87 1997,1211.87 1997.59,1211.87 1998.17,1211.87 1998.76,1211.87 1999.35,1211.87 1999.93,1211.87 2000.52,1211.87 2001.11,1211.87 2001.69,1211.87 2002.28,1211.87 2002.86,1211.87 2003.45,1211.87 2004.04,1211.87 2004.62,1211.87 2005.21,1211.87 2005.8,1211.87 2006.38,1211.87 2006.97,1211.87 2007.56,1211.87 2008.14,1211.87 2008.73,1211.87 2009.32,1211.87 2009.9,1211.87 2010.49,1211.87 2011.07,1211.87 2011.66,1211.87 2012.25,1211.87 2012.83,1211.87 2013.42,1211.87 2014.01,1211.87 2014.59,1211.87 2015.18,1211.87 2015.77,1211.87 2016.35,1211.87 2016.94,1211.87 2017.53,1211.87 2018.11,1211.87 2018.7,1211.87 2019.28,1211.87 2019.87,1211.87 2020.46,1211.87 2021.04,1211.87 2021.63,1211.87 2022.22,1211.87 2022.8,1211.87 2023.39,1211.87 2023.98,1211.87 2024.56,1211.87 2025.15,1211.87 2025.73,1211.87 2026.32,1211.87 2026.91,1211.87 2027.49,1211.87 2028.08,1211.87 2028.67,1211.87 2029.25,1211.87 2029.84,1211.87 2030.43,1211.87 2031.01,1211.87 2031.6,1211.87 2032.19,1211.87 2032.77,1211.87 2033.36,1211.87 2033.94,1211.87 2034.53,1211.87 2035.12,1211.87 2035.7,1211.87 2036.29,1211.87 2036.88,1211.87 2037.46,1211.87 2038.05,1211.87 2038.64,1211.87 2039.22,1211.87 2039.81,1211.87 2040.4,1211.87 2040.98,1211.87 2041.57,1211.87 2042.15,1211.87 2042.74,1211.87 2043.33,1211.87 2043.91,1211.87 2044.5,1211.87 2045.09,1211.87 2045.67,1211.87 2046.26,1211.87 2046.85,1211.87 2047.43,1211.87 2048.02,1211.87 2048.6,1211.87 2049.19,1211.87 2049.78,1211.87 2050.36,1211.87 2050.95,1211.87 2051.54,1211.87 2052.12,1211.87 2052.71,1211.87 2053.3,1211.87 2053.88,1211.87 2054.47,1211.87 2055.06,1211.87 2055.64,1211.87 2056.23,1211.87 2056.81,1211.87 2057.4,1211.87 2057.99,1211.87 2058.57,1211.87 2059.16,1211.87 2059.75,1211.87 2060.33,1211.87 2060.92,1211.87 2061.51,1211.87 2062.09,1211.87 2062.68,1211.87 2063.27,1211.87 2063.85,1211.87 2064.44,1211.87 2065.02,1211.87 2065.61,1211.87 2066.2,1211.87 2066.78,1211.87 2067.37,1211.87 2067.96,1211.87 2068.54,1211.87 2069.13,1211.87 2069.72,1211.87 2070.3,1211.87 2070.89,1211.87 2071.48,1211.87 2072.06,1211.87 2072.65,1211.87 2073.23,1211.87 2073.82,1211.87 2074.41,1211.87 2074.99,1211.87 2075.58,1211.87 2076.17,1211.87 2076.75,1211.87 2077.34,1211.87 2077.93,1211.87 2078.51,1211.87 2079.1,1211.87 2079.68,1211.87 2080.27,1211.87 2080.86,1211.87 2081.44,1211.87 2082.03,1211.87 2082.62,1211.87 2083.2,1211.87 2083.79,1211.87 2084.38,1211.87 2084.96,1211.87 2085.55,1211.87 2086.14,1211.87 2086.72,1211.87 2087.31,1211.87 2087.89,1211.87 2088.48,1211.87 2089.07,1211.87 2089.65,1211.87 2090.24,1211.87 2090.83,1211.87 2091.41,1211.87 2092,1211.87 2092.59,1211.87 2093.17,1211.87 2093.76,1211.87 2094.35,1211.87 2094.93,1211.87 2095.52,1211.87 2096.1,1211.87 2096.69,1211.87 2097.28,1211.87 2097.86,1211.87 2098.45,1211.87 2099.04,1211.87 2099.62,1211.87 2100.21,1211.87 2100.8,1211.87 2101.38,1211.87 2101.97,1211.87 2102.55,1211.87 2103.14,1211.87 2103.73,1211.87 2104.31,1211.87 2104.9,1211.87 2105.49,1211.87 2106.07,1211.87 2106.66,1211.87 2107.25,1211.87 2107.83,1211.87 2108.42,1211.87 2109.01,1211.87 2109.59,1211.87 2110.18,1211.87 2110.76,1211.87 2111.35,1211.87 2111.94,1211.87 2112.52,1211.87 2113.11,1211.87 2113.7,1211.87 2114.28,1211.87 2114.87,1211.87 2115.46,1211.87 2116.04,1211.87 2116.63,1211.87 2117.22,1211.87 2117.8,1211.87 2118.39,1211.87 2118.97,1211.87 2119.56,1211.87 2120.15,1211.87 2120.73,1211.87 2121.32,1211.87 2121.91,1211.87 2122.49,1211.87 2123.08,1211.87 2123.67,1211.87 2124.25,1211.87 2124.84,1211.87 2125.42,1211.87 2126.01,1211.87 2126.6,1211.87 2127.18,1211.87 2127.77,1211.87 2128.36,1211.87 2128.94,1211.87 2129.53,1211.87 2130.12,1211.87 2130.7,1211.87 2131.29,1211.87 2131.88,1211.87 2132.46,1211.87 2133.05,1211.87 2133.63,1211.87 2134.22,1211.87 2134.81,1211.87 2135.39,1211.87 2135.98,1211.87 2136.57,1211.87 2137.15,1211.87 2137.74,1211.87 2138.33,1211.87 2138.91,1211.87 2139.5,1211.87 2140.09,1211.87 2140.67,1211.87 2141.26,1211.87 2141.84,1211.87 2142.43,1211.87 2143.02,1211.87 2143.6,1211.87 2144.19,1211.87 2144.78,1211.87 2145.36,1211.87 2145.95,1211.87 2146.54,1211.87 2147.12,1211.87 2147.71,1211.87 2148.3,1211.87 2148.88,1211.87 2149.47,1211.87 2150.05,1211.87 2150.64,1211.87 2151.23,1211.87 2151.81,1211.87 2152.4,1211.87 2152.99,1211.87 2153.57,1211.87 2154.16,1211.87 2154.75,1211.87 2155.33,1211.87 2155.92,1211.87 2156.5,1211.87 2157.09,1211.87 2157.68,1211.87 2158.26,1211.87 \"/>\n<polyline clip-path=\"url(#clip282)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1561.66,1193.14 1399.46,899.083 \"/>\n<polyline clip-path=\"url(#clip282)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1230.09 985.439,1193.14 2158.26,1193.14 2158.26,1230.09 985.439,1230.09 \"/>\n<path clip-path=\"url(#clip280)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip280)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip280)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip280)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip280)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip280)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip280)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip280)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip283\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip283)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip283)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip283)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip283)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip283)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip283)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip283)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip283)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip283)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip283)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip280)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip280)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip280)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip280)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip280)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip280)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip280)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip280)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip280)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip280)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip280)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip280)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip280)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip280)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip280)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip283)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-32.6883 161.555,-1431.46 162.114,-2765.92 162.673,-1334.51 163.232,-2611.06 163.792,-3705.95 164.351,-4798.65 164.91,-4679.76 165.469,-5658.19 166.029,-6466.17 166.588,-7252.73 167.147,-8018.7 167.706,-8617.75 168.266,-9204.6 168.825,-9704.18 169.384,-10160.7 169.943,-10583.2 170.503,-10245.6 171.062,-9953.91 171.621,-10315 172.18,-10624.3 172.74,-10365.4 173.299,-10625 173.858,-10378.9 174.417,-10577.4 174.977,-10728.4 175.536,-10859.5 176.095,-10972.3 176.655,-11047.3 177.214,-10782.4 177.773,-10846.7 178.332,-10876 178.892,-10878.9 179.451,-10867.6 180.01,-10604.9 180.569,-10573.4 181.129,-10526.6 181.688,-10452.3 182.247,-9998.61 182.806,-9915.79 183.366,-9487.7 183.925,-9410.14 184.484,-9327.57 185.043,-9233.33 185.603,-8991.31 186.162,-8753.99 186.721,-8536.94 187.28,-8429.65 187.84,-8310.24 188.399,-8090.51 188.958,-7970.58 189.517,-7855.33 190.077,-7548.98 190.636,-7414.6 191.195,-7200.24 191.754,-7058.85 192.314,-6917.67 192.873,-6627.1 193.432,-6337.46 193.991,-6202.34 194.551,-6064.92 195.11,-5802.38 195.669,-5614.82 196.228,-5426.24 196.788,-5248.58 197.347,-5018.55 197.906,-4795.67 198.465,-4634.03 199.025,-4520.16 199.584,-4317.69 200.143,-4079.22 200.702,-3937.82 201.262,-3711.13 201.821,-3535.57 202.38,-3368.39 202.939,-3204.29 203.499,-3085.95 204.058,-2936.02 204.617,-2858.54 205.176,-2752.37 205.736,-2642.63 206.295,-2469.85 206.854,-2302.05 207.413,-2237.34 207.973,-2110.8 208.532,-2048.79 209.091,-1929.44 209.65,-1871.12 210.21,-1812.87 210.769,-1696.06 211.328,-1578.81 211.887,-1465.56 212.447,-1388.94 213.006,-1310.21 213.565,-1205.57 214.124,-1132.8 214.684,-981.686 215.243,-886.34 215.802,-768.174 216.361,-710.372 216.921,-673.11 217.48,-588.058 218.039,-531.473 218.598,-452.556 219.158,-376.136 219.717,-348.634 220.276,-280.132 220.835,-239.025 221.395,-106.126 221.954,-42.3717 222.513,-2.78583 223.072,11.244 223.632,28.9528 224.191,47.4491 224.75,84.7409 225.309,144.166 225.869,178.659 226.428,212.09 226.987,227.672 227.546,281.457 228.106,314.092 228.665,341.951 229.224,373.319 229.783,441.978 230.343,465.896 230.902,490.779 231.461,519.26 232.02,503.188 232.58,529.635 233.139,534.877 233.698,543.772 234.257,553.927 234.817,563.224 235.376,589.175 235.935,615.908 236.494,641.09 237.054,626.557 237.613,668.219 238.172,693.065 238.731,734.842 239.291,756.508 239.85,792.483 240.409,791.341 240.968,827.051 241.528,823.917 242.087,858.149 242.646,819.671 243.205,856.927 243.765,886.921 244.324,920.307 244.883,968.474 245.442,980.51 246.002,989.703 246.561,981.065 247.12,974.408 247.679,950.81 248.239,997.262 248.798,1059.41 249.357,1065.21 249.916,1050.5 250.476,1078.49 251.035,1139.22 251.594,1140.75 252.153,1123.79 252.713,1109.27 253.272,1062.56 253.831,1052 254.39,1043.44 254.95,1050.54 255.509,1043.06 256.068,1037.32 256.627,1062.89 257.187,1051.89 257.746,1023.56 258.305,1033.14 258.864,1029.18 259.424,1032.32 259.983,1025.79 260.542,1070.24 261.101,1062.72 261.661,1071.39 262.22,1044.64 262.779,1006.17 263.338,966.229 263.898,962.956 264.457,978.423 265.016,1006.53 265.575,1019.48 266.135,977.884 266.694,940.41 267.253,1005.63 267.812,1002.69 268.372,980.348 268.931,979.288 269.49,993.663 270.049,1005.89 270.609,1000.6 271.168,995.559 271.727,1008.27 272.286,1035.9 272.846,1026.05 273.405,1023 273.964,1036.15 274.523,997.706 275.083,995.64 275.642,1008.36 276.201,1039.08 276.76,1048.6 277.32,1039.6 277.879,1066.16 278.438,1089.98 278.997,1079.72 279.557,1071.24 280.116,1062.75 280.675,1058.7 281.234,1114.72 281.794,1102.66 282.353,1095.44 282.912,1067.53 283.471,1108.99 284.031,1115.6 284.59,1104.9 285.149,1111.84 285.708,1100.62 286.268,1053.81 286.827,1078.92 287.386,1019.52 287.945,994.794 288.505,1006.46 289.064,987.45 289.623,984.32 290.182,995.045 290.742,940.498 291.301,958.682 291.86,991.023 292.419,985.834 292.979,999.244 293.538,1027.67 294.097,1018.55 294.656,1013.13 295.216,1004.58 295.775,1033.27 296.334,1023.31 296.893,1015.86 297.453,1076.68 298.012,1086.18 298.571,1124.9 299.13,1081.1 299.69,1073.29 300.249,1080.06 300.808,1053.73 301.368,1075.38 301.927,1065.39 302.486,1022.14 303.045,1062.04 303.605,1039.97 304.164,1052.39 304.723,1026.69 305.282,1021.23 305.842,996.511 306.401,1039.33 306.96,1047.35 307.519,1043.53 308.079,999.85 308.638,1028.31 309.197,1037.03 309.756,1045.19 310.316,1052.98 310.875,1027.43 311.434,1067.08 311.993,1075.51 312.553,1098.72 313.112,1089.32 313.671,1107.78 314.23,1129.26 314.79,1118.19 315.349,1122.06 315.908,1041.11 316.467,1054.22 317.027,1057.48 317.586,1046.21 318.145,1069.34 318.704,1045.52 319.264,987.059 319.823,1002.22 320.382,946.676 320.941,943.686 321.501,943.014 322.06,920.714 322.619,948.888 323.178,942.266 323.738,958.068 324.297,970.038 324.856,965.492 325.415,962.63 325.975,940.364 326.534,934.883 327.093,932.337 327.652,909.723 328.212,904.982 328.771,903.7 329.33,933.354 329.889,912.198 330.449,975.545 331.008,988.896 331.567,998.385 332.126,1023.62 332.686,1014.43 333.245,1009.63 333.804,995.884 334.363,957.188 334.923,917.923 335.482,931.151 336.041,942.671 336.6,970.332 337.16,916.557 337.719,914.809 338.278,895.043 338.837,875.172 339.397,856.58 339.956,824.31 340.515,827.863 341.074,796.636 341.634,764.807 342.193,770.765 342.752,805.452 343.311,771.827 343.871,774.417 344.43,711.466 344.989,718.463 345.548,724.807 346.108,732.179 346.667,739.134 347.226,730.603 347.785,737.853 348.345,777.148 348.904,779.588 349.463,751.305 350.022,790.034 350.582,842.787 351.141,858.097 351.7,873.904 352.259,887.06 352.819,898.563 353.378,893.742 353.937,908.882 354.496,904.911 355.056,916.631 355.615,913.03 356.174,896.486 356.733,875.121 357.293,871.543 357.852,900.643 358.411,877.131 358.97,926.129 359.53,968.424 360.089,960.469 360.648,951.243 361.207,974.989 361.767,969.227 362.326,960.983 362.885,956.013 363.444,934.41 364.004,929.622 364.563,926.323 365.122,917.56 365.681,945.905 366.241,936.448 366.8,932.715 367.359,925.934 367.918,919.316 368.478,884.68 369.037,912.594 369.596,911.223 370.155,890.828 370.715,867.911 371.274,865.315 371.833,876.317 372.392,874.81 372.952,901.81 373.511,926.195 374.07,935.36 374.629,931.437 375.189,906.482 375.748,919.792 376.307,895.76 376.866,905.226 377.426,900.748 377.985,897.445 378.544,906.677 379.103,933.755 379.663,920.765 380.222,946.336 380.781,922.081 381.34,918.078 381.9,943.633 382.459,954.403 383.018,961.926 383.577,922.152 384.137,899.179 384.696,926.566 385.255,902.947 385.814,913.247 386.374,937.805 386.933,913.516 387.492,890.787 388.051,935.369 388.611,922.478 389.17,931.551 389.729,926.502 390.288,884.941 390.848,878.917 391.407,891.771 391.966,902.292 392.525,912.611 393.085,876.091 393.644,890.933 394.203,902.8 394.762,896.314 395.322,903.766 395.881,895.854 396.44,899.217 396.999,857.949 397.559,870.864 398.118,881.573 398.677,876.128 399.236,856.673 399.796,883.668 400.355,879.455 400.914,856.844 401.473,869.996 402.033,881.034 402.592,893.88 403.151,856.344 403.71,853.701 404.27,833.527 404.829,830.89 405.388,827.548 405.947,807.869 406.507,752.802 407.066,755.839 407.625,723.166 408.184,723.325 408.744,674.306 409.303,665.45 409.862,669.408 410.421,672.592 410.981,664.48 411.54,687.172 412.099,705.922 412.658,696.965 413.218,700.662 413.777,687.081 414.336,693.392 414.895,698.51 415.455,702.487 416.014,705.677 416.573,689.638 417.132,694.335 417.692,700.413 418.251,718.384 418.81,703.788 419.369,740.935 419.929,742.25 420.488,759.586 421.047,758.139 421.606,723.222 422.166,693.339 422.725,711.507 423.284,714.397 423.843,732.607 424.403,749.724 424.962,768.067 425.521,772.81 426.08,774.799 426.64,758.686 427.199,759.07 427.758,761.155 428.318,774.144 428.877,741.311 429.436,743.139 429.995,742.807 430.555,712.536 431.114,713.008 431.673,697.324 432.232,683.168 432.792,706.64 433.351,713.819 433.91,713.991 434.469,716.885 435.029,716.347 435.588,734.119 436.147,734.445 436.706,735.655 437.266,751.715 437.825,770.84 438.384,754.34 438.943,799.387 439.503,768.44 440.062,785.609 440.621,769.782 441.18,768.688 441.74,734.255 442.299,737.083 442.858,721.258 443.417,725.034 443.977,728.513 444.536,747.476 445.095,732.641 445.654,721.765 446.214,708.391 446.773,724.96 447.332,711.897 447.891,680.898 448.451,700.564 449.01,687.778 449.569,687.45 450.128,690.347 450.688,710.059 451.247,694.795 451.806,730.029 452.365,733.078 452.925,750.763 453.484,749.928 454.043,733.385 454.602,736.303 455.162,720.895 455.721,788.436 456.28,771.219 456.839,767.475 457.399,719.331 457.958,688.065 458.517,688.689 459.076,691.132 459.636,712.172 460.195,762.488 460.754,761.315 461.313,773.904 461.873,805.574 462.432,805.607 462.991,800.847 463.55,829.71 464.11,807.542 464.669,771.399 465.228,769.838 465.787,765.498 466.347,764.593 466.906,783.321 467.465,779.913 468.024,808.898 468.584,823.51 469.143,819.332 469.702,813.355 470.261,826.391 470.821,820.947 471.38,851.027 471.939,829.97 472.498,794.153 473.058,755.285 473.617,789.861 474.176,818.888 474.735,797.287 475.295,779.404 475.854,757.478 476.413,772.257 476.972,766.783 477.532,766.037 478.091,763.859 478.65,761.755 479.209,771.845 479.769,770.009 480.328,768.098 480.887,780.437 481.446,779.525 482.006,790.619 482.565,757.252 483.124,767.819 483.683,767.654 484.243,733.463 484.802,732.668 485.361,779.511 485.92,776.637 486.48,772.731 487.039,773.373 487.598,753.944 488.157,753.912 488.717,735.339 489.276,753.93 489.835,735.76 490.394,754.17 490.954,750.517 491.513,750.016 492.072,735.889 492.631,737.698 493.191,753.77 493.75,766.745 494.309,765.736 494.868,814.44 495.428,824.049 495.987,819.949 496.546,813.731 497.105,856.776 497.665,853.22 498.224,850.359 498.783,809.787 499.342,807.702 499.902,805.841 500.461,819.251 501.02,815.323 501.579,806.797 502.139,769.965 502.698,779.62 503.257,778.813 503.816,760.132 504.376,772.023 504.935,757.71 505.494,786.483 506.053,748.706 506.613,761.356 507.172,761.978 507.731,728.149 508.29,726.914 508.85,709.186 509.409,712.098 509.968,712.207 510.527,745.554 511.087,726.953 511.646,708.54 512.205,714.428 512.764,716.185 513.324,717.454 513.883,734.426 514.442,735.87 515.001,719.489 515.561,703.329 516.12,672.515 516.679,708.646 517.238,707.773 517.798,759.926 518.357,793.366 518.916,789.057 519.475,784.978 520.035,762.402 520.594,731.193 521.153,744.663 521.712,744.424 522.272,745.568 522.831,776.403 523.39,790.262 523.949,801.8 524.509,797.87 525.068,794.603 525.627,791.545 526.186,738.238 526.746,751.686 527.305,796.059 527.864,726.112 528.423,707.618 528.983,709.077 529.542,726.115 530.101,760.015 530.66,757.242 531.22,774.019 531.779,771.623 532.338,767.281 532.897,784.19 533.457,781.328 534.016,762.759 534.575,762.095 535.134,758.95 535.694,761.622 536.253,760.802 536.812,760.206 537.371,792.472 537.931,809.751 538.49,792.525 539.049,789.502 539.608,786.361 540.168,753.746 540.727,718.056 541.286,689.253 541.845,706.013 542.405,708.315 542.964,721.729 543.523,740.175 544.082,755.937 544.642,751.915 545.201,751.631 545.76,745.862 546.319,743.547 546.879,729.069 547.438,711.994 547.997,663.735 548.556,667.644 549.116,673.6 549.675,663.067 550.234,700.682 550.793,734.693 551.353,750.861 551.912,747.865 552.471,728.657 553.031,727.02 553.59,728.636 554.149,726.674 554.708,758.534 555.268,758.616 555.827,773.996 556.386,787.129 556.945,801.401 557.505,811.751 558.064,807.691 558.623,820.597 559.182,845.309 559.742,819.907 560.301,830.836 560.86,806.401 561.419,817.464 561.979,794.39 562.538,822.081 563.097,831.099 563.656,858.481 564.216,834.023 564.775,808.798 565.334,801.799 565.893,812.503 566.453,786.543 567.012,730.247 567.571,730.733 568.13,694.869 568.69,692.976 569.249,725.199 569.808,710.253 570.367,678.471 570.927,677.124 571.486,727.051 572.045,771.473 572.604,770.805 573.164,801.789 573.723,798.506 574.282,811.001 574.841,807.295 575.401,804.121 575.96,781.065 576.519,792.611 577.078,819.134 577.638,813.635 578.197,795.466 578.756,820.797 579.315,816.659 579.875,795.346 580.434,805.022 580.993,815.956 581.552,841.501 582.112,818.661 582.671,764.488 583.23,744.211 583.789,707.672 584.349,728.081 584.908,711.481 585.467,727.316 586.026,725.532 586.586,740.81 587.145,752.126 587.704,751.064 588.263,729.209 588.823,729.263 589.382,728.165 589.941,742.498 590.5,725.05 591.06,723.506 591.619,722.26 592.178,723.747 592.737,690.558 593.297,726.305 593.856,711.584 594.415,711.739 594.974,708.447 595.534,693.286 596.093,712.638 596.652,679.215 597.211,665.021 597.771,652.609 598.33,687.06 598.889,637.448 599.448,640.976 600.008,673.407 600.567,676.553 601.126,693.563 601.685,710.606 602.245,695.604 602.804,714.883 603.363,699.342 603.922,681.046 604.482,665.351 605.041,665.563 605.6,653.556 606.159,655.16 606.719,676.248 607.278,678.63 607.837,697.105 608.396,697.056 608.956,682.416 609.515,666.702 610.074,623.353 610.633,627.591 611.193,630.162 611.752,617.471 612.311,672.265 612.87,657.258 613.43,675.636 613.989,708.258 614.548,708.593 615.107,720.46 615.667,733.036 616.226,732.867 616.785,729.516 617.344,712.184 617.904,693.427 618.463,627.304 619.022,643.828 619.581,631.119 620.141,636.729 620.7,638.993 621.259,627.403 621.818,645.211 622.378,647.689 622.937,650.855 623.496,639.04 624.055,656.385 624.615,656.635 625.174,690.021 625.733,692.367 626.292,725.652 626.852,722.769 627.411,754.638 627.97,737.324 628.529,740.077 629.089,668.749 629.648,674.531 630.207,678.966 630.766,681.116 631.326,700.326 631.885,704.802 632.444,716.702 633.003,713.363 633.563,732.846 634.122,732.827 634.681,712.005 635.24,759.267 635.8,757.083 636.359,770.83 636.918,751.752 637.477,734.042 638.037,719.696 638.596,750.577 639.155,666.515 639.714,665.695 640.274,666.198 640.833,699.663 641.392,713.916 641.951,743.92 642.511,729.625 643.07,725.492 643.629,725.939 644.188,720.352 644.748,685.663 645.307,700.703 645.866,717.627 646.425,701.089 646.985,702.428 647.544,703.545 648.103,735.028 648.662,728.546 649.222,711.083 649.781,712.367 650.34,681.207 650.899,699.527 651.459,701.863 652.018,702.442 652.577,719.753 653.136,686.036 653.696,637.75 654.255,606.681 654.814,577.691 655.373,568.837 655.933,574.755 656.492,626.002 657.051,610.947 657.61,631.042 658.17,622.126 658.729,641.366 659.288,642.987 659.847,660.222 660.407,659.608 660.966,675.261 661.525,676.111 662.084,661.471 662.644,681.9 663.203,649.621 663.762,653.924 664.321,660.823 664.881,679.003 665.44,666.417 665.999,686.874 666.558,703.888 667.118,691.539 667.677,708.089 668.236,690.289 668.795,721.609 669.355,721.122 669.914,718.43 670.473,734.074 671.032,748.544 671.592,764.71 672.151,762.525 672.71,772.369 673.269,770.232 673.829,766.416 674.388,765.963 674.947,778.408 675.506,756.331 676.066,739.354 676.625,753.891 677.184,737.508 677.743,734.346 678.303,747.257 678.862,744.265 679.421,756.65 679.981,783.273 680.54,777.113 681.099,776.389 681.658,723.101 682.218,757.504 682.777,767.838 683.336,780.384 683.895,757.463 684.455,756.163 685.014,753.93 685.573,766.661 686.132,733.326 686.692,734.412 687.251,779.917 687.81,838.206 688.369,800.788 688.929,778.329 689.488,800.403 690.047,826.504 690.606,823.202 691.166,768.888 691.725,731.426 692.284,715.27 692.843,731.111 693.403,712.381 693.962,660.894 694.521,660.761 695.08,661.612 695.64,677.875 696.199,662.066 696.758,647.422 697.317,652.087 697.877,639.145 698.436,659.494 698.995,648.881 699.554,634.04 700.114,652.799 700.673,618.646 701.232,588.788 701.791,596.247 702.351,631.931 702.91,620.122 703.469,604.858 704.028,577.147 704.588,578.216 705.147,569.703 705.706,578.509 706.265,618.106 706.825,638.359 707.384,640.856 707.943,658.492 708.502,659.289 709.062,642.761 709.621,630.275 710.18,633.394 710.739,652.653 711.299,653.584 711.858,643.6 712.417,646.713 712.976,653.179 713.536,655.738 714.095,641.696 714.654,645.062 715.213,695.685 715.773,729.353 716.332,681.607 716.891,698.907 717.45,682.375 718.01,680.824 718.569,660.649 719.128,677.101 719.687,664.587 720.247,663.79 720.806,648.722 721.365,633.866 721.924,653.388 722.484,659.506 723.043,676.295 723.602,661.042 724.161,663.411 724.721,683.337 725.28,681.254 725.839,666.964 726.398,605.169 726.958,629.147 727.517,649.028 728.076,623.6 728.635,644.331 729.195,646.164 729.754,679.047 730.313,664.894 730.872,655.211 731.432,654.909 731.991,656.601 732.55,673.319 733.109,639.954 733.669,609.884 734.228,617.331 734.787,683.487 735.346,652.312 735.906,654.168 736.465,643.628 737.024,649.397 737.583,638.758 738.143,659.592 738.702,693.108 739.261,660.729 739.82,661.505 740.38,677.114 740.939,677.931 741.498,699.542 742.057,684.83 742.617,701.49 743.176,735.896 743.735,733.295 744.294,730.871 744.854,746.26 745.413,741.021 745.972,756.308 746.531,725.111 747.091,724.526 747.65,724.957 748.209,725.77 748.768,723.37 749.328,739.528 749.887,722.412 750.446,738.443 751.005,771.126 751.565,799.023 752.124,781.245 752.683,809.833 753.242,801.653 753.802,794.008 754.361,755.308 754.92,751.267 755.479,743.688 756.039,759.795 756.598,752.999 757.157,765.76 757.716,778.09 758.276,755.756 758.835,782.179 759.394,775.347 759.953,740.773 760.513,724.059 761.072,721.757 761.631,738.401 762.19,753.692 762.75,750.148 763.309,777.795 763.868,758.757 764.427,740.614 764.987,721.2 765.546,736.451 766.105,736.023 766.664,762.955 767.224,739.857 767.783,737.69 768.342,752.663 768.901,750.348 769.461,763.993 770.02,743.387 770.579,739.64 771.138,753.555 771.698,747.942 772.257,728.176 772.816,711.365 773.375,710.419 773.935,709.638 774.494,709.281 775.053,692.144 775.612,693.898 776.172,704.057 776.731,718.933 777.29,664.309 777.849,648.961 778.409,637.238 778.968,621.622 779.527,623.875 780.086,612.256 780.646,629.308 781.205,646.48 781.764,649.948 782.323,652.449 782.883,670.144 783.442,674.154 784.001,674.198 784.56,689.966 785.12,625.045 785.679,640.174 786.238,643.804 786.797,663.403 787.357,630.118 787.916,635.272 788.475,635.704 789.034,638.802 789.594,607.541 790.153,610.206 790.712,613.155 791.271,581.981 791.831,586.47 792.39,608.493 792.949,581.591 793.508,587.847 794.068,609.837 794.627,630.575 795.186,635.321 795.745,621.645 796.305,611.676 796.864,631.623 797.423,636.036 797.982,624.232 798.542,613.157 799.101,634.266 799.66,635.243 800.219,638.001 800.779,642.872 801.338,658.91 801.897,708.901 802.456,709.925 803.016,661.146 803.575,659.971 804.134,628.909 804.693,649.814 805.253,652.841 805.812,657.838 806.371,660.004 806.931,674.584 807.49,642.25 808.049,626.241 808.608,642.698 809.168,662.745 809.727,664.119 810.286,665.329 810.845,669.13 811.405,635.776 811.964,642.365 812.523,645.287 813.082,664.024 813.642,697.919 814.201,681.642 814.76,680.338 815.319,695.831 815.879,694.758 816.438,725.732 816.997,756.858 817.556,772.266 818.116,770.536 818.675,797.626 819.234,856.037 819.793,863.777 820.353,857.684 820.912,864.6 821.471,837.78 822.03,798.301 822.59,793.871 823.149,793.796 823.708,769.034 824.267,765.569 824.827,744.397 825.386,758.397 825.945,691.877 826.504,706.734 827.064,720.336 827.623,719.43 828.182,714.759 828.741,744.15 829.301,773.386 829.86,801.371 830.419,796.576 830.978,791.104 831.538,795.233 832.097,790.719 832.656,754.629 833.215,739.78 833.775,733.303 834.334,748.405 834.893,744.329 835.452,758.924 836.012,756.838 836.571,738.642 837.13,736.806 837.689,768.627 838.249,763.696 838.808,773.695 839.367,818.399 839.926,779.172 840.486,774.327 841.045,759.077 841.604,772.977 842.163,767.335 842.723,731.408 843.282,709.362 843.841,676.406 844.4,627.306 844.96,633.24 845.519,620.056 846.078,625.813 846.637,596.361 847.197,582.726 847.756,606.693 848.315,613.287 848.874,652.852 849.434,655.214 849.993,660.428 850.552,661.023 851.111,662.656 851.671,663.606 852.23,649.542 852.789,650.887 853.348,637.69 853.908,673.587 854.467,704.935 855.026,717.159 855.585,680.698 856.145,714.279 856.704,682.024 857.263,665.377 857.822,666.865 858.382,684.098 858.941,668.04 859.5,633.051 860.059,620.347 860.619,639.011 861.178,637.033 861.737,622.554 862.296,609.29 862.856,593.168 863.415,596.452 863.974,618.301 864.533,601.537 865.093,589.984 865.652,611.359 866.211,611.971 866.77,598.507 867.33,606.596 867.889,596.362 868.448,600.44 869.007,572.03 869.567,643.723 870.126,618.5 870.685,603.964 871.244,608.677 871.804,616.725 872.363,621.256 872.922,641.878 873.481,631.187 874.041,638.119 874.6,643.838 875.159,644.255 875.718,599.674 876.278,621.755 876.837,623.793 877.396,624.321 877.955,626.767 878.515,647.663 879.074,638.75 879.633,676.463 880.192,645.017 880.752,647.058 881.311,651.385 881.87,655.67 882.429,672.801 882.989,692.581 883.548,707.361 884.107,719.889 884.666,717.195 885.226,731.002 885.785,758.139 886.344,736.523 886.903,718.607 887.463,731.283 888.022,745.47 888.581,727.801 889.14,740.199 889.7,717.635 890.259,750.694 890.818,744.315 891.377,737.332 891.937,732.127 892.496,745.366 893.055,728.206 893.614,754.465 894.174,779.709 894.733,772.255 895.292,770.035 895.851,766.453 896.411,793.932 896.97,772.032 897.529,765.655 898.088,758.252 898.648,739.363 899.207,734.965 899.766,730.209 900.325,708.431 900.885,724.432 901.444,723.274 902.003,736.047 902.562,746.03 903.122,741.18 903.681,739.961 904.24,753.121 904.799,763.758 905.359,790.952 905.918,771.61 906.477,767.321 907.036,764.752 907.596,712.271 908.155,695.084 908.714,691.639 909.273,676.528 909.833,661.797 910.392,651.767 910.951,619.762 911.51,654.807 912.07,672.059 912.629,675 913.188,707.407 913.747,693.508 914.307,659.7 914.866,662.166 915.425,649.485 915.984,667.979 916.544,651.547 917.103,637.626 917.662,641.444 918.221,627.419 918.781,650.803 919.34,667.931 919.899,650.84 920.458,673.052 921.018,641.842 921.577,645.945 922.136,630.777 922.695,637.262 923.255,638.665 923.814,607.779 924.373,596.215 924.932,602.551 925.492,624.242 926.051,660.631 926.61,711.782 927.169,710.907 927.729,657.508 928.288,641.33 928.847,642.163 929.406,644.486 929.966,628.675 930.525,636.827 931.084,656.892 931.644,673.244 932.203,692.184 932.762,692.073 933.321,707.499 933.881,737.898 934.44,763.776 934.999,759.079 935.558,803.278 936.118,780.334 936.677,760.796 937.236,756.593 937.795,753.131 938.355,736.545 938.914,766.842 939.473,731.739 940.032,696.689 940.592,741.95 941.151,742.869 941.71,759.239 942.269,739.509 942.829,769.609 943.388,761.894 943.947,775.608 944.506,802.254 945.066,795.717 945.625,788.284 946.184,764.274 946.743,758.027 947.303,707.987 947.862,737.83 948.421,751.719 948.98,746.624 949.54,747.195 950.099,743.184 950.658,757.609 951.217,782.632 951.777,776.42 952.336,722.25 952.895,733.264 953.454,732.155 954.014,697.693 954.573,713.169 955.132,729.195 955.691,711.227 956.251,709.244 956.81,707.203 957.369,669.556 957.928,654.494 958.488,655.711 959.047,704.516 959.606,671.848 960.165,637.429 960.725,622.744 961.284,607.453 961.843,630.4 962.402,617.916 962.962,622.782 963.521,593.641 964.08,581.934 964.639,567.937 965.199,574.987 965.758,567.026 966.317,588.214 966.876,595.386 967.436,603.118 967.995,621.216 968.554,593.534 969.113,615.233 969.673,651.768 970.232,636.166 970.791,639.289 971.35,628.418 971.91,633.993 972.469,667.337 973.028,686.524 973.587,684.401 974.147,683.145 974.706,668.39 975.265,733.429 975.824,714.776 976.384,747.919 976.943,711.857 977.502,710.926 978.061,744.706 978.621,726.581 979.18,757.168 979.739,737.798 980.298,752.33 980.858,736.265 981.417,719.57 981.976,687.141 982.535,688.646 983.095,707.478 983.654,706.695 984.213,671.407 984.772,671.916 985.332,690.543 985.891,676.256 986.45,643.228 987.009,675.507 987.569,676.069 988.128,675.13 988.687,659.207 989.246,675.367 989.806,661.144 990.365,680.276 990.924,667.667 991.483,665.552 992.043,651.158 992.602,656.853 993.161,677.176 993.72,679.381 994.28,692.629 994.839,709.49 995.398,738.613 995.957,716.799 996.517,715.062 997.076,732.574 997.635,747.499 998.194,726.327 998.754,757.178 999.313,752.447 999.872,731.152 1000.43,731.884 1000.99,730.692 1001.55,726.893 1002.11,677.975 1002.67,682.12 1003.23,698.901 1003.79,696.432 1004.35,693.531 1004.91,695.32 1005.46,706.318 1006.02,753.937 1006.58,735.449 1007.14,718.066 1007.7,696.591 1008.26,696.383 1008.82,680.186 1009.38,665.006 1009.94,700.8 1010.5,713.929 1011.06,694.346 1011.62,676.043 1012.18,672.209 1012.73,652.886 1013.29,655.696 1013.85,675.331 1014.41,676.472 1014.97,697.257 1015.53,679.27 1016.09,648.657 1016.65,680.573 1017.21,710.549 1017.77,705.324 1018.33,706.857 1018.89,723.162 1019.45,740.431 1020.01,726.65 1020.56,708.567 1021.12,707.139 1021.68,703.465 1022.24,735.987 1022.8,763.857 1023.36,724.498 1023.92,706.706 1024.48,691.579 1025.04,690.807 1025.6,692.188 1026.16,755.359 1026.72,717.975 1027.28,731.69 1027.83,748.081 1028.39,747.377 1028.95,744.972 1029.51,727.392 1030.07,730.7 1030.63,729.194 1031.19,725.386 1031.75,673.269 1032.31,643.825 1032.87,645.122 1033.43,631.213 1033.99,668.058 1034.55,683.923 1035.1,714.07 1035.66,712.206 1036.22,710.075 1036.78,739.051 1037.34,699.567 1037.9,716.749 1038.46,714.855 1039.02,728.475 1039.58,723.971 1040.14,704.809 1040.7,705.562 1041.26,673.397 1041.82,658.447 1042.38,661.532 1042.93,645.466 1043.49,663.097 1044.05,663.024 1044.61,630.673 1045.17,616.72 1045.73,617.783 1046.29,635.407 1046.85,606.316 1047.41,609.041 1047.97,661.256 1048.53,662.76 1049.09,660.771 1049.65,658.062 1050.2,674.494 1050.76,706.97 1051.32,736.698 1051.88,751.618 1052.44,750.427 1053,762.422 1053.56,727.873 1054.12,724.333 1054.68,738.573 1055.24,723.335 1055.8,705.2 1056.36,691.922 1056.92,710.008 1057.48,691.338 1058.03,653.993 1058.59,656.554 1059.15,658.553 1059.71,642.537 1060.27,661.436 1060.83,663.554 1061.39,684.717 1061.95,667.663 1062.51,666.542 1063.07,650.417 1063.63,666.484 1064.19,683.769 1064.75,684.051 1065.3,687.248 1065.86,702.953 1066.42,700.459 1066.98,701.622 1067.54,700.88 1068.1,716.646 1068.66,714.403 1069.22,713.642 1069.78,709.57 1070.34,707.273 1070.9,670.531 1071.46,704.598 1072.02,690.987 1072.57,689.992 1073.13,692.753 1073.69,708.658 1074.25,691.396 1074.81,689.2 1075.37,673.439 1075.93,670.529 1076.49,604.888 1077.05,606.476 1077.61,626.318 1078.17,626.645 1078.73,612.696 1079.29,634.292 1079.85,650.368 1080.4,635.134 1080.96,670.224 1081.52,620.169 1082.08,605.6 1082.64,612.191 1083.2,615.522 1083.76,584.623 1084.32,594.498 1084.88,600.611 1085.44,641.513 1086,643.817 1086.56,645.297 1087.12,627.619 1087.67,647.012 1088.23,697.65 1088.79,714.062 1089.35,682.266 1089.91,648.759 1090.47,650.817 1091.03,635.886 1091.59,639.537 1092.15,624.736 1092.71,626.652 1093.27,630.496 1093.83,662.871 1094.39,645.07 1094.94,645.493 1095.5,662.885 1096.06,676.864 1096.62,695.189 1097.18,711.386 1097.74,728.113 1098.3,742.477 1098.86,725.098 1099.42,738.838 1099.98,702.486 1100.54,666.786 1101.1,654.344 1101.66,621.467 1102.22,657.581 1102.77,658.345 1103.33,674.982 1103.89,680.302 1104.45,699.975 1105.01,716.966 1105.57,733.244 1106.13,713.995 1106.69,727.639 1107.25,709.27 1107.81,753.776 1108.37,753.262 1108.93,750.407 1109.49,763.619 1110.04,762.817 1110.6,762.536 1111.16,743.612 1111.72,739.62 1112.28,699.895 1112.84,698.865 1113.4,682.492 1113.96,670.079 1114.52,700.778 1115.08,687.334 1115.64,705.619 1116.2,704.066 1116.76,689.535 1117.31,734.867 1117.87,748.781 1118.43,758.344 1118.99,692.253 1119.55,690.527 1120.11,673.248 1120.67,705.954 1121.23,721.048 1121.79,719.043 1122.35,720.691 1122.91,716.433 1123.47,695.571 1124.03,679.186 1124.59,692.536 1125.14,677.629 1125.7,694.769 1126.26,727.958 1126.82,692.752 1127.38,706.177 1127.94,704.501 1128.5,724.232 1129.06,688.6 1129.62,740.428 1130.18,769.682 1130.74,763.964 1131.3,758.119 1131.86,784.72 1132.41,799.166 1132.97,795.658 1133.53,807.771 1134.09,783.704 1134.65,759.108 1135.21,755.241 1135.77,766.258 1136.33,759.738 1136.89,707.045 1137.45,704.555 1138.01,702.965 1138.57,702.187 1139.13,687.306 1139.68,704.73 1140.24,705.877 1140.8,675.444 1141.36,673.808 1141.92,656.865 1142.48,690.034 1143.04,689.125 1143.6,700.578 1144.16,682.452 1144.72,666.585 1145.28,683.018 1145.84,683.086 1146.4,635.481 1146.96,643.219 1147.51,661.591 1148.07,659.415 1148.63,628.223 1149.19,626.9 1149.75,632.109 1150.31,632.561 1150.87,667.261 1151.43,666.589 1151.99,696.905 1152.55,665.562 1153.11,663.936 1153.67,683.351 1154.23,652.51 1154.78,638.997 1155.34,671.005 1155.9,671.81 1156.46,658.768 1157.02,658.921 1157.58,646.656 1158.14,651.381 1158.7,621.045 1159.26,610.197 1159.82,615.842 1160.38,633.921 1160.94,636.123 1161.5,638.829 1162.05,638.971 1162.61,608.435 1163.17,610.621 1163.73,616.084 1164.29,604.353 1164.85,611.596 1165.41,613.671 1165.97,616.557 1166.53,654.709 1167.09,670.395 1167.65,655.591 1168.21,641.623 1168.77,678.872 1169.33,677.354 1169.88,708.519 1170.44,690.879 1171,705.022 1171.56,705.485 1172.12,722.362 1172.68,718.376 1173.24,764.672 1173.8,775.507 1174.36,759.182 1174.92,787.948 1175.48,736.006 1176.04,764.46 1176.6,792.395 1177.15,750.308 1177.71,762.626 1178.27,758.28 1178.83,760.02 1179.39,689.603 1179.95,702.703 1180.51,716.925 1181.07,714.67 1181.63,714.304 1182.19,745.197 1182.75,761.111 1183.31,775.691 1183.87,800.641 1184.43,796.452 1184.98,771.074 1185.54,751.387 1186.1,744.93 1186.66,724.057 1187.22,670.605 1187.78,703.66 1188.34,668.68 1188.9,655.044 1189.46,657.47 1190.02,627.038 1190.58,631.931 1191.14,567.629 1191.7,558.146 1192.25,581.087 1192.81,588.068 1193.37,593.9 1193.93,595.454 1194.49,602.344 1195.05,622.177 1195.61,605.203 1196.17,659.236 1196.73,680.198 1197.29,681.06 1197.85,684.859 1198.41,685.326 1198.97,689.71 1199.52,704.437 1200.08,718.948 1200.64,699.942 1201.2,697.512 1201.76,679.474 1202.32,636.333 1202.88,624.158 1203.44,625.921 1204,627.427 1204.56,631.05 1205.12,665.937 1205.68,654.754 1206.24,639.701 1206.8,661.032 1207.35,649.844 1207.91,603.055 1208.47,657.974 1209.03,697.341 1209.59,728.157 1210.15,705.226 1210.71,703.919 1211.27,701.875 1211.83,701.329 1212.39,673.354 1212.95,644.263 1213.51,645.027 1214.07,613.079 1214.62,651.828 1215.18,620.995 1215.74,606.525 1216.3,626.47 1216.86,659.507 1217.42,661.214 1217.98,646.785 1218.54,663.33 1219.1,697.77 1219.66,693.408 1220.22,712.096 1220.78,643.599 1221.34,660.047 1221.89,661.324 1222.45,681.17 1223.01,647.062 1223.57,650.501 1224.13,653.547 1224.69,673.126 1225.25,657.652 1225.81,625.675 1226.37,630.299 1226.93,632.213 1227.49,637.192 1228.05,642.964 1228.61,646.22 1229.17,663.395 1229.72,646.387 1230.28,651.137 1230.84,621.582 1231.4,626.176 1231.96,597.224 1232.52,632.854 1233.08,620.901 1233.64,607.855 1234.2,615.338 1234.76,639.483 1235.32,642.148 1235.88,640.765 1236.44,658.309 1236.99,662.616 1237.55,678.357 1238.11,681.217 1238.67,696.869 1239.23,636.52 1239.79,622.381 1240.35,626.421 1240.91,643.662 1241.47,676.258 1242.03,658.966 1242.59,663.437 1243.15,631.422 1243.71,620.717 1244.26,637.029 1244.82,603.923 1245.38,623.787 1245.94,628.488 1246.5,661.659 1247.06,645.23 1247.62,632.348 1248.18,635.328 1248.74,652.321 1249.3,670.261 1249.86,703.592 1250.42,653.484 1250.98,656.331 1251.54,658.21 1252.09,704.569 1252.65,703.455 1253.21,685.504 1253.77,668.141 1254.33,654.027 1254.89,654.599 1255.45,675.522 1256.01,677.475 1256.57,678.007 1257.13,692.47 1257.69,726.076 1258.25,739.557 1258.81,737.165 1259.36,722.218 1259.92,720.137 1260.48,698.607 1261.04,681.883 1261.6,699.318 1262.16,715.778 1262.72,729.018 1263.28,709.261 1263.84,689.108 1264.4,687.582 1264.96,684.996 1265.52,682.67 1266.08,670.047 1266.63,671.609 1267.19,690.296 1267.75,690.947 1268.31,692.509 1268.87,691.678 1269.43,736.415 1269.99,735.18 1270.55,737.119 1271.11,732.091 1271.67,730.044 1272.23,728.305 1272.79,706.389 1273.35,735.879 1273.91,747.075 1274.46,744.772 1275.02,724.171 1275.58,737.377 1276.14,734.648 1276.7,747.729 1277.26,760.815 1277.82,772.279 1278.38,751.392 1278.94,780.208 1279.5,759.565 1280.06,737.983 1280.62,747.304 1281.18,780.94 1281.73,791.982 1282.29,803.073 1282.85,814.789 1283.41,808.667 1283.97,803.84 1284.53,796.115 1285.09,761.381 1285.65,778.097 1286.21,773.135 1286.77,787.405 1287.33,783.527 1287.89,797.015 1288.45,757.682 1289,754.601 1289.56,720.762 1290.12,719.676 1290.68,716.312 1291.24,712.851 1291.8,692.638 1292.36,694.462 1292.92,707.868 1293.48,708.268 1294.04,724.824 1294.6,708.521 1295.16,723.513 1295.72,723.469 1296.28,721.342 1296.83,717.853 1297.39,717.446 1297.95,760.672 1298.51,773.293 1299.07,750.865 1299.63,715.79 1300.19,720.296 1300.75,697.031 1301.31,662.364 1301.87,677.382 1302.43,692.394 1302.99,705.76 1303.55,703.286 1304.1,705.16 1304.66,706.194 1305.22,718.521 1305.78,759.967 1306.34,755.503 1306.9,765.314 1307.46,758.881 1308.02,738.214 1308.58,736.505 1309.14,733.202 1309.7,714.251 1310.26,743.503 1310.82,725.716 1311.38,690.336 1311.93,652.07 1312.49,672.866 1313.05,694.14 1313.61,675.968 1314.17,676.136 1314.73,658.742 1315.29,645.204 1315.85,663.355 1316.41,697.907 1316.97,645.853 1317.53,618.117 1318.09,620.775 1318.65,608.695 1319.2,563.042 1319.76,568.332 1320.32,589.4 1320.88,566.374 1321.44,539.76 1322,547.287 1322.56,555.651 1323.12,564.86 1323.68,554.879 1324.24,576.654 1324.8,535.112 1325.36,579.428 1325.92,586.22 1326.47,590.098 1327.03,597.338 1327.59,585.564 1328.15,591.743 1328.71,615.067 1329.27,619.253 1329.83,608.265 1330.39,628.816 1330.95,628.143 1331.51,613.239 1332.07,662.149 1332.63,662.57 1333.19,614.845 1333.75,654.436 1334.3,673.62 1334.86,677.09 1335.42,675.823 1335.98,658.235 1336.54,641.744 1337.1,641.92 1337.66,641.597 1338.22,647.163 1338.78,664.14 1339.34,649.723 1339.9,681.952 1340.46,716.814 1341.02,713.987 1341.57,698.247 1342.13,698.704 1342.69,681.682 1343.25,669.066 1343.81,718.641 1344.37,714.616 1344.93,729.528 1345.49,729.893 1346.05,745.168 1346.61,730.075 1347.17,726.227 1347.73,709.48 1348.29,741.32 1348.84,738.112 1349.4,718.365 1349.96,730.766 1350.52,726.255 1351.08,723.227 1351.64,718.638 1352.2,681.678 1352.76,698.125 1353.32,730.51 1353.88,726.034 1354.44,706.6 1355,708.869 1355.56,720.406 1356.12,703.486 1356.67,706.051 1357.23,656.553 1357.79,676.487 1358.35,680.412 1358.91,666.022 1359.47,683.351 1360.03,669.468 1360.59,668.395 1361.15,684.705 1361.71,650.175 1362.27,652.025 1362.83,656.014 1363.39,673.808 1363.94,676.967 1364.5,662.276 1365.06,664.346 1365.62,685.202 1366.18,719.592 1366.74,733.803 1367.3,763.083 1367.86,776.348 1368.42,755.879 1368.98,702.151 1369.54,667.394 1370.1,651.527 1370.66,670.221 1371.21,657.185 1371.77,658.114 1372.33,657.475 1372.89,676.19 1373.45,660.434 1374.01,644.133 1374.57,630.026 1375.13,632.501 1375.69,668.942 1376.25,685.032 1376.81,700.627 1377.37,668.183 1377.93,685.176 1378.49,683.965 1379.04,682.378 1379.6,668.451 1380.16,633.713 1380.72,600.507 1381.28,642.341 1381.84,595.295 1382.4,630.952 1382.96,634.938 1383.52,621.351 1384.08,636.41 1384.64,654.837 1385.2,658.114 1385.76,628.589 1386.31,662.769 1386.87,662.798 1387.43,694.504 1387.99,692.419 1388.55,690.112 1389.11,673.094 1389.67,674.933 1390.23,672.969 1390.79,703.413 1391.35,707.729 1391.91,676.179 1392.47,695.407 1393.03,680.767 1393.58,696.778 1394.14,697.183 1394.7,698.363 1395.26,665.094 1395.82,681.357 1396.38,694.411 1396.94,657.753 1397.5,659.155 1398.06,662.602 1398.62,677.732 1399.18,645.654 1399.74,650.062 1400.3,684.312 1400.86,668.314 1401.41,683.438 1401.97,735.548 1402.53,718.156 1403.09,700.873 1403.65,700.693 1404.21,734.878 1404.77,744.794 1405.33,772.223 1405.89,769.531 1406.45,760.927 1407.01,723.482 1407.57,753.433 1408.13,753.179 1408.68,764.48 1409.24,727.789 1409.8,728.68 1410.36,721.876 1410.92,685.718 1411.48,697.595 1412.04,680.35 1412.6,679.316 1413.16,631.635 1413.72,616.335 1414.28,686.587 1414.84,688.747 1415.4,719.366 1415.95,702.889 1416.51,764.904 1417.07,761.751 1417.63,775.425 1418.19,753.47 1418.75,748.27 1419.31,728.789 1419.87,679.74 1420.43,678.254 1420.99,709.204 1421.55,708.913 1422.11,705.529 1422.67,671.496 1423.23,687.939 1423.78,687.403 1424.34,720.002 1424.9,699.969 1425.46,711.301 1426.02,743.844 1426.58,722.927 1427.14,749.546 1427.7,744.525 1428.26,744.116 1428.82,773.595 1429.38,752.428 1429.94,718.264 1430.5,682.234 1431.05,698.319 1431.61,664.599 1432.17,646.682 1432.73,631.957 1433.29,669.191 1433.85,699.786 1434.41,730.396 1434.97,715.746 1435.53,715.677 1436.09,730.531 1436.65,729.092 1437.21,712.22 1437.77,695.854 1438.33,694.292 1438.88,692.496 1439.44,706.962 1440,704.254 1440.56,671.124 1441.12,655.737 1441.68,672.628 1442.24,626.187 1442.8,596.905 1443.36,581.217 1443.92,603.095 1444.48,612.026 1445.04,598.058 1445.6,586.964 1446.15,592.316 1446.71,615.967 1447.27,620.14 1447.83,604.878 1448.39,577.984 1448.95,599.908 1449.51,573.564 1450.07,596.904 1450.63,640.585 1451.19,598.112 1451.75,604.927 1452.31,659.639 1452.87,645.935 1453.42,632.571 1453.98,604.423 1454.54,609.232 1455.1,631.591 1455.66,622.47 1456.22,641.781 1456.78,662.529 1457.34,678.272 1457.9,682.855 1458.46,714.317 1459.02,728.116 1459.58,709.731 1460.14,691.941 1460.7,660.557 1461.25,696.635 1461.81,696.404 1462.37,713.079 1462.93,711.331 1463.49,774.251 1464.05,751.364 1464.61,732.842 1465.17,717.597 1465.73,696.633 1466.29,697.688 1466.85,667.4 1467.41,665.079 1467.97,701.068 1468.52,668.658 1469.08,637.568 1469.64,688.231 1470.2,705.965 1470.76,652.904 1471.32,639.162 1471.88,640.064 1472.44,642.968 1473,643.949 1473.56,646.424 1474.12,633.863 1474.68,666.214 1475.24,699.662 1475.79,714.71 1476.35,678.898 1476.91,679.884 1477.47,677.651 1478.03,660.349 1478.59,645.743 1479.15,631.505 1479.71,617.27 1480.27,634.19 1480.83,638.455 1481.39,608.626 1481.95,626.391 1482.51,610.29 1483.07,618.974 1483.62,653.653 1484.18,655.727 1484.74,642.112 1485.3,642.166 1485.86,642.705 1486.42,613.245 1486.98,665.554 1487.54,631.071 1488.1,632.196 1488.66,604.103 1489.22,603.086 1489.78,622.739 1490.34,609.728 1490.89,613.237 1491.45,649.646 1492.01,633.583 1492.57,605.446 1493.13,606.675 1493.69,593.762 1494.25,596.217 1494.81,586.255 1495.37,624.867 1495.93,641.589 1496.49,626.573 1497.05,647.045 1497.61,678.094 1498.16,694.761 1498.72,676.684 1499.28,674.657 1499.84,670.928 1500.4,686.879 1500.96,718.278 1501.52,681.163 1502.08,666.496 1502.64,667.064 1503.2,703.831 1503.76,688.59 1504.32,735.182 1504.88,731.502 1505.44,713.234 1505.99,728.888 1506.55,744.126 1507.11,758.89 1507.67,735.759 1508.23,736.32 1508.79,752.449 1509.35,748.441 1509.91,744.458 1510.47,739.895 1511.03,752.633 1511.59,764.808 1512.15,725.428 1512.71,704.339 1513.26,734.799 1513.82,729.946 1514.38,695.18 1514.94,675.724 1515.5,689.235 1516.06,707.584 1516.62,688.613 1517.18,672.466 1517.74,692.109 1518.3,692.706 1518.86,690.97 1519.42,659.409 1519.98,756.88 1520.53,749.997 1521.09,764.87 1521.65,727.378 1522.21,740.772 1522.77,752.126 1523.33,734.375 1523.89,713.928 1524.45,733.361 1525.01,779.662 1525.57,773.555 1526.13,737.882 1526.69,704.339 1527.25,720.767 1527.81,701.677 1528.36,682.724 1528.92,698.677 1529.48,699.177 1530.04,730.73 1530.6,727.358 1531.16,726.452 1531.72,693.078 1532.28,726.582 1532.84,689.844 1533.4,671.142 1533.96,656.444 1534.52,610.771 1535.08,631.676 1535.63,636.866 1536.19,636.385 1536.75,642.979 1537.31,681.231 1537.87,713.435 1538.43,726.789 1538.99,725.279 1539.55,721.53 1540.11,720.635 1540.67,749.602 1541.23,732.401 1541.79,744.399 1542.35,755.88 1542.9,737.185 1543.46,734.882 1544.02,765.45 1544.58,775.508 1545.14,754.263 1545.7,768.384 1546.26,782.933 1546.82,796.479 1547.38,774.768 1547.94,771.025 1548.5,767.684 1549.06,776.273 1549.62,804.812 1550.18,832.341 1550.73,810.092 1551.29,785.648 1551.85,749.877 1552.41,747.647 1552.97,746.572 1553.53,741.138 1554.09,754.182 1554.65,715.85 1555.21,698.919 1555.77,681.92 1556.33,682.343 1556.89,698.224 1557.45,680.076 1558,662.178 1558.56,665.053 1559.12,684.21 1559.68,682.394 1560.24,681.152 1560.8,679.988 1561.36,666.371 1561.92,650.922 1562.48,654.455 1563.04,641.548 1563.6,645.435 1564.16,665.987 1564.72,664.822 1565.28,664.982 1565.83,602.832 1566.39,607.495 1566.95,579.557 1567.51,618.137 1568.07,641.113 1568.63,624.239 1569.19,610.258 1569.75,644.148 1570.31,665.603 1570.87,682.636 1571.43,715.988 1571.99,685.319 1572.55,687.604 1573.1,688.457 1573.66,639.958 1574.22,639.06 1574.78,671.567 1575.34,657.681 1575.9,657.044 1576.46,657.146 1577.02,671.968 1577.58,658.459 1578.14,678.136 1578.7,676.566 1579.26,659.801 1579.82,644.676 1580.37,613.426 1580.93,615.393 1581.49,587.085 1582.05,593.136 1582.61,598.781 1583.17,585.961 1583.73,604.1 1584.29,610.428 1584.85,612.961 1585.41,615.555 1585.97,618.432 1586.53,608.539 1587.09,597.134 1587.65,618.586 1588.2,657.344 1588.76,641.934 1589.32,631.798 1589.88,701.054 1590.44,699.943 1591,699.4 1591.56,718.134 1592.12,699.825 1592.68,695.574 1593.24,709.815 1593.8,703.915 1594.36,719.789 1594.92,703.198 1595.47,686.202 1596.03,688.483 1596.59,702.069 1597.15,700.234 1597.71,732.965 1598.27,715.827 1598.83,712.395 1599.39,741.246 1599.95,740.004 1600.51,722.532 1601.07,722.004 1601.63,715.213 1602.19,713.399 1602.74,715.577 1603.3,715.313 1603.86,712.222 1604.42,662.055 1604.98,647.415 1605.54,648.761 1606.1,619.507 1606.66,622.676 1607.22,643.786 1607.78,627.963 1608.34,629.109 1608.9,630.27 1609.46,617.327 1610.02,655.781 1610.57,638.494 1611.13,640.206 1611.69,641.871 1612.25,643.899 1612.81,645.232 1613.37,648.655 1613.93,651.01 1614.49,639.432 1615.05,612.71 1615.61,632.477 1616.17,634.38 1616.73,653.524 1617.29,669.422 1617.84,671.116 1618.4,684.875 1618.96,718.7 1619.52,730.719 1620.08,741.72 1620.64,740.64 1621.2,672.591 1621.76,659.626 1622.32,628.204 1622.88,586.726 1623.44,562.019 1624,589.768 1624.56,611.971 1625.11,599.069 1625.67,587.917 1626.23,594.062 1626.79,600.4 1627.35,620.096 1627.91,589.633 1628.47,593.723 1629.03,615.773 1629.59,636.853 1630.15,609.072 1630.71,613.75 1631.27,618.571 1631.83,608.448 1632.39,597.293 1632.94,599.642 1633.5,635.301 1634.06,652.449 1634.62,652.796 1635.18,653.464 1635.74,641.817 1636.3,645.092 1636.86,664.458 1637.42,682.855 1637.98,682.97 1638.54,698.587 1639.1,696.424 1639.66,729.234 1640.21,725.677 1640.77,708.301 1641.33,709.622 1641.89,722.703 1642.45,771.045 1643.01,751.355 1643.57,774.806 1644.13,768.781 1644.69,751.385 1645.25,729.754 1645.81,760.162 1646.37,741.437 1646.93,773.581 1647.48,770.302 1648.04,746.922 1648.6,760.007 1649.16,757.734 1649.72,768.049 1650.28,813.672 1650.84,825.039 1651.4,813.304 1651.96,755.553 1652.52,732.429 1653.08,744.846 1653.64,703.642 1654.2,685.124 1654.76,670.928 1655.31,688.652 1655.87,724.162 1656.43,754.532 1656.99,737.739 1657.55,720.84 1658.11,684.525 1658.67,686.828 1659.23,677.146 1659.79,680.241 1660.35,696.4 1660.91,661.046 1661.47,678.674 1662.03,711.44 1662.58,727.246 1663.14,724.038 1663.7,739.186 1664.26,705.9 1664.82,721.543 1665.38,699.303 1665.94,729.62 1666.5,746.226 1667.06,758.776 1667.62,725.466 1668.18,725.438 1668.74,739.658 1669.3,738.646 1669.85,734.988 1670.41,732.062 1670.97,729.468 1671.53,713.048 1672.09,741.045 1672.65,738.999 1673.21,738.364 1673.77,752.139 1674.33,763.803 1674.89,760.888 1675.45,759.028 1676.01,740.486 1676.57,723.7 1677.13,753.912 1677.68,748.513 1678.24,729.172 1678.8,759.993 1679.36,755.625 1679.92,766.351 1680.48,782.188 1681.04,776.259 1681.6,757.125 1682.16,719.254 1682.72,669.144 1683.28,667.717 1683.84,699.374 1684.4,717.139 1684.95,712.946 1685.51,743.124 1686.07,757.048 1686.63,767.74 1687.19,745.989 1687.75,756.323 1688.31,768.296 1688.87,764.085 1689.43,760.018 1689.99,741.729 1690.55,671.278 1691.11,640.018 1691.67,621.184 1692.23,686.101 1692.78,667.358 1693.34,685.744 1693.9,670.303 1694.46,622.833 1695.02,658.524 1695.58,644.148 1696.14,644.291 1696.7,646.23 1697.26,632.943 1697.82,671.23 1698.38,659.471 1698.94,664.384 1699.5,666.463 1700.05,605.391 1700.61,606.347 1701.17,625.55 1701.73,629.329 1702.29,615.125 1702.85,620.028 1703.41,626.623 1703.97,630.174 1704.53,637.198 1705.09,620.124 1705.65,610.453 1706.21,630.149 1706.77,566.23 1707.32,574.55 1707.88,561.435 1708.44,534.055 1709,557.64 1709.56,568.671 1710.12,560.804 1710.68,549.797 1711.24,556.963 1711.8,533.649 1712.36,542.559 1712.92,598.897 1713.48,619.059 1714.04,655.16 1714.6,659.484 1715.15,661.288 1715.71,629.051 1716.27,649.007 1716.83,635.609 1717.39,640.113 1717.95,624.555 1718.51,641.376 1719.07,623.524 1719.63,626.479 1720.19,609.467 1720.75,564.706 1721.31,571.854 1721.87,592.27 1722.42,595.382 1722.98,600.097 1723.54,586.213 1724.1,609.388 1724.66,645.785 1725.22,631.496 1725.78,632.746 1726.34,607.473 1726.9,612.219 1727.46,614.888 1728.02,601.847 1728.58,604.065 1729.14,639.991 1729.69,638.85 1730.25,643.233 1730.81,660.307 1731.37,695.76 1731.93,663.692 1732.49,677.177 1733.05,677.277 1733.61,711.075 1734.17,742.209 1734.73,738.1 1735.29,749.688 1735.85,746.243 1736.41,758.925 1736.97,752.262 1737.52,746.013 1738.08,787.79 1738.64,778.929 1739.2,770.806 1739.76,767.169 1740.32,732.96 1740.88,727.188 1741.44,724.001 1742,757.551 1742.56,740.457 1743.12,753.515 1743.68,751.688 1744.24,750.591 1744.79,777.368 1745.35,753.469 1745.91,732.758 1746.47,728.114 1747.03,724.733 1747.59,719.583 1748.15,721.991 1748.71,672.724 1749.27,670.544 1749.83,672.371 1750.39,675.74 1750.95,673.461 1751.51,686.99 1752.06,718.811 1752.62,751.544 1753.18,749.112 1753.74,726.327 1754.3,759.418 1754.86,741.054 1755.42,786.589 1755.98,812.227 1756.54,805.871 1757.1,829.993 1757.66,790.632 1758.22,770.157 1758.78,768.016 1759.34,763.233 1759.89,741.738 1760.45,721.695 1761.01,721.701 1761.57,731.984 1762.13,726.268 1762.69,737.93 1763.25,733.071 1763.81,747.298 1764.37,741.463 1764.93,736.573 1765.49,732.554 1766.05,759.081 1766.61,768.505 1767.16,779.128 1767.72,771.709 1768.28,747.039 1768.84,728.864 1769.4,743.166 1769.96,758.339 1770.52,752.721 1771.08,750.256 1771.64,732.433 1772.2,730.42 1772.76,693.973 1773.32,674.844 1773.88,678.819 1774.43,728.152 1774.99,708.186 1775.55,688.886 1776.11,656.354 1776.67,623.919 1777.23,629.689 1777.79,601.891 1778.35,606.746 1778.91,611.526 1779.47,584.209 1780.03,621.428 1780.59,637.802 1781.15,621.43 1781.71,659.702 1782.26,678.395 1782.82,664.174 1783.38,663.65 1783.94,602.657 1784.5,609.417 1785.06,613.935 1785.62,613.559 1786.18,617.217 1786.74,640.414 1787.3,638.527 1787.86,671.921 1788.42,688.006 1788.98,687.488 1789.53,687.731 1790.09,650.493 1790.65,667.594 1791.21,683.331 1791.77,650.088 1792.33,653.36 1792.89,650.078 1793.45,638.661 1794.01,671.727 1794.57,687.937 1795.13,684.047 1795.69,684.832 1796.25,684.636 1796.8,683.684 1797.36,665.309 1797.92,681.947 1798.48,681.903 1799.04,712.911 1799.6,730.715 1800.16,759.308 1800.72,720.479 1801.28,721.17 1801.84,737.864 1802.4,703.662 1802.96,701.617 1803.52,714.91 1804.08,727.354 1804.63,772.326 1805.19,715.513 1805.75,680.899 1806.31,664.272 1806.87,648.381 1807.43,680.612 1807.99,683.756 1808.55,670.553 1809.11,685.728 1809.67,703.879 1810.23,719.86 1810.79,733.237 1811.35,730.763 1811.9,729.909 1812.46,726.256 1813.02,709.195 1813.58,691.626 1814.14,689.679 1814.7,689.446 1815.26,733.045 1815.82,699.407 1816.38,712.161 1816.94,708.206 1817.5,693.085 1818.06,674.386 1818.62,691.558 1819.18,692.642 1819.73,660.964 1820.29,658.671 1820.85,659.483 1821.41,641.594 1821.97,658.791 1822.53,659.558 1823.09,678.398 1823.65,677.414 1824.21,678.304 1824.77,724.995 1825.33,675.544 1825.89,676.314 1826.45,727.541 1827,725.266 1827.56,707.209 1828.12,687.744 1828.68,669.84 1829.24,655.498 1829.8,640.064 1830.36,643.816 1830.92,633.495 1831.48,635.683 1832.04,617.998 1832.6,601.621 1833.16,606.182 1833.72,627.084 1834.27,646.241 1834.83,682.257 1835.39,649.835 1835.95,650.582 1836.51,651.279 1837.07,672.428 1837.63,653.465 1838.19,655.541 \"/>\n<path clip-path=\"url(#clip283)\" d=\"M720.247 691.496 L720.806 691.496 L721.365 691.496 L721.924 691.496 L722.484 691.496 L723.043 691.496 L723.602 691.496 L724.161 691.496 L724.721 691.496 L725.28 691.496 L725.839 691.496 L726.398 691.496 L726.958 691.496 L727.517 691.496 L728.076 691.496 L728.635 691.496 L729.195 691.496 L729.754 691.496 L730.313 691.496 L730.872 691.496 L731.432 691.496 L731.991 691.496 L732.55 691.496 L733.109 691.496 L733.669 691.496 L734.228 691.496 L734.787 691.496 L735.346 691.496 L735.906 691.496 L736.465 691.496 L737.024 691.496 L737.583 691.496 L738.143 691.496 L738.702 691.496 L739.261 691.496 L739.82 691.496 L740.38 691.496 L740.939 691.496 L741.498 691.496 L742.057 691.496 L742.617 691.496 L743.176 691.496 L743.735 691.496 L744.294 691.496 L744.854 691.496 L745.413 691.496 L745.972 691.496 L746.531 691.496 L747.091 691.496 L747.65 691.496 L748.209 691.496 L748.768 691.496 L749.328 691.496 L749.887 691.496 L750.446 691.496 L751.005 691.496 L751.565 691.496 L752.124 691.496 L752.683 691.496 L753.242 691.496 L753.802 691.496 L754.361 691.496 L754.92 691.496 L755.479 691.496 L756.039 691.496 L756.598 691.496 L757.157 691.496 L757.716 691.496 L758.276 691.496 L758.835 691.496 L759.394 691.496 L759.953 691.496 L760.513 691.496 L761.072 691.496 L761.631 691.496 L762.19 691.496 L762.75 691.496 L763.309 691.496 L763.868 691.496 L764.427 691.496 L764.987 691.496 L765.546 691.496 L766.105 691.496 L766.664 691.496 L767.224 691.496 L767.783 691.496 L768.342 691.496 L768.901 691.496 L769.461 691.496 L770.02 691.496 L770.579 691.496 L771.138 691.496 L771.698 691.496 L772.257 691.496 L772.816 691.496 L773.375 691.496 L773.935 691.496 L774.494 691.496 L775.053 691.496 L775.612 691.496 L776.172 691.496 L776.731 691.496 L777.29 691.496 L777.849 691.496 L778.409 691.496 L778.968 691.496 L779.527 691.496 L780.086 691.496 L780.646 691.496 L781.205 691.496 L781.764 691.496 L782.323 691.496 L782.883 691.496 L783.442 691.496 L784.001 691.496 L784.56 691.496 L785.12 691.496 L785.679 691.496 L786.238 691.496 L786.797 691.496 L787.357 691.496 L787.916 691.496 L788.475 691.496 L789.034 691.496 L789.594 691.496 L790.153 691.496 L790.712 691.496 L791.271 691.496 L791.831 691.496 L792.39 691.496 L792.949 691.496 L793.508 691.496 L794.068 691.496 L794.627 691.496 L795.186 691.496 L795.745 691.496 L796.305 691.496 L796.864 691.496 L797.423 691.496 L797.982 691.496 L798.542 691.496 L799.101 691.496 L799.66 691.496 L800.219 691.496 L800.779 691.496 L801.338 691.496 L801.897 691.496 L802.456 691.496 L803.016 691.496 L803.575 691.496 L804.134 691.496 L804.693 691.496 L805.253 691.496 L805.812 691.496 L806.371 691.496 L806.931 691.496 L807.49 691.496 L808.049 691.496 L808.608 691.496 L809.168 691.496 L809.727 691.496 L810.286 691.496 L810.845 691.496 L811.405 691.496 L811.964 691.496 L812.523 691.496 L813.082 691.496 L813.642 691.496 L814.201 691.496 L814.76 691.496 L815.319 691.496 L815.879 691.496 L816.438 691.496 L816.997 691.496 L817.556 691.496 L818.116 691.496 L818.675 691.496 L819.234 691.496 L819.793 691.496 L820.353 691.496 L820.912 691.496 L821.471 691.496 L822.03 691.496 L822.59 691.496 L823.149 691.496 L823.708 691.496 L824.267 691.496 L824.827 691.496 L825.386 691.496 L825.945 691.496 L826.504 691.496 L827.064 691.496 L827.623 691.496 L828.182 691.496 L828.741 691.496 L829.301 691.496 L829.86 691.496 L830.419 691.496 L830.978 691.496 L831.538 691.496 L832.097 691.496 L832.656 691.496 L833.215 691.496 L833.775 691.496 L834.334 691.496 L834.893 691.496 L835.452 691.496 L836.012 691.496 L836.571 691.496 L837.13 691.496 L837.689 691.496 L838.249 691.496 L838.808 691.496 L839.367 691.496 L839.926 691.496 L840.486 691.496 L841.045 691.496 L841.604 691.496 L842.163 691.496 L842.723 691.496 L843.282 691.496 L843.841 691.496 L844.4 691.496 L844.96 691.496 L845.519 691.496 L846.078 691.496 L846.637 691.496 L847.197 691.496 L847.756 691.496 L848.315 691.496 L848.874 691.496 L849.434 691.496 L849.993 691.496 L850.552 691.496 L851.111 691.496 L851.671 691.496 L852.23 691.496 L852.789 691.496 L853.348 691.496 L853.908 691.496 L854.467 691.496 L855.026 691.496 L855.585 691.496 L856.145 691.496 L856.704 691.496 L857.263 691.496 L857.822 691.496 L858.382 691.496 L858.941 691.496 L859.5 691.496 L860.059 691.496 L860.619 691.496 L861.178 691.496 L861.737 691.496 L862.296 691.496 L862.856 691.496 L863.415 691.496 L863.974 691.496 L864.533 691.496 L865.093 691.496 L865.652 691.496 L866.211 691.496 L866.77 691.496 L867.33 691.496 L867.889 691.496 L868.448 691.496 L869.007 691.496 L869.567 691.496 L870.126 691.496 L870.685 691.496 L871.244 691.496 L871.804 691.496 L872.363 691.496 L872.922 691.496 L873.481 691.496 L874.041 691.496 L874.6 691.496 L875.159 691.496 L875.718 691.496 L876.278 691.496 L876.837 691.496 L877.396 691.496 L877.955 691.496 L878.515 691.496 L879.074 691.496 L879.633 691.496 L880.192 691.496 L880.752 691.496 L881.311 691.496 L881.87 691.496 L882.429 691.496 L882.989 691.496 L883.548 691.496 L884.107 691.496 L884.666 691.496 L885.226 691.496 L885.785 691.496 L886.344 691.496 L886.903 691.496 L887.463 691.496 L888.022 691.496 L888.581 691.496 L889.14 691.496 L889.7 691.496 L890.259 691.496 L890.818 691.496 L891.377 691.496 L891.937 691.496 L892.496 691.496 L893.055 691.496 L893.614 691.496 L894.174 691.496 L894.733 691.496 L895.292 691.496 L895.851 691.496 L896.411 691.496 L896.97 691.496 L897.529 691.496 L898.088 691.496 L898.648 691.496 L899.207 691.496 L899.766 691.496 L900.325 691.496 L900.885 691.496 L901.444 691.496 L902.003 691.496 L902.562 691.496 L903.122 691.496 L903.681 691.496 L904.24 691.496 L904.799 691.496 L905.359 691.496 L905.918 691.496 L906.477 691.496 L907.036 691.496 L907.596 691.496 L908.155 691.496 L908.714 691.496 L909.273 691.496 L909.833 691.496 L910.392 691.496 L910.951 691.496 L911.51 691.496 L912.07 691.496 L912.629 691.496 L913.188 691.496 L913.747 691.496 L914.307 691.496 L914.866 691.496 L915.425 691.496 L915.984 691.496 L916.544 691.496 L917.103 691.496 L917.662 691.496 L918.221 691.496 L918.781 691.496 L919.34 691.496 L919.899 691.496 L920.458 691.496 L921.018 691.496 L921.577 691.496 L922.136 691.496 L922.695 691.496 L923.255 691.496 L923.814 691.496 L924.373 691.496 L924.932 691.496 L925.492 691.496 L926.051 691.496 L926.61 691.496 L927.169 691.496 L927.729 691.496 L928.288 691.496 L928.847 691.496 L929.406 691.496 L929.966 691.496 L930.525 691.496 L931.084 691.496 L931.644 691.496 L932.203 691.496 L932.762 691.496 L933.321 691.496 L933.881 691.496 L934.44 691.496 L934.999 691.496 L935.558 691.496 L936.118 691.496 L936.677 691.496 L937.236 691.496 L937.795 691.496 L938.355 691.496 L938.914 691.496 L939.473 691.496 L940.032 691.496 L940.592 691.496 L941.151 691.496 L941.71 691.496 L942.269 691.496 L942.829 691.496 L943.388 691.496 L943.947 691.496 L944.506 691.496 L945.066 691.496 L945.625 691.496 L946.184 691.496 L946.743 691.496 L947.303 691.496 L947.862 691.496 L948.421 691.496 L948.98 691.496 L949.54 691.496 L950.099 691.496 L950.658 691.496 L951.217 691.496 L951.777 691.496 L952.336 691.496 L952.895 691.496 L953.454 691.496 L954.014 691.496 L954.573 691.496 L955.132 691.496 L955.691 691.496 L956.251 691.496 L956.81 691.496 L957.369 691.496 L957.928 691.496 L958.488 691.496 L959.047 691.496 L959.606 691.496 L960.165 691.496 L960.725 691.496 L961.284 691.496 L961.843 691.496 L962.402 691.496 L962.962 691.496 L963.521 691.496 L964.08 691.496 L964.639 691.496 L965.199 691.496 L965.758 691.496 L966.317 691.496 L966.876 691.496 L967.436 691.496 L967.995 691.496 L968.554 691.496 L969.113 691.496 L969.673 691.496 L970.232 691.496 L970.791 691.496 L971.35 691.496 L971.91 691.496 L972.469 691.496 L973.028 691.496 L973.587 691.496 L974.147 691.496 L974.706 691.496 L975.265 691.496 L975.824 691.496 L976.384 691.496 L976.943 691.496 L977.502 691.496 L978.061 691.496 L978.621 691.496 L979.18 691.496 L979.739 691.496 L980.298 691.496 L980.858 691.496 L981.417 691.496 L981.976 691.496 L982.535 691.496 L983.095 691.496 L983.654 691.496 L984.213 691.496 L984.772 691.496 L985.332 691.496 L985.891 691.496 L986.45 691.496 L987.009 691.496 L987.569 691.496 L988.128 691.496 L988.687 691.496 L989.246 691.496 L989.806 691.496 L990.365 691.496 L990.924 691.496 L991.483 691.496 L992.043 691.496 L992.602 691.496 L993.161 691.496 L993.72 691.496 L994.28 691.496 L994.839 691.496 L995.398 691.496 L995.957 691.496 L996.517 691.496 L997.076 691.496 L997.635 691.496 L998.194 691.496 L998.754 691.496 L999.313 691.496 L999.872 691.496 L1000.43 691.496 L1000.99 691.496 L1001.55 691.496 L1002.11 691.496 L1002.67 691.496 L1003.23 691.496 L1003.79 691.496 L1004.35 691.496 L1004.91 691.496 L1005.46 691.496 L1006.02 691.496 L1006.58 691.496 L1007.14 691.496 L1007.7 691.496 L1008.26 691.496 L1008.82 691.496 L1009.38 691.496 L1009.94 691.496 L1010.5 691.496 L1011.06 691.496 L1011.62 691.496 L1012.18 691.496 L1012.73 691.496 L1013.29 691.496 L1013.85 691.496 L1014.41 691.496 L1014.97 691.496 L1015.53 691.496 L1016.09 691.496 L1016.65 691.496 L1017.21 691.496 L1017.77 691.496 L1018.33 691.496 L1018.89 691.496 L1019.45 691.496 L1020.01 691.496 L1020.56 691.496 L1021.12 691.496 L1021.68 691.496 L1022.24 691.496 L1022.8 691.496 L1023.36 691.496 L1023.92 691.496 L1024.48 691.496 L1025.04 691.496 L1025.6 691.496 L1026.16 691.496 L1026.72 691.496 L1027.28 691.496 L1027.83 691.496 L1028.39 691.496 L1028.95 691.496 L1029.51 691.496 L1030.07 691.496 L1030.63 691.496 L1031.19 691.496 L1031.75 691.496 L1032.31 691.496 L1032.87 691.496 L1033.43 691.496 L1033.99 691.496 L1034.55 691.496 L1035.1 691.496 L1035.66 691.496 L1036.22 691.496 L1036.78 691.496 L1037.34 691.496 L1037.9 691.496 L1038.46 691.496 L1039.02 691.496 L1039.58 691.496 L1040.14 691.496 L1040.7 691.496 L1041.26 691.496 L1041.82 691.496 L1042.38 691.496 L1042.93 691.496 L1043.49 691.496 L1044.05 691.496 L1044.61 691.496 L1045.17 691.496 L1045.73 691.496 L1046.29 691.496 L1046.85 691.496 L1047.41 691.496 L1047.97 691.496 L1048.53 691.496 L1049.09 691.496 L1049.65 691.496 L1050.2 691.496 L1050.76 691.496 L1051.32 691.496 L1051.88 691.496 L1052.44 691.496 L1053 691.496 L1053.56 691.496 L1054.12 691.496 L1054.68 691.496 L1055.24 691.496 L1055.8 691.496 L1056.36 691.496 L1056.92 691.496 L1057.48 691.496 L1058.03 691.496 L1058.59 691.496 L1059.15 691.496 L1059.71 691.496 L1060.27 691.496 L1060.83 691.496 L1061.39 691.496 L1061.95 691.496 L1062.51 691.496 L1063.07 691.496 L1063.63 691.496 L1064.19 691.496 L1064.75 691.496 L1065.3 691.496 L1065.86 691.496 L1066.42 691.496 L1066.98 691.496 L1067.54 691.496 L1068.1 691.496 L1068.66 691.496 L1069.22 691.496 L1069.78 691.496 L1070.34 691.496 L1070.9 691.496 L1071.46 691.496 L1072.02 691.496 L1072.57 691.496 L1073.13 691.496 L1073.69 691.496 L1074.25 691.496 L1074.81 691.496 L1075.37 691.496 L1075.93 691.496 L1076.49 691.496 L1077.05 691.496 L1077.61 691.496 L1078.17 691.496 L1078.73 691.496 L1079.29 691.496 L1079.85 691.496 L1080.4 691.496 L1080.96 691.496 L1081.52 691.496 L1082.08 691.496 L1082.64 691.496 L1083.2 691.496 L1083.76 691.496 L1084.32 691.496 L1084.88 691.496 L1085.44 691.496 L1086 691.496 L1086.56 691.496 L1087.12 691.496 L1087.67 691.496 L1088.23 691.496 L1088.79 691.496 L1089.35 691.496 L1089.91 691.496 L1090.47 691.496 L1091.03 691.496 L1091.59 691.496 L1092.15 691.496 L1092.71 691.496 L1093.27 691.496 L1093.83 691.496 L1094.39 691.496 L1094.94 691.496 L1095.5 691.496 L1096.06 691.496 L1096.62 691.496 L1097.18 691.496 L1097.74 691.496 L1098.3 691.496 L1098.86 691.496 L1099.42 691.496 L1099.98 691.496 L1100.54 691.496 L1101.1 691.496 L1101.66 691.496 L1102.22 691.496 L1102.77 691.496 L1103.33 691.496 L1103.89 691.496 L1104.45 691.496 L1105.01 691.496 L1105.57 691.496 L1106.13 691.496 L1106.69 691.496 L1107.25 691.496 L1107.81 691.496 L1108.37 691.496 L1108.93 691.496 L1109.49 691.496 L1110.04 691.496 L1110.6 691.496 L1111.16 691.496 L1111.72 691.496 L1112.28 691.496 L1112.84 691.496 L1113.4 691.496 L1113.96 691.496 L1114.52 691.496 L1115.08 691.496 L1115.64 691.496 L1116.2 691.496 L1116.76 691.496 L1117.31 691.496 L1117.87 691.496 L1118.43 691.496 L1118.99 691.496 L1119.55 691.496 L1120.11 691.496 L1120.67 691.496 L1121.23 691.496 L1121.79 691.496 L1122.35 691.496 L1122.91 691.496 L1123.47 691.496 L1124.03 691.496 L1124.59 691.496 L1125.14 691.496 L1125.7 691.496 L1126.26 691.496 L1126.82 691.496 L1127.38 691.496 L1127.94 691.496 L1128.5 691.496 L1129.06 691.496 L1129.62 691.496 L1130.18 691.496 L1130.74 691.496 L1131.3 691.496 L1131.86 691.496 L1132.41 691.496 L1132.97 691.496 L1133.53 691.496 L1134.09 691.496 L1134.65 691.496 L1135.21 691.496 L1135.77 691.496 L1136.33 691.496 L1136.89 691.496 L1137.45 691.496 L1138.01 691.496 L1138.57 691.496 L1139.13 691.496 L1139.68 691.496 L1140.24 691.496 L1140.8 691.496 L1141.36 691.496 L1141.92 691.496 L1142.48 691.496 L1143.04 691.496 L1143.6 691.496 L1144.16 691.496 L1144.72 691.496 L1145.28 691.496 L1145.84 691.496 L1146.4 691.496 L1146.96 691.496 L1147.51 691.496 L1148.07 691.496 L1148.63 691.496 L1149.19 691.496 L1149.75 691.496 L1150.31 691.496 L1150.87 691.496 L1151.43 691.496 L1151.99 691.496 L1152.55 691.496 L1153.11 691.496 L1153.67 691.496 L1154.23 691.496 L1154.78 691.496 L1155.34 691.496 L1155.9 691.496 L1156.46 691.496 L1157.02 691.496 L1157.58 691.496 L1158.14 691.496 L1158.7 691.496 L1159.26 691.496 L1159.82 691.496 L1160.38 691.496 L1160.94 691.496 L1161.5 691.496 L1162.05 691.496 L1162.61 691.496 L1163.17 691.496 L1163.73 691.496 L1164.29 691.496 L1164.85 691.496 L1165.41 691.496 L1165.97 691.496 L1166.53 691.496 L1167.09 691.496 L1167.65 691.496 L1168.21 691.496 L1168.77 691.496 L1169.33 691.496 L1169.88 691.496 L1170.44 691.496 L1171 691.496 L1171.56 691.496 L1172.12 691.496 L1172.68 691.496 L1173.24 691.496 L1173.8 691.496 L1174.36 691.496 L1174.92 691.496 L1175.48 691.496 L1176.04 691.496 L1176.6 691.496 L1177.15 691.496 L1177.71 691.496 L1178.27 691.496 L1178.83 691.496 L1179.39 691.496 L1179.95 691.496 L1180.51 691.496 L1181.07 691.496 L1181.63 691.496 L1182.19 691.496 L1182.75 691.496 L1183.31 691.496 L1183.87 691.496 L1184.43 691.496 L1184.98 691.496 L1185.54 691.496 L1186.1 691.496 L1186.66 691.496 L1187.22 691.496 L1187.78 691.496 L1188.34 691.496 L1188.9 691.496 L1189.46 691.496 L1190.02 691.496 L1190.58 691.496 L1191.14 691.496 L1191.7 691.496 L1192.25 691.496 L1192.81 691.496 L1193.37 691.496 L1193.93 691.496 L1194.49 691.496 L1195.05 691.496 L1195.61 691.496 L1196.17 691.496 L1196.73 691.496 L1197.29 691.496 L1197.85 691.496 L1198.41 691.496 L1198.97 691.496 L1199.52 691.496 L1200.08 691.496 L1200.64 691.496 L1201.2 691.496 L1201.76 691.496 L1202.32 691.496 L1202.88 691.496 L1203.44 691.496 L1204 691.496 L1204.56 691.496 L1205.12 691.496 L1205.68 691.496 L1206.24 691.496 L1206.8 691.496 L1207.35 691.496 L1207.91 691.496 L1208.47 691.496 L1209.03 691.496 L1209.59 691.496 L1210.15 691.496 L1210.71 691.496 L1211.27 691.496 L1211.83 691.496 L1212.39 691.496 L1212.95 691.496 L1213.51 691.496 L1214.07 691.496 L1214.62 691.496 L1215.18 691.496 L1215.74 691.496 L1216.3 691.496 L1216.86 691.496 L1217.42 691.496 L1217.98 691.496 L1218.54 691.496 L1219.1 691.496 L1219.66 691.496 L1220.22 691.496 L1220.78 691.496 L1221.34 691.496 L1221.89 691.496 L1222.45 691.496 L1223.01 691.496 L1223.57 691.496 L1224.13 691.496 L1224.69 691.496 L1225.25 691.496 L1225.81 691.496 L1226.37 691.496 L1226.93 691.496 L1227.49 691.496 L1228.05 691.496 L1228.61 691.496 L1229.17 691.496 L1229.72 691.496 L1230.28 691.496 L1230.84 691.496 L1231.4 691.496 L1231.96 691.496 L1232.52 691.496 L1233.08 691.496 L1233.64 691.496 L1234.2 691.496 L1234.76 691.496 L1235.32 691.496 L1235.88 691.496 L1236.44 691.496 L1236.99 691.496 L1237.55 691.496 L1238.11 691.496 L1238.67 691.496 L1239.23 691.496 L1239.79 691.496 L1240.35 691.496 L1240.91 691.496 L1241.47 691.496 L1242.03 691.496 L1242.59 691.496 L1243.15 691.496 L1243.71 691.496 L1244.26 691.496 L1244.82 691.496 L1245.38 691.496 L1245.94 691.496 L1246.5 691.496 L1247.06 691.496 L1247.62 691.496 L1248.18 691.496 L1248.74 691.496 L1249.3 691.496 L1249.86 691.496 L1250.42 691.496 L1250.98 691.496 L1251.54 691.496 L1252.09 691.496 L1252.65 691.496 L1253.21 691.496 L1253.77 691.496 L1254.33 691.496 L1254.89 691.496 L1255.45 691.496 L1256.01 691.496 L1256.57 691.496 L1257.13 691.496 L1257.69 691.496 L1258.25 691.496 L1258.81 691.496 L1259.36 691.496 L1259.92 691.496 L1260.48 691.496 L1261.04 691.496 L1261.6 691.496 L1262.16 691.496 L1262.72 691.496 L1263.28 691.496 L1263.84 691.496 L1264.4 691.496 L1264.96 691.496 L1265.52 691.496 L1266.08 691.496 L1266.63 691.496 L1267.19 691.496 L1267.75 691.496 L1268.31 691.496 L1268.87 691.496 L1269.43 691.496 L1269.99 691.496 L1270.55 691.496 L1271.11 691.496 L1271.67 691.496 L1272.23 691.496 L1272.79 691.496 L1273.35 691.496 L1273.91 691.496 L1274.46 691.496 L1275.02 691.496 L1275.58 691.496 L1276.14 691.496 L1276.7 691.496 L1277.26 691.496 L1277.82 691.496 L1278.38 691.496 L1278.94 691.496 L1279.5 691.496 L1280.06 691.496 L1280.62 691.496 L1281.18 691.496 L1281.73 691.496 L1282.29 691.496 L1282.85 691.496 L1283.41 691.496 L1283.97 691.496 L1284.53 691.496 L1285.09 691.496 L1285.65 691.496 L1286.21 691.496 L1286.77 691.496 L1287.33 691.496 L1287.89 691.496 L1288.45 691.496 L1289 691.496 L1289.56 691.496 L1290.12 691.496 L1290.68 691.496 L1291.24 691.496 L1291.8 691.496 L1292.36 691.496 L1292.92 691.496 L1293.48 691.496 L1294.04 691.496 L1294.6 691.496 L1295.16 691.496 L1295.72 691.496 L1296.28 691.496 L1296.83 691.496 L1297.39 691.496 L1297.95 691.496 L1298.51 691.496 L1299.07 691.496 L1299.63 691.496 L1300.19 691.496 L1300.75 691.496 L1301.31 691.496 L1301.87 691.496 L1302.43 691.496 L1302.99 691.496 L1303.55 691.496 L1304.1 691.496 L1304.66 691.496 L1305.22 691.496 L1305.78 691.496 L1306.34 691.496 L1306.9 691.496 L1307.46 691.496 L1308.02 691.496 L1308.58 691.496 L1309.14 691.496 L1309.7 691.496 L1310.26 691.496 L1310.82 691.496 L1311.38 691.496 L1311.93 691.496 L1312.49 691.496 L1313.05 691.496 L1313.61 691.496 L1314.17 691.496 L1314.73 691.496 L1315.29 691.496 L1315.85 691.496 L1316.41 691.496 L1316.97 691.496 L1317.53 691.496 L1318.09 691.496 L1318.65 691.496 L1319.2 691.496 L1319.76 691.496 L1320.32 691.496 L1320.88 691.496 L1321.44 691.496 L1322 691.496 L1322.56 691.496 L1323.12 691.496 L1323.68 691.496 L1324.24 691.496 L1324.8 691.496 L1325.36 691.496 L1325.92 691.496 L1326.47 691.496 L1327.03 691.496 L1327.59 691.496 L1328.15 691.496 L1328.71 691.496 L1329.27 691.496 L1329.83 691.496 L1330.39 691.496 L1330.95 691.496 L1331.51 691.496 L1332.07 691.496 L1332.63 691.496 L1333.19 691.496 L1333.75 691.496 L1334.3 691.496 L1334.86 691.496 L1335.42 691.496 L1335.98 691.496 L1336.54 691.496 L1337.1 691.496 L1337.66 691.496 L1338.22 691.496 L1338.78 691.496 L1339.34 691.496 L1339.9 691.496 L1340.46 691.496 L1341.02 691.496 L1341.57 691.496 L1342.13 691.496 L1342.69 691.496 L1343.25 691.496 L1343.81 691.496 L1344.37 691.496 L1344.93 691.496 L1345.49 691.496 L1346.05 691.496 L1346.61 691.496 L1347.17 691.496 L1347.73 691.496 L1348.29 691.496 L1348.84 691.496 L1349.4 691.496 L1349.96 691.496 L1350.52 691.496 L1351.08 691.496 L1351.64 691.496 L1352.2 691.496 L1352.76 691.496 L1353.32 691.496 L1353.88 691.496 L1354.44 691.496 L1355 691.496 L1355.56 691.496 L1356.12 691.496 L1356.67 691.496 L1357.23 691.496 L1357.79 691.496 L1358.35 691.496 L1358.91 691.496 L1359.47 691.496 L1360.03 691.496 L1360.59 691.496 L1361.15 691.496 L1361.71 691.496 L1362.27 691.496 L1362.83 691.496 L1363.39 691.496 L1363.94 691.496 L1364.5 691.496 L1365.06 691.496 L1365.62 691.496 L1366.18 691.496 L1366.74 691.496 L1367.3 691.496 L1367.86 691.496 L1368.42 691.496 L1368.98 691.496 L1369.54 691.496 L1370.1 691.496 L1370.66 691.496 L1371.21 691.496 L1371.77 691.496 L1372.33 691.496 L1372.89 691.496 L1373.45 691.496 L1374.01 691.496 L1374.57 691.496 L1375.13 691.496 L1375.69 691.496 L1376.25 691.496 L1376.81 691.496 L1377.37 691.496 L1377.93 691.496 L1378.49 691.496 L1379.04 691.496 L1379.6 691.496 L1380.16 691.496 L1380.72 691.496 L1381.28 691.496 L1381.84 691.496 L1382.4 691.496 L1382.96 691.496 L1383.52 691.496 L1384.08 691.496 L1384.64 691.496 L1385.2 691.496 L1385.76 691.496 L1386.31 691.496 L1386.87 691.496 L1387.43 691.496 L1387.99 691.496 L1388.55 691.496 L1389.11 691.496 L1389.67 691.496 L1390.23 691.496 L1390.79 691.496 L1391.35 691.496 L1391.91 691.496 L1392.47 691.496 L1393.03 691.496 L1393.58 691.496 L1394.14 691.496 L1394.7 691.496 L1395.26 691.496 L1395.82 691.496 L1396.38 691.496 L1396.94 691.496 L1397.5 691.496 L1398.06 691.496 L1398.62 691.496 L1399.18 691.496 L1399.74 691.496 L1400.3 691.496 L1400.86 691.496 L1401.41 691.496 L1401.97 691.496 L1402.53 691.496 L1403.09 691.496 L1403.65 691.496 L1404.21 691.496 L1404.77 691.496 L1405.33 691.496 L1405.89 691.496 L1406.45 691.496 L1407.01 691.496 L1407.57 691.496 L1408.13 691.496 L1408.68 691.496 L1409.24 691.496 L1409.8 691.496 L1410.36 691.496 L1410.92 691.496 L1411.48 691.496 L1412.04 691.496 L1412.6 691.496 L1413.16 691.496 L1413.72 691.496 L1414.28 691.496 L1414.84 691.496 L1415.4 691.496 L1415.95 691.496 L1416.51 691.496 L1417.07 691.496 L1417.63 691.496 L1418.19 691.496 L1418.75 691.496 L1419.31 691.496 L1419.87 691.496 L1420.43 691.496 L1420.99 691.496 L1421.55 691.496 L1422.11 691.496 L1422.67 691.496 L1423.23 691.496 L1423.78 691.496 L1424.34 691.496 L1424.9 691.496 L1425.46 691.496 L1426.02 691.496 L1426.58 691.496 L1427.14 691.496 L1427.7 691.496 L1428.26 691.496 L1428.82 691.496 L1429.38 691.496 L1429.94 691.496 L1430.5 691.496 L1431.05 691.496 L1431.61 691.496 L1432.17 691.496 L1432.73 691.496 L1433.29 691.496 L1433.85 691.496 L1434.41 691.496 L1434.97 691.496 L1435.53 691.496 L1436.09 691.496 L1436.65 691.496 L1437.21 691.496 L1437.77 691.496 L1438.33 691.496 L1438.88 691.496 L1439.44 691.496 L1440 691.496 L1440.56 691.496 L1441.12 691.496 L1441.68 691.496 L1442.24 691.496 L1442.8 691.496 L1443.36 691.496 L1443.92 691.496 L1444.48 691.496 L1445.04 691.496 L1445.6 691.496 L1446.15 691.496 L1446.71 691.496 L1447.27 691.496 L1447.83 691.496 L1448.39 691.496 L1448.95 691.496 L1449.51 691.496 L1450.07 691.496 L1450.63 691.496 L1451.19 691.496 L1451.75 691.496 L1452.31 691.496 L1452.87 691.496 L1453.42 691.496 L1453.98 691.496 L1454.54 691.496 L1455.1 691.496 L1455.66 691.496 L1456.22 691.496 L1456.78 691.496 L1457.34 691.496 L1457.9 691.496 L1458.46 691.496 L1459.02 691.496 L1459.58 691.496 L1460.14 691.496 L1460.7 691.496 L1461.25 691.496 L1461.81 691.496 L1462.37 691.496 L1462.93 691.496 L1463.49 691.496 L1464.05 691.496 L1464.61 691.496 L1465.17 691.496 L1465.73 691.496 L1466.29 691.496 L1466.85 691.496 L1467.41 691.496 L1467.97 691.496 L1468.52 691.496 L1469.08 691.496 L1469.64 691.496 L1470.2 691.496 L1470.76 691.496 L1471.32 691.496 L1471.88 691.496 L1472.44 691.496 L1473 691.496 L1473.56 691.496 L1474.12 691.496 L1474.68 691.496 L1475.24 691.496 L1475.79 691.496 L1476.35 691.496 L1476.91 691.496 L1477.47 691.496 L1478.03 691.496 L1478.59 691.496 L1479.15 691.496 L1479.71 691.496 L1480.27 691.496 L1480.83 691.496 L1481.39 691.496 L1481.95 691.496 L1482.51 691.496 L1483.07 691.496 L1483.62 691.496 L1484.18 691.496 L1484.74 691.496 L1485.3 691.496 L1485.86 691.496 L1486.42 691.496 L1486.98 691.496 L1487.54 691.496 L1488.1 691.496 L1488.66 691.496 L1489.22 691.496 L1489.78 691.496 L1490.34 691.496 L1490.89 691.496 L1491.45 691.496 L1492.01 691.496 L1492.57 691.496 L1493.13 691.496 L1493.69 691.496 L1494.25 691.496 L1494.81 691.496 L1495.37 691.496 L1495.93 691.496 L1496.49 691.496 L1497.05 691.496 L1497.61 691.496 L1498.16 691.496 L1498.72 691.496 L1499.28 691.496 L1499.84 691.496 L1500.4 691.496 L1500.96 691.496 L1501.52 691.496 L1502.08 691.496 L1502.64 691.496 L1503.2 691.496 L1503.76 691.496 L1504.32 691.496 L1504.88 691.496 L1505.44 691.496 L1505.99 691.496 L1506.55 691.496 L1507.11 691.496 L1507.67 691.496 L1508.23 691.496 L1508.79 691.496 L1509.35 691.496 L1509.91 691.496 L1510.47 691.496 L1511.03 691.496 L1511.59 691.496 L1512.15 691.496 L1512.71 691.496 L1513.26 691.496 L1513.82 691.496 L1514.38 691.496 L1514.94 691.496 L1515.5 691.496 L1516.06 691.496 L1516.62 691.496 L1517.18 691.496 L1517.74 691.496 L1518.3 691.496 L1518.86 691.496 L1519.42 691.496 L1519.98 691.496 L1520.53 691.496 L1521.09 691.496 L1521.65 691.496 L1522.21 691.496 L1522.77 691.496 L1523.33 691.496 L1523.89 691.496 L1524.45 691.496 L1525.01 691.496 L1525.57 691.496 L1526.13 691.496 L1526.69 691.496 L1527.25 691.496 L1527.81 691.496 L1528.36 691.496 L1528.92 691.496 L1529.48 691.496 L1530.04 691.496 L1530.6 691.496 L1531.16 691.496 L1531.72 691.496 L1532.28 691.496 L1532.84 691.496 L1533.4 691.496 L1533.96 691.496 L1534.52 691.496 L1535.08 691.496 L1535.63 691.496 L1536.19 691.496 L1536.75 691.496 L1537.31 691.496 L1537.87 691.496 L1538.43 691.496 L1538.99 691.496 L1539.55 691.496 L1540.11 691.496 L1540.67 691.496 L1541.23 691.496 L1541.79 691.496 L1542.35 691.496 L1542.9 691.496 L1543.46 691.496 L1544.02 691.496 L1544.58 691.496 L1545.14 691.496 L1545.7 691.496 L1546.26 691.496 L1546.82 691.496 L1547.38 691.496 L1547.94 691.496 L1548.5 691.496 L1549.06 691.496 L1549.62 691.496 L1550.18 691.496 L1550.73 691.496 L1551.29 691.496 L1551.85 691.496 L1552.41 691.496 L1552.97 691.496 L1553.53 691.496 L1554.09 691.496 L1554.65 691.496 L1555.21 691.496 L1555.77 691.496 L1556.33 691.496 L1556.89 691.496 L1557.45 691.496 L1558 691.496 L1558.56 691.496 L1559.12 691.496 L1559.68 691.496 L1560.24 691.496 L1560.8 691.496 L1561.36 691.496 L1561.92 691.496 L1562.48 691.496 L1563.04 691.496 L1563.6 691.496 L1564.16 691.496 L1564.72 691.496 L1565.28 691.496 L1565.83 691.496 L1566.39 691.496 L1566.95 691.496 L1567.51 691.496 L1568.07 691.496 L1568.63 691.496 L1569.19 691.496 L1569.75 691.496 L1570.31 691.496 L1570.87 691.496 L1571.43 691.496 L1571.99 691.496 L1572.55 691.496 L1573.1 691.496 L1573.66 691.496 L1574.22 691.496 L1574.78 691.496 L1575.34 691.496 L1575.9 691.496 L1576.46 691.496 L1577.02 691.496 L1577.58 691.496 L1578.14 691.496 L1578.7 691.496 L1579.26 691.496 L1579.82 691.496 L1580.37 691.496 L1580.93 691.496 L1581.49 691.496 L1582.05 691.496 L1582.61 691.496 L1583.17 691.496 L1583.73 691.496 L1584.29 691.496 L1584.85 691.496 L1585.41 691.496 L1585.97 691.496 L1586.53 691.496 L1587.09 691.496 L1587.65 691.496 L1588.2 691.496 L1588.76 691.496 L1589.32 691.496 L1589.88 691.496 L1590.44 691.496 L1591 691.496 L1591.56 691.496 L1592.12 691.496 L1592.68 691.496 L1593.24 691.496 L1593.8 691.496 L1594.36 691.496 L1594.92 691.496 L1595.47 691.496 L1596.03 691.496 L1596.59 691.496 L1597.15 691.496 L1597.71 691.496 L1598.27 691.496 L1598.83 691.496 L1599.39 691.496 L1599.95 691.496 L1600.51 691.496 L1601.07 691.496 L1601.63 691.496 L1602.19 691.496 L1602.74 691.496 L1603.3 691.496 L1603.86 691.496 L1604.42 691.496 L1604.98 691.496 L1605.54 691.496 L1606.1 691.496 L1606.66 691.496 L1607.22 691.496 L1607.78 691.496 L1608.34 691.496 L1608.9 691.496 L1609.46 691.496 L1610.02 691.496 L1610.57 691.496 L1611.13 691.496 L1611.69 691.496 L1612.25 691.496 L1612.81 691.496 L1613.37 691.496 L1613.93 691.496 L1614.49 691.496 L1615.05 691.496 L1615.61 691.496 L1616.17 691.496 L1616.73 691.496 L1617.29 691.496 L1617.84 691.496 L1618.4 691.496 L1618.96 691.496 L1619.52 691.496 L1620.08 691.496 L1620.64 691.496 L1621.2 691.496 L1621.76 691.496 L1622.32 691.496 L1622.88 691.496 L1623.44 691.496 L1624 691.496 L1624.56 691.496 L1625.11 691.496 L1625.67 691.496 L1626.23 691.496 L1626.79 691.496 L1627.35 691.496 L1627.91 691.496 L1628.47 691.496 L1629.03 691.496 L1629.59 691.496 L1630.15 691.496 L1630.71 691.496 L1631.27 691.496 L1631.83 691.496 L1632.39 691.496 L1632.94 691.496 L1633.5 691.496 L1634.06 691.496 L1634.62 691.496 L1635.18 691.496 L1635.74 691.496 L1636.3 691.496 L1636.86 691.496 L1637.42 691.496 L1637.98 691.496 L1638.54 691.496 L1639.1 691.496 L1639.66 691.496 L1640.21 691.496 L1640.77 691.496 L1641.33 691.496 L1641.89 691.496 L1642.45 691.496 L1643.01 691.496 L1643.57 691.496 L1644.13 691.496 L1644.69 691.496 L1645.25 691.496 L1645.81 691.496 L1646.37 691.496 L1646.93 691.496 L1647.48 691.496 L1648.04 691.496 L1648.6 691.496 L1649.16 691.496 L1649.72 691.496 L1650.28 691.496 L1650.84 691.496 L1651.4 691.496 L1651.96 691.496 L1652.52 691.496 L1653.08 691.496 L1653.64 691.496 L1654.2 691.496 L1654.76 691.496 L1655.31 691.496 L1655.87 691.496 L1656.43 691.496 L1656.99 691.496 L1657.55 691.496 L1658.11 691.496 L1658.67 691.496 L1659.23 691.496 L1659.79 691.496 L1660.35 691.496 L1660.91 691.496 L1661.47 691.496 L1662.03 691.496 L1662.58 691.496 L1663.14 691.496 L1663.7 691.496 L1664.26 691.496 L1664.82 691.496 L1665.38 691.496 L1665.94 691.496 L1666.5 691.496 L1667.06 691.496 L1667.62 691.496 L1668.18 691.496 L1668.74 691.496 L1669.3 691.496 L1669.85 691.496 L1670.41 691.496 L1670.97 691.496 L1671.53 691.496 L1672.09 691.496 L1672.65 691.496 L1673.21 691.496 L1673.77 691.496 L1674.33 691.496 L1674.89 691.496 L1675.45 691.496 L1676.01 691.496 L1676.57 691.496 L1677.13 691.496 L1677.68 691.496 L1678.24 691.496 L1678.8 691.496 L1679.36 691.496 L1679.92 691.496 L1680.48 691.496 L1681.04 691.496 L1681.6 691.496 L1682.16 691.496 L1682.72 691.496 L1683.28 691.496 L1683.84 691.496 L1684.4 691.496 L1684.95 691.496 L1685.51 691.496 L1686.07 691.496 L1686.63 691.496 L1687.19 691.496 L1687.75 691.496 L1688.31 691.496 L1688.87 691.496 L1689.43 691.496 L1689.99 691.496 L1690.55 691.496 L1691.11 691.496 L1691.67 691.496 L1692.23 691.496 L1692.78 691.496 L1693.34 691.496 L1693.9 691.496 L1694.46 691.496 L1695.02 691.496 L1695.58 691.496 L1696.14 691.496 L1696.7 691.496 L1697.26 691.496 L1697.82 691.496 L1698.38 691.496 L1698.94 691.496 L1699.5 691.496 L1700.05 691.496 L1700.61 691.496 L1701.17 691.496 L1701.73 691.496 L1702.29 691.496 L1702.85 691.496 L1703.41 691.496 L1703.97 691.496 L1704.53 691.496 L1705.09 691.496 L1705.65 691.496 L1706.21 691.496 L1706.77 691.496 L1707.32 691.496 L1707.88 691.496 L1708.44 691.496 L1709 691.496 L1709.56 691.496 L1710.12 691.496 L1710.68 691.496 L1711.24 691.496 L1711.8 691.496 L1712.36 691.496 L1712.92 691.496 L1713.48 691.496 L1714.04 691.496 L1714.6 691.496 L1715.15 691.496 L1715.71 691.496 L1716.27 691.496 L1716.83 691.496 L1717.39 691.496 L1717.95 691.496 L1718.51 691.496 L1719.07 691.496 L1719.63 691.496 L1720.19 691.496 L1720.75 691.496 L1721.31 691.496 L1721.87 691.496 L1722.42 691.496 L1722.98 691.496 L1723.54 691.496 L1724.1 691.496 L1724.66 691.496 L1725.22 691.496 L1725.78 691.496 L1726.34 691.496 L1726.9 691.496 L1727.46 691.496 L1728.02 691.496 L1728.58 691.496 L1729.14 691.496 L1729.69 691.496 L1730.25 691.496 L1730.81 691.496 L1731.37 691.496 L1731.93 691.496 L1732.49 691.496 L1733.05 691.496 L1733.61 691.496 L1734.17 691.496 L1734.73 691.496 L1735.29 691.496 L1735.85 691.496 L1736.41 691.496 L1736.97 691.496 L1737.52 691.496 L1738.08 691.496 L1738.64 691.496 L1739.2 691.496 L1739.76 691.496 L1740.32 691.496 L1740.88 691.496 L1741.44 691.496 L1742 691.496 L1742.56 691.496 L1743.12 691.496 L1743.68 691.496 L1744.24 691.496 L1744.79 691.496 L1745.35 691.496 L1745.91 691.496 L1746.47 691.496 L1747.03 691.496 L1747.59 691.496 L1748.15 691.496 L1748.71 691.496 L1749.27 691.496 L1749.83 691.496 L1750.39 691.496 L1750.95 691.496 L1751.51 691.496 L1752.06 691.496 L1752.62 691.496 L1753.18 691.496 L1753.74 691.496 L1754.3 691.496 L1754.86 691.496 L1755.42 691.496 L1755.98 691.496 L1756.54 691.496 L1757.1 691.496 L1757.66 691.496 L1758.22 691.496 L1758.78 691.496 L1759.34 691.496 L1759.89 691.496 L1760.45 691.496 L1761.01 691.496 L1761.57 691.496 L1762.13 691.496 L1762.69 691.496 L1763.25 691.496 L1763.81 691.496 L1764.37 691.496 L1764.93 691.496 L1765.49 691.496 L1766.05 691.496 L1766.61 691.496 L1767.16 691.496 L1767.72 691.496 L1768.28 691.496 L1768.84 691.496 L1769.4 691.496 L1769.96 691.496 L1770.52 691.496 L1771.08 691.496 L1771.64 691.496 L1772.2 691.496 L1772.76 691.496 L1773.32 691.496 L1773.88 691.496 L1774.43 691.496 L1774.99 691.496 L1775.55 691.496 L1776.11 691.496 L1776.67 691.496 L1777.23 691.496 L1777.79 691.496 L1778.35 691.496 L1778.91 691.496 L1779.47 691.496 L1780.03 691.496 L1780.59 691.496 L1781.15 691.496 L1781.71 691.496 L1782.26 691.496 L1782.82 691.496 L1783.38 691.496 L1783.94 691.496 L1784.5 691.496 L1785.06 691.496 L1785.62 691.496 L1786.18 691.496 L1786.74 691.496 L1787.3 691.496 L1787.86 691.496 L1788.42 691.496 L1788.98 691.496 L1789.53 691.496 L1790.09 691.496 L1790.65 691.496 L1791.21 691.496 L1791.77 691.496 L1792.33 691.496 L1792.89 691.496 L1793.45 691.496 L1794.01 691.496 L1794.57 691.496 L1795.13 691.496 L1795.69 691.496 L1796.25 691.496 L1796.8 691.496 L1797.36 691.496 L1797.92 691.496 L1798.48 691.496 L1799.04 691.496 L1799.6 691.496 L1800.16 691.496 L1800.72 691.496 L1801.28 691.496 L1801.84 691.496 L1802.4 691.496 L1802.96 691.496 L1803.52 691.496 L1804.08 691.496 L1804.63 691.496 L1805.19 691.496 L1805.75 691.496 L1806.31 691.496 L1806.87 691.496 L1807.43 691.496 L1807.99 691.496 L1808.55 691.496 L1809.11 691.496 L1809.67 691.496 L1810.23 691.496 L1810.79 691.496 L1811.35 691.496 L1811.9 691.496 L1812.46 691.496 L1813.02 691.496 L1813.58 691.496 L1814.14 691.496 L1814.7 691.496 L1815.26 691.496 L1815.82 691.496 L1816.38 691.496 L1816.94 691.496 L1817.5 691.496 L1818.06 691.496 L1818.62 691.496 L1819.18 691.496 L1819.73 691.496 L1820.29 691.496 L1820.85 691.496 L1821.41 691.496 L1821.97 691.496 L1822.53 691.496 L1823.09 691.496 L1823.65 691.496 L1824.21 691.496 L1824.77 691.496 L1825.33 691.496 L1825.89 691.496 L1826.45 691.496 L1827 691.496 L1827.56 691.496 L1828.12 691.496 L1828.68 691.496 L1829.24 691.496 L1829.8 691.496 L1830.36 691.496 L1830.92 691.496 L1831.48 691.496 L1832.04 691.496 L1832.6 691.496 L1833.16 691.496 L1833.72 691.496 L1834.27 691.496 L1834.83 691.496 L1835.39 691.496 L1835.95 691.496 L1836.51 691.496 L1837.07 691.496 L1837.63 691.496 L1838.19 691.496 L1838.19 681.419 L1837.63 681.419 L1837.07 681.419 L1836.51 681.419 L1835.95 681.419 L1835.39 681.419 L1834.83 681.419 L1834.27 681.419 L1833.72 681.419 L1833.16 681.419 L1832.6 681.419 L1832.04 681.419 L1831.48 681.419 L1830.92 681.419 L1830.36 681.419 L1829.8 681.419 L1829.24 681.419 L1828.68 681.419 L1828.12 681.419 L1827.56 681.419 L1827 681.419 L1826.45 681.419 L1825.89 681.419 L1825.33 681.419 L1824.77 681.419 L1824.21 681.419 L1823.65 681.419 L1823.09 681.419 L1822.53 681.419 L1821.97 681.419 L1821.41 681.419 L1820.85 681.419 L1820.29 681.419 L1819.73 681.419 L1819.18 681.419 L1818.62 681.419 L1818.06 681.419 L1817.5 681.419 L1816.94 681.419 L1816.38 681.419 L1815.82 681.419 L1815.26 681.419 L1814.7 681.419 L1814.14 681.419 L1813.58 681.419 L1813.02 681.419 L1812.46 681.419 L1811.9 681.419 L1811.35 681.419 L1810.79 681.419 L1810.23 681.419 L1809.67 681.419 L1809.11 681.419 L1808.55 681.419 L1807.99 681.419 L1807.43 681.419 L1806.87 681.419 L1806.31 681.419 L1805.75 681.419 L1805.19 681.419 L1804.63 681.419 L1804.08 681.419 L1803.52 681.419 L1802.96 681.419 L1802.4 681.419 L1801.84 681.419 L1801.28 681.419 L1800.72 681.419 L1800.16 681.419 L1799.6 681.419 L1799.04 681.419 L1798.48 681.419 L1797.92 681.419 L1797.36 681.419 L1796.8 681.419 L1796.25 681.419 L1795.69 681.419 L1795.13 681.419 L1794.57 681.419 L1794.01 681.419 L1793.45 681.419 L1792.89 681.419 L1792.33 681.419 L1791.77 681.419 L1791.21 681.419 L1790.65 681.419 L1790.09 681.419 L1789.53 681.419 L1788.98 681.419 L1788.42 681.419 L1787.86 681.419 L1787.3 681.419 L1786.74 681.419 L1786.18 681.419 L1785.62 681.419 L1785.06 681.419 L1784.5 681.419 L1783.94 681.419 L1783.38 681.419 L1782.82 681.419 L1782.26 681.419 L1781.71 681.419 L1781.15 681.419 L1780.59 681.419 L1780.03 681.419 L1779.47 681.419 L1778.91 681.419 L1778.35 681.419 L1777.79 681.419 L1777.23 681.419 L1776.67 681.419 L1776.11 681.419 L1775.55 681.419 L1774.99 681.419 L1774.43 681.419 L1773.88 681.419 L1773.32 681.419 L1772.76 681.419 L1772.2 681.419 L1771.64 681.419 L1771.08 681.419 L1770.52 681.419 L1769.96 681.419 L1769.4 681.419 L1768.84 681.419 L1768.28 681.419 L1767.72 681.419 L1767.16 681.419 L1766.61 681.419 L1766.05 681.419 L1765.49 681.419 L1764.93 681.419 L1764.37 681.419 L1763.81 681.419 L1763.25 681.419 L1762.69 681.419 L1762.13 681.419 L1761.57 681.419 L1761.01 681.419 L1760.45 681.419 L1759.89 681.419 L1759.34 681.419 L1758.78 681.419 L1758.22 681.419 L1757.66 681.419 L1757.1 681.419 L1756.54 681.419 L1755.98 681.419 L1755.42 681.419 L1754.86 681.419 L1754.3 681.419 L1753.74 681.419 L1753.18 681.419 L1752.62 681.419 L1752.06 681.419 L1751.51 681.419 L1750.95 681.419 L1750.39 681.419 L1749.83 681.419 L1749.27 681.419 L1748.71 681.419 L1748.15 681.419 L1747.59 681.419 L1747.03 681.419 L1746.47 681.419 L1745.91 681.419 L1745.35 681.419 L1744.79 681.419 L1744.24 681.419 L1743.68 681.419 L1743.12 681.419 L1742.56 681.419 L1742 681.419 L1741.44 681.419 L1740.88 681.419 L1740.32 681.419 L1739.76 681.419 L1739.2 681.419 L1738.64 681.419 L1738.08 681.419 L1737.52 681.419 L1736.97 681.419 L1736.41 681.419 L1735.85 681.419 L1735.29 681.419 L1734.73 681.419 L1734.17 681.419 L1733.61 681.419 L1733.05 681.419 L1732.49 681.419 L1731.93 681.419 L1731.37 681.419 L1730.81 681.419 L1730.25 681.419 L1729.69 681.419 L1729.14 681.419 L1728.58 681.419 L1728.02 681.419 L1727.46 681.419 L1726.9 681.419 L1726.34 681.419 L1725.78 681.419 L1725.22 681.419 L1724.66 681.419 L1724.1 681.419 L1723.54 681.419 L1722.98 681.419 L1722.42 681.419 L1721.87 681.419 L1721.31 681.419 L1720.75 681.419 L1720.19 681.419 L1719.63 681.419 L1719.07 681.419 L1718.51 681.419 L1717.95 681.419 L1717.39 681.419 L1716.83 681.419 L1716.27 681.419 L1715.71 681.419 L1715.15 681.419 L1714.6 681.419 L1714.04 681.419 L1713.48 681.419 L1712.92 681.419 L1712.36 681.419 L1711.8 681.419 L1711.24 681.419 L1710.68 681.419 L1710.12 681.419 L1709.56 681.419 L1709 681.419 L1708.44 681.419 L1707.88 681.419 L1707.32 681.419 L1706.77 681.419 L1706.21 681.419 L1705.65 681.419 L1705.09 681.419 L1704.53 681.419 L1703.97 681.419 L1703.41 681.419 L1702.85 681.419 L1702.29 681.419 L1701.73 681.419 L1701.17 681.419 L1700.61 681.419 L1700.05 681.419 L1699.5 681.419 L1698.94 681.419 L1698.38 681.419 L1697.82 681.419 L1697.26 681.419 L1696.7 681.419 L1696.14 681.419 L1695.58 681.419 L1695.02 681.419 L1694.46 681.419 L1693.9 681.419 L1693.34 681.419 L1692.78 681.419 L1692.23 681.419 L1691.67 681.419 L1691.11 681.419 L1690.55 681.419 L1689.99 681.419 L1689.43 681.419 L1688.87 681.419 L1688.31 681.419 L1687.75 681.419 L1687.19 681.419 L1686.63 681.419 L1686.07 681.419 L1685.51 681.419 L1684.95 681.419 L1684.4 681.419 L1683.84 681.419 L1683.28 681.419 L1682.72 681.419 L1682.16 681.419 L1681.6 681.419 L1681.04 681.419 L1680.48 681.419 L1679.92 681.419 L1679.36 681.419 L1678.8 681.419 L1678.24 681.419 L1677.68 681.419 L1677.13 681.419 L1676.57 681.419 L1676.01 681.419 L1675.45 681.419 L1674.89 681.419 L1674.33 681.419 L1673.77 681.419 L1673.21 681.419 L1672.65 681.419 L1672.09 681.419 L1671.53 681.419 L1670.97 681.419 L1670.41 681.419 L1669.85 681.419 L1669.3 681.419 L1668.74 681.419 L1668.18 681.419 L1667.62 681.419 L1667.06 681.419 L1666.5 681.419 L1665.94 681.419 L1665.38 681.419 L1664.82 681.419 L1664.26 681.419 L1663.7 681.419 L1663.14 681.419 L1662.58 681.419 L1662.03 681.419 L1661.47 681.419 L1660.91 681.419 L1660.35 681.419 L1659.79 681.419 L1659.23 681.419 L1658.67 681.419 L1658.11 681.419 L1657.55 681.419 L1656.99 681.419 L1656.43 681.419 L1655.87 681.419 L1655.31 681.419 L1654.76 681.419 L1654.2 681.419 L1653.64 681.419 L1653.08 681.419 L1652.52 681.419 L1651.96 681.419 L1651.4 681.419 L1650.84 681.419 L1650.28 681.419 L1649.72 681.419 L1649.16 681.419 L1648.6 681.419 L1648.04 681.419 L1647.48 681.419 L1646.93 681.419 L1646.37 681.419 L1645.81 681.419 L1645.25 681.419 L1644.69 681.419 L1644.13 681.419 L1643.57 681.419 L1643.01 681.419 L1642.45 681.419 L1641.89 681.419 L1641.33 681.419 L1640.77 681.419 L1640.21 681.419 L1639.66 681.419 L1639.1 681.419 L1638.54 681.419 L1637.98 681.419 L1637.42 681.419 L1636.86 681.419 L1636.3 681.419 L1635.74 681.419 L1635.18 681.419 L1634.62 681.419 L1634.06 681.419 L1633.5 681.419 L1632.94 681.419 L1632.39 681.419 L1631.83 681.419 L1631.27 681.419 L1630.71 681.419 L1630.15 681.419 L1629.59 681.419 L1629.03 681.419 L1628.47 681.419 L1627.91 681.419 L1627.35 681.419 L1626.79 681.419 L1626.23 681.419 L1625.67 681.419 L1625.11 681.419 L1624.56 681.419 L1624 681.419 L1623.44 681.419 L1622.88 681.419 L1622.32 681.419 L1621.76 681.419 L1621.2 681.419 L1620.64 681.419 L1620.08 681.419 L1619.52 681.419 L1618.96 681.419 L1618.4 681.419 L1617.84 681.419 L1617.29 681.419 L1616.73 681.419 L1616.17 681.419 L1615.61 681.419 L1615.05 681.419 L1614.49 681.419 L1613.93 681.419 L1613.37 681.419 L1612.81 681.419 L1612.25 681.419 L1611.69 681.419 L1611.13 681.419 L1610.57 681.419 L1610.02 681.419 L1609.46 681.419 L1608.9 681.419 L1608.34 681.419 L1607.78 681.419 L1607.22 681.419 L1606.66 681.419 L1606.1 681.419 L1605.54 681.419 L1604.98 681.419 L1604.42 681.419 L1603.86 681.419 L1603.3 681.419 L1602.74 681.419 L1602.19 681.419 L1601.63 681.419 L1601.07 681.419 L1600.51 681.419 L1599.95 681.419 L1599.39 681.419 L1598.83 681.419 L1598.27 681.419 L1597.71 681.419 L1597.15 681.419 L1596.59 681.419 L1596.03 681.419 L1595.47 681.419 L1594.92 681.419 L1594.36 681.419 L1593.8 681.419 L1593.24 681.419 L1592.68 681.419 L1592.12 681.419 L1591.56 681.419 L1591 681.419 L1590.44 681.419 L1589.88 681.419 L1589.32 681.419 L1588.76 681.419 L1588.2 681.419 L1587.65 681.419 L1587.09 681.419 L1586.53 681.419 L1585.97 681.419 L1585.41 681.419 L1584.85 681.419 L1584.29 681.419 L1583.73 681.419 L1583.17 681.419 L1582.61 681.419 L1582.05 681.419 L1581.49 681.419 L1580.93 681.419 L1580.37 681.419 L1579.82 681.419 L1579.26 681.419 L1578.7 681.419 L1578.14 681.419 L1577.58 681.419 L1577.02 681.419 L1576.46 681.419 L1575.9 681.419 L1575.34 681.419 L1574.78 681.419 L1574.22 681.419 L1573.66 681.419 L1573.1 681.419 L1572.55 681.419 L1571.99 681.419 L1571.43 681.419 L1570.87 681.419 L1570.31 681.419 L1569.75 681.419 L1569.19 681.419 L1568.63 681.419 L1568.07 681.419 L1567.51 681.419 L1566.95 681.419 L1566.39 681.419 L1565.83 681.419 L1565.28 681.419 L1564.72 681.419 L1564.16 681.419 L1563.6 681.419 L1563.04 681.419 L1562.48 681.419 L1561.92 681.419 L1561.36 681.419 L1560.8 681.419 L1560.24 681.419 L1559.68 681.419 L1559.12 681.419 L1558.56 681.419 L1558 681.419 L1557.45 681.419 L1556.89 681.419 L1556.33 681.419 L1555.77 681.419 L1555.21 681.419 L1554.65 681.419 L1554.09 681.419 L1553.53 681.419 L1552.97 681.419 L1552.41 681.419 L1551.85 681.419 L1551.29 681.419 L1550.73 681.419 L1550.18 681.419 L1549.62 681.419 L1549.06 681.419 L1548.5 681.419 L1547.94 681.419 L1547.38 681.419 L1546.82 681.419 L1546.26 681.419 L1545.7 681.419 L1545.14 681.419 L1544.58 681.419 L1544.02 681.419 L1543.46 681.419 L1542.9 681.419 L1542.35 681.419 L1541.79 681.419 L1541.23 681.419 L1540.67 681.419 L1540.11 681.419 L1539.55 681.419 L1538.99 681.419 L1538.43 681.419 L1537.87 681.419 L1537.31 681.419 L1536.75 681.419 L1536.19 681.419 L1535.63 681.419 L1535.08 681.419 L1534.52 681.419 L1533.96 681.419 L1533.4 681.419 L1532.84 681.419 L1532.28 681.419 L1531.72 681.419 L1531.16 681.419 L1530.6 681.419 L1530.04 681.419 L1529.48 681.419 L1528.92 681.419 L1528.36 681.419 L1527.81 681.419 L1527.25 681.419 L1526.69 681.419 L1526.13 681.419 L1525.57 681.419 L1525.01 681.419 L1524.45 681.419 L1523.89 681.419 L1523.33 681.419 L1522.77 681.419 L1522.21 681.419 L1521.65 681.419 L1521.09 681.419 L1520.53 681.419 L1519.98 681.419 L1519.42 681.419 L1518.86 681.419 L1518.3 681.419 L1517.74 681.419 L1517.18 681.419 L1516.62 681.419 L1516.06 681.419 L1515.5 681.419 L1514.94 681.419 L1514.38 681.419 L1513.82 681.419 L1513.26 681.419 L1512.71 681.419 L1512.15 681.419 L1511.59 681.419 L1511.03 681.419 L1510.47 681.419 L1509.91 681.419 L1509.35 681.419 L1508.79 681.419 L1508.23 681.419 L1507.67 681.419 L1507.11 681.419 L1506.55 681.419 L1505.99 681.419 L1505.44 681.419 L1504.88 681.419 L1504.32 681.419 L1503.76 681.419 L1503.2 681.419 L1502.64 681.419 L1502.08 681.419 L1501.52 681.419 L1500.96 681.419 L1500.4 681.419 L1499.84 681.419 L1499.28 681.419 L1498.72 681.419 L1498.16 681.419 L1497.61 681.419 L1497.05 681.419 L1496.49 681.419 L1495.93 681.419 L1495.37 681.419 L1494.81 681.419 L1494.25 681.419 L1493.69 681.419 L1493.13 681.419 L1492.57 681.419 L1492.01 681.419 L1491.45 681.419 L1490.89 681.419 L1490.34 681.419 L1489.78 681.419 L1489.22 681.419 L1488.66 681.419 L1488.1 681.419 L1487.54 681.419 L1486.98 681.419 L1486.42 681.419 L1485.86 681.419 L1485.3 681.419 L1484.74 681.419 L1484.18 681.419 L1483.62 681.419 L1483.07 681.419 L1482.51 681.419 L1481.95 681.419 L1481.39 681.419 L1480.83 681.419 L1480.27 681.419 L1479.71 681.419 L1479.15 681.419 L1478.59 681.419 L1478.03 681.419 L1477.47 681.419 L1476.91 681.419 L1476.35 681.419 L1475.79 681.419 L1475.24 681.419 L1474.68 681.419 L1474.12 681.419 L1473.56 681.419 L1473 681.419 L1472.44 681.419 L1471.88 681.419 L1471.32 681.419 L1470.76 681.419 L1470.2 681.419 L1469.64 681.419 L1469.08 681.419 L1468.52 681.419 L1467.97 681.419 L1467.41 681.419 L1466.85 681.419 L1466.29 681.419 L1465.73 681.419 L1465.17 681.419 L1464.61 681.419 L1464.05 681.419 L1463.49 681.419 L1462.93 681.419 L1462.37 681.419 L1461.81 681.419 L1461.25 681.419 L1460.7 681.419 L1460.14 681.419 L1459.58 681.419 L1459.02 681.419 L1458.46 681.419 L1457.9 681.419 L1457.34 681.419 L1456.78 681.419 L1456.22 681.419 L1455.66 681.419 L1455.1 681.419 L1454.54 681.419 L1453.98 681.419 L1453.42 681.419 L1452.87 681.419 L1452.31 681.419 L1451.75 681.419 L1451.19 681.419 L1450.63 681.419 L1450.07 681.419 L1449.51 681.419 L1448.95 681.419 L1448.39 681.419 L1447.83 681.419 L1447.27 681.419 L1446.71 681.419 L1446.15 681.419 L1445.6 681.419 L1445.04 681.419 L1444.48 681.419 L1443.92 681.419 L1443.36 681.419 L1442.8 681.419 L1442.24 681.419 L1441.68 681.419 L1441.12 681.419 L1440.56 681.419 L1440 681.419 L1439.44 681.419 L1438.88 681.419 L1438.33 681.419 L1437.77 681.419 L1437.21 681.419 L1436.65 681.419 L1436.09 681.419 L1435.53 681.419 L1434.97 681.419 L1434.41 681.419 L1433.85 681.419 L1433.29 681.419 L1432.73 681.419 L1432.17 681.419 L1431.61 681.419 L1431.05 681.419 L1430.5 681.419 L1429.94 681.419 L1429.38 681.419 L1428.82 681.419 L1428.26 681.419 L1427.7 681.419 L1427.14 681.419 L1426.58 681.419 L1426.02 681.419 L1425.46 681.419 L1424.9 681.419 L1424.34 681.419 L1423.78 681.419 L1423.23 681.419 L1422.67 681.419 L1422.11 681.419 L1421.55 681.419 L1420.99 681.419 L1420.43 681.419 L1419.87 681.419 L1419.31 681.419 L1418.75 681.419 L1418.19 681.419 L1417.63 681.419 L1417.07 681.419 L1416.51 681.419 L1415.95 681.419 L1415.4 681.419 L1414.84 681.419 L1414.28 681.419 L1413.72 681.419 L1413.16 681.419 L1412.6 681.419 L1412.04 681.419 L1411.48 681.419 L1410.92 681.419 L1410.36 681.419 L1409.8 681.419 L1409.24 681.419 L1408.68 681.419 L1408.13 681.419 L1407.57 681.419 L1407.01 681.419 L1406.45 681.419 L1405.89 681.419 L1405.33 681.419 L1404.77 681.419 L1404.21 681.419 L1403.65 681.419 L1403.09 681.419 L1402.53 681.419 L1401.97 681.419 L1401.41 681.419 L1400.86 681.419 L1400.3 681.419 L1399.74 681.419 L1399.18 681.419 L1398.62 681.419 L1398.06 681.419 L1397.5 681.419 L1396.94 681.419 L1396.38 681.419 L1395.82 681.419 L1395.26 681.419 L1394.7 681.419 L1394.14 681.419 L1393.58 681.419 L1393.03 681.419 L1392.47 681.419 L1391.91 681.419 L1391.35 681.419 L1390.79 681.419 L1390.23 681.419 L1389.67 681.419 L1389.11 681.419 L1388.55 681.419 L1387.99 681.419 L1387.43 681.419 L1386.87 681.419 L1386.31 681.419 L1385.76 681.419 L1385.2 681.419 L1384.64 681.419 L1384.08 681.419 L1383.52 681.419 L1382.96 681.419 L1382.4 681.419 L1381.84 681.419 L1381.28 681.419 L1380.72 681.419 L1380.16 681.419 L1379.6 681.419 L1379.04 681.419 L1378.49 681.419 L1377.93 681.419 L1377.37 681.419 L1376.81 681.419 L1376.25 681.419 L1375.69 681.419 L1375.13 681.419 L1374.57 681.419 L1374.01 681.419 L1373.45 681.419 L1372.89 681.419 L1372.33 681.419 L1371.77 681.419 L1371.21 681.419 L1370.66 681.419 L1370.1 681.419 L1369.54 681.419 L1368.98 681.419 L1368.42 681.419 L1367.86 681.419 L1367.3 681.419 L1366.74 681.419 L1366.18 681.419 L1365.62 681.419 L1365.06 681.419 L1364.5 681.419 L1363.94 681.419 L1363.39 681.419 L1362.83 681.419 L1362.27 681.419 L1361.71 681.419 L1361.15 681.419 L1360.59 681.419 L1360.03 681.419 L1359.47 681.419 L1358.91 681.419 L1358.35 681.419 L1357.79 681.419 L1357.23 681.419 L1356.67 681.419 L1356.12 681.419 L1355.56 681.419 L1355 681.419 L1354.44 681.419 L1353.88 681.419 L1353.32 681.419 L1352.76 681.419 L1352.2 681.419 L1351.64 681.419 L1351.08 681.419 L1350.52 681.419 L1349.96 681.419 L1349.4 681.419 L1348.84 681.419 L1348.29 681.419 L1347.73 681.419 L1347.17 681.419 L1346.61 681.419 L1346.05 681.419 L1345.49 681.419 L1344.93 681.419 L1344.37 681.419 L1343.81 681.419 L1343.25 681.419 L1342.69 681.419 L1342.13 681.419 L1341.57 681.419 L1341.02 681.419 L1340.46 681.419 L1339.9 681.419 L1339.34 681.419 L1338.78 681.419 L1338.22 681.419 L1337.66 681.419 L1337.1 681.419 L1336.54 681.419 L1335.98 681.419 L1335.42 681.419 L1334.86 681.419 L1334.3 681.419 L1333.75 681.419 L1333.19 681.419 L1332.63 681.419 L1332.07 681.419 L1331.51 681.419 L1330.95 681.419 L1330.39 681.419 L1329.83 681.419 L1329.27 681.419 L1328.71 681.419 L1328.15 681.419 L1327.59 681.419 L1327.03 681.419 L1326.47 681.419 L1325.92 681.419 L1325.36 681.419 L1324.8 681.419 L1324.24 681.419 L1323.68 681.419 L1323.12 681.419 L1322.56 681.419 L1322 681.419 L1321.44 681.419 L1320.88 681.419 L1320.32 681.419 L1319.76 681.419 L1319.2 681.419 L1318.65 681.419 L1318.09 681.419 L1317.53 681.419 L1316.97 681.419 L1316.41 681.419 L1315.85 681.419 L1315.29 681.419 L1314.73 681.419 L1314.17 681.419 L1313.61 681.419 L1313.05 681.419 L1312.49 681.419 L1311.93 681.419 L1311.38 681.419 L1310.82 681.419 L1310.26 681.419 L1309.7 681.419 L1309.14 681.419 L1308.58 681.419 L1308.02 681.419 L1307.46 681.419 L1306.9 681.419 L1306.34 681.419 L1305.78 681.419 L1305.22 681.419 L1304.66 681.419 L1304.1 681.419 L1303.55 681.419 L1302.99 681.419 L1302.43 681.419 L1301.87 681.419 L1301.31 681.419 L1300.75 681.419 L1300.19 681.419 L1299.63 681.419 L1299.07 681.419 L1298.51 681.419 L1297.95 681.419 L1297.39 681.419 L1296.83 681.419 L1296.28 681.419 L1295.72 681.419 L1295.16 681.419 L1294.6 681.419 L1294.04 681.419 L1293.48 681.419 L1292.92 681.419 L1292.36 681.419 L1291.8 681.419 L1291.24 681.419 L1290.68 681.419 L1290.12 681.419 L1289.56 681.419 L1289 681.419 L1288.45 681.419 L1287.89 681.419 L1287.33 681.419 L1286.77 681.419 L1286.21 681.419 L1285.65 681.419 L1285.09 681.419 L1284.53 681.419 L1283.97 681.419 L1283.41 681.419 L1282.85 681.419 L1282.29 681.419 L1281.73 681.419 L1281.18 681.419 L1280.62 681.419 L1280.06 681.419 L1279.5 681.419 L1278.94 681.419 L1278.38 681.419 L1277.82 681.419 L1277.26 681.419 L1276.7 681.419 L1276.14 681.419 L1275.58 681.419 L1275.02 681.419 L1274.46 681.419 L1273.91 681.419 L1273.35 681.419 L1272.79 681.419 L1272.23 681.419 L1271.67 681.419 L1271.11 681.419 L1270.55 681.419 L1269.99 681.419 L1269.43 681.419 L1268.87 681.419 L1268.31 681.419 L1267.75 681.419 L1267.19 681.419 L1266.63 681.419 L1266.08 681.419 L1265.52 681.419 L1264.96 681.419 L1264.4 681.419 L1263.84 681.419 L1263.28 681.419 L1262.72 681.419 L1262.16 681.419 L1261.6 681.419 L1261.04 681.419 L1260.48 681.419 L1259.92 681.419 L1259.36 681.419 L1258.81 681.419 L1258.25 681.419 L1257.69 681.419 L1257.13 681.419 L1256.57 681.419 L1256.01 681.419 L1255.45 681.419 L1254.89 681.419 L1254.33 681.419 L1253.77 681.419 L1253.21 681.419 L1252.65 681.419 L1252.09 681.419 L1251.54 681.419 L1250.98 681.419 L1250.42 681.419 L1249.86 681.419 L1249.3 681.419 L1248.74 681.419 L1248.18 681.419 L1247.62 681.419 L1247.06 681.419 L1246.5 681.419 L1245.94 681.419 L1245.38 681.419 L1244.82 681.419 L1244.26 681.419 L1243.71 681.419 L1243.15 681.419 L1242.59 681.419 L1242.03 681.419 L1241.47 681.419 L1240.91 681.419 L1240.35 681.419 L1239.79 681.419 L1239.23 681.419 L1238.67 681.419 L1238.11 681.419 L1237.55 681.419 L1236.99 681.419 L1236.44 681.419 L1235.88 681.419 L1235.32 681.419 L1234.76 681.419 L1234.2 681.419 L1233.64 681.419 L1233.08 681.419 L1232.52 681.419 L1231.96 681.419 L1231.4 681.419 L1230.84 681.419 L1230.28 681.419 L1229.72 681.419 L1229.17 681.419 L1228.61 681.419 L1228.05 681.419 L1227.49 681.419 L1226.93 681.419 L1226.37 681.419 L1225.81 681.419 L1225.25 681.419 L1224.69 681.419 L1224.13 681.419 L1223.57 681.419 L1223.01 681.419 L1222.45 681.419 L1221.89 681.419 L1221.34 681.419 L1220.78 681.419 L1220.22 681.419 L1219.66 681.419 L1219.1 681.419 L1218.54 681.419 L1217.98 681.419 L1217.42 681.419 L1216.86 681.419 L1216.3 681.419 L1215.74 681.419 L1215.18 681.419 L1214.62 681.419 L1214.07 681.419 L1213.51 681.419 L1212.95 681.419 L1212.39 681.419 L1211.83 681.419 L1211.27 681.419 L1210.71 681.419 L1210.15 681.419 L1209.59 681.419 L1209.03 681.419 L1208.47 681.419 L1207.91 681.419 L1207.35 681.419 L1206.8 681.419 L1206.24 681.419 L1205.68 681.419 L1205.12 681.419 L1204.56 681.419 L1204 681.419 L1203.44 681.419 L1202.88 681.419 L1202.32 681.419 L1201.76 681.419 L1201.2 681.419 L1200.64 681.419 L1200.08 681.419 L1199.52 681.419 L1198.97 681.419 L1198.41 681.419 L1197.85 681.419 L1197.29 681.419 L1196.73 681.419 L1196.17 681.419 L1195.61 681.419 L1195.05 681.419 L1194.49 681.419 L1193.93 681.419 L1193.37 681.419 L1192.81 681.419 L1192.25 681.419 L1191.7 681.419 L1191.14 681.419 L1190.58 681.419 L1190.02 681.419 L1189.46 681.419 L1188.9 681.419 L1188.34 681.419 L1187.78 681.419 L1187.22 681.419 L1186.66 681.419 L1186.1 681.419 L1185.54 681.419 L1184.98 681.419 L1184.43 681.419 L1183.87 681.419 L1183.31 681.419 L1182.75 681.419 L1182.19 681.419 L1181.63 681.419 L1181.07 681.419 L1180.51 681.419 L1179.95 681.419 L1179.39 681.419 L1178.83 681.419 L1178.27 681.419 L1177.71 681.419 L1177.15 681.419 L1176.6 681.419 L1176.04 681.419 L1175.48 681.419 L1174.92 681.419 L1174.36 681.419 L1173.8 681.419 L1173.24 681.419 L1172.68 681.419 L1172.12 681.419 L1171.56 681.419 L1171 681.419 L1170.44 681.419 L1169.88 681.419 L1169.33 681.419 L1168.77 681.419 L1168.21 681.419 L1167.65 681.419 L1167.09 681.419 L1166.53 681.419 L1165.97 681.419 L1165.41 681.419 L1164.85 681.419 L1164.29 681.419 L1163.73 681.419 L1163.17 681.419 L1162.61 681.419 L1162.05 681.419 L1161.5 681.419 L1160.94 681.419 L1160.38 681.419 L1159.82 681.419 L1159.26 681.419 L1158.7 681.419 L1158.14 681.419 L1157.58 681.419 L1157.02 681.419 L1156.46 681.419 L1155.9 681.419 L1155.34 681.419 L1154.78 681.419 L1154.23 681.419 L1153.67 681.419 L1153.11 681.419 L1152.55 681.419 L1151.99 681.419 L1151.43 681.419 L1150.87 681.419 L1150.31 681.419 L1149.75 681.419 L1149.19 681.419 L1148.63 681.419 L1148.07 681.419 L1147.51 681.419 L1146.96 681.419 L1146.4 681.419 L1145.84 681.419 L1145.28 681.419 L1144.72 681.419 L1144.16 681.419 L1143.6 681.419 L1143.04 681.419 L1142.48 681.419 L1141.92 681.419 L1141.36 681.419 L1140.8 681.419 L1140.24 681.419 L1139.68 681.419 L1139.13 681.419 L1138.57 681.419 L1138.01 681.419 L1137.45 681.419 L1136.89 681.419 L1136.33 681.419 L1135.77 681.419 L1135.21 681.419 L1134.65 681.419 L1134.09 681.419 L1133.53 681.419 L1132.97 681.419 L1132.41 681.419 L1131.86 681.419 L1131.3 681.419 L1130.74 681.419 L1130.18 681.419 L1129.62 681.419 L1129.06 681.419 L1128.5 681.419 L1127.94 681.419 L1127.38 681.419 L1126.82 681.419 L1126.26 681.419 L1125.7 681.419 L1125.14 681.419 L1124.59 681.419 L1124.03 681.419 L1123.47 681.419 L1122.91 681.419 L1122.35 681.419 L1121.79 681.419 L1121.23 681.419 L1120.67 681.419 L1120.11 681.419 L1119.55 681.419 L1118.99 681.419 L1118.43 681.419 L1117.87 681.419 L1117.31 681.419 L1116.76 681.419 L1116.2 681.419 L1115.64 681.419 L1115.08 681.419 L1114.52 681.419 L1113.96 681.419 L1113.4 681.419 L1112.84 681.419 L1112.28 681.419 L1111.72 681.419 L1111.16 681.419 L1110.6 681.419 L1110.04 681.419 L1109.49 681.419 L1108.93 681.419 L1108.37 681.419 L1107.81 681.419 L1107.25 681.419 L1106.69 681.419 L1106.13 681.419 L1105.57 681.419 L1105.01 681.419 L1104.45 681.419 L1103.89 681.419 L1103.33 681.419 L1102.77 681.419 L1102.22 681.419 L1101.66 681.419 L1101.1 681.419 L1100.54 681.419 L1099.98 681.419 L1099.42 681.419 L1098.86 681.419 L1098.3 681.419 L1097.74 681.419 L1097.18 681.419 L1096.62 681.419 L1096.06 681.419 L1095.5 681.419 L1094.94 681.419 L1094.39 681.419 L1093.83 681.419 L1093.27 681.419 L1092.71 681.419 L1092.15 681.419 L1091.59 681.419 L1091.03 681.419 L1090.47 681.419 L1089.91 681.419 L1089.35 681.419 L1088.79 681.419 L1088.23 681.419 L1087.67 681.419 L1087.12 681.419 L1086.56 681.419 L1086 681.419 L1085.44 681.419 L1084.88 681.419 L1084.32 681.419 L1083.76 681.419 L1083.2 681.419 L1082.64 681.419 L1082.08 681.419 L1081.52 681.419 L1080.96 681.419 L1080.4 681.419 L1079.85 681.419 L1079.29 681.419 L1078.73 681.419 L1078.17 681.419 L1077.61 681.419 L1077.05 681.419 L1076.49 681.419 L1075.93 681.419 L1075.37 681.419 L1074.81 681.419 L1074.25 681.419 L1073.69 681.419 L1073.13 681.419 L1072.57 681.419 L1072.02 681.419 L1071.46 681.419 L1070.9 681.419 L1070.34 681.419 L1069.78 681.419 L1069.22 681.419 L1068.66 681.419 L1068.1 681.419 L1067.54 681.419 L1066.98 681.419 L1066.42 681.419 L1065.86 681.419 L1065.3 681.419 L1064.75 681.419 L1064.19 681.419 L1063.63 681.419 L1063.07 681.419 L1062.51 681.419 L1061.95 681.419 L1061.39 681.419 L1060.83 681.419 L1060.27 681.419 L1059.71 681.419 L1059.15 681.419 L1058.59 681.419 L1058.03 681.419 L1057.48 681.419 L1056.92 681.419 L1056.36 681.419 L1055.8 681.419 L1055.24 681.419 L1054.68 681.419 L1054.12 681.419 L1053.56 681.419 L1053 681.419 L1052.44 681.419 L1051.88 681.419 L1051.32 681.419 L1050.76 681.419 L1050.2 681.419 L1049.65 681.419 L1049.09 681.419 L1048.53 681.419 L1047.97 681.419 L1047.41 681.419 L1046.85 681.419 L1046.29 681.419 L1045.73 681.419 L1045.17 681.419 L1044.61 681.419 L1044.05 681.419 L1043.49 681.419 L1042.93 681.419 L1042.38 681.419 L1041.82 681.419 L1041.26 681.419 L1040.7 681.419 L1040.14 681.419 L1039.58 681.419 L1039.02 681.419 L1038.46 681.419 L1037.9 681.419 L1037.34 681.419 L1036.78 681.419 L1036.22 681.419 L1035.66 681.419 L1035.1 681.419 L1034.55 681.419 L1033.99 681.419 L1033.43 681.419 L1032.87 681.419 L1032.31 681.419 L1031.75 681.419 L1031.19 681.419 L1030.63 681.419 L1030.07 681.419 L1029.51 681.419 L1028.95 681.419 L1028.39 681.419 L1027.83 681.419 L1027.28 681.419 L1026.72 681.419 L1026.16 681.419 L1025.6 681.419 L1025.04 681.419 L1024.48 681.419 L1023.92 681.419 L1023.36 681.419 L1022.8 681.419 L1022.24 681.419 L1021.68 681.419 L1021.12 681.419 L1020.56 681.419 L1020.01 681.419 L1019.45 681.419 L1018.89 681.419 L1018.33 681.419 L1017.77 681.419 L1017.21 681.419 L1016.65 681.419 L1016.09 681.419 L1015.53 681.419 L1014.97 681.419 L1014.41 681.419 L1013.85 681.419 L1013.29 681.419 L1012.73 681.419 L1012.18 681.419 L1011.62 681.419 L1011.06 681.419 L1010.5 681.419 L1009.94 681.419 L1009.38 681.419 L1008.82 681.419 L1008.26 681.419 L1007.7 681.419 L1007.14 681.419 L1006.58 681.419 L1006.02 681.419 L1005.46 681.419 L1004.91 681.419 L1004.35 681.419 L1003.79 681.419 L1003.23 681.419 L1002.67 681.419 L1002.11 681.419 L1001.55 681.419 L1000.99 681.419 L1000.43 681.419 L999.872 681.419 L999.313 681.419 L998.754 681.419 L998.194 681.419 L997.635 681.419 L997.076 681.419 L996.517 681.419 L995.957 681.419 L995.398 681.419 L994.839 681.419 L994.28 681.419 L993.72 681.419 L993.161 681.419 L992.602 681.419 L992.043 681.419 L991.483 681.419 L990.924 681.419 L990.365 681.419 L989.806 681.419 L989.246 681.419 L988.687 681.419 L988.128 681.419 L987.569 681.419 L987.009 681.419 L986.45 681.419 L985.891 681.419 L985.332 681.419 L984.772 681.419 L984.213 681.419 L983.654 681.419 L983.095 681.419 L982.535 681.419 L981.976 681.419 L981.417 681.419 L980.858 681.419 L980.298 681.419 L979.739 681.419 L979.18 681.419 L978.621 681.419 L978.061 681.419 L977.502 681.419 L976.943 681.419 L976.384 681.419 L975.824 681.419 L975.265 681.419 L974.706 681.419 L974.147 681.419 L973.587 681.419 L973.028 681.419 L972.469 681.419 L971.91 681.419 L971.35 681.419 L970.791 681.419 L970.232 681.419 L969.673 681.419 L969.113 681.419 L968.554 681.419 L967.995 681.419 L967.436 681.419 L966.876 681.419 L966.317 681.419 L965.758 681.419 L965.199 681.419 L964.639 681.419 L964.08 681.419 L963.521 681.419 L962.962 681.419 L962.402 681.419 L961.843 681.419 L961.284 681.419 L960.725 681.419 L960.165 681.419 L959.606 681.419 L959.047 681.419 L958.488 681.419 L957.928 681.419 L957.369 681.419 L956.81 681.419 L956.251 681.419 L955.691 681.419 L955.132 681.419 L954.573 681.419 L954.014 681.419 L953.454 681.419 L952.895 681.419 L952.336 681.419 L951.777 681.419 L951.217 681.419 L950.658 681.419 L950.099 681.419 L949.54 681.419 L948.98 681.419 L948.421 681.419 L947.862 681.419 L947.303 681.419 L946.743 681.419 L946.184 681.419 L945.625 681.419 L945.066 681.419 L944.506 681.419 L943.947 681.419 L943.388 681.419 L942.829 681.419 L942.269 681.419 L941.71 681.419 L941.151 681.419 L940.592 681.419 L940.032 681.419 L939.473 681.419 L938.914 681.419 L938.355 681.419 L937.795 681.419 L937.236 681.419 L936.677 681.419 L936.118 681.419 L935.558 681.419 L934.999 681.419 L934.44 681.419 L933.881 681.419 L933.321 681.419 L932.762 681.419 L932.203 681.419 L931.644 681.419 L931.084 681.419 L930.525 681.419 L929.966 681.419 L929.406 681.419 L928.847 681.419 L928.288 681.419 L927.729 681.419 L927.169 681.419 L926.61 681.419 L926.051 681.419 L925.492 681.419 L924.932 681.419 L924.373 681.419 L923.814 681.419 L923.255 681.419 L922.695 681.419 L922.136 681.419 L921.577 681.419 L921.018 681.419 L920.458 681.419 L919.899 681.419 L919.34 681.419 L918.781 681.419 L918.221 681.419 L917.662 681.419 L917.103 681.419 L916.544 681.419 L915.984 681.419 L915.425 681.419 L914.866 681.419 L914.307 681.419 L913.747 681.419 L913.188 681.419 L912.629 681.419 L912.07 681.419 L911.51 681.419 L910.951 681.419 L910.392 681.419 L909.833 681.419 L909.273 681.419 L908.714 681.419 L908.155 681.419 L907.596 681.419 L907.036 681.419 L906.477 681.419 L905.918 681.419 L905.359 681.419 L904.799 681.419 L904.24 681.419 L903.681 681.419 L903.122 681.419 L902.562 681.419 L902.003 681.419 L901.444 681.419 L900.885 681.419 L900.325 681.419 L899.766 681.419 L899.207 681.419 L898.648 681.419 L898.088 681.419 L897.529 681.419 L896.97 681.419 L896.411 681.419 L895.851 681.419 L895.292 681.419 L894.733 681.419 L894.174 681.419 L893.614 681.419 L893.055 681.419 L892.496 681.419 L891.937 681.419 L891.377 681.419 L890.818 681.419 L890.259 681.419 L889.7 681.419 L889.14 681.419 L888.581 681.419 L888.022 681.419 L887.463 681.419 L886.903 681.419 L886.344 681.419 L885.785 681.419 L885.226 681.419 L884.666 681.419 L884.107 681.419 L883.548 681.419 L882.989 681.419 L882.429 681.419 L881.87 681.419 L881.311 681.419 L880.752 681.419 L880.192 681.419 L879.633 681.419 L879.074 681.419 L878.515 681.419 L877.955 681.419 L877.396 681.419 L876.837 681.419 L876.278 681.419 L875.718 681.419 L875.159 681.419 L874.6 681.419 L874.041 681.419 L873.481 681.419 L872.922 681.419 L872.363 681.419 L871.804 681.419 L871.244 681.419 L870.685 681.419 L870.126 681.419 L869.567 681.419 L869.007 681.419 L868.448 681.419 L867.889 681.419 L867.33 681.419 L866.77 681.419 L866.211 681.419 L865.652 681.419 L865.093 681.419 L864.533 681.419 L863.974 681.419 L863.415 681.419 L862.856 681.419 L862.296 681.419 L861.737 681.419 L861.178 681.419 L860.619 681.419 L860.059 681.419 L859.5 681.419 L858.941 681.419 L858.382 681.419 L857.822 681.419 L857.263 681.419 L856.704 681.419 L856.145 681.419 L855.585 681.419 L855.026 681.419 L854.467 681.419 L853.908 681.419 L853.348 681.419 L852.789 681.419 L852.23 681.419 L851.671 681.419 L851.111 681.419 L850.552 681.419 L849.993 681.419 L849.434 681.419 L848.874 681.419 L848.315 681.419 L847.756 681.419 L847.197 681.419 L846.637 681.419 L846.078 681.419 L845.519 681.419 L844.96 681.419 L844.4 681.419 L843.841 681.419 L843.282 681.419 L842.723 681.419 L842.163 681.419 L841.604 681.419 L841.045 681.419 L840.486 681.419 L839.926 681.419 L839.367 681.419 L838.808 681.419 L838.249 681.419 L837.689 681.419 L837.13 681.419 L836.571 681.419 L836.012 681.419 L835.452 681.419 L834.893 681.419 L834.334 681.419 L833.775 681.419 L833.215 681.419 L832.656 681.419 L832.097 681.419 L831.538 681.419 L830.978 681.419 L830.419 681.419 L829.86 681.419 L829.301 681.419 L828.741 681.419 L828.182 681.419 L827.623 681.419 L827.064 681.419 L826.504 681.419 L825.945 681.419 L825.386 681.419 L824.827 681.419 L824.267 681.419 L823.708 681.419 L823.149 681.419 L822.59 681.419 L822.03 681.419 L821.471 681.419 L820.912 681.419 L820.353 681.419 L819.793 681.419 L819.234 681.419 L818.675 681.419 L818.116 681.419 L817.556 681.419 L816.997 681.419 L816.438 681.419 L815.879 681.419 L815.319 681.419 L814.76 681.419 L814.201 681.419 L813.642 681.419 L813.082 681.419 L812.523 681.419 L811.964 681.419 L811.405 681.419 L810.845 681.419 L810.286 681.419 L809.727 681.419 L809.168 681.419 L808.608 681.419 L808.049 681.419 L807.49 681.419 L806.931 681.419 L806.371 681.419 L805.812 681.419 L805.253 681.419 L804.693 681.419 L804.134 681.419 L803.575 681.419 L803.016 681.419 L802.456 681.419 L801.897 681.419 L801.338 681.419 L800.779 681.419 L800.219 681.419 L799.66 681.419 L799.101 681.419 L798.542 681.419 L797.982 681.419 L797.423 681.419 L796.864 681.419 L796.305 681.419 L795.745 681.419 L795.186 681.419 L794.627 681.419 L794.068 681.419 L793.508 681.419 L792.949 681.419 L792.39 681.419 L791.831 681.419 L791.271 681.419 L790.712 681.419 L790.153 681.419 L789.594 681.419 L789.034 681.419 L788.475 681.419 L787.916 681.419 L787.357 681.419 L786.797 681.419 L786.238 681.419 L785.679 681.419 L785.12 681.419 L784.56 681.419 L784.001 681.419 L783.442 681.419 L782.883 681.419 L782.323 681.419 L781.764 681.419 L781.205 681.419 L780.646 681.419 L780.086 681.419 L779.527 681.419 L778.968 681.419 L778.409 681.419 L777.849 681.419 L777.29 681.419 L776.731 681.419 L776.172 681.419 L775.612 681.419 L775.053 681.419 L774.494 681.419 L773.935 681.419 L773.375 681.419 L772.816 681.419 L772.257 681.419 L771.698 681.419 L771.138 681.419 L770.579 681.419 L770.02 681.419 L769.461 681.419 L768.901 681.419 L768.342 681.419 L767.783 681.419 L767.224 681.419 L766.664 681.419 L766.105 681.419 L765.546 681.419 L764.987 681.419 L764.427 681.419 L763.868 681.419 L763.309 681.419 L762.75 681.419 L762.19 681.419 L761.631 681.419 L761.072 681.419 L760.513 681.419 L759.953 681.419 L759.394 681.419 L758.835 681.419 L758.276 681.419 L757.716 681.419 L757.157 681.419 L756.598 681.419 L756.039 681.419 L755.479 681.419 L754.92 681.419 L754.361 681.419 L753.802 681.419 L753.242 681.419 L752.683 681.419 L752.124 681.419 L751.565 681.419 L751.005 681.419 L750.446 681.419 L749.887 681.419 L749.328 681.419 L748.768 681.419 L748.209 681.419 L747.65 681.419 L747.091 681.419 L746.531 681.419 L745.972 681.419 L745.413 681.419 L744.854 681.419 L744.294 681.419 L743.735 681.419 L743.176 681.419 L742.617 681.419 L742.057 681.419 L741.498 681.419 L740.939 681.419 L740.38 681.419 L739.82 681.419 L739.261 681.419 L738.702 681.419 L738.143 681.419 L737.583 681.419 L737.024 681.419 L736.465 681.419 L735.906 681.419 L735.346 681.419 L734.787 681.419 L734.228 681.419 L733.669 681.419 L733.109 681.419 L732.55 681.419 L731.991 681.419 L731.432 681.419 L730.872 681.419 L730.313 681.419 L729.754 681.419 L729.195 681.419 L728.635 681.419 L728.076 681.419 L727.517 681.419 L726.958 681.419 L726.398 681.419 L725.839 681.419 L725.28 681.419 L724.721 681.419 L724.161 681.419 L723.602 681.419 L723.043 681.419 L722.484 681.419 L721.924 681.419 L721.365 681.419 L720.806 681.419 L720.247 681.419  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip283)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,686.457 720.806,686.457 721.365,686.457 721.924,686.457 722.484,686.457 723.043,686.457 723.602,686.457 724.161,686.457 724.721,686.457 725.28,686.457 725.839,686.457 726.398,686.457 726.958,686.457 727.517,686.457 728.076,686.457 728.635,686.457 729.195,686.457 729.754,686.457 730.313,686.457 730.872,686.457 731.432,686.457 731.991,686.457 732.55,686.457 733.109,686.457 733.669,686.457 734.228,686.457 734.787,686.457 735.346,686.457 735.906,686.457 736.465,686.457 737.024,686.457 737.583,686.457 738.143,686.457 738.702,686.457 739.261,686.457 739.82,686.457 740.38,686.457 740.939,686.457 741.498,686.457 742.057,686.457 742.617,686.457 743.176,686.457 743.735,686.457 744.294,686.457 744.854,686.457 745.413,686.457 745.972,686.457 746.531,686.457 747.091,686.457 747.65,686.457 748.209,686.457 748.768,686.457 749.328,686.457 749.887,686.457 750.446,686.457 751.005,686.457 751.565,686.457 752.124,686.457 752.683,686.457 753.242,686.457 753.802,686.457 754.361,686.457 754.92,686.457 755.479,686.457 756.039,686.457 756.598,686.457 757.157,686.457 757.716,686.457 758.276,686.457 758.835,686.457 759.394,686.457 759.953,686.457 760.513,686.457 761.072,686.457 761.631,686.457 762.19,686.457 762.75,686.457 763.309,686.457 763.868,686.457 764.427,686.457 764.987,686.457 765.546,686.457 766.105,686.457 766.664,686.457 767.224,686.457 767.783,686.457 768.342,686.457 768.901,686.457 769.461,686.457 770.02,686.457 770.579,686.457 771.138,686.457 771.698,686.457 772.257,686.457 772.816,686.457 773.375,686.457 773.935,686.457 774.494,686.457 775.053,686.457 775.612,686.457 776.172,686.457 776.731,686.457 777.29,686.457 777.849,686.457 778.409,686.457 778.968,686.457 779.527,686.457 780.086,686.457 780.646,686.457 781.205,686.457 781.764,686.457 782.323,686.457 782.883,686.457 783.442,686.457 784.001,686.457 784.56,686.457 785.12,686.457 785.679,686.457 786.238,686.457 786.797,686.457 787.357,686.457 787.916,686.457 788.475,686.457 789.034,686.457 789.594,686.457 790.153,686.457 790.712,686.457 791.271,686.457 791.831,686.457 792.39,686.457 792.949,686.457 793.508,686.457 794.068,686.457 794.627,686.457 795.186,686.457 795.745,686.457 796.305,686.457 796.864,686.457 797.423,686.457 797.982,686.457 798.542,686.457 799.101,686.457 799.66,686.457 800.219,686.457 800.779,686.457 801.338,686.457 801.897,686.457 802.456,686.457 803.016,686.457 803.575,686.457 804.134,686.457 804.693,686.457 805.253,686.457 805.812,686.457 806.371,686.457 806.931,686.457 807.49,686.457 808.049,686.457 808.608,686.457 809.168,686.457 809.727,686.457 810.286,686.457 810.845,686.457 811.405,686.457 811.964,686.457 812.523,686.457 813.082,686.457 813.642,686.457 814.201,686.457 814.76,686.457 815.319,686.457 815.879,686.457 816.438,686.457 816.997,686.457 817.556,686.457 818.116,686.457 818.675,686.457 819.234,686.457 819.793,686.457 820.353,686.457 820.912,686.457 821.471,686.457 822.03,686.457 822.59,686.457 823.149,686.457 823.708,686.457 824.267,686.457 824.827,686.457 825.386,686.457 825.945,686.457 826.504,686.457 827.064,686.457 827.623,686.457 828.182,686.457 828.741,686.457 829.301,686.457 829.86,686.457 830.419,686.457 830.978,686.457 831.538,686.457 832.097,686.457 832.656,686.457 833.215,686.457 833.775,686.457 834.334,686.457 834.893,686.457 835.452,686.457 836.012,686.457 836.571,686.457 837.13,686.457 837.689,686.457 838.249,686.457 838.808,686.457 839.367,686.457 839.926,686.457 840.486,686.457 841.045,686.457 841.604,686.457 842.163,686.457 842.723,686.457 843.282,686.457 843.841,686.457 844.4,686.457 844.96,686.457 845.519,686.457 846.078,686.457 846.637,686.457 847.197,686.457 847.756,686.457 848.315,686.457 848.874,686.457 849.434,686.457 849.993,686.457 850.552,686.457 851.111,686.457 851.671,686.457 852.23,686.457 852.789,686.457 853.348,686.457 853.908,686.457 854.467,686.457 855.026,686.457 855.585,686.457 856.145,686.457 856.704,686.457 857.263,686.457 857.822,686.457 858.382,686.457 858.941,686.457 859.5,686.457 860.059,686.457 860.619,686.457 861.178,686.457 861.737,686.457 862.296,686.457 862.856,686.457 863.415,686.457 863.974,686.457 864.533,686.457 865.093,686.457 865.652,686.457 866.211,686.457 866.77,686.457 867.33,686.457 867.889,686.457 868.448,686.457 869.007,686.457 869.567,686.457 870.126,686.457 870.685,686.457 871.244,686.457 871.804,686.457 872.363,686.457 872.922,686.457 873.481,686.457 874.041,686.457 874.6,686.457 875.159,686.457 875.718,686.457 876.278,686.457 876.837,686.457 877.396,686.457 877.955,686.457 878.515,686.457 879.074,686.457 879.633,686.457 880.192,686.457 880.752,686.457 881.311,686.457 881.87,686.457 882.429,686.457 882.989,686.457 883.548,686.457 884.107,686.457 884.666,686.457 885.226,686.457 885.785,686.457 886.344,686.457 886.903,686.457 887.463,686.457 888.022,686.457 888.581,686.457 889.14,686.457 889.7,686.457 890.259,686.457 890.818,686.457 891.377,686.457 891.937,686.457 892.496,686.457 893.055,686.457 893.614,686.457 894.174,686.457 894.733,686.457 895.292,686.457 895.851,686.457 896.411,686.457 896.97,686.457 897.529,686.457 898.088,686.457 898.648,686.457 899.207,686.457 899.766,686.457 900.325,686.457 900.885,686.457 901.444,686.457 902.003,686.457 902.562,686.457 903.122,686.457 903.681,686.457 904.24,686.457 904.799,686.457 905.359,686.457 905.918,686.457 906.477,686.457 907.036,686.457 907.596,686.457 908.155,686.457 908.714,686.457 909.273,686.457 909.833,686.457 910.392,686.457 910.951,686.457 911.51,686.457 912.07,686.457 912.629,686.457 913.188,686.457 913.747,686.457 914.307,686.457 914.866,686.457 915.425,686.457 915.984,686.457 916.544,686.457 917.103,686.457 917.662,686.457 918.221,686.457 918.781,686.457 919.34,686.457 919.899,686.457 920.458,686.457 921.018,686.457 921.577,686.457 922.136,686.457 922.695,686.457 923.255,686.457 923.814,686.457 924.373,686.457 924.932,686.457 925.492,686.457 926.051,686.457 926.61,686.457 927.169,686.457 927.729,686.457 928.288,686.457 928.847,686.457 929.406,686.457 929.966,686.457 930.525,686.457 931.084,686.457 931.644,686.457 932.203,686.457 932.762,686.457 933.321,686.457 933.881,686.457 934.44,686.457 934.999,686.457 935.558,686.457 936.118,686.457 936.677,686.457 937.236,686.457 937.795,686.457 938.355,686.457 938.914,686.457 939.473,686.457 940.032,686.457 940.592,686.457 941.151,686.457 941.71,686.457 942.269,686.457 942.829,686.457 943.388,686.457 943.947,686.457 944.506,686.457 945.066,686.457 945.625,686.457 946.184,686.457 946.743,686.457 947.303,686.457 947.862,686.457 948.421,686.457 948.98,686.457 949.54,686.457 950.099,686.457 950.658,686.457 951.217,686.457 951.777,686.457 952.336,686.457 952.895,686.457 953.454,686.457 954.014,686.457 954.573,686.457 955.132,686.457 955.691,686.457 956.251,686.457 956.81,686.457 957.369,686.457 957.928,686.457 958.488,686.457 959.047,686.457 959.606,686.457 960.165,686.457 960.725,686.457 961.284,686.457 961.843,686.457 962.402,686.457 962.962,686.457 963.521,686.457 964.08,686.457 964.639,686.457 965.199,686.457 965.758,686.457 966.317,686.457 966.876,686.457 967.436,686.457 967.995,686.457 968.554,686.457 969.113,686.457 969.673,686.457 970.232,686.457 970.791,686.457 971.35,686.457 971.91,686.457 972.469,686.457 973.028,686.457 973.587,686.457 974.147,686.457 974.706,686.457 975.265,686.457 975.824,686.457 976.384,686.457 976.943,686.457 977.502,686.457 978.061,686.457 978.621,686.457 979.18,686.457 979.739,686.457 980.298,686.457 980.858,686.457 981.417,686.457 981.976,686.457 982.535,686.457 983.095,686.457 983.654,686.457 984.213,686.457 984.772,686.457 985.332,686.457 985.891,686.457 986.45,686.457 987.009,686.457 987.569,686.457 988.128,686.457 988.687,686.457 989.246,686.457 989.806,686.457 990.365,686.457 990.924,686.457 991.483,686.457 992.043,686.457 992.602,686.457 993.161,686.457 993.72,686.457 994.28,686.457 994.839,686.457 995.398,686.457 995.957,686.457 996.517,686.457 997.076,686.457 997.635,686.457 998.194,686.457 998.754,686.457 999.313,686.457 999.872,686.457 1000.43,686.457 1000.99,686.457 1001.55,686.457 1002.11,686.457 1002.67,686.457 1003.23,686.457 1003.79,686.457 1004.35,686.457 1004.91,686.457 1005.46,686.457 1006.02,686.457 1006.58,686.457 1007.14,686.457 1007.7,686.457 1008.26,686.457 1008.82,686.457 1009.38,686.457 1009.94,686.457 1010.5,686.457 1011.06,686.457 1011.62,686.457 1012.18,686.457 1012.73,686.457 1013.29,686.457 1013.85,686.457 1014.41,686.457 1014.97,686.457 1015.53,686.457 1016.09,686.457 1016.65,686.457 1017.21,686.457 1017.77,686.457 1018.33,686.457 1018.89,686.457 1019.45,686.457 1020.01,686.457 1020.56,686.457 1021.12,686.457 1021.68,686.457 1022.24,686.457 1022.8,686.457 1023.36,686.457 1023.92,686.457 1024.48,686.457 1025.04,686.457 1025.6,686.457 1026.16,686.457 1026.72,686.457 1027.28,686.457 1027.83,686.457 1028.39,686.457 1028.95,686.457 1029.51,686.457 1030.07,686.457 1030.63,686.457 1031.19,686.457 1031.75,686.457 1032.31,686.457 1032.87,686.457 1033.43,686.457 1033.99,686.457 1034.55,686.457 1035.1,686.457 1035.66,686.457 1036.22,686.457 1036.78,686.457 1037.34,686.457 1037.9,686.457 1038.46,686.457 1039.02,686.457 1039.58,686.457 1040.14,686.457 1040.7,686.457 1041.26,686.457 1041.82,686.457 1042.38,686.457 1042.93,686.457 1043.49,686.457 1044.05,686.457 1044.61,686.457 1045.17,686.457 1045.73,686.457 1046.29,686.457 1046.85,686.457 1047.41,686.457 1047.97,686.457 1048.53,686.457 1049.09,686.457 1049.65,686.457 1050.2,686.457 1050.76,686.457 1051.32,686.457 1051.88,686.457 1052.44,686.457 1053,686.457 1053.56,686.457 1054.12,686.457 1054.68,686.457 1055.24,686.457 1055.8,686.457 1056.36,686.457 1056.92,686.457 1057.48,686.457 1058.03,686.457 1058.59,686.457 1059.15,686.457 1059.71,686.457 1060.27,686.457 1060.83,686.457 1061.39,686.457 1061.95,686.457 1062.51,686.457 1063.07,686.457 1063.63,686.457 1064.19,686.457 1064.75,686.457 1065.3,686.457 1065.86,686.457 1066.42,686.457 1066.98,686.457 1067.54,686.457 1068.1,686.457 1068.66,686.457 1069.22,686.457 1069.78,686.457 1070.34,686.457 1070.9,686.457 1071.46,686.457 1072.02,686.457 1072.57,686.457 1073.13,686.457 1073.69,686.457 1074.25,686.457 1074.81,686.457 1075.37,686.457 1075.93,686.457 1076.49,686.457 1077.05,686.457 1077.61,686.457 1078.17,686.457 1078.73,686.457 1079.29,686.457 1079.85,686.457 1080.4,686.457 1080.96,686.457 1081.52,686.457 1082.08,686.457 1082.64,686.457 1083.2,686.457 1083.76,686.457 1084.32,686.457 1084.88,686.457 1085.44,686.457 1086,686.457 1086.56,686.457 1087.12,686.457 1087.67,686.457 1088.23,686.457 1088.79,686.457 1089.35,686.457 1089.91,686.457 1090.47,686.457 1091.03,686.457 1091.59,686.457 1092.15,686.457 1092.71,686.457 1093.27,686.457 1093.83,686.457 1094.39,686.457 1094.94,686.457 1095.5,686.457 1096.06,686.457 1096.62,686.457 1097.18,686.457 1097.74,686.457 1098.3,686.457 1098.86,686.457 1099.42,686.457 1099.98,686.457 1100.54,686.457 1101.1,686.457 1101.66,686.457 1102.22,686.457 1102.77,686.457 1103.33,686.457 1103.89,686.457 1104.45,686.457 1105.01,686.457 1105.57,686.457 1106.13,686.457 1106.69,686.457 1107.25,686.457 1107.81,686.457 1108.37,686.457 1108.93,686.457 1109.49,686.457 1110.04,686.457 1110.6,686.457 1111.16,686.457 1111.72,686.457 1112.28,686.457 1112.84,686.457 1113.4,686.457 1113.96,686.457 1114.52,686.457 1115.08,686.457 1115.64,686.457 1116.2,686.457 1116.76,686.457 1117.31,686.457 1117.87,686.457 1118.43,686.457 1118.99,686.457 1119.55,686.457 1120.11,686.457 1120.67,686.457 1121.23,686.457 1121.79,686.457 1122.35,686.457 1122.91,686.457 1123.47,686.457 1124.03,686.457 1124.59,686.457 1125.14,686.457 1125.7,686.457 1126.26,686.457 1126.82,686.457 1127.38,686.457 1127.94,686.457 1128.5,686.457 1129.06,686.457 1129.62,686.457 1130.18,686.457 1130.74,686.457 1131.3,686.457 1131.86,686.457 1132.41,686.457 1132.97,686.457 1133.53,686.457 1134.09,686.457 1134.65,686.457 1135.21,686.457 1135.77,686.457 1136.33,686.457 1136.89,686.457 1137.45,686.457 1138.01,686.457 1138.57,686.457 1139.13,686.457 1139.68,686.457 1140.24,686.457 1140.8,686.457 1141.36,686.457 1141.92,686.457 1142.48,686.457 1143.04,686.457 1143.6,686.457 1144.16,686.457 1144.72,686.457 1145.28,686.457 1145.84,686.457 1146.4,686.457 1146.96,686.457 1147.51,686.457 1148.07,686.457 1148.63,686.457 1149.19,686.457 1149.75,686.457 1150.31,686.457 1150.87,686.457 1151.43,686.457 1151.99,686.457 1152.55,686.457 1153.11,686.457 1153.67,686.457 1154.23,686.457 1154.78,686.457 1155.34,686.457 1155.9,686.457 1156.46,686.457 1157.02,686.457 1157.58,686.457 1158.14,686.457 1158.7,686.457 1159.26,686.457 1159.82,686.457 1160.38,686.457 1160.94,686.457 1161.5,686.457 1162.05,686.457 1162.61,686.457 1163.17,686.457 1163.73,686.457 1164.29,686.457 1164.85,686.457 1165.41,686.457 1165.97,686.457 1166.53,686.457 1167.09,686.457 1167.65,686.457 1168.21,686.457 1168.77,686.457 1169.33,686.457 1169.88,686.457 1170.44,686.457 1171,686.457 1171.56,686.457 1172.12,686.457 1172.68,686.457 1173.24,686.457 1173.8,686.457 1174.36,686.457 1174.92,686.457 1175.48,686.457 1176.04,686.457 1176.6,686.457 1177.15,686.457 1177.71,686.457 1178.27,686.457 1178.83,686.457 1179.39,686.457 1179.95,686.457 1180.51,686.457 1181.07,686.457 1181.63,686.457 1182.19,686.457 1182.75,686.457 1183.31,686.457 1183.87,686.457 1184.43,686.457 1184.98,686.457 1185.54,686.457 1186.1,686.457 1186.66,686.457 1187.22,686.457 1187.78,686.457 1188.34,686.457 1188.9,686.457 1189.46,686.457 1190.02,686.457 1190.58,686.457 1191.14,686.457 1191.7,686.457 1192.25,686.457 1192.81,686.457 1193.37,686.457 1193.93,686.457 1194.49,686.457 1195.05,686.457 1195.61,686.457 1196.17,686.457 1196.73,686.457 1197.29,686.457 1197.85,686.457 1198.41,686.457 1198.97,686.457 1199.52,686.457 1200.08,686.457 1200.64,686.457 1201.2,686.457 1201.76,686.457 1202.32,686.457 1202.88,686.457 1203.44,686.457 1204,686.457 1204.56,686.457 1205.12,686.457 1205.68,686.457 1206.24,686.457 1206.8,686.457 1207.35,686.457 1207.91,686.457 1208.47,686.457 1209.03,686.457 1209.59,686.457 1210.15,686.457 1210.71,686.457 1211.27,686.457 1211.83,686.457 1212.39,686.457 1212.95,686.457 1213.51,686.457 1214.07,686.457 1214.62,686.457 1215.18,686.457 1215.74,686.457 1216.3,686.457 1216.86,686.457 1217.42,686.457 1217.98,686.457 1218.54,686.457 1219.1,686.457 1219.66,686.457 1220.22,686.457 1220.78,686.457 1221.34,686.457 1221.89,686.457 1222.45,686.457 1223.01,686.457 1223.57,686.457 1224.13,686.457 1224.69,686.457 1225.25,686.457 1225.81,686.457 1226.37,686.457 1226.93,686.457 1227.49,686.457 1228.05,686.457 1228.61,686.457 1229.17,686.457 1229.72,686.457 1230.28,686.457 1230.84,686.457 1231.4,686.457 1231.96,686.457 1232.52,686.457 1233.08,686.457 1233.64,686.457 1234.2,686.457 1234.76,686.457 1235.32,686.457 1235.88,686.457 1236.44,686.457 1236.99,686.457 1237.55,686.457 1238.11,686.457 1238.67,686.457 1239.23,686.457 1239.79,686.457 1240.35,686.457 1240.91,686.457 1241.47,686.457 1242.03,686.457 1242.59,686.457 1243.15,686.457 1243.71,686.457 1244.26,686.457 1244.82,686.457 1245.38,686.457 1245.94,686.457 1246.5,686.457 1247.06,686.457 1247.62,686.457 1248.18,686.457 1248.74,686.457 1249.3,686.457 1249.86,686.457 1250.42,686.457 1250.98,686.457 1251.54,686.457 1252.09,686.457 1252.65,686.457 1253.21,686.457 1253.77,686.457 1254.33,686.457 1254.89,686.457 1255.45,686.457 1256.01,686.457 1256.57,686.457 1257.13,686.457 1257.69,686.457 1258.25,686.457 1258.81,686.457 1259.36,686.457 1259.92,686.457 1260.48,686.457 1261.04,686.457 1261.6,686.457 1262.16,686.457 1262.72,686.457 1263.28,686.457 1263.84,686.457 1264.4,686.457 1264.96,686.457 1265.52,686.457 1266.08,686.457 1266.63,686.457 1267.19,686.457 1267.75,686.457 1268.31,686.457 1268.87,686.457 1269.43,686.457 1269.99,686.457 1270.55,686.457 1271.11,686.457 1271.67,686.457 1272.23,686.457 1272.79,686.457 1273.35,686.457 1273.91,686.457 1274.46,686.457 1275.02,686.457 1275.58,686.457 1276.14,686.457 1276.7,686.457 1277.26,686.457 1277.82,686.457 1278.38,686.457 1278.94,686.457 1279.5,686.457 1280.06,686.457 1280.62,686.457 1281.18,686.457 1281.73,686.457 1282.29,686.457 1282.85,686.457 1283.41,686.457 1283.97,686.457 1284.53,686.457 1285.09,686.457 1285.65,686.457 1286.21,686.457 1286.77,686.457 1287.33,686.457 1287.89,686.457 1288.45,686.457 1289,686.457 1289.56,686.457 1290.12,686.457 1290.68,686.457 1291.24,686.457 1291.8,686.457 1292.36,686.457 1292.92,686.457 1293.48,686.457 1294.04,686.457 1294.6,686.457 1295.16,686.457 1295.72,686.457 1296.28,686.457 1296.83,686.457 1297.39,686.457 1297.95,686.457 1298.51,686.457 1299.07,686.457 1299.63,686.457 1300.19,686.457 1300.75,686.457 1301.31,686.457 1301.87,686.457 1302.43,686.457 1302.99,686.457 1303.55,686.457 1304.1,686.457 1304.66,686.457 1305.22,686.457 1305.78,686.457 1306.34,686.457 1306.9,686.457 1307.46,686.457 1308.02,686.457 1308.58,686.457 1309.14,686.457 1309.7,686.457 1310.26,686.457 1310.82,686.457 1311.38,686.457 1311.93,686.457 1312.49,686.457 1313.05,686.457 1313.61,686.457 1314.17,686.457 1314.73,686.457 1315.29,686.457 1315.85,686.457 1316.41,686.457 1316.97,686.457 1317.53,686.457 1318.09,686.457 1318.65,686.457 1319.2,686.457 1319.76,686.457 1320.32,686.457 1320.88,686.457 1321.44,686.457 1322,686.457 1322.56,686.457 1323.12,686.457 1323.68,686.457 1324.24,686.457 1324.8,686.457 1325.36,686.457 1325.92,686.457 1326.47,686.457 1327.03,686.457 1327.59,686.457 1328.15,686.457 1328.71,686.457 1329.27,686.457 1329.83,686.457 1330.39,686.457 1330.95,686.457 1331.51,686.457 1332.07,686.457 1332.63,686.457 1333.19,686.457 1333.75,686.457 1334.3,686.457 1334.86,686.457 1335.42,686.457 1335.98,686.457 1336.54,686.457 1337.1,686.457 1337.66,686.457 1338.22,686.457 1338.78,686.457 1339.34,686.457 1339.9,686.457 1340.46,686.457 1341.02,686.457 1341.57,686.457 1342.13,686.457 1342.69,686.457 1343.25,686.457 1343.81,686.457 1344.37,686.457 1344.93,686.457 1345.49,686.457 1346.05,686.457 1346.61,686.457 1347.17,686.457 1347.73,686.457 1348.29,686.457 1348.84,686.457 1349.4,686.457 1349.96,686.457 1350.52,686.457 1351.08,686.457 1351.64,686.457 1352.2,686.457 1352.76,686.457 1353.32,686.457 1353.88,686.457 1354.44,686.457 1355,686.457 1355.56,686.457 1356.12,686.457 1356.67,686.457 1357.23,686.457 1357.79,686.457 1358.35,686.457 1358.91,686.457 1359.47,686.457 1360.03,686.457 1360.59,686.457 1361.15,686.457 1361.71,686.457 1362.27,686.457 1362.83,686.457 1363.39,686.457 1363.94,686.457 1364.5,686.457 1365.06,686.457 1365.62,686.457 1366.18,686.457 1366.74,686.457 1367.3,686.457 1367.86,686.457 1368.42,686.457 1368.98,686.457 1369.54,686.457 1370.1,686.457 1370.66,686.457 1371.21,686.457 1371.77,686.457 1372.33,686.457 1372.89,686.457 1373.45,686.457 1374.01,686.457 1374.57,686.457 1375.13,686.457 1375.69,686.457 1376.25,686.457 1376.81,686.457 1377.37,686.457 1377.93,686.457 1378.49,686.457 1379.04,686.457 1379.6,686.457 1380.16,686.457 1380.72,686.457 1381.28,686.457 1381.84,686.457 1382.4,686.457 1382.96,686.457 1383.52,686.457 1384.08,686.457 1384.64,686.457 1385.2,686.457 1385.76,686.457 1386.31,686.457 1386.87,686.457 1387.43,686.457 1387.99,686.457 1388.55,686.457 1389.11,686.457 1389.67,686.457 1390.23,686.457 1390.79,686.457 1391.35,686.457 1391.91,686.457 1392.47,686.457 1393.03,686.457 1393.58,686.457 1394.14,686.457 1394.7,686.457 1395.26,686.457 1395.82,686.457 1396.38,686.457 1396.94,686.457 1397.5,686.457 1398.06,686.457 1398.62,686.457 1399.18,686.457 1399.74,686.457 1400.3,686.457 1400.86,686.457 1401.41,686.457 1401.97,686.457 1402.53,686.457 1403.09,686.457 1403.65,686.457 1404.21,686.457 1404.77,686.457 1405.33,686.457 1405.89,686.457 1406.45,686.457 1407.01,686.457 1407.57,686.457 1408.13,686.457 1408.68,686.457 1409.24,686.457 1409.8,686.457 1410.36,686.457 1410.92,686.457 1411.48,686.457 1412.04,686.457 1412.6,686.457 1413.16,686.457 1413.72,686.457 1414.28,686.457 1414.84,686.457 1415.4,686.457 1415.95,686.457 1416.51,686.457 1417.07,686.457 1417.63,686.457 1418.19,686.457 1418.75,686.457 1419.31,686.457 1419.87,686.457 1420.43,686.457 1420.99,686.457 1421.55,686.457 1422.11,686.457 1422.67,686.457 1423.23,686.457 1423.78,686.457 1424.34,686.457 1424.9,686.457 1425.46,686.457 1426.02,686.457 1426.58,686.457 1427.14,686.457 1427.7,686.457 1428.26,686.457 1428.82,686.457 1429.38,686.457 1429.94,686.457 1430.5,686.457 1431.05,686.457 1431.61,686.457 1432.17,686.457 1432.73,686.457 1433.29,686.457 1433.85,686.457 1434.41,686.457 1434.97,686.457 1435.53,686.457 1436.09,686.457 1436.65,686.457 1437.21,686.457 1437.77,686.457 1438.33,686.457 1438.88,686.457 1439.44,686.457 1440,686.457 1440.56,686.457 1441.12,686.457 1441.68,686.457 1442.24,686.457 1442.8,686.457 1443.36,686.457 1443.92,686.457 1444.48,686.457 1445.04,686.457 1445.6,686.457 1446.15,686.457 1446.71,686.457 1447.27,686.457 1447.83,686.457 1448.39,686.457 1448.95,686.457 1449.51,686.457 1450.07,686.457 1450.63,686.457 1451.19,686.457 1451.75,686.457 1452.31,686.457 1452.87,686.457 1453.42,686.457 1453.98,686.457 1454.54,686.457 1455.1,686.457 1455.66,686.457 1456.22,686.457 1456.78,686.457 1457.34,686.457 1457.9,686.457 1458.46,686.457 1459.02,686.457 1459.58,686.457 1460.14,686.457 1460.7,686.457 1461.25,686.457 1461.81,686.457 1462.37,686.457 1462.93,686.457 1463.49,686.457 1464.05,686.457 1464.61,686.457 1465.17,686.457 1465.73,686.457 1466.29,686.457 1466.85,686.457 1467.41,686.457 1467.97,686.457 1468.52,686.457 1469.08,686.457 1469.64,686.457 1470.2,686.457 1470.76,686.457 1471.32,686.457 1471.88,686.457 1472.44,686.457 1473,686.457 1473.56,686.457 1474.12,686.457 1474.68,686.457 1475.24,686.457 1475.79,686.457 1476.35,686.457 1476.91,686.457 1477.47,686.457 1478.03,686.457 1478.59,686.457 1479.15,686.457 1479.71,686.457 1480.27,686.457 1480.83,686.457 1481.39,686.457 1481.95,686.457 1482.51,686.457 1483.07,686.457 1483.62,686.457 1484.18,686.457 1484.74,686.457 1485.3,686.457 1485.86,686.457 1486.42,686.457 1486.98,686.457 1487.54,686.457 1488.1,686.457 1488.66,686.457 1489.22,686.457 1489.78,686.457 1490.34,686.457 1490.89,686.457 1491.45,686.457 1492.01,686.457 1492.57,686.457 1493.13,686.457 1493.69,686.457 1494.25,686.457 1494.81,686.457 1495.37,686.457 1495.93,686.457 1496.49,686.457 1497.05,686.457 1497.61,686.457 1498.16,686.457 1498.72,686.457 1499.28,686.457 1499.84,686.457 1500.4,686.457 1500.96,686.457 1501.52,686.457 1502.08,686.457 1502.64,686.457 1503.2,686.457 1503.76,686.457 1504.32,686.457 1504.88,686.457 1505.44,686.457 1505.99,686.457 1506.55,686.457 1507.11,686.457 1507.67,686.457 1508.23,686.457 1508.79,686.457 1509.35,686.457 1509.91,686.457 1510.47,686.457 1511.03,686.457 1511.59,686.457 1512.15,686.457 1512.71,686.457 1513.26,686.457 1513.82,686.457 1514.38,686.457 1514.94,686.457 1515.5,686.457 1516.06,686.457 1516.62,686.457 1517.18,686.457 1517.74,686.457 1518.3,686.457 1518.86,686.457 1519.42,686.457 1519.98,686.457 1520.53,686.457 1521.09,686.457 1521.65,686.457 1522.21,686.457 1522.77,686.457 1523.33,686.457 1523.89,686.457 1524.45,686.457 1525.01,686.457 1525.57,686.457 1526.13,686.457 1526.69,686.457 1527.25,686.457 1527.81,686.457 1528.36,686.457 1528.92,686.457 1529.48,686.457 1530.04,686.457 1530.6,686.457 1531.16,686.457 1531.72,686.457 1532.28,686.457 1532.84,686.457 1533.4,686.457 1533.96,686.457 1534.52,686.457 1535.08,686.457 1535.63,686.457 1536.19,686.457 1536.75,686.457 1537.31,686.457 1537.87,686.457 1538.43,686.457 1538.99,686.457 1539.55,686.457 1540.11,686.457 1540.67,686.457 1541.23,686.457 1541.79,686.457 1542.35,686.457 1542.9,686.457 1543.46,686.457 1544.02,686.457 1544.58,686.457 1545.14,686.457 1545.7,686.457 1546.26,686.457 1546.82,686.457 1547.38,686.457 1547.94,686.457 1548.5,686.457 1549.06,686.457 1549.62,686.457 1550.18,686.457 1550.73,686.457 1551.29,686.457 1551.85,686.457 1552.41,686.457 1552.97,686.457 1553.53,686.457 1554.09,686.457 1554.65,686.457 1555.21,686.457 1555.77,686.457 1556.33,686.457 1556.89,686.457 1557.45,686.457 1558,686.457 1558.56,686.457 1559.12,686.457 1559.68,686.457 1560.24,686.457 1560.8,686.457 1561.36,686.457 1561.92,686.457 1562.48,686.457 1563.04,686.457 1563.6,686.457 1564.16,686.457 1564.72,686.457 1565.28,686.457 1565.83,686.457 1566.39,686.457 1566.95,686.457 1567.51,686.457 1568.07,686.457 1568.63,686.457 1569.19,686.457 1569.75,686.457 1570.31,686.457 1570.87,686.457 1571.43,686.457 1571.99,686.457 1572.55,686.457 1573.1,686.457 1573.66,686.457 1574.22,686.457 1574.78,686.457 1575.34,686.457 1575.9,686.457 1576.46,686.457 1577.02,686.457 1577.58,686.457 1578.14,686.457 1578.7,686.457 1579.26,686.457 1579.82,686.457 1580.37,686.457 1580.93,686.457 1581.49,686.457 1582.05,686.457 1582.61,686.457 1583.17,686.457 1583.73,686.457 1584.29,686.457 1584.85,686.457 1585.41,686.457 1585.97,686.457 1586.53,686.457 1587.09,686.457 1587.65,686.457 1588.2,686.457 1588.76,686.457 1589.32,686.457 1589.88,686.457 1590.44,686.457 1591,686.457 1591.56,686.457 1592.12,686.457 1592.68,686.457 1593.24,686.457 1593.8,686.457 1594.36,686.457 1594.92,686.457 1595.47,686.457 1596.03,686.457 1596.59,686.457 1597.15,686.457 1597.71,686.457 1598.27,686.457 1598.83,686.457 1599.39,686.457 1599.95,686.457 1600.51,686.457 1601.07,686.457 1601.63,686.457 1602.19,686.457 1602.74,686.457 1603.3,686.457 1603.86,686.457 1604.42,686.457 1604.98,686.457 1605.54,686.457 1606.1,686.457 1606.66,686.457 1607.22,686.457 1607.78,686.457 1608.34,686.457 1608.9,686.457 1609.46,686.457 1610.02,686.457 1610.57,686.457 1611.13,686.457 1611.69,686.457 1612.25,686.457 1612.81,686.457 1613.37,686.457 1613.93,686.457 1614.49,686.457 1615.05,686.457 1615.61,686.457 1616.17,686.457 1616.73,686.457 1617.29,686.457 1617.84,686.457 1618.4,686.457 1618.96,686.457 1619.52,686.457 1620.08,686.457 1620.64,686.457 1621.2,686.457 1621.76,686.457 1622.32,686.457 1622.88,686.457 1623.44,686.457 1624,686.457 1624.56,686.457 1625.11,686.457 1625.67,686.457 1626.23,686.457 1626.79,686.457 1627.35,686.457 1627.91,686.457 1628.47,686.457 1629.03,686.457 1629.59,686.457 1630.15,686.457 1630.71,686.457 1631.27,686.457 1631.83,686.457 1632.39,686.457 1632.94,686.457 1633.5,686.457 1634.06,686.457 1634.62,686.457 1635.18,686.457 1635.74,686.457 1636.3,686.457 1636.86,686.457 1637.42,686.457 1637.98,686.457 1638.54,686.457 1639.1,686.457 1639.66,686.457 1640.21,686.457 1640.77,686.457 1641.33,686.457 1641.89,686.457 1642.45,686.457 1643.01,686.457 1643.57,686.457 1644.13,686.457 1644.69,686.457 1645.25,686.457 1645.81,686.457 1646.37,686.457 1646.93,686.457 1647.48,686.457 1648.04,686.457 1648.6,686.457 1649.16,686.457 1649.72,686.457 1650.28,686.457 1650.84,686.457 1651.4,686.457 1651.96,686.457 1652.52,686.457 1653.08,686.457 1653.64,686.457 1654.2,686.457 1654.76,686.457 1655.31,686.457 1655.87,686.457 1656.43,686.457 1656.99,686.457 1657.55,686.457 1658.11,686.457 1658.67,686.457 1659.23,686.457 1659.79,686.457 1660.35,686.457 1660.91,686.457 1661.47,686.457 1662.03,686.457 1662.58,686.457 1663.14,686.457 1663.7,686.457 1664.26,686.457 1664.82,686.457 1665.38,686.457 1665.94,686.457 1666.5,686.457 1667.06,686.457 1667.62,686.457 1668.18,686.457 1668.74,686.457 1669.3,686.457 1669.85,686.457 1670.41,686.457 1670.97,686.457 1671.53,686.457 1672.09,686.457 1672.65,686.457 1673.21,686.457 1673.77,686.457 1674.33,686.457 1674.89,686.457 1675.45,686.457 1676.01,686.457 1676.57,686.457 1677.13,686.457 1677.68,686.457 1678.24,686.457 1678.8,686.457 1679.36,686.457 1679.92,686.457 1680.48,686.457 1681.04,686.457 1681.6,686.457 1682.16,686.457 1682.72,686.457 1683.28,686.457 1683.84,686.457 1684.4,686.457 1684.95,686.457 1685.51,686.457 1686.07,686.457 1686.63,686.457 1687.19,686.457 1687.75,686.457 1688.31,686.457 1688.87,686.457 1689.43,686.457 1689.99,686.457 1690.55,686.457 1691.11,686.457 1691.67,686.457 1692.23,686.457 1692.78,686.457 1693.34,686.457 1693.9,686.457 1694.46,686.457 1695.02,686.457 1695.58,686.457 1696.14,686.457 1696.7,686.457 1697.26,686.457 1697.82,686.457 1698.38,686.457 1698.94,686.457 1699.5,686.457 1700.05,686.457 1700.61,686.457 1701.17,686.457 1701.73,686.457 1702.29,686.457 1702.85,686.457 1703.41,686.457 1703.97,686.457 1704.53,686.457 1705.09,686.457 1705.65,686.457 1706.21,686.457 1706.77,686.457 1707.32,686.457 1707.88,686.457 1708.44,686.457 1709,686.457 1709.56,686.457 1710.12,686.457 1710.68,686.457 1711.24,686.457 1711.8,686.457 1712.36,686.457 1712.92,686.457 1713.48,686.457 1714.04,686.457 1714.6,686.457 1715.15,686.457 1715.71,686.457 1716.27,686.457 1716.83,686.457 1717.39,686.457 1717.95,686.457 1718.51,686.457 1719.07,686.457 1719.63,686.457 1720.19,686.457 1720.75,686.457 1721.31,686.457 1721.87,686.457 1722.42,686.457 1722.98,686.457 1723.54,686.457 1724.1,686.457 1724.66,686.457 1725.22,686.457 1725.78,686.457 1726.34,686.457 1726.9,686.457 1727.46,686.457 1728.02,686.457 1728.58,686.457 1729.14,686.457 1729.69,686.457 1730.25,686.457 1730.81,686.457 1731.37,686.457 1731.93,686.457 1732.49,686.457 1733.05,686.457 1733.61,686.457 1734.17,686.457 1734.73,686.457 1735.29,686.457 1735.85,686.457 1736.41,686.457 1736.97,686.457 1737.52,686.457 1738.08,686.457 1738.64,686.457 1739.2,686.457 1739.76,686.457 1740.32,686.457 1740.88,686.457 1741.44,686.457 1742,686.457 1742.56,686.457 1743.12,686.457 1743.68,686.457 1744.24,686.457 1744.79,686.457 1745.35,686.457 1745.91,686.457 1746.47,686.457 1747.03,686.457 1747.59,686.457 1748.15,686.457 1748.71,686.457 1749.27,686.457 1749.83,686.457 1750.39,686.457 1750.95,686.457 1751.51,686.457 1752.06,686.457 1752.62,686.457 1753.18,686.457 1753.74,686.457 1754.3,686.457 1754.86,686.457 1755.42,686.457 1755.98,686.457 1756.54,686.457 1757.1,686.457 1757.66,686.457 1758.22,686.457 1758.78,686.457 1759.34,686.457 1759.89,686.457 1760.45,686.457 1761.01,686.457 1761.57,686.457 1762.13,686.457 1762.69,686.457 1763.25,686.457 1763.81,686.457 1764.37,686.457 1764.93,686.457 1765.49,686.457 1766.05,686.457 1766.61,686.457 1767.16,686.457 1767.72,686.457 1768.28,686.457 1768.84,686.457 1769.4,686.457 1769.96,686.457 1770.52,686.457 1771.08,686.457 1771.64,686.457 1772.2,686.457 1772.76,686.457 1773.32,686.457 1773.88,686.457 1774.43,686.457 1774.99,686.457 1775.55,686.457 1776.11,686.457 1776.67,686.457 1777.23,686.457 1777.79,686.457 1778.35,686.457 1778.91,686.457 1779.47,686.457 1780.03,686.457 1780.59,686.457 1781.15,686.457 1781.71,686.457 1782.26,686.457 1782.82,686.457 1783.38,686.457 1783.94,686.457 1784.5,686.457 1785.06,686.457 1785.62,686.457 1786.18,686.457 1786.74,686.457 1787.3,686.457 1787.86,686.457 1788.42,686.457 1788.98,686.457 1789.53,686.457 1790.09,686.457 1790.65,686.457 1791.21,686.457 1791.77,686.457 1792.33,686.457 1792.89,686.457 1793.45,686.457 1794.01,686.457 1794.57,686.457 1795.13,686.457 1795.69,686.457 1796.25,686.457 1796.8,686.457 1797.36,686.457 1797.92,686.457 1798.48,686.457 1799.04,686.457 1799.6,686.457 1800.16,686.457 1800.72,686.457 1801.28,686.457 1801.84,686.457 1802.4,686.457 1802.96,686.457 1803.52,686.457 1804.08,686.457 1804.63,686.457 1805.19,686.457 1805.75,686.457 1806.31,686.457 1806.87,686.457 1807.43,686.457 1807.99,686.457 1808.55,686.457 1809.11,686.457 1809.67,686.457 1810.23,686.457 1810.79,686.457 1811.35,686.457 1811.9,686.457 1812.46,686.457 1813.02,686.457 1813.58,686.457 1814.14,686.457 1814.7,686.457 1815.26,686.457 1815.82,686.457 1816.38,686.457 1816.94,686.457 1817.5,686.457 1818.06,686.457 1818.62,686.457 1819.18,686.457 1819.73,686.457 1820.29,686.457 1820.85,686.457 1821.41,686.457 1821.97,686.457 1822.53,686.457 1823.09,686.457 1823.65,686.457 1824.21,686.457 1824.77,686.457 1825.33,686.457 1825.89,686.457 1826.45,686.457 1827,686.457 1827.56,686.457 1828.12,686.457 1828.68,686.457 1829.24,686.457 1829.8,686.457 1830.36,686.457 1830.92,686.457 1831.48,686.457 1832.04,686.457 1832.6,686.457 1833.16,686.457 1833.72,686.457 1834.27,686.457 1834.83,686.457 1835.39,686.457 1835.95,686.457 1836.51,686.457 1837.07,686.457 1837.63,686.457 1838.19,686.457 \"/>\n<path clip-path=\"url(#clip283)\" d=\"M720.247 684.359 L720.806 684.359 L721.365 684.359 L721.924 684.359 L722.484 684.359 L723.043 684.359 L723.602 684.359 L724.161 684.359 L724.721 684.359 L725.28 684.359 L725.839 684.359 L726.398 684.359 L726.958 684.359 L727.517 684.359 L728.076 684.359 L728.635 684.359 L729.195 684.359 L729.754 684.359 L730.313 684.359 L730.872 684.359 L731.432 684.359 L731.991 684.359 L732.55 684.359 L733.109 684.359 L733.669 684.359 L734.228 684.359 L734.787 684.359 L735.346 684.359 L735.906 684.359 L736.465 684.359 L737.024 684.359 L737.583 684.359 L738.143 684.359 L738.702 684.359 L739.261 684.359 L739.82 684.359 L740.38 684.359 L740.939 684.359 L741.498 684.359 L742.057 684.359 L742.617 684.359 L743.176 684.359 L743.735 684.359 L744.294 684.359 L744.854 684.359 L745.413 684.359 L745.972 684.359 L746.531 684.359 L747.091 684.359 L747.65 684.359 L748.209 684.359 L748.768 684.359 L749.328 684.359 L749.887 684.359 L750.446 684.359 L751.005 684.359 L751.565 684.359 L752.124 684.359 L752.683 684.359 L753.242 684.359 L753.802 684.359 L754.361 684.359 L754.92 684.359 L755.479 684.359 L756.039 684.359 L756.598 684.359 L757.157 684.359 L757.716 684.359 L758.276 684.359 L758.835 684.359 L759.394 684.359 L759.953 684.359 L760.513 684.359 L761.072 684.359 L761.631 684.359 L762.19 684.359 L762.75 684.359 L763.309 684.359 L763.868 684.359 L764.427 684.359 L764.987 684.359 L765.546 684.359 L766.105 684.359 L766.664 684.359 L767.224 684.359 L767.783 684.359 L768.342 684.359 L768.901 684.359 L769.461 684.359 L770.02 684.359 L770.579 684.359 L771.138 684.359 L771.698 684.359 L772.257 684.359 L772.816 684.359 L773.375 684.359 L773.935 684.359 L774.494 684.359 L775.053 684.359 L775.612 684.359 L776.172 684.359 L776.731 684.359 L777.29 684.359 L777.849 684.359 L778.409 684.359 L778.968 684.359 L779.527 684.359 L780.086 684.359 L780.646 684.359 L781.205 684.359 L781.764 684.359 L782.323 684.359 L782.883 684.359 L783.442 684.359 L784.001 684.359 L784.56 684.359 L785.12 684.359 L785.679 684.359 L786.238 684.359 L786.797 684.359 L787.357 684.359 L787.916 684.359 L788.475 684.359 L789.034 684.359 L789.594 684.359 L790.153 684.359 L790.712 684.359 L791.271 684.359 L791.831 684.359 L792.39 684.359 L792.949 684.359 L793.508 684.359 L794.068 684.359 L794.627 684.359 L795.186 684.359 L795.745 684.359 L796.305 684.359 L796.864 684.359 L797.423 684.359 L797.982 684.359 L798.542 684.359 L799.101 684.359 L799.66 684.359 L800.219 684.359 L800.779 684.359 L801.338 684.359 L801.897 684.359 L802.456 684.359 L803.016 684.359 L803.575 684.359 L804.134 684.359 L804.693 684.359 L805.253 684.359 L805.812 684.359 L806.371 684.359 L806.931 684.359 L807.49 684.359 L808.049 684.359 L808.608 684.359 L809.168 684.359 L809.727 684.359 L810.286 684.359 L810.845 684.359 L811.405 684.359 L811.964 684.359 L812.523 684.359 L813.082 684.359 L813.642 684.359 L814.201 684.359 L814.76 684.359 L815.319 684.359 L815.879 684.359 L816.438 684.359 L816.997 684.359 L817.556 684.359 L818.116 684.359 L818.675 684.359 L819.234 684.359 L819.793 684.359 L820.353 684.359 L820.912 684.359 L821.471 684.359 L822.03 684.359 L822.59 684.359 L823.149 684.359 L823.708 684.359 L824.267 684.359 L824.827 684.359 L825.386 684.359 L825.945 684.359 L826.504 684.359 L827.064 684.359 L827.623 684.359 L828.182 684.359 L828.741 684.359 L829.301 684.359 L829.86 684.359 L830.419 684.359 L830.978 684.359 L831.538 684.359 L832.097 684.359 L832.656 684.359 L833.215 684.359 L833.775 684.359 L834.334 684.359 L834.893 684.359 L835.452 684.359 L836.012 684.359 L836.571 684.359 L837.13 684.359 L837.689 684.359 L838.249 684.359 L838.808 684.359 L839.367 684.359 L839.926 684.359 L840.486 684.359 L841.045 684.359 L841.604 684.359 L842.163 684.359 L842.723 684.359 L843.282 684.359 L843.841 684.359 L844.4 684.359 L844.96 684.359 L845.519 684.359 L846.078 684.359 L846.637 684.359 L847.197 684.359 L847.756 684.359 L848.315 684.359 L848.874 684.359 L849.434 684.359 L849.993 684.359 L850.552 684.359 L851.111 684.359 L851.671 684.359 L852.23 684.359 L852.789 684.359 L853.348 684.359 L853.908 684.359 L854.467 684.359 L855.026 684.359 L855.585 684.359 L856.145 684.359 L856.704 684.359 L857.263 684.359 L857.822 684.359 L858.382 684.359 L858.941 684.359 L859.5 684.359 L860.059 684.359 L860.619 684.359 L861.178 684.359 L861.737 684.359 L862.296 684.359 L862.856 684.359 L863.415 684.359 L863.974 684.359 L864.533 684.359 L865.093 684.359 L865.652 684.359 L866.211 684.359 L866.77 684.359 L867.33 684.359 L867.889 684.359 L868.448 684.359 L869.007 684.359 L869.567 684.359 L870.126 684.359 L870.685 684.359 L871.244 684.359 L871.804 684.359 L872.363 684.359 L872.922 684.359 L873.481 684.359 L874.041 684.359 L874.6 684.359 L875.159 684.359 L875.718 684.359 L876.278 684.359 L876.837 684.359 L877.396 684.359 L877.955 684.359 L878.515 684.359 L879.074 684.359 L879.633 684.359 L880.192 684.359 L880.752 684.359 L881.311 684.359 L881.87 684.359 L882.429 684.359 L882.989 684.359 L883.548 684.359 L884.107 684.359 L884.666 684.359 L885.226 684.359 L885.785 684.359 L886.344 684.359 L886.903 684.359 L887.463 684.359 L888.022 684.359 L888.581 684.359 L889.14 684.359 L889.7 684.359 L890.259 684.359 L890.818 684.359 L891.377 684.359 L891.937 684.359 L892.496 684.359 L893.055 684.359 L893.614 684.359 L894.174 684.359 L894.733 684.359 L895.292 684.359 L895.851 684.359 L896.411 684.359 L896.97 684.359 L897.529 684.359 L898.088 684.359 L898.648 684.359 L899.207 684.359 L899.766 684.359 L900.325 684.359 L900.885 684.359 L901.444 684.359 L902.003 684.359 L902.562 684.359 L903.122 684.359 L903.681 684.359 L904.24 684.359 L904.799 684.359 L905.359 684.359 L905.918 684.359 L906.477 684.359 L907.036 684.359 L907.596 684.359 L908.155 684.359 L908.714 684.359 L909.273 684.359 L909.833 684.359 L910.392 684.359 L910.951 684.359 L911.51 684.359 L912.07 684.359 L912.629 684.359 L913.188 684.359 L913.747 684.359 L914.307 684.359 L914.866 684.359 L915.425 684.359 L915.984 684.359 L916.544 684.359 L917.103 684.359 L917.662 684.359 L918.221 684.359 L918.781 684.359 L919.34 684.359 L919.899 684.359 L920.458 684.359 L921.018 684.359 L921.577 684.359 L922.136 684.359 L922.695 684.359 L923.255 684.359 L923.814 684.359 L924.373 684.359 L924.932 684.359 L925.492 684.359 L926.051 684.359 L926.61 684.359 L927.169 684.359 L927.729 684.359 L928.288 684.359 L928.847 684.359 L929.406 684.359 L929.966 684.359 L930.525 684.359 L931.084 684.359 L931.644 684.359 L932.203 684.359 L932.762 684.359 L933.321 684.359 L933.881 684.359 L934.44 684.359 L934.999 684.359 L935.558 684.359 L936.118 684.359 L936.677 684.359 L937.236 684.359 L937.795 684.359 L938.355 684.359 L938.914 684.359 L939.473 684.359 L940.032 684.359 L940.592 684.359 L941.151 684.359 L941.71 684.359 L942.269 684.359 L942.829 684.359 L943.388 684.359 L943.947 684.359 L944.506 684.359 L945.066 684.359 L945.625 684.359 L946.184 684.359 L946.743 684.359 L947.303 684.359 L947.862 684.359 L948.421 684.359 L948.98 684.359 L949.54 684.359 L950.099 684.359 L950.658 684.359 L951.217 684.359 L951.777 684.359 L952.336 684.359 L952.895 684.359 L953.454 684.359 L954.014 684.359 L954.573 684.359 L955.132 684.359 L955.691 684.359 L956.251 684.359 L956.81 684.359 L957.369 684.359 L957.928 684.359 L958.488 684.359 L959.047 684.359 L959.606 684.359 L960.165 684.359 L960.725 684.359 L961.284 684.359 L961.843 684.359 L962.402 684.359 L962.962 684.359 L963.521 684.359 L964.08 684.359 L964.639 684.359 L965.199 684.359 L965.758 684.359 L966.317 684.359 L966.876 684.359 L967.436 684.359 L967.995 684.359 L968.554 684.359 L969.113 684.359 L969.673 684.359 L970.232 684.359 L970.791 684.359 L971.35 684.359 L971.91 684.359 L972.469 684.359 L973.028 684.359 L973.587 684.359 L974.147 684.359 L974.706 684.359 L975.265 684.359 L975.824 684.359 L976.384 684.359 L976.943 684.359 L977.502 684.359 L978.061 684.359 L978.621 684.359 L979.18 684.359 L979.739 684.359 L980.298 684.359 L980.858 684.359 L981.417 684.359 L981.976 684.359 L982.535 684.359 L983.095 684.359 L983.654 684.359 L984.213 684.359 L984.772 684.359 L985.332 684.359 L985.891 684.359 L986.45 684.359 L987.009 684.359 L987.569 684.359 L988.128 684.359 L988.687 684.359 L989.246 684.359 L989.806 684.359 L990.365 684.359 L990.924 684.359 L991.483 684.359 L992.043 684.359 L992.602 684.359 L993.161 684.359 L993.72 684.359 L994.28 684.359 L994.839 684.359 L995.398 684.359 L995.957 684.359 L996.517 684.359 L997.076 684.359 L997.635 684.359 L998.194 684.359 L998.754 684.359 L999.313 684.359 L999.872 684.359 L1000.43 684.359 L1000.99 684.359 L1001.55 684.359 L1002.11 684.359 L1002.67 684.359 L1003.23 684.359 L1003.79 684.359 L1004.35 684.359 L1004.91 684.359 L1005.46 684.359 L1006.02 684.359 L1006.58 684.359 L1007.14 684.359 L1007.7 684.359 L1008.26 684.359 L1008.82 684.359 L1009.38 684.359 L1009.94 684.359 L1010.5 684.359 L1011.06 684.359 L1011.62 684.359 L1012.18 684.359 L1012.73 684.359 L1013.29 684.359 L1013.85 684.359 L1014.41 684.359 L1014.97 684.359 L1015.53 684.359 L1016.09 684.359 L1016.65 684.359 L1017.21 684.359 L1017.77 684.359 L1018.33 684.359 L1018.89 684.359 L1019.45 684.359 L1020.01 684.359 L1020.56 684.359 L1021.12 684.359 L1021.68 684.359 L1022.24 684.359 L1022.8 684.359 L1023.36 684.359 L1023.92 684.359 L1024.48 684.359 L1025.04 684.359 L1025.6 684.359 L1026.16 684.359 L1026.72 684.359 L1027.28 684.359 L1027.83 684.359 L1028.39 684.359 L1028.95 684.359 L1029.51 684.359 L1030.07 684.359 L1030.63 684.359 L1031.19 684.359 L1031.75 684.359 L1032.31 684.359 L1032.87 684.359 L1033.43 684.359 L1033.99 684.359 L1034.55 684.359 L1035.1 684.359 L1035.66 684.359 L1036.22 684.359 L1036.78 684.359 L1037.34 684.359 L1037.9 684.359 L1038.46 684.359 L1039.02 684.359 L1039.58 684.359 L1040.14 684.359 L1040.7 684.359 L1041.26 684.359 L1041.82 684.359 L1042.38 684.359 L1042.93 684.359 L1043.49 684.359 L1044.05 684.359 L1044.61 684.359 L1045.17 684.359 L1045.73 684.359 L1046.29 684.359 L1046.85 684.359 L1047.41 684.359 L1047.97 684.359 L1048.53 684.359 L1049.09 684.359 L1049.65 684.359 L1050.2 684.359 L1050.76 684.359 L1051.32 684.359 L1051.88 684.359 L1052.44 684.359 L1053 684.359 L1053.56 684.359 L1054.12 684.359 L1054.68 684.359 L1055.24 684.359 L1055.8 684.359 L1056.36 684.359 L1056.92 684.359 L1057.48 684.359 L1058.03 684.359 L1058.59 684.359 L1059.15 684.359 L1059.71 684.359 L1060.27 684.359 L1060.83 684.359 L1061.39 684.359 L1061.95 684.359 L1062.51 684.359 L1063.07 684.359 L1063.63 684.359 L1064.19 684.359 L1064.75 684.359 L1065.3 684.359 L1065.86 684.359 L1066.42 684.359 L1066.98 684.359 L1067.54 684.359 L1068.1 684.359 L1068.66 684.359 L1069.22 684.359 L1069.78 684.359 L1070.34 684.359 L1070.9 684.359 L1071.46 684.359 L1072.02 684.359 L1072.57 684.359 L1073.13 684.359 L1073.69 684.359 L1074.25 684.359 L1074.81 684.359 L1075.37 684.359 L1075.93 684.359 L1076.49 684.359 L1077.05 684.359 L1077.61 684.359 L1078.17 684.359 L1078.73 684.359 L1079.29 684.359 L1079.85 684.359 L1080.4 684.359 L1080.96 684.359 L1081.52 684.359 L1082.08 684.359 L1082.64 684.359 L1083.2 684.359 L1083.76 684.359 L1084.32 684.359 L1084.88 684.359 L1085.44 684.359 L1086 684.359 L1086.56 684.359 L1087.12 684.359 L1087.67 684.359 L1088.23 684.359 L1088.79 684.359 L1089.35 684.359 L1089.91 684.359 L1090.47 684.359 L1091.03 684.359 L1091.59 684.359 L1092.15 684.359 L1092.71 684.359 L1093.27 684.359 L1093.83 684.359 L1094.39 684.359 L1094.94 684.359 L1095.5 684.359 L1096.06 684.359 L1096.62 684.359 L1097.18 684.359 L1097.74 684.359 L1098.3 684.359 L1098.86 684.359 L1099.42 684.359 L1099.98 684.359 L1100.54 684.359 L1101.1 684.359 L1101.66 684.359 L1102.22 684.359 L1102.77 684.359 L1103.33 684.359 L1103.89 684.359 L1104.45 684.359 L1105.01 684.359 L1105.57 684.359 L1106.13 684.359 L1106.69 684.359 L1107.25 684.359 L1107.81 684.359 L1108.37 684.359 L1108.93 684.359 L1109.49 684.359 L1110.04 684.359 L1110.6 684.359 L1111.16 684.359 L1111.72 684.359 L1112.28 684.359 L1112.84 684.359 L1113.4 684.359 L1113.96 684.359 L1114.52 684.359 L1115.08 684.359 L1115.64 684.359 L1116.2 684.359 L1116.76 684.359 L1117.31 684.359 L1117.87 684.359 L1118.43 684.359 L1118.99 684.359 L1119.55 684.359 L1120.11 684.359 L1120.67 684.359 L1121.23 684.359 L1121.79 684.359 L1122.35 684.359 L1122.91 684.359 L1123.47 684.359 L1124.03 684.359 L1124.59 684.359 L1125.14 684.359 L1125.7 684.359 L1126.26 684.359 L1126.82 684.359 L1127.38 684.359 L1127.94 684.359 L1128.5 684.359 L1129.06 684.359 L1129.62 684.359 L1130.18 684.359 L1130.74 684.359 L1131.3 684.359 L1131.86 684.359 L1132.41 684.359 L1132.97 684.359 L1133.53 684.359 L1134.09 684.359 L1134.65 684.359 L1135.21 684.359 L1135.77 684.359 L1136.33 684.359 L1136.89 684.359 L1137.45 684.359 L1138.01 684.359 L1138.57 684.359 L1139.13 684.359 L1139.68 684.359 L1140.24 684.359 L1140.8 684.359 L1141.36 684.359 L1141.92 684.359 L1142.48 684.359 L1143.04 684.359 L1143.6 684.359 L1144.16 684.359 L1144.72 684.359 L1145.28 684.359 L1145.84 684.359 L1146.4 684.359 L1146.96 684.359 L1147.51 684.359 L1148.07 684.359 L1148.63 684.359 L1149.19 684.359 L1149.75 684.359 L1150.31 684.359 L1150.87 684.359 L1151.43 684.359 L1151.99 684.359 L1152.55 684.359 L1153.11 684.359 L1153.67 684.359 L1154.23 684.359 L1154.78 684.359 L1155.34 684.359 L1155.9 684.359 L1156.46 684.359 L1157.02 684.359 L1157.58 684.359 L1158.14 684.359 L1158.7 684.359 L1159.26 684.359 L1159.82 684.359 L1160.38 684.359 L1160.94 684.359 L1161.5 684.359 L1162.05 684.359 L1162.61 684.359 L1163.17 684.359 L1163.73 684.359 L1164.29 684.359 L1164.85 684.359 L1165.41 684.359 L1165.97 684.359 L1166.53 684.359 L1167.09 684.359 L1167.65 684.359 L1168.21 684.359 L1168.77 684.359 L1169.33 684.359 L1169.88 684.359 L1170.44 684.359 L1171 684.359 L1171.56 684.359 L1172.12 684.359 L1172.68 684.359 L1173.24 684.359 L1173.8 684.359 L1174.36 684.359 L1174.92 684.359 L1175.48 684.359 L1176.04 684.359 L1176.6 684.359 L1177.15 684.359 L1177.71 684.359 L1178.27 684.359 L1178.83 684.359 L1179.39 684.359 L1179.95 684.359 L1180.51 684.359 L1181.07 684.359 L1181.63 684.359 L1182.19 684.359 L1182.75 684.359 L1183.31 684.359 L1183.87 684.359 L1184.43 684.359 L1184.98 684.359 L1185.54 684.359 L1186.1 684.359 L1186.66 684.359 L1187.22 684.359 L1187.78 684.359 L1188.34 684.359 L1188.9 684.359 L1189.46 684.359 L1190.02 684.359 L1190.58 684.359 L1191.14 684.359 L1191.7 684.359 L1192.25 684.359 L1192.81 684.359 L1193.37 684.359 L1193.93 684.359 L1194.49 684.359 L1195.05 684.359 L1195.61 684.359 L1196.17 684.359 L1196.73 684.359 L1197.29 684.359 L1197.85 684.359 L1198.41 684.359 L1198.97 684.359 L1199.52 684.359 L1200.08 684.359 L1200.64 684.359 L1201.2 684.359 L1201.76 684.359 L1202.32 684.359 L1202.88 684.359 L1203.44 684.359 L1204 684.359 L1204.56 684.359 L1205.12 684.359 L1205.68 684.359 L1206.24 684.359 L1206.8 684.359 L1207.35 684.359 L1207.91 684.359 L1208.47 684.359 L1209.03 684.359 L1209.59 684.359 L1210.15 684.359 L1210.71 684.359 L1211.27 684.359 L1211.83 684.359 L1212.39 684.359 L1212.95 684.359 L1213.51 684.359 L1214.07 684.359 L1214.62 684.359 L1215.18 684.359 L1215.74 684.359 L1216.3 684.359 L1216.86 684.359 L1217.42 684.359 L1217.98 684.359 L1218.54 684.359 L1219.1 684.359 L1219.66 684.359 L1220.22 684.359 L1220.78 684.359 L1221.34 684.359 L1221.89 684.359 L1222.45 684.359 L1223.01 684.359 L1223.57 684.359 L1224.13 684.359 L1224.69 684.359 L1225.25 684.359 L1225.81 684.359 L1226.37 684.359 L1226.93 684.359 L1227.49 684.359 L1228.05 684.359 L1228.61 684.359 L1229.17 684.359 L1229.72 684.359 L1230.28 684.359 L1230.84 684.359 L1231.4 684.359 L1231.96 684.359 L1232.52 684.359 L1233.08 684.359 L1233.64 684.359 L1234.2 684.359 L1234.76 684.359 L1235.32 684.359 L1235.88 684.359 L1236.44 684.359 L1236.99 684.359 L1237.55 684.359 L1238.11 684.359 L1238.67 684.359 L1239.23 684.359 L1239.79 684.359 L1240.35 684.359 L1240.91 684.359 L1241.47 684.359 L1242.03 684.359 L1242.59 684.359 L1243.15 684.359 L1243.71 684.359 L1244.26 684.359 L1244.82 684.359 L1245.38 684.359 L1245.94 684.359 L1246.5 684.359 L1247.06 684.359 L1247.62 684.359 L1248.18 684.359 L1248.74 684.359 L1249.3 684.359 L1249.86 684.359 L1250.42 684.359 L1250.98 684.359 L1251.54 684.359 L1252.09 684.359 L1252.65 684.359 L1253.21 684.359 L1253.77 684.359 L1254.33 684.359 L1254.89 684.359 L1255.45 684.359 L1256.01 684.359 L1256.57 684.359 L1257.13 684.359 L1257.69 684.359 L1258.25 684.359 L1258.81 684.359 L1259.36 684.359 L1259.92 684.359 L1260.48 684.359 L1261.04 684.359 L1261.6 684.359 L1262.16 684.359 L1262.72 684.359 L1263.28 684.359 L1263.84 684.359 L1264.4 684.359 L1264.96 684.359 L1265.52 684.359 L1266.08 684.359 L1266.63 684.359 L1267.19 684.359 L1267.75 684.359 L1268.31 684.359 L1268.87 684.359 L1269.43 684.359 L1269.99 684.359 L1270.55 684.359 L1271.11 684.359 L1271.67 684.359 L1272.23 684.359 L1272.79 684.359 L1273.35 684.359 L1273.91 684.359 L1274.46 684.359 L1275.02 684.359 L1275.58 684.359 L1276.14 684.359 L1276.7 684.359 L1277.26 684.359 L1277.82 684.359 L1278.38 684.359 L1278.94 684.359 L1279.5 684.359 L1280.06 684.359 L1280.62 684.359 L1281.18 684.359 L1281.73 684.359 L1282.29 684.359 L1282.85 684.359 L1283.41 684.359 L1283.97 684.359 L1284.53 684.359 L1285.09 684.359 L1285.65 684.359 L1286.21 684.359 L1286.77 684.359 L1287.33 684.359 L1287.89 684.359 L1288.45 684.359 L1289 684.359 L1289.56 684.359 L1290.12 684.359 L1290.68 684.359 L1291.24 684.359 L1291.8 684.359 L1292.36 684.359 L1292.92 684.359 L1293.48 684.359 L1294.04 684.359 L1294.6 684.359 L1295.16 684.359 L1295.72 684.359 L1296.28 684.359 L1296.83 684.359 L1297.39 684.359 L1297.95 684.359 L1298.51 684.359 L1299.07 684.359 L1299.63 684.359 L1300.19 684.359 L1300.75 684.359 L1301.31 684.359 L1301.87 684.359 L1302.43 684.359 L1302.99 684.359 L1303.55 684.359 L1304.1 684.359 L1304.66 684.359 L1305.22 684.359 L1305.78 684.359 L1306.34 684.359 L1306.9 684.359 L1307.46 684.359 L1308.02 684.359 L1308.58 684.359 L1309.14 684.359 L1309.7 684.359 L1310.26 684.359 L1310.82 684.359 L1311.38 684.359 L1311.93 684.359 L1312.49 684.359 L1313.05 684.359 L1313.61 684.359 L1314.17 684.359 L1314.73 684.359 L1315.29 684.359 L1315.85 684.359 L1316.41 684.359 L1316.97 684.359 L1317.53 684.359 L1318.09 684.359 L1318.65 684.359 L1319.2 684.359 L1319.76 684.359 L1320.32 684.359 L1320.88 684.359 L1321.44 684.359 L1322 684.359 L1322.56 684.359 L1323.12 684.359 L1323.68 684.359 L1324.24 684.359 L1324.8 684.359 L1325.36 684.359 L1325.92 684.359 L1326.47 684.359 L1327.03 684.359 L1327.59 684.359 L1328.15 684.359 L1328.71 684.359 L1329.27 684.359 L1329.83 684.359 L1330.39 684.359 L1330.95 684.359 L1331.51 684.359 L1332.07 684.359 L1332.63 684.359 L1333.19 684.359 L1333.75 684.359 L1334.3 684.359 L1334.86 684.359 L1335.42 684.359 L1335.98 684.359 L1336.54 684.359 L1337.1 684.359 L1337.66 684.359 L1338.22 684.359 L1338.78 684.359 L1339.34 684.359 L1339.9 684.359 L1340.46 684.359 L1341.02 684.359 L1341.57 684.359 L1342.13 684.359 L1342.69 684.359 L1343.25 684.359 L1343.81 684.359 L1344.37 684.359 L1344.93 684.359 L1345.49 684.359 L1346.05 684.359 L1346.61 684.359 L1347.17 684.359 L1347.73 684.359 L1348.29 684.359 L1348.84 684.359 L1349.4 684.359 L1349.96 684.359 L1350.52 684.359 L1351.08 684.359 L1351.64 684.359 L1352.2 684.359 L1352.76 684.359 L1353.32 684.359 L1353.88 684.359 L1354.44 684.359 L1355 684.359 L1355.56 684.359 L1356.12 684.359 L1356.67 684.359 L1357.23 684.359 L1357.79 684.359 L1358.35 684.359 L1358.91 684.359 L1359.47 684.359 L1360.03 684.359 L1360.59 684.359 L1361.15 684.359 L1361.71 684.359 L1362.27 684.359 L1362.83 684.359 L1363.39 684.359 L1363.94 684.359 L1364.5 684.359 L1365.06 684.359 L1365.62 684.359 L1366.18 684.359 L1366.74 684.359 L1367.3 684.359 L1367.86 684.359 L1368.42 684.359 L1368.98 684.359 L1369.54 684.359 L1370.1 684.359 L1370.66 684.359 L1371.21 684.359 L1371.77 684.359 L1372.33 684.359 L1372.89 684.359 L1373.45 684.359 L1374.01 684.359 L1374.57 684.359 L1375.13 684.359 L1375.69 684.359 L1376.25 684.359 L1376.81 684.359 L1377.37 684.359 L1377.93 684.359 L1378.49 684.359 L1379.04 684.359 L1379.6 684.359 L1380.16 684.359 L1380.72 684.359 L1381.28 684.359 L1381.84 684.359 L1382.4 684.359 L1382.96 684.359 L1383.52 684.359 L1384.08 684.359 L1384.64 684.359 L1385.2 684.359 L1385.76 684.359 L1386.31 684.359 L1386.87 684.359 L1387.43 684.359 L1387.99 684.359 L1388.55 684.359 L1389.11 684.359 L1389.67 684.359 L1390.23 684.359 L1390.79 684.359 L1391.35 684.359 L1391.91 684.359 L1392.47 684.359 L1393.03 684.359 L1393.58 684.359 L1394.14 684.359 L1394.7 684.359 L1395.26 684.359 L1395.82 684.359 L1396.38 684.359 L1396.94 684.359 L1397.5 684.359 L1398.06 684.359 L1398.62 684.359 L1399.18 684.359 L1399.74 684.359 L1400.3 684.359 L1400.86 684.359 L1401.41 684.359 L1401.97 684.359 L1402.53 684.359 L1403.09 684.359 L1403.65 684.359 L1404.21 684.359 L1404.77 684.359 L1405.33 684.359 L1405.89 684.359 L1406.45 684.359 L1407.01 684.359 L1407.57 684.359 L1408.13 684.359 L1408.68 684.359 L1409.24 684.359 L1409.8 684.359 L1410.36 684.359 L1410.92 684.359 L1411.48 684.359 L1412.04 684.359 L1412.6 684.359 L1413.16 684.359 L1413.72 684.359 L1414.28 684.359 L1414.84 684.359 L1415.4 684.359 L1415.95 684.359 L1416.51 684.359 L1417.07 684.359 L1417.63 684.359 L1418.19 684.359 L1418.75 684.359 L1419.31 684.359 L1419.87 684.359 L1420.43 684.359 L1420.99 684.359 L1421.55 684.359 L1422.11 684.359 L1422.67 684.359 L1423.23 684.359 L1423.78 684.359 L1424.34 684.359 L1424.9 684.359 L1425.46 684.359 L1426.02 684.359 L1426.58 684.359 L1427.14 684.359 L1427.7 684.359 L1428.26 684.359 L1428.82 684.359 L1429.38 684.359 L1429.94 684.359 L1430.5 684.359 L1431.05 684.359 L1431.61 684.359 L1432.17 684.359 L1432.73 684.359 L1433.29 684.359 L1433.85 684.359 L1434.41 684.359 L1434.97 684.359 L1435.53 684.359 L1436.09 684.359 L1436.65 684.359 L1437.21 684.359 L1437.77 684.359 L1438.33 684.359 L1438.88 684.359 L1439.44 684.359 L1440 684.359 L1440.56 684.359 L1441.12 684.359 L1441.68 684.359 L1442.24 684.359 L1442.8 684.359 L1443.36 684.359 L1443.92 684.359 L1444.48 684.359 L1445.04 684.359 L1445.6 684.359 L1446.15 684.359 L1446.71 684.359 L1447.27 684.359 L1447.83 684.359 L1448.39 684.359 L1448.95 684.359 L1449.51 684.359 L1450.07 684.359 L1450.63 684.359 L1451.19 684.359 L1451.75 684.359 L1452.31 684.359 L1452.87 684.359 L1453.42 684.359 L1453.98 684.359 L1454.54 684.359 L1455.1 684.359 L1455.66 684.359 L1456.22 684.359 L1456.78 684.359 L1457.34 684.359 L1457.9 684.359 L1458.46 684.359 L1459.02 684.359 L1459.58 684.359 L1460.14 684.359 L1460.7 684.359 L1461.25 684.359 L1461.81 684.359 L1462.37 684.359 L1462.93 684.359 L1463.49 684.359 L1464.05 684.359 L1464.61 684.359 L1465.17 684.359 L1465.73 684.359 L1466.29 684.359 L1466.85 684.359 L1467.41 684.359 L1467.97 684.359 L1468.52 684.359 L1469.08 684.359 L1469.64 684.359 L1470.2 684.359 L1470.76 684.359 L1471.32 684.359 L1471.88 684.359 L1472.44 684.359 L1473 684.359 L1473.56 684.359 L1474.12 684.359 L1474.68 684.359 L1475.24 684.359 L1475.79 684.359 L1476.35 684.359 L1476.91 684.359 L1477.47 684.359 L1478.03 684.359 L1478.59 684.359 L1479.15 684.359 L1479.71 684.359 L1480.27 684.359 L1480.83 684.359 L1481.39 684.359 L1481.95 684.359 L1482.51 684.359 L1483.07 684.359 L1483.62 684.359 L1484.18 684.359 L1484.74 684.359 L1485.3 684.359 L1485.86 684.359 L1486.42 684.359 L1486.98 684.359 L1487.54 684.359 L1488.1 684.359 L1488.66 684.359 L1489.22 684.359 L1489.78 684.359 L1490.34 684.359 L1490.89 684.359 L1491.45 684.359 L1492.01 684.359 L1492.57 684.359 L1493.13 684.359 L1493.69 684.359 L1494.25 684.359 L1494.81 684.359 L1495.37 684.359 L1495.93 684.359 L1496.49 684.359 L1497.05 684.359 L1497.61 684.359 L1498.16 684.359 L1498.72 684.359 L1499.28 684.359 L1499.84 684.359 L1500.4 684.359 L1500.96 684.359 L1501.52 684.359 L1502.08 684.359 L1502.64 684.359 L1503.2 684.359 L1503.76 684.359 L1504.32 684.359 L1504.88 684.359 L1505.44 684.359 L1505.99 684.359 L1506.55 684.359 L1507.11 684.359 L1507.67 684.359 L1508.23 684.359 L1508.79 684.359 L1509.35 684.359 L1509.91 684.359 L1510.47 684.359 L1511.03 684.359 L1511.59 684.359 L1512.15 684.359 L1512.71 684.359 L1513.26 684.359 L1513.82 684.359 L1514.38 684.359 L1514.94 684.359 L1515.5 684.359 L1516.06 684.359 L1516.62 684.359 L1517.18 684.359 L1517.74 684.359 L1518.3 684.359 L1518.86 684.359 L1519.42 684.359 L1519.98 684.359 L1520.53 684.359 L1521.09 684.359 L1521.65 684.359 L1522.21 684.359 L1522.77 684.359 L1523.33 684.359 L1523.89 684.359 L1524.45 684.359 L1525.01 684.359 L1525.57 684.359 L1526.13 684.359 L1526.69 684.359 L1527.25 684.359 L1527.81 684.359 L1528.36 684.359 L1528.92 684.359 L1529.48 684.359 L1530.04 684.359 L1530.6 684.359 L1531.16 684.359 L1531.72 684.359 L1532.28 684.359 L1532.84 684.359 L1533.4 684.359 L1533.96 684.359 L1534.52 684.359 L1535.08 684.359 L1535.63 684.359 L1536.19 684.359 L1536.75 684.359 L1537.31 684.359 L1537.87 684.359 L1538.43 684.359 L1538.99 684.359 L1539.55 684.359 L1540.11 684.359 L1540.67 684.359 L1541.23 684.359 L1541.79 684.359 L1542.35 684.359 L1542.9 684.359 L1543.46 684.359 L1544.02 684.359 L1544.58 684.359 L1545.14 684.359 L1545.7 684.359 L1546.26 684.359 L1546.82 684.359 L1547.38 684.359 L1547.94 684.359 L1548.5 684.359 L1549.06 684.359 L1549.62 684.359 L1550.18 684.359 L1550.73 684.359 L1551.29 684.359 L1551.85 684.359 L1552.41 684.359 L1552.97 684.359 L1553.53 684.359 L1554.09 684.359 L1554.65 684.359 L1555.21 684.359 L1555.77 684.359 L1556.33 684.359 L1556.89 684.359 L1557.45 684.359 L1558 684.359 L1558.56 684.359 L1559.12 684.359 L1559.68 684.359 L1560.24 684.359 L1560.8 684.359 L1561.36 684.359 L1561.92 684.359 L1562.48 684.359 L1563.04 684.359 L1563.6 684.359 L1564.16 684.359 L1564.72 684.359 L1565.28 684.359 L1565.83 684.359 L1566.39 684.359 L1566.95 684.359 L1567.51 684.359 L1568.07 684.359 L1568.63 684.359 L1569.19 684.359 L1569.75 684.359 L1570.31 684.359 L1570.87 684.359 L1571.43 684.359 L1571.99 684.359 L1572.55 684.359 L1573.1 684.359 L1573.66 684.359 L1574.22 684.359 L1574.78 684.359 L1575.34 684.359 L1575.9 684.359 L1576.46 684.359 L1577.02 684.359 L1577.58 684.359 L1578.14 684.359 L1578.7 684.359 L1579.26 684.359 L1579.82 684.359 L1580.37 684.359 L1580.93 684.359 L1581.49 684.359 L1582.05 684.359 L1582.61 684.359 L1583.17 684.359 L1583.73 684.359 L1584.29 684.359 L1584.85 684.359 L1585.41 684.359 L1585.97 684.359 L1586.53 684.359 L1587.09 684.359 L1587.65 684.359 L1588.2 684.359 L1588.76 684.359 L1589.32 684.359 L1589.88 684.359 L1590.44 684.359 L1591 684.359 L1591.56 684.359 L1592.12 684.359 L1592.68 684.359 L1593.24 684.359 L1593.8 684.359 L1594.36 684.359 L1594.92 684.359 L1595.47 684.359 L1596.03 684.359 L1596.59 684.359 L1597.15 684.359 L1597.71 684.359 L1598.27 684.359 L1598.83 684.359 L1599.39 684.359 L1599.95 684.359 L1600.51 684.359 L1601.07 684.359 L1601.63 684.359 L1602.19 684.359 L1602.74 684.359 L1603.3 684.359 L1603.86 684.359 L1604.42 684.359 L1604.98 684.359 L1605.54 684.359 L1606.1 684.359 L1606.66 684.359 L1607.22 684.359 L1607.78 684.359 L1608.34 684.359 L1608.9 684.359 L1609.46 684.359 L1610.02 684.359 L1610.57 684.359 L1611.13 684.359 L1611.69 684.359 L1612.25 684.359 L1612.81 684.359 L1613.37 684.359 L1613.93 684.359 L1614.49 684.359 L1615.05 684.359 L1615.61 684.359 L1616.17 684.359 L1616.73 684.359 L1617.29 684.359 L1617.84 684.359 L1618.4 684.359 L1618.96 684.359 L1619.52 684.359 L1620.08 684.359 L1620.64 684.359 L1621.2 684.359 L1621.76 684.359 L1622.32 684.359 L1622.88 684.359 L1623.44 684.359 L1624 684.359 L1624.56 684.359 L1625.11 684.359 L1625.67 684.359 L1626.23 684.359 L1626.79 684.359 L1627.35 684.359 L1627.91 684.359 L1628.47 684.359 L1629.03 684.359 L1629.59 684.359 L1630.15 684.359 L1630.71 684.359 L1631.27 684.359 L1631.83 684.359 L1632.39 684.359 L1632.94 684.359 L1633.5 684.359 L1634.06 684.359 L1634.62 684.359 L1635.18 684.359 L1635.74 684.359 L1636.3 684.359 L1636.86 684.359 L1637.42 684.359 L1637.98 684.359 L1638.54 684.359 L1639.1 684.359 L1639.66 684.359 L1640.21 684.359 L1640.77 684.359 L1641.33 684.359 L1641.89 684.359 L1642.45 684.359 L1643.01 684.359 L1643.57 684.359 L1644.13 684.359 L1644.69 684.359 L1645.25 684.359 L1645.81 684.359 L1646.37 684.359 L1646.93 684.359 L1647.48 684.359 L1648.04 684.359 L1648.6 684.359 L1649.16 684.359 L1649.72 684.359 L1650.28 684.359 L1650.84 684.359 L1651.4 684.359 L1651.96 684.359 L1652.52 684.359 L1653.08 684.359 L1653.64 684.359 L1654.2 684.359 L1654.76 684.359 L1655.31 684.359 L1655.87 684.359 L1656.43 684.359 L1656.99 684.359 L1657.55 684.359 L1658.11 684.359 L1658.67 684.359 L1659.23 684.359 L1659.79 684.359 L1660.35 684.359 L1660.91 684.359 L1661.47 684.359 L1662.03 684.359 L1662.58 684.359 L1663.14 684.359 L1663.7 684.359 L1664.26 684.359 L1664.82 684.359 L1665.38 684.359 L1665.94 684.359 L1666.5 684.359 L1667.06 684.359 L1667.62 684.359 L1668.18 684.359 L1668.74 684.359 L1669.3 684.359 L1669.85 684.359 L1670.41 684.359 L1670.97 684.359 L1671.53 684.359 L1672.09 684.359 L1672.65 684.359 L1673.21 684.359 L1673.77 684.359 L1674.33 684.359 L1674.89 684.359 L1675.45 684.359 L1676.01 684.359 L1676.57 684.359 L1677.13 684.359 L1677.68 684.359 L1678.24 684.359 L1678.8 684.359 L1679.36 684.359 L1679.92 684.359 L1680.48 684.359 L1681.04 684.359 L1681.6 684.359 L1682.16 684.359 L1682.72 684.359 L1683.28 684.359 L1683.84 684.359 L1684.4 684.359 L1684.95 684.359 L1685.51 684.359 L1686.07 684.359 L1686.63 684.359 L1687.19 684.359 L1687.75 684.359 L1688.31 684.359 L1688.87 684.359 L1689.43 684.359 L1689.99 684.359 L1690.55 684.359 L1691.11 684.359 L1691.67 684.359 L1692.23 684.359 L1692.78 684.359 L1693.34 684.359 L1693.9 684.359 L1694.46 684.359 L1695.02 684.359 L1695.58 684.359 L1696.14 684.359 L1696.7 684.359 L1697.26 684.359 L1697.82 684.359 L1698.38 684.359 L1698.94 684.359 L1699.5 684.359 L1700.05 684.359 L1700.61 684.359 L1701.17 684.359 L1701.73 684.359 L1702.29 684.359 L1702.85 684.359 L1703.41 684.359 L1703.97 684.359 L1704.53 684.359 L1705.09 684.359 L1705.65 684.359 L1706.21 684.359 L1706.77 684.359 L1707.32 684.359 L1707.88 684.359 L1708.44 684.359 L1709 684.359 L1709.56 684.359 L1710.12 684.359 L1710.68 684.359 L1711.24 684.359 L1711.8 684.359 L1712.36 684.359 L1712.92 684.359 L1713.48 684.359 L1714.04 684.359 L1714.6 684.359 L1715.15 684.359 L1715.71 684.359 L1716.27 684.359 L1716.83 684.359 L1717.39 684.359 L1717.95 684.359 L1718.51 684.359 L1719.07 684.359 L1719.63 684.359 L1720.19 684.359 L1720.75 684.359 L1721.31 684.359 L1721.87 684.359 L1722.42 684.359 L1722.98 684.359 L1723.54 684.359 L1724.1 684.359 L1724.66 684.359 L1725.22 684.359 L1725.78 684.359 L1726.34 684.359 L1726.9 684.359 L1727.46 684.359 L1728.02 684.359 L1728.58 684.359 L1729.14 684.359 L1729.69 684.359 L1730.25 684.359 L1730.81 684.359 L1731.37 684.359 L1731.93 684.359 L1732.49 684.359 L1733.05 684.359 L1733.61 684.359 L1734.17 684.359 L1734.73 684.359 L1735.29 684.359 L1735.85 684.359 L1736.41 684.359 L1736.97 684.359 L1737.52 684.359 L1738.08 684.359 L1738.64 684.359 L1739.2 684.359 L1739.76 684.359 L1740.32 684.359 L1740.88 684.359 L1741.44 684.359 L1742 684.359 L1742.56 684.359 L1743.12 684.359 L1743.68 684.359 L1744.24 684.359 L1744.79 684.359 L1745.35 684.359 L1745.91 684.359 L1746.47 684.359 L1747.03 684.359 L1747.59 684.359 L1748.15 684.359 L1748.71 684.359 L1749.27 684.359 L1749.83 684.359 L1750.39 684.359 L1750.95 684.359 L1751.51 684.359 L1752.06 684.359 L1752.62 684.359 L1753.18 684.359 L1753.74 684.359 L1754.3 684.359 L1754.86 684.359 L1755.42 684.359 L1755.98 684.359 L1756.54 684.359 L1757.1 684.359 L1757.66 684.359 L1758.22 684.359 L1758.78 684.359 L1759.34 684.359 L1759.89 684.359 L1760.45 684.359 L1761.01 684.359 L1761.57 684.359 L1762.13 684.359 L1762.69 684.359 L1763.25 684.359 L1763.81 684.359 L1764.37 684.359 L1764.93 684.359 L1765.49 684.359 L1766.05 684.359 L1766.61 684.359 L1767.16 684.359 L1767.72 684.359 L1768.28 684.359 L1768.84 684.359 L1769.4 684.359 L1769.96 684.359 L1770.52 684.359 L1771.08 684.359 L1771.64 684.359 L1772.2 684.359 L1772.76 684.359 L1773.32 684.359 L1773.88 684.359 L1774.43 684.359 L1774.99 684.359 L1775.55 684.359 L1776.11 684.359 L1776.67 684.359 L1777.23 684.359 L1777.79 684.359 L1778.35 684.359 L1778.91 684.359 L1779.47 684.359 L1780.03 684.359 L1780.59 684.359 L1781.15 684.359 L1781.71 684.359 L1782.26 684.359 L1782.82 684.359 L1783.38 684.359 L1783.94 684.359 L1784.5 684.359 L1785.06 684.359 L1785.62 684.359 L1786.18 684.359 L1786.74 684.359 L1787.3 684.359 L1787.86 684.359 L1788.42 684.359 L1788.98 684.359 L1789.53 684.359 L1790.09 684.359 L1790.65 684.359 L1791.21 684.359 L1791.77 684.359 L1792.33 684.359 L1792.89 684.359 L1793.45 684.359 L1794.01 684.359 L1794.57 684.359 L1795.13 684.359 L1795.69 684.359 L1796.25 684.359 L1796.8 684.359 L1797.36 684.359 L1797.92 684.359 L1798.48 684.359 L1799.04 684.359 L1799.6 684.359 L1800.16 684.359 L1800.72 684.359 L1801.28 684.359 L1801.84 684.359 L1802.4 684.359 L1802.96 684.359 L1803.52 684.359 L1804.08 684.359 L1804.63 684.359 L1805.19 684.359 L1805.75 684.359 L1806.31 684.359 L1806.87 684.359 L1807.43 684.359 L1807.99 684.359 L1808.55 684.359 L1809.11 684.359 L1809.67 684.359 L1810.23 684.359 L1810.79 684.359 L1811.35 684.359 L1811.9 684.359 L1812.46 684.359 L1813.02 684.359 L1813.58 684.359 L1814.14 684.359 L1814.7 684.359 L1815.26 684.359 L1815.82 684.359 L1816.38 684.359 L1816.94 684.359 L1817.5 684.359 L1818.06 684.359 L1818.62 684.359 L1819.18 684.359 L1819.73 684.359 L1820.29 684.359 L1820.85 684.359 L1821.41 684.359 L1821.97 684.359 L1822.53 684.359 L1823.09 684.359 L1823.65 684.359 L1824.21 684.359 L1824.77 684.359 L1825.33 684.359 L1825.89 684.359 L1826.45 684.359 L1827 684.359 L1827.56 684.359 L1828.12 684.359 L1828.68 684.359 L1829.24 684.359 L1829.8 684.359 L1830.36 684.359 L1830.92 684.359 L1831.48 684.359 L1832.04 684.359 L1832.6 684.359 L1833.16 684.359 L1833.72 684.359 L1834.27 684.359 L1834.83 684.359 L1835.39 684.359 L1835.95 684.359 L1836.51 684.359 L1837.07 684.359 L1837.63 684.359 L1838.19 684.359 L1838.19 682.763 L1837.63 682.763 L1837.07 682.763 L1836.51 682.763 L1835.95 682.763 L1835.39 682.763 L1834.83 682.763 L1834.27 682.763 L1833.72 682.763 L1833.16 682.763 L1832.6 682.763 L1832.04 682.763 L1831.48 682.763 L1830.92 682.763 L1830.36 682.763 L1829.8 682.763 L1829.24 682.763 L1828.68 682.763 L1828.12 682.763 L1827.56 682.763 L1827 682.763 L1826.45 682.763 L1825.89 682.763 L1825.33 682.763 L1824.77 682.763 L1824.21 682.763 L1823.65 682.763 L1823.09 682.763 L1822.53 682.763 L1821.97 682.763 L1821.41 682.763 L1820.85 682.763 L1820.29 682.763 L1819.73 682.763 L1819.18 682.763 L1818.62 682.763 L1818.06 682.763 L1817.5 682.763 L1816.94 682.763 L1816.38 682.763 L1815.82 682.763 L1815.26 682.763 L1814.7 682.763 L1814.14 682.763 L1813.58 682.763 L1813.02 682.763 L1812.46 682.763 L1811.9 682.763 L1811.35 682.763 L1810.79 682.763 L1810.23 682.763 L1809.67 682.763 L1809.11 682.763 L1808.55 682.763 L1807.99 682.763 L1807.43 682.763 L1806.87 682.763 L1806.31 682.763 L1805.75 682.763 L1805.19 682.763 L1804.63 682.763 L1804.08 682.763 L1803.52 682.763 L1802.96 682.763 L1802.4 682.763 L1801.84 682.763 L1801.28 682.763 L1800.72 682.763 L1800.16 682.763 L1799.6 682.763 L1799.04 682.763 L1798.48 682.763 L1797.92 682.763 L1797.36 682.763 L1796.8 682.763 L1796.25 682.763 L1795.69 682.763 L1795.13 682.763 L1794.57 682.763 L1794.01 682.763 L1793.45 682.763 L1792.89 682.763 L1792.33 682.763 L1791.77 682.763 L1791.21 682.763 L1790.65 682.763 L1790.09 682.763 L1789.53 682.763 L1788.98 682.763 L1788.42 682.763 L1787.86 682.763 L1787.3 682.763 L1786.74 682.763 L1786.18 682.763 L1785.62 682.763 L1785.06 682.763 L1784.5 682.763 L1783.94 682.763 L1783.38 682.763 L1782.82 682.763 L1782.26 682.763 L1781.71 682.763 L1781.15 682.763 L1780.59 682.763 L1780.03 682.763 L1779.47 682.763 L1778.91 682.763 L1778.35 682.763 L1777.79 682.763 L1777.23 682.763 L1776.67 682.763 L1776.11 682.763 L1775.55 682.763 L1774.99 682.763 L1774.43 682.763 L1773.88 682.763 L1773.32 682.763 L1772.76 682.763 L1772.2 682.763 L1771.64 682.763 L1771.08 682.763 L1770.52 682.763 L1769.96 682.763 L1769.4 682.763 L1768.84 682.763 L1768.28 682.763 L1767.72 682.763 L1767.16 682.763 L1766.61 682.763 L1766.05 682.763 L1765.49 682.763 L1764.93 682.763 L1764.37 682.763 L1763.81 682.763 L1763.25 682.763 L1762.69 682.763 L1762.13 682.763 L1761.57 682.763 L1761.01 682.763 L1760.45 682.763 L1759.89 682.763 L1759.34 682.763 L1758.78 682.763 L1758.22 682.763 L1757.66 682.763 L1757.1 682.763 L1756.54 682.763 L1755.98 682.763 L1755.42 682.763 L1754.86 682.763 L1754.3 682.763 L1753.74 682.763 L1753.18 682.763 L1752.62 682.763 L1752.06 682.763 L1751.51 682.763 L1750.95 682.763 L1750.39 682.763 L1749.83 682.763 L1749.27 682.763 L1748.71 682.763 L1748.15 682.763 L1747.59 682.763 L1747.03 682.763 L1746.47 682.763 L1745.91 682.763 L1745.35 682.763 L1744.79 682.763 L1744.24 682.763 L1743.68 682.763 L1743.12 682.763 L1742.56 682.763 L1742 682.763 L1741.44 682.763 L1740.88 682.763 L1740.32 682.763 L1739.76 682.763 L1739.2 682.763 L1738.64 682.763 L1738.08 682.763 L1737.52 682.763 L1736.97 682.763 L1736.41 682.763 L1735.85 682.763 L1735.29 682.763 L1734.73 682.763 L1734.17 682.763 L1733.61 682.763 L1733.05 682.763 L1732.49 682.763 L1731.93 682.763 L1731.37 682.763 L1730.81 682.763 L1730.25 682.763 L1729.69 682.763 L1729.14 682.763 L1728.58 682.763 L1728.02 682.763 L1727.46 682.763 L1726.9 682.763 L1726.34 682.763 L1725.78 682.763 L1725.22 682.763 L1724.66 682.763 L1724.1 682.763 L1723.54 682.763 L1722.98 682.763 L1722.42 682.763 L1721.87 682.763 L1721.31 682.763 L1720.75 682.763 L1720.19 682.763 L1719.63 682.763 L1719.07 682.763 L1718.51 682.763 L1717.95 682.763 L1717.39 682.763 L1716.83 682.763 L1716.27 682.763 L1715.71 682.763 L1715.15 682.763 L1714.6 682.763 L1714.04 682.763 L1713.48 682.763 L1712.92 682.763 L1712.36 682.763 L1711.8 682.763 L1711.24 682.763 L1710.68 682.763 L1710.12 682.763 L1709.56 682.763 L1709 682.763 L1708.44 682.763 L1707.88 682.763 L1707.32 682.763 L1706.77 682.763 L1706.21 682.763 L1705.65 682.763 L1705.09 682.763 L1704.53 682.763 L1703.97 682.763 L1703.41 682.763 L1702.85 682.763 L1702.29 682.763 L1701.73 682.763 L1701.17 682.763 L1700.61 682.763 L1700.05 682.763 L1699.5 682.763 L1698.94 682.763 L1698.38 682.763 L1697.82 682.763 L1697.26 682.763 L1696.7 682.763 L1696.14 682.763 L1695.58 682.763 L1695.02 682.763 L1694.46 682.763 L1693.9 682.763 L1693.34 682.763 L1692.78 682.763 L1692.23 682.763 L1691.67 682.763 L1691.11 682.763 L1690.55 682.763 L1689.99 682.763 L1689.43 682.763 L1688.87 682.763 L1688.31 682.763 L1687.75 682.763 L1687.19 682.763 L1686.63 682.763 L1686.07 682.763 L1685.51 682.763 L1684.95 682.763 L1684.4 682.763 L1683.84 682.763 L1683.28 682.763 L1682.72 682.763 L1682.16 682.763 L1681.6 682.763 L1681.04 682.763 L1680.48 682.763 L1679.92 682.763 L1679.36 682.763 L1678.8 682.763 L1678.24 682.763 L1677.68 682.763 L1677.13 682.763 L1676.57 682.763 L1676.01 682.763 L1675.45 682.763 L1674.89 682.763 L1674.33 682.763 L1673.77 682.763 L1673.21 682.763 L1672.65 682.763 L1672.09 682.763 L1671.53 682.763 L1670.97 682.763 L1670.41 682.763 L1669.85 682.763 L1669.3 682.763 L1668.74 682.763 L1668.18 682.763 L1667.62 682.763 L1667.06 682.763 L1666.5 682.763 L1665.94 682.763 L1665.38 682.763 L1664.82 682.763 L1664.26 682.763 L1663.7 682.763 L1663.14 682.763 L1662.58 682.763 L1662.03 682.763 L1661.47 682.763 L1660.91 682.763 L1660.35 682.763 L1659.79 682.763 L1659.23 682.763 L1658.67 682.763 L1658.11 682.763 L1657.55 682.763 L1656.99 682.763 L1656.43 682.763 L1655.87 682.763 L1655.31 682.763 L1654.76 682.763 L1654.2 682.763 L1653.64 682.763 L1653.08 682.763 L1652.52 682.763 L1651.96 682.763 L1651.4 682.763 L1650.84 682.763 L1650.28 682.763 L1649.72 682.763 L1649.16 682.763 L1648.6 682.763 L1648.04 682.763 L1647.48 682.763 L1646.93 682.763 L1646.37 682.763 L1645.81 682.763 L1645.25 682.763 L1644.69 682.763 L1644.13 682.763 L1643.57 682.763 L1643.01 682.763 L1642.45 682.763 L1641.89 682.763 L1641.33 682.763 L1640.77 682.763 L1640.21 682.763 L1639.66 682.763 L1639.1 682.763 L1638.54 682.763 L1637.98 682.763 L1637.42 682.763 L1636.86 682.763 L1636.3 682.763 L1635.74 682.763 L1635.18 682.763 L1634.62 682.763 L1634.06 682.763 L1633.5 682.763 L1632.94 682.763 L1632.39 682.763 L1631.83 682.763 L1631.27 682.763 L1630.71 682.763 L1630.15 682.763 L1629.59 682.763 L1629.03 682.763 L1628.47 682.763 L1627.91 682.763 L1627.35 682.763 L1626.79 682.763 L1626.23 682.763 L1625.67 682.763 L1625.11 682.763 L1624.56 682.763 L1624 682.763 L1623.44 682.763 L1622.88 682.763 L1622.32 682.763 L1621.76 682.763 L1621.2 682.763 L1620.64 682.763 L1620.08 682.763 L1619.52 682.763 L1618.96 682.763 L1618.4 682.763 L1617.84 682.763 L1617.29 682.763 L1616.73 682.763 L1616.17 682.763 L1615.61 682.763 L1615.05 682.763 L1614.49 682.763 L1613.93 682.763 L1613.37 682.763 L1612.81 682.763 L1612.25 682.763 L1611.69 682.763 L1611.13 682.763 L1610.57 682.763 L1610.02 682.763 L1609.46 682.763 L1608.9 682.763 L1608.34 682.763 L1607.78 682.763 L1607.22 682.763 L1606.66 682.763 L1606.1 682.763 L1605.54 682.763 L1604.98 682.763 L1604.42 682.763 L1603.86 682.763 L1603.3 682.763 L1602.74 682.763 L1602.19 682.763 L1601.63 682.763 L1601.07 682.763 L1600.51 682.763 L1599.95 682.763 L1599.39 682.763 L1598.83 682.763 L1598.27 682.763 L1597.71 682.763 L1597.15 682.763 L1596.59 682.763 L1596.03 682.763 L1595.47 682.763 L1594.92 682.763 L1594.36 682.763 L1593.8 682.763 L1593.24 682.763 L1592.68 682.763 L1592.12 682.763 L1591.56 682.763 L1591 682.763 L1590.44 682.763 L1589.88 682.763 L1589.32 682.763 L1588.76 682.763 L1588.2 682.763 L1587.65 682.763 L1587.09 682.763 L1586.53 682.763 L1585.97 682.763 L1585.41 682.763 L1584.85 682.763 L1584.29 682.763 L1583.73 682.763 L1583.17 682.763 L1582.61 682.763 L1582.05 682.763 L1581.49 682.763 L1580.93 682.763 L1580.37 682.763 L1579.82 682.763 L1579.26 682.763 L1578.7 682.763 L1578.14 682.763 L1577.58 682.763 L1577.02 682.763 L1576.46 682.763 L1575.9 682.763 L1575.34 682.763 L1574.78 682.763 L1574.22 682.763 L1573.66 682.763 L1573.1 682.763 L1572.55 682.763 L1571.99 682.763 L1571.43 682.763 L1570.87 682.763 L1570.31 682.763 L1569.75 682.763 L1569.19 682.763 L1568.63 682.763 L1568.07 682.763 L1567.51 682.763 L1566.95 682.763 L1566.39 682.763 L1565.83 682.763 L1565.28 682.763 L1564.72 682.763 L1564.16 682.763 L1563.6 682.763 L1563.04 682.763 L1562.48 682.763 L1561.92 682.763 L1561.36 682.763 L1560.8 682.763 L1560.24 682.763 L1559.68 682.763 L1559.12 682.763 L1558.56 682.763 L1558 682.763 L1557.45 682.763 L1556.89 682.763 L1556.33 682.763 L1555.77 682.763 L1555.21 682.763 L1554.65 682.763 L1554.09 682.763 L1553.53 682.763 L1552.97 682.763 L1552.41 682.763 L1551.85 682.763 L1551.29 682.763 L1550.73 682.763 L1550.18 682.763 L1549.62 682.763 L1549.06 682.763 L1548.5 682.763 L1547.94 682.763 L1547.38 682.763 L1546.82 682.763 L1546.26 682.763 L1545.7 682.763 L1545.14 682.763 L1544.58 682.763 L1544.02 682.763 L1543.46 682.763 L1542.9 682.763 L1542.35 682.763 L1541.79 682.763 L1541.23 682.763 L1540.67 682.763 L1540.11 682.763 L1539.55 682.763 L1538.99 682.763 L1538.43 682.763 L1537.87 682.763 L1537.31 682.763 L1536.75 682.763 L1536.19 682.763 L1535.63 682.763 L1535.08 682.763 L1534.52 682.763 L1533.96 682.763 L1533.4 682.763 L1532.84 682.763 L1532.28 682.763 L1531.72 682.763 L1531.16 682.763 L1530.6 682.763 L1530.04 682.763 L1529.48 682.763 L1528.92 682.763 L1528.36 682.763 L1527.81 682.763 L1527.25 682.763 L1526.69 682.763 L1526.13 682.763 L1525.57 682.763 L1525.01 682.763 L1524.45 682.763 L1523.89 682.763 L1523.33 682.763 L1522.77 682.763 L1522.21 682.763 L1521.65 682.763 L1521.09 682.763 L1520.53 682.763 L1519.98 682.763 L1519.42 682.763 L1518.86 682.763 L1518.3 682.763 L1517.74 682.763 L1517.18 682.763 L1516.62 682.763 L1516.06 682.763 L1515.5 682.763 L1514.94 682.763 L1514.38 682.763 L1513.82 682.763 L1513.26 682.763 L1512.71 682.763 L1512.15 682.763 L1511.59 682.763 L1511.03 682.763 L1510.47 682.763 L1509.91 682.763 L1509.35 682.763 L1508.79 682.763 L1508.23 682.763 L1507.67 682.763 L1507.11 682.763 L1506.55 682.763 L1505.99 682.763 L1505.44 682.763 L1504.88 682.763 L1504.32 682.763 L1503.76 682.763 L1503.2 682.763 L1502.64 682.763 L1502.08 682.763 L1501.52 682.763 L1500.96 682.763 L1500.4 682.763 L1499.84 682.763 L1499.28 682.763 L1498.72 682.763 L1498.16 682.763 L1497.61 682.763 L1497.05 682.763 L1496.49 682.763 L1495.93 682.763 L1495.37 682.763 L1494.81 682.763 L1494.25 682.763 L1493.69 682.763 L1493.13 682.763 L1492.57 682.763 L1492.01 682.763 L1491.45 682.763 L1490.89 682.763 L1490.34 682.763 L1489.78 682.763 L1489.22 682.763 L1488.66 682.763 L1488.1 682.763 L1487.54 682.763 L1486.98 682.763 L1486.42 682.763 L1485.86 682.763 L1485.3 682.763 L1484.74 682.763 L1484.18 682.763 L1483.62 682.763 L1483.07 682.763 L1482.51 682.763 L1481.95 682.763 L1481.39 682.763 L1480.83 682.763 L1480.27 682.763 L1479.71 682.763 L1479.15 682.763 L1478.59 682.763 L1478.03 682.763 L1477.47 682.763 L1476.91 682.763 L1476.35 682.763 L1475.79 682.763 L1475.24 682.763 L1474.68 682.763 L1474.12 682.763 L1473.56 682.763 L1473 682.763 L1472.44 682.763 L1471.88 682.763 L1471.32 682.763 L1470.76 682.763 L1470.2 682.763 L1469.64 682.763 L1469.08 682.763 L1468.52 682.763 L1467.97 682.763 L1467.41 682.763 L1466.85 682.763 L1466.29 682.763 L1465.73 682.763 L1465.17 682.763 L1464.61 682.763 L1464.05 682.763 L1463.49 682.763 L1462.93 682.763 L1462.37 682.763 L1461.81 682.763 L1461.25 682.763 L1460.7 682.763 L1460.14 682.763 L1459.58 682.763 L1459.02 682.763 L1458.46 682.763 L1457.9 682.763 L1457.34 682.763 L1456.78 682.763 L1456.22 682.763 L1455.66 682.763 L1455.1 682.763 L1454.54 682.763 L1453.98 682.763 L1453.42 682.763 L1452.87 682.763 L1452.31 682.763 L1451.75 682.763 L1451.19 682.763 L1450.63 682.763 L1450.07 682.763 L1449.51 682.763 L1448.95 682.763 L1448.39 682.763 L1447.83 682.763 L1447.27 682.763 L1446.71 682.763 L1446.15 682.763 L1445.6 682.763 L1445.04 682.763 L1444.48 682.763 L1443.92 682.763 L1443.36 682.763 L1442.8 682.763 L1442.24 682.763 L1441.68 682.763 L1441.12 682.763 L1440.56 682.763 L1440 682.763 L1439.44 682.763 L1438.88 682.763 L1438.33 682.763 L1437.77 682.763 L1437.21 682.763 L1436.65 682.763 L1436.09 682.763 L1435.53 682.763 L1434.97 682.763 L1434.41 682.763 L1433.85 682.763 L1433.29 682.763 L1432.73 682.763 L1432.17 682.763 L1431.61 682.763 L1431.05 682.763 L1430.5 682.763 L1429.94 682.763 L1429.38 682.763 L1428.82 682.763 L1428.26 682.763 L1427.7 682.763 L1427.14 682.763 L1426.58 682.763 L1426.02 682.763 L1425.46 682.763 L1424.9 682.763 L1424.34 682.763 L1423.78 682.763 L1423.23 682.763 L1422.67 682.763 L1422.11 682.763 L1421.55 682.763 L1420.99 682.763 L1420.43 682.763 L1419.87 682.763 L1419.31 682.763 L1418.75 682.763 L1418.19 682.763 L1417.63 682.763 L1417.07 682.763 L1416.51 682.763 L1415.95 682.763 L1415.4 682.763 L1414.84 682.763 L1414.28 682.763 L1413.72 682.763 L1413.16 682.763 L1412.6 682.763 L1412.04 682.763 L1411.48 682.763 L1410.92 682.763 L1410.36 682.763 L1409.8 682.763 L1409.24 682.763 L1408.68 682.763 L1408.13 682.763 L1407.57 682.763 L1407.01 682.763 L1406.45 682.763 L1405.89 682.763 L1405.33 682.763 L1404.77 682.763 L1404.21 682.763 L1403.65 682.763 L1403.09 682.763 L1402.53 682.763 L1401.97 682.763 L1401.41 682.763 L1400.86 682.763 L1400.3 682.763 L1399.74 682.763 L1399.18 682.763 L1398.62 682.763 L1398.06 682.763 L1397.5 682.763 L1396.94 682.763 L1396.38 682.763 L1395.82 682.763 L1395.26 682.763 L1394.7 682.763 L1394.14 682.763 L1393.58 682.763 L1393.03 682.763 L1392.47 682.763 L1391.91 682.763 L1391.35 682.763 L1390.79 682.763 L1390.23 682.763 L1389.67 682.763 L1389.11 682.763 L1388.55 682.763 L1387.99 682.763 L1387.43 682.763 L1386.87 682.763 L1386.31 682.763 L1385.76 682.763 L1385.2 682.763 L1384.64 682.763 L1384.08 682.763 L1383.52 682.763 L1382.96 682.763 L1382.4 682.763 L1381.84 682.763 L1381.28 682.763 L1380.72 682.763 L1380.16 682.763 L1379.6 682.763 L1379.04 682.763 L1378.49 682.763 L1377.93 682.763 L1377.37 682.763 L1376.81 682.763 L1376.25 682.763 L1375.69 682.763 L1375.13 682.763 L1374.57 682.763 L1374.01 682.763 L1373.45 682.763 L1372.89 682.763 L1372.33 682.763 L1371.77 682.763 L1371.21 682.763 L1370.66 682.763 L1370.1 682.763 L1369.54 682.763 L1368.98 682.763 L1368.42 682.763 L1367.86 682.763 L1367.3 682.763 L1366.74 682.763 L1366.18 682.763 L1365.62 682.763 L1365.06 682.763 L1364.5 682.763 L1363.94 682.763 L1363.39 682.763 L1362.83 682.763 L1362.27 682.763 L1361.71 682.763 L1361.15 682.763 L1360.59 682.763 L1360.03 682.763 L1359.47 682.763 L1358.91 682.763 L1358.35 682.763 L1357.79 682.763 L1357.23 682.763 L1356.67 682.763 L1356.12 682.763 L1355.56 682.763 L1355 682.763 L1354.44 682.763 L1353.88 682.763 L1353.32 682.763 L1352.76 682.763 L1352.2 682.763 L1351.64 682.763 L1351.08 682.763 L1350.52 682.763 L1349.96 682.763 L1349.4 682.763 L1348.84 682.763 L1348.29 682.763 L1347.73 682.763 L1347.17 682.763 L1346.61 682.763 L1346.05 682.763 L1345.49 682.763 L1344.93 682.763 L1344.37 682.763 L1343.81 682.763 L1343.25 682.763 L1342.69 682.763 L1342.13 682.763 L1341.57 682.763 L1341.02 682.763 L1340.46 682.763 L1339.9 682.763 L1339.34 682.763 L1338.78 682.763 L1338.22 682.763 L1337.66 682.763 L1337.1 682.763 L1336.54 682.763 L1335.98 682.763 L1335.42 682.763 L1334.86 682.763 L1334.3 682.763 L1333.75 682.763 L1333.19 682.763 L1332.63 682.763 L1332.07 682.763 L1331.51 682.763 L1330.95 682.763 L1330.39 682.763 L1329.83 682.763 L1329.27 682.763 L1328.71 682.763 L1328.15 682.763 L1327.59 682.763 L1327.03 682.763 L1326.47 682.763 L1325.92 682.763 L1325.36 682.763 L1324.8 682.763 L1324.24 682.763 L1323.68 682.763 L1323.12 682.763 L1322.56 682.763 L1322 682.763 L1321.44 682.763 L1320.88 682.763 L1320.32 682.763 L1319.76 682.763 L1319.2 682.763 L1318.65 682.763 L1318.09 682.763 L1317.53 682.763 L1316.97 682.763 L1316.41 682.763 L1315.85 682.763 L1315.29 682.763 L1314.73 682.763 L1314.17 682.763 L1313.61 682.763 L1313.05 682.763 L1312.49 682.763 L1311.93 682.763 L1311.38 682.763 L1310.82 682.763 L1310.26 682.763 L1309.7 682.763 L1309.14 682.763 L1308.58 682.763 L1308.02 682.763 L1307.46 682.763 L1306.9 682.763 L1306.34 682.763 L1305.78 682.763 L1305.22 682.763 L1304.66 682.763 L1304.1 682.763 L1303.55 682.763 L1302.99 682.763 L1302.43 682.763 L1301.87 682.763 L1301.31 682.763 L1300.75 682.763 L1300.19 682.763 L1299.63 682.763 L1299.07 682.763 L1298.51 682.763 L1297.95 682.763 L1297.39 682.763 L1296.83 682.763 L1296.28 682.763 L1295.72 682.763 L1295.16 682.763 L1294.6 682.763 L1294.04 682.763 L1293.48 682.763 L1292.92 682.763 L1292.36 682.763 L1291.8 682.763 L1291.24 682.763 L1290.68 682.763 L1290.12 682.763 L1289.56 682.763 L1289 682.763 L1288.45 682.763 L1287.89 682.763 L1287.33 682.763 L1286.77 682.763 L1286.21 682.763 L1285.65 682.763 L1285.09 682.763 L1284.53 682.763 L1283.97 682.763 L1283.41 682.763 L1282.85 682.763 L1282.29 682.763 L1281.73 682.763 L1281.18 682.763 L1280.62 682.763 L1280.06 682.763 L1279.5 682.763 L1278.94 682.763 L1278.38 682.763 L1277.82 682.763 L1277.26 682.763 L1276.7 682.763 L1276.14 682.763 L1275.58 682.763 L1275.02 682.763 L1274.46 682.763 L1273.91 682.763 L1273.35 682.763 L1272.79 682.763 L1272.23 682.763 L1271.67 682.763 L1271.11 682.763 L1270.55 682.763 L1269.99 682.763 L1269.43 682.763 L1268.87 682.763 L1268.31 682.763 L1267.75 682.763 L1267.19 682.763 L1266.63 682.763 L1266.08 682.763 L1265.52 682.763 L1264.96 682.763 L1264.4 682.763 L1263.84 682.763 L1263.28 682.763 L1262.72 682.763 L1262.16 682.763 L1261.6 682.763 L1261.04 682.763 L1260.48 682.763 L1259.92 682.763 L1259.36 682.763 L1258.81 682.763 L1258.25 682.763 L1257.69 682.763 L1257.13 682.763 L1256.57 682.763 L1256.01 682.763 L1255.45 682.763 L1254.89 682.763 L1254.33 682.763 L1253.77 682.763 L1253.21 682.763 L1252.65 682.763 L1252.09 682.763 L1251.54 682.763 L1250.98 682.763 L1250.42 682.763 L1249.86 682.763 L1249.3 682.763 L1248.74 682.763 L1248.18 682.763 L1247.62 682.763 L1247.06 682.763 L1246.5 682.763 L1245.94 682.763 L1245.38 682.763 L1244.82 682.763 L1244.26 682.763 L1243.71 682.763 L1243.15 682.763 L1242.59 682.763 L1242.03 682.763 L1241.47 682.763 L1240.91 682.763 L1240.35 682.763 L1239.79 682.763 L1239.23 682.763 L1238.67 682.763 L1238.11 682.763 L1237.55 682.763 L1236.99 682.763 L1236.44 682.763 L1235.88 682.763 L1235.32 682.763 L1234.76 682.763 L1234.2 682.763 L1233.64 682.763 L1233.08 682.763 L1232.52 682.763 L1231.96 682.763 L1231.4 682.763 L1230.84 682.763 L1230.28 682.763 L1229.72 682.763 L1229.17 682.763 L1228.61 682.763 L1228.05 682.763 L1227.49 682.763 L1226.93 682.763 L1226.37 682.763 L1225.81 682.763 L1225.25 682.763 L1224.69 682.763 L1224.13 682.763 L1223.57 682.763 L1223.01 682.763 L1222.45 682.763 L1221.89 682.763 L1221.34 682.763 L1220.78 682.763 L1220.22 682.763 L1219.66 682.763 L1219.1 682.763 L1218.54 682.763 L1217.98 682.763 L1217.42 682.763 L1216.86 682.763 L1216.3 682.763 L1215.74 682.763 L1215.18 682.763 L1214.62 682.763 L1214.07 682.763 L1213.51 682.763 L1212.95 682.763 L1212.39 682.763 L1211.83 682.763 L1211.27 682.763 L1210.71 682.763 L1210.15 682.763 L1209.59 682.763 L1209.03 682.763 L1208.47 682.763 L1207.91 682.763 L1207.35 682.763 L1206.8 682.763 L1206.24 682.763 L1205.68 682.763 L1205.12 682.763 L1204.56 682.763 L1204 682.763 L1203.44 682.763 L1202.88 682.763 L1202.32 682.763 L1201.76 682.763 L1201.2 682.763 L1200.64 682.763 L1200.08 682.763 L1199.52 682.763 L1198.97 682.763 L1198.41 682.763 L1197.85 682.763 L1197.29 682.763 L1196.73 682.763 L1196.17 682.763 L1195.61 682.763 L1195.05 682.763 L1194.49 682.763 L1193.93 682.763 L1193.37 682.763 L1192.81 682.763 L1192.25 682.763 L1191.7 682.763 L1191.14 682.763 L1190.58 682.763 L1190.02 682.763 L1189.46 682.763 L1188.9 682.763 L1188.34 682.763 L1187.78 682.763 L1187.22 682.763 L1186.66 682.763 L1186.1 682.763 L1185.54 682.763 L1184.98 682.763 L1184.43 682.763 L1183.87 682.763 L1183.31 682.763 L1182.75 682.763 L1182.19 682.763 L1181.63 682.763 L1181.07 682.763 L1180.51 682.763 L1179.95 682.763 L1179.39 682.763 L1178.83 682.763 L1178.27 682.763 L1177.71 682.763 L1177.15 682.763 L1176.6 682.763 L1176.04 682.763 L1175.48 682.763 L1174.92 682.763 L1174.36 682.763 L1173.8 682.763 L1173.24 682.763 L1172.68 682.763 L1172.12 682.763 L1171.56 682.763 L1171 682.763 L1170.44 682.763 L1169.88 682.763 L1169.33 682.763 L1168.77 682.763 L1168.21 682.763 L1167.65 682.763 L1167.09 682.763 L1166.53 682.763 L1165.97 682.763 L1165.41 682.763 L1164.85 682.763 L1164.29 682.763 L1163.73 682.763 L1163.17 682.763 L1162.61 682.763 L1162.05 682.763 L1161.5 682.763 L1160.94 682.763 L1160.38 682.763 L1159.82 682.763 L1159.26 682.763 L1158.7 682.763 L1158.14 682.763 L1157.58 682.763 L1157.02 682.763 L1156.46 682.763 L1155.9 682.763 L1155.34 682.763 L1154.78 682.763 L1154.23 682.763 L1153.67 682.763 L1153.11 682.763 L1152.55 682.763 L1151.99 682.763 L1151.43 682.763 L1150.87 682.763 L1150.31 682.763 L1149.75 682.763 L1149.19 682.763 L1148.63 682.763 L1148.07 682.763 L1147.51 682.763 L1146.96 682.763 L1146.4 682.763 L1145.84 682.763 L1145.28 682.763 L1144.72 682.763 L1144.16 682.763 L1143.6 682.763 L1143.04 682.763 L1142.48 682.763 L1141.92 682.763 L1141.36 682.763 L1140.8 682.763 L1140.24 682.763 L1139.68 682.763 L1139.13 682.763 L1138.57 682.763 L1138.01 682.763 L1137.45 682.763 L1136.89 682.763 L1136.33 682.763 L1135.77 682.763 L1135.21 682.763 L1134.65 682.763 L1134.09 682.763 L1133.53 682.763 L1132.97 682.763 L1132.41 682.763 L1131.86 682.763 L1131.3 682.763 L1130.74 682.763 L1130.18 682.763 L1129.62 682.763 L1129.06 682.763 L1128.5 682.763 L1127.94 682.763 L1127.38 682.763 L1126.82 682.763 L1126.26 682.763 L1125.7 682.763 L1125.14 682.763 L1124.59 682.763 L1124.03 682.763 L1123.47 682.763 L1122.91 682.763 L1122.35 682.763 L1121.79 682.763 L1121.23 682.763 L1120.67 682.763 L1120.11 682.763 L1119.55 682.763 L1118.99 682.763 L1118.43 682.763 L1117.87 682.763 L1117.31 682.763 L1116.76 682.763 L1116.2 682.763 L1115.64 682.763 L1115.08 682.763 L1114.52 682.763 L1113.96 682.763 L1113.4 682.763 L1112.84 682.763 L1112.28 682.763 L1111.72 682.763 L1111.16 682.763 L1110.6 682.763 L1110.04 682.763 L1109.49 682.763 L1108.93 682.763 L1108.37 682.763 L1107.81 682.763 L1107.25 682.763 L1106.69 682.763 L1106.13 682.763 L1105.57 682.763 L1105.01 682.763 L1104.45 682.763 L1103.89 682.763 L1103.33 682.763 L1102.77 682.763 L1102.22 682.763 L1101.66 682.763 L1101.1 682.763 L1100.54 682.763 L1099.98 682.763 L1099.42 682.763 L1098.86 682.763 L1098.3 682.763 L1097.74 682.763 L1097.18 682.763 L1096.62 682.763 L1096.06 682.763 L1095.5 682.763 L1094.94 682.763 L1094.39 682.763 L1093.83 682.763 L1093.27 682.763 L1092.71 682.763 L1092.15 682.763 L1091.59 682.763 L1091.03 682.763 L1090.47 682.763 L1089.91 682.763 L1089.35 682.763 L1088.79 682.763 L1088.23 682.763 L1087.67 682.763 L1087.12 682.763 L1086.56 682.763 L1086 682.763 L1085.44 682.763 L1084.88 682.763 L1084.32 682.763 L1083.76 682.763 L1083.2 682.763 L1082.64 682.763 L1082.08 682.763 L1081.52 682.763 L1080.96 682.763 L1080.4 682.763 L1079.85 682.763 L1079.29 682.763 L1078.73 682.763 L1078.17 682.763 L1077.61 682.763 L1077.05 682.763 L1076.49 682.763 L1075.93 682.763 L1075.37 682.763 L1074.81 682.763 L1074.25 682.763 L1073.69 682.763 L1073.13 682.763 L1072.57 682.763 L1072.02 682.763 L1071.46 682.763 L1070.9 682.763 L1070.34 682.763 L1069.78 682.763 L1069.22 682.763 L1068.66 682.763 L1068.1 682.763 L1067.54 682.763 L1066.98 682.763 L1066.42 682.763 L1065.86 682.763 L1065.3 682.763 L1064.75 682.763 L1064.19 682.763 L1063.63 682.763 L1063.07 682.763 L1062.51 682.763 L1061.95 682.763 L1061.39 682.763 L1060.83 682.763 L1060.27 682.763 L1059.71 682.763 L1059.15 682.763 L1058.59 682.763 L1058.03 682.763 L1057.48 682.763 L1056.92 682.763 L1056.36 682.763 L1055.8 682.763 L1055.24 682.763 L1054.68 682.763 L1054.12 682.763 L1053.56 682.763 L1053 682.763 L1052.44 682.763 L1051.88 682.763 L1051.32 682.763 L1050.76 682.763 L1050.2 682.763 L1049.65 682.763 L1049.09 682.763 L1048.53 682.763 L1047.97 682.763 L1047.41 682.763 L1046.85 682.763 L1046.29 682.763 L1045.73 682.763 L1045.17 682.763 L1044.61 682.763 L1044.05 682.763 L1043.49 682.763 L1042.93 682.763 L1042.38 682.763 L1041.82 682.763 L1041.26 682.763 L1040.7 682.763 L1040.14 682.763 L1039.58 682.763 L1039.02 682.763 L1038.46 682.763 L1037.9 682.763 L1037.34 682.763 L1036.78 682.763 L1036.22 682.763 L1035.66 682.763 L1035.1 682.763 L1034.55 682.763 L1033.99 682.763 L1033.43 682.763 L1032.87 682.763 L1032.31 682.763 L1031.75 682.763 L1031.19 682.763 L1030.63 682.763 L1030.07 682.763 L1029.51 682.763 L1028.95 682.763 L1028.39 682.763 L1027.83 682.763 L1027.28 682.763 L1026.72 682.763 L1026.16 682.763 L1025.6 682.763 L1025.04 682.763 L1024.48 682.763 L1023.92 682.763 L1023.36 682.763 L1022.8 682.763 L1022.24 682.763 L1021.68 682.763 L1021.12 682.763 L1020.56 682.763 L1020.01 682.763 L1019.45 682.763 L1018.89 682.763 L1018.33 682.763 L1017.77 682.763 L1017.21 682.763 L1016.65 682.763 L1016.09 682.763 L1015.53 682.763 L1014.97 682.763 L1014.41 682.763 L1013.85 682.763 L1013.29 682.763 L1012.73 682.763 L1012.18 682.763 L1011.62 682.763 L1011.06 682.763 L1010.5 682.763 L1009.94 682.763 L1009.38 682.763 L1008.82 682.763 L1008.26 682.763 L1007.7 682.763 L1007.14 682.763 L1006.58 682.763 L1006.02 682.763 L1005.46 682.763 L1004.91 682.763 L1004.35 682.763 L1003.79 682.763 L1003.23 682.763 L1002.67 682.763 L1002.11 682.763 L1001.55 682.763 L1000.99 682.763 L1000.43 682.763 L999.872 682.763 L999.313 682.763 L998.754 682.763 L998.194 682.763 L997.635 682.763 L997.076 682.763 L996.517 682.763 L995.957 682.763 L995.398 682.763 L994.839 682.763 L994.28 682.763 L993.72 682.763 L993.161 682.763 L992.602 682.763 L992.043 682.763 L991.483 682.763 L990.924 682.763 L990.365 682.763 L989.806 682.763 L989.246 682.763 L988.687 682.763 L988.128 682.763 L987.569 682.763 L987.009 682.763 L986.45 682.763 L985.891 682.763 L985.332 682.763 L984.772 682.763 L984.213 682.763 L983.654 682.763 L983.095 682.763 L982.535 682.763 L981.976 682.763 L981.417 682.763 L980.858 682.763 L980.298 682.763 L979.739 682.763 L979.18 682.763 L978.621 682.763 L978.061 682.763 L977.502 682.763 L976.943 682.763 L976.384 682.763 L975.824 682.763 L975.265 682.763 L974.706 682.763 L974.147 682.763 L973.587 682.763 L973.028 682.763 L972.469 682.763 L971.91 682.763 L971.35 682.763 L970.791 682.763 L970.232 682.763 L969.673 682.763 L969.113 682.763 L968.554 682.763 L967.995 682.763 L967.436 682.763 L966.876 682.763 L966.317 682.763 L965.758 682.763 L965.199 682.763 L964.639 682.763 L964.08 682.763 L963.521 682.763 L962.962 682.763 L962.402 682.763 L961.843 682.763 L961.284 682.763 L960.725 682.763 L960.165 682.763 L959.606 682.763 L959.047 682.763 L958.488 682.763 L957.928 682.763 L957.369 682.763 L956.81 682.763 L956.251 682.763 L955.691 682.763 L955.132 682.763 L954.573 682.763 L954.014 682.763 L953.454 682.763 L952.895 682.763 L952.336 682.763 L951.777 682.763 L951.217 682.763 L950.658 682.763 L950.099 682.763 L949.54 682.763 L948.98 682.763 L948.421 682.763 L947.862 682.763 L947.303 682.763 L946.743 682.763 L946.184 682.763 L945.625 682.763 L945.066 682.763 L944.506 682.763 L943.947 682.763 L943.388 682.763 L942.829 682.763 L942.269 682.763 L941.71 682.763 L941.151 682.763 L940.592 682.763 L940.032 682.763 L939.473 682.763 L938.914 682.763 L938.355 682.763 L937.795 682.763 L937.236 682.763 L936.677 682.763 L936.118 682.763 L935.558 682.763 L934.999 682.763 L934.44 682.763 L933.881 682.763 L933.321 682.763 L932.762 682.763 L932.203 682.763 L931.644 682.763 L931.084 682.763 L930.525 682.763 L929.966 682.763 L929.406 682.763 L928.847 682.763 L928.288 682.763 L927.729 682.763 L927.169 682.763 L926.61 682.763 L926.051 682.763 L925.492 682.763 L924.932 682.763 L924.373 682.763 L923.814 682.763 L923.255 682.763 L922.695 682.763 L922.136 682.763 L921.577 682.763 L921.018 682.763 L920.458 682.763 L919.899 682.763 L919.34 682.763 L918.781 682.763 L918.221 682.763 L917.662 682.763 L917.103 682.763 L916.544 682.763 L915.984 682.763 L915.425 682.763 L914.866 682.763 L914.307 682.763 L913.747 682.763 L913.188 682.763 L912.629 682.763 L912.07 682.763 L911.51 682.763 L910.951 682.763 L910.392 682.763 L909.833 682.763 L909.273 682.763 L908.714 682.763 L908.155 682.763 L907.596 682.763 L907.036 682.763 L906.477 682.763 L905.918 682.763 L905.359 682.763 L904.799 682.763 L904.24 682.763 L903.681 682.763 L903.122 682.763 L902.562 682.763 L902.003 682.763 L901.444 682.763 L900.885 682.763 L900.325 682.763 L899.766 682.763 L899.207 682.763 L898.648 682.763 L898.088 682.763 L897.529 682.763 L896.97 682.763 L896.411 682.763 L895.851 682.763 L895.292 682.763 L894.733 682.763 L894.174 682.763 L893.614 682.763 L893.055 682.763 L892.496 682.763 L891.937 682.763 L891.377 682.763 L890.818 682.763 L890.259 682.763 L889.7 682.763 L889.14 682.763 L888.581 682.763 L888.022 682.763 L887.463 682.763 L886.903 682.763 L886.344 682.763 L885.785 682.763 L885.226 682.763 L884.666 682.763 L884.107 682.763 L883.548 682.763 L882.989 682.763 L882.429 682.763 L881.87 682.763 L881.311 682.763 L880.752 682.763 L880.192 682.763 L879.633 682.763 L879.074 682.763 L878.515 682.763 L877.955 682.763 L877.396 682.763 L876.837 682.763 L876.278 682.763 L875.718 682.763 L875.159 682.763 L874.6 682.763 L874.041 682.763 L873.481 682.763 L872.922 682.763 L872.363 682.763 L871.804 682.763 L871.244 682.763 L870.685 682.763 L870.126 682.763 L869.567 682.763 L869.007 682.763 L868.448 682.763 L867.889 682.763 L867.33 682.763 L866.77 682.763 L866.211 682.763 L865.652 682.763 L865.093 682.763 L864.533 682.763 L863.974 682.763 L863.415 682.763 L862.856 682.763 L862.296 682.763 L861.737 682.763 L861.178 682.763 L860.619 682.763 L860.059 682.763 L859.5 682.763 L858.941 682.763 L858.382 682.763 L857.822 682.763 L857.263 682.763 L856.704 682.763 L856.145 682.763 L855.585 682.763 L855.026 682.763 L854.467 682.763 L853.908 682.763 L853.348 682.763 L852.789 682.763 L852.23 682.763 L851.671 682.763 L851.111 682.763 L850.552 682.763 L849.993 682.763 L849.434 682.763 L848.874 682.763 L848.315 682.763 L847.756 682.763 L847.197 682.763 L846.637 682.763 L846.078 682.763 L845.519 682.763 L844.96 682.763 L844.4 682.763 L843.841 682.763 L843.282 682.763 L842.723 682.763 L842.163 682.763 L841.604 682.763 L841.045 682.763 L840.486 682.763 L839.926 682.763 L839.367 682.763 L838.808 682.763 L838.249 682.763 L837.689 682.763 L837.13 682.763 L836.571 682.763 L836.012 682.763 L835.452 682.763 L834.893 682.763 L834.334 682.763 L833.775 682.763 L833.215 682.763 L832.656 682.763 L832.097 682.763 L831.538 682.763 L830.978 682.763 L830.419 682.763 L829.86 682.763 L829.301 682.763 L828.741 682.763 L828.182 682.763 L827.623 682.763 L827.064 682.763 L826.504 682.763 L825.945 682.763 L825.386 682.763 L824.827 682.763 L824.267 682.763 L823.708 682.763 L823.149 682.763 L822.59 682.763 L822.03 682.763 L821.471 682.763 L820.912 682.763 L820.353 682.763 L819.793 682.763 L819.234 682.763 L818.675 682.763 L818.116 682.763 L817.556 682.763 L816.997 682.763 L816.438 682.763 L815.879 682.763 L815.319 682.763 L814.76 682.763 L814.201 682.763 L813.642 682.763 L813.082 682.763 L812.523 682.763 L811.964 682.763 L811.405 682.763 L810.845 682.763 L810.286 682.763 L809.727 682.763 L809.168 682.763 L808.608 682.763 L808.049 682.763 L807.49 682.763 L806.931 682.763 L806.371 682.763 L805.812 682.763 L805.253 682.763 L804.693 682.763 L804.134 682.763 L803.575 682.763 L803.016 682.763 L802.456 682.763 L801.897 682.763 L801.338 682.763 L800.779 682.763 L800.219 682.763 L799.66 682.763 L799.101 682.763 L798.542 682.763 L797.982 682.763 L797.423 682.763 L796.864 682.763 L796.305 682.763 L795.745 682.763 L795.186 682.763 L794.627 682.763 L794.068 682.763 L793.508 682.763 L792.949 682.763 L792.39 682.763 L791.831 682.763 L791.271 682.763 L790.712 682.763 L790.153 682.763 L789.594 682.763 L789.034 682.763 L788.475 682.763 L787.916 682.763 L787.357 682.763 L786.797 682.763 L786.238 682.763 L785.679 682.763 L785.12 682.763 L784.56 682.763 L784.001 682.763 L783.442 682.763 L782.883 682.763 L782.323 682.763 L781.764 682.763 L781.205 682.763 L780.646 682.763 L780.086 682.763 L779.527 682.763 L778.968 682.763 L778.409 682.763 L777.849 682.763 L777.29 682.763 L776.731 682.763 L776.172 682.763 L775.612 682.763 L775.053 682.763 L774.494 682.763 L773.935 682.763 L773.375 682.763 L772.816 682.763 L772.257 682.763 L771.698 682.763 L771.138 682.763 L770.579 682.763 L770.02 682.763 L769.461 682.763 L768.901 682.763 L768.342 682.763 L767.783 682.763 L767.224 682.763 L766.664 682.763 L766.105 682.763 L765.546 682.763 L764.987 682.763 L764.427 682.763 L763.868 682.763 L763.309 682.763 L762.75 682.763 L762.19 682.763 L761.631 682.763 L761.072 682.763 L760.513 682.763 L759.953 682.763 L759.394 682.763 L758.835 682.763 L758.276 682.763 L757.716 682.763 L757.157 682.763 L756.598 682.763 L756.039 682.763 L755.479 682.763 L754.92 682.763 L754.361 682.763 L753.802 682.763 L753.242 682.763 L752.683 682.763 L752.124 682.763 L751.565 682.763 L751.005 682.763 L750.446 682.763 L749.887 682.763 L749.328 682.763 L748.768 682.763 L748.209 682.763 L747.65 682.763 L747.091 682.763 L746.531 682.763 L745.972 682.763 L745.413 682.763 L744.854 682.763 L744.294 682.763 L743.735 682.763 L743.176 682.763 L742.617 682.763 L742.057 682.763 L741.498 682.763 L740.939 682.763 L740.38 682.763 L739.82 682.763 L739.261 682.763 L738.702 682.763 L738.143 682.763 L737.583 682.763 L737.024 682.763 L736.465 682.763 L735.906 682.763 L735.346 682.763 L734.787 682.763 L734.228 682.763 L733.669 682.763 L733.109 682.763 L732.55 682.763 L731.991 682.763 L731.432 682.763 L730.872 682.763 L730.313 682.763 L729.754 682.763 L729.195 682.763 L728.635 682.763 L728.076 682.763 L727.517 682.763 L726.958 682.763 L726.398 682.763 L725.839 682.763 L725.28 682.763 L724.721 682.763 L724.161 682.763 L723.602 682.763 L723.043 682.763 L722.484 682.763 L721.924 682.763 L721.365 682.763 L720.806 682.763 L720.247 682.763  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip283)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,683.562 720.806,683.562 721.365,683.562 721.924,683.562 722.484,683.562 723.043,683.562 723.602,683.562 724.161,683.562 724.721,683.562 725.28,683.562 725.839,683.562 726.398,683.562 726.958,683.562 727.517,683.562 728.076,683.562 728.635,683.562 729.195,683.562 729.754,683.562 730.313,683.562 730.872,683.562 731.432,683.562 731.991,683.562 732.55,683.562 733.109,683.562 733.669,683.562 734.228,683.562 734.787,683.562 735.346,683.562 735.906,683.562 736.465,683.562 737.024,683.562 737.583,683.562 738.143,683.562 738.702,683.562 739.261,683.562 739.82,683.562 740.38,683.562 740.939,683.562 741.498,683.562 742.057,683.562 742.617,683.562 743.176,683.562 743.735,683.562 744.294,683.562 744.854,683.562 745.413,683.562 745.972,683.562 746.531,683.562 747.091,683.562 747.65,683.562 748.209,683.562 748.768,683.562 749.328,683.562 749.887,683.562 750.446,683.562 751.005,683.562 751.565,683.562 752.124,683.562 752.683,683.562 753.242,683.562 753.802,683.562 754.361,683.562 754.92,683.562 755.479,683.562 756.039,683.562 756.598,683.562 757.157,683.562 757.716,683.562 758.276,683.562 758.835,683.562 759.394,683.562 759.953,683.562 760.513,683.562 761.072,683.562 761.631,683.562 762.19,683.562 762.75,683.562 763.309,683.562 763.868,683.562 764.427,683.562 764.987,683.562 765.546,683.562 766.105,683.562 766.664,683.562 767.224,683.562 767.783,683.562 768.342,683.562 768.901,683.562 769.461,683.562 770.02,683.562 770.579,683.562 771.138,683.562 771.698,683.562 772.257,683.562 772.816,683.562 773.375,683.562 773.935,683.562 774.494,683.562 775.053,683.562 775.612,683.562 776.172,683.562 776.731,683.562 777.29,683.562 777.849,683.562 778.409,683.562 778.968,683.562 779.527,683.562 780.086,683.562 780.646,683.562 781.205,683.562 781.764,683.562 782.323,683.562 782.883,683.562 783.442,683.562 784.001,683.562 784.56,683.562 785.12,683.562 785.679,683.562 786.238,683.562 786.797,683.562 787.357,683.562 787.916,683.562 788.475,683.562 789.034,683.562 789.594,683.562 790.153,683.562 790.712,683.562 791.271,683.562 791.831,683.562 792.39,683.562 792.949,683.562 793.508,683.562 794.068,683.562 794.627,683.562 795.186,683.562 795.745,683.562 796.305,683.562 796.864,683.562 797.423,683.562 797.982,683.562 798.542,683.562 799.101,683.562 799.66,683.562 800.219,683.562 800.779,683.562 801.338,683.562 801.897,683.562 802.456,683.562 803.016,683.562 803.575,683.562 804.134,683.562 804.693,683.562 805.253,683.562 805.812,683.562 806.371,683.562 806.931,683.562 807.49,683.562 808.049,683.562 808.608,683.562 809.168,683.562 809.727,683.562 810.286,683.562 810.845,683.562 811.405,683.562 811.964,683.562 812.523,683.562 813.082,683.562 813.642,683.562 814.201,683.562 814.76,683.562 815.319,683.562 815.879,683.562 816.438,683.562 816.997,683.562 817.556,683.562 818.116,683.562 818.675,683.562 819.234,683.562 819.793,683.562 820.353,683.562 820.912,683.562 821.471,683.562 822.03,683.562 822.59,683.562 823.149,683.562 823.708,683.562 824.267,683.562 824.827,683.562 825.386,683.562 825.945,683.562 826.504,683.562 827.064,683.562 827.623,683.562 828.182,683.562 828.741,683.562 829.301,683.562 829.86,683.562 830.419,683.562 830.978,683.562 831.538,683.562 832.097,683.562 832.656,683.562 833.215,683.562 833.775,683.562 834.334,683.562 834.893,683.562 835.452,683.562 836.012,683.562 836.571,683.562 837.13,683.562 837.689,683.562 838.249,683.562 838.808,683.562 839.367,683.562 839.926,683.562 840.486,683.562 841.045,683.562 841.604,683.562 842.163,683.562 842.723,683.562 843.282,683.562 843.841,683.562 844.4,683.562 844.96,683.562 845.519,683.562 846.078,683.562 846.637,683.562 847.197,683.562 847.756,683.562 848.315,683.562 848.874,683.562 849.434,683.562 849.993,683.562 850.552,683.562 851.111,683.562 851.671,683.562 852.23,683.562 852.789,683.562 853.348,683.562 853.908,683.562 854.467,683.562 855.026,683.562 855.585,683.562 856.145,683.562 856.704,683.562 857.263,683.562 857.822,683.562 858.382,683.562 858.941,683.562 859.5,683.562 860.059,683.562 860.619,683.562 861.178,683.562 861.737,683.562 862.296,683.562 862.856,683.562 863.415,683.562 863.974,683.562 864.533,683.562 865.093,683.562 865.652,683.562 866.211,683.562 866.77,683.562 867.33,683.562 867.889,683.562 868.448,683.562 869.007,683.562 869.567,683.562 870.126,683.562 870.685,683.562 871.244,683.562 871.804,683.562 872.363,683.562 872.922,683.562 873.481,683.562 874.041,683.562 874.6,683.562 875.159,683.562 875.718,683.562 876.278,683.562 876.837,683.562 877.396,683.562 877.955,683.562 878.515,683.562 879.074,683.562 879.633,683.562 880.192,683.562 880.752,683.562 881.311,683.562 881.87,683.562 882.429,683.562 882.989,683.562 883.548,683.562 884.107,683.562 884.666,683.562 885.226,683.562 885.785,683.562 886.344,683.562 886.903,683.562 887.463,683.562 888.022,683.562 888.581,683.562 889.14,683.562 889.7,683.562 890.259,683.562 890.818,683.562 891.377,683.562 891.937,683.562 892.496,683.562 893.055,683.562 893.614,683.562 894.174,683.562 894.733,683.562 895.292,683.562 895.851,683.562 896.411,683.562 896.97,683.562 897.529,683.562 898.088,683.562 898.648,683.562 899.207,683.562 899.766,683.562 900.325,683.562 900.885,683.562 901.444,683.562 902.003,683.562 902.562,683.562 903.122,683.562 903.681,683.562 904.24,683.562 904.799,683.562 905.359,683.562 905.918,683.562 906.477,683.562 907.036,683.562 907.596,683.562 908.155,683.562 908.714,683.562 909.273,683.562 909.833,683.562 910.392,683.562 910.951,683.562 911.51,683.562 912.07,683.562 912.629,683.562 913.188,683.562 913.747,683.562 914.307,683.562 914.866,683.562 915.425,683.562 915.984,683.562 916.544,683.562 917.103,683.562 917.662,683.562 918.221,683.562 918.781,683.562 919.34,683.562 919.899,683.562 920.458,683.562 921.018,683.562 921.577,683.562 922.136,683.562 922.695,683.562 923.255,683.562 923.814,683.562 924.373,683.562 924.932,683.562 925.492,683.562 926.051,683.562 926.61,683.562 927.169,683.562 927.729,683.562 928.288,683.562 928.847,683.562 929.406,683.562 929.966,683.562 930.525,683.562 931.084,683.562 931.644,683.562 932.203,683.562 932.762,683.562 933.321,683.562 933.881,683.562 934.44,683.562 934.999,683.562 935.558,683.562 936.118,683.562 936.677,683.562 937.236,683.562 937.795,683.562 938.355,683.562 938.914,683.562 939.473,683.562 940.032,683.562 940.592,683.562 941.151,683.562 941.71,683.562 942.269,683.562 942.829,683.562 943.388,683.562 943.947,683.562 944.506,683.562 945.066,683.562 945.625,683.562 946.184,683.562 946.743,683.562 947.303,683.562 947.862,683.562 948.421,683.562 948.98,683.562 949.54,683.562 950.099,683.562 950.658,683.562 951.217,683.562 951.777,683.562 952.336,683.562 952.895,683.562 953.454,683.562 954.014,683.562 954.573,683.562 955.132,683.562 955.691,683.562 956.251,683.562 956.81,683.562 957.369,683.562 957.928,683.562 958.488,683.562 959.047,683.562 959.606,683.562 960.165,683.562 960.725,683.562 961.284,683.562 961.843,683.562 962.402,683.562 962.962,683.562 963.521,683.562 964.08,683.562 964.639,683.562 965.199,683.562 965.758,683.562 966.317,683.562 966.876,683.562 967.436,683.562 967.995,683.562 968.554,683.562 969.113,683.562 969.673,683.562 970.232,683.562 970.791,683.562 971.35,683.562 971.91,683.562 972.469,683.562 973.028,683.562 973.587,683.562 974.147,683.562 974.706,683.562 975.265,683.562 975.824,683.562 976.384,683.562 976.943,683.562 977.502,683.562 978.061,683.562 978.621,683.562 979.18,683.562 979.739,683.562 980.298,683.562 980.858,683.562 981.417,683.562 981.976,683.562 982.535,683.562 983.095,683.562 983.654,683.562 984.213,683.562 984.772,683.562 985.332,683.562 985.891,683.562 986.45,683.562 987.009,683.562 987.569,683.562 988.128,683.562 988.687,683.562 989.246,683.562 989.806,683.562 990.365,683.562 990.924,683.562 991.483,683.562 992.043,683.562 992.602,683.562 993.161,683.562 993.72,683.562 994.28,683.562 994.839,683.562 995.398,683.562 995.957,683.562 996.517,683.562 997.076,683.562 997.635,683.562 998.194,683.562 998.754,683.562 999.313,683.562 999.872,683.562 1000.43,683.562 1000.99,683.562 1001.55,683.562 1002.11,683.562 1002.67,683.562 1003.23,683.562 1003.79,683.562 1004.35,683.562 1004.91,683.562 1005.46,683.562 1006.02,683.562 1006.58,683.562 1007.14,683.562 1007.7,683.562 1008.26,683.562 1008.82,683.562 1009.38,683.562 1009.94,683.562 1010.5,683.562 1011.06,683.562 1011.62,683.562 1012.18,683.562 1012.73,683.562 1013.29,683.562 1013.85,683.562 1014.41,683.562 1014.97,683.562 1015.53,683.562 1016.09,683.562 1016.65,683.562 1017.21,683.562 1017.77,683.562 1018.33,683.562 1018.89,683.562 1019.45,683.562 1020.01,683.562 1020.56,683.562 1021.12,683.562 1021.68,683.562 1022.24,683.562 1022.8,683.562 1023.36,683.562 1023.92,683.562 1024.48,683.562 1025.04,683.562 1025.6,683.562 1026.16,683.562 1026.72,683.562 1027.28,683.562 1027.83,683.562 1028.39,683.562 1028.95,683.562 1029.51,683.562 1030.07,683.562 1030.63,683.562 1031.19,683.562 1031.75,683.562 1032.31,683.562 1032.87,683.562 1033.43,683.562 1033.99,683.562 1034.55,683.562 1035.1,683.562 1035.66,683.562 1036.22,683.562 1036.78,683.562 1037.34,683.562 1037.9,683.562 1038.46,683.562 1039.02,683.562 1039.58,683.562 1040.14,683.562 1040.7,683.562 1041.26,683.562 1041.82,683.562 1042.38,683.562 1042.93,683.562 1043.49,683.562 1044.05,683.562 1044.61,683.562 1045.17,683.562 1045.73,683.562 1046.29,683.562 1046.85,683.562 1047.41,683.562 1047.97,683.562 1048.53,683.562 1049.09,683.562 1049.65,683.562 1050.2,683.562 1050.76,683.562 1051.32,683.562 1051.88,683.562 1052.44,683.562 1053,683.562 1053.56,683.562 1054.12,683.562 1054.68,683.562 1055.24,683.562 1055.8,683.562 1056.36,683.562 1056.92,683.562 1057.48,683.562 1058.03,683.562 1058.59,683.562 1059.15,683.562 1059.71,683.562 1060.27,683.562 1060.83,683.562 1061.39,683.562 1061.95,683.562 1062.51,683.562 1063.07,683.562 1063.63,683.562 1064.19,683.562 1064.75,683.562 1065.3,683.562 1065.86,683.562 1066.42,683.562 1066.98,683.562 1067.54,683.562 1068.1,683.562 1068.66,683.562 1069.22,683.562 1069.78,683.562 1070.34,683.562 1070.9,683.562 1071.46,683.562 1072.02,683.562 1072.57,683.562 1073.13,683.562 1073.69,683.562 1074.25,683.562 1074.81,683.562 1075.37,683.562 1075.93,683.562 1076.49,683.562 1077.05,683.562 1077.61,683.562 1078.17,683.562 1078.73,683.562 1079.29,683.562 1079.85,683.562 1080.4,683.562 1080.96,683.562 1081.52,683.562 1082.08,683.562 1082.64,683.562 1083.2,683.562 1083.76,683.562 1084.32,683.562 1084.88,683.562 1085.44,683.562 1086,683.562 1086.56,683.562 1087.12,683.562 1087.67,683.562 1088.23,683.562 1088.79,683.562 1089.35,683.562 1089.91,683.562 1090.47,683.562 1091.03,683.562 1091.59,683.562 1092.15,683.562 1092.71,683.562 1093.27,683.562 1093.83,683.562 1094.39,683.562 1094.94,683.562 1095.5,683.562 1096.06,683.562 1096.62,683.562 1097.18,683.562 1097.74,683.562 1098.3,683.562 1098.86,683.562 1099.42,683.562 1099.98,683.562 1100.54,683.562 1101.1,683.562 1101.66,683.562 1102.22,683.562 1102.77,683.562 1103.33,683.562 1103.89,683.562 1104.45,683.562 1105.01,683.562 1105.57,683.562 1106.13,683.562 1106.69,683.562 1107.25,683.562 1107.81,683.562 1108.37,683.562 1108.93,683.562 1109.49,683.562 1110.04,683.562 1110.6,683.562 1111.16,683.562 1111.72,683.562 1112.28,683.562 1112.84,683.562 1113.4,683.562 1113.96,683.562 1114.52,683.562 1115.08,683.562 1115.64,683.562 1116.2,683.562 1116.76,683.562 1117.31,683.562 1117.87,683.562 1118.43,683.562 1118.99,683.562 1119.55,683.562 1120.11,683.562 1120.67,683.562 1121.23,683.562 1121.79,683.562 1122.35,683.562 1122.91,683.562 1123.47,683.562 1124.03,683.562 1124.59,683.562 1125.14,683.562 1125.7,683.562 1126.26,683.562 1126.82,683.562 1127.38,683.562 1127.94,683.562 1128.5,683.562 1129.06,683.562 1129.62,683.562 1130.18,683.562 1130.74,683.562 1131.3,683.562 1131.86,683.562 1132.41,683.562 1132.97,683.562 1133.53,683.562 1134.09,683.562 1134.65,683.562 1135.21,683.562 1135.77,683.562 1136.33,683.562 1136.89,683.562 1137.45,683.562 1138.01,683.562 1138.57,683.562 1139.13,683.562 1139.68,683.562 1140.24,683.562 1140.8,683.562 1141.36,683.562 1141.92,683.562 1142.48,683.562 1143.04,683.562 1143.6,683.562 1144.16,683.562 1144.72,683.562 1145.28,683.562 1145.84,683.562 1146.4,683.562 1146.96,683.562 1147.51,683.562 1148.07,683.562 1148.63,683.562 1149.19,683.562 1149.75,683.562 1150.31,683.562 1150.87,683.562 1151.43,683.562 1151.99,683.562 1152.55,683.562 1153.11,683.562 1153.67,683.562 1154.23,683.562 1154.78,683.562 1155.34,683.562 1155.9,683.562 1156.46,683.562 1157.02,683.562 1157.58,683.562 1158.14,683.562 1158.7,683.562 1159.26,683.562 1159.82,683.562 1160.38,683.562 1160.94,683.562 1161.5,683.562 1162.05,683.562 1162.61,683.562 1163.17,683.562 1163.73,683.562 1164.29,683.562 1164.85,683.562 1165.41,683.562 1165.97,683.562 1166.53,683.562 1167.09,683.562 1167.65,683.562 1168.21,683.562 1168.77,683.562 1169.33,683.562 1169.88,683.562 1170.44,683.562 1171,683.562 1171.56,683.562 1172.12,683.562 1172.68,683.562 1173.24,683.562 1173.8,683.562 1174.36,683.562 1174.92,683.562 1175.48,683.562 1176.04,683.562 1176.6,683.562 1177.15,683.562 1177.71,683.562 1178.27,683.562 1178.83,683.562 1179.39,683.562 1179.95,683.562 1180.51,683.562 1181.07,683.562 1181.63,683.562 1182.19,683.562 1182.75,683.562 1183.31,683.562 1183.87,683.562 1184.43,683.562 1184.98,683.562 1185.54,683.562 1186.1,683.562 1186.66,683.562 1187.22,683.562 1187.78,683.562 1188.34,683.562 1188.9,683.562 1189.46,683.562 1190.02,683.562 1190.58,683.562 1191.14,683.562 1191.7,683.562 1192.25,683.562 1192.81,683.562 1193.37,683.562 1193.93,683.562 1194.49,683.562 1195.05,683.562 1195.61,683.562 1196.17,683.562 1196.73,683.562 1197.29,683.562 1197.85,683.562 1198.41,683.562 1198.97,683.562 1199.52,683.562 1200.08,683.562 1200.64,683.562 1201.2,683.562 1201.76,683.562 1202.32,683.562 1202.88,683.562 1203.44,683.562 1204,683.562 1204.56,683.562 1205.12,683.562 1205.68,683.562 1206.24,683.562 1206.8,683.562 1207.35,683.562 1207.91,683.562 1208.47,683.562 1209.03,683.562 1209.59,683.562 1210.15,683.562 1210.71,683.562 1211.27,683.562 1211.83,683.562 1212.39,683.562 1212.95,683.562 1213.51,683.562 1214.07,683.562 1214.62,683.562 1215.18,683.562 1215.74,683.562 1216.3,683.562 1216.86,683.562 1217.42,683.562 1217.98,683.562 1218.54,683.562 1219.1,683.562 1219.66,683.562 1220.22,683.562 1220.78,683.562 1221.34,683.562 1221.89,683.562 1222.45,683.562 1223.01,683.562 1223.57,683.562 1224.13,683.562 1224.69,683.562 1225.25,683.562 1225.81,683.562 1226.37,683.562 1226.93,683.562 1227.49,683.562 1228.05,683.562 1228.61,683.562 1229.17,683.562 1229.72,683.562 1230.28,683.562 1230.84,683.562 1231.4,683.562 1231.96,683.562 1232.52,683.562 1233.08,683.562 1233.64,683.562 1234.2,683.562 1234.76,683.562 1235.32,683.562 1235.88,683.562 1236.44,683.562 1236.99,683.562 1237.55,683.562 1238.11,683.562 1238.67,683.562 1239.23,683.562 1239.79,683.562 1240.35,683.562 1240.91,683.562 1241.47,683.562 1242.03,683.562 1242.59,683.562 1243.15,683.562 1243.71,683.562 1244.26,683.562 1244.82,683.562 1245.38,683.562 1245.94,683.562 1246.5,683.562 1247.06,683.562 1247.62,683.562 1248.18,683.562 1248.74,683.562 1249.3,683.562 1249.86,683.562 1250.42,683.562 1250.98,683.562 1251.54,683.562 1252.09,683.562 1252.65,683.562 1253.21,683.562 1253.77,683.562 1254.33,683.562 1254.89,683.562 1255.45,683.562 1256.01,683.562 1256.57,683.562 1257.13,683.562 1257.69,683.562 1258.25,683.562 1258.81,683.562 1259.36,683.562 1259.92,683.562 1260.48,683.562 1261.04,683.562 1261.6,683.562 1262.16,683.562 1262.72,683.562 1263.28,683.562 1263.84,683.562 1264.4,683.562 1264.96,683.562 1265.52,683.562 1266.08,683.562 1266.63,683.562 1267.19,683.562 1267.75,683.562 1268.31,683.562 1268.87,683.562 1269.43,683.562 1269.99,683.562 1270.55,683.562 1271.11,683.562 1271.67,683.562 1272.23,683.562 1272.79,683.562 1273.35,683.562 1273.91,683.562 1274.46,683.562 1275.02,683.562 1275.58,683.562 1276.14,683.562 1276.7,683.562 1277.26,683.562 1277.82,683.562 1278.38,683.562 1278.94,683.562 1279.5,683.562 1280.06,683.562 1280.62,683.562 1281.18,683.562 1281.73,683.562 1282.29,683.562 1282.85,683.562 1283.41,683.562 1283.97,683.562 1284.53,683.562 1285.09,683.562 1285.65,683.562 1286.21,683.562 1286.77,683.562 1287.33,683.562 1287.89,683.562 1288.45,683.562 1289,683.562 1289.56,683.562 1290.12,683.562 1290.68,683.562 1291.24,683.562 1291.8,683.562 1292.36,683.562 1292.92,683.562 1293.48,683.562 1294.04,683.562 1294.6,683.562 1295.16,683.562 1295.72,683.562 1296.28,683.562 1296.83,683.562 1297.39,683.562 1297.95,683.562 1298.51,683.562 1299.07,683.562 1299.63,683.562 1300.19,683.562 1300.75,683.562 1301.31,683.562 1301.87,683.562 1302.43,683.562 1302.99,683.562 1303.55,683.562 1304.1,683.562 1304.66,683.562 1305.22,683.562 1305.78,683.562 1306.34,683.562 1306.9,683.562 1307.46,683.562 1308.02,683.562 1308.58,683.562 1309.14,683.562 1309.7,683.562 1310.26,683.562 1310.82,683.562 1311.38,683.562 1311.93,683.562 1312.49,683.562 1313.05,683.562 1313.61,683.562 1314.17,683.562 1314.73,683.562 1315.29,683.562 1315.85,683.562 1316.41,683.562 1316.97,683.562 1317.53,683.562 1318.09,683.562 1318.65,683.562 1319.2,683.562 1319.76,683.562 1320.32,683.562 1320.88,683.562 1321.44,683.562 1322,683.562 1322.56,683.562 1323.12,683.562 1323.68,683.562 1324.24,683.562 1324.8,683.562 1325.36,683.562 1325.92,683.562 1326.47,683.562 1327.03,683.562 1327.59,683.562 1328.15,683.562 1328.71,683.562 1329.27,683.562 1329.83,683.562 1330.39,683.562 1330.95,683.562 1331.51,683.562 1332.07,683.562 1332.63,683.562 1333.19,683.562 1333.75,683.562 1334.3,683.562 1334.86,683.562 1335.42,683.562 1335.98,683.562 1336.54,683.562 1337.1,683.562 1337.66,683.562 1338.22,683.562 1338.78,683.562 1339.34,683.562 1339.9,683.562 1340.46,683.562 1341.02,683.562 1341.57,683.562 1342.13,683.562 1342.69,683.562 1343.25,683.562 1343.81,683.562 1344.37,683.562 1344.93,683.562 1345.49,683.562 1346.05,683.562 1346.61,683.562 1347.17,683.562 1347.73,683.562 1348.29,683.562 1348.84,683.562 1349.4,683.562 1349.96,683.562 1350.52,683.562 1351.08,683.562 1351.64,683.562 1352.2,683.562 1352.76,683.562 1353.32,683.562 1353.88,683.562 1354.44,683.562 1355,683.562 1355.56,683.562 1356.12,683.562 1356.67,683.562 1357.23,683.562 1357.79,683.562 1358.35,683.562 1358.91,683.562 1359.47,683.562 1360.03,683.562 1360.59,683.562 1361.15,683.562 1361.71,683.562 1362.27,683.562 1362.83,683.562 1363.39,683.562 1363.94,683.562 1364.5,683.562 1365.06,683.562 1365.62,683.562 1366.18,683.562 1366.74,683.562 1367.3,683.562 1367.86,683.562 1368.42,683.562 1368.98,683.562 1369.54,683.562 1370.1,683.562 1370.66,683.562 1371.21,683.562 1371.77,683.562 1372.33,683.562 1372.89,683.562 1373.45,683.562 1374.01,683.562 1374.57,683.562 1375.13,683.562 1375.69,683.562 1376.25,683.562 1376.81,683.562 1377.37,683.562 1377.93,683.562 1378.49,683.562 1379.04,683.562 1379.6,683.562 1380.16,683.562 1380.72,683.562 1381.28,683.562 1381.84,683.562 1382.4,683.562 1382.96,683.562 1383.52,683.562 1384.08,683.562 1384.64,683.562 1385.2,683.562 1385.76,683.562 1386.31,683.562 1386.87,683.562 1387.43,683.562 1387.99,683.562 1388.55,683.562 1389.11,683.562 1389.67,683.562 1390.23,683.562 1390.79,683.562 1391.35,683.562 1391.91,683.562 1392.47,683.562 1393.03,683.562 1393.58,683.562 1394.14,683.562 1394.7,683.562 1395.26,683.562 1395.82,683.562 1396.38,683.562 1396.94,683.562 1397.5,683.562 1398.06,683.562 1398.62,683.562 1399.18,683.562 1399.74,683.562 1400.3,683.562 1400.86,683.562 1401.41,683.562 1401.97,683.562 1402.53,683.562 1403.09,683.562 1403.65,683.562 1404.21,683.562 1404.77,683.562 1405.33,683.562 1405.89,683.562 1406.45,683.562 1407.01,683.562 1407.57,683.562 1408.13,683.562 1408.68,683.562 1409.24,683.562 1409.8,683.562 1410.36,683.562 1410.92,683.562 1411.48,683.562 1412.04,683.562 1412.6,683.562 1413.16,683.562 1413.72,683.562 1414.28,683.562 1414.84,683.562 1415.4,683.562 1415.95,683.562 1416.51,683.562 1417.07,683.562 1417.63,683.562 1418.19,683.562 1418.75,683.562 1419.31,683.562 1419.87,683.562 1420.43,683.562 1420.99,683.562 1421.55,683.562 1422.11,683.562 1422.67,683.562 1423.23,683.562 1423.78,683.562 1424.34,683.562 1424.9,683.562 1425.46,683.562 1426.02,683.562 1426.58,683.562 1427.14,683.562 1427.7,683.562 1428.26,683.562 1428.82,683.562 1429.38,683.562 1429.94,683.562 1430.5,683.562 1431.05,683.562 1431.61,683.562 1432.17,683.562 1432.73,683.562 1433.29,683.562 1433.85,683.562 1434.41,683.562 1434.97,683.562 1435.53,683.562 1436.09,683.562 1436.65,683.562 1437.21,683.562 1437.77,683.562 1438.33,683.562 1438.88,683.562 1439.44,683.562 1440,683.562 1440.56,683.562 1441.12,683.562 1441.68,683.562 1442.24,683.562 1442.8,683.562 1443.36,683.562 1443.92,683.562 1444.48,683.562 1445.04,683.562 1445.6,683.562 1446.15,683.562 1446.71,683.562 1447.27,683.562 1447.83,683.562 1448.39,683.562 1448.95,683.562 1449.51,683.562 1450.07,683.562 1450.63,683.562 1451.19,683.562 1451.75,683.562 1452.31,683.562 1452.87,683.562 1453.42,683.562 1453.98,683.562 1454.54,683.562 1455.1,683.562 1455.66,683.562 1456.22,683.562 1456.78,683.562 1457.34,683.562 1457.9,683.562 1458.46,683.562 1459.02,683.562 1459.58,683.562 1460.14,683.562 1460.7,683.562 1461.25,683.562 1461.81,683.562 1462.37,683.562 1462.93,683.562 1463.49,683.562 1464.05,683.562 1464.61,683.562 1465.17,683.562 1465.73,683.562 1466.29,683.562 1466.85,683.562 1467.41,683.562 1467.97,683.562 1468.52,683.562 1469.08,683.562 1469.64,683.562 1470.2,683.562 1470.76,683.562 1471.32,683.562 1471.88,683.562 1472.44,683.562 1473,683.562 1473.56,683.562 1474.12,683.562 1474.68,683.562 1475.24,683.562 1475.79,683.562 1476.35,683.562 1476.91,683.562 1477.47,683.562 1478.03,683.562 1478.59,683.562 1479.15,683.562 1479.71,683.562 1480.27,683.562 1480.83,683.562 1481.39,683.562 1481.95,683.562 1482.51,683.562 1483.07,683.562 1483.62,683.562 1484.18,683.562 1484.74,683.562 1485.3,683.562 1485.86,683.562 1486.42,683.562 1486.98,683.562 1487.54,683.562 1488.1,683.562 1488.66,683.562 1489.22,683.562 1489.78,683.562 1490.34,683.562 1490.89,683.562 1491.45,683.562 1492.01,683.562 1492.57,683.562 1493.13,683.562 1493.69,683.562 1494.25,683.562 1494.81,683.562 1495.37,683.562 1495.93,683.562 1496.49,683.562 1497.05,683.562 1497.61,683.562 1498.16,683.562 1498.72,683.562 1499.28,683.562 1499.84,683.562 1500.4,683.562 1500.96,683.562 1501.52,683.562 1502.08,683.562 1502.64,683.562 1503.2,683.562 1503.76,683.562 1504.32,683.562 1504.88,683.562 1505.44,683.562 1505.99,683.562 1506.55,683.562 1507.11,683.562 1507.67,683.562 1508.23,683.562 1508.79,683.562 1509.35,683.562 1509.91,683.562 1510.47,683.562 1511.03,683.562 1511.59,683.562 1512.15,683.562 1512.71,683.562 1513.26,683.562 1513.82,683.562 1514.38,683.562 1514.94,683.562 1515.5,683.562 1516.06,683.562 1516.62,683.562 1517.18,683.562 1517.74,683.562 1518.3,683.562 1518.86,683.562 1519.42,683.562 1519.98,683.562 1520.53,683.562 1521.09,683.562 1521.65,683.562 1522.21,683.562 1522.77,683.562 1523.33,683.562 1523.89,683.562 1524.45,683.562 1525.01,683.562 1525.57,683.562 1526.13,683.562 1526.69,683.562 1527.25,683.562 1527.81,683.562 1528.36,683.562 1528.92,683.562 1529.48,683.562 1530.04,683.562 1530.6,683.562 1531.16,683.562 1531.72,683.562 1532.28,683.562 1532.84,683.562 1533.4,683.562 1533.96,683.562 1534.52,683.562 1535.08,683.562 1535.63,683.562 1536.19,683.562 1536.75,683.562 1537.31,683.562 1537.87,683.562 1538.43,683.562 1538.99,683.562 1539.55,683.562 1540.11,683.562 1540.67,683.562 1541.23,683.562 1541.79,683.562 1542.35,683.562 1542.9,683.562 1543.46,683.562 1544.02,683.562 1544.58,683.562 1545.14,683.562 1545.7,683.562 1546.26,683.562 1546.82,683.562 1547.38,683.562 1547.94,683.562 1548.5,683.562 1549.06,683.562 1549.62,683.562 1550.18,683.562 1550.73,683.562 1551.29,683.562 1551.85,683.562 1552.41,683.562 1552.97,683.562 1553.53,683.562 1554.09,683.562 1554.65,683.562 1555.21,683.562 1555.77,683.562 1556.33,683.562 1556.89,683.562 1557.45,683.562 1558,683.562 1558.56,683.562 1559.12,683.562 1559.68,683.562 1560.24,683.562 1560.8,683.562 1561.36,683.562 1561.92,683.562 1562.48,683.562 1563.04,683.562 1563.6,683.562 1564.16,683.562 1564.72,683.562 1565.28,683.562 1565.83,683.562 1566.39,683.562 1566.95,683.562 1567.51,683.562 1568.07,683.562 1568.63,683.562 1569.19,683.562 1569.75,683.562 1570.31,683.562 1570.87,683.562 1571.43,683.562 1571.99,683.562 1572.55,683.562 1573.1,683.562 1573.66,683.562 1574.22,683.562 1574.78,683.562 1575.34,683.562 1575.9,683.562 1576.46,683.562 1577.02,683.562 1577.58,683.562 1578.14,683.562 1578.7,683.562 1579.26,683.562 1579.82,683.562 1580.37,683.562 1580.93,683.562 1581.49,683.562 1582.05,683.562 1582.61,683.562 1583.17,683.562 1583.73,683.562 1584.29,683.562 1584.85,683.562 1585.41,683.562 1585.97,683.562 1586.53,683.562 1587.09,683.562 1587.65,683.562 1588.2,683.562 1588.76,683.562 1589.32,683.562 1589.88,683.562 1590.44,683.562 1591,683.562 1591.56,683.562 1592.12,683.562 1592.68,683.562 1593.24,683.562 1593.8,683.562 1594.36,683.562 1594.92,683.562 1595.47,683.562 1596.03,683.562 1596.59,683.562 1597.15,683.562 1597.71,683.562 1598.27,683.562 1598.83,683.562 1599.39,683.562 1599.95,683.562 1600.51,683.562 1601.07,683.562 1601.63,683.562 1602.19,683.562 1602.74,683.562 1603.3,683.562 1603.86,683.562 1604.42,683.562 1604.98,683.562 1605.54,683.562 1606.1,683.562 1606.66,683.562 1607.22,683.562 1607.78,683.562 1608.34,683.562 1608.9,683.562 1609.46,683.562 1610.02,683.562 1610.57,683.562 1611.13,683.562 1611.69,683.562 1612.25,683.562 1612.81,683.562 1613.37,683.562 1613.93,683.562 1614.49,683.562 1615.05,683.562 1615.61,683.562 1616.17,683.562 1616.73,683.562 1617.29,683.562 1617.84,683.562 1618.4,683.562 1618.96,683.562 1619.52,683.562 1620.08,683.562 1620.64,683.562 1621.2,683.562 1621.76,683.562 1622.32,683.562 1622.88,683.562 1623.44,683.562 1624,683.562 1624.56,683.562 1625.11,683.562 1625.67,683.562 1626.23,683.562 1626.79,683.562 1627.35,683.562 1627.91,683.562 1628.47,683.562 1629.03,683.562 1629.59,683.562 1630.15,683.562 1630.71,683.562 1631.27,683.562 1631.83,683.562 1632.39,683.562 1632.94,683.562 1633.5,683.562 1634.06,683.562 1634.62,683.562 1635.18,683.562 1635.74,683.562 1636.3,683.562 1636.86,683.562 1637.42,683.562 1637.98,683.562 1638.54,683.562 1639.1,683.562 1639.66,683.562 1640.21,683.562 1640.77,683.562 1641.33,683.562 1641.89,683.562 1642.45,683.562 1643.01,683.562 1643.57,683.562 1644.13,683.562 1644.69,683.562 1645.25,683.562 1645.81,683.562 1646.37,683.562 1646.93,683.562 1647.48,683.562 1648.04,683.562 1648.6,683.562 1649.16,683.562 1649.72,683.562 1650.28,683.562 1650.84,683.562 1651.4,683.562 1651.96,683.562 1652.52,683.562 1653.08,683.562 1653.64,683.562 1654.2,683.562 1654.76,683.562 1655.31,683.562 1655.87,683.562 1656.43,683.562 1656.99,683.562 1657.55,683.562 1658.11,683.562 1658.67,683.562 1659.23,683.562 1659.79,683.562 1660.35,683.562 1660.91,683.562 1661.47,683.562 1662.03,683.562 1662.58,683.562 1663.14,683.562 1663.7,683.562 1664.26,683.562 1664.82,683.562 1665.38,683.562 1665.94,683.562 1666.5,683.562 1667.06,683.562 1667.62,683.562 1668.18,683.562 1668.74,683.562 1669.3,683.562 1669.85,683.562 1670.41,683.562 1670.97,683.562 1671.53,683.562 1672.09,683.562 1672.65,683.562 1673.21,683.562 1673.77,683.562 1674.33,683.562 1674.89,683.562 1675.45,683.562 1676.01,683.562 1676.57,683.562 1677.13,683.562 1677.68,683.562 1678.24,683.562 1678.8,683.562 1679.36,683.562 1679.92,683.562 1680.48,683.562 1681.04,683.562 1681.6,683.562 1682.16,683.562 1682.72,683.562 1683.28,683.562 1683.84,683.562 1684.4,683.562 1684.95,683.562 1685.51,683.562 1686.07,683.562 1686.63,683.562 1687.19,683.562 1687.75,683.562 1688.31,683.562 1688.87,683.562 1689.43,683.562 1689.99,683.562 1690.55,683.562 1691.11,683.562 1691.67,683.562 1692.23,683.562 1692.78,683.562 1693.34,683.562 1693.9,683.562 1694.46,683.562 1695.02,683.562 1695.58,683.562 1696.14,683.562 1696.7,683.562 1697.26,683.562 1697.82,683.562 1698.38,683.562 1698.94,683.562 1699.5,683.562 1700.05,683.562 1700.61,683.562 1701.17,683.562 1701.73,683.562 1702.29,683.562 1702.85,683.562 1703.41,683.562 1703.97,683.562 1704.53,683.562 1705.09,683.562 1705.65,683.562 1706.21,683.562 1706.77,683.562 1707.32,683.562 1707.88,683.562 1708.44,683.562 1709,683.562 1709.56,683.562 1710.12,683.562 1710.68,683.562 1711.24,683.562 1711.8,683.562 1712.36,683.562 1712.92,683.562 1713.48,683.562 1714.04,683.562 1714.6,683.562 1715.15,683.562 1715.71,683.562 1716.27,683.562 1716.83,683.562 1717.39,683.562 1717.95,683.562 1718.51,683.562 1719.07,683.562 1719.63,683.562 1720.19,683.562 1720.75,683.562 1721.31,683.562 1721.87,683.562 1722.42,683.562 1722.98,683.562 1723.54,683.562 1724.1,683.562 1724.66,683.562 1725.22,683.562 1725.78,683.562 1726.34,683.562 1726.9,683.562 1727.46,683.562 1728.02,683.562 1728.58,683.562 1729.14,683.562 1729.69,683.562 1730.25,683.562 1730.81,683.562 1731.37,683.562 1731.93,683.562 1732.49,683.562 1733.05,683.562 1733.61,683.562 1734.17,683.562 1734.73,683.562 1735.29,683.562 1735.85,683.562 1736.41,683.562 1736.97,683.562 1737.52,683.562 1738.08,683.562 1738.64,683.562 1739.2,683.562 1739.76,683.562 1740.32,683.562 1740.88,683.562 1741.44,683.562 1742,683.562 1742.56,683.562 1743.12,683.562 1743.68,683.562 1744.24,683.562 1744.79,683.562 1745.35,683.562 1745.91,683.562 1746.47,683.562 1747.03,683.562 1747.59,683.562 1748.15,683.562 1748.71,683.562 1749.27,683.562 1749.83,683.562 1750.39,683.562 1750.95,683.562 1751.51,683.562 1752.06,683.562 1752.62,683.562 1753.18,683.562 1753.74,683.562 1754.3,683.562 1754.86,683.562 1755.42,683.562 1755.98,683.562 1756.54,683.562 1757.1,683.562 1757.66,683.562 1758.22,683.562 1758.78,683.562 1759.34,683.562 1759.89,683.562 1760.45,683.562 1761.01,683.562 1761.57,683.562 1762.13,683.562 1762.69,683.562 1763.25,683.562 1763.81,683.562 1764.37,683.562 1764.93,683.562 1765.49,683.562 1766.05,683.562 1766.61,683.562 1767.16,683.562 1767.72,683.562 1768.28,683.562 1768.84,683.562 1769.4,683.562 1769.96,683.562 1770.52,683.562 1771.08,683.562 1771.64,683.562 1772.2,683.562 1772.76,683.562 1773.32,683.562 1773.88,683.562 1774.43,683.562 1774.99,683.562 1775.55,683.562 1776.11,683.562 1776.67,683.562 1777.23,683.562 1777.79,683.562 1778.35,683.562 1778.91,683.562 1779.47,683.562 1780.03,683.562 1780.59,683.562 1781.15,683.562 1781.71,683.562 1782.26,683.562 1782.82,683.562 1783.38,683.562 1783.94,683.562 1784.5,683.562 1785.06,683.562 1785.62,683.562 1786.18,683.562 1786.74,683.562 1787.3,683.562 1787.86,683.562 1788.42,683.562 1788.98,683.562 1789.53,683.562 1790.09,683.562 1790.65,683.562 1791.21,683.562 1791.77,683.562 1792.33,683.562 1792.89,683.562 1793.45,683.562 1794.01,683.562 1794.57,683.562 1795.13,683.562 1795.69,683.562 1796.25,683.562 1796.8,683.562 1797.36,683.562 1797.92,683.562 1798.48,683.562 1799.04,683.562 1799.6,683.562 1800.16,683.562 1800.72,683.562 1801.28,683.562 1801.84,683.562 1802.4,683.562 1802.96,683.562 1803.52,683.562 1804.08,683.562 1804.63,683.562 1805.19,683.562 1805.75,683.562 1806.31,683.562 1806.87,683.562 1807.43,683.562 1807.99,683.562 1808.55,683.562 1809.11,683.562 1809.67,683.562 1810.23,683.562 1810.79,683.562 1811.35,683.562 1811.9,683.562 1812.46,683.562 1813.02,683.562 1813.58,683.562 1814.14,683.562 1814.7,683.562 1815.26,683.562 1815.82,683.562 1816.38,683.562 1816.94,683.562 1817.5,683.562 1818.06,683.562 1818.62,683.562 1819.18,683.562 1819.73,683.562 1820.29,683.562 1820.85,683.562 1821.41,683.562 1821.97,683.562 1822.53,683.562 1823.09,683.562 1823.65,683.562 1824.21,683.562 1824.77,683.562 1825.33,683.562 1825.89,683.562 1826.45,683.562 1827,683.562 1827.56,683.562 1828.12,683.562 1828.68,683.562 1829.24,683.562 1829.8,683.562 1830.36,683.562 1830.92,683.562 1831.48,683.562 1832.04,683.562 1832.6,683.562 1833.16,683.562 1833.72,683.562 1834.27,683.562 1834.83,683.562 1835.39,683.562 1835.95,683.562 1836.51,683.562 1837.07,683.562 1837.63,683.562 1838.19,683.562 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906472","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $target_walkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.029547305505235 ± 0.025367587687365956\nProjected Energy: -4.014971140573074 ± (0.0040097042748206135, 0.004023701948433711)\nExact Energy: -4.021502406906472\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from solve as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b];\n    shift=:shift,\n    norm=:norm,\n    time_step=determine_constant_time_step(df),\n    skip=0\n)\ngrowth_witness(sim::PMCSimulation, [b]; kwargs...)\n\nCalculate the growth witness directly from the result (DataFrame or PMCSimulation) of solveing a ProjectorMonteCarloProblem. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0)\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n)\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\ngrowth_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively.  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m) \n\nwhere dτ is the time_step\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator.  Error propagation is done with MonteCarloMeasurements. Propagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a PMCSimulation or DataFrame returned by solve. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\ngrowth_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df or PMCSimulation sim. repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-Tuple{AbstractVector, AbstractVector, AbstractVector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\nmixed_estimator(sim::PMCSimulation, h; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up).  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.  Additional keyword arguments are passed on to ratio_of_means.\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2), where dτ is the time_step, and potentially increased confidence intervals compared to the unweighted ratio.  Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\nmixed_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(df::DataFrame; skip=0, hproj=:hproj, vproj=:vproj, kwargs...)\nprojected_energy(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy(...) to set these up in ProjectorMonteCarloProblem). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n)\nrayleigh_replica_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin. Additional keyword arguments are passed on to ratio_of_means.\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\nrayleigh_replica_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...)\nshift_estimator(sim::PMCSimulation; kwargs...)\n-> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_lin, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_exp, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\nreplica_fidelity(sim::PMCSimulation; kwargs...)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the PMCSimulation or DataFrame returned by solve, using replicas _1 and _2. Calls ratio_of_means to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\nvariational_energy_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame and PMCSimulation versions can extract the relevant information from the result of solve. Set up the ProjectorMonteCarloProblem with the keyword argument replica_strategy = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.determine_constant_time_step-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.determine_constant_time_step","text":"determine_constant_time_step(df) -> time_step\n\nGiven a DataFrame df, determine the time step that was used to compute it. Throw an error if time step is not constant.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractOperator for defining observable operators\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by ProjectorMonteCarloProblem as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallows_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">0.513982</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">1.56e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">1.7653e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">9.829e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">1.293e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">2.685e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">8.786e-6</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0-1.41421im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im      0.0-2.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+1.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im\n 0.0-1.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999991\n -0.9999999999999991\n -0.9999999999999982\n -0.9999999999999973\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000027\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n       0.0+0.0im       -5.55112e-17-0.353553im         0.534676-0.217841im      2.77556e-17-0.204124im             0.0+0.0im           0.534676+0.217841im      2.77556e-17+0.204124im             0.0+0.0im       -5.55112e-17+0.353553im           0.0+0.0im\n       0.0+0.0im        5.55112e-17-0.5im             -0.378073+0.154037im              0.0-0.288675im             0.0+0.0im          -0.378073-0.154037im     -5.55112e-17+0.288675im             0.0+0.0im                0.0+0.5im                0.0+0.0im\n       0.0+0.612372im           0.0+0.0im          -5.55112e-17+0.0im           -1.2326e-32+2.77556e-17im          0.0+0.353553im           0.0+0.0im                   0.0+2.77556e-17im          0.0+0.353553im           0.0+0.0im                0.0+0.612372im\n       0.0+0.0im                0.0+0.353553im      5.55112e-17+6.93889e-17im           0.0-0.612372im             0.0+0.0im        5.55112e-17-1.38778e-16im           0.0+0.612372im             0.0+0.0im                0.0-0.353553im           0.0+0.0im\n       0.0-0.353553im    1.2326e-32+1.11022e-16im   5.55112e-17-2.77556e-17im  -2.46519e-32-2.77556e-17im          0.0+0.612372im  -1.11022e-16-2.77556e-17im   4.93038e-32-2.77556e-17im          0.0+0.612372im   -1.2326e-32+8.32667e-17im        0.0-0.353553im\n       0.0+0.0im           0.353553+0.0im                   0.0+0.0im              0.612372+0.0im                  0.0+0.0im                0.0+0.0im              0.612372+0.0im                  0.0+0.0im           0.353553+0.0im                0.0+0.0im\n -0.353553+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.612372+0.0im                0.0+0.0im                   0.0+0.0im             0.612372+0.0im                0.0+0.0im           0.353553+0.0im\n       0.0+0.0im               -0.5+7.02973e-17im     -0.154037-0.378073im         0.288675-1.95105e-16im          0.0+0.0im          -0.154037+0.378073im         0.288675+2.29062e-16im          0.0+0.0im               -0.5-7.48398e-17im        0.0+0.0im\n       0.0+0.0im          -0.353553+8.84171e-17im      0.217841+0.534676im         0.204124-1.1389e-16im   8.32667e-17+0.0im           0.217841-0.534676im         0.204124+2.4427e-16im   8.32667e-17+0.0im          -0.353553-8.31718e-17im        0.0+0.0im\n  0.612372+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.353553-0.0im                0.0+0.0im                   0.0+0.0im             0.353553+0.0im                0.0+0.0im          -0.612372-0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -1.6810327175633306e-17\n  3.469966302164114e-17\n  0.15915494309189535\n  0.1591549430918954\n  0.1591549430918954","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(fs\"|0 0 4 0 0⟩\"; u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 1 0 0 3⟩\"\n fs\"|1 3 0 0 0⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843  0.0       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8        0.0       0.282843  0.565685  0.0       0.0       0.0       0.0\n  0.0       0.8       0.4       0.581966  0.4       0.0       0.4        0.282843  0.565685  0.0       0.69282   0.69282   0.0       0.0\n  0.0       0.4       0.8       0.4       2.81803   0.4       0.0        0.0       0.565685  0.282843  0.69282   0.0       0.69282   0.0\n  0.0       0.8       0.4       0.0       0.4       0.581966  0.4        0.282843  0.565685  0.0       0.0       0.0       0.69282   0.69282\n  0.0       0.4       0.8       0.4       0.0       0.4       2.81803    0.0       0.565685  0.282843  0.0       0.69282   0.0       0.69282\n  0.0       0.565685  0.0       0.282843  0.0       0.282843  0.0       -0.472136  0.8       0.0       0.489898  0.0       0.0       0.489898\n  0.0       0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n  0.0       0.0       0.565685  0.0       0.282843  0.0       0.282843   0.0       0.8       8.47214   0.0       0.489898  0.489898  0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.0       0.0        0.489898  0.489898  0.0       1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.69282    0.0       0.489898  0.489898  0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.69282   0.0        0.0       0.489898  0.489898  0.0       0.0       6.03607   0.0\n  0.0       0.0       0.0       0.0       0.0       0.69282   0.69282    0.489898  0.489898  0.0       0.0       0.0       0.0       1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.9798639983216155\n -3.363124291613371\n -0.7590191922770746\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781396\n  1.530592997097333\n  1.5835732611867464\n  3.072870330325867\n  3.125672653951849\n  4.862107221562182\n  6.26069485038059\n  6.402671211183119\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348     0.175378     0.0135766   -2.81719e-15  -0.0221221  -0.0697193   1.3739e-15    0.0314466   -2.35922e-16  -0.0360987   -0.0161557  -5.55112e-17   0.00625248  -0.0058099\n  0.177701     0.932229     0.105473     3.01009e-14   0.225254   -0.132826    9.71445e-17  -0.00292026  -2.09555e-15  -0.0861158   -0.0907789  -4.996e-16     0.0591715   -0.0264275\n  0.0768085   -0.0622307    0.0129069   -6.06251e-14  -0.447424   -0.63969     2.05322e-14   0.383444    -6.54338e-15  -0.431051    -0.181167   -6.10623e-16   0.0599783   -0.106852\n -0.0214153   -0.175119    -0.20169      0.616673      0.522017   -0.296818   -0.31234      -0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797    0.0693699     0.0495446   0.416847    0.33773       0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153   -0.175119    -0.20169     -0.616673      0.522017   -0.296818    0.31234      -0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797   -0.0693699     0.0495446   0.416847   -0.33773       0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.0138439   -0.165902     0.922758     1.00753e-14   0.1111     -0.172508   -1.30521e-14  -0.207974     2.66454e-15   0.0848902   -0.149153   -8.32667e-16   0.0712921   -0.0301968\n -0.00234782   0.00840544  -0.098969    -9.6867e-15   -0.0847116   0.082999    1.51129e-14   0.274424     3.60822e-15   0.575786    -0.61385    -2.72005e-15   0.353775    -0.259338\n -0.00237613   0.00294196   0.00143189   5.56152e-15   0.0427486   0.0110863  -3.72619e-15  -0.0663108    9.50628e-16   0.00167015   0.0832916   2.91434e-15  -0.448519    -0.8863\n  0.00363555   0.0455298   -0.133824    -0.332825     -0.290831   -0.057199   -0.527627     -0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478   0.0150664    0.0206752   -0.0642658    -0.0638689  -0.0250518   0.0999631    -0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499\n  0.00195478   0.0150664    0.0206752    0.0642658    -0.0638689  -0.0250518  -0.0999631    -0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555   0.0455298   -0.133824     0.332825     -0.290831   -0.057199    0.527627     -0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133606\n -0.7590191922770747","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321637\n -3.3631242916133584\n -0.7590191922770888\n  0.13584182219621432\n  0.1578999869460862\n  0.8767114411781307\n  1.5305929970973304\n  1.5835732611867428\n  3.0728703303258698\n  3.1256726539518302\n  4.862107221562176\n  6.260694850380597\n  6.402671211183111\n  9.093371706203955","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321621\n -3.3631242916133637\n -0.759019192277076\n  0.1578999869460802\n  0.8767114411781437\n  1.5835732611867417\n  3.125672653951844\n  4.862107221562179\n  6.402671211183117\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.0066861389450877905\n 0.033070399772041625\n 3.9204869225657406\n 0.03307039977204162\n 0.006686138945087839","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html#Model-Hamiltonians","page":"Hamiltonians","title":"Model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardReal1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardReal1D2C","text":"BoseHubbardReal1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0)\n\nImplements a two-component one-dimensional Bose Hubbard chain in real space.\n\nhatH = hatH_a + hatH_b + Vsum_i n_a_in_b_i\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nua: the on-site interaction parameter parameter for Hamiltonian a.\nub: the on-site interaction parameter parameter for Hamiltonian b.\nta: the hopping strength for Hamiltonian a.\ntb: the hopping strength for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nSee also\n\nHubbardReal1D\nBoseHubbardMom1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0, boundary_condition=:periodic)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space. This Hamiltonian can be either real or complex, depending on the choice of boundary_condition.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) +\nv sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\nboundary_condition The following values are supported:\n:periodic: usual period boundary condition realising a ring geometry.\n:hard_wall: hopping over the boundary is not allowed.\n:twisted: like :periodic but hopping over the boundary incurs an additional factor of -1.\nθ <: Number: like :periodic and :twisted but hopping over the boundary incurs a factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left. With this choice the Hamiltonian will have a complex eltype whereas otherwise the eltype is determined by the type of the parameters t, u, and v.\n\nSee also HubbardRealSpace.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\nExtendedHubbardMom1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2(Re(t) cos(k) + Im(t) sin(k))\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardMom1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardMom1D2C","text":"BoseHubbardMom1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0, kwargs...)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with a two-component Bose gas.\n\nhatH = hatH_a + hatH_b + fracVMsum_kpqr b^_r a^_q b_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address.\nua: the u parameter for Hamiltonian a.\nub: the u parameter for Hamiltonian b.\nta: the t parameter for Hamiltonian a.\ntb: the t parameter for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nFurther keyword arguments are passed on to the constructor of HubbardMom1D.\n\nSee also\n\nBoseFS2C\nBoseHubbardReal1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2( Re(t) cos(k) + Im(t) sin(k))\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardMom1D","text":"ExtendedHubbardMom1D(address; u=1.0, t=1.0, v=1.0, dispersion=hubbard_dispersion, boundary_condition = 0.0)\n\nImplements a one-dimensional extended Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + frac12M sum_kpqr (u + 2v cos(q-p)) a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nboundary_condition: θ <: Number: hopping over the boundary incurs a   factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left.\ndispersion: defines ϵ_k =dispersion(t, k + θ)\nhubbard_dispersion: ϵ_k = -2 (Re(t) cos(k + θ) + Im(t) sin(k + θ))\ncontinuum_dispersion: ϵ_k = Re(t) (k + θ)^2 - 2 Im(t) (k + θ)\n\nSee also\n\nHubbardMom1D\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl\n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl\n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between basis states of any noninteracting energy level, leading to many more offdiagonals and fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The   allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make   the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the   interactions. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without   comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, see four_oscillator_integral_general, with the additional restriction that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to   make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi\n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix representation of this Hamiltonian for a single particle is completely dense in the even-parity subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty   for a 1D trap or contain values greater than 1.0. The maximum index   in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,   including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if   only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of\nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other","page":"Hamiltonians","title":"Other","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of ProjectorMonteCarloProblem() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns -2(Re(t) cos(k) + Im(t) sin(k)).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns Re(t) k^2 - 2 Im(t) k.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(fs\"|0 2 1⟩\"; u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Observables are AbstractOperators that represent a physical observable. Their expectation values can be sampled during a ProjectorMonteCarloProblem simulation by passing them into a suitable ReplicaStrategy, e.g.  AllOverlaps.  AbstractOperator is a supertype of  AbstractHamiltonian and has less stringent  requirements. Some observables are also AbstractHamiltonians.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractOperator\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractOperator","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractOperator","text":"AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with elements of type T (returned by eltype) and general (custom type) indices called 'addresses'.\n\nAbstractOperator instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses.\n\nThe defining feature of an AbstractOperator is that it can be applied to a vector with mul!(y, op, x) and that three-way dot products can be calculated with dot(x, op, y).\n\nThe AbstractOperator type is useful for defining operators that are not necessarily Hamiltonians, but that can be used in the context of a ProjectorMonteCarloProblem as observable operators in a ReplicaStrategy, e.g. for defining correlation functions. In contrast to AbstractHamiltonians, AbstractOperators do not need to have a starting_address. Moreover, the eltype of an AbstractOperator can be a vector value.\n\nFor concrete implementations see Hamiltonians. In order to implement a Hamiltonian for use in ProjectorMonteCarloProblem or ExactDiagonalizationProblem use the type AbstractHamiltonian instead, which is a subtype of AbstractOperator.\n\nInterface\n\nBasic interface methods to implement:\n\nallows_address_type(op, type)\ndiagonal_element(op, address)\nnum_offdiagonals(op, address) and\nget_offdiagonal(op, address, chosen) or offdiagonals\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\ndimension(op, addr): defaults to dimension of address space\n\nIn order to calculate observables efficiently, it may make sense to implement custom methods for Interfaces.dot_from_right(x, op, y) and LinearAlgebra.mul!(y, op, x).\n\nSee also AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator() <: AbstractOperator{Float64}\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. It works with any address type that is a subtype of AbstractFockAddress.\n\njulia> p = ExactDiagonalizationProblem(FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3));\n\njulia> gs = solve(p).vectors[1]; # normalised ground state vector\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractOperator{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractOperator{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int,c=:cross) <: AbstractOperator{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d of a two component system in a momentum-space Fock-state basis. It returns a Complex value.\n\nCorrelation across two components:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s b^_p  b_q a_r δ_s+pq+r\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\nc: possible instructions: :cross: default instruction, computing correlation between particles across two components; :first: computing correlation between particles within the first component; :second: computing correlation between particles within the second component. These are the only defined instructions, using anything else will produce errors.\n\nTo use on a one-component system\n\nFor a system with only one component, e.g. with BoseFS, the second argument c is irrelevant and can be any of the above instructions, one could simply skip this argument and let it be the default value.\n\nSee also\n\nBoseHubbardMom1D2C\nBoseFS2C\nG2RealCorrelator\nG2RealSpace\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractOperator{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into ProjectorMonteCarloProblem with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int; address=nothing, type=nothing) <: AbstractOperator{T}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    C_textstring(d) = frac1M sum_j^M δ n_j\n                                         (e^i π sum_j  k  j + d δ n_k) δ n_j+d\n\nHere, δ n_j = n_j - n is the boson number deviation from the mean filling number and n = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nThe default element type T is ComplexF64. This can be overridden with the type keyword argument. If an address is provided, then T is calculated from the address type. It is set to ComplexF64 for non-integer filling numbers, and to Float64 for integer filling numbers or if d==0.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SingleParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.SingleParticleExcitation","text":"SingleParticleExcitation(i, j) <: AbstractHamiltonian\n\nRepresent the ij element of the single-particle reduced density matrix:\n\nρ^(1)_ij = a^_i a_j\n\nwhere i <: Int and j <: Int specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nTwoParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TwoParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.TwoParticleExcitation","text":"TwoParticleExcitation(i, j, k, l) <: AbstractHamiltonian\n\nRepresent the ij kl element of the two-particle reduced density matrix:\n\nρ^(2)_ij kl =  a^_i a^_j a_l a_k\n\nwhere i, j, k, and l (all <: Int) specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator P.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> address = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(address => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(address => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(address => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Hamiltonians-interface","page":"Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. The most general form of a model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T} <: AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with ProjectorMonteCarloProblem). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallows_address_type(h::AbstractHamiltonian, type): defaults to type :< typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.starting_address","page":"Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, address, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address address and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallows_address_type\nBase.eltype\nVectorInterface.scalartype\nmul!","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, address)\n-> newaddress, probability, matrixelement\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address in the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(h::AbstractOperator, addr)\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRepresentation.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.allows_address_type","page":"Hamiltonians","title":"Rimu.Interfaces.allows_address_type","text":"allows_address_type(operator, addr_or_type)\n\nReturns true if addr_or_type is a valid address for operator. Otherwise, returns false.\n\nPart of the AbstractHamiltonian interface.\n\nExtended help\n\nDefaults to addr_or_type <: typeof(starting_address(operator)). Overload this function if the operator can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Base.eltype","page":"Hamiltonians","title":"Base.eltype","text":"eltype(op::AbstractOperator)\n\nReturn the type of the elements of the operator. This can be a vector value. For the underlying scalar type use scalartype.\n\nPart of the AbstractOperator interface.\n\nnote: Note\nNew types should only implement the method with the argument in the type domain.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#VectorInterface.scalartype","page":"Hamiltonians","title":"VectorInterface.scalartype","text":"scalartype(op::AbstractOperator)\n\nReturn the type of the underlying scalar field of the operator. This may be different from the element type of the operator returned by eltype, which can be a vector value.\n\nPart of the AbstractOperator interface.\n\nnote: Note\nNew types should only implement the method with the argument in the type domain.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.mul!","page":"Hamiltonians","title":"LinearAlgebra.mul!","text":"LinearAlgebra.mul!(w::AbstractDVec, op::AbstractOperator, v::AbstractDVec)\n\nIn place multiplication of op with v and storing the result in w. The result is returned. Note that w needs to have a valtype that can hold a product of instances of eltype(op) and valtype(v). Moreover, the StochasticStyle of w needs to be <:IsDeterministic.\n\nPart of the AbstractOperator interface.\n\nThe default implementation relies of diagonal_element and offdiagonals to access the elements of the operator. The function can be overloaded for custom operators.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"hamiltonians.html#Base.adjoint","page":"Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractOperator)\n\nRepresent the adjoint of an AbstractOperator. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.dot","page":"Hamiltonians","title":"LinearAlgebra.dot","text":"dot(w, op::AbstractOperator, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractOperator, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h, otherwise return true. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allows_address_type.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here for HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Harmonic-Oscillator","page":"Hamiltonians","title":"Harmonic Oscillator","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim}; \n    target_energy = nothing, \n    max_energy = nothing, \n    max_blocks = nothing, \n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns \n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRep\nindices: tuple of mode indices that allow recreation of the generating address    addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when    the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating    tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved    after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.    Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds  addr are determined by parity. In this case the blocks are not generated; t_basis  will be zero, and block_size will be an estimate. Pass the seed addresses to  BasisSetRep with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis  indices n_xn_yldots. These indices are bounded by S which is a  tuple of the maximum number of states in each dimension. By default the  groundstate in each dimension is indexed by 0, but this can be changed  by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions,\n\n    mathcalI(ijkl) = int_-infty^infty dx \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function, and is non-zero unless i+j+k+l is odd. See e.g. Titchmarsh (1948). This is a generalisation of the closed form in Papenbrock (2002), which is is the special case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin,\n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state corresponds to a D-tuple of harmonic oscillator indices mathbfn_i. S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of phi_i(0) to speed-up the calculation. The values can be calculated with log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"RMPI.html#Module-RMPI","page":"RMPI","title":"Module RMPI","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI","category":"page"},{"location":"RMPI.html#Rimu.RMPI","page":"RMPI","title":"Rimu.RMPI","text":"Module for providing MPI functionality for Rimu. This module is unexported. To use it, run\n\nusing Rimu.RMPI\n\n\n\n\n\n","category":"module"},{"location":"RMPI.html#MPIData","page":"RMPI","title":"MPIData","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIData","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIData","page":"RMPI","title":"Rimu.RMPI.MPIData","text":"MPIData(data; kwargs...)\n\nWrapper used for signaling that this data is part of a distributed data structure and communication should happen with MPI. MPIData can generally be used where an AbstractDVec would be used otherwise. Unlike AbstractDVecs, MPIData does not support indexing, or iteration over keys, values, and pairs.\n\nKeyword arguments:\n\nsetup = mpi_point_to_point - controls the communication stratgy\nmpi_one_sided uses one-sided communication with remote memory access (RMA), sets MPIOneSided strategy.\nmpi_point_to_point uses MPIPointToPoint strategy.\nmpi_all_to_all uses MPIAllToAll strategy.\nmpi_no_exchange sets MPINoWalkerExchange strategy. Experimental. Use with caution!\ncomm = mpi_comm()\nroot = mpi_root\nThe rest of the keyword arguments are passed to setup.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Setup-functions","page":"RMPI","title":"Setup functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"The following distribute strategies are available. The functions are unexported.","category":"page"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.mpi_point_to_point\nRimu.RMPI.mpi_one_sided\nRimu.RMPI.mpi_all_to_all\nRimu.RMPI.mpi_no_exchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_point_to_point","page":"RMPI","title":"Rimu.RMPI.mpi_point_to_point","text":"mpi_point_to_point(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to point-to-point.\n\nSets up the MPIData structure with MPIPointToPoint strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_one_sided","page":"RMPI","title":"Rimu.RMPI.mpi_one_sided","text":"mpi_one_sided(data, comm = mpi_comm(), root = mpi_root; capacity)\n\nDeclare data as mpi-distributed and set communication strategy to one-sided with remote memory access (RMA). capacity sets the capacity of the RMA windows.\n\nSets up the MPIData structure with MPIOneSided strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_all_to_all","page":"RMPI","title":"Rimu.RMPI.mpi_all_to_all","text":"mpi_all_to_all(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to all-to-all.\n\nSets up the MPIData structure with MPIAllToAll strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_no_exchange","page":"RMPI","title":"Rimu.RMPI.mpi_no_exchange","text":"mpi_no_exchange(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to MPINoWalkerExchange. Sets up the MPIData structure with MPINoWalkerExchange strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Strategies","page":"RMPI","title":"Strategies","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIPointToPoint\nRimu.RMPI.MPIOneSided\nRimu.RMPI.MPIAllToAll\nRimu.RMPI.MPINoWalkerExchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIPointToPoint","page":"RMPI","title":"Rimu.RMPI.MPIPointToPoint","text":"MPIPointToPoint{N,A}\n\nPoint-to-point communication strategy. Uses circular communication using MPI.Send and MPI.Recv!.\n\nConstructor\n\nMPIPointToPoint(::Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIOneSided","page":"RMPI","title":"Rimu.RMPI.MPIOneSided","text":"MPIOneSided(nprocs, myrank, comm, ::Type{T}, capacity)\n\nCommunication buffer for use with MPI one-sided communication (remote memory access). Up to capacity elements of type T can be exchanged between MPI ranks via put. It is important that isbitstype(T) == true. Objects of type MPIOneSided have to be freed manually with a (blocking) call to free().\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIAllToAll","page":"RMPI","title":"Rimu.RMPI.MPIAllToAll","text":" MPIAllToAll\n\nAll-to-all communication strategy. The communication works in two steps: first MPI.Alltoall! is used to communicate the number of walkers each rank wants to send to other ranks, then MPI.Alltoallv! is used to send the walkers around.\n\nConstructor\n\nMPIAllToAll(Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPINoWalkerExchange","page":"RMPI","title":"Rimu.RMPI.MPINoWalkerExchange","text":"MPINoWalkerExchange(nprocs, my_rank, comm)\n\nStrategy for not exchanging walkers between ranks. Consequently there will be no cross-rank annihilations.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#MPI-convenience-functions","page":"RMPI","title":"MPI convenience functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Modules = [Rimu.RMPI]\nPages = [\"helpers.jl\"]\nPrivate = true\nPublic = true","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_root","page":"RMPI","title":"Rimu.RMPI.mpi_root","text":"Default MPI root for RMPI.\n\n\n\n\n\n","category":"constant"},{"location":"RMPI.html#Rimu.DictVectors.mpi_comm-Tuple{}","page":"RMPI","title":"Rimu.DictVectors.mpi_comm","text":"Default MPI communicator for RMPI.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.DictVectors.mpi_rank","page":"RMPI","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.DictVectors.mpi_size","page":"RMPI","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.is_mpi_root","page":"RMPI","title":"Rimu.RMPI.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_allprintln-Tuple","page":"RMPI","title":"Rimu.RMPI.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_barrier","page":"RMPI","title":"Rimu.RMPI.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_combine_walkers!-Tuple{Rimu.RMPI.MPIData, AbstractDVec}","page":"RMPI","title":"Rimu.RMPI.mpi_combine_walkers!","text":"mpi_combine_walkers!(target, source, [strategy])\n\nDistribute the entries of source to the target data structure such that all entries in the target are on the process with the correct mpi rank as controlled by targetrank(). MPI syncronizing.\n\nNote: the storage of the source is communicated rather than the source itself.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_seed!","page":"RMPI","title":"Rimu.RMPI.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.next_mpiID","page":"RMPI","title":"Rimu.RMPI.next_mpiID","text":"next_mpiID()\n\nProduce a new ID number for MPI distributed objects. Uses an internal counter.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.targetrank-Tuple{Union{Integer, AbstractFockAddress}, Any}","page":"RMPI","title":"Rimu.RMPI.targetrank","text":"targetrank(key, np)\n\nCompute the rank where the key belongs.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.@mpi_root-Tuple","page":"RMPI","title":"Rimu.RMPI.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"RMPI.html#Index","page":"RMPI","title":"Index","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Pages   = [\"RMPI.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nnnzs = 0: The number of non-zero elements in the basis set representation. Setting a   non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^6, nnzs, cutoff, filter, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 3 and 9 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int64} with 9 stored entries:\n  0.0  -1.0  -1.0\n -1.0   0.0  -1.0\n -1.0  -1.0   0.0\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 2 and 4 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int64} with 4 stored entries:\n  0.0  -1.0\n -1.0   0.0\n\njulia> using LinearAlgebra; round.(eigvals(Matrix(bsr)); digits = 4) # eigenvalues\n3-element Vector{Float64}:\n -2.0\n  1.0\n  1.0\n\njulia> ev = eigvecs(Matrix(bsr))[:,1]; ev = ev .* sign(ev[1]) # ground state eigenvector\n3-element Vector{Float64}:\n 0.5773502691896257\n 0.5773502691896255\n 0.5773502691896257\n\njulia> dv = DVec(zip(bsr.basis, ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => 0.57735\n  fs\"|0 1 0⟩\" => 0.57735\n  fs\"|1 0 0⟩\" => 0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. A maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nSetting sort to true will sort the basis. Any additional keyword arguments are passed on to Base.sort!.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"randomnumbers.html#Random-numbers-in-Rimu","page":"Random numbers","title":"Random numbers in Rimu","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"Rimu uses Julia's built-in random number generator, which currently defaults to Xoshiro256++.","category":"page"},{"location":"randomnumbers.html#Reproducibility","page":"Random numbers","title":"Reproducibility","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"If you want FCIQMC runs to be reproducible, make sure to seed the RNG with Random.seed!.","category":"page"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"MPI-distributed runs can also be made reproducible by seeding the RNG with Rimu.RMPI.mpi_seed!.","category":"page"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://joachimbrand.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for  parsing by Literate. The process of generating  documentation is automated in the docs/make.jl file and assumes that the following line is  at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example, ","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, value = hopnextneighbour(add, chosen, boundary_condition)\n\nCompute the new address of a hopping event for the Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes multiplied by a term consistent with boundary condition as the value.  The following boundary conditions are supported:\n\n:periodic: hopping over the boundary gives does not change the value.\n:twisted: hopping over the boundary flips the sign of the value.\n:hard_wall: hopping over the boundary gives a value of zero.\nθ <: Number: hopping over the boundary gives a value multiplied by exp(iθ) or exp(iθ) depending on the direction of hopping.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :twisted)\n(BoseFS{2,3}(2, 0, 0), -1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :hard_wall)\n(BoseFS{2,3}(2, 0, 0), 0.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, π/4)\n(BoseFS{2,3}(2, 0, 0), 1.0000000000000002 + 1.0im)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS2C","text":"BoseFS2C{NA,NB,M,AA,AB} <: AbstractFockAddress\nBoseFS2C(onr_a, onr_b)\n\nAddress type that constructed with two BoseFS{N,M,S}. It represents a Fock state with two components, e.g. two different species of bosons with particle number NA from species S and particle number NB from species B. The number of modes M is expected to be the same for both components.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, Tuple{Vararg{Int64, var\"#s61\"}} where var\"#s61\", Tuple{Vararg{Int64, var\"#s5\"}} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.13.0. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(n_replicas=2; operator=nothing, transform=nothing, vecnorm=true)\n    <: ReplicaStrategy{n_replicas}\n\nRun n_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee ProjectorMonteCarloProblem, ReplicaStrategy and AbstractOperator (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to ProjectorMonteCarloProblem then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep time_step constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; target_walkers = 1_000) <: ShiftStrategy\n\nDon't update the shift.  Return when target_walkers is reached.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in ProjectorMonteCarloProblem is advised as the default may not be appropriate.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; target_walkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, time_step) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian, dτ the time_step and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt{S} <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nThis will work with MPIData.\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to ProjectorMonteCarloProblem. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates.\n\nIndexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nSee also ReplicaStrategy, SpectralState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to ProjectorMonteCarloProblem and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_reporting_strategy\nreport!\nreport_after_step!\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to ProjectorMonteCarloProblem or to FCIQMC.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in ProjectorMonteCarloProblem()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, walltime = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the walltime is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with advance!.\n\nSee also SpectralState, SpectralStrategy, ReplicaState, ReplicaStrategy, replica_stats, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several SingleStates representing the ground state and excited states of a single replica.\n\nIndexing the SpectralState state[i] returns the ith SingleState.\n\nSee also SpectralStrategy, ReplicaState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_time_step(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, shift_strategy)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Union{Tuple, Vector}, Tuple{Vararg{AbstractDVec, N}}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators. This function is overloaded for MPIData. The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main ProjectorMonteCarloProblem loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in solve! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> address = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(address);\n\njulia> df1, state = lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 9)\n\njulia> size(df2)\n(200, 9)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(fs\\\"|1 2 3⟩\\\"; u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; target_walkers=targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.target_walkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from ProjectorMonteCarloProblem, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before ProjectorMonteCarloProblem exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{R}, Tuple{S}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{S, R}, Any, Any}} where {S, R}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 1.6, 1.6, 0.4, 0.4)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an AbstractMatrix of configuration vectors from the state. The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also SingleState, ReplicaState, SpectralState, PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.update_time_step-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_time_step","text":"update_time_step(s<:TimeStepStrategy, time_step, tnorm) -> new_time_step\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#RMPI","page":"API","title":"RMPI","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module RMPI","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by ProjectorMonteCarloProblem when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of ProjectorMonteCarloProblem, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with ProjectorMonteCarloProblem, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI. MPI is a standard for parallel and distributed computing, and it is widely used in high-performance computing. Rimu provides support for MPI to enable parallel computations on multiple nodes.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with 2 MPI ranks with mpirun -n 2 julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu and Rimu.RMPI, which contains MPI-related functionality.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu\nusing Rimu.RMPI","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum, which is located at mode 5 in the momentum grid. We put all 10 particles, all in the zero momentum mode.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(fs\"|0 0 0 0 10 0 0 0 0 0⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for MPI calculations, as they will typically run non-interactively. The reports will be written to disk and can be inspected later. This has the additional benefit of reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The default settings will ensure that only the root MPI rank will write to the file, which is reasonable, and that data is saved in chunks of 1000 time steps. We choose to suppress progress messages with setting io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"For running parallel computations with MPI, it is important that a compatible state vector is used. Here we explicitly set up an MPI-enabled state vector, PDVec, which is automatically MPI-distributed over the available number of MPI ranks. In addition, threading will be used with all threads available to Julia.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10000 walkers and for 10000 time steps. We will also compute the projected energy by passing a ProjectedEnergy object as a post_step_strategy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"problem = ProjectorMonteCarloProblem(H;\n    start_at=initial_vector,\n    reporting_strategy,\n    post_step_strategy=ProjectedEnergy(H, initial_vector),\n    target_walkers=10_000,\n    time_step=1e-4,\n    last_step=10_000\n);","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"simulation = solve(problem);\n\n@mpi_root println(\"Simulation success = \", simulation.success)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Simulation success = true\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Once the calculation is done, the results are available in the arrow file on disk.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In a typical workflow, the simulation results would be loaded from disk and analysed in the REPL or with a separate script. The arrow file can be loaded into a DataFrame with metadata using the load_df function.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. ProjectorMonteCarloProblem, ExactDiagonalizationProblem.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary. Additional MPI-related functionality is provided by the module RMPI.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with ProjectorMonteCarloProblem and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with ProjectorMonteCarloProblem and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and AllToAll when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nSee also PDWorkingMemory.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> scale!(pv, -1); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce!.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded and MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface.jl\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\nIf dv is an MPIData, synchronize its contents among the ranks first.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\nwalkernumber_and_length\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(md::MPIData)\n\nCompute the walkernumber of the distributed data on every MPI rank with MPI.Allreduce. MPI syncronizing.\n\n\n\n\n\nwalkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber_and_length","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber_and_length","text":"walkernumber_and_length(v)\n\nCompute walkernumber and length at the same time. When MPI is used, this is more efficient than calling them separately.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.dot_from_right","page":"Dict vectors","title":"Rimu.Interfaces.dot_from_right","text":"dot_from_right(w, op::AbstractOperator, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in ProjectorMonteCarloProblem.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.FirstColumnIterator","page":"Dict vectors","title":"Rimu.DictVectors.FirstColumnIterator","text":"FirstColumnIterator{W,D} <: AbstractVector{D}\n\nIterates segments in the first column of a working memory that belong to a specified rank.\n\nSee PDWorkingMemory, remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured as a two-dimensional array of segments, which themselves are Dicts (see PDVec). The number of rows in this array is equal to the number of segments across all MPI ranks (covering the entire address space), while the number of columns corresponds to the number of segments in the current MPI rank (i.e. column corresponds to the part of the address space that is local to the current rank).\n\nThe purpose of this organisation is to allow spawning in parallel without using locks or atomic operations. The spawning is performed by applying the following sequence of operations:\n\nperform_spawns!: each segment in the PDVec is multiplied by the operator independently, with the results being stored in a column of the working memory.\ncollect_local!: the rows of the working memory are summed to the first column.\nsynchronize_remote!: the segments corresponding to other MPI ranks are distributed and transferred to the first column.\nmove_and_compress!: the results are stochastically compressed and moved to the result PDVec\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports getindex, deposit! and StochasticStyle and acts as a target for spawning. Can be used as a target in a three-way dot-product.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nSum each row in w and store the result in the first column. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.first_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.first_column","text":"first_column(::PDWorkingMemory)\n\nReturn the first column of the working memory. This is where the vectors are collected with collect_local!, synchronize_remote!, copy_to_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the segments in the first column of w on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local MPI rank.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all MPI ranks.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, v::PDVec, ham, boost)\n\nPerform spawns from v through ham to w. boost increases the number of spawns without affecting the expectation value of the process.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the segments in the first column of w that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] w::PDWorkingMemory) -> names, values\n\nSynchronize non-local segments across MPI and add the results to the first column. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nShould return a Tuple of names and a Tuple of values to report.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AllToAll","page":"Dict vectors","title":"Rimu.DictVectors.AllToAll","text":"AllToAll{K,V}(; mpi_comm, n_segments, report) <: Communicator\n\nCommunicator that uses collective communication using MPI.Alltoall[v]!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nn_segments=Threads.nthreads(): the number of segments per rank to use. Should match the PDVec the communicator is used with.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, three implementations are provided, NotDistributed, AllToAll and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\nSee also: PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NestedSegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.NestedSegmentedBuffer","text":"NestedSegmentedBuffer{T}(nrows) <: AbstractMatrix{AbstractVector{T}}\n\nMatrix of vectors stored in a single buffer with collective MPI communication support. The number of rows in the matrix is fixed to nrows.\n\nUsed in the AllToAll communication strategy, where each column corresponds to an MPI rank and each row corresponds to a segment in the PDVec.\n\nSupported operations\n\nappend_collections!: add a column to the matrix.\nappend_empty_column!: add an empty column to the matrix.\nmpi_exchange_alltoall!: each rank sends the i-th column of the matrix to the (i-1)-st rank.\nmpi_exchange_allgather!: each rank sends the 1-st column of the matrix to all ranks.\n\nSee also: SegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint{K,V}(; mpi_comm, report) <: Communicator\n\nMPI Communicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer{T}() <: AbstractVector{AbstractVector{T}}\n\nBehaves like a vector of vectors, but is stored in a single buffer. It can be sent/received over MPI keeping its structure intact. Used in the PointToPoint communication strategy.\n\nSupported operations\n\nreplace_collections!: insert data into the buffers\nmpi_send: send the contents of a buffer to a given rank\nmpi_recv_any!: receive a message sent by mpi_send from any rank, storing the contents in this buffer\n\nSee also: NestedSegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.append_collections!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.append_collections!","text":"append_collections!(buf::NestedSegmentedBuffer, iters)\n\nAdd a column to buf. The length of iters should match buf.nrows.\n\nSee also: NestedSegmentedBuffer, append_empty_column!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.append_empty_column!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer}","page":"Dict vectors","title":"Rimu.DictVectors.append_empty_column!","text":"append_empty_column!(buf::NestedSegmentedBuffer)\n\nLike append_collections!, but adds an empty column.\n\nSee also: NestedSegmentedBuffer, append_collections!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as a (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\nSee also: PDVec, PDWorkingMemory, Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if Communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_comm","page":"Dict vectors","title":"Rimu.DictVectors.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_allgather!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_allgather!","text":"mpi_exchange_allgather!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe first and only column in src will be sent to all ranks. The data from all ranks will be gethered in dst. After this operation, dst will contain the same data on all ranks.\n\nSee also NestedSegmentedBuffer, mpi_exchange_alltoall!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_alltoall!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_alltoall!","text":"mpi_exchange_alltoall!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe n-th column from src will be sent to rank n-1. The data sent from rank r will be stored in the (r+1)-st column of dst.\n\nSee also: NestedSegmentedBuffer, mpi_exchange_allgather!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_rank","page":"Dict vectors","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm::MPI_Comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm::MPI.Comm)\n\nSend the buffer to rank with id dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_size","page":"Dict vectors","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into a SegmentedBuffer.\n\njulia> using Rimu.DictVectors: SegmentedBuffer\n\njulia> buf = SegmentedBuffer{Int}()\n0-element SegmentedBuffer{Int64}\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1,2,3], [4,5]])\n2-element SegmentedBuffer{Int64}:\n [1, 2, 3]\n [4, 5]\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1], [2,3], [4]])\n3-element SegmentedBuffer{Int64}:\n [1]\n [2, 3]\n [4]\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored. If the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"}]
}
