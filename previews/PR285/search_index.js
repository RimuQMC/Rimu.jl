var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Rimu includes an unexported module RMPI, which must be imported to access additional MPI-related functionality.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"using Rimu.RMPI\nmpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"projectormontecarlo.html#Projector-Monte-Carlo-/-FCIQMC","page":"Projector Monte Carlo","title":"Projector Monte Carlo / FCIQMC","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The purpose of Projector Monte Carlo is to stochastically sample the ground state, i.e. the  eigenvector corresponding to the lowest eigenvalue of a quantum Hamiltonian, or more generally,  a very large matrix. Rimu implements a flavor of Projector Monte Carlo called  Full Configuration Interaction Quantum Monte Carlo (FCIQMC).","category":"page"},{"location":"projectormontecarlo.html#ProjectorMonteCarloProblem","page":"Projector Monte Carlo","title":"ProjectorMonteCarloProblem","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"To run a projector Monte Carlo simulation you set up a problem with ProjectorMonteCarloProblem and solve it with solve. Alternatively you can initialize a PMCSimulation struct, step!  through time steps, and solve! it to completion. ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"ProjectorMonteCarloProblem\ninit\nsolve\nsolve!\nstep!","category":"page"},{"location":"projectormontecarlo.html#Rimu.ProjectorMonteCarloProblem-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html#CommonSolve.init-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\ninit(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.solve!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html#CommonSolve.step!-projectormontecarlo","page":"Projector Monte Carlo","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"function"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"After solve or solve! have been called the returned PMCSimulation contains the results of  the projector Monte Carlo calculation.","category":"page"},{"location":"projectormontecarlo.html#PMCSimulation-and-report-as-a-DataFrame","page":"Projector Monte Carlo","title":"PMCSimulation and report as a DataFrame","text":"","category":"section"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Rimu.PMCSimulation","category":"page"},{"location":"projectormontecarlo.html#Rimu.PMCSimulation-projectormontecarlo","page":"Projector Monte Carlo","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"The DataFrame returned from DataFrame(::PMCSimulation) contains the time series data from  the projector Monte Carlo simulation that is of primary interest for analysis. Depending on the  reporting_strategy and other options passed as keyword arguments to  ProjectorMonteCarloProblem it can have different numbers of rows and columns. The rows  correspond to the reported time steps (Monte Carlo steps). There is at least one column with the name :step. Further columns are usually present with additional data reported from the simulation.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"For the default option algorithm = FCIQMC(; shift_strategy, time_step_strategy) with a single replica (n_replicas = 1) and single spectral state, the fields :shift, :norm, :len will  be present as well as others depending on the style argument and the post_step_strategy.","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"If multiple replicas or spectral states are requested, then the relevant field names in the  DataFrame will have a suffix identifying the respective replica simulation, e.g. the shifts will be reported as shift_1, shift_2, ... ","category":"page"},{"location":"projectormontecarlo.html","page":"Projector Monte Carlo","title":"Projector Monte Carlo","text":"Many tools for analysing the time series data obtained from a  ProjectorMonteCarloProblem are contained in the Module StatsTools.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"n_replicas = 3\nreplica_strategy = AllOverlaps(n_replicas; operator=G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntarget_walkers = 100;\ntime_step = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"problem = ProjectorMonteCarloProblem(H;\n    style=IsDynamicSemistochastic(),\n    time_step,\n    last_step = steps_equilibrate + steps_measure,\n    target_walkers,\n    replica_strategy,\n)\nresult = solve(problem)\ndf = DataFrame(result);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $n_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.21312780967557582 ± 0.001691295837638514\n   G2(1) = 0.9169419982117607 ± 0.0007663719368913203\n   G2(2) = 0.9811291821904606 ± 0.0005055286646494846\n   G2(3) = 0.9907298295199815 ± 0.0010248192840301845\n   G2(4) = 0.9811291821904606 ± 0.0005055286646494846\n   G2(5) = 0.9169419982117607 ± 0.0007663719368913203\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $n_replicas replicas:\")\nfor i in 1:n_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -3.9639168638552147 ± 0.13918490711304873\n   Replica 2: -4.024654625503732 ± 0.12721763000292902\n   Replica 3: -4.052965893128377 ± 0.12938675993361046\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"target_walkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(fs\"|1 1 1 1 1 1⟩\"; u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    target_walkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [target_walkers];\n    label=\"target_walkers\", xlabel=\"step\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.step, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip710\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip710)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip711\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip710)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip712\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip712)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip712)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip712)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip712)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip712)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1260.84 2211.02,1260.84 \"/>\n<polyline clip-path=\"url(#clip712)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1002.94 2211.02,1002.94 \"/>\n<polyline clip-path=\"url(#clip712)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,745.036 2211.02,745.036 \"/>\n<polyline clip-path=\"url(#clip712)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,487.132 2211.02,487.132 \"/>\n<polyline clip-path=\"url(#clip712)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,229.228 2211.02,229.228 \"/>\n<polyline clip-path=\"url(#clip710)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip710)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip710)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip710)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip710)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip710)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip710)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip710)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip710)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip710)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip710)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip710)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip710)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip710)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip710)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip710)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip710)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip710)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip710)\" d=\"M1266.04 1391.71 L1266.04 1397.25 Q1263.56 1395.98 1260.88 1395.34 Q1258.21 1394.71 1255.34 1394.71 Q1250.98 1394.71 1248.79 1396.04 Q1246.62 1397.38 1246.62 1400.05 Q1246.62 1402.09 1248.18 1403.27 Q1249.74 1404.41 1254.45 1405.46 L1256.46 1405.91 Q1262.7 1407.25 1265.31 1409.7 Q1267.95 1412.12 1267.95 1416.48 Q1267.95 1421.44 1264 1424.34 Q1260.09 1427.23 1253.21 1427.23 Q1250.35 1427.23 1247.23 1426.66 Q1244.14 1426.12 1240.7 1425.01 L1240.7 1418.96 Q1243.95 1420.65 1247.1 1421.51 Q1250.25 1422.33 1253.34 1422.33 Q1257.48 1422.33 1259.7 1420.93 Q1261.93 1419.5 1261.93 1416.92 Q1261.93 1414.54 1260.31 1413.26 Q1258.72 1411.99 1253.27 1410.81 L1251.24 1410.33 Q1245.79 1409.19 1243.38 1406.83 Q1240.96 1404.45 1240.96 1400.31 Q1240.96 1395.28 1244.52 1392.54 Q1248.09 1389.8 1254.64 1389.8 Q1257.89 1389.8 1260.75 1390.28 Q1263.62 1390.76 1266.04 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip710)\" d=\"M1283.07 1380.54 L1283.07 1390.66 L1295.13 1390.66 L1295.13 1395.22 L1283.07 1395.22 L1283.07 1414.57 Q1283.07 1418.93 1284.24 1420.17 Q1285.45 1421.41 1289.11 1421.41 L1295.13 1421.41 L1295.13 1426.31 L1289.11 1426.31 Q1282.33 1426.31 1279.76 1423.8 Q1277.18 1421.25 1277.18 1414.57 L1277.18 1395.22 L1272.88 1395.22 L1272.88 1390.66 L1277.18 1390.66 L1277.18 1380.54 L1283.07 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip710)\" d=\"M1333.32 1407.02 L1333.32 1409.89 L1306.4 1409.89 Q1306.78 1415.94 1310.02 1419.12 Q1313.3 1422.27 1319.13 1422.27 Q1322.5 1422.27 1325.65 1421.44 Q1328.84 1420.61 1331.95 1418.96 L1331.95 1424.5 Q1328.8 1425.83 1325.49 1426.53 Q1322.18 1427.23 1318.78 1427.23 Q1310.25 1427.23 1305.25 1422.27 Q1300.29 1417.3 1300.29 1408.84 Q1300.29 1400.08 1305 1394.96 Q1309.74 1389.8 1317.76 1389.8 Q1324.95 1389.8 1329.12 1394.45 Q1333.32 1399.07 1333.32 1407.02 M1327.47 1405.3 Q1327.4 1400.5 1324.76 1397.63 Q1322.15 1394.77 1317.82 1394.77 Q1312.92 1394.77 1309.96 1397.54 Q1307.03 1400.31 1306.59 1405.34 L1327.47 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip710)\" d=\"M1348.6 1420.96 L1348.6 1439.87 L1342.71 1439.87 L1342.71 1390.66 L1348.6 1390.66 L1348.6 1396.07 Q1350.45 1392.89 1353.25 1391.36 Q1356.08 1389.8 1360 1389.8 Q1366.49 1389.8 1370.53 1394.96 Q1374.6 1400.12 1374.6 1408.52 Q1374.6 1416.92 1370.53 1422.08 Q1366.49 1427.23 1360 1427.23 Q1356.08 1427.23 1353.25 1425.71 Q1350.45 1424.15 1348.6 1420.96 M1368.53 1408.52 Q1368.53 1402.06 1365.85 1398.4 Q1363.21 1394.71 1358.56 1394.71 Q1353.92 1394.71 1351.24 1398.4 Q1348.6 1402.06 1348.6 1408.52 Q1348.6 1414.98 1351.24 1418.67 Q1353.92 1422.33 1358.56 1422.33 Q1363.21 1422.33 1365.85 1418.67 Q1368.53 1414.98 1368.53 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip710)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip710)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1260.84 423.181,1260.84 \"/>\n<polyline clip-path=\"url(#clip710)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1002.94 423.181,1002.94 \"/>\n<polyline clip-path=\"url(#clip710)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,745.036 423.181,745.036 \"/>\n<polyline clip-path=\"url(#clip710)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,487.132 423.181,487.132 \"/>\n<polyline clip-path=\"url(#clip710)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,229.228 423.181,229.228 \"/>\n<path clip-path=\"url(#clip710)\" d=\"M356.339 1246.64 Q352.728 1246.64 350.899 1250.21 Q349.094 1253.75 349.094 1260.88 Q349.094 1267.99 350.899 1271.55 Q352.728 1275.09 356.339 1275.09 Q359.973 1275.09 361.779 1271.55 Q363.608 1267.99 363.608 1260.88 Q363.608 1253.75 361.779 1250.21 Q359.973 1246.64 356.339 1246.64 M356.339 1242.94 Q362.149 1242.94 365.205 1247.55 Q368.284 1252.13 368.284 1260.88 Q368.284 1269.61 365.205 1274.21 Q362.149 1278.8 356.339 1278.8 Q350.529 1278.8 347.45 1274.21 Q344.395 1269.61 344.395 1260.88 Q344.395 1252.13 347.45 1247.55 Q350.529 1242.94 356.339 1242.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip710)\" d=\"M290.043 1016.29 L306.363 1016.29 L306.363 1020.22 L284.418 1020.22 L284.418 1016.29 Q287.08 1013.53 291.664 1008.9 Q296.27 1004.25 297.451 1002.91 Q299.696 1000.38 300.576 998.646 Q301.478 996.887 301.478 995.197 Q301.478 992.443 299.534 990.707 Q297.613 988.971 294.511 988.971 Q292.312 988.971 289.858 989.735 Q287.427 990.498 284.65 992.049 L284.65 987.327 Q287.474 986.193 289.927 985.614 Q292.381 985.035 294.418 985.035 Q299.789 985.035 302.983 987.721 Q306.177 990.406 306.177 994.897 Q306.177 997.026 305.367 998.947 Q304.58 1000.85 302.474 1003.44 Q301.895 1004.11 298.793 1007.33 Q295.691 1010.52 290.043 1016.29 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip710)\" d=\"M316.224 985.66 L334.58 985.66 L334.58 989.596 L320.506 989.596 L320.506 998.068 Q321.524 997.721 322.543 997.559 Q323.562 997.373 324.58 997.373 Q330.367 997.373 333.747 1000.54 Q337.126 1003.72 337.126 1009.13 Q337.126 1014.71 333.654 1017.81 Q330.182 1020.89 323.862 1020.89 Q321.687 1020.89 319.418 1020.52 Q317.173 1020.15 314.765 1019.41 L314.765 1014.71 Q316.849 1015.85 319.071 1016.4 Q321.293 1016.96 323.77 1016.96 Q327.774 1016.96 330.112 1014.85 Q332.45 1012.74 332.45 1009.13 Q332.45 1005.52 330.112 1003.41 Q327.774 1001.31 323.77 1001.31 Q321.895 1001.31 320.02 1001.73 Q318.168 1002.14 316.224 1003.02 L316.224 985.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip710)\" d=\"M356.339 988.739 Q352.728 988.739 350.899 992.304 Q349.094 995.846 349.094 1002.98 Q349.094 1010.08 350.899 1013.65 Q352.728 1017.19 356.339 1017.19 Q359.973 1017.19 361.779 1013.65 Q363.608 1010.08 363.608 1002.98 Q363.608 995.846 361.779 992.304 Q359.973 988.739 356.339 988.739 M356.339 985.035 Q362.149 985.035 365.205 989.642 Q368.284 994.225 368.284 1002.98 Q368.284 1011.7 365.205 1016.31 Q362.149 1020.89 356.339 1020.89 Q350.529 1020.89 347.45 1016.31 Q344.395 1011.7 344.395 1002.98 Q344.395 994.225 347.45 989.642 Q350.529 985.035 356.339 985.035 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip710)\" d=\"M286.062 727.756 L304.418 727.756 L304.418 731.691 L290.344 731.691 L290.344 740.164 Q291.363 739.816 292.381 739.654 Q293.4 739.469 294.418 739.469 Q300.205 739.469 303.585 742.64 Q306.964 745.812 306.964 751.228 Q306.964 756.807 303.492 759.909 Q300.02 762.987 293.701 762.987 Q291.525 762.987 289.256 762.617 Q287.011 762.247 284.603 761.506 L284.603 756.807 Q286.687 757.941 288.909 758.497 Q291.131 759.052 293.608 759.052 Q297.613 759.052 299.951 756.946 Q302.288 754.839 302.288 751.228 Q302.288 747.617 299.951 745.511 Q297.613 743.404 293.608 743.404 Q291.733 743.404 289.858 743.821 Q288.006 744.238 286.062 745.117 L286.062 727.756 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip710)\" d=\"M326.177 730.835 Q322.566 730.835 320.737 734.4 Q318.932 737.941 318.932 745.071 Q318.932 752.177 320.737 755.742 Q322.566 759.284 326.177 759.284 Q329.811 759.284 331.617 755.742 Q333.446 752.177 333.446 745.071 Q333.446 737.941 331.617 734.4 Q329.811 730.835 326.177 730.835 M326.177 727.131 Q331.987 727.131 335.043 731.738 Q338.122 736.321 338.122 745.071 Q338.122 753.798 335.043 758.404 Q331.987 762.987 326.177 762.987 Q320.367 762.987 317.288 758.404 Q314.233 753.798 314.233 745.071 Q314.233 736.321 317.288 731.738 Q320.367 727.131 326.177 727.131 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip710)\" d=\"M356.339 730.835 Q352.728 730.835 350.899 734.4 Q349.094 737.941 349.094 745.071 Q349.094 752.177 350.899 755.742 Q352.728 759.284 356.339 759.284 Q359.973 759.284 361.779 755.742 Q363.608 752.177 363.608 745.071 Q363.608 737.941 361.779 734.4 Q359.973 730.835 356.339 730.835 M356.339 727.131 Q362.149 727.131 365.205 731.738 Q368.284 736.321 368.284 745.071 Q368.284 753.798 365.205 758.404 Q362.149 762.987 356.339 762.987 Q350.529 762.987 347.45 758.404 Q344.395 753.798 344.395 745.071 Q344.395 736.321 347.45 731.738 Q350.529 727.131 356.339 727.131 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip710)\" d=\"M284.835 469.852 L307.057 469.852 L307.057 471.843 L294.511 504.412 L289.627 504.412 L301.432 473.787 L284.835 473.787 L284.835 469.852 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip710)\" d=\"M316.224 469.852 L334.58 469.852 L334.58 473.787 L320.506 473.787 L320.506 482.259 Q321.524 481.912 322.543 481.75 Q323.562 481.565 324.58 481.565 Q330.367 481.565 333.747 484.736 Q337.126 487.907 337.126 493.324 Q337.126 498.903 333.654 502.005 Q330.182 505.083 323.862 505.083 Q321.687 505.083 319.418 504.713 Q317.173 504.342 314.765 503.602 L314.765 498.903 Q316.849 500.037 319.071 500.592 Q321.293 501.148 323.77 501.148 Q327.774 501.148 330.112 499.042 Q332.45 496.935 332.45 493.324 Q332.45 489.713 330.112 487.606 Q327.774 485.5 323.77 485.5 Q321.895 485.5 320.02 485.917 Q318.168 486.333 316.224 487.213 L316.224 469.852 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip710)\" d=\"M356.339 472.931 Q352.728 472.931 350.899 476.495 Q349.094 480.037 349.094 487.167 Q349.094 494.273 350.899 497.838 Q352.728 501.38 356.339 501.38 Q359.973 501.38 361.779 497.838 Q363.608 494.273 363.608 487.167 Q363.608 480.037 361.779 476.495 Q359.973 472.931 356.339 472.931 M356.339 469.227 Q362.149 469.227 365.205 473.833 Q368.284 478.417 368.284 487.167 Q368.284 495.893 365.205 500.5 Q362.149 505.083 356.339 505.083 Q350.529 505.083 347.45 500.5 Q344.395 495.893 344.395 487.167 Q344.395 478.417 347.45 473.833 Q350.529 469.227 356.339 469.227 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip710)\" d=\"M256.664 242.572 L264.303 242.572 L264.303 216.207 L255.992 217.874 L255.992 213.614 L264.256 211.948 L268.932 211.948 L268.932 242.572 L276.571 242.572 L276.571 246.508 L256.664 246.508 L256.664 242.572 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip710)\" d=\"M296.015 215.026 Q292.404 215.026 290.576 218.591 Q288.77 222.133 288.77 229.262 Q288.77 236.369 290.576 239.934 Q292.404 243.475 296.015 243.475 Q299.65 243.475 301.455 239.934 Q303.284 236.369 303.284 229.262 Q303.284 222.133 301.455 218.591 Q299.65 215.026 296.015 215.026 M296.015 211.323 Q301.826 211.323 304.881 215.929 Q307.96 220.512 307.96 229.262 Q307.96 237.989 304.881 242.596 Q301.826 247.179 296.015 247.179 Q290.205 247.179 287.127 242.596 Q284.071 237.989 284.071 229.262 Q284.071 220.512 287.127 215.929 Q290.205 211.323 296.015 211.323 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip710)\" d=\"M326.177 215.026 Q322.566 215.026 320.737 218.591 Q318.932 222.133 318.932 229.262 Q318.932 236.369 320.737 239.934 Q322.566 243.475 326.177 243.475 Q329.811 243.475 331.617 239.934 Q333.446 236.369 333.446 229.262 Q333.446 222.133 331.617 218.591 Q329.811 215.026 326.177 215.026 M326.177 211.323 Q331.987 211.323 335.043 215.929 Q338.122 220.512 338.122 229.262 Q338.122 237.989 335.043 242.596 Q331.987 247.179 326.177 247.179 Q320.367 247.179 317.288 242.596 Q314.233 237.989 314.233 229.262 Q314.233 220.512 317.288 215.929 Q320.367 211.323 326.177 211.323 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip710)\" d=\"M356.339 215.026 Q352.728 215.026 350.899 218.591 Q349.094 222.133 349.094 229.262 Q349.094 236.369 350.899 239.934 Q352.728 243.475 356.339 243.475 Q359.973 243.475 361.779 239.934 Q363.608 236.369 363.608 229.262 Q363.608 222.133 361.779 218.591 Q359.973 215.026 356.339 215.026 M356.339 211.323 Q362.149 211.323 365.205 215.929 Q368.284 220.512 368.284 229.262 Q368.284 237.989 365.205 242.596 Q362.149 247.179 356.339 247.179 Q350.529 247.179 347.45 242.596 Q344.395 237.989 344.395 229.262 Q344.395 220.512 347.45 215.929 Q350.529 211.323 356.339 211.323 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip710)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip710)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip710)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip710)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip712)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,229.228 4017.76,229.228 \"/>\n<polyline clip-path=\"url(#clip712)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1250.45 456.554,1250.31 457.123,1250.09 457.691,1249.81 458.259,1249.47 458.828,1249.06 459.396,1248.58 459.964,1247.01 460.533,1246.42 461.101,1245.76 461.669,1245.02 462.238,1244.2 462.806,1243.29 463.375,1242.3 463.943,1241.21 464.511,1238.99 465.08,1237.68 465.648,1236.28 466.216,1234.76 466.785,1233.13 467.353,1231.36 467.921,1228.43 468.49,1225.35 469.058,1223.14 469.626,1219.74 470.195,1217.16 470.763,1213.41 471.331,1210.56 471.9,1206.46 472.468,1202.16 473.036,1198.65 473.605,1194.98 474.173,1191.1 474.741,1187.04 475.31,1180.71 475.878,1176.18 476.446,1169.38 477.015,1163.39 477.583,1158.39 478.152,1153.09 478.72,1146.57 479.288,1139.92 479.857,1132.82 480.425,1126.56 480.993,1120.15 481.562,1112.38 482.13,1105.53 482.698,1097.4 483.267,1087.99 483.835,1080.53 484.403,1070.75 484.972,1062.72 485.54,1053.48 486.108,1045.17 486.677,1033.6 487.245,1024.07 487.813,1014.27 488.382,1005.49 488.95,995.48 489.518,984.498 490.087,974.439 490.655,965.26 491.224,955.894 491.792,944.361 492.36,932.812 492.929,923.383 493.497,912.84 494.065,900.074 494.634,889.623 495.202,879.046 495.77,868.522 496.339,855.95 496.907,845.446 497.475,835.031 498.044,822.669 498.612,810.39 499.18,800.133 499.749,787.972 500.317,775.903 500.885,763.922 501.454,753.088 502.022,742.325 502.59,732.739 503.159,725.117 503.727,715.573 504.295,704.825 504.864,694.374 505.432,682.889 506.001,674.803 506.569,666.766 507.137,656.698 507.706,644.758 508.274,638.13 508.842,629.32 509.411,621.601 509.979,612.189 510.547,604.684 511.116,596.332 511.684,588.116 512.252,580.01 512.821,567.905 513.389,560.236 513.957,552.634 514.526,546.218 515.094,539.997 515.662,533.831 516.231,527.628 516.799,520.512 517.367,514.598 517.936,507.722 518.504,501.929 519.072,494.152 519.641,488.707 520.209,482.319 520.778,477.069 521.346,470.758 521.914,464.723 522.483,456.9 523.051,450.193 523.619,444.776 524.188,437.266 524.756,431.32 525.324,426.457 525.893,422.815 526.461,417.796 527.029,413.942 527.598,409.165 528.166,405.571 528.734,399.846 529.303,396.535 529.871,393.18 530.439,389.068 531.008,382.834 531.576,377.996 532.144,374.219 532.713,369.672 533.281,368.103 533.85,363.673 534.418,358.167 534.986,353.118 535.555,350.179 536.123,345.455 536.691,341.622 537.26,341.047 537.828,340.363 538.396,338.711 538.965,336.019 539.533,333.36 540.101,331.594 540.67,328.966 541.238,329.533 541.806,327.894 542.375,324.265 542.943,320.645 543.511,318.43 544.08,317.1 544.648,313.98 545.216,310.632 545.785,310.422 546.353,309.193 546.921,306.944 547.49,305.949 548.058,304.719 548.627,301.523 549.195,301.544 549.763,301.592 550.332,300.052 550.9,298.014 551.468,296.229 552.037,295.353 552.605,294.418 553.173,295.563 553.742,293.548 554.31,293.429 554.878,292.069 555.447,289.767 556.015,286.461 556.583,282.45 557.152,280.182 557.72,279.809 558.288,279.146 558.857,276.453 559.425,276.188 559.993,275.748 560.562,274.995 561.13,272.559 561.698,271.406 562.267,271.226 562.835,269.822 563.404,270.614 563.972,270.514 564.54,267.962 565.109,267.817 565.677,266.48 566.245,266.491 566.814,265.207 567.382,265.906 567.95,263.425 568.519,262.163 569.087,260.158 569.655,259.108 570.224,261.08 570.792,260.799 571.36,258.582 571.929,258.389 572.497,259.161 573.065,257.923 573.634,253.719 574.202,253.73 574.77,252.763 575.339,250.929 575.907,251.346 576.476,251.694 577.044,253.158 577.612,252.519 578.181,251.746 578.749,250.908 579.317,252.162 579.886,250.311 580.454,249.674 581.022,248.899 581.591,248.276 582.159,248.493 582.727,248.899 583.296,250.989 583.864,252.002 584.432,252.08 585.001,252.247 585.569,252.094 586.137,250.874 586.706,246.847 587.274,246.96 587.842,247.326 588.411,247.571 588.979,247.939 589.547,250.036 590.116,248.933 590.684,244.832 591.253,245.105 591.821,244.313 592.389,242.733 592.958,244.233 593.526,243.633 594.094,243.993 594.663,242.044 595.231,243.719 595.799,243.904 596.368,246.137 596.936,246.29 597.504,245.122 598.073,246.291 598.641,246.453 599.209,246.531 599.778,244.581 600.346,244.614 600.914,244.724 601.483,241.931 602.051,244.088 602.619,245.21 603.188,246.159 603.756,246.004 604.325,246.086 604.893,245.999 605.461,244.917 606.03,246.049 606.598,245.866 607.166,242.764 607.735,242.739 608.303,242.691 608.871,239.686 609.44,238.867 610.008,237.347 610.576,237.838 611.145,237.339 611.713,238.62 612.281,237.963 612.85,237.167 613.418,238.538 613.986,237.704 614.555,236.024 615.123,235.517 615.691,236.087 616.26,235.278 616.828,235.649 617.396,236.098 617.965,236.457 618.533,236.886 619.102,237.163 619.67,236.514 620.238,235.776 620.807,234.094 621.375,234.599 621.943,234.921 622.512,234.571 623.08,236.121 623.648,236.591 624.217,235.817 624.785,237.257 625.353,238.627 625.922,238.997 626.49,237.382 627.058,236.688 627.627,235.028 628.195,237.636 628.763,238.897 629.332,238.126 629.9,238.444 630.468,238.676 631.037,238.084 631.605,238.264 632.173,236.531 632.742,238.792 633.31,236.759 633.879,237.277 634.447,241.636 635.015,239.472 635.584,235.332 636.152,235.808 636.72,236.082 637.289,237.47 637.857,237.69 638.425,234.61 638.994,233.941 639.562,234.177 640.13,234.346 640.699,234.875 641.267,234.207 641.835,234.57 642.404,234.149 642.972,235.613 643.54,234.655 644.109,237.073 644.677,234.31 645.245,234.502 645.814,236.058 646.382,236.253 646.951,235.514 647.519,237.771 648.087,239.993 648.656,239.977 649.224,240.051 649.792,240.752 650.361,237.527 650.929,238.715 651.497,237.796 652.066,235.901 652.634,234.985 653.202,237.133 653.771,238.193 654.339,238.313 654.907,238.324 655.476,238.263 656.044,238.224 656.612,237.287 657.181,234.098 657.749,234.245 658.317,233.237 658.886,233.635 659.454,231.909 660.022,231.34 660.591,230.953 661.159,230.437 661.728,234.022 662.296,233.105 662.864,234.236 663.433,234.468 664.001,234.725 664.569,234.015 665.138,233.076 665.706,232.305 666.274,232.628 666.843,231.961 667.411,233.493 667.979,235.711 668.548,233.684 669.116,234.91 669.684,236.2 670.253,236.247 670.821,240.485 671.389,239.189 671.958,239.132 672.526,237.771 673.094,237.571 673.663,236.728 674.231,237.601 674.799,238.708 675.368,238.342 675.936,237.065 676.505,235.821 677.073,237.059 677.641,235.898 678.21,235.91 678.778,237.046 679.346,237.684 679.915,234.595 680.483,236.606 681.051,237.603 681.62,238.474 682.188,239.315 682.756,237.826 683.325,237.269 683.893,238.013 684.461,238.812 685.03,236.649 685.598,234.431 686.166,233.21 686.735,232.12 687.303,233.175 687.871,231.339 688.44,234.7 689.008,235.727 689.577,234.45 690.145,236.131 690.713,235.898 691.282,235.77 691.85,233.538 692.418,233.43 692.987,234.417 693.555,234.484 694.123,230.336 694.692,232.57 695.26,233.833 695.828,233.601 696.397,232.396 696.965,232.535 697.533,233.607 698.102,232.526 698.67,233.636 699.238,233.699 699.807,236.888 700.375,233.529 700.943,233.588 701.512,234.623 702.08,234.432 702.648,236.41 703.217,235.23 703.785,233.964 704.354,232.869 704.922,231.795 705.49,230.925 706.059,230.931 706.627,231.085 707.195,232.472 707.764,233.529 708.332,233.335 708.9,232.449 709.469,232.51 710.037,232.286 710.605,234.477 711.174,233.598 711.742,232.506 712.31,231.396 712.879,232.468 713.447,231.394 714.015,232.497 714.584,231.207 715.152,231.21 715.72,232.3 716.289,231.187 716.857,231.242 717.425,234.423 717.994,233.155 718.562,234.867 719.131,234.736 719.699,233.666 720.267,232.702 720.836,231.341 721.404,230.402 721.972,229.605 722.541,229.558 723.109,227.918 723.677,229.128 724.246,229.591 724.814,229.734 725.382,229.981 725.951,230.176 726.519,231.184 727.087,230.1 727.656,229.124 728.224,230.103 728.792,229.014 729.361,228.203 729.929,229.532 730.497,226.663 731.066,226.055 731.634,227.422 732.203,228.777 732.771,228.968 733.339,231.12 733.908,231.122 734.476,232.174 735.044,232.169 735.613,233.189 736.181,232.271 736.749,232.157 737.318,231.035 737.886,231.307 738.454,232.468 739.023,231.43 739.591,231.565 740.159,233.564 740.728,232.533 741.296,234.685 741.864,232.509 742.433,232.445 743.001,232.403 743.569,230.235 744.138,230.235 744.706,228.22 745.274,229.526 745.843,229.814 746.411,228.737 746.98,227.963 747.548,227.252 748.116,227.605 748.685,226.883 749.253,226.34 749.821,227.804 750.39,227.815 750.958,227.032 751.526,228.545 752.095,230.735 752.663,230.612 753.231,229.817 753.8,227.783 754.368,227.945 754.936,228.15 755.505,228.491 756.073,230.676 756.641,232.792 757.21,233.971 757.778,231.946 758.346,233.035 758.915,233.035 759.483,234.231 760.052,233.088 760.62,234.242 761.188,230.994 761.757,231.214 762.325,230.458 762.893,231.642 763.462,226.485 764.03,225.948 764.598,225.626 765.167,226.166 765.735,225.58 766.303,225.083 766.872,226.596 767.44,225.871 768.008,227.45 768.577,225.797 769.145,227.24 769.713,227.694 770.282,228.165 770.85,229.501 771.418,229.906 771.987,228.064 772.555,229.563 773.123,230.788 773.692,231.905 774.26,228.904 774.829,229.096 775.397,228.305 775.965,229.528 776.534,229.701 777.102,229.763 777.67,229.225 778.239,227.588 778.807,229.907 779.375,231.308 779.944,234.564 780.512,235.278 781.08,235.228 781.649,235.843 782.217,238.7 782.785,238.158 783.354,237.61 783.922,237.308 784.49,237.929 785.059,236.542 785.627,236.247 786.195,236.942 786.764,237.612 787.332,236.85 787.9,239.173 788.469,239.505 789.037,239.781 789.606,239.111 790.174,238.472 790.742,237.731 791.311,238.058 791.879,236.397 792.447,235.007 793.016,235.787 793.584,234.391 794.152,234.988 794.721,234.204 795.289,231.852 795.857,230.622 796.426,230.413 796.994,231.418 797.562,229.159 798.131,231.089 798.699,229.035 799.267,229.99 799.836,229.809 800.404,231.011 800.972,230.908 801.541,230.913 802.109,230.832 802.678,230.783 803.246,229.57 803.814,231.647 804.383,232.464 804.951,230.213 805.519,231.27 806.088,230.227 806.656,231.277 807.224,232.191 807.793,231.792 808.361,229.464 808.929,229.427 809.498,229.524 810.066,228.428 810.634,229.746 811.203,229.908 811.771,231.158 812.339,231.112 812.908,231.038 813.476,231.925 814.044,230.951 814.613,229.752 815.181,229.795 815.749,228.734 816.318,229.955 816.886,228.92 817.455,228.933 818.023,227.884 818.591,227.784 819.16,228.218 819.728,228.216 820.296,229.306 820.865,230.303 821.433,231.275 822.001,232.038 822.57,231.669 823.138,231.641 823.706,230.475 824.275,231.31 824.843,232.311 825.411,231.985 825.98,231.67 826.548,232.334 827.116,232.285 827.685,230.999 828.253,230.917 828.821,230.583 829.39,231.606 829.958,230.29 830.526,230.154 831.095,229.022 831.663,228.976 832.232,227.909 832.8,227.944 833.368,228.183 833.937,230.136 834.505,230.132 835.073,229.061 835.642,231.204 836.21,230.053 836.778,230.06 837.347,228.103 837.915,229.244 838.483,228.266 839.052,228.257 839.62,226.174 840.188,225.283 840.757,225.377 841.325,225.534 841.893,227.985 842.462,227.988 843.03,229.161 843.598,229.179 844.167,230.069 844.735,232.099 845.304,233.979 845.872,235.722 846.44,235.285 847.009,231.798 847.577,231.836 848.145,233.678 848.714,234.428 849.282,236.07 849.85,234.798 850.419,233.411 850.987,235.238 851.555,234.721 852.124,233.375 852.692,233.075 853.26,232.838 853.829,231.665 854.397,227.296 854.965,226.286 855.534,226.56 856.102,227.652 856.67,228.921 857.239,229.691 857.807,230.805 858.375,230.781 858.944,231.62 859.512,232.362 860.081,232.231 860.649,231.503 861.217,233.155 861.786,232.953 862.354,231.641 862.922,232.526 863.491,232.001 864.059,231.761 864.627,232.517 865.196,229.011 865.764,229.055 866.332,228.732 866.901,229.713 867.469,230.427 868.037,230.166 868.606,227.83 869.174,228.796 869.742,228.806 870.311,228.778 870.879,226.503 871.447,224.506 872.016,224.865 872.584,225.023 873.152,225.557 873.721,226.692 874.289,225.688 874.858,225.878 875.426,227.16 875.994,225.191 876.563,225.326 877.131,225.476 877.699,223.794 878.268,223.194 878.836,224.693 879.404,223.984 879.973,224.281 880.541,225.756 881.109,226.252 881.678,227.476 882.246,226.507 882.814,227.78 883.383,229.799 883.951,231.023 884.519,230.131 885.088,227.86 885.656,230.111 886.224,227.804 886.793,226.999 887.361,226.125 887.93,225.632 888.498,225.962 889.066,227.389 889.635,227.709 890.203,227.787 890.771,226.953 891.34,227.303 891.908,227.415 892.476,226.579 893.045,224.859 893.613,226.491 894.181,225.772 894.75,226.859 895.318,224.982 895.886,225.397 896.455,225.005 897.023,223.355 897.591,225.092 898.16,224.749 898.728,222.27 899.296,222.742 899.865,223.504 900.433,223.254 901.001,224.641 901.57,223.058 902.138,225.586 902.707,224.044 903.275,224.451 903.843,224.024 904.412,222.751 904.98,223.344 905.548,223.803 906.117,225.417 906.685,228.037 907.253,228.591 907.822,228.856 908.39,229 908.958,230.573 909.527,229.756 910.095,230.92 910.663,230.758 911.232,232.762 911.8,234.692 912.368,233.393 912.937,231.383 913.505,232.511 914.073,232.591 914.642,233.761 915.21,235.643 915.779,233.345 916.347,233.167 916.915,233.99 917.484,233.78 918.052,237.748 918.62,240.515 919.189,239.932 919.757,239.148 920.325,238.525 920.894,234.834 921.462,236.6 922.03,236.252 922.599,235.614 923.167,234.022 923.735,232.779 924.304,232.745 924.872,232.722 925.44,232.559 926.009,232.298 926.577,233.249 927.145,232.979 927.714,233.749 928.282,232.441 928.85,231.042 929.419,230.097 929.987,229.126 930.556,228.053 931.124,228.229 931.692,228.412 932.261,228.388 932.829,228.554 933.397,224.438 933.966,224.813 934.534,226.192 935.102,226.429 935.671,226.638 936.239,226.794 936.807,224.211 937.376,226.636 937.944,227.025 938.512,225.087 939.081,226.384 939.649,226.754 940.217,229.949 940.786,230.153 941.354,234.341 941.922,233.169 942.491,235.929 943.059,235.739 943.627,236.388 944.196,237.954 944.764,236.306 945.333,236.618 945.901,236.161 946.469,235.789 947.038,237.345 947.606,236.701 948.174,238.248 948.743,238.506 949.311,236.633 949.879,233.062 950.448,231.634 951.016,230.492 951.584,231.36 952.153,231.085 952.721,232.1 953.289,233.032 953.858,232.739 954.426,232.296 954.994,231.042 955.563,229.89 956.131,232.717 956.699,232.552 957.268,234.231 957.836,235.058 958.405,234.356 958.973,234.692 959.541,233.216 960.11,232.734 960.678,233.183 961.246,234.008 961.815,230.566 962.383,230.241 962.951,228.209 963.52,225.895 964.088,224.115 964.656,224.288 965.225,226.556 965.793,225.703 966.361,227.054 966.93,226.054 967.498,225.122 968.066,224.323 968.635,221.531 969.203,221.018 969.771,222.633 970.34,222.912 970.908,221.204 971.476,222.549 972.045,223.257 972.613,224.758 973.182,223.269 973.75,223.842 974.318,224.331 974.887,226.782 975.455,225.905 976.023,227.175 976.592,230.436 977.16,232.465 977.728,232.461 978.297,230.894 978.865,229.835 979.433,229.848 980.002,230.79 980.57,230.676 981.138,229.337 981.707,229.279 982.275,228.183 982.843,229.186 983.412,230.262 983.98,230.038 984.548,230.275 985.117,231.149 985.685,229.973 986.253,230.89 986.822,231.76 987.39,231.555 987.959,232.544 988.527,234.524 989.095,229.958 989.664,228.888 990.232,228.95 990.8,229.822 991.369,228.44 991.937,227.451 992.505,227.684 993.074,228.672 993.642,229.62 994.21,228.388 994.779,227.341 995.347,225.414 995.915,225.682 996.484,225.03 997.052,225.54 997.62,224.942 998.189,224.342 998.757,225.572 999.325,225.844 999.894,225.328 1000.46,224.7 1001.03,224.835 1001.6,227.186 1002.17,228.439 1002.74,229.679 1003.3,230.786 1003.87,231.704 1004.44,230.497 1005.01,230.414 1005.58,229.316 1006.15,228.29 1006.71,230.435 1007.28,230.539 1007.85,227.702 1008.42,225.754 1008.99,224.029 1009.56,225.207 1010.12,225.519 1010.69,226.688 1011.26,228.953 1011.83,224.888 1012.4,225.218 1012.97,224.448 1013.53,225.928 1014.1,225.369 1014.67,226.845 1015.24,228.285 1015.81,229.584 1016.38,229.742 1016.94,226.646 1017.51,226.872 1018.08,230.25 1018.65,232.277 1019.22,229.903 1019.79,229.911 1020.35,232.103 1020.92,232.226 1021.49,234.358 1022.06,234.01 1022.63,233.57 1023.2,230.604 1023.76,227.494 1024.33,227.645 1024.9,223.481 1025.47,226.072 1026.04,228.497 1026.61,228.57 1027.17,228.582 1027.74,228.661 1028.31,229.703 1028.88,229.689 1029.45,230.501 1030.02,230.629 1030.58,230.584 1031.15,230.517 1031.72,228.414 1032.29,228.719 1032.86,228.828 1033.43,227.87 1033.99,227.971 1034.56,228.197 1035.13,230.592 1035.7,224.562 1036.27,223.082 1036.84,224.592 1037.4,222.989 1037.97,223.468 1038.54,223.986 1039.11,228.602 1039.68,228.565 1040.25,228.763 1040.81,229.909 1041.38,232.078 1041.95,231.997 1042.52,231.916 1043.09,229.692 1043.66,228.773 1044.22,228.916 1044.79,229.019 1045.36,227.128 1045.93,226.514 1046.5,226.712 1047.07,228.118 1047.63,230.338 1048.2,231.509 1048.77,231.587 1049.34,230.596 1049.91,232.705 1050.48,233.505 1051.05,233.518 1051.61,233.451 1052.18,234.25 1052.75,234.975 1053.32,235.901 1053.89,235.622 1054.46,233.159 1055.02,230.828 1055.59,228.705 1056.16,228.489 1056.73,228.668 1057.3,227.867 1057.87,229.12 1058.43,229.062 1059,229.257 1059.57,229.441 1060.14,230.535 1060.71,232.537 1061.28,231.975 1061.84,231.659 1062.41,231.401 1062.98,229.29 1063.55,229.188 1064.12,229.389 1064.69,228.328 1065.25,228.202 1065.82,229.451 1066.39,230.426 1066.96,229.442 1067.53,230.712 1068.1,230.846 1068.66,227.614 1069.23,227.845 1069.8,230.226 1070.37,230.195 1070.94,230.152 1071.51,228.125 1072.07,227.323 1072.64,225.531 1073.21,225.869 1073.78,227.327 1074.35,226.739 1074.92,225.865 1075.48,226.205 1076.05,227.443 1076.62,225.704 1077.19,226.144 1077.76,227.63 1078.33,228.808 1078.89,229.13 1079.46,229.189 1080.03,229.251 1080.6,227.348 1081.17,228.815 1081.74,227.842 1082.3,228.125 1082.87,228.241 1083.44,228.315 1084.01,229.661 1084.58,228.596 1085.15,230.092 1085.71,230.371 1086.28,230.474 1086.85,230.532 1087.42,230.577 1087.99,233.619 1088.56,235.559 1089.12,234.153 1089.69,233.627 1090.26,233.291 1090.83,232.229 1091.4,231.215 1091.97,233.398 1092.53,230.097 1093.1,231.084 1093.67,232.281 1094.24,233.225 1094.81,233.982 1095.38,232.482 1095.94,231.252 1096.51,233.008 1097.08,230.674 1097.65,229.381 1098.22,230.543 1098.79,232.502 1099.35,233.6 1099.92,234.538 1100.49,235.11 1101.06,234.701 1101.63,234.425 1102.2,234.932 1102.76,235.55 1103.33,232.114 1103.9,230.635 1104.47,230.354 1105.04,229.339 1105.61,229.01 1106.17,230.112 1106.74,231.281 1107.31,231.007 1107.88,230.903 1108.45,229.736 1109.02,230.778 1109.58,230.393 1110.15,228.271 1110.72,231.393 1111.29,233.147 1111.86,232.85 1112.43,233.531 1112.99,233.319 1113.56,231.696 1114.13,232.481 1114.7,231.347 1115.27,231.163 1115.84,231.901 1116.4,232.696 1116.97,231.618 1117.54,232.13 1118.11,230.841 1118.68,229.582 1119.25,230.511 1119.81,229.381 1120.38,229.301 1120.95,229.382 1121.52,227.197 1122.09,227.236 1122.66,226.373 1123.23,226.361 1123.79,225.307 1124.36,225.105 1124.93,227.475 1125.5,225.514 1126.07,221.797 1126.64,221.141 1127.2,221.624 1127.77,221.187 1128.34,223.964 1128.91,227.413 1129.48,226.602 1130.05,225.844 1130.61,226.219 1131.18,227.363 1131.75,225.333 1132.32,227.848 1132.89,229.913 1133.46,232.036 1134.02,232.916 1134.59,229.659 1135.16,230.579 1135.73,228.436 1136.3,228.353 1136.87,228.519 1137.43,227.572 1138,225.636 1138.57,225.902 1139.14,227.217 1139.71,227.277 1140.28,228.262 1140.84,228.19 1141.41,229.309 1141.98,229.981 1142.55,230.045 1143.12,228.897 1143.69,227.93 1144.25,223.953 1144.82,224.41 1145.39,226.922 1145.96,227.382 1146.53,227.302 1147.1,228.443 1147.66,227.634 1148.23,225.788 1148.8,226.004 1149.37,225.356 1149.94,224.584 1150.51,223.813 1151.07,224.313 1151.64,224.79 1152.21,224.275 1152.78,224.77 1153.35,225.13 1153.92,226.588 1154.48,228.859 1155.05,227.791 1155.62,227.88 1156.19,230.313 1156.76,229.169 1157.33,228.584 1157.89,228.847 1158.46,228.004 1159.03,228.124 1159.6,227.34 1160.17,228.394 1160.74,227.627 1161.3,226.056 1161.87,225.319 1162.44,225.786 1163.01,228.292 1163.58,228.46 1164.15,228.663 1164.71,227.695 1165.28,229.125 1165.85,229.206 1166.42,228.246 1166.99,228.097 1167.56,228.116 1168.12,228.204 1168.69,228.392 1169.26,230.838 1169.83,227.922 1170.4,229.244 1170.97,229.257 1171.53,230.25 1172.1,232.265 1172.67,233.223 1173.24,235.055 1173.81,234.647 1174.38,235.444 1174.94,236.046 1175.51,236.881 1176.08,235.504 1176.65,235.305 1177.22,234.17 1177.79,233.9 1178.35,233.644 1178.92,233.261 1179.49,231.722 1180.06,234.619 1180.63,233.067 1181.2,232.884 1181.76,234.624 1182.33,234.094 1182.9,233.532 1183.47,231.172 1184.04,230.041 1184.61,229.091 1185.17,228.957 1185.74,228.124 1186.31,229.198 1186.88,229.3 1187.45,231.458 1188.02,229.392 1188.58,229.413 1189.15,232.665 1189.72,235.559 1190.29,234.92 1190.86,234.109 1191.43,231.794 1192,230.597 1192.56,232.419 1193.13,233.397 1193.7,234.237 1194.27,233.781 1194.84,231.49 1195.41,232.391 1195.97,231.084 1196.54,230.894 1197.11,228.712 1197.68,229.744 1198.25,229.679 1198.82,229.627 1199.38,230.65 1199.95,230.499 1200.52,229.321 1201.09,227.241 1201.66,227.218 1202.23,227.037 1202.79,227.144 1203.36,229.296 1203.93,231.369 1204.5,231.239 1205.07,233.067 1205.64,235.739 1206.2,235.276 1206.77,235.882 1207.34,234.21 1207.91,232.66 1208.48,228.992 1209.05,231.068 1209.61,230.952 1210.18,229.785 1210.75,230.728 1211.32,229.517 1211.89,227.393 1212.46,227.579 1213.02,227.507 1213.59,226.521 1214.16,228.647 1214.73,229.425 1215.3,229.547 1215.87,228.489 1216.43,227.343 1217,227.379 1217.57,227.471 1218.14,226.461 1218.71,225.499 1219.28,226.686 1219.84,226.83 1220.41,228.031 1220.98,230.028 1221.55,228.779 1222.12,231.564 1222.69,231.502 1223.25,232.457 1223.82,232.255 1224.39,232.006 1224.96,231.648 1225.53,231.381 1226.1,232.199 1226.66,230.829 1227.23,229.497 1227.8,229.409 1228.37,229.356 1228.94,231.337 1229.51,228.841 1230.07,228.59 1230.64,227.514 1231.21,227.482 1231.78,228.557 1232.35,227.309 1232.92,227.409 1233.48,227.405 1234.05,227.362 1234.62,227.122 1235.19,228.255 1235.76,228.451 1236.33,229.488 1236.89,228.319 1237.46,227.441 1238.03,226.49 1238.6,223.039 1239.17,222.266 1239.74,220.885 1240.3,220.331 1240.87,221.864 1241.44,225.42 1242.01,225.629 1242.58,226.965 1243.15,227.094 1243.71,224.36 1244.28,227.72 1244.85,228.909 1245.42,227.065 1245.99,227.117 1246.56,227.293 1247.12,228.579 1247.69,226.541 1248.26,226.598 1248.83,226.97 1249.4,227.1 1249.97,227.307 1250.53,227.552 1251.1,228.53 1251.67,229.515 1252.24,229.437 1252.81,229.333 1253.38,230.38 1253.94,229.527 1254.51,231.587 1255.08,231.522 1255.65,231.38 1256.22,231.422 1256.79,231.222 1257.35,230.042 1257.92,229.921 1258.49,229.08 1259.06,231.26 1259.63,230.005 1260.2,230.037 1260.76,229.338 1261.33,228.383 1261.9,229.532 1262.47,228.356 1263.04,230.543 1263.61,231.557 1264.18,230.162 1264.74,230.123 1265.31,229.094 1265.88,228.159 1266.45,229.457 1267.02,228.534 1267.59,228.524 1268.15,228.509 1268.72,229.597 1269.29,228.692 1269.86,229.783 1270.43,230.989 1271,231.905 1271.56,230.547 1272.13,227.581 1272.7,228.852 1273.27,228.991 1273.84,227.934 1274.41,229.178 1274.97,228.321 1275.54,228.361 1276.11,228.318 1276.68,230.301 1277.25,228.176 1277.82,228.133 1278.38,227.169 1278.95,227.24 1279.52,225.335 1280.09,226.645 1280.66,226.873 1281.23,228.164 1281.79,227.197 1282.36,227.374 1282.93,227.393 1283.5,228.504 1284.07,229.515 1284.64,229.539 1285.2,230.437 1285.77,229.537 1286.34,229.636 1286.91,230.581 1287.48,232.622 1288.05,232.377 1288.61,232.312 1289.18,233.034 1289.75,233.837 1290.32,232.577 1290.89,232.389 1291.46,232.227 1292.02,230.972 1292.59,230.866 1293.16,230.802 1293.73,231.621 1294.3,231.686 1294.87,231.635 1295.43,231.34 1296,231.292 1296.57,230.998 1297.14,227.828 1297.71,228.945 1298.28,226.796 1298.84,228.074 1299.41,227.227 1299.98,225.405 1300.55,226.819 1301.12,228.04 1301.69,224.945 1302.25,228.259 1302.82,228.501 1303.39,230.592 1303.96,231.676 1304.53,230.413 1305.1,231.181 1305.66,232.352 1306.23,234.163 1306.8,231.627 1307.37,230.482 1307.94,232.36 1308.51,232.142 1309.07,232.109 1309.64,230.745 1310.21,232.626 1310.78,230.412 1311.35,231.444 1311.92,232.255 1312.48,231.796 1313.05,231.544 1313.62,230.988 1314.19,228.832 1314.76,229.994 1315.33,228.981 1315.89,230 1316.46,229.82 1317.03,229.909 1317.6,228.848 1318.17,228.803 1318.74,226.767 1319.3,226.868 1319.87,226.897 1320.44,227.971 1321.01,227.882 1321.58,228.884 1322.15,230.014 1322.71,229.938 1323.28,228.745 1323.85,227.682 1324.42,227.741 1324.99,228.67 1325.56,229.763 1326.12,228.417 1326.69,227.513 1327.26,227.502 1327.83,228.714 1328.4,229.81 1328.97,230.39 1329.53,229.112 1330.1,230.193 1330.67,232.103 1331.24,231.724 1331.81,231.486 1332.38,231.329 1332.94,231.374 1333.51,230.204 1334.08,231.261 1334.65,231.01 1335.22,229.938 1335.79,229.696 1336.36,231.795 1336.92,231.703 1337.49,232.568 1338.06,232.216 1338.63,231.026 1339.2,229.724 1339.77,229.596 1340.33,228.488 1340.9,228.65 1341.47,228.688 1342.04,227.71 1342.61,227.718 1343.18,225.596 1343.74,224.828 1344.31,224.029 1344.88,223.47 1345.45,224.867 1346.02,226.07 1346.59,227.452 1347.15,227.349 1347.72,227.381 1348.29,227.524 1348.86,227.805 1349.43,228.001 1350,227.856 1350.56,231.058 1351.13,231.833 1351.7,229.576 1352.27,229.717 1352.84,229.779 1353.41,228.626 1353.97,228.721 1354.54,229.851 1355.11,226.765 1355.68,227.783 1356.25,227.886 1356.82,227.903 1357.38,227.835 1357.95,228.802 1358.52,228.679 1359.09,226.533 1359.66,225.595 1360.23,226.831 1360.79,226.901 1361.36,225.972 1361.93,225.372 1362.5,225.565 1363.07,224.809 1363.64,225.386 1364.2,225.677 1364.77,226.803 1365.34,228.928 1365.91,230.124 1366.48,230.078 1367.05,232.139 1367.61,232.034 1368.18,230.995 1368.75,229.735 1369.32,228.702 1369.89,228.68 1370.46,229.576 1371.02,229.645 1371.59,227.566 1372.16,227.913 1372.73,228.169 1373.3,228.384 1373.87,229.592 1374.43,230.66 1375,230.546 1375.57,231.456 1376.14,231.255 1376.71,230.071 1377.28,231.139 1377.84,229.98 1378.41,229.55 1378.98,229.298 1379.55,229.094 1380.12,230.113 1380.69,230.234 1381.25,230.352 1381.82,229.071 1382.39,228.979 1382.96,228.035 1383.53,228.986 1384.1,229.014 1384.66,229.296 1385.23,228.304 1385.8,228.287 1386.37,230.323 1386.94,231.568 1387.51,231.547 1388.07,232.387 1388.64,232.106 1389.21,229.787 1389.78,229.495 1390.35,233.523 1390.92,232.306 1391.48,231.929 1392.05,231.602 1392.62,232.26 1393.19,232.03 1393.76,231.736 1394.33,232.143 1394.89,231.692 1395.46,231.167 1396.03,230.886 1396.6,230.561 1397.17,230.395 1397.74,231.315 1398.3,232.102 1398.87,228.653 1399.44,228.784 1400.01,227.708 1400.58,225.808 1401.15,225.822 1401.71,226.143 1402.28,225.336 1402.85,225.714 1403.42,226.016 1403.99,227.335 1404.56,227.479 1405.13,228.811 1405.69,228.831 1406.26,228.815 1406.83,229.795 1407.4,231.87 1407.97,233.516 1408.54,230.075 1409.1,232.169 1409.67,230.792 1410.24,231.589 1410.81,231.346 1411.38,229.014 1411.95,228.987 1412.51,229.878 1413.08,230.736 1413.65,229.504 1414.22,228.361 1414.79,229.504 1415.36,230.507 1415.92,230.387 1416.49,229.209 1417.06,229.238 1417.63,229.121 1418.2,229.104 1418.77,228.794 1419.33,227.878 1419.9,229.035 1420.47,229.155 1421.04,231.13 1421.61,228.975 1422.18,230.065 1422.74,229.989 1423.31,227.827 1423.88,228.655 1424.45,229.464 1425.02,228.26 1425.59,226.165 1426.15,226.518 1426.72,226.844 1427.29,227.129 1427.86,227.193 1428.43,226.357 1429,228.455 1429.56,227.602 1430.13,226.693 1430.7,228.09 1431.27,229.19 1431.84,227.329 1432.41,227.55 1432.97,227.514 1433.54,225.344 1434.11,223.592 1434.68,224.857 1435.25,223.141 1435.82,222.646 1436.38,221.963 1436.95,224.665 1437.52,228.058 1438.09,229.223 1438.66,229.088 1439.23,231.159 1439.79,232.15 1440.36,232.055 1440.93,231.763 1441.5,233.709 1442.07,235.269 1442.64,233.983 1443.2,233.431 1443.77,231.981 1444.34,231.85 1444.91,232.7 1445.48,231.403 1446.05,230.412 1446.61,230.478 1447.18,231.316 1447.75,233.138 1448.32,231.844 1448.89,230.726 1449.46,231.637 1450.02,232.368 1450.59,230.977 1451.16,229.762 1451.73,229.582 1452.3,230.68 1452.87,229.667 1453.43,229.571 1454,226.474 1454.57,223.301 1455.14,224.643 1455.71,225.199 1456.28,226.623 1456.84,227.854 1457.41,229.119 1457.98,228.058 1458.55,227.406 1459.12,228.435 1459.69,227.431 1460.25,229.735 1460.82,228.613 1461.39,230.719 1461.96,230.672 1462.53,230.622 1463.1,230.557 1463.66,230.387 1464.23,229.172 1464.8,229.207 1465.37,229.225 1465.94,228.364 1466.51,229.435 1467.07,230.363 1467.64,231.335 1468.21,228.803 1468.78,227.88 1469.35,225.889 1469.92,224.358 1470.48,224.945 1471.05,225.229 1471.62,226.518 1472.19,225.613 1472.76,226.867 1473.33,226.943 1473.89,224.929 1474.46,222.205 1475.03,221.65 1475.6,223.197 1476.17,223.601 1476.74,224.156 1477.31,224.594 1477.87,225.844 1478.44,225.422 1479.01,223.639 1479.58,225.051 1480.15,224.511 1480.72,225.946 1481.28,229.198 1481.85,230.205 1482.42,231.333 1482.99,233.431 1483.56,234.116 1484.13,233.893 1484.69,232.848 1485.26,231.713 1485.83,230.421 1486.4,232.456 1486.97,233.289 1487.54,234.086 1488.1,232.701 1488.67,233.107 1489.24,232.704 1489.81,231.511 1490.38,231.331 1490.95,232.235 1491.51,229.936 1492.08,229.87 1492.65,226.718 1493.22,228.08 1493.79,229.412 1494.36,227.25 1494.92,226.397 1495.49,226.709 1496.06,225.922 1496.63,226.402 1497.2,226.776 1497.77,224.922 1498.33,225.105 1498.9,226.611 1499.47,228.848 1500.04,228.986 1500.61,232.076 1501.18,231.932 1501.74,230.891 1502.31,228.661 1502.88,228.718 1503.45,227.933 1504.02,229.127 1504.59,229.179 1505.15,230.276 1505.72,231.367 1506.29,231.533 1506.86,232.313 1507.43,232.206 1508,229.975 1508.56,229.746 1509.13,227.532 1509.7,227.675 1510.27,225.984 1510.84,226.054 1511.41,226.536 1511.97,227.879 1512.54,229.071 1513.11,231.098 1513.68,230.032 1514.25,227.969 1514.82,227.125 1515.38,227.245 1515.95,223.522 1516.52,226.012 1517.09,228.593 1517.66,226.695 1518.23,225.861 1518.79,227.219 1519.36,226.585 1519.93,226.793 1520.5,228.003 1521.07,227.064 1521.64,227.201 1522.2,225.559 1522.77,225.033 1523.34,228.533 1523.91,228.584 1524.48,228.901 1525.05,228.962 1525.61,228.915 1526.18,227.941 1526.75,227.15 1527.32,229.487 1527.89,230.424 1528.46,232.602 1529.02,231.354 1529.59,231.337 1530.16,232.565 1530.73,232.189 1531.3,233.094 1531.87,233.974 1532.43,232.566 1533,235.462 1533.57,235.093 1534.14,233.751 1534.71,234.562 1535.28,234.102 1535.84,233.966 1536.41,233.642 1536.98,233.283 1537.55,233.112 1538.12,232.793 1538.69,232.599 1539.25,230.275 1539.82,229.153 1540.39,231.099 1540.96,232.091 1541.53,231.973 1542.1,231.712 1542.66,230.362 1543.23,230.449 1543.8,229.454 1544.37,230.44 1544.94,231.552 1545.51,230.155 1546.08,228.116 1546.64,226.065 1547.21,226.335 1547.78,225.672 1548.35,225.777 1548.92,225.185 1549.49,224.358 1550.05,225.979 1550.62,227.46 1551.19,228.739 1551.76,230.651 1552.33,229.614 1552.9,228.715 1553.46,227.802 1554.03,226.092 1554.6,230.356 1555.17,229.377 1555.74,231.544 1556.31,231.217 1556.87,230.123 1557.44,230.184 1558.01,230.17 1558.58,229.928 1559.15,230.96 1559.72,232.914 1560.28,231.517 1560.85,231.19 1561.42,233.071 1561.99,233.768 1562.56,233.605 1563.13,231.315 1563.69,229.92 1564.26,231.954 1564.83,230.671 1565.4,230.397 1565.97,229.375 1566.54,226.321 1567.1,224.579 1567.67,223.776 1568.24,225.09 1568.81,223.317 1569.38,223.915 1569.95,223.402 1570.51,223.613 1571.08,225.286 1571.65,225.529 1572.22,227.139 1572.79,226.5 1573.36,228.817 1573.92,228.877 1574.49,228.962 1575.06,230.078 1575.63,230.091 1576.2,231.094 1576.77,229.935 1577.33,229.978 1577.9,231.078 1578.47,231.087 1579.04,229.98 1579.61,232.034 1580.18,234.017 1580.74,234.716 1581.31,233.309 1581.88,233.086 1582.45,233.938 1583.02,232.64 1583.59,231.25 1584.15,229.999 1584.72,231.935 1585.29,231.871 1585.86,233.79 1586.43,233.441 1587,232.153 1587.56,233.922 1588.13,232.825 1588.7,229.499 1589.27,229.521 1589.84,230.469 1590.41,229.221 1590.97,225.048 1591.54,226.193 1592.11,225.22 1592.68,225.65 1593.25,226.795 1593.82,223.992 1594.38,223.222 1594.95,224.449 1595.52,224.796 1596.09,223.779 1596.66,222.451 1597.23,222.045 1597.79,221.716 1598.36,222.28 1598.93,223.913 1599.5,224.368 1600.07,226.002 1600.64,227.7 1601.2,226.837 1601.77,227.165 1602.34,226.507 1602.91,226.633 1603.48,229.111 1604.05,229.14 1604.61,228.199 1605.18,231.52 1605.75,230.502 1606.32,229.502 1606.89,229.625 1607.46,229.757 1608.02,229.76 1608.59,228.707 1609.16,226.64 1609.73,228.765 1610.3,232.02 1610.87,233.822 1611.43,232.524 1612,231.344 1612.57,232.23 1613.14,230.024 1613.71,227.92 1614.28,228.078 1614.84,228.198 1615.41,229.263 1615.98,230.297 1616.55,230.349 1617.12,230.398 1617.69,230.33 1618.26,231.557 1618.82,231.312 1619.39,231.322 1619.96,229.074 1620.53,229.292 1621.1,229.591 1621.67,229.73 1622.23,231.656 1622.8,232.44 1623.37,232.205 1623.94,230.857 1624.51,231.633 1625.08,232.355 1625.64,233.246 1626.21,232.93 1626.78,231.74 1627.35,233.723 1627.92,234.437 1628.49,234.918 1629.05,235.442 1629.62,236.112 1630.19,233.499 1630.76,233.192 1631.33,232.778 1631.9,234.703 1632.46,235.325 1633.03,236.857 1633.6,235.207 1634.17,234.734 1634.74,231.2 1635.31,231.007 1635.87,227.572 1636.44,225.566 1637.01,227.878 1637.58,227.996 1638.15,230.082 1638.72,231.925 1639.28,231.566 1639.85,234.508 1640.42,234.264 1640.99,232.852 1641.56,232.553 1642.13,231.421 1642.69,229.087 1643.26,228.725 1643.83,228.658 1644.4,229.681 1644.97,231.716 1645.54,227.182 1646.1,226.163 1646.67,224.323 1647.24,225.697 1647.81,221.701 1648.38,221.226 1648.95,219.895 1649.51,220.292 1650.08,221.963 1650.65,221.317 1651.22,222.862 1651.79,222.288 1652.36,224.807 1652.92,227.227 1653.49,228.298 1654.06,227.281 1654.63,225.322 1655.2,224.619 1655.77,224.019 1656.33,224.554 1656.9,224.827 1657.47,228.519 1658.04,228.502 1658.61,227.701 1659.18,227.937 1659.74,228.963 1660.31,227.155 1660.88,226.222 1661.45,227.43 1662.02,226.521 1662.59,227.856 1663.15,228.181 1663.72,229.315 1664.29,230.374 1664.86,229.352 1665.43,232.374 1666,231.135 1666.56,230.891 1667.13,235.026 1667.7,232.409 1668.27,230.204 1668.84,225.864 1669.41,229.209 1669.97,230.169 1670.54,229.047 1671.11,226.986 1671.68,228.151 1672.25,229.476 1672.82,230.489 1673.38,233.126 1673.95,231.796 1674.52,233.767 1675.09,235.606 1675.66,235.954 1676.23,233.558 1676.79,236.695 1677.36,237.14 1677.93,237.666 1678.5,236.018 1679.07,232.426 1679.64,232.064 1680.2,233.72 1680.77,234.368 1681.34,234.994 1681.91,236.572 1682.48,233.882 1683.05,232.339 1683.61,230.041 1684.18,228.752 1684.75,226.737 1685.32,229.138 1685.89,230.197 1686.46,230.14 1687.02,230.775 1687.59,232.646 1688.16,233.367 1688.73,235.122 1689.3,235.727 1689.87,236.028 1690.44,235.273 1691,234.513 1691.57,235.272 1692.14,232.751 1692.71,231.465 1693.28,231.147 1693.85,231.025 1694.41,232.977 1694.98,229.655 1695.55,229.544 1696.12,228.397 1696.69,230.417 1697.26,228.917 1697.82,227.591 1698.39,229.662 1698.96,227.568 1699.53,227.671 1700.1,227.729 1700.67,226.899 1701.23,226.921 1701.8,226.155 1702.37,225.328 1702.94,225.624 1703.51,223.826 1704.08,223.134 1704.64,220.435 1705.21,222.053 1705.78,221.538 1706.35,224.033 1706.92,224.353 1707.49,224.602 1708.05,223.964 1708.62,224.539 1709.19,224.776 1709.76,224.119 1710.33,221.624 1710.9,222.106 1711.46,221.692 1712.03,222.31 1712.6,223.049 1713.17,226.451 1713.74,225.555 1714.31,226.819 1714.87,226.877 1715.44,227.173 1716.01,228.554 1716.58,229.561 1717.15,229.421 1717.72,227.314 1718.28,227.42 1718.85,227.7 1719.42,228.948 1719.99,229.037 1720.56,230.296 1721.13,229.29 1721.69,230.399 1722.26,230.379 1722.83,230.135 1723.4,231.045 1723.97,231.61 1724.54,227.248 1725.1,226.475 1725.67,224.655 1726.24,224.929 1726.81,223.222 1727.38,226.846 1727.95,228.129 1728.51,229.313 1729.08,232.454 1729.65,233.153 1730.22,229.812 1730.79,230.119 1731.36,231.419 1731.92,230.579 1732.49,231.674 1733.06,231.426 1733.63,232.234 1734.2,230.121 1734.77,228.018 1735.33,228.067 1735.9,229.108 1736.47,229.991 1737.04,231.97 1737.61,233.785 1738.18,233.501 1738.74,234.137 1739.31,233.773 1739.88,234.556 1740.45,232.003 1741.02,231.904 1741.59,230.67 1742.15,230.599 1742.72,231.774 1743.29,232.284 1743.86,227.872 1744.43,227.989 1745,226.145 1745.56,226.281 1746.13,229.644 1746.7,231.748 1747.27,230.509 1747.84,233.396 1748.41,232.141 1748.97,232.086 1749.54,230.761 1750.11,230.55 1750.68,231.363 1751.25,230.286 1751.82,230.148 1752.38,228.824 1752.95,229.069 1753.52,228.104 1754.09,227.293 1754.66,226.424 1755.23,227.427 1755.79,228.425 1756.36,227.329 1756.93,228.582 1757.5,226.289 1758.07,226.436 1758.64,227.784 1759.21,228.95 1759.77,226.949 1760.34,224.319 1760.91,224.801 1761.48,229.137 1762.05,230.051 1762.62,231.178 1763.18,229.957 1763.75,230.772 1764.32,229.869 1764.89,230.933 1765.46,233.929 1766.03,229.428 1766.59,228.245 1767.16,229.02 1767.73,227.872 1768.3,227.062 1768.87,226.193 1769.44,226.418 1770,226.581 1770.57,225.611 1771.14,227.007 1771.71,229.278 1772.28,230.214 1772.85,230.946 1773.41,231.841 1773.98,232.653 1774.55,234.433 1775.12,235.935 1775.69,235.257 1776.26,234.708 1776.82,233.466 1777.39,231.959 1777.96,229.764 1778.53,230.625 1779.1,229.384 1779.67,228.449 1780.23,230.58 1780.8,231.495 1781.37,230.2 1781.94,231.104 1782.51,229.911 1783.08,229.842 1783.64,231.723 1784.21,233.544 1784.78,234.14 1785.35,235.797 1785.92,234.97 1786.49,233.412 1787.05,234.056 1787.62,233.649 1788.19,233.138 1788.76,233.573 1789.33,236.218 1789.9,234.641 1790.46,233.027 1791.03,232.893 1791.6,232.36 1792.17,232.903 1792.74,231.618 1793.31,229.148 1793.87,229.046 1794.44,228.886 1795.01,225.77 1795.58,225.855 1796.15,225.114 1796.72,224.447 1797.28,223.46 1797.85,226.929 1798.42,230.137 1798.99,230.996 1799.56,228.606 1800.13,228.699 1800.69,228.607 1801.26,226.565 1801.83,225.541 1802.4,226.626 1802.97,227.547 1803.54,228.634 1804.1,231.658 1804.67,230.369 1805.24,230.117 1805.81,230.071 1806.38,230.823 1806.95,228.661 1807.51,229.635 1808.08,226.511 1808.65,228.562 1809.22,228.508 1809.79,228.529 1810.36,229.649 1810.92,229.578 1811.49,230.464 1812.06,229.913 1812.63,228.698 1813.2,230.655 1813.77,226.607 1814.33,228.853 1814.9,227.551 1815.47,225.551 1816.04,223.518 1816.61,224.927 1817.18,224.122 1817.74,224.585 1818.31,225.915 1818.88,226.149 1819.45,228.311 1820.02,230.472 1820.59,229.549 1821.15,228.699 1821.72,229.761 1822.29,230.769 1822.86,231.362 1823.43,230.224 1824,231.199 1824.56,232.125 1825.13,231.16 1825.7,229.076 1826.27,228.979 1826.84,227.957 1827.41,226.948 1827.97,226.822 1828.54,226.873 1829.11,226.049 1829.68,225.076 1830.25,225.146 1830.82,225.186 1831.39,225.453 1831.95,224.65 1832.52,223.981 1833.09,223.318 1833.66,223.793 1834.23,225.056 1834.8,222.161 1835.36,222.611 1835.93,226.28 1836.5,224.512 1837.07,225.76 1837.64,227.941 1838.21,227.934 1838.77,226.974 1839.34,227.14 1839.91,227.175 1840.48,226.62 1841.05,226.871 1841.62,228.013 1842.18,229.097 1842.75,229.068 1843.32,228.017 1843.89,227.239 1844.46,228.599 1845.03,228.743 1845.59,229.742 1846.16,229.64 1846.73,230.466 1847.3,229.517 1847.87,230.369 1848.44,230.342 1849,231.226 1849.57,227.165 1850.14,226.299 1850.71,226.725 1851.28,227.941 1851.85,228.19 1852.41,230.194 1852.98,231.119 1853.55,231.974 1854.12,232.733 1854.69,232.472 1855.26,232.179 1855.82,233.156 1856.39,231.717 1856.96,232.588 1857.53,233.458 1858.1,232.195 1858.67,231.996 1859.23,230.668 1859.8,231.433 1860.37,231.444 1860.94,232.517 1861.51,233.16 1862.08,233.855 1862.64,235.553 1863.21,234.906 1863.78,233.287 1864.35,233.98 1864.92,234.667 1865.49,236.336 1866.05,234.857 1866.62,234.427 1867.19,233.939 1867.76,232.481 1868.33,233.486 1868.9,232.086 1869.46,233.85 1870.03,232.283 1870.6,233.13 1871.17,232.751 1871.74,232.309 1872.31,231.045 1872.87,230.728 1873.44,230.471 1874.01,230.319 1874.58,229.149 1875.15,230.047 1875.72,230.969 1876.28,232.602 1876.85,231.169 1877.42,232.051 1877.99,231.813 1878.56,230.36 1879.13,231.265 1879.69,229.886 1880.26,227.705 1880.83,228.913 1881.4,228.852 1881.97,228.668 1882.54,230.536 1883.1,228.209 1883.67,225.162 1884.24,224.243 1884.81,223.475 1885.38,222.773 1885.95,223.058 1886.51,223.405 1887.08,222.584 1887.65,222.848 1888.22,223.215 1888.79,222.457 1889.36,222.907 1889.92,223.258 1890.49,223.552 1891.06,223.821 1891.63,222.264 1892.2,221.503 1892.77,222.029 1893.33,222.563 1893.9,223.891 1894.47,224.229 1895.04,224.552 1895.61,222.962 1896.18,224.541 1896.74,226.859 1897.31,227.006 1897.88,228.156 1898.45,230.373 1899.02,228.386 1899.59,229.653 1900.16,229.712 1900.72,229.752 1901.29,229.646 1901.86,231.561 1902.43,231.465 1903,232.135 1903.57,231.757 1904.13,228.626 1904.7,229.456 1905.27,229.549 1905.84,229.519 1906.41,228.468 1906.98,229.599 1907.54,229.607 1908.11,228.432 1908.68,227.686 1909.25,228.777 1909.82,228.944 1910.39,229.281 1910.95,230.583 1911.52,229.68 1912.09,230.699 1912.66,229.654 1913.23,229.569 1913.8,231.721 1914.36,231.728 1914.93,232.615 1915.5,232.301 1916.07,232.232 1916.64,232.003 1917.21,231.826 1917.77,233.551 1918.34,233.499 1918.91,236.222 1919.48,235.658 1920.05,237.256 1920.62,238.746 1921.18,235.886 1921.75,235.372 1922.32,231.769 1922.89,231.525 1923.46,229.276 1924.03,230.464 1924.59,230.188 1925.16,229.834 1925.73,230.671 1926.3,229.347 1926.87,228.102 1927.44,224.859 1928,224.014 1928.57,223.388 1929.14,224.881 1929.71,222.198 1930.28,221.876 1930.85,222.488 1931.41,222.863 1931.98,222.354 1932.55,223.991 1933.12,229.344 1933.69,231.457 1934.26,230.221 1934.82,229.93 1935.39,230.946 1935.96,228.805 1936.53,227.97 1937.1,230.11 1937.67,231.214 1938.23,230.991 1938.8,232.157 1939.37,230.719 1939.94,229.371 1940.51,229.318 1941.08,229.226 1941.64,230.645 1942.21,231.595 1942.78,229.389 1943.35,229.514 1943.92,231.546 1944.49,231.438 1945.05,230.308 1945.62,229.128 1946.19,228.143 1946.76,230.376 1947.33,230.387 1947.9,230.32 1948.46,229.253 1949.03,229.046 1949.6,230.047 1950.17,228.821 1950.74,228.656 1951.31,226.379 1951.87,225.385 1952.44,224.436 1953.01,224.848 1953.58,224.083 1954.15,224.482 1954.72,225.931 1955.28,224.117 1955.85,223.362 1956.42,222.816 1956.99,223.442 1957.56,226.805 1958.13,229.169 1958.69,229.172 1959.26,229.248 1959.83,230.297 1960.4,227.742 1960.97,228.935 1961.54,227.758 1962.1,226.933 1962.67,227.133 1963.24,227.486 1963.81,226.66 1964.38,227.079 1964.95,224.37 1965.51,224.651 1966.08,226.249 1966.65,226.215 1967.22,225.435 1967.79,222.652 1968.36,223.065 1968.92,223.686 1969.49,226.2 1970.06,226.375 1970.63,227.536 1971.2,229.603 1971.77,228.625 1972.34,230.845 1972.9,232.025 1973.47,230.08 1974.04,230.967 1974.61,232.004 1975.18,234.303 1975.75,234.062 1976.31,235.693 1976.88,234.069 1977.45,232.902 1978.02,234.786 1978.59,235.729 1979.16,235.084 1979.72,234.416 1980.29,233.008 1980.86,232.866 1981.43,230.515 1982,230.432 1982.57,231.224 1983.13,229.928 1983.7,229.841 1984.27,228.793 1984.84,227.889 1985.41,225.885 1985.98,226.458 1986.54,224.623 1987.11,225.095 1987.68,225.493 1988.25,226.705 1988.82,223.757 1989.39,225.111 1989.95,225.367 1990.52,226.759 1991.09,225.054 1991.66,226.375 1992.23,227.765 1992.8,227.942 1993.36,228.207 1993.93,230.316 1994.5,230.249 1995.07,229.269 1995.64,228.237 1996.21,228.986 1996.77,231.123 1997.34,231.128 1997.91,232.088 1998.48,231.041 1999.05,226.837 1999.62,226.981 2000.18,226.303 2000.75,226.444 2001.32,226.636 2001.89,225.8 2002.46,228.329 2003.03,230.694 2003.59,230.59 2004.16,230.519 2004.73,229.439 2005.3,228.446 2005.87,227.433 2006.44,226.672 2007,225.841 2007.57,226.221 2008.14,226.551 2008.71,227.913 2009.28,228.97 2009.85,229.324 2010.41,228.202 2010.98,228.37 2011.55,229.604 2012.12,229.419 2012.69,229.388 2013.26,232.671 2013.82,231.635 2014.39,232.517 2014.96,232.469 2015.53,232.377 2016.1,233.454 2016.67,232.158 2017.23,231.212 2017.8,233.022 2018.37,231.951 2018.94,230.782 2019.51,228.911 2020.08,228.872 2020.64,228.791 2021.21,231.992 2021.78,232.937 2022.35,232.763 2022.92,231.527 2023.49,231.406 2024.05,231.46 2024.62,232.323 2025.19,233.181 2025.76,233.705 2026.33,232.505 2026.9,232.187 2027.46,233.868 2028.03,233.729 2028.6,233.442 2029.17,232.963 2029.74,231.757 2030.31,231.665 2030.87,232.552 2031.44,229.158 2032.01,229.104 2032.58,229.247 2033.15,228.17 2033.72,228.222 2034.28,228.979 2034.85,228.992 2035.42,228.037 2035.99,228.971 2036.56,229.907 2037.13,230.005 2037.69,229.952 2038.26,228.778 2038.83,226.735 2039.4,229.903 2039.97,230.972 2040.54,230.769 2041.11,229.504 2041.67,231.735 2042.24,234.592 2042.81,234.111 2043.38,234.697 2043.95,234.143 2044.52,233.743 2045.08,234.457 2045.65,232.939 2046.22,231.579 2046.79,231.472 2047.36,231.286 2047.93,231.355 2048.49,232.156 2049.06,231.76 2049.63,230.444 2050.2,230.202 2050.77,230.022 2051.34,228.754 2051.9,228.661 2052.47,228.415 2053.04,229.344 2053.61,231.538 2054.18,231.254 2054.75,229.166 2055.31,226.836 2055.88,230.22 2056.45,228.149 2057.02,227.183 2057.59,228.395 2058.16,227.182 2058.72,228.177 2059.29,228.063 2059.86,227.286 2060.43,227.474 2061,229.402 2061.57,229.39 2062.13,230.184 2062.7,230.038 2063.27,231.863 2063.84,230.748 2064.41,232.709 2064.98,233.244 2065.54,230.666 2066.11,229.838 2066.68,228.85 2067.25,228.995 2067.82,229.855 2068.39,229.648 2068.95,227.256 2069.52,226.325 2070.09,225.391 2070.66,225.606 2071.23,227.939 2071.8,226.85 2072.36,227.993 2072.93,226.882 2073.5,227.097 2074.07,225.183 2074.64,224.645 2075.21,224.872 2075.77,225.205 2076.34,225.558 2076.91,226.624 2077.48,226.705 2078.05,222.904 2078.62,223.36 2079.18,223.86 2079.75,226.346 2080.32,226.457 2080.89,227.476 2081.46,229.662 2082.03,228.544 2082.59,227.55 2083.16,227.42 2083.73,226.616 2084.3,225.755 2084.87,223.875 2085.44,224.239 2086,224.548 2086.57,225.878 2087.14,224.027 2087.71,223.401 2088.28,223.894 2088.85,224.124 2089.41,226.581 2089.98,227.603 2090.55,226.889 2091.12,228.312 2091.69,228.145 2092.26,228.415 2092.82,229.579 2093.39,228.709 2093.96,229.938 2094.53,230.728 2095.1,234.032 2095.67,231.702 2096.23,232.635 2096.8,231.248 2097.37,232.203 2097.94,232.876 2098.51,232.808 2099.08,232.826 2099.64,231.687 2100.21,231.644 2100.78,230.446 2101.35,230.193 2101.92,231.255 2102.49,229.915 2103.05,230.028 2103.62,232.065 2104.19,233.056 2104.76,232.776 2105.33,234.58 2105.9,235.232 2106.46,235.63 2107.03,233.284 2107.6,231.656 2108.17,231.356 2108.74,229.155 2109.31,228.129 2109.87,225.995 2110.44,227.008 2111.01,225.225 2111.58,226.745 2112.15,228.884 2112.72,229.006 2113.29,225.905 2113.85,226.278 2114.42,228.578 2114.99,228.707 2115.56,228.695 2116.13,228.529 2116.7,229.628 2117.26,232.704 2117.83,231.402 2118.4,229.038 2118.97,231.206 2119.54,229.998 2120.11,228.998 2120.67,226.782 2121.24,224.87 2121.81,225.045 2122.38,224.362 2122.95,224.719 2123.52,224.002 2124.08,224.539 2124.65,224.677 2125.22,225.07 2125.79,225.39 2126.36,227.739 2126.93,225.747 2127.49,226.274 2128.06,227.615 2128.63,229.762 2129.2,229.004 2129.77,229.825 2130.34,230.966 2130.9,231.978 2131.47,234.18 2132.04,234.054 2132.61,232.839 2133.18,231.418 2133.75,231.338 2134.31,230.973 2134.88,229.595 2135.45,230.701 2136.02,230.584 2136.59,229.52 2137.16,231.522 2137.72,230.31 2138.29,230.471 2138.86,230.181 2139.43,232.171 2140,231.921 2140.57,232.628 2141.13,233.44 2141.7,236.095 2142.27,237.524 2142.84,235.879 2143.41,236.296 2143.98,234.868 2144.54,233.469 2145.11,233.1 2145.68,232.781 2146.25,231.494 2146.82,230.086 2147.39,231.123 2147.95,231.844 2148.52,231.581 2149.09,228.219 2149.66,225.012 2150.23,225.244 2150.8,226.501 2151.36,227.642 2151.93,228.571 2152.5,228.462 2153.07,228.508 2153.64,229.371 2154.21,230.33 2154.77,228.076 2155.34,227.15 2155.91,225.134 2156.48,226.385 2157.05,225.391 2157.62,225.825 2158.18,226.311 2158.75,225.38 2159.32,226.518 2159.89,227.74 \"/>\n<path clip-path=\"url(#clip710)\" d=\"M1625.75 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1625.75 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip710)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1625.75,1245.03 2150.8,1245.03 2150.8,1089.51 1625.75,1089.51 1625.75,1245.03 \"/>\n<polyline clip-path=\"url(#clip710)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1645.83,1141.35 1766.28,1141.35 \"/>\n<path clip-path=\"url(#clip710)\" d=\"M1793.76 1125.34 L1793.76 1132.71 L1802.53 1132.71 L1802.53 1136.02 L1793.76 1136.02 L1793.76 1150.09 Q1793.76 1153.26 1794.61 1154.16 Q1795.49 1155.07 1798.16 1155.07 L1802.53 1155.07 L1802.53 1158.63 L1798.16 1158.63 Q1793.23 1158.63 1791.35 1156.8 Q1789.48 1154.95 1789.48 1150.09 L1789.48 1136.02 L1786.35 1136.02 L1786.35 1132.71 L1789.48 1132.71 L1789.48 1125.34 L1793.76 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip710)\" d=\"M1819.92 1145.6 Q1814.75 1145.6 1812.76 1146.78 Q1810.77 1147.96 1810.77 1150.81 Q1810.77 1153.08 1812.25 1154.42 Q1813.76 1155.74 1816.33 1155.74 Q1819.87 1155.74 1822 1153.24 Q1824.15 1150.72 1824.15 1146.55 L1824.15 1145.6 L1819.92 1145.6 M1828.41 1143.84 L1828.41 1158.63 L1824.15 1158.63 L1824.15 1154.7 Q1822.69 1157.06 1820.52 1158.19 Q1818.34 1159.3 1815.19 1159.3 Q1811.21 1159.3 1808.85 1157.08 Q1806.51 1154.84 1806.51 1151.09 Q1806.51 1146.71 1809.43 1144.49 Q1812.37 1142.27 1818.18 1142.27 L1824.15 1142.27 L1824.15 1141.85 Q1824.15 1138.91 1822.21 1137.31 Q1820.29 1135.69 1816.79 1135.69 Q1814.57 1135.69 1812.46 1136.22 Q1810.36 1136.76 1808.41 1137.82 L1808.41 1133.89 Q1810.75 1132.98 1812.95 1132.54 Q1815.15 1132.08 1817.23 1132.08 Q1822.86 1132.08 1825.63 1135 Q1828.41 1137.91 1828.41 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip710)\" d=\"M1852.21 1136.69 Q1851.49 1136.27 1850.63 1136.09 Q1849.8 1135.88 1848.78 1135.88 Q1845.17 1135.88 1843.23 1138.24 Q1841.3 1140.58 1841.3 1144.97 L1841.3 1158.63 L1837.02 1158.63 L1837.02 1132.71 L1841.3 1132.71 L1841.3 1136.73 Q1842.65 1134.37 1844.8 1133.24 Q1846.95 1132.08 1850.03 1132.08 Q1850.47 1132.08 1851 1132.15 Q1851.54 1132.2 1852.18 1132.31 L1852.21 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip710)\" d=\"M1872.9 1145.37 Q1872.9 1140.74 1870.98 1138.19 Q1869.08 1135.65 1865.63 1135.65 Q1862.21 1135.65 1860.29 1138.19 Q1858.39 1140.74 1858.39 1145.37 Q1858.39 1149.97 1860.29 1152.52 Q1862.21 1155.07 1865.63 1155.07 Q1869.08 1155.07 1870.98 1152.52 Q1872.9 1149.97 1872.9 1145.37 M1877.16 1155.41 Q1877.16 1162.03 1874.22 1165.25 Q1871.28 1168.49 1865.22 1168.49 Q1862.97 1168.49 1860.98 1168.15 Q1858.99 1167.82 1857.11 1167.13 L1857.11 1162.98 Q1858.99 1164 1860.82 1164.49 Q1862.65 1164.97 1864.54 1164.97 Q1868.73 1164.97 1870.82 1162.78 Q1872.9 1160.6 1872.9 1156.18 L1872.9 1154.07 Q1871.58 1156.36 1869.52 1157.5 Q1867.46 1158.63 1864.59 1158.63 Q1859.82 1158.63 1856.91 1155 Q1853.99 1151.36 1853.99 1145.37 Q1853.99 1139.35 1856.91 1135.72 Q1859.82 1132.08 1864.59 1132.08 Q1867.46 1132.08 1869.52 1133.22 Q1871.58 1134.35 1872.9 1136.64 L1872.9 1132.71 L1877.16 1132.71 L1877.16 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip710)\" d=\"M1908.11 1144.6 L1908.11 1146.69 L1888.53 1146.69 Q1888.8 1151.09 1891.17 1153.4 Q1893.55 1155.69 1897.79 1155.69 Q1900.24 1155.69 1902.53 1155.09 Q1904.85 1154.49 1907.11 1153.28 L1907.11 1157.31 Q1904.82 1158.28 1902.42 1158.79 Q1900.01 1159.3 1897.53 1159.3 Q1891.33 1159.3 1887.69 1155.69 Q1884.08 1152.08 1884.08 1145.92 Q1884.08 1139.56 1887.51 1135.83 Q1890.96 1132.08 1896.79 1132.08 Q1902.02 1132.08 1905.05 1135.46 Q1908.11 1138.82 1908.11 1144.6 M1903.85 1143.35 Q1903.8 1139.86 1901.88 1137.78 Q1899.98 1135.69 1896.84 1135.69 Q1893.27 1135.69 1891.12 1137.71 Q1888.99 1139.72 1888.67 1143.38 L1903.85 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip710)\" d=\"M1919.31 1125.34 L1919.31 1132.71 L1928.09 1132.71 L1928.09 1136.02 L1919.31 1136.02 L1919.31 1150.09 Q1919.31 1153.26 1920.17 1154.16 Q1921.05 1155.07 1923.71 1155.07 L1928.09 1155.07 L1928.09 1158.63 L1923.71 1158.63 Q1918.78 1158.63 1916.91 1156.8 Q1915.03 1154.95 1915.03 1150.09 L1915.03 1136.02 L1911.91 1136.02 L1911.91 1132.71 L1915.03 1132.71 L1915.03 1125.34 L1919.31 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip710)\" d=\"M1953.39 1166.5 L1953.39 1169.81 L1928.76 1169.81 L1928.76 1166.5 L1953.39 1166.5 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip710)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip710)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip710)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip710)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip710)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip710)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip710)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip710)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1645.83,1193.19 1766.28,1193.19 \"/>\n<path clip-path=\"url(#clip710)\" d=\"M1808.06 1194.82 L1808.06 1210.47 L1803.8 1210.47 L1803.8 1194.96 Q1803.8 1191.28 1802.37 1189.45 Q1800.93 1187.62 1798.06 1187.62 Q1794.61 1187.62 1792.62 1189.82 Q1790.63 1192.02 1790.63 1195.82 L1790.63 1210.47 L1786.35 1210.47 L1786.35 1184.55 L1790.63 1184.55 L1790.63 1188.57 Q1792.16 1186.24 1794.22 1185.08 Q1796.3 1183.92 1799.01 1183.92 Q1803.48 1183.92 1805.77 1186.7 Q1808.06 1189.45 1808.06 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip710)\" d=\"M1826.61 1187.53 Q1823.18 1187.53 1821.19 1190.22 Q1819.2 1192.88 1819.2 1197.53 Q1819.2 1202.18 1821.17 1204.87 Q1823.16 1207.53 1826.61 1207.53 Q1830.01 1207.53 1832 1204.85 Q1833.99 1202.16 1833.99 1197.53 Q1833.99 1192.93 1832 1190.24 Q1830.01 1187.53 1826.61 1187.53 M1826.61 1183.92 Q1832.16 1183.92 1835.33 1187.53 Q1838.5 1191.14 1838.5 1197.53 Q1838.5 1203.9 1835.33 1207.53 Q1832.16 1211.14 1826.61 1211.14 Q1821.03 1211.14 1817.86 1207.53 Q1814.71 1203.9 1814.71 1197.53 Q1814.71 1191.14 1817.86 1187.53 Q1821.03 1183.92 1826.61 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip710)\" d=\"M1860.59 1188.53 Q1859.87 1188.11 1859.01 1187.93 Q1858.18 1187.72 1857.16 1187.72 Q1853.55 1187.72 1851.61 1190.08 Q1849.68 1192.42 1849.68 1196.81 L1849.68 1210.47 L1845.4 1210.47 L1845.4 1184.55 L1849.68 1184.55 L1849.68 1188.57 Q1851.03 1186.21 1853.18 1185.08 Q1855.33 1183.92 1858.41 1183.92 Q1858.85 1183.92 1859.38 1183.99 Q1859.92 1184.04 1860.56 1184.15 L1860.59 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip710)\" d=\"M1884.41 1189.52 Q1886 1186.65 1888.23 1185.29 Q1890.45 1183.92 1893.46 1183.92 Q1897.51 1183.92 1899.71 1186.77 Q1901.91 1189.59 1901.91 1194.82 L1901.91 1210.47 L1897.62 1210.47 L1897.62 1194.96 Q1897.62 1191.24 1896.3 1189.43 Q1894.98 1187.62 1892.28 1187.62 Q1888.97 1187.62 1887.04 1189.82 Q1885.12 1192.02 1885.12 1195.82 L1885.12 1210.47 L1880.84 1210.47 L1880.84 1194.96 Q1880.84 1191.21 1879.52 1189.43 Q1878.2 1187.62 1875.45 1187.62 Q1872.18 1187.62 1870.26 1189.85 Q1868.34 1192.05 1868.34 1195.82 L1868.34 1210.47 L1864.06 1210.47 L1864.06 1184.55 L1868.34 1184.55 L1868.34 1188.57 Q1869.8 1186.19 1871.84 1185.06 Q1873.87 1183.92 1876.67 1183.92 Q1879.5 1183.92 1881.47 1185.36 Q1883.46 1186.79 1884.41 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.032 ± 0.017\n  with uncertainty of ± 0.0010803434413930726\n  from 125 blocks after 4 transformations (k = 5).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.01884 ± (0.00447123, 0.00414212) (MC)\n  95% confidence interval: [-4.02736, -4.01012]) (MC)\n  linear error propagation: -4.01939 ± 0.00444584\n  |δ_y| = |0.0020859| (≤ 0.1 for normal approx)\n  Blocking successful with 15 blocks after 7 transformations (k = 8).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.018835270098796, val_l = 0.008522033560326214, val_u = 0.00871163423370458)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.step, df.shift, ylabel=\"energy\", xlabel=\"step\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.step[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.step[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip740\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip740)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip741\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip740)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip742\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip742)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip742)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip742)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip742)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip742)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1152.82 2211.02,1152.82 \"/>\n<polyline clip-path=\"url(#clip742)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1004.07 2211.02,1004.07 \"/>\n<polyline clip-path=\"url(#clip742)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,855.329 2211.02,855.329 \"/>\n<polyline clip-path=\"url(#clip742)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,706.584 2211.02,706.584 \"/>\n<polyline clip-path=\"url(#clip742)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,557.84 2211.02,557.84 \"/>\n<polyline clip-path=\"url(#clip742)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,409.095 2211.02,409.095 \"/>\n<polyline clip-path=\"url(#clip742)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,260.35 2211.02,260.35 \"/>\n<polyline clip-path=\"url(#clip740)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip740)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip740)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip740)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip740)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip740)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip740)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip740)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip740)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip740)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip740)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip740)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip740)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip740)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip740)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip740)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip740)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip740)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip740)\" d=\"M1237.32 1391.71 L1237.32 1397.25 Q1234.84 1395.98 1232.17 1395.34 Q1229.49 1394.71 1226.63 1394.71 Q1222.27 1394.71 1220.07 1396.04 Q1217.91 1397.38 1217.91 1400.05 Q1217.91 1402.09 1219.47 1403.27 Q1221.03 1404.41 1225.74 1405.46 L1227.74 1405.91 Q1233.98 1407.25 1236.59 1409.7 Q1239.23 1412.12 1239.23 1416.48 Q1239.23 1421.44 1235.29 1424.34 Q1231.37 1427.23 1224.5 1427.23 Q1221.63 1427.23 1218.51 1426.66 Q1215.42 1426.12 1211.99 1425.01 L1211.99 1418.96 Q1215.23 1420.65 1218.38 1421.51 Q1221.54 1422.33 1224.62 1422.33 Q1228.76 1422.33 1230.99 1420.93 Q1233.22 1419.5 1233.22 1416.92 Q1233.22 1414.54 1231.59 1413.26 Q1230 1411.99 1224.56 1410.81 L1222.52 1410.33 Q1217.08 1409.19 1214.66 1406.83 Q1212.24 1404.45 1212.24 1400.31 Q1212.24 1395.28 1215.81 1392.54 Q1219.37 1389.8 1225.93 1389.8 Q1229.17 1389.8 1232.04 1390.28 Q1234.9 1390.76 1237.32 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip740)\" d=\"M1254.35 1380.54 L1254.35 1390.66 L1266.41 1390.66 L1266.41 1395.22 L1254.35 1395.22 L1254.35 1414.57 Q1254.35 1418.93 1255.53 1420.17 Q1256.74 1421.41 1260.4 1421.41 L1266.41 1421.41 L1266.41 1426.31 L1260.4 1426.31 Q1253.62 1426.31 1251.04 1423.8 Q1248.46 1421.25 1248.46 1414.57 L1248.46 1395.22 L1244.17 1395.22 L1244.17 1390.66 L1248.46 1390.66 L1248.46 1380.54 L1254.35 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip740)\" d=\"M1304.61 1407.02 L1304.61 1409.89 L1277.68 1409.89 Q1278.06 1415.94 1281.31 1419.12 Q1284.59 1422.27 1290.41 1422.27 Q1293.79 1422.27 1296.94 1421.44 Q1300.12 1420.61 1303.24 1418.96 L1303.24 1424.5 Q1300.09 1425.83 1296.78 1426.53 Q1293.47 1427.23 1290.06 1427.23 Q1281.53 1427.23 1276.54 1422.27 Q1271.57 1417.3 1271.57 1408.84 Q1271.57 1400.08 1276.28 1394.96 Q1281.02 1389.8 1289.04 1389.8 Q1296.24 1389.8 1300.41 1394.45 Q1304.61 1399.07 1304.61 1407.02 M1298.75 1405.3 Q1298.69 1400.5 1296.05 1397.63 Q1293.44 1394.77 1289.11 1394.77 Q1284.21 1394.77 1281.25 1397.54 Q1278.32 1400.31 1277.87 1405.34 L1298.75 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip740)\" d=\"M1319.89 1420.96 L1319.89 1439.87 L1314 1439.87 L1314 1390.66 L1319.89 1390.66 L1319.89 1396.07 Q1321.73 1392.89 1324.53 1391.36 Q1327.37 1389.8 1331.28 1389.8 Q1337.77 1389.8 1341.82 1394.96 Q1345.89 1400.12 1345.89 1408.52 Q1345.89 1416.92 1341.82 1422.08 Q1337.77 1427.23 1331.28 1427.23 Q1327.37 1427.23 1324.53 1425.71 Q1321.73 1424.15 1319.89 1420.96 M1339.81 1408.52 Q1339.81 1402.06 1337.14 1398.4 Q1334.5 1394.71 1329.85 1394.71 Q1325.2 1394.71 1322.53 1398.4 Q1319.89 1402.06 1319.89 1408.52 Q1319.89 1414.98 1322.53 1418.67 Q1325.2 1422.33 1329.85 1422.33 Q1334.5 1422.33 1337.14 1418.67 Q1339.81 1414.98 1339.81 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip740)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip740)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1152.82 365.751,1152.82 \"/>\n<polyline clip-path=\"url(#clip740)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1004.07 365.751,1004.07 \"/>\n<polyline clip-path=\"url(#clip740)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,855.329 365.751,855.329 \"/>\n<polyline clip-path=\"url(#clip740)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,706.584 365.751,706.584 \"/>\n<polyline clip-path=\"url(#clip740)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,557.84 365.751,557.84 \"/>\n<polyline clip-path=\"url(#clip740)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,409.095 365.751,409.095 \"/>\n<polyline clip-path=\"url(#clip740)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,260.35 365.751,260.35 \"/>\n<path clip-path=\"url(#clip740)\" d=\"M298.909 1138.62 Q295.298 1138.62 293.469 1142.18 Q291.664 1145.72 291.664 1152.85 Q291.664 1159.96 293.469 1163.52 Q295.298 1167.07 298.909 1167.07 Q302.543 1167.07 304.349 1163.52 Q306.177 1159.96 306.177 1152.85 Q306.177 1145.72 304.349 1142.18 Q302.543 1138.62 298.909 1138.62 M298.909 1134.91 Q304.719 1134.91 307.775 1139.52 Q310.853 1144.1 310.853 1152.85 Q310.853 1161.58 307.775 1166.19 Q304.719 1170.77 298.909 1170.77 Q293.099 1170.77 290.02 1166.19 Q286.964 1161.58 286.964 1152.85 Q286.964 1144.1 290.02 1139.52 Q293.099 1134.91 298.909 1134.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip740)\" d=\"M259.557 1017.42 L267.196 1017.42 L267.196 991.053 L258.886 992.72 L258.886 988.461 L267.15 986.794 L271.826 986.794 L271.826 1017.42 L279.465 1017.42 L279.465 1021.35 L259.557 1021.35 L259.557 1017.42 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip740)\" d=\"M298.909 989.873 Q295.298 989.873 293.469 993.437 Q291.664 996.979 291.664 1004.11 Q291.664 1011.22 293.469 1014.78 Q295.298 1018.32 298.909 1018.32 Q302.543 1018.32 304.349 1014.78 Q306.177 1011.22 306.177 1004.11 Q306.177 996.979 304.349 993.437 Q302.543 989.873 298.909 989.873 M298.909 986.169 Q304.719 986.169 307.775 990.775 Q310.853 995.359 310.853 1004.11 Q310.853 1012.84 307.775 1017.44 Q304.719 1022.03 298.909 1022.03 Q293.099 1022.03 290.02 1017.44 Q286.964 1012.84 286.964 1004.11 Q286.964 995.359 290.02 990.775 Q293.099 986.169 298.909 986.169 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip740)\" d=\"M262.775 868.674 L279.094 868.674 L279.094 872.609 L257.15 872.609 L257.15 868.674 Q259.812 865.919 264.395 861.29 Q269.002 856.637 270.182 855.294 Q272.428 852.771 273.307 851.035 Q274.21 849.276 274.21 847.586 Q274.21 844.832 272.266 843.095 Q270.344 841.359 267.242 841.359 Q265.043 841.359 262.59 842.123 Q260.159 842.887 257.381 844.438 L257.381 839.716 Q260.205 838.582 262.659 838.003 Q265.113 837.424 267.15 837.424 Q272.52 837.424 275.715 840.109 Q278.909 842.795 278.909 847.285 Q278.909 849.415 278.099 851.336 Q277.312 853.234 275.205 855.827 Q274.627 856.498 271.525 859.716 Q268.423 862.91 262.775 868.674 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip740)\" d=\"M298.909 841.128 Q295.298 841.128 293.469 844.693 Q291.664 848.234 291.664 855.364 Q291.664 862.47 293.469 866.035 Q295.298 869.577 298.909 869.577 Q302.543 869.577 304.349 866.035 Q306.177 862.47 306.177 855.364 Q306.177 848.234 304.349 844.693 Q302.543 841.128 298.909 841.128 M298.909 837.424 Q304.719 837.424 307.775 842.031 Q310.853 846.614 310.853 855.364 Q310.853 864.091 307.775 868.697 Q304.719 873.28 298.909 873.28 Q293.099 873.28 290.02 868.697 Q286.964 864.091 286.964 855.364 Q286.964 846.614 290.02 842.031 Q293.099 837.424 298.909 837.424 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip740)\" d=\"M272.914 705.23 Q276.27 705.948 278.145 708.216 Q280.043 710.485 280.043 713.818 Q280.043 718.934 276.525 721.735 Q273.006 724.536 266.525 724.536 Q264.349 724.536 262.034 724.096 Q259.742 723.679 257.289 722.823 L257.289 718.309 Q259.233 719.443 261.548 720.022 Q263.863 720.601 266.386 720.601 Q270.784 720.601 273.076 718.865 Q275.39 717.128 275.39 713.818 Q275.39 710.763 273.238 709.05 Q271.108 707.314 267.289 707.314 L263.261 707.314 L263.261 703.471 L267.474 703.471 Q270.923 703.471 272.752 702.105 Q274.58 700.716 274.58 698.124 Q274.58 695.462 272.682 694.05 Q270.807 692.615 267.289 692.615 Q265.367 692.615 263.168 693.031 Q260.969 693.448 258.33 694.328 L258.33 690.161 Q260.992 689.42 263.307 689.05 Q265.645 688.679 267.705 688.679 Q273.029 688.679 276.131 691.11 Q279.233 693.517 279.233 697.638 Q279.233 700.508 277.59 702.499 Q275.946 704.466 272.914 705.23 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip740)\" d=\"M298.909 692.383 Q295.298 692.383 293.469 695.948 Q291.664 699.49 291.664 706.619 Q291.664 713.726 293.469 717.29 Q295.298 720.832 298.909 720.832 Q302.543 720.832 304.349 717.29 Q306.177 713.726 306.177 706.619 Q306.177 699.49 304.349 695.948 Q302.543 692.383 298.909 692.383 M298.909 688.679 Q304.719 688.679 307.775 693.286 Q310.853 697.869 310.853 706.619 Q310.853 715.346 307.775 719.952 Q304.719 724.536 298.909 724.536 Q293.099 724.536 290.02 719.952 Q286.964 715.346 286.964 706.619 Q286.964 697.869 290.02 693.286 Q293.099 688.679 298.909 688.679 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip740)\" d=\"M271.594 544.634 L259.789 563.083 L271.594 563.083 L271.594 544.634 M270.367 540.56 L276.247 540.56 L276.247 563.083 L281.177 563.083 L281.177 566.972 L276.247 566.972 L276.247 575.12 L271.594 575.12 L271.594 566.972 L255.992 566.972 L255.992 562.458 L270.367 540.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip740)\" d=\"M298.909 543.639 Q295.298 543.639 293.469 547.203 Q291.664 550.745 291.664 557.875 Q291.664 564.981 293.469 568.546 Q295.298 572.087 298.909 572.087 Q302.543 572.087 304.349 568.546 Q306.177 564.981 306.177 557.875 Q306.177 550.745 304.349 547.203 Q302.543 543.639 298.909 543.639 M298.909 539.935 Q304.719 539.935 307.775 544.541 Q310.853 549.125 310.853 557.875 Q310.853 566.601 307.775 571.208 Q304.719 575.791 298.909 575.791 Q293.099 575.791 290.02 571.208 Q286.964 566.601 286.964 557.875 Q286.964 549.125 290.02 544.541 Q293.099 539.935 298.909 539.935 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip740)\" d=\"M258.793 391.815 L277.15 391.815 L277.15 395.75 L263.076 395.75 L263.076 404.222 Q264.094 403.875 265.113 403.713 Q266.131 403.528 267.15 403.528 Q272.937 403.528 276.316 406.699 Q279.696 409.871 279.696 415.287 Q279.696 420.866 276.224 423.968 Q272.752 427.046 266.432 427.046 Q264.256 427.046 261.988 426.676 Q259.742 426.306 257.335 425.565 L257.335 420.866 Q259.418 422 261.641 422.556 Q263.863 423.111 266.34 423.111 Q270.344 423.111 272.682 421.005 Q275.02 418.898 275.02 415.287 Q275.02 411.676 272.682 409.57 Q270.344 407.463 266.34 407.463 Q264.465 407.463 262.59 407.88 Q260.738 408.297 258.793 409.176 L258.793 391.815 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip740)\" d=\"M298.909 394.894 Q295.298 394.894 293.469 398.459 Q291.664 402 291.664 409.13 Q291.664 416.236 293.469 419.801 Q295.298 423.343 298.909 423.343 Q302.543 423.343 304.349 419.801 Q306.177 416.236 306.177 409.13 Q306.177 402 304.349 398.459 Q302.543 394.894 298.909 394.894 M298.909 391.19 Q304.719 391.19 307.775 395.797 Q310.853 400.38 310.853 409.13 Q310.853 417.857 307.775 422.463 Q304.719 427.046 298.909 427.046 Q293.099 427.046 290.02 422.463 Q286.964 417.857 286.964 409.13 Q286.964 400.38 290.02 395.797 Q293.099 391.19 298.909 391.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip740)\" d=\"M269.326 258.487 Q266.178 258.487 264.326 260.64 Q262.497 262.793 262.497 266.543 Q262.497 270.269 264.326 272.445 Q266.178 274.598 269.326 274.598 Q272.474 274.598 274.303 272.445 Q276.154 270.269 276.154 266.543 Q276.154 262.793 274.303 260.64 Q272.474 258.487 269.326 258.487 M278.608 243.834 L278.608 248.094 Q276.849 247.26 275.043 246.82 Q273.261 246.381 271.502 246.381 Q266.872 246.381 264.418 249.506 Q261.988 252.631 261.641 258.95 Q263.006 256.936 265.066 255.871 Q267.127 254.783 269.603 254.783 Q274.812 254.783 277.821 257.955 Q280.853 261.103 280.853 266.543 Q280.853 271.867 277.705 275.084 Q274.557 278.302 269.326 278.302 Q263.33 278.302 260.159 273.718 Q256.988 269.112 256.988 260.385 Q256.988 252.191 260.877 247.33 Q264.766 242.445 271.316 242.445 Q273.076 242.445 274.858 242.793 Q276.664 243.14 278.608 243.834 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip740)\" d=\"M298.909 246.149 Q295.298 246.149 293.469 249.714 Q291.664 253.256 291.664 260.385 Q291.664 267.492 293.469 271.056 Q295.298 274.598 298.909 274.598 Q302.543 274.598 304.349 271.056 Q306.177 267.492 306.177 260.385 Q306.177 253.256 304.349 249.714 Q302.543 246.149 298.909 246.149 M298.909 242.445 Q304.719 242.445 307.775 247.052 Q310.853 251.635 310.853 260.385 Q310.853 269.112 307.775 273.718 Q304.719 278.302 298.909 278.302 Q293.099 278.302 290.02 273.718 Q286.964 269.112 286.964 260.385 Q286.964 251.635 290.02 247.052 Q293.099 242.445 298.909 242.445 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip740)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip740)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip740)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip740)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip740)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip740)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip742)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1043.22 400.199,942.531 400.786,850.146 401.372,765.506 401.958,688.095 402.545,617.437 403.131,553.089 403.718,494.641 404.304,535.749 404.891,483.479 405.477,436.274 406.063,393.807 406.65,355.772 407.236,321.881 407.823,291.865 408.409,265.471 408.995,301.153 409.582,280.23 410.168,261.052 410.755,244.73 411.341,231.071 411.927,219.895 412.514,250.292 413.1,278.215 413.687,271.362 414.273,297.291 414.86,294.602 415.446,319.41 416.032,316.882 416.619,340.09 417.205,362.41 417.792,364.753 418.378,367.382 418.964,371.494 419.551,376.007 420.137,413.113 420.724,419.049 421.31,453.296 421.896,472.58 422.483,477.186 423.069,483.459 423.656,500.979 424.242,517.313 424.829,535.512 425.415,543.76 426.001,551.864 426.588,569.657 427.174,578.334 427.761,595.179 428.347,619.228 428.933,628.048 429.52,650.616 430.106,660.583 430.693,676.639 431.279,686.176 431.865,712.357 432.452,726.204 433.038,740.383 433.625,748.797 434.211,762.241 434.798,779.145 435.384,791.193 435.97,798.983 436.557,807.1 437.143,823.152 437.73,838.534 438.316,845.661 438.902,856.406 439.489,874.272 440.075,883.928 440.662,893.704 441.248,903.053 441.835,918.327 442.421,927.156 443.007,935.562 443.594,949.239 444.18,962.406 444.767,970.013 445.353,982.452 445.939,994.477 446.526,1006.13 447.112,1014.93 447.699,1023.52 448.285,1029.38 448.871,1030.84 449.458,1036.68 450.044,1045.19 450.631,1053.09 451.217,1063.18 451.804,1066.25 452.39,1069.33 452.976,1076.59 453.563,1087.61 454.149,1088.33 454.736,1093.37 455.322,1096.44 455.908,1102.79 456.495,1105.71 457.081,1110.29 457.668,1114.74 458.254,1119.1 458.84,1130.6 459.427,1134.49 460.013,1138.38 460.6,1140.37 461.186,1142.16 461.773,1143.97 462.359,1145.95 462.945,1149.54 463.532,1151.31 464.118,1154.73 464.705,1156.54 465.291,1161.61 465.877,1163.14 466.464,1166.24 467.05,1167.7 467.637,1170.9 468.223,1173.79 468.809,1179.49 469.396,1183.64 469.982,1185.98 470.569,1191.52 471.155,1194.9 471.742,1196.8 472.328,1197.04 472.914,1199.34 473.501,1200.07 474.087,1202.2 474.674,1202.75 475.26,1206.39 475.846,1206.74 476.433,1207.23 477.019,1208.86 477.606,1213.5 478.192,1216.33 478.778,1217.81 479.365,1220.41 479.951,1219.06 480.538,1221.63 481.124,1225.73 481.711,1229.32 482.297,1230.2 482.883,1233.52 483.47,1235.74 484.056,1233.76 484.643,1231.93 485.229,1231.39 485.815,1232.26 486.402,1233.14 486.988,1232.92 487.575,1233.86 488.161,1230.7 488.748,1230.4 489.334,1232.72 489.92,1235.1 490.507,1235.75 491.093,1235.31 491.68,1237.2 492.266,1239.44 492.852,1237.75 493.439,1237.37 494.025,1238.32 494.612,1237.72 495.198,1237.44 495.784,1239.68 496.371,1237.93 496.957,1236.14 497.544,1236.35 498.13,1237.23 498.717,1237.84 499.303,1237.34 499.889,1236.94 500.476,1233.95 501.062,1234.9 501.649,1233.51 502.235,1233.69 502.821,1235.07 503.408,1237.76 503.994,1241.39 504.581,1242.94 505.167,1242.19 505.753,1241.82 506.34,1243.96 506.926,1243.17 507.513,1242.61 508.099,1242.44 508.686,1244.35 509.272,1244.74 509.858,1243.97 510.445,1244.7 511.031,1242.78 511.618,1241.93 512.204,1244.08 512.79,1243.34 513.377,1244.07 513.963,1243.18 514.55,1243.87 515.136,1242.17 515.722,1244.34 516.309,1245.07 516.895,1246.73 517.482,1247.28 518.068,1244.19 518.655,1243.78 519.241,1245.73 519.827,1245.28 520.414,1243.66 521,1244.46 521.587,1248.86 522.173,1248.28 522.759,1248.87 523.346,1250.53 523.932,1249.52 524.519,1248.59 525.105,1246.3 525.691,1246.51 526.278,1246.9 526.864,1247.38 527.451,1245.37 528.037,1247.06 528.624,1247.33 529.21,1247.78 529.796,1248.07 530.383,1247.37 530.969,1246.43 531.556,1243.47 532.142,1241.74 532.728,1241.12 533.315,1240.38 533.901,1240.03 534.488,1240.96 535.074,1245.29 535.661,1244.74 536.247,1243.89 536.833,1243.18 537.42,1242.31 538.006,1239.36 538.593,1240.2 539.179,1244.65 539.765,1243.96 540.352,1244.53 540.938,1246.07 541.525,1243.97 542.111,1244.33 542.697,1243.57 543.284,1245.55 543.87,1243.25 544.457,1242.7 545.043,1239.69 545.63,1239.11 546.216,1240.11 546.802,1238.34 547.389,1237.75 547.975,1237.26 548.562,1239.19 549.148,1238.79 549.734,1238.3 550.321,1241.27 550.907,1238.41 551.494,1236.72 552.08,1235.22 552.666,1235.01 553.253,1234.52 553.839,1234.23 554.426,1235.13 555.012,1233.42 555.599,1233.24 556.185,1236.56 556.771,1236.28 557.358,1236.02 557.944,1239.28 558.531,1240.01 559.117,1241.59 559.703,1240.83 560.29,1241.22 560.876,1239.51 561.463,1240.07 562.049,1240.81 562.635,1239 563.222,1239.78 563.808,1241.57 564.395,1242.02 564.981,1241.19 565.568,1241.99 566.154,1241.41 566.74,1240.73 567.327,1240.15 567.913,1239.47 568.5,1238.97 569.086,1239.55 569.672,1240.26 570.259,1242.1 570.845,1241.39 571.432,1240.88 572.018,1241.16 572.605,1239.21 573.191,1238.49 573.777,1239.24 574.364,1237.38 574.95,1235.57 575.537,1234.91 576.123,1236.6 576.709,1237.23 577.296,1239.03 577.882,1235.8 578.469,1234.11 579.055,1234.8 579.641,1234.22 580.228,1233.73 580.814,1234.21 581.401,1233.79 581.987,1235.64 582.574,1232.79 583.16,1234.98 583.746,1234.19 584.333,1228.82 584.919,1231.11 585.506,1235.78 586.092,1235.08 586.678,1234.6 587.265,1232.8 587.851,1232.35 588.438,1235.8 589.024,1236.46 589.61,1236.08 590.197,1235.76 590.783,1235.02 591.37,1235.68 591.956,1235.13 592.543,1235.51 593.129,1233.66 593.715,1234.65 594.302,1231.66 594.888,1234.75 595.475,1234.4 596.061,1232.44 596.647,1232.05 597.234,1232.76 597.82,1229.94 598.407,1227.11 598.993,1226.88 599.579,1226.54 600.166,1225.45 600.752,1229.02 601.339,1227.42 601.925,1228.29 602.512,1230.33 603.098,1231.26 603.684,1228.59 604.271,1227.15 604.857,1226.8 605.444,1226.57 606.03,1226.43 606.616,1226.27 607.203,1227.17 607.789,1230.76 608.376,1230.48 608.962,1231.55 609.548,1230.99 610.135,1232.92 610.721,1233.53 611.308,1233.94 611.894,1234.51 612.481,1230.25 613.067,1231.22 613.653,1229.8 614.24,1229.41 614.826,1228.98 615.413,1229.7 615.999,1230.69 616.585,1231.51 617.172,1231.06 617.758,1231.77 618.345,1229.9 618.931,1227.18 619.518,1229.42 620.104,1227.87 620.69,1226.21 621.277,1226 621.863,1220.8 622.45,1222.08 623.036,1221.92 623.622,1223.31 624.209,1223.35 624.795,1224.15 625.382,1222.94 625.968,1221.43 626.554,1221.65 627.141,1222.95 627.727,1224.25 628.314,1222.63 628.9,1223.82 629.487,1223.65 630.073,1222.15 630.659,1221.21 631.246,1224.68 631.832,1222.17 632.419,1220.82 633.005,1219.59 633.591,1218.38 634.178,1219.91 634.764,1220.37 635.351,1219.3 635.937,1218.15 636.523,1220.5 637.11,1222.95 637.696,1224.27 638.283,1225.47 638.869,1224.16 639.456,1226.23 640.042,1222.21 640.628,1220.87 641.215,1222.23 641.801,1220.12 642.388,1220.24 642.974,1220.24 643.56,1222.72 644.147,1222.75 644.733,1221.49 645.32,1221.29 645.906,1226.06 646.492,1223.4 647.079,1221.83 647.665,1222 648.252,1223.32 648.838,1223.09 649.425,1221.74 650.011,1222.92 650.597,1221.53 651.184,1221.36 651.77,1217.48 652.357,1221.28 652.943,1221.11 653.529,1219.78 654.116,1219.88 654.702,1217.42 655.289,1218.65 655.875,1220.01 656.462,1221.2 657.048,1222.38 657.634,1223.35 658.221,1223.3 658.807,1223.08 659.394,1221.4 659.98,1220.08 660.566,1220.21 661.153,1221.16 661.739,1221.01 662.326,1221.2 662.912,1218.54 663.498,1219.46 664.085,1220.65 664.671,1221.88 665.258,1220.56 665.844,1221.76 666.431,1220.41 667.017,1221.85 667.603,1221.8 668.19,1220.47 668.776,1221.71 669.363,1221.6 669.949,1217.8 670.535,1219.18 671.122,1217.06 671.708,1217.09 672.295,1218.23 672.881,1219.26 673.467,1220.79 674.054,1221.85 674.64,1222.76 675.227,1222.8 675.813,1224.72 676.4,1223.33 676.986,1222.79 677.572,1222.61 678.159,1222.31 678.745,1222.06 679.332,1220.85 679.918,1222.09 680.504,1223.21 681.091,1222.07 681.677,1223.33 682.264,1224.29 682.85,1222.74 683.436,1226.11 684.023,1226.88 684.609,1225.35 685.196,1223.8 685.782,1223.59 686.369,1221.06 686.955,1221.01 687.541,1219.73 688.128,1219.67 688.714,1218.39 689.301,1219.39 689.887,1219.45 690.473,1220.71 691.06,1220.34 691.646,1218.93 692.233,1220.08 692.819,1219.86 693.405,1217.45 693.992,1218.57 694.578,1215.95 695.165,1218.39 695.751,1218.39 696.338,1218.37 696.924,1220.85 697.51,1220.83 698.097,1223.18 698.683,1221.66 699.27,1221.32 699.856,1222.57 700.442,1223.49 701.029,1224.36 701.615,1223.99 702.202,1224.87 702.788,1225.56 703.375,1223.91 703.961,1223.93 704.547,1224.88 705.134,1223.16 705.72,1220.6 706.307,1220.71 706.893,1221.61 707.479,1223.99 708.066,1223.83 708.652,1223.62 709.239,1223.24 709.825,1220.69 710.411,1218.16 710.998,1216.68 711.584,1218.97 712.171,1217.62 712.757,1217.53 713.344,1216.03 713.93,1217.26 714.516,1215.81 715.103,1219.53 715.689,1219.23 716.276,1220.07 716.862,1218.65 717.448,1224.66 718.035,1225.35 718.621,1225.81 719.208,1225.26 719.794,1226.01 720.38,1226.68 720.967,1225 721.553,1225.91 722.14,1224.14 722.726,1226.12 723.313,1224.5 723.899,1224.02 724.485,1223.5 725.072,1221.95 725.658,1221.47 726.245,1223.62 726.831,1221.88 727.417,1220.43 728.004,1219.08 728.59,1222.55 729.177,1222.34 729.763,1223.27 730.349,1221.85 730.936,1221.64 731.522,1221.56 732.109,1222.18 732.695,1224.1 733.282,1221.41 733.868,1219.75 734.454,1215.85 735.041,1214.89 735.627,1214.8 736.214,1213.94 736.8,1210.4 737.386,1210.82 737.973,1211.26 738.559,1211.43 739.146,1210.5 739.732,1211.95 740.318,1212.13 740.905,1211.14 741.491,1210.17 742.078,1210.88 742.664,1207.94 743.251,1207.32 743.837,1206.75 744.423,1207.3 745.01,1207.83 745.596,1208.5 746.183,1207.91 746.769,1209.68 747.355,1211.16 747.942,1210.1 748.528,1211.6 749.115,1210.78 749.701,1211.57 750.288,1214.23 750.874,1215.62 751.46,1215.84 752.047,1214.62 752.633,1217.23 753.22,1214.96 753.806,1217.34 754.392,1216.22 754.979,1216.42 755.565,1214.99 756.152,1215.07 756.738,1215.02 757.324,1215.08 757.911,1215.1 758.497,1216.49 759.084,1214.04 759.67,1213.02 760.257,1215.6 760.843,1214.33 761.429,1215.51 762.016,1214.25 762.602,1213.12 763.189,1213.53 763.775,1216.21 764.361,1216.25 764.948,1216.13 765.534,1217.41 766.121,1215.88 766.707,1215.68 767.293,1214.19 767.88,1214.2 768.466,1214.24 769.053,1213.15 769.639,1214.24 770.226,1215.61 770.812,1215.55 771.398,1216.79 771.985,1215.36 772.571,1216.56 773.158,1216.55 773.744,1217.79 774.33,1217.94 774.917,1217.46 775.503,1217.49 776.09,1216.23 776.676,1215.06 777.262,1213.89 777.849,1212.94 778.435,1213.31 779.022,1213.29 779.608,1214.6 780.195,1213.59 780.781,1212.36 781.367,1212.68 781.954,1212.98 782.54,1212.14 783.127,1212.13 783.713,1213.58 784.299,1213.63 784.886,1213.99 785.472,1212.75 786.059,1214.25 786.645,1214.38 787.232,1215.69 787.818,1215.75 788.404,1217.01 788.991,1217 789.577,1216.75 790.164,1214.48 790.75,1214.46 791.336,1215.7 791.923,1213.18 792.509,1214.49 793.096,1214.46 793.682,1216.75 794.268,1215.43 794.855,1216.58 795.441,1216.61 796.028,1219.08 796.614,1220.2 797.201,1220.18 797.787,1220.08 798.373,1217.29 798.96,1217.31 799.546,1215.96 800.133,1215.94 800.719,1214.9 801.305,1212.49 801.892,1210.2 802.478,1208.03 803.065,1208.39 803.651,1212.37 804.237,1212.27 804.824,1210.03 805.41,1209.04 805.997,1206.98 806.583,1208.33 807.17,1209.84 807.756,1207.58 808.342,1208.06 808.929,1209.52 809.515,1209.78 810.102,1209.97 810.688,1211.27 811.274,1216.35 811.861,1217.59 812.447,1217.33 813.034,1216.11 813.62,1214.66 814.206,1213.76 814.793,1212.43 815.379,1212.42 815.966,1211.4 816.552,1210.47 817.139,1210.55 817.725,1211.34 818.311,1209.34 818.898,1209.49 819.484,1210.95 820.071,1209.85 820.657,1210.39 821.243,1210.61 821.83,1209.66 822.416,1213.72 823.003,1213.67 823.589,1214.05 824.175,1212.91 824.762,1212.06 825.348,1212.34 825.935,1215.06 826.521,1213.96 827.108,1213.96 827.694,1214 828.28,1216.68 828.867,1219.09 829.453,1218.78 830.04,1218.69 830.626,1218.16 831.212,1216.92 831.799,1218.15 832.385,1218.01 832.972,1216.58 833.558,1218.94 834.145,1218.88 834.731,1218.79 835.317,1220.85 835.904,1221.67 836.49,1220.06 837.077,1220.99 837.663,1220.77 838.249,1219.15 838.836,1218.65 839.422,1217.28 840.009,1218.46 840.595,1217.03 841.181,1214.69 841.768,1213.23 842.354,1214.24 842.941,1216.89 843.527,1214.27 844.114,1216.97 844.7,1217.95 845.286,1219.02 845.873,1219.67 846.459,1219.37 847.046,1217.77 847.632,1217.44 848.218,1217.38 848.805,1218.39 849.391,1218.03 849.978,1217.95 850.564,1218.97 851.15,1221.05 851.737,1219.23 852.323,1220.14 852.91,1218.94 853.496,1221.2 854.083,1220.81 854.669,1221.36 855.255,1223.39 855.842,1221.49 856.428,1221.99 857.015,1224.99 857.601,1224.6 858.187,1223.86 858.774,1224.28 859.36,1222.79 859.947,1224.75 860.533,1221.94 861.119,1223.83 861.706,1223.47 862.292,1224.08 862.879,1225.69 863.465,1225.14 864.052,1224.74 864.638,1222.97 865.224,1219.99 865.811,1219.36 866.397,1219.07 866.984,1218.91 867.57,1217.06 868.156,1217.99 868.743,1216.61 869.329,1216.76 869.916,1214.36 870.502,1212 871.089,1213.41 871.675,1215.68 872.261,1214.3 872.848,1214.13 873.434,1212.67 874.021,1210.34 874.607,1212.91 875.193,1213.03 875.78,1211.96 876.366,1212.1 876.953,1207.3 877.539,1203.81 878.125,1204.24 878.712,1204.93 879.298,1205.44 879.885,1209.6 880.471,1207.38 881.058,1207.62 881.644,1208.21 882.23,1209.95 882.817,1211.3 883.403,1211.26 883.99,1211.21 884.576,1211.32 885.162,1211.55 885.749,1210.36 886.335,1210.58 886.922,1209.59 887.508,1211.03 888.094,1212.6 888.681,1213.67 889.267,1214.8 889.854,1216.06 890.44,1215.88 891.027,1215.69 891.613,1215.74 892.199,1215.56 892.786,1220.4 893.372,1220.08 893.959,1218.56 894.545,1218.35 895.131,1218.17 895.718,1218.05 896.304,1221.13 896.891,1218.4 897.477,1218.01 898.063,1220.33 898.65,1218.91 899.236,1218.54 899.823,1214.84 900.409,1214.58 900.996,1209.62 901.582,1210.89 902.168,1207.53 902.755,1207.6 903.341,1206.68 903.928,1204.66 904.514,1206.41 905.1,1205.88 905.687,1206.25 906.273,1206.53 906.86,1204.53 907.446,1205.11 908.032,1203.1 908.619,1202.58 909.205,1204.59 909.792,1208.64 910.378,1210.24 910.965,1211.53 911.551,1210.48 912.137,1210.75 912.724,1209.51 913.31,1208.35 913.897,1208.61 914.483,1209.05 915.069,1210.46 915.656,1211.77 916.242,1208.42 916.829,1208.54 917.415,1206.48 918.002,1205.38 918.588,1206.08 919.174,1205.56 919.761,1207.18 920.347,1207.66 920.934,1207.05 921.52,1205.98 922.106,1209.93 922.693,1210.28 923.279,1212.65 923.866,1215.39 924.452,1217.55 925.038,1217.47 925.625,1214.92 926.211,1215.99 926.798,1214.48 927.384,1215.7 927.971,1216.87 928.557,1217.9 929.143,1221.28 929.73,1222.05 930.316,1220.36 930.903,1220.18 931.489,1222.32 932.075,1220.94 932.662,1220.26 933.248,1218.64 933.835,1220.49 934.421,1219.95 935.007,1219.51 935.594,1216.74 936.18,1217.83 936.767,1216.42 937.353,1212.63 937.94,1210.21 938.526,1210.14 939.112,1211.91 939.699,1213.12 940.285,1213.09 940.872,1211.97 941.458,1212.07 942.044,1213.61 942.631,1213.67 943.217,1214.96 943.804,1213.81 944.39,1212.54 944.976,1212.78 945.563,1212.48 946.149,1211.43 946.736,1212.77 947.322,1211.67 947.909,1210.61 948.495,1210.79 949.081,1209.57 949.668,1207.16 950.254,1212.42 950.841,1213.66 951.427,1213.6 952.013,1212.58 952.6,1214.19 953.186,1215.37 953.773,1215.14 954.359,1214.01 954.945,1212.91 955.532,1214.35 956.118,1215.6 956.705,1217.9 957.291,1217.68 957.878,1218.52 958.464,1218.02 959.05,1218.81 959.637,1219.61 960.223,1218.28 960.81,1218.05 961.396,1218.73 961.982,1219.56 962.569,1219.5 963.155,1216.84 963.742,1215.42 964.328,1213.98 964.915,1212.67 965.501,1211.55 966.087,1212.91 966.674,1212.98 967.26,1214.25 967.847,1215.45 968.433,1212.95 969.019,1212.8 969.606,1216.11 970.192,1218.43 970.779,1220.53 971.365,1219.27 971.951,1218.99 972.538,1217.71 973.124,1215.11 973.711,1219.88 974.297,1219.6 974.884,1220.59 975.47,1218.97 976.056,1219.7 976.643,1218.06 977.229,1216.42 977.816,1214.91 978.402,1214.72 978.988,1218.35 979.575,1218.14 980.161,1214.22 980.748,1211.81 981.334,1214.54 981.92,1214.51 982.507,1211.91 983.093,1211.7 983.68,1209.11 984.266,1209.41 984.853,1209.82 985.439,1213.22 986.025,1216.84 986.612,1216.7 987.198,1221.62 987.785,1218.72 988.371,1215.94 988.957,1215.88 989.544,1215.88 990.13,1215.8 990.717,1214.59 991.303,1214.59 991.889,1213.63 992.476,1213.44 993.062,1213.47 993.649,1213.51 994.235,1215.96 994.822,1215.62 995.408,1215.5 995.994,1216.64 996.581,1216.55 997.167,1216.31 997.754,1213.52 998.34,1220.57 998.926,1222.41 999.513,1220.78 1000.1,1222.77 1000.69,1222.35 1001.27,1221.88 1001.86,1216.58 1002.44,1216.64 1003.03,1216.42 1003.62,1215.08 1004.2,1212.51 1004.79,1212.54 1005.38,1212.57 1005.96,1215.13 1006.55,1216.2 1007.14,1216.04 1007.72,1215.93 1008.31,1218.16 1008.9,1218.93 1009.48,1218.76 1010.07,1217.16 1010.65,1214.58 1011.24,1213.17 1011.83,1213.03 1012.41,1214.14 1013,1211.62 1013.59,1210.6 1014.17,1210.48 1014.76,1210.46 1015.35,1209.42 1015.93,1208.45 1016.52,1207.22 1017.11,1207.39 1017.69,1210.16 1018.28,1212.82 1018.86,1215.28 1019.45,1215.54 1020.04,1215.35 1020.62,1216.31 1021.21,1214.86 1021.8,1214.94 1022.38,1214.71 1022.97,1214.49 1023.56,1213.2 1024.14,1210.81 1024.73,1211.4 1025.32,1211.7 1025.9,1211.95 1026.49,1214.39 1027.07,1214.51 1027.66,1214.27 1028.25,1215.52 1028.83,1215.69 1029.42,1214.24 1030.01,1213.09 1030.59,1214.22 1031.18,1212.72 1031.77,1212.53 1032.35,1216.29 1032.94,1216.06 1033.52,1213.29 1034.11,1213.3 1034.7,1213.33 1035.28,1215.69 1035.87,1216.66 1036.46,1218.81 1037.04,1218.5 1037.63,1216.86 1038.22,1217.6 1038.8,1218.68 1039.39,1218.36 1039.98,1216.97 1040.56,1219.06 1041.15,1218.62 1041.73,1216.95 1042.32,1215.6 1042.91,1215.23 1043.49,1215.16 1044.08,1215.09 1044.67,1217.33 1045.25,1215.65 1045.84,1216.8 1046.43,1216.5 1047.01,1216.39 1047.6,1216.32 1048.19,1214.76 1048.77,1216.01 1049.36,1214.26 1049.94,1213.91 1050.53,1213.76 1051.12,1213.67 1051.7,1213.58 1052.29,1209.96 1052.88,1207.57 1053.46,1209.08 1054.05,1209.59 1054.64,1209.89 1055.22,1211.05 1055.81,1212.17 1056.39,1209.55 1056.98,1213.35 1057.57,1212.16 1058.15,1210.71 1058.74,1209.53 1059.33,1208.54 1059.91,1210.2 1060.5,1211.58 1061.09,1209.46 1061.67,1212.12 1062.26,1213.61 1062.85,1212.24 1063.43,1209.9 1064.02,1208.53 1064.6,1207.32 1065.19,1206.52 1065.78,1206.87 1066.36,1207.07 1066.95,1206.35 1067.54,1205.48 1068.12,1209.4 1068.71,1211.07 1069.3,1211.37 1069.88,1212.54 1070.47,1212.93 1071.06,1211.63 1071.64,1210.24 1072.23,1210.51 1072.81,1210.59 1073.4,1211.93 1073.99,1210.69 1074.57,1211.11 1075.16,1213.58 1075.75,1209.93 1076.33,1207.8 1076.92,1208.06 1077.51,1207.18 1078.09,1207.33 1078.68,1209.15 1079.26,1208.17 1079.85,1209.43 1080.44,1209.6 1081.02,1208.68 1081.61,1207.68 1082.2,1208.87 1082.78,1208.21 1083.37,1209.67 1083.96,1211.11 1084.54,1210.01 1085.13,1211.31 1085.72,1211.4 1086.3,1211.31 1086.89,1213.87 1087.47,1213.87 1088.06,1214.93 1088.65,1215.01 1089.23,1216.31 1089.82,1216.64 1090.41,1213.95 1090.99,1216.29 1091.58,1220.73 1092.17,1221.67 1092.75,1221.29 1093.34,1221.97 1093.93,1218.91 1094.51,1214.99 1095.1,1215.98 1095.68,1216.93 1096.27,1216.57 1096.86,1215.3 1097.44,1217.72 1098.03,1214.86 1098.62,1212.46 1099.2,1209.95 1099.79,1208.84 1100.38,1212.6 1100.96,1211.5 1101.55,1213.99 1102.14,1214.11 1102.72,1213.93 1103.31,1215.06 1103.89,1217.37 1104.48,1217.14 1105.07,1215.68 1105.65,1215.65 1106.24,1214.54 1106.83,1214.65 1107.41,1213.36 1108,1212.56 1108.59,1212.47 1109.17,1213.8 1109.76,1214.95 1110.34,1219.64 1110.93,1219.23 1111.52,1216.39 1112.1,1215.91 1112.69,1216.04 1113.28,1214.75 1113.86,1215.72 1114.45,1217.92 1115.04,1217.75 1115.62,1218.58 1116.21,1219.57 1116.8,1220.58 1117.38,1220.12 1117.97,1219.68 1118.55,1220.38 1119.14,1219.92 1119.73,1219.6 1120.31,1217.98 1120.9,1215.37 1121.49,1216.64 1122.07,1216.57 1122.66,1213.74 1123.25,1215.06 1123.83,1215.75 1124.42,1215.45 1125.01,1216.45 1125.59,1216.34 1126.18,1217.28 1126.76,1216.09 1127.35,1217.01 1127.94,1218.89 1128.52,1219.83 1129.11,1219.37 1129.7,1216.51 1130.28,1216.33 1130.87,1216.11 1131.46,1217.26 1132.04,1215.62 1132.63,1215.52 1133.21,1216.65 1133.8,1216.85 1134.39,1216.85 1134.97,1216.78 1135.56,1216.58 1136.15,1213.72 1136.73,1217.11 1137.32,1215.59 1137.91,1215.57 1138.49,1214.4 1139.08,1212.01 1139.67,1210.8 1140.25,1208.55 1140.84,1208.89 1141.42,1207.82 1142.01,1206.97 1142.6,1205.82 1143.18,1207.28 1143.77,1207.37 1144.36,1208.57 1144.94,1208.77 1145.53,1208.97 1146.12,1209.32 1146.7,1211.04 1147.29,1207.56 1147.88,1209.27 1148.46,1209.4 1149.05,1207.26 1149.63,1207.76 1150.22,1208.31 1150.81,1211 1151.39,1212.28 1151.98,1213.38 1152.57,1213.54 1153.15,1214.53 1153.74,1213.29 1154.33,1213.17 1154.91,1210.63 1155.5,1213.01 1156.09,1212.98 1156.67,1209.15 1157.26,1205.65 1157.84,1206.26 1158.43,1207.08 1159.02,1209.7 1159.6,1211.06 1160.19,1208.87 1160.78,1207.65 1161.36,1206.56 1161.95,1206.98 1162.54,1209.58 1163.12,1208.46 1163.71,1209.93 1164.29,1210.11 1164.88,1212.64 1165.47,1211.44 1166.05,1211.51 1166.64,1211.56 1167.23,1210.34 1167.81,1210.49 1168.4,1211.85 1168.99,1214.29 1169.57,1214.36 1170.16,1214.62 1170.75,1214.55 1171.33,1212.06 1171.92,1209.62 1172.5,1209.72 1173.09,1207.52 1173.68,1204.27 1174.26,1204.67 1174.85,1203.81 1175.44,1205.64 1176.02,1207.35 1176.61,1211.6 1177.2,1209.16 1177.78,1209.25 1178.37,1210.59 1178.96,1209.46 1179.54,1210.85 1180.13,1213.34 1180.71,1213.17 1181.3,1213.29 1181.89,1214.49 1182.47,1212.05 1183.06,1211.15 1183.65,1211 1184.23,1212.24 1184.82,1213.6 1185.41,1213.61 1185.99,1213.54 1186.58,1214.77 1187.16,1215.96 1187.75,1214.65 1188.34,1214.54 1188.92,1213.19 1189.51,1210.86 1190.1,1212.32 1190.68,1209.05 1191.27,1209.07 1191.86,1207.89 1192.44,1208.05 1193.03,1208.27 1193.62,1208.63 1194.2,1208.89 1194.79,1207.88 1195.37,1209.42 1195.96,1210.95 1196.55,1211.05 1197.13,1211.11 1197.72,1208.77 1198.31,1211.66 1198.89,1211.97 1199.48,1213.25 1200.07,1213.33 1200.65,1212.1 1201.24,1213.58 1201.83,1213.51 1202.41,1213.56 1203,1213.65 1203.58,1213.97 1204.17,1212.69 1204.76,1212.48 1205.34,1211.28 1205.93,1212.65 1206.52,1213.7 1207.1,1214.86 1207.69,1218.97 1208.28,1220.01 1208.86,1221.79 1209.45,1222.62 1210.03,1221.04 1210.62,1217.05 1211.21,1216.89 1211.79,1215.41 1212.38,1215.31 1212.97,1218.56 1213.55,1214.73 1214.14,1213.37 1214.73,1215.54 1215.31,1215.53 1215.9,1215.37 1216.49,1213.91 1217.07,1216.32 1217.66,1216.31 1218.24,1215.94 1218.83,1215.83 1219.42,1215.64 1220,1215.4 1220.59,1214.29 1221.18,1213.14 1221.76,1213.23 1222.35,1213.35 1222.94,1212.11 1223.52,1213.09 1224.11,1210.66 1224.7,1210.68 1225.28,1210.79 1225.87,1210.69 1226.45,1210.88 1227.04,1212.22 1227.63,1212.35 1228.21,1213.32 1228.8,1210.76 1229.39,1212.19 1229.97,1212.13 1230.56,1212.94 1231.15,1214.06 1231.73,1212.72 1232.32,1214.1 1232.91,1211.55 1233.49,1210.32 1234.08,1211.91 1234.66,1211.94 1235.25,1213.13 1235.84,1214.23 1236.42,1212.73 1237.01,1213.81 1237.6,1213.84 1238.18,1213.87 1238.77,1212.61 1239.36,1213.66 1239.94,1212.39 1240.53,1210.96 1241.11,1209.84 1241.7,1211.38 1242.29,1214.83 1242.87,1213.38 1243.46,1213.22 1244.05,1214.47 1244.63,1213.04 1245.22,1214.05 1245.81,1214.02 1246.39,1214.09 1246.98,1211.78 1247.57,1214.26 1248.15,1214.33 1248.74,1215.49 1249.32,1215.45 1249.91,1217.73 1250.5,1216.29 1251.08,1216.08 1251.67,1214.62 1252.26,1215.78 1252.84,1215.62 1253.43,1215.64 1254.02,1214.37 1254.6,1213.2 1255.19,1213.17 1255.78,1212.1 1256.36,1213.13 1256.95,1213.01 1257.53,1211.89 1258.12,1209.45 1258.71,1209.66 1259.29,1209.66 1259.88,1208.74 1260.47,1207.7 1261.05,1209.08 1261.64,1209.23 1262.23,1209.35 1262.81,1210.76 1263.4,1210.84 1263.98,1210.88 1264.57,1209.88 1265.16,1209.75 1265.74,1209.75 1266.33,1210.04 1266.92,1210.05 1267.5,1210.35 1268.09,1214.04 1268.68,1212.76 1269.26,1215.29 1269.85,1213.84 1270.44,1214.87 1271.02,1217.05 1271.61,1215.48 1272.19,1214.1 1272.78,1217.76 1273.37,1213.97 1273.95,1213.71 1274.54,1211.26 1275.13,1209.95 1275.71,1211.38 1276.3,1210.45 1276.89,1209.03 1277.47,1206.82 1278.06,1209.7 1278.65,1210.99 1279.23,1208.75 1279.82,1208.93 1280.4,1208.9 1280.99,1210.44 1281.58,1208.19 1282.16,1210.72 1282.75,1209.48 1283.34,1208.47 1283.92,1208.94 1284.51,1209.18 1285.1,1209.78 1285.68,1212.28 1286.27,1210.92 1286.86,1212.1 1287.44,1210.9 1288.03,1211.1 1288.61,1210.98 1289.2,1212.21 1289.79,1212.27 1290.37,1214.68 1290.96,1214.61 1291.55,1214.63 1292.13,1213.43 1292.72,1213.56 1293.31,1212.41 1293.89,1211.09 1294.48,1211.16 1295.06,1212.55 1295.65,1213.81 1296.24,1213.78 1296.82,1212.72 1297.41,1211.45 1298,1213.02 1298.58,1214.1 1299.17,1214.15 1299.76,1212.77 1300.34,1211.49 1300.93,1210.79 1301.52,1212.27 1302.1,1211 1302.69,1208.73 1303.27,1209.11 1303.86,1209.33 1304.45,1209.46 1305.03,1209.36 1305.62,1210.69 1306.21,1209.42 1306.79,1209.67 1307.38,1210.89 1307.97,1211.16 1308.55,1208.68 1309.14,1208.73 1309.73,1207.65 1310.31,1207.99 1310.9,1209.32 1311.48,1210.81 1312.07,1210.95 1312.66,1212.25 1313.24,1212.07 1313.83,1212.04 1314.42,1213.2 1315,1213.23 1315.59,1215.76 1316.18,1216.74 1316.76,1217.78 1317.35,1218.55 1317.93,1217.05 1318.52,1215.74 1319.11,1214.19 1319.69,1214.35 1320.28,1214.36 1320.87,1214.23 1321.45,1213.94 1322.04,1213.74 1322.63,1213.94 1323.21,1210.2 1323.8,1209.25 1324.39,1211.85 1324.97,1211.67 1325.56,1211.59 1326.14,1212.93 1326.73,1212.83 1327.32,1211.52 1327.9,1215.13 1328.49,1213.99 1329.08,1213.9 1329.66,1213.91 1330.25,1214.02 1330.84,1212.92 1331.42,1213.07 1332.01,1215.61 1332.6,1216.77 1333.18,1215.4 1333.77,1215.38 1334.35,1216.52 1334.94,1217.3 1335.53,1217.16 1336.11,1218.13 1336.7,1217.56 1337.29,1217.3 1337.87,1216.07 1338.46,1213.62 1339.05,1212.22 1339.63,1212.26 1340.22,1209.81 1340.8,1209.86 1341.39,1211.02 1341.98,1212.47 1342.56,1213.67 1343.15,1213.71 1343.74,1212.67 1344.32,1212.58 1344.91,1215.01 1345.5,1214.64 1346.08,1214.37 1346.67,1214.15 1347.26,1212.74 1347.84,1211.48 1348.43,1211.58 1349.01,1210.48 1349.6,1210.66 1350.19,1212.01 1350.77,1210.73 1351.36,1212.05 1351.95,1212.54 1352.53,1212.83 1353.12,1213.07 1353.71,1211.87 1354.29,1211.71 1354.88,1211.55 1355.47,1213.03 1356.05,1213.14 1356.64,1214.26 1357.22,1213.17 1357.81,1213.14 1358.4,1212.81 1358.98,1213.98 1359.57,1214.02 1360.16,1211.65 1360.74,1210.15 1361.33,1210.12 1361.92,1209.08 1362.5,1209.34 1363.09,1212 1363.68,1212.34 1364.26,1207.58 1364.85,1208.92 1365.43,1209.29 1366.02,1209.61 1366.61,1208.78 1367.19,1208.98 1367.78,1209.27 1368.37,1208.73 1368.95,1209.19 1369.54,1209.76 1370.13,1210.04 1370.71,1210.39 1371.3,1210.55 1371.88,1209.44 1372.47,1208.46 1373.06,1212.46 1373.64,1212.32 1374.23,1213.59 1374.82,1215.86 1375.4,1215.92 1375.99,1215.62 1376.58,1216.64 1377.16,1216.29 1377.75,1216.01 1378.34,1214.54 1378.92,1214.41 1379.51,1212.89 1380.09,1212.88 1380.68,1212.9 1381.27,1211.76 1381.85,1209.3 1382.44,1207.3 1383.03,1211.26 1383.61,1208.77 1384.2,1210.33 1384.79,1209.35 1385.37,1209.58 1385.96,1212.28 1386.55,1212.32 1387.13,1211.27 1387.72,1210.25 1388.3,1211.66 1388.89,1213 1389.48,1211.68 1390.06,1210.49 1390.65,1210.6 1391.24,1211.96 1391.82,1211.93 1392.41,1212.06 1393,1212.09 1393.58,1212.45 1394.17,1213.54 1394.75,1212.21 1395.34,1212.08 1395.93,1209.75 1396.51,1212.24 1397.1,1210.97 1397.69,1211.04 1398.27,1213.56 1398.86,1212.62 1399.45,1211.68 1400.03,1213.09 1400.62,1215.58 1401.21,1215.23 1401.79,1214.91 1402.38,1214.63 1402.96,1214.61 1403.55,1215.64 1404.14,1213.24 1404.72,1214.26 1405.31,1215.36 1405.9,1213.78 1406.48,1212.51 1407.07,1214.7 1407.66,1214.48 1408.24,1214.57 1408.83,1217.15 1409.42,1219.29 1410,1217.94 1410.59,1220.05 1411.17,1220.77 1411.76,1221.72 1412.35,1218.73 1412.93,1214.85 1413.52,1213.51 1414.11,1213.67 1414.69,1211.23 1415.28,1210.02 1415.87,1210.06 1416.45,1210.34 1417.04,1207.98 1417.63,1206.04 1418.21,1207.42 1418.8,1207.96 1419.38,1209.57 1419.97,1209.66 1420.56,1208.6 1421.14,1210.05 1421.73,1211.17 1422.32,1211.06 1422.9,1210.05 1423.49,1207.85 1424.08,1209.29 1424.66,1210.54 1425.25,1209.44 1425.83,1208.52 1426.42,1210.09 1427.01,1211.48 1427.59,1211.67 1428.18,1210.37 1428.77,1211.53 1429.35,1211.64 1429.94,1215.27 1430.53,1219.05 1431.11,1217.61 1431.7,1217.07 1432.29,1215.49 1432.87,1214.11 1433.46,1212.65 1434.04,1213.9 1434.63,1214.69 1435.22,1213.53 1435.8,1214.72 1436.39,1212.06 1436.98,1213.36 1437.56,1210.9 1438.15,1210.92 1438.74,1210.95 1439.32,1210.99 1439.91,1211.16 1440.5,1212.56 1441.08,1212.52 1441.67,1212.5 1442.25,1213.52 1442.84,1212.28 1443.43,1211.18 1444.01,1210.01 1444.6,1212.94 1445.19,1214.03 1445.77,1216.4 1446.36,1218.27 1446.95,1217.7 1447.53,1217.46 1448.12,1216.05 1448.7,1217.17 1449.29,1215.78 1449.88,1215.75 1450.46,1218.16 1451.05,1221.45 1451.64,1222.26 1452.22,1220.62 1452.81,1220.29 1453.4,1219.77 1453.98,1219.37 1454.57,1218.01 1455.16,1218.59 1455.74,1220.76 1456.33,1219.24 1456.91,1219.97 1457.5,1218.39 1458.09,1214.65 1458.67,1213.46 1459.26,1212.11 1459.85,1209.59 1460.43,1208.68 1461.02,1208.83 1461.61,1209.96 1462.19,1211.21 1462.78,1212.68 1463.37,1210.25 1463.95,1209.2 1464.54,1208.16 1465.12,1209.68 1465.71,1209.12 1466.3,1209.51 1466.88,1210.84 1467.47,1211 1468.06,1209.88 1468.64,1212.52 1469.23,1212.58 1469.82,1216.27 1470.4,1214.73 1470.99,1213.19 1471.57,1215.73 1472.16,1216.78 1472.75,1216.47 1473.33,1217.46 1473.92,1216.97 1474.51,1216.6 1475.09,1218.83 1475.68,1218.71 1476.27,1217.04 1476.85,1214.47 1477.44,1214.32 1478.03,1210.68 1478.61,1210.79 1479.2,1211.95 1479.78,1214.54 1480.37,1214.49 1480.96,1215.42 1481.54,1214.05 1482.13,1213.99 1482.72,1212.7 1483.3,1211.39 1483.89,1211.14 1484.48,1210.17 1485.06,1210.22 1485.65,1212.78 1486.24,1213.04 1486.82,1215.63 1487.41,1215.5 1487.99,1217.52 1488.58,1217.51 1489.17,1217.02 1489.75,1215.5 1490.34,1214.13 1490.93,1211.75 1491.51,1212.96 1492.1,1215.37 1492.69,1216.39 1493.27,1216.3 1493.86,1220.71 1494.45,1217.92 1495.03,1214.97 1495.62,1217.21 1496.2,1218.25 1496.79,1216.73 1497.38,1217.52 1497.96,1217.34 1498.55,1215.97 1499.14,1217.11 1499.72,1216.99 1500.31,1218.97 1500.9,1219.67 1501.48,1215.66 1502.07,1215.61 1502.65,1215.26 1503.24,1215.19 1503.83,1215.25 1504.41,1216.41 1505,1217.36 1505.59,1214.66 1506.17,1213.56 1506.76,1210.96 1507.35,1212.35 1507.93,1212.32 1508.52,1210.83 1509.11,1211.19 1509.69,1210.06 1510.28,1208.93 1510.86,1210.48 1511.45,1206.98 1512.04,1207.27 1512.62,1208.72 1513.21,1207.66 1513.8,1208.08 1514.38,1208.13 1514.97,1208.4 1515.56,1208.73 1516.14,1208.83 1516.73,1209.12 1517.32,1209.27 1517.9,1211.93 1518.49,1213.23 1519.07,1210.94 1519.66,1209.72 1520.25,1209.8 1520.83,1210.04 1521.42,1211.57 1522.01,1211.45 1522.59,1212.59 1523.18,1211.42 1523.77,1210.08 1524.35,1211.68 1524.94,1214.05 1525.52,1216.49 1526.11,1216.24 1526.7,1217.09 1527.28,1217.05 1527.87,1217.82 1528.46,1218.88 1529.04,1217.1 1529.63,1215.43 1530.22,1213.97 1530.8,1211.73 1531.39,1212.92 1531.98,1213.97 1532.56,1215.05 1533.15,1217.09 1533.73,1212.15 1534.32,1213.28 1534.91,1210.72 1535.49,1211.06 1536.08,1212.3 1536.67,1212.21 1537.25,1212.2 1537.84,1212.46 1538.43,1211.23 1539.01,1208.89 1539.6,1210.45 1540.19,1210.78 1540.77,1208.52 1541.36,1207.61 1541.94,1207.69 1542.53,1210.29 1543.12,1211.89 1543.7,1209.48 1544.29,1210.93 1544.88,1211.22 1545.46,1212.39 1546.05,1215.98 1546.64,1218.09 1547.22,1219.13 1547.81,1217.72 1548.4,1219.89 1548.98,1219.33 1549.57,1220.05 1550.15,1219.94 1550.74,1218.11 1551.33,1217.91 1551.91,1216.11 1552.5,1216.91 1553.09,1214.25 1553.67,1214.19 1554.26,1214.09 1554.85,1212.79 1555.43,1212.75 1556.02,1211.55 1556.6,1212.87 1557.19,1212.81 1557.78,1211.49 1558.36,1211.44 1558.95,1212.7 1559.54,1210.26 1560.12,1207.86 1560.71,1206.92 1561.3,1208.46 1561.88,1208.62 1562.47,1207.53 1563.06,1208.95 1563.64,1210.51 1564.23,1211.94 1564.81,1209.64 1565.4,1209.65 1565.99,1207.33 1566.57,1207.63 1567.16,1209.06 1567.75,1206.9 1568.33,1208.09 1568.92,1211.93 1569.51,1211.89 1570.09,1210.77 1570.68,1212.21 1571.27,1217.11 1571.85,1215.87 1572.44,1217.08 1573.02,1216.66 1573.61,1215.4 1574.2,1218.74 1574.78,1219.77 1575.37,1218.47 1575.96,1218.17 1576.54,1219.46 1577.13,1221.14 1577.72,1221.77 1578.3,1222.32 1578.89,1221.84 1579.47,1220.09 1580.06,1219.68 1580.65,1217.87 1581.23,1215.95 1581.82,1217 1582.41,1216.67 1582.99,1217.49 1583.58,1217.41 1584.17,1214.56 1584.75,1214.52 1585.34,1215.63 1585.93,1211.75 1586.51,1212.89 1587.1,1214.04 1587.68,1213.89 1588.27,1213.73 1588.86,1213.71 1589.44,1214.94 1590.03,1217.38 1590.62,1214.94 1591.2,1211.12 1591.79,1208.92 1592.38,1210.35 1592.96,1211.67 1593.55,1210.57 1594.14,1213.1 1594.72,1215.56 1595.31,1215.41 1595.89,1215.29 1596.48,1214.06 1597.07,1212.84 1597.65,1212.76 1598.24,1212.67 1598.83,1212.73 1599.41,1211.26 1600,1211.49 1600.59,1211.43 1601.17,1214.03 1601.76,1213.78 1602.34,1213.42 1602.93,1213.25 1603.52,1210.97 1604.1,1209.99 1604.69,1210.19 1605.28,1211.71 1605.86,1210.76 1606.45,1209.85 1607.04,1208.73 1607.62,1209.01 1608.21,1210.33 1608.8,1207.93 1609.38,1206.98 1609.97,1206.29 1610.55,1205.54 1611.14,1204.6 1611.73,1207.54 1612.31,1207.8 1612.9,1208.2 1613.49,1205.84 1614.07,1204.98 1614.66,1203.02 1615.25,1204.8 1615.83,1205.22 1616.42,1209.27 1617.01,1209.45 1617.59,1213.45 1618.18,1215.84 1618.76,1213.21 1619.35,1213.1 1619.94,1210.68 1620.52,1208.49 1621.11,1208.85 1621.7,1205.32 1622.28,1205.49 1622.87,1207.04 1623.46,1207.31 1624.04,1208.57 1624.63,1211.26 1625.22,1211.69 1625.8,1211.78 1626.39,1210.59 1626.97,1208.19 1627.56,1213.46 1628.15,1214.71 1628.73,1216.93 1629.32,1215.44 1629.91,1220.19 1630.49,1220.92 1631.08,1222.66 1631.67,1222.41 1632.25,1220.66 1632.84,1221.59 1633.42,1219.96 1634.01,1220.78 1634.6,1217.99 1635.18,1215.25 1635.77,1214.04 1636.36,1215.26 1636.94,1217.6 1637.53,1218.52 1638.12,1219.32 1638.7,1218.82 1639.29,1218.61 1639.88,1214.37 1640.46,1214.41 1641.05,1215.37 1641.63,1215.13 1642.22,1213.95 1642.81,1216.08 1643.39,1217.22 1643.98,1215.87 1644.57,1216.98 1645.15,1215.48 1645.74,1215.13 1646.33,1213.82 1646.91,1212.57 1647.5,1213.75 1648.09,1210.18 1648.67,1211.57 1649.26,1211.81 1649.84,1206.89 1650.43,1209.85 1651.02,1212.38 1651.6,1217.46 1652.19,1213.6 1652.78,1212.47 1653.36,1213.77 1653.95,1216.2 1654.54,1214.88 1655.12,1213.35 1655.71,1212.15 1656.29,1209.01 1656.88,1210.49 1657.47,1208.1 1658.05,1205.82 1658.64,1205.27 1659.23,1207.94 1659.81,1204.13 1660.4,1203.43 1660.99,1202.62 1661.57,1204.38 1662.16,1208.47 1662.75,1208.82 1663.33,1206.8 1663.92,1205.93 1664.5,1205.07 1665.09,1203.07 1665.68,1206.09 1666.26,1207.8 1666.85,1210.44 1667.44,1211.94 1668.02,1214.31 1668.61,1211.55 1669.2,1210.31 1669.78,1210.35 1670.37,1209.58 1670.96,1207.34 1671.54,1206.41 1672.13,1204.24 1672.71,1203.39 1673.3,1202.88 1673.89,1203.61 1674.47,1204.37 1675.06,1203.35 1675.65,1206.19 1676.23,1207.63 1676.82,1207.95 1677.41,1208.05 1677.99,1205.71 1678.58,1209.54 1679.17,1209.66 1679.75,1211 1680.34,1208.64 1680.92,1210.38 1681.51,1211.95 1682.1,1209.55 1682.68,1212 1683.27,1211.92 1683.86,1211.89 1684.44,1212.9 1685.03,1212.92 1685.62,1213.88 1686.2,1214.92 1686.79,1214.66 1687.37,1216.85 1687.96,1217.78 1688.55,1221.08 1689.13,1219.39 1689.72,1220.15 1690.31,1217.41 1690.89,1217.16 1691.48,1216.98 1692.07,1217.83 1692.65,1217.28 1693.24,1217.11 1693.83,1217.98 1694.41,1221.02 1695,1220.63 1695.58,1221.28 1696.17,1220.73 1696.76,1220.02 1697.34,1216.18 1697.93,1217.3 1698.52,1215.9 1699.1,1215.88 1699.69,1215.59 1700.28,1214.02 1700.86,1212.85 1701.45,1213 1702.04,1215.48 1702.62,1215.4 1703.21,1215.11 1703.79,1213.68 1704.38,1213.58 1704.97,1212.1 1705.55,1213.26 1706.14,1211.95 1706.73,1211.95 1707.31,1212.21 1707.9,1211.12 1708.49,1210.41 1709.07,1215.49 1709.66,1216.44 1710.24,1218.64 1710.83,1218.42 1711.42,1220.52 1712,1216.41 1712.59,1214.96 1713.18,1213.59 1713.76,1209.89 1714.35,1208.99 1714.94,1212.84 1715.52,1212.46 1716.11,1210.91 1716.7,1211.85 1717.28,1210.53 1717.87,1210.76 1718.45,1209.76 1719.04,1212.18 1719.63,1214.64 1720.21,1214.6 1720.8,1213.41 1721.39,1212.37 1721.97,1210.02 1722.56,1207.81 1723.15,1208.04 1723.73,1207.19 1724.32,1207.51 1724.91,1206.48 1725.49,1209.37 1726.08,1209.43 1726.66,1210.82 1727.25,1210.87 1727.84,1209.45 1728.42,1208.79 1729.01,1213.92 1729.6,1213.81 1730.18,1216 1730.77,1215.91 1731.36,1212.03 1731.94,1209.54 1732.53,1210.94 1733.11,1207.51 1733.7,1208.89 1734.29,1208.89 1734.87,1210.39 1735.46,1210.6 1736.05,1209.61 1736.63,1210.83 1737.22,1210.97 1737.81,1212.51 1738.39,1212.23 1738.98,1213.37 1739.57,1214.35 1740.15,1215.41 1740.74,1214.3 1741.32,1213.17 1741.91,1214.47 1742.5,1213.04 1743.08,1215.75 1743.67,1215.65 1744.26,1214.13 1744.84,1212.79 1745.43,1215.15 1746.02,1218.29 1746.6,1217.83 1747.19,1212.85 1747.78,1211.77 1748.36,1210.43 1748.95,1211.82 1749.53,1210.84 1750.12,1211.87 1750.71,1210.6 1751.29,1207.03 1751.88,1212.23 1752.47,1213.61 1753.05,1212.72 1753.64,1214.08 1754.23,1215.06 1754.81,1216.13 1755.4,1215.94 1755.99,1215.81 1756.57,1217.01 1757.16,1215.45 1757.74,1212.84 1758.33,1211.73 1758.92,1210.85 1759.5,1209.75 1760.09,1208.73 1760.68,1206.55 1761.26,1204.65 1761.85,1205.3 1762.44,1205.81 1763.02,1207.15 1763.61,1208.83 1764.19,1211.36 1764.78,1210.33 1765.37,1211.76 1765.95,1212.86 1766.54,1210.37 1767.13,1209.26 1767.71,1210.73 1768.3,1209.64 1768.89,1211.01 1769.47,1211.07 1770.06,1208.84 1770.65,1206.63 1771.23,1205.83 1771.82,1203.75 1772.4,1204.58 1772.99,1206.29 1773.58,1205.43 1774.16,1205.8 1774.75,1206.3 1775.34,1205.7 1775.92,1202.47 1776.51,1204.17 1777.1,1205.96 1777.68,1206.03 1778.27,1206.57 1778.86,1205.86 1779.44,1207.29 1780.03,1210.14 1780.61,1210.27 1781.2,1210.46 1781.79,1214.13 1782.37,1214.11 1782.96,1215.05 1783.55,1215.93 1784.13,1217.19 1784.72,1213.26 1785.31,1209.54 1785.89,1208.51 1786.48,1211.28 1787.06,1211.19 1787.65,1211.31 1788.24,1213.72 1788.82,1214.98 1789.41,1213.79 1790,1212.77 1790.58,1211.53 1791.17,1207.99 1791.76,1209.45 1792.34,1209.72 1792.93,1209.75 1793.52,1208.85 1794.1,1211.36 1794.69,1210.22 1795.27,1213.89 1795.86,1211.54 1796.45,1211.62 1797.03,1211.61 1797.62,1210.31 1798.21,1210.38 1798.79,1209.33 1799.38,1209.95 1799.97,1211.37 1800.55,1209.07 1801.14,1213.8 1801.73,1211.22 1802.31,1212.76 1802.9,1215.15 1803.48,1217.61 1804.07,1216.09 1804.66,1217.14 1805.24,1216.71 1805.83,1215.26 1806.42,1215.06 1807,1212.59 1807.59,1210.07 1808.18,1211.13 1808.76,1212.12 1809.35,1210.89 1809.94,1209.69 1810.52,1208.95 1811.11,1210.24 1811.69,1209.07 1812.28,1207.93 1812.87,1209 1813.45,1211.41 1814.04,1211.53 1814.63,1212.74 1815.21,1213.95 1815.8,1214.15 1816.39,1214.15 1816.97,1215.17 1817.56,1216.38 1818.14,1216.4 1818.73,1216.45 1819.32,1216.23 1819.9,1217.25 1820.49,1218.14 1821.08,1219.04 1821.66,1218.62 1822.25,1217.27 1822.84,1220.75 1823.42,1220.38 1824.01,1216.24 1824.6,1218.38 1825.18,1217.03 1825.77,1214.55 1826.35,1214.58 1826.94,1215.74 1827.53,1215.6 1828.11,1215.61 1828.7,1216.3 1829.29,1216.07 1829.87,1214.78 1830.46,1213.54 1831.05,1213.57 1831.63,1214.81 1832.22,1215.75 1832.81,1214.2 1833.39,1214.05 1833.98,1212.88 1834.56,1212.99 1835.15,1212.01 1835.74,1213.1 1836.32,1212.09 1836.91,1212.09 1837.5,1211.03 1838.08,1215.76 1838.67,1216.82 1839.26,1216.39 1839.84,1215.02 1840.43,1214.76 1841.01,1212.42 1841.6,1211.31 1842.19,1210.26 1842.77,1209.3 1843.36,1209.53 1843.95,1209.8 1844.53,1208.58 1845.12,1210.18 1845.71,1209.1 1846.29,1207.99 1846.88,1209.39 1847.47,1209.55 1848.05,1211.05 1848.64,1210.12 1849.22,1210.06 1849.81,1208.74 1850.4,1207.9 1850.98,1206.99 1851.57,1204.88 1852.16,1205.5 1852.74,1207.28 1853.33,1206.36 1853.92,1205.44 1854.5,1203.34 1855.09,1204.93 1855.68,1205.31 1856.26,1205.76 1856.85,1207.38 1857.43,1206.11 1858.02,1207.67 1858.61,1205.52 1859.19,1207.26 1859.78,1206.19 1860.37,1206.55 1860.95,1206.99 1861.54,1208.41 1862.13,1208.74 1862.71,1209.01 1863.3,1209.16 1863.88,1210.51 1864.47,1209.46 1865.06,1208.35 1865.64,1206.39 1866.23,1208 1866.82,1206.91 1867.4,1207.13 1867.99,1208.78 1868.58,1207.69 1869.16,1209.27 1869.75,1211.82 1870.34,1210.43 1870.92,1210.51 1871.51,1210.74 1872.09,1208.55 1872.68,1211.26 1873.27,1214.86 1873.85,1216.03 1874.44,1217.04 1875.03,1217.99 1875.61,1217.81 1876.2,1217.55 1876.79,1218.64 1877.37,1218.48 1877.96,1218.2 1878.55,1219.23 1879.13,1218.86 1879.72,1218.59 1880.3,1218.38 1880.89,1218.2 1881.48,1220.15 1882.06,1221.19 1882.65,1220.76 1883.24,1220.3 1883.82,1218.9 1884.41,1218.63 1885,1218.36 1885.58,1220.33 1886.17,1218.63 1886.76,1216.02 1887.34,1215.9 1887.93,1214.6 1888.51,1212.02 1889.1,1214.33 1889.69,1212.86 1890.27,1212.78 1890.86,1212.72 1891.45,1212.83 1892.03,1210.57 1892.62,1210.63 1893.21,1209.78 1893.79,1210.16 1894.38,1213.79 1894.96,1212.83 1895.55,1212.71 1896.14,1212.74 1896.72,1213.97 1897.31,1212.66 1897.9,1212.64 1898.48,1214.01 1899.07,1214.91 1899.66,1213.66 1900.24,1213.48 1900.83,1213.09 1901.42,1211.55 1902,1212.58 1902.59,1211.37 1903.17,1212.57 1903.76,1212.66 1904.35,1210.12 1904.93,1210.05 1905.52,1208.95 1906.11,1209.24 1906.69,1209.25 1907.28,1209.45 1907.87,1209.59 1908.45,1207.5 1909.04,1207.46 1909.63,1204.14 1910.21,1204.65 1910.8,1202.6 1911.38,1200.65 1911.97,1203.82 1912.56,1204.27 1913.14,1208.39 1913.73,1208.62 1914.32,1211.21 1914.9,1209.81 1915.49,1210.11 1916.08,1210.51 1916.66,1209.51 1917.25,1211.03 1917.83,1212.49 1918.42,1216.32 1919.01,1217.42 1919.59,1218.27 1920.18,1216.65 1920.77,1219.89 1921.35,1220.43 1921.94,1219.88 1922.53,1219.6 1923.11,1220.34 1923.7,1218.59 1924.29,1212.42 1924.87,1209.93 1925.46,1211.34 1926.04,1211.66 1926.63,1210.44 1927.22,1212.93 1927.8,1213.92 1928.39,1211.43 1928.98,1210.11 1929.56,1210.32 1930.15,1208.91 1930.74,1210.54 1931.32,1212.09 1931.91,1212.15 1932.5,1212.25 1933.08,1210.58 1933.67,1209.43 1934.25,1211.98 1934.84,1211.82 1935.43,1209.42 1936.01,1209.5 1936.6,1210.78 1937.19,1212.14 1937.77,1213.3 1938.36,1210.7 1938.95,1210.66 1939.53,1210.71 1940.12,1211.94 1940.71,1212.19 1941.29,1211.01 1941.88,1212.44 1942.46,1212.64 1943.05,1215.33 1943.64,1216.56 1944.22,1217.76 1944.81,1217.39 1945.4,1218.38 1945.98,1218.04 1946.57,1216.45 1947.16,1218.65 1947.74,1219.65 1948.33,1220.42 1948.91,1219.84 1949.5,1216.03 1950.09,1213.31 1950.67,1213.31 1951.26,1213.22 1951.85,1211.98 1952.43,1214.96 1953.02,1213.6 1953.61,1214.99 1954.19,1215.99 1954.78,1215.81 1955.37,1215.44 1955.95,1216.45 1956.54,1216.02 1957.12,1219.24 1957.71,1219.03 1958.3,1217.26 1958.88,1217.37 1959.47,1218.35 1960.06,1221.7 1960.64,1221.36 1961.23,1220.78 1961.82,1217.96 1962.4,1217.83 1962.99,1216.53 1963.58,1214.14 1964.16,1215.28 1964.75,1212.68 1965.33,1211.25 1965.92,1213.48 1966.51,1212.41 1967.09,1211.15 1967.68,1208.37 1968.27,1208.54 1968.85,1206.5 1969.44,1208.27 1970.03,1209.54 1970.61,1207.22 1971.2,1205.98 1971.78,1206.59 1972.37,1207.25 1972.96,1208.79 1973.54,1208.87 1974.13,1211.56 1974.72,1211.63 1975.3,1210.67 1975.89,1212.15 1976.48,1212.23 1977.06,1213.45 1977.65,1214.53 1978.24,1216.91 1978.82,1216.31 1979.41,1218.53 1979.99,1218.08 1980.58,1217.71 1981.17,1216.38 1981.75,1219.89 1982.34,1218.43 1982.93,1218.22 1983.51,1216.68 1984.1,1218.74 1984.69,1217.28 1985.27,1215.72 1985.86,1215.54 1986.45,1215.26 1987.03,1212.8 1987.62,1212.86 1988.2,1213.99 1988.79,1215.2 1989.38,1214.34 1989.96,1211.83 1990.55,1211.78 1991.14,1210.61 1991.72,1211.77 1992.31,1216.68 1992.9,1216.56 1993.48,1217.41 1994.07,1217.31 1994.65,1217.15 1995.24,1218.19 1995.83,1215.3 1996.41,1212.54 1997,1212.63 1997.59,1212.68 1998.17,1213.92 1998.76,1215.08 1999.35,1216.29 1999.93,1217.23 2000.52,1218.26 2001.11,1217.89 2001.69,1217.58 2002.28,1216.04 2002.86,1214.83 2003.45,1214.42 2004.04,1215.73 2004.62,1215.56 2005.21,1214.13 2005.8,1214.34 2006.38,1214.37 2006.97,1210.49 2007.56,1211.64 2008.14,1210.54 2008.73,1210.52 2009.32,1210.56 2009.9,1209.21 2010.49,1210.64 2011.07,1211.69 2011.66,1209.51 2012.25,1210.69 2012.83,1212 2013.42,1214.17 2014.01,1214.22 2014.59,1214.33 2015.18,1210.57 2015.77,1209.39 2016.35,1209.51 2016.94,1210.88 2017.53,1210.97 2018.11,1210.86 2018.7,1209.79 2019.28,1208.7 2019.87,1207.99 2020.46,1209.31 2021.04,1209.61 2021.63,1207.55 2022.22,1207.61 2022.8,1207.85 2023.39,1208.31 2023.98,1209.65 2024.56,1209.7 2025.15,1208.6 2025.73,1212.52 2026.32,1212.59 2026.91,1212.42 2027.49,1213.69 2028.08,1213.65 2028.67,1212.78 2029.25,1212.77 2029.84,1213.9 2030.43,1212.83 2031.01,1211.73 2031.6,1211.6 2032.19,1211.65 2032.77,1213.01 2033.36,1215.42 2033.94,1211.76 2034.53,1210.48 2035.12,1210.68 2035.7,1212.14 2036.29,1209.5 2036.88,1206.07 2037.46,1206.51 2038.05,1205.71 2038.64,1206.24 2039.22,1206.6 2039.81,1205.65 2040.4,1207.32 2040.98,1208.84 2041.57,1208.91 2042.15,1209.08 2042.74,1208.95 2043.33,1207.96 2043.91,1208.36 2044.5,1209.85 2045.09,1210.1 2045.67,1210.29 2046.26,1211.77 2046.85,1211.89 2047.43,1212.19 2048.02,1211.12 2048.6,1208.53 2049.19,1208.81 2049.78,1211.22 2050.36,1213.96 2050.95,1210.04 2051.54,1212.45 2052.12,1213.61 2052.71,1212.24 2053.3,1213.68 2053.88,1212.56 2054.47,1212.72 2055.06,1213.66 2055.64,1213.48 2056.23,1211.25 2056.81,1211.26 2057.4,1210.33 2057.99,1210.47 2058.57,1208.31 2059.16,1209.56 2059.75,1207.21 2060.33,1206.5 2060.92,1209.45 2061.51,1210.39 2062.09,1211.54 2062.68,1211.38 2063.27,1210.37 2063.85,1210.6 2064.44,1213.4 2065.02,1214.54 2065.61,1215.7 2066.2,1215.54 2066.78,1212.88 2067.37,1214.19 2067.96,1212.9 2068.54,1214.24 2069.13,1214.04 2069.72,1216.33 2070.3,1217.06 2070.89,1216.9 2071.48,1216.61 2072.06,1216.29 2072.65,1215.12 2073.23,1215.08 2073.82,1219.6 2074.41,1219.21 2074.99,1218.76 2075.58,1215.97 2076.17,1215.9 2076.75,1214.77 2077.34,1212.24 2077.93,1213.55 2078.51,1214.73 2079.1,1214.92 2079.68,1215.91 2080.27,1216.98 2080.86,1219.26 2081.44,1218.96 2082.03,1218.71 2082.62,1217.26 2083.2,1219.51 2083.79,1220.36 2084.38,1219.91 2084.96,1219.77 2085.55,1217.01 2086.14,1215.87 2086.72,1216.74 2087.31,1215.12 2087.89,1215.34 2088.48,1215.05 2089.07,1213.7 2089.65,1214.71 2090.24,1213.28 2090.83,1212.33 2091.41,1208.4 2092,1211.04 2092.59,1209.88 2093.17,1211.44 2093.76,1210.27 2094.35,1209.4 2094.93,1209.4 2095.52,1209.29 2096.1,1210.56 2096.69,1210.55 2097.28,1211.91 2097.86,1212.18 2098.45,1210.9 2099.04,1212.43 2099.62,1212.29 2100.21,1209.87 2100.8,1208.63 2101.38,1208.87 2101.97,1206.66 2102.55,1205.76 2103.14,1205.15 2103.73,1207.78 2104.31,1209.61 2104.9,1209.91 2105.49,1212.45 2106.07,1213.66 2106.66,1216.19 2107.25,1215.07 2107.83,1217.21 2108.42,1215.52 2109.01,1213.07 2109.59,1212.93 2110.18,1216.58 2110.76,1216.22 2111.35,1213.59 2111.94,1213.45 2112.52,1213.48 2113.11,1213.68 2113.7,1212.41 2114.28,1208.77 2114.87,1210.23 2115.46,1212.96 2116.04,1210.41 2116.63,1211.79 2117.22,1212.95 2117.8,1215.56 2118.39,1217.86 2118.97,1217.75 2119.56,1218.65 2120.15,1218.34 2120.73,1219.28 2121.32,1218.78 2121.91,1218.72 2122.49,1218.37 2123.08,1218.09 2123.67,1215.42 2124.25,1217.79 2124.84,1217.25 2125.42,1215.75 2126.01,1213.26 2126.6,1214.14 2127.18,1213.18 2127.77,1211.82 2128.36,1210.59 2128.94,1207.92 2129.53,1207.96 2130.12,1209.28 2130.7,1210.88 2131.29,1210.92 2131.88,1211.3 2132.46,1212.88 2133.05,1211.57 2133.63,1211.68 2134.22,1212.9 2134.81,1210.53 2135.39,1211.91 2135.98,1211.69 2136.57,1212.01 2137.15,1209.64 2137.74,1209.87 2138.33,1208.97 2138.91,1207.93 2139.5,1204.69 2140.09,1202.84 2140.67,1204.6 2141.26,1203.95 2141.84,1205.48 2142.43,1207 2143.02,1207.34 2143.6,1207.63 2144.19,1209.06 2144.78,1210.67 2145.36,1209.43 2145.95,1208.53 2146.54,1208.78 2147.12,1212.69 2147.71,1216.47 2148.3,1216.3 2148.88,1214.92 2149.47,1213.64 2150.05,1212.58 2150.64,1212.73 2151.23,1212.69 2151.81,1211.69 2152.4,1210.56 2152.99,1213.19 2153.57,1214.3 2154.16,1216.71 2154.75,1215.34 2155.33,1216.57 2155.92,1216.15 2156.5,1215.66 2157.09,1216.82 2157.68,1215.57 2158.26,1214.2 \"/>\n<path clip-path=\"url(#clip742)\" d=\"M986.025 1213.04 L986.612 1213.04 L987.198 1213.04 L987.785 1213.04 L988.371 1213.04 L988.957 1213.04 L989.544 1213.04 L990.13 1213.04 L990.717 1213.04 L991.303 1213.04 L991.889 1213.04 L992.476 1213.04 L993.062 1213.04 L993.649 1213.04 L994.235 1213.04 L994.822 1213.04 L995.408 1213.04 L995.994 1213.04 L996.581 1213.04 L997.167 1213.04 L997.754 1213.04 L998.34 1213.04 L998.926 1213.04 L999.513 1213.04 L1000.1 1213.04 L1000.69 1213.04 L1001.27 1213.04 L1001.86 1213.04 L1002.44 1213.04 L1003.03 1213.04 L1003.62 1213.04 L1004.2 1213.04 L1004.79 1213.04 L1005.38 1213.04 L1005.96 1213.04 L1006.55 1213.04 L1007.14 1213.04 L1007.72 1213.04 L1008.31 1213.04 L1008.9 1213.04 L1009.48 1213.04 L1010.07 1213.04 L1010.65 1213.04 L1011.24 1213.04 L1011.83 1213.04 L1012.41 1213.04 L1013 1213.04 L1013.59 1213.04 L1014.17 1213.04 L1014.76 1213.04 L1015.35 1213.04 L1015.93 1213.04 L1016.52 1213.04 L1017.11 1213.04 L1017.69 1213.04 L1018.28 1213.04 L1018.86 1213.04 L1019.45 1213.04 L1020.04 1213.04 L1020.62 1213.04 L1021.21 1213.04 L1021.8 1213.04 L1022.38 1213.04 L1022.97 1213.04 L1023.56 1213.04 L1024.14 1213.04 L1024.73 1213.04 L1025.32 1213.04 L1025.9 1213.04 L1026.49 1213.04 L1027.07 1213.04 L1027.66 1213.04 L1028.25 1213.04 L1028.83 1213.04 L1029.42 1213.04 L1030.01 1213.04 L1030.59 1213.04 L1031.18 1213.04 L1031.77 1213.04 L1032.35 1213.04 L1032.94 1213.04 L1033.52 1213.04 L1034.11 1213.04 L1034.7 1213.04 L1035.28 1213.04 L1035.87 1213.04 L1036.46 1213.04 L1037.04 1213.04 L1037.63 1213.04 L1038.22 1213.04 L1038.8 1213.04 L1039.39 1213.04 L1039.98 1213.04 L1040.56 1213.04 L1041.15 1213.04 L1041.73 1213.04 L1042.32 1213.04 L1042.91 1213.04 L1043.49 1213.04 L1044.08 1213.04 L1044.67 1213.04 L1045.25 1213.04 L1045.84 1213.04 L1046.43 1213.04 L1047.01 1213.04 L1047.6 1213.04 L1048.19 1213.04 L1048.77 1213.04 L1049.36 1213.04 L1049.94 1213.04 L1050.53 1213.04 L1051.12 1213.04 L1051.7 1213.04 L1052.29 1213.04 L1052.88 1213.04 L1053.46 1213.04 L1054.05 1213.04 L1054.64 1213.04 L1055.22 1213.04 L1055.81 1213.04 L1056.39 1213.04 L1056.98 1213.04 L1057.57 1213.04 L1058.15 1213.04 L1058.74 1213.04 L1059.33 1213.04 L1059.91 1213.04 L1060.5 1213.04 L1061.09 1213.04 L1061.67 1213.04 L1062.26 1213.04 L1062.85 1213.04 L1063.43 1213.04 L1064.02 1213.04 L1064.6 1213.04 L1065.19 1213.04 L1065.78 1213.04 L1066.36 1213.04 L1066.95 1213.04 L1067.54 1213.04 L1068.12 1213.04 L1068.71 1213.04 L1069.3 1213.04 L1069.88 1213.04 L1070.47 1213.04 L1071.06 1213.04 L1071.64 1213.04 L1072.23 1213.04 L1072.81 1213.04 L1073.4 1213.04 L1073.99 1213.04 L1074.57 1213.04 L1075.16 1213.04 L1075.75 1213.04 L1076.33 1213.04 L1076.92 1213.04 L1077.51 1213.04 L1078.09 1213.04 L1078.68 1213.04 L1079.26 1213.04 L1079.85 1213.04 L1080.44 1213.04 L1081.02 1213.04 L1081.61 1213.04 L1082.2 1213.04 L1082.78 1213.04 L1083.37 1213.04 L1083.96 1213.04 L1084.54 1213.04 L1085.13 1213.04 L1085.72 1213.04 L1086.3 1213.04 L1086.89 1213.04 L1087.47 1213.04 L1088.06 1213.04 L1088.65 1213.04 L1089.23 1213.04 L1089.82 1213.04 L1090.41 1213.04 L1090.99 1213.04 L1091.58 1213.04 L1092.17 1213.04 L1092.75 1213.04 L1093.34 1213.04 L1093.93 1213.04 L1094.51 1213.04 L1095.1 1213.04 L1095.68 1213.04 L1096.27 1213.04 L1096.86 1213.04 L1097.44 1213.04 L1098.03 1213.04 L1098.62 1213.04 L1099.2 1213.04 L1099.79 1213.04 L1100.38 1213.04 L1100.96 1213.04 L1101.55 1213.04 L1102.14 1213.04 L1102.72 1213.04 L1103.31 1213.04 L1103.89 1213.04 L1104.48 1213.04 L1105.07 1213.04 L1105.65 1213.04 L1106.24 1213.04 L1106.83 1213.04 L1107.41 1213.04 L1108 1213.04 L1108.59 1213.04 L1109.17 1213.04 L1109.76 1213.04 L1110.34 1213.04 L1110.93 1213.04 L1111.52 1213.04 L1112.1 1213.04 L1112.69 1213.04 L1113.28 1213.04 L1113.86 1213.04 L1114.45 1213.04 L1115.04 1213.04 L1115.62 1213.04 L1116.21 1213.04 L1116.8 1213.04 L1117.38 1213.04 L1117.97 1213.04 L1118.55 1213.04 L1119.14 1213.04 L1119.73 1213.04 L1120.31 1213.04 L1120.9 1213.04 L1121.49 1213.04 L1122.07 1213.04 L1122.66 1213.04 L1123.25 1213.04 L1123.83 1213.04 L1124.42 1213.04 L1125.01 1213.04 L1125.59 1213.04 L1126.18 1213.04 L1126.76 1213.04 L1127.35 1213.04 L1127.94 1213.04 L1128.52 1213.04 L1129.11 1213.04 L1129.7 1213.04 L1130.28 1213.04 L1130.87 1213.04 L1131.46 1213.04 L1132.04 1213.04 L1132.63 1213.04 L1133.21 1213.04 L1133.8 1213.04 L1134.39 1213.04 L1134.97 1213.04 L1135.56 1213.04 L1136.15 1213.04 L1136.73 1213.04 L1137.32 1213.04 L1137.91 1213.04 L1138.49 1213.04 L1139.08 1213.04 L1139.67 1213.04 L1140.25 1213.04 L1140.84 1213.04 L1141.42 1213.04 L1142.01 1213.04 L1142.6 1213.04 L1143.18 1213.04 L1143.77 1213.04 L1144.36 1213.04 L1144.94 1213.04 L1145.53 1213.04 L1146.12 1213.04 L1146.7 1213.04 L1147.29 1213.04 L1147.88 1213.04 L1148.46 1213.04 L1149.05 1213.04 L1149.63 1213.04 L1150.22 1213.04 L1150.81 1213.04 L1151.39 1213.04 L1151.98 1213.04 L1152.57 1213.04 L1153.15 1213.04 L1153.74 1213.04 L1154.33 1213.04 L1154.91 1213.04 L1155.5 1213.04 L1156.09 1213.04 L1156.67 1213.04 L1157.26 1213.04 L1157.84 1213.04 L1158.43 1213.04 L1159.02 1213.04 L1159.6 1213.04 L1160.19 1213.04 L1160.78 1213.04 L1161.36 1213.04 L1161.95 1213.04 L1162.54 1213.04 L1163.12 1213.04 L1163.71 1213.04 L1164.29 1213.04 L1164.88 1213.04 L1165.47 1213.04 L1166.05 1213.04 L1166.64 1213.04 L1167.23 1213.04 L1167.81 1213.04 L1168.4 1213.04 L1168.99 1213.04 L1169.57 1213.04 L1170.16 1213.04 L1170.75 1213.04 L1171.33 1213.04 L1171.92 1213.04 L1172.5 1213.04 L1173.09 1213.04 L1173.68 1213.04 L1174.26 1213.04 L1174.85 1213.04 L1175.44 1213.04 L1176.02 1213.04 L1176.61 1213.04 L1177.2 1213.04 L1177.78 1213.04 L1178.37 1213.04 L1178.96 1213.04 L1179.54 1213.04 L1180.13 1213.04 L1180.71 1213.04 L1181.3 1213.04 L1181.89 1213.04 L1182.47 1213.04 L1183.06 1213.04 L1183.65 1213.04 L1184.23 1213.04 L1184.82 1213.04 L1185.41 1213.04 L1185.99 1213.04 L1186.58 1213.04 L1187.16 1213.04 L1187.75 1213.04 L1188.34 1213.04 L1188.92 1213.04 L1189.51 1213.04 L1190.1 1213.04 L1190.68 1213.04 L1191.27 1213.04 L1191.86 1213.04 L1192.44 1213.04 L1193.03 1213.04 L1193.62 1213.04 L1194.2 1213.04 L1194.79 1213.04 L1195.37 1213.04 L1195.96 1213.04 L1196.55 1213.04 L1197.13 1213.04 L1197.72 1213.04 L1198.31 1213.04 L1198.89 1213.04 L1199.48 1213.04 L1200.07 1213.04 L1200.65 1213.04 L1201.24 1213.04 L1201.83 1213.04 L1202.41 1213.04 L1203 1213.04 L1203.58 1213.04 L1204.17 1213.04 L1204.76 1213.04 L1205.34 1213.04 L1205.93 1213.04 L1206.52 1213.04 L1207.1 1213.04 L1207.69 1213.04 L1208.28 1213.04 L1208.86 1213.04 L1209.45 1213.04 L1210.03 1213.04 L1210.62 1213.04 L1211.21 1213.04 L1211.79 1213.04 L1212.38 1213.04 L1212.97 1213.04 L1213.55 1213.04 L1214.14 1213.04 L1214.73 1213.04 L1215.31 1213.04 L1215.9 1213.04 L1216.49 1213.04 L1217.07 1213.04 L1217.66 1213.04 L1218.24 1213.04 L1218.83 1213.04 L1219.42 1213.04 L1220 1213.04 L1220.59 1213.04 L1221.18 1213.04 L1221.76 1213.04 L1222.35 1213.04 L1222.94 1213.04 L1223.52 1213.04 L1224.11 1213.04 L1224.7 1213.04 L1225.28 1213.04 L1225.87 1213.04 L1226.45 1213.04 L1227.04 1213.04 L1227.63 1213.04 L1228.21 1213.04 L1228.8 1213.04 L1229.39 1213.04 L1229.97 1213.04 L1230.56 1213.04 L1231.15 1213.04 L1231.73 1213.04 L1232.32 1213.04 L1232.91 1213.04 L1233.49 1213.04 L1234.08 1213.04 L1234.66 1213.04 L1235.25 1213.04 L1235.84 1213.04 L1236.42 1213.04 L1237.01 1213.04 L1237.6 1213.04 L1238.18 1213.04 L1238.77 1213.04 L1239.36 1213.04 L1239.94 1213.04 L1240.53 1213.04 L1241.11 1213.04 L1241.7 1213.04 L1242.29 1213.04 L1242.87 1213.04 L1243.46 1213.04 L1244.05 1213.04 L1244.63 1213.04 L1245.22 1213.04 L1245.81 1213.04 L1246.39 1213.04 L1246.98 1213.04 L1247.57 1213.04 L1248.15 1213.04 L1248.74 1213.04 L1249.32 1213.04 L1249.91 1213.04 L1250.5 1213.04 L1251.08 1213.04 L1251.67 1213.04 L1252.26 1213.04 L1252.84 1213.04 L1253.43 1213.04 L1254.02 1213.04 L1254.6 1213.04 L1255.19 1213.04 L1255.78 1213.04 L1256.36 1213.04 L1256.95 1213.04 L1257.53 1213.04 L1258.12 1213.04 L1258.71 1213.04 L1259.29 1213.04 L1259.88 1213.04 L1260.47 1213.04 L1261.05 1213.04 L1261.64 1213.04 L1262.23 1213.04 L1262.81 1213.04 L1263.4 1213.04 L1263.98 1213.04 L1264.57 1213.04 L1265.16 1213.04 L1265.74 1213.04 L1266.33 1213.04 L1266.92 1213.04 L1267.5 1213.04 L1268.09 1213.04 L1268.68 1213.04 L1269.26 1213.04 L1269.85 1213.04 L1270.44 1213.04 L1271.02 1213.04 L1271.61 1213.04 L1272.19 1213.04 L1272.78 1213.04 L1273.37 1213.04 L1273.95 1213.04 L1274.54 1213.04 L1275.13 1213.04 L1275.71 1213.04 L1276.3 1213.04 L1276.89 1213.04 L1277.47 1213.04 L1278.06 1213.04 L1278.65 1213.04 L1279.23 1213.04 L1279.82 1213.04 L1280.4 1213.04 L1280.99 1213.04 L1281.58 1213.04 L1282.16 1213.04 L1282.75 1213.04 L1283.34 1213.04 L1283.92 1213.04 L1284.51 1213.04 L1285.1 1213.04 L1285.68 1213.04 L1286.27 1213.04 L1286.86 1213.04 L1287.44 1213.04 L1288.03 1213.04 L1288.61 1213.04 L1289.2 1213.04 L1289.79 1213.04 L1290.37 1213.04 L1290.96 1213.04 L1291.55 1213.04 L1292.13 1213.04 L1292.72 1213.04 L1293.31 1213.04 L1293.89 1213.04 L1294.48 1213.04 L1295.06 1213.04 L1295.65 1213.04 L1296.24 1213.04 L1296.82 1213.04 L1297.41 1213.04 L1298 1213.04 L1298.58 1213.04 L1299.17 1213.04 L1299.76 1213.04 L1300.34 1213.04 L1300.93 1213.04 L1301.52 1213.04 L1302.1 1213.04 L1302.69 1213.04 L1303.27 1213.04 L1303.86 1213.04 L1304.45 1213.04 L1305.03 1213.04 L1305.62 1213.04 L1306.21 1213.04 L1306.79 1213.04 L1307.38 1213.04 L1307.97 1213.04 L1308.55 1213.04 L1309.14 1213.04 L1309.73 1213.04 L1310.31 1213.04 L1310.9 1213.04 L1311.48 1213.04 L1312.07 1213.04 L1312.66 1213.04 L1313.24 1213.04 L1313.83 1213.04 L1314.42 1213.04 L1315 1213.04 L1315.59 1213.04 L1316.18 1213.04 L1316.76 1213.04 L1317.35 1213.04 L1317.93 1213.04 L1318.52 1213.04 L1319.11 1213.04 L1319.69 1213.04 L1320.28 1213.04 L1320.87 1213.04 L1321.45 1213.04 L1322.04 1213.04 L1322.63 1213.04 L1323.21 1213.04 L1323.8 1213.04 L1324.39 1213.04 L1324.97 1213.04 L1325.56 1213.04 L1326.14 1213.04 L1326.73 1213.04 L1327.32 1213.04 L1327.9 1213.04 L1328.49 1213.04 L1329.08 1213.04 L1329.66 1213.04 L1330.25 1213.04 L1330.84 1213.04 L1331.42 1213.04 L1332.01 1213.04 L1332.6 1213.04 L1333.18 1213.04 L1333.77 1213.04 L1334.35 1213.04 L1334.94 1213.04 L1335.53 1213.04 L1336.11 1213.04 L1336.7 1213.04 L1337.29 1213.04 L1337.87 1213.04 L1338.46 1213.04 L1339.05 1213.04 L1339.63 1213.04 L1340.22 1213.04 L1340.8 1213.04 L1341.39 1213.04 L1341.98 1213.04 L1342.56 1213.04 L1343.15 1213.04 L1343.74 1213.04 L1344.32 1213.04 L1344.91 1213.04 L1345.5 1213.04 L1346.08 1213.04 L1346.67 1213.04 L1347.26 1213.04 L1347.84 1213.04 L1348.43 1213.04 L1349.01 1213.04 L1349.6 1213.04 L1350.19 1213.04 L1350.77 1213.04 L1351.36 1213.04 L1351.95 1213.04 L1352.53 1213.04 L1353.12 1213.04 L1353.71 1213.04 L1354.29 1213.04 L1354.88 1213.04 L1355.47 1213.04 L1356.05 1213.04 L1356.64 1213.04 L1357.22 1213.04 L1357.81 1213.04 L1358.4 1213.04 L1358.98 1213.04 L1359.57 1213.04 L1360.16 1213.04 L1360.74 1213.04 L1361.33 1213.04 L1361.92 1213.04 L1362.5 1213.04 L1363.09 1213.04 L1363.68 1213.04 L1364.26 1213.04 L1364.85 1213.04 L1365.43 1213.04 L1366.02 1213.04 L1366.61 1213.04 L1367.19 1213.04 L1367.78 1213.04 L1368.37 1213.04 L1368.95 1213.04 L1369.54 1213.04 L1370.13 1213.04 L1370.71 1213.04 L1371.3 1213.04 L1371.88 1213.04 L1372.47 1213.04 L1373.06 1213.04 L1373.64 1213.04 L1374.23 1213.04 L1374.82 1213.04 L1375.4 1213.04 L1375.99 1213.04 L1376.58 1213.04 L1377.16 1213.04 L1377.75 1213.04 L1378.34 1213.04 L1378.92 1213.04 L1379.51 1213.04 L1380.09 1213.04 L1380.68 1213.04 L1381.27 1213.04 L1381.85 1213.04 L1382.44 1213.04 L1383.03 1213.04 L1383.61 1213.04 L1384.2 1213.04 L1384.79 1213.04 L1385.37 1213.04 L1385.96 1213.04 L1386.55 1213.04 L1387.13 1213.04 L1387.72 1213.04 L1388.3 1213.04 L1388.89 1213.04 L1389.48 1213.04 L1390.06 1213.04 L1390.65 1213.04 L1391.24 1213.04 L1391.82 1213.04 L1392.41 1213.04 L1393 1213.04 L1393.58 1213.04 L1394.17 1213.04 L1394.75 1213.04 L1395.34 1213.04 L1395.93 1213.04 L1396.51 1213.04 L1397.1 1213.04 L1397.69 1213.04 L1398.27 1213.04 L1398.86 1213.04 L1399.45 1213.04 L1400.03 1213.04 L1400.62 1213.04 L1401.21 1213.04 L1401.79 1213.04 L1402.38 1213.04 L1402.96 1213.04 L1403.55 1213.04 L1404.14 1213.04 L1404.72 1213.04 L1405.31 1213.04 L1405.9 1213.04 L1406.48 1213.04 L1407.07 1213.04 L1407.66 1213.04 L1408.24 1213.04 L1408.83 1213.04 L1409.42 1213.04 L1410 1213.04 L1410.59 1213.04 L1411.17 1213.04 L1411.76 1213.04 L1412.35 1213.04 L1412.93 1213.04 L1413.52 1213.04 L1414.11 1213.04 L1414.69 1213.04 L1415.28 1213.04 L1415.87 1213.04 L1416.45 1213.04 L1417.04 1213.04 L1417.63 1213.04 L1418.21 1213.04 L1418.8 1213.04 L1419.38 1213.04 L1419.97 1213.04 L1420.56 1213.04 L1421.14 1213.04 L1421.73 1213.04 L1422.32 1213.04 L1422.9 1213.04 L1423.49 1213.04 L1424.08 1213.04 L1424.66 1213.04 L1425.25 1213.04 L1425.83 1213.04 L1426.42 1213.04 L1427.01 1213.04 L1427.59 1213.04 L1428.18 1213.04 L1428.77 1213.04 L1429.35 1213.04 L1429.94 1213.04 L1430.53 1213.04 L1431.11 1213.04 L1431.7 1213.04 L1432.29 1213.04 L1432.87 1213.04 L1433.46 1213.04 L1434.04 1213.04 L1434.63 1213.04 L1435.22 1213.04 L1435.8 1213.04 L1436.39 1213.04 L1436.98 1213.04 L1437.56 1213.04 L1438.15 1213.04 L1438.74 1213.04 L1439.32 1213.04 L1439.91 1213.04 L1440.5 1213.04 L1441.08 1213.04 L1441.67 1213.04 L1442.25 1213.04 L1442.84 1213.04 L1443.43 1213.04 L1444.01 1213.04 L1444.6 1213.04 L1445.19 1213.04 L1445.77 1213.04 L1446.36 1213.04 L1446.95 1213.04 L1447.53 1213.04 L1448.12 1213.04 L1448.7 1213.04 L1449.29 1213.04 L1449.88 1213.04 L1450.46 1213.04 L1451.05 1213.04 L1451.64 1213.04 L1452.22 1213.04 L1452.81 1213.04 L1453.4 1213.04 L1453.98 1213.04 L1454.57 1213.04 L1455.16 1213.04 L1455.74 1213.04 L1456.33 1213.04 L1456.91 1213.04 L1457.5 1213.04 L1458.09 1213.04 L1458.67 1213.04 L1459.26 1213.04 L1459.85 1213.04 L1460.43 1213.04 L1461.02 1213.04 L1461.61 1213.04 L1462.19 1213.04 L1462.78 1213.04 L1463.37 1213.04 L1463.95 1213.04 L1464.54 1213.04 L1465.12 1213.04 L1465.71 1213.04 L1466.3 1213.04 L1466.88 1213.04 L1467.47 1213.04 L1468.06 1213.04 L1468.64 1213.04 L1469.23 1213.04 L1469.82 1213.04 L1470.4 1213.04 L1470.99 1213.04 L1471.57 1213.04 L1472.16 1213.04 L1472.75 1213.04 L1473.33 1213.04 L1473.92 1213.04 L1474.51 1213.04 L1475.09 1213.04 L1475.68 1213.04 L1476.27 1213.04 L1476.85 1213.04 L1477.44 1213.04 L1478.03 1213.04 L1478.61 1213.04 L1479.2 1213.04 L1479.78 1213.04 L1480.37 1213.04 L1480.96 1213.04 L1481.54 1213.04 L1482.13 1213.04 L1482.72 1213.04 L1483.3 1213.04 L1483.89 1213.04 L1484.48 1213.04 L1485.06 1213.04 L1485.65 1213.04 L1486.24 1213.04 L1486.82 1213.04 L1487.41 1213.04 L1487.99 1213.04 L1488.58 1213.04 L1489.17 1213.04 L1489.75 1213.04 L1490.34 1213.04 L1490.93 1213.04 L1491.51 1213.04 L1492.1 1213.04 L1492.69 1213.04 L1493.27 1213.04 L1493.86 1213.04 L1494.45 1213.04 L1495.03 1213.04 L1495.62 1213.04 L1496.2 1213.04 L1496.79 1213.04 L1497.38 1213.04 L1497.96 1213.04 L1498.55 1213.04 L1499.14 1213.04 L1499.72 1213.04 L1500.31 1213.04 L1500.9 1213.04 L1501.48 1213.04 L1502.07 1213.04 L1502.65 1213.04 L1503.24 1213.04 L1503.83 1213.04 L1504.41 1213.04 L1505 1213.04 L1505.59 1213.04 L1506.17 1213.04 L1506.76 1213.04 L1507.35 1213.04 L1507.93 1213.04 L1508.52 1213.04 L1509.11 1213.04 L1509.69 1213.04 L1510.28 1213.04 L1510.86 1213.04 L1511.45 1213.04 L1512.04 1213.04 L1512.62 1213.04 L1513.21 1213.04 L1513.8 1213.04 L1514.38 1213.04 L1514.97 1213.04 L1515.56 1213.04 L1516.14 1213.04 L1516.73 1213.04 L1517.32 1213.04 L1517.9 1213.04 L1518.49 1213.04 L1519.07 1213.04 L1519.66 1213.04 L1520.25 1213.04 L1520.83 1213.04 L1521.42 1213.04 L1522.01 1213.04 L1522.59 1213.04 L1523.18 1213.04 L1523.77 1213.04 L1524.35 1213.04 L1524.94 1213.04 L1525.52 1213.04 L1526.11 1213.04 L1526.7 1213.04 L1527.28 1213.04 L1527.87 1213.04 L1528.46 1213.04 L1529.04 1213.04 L1529.63 1213.04 L1530.22 1213.04 L1530.8 1213.04 L1531.39 1213.04 L1531.98 1213.04 L1532.56 1213.04 L1533.15 1213.04 L1533.73 1213.04 L1534.32 1213.04 L1534.91 1213.04 L1535.49 1213.04 L1536.08 1213.04 L1536.67 1213.04 L1537.25 1213.04 L1537.84 1213.04 L1538.43 1213.04 L1539.01 1213.04 L1539.6 1213.04 L1540.19 1213.04 L1540.77 1213.04 L1541.36 1213.04 L1541.94 1213.04 L1542.53 1213.04 L1543.12 1213.04 L1543.7 1213.04 L1544.29 1213.04 L1544.88 1213.04 L1545.46 1213.04 L1546.05 1213.04 L1546.64 1213.04 L1547.22 1213.04 L1547.81 1213.04 L1548.4 1213.04 L1548.98 1213.04 L1549.57 1213.04 L1550.15 1213.04 L1550.74 1213.04 L1551.33 1213.04 L1551.91 1213.04 L1552.5 1213.04 L1553.09 1213.04 L1553.67 1213.04 L1554.26 1213.04 L1554.85 1213.04 L1555.43 1213.04 L1556.02 1213.04 L1556.6 1213.04 L1557.19 1213.04 L1557.78 1213.04 L1558.36 1213.04 L1558.95 1213.04 L1559.54 1213.04 L1560.12 1213.04 L1560.71 1213.04 L1561.3 1213.04 L1561.88 1213.04 L1562.47 1213.04 L1563.06 1213.04 L1563.64 1213.04 L1564.23 1213.04 L1564.81 1213.04 L1565.4 1213.04 L1565.99 1213.04 L1566.57 1213.04 L1567.16 1213.04 L1567.75 1213.04 L1568.33 1213.04 L1568.92 1213.04 L1569.51 1213.04 L1570.09 1213.04 L1570.68 1213.04 L1571.27 1213.04 L1571.85 1213.04 L1572.44 1213.04 L1573.02 1213.04 L1573.61 1213.04 L1574.2 1213.04 L1574.78 1213.04 L1575.37 1213.04 L1575.96 1213.04 L1576.54 1213.04 L1577.13 1213.04 L1577.72 1213.04 L1578.3 1213.04 L1578.89 1213.04 L1579.47 1213.04 L1580.06 1213.04 L1580.65 1213.04 L1581.23 1213.04 L1581.82 1213.04 L1582.41 1213.04 L1582.99 1213.04 L1583.58 1213.04 L1584.17 1213.04 L1584.75 1213.04 L1585.34 1213.04 L1585.93 1213.04 L1586.51 1213.04 L1587.1 1213.04 L1587.68 1213.04 L1588.27 1213.04 L1588.86 1213.04 L1589.44 1213.04 L1590.03 1213.04 L1590.62 1213.04 L1591.2 1213.04 L1591.79 1213.04 L1592.38 1213.04 L1592.96 1213.04 L1593.55 1213.04 L1594.14 1213.04 L1594.72 1213.04 L1595.31 1213.04 L1595.89 1213.04 L1596.48 1213.04 L1597.07 1213.04 L1597.65 1213.04 L1598.24 1213.04 L1598.83 1213.04 L1599.41 1213.04 L1600 1213.04 L1600.59 1213.04 L1601.17 1213.04 L1601.76 1213.04 L1602.34 1213.04 L1602.93 1213.04 L1603.52 1213.04 L1604.1 1213.04 L1604.69 1213.04 L1605.28 1213.04 L1605.86 1213.04 L1606.45 1213.04 L1607.04 1213.04 L1607.62 1213.04 L1608.21 1213.04 L1608.8 1213.04 L1609.38 1213.04 L1609.97 1213.04 L1610.55 1213.04 L1611.14 1213.04 L1611.73 1213.04 L1612.31 1213.04 L1612.9 1213.04 L1613.49 1213.04 L1614.07 1213.04 L1614.66 1213.04 L1615.25 1213.04 L1615.83 1213.04 L1616.42 1213.04 L1617.01 1213.04 L1617.59 1213.04 L1618.18 1213.04 L1618.76 1213.04 L1619.35 1213.04 L1619.94 1213.04 L1620.52 1213.04 L1621.11 1213.04 L1621.7 1213.04 L1622.28 1213.04 L1622.87 1213.04 L1623.46 1213.04 L1624.04 1213.04 L1624.63 1213.04 L1625.22 1213.04 L1625.8 1213.04 L1626.39 1213.04 L1626.97 1213.04 L1627.56 1213.04 L1628.15 1213.04 L1628.73 1213.04 L1629.32 1213.04 L1629.91 1213.04 L1630.49 1213.04 L1631.08 1213.04 L1631.67 1213.04 L1632.25 1213.04 L1632.84 1213.04 L1633.42 1213.04 L1634.01 1213.04 L1634.6 1213.04 L1635.18 1213.04 L1635.77 1213.04 L1636.36 1213.04 L1636.94 1213.04 L1637.53 1213.04 L1638.12 1213.04 L1638.7 1213.04 L1639.29 1213.04 L1639.88 1213.04 L1640.46 1213.04 L1641.05 1213.04 L1641.63 1213.04 L1642.22 1213.04 L1642.81 1213.04 L1643.39 1213.04 L1643.98 1213.04 L1644.57 1213.04 L1645.15 1213.04 L1645.74 1213.04 L1646.33 1213.04 L1646.91 1213.04 L1647.5 1213.04 L1648.09 1213.04 L1648.67 1213.04 L1649.26 1213.04 L1649.84 1213.04 L1650.43 1213.04 L1651.02 1213.04 L1651.6 1213.04 L1652.19 1213.04 L1652.78 1213.04 L1653.36 1213.04 L1653.95 1213.04 L1654.54 1213.04 L1655.12 1213.04 L1655.71 1213.04 L1656.29 1213.04 L1656.88 1213.04 L1657.47 1213.04 L1658.05 1213.04 L1658.64 1213.04 L1659.23 1213.04 L1659.81 1213.04 L1660.4 1213.04 L1660.99 1213.04 L1661.57 1213.04 L1662.16 1213.04 L1662.75 1213.04 L1663.33 1213.04 L1663.92 1213.04 L1664.5 1213.04 L1665.09 1213.04 L1665.68 1213.04 L1666.26 1213.04 L1666.85 1213.04 L1667.44 1213.04 L1668.02 1213.04 L1668.61 1213.04 L1669.2 1213.04 L1669.78 1213.04 L1670.37 1213.04 L1670.96 1213.04 L1671.54 1213.04 L1672.13 1213.04 L1672.71 1213.04 L1673.3 1213.04 L1673.89 1213.04 L1674.47 1213.04 L1675.06 1213.04 L1675.65 1213.04 L1676.23 1213.04 L1676.82 1213.04 L1677.41 1213.04 L1677.99 1213.04 L1678.58 1213.04 L1679.17 1213.04 L1679.75 1213.04 L1680.34 1213.04 L1680.92 1213.04 L1681.51 1213.04 L1682.1 1213.04 L1682.68 1213.04 L1683.27 1213.04 L1683.86 1213.04 L1684.44 1213.04 L1685.03 1213.04 L1685.62 1213.04 L1686.2 1213.04 L1686.79 1213.04 L1687.37 1213.04 L1687.96 1213.04 L1688.55 1213.04 L1689.13 1213.04 L1689.72 1213.04 L1690.31 1213.04 L1690.89 1213.04 L1691.48 1213.04 L1692.07 1213.04 L1692.65 1213.04 L1693.24 1213.04 L1693.83 1213.04 L1694.41 1213.04 L1695 1213.04 L1695.58 1213.04 L1696.17 1213.04 L1696.76 1213.04 L1697.34 1213.04 L1697.93 1213.04 L1698.52 1213.04 L1699.1 1213.04 L1699.69 1213.04 L1700.28 1213.04 L1700.86 1213.04 L1701.45 1213.04 L1702.04 1213.04 L1702.62 1213.04 L1703.21 1213.04 L1703.79 1213.04 L1704.38 1213.04 L1704.97 1213.04 L1705.55 1213.04 L1706.14 1213.04 L1706.73 1213.04 L1707.31 1213.04 L1707.9 1213.04 L1708.49 1213.04 L1709.07 1213.04 L1709.66 1213.04 L1710.24 1213.04 L1710.83 1213.04 L1711.42 1213.04 L1712 1213.04 L1712.59 1213.04 L1713.18 1213.04 L1713.76 1213.04 L1714.35 1213.04 L1714.94 1213.04 L1715.52 1213.04 L1716.11 1213.04 L1716.7 1213.04 L1717.28 1213.04 L1717.87 1213.04 L1718.45 1213.04 L1719.04 1213.04 L1719.63 1213.04 L1720.21 1213.04 L1720.8 1213.04 L1721.39 1213.04 L1721.97 1213.04 L1722.56 1213.04 L1723.15 1213.04 L1723.73 1213.04 L1724.32 1213.04 L1724.91 1213.04 L1725.49 1213.04 L1726.08 1213.04 L1726.66 1213.04 L1727.25 1213.04 L1727.84 1213.04 L1728.42 1213.04 L1729.01 1213.04 L1729.6 1213.04 L1730.18 1213.04 L1730.77 1213.04 L1731.36 1213.04 L1731.94 1213.04 L1732.53 1213.04 L1733.11 1213.04 L1733.7 1213.04 L1734.29 1213.04 L1734.87 1213.04 L1735.46 1213.04 L1736.05 1213.04 L1736.63 1213.04 L1737.22 1213.04 L1737.81 1213.04 L1738.39 1213.04 L1738.98 1213.04 L1739.57 1213.04 L1740.15 1213.04 L1740.74 1213.04 L1741.32 1213.04 L1741.91 1213.04 L1742.5 1213.04 L1743.08 1213.04 L1743.67 1213.04 L1744.26 1213.04 L1744.84 1213.04 L1745.43 1213.04 L1746.02 1213.04 L1746.6 1213.04 L1747.19 1213.04 L1747.78 1213.04 L1748.36 1213.04 L1748.95 1213.04 L1749.53 1213.04 L1750.12 1213.04 L1750.71 1213.04 L1751.29 1213.04 L1751.88 1213.04 L1752.47 1213.04 L1753.05 1213.04 L1753.64 1213.04 L1754.23 1213.04 L1754.81 1213.04 L1755.4 1213.04 L1755.99 1213.04 L1756.57 1213.04 L1757.16 1213.04 L1757.74 1213.04 L1758.33 1213.04 L1758.92 1213.04 L1759.5 1213.04 L1760.09 1213.04 L1760.68 1213.04 L1761.26 1213.04 L1761.85 1213.04 L1762.44 1213.04 L1763.02 1213.04 L1763.61 1213.04 L1764.19 1213.04 L1764.78 1213.04 L1765.37 1213.04 L1765.95 1213.04 L1766.54 1213.04 L1767.13 1213.04 L1767.71 1213.04 L1768.3 1213.04 L1768.89 1213.04 L1769.47 1213.04 L1770.06 1213.04 L1770.65 1213.04 L1771.23 1213.04 L1771.82 1213.04 L1772.4 1213.04 L1772.99 1213.04 L1773.58 1213.04 L1774.16 1213.04 L1774.75 1213.04 L1775.34 1213.04 L1775.92 1213.04 L1776.51 1213.04 L1777.1 1213.04 L1777.68 1213.04 L1778.27 1213.04 L1778.86 1213.04 L1779.44 1213.04 L1780.03 1213.04 L1780.61 1213.04 L1781.2 1213.04 L1781.79 1213.04 L1782.37 1213.04 L1782.96 1213.04 L1783.55 1213.04 L1784.13 1213.04 L1784.72 1213.04 L1785.31 1213.04 L1785.89 1213.04 L1786.48 1213.04 L1787.06 1213.04 L1787.65 1213.04 L1788.24 1213.04 L1788.82 1213.04 L1789.41 1213.04 L1790 1213.04 L1790.58 1213.04 L1791.17 1213.04 L1791.76 1213.04 L1792.34 1213.04 L1792.93 1213.04 L1793.52 1213.04 L1794.1 1213.04 L1794.69 1213.04 L1795.27 1213.04 L1795.86 1213.04 L1796.45 1213.04 L1797.03 1213.04 L1797.62 1213.04 L1798.21 1213.04 L1798.79 1213.04 L1799.38 1213.04 L1799.97 1213.04 L1800.55 1213.04 L1801.14 1213.04 L1801.73 1213.04 L1802.31 1213.04 L1802.9 1213.04 L1803.48 1213.04 L1804.07 1213.04 L1804.66 1213.04 L1805.24 1213.04 L1805.83 1213.04 L1806.42 1213.04 L1807 1213.04 L1807.59 1213.04 L1808.18 1213.04 L1808.76 1213.04 L1809.35 1213.04 L1809.94 1213.04 L1810.52 1213.04 L1811.11 1213.04 L1811.69 1213.04 L1812.28 1213.04 L1812.87 1213.04 L1813.45 1213.04 L1814.04 1213.04 L1814.63 1213.04 L1815.21 1213.04 L1815.8 1213.04 L1816.39 1213.04 L1816.97 1213.04 L1817.56 1213.04 L1818.14 1213.04 L1818.73 1213.04 L1819.32 1213.04 L1819.9 1213.04 L1820.49 1213.04 L1821.08 1213.04 L1821.66 1213.04 L1822.25 1213.04 L1822.84 1213.04 L1823.42 1213.04 L1824.01 1213.04 L1824.6 1213.04 L1825.18 1213.04 L1825.77 1213.04 L1826.35 1213.04 L1826.94 1213.04 L1827.53 1213.04 L1828.11 1213.04 L1828.7 1213.04 L1829.29 1213.04 L1829.87 1213.04 L1830.46 1213.04 L1831.05 1213.04 L1831.63 1213.04 L1832.22 1213.04 L1832.81 1213.04 L1833.39 1213.04 L1833.98 1213.04 L1834.56 1213.04 L1835.15 1213.04 L1835.74 1213.04 L1836.32 1213.04 L1836.91 1213.04 L1837.5 1213.04 L1838.08 1213.04 L1838.67 1213.04 L1839.26 1213.04 L1839.84 1213.04 L1840.43 1213.04 L1841.01 1213.04 L1841.6 1213.04 L1842.19 1213.04 L1842.77 1213.04 L1843.36 1213.04 L1843.95 1213.04 L1844.53 1213.04 L1845.12 1213.04 L1845.71 1213.04 L1846.29 1213.04 L1846.88 1213.04 L1847.47 1213.04 L1848.05 1213.04 L1848.64 1213.04 L1849.22 1213.04 L1849.81 1213.04 L1850.4 1213.04 L1850.98 1213.04 L1851.57 1213.04 L1852.16 1213.04 L1852.74 1213.04 L1853.33 1213.04 L1853.92 1213.04 L1854.5 1213.04 L1855.09 1213.04 L1855.68 1213.04 L1856.26 1213.04 L1856.85 1213.04 L1857.43 1213.04 L1858.02 1213.04 L1858.61 1213.04 L1859.19 1213.04 L1859.78 1213.04 L1860.37 1213.04 L1860.95 1213.04 L1861.54 1213.04 L1862.13 1213.04 L1862.71 1213.04 L1863.3 1213.04 L1863.88 1213.04 L1864.47 1213.04 L1865.06 1213.04 L1865.64 1213.04 L1866.23 1213.04 L1866.82 1213.04 L1867.4 1213.04 L1867.99 1213.04 L1868.58 1213.04 L1869.16 1213.04 L1869.75 1213.04 L1870.34 1213.04 L1870.92 1213.04 L1871.51 1213.04 L1872.09 1213.04 L1872.68 1213.04 L1873.27 1213.04 L1873.85 1213.04 L1874.44 1213.04 L1875.03 1213.04 L1875.61 1213.04 L1876.2 1213.04 L1876.79 1213.04 L1877.37 1213.04 L1877.96 1213.04 L1878.55 1213.04 L1879.13 1213.04 L1879.72 1213.04 L1880.3 1213.04 L1880.89 1213.04 L1881.48 1213.04 L1882.06 1213.04 L1882.65 1213.04 L1883.24 1213.04 L1883.82 1213.04 L1884.41 1213.04 L1885 1213.04 L1885.58 1213.04 L1886.17 1213.04 L1886.76 1213.04 L1887.34 1213.04 L1887.93 1213.04 L1888.51 1213.04 L1889.1 1213.04 L1889.69 1213.04 L1890.27 1213.04 L1890.86 1213.04 L1891.45 1213.04 L1892.03 1213.04 L1892.62 1213.04 L1893.21 1213.04 L1893.79 1213.04 L1894.38 1213.04 L1894.96 1213.04 L1895.55 1213.04 L1896.14 1213.04 L1896.72 1213.04 L1897.31 1213.04 L1897.9 1213.04 L1898.48 1213.04 L1899.07 1213.04 L1899.66 1213.04 L1900.24 1213.04 L1900.83 1213.04 L1901.42 1213.04 L1902 1213.04 L1902.59 1213.04 L1903.17 1213.04 L1903.76 1213.04 L1904.35 1213.04 L1904.93 1213.04 L1905.52 1213.04 L1906.11 1213.04 L1906.69 1213.04 L1907.28 1213.04 L1907.87 1213.04 L1908.45 1213.04 L1909.04 1213.04 L1909.63 1213.04 L1910.21 1213.04 L1910.8 1213.04 L1911.38 1213.04 L1911.97 1213.04 L1912.56 1213.04 L1913.14 1213.04 L1913.73 1213.04 L1914.32 1213.04 L1914.9 1213.04 L1915.49 1213.04 L1916.08 1213.04 L1916.66 1213.04 L1917.25 1213.04 L1917.83 1213.04 L1918.42 1213.04 L1919.01 1213.04 L1919.59 1213.04 L1920.18 1213.04 L1920.77 1213.04 L1921.35 1213.04 L1921.94 1213.04 L1922.53 1213.04 L1923.11 1213.04 L1923.7 1213.04 L1924.29 1213.04 L1924.87 1213.04 L1925.46 1213.04 L1926.04 1213.04 L1926.63 1213.04 L1927.22 1213.04 L1927.8 1213.04 L1928.39 1213.04 L1928.98 1213.04 L1929.56 1213.04 L1930.15 1213.04 L1930.74 1213.04 L1931.32 1213.04 L1931.91 1213.04 L1932.5 1213.04 L1933.08 1213.04 L1933.67 1213.04 L1934.25 1213.04 L1934.84 1213.04 L1935.43 1213.04 L1936.01 1213.04 L1936.6 1213.04 L1937.19 1213.04 L1937.77 1213.04 L1938.36 1213.04 L1938.95 1213.04 L1939.53 1213.04 L1940.12 1213.04 L1940.71 1213.04 L1941.29 1213.04 L1941.88 1213.04 L1942.46 1213.04 L1943.05 1213.04 L1943.64 1213.04 L1944.22 1213.04 L1944.81 1213.04 L1945.4 1213.04 L1945.98 1213.04 L1946.57 1213.04 L1947.16 1213.04 L1947.74 1213.04 L1948.33 1213.04 L1948.91 1213.04 L1949.5 1213.04 L1950.09 1213.04 L1950.67 1213.04 L1951.26 1213.04 L1951.85 1213.04 L1952.43 1213.04 L1953.02 1213.04 L1953.61 1213.04 L1954.19 1213.04 L1954.78 1213.04 L1955.37 1213.04 L1955.95 1213.04 L1956.54 1213.04 L1957.12 1213.04 L1957.71 1213.04 L1958.3 1213.04 L1958.88 1213.04 L1959.47 1213.04 L1960.06 1213.04 L1960.64 1213.04 L1961.23 1213.04 L1961.82 1213.04 L1962.4 1213.04 L1962.99 1213.04 L1963.58 1213.04 L1964.16 1213.04 L1964.75 1213.04 L1965.33 1213.04 L1965.92 1213.04 L1966.51 1213.04 L1967.09 1213.04 L1967.68 1213.04 L1968.27 1213.04 L1968.85 1213.04 L1969.44 1213.04 L1970.03 1213.04 L1970.61 1213.04 L1971.2 1213.04 L1971.78 1213.04 L1972.37 1213.04 L1972.96 1213.04 L1973.54 1213.04 L1974.13 1213.04 L1974.72 1213.04 L1975.3 1213.04 L1975.89 1213.04 L1976.48 1213.04 L1977.06 1213.04 L1977.65 1213.04 L1978.24 1213.04 L1978.82 1213.04 L1979.41 1213.04 L1979.99 1213.04 L1980.58 1213.04 L1981.17 1213.04 L1981.75 1213.04 L1982.34 1213.04 L1982.93 1213.04 L1983.51 1213.04 L1984.1 1213.04 L1984.69 1213.04 L1985.27 1213.04 L1985.86 1213.04 L1986.45 1213.04 L1987.03 1213.04 L1987.62 1213.04 L1988.2 1213.04 L1988.79 1213.04 L1989.38 1213.04 L1989.96 1213.04 L1990.55 1213.04 L1991.14 1213.04 L1991.72 1213.04 L1992.31 1213.04 L1992.9 1213.04 L1993.48 1213.04 L1994.07 1213.04 L1994.65 1213.04 L1995.24 1213.04 L1995.83 1213.04 L1996.41 1213.04 L1997 1213.04 L1997.59 1213.04 L1998.17 1213.04 L1998.76 1213.04 L1999.35 1213.04 L1999.93 1213.04 L2000.52 1213.04 L2001.11 1213.04 L2001.69 1213.04 L2002.28 1213.04 L2002.86 1213.04 L2003.45 1213.04 L2004.04 1213.04 L2004.62 1213.04 L2005.21 1213.04 L2005.8 1213.04 L2006.38 1213.04 L2006.97 1213.04 L2007.56 1213.04 L2008.14 1213.04 L2008.73 1213.04 L2009.32 1213.04 L2009.9 1213.04 L2010.49 1213.04 L2011.07 1213.04 L2011.66 1213.04 L2012.25 1213.04 L2012.83 1213.04 L2013.42 1213.04 L2014.01 1213.04 L2014.59 1213.04 L2015.18 1213.04 L2015.77 1213.04 L2016.35 1213.04 L2016.94 1213.04 L2017.53 1213.04 L2018.11 1213.04 L2018.7 1213.04 L2019.28 1213.04 L2019.87 1213.04 L2020.46 1213.04 L2021.04 1213.04 L2021.63 1213.04 L2022.22 1213.04 L2022.8 1213.04 L2023.39 1213.04 L2023.98 1213.04 L2024.56 1213.04 L2025.15 1213.04 L2025.73 1213.04 L2026.32 1213.04 L2026.91 1213.04 L2027.49 1213.04 L2028.08 1213.04 L2028.67 1213.04 L2029.25 1213.04 L2029.84 1213.04 L2030.43 1213.04 L2031.01 1213.04 L2031.6 1213.04 L2032.19 1213.04 L2032.77 1213.04 L2033.36 1213.04 L2033.94 1213.04 L2034.53 1213.04 L2035.12 1213.04 L2035.7 1213.04 L2036.29 1213.04 L2036.88 1213.04 L2037.46 1213.04 L2038.05 1213.04 L2038.64 1213.04 L2039.22 1213.04 L2039.81 1213.04 L2040.4 1213.04 L2040.98 1213.04 L2041.57 1213.04 L2042.15 1213.04 L2042.74 1213.04 L2043.33 1213.04 L2043.91 1213.04 L2044.5 1213.04 L2045.09 1213.04 L2045.67 1213.04 L2046.26 1213.04 L2046.85 1213.04 L2047.43 1213.04 L2048.02 1213.04 L2048.6 1213.04 L2049.19 1213.04 L2049.78 1213.04 L2050.36 1213.04 L2050.95 1213.04 L2051.54 1213.04 L2052.12 1213.04 L2052.71 1213.04 L2053.3 1213.04 L2053.88 1213.04 L2054.47 1213.04 L2055.06 1213.04 L2055.64 1213.04 L2056.23 1213.04 L2056.81 1213.04 L2057.4 1213.04 L2057.99 1213.04 L2058.57 1213.04 L2059.16 1213.04 L2059.75 1213.04 L2060.33 1213.04 L2060.92 1213.04 L2061.51 1213.04 L2062.09 1213.04 L2062.68 1213.04 L2063.27 1213.04 L2063.85 1213.04 L2064.44 1213.04 L2065.02 1213.04 L2065.61 1213.04 L2066.2 1213.04 L2066.78 1213.04 L2067.37 1213.04 L2067.96 1213.04 L2068.54 1213.04 L2069.13 1213.04 L2069.72 1213.04 L2070.3 1213.04 L2070.89 1213.04 L2071.48 1213.04 L2072.06 1213.04 L2072.65 1213.04 L2073.23 1213.04 L2073.82 1213.04 L2074.41 1213.04 L2074.99 1213.04 L2075.58 1213.04 L2076.17 1213.04 L2076.75 1213.04 L2077.34 1213.04 L2077.93 1213.04 L2078.51 1213.04 L2079.1 1213.04 L2079.68 1213.04 L2080.27 1213.04 L2080.86 1213.04 L2081.44 1213.04 L2082.03 1213.04 L2082.62 1213.04 L2083.2 1213.04 L2083.79 1213.04 L2084.38 1213.04 L2084.96 1213.04 L2085.55 1213.04 L2086.14 1213.04 L2086.72 1213.04 L2087.31 1213.04 L2087.89 1213.04 L2088.48 1213.04 L2089.07 1213.04 L2089.65 1213.04 L2090.24 1213.04 L2090.83 1213.04 L2091.41 1213.04 L2092 1213.04 L2092.59 1213.04 L2093.17 1213.04 L2093.76 1213.04 L2094.35 1213.04 L2094.93 1213.04 L2095.52 1213.04 L2096.1 1213.04 L2096.69 1213.04 L2097.28 1213.04 L2097.86 1213.04 L2098.45 1213.04 L2099.04 1213.04 L2099.62 1213.04 L2100.21 1213.04 L2100.8 1213.04 L2101.38 1213.04 L2101.97 1213.04 L2102.55 1213.04 L2103.14 1213.04 L2103.73 1213.04 L2104.31 1213.04 L2104.9 1213.04 L2105.49 1213.04 L2106.07 1213.04 L2106.66 1213.04 L2107.25 1213.04 L2107.83 1213.04 L2108.42 1213.04 L2109.01 1213.04 L2109.59 1213.04 L2110.18 1213.04 L2110.76 1213.04 L2111.35 1213.04 L2111.94 1213.04 L2112.52 1213.04 L2113.11 1213.04 L2113.7 1213.04 L2114.28 1213.04 L2114.87 1213.04 L2115.46 1213.04 L2116.04 1213.04 L2116.63 1213.04 L2117.22 1213.04 L2117.8 1213.04 L2118.39 1213.04 L2118.97 1213.04 L2119.56 1213.04 L2120.15 1213.04 L2120.73 1213.04 L2121.32 1213.04 L2121.91 1213.04 L2122.49 1213.04 L2123.08 1213.04 L2123.67 1213.04 L2124.25 1213.04 L2124.84 1213.04 L2125.42 1213.04 L2126.01 1213.04 L2126.6 1213.04 L2127.18 1213.04 L2127.77 1213.04 L2128.36 1213.04 L2128.94 1213.04 L2129.53 1213.04 L2130.12 1213.04 L2130.7 1213.04 L2131.29 1213.04 L2131.88 1213.04 L2132.46 1213.04 L2133.05 1213.04 L2133.63 1213.04 L2134.22 1213.04 L2134.81 1213.04 L2135.39 1213.04 L2135.98 1213.04 L2136.57 1213.04 L2137.15 1213.04 L2137.74 1213.04 L2138.33 1213.04 L2138.91 1213.04 L2139.5 1213.04 L2140.09 1213.04 L2140.67 1213.04 L2141.26 1213.04 L2141.84 1213.04 L2142.43 1213.04 L2143.02 1213.04 L2143.6 1213.04 L2144.19 1213.04 L2144.78 1213.04 L2145.36 1213.04 L2145.95 1213.04 L2146.54 1213.04 L2147.12 1213.04 L2147.71 1213.04 L2148.3 1213.04 L2148.88 1213.04 L2149.47 1213.04 L2150.05 1213.04 L2150.64 1213.04 L2151.23 1213.04 L2151.81 1213.04 L2152.4 1213.04 L2152.99 1213.04 L2153.57 1213.04 L2154.16 1213.04 L2154.75 1213.04 L2155.33 1213.04 L2155.92 1213.04 L2156.5 1213.04 L2157.09 1213.04 L2157.68 1213.04 L2158.26 1213.04 L2158.26 1212.53 L2157.68 1212.53 L2157.09 1212.53 L2156.5 1212.53 L2155.92 1212.53 L2155.33 1212.53 L2154.75 1212.53 L2154.16 1212.53 L2153.57 1212.53 L2152.99 1212.53 L2152.4 1212.53 L2151.81 1212.53 L2151.23 1212.53 L2150.64 1212.53 L2150.05 1212.53 L2149.47 1212.53 L2148.88 1212.53 L2148.3 1212.53 L2147.71 1212.53 L2147.12 1212.53 L2146.54 1212.53 L2145.95 1212.53 L2145.36 1212.53 L2144.78 1212.53 L2144.19 1212.53 L2143.6 1212.53 L2143.02 1212.53 L2142.43 1212.53 L2141.84 1212.53 L2141.26 1212.53 L2140.67 1212.53 L2140.09 1212.53 L2139.5 1212.53 L2138.91 1212.53 L2138.33 1212.53 L2137.74 1212.53 L2137.15 1212.53 L2136.57 1212.53 L2135.98 1212.53 L2135.39 1212.53 L2134.81 1212.53 L2134.22 1212.53 L2133.63 1212.53 L2133.05 1212.53 L2132.46 1212.53 L2131.88 1212.53 L2131.29 1212.53 L2130.7 1212.53 L2130.12 1212.53 L2129.53 1212.53 L2128.94 1212.53 L2128.36 1212.53 L2127.77 1212.53 L2127.18 1212.53 L2126.6 1212.53 L2126.01 1212.53 L2125.42 1212.53 L2124.84 1212.53 L2124.25 1212.53 L2123.67 1212.53 L2123.08 1212.53 L2122.49 1212.53 L2121.91 1212.53 L2121.32 1212.53 L2120.73 1212.53 L2120.15 1212.53 L2119.56 1212.53 L2118.97 1212.53 L2118.39 1212.53 L2117.8 1212.53 L2117.22 1212.53 L2116.63 1212.53 L2116.04 1212.53 L2115.46 1212.53 L2114.87 1212.53 L2114.28 1212.53 L2113.7 1212.53 L2113.11 1212.53 L2112.52 1212.53 L2111.94 1212.53 L2111.35 1212.53 L2110.76 1212.53 L2110.18 1212.53 L2109.59 1212.53 L2109.01 1212.53 L2108.42 1212.53 L2107.83 1212.53 L2107.25 1212.53 L2106.66 1212.53 L2106.07 1212.53 L2105.49 1212.53 L2104.9 1212.53 L2104.31 1212.53 L2103.73 1212.53 L2103.14 1212.53 L2102.55 1212.53 L2101.97 1212.53 L2101.38 1212.53 L2100.8 1212.53 L2100.21 1212.53 L2099.62 1212.53 L2099.04 1212.53 L2098.45 1212.53 L2097.86 1212.53 L2097.28 1212.53 L2096.69 1212.53 L2096.1 1212.53 L2095.52 1212.53 L2094.93 1212.53 L2094.35 1212.53 L2093.76 1212.53 L2093.17 1212.53 L2092.59 1212.53 L2092 1212.53 L2091.41 1212.53 L2090.83 1212.53 L2090.24 1212.53 L2089.65 1212.53 L2089.07 1212.53 L2088.48 1212.53 L2087.89 1212.53 L2087.31 1212.53 L2086.72 1212.53 L2086.14 1212.53 L2085.55 1212.53 L2084.96 1212.53 L2084.38 1212.53 L2083.79 1212.53 L2083.2 1212.53 L2082.62 1212.53 L2082.03 1212.53 L2081.44 1212.53 L2080.86 1212.53 L2080.27 1212.53 L2079.68 1212.53 L2079.1 1212.53 L2078.51 1212.53 L2077.93 1212.53 L2077.34 1212.53 L2076.75 1212.53 L2076.17 1212.53 L2075.58 1212.53 L2074.99 1212.53 L2074.41 1212.53 L2073.82 1212.53 L2073.23 1212.53 L2072.65 1212.53 L2072.06 1212.53 L2071.48 1212.53 L2070.89 1212.53 L2070.3 1212.53 L2069.72 1212.53 L2069.13 1212.53 L2068.54 1212.53 L2067.96 1212.53 L2067.37 1212.53 L2066.78 1212.53 L2066.2 1212.53 L2065.61 1212.53 L2065.02 1212.53 L2064.44 1212.53 L2063.85 1212.53 L2063.27 1212.53 L2062.68 1212.53 L2062.09 1212.53 L2061.51 1212.53 L2060.92 1212.53 L2060.33 1212.53 L2059.75 1212.53 L2059.16 1212.53 L2058.57 1212.53 L2057.99 1212.53 L2057.4 1212.53 L2056.81 1212.53 L2056.23 1212.53 L2055.64 1212.53 L2055.06 1212.53 L2054.47 1212.53 L2053.88 1212.53 L2053.3 1212.53 L2052.71 1212.53 L2052.12 1212.53 L2051.54 1212.53 L2050.95 1212.53 L2050.36 1212.53 L2049.78 1212.53 L2049.19 1212.53 L2048.6 1212.53 L2048.02 1212.53 L2047.43 1212.53 L2046.85 1212.53 L2046.26 1212.53 L2045.67 1212.53 L2045.09 1212.53 L2044.5 1212.53 L2043.91 1212.53 L2043.33 1212.53 L2042.74 1212.53 L2042.15 1212.53 L2041.57 1212.53 L2040.98 1212.53 L2040.4 1212.53 L2039.81 1212.53 L2039.22 1212.53 L2038.64 1212.53 L2038.05 1212.53 L2037.46 1212.53 L2036.88 1212.53 L2036.29 1212.53 L2035.7 1212.53 L2035.12 1212.53 L2034.53 1212.53 L2033.94 1212.53 L2033.36 1212.53 L2032.77 1212.53 L2032.19 1212.53 L2031.6 1212.53 L2031.01 1212.53 L2030.43 1212.53 L2029.84 1212.53 L2029.25 1212.53 L2028.67 1212.53 L2028.08 1212.53 L2027.49 1212.53 L2026.91 1212.53 L2026.32 1212.53 L2025.73 1212.53 L2025.15 1212.53 L2024.56 1212.53 L2023.98 1212.53 L2023.39 1212.53 L2022.8 1212.53 L2022.22 1212.53 L2021.63 1212.53 L2021.04 1212.53 L2020.46 1212.53 L2019.87 1212.53 L2019.28 1212.53 L2018.7 1212.53 L2018.11 1212.53 L2017.53 1212.53 L2016.94 1212.53 L2016.35 1212.53 L2015.77 1212.53 L2015.18 1212.53 L2014.59 1212.53 L2014.01 1212.53 L2013.42 1212.53 L2012.83 1212.53 L2012.25 1212.53 L2011.66 1212.53 L2011.07 1212.53 L2010.49 1212.53 L2009.9 1212.53 L2009.32 1212.53 L2008.73 1212.53 L2008.14 1212.53 L2007.56 1212.53 L2006.97 1212.53 L2006.38 1212.53 L2005.8 1212.53 L2005.21 1212.53 L2004.62 1212.53 L2004.04 1212.53 L2003.45 1212.53 L2002.86 1212.53 L2002.28 1212.53 L2001.69 1212.53 L2001.11 1212.53 L2000.52 1212.53 L1999.93 1212.53 L1999.35 1212.53 L1998.76 1212.53 L1998.17 1212.53 L1997.59 1212.53 L1997 1212.53 L1996.41 1212.53 L1995.83 1212.53 L1995.24 1212.53 L1994.65 1212.53 L1994.07 1212.53 L1993.48 1212.53 L1992.9 1212.53 L1992.31 1212.53 L1991.72 1212.53 L1991.14 1212.53 L1990.55 1212.53 L1989.96 1212.53 L1989.38 1212.53 L1988.79 1212.53 L1988.2 1212.53 L1987.62 1212.53 L1987.03 1212.53 L1986.45 1212.53 L1985.86 1212.53 L1985.27 1212.53 L1984.69 1212.53 L1984.1 1212.53 L1983.51 1212.53 L1982.93 1212.53 L1982.34 1212.53 L1981.75 1212.53 L1981.17 1212.53 L1980.58 1212.53 L1979.99 1212.53 L1979.41 1212.53 L1978.82 1212.53 L1978.24 1212.53 L1977.65 1212.53 L1977.06 1212.53 L1976.48 1212.53 L1975.89 1212.53 L1975.3 1212.53 L1974.72 1212.53 L1974.13 1212.53 L1973.54 1212.53 L1972.96 1212.53 L1972.37 1212.53 L1971.78 1212.53 L1971.2 1212.53 L1970.61 1212.53 L1970.03 1212.53 L1969.44 1212.53 L1968.85 1212.53 L1968.27 1212.53 L1967.68 1212.53 L1967.09 1212.53 L1966.51 1212.53 L1965.92 1212.53 L1965.33 1212.53 L1964.75 1212.53 L1964.16 1212.53 L1963.58 1212.53 L1962.99 1212.53 L1962.4 1212.53 L1961.82 1212.53 L1961.23 1212.53 L1960.64 1212.53 L1960.06 1212.53 L1959.47 1212.53 L1958.88 1212.53 L1958.3 1212.53 L1957.71 1212.53 L1957.12 1212.53 L1956.54 1212.53 L1955.95 1212.53 L1955.37 1212.53 L1954.78 1212.53 L1954.19 1212.53 L1953.61 1212.53 L1953.02 1212.53 L1952.43 1212.53 L1951.85 1212.53 L1951.26 1212.53 L1950.67 1212.53 L1950.09 1212.53 L1949.5 1212.53 L1948.91 1212.53 L1948.33 1212.53 L1947.74 1212.53 L1947.16 1212.53 L1946.57 1212.53 L1945.98 1212.53 L1945.4 1212.53 L1944.81 1212.53 L1944.22 1212.53 L1943.64 1212.53 L1943.05 1212.53 L1942.46 1212.53 L1941.88 1212.53 L1941.29 1212.53 L1940.71 1212.53 L1940.12 1212.53 L1939.53 1212.53 L1938.95 1212.53 L1938.36 1212.53 L1937.77 1212.53 L1937.19 1212.53 L1936.6 1212.53 L1936.01 1212.53 L1935.43 1212.53 L1934.84 1212.53 L1934.25 1212.53 L1933.67 1212.53 L1933.08 1212.53 L1932.5 1212.53 L1931.91 1212.53 L1931.32 1212.53 L1930.74 1212.53 L1930.15 1212.53 L1929.56 1212.53 L1928.98 1212.53 L1928.39 1212.53 L1927.8 1212.53 L1927.22 1212.53 L1926.63 1212.53 L1926.04 1212.53 L1925.46 1212.53 L1924.87 1212.53 L1924.29 1212.53 L1923.7 1212.53 L1923.11 1212.53 L1922.53 1212.53 L1921.94 1212.53 L1921.35 1212.53 L1920.77 1212.53 L1920.18 1212.53 L1919.59 1212.53 L1919.01 1212.53 L1918.42 1212.53 L1917.83 1212.53 L1917.25 1212.53 L1916.66 1212.53 L1916.08 1212.53 L1915.49 1212.53 L1914.9 1212.53 L1914.32 1212.53 L1913.73 1212.53 L1913.14 1212.53 L1912.56 1212.53 L1911.97 1212.53 L1911.38 1212.53 L1910.8 1212.53 L1910.21 1212.53 L1909.63 1212.53 L1909.04 1212.53 L1908.45 1212.53 L1907.87 1212.53 L1907.28 1212.53 L1906.69 1212.53 L1906.11 1212.53 L1905.52 1212.53 L1904.93 1212.53 L1904.35 1212.53 L1903.76 1212.53 L1903.17 1212.53 L1902.59 1212.53 L1902 1212.53 L1901.42 1212.53 L1900.83 1212.53 L1900.24 1212.53 L1899.66 1212.53 L1899.07 1212.53 L1898.48 1212.53 L1897.9 1212.53 L1897.31 1212.53 L1896.72 1212.53 L1896.14 1212.53 L1895.55 1212.53 L1894.96 1212.53 L1894.38 1212.53 L1893.79 1212.53 L1893.21 1212.53 L1892.62 1212.53 L1892.03 1212.53 L1891.45 1212.53 L1890.86 1212.53 L1890.27 1212.53 L1889.69 1212.53 L1889.1 1212.53 L1888.51 1212.53 L1887.93 1212.53 L1887.34 1212.53 L1886.76 1212.53 L1886.17 1212.53 L1885.58 1212.53 L1885 1212.53 L1884.41 1212.53 L1883.82 1212.53 L1883.24 1212.53 L1882.65 1212.53 L1882.06 1212.53 L1881.48 1212.53 L1880.89 1212.53 L1880.3 1212.53 L1879.72 1212.53 L1879.13 1212.53 L1878.55 1212.53 L1877.96 1212.53 L1877.37 1212.53 L1876.79 1212.53 L1876.2 1212.53 L1875.61 1212.53 L1875.03 1212.53 L1874.44 1212.53 L1873.85 1212.53 L1873.27 1212.53 L1872.68 1212.53 L1872.09 1212.53 L1871.51 1212.53 L1870.92 1212.53 L1870.34 1212.53 L1869.75 1212.53 L1869.16 1212.53 L1868.58 1212.53 L1867.99 1212.53 L1867.4 1212.53 L1866.82 1212.53 L1866.23 1212.53 L1865.64 1212.53 L1865.06 1212.53 L1864.47 1212.53 L1863.88 1212.53 L1863.3 1212.53 L1862.71 1212.53 L1862.13 1212.53 L1861.54 1212.53 L1860.95 1212.53 L1860.37 1212.53 L1859.78 1212.53 L1859.19 1212.53 L1858.61 1212.53 L1858.02 1212.53 L1857.43 1212.53 L1856.85 1212.53 L1856.26 1212.53 L1855.68 1212.53 L1855.09 1212.53 L1854.5 1212.53 L1853.92 1212.53 L1853.33 1212.53 L1852.74 1212.53 L1852.16 1212.53 L1851.57 1212.53 L1850.98 1212.53 L1850.4 1212.53 L1849.81 1212.53 L1849.22 1212.53 L1848.64 1212.53 L1848.05 1212.53 L1847.47 1212.53 L1846.88 1212.53 L1846.29 1212.53 L1845.71 1212.53 L1845.12 1212.53 L1844.53 1212.53 L1843.95 1212.53 L1843.36 1212.53 L1842.77 1212.53 L1842.19 1212.53 L1841.6 1212.53 L1841.01 1212.53 L1840.43 1212.53 L1839.84 1212.53 L1839.26 1212.53 L1838.67 1212.53 L1838.08 1212.53 L1837.5 1212.53 L1836.91 1212.53 L1836.32 1212.53 L1835.74 1212.53 L1835.15 1212.53 L1834.56 1212.53 L1833.98 1212.53 L1833.39 1212.53 L1832.81 1212.53 L1832.22 1212.53 L1831.63 1212.53 L1831.05 1212.53 L1830.46 1212.53 L1829.87 1212.53 L1829.29 1212.53 L1828.7 1212.53 L1828.11 1212.53 L1827.53 1212.53 L1826.94 1212.53 L1826.35 1212.53 L1825.77 1212.53 L1825.18 1212.53 L1824.6 1212.53 L1824.01 1212.53 L1823.42 1212.53 L1822.84 1212.53 L1822.25 1212.53 L1821.66 1212.53 L1821.08 1212.53 L1820.49 1212.53 L1819.9 1212.53 L1819.32 1212.53 L1818.73 1212.53 L1818.14 1212.53 L1817.56 1212.53 L1816.97 1212.53 L1816.39 1212.53 L1815.8 1212.53 L1815.21 1212.53 L1814.63 1212.53 L1814.04 1212.53 L1813.45 1212.53 L1812.87 1212.53 L1812.28 1212.53 L1811.69 1212.53 L1811.11 1212.53 L1810.52 1212.53 L1809.94 1212.53 L1809.35 1212.53 L1808.76 1212.53 L1808.18 1212.53 L1807.59 1212.53 L1807 1212.53 L1806.42 1212.53 L1805.83 1212.53 L1805.24 1212.53 L1804.66 1212.53 L1804.07 1212.53 L1803.48 1212.53 L1802.9 1212.53 L1802.31 1212.53 L1801.73 1212.53 L1801.14 1212.53 L1800.55 1212.53 L1799.97 1212.53 L1799.38 1212.53 L1798.79 1212.53 L1798.21 1212.53 L1797.62 1212.53 L1797.03 1212.53 L1796.45 1212.53 L1795.86 1212.53 L1795.27 1212.53 L1794.69 1212.53 L1794.1 1212.53 L1793.52 1212.53 L1792.93 1212.53 L1792.34 1212.53 L1791.76 1212.53 L1791.17 1212.53 L1790.58 1212.53 L1790 1212.53 L1789.41 1212.53 L1788.82 1212.53 L1788.24 1212.53 L1787.65 1212.53 L1787.06 1212.53 L1786.48 1212.53 L1785.89 1212.53 L1785.31 1212.53 L1784.72 1212.53 L1784.13 1212.53 L1783.55 1212.53 L1782.96 1212.53 L1782.37 1212.53 L1781.79 1212.53 L1781.2 1212.53 L1780.61 1212.53 L1780.03 1212.53 L1779.44 1212.53 L1778.86 1212.53 L1778.27 1212.53 L1777.68 1212.53 L1777.1 1212.53 L1776.51 1212.53 L1775.92 1212.53 L1775.34 1212.53 L1774.75 1212.53 L1774.16 1212.53 L1773.58 1212.53 L1772.99 1212.53 L1772.4 1212.53 L1771.82 1212.53 L1771.23 1212.53 L1770.65 1212.53 L1770.06 1212.53 L1769.47 1212.53 L1768.89 1212.53 L1768.3 1212.53 L1767.71 1212.53 L1767.13 1212.53 L1766.54 1212.53 L1765.95 1212.53 L1765.37 1212.53 L1764.78 1212.53 L1764.19 1212.53 L1763.61 1212.53 L1763.02 1212.53 L1762.44 1212.53 L1761.85 1212.53 L1761.26 1212.53 L1760.68 1212.53 L1760.09 1212.53 L1759.5 1212.53 L1758.92 1212.53 L1758.33 1212.53 L1757.74 1212.53 L1757.16 1212.53 L1756.57 1212.53 L1755.99 1212.53 L1755.4 1212.53 L1754.81 1212.53 L1754.23 1212.53 L1753.64 1212.53 L1753.05 1212.53 L1752.47 1212.53 L1751.88 1212.53 L1751.29 1212.53 L1750.71 1212.53 L1750.12 1212.53 L1749.53 1212.53 L1748.95 1212.53 L1748.36 1212.53 L1747.78 1212.53 L1747.19 1212.53 L1746.6 1212.53 L1746.02 1212.53 L1745.43 1212.53 L1744.84 1212.53 L1744.26 1212.53 L1743.67 1212.53 L1743.08 1212.53 L1742.5 1212.53 L1741.91 1212.53 L1741.32 1212.53 L1740.74 1212.53 L1740.15 1212.53 L1739.57 1212.53 L1738.98 1212.53 L1738.39 1212.53 L1737.81 1212.53 L1737.22 1212.53 L1736.63 1212.53 L1736.05 1212.53 L1735.46 1212.53 L1734.87 1212.53 L1734.29 1212.53 L1733.7 1212.53 L1733.11 1212.53 L1732.53 1212.53 L1731.94 1212.53 L1731.36 1212.53 L1730.77 1212.53 L1730.18 1212.53 L1729.6 1212.53 L1729.01 1212.53 L1728.42 1212.53 L1727.84 1212.53 L1727.25 1212.53 L1726.66 1212.53 L1726.08 1212.53 L1725.49 1212.53 L1724.91 1212.53 L1724.32 1212.53 L1723.73 1212.53 L1723.15 1212.53 L1722.56 1212.53 L1721.97 1212.53 L1721.39 1212.53 L1720.8 1212.53 L1720.21 1212.53 L1719.63 1212.53 L1719.04 1212.53 L1718.45 1212.53 L1717.87 1212.53 L1717.28 1212.53 L1716.7 1212.53 L1716.11 1212.53 L1715.52 1212.53 L1714.94 1212.53 L1714.35 1212.53 L1713.76 1212.53 L1713.18 1212.53 L1712.59 1212.53 L1712 1212.53 L1711.42 1212.53 L1710.83 1212.53 L1710.24 1212.53 L1709.66 1212.53 L1709.07 1212.53 L1708.49 1212.53 L1707.9 1212.53 L1707.31 1212.53 L1706.73 1212.53 L1706.14 1212.53 L1705.55 1212.53 L1704.97 1212.53 L1704.38 1212.53 L1703.79 1212.53 L1703.21 1212.53 L1702.62 1212.53 L1702.04 1212.53 L1701.45 1212.53 L1700.86 1212.53 L1700.28 1212.53 L1699.69 1212.53 L1699.1 1212.53 L1698.52 1212.53 L1697.93 1212.53 L1697.34 1212.53 L1696.76 1212.53 L1696.17 1212.53 L1695.58 1212.53 L1695 1212.53 L1694.41 1212.53 L1693.83 1212.53 L1693.24 1212.53 L1692.65 1212.53 L1692.07 1212.53 L1691.48 1212.53 L1690.89 1212.53 L1690.31 1212.53 L1689.72 1212.53 L1689.13 1212.53 L1688.55 1212.53 L1687.96 1212.53 L1687.37 1212.53 L1686.79 1212.53 L1686.2 1212.53 L1685.62 1212.53 L1685.03 1212.53 L1684.44 1212.53 L1683.86 1212.53 L1683.27 1212.53 L1682.68 1212.53 L1682.1 1212.53 L1681.51 1212.53 L1680.92 1212.53 L1680.34 1212.53 L1679.75 1212.53 L1679.17 1212.53 L1678.58 1212.53 L1677.99 1212.53 L1677.41 1212.53 L1676.82 1212.53 L1676.23 1212.53 L1675.65 1212.53 L1675.06 1212.53 L1674.47 1212.53 L1673.89 1212.53 L1673.3 1212.53 L1672.71 1212.53 L1672.13 1212.53 L1671.54 1212.53 L1670.96 1212.53 L1670.37 1212.53 L1669.78 1212.53 L1669.2 1212.53 L1668.61 1212.53 L1668.02 1212.53 L1667.44 1212.53 L1666.85 1212.53 L1666.26 1212.53 L1665.68 1212.53 L1665.09 1212.53 L1664.5 1212.53 L1663.92 1212.53 L1663.33 1212.53 L1662.75 1212.53 L1662.16 1212.53 L1661.57 1212.53 L1660.99 1212.53 L1660.4 1212.53 L1659.81 1212.53 L1659.23 1212.53 L1658.64 1212.53 L1658.05 1212.53 L1657.47 1212.53 L1656.88 1212.53 L1656.29 1212.53 L1655.71 1212.53 L1655.12 1212.53 L1654.54 1212.53 L1653.95 1212.53 L1653.36 1212.53 L1652.78 1212.53 L1652.19 1212.53 L1651.6 1212.53 L1651.02 1212.53 L1650.43 1212.53 L1649.84 1212.53 L1649.26 1212.53 L1648.67 1212.53 L1648.09 1212.53 L1647.5 1212.53 L1646.91 1212.53 L1646.33 1212.53 L1645.74 1212.53 L1645.15 1212.53 L1644.57 1212.53 L1643.98 1212.53 L1643.39 1212.53 L1642.81 1212.53 L1642.22 1212.53 L1641.63 1212.53 L1641.05 1212.53 L1640.46 1212.53 L1639.88 1212.53 L1639.29 1212.53 L1638.7 1212.53 L1638.12 1212.53 L1637.53 1212.53 L1636.94 1212.53 L1636.36 1212.53 L1635.77 1212.53 L1635.18 1212.53 L1634.6 1212.53 L1634.01 1212.53 L1633.42 1212.53 L1632.84 1212.53 L1632.25 1212.53 L1631.67 1212.53 L1631.08 1212.53 L1630.49 1212.53 L1629.91 1212.53 L1629.32 1212.53 L1628.73 1212.53 L1628.15 1212.53 L1627.56 1212.53 L1626.97 1212.53 L1626.39 1212.53 L1625.8 1212.53 L1625.22 1212.53 L1624.63 1212.53 L1624.04 1212.53 L1623.46 1212.53 L1622.87 1212.53 L1622.28 1212.53 L1621.7 1212.53 L1621.11 1212.53 L1620.52 1212.53 L1619.94 1212.53 L1619.35 1212.53 L1618.76 1212.53 L1618.18 1212.53 L1617.59 1212.53 L1617.01 1212.53 L1616.42 1212.53 L1615.83 1212.53 L1615.25 1212.53 L1614.66 1212.53 L1614.07 1212.53 L1613.49 1212.53 L1612.9 1212.53 L1612.31 1212.53 L1611.73 1212.53 L1611.14 1212.53 L1610.55 1212.53 L1609.97 1212.53 L1609.38 1212.53 L1608.8 1212.53 L1608.21 1212.53 L1607.62 1212.53 L1607.04 1212.53 L1606.45 1212.53 L1605.86 1212.53 L1605.28 1212.53 L1604.69 1212.53 L1604.1 1212.53 L1603.52 1212.53 L1602.93 1212.53 L1602.34 1212.53 L1601.76 1212.53 L1601.17 1212.53 L1600.59 1212.53 L1600 1212.53 L1599.41 1212.53 L1598.83 1212.53 L1598.24 1212.53 L1597.65 1212.53 L1597.07 1212.53 L1596.48 1212.53 L1595.89 1212.53 L1595.31 1212.53 L1594.72 1212.53 L1594.14 1212.53 L1593.55 1212.53 L1592.96 1212.53 L1592.38 1212.53 L1591.79 1212.53 L1591.2 1212.53 L1590.62 1212.53 L1590.03 1212.53 L1589.44 1212.53 L1588.86 1212.53 L1588.27 1212.53 L1587.68 1212.53 L1587.1 1212.53 L1586.51 1212.53 L1585.93 1212.53 L1585.34 1212.53 L1584.75 1212.53 L1584.17 1212.53 L1583.58 1212.53 L1582.99 1212.53 L1582.41 1212.53 L1581.82 1212.53 L1581.23 1212.53 L1580.65 1212.53 L1580.06 1212.53 L1579.47 1212.53 L1578.89 1212.53 L1578.3 1212.53 L1577.72 1212.53 L1577.13 1212.53 L1576.54 1212.53 L1575.96 1212.53 L1575.37 1212.53 L1574.78 1212.53 L1574.2 1212.53 L1573.61 1212.53 L1573.02 1212.53 L1572.44 1212.53 L1571.85 1212.53 L1571.27 1212.53 L1570.68 1212.53 L1570.09 1212.53 L1569.51 1212.53 L1568.92 1212.53 L1568.33 1212.53 L1567.75 1212.53 L1567.16 1212.53 L1566.57 1212.53 L1565.99 1212.53 L1565.4 1212.53 L1564.81 1212.53 L1564.23 1212.53 L1563.64 1212.53 L1563.06 1212.53 L1562.47 1212.53 L1561.88 1212.53 L1561.3 1212.53 L1560.71 1212.53 L1560.12 1212.53 L1559.54 1212.53 L1558.95 1212.53 L1558.36 1212.53 L1557.78 1212.53 L1557.19 1212.53 L1556.6 1212.53 L1556.02 1212.53 L1555.43 1212.53 L1554.85 1212.53 L1554.26 1212.53 L1553.67 1212.53 L1553.09 1212.53 L1552.5 1212.53 L1551.91 1212.53 L1551.33 1212.53 L1550.74 1212.53 L1550.15 1212.53 L1549.57 1212.53 L1548.98 1212.53 L1548.4 1212.53 L1547.81 1212.53 L1547.22 1212.53 L1546.64 1212.53 L1546.05 1212.53 L1545.46 1212.53 L1544.88 1212.53 L1544.29 1212.53 L1543.7 1212.53 L1543.12 1212.53 L1542.53 1212.53 L1541.94 1212.53 L1541.36 1212.53 L1540.77 1212.53 L1540.19 1212.53 L1539.6 1212.53 L1539.01 1212.53 L1538.43 1212.53 L1537.84 1212.53 L1537.25 1212.53 L1536.67 1212.53 L1536.08 1212.53 L1535.49 1212.53 L1534.91 1212.53 L1534.32 1212.53 L1533.73 1212.53 L1533.15 1212.53 L1532.56 1212.53 L1531.98 1212.53 L1531.39 1212.53 L1530.8 1212.53 L1530.22 1212.53 L1529.63 1212.53 L1529.04 1212.53 L1528.46 1212.53 L1527.87 1212.53 L1527.28 1212.53 L1526.7 1212.53 L1526.11 1212.53 L1525.52 1212.53 L1524.94 1212.53 L1524.35 1212.53 L1523.77 1212.53 L1523.18 1212.53 L1522.59 1212.53 L1522.01 1212.53 L1521.42 1212.53 L1520.83 1212.53 L1520.25 1212.53 L1519.66 1212.53 L1519.07 1212.53 L1518.49 1212.53 L1517.9 1212.53 L1517.32 1212.53 L1516.73 1212.53 L1516.14 1212.53 L1515.56 1212.53 L1514.97 1212.53 L1514.38 1212.53 L1513.8 1212.53 L1513.21 1212.53 L1512.62 1212.53 L1512.04 1212.53 L1511.45 1212.53 L1510.86 1212.53 L1510.28 1212.53 L1509.69 1212.53 L1509.11 1212.53 L1508.52 1212.53 L1507.93 1212.53 L1507.35 1212.53 L1506.76 1212.53 L1506.17 1212.53 L1505.59 1212.53 L1505 1212.53 L1504.41 1212.53 L1503.83 1212.53 L1503.24 1212.53 L1502.65 1212.53 L1502.07 1212.53 L1501.48 1212.53 L1500.9 1212.53 L1500.31 1212.53 L1499.72 1212.53 L1499.14 1212.53 L1498.55 1212.53 L1497.96 1212.53 L1497.38 1212.53 L1496.79 1212.53 L1496.2 1212.53 L1495.62 1212.53 L1495.03 1212.53 L1494.45 1212.53 L1493.86 1212.53 L1493.27 1212.53 L1492.69 1212.53 L1492.1 1212.53 L1491.51 1212.53 L1490.93 1212.53 L1490.34 1212.53 L1489.75 1212.53 L1489.17 1212.53 L1488.58 1212.53 L1487.99 1212.53 L1487.41 1212.53 L1486.82 1212.53 L1486.24 1212.53 L1485.65 1212.53 L1485.06 1212.53 L1484.48 1212.53 L1483.89 1212.53 L1483.3 1212.53 L1482.72 1212.53 L1482.13 1212.53 L1481.54 1212.53 L1480.96 1212.53 L1480.37 1212.53 L1479.78 1212.53 L1479.2 1212.53 L1478.61 1212.53 L1478.03 1212.53 L1477.44 1212.53 L1476.85 1212.53 L1476.27 1212.53 L1475.68 1212.53 L1475.09 1212.53 L1474.51 1212.53 L1473.92 1212.53 L1473.33 1212.53 L1472.75 1212.53 L1472.16 1212.53 L1471.57 1212.53 L1470.99 1212.53 L1470.4 1212.53 L1469.82 1212.53 L1469.23 1212.53 L1468.64 1212.53 L1468.06 1212.53 L1467.47 1212.53 L1466.88 1212.53 L1466.3 1212.53 L1465.71 1212.53 L1465.12 1212.53 L1464.54 1212.53 L1463.95 1212.53 L1463.37 1212.53 L1462.78 1212.53 L1462.19 1212.53 L1461.61 1212.53 L1461.02 1212.53 L1460.43 1212.53 L1459.85 1212.53 L1459.26 1212.53 L1458.67 1212.53 L1458.09 1212.53 L1457.5 1212.53 L1456.91 1212.53 L1456.33 1212.53 L1455.74 1212.53 L1455.16 1212.53 L1454.57 1212.53 L1453.98 1212.53 L1453.4 1212.53 L1452.81 1212.53 L1452.22 1212.53 L1451.64 1212.53 L1451.05 1212.53 L1450.46 1212.53 L1449.88 1212.53 L1449.29 1212.53 L1448.7 1212.53 L1448.12 1212.53 L1447.53 1212.53 L1446.95 1212.53 L1446.36 1212.53 L1445.77 1212.53 L1445.19 1212.53 L1444.6 1212.53 L1444.01 1212.53 L1443.43 1212.53 L1442.84 1212.53 L1442.25 1212.53 L1441.67 1212.53 L1441.08 1212.53 L1440.5 1212.53 L1439.91 1212.53 L1439.32 1212.53 L1438.74 1212.53 L1438.15 1212.53 L1437.56 1212.53 L1436.98 1212.53 L1436.39 1212.53 L1435.8 1212.53 L1435.22 1212.53 L1434.63 1212.53 L1434.04 1212.53 L1433.46 1212.53 L1432.87 1212.53 L1432.29 1212.53 L1431.7 1212.53 L1431.11 1212.53 L1430.53 1212.53 L1429.94 1212.53 L1429.35 1212.53 L1428.77 1212.53 L1428.18 1212.53 L1427.59 1212.53 L1427.01 1212.53 L1426.42 1212.53 L1425.83 1212.53 L1425.25 1212.53 L1424.66 1212.53 L1424.08 1212.53 L1423.49 1212.53 L1422.9 1212.53 L1422.32 1212.53 L1421.73 1212.53 L1421.14 1212.53 L1420.56 1212.53 L1419.97 1212.53 L1419.38 1212.53 L1418.8 1212.53 L1418.21 1212.53 L1417.63 1212.53 L1417.04 1212.53 L1416.45 1212.53 L1415.87 1212.53 L1415.28 1212.53 L1414.69 1212.53 L1414.11 1212.53 L1413.52 1212.53 L1412.93 1212.53 L1412.35 1212.53 L1411.76 1212.53 L1411.17 1212.53 L1410.59 1212.53 L1410 1212.53 L1409.42 1212.53 L1408.83 1212.53 L1408.24 1212.53 L1407.66 1212.53 L1407.07 1212.53 L1406.48 1212.53 L1405.9 1212.53 L1405.31 1212.53 L1404.72 1212.53 L1404.14 1212.53 L1403.55 1212.53 L1402.96 1212.53 L1402.38 1212.53 L1401.79 1212.53 L1401.21 1212.53 L1400.62 1212.53 L1400.03 1212.53 L1399.45 1212.53 L1398.86 1212.53 L1398.27 1212.53 L1397.69 1212.53 L1397.1 1212.53 L1396.51 1212.53 L1395.93 1212.53 L1395.34 1212.53 L1394.75 1212.53 L1394.17 1212.53 L1393.58 1212.53 L1393 1212.53 L1392.41 1212.53 L1391.82 1212.53 L1391.24 1212.53 L1390.65 1212.53 L1390.06 1212.53 L1389.48 1212.53 L1388.89 1212.53 L1388.3 1212.53 L1387.72 1212.53 L1387.13 1212.53 L1386.55 1212.53 L1385.96 1212.53 L1385.37 1212.53 L1384.79 1212.53 L1384.2 1212.53 L1383.61 1212.53 L1383.03 1212.53 L1382.44 1212.53 L1381.85 1212.53 L1381.27 1212.53 L1380.68 1212.53 L1380.09 1212.53 L1379.51 1212.53 L1378.92 1212.53 L1378.34 1212.53 L1377.75 1212.53 L1377.16 1212.53 L1376.58 1212.53 L1375.99 1212.53 L1375.4 1212.53 L1374.82 1212.53 L1374.23 1212.53 L1373.64 1212.53 L1373.06 1212.53 L1372.47 1212.53 L1371.88 1212.53 L1371.3 1212.53 L1370.71 1212.53 L1370.13 1212.53 L1369.54 1212.53 L1368.95 1212.53 L1368.37 1212.53 L1367.78 1212.53 L1367.19 1212.53 L1366.61 1212.53 L1366.02 1212.53 L1365.43 1212.53 L1364.85 1212.53 L1364.26 1212.53 L1363.68 1212.53 L1363.09 1212.53 L1362.5 1212.53 L1361.92 1212.53 L1361.33 1212.53 L1360.74 1212.53 L1360.16 1212.53 L1359.57 1212.53 L1358.98 1212.53 L1358.4 1212.53 L1357.81 1212.53 L1357.22 1212.53 L1356.64 1212.53 L1356.05 1212.53 L1355.47 1212.53 L1354.88 1212.53 L1354.29 1212.53 L1353.71 1212.53 L1353.12 1212.53 L1352.53 1212.53 L1351.95 1212.53 L1351.36 1212.53 L1350.77 1212.53 L1350.19 1212.53 L1349.6 1212.53 L1349.01 1212.53 L1348.43 1212.53 L1347.84 1212.53 L1347.26 1212.53 L1346.67 1212.53 L1346.08 1212.53 L1345.5 1212.53 L1344.91 1212.53 L1344.32 1212.53 L1343.74 1212.53 L1343.15 1212.53 L1342.56 1212.53 L1341.98 1212.53 L1341.39 1212.53 L1340.8 1212.53 L1340.22 1212.53 L1339.63 1212.53 L1339.05 1212.53 L1338.46 1212.53 L1337.87 1212.53 L1337.29 1212.53 L1336.7 1212.53 L1336.11 1212.53 L1335.53 1212.53 L1334.94 1212.53 L1334.35 1212.53 L1333.77 1212.53 L1333.18 1212.53 L1332.6 1212.53 L1332.01 1212.53 L1331.42 1212.53 L1330.84 1212.53 L1330.25 1212.53 L1329.66 1212.53 L1329.08 1212.53 L1328.49 1212.53 L1327.9 1212.53 L1327.32 1212.53 L1326.73 1212.53 L1326.14 1212.53 L1325.56 1212.53 L1324.97 1212.53 L1324.39 1212.53 L1323.8 1212.53 L1323.21 1212.53 L1322.63 1212.53 L1322.04 1212.53 L1321.45 1212.53 L1320.87 1212.53 L1320.28 1212.53 L1319.69 1212.53 L1319.11 1212.53 L1318.52 1212.53 L1317.93 1212.53 L1317.35 1212.53 L1316.76 1212.53 L1316.18 1212.53 L1315.59 1212.53 L1315 1212.53 L1314.42 1212.53 L1313.83 1212.53 L1313.24 1212.53 L1312.66 1212.53 L1312.07 1212.53 L1311.48 1212.53 L1310.9 1212.53 L1310.31 1212.53 L1309.73 1212.53 L1309.14 1212.53 L1308.55 1212.53 L1307.97 1212.53 L1307.38 1212.53 L1306.79 1212.53 L1306.21 1212.53 L1305.62 1212.53 L1305.03 1212.53 L1304.45 1212.53 L1303.86 1212.53 L1303.27 1212.53 L1302.69 1212.53 L1302.1 1212.53 L1301.52 1212.53 L1300.93 1212.53 L1300.34 1212.53 L1299.76 1212.53 L1299.17 1212.53 L1298.58 1212.53 L1298 1212.53 L1297.41 1212.53 L1296.82 1212.53 L1296.24 1212.53 L1295.65 1212.53 L1295.06 1212.53 L1294.48 1212.53 L1293.89 1212.53 L1293.31 1212.53 L1292.72 1212.53 L1292.13 1212.53 L1291.55 1212.53 L1290.96 1212.53 L1290.37 1212.53 L1289.79 1212.53 L1289.2 1212.53 L1288.61 1212.53 L1288.03 1212.53 L1287.44 1212.53 L1286.86 1212.53 L1286.27 1212.53 L1285.68 1212.53 L1285.1 1212.53 L1284.51 1212.53 L1283.92 1212.53 L1283.34 1212.53 L1282.75 1212.53 L1282.16 1212.53 L1281.58 1212.53 L1280.99 1212.53 L1280.4 1212.53 L1279.82 1212.53 L1279.23 1212.53 L1278.65 1212.53 L1278.06 1212.53 L1277.47 1212.53 L1276.89 1212.53 L1276.3 1212.53 L1275.71 1212.53 L1275.13 1212.53 L1274.54 1212.53 L1273.95 1212.53 L1273.37 1212.53 L1272.78 1212.53 L1272.19 1212.53 L1271.61 1212.53 L1271.02 1212.53 L1270.44 1212.53 L1269.85 1212.53 L1269.26 1212.53 L1268.68 1212.53 L1268.09 1212.53 L1267.5 1212.53 L1266.92 1212.53 L1266.33 1212.53 L1265.74 1212.53 L1265.16 1212.53 L1264.57 1212.53 L1263.98 1212.53 L1263.4 1212.53 L1262.81 1212.53 L1262.23 1212.53 L1261.64 1212.53 L1261.05 1212.53 L1260.47 1212.53 L1259.88 1212.53 L1259.29 1212.53 L1258.71 1212.53 L1258.12 1212.53 L1257.53 1212.53 L1256.95 1212.53 L1256.36 1212.53 L1255.78 1212.53 L1255.19 1212.53 L1254.6 1212.53 L1254.02 1212.53 L1253.43 1212.53 L1252.84 1212.53 L1252.26 1212.53 L1251.67 1212.53 L1251.08 1212.53 L1250.5 1212.53 L1249.91 1212.53 L1249.32 1212.53 L1248.74 1212.53 L1248.15 1212.53 L1247.57 1212.53 L1246.98 1212.53 L1246.39 1212.53 L1245.81 1212.53 L1245.22 1212.53 L1244.63 1212.53 L1244.05 1212.53 L1243.46 1212.53 L1242.87 1212.53 L1242.29 1212.53 L1241.7 1212.53 L1241.11 1212.53 L1240.53 1212.53 L1239.94 1212.53 L1239.36 1212.53 L1238.77 1212.53 L1238.18 1212.53 L1237.6 1212.53 L1237.01 1212.53 L1236.42 1212.53 L1235.84 1212.53 L1235.25 1212.53 L1234.66 1212.53 L1234.08 1212.53 L1233.49 1212.53 L1232.91 1212.53 L1232.32 1212.53 L1231.73 1212.53 L1231.15 1212.53 L1230.56 1212.53 L1229.97 1212.53 L1229.39 1212.53 L1228.8 1212.53 L1228.21 1212.53 L1227.63 1212.53 L1227.04 1212.53 L1226.45 1212.53 L1225.87 1212.53 L1225.28 1212.53 L1224.7 1212.53 L1224.11 1212.53 L1223.52 1212.53 L1222.94 1212.53 L1222.35 1212.53 L1221.76 1212.53 L1221.18 1212.53 L1220.59 1212.53 L1220 1212.53 L1219.42 1212.53 L1218.83 1212.53 L1218.24 1212.53 L1217.66 1212.53 L1217.07 1212.53 L1216.49 1212.53 L1215.9 1212.53 L1215.31 1212.53 L1214.73 1212.53 L1214.14 1212.53 L1213.55 1212.53 L1212.97 1212.53 L1212.38 1212.53 L1211.79 1212.53 L1211.21 1212.53 L1210.62 1212.53 L1210.03 1212.53 L1209.45 1212.53 L1208.86 1212.53 L1208.28 1212.53 L1207.69 1212.53 L1207.1 1212.53 L1206.52 1212.53 L1205.93 1212.53 L1205.34 1212.53 L1204.76 1212.53 L1204.17 1212.53 L1203.58 1212.53 L1203 1212.53 L1202.41 1212.53 L1201.83 1212.53 L1201.24 1212.53 L1200.65 1212.53 L1200.07 1212.53 L1199.48 1212.53 L1198.89 1212.53 L1198.31 1212.53 L1197.72 1212.53 L1197.13 1212.53 L1196.55 1212.53 L1195.96 1212.53 L1195.37 1212.53 L1194.79 1212.53 L1194.2 1212.53 L1193.62 1212.53 L1193.03 1212.53 L1192.44 1212.53 L1191.86 1212.53 L1191.27 1212.53 L1190.68 1212.53 L1190.1 1212.53 L1189.51 1212.53 L1188.92 1212.53 L1188.34 1212.53 L1187.75 1212.53 L1187.16 1212.53 L1186.58 1212.53 L1185.99 1212.53 L1185.41 1212.53 L1184.82 1212.53 L1184.23 1212.53 L1183.65 1212.53 L1183.06 1212.53 L1182.47 1212.53 L1181.89 1212.53 L1181.3 1212.53 L1180.71 1212.53 L1180.13 1212.53 L1179.54 1212.53 L1178.96 1212.53 L1178.37 1212.53 L1177.78 1212.53 L1177.2 1212.53 L1176.61 1212.53 L1176.02 1212.53 L1175.44 1212.53 L1174.85 1212.53 L1174.26 1212.53 L1173.68 1212.53 L1173.09 1212.53 L1172.5 1212.53 L1171.92 1212.53 L1171.33 1212.53 L1170.75 1212.53 L1170.16 1212.53 L1169.57 1212.53 L1168.99 1212.53 L1168.4 1212.53 L1167.81 1212.53 L1167.23 1212.53 L1166.64 1212.53 L1166.05 1212.53 L1165.47 1212.53 L1164.88 1212.53 L1164.29 1212.53 L1163.71 1212.53 L1163.12 1212.53 L1162.54 1212.53 L1161.95 1212.53 L1161.36 1212.53 L1160.78 1212.53 L1160.19 1212.53 L1159.6 1212.53 L1159.02 1212.53 L1158.43 1212.53 L1157.84 1212.53 L1157.26 1212.53 L1156.67 1212.53 L1156.09 1212.53 L1155.5 1212.53 L1154.91 1212.53 L1154.33 1212.53 L1153.74 1212.53 L1153.15 1212.53 L1152.57 1212.53 L1151.98 1212.53 L1151.39 1212.53 L1150.81 1212.53 L1150.22 1212.53 L1149.63 1212.53 L1149.05 1212.53 L1148.46 1212.53 L1147.88 1212.53 L1147.29 1212.53 L1146.7 1212.53 L1146.12 1212.53 L1145.53 1212.53 L1144.94 1212.53 L1144.36 1212.53 L1143.77 1212.53 L1143.18 1212.53 L1142.6 1212.53 L1142.01 1212.53 L1141.42 1212.53 L1140.84 1212.53 L1140.25 1212.53 L1139.67 1212.53 L1139.08 1212.53 L1138.49 1212.53 L1137.91 1212.53 L1137.32 1212.53 L1136.73 1212.53 L1136.15 1212.53 L1135.56 1212.53 L1134.97 1212.53 L1134.39 1212.53 L1133.8 1212.53 L1133.21 1212.53 L1132.63 1212.53 L1132.04 1212.53 L1131.46 1212.53 L1130.87 1212.53 L1130.28 1212.53 L1129.7 1212.53 L1129.11 1212.53 L1128.52 1212.53 L1127.94 1212.53 L1127.35 1212.53 L1126.76 1212.53 L1126.18 1212.53 L1125.59 1212.53 L1125.01 1212.53 L1124.42 1212.53 L1123.83 1212.53 L1123.25 1212.53 L1122.66 1212.53 L1122.07 1212.53 L1121.49 1212.53 L1120.9 1212.53 L1120.31 1212.53 L1119.73 1212.53 L1119.14 1212.53 L1118.55 1212.53 L1117.97 1212.53 L1117.38 1212.53 L1116.8 1212.53 L1116.21 1212.53 L1115.62 1212.53 L1115.04 1212.53 L1114.45 1212.53 L1113.86 1212.53 L1113.28 1212.53 L1112.69 1212.53 L1112.1 1212.53 L1111.52 1212.53 L1110.93 1212.53 L1110.34 1212.53 L1109.76 1212.53 L1109.17 1212.53 L1108.59 1212.53 L1108 1212.53 L1107.41 1212.53 L1106.83 1212.53 L1106.24 1212.53 L1105.65 1212.53 L1105.07 1212.53 L1104.48 1212.53 L1103.89 1212.53 L1103.31 1212.53 L1102.72 1212.53 L1102.14 1212.53 L1101.55 1212.53 L1100.96 1212.53 L1100.38 1212.53 L1099.79 1212.53 L1099.2 1212.53 L1098.62 1212.53 L1098.03 1212.53 L1097.44 1212.53 L1096.86 1212.53 L1096.27 1212.53 L1095.68 1212.53 L1095.1 1212.53 L1094.51 1212.53 L1093.93 1212.53 L1093.34 1212.53 L1092.75 1212.53 L1092.17 1212.53 L1091.58 1212.53 L1090.99 1212.53 L1090.41 1212.53 L1089.82 1212.53 L1089.23 1212.53 L1088.65 1212.53 L1088.06 1212.53 L1087.47 1212.53 L1086.89 1212.53 L1086.3 1212.53 L1085.72 1212.53 L1085.13 1212.53 L1084.54 1212.53 L1083.96 1212.53 L1083.37 1212.53 L1082.78 1212.53 L1082.2 1212.53 L1081.61 1212.53 L1081.02 1212.53 L1080.44 1212.53 L1079.85 1212.53 L1079.26 1212.53 L1078.68 1212.53 L1078.09 1212.53 L1077.51 1212.53 L1076.92 1212.53 L1076.33 1212.53 L1075.75 1212.53 L1075.16 1212.53 L1074.57 1212.53 L1073.99 1212.53 L1073.4 1212.53 L1072.81 1212.53 L1072.23 1212.53 L1071.64 1212.53 L1071.06 1212.53 L1070.47 1212.53 L1069.88 1212.53 L1069.3 1212.53 L1068.71 1212.53 L1068.12 1212.53 L1067.54 1212.53 L1066.95 1212.53 L1066.36 1212.53 L1065.78 1212.53 L1065.19 1212.53 L1064.6 1212.53 L1064.02 1212.53 L1063.43 1212.53 L1062.85 1212.53 L1062.26 1212.53 L1061.67 1212.53 L1061.09 1212.53 L1060.5 1212.53 L1059.91 1212.53 L1059.33 1212.53 L1058.74 1212.53 L1058.15 1212.53 L1057.57 1212.53 L1056.98 1212.53 L1056.39 1212.53 L1055.81 1212.53 L1055.22 1212.53 L1054.64 1212.53 L1054.05 1212.53 L1053.46 1212.53 L1052.88 1212.53 L1052.29 1212.53 L1051.7 1212.53 L1051.12 1212.53 L1050.53 1212.53 L1049.94 1212.53 L1049.36 1212.53 L1048.77 1212.53 L1048.19 1212.53 L1047.6 1212.53 L1047.01 1212.53 L1046.43 1212.53 L1045.84 1212.53 L1045.25 1212.53 L1044.67 1212.53 L1044.08 1212.53 L1043.49 1212.53 L1042.91 1212.53 L1042.32 1212.53 L1041.73 1212.53 L1041.15 1212.53 L1040.56 1212.53 L1039.98 1212.53 L1039.39 1212.53 L1038.8 1212.53 L1038.22 1212.53 L1037.63 1212.53 L1037.04 1212.53 L1036.46 1212.53 L1035.87 1212.53 L1035.28 1212.53 L1034.7 1212.53 L1034.11 1212.53 L1033.52 1212.53 L1032.94 1212.53 L1032.35 1212.53 L1031.77 1212.53 L1031.18 1212.53 L1030.59 1212.53 L1030.01 1212.53 L1029.42 1212.53 L1028.83 1212.53 L1028.25 1212.53 L1027.66 1212.53 L1027.07 1212.53 L1026.49 1212.53 L1025.9 1212.53 L1025.32 1212.53 L1024.73 1212.53 L1024.14 1212.53 L1023.56 1212.53 L1022.97 1212.53 L1022.38 1212.53 L1021.8 1212.53 L1021.21 1212.53 L1020.62 1212.53 L1020.04 1212.53 L1019.45 1212.53 L1018.86 1212.53 L1018.28 1212.53 L1017.69 1212.53 L1017.11 1212.53 L1016.52 1212.53 L1015.93 1212.53 L1015.35 1212.53 L1014.76 1212.53 L1014.17 1212.53 L1013.59 1212.53 L1013 1212.53 L1012.41 1212.53 L1011.83 1212.53 L1011.24 1212.53 L1010.65 1212.53 L1010.07 1212.53 L1009.48 1212.53 L1008.9 1212.53 L1008.31 1212.53 L1007.72 1212.53 L1007.14 1212.53 L1006.55 1212.53 L1005.96 1212.53 L1005.38 1212.53 L1004.79 1212.53 L1004.2 1212.53 L1003.62 1212.53 L1003.03 1212.53 L1002.44 1212.53 L1001.86 1212.53 L1001.27 1212.53 L1000.69 1212.53 L1000.1 1212.53 L999.513 1212.53 L998.926 1212.53 L998.34 1212.53 L997.754 1212.53 L997.167 1212.53 L996.581 1212.53 L995.994 1212.53 L995.408 1212.53 L994.822 1212.53 L994.235 1212.53 L993.649 1212.53 L993.062 1212.53 L992.476 1212.53 L991.889 1212.53 L991.303 1212.53 L990.717 1212.53 L990.13 1212.53 L989.544 1212.53 L988.957 1212.53 L988.371 1212.53 L987.785 1212.53 L987.198 1212.53 L986.612 1212.53 L986.025 1212.53  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip742)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1212.79 986.612,1212.79 987.198,1212.79 987.785,1212.79 988.371,1212.79 988.957,1212.79 989.544,1212.79 990.13,1212.79 990.717,1212.79 991.303,1212.79 991.889,1212.79 992.476,1212.79 993.062,1212.79 993.649,1212.79 994.235,1212.79 994.822,1212.79 995.408,1212.79 995.994,1212.79 996.581,1212.79 997.167,1212.79 997.754,1212.79 998.34,1212.79 998.926,1212.79 999.513,1212.79 1000.1,1212.79 1000.69,1212.79 1001.27,1212.79 1001.86,1212.79 1002.44,1212.79 1003.03,1212.79 1003.62,1212.79 1004.2,1212.79 1004.79,1212.79 1005.38,1212.79 1005.96,1212.79 1006.55,1212.79 1007.14,1212.79 1007.72,1212.79 1008.31,1212.79 1008.9,1212.79 1009.48,1212.79 1010.07,1212.79 1010.65,1212.79 1011.24,1212.79 1011.83,1212.79 1012.41,1212.79 1013,1212.79 1013.59,1212.79 1014.17,1212.79 1014.76,1212.79 1015.35,1212.79 1015.93,1212.79 1016.52,1212.79 1017.11,1212.79 1017.69,1212.79 1018.28,1212.79 1018.86,1212.79 1019.45,1212.79 1020.04,1212.79 1020.62,1212.79 1021.21,1212.79 1021.8,1212.79 1022.38,1212.79 1022.97,1212.79 1023.56,1212.79 1024.14,1212.79 1024.73,1212.79 1025.32,1212.79 1025.9,1212.79 1026.49,1212.79 1027.07,1212.79 1027.66,1212.79 1028.25,1212.79 1028.83,1212.79 1029.42,1212.79 1030.01,1212.79 1030.59,1212.79 1031.18,1212.79 1031.77,1212.79 1032.35,1212.79 1032.94,1212.79 1033.52,1212.79 1034.11,1212.79 1034.7,1212.79 1035.28,1212.79 1035.87,1212.79 1036.46,1212.79 1037.04,1212.79 1037.63,1212.79 1038.22,1212.79 1038.8,1212.79 1039.39,1212.79 1039.98,1212.79 1040.56,1212.79 1041.15,1212.79 1041.73,1212.79 1042.32,1212.79 1042.91,1212.79 1043.49,1212.79 1044.08,1212.79 1044.67,1212.79 1045.25,1212.79 1045.84,1212.79 1046.43,1212.79 1047.01,1212.79 1047.6,1212.79 1048.19,1212.79 1048.77,1212.79 1049.36,1212.79 1049.94,1212.79 1050.53,1212.79 1051.12,1212.79 1051.7,1212.79 1052.29,1212.79 1052.88,1212.79 1053.46,1212.79 1054.05,1212.79 1054.64,1212.79 1055.22,1212.79 1055.81,1212.79 1056.39,1212.79 1056.98,1212.79 1057.57,1212.79 1058.15,1212.79 1058.74,1212.79 1059.33,1212.79 1059.91,1212.79 1060.5,1212.79 1061.09,1212.79 1061.67,1212.79 1062.26,1212.79 1062.85,1212.79 1063.43,1212.79 1064.02,1212.79 1064.6,1212.79 1065.19,1212.79 1065.78,1212.79 1066.36,1212.79 1066.95,1212.79 1067.54,1212.79 1068.12,1212.79 1068.71,1212.79 1069.3,1212.79 1069.88,1212.79 1070.47,1212.79 1071.06,1212.79 1071.64,1212.79 1072.23,1212.79 1072.81,1212.79 1073.4,1212.79 1073.99,1212.79 1074.57,1212.79 1075.16,1212.79 1075.75,1212.79 1076.33,1212.79 1076.92,1212.79 1077.51,1212.79 1078.09,1212.79 1078.68,1212.79 1079.26,1212.79 1079.85,1212.79 1080.44,1212.79 1081.02,1212.79 1081.61,1212.79 1082.2,1212.79 1082.78,1212.79 1083.37,1212.79 1083.96,1212.79 1084.54,1212.79 1085.13,1212.79 1085.72,1212.79 1086.3,1212.79 1086.89,1212.79 1087.47,1212.79 1088.06,1212.79 1088.65,1212.79 1089.23,1212.79 1089.82,1212.79 1090.41,1212.79 1090.99,1212.79 1091.58,1212.79 1092.17,1212.79 1092.75,1212.79 1093.34,1212.79 1093.93,1212.79 1094.51,1212.79 1095.1,1212.79 1095.68,1212.79 1096.27,1212.79 1096.86,1212.79 1097.44,1212.79 1098.03,1212.79 1098.62,1212.79 1099.2,1212.79 1099.79,1212.79 1100.38,1212.79 1100.96,1212.79 1101.55,1212.79 1102.14,1212.79 1102.72,1212.79 1103.31,1212.79 1103.89,1212.79 1104.48,1212.79 1105.07,1212.79 1105.65,1212.79 1106.24,1212.79 1106.83,1212.79 1107.41,1212.79 1108,1212.79 1108.59,1212.79 1109.17,1212.79 1109.76,1212.79 1110.34,1212.79 1110.93,1212.79 1111.52,1212.79 1112.1,1212.79 1112.69,1212.79 1113.28,1212.79 1113.86,1212.79 1114.45,1212.79 1115.04,1212.79 1115.62,1212.79 1116.21,1212.79 1116.8,1212.79 1117.38,1212.79 1117.97,1212.79 1118.55,1212.79 1119.14,1212.79 1119.73,1212.79 1120.31,1212.79 1120.9,1212.79 1121.49,1212.79 1122.07,1212.79 1122.66,1212.79 1123.25,1212.79 1123.83,1212.79 1124.42,1212.79 1125.01,1212.79 1125.59,1212.79 1126.18,1212.79 1126.76,1212.79 1127.35,1212.79 1127.94,1212.79 1128.52,1212.79 1129.11,1212.79 1129.7,1212.79 1130.28,1212.79 1130.87,1212.79 1131.46,1212.79 1132.04,1212.79 1132.63,1212.79 1133.21,1212.79 1133.8,1212.79 1134.39,1212.79 1134.97,1212.79 1135.56,1212.79 1136.15,1212.79 1136.73,1212.79 1137.32,1212.79 1137.91,1212.79 1138.49,1212.79 1139.08,1212.79 1139.67,1212.79 1140.25,1212.79 1140.84,1212.79 1141.42,1212.79 1142.01,1212.79 1142.6,1212.79 1143.18,1212.79 1143.77,1212.79 1144.36,1212.79 1144.94,1212.79 1145.53,1212.79 1146.12,1212.79 1146.7,1212.79 1147.29,1212.79 1147.88,1212.79 1148.46,1212.79 1149.05,1212.79 1149.63,1212.79 1150.22,1212.79 1150.81,1212.79 1151.39,1212.79 1151.98,1212.79 1152.57,1212.79 1153.15,1212.79 1153.74,1212.79 1154.33,1212.79 1154.91,1212.79 1155.5,1212.79 1156.09,1212.79 1156.67,1212.79 1157.26,1212.79 1157.84,1212.79 1158.43,1212.79 1159.02,1212.79 1159.6,1212.79 1160.19,1212.79 1160.78,1212.79 1161.36,1212.79 1161.95,1212.79 1162.54,1212.79 1163.12,1212.79 1163.71,1212.79 1164.29,1212.79 1164.88,1212.79 1165.47,1212.79 1166.05,1212.79 1166.64,1212.79 1167.23,1212.79 1167.81,1212.79 1168.4,1212.79 1168.99,1212.79 1169.57,1212.79 1170.16,1212.79 1170.75,1212.79 1171.33,1212.79 1171.92,1212.79 1172.5,1212.79 1173.09,1212.79 1173.68,1212.79 1174.26,1212.79 1174.85,1212.79 1175.44,1212.79 1176.02,1212.79 1176.61,1212.79 1177.2,1212.79 1177.78,1212.79 1178.37,1212.79 1178.96,1212.79 1179.54,1212.79 1180.13,1212.79 1180.71,1212.79 1181.3,1212.79 1181.89,1212.79 1182.47,1212.79 1183.06,1212.79 1183.65,1212.79 1184.23,1212.79 1184.82,1212.79 1185.41,1212.79 1185.99,1212.79 1186.58,1212.79 1187.16,1212.79 1187.75,1212.79 1188.34,1212.79 1188.92,1212.79 1189.51,1212.79 1190.1,1212.79 1190.68,1212.79 1191.27,1212.79 1191.86,1212.79 1192.44,1212.79 1193.03,1212.79 1193.62,1212.79 1194.2,1212.79 1194.79,1212.79 1195.37,1212.79 1195.96,1212.79 1196.55,1212.79 1197.13,1212.79 1197.72,1212.79 1198.31,1212.79 1198.89,1212.79 1199.48,1212.79 1200.07,1212.79 1200.65,1212.79 1201.24,1212.79 1201.83,1212.79 1202.41,1212.79 1203,1212.79 1203.58,1212.79 1204.17,1212.79 1204.76,1212.79 1205.34,1212.79 1205.93,1212.79 1206.52,1212.79 1207.1,1212.79 1207.69,1212.79 1208.28,1212.79 1208.86,1212.79 1209.45,1212.79 1210.03,1212.79 1210.62,1212.79 1211.21,1212.79 1211.79,1212.79 1212.38,1212.79 1212.97,1212.79 1213.55,1212.79 1214.14,1212.79 1214.73,1212.79 1215.31,1212.79 1215.9,1212.79 1216.49,1212.79 1217.07,1212.79 1217.66,1212.79 1218.24,1212.79 1218.83,1212.79 1219.42,1212.79 1220,1212.79 1220.59,1212.79 1221.18,1212.79 1221.76,1212.79 1222.35,1212.79 1222.94,1212.79 1223.52,1212.79 1224.11,1212.79 1224.7,1212.79 1225.28,1212.79 1225.87,1212.79 1226.45,1212.79 1227.04,1212.79 1227.63,1212.79 1228.21,1212.79 1228.8,1212.79 1229.39,1212.79 1229.97,1212.79 1230.56,1212.79 1231.15,1212.79 1231.73,1212.79 1232.32,1212.79 1232.91,1212.79 1233.49,1212.79 1234.08,1212.79 1234.66,1212.79 1235.25,1212.79 1235.84,1212.79 1236.42,1212.79 1237.01,1212.79 1237.6,1212.79 1238.18,1212.79 1238.77,1212.79 1239.36,1212.79 1239.94,1212.79 1240.53,1212.79 1241.11,1212.79 1241.7,1212.79 1242.29,1212.79 1242.87,1212.79 1243.46,1212.79 1244.05,1212.79 1244.63,1212.79 1245.22,1212.79 1245.81,1212.79 1246.39,1212.79 1246.98,1212.79 1247.57,1212.79 1248.15,1212.79 1248.74,1212.79 1249.32,1212.79 1249.91,1212.79 1250.5,1212.79 1251.08,1212.79 1251.67,1212.79 1252.26,1212.79 1252.84,1212.79 1253.43,1212.79 1254.02,1212.79 1254.6,1212.79 1255.19,1212.79 1255.78,1212.79 1256.36,1212.79 1256.95,1212.79 1257.53,1212.79 1258.12,1212.79 1258.71,1212.79 1259.29,1212.79 1259.88,1212.79 1260.47,1212.79 1261.05,1212.79 1261.64,1212.79 1262.23,1212.79 1262.81,1212.79 1263.4,1212.79 1263.98,1212.79 1264.57,1212.79 1265.16,1212.79 1265.74,1212.79 1266.33,1212.79 1266.92,1212.79 1267.5,1212.79 1268.09,1212.79 1268.68,1212.79 1269.26,1212.79 1269.85,1212.79 1270.44,1212.79 1271.02,1212.79 1271.61,1212.79 1272.19,1212.79 1272.78,1212.79 1273.37,1212.79 1273.95,1212.79 1274.54,1212.79 1275.13,1212.79 1275.71,1212.79 1276.3,1212.79 1276.89,1212.79 1277.47,1212.79 1278.06,1212.79 1278.65,1212.79 1279.23,1212.79 1279.82,1212.79 1280.4,1212.79 1280.99,1212.79 1281.58,1212.79 1282.16,1212.79 1282.75,1212.79 1283.34,1212.79 1283.92,1212.79 1284.51,1212.79 1285.1,1212.79 1285.68,1212.79 1286.27,1212.79 1286.86,1212.79 1287.44,1212.79 1288.03,1212.79 1288.61,1212.79 1289.2,1212.79 1289.79,1212.79 1290.37,1212.79 1290.96,1212.79 1291.55,1212.79 1292.13,1212.79 1292.72,1212.79 1293.31,1212.79 1293.89,1212.79 1294.48,1212.79 1295.06,1212.79 1295.65,1212.79 1296.24,1212.79 1296.82,1212.79 1297.41,1212.79 1298,1212.79 1298.58,1212.79 1299.17,1212.79 1299.76,1212.79 1300.34,1212.79 1300.93,1212.79 1301.52,1212.79 1302.1,1212.79 1302.69,1212.79 1303.27,1212.79 1303.86,1212.79 1304.45,1212.79 1305.03,1212.79 1305.62,1212.79 1306.21,1212.79 1306.79,1212.79 1307.38,1212.79 1307.97,1212.79 1308.55,1212.79 1309.14,1212.79 1309.73,1212.79 1310.31,1212.79 1310.9,1212.79 1311.48,1212.79 1312.07,1212.79 1312.66,1212.79 1313.24,1212.79 1313.83,1212.79 1314.42,1212.79 1315,1212.79 1315.59,1212.79 1316.18,1212.79 1316.76,1212.79 1317.35,1212.79 1317.93,1212.79 1318.52,1212.79 1319.11,1212.79 1319.69,1212.79 1320.28,1212.79 1320.87,1212.79 1321.45,1212.79 1322.04,1212.79 1322.63,1212.79 1323.21,1212.79 1323.8,1212.79 1324.39,1212.79 1324.97,1212.79 1325.56,1212.79 1326.14,1212.79 1326.73,1212.79 1327.32,1212.79 1327.9,1212.79 1328.49,1212.79 1329.08,1212.79 1329.66,1212.79 1330.25,1212.79 1330.84,1212.79 1331.42,1212.79 1332.01,1212.79 1332.6,1212.79 1333.18,1212.79 1333.77,1212.79 1334.35,1212.79 1334.94,1212.79 1335.53,1212.79 1336.11,1212.79 1336.7,1212.79 1337.29,1212.79 1337.87,1212.79 1338.46,1212.79 1339.05,1212.79 1339.63,1212.79 1340.22,1212.79 1340.8,1212.79 1341.39,1212.79 1341.98,1212.79 1342.56,1212.79 1343.15,1212.79 1343.74,1212.79 1344.32,1212.79 1344.91,1212.79 1345.5,1212.79 1346.08,1212.79 1346.67,1212.79 1347.26,1212.79 1347.84,1212.79 1348.43,1212.79 1349.01,1212.79 1349.6,1212.79 1350.19,1212.79 1350.77,1212.79 1351.36,1212.79 1351.95,1212.79 1352.53,1212.79 1353.12,1212.79 1353.71,1212.79 1354.29,1212.79 1354.88,1212.79 1355.47,1212.79 1356.05,1212.79 1356.64,1212.79 1357.22,1212.79 1357.81,1212.79 1358.4,1212.79 1358.98,1212.79 1359.57,1212.79 1360.16,1212.79 1360.74,1212.79 1361.33,1212.79 1361.92,1212.79 1362.5,1212.79 1363.09,1212.79 1363.68,1212.79 1364.26,1212.79 1364.85,1212.79 1365.43,1212.79 1366.02,1212.79 1366.61,1212.79 1367.19,1212.79 1367.78,1212.79 1368.37,1212.79 1368.95,1212.79 1369.54,1212.79 1370.13,1212.79 1370.71,1212.79 1371.3,1212.79 1371.88,1212.79 1372.47,1212.79 1373.06,1212.79 1373.64,1212.79 1374.23,1212.79 1374.82,1212.79 1375.4,1212.79 1375.99,1212.79 1376.58,1212.79 1377.16,1212.79 1377.75,1212.79 1378.34,1212.79 1378.92,1212.79 1379.51,1212.79 1380.09,1212.79 1380.68,1212.79 1381.27,1212.79 1381.85,1212.79 1382.44,1212.79 1383.03,1212.79 1383.61,1212.79 1384.2,1212.79 1384.79,1212.79 1385.37,1212.79 1385.96,1212.79 1386.55,1212.79 1387.13,1212.79 1387.72,1212.79 1388.3,1212.79 1388.89,1212.79 1389.48,1212.79 1390.06,1212.79 1390.65,1212.79 1391.24,1212.79 1391.82,1212.79 1392.41,1212.79 1393,1212.79 1393.58,1212.79 1394.17,1212.79 1394.75,1212.79 1395.34,1212.79 1395.93,1212.79 1396.51,1212.79 1397.1,1212.79 1397.69,1212.79 1398.27,1212.79 1398.86,1212.79 1399.45,1212.79 1400.03,1212.79 1400.62,1212.79 1401.21,1212.79 1401.79,1212.79 1402.38,1212.79 1402.96,1212.79 1403.55,1212.79 1404.14,1212.79 1404.72,1212.79 1405.31,1212.79 1405.9,1212.79 1406.48,1212.79 1407.07,1212.79 1407.66,1212.79 1408.24,1212.79 1408.83,1212.79 1409.42,1212.79 1410,1212.79 1410.59,1212.79 1411.17,1212.79 1411.76,1212.79 1412.35,1212.79 1412.93,1212.79 1413.52,1212.79 1414.11,1212.79 1414.69,1212.79 1415.28,1212.79 1415.87,1212.79 1416.45,1212.79 1417.04,1212.79 1417.63,1212.79 1418.21,1212.79 1418.8,1212.79 1419.38,1212.79 1419.97,1212.79 1420.56,1212.79 1421.14,1212.79 1421.73,1212.79 1422.32,1212.79 1422.9,1212.79 1423.49,1212.79 1424.08,1212.79 1424.66,1212.79 1425.25,1212.79 1425.83,1212.79 1426.42,1212.79 1427.01,1212.79 1427.59,1212.79 1428.18,1212.79 1428.77,1212.79 1429.35,1212.79 1429.94,1212.79 1430.53,1212.79 1431.11,1212.79 1431.7,1212.79 1432.29,1212.79 1432.87,1212.79 1433.46,1212.79 1434.04,1212.79 1434.63,1212.79 1435.22,1212.79 1435.8,1212.79 1436.39,1212.79 1436.98,1212.79 1437.56,1212.79 1438.15,1212.79 1438.74,1212.79 1439.32,1212.79 1439.91,1212.79 1440.5,1212.79 1441.08,1212.79 1441.67,1212.79 1442.25,1212.79 1442.84,1212.79 1443.43,1212.79 1444.01,1212.79 1444.6,1212.79 1445.19,1212.79 1445.77,1212.79 1446.36,1212.79 1446.95,1212.79 1447.53,1212.79 1448.12,1212.79 1448.7,1212.79 1449.29,1212.79 1449.88,1212.79 1450.46,1212.79 1451.05,1212.79 1451.64,1212.79 1452.22,1212.79 1452.81,1212.79 1453.4,1212.79 1453.98,1212.79 1454.57,1212.79 1455.16,1212.79 1455.74,1212.79 1456.33,1212.79 1456.91,1212.79 1457.5,1212.79 1458.09,1212.79 1458.67,1212.79 1459.26,1212.79 1459.85,1212.79 1460.43,1212.79 1461.02,1212.79 1461.61,1212.79 1462.19,1212.79 1462.78,1212.79 1463.37,1212.79 1463.95,1212.79 1464.54,1212.79 1465.12,1212.79 1465.71,1212.79 1466.3,1212.79 1466.88,1212.79 1467.47,1212.79 1468.06,1212.79 1468.64,1212.79 1469.23,1212.79 1469.82,1212.79 1470.4,1212.79 1470.99,1212.79 1471.57,1212.79 1472.16,1212.79 1472.75,1212.79 1473.33,1212.79 1473.92,1212.79 1474.51,1212.79 1475.09,1212.79 1475.68,1212.79 1476.27,1212.79 1476.85,1212.79 1477.44,1212.79 1478.03,1212.79 1478.61,1212.79 1479.2,1212.79 1479.78,1212.79 1480.37,1212.79 1480.96,1212.79 1481.54,1212.79 1482.13,1212.79 1482.72,1212.79 1483.3,1212.79 1483.89,1212.79 1484.48,1212.79 1485.06,1212.79 1485.65,1212.79 1486.24,1212.79 1486.82,1212.79 1487.41,1212.79 1487.99,1212.79 1488.58,1212.79 1489.17,1212.79 1489.75,1212.79 1490.34,1212.79 1490.93,1212.79 1491.51,1212.79 1492.1,1212.79 1492.69,1212.79 1493.27,1212.79 1493.86,1212.79 1494.45,1212.79 1495.03,1212.79 1495.62,1212.79 1496.2,1212.79 1496.79,1212.79 1497.38,1212.79 1497.96,1212.79 1498.55,1212.79 1499.14,1212.79 1499.72,1212.79 1500.31,1212.79 1500.9,1212.79 1501.48,1212.79 1502.07,1212.79 1502.65,1212.79 1503.24,1212.79 1503.83,1212.79 1504.41,1212.79 1505,1212.79 1505.59,1212.79 1506.17,1212.79 1506.76,1212.79 1507.35,1212.79 1507.93,1212.79 1508.52,1212.79 1509.11,1212.79 1509.69,1212.79 1510.28,1212.79 1510.86,1212.79 1511.45,1212.79 1512.04,1212.79 1512.62,1212.79 1513.21,1212.79 1513.8,1212.79 1514.38,1212.79 1514.97,1212.79 1515.56,1212.79 1516.14,1212.79 1516.73,1212.79 1517.32,1212.79 1517.9,1212.79 1518.49,1212.79 1519.07,1212.79 1519.66,1212.79 1520.25,1212.79 1520.83,1212.79 1521.42,1212.79 1522.01,1212.79 1522.59,1212.79 1523.18,1212.79 1523.77,1212.79 1524.35,1212.79 1524.94,1212.79 1525.52,1212.79 1526.11,1212.79 1526.7,1212.79 1527.28,1212.79 1527.87,1212.79 1528.46,1212.79 1529.04,1212.79 1529.63,1212.79 1530.22,1212.79 1530.8,1212.79 1531.39,1212.79 1531.98,1212.79 1532.56,1212.79 1533.15,1212.79 1533.73,1212.79 1534.32,1212.79 1534.91,1212.79 1535.49,1212.79 1536.08,1212.79 1536.67,1212.79 1537.25,1212.79 1537.84,1212.79 1538.43,1212.79 1539.01,1212.79 1539.6,1212.79 1540.19,1212.79 1540.77,1212.79 1541.36,1212.79 1541.94,1212.79 1542.53,1212.79 1543.12,1212.79 1543.7,1212.79 1544.29,1212.79 1544.88,1212.79 1545.46,1212.79 1546.05,1212.79 1546.64,1212.79 1547.22,1212.79 1547.81,1212.79 1548.4,1212.79 1548.98,1212.79 1549.57,1212.79 1550.15,1212.79 1550.74,1212.79 1551.33,1212.79 1551.91,1212.79 1552.5,1212.79 1553.09,1212.79 1553.67,1212.79 1554.26,1212.79 1554.85,1212.79 1555.43,1212.79 1556.02,1212.79 1556.6,1212.79 1557.19,1212.79 1557.78,1212.79 1558.36,1212.79 1558.95,1212.79 1559.54,1212.79 1560.12,1212.79 1560.71,1212.79 1561.3,1212.79 1561.88,1212.79 1562.47,1212.79 1563.06,1212.79 1563.64,1212.79 1564.23,1212.79 1564.81,1212.79 1565.4,1212.79 1565.99,1212.79 1566.57,1212.79 1567.16,1212.79 1567.75,1212.79 1568.33,1212.79 1568.92,1212.79 1569.51,1212.79 1570.09,1212.79 1570.68,1212.79 1571.27,1212.79 1571.85,1212.79 1572.44,1212.79 1573.02,1212.79 1573.61,1212.79 1574.2,1212.79 1574.78,1212.79 1575.37,1212.79 1575.96,1212.79 1576.54,1212.79 1577.13,1212.79 1577.72,1212.79 1578.3,1212.79 1578.89,1212.79 1579.47,1212.79 1580.06,1212.79 1580.65,1212.79 1581.23,1212.79 1581.82,1212.79 1582.41,1212.79 1582.99,1212.79 1583.58,1212.79 1584.17,1212.79 1584.75,1212.79 1585.34,1212.79 1585.93,1212.79 1586.51,1212.79 1587.1,1212.79 1587.68,1212.79 1588.27,1212.79 1588.86,1212.79 1589.44,1212.79 1590.03,1212.79 1590.62,1212.79 1591.2,1212.79 1591.79,1212.79 1592.38,1212.79 1592.96,1212.79 1593.55,1212.79 1594.14,1212.79 1594.72,1212.79 1595.31,1212.79 1595.89,1212.79 1596.48,1212.79 1597.07,1212.79 1597.65,1212.79 1598.24,1212.79 1598.83,1212.79 1599.41,1212.79 1600,1212.79 1600.59,1212.79 1601.17,1212.79 1601.76,1212.79 1602.34,1212.79 1602.93,1212.79 1603.52,1212.79 1604.1,1212.79 1604.69,1212.79 1605.28,1212.79 1605.86,1212.79 1606.45,1212.79 1607.04,1212.79 1607.62,1212.79 1608.21,1212.79 1608.8,1212.79 1609.38,1212.79 1609.97,1212.79 1610.55,1212.79 1611.14,1212.79 1611.73,1212.79 1612.31,1212.79 1612.9,1212.79 1613.49,1212.79 1614.07,1212.79 1614.66,1212.79 1615.25,1212.79 1615.83,1212.79 1616.42,1212.79 1617.01,1212.79 1617.59,1212.79 1618.18,1212.79 1618.76,1212.79 1619.35,1212.79 1619.94,1212.79 1620.52,1212.79 1621.11,1212.79 1621.7,1212.79 1622.28,1212.79 1622.87,1212.79 1623.46,1212.79 1624.04,1212.79 1624.63,1212.79 1625.22,1212.79 1625.8,1212.79 1626.39,1212.79 1626.97,1212.79 1627.56,1212.79 1628.15,1212.79 1628.73,1212.79 1629.32,1212.79 1629.91,1212.79 1630.49,1212.79 1631.08,1212.79 1631.67,1212.79 1632.25,1212.79 1632.84,1212.79 1633.42,1212.79 1634.01,1212.79 1634.6,1212.79 1635.18,1212.79 1635.77,1212.79 1636.36,1212.79 1636.94,1212.79 1637.53,1212.79 1638.12,1212.79 1638.7,1212.79 1639.29,1212.79 1639.88,1212.79 1640.46,1212.79 1641.05,1212.79 1641.63,1212.79 1642.22,1212.79 1642.81,1212.79 1643.39,1212.79 1643.98,1212.79 1644.57,1212.79 1645.15,1212.79 1645.74,1212.79 1646.33,1212.79 1646.91,1212.79 1647.5,1212.79 1648.09,1212.79 1648.67,1212.79 1649.26,1212.79 1649.84,1212.79 1650.43,1212.79 1651.02,1212.79 1651.6,1212.79 1652.19,1212.79 1652.78,1212.79 1653.36,1212.79 1653.95,1212.79 1654.54,1212.79 1655.12,1212.79 1655.71,1212.79 1656.29,1212.79 1656.88,1212.79 1657.47,1212.79 1658.05,1212.79 1658.64,1212.79 1659.23,1212.79 1659.81,1212.79 1660.4,1212.79 1660.99,1212.79 1661.57,1212.79 1662.16,1212.79 1662.75,1212.79 1663.33,1212.79 1663.92,1212.79 1664.5,1212.79 1665.09,1212.79 1665.68,1212.79 1666.26,1212.79 1666.85,1212.79 1667.44,1212.79 1668.02,1212.79 1668.61,1212.79 1669.2,1212.79 1669.78,1212.79 1670.37,1212.79 1670.96,1212.79 1671.54,1212.79 1672.13,1212.79 1672.71,1212.79 1673.3,1212.79 1673.89,1212.79 1674.47,1212.79 1675.06,1212.79 1675.65,1212.79 1676.23,1212.79 1676.82,1212.79 1677.41,1212.79 1677.99,1212.79 1678.58,1212.79 1679.17,1212.79 1679.75,1212.79 1680.34,1212.79 1680.92,1212.79 1681.51,1212.79 1682.1,1212.79 1682.68,1212.79 1683.27,1212.79 1683.86,1212.79 1684.44,1212.79 1685.03,1212.79 1685.62,1212.79 1686.2,1212.79 1686.79,1212.79 1687.37,1212.79 1687.96,1212.79 1688.55,1212.79 1689.13,1212.79 1689.72,1212.79 1690.31,1212.79 1690.89,1212.79 1691.48,1212.79 1692.07,1212.79 1692.65,1212.79 1693.24,1212.79 1693.83,1212.79 1694.41,1212.79 1695,1212.79 1695.58,1212.79 1696.17,1212.79 1696.76,1212.79 1697.34,1212.79 1697.93,1212.79 1698.52,1212.79 1699.1,1212.79 1699.69,1212.79 1700.28,1212.79 1700.86,1212.79 1701.45,1212.79 1702.04,1212.79 1702.62,1212.79 1703.21,1212.79 1703.79,1212.79 1704.38,1212.79 1704.97,1212.79 1705.55,1212.79 1706.14,1212.79 1706.73,1212.79 1707.31,1212.79 1707.9,1212.79 1708.49,1212.79 1709.07,1212.79 1709.66,1212.79 1710.24,1212.79 1710.83,1212.79 1711.42,1212.79 1712,1212.79 1712.59,1212.79 1713.18,1212.79 1713.76,1212.79 1714.35,1212.79 1714.94,1212.79 1715.52,1212.79 1716.11,1212.79 1716.7,1212.79 1717.28,1212.79 1717.87,1212.79 1718.45,1212.79 1719.04,1212.79 1719.63,1212.79 1720.21,1212.79 1720.8,1212.79 1721.39,1212.79 1721.97,1212.79 1722.56,1212.79 1723.15,1212.79 1723.73,1212.79 1724.32,1212.79 1724.91,1212.79 1725.49,1212.79 1726.08,1212.79 1726.66,1212.79 1727.25,1212.79 1727.84,1212.79 1728.42,1212.79 1729.01,1212.79 1729.6,1212.79 1730.18,1212.79 1730.77,1212.79 1731.36,1212.79 1731.94,1212.79 1732.53,1212.79 1733.11,1212.79 1733.7,1212.79 1734.29,1212.79 1734.87,1212.79 1735.46,1212.79 1736.05,1212.79 1736.63,1212.79 1737.22,1212.79 1737.81,1212.79 1738.39,1212.79 1738.98,1212.79 1739.57,1212.79 1740.15,1212.79 1740.74,1212.79 1741.32,1212.79 1741.91,1212.79 1742.5,1212.79 1743.08,1212.79 1743.67,1212.79 1744.26,1212.79 1744.84,1212.79 1745.43,1212.79 1746.02,1212.79 1746.6,1212.79 1747.19,1212.79 1747.78,1212.79 1748.36,1212.79 1748.95,1212.79 1749.53,1212.79 1750.12,1212.79 1750.71,1212.79 1751.29,1212.79 1751.88,1212.79 1752.47,1212.79 1753.05,1212.79 1753.64,1212.79 1754.23,1212.79 1754.81,1212.79 1755.4,1212.79 1755.99,1212.79 1756.57,1212.79 1757.16,1212.79 1757.74,1212.79 1758.33,1212.79 1758.92,1212.79 1759.5,1212.79 1760.09,1212.79 1760.68,1212.79 1761.26,1212.79 1761.85,1212.79 1762.44,1212.79 1763.02,1212.79 1763.61,1212.79 1764.19,1212.79 1764.78,1212.79 1765.37,1212.79 1765.95,1212.79 1766.54,1212.79 1767.13,1212.79 1767.71,1212.79 1768.3,1212.79 1768.89,1212.79 1769.47,1212.79 1770.06,1212.79 1770.65,1212.79 1771.23,1212.79 1771.82,1212.79 1772.4,1212.79 1772.99,1212.79 1773.58,1212.79 1774.16,1212.79 1774.75,1212.79 1775.34,1212.79 1775.92,1212.79 1776.51,1212.79 1777.1,1212.79 1777.68,1212.79 1778.27,1212.79 1778.86,1212.79 1779.44,1212.79 1780.03,1212.79 1780.61,1212.79 1781.2,1212.79 1781.79,1212.79 1782.37,1212.79 1782.96,1212.79 1783.55,1212.79 1784.13,1212.79 1784.72,1212.79 1785.31,1212.79 1785.89,1212.79 1786.48,1212.79 1787.06,1212.79 1787.65,1212.79 1788.24,1212.79 1788.82,1212.79 1789.41,1212.79 1790,1212.79 1790.58,1212.79 1791.17,1212.79 1791.76,1212.79 1792.34,1212.79 1792.93,1212.79 1793.52,1212.79 1794.1,1212.79 1794.69,1212.79 1795.27,1212.79 1795.86,1212.79 1796.45,1212.79 1797.03,1212.79 1797.62,1212.79 1798.21,1212.79 1798.79,1212.79 1799.38,1212.79 1799.97,1212.79 1800.55,1212.79 1801.14,1212.79 1801.73,1212.79 1802.31,1212.79 1802.9,1212.79 1803.48,1212.79 1804.07,1212.79 1804.66,1212.79 1805.24,1212.79 1805.83,1212.79 1806.42,1212.79 1807,1212.79 1807.59,1212.79 1808.18,1212.79 1808.76,1212.79 1809.35,1212.79 1809.94,1212.79 1810.52,1212.79 1811.11,1212.79 1811.69,1212.79 1812.28,1212.79 1812.87,1212.79 1813.45,1212.79 1814.04,1212.79 1814.63,1212.79 1815.21,1212.79 1815.8,1212.79 1816.39,1212.79 1816.97,1212.79 1817.56,1212.79 1818.14,1212.79 1818.73,1212.79 1819.32,1212.79 1819.9,1212.79 1820.49,1212.79 1821.08,1212.79 1821.66,1212.79 1822.25,1212.79 1822.84,1212.79 1823.42,1212.79 1824.01,1212.79 1824.6,1212.79 1825.18,1212.79 1825.77,1212.79 1826.35,1212.79 1826.94,1212.79 1827.53,1212.79 1828.11,1212.79 1828.7,1212.79 1829.29,1212.79 1829.87,1212.79 1830.46,1212.79 1831.05,1212.79 1831.63,1212.79 1832.22,1212.79 1832.81,1212.79 1833.39,1212.79 1833.98,1212.79 1834.56,1212.79 1835.15,1212.79 1835.74,1212.79 1836.32,1212.79 1836.91,1212.79 1837.5,1212.79 1838.08,1212.79 1838.67,1212.79 1839.26,1212.79 1839.84,1212.79 1840.43,1212.79 1841.01,1212.79 1841.6,1212.79 1842.19,1212.79 1842.77,1212.79 1843.36,1212.79 1843.95,1212.79 1844.53,1212.79 1845.12,1212.79 1845.71,1212.79 1846.29,1212.79 1846.88,1212.79 1847.47,1212.79 1848.05,1212.79 1848.64,1212.79 1849.22,1212.79 1849.81,1212.79 1850.4,1212.79 1850.98,1212.79 1851.57,1212.79 1852.16,1212.79 1852.74,1212.79 1853.33,1212.79 1853.92,1212.79 1854.5,1212.79 1855.09,1212.79 1855.68,1212.79 1856.26,1212.79 1856.85,1212.79 1857.43,1212.79 1858.02,1212.79 1858.61,1212.79 1859.19,1212.79 1859.78,1212.79 1860.37,1212.79 1860.95,1212.79 1861.54,1212.79 1862.13,1212.79 1862.71,1212.79 1863.3,1212.79 1863.88,1212.79 1864.47,1212.79 1865.06,1212.79 1865.64,1212.79 1866.23,1212.79 1866.82,1212.79 1867.4,1212.79 1867.99,1212.79 1868.58,1212.79 1869.16,1212.79 1869.75,1212.79 1870.34,1212.79 1870.92,1212.79 1871.51,1212.79 1872.09,1212.79 1872.68,1212.79 1873.27,1212.79 1873.85,1212.79 1874.44,1212.79 1875.03,1212.79 1875.61,1212.79 1876.2,1212.79 1876.79,1212.79 1877.37,1212.79 1877.96,1212.79 1878.55,1212.79 1879.13,1212.79 1879.72,1212.79 1880.3,1212.79 1880.89,1212.79 1881.48,1212.79 1882.06,1212.79 1882.65,1212.79 1883.24,1212.79 1883.82,1212.79 1884.41,1212.79 1885,1212.79 1885.58,1212.79 1886.17,1212.79 1886.76,1212.79 1887.34,1212.79 1887.93,1212.79 1888.51,1212.79 1889.1,1212.79 1889.69,1212.79 1890.27,1212.79 1890.86,1212.79 1891.45,1212.79 1892.03,1212.79 1892.62,1212.79 1893.21,1212.79 1893.79,1212.79 1894.38,1212.79 1894.96,1212.79 1895.55,1212.79 1896.14,1212.79 1896.72,1212.79 1897.31,1212.79 1897.9,1212.79 1898.48,1212.79 1899.07,1212.79 1899.66,1212.79 1900.24,1212.79 1900.83,1212.79 1901.42,1212.79 1902,1212.79 1902.59,1212.79 1903.17,1212.79 1903.76,1212.79 1904.35,1212.79 1904.93,1212.79 1905.52,1212.79 1906.11,1212.79 1906.69,1212.79 1907.28,1212.79 1907.87,1212.79 1908.45,1212.79 1909.04,1212.79 1909.63,1212.79 1910.21,1212.79 1910.8,1212.79 1911.38,1212.79 1911.97,1212.79 1912.56,1212.79 1913.14,1212.79 1913.73,1212.79 1914.32,1212.79 1914.9,1212.79 1915.49,1212.79 1916.08,1212.79 1916.66,1212.79 1917.25,1212.79 1917.83,1212.79 1918.42,1212.79 1919.01,1212.79 1919.59,1212.79 1920.18,1212.79 1920.77,1212.79 1921.35,1212.79 1921.94,1212.79 1922.53,1212.79 1923.11,1212.79 1923.7,1212.79 1924.29,1212.79 1924.87,1212.79 1925.46,1212.79 1926.04,1212.79 1926.63,1212.79 1927.22,1212.79 1927.8,1212.79 1928.39,1212.79 1928.98,1212.79 1929.56,1212.79 1930.15,1212.79 1930.74,1212.79 1931.32,1212.79 1931.91,1212.79 1932.5,1212.79 1933.08,1212.79 1933.67,1212.79 1934.25,1212.79 1934.84,1212.79 1935.43,1212.79 1936.01,1212.79 1936.6,1212.79 1937.19,1212.79 1937.77,1212.79 1938.36,1212.79 1938.95,1212.79 1939.53,1212.79 1940.12,1212.79 1940.71,1212.79 1941.29,1212.79 1941.88,1212.79 1942.46,1212.79 1943.05,1212.79 1943.64,1212.79 1944.22,1212.79 1944.81,1212.79 1945.4,1212.79 1945.98,1212.79 1946.57,1212.79 1947.16,1212.79 1947.74,1212.79 1948.33,1212.79 1948.91,1212.79 1949.5,1212.79 1950.09,1212.79 1950.67,1212.79 1951.26,1212.79 1951.85,1212.79 1952.43,1212.79 1953.02,1212.79 1953.61,1212.79 1954.19,1212.79 1954.78,1212.79 1955.37,1212.79 1955.95,1212.79 1956.54,1212.79 1957.12,1212.79 1957.71,1212.79 1958.3,1212.79 1958.88,1212.79 1959.47,1212.79 1960.06,1212.79 1960.64,1212.79 1961.23,1212.79 1961.82,1212.79 1962.4,1212.79 1962.99,1212.79 1963.58,1212.79 1964.16,1212.79 1964.75,1212.79 1965.33,1212.79 1965.92,1212.79 1966.51,1212.79 1967.09,1212.79 1967.68,1212.79 1968.27,1212.79 1968.85,1212.79 1969.44,1212.79 1970.03,1212.79 1970.61,1212.79 1971.2,1212.79 1971.78,1212.79 1972.37,1212.79 1972.96,1212.79 1973.54,1212.79 1974.13,1212.79 1974.72,1212.79 1975.3,1212.79 1975.89,1212.79 1976.48,1212.79 1977.06,1212.79 1977.65,1212.79 1978.24,1212.79 1978.82,1212.79 1979.41,1212.79 1979.99,1212.79 1980.58,1212.79 1981.17,1212.79 1981.75,1212.79 1982.34,1212.79 1982.93,1212.79 1983.51,1212.79 1984.1,1212.79 1984.69,1212.79 1985.27,1212.79 1985.86,1212.79 1986.45,1212.79 1987.03,1212.79 1987.62,1212.79 1988.2,1212.79 1988.79,1212.79 1989.38,1212.79 1989.96,1212.79 1990.55,1212.79 1991.14,1212.79 1991.72,1212.79 1992.31,1212.79 1992.9,1212.79 1993.48,1212.79 1994.07,1212.79 1994.65,1212.79 1995.24,1212.79 1995.83,1212.79 1996.41,1212.79 1997,1212.79 1997.59,1212.79 1998.17,1212.79 1998.76,1212.79 1999.35,1212.79 1999.93,1212.79 2000.52,1212.79 2001.11,1212.79 2001.69,1212.79 2002.28,1212.79 2002.86,1212.79 2003.45,1212.79 2004.04,1212.79 2004.62,1212.79 2005.21,1212.79 2005.8,1212.79 2006.38,1212.79 2006.97,1212.79 2007.56,1212.79 2008.14,1212.79 2008.73,1212.79 2009.32,1212.79 2009.9,1212.79 2010.49,1212.79 2011.07,1212.79 2011.66,1212.79 2012.25,1212.79 2012.83,1212.79 2013.42,1212.79 2014.01,1212.79 2014.59,1212.79 2015.18,1212.79 2015.77,1212.79 2016.35,1212.79 2016.94,1212.79 2017.53,1212.79 2018.11,1212.79 2018.7,1212.79 2019.28,1212.79 2019.87,1212.79 2020.46,1212.79 2021.04,1212.79 2021.63,1212.79 2022.22,1212.79 2022.8,1212.79 2023.39,1212.79 2023.98,1212.79 2024.56,1212.79 2025.15,1212.79 2025.73,1212.79 2026.32,1212.79 2026.91,1212.79 2027.49,1212.79 2028.08,1212.79 2028.67,1212.79 2029.25,1212.79 2029.84,1212.79 2030.43,1212.79 2031.01,1212.79 2031.6,1212.79 2032.19,1212.79 2032.77,1212.79 2033.36,1212.79 2033.94,1212.79 2034.53,1212.79 2035.12,1212.79 2035.7,1212.79 2036.29,1212.79 2036.88,1212.79 2037.46,1212.79 2038.05,1212.79 2038.64,1212.79 2039.22,1212.79 2039.81,1212.79 2040.4,1212.79 2040.98,1212.79 2041.57,1212.79 2042.15,1212.79 2042.74,1212.79 2043.33,1212.79 2043.91,1212.79 2044.5,1212.79 2045.09,1212.79 2045.67,1212.79 2046.26,1212.79 2046.85,1212.79 2047.43,1212.79 2048.02,1212.79 2048.6,1212.79 2049.19,1212.79 2049.78,1212.79 2050.36,1212.79 2050.95,1212.79 2051.54,1212.79 2052.12,1212.79 2052.71,1212.79 2053.3,1212.79 2053.88,1212.79 2054.47,1212.79 2055.06,1212.79 2055.64,1212.79 2056.23,1212.79 2056.81,1212.79 2057.4,1212.79 2057.99,1212.79 2058.57,1212.79 2059.16,1212.79 2059.75,1212.79 2060.33,1212.79 2060.92,1212.79 2061.51,1212.79 2062.09,1212.79 2062.68,1212.79 2063.27,1212.79 2063.85,1212.79 2064.44,1212.79 2065.02,1212.79 2065.61,1212.79 2066.2,1212.79 2066.78,1212.79 2067.37,1212.79 2067.96,1212.79 2068.54,1212.79 2069.13,1212.79 2069.72,1212.79 2070.3,1212.79 2070.89,1212.79 2071.48,1212.79 2072.06,1212.79 2072.65,1212.79 2073.23,1212.79 2073.82,1212.79 2074.41,1212.79 2074.99,1212.79 2075.58,1212.79 2076.17,1212.79 2076.75,1212.79 2077.34,1212.79 2077.93,1212.79 2078.51,1212.79 2079.1,1212.79 2079.68,1212.79 2080.27,1212.79 2080.86,1212.79 2081.44,1212.79 2082.03,1212.79 2082.62,1212.79 2083.2,1212.79 2083.79,1212.79 2084.38,1212.79 2084.96,1212.79 2085.55,1212.79 2086.14,1212.79 2086.72,1212.79 2087.31,1212.79 2087.89,1212.79 2088.48,1212.79 2089.07,1212.79 2089.65,1212.79 2090.24,1212.79 2090.83,1212.79 2091.41,1212.79 2092,1212.79 2092.59,1212.79 2093.17,1212.79 2093.76,1212.79 2094.35,1212.79 2094.93,1212.79 2095.52,1212.79 2096.1,1212.79 2096.69,1212.79 2097.28,1212.79 2097.86,1212.79 2098.45,1212.79 2099.04,1212.79 2099.62,1212.79 2100.21,1212.79 2100.8,1212.79 2101.38,1212.79 2101.97,1212.79 2102.55,1212.79 2103.14,1212.79 2103.73,1212.79 2104.31,1212.79 2104.9,1212.79 2105.49,1212.79 2106.07,1212.79 2106.66,1212.79 2107.25,1212.79 2107.83,1212.79 2108.42,1212.79 2109.01,1212.79 2109.59,1212.79 2110.18,1212.79 2110.76,1212.79 2111.35,1212.79 2111.94,1212.79 2112.52,1212.79 2113.11,1212.79 2113.7,1212.79 2114.28,1212.79 2114.87,1212.79 2115.46,1212.79 2116.04,1212.79 2116.63,1212.79 2117.22,1212.79 2117.8,1212.79 2118.39,1212.79 2118.97,1212.79 2119.56,1212.79 2120.15,1212.79 2120.73,1212.79 2121.32,1212.79 2121.91,1212.79 2122.49,1212.79 2123.08,1212.79 2123.67,1212.79 2124.25,1212.79 2124.84,1212.79 2125.42,1212.79 2126.01,1212.79 2126.6,1212.79 2127.18,1212.79 2127.77,1212.79 2128.36,1212.79 2128.94,1212.79 2129.53,1212.79 2130.12,1212.79 2130.7,1212.79 2131.29,1212.79 2131.88,1212.79 2132.46,1212.79 2133.05,1212.79 2133.63,1212.79 2134.22,1212.79 2134.81,1212.79 2135.39,1212.79 2135.98,1212.79 2136.57,1212.79 2137.15,1212.79 2137.74,1212.79 2138.33,1212.79 2138.91,1212.79 2139.5,1212.79 2140.09,1212.79 2140.67,1212.79 2141.26,1212.79 2141.84,1212.79 2142.43,1212.79 2143.02,1212.79 2143.6,1212.79 2144.19,1212.79 2144.78,1212.79 2145.36,1212.79 2145.95,1212.79 2146.54,1212.79 2147.12,1212.79 2147.71,1212.79 2148.3,1212.79 2148.88,1212.79 2149.47,1212.79 2150.05,1212.79 2150.64,1212.79 2151.23,1212.79 2151.81,1212.79 2152.4,1212.79 2152.99,1212.79 2153.57,1212.79 2154.16,1212.79 2154.75,1212.79 2155.33,1212.79 2155.92,1212.79 2156.5,1212.79 2157.09,1212.79 2157.68,1212.79 2158.26,1212.79 \"/>\n<path clip-path=\"url(#clip742)\" d=\"M986.025 1212.72 L986.612 1212.72 L987.198 1212.72 L987.785 1212.72 L988.371 1212.72 L988.957 1212.72 L989.544 1212.72 L990.13 1212.72 L990.717 1212.72 L991.303 1212.72 L991.889 1212.72 L992.476 1212.72 L993.062 1212.72 L993.649 1212.72 L994.235 1212.72 L994.822 1212.72 L995.408 1212.72 L995.994 1212.72 L996.581 1212.72 L997.167 1212.72 L997.754 1212.72 L998.34 1212.72 L998.926 1212.72 L999.513 1212.72 L1000.1 1212.72 L1000.69 1212.72 L1001.27 1212.72 L1001.86 1212.72 L1002.44 1212.72 L1003.03 1212.72 L1003.62 1212.72 L1004.2 1212.72 L1004.79 1212.72 L1005.38 1212.72 L1005.96 1212.72 L1006.55 1212.72 L1007.14 1212.72 L1007.72 1212.72 L1008.31 1212.72 L1008.9 1212.72 L1009.48 1212.72 L1010.07 1212.72 L1010.65 1212.72 L1011.24 1212.72 L1011.83 1212.72 L1012.41 1212.72 L1013 1212.72 L1013.59 1212.72 L1014.17 1212.72 L1014.76 1212.72 L1015.35 1212.72 L1015.93 1212.72 L1016.52 1212.72 L1017.11 1212.72 L1017.69 1212.72 L1018.28 1212.72 L1018.86 1212.72 L1019.45 1212.72 L1020.04 1212.72 L1020.62 1212.72 L1021.21 1212.72 L1021.8 1212.72 L1022.38 1212.72 L1022.97 1212.72 L1023.56 1212.72 L1024.14 1212.72 L1024.73 1212.72 L1025.32 1212.72 L1025.9 1212.72 L1026.49 1212.72 L1027.07 1212.72 L1027.66 1212.72 L1028.25 1212.72 L1028.83 1212.72 L1029.42 1212.72 L1030.01 1212.72 L1030.59 1212.72 L1031.18 1212.72 L1031.77 1212.72 L1032.35 1212.72 L1032.94 1212.72 L1033.52 1212.72 L1034.11 1212.72 L1034.7 1212.72 L1035.28 1212.72 L1035.87 1212.72 L1036.46 1212.72 L1037.04 1212.72 L1037.63 1212.72 L1038.22 1212.72 L1038.8 1212.72 L1039.39 1212.72 L1039.98 1212.72 L1040.56 1212.72 L1041.15 1212.72 L1041.73 1212.72 L1042.32 1212.72 L1042.91 1212.72 L1043.49 1212.72 L1044.08 1212.72 L1044.67 1212.72 L1045.25 1212.72 L1045.84 1212.72 L1046.43 1212.72 L1047.01 1212.72 L1047.6 1212.72 L1048.19 1212.72 L1048.77 1212.72 L1049.36 1212.72 L1049.94 1212.72 L1050.53 1212.72 L1051.12 1212.72 L1051.7 1212.72 L1052.29 1212.72 L1052.88 1212.72 L1053.46 1212.72 L1054.05 1212.72 L1054.64 1212.72 L1055.22 1212.72 L1055.81 1212.72 L1056.39 1212.72 L1056.98 1212.72 L1057.57 1212.72 L1058.15 1212.72 L1058.74 1212.72 L1059.33 1212.72 L1059.91 1212.72 L1060.5 1212.72 L1061.09 1212.72 L1061.67 1212.72 L1062.26 1212.72 L1062.85 1212.72 L1063.43 1212.72 L1064.02 1212.72 L1064.6 1212.72 L1065.19 1212.72 L1065.78 1212.72 L1066.36 1212.72 L1066.95 1212.72 L1067.54 1212.72 L1068.12 1212.72 L1068.71 1212.72 L1069.3 1212.72 L1069.88 1212.72 L1070.47 1212.72 L1071.06 1212.72 L1071.64 1212.72 L1072.23 1212.72 L1072.81 1212.72 L1073.4 1212.72 L1073.99 1212.72 L1074.57 1212.72 L1075.16 1212.72 L1075.75 1212.72 L1076.33 1212.72 L1076.92 1212.72 L1077.51 1212.72 L1078.09 1212.72 L1078.68 1212.72 L1079.26 1212.72 L1079.85 1212.72 L1080.44 1212.72 L1081.02 1212.72 L1081.61 1212.72 L1082.2 1212.72 L1082.78 1212.72 L1083.37 1212.72 L1083.96 1212.72 L1084.54 1212.72 L1085.13 1212.72 L1085.72 1212.72 L1086.3 1212.72 L1086.89 1212.72 L1087.47 1212.72 L1088.06 1212.72 L1088.65 1212.72 L1089.23 1212.72 L1089.82 1212.72 L1090.41 1212.72 L1090.99 1212.72 L1091.58 1212.72 L1092.17 1212.72 L1092.75 1212.72 L1093.34 1212.72 L1093.93 1212.72 L1094.51 1212.72 L1095.1 1212.72 L1095.68 1212.72 L1096.27 1212.72 L1096.86 1212.72 L1097.44 1212.72 L1098.03 1212.72 L1098.62 1212.72 L1099.2 1212.72 L1099.79 1212.72 L1100.38 1212.72 L1100.96 1212.72 L1101.55 1212.72 L1102.14 1212.72 L1102.72 1212.72 L1103.31 1212.72 L1103.89 1212.72 L1104.48 1212.72 L1105.07 1212.72 L1105.65 1212.72 L1106.24 1212.72 L1106.83 1212.72 L1107.41 1212.72 L1108 1212.72 L1108.59 1212.72 L1109.17 1212.72 L1109.76 1212.72 L1110.34 1212.72 L1110.93 1212.72 L1111.52 1212.72 L1112.1 1212.72 L1112.69 1212.72 L1113.28 1212.72 L1113.86 1212.72 L1114.45 1212.72 L1115.04 1212.72 L1115.62 1212.72 L1116.21 1212.72 L1116.8 1212.72 L1117.38 1212.72 L1117.97 1212.72 L1118.55 1212.72 L1119.14 1212.72 L1119.73 1212.72 L1120.31 1212.72 L1120.9 1212.72 L1121.49 1212.72 L1122.07 1212.72 L1122.66 1212.72 L1123.25 1212.72 L1123.83 1212.72 L1124.42 1212.72 L1125.01 1212.72 L1125.59 1212.72 L1126.18 1212.72 L1126.76 1212.72 L1127.35 1212.72 L1127.94 1212.72 L1128.52 1212.72 L1129.11 1212.72 L1129.7 1212.72 L1130.28 1212.72 L1130.87 1212.72 L1131.46 1212.72 L1132.04 1212.72 L1132.63 1212.72 L1133.21 1212.72 L1133.8 1212.72 L1134.39 1212.72 L1134.97 1212.72 L1135.56 1212.72 L1136.15 1212.72 L1136.73 1212.72 L1137.32 1212.72 L1137.91 1212.72 L1138.49 1212.72 L1139.08 1212.72 L1139.67 1212.72 L1140.25 1212.72 L1140.84 1212.72 L1141.42 1212.72 L1142.01 1212.72 L1142.6 1212.72 L1143.18 1212.72 L1143.77 1212.72 L1144.36 1212.72 L1144.94 1212.72 L1145.53 1212.72 L1146.12 1212.72 L1146.7 1212.72 L1147.29 1212.72 L1147.88 1212.72 L1148.46 1212.72 L1149.05 1212.72 L1149.63 1212.72 L1150.22 1212.72 L1150.81 1212.72 L1151.39 1212.72 L1151.98 1212.72 L1152.57 1212.72 L1153.15 1212.72 L1153.74 1212.72 L1154.33 1212.72 L1154.91 1212.72 L1155.5 1212.72 L1156.09 1212.72 L1156.67 1212.72 L1157.26 1212.72 L1157.84 1212.72 L1158.43 1212.72 L1159.02 1212.72 L1159.6 1212.72 L1160.19 1212.72 L1160.78 1212.72 L1161.36 1212.72 L1161.95 1212.72 L1162.54 1212.72 L1163.12 1212.72 L1163.71 1212.72 L1164.29 1212.72 L1164.88 1212.72 L1165.47 1212.72 L1166.05 1212.72 L1166.64 1212.72 L1167.23 1212.72 L1167.81 1212.72 L1168.4 1212.72 L1168.99 1212.72 L1169.57 1212.72 L1170.16 1212.72 L1170.75 1212.72 L1171.33 1212.72 L1171.92 1212.72 L1172.5 1212.72 L1173.09 1212.72 L1173.68 1212.72 L1174.26 1212.72 L1174.85 1212.72 L1175.44 1212.72 L1176.02 1212.72 L1176.61 1212.72 L1177.2 1212.72 L1177.78 1212.72 L1178.37 1212.72 L1178.96 1212.72 L1179.54 1212.72 L1180.13 1212.72 L1180.71 1212.72 L1181.3 1212.72 L1181.89 1212.72 L1182.47 1212.72 L1183.06 1212.72 L1183.65 1212.72 L1184.23 1212.72 L1184.82 1212.72 L1185.41 1212.72 L1185.99 1212.72 L1186.58 1212.72 L1187.16 1212.72 L1187.75 1212.72 L1188.34 1212.72 L1188.92 1212.72 L1189.51 1212.72 L1190.1 1212.72 L1190.68 1212.72 L1191.27 1212.72 L1191.86 1212.72 L1192.44 1212.72 L1193.03 1212.72 L1193.62 1212.72 L1194.2 1212.72 L1194.79 1212.72 L1195.37 1212.72 L1195.96 1212.72 L1196.55 1212.72 L1197.13 1212.72 L1197.72 1212.72 L1198.31 1212.72 L1198.89 1212.72 L1199.48 1212.72 L1200.07 1212.72 L1200.65 1212.72 L1201.24 1212.72 L1201.83 1212.72 L1202.41 1212.72 L1203 1212.72 L1203.58 1212.72 L1204.17 1212.72 L1204.76 1212.72 L1205.34 1212.72 L1205.93 1212.72 L1206.52 1212.72 L1207.1 1212.72 L1207.69 1212.72 L1208.28 1212.72 L1208.86 1212.72 L1209.45 1212.72 L1210.03 1212.72 L1210.62 1212.72 L1211.21 1212.72 L1211.79 1212.72 L1212.38 1212.72 L1212.97 1212.72 L1213.55 1212.72 L1214.14 1212.72 L1214.73 1212.72 L1215.31 1212.72 L1215.9 1212.72 L1216.49 1212.72 L1217.07 1212.72 L1217.66 1212.72 L1218.24 1212.72 L1218.83 1212.72 L1219.42 1212.72 L1220 1212.72 L1220.59 1212.72 L1221.18 1212.72 L1221.76 1212.72 L1222.35 1212.72 L1222.94 1212.72 L1223.52 1212.72 L1224.11 1212.72 L1224.7 1212.72 L1225.28 1212.72 L1225.87 1212.72 L1226.45 1212.72 L1227.04 1212.72 L1227.63 1212.72 L1228.21 1212.72 L1228.8 1212.72 L1229.39 1212.72 L1229.97 1212.72 L1230.56 1212.72 L1231.15 1212.72 L1231.73 1212.72 L1232.32 1212.72 L1232.91 1212.72 L1233.49 1212.72 L1234.08 1212.72 L1234.66 1212.72 L1235.25 1212.72 L1235.84 1212.72 L1236.42 1212.72 L1237.01 1212.72 L1237.6 1212.72 L1238.18 1212.72 L1238.77 1212.72 L1239.36 1212.72 L1239.94 1212.72 L1240.53 1212.72 L1241.11 1212.72 L1241.7 1212.72 L1242.29 1212.72 L1242.87 1212.72 L1243.46 1212.72 L1244.05 1212.72 L1244.63 1212.72 L1245.22 1212.72 L1245.81 1212.72 L1246.39 1212.72 L1246.98 1212.72 L1247.57 1212.72 L1248.15 1212.72 L1248.74 1212.72 L1249.32 1212.72 L1249.91 1212.72 L1250.5 1212.72 L1251.08 1212.72 L1251.67 1212.72 L1252.26 1212.72 L1252.84 1212.72 L1253.43 1212.72 L1254.02 1212.72 L1254.6 1212.72 L1255.19 1212.72 L1255.78 1212.72 L1256.36 1212.72 L1256.95 1212.72 L1257.53 1212.72 L1258.12 1212.72 L1258.71 1212.72 L1259.29 1212.72 L1259.88 1212.72 L1260.47 1212.72 L1261.05 1212.72 L1261.64 1212.72 L1262.23 1212.72 L1262.81 1212.72 L1263.4 1212.72 L1263.98 1212.72 L1264.57 1212.72 L1265.16 1212.72 L1265.74 1212.72 L1266.33 1212.72 L1266.92 1212.72 L1267.5 1212.72 L1268.09 1212.72 L1268.68 1212.72 L1269.26 1212.72 L1269.85 1212.72 L1270.44 1212.72 L1271.02 1212.72 L1271.61 1212.72 L1272.19 1212.72 L1272.78 1212.72 L1273.37 1212.72 L1273.95 1212.72 L1274.54 1212.72 L1275.13 1212.72 L1275.71 1212.72 L1276.3 1212.72 L1276.89 1212.72 L1277.47 1212.72 L1278.06 1212.72 L1278.65 1212.72 L1279.23 1212.72 L1279.82 1212.72 L1280.4 1212.72 L1280.99 1212.72 L1281.58 1212.72 L1282.16 1212.72 L1282.75 1212.72 L1283.34 1212.72 L1283.92 1212.72 L1284.51 1212.72 L1285.1 1212.72 L1285.68 1212.72 L1286.27 1212.72 L1286.86 1212.72 L1287.44 1212.72 L1288.03 1212.72 L1288.61 1212.72 L1289.2 1212.72 L1289.79 1212.72 L1290.37 1212.72 L1290.96 1212.72 L1291.55 1212.72 L1292.13 1212.72 L1292.72 1212.72 L1293.31 1212.72 L1293.89 1212.72 L1294.48 1212.72 L1295.06 1212.72 L1295.65 1212.72 L1296.24 1212.72 L1296.82 1212.72 L1297.41 1212.72 L1298 1212.72 L1298.58 1212.72 L1299.17 1212.72 L1299.76 1212.72 L1300.34 1212.72 L1300.93 1212.72 L1301.52 1212.72 L1302.1 1212.72 L1302.69 1212.72 L1303.27 1212.72 L1303.86 1212.72 L1304.45 1212.72 L1305.03 1212.72 L1305.62 1212.72 L1306.21 1212.72 L1306.79 1212.72 L1307.38 1212.72 L1307.97 1212.72 L1308.55 1212.72 L1309.14 1212.72 L1309.73 1212.72 L1310.31 1212.72 L1310.9 1212.72 L1311.48 1212.72 L1312.07 1212.72 L1312.66 1212.72 L1313.24 1212.72 L1313.83 1212.72 L1314.42 1212.72 L1315 1212.72 L1315.59 1212.72 L1316.18 1212.72 L1316.76 1212.72 L1317.35 1212.72 L1317.93 1212.72 L1318.52 1212.72 L1319.11 1212.72 L1319.69 1212.72 L1320.28 1212.72 L1320.87 1212.72 L1321.45 1212.72 L1322.04 1212.72 L1322.63 1212.72 L1323.21 1212.72 L1323.8 1212.72 L1324.39 1212.72 L1324.97 1212.72 L1325.56 1212.72 L1326.14 1212.72 L1326.73 1212.72 L1327.32 1212.72 L1327.9 1212.72 L1328.49 1212.72 L1329.08 1212.72 L1329.66 1212.72 L1330.25 1212.72 L1330.84 1212.72 L1331.42 1212.72 L1332.01 1212.72 L1332.6 1212.72 L1333.18 1212.72 L1333.77 1212.72 L1334.35 1212.72 L1334.94 1212.72 L1335.53 1212.72 L1336.11 1212.72 L1336.7 1212.72 L1337.29 1212.72 L1337.87 1212.72 L1338.46 1212.72 L1339.05 1212.72 L1339.63 1212.72 L1340.22 1212.72 L1340.8 1212.72 L1341.39 1212.72 L1341.98 1212.72 L1342.56 1212.72 L1343.15 1212.72 L1343.74 1212.72 L1344.32 1212.72 L1344.91 1212.72 L1345.5 1212.72 L1346.08 1212.72 L1346.67 1212.72 L1347.26 1212.72 L1347.84 1212.72 L1348.43 1212.72 L1349.01 1212.72 L1349.6 1212.72 L1350.19 1212.72 L1350.77 1212.72 L1351.36 1212.72 L1351.95 1212.72 L1352.53 1212.72 L1353.12 1212.72 L1353.71 1212.72 L1354.29 1212.72 L1354.88 1212.72 L1355.47 1212.72 L1356.05 1212.72 L1356.64 1212.72 L1357.22 1212.72 L1357.81 1212.72 L1358.4 1212.72 L1358.98 1212.72 L1359.57 1212.72 L1360.16 1212.72 L1360.74 1212.72 L1361.33 1212.72 L1361.92 1212.72 L1362.5 1212.72 L1363.09 1212.72 L1363.68 1212.72 L1364.26 1212.72 L1364.85 1212.72 L1365.43 1212.72 L1366.02 1212.72 L1366.61 1212.72 L1367.19 1212.72 L1367.78 1212.72 L1368.37 1212.72 L1368.95 1212.72 L1369.54 1212.72 L1370.13 1212.72 L1370.71 1212.72 L1371.3 1212.72 L1371.88 1212.72 L1372.47 1212.72 L1373.06 1212.72 L1373.64 1212.72 L1374.23 1212.72 L1374.82 1212.72 L1375.4 1212.72 L1375.99 1212.72 L1376.58 1212.72 L1377.16 1212.72 L1377.75 1212.72 L1378.34 1212.72 L1378.92 1212.72 L1379.51 1212.72 L1380.09 1212.72 L1380.68 1212.72 L1381.27 1212.72 L1381.85 1212.72 L1382.44 1212.72 L1383.03 1212.72 L1383.61 1212.72 L1384.2 1212.72 L1384.79 1212.72 L1385.37 1212.72 L1385.96 1212.72 L1386.55 1212.72 L1387.13 1212.72 L1387.72 1212.72 L1388.3 1212.72 L1388.89 1212.72 L1389.48 1212.72 L1390.06 1212.72 L1390.65 1212.72 L1391.24 1212.72 L1391.82 1212.72 L1392.41 1212.72 L1393 1212.72 L1393.58 1212.72 L1394.17 1212.72 L1394.75 1212.72 L1395.34 1212.72 L1395.93 1212.72 L1396.51 1212.72 L1397.1 1212.72 L1397.69 1212.72 L1398.27 1212.72 L1398.86 1212.72 L1399.45 1212.72 L1400.03 1212.72 L1400.62 1212.72 L1401.21 1212.72 L1401.79 1212.72 L1402.38 1212.72 L1402.96 1212.72 L1403.55 1212.72 L1404.14 1212.72 L1404.72 1212.72 L1405.31 1212.72 L1405.9 1212.72 L1406.48 1212.72 L1407.07 1212.72 L1407.66 1212.72 L1408.24 1212.72 L1408.83 1212.72 L1409.42 1212.72 L1410 1212.72 L1410.59 1212.72 L1411.17 1212.72 L1411.76 1212.72 L1412.35 1212.72 L1412.93 1212.72 L1413.52 1212.72 L1414.11 1212.72 L1414.69 1212.72 L1415.28 1212.72 L1415.87 1212.72 L1416.45 1212.72 L1417.04 1212.72 L1417.63 1212.72 L1418.21 1212.72 L1418.8 1212.72 L1419.38 1212.72 L1419.97 1212.72 L1420.56 1212.72 L1421.14 1212.72 L1421.73 1212.72 L1422.32 1212.72 L1422.9 1212.72 L1423.49 1212.72 L1424.08 1212.72 L1424.66 1212.72 L1425.25 1212.72 L1425.83 1212.72 L1426.42 1212.72 L1427.01 1212.72 L1427.59 1212.72 L1428.18 1212.72 L1428.77 1212.72 L1429.35 1212.72 L1429.94 1212.72 L1430.53 1212.72 L1431.11 1212.72 L1431.7 1212.72 L1432.29 1212.72 L1432.87 1212.72 L1433.46 1212.72 L1434.04 1212.72 L1434.63 1212.72 L1435.22 1212.72 L1435.8 1212.72 L1436.39 1212.72 L1436.98 1212.72 L1437.56 1212.72 L1438.15 1212.72 L1438.74 1212.72 L1439.32 1212.72 L1439.91 1212.72 L1440.5 1212.72 L1441.08 1212.72 L1441.67 1212.72 L1442.25 1212.72 L1442.84 1212.72 L1443.43 1212.72 L1444.01 1212.72 L1444.6 1212.72 L1445.19 1212.72 L1445.77 1212.72 L1446.36 1212.72 L1446.95 1212.72 L1447.53 1212.72 L1448.12 1212.72 L1448.7 1212.72 L1449.29 1212.72 L1449.88 1212.72 L1450.46 1212.72 L1451.05 1212.72 L1451.64 1212.72 L1452.22 1212.72 L1452.81 1212.72 L1453.4 1212.72 L1453.98 1212.72 L1454.57 1212.72 L1455.16 1212.72 L1455.74 1212.72 L1456.33 1212.72 L1456.91 1212.72 L1457.5 1212.72 L1458.09 1212.72 L1458.67 1212.72 L1459.26 1212.72 L1459.85 1212.72 L1460.43 1212.72 L1461.02 1212.72 L1461.61 1212.72 L1462.19 1212.72 L1462.78 1212.72 L1463.37 1212.72 L1463.95 1212.72 L1464.54 1212.72 L1465.12 1212.72 L1465.71 1212.72 L1466.3 1212.72 L1466.88 1212.72 L1467.47 1212.72 L1468.06 1212.72 L1468.64 1212.72 L1469.23 1212.72 L1469.82 1212.72 L1470.4 1212.72 L1470.99 1212.72 L1471.57 1212.72 L1472.16 1212.72 L1472.75 1212.72 L1473.33 1212.72 L1473.92 1212.72 L1474.51 1212.72 L1475.09 1212.72 L1475.68 1212.72 L1476.27 1212.72 L1476.85 1212.72 L1477.44 1212.72 L1478.03 1212.72 L1478.61 1212.72 L1479.2 1212.72 L1479.78 1212.72 L1480.37 1212.72 L1480.96 1212.72 L1481.54 1212.72 L1482.13 1212.72 L1482.72 1212.72 L1483.3 1212.72 L1483.89 1212.72 L1484.48 1212.72 L1485.06 1212.72 L1485.65 1212.72 L1486.24 1212.72 L1486.82 1212.72 L1487.41 1212.72 L1487.99 1212.72 L1488.58 1212.72 L1489.17 1212.72 L1489.75 1212.72 L1490.34 1212.72 L1490.93 1212.72 L1491.51 1212.72 L1492.1 1212.72 L1492.69 1212.72 L1493.27 1212.72 L1493.86 1212.72 L1494.45 1212.72 L1495.03 1212.72 L1495.62 1212.72 L1496.2 1212.72 L1496.79 1212.72 L1497.38 1212.72 L1497.96 1212.72 L1498.55 1212.72 L1499.14 1212.72 L1499.72 1212.72 L1500.31 1212.72 L1500.9 1212.72 L1501.48 1212.72 L1502.07 1212.72 L1502.65 1212.72 L1503.24 1212.72 L1503.83 1212.72 L1504.41 1212.72 L1505 1212.72 L1505.59 1212.72 L1506.17 1212.72 L1506.76 1212.72 L1507.35 1212.72 L1507.93 1212.72 L1508.52 1212.72 L1509.11 1212.72 L1509.69 1212.72 L1510.28 1212.72 L1510.86 1212.72 L1511.45 1212.72 L1512.04 1212.72 L1512.62 1212.72 L1513.21 1212.72 L1513.8 1212.72 L1514.38 1212.72 L1514.97 1212.72 L1515.56 1212.72 L1516.14 1212.72 L1516.73 1212.72 L1517.32 1212.72 L1517.9 1212.72 L1518.49 1212.72 L1519.07 1212.72 L1519.66 1212.72 L1520.25 1212.72 L1520.83 1212.72 L1521.42 1212.72 L1522.01 1212.72 L1522.59 1212.72 L1523.18 1212.72 L1523.77 1212.72 L1524.35 1212.72 L1524.94 1212.72 L1525.52 1212.72 L1526.11 1212.72 L1526.7 1212.72 L1527.28 1212.72 L1527.87 1212.72 L1528.46 1212.72 L1529.04 1212.72 L1529.63 1212.72 L1530.22 1212.72 L1530.8 1212.72 L1531.39 1212.72 L1531.98 1212.72 L1532.56 1212.72 L1533.15 1212.72 L1533.73 1212.72 L1534.32 1212.72 L1534.91 1212.72 L1535.49 1212.72 L1536.08 1212.72 L1536.67 1212.72 L1537.25 1212.72 L1537.84 1212.72 L1538.43 1212.72 L1539.01 1212.72 L1539.6 1212.72 L1540.19 1212.72 L1540.77 1212.72 L1541.36 1212.72 L1541.94 1212.72 L1542.53 1212.72 L1543.12 1212.72 L1543.7 1212.72 L1544.29 1212.72 L1544.88 1212.72 L1545.46 1212.72 L1546.05 1212.72 L1546.64 1212.72 L1547.22 1212.72 L1547.81 1212.72 L1548.4 1212.72 L1548.98 1212.72 L1549.57 1212.72 L1550.15 1212.72 L1550.74 1212.72 L1551.33 1212.72 L1551.91 1212.72 L1552.5 1212.72 L1553.09 1212.72 L1553.67 1212.72 L1554.26 1212.72 L1554.85 1212.72 L1555.43 1212.72 L1556.02 1212.72 L1556.6 1212.72 L1557.19 1212.72 L1557.78 1212.72 L1558.36 1212.72 L1558.95 1212.72 L1559.54 1212.72 L1560.12 1212.72 L1560.71 1212.72 L1561.3 1212.72 L1561.88 1212.72 L1562.47 1212.72 L1563.06 1212.72 L1563.64 1212.72 L1564.23 1212.72 L1564.81 1212.72 L1565.4 1212.72 L1565.99 1212.72 L1566.57 1212.72 L1567.16 1212.72 L1567.75 1212.72 L1568.33 1212.72 L1568.92 1212.72 L1569.51 1212.72 L1570.09 1212.72 L1570.68 1212.72 L1571.27 1212.72 L1571.85 1212.72 L1572.44 1212.72 L1573.02 1212.72 L1573.61 1212.72 L1574.2 1212.72 L1574.78 1212.72 L1575.37 1212.72 L1575.96 1212.72 L1576.54 1212.72 L1577.13 1212.72 L1577.72 1212.72 L1578.3 1212.72 L1578.89 1212.72 L1579.47 1212.72 L1580.06 1212.72 L1580.65 1212.72 L1581.23 1212.72 L1581.82 1212.72 L1582.41 1212.72 L1582.99 1212.72 L1583.58 1212.72 L1584.17 1212.72 L1584.75 1212.72 L1585.34 1212.72 L1585.93 1212.72 L1586.51 1212.72 L1587.1 1212.72 L1587.68 1212.72 L1588.27 1212.72 L1588.86 1212.72 L1589.44 1212.72 L1590.03 1212.72 L1590.62 1212.72 L1591.2 1212.72 L1591.79 1212.72 L1592.38 1212.72 L1592.96 1212.72 L1593.55 1212.72 L1594.14 1212.72 L1594.72 1212.72 L1595.31 1212.72 L1595.89 1212.72 L1596.48 1212.72 L1597.07 1212.72 L1597.65 1212.72 L1598.24 1212.72 L1598.83 1212.72 L1599.41 1212.72 L1600 1212.72 L1600.59 1212.72 L1601.17 1212.72 L1601.76 1212.72 L1602.34 1212.72 L1602.93 1212.72 L1603.52 1212.72 L1604.1 1212.72 L1604.69 1212.72 L1605.28 1212.72 L1605.86 1212.72 L1606.45 1212.72 L1607.04 1212.72 L1607.62 1212.72 L1608.21 1212.72 L1608.8 1212.72 L1609.38 1212.72 L1609.97 1212.72 L1610.55 1212.72 L1611.14 1212.72 L1611.73 1212.72 L1612.31 1212.72 L1612.9 1212.72 L1613.49 1212.72 L1614.07 1212.72 L1614.66 1212.72 L1615.25 1212.72 L1615.83 1212.72 L1616.42 1212.72 L1617.01 1212.72 L1617.59 1212.72 L1618.18 1212.72 L1618.76 1212.72 L1619.35 1212.72 L1619.94 1212.72 L1620.52 1212.72 L1621.11 1212.72 L1621.7 1212.72 L1622.28 1212.72 L1622.87 1212.72 L1623.46 1212.72 L1624.04 1212.72 L1624.63 1212.72 L1625.22 1212.72 L1625.8 1212.72 L1626.39 1212.72 L1626.97 1212.72 L1627.56 1212.72 L1628.15 1212.72 L1628.73 1212.72 L1629.32 1212.72 L1629.91 1212.72 L1630.49 1212.72 L1631.08 1212.72 L1631.67 1212.72 L1632.25 1212.72 L1632.84 1212.72 L1633.42 1212.72 L1634.01 1212.72 L1634.6 1212.72 L1635.18 1212.72 L1635.77 1212.72 L1636.36 1212.72 L1636.94 1212.72 L1637.53 1212.72 L1638.12 1212.72 L1638.7 1212.72 L1639.29 1212.72 L1639.88 1212.72 L1640.46 1212.72 L1641.05 1212.72 L1641.63 1212.72 L1642.22 1212.72 L1642.81 1212.72 L1643.39 1212.72 L1643.98 1212.72 L1644.57 1212.72 L1645.15 1212.72 L1645.74 1212.72 L1646.33 1212.72 L1646.91 1212.72 L1647.5 1212.72 L1648.09 1212.72 L1648.67 1212.72 L1649.26 1212.72 L1649.84 1212.72 L1650.43 1212.72 L1651.02 1212.72 L1651.6 1212.72 L1652.19 1212.72 L1652.78 1212.72 L1653.36 1212.72 L1653.95 1212.72 L1654.54 1212.72 L1655.12 1212.72 L1655.71 1212.72 L1656.29 1212.72 L1656.88 1212.72 L1657.47 1212.72 L1658.05 1212.72 L1658.64 1212.72 L1659.23 1212.72 L1659.81 1212.72 L1660.4 1212.72 L1660.99 1212.72 L1661.57 1212.72 L1662.16 1212.72 L1662.75 1212.72 L1663.33 1212.72 L1663.92 1212.72 L1664.5 1212.72 L1665.09 1212.72 L1665.68 1212.72 L1666.26 1212.72 L1666.85 1212.72 L1667.44 1212.72 L1668.02 1212.72 L1668.61 1212.72 L1669.2 1212.72 L1669.78 1212.72 L1670.37 1212.72 L1670.96 1212.72 L1671.54 1212.72 L1672.13 1212.72 L1672.71 1212.72 L1673.3 1212.72 L1673.89 1212.72 L1674.47 1212.72 L1675.06 1212.72 L1675.65 1212.72 L1676.23 1212.72 L1676.82 1212.72 L1677.41 1212.72 L1677.99 1212.72 L1678.58 1212.72 L1679.17 1212.72 L1679.75 1212.72 L1680.34 1212.72 L1680.92 1212.72 L1681.51 1212.72 L1682.1 1212.72 L1682.68 1212.72 L1683.27 1212.72 L1683.86 1212.72 L1684.44 1212.72 L1685.03 1212.72 L1685.62 1212.72 L1686.2 1212.72 L1686.79 1212.72 L1687.37 1212.72 L1687.96 1212.72 L1688.55 1212.72 L1689.13 1212.72 L1689.72 1212.72 L1690.31 1212.72 L1690.89 1212.72 L1691.48 1212.72 L1692.07 1212.72 L1692.65 1212.72 L1693.24 1212.72 L1693.83 1212.72 L1694.41 1212.72 L1695 1212.72 L1695.58 1212.72 L1696.17 1212.72 L1696.76 1212.72 L1697.34 1212.72 L1697.93 1212.72 L1698.52 1212.72 L1699.1 1212.72 L1699.69 1212.72 L1700.28 1212.72 L1700.86 1212.72 L1701.45 1212.72 L1702.04 1212.72 L1702.62 1212.72 L1703.21 1212.72 L1703.79 1212.72 L1704.38 1212.72 L1704.97 1212.72 L1705.55 1212.72 L1706.14 1212.72 L1706.73 1212.72 L1707.31 1212.72 L1707.9 1212.72 L1708.49 1212.72 L1709.07 1212.72 L1709.66 1212.72 L1710.24 1212.72 L1710.83 1212.72 L1711.42 1212.72 L1712 1212.72 L1712.59 1212.72 L1713.18 1212.72 L1713.76 1212.72 L1714.35 1212.72 L1714.94 1212.72 L1715.52 1212.72 L1716.11 1212.72 L1716.7 1212.72 L1717.28 1212.72 L1717.87 1212.72 L1718.45 1212.72 L1719.04 1212.72 L1719.63 1212.72 L1720.21 1212.72 L1720.8 1212.72 L1721.39 1212.72 L1721.97 1212.72 L1722.56 1212.72 L1723.15 1212.72 L1723.73 1212.72 L1724.32 1212.72 L1724.91 1212.72 L1725.49 1212.72 L1726.08 1212.72 L1726.66 1212.72 L1727.25 1212.72 L1727.84 1212.72 L1728.42 1212.72 L1729.01 1212.72 L1729.6 1212.72 L1730.18 1212.72 L1730.77 1212.72 L1731.36 1212.72 L1731.94 1212.72 L1732.53 1212.72 L1733.11 1212.72 L1733.7 1212.72 L1734.29 1212.72 L1734.87 1212.72 L1735.46 1212.72 L1736.05 1212.72 L1736.63 1212.72 L1737.22 1212.72 L1737.81 1212.72 L1738.39 1212.72 L1738.98 1212.72 L1739.57 1212.72 L1740.15 1212.72 L1740.74 1212.72 L1741.32 1212.72 L1741.91 1212.72 L1742.5 1212.72 L1743.08 1212.72 L1743.67 1212.72 L1744.26 1212.72 L1744.84 1212.72 L1745.43 1212.72 L1746.02 1212.72 L1746.6 1212.72 L1747.19 1212.72 L1747.78 1212.72 L1748.36 1212.72 L1748.95 1212.72 L1749.53 1212.72 L1750.12 1212.72 L1750.71 1212.72 L1751.29 1212.72 L1751.88 1212.72 L1752.47 1212.72 L1753.05 1212.72 L1753.64 1212.72 L1754.23 1212.72 L1754.81 1212.72 L1755.4 1212.72 L1755.99 1212.72 L1756.57 1212.72 L1757.16 1212.72 L1757.74 1212.72 L1758.33 1212.72 L1758.92 1212.72 L1759.5 1212.72 L1760.09 1212.72 L1760.68 1212.72 L1761.26 1212.72 L1761.85 1212.72 L1762.44 1212.72 L1763.02 1212.72 L1763.61 1212.72 L1764.19 1212.72 L1764.78 1212.72 L1765.37 1212.72 L1765.95 1212.72 L1766.54 1212.72 L1767.13 1212.72 L1767.71 1212.72 L1768.3 1212.72 L1768.89 1212.72 L1769.47 1212.72 L1770.06 1212.72 L1770.65 1212.72 L1771.23 1212.72 L1771.82 1212.72 L1772.4 1212.72 L1772.99 1212.72 L1773.58 1212.72 L1774.16 1212.72 L1774.75 1212.72 L1775.34 1212.72 L1775.92 1212.72 L1776.51 1212.72 L1777.1 1212.72 L1777.68 1212.72 L1778.27 1212.72 L1778.86 1212.72 L1779.44 1212.72 L1780.03 1212.72 L1780.61 1212.72 L1781.2 1212.72 L1781.79 1212.72 L1782.37 1212.72 L1782.96 1212.72 L1783.55 1212.72 L1784.13 1212.72 L1784.72 1212.72 L1785.31 1212.72 L1785.89 1212.72 L1786.48 1212.72 L1787.06 1212.72 L1787.65 1212.72 L1788.24 1212.72 L1788.82 1212.72 L1789.41 1212.72 L1790 1212.72 L1790.58 1212.72 L1791.17 1212.72 L1791.76 1212.72 L1792.34 1212.72 L1792.93 1212.72 L1793.52 1212.72 L1794.1 1212.72 L1794.69 1212.72 L1795.27 1212.72 L1795.86 1212.72 L1796.45 1212.72 L1797.03 1212.72 L1797.62 1212.72 L1798.21 1212.72 L1798.79 1212.72 L1799.38 1212.72 L1799.97 1212.72 L1800.55 1212.72 L1801.14 1212.72 L1801.73 1212.72 L1802.31 1212.72 L1802.9 1212.72 L1803.48 1212.72 L1804.07 1212.72 L1804.66 1212.72 L1805.24 1212.72 L1805.83 1212.72 L1806.42 1212.72 L1807 1212.72 L1807.59 1212.72 L1808.18 1212.72 L1808.76 1212.72 L1809.35 1212.72 L1809.94 1212.72 L1810.52 1212.72 L1811.11 1212.72 L1811.69 1212.72 L1812.28 1212.72 L1812.87 1212.72 L1813.45 1212.72 L1814.04 1212.72 L1814.63 1212.72 L1815.21 1212.72 L1815.8 1212.72 L1816.39 1212.72 L1816.97 1212.72 L1817.56 1212.72 L1818.14 1212.72 L1818.73 1212.72 L1819.32 1212.72 L1819.9 1212.72 L1820.49 1212.72 L1821.08 1212.72 L1821.66 1212.72 L1822.25 1212.72 L1822.84 1212.72 L1823.42 1212.72 L1824.01 1212.72 L1824.6 1212.72 L1825.18 1212.72 L1825.77 1212.72 L1826.35 1212.72 L1826.94 1212.72 L1827.53 1212.72 L1828.11 1212.72 L1828.7 1212.72 L1829.29 1212.72 L1829.87 1212.72 L1830.46 1212.72 L1831.05 1212.72 L1831.63 1212.72 L1832.22 1212.72 L1832.81 1212.72 L1833.39 1212.72 L1833.98 1212.72 L1834.56 1212.72 L1835.15 1212.72 L1835.74 1212.72 L1836.32 1212.72 L1836.91 1212.72 L1837.5 1212.72 L1838.08 1212.72 L1838.67 1212.72 L1839.26 1212.72 L1839.84 1212.72 L1840.43 1212.72 L1841.01 1212.72 L1841.6 1212.72 L1842.19 1212.72 L1842.77 1212.72 L1843.36 1212.72 L1843.95 1212.72 L1844.53 1212.72 L1845.12 1212.72 L1845.71 1212.72 L1846.29 1212.72 L1846.88 1212.72 L1847.47 1212.72 L1848.05 1212.72 L1848.64 1212.72 L1849.22 1212.72 L1849.81 1212.72 L1850.4 1212.72 L1850.98 1212.72 L1851.57 1212.72 L1852.16 1212.72 L1852.74 1212.72 L1853.33 1212.72 L1853.92 1212.72 L1854.5 1212.72 L1855.09 1212.72 L1855.68 1212.72 L1856.26 1212.72 L1856.85 1212.72 L1857.43 1212.72 L1858.02 1212.72 L1858.61 1212.72 L1859.19 1212.72 L1859.78 1212.72 L1860.37 1212.72 L1860.95 1212.72 L1861.54 1212.72 L1862.13 1212.72 L1862.71 1212.72 L1863.3 1212.72 L1863.88 1212.72 L1864.47 1212.72 L1865.06 1212.72 L1865.64 1212.72 L1866.23 1212.72 L1866.82 1212.72 L1867.4 1212.72 L1867.99 1212.72 L1868.58 1212.72 L1869.16 1212.72 L1869.75 1212.72 L1870.34 1212.72 L1870.92 1212.72 L1871.51 1212.72 L1872.09 1212.72 L1872.68 1212.72 L1873.27 1212.72 L1873.85 1212.72 L1874.44 1212.72 L1875.03 1212.72 L1875.61 1212.72 L1876.2 1212.72 L1876.79 1212.72 L1877.37 1212.72 L1877.96 1212.72 L1878.55 1212.72 L1879.13 1212.72 L1879.72 1212.72 L1880.3 1212.72 L1880.89 1212.72 L1881.48 1212.72 L1882.06 1212.72 L1882.65 1212.72 L1883.24 1212.72 L1883.82 1212.72 L1884.41 1212.72 L1885 1212.72 L1885.58 1212.72 L1886.17 1212.72 L1886.76 1212.72 L1887.34 1212.72 L1887.93 1212.72 L1888.51 1212.72 L1889.1 1212.72 L1889.69 1212.72 L1890.27 1212.72 L1890.86 1212.72 L1891.45 1212.72 L1892.03 1212.72 L1892.62 1212.72 L1893.21 1212.72 L1893.79 1212.72 L1894.38 1212.72 L1894.96 1212.72 L1895.55 1212.72 L1896.14 1212.72 L1896.72 1212.72 L1897.31 1212.72 L1897.9 1212.72 L1898.48 1212.72 L1899.07 1212.72 L1899.66 1212.72 L1900.24 1212.72 L1900.83 1212.72 L1901.42 1212.72 L1902 1212.72 L1902.59 1212.72 L1903.17 1212.72 L1903.76 1212.72 L1904.35 1212.72 L1904.93 1212.72 L1905.52 1212.72 L1906.11 1212.72 L1906.69 1212.72 L1907.28 1212.72 L1907.87 1212.72 L1908.45 1212.72 L1909.04 1212.72 L1909.63 1212.72 L1910.21 1212.72 L1910.8 1212.72 L1911.38 1212.72 L1911.97 1212.72 L1912.56 1212.72 L1913.14 1212.72 L1913.73 1212.72 L1914.32 1212.72 L1914.9 1212.72 L1915.49 1212.72 L1916.08 1212.72 L1916.66 1212.72 L1917.25 1212.72 L1917.83 1212.72 L1918.42 1212.72 L1919.01 1212.72 L1919.59 1212.72 L1920.18 1212.72 L1920.77 1212.72 L1921.35 1212.72 L1921.94 1212.72 L1922.53 1212.72 L1923.11 1212.72 L1923.7 1212.72 L1924.29 1212.72 L1924.87 1212.72 L1925.46 1212.72 L1926.04 1212.72 L1926.63 1212.72 L1927.22 1212.72 L1927.8 1212.72 L1928.39 1212.72 L1928.98 1212.72 L1929.56 1212.72 L1930.15 1212.72 L1930.74 1212.72 L1931.32 1212.72 L1931.91 1212.72 L1932.5 1212.72 L1933.08 1212.72 L1933.67 1212.72 L1934.25 1212.72 L1934.84 1212.72 L1935.43 1212.72 L1936.01 1212.72 L1936.6 1212.72 L1937.19 1212.72 L1937.77 1212.72 L1938.36 1212.72 L1938.95 1212.72 L1939.53 1212.72 L1940.12 1212.72 L1940.71 1212.72 L1941.29 1212.72 L1941.88 1212.72 L1942.46 1212.72 L1943.05 1212.72 L1943.64 1212.72 L1944.22 1212.72 L1944.81 1212.72 L1945.4 1212.72 L1945.98 1212.72 L1946.57 1212.72 L1947.16 1212.72 L1947.74 1212.72 L1948.33 1212.72 L1948.91 1212.72 L1949.5 1212.72 L1950.09 1212.72 L1950.67 1212.72 L1951.26 1212.72 L1951.85 1212.72 L1952.43 1212.72 L1953.02 1212.72 L1953.61 1212.72 L1954.19 1212.72 L1954.78 1212.72 L1955.37 1212.72 L1955.95 1212.72 L1956.54 1212.72 L1957.12 1212.72 L1957.71 1212.72 L1958.3 1212.72 L1958.88 1212.72 L1959.47 1212.72 L1960.06 1212.72 L1960.64 1212.72 L1961.23 1212.72 L1961.82 1212.72 L1962.4 1212.72 L1962.99 1212.72 L1963.58 1212.72 L1964.16 1212.72 L1964.75 1212.72 L1965.33 1212.72 L1965.92 1212.72 L1966.51 1212.72 L1967.09 1212.72 L1967.68 1212.72 L1968.27 1212.72 L1968.85 1212.72 L1969.44 1212.72 L1970.03 1212.72 L1970.61 1212.72 L1971.2 1212.72 L1971.78 1212.72 L1972.37 1212.72 L1972.96 1212.72 L1973.54 1212.72 L1974.13 1212.72 L1974.72 1212.72 L1975.3 1212.72 L1975.89 1212.72 L1976.48 1212.72 L1977.06 1212.72 L1977.65 1212.72 L1978.24 1212.72 L1978.82 1212.72 L1979.41 1212.72 L1979.99 1212.72 L1980.58 1212.72 L1981.17 1212.72 L1981.75 1212.72 L1982.34 1212.72 L1982.93 1212.72 L1983.51 1212.72 L1984.1 1212.72 L1984.69 1212.72 L1985.27 1212.72 L1985.86 1212.72 L1986.45 1212.72 L1987.03 1212.72 L1987.62 1212.72 L1988.2 1212.72 L1988.79 1212.72 L1989.38 1212.72 L1989.96 1212.72 L1990.55 1212.72 L1991.14 1212.72 L1991.72 1212.72 L1992.31 1212.72 L1992.9 1212.72 L1993.48 1212.72 L1994.07 1212.72 L1994.65 1212.72 L1995.24 1212.72 L1995.83 1212.72 L1996.41 1212.72 L1997 1212.72 L1997.59 1212.72 L1998.17 1212.72 L1998.76 1212.72 L1999.35 1212.72 L1999.93 1212.72 L2000.52 1212.72 L2001.11 1212.72 L2001.69 1212.72 L2002.28 1212.72 L2002.86 1212.72 L2003.45 1212.72 L2004.04 1212.72 L2004.62 1212.72 L2005.21 1212.72 L2005.8 1212.72 L2006.38 1212.72 L2006.97 1212.72 L2007.56 1212.72 L2008.14 1212.72 L2008.73 1212.72 L2009.32 1212.72 L2009.9 1212.72 L2010.49 1212.72 L2011.07 1212.72 L2011.66 1212.72 L2012.25 1212.72 L2012.83 1212.72 L2013.42 1212.72 L2014.01 1212.72 L2014.59 1212.72 L2015.18 1212.72 L2015.77 1212.72 L2016.35 1212.72 L2016.94 1212.72 L2017.53 1212.72 L2018.11 1212.72 L2018.7 1212.72 L2019.28 1212.72 L2019.87 1212.72 L2020.46 1212.72 L2021.04 1212.72 L2021.63 1212.72 L2022.22 1212.72 L2022.8 1212.72 L2023.39 1212.72 L2023.98 1212.72 L2024.56 1212.72 L2025.15 1212.72 L2025.73 1212.72 L2026.32 1212.72 L2026.91 1212.72 L2027.49 1212.72 L2028.08 1212.72 L2028.67 1212.72 L2029.25 1212.72 L2029.84 1212.72 L2030.43 1212.72 L2031.01 1212.72 L2031.6 1212.72 L2032.19 1212.72 L2032.77 1212.72 L2033.36 1212.72 L2033.94 1212.72 L2034.53 1212.72 L2035.12 1212.72 L2035.7 1212.72 L2036.29 1212.72 L2036.88 1212.72 L2037.46 1212.72 L2038.05 1212.72 L2038.64 1212.72 L2039.22 1212.72 L2039.81 1212.72 L2040.4 1212.72 L2040.98 1212.72 L2041.57 1212.72 L2042.15 1212.72 L2042.74 1212.72 L2043.33 1212.72 L2043.91 1212.72 L2044.5 1212.72 L2045.09 1212.72 L2045.67 1212.72 L2046.26 1212.72 L2046.85 1212.72 L2047.43 1212.72 L2048.02 1212.72 L2048.6 1212.72 L2049.19 1212.72 L2049.78 1212.72 L2050.36 1212.72 L2050.95 1212.72 L2051.54 1212.72 L2052.12 1212.72 L2052.71 1212.72 L2053.3 1212.72 L2053.88 1212.72 L2054.47 1212.72 L2055.06 1212.72 L2055.64 1212.72 L2056.23 1212.72 L2056.81 1212.72 L2057.4 1212.72 L2057.99 1212.72 L2058.57 1212.72 L2059.16 1212.72 L2059.75 1212.72 L2060.33 1212.72 L2060.92 1212.72 L2061.51 1212.72 L2062.09 1212.72 L2062.68 1212.72 L2063.27 1212.72 L2063.85 1212.72 L2064.44 1212.72 L2065.02 1212.72 L2065.61 1212.72 L2066.2 1212.72 L2066.78 1212.72 L2067.37 1212.72 L2067.96 1212.72 L2068.54 1212.72 L2069.13 1212.72 L2069.72 1212.72 L2070.3 1212.72 L2070.89 1212.72 L2071.48 1212.72 L2072.06 1212.72 L2072.65 1212.72 L2073.23 1212.72 L2073.82 1212.72 L2074.41 1212.72 L2074.99 1212.72 L2075.58 1212.72 L2076.17 1212.72 L2076.75 1212.72 L2077.34 1212.72 L2077.93 1212.72 L2078.51 1212.72 L2079.1 1212.72 L2079.68 1212.72 L2080.27 1212.72 L2080.86 1212.72 L2081.44 1212.72 L2082.03 1212.72 L2082.62 1212.72 L2083.2 1212.72 L2083.79 1212.72 L2084.38 1212.72 L2084.96 1212.72 L2085.55 1212.72 L2086.14 1212.72 L2086.72 1212.72 L2087.31 1212.72 L2087.89 1212.72 L2088.48 1212.72 L2089.07 1212.72 L2089.65 1212.72 L2090.24 1212.72 L2090.83 1212.72 L2091.41 1212.72 L2092 1212.72 L2092.59 1212.72 L2093.17 1212.72 L2093.76 1212.72 L2094.35 1212.72 L2094.93 1212.72 L2095.52 1212.72 L2096.1 1212.72 L2096.69 1212.72 L2097.28 1212.72 L2097.86 1212.72 L2098.45 1212.72 L2099.04 1212.72 L2099.62 1212.72 L2100.21 1212.72 L2100.8 1212.72 L2101.38 1212.72 L2101.97 1212.72 L2102.55 1212.72 L2103.14 1212.72 L2103.73 1212.72 L2104.31 1212.72 L2104.9 1212.72 L2105.49 1212.72 L2106.07 1212.72 L2106.66 1212.72 L2107.25 1212.72 L2107.83 1212.72 L2108.42 1212.72 L2109.01 1212.72 L2109.59 1212.72 L2110.18 1212.72 L2110.76 1212.72 L2111.35 1212.72 L2111.94 1212.72 L2112.52 1212.72 L2113.11 1212.72 L2113.7 1212.72 L2114.28 1212.72 L2114.87 1212.72 L2115.46 1212.72 L2116.04 1212.72 L2116.63 1212.72 L2117.22 1212.72 L2117.8 1212.72 L2118.39 1212.72 L2118.97 1212.72 L2119.56 1212.72 L2120.15 1212.72 L2120.73 1212.72 L2121.32 1212.72 L2121.91 1212.72 L2122.49 1212.72 L2123.08 1212.72 L2123.67 1212.72 L2124.25 1212.72 L2124.84 1212.72 L2125.42 1212.72 L2126.01 1212.72 L2126.6 1212.72 L2127.18 1212.72 L2127.77 1212.72 L2128.36 1212.72 L2128.94 1212.72 L2129.53 1212.72 L2130.12 1212.72 L2130.7 1212.72 L2131.29 1212.72 L2131.88 1212.72 L2132.46 1212.72 L2133.05 1212.72 L2133.63 1212.72 L2134.22 1212.72 L2134.81 1212.72 L2135.39 1212.72 L2135.98 1212.72 L2136.57 1212.72 L2137.15 1212.72 L2137.74 1212.72 L2138.33 1212.72 L2138.91 1212.72 L2139.5 1212.72 L2140.09 1212.72 L2140.67 1212.72 L2141.26 1212.72 L2141.84 1212.72 L2142.43 1212.72 L2143.02 1212.72 L2143.6 1212.72 L2144.19 1212.72 L2144.78 1212.72 L2145.36 1212.72 L2145.95 1212.72 L2146.54 1212.72 L2147.12 1212.72 L2147.71 1212.72 L2148.3 1212.72 L2148.88 1212.72 L2149.47 1212.72 L2150.05 1212.72 L2150.64 1212.72 L2151.23 1212.72 L2151.81 1212.72 L2152.4 1212.72 L2152.99 1212.72 L2153.57 1212.72 L2154.16 1212.72 L2154.75 1212.72 L2155.33 1212.72 L2155.92 1212.72 L2156.5 1212.72 L2157.09 1212.72 L2157.68 1212.72 L2158.26 1212.72 L2158.26 1212.47 L2157.68 1212.47 L2157.09 1212.47 L2156.5 1212.47 L2155.92 1212.47 L2155.33 1212.47 L2154.75 1212.47 L2154.16 1212.47 L2153.57 1212.47 L2152.99 1212.47 L2152.4 1212.47 L2151.81 1212.47 L2151.23 1212.47 L2150.64 1212.47 L2150.05 1212.47 L2149.47 1212.47 L2148.88 1212.47 L2148.3 1212.47 L2147.71 1212.47 L2147.12 1212.47 L2146.54 1212.47 L2145.95 1212.47 L2145.36 1212.47 L2144.78 1212.47 L2144.19 1212.47 L2143.6 1212.47 L2143.02 1212.47 L2142.43 1212.47 L2141.84 1212.47 L2141.26 1212.47 L2140.67 1212.47 L2140.09 1212.47 L2139.5 1212.47 L2138.91 1212.47 L2138.33 1212.47 L2137.74 1212.47 L2137.15 1212.47 L2136.57 1212.47 L2135.98 1212.47 L2135.39 1212.47 L2134.81 1212.47 L2134.22 1212.47 L2133.63 1212.47 L2133.05 1212.47 L2132.46 1212.47 L2131.88 1212.47 L2131.29 1212.47 L2130.7 1212.47 L2130.12 1212.47 L2129.53 1212.47 L2128.94 1212.47 L2128.36 1212.47 L2127.77 1212.47 L2127.18 1212.47 L2126.6 1212.47 L2126.01 1212.47 L2125.42 1212.47 L2124.84 1212.47 L2124.25 1212.47 L2123.67 1212.47 L2123.08 1212.47 L2122.49 1212.47 L2121.91 1212.47 L2121.32 1212.47 L2120.73 1212.47 L2120.15 1212.47 L2119.56 1212.47 L2118.97 1212.47 L2118.39 1212.47 L2117.8 1212.47 L2117.22 1212.47 L2116.63 1212.47 L2116.04 1212.47 L2115.46 1212.47 L2114.87 1212.47 L2114.28 1212.47 L2113.7 1212.47 L2113.11 1212.47 L2112.52 1212.47 L2111.94 1212.47 L2111.35 1212.47 L2110.76 1212.47 L2110.18 1212.47 L2109.59 1212.47 L2109.01 1212.47 L2108.42 1212.47 L2107.83 1212.47 L2107.25 1212.47 L2106.66 1212.47 L2106.07 1212.47 L2105.49 1212.47 L2104.9 1212.47 L2104.31 1212.47 L2103.73 1212.47 L2103.14 1212.47 L2102.55 1212.47 L2101.97 1212.47 L2101.38 1212.47 L2100.8 1212.47 L2100.21 1212.47 L2099.62 1212.47 L2099.04 1212.47 L2098.45 1212.47 L2097.86 1212.47 L2097.28 1212.47 L2096.69 1212.47 L2096.1 1212.47 L2095.52 1212.47 L2094.93 1212.47 L2094.35 1212.47 L2093.76 1212.47 L2093.17 1212.47 L2092.59 1212.47 L2092 1212.47 L2091.41 1212.47 L2090.83 1212.47 L2090.24 1212.47 L2089.65 1212.47 L2089.07 1212.47 L2088.48 1212.47 L2087.89 1212.47 L2087.31 1212.47 L2086.72 1212.47 L2086.14 1212.47 L2085.55 1212.47 L2084.96 1212.47 L2084.38 1212.47 L2083.79 1212.47 L2083.2 1212.47 L2082.62 1212.47 L2082.03 1212.47 L2081.44 1212.47 L2080.86 1212.47 L2080.27 1212.47 L2079.68 1212.47 L2079.1 1212.47 L2078.51 1212.47 L2077.93 1212.47 L2077.34 1212.47 L2076.75 1212.47 L2076.17 1212.47 L2075.58 1212.47 L2074.99 1212.47 L2074.41 1212.47 L2073.82 1212.47 L2073.23 1212.47 L2072.65 1212.47 L2072.06 1212.47 L2071.48 1212.47 L2070.89 1212.47 L2070.3 1212.47 L2069.72 1212.47 L2069.13 1212.47 L2068.54 1212.47 L2067.96 1212.47 L2067.37 1212.47 L2066.78 1212.47 L2066.2 1212.47 L2065.61 1212.47 L2065.02 1212.47 L2064.44 1212.47 L2063.85 1212.47 L2063.27 1212.47 L2062.68 1212.47 L2062.09 1212.47 L2061.51 1212.47 L2060.92 1212.47 L2060.33 1212.47 L2059.75 1212.47 L2059.16 1212.47 L2058.57 1212.47 L2057.99 1212.47 L2057.4 1212.47 L2056.81 1212.47 L2056.23 1212.47 L2055.64 1212.47 L2055.06 1212.47 L2054.47 1212.47 L2053.88 1212.47 L2053.3 1212.47 L2052.71 1212.47 L2052.12 1212.47 L2051.54 1212.47 L2050.95 1212.47 L2050.36 1212.47 L2049.78 1212.47 L2049.19 1212.47 L2048.6 1212.47 L2048.02 1212.47 L2047.43 1212.47 L2046.85 1212.47 L2046.26 1212.47 L2045.67 1212.47 L2045.09 1212.47 L2044.5 1212.47 L2043.91 1212.47 L2043.33 1212.47 L2042.74 1212.47 L2042.15 1212.47 L2041.57 1212.47 L2040.98 1212.47 L2040.4 1212.47 L2039.81 1212.47 L2039.22 1212.47 L2038.64 1212.47 L2038.05 1212.47 L2037.46 1212.47 L2036.88 1212.47 L2036.29 1212.47 L2035.7 1212.47 L2035.12 1212.47 L2034.53 1212.47 L2033.94 1212.47 L2033.36 1212.47 L2032.77 1212.47 L2032.19 1212.47 L2031.6 1212.47 L2031.01 1212.47 L2030.43 1212.47 L2029.84 1212.47 L2029.25 1212.47 L2028.67 1212.47 L2028.08 1212.47 L2027.49 1212.47 L2026.91 1212.47 L2026.32 1212.47 L2025.73 1212.47 L2025.15 1212.47 L2024.56 1212.47 L2023.98 1212.47 L2023.39 1212.47 L2022.8 1212.47 L2022.22 1212.47 L2021.63 1212.47 L2021.04 1212.47 L2020.46 1212.47 L2019.87 1212.47 L2019.28 1212.47 L2018.7 1212.47 L2018.11 1212.47 L2017.53 1212.47 L2016.94 1212.47 L2016.35 1212.47 L2015.77 1212.47 L2015.18 1212.47 L2014.59 1212.47 L2014.01 1212.47 L2013.42 1212.47 L2012.83 1212.47 L2012.25 1212.47 L2011.66 1212.47 L2011.07 1212.47 L2010.49 1212.47 L2009.9 1212.47 L2009.32 1212.47 L2008.73 1212.47 L2008.14 1212.47 L2007.56 1212.47 L2006.97 1212.47 L2006.38 1212.47 L2005.8 1212.47 L2005.21 1212.47 L2004.62 1212.47 L2004.04 1212.47 L2003.45 1212.47 L2002.86 1212.47 L2002.28 1212.47 L2001.69 1212.47 L2001.11 1212.47 L2000.52 1212.47 L1999.93 1212.47 L1999.35 1212.47 L1998.76 1212.47 L1998.17 1212.47 L1997.59 1212.47 L1997 1212.47 L1996.41 1212.47 L1995.83 1212.47 L1995.24 1212.47 L1994.65 1212.47 L1994.07 1212.47 L1993.48 1212.47 L1992.9 1212.47 L1992.31 1212.47 L1991.72 1212.47 L1991.14 1212.47 L1990.55 1212.47 L1989.96 1212.47 L1989.38 1212.47 L1988.79 1212.47 L1988.2 1212.47 L1987.62 1212.47 L1987.03 1212.47 L1986.45 1212.47 L1985.86 1212.47 L1985.27 1212.47 L1984.69 1212.47 L1984.1 1212.47 L1983.51 1212.47 L1982.93 1212.47 L1982.34 1212.47 L1981.75 1212.47 L1981.17 1212.47 L1980.58 1212.47 L1979.99 1212.47 L1979.41 1212.47 L1978.82 1212.47 L1978.24 1212.47 L1977.65 1212.47 L1977.06 1212.47 L1976.48 1212.47 L1975.89 1212.47 L1975.3 1212.47 L1974.72 1212.47 L1974.13 1212.47 L1973.54 1212.47 L1972.96 1212.47 L1972.37 1212.47 L1971.78 1212.47 L1971.2 1212.47 L1970.61 1212.47 L1970.03 1212.47 L1969.44 1212.47 L1968.85 1212.47 L1968.27 1212.47 L1967.68 1212.47 L1967.09 1212.47 L1966.51 1212.47 L1965.92 1212.47 L1965.33 1212.47 L1964.75 1212.47 L1964.16 1212.47 L1963.58 1212.47 L1962.99 1212.47 L1962.4 1212.47 L1961.82 1212.47 L1961.23 1212.47 L1960.64 1212.47 L1960.06 1212.47 L1959.47 1212.47 L1958.88 1212.47 L1958.3 1212.47 L1957.71 1212.47 L1957.12 1212.47 L1956.54 1212.47 L1955.95 1212.47 L1955.37 1212.47 L1954.78 1212.47 L1954.19 1212.47 L1953.61 1212.47 L1953.02 1212.47 L1952.43 1212.47 L1951.85 1212.47 L1951.26 1212.47 L1950.67 1212.47 L1950.09 1212.47 L1949.5 1212.47 L1948.91 1212.47 L1948.33 1212.47 L1947.74 1212.47 L1947.16 1212.47 L1946.57 1212.47 L1945.98 1212.47 L1945.4 1212.47 L1944.81 1212.47 L1944.22 1212.47 L1943.64 1212.47 L1943.05 1212.47 L1942.46 1212.47 L1941.88 1212.47 L1941.29 1212.47 L1940.71 1212.47 L1940.12 1212.47 L1939.53 1212.47 L1938.95 1212.47 L1938.36 1212.47 L1937.77 1212.47 L1937.19 1212.47 L1936.6 1212.47 L1936.01 1212.47 L1935.43 1212.47 L1934.84 1212.47 L1934.25 1212.47 L1933.67 1212.47 L1933.08 1212.47 L1932.5 1212.47 L1931.91 1212.47 L1931.32 1212.47 L1930.74 1212.47 L1930.15 1212.47 L1929.56 1212.47 L1928.98 1212.47 L1928.39 1212.47 L1927.8 1212.47 L1927.22 1212.47 L1926.63 1212.47 L1926.04 1212.47 L1925.46 1212.47 L1924.87 1212.47 L1924.29 1212.47 L1923.7 1212.47 L1923.11 1212.47 L1922.53 1212.47 L1921.94 1212.47 L1921.35 1212.47 L1920.77 1212.47 L1920.18 1212.47 L1919.59 1212.47 L1919.01 1212.47 L1918.42 1212.47 L1917.83 1212.47 L1917.25 1212.47 L1916.66 1212.47 L1916.08 1212.47 L1915.49 1212.47 L1914.9 1212.47 L1914.32 1212.47 L1913.73 1212.47 L1913.14 1212.47 L1912.56 1212.47 L1911.97 1212.47 L1911.38 1212.47 L1910.8 1212.47 L1910.21 1212.47 L1909.63 1212.47 L1909.04 1212.47 L1908.45 1212.47 L1907.87 1212.47 L1907.28 1212.47 L1906.69 1212.47 L1906.11 1212.47 L1905.52 1212.47 L1904.93 1212.47 L1904.35 1212.47 L1903.76 1212.47 L1903.17 1212.47 L1902.59 1212.47 L1902 1212.47 L1901.42 1212.47 L1900.83 1212.47 L1900.24 1212.47 L1899.66 1212.47 L1899.07 1212.47 L1898.48 1212.47 L1897.9 1212.47 L1897.31 1212.47 L1896.72 1212.47 L1896.14 1212.47 L1895.55 1212.47 L1894.96 1212.47 L1894.38 1212.47 L1893.79 1212.47 L1893.21 1212.47 L1892.62 1212.47 L1892.03 1212.47 L1891.45 1212.47 L1890.86 1212.47 L1890.27 1212.47 L1889.69 1212.47 L1889.1 1212.47 L1888.51 1212.47 L1887.93 1212.47 L1887.34 1212.47 L1886.76 1212.47 L1886.17 1212.47 L1885.58 1212.47 L1885 1212.47 L1884.41 1212.47 L1883.82 1212.47 L1883.24 1212.47 L1882.65 1212.47 L1882.06 1212.47 L1881.48 1212.47 L1880.89 1212.47 L1880.3 1212.47 L1879.72 1212.47 L1879.13 1212.47 L1878.55 1212.47 L1877.96 1212.47 L1877.37 1212.47 L1876.79 1212.47 L1876.2 1212.47 L1875.61 1212.47 L1875.03 1212.47 L1874.44 1212.47 L1873.85 1212.47 L1873.27 1212.47 L1872.68 1212.47 L1872.09 1212.47 L1871.51 1212.47 L1870.92 1212.47 L1870.34 1212.47 L1869.75 1212.47 L1869.16 1212.47 L1868.58 1212.47 L1867.99 1212.47 L1867.4 1212.47 L1866.82 1212.47 L1866.23 1212.47 L1865.64 1212.47 L1865.06 1212.47 L1864.47 1212.47 L1863.88 1212.47 L1863.3 1212.47 L1862.71 1212.47 L1862.13 1212.47 L1861.54 1212.47 L1860.95 1212.47 L1860.37 1212.47 L1859.78 1212.47 L1859.19 1212.47 L1858.61 1212.47 L1858.02 1212.47 L1857.43 1212.47 L1856.85 1212.47 L1856.26 1212.47 L1855.68 1212.47 L1855.09 1212.47 L1854.5 1212.47 L1853.92 1212.47 L1853.33 1212.47 L1852.74 1212.47 L1852.16 1212.47 L1851.57 1212.47 L1850.98 1212.47 L1850.4 1212.47 L1849.81 1212.47 L1849.22 1212.47 L1848.64 1212.47 L1848.05 1212.47 L1847.47 1212.47 L1846.88 1212.47 L1846.29 1212.47 L1845.71 1212.47 L1845.12 1212.47 L1844.53 1212.47 L1843.95 1212.47 L1843.36 1212.47 L1842.77 1212.47 L1842.19 1212.47 L1841.6 1212.47 L1841.01 1212.47 L1840.43 1212.47 L1839.84 1212.47 L1839.26 1212.47 L1838.67 1212.47 L1838.08 1212.47 L1837.5 1212.47 L1836.91 1212.47 L1836.32 1212.47 L1835.74 1212.47 L1835.15 1212.47 L1834.56 1212.47 L1833.98 1212.47 L1833.39 1212.47 L1832.81 1212.47 L1832.22 1212.47 L1831.63 1212.47 L1831.05 1212.47 L1830.46 1212.47 L1829.87 1212.47 L1829.29 1212.47 L1828.7 1212.47 L1828.11 1212.47 L1827.53 1212.47 L1826.94 1212.47 L1826.35 1212.47 L1825.77 1212.47 L1825.18 1212.47 L1824.6 1212.47 L1824.01 1212.47 L1823.42 1212.47 L1822.84 1212.47 L1822.25 1212.47 L1821.66 1212.47 L1821.08 1212.47 L1820.49 1212.47 L1819.9 1212.47 L1819.32 1212.47 L1818.73 1212.47 L1818.14 1212.47 L1817.56 1212.47 L1816.97 1212.47 L1816.39 1212.47 L1815.8 1212.47 L1815.21 1212.47 L1814.63 1212.47 L1814.04 1212.47 L1813.45 1212.47 L1812.87 1212.47 L1812.28 1212.47 L1811.69 1212.47 L1811.11 1212.47 L1810.52 1212.47 L1809.94 1212.47 L1809.35 1212.47 L1808.76 1212.47 L1808.18 1212.47 L1807.59 1212.47 L1807 1212.47 L1806.42 1212.47 L1805.83 1212.47 L1805.24 1212.47 L1804.66 1212.47 L1804.07 1212.47 L1803.48 1212.47 L1802.9 1212.47 L1802.31 1212.47 L1801.73 1212.47 L1801.14 1212.47 L1800.55 1212.47 L1799.97 1212.47 L1799.38 1212.47 L1798.79 1212.47 L1798.21 1212.47 L1797.62 1212.47 L1797.03 1212.47 L1796.45 1212.47 L1795.86 1212.47 L1795.27 1212.47 L1794.69 1212.47 L1794.1 1212.47 L1793.52 1212.47 L1792.93 1212.47 L1792.34 1212.47 L1791.76 1212.47 L1791.17 1212.47 L1790.58 1212.47 L1790 1212.47 L1789.41 1212.47 L1788.82 1212.47 L1788.24 1212.47 L1787.65 1212.47 L1787.06 1212.47 L1786.48 1212.47 L1785.89 1212.47 L1785.31 1212.47 L1784.72 1212.47 L1784.13 1212.47 L1783.55 1212.47 L1782.96 1212.47 L1782.37 1212.47 L1781.79 1212.47 L1781.2 1212.47 L1780.61 1212.47 L1780.03 1212.47 L1779.44 1212.47 L1778.86 1212.47 L1778.27 1212.47 L1777.68 1212.47 L1777.1 1212.47 L1776.51 1212.47 L1775.92 1212.47 L1775.34 1212.47 L1774.75 1212.47 L1774.16 1212.47 L1773.58 1212.47 L1772.99 1212.47 L1772.4 1212.47 L1771.82 1212.47 L1771.23 1212.47 L1770.65 1212.47 L1770.06 1212.47 L1769.47 1212.47 L1768.89 1212.47 L1768.3 1212.47 L1767.71 1212.47 L1767.13 1212.47 L1766.54 1212.47 L1765.95 1212.47 L1765.37 1212.47 L1764.78 1212.47 L1764.19 1212.47 L1763.61 1212.47 L1763.02 1212.47 L1762.44 1212.47 L1761.85 1212.47 L1761.26 1212.47 L1760.68 1212.47 L1760.09 1212.47 L1759.5 1212.47 L1758.92 1212.47 L1758.33 1212.47 L1757.74 1212.47 L1757.16 1212.47 L1756.57 1212.47 L1755.99 1212.47 L1755.4 1212.47 L1754.81 1212.47 L1754.23 1212.47 L1753.64 1212.47 L1753.05 1212.47 L1752.47 1212.47 L1751.88 1212.47 L1751.29 1212.47 L1750.71 1212.47 L1750.12 1212.47 L1749.53 1212.47 L1748.95 1212.47 L1748.36 1212.47 L1747.78 1212.47 L1747.19 1212.47 L1746.6 1212.47 L1746.02 1212.47 L1745.43 1212.47 L1744.84 1212.47 L1744.26 1212.47 L1743.67 1212.47 L1743.08 1212.47 L1742.5 1212.47 L1741.91 1212.47 L1741.32 1212.47 L1740.74 1212.47 L1740.15 1212.47 L1739.57 1212.47 L1738.98 1212.47 L1738.39 1212.47 L1737.81 1212.47 L1737.22 1212.47 L1736.63 1212.47 L1736.05 1212.47 L1735.46 1212.47 L1734.87 1212.47 L1734.29 1212.47 L1733.7 1212.47 L1733.11 1212.47 L1732.53 1212.47 L1731.94 1212.47 L1731.36 1212.47 L1730.77 1212.47 L1730.18 1212.47 L1729.6 1212.47 L1729.01 1212.47 L1728.42 1212.47 L1727.84 1212.47 L1727.25 1212.47 L1726.66 1212.47 L1726.08 1212.47 L1725.49 1212.47 L1724.91 1212.47 L1724.32 1212.47 L1723.73 1212.47 L1723.15 1212.47 L1722.56 1212.47 L1721.97 1212.47 L1721.39 1212.47 L1720.8 1212.47 L1720.21 1212.47 L1719.63 1212.47 L1719.04 1212.47 L1718.45 1212.47 L1717.87 1212.47 L1717.28 1212.47 L1716.7 1212.47 L1716.11 1212.47 L1715.52 1212.47 L1714.94 1212.47 L1714.35 1212.47 L1713.76 1212.47 L1713.18 1212.47 L1712.59 1212.47 L1712 1212.47 L1711.42 1212.47 L1710.83 1212.47 L1710.24 1212.47 L1709.66 1212.47 L1709.07 1212.47 L1708.49 1212.47 L1707.9 1212.47 L1707.31 1212.47 L1706.73 1212.47 L1706.14 1212.47 L1705.55 1212.47 L1704.97 1212.47 L1704.38 1212.47 L1703.79 1212.47 L1703.21 1212.47 L1702.62 1212.47 L1702.04 1212.47 L1701.45 1212.47 L1700.86 1212.47 L1700.28 1212.47 L1699.69 1212.47 L1699.1 1212.47 L1698.52 1212.47 L1697.93 1212.47 L1697.34 1212.47 L1696.76 1212.47 L1696.17 1212.47 L1695.58 1212.47 L1695 1212.47 L1694.41 1212.47 L1693.83 1212.47 L1693.24 1212.47 L1692.65 1212.47 L1692.07 1212.47 L1691.48 1212.47 L1690.89 1212.47 L1690.31 1212.47 L1689.72 1212.47 L1689.13 1212.47 L1688.55 1212.47 L1687.96 1212.47 L1687.37 1212.47 L1686.79 1212.47 L1686.2 1212.47 L1685.62 1212.47 L1685.03 1212.47 L1684.44 1212.47 L1683.86 1212.47 L1683.27 1212.47 L1682.68 1212.47 L1682.1 1212.47 L1681.51 1212.47 L1680.92 1212.47 L1680.34 1212.47 L1679.75 1212.47 L1679.17 1212.47 L1678.58 1212.47 L1677.99 1212.47 L1677.41 1212.47 L1676.82 1212.47 L1676.23 1212.47 L1675.65 1212.47 L1675.06 1212.47 L1674.47 1212.47 L1673.89 1212.47 L1673.3 1212.47 L1672.71 1212.47 L1672.13 1212.47 L1671.54 1212.47 L1670.96 1212.47 L1670.37 1212.47 L1669.78 1212.47 L1669.2 1212.47 L1668.61 1212.47 L1668.02 1212.47 L1667.44 1212.47 L1666.85 1212.47 L1666.26 1212.47 L1665.68 1212.47 L1665.09 1212.47 L1664.5 1212.47 L1663.92 1212.47 L1663.33 1212.47 L1662.75 1212.47 L1662.16 1212.47 L1661.57 1212.47 L1660.99 1212.47 L1660.4 1212.47 L1659.81 1212.47 L1659.23 1212.47 L1658.64 1212.47 L1658.05 1212.47 L1657.47 1212.47 L1656.88 1212.47 L1656.29 1212.47 L1655.71 1212.47 L1655.12 1212.47 L1654.54 1212.47 L1653.95 1212.47 L1653.36 1212.47 L1652.78 1212.47 L1652.19 1212.47 L1651.6 1212.47 L1651.02 1212.47 L1650.43 1212.47 L1649.84 1212.47 L1649.26 1212.47 L1648.67 1212.47 L1648.09 1212.47 L1647.5 1212.47 L1646.91 1212.47 L1646.33 1212.47 L1645.74 1212.47 L1645.15 1212.47 L1644.57 1212.47 L1643.98 1212.47 L1643.39 1212.47 L1642.81 1212.47 L1642.22 1212.47 L1641.63 1212.47 L1641.05 1212.47 L1640.46 1212.47 L1639.88 1212.47 L1639.29 1212.47 L1638.7 1212.47 L1638.12 1212.47 L1637.53 1212.47 L1636.94 1212.47 L1636.36 1212.47 L1635.77 1212.47 L1635.18 1212.47 L1634.6 1212.47 L1634.01 1212.47 L1633.42 1212.47 L1632.84 1212.47 L1632.25 1212.47 L1631.67 1212.47 L1631.08 1212.47 L1630.49 1212.47 L1629.91 1212.47 L1629.32 1212.47 L1628.73 1212.47 L1628.15 1212.47 L1627.56 1212.47 L1626.97 1212.47 L1626.39 1212.47 L1625.8 1212.47 L1625.22 1212.47 L1624.63 1212.47 L1624.04 1212.47 L1623.46 1212.47 L1622.87 1212.47 L1622.28 1212.47 L1621.7 1212.47 L1621.11 1212.47 L1620.52 1212.47 L1619.94 1212.47 L1619.35 1212.47 L1618.76 1212.47 L1618.18 1212.47 L1617.59 1212.47 L1617.01 1212.47 L1616.42 1212.47 L1615.83 1212.47 L1615.25 1212.47 L1614.66 1212.47 L1614.07 1212.47 L1613.49 1212.47 L1612.9 1212.47 L1612.31 1212.47 L1611.73 1212.47 L1611.14 1212.47 L1610.55 1212.47 L1609.97 1212.47 L1609.38 1212.47 L1608.8 1212.47 L1608.21 1212.47 L1607.62 1212.47 L1607.04 1212.47 L1606.45 1212.47 L1605.86 1212.47 L1605.28 1212.47 L1604.69 1212.47 L1604.1 1212.47 L1603.52 1212.47 L1602.93 1212.47 L1602.34 1212.47 L1601.76 1212.47 L1601.17 1212.47 L1600.59 1212.47 L1600 1212.47 L1599.41 1212.47 L1598.83 1212.47 L1598.24 1212.47 L1597.65 1212.47 L1597.07 1212.47 L1596.48 1212.47 L1595.89 1212.47 L1595.31 1212.47 L1594.72 1212.47 L1594.14 1212.47 L1593.55 1212.47 L1592.96 1212.47 L1592.38 1212.47 L1591.79 1212.47 L1591.2 1212.47 L1590.62 1212.47 L1590.03 1212.47 L1589.44 1212.47 L1588.86 1212.47 L1588.27 1212.47 L1587.68 1212.47 L1587.1 1212.47 L1586.51 1212.47 L1585.93 1212.47 L1585.34 1212.47 L1584.75 1212.47 L1584.17 1212.47 L1583.58 1212.47 L1582.99 1212.47 L1582.41 1212.47 L1581.82 1212.47 L1581.23 1212.47 L1580.65 1212.47 L1580.06 1212.47 L1579.47 1212.47 L1578.89 1212.47 L1578.3 1212.47 L1577.72 1212.47 L1577.13 1212.47 L1576.54 1212.47 L1575.96 1212.47 L1575.37 1212.47 L1574.78 1212.47 L1574.2 1212.47 L1573.61 1212.47 L1573.02 1212.47 L1572.44 1212.47 L1571.85 1212.47 L1571.27 1212.47 L1570.68 1212.47 L1570.09 1212.47 L1569.51 1212.47 L1568.92 1212.47 L1568.33 1212.47 L1567.75 1212.47 L1567.16 1212.47 L1566.57 1212.47 L1565.99 1212.47 L1565.4 1212.47 L1564.81 1212.47 L1564.23 1212.47 L1563.64 1212.47 L1563.06 1212.47 L1562.47 1212.47 L1561.88 1212.47 L1561.3 1212.47 L1560.71 1212.47 L1560.12 1212.47 L1559.54 1212.47 L1558.95 1212.47 L1558.36 1212.47 L1557.78 1212.47 L1557.19 1212.47 L1556.6 1212.47 L1556.02 1212.47 L1555.43 1212.47 L1554.85 1212.47 L1554.26 1212.47 L1553.67 1212.47 L1553.09 1212.47 L1552.5 1212.47 L1551.91 1212.47 L1551.33 1212.47 L1550.74 1212.47 L1550.15 1212.47 L1549.57 1212.47 L1548.98 1212.47 L1548.4 1212.47 L1547.81 1212.47 L1547.22 1212.47 L1546.64 1212.47 L1546.05 1212.47 L1545.46 1212.47 L1544.88 1212.47 L1544.29 1212.47 L1543.7 1212.47 L1543.12 1212.47 L1542.53 1212.47 L1541.94 1212.47 L1541.36 1212.47 L1540.77 1212.47 L1540.19 1212.47 L1539.6 1212.47 L1539.01 1212.47 L1538.43 1212.47 L1537.84 1212.47 L1537.25 1212.47 L1536.67 1212.47 L1536.08 1212.47 L1535.49 1212.47 L1534.91 1212.47 L1534.32 1212.47 L1533.73 1212.47 L1533.15 1212.47 L1532.56 1212.47 L1531.98 1212.47 L1531.39 1212.47 L1530.8 1212.47 L1530.22 1212.47 L1529.63 1212.47 L1529.04 1212.47 L1528.46 1212.47 L1527.87 1212.47 L1527.28 1212.47 L1526.7 1212.47 L1526.11 1212.47 L1525.52 1212.47 L1524.94 1212.47 L1524.35 1212.47 L1523.77 1212.47 L1523.18 1212.47 L1522.59 1212.47 L1522.01 1212.47 L1521.42 1212.47 L1520.83 1212.47 L1520.25 1212.47 L1519.66 1212.47 L1519.07 1212.47 L1518.49 1212.47 L1517.9 1212.47 L1517.32 1212.47 L1516.73 1212.47 L1516.14 1212.47 L1515.56 1212.47 L1514.97 1212.47 L1514.38 1212.47 L1513.8 1212.47 L1513.21 1212.47 L1512.62 1212.47 L1512.04 1212.47 L1511.45 1212.47 L1510.86 1212.47 L1510.28 1212.47 L1509.69 1212.47 L1509.11 1212.47 L1508.52 1212.47 L1507.93 1212.47 L1507.35 1212.47 L1506.76 1212.47 L1506.17 1212.47 L1505.59 1212.47 L1505 1212.47 L1504.41 1212.47 L1503.83 1212.47 L1503.24 1212.47 L1502.65 1212.47 L1502.07 1212.47 L1501.48 1212.47 L1500.9 1212.47 L1500.31 1212.47 L1499.72 1212.47 L1499.14 1212.47 L1498.55 1212.47 L1497.96 1212.47 L1497.38 1212.47 L1496.79 1212.47 L1496.2 1212.47 L1495.62 1212.47 L1495.03 1212.47 L1494.45 1212.47 L1493.86 1212.47 L1493.27 1212.47 L1492.69 1212.47 L1492.1 1212.47 L1491.51 1212.47 L1490.93 1212.47 L1490.34 1212.47 L1489.75 1212.47 L1489.17 1212.47 L1488.58 1212.47 L1487.99 1212.47 L1487.41 1212.47 L1486.82 1212.47 L1486.24 1212.47 L1485.65 1212.47 L1485.06 1212.47 L1484.48 1212.47 L1483.89 1212.47 L1483.3 1212.47 L1482.72 1212.47 L1482.13 1212.47 L1481.54 1212.47 L1480.96 1212.47 L1480.37 1212.47 L1479.78 1212.47 L1479.2 1212.47 L1478.61 1212.47 L1478.03 1212.47 L1477.44 1212.47 L1476.85 1212.47 L1476.27 1212.47 L1475.68 1212.47 L1475.09 1212.47 L1474.51 1212.47 L1473.92 1212.47 L1473.33 1212.47 L1472.75 1212.47 L1472.16 1212.47 L1471.57 1212.47 L1470.99 1212.47 L1470.4 1212.47 L1469.82 1212.47 L1469.23 1212.47 L1468.64 1212.47 L1468.06 1212.47 L1467.47 1212.47 L1466.88 1212.47 L1466.3 1212.47 L1465.71 1212.47 L1465.12 1212.47 L1464.54 1212.47 L1463.95 1212.47 L1463.37 1212.47 L1462.78 1212.47 L1462.19 1212.47 L1461.61 1212.47 L1461.02 1212.47 L1460.43 1212.47 L1459.85 1212.47 L1459.26 1212.47 L1458.67 1212.47 L1458.09 1212.47 L1457.5 1212.47 L1456.91 1212.47 L1456.33 1212.47 L1455.74 1212.47 L1455.16 1212.47 L1454.57 1212.47 L1453.98 1212.47 L1453.4 1212.47 L1452.81 1212.47 L1452.22 1212.47 L1451.64 1212.47 L1451.05 1212.47 L1450.46 1212.47 L1449.88 1212.47 L1449.29 1212.47 L1448.7 1212.47 L1448.12 1212.47 L1447.53 1212.47 L1446.95 1212.47 L1446.36 1212.47 L1445.77 1212.47 L1445.19 1212.47 L1444.6 1212.47 L1444.01 1212.47 L1443.43 1212.47 L1442.84 1212.47 L1442.25 1212.47 L1441.67 1212.47 L1441.08 1212.47 L1440.5 1212.47 L1439.91 1212.47 L1439.32 1212.47 L1438.74 1212.47 L1438.15 1212.47 L1437.56 1212.47 L1436.98 1212.47 L1436.39 1212.47 L1435.8 1212.47 L1435.22 1212.47 L1434.63 1212.47 L1434.04 1212.47 L1433.46 1212.47 L1432.87 1212.47 L1432.29 1212.47 L1431.7 1212.47 L1431.11 1212.47 L1430.53 1212.47 L1429.94 1212.47 L1429.35 1212.47 L1428.77 1212.47 L1428.18 1212.47 L1427.59 1212.47 L1427.01 1212.47 L1426.42 1212.47 L1425.83 1212.47 L1425.25 1212.47 L1424.66 1212.47 L1424.08 1212.47 L1423.49 1212.47 L1422.9 1212.47 L1422.32 1212.47 L1421.73 1212.47 L1421.14 1212.47 L1420.56 1212.47 L1419.97 1212.47 L1419.38 1212.47 L1418.8 1212.47 L1418.21 1212.47 L1417.63 1212.47 L1417.04 1212.47 L1416.45 1212.47 L1415.87 1212.47 L1415.28 1212.47 L1414.69 1212.47 L1414.11 1212.47 L1413.52 1212.47 L1412.93 1212.47 L1412.35 1212.47 L1411.76 1212.47 L1411.17 1212.47 L1410.59 1212.47 L1410 1212.47 L1409.42 1212.47 L1408.83 1212.47 L1408.24 1212.47 L1407.66 1212.47 L1407.07 1212.47 L1406.48 1212.47 L1405.9 1212.47 L1405.31 1212.47 L1404.72 1212.47 L1404.14 1212.47 L1403.55 1212.47 L1402.96 1212.47 L1402.38 1212.47 L1401.79 1212.47 L1401.21 1212.47 L1400.62 1212.47 L1400.03 1212.47 L1399.45 1212.47 L1398.86 1212.47 L1398.27 1212.47 L1397.69 1212.47 L1397.1 1212.47 L1396.51 1212.47 L1395.93 1212.47 L1395.34 1212.47 L1394.75 1212.47 L1394.17 1212.47 L1393.58 1212.47 L1393 1212.47 L1392.41 1212.47 L1391.82 1212.47 L1391.24 1212.47 L1390.65 1212.47 L1390.06 1212.47 L1389.48 1212.47 L1388.89 1212.47 L1388.3 1212.47 L1387.72 1212.47 L1387.13 1212.47 L1386.55 1212.47 L1385.96 1212.47 L1385.37 1212.47 L1384.79 1212.47 L1384.2 1212.47 L1383.61 1212.47 L1383.03 1212.47 L1382.44 1212.47 L1381.85 1212.47 L1381.27 1212.47 L1380.68 1212.47 L1380.09 1212.47 L1379.51 1212.47 L1378.92 1212.47 L1378.34 1212.47 L1377.75 1212.47 L1377.16 1212.47 L1376.58 1212.47 L1375.99 1212.47 L1375.4 1212.47 L1374.82 1212.47 L1374.23 1212.47 L1373.64 1212.47 L1373.06 1212.47 L1372.47 1212.47 L1371.88 1212.47 L1371.3 1212.47 L1370.71 1212.47 L1370.13 1212.47 L1369.54 1212.47 L1368.95 1212.47 L1368.37 1212.47 L1367.78 1212.47 L1367.19 1212.47 L1366.61 1212.47 L1366.02 1212.47 L1365.43 1212.47 L1364.85 1212.47 L1364.26 1212.47 L1363.68 1212.47 L1363.09 1212.47 L1362.5 1212.47 L1361.92 1212.47 L1361.33 1212.47 L1360.74 1212.47 L1360.16 1212.47 L1359.57 1212.47 L1358.98 1212.47 L1358.4 1212.47 L1357.81 1212.47 L1357.22 1212.47 L1356.64 1212.47 L1356.05 1212.47 L1355.47 1212.47 L1354.88 1212.47 L1354.29 1212.47 L1353.71 1212.47 L1353.12 1212.47 L1352.53 1212.47 L1351.95 1212.47 L1351.36 1212.47 L1350.77 1212.47 L1350.19 1212.47 L1349.6 1212.47 L1349.01 1212.47 L1348.43 1212.47 L1347.84 1212.47 L1347.26 1212.47 L1346.67 1212.47 L1346.08 1212.47 L1345.5 1212.47 L1344.91 1212.47 L1344.32 1212.47 L1343.74 1212.47 L1343.15 1212.47 L1342.56 1212.47 L1341.98 1212.47 L1341.39 1212.47 L1340.8 1212.47 L1340.22 1212.47 L1339.63 1212.47 L1339.05 1212.47 L1338.46 1212.47 L1337.87 1212.47 L1337.29 1212.47 L1336.7 1212.47 L1336.11 1212.47 L1335.53 1212.47 L1334.94 1212.47 L1334.35 1212.47 L1333.77 1212.47 L1333.18 1212.47 L1332.6 1212.47 L1332.01 1212.47 L1331.42 1212.47 L1330.84 1212.47 L1330.25 1212.47 L1329.66 1212.47 L1329.08 1212.47 L1328.49 1212.47 L1327.9 1212.47 L1327.32 1212.47 L1326.73 1212.47 L1326.14 1212.47 L1325.56 1212.47 L1324.97 1212.47 L1324.39 1212.47 L1323.8 1212.47 L1323.21 1212.47 L1322.63 1212.47 L1322.04 1212.47 L1321.45 1212.47 L1320.87 1212.47 L1320.28 1212.47 L1319.69 1212.47 L1319.11 1212.47 L1318.52 1212.47 L1317.93 1212.47 L1317.35 1212.47 L1316.76 1212.47 L1316.18 1212.47 L1315.59 1212.47 L1315 1212.47 L1314.42 1212.47 L1313.83 1212.47 L1313.24 1212.47 L1312.66 1212.47 L1312.07 1212.47 L1311.48 1212.47 L1310.9 1212.47 L1310.31 1212.47 L1309.73 1212.47 L1309.14 1212.47 L1308.55 1212.47 L1307.97 1212.47 L1307.38 1212.47 L1306.79 1212.47 L1306.21 1212.47 L1305.62 1212.47 L1305.03 1212.47 L1304.45 1212.47 L1303.86 1212.47 L1303.27 1212.47 L1302.69 1212.47 L1302.1 1212.47 L1301.52 1212.47 L1300.93 1212.47 L1300.34 1212.47 L1299.76 1212.47 L1299.17 1212.47 L1298.58 1212.47 L1298 1212.47 L1297.41 1212.47 L1296.82 1212.47 L1296.24 1212.47 L1295.65 1212.47 L1295.06 1212.47 L1294.48 1212.47 L1293.89 1212.47 L1293.31 1212.47 L1292.72 1212.47 L1292.13 1212.47 L1291.55 1212.47 L1290.96 1212.47 L1290.37 1212.47 L1289.79 1212.47 L1289.2 1212.47 L1288.61 1212.47 L1288.03 1212.47 L1287.44 1212.47 L1286.86 1212.47 L1286.27 1212.47 L1285.68 1212.47 L1285.1 1212.47 L1284.51 1212.47 L1283.92 1212.47 L1283.34 1212.47 L1282.75 1212.47 L1282.16 1212.47 L1281.58 1212.47 L1280.99 1212.47 L1280.4 1212.47 L1279.82 1212.47 L1279.23 1212.47 L1278.65 1212.47 L1278.06 1212.47 L1277.47 1212.47 L1276.89 1212.47 L1276.3 1212.47 L1275.71 1212.47 L1275.13 1212.47 L1274.54 1212.47 L1273.95 1212.47 L1273.37 1212.47 L1272.78 1212.47 L1272.19 1212.47 L1271.61 1212.47 L1271.02 1212.47 L1270.44 1212.47 L1269.85 1212.47 L1269.26 1212.47 L1268.68 1212.47 L1268.09 1212.47 L1267.5 1212.47 L1266.92 1212.47 L1266.33 1212.47 L1265.74 1212.47 L1265.16 1212.47 L1264.57 1212.47 L1263.98 1212.47 L1263.4 1212.47 L1262.81 1212.47 L1262.23 1212.47 L1261.64 1212.47 L1261.05 1212.47 L1260.47 1212.47 L1259.88 1212.47 L1259.29 1212.47 L1258.71 1212.47 L1258.12 1212.47 L1257.53 1212.47 L1256.95 1212.47 L1256.36 1212.47 L1255.78 1212.47 L1255.19 1212.47 L1254.6 1212.47 L1254.02 1212.47 L1253.43 1212.47 L1252.84 1212.47 L1252.26 1212.47 L1251.67 1212.47 L1251.08 1212.47 L1250.5 1212.47 L1249.91 1212.47 L1249.32 1212.47 L1248.74 1212.47 L1248.15 1212.47 L1247.57 1212.47 L1246.98 1212.47 L1246.39 1212.47 L1245.81 1212.47 L1245.22 1212.47 L1244.63 1212.47 L1244.05 1212.47 L1243.46 1212.47 L1242.87 1212.47 L1242.29 1212.47 L1241.7 1212.47 L1241.11 1212.47 L1240.53 1212.47 L1239.94 1212.47 L1239.36 1212.47 L1238.77 1212.47 L1238.18 1212.47 L1237.6 1212.47 L1237.01 1212.47 L1236.42 1212.47 L1235.84 1212.47 L1235.25 1212.47 L1234.66 1212.47 L1234.08 1212.47 L1233.49 1212.47 L1232.91 1212.47 L1232.32 1212.47 L1231.73 1212.47 L1231.15 1212.47 L1230.56 1212.47 L1229.97 1212.47 L1229.39 1212.47 L1228.8 1212.47 L1228.21 1212.47 L1227.63 1212.47 L1227.04 1212.47 L1226.45 1212.47 L1225.87 1212.47 L1225.28 1212.47 L1224.7 1212.47 L1224.11 1212.47 L1223.52 1212.47 L1222.94 1212.47 L1222.35 1212.47 L1221.76 1212.47 L1221.18 1212.47 L1220.59 1212.47 L1220 1212.47 L1219.42 1212.47 L1218.83 1212.47 L1218.24 1212.47 L1217.66 1212.47 L1217.07 1212.47 L1216.49 1212.47 L1215.9 1212.47 L1215.31 1212.47 L1214.73 1212.47 L1214.14 1212.47 L1213.55 1212.47 L1212.97 1212.47 L1212.38 1212.47 L1211.79 1212.47 L1211.21 1212.47 L1210.62 1212.47 L1210.03 1212.47 L1209.45 1212.47 L1208.86 1212.47 L1208.28 1212.47 L1207.69 1212.47 L1207.1 1212.47 L1206.52 1212.47 L1205.93 1212.47 L1205.34 1212.47 L1204.76 1212.47 L1204.17 1212.47 L1203.58 1212.47 L1203 1212.47 L1202.41 1212.47 L1201.83 1212.47 L1201.24 1212.47 L1200.65 1212.47 L1200.07 1212.47 L1199.48 1212.47 L1198.89 1212.47 L1198.31 1212.47 L1197.72 1212.47 L1197.13 1212.47 L1196.55 1212.47 L1195.96 1212.47 L1195.37 1212.47 L1194.79 1212.47 L1194.2 1212.47 L1193.62 1212.47 L1193.03 1212.47 L1192.44 1212.47 L1191.86 1212.47 L1191.27 1212.47 L1190.68 1212.47 L1190.1 1212.47 L1189.51 1212.47 L1188.92 1212.47 L1188.34 1212.47 L1187.75 1212.47 L1187.16 1212.47 L1186.58 1212.47 L1185.99 1212.47 L1185.41 1212.47 L1184.82 1212.47 L1184.23 1212.47 L1183.65 1212.47 L1183.06 1212.47 L1182.47 1212.47 L1181.89 1212.47 L1181.3 1212.47 L1180.71 1212.47 L1180.13 1212.47 L1179.54 1212.47 L1178.96 1212.47 L1178.37 1212.47 L1177.78 1212.47 L1177.2 1212.47 L1176.61 1212.47 L1176.02 1212.47 L1175.44 1212.47 L1174.85 1212.47 L1174.26 1212.47 L1173.68 1212.47 L1173.09 1212.47 L1172.5 1212.47 L1171.92 1212.47 L1171.33 1212.47 L1170.75 1212.47 L1170.16 1212.47 L1169.57 1212.47 L1168.99 1212.47 L1168.4 1212.47 L1167.81 1212.47 L1167.23 1212.47 L1166.64 1212.47 L1166.05 1212.47 L1165.47 1212.47 L1164.88 1212.47 L1164.29 1212.47 L1163.71 1212.47 L1163.12 1212.47 L1162.54 1212.47 L1161.95 1212.47 L1161.36 1212.47 L1160.78 1212.47 L1160.19 1212.47 L1159.6 1212.47 L1159.02 1212.47 L1158.43 1212.47 L1157.84 1212.47 L1157.26 1212.47 L1156.67 1212.47 L1156.09 1212.47 L1155.5 1212.47 L1154.91 1212.47 L1154.33 1212.47 L1153.74 1212.47 L1153.15 1212.47 L1152.57 1212.47 L1151.98 1212.47 L1151.39 1212.47 L1150.81 1212.47 L1150.22 1212.47 L1149.63 1212.47 L1149.05 1212.47 L1148.46 1212.47 L1147.88 1212.47 L1147.29 1212.47 L1146.7 1212.47 L1146.12 1212.47 L1145.53 1212.47 L1144.94 1212.47 L1144.36 1212.47 L1143.77 1212.47 L1143.18 1212.47 L1142.6 1212.47 L1142.01 1212.47 L1141.42 1212.47 L1140.84 1212.47 L1140.25 1212.47 L1139.67 1212.47 L1139.08 1212.47 L1138.49 1212.47 L1137.91 1212.47 L1137.32 1212.47 L1136.73 1212.47 L1136.15 1212.47 L1135.56 1212.47 L1134.97 1212.47 L1134.39 1212.47 L1133.8 1212.47 L1133.21 1212.47 L1132.63 1212.47 L1132.04 1212.47 L1131.46 1212.47 L1130.87 1212.47 L1130.28 1212.47 L1129.7 1212.47 L1129.11 1212.47 L1128.52 1212.47 L1127.94 1212.47 L1127.35 1212.47 L1126.76 1212.47 L1126.18 1212.47 L1125.59 1212.47 L1125.01 1212.47 L1124.42 1212.47 L1123.83 1212.47 L1123.25 1212.47 L1122.66 1212.47 L1122.07 1212.47 L1121.49 1212.47 L1120.9 1212.47 L1120.31 1212.47 L1119.73 1212.47 L1119.14 1212.47 L1118.55 1212.47 L1117.97 1212.47 L1117.38 1212.47 L1116.8 1212.47 L1116.21 1212.47 L1115.62 1212.47 L1115.04 1212.47 L1114.45 1212.47 L1113.86 1212.47 L1113.28 1212.47 L1112.69 1212.47 L1112.1 1212.47 L1111.52 1212.47 L1110.93 1212.47 L1110.34 1212.47 L1109.76 1212.47 L1109.17 1212.47 L1108.59 1212.47 L1108 1212.47 L1107.41 1212.47 L1106.83 1212.47 L1106.24 1212.47 L1105.65 1212.47 L1105.07 1212.47 L1104.48 1212.47 L1103.89 1212.47 L1103.31 1212.47 L1102.72 1212.47 L1102.14 1212.47 L1101.55 1212.47 L1100.96 1212.47 L1100.38 1212.47 L1099.79 1212.47 L1099.2 1212.47 L1098.62 1212.47 L1098.03 1212.47 L1097.44 1212.47 L1096.86 1212.47 L1096.27 1212.47 L1095.68 1212.47 L1095.1 1212.47 L1094.51 1212.47 L1093.93 1212.47 L1093.34 1212.47 L1092.75 1212.47 L1092.17 1212.47 L1091.58 1212.47 L1090.99 1212.47 L1090.41 1212.47 L1089.82 1212.47 L1089.23 1212.47 L1088.65 1212.47 L1088.06 1212.47 L1087.47 1212.47 L1086.89 1212.47 L1086.3 1212.47 L1085.72 1212.47 L1085.13 1212.47 L1084.54 1212.47 L1083.96 1212.47 L1083.37 1212.47 L1082.78 1212.47 L1082.2 1212.47 L1081.61 1212.47 L1081.02 1212.47 L1080.44 1212.47 L1079.85 1212.47 L1079.26 1212.47 L1078.68 1212.47 L1078.09 1212.47 L1077.51 1212.47 L1076.92 1212.47 L1076.33 1212.47 L1075.75 1212.47 L1075.16 1212.47 L1074.57 1212.47 L1073.99 1212.47 L1073.4 1212.47 L1072.81 1212.47 L1072.23 1212.47 L1071.64 1212.47 L1071.06 1212.47 L1070.47 1212.47 L1069.88 1212.47 L1069.3 1212.47 L1068.71 1212.47 L1068.12 1212.47 L1067.54 1212.47 L1066.95 1212.47 L1066.36 1212.47 L1065.78 1212.47 L1065.19 1212.47 L1064.6 1212.47 L1064.02 1212.47 L1063.43 1212.47 L1062.85 1212.47 L1062.26 1212.47 L1061.67 1212.47 L1061.09 1212.47 L1060.5 1212.47 L1059.91 1212.47 L1059.33 1212.47 L1058.74 1212.47 L1058.15 1212.47 L1057.57 1212.47 L1056.98 1212.47 L1056.39 1212.47 L1055.81 1212.47 L1055.22 1212.47 L1054.64 1212.47 L1054.05 1212.47 L1053.46 1212.47 L1052.88 1212.47 L1052.29 1212.47 L1051.7 1212.47 L1051.12 1212.47 L1050.53 1212.47 L1049.94 1212.47 L1049.36 1212.47 L1048.77 1212.47 L1048.19 1212.47 L1047.6 1212.47 L1047.01 1212.47 L1046.43 1212.47 L1045.84 1212.47 L1045.25 1212.47 L1044.67 1212.47 L1044.08 1212.47 L1043.49 1212.47 L1042.91 1212.47 L1042.32 1212.47 L1041.73 1212.47 L1041.15 1212.47 L1040.56 1212.47 L1039.98 1212.47 L1039.39 1212.47 L1038.8 1212.47 L1038.22 1212.47 L1037.63 1212.47 L1037.04 1212.47 L1036.46 1212.47 L1035.87 1212.47 L1035.28 1212.47 L1034.7 1212.47 L1034.11 1212.47 L1033.52 1212.47 L1032.94 1212.47 L1032.35 1212.47 L1031.77 1212.47 L1031.18 1212.47 L1030.59 1212.47 L1030.01 1212.47 L1029.42 1212.47 L1028.83 1212.47 L1028.25 1212.47 L1027.66 1212.47 L1027.07 1212.47 L1026.49 1212.47 L1025.9 1212.47 L1025.32 1212.47 L1024.73 1212.47 L1024.14 1212.47 L1023.56 1212.47 L1022.97 1212.47 L1022.38 1212.47 L1021.8 1212.47 L1021.21 1212.47 L1020.62 1212.47 L1020.04 1212.47 L1019.45 1212.47 L1018.86 1212.47 L1018.28 1212.47 L1017.69 1212.47 L1017.11 1212.47 L1016.52 1212.47 L1015.93 1212.47 L1015.35 1212.47 L1014.76 1212.47 L1014.17 1212.47 L1013.59 1212.47 L1013 1212.47 L1012.41 1212.47 L1011.83 1212.47 L1011.24 1212.47 L1010.65 1212.47 L1010.07 1212.47 L1009.48 1212.47 L1008.9 1212.47 L1008.31 1212.47 L1007.72 1212.47 L1007.14 1212.47 L1006.55 1212.47 L1005.96 1212.47 L1005.38 1212.47 L1004.79 1212.47 L1004.2 1212.47 L1003.62 1212.47 L1003.03 1212.47 L1002.44 1212.47 L1001.86 1212.47 L1001.27 1212.47 L1000.69 1212.47 L1000.1 1212.47 L999.513 1212.47 L998.926 1212.47 L998.34 1212.47 L997.754 1212.47 L997.167 1212.47 L996.581 1212.47 L995.994 1212.47 L995.408 1212.47 L994.822 1212.47 L994.235 1212.47 L993.649 1212.47 L993.062 1212.47 L992.476 1212.47 L991.889 1212.47 L991.303 1212.47 L990.717 1212.47 L990.13 1212.47 L989.544 1212.47 L988.957 1212.47 L988.371 1212.47 L987.785 1212.47 L987.198 1212.47 L986.612 1212.47 L986.025 1212.47  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip742)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1212.6 986.612,1212.6 987.198,1212.6 987.785,1212.6 988.371,1212.6 988.957,1212.6 989.544,1212.6 990.13,1212.6 990.717,1212.6 991.303,1212.6 991.889,1212.6 992.476,1212.6 993.062,1212.6 993.649,1212.6 994.235,1212.6 994.822,1212.6 995.408,1212.6 995.994,1212.6 996.581,1212.6 997.167,1212.6 997.754,1212.6 998.34,1212.6 998.926,1212.6 999.513,1212.6 1000.1,1212.6 1000.69,1212.6 1001.27,1212.6 1001.86,1212.6 1002.44,1212.6 1003.03,1212.6 1003.62,1212.6 1004.2,1212.6 1004.79,1212.6 1005.38,1212.6 1005.96,1212.6 1006.55,1212.6 1007.14,1212.6 1007.72,1212.6 1008.31,1212.6 1008.9,1212.6 1009.48,1212.6 1010.07,1212.6 1010.65,1212.6 1011.24,1212.6 1011.83,1212.6 1012.41,1212.6 1013,1212.6 1013.59,1212.6 1014.17,1212.6 1014.76,1212.6 1015.35,1212.6 1015.93,1212.6 1016.52,1212.6 1017.11,1212.6 1017.69,1212.6 1018.28,1212.6 1018.86,1212.6 1019.45,1212.6 1020.04,1212.6 1020.62,1212.6 1021.21,1212.6 1021.8,1212.6 1022.38,1212.6 1022.97,1212.6 1023.56,1212.6 1024.14,1212.6 1024.73,1212.6 1025.32,1212.6 1025.9,1212.6 1026.49,1212.6 1027.07,1212.6 1027.66,1212.6 1028.25,1212.6 1028.83,1212.6 1029.42,1212.6 1030.01,1212.6 1030.59,1212.6 1031.18,1212.6 1031.77,1212.6 1032.35,1212.6 1032.94,1212.6 1033.52,1212.6 1034.11,1212.6 1034.7,1212.6 1035.28,1212.6 1035.87,1212.6 1036.46,1212.6 1037.04,1212.6 1037.63,1212.6 1038.22,1212.6 1038.8,1212.6 1039.39,1212.6 1039.98,1212.6 1040.56,1212.6 1041.15,1212.6 1041.73,1212.6 1042.32,1212.6 1042.91,1212.6 1043.49,1212.6 1044.08,1212.6 1044.67,1212.6 1045.25,1212.6 1045.84,1212.6 1046.43,1212.6 1047.01,1212.6 1047.6,1212.6 1048.19,1212.6 1048.77,1212.6 1049.36,1212.6 1049.94,1212.6 1050.53,1212.6 1051.12,1212.6 1051.7,1212.6 1052.29,1212.6 1052.88,1212.6 1053.46,1212.6 1054.05,1212.6 1054.64,1212.6 1055.22,1212.6 1055.81,1212.6 1056.39,1212.6 1056.98,1212.6 1057.57,1212.6 1058.15,1212.6 1058.74,1212.6 1059.33,1212.6 1059.91,1212.6 1060.5,1212.6 1061.09,1212.6 1061.67,1212.6 1062.26,1212.6 1062.85,1212.6 1063.43,1212.6 1064.02,1212.6 1064.6,1212.6 1065.19,1212.6 1065.78,1212.6 1066.36,1212.6 1066.95,1212.6 1067.54,1212.6 1068.12,1212.6 1068.71,1212.6 1069.3,1212.6 1069.88,1212.6 1070.47,1212.6 1071.06,1212.6 1071.64,1212.6 1072.23,1212.6 1072.81,1212.6 1073.4,1212.6 1073.99,1212.6 1074.57,1212.6 1075.16,1212.6 1075.75,1212.6 1076.33,1212.6 1076.92,1212.6 1077.51,1212.6 1078.09,1212.6 1078.68,1212.6 1079.26,1212.6 1079.85,1212.6 1080.44,1212.6 1081.02,1212.6 1081.61,1212.6 1082.2,1212.6 1082.78,1212.6 1083.37,1212.6 1083.96,1212.6 1084.54,1212.6 1085.13,1212.6 1085.72,1212.6 1086.3,1212.6 1086.89,1212.6 1087.47,1212.6 1088.06,1212.6 1088.65,1212.6 1089.23,1212.6 1089.82,1212.6 1090.41,1212.6 1090.99,1212.6 1091.58,1212.6 1092.17,1212.6 1092.75,1212.6 1093.34,1212.6 1093.93,1212.6 1094.51,1212.6 1095.1,1212.6 1095.68,1212.6 1096.27,1212.6 1096.86,1212.6 1097.44,1212.6 1098.03,1212.6 1098.62,1212.6 1099.2,1212.6 1099.79,1212.6 1100.38,1212.6 1100.96,1212.6 1101.55,1212.6 1102.14,1212.6 1102.72,1212.6 1103.31,1212.6 1103.89,1212.6 1104.48,1212.6 1105.07,1212.6 1105.65,1212.6 1106.24,1212.6 1106.83,1212.6 1107.41,1212.6 1108,1212.6 1108.59,1212.6 1109.17,1212.6 1109.76,1212.6 1110.34,1212.6 1110.93,1212.6 1111.52,1212.6 1112.1,1212.6 1112.69,1212.6 1113.28,1212.6 1113.86,1212.6 1114.45,1212.6 1115.04,1212.6 1115.62,1212.6 1116.21,1212.6 1116.8,1212.6 1117.38,1212.6 1117.97,1212.6 1118.55,1212.6 1119.14,1212.6 1119.73,1212.6 1120.31,1212.6 1120.9,1212.6 1121.49,1212.6 1122.07,1212.6 1122.66,1212.6 1123.25,1212.6 1123.83,1212.6 1124.42,1212.6 1125.01,1212.6 1125.59,1212.6 1126.18,1212.6 1126.76,1212.6 1127.35,1212.6 1127.94,1212.6 1128.52,1212.6 1129.11,1212.6 1129.7,1212.6 1130.28,1212.6 1130.87,1212.6 1131.46,1212.6 1132.04,1212.6 1132.63,1212.6 1133.21,1212.6 1133.8,1212.6 1134.39,1212.6 1134.97,1212.6 1135.56,1212.6 1136.15,1212.6 1136.73,1212.6 1137.32,1212.6 1137.91,1212.6 1138.49,1212.6 1139.08,1212.6 1139.67,1212.6 1140.25,1212.6 1140.84,1212.6 1141.42,1212.6 1142.01,1212.6 1142.6,1212.6 1143.18,1212.6 1143.77,1212.6 1144.36,1212.6 1144.94,1212.6 1145.53,1212.6 1146.12,1212.6 1146.7,1212.6 1147.29,1212.6 1147.88,1212.6 1148.46,1212.6 1149.05,1212.6 1149.63,1212.6 1150.22,1212.6 1150.81,1212.6 1151.39,1212.6 1151.98,1212.6 1152.57,1212.6 1153.15,1212.6 1153.74,1212.6 1154.33,1212.6 1154.91,1212.6 1155.5,1212.6 1156.09,1212.6 1156.67,1212.6 1157.26,1212.6 1157.84,1212.6 1158.43,1212.6 1159.02,1212.6 1159.6,1212.6 1160.19,1212.6 1160.78,1212.6 1161.36,1212.6 1161.95,1212.6 1162.54,1212.6 1163.12,1212.6 1163.71,1212.6 1164.29,1212.6 1164.88,1212.6 1165.47,1212.6 1166.05,1212.6 1166.64,1212.6 1167.23,1212.6 1167.81,1212.6 1168.4,1212.6 1168.99,1212.6 1169.57,1212.6 1170.16,1212.6 1170.75,1212.6 1171.33,1212.6 1171.92,1212.6 1172.5,1212.6 1173.09,1212.6 1173.68,1212.6 1174.26,1212.6 1174.85,1212.6 1175.44,1212.6 1176.02,1212.6 1176.61,1212.6 1177.2,1212.6 1177.78,1212.6 1178.37,1212.6 1178.96,1212.6 1179.54,1212.6 1180.13,1212.6 1180.71,1212.6 1181.3,1212.6 1181.89,1212.6 1182.47,1212.6 1183.06,1212.6 1183.65,1212.6 1184.23,1212.6 1184.82,1212.6 1185.41,1212.6 1185.99,1212.6 1186.58,1212.6 1187.16,1212.6 1187.75,1212.6 1188.34,1212.6 1188.92,1212.6 1189.51,1212.6 1190.1,1212.6 1190.68,1212.6 1191.27,1212.6 1191.86,1212.6 1192.44,1212.6 1193.03,1212.6 1193.62,1212.6 1194.2,1212.6 1194.79,1212.6 1195.37,1212.6 1195.96,1212.6 1196.55,1212.6 1197.13,1212.6 1197.72,1212.6 1198.31,1212.6 1198.89,1212.6 1199.48,1212.6 1200.07,1212.6 1200.65,1212.6 1201.24,1212.6 1201.83,1212.6 1202.41,1212.6 1203,1212.6 1203.58,1212.6 1204.17,1212.6 1204.76,1212.6 1205.34,1212.6 1205.93,1212.6 1206.52,1212.6 1207.1,1212.6 1207.69,1212.6 1208.28,1212.6 1208.86,1212.6 1209.45,1212.6 1210.03,1212.6 1210.62,1212.6 1211.21,1212.6 1211.79,1212.6 1212.38,1212.6 1212.97,1212.6 1213.55,1212.6 1214.14,1212.6 1214.73,1212.6 1215.31,1212.6 1215.9,1212.6 1216.49,1212.6 1217.07,1212.6 1217.66,1212.6 1218.24,1212.6 1218.83,1212.6 1219.42,1212.6 1220,1212.6 1220.59,1212.6 1221.18,1212.6 1221.76,1212.6 1222.35,1212.6 1222.94,1212.6 1223.52,1212.6 1224.11,1212.6 1224.7,1212.6 1225.28,1212.6 1225.87,1212.6 1226.45,1212.6 1227.04,1212.6 1227.63,1212.6 1228.21,1212.6 1228.8,1212.6 1229.39,1212.6 1229.97,1212.6 1230.56,1212.6 1231.15,1212.6 1231.73,1212.6 1232.32,1212.6 1232.91,1212.6 1233.49,1212.6 1234.08,1212.6 1234.66,1212.6 1235.25,1212.6 1235.84,1212.6 1236.42,1212.6 1237.01,1212.6 1237.6,1212.6 1238.18,1212.6 1238.77,1212.6 1239.36,1212.6 1239.94,1212.6 1240.53,1212.6 1241.11,1212.6 1241.7,1212.6 1242.29,1212.6 1242.87,1212.6 1243.46,1212.6 1244.05,1212.6 1244.63,1212.6 1245.22,1212.6 1245.81,1212.6 1246.39,1212.6 1246.98,1212.6 1247.57,1212.6 1248.15,1212.6 1248.74,1212.6 1249.32,1212.6 1249.91,1212.6 1250.5,1212.6 1251.08,1212.6 1251.67,1212.6 1252.26,1212.6 1252.84,1212.6 1253.43,1212.6 1254.02,1212.6 1254.6,1212.6 1255.19,1212.6 1255.78,1212.6 1256.36,1212.6 1256.95,1212.6 1257.53,1212.6 1258.12,1212.6 1258.71,1212.6 1259.29,1212.6 1259.88,1212.6 1260.47,1212.6 1261.05,1212.6 1261.64,1212.6 1262.23,1212.6 1262.81,1212.6 1263.4,1212.6 1263.98,1212.6 1264.57,1212.6 1265.16,1212.6 1265.74,1212.6 1266.33,1212.6 1266.92,1212.6 1267.5,1212.6 1268.09,1212.6 1268.68,1212.6 1269.26,1212.6 1269.85,1212.6 1270.44,1212.6 1271.02,1212.6 1271.61,1212.6 1272.19,1212.6 1272.78,1212.6 1273.37,1212.6 1273.95,1212.6 1274.54,1212.6 1275.13,1212.6 1275.71,1212.6 1276.3,1212.6 1276.89,1212.6 1277.47,1212.6 1278.06,1212.6 1278.65,1212.6 1279.23,1212.6 1279.82,1212.6 1280.4,1212.6 1280.99,1212.6 1281.58,1212.6 1282.16,1212.6 1282.75,1212.6 1283.34,1212.6 1283.92,1212.6 1284.51,1212.6 1285.1,1212.6 1285.68,1212.6 1286.27,1212.6 1286.86,1212.6 1287.44,1212.6 1288.03,1212.6 1288.61,1212.6 1289.2,1212.6 1289.79,1212.6 1290.37,1212.6 1290.96,1212.6 1291.55,1212.6 1292.13,1212.6 1292.72,1212.6 1293.31,1212.6 1293.89,1212.6 1294.48,1212.6 1295.06,1212.6 1295.65,1212.6 1296.24,1212.6 1296.82,1212.6 1297.41,1212.6 1298,1212.6 1298.58,1212.6 1299.17,1212.6 1299.76,1212.6 1300.34,1212.6 1300.93,1212.6 1301.52,1212.6 1302.1,1212.6 1302.69,1212.6 1303.27,1212.6 1303.86,1212.6 1304.45,1212.6 1305.03,1212.6 1305.62,1212.6 1306.21,1212.6 1306.79,1212.6 1307.38,1212.6 1307.97,1212.6 1308.55,1212.6 1309.14,1212.6 1309.73,1212.6 1310.31,1212.6 1310.9,1212.6 1311.48,1212.6 1312.07,1212.6 1312.66,1212.6 1313.24,1212.6 1313.83,1212.6 1314.42,1212.6 1315,1212.6 1315.59,1212.6 1316.18,1212.6 1316.76,1212.6 1317.35,1212.6 1317.93,1212.6 1318.52,1212.6 1319.11,1212.6 1319.69,1212.6 1320.28,1212.6 1320.87,1212.6 1321.45,1212.6 1322.04,1212.6 1322.63,1212.6 1323.21,1212.6 1323.8,1212.6 1324.39,1212.6 1324.97,1212.6 1325.56,1212.6 1326.14,1212.6 1326.73,1212.6 1327.32,1212.6 1327.9,1212.6 1328.49,1212.6 1329.08,1212.6 1329.66,1212.6 1330.25,1212.6 1330.84,1212.6 1331.42,1212.6 1332.01,1212.6 1332.6,1212.6 1333.18,1212.6 1333.77,1212.6 1334.35,1212.6 1334.94,1212.6 1335.53,1212.6 1336.11,1212.6 1336.7,1212.6 1337.29,1212.6 1337.87,1212.6 1338.46,1212.6 1339.05,1212.6 1339.63,1212.6 1340.22,1212.6 1340.8,1212.6 1341.39,1212.6 1341.98,1212.6 1342.56,1212.6 1343.15,1212.6 1343.74,1212.6 1344.32,1212.6 1344.91,1212.6 1345.5,1212.6 1346.08,1212.6 1346.67,1212.6 1347.26,1212.6 1347.84,1212.6 1348.43,1212.6 1349.01,1212.6 1349.6,1212.6 1350.19,1212.6 1350.77,1212.6 1351.36,1212.6 1351.95,1212.6 1352.53,1212.6 1353.12,1212.6 1353.71,1212.6 1354.29,1212.6 1354.88,1212.6 1355.47,1212.6 1356.05,1212.6 1356.64,1212.6 1357.22,1212.6 1357.81,1212.6 1358.4,1212.6 1358.98,1212.6 1359.57,1212.6 1360.16,1212.6 1360.74,1212.6 1361.33,1212.6 1361.92,1212.6 1362.5,1212.6 1363.09,1212.6 1363.68,1212.6 1364.26,1212.6 1364.85,1212.6 1365.43,1212.6 1366.02,1212.6 1366.61,1212.6 1367.19,1212.6 1367.78,1212.6 1368.37,1212.6 1368.95,1212.6 1369.54,1212.6 1370.13,1212.6 1370.71,1212.6 1371.3,1212.6 1371.88,1212.6 1372.47,1212.6 1373.06,1212.6 1373.64,1212.6 1374.23,1212.6 1374.82,1212.6 1375.4,1212.6 1375.99,1212.6 1376.58,1212.6 1377.16,1212.6 1377.75,1212.6 1378.34,1212.6 1378.92,1212.6 1379.51,1212.6 1380.09,1212.6 1380.68,1212.6 1381.27,1212.6 1381.85,1212.6 1382.44,1212.6 1383.03,1212.6 1383.61,1212.6 1384.2,1212.6 1384.79,1212.6 1385.37,1212.6 1385.96,1212.6 1386.55,1212.6 1387.13,1212.6 1387.72,1212.6 1388.3,1212.6 1388.89,1212.6 1389.48,1212.6 1390.06,1212.6 1390.65,1212.6 1391.24,1212.6 1391.82,1212.6 1392.41,1212.6 1393,1212.6 1393.58,1212.6 1394.17,1212.6 1394.75,1212.6 1395.34,1212.6 1395.93,1212.6 1396.51,1212.6 1397.1,1212.6 1397.69,1212.6 1398.27,1212.6 1398.86,1212.6 1399.45,1212.6 1400.03,1212.6 1400.62,1212.6 1401.21,1212.6 1401.79,1212.6 1402.38,1212.6 1402.96,1212.6 1403.55,1212.6 1404.14,1212.6 1404.72,1212.6 1405.31,1212.6 1405.9,1212.6 1406.48,1212.6 1407.07,1212.6 1407.66,1212.6 1408.24,1212.6 1408.83,1212.6 1409.42,1212.6 1410,1212.6 1410.59,1212.6 1411.17,1212.6 1411.76,1212.6 1412.35,1212.6 1412.93,1212.6 1413.52,1212.6 1414.11,1212.6 1414.69,1212.6 1415.28,1212.6 1415.87,1212.6 1416.45,1212.6 1417.04,1212.6 1417.63,1212.6 1418.21,1212.6 1418.8,1212.6 1419.38,1212.6 1419.97,1212.6 1420.56,1212.6 1421.14,1212.6 1421.73,1212.6 1422.32,1212.6 1422.9,1212.6 1423.49,1212.6 1424.08,1212.6 1424.66,1212.6 1425.25,1212.6 1425.83,1212.6 1426.42,1212.6 1427.01,1212.6 1427.59,1212.6 1428.18,1212.6 1428.77,1212.6 1429.35,1212.6 1429.94,1212.6 1430.53,1212.6 1431.11,1212.6 1431.7,1212.6 1432.29,1212.6 1432.87,1212.6 1433.46,1212.6 1434.04,1212.6 1434.63,1212.6 1435.22,1212.6 1435.8,1212.6 1436.39,1212.6 1436.98,1212.6 1437.56,1212.6 1438.15,1212.6 1438.74,1212.6 1439.32,1212.6 1439.91,1212.6 1440.5,1212.6 1441.08,1212.6 1441.67,1212.6 1442.25,1212.6 1442.84,1212.6 1443.43,1212.6 1444.01,1212.6 1444.6,1212.6 1445.19,1212.6 1445.77,1212.6 1446.36,1212.6 1446.95,1212.6 1447.53,1212.6 1448.12,1212.6 1448.7,1212.6 1449.29,1212.6 1449.88,1212.6 1450.46,1212.6 1451.05,1212.6 1451.64,1212.6 1452.22,1212.6 1452.81,1212.6 1453.4,1212.6 1453.98,1212.6 1454.57,1212.6 1455.16,1212.6 1455.74,1212.6 1456.33,1212.6 1456.91,1212.6 1457.5,1212.6 1458.09,1212.6 1458.67,1212.6 1459.26,1212.6 1459.85,1212.6 1460.43,1212.6 1461.02,1212.6 1461.61,1212.6 1462.19,1212.6 1462.78,1212.6 1463.37,1212.6 1463.95,1212.6 1464.54,1212.6 1465.12,1212.6 1465.71,1212.6 1466.3,1212.6 1466.88,1212.6 1467.47,1212.6 1468.06,1212.6 1468.64,1212.6 1469.23,1212.6 1469.82,1212.6 1470.4,1212.6 1470.99,1212.6 1471.57,1212.6 1472.16,1212.6 1472.75,1212.6 1473.33,1212.6 1473.92,1212.6 1474.51,1212.6 1475.09,1212.6 1475.68,1212.6 1476.27,1212.6 1476.85,1212.6 1477.44,1212.6 1478.03,1212.6 1478.61,1212.6 1479.2,1212.6 1479.78,1212.6 1480.37,1212.6 1480.96,1212.6 1481.54,1212.6 1482.13,1212.6 1482.72,1212.6 1483.3,1212.6 1483.89,1212.6 1484.48,1212.6 1485.06,1212.6 1485.65,1212.6 1486.24,1212.6 1486.82,1212.6 1487.41,1212.6 1487.99,1212.6 1488.58,1212.6 1489.17,1212.6 1489.75,1212.6 1490.34,1212.6 1490.93,1212.6 1491.51,1212.6 1492.1,1212.6 1492.69,1212.6 1493.27,1212.6 1493.86,1212.6 1494.45,1212.6 1495.03,1212.6 1495.62,1212.6 1496.2,1212.6 1496.79,1212.6 1497.38,1212.6 1497.96,1212.6 1498.55,1212.6 1499.14,1212.6 1499.72,1212.6 1500.31,1212.6 1500.9,1212.6 1501.48,1212.6 1502.07,1212.6 1502.65,1212.6 1503.24,1212.6 1503.83,1212.6 1504.41,1212.6 1505,1212.6 1505.59,1212.6 1506.17,1212.6 1506.76,1212.6 1507.35,1212.6 1507.93,1212.6 1508.52,1212.6 1509.11,1212.6 1509.69,1212.6 1510.28,1212.6 1510.86,1212.6 1511.45,1212.6 1512.04,1212.6 1512.62,1212.6 1513.21,1212.6 1513.8,1212.6 1514.38,1212.6 1514.97,1212.6 1515.56,1212.6 1516.14,1212.6 1516.73,1212.6 1517.32,1212.6 1517.9,1212.6 1518.49,1212.6 1519.07,1212.6 1519.66,1212.6 1520.25,1212.6 1520.83,1212.6 1521.42,1212.6 1522.01,1212.6 1522.59,1212.6 1523.18,1212.6 1523.77,1212.6 1524.35,1212.6 1524.94,1212.6 1525.52,1212.6 1526.11,1212.6 1526.7,1212.6 1527.28,1212.6 1527.87,1212.6 1528.46,1212.6 1529.04,1212.6 1529.63,1212.6 1530.22,1212.6 1530.8,1212.6 1531.39,1212.6 1531.98,1212.6 1532.56,1212.6 1533.15,1212.6 1533.73,1212.6 1534.32,1212.6 1534.91,1212.6 1535.49,1212.6 1536.08,1212.6 1536.67,1212.6 1537.25,1212.6 1537.84,1212.6 1538.43,1212.6 1539.01,1212.6 1539.6,1212.6 1540.19,1212.6 1540.77,1212.6 1541.36,1212.6 1541.94,1212.6 1542.53,1212.6 1543.12,1212.6 1543.7,1212.6 1544.29,1212.6 1544.88,1212.6 1545.46,1212.6 1546.05,1212.6 1546.64,1212.6 1547.22,1212.6 1547.81,1212.6 1548.4,1212.6 1548.98,1212.6 1549.57,1212.6 1550.15,1212.6 1550.74,1212.6 1551.33,1212.6 1551.91,1212.6 1552.5,1212.6 1553.09,1212.6 1553.67,1212.6 1554.26,1212.6 1554.85,1212.6 1555.43,1212.6 1556.02,1212.6 1556.6,1212.6 1557.19,1212.6 1557.78,1212.6 1558.36,1212.6 1558.95,1212.6 1559.54,1212.6 1560.12,1212.6 1560.71,1212.6 1561.3,1212.6 1561.88,1212.6 1562.47,1212.6 1563.06,1212.6 1563.64,1212.6 1564.23,1212.6 1564.81,1212.6 1565.4,1212.6 1565.99,1212.6 1566.57,1212.6 1567.16,1212.6 1567.75,1212.6 1568.33,1212.6 1568.92,1212.6 1569.51,1212.6 1570.09,1212.6 1570.68,1212.6 1571.27,1212.6 1571.85,1212.6 1572.44,1212.6 1573.02,1212.6 1573.61,1212.6 1574.2,1212.6 1574.78,1212.6 1575.37,1212.6 1575.96,1212.6 1576.54,1212.6 1577.13,1212.6 1577.72,1212.6 1578.3,1212.6 1578.89,1212.6 1579.47,1212.6 1580.06,1212.6 1580.65,1212.6 1581.23,1212.6 1581.82,1212.6 1582.41,1212.6 1582.99,1212.6 1583.58,1212.6 1584.17,1212.6 1584.75,1212.6 1585.34,1212.6 1585.93,1212.6 1586.51,1212.6 1587.1,1212.6 1587.68,1212.6 1588.27,1212.6 1588.86,1212.6 1589.44,1212.6 1590.03,1212.6 1590.62,1212.6 1591.2,1212.6 1591.79,1212.6 1592.38,1212.6 1592.96,1212.6 1593.55,1212.6 1594.14,1212.6 1594.72,1212.6 1595.31,1212.6 1595.89,1212.6 1596.48,1212.6 1597.07,1212.6 1597.65,1212.6 1598.24,1212.6 1598.83,1212.6 1599.41,1212.6 1600,1212.6 1600.59,1212.6 1601.17,1212.6 1601.76,1212.6 1602.34,1212.6 1602.93,1212.6 1603.52,1212.6 1604.1,1212.6 1604.69,1212.6 1605.28,1212.6 1605.86,1212.6 1606.45,1212.6 1607.04,1212.6 1607.62,1212.6 1608.21,1212.6 1608.8,1212.6 1609.38,1212.6 1609.97,1212.6 1610.55,1212.6 1611.14,1212.6 1611.73,1212.6 1612.31,1212.6 1612.9,1212.6 1613.49,1212.6 1614.07,1212.6 1614.66,1212.6 1615.25,1212.6 1615.83,1212.6 1616.42,1212.6 1617.01,1212.6 1617.59,1212.6 1618.18,1212.6 1618.76,1212.6 1619.35,1212.6 1619.94,1212.6 1620.52,1212.6 1621.11,1212.6 1621.7,1212.6 1622.28,1212.6 1622.87,1212.6 1623.46,1212.6 1624.04,1212.6 1624.63,1212.6 1625.22,1212.6 1625.8,1212.6 1626.39,1212.6 1626.97,1212.6 1627.56,1212.6 1628.15,1212.6 1628.73,1212.6 1629.32,1212.6 1629.91,1212.6 1630.49,1212.6 1631.08,1212.6 1631.67,1212.6 1632.25,1212.6 1632.84,1212.6 1633.42,1212.6 1634.01,1212.6 1634.6,1212.6 1635.18,1212.6 1635.77,1212.6 1636.36,1212.6 1636.94,1212.6 1637.53,1212.6 1638.12,1212.6 1638.7,1212.6 1639.29,1212.6 1639.88,1212.6 1640.46,1212.6 1641.05,1212.6 1641.63,1212.6 1642.22,1212.6 1642.81,1212.6 1643.39,1212.6 1643.98,1212.6 1644.57,1212.6 1645.15,1212.6 1645.74,1212.6 1646.33,1212.6 1646.91,1212.6 1647.5,1212.6 1648.09,1212.6 1648.67,1212.6 1649.26,1212.6 1649.84,1212.6 1650.43,1212.6 1651.02,1212.6 1651.6,1212.6 1652.19,1212.6 1652.78,1212.6 1653.36,1212.6 1653.95,1212.6 1654.54,1212.6 1655.12,1212.6 1655.71,1212.6 1656.29,1212.6 1656.88,1212.6 1657.47,1212.6 1658.05,1212.6 1658.64,1212.6 1659.23,1212.6 1659.81,1212.6 1660.4,1212.6 1660.99,1212.6 1661.57,1212.6 1662.16,1212.6 1662.75,1212.6 1663.33,1212.6 1663.92,1212.6 1664.5,1212.6 1665.09,1212.6 1665.68,1212.6 1666.26,1212.6 1666.85,1212.6 1667.44,1212.6 1668.02,1212.6 1668.61,1212.6 1669.2,1212.6 1669.78,1212.6 1670.37,1212.6 1670.96,1212.6 1671.54,1212.6 1672.13,1212.6 1672.71,1212.6 1673.3,1212.6 1673.89,1212.6 1674.47,1212.6 1675.06,1212.6 1675.65,1212.6 1676.23,1212.6 1676.82,1212.6 1677.41,1212.6 1677.99,1212.6 1678.58,1212.6 1679.17,1212.6 1679.75,1212.6 1680.34,1212.6 1680.92,1212.6 1681.51,1212.6 1682.1,1212.6 1682.68,1212.6 1683.27,1212.6 1683.86,1212.6 1684.44,1212.6 1685.03,1212.6 1685.62,1212.6 1686.2,1212.6 1686.79,1212.6 1687.37,1212.6 1687.96,1212.6 1688.55,1212.6 1689.13,1212.6 1689.72,1212.6 1690.31,1212.6 1690.89,1212.6 1691.48,1212.6 1692.07,1212.6 1692.65,1212.6 1693.24,1212.6 1693.83,1212.6 1694.41,1212.6 1695,1212.6 1695.58,1212.6 1696.17,1212.6 1696.76,1212.6 1697.34,1212.6 1697.93,1212.6 1698.52,1212.6 1699.1,1212.6 1699.69,1212.6 1700.28,1212.6 1700.86,1212.6 1701.45,1212.6 1702.04,1212.6 1702.62,1212.6 1703.21,1212.6 1703.79,1212.6 1704.38,1212.6 1704.97,1212.6 1705.55,1212.6 1706.14,1212.6 1706.73,1212.6 1707.31,1212.6 1707.9,1212.6 1708.49,1212.6 1709.07,1212.6 1709.66,1212.6 1710.24,1212.6 1710.83,1212.6 1711.42,1212.6 1712,1212.6 1712.59,1212.6 1713.18,1212.6 1713.76,1212.6 1714.35,1212.6 1714.94,1212.6 1715.52,1212.6 1716.11,1212.6 1716.7,1212.6 1717.28,1212.6 1717.87,1212.6 1718.45,1212.6 1719.04,1212.6 1719.63,1212.6 1720.21,1212.6 1720.8,1212.6 1721.39,1212.6 1721.97,1212.6 1722.56,1212.6 1723.15,1212.6 1723.73,1212.6 1724.32,1212.6 1724.91,1212.6 1725.49,1212.6 1726.08,1212.6 1726.66,1212.6 1727.25,1212.6 1727.84,1212.6 1728.42,1212.6 1729.01,1212.6 1729.6,1212.6 1730.18,1212.6 1730.77,1212.6 1731.36,1212.6 1731.94,1212.6 1732.53,1212.6 1733.11,1212.6 1733.7,1212.6 1734.29,1212.6 1734.87,1212.6 1735.46,1212.6 1736.05,1212.6 1736.63,1212.6 1737.22,1212.6 1737.81,1212.6 1738.39,1212.6 1738.98,1212.6 1739.57,1212.6 1740.15,1212.6 1740.74,1212.6 1741.32,1212.6 1741.91,1212.6 1742.5,1212.6 1743.08,1212.6 1743.67,1212.6 1744.26,1212.6 1744.84,1212.6 1745.43,1212.6 1746.02,1212.6 1746.6,1212.6 1747.19,1212.6 1747.78,1212.6 1748.36,1212.6 1748.95,1212.6 1749.53,1212.6 1750.12,1212.6 1750.71,1212.6 1751.29,1212.6 1751.88,1212.6 1752.47,1212.6 1753.05,1212.6 1753.64,1212.6 1754.23,1212.6 1754.81,1212.6 1755.4,1212.6 1755.99,1212.6 1756.57,1212.6 1757.16,1212.6 1757.74,1212.6 1758.33,1212.6 1758.92,1212.6 1759.5,1212.6 1760.09,1212.6 1760.68,1212.6 1761.26,1212.6 1761.85,1212.6 1762.44,1212.6 1763.02,1212.6 1763.61,1212.6 1764.19,1212.6 1764.78,1212.6 1765.37,1212.6 1765.95,1212.6 1766.54,1212.6 1767.13,1212.6 1767.71,1212.6 1768.3,1212.6 1768.89,1212.6 1769.47,1212.6 1770.06,1212.6 1770.65,1212.6 1771.23,1212.6 1771.82,1212.6 1772.4,1212.6 1772.99,1212.6 1773.58,1212.6 1774.16,1212.6 1774.75,1212.6 1775.34,1212.6 1775.92,1212.6 1776.51,1212.6 1777.1,1212.6 1777.68,1212.6 1778.27,1212.6 1778.86,1212.6 1779.44,1212.6 1780.03,1212.6 1780.61,1212.6 1781.2,1212.6 1781.79,1212.6 1782.37,1212.6 1782.96,1212.6 1783.55,1212.6 1784.13,1212.6 1784.72,1212.6 1785.31,1212.6 1785.89,1212.6 1786.48,1212.6 1787.06,1212.6 1787.65,1212.6 1788.24,1212.6 1788.82,1212.6 1789.41,1212.6 1790,1212.6 1790.58,1212.6 1791.17,1212.6 1791.76,1212.6 1792.34,1212.6 1792.93,1212.6 1793.52,1212.6 1794.1,1212.6 1794.69,1212.6 1795.27,1212.6 1795.86,1212.6 1796.45,1212.6 1797.03,1212.6 1797.62,1212.6 1798.21,1212.6 1798.79,1212.6 1799.38,1212.6 1799.97,1212.6 1800.55,1212.6 1801.14,1212.6 1801.73,1212.6 1802.31,1212.6 1802.9,1212.6 1803.48,1212.6 1804.07,1212.6 1804.66,1212.6 1805.24,1212.6 1805.83,1212.6 1806.42,1212.6 1807,1212.6 1807.59,1212.6 1808.18,1212.6 1808.76,1212.6 1809.35,1212.6 1809.94,1212.6 1810.52,1212.6 1811.11,1212.6 1811.69,1212.6 1812.28,1212.6 1812.87,1212.6 1813.45,1212.6 1814.04,1212.6 1814.63,1212.6 1815.21,1212.6 1815.8,1212.6 1816.39,1212.6 1816.97,1212.6 1817.56,1212.6 1818.14,1212.6 1818.73,1212.6 1819.32,1212.6 1819.9,1212.6 1820.49,1212.6 1821.08,1212.6 1821.66,1212.6 1822.25,1212.6 1822.84,1212.6 1823.42,1212.6 1824.01,1212.6 1824.6,1212.6 1825.18,1212.6 1825.77,1212.6 1826.35,1212.6 1826.94,1212.6 1827.53,1212.6 1828.11,1212.6 1828.7,1212.6 1829.29,1212.6 1829.87,1212.6 1830.46,1212.6 1831.05,1212.6 1831.63,1212.6 1832.22,1212.6 1832.81,1212.6 1833.39,1212.6 1833.98,1212.6 1834.56,1212.6 1835.15,1212.6 1835.74,1212.6 1836.32,1212.6 1836.91,1212.6 1837.5,1212.6 1838.08,1212.6 1838.67,1212.6 1839.26,1212.6 1839.84,1212.6 1840.43,1212.6 1841.01,1212.6 1841.6,1212.6 1842.19,1212.6 1842.77,1212.6 1843.36,1212.6 1843.95,1212.6 1844.53,1212.6 1845.12,1212.6 1845.71,1212.6 1846.29,1212.6 1846.88,1212.6 1847.47,1212.6 1848.05,1212.6 1848.64,1212.6 1849.22,1212.6 1849.81,1212.6 1850.4,1212.6 1850.98,1212.6 1851.57,1212.6 1852.16,1212.6 1852.74,1212.6 1853.33,1212.6 1853.92,1212.6 1854.5,1212.6 1855.09,1212.6 1855.68,1212.6 1856.26,1212.6 1856.85,1212.6 1857.43,1212.6 1858.02,1212.6 1858.61,1212.6 1859.19,1212.6 1859.78,1212.6 1860.37,1212.6 1860.95,1212.6 1861.54,1212.6 1862.13,1212.6 1862.71,1212.6 1863.3,1212.6 1863.88,1212.6 1864.47,1212.6 1865.06,1212.6 1865.64,1212.6 1866.23,1212.6 1866.82,1212.6 1867.4,1212.6 1867.99,1212.6 1868.58,1212.6 1869.16,1212.6 1869.75,1212.6 1870.34,1212.6 1870.92,1212.6 1871.51,1212.6 1872.09,1212.6 1872.68,1212.6 1873.27,1212.6 1873.85,1212.6 1874.44,1212.6 1875.03,1212.6 1875.61,1212.6 1876.2,1212.6 1876.79,1212.6 1877.37,1212.6 1877.96,1212.6 1878.55,1212.6 1879.13,1212.6 1879.72,1212.6 1880.3,1212.6 1880.89,1212.6 1881.48,1212.6 1882.06,1212.6 1882.65,1212.6 1883.24,1212.6 1883.82,1212.6 1884.41,1212.6 1885,1212.6 1885.58,1212.6 1886.17,1212.6 1886.76,1212.6 1887.34,1212.6 1887.93,1212.6 1888.51,1212.6 1889.1,1212.6 1889.69,1212.6 1890.27,1212.6 1890.86,1212.6 1891.45,1212.6 1892.03,1212.6 1892.62,1212.6 1893.21,1212.6 1893.79,1212.6 1894.38,1212.6 1894.96,1212.6 1895.55,1212.6 1896.14,1212.6 1896.72,1212.6 1897.31,1212.6 1897.9,1212.6 1898.48,1212.6 1899.07,1212.6 1899.66,1212.6 1900.24,1212.6 1900.83,1212.6 1901.42,1212.6 1902,1212.6 1902.59,1212.6 1903.17,1212.6 1903.76,1212.6 1904.35,1212.6 1904.93,1212.6 1905.52,1212.6 1906.11,1212.6 1906.69,1212.6 1907.28,1212.6 1907.87,1212.6 1908.45,1212.6 1909.04,1212.6 1909.63,1212.6 1910.21,1212.6 1910.8,1212.6 1911.38,1212.6 1911.97,1212.6 1912.56,1212.6 1913.14,1212.6 1913.73,1212.6 1914.32,1212.6 1914.9,1212.6 1915.49,1212.6 1916.08,1212.6 1916.66,1212.6 1917.25,1212.6 1917.83,1212.6 1918.42,1212.6 1919.01,1212.6 1919.59,1212.6 1920.18,1212.6 1920.77,1212.6 1921.35,1212.6 1921.94,1212.6 1922.53,1212.6 1923.11,1212.6 1923.7,1212.6 1924.29,1212.6 1924.87,1212.6 1925.46,1212.6 1926.04,1212.6 1926.63,1212.6 1927.22,1212.6 1927.8,1212.6 1928.39,1212.6 1928.98,1212.6 1929.56,1212.6 1930.15,1212.6 1930.74,1212.6 1931.32,1212.6 1931.91,1212.6 1932.5,1212.6 1933.08,1212.6 1933.67,1212.6 1934.25,1212.6 1934.84,1212.6 1935.43,1212.6 1936.01,1212.6 1936.6,1212.6 1937.19,1212.6 1937.77,1212.6 1938.36,1212.6 1938.95,1212.6 1939.53,1212.6 1940.12,1212.6 1940.71,1212.6 1941.29,1212.6 1941.88,1212.6 1942.46,1212.6 1943.05,1212.6 1943.64,1212.6 1944.22,1212.6 1944.81,1212.6 1945.4,1212.6 1945.98,1212.6 1946.57,1212.6 1947.16,1212.6 1947.74,1212.6 1948.33,1212.6 1948.91,1212.6 1949.5,1212.6 1950.09,1212.6 1950.67,1212.6 1951.26,1212.6 1951.85,1212.6 1952.43,1212.6 1953.02,1212.6 1953.61,1212.6 1954.19,1212.6 1954.78,1212.6 1955.37,1212.6 1955.95,1212.6 1956.54,1212.6 1957.12,1212.6 1957.71,1212.6 1958.3,1212.6 1958.88,1212.6 1959.47,1212.6 1960.06,1212.6 1960.64,1212.6 1961.23,1212.6 1961.82,1212.6 1962.4,1212.6 1962.99,1212.6 1963.58,1212.6 1964.16,1212.6 1964.75,1212.6 1965.33,1212.6 1965.92,1212.6 1966.51,1212.6 1967.09,1212.6 1967.68,1212.6 1968.27,1212.6 1968.85,1212.6 1969.44,1212.6 1970.03,1212.6 1970.61,1212.6 1971.2,1212.6 1971.78,1212.6 1972.37,1212.6 1972.96,1212.6 1973.54,1212.6 1974.13,1212.6 1974.72,1212.6 1975.3,1212.6 1975.89,1212.6 1976.48,1212.6 1977.06,1212.6 1977.65,1212.6 1978.24,1212.6 1978.82,1212.6 1979.41,1212.6 1979.99,1212.6 1980.58,1212.6 1981.17,1212.6 1981.75,1212.6 1982.34,1212.6 1982.93,1212.6 1983.51,1212.6 1984.1,1212.6 1984.69,1212.6 1985.27,1212.6 1985.86,1212.6 1986.45,1212.6 1987.03,1212.6 1987.62,1212.6 1988.2,1212.6 1988.79,1212.6 1989.38,1212.6 1989.96,1212.6 1990.55,1212.6 1991.14,1212.6 1991.72,1212.6 1992.31,1212.6 1992.9,1212.6 1993.48,1212.6 1994.07,1212.6 1994.65,1212.6 1995.24,1212.6 1995.83,1212.6 1996.41,1212.6 1997,1212.6 1997.59,1212.6 1998.17,1212.6 1998.76,1212.6 1999.35,1212.6 1999.93,1212.6 2000.52,1212.6 2001.11,1212.6 2001.69,1212.6 2002.28,1212.6 2002.86,1212.6 2003.45,1212.6 2004.04,1212.6 2004.62,1212.6 2005.21,1212.6 2005.8,1212.6 2006.38,1212.6 2006.97,1212.6 2007.56,1212.6 2008.14,1212.6 2008.73,1212.6 2009.32,1212.6 2009.9,1212.6 2010.49,1212.6 2011.07,1212.6 2011.66,1212.6 2012.25,1212.6 2012.83,1212.6 2013.42,1212.6 2014.01,1212.6 2014.59,1212.6 2015.18,1212.6 2015.77,1212.6 2016.35,1212.6 2016.94,1212.6 2017.53,1212.6 2018.11,1212.6 2018.7,1212.6 2019.28,1212.6 2019.87,1212.6 2020.46,1212.6 2021.04,1212.6 2021.63,1212.6 2022.22,1212.6 2022.8,1212.6 2023.39,1212.6 2023.98,1212.6 2024.56,1212.6 2025.15,1212.6 2025.73,1212.6 2026.32,1212.6 2026.91,1212.6 2027.49,1212.6 2028.08,1212.6 2028.67,1212.6 2029.25,1212.6 2029.84,1212.6 2030.43,1212.6 2031.01,1212.6 2031.6,1212.6 2032.19,1212.6 2032.77,1212.6 2033.36,1212.6 2033.94,1212.6 2034.53,1212.6 2035.12,1212.6 2035.7,1212.6 2036.29,1212.6 2036.88,1212.6 2037.46,1212.6 2038.05,1212.6 2038.64,1212.6 2039.22,1212.6 2039.81,1212.6 2040.4,1212.6 2040.98,1212.6 2041.57,1212.6 2042.15,1212.6 2042.74,1212.6 2043.33,1212.6 2043.91,1212.6 2044.5,1212.6 2045.09,1212.6 2045.67,1212.6 2046.26,1212.6 2046.85,1212.6 2047.43,1212.6 2048.02,1212.6 2048.6,1212.6 2049.19,1212.6 2049.78,1212.6 2050.36,1212.6 2050.95,1212.6 2051.54,1212.6 2052.12,1212.6 2052.71,1212.6 2053.3,1212.6 2053.88,1212.6 2054.47,1212.6 2055.06,1212.6 2055.64,1212.6 2056.23,1212.6 2056.81,1212.6 2057.4,1212.6 2057.99,1212.6 2058.57,1212.6 2059.16,1212.6 2059.75,1212.6 2060.33,1212.6 2060.92,1212.6 2061.51,1212.6 2062.09,1212.6 2062.68,1212.6 2063.27,1212.6 2063.85,1212.6 2064.44,1212.6 2065.02,1212.6 2065.61,1212.6 2066.2,1212.6 2066.78,1212.6 2067.37,1212.6 2067.96,1212.6 2068.54,1212.6 2069.13,1212.6 2069.72,1212.6 2070.3,1212.6 2070.89,1212.6 2071.48,1212.6 2072.06,1212.6 2072.65,1212.6 2073.23,1212.6 2073.82,1212.6 2074.41,1212.6 2074.99,1212.6 2075.58,1212.6 2076.17,1212.6 2076.75,1212.6 2077.34,1212.6 2077.93,1212.6 2078.51,1212.6 2079.1,1212.6 2079.68,1212.6 2080.27,1212.6 2080.86,1212.6 2081.44,1212.6 2082.03,1212.6 2082.62,1212.6 2083.2,1212.6 2083.79,1212.6 2084.38,1212.6 2084.96,1212.6 2085.55,1212.6 2086.14,1212.6 2086.72,1212.6 2087.31,1212.6 2087.89,1212.6 2088.48,1212.6 2089.07,1212.6 2089.65,1212.6 2090.24,1212.6 2090.83,1212.6 2091.41,1212.6 2092,1212.6 2092.59,1212.6 2093.17,1212.6 2093.76,1212.6 2094.35,1212.6 2094.93,1212.6 2095.52,1212.6 2096.1,1212.6 2096.69,1212.6 2097.28,1212.6 2097.86,1212.6 2098.45,1212.6 2099.04,1212.6 2099.62,1212.6 2100.21,1212.6 2100.8,1212.6 2101.38,1212.6 2101.97,1212.6 2102.55,1212.6 2103.14,1212.6 2103.73,1212.6 2104.31,1212.6 2104.9,1212.6 2105.49,1212.6 2106.07,1212.6 2106.66,1212.6 2107.25,1212.6 2107.83,1212.6 2108.42,1212.6 2109.01,1212.6 2109.59,1212.6 2110.18,1212.6 2110.76,1212.6 2111.35,1212.6 2111.94,1212.6 2112.52,1212.6 2113.11,1212.6 2113.7,1212.6 2114.28,1212.6 2114.87,1212.6 2115.46,1212.6 2116.04,1212.6 2116.63,1212.6 2117.22,1212.6 2117.8,1212.6 2118.39,1212.6 2118.97,1212.6 2119.56,1212.6 2120.15,1212.6 2120.73,1212.6 2121.32,1212.6 2121.91,1212.6 2122.49,1212.6 2123.08,1212.6 2123.67,1212.6 2124.25,1212.6 2124.84,1212.6 2125.42,1212.6 2126.01,1212.6 2126.6,1212.6 2127.18,1212.6 2127.77,1212.6 2128.36,1212.6 2128.94,1212.6 2129.53,1212.6 2130.12,1212.6 2130.7,1212.6 2131.29,1212.6 2131.88,1212.6 2132.46,1212.6 2133.05,1212.6 2133.63,1212.6 2134.22,1212.6 2134.81,1212.6 2135.39,1212.6 2135.98,1212.6 2136.57,1212.6 2137.15,1212.6 2137.74,1212.6 2138.33,1212.6 2138.91,1212.6 2139.5,1212.6 2140.09,1212.6 2140.67,1212.6 2141.26,1212.6 2141.84,1212.6 2142.43,1212.6 2143.02,1212.6 2143.6,1212.6 2144.19,1212.6 2144.78,1212.6 2145.36,1212.6 2145.95,1212.6 2146.54,1212.6 2147.12,1212.6 2147.71,1212.6 2148.3,1212.6 2148.88,1212.6 2149.47,1212.6 2150.05,1212.6 2150.64,1212.6 2151.23,1212.6 2151.81,1212.6 2152.4,1212.6 2152.99,1212.6 2153.57,1212.6 2154.16,1212.6 2154.75,1212.6 2155.33,1212.6 2155.92,1212.6 2156.5,1212.6 2157.09,1212.6 2157.68,1212.6 2158.26,1212.6 \"/>\n<polyline clip-path=\"url(#clip742)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1562.84,1195.95 1399.3,899.083 \"/>\n<polyline clip-path=\"url(#clip742)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1228.68 985.439,1195.95 2158.26,1195.95 2158.26,1228.68 985.439,1228.68 \"/>\n<path clip-path=\"url(#clip740)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip740)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip740)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip740)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip740)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip740)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip740)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip740)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip740)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip740)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip740)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip740)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip740)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip740)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip740)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip740)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip740)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip740)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip740)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip740)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip740)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip740)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip740)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip740)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip740)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip740)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip740)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip740)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip740)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip740)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip740)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip740)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip740)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip740)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip740)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip743\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip743)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip743)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip743)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip743)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip743)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip743)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip743)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip743)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip743)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip743)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip740)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip740)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip740)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip740)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip740)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip740)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip740)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip740)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip740)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip740)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip740)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip740)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip740)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip740)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip740)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip740)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip740)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip740)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip740)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip740)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip740)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip740)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip740)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip740)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip740)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip740)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip740)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip740)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip740)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip740)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip740)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip740)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip740)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip740)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip740)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip740)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip740)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip740)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip740)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip740)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip740)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip740)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip740)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip740)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip740)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip740)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip740)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip740)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip740)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip740)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip740)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip740)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip743)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-1577.5 161.555,-2922.08 162.114,-4155.78 162.673,-5286.05 163.232,-6319.78 163.792,-7263.33 164.351,-8122.62 164.91,-8903.13 165.469,-8354.17 166.029,-9052.18 166.588,-9682.55 167.147,-10249.6 167.706,-10757.6 168.266,-11210.1 168.825,-11611 169.384,-11963.4 169.943,-11486.9 170.503,-11766.3 171.062,-12022.4 171.621,-12240.4 172.18,-12422.8 172.74,-12572 173.299,-12166.1 173.858,-11793.2 174.417,-11884.8 174.977,-11538.5 175.536,-11574.4 176.095,-11243.1 176.655,-11276.9 177.214,-10967 177.773,-10668.9 178.332,-10637.6 178.892,-10602.5 179.451,-10547.6 180.01,-10487.4 180.569,-9991.84 181.129,-9912.58 181.688,-9455.24 182.247,-9197.72 182.806,-9136.22 183.366,-9052.44 183.925,-8818.49 184.484,-8600.38 185.043,-8357.34 185.603,-8247.2 186.162,-8138.98 186.721,-7901.37 187.28,-7785.51 187.84,-7560.56 188.399,-7239.41 188.958,-7121.63 189.517,-6820.26 190.077,-6687.17 190.636,-6472.75 191.195,-6345.4 191.754,-5995.78 192.314,-5810.88 192.873,-5621.52 193.432,-5509.17 193.991,-5329.64 194.551,-5103.91 195.11,-4943.02 195.669,-4839 196.228,-4730.6 196.788,-4516.24 197.347,-4310.84 197.906,-4215.67 198.465,-4072.17 199.025,-3833.59 199.584,-3704.65 200.143,-3574.11 200.702,-3449.26 201.262,-3245.3 201.821,-3127.4 202.38,-3015.14 202.939,-2832.5 203.499,-2656.67 204.058,-2555.08 204.617,-2388.98 205.176,-2228.4 205.736,-2072.74 206.295,-1955.28 206.854,-1840.6 207.413,-1762.32 207.973,-1742.86 208.532,-1664.9 209.091,-1551.16 209.65,-1445.75 210.21,-1310.94 210.769,-1269.9 211.328,-1228.85 211.887,-1131.85 212.447,-984.688 213.006,-975.057 213.565,-907.798 214.124,-866.85 214.684,-782.055 215.243,-743.04 215.802,-681.839 216.361,-622.445 216.921,-564.203 217.48,-410.633 218.039,-358.699 218.598,-306.734 219.158,-280.112 219.717,-256.301 220.276,-232.163 220.835,-205.68 221.395,-157.651 221.954,-134.125 222.513,-88.3788 223.072,-64.1818 223.632,3.49515 224.191,23.8905 224.75,65.3579 225.309,84.8273 225.869,127.493 226.428,166.064 226.987,242.201 227.546,297.608 228.106,328.938 228.665,402.927 229.224,447.946 229.783,473.404 230.343,476.557 230.902,507.295 231.461,517.078 232.02,545.529 232.58,552.871 233.139,601.42 233.698,606.177 234.257,612.73 234.817,634.371 235.376,696.352 235.935,734.185 236.494,753.888 237.054,788.659 237.613,770.653 238.172,804.938 238.731,859.733 239.291,907.7 239.85,919.441 240.409,963.671 240.968,993.404 241.528,966.883 242.087,942.469 242.646,935.303 243.205,946.897 243.765,958.694 244.324,955.71 244.883,968.271 245.442,926.087 246.002,922.09 246.561,953.054 247.12,984.88 247.679,993.522 248.239,987.643 248.798,1012.84 249.357,1042.81 249.916,1020.27 250.476,1015.15 251.035,1027.78 251.594,1019.78 252.153,1016.08 252.713,1046.02 253.272,1022.57 253.831,998.671 254.39,1001.55 254.95,1013.29 255.509,1021.39 256.068,1014.76 256.627,1009.38 257.187,969.422 257.746,982.11 258.305,963.648 258.864,965.992 259.424,984.489 259.983,1020.35 260.542,1068.8 261.101,1089.5 261.661,1079.55 262.22,1074.53 262.779,1103.16 263.338,1092.64 263.898,1085.07 264.457,1082.8 265.016,1108.37 265.575,1113.63 266.135,1103.32 266.694,1113.09 267.253,1087.36 267.812,1076 268.372,1104.72 268.931,1094.93 269.49,1104.62 270.049,1092.76 270.609,1101.97 271.168,1079.3 271.727,1108.17 272.286,1117.95 272.846,1140.15 273.405,1147.47 273.964,1106.18 274.523,1100.78 275.083,1126.8 275.642,1120.74 276.201,1099.13 276.76,1109.8 277.32,1168.63 277.879,1160.82 278.438,1168.74 278.997,1190.87 279.557,1177.41 280.116,1164.93 280.675,1134.4 281.234,1137.22 281.794,1142.38 282.353,1148.83 282.912,1121.94 283.471,1144.5 284.031,1148.17 284.59,1154.22 285.149,1158.07 285.708,1148.68 286.268,1136.19 286.827,1096.56 287.386,1073.51 287.945,1065.17 288.505,1055.36 289.064,1050.65 289.623,1063.12 290.182,1120.88 290.742,1113.6 291.301,1102.23 291.86,1092.68 292.419,1081.11 292.979,1041.69 293.538,1052.89 294.097,1112.31 294.656,1103.12 295.216,1110.82 295.775,1131.31 296.334,1103.23 296.893,1108.13 297.453,1097.92 298.012,1124.38 298.571,1093.73 299.13,1086.3 299.69,1046.1 300.249,1038.42 300.808,1051.76 301.368,1028.16 301.927,1020.27 302.486,1013.68 303.045,1039.43 303.605,1034.14 304.164,1027.62 304.723,1067.29 305.282,1029 305.842,1006.5 306.401,986.377 306.96,983.594 307.519,977.084 308.079,973.231 308.638,985.286 309.197,962.355 309.756,960.047 310.316,1004.34 310.875,1000.55 311.434,997.117 311.993,1040.71 312.553,1050.46 313.112,1071.57 313.671,1061.29 314.23,1066.52 314.79,1043.72 315.349,1051.22 315.908,1061.13 316.467,1036.96 317.027,1047.29 317.586,1071.26 318.145,1077.18 318.704,1066.21 319.264,1076.89 319.823,1069.16 320.382,1060.07 320.941,1052.26 321.501,1043.24 322.06,1036.49 322.619,1044.3 323.178,1053.73 323.738,1078.27 324.297,1068.79 324.856,1062.06 325.415,1065.82 325.975,1039.68 326.534,1030.11 327.093,1040.08 327.652,1015.26 328.212,991.056 328.771,982.284 329.33,1004.86 329.889,1013.32 330.449,1037.27 331.008,994.216 331.567,971.634 332.126,980.862 332.686,973.064 333.245,966.528 333.804,972.992 334.363,967.397 334.923,992.057 335.482,953.974 336.041,983.23 336.6,972.698 337.16,901.027 337.719,931.563 338.278,993.953 338.837,984.551 339.397,978.187 339.956,954.095 340.515,948.057 341.074,994.162 341.634,1003.06 342.193,997.881 342.752,993.687 343.311,983.749 343.871,992.544 344.43,985.287 344.989,990.275 345.548,965.631 346.108,978.799 346.667,938.883 347.226,980.137 347.785,975.534 348.345,949.317 348.904,944.122 349.463,953.632 350.022,915.984 350.582,878.096 351.141,875.017 351.7,870.513 352.259,856.023 352.819,903.61 353.378,882.219 353.937,893.856 354.496,921.188 355.056,933.613 355.615,897.861 356.174,878.616 356.733,873.943 357.293,870.966 357.852,869.108 358.411,866.942 358.97,878.999 359.53,926.918 360.089,923.1 360.648,937.461 361.207,929.939 361.767,955.787 362.326,963.918 362.885,969.367 363.444,976.953 364.004,920.084 364.563,933.078 365.122,914.033 365.681,908.816 366.241,903.138 366.8,912.665 367.359,925.991 367.918,936.963 368.478,930.918 369.037,940.381 369.596,915.389 370.155,879.046 370.715,909.049 371.274,888.32 371.833,866.172 372.392,863.275 372.952,793.93 373.511,811.01 374.07,808.837 374.629,827.344 375.189,827.873 375.748,838.63 376.307,822.492 376.866,802.355 377.426,805.222 377.985,822.628 378.544,839.896 379.103,818.265 379.663,834.218 380.222,831.968 380.781,811.919 381.34,799.401 381.9,845.644 382.459,812.193 383.018,794.125 383.577,777.745 384.137,761.544 384.696,782.031 385.255,788.19 385.814,773.908 386.374,758.537 386.933,789.822 387.492,822.596 388.051,840.258 388.611,856.214 389.17,838.692 389.729,866.405 390.288,812.755 390.848,794.832 391.407,812.994 391.966,784.827 392.525,786.375 393.085,786.337 393.644,819.566 394.203,819.932 394.762,803.063 395.322,800.409 395.881,864.154 396.44,828.628 396.999,807.686 397.559,809.93 398.118,827.569 398.677,824.407 399.236,806.481 399.796,822.18 400.355,803.653 400.914,801.301 401.473,749.524 402.033,800.223 402.592,797.972 403.151,780.294 403.71,781.64 404.27,748.764 404.829,765.196 405.388,783.341 405.947,799.162 406.507,814.96 407.066,827.865 407.625,827.252 408.184,824.29 408.744,801.878 409.303,784.214 409.862,785.945 410.421,798.642 410.981,796.69 411.54,799.2 412.099,763.695 412.658,775.958 413.218,791.822 413.777,808.302 414.336,790.737 414.895,806.662 415.455,788.615 416.014,807.934 416.573,807.275 417.132,789.487 417.692,806.077 418.251,804.601 418.81,753.828 419.369,772.237 419.929,743.991 420.488,744.322 421.047,759.517 421.606,773.359 422.166,793.725 422.725,807.849 423.284,820.014 423.843,820.642 424.403,846.287 424.962,827.702 425.521,820.458 426.08,818.089 426.64,814.045 427.199,810.75 427.758,794.609 428.318,811.049 428.877,826.122 429.436,810.774 429.995,827.616 430.555,840.415 431.114,819.85 431.673,864.795 432.232,875.098 432.792,854.651 433.351,833.948 433.91,831.081 434.469,797.32 435.029,796.716 435.588,779.562 436.147,778.724 436.706,761.747 437.266,774.985 437.825,775.855 438.384,792.618 438.943,787.769 439.503,768.853 440.062,784.203 440.621,781.389 441.18,749.161 441.74,764.08 442.299,729.11 442.858,761.759 443.417,761.756 443.977,761.425 444.536,794.577 445.095,794.27 445.654,825.608 446.214,805.408 446.773,800.789 447.332,817.526 447.891,829.839 448.451,841.372 449.01,836.445 449.569,848.268 450.128,857.495 450.688,835.438 451.247,835.701 451.806,848.421 452.365,825.354 452.925,791.147 453.484,792.615 454.043,804.681 454.602,836.449 455.162,834.358 455.721,831.525 456.28,826.515 456.839,792.399 457.399,758.617 457.958,738.919 458.517,769.387 459.076,751.383 459.636,750.217 460.195,730.158 460.754,746.648 461.313,727.258 461.873,776.905 462.432,772.905 462.991,784.182 463.55,765.161 464.11,845.428 464.669,854.693 465.228,860.746 465.787,853.393 466.347,863.505 466.906,872.409 467.465,849.987 468.024,862.163 468.584,838.452 469.143,864.897 469.702,843.346 470.261,836.837 470.821,829.906 471.38,809.26 471.939,802.812 472.498,831.526 473.058,808.343 473.617,788.982 474.176,770.91 474.735,817.296 475.295,814.382 475.854,826.845 476.413,807.911 476.972,805.107 477.532,803.987 478.091,812.265 478.65,837.969 479.209,802.059 479.769,779.814 480.328,727.819 480.887,714.891 481.446,713.81 482.006,702.247 482.565,654.951 483.124,660.621 483.683,666.532 484.243,668.722 484.802,656.393 485.361,675.657 485.92,678.058 486.48,664.895 487.039,651.909 487.598,661.372 488.157,622.205 488.717,613.856 489.276,606.295 489.835,613.658 490.394,620.731 490.954,629.624 491.513,621.81 492.072,645.381 492.631,665.132 493.191,651.02 493.75,671.054 494.309,660.03 494.868,670.628 495.428,706.177 495.987,724.732 496.546,727.603 497.105,711.407 497.665,746.263 498.224,715.935 498.783,747.658 499.342,732.719 499.902,735.331 500.461,716.244 501.02,717.312 501.579,716.71 502.139,717.467 502.698,717.74 503.257,736.335 503.816,703.56 504.376,689.946 504.935,724.375 505.494,707.451 506.053,723.234 506.613,706.393 507.172,691.373 507.731,696.749 508.29,732.577 508.85,733.084 509.409,731.502 509.968,748.617 510.527,728.166 511.087,725.463 511.646,705.583 512.205,705.716 512.764,706.298 513.324,691.768 513.883,706.282 514.442,724.601 515.001,723.773 515.561,740.266 516.12,721.222 516.679,737.273 517.238,737.166 517.798,753.715 518.357,755.701 518.916,749.327 519.475,749.683 520.035,732.874 520.594,717.171 521.153,701.54 521.712,688.894 522.272,693.841 522.831,693.537 523.39,711.134 523.949,697.622 524.509,681.212 525.068,685.39 525.627,689.506 526.186,678.29 526.746,678.102 527.305,697.407 527.864,698.149 528.423,702.887 528.983,686.364 529.542,706.356 530.101,708.165 530.66,725.666 531.22,726.452 531.779,743.275 532.338,743.13 532.897,739.788 533.457,709.425 534.016,709.2 534.575,725.755 535.134,692.106 535.694,709.606 536.253,709.251 536.812,739.73 537.371,722.159 537.931,737.508 538.49,737.943 539.049,770.916 539.608,785.806 540.168,785.547 540.727,784.266 541.286,746.991 541.845,747.324 542.405,729.285 542.964,729.035 543.523,715.049 544.082,682.843 544.642,652.313 545.201,623.305 545.76,628.216 546.319,681.36 546.879,679.964 547.438,650.119 547.997,636.899 548.556,609.345 549.116,627.341 549.675,647.507 550.234,617.371 550.793,623.693 551.353,643.234 551.912,646.683 552.471,649.241 553.031,666.615 553.59,734.514 554.149,750.947 554.708,747.561 555.268,731.253 555.827,711.819 556.386,699.81 556.945,682.148 557.505,682.037 558.064,668.36 558.623,655.929 559.182,657.019 559.742,667.574 560.301,640.838 560.86,642.8 561.419,662.331 561.979,647.636 562.538,654.903 563.097,657.816 563.656,645.136 564.216,699.279 564.775,698.662 565.334,703.78 565.893,688.526 566.453,677.146 567.012,680.883 567.571,717.287 568.13,702.559 568.69,702.529 569.249,703.1 569.808,738.925 570.367,771.031 570.927,766.863 571.486,765.725 572.045,758.666 572.604,742.013 573.164,758.528 573.723,756.633 574.282,737.573 574.841,769.061 575.401,768.184 575.96,767.039 576.519,794.504 577.078,805.549 577.638,783.964 578.197,796.446 578.756,793.415 579.315,771.862 579.875,765.159 580.434,746.889 580.993,762.614 581.552,743.499 582.112,712.227 582.671,692.803 583.23,706.282 583.789,741.677 584.349,706.732 584.908,742.701 585.467,755.772 586.026,770.145 586.586,778.828 587.145,774.767 587.704,753.408 588.263,748.955 588.823,748.192 589.382,761.711 589.941,756.934 590.5,755.768 591.06,769.435 591.619,797.169 592.178,772.958 592.737,785.067 593.297,769.1 593.856,799.22 594.415,794.035 594.974,801.356 595.534,828.441 596.093,803.091 596.652,809.722 597.211,849.835 597.771,844.607 598.33,834.7 598.889,840.369 599.448,820.511 600.008,846.675 600.567,809.038 601.126,834.275 601.685,829.512 602.245,837.644 602.804,859.131 603.363,851.86 603.922,846.499 604.482,822.917 605.041,783.026 605.6,774.697 606.159,770.726 606.719,768.581 607.278,743.93 607.837,756.364 608.396,737.896 608.956,739.916 609.515,707.883 610.074,676.329 610.633,695.157 611.193,725.537 611.752,707.11 612.311,704.832 612.87,685.348 613.43,654.222 613.989,688.525 614.548,690.071 615.107,675.865 615.667,677.698 616.226,613.562 616.785,567.035 617.344,572.794 617.904,581.919 618.463,588.726 619.022,644.257 619.581,614.606 620.141,617.836 620.7,625.749 621.259,648.925 621.818,667.054 622.378,666.498 622.937,665.778 623.496,667.259 624.055,670.353 624.615,654.417 625.174,657.421 625.733,644.13 626.292,663.357 626.852,684.405 627.411,698.701 627.97,713.705 628.529,730.578 629.089,728.179 629.648,725.62 630.207,726.244 630.766,723.9 631.326,788.598 631.885,784.205 632.444,763.98 633.003,761.193 633.563,758.78 634.122,757.136 634.681,798.325 635.24,761.894 635.8,756.598 636.359,787.629 636.918,768.595 637.477,763.673 638.037,714.286 638.596,710.853 639.155,644.57 639.714,661.486 640.274,616.675 640.833,617.62 641.392,605.344 641.951,578.331 642.511,601.72 643.07,594.597 643.629,599.546 644.188,603.276 644.748,576.624 645.307,584.321 645.866,557.51 646.425,550.618 646.985,577.411 647.544,631.55 648.103,652.86 648.662,670.089 649.222,656.046 649.781,659.723 650.34,643.154 650.899,627.579 651.459,631.027 652.018,636.934 652.577,655.732 653.136,673.298 653.696,628.582 654.255,630.102 654.814,602.6 655.373,587.992 655.933,597.268 656.492,590.381 657.051,612 657.61,618.365 658.17,610.205 658.729,595.965 659.288,648.722 659.847,653.419 660.407,685.035 660.966,721.638 661.525,750.515 662.084,749.382 662.644,715.392 663.203,729.579 663.762,709.493 664.321,725.827 664.881,741.406 665.44,755.154 665.999,800.274 666.558,810.63 667.118,787.95 667.677,785.622 668.236,814.218 668.795,795.689 669.355,786.688 669.914,765.064 670.473,789.707 671.032,782.588 671.592,776.603 672.151,739.726 672.71,754.217 673.269,735.336 673.829,684.754 674.388,652.446 674.947,651.503 675.506,675.188 676.066,691.328 676.625,690.928 677.184,675.93 677.743,677.234 678.303,697.851 678.862,698.724 679.421,715.914 679.981,700.49 680.54,683.595 681.099,686.798 681.658,682.826 682.218,668.745 682.777,686.654 683.336,672.002 683.895,657.783 684.455,660.238 685.014,643.936 685.573,611.672 686.132,681.987 686.692,698.579 687.251,697.701 687.81,684.095 688.369,705.623 688.929,721.387 689.488,718.279 690.047,703.237 690.606,688.515 691.166,707.755 691.725,724.436 692.284,755.216 692.843,752.187 693.403,763.483 693.962,756.791 694.521,767.288 695.08,777.988 695.64,760.246 696.199,757.116 696.758,766.228 697.317,777.255 697.877,776.534 698.436,741.058 698.995,722.027 699.554,702.791 700.114,685.247 700.673,670.315 701.232,688.555 701.791,689.464 702.351,706.361 702.91,722.439 703.469,689.027 704.028,687.024 704.588,731.183 705.147,762.183 705.706,790.246 706.265,773.412 706.825,769.769 707.384,752.599 707.943,717.838 708.502,781.649 709.062,777.824 709.621,791.097 710.18,769.407 710.739,779.173 711.299,757.238 711.858,735.38 712.417,715.266 712.976,712.68 713.536,761.107 714.095,758.365 714.654,706.049 715.213,673.827 715.773,710.245 716.332,709.919 716.891,675.208 717.45,672.387 718.01,637.834 718.569,641.737 719.128,647.208 719.687,692.592 720.247,741.028 720.806,739.189 721.365,804.87 721.924,766.092 722.484,729.042 723.043,728.122 723.602,728.138 724.161,727.095 724.721,710.891 725.28,710.974 725.839,698.064 726.398,695.651 726.958,695.936 727.517,696.562 728.076,729.219 728.635,724.673 729.195,723.127 729.754,738.288 730.313,737.112 730.872,733.958 731.432,696.648 731.991,790.814 732.55,815.372 733.109,793.665 733.669,820.146 734.228,814.576 734.787,808.245 735.346,737.545 735.906,738.314 736.465,735.404 737.024,717.537 737.583,683.205 738.143,683.6 738.702,684.018 739.261,718.19 739.82,732.482 740.38,730.376 740.939,728.855 741.498,758.596 742.057,768.859 742.617,766.602 743.176,745.31 743.735,710.781 744.294,692.012 744.854,690.08 745.413,704.953 745.972,671.31 746.531,657.628 747.091,656.1 747.65,655.822 748.209,641.923 748.768,628.911 749.328,612.499 749.887,614.857 750.446,651.762 751.005,687.268 751.565,720.151 752.124,723.7 752.683,721.119 753.242,733.87 753.802,714.609 754.361,715.559 754.92,712.554 755.479,709.647 756.039,692.383 756.598,660.456 757.157,668.293 757.716,672.411 758.276,675.724 758.835,708.269 759.394,709.847 759.953,706.701 760.513,723.309 761.072,725.575 761.631,706.273 762.19,690.867 762.75,705.971 763.309,685.932 763.868,683.374 764.427,733.653 764.987,730.516 765.546,693.54 766.105,693.729 766.664,694.105 767.224,725.667 767.783,738.579 768.342,767.258 768.901,763.101 769.461,741.281 770.02,751.089 770.579,765.539 771.138,761.256 771.698,742.782 772.257,770.581 772.816,764.772 773.375,742.423 773.935,724.426 774.494,719.496 775.053,718.595 775.612,717.636 776.172,747.509 776.731,725.052 777.29,740.457 777.849,736.445 778.409,734.967 778.968,734.1 779.527,713.248 780.086,729.846 780.646,706.531 781.205,701.873 781.764,699.906 782.323,698.604 782.883,697.495 783.442,649.146 784.001,617.157 784.56,637.404 785.12,644.187 785.679,648.129 786.238,663.629 786.797,678.671 787.357,643.649 787.916,694.356 788.475,678.567 789.034,659.139 789.594,643.316 790.153,630.13 790.712,652.326 791.271,670.703 791.831,642.398 792.39,677.998 792.949,697.883 793.508,679.571 794.068,648.324 794.627,629.994 795.186,613.827 795.745,603.162 796.305,607.802 796.864,610.473 797.423,600.859 797.982,589.332 798.542,641.607 799.101,663.99 799.66,667.978 800.219,683.589 800.779,688.725 801.338,671.482 801.897,652.802 802.456,656.494 803.016,657.575 803.575,675.418 804.134,658.874 804.693,664.45 805.253,697.437 805.812,648.655 806.371,620.338 806.931,623.809 807.49,611.96 808.049,613.97 808.608,638.286 809.168,625.168 809.727,642.017 810.286,644.267 810.845,632.042 811.405,618.692 811.964,634.609 812.523,625.806 813.082,645.207 813.642,664.508 814.201,649.785 814.76,667.169 815.319,668.379 815.879,667.082 816.438,701.321 816.997,701.338 817.556,715.476 818.116,716.551 818.675,733.931 819.234,738.308 819.793,702.44 820.353,733.703 820.912,792.931 821.471,805.441 822.03,800.393 822.59,809.549 823.149,768.664 823.708,716.269 824.267,729.555 824.827,742.227 825.386,737.402 825.945,720.389 826.504,752.778 827.064,714.552 827.623,682.543 828.182,648.926 828.741,634.184 829.301,684.315 829.86,669.725 830.419,702.986 830.978,704.535 831.538,702.195 832.097,717.276 832.656,748.125 833.215,745.068 833.775,725.479 834.334,725.153 834.893,710.306 835.452,711.725 836.012,694.484 836.571,683.897 837.13,682.648 837.689,700.442 838.249,715.719 838.808,778.412 839.367,772.878 839.926,735.038 840.486,728.535 841.045,730.346 841.604,713.037 842.163,725.984 842.723,755.402 843.282,753.084 843.841,764.217 844.4,777.486 844.96,790.969 845.519,784.815 846.078,778.864 846.637,788.283 847.197,782.068 847.756,777.8 848.315,756.236 848.874,721.411 849.434,738.286 849.993,737.334 850.552,699.536 851.111,717.181 851.671,726.391 852.23,722.449 852.789,735.809 853.348,734.298 853.908,746.937 854.467,730.979 855.026,743.276 855.585,768.395 856.145,780.916 856.704,774.803 857.263,736.573 857.822,734.226 858.382,731.264 858.941,746.63 859.5,724.656 860.059,723.419 860.619,738.502 861.178,741.146 861.737,741.185 862.296,740.151 862.856,737.519 863.415,699.324 863.974,744.66 864.533,724.3 865.093,724.09 865.652,708.468 866.211,676.432 866.77,660.401 867.33,630.242 867.889,634.883 868.448,620.61 869.007,609.175 869.567,593.857 870.126,613.274 870.685,614.476 871.244,630.537 871.804,633.271 872.363,635.862 872.922,640.537 873.481,663.56 874.041,617.094 874.6,639.927 875.159,641.617 875.718,613.035 876.278,619.741 876.837,627.098 877.396,662.963 877.955,680.16 878.515,694.84 879.074,696.988 879.633,710.15 880.192,693.627 880.752,692.034 881.311,658.072 881.87,689.876 882.429,689.502 882.989,638.249 883.548,591.51 884.107,599.646 884.666,610.694 885.226,645.703 885.785,663.746 886.344,634.631 886.903,618.236 887.463,603.686 888.022,609.343 888.581,644.053 889.14,629.156 889.7,648.76 890.259,651.18 890.818,684.963 891.377,668.912 891.937,669.777 892.496,670.451 893.055,654.249 893.614,656.184 894.174,674.303 894.733,706.936 895.292,707.907 895.851,711.356 896.411,710.359 896.97,677.221 897.529,644.586 898.088,645.983 898.648,616.556 899.207,573.182 899.766,578.485 900.325,567.041 900.885,591.406 901.444,614.314 902.003,670.976 902.562,638.409 903.122,639.669 903.681,657.493 904.24,642.485 904.799,661.061 905.359,694.316 905.918,691.974 906.477,693.611 907.036,709.589 907.596,677.075 908.155,665.036 908.714,663.052 909.273,679.58 909.833,697.783 910.392,697.81 910.951,696.931 911.51,713.303 912.07,729.226 912.629,711.771 913.188,710.303 913.747,692.2 914.307,661.201 914.866,680.58 915.425,636.916 915.984,637.182 916.544,621.433 917.103,623.615 917.662,626.6 918.221,631.394 918.781,634.846 919.34,621.294 919.899,641.951 920.458,662.407 921.018,663.701 921.577,664.491 922.136,633.281 922.695,671.878 923.255,675.943 923.814,693.025 924.373,694.063 924.932,677.722 925.492,697.511 926.051,696.54 926.61,697.16 927.169,698.402 927.729,702.726 928.288,685.6 928.847,682.828 929.406,666.778 929.966,685.054 930.525,699.109 931.084,714.568 931.644,769.397 932.203,783.368 932.762,807.041 933.321,818.239 933.881,797.071 934.44,743.761 934.999,741.662 935.558,721.842 936.118,720.515 936.677,763.98 937.236,712.852 937.795,694.645 938.355,723.674 938.914,723.532 939.473,721.422 940.032,701.834 940.592,734.007 941.151,733.939 941.71,728.922 942.269,727.568 942.829,724.976 943.388,721.722 943.947,706.894 944.506,691.646 945.066,692.781 945.625,694.343 946.184,677.854 946.743,690.913 947.303,658.403 947.862,658.707 948.421,660.239 948.98,658.911 949.54,661.386 950.099,679.329 950.658,680.99 951.217,693.98 951.777,659.751 952.336,678.874 952.895,678.126 953.454,688.866 954.014,703.831 954.573,686.039 955.132,704.417 955.691,670.319 956.251,653.956 956.81,675.183 957.369,675.509 957.928,691.414 958.488,706.136 959.047,686.071 959.606,700.496 960.165,700.87 960.725,701.328 961.284,684.454 961.843,698.563 962.402,681.584 962.962,662.447 963.521,647.484 964.08,668.029 964.639,714.215 965.199,694.769 965.758,692.705 966.317,709.375 966.876,690.241 967.436,703.719 967.995,703.369 968.554,704.303 969.113,673.427 969.673,706.477 970.232,707.486 970.791,722.936 971.35,722.47 971.91,752.923 972.469,733.597 973.028,730.824 973.587,711.287 974.147,726.787 974.706,724.638 975.265,724.916 975.824,708.049 976.384,692.389 976.943,691.927 977.502,677.712 978.061,691.483 978.621,689.84 979.18,674.854 979.739,642.292 980.298,645.1 980.858,645.15 981.417,632.817 981.976,618.979 982.535,637.43 983.095,639.366 983.654,640.942 984.213,659.772 984.772,660.901 985.332,661.402 985.891,648.021 986.45,646.274 987.009,646.318 987.569,650.218 988.128,650.314 988.687,654.315 989.246,703.572 989.806,686.478 990.365,720.28 990.924,700.984 991.483,714.631 992.043,743.791 992.602,722.82 993.161,704.404 993.72,753.27 994.28,702.648 994.839,699.146 995.398,666.506 995.957,649.028 996.517,668.148 997.076,655.693 997.635,636.651 998.194,607.128 998.754,645.592 999.313,662.869 999.872,632.91 1000.43,635.379 1000.99,635.003 1001.55,655.594 1002.11,625.491 1002.67,659.316 1003.23,642.705 1003.79,629.241 1004.35,635.552 1004.91,638.725 1005.46,646.766 1006.02,680.115 1006.58,661.973 1007.14,677.659 1007.7,661.723 1008.26,664.315 1008.82,662.73 1009.38,679.194 1009.94,680.023 1010.5,712.089 1011.06,711.264 1011.62,711.538 1012.18,695.415 1012.73,697.195 1013.29,681.883 1013.85,664.233 1014.41,665.174 1014.97,683.709 1015.53,700.544 1016.09,700.083 1016.65,685.961 1017.21,668.967 1017.77,689.952 1018.33,704.373 1018.89,705.074 1019.45,686.586 1020.01,669.532 1020.56,660.229 1021.12,679.963 1021.68,663.004 1022.24,632.637 1022.8,637.72 1023.36,640.697 1023.92,642.477 1024.48,641.121 1025.04,658.865 1025.6,641.93 1026.16,645.259 1026.72,661.574 1027.28,665.154 1027.83,631.985 1028.39,632.639 1028.95,618.252 1029.51,622.769 1030.07,640.588 1030.63,660.509 1031.19,662.365 1031.75,679.655 1032.31,677.34 1032.87,676.932 1033.43,692.445 1033.99,692.794 1034.55,726.507 1035.1,739.639 1035.66,753.485 1036.22,763.822 1036.78,743.751 1037.34,726.267 1037.9,705.571 1038.46,707.731 1039.02,707.814 1039.58,706.134 1040.14,702.249 1040.7,699.611 1041.26,702.262 1041.82,652.368 1042.38,639.604 1042.93,674.307 1043.49,671.984 1044.05,670.856 1044.61,688.803 1045.17,687.502 1045.73,669.9 1046.29,718.158 1046.85,702.945 1047.41,701.767 1047.97,701.918 1048.53,703.388 1049.09,688.646 1049.65,690.703 1050.2,724.533 1050.76,740.067 1051.32,721.807 1051.88,721.45 1052.44,736.727 1053,747.129 1053.56,745.291 1054.12,758.243 1054.68,750.576 1055.24,747.199 1055.8,730.653 1056.36,698.052 1056.92,679.346 1057.48,679.791 1058.03,647.102 1058.59,647.847 1059.15,663.341 1059.71,682.621 1060.27,698.697 1060.83,699.202 1061.39,685.298 1061.95,684.094 1062.51,716.62 1063.07,711.677 1063.63,708.074 1064.19,705.024 1064.75,686.311 1065.3,669.398 1065.86,670.752 1066.42,656.024 1066.98,658.505 1067.54,676.503 1068.1,659.443 1068.66,677.08 1069.22,683.618 1069.78,687.476 1070.34,690.665 1070.9,674.676 1071.46,672.511 1072.02,670.338 1072.57,690.126 1073.13,691.621 1073.69,706.527 1074.25,691.956 1074.81,691.599 1075.37,687.225 1075.93,702.784 1076.49,703.339 1077.05,671.638 1077.61,651.701 1078.17,651.316 1078.73,637.371 1079.29,640.822 1079.85,676.42 1080.4,680.847 1080.96,617.337 1081.52,635.204 1082.08,640.187 1082.64,644.507 1083.2,633.409 1083.76,636.098 1084.32,639.864 1084.88,632.683 1085.44,638.882 1086,646.387 1086.56,650.207 1087.12,654.812 1087.67,657.023 1088.23,642.182 1088.79,629.143 1089.35,682.499 1089.91,680.618 1090.47,697.652 1091.03,727.903 1091.59,728.732 1092.15,724.749 1092.71,738.341 1093.27,733.615 1093.83,729.966 1094.39,710.274 1094.94,708.606 1095.5,688.239 1096.06,688.056 1096.62,688.431 1097.18,673.16 1097.74,640.331 1098.3,613.569 1098.86,666.436 1099.42,633.213 1099.98,653.996 1100.54,640.956 1101.1,644.061 1101.66,680.085 1102.22,680.577 1102.77,666.643 1103.33,652.946 1103.89,671.863 1104.45,689.718 1105.01,672.041 1105.57,656.179 1106.13,657.675 1106.69,675.835 1107.25,675.386 1107.81,677.214 1108.37,677.525 1108.93,682.436 1109.49,696.942 1110.04,679.193 1110.6,677.366 1111.16,646.328 1111.72,679.628 1112.28,662.571 1112.84,663.519 1113.4,697.244 1113.96,684.673 1114.52,672.134 1115.08,690.984 1115.64,724.13 1116.2,719.532 1116.76,715.257 1117.31,711.534 1117.87,711.177 1118.43,724.905 1118.99,692.884 1119.55,706.505 1120.11,721.253 1120.67,700.133 1121.23,683.208 1121.79,712.431 1122.35,709.54 1122.91,710.621 1123.47,745.163 1124.03,773.75 1124.59,755.695 1125.14,783.87 1125.7,793.465 1126.26,806.155 1126.82,766.178 1127.38,714.416 1127.94,696.474 1128.5,698.603 1129.06,666.084 1129.62,649.867 1130.18,650.474 1130.74,654.19 1131.3,622.732 1131.86,596.72 1132.41,615.167 1132.97,622.406 1133.53,643.964 1134.09,645.178 1134.65,630.98 1135.21,650.337 1135.77,665.267 1136.33,663.867 1136.89,650.288 1137.45,620.939 1138.01,640.126 1138.57,656.911 1139.13,642.112 1139.68,629.85 1140.24,650.798 1140.8,669.367 1141.36,672.022 1141.92,654.655 1142.48,670.132 1143.04,671.5 1143.6,720.011 1144.16,770.487 1144.72,751.334 1145.28,744.051 1145.84,722.979 1146.4,704.481 1146.96,685.048 1147.51,701.739 1148.07,712.33 1148.63,696.748 1149.19,712.74 1149.75,677.113 1150.31,694.589 1150.87,661.672 1151.43,661.95 1151.99,662.292 1152.55,662.887 1153.11,665.149 1153.67,683.897 1154.23,683.358 1154.78,683.085 1155.34,696.609 1155.9,680.055 1156.46,665.404 1157.02,649.754 1157.58,688.92 1158.14,703.529 1158.7,735.156 1159.26,760.144 1159.82,752.469 1160.38,749.33 1160.94,730.383 1161.5,745.389 1162.05,726.85 1162.61,726.389 1163.17,758.635 1163.73,802.513 1164.29,813.335 1164.85,791.513 1165.41,787.049 1165.97,780.107 1166.53,774.815 1167.09,756.674 1167.65,764.321 1168.21,793.387 1168.77,773.026 1169.33,782.759 1169.88,761.744 1170.44,711.743 1171,695.914 1171.56,677.874 1172.12,644.15 1172.68,632.049 1173.24,634.063 1173.8,649.104 1174.36,665.868 1174.92,685.449 1175.48,653.03 1176.04,638.909 1176.6,625.067 1177.15,645.414 1177.71,637.944 1178.27,643.104 1178.83,660.826 1179.39,662.96 1179.95,648.076 1180.51,683.331 1181.07,684.155 1181.63,733.429 1182.19,712.845 1182.75,692.267 1183.31,726.152 1183.87,740.131 1184.43,736.12 1184.98,749.22 1185.54,742.721 1186.1,737.734 1186.66,767.513 1187.22,765.971 1187.78,743.657 1188.34,709.375 1188.9,707.315 1189.46,658.79 1190.02,660.171 1190.58,675.733 1191.14,710.278 1191.7,709.558 1192.25,722.03 1192.81,703.678 1193.37,702.898 1193.93,685.668 1194.49,668.184 1195.05,664.91 1195.61,651.911 1196.17,652.636 1196.73,686.842 1197.29,690.201 1197.85,724.817 1198.41,723.086 1198.97,750.071 1199.52,749.972 1200.08,743.399 1200.64,723.162 1201.2,704.862 1201.76,673.051 1202.32,689.23 1202.88,721.392 1203.44,735.019 1204,733.794 1204.56,792.675 1205.12,755.481 1205.68,715.993 1206.24,745.952 1206.8,759.806 1207.35,739.565 1207.91,750.122 1208.47,747.673 1209.03,729.436 1209.59,744.543 1210.15,743.061 1210.71,769.42 1211.27,778.778 1211.83,725.209 1212.39,724.617 1212.95,719.831 1213.51,718.975 1214.07,719.794 1214.62,735.189 1215.18,747.986 1215.74,711.946 1216.3,697.133 1216.86,662.475 1217.42,681.088 1217.98,680.699 1218.54,660.711 1219.1,665.597 1219.66,650.418 1220.22,635.341 1220.78,656.084 1221.34,609.339 1221.89,613.254 1222.45,632.626 1223.01,618.43 1223.57,624.05 1224.13,624.685 1224.69,628.331 1225.25,632.641 1225.81,634.082 1226.37,637.912 1226.93,639.868 1227.49,675.427 1228.05,692.738 1228.61,662.159 1229.17,645.963 1229.72,646.929 1230.28,650.199 1230.84,670.687 1231.4,668.964 1231.96,684.237 1232.52,668.661 1233.08,650.783 1233.64,672.046 1234.2,703.791 1234.76,736.303 1235.32,733.046 1235.88,744.32 1236.44,743.772 1236.99,754.093 1237.55,768.27 1238.11,744.402 1238.67,722.181 1239.23,702.665 1239.79,672.759 1240.35,688.631 1240.91,702.632 1241.47,717.122 1242.03,744.371 1242.59,678.403 1243.15,693.436 1243.71,659.313 1244.26,663.75 1244.82,680.35 1245.38,679.115 1245.94,679.037 1246.5,682.552 1247.06,666.102 1247.62,634.788 1248.18,655.658 1248.74,660.106 1249.3,629.857 1249.86,617.675 1250.42,618.852 1250.98,653.594 1251.54,674.89 1252.09,642.671 1252.65,662.031 1253.21,665.9 1253.77,681.594 1254.33,729.471 1254.89,757.639 1255.45,771.621 1256.01,752.744 1256.57,781.741 1257.13,774.216 1257.69,783.867 1258.25,782.359 1258.81,757.919 1259.36,755.324 1259.92,731.235 1260.48,741.899 1261.04,706.38 1261.6,705.563 1262.16,704.335 1262.72,686.876 1263.28,686.422 1263.84,670.375 1264.4,688.031 1264.96,687.14 1265.52,669.597 1266.08,668.887 1266.63,685.73 1267.19,653.177 1267.75,621.026 1268.31,608.52 1268.87,629.027 1269.43,631.288 1269.99,616.662 1270.55,635.671 1271.11,656.526 1271.67,675.578 1272.23,644.864 1272.79,645.036 1273.35,613.963 1273.91,618.066 1274.46,637.081 1275.02,608.272 1275.58,624.134 1276.14,675.375 1276.7,674.942 1277.26,659.952 1277.82,679.184 1278.38,744.615 1278.94,727.984 1279.5,744.144 1280.06,738.643 1280.62,721.811 1281.18,766.429 1281.73,780.081 1282.29,762.752 1282.85,758.783 1283.41,776.049 1283.97,798.47 1284.53,806.885 1285.09,814.226 1285.65,807.72 1286.21,784.358 1286.77,778.868 1287.33,754.799 1287.89,729.165 1288.45,743.176 1289,738.764 1289.56,749.718 1290.12,748.576 1290.68,710.498 1291.24,710.073 1291.8,724.885 1292.36,672.979 1292.92,688.309 1293.48,703.638 1294.04,701.608 1294.6,699.42 1295.16,699.212 1295.72,715.585 1296.28,748.182 1296.83,715.632 1297.39,664.579 1297.95,635.298 1298.51,654.348 1299.07,671.92 1299.63,657.324 1300.19,691.107 1300.75,723.923 1301.31,721.842 1301.87,720.305 1302.43,703.902 1302.99,687.631 1303.55,686.493 1304.1,685.368 1304.66,686.081 1305.22,666.439 1305.78,669.572 1306.34,668.776 1306.9,703.474 1307.46,700.101 1308.02,695.382 1308.58,693.081 1309.14,662.627 1309.7,649.524 1310.26,652.242 1310.82,672.542 1311.38,659.827 1311.93,647.711 1312.49,632.696 1313.05,636.449 1313.61,654.049 1314.17,622.016 1314.73,609.357 1315.29,600.155 1315.85,590.108 1316.41,577.595 1316.97,616.743 1317.53,620.269 1318.09,625.584 1318.65,594.099 1319.2,582.579 1319.76,556.475 1320.32,580.213 1320.88,585.837 1321.44,639.858 1322,642.295 1322.56,695.713 1323.12,727.658 1323.68,692.55 1324.24,691.106 1324.8,658.72 1325.36,629.459 1325.92,634.268 1326.47,587.165 1327.03,589.375 1327.59,610.097 1328.15,613.695 1328.71,630.501 1329.27,666.541 1329.83,672.258 1330.39,673.474 1330.95,657.574 1331.51,625.422 1332.07,695.901 1332.63,712.504 1333.19,742.234 1333.75,722.246 1334.3,785.79 1334.86,795.509 1335.42,818.689 1335.98,815.371 1336.54,792.07 1337.1,804.375 1337.66,782.695 1338.22,793.605 1338.78,756.377 1339.34,719.828 1339.9,703.652 1340.46,719.883 1341.02,751.185 1341.57,763.373 1342.13,774.174 1342.69,767.411 1343.25,764.583 1343.81,708.071 1344.37,708.559 1344.93,721.352 1345.49,718.114 1346.05,702.405 1346.61,730.867 1347.17,746.123 1347.73,728.109 1348.29,742.91 1348.84,722.819 1349.4,718.137 1349.96,700.655 1350.52,683.973 1351.08,699.695 1351.64,652.086 1352.2,670.631 1352.76,673.883 1353.32,608.166 1353.88,647.679 1354.44,681.411 1355,749.216 1355.56,697.787 1356.12,682.703 1356.67,700.046 1357.23,732.45 1357.79,714.867 1358.35,694.376 1358.91,678.371 1359.47,636.454 1360.03,656.211 1360.59,624.347 1361.15,593.894 1361.71,586.426 1362.27,622.199 1362.83,571.29 1363.39,561.926 1363.94,551.152 1364.5,574.629 1365.06,629.24 1365.62,633.96 1366.18,606.967 1366.74,595.351 1367.3,583.883 1367.86,557.149 1368.42,597.39 1368.98,620.279 1369.54,655.495 1370.1,675.511 1370.66,707.258 1371.21,670.36 1371.77,653.741 1372.33,654.329 1372.89,644.071 1373.45,614.121 1374.01,601.704 1374.57,572.712 1375.13,561.327 1375.69,554.561 1376.25,564.386 1376.81,574.536 1377.37,560.909 1377.93,598.836 1378.49,618.008 1379.04,622.328 1379.6,623.648 1380.16,592.34 1380.72,643.494 1381.28,645.105 1381.84,663.021 1382.4,631.532 1382.96,654.752 1383.52,675.659 1384.08,643.635 1384.64,676.383 1385.2,675.287 1385.76,674.854 1386.31,688.334 1386.87,688.705 1387.43,701.419 1387.99,715.302 1388.55,711.871 1389.11,741.112 1389.67,753.575 1390.23,797.551 1390.79,775.022 1391.35,785.263 1391.91,748.666 1392.47,745.263 1393.03,742.867 1393.58,754.262 1394.14,746.88 1394.7,744.622 1395.26,756.256 1395.82,796.788 1396.38,791.607 1396.94,800.248 1397.5,792.918 1398.06,783.516 1398.62,732.187 1399.18,747.073 1399.74,728.398 1400.3,728.242 1400.86,724.323 1401.41,703.284 1401.97,687.665 1402.53,689.768 1403.09,722.786 1403.65,721.713 1404.21,717.882 1404.77,698.756 1405.33,697.442 1405.89,677.719 1406.45,693.201 1407.01,675.747 1407.57,675.692 1408.13,679.174 1408.68,664.577 1409.24,655.123 1409.8,722.945 1410.36,735.675 1410.92,765.002 1411.48,762.128 1412.04,790.135 1412.6,735.278 1413.16,715.878 1413.72,697.629 1414.28,648.162 1414.84,636.147 1415.4,687.546 1415.95,682.548 1416.51,661.811 1417.07,674.362 1417.63,656.705 1418.19,659.85 1418.75,646.453 1419.31,678.789 1419.87,711.551 1420.43,711.145 1420.99,695.155 1421.55,681.321 1422.11,649.933 1422.67,620.468 1423.23,623.548 1423.78,612.195 1424.34,616.414 1424.9,602.65 1425.46,641.274 1426.02,641.978 1426.58,660.592 1427.14,661.263 1427.7,642.332 1428.26,633.511 1428.82,701.953 1429.38,700.534 1429.94,729.832 1430.5,728.643 1431.05,676.78 1431.61,643.548 1432.17,662.27 1432.73,616.39 1433.29,634.89 1433.85,634.856 1434.41,654.849 1434.97,657.682 1435.53,644.487 1436.09,660.78 1436.65,662.616 1437.21,683.142 1437.77,679.419 1438.33,694.613 1438.88,707.688 1439.44,721.905 1440,707.043 1440.56,691.933 1441.12,709.389 1441.68,690.304 1442.24,726.468 1442.8,725.069 1443.36,704.79 1443.92,686.94 1444.48,718.418 1445.04,760.302 1445.6,754.271 1446.15,687.652 1446.71,673.317 1447.27,655.332 1447.83,673.936 1448.39,660.887 1448.95,674.617 1449.51,657.69 1450.07,609.949 1450.63,679.376 1451.19,697.899 1451.75,686.023 1452.31,704.114 1452.87,717.235 1453.42,731.524 1453.98,728.924 1454.54,727.24 1455.1,743.248 1455.66,722.49 1456.22,687.529 1456.78,672.799 1457.34,660.984 1457.9,646.354 1458.46,632.757 1459.02,603.612 1459.58,578.271 1460.14,586.921 1460.7,593.734 1461.25,611.647 1461.81,634.085 1462.37,667.795 1462.93,654.086 1463.49,673.16 1464.05,687.807 1464.61,654.56 1465.17,639.739 1465.73,659.412 1466.29,644.898 1466.85,663.082 1467.41,663.953 1467.97,634.175 1468.52,604.69 1469.08,593.954 1469.64,566.256 1470.2,577.302 1470.76,600.125 1471.32,588.672 1471.88,593.6 1472.44,600.3 1473,592.229 1473.56,549.096 1474.12,571.858 1474.68,595.67 1475.24,596.608 1475.79,603.882 1476.35,594.344 1476.91,613.464 1477.47,651.573 1478.03,653.201 1478.59,655.78 1479.15,704.752 1479.71,704.485 1480.27,717.116 1480.83,728.814 1481.39,745.712 1481.95,693.201 1482.51,643.537 1483.07,629.735 1483.62,666.773 1484.18,665.496 1484.74,667.107 1485.3,699.321 1485.86,716.19 1486.42,700.331 1486.98,686.681 1487.54,670.138 1488.1,622.766 1488.66,642.314 1489.22,645.928 1489.78,646.364 1490.34,634.284 1490.89,667.773 1491.45,652.647 1492.01,701.548 1492.57,670.218 1493.13,671.271 1493.69,671.157 1494.25,653.779 1494.81,654.769 1495.37,640.726 1495.93,649.007 1496.49,667.885 1497.05,637.289 1497.61,700.417 1498.16,665.991 1498.72,686.538 1499.28,718.387 1499.84,751.319 1500.4,731.04 1500.96,744.952 1501.52,739.292 1502.08,719.897 1502.64,717.255 1503.2,684.293 1503.76,650.626 1504.32,664.746 1504.88,678.011 1505.44,661.476 1505.99,645.456 1506.55,635.647 1507.11,652.9 1507.67,637.262 1508.23,622.07 1508.79,636.368 1509.35,668.547 1509.91,670.112 1510.47,686.234 1511.03,702.451 1511.59,705.127 1512.15,705.063 1512.71,718.702 1513.26,734.912 1513.82,735.101 1514.38,735.723 1514.94,732.797 1515.5,746.52 1516.06,758.387 1516.62,770.361 1517.18,764.757 1517.74,746.671 1518.3,793.192 1518.86,788.331 1519.42,732.983 1519.98,761.566 1520.53,743.488 1521.09,710.36 1521.65,710.878 1522.21,726.323 1522.77,724.416 1523.33,724.514 1523.89,733.847 1524.45,730.708 1525.01,713.529 1525.57,696.88 1526.13,697.381 1526.69,713.921 1527.25,726.501 1527.81,705.781 1528.36,703.713 1528.92,688.161 1529.48,689.612 1530.04,676.488 1530.6,691.025 1531.16,677.55 1531.72,677.625 1532.28,663.371 1532.84,726.56 1533.4,740.755 1533.96,734.981 1534.52,716.679 1535.08,713.17 1535.63,682.014 1536.19,667.158 1536.75,653.108 1537.31,640.309 1537.87,643.336 1538.43,646.951 1538.99,630.645 1539.55,652.113 1540.11,637.622 1540.67,622.86 1541.23,641.471 1541.79,643.682 1542.35,663.741 1542.9,651.26 1543.46,650.403 1544.02,632.816 1544.58,621.656 1545.14,609.488 1545.7,581.227 1546.26,589.502 1546.82,613.313 1547.38,601.111 1547.94,588.803 1548.5,560.742 1549.06,581.929 1549.62,586.973 1550.18,593.071 1550.73,614.616 1551.29,597.759 1551.85,618.523 1552.41,589.825 1552.97,613.118 1553.53,598.807 1554.09,603.584 1554.65,609.466 1555.21,628.425 1555.77,632.853 1556.33,636.426 1556.89,638.444 1557.45,656.496 1558,642.408 1558.56,627.646 1559.12,601.382 1559.68,622.927 1560.24,608.434 1560.8,611.317 1561.36,633.385 1561.92,618.788 1562.48,639.867 1563.04,673.915 1563.6,655.421 1564.16,656.463 1564.72,659.483 1565.28,630.295 1565.83,666.456 1566.39,714.514 1566.95,730.149 1567.51,743.685 1568.07,756.409 1568.63,753.944 1569.19,750.418 1569.75,765.034 1570.31,762.945 1570.87,759.181 1571.43,772.854 1571.99,767.916 1572.55,764.375 1573.1,761.607 1573.66,759.152 1574.22,785.135 1574.78,799.138 1575.34,793.313 1575.9,787.185 1576.46,768.486 1577.02,764.848 1577.58,761.33 1578.14,787.609 1578.7,764.853 1579.26,730.004 1579.82,728.434 1580.37,711.071 1580.93,676.578 1581.49,707.44 1582.05,687.8 1582.61,686.736 1583.17,685.954 1583.73,687.464 1584.29,657.212 1584.85,658.008 1585.41,646.756 1585.97,651.812 1586.53,700.279 1587.09,687.427 1587.65,685.892 1588.2,686.268 1588.76,702.681 1589.32,685.147 1589.88,684.909 1590.44,703.246 1591,715.209 1591.56,698.545 1592.12,696.071 1592.68,690.857 1593.24,670.373 1593.8,684.155 1594.36,667.989 1594.92,683.967 1595.47,685.169 1596.03,651.215 1596.59,650.327 1597.15,635.586 1597.71,639.495 1598.27,639.631 1598.83,642.302 1599.39,644.239 1599.95,616.243 1600.51,615.736 1601.07,571.391 1601.63,578.157 1602.19,550.879 1602.74,524.79 1603.3,567.138 1603.86,573.197 1604.42,628.149 1604.98,631.209 1605.54,665.878 1606.1,647.179 1606.66,651.142 1607.22,656.417 1607.78,643.068 1608.34,663.429 1608.9,682.953 1609.46,734.115 1610.02,748.677 1610.57,760.06 1611.13,738.517 1611.69,781.77 1612.25,788.95 1612.81,781.655 1613.37,777.874 1613.93,787.777 1614.49,764.314 1615.05,682.021 1615.61,648.748 1616.17,667.524 1616.73,671.793 1617.29,655.59 1617.84,688.721 1618.4,701.951 1618.96,668.735 1619.52,651.09 1620.08,653.992 1620.64,635.074 1621.2,656.814 1621.76,677.557 1622.32,678.341 1622.88,679.752 1623.44,657.457 1624,642.061 1624.56,676.036 1625.11,674.017 1625.67,641.967 1626.23,642.943 1626.79,660.049 1627.35,678.263 1627.91,693.762 1628.47,659.008 1629.03,658.483 1629.59,659.182 1630.15,675.62 1630.71,678.867 1631.27,663.188 1631.83,682.197 1632.39,684.922 1632.94,720.806 1633.5,737.25 1634.06,753.284 1634.62,748.305 1635.18,761.626 1635.74,756.965 1636.3,735.742 1636.86,765.139 1637.42,778.509 1637.98,788.847 1638.54,781.027 1639.1,730.184 1639.66,693.835 1640.21,693.802 1640.77,692.624 1641.33,676.121 1641.89,715.926 1642.45,697.669 1643.01,716.233 1643.57,729.619 1644.13,727.187 1644.69,722.296 1645.25,735.778 1645.81,730.008 1646.37,773.095 1646.93,770.193 1647.48,746.573 1648.04,748.025 1648.6,761.172 1649.16,805.84 1649.72,801.414 1650.28,793.608 1650.84,755.973 1651.4,754.159 1651.96,736.836 1652.52,704.895 1653.08,720.146 1653.64,685.44 1654.2,666.353 1654.76,696.114 1655.31,681.897 1655.87,665.034 1656.43,627.914 1656.99,630.146 1657.55,602.899 1658.11,626.549 1658.67,643.471 1659.23,612.592 1659.79,595.985 1660.35,604.16 1660.91,612.906 1661.47,633.523 1662.03,634.6 1662.58,670.505 1663.14,671.408 1663.7,658.579 1664.26,678.35 1664.82,679.498 1665.38,695.783 1665.94,710.1 1666.5,741.922 1667.06,733.981 1667.62,763.566 1668.18,757.599 1668.74,752.64 1669.3,734.8 1669.85,781.704 1670.41,762.219 1670.97,759.477 1671.53,738.868 1672.09,766.317 1672.65,746.921 1673.21,726 1673.77,723.678 1674.33,719.914 1674.89,687.098 1675.45,687.813 1676.01,702.901 1676.57,719.089 1677.13,707.642 1677.68,674.109 1678.24,673.444 1678.8,657.741 1679.36,673.344 1679.92,738.819 1680.48,737.301 1681.04,748.615 1681.6,747.303 1682.16,745.159 1682.72,759.046 1683.28,720.458 1683.84,683.569 1684.4,684.739 1684.95,685.448 1685.51,702.023 1686.07,717.552 1686.63,733.7 1687.19,746.171 1687.75,759.977 1688.31,755.071 1688.87,750.82 1689.43,730.293 1689.99,714.098 1690.55,708.615 1691.11,726.212 1691.67,723.883 1692.23,704.763 1692.78,707.556 1693.34,707.985 1693.9,656.266 1694.46,671.527 1695.02,656.889 1695.58,656.631 1696.14,657.082 1696.7,639.128 1697.26,658.252 1697.82,672.245 1698.38,643.124 1698.94,658.825 1699.5,676.398 1700.05,705.336 1700.61,706.034 1701.17,707.422 1701.73,657.204 1702.29,641.46 1702.85,643.057 1703.41,661.447 1703.97,662.631 1704.53,661.108 1705.09,646.84 1705.65,632.344 1706.21,622.864 1706.77,640.414 1707.32,644.41 1707.88,616.984 1708.44,617.749 1709,620.893 1709.56,627.134 1710.12,644.988 1710.68,645.662 1711.24,630.927 1711.8,683.318 1712.36,684.182 1712.92,681.979 1713.48,698.892 1714.04,698.401 1714.6,686.82 1715.15,686.692 1715.71,701.763 1716.27,687.462 1716.83,672.823 1717.39,671.079 1717.95,671.673 1718.51,689.903 1719.07,722.088 1719.63,673.125 1720.19,656.099 1720.75,658.758 1721.31,678.182 1721.87,642.993 1722.42,597.165 1722.98,603.091 1723.54,592.342 1724.1,599.398 1724.66,604.196 1725.22,591.523 1725.78,613.867 1726.34,634.148 1726.9,635.103 1727.46,637.341 1728.02,635.623 1728.58,622.353 1729.14,627.692 1729.69,647.621 1730.25,651.046 1730.81,653.585 1731.37,673.268 1731.93,674.875 1732.49,678.908 1733.05,664.559 1733.61,630.021 1734.17,633.772 1734.73,665.99 1735.29,702.573 1735.85,650.172 1736.41,682.401 1736.97,697.892 1737.52,679.514 1738.08,698.795 1738.64,683.811 1739.2,685.921 1739.76,698.479 1740.32,696.124 1740.88,666.392 1741.44,666.533 1742,653.996 1742.56,655.994 1743.12,627.023 1743.68,643.767 1744.24,612.411 1744.79,602.897 1745.35,642.269 1745.91,654.86 1746.47,670.196 1747.03,668.029 1747.59,654.589 1748.15,657.646 1748.71,695.07 1749.27,710.276 1749.83,725.787 1750.39,723.6 1750.95,688.158 1751.51,705.626 1752.06,688.429 1752.62,706.24 1753.18,703.583 1753.74,734.225 1754.3,743.892 1754.86,741.739 1755.42,737.874 1755.98,733.585 1756.54,718.021 1757.1,717.549 1757.66,777.795 1758.22,772.606 1758.78,766.596 1759.34,729.346 1759.89,728.492 1760.45,713.37 1761.01,679.581 1761.57,697.019 1762.13,712.817 1762.69,715.382 1763.25,728.543 1763.81,742.827 1764.37,773.314 1764.93,769.262 1765.49,765.973 1766.05,746.584 1766.61,776.587 1767.16,787.971 1767.72,782.053 1768.28,780.09 1768.84,743.207 1769.4,727.99 1769.96,739.687 1770.52,718.084 1771.08,720.997 1771.64,717.092 1772.2,699.045 1772.76,712.612 1773.32,693.462 1773.88,680.814 1774.43,628.282 1774.99,663.542 1775.55,648.071 1776.11,668.862 1776.67,653.208 1777.23,641.676 1777.79,641.63 1778.35,640.237 1778.91,657.083 1779.47,656.989 1780.03,675.109 1780.59,678.713 1781.15,661.699 1781.71,682.157 1782.26,680.176 1782.82,647.856 1783.38,631.361 1783.94,634.602 1784.5,605.036 1785.06,593.076 1785.62,584.938 1786.18,620.004 1786.74,644.406 1787.3,648.389 1787.86,682.353 1788.42,698.482 1788.98,732.278 1789.53,717.39 1790.09,746.003 1790.65,723.433 1791.21,690.632 1791.77,688.822 1792.33,737.527 1792.89,732.708 1793.45,697.546 1794.01,695.722 1794.57,696.062 1795.13,698.832 1795.69,681.792 1796.25,633.253 1796.8,652.685 1797.36,689.186 1797.92,655.163 1798.48,673.553 1799.04,689.034 1799.6,723.878 1800.16,754.57 1800.72,753.173 1801.28,765.137 1801.84,761.059 1802.4,773.643 1802.96,766.855 1803.52,766.134 1804.08,761.389 1804.63,757.664 1805.19,722.029 1805.75,753.716 1806.31,746.533 1806.87,726.417 1807.43,693.196 1807.99,704.938 1808.55,692.107 1809.11,673.981 1809.67,657.507 1810.23,621.925 1810.79,622.395 1811.35,640.061 1811.9,661.349 1812.46,661.93 1813.02,667.021 1813.58,688.162 1814.14,670.656 1814.7,672.032 1815.26,688.343 1815.82,656.763 1816.38,675.127 1816.94,672.269 1817.5,676.451 1818.06,644.826 1818.62,647.862 1819.18,635.881 1819.73,622.03 1820.29,578.794 1820.85,554.055 1821.41,577.515 1821.97,568.864 1822.53,589.255 1823.09,609.6 1823.65,614.113 1824.21,617.943 1824.77,637.13 1825.33,658.591 1825.89,642.008 1826.45,630.074 1827,633.397 1827.56,685.532 1828.12,736.101 1828.68,733.769 1829.24,715.314 1829.8,698.261 1830.36,684.168 1830.92,686.085 1831.48,685.59 1832.04,672.262 1832.6,657.136 1833.16,692.216 1833.72,707.092 1834.27,739.304 1834.83,720.979 1835.39,737.43 1835.95,731.802 1836.51,725.236 1837.07,740.719 1837.63,724.073 1838.19,705.756 \"/>\n<path clip-path=\"url(#clip743)\" d=\"M720.247 690.247 L720.806 690.247 L721.365 690.247 L721.924 690.247 L722.484 690.247 L723.043 690.247 L723.602 690.247 L724.161 690.247 L724.721 690.247 L725.28 690.247 L725.839 690.247 L726.398 690.247 L726.958 690.247 L727.517 690.247 L728.076 690.247 L728.635 690.247 L729.195 690.247 L729.754 690.247 L730.313 690.247 L730.872 690.247 L731.432 690.247 L731.991 690.247 L732.55 690.247 L733.109 690.247 L733.669 690.247 L734.228 690.247 L734.787 690.247 L735.346 690.247 L735.906 690.247 L736.465 690.247 L737.024 690.247 L737.583 690.247 L738.143 690.247 L738.702 690.247 L739.261 690.247 L739.82 690.247 L740.38 690.247 L740.939 690.247 L741.498 690.247 L742.057 690.247 L742.617 690.247 L743.176 690.247 L743.735 690.247 L744.294 690.247 L744.854 690.247 L745.413 690.247 L745.972 690.247 L746.531 690.247 L747.091 690.247 L747.65 690.247 L748.209 690.247 L748.768 690.247 L749.328 690.247 L749.887 690.247 L750.446 690.247 L751.005 690.247 L751.565 690.247 L752.124 690.247 L752.683 690.247 L753.242 690.247 L753.802 690.247 L754.361 690.247 L754.92 690.247 L755.479 690.247 L756.039 690.247 L756.598 690.247 L757.157 690.247 L757.716 690.247 L758.276 690.247 L758.835 690.247 L759.394 690.247 L759.953 690.247 L760.513 690.247 L761.072 690.247 L761.631 690.247 L762.19 690.247 L762.75 690.247 L763.309 690.247 L763.868 690.247 L764.427 690.247 L764.987 690.247 L765.546 690.247 L766.105 690.247 L766.664 690.247 L767.224 690.247 L767.783 690.247 L768.342 690.247 L768.901 690.247 L769.461 690.247 L770.02 690.247 L770.579 690.247 L771.138 690.247 L771.698 690.247 L772.257 690.247 L772.816 690.247 L773.375 690.247 L773.935 690.247 L774.494 690.247 L775.053 690.247 L775.612 690.247 L776.172 690.247 L776.731 690.247 L777.29 690.247 L777.849 690.247 L778.409 690.247 L778.968 690.247 L779.527 690.247 L780.086 690.247 L780.646 690.247 L781.205 690.247 L781.764 690.247 L782.323 690.247 L782.883 690.247 L783.442 690.247 L784.001 690.247 L784.56 690.247 L785.12 690.247 L785.679 690.247 L786.238 690.247 L786.797 690.247 L787.357 690.247 L787.916 690.247 L788.475 690.247 L789.034 690.247 L789.594 690.247 L790.153 690.247 L790.712 690.247 L791.271 690.247 L791.831 690.247 L792.39 690.247 L792.949 690.247 L793.508 690.247 L794.068 690.247 L794.627 690.247 L795.186 690.247 L795.745 690.247 L796.305 690.247 L796.864 690.247 L797.423 690.247 L797.982 690.247 L798.542 690.247 L799.101 690.247 L799.66 690.247 L800.219 690.247 L800.779 690.247 L801.338 690.247 L801.897 690.247 L802.456 690.247 L803.016 690.247 L803.575 690.247 L804.134 690.247 L804.693 690.247 L805.253 690.247 L805.812 690.247 L806.371 690.247 L806.931 690.247 L807.49 690.247 L808.049 690.247 L808.608 690.247 L809.168 690.247 L809.727 690.247 L810.286 690.247 L810.845 690.247 L811.405 690.247 L811.964 690.247 L812.523 690.247 L813.082 690.247 L813.642 690.247 L814.201 690.247 L814.76 690.247 L815.319 690.247 L815.879 690.247 L816.438 690.247 L816.997 690.247 L817.556 690.247 L818.116 690.247 L818.675 690.247 L819.234 690.247 L819.793 690.247 L820.353 690.247 L820.912 690.247 L821.471 690.247 L822.03 690.247 L822.59 690.247 L823.149 690.247 L823.708 690.247 L824.267 690.247 L824.827 690.247 L825.386 690.247 L825.945 690.247 L826.504 690.247 L827.064 690.247 L827.623 690.247 L828.182 690.247 L828.741 690.247 L829.301 690.247 L829.86 690.247 L830.419 690.247 L830.978 690.247 L831.538 690.247 L832.097 690.247 L832.656 690.247 L833.215 690.247 L833.775 690.247 L834.334 690.247 L834.893 690.247 L835.452 690.247 L836.012 690.247 L836.571 690.247 L837.13 690.247 L837.689 690.247 L838.249 690.247 L838.808 690.247 L839.367 690.247 L839.926 690.247 L840.486 690.247 L841.045 690.247 L841.604 690.247 L842.163 690.247 L842.723 690.247 L843.282 690.247 L843.841 690.247 L844.4 690.247 L844.96 690.247 L845.519 690.247 L846.078 690.247 L846.637 690.247 L847.197 690.247 L847.756 690.247 L848.315 690.247 L848.874 690.247 L849.434 690.247 L849.993 690.247 L850.552 690.247 L851.111 690.247 L851.671 690.247 L852.23 690.247 L852.789 690.247 L853.348 690.247 L853.908 690.247 L854.467 690.247 L855.026 690.247 L855.585 690.247 L856.145 690.247 L856.704 690.247 L857.263 690.247 L857.822 690.247 L858.382 690.247 L858.941 690.247 L859.5 690.247 L860.059 690.247 L860.619 690.247 L861.178 690.247 L861.737 690.247 L862.296 690.247 L862.856 690.247 L863.415 690.247 L863.974 690.247 L864.533 690.247 L865.093 690.247 L865.652 690.247 L866.211 690.247 L866.77 690.247 L867.33 690.247 L867.889 690.247 L868.448 690.247 L869.007 690.247 L869.567 690.247 L870.126 690.247 L870.685 690.247 L871.244 690.247 L871.804 690.247 L872.363 690.247 L872.922 690.247 L873.481 690.247 L874.041 690.247 L874.6 690.247 L875.159 690.247 L875.718 690.247 L876.278 690.247 L876.837 690.247 L877.396 690.247 L877.955 690.247 L878.515 690.247 L879.074 690.247 L879.633 690.247 L880.192 690.247 L880.752 690.247 L881.311 690.247 L881.87 690.247 L882.429 690.247 L882.989 690.247 L883.548 690.247 L884.107 690.247 L884.666 690.247 L885.226 690.247 L885.785 690.247 L886.344 690.247 L886.903 690.247 L887.463 690.247 L888.022 690.247 L888.581 690.247 L889.14 690.247 L889.7 690.247 L890.259 690.247 L890.818 690.247 L891.377 690.247 L891.937 690.247 L892.496 690.247 L893.055 690.247 L893.614 690.247 L894.174 690.247 L894.733 690.247 L895.292 690.247 L895.851 690.247 L896.411 690.247 L896.97 690.247 L897.529 690.247 L898.088 690.247 L898.648 690.247 L899.207 690.247 L899.766 690.247 L900.325 690.247 L900.885 690.247 L901.444 690.247 L902.003 690.247 L902.562 690.247 L903.122 690.247 L903.681 690.247 L904.24 690.247 L904.799 690.247 L905.359 690.247 L905.918 690.247 L906.477 690.247 L907.036 690.247 L907.596 690.247 L908.155 690.247 L908.714 690.247 L909.273 690.247 L909.833 690.247 L910.392 690.247 L910.951 690.247 L911.51 690.247 L912.07 690.247 L912.629 690.247 L913.188 690.247 L913.747 690.247 L914.307 690.247 L914.866 690.247 L915.425 690.247 L915.984 690.247 L916.544 690.247 L917.103 690.247 L917.662 690.247 L918.221 690.247 L918.781 690.247 L919.34 690.247 L919.899 690.247 L920.458 690.247 L921.018 690.247 L921.577 690.247 L922.136 690.247 L922.695 690.247 L923.255 690.247 L923.814 690.247 L924.373 690.247 L924.932 690.247 L925.492 690.247 L926.051 690.247 L926.61 690.247 L927.169 690.247 L927.729 690.247 L928.288 690.247 L928.847 690.247 L929.406 690.247 L929.966 690.247 L930.525 690.247 L931.084 690.247 L931.644 690.247 L932.203 690.247 L932.762 690.247 L933.321 690.247 L933.881 690.247 L934.44 690.247 L934.999 690.247 L935.558 690.247 L936.118 690.247 L936.677 690.247 L937.236 690.247 L937.795 690.247 L938.355 690.247 L938.914 690.247 L939.473 690.247 L940.032 690.247 L940.592 690.247 L941.151 690.247 L941.71 690.247 L942.269 690.247 L942.829 690.247 L943.388 690.247 L943.947 690.247 L944.506 690.247 L945.066 690.247 L945.625 690.247 L946.184 690.247 L946.743 690.247 L947.303 690.247 L947.862 690.247 L948.421 690.247 L948.98 690.247 L949.54 690.247 L950.099 690.247 L950.658 690.247 L951.217 690.247 L951.777 690.247 L952.336 690.247 L952.895 690.247 L953.454 690.247 L954.014 690.247 L954.573 690.247 L955.132 690.247 L955.691 690.247 L956.251 690.247 L956.81 690.247 L957.369 690.247 L957.928 690.247 L958.488 690.247 L959.047 690.247 L959.606 690.247 L960.165 690.247 L960.725 690.247 L961.284 690.247 L961.843 690.247 L962.402 690.247 L962.962 690.247 L963.521 690.247 L964.08 690.247 L964.639 690.247 L965.199 690.247 L965.758 690.247 L966.317 690.247 L966.876 690.247 L967.436 690.247 L967.995 690.247 L968.554 690.247 L969.113 690.247 L969.673 690.247 L970.232 690.247 L970.791 690.247 L971.35 690.247 L971.91 690.247 L972.469 690.247 L973.028 690.247 L973.587 690.247 L974.147 690.247 L974.706 690.247 L975.265 690.247 L975.824 690.247 L976.384 690.247 L976.943 690.247 L977.502 690.247 L978.061 690.247 L978.621 690.247 L979.18 690.247 L979.739 690.247 L980.298 690.247 L980.858 690.247 L981.417 690.247 L981.976 690.247 L982.535 690.247 L983.095 690.247 L983.654 690.247 L984.213 690.247 L984.772 690.247 L985.332 690.247 L985.891 690.247 L986.45 690.247 L987.009 690.247 L987.569 690.247 L988.128 690.247 L988.687 690.247 L989.246 690.247 L989.806 690.247 L990.365 690.247 L990.924 690.247 L991.483 690.247 L992.043 690.247 L992.602 690.247 L993.161 690.247 L993.72 690.247 L994.28 690.247 L994.839 690.247 L995.398 690.247 L995.957 690.247 L996.517 690.247 L997.076 690.247 L997.635 690.247 L998.194 690.247 L998.754 690.247 L999.313 690.247 L999.872 690.247 L1000.43 690.247 L1000.99 690.247 L1001.55 690.247 L1002.11 690.247 L1002.67 690.247 L1003.23 690.247 L1003.79 690.247 L1004.35 690.247 L1004.91 690.247 L1005.46 690.247 L1006.02 690.247 L1006.58 690.247 L1007.14 690.247 L1007.7 690.247 L1008.26 690.247 L1008.82 690.247 L1009.38 690.247 L1009.94 690.247 L1010.5 690.247 L1011.06 690.247 L1011.62 690.247 L1012.18 690.247 L1012.73 690.247 L1013.29 690.247 L1013.85 690.247 L1014.41 690.247 L1014.97 690.247 L1015.53 690.247 L1016.09 690.247 L1016.65 690.247 L1017.21 690.247 L1017.77 690.247 L1018.33 690.247 L1018.89 690.247 L1019.45 690.247 L1020.01 690.247 L1020.56 690.247 L1021.12 690.247 L1021.68 690.247 L1022.24 690.247 L1022.8 690.247 L1023.36 690.247 L1023.92 690.247 L1024.48 690.247 L1025.04 690.247 L1025.6 690.247 L1026.16 690.247 L1026.72 690.247 L1027.28 690.247 L1027.83 690.247 L1028.39 690.247 L1028.95 690.247 L1029.51 690.247 L1030.07 690.247 L1030.63 690.247 L1031.19 690.247 L1031.75 690.247 L1032.31 690.247 L1032.87 690.247 L1033.43 690.247 L1033.99 690.247 L1034.55 690.247 L1035.1 690.247 L1035.66 690.247 L1036.22 690.247 L1036.78 690.247 L1037.34 690.247 L1037.9 690.247 L1038.46 690.247 L1039.02 690.247 L1039.58 690.247 L1040.14 690.247 L1040.7 690.247 L1041.26 690.247 L1041.82 690.247 L1042.38 690.247 L1042.93 690.247 L1043.49 690.247 L1044.05 690.247 L1044.61 690.247 L1045.17 690.247 L1045.73 690.247 L1046.29 690.247 L1046.85 690.247 L1047.41 690.247 L1047.97 690.247 L1048.53 690.247 L1049.09 690.247 L1049.65 690.247 L1050.2 690.247 L1050.76 690.247 L1051.32 690.247 L1051.88 690.247 L1052.44 690.247 L1053 690.247 L1053.56 690.247 L1054.12 690.247 L1054.68 690.247 L1055.24 690.247 L1055.8 690.247 L1056.36 690.247 L1056.92 690.247 L1057.48 690.247 L1058.03 690.247 L1058.59 690.247 L1059.15 690.247 L1059.71 690.247 L1060.27 690.247 L1060.83 690.247 L1061.39 690.247 L1061.95 690.247 L1062.51 690.247 L1063.07 690.247 L1063.63 690.247 L1064.19 690.247 L1064.75 690.247 L1065.3 690.247 L1065.86 690.247 L1066.42 690.247 L1066.98 690.247 L1067.54 690.247 L1068.1 690.247 L1068.66 690.247 L1069.22 690.247 L1069.78 690.247 L1070.34 690.247 L1070.9 690.247 L1071.46 690.247 L1072.02 690.247 L1072.57 690.247 L1073.13 690.247 L1073.69 690.247 L1074.25 690.247 L1074.81 690.247 L1075.37 690.247 L1075.93 690.247 L1076.49 690.247 L1077.05 690.247 L1077.61 690.247 L1078.17 690.247 L1078.73 690.247 L1079.29 690.247 L1079.85 690.247 L1080.4 690.247 L1080.96 690.247 L1081.52 690.247 L1082.08 690.247 L1082.64 690.247 L1083.2 690.247 L1083.76 690.247 L1084.32 690.247 L1084.88 690.247 L1085.44 690.247 L1086 690.247 L1086.56 690.247 L1087.12 690.247 L1087.67 690.247 L1088.23 690.247 L1088.79 690.247 L1089.35 690.247 L1089.91 690.247 L1090.47 690.247 L1091.03 690.247 L1091.59 690.247 L1092.15 690.247 L1092.71 690.247 L1093.27 690.247 L1093.83 690.247 L1094.39 690.247 L1094.94 690.247 L1095.5 690.247 L1096.06 690.247 L1096.62 690.247 L1097.18 690.247 L1097.74 690.247 L1098.3 690.247 L1098.86 690.247 L1099.42 690.247 L1099.98 690.247 L1100.54 690.247 L1101.1 690.247 L1101.66 690.247 L1102.22 690.247 L1102.77 690.247 L1103.33 690.247 L1103.89 690.247 L1104.45 690.247 L1105.01 690.247 L1105.57 690.247 L1106.13 690.247 L1106.69 690.247 L1107.25 690.247 L1107.81 690.247 L1108.37 690.247 L1108.93 690.247 L1109.49 690.247 L1110.04 690.247 L1110.6 690.247 L1111.16 690.247 L1111.72 690.247 L1112.28 690.247 L1112.84 690.247 L1113.4 690.247 L1113.96 690.247 L1114.52 690.247 L1115.08 690.247 L1115.64 690.247 L1116.2 690.247 L1116.76 690.247 L1117.31 690.247 L1117.87 690.247 L1118.43 690.247 L1118.99 690.247 L1119.55 690.247 L1120.11 690.247 L1120.67 690.247 L1121.23 690.247 L1121.79 690.247 L1122.35 690.247 L1122.91 690.247 L1123.47 690.247 L1124.03 690.247 L1124.59 690.247 L1125.14 690.247 L1125.7 690.247 L1126.26 690.247 L1126.82 690.247 L1127.38 690.247 L1127.94 690.247 L1128.5 690.247 L1129.06 690.247 L1129.62 690.247 L1130.18 690.247 L1130.74 690.247 L1131.3 690.247 L1131.86 690.247 L1132.41 690.247 L1132.97 690.247 L1133.53 690.247 L1134.09 690.247 L1134.65 690.247 L1135.21 690.247 L1135.77 690.247 L1136.33 690.247 L1136.89 690.247 L1137.45 690.247 L1138.01 690.247 L1138.57 690.247 L1139.13 690.247 L1139.68 690.247 L1140.24 690.247 L1140.8 690.247 L1141.36 690.247 L1141.92 690.247 L1142.48 690.247 L1143.04 690.247 L1143.6 690.247 L1144.16 690.247 L1144.72 690.247 L1145.28 690.247 L1145.84 690.247 L1146.4 690.247 L1146.96 690.247 L1147.51 690.247 L1148.07 690.247 L1148.63 690.247 L1149.19 690.247 L1149.75 690.247 L1150.31 690.247 L1150.87 690.247 L1151.43 690.247 L1151.99 690.247 L1152.55 690.247 L1153.11 690.247 L1153.67 690.247 L1154.23 690.247 L1154.78 690.247 L1155.34 690.247 L1155.9 690.247 L1156.46 690.247 L1157.02 690.247 L1157.58 690.247 L1158.14 690.247 L1158.7 690.247 L1159.26 690.247 L1159.82 690.247 L1160.38 690.247 L1160.94 690.247 L1161.5 690.247 L1162.05 690.247 L1162.61 690.247 L1163.17 690.247 L1163.73 690.247 L1164.29 690.247 L1164.85 690.247 L1165.41 690.247 L1165.97 690.247 L1166.53 690.247 L1167.09 690.247 L1167.65 690.247 L1168.21 690.247 L1168.77 690.247 L1169.33 690.247 L1169.88 690.247 L1170.44 690.247 L1171 690.247 L1171.56 690.247 L1172.12 690.247 L1172.68 690.247 L1173.24 690.247 L1173.8 690.247 L1174.36 690.247 L1174.92 690.247 L1175.48 690.247 L1176.04 690.247 L1176.6 690.247 L1177.15 690.247 L1177.71 690.247 L1178.27 690.247 L1178.83 690.247 L1179.39 690.247 L1179.95 690.247 L1180.51 690.247 L1181.07 690.247 L1181.63 690.247 L1182.19 690.247 L1182.75 690.247 L1183.31 690.247 L1183.87 690.247 L1184.43 690.247 L1184.98 690.247 L1185.54 690.247 L1186.1 690.247 L1186.66 690.247 L1187.22 690.247 L1187.78 690.247 L1188.34 690.247 L1188.9 690.247 L1189.46 690.247 L1190.02 690.247 L1190.58 690.247 L1191.14 690.247 L1191.7 690.247 L1192.25 690.247 L1192.81 690.247 L1193.37 690.247 L1193.93 690.247 L1194.49 690.247 L1195.05 690.247 L1195.61 690.247 L1196.17 690.247 L1196.73 690.247 L1197.29 690.247 L1197.85 690.247 L1198.41 690.247 L1198.97 690.247 L1199.52 690.247 L1200.08 690.247 L1200.64 690.247 L1201.2 690.247 L1201.76 690.247 L1202.32 690.247 L1202.88 690.247 L1203.44 690.247 L1204 690.247 L1204.56 690.247 L1205.12 690.247 L1205.68 690.247 L1206.24 690.247 L1206.8 690.247 L1207.35 690.247 L1207.91 690.247 L1208.47 690.247 L1209.03 690.247 L1209.59 690.247 L1210.15 690.247 L1210.71 690.247 L1211.27 690.247 L1211.83 690.247 L1212.39 690.247 L1212.95 690.247 L1213.51 690.247 L1214.07 690.247 L1214.62 690.247 L1215.18 690.247 L1215.74 690.247 L1216.3 690.247 L1216.86 690.247 L1217.42 690.247 L1217.98 690.247 L1218.54 690.247 L1219.1 690.247 L1219.66 690.247 L1220.22 690.247 L1220.78 690.247 L1221.34 690.247 L1221.89 690.247 L1222.45 690.247 L1223.01 690.247 L1223.57 690.247 L1224.13 690.247 L1224.69 690.247 L1225.25 690.247 L1225.81 690.247 L1226.37 690.247 L1226.93 690.247 L1227.49 690.247 L1228.05 690.247 L1228.61 690.247 L1229.17 690.247 L1229.72 690.247 L1230.28 690.247 L1230.84 690.247 L1231.4 690.247 L1231.96 690.247 L1232.52 690.247 L1233.08 690.247 L1233.64 690.247 L1234.2 690.247 L1234.76 690.247 L1235.32 690.247 L1235.88 690.247 L1236.44 690.247 L1236.99 690.247 L1237.55 690.247 L1238.11 690.247 L1238.67 690.247 L1239.23 690.247 L1239.79 690.247 L1240.35 690.247 L1240.91 690.247 L1241.47 690.247 L1242.03 690.247 L1242.59 690.247 L1243.15 690.247 L1243.71 690.247 L1244.26 690.247 L1244.82 690.247 L1245.38 690.247 L1245.94 690.247 L1246.5 690.247 L1247.06 690.247 L1247.62 690.247 L1248.18 690.247 L1248.74 690.247 L1249.3 690.247 L1249.86 690.247 L1250.42 690.247 L1250.98 690.247 L1251.54 690.247 L1252.09 690.247 L1252.65 690.247 L1253.21 690.247 L1253.77 690.247 L1254.33 690.247 L1254.89 690.247 L1255.45 690.247 L1256.01 690.247 L1256.57 690.247 L1257.13 690.247 L1257.69 690.247 L1258.25 690.247 L1258.81 690.247 L1259.36 690.247 L1259.92 690.247 L1260.48 690.247 L1261.04 690.247 L1261.6 690.247 L1262.16 690.247 L1262.72 690.247 L1263.28 690.247 L1263.84 690.247 L1264.4 690.247 L1264.96 690.247 L1265.52 690.247 L1266.08 690.247 L1266.63 690.247 L1267.19 690.247 L1267.75 690.247 L1268.31 690.247 L1268.87 690.247 L1269.43 690.247 L1269.99 690.247 L1270.55 690.247 L1271.11 690.247 L1271.67 690.247 L1272.23 690.247 L1272.79 690.247 L1273.35 690.247 L1273.91 690.247 L1274.46 690.247 L1275.02 690.247 L1275.58 690.247 L1276.14 690.247 L1276.7 690.247 L1277.26 690.247 L1277.82 690.247 L1278.38 690.247 L1278.94 690.247 L1279.5 690.247 L1280.06 690.247 L1280.62 690.247 L1281.18 690.247 L1281.73 690.247 L1282.29 690.247 L1282.85 690.247 L1283.41 690.247 L1283.97 690.247 L1284.53 690.247 L1285.09 690.247 L1285.65 690.247 L1286.21 690.247 L1286.77 690.247 L1287.33 690.247 L1287.89 690.247 L1288.45 690.247 L1289 690.247 L1289.56 690.247 L1290.12 690.247 L1290.68 690.247 L1291.24 690.247 L1291.8 690.247 L1292.36 690.247 L1292.92 690.247 L1293.48 690.247 L1294.04 690.247 L1294.6 690.247 L1295.16 690.247 L1295.72 690.247 L1296.28 690.247 L1296.83 690.247 L1297.39 690.247 L1297.95 690.247 L1298.51 690.247 L1299.07 690.247 L1299.63 690.247 L1300.19 690.247 L1300.75 690.247 L1301.31 690.247 L1301.87 690.247 L1302.43 690.247 L1302.99 690.247 L1303.55 690.247 L1304.1 690.247 L1304.66 690.247 L1305.22 690.247 L1305.78 690.247 L1306.34 690.247 L1306.9 690.247 L1307.46 690.247 L1308.02 690.247 L1308.58 690.247 L1309.14 690.247 L1309.7 690.247 L1310.26 690.247 L1310.82 690.247 L1311.38 690.247 L1311.93 690.247 L1312.49 690.247 L1313.05 690.247 L1313.61 690.247 L1314.17 690.247 L1314.73 690.247 L1315.29 690.247 L1315.85 690.247 L1316.41 690.247 L1316.97 690.247 L1317.53 690.247 L1318.09 690.247 L1318.65 690.247 L1319.2 690.247 L1319.76 690.247 L1320.32 690.247 L1320.88 690.247 L1321.44 690.247 L1322 690.247 L1322.56 690.247 L1323.12 690.247 L1323.68 690.247 L1324.24 690.247 L1324.8 690.247 L1325.36 690.247 L1325.92 690.247 L1326.47 690.247 L1327.03 690.247 L1327.59 690.247 L1328.15 690.247 L1328.71 690.247 L1329.27 690.247 L1329.83 690.247 L1330.39 690.247 L1330.95 690.247 L1331.51 690.247 L1332.07 690.247 L1332.63 690.247 L1333.19 690.247 L1333.75 690.247 L1334.3 690.247 L1334.86 690.247 L1335.42 690.247 L1335.98 690.247 L1336.54 690.247 L1337.1 690.247 L1337.66 690.247 L1338.22 690.247 L1338.78 690.247 L1339.34 690.247 L1339.9 690.247 L1340.46 690.247 L1341.02 690.247 L1341.57 690.247 L1342.13 690.247 L1342.69 690.247 L1343.25 690.247 L1343.81 690.247 L1344.37 690.247 L1344.93 690.247 L1345.49 690.247 L1346.05 690.247 L1346.61 690.247 L1347.17 690.247 L1347.73 690.247 L1348.29 690.247 L1348.84 690.247 L1349.4 690.247 L1349.96 690.247 L1350.52 690.247 L1351.08 690.247 L1351.64 690.247 L1352.2 690.247 L1352.76 690.247 L1353.32 690.247 L1353.88 690.247 L1354.44 690.247 L1355 690.247 L1355.56 690.247 L1356.12 690.247 L1356.67 690.247 L1357.23 690.247 L1357.79 690.247 L1358.35 690.247 L1358.91 690.247 L1359.47 690.247 L1360.03 690.247 L1360.59 690.247 L1361.15 690.247 L1361.71 690.247 L1362.27 690.247 L1362.83 690.247 L1363.39 690.247 L1363.94 690.247 L1364.5 690.247 L1365.06 690.247 L1365.62 690.247 L1366.18 690.247 L1366.74 690.247 L1367.3 690.247 L1367.86 690.247 L1368.42 690.247 L1368.98 690.247 L1369.54 690.247 L1370.1 690.247 L1370.66 690.247 L1371.21 690.247 L1371.77 690.247 L1372.33 690.247 L1372.89 690.247 L1373.45 690.247 L1374.01 690.247 L1374.57 690.247 L1375.13 690.247 L1375.69 690.247 L1376.25 690.247 L1376.81 690.247 L1377.37 690.247 L1377.93 690.247 L1378.49 690.247 L1379.04 690.247 L1379.6 690.247 L1380.16 690.247 L1380.72 690.247 L1381.28 690.247 L1381.84 690.247 L1382.4 690.247 L1382.96 690.247 L1383.52 690.247 L1384.08 690.247 L1384.64 690.247 L1385.2 690.247 L1385.76 690.247 L1386.31 690.247 L1386.87 690.247 L1387.43 690.247 L1387.99 690.247 L1388.55 690.247 L1389.11 690.247 L1389.67 690.247 L1390.23 690.247 L1390.79 690.247 L1391.35 690.247 L1391.91 690.247 L1392.47 690.247 L1393.03 690.247 L1393.58 690.247 L1394.14 690.247 L1394.7 690.247 L1395.26 690.247 L1395.82 690.247 L1396.38 690.247 L1396.94 690.247 L1397.5 690.247 L1398.06 690.247 L1398.62 690.247 L1399.18 690.247 L1399.74 690.247 L1400.3 690.247 L1400.86 690.247 L1401.41 690.247 L1401.97 690.247 L1402.53 690.247 L1403.09 690.247 L1403.65 690.247 L1404.21 690.247 L1404.77 690.247 L1405.33 690.247 L1405.89 690.247 L1406.45 690.247 L1407.01 690.247 L1407.57 690.247 L1408.13 690.247 L1408.68 690.247 L1409.24 690.247 L1409.8 690.247 L1410.36 690.247 L1410.92 690.247 L1411.48 690.247 L1412.04 690.247 L1412.6 690.247 L1413.16 690.247 L1413.72 690.247 L1414.28 690.247 L1414.84 690.247 L1415.4 690.247 L1415.95 690.247 L1416.51 690.247 L1417.07 690.247 L1417.63 690.247 L1418.19 690.247 L1418.75 690.247 L1419.31 690.247 L1419.87 690.247 L1420.43 690.247 L1420.99 690.247 L1421.55 690.247 L1422.11 690.247 L1422.67 690.247 L1423.23 690.247 L1423.78 690.247 L1424.34 690.247 L1424.9 690.247 L1425.46 690.247 L1426.02 690.247 L1426.58 690.247 L1427.14 690.247 L1427.7 690.247 L1428.26 690.247 L1428.82 690.247 L1429.38 690.247 L1429.94 690.247 L1430.5 690.247 L1431.05 690.247 L1431.61 690.247 L1432.17 690.247 L1432.73 690.247 L1433.29 690.247 L1433.85 690.247 L1434.41 690.247 L1434.97 690.247 L1435.53 690.247 L1436.09 690.247 L1436.65 690.247 L1437.21 690.247 L1437.77 690.247 L1438.33 690.247 L1438.88 690.247 L1439.44 690.247 L1440 690.247 L1440.56 690.247 L1441.12 690.247 L1441.68 690.247 L1442.24 690.247 L1442.8 690.247 L1443.36 690.247 L1443.92 690.247 L1444.48 690.247 L1445.04 690.247 L1445.6 690.247 L1446.15 690.247 L1446.71 690.247 L1447.27 690.247 L1447.83 690.247 L1448.39 690.247 L1448.95 690.247 L1449.51 690.247 L1450.07 690.247 L1450.63 690.247 L1451.19 690.247 L1451.75 690.247 L1452.31 690.247 L1452.87 690.247 L1453.42 690.247 L1453.98 690.247 L1454.54 690.247 L1455.1 690.247 L1455.66 690.247 L1456.22 690.247 L1456.78 690.247 L1457.34 690.247 L1457.9 690.247 L1458.46 690.247 L1459.02 690.247 L1459.58 690.247 L1460.14 690.247 L1460.7 690.247 L1461.25 690.247 L1461.81 690.247 L1462.37 690.247 L1462.93 690.247 L1463.49 690.247 L1464.05 690.247 L1464.61 690.247 L1465.17 690.247 L1465.73 690.247 L1466.29 690.247 L1466.85 690.247 L1467.41 690.247 L1467.97 690.247 L1468.52 690.247 L1469.08 690.247 L1469.64 690.247 L1470.2 690.247 L1470.76 690.247 L1471.32 690.247 L1471.88 690.247 L1472.44 690.247 L1473 690.247 L1473.56 690.247 L1474.12 690.247 L1474.68 690.247 L1475.24 690.247 L1475.79 690.247 L1476.35 690.247 L1476.91 690.247 L1477.47 690.247 L1478.03 690.247 L1478.59 690.247 L1479.15 690.247 L1479.71 690.247 L1480.27 690.247 L1480.83 690.247 L1481.39 690.247 L1481.95 690.247 L1482.51 690.247 L1483.07 690.247 L1483.62 690.247 L1484.18 690.247 L1484.74 690.247 L1485.3 690.247 L1485.86 690.247 L1486.42 690.247 L1486.98 690.247 L1487.54 690.247 L1488.1 690.247 L1488.66 690.247 L1489.22 690.247 L1489.78 690.247 L1490.34 690.247 L1490.89 690.247 L1491.45 690.247 L1492.01 690.247 L1492.57 690.247 L1493.13 690.247 L1493.69 690.247 L1494.25 690.247 L1494.81 690.247 L1495.37 690.247 L1495.93 690.247 L1496.49 690.247 L1497.05 690.247 L1497.61 690.247 L1498.16 690.247 L1498.72 690.247 L1499.28 690.247 L1499.84 690.247 L1500.4 690.247 L1500.96 690.247 L1501.52 690.247 L1502.08 690.247 L1502.64 690.247 L1503.2 690.247 L1503.76 690.247 L1504.32 690.247 L1504.88 690.247 L1505.44 690.247 L1505.99 690.247 L1506.55 690.247 L1507.11 690.247 L1507.67 690.247 L1508.23 690.247 L1508.79 690.247 L1509.35 690.247 L1509.91 690.247 L1510.47 690.247 L1511.03 690.247 L1511.59 690.247 L1512.15 690.247 L1512.71 690.247 L1513.26 690.247 L1513.82 690.247 L1514.38 690.247 L1514.94 690.247 L1515.5 690.247 L1516.06 690.247 L1516.62 690.247 L1517.18 690.247 L1517.74 690.247 L1518.3 690.247 L1518.86 690.247 L1519.42 690.247 L1519.98 690.247 L1520.53 690.247 L1521.09 690.247 L1521.65 690.247 L1522.21 690.247 L1522.77 690.247 L1523.33 690.247 L1523.89 690.247 L1524.45 690.247 L1525.01 690.247 L1525.57 690.247 L1526.13 690.247 L1526.69 690.247 L1527.25 690.247 L1527.81 690.247 L1528.36 690.247 L1528.92 690.247 L1529.48 690.247 L1530.04 690.247 L1530.6 690.247 L1531.16 690.247 L1531.72 690.247 L1532.28 690.247 L1532.84 690.247 L1533.4 690.247 L1533.96 690.247 L1534.52 690.247 L1535.08 690.247 L1535.63 690.247 L1536.19 690.247 L1536.75 690.247 L1537.31 690.247 L1537.87 690.247 L1538.43 690.247 L1538.99 690.247 L1539.55 690.247 L1540.11 690.247 L1540.67 690.247 L1541.23 690.247 L1541.79 690.247 L1542.35 690.247 L1542.9 690.247 L1543.46 690.247 L1544.02 690.247 L1544.58 690.247 L1545.14 690.247 L1545.7 690.247 L1546.26 690.247 L1546.82 690.247 L1547.38 690.247 L1547.94 690.247 L1548.5 690.247 L1549.06 690.247 L1549.62 690.247 L1550.18 690.247 L1550.73 690.247 L1551.29 690.247 L1551.85 690.247 L1552.41 690.247 L1552.97 690.247 L1553.53 690.247 L1554.09 690.247 L1554.65 690.247 L1555.21 690.247 L1555.77 690.247 L1556.33 690.247 L1556.89 690.247 L1557.45 690.247 L1558 690.247 L1558.56 690.247 L1559.12 690.247 L1559.68 690.247 L1560.24 690.247 L1560.8 690.247 L1561.36 690.247 L1561.92 690.247 L1562.48 690.247 L1563.04 690.247 L1563.6 690.247 L1564.16 690.247 L1564.72 690.247 L1565.28 690.247 L1565.83 690.247 L1566.39 690.247 L1566.95 690.247 L1567.51 690.247 L1568.07 690.247 L1568.63 690.247 L1569.19 690.247 L1569.75 690.247 L1570.31 690.247 L1570.87 690.247 L1571.43 690.247 L1571.99 690.247 L1572.55 690.247 L1573.1 690.247 L1573.66 690.247 L1574.22 690.247 L1574.78 690.247 L1575.34 690.247 L1575.9 690.247 L1576.46 690.247 L1577.02 690.247 L1577.58 690.247 L1578.14 690.247 L1578.7 690.247 L1579.26 690.247 L1579.82 690.247 L1580.37 690.247 L1580.93 690.247 L1581.49 690.247 L1582.05 690.247 L1582.61 690.247 L1583.17 690.247 L1583.73 690.247 L1584.29 690.247 L1584.85 690.247 L1585.41 690.247 L1585.97 690.247 L1586.53 690.247 L1587.09 690.247 L1587.65 690.247 L1588.2 690.247 L1588.76 690.247 L1589.32 690.247 L1589.88 690.247 L1590.44 690.247 L1591 690.247 L1591.56 690.247 L1592.12 690.247 L1592.68 690.247 L1593.24 690.247 L1593.8 690.247 L1594.36 690.247 L1594.92 690.247 L1595.47 690.247 L1596.03 690.247 L1596.59 690.247 L1597.15 690.247 L1597.71 690.247 L1598.27 690.247 L1598.83 690.247 L1599.39 690.247 L1599.95 690.247 L1600.51 690.247 L1601.07 690.247 L1601.63 690.247 L1602.19 690.247 L1602.74 690.247 L1603.3 690.247 L1603.86 690.247 L1604.42 690.247 L1604.98 690.247 L1605.54 690.247 L1606.1 690.247 L1606.66 690.247 L1607.22 690.247 L1607.78 690.247 L1608.34 690.247 L1608.9 690.247 L1609.46 690.247 L1610.02 690.247 L1610.57 690.247 L1611.13 690.247 L1611.69 690.247 L1612.25 690.247 L1612.81 690.247 L1613.37 690.247 L1613.93 690.247 L1614.49 690.247 L1615.05 690.247 L1615.61 690.247 L1616.17 690.247 L1616.73 690.247 L1617.29 690.247 L1617.84 690.247 L1618.4 690.247 L1618.96 690.247 L1619.52 690.247 L1620.08 690.247 L1620.64 690.247 L1621.2 690.247 L1621.76 690.247 L1622.32 690.247 L1622.88 690.247 L1623.44 690.247 L1624 690.247 L1624.56 690.247 L1625.11 690.247 L1625.67 690.247 L1626.23 690.247 L1626.79 690.247 L1627.35 690.247 L1627.91 690.247 L1628.47 690.247 L1629.03 690.247 L1629.59 690.247 L1630.15 690.247 L1630.71 690.247 L1631.27 690.247 L1631.83 690.247 L1632.39 690.247 L1632.94 690.247 L1633.5 690.247 L1634.06 690.247 L1634.62 690.247 L1635.18 690.247 L1635.74 690.247 L1636.3 690.247 L1636.86 690.247 L1637.42 690.247 L1637.98 690.247 L1638.54 690.247 L1639.1 690.247 L1639.66 690.247 L1640.21 690.247 L1640.77 690.247 L1641.33 690.247 L1641.89 690.247 L1642.45 690.247 L1643.01 690.247 L1643.57 690.247 L1644.13 690.247 L1644.69 690.247 L1645.25 690.247 L1645.81 690.247 L1646.37 690.247 L1646.93 690.247 L1647.48 690.247 L1648.04 690.247 L1648.6 690.247 L1649.16 690.247 L1649.72 690.247 L1650.28 690.247 L1650.84 690.247 L1651.4 690.247 L1651.96 690.247 L1652.52 690.247 L1653.08 690.247 L1653.64 690.247 L1654.2 690.247 L1654.76 690.247 L1655.31 690.247 L1655.87 690.247 L1656.43 690.247 L1656.99 690.247 L1657.55 690.247 L1658.11 690.247 L1658.67 690.247 L1659.23 690.247 L1659.79 690.247 L1660.35 690.247 L1660.91 690.247 L1661.47 690.247 L1662.03 690.247 L1662.58 690.247 L1663.14 690.247 L1663.7 690.247 L1664.26 690.247 L1664.82 690.247 L1665.38 690.247 L1665.94 690.247 L1666.5 690.247 L1667.06 690.247 L1667.62 690.247 L1668.18 690.247 L1668.74 690.247 L1669.3 690.247 L1669.85 690.247 L1670.41 690.247 L1670.97 690.247 L1671.53 690.247 L1672.09 690.247 L1672.65 690.247 L1673.21 690.247 L1673.77 690.247 L1674.33 690.247 L1674.89 690.247 L1675.45 690.247 L1676.01 690.247 L1676.57 690.247 L1677.13 690.247 L1677.68 690.247 L1678.24 690.247 L1678.8 690.247 L1679.36 690.247 L1679.92 690.247 L1680.48 690.247 L1681.04 690.247 L1681.6 690.247 L1682.16 690.247 L1682.72 690.247 L1683.28 690.247 L1683.84 690.247 L1684.4 690.247 L1684.95 690.247 L1685.51 690.247 L1686.07 690.247 L1686.63 690.247 L1687.19 690.247 L1687.75 690.247 L1688.31 690.247 L1688.87 690.247 L1689.43 690.247 L1689.99 690.247 L1690.55 690.247 L1691.11 690.247 L1691.67 690.247 L1692.23 690.247 L1692.78 690.247 L1693.34 690.247 L1693.9 690.247 L1694.46 690.247 L1695.02 690.247 L1695.58 690.247 L1696.14 690.247 L1696.7 690.247 L1697.26 690.247 L1697.82 690.247 L1698.38 690.247 L1698.94 690.247 L1699.5 690.247 L1700.05 690.247 L1700.61 690.247 L1701.17 690.247 L1701.73 690.247 L1702.29 690.247 L1702.85 690.247 L1703.41 690.247 L1703.97 690.247 L1704.53 690.247 L1705.09 690.247 L1705.65 690.247 L1706.21 690.247 L1706.77 690.247 L1707.32 690.247 L1707.88 690.247 L1708.44 690.247 L1709 690.247 L1709.56 690.247 L1710.12 690.247 L1710.68 690.247 L1711.24 690.247 L1711.8 690.247 L1712.36 690.247 L1712.92 690.247 L1713.48 690.247 L1714.04 690.247 L1714.6 690.247 L1715.15 690.247 L1715.71 690.247 L1716.27 690.247 L1716.83 690.247 L1717.39 690.247 L1717.95 690.247 L1718.51 690.247 L1719.07 690.247 L1719.63 690.247 L1720.19 690.247 L1720.75 690.247 L1721.31 690.247 L1721.87 690.247 L1722.42 690.247 L1722.98 690.247 L1723.54 690.247 L1724.1 690.247 L1724.66 690.247 L1725.22 690.247 L1725.78 690.247 L1726.34 690.247 L1726.9 690.247 L1727.46 690.247 L1728.02 690.247 L1728.58 690.247 L1729.14 690.247 L1729.69 690.247 L1730.25 690.247 L1730.81 690.247 L1731.37 690.247 L1731.93 690.247 L1732.49 690.247 L1733.05 690.247 L1733.61 690.247 L1734.17 690.247 L1734.73 690.247 L1735.29 690.247 L1735.85 690.247 L1736.41 690.247 L1736.97 690.247 L1737.52 690.247 L1738.08 690.247 L1738.64 690.247 L1739.2 690.247 L1739.76 690.247 L1740.32 690.247 L1740.88 690.247 L1741.44 690.247 L1742 690.247 L1742.56 690.247 L1743.12 690.247 L1743.68 690.247 L1744.24 690.247 L1744.79 690.247 L1745.35 690.247 L1745.91 690.247 L1746.47 690.247 L1747.03 690.247 L1747.59 690.247 L1748.15 690.247 L1748.71 690.247 L1749.27 690.247 L1749.83 690.247 L1750.39 690.247 L1750.95 690.247 L1751.51 690.247 L1752.06 690.247 L1752.62 690.247 L1753.18 690.247 L1753.74 690.247 L1754.3 690.247 L1754.86 690.247 L1755.42 690.247 L1755.98 690.247 L1756.54 690.247 L1757.1 690.247 L1757.66 690.247 L1758.22 690.247 L1758.78 690.247 L1759.34 690.247 L1759.89 690.247 L1760.45 690.247 L1761.01 690.247 L1761.57 690.247 L1762.13 690.247 L1762.69 690.247 L1763.25 690.247 L1763.81 690.247 L1764.37 690.247 L1764.93 690.247 L1765.49 690.247 L1766.05 690.247 L1766.61 690.247 L1767.16 690.247 L1767.72 690.247 L1768.28 690.247 L1768.84 690.247 L1769.4 690.247 L1769.96 690.247 L1770.52 690.247 L1771.08 690.247 L1771.64 690.247 L1772.2 690.247 L1772.76 690.247 L1773.32 690.247 L1773.88 690.247 L1774.43 690.247 L1774.99 690.247 L1775.55 690.247 L1776.11 690.247 L1776.67 690.247 L1777.23 690.247 L1777.79 690.247 L1778.35 690.247 L1778.91 690.247 L1779.47 690.247 L1780.03 690.247 L1780.59 690.247 L1781.15 690.247 L1781.71 690.247 L1782.26 690.247 L1782.82 690.247 L1783.38 690.247 L1783.94 690.247 L1784.5 690.247 L1785.06 690.247 L1785.62 690.247 L1786.18 690.247 L1786.74 690.247 L1787.3 690.247 L1787.86 690.247 L1788.42 690.247 L1788.98 690.247 L1789.53 690.247 L1790.09 690.247 L1790.65 690.247 L1791.21 690.247 L1791.77 690.247 L1792.33 690.247 L1792.89 690.247 L1793.45 690.247 L1794.01 690.247 L1794.57 690.247 L1795.13 690.247 L1795.69 690.247 L1796.25 690.247 L1796.8 690.247 L1797.36 690.247 L1797.92 690.247 L1798.48 690.247 L1799.04 690.247 L1799.6 690.247 L1800.16 690.247 L1800.72 690.247 L1801.28 690.247 L1801.84 690.247 L1802.4 690.247 L1802.96 690.247 L1803.52 690.247 L1804.08 690.247 L1804.63 690.247 L1805.19 690.247 L1805.75 690.247 L1806.31 690.247 L1806.87 690.247 L1807.43 690.247 L1807.99 690.247 L1808.55 690.247 L1809.11 690.247 L1809.67 690.247 L1810.23 690.247 L1810.79 690.247 L1811.35 690.247 L1811.9 690.247 L1812.46 690.247 L1813.02 690.247 L1813.58 690.247 L1814.14 690.247 L1814.7 690.247 L1815.26 690.247 L1815.82 690.247 L1816.38 690.247 L1816.94 690.247 L1817.5 690.247 L1818.06 690.247 L1818.62 690.247 L1819.18 690.247 L1819.73 690.247 L1820.29 690.247 L1820.85 690.247 L1821.41 690.247 L1821.97 690.247 L1822.53 690.247 L1823.09 690.247 L1823.65 690.247 L1824.21 690.247 L1824.77 690.247 L1825.33 690.247 L1825.89 690.247 L1826.45 690.247 L1827 690.247 L1827.56 690.247 L1828.12 690.247 L1828.68 690.247 L1829.24 690.247 L1829.8 690.247 L1830.36 690.247 L1830.92 690.247 L1831.48 690.247 L1832.04 690.247 L1832.6 690.247 L1833.16 690.247 L1833.72 690.247 L1834.27 690.247 L1834.83 690.247 L1835.39 690.247 L1835.95 690.247 L1836.51 690.247 L1837.07 690.247 L1837.63 690.247 L1838.19 690.247 L1838.19 683.488 L1837.63 683.488 L1837.07 683.488 L1836.51 683.488 L1835.95 683.488 L1835.39 683.488 L1834.83 683.488 L1834.27 683.488 L1833.72 683.488 L1833.16 683.488 L1832.6 683.488 L1832.04 683.488 L1831.48 683.488 L1830.92 683.488 L1830.36 683.488 L1829.8 683.488 L1829.24 683.488 L1828.68 683.488 L1828.12 683.488 L1827.56 683.488 L1827 683.488 L1826.45 683.488 L1825.89 683.488 L1825.33 683.488 L1824.77 683.488 L1824.21 683.488 L1823.65 683.488 L1823.09 683.488 L1822.53 683.488 L1821.97 683.488 L1821.41 683.488 L1820.85 683.488 L1820.29 683.488 L1819.73 683.488 L1819.18 683.488 L1818.62 683.488 L1818.06 683.488 L1817.5 683.488 L1816.94 683.488 L1816.38 683.488 L1815.82 683.488 L1815.26 683.488 L1814.7 683.488 L1814.14 683.488 L1813.58 683.488 L1813.02 683.488 L1812.46 683.488 L1811.9 683.488 L1811.35 683.488 L1810.79 683.488 L1810.23 683.488 L1809.67 683.488 L1809.11 683.488 L1808.55 683.488 L1807.99 683.488 L1807.43 683.488 L1806.87 683.488 L1806.31 683.488 L1805.75 683.488 L1805.19 683.488 L1804.63 683.488 L1804.08 683.488 L1803.52 683.488 L1802.96 683.488 L1802.4 683.488 L1801.84 683.488 L1801.28 683.488 L1800.72 683.488 L1800.16 683.488 L1799.6 683.488 L1799.04 683.488 L1798.48 683.488 L1797.92 683.488 L1797.36 683.488 L1796.8 683.488 L1796.25 683.488 L1795.69 683.488 L1795.13 683.488 L1794.57 683.488 L1794.01 683.488 L1793.45 683.488 L1792.89 683.488 L1792.33 683.488 L1791.77 683.488 L1791.21 683.488 L1790.65 683.488 L1790.09 683.488 L1789.53 683.488 L1788.98 683.488 L1788.42 683.488 L1787.86 683.488 L1787.3 683.488 L1786.74 683.488 L1786.18 683.488 L1785.62 683.488 L1785.06 683.488 L1784.5 683.488 L1783.94 683.488 L1783.38 683.488 L1782.82 683.488 L1782.26 683.488 L1781.71 683.488 L1781.15 683.488 L1780.59 683.488 L1780.03 683.488 L1779.47 683.488 L1778.91 683.488 L1778.35 683.488 L1777.79 683.488 L1777.23 683.488 L1776.67 683.488 L1776.11 683.488 L1775.55 683.488 L1774.99 683.488 L1774.43 683.488 L1773.88 683.488 L1773.32 683.488 L1772.76 683.488 L1772.2 683.488 L1771.64 683.488 L1771.08 683.488 L1770.52 683.488 L1769.96 683.488 L1769.4 683.488 L1768.84 683.488 L1768.28 683.488 L1767.72 683.488 L1767.16 683.488 L1766.61 683.488 L1766.05 683.488 L1765.49 683.488 L1764.93 683.488 L1764.37 683.488 L1763.81 683.488 L1763.25 683.488 L1762.69 683.488 L1762.13 683.488 L1761.57 683.488 L1761.01 683.488 L1760.45 683.488 L1759.89 683.488 L1759.34 683.488 L1758.78 683.488 L1758.22 683.488 L1757.66 683.488 L1757.1 683.488 L1756.54 683.488 L1755.98 683.488 L1755.42 683.488 L1754.86 683.488 L1754.3 683.488 L1753.74 683.488 L1753.18 683.488 L1752.62 683.488 L1752.06 683.488 L1751.51 683.488 L1750.95 683.488 L1750.39 683.488 L1749.83 683.488 L1749.27 683.488 L1748.71 683.488 L1748.15 683.488 L1747.59 683.488 L1747.03 683.488 L1746.47 683.488 L1745.91 683.488 L1745.35 683.488 L1744.79 683.488 L1744.24 683.488 L1743.68 683.488 L1743.12 683.488 L1742.56 683.488 L1742 683.488 L1741.44 683.488 L1740.88 683.488 L1740.32 683.488 L1739.76 683.488 L1739.2 683.488 L1738.64 683.488 L1738.08 683.488 L1737.52 683.488 L1736.97 683.488 L1736.41 683.488 L1735.85 683.488 L1735.29 683.488 L1734.73 683.488 L1734.17 683.488 L1733.61 683.488 L1733.05 683.488 L1732.49 683.488 L1731.93 683.488 L1731.37 683.488 L1730.81 683.488 L1730.25 683.488 L1729.69 683.488 L1729.14 683.488 L1728.58 683.488 L1728.02 683.488 L1727.46 683.488 L1726.9 683.488 L1726.34 683.488 L1725.78 683.488 L1725.22 683.488 L1724.66 683.488 L1724.1 683.488 L1723.54 683.488 L1722.98 683.488 L1722.42 683.488 L1721.87 683.488 L1721.31 683.488 L1720.75 683.488 L1720.19 683.488 L1719.63 683.488 L1719.07 683.488 L1718.51 683.488 L1717.95 683.488 L1717.39 683.488 L1716.83 683.488 L1716.27 683.488 L1715.71 683.488 L1715.15 683.488 L1714.6 683.488 L1714.04 683.488 L1713.48 683.488 L1712.92 683.488 L1712.36 683.488 L1711.8 683.488 L1711.24 683.488 L1710.68 683.488 L1710.12 683.488 L1709.56 683.488 L1709 683.488 L1708.44 683.488 L1707.88 683.488 L1707.32 683.488 L1706.77 683.488 L1706.21 683.488 L1705.65 683.488 L1705.09 683.488 L1704.53 683.488 L1703.97 683.488 L1703.41 683.488 L1702.85 683.488 L1702.29 683.488 L1701.73 683.488 L1701.17 683.488 L1700.61 683.488 L1700.05 683.488 L1699.5 683.488 L1698.94 683.488 L1698.38 683.488 L1697.82 683.488 L1697.26 683.488 L1696.7 683.488 L1696.14 683.488 L1695.58 683.488 L1695.02 683.488 L1694.46 683.488 L1693.9 683.488 L1693.34 683.488 L1692.78 683.488 L1692.23 683.488 L1691.67 683.488 L1691.11 683.488 L1690.55 683.488 L1689.99 683.488 L1689.43 683.488 L1688.87 683.488 L1688.31 683.488 L1687.75 683.488 L1687.19 683.488 L1686.63 683.488 L1686.07 683.488 L1685.51 683.488 L1684.95 683.488 L1684.4 683.488 L1683.84 683.488 L1683.28 683.488 L1682.72 683.488 L1682.16 683.488 L1681.6 683.488 L1681.04 683.488 L1680.48 683.488 L1679.92 683.488 L1679.36 683.488 L1678.8 683.488 L1678.24 683.488 L1677.68 683.488 L1677.13 683.488 L1676.57 683.488 L1676.01 683.488 L1675.45 683.488 L1674.89 683.488 L1674.33 683.488 L1673.77 683.488 L1673.21 683.488 L1672.65 683.488 L1672.09 683.488 L1671.53 683.488 L1670.97 683.488 L1670.41 683.488 L1669.85 683.488 L1669.3 683.488 L1668.74 683.488 L1668.18 683.488 L1667.62 683.488 L1667.06 683.488 L1666.5 683.488 L1665.94 683.488 L1665.38 683.488 L1664.82 683.488 L1664.26 683.488 L1663.7 683.488 L1663.14 683.488 L1662.58 683.488 L1662.03 683.488 L1661.47 683.488 L1660.91 683.488 L1660.35 683.488 L1659.79 683.488 L1659.23 683.488 L1658.67 683.488 L1658.11 683.488 L1657.55 683.488 L1656.99 683.488 L1656.43 683.488 L1655.87 683.488 L1655.31 683.488 L1654.76 683.488 L1654.2 683.488 L1653.64 683.488 L1653.08 683.488 L1652.52 683.488 L1651.96 683.488 L1651.4 683.488 L1650.84 683.488 L1650.28 683.488 L1649.72 683.488 L1649.16 683.488 L1648.6 683.488 L1648.04 683.488 L1647.48 683.488 L1646.93 683.488 L1646.37 683.488 L1645.81 683.488 L1645.25 683.488 L1644.69 683.488 L1644.13 683.488 L1643.57 683.488 L1643.01 683.488 L1642.45 683.488 L1641.89 683.488 L1641.33 683.488 L1640.77 683.488 L1640.21 683.488 L1639.66 683.488 L1639.1 683.488 L1638.54 683.488 L1637.98 683.488 L1637.42 683.488 L1636.86 683.488 L1636.3 683.488 L1635.74 683.488 L1635.18 683.488 L1634.62 683.488 L1634.06 683.488 L1633.5 683.488 L1632.94 683.488 L1632.39 683.488 L1631.83 683.488 L1631.27 683.488 L1630.71 683.488 L1630.15 683.488 L1629.59 683.488 L1629.03 683.488 L1628.47 683.488 L1627.91 683.488 L1627.35 683.488 L1626.79 683.488 L1626.23 683.488 L1625.67 683.488 L1625.11 683.488 L1624.56 683.488 L1624 683.488 L1623.44 683.488 L1622.88 683.488 L1622.32 683.488 L1621.76 683.488 L1621.2 683.488 L1620.64 683.488 L1620.08 683.488 L1619.52 683.488 L1618.96 683.488 L1618.4 683.488 L1617.84 683.488 L1617.29 683.488 L1616.73 683.488 L1616.17 683.488 L1615.61 683.488 L1615.05 683.488 L1614.49 683.488 L1613.93 683.488 L1613.37 683.488 L1612.81 683.488 L1612.25 683.488 L1611.69 683.488 L1611.13 683.488 L1610.57 683.488 L1610.02 683.488 L1609.46 683.488 L1608.9 683.488 L1608.34 683.488 L1607.78 683.488 L1607.22 683.488 L1606.66 683.488 L1606.1 683.488 L1605.54 683.488 L1604.98 683.488 L1604.42 683.488 L1603.86 683.488 L1603.3 683.488 L1602.74 683.488 L1602.19 683.488 L1601.63 683.488 L1601.07 683.488 L1600.51 683.488 L1599.95 683.488 L1599.39 683.488 L1598.83 683.488 L1598.27 683.488 L1597.71 683.488 L1597.15 683.488 L1596.59 683.488 L1596.03 683.488 L1595.47 683.488 L1594.92 683.488 L1594.36 683.488 L1593.8 683.488 L1593.24 683.488 L1592.68 683.488 L1592.12 683.488 L1591.56 683.488 L1591 683.488 L1590.44 683.488 L1589.88 683.488 L1589.32 683.488 L1588.76 683.488 L1588.2 683.488 L1587.65 683.488 L1587.09 683.488 L1586.53 683.488 L1585.97 683.488 L1585.41 683.488 L1584.85 683.488 L1584.29 683.488 L1583.73 683.488 L1583.17 683.488 L1582.61 683.488 L1582.05 683.488 L1581.49 683.488 L1580.93 683.488 L1580.37 683.488 L1579.82 683.488 L1579.26 683.488 L1578.7 683.488 L1578.14 683.488 L1577.58 683.488 L1577.02 683.488 L1576.46 683.488 L1575.9 683.488 L1575.34 683.488 L1574.78 683.488 L1574.22 683.488 L1573.66 683.488 L1573.1 683.488 L1572.55 683.488 L1571.99 683.488 L1571.43 683.488 L1570.87 683.488 L1570.31 683.488 L1569.75 683.488 L1569.19 683.488 L1568.63 683.488 L1568.07 683.488 L1567.51 683.488 L1566.95 683.488 L1566.39 683.488 L1565.83 683.488 L1565.28 683.488 L1564.72 683.488 L1564.16 683.488 L1563.6 683.488 L1563.04 683.488 L1562.48 683.488 L1561.92 683.488 L1561.36 683.488 L1560.8 683.488 L1560.24 683.488 L1559.68 683.488 L1559.12 683.488 L1558.56 683.488 L1558 683.488 L1557.45 683.488 L1556.89 683.488 L1556.33 683.488 L1555.77 683.488 L1555.21 683.488 L1554.65 683.488 L1554.09 683.488 L1553.53 683.488 L1552.97 683.488 L1552.41 683.488 L1551.85 683.488 L1551.29 683.488 L1550.73 683.488 L1550.18 683.488 L1549.62 683.488 L1549.06 683.488 L1548.5 683.488 L1547.94 683.488 L1547.38 683.488 L1546.82 683.488 L1546.26 683.488 L1545.7 683.488 L1545.14 683.488 L1544.58 683.488 L1544.02 683.488 L1543.46 683.488 L1542.9 683.488 L1542.35 683.488 L1541.79 683.488 L1541.23 683.488 L1540.67 683.488 L1540.11 683.488 L1539.55 683.488 L1538.99 683.488 L1538.43 683.488 L1537.87 683.488 L1537.31 683.488 L1536.75 683.488 L1536.19 683.488 L1535.63 683.488 L1535.08 683.488 L1534.52 683.488 L1533.96 683.488 L1533.4 683.488 L1532.84 683.488 L1532.28 683.488 L1531.72 683.488 L1531.16 683.488 L1530.6 683.488 L1530.04 683.488 L1529.48 683.488 L1528.92 683.488 L1528.36 683.488 L1527.81 683.488 L1527.25 683.488 L1526.69 683.488 L1526.13 683.488 L1525.57 683.488 L1525.01 683.488 L1524.45 683.488 L1523.89 683.488 L1523.33 683.488 L1522.77 683.488 L1522.21 683.488 L1521.65 683.488 L1521.09 683.488 L1520.53 683.488 L1519.98 683.488 L1519.42 683.488 L1518.86 683.488 L1518.3 683.488 L1517.74 683.488 L1517.18 683.488 L1516.62 683.488 L1516.06 683.488 L1515.5 683.488 L1514.94 683.488 L1514.38 683.488 L1513.82 683.488 L1513.26 683.488 L1512.71 683.488 L1512.15 683.488 L1511.59 683.488 L1511.03 683.488 L1510.47 683.488 L1509.91 683.488 L1509.35 683.488 L1508.79 683.488 L1508.23 683.488 L1507.67 683.488 L1507.11 683.488 L1506.55 683.488 L1505.99 683.488 L1505.44 683.488 L1504.88 683.488 L1504.32 683.488 L1503.76 683.488 L1503.2 683.488 L1502.64 683.488 L1502.08 683.488 L1501.52 683.488 L1500.96 683.488 L1500.4 683.488 L1499.84 683.488 L1499.28 683.488 L1498.72 683.488 L1498.16 683.488 L1497.61 683.488 L1497.05 683.488 L1496.49 683.488 L1495.93 683.488 L1495.37 683.488 L1494.81 683.488 L1494.25 683.488 L1493.69 683.488 L1493.13 683.488 L1492.57 683.488 L1492.01 683.488 L1491.45 683.488 L1490.89 683.488 L1490.34 683.488 L1489.78 683.488 L1489.22 683.488 L1488.66 683.488 L1488.1 683.488 L1487.54 683.488 L1486.98 683.488 L1486.42 683.488 L1485.86 683.488 L1485.3 683.488 L1484.74 683.488 L1484.18 683.488 L1483.62 683.488 L1483.07 683.488 L1482.51 683.488 L1481.95 683.488 L1481.39 683.488 L1480.83 683.488 L1480.27 683.488 L1479.71 683.488 L1479.15 683.488 L1478.59 683.488 L1478.03 683.488 L1477.47 683.488 L1476.91 683.488 L1476.35 683.488 L1475.79 683.488 L1475.24 683.488 L1474.68 683.488 L1474.12 683.488 L1473.56 683.488 L1473 683.488 L1472.44 683.488 L1471.88 683.488 L1471.32 683.488 L1470.76 683.488 L1470.2 683.488 L1469.64 683.488 L1469.08 683.488 L1468.52 683.488 L1467.97 683.488 L1467.41 683.488 L1466.85 683.488 L1466.29 683.488 L1465.73 683.488 L1465.17 683.488 L1464.61 683.488 L1464.05 683.488 L1463.49 683.488 L1462.93 683.488 L1462.37 683.488 L1461.81 683.488 L1461.25 683.488 L1460.7 683.488 L1460.14 683.488 L1459.58 683.488 L1459.02 683.488 L1458.46 683.488 L1457.9 683.488 L1457.34 683.488 L1456.78 683.488 L1456.22 683.488 L1455.66 683.488 L1455.1 683.488 L1454.54 683.488 L1453.98 683.488 L1453.42 683.488 L1452.87 683.488 L1452.31 683.488 L1451.75 683.488 L1451.19 683.488 L1450.63 683.488 L1450.07 683.488 L1449.51 683.488 L1448.95 683.488 L1448.39 683.488 L1447.83 683.488 L1447.27 683.488 L1446.71 683.488 L1446.15 683.488 L1445.6 683.488 L1445.04 683.488 L1444.48 683.488 L1443.92 683.488 L1443.36 683.488 L1442.8 683.488 L1442.24 683.488 L1441.68 683.488 L1441.12 683.488 L1440.56 683.488 L1440 683.488 L1439.44 683.488 L1438.88 683.488 L1438.33 683.488 L1437.77 683.488 L1437.21 683.488 L1436.65 683.488 L1436.09 683.488 L1435.53 683.488 L1434.97 683.488 L1434.41 683.488 L1433.85 683.488 L1433.29 683.488 L1432.73 683.488 L1432.17 683.488 L1431.61 683.488 L1431.05 683.488 L1430.5 683.488 L1429.94 683.488 L1429.38 683.488 L1428.82 683.488 L1428.26 683.488 L1427.7 683.488 L1427.14 683.488 L1426.58 683.488 L1426.02 683.488 L1425.46 683.488 L1424.9 683.488 L1424.34 683.488 L1423.78 683.488 L1423.23 683.488 L1422.67 683.488 L1422.11 683.488 L1421.55 683.488 L1420.99 683.488 L1420.43 683.488 L1419.87 683.488 L1419.31 683.488 L1418.75 683.488 L1418.19 683.488 L1417.63 683.488 L1417.07 683.488 L1416.51 683.488 L1415.95 683.488 L1415.4 683.488 L1414.84 683.488 L1414.28 683.488 L1413.72 683.488 L1413.16 683.488 L1412.6 683.488 L1412.04 683.488 L1411.48 683.488 L1410.92 683.488 L1410.36 683.488 L1409.8 683.488 L1409.24 683.488 L1408.68 683.488 L1408.13 683.488 L1407.57 683.488 L1407.01 683.488 L1406.45 683.488 L1405.89 683.488 L1405.33 683.488 L1404.77 683.488 L1404.21 683.488 L1403.65 683.488 L1403.09 683.488 L1402.53 683.488 L1401.97 683.488 L1401.41 683.488 L1400.86 683.488 L1400.3 683.488 L1399.74 683.488 L1399.18 683.488 L1398.62 683.488 L1398.06 683.488 L1397.5 683.488 L1396.94 683.488 L1396.38 683.488 L1395.82 683.488 L1395.26 683.488 L1394.7 683.488 L1394.14 683.488 L1393.58 683.488 L1393.03 683.488 L1392.47 683.488 L1391.91 683.488 L1391.35 683.488 L1390.79 683.488 L1390.23 683.488 L1389.67 683.488 L1389.11 683.488 L1388.55 683.488 L1387.99 683.488 L1387.43 683.488 L1386.87 683.488 L1386.31 683.488 L1385.76 683.488 L1385.2 683.488 L1384.64 683.488 L1384.08 683.488 L1383.52 683.488 L1382.96 683.488 L1382.4 683.488 L1381.84 683.488 L1381.28 683.488 L1380.72 683.488 L1380.16 683.488 L1379.6 683.488 L1379.04 683.488 L1378.49 683.488 L1377.93 683.488 L1377.37 683.488 L1376.81 683.488 L1376.25 683.488 L1375.69 683.488 L1375.13 683.488 L1374.57 683.488 L1374.01 683.488 L1373.45 683.488 L1372.89 683.488 L1372.33 683.488 L1371.77 683.488 L1371.21 683.488 L1370.66 683.488 L1370.1 683.488 L1369.54 683.488 L1368.98 683.488 L1368.42 683.488 L1367.86 683.488 L1367.3 683.488 L1366.74 683.488 L1366.18 683.488 L1365.62 683.488 L1365.06 683.488 L1364.5 683.488 L1363.94 683.488 L1363.39 683.488 L1362.83 683.488 L1362.27 683.488 L1361.71 683.488 L1361.15 683.488 L1360.59 683.488 L1360.03 683.488 L1359.47 683.488 L1358.91 683.488 L1358.35 683.488 L1357.79 683.488 L1357.23 683.488 L1356.67 683.488 L1356.12 683.488 L1355.56 683.488 L1355 683.488 L1354.44 683.488 L1353.88 683.488 L1353.32 683.488 L1352.76 683.488 L1352.2 683.488 L1351.64 683.488 L1351.08 683.488 L1350.52 683.488 L1349.96 683.488 L1349.4 683.488 L1348.84 683.488 L1348.29 683.488 L1347.73 683.488 L1347.17 683.488 L1346.61 683.488 L1346.05 683.488 L1345.49 683.488 L1344.93 683.488 L1344.37 683.488 L1343.81 683.488 L1343.25 683.488 L1342.69 683.488 L1342.13 683.488 L1341.57 683.488 L1341.02 683.488 L1340.46 683.488 L1339.9 683.488 L1339.34 683.488 L1338.78 683.488 L1338.22 683.488 L1337.66 683.488 L1337.1 683.488 L1336.54 683.488 L1335.98 683.488 L1335.42 683.488 L1334.86 683.488 L1334.3 683.488 L1333.75 683.488 L1333.19 683.488 L1332.63 683.488 L1332.07 683.488 L1331.51 683.488 L1330.95 683.488 L1330.39 683.488 L1329.83 683.488 L1329.27 683.488 L1328.71 683.488 L1328.15 683.488 L1327.59 683.488 L1327.03 683.488 L1326.47 683.488 L1325.92 683.488 L1325.36 683.488 L1324.8 683.488 L1324.24 683.488 L1323.68 683.488 L1323.12 683.488 L1322.56 683.488 L1322 683.488 L1321.44 683.488 L1320.88 683.488 L1320.32 683.488 L1319.76 683.488 L1319.2 683.488 L1318.65 683.488 L1318.09 683.488 L1317.53 683.488 L1316.97 683.488 L1316.41 683.488 L1315.85 683.488 L1315.29 683.488 L1314.73 683.488 L1314.17 683.488 L1313.61 683.488 L1313.05 683.488 L1312.49 683.488 L1311.93 683.488 L1311.38 683.488 L1310.82 683.488 L1310.26 683.488 L1309.7 683.488 L1309.14 683.488 L1308.58 683.488 L1308.02 683.488 L1307.46 683.488 L1306.9 683.488 L1306.34 683.488 L1305.78 683.488 L1305.22 683.488 L1304.66 683.488 L1304.1 683.488 L1303.55 683.488 L1302.99 683.488 L1302.43 683.488 L1301.87 683.488 L1301.31 683.488 L1300.75 683.488 L1300.19 683.488 L1299.63 683.488 L1299.07 683.488 L1298.51 683.488 L1297.95 683.488 L1297.39 683.488 L1296.83 683.488 L1296.28 683.488 L1295.72 683.488 L1295.16 683.488 L1294.6 683.488 L1294.04 683.488 L1293.48 683.488 L1292.92 683.488 L1292.36 683.488 L1291.8 683.488 L1291.24 683.488 L1290.68 683.488 L1290.12 683.488 L1289.56 683.488 L1289 683.488 L1288.45 683.488 L1287.89 683.488 L1287.33 683.488 L1286.77 683.488 L1286.21 683.488 L1285.65 683.488 L1285.09 683.488 L1284.53 683.488 L1283.97 683.488 L1283.41 683.488 L1282.85 683.488 L1282.29 683.488 L1281.73 683.488 L1281.18 683.488 L1280.62 683.488 L1280.06 683.488 L1279.5 683.488 L1278.94 683.488 L1278.38 683.488 L1277.82 683.488 L1277.26 683.488 L1276.7 683.488 L1276.14 683.488 L1275.58 683.488 L1275.02 683.488 L1274.46 683.488 L1273.91 683.488 L1273.35 683.488 L1272.79 683.488 L1272.23 683.488 L1271.67 683.488 L1271.11 683.488 L1270.55 683.488 L1269.99 683.488 L1269.43 683.488 L1268.87 683.488 L1268.31 683.488 L1267.75 683.488 L1267.19 683.488 L1266.63 683.488 L1266.08 683.488 L1265.52 683.488 L1264.96 683.488 L1264.4 683.488 L1263.84 683.488 L1263.28 683.488 L1262.72 683.488 L1262.16 683.488 L1261.6 683.488 L1261.04 683.488 L1260.48 683.488 L1259.92 683.488 L1259.36 683.488 L1258.81 683.488 L1258.25 683.488 L1257.69 683.488 L1257.13 683.488 L1256.57 683.488 L1256.01 683.488 L1255.45 683.488 L1254.89 683.488 L1254.33 683.488 L1253.77 683.488 L1253.21 683.488 L1252.65 683.488 L1252.09 683.488 L1251.54 683.488 L1250.98 683.488 L1250.42 683.488 L1249.86 683.488 L1249.3 683.488 L1248.74 683.488 L1248.18 683.488 L1247.62 683.488 L1247.06 683.488 L1246.5 683.488 L1245.94 683.488 L1245.38 683.488 L1244.82 683.488 L1244.26 683.488 L1243.71 683.488 L1243.15 683.488 L1242.59 683.488 L1242.03 683.488 L1241.47 683.488 L1240.91 683.488 L1240.35 683.488 L1239.79 683.488 L1239.23 683.488 L1238.67 683.488 L1238.11 683.488 L1237.55 683.488 L1236.99 683.488 L1236.44 683.488 L1235.88 683.488 L1235.32 683.488 L1234.76 683.488 L1234.2 683.488 L1233.64 683.488 L1233.08 683.488 L1232.52 683.488 L1231.96 683.488 L1231.4 683.488 L1230.84 683.488 L1230.28 683.488 L1229.72 683.488 L1229.17 683.488 L1228.61 683.488 L1228.05 683.488 L1227.49 683.488 L1226.93 683.488 L1226.37 683.488 L1225.81 683.488 L1225.25 683.488 L1224.69 683.488 L1224.13 683.488 L1223.57 683.488 L1223.01 683.488 L1222.45 683.488 L1221.89 683.488 L1221.34 683.488 L1220.78 683.488 L1220.22 683.488 L1219.66 683.488 L1219.1 683.488 L1218.54 683.488 L1217.98 683.488 L1217.42 683.488 L1216.86 683.488 L1216.3 683.488 L1215.74 683.488 L1215.18 683.488 L1214.62 683.488 L1214.07 683.488 L1213.51 683.488 L1212.95 683.488 L1212.39 683.488 L1211.83 683.488 L1211.27 683.488 L1210.71 683.488 L1210.15 683.488 L1209.59 683.488 L1209.03 683.488 L1208.47 683.488 L1207.91 683.488 L1207.35 683.488 L1206.8 683.488 L1206.24 683.488 L1205.68 683.488 L1205.12 683.488 L1204.56 683.488 L1204 683.488 L1203.44 683.488 L1202.88 683.488 L1202.32 683.488 L1201.76 683.488 L1201.2 683.488 L1200.64 683.488 L1200.08 683.488 L1199.52 683.488 L1198.97 683.488 L1198.41 683.488 L1197.85 683.488 L1197.29 683.488 L1196.73 683.488 L1196.17 683.488 L1195.61 683.488 L1195.05 683.488 L1194.49 683.488 L1193.93 683.488 L1193.37 683.488 L1192.81 683.488 L1192.25 683.488 L1191.7 683.488 L1191.14 683.488 L1190.58 683.488 L1190.02 683.488 L1189.46 683.488 L1188.9 683.488 L1188.34 683.488 L1187.78 683.488 L1187.22 683.488 L1186.66 683.488 L1186.1 683.488 L1185.54 683.488 L1184.98 683.488 L1184.43 683.488 L1183.87 683.488 L1183.31 683.488 L1182.75 683.488 L1182.19 683.488 L1181.63 683.488 L1181.07 683.488 L1180.51 683.488 L1179.95 683.488 L1179.39 683.488 L1178.83 683.488 L1178.27 683.488 L1177.71 683.488 L1177.15 683.488 L1176.6 683.488 L1176.04 683.488 L1175.48 683.488 L1174.92 683.488 L1174.36 683.488 L1173.8 683.488 L1173.24 683.488 L1172.68 683.488 L1172.12 683.488 L1171.56 683.488 L1171 683.488 L1170.44 683.488 L1169.88 683.488 L1169.33 683.488 L1168.77 683.488 L1168.21 683.488 L1167.65 683.488 L1167.09 683.488 L1166.53 683.488 L1165.97 683.488 L1165.41 683.488 L1164.85 683.488 L1164.29 683.488 L1163.73 683.488 L1163.17 683.488 L1162.61 683.488 L1162.05 683.488 L1161.5 683.488 L1160.94 683.488 L1160.38 683.488 L1159.82 683.488 L1159.26 683.488 L1158.7 683.488 L1158.14 683.488 L1157.58 683.488 L1157.02 683.488 L1156.46 683.488 L1155.9 683.488 L1155.34 683.488 L1154.78 683.488 L1154.23 683.488 L1153.67 683.488 L1153.11 683.488 L1152.55 683.488 L1151.99 683.488 L1151.43 683.488 L1150.87 683.488 L1150.31 683.488 L1149.75 683.488 L1149.19 683.488 L1148.63 683.488 L1148.07 683.488 L1147.51 683.488 L1146.96 683.488 L1146.4 683.488 L1145.84 683.488 L1145.28 683.488 L1144.72 683.488 L1144.16 683.488 L1143.6 683.488 L1143.04 683.488 L1142.48 683.488 L1141.92 683.488 L1141.36 683.488 L1140.8 683.488 L1140.24 683.488 L1139.68 683.488 L1139.13 683.488 L1138.57 683.488 L1138.01 683.488 L1137.45 683.488 L1136.89 683.488 L1136.33 683.488 L1135.77 683.488 L1135.21 683.488 L1134.65 683.488 L1134.09 683.488 L1133.53 683.488 L1132.97 683.488 L1132.41 683.488 L1131.86 683.488 L1131.3 683.488 L1130.74 683.488 L1130.18 683.488 L1129.62 683.488 L1129.06 683.488 L1128.5 683.488 L1127.94 683.488 L1127.38 683.488 L1126.82 683.488 L1126.26 683.488 L1125.7 683.488 L1125.14 683.488 L1124.59 683.488 L1124.03 683.488 L1123.47 683.488 L1122.91 683.488 L1122.35 683.488 L1121.79 683.488 L1121.23 683.488 L1120.67 683.488 L1120.11 683.488 L1119.55 683.488 L1118.99 683.488 L1118.43 683.488 L1117.87 683.488 L1117.31 683.488 L1116.76 683.488 L1116.2 683.488 L1115.64 683.488 L1115.08 683.488 L1114.52 683.488 L1113.96 683.488 L1113.4 683.488 L1112.84 683.488 L1112.28 683.488 L1111.72 683.488 L1111.16 683.488 L1110.6 683.488 L1110.04 683.488 L1109.49 683.488 L1108.93 683.488 L1108.37 683.488 L1107.81 683.488 L1107.25 683.488 L1106.69 683.488 L1106.13 683.488 L1105.57 683.488 L1105.01 683.488 L1104.45 683.488 L1103.89 683.488 L1103.33 683.488 L1102.77 683.488 L1102.22 683.488 L1101.66 683.488 L1101.1 683.488 L1100.54 683.488 L1099.98 683.488 L1099.42 683.488 L1098.86 683.488 L1098.3 683.488 L1097.74 683.488 L1097.18 683.488 L1096.62 683.488 L1096.06 683.488 L1095.5 683.488 L1094.94 683.488 L1094.39 683.488 L1093.83 683.488 L1093.27 683.488 L1092.71 683.488 L1092.15 683.488 L1091.59 683.488 L1091.03 683.488 L1090.47 683.488 L1089.91 683.488 L1089.35 683.488 L1088.79 683.488 L1088.23 683.488 L1087.67 683.488 L1087.12 683.488 L1086.56 683.488 L1086 683.488 L1085.44 683.488 L1084.88 683.488 L1084.32 683.488 L1083.76 683.488 L1083.2 683.488 L1082.64 683.488 L1082.08 683.488 L1081.52 683.488 L1080.96 683.488 L1080.4 683.488 L1079.85 683.488 L1079.29 683.488 L1078.73 683.488 L1078.17 683.488 L1077.61 683.488 L1077.05 683.488 L1076.49 683.488 L1075.93 683.488 L1075.37 683.488 L1074.81 683.488 L1074.25 683.488 L1073.69 683.488 L1073.13 683.488 L1072.57 683.488 L1072.02 683.488 L1071.46 683.488 L1070.9 683.488 L1070.34 683.488 L1069.78 683.488 L1069.22 683.488 L1068.66 683.488 L1068.1 683.488 L1067.54 683.488 L1066.98 683.488 L1066.42 683.488 L1065.86 683.488 L1065.3 683.488 L1064.75 683.488 L1064.19 683.488 L1063.63 683.488 L1063.07 683.488 L1062.51 683.488 L1061.95 683.488 L1061.39 683.488 L1060.83 683.488 L1060.27 683.488 L1059.71 683.488 L1059.15 683.488 L1058.59 683.488 L1058.03 683.488 L1057.48 683.488 L1056.92 683.488 L1056.36 683.488 L1055.8 683.488 L1055.24 683.488 L1054.68 683.488 L1054.12 683.488 L1053.56 683.488 L1053 683.488 L1052.44 683.488 L1051.88 683.488 L1051.32 683.488 L1050.76 683.488 L1050.2 683.488 L1049.65 683.488 L1049.09 683.488 L1048.53 683.488 L1047.97 683.488 L1047.41 683.488 L1046.85 683.488 L1046.29 683.488 L1045.73 683.488 L1045.17 683.488 L1044.61 683.488 L1044.05 683.488 L1043.49 683.488 L1042.93 683.488 L1042.38 683.488 L1041.82 683.488 L1041.26 683.488 L1040.7 683.488 L1040.14 683.488 L1039.58 683.488 L1039.02 683.488 L1038.46 683.488 L1037.9 683.488 L1037.34 683.488 L1036.78 683.488 L1036.22 683.488 L1035.66 683.488 L1035.1 683.488 L1034.55 683.488 L1033.99 683.488 L1033.43 683.488 L1032.87 683.488 L1032.31 683.488 L1031.75 683.488 L1031.19 683.488 L1030.63 683.488 L1030.07 683.488 L1029.51 683.488 L1028.95 683.488 L1028.39 683.488 L1027.83 683.488 L1027.28 683.488 L1026.72 683.488 L1026.16 683.488 L1025.6 683.488 L1025.04 683.488 L1024.48 683.488 L1023.92 683.488 L1023.36 683.488 L1022.8 683.488 L1022.24 683.488 L1021.68 683.488 L1021.12 683.488 L1020.56 683.488 L1020.01 683.488 L1019.45 683.488 L1018.89 683.488 L1018.33 683.488 L1017.77 683.488 L1017.21 683.488 L1016.65 683.488 L1016.09 683.488 L1015.53 683.488 L1014.97 683.488 L1014.41 683.488 L1013.85 683.488 L1013.29 683.488 L1012.73 683.488 L1012.18 683.488 L1011.62 683.488 L1011.06 683.488 L1010.5 683.488 L1009.94 683.488 L1009.38 683.488 L1008.82 683.488 L1008.26 683.488 L1007.7 683.488 L1007.14 683.488 L1006.58 683.488 L1006.02 683.488 L1005.46 683.488 L1004.91 683.488 L1004.35 683.488 L1003.79 683.488 L1003.23 683.488 L1002.67 683.488 L1002.11 683.488 L1001.55 683.488 L1000.99 683.488 L1000.43 683.488 L999.872 683.488 L999.313 683.488 L998.754 683.488 L998.194 683.488 L997.635 683.488 L997.076 683.488 L996.517 683.488 L995.957 683.488 L995.398 683.488 L994.839 683.488 L994.28 683.488 L993.72 683.488 L993.161 683.488 L992.602 683.488 L992.043 683.488 L991.483 683.488 L990.924 683.488 L990.365 683.488 L989.806 683.488 L989.246 683.488 L988.687 683.488 L988.128 683.488 L987.569 683.488 L987.009 683.488 L986.45 683.488 L985.891 683.488 L985.332 683.488 L984.772 683.488 L984.213 683.488 L983.654 683.488 L983.095 683.488 L982.535 683.488 L981.976 683.488 L981.417 683.488 L980.858 683.488 L980.298 683.488 L979.739 683.488 L979.18 683.488 L978.621 683.488 L978.061 683.488 L977.502 683.488 L976.943 683.488 L976.384 683.488 L975.824 683.488 L975.265 683.488 L974.706 683.488 L974.147 683.488 L973.587 683.488 L973.028 683.488 L972.469 683.488 L971.91 683.488 L971.35 683.488 L970.791 683.488 L970.232 683.488 L969.673 683.488 L969.113 683.488 L968.554 683.488 L967.995 683.488 L967.436 683.488 L966.876 683.488 L966.317 683.488 L965.758 683.488 L965.199 683.488 L964.639 683.488 L964.08 683.488 L963.521 683.488 L962.962 683.488 L962.402 683.488 L961.843 683.488 L961.284 683.488 L960.725 683.488 L960.165 683.488 L959.606 683.488 L959.047 683.488 L958.488 683.488 L957.928 683.488 L957.369 683.488 L956.81 683.488 L956.251 683.488 L955.691 683.488 L955.132 683.488 L954.573 683.488 L954.014 683.488 L953.454 683.488 L952.895 683.488 L952.336 683.488 L951.777 683.488 L951.217 683.488 L950.658 683.488 L950.099 683.488 L949.54 683.488 L948.98 683.488 L948.421 683.488 L947.862 683.488 L947.303 683.488 L946.743 683.488 L946.184 683.488 L945.625 683.488 L945.066 683.488 L944.506 683.488 L943.947 683.488 L943.388 683.488 L942.829 683.488 L942.269 683.488 L941.71 683.488 L941.151 683.488 L940.592 683.488 L940.032 683.488 L939.473 683.488 L938.914 683.488 L938.355 683.488 L937.795 683.488 L937.236 683.488 L936.677 683.488 L936.118 683.488 L935.558 683.488 L934.999 683.488 L934.44 683.488 L933.881 683.488 L933.321 683.488 L932.762 683.488 L932.203 683.488 L931.644 683.488 L931.084 683.488 L930.525 683.488 L929.966 683.488 L929.406 683.488 L928.847 683.488 L928.288 683.488 L927.729 683.488 L927.169 683.488 L926.61 683.488 L926.051 683.488 L925.492 683.488 L924.932 683.488 L924.373 683.488 L923.814 683.488 L923.255 683.488 L922.695 683.488 L922.136 683.488 L921.577 683.488 L921.018 683.488 L920.458 683.488 L919.899 683.488 L919.34 683.488 L918.781 683.488 L918.221 683.488 L917.662 683.488 L917.103 683.488 L916.544 683.488 L915.984 683.488 L915.425 683.488 L914.866 683.488 L914.307 683.488 L913.747 683.488 L913.188 683.488 L912.629 683.488 L912.07 683.488 L911.51 683.488 L910.951 683.488 L910.392 683.488 L909.833 683.488 L909.273 683.488 L908.714 683.488 L908.155 683.488 L907.596 683.488 L907.036 683.488 L906.477 683.488 L905.918 683.488 L905.359 683.488 L904.799 683.488 L904.24 683.488 L903.681 683.488 L903.122 683.488 L902.562 683.488 L902.003 683.488 L901.444 683.488 L900.885 683.488 L900.325 683.488 L899.766 683.488 L899.207 683.488 L898.648 683.488 L898.088 683.488 L897.529 683.488 L896.97 683.488 L896.411 683.488 L895.851 683.488 L895.292 683.488 L894.733 683.488 L894.174 683.488 L893.614 683.488 L893.055 683.488 L892.496 683.488 L891.937 683.488 L891.377 683.488 L890.818 683.488 L890.259 683.488 L889.7 683.488 L889.14 683.488 L888.581 683.488 L888.022 683.488 L887.463 683.488 L886.903 683.488 L886.344 683.488 L885.785 683.488 L885.226 683.488 L884.666 683.488 L884.107 683.488 L883.548 683.488 L882.989 683.488 L882.429 683.488 L881.87 683.488 L881.311 683.488 L880.752 683.488 L880.192 683.488 L879.633 683.488 L879.074 683.488 L878.515 683.488 L877.955 683.488 L877.396 683.488 L876.837 683.488 L876.278 683.488 L875.718 683.488 L875.159 683.488 L874.6 683.488 L874.041 683.488 L873.481 683.488 L872.922 683.488 L872.363 683.488 L871.804 683.488 L871.244 683.488 L870.685 683.488 L870.126 683.488 L869.567 683.488 L869.007 683.488 L868.448 683.488 L867.889 683.488 L867.33 683.488 L866.77 683.488 L866.211 683.488 L865.652 683.488 L865.093 683.488 L864.533 683.488 L863.974 683.488 L863.415 683.488 L862.856 683.488 L862.296 683.488 L861.737 683.488 L861.178 683.488 L860.619 683.488 L860.059 683.488 L859.5 683.488 L858.941 683.488 L858.382 683.488 L857.822 683.488 L857.263 683.488 L856.704 683.488 L856.145 683.488 L855.585 683.488 L855.026 683.488 L854.467 683.488 L853.908 683.488 L853.348 683.488 L852.789 683.488 L852.23 683.488 L851.671 683.488 L851.111 683.488 L850.552 683.488 L849.993 683.488 L849.434 683.488 L848.874 683.488 L848.315 683.488 L847.756 683.488 L847.197 683.488 L846.637 683.488 L846.078 683.488 L845.519 683.488 L844.96 683.488 L844.4 683.488 L843.841 683.488 L843.282 683.488 L842.723 683.488 L842.163 683.488 L841.604 683.488 L841.045 683.488 L840.486 683.488 L839.926 683.488 L839.367 683.488 L838.808 683.488 L838.249 683.488 L837.689 683.488 L837.13 683.488 L836.571 683.488 L836.012 683.488 L835.452 683.488 L834.893 683.488 L834.334 683.488 L833.775 683.488 L833.215 683.488 L832.656 683.488 L832.097 683.488 L831.538 683.488 L830.978 683.488 L830.419 683.488 L829.86 683.488 L829.301 683.488 L828.741 683.488 L828.182 683.488 L827.623 683.488 L827.064 683.488 L826.504 683.488 L825.945 683.488 L825.386 683.488 L824.827 683.488 L824.267 683.488 L823.708 683.488 L823.149 683.488 L822.59 683.488 L822.03 683.488 L821.471 683.488 L820.912 683.488 L820.353 683.488 L819.793 683.488 L819.234 683.488 L818.675 683.488 L818.116 683.488 L817.556 683.488 L816.997 683.488 L816.438 683.488 L815.879 683.488 L815.319 683.488 L814.76 683.488 L814.201 683.488 L813.642 683.488 L813.082 683.488 L812.523 683.488 L811.964 683.488 L811.405 683.488 L810.845 683.488 L810.286 683.488 L809.727 683.488 L809.168 683.488 L808.608 683.488 L808.049 683.488 L807.49 683.488 L806.931 683.488 L806.371 683.488 L805.812 683.488 L805.253 683.488 L804.693 683.488 L804.134 683.488 L803.575 683.488 L803.016 683.488 L802.456 683.488 L801.897 683.488 L801.338 683.488 L800.779 683.488 L800.219 683.488 L799.66 683.488 L799.101 683.488 L798.542 683.488 L797.982 683.488 L797.423 683.488 L796.864 683.488 L796.305 683.488 L795.745 683.488 L795.186 683.488 L794.627 683.488 L794.068 683.488 L793.508 683.488 L792.949 683.488 L792.39 683.488 L791.831 683.488 L791.271 683.488 L790.712 683.488 L790.153 683.488 L789.594 683.488 L789.034 683.488 L788.475 683.488 L787.916 683.488 L787.357 683.488 L786.797 683.488 L786.238 683.488 L785.679 683.488 L785.12 683.488 L784.56 683.488 L784.001 683.488 L783.442 683.488 L782.883 683.488 L782.323 683.488 L781.764 683.488 L781.205 683.488 L780.646 683.488 L780.086 683.488 L779.527 683.488 L778.968 683.488 L778.409 683.488 L777.849 683.488 L777.29 683.488 L776.731 683.488 L776.172 683.488 L775.612 683.488 L775.053 683.488 L774.494 683.488 L773.935 683.488 L773.375 683.488 L772.816 683.488 L772.257 683.488 L771.698 683.488 L771.138 683.488 L770.579 683.488 L770.02 683.488 L769.461 683.488 L768.901 683.488 L768.342 683.488 L767.783 683.488 L767.224 683.488 L766.664 683.488 L766.105 683.488 L765.546 683.488 L764.987 683.488 L764.427 683.488 L763.868 683.488 L763.309 683.488 L762.75 683.488 L762.19 683.488 L761.631 683.488 L761.072 683.488 L760.513 683.488 L759.953 683.488 L759.394 683.488 L758.835 683.488 L758.276 683.488 L757.716 683.488 L757.157 683.488 L756.598 683.488 L756.039 683.488 L755.479 683.488 L754.92 683.488 L754.361 683.488 L753.802 683.488 L753.242 683.488 L752.683 683.488 L752.124 683.488 L751.565 683.488 L751.005 683.488 L750.446 683.488 L749.887 683.488 L749.328 683.488 L748.768 683.488 L748.209 683.488 L747.65 683.488 L747.091 683.488 L746.531 683.488 L745.972 683.488 L745.413 683.488 L744.854 683.488 L744.294 683.488 L743.735 683.488 L743.176 683.488 L742.617 683.488 L742.057 683.488 L741.498 683.488 L740.939 683.488 L740.38 683.488 L739.82 683.488 L739.261 683.488 L738.702 683.488 L738.143 683.488 L737.583 683.488 L737.024 683.488 L736.465 683.488 L735.906 683.488 L735.346 683.488 L734.787 683.488 L734.228 683.488 L733.669 683.488 L733.109 683.488 L732.55 683.488 L731.991 683.488 L731.432 683.488 L730.872 683.488 L730.313 683.488 L729.754 683.488 L729.195 683.488 L728.635 683.488 L728.076 683.488 L727.517 683.488 L726.958 683.488 L726.398 683.488 L725.839 683.488 L725.28 683.488 L724.721 683.488 L724.161 683.488 L723.602 683.488 L723.043 683.488 L722.484 683.488 L721.924 683.488 L721.365 683.488 L720.806 683.488 L720.247 683.488  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip743)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,686.867 720.806,686.867 721.365,686.867 721.924,686.867 722.484,686.867 723.043,686.867 723.602,686.867 724.161,686.867 724.721,686.867 725.28,686.867 725.839,686.867 726.398,686.867 726.958,686.867 727.517,686.867 728.076,686.867 728.635,686.867 729.195,686.867 729.754,686.867 730.313,686.867 730.872,686.867 731.432,686.867 731.991,686.867 732.55,686.867 733.109,686.867 733.669,686.867 734.228,686.867 734.787,686.867 735.346,686.867 735.906,686.867 736.465,686.867 737.024,686.867 737.583,686.867 738.143,686.867 738.702,686.867 739.261,686.867 739.82,686.867 740.38,686.867 740.939,686.867 741.498,686.867 742.057,686.867 742.617,686.867 743.176,686.867 743.735,686.867 744.294,686.867 744.854,686.867 745.413,686.867 745.972,686.867 746.531,686.867 747.091,686.867 747.65,686.867 748.209,686.867 748.768,686.867 749.328,686.867 749.887,686.867 750.446,686.867 751.005,686.867 751.565,686.867 752.124,686.867 752.683,686.867 753.242,686.867 753.802,686.867 754.361,686.867 754.92,686.867 755.479,686.867 756.039,686.867 756.598,686.867 757.157,686.867 757.716,686.867 758.276,686.867 758.835,686.867 759.394,686.867 759.953,686.867 760.513,686.867 761.072,686.867 761.631,686.867 762.19,686.867 762.75,686.867 763.309,686.867 763.868,686.867 764.427,686.867 764.987,686.867 765.546,686.867 766.105,686.867 766.664,686.867 767.224,686.867 767.783,686.867 768.342,686.867 768.901,686.867 769.461,686.867 770.02,686.867 770.579,686.867 771.138,686.867 771.698,686.867 772.257,686.867 772.816,686.867 773.375,686.867 773.935,686.867 774.494,686.867 775.053,686.867 775.612,686.867 776.172,686.867 776.731,686.867 777.29,686.867 777.849,686.867 778.409,686.867 778.968,686.867 779.527,686.867 780.086,686.867 780.646,686.867 781.205,686.867 781.764,686.867 782.323,686.867 782.883,686.867 783.442,686.867 784.001,686.867 784.56,686.867 785.12,686.867 785.679,686.867 786.238,686.867 786.797,686.867 787.357,686.867 787.916,686.867 788.475,686.867 789.034,686.867 789.594,686.867 790.153,686.867 790.712,686.867 791.271,686.867 791.831,686.867 792.39,686.867 792.949,686.867 793.508,686.867 794.068,686.867 794.627,686.867 795.186,686.867 795.745,686.867 796.305,686.867 796.864,686.867 797.423,686.867 797.982,686.867 798.542,686.867 799.101,686.867 799.66,686.867 800.219,686.867 800.779,686.867 801.338,686.867 801.897,686.867 802.456,686.867 803.016,686.867 803.575,686.867 804.134,686.867 804.693,686.867 805.253,686.867 805.812,686.867 806.371,686.867 806.931,686.867 807.49,686.867 808.049,686.867 808.608,686.867 809.168,686.867 809.727,686.867 810.286,686.867 810.845,686.867 811.405,686.867 811.964,686.867 812.523,686.867 813.082,686.867 813.642,686.867 814.201,686.867 814.76,686.867 815.319,686.867 815.879,686.867 816.438,686.867 816.997,686.867 817.556,686.867 818.116,686.867 818.675,686.867 819.234,686.867 819.793,686.867 820.353,686.867 820.912,686.867 821.471,686.867 822.03,686.867 822.59,686.867 823.149,686.867 823.708,686.867 824.267,686.867 824.827,686.867 825.386,686.867 825.945,686.867 826.504,686.867 827.064,686.867 827.623,686.867 828.182,686.867 828.741,686.867 829.301,686.867 829.86,686.867 830.419,686.867 830.978,686.867 831.538,686.867 832.097,686.867 832.656,686.867 833.215,686.867 833.775,686.867 834.334,686.867 834.893,686.867 835.452,686.867 836.012,686.867 836.571,686.867 837.13,686.867 837.689,686.867 838.249,686.867 838.808,686.867 839.367,686.867 839.926,686.867 840.486,686.867 841.045,686.867 841.604,686.867 842.163,686.867 842.723,686.867 843.282,686.867 843.841,686.867 844.4,686.867 844.96,686.867 845.519,686.867 846.078,686.867 846.637,686.867 847.197,686.867 847.756,686.867 848.315,686.867 848.874,686.867 849.434,686.867 849.993,686.867 850.552,686.867 851.111,686.867 851.671,686.867 852.23,686.867 852.789,686.867 853.348,686.867 853.908,686.867 854.467,686.867 855.026,686.867 855.585,686.867 856.145,686.867 856.704,686.867 857.263,686.867 857.822,686.867 858.382,686.867 858.941,686.867 859.5,686.867 860.059,686.867 860.619,686.867 861.178,686.867 861.737,686.867 862.296,686.867 862.856,686.867 863.415,686.867 863.974,686.867 864.533,686.867 865.093,686.867 865.652,686.867 866.211,686.867 866.77,686.867 867.33,686.867 867.889,686.867 868.448,686.867 869.007,686.867 869.567,686.867 870.126,686.867 870.685,686.867 871.244,686.867 871.804,686.867 872.363,686.867 872.922,686.867 873.481,686.867 874.041,686.867 874.6,686.867 875.159,686.867 875.718,686.867 876.278,686.867 876.837,686.867 877.396,686.867 877.955,686.867 878.515,686.867 879.074,686.867 879.633,686.867 880.192,686.867 880.752,686.867 881.311,686.867 881.87,686.867 882.429,686.867 882.989,686.867 883.548,686.867 884.107,686.867 884.666,686.867 885.226,686.867 885.785,686.867 886.344,686.867 886.903,686.867 887.463,686.867 888.022,686.867 888.581,686.867 889.14,686.867 889.7,686.867 890.259,686.867 890.818,686.867 891.377,686.867 891.937,686.867 892.496,686.867 893.055,686.867 893.614,686.867 894.174,686.867 894.733,686.867 895.292,686.867 895.851,686.867 896.411,686.867 896.97,686.867 897.529,686.867 898.088,686.867 898.648,686.867 899.207,686.867 899.766,686.867 900.325,686.867 900.885,686.867 901.444,686.867 902.003,686.867 902.562,686.867 903.122,686.867 903.681,686.867 904.24,686.867 904.799,686.867 905.359,686.867 905.918,686.867 906.477,686.867 907.036,686.867 907.596,686.867 908.155,686.867 908.714,686.867 909.273,686.867 909.833,686.867 910.392,686.867 910.951,686.867 911.51,686.867 912.07,686.867 912.629,686.867 913.188,686.867 913.747,686.867 914.307,686.867 914.866,686.867 915.425,686.867 915.984,686.867 916.544,686.867 917.103,686.867 917.662,686.867 918.221,686.867 918.781,686.867 919.34,686.867 919.899,686.867 920.458,686.867 921.018,686.867 921.577,686.867 922.136,686.867 922.695,686.867 923.255,686.867 923.814,686.867 924.373,686.867 924.932,686.867 925.492,686.867 926.051,686.867 926.61,686.867 927.169,686.867 927.729,686.867 928.288,686.867 928.847,686.867 929.406,686.867 929.966,686.867 930.525,686.867 931.084,686.867 931.644,686.867 932.203,686.867 932.762,686.867 933.321,686.867 933.881,686.867 934.44,686.867 934.999,686.867 935.558,686.867 936.118,686.867 936.677,686.867 937.236,686.867 937.795,686.867 938.355,686.867 938.914,686.867 939.473,686.867 940.032,686.867 940.592,686.867 941.151,686.867 941.71,686.867 942.269,686.867 942.829,686.867 943.388,686.867 943.947,686.867 944.506,686.867 945.066,686.867 945.625,686.867 946.184,686.867 946.743,686.867 947.303,686.867 947.862,686.867 948.421,686.867 948.98,686.867 949.54,686.867 950.099,686.867 950.658,686.867 951.217,686.867 951.777,686.867 952.336,686.867 952.895,686.867 953.454,686.867 954.014,686.867 954.573,686.867 955.132,686.867 955.691,686.867 956.251,686.867 956.81,686.867 957.369,686.867 957.928,686.867 958.488,686.867 959.047,686.867 959.606,686.867 960.165,686.867 960.725,686.867 961.284,686.867 961.843,686.867 962.402,686.867 962.962,686.867 963.521,686.867 964.08,686.867 964.639,686.867 965.199,686.867 965.758,686.867 966.317,686.867 966.876,686.867 967.436,686.867 967.995,686.867 968.554,686.867 969.113,686.867 969.673,686.867 970.232,686.867 970.791,686.867 971.35,686.867 971.91,686.867 972.469,686.867 973.028,686.867 973.587,686.867 974.147,686.867 974.706,686.867 975.265,686.867 975.824,686.867 976.384,686.867 976.943,686.867 977.502,686.867 978.061,686.867 978.621,686.867 979.18,686.867 979.739,686.867 980.298,686.867 980.858,686.867 981.417,686.867 981.976,686.867 982.535,686.867 983.095,686.867 983.654,686.867 984.213,686.867 984.772,686.867 985.332,686.867 985.891,686.867 986.45,686.867 987.009,686.867 987.569,686.867 988.128,686.867 988.687,686.867 989.246,686.867 989.806,686.867 990.365,686.867 990.924,686.867 991.483,686.867 992.043,686.867 992.602,686.867 993.161,686.867 993.72,686.867 994.28,686.867 994.839,686.867 995.398,686.867 995.957,686.867 996.517,686.867 997.076,686.867 997.635,686.867 998.194,686.867 998.754,686.867 999.313,686.867 999.872,686.867 1000.43,686.867 1000.99,686.867 1001.55,686.867 1002.11,686.867 1002.67,686.867 1003.23,686.867 1003.79,686.867 1004.35,686.867 1004.91,686.867 1005.46,686.867 1006.02,686.867 1006.58,686.867 1007.14,686.867 1007.7,686.867 1008.26,686.867 1008.82,686.867 1009.38,686.867 1009.94,686.867 1010.5,686.867 1011.06,686.867 1011.62,686.867 1012.18,686.867 1012.73,686.867 1013.29,686.867 1013.85,686.867 1014.41,686.867 1014.97,686.867 1015.53,686.867 1016.09,686.867 1016.65,686.867 1017.21,686.867 1017.77,686.867 1018.33,686.867 1018.89,686.867 1019.45,686.867 1020.01,686.867 1020.56,686.867 1021.12,686.867 1021.68,686.867 1022.24,686.867 1022.8,686.867 1023.36,686.867 1023.92,686.867 1024.48,686.867 1025.04,686.867 1025.6,686.867 1026.16,686.867 1026.72,686.867 1027.28,686.867 1027.83,686.867 1028.39,686.867 1028.95,686.867 1029.51,686.867 1030.07,686.867 1030.63,686.867 1031.19,686.867 1031.75,686.867 1032.31,686.867 1032.87,686.867 1033.43,686.867 1033.99,686.867 1034.55,686.867 1035.1,686.867 1035.66,686.867 1036.22,686.867 1036.78,686.867 1037.34,686.867 1037.9,686.867 1038.46,686.867 1039.02,686.867 1039.58,686.867 1040.14,686.867 1040.7,686.867 1041.26,686.867 1041.82,686.867 1042.38,686.867 1042.93,686.867 1043.49,686.867 1044.05,686.867 1044.61,686.867 1045.17,686.867 1045.73,686.867 1046.29,686.867 1046.85,686.867 1047.41,686.867 1047.97,686.867 1048.53,686.867 1049.09,686.867 1049.65,686.867 1050.2,686.867 1050.76,686.867 1051.32,686.867 1051.88,686.867 1052.44,686.867 1053,686.867 1053.56,686.867 1054.12,686.867 1054.68,686.867 1055.24,686.867 1055.8,686.867 1056.36,686.867 1056.92,686.867 1057.48,686.867 1058.03,686.867 1058.59,686.867 1059.15,686.867 1059.71,686.867 1060.27,686.867 1060.83,686.867 1061.39,686.867 1061.95,686.867 1062.51,686.867 1063.07,686.867 1063.63,686.867 1064.19,686.867 1064.75,686.867 1065.3,686.867 1065.86,686.867 1066.42,686.867 1066.98,686.867 1067.54,686.867 1068.1,686.867 1068.66,686.867 1069.22,686.867 1069.78,686.867 1070.34,686.867 1070.9,686.867 1071.46,686.867 1072.02,686.867 1072.57,686.867 1073.13,686.867 1073.69,686.867 1074.25,686.867 1074.81,686.867 1075.37,686.867 1075.93,686.867 1076.49,686.867 1077.05,686.867 1077.61,686.867 1078.17,686.867 1078.73,686.867 1079.29,686.867 1079.85,686.867 1080.4,686.867 1080.96,686.867 1081.52,686.867 1082.08,686.867 1082.64,686.867 1083.2,686.867 1083.76,686.867 1084.32,686.867 1084.88,686.867 1085.44,686.867 1086,686.867 1086.56,686.867 1087.12,686.867 1087.67,686.867 1088.23,686.867 1088.79,686.867 1089.35,686.867 1089.91,686.867 1090.47,686.867 1091.03,686.867 1091.59,686.867 1092.15,686.867 1092.71,686.867 1093.27,686.867 1093.83,686.867 1094.39,686.867 1094.94,686.867 1095.5,686.867 1096.06,686.867 1096.62,686.867 1097.18,686.867 1097.74,686.867 1098.3,686.867 1098.86,686.867 1099.42,686.867 1099.98,686.867 1100.54,686.867 1101.1,686.867 1101.66,686.867 1102.22,686.867 1102.77,686.867 1103.33,686.867 1103.89,686.867 1104.45,686.867 1105.01,686.867 1105.57,686.867 1106.13,686.867 1106.69,686.867 1107.25,686.867 1107.81,686.867 1108.37,686.867 1108.93,686.867 1109.49,686.867 1110.04,686.867 1110.6,686.867 1111.16,686.867 1111.72,686.867 1112.28,686.867 1112.84,686.867 1113.4,686.867 1113.96,686.867 1114.52,686.867 1115.08,686.867 1115.64,686.867 1116.2,686.867 1116.76,686.867 1117.31,686.867 1117.87,686.867 1118.43,686.867 1118.99,686.867 1119.55,686.867 1120.11,686.867 1120.67,686.867 1121.23,686.867 1121.79,686.867 1122.35,686.867 1122.91,686.867 1123.47,686.867 1124.03,686.867 1124.59,686.867 1125.14,686.867 1125.7,686.867 1126.26,686.867 1126.82,686.867 1127.38,686.867 1127.94,686.867 1128.5,686.867 1129.06,686.867 1129.62,686.867 1130.18,686.867 1130.74,686.867 1131.3,686.867 1131.86,686.867 1132.41,686.867 1132.97,686.867 1133.53,686.867 1134.09,686.867 1134.65,686.867 1135.21,686.867 1135.77,686.867 1136.33,686.867 1136.89,686.867 1137.45,686.867 1138.01,686.867 1138.57,686.867 1139.13,686.867 1139.68,686.867 1140.24,686.867 1140.8,686.867 1141.36,686.867 1141.92,686.867 1142.48,686.867 1143.04,686.867 1143.6,686.867 1144.16,686.867 1144.72,686.867 1145.28,686.867 1145.84,686.867 1146.4,686.867 1146.96,686.867 1147.51,686.867 1148.07,686.867 1148.63,686.867 1149.19,686.867 1149.75,686.867 1150.31,686.867 1150.87,686.867 1151.43,686.867 1151.99,686.867 1152.55,686.867 1153.11,686.867 1153.67,686.867 1154.23,686.867 1154.78,686.867 1155.34,686.867 1155.9,686.867 1156.46,686.867 1157.02,686.867 1157.58,686.867 1158.14,686.867 1158.7,686.867 1159.26,686.867 1159.82,686.867 1160.38,686.867 1160.94,686.867 1161.5,686.867 1162.05,686.867 1162.61,686.867 1163.17,686.867 1163.73,686.867 1164.29,686.867 1164.85,686.867 1165.41,686.867 1165.97,686.867 1166.53,686.867 1167.09,686.867 1167.65,686.867 1168.21,686.867 1168.77,686.867 1169.33,686.867 1169.88,686.867 1170.44,686.867 1171,686.867 1171.56,686.867 1172.12,686.867 1172.68,686.867 1173.24,686.867 1173.8,686.867 1174.36,686.867 1174.92,686.867 1175.48,686.867 1176.04,686.867 1176.6,686.867 1177.15,686.867 1177.71,686.867 1178.27,686.867 1178.83,686.867 1179.39,686.867 1179.95,686.867 1180.51,686.867 1181.07,686.867 1181.63,686.867 1182.19,686.867 1182.75,686.867 1183.31,686.867 1183.87,686.867 1184.43,686.867 1184.98,686.867 1185.54,686.867 1186.1,686.867 1186.66,686.867 1187.22,686.867 1187.78,686.867 1188.34,686.867 1188.9,686.867 1189.46,686.867 1190.02,686.867 1190.58,686.867 1191.14,686.867 1191.7,686.867 1192.25,686.867 1192.81,686.867 1193.37,686.867 1193.93,686.867 1194.49,686.867 1195.05,686.867 1195.61,686.867 1196.17,686.867 1196.73,686.867 1197.29,686.867 1197.85,686.867 1198.41,686.867 1198.97,686.867 1199.52,686.867 1200.08,686.867 1200.64,686.867 1201.2,686.867 1201.76,686.867 1202.32,686.867 1202.88,686.867 1203.44,686.867 1204,686.867 1204.56,686.867 1205.12,686.867 1205.68,686.867 1206.24,686.867 1206.8,686.867 1207.35,686.867 1207.91,686.867 1208.47,686.867 1209.03,686.867 1209.59,686.867 1210.15,686.867 1210.71,686.867 1211.27,686.867 1211.83,686.867 1212.39,686.867 1212.95,686.867 1213.51,686.867 1214.07,686.867 1214.62,686.867 1215.18,686.867 1215.74,686.867 1216.3,686.867 1216.86,686.867 1217.42,686.867 1217.98,686.867 1218.54,686.867 1219.1,686.867 1219.66,686.867 1220.22,686.867 1220.78,686.867 1221.34,686.867 1221.89,686.867 1222.45,686.867 1223.01,686.867 1223.57,686.867 1224.13,686.867 1224.69,686.867 1225.25,686.867 1225.81,686.867 1226.37,686.867 1226.93,686.867 1227.49,686.867 1228.05,686.867 1228.61,686.867 1229.17,686.867 1229.72,686.867 1230.28,686.867 1230.84,686.867 1231.4,686.867 1231.96,686.867 1232.52,686.867 1233.08,686.867 1233.64,686.867 1234.2,686.867 1234.76,686.867 1235.32,686.867 1235.88,686.867 1236.44,686.867 1236.99,686.867 1237.55,686.867 1238.11,686.867 1238.67,686.867 1239.23,686.867 1239.79,686.867 1240.35,686.867 1240.91,686.867 1241.47,686.867 1242.03,686.867 1242.59,686.867 1243.15,686.867 1243.71,686.867 1244.26,686.867 1244.82,686.867 1245.38,686.867 1245.94,686.867 1246.5,686.867 1247.06,686.867 1247.62,686.867 1248.18,686.867 1248.74,686.867 1249.3,686.867 1249.86,686.867 1250.42,686.867 1250.98,686.867 1251.54,686.867 1252.09,686.867 1252.65,686.867 1253.21,686.867 1253.77,686.867 1254.33,686.867 1254.89,686.867 1255.45,686.867 1256.01,686.867 1256.57,686.867 1257.13,686.867 1257.69,686.867 1258.25,686.867 1258.81,686.867 1259.36,686.867 1259.92,686.867 1260.48,686.867 1261.04,686.867 1261.6,686.867 1262.16,686.867 1262.72,686.867 1263.28,686.867 1263.84,686.867 1264.4,686.867 1264.96,686.867 1265.52,686.867 1266.08,686.867 1266.63,686.867 1267.19,686.867 1267.75,686.867 1268.31,686.867 1268.87,686.867 1269.43,686.867 1269.99,686.867 1270.55,686.867 1271.11,686.867 1271.67,686.867 1272.23,686.867 1272.79,686.867 1273.35,686.867 1273.91,686.867 1274.46,686.867 1275.02,686.867 1275.58,686.867 1276.14,686.867 1276.7,686.867 1277.26,686.867 1277.82,686.867 1278.38,686.867 1278.94,686.867 1279.5,686.867 1280.06,686.867 1280.62,686.867 1281.18,686.867 1281.73,686.867 1282.29,686.867 1282.85,686.867 1283.41,686.867 1283.97,686.867 1284.53,686.867 1285.09,686.867 1285.65,686.867 1286.21,686.867 1286.77,686.867 1287.33,686.867 1287.89,686.867 1288.45,686.867 1289,686.867 1289.56,686.867 1290.12,686.867 1290.68,686.867 1291.24,686.867 1291.8,686.867 1292.36,686.867 1292.92,686.867 1293.48,686.867 1294.04,686.867 1294.6,686.867 1295.16,686.867 1295.72,686.867 1296.28,686.867 1296.83,686.867 1297.39,686.867 1297.95,686.867 1298.51,686.867 1299.07,686.867 1299.63,686.867 1300.19,686.867 1300.75,686.867 1301.31,686.867 1301.87,686.867 1302.43,686.867 1302.99,686.867 1303.55,686.867 1304.1,686.867 1304.66,686.867 1305.22,686.867 1305.78,686.867 1306.34,686.867 1306.9,686.867 1307.46,686.867 1308.02,686.867 1308.58,686.867 1309.14,686.867 1309.7,686.867 1310.26,686.867 1310.82,686.867 1311.38,686.867 1311.93,686.867 1312.49,686.867 1313.05,686.867 1313.61,686.867 1314.17,686.867 1314.73,686.867 1315.29,686.867 1315.85,686.867 1316.41,686.867 1316.97,686.867 1317.53,686.867 1318.09,686.867 1318.65,686.867 1319.2,686.867 1319.76,686.867 1320.32,686.867 1320.88,686.867 1321.44,686.867 1322,686.867 1322.56,686.867 1323.12,686.867 1323.68,686.867 1324.24,686.867 1324.8,686.867 1325.36,686.867 1325.92,686.867 1326.47,686.867 1327.03,686.867 1327.59,686.867 1328.15,686.867 1328.71,686.867 1329.27,686.867 1329.83,686.867 1330.39,686.867 1330.95,686.867 1331.51,686.867 1332.07,686.867 1332.63,686.867 1333.19,686.867 1333.75,686.867 1334.3,686.867 1334.86,686.867 1335.42,686.867 1335.98,686.867 1336.54,686.867 1337.1,686.867 1337.66,686.867 1338.22,686.867 1338.78,686.867 1339.34,686.867 1339.9,686.867 1340.46,686.867 1341.02,686.867 1341.57,686.867 1342.13,686.867 1342.69,686.867 1343.25,686.867 1343.81,686.867 1344.37,686.867 1344.93,686.867 1345.49,686.867 1346.05,686.867 1346.61,686.867 1347.17,686.867 1347.73,686.867 1348.29,686.867 1348.84,686.867 1349.4,686.867 1349.96,686.867 1350.52,686.867 1351.08,686.867 1351.64,686.867 1352.2,686.867 1352.76,686.867 1353.32,686.867 1353.88,686.867 1354.44,686.867 1355,686.867 1355.56,686.867 1356.12,686.867 1356.67,686.867 1357.23,686.867 1357.79,686.867 1358.35,686.867 1358.91,686.867 1359.47,686.867 1360.03,686.867 1360.59,686.867 1361.15,686.867 1361.71,686.867 1362.27,686.867 1362.83,686.867 1363.39,686.867 1363.94,686.867 1364.5,686.867 1365.06,686.867 1365.62,686.867 1366.18,686.867 1366.74,686.867 1367.3,686.867 1367.86,686.867 1368.42,686.867 1368.98,686.867 1369.54,686.867 1370.1,686.867 1370.66,686.867 1371.21,686.867 1371.77,686.867 1372.33,686.867 1372.89,686.867 1373.45,686.867 1374.01,686.867 1374.57,686.867 1375.13,686.867 1375.69,686.867 1376.25,686.867 1376.81,686.867 1377.37,686.867 1377.93,686.867 1378.49,686.867 1379.04,686.867 1379.6,686.867 1380.16,686.867 1380.72,686.867 1381.28,686.867 1381.84,686.867 1382.4,686.867 1382.96,686.867 1383.52,686.867 1384.08,686.867 1384.64,686.867 1385.2,686.867 1385.76,686.867 1386.31,686.867 1386.87,686.867 1387.43,686.867 1387.99,686.867 1388.55,686.867 1389.11,686.867 1389.67,686.867 1390.23,686.867 1390.79,686.867 1391.35,686.867 1391.91,686.867 1392.47,686.867 1393.03,686.867 1393.58,686.867 1394.14,686.867 1394.7,686.867 1395.26,686.867 1395.82,686.867 1396.38,686.867 1396.94,686.867 1397.5,686.867 1398.06,686.867 1398.62,686.867 1399.18,686.867 1399.74,686.867 1400.3,686.867 1400.86,686.867 1401.41,686.867 1401.97,686.867 1402.53,686.867 1403.09,686.867 1403.65,686.867 1404.21,686.867 1404.77,686.867 1405.33,686.867 1405.89,686.867 1406.45,686.867 1407.01,686.867 1407.57,686.867 1408.13,686.867 1408.68,686.867 1409.24,686.867 1409.8,686.867 1410.36,686.867 1410.92,686.867 1411.48,686.867 1412.04,686.867 1412.6,686.867 1413.16,686.867 1413.72,686.867 1414.28,686.867 1414.84,686.867 1415.4,686.867 1415.95,686.867 1416.51,686.867 1417.07,686.867 1417.63,686.867 1418.19,686.867 1418.75,686.867 1419.31,686.867 1419.87,686.867 1420.43,686.867 1420.99,686.867 1421.55,686.867 1422.11,686.867 1422.67,686.867 1423.23,686.867 1423.78,686.867 1424.34,686.867 1424.9,686.867 1425.46,686.867 1426.02,686.867 1426.58,686.867 1427.14,686.867 1427.7,686.867 1428.26,686.867 1428.82,686.867 1429.38,686.867 1429.94,686.867 1430.5,686.867 1431.05,686.867 1431.61,686.867 1432.17,686.867 1432.73,686.867 1433.29,686.867 1433.85,686.867 1434.41,686.867 1434.97,686.867 1435.53,686.867 1436.09,686.867 1436.65,686.867 1437.21,686.867 1437.77,686.867 1438.33,686.867 1438.88,686.867 1439.44,686.867 1440,686.867 1440.56,686.867 1441.12,686.867 1441.68,686.867 1442.24,686.867 1442.8,686.867 1443.36,686.867 1443.92,686.867 1444.48,686.867 1445.04,686.867 1445.6,686.867 1446.15,686.867 1446.71,686.867 1447.27,686.867 1447.83,686.867 1448.39,686.867 1448.95,686.867 1449.51,686.867 1450.07,686.867 1450.63,686.867 1451.19,686.867 1451.75,686.867 1452.31,686.867 1452.87,686.867 1453.42,686.867 1453.98,686.867 1454.54,686.867 1455.1,686.867 1455.66,686.867 1456.22,686.867 1456.78,686.867 1457.34,686.867 1457.9,686.867 1458.46,686.867 1459.02,686.867 1459.58,686.867 1460.14,686.867 1460.7,686.867 1461.25,686.867 1461.81,686.867 1462.37,686.867 1462.93,686.867 1463.49,686.867 1464.05,686.867 1464.61,686.867 1465.17,686.867 1465.73,686.867 1466.29,686.867 1466.85,686.867 1467.41,686.867 1467.97,686.867 1468.52,686.867 1469.08,686.867 1469.64,686.867 1470.2,686.867 1470.76,686.867 1471.32,686.867 1471.88,686.867 1472.44,686.867 1473,686.867 1473.56,686.867 1474.12,686.867 1474.68,686.867 1475.24,686.867 1475.79,686.867 1476.35,686.867 1476.91,686.867 1477.47,686.867 1478.03,686.867 1478.59,686.867 1479.15,686.867 1479.71,686.867 1480.27,686.867 1480.83,686.867 1481.39,686.867 1481.95,686.867 1482.51,686.867 1483.07,686.867 1483.62,686.867 1484.18,686.867 1484.74,686.867 1485.3,686.867 1485.86,686.867 1486.42,686.867 1486.98,686.867 1487.54,686.867 1488.1,686.867 1488.66,686.867 1489.22,686.867 1489.78,686.867 1490.34,686.867 1490.89,686.867 1491.45,686.867 1492.01,686.867 1492.57,686.867 1493.13,686.867 1493.69,686.867 1494.25,686.867 1494.81,686.867 1495.37,686.867 1495.93,686.867 1496.49,686.867 1497.05,686.867 1497.61,686.867 1498.16,686.867 1498.72,686.867 1499.28,686.867 1499.84,686.867 1500.4,686.867 1500.96,686.867 1501.52,686.867 1502.08,686.867 1502.64,686.867 1503.2,686.867 1503.76,686.867 1504.32,686.867 1504.88,686.867 1505.44,686.867 1505.99,686.867 1506.55,686.867 1507.11,686.867 1507.67,686.867 1508.23,686.867 1508.79,686.867 1509.35,686.867 1509.91,686.867 1510.47,686.867 1511.03,686.867 1511.59,686.867 1512.15,686.867 1512.71,686.867 1513.26,686.867 1513.82,686.867 1514.38,686.867 1514.94,686.867 1515.5,686.867 1516.06,686.867 1516.62,686.867 1517.18,686.867 1517.74,686.867 1518.3,686.867 1518.86,686.867 1519.42,686.867 1519.98,686.867 1520.53,686.867 1521.09,686.867 1521.65,686.867 1522.21,686.867 1522.77,686.867 1523.33,686.867 1523.89,686.867 1524.45,686.867 1525.01,686.867 1525.57,686.867 1526.13,686.867 1526.69,686.867 1527.25,686.867 1527.81,686.867 1528.36,686.867 1528.92,686.867 1529.48,686.867 1530.04,686.867 1530.6,686.867 1531.16,686.867 1531.72,686.867 1532.28,686.867 1532.84,686.867 1533.4,686.867 1533.96,686.867 1534.52,686.867 1535.08,686.867 1535.63,686.867 1536.19,686.867 1536.75,686.867 1537.31,686.867 1537.87,686.867 1538.43,686.867 1538.99,686.867 1539.55,686.867 1540.11,686.867 1540.67,686.867 1541.23,686.867 1541.79,686.867 1542.35,686.867 1542.9,686.867 1543.46,686.867 1544.02,686.867 1544.58,686.867 1545.14,686.867 1545.7,686.867 1546.26,686.867 1546.82,686.867 1547.38,686.867 1547.94,686.867 1548.5,686.867 1549.06,686.867 1549.62,686.867 1550.18,686.867 1550.73,686.867 1551.29,686.867 1551.85,686.867 1552.41,686.867 1552.97,686.867 1553.53,686.867 1554.09,686.867 1554.65,686.867 1555.21,686.867 1555.77,686.867 1556.33,686.867 1556.89,686.867 1557.45,686.867 1558,686.867 1558.56,686.867 1559.12,686.867 1559.68,686.867 1560.24,686.867 1560.8,686.867 1561.36,686.867 1561.92,686.867 1562.48,686.867 1563.04,686.867 1563.6,686.867 1564.16,686.867 1564.72,686.867 1565.28,686.867 1565.83,686.867 1566.39,686.867 1566.95,686.867 1567.51,686.867 1568.07,686.867 1568.63,686.867 1569.19,686.867 1569.75,686.867 1570.31,686.867 1570.87,686.867 1571.43,686.867 1571.99,686.867 1572.55,686.867 1573.1,686.867 1573.66,686.867 1574.22,686.867 1574.78,686.867 1575.34,686.867 1575.9,686.867 1576.46,686.867 1577.02,686.867 1577.58,686.867 1578.14,686.867 1578.7,686.867 1579.26,686.867 1579.82,686.867 1580.37,686.867 1580.93,686.867 1581.49,686.867 1582.05,686.867 1582.61,686.867 1583.17,686.867 1583.73,686.867 1584.29,686.867 1584.85,686.867 1585.41,686.867 1585.97,686.867 1586.53,686.867 1587.09,686.867 1587.65,686.867 1588.2,686.867 1588.76,686.867 1589.32,686.867 1589.88,686.867 1590.44,686.867 1591,686.867 1591.56,686.867 1592.12,686.867 1592.68,686.867 1593.24,686.867 1593.8,686.867 1594.36,686.867 1594.92,686.867 1595.47,686.867 1596.03,686.867 1596.59,686.867 1597.15,686.867 1597.71,686.867 1598.27,686.867 1598.83,686.867 1599.39,686.867 1599.95,686.867 1600.51,686.867 1601.07,686.867 1601.63,686.867 1602.19,686.867 1602.74,686.867 1603.3,686.867 1603.86,686.867 1604.42,686.867 1604.98,686.867 1605.54,686.867 1606.1,686.867 1606.66,686.867 1607.22,686.867 1607.78,686.867 1608.34,686.867 1608.9,686.867 1609.46,686.867 1610.02,686.867 1610.57,686.867 1611.13,686.867 1611.69,686.867 1612.25,686.867 1612.81,686.867 1613.37,686.867 1613.93,686.867 1614.49,686.867 1615.05,686.867 1615.61,686.867 1616.17,686.867 1616.73,686.867 1617.29,686.867 1617.84,686.867 1618.4,686.867 1618.96,686.867 1619.52,686.867 1620.08,686.867 1620.64,686.867 1621.2,686.867 1621.76,686.867 1622.32,686.867 1622.88,686.867 1623.44,686.867 1624,686.867 1624.56,686.867 1625.11,686.867 1625.67,686.867 1626.23,686.867 1626.79,686.867 1627.35,686.867 1627.91,686.867 1628.47,686.867 1629.03,686.867 1629.59,686.867 1630.15,686.867 1630.71,686.867 1631.27,686.867 1631.83,686.867 1632.39,686.867 1632.94,686.867 1633.5,686.867 1634.06,686.867 1634.62,686.867 1635.18,686.867 1635.74,686.867 1636.3,686.867 1636.86,686.867 1637.42,686.867 1637.98,686.867 1638.54,686.867 1639.1,686.867 1639.66,686.867 1640.21,686.867 1640.77,686.867 1641.33,686.867 1641.89,686.867 1642.45,686.867 1643.01,686.867 1643.57,686.867 1644.13,686.867 1644.69,686.867 1645.25,686.867 1645.81,686.867 1646.37,686.867 1646.93,686.867 1647.48,686.867 1648.04,686.867 1648.6,686.867 1649.16,686.867 1649.72,686.867 1650.28,686.867 1650.84,686.867 1651.4,686.867 1651.96,686.867 1652.52,686.867 1653.08,686.867 1653.64,686.867 1654.2,686.867 1654.76,686.867 1655.31,686.867 1655.87,686.867 1656.43,686.867 1656.99,686.867 1657.55,686.867 1658.11,686.867 1658.67,686.867 1659.23,686.867 1659.79,686.867 1660.35,686.867 1660.91,686.867 1661.47,686.867 1662.03,686.867 1662.58,686.867 1663.14,686.867 1663.7,686.867 1664.26,686.867 1664.82,686.867 1665.38,686.867 1665.94,686.867 1666.5,686.867 1667.06,686.867 1667.62,686.867 1668.18,686.867 1668.74,686.867 1669.3,686.867 1669.85,686.867 1670.41,686.867 1670.97,686.867 1671.53,686.867 1672.09,686.867 1672.65,686.867 1673.21,686.867 1673.77,686.867 1674.33,686.867 1674.89,686.867 1675.45,686.867 1676.01,686.867 1676.57,686.867 1677.13,686.867 1677.68,686.867 1678.24,686.867 1678.8,686.867 1679.36,686.867 1679.92,686.867 1680.48,686.867 1681.04,686.867 1681.6,686.867 1682.16,686.867 1682.72,686.867 1683.28,686.867 1683.84,686.867 1684.4,686.867 1684.95,686.867 1685.51,686.867 1686.07,686.867 1686.63,686.867 1687.19,686.867 1687.75,686.867 1688.31,686.867 1688.87,686.867 1689.43,686.867 1689.99,686.867 1690.55,686.867 1691.11,686.867 1691.67,686.867 1692.23,686.867 1692.78,686.867 1693.34,686.867 1693.9,686.867 1694.46,686.867 1695.02,686.867 1695.58,686.867 1696.14,686.867 1696.7,686.867 1697.26,686.867 1697.82,686.867 1698.38,686.867 1698.94,686.867 1699.5,686.867 1700.05,686.867 1700.61,686.867 1701.17,686.867 1701.73,686.867 1702.29,686.867 1702.85,686.867 1703.41,686.867 1703.97,686.867 1704.53,686.867 1705.09,686.867 1705.65,686.867 1706.21,686.867 1706.77,686.867 1707.32,686.867 1707.88,686.867 1708.44,686.867 1709,686.867 1709.56,686.867 1710.12,686.867 1710.68,686.867 1711.24,686.867 1711.8,686.867 1712.36,686.867 1712.92,686.867 1713.48,686.867 1714.04,686.867 1714.6,686.867 1715.15,686.867 1715.71,686.867 1716.27,686.867 1716.83,686.867 1717.39,686.867 1717.95,686.867 1718.51,686.867 1719.07,686.867 1719.63,686.867 1720.19,686.867 1720.75,686.867 1721.31,686.867 1721.87,686.867 1722.42,686.867 1722.98,686.867 1723.54,686.867 1724.1,686.867 1724.66,686.867 1725.22,686.867 1725.78,686.867 1726.34,686.867 1726.9,686.867 1727.46,686.867 1728.02,686.867 1728.58,686.867 1729.14,686.867 1729.69,686.867 1730.25,686.867 1730.81,686.867 1731.37,686.867 1731.93,686.867 1732.49,686.867 1733.05,686.867 1733.61,686.867 1734.17,686.867 1734.73,686.867 1735.29,686.867 1735.85,686.867 1736.41,686.867 1736.97,686.867 1737.52,686.867 1738.08,686.867 1738.64,686.867 1739.2,686.867 1739.76,686.867 1740.32,686.867 1740.88,686.867 1741.44,686.867 1742,686.867 1742.56,686.867 1743.12,686.867 1743.68,686.867 1744.24,686.867 1744.79,686.867 1745.35,686.867 1745.91,686.867 1746.47,686.867 1747.03,686.867 1747.59,686.867 1748.15,686.867 1748.71,686.867 1749.27,686.867 1749.83,686.867 1750.39,686.867 1750.95,686.867 1751.51,686.867 1752.06,686.867 1752.62,686.867 1753.18,686.867 1753.74,686.867 1754.3,686.867 1754.86,686.867 1755.42,686.867 1755.98,686.867 1756.54,686.867 1757.1,686.867 1757.66,686.867 1758.22,686.867 1758.78,686.867 1759.34,686.867 1759.89,686.867 1760.45,686.867 1761.01,686.867 1761.57,686.867 1762.13,686.867 1762.69,686.867 1763.25,686.867 1763.81,686.867 1764.37,686.867 1764.93,686.867 1765.49,686.867 1766.05,686.867 1766.61,686.867 1767.16,686.867 1767.72,686.867 1768.28,686.867 1768.84,686.867 1769.4,686.867 1769.96,686.867 1770.52,686.867 1771.08,686.867 1771.64,686.867 1772.2,686.867 1772.76,686.867 1773.32,686.867 1773.88,686.867 1774.43,686.867 1774.99,686.867 1775.55,686.867 1776.11,686.867 1776.67,686.867 1777.23,686.867 1777.79,686.867 1778.35,686.867 1778.91,686.867 1779.47,686.867 1780.03,686.867 1780.59,686.867 1781.15,686.867 1781.71,686.867 1782.26,686.867 1782.82,686.867 1783.38,686.867 1783.94,686.867 1784.5,686.867 1785.06,686.867 1785.62,686.867 1786.18,686.867 1786.74,686.867 1787.3,686.867 1787.86,686.867 1788.42,686.867 1788.98,686.867 1789.53,686.867 1790.09,686.867 1790.65,686.867 1791.21,686.867 1791.77,686.867 1792.33,686.867 1792.89,686.867 1793.45,686.867 1794.01,686.867 1794.57,686.867 1795.13,686.867 1795.69,686.867 1796.25,686.867 1796.8,686.867 1797.36,686.867 1797.92,686.867 1798.48,686.867 1799.04,686.867 1799.6,686.867 1800.16,686.867 1800.72,686.867 1801.28,686.867 1801.84,686.867 1802.4,686.867 1802.96,686.867 1803.52,686.867 1804.08,686.867 1804.63,686.867 1805.19,686.867 1805.75,686.867 1806.31,686.867 1806.87,686.867 1807.43,686.867 1807.99,686.867 1808.55,686.867 1809.11,686.867 1809.67,686.867 1810.23,686.867 1810.79,686.867 1811.35,686.867 1811.9,686.867 1812.46,686.867 1813.02,686.867 1813.58,686.867 1814.14,686.867 1814.7,686.867 1815.26,686.867 1815.82,686.867 1816.38,686.867 1816.94,686.867 1817.5,686.867 1818.06,686.867 1818.62,686.867 1819.18,686.867 1819.73,686.867 1820.29,686.867 1820.85,686.867 1821.41,686.867 1821.97,686.867 1822.53,686.867 1823.09,686.867 1823.65,686.867 1824.21,686.867 1824.77,686.867 1825.33,686.867 1825.89,686.867 1826.45,686.867 1827,686.867 1827.56,686.867 1828.12,686.867 1828.68,686.867 1829.24,686.867 1829.8,686.867 1830.36,686.867 1830.92,686.867 1831.48,686.867 1832.04,686.867 1832.6,686.867 1833.16,686.867 1833.72,686.867 1834.27,686.867 1834.83,686.867 1835.39,686.867 1835.95,686.867 1836.51,686.867 1837.07,686.867 1837.63,686.867 1838.19,686.867 \"/>\n<path clip-path=\"url(#clip743)\" d=\"M720.247 686.022 L720.806 686.022 L721.365 686.022 L721.924 686.022 L722.484 686.022 L723.043 686.022 L723.602 686.022 L724.161 686.022 L724.721 686.022 L725.28 686.022 L725.839 686.022 L726.398 686.022 L726.958 686.022 L727.517 686.022 L728.076 686.022 L728.635 686.022 L729.195 686.022 L729.754 686.022 L730.313 686.022 L730.872 686.022 L731.432 686.022 L731.991 686.022 L732.55 686.022 L733.109 686.022 L733.669 686.022 L734.228 686.022 L734.787 686.022 L735.346 686.022 L735.906 686.022 L736.465 686.022 L737.024 686.022 L737.583 686.022 L738.143 686.022 L738.702 686.022 L739.261 686.022 L739.82 686.022 L740.38 686.022 L740.939 686.022 L741.498 686.022 L742.057 686.022 L742.617 686.022 L743.176 686.022 L743.735 686.022 L744.294 686.022 L744.854 686.022 L745.413 686.022 L745.972 686.022 L746.531 686.022 L747.091 686.022 L747.65 686.022 L748.209 686.022 L748.768 686.022 L749.328 686.022 L749.887 686.022 L750.446 686.022 L751.005 686.022 L751.565 686.022 L752.124 686.022 L752.683 686.022 L753.242 686.022 L753.802 686.022 L754.361 686.022 L754.92 686.022 L755.479 686.022 L756.039 686.022 L756.598 686.022 L757.157 686.022 L757.716 686.022 L758.276 686.022 L758.835 686.022 L759.394 686.022 L759.953 686.022 L760.513 686.022 L761.072 686.022 L761.631 686.022 L762.19 686.022 L762.75 686.022 L763.309 686.022 L763.868 686.022 L764.427 686.022 L764.987 686.022 L765.546 686.022 L766.105 686.022 L766.664 686.022 L767.224 686.022 L767.783 686.022 L768.342 686.022 L768.901 686.022 L769.461 686.022 L770.02 686.022 L770.579 686.022 L771.138 686.022 L771.698 686.022 L772.257 686.022 L772.816 686.022 L773.375 686.022 L773.935 686.022 L774.494 686.022 L775.053 686.022 L775.612 686.022 L776.172 686.022 L776.731 686.022 L777.29 686.022 L777.849 686.022 L778.409 686.022 L778.968 686.022 L779.527 686.022 L780.086 686.022 L780.646 686.022 L781.205 686.022 L781.764 686.022 L782.323 686.022 L782.883 686.022 L783.442 686.022 L784.001 686.022 L784.56 686.022 L785.12 686.022 L785.679 686.022 L786.238 686.022 L786.797 686.022 L787.357 686.022 L787.916 686.022 L788.475 686.022 L789.034 686.022 L789.594 686.022 L790.153 686.022 L790.712 686.022 L791.271 686.022 L791.831 686.022 L792.39 686.022 L792.949 686.022 L793.508 686.022 L794.068 686.022 L794.627 686.022 L795.186 686.022 L795.745 686.022 L796.305 686.022 L796.864 686.022 L797.423 686.022 L797.982 686.022 L798.542 686.022 L799.101 686.022 L799.66 686.022 L800.219 686.022 L800.779 686.022 L801.338 686.022 L801.897 686.022 L802.456 686.022 L803.016 686.022 L803.575 686.022 L804.134 686.022 L804.693 686.022 L805.253 686.022 L805.812 686.022 L806.371 686.022 L806.931 686.022 L807.49 686.022 L808.049 686.022 L808.608 686.022 L809.168 686.022 L809.727 686.022 L810.286 686.022 L810.845 686.022 L811.405 686.022 L811.964 686.022 L812.523 686.022 L813.082 686.022 L813.642 686.022 L814.201 686.022 L814.76 686.022 L815.319 686.022 L815.879 686.022 L816.438 686.022 L816.997 686.022 L817.556 686.022 L818.116 686.022 L818.675 686.022 L819.234 686.022 L819.793 686.022 L820.353 686.022 L820.912 686.022 L821.471 686.022 L822.03 686.022 L822.59 686.022 L823.149 686.022 L823.708 686.022 L824.267 686.022 L824.827 686.022 L825.386 686.022 L825.945 686.022 L826.504 686.022 L827.064 686.022 L827.623 686.022 L828.182 686.022 L828.741 686.022 L829.301 686.022 L829.86 686.022 L830.419 686.022 L830.978 686.022 L831.538 686.022 L832.097 686.022 L832.656 686.022 L833.215 686.022 L833.775 686.022 L834.334 686.022 L834.893 686.022 L835.452 686.022 L836.012 686.022 L836.571 686.022 L837.13 686.022 L837.689 686.022 L838.249 686.022 L838.808 686.022 L839.367 686.022 L839.926 686.022 L840.486 686.022 L841.045 686.022 L841.604 686.022 L842.163 686.022 L842.723 686.022 L843.282 686.022 L843.841 686.022 L844.4 686.022 L844.96 686.022 L845.519 686.022 L846.078 686.022 L846.637 686.022 L847.197 686.022 L847.756 686.022 L848.315 686.022 L848.874 686.022 L849.434 686.022 L849.993 686.022 L850.552 686.022 L851.111 686.022 L851.671 686.022 L852.23 686.022 L852.789 686.022 L853.348 686.022 L853.908 686.022 L854.467 686.022 L855.026 686.022 L855.585 686.022 L856.145 686.022 L856.704 686.022 L857.263 686.022 L857.822 686.022 L858.382 686.022 L858.941 686.022 L859.5 686.022 L860.059 686.022 L860.619 686.022 L861.178 686.022 L861.737 686.022 L862.296 686.022 L862.856 686.022 L863.415 686.022 L863.974 686.022 L864.533 686.022 L865.093 686.022 L865.652 686.022 L866.211 686.022 L866.77 686.022 L867.33 686.022 L867.889 686.022 L868.448 686.022 L869.007 686.022 L869.567 686.022 L870.126 686.022 L870.685 686.022 L871.244 686.022 L871.804 686.022 L872.363 686.022 L872.922 686.022 L873.481 686.022 L874.041 686.022 L874.6 686.022 L875.159 686.022 L875.718 686.022 L876.278 686.022 L876.837 686.022 L877.396 686.022 L877.955 686.022 L878.515 686.022 L879.074 686.022 L879.633 686.022 L880.192 686.022 L880.752 686.022 L881.311 686.022 L881.87 686.022 L882.429 686.022 L882.989 686.022 L883.548 686.022 L884.107 686.022 L884.666 686.022 L885.226 686.022 L885.785 686.022 L886.344 686.022 L886.903 686.022 L887.463 686.022 L888.022 686.022 L888.581 686.022 L889.14 686.022 L889.7 686.022 L890.259 686.022 L890.818 686.022 L891.377 686.022 L891.937 686.022 L892.496 686.022 L893.055 686.022 L893.614 686.022 L894.174 686.022 L894.733 686.022 L895.292 686.022 L895.851 686.022 L896.411 686.022 L896.97 686.022 L897.529 686.022 L898.088 686.022 L898.648 686.022 L899.207 686.022 L899.766 686.022 L900.325 686.022 L900.885 686.022 L901.444 686.022 L902.003 686.022 L902.562 686.022 L903.122 686.022 L903.681 686.022 L904.24 686.022 L904.799 686.022 L905.359 686.022 L905.918 686.022 L906.477 686.022 L907.036 686.022 L907.596 686.022 L908.155 686.022 L908.714 686.022 L909.273 686.022 L909.833 686.022 L910.392 686.022 L910.951 686.022 L911.51 686.022 L912.07 686.022 L912.629 686.022 L913.188 686.022 L913.747 686.022 L914.307 686.022 L914.866 686.022 L915.425 686.022 L915.984 686.022 L916.544 686.022 L917.103 686.022 L917.662 686.022 L918.221 686.022 L918.781 686.022 L919.34 686.022 L919.899 686.022 L920.458 686.022 L921.018 686.022 L921.577 686.022 L922.136 686.022 L922.695 686.022 L923.255 686.022 L923.814 686.022 L924.373 686.022 L924.932 686.022 L925.492 686.022 L926.051 686.022 L926.61 686.022 L927.169 686.022 L927.729 686.022 L928.288 686.022 L928.847 686.022 L929.406 686.022 L929.966 686.022 L930.525 686.022 L931.084 686.022 L931.644 686.022 L932.203 686.022 L932.762 686.022 L933.321 686.022 L933.881 686.022 L934.44 686.022 L934.999 686.022 L935.558 686.022 L936.118 686.022 L936.677 686.022 L937.236 686.022 L937.795 686.022 L938.355 686.022 L938.914 686.022 L939.473 686.022 L940.032 686.022 L940.592 686.022 L941.151 686.022 L941.71 686.022 L942.269 686.022 L942.829 686.022 L943.388 686.022 L943.947 686.022 L944.506 686.022 L945.066 686.022 L945.625 686.022 L946.184 686.022 L946.743 686.022 L947.303 686.022 L947.862 686.022 L948.421 686.022 L948.98 686.022 L949.54 686.022 L950.099 686.022 L950.658 686.022 L951.217 686.022 L951.777 686.022 L952.336 686.022 L952.895 686.022 L953.454 686.022 L954.014 686.022 L954.573 686.022 L955.132 686.022 L955.691 686.022 L956.251 686.022 L956.81 686.022 L957.369 686.022 L957.928 686.022 L958.488 686.022 L959.047 686.022 L959.606 686.022 L960.165 686.022 L960.725 686.022 L961.284 686.022 L961.843 686.022 L962.402 686.022 L962.962 686.022 L963.521 686.022 L964.08 686.022 L964.639 686.022 L965.199 686.022 L965.758 686.022 L966.317 686.022 L966.876 686.022 L967.436 686.022 L967.995 686.022 L968.554 686.022 L969.113 686.022 L969.673 686.022 L970.232 686.022 L970.791 686.022 L971.35 686.022 L971.91 686.022 L972.469 686.022 L973.028 686.022 L973.587 686.022 L974.147 686.022 L974.706 686.022 L975.265 686.022 L975.824 686.022 L976.384 686.022 L976.943 686.022 L977.502 686.022 L978.061 686.022 L978.621 686.022 L979.18 686.022 L979.739 686.022 L980.298 686.022 L980.858 686.022 L981.417 686.022 L981.976 686.022 L982.535 686.022 L983.095 686.022 L983.654 686.022 L984.213 686.022 L984.772 686.022 L985.332 686.022 L985.891 686.022 L986.45 686.022 L987.009 686.022 L987.569 686.022 L988.128 686.022 L988.687 686.022 L989.246 686.022 L989.806 686.022 L990.365 686.022 L990.924 686.022 L991.483 686.022 L992.043 686.022 L992.602 686.022 L993.161 686.022 L993.72 686.022 L994.28 686.022 L994.839 686.022 L995.398 686.022 L995.957 686.022 L996.517 686.022 L997.076 686.022 L997.635 686.022 L998.194 686.022 L998.754 686.022 L999.313 686.022 L999.872 686.022 L1000.43 686.022 L1000.99 686.022 L1001.55 686.022 L1002.11 686.022 L1002.67 686.022 L1003.23 686.022 L1003.79 686.022 L1004.35 686.022 L1004.91 686.022 L1005.46 686.022 L1006.02 686.022 L1006.58 686.022 L1007.14 686.022 L1007.7 686.022 L1008.26 686.022 L1008.82 686.022 L1009.38 686.022 L1009.94 686.022 L1010.5 686.022 L1011.06 686.022 L1011.62 686.022 L1012.18 686.022 L1012.73 686.022 L1013.29 686.022 L1013.85 686.022 L1014.41 686.022 L1014.97 686.022 L1015.53 686.022 L1016.09 686.022 L1016.65 686.022 L1017.21 686.022 L1017.77 686.022 L1018.33 686.022 L1018.89 686.022 L1019.45 686.022 L1020.01 686.022 L1020.56 686.022 L1021.12 686.022 L1021.68 686.022 L1022.24 686.022 L1022.8 686.022 L1023.36 686.022 L1023.92 686.022 L1024.48 686.022 L1025.04 686.022 L1025.6 686.022 L1026.16 686.022 L1026.72 686.022 L1027.28 686.022 L1027.83 686.022 L1028.39 686.022 L1028.95 686.022 L1029.51 686.022 L1030.07 686.022 L1030.63 686.022 L1031.19 686.022 L1031.75 686.022 L1032.31 686.022 L1032.87 686.022 L1033.43 686.022 L1033.99 686.022 L1034.55 686.022 L1035.1 686.022 L1035.66 686.022 L1036.22 686.022 L1036.78 686.022 L1037.34 686.022 L1037.9 686.022 L1038.46 686.022 L1039.02 686.022 L1039.58 686.022 L1040.14 686.022 L1040.7 686.022 L1041.26 686.022 L1041.82 686.022 L1042.38 686.022 L1042.93 686.022 L1043.49 686.022 L1044.05 686.022 L1044.61 686.022 L1045.17 686.022 L1045.73 686.022 L1046.29 686.022 L1046.85 686.022 L1047.41 686.022 L1047.97 686.022 L1048.53 686.022 L1049.09 686.022 L1049.65 686.022 L1050.2 686.022 L1050.76 686.022 L1051.32 686.022 L1051.88 686.022 L1052.44 686.022 L1053 686.022 L1053.56 686.022 L1054.12 686.022 L1054.68 686.022 L1055.24 686.022 L1055.8 686.022 L1056.36 686.022 L1056.92 686.022 L1057.48 686.022 L1058.03 686.022 L1058.59 686.022 L1059.15 686.022 L1059.71 686.022 L1060.27 686.022 L1060.83 686.022 L1061.39 686.022 L1061.95 686.022 L1062.51 686.022 L1063.07 686.022 L1063.63 686.022 L1064.19 686.022 L1064.75 686.022 L1065.3 686.022 L1065.86 686.022 L1066.42 686.022 L1066.98 686.022 L1067.54 686.022 L1068.1 686.022 L1068.66 686.022 L1069.22 686.022 L1069.78 686.022 L1070.34 686.022 L1070.9 686.022 L1071.46 686.022 L1072.02 686.022 L1072.57 686.022 L1073.13 686.022 L1073.69 686.022 L1074.25 686.022 L1074.81 686.022 L1075.37 686.022 L1075.93 686.022 L1076.49 686.022 L1077.05 686.022 L1077.61 686.022 L1078.17 686.022 L1078.73 686.022 L1079.29 686.022 L1079.85 686.022 L1080.4 686.022 L1080.96 686.022 L1081.52 686.022 L1082.08 686.022 L1082.64 686.022 L1083.2 686.022 L1083.76 686.022 L1084.32 686.022 L1084.88 686.022 L1085.44 686.022 L1086 686.022 L1086.56 686.022 L1087.12 686.022 L1087.67 686.022 L1088.23 686.022 L1088.79 686.022 L1089.35 686.022 L1089.91 686.022 L1090.47 686.022 L1091.03 686.022 L1091.59 686.022 L1092.15 686.022 L1092.71 686.022 L1093.27 686.022 L1093.83 686.022 L1094.39 686.022 L1094.94 686.022 L1095.5 686.022 L1096.06 686.022 L1096.62 686.022 L1097.18 686.022 L1097.74 686.022 L1098.3 686.022 L1098.86 686.022 L1099.42 686.022 L1099.98 686.022 L1100.54 686.022 L1101.1 686.022 L1101.66 686.022 L1102.22 686.022 L1102.77 686.022 L1103.33 686.022 L1103.89 686.022 L1104.45 686.022 L1105.01 686.022 L1105.57 686.022 L1106.13 686.022 L1106.69 686.022 L1107.25 686.022 L1107.81 686.022 L1108.37 686.022 L1108.93 686.022 L1109.49 686.022 L1110.04 686.022 L1110.6 686.022 L1111.16 686.022 L1111.72 686.022 L1112.28 686.022 L1112.84 686.022 L1113.4 686.022 L1113.96 686.022 L1114.52 686.022 L1115.08 686.022 L1115.64 686.022 L1116.2 686.022 L1116.76 686.022 L1117.31 686.022 L1117.87 686.022 L1118.43 686.022 L1118.99 686.022 L1119.55 686.022 L1120.11 686.022 L1120.67 686.022 L1121.23 686.022 L1121.79 686.022 L1122.35 686.022 L1122.91 686.022 L1123.47 686.022 L1124.03 686.022 L1124.59 686.022 L1125.14 686.022 L1125.7 686.022 L1126.26 686.022 L1126.82 686.022 L1127.38 686.022 L1127.94 686.022 L1128.5 686.022 L1129.06 686.022 L1129.62 686.022 L1130.18 686.022 L1130.74 686.022 L1131.3 686.022 L1131.86 686.022 L1132.41 686.022 L1132.97 686.022 L1133.53 686.022 L1134.09 686.022 L1134.65 686.022 L1135.21 686.022 L1135.77 686.022 L1136.33 686.022 L1136.89 686.022 L1137.45 686.022 L1138.01 686.022 L1138.57 686.022 L1139.13 686.022 L1139.68 686.022 L1140.24 686.022 L1140.8 686.022 L1141.36 686.022 L1141.92 686.022 L1142.48 686.022 L1143.04 686.022 L1143.6 686.022 L1144.16 686.022 L1144.72 686.022 L1145.28 686.022 L1145.84 686.022 L1146.4 686.022 L1146.96 686.022 L1147.51 686.022 L1148.07 686.022 L1148.63 686.022 L1149.19 686.022 L1149.75 686.022 L1150.31 686.022 L1150.87 686.022 L1151.43 686.022 L1151.99 686.022 L1152.55 686.022 L1153.11 686.022 L1153.67 686.022 L1154.23 686.022 L1154.78 686.022 L1155.34 686.022 L1155.9 686.022 L1156.46 686.022 L1157.02 686.022 L1157.58 686.022 L1158.14 686.022 L1158.7 686.022 L1159.26 686.022 L1159.82 686.022 L1160.38 686.022 L1160.94 686.022 L1161.5 686.022 L1162.05 686.022 L1162.61 686.022 L1163.17 686.022 L1163.73 686.022 L1164.29 686.022 L1164.85 686.022 L1165.41 686.022 L1165.97 686.022 L1166.53 686.022 L1167.09 686.022 L1167.65 686.022 L1168.21 686.022 L1168.77 686.022 L1169.33 686.022 L1169.88 686.022 L1170.44 686.022 L1171 686.022 L1171.56 686.022 L1172.12 686.022 L1172.68 686.022 L1173.24 686.022 L1173.8 686.022 L1174.36 686.022 L1174.92 686.022 L1175.48 686.022 L1176.04 686.022 L1176.6 686.022 L1177.15 686.022 L1177.71 686.022 L1178.27 686.022 L1178.83 686.022 L1179.39 686.022 L1179.95 686.022 L1180.51 686.022 L1181.07 686.022 L1181.63 686.022 L1182.19 686.022 L1182.75 686.022 L1183.31 686.022 L1183.87 686.022 L1184.43 686.022 L1184.98 686.022 L1185.54 686.022 L1186.1 686.022 L1186.66 686.022 L1187.22 686.022 L1187.78 686.022 L1188.34 686.022 L1188.9 686.022 L1189.46 686.022 L1190.02 686.022 L1190.58 686.022 L1191.14 686.022 L1191.7 686.022 L1192.25 686.022 L1192.81 686.022 L1193.37 686.022 L1193.93 686.022 L1194.49 686.022 L1195.05 686.022 L1195.61 686.022 L1196.17 686.022 L1196.73 686.022 L1197.29 686.022 L1197.85 686.022 L1198.41 686.022 L1198.97 686.022 L1199.52 686.022 L1200.08 686.022 L1200.64 686.022 L1201.2 686.022 L1201.76 686.022 L1202.32 686.022 L1202.88 686.022 L1203.44 686.022 L1204 686.022 L1204.56 686.022 L1205.12 686.022 L1205.68 686.022 L1206.24 686.022 L1206.8 686.022 L1207.35 686.022 L1207.91 686.022 L1208.47 686.022 L1209.03 686.022 L1209.59 686.022 L1210.15 686.022 L1210.71 686.022 L1211.27 686.022 L1211.83 686.022 L1212.39 686.022 L1212.95 686.022 L1213.51 686.022 L1214.07 686.022 L1214.62 686.022 L1215.18 686.022 L1215.74 686.022 L1216.3 686.022 L1216.86 686.022 L1217.42 686.022 L1217.98 686.022 L1218.54 686.022 L1219.1 686.022 L1219.66 686.022 L1220.22 686.022 L1220.78 686.022 L1221.34 686.022 L1221.89 686.022 L1222.45 686.022 L1223.01 686.022 L1223.57 686.022 L1224.13 686.022 L1224.69 686.022 L1225.25 686.022 L1225.81 686.022 L1226.37 686.022 L1226.93 686.022 L1227.49 686.022 L1228.05 686.022 L1228.61 686.022 L1229.17 686.022 L1229.72 686.022 L1230.28 686.022 L1230.84 686.022 L1231.4 686.022 L1231.96 686.022 L1232.52 686.022 L1233.08 686.022 L1233.64 686.022 L1234.2 686.022 L1234.76 686.022 L1235.32 686.022 L1235.88 686.022 L1236.44 686.022 L1236.99 686.022 L1237.55 686.022 L1238.11 686.022 L1238.67 686.022 L1239.23 686.022 L1239.79 686.022 L1240.35 686.022 L1240.91 686.022 L1241.47 686.022 L1242.03 686.022 L1242.59 686.022 L1243.15 686.022 L1243.71 686.022 L1244.26 686.022 L1244.82 686.022 L1245.38 686.022 L1245.94 686.022 L1246.5 686.022 L1247.06 686.022 L1247.62 686.022 L1248.18 686.022 L1248.74 686.022 L1249.3 686.022 L1249.86 686.022 L1250.42 686.022 L1250.98 686.022 L1251.54 686.022 L1252.09 686.022 L1252.65 686.022 L1253.21 686.022 L1253.77 686.022 L1254.33 686.022 L1254.89 686.022 L1255.45 686.022 L1256.01 686.022 L1256.57 686.022 L1257.13 686.022 L1257.69 686.022 L1258.25 686.022 L1258.81 686.022 L1259.36 686.022 L1259.92 686.022 L1260.48 686.022 L1261.04 686.022 L1261.6 686.022 L1262.16 686.022 L1262.72 686.022 L1263.28 686.022 L1263.84 686.022 L1264.4 686.022 L1264.96 686.022 L1265.52 686.022 L1266.08 686.022 L1266.63 686.022 L1267.19 686.022 L1267.75 686.022 L1268.31 686.022 L1268.87 686.022 L1269.43 686.022 L1269.99 686.022 L1270.55 686.022 L1271.11 686.022 L1271.67 686.022 L1272.23 686.022 L1272.79 686.022 L1273.35 686.022 L1273.91 686.022 L1274.46 686.022 L1275.02 686.022 L1275.58 686.022 L1276.14 686.022 L1276.7 686.022 L1277.26 686.022 L1277.82 686.022 L1278.38 686.022 L1278.94 686.022 L1279.5 686.022 L1280.06 686.022 L1280.62 686.022 L1281.18 686.022 L1281.73 686.022 L1282.29 686.022 L1282.85 686.022 L1283.41 686.022 L1283.97 686.022 L1284.53 686.022 L1285.09 686.022 L1285.65 686.022 L1286.21 686.022 L1286.77 686.022 L1287.33 686.022 L1287.89 686.022 L1288.45 686.022 L1289 686.022 L1289.56 686.022 L1290.12 686.022 L1290.68 686.022 L1291.24 686.022 L1291.8 686.022 L1292.36 686.022 L1292.92 686.022 L1293.48 686.022 L1294.04 686.022 L1294.6 686.022 L1295.16 686.022 L1295.72 686.022 L1296.28 686.022 L1296.83 686.022 L1297.39 686.022 L1297.95 686.022 L1298.51 686.022 L1299.07 686.022 L1299.63 686.022 L1300.19 686.022 L1300.75 686.022 L1301.31 686.022 L1301.87 686.022 L1302.43 686.022 L1302.99 686.022 L1303.55 686.022 L1304.1 686.022 L1304.66 686.022 L1305.22 686.022 L1305.78 686.022 L1306.34 686.022 L1306.9 686.022 L1307.46 686.022 L1308.02 686.022 L1308.58 686.022 L1309.14 686.022 L1309.7 686.022 L1310.26 686.022 L1310.82 686.022 L1311.38 686.022 L1311.93 686.022 L1312.49 686.022 L1313.05 686.022 L1313.61 686.022 L1314.17 686.022 L1314.73 686.022 L1315.29 686.022 L1315.85 686.022 L1316.41 686.022 L1316.97 686.022 L1317.53 686.022 L1318.09 686.022 L1318.65 686.022 L1319.2 686.022 L1319.76 686.022 L1320.32 686.022 L1320.88 686.022 L1321.44 686.022 L1322 686.022 L1322.56 686.022 L1323.12 686.022 L1323.68 686.022 L1324.24 686.022 L1324.8 686.022 L1325.36 686.022 L1325.92 686.022 L1326.47 686.022 L1327.03 686.022 L1327.59 686.022 L1328.15 686.022 L1328.71 686.022 L1329.27 686.022 L1329.83 686.022 L1330.39 686.022 L1330.95 686.022 L1331.51 686.022 L1332.07 686.022 L1332.63 686.022 L1333.19 686.022 L1333.75 686.022 L1334.3 686.022 L1334.86 686.022 L1335.42 686.022 L1335.98 686.022 L1336.54 686.022 L1337.1 686.022 L1337.66 686.022 L1338.22 686.022 L1338.78 686.022 L1339.34 686.022 L1339.9 686.022 L1340.46 686.022 L1341.02 686.022 L1341.57 686.022 L1342.13 686.022 L1342.69 686.022 L1343.25 686.022 L1343.81 686.022 L1344.37 686.022 L1344.93 686.022 L1345.49 686.022 L1346.05 686.022 L1346.61 686.022 L1347.17 686.022 L1347.73 686.022 L1348.29 686.022 L1348.84 686.022 L1349.4 686.022 L1349.96 686.022 L1350.52 686.022 L1351.08 686.022 L1351.64 686.022 L1352.2 686.022 L1352.76 686.022 L1353.32 686.022 L1353.88 686.022 L1354.44 686.022 L1355 686.022 L1355.56 686.022 L1356.12 686.022 L1356.67 686.022 L1357.23 686.022 L1357.79 686.022 L1358.35 686.022 L1358.91 686.022 L1359.47 686.022 L1360.03 686.022 L1360.59 686.022 L1361.15 686.022 L1361.71 686.022 L1362.27 686.022 L1362.83 686.022 L1363.39 686.022 L1363.94 686.022 L1364.5 686.022 L1365.06 686.022 L1365.62 686.022 L1366.18 686.022 L1366.74 686.022 L1367.3 686.022 L1367.86 686.022 L1368.42 686.022 L1368.98 686.022 L1369.54 686.022 L1370.1 686.022 L1370.66 686.022 L1371.21 686.022 L1371.77 686.022 L1372.33 686.022 L1372.89 686.022 L1373.45 686.022 L1374.01 686.022 L1374.57 686.022 L1375.13 686.022 L1375.69 686.022 L1376.25 686.022 L1376.81 686.022 L1377.37 686.022 L1377.93 686.022 L1378.49 686.022 L1379.04 686.022 L1379.6 686.022 L1380.16 686.022 L1380.72 686.022 L1381.28 686.022 L1381.84 686.022 L1382.4 686.022 L1382.96 686.022 L1383.52 686.022 L1384.08 686.022 L1384.64 686.022 L1385.2 686.022 L1385.76 686.022 L1386.31 686.022 L1386.87 686.022 L1387.43 686.022 L1387.99 686.022 L1388.55 686.022 L1389.11 686.022 L1389.67 686.022 L1390.23 686.022 L1390.79 686.022 L1391.35 686.022 L1391.91 686.022 L1392.47 686.022 L1393.03 686.022 L1393.58 686.022 L1394.14 686.022 L1394.7 686.022 L1395.26 686.022 L1395.82 686.022 L1396.38 686.022 L1396.94 686.022 L1397.5 686.022 L1398.06 686.022 L1398.62 686.022 L1399.18 686.022 L1399.74 686.022 L1400.3 686.022 L1400.86 686.022 L1401.41 686.022 L1401.97 686.022 L1402.53 686.022 L1403.09 686.022 L1403.65 686.022 L1404.21 686.022 L1404.77 686.022 L1405.33 686.022 L1405.89 686.022 L1406.45 686.022 L1407.01 686.022 L1407.57 686.022 L1408.13 686.022 L1408.68 686.022 L1409.24 686.022 L1409.8 686.022 L1410.36 686.022 L1410.92 686.022 L1411.48 686.022 L1412.04 686.022 L1412.6 686.022 L1413.16 686.022 L1413.72 686.022 L1414.28 686.022 L1414.84 686.022 L1415.4 686.022 L1415.95 686.022 L1416.51 686.022 L1417.07 686.022 L1417.63 686.022 L1418.19 686.022 L1418.75 686.022 L1419.31 686.022 L1419.87 686.022 L1420.43 686.022 L1420.99 686.022 L1421.55 686.022 L1422.11 686.022 L1422.67 686.022 L1423.23 686.022 L1423.78 686.022 L1424.34 686.022 L1424.9 686.022 L1425.46 686.022 L1426.02 686.022 L1426.58 686.022 L1427.14 686.022 L1427.7 686.022 L1428.26 686.022 L1428.82 686.022 L1429.38 686.022 L1429.94 686.022 L1430.5 686.022 L1431.05 686.022 L1431.61 686.022 L1432.17 686.022 L1432.73 686.022 L1433.29 686.022 L1433.85 686.022 L1434.41 686.022 L1434.97 686.022 L1435.53 686.022 L1436.09 686.022 L1436.65 686.022 L1437.21 686.022 L1437.77 686.022 L1438.33 686.022 L1438.88 686.022 L1439.44 686.022 L1440 686.022 L1440.56 686.022 L1441.12 686.022 L1441.68 686.022 L1442.24 686.022 L1442.8 686.022 L1443.36 686.022 L1443.92 686.022 L1444.48 686.022 L1445.04 686.022 L1445.6 686.022 L1446.15 686.022 L1446.71 686.022 L1447.27 686.022 L1447.83 686.022 L1448.39 686.022 L1448.95 686.022 L1449.51 686.022 L1450.07 686.022 L1450.63 686.022 L1451.19 686.022 L1451.75 686.022 L1452.31 686.022 L1452.87 686.022 L1453.42 686.022 L1453.98 686.022 L1454.54 686.022 L1455.1 686.022 L1455.66 686.022 L1456.22 686.022 L1456.78 686.022 L1457.34 686.022 L1457.9 686.022 L1458.46 686.022 L1459.02 686.022 L1459.58 686.022 L1460.14 686.022 L1460.7 686.022 L1461.25 686.022 L1461.81 686.022 L1462.37 686.022 L1462.93 686.022 L1463.49 686.022 L1464.05 686.022 L1464.61 686.022 L1465.17 686.022 L1465.73 686.022 L1466.29 686.022 L1466.85 686.022 L1467.41 686.022 L1467.97 686.022 L1468.52 686.022 L1469.08 686.022 L1469.64 686.022 L1470.2 686.022 L1470.76 686.022 L1471.32 686.022 L1471.88 686.022 L1472.44 686.022 L1473 686.022 L1473.56 686.022 L1474.12 686.022 L1474.68 686.022 L1475.24 686.022 L1475.79 686.022 L1476.35 686.022 L1476.91 686.022 L1477.47 686.022 L1478.03 686.022 L1478.59 686.022 L1479.15 686.022 L1479.71 686.022 L1480.27 686.022 L1480.83 686.022 L1481.39 686.022 L1481.95 686.022 L1482.51 686.022 L1483.07 686.022 L1483.62 686.022 L1484.18 686.022 L1484.74 686.022 L1485.3 686.022 L1485.86 686.022 L1486.42 686.022 L1486.98 686.022 L1487.54 686.022 L1488.1 686.022 L1488.66 686.022 L1489.22 686.022 L1489.78 686.022 L1490.34 686.022 L1490.89 686.022 L1491.45 686.022 L1492.01 686.022 L1492.57 686.022 L1493.13 686.022 L1493.69 686.022 L1494.25 686.022 L1494.81 686.022 L1495.37 686.022 L1495.93 686.022 L1496.49 686.022 L1497.05 686.022 L1497.61 686.022 L1498.16 686.022 L1498.72 686.022 L1499.28 686.022 L1499.84 686.022 L1500.4 686.022 L1500.96 686.022 L1501.52 686.022 L1502.08 686.022 L1502.64 686.022 L1503.2 686.022 L1503.76 686.022 L1504.32 686.022 L1504.88 686.022 L1505.44 686.022 L1505.99 686.022 L1506.55 686.022 L1507.11 686.022 L1507.67 686.022 L1508.23 686.022 L1508.79 686.022 L1509.35 686.022 L1509.91 686.022 L1510.47 686.022 L1511.03 686.022 L1511.59 686.022 L1512.15 686.022 L1512.71 686.022 L1513.26 686.022 L1513.82 686.022 L1514.38 686.022 L1514.94 686.022 L1515.5 686.022 L1516.06 686.022 L1516.62 686.022 L1517.18 686.022 L1517.74 686.022 L1518.3 686.022 L1518.86 686.022 L1519.42 686.022 L1519.98 686.022 L1520.53 686.022 L1521.09 686.022 L1521.65 686.022 L1522.21 686.022 L1522.77 686.022 L1523.33 686.022 L1523.89 686.022 L1524.45 686.022 L1525.01 686.022 L1525.57 686.022 L1526.13 686.022 L1526.69 686.022 L1527.25 686.022 L1527.81 686.022 L1528.36 686.022 L1528.92 686.022 L1529.48 686.022 L1530.04 686.022 L1530.6 686.022 L1531.16 686.022 L1531.72 686.022 L1532.28 686.022 L1532.84 686.022 L1533.4 686.022 L1533.96 686.022 L1534.52 686.022 L1535.08 686.022 L1535.63 686.022 L1536.19 686.022 L1536.75 686.022 L1537.31 686.022 L1537.87 686.022 L1538.43 686.022 L1538.99 686.022 L1539.55 686.022 L1540.11 686.022 L1540.67 686.022 L1541.23 686.022 L1541.79 686.022 L1542.35 686.022 L1542.9 686.022 L1543.46 686.022 L1544.02 686.022 L1544.58 686.022 L1545.14 686.022 L1545.7 686.022 L1546.26 686.022 L1546.82 686.022 L1547.38 686.022 L1547.94 686.022 L1548.5 686.022 L1549.06 686.022 L1549.62 686.022 L1550.18 686.022 L1550.73 686.022 L1551.29 686.022 L1551.85 686.022 L1552.41 686.022 L1552.97 686.022 L1553.53 686.022 L1554.09 686.022 L1554.65 686.022 L1555.21 686.022 L1555.77 686.022 L1556.33 686.022 L1556.89 686.022 L1557.45 686.022 L1558 686.022 L1558.56 686.022 L1559.12 686.022 L1559.68 686.022 L1560.24 686.022 L1560.8 686.022 L1561.36 686.022 L1561.92 686.022 L1562.48 686.022 L1563.04 686.022 L1563.6 686.022 L1564.16 686.022 L1564.72 686.022 L1565.28 686.022 L1565.83 686.022 L1566.39 686.022 L1566.95 686.022 L1567.51 686.022 L1568.07 686.022 L1568.63 686.022 L1569.19 686.022 L1569.75 686.022 L1570.31 686.022 L1570.87 686.022 L1571.43 686.022 L1571.99 686.022 L1572.55 686.022 L1573.1 686.022 L1573.66 686.022 L1574.22 686.022 L1574.78 686.022 L1575.34 686.022 L1575.9 686.022 L1576.46 686.022 L1577.02 686.022 L1577.58 686.022 L1578.14 686.022 L1578.7 686.022 L1579.26 686.022 L1579.82 686.022 L1580.37 686.022 L1580.93 686.022 L1581.49 686.022 L1582.05 686.022 L1582.61 686.022 L1583.17 686.022 L1583.73 686.022 L1584.29 686.022 L1584.85 686.022 L1585.41 686.022 L1585.97 686.022 L1586.53 686.022 L1587.09 686.022 L1587.65 686.022 L1588.2 686.022 L1588.76 686.022 L1589.32 686.022 L1589.88 686.022 L1590.44 686.022 L1591 686.022 L1591.56 686.022 L1592.12 686.022 L1592.68 686.022 L1593.24 686.022 L1593.8 686.022 L1594.36 686.022 L1594.92 686.022 L1595.47 686.022 L1596.03 686.022 L1596.59 686.022 L1597.15 686.022 L1597.71 686.022 L1598.27 686.022 L1598.83 686.022 L1599.39 686.022 L1599.95 686.022 L1600.51 686.022 L1601.07 686.022 L1601.63 686.022 L1602.19 686.022 L1602.74 686.022 L1603.3 686.022 L1603.86 686.022 L1604.42 686.022 L1604.98 686.022 L1605.54 686.022 L1606.1 686.022 L1606.66 686.022 L1607.22 686.022 L1607.78 686.022 L1608.34 686.022 L1608.9 686.022 L1609.46 686.022 L1610.02 686.022 L1610.57 686.022 L1611.13 686.022 L1611.69 686.022 L1612.25 686.022 L1612.81 686.022 L1613.37 686.022 L1613.93 686.022 L1614.49 686.022 L1615.05 686.022 L1615.61 686.022 L1616.17 686.022 L1616.73 686.022 L1617.29 686.022 L1617.84 686.022 L1618.4 686.022 L1618.96 686.022 L1619.52 686.022 L1620.08 686.022 L1620.64 686.022 L1621.2 686.022 L1621.76 686.022 L1622.32 686.022 L1622.88 686.022 L1623.44 686.022 L1624 686.022 L1624.56 686.022 L1625.11 686.022 L1625.67 686.022 L1626.23 686.022 L1626.79 686.022 L1627.35 686.022 L1627.91 686.022 L1628.47 686.022 L1629.03 686.022 L1629.59 686.022 L1630.15 686.022 L1630.71 686.022 L1631.27 686.022 L1631.83 686.022 L1632.39 686.022 L1632.94 686.022 L1633.5 686.022 L1634.06 686.022 L1634.62 686.022 L1635.18 686.022 L1635.74 686.022 L1636.3 686.022 L1636.86 686.022 L1637.42 686.022 L1637.98 686.022 L1638.54 686.022 L1639.1 686.022 L1639.66 686.022 L1640.21 686.022 L1640.77 686.022 L1641.33 686.022 L1641.89 686.022 L1642.45 686.022 L1643.01 686.022 L1643.57 686.022 L1644.13 686.022 L1644.69 686.022 L1645.25 686.022 L1645.81 686.022 L1646.37 686.022 L1646.93 686.022 L1647.48 686.022 L1648.04 686.022 L1648.6 686.022 L1649.16 686.022 L1649.72 686.022 L1650.28 686.022 L1650.84 686.022 L1651.4 686.022 L1651.96 686.022 L1652.52 686.022 L1653.08 686.022 L1653.64 686.022 L1654.2 686.022 L1654.76 686.022 L1655.31 686.022 L1655.87 686.022 L1656.43 686.022 L1656.99 686.022 L1657.55 686.022 L1658.11 686.022 L1658.67 686.022 L1659.23 686.022 L1659.79 686.022 L1660.35 686.022 L1660.91 686.022 L1661.47 686.022 L1662.03 686.022 L1662.58 686.022 L1663.14 686.022 L1663.7 686.022 L1664.26 686.022 L1664.82 686.022 L1665.38 686.022 L1665.94 686.022 L1666.5 686.022 L1667.06 686.022 L1667.62 686.022 L1668.18 686.022 L1668.74 686.022 L1669.3 686.022 L1669.85 686.022 L1670.41 686.022 L1670.97 686.022 L1671.53 686.022 L1672.09 686.022 L1672.65 686.022 L1673.21 686.022 L1673.77 686.022 L1674.33 686.022 L1674.89 686.022 L1675.45 686.022 L1676.01 686.022 L1676.57 686.022 L1677.13 686.022 L1677.68 686.022 L1678.24 686.022 L1678.8 686.022 L1679.36 686.022 L1679.92 686.022 L1680.48 686.022 L1681.04 686.022 L1681.6 686.022 L1682.16 686.022 L1682.72 686.022 L1683.28 686.022 L1683.84 686.022 L1684.4 686.022 L1684.95 686.022 L1685.51 686.022 L1686.07 686.022 L1686.63 686.022 L1687.19 686.022 L1687.75 686.022 L1688.31 686.022 L1688.87 686.022 L1689.43 686.022 L1689.99 686.022 L1690.55 686.022 L1691.11 686.022 L1691.67 686.022 L1692.23 686.022 L1692.78 686.022 L1693.34 686.022 L1693.9 686.022 L1694.46 686.022 L1695.02 686.022 L1695.58 686.022 L1696.14 686.022 L1696.7 686.022 L1697.26 686.022 L1697.82 686.022 L1698.38 686.022 L1698.94 686.022 L1699.5 686.022 L1700.05 686.022 L1700.61 686.022 L1701.17 686.022 L1701.73 686.022 L1702.29 686.022 L1702.85 686.022 L1703.41 686.022 L1703.97 686.022 L1704.53 686.022 L1705.09 686.022 L1705.65 686.022 L1706.21 686.022 L1706.77 686.022 L1707.32 686.022 L1707.88 686.022 L1708.44 686.022 L1709 686.022 L1709.56 686.022 L1710.12 686.022 L1710.68 686.022 L1711.24 686.022 L1711.8 686.022 L1712.36 686.022 L1712.92 686.022 L1713.48 686.022 L1714.04 686.022 L1714.6 686.022 L1715.15 686.022 L1715.71 686.022 L1716.27 686.022 L1716.83 686.022 L1717.39 686.022 L1717.95 686.022 L1718.51 686.022 L1719.07 686.022 L1719.63 686.022 L1720.19 686.022 L1720.75 686.022 L1721.31 686.022 L1721.87 686.022 L1722.42 686.022 L1722.98 686.022 L1723.54 686.022 L1724.1 686.022 L1724.66 686.022 L1725.22 686.022 L1725.78 686.022 L1726.34 686.022 L1726.9 686.022 L1727.46 686.022 L1728.02 686.022 L1728.58 686.022 L1729.14 686.022 L1729.69 686.022 L1730.25 686.022 L1730.81 686.022 L1731.37 686.022 L1731.93 686.022 L1732.49 686.022 L1733.05 686.022 L1733.61 686.022 L1734.17 686.022 L1734.73 686.022 L1735.29 686.022 L1735.85 686.022 L1736.41 686.022 L1736.97 686.022 L1737.52 686.022 L1738.08 686.022 L1738.64 686.022 L1739.2 686.022 L1739.76 686.022 L1740.32 686.022 L1740.88 686.022 L1741.44 686.022 L1742 686.022 L1742.56 686.022 L1743.12 686.022 L1743.68 686.022 L1744.24 686.022 L1744.79 686.022 L1745.35 686.022 L1745.91 686.022 L1746.47 686.022 L1747.03 686.022 L1747.59 686.022 L1748.15 686.022 L1748.71 686.022 L1749.27 686.022 L1749.83 686.022 L1750.39 686.022 L1750.95 686.022 L1751.51 686.022 L1752.06 686.022 L1752.62 686.022 L1753.18 686.022 L1753.74 686.022 L1754.3 686.022 L1754.86 686.022 L1755.42 686.022 L1755.98 686.022 L1756.54 686.022 L1757.1 686.022 L1757.66 686.022 L1758.22 686.022 L1758.78 686.022 L1759.34 686.022 L1759.89 686.022 L1760.45 686.022 L1761.01 686.022 L1761.57 686.022 L1762.13 686.022 L1762.69 686.022 L1763.25 686.022 L1763.81 686.022 L1764.37 686.022 L1764.93 686.022 L1765.49 686.022 L1766.05 686.022 L1766.61 686.022 L1767.16 686.022 L1767.72 686.022 L1768.28 686.022 L1768.84 686.022 L1769.4 686.022 L1769.96 686.022 L1770.52 686.022 L1771.08 686.022 L1771.64 686.022 L1772.2 686.022 L1772.76 686.022 L1773.32 686.022 L1773.88 686.022 L1774.43 686.022 L1774.99 686.022 L1775.55 686.022 L1776.11 686.022 L1776.67 686.022 L1777.23 686.022 L1777.79 686.022 L1778.35 686.022 L1778.91 686.022 L1779.47 686.022 L1780.03 686.022 L1780.59 686.022 L1781.15 686.022 L1781.71 686.022 L1782.26 686.022 L1782.82 686.022 L1783.38 686.022 L1783.94 686.022 L1784.5 686.022 L1785.06 686.022 L1785.62 686.022 L1786.18 686.022 L1786.74 686.022 L1787.3 686.022 L1787.86 686.022 L1788.42 686.022 L1788.98 686.022 L1789.53 686.022 L1790.09 686.022 L1790.65 686.022 L1791.21 686.022 L1791.77 686.022 L1792.33 686.022 L1792.89 686.022 L1793.45 686.022 L1794.01 686.022 L1794.57 686.022 L1795.13 686.022 L1795.69 686.022 L1796.25 686.022 L1796.8 686.022 L1797.36 686.022 L1797.92 686.022 L1798.48 686.022 L1799.04 686.022 L1799.6 686.022 L1800.16 686.022 L1800.72 686.022 L1801.28 686.022 L1801.84 686.022 L1802.4 686.022 L1802.96 686.022 L1803.52 686.022 L1804.08 686.022 L1804.63 686.022 L1805.19 686.022 L1805.75 686.022 L1806.31 686.022 L1806.87 686.022 L1807.43 686.022 L1807.99 686.022 L1808.55 686.022 L1809.11 686.022 L1809.67 686.022 L1810.23 686.022 L1810.79 686.022 L1811.35 686.022 L1811.9 686.022 L1812.46 686.022 L1813.02 686.022 L1813.58 686.022 L1814.14 686.022 L1814.7 686.022 L1815.26 686.022 L1815.82 686.022 L1816.38 686.022 L1816.94 686.022 L1817.5 686.022 L1818.06 686.022 L1818.62 686.022 L1819.18 686.022 L1819.73 686.022 L1820.29 686.022 L1820.85 686.022 L1821.41 686.022 L1821.97 686.022 L1822.53 686.022 L1823.09 686.022 L1823.65 686.022 L1824.21 686.022 L1824.77 686.022 L1825.33 686.022 L1825.89 686.022 L1826.45 686.022 L1827 686.022 L1827.56 686.022 L1828.12 686.022 L1828.68 686.022 L1829.24 686.022 L1829.8 686.022 L1830.36 686.022 L1830.92 686.022 L1831.48 686.022 L1832.04 686.022 L1832.6 686.022 L1833.16 686.022 L1833.72 686.022 L1834.27 686.022 L1834.83 686.022 L1835.39 686.022 L1835.95 686.022 L1836.51 686.022 L1837.07 686.022 L1837.63 686.022 L1838.19 686.022 L1838.19 682.599 L1837.63 682.599 L1837.07 682.599 L1836.51 682.599 L1835.95 682.599 L1835.39 682.599 L1834.83 682.599 L1834.27 682.599 L1833.72 682.599 L1833.16 682.599 L1832.6 682.599 L1832.04 682.599 L1831.48 682.599 L1830.92 682.599 L1830.36 682.599 L1829.8 682.599 L1829.24 682.599 L1828.68 682.599 L1828.12 682.599 L1827.56 682.599 L1827 682.599 L1826.45 682.599 L1825.89 682.599 L1825.33 682.599 L1824.77 682.599 L1824.21 682.599 L1823.65 682.599 L1823.09 682.599 L1822.53 682.599 L1821.97 682.599 L1821.41 682.599 L1820.85 682.599 L1820.29 682.599 L1819.73 682.599 L1819.18 682.599 L1818.62 682.599 L1818.06 682.599 L1817.5 682.599 L1816.94 682.599 L1816.38 682.599 L1815.82 682.599 L1815.26 682.599 L1814.7 682.599 L1814.14 682.599 L1813.58 682.599 L1813.02 682.599 L1812.46 682.599 L1811.9 682.599 L1811.35 682.599 L1810.79 682.599 L1810.23 682.599 L1809.67 682.599 L1809.11 682.599 L1808.55 682.599 L1807.99 682.599 L1807.43 682.599 L1806.87 682.599 L1806.31 682.599 L1805.75 682.599 L1805.19 682.599 L1804.63 682.599 L1804.08 682.599 L1803.52 682.599 L1802.96 682.599 L1802.4 682.599 L1801.84 682.599 L1801.28 682.599 L1800.72 682.599 L1800.16 682.599 L1799.6 682.599 L1799.04 682.599 L1798.48 682.599 L1797.92 682.599 L1797.36 682.599 L1796.8 682.599 L1796.25 682.599 L1795.69 682.599 L1795.13 682.599 L1794.57 682.599 L1794.01 682.599 L1793.45 682.599 L1792.89 682.599 L1792.33 682.599 L1791.77 682.599 L1791.21 682.599 L1790.65 682.599 L1790.09 682.599 L1789.53 682.599 L1788.98 682.599 L1788.42 682.599 L1787.86 682.599 L1787.3 682.599 L1786.74 682.599 L1786.18 682.599 L1785.62 682.599 L1785.06 682.599 L1784.5 682.599 L1783.94 682.599 L1783.38 682.599 L1782.82 682.599 L1782.26 682.599 L1781.71 682.599 L1781.15 682.599 L1780.59 682.599 L1780.03 682.599 L1779.47 682.599 L1778.91 682.599 L1778.35 682.599 L1777.79 682.599 L1777.23 682.599 L1776.67 682.599 L1776.11 682.599 L1775.55 682.599 L1774.99 682.599 L1774.43 682.599 L1773.88 682.599 L1773.32 682.599 L1772.76 682.599 L1772.2 682.599 L1771.64 682.599 L1771.08 682.599 L1770.52 682.599 L1769.96 682.599 L1769.4 682.599 L1768.84 682.599 L1768.28 682.599 L1767.72 682.599 L1767.16 682.599 L1766.61 682.599 L1766.05 682.599 L1765.49 682.599 L1764.93 682.599 L1764.37 682.599 L1763.81 682.599 L1763.25 682.599 L1762.69 682.599 L1762.13 682.599 L1761.57 682.599 L1761.01 682.599 L1760.45 682.599 L1759.89 682.599 L1759.34 682.599 L1758.78 682.599 L1758.22 682.599 L1757.66 682.599 L1757.1 682.599 L1756.54 682.599 L1755.98 682.599 L1755.42 682.599 L1754.86 682.599 L1754.3 682.599 L1753.74 682.599 L1753.18 682.599 L1752.62 682.599 L1752.06 682.599 L1751.51 682.599 L1750.95 682.599 L1750.39 682.599 L1749.83 682.599 L1749.27 682.599 L1748.71 682.599 L1748.15 682.599 L1747.59 682.599 L1747.03 682.599 L1746.47 682.599 L1745.91 682.599 L1745.35 682.599 L1744.79 682.599 L1744.24 682.599 L1743.68 682.599 L1743.12 682.599 L1742.56 682.599 L1742 682.599 L1741.44 682.599 L1740.88 682.599 L1740.32 682.599 L1739.76 682.599 L1739.2 682.599 L1738.64 682.599 L1738.08 682.599 L1737.52 682.599 L1736.97 682.599 L1736.41 682.599 L1735.85 682.599 L1735.29 682.599 L1734.73 682.599 L1734.17 682.599 L1733.61 682.599 L1733.05 682.599 L1732.49 682.599 L1731.93 682.599 L1731.37 682.599 L1730.81 682.599 L1730.25 682.599 L1729.69 682.599 L1729.14 682.599 L1728.58 682.599 L1728.02 682.599 L1727.46 682.599 L1726.9 682.599 L1726.34 682.599 L1725.78 682.599 L1725.22 682.599 L1724.66 682.599 L1724.1 682.599 L1723.54 682.599 L1722.98 682.599 L1722.42 682.599 L1721.87 682.599 L1721.31 682.599 L1720.75 682.599 L1720.19 682.599 L1719.63 682.599 L1719.07 682.599 L1718.51 682.599 L1717.95 682.599 L1717.39 682.599 L1716.83 682.599 L1716.27 682.599 L1715.71 682.599 L1715.15 682.599 L1714.6 682.599 L1714.04 682.599 L1713.48 682.599 L1712.92 682.599 L1712.36 682.599 L1711.8 682.599 L1711.24 682.599 L1710.68 682.599 L1710.12 682.599 L1709.56 682.599 L1709 682.599 L1708.44 682.599 L1707.88 682.599 L1707.32 682.599 L1706.77 682.599 L1706.21 682.599 L1705.65 682.599 L1705.09 682.599 L1704.53 682.599 L1703.97 682.599 L1703.41 682.599 L1702.85 682.599 L1702.29 682.599 L1701.73 682.599 L1701.17 682.599 L1700.61 682.599 L1700.05 682.599 L1699.5 682.599 L1698.94 682.599 L1698.38 682.599 L1697.82 682.599 L1697.26 682.599 L1696.7 682.599 L1696.14 682.599 L1695.58 682.599 L1695.02 682.599 L1694.46 682.599 L1693.9 682.599 L1693.34 682.599 L1692.78 682.599 L1692.23 682.599 L1691.67 682.599 L1691.11 682.599 L1690.55 682.599 L1689.99 682.599 L1689.43 682.599 L1688.87 682.599 L1688.31 682.599 L1687.75 682.599 L1687.19 682.599 L1686.63 682.599 L1686.07 682.599 L1685.51 682.599 L1684.95 682.599 L1684.4 682.599 L1683.84 682.599 L1683.28 682.599 L1682.72 682.599 L1682.16 682.599 L1681.6 682.599 L1681.04 682.599 L1680.48 682.599 L1679.92 682.599 L1679.36 682.599 L1678.8 682.599 L1678.24 682.599 L1677.68 682.599 L1677.13 682.599 L1676.57 682.599 L1676.01 682.599 L1675.45 682.599 L1674.89 682.599 L1674.33 682.599 L1673.77 682.599 L1673.21 682.599 L1672.65 682.599 L1672.09 682.599 L1671.53 682.599 L1670.97 682.599 L1670.41 682.599 L1669.85 682.599 L1669.3 682.599 L1668.74 682.599 L1668.18 682.599 L1667.62 682.599 L1667.06 682.599 L1666.5 682.599 L1665.94 682.599 L1665.38 682.599 L1664.82 682.599 L1664.26 682.599 L1663.7 682.599 L1663.14 682.599 L1662.58 682.599 L1662.03 682.599 L1661.47 682.599 L1660.91 682.599 L1660.35 682.599 L1659.79 682.599 L1659.23 682.599 L1658.67 682.599 L1658.11 682.599 L1657.55 682.599 L1656.99 682.599 L1656.43 682.599 L1655.87 682.599 L1655.31 682.599 L1654.76 682.599 L1654.2 682.599 L1653.64 682.599 L1653.08 682.599 L1652.52 682.599 L1651.96 682.599 L1651.4 682.599 L1650.84 682.599 L1650.28 682.599 L1649.72 682.599 L1649.16 682.599 L1648.6 682.599 L1648.04 682.599 L1647.48 682.599 L1646.93 682.599 L1646.37 682.599 L1645.81 682.599 L1645.25 682.599 L1644.69 682.599 L1644.13 682.599 L1643.57 682.599 L1643.01 682.599 L1642.45 682.599 L1641.89 682.599 L1641.33 682.599 L1640.77 682.599 L1640.21 682.599 L1639.66 682.599 L1639.1 682.599 L1638.54 682.599 L1637.98 682.599 L1637.42 682.599 L1636.86 682.599 L1636.3 682.599 L1635.74 682.599 L1635.18 682.599 L1634.62 682.599 L1634.06 682.599 L1633.5 682.599 L1632.94 682.599 L1632.39 682.599 L1631.83 682.599 L1631.27 682.599 L1630.71 682.599 L1630.15 682.599 L1629.59 682.599 L1629.03 682.599 L1628.47 682.599 L1627.91 682.599 L1627.35 682.599 L1626.79 682.599 L1626.23 682.599 L1625.67 682.599 L1625.11 682.599 L1624.56 682.599 L1624 682.599 L1623.44 682.599 L1622.88 682.599 L1622.32 682.599 L1621.76 682.599 L1621.2 682.599 L1620.64 682.599 L1620.08 682.599 L1619.52 682.599 L1618.96 682.599 L1618.4 682.599 L1617.84 682.599 L1617.29 682.599 L1616.73 682.599 L1616.17 682.599 L1615.61 682.599 L1615.05 682.599 L1614.49 682.599 L1613.93 682.599 L1613.37 682.599 L1612.81 682.599 L1612.25 682.599 L1611.69 682.599 L1611.13 682.599 L1610.57 682.599 L1610.02 682.599 L1609.46 682.599 L1608.9 682.599 L1608.34 682.599 L1607.78 682.599 L1607.22 682.599 L1606.66 682.599 L1606.1 682.599 L1605.54 682.599 L1604.98 682.599 L1604.42 682.599 L1603.86 682.599 L1603.3 682.599 L1602.74 682.599 L1602.19 682.599 L1601.63 682.599 L1601.07 682.599 L1600.51 682.599 L1599.95 682.599 L1599.39 682.599 L1598.83 682.599 L1598.27 682.599 L1597.71 682.599 L1597.15 682.599 L1596.59 682.599 L1596.03 682.599 L1595.47 682.599 L1594.92 682.599 L1594.36 682.599 L1593.8 682.599 L1593.24 682.599 L1592.68 682.599 L1592.12 682.599 L1591.56 682.599 L1591 682.599 L1590.44 682.599 L1589.88 682.599 L1589.32 682.599 L1588.76 682.599 L1588.2 682.599 L1587.65 682.599 L1587.09 682.599 L1586.53 682.599 L1585.97 682.599 L1585.41 682.599 L1584.85 682.599 L1584.29 682.599 L1583.73 682.599 L1583.17 682.599 L1582.61 682.599 L1582.05 682.599 L1581.49 682.599 L1580.93 682.599 L1580.37 682.599 L1579.82 682.599 L1579.26 682.599 L1578.7 682.599 L1578.14 682.599 L1577.58 682.599 L1577.02 682.599 L1576.46 682.599 L1575.9 682.599 L1575.34 682.599 L1574.78 682.599 L1574.22 682.599 L1573.66 682.599 L1573.1 682.599 L1572.55 682.599 L1571.99 682.599 L1571.43 682.599 L1570.87 682.599 L1570.31 682.599 L1569.75 682.599 L1569.19 682.599 L1568.63 682.599 L1568.07 682.599 L1567.51 682.599 L1566.95 682.599 L1566.39 682.599 L1565.83 682.599 L1565.28 682.599 L1564.72 682.599 L1564.16 682.599 L1563.6 682.599 L1563.04 682.599 L1562.48 682.599 L1561.92 682.599 L1561.36 682.599 L1560.8 682.599 L1560.24 682.599 L1559.68 682.599 L1559.12 682.599 L1558.56 682.599 L1558 682.599 L1557.45 682.599 L1556.89 682.599 L1556.33 682.599 L1555.77 682.599 L1555.21 682.599 L1554.65 682.599 L1554.09 682.599 L1553.53 682.599 L1552.97 682.599 L1552.41 682.599 L1551.85 682.599 L1551.29 682.599 L1550.73 682.599 L1550.18 682.599 L1549.62 682.599 L1549.06 682.599 L1548.5 682.599 L1547.94 682.599 L1547.38 682.599 L1546.82 682.599 L1546.26 682.599 L1545.7 682.599 L1545.14 682.599 L1544.58 682.599 L1544.02 682.599 L1543.46 682.599 L1542.9 682.599 L1542.35 682.599 L1541.79 682.599 L1541.23 682.599 L1540.67 682.599 L1540.11 682.599 L1539.55 682.599 L1538.99 682.599 L1538.43 682.599 L1537.87 682.599 L1537.31 682.599 L1536.75 682.599 L1536.19 682.599 L1535.63 682.599 L1535.08 682.599 L1534.52 682.599 L1533.96 682.599 L1533.4 682.599 L1532.84 682.599 L1532.28 682.599 L1531.72 682.599 L1531.16 682.599 L1530.6 682.599 L1530.04 682.599 L1529.48 682.599 L1528.92 682.599 L1528.36 682.599 L1527.81 682.599 L1527.25 682.599 L1526.69 682.599 L1526.13 682.599 L1525.57 682.599 L1525.01 682.599 L1524.45 682.599 L1523.89 682.599 L1523.33 682.599 L1522.77 682.599 L1522.21 682.599 L1521.65 682.599 L1521.09 682.599 L1520.53 682.599 L1519.98 682.599 L1519.42 682.599 L1518.86 682.599 L1518.3 682.599 L1517.74 682.599 L1517.18 682.599 L1516.62 682.599 L1516.06 682.599 L1515.5 682.599 L1514.94 682.599 L1514.38 682.599 L1513.82 682.599 L1513.26 682.599 L1512.71 682.599 L1512.15 682.599 L1511.59 682.599 L1511.03 682.599 L1510.47 682.599 L1509.91 682.599 L1509.35 682.599 L1508.79 682.599 L1508.23 682.599 L1507.67 682.599 L1507.11 682.599 L1506.55 682.599 L1505.99 682.599 L1505.44 682.599 L1504.88 682.599 L1504.32 682.599 L1503.76 682.599 L1503.2 682.599 L1502.64 682.599 L1502.08 682.599 L1501.52 682.599 L1500.96 682.599 L1500.4 682.599 L1499.84 682.599 L1499.28 682.599 L1498.72 682.599 L1498.16 682.599 L1497.61 682.599 L1497.05 682.599 L1496.49 682.599 L1495.93 682.599 L1495.37 682.599 L1494.81 682.599 L1494.25 682.599 L1493.69 682.599 L1493.13 682.599 L1492.57 682.599 L1492.01 682.599 L1491.45 682.599 L1490.89 682.599 L1490.34 682.599 L1489.78 682.599 L1489.22 682.599 L1488.66 682.599 L1488.1 682.599 L1487.54 682.599 L1486.98 682.599 L1486.42 682.599 L1485.86 682.599 L1485.3 682.599 L1484.74 682.599 L1484.18 682.599 L1483.62 682.599 L1483.07 682.599 L1482.51 682.599 L1481.95 682.599 L1481.39 682.599 L1480.83 682.599 L1480.27 682.599 L1479.71 682.599 L1479.15 682.599 L1478.59 682.599 L1478.03 682.599 L1477.47 682.599 L1476.91 682.599 L1476.35 682.599 L1475.79 682.599 L1475.24 682.599 L1474.68 682.599 L1474.12 682.599 L1473.56 682.599 L1473 682.599 L1472.44 682.599 L1471.88 682.599 L1471.32 682.599 L1470.76 682.599 L1470.2 682.599 L1469.64 682.599 L1469.08 682.599 L1468.52 682.599 L1467.97 682.599 L1467.41 682.599 L1466.85 682.599 L1466.29 682.599 L1465.73 682.599 L1465.17 682.599 L1464.61 682.599 L1464.05 682.599 L1463.49 682.599 L1462.93 682.599 L1462.37 682.599 L1461.81 682.599 L1461.25 682.599 L1460.7 682.599 L1460.14 682.599 L1459.58 682.599 L1459.02 682.599 L1458.46 682.599 L1457.9 682.599 L1457.34 682.599 L1456.78 682.599 L1456.22 682.599 L1455.66 682.599 L1455.1 682.599 L1454.54 682.599 L1453.98 682.599 L1453.42 682.599 L1452.87 682.599 L1452.31 682.599 L1451.75 682.599 L1451.19 682.599 L1450.63 682.599 L1450.07 682.599 L1449.51 682.599 L1448.95 682.599 L1448.39 682.599 L1447.83 682.599 L1447.27 682.599 L1446.71 682.599 L1446.15 682.599 L1445.6 682.599 L1445.04 682.599 L1444.48 682.599 L1443.92 682.599 L1443.36 682.599 L1442.8 682.599 L1442.24 682.599 L1441.68 682.599 L1441.12 682.599 L1440.56 682.599 L1440 682.599 L1439.44 682.599 L1438.88 682.599 L1438.33 682.599 L1437.77 682.599 L1437.21 682.599 L1436.65 682.599 L1436.09 682.599 L1435.53 682.599 L1434.97 682.599 L1434.41 682.599 L1433.85 682.599 L1433.29 682.599 L1432.73 682.599 L1432.17 682.599 L1431.61 682.599 L1431.05 682.599 L1430.5 682.599 L1429.94 682.599 L1429.38 682.599 L1428.82 682.599 L1428.26 682.599 L1427.7 682.599 L1427.14 682.599 L1426.58 682.599 L1426.02 682.599 L1425.46 682.599 L1424.9 682.599 L1424.34 682.599 L1423.78 682.599 L1423.23 682.599 L1422.67 682.599 L1422.11 682.599 L1421.55 682.599 L1420.99 682.599 L1420.43 682.599 L1419.87 682.599 L1419.31 682.599 L1418.75 682.599 L1418.19 682.599 L1417.63 682.599 L1417.07 682.599 L1416.51 682.599 L1415.95 682.599 L1415.4 682.599 L1414.84 682.599 L1414.28 682.599 L1413.72 682.599 L1413.16 682.599 L1412.6 682.599 L1412.04 682.599 L1411.48 682.599 L1410.92 682.599 L1410.36 682.599 L1409.8 682.599 L1409.24 682.599 L1408.68 682.599 L1408.13 682.599 L1407.57 682.599 L1407.01 682.599 L1406.45 682.599 L1405.89 682.599 L1405.33 682.599 L1404.77 682.599 L1404.21 682.599 L1403.65 682.599 L1403.09 682.599 L1402.53 682.599 L1401.97 682.599 L1401.41 682.599 L1400.86 682.599 L1400.3 682.599 L1399.74 682.599 L1399.18 682.599 L1398.62 682.599 L1398.06 682.599 L1397.5 682.599 L1396.94 682.599 L1396.38 682.599 L1395.82 682.599 L1395.26 682.599 L1394.7 682.599 L1394.14 682.599 L1393.58 682.599 L1393.03 682.599 L1392.47 682.599 L1391.91 682.599 L1391.35 682.599 L1390.79 682.599 L1390.23 682.599 L1389.67 682.599 L1389.11 682.599 L1388.55 682.599 L1387.99 682.599 L1387.43 682.599 L1386.87 682.599 L1386.31 682.599 L1385.76 682.599 L1385.2 682.599 L1384.64 682.599 L1384.08 682.599 L1383.52 682.599 L1382.96 682.599 L1382.4 682.599 L1381.84 682.599 L1381.28 682.599 L1380.72 682.599 L1380.16 682.599 L1379.6 682.599 L1379.04 682.599 L1378.49 682.599 L1377.93 682.599 L1377.37 682.599 L1376.81 682.599 L1376.25 682.599 L1375.69 682.599 L1375.13 682.599 L1374.57 682.599 L1374.01 682.599 L1373.45 682.599 L1372.89 682.599 L1372.33 682.599 L1371.77 682.599 L1371.21 682.599 L1370.66 682.599 L1370.1 682.599 L1369.54 682.599 L1368.98 682.599 L1368.42 682.599 L1367.86 682.599 L1367.3 682.599 L1366.74 682.599 L1366.18 682.599 L1365.62 682.599 L1365.06 682.599 L1364.5 682.599 L1363.94 682.599 L1363.39 682.599 L1362.83 682.599 L1362.27 682.599 L1361.71 682.599 L1361.15 682.599 L1360.59 682.599 L1360.03 682.599 L1359.47 682.599 L1358.91 682.599 L1358.35 682.599 L1357.79 682.599 L1357.23 682.599 L1356.67 682.599 L1356.12 682.599 L1355.56 682.599 L1355 682.599 L1354.44 682.599 L1353.88 682.599 L1353.32 682.599 L1352.76 682.599 L1352.2 682.599 L1351.64 682.599 L1351.08 682.599 L1350.52 682.599 L1349.96 682.599 L1349.4 682.599 L1348.84 682.599 L1348.29 682.599 L1347.73 682.599 L1347.17 682.599 L1346.61 682.599 L1346.05 682.599 L1345.49 682.599 L1344.93 682.599 L1344.37 682.599 L1343.81 682.599 L1343.25 682.599 L1342.69 682.599 L1342.13 682.599 L1341.57 682.599 L1341.02 682.599 L1340.46 682.599 L1339.9 682.599 L1339.34 682.599 L1338.78 682.599 L1338.22 682.599 L1337.66 682.599 L1337.1 682.599 L1336.54 682.599 L1335.98 682.599 L1335.42 682.599 L1334.86 682.599 L1334.3 682.599 L1333.75 682.599 L1333.19 682.599 L1332.63 682.599 L1332.07 682.599 L1331.51 682.599 L1330.95 682.599 L1330.39 682.599 L1329.83 682.599 L1329.27 682.599 L1328.71 682.599 L1328.15 682.599 L1327.59 682.599 L1327.03 682.599 L1326.47 682.599 L1325.92 682.599 L1325.36 682.599 L1324.8 682.599 L1324.24 682.599 L1323.68 682.599 L1323.12 682.599 L1322.56 682.599 L1322 682.599 L1321.44 682.599 L1320.88 682.599 L1320.32 682.599 L1319.76 682.599 L1319.2 682.599 L1318.65 682.599 L1318.09 682.599 L1317.53 682.599 L1316.97 682.599 L1316.41 682.599 L1315.85 682.599 L1315.29 682.599 L1314.73 682.599 L1314.17 682.599 L1313.61 682.599 L1313.05 682.599 L1312.49 682.599 L1311.93 682.599 L1311.38 682.599 L1310.82 682.599 L1310.26 682.599 L1309.7 682.599 L1309.14 682.599 L1308.58 682.599 L1308.02 682.599 L1307.46 682.599 L1306.9 682.599 L1306.34 682.599 L1305.78 682.599 L1305.22 682.599 L1304.66 682.599 L1304.1 682.599 L1303.55 682.599 L1302.99 682.599 L1302.43 682.599 L1301.87 682.599 L1301.31 682.599 L1300.75 682.599 L1300.19 682.599 L1299.63 682.599 L1299.07 682.599 L1298.51 682.599 L1297.95 682.599 L1297.39 682.599 L1296.83 682.599 L1296.28 682.599 L1295.72 682.599 L1295.16 682.599 L1294.6 682.599 L1294.04 682.599 L1293.48 682.599 L1292.92 682.599 L1292.36 682.599 L1291.8 682.599 L1291.24 682.599 L1290.68 682.599 L1290.12 682.599 L1289.56 682.599 L1289 682.599 L1288.45 682.599 L1287.89 682.599 L1287.33 682.599 L1286.77 682.599 L1286.21 682.599 L1285.65 682.599 L1285.09 682.599 L1284.53 682.599 L1283.97 682.599 L1283.41 682.599 L1282.85 682.599 L1282.29 682.599 L1281.73 682.599 L1281.18 682.599 L1280.62 682.599 L1280.06 682.599 L1279.5 682.599 L1278.94 682.599 L1278.38 682.599 L1277.82 682.599 L1277.26 682.599 L1276.7 682.599 L1276.14 682.599 L1275.58 682.599 L1275.02 682.599 L1274.46 682.599 L1273.91 682.599 L1273.35 682.599 L1272.79 682.599 L1272.23 682.599 L1271.67 682.599 L1271.11 682.599 L1270.55 682.599 L1269.99 682.599 L1269.43 682.599 L1268.87 682.599 L1268.31 682.599 L1267.75 682.599 L1267.19 682.599 L1266.63 682.599 L1266.08 682.599 L1265.52 682.599 L1264.96 682.599 L1264.4 682.599 L1263.84 682.599 L1263.28 682.599 L1262.72 682.599 L1262.16 682.599 L1261.6 682.599 L1261.04 682.599 L1260.48 682.599 L1259.92 682.599 L1259.36 682.599 L1258.81 682.599 L1258.25 682.599 L1257.69 682.599 L1257.13 682.599 L1256.57 682.599 L1256.01 682.599 L1255.45 682.599 L1254.89 682.599 L1254.33 682.599 L1253.77 682.599 L1253.21 682.599 L1252.65 682.599 L1252.09 682.599 L1251.54 682.599 L1250.98 682.599 L1250.42 682.599 L1249.86 682.599 L1249.3 682.599 L1248.74 682.599 L1248.18 682.599 L1247.62 682.599 L1247.06 682.599 L1246.5 682.599 L1245.94 682.599 L1245.38 682.599 L1244.82 682.599 L1244.26 682.599 L1243.71 682.599 L1243.15 682.599 L1242.59 682.599 L1242.03 682.599 L1241.47 682.599 L1240.91 682.599 L1240.35 682.599 L1239.79 682.599 L1239.23 682.599 L1238.67 682.599 L1238.11 682.599 L1237.55 682.599 L1236.99 682.599 L1236.44 682.599 L1235.88 682.599 L1235.32 682.599 L1234.76 682.599 L1234.2 682.599 L1233.64 682.599 L1233.08 682.599 L1232.52 682.599 L1231.96 682.599 L1231.4 682.599 L1230.84 682.599 L1230.28 682.599 L1229.72 682.599 L1229.17 682.599 L1228.61 682.599 L1228.05 682.599 L1227.49 682.599 L1226.93 682.599 L1226.37 682.599 L1225.81 682.599 L1225.25 682.599 L1224.69 682.599 L1224.13 682.599 L1223.57 682.599 L1223.01 682.599 L1222.45 682.599 L1221.89 682.599 L1221.34 682.599 L1220.78 682.599 L1220.22 682.599 L1219.66 682.599 L1219.1 682.599 L1218.54 682.599 L1217.98 682.599 L1217.42 682.599 L1216.86 682.599 L1216.3 682.599 L1215.74 682.599 L1215.18 682.599 L1214.62 682.599 L1214.07 682.599 L1213.51 682.599 L1212.95 682.599 L1212.39 682.599 L1211.83 682.599 L1211.27 682.599 L1210.71 682.599 L1210.15 682.599 L1209.59 682.599 L1209.03 682.599 L1208.47 682.599 L1207.91 682.599 L1207.35 682.599 L1206.8 682.599 L1206.24 682.599 L1205.68 682.599 L1205.12 682.599 L1204.56 682.599 L1204 682.599 L1203.44 682.599 L1202.88 682.599 L1202.32 682.599 L1201.76 682.599 L1201.2 682.599 L1200.64 682.599 L1200.08 682.599 L1199.52 682.599 L1198.97 682.599 L1198.41 682.599 L1197.85 682.599 L1197.29 682.599 L1196.73 682.599 L1196.17 682.599 L1195.61 682.599 L1195.05 682.599 L1194.49 682.599 L1193.93 682.599 L1193.37 682.599 L1192.81 682.599 L1192.25 682.599 L1191.7 682.599 L1191.14 682.599 L1190.58 682.599 L1190.02 682.599 L1189.46 682.599 L1188.9 682.599 L1188.34 682.599 L1187.78 682.599 L1187.22 682.599 L1186.66 682.599 L1186.1 682.599 L1185.54 682.599 L1184.98 682.599 L1184.43 682.599 L1183.87 682.599 L1183.31 682.599 L1182.75 682.599 L1182.19 682.599 L1181.63 682.599 L1181.07 682.599 L1180.51 682.599 L1179.95 682.599 L1179.39 682.599 L1178.83 682.599 L1178.27 682.599 L1177.71 682.599 L1177.15 682.599 L1176.6 682.599 L1176.04 682.599 L1175.48 682.599 L1174.92 682.599 L1174.36 682.599 L1173.8 682.599 L1173.24 682.599 L1172.68 682.599 L1172.12 682.599 L1171.56 682.599 L1171 682.599 L1170.44 682.599 L1169.88 682.599 L1169.33 682.599 L1168.77 682.599 L1168.21 682.599 L1167.65 682.599 L1167.09 682.599 L1166.53 682.599 L1165.97 682.599 L1165.41 682.599 L1164.85 682.599 L1164.29 682.599 L1163.73 682.599 L1163.17 682.599 L1162.61 682.599 L1162.05 682.599 L1161.5 682.599 L1160.94 682.599 L1160.38 682.599 L1159.82 682.599 L1159.26 682.599 L1158.7 682.599 L1158.14 682.599 L1157.58 682.599 L1157.02 682.599 L1156.46 682.599 L1155.9 682.599 L1155.34 682.599 L1154.78 682.599 L1154.23 682.599 L1153.67 682.599 L1153.11 682.599 L1152.55 682.599 L1151.99 682.599 L1151.43 682.599 L1150.87 682.599 L1150.31 682.599 L1149.75 682.599 L1149.19 682.599 L1148.63 682.599 L1148.07 682.599 L1147.51 682.599 L1146.96 682.599 L1146.4 682.599 L1145.84 682.599 L1145.28 682.599 L1144.72 682.599 L1144.16 682.599 L1143.6 682.599 L1143.04 682.599 L1142.48 682.599 L1141.92 682.599 L1141.36 682.599 L1140.8 682.599 L1140.24 682.599 L1139.68 682.599 L1139.13 682.599 L1138.57 682.599 L1138.01 682.599 L1137.45 682.599 L1136.89 682.599 L1136.33 682.599 L1135.77 682.599 L1135.21 682.599 L1134.65 682.599 L1134.09 682.599 L1133.53 682.599 L1132.97 682.599 L1132.41 682.599 L1131.86 682.599 L1131.3 682.599 L1130.74 682.599 L1130.18 682.599 L1129.62 682.599 L1129.06 682.599 L1128.5 682.599 L1127.94 682.599 L1127.38 682.599 L1126.82 682.599 L1126.26 682.599 L1125.7 682.599 L1125.14 682.599 L1124.59 682.599 L1124.03 682.599 L1123.47 682.599 L1122.91 682.599 L1122.35 682.599 L1121.79 682.599 L1121.23 682.599 L1120.67 682.599 L1120.11 682.599 L1119.55 682.599 L1118.99 682.599 L1118.43 682.599 L1117.87 682.599 L1117.31 682.599 L1116.76 682.599 L1116.2 682.599 L1115.64 682.599 L1115.08 682.599 L1114.52 682.599 L1113.96 682.599 L1113.4 682.599 L1112.84 682.599 L1112.28 682.599 L1111.72 682.599 L1111.16 682.599 L1110.6 682.599 L1110.04 682.599 L1109.49 682.599 L1108.93 682.599 L1108.37 682.599 L1107.81 682.599 L1107.25 682.599 L1106.69 682.599 L1106.13 682.599 L1105.57 682.599 L1105.01 682.599 L1104.45 682.599 L1103.89 682.599 L1103.33 682.599 L1102.77 682.599 L1102.22 682.599 L1101.66 682.599 L1101.1 682.599 L1100.54 682.599 L1099.98 682.599 L1099.42 682.599 L1098.86 682.599 L1098.3 682.599 L1097.74 682.599 L1097.18 682.599 L1096.62 682.599 L1096.06 682.599 L1095.5 682.599 L1094.94 682.599 L1094.39 682.599 L1093.83 682.599 L1093.27 682.599 L1092.71 682.599 L1092.15 682.599 L1091.59 682.599 L1091.03 682.599 L1090.47 682.599 L1089.91 682.599 L1089.35 682.599 L1088.79 682.599 L1088.23 682.599 L1087.67 682.599 L1087.12 682.599 L1086.56 682.599 L1086 682.599 L1085.44 682.599 L1084.88 682.599 L1084.32 682.599 L1083.76 682.599 L1083.2 682.599 L1082.64 682.599 L1082.08 682.599 L1081.52 682.599 L1080.96 682.599 L1080.4 682.599 L1079.85 682.599 L1079.29 682.599 L1078.73 682.599 L1078.17 682.599 L1077.61 682.599 L1077.05 682.599 L1076.49 682.599 L1075.93 682.599 L1075.37 682.599 L1074.81 682.599 L1074.25 682.599 L1073.69 682.599 L1073.13 682.599 L1072.57 682.599 L1072.02 682.599 L1071.46 682.599 L1070.9 682.599 L1070.34 682.599 L1069.78 682.599 L1069.22 682.599 L1068.66 682.599 L1068.1 682.599 L1067.54 682.599 L1066.98 682.599 L1066.42 682.599 L1065.86 682.599 L1065.3 682.599 L1064.75 682.599 L1064.19 682.599 L1063.63 682.599 L1063.07 682.599 L1062.51 682.599 L1061.95 682.599 L1061.39 682.599 L1060.83 682.599 L1060.27 682.599 L1059.71 682.599 L1059.15 682.599 L1058.59 682.599 L1058.03 682.599 L1057.48 682.599 L1056.92 682.599 L1056.36 682.599 L1055.8 682.599 L1055.24 682.599 L1054.68 682.599 L1054.12 682.599 L1053.56 682.599 L1053 682.599 L1052.44 682.599 L1051.88 682.599 L1051.32 682.599 L1050.76 682.599 L1050.2 682.599 L1049.65 682.599 L1049.09 682.599 L1048.53 682.599 L1047.97 682.599 L1047.41 682.599 L1046.85 682.599 L1046.29 682.599 L1045.73 682.599 L1045.17 682.599 L1044.61 682.599 L1044.05 682.599 L1043.49 682.599 L1042.93 682.599 L1042.38 682.599 L1041.82 682.599 L1041.26 682.599 L1040.7 682.599 L1040.14 682.599 L1039.58 682.599 L1039.02 682.599 L1038.46 682.599 L1037.9 682.599 L1037.34 682.599 L1036.78 682.599 L1036.22 682.599 L1035.66 682.599 L1035.1 682.599 L1034.55 682.599 L1033.99 682.599 L1033.43 682.599 L1032.87 682.599 L1032.31 682.599 L1031.75 682.599 L1031.19 682.599 L1030.63 682.599 L1030.07 682.599 L1029.51 682.599 L1028.95 682.599 L1028.39 682.599 L1027.83 682.599 L1027.28 682.599 L1026.72 682.599 L1026.16 682.599 L1025.6 682.599 L1025.04 682.599 L1024.48 682.599 L1023.92 682.599 L1023.36 682.599 L1022.8 682.599 L1022.24 682.599 L1021.68 682.599 L1021.12 682.599 L1020.56 682.599 L1020.01 682.599 L1019.45 682.599 L1018.89 682.599 L1018.33 682.599 L1017.77 682.599 L1017.21 682.599 L1016.65 682.599 L1016.09 682.599 L1015.53 682.599 L1014.97 682.599 L1014.41 682.599 L1013.85 682.599 L1013.29 682.599 L1012.73 682.599 L1012.18 682.599 L1011.62 682.599 L1011.06 682.599 L1010.5 682.599 L1009.94 682.599 L1009.38 682.599 L1008.82 682.599 L1008.26 682.599 L1007.7 682.599 L1007.14 682.599 L1006.58 682.599 L1006.02 682.599 L1005.46 682.599 L1004.91 682.599 L1004.35 682.599 L1003.79 682.599 L1003.23 682.599 L1002.67 682.599 L1002.11 682.599 L1001.55 682.599 L1000.99 682.599 L1000.43 682.599 L999.872 682.599 L999.313 682.599 L998.754 682.599 L998.194 682.599 L997.635 682.599 L997.076 682.599 L996.517 682.599 L995.957 682.599 L995.398 682.599 L994.839 682.599 L994.28 682.599 L993.72 682.599 L993.161 682.599 L992.602 682.599 L992.043 682.599 L991.483 682.599 L990.924 682.599 L990.365 682.599 L989.806 682.599 L989.246 682.599 L988.687 682.599 L988.128 682.599 L987.569 682.599 L987.009 682.599 L986.45 682.599 L985.891 682.599 L985.332 682.599 L984.772 682.599 L984.213 682.599 L983.654 682.599 L983.095 682.599 L982.535 682.599 L981.976 682.599 L981.417 682.599 L980.858 682.599 L980.298 682.599 L979.739 682.599 L979.18 682.599 L978.621 682.599 L978.061 682.599 L977.502 682.599 L976.943 682.599 L976.384 682.599 L975.824 682.599 L975.265 682.599 L974.706 682.599 L974.147 682.599 L973.587 682.599 L973.028 682.599 L972.469 682.599 L971.91 682.599 L971.35 682.599 L970.791 682.599 L970.232 682.599 L969.673 682.599 L969.113 682.599 L968.554 682.599 L967.995 682.599 L967.436 682.599 L966.876 682.599 L966.317 682.599 L965.758 682.599 L965.199 682.599 L964.639 682.599 L964.08 682.599 L963.521 682.599 L962.962 682.599 L962.402 682.599 L961.843 682.599 L961.284 682.599 L960.725 682.599 L960.165 682.599 L959.606 682.599 L959.047 682.599 L958.488 682.599 L957.928 682.599 L957.369 682.599 L956.81 682.599 L956.251 682.599 L955.691 682.599 L955.132 682.599 L954.573 682.599 L954.014 682.599 L953.454 682.599 L952.895 682.599 L952.336 682.599 L951.777 682.599 L951.217 682.599 L950.658 682.599 L950.099 682.599 L949.54 682.599 L948.98 682.599 L948.421 682.599 L947.862 682.599 L947.303 682.599 L946.743 682.599 L946.184 682.599 L945.625 682.599 L945.066 682.599 L944.506 682.599 L943.947 682.599 L943.388 682.599 L942.829 682.599 L942.269 682.599 L941.71 682.599 L941.151 682.599 L940.592 682.599 L940.032 682.599 L939.473 682.599 L938.914 682.599 L938.355 682.599 L937.795 682.599 L937.236 682.599 L936.677 682.599 L936.118 682.599 L935.558 682.599 L934.999 682.599 L934.44 682.599 L933.881 682.599 L933.321 682.599 L932.762 682.599 L932.203 682.599 L931.644 682.599 L931.084 682.599 L930.525 682.599 L929.966 682.599 L929.406 682.599 L928.847 682.599 L928.288 682.599 L927.729 682.599 L927.169 682.599 L926.61 682.599 L926.051 682.599 L925.492 682.599 L924.932 682.599 L924.373 682.599 L923.814 682.599 L923.255 682.599 L922.695 682.599 L922.136 682.599 L921.577 682.599 L921.018 682.599 L920.458 682.599 L919.899 682.599 L919.34 682.599 L918.781 682.599 L918.221 682.599 L917.662 682.599 L917.103 682.599 L916.544 682.599 L915.984 682.599 L915.425 682.599 L914.866 682.599 L914.307 682.599 L913.747 682.599 L913.188 682.599 L912.629 682.599 L912.07 682.599 L911.51 682.599 L910.951 682.599 L910.392 682.599 L909.833 682.599 L909.273 682.599 L908.714 682.599 L908.155 682.599 L907.596 682.599 L907.036 682.599 L906.477 682.599 L905.918 682.599 L905.359 682.599 L904.799 682.599 L904.24 682.599 L903.681 682.599 L903.122 682.599 L902.562 682.599 L902.003 682.599 L901.444 682.599 L900.885 682.599 L900.325 682.599 L899.766 682.599 L899.207 682.599 L898.648 682.599 L898.088 682.599 L897.529 682.599 L896.97 682.599 L896.411 682.599 L895.851 682.599 L895.292 682.599 L894.733 682.599 L894.174 682.599 L893.614 682.599 L893.055 682.599 L892.496 682.599 L891.937 682.599 L891.377 682.599 L890.818 682.599 L890.259 682.599 L889.7 682.599 L889.14 682.599 L888.581 682.599 L888.022 682.599 L887.463 682.599 L886.903 682.599 L886.344 682.599 L885.785 682.599 L885.226 682.599 L884.666 682.599 L884.107 682.599 L883.548 682.599 L882.989 682.599 L882.429 682.599 L881.87 682.599 L881.311 682.599 L880.752 682.599 L880.192 682.599 L879.633 682.599 L879.074 682.599 L878.515 682.599 L877.955 682.599 L877.396 682.599 L876.837 682.599 L876.278 682.599 L875.718 682.599 L875.159 682.599 L874.6 682.599 L874.041 682.599 L873.481 682.599 L872.922 682.599 L872.363 682.599 L871.804 682.599 L871.244 682.599 L870.685 682.599 L870.126 682.599 L869.567 682.599 L869.007 682.599 L868.448 682.599 L867.889 682.599 L867.33 682.599 L866.77 682.599 L866.211 682.599 L865.652 682.599 L865.093 682.599 L864.533 682.599 L863.974 682.599 L863.415 682.599 L862.856 682.599 L862.296 682.599 L861.737 682.599 L861.178 682.599 L860.619 682.599 L860.059 682.599 L859.5 682.599 L858.941 682.599 L858.382 682.599 L857.822 682.599 L857.263 682.599 L856.704 682.599 L856.145 682.599 L855.585 682.599 L855.026 682.599 L854.467 682.599 L853.908 682.599 L853.348 682.599 L852.789 682.599 L852.23 682.599 L851.671 682.599 L851.111 682.599 L850.552 682.599 L849.993 682.599 L849.434 682.599 L848.874 682.599 L848.315 682.599 L847.756 682.599 L847.197 682.599 L846.637 682.599 L846.078 682.599 L845.519 682.599 L844.96 682.599 L844.4 682.599 L843.841 682.599 L843.282 682.599 L842.723 682.599 L842.163 682.599 L841.604 682.599 L841.045 682.599 L840.486 682.599 L839.926 682.599 L839.367 682.599 L838.808 682.599 L838.249 682.599 L837.689 682.599 L837.13 682.599 L836.571 682.599 L836.012 682.599 L835.452 682.599 L834.893 682.599 L834.334 682.599 L833.775 682.599 L833.215 682.599 L832.656 682.599 L832.097 682.599 L831.538 682.599 L830.978 682.599 L830.419 682.599 L829.86 682.599 L829.301 682.599 L828.741 682.599 L828.182 682.599 L827.623 682.599 L827.064 682.599 L826.504 682.599 L825.945 682.599 L825.386 682.599 L824.827 682.599 L824.267 682.599 L823.708 682.599 L823.149 682.599 L822.59 682.599 L822.03 682.599 L821.471 682.599 L820.912 682.599 L820.353 682.599 L819.793 682.599 L819.234 682.599 L818.675 682.599 L818.116 682.599 L817.556 682.599 L816.997 682.599 L816.438 682.599 L815.879 682.599 L815.319 682.599 L814.76 682.599 L814.201 682.599 L813.642 682.599 L813.082 682.599 L812.523 682.599 L811.964 682.599 L811.405 682.599 L810.845 682.599 L810.286 682.599 L809.727 682.599 L809.168 682.599 L808.608 682.599 L808.049 682.599 L807.49 682.599 L806.931 682.599 L806.371 682.599 L805.812 682.599 L805.253 682.599 L804.693 682.599 L804.134 682.599 L803.575 682.599 L803.016 682.599 L802.456 682.599 L801.897 682.599 L801.338 682.599 L800.779 682.599 L800.219 682.599 L799.66 682.599 L799.101 682.599 L798.542 682.599 L797.982 682.599 L797.423 682.599 L796.864 682.599 L796.305 682.599 L795.745 682.599 L795.186 682.599 L794.627 682.599 L794.068 682.599 L793.508 682.599 L792.949 682.599 L792.39 682.599 L791.831 682.599 L791.271 682.599 L790.712 682.599 L790.153 682.599 L789.594 682.599 L789.034 682.599 L788.475 682.599 L787.916 682.599 L787.357 682.599 L786.797 682.599 L786.238 682.599 L785.679 682.599 L785.12 682.599 L784.56 682.599 L784.001 682.599 L783.442 682.599 L782.883 682.599 L782.323 682.599 L781.764 682.599 L781.205 682.599 L780.646 682.599 L780.086 682.599 L779.527 682.599 L778.968 682.599 L778.409 682.599 L777.849 682.599 L777.29 682.599 L776.731 682.599 L776.172 682.599 L775.612 682.599 L775.053 682.599 L774.494 682.599 L773.935 682.599 L773.375 682.599 L772.816 682.599 L772.257 682.599 L771.698 682.599 L771.138 682.599 L770.579 682.599 L770.02 682.599 L769.461 682.599 L768.901 682.599 L768.342 682.599 L767.783 682.599 L767.224 682.599 L766.664 682.599 L766.105 682.599 L765.546 682.599 L764.987 682.599 L764.427 682.599 L763.868 682.599 L763.309 682.599 L762.75 682.599 L762.19 682.599 L761.631 682.599 L761.072 682.599 L760.513 682.599 L759.953 682.599 L759.394 682.599 L758.835 682.599 L758.276 682.599 L757.716 682.599 L757.157 682.599 L756.598 682.599 L756.039 682.599 L755.479 682.599 L754.92 682.599 L754.361 682.599 L753.802 682.599 L753.242 682.599 L752.683 682.599 L752.124 682.599 L751.565 682.599 L751.005 682.599 L750.446 682.599 L749.887 682.599 L749.328 682.599 L748.768 682.599 L748.209 682.599 L747.65 682.599 L747.091 682.599 L746.531 682.599 L745.972 682.599 L745.413 682.599 L744.854 682.599 L744.294 682.599 L743.735 682.599 L743.176 682.599 L742.617 682.599 L742.057 682.599 L741.498 682.599 L740.939 682.599 L740.38 682.599 L739.82 682.599 L739.261 682.599 L738.702 682.599 L738.143 682.599 L737.583 682.599 L737.024 682.599 L736.465 682.599 L735.906 682.599 L735.346 682.599 L734.787 682.599 L734.228 682.599 L733.669 682.599 L733.109 682.599 L732.55 682.599 L731.991 682.599 L731.432 682.599 L730.872 682.599 L730.313 682.599 L729.754 682.599 L729.195 682.599 L728.635 682.599 L728.076 682.599 L727.517 682.599 L726.958 682.599 L726.398 682.599 L725.839 682.599 L725.28 682.599 L724.721 682.599 L724.161 682.599 L723.602 682.599 L723.043 682.599 L722.484 682.599 L721.924 682.599 L721.365 682.599 L720.806 682.599 L720.247 682.599  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip743)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,684.33 720.806,684.33 721.365,684.33 721.924,684.33 722.484,684.33 723.043,684.33 723.602,684.33 724.161,684.33 724.721,684.33 725.28,684.33 725.839,684.33 726.398,684.33 726.958,684.33 727.517,684.33 728.076,684.33 728.635,684.33 729.195,684.33 729.754,684.33 730.313,684.33 730.872,684.33 731.432,684.33 731.991,684.33 732.55,684.33 733.109,684.33 733.669,684.33 734.228,684.33 734.787,684.33 735.346,684.33 735.906,684.33 736.465,684.33 737.024,684.33 737.583,684.33 738.143,684.33 738.702,684.33 739.261,684.33 739.82,684.33 740.38,684.33 740.939,684.33 741.498,684.33 742.057,684.33 742.617,684.33 743.176,684.33 743.735,684.33 744.294,684.33 744.854,684.33 745.413,684.33 745.972,684.33 746.531,684.33 747.091,684.33 747.65,684.33 748.209,684.33 748.768,684.33 749.328,684.33 749.887,684.33 750.446,684.33 751.005,684.33 751.565,684.33 752.124,684.33 752.683,684.33 753.242,684.33 753.802,684.33 754.361,684.33 754.92,684.33 755.479,684.33 756.039,684.33 756.598,684.33 757.157,684.33 757.716,684.33 758.276,684.33 758.835,684.33 759.394,684.33 759.953,684.33 760.513,684.33 761.072,684.33 761.631,684.33 762.19,684.33 762.75,684.33 763.309,684.33 763.868,684.33 764.427,684.33 764.987,684.33 765.546,684.33 766.105,684.33 766.664,684.33 767.224,684.33 767.783,684.33 768.342,684.33 768.901,684.33 769.461,684.33 770.02,684.33 770.579,684.33 771.138,684.33 771.698,684.33 772.257,684.33 772.816,684.33 773.375,684.33 773.935,684.33 774.494,684.33 775.053,684.33 775.612,684.33 776.172,684.33 776.731,684.33 777.29,684.33 777.849,684.33 778.409,684.33 778.968,684.33 779.527,684.33 780.086,684.33 780.646,684.33 781.205,684.33 781.764,684.33 782.323,684.33 782.883,684.33 783.442,684.33 784.001,684.33 784.56,684.33 785.12,684.33 785.679,684.33 786.238,684.33 786.797,684.33 787.357,684.33 787.916,684.33 788.475,684.33 789.034,684.33 789.594,684.33 790.153,684.33 790.712,684.33 791.271,684.33 791.831,684.33 792.39,684.33 792.949,684.33 793.508,684.33 794.068,684.33 794.627,684.33 795.186,684.33 795.745,684.33 796.305,684.33 796.864,684.33 797.423,684.33 797.982,684.33 798.542,684.33 799.101,684.33 799.66,684.33 800.219,684.33 800.779,684.33 801.338,684.33 801.897,684.33 802.456,684.33 803.016,684.33 803.575,684.33 804.134,684.33 804.693,684.33 805.253,684.33 805.812,684.33 806.371,684.33 806.931,684.33 807.49,684.33 808.049,684.33 808.608,684.33 809.168,684.33 809.727,684.33 810.286,684.33 810.845,684.33 811.405,684.33 811.964,684.33 812.523,684.33 813.082,684.33 813.642,684.33 814.201,684.33 814.76,684.33 815.319,684.33 815.879,684.33 816.438,684.33 816.997,684.33 817.556,684.33 818.116,684.33 818.675,684.33 819.234,684.33 819.793,684.33 820.353,684.33 820.912,684.33 821.471,684.33 822.03,684.33 822.59,684.33 823.149,684.33 823.708,684.33 824.267,684.33 824.827,684.33 825.386,684.33 825.945,684.33 826.504,684.33 827.064,684.33 827.623,684.33 828.182,684.33 828.741,684.33 829.301,684.33 829.86,684.33 830.419,684.33 830.978,684.33 831.538,684.33 832.097,684.33 832.656,684.33 833.215,684.33 833.775,684.33 834.334,684.33 834.893,684.33 835.452,684.33 836.012,684.33 836.571,684.33 837.13,684.33 837.689,684.33 838.249,684.33 838.808,684.33 839.367,684.33 839.926,684.33 840.486,684.33 841.045,684.33 841.604,684.33 842.163,684.33 842.723,684.33 843.282,684.33 843.841,684.33 844.4,684.33 844.96,684.33 845.519,684.33 846.078,684.33 846.637,684.33 847.197,684.33 847.756,684.33 848.315,684.33 848.874,684.33 849.434,684.33 849.993,684.33 850.552,684.33 851.111,684.33 851.671,684.33 852.23,684.33 852.789,684.33 853.348,684.33 853.908,684.33 854.467,684.33 855.026,684.33 855.585,684.33 856.145,684.33 856.704,684.33 857.263,684.33 857.822,684.33 858.382,684.33 858.941,684.33 859.5,684.33 860.059,684.33 860.619,684.33 861.178,684.33 861.737,684.33 862.296,684.33 862.856,684.33 863.415,684.33 863.974,684.33 864.533,684.33 865.093,684.33 865.652,684.33 866.211,684.33 866.77,684.33 867.33,684.33 867.889,684.33 868.448,684.33 869.007,684.33 869.567,684.33 870.126,684.33 870.685,684.33 871.244,684.33 871.804,684.33 872.363,684.33 872.922,684.33 873.481,684.33 874.041,684.33 874.6,684.33 875.159,684.33 875.718,684.33 876.278,684.33 876.837,684.33 877.396,684.33 877.955,684.33 878.515,684.33 879.074,684.33 879.633,684.33 880.192,684.33 880.752,684.33 881.311,684.33 881.87,684.33 882.429,684.33 882.989,684.33 883.548,684.33 884.107,684.33 884.666,684.33 885.226,684.33 885.785,684.33 886.344,684.33 886.903,684.33 887.463,684.33 888.022,684.33 888.581,684.33 889.14,684.33 889.7,684.33 890.259,684.33 890.818,684.33 891.377,684.33 891.937,684.33 892.496,684.33 893.055,684.33 893.614,684.33 894.174,684.33 894.733,684.33 895.292,684.33 895.851,684.33 896.411,684.33 896.97,684.33 897.529,684.33 898.088,684.33 898.648,684.33 899.207,684.33 899.766,684.33 900.325,684.33 900.885,684.33 901.444,684.33 902.003,684.33 902.562,684.33 903.122,684.33 903.681,684.33 904.24,684.33 904.799,684.33 905.359,684.33 905.918,684.33 906.477,684.33 907.036,684.33 907.596,684.33 908.155,684.33 908.714,684.33 909.273,684.33 909.833,684.33 910.392,684.33 910.951,684.33 911.51,684.33 912.07,684.33 912.629,684.33 913.188,684.33 913.747,684.33 914.307,684.33 914.866,684.33 915.425,684.33 915.984,684.33 916.544,684.33 917.103,684.33 917.662,684.33 918.221,684.33 918.781,684.33 919.34,684.33 919.899,684.33 920.458,684.33 921.018,684.33 921.577,684.33 922.136,684.33 922.695,684.33 923.255,684.33 923.814,684.33 924.373,684.33 924.932,684.33 925.492,684.33 926.051,684.33 926.61,684.33 927.169,684.33 927.729,684.33 928.288,684.33 928.847,684.33 929.406,684.33 929.966,684.33 930.525,684.33 931.084,684.33 931.644,684.33 932.203,684.33 932.762,684.33 933.321,684.33 933.881,684.33 934.44,684.33 934.999,684.33 935.558,684.33 936.118,684.33 936.677,684.33 937.236,684.33 937.795,684.33 938.355,684.33 938.914,684.33 939.473,684.33 940.032,684.33 940.592,684.33 941.151,684.33 941.71,684.33 942.269,684.33 942.829,684.33 943.388,684.33 943.947,684.33 944.506,684.33 945.066,684.33 945.625,684.33 946.184,684.33 946.743,684.33 947.303,684.33 947.862,684.33 948.421,684.33 948.98,684.33 949.54,684.33 950.099,684.33 950.658,684.33 951.217,684.33 951.777,684.33 952.336,684.33 952.895,684.33 953.454,684.33 954.014,684.33 954.573,684.33 955.132,684.33 955.691,684.33 956.251,684.33 956.81,684.33 957.369,684.33 957.928,684.33 958.488,684.33 959.047,684.33 959.606,684.33 960.165,684.33 960.725,684.33 961.284,684.33 961.843,684.33 962.402,684.33 962.962,684.33 963.521,684.33 964.08,684.33 964.639,684.33 965.199,684.33 965.758,684.33 966.317,684.33 966.876,684.33 967.436,684.33 967.995,684.33 968.554,684.33 969.113,684.33 969.673,684.33 970.232,684.33 970.791,684.33 971.35,684.33 971.91,684.33 972.469,684.33 973.028,684.33 973.587,684.33 974.147,684.33 974.706,684.33 975.265,684.33 975.824,684.33 976.384,684.33 976.943,684.33 977.502,684.33 978.061,684.33 978.621,684.33 979.18,684.33 979.739,684.33 980.298,684.33 980.858,684.33 981.417,684.33 981.976,684.33 982.535,684.33 983.095,684.33 983.654,684.33 984.213,684.33 984.772,684.33 985.332,684.33 985.891,684.33 986.45,684.33 987.009,684.33 987.569,684.33 988.128,684.33 988.687,684.33 989.246,684.33 989.806,684.33 990.365,684.33 990.924,684.33 991.483,684.33 992.043,684.33 992.602,684.33 993.161,684.33 993.72,684.33 994.28,684.33 994.839,684.33 995.398,684.33 995.957,684.33 996.517,684.33 997.076,684.33 997.635,684.33 998.194,684.33 998.754,684.33 999.313,684.33 999.872,684.33 1000.43,684.33 1000.99,684.33 1001.55,684.33 1002.11,684.33 1002.67,684.33 1003.23,684.33 1003.79,684.33 1004.35,684.33 1004.91,684.33 1005.46,684.33 1006.02,684.33 1006.58,684.33 1007.14,684.33 1007.7,684.33 1008.26,684.33 1008.82,684.33 1009.38,684.33 1009.94,684.33 1010.5,684.33 1011.06,684.33 1011.62,684.33 1012.18,684.33 1012.73,684.33 1013.29,684.33 1013.85,684.33 1014.41,684.33 1014.97,684.33 1015.53,684.33 1016.09,684.33 1016.65,684.33 1017.21,684.33 1017.77,684.33 1018.33,684.33 1018.89,684.33 1019.45,684.33 1020.01,684.33 1020.56,684.33 1021.12,684.33 1021.68,684.33 1022.24,684.33 1022.8,684.33 1023.36,684.33 1023.92,684.33 1024.48,684.33 1025.04,684.33 1025.6,684.33 1026.16,684.33 1026.72,684.33 1027.28,684.33 1027.83,684.33 1028.39,684.33 1028.95,684.33 1029.51,684.33 1030.07,684.33 1030.63,684.33 1031.19,684.33 1031.75,684.33 1032.31,684.33 1032.87,684.33 1033.43,684.33 1033.99,684.33 1034.55,684.33 1035.1,684.33 1035.66,684.33 1036.22,684.33 1036.78,684.33 1037.34,684.33 1037.9,684.33 1038.46,684.33 1039.02,684.33 1039.58,684.33 1040.14,684.33 1040.7,684.33 1041.26,684.33 1041.82,684.33 1042.38,684.33 1042.93,684.33 1043.49,684.33 1044.05,684.33 1044.61,684.33 1045.17,684.33 1045.73,684.33 1046.29,684.33 1046.85,684.33 1047.41,684.33 1047.97,684.33 1048.53,684.33 1049.09,684.33 1049.65,684.33 1050.2,684.33 1050.76,684.33 1051.32,684.33 1051.88,684.33 1052.44,684.33 1053,684.33 1053.56,684.33 1054.12,684.33 1054.68,684.33 1055.24,684.33 1055.8,684.33 1056.36,684.33 1056.92,684.33 1057.48,684.33 1058.03,684.33 1058.59,684.33 1059.15,684.33 1059.71,684.33 1060.27,684.33 1060.83,684.33 1061.39,684.33 1061.95,684.33 1062.51,684.33 1063.07,684.33 1063.63,684.33 1064.19,684.33 1064.75,684.33 1065.3,684.33 1065.86,684.33 1066.42,684.33 1066.98,684.33 1067.54,684.33 1068.1,684.33 1068.66,684.33 1069.22,684.33 1069.78,684.33 1070.34,684.33 1070.9,684.33 1071.46,684.33 1072.02,684.33 1072.57,684.33 1073.13,684.33 1073.69,684.33 1074.25,684.33 1074.81,684.33 1075.37,684.33 1075.93,684.33 1076.49,684.33 1077.05,684.33 1077.61,684.33 1078.17,684.33 1078.73,684.33 1079.29,684.33 1079.85,684.33 1080.4,684.33 1080.96,684.33 1081.52,684.33 1082.08,684.33 1082.64,684.33 1083.2,684.33 1083.76,684.33 1084.32,684.33 1084.88,684.33 1085.44,684.33 1086,684.33 1086.56,684.33 1087.12,684.33 1087.67,684.33 1088.23,684.33 1088.79,684.33 1089.35,684.33 1089.91,684.33 1090.47,684.33 1091.03,684.33 1091.59,684.33 1092.15,684.33 1092.71,684.33 1093.27,684.33 1093.83,684.33 1094.39,684.33 1094.94,684.33 1095.5,684.33 1096.06,684.33 1096.62,684.33 1097.18,684.33 1097.74,684.33 1098.3,684.33 1098.86,684.33 1099.42,684.33 1099.98,684.33 1100.54,684.33 1101.1,684.33 1101.66,684.33 1102.22,684.33 1102.77,684.33 1103.33,684.33 1103.89,684.33 1104.45,684.33 1105.01,684.33 1105.57,684.33 1106.13,684.33 1106.69,684.33 1107.25,684.33 1107.81,684.33 1108.37,684.33 1108.93,684.33 1109.49,684.33 1110.04,684.33 1110.6,684.33 1111.16,684.33 1111.72,684.33 1112.28,684.33 1112.84,684.33 1113.4,684.33 1113.96,684.33 1114.52,684.33 1115.08,684.33 1115.64,684.33 1116.2,684.33 1116.76,684.33 1117.31,684.33 1117.87,684.33 1118.43,684.33 1118.99,684.33 1119.55,684.33 1120.11,684.33 1120.67,684.33 1121.23,684.33 1121.79,684.33 1122.35,684.33 1122.91,684.33 1123.47,684.33 1124.03,684.33 1124.59,684.33 1125.14,684.33 1125.7,684.33 1126.26,684.33 1126.82,684.33 1127.38,684.33 1127.94,684.33 1128.5,684.33 1129.06,684.33 1129.62,684.33 1130.18,684.33 1130.74,684.33 1131.3,684.33 1131.86,684.33 1132.41,684.33 1132.97,684.33 1133.53,684.33 1134.09,684.33 1134.65,684.33 1135.21,684.33 1135.77,684.33 1136.33,684.33 1136.89,684.33 1137.45,684.33 1138.01,684.33 1138.57,684.33 1139.13,684.33 1139.68,684.33 1140.24,684.33 1140.8,684.33 1141.36,684.33 1141.92,684.33 1142.48,684.33 1143.04,684.33 1143.6,684.33 1144.16,684.33 1144.72,684.33 1145.28,684.33 1145.84,684.33 1146.4,684.33 1146.96,684.33 1147.51,684.33 1148.07,684.33 1148.63,684.33 1149.19,684.33 1149.75,684.33 1150.31,684.33 1150.87,684.33 1151.43,684.33 1151.99,684.33 1152.55,684.33 1153.11,684.33 1153.67,684.33 1154.23,684.33 1154.78,684.33 1155.34,684.33 1155.9,684.33 1156.46,684.33 1157.02,684.33 1157.58,684.33 1158.14,684.33 1158.7,684.33 1159.26,684.33 1159.82,684.33 1160.38,684.33 1160.94,684.33 1161.5,684.33 1162.05,684.33 1162.61,684.33 1163.17,684.33 1163.73,684.33 1164.29,684.33 1164.85,684.33 1165.41,684.33 1165.97,684.33 1166.53,684.33 1167.09,684.33 1167.65,684.33 1168.21,684.33 1168.77,684.33 1169.33,684.33 1169.88,684.33 1170.44,684.33 1171,684.33 1171.56,684.33 1172.12,684.33 1172.68,684.33 1173.24,684.33 1173.8,684.33 1174.36,684.33 1174.92,684.33 1175.48,684.33 1176.04,684.33 1176.6,684.33 1177.15,684.33 1177.71,684.33 1178.27,684.33 1178.83,684.33 1179.39,684.33 1179.95,684.33 1180.51,684.33 1181.07,684.33 1181.63,684.33 1182.19,684.33 1182.75,684.33 1183.31,684.33 1183.87,684.33 1184.43,684.33 1184.98,684.33 1185.54,684.33 1186.1,684.33 1186.66,684.33 1187.22,684.33 1187.78,684.33 1188.34,684.33 1188.9,684.33 1189.46,684.33 1190.02,684.33 1190.58,684.33 1191.14,684.33 1191.7,684.33 1192.25,684.33 1192.81,684.33 1193.37,684.33 1193.93,684.33 1194.49,684.33 1195.05,684.33 1195.61,684.33 1196.17,684.33 1196.73,684.33 1197.29,684.33 1197.85,684.33 1198.41,684.33 1198.97,684.33 1199.52,684.33 1200.08,684.33 1200.64,684.33 1201.2,684.33 1201.76,684.33 1202.32,684.33 1202.88,684.33 1203.44,684.33 1204,684.33 1204.56,684.33 1205.12,684.33 1205.68,684.33 1206.24,684.33 1206.8,684.33 1207.35,684.33 1207.91,684.33 1208.47,684.33 1209.03,684.33 1209.59,684.33 1210.15,684.33 1210.71,684.33 1211.27,684.33 1211.83,684.33 1212.39,684.33 1212.95,684.33 1213.51,684.33 1214.07,684.33 1214.62,684.33 1215.18,684.33 1215.74,684.33 1216.3,684.33 1216.86,684.33 1217.42,684.33 1217.98,684.33 1218.54,684.33 1219.1,684.33 1219.66,684.33 1220.22,684.33 1220.78,684.33 1221.34,684.33 1221.89,684.33 1222.45,684.33 1223.01,684.33 1223.57,684.33 1224.13,684.33 1224.69,684.33 1225.25,684.33 1225.81,684.33 1226.37,684.33 1226.93,684.33 1227.49,684.33 1228.05,684.33 1228.61,684.33 1229.17,684.33 1229.72,684.33 1230.28,684.33 1230.84,684.33 1231.4,684.33 1231.96,684.33 1232.52,684.33 1233.08,684.33 1233.64,684.33 1234.2,684.33 1234.76,684.33 1235.32,684.33 1235.88,684.33 1236.44,684.33 1236.99,684.33 1237.55,684.33 1238.11,684.33 1238.67,684.33 1239.23,684.33 1239.79,684.33 1240.35,684.33 1240.91,684.33 1241.47,684.33 1242.03,684.33 1242.59,684.33 1243.15,684.33 1243.71,684.33 1244.26,684.33 1244.82,684.33 1245.38,684.33 1245.94,684.33 1246.5,684.33 1247.06,684.33 1247.62,684.33 1248.18,684.33 1248.74,684.33 1249.3,684.33 1249.86,684.33 1250.42,684.33 1250.98,684.33 1251.54,684.33 1252.09,684.33 1252.65,684.33 1253.21,684.33 1253.77,684.33 1254.33,684.33 1254.89,684.33 1255.45,684.33 1256.01,684.33 1256.57,684.33 1257.13,684.33 1257.69,684.33 1258.25,684.33 1258.81,684.33 1259.36,684.33 1259.92,684.33 1260.48,684.33 1261.04,684.33 1261.6,684.33 1262.16,684.33 1262.72,684.33 1263.28,684.33 1263.84,684.33 1264.4,684.33 1264.96,684.33 1265.52,684.33 1266.08,684.33 1266.63,684.33 1267.19,684.33 1267.75,684.33 1268.31,684.33 1268.87,684.33 1269.43,684.33 1269.99,684.33 1270.55,684.33 1271.11,684.33 1271.67,684.33 1272.23,684.33 1272.79,684.33 1273.35,684.33 1273.91,684.33 1274.46,684.33 1275.02,684.33 1275.58,684.33 1276.14,684.33 1276.7,684.33 1277.26,684.33 1277.82,684.33 1278.38,684.33 1278.94,684.33 1279.5,684.33 1280.06,684.33 1280.62,684.33 1281.18,684.33 1281.73,684.33 1282.29,684.33 1282.85,684.33 1283.41,684.33 1283.97,684.33 1284.53,684.33 1285.09,684.33 1285.65,684.33 1286.21,684.33 1286.77,684.33 1287.33,684.33 1287.89,684.33 1288.45,684.33 1289,684.33 1289.56,684.33 1290.12,684.33 1290.68,684.33 1291.24,684.33 1291.8,684.33 1292.36,684.33 1292.92,684.33 1293.48,684.33 1294.04,684.33 1294.6,684.33 1295.16,684.33 1295.72,684.33 1296.28,684.33 1296.83,684.33 1297.39,684.33 1297.95,684.33 1298.51,684.33 1299.07,684.33 1299.63,684.33 1300.19,684.33 1300.75,684.33 1301.31,684.33 1301.87,684.33 1302.43,684.33 1302.99,684.33 1303.55,684.33 1304.1,684.33 1304.66,684.33 1305.22,684.33 1305.78,684.33 1306.34,684.33 1306.9,684.33 1307.46,684.33 1308.02,684.33 1308.58,684.33 1309.14,684.33 1309.7,684.33 1310.26,684.33 1310.82,684.33 1311.38,684.33 1311.93,684.33 1312.49,684.33 1313.05,684.33 1313.61,684.33 1314.17,684.33 1314.73,684.33 1315.29,684.33 1315.85,684.33 1316.41,684.33 1316.97,684.33 1317.53,684.33 1318.09,684.33 1318.65,684.33 1319.2,684.33 1319.76,684.33 1320.32,684.33 1320.88,684.33 1321.44,684.33 1322,684.33 1322.56,684.33 1323.12,684.33 1323.68,684.33 1324.24,684.33 1324.8,684.33 1325.36,684.33 1325.92,684.33 1326.47,684.33 1327.03,684.33 1327.59,684.33 1328.15,684.33 1328.71,684.33 1329.27,684.33 1329.83,684.33 1330.39,684.33 1330.95,684.33 1331.51,684.33 1332.07,684.33 1332.63,684.33 1333.19,684.33 1333.75,684.33 1334.3,684.33 1334.86,684.33 1335.42,684.33 1335.98,684.33 1336.54,684.33 1337.1,684.33 1337.66,684.33 1338.22,684.33 1338.78,684.33 1339.34,684.33 1339.9,684.33 1340.46,684.33 1341.02,684.33 1341.57,684.33 1342.13,684.33 1342.69,684.33 1343.25,684.33 1343.81,684.33 1344.37,684.33 1344.93,684.33 1345.49,684.33 1346.05,684.33 1346.61,684.33 1347.17,684.33 1347.73,684.33 1348.29,684.33 1348.84,684.33 1349.4,684.33 1349.96,684.33 1350.52,684.33 1351.08,684.33 1351.64,684.33 1352.2,684.33 1352.76,684.33 1353.32,684.33 1353.88,684.33 1354.44,684.33 1355,684.33 1355.56,684.33 1356.12,684.33 1356.67,684.33 1357.23,684.33 1357.79,684.33 1358.35,684.33 1358.91,684.33 1359.47,684.33 1360.03,684.33 1360.59,684.33 1361.15,684.33 1361.71,684.33 1362.27,684.33 1362.83,684.33 1363.39,684.33 1363.94,684.33 1364.5,684.33 1365.06,684.33 1365.62,684.33 1366.18,684.33 1366.74,684.33 1367.3,684.33 1367.86,684.33 1368.42,684.33 1368.98,684.33 1369.54,684.33 1370.1,684.33 1370.66,684.33 1371.21,684.33 1371.77,684.33 1372.33,684.33 1372.89,684.33 1373.45,684.33 1374.01,684.33 1374.57,684.33 1375.13,684.33 1375.69,684.33 1376.25,684.33 1376.81,684.33 1377.37,684.33 1377.93,684.33 1378.49,684.33 1379.04,684.33 1379.6,684.33 1380.16,684.33 1380.72,684.33 1381.28,684.33 1381.84,684.33 1382.4,684.33 1382.96,684.33 1383.52,684.33 1384.08,684.33 1384.64,684.33 1385.2,684.33 1385.76,684.33 1386.31,684.33 1386.87,684.33 1387.43,684.33 1387.99,684.33 1388.55,684.33 1389.11,684.33 1389.67,684.33 1390.23,684.33 1390.79,684.33 1391.35,684.33 1391.91,684.33 1392.47,684.33 1393.03,684.33 1393.58,684.33 1394.14,684.33 1394.7,684.33 1395.26,684.33 1395.82,684.33 1396.38,684.33 1396.94,684.33 1397.5,684.33 1398.06,684.33 1398.62,684.33 1399.18,684.33 1399.74,684.33 1400.3,684.33 1400.86,684.33 1401.41,684.33 1401.97,684.33 1402.53,684.33 1403.09,684.33 1403.65,684.33 1404.21,684.33 1404.77,684.33 1405.33,684.33 1405.89,684.33 1406.45,684.33 1407.01,684.33 1407.57,684.33 1408.13,684.33 1408.68,684.33 1409.24,684.33 1409.8,684.33 1410.36,684.33 1410.92,684.33 1411.48,684.33 1412.04,684.33 1412.6,684.33 1413.16,684.33 1413.72,684.33 1414.28,684.33 1414.84,684.33 1415.4,684.33 1415.95,684.33 1416.51,684.33 1417.07,684.33 1417.63,684.33 1418.19,684.33 1418.75,684.33 1419.31,684.33 1419.87,684.33 1420.43,684.33 1420.99,684.33 1421.55,684.33 1422.11,684.33 1422.67,684.33 1423.23,684.33 1423.78,684.33 1424.34,684.33 1424.9,684.33 1425.46,684.33 1426.02,684.33 1426.58,684.33 1427.14,684.33 1427.7,684.33 1428.26,684.33 1428.82,684.33 1429.38,684.33 1429.94,684.33 1430.5,684.33 1431.05,684.33 1431.61,684.33 1432.17,684.33 1432.73,684.33 1433.29,684.33 1433.85,684.33 1434.41,684.33 1434.97,684.33 1435.53,684.33 1436.09,684.33 1436.65,684.33 1437.21,684.33 1437.77,684.33 1438.33,684.33 1438.88,684.33 1439.44,684.33 1440,684.33 1440.56,684.33 1441.12,684.33 1441.68,684.33 1442.24,684.33 1442.8,684.33 1443.36,684.33 1443.92,684.33 1444.48,684.33 1445.04,684.33 1445.6,684.33 1446.15,684.33 1446.71,684.33 1447.27,684.33 1447.83,684.33 1448.39,684.33 1448.95,684.33 1449.51,684.33 1450.07,684.33 1450.63,684.33 1451.19,684.33 1451.75,684.33 1452.31,684.33 1452.87,684.33 1453.42,684.33 1453.98,684.33 1454.54,684.33 1455.1,684.33 1455.66,684.33 1456.22,684.33 1456.78,684.33 1457.34,684.33 1457.9,684.33 1458.46,684.33 1459.02,684.33 1459.58,684.33 1460.14,684.33 1460.7,684.33 1461.25,684.33 1461.81,684.33 1462.37,684.33 1462.93,684.33 1463.49,684.33 1464.05,684.33 1464.61,684.33 1465.17,684.33 1465.73,684.33 1466.29,684.33 1466.85,684.33 1467.41,684.33 1467.97,684.33 1468.52,684.33 1469.08,684.33 1469.64,684.33 1470.2,684.33 1470.76,684.33 1471.32,684.33 1471.88,684.33 1472.44,684.33 1473,684.33 1473.56,684.33 1474.12,684.33 1474.68,684.33 1475.24,684.33 1475.79,684.33 1476.35,684.33 1476.91,684.33 1477.47,684.33 1478.03,684.33 1478.59,684.33 1479.15,684.33 1479.71,684.33 1480.27,684.33 1480.83,684.33 1481.39,684.33 1481.95,684.33 1482.51,684.33 1483.07,684.33 1483.62,684.33 1484.18,684.33 1484.74,684.33 1485.3,684.33 1485.86,684.33 1486.42,684.33 1486.98,684.33 1487.54,684.33 1488.1,684.33 1488.66,684.33 1489.22,684.33 1489.78,684.33 1490.34,684.33 1490.89,684.33 1491.45,684.33 1492.01,684.33 1492.57,684.33 1493.13,684.33 1493.69,684.33 1494.25,684.33 1494.81,684.33 1495.37,684.33 1495.93,684.33 1496.49,684.33 1497.05,684.33 1497.61,684.33 1498.16,684.33 1498.72,684.33 1499.28,684.33 1499.84,684.33 1500.4,684.33 1500.96,684.33 1501.52,684.33 1502.08,684.33 1502.64,684.33 1503.2,684.33 1503.76,684.33 1504.32,684.33 1504.88,684.33 1505.44,684.33 1505.99,684.33 1506.55,684.33 1507.11,684.33 1507.67,684.33 1508.23,684.33 1508.79,684.33 1509.35,684.33 1509.91,684.33 1510.47,684.33 1511.03,684.33 1511.59,684.33 1512.15,684.33 1512.71,684.33 1513.26,684.33 1513.82,684.33 1514.38,684.33 1514.94,684.33 1515.5,684.33 1516.06,684.33 1516.62,684.33 1517.18,684.33 1517.74,684.33 1518.3,684.33 1518.86,684.33 1519.42,684.33 1519.98,684.33 1520.53,684.33 1521.09,684.33 1521.65,684.33 1522.21,684.33 1522.77,684.33 1523.33,684.33 1523.89,684.33 1524.45,684.33 1525.01,684.33 1525.57,684.33 1526.13,684.33 1526.69,684.33 1527.25,684.33 1527.81,684.33 1528.36,684.33 1528.92,684.33 1529.48,684.33 1530.04,684.33 1530.6,684.33 1531.16,684.33 1531.72,684.33 1532.28,684.33 1532.84,684.33 1533.4,684.33 1533.96,684.33 1534.52,684.33 1535.08,684.33 1535.63,684.33 1536.19,684.33 1536.75,684.33 1537.31,684.33 1537.87,684.33 1538.43,684.33 1538.99,684.33 1539.55,684.33 1540.11,684.33 1540.67,684.33 1541.23,684.33 1541.79,684.33 1542.35,684.33 1542.9,684.33 1543.46,684.33 1544.02,684.33 1544.58,684.33 1545.14,684.33 1545.7,684.33 1546.26,684.33 1546.82,684.33 1547.38,684.33 1547.94,684.33 1548.5,684.33 1549.06,684.33 1549.62,684.33 1550.18,684.33 1550.73,684.33 1551.29,684.33 1551.85,684.33 1552.41,684.33 1552.97,684.33 1553.53,684.33 1554.09,684.33 1554.65,684.33 1555.21,684.33 1555.77,684.33 1556.33,684.33 1556.89,684.33 1557.45,684.33 1558,684.33 1558.56,684.33 1559.12,684.33 1559.68,684.33 1560.24,684.33 1560.8,684.33 1561.36,684.33 1561.92,684.33 1562.48,684.33 1563.04,684.33 1563.6,684.33 1564.16,684.33 1564.72,684.33 1565.28,684.33 1565.83,684.33 1566.39,684.33 1566.95,684.33 1567.51,684.33 1568.07,684.33 1568.63,684.33 1569.19,684.33 1569.75,684.33 1570.31,684.33 1570.87,684.33 1571.43,684.33 1571.99,684.33 1572.55,684.33 1573.1,684.33 1573.66,684.33 1574.22,684.33 1574.78,684.33 1575.34,684.33 1575.9,684.33 1576.46,684.33 1577.02,684.33 1577.58,684.33 1578.14,684.33 1578.7,684.33 1579.26,684.33 1579.82,684.33 1580.37,684.33 1580.93,684.33 1581.49,684.33 1582.05,684.33 1582.61,684.33 1583.17,684.33 1583.73,684.33 1584.29,684.33 1584.85,684.33 1585.41,684.33 1585.97,684.33 1586.53,684.33 1587.09,684.33 1587.65,684.33 1588.2,684.33 1588.76,684.33 1589.32,684.33 1589.88,684.33 1590.44,684.33 1591,684.33 1591.56,684.33 1592.12,684.33 1592.68,684.33 1593.24,684.33 1593.8,684.33 1594.36,684.33 1594.92,684.33 1595.47,684.33 1596.03,684.33 1596.59,684.33 1597.15,684.33 1597.71,684.33 1598.27,684.33 1598.83,684.33 1599.39,684.33 1599.95,684.33 1600.51,684.33 1601.07,684.33 1601.63,684.33 1602.19,684.33 1602.74,684.33 1603.3,684.33 1603.86,684.33 1604.42,684.33 1604.98,684.33 1605.54,684.33 1606.1,684.33 1606.66,684.33 1607.22,684.33 1607.78,684.33 1608.34,684.33 1608.9,684.33 1609.46,684.33 1610.02,684.33 1610.57,684.33 1611.13,684.33 1611.69,684.33 1612.25,684.33 1612.81,684.33 1613.37,684.33 1613.93,684.33 1614.49,684.33 1615.05,684.33 1615.61,684.33 1616.17,684.33 1616.73,684.33 1617.29,684.33 1617.84,684.33 1618.4,684.33 1618.96,684.33 1619.52,684.33 1620.08,684.33 1620.64,684.33 1621.2,684.33 1621.76,684.33 1622.32,684.33 1622.88,684.33 1623.44,684.33 1624,684.33 1624.56,684.33 1625.11,684.33 1625.67,684.33 1626.23,684.33 1626.79,684.33 1627.35,684.33 1627.91,684.33 1628.47,684.33 1629.03,684.33 1629.59,684.33 1630.15,684.33 1630.71,684.33 1631.27,684.33 1631.83,684.33 1632.39,684.33 1632.94,684.33 1633.5,684.33 1634.06,684.33 1634.62,684.33 1635.18,684.33 1635.74,684.33 1636.3,684.33 1636.86,684.33 1637.42,684.33 1637.98,684.33 1638.54,684.33 1639.1,684.33 1639.66,684.33 1640.21,684.33 1640.77,684.33 1641.33,684.33 1641.89,684.33 1642.45,684.33 1643.01,684.33 1643.57,684.33 1644.13,684.33 1644.69,684.33 1645.25,684.33 1645.81,684.33 1646.37,684.33 1646.93,684.33 1647.48,684.33 1648.04,684.33 1648.6,684.33 1649.16,684.33 1649.72,684.33 1650.28,684.33 1650.84,684.33 1651.4,684.33 1651.96,684.33 1652.52,684.33 1653.08,684.33 1653.64,684.33 1654.2,684.33 1654.76,684.33 1655.31,684.33 1655.87,684.33 1656.43,684.33 1656.99,684.33 1657.55,684.33 1658.11,684.33 1658.67,684.33 1659.23,684.33 1659.79,684.33 1660.35,684.33 1660.91,684.33 1661.47,684.33 1662.03,684.33 1662.58,684.33 1663.14,684.33 1663.7,684.33 1664.26,684.33 1664.82,684.33 1665.38,684.33 1665.94,684.33 1666.5,684.33 1667.06,684.33 1667.62,684.33 1668.18,684.33 1668.74,684.33 1669.3,684.33 1669.85,684.33 1670.41,684.33 1670.97,684.33 1671.53,684.33 1672.09,684.33 1672.65,684.33 1673.21,684.33 1673.77,684.33 1674.33,684.33 1674.89,684.33 1675.45,684.33 1676.01,684.33 1676.57,684.33 1677.13,684.33 1677.68,684.33 1678.24,684.33 1678.8,684.33 1679.36,684.33 1679.92,684.33 1680.48,684.33 1681.04,684.33 1681.6,684.33 1682.16,684.33 1682.72,684.33 1683.28,684.33 1683.84,684.33 1684.4,684.33 1684.95,684.33 1685.51,684.33 1686.07,684.33 1686.63,684.33 1687.19,684.33 1687.75,684.33 1688.31,684.33 1688.87,684.33 1689.43,684.33 1689.99,684.33 1690.55,684.33 1691.11,684.33 1691.67,684.33 1692.23,684.33 1692.78,684.33 1693.34,684.33 1693.9,684.33 1694.46,684.33 1695.02,684.33 1695.58,684.33 1696.14,684.33 1696.7,684.33 1697.26,684.33 1697.82,684.33 1698.38,684.33 1698.94,684.33 1699.5,684.33 1700.05,684.33 1700.61,684.33 1701.17,684.33 1701.73,684.33 1702.29,684.33 1702.85,684.33 1703.41,684.33 1703.97,684.33 1704.53,684.33 1705.09,684.33 1705.65,684.33 1706.21,684.33 1706.77,684.33 1707.32,684.33 1707.88,684.33 1708.44,684.33 1709,684.33 1709.56,684.33 1710.12,684.33 1710.68,684.33 1711.24,684.33 1711.8,684.33 1712.36,684.33 1712.92,684.33 1713.48,684.33 1714.04,684.33 1714.6,684.33 1715.15,684.33 1715.71,684.33 1716.27,684.33 1716.83,684.33 1717.39,684.33 1717.95,684.33 1718.51,684.33 1719.07,684.33 1719.63,684.33 1720.19,684.33 1720.75,684.33 1721.31,684.33 1721.87,684.33 1722.42,684.33 1722.98,684.33 1723.54,684.33 1724.1,684.33 1724.66,684.33 1725.22,684.33 1725.78,684.33 1726.34,684.33 1726.9,684.33 1727.46,684.33 1728.02,684.33 1728.58,684.33 1729.14,684.33 1729.69,684.33 1730.25,684.33 1730.81,684.33 1731.37,684.33 1731.93,684.33 1732.49,684.33 1733.05,684.33 1733.61,684.33 1734.17,684.33 1734.73,684.33 1735.29,684.33 1735.85,684.33 1736.41,684.33 1736.97,684.33 1737.52,684.33 1738.08,684.33 1738.64,684.33 1739.2,684.33 1739.76,684.33 1740.32,684.33 1740.88,684.33 1741.44,684.33 1742,684.33 1742.56,684.33 1743.12,684.33 1743.68,684.33 1744.24,684.33 1744.79,684.33 1745.35,684.33 1745.91,684.33 1746.47,684.33 1747.03,684.33 1747.59,684.33 1748.15,684.33 1748.71,684.33 1749.27,684.33 1749.83,684.33 1750.39,684.33 1750.95,684.33 1751.51,684.33 1752.06,684.33 1752.62,684.33 1753.18,684.33 1753.74,684.33 1754.3,684.33 1754.86,684.33 1755.42,684.33 1755.98,684.33 1756.54,684.33 1757.1,684.33 1757.66,684.33 1758.22,684.33 1758.78,684.33 1759.34,684.33 1759.89,684.33 1760.45,684.33 1761.01,684.33 1761.57,684.33 1762.13,684.33 1762.69,684.33 1763.25,684.33 1763.81,684.33 1764.37,684.33 1764.93,684.33 1765.49,684.33 1766.05,684.33 1766.61,684.33 1767.16,684.33 1767.72,684.33 1768.28,684.33 1768.84,684.33 1769.4,684.33 1769.96,684.33 1770.52,684.33 1771.08,684.33 1771.64,684.33 1772.2,684.33 1772.76,684.33 1773.32,684.33 1773.88,684.33 1774.43,684.33 1774.99,684.33 1775.55,684.33 1776.11,684.33 1776.67,684.33 1777.23,684.33 1777.79,684.33 1778.35,684.33 1778.91,684.33 1779.47,684.33 1780.03,684.33 1780.59,684.33 1781.15,684.33 1781.71,684.33 1782.26,684.33 1782.82,684.33 1783.38,684.33 1783.94,684.33 1784.5,684.33 1785.06,684.33 1785.62,684.33 1786.18,684.33 1786.74,684.33 1787.3,684.33 1787.86,684.33 1788.42,684.33 1788.98,684.33 1789.53,684.33 1790.09,684.33 1790.65,684.33 1791.21,684.33 1791.77,684.33 1792.33,684.33 1792.89,684.33 1793.45,684.33 1794.01,684.33 1794.57,684.33 1795.13,684.33 1795.69,684.33 1796.25,684.33 1796.8,684.33 1797.36,684.33 1797.92,684.33 1798.48,684.33 1799.04,684.33 1799.6,684.33 1800.16,684.33 1800.72,684.33 1801.28,684.33 1801.84,684.33 1802.4,684.33 1802.96,684.33 1803.52,684.33 1804.08,684.33 1804.63,684.33 1805.19,684.33 1805.75,684.33 1806.31,684.33 1806.87,684.33 1807.43,684.33 1807.99,684.33 1808.55,684.33 1809.11,684.33 1809.67,684.33 1810.23,684.33 1810.79,684.33 1811.35,684.33 1811.9,684.33 1812.46,684.33 1813.02,684.33 1813.58,684.33 1814.14,684.33 1814.7,684.33 1815.26,684.33 1815.82,684.33 1816.38,684.33 1816.94,684.33 1817.5,684.33 1818.06,684.33 1818.62,684.33 1819.18,684.33 1819.73,684.33 1820.29,684.33 1820.85,684.33 1821.41,684.33 1821.97,684.33 1822.53,684.33 1823.09,684.33 1823.65,684.33 1824.21,684.33 1824.77,684.33 1825.33,684.33 1825.89,684.33 1826.45,684.33 1827,684.33 1827.56,684.33 1828.12,684.33 1828.68,684.33 1829.24,684.33 1829.8,684.33 1830.36,684.33 1830.92,684.33 1831.48,684.33 1832.04,684.33 1832.6,684.33 1833.16,684.33 1833.72,684.33 1834.27,684.33 1834.83,684.33 1835.39,684.33 1835.95,684.33 1836.51,684.33 1837.07,684.33 1837.63,684.33 1838.19,684.33 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906472","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $target_walkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.03161132154761 ± 0.01701326552833214\nProjected Energy: -4.018835270098796 ± (0.008522033560326214, 0.00871163423370458)\nExact Energy: -4.021502406906472\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from solve as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b];\n    shift=:shift,\n    norm=:norm,\n    time_step=determine_constant_time_step(df),\n    skip=0\n)\ngrowth_witness(sim::PMCSimulation, [b]; kwargs...)\n\nCalculate the growth witness directly from the result (DataFrame or PMCSimulation) of solveing a ProjectorMonteCarloProblem. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0)\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n)\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\ngrowth_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively.  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m) \n\nwhere dτ is the time_step\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator.  Error propagation is done with MonteCarloMeasurements. Propagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a PMCSimulation or DataFrame returned by solve. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\ngrowth_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df or PMCSimulation sim. repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-Tuple{AbstractVector, AbstractVector, AbstractVector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    time_step=determine_constant_time_step(df),\n    kwargs...\n)\nmixed_estimator(sim::PMCSimulation, h; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up).  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin.  Additional keyword arguments are passed on to ratio_of_means.\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2), where dτ is the time_step, and potentially increased confidence intervals compared to the unweighted ratio.  Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\nmixed_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(df::DataFrame; skip=0, hproj=:hproj, vproj=:vproj, kwargs...)\nprojected_energy(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy(...) to set these up in ProjectorMonteCarloProblem). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, time_step;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n)\nrayleigh_replica_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame or PMCSimulation returned by solve. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means. weights is a function that calulates the weights. See w_exp and w_lin. Additional keyword arguments are passed on to ratio_of_means.\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\nrayleigh_replica_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df or PMCSimulation sim returned from solve repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\nsim = solve(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(sim; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...)\nshift_estimator(sim::PMCSimulation; kwargs...)\n-> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_lin, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, time_step; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip and dτ is the time_step.\n\nSee also w_exp, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\nreplica_fidelity(sim::PMCSimulation; kwargs...)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the PMCSimulation or DataFrame returned by solve, using replicas _1 and _2. Calls ratio_of_means to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\nvariational_energy_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame and PMCSimulation versions can extract the relevant information from the result of solve. Set up the ProjectorMonteCarloProblem with the keyword argument replica_strategy = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.determine_constant_time_step-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.determine_constant_time_step","text":"determine_constant_time_step(df) -> time_step\n\nGiven a DataFrame df, determine the time step that was used to compute it. Throw an error if time step is not constant.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractOperator for defining observable operators\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by ProjectorMonteCarloProblem as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallows_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">0.453679</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">1.3135e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">9.007e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">9.197e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">1.402e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">3.095e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">8.486e-6</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0-1.41421im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im      0.0-2.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+1.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im\n 0.0-1.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999991\n -0.9999999999999991\n -0.9999999999999982\n -0.9999999999999973\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000027\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n       0.0+0.0im       -5.55112e-17-0.353553im         0.534676-0.217841im      2.77556e-17-0.204124im             0.0+0.0im           0.534676+0.217841im      2.77556e-17+0.204124im             0.0+0.0im       -5.55112e-17+0.353553im           0.0+0.0im\n       0.0+0.0im        5.55112e-17-0.5im             -0.378073+0.154037im              0.0-0.288675im             0.0+0.0im          -0.378073-0.154037im     -5.55112e-17+0.288675im             0.0+0.0im                0.0+0.5im                0.0+0.0im\n       0.0+0.612372im           0.0+0.0im          -5.55112e-17+0.0im           -1.2326e-32+2.77556e-17im          0.0+0.353553im           0.0+0.0im                   0.0+2.77556e-17im          0.0+0.353553im           0.0+0.0im                0.0+0.612372im\n       0.0+0.0im                0.0+0.353553im      5.55112e-17+6.93889e-17im           0.0-0.612372im             0.0+0.0im        5.55112e-17-1.38778e-16im           0.0+0.612372im             0.0+0.0im                0.0-0.353553im           0.0+0.0im\n       0.0-0.353553im    1.2326e-32+1.11022e-16im   5.55112e-17-2.77556e-17im  -2.46519e-32-2.77556e-17im          0.0+0.612372im  -1.11022e-16-2.77556e-17im   4.93038e-32-2.77556e-17im          0.0+0.612372im   -1.2326e-32+8.32667e-17im        0.0-0.353553im\n       0.0+0.0im           0.353553+0.0im                   0.0+0.0im              0.612372+0.0im                  0.0+0.0im                0.0+0.0im              0.612372+0.0im                  0.0+0.0im           0.353553+0.0im                0.0+0.0im\n -0.353553+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.612372+0.0im                0.0+0.0im                   0.0+0.0im             0.612372+0.0im                0.0+0.0im           0.353553+0.0im\n       0.0+0.0im               -0.5+7.02973e-17im     -0.154037-0.378073im         0.288675-1.95105e-16im          0.0+0.0im          -0.154037+0.378073im         0.288675+2.29062e-16im          0.0+0.0im               -0.5-7.48398e-17im        0.0+0.0im\n       0.0+0.0im          -0.353553+8.84171e-17im      0.217841+0.534676im         0.204124-1.1389e-16im   8.32667e-17+0.0im           0.217841-0.534676im         0.204124+2.4427e-16im   8.32667e-17+0.0im          -0.353553-8.31718e-17im        0.0+0.0im\n  0.612372+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.353553-0.0im                0.0+0.0im                   0.0+0.0im             0.353553+0.0im                0.0+0.0im          -0.612372-0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -1.6810327175633306e-17\n  3.469966302164114e-17\n  0.15915494309189535\n  0.1591549430918954\n  0.1591549430918954","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(fs\"|0 0 4 0 0⟩\"; u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 1 0 0 3⟩\"\n fs\"|1 3 0 0 0⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843  0.0       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8        0.0       0.282843  0.565685  0.0       0.0       0.0       0.0\n  0.0       0.8       0.4       0.581966  0.4       0.0       0.4        0.282843  0.565685  0.0       0.69282   0.69282   0.0       0.0\n  0.0       0.4       0.8       0.4       2.81803   0.4       0.0        0.0       0.565685  0.282843  0.69282   0.0       0.69282   0.0\n  0.0       0.8       0.4       0.0       0.4       0.581966  0.4        0.282843  0.565685  0.0       0.0       0.0       0.69282   0.69282\n  0.0       0.4       0.8       0.4       0.0       0.4       2.81803    0.0       0.565685  0.282843  0.0       0.69282   0.0       0.69282\n  0.0       0.565685  0.0       0.282843  0.0       0.282843  0.0       -0.472136  0.8       0.0       0.489898  0.0       0.0       0.489898\n  0.0       0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n  0.0       0.0       0.565685  0.0       0.282843  0.0       0.282843   0.0       0.8       8.47214   0.0       0.489898  0.489898  0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.0       0.0        0.489898  0.489898  0.0       1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.69282    0.0       0.489898  0.489898  0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.69282   0.0        0.0       0.489898  0.489898  0.0       0.0       6.03607   0.0\n  0.0       0.0       0.0       0.0       0.0       0.69282   0.69282    0.489898  0.489898  0.0       0.0       0.0       0.0       1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.9798639983216155\n -3.363124291613371\n -0.7590191922770746\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781396\n  1.530592997097333\n  1.5835732611867464\n  3.072870330325867\n  3.125672653951849\n  4.862107221562182\n  6.26069485038059\n  6.402671211183119\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348     0.175378     0.0135766   -2.81719e-15  -0.0221221  -0.0697193   1.3739e-15    0.0314466   -2.35922e-16  -0.0360987   -0.0161557  -5.55112e-17   0.00625248  -0.0058099\n  0.177701     0.932229     0.105473     3.01009e-14   0.225254   -0.132826    9.71445e-17  -0.00292026  -2.09555e-15  -0.0861158   -0.0907789  -4.996e-16     0.0591715   -0.0264275\n  0.0768085   -0.0622307    0.0129069   -6.06251e-14  -0.447424   -0.63969     2.05322e-14   0.383444    -6.54338e-15  -0.431051    -0.181167   -6.10623e-16   0.0599783   -0.106852\n -0.0214153   -0.175119    -0.20169      0.616673      0.522017   -0.296818   -0.31234      -0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797    0.0693699     0.0495446   0.416847    0.33773       0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153   -0.175119    -0.20169     -0.616673      0.522017   -0.296818    0.31234      -0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797   -0.0693699     0.0495446   0.416847   -0.33773       0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.0138439   -0.165902     0.922758     1.00753e-14   0.1111     -0.172508   -1.30521e-14  -0.207974     2.66454e-15   0.0848902   -0.149153   -8.32667e-16   0.0712921   -0.0301968\n -0.00234782   0.00840544  -0.098969    -9.6867e-15   -0.0847116   0.082999    1.51129e-14   0.274424     3.60822e-15   0.575786    -0.61385    -2.72005e-15   0.353775    -0.259338\n -0.00237613   0.00294196   0.00143189   5.56152e-15   0.0427486   0.0110863  -3.72619e-15  -0.0663108    9.50628e-16   0.00167015   0.0832916   2.91434e-15  -0.448519    -0.8863\n  0.00363555   0.0455298   -0.133824    -0.332825     -0.290831   -0.057199   -0.527627     -0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478   0.0150664    0.0206752   -0.0642658    -0.0638689  -0.0250518   0.0999631    -0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499\n  0.00195478   0.0150664    0.0206752    0.0642658    -0.0638689  -0.0250518  -0.0999631    -0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555   0.0455298   -0.133824     0.332825     -0.290831   -0.057199    0.527627     -0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133606\n -0.7590191922770747","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133743\n -0.7590191922770853\n  0.13584182219621255\n  0.1578999869460791\n  0.8767114411781307\n  1.5305929970973287\n  1.5835732611867392\n  3.072870330325853\n  3.125672653951848\n  4.862107221562178\n  6.260694850380595\n  6.402671211183108\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321621\n -3.3631242916133637\n -0.759019192277076\n  0.1578999869460802\n  0.8767114411781437\n  1.5835732611867417\n  3.125672653951844\n  4.862107221562179\n  6.402671211183117\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.0066861389450877905\n 0.033070399772041625\n 3.9204869225657406\n 0.03307039977204162\n 0.006686138945087839","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html#Model-Hamiltonians","page":"Hamiltonians","title":"Model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardReal1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardReal1D2C","text":"BoseHubbardReal1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0)\n\nImplements a two-component one-dimensional Bose Hubbard chain in real space.\n\nhatH = hatH_a + hatH_b + Vsum_i n_a_in_b_i\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nua: the on-site interaction parameter parameter for Hamiltonian a.\nub: the on-site interaction parameter parameter for Hamiltonian b.\nta: the hopping strength for Hamiltonian a.\ntb: the hopping strength for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nSee also\n\nHubbardReal1D\nBoseHubbardMom1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0, boundary_condition=:periodic)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space. This Hamiltonian can be either real or complex, depending on the choice of boundary_condition.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) +\nv sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\nboundary_condition The following values are supported:\n:periodic: usual period boundary condition realising a ring geometry.\n:hard_wall: hopping over the boundary is not allowed.\n:twisted: like :periodic but hopping over the boundary incurs an additional factor of -1.\nθ <: Number: like :periodic and :twisted but hopping over the boundary incurs a factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left. With this choice the Hamiltonian will have a complex eltype whereas otherwise the eltype is determined by the type of the parameters t, u, and v.\n\nSee also HubbardRealSpace.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\nExtendedHubbardMom1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =dispersion(t, k)\nhubbard_dispersion: ϵ_k = -2(Re(t) cos(k) + Im(t) sin(k))\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardMom1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardMom1D2C","text":"BoseHubbardMom1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0, kwargs...)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with a two-component Bose gas.\n\nhatH = hatH_a + hatH_b + fracVMsum_kpqr b^_r a^_q b_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address.\nua: the u parameter for Hamiltonian a.\nub: the u parameter for Hamiltonian b.\nta: the t parameter for Hamiltonian a.\ntb: the t parameter for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nFurther keyword arguments are passed on to the constructor of HubbardMom1D.\n\nSee also\n\nBoseFS2C\nBoseHubbardReal1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2( Re(t) cos(k) + Im(t) sin(k))\ncontinuum_dispersion: ϵ_k = Re(t) k^2 - 2 Im(t) k\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardMom1D","text":"ExtendedHubbardMom1D(address; u=1.0, t=1.0, v=1.0, dispersion=hubbard_dispersion, boundary_condition = 0.0)\n\nImplements a one-dimensional extended Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + frac12M sum_kpqr (u + 2v cos(q-p)) a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nboundary_condition: θ <: Number: hopping over the boundary incurs a   factor exp(iθ) for a hop to the right and exp(iθ) for a hop to the left.\ndispersion: defines ϵ_k =dispersion(t, k + θ)\nhubbard_dispersion: ϵ_k = -2 (Re(t) cos(k + θ) + Im(t) sin(k + θ))\ncontinuum_dispersion: ϵ_k = Re(t) (k + θ)^2 - 2 Im(t) (k + θ)\n\nSee also\n\nHubbardMom1D\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl\n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl\n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between basis states of any noninteracting energy level, leading to many more offdiagonals and fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The   allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make   the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the   interactions. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without   comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions\n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator basis functions, see four_oscillator_integral_general, with the additional restriction that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults   to a 1D spectrum with number of levels matching modes of addr. Will be sorted to   make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets   the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed   to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are   ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi\n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x so that single particle energies are\n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix representation of this Hamiltonian for a single particle is completely dense in the even-parity subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty   for a 1D trap or contain values greater than 1.0. The maximum index   in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,   including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if   only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of\nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other","page":"Hamiltonians","title":"Other","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of ProjectorMonteCarloProblem() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns -2(Re(t) cos(k) + Im(t) sin(k)).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(t, k)\n\nDispersion relation for HubbardMom1D. Returns Re(t) k^2 - 2 Im(t) k.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(fs\"|1 1 1⟩\"; u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(fs\"|0 2 1⟩\"; u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Observables are AbstractOperators that represent a physical observable. Their expectation values can be sampled during a ProjectorMonteCarloProblem simulation by passing them into a suitable ReplicaStrategy, e.g.  AllOverlaps.  AbstractOperator is a supertype of  AbstractHamiltonian and has less stringent  requirements. Some observables are also AbstractHamiltonians.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractOperator\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nSingleParticleExcitation\nTwoParticleExcitation\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractOperator","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractOperator","text":"AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with elements of type T (returned by eltype) and general (custom type) indices called 'addresses'.\n\nAbstractOperator instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses.\n\nThe defining feature of an AbstractOperator is that it can be applied to a vector with mul!(y, op, x) and that three-way dot products can be calculated with dot(x, op, y).\n\nThe AbstractOperator type is useful for defining operators that are not necessarily Hamiltonians, but that can be used in the context of a ProjectorMonteCarloProblem as observable operators in a ReplicaStrategy, e.g. for defining correlation functions. In contrast to AbstractHamiltonians, AbstractOperators do not need to have a starting_address. Moreover, the eltype of an AbstractOperator can be a vector value.\n\nFor concrete implementations see Hamiltonians. In order to implement a Hamiltonian for use in ProjectorMonteCarloProblem or ExactDiagonalizationProblem use the type AbstractHamiltonian instead, which is a subtype of AbstractOperator.\n\nInterface\n\nBasic interface methods to implement:\n\nallows_address_type(op, type)\ndiagonal_element(op, address)\nnum_offdiagonals(op, address) and\nget_offdiagonal(op, address, chosen) or offdiagonals\n\nOptional additional methods to implement:\n\nVectorInterface.scalartype(op): defaults to eltype(eltype(op))\nLOStructure(::Type{typeof(op)}): defaults to AdjointUnknown\ndimension(op, addr): defaults to dimension of address space\n\nIn order to calculate observables efficiently, it may make sense to implement custom methods for Interfaces.dot_from_right(x, op, y) and LinearAlgebra.mul!(y, op, x).\n\nSee also AbstractHamiltonian, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator() <: AbstractOperator{Float64}\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. It works with any address type that is a subtype of AbstractFockAddress.\n\njulia> p = ExactDiagonalizationProblem(FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3));\n\njulia> gs = solve(p).vectors[1]; # normalised ground state vector\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractOperator{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractOperator{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int,c=:cross) <: AbstractOperator{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d of a two component system in a momentum-space Fock-state basis. It returns a Complex value.\n\nCorrelation across two components:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s b^_p  b_q a_r δ_s+pq+r\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\nc: possible instructions: :cross: default instruction, computing correlation between particles across two components; :first: computing correlation between particles within the first component; :second: computing correlation between particles within the second component. These are the only defined instructions, using anything else will produce errors.\n\nTo use on a one-component system\n\nFor a system with only one component, e.g. with BoseFS, the second argument c is irrelevant and can be any of the above instructions, one could simply skip this argument and let it be the default value.\n\nSee also\n\nBoseHubbardMom1D2C\nBoseFS2C\nG2RealCorrelator\nG2RealSpace\nAbstractOperator\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractOperator{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into ProjectorMonteCarloProblem with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int; address=nothing, type=nothing) <: AbstractOperator{T}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    C_textstring(d) = frac1M sum_j^M δ n_j\n                                         (e^i π sum_j  k  j + d δ n_k) δ n_j+d\n\nHere, δ n_j = n_j - n is the boson number deviation from the mean filling number and n = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nThe default element type T is ComplexF64. This can be overridden with the type keyword argument. If an address is provided, then T is calculated from the address type. It is set to ComplexF64 for non-integer filling numbers, and to Float64 for integer filling numbers or if d==0.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractOperator, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SingleParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.SingleParticleExcitation","text":"SingleParticleExcitation(i, j) <: AbstractHamiltonian\n\nRepresent the ij element of the single-particle reduced density matrix:\n\nρ^(1)_ij = a^_i a_j\n\nwhere i <: Int and j <: Int specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nTwoParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TwoParticleExcitation","page":"Hamiltonians","title":"Rimu.Hamiltonians.TwoParticleExcitation","text":"TwoParticleExcitation(i, j, k, l) <: AbstractHamiltonian\n\nRepresent the ij kl element of the two-particle reduced density matrix:\n\nρ^(2)_ij kl =  a^_i a^_j a_l a_k\n\nwhere i, j, k, and l (all <: Int) specify the mode numbers.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\nSingleParticleExcitation\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator P.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> address = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(address => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(address => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(address => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Hamiltonians-interface","page":"Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. The most general form of a model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T} <: AbstractOperator{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with ProjectorMonteCarloProblem). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallows_address_type(h::AbstractHamiltonian, type): defaults to type :< typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.starting_address","page":"Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, address, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address address and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallows_address_type\nBase.eltype\nVectorInterface.scalartype\nmul!","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, address)\n-> newaddress, probability, matrixelement\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address in the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(h::AbstractOperator, addr)\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRepresentation.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.allows_address_type","page":"Hamiltonians","title":"Rimu.Interfaces.allows_address_type","text":"allows_address_type(operator, addr_or_type)\n\nReturns true if addr_or_type is a valid address for operator. Otherwise, returns false.\n\nPart of the AbstractHamiltonian interface.\n\nExtended help\n\nDefaults to addr_or_type <: typeof(starting_address(operator)). Overload this function if the operator can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Base.eltype","page":"Hamiltonians","title":"Base.eltype","text":"eltype(op::AbstractOperator)\n\nReturn the type of the elements of the operator. This can be a vector value. For the underlying scalar type use scalartype.\n\nPart of the AbstractOperator interface.\n\nnote: Note\nNew types should only implement the method with the argument in the type domain.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#VectorInterface.scalartype","page":"Hamiltonians","title":"VectorInterface.scalartype","text":"scalartype(op::AbstractOperator)\n\nReturn the type of the underlying scalar field of the operator. This may be different from the element type of the operator returned by eltype, which can be a vector value.\n\nPart of the AbstractOperator interface.\n\nnote: Note\nNew types should only implement the method with the argument in the type domain.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.mul!","page":"Hamiltonians","title":"LinearAlgebra.mul!","text":"LinearAlgebra.mul!(w::AbstractDVec, op::AbstractOperator, v::AbstractDVec)\n\nIn place multiplication of op with v and storing the result in w. The result is returned. Note that w needs to have a valtype that can hold a product of instances of eltype(op) and valtype(v). Moreover, the StochasticStyle of w needs to be <:IsDeterministic.\n\nPart of the AbstractOperator interface.\n\nThe default implementation relies of diagonal_element and offdiagonals to access the elements of the operator. The function can be overloaded for custom operators.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"hamiltonians.html#Base.adjoint","page":"Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractOperator)\n\nRepresent the adjoint of an AbstractOperator. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.dot","page":"Hamiltonians","title":"LinearAlgebra.dot","text":"dot(w, op::AbstractOperator, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian, AbstractOperator.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractOperator, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h, otherwise return true. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allows_address_type.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here for HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2, CubicGrid{2, (3, 4), (true, true)}}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Harmonic-Oscillator","page":"Hamiltonians","title":"Harmonic Oscillator","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim}; \n    target_energy = nothing, \n    max_energy = nothing, \n    max_blocks = nothing, \n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns \n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRep\nindices: tuple of mode indices that allow recreation of the generating address    addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when    the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating    tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved    after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.    Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds  addr are determined by parity. In this case the blocks are not generated; t_basis  will be zero, and block_size will be an estimate. Pass the seed addresses to  BasisSetRep with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis  indices n_xn_yldots. These indices are bounded by S which is a  tuple of the maximum number of states in each dimension. By default the  groundstate in each dimension is indexed by 0, but this can be changed  by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions,\n\n    mathcalI(ijkl) = int_-infty^infty dx \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function, and is non-zero unless i+j+k+l is odd. See e.g. Titchmarsh (1948). This is a generalisation of the closed form in Papenbrock (2002), which is is the special case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin,\n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state corresponds to a D-tuple of harmonic oscillator indices mathbfn_i. S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of phi_i(0) to speed-up the calculation. The values can be calculated with log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"RMPI.html#Module-RMPI","page":"RMPI","title":"Module RMPI","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI","category":"page"},{"location":"RMPI.html#Rimu.RMPI","page":"RMPI","title":"Rimu.RMPI","text":"Module for providing MPI functionality for Rimu. This module is unexported. To use it, run\n\nusing Rimu.RMPI\n\n\n\n\n\n","category":"module"},{"location":"RMPI.html#MPIData","page":"RMPI","title":"MPIData","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIData","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIData","page":"RMPI","title":"Rimu.RMPI.MPIData","text":"MPIData(data; kwargs...)\n\nWrapper used for signaling that this data is part of a distributed data structure and communication should happen with MPI. MPIData can generally be used where an AbstractDVec would be used otherwise. Unlike AbstractDVecs, MPIData does not support indexing, or iteration over keys, values, and pairs.\n\nKeyword arguments:\n\nsetup = mpi_point_to_point - controls the communication stratgy\nmpi_one_sided uses one-sided communication with remote memory access (RMA), sets MPIOneSided strategy.\nmpi_point_to_point uses MPIPointToPoint strategy.\nmpi_all_to_all uses MPIAllToAll strategy.\nmpi_no_exchange sets MPINoWalkerExchange strategy. Experimental. Use with caution!\ncomm = mpi_comm()\nroot = mpi_root\nThe rest of the keyword arguments are passed to setup.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Setup-functions","page":"RMPI","title":"Setup functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"The following distribute strategies are available. The functions are unexported.","category":"page"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.mpi_point_to_point\nRimu.RMPI.mpi_one_sided\nRimu.RMPI.mpi_all_to_all\nRimu.RMPI.mpi_no_exchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_point_to_point","page":"RMPI","title":"Rimu.RMPI.mpi_point_to_point","text":"mpi_point_to_point(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to point-to-point.\n\nSets up the MPIData structure with MPIPointToPoint strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_one_sided","page":"RMPI","title":"Rimu.RMPI.mpi_one_sided","text":"mpi_one_sided(data, comm = mpi_comm(), root = mpi_root; capacity)\n\nDeclare data as mpi-distributed and set communication strategy to one-sided with remote memory access (RMA). capacity sets the capacity of the RMA windows.\n\nSets up the MPIData structure with MPIOneSided strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_all_to_all","page":"RMPI","title":"Rimu.RMPI.mpi_all_to_all","text":"mpi_all_to_all(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to all-to-all.\n\nSets up the MPIData structure with MPIAllToAll strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_no_exchange","page":"RMPI","title":"Rimu.RMPI.mpi_no_exchange","text":"mpi_no_exchange(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to MPINoWalkerExchange. Sets up the MPIData structure with MPINoWalkerExchange strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Strategies","page":"RMPI","title":"Strategies","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIPointToPoint\nRimu.RMPI.MPIOneSided\nRimu.RMPI.MPIAllToAll\nRimu.RMPI.MPINoWalkerExchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIPointToPoint","page":"RMPI","title":"Rimu.RMPI.MPIPointToPoint","text":"MPIPointToPoint{N,A}\n\nPoint-to-point communication strategy. Uses circular communication using MPI.Send and MPI.Recv!.\n\nConstructor\n\nMPIPointToPoint(::Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIOneSided","page":"RMPI","title":"Rimu.RMPI.MPIOneSided","text":"MPIOneSided(nprocs, myrank, comm, ::Type{T}, capacity)\n\nCommunication buffer for use with MPI one-sided communication (remote memory access). Up to capacity elements of type T can be exchanged between MPI ranks via put. It is important that isbitstype(T) == true. Objects of type MPIOneSided have to be freed manually with a (blocking) call to free().\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIAllToAll","page":"RMPI","title":"Rimu.RMPI.MPIAllToAll","text":" MPIAllToAll\n\nAll-to-all communication strategy. The communication works in two steps: first MPI.Alltoall! is used to communicate the number of walkers each rank wants to send to other ranks, then MPI.Alltoallv! is used to send the walkers around.\n\nConstructor\n\nMPIAllToAll(Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPINoWalkerExchange","page":"RMPI","title":"Rimu.RMPI.MPINoWalkerExchange","text":"MPINoWalkerExchange(nprocs, my_rank, comm)\n\nStrategy for not exchanging walkers between ranks. Consequently there will be no cross-rank annihilations.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#MPI-convenience-functions","page":"RMPI","title":"MPI convenience functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Modules = [Rimu.RMPI]\nPages = [\"helpers.jl\"]\nPrivate = true\nPublic = true","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_root","page":"RMPI","title":"Rimu.RMPI.mpi_root","text":"Default MPI root for RMPI.\n\n\n\n\n\n","category":"constant"},{"location":"RMPI.html#Rimu.DictVectors.mpi_comm-Tuple{}","page":"RMPI","title":"Rimu.DictVectors.mpi_comm","text":"Default MPI communicator for RMPI.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.DictVectors.mpi_rank","page":"RMPI","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.DictVectors.mpi_size","page":"RMPI","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.is_mpi_root","page":"RMPI","title":"Rimu.RMPI.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_allprintln-Tuple","page":"RMPI","title":"Rimu.RMPI.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_barrier","page":"RMPI","title":"Rimu.RMPI.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_combine_walkers!-Tuple{Rimu.RMPI.MPIData, AbstractDVec}","page":"RMPI","title":"Rimu.RMPI.mpi_combine_walkers!","text":"mpi_combine_walkers!(target, source, [strategy])\n\nDistribute the entries of source to the target data structure such that all entries in the target are on the process with the correct mpi rank as controlled by targetrank(). MPI syncronizing.\n\nNote: the storage of the source is communicated rather than the source itself.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_seed!","page":"RMPI","title":"Rimu.RMPI.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.next_mpiID","page":"RMPI","title":"Rimu.RMPI.next_mpiID","text":"next_mpiID()\n\nProduce a new ID number for MPI distributed objects. Uses an internal counter.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.targetrank-Tuple{Union{Integer, AbstractFockAddress}, Any}","page":"RMPI","title":"Rimu.RMPI.targetrank","text":"targetrank(key, np)\n\nCompute the rank where the key belongs.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.@mpi_root-Tuple","page":"RMPI","title":"Rimu.RMPI.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"RMPI.html#Index","page":"RMPI","title":"Index","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Pages   = [\"RMPI.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nnnzs = 0: The number of non-zero elements in the basis set representation. Setting a   non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^6, nnzs, cutoff, filter, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 3 and 9 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int64} with 9 stored entries:\n  0.0  -1.0  -1.0\n -1.0   0.0  -1.0\n -1.0  -1.0   0.0\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(fs\"|1 0 0⟩\"; u=1.0, t=1.0)) with dimension 2 and 4 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int64} with 4 stored entries:\n  0.0  -1.0\n -1.0   0.0\n\njulia> using LinearAlgebra; round.(eigvals(Matrix(bsr)); digits = 4) # eigenvalues\n3-element Vector{Float64}:\n -2.0\n  1.0\n  1.0\n\njulia> ev = eigvecs(Matrix(bsr))[:,1]; ev = ev .* sign(ev[1]) # ground state eigenvector\n3-element Vector{Float64}:\n 0.5773502691896257\n 0.5773502691896255\n 0.5773502691896257\n\njulia> dv = DVec(zip(bsr.basis, ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => 0.57735\n  fs\"|0 1 0⟩\" => 0.57735\n  fs\"|1 0 0⟩\" => 0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. A maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nSetting sort to true will sort the basis. Any additional keyword arguments are passed on to Base.sort!.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"randomnumbers.html#Random-numbers-in-Rimu","page":"Random numbers","title":"Random numbers in Rimu","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"Rimu uses Julia's built-in random number generator, which currently defaults to Xoshiro256++.","category":"page"},{"location":"randomnumbers.html#Reproducibility","page":"Random numbers","title":"Reproducibility","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"If you want FCIQMC runs to be reproducible, make sure to seed the RNG with Random.seed!.","category":"page"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"MPI-distributed runs can also be made reproducible by seeding the RNG with Rimu.RMPI.mpi_seed!.","category":"page"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://joachimbrand.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for  parsing by Literate. The process of generating  documentation is automated in the docs/make.jl file and assumes that the following line is  at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example, ","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, value = hopnextneighbour(add, chosen, boundary_condition)\n\nCompute the new address of a hopping event for the Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes multiplied by a term consistent with boundary condition as the value.  The following boundary conditions are supported:\n\n:periodic: hopping over the boundary gives does not change the value.\n:twisted: hopping over the boundary flips the sign of the value.\n:hard_wall: hopping over the boundary gives a value of zero.\nθ <: Number: hopping over the boundary gives a value multiplied by exp(iθ) or exp(iθ) depending on the direction of hopping.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :twisted)\n(BoseFS{2,3}(2, 0, 0), -1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, :hard_wall)\n(BoseFS{2,3}(2, 0, 0), 0.0)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3, π/4)\n(BoseFS{2,3}(2, 0, 0), 1.0000000000000002 + 1.0im)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS2C","text":"BoseFS2C{NA,NB,M,AA,AB} <: AbstractFockAddress\nBoseFS2C(onr_a, onr_b)\n\nAddress type that constructed with two BoseFS{N,M,S}. It represents a Fock state with two components, e.g. two different species of bosons with particle number NA from species S and particle number NB from species B. The number of modes M is expected to be the same for both components.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, Tuple{Vararg{Int64, var\"#s61\"}} where var\"#s61\", Tuple{Vararg{Int64, var\"#s5\"}} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.13.0. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(n_replicas=2; operator=nothing, transform=nothing, vecnorm=true)\n    <: ReplicaStrategy{n_replicas}\n\nRun n_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee ProjectorMonteCarloProblem, ReplicaStrategy and AbstractOperator (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to ProjectorMonteCarloProblem then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep time_step constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; target_walkers = 1_000) <: ShiftStrategy\n\nDon't update the shift.  Return when target_walkers is reached.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in ProjectorMonteCarloProblem is advised as the default may not be appropriate.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; target_walkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, time_step) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian, dτ the time_step and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt{S} <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(target_walkers = 1_000, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After target_walkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nThis will work with MPIData.\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to ProjectorMonteCarloProblem. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntarget_walkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; target_walkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 9)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; target_walkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, see   TimeStepStrategy.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * target_walkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates.\n\nIndexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nSee also ReplicaStrategy, SpectralState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to ProjectorMonteCarloProblem and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_reporting_strategy\nreport!\nreport_after_step!\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to ProjectorMonteCarloProblem or to FCIQMC.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in ProjectorMonteCarloProblem()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, walltime = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the walltime is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with advance!.\n\nSee also SpectralState, SpectralStrategy, ReplicaState, ReplicaStrategy, replica_stats, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several SingleStates representing the ground state and excited states of a single replica.\n\nIndexing the SpectralState state[i] returns the ith SingleState.\n\nSee also SpectralStrategy, ReplicaState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_time_step(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, shift_strategy)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Union{Tuple, Vector}, Tuple{Vararg{AbstractDVec, N}}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators. This function is overloaded for MPIData. The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main ProjectorMonteCarloProblem loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in solve! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> address = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(address);\n\njulia> df1, state = lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 9)\n\njulia> size(df2)\n(200, 9)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(fs\\\"|1 2 3⟩\\\"; u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; target_walkers=targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.target_walkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from ProjectorMonteCarloProblem, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before ProjectorMonteCarloProblem exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{R}, Tuple{S}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{S, R}, Any, Any}} where {S, R}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 1.6, 1.6, 0.4, 0.4)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an AbstractMatrix of configuration vectors from the state. The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also SingleState, ReplicaState, SpectralState, PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.update_time_step-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_time_step","text":"update_time_step(s<:TimeStepStrategy, time_step, tnorm) -> new_time_step\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#RMPI","page":"API","title":"RMPI","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module RMPI","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by ProjectorMonteCarloProblem when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of ProjectorMonteCarloProblem, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with ProjectorMonteCarloProblem, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI. MPI is a standard for parallel and distributed computing, and it is widely used in high-performance computing. Rimu provides support for MPI to enable parallel computations on multiple nodes.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with 2 MPI ranks with mpirun -n 2 julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu and Rimu.RMPI, which contains MPI-related functionality.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu\nusing Rimu.RMPI","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum, which is located at mode 5 in the momentum grid. We put all 10 particles, all in the zero momentum mode.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(fs\"|0 0 0 0 10 0 0 0 0 0⟩\"; u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for MPI calculations, as they will typically run non-interactively. The reports will be written to disk and can be inspected later. This has the additional benefit of reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The default settings will ensure that only the root MPI rank will write to the file, which is reasonable, and that data is saved in chunks of 1000 time steps. We choose to suppress progress messages with setting io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"For running parallel computations with MPI, it is important that a compatible state vector is used. Here we explicitly set up an MPI-enabled state vector, PDVec, which is automatically MPI-distributed over the available number of MPI ranks. In addition, threading will be used with all threads available to Julia.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10000 walkers and for 10000 time steps. We will also compute the projected energy by passing a ProjectedEnergy object as a post_step_strategy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"problem = ProjectorMonteCarloProblem(H;\n    start_at=initial_vector,\n    reporting_strategy,\n    post_step_strategy=ProjectedEnergy(H, initial_vector),\n    target_walkers=10_000,\n    time_step=1e-4,\n    last_step=10_000\n);","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"simulation = solve(problem);\n\n@mpi_root println(\"Simulation success = \", simulation.success)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Simulation success = true\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Once the calculation is done, the results are available in the arrow file on disk.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In a typical workflow, the simulation results would be loaded from disk and analysed in the REPL or with a separate script. The arrow file can be loaded into a DataFrame with metadata using the load_df function.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. ProjectorMonteCarloProblem, ExactDiagonalizationProblem.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary. Additional MPI-related functionality is provided by the module RMPI.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with ProjectorMonteCarloProblem and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with ProjectorMonteCarloProblem and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and AllToAll when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nSee also PDWorkingMemory.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> scale!(pv, -1); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce!.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded and MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface.jl\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\nIf dv is an MPIData, synchronize its contents among the ranks first.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\nwalkernumber_and_length\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(md::MPIData)\n\nCompute the walkernumber of the distributed data on every MPI rank with MPI.Allreduce. MPI syncronizing.\n\n\n\n\n\nwalkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber_and_length","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber_and_length","text":"walkernumber_and_length(v)\n\nCompute walkernumber and length at the same time. When MPI is used, this is more efficient than calling them separately.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.dot_from_right","page":"Dict vectors","title":"Rimu.Interfaces.dot_from_right","text":"dot_from_right(w, op::AbstractOperator, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in ProjectorMonteCarloProblem.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in ProjectorMonteCarloProblem.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.FirstColumnIterator","page":"Dict vectors","title":"Rimu.DictVectors.FirstColumnIterator","text":"FirstColumnIterator{W,D} <: AbstractVector{D}\n\nIterates segments in the first column of a working memory that belong to a specified rank.\n\nSee PDWorkingMemory, remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured as a two-dimensional array of segments, which themselves are Dicts (see PDVec). The number of rows in this array is equal to the number of segments across all MPI ranks (covering the entire address space), while the number of columns corresponds to the number of segments in the current MPI rank (i.e. column corresponds to the part of the address space that is local to the current rank).\n\nThe purpose of this organisation is to allow spawning in parallel without using locks or atomic operations. The spawning is performed by applying the following sequence of operations:\n\nperform_spawns!: each segment in the PDVec is multiplied by the operator independently, with the results being stored in a column of the working memory.\ncollect_local!: the rows of the working memory are summed to the first column.\nsynchronize_remote!: the segments corresponding to other MPI ranks are distributed and transferred to the first column.\nmove_and_compress!: the results are stochastically compressed and moved to the result PDVec\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports getindex, deposit! and StochasticStyle and acts as a target for spawning. Can be used as a target in a three-way dot-product.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nSum each row in w and store the result in the first column. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.first_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.first_column","text":"first_column(::PDWorkingMemory)\n\nReturn the first column of the working memory. This is where the vectors are collected with collect_local!, synchronize_remote!, copy_to_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the segments in the first column of w on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local MPI rank.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all MPI ranks.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, v::PDVec, ham, boost)\n\nPerform spawns from v through ham to w. boost increases the number of spawns without affecting the expectation value of the process.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the segments in the first column of w that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] w::PDWorkingMemory) -> names, values\n\nSynchronize non-local segments across MPI and add the results to the first column. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nShould return a Tuple of names and a Tuple of values to report.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AllToAll","page":"Dict vectors","title":"Rimu.DictVectors.AllToAll","text":"AllToAll{K,V}(; mpi_comm, n_segments, report) <: Communicator\n\nCommunicator that uses collective communication using MPI.Alltoall[v]!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nn_segments=Threads.nthreads(): the number of segments per rank to use. Should match the PDVec the communicator is used with.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, three implementations are provided, NotDistributed, AllToAll and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\nSee also: PDVec, PDWorkingMemory.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NestedSegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.NestedSegmentedBuffer","text":"NestedSegmentedBuffer{T}(nrows) <: AbstractMatrix{AbstractVector{T}}\n\nMatrix of vectors stored in a single buffer with collective MPI communication support. The number of rows in the matrix is fixed to nrows.\n\nUsed in the AllToAll communication strategy, where each column corresponds to an MPI rank and each row corresponds to a segment in the PDVec.\n\nSupported operations\n\nappend_collections!: add a column to the matrix.\nappend_empty_column!: add an empty column to the matrix.\nmpi_exchange_alltoall!: each rank sends the i-th column of the matrix to the (i-1)-st rank.\nmpi_exchange_allgather!: each rank sends the 1-st column of the matrix to all ranks.\n\nSee also: SegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint{K,V}(; mpi_comm, report) <: Communicator\n\nMPI Communicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\nKeyword arguments\n\nmpi_comm=MPI.COMM_WORLD: the MPI communicator to use.\nreport=false: if set to true, report MPI communication times during a projector Monte Carlo run.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer{T}() <: AbstractVector{AbstractVector{T}}\n\nBehaves like a vector of vectors, but is stored in a single buffer. It can be sent/received over MPI keeping its structure intact. Used in the PointToPoint communication strategy.\n\nSupported operations\n\nreplace_collections!: insert data into the buffers\nmpi_send: send the contents of a buffer to a given rank\nmpi_recv_any!: receive a message sent by mpi_send from any rank, storing the contents in this buffer\n\nSee also: NestedSegmentedBuffer.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.append_collections!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.append_collections!","text":"append_collections!(buf::NestedSegmentedBuffer, iters)\n\nAdd a column to buf. The length of iters should match buf.nrows.\n\nSee also: NestedSegmentedBuffer, append_empty_column!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.append_empty_column!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer}","page":"Dict vectors","title":"Rimu.DictVectors.append_empty_column!","text":"append_empty_column!(buf::NestedSegmentedBuffer)\n\nLike append_collections!, but adds an empty column.\n\nSee also: NestedSegmentedBuffer, append_collections!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as a (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\nSee also: PDVec, PDWorkingMemory, Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if Communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\nSee also: Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_comm","page":"Dict vectors","title":"Rimu.DictVectors.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_allgather!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_allgather!","text":"mpi_exchange_allgather!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe first and only column in src will be sent to all ranks. The data from all ranks will be gethered in dst. After this operation, dst will contain the same data on all ranks.\n\nSee also NestedSegmentedBuffer, mpi_exchange_alltoall!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_exchange_alltoall!-Tuple{Rimu.DictVectors.NestedSegmentedBuffer, Rimu.DictVectors.NestedSegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_exchange_alltoall!","text":"mpi_exchange_alltoall!(src::NestedSegmentedBuffer, dst::NestedSegmentedBuffer, comm)\n\nThe n-th column from src will be sent to rank n-1. The data sent from rank r will be stored in the (r+1)-st column of dst.\n\nSee also: NestedSegmentedBuffer, mpi_exchange_allgather!.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_rank","page":"Dict vectors","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm::MPI_Comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm::MPI.Comm)\n\nSend the buffer to rank with id dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_size","page":"Dict vectors","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into a SegmentedBuffer.\n\njulia> using Rimu.DictVectors: SegmentedBuffer\n\njulia> buf = SegmentedBuffer{Int}()\n0-element SegmentedBuffer{Int64}\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1,2,3], [4,5]])\n2-element SegmentedBuffer{Int64}:\n [1, 2, 3]\n [4, 5]\n\njulia> Rimu.DictVectors.replace_collections!(buf, [[1], [2,3], [4]])\n3-element SegmentedBuffer{Int64}:\n [1]\n [2, 3]\n [4]\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored. If the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\nSee also: PDVec, Communicator.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"}]
}
