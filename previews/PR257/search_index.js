var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Rimu includes an unexported module RMPI, which must be imported to access additional MPI-related functionality.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"using Rimu.RMPI\nmpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(BoseFS{6,6}(1, 1, 1, 1, 1, 1); u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"num_replicas = 3\nreplica_strategy = AllOverlaps(num_replicas; operator = G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntargetwalkers = 100;\ndτ = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"df, state = lomc!(\n    H; style=IsDynamicSemistochastic(),\n    dτ,\n    laststep = steps_equilibrate + steps_measure,\n    targetwalkers,\n    replica_strategy,\n);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $num_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.210397630724869 ± 0.002945411560125692\n   G2(1) = 0.9179375998196901 ± 0.0014487882545570095\n   G2(2) = 0.9824618365485462 ± 0.0008078855891765099\n   G2(3) = 0.9888034965386578 ± 0.0012000192916385307\n   G2(4) = 0.9824618365485462 ± 0.0008078855891765099\n   G2(5) = 0.9179375998196901 ± 0.0014487882545570095\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $num_replicas replicas:\")\nfor i in 1:num_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -3.982824328882403 ± 0.13748856752861724\n   Replica 2: -3.974753826250174 ± 0.12466355058904417\n   Replica 3: -4.011054302602586 ± 0.12438161612595747\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(BoseFS{6,6}(1, 1, 1, 1, 1, 1); u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"targetwalkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(BoseFS{6,6}(1, 1, 1, 1, 1, 1); u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    targetwalkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [targetwalkers];\n    label=\"targetwalkers\", xlabel=\"steps\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.steps, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip400\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip400)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip401\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip400)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip402\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip402)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip402)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip402)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip402)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip400)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip400)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip400)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip400)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip400)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip400)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M1248.87 1391.71 L1248.87 1397.25 Q1246.38 1395.98 1243.71 1395.34 Q1241.04 1394.71 1238.17 1394.71 Q1233.81 1394.71 1231.62 1396.04 Q1229.45 1397.38 1229.45 1400.05 Q1229.45 1402.09 1231.01 1403.27 Q1232.57 1404.41 1237.28 1405.46 L1239.29 1405.91 Q1245.52 1407.25 1248.13 1409.7 Q1250.78 1412.12 1250.78 1416.48 Q1250.78 1421.44 1246.83 1424.34 Q1242.91 1427.23 1236.04 1427.23 Q1233.17 1427.23 1230.06 1426.66 Q1226.97 1426.12 1223.53 1425.01 L1223.53 1418.96 Q1226.78 1420.65 1229.93 1421.51 Q1233.08 1422.33 1236.17 1422.33 Q1240.3 1422.33 1242.53 1420.93 Q1244.76 1419.5 1244.76 1416.92 Q1244.76 1414.54 1243.14 1413.26 Q1241.55 1411.99 1236.1 1410.81 L1234.07 1410.33 Q1228.62 1409.19 1226.2 1406.83 Q1223.79 1404.45 1223.79 1400.31 Q1223.79 1395.28 1227.35 1392.54 Q1230.91 1389.8 1237.47 1389.8 Q1240.72 1389.8 1243.58 1390.28 Q1246.45 1390.76 1248.87 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M1265.89 1380.54 L1265.89 1390.66 L1277.96 1390.66 L1277.96 1395.22 L1265.89 1395.22 L1265.89 1414.57 Q1265.89 1418.93 1267.07 1420.17 Q1268.28 1421.41 1271.94 1421.41 L1277.96 1421.41 L1277.96 1426.31 L1271.94 1426.31 Q1265.16 1426.31 1262.58 1423.8 Q1260.01 1421.25 1260.01 1414.57 L1260.01 1395.22 L1255.71 1395.22 L1255.71 1390.66 L1260.01 1390.66 L1260.01 1380.54 L1265.89 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M1316.15 1407.02 L1316.15 1409.89 L1289.22 1409.89 Q1289.61 1415.94 1292.85 1419.12 Q1296.13 1422.27 1301.96 1422.27 Q1305.33 1422.27 1308.48 1421.44 Q1311.66 1420.61 1314.78 1418.96 L1314.78 1424.5 Q1311.63 1425.83 1308.32 1426.53 Q1305.01 1427.23 1301.61 1427.23 Q1293.08 1427.23 1288.08 1422.27 Q1283.11 1417.3 1283.11 1408.84 Q1283.11 1400.08 1287.82 1394.96 Q1292.57 1389.8 1300.59 1389.8 Q1307.78 1389.8 1311.95 1394.45 Q1316.15 1399.07 1316.15 1407.02 M1310.3 1405.3 Q1310.23 1400.5 1307.59 1397.63 Q1304.98 1394.77 1300.65 1394.77 Q1295.75 1394.77 1292.79 1397.54 Q1289.86 1400.31 1289.42 1405.34 L1310.3 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M1331.43 1420.96 L1331.43 1439.87 L1325.54 1439.87 L1325.54 1390.66 L1331.43 1390.66 L1331.43 1396.07 Q1333.28 1392.89 1336.08 1391.36 Q1338.91 1389.8 1342.82 1389.8 Q1349.32 1389.8 1353.36 1394.96 Q1357.43 1400.12 1357.43 1408.52 Q1357.43 1416.92 1353.36 1422.08 Q1349.32 1427.23 1342.82 1427.23 Q1338.91 1427.23 1336.08 1425.71 Q1333.28 1424.15 1331.43 1420.96 M1351.35 1408.52 Q1351.35 1402.06 1348.68 1398.4 Q1346.04 1394.71 1341.39 1394.71 Q1336.74 1394.71 1334.07 1398.4 Q1331.43 1402.06 1331.43 1408.52 Q1331.43 1414.98 1334.07 1418.67 Q1336.74 1422.33 1341.39 1422.33 Q1346.04 1422.33 1348.68 1418.67 Q1351.35 1414.98 1351.35 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M1389.87 1391.71 L1389.87 1397.25 Q1387.38 1395.98 1384.71 1395.34 Q1382.04 1394.71 1379.17 1394.71 Q1374.81 1394.71 1372.62 1396.04 Q1370.45 1397.38 1370.45 1400.05 Q1370.45 1402.09 1372.01 1403.27 Q1373.57 1404.41 1378.28 1405.46 L1380.29 1405.91 Q1386.52 1407.25 1389.13 1409.7 Q1391.78 1412.12 1391.78 1416.48 Q1391.78 1421.44 1387.83 1424.34 Q1383.91 1427.23 1377.04 1427.23 Q1374.18 1427.23 1371.06 1426.66 Q1367.97 1426.12 1364.53 1425.01 L1364.53 1418.96 Q1367.78 1420.65 1370.93 1421.51 Q1374.08 1422.33 1377.17 1422.33 Q1381.3 1422.33 1383.53 1420.93 Q1385.76 1419.5 1385.76 1416.92 Q1385.76 1414.54 1384.14 1413.26 Q1382.55 1411.99 1377.1 1410.81 L1375.07 1410.33 Q1369.62 1409.19 1367.2 1406.83 Q1364.79 1404.45 1364.79 1400.31 Q1364.79 1395.28 1368.35 1392.54 Q1371.92 1389.8 1378.47 1389.8 Q1381.72 1389.8 1384.58 1390.28 Q1387.45 1390.76 1389.87 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip402)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1260.84 2211.02,1260.84 \"/>\n<polyline clip-path=\"url(#clip402)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1003.17 2211.02,1003.17 \"/>\n<polyline clip-path=\"url(#clip402)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,745.505 2211.02,745.505 \"/>\n<polyline clip-path=\"url(#clip402)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,487.841 2211.02,487.841 \"/>\n<polyline clip-path=\"url(#clip402)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,230.176 2211.02,230.176 \"/>\n<polyline clip-path=\"url(#clip400)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip400)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1260.84 423.181,1260.84 \"/>\n<polyline clip-path=\"url(#clip400)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1003.17 423.181,1003.17 \"/>\n<polyline clip-path=\"url(#clip400)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,745.505 423.181,745.505 \"/>\n<polyline clip-path=\"url(#clip400)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,487.841 423.181,487.841 \"/>\n<polyline clip-path=\"url(#clip400)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,230.176 423.181,230.176 \"/>\n<path clip-path=\"url(#clip400)\" d=\"M356.339 1246.63 Q352.728 1246.63 350.899 1250.2 Q349.094 1253.74 349.094 1260.87 Q349.094 1267.98 350.899 1271.54 Q352.728 1275.08 356.339 1275.08 Q359.973 1275.08 361.779 1271.54 Q363.608 1267.98 363.608 1260.87 Q363.608 1253.74 361.779 1250.2 Q359.973 1246.63 356.339 1246.63 M356.339 1242.93 Q362.149 1242.93 365.205 1247.54 Q368.284 1252.12 368.284 1260.87 Q368.284 1269.6 365.205 1274.2 Q362.149 1278.79 356.339 1278.79 Q350.529 1278.79 347.45 1274.2 Q344.395 1269.6 344.395 1260.87 Q344.395 1252.12 347.45 1247.54 Q350.529 1242.93 356.339 1242.93 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M290.043 1016.52 L306.363 1016.52 L306.363 1020.45 L284.418 1020.45 L284.418 1016.52 Q287.08 1013.76 291.664 1009.13 Q296.27 1004.48 297.451 1003.14 Q299.696 1000.61 300.576 998.876 Q301.478 997.117 301.478 995.427 Q301.478 992.673 299.534 990.937 Q297.613 989.2 294.511 989.2 Q292.312 989.2 289.858 989.964 Q287.427 990.728 284.65 992.279 L284.65 987.557 Q287.474 986.423 289.927 985.844 Q292.381 985.265 294.418 985.265 Q299.789 985.265 302.983 987.95 Q306.177 990.636 306.177 995.126 Q306.177 997.256 305.367 999.177 Q304.58 1001.08 302.474 1003.67 Q301.895 1004.34 298.793 1007.56 Q295.691 1010.75 290.043 1016.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M316.224 985.89 L334.58 985.89 L334.58 989.825 L320.506 989.825 L320.506 998.298 Q321.524 997.95 322.543 997.788 Q323.562 997.603 324.58 997.603 Q330.367 997.603 333.747 1000.77 Q337.126 1003.95 337.126 1009.36 Q337.126 1014.94 333.654 1018.04 Q330.182 1021.12 323.862 1021.12 Q321.687 1021.12 319.418 1020.75 Q317.173 1020.38 314.765 1019.64 L314.765 1014.94 Q316.849 1016.08 319.071 1016.63 Q321.293 1017.19 323.77 1017.19 Q327.774 1017.19 330.112 1015.08 Q332.45 1012.97 332.45 1009.36 Q332.45 1005.75 330.112 1003.64 Q327.774 1001.54 323.77 1001.54 Q321.895 1001.54 320.02 1001.96 Q318.168 1002.37 316.224 1003.25 L316.224 985.89 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M356.339 988.969 Q352.728 988.969 350.899 992.534 Q349.094 996.075 349.094 1003.21 Q349.094 1010.31 350.899 1013.88 Q352.728 1017.42 356.339 1017.42 Q359.973 1017.42 361.779 1013.88 Q363.608 1010.31 363.608 1003.21 Q363.608 996.075 361.779 992.534 Q359.973 988.969 356.339 988.969 M356.339 985.265 Q362.149 985.265 365.205 989.872 Q368.284 994.455 368.284 1003.21 Q368.284 1011.93 365.205 1016.54 Q362.149 1021.12 356.339 1021.12 Q350.529 1021.12 347.45 1016.54 Q344.395 1011.93 344.395 1003.21 Q344.395 994.455 347.45 989.872 Q350.529 985.265 356.339 985.265 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M286.062 728.225 L304.418 728.225 L304.418 732.161 L290.344 732.161 L290.344 740.633 Q291.363 740.286 292.381 740.124 Q293.4 739.938 294.418 739.938 Q300.205 739.938 303.585 743.11 Q306.964 746.281 306.964 751.698 Q306.964 757.276 303.492 760.378 Q300.02 763.457 293.701 763.457 Q291.525 763.457 289.256 763.086 Q287.011 762.716 284.603 761.975 L284.603 757.276 Q286.687 758.41 288.909 758.966 Q291.131 759.522 293.608 759.522 Q297.613 759.522 299.951 757.415 Q302.288 755.309 302.288 751.698 Q302.288 748.086 299.951 745.98 Q297.613 743.874 293.608 743.874 Q291.733 743.874 289.858 744.29 Q288.006 744.707 286.062 745.586 L286.062 728.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M326.177 731.304 Q322.566 731.304 320.737 734.869 Q318.932 738.411 318.932 745.54 Q318.932 752.647 320.737 756.211 Q322.566 759.753 326.177 759.753 Q329.811 759.753 331.617 756.211 Q333.446 752.647 333.446 745.54 Q333.446 738.411 331.617 734.869 Q329.811 731.304 326.177 731.304 M326.177 727.6 Q331.987 727.6 335.043 732.207 Q338.122 736.79 338.122 745.54 Q338.122 754.267 335.043 758.873 Q331.987 763.457 326.177 763.457 Q320.367 763.457 317.288 758.873 Q314.233 754.267 314.233 745.54 Q314.233 736.79 317.288 732.207 Q320.367 727.6 326.177 727.6 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M356.339 731.304 Q352.728 731.304 350.899 734.869 Q349.094 738.411 349.094 745.54 Q349.094 752.647 350.899 756.211 Q352.728 759.753 356.339 759.753 Q359.973 759.753 361.779 756.211 Q363.608 752.647 363.608 745.54 Q363.608 738.411 361.779 734.869 Q359.973 731.304 356.339 731.304 M356.339 727.6 Q362.149 727.6 365.205 732.207 Q368.284 736.79 368.284 745.54 Q368.284 754.267 365.205 758.873 Q362.149 763.457 356.339 763.457 Q350.529 763.457 347.45 758.873 Q344.395 754.267 344.395 745.54 Q344.395 736.79 347.45 732.207 Q350.529 727.6 356.339 727.6 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M284.835 470.561 L307.057 470.561 L307.057 472.551 L294.511 505.121 L289.627 505.121 L301.432 474.496 L284.835 474.496 L284.835 470.561 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M316.224 470.561 L334.58 470.561 L334.58 474.496 L320.506 474.496 L320.506 482.968 Q321.524 482.621 322.543 482.459 Q323.562 482.273 324.58 482.273 Q330.367 482.273 333.747 485.445 Q337.126 488.616 337.126 494.033 Q337.126 499.611 333.654 502.713 Q330.182 505.792 323.862 505.792 Q321.687 505.792 319.418 505.422 Q317.173 505.051 314.765 504.31 L314.765 499.611 Q316.849 500.746 319.071 501.301 Q321.293 501.857 323.77 501.857 Q327.774 501.857 330.112 499.75 Q332.45 497.644 332.45 494.033 Q332.45 490.422 330.112 488.315 Q327.774 486.209 323.77 486.209 Q321.895 486.209 320.02 486.625 Q318.168 487.042 316.224 487.922 L316.224 470.561 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M356.339 473.639 Q352.728 473.639 350.899 477.204 Q349.094 480.746 349.094 487.875 Q349.094 494.982 350.899 498.547 Q352.728 502.088 356.339 502.088 Q359.973 502.088 361.779 498.547 Q363.608 494.982 363.608 487.875 Q363.608 480.746 361.779 477.204 Q359.973 473.639 356.339 473.639 M356.339 469.936 Q362.149 469.936 365.205 474.542 Q368.284 479.125 368.284 487.875 Q368.284 496.602 365.205 501.209 Q362.149 505.792 356.339 505.792 Q350.529 505.792 347.45 501.209 Q344.395 496.602 344.395 487.875 Q344.395 479.125 347.45 474.542 Q350.529 469.936 356.339 469.936 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M256.664 243.521 L264.303 243.521 L264.303 217.155 L255.992 218.822 L255.992 214.562 L264.256 212.896 L268.932 212.896 L268.932 243.521 L276.571 243.521 L276.571 247.456 L256.664 247.456 L256.664 243.521 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M296.015 215.974 Q292.404 215.974 290.576 219.539 Q288.77 223.081 288.77 230.21 Q288.77 237.317 290.576 240.882 Q292.404 244.423 296.015 244.423 Q299.65 244.423 301.455 240.882 Q303.284 237.317 303.284 230.21 Q303.284 223.081 301.455 219.539 Q299.65 215.974 296.015 215.974 M296.015 212.271 Q301.826 212.271 304.881 216.877 Q307.96 221.461 307.96 230.21 Q307.96 238.937 304.881 243.544 Q301.826 248.127 296.015 248.127 Q290.205 248.127 287.127 243.544 Q284.071 238.937 284.071 230.21 Q284.071 221.461 287.127 216.877 Q290.205 212.271 296.015 212.271 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M326.177 215.974 Q322.566 215.974 320.737 219.539 Q318.932 223.081 318.932 230.21 Q318.932 237.317 320.737 240.882 Q322.566 244.423 326.177 244.423 Q329.811 244.423 331.617 240.882 Q333.446 237.317 333.446 230.21 Q333.446 223.081 331.617 219.539 Q329.811 215.974 326.177 215.974 M326.177 212.271 Q331.987 212.271 335.043 216.877 Q338.122 221.461 338.122 230.21 Q338.122 238.937 335.043 243.544 Q331.987 248.127 326.177 248.127 Q320.367 248.127 317.288 243.544 Q314.233 238.937 314.233 230.21 Q314.233 221.461 317.288 216.877 Q320.367 212.271 326.177 212.271 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M356.339 215.974 Q352.728 215.974 350.899 219.539 Q349.094 223.081 349.094 230.21 Q349.094 237.317 350.899 240.882 Q352.728 244.423 356.339 244.423 Q359.973 244.423 361.779 240.882 Q363.608 237.317 363.608 230.21 Q363.608 223.081 361.779 219.539 Q359.973 215.974 356.339 215.974 M356.339 212.271 Q362.149 212.271 365.205 216.877 Q368.284 221.461 368.284 230.21 Q368.284 238.937 365.205 243.544 Q362.149 248.127 356.339 248.127 Q350.529 248.127 347.45 243.544 Q344.395 238.937 344.395 230.21 Q344.395 221.461 347.45 216.877 Q350.529 212.271 356.339 212.271 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip402)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,230.176 4017.76,230.176 \"/>\n<polyline clip-path=\"url(#clip402)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1249.42 456.554,1249.35 457.123,1249.16 457.691,1248.92 458.259,1248.64 458.828,1248.25 459.396,1247.82 459.964,1247.27 460.533,1246.67 461.101,1246.02 461.669,1245.29 462.238,1243.44 462.806,1242.56 463.375,1241.59 463.943,1240.52 464.511,1238.31 465.08,1237.04 465.648,1235.65 466.216,1234.16 466.785,1232.56 467.353,1230.81 467.921,1227.91 468.49,1225.9 469.058,1223.75 469.626,1221.44 470.195,1218.96 470.763,1216.32 471.331,1213.52 471.9,1210.54 472.468,1207.38 473.036,1203 473.605,1199.35 474.173,1194.49 474.741,1190.41 475.31,1186.15 475.878,1181.7 476.446,1176.96 477.015,1172.01 477.583,1166.9 478.152,1158.43 478.72,1152.64 479.288,1146.63 479.857,1139.3 480.425,1132.87 480.993,1124.1 481.562,1115.11 482.13,1108.14 482.698,1098.9 483.267,1090.54 483.835,1081.87 484.403,1072.89 484.972,1063.82 485.54,1053.54 486.108,1042.84 486.677,1032.1 487.245,1023.32 487.813,1014.33 488.382,1005.27 488.95,994.926 489.518,984.551 490.087,973.041 490.655,962.523 491.224,950.976 491.792,941.261 492.36,931.636 492.929,920.768 493.497,910.021 494.065,898.198 494.634,886.52 495.202,876.688 495.77,865.658 496.339,853.793 496.907,842.943 497.475,831.116 498.044,819.341 498.612,805.569 499.18,796.129 499.749,786.658 500.317,777.22 500.885,767.824 501.454,755.302 502.022,746.146 502.59,736.071 503.159,722.909 503.727,713.028 504.295,704.256 504.864,695.551 505.432,685.813 506.001,675.116 506.569,664.561 507.137,654.228 507.706,645.086 508.274,636.069 508.842,627.151 509.411,618.515 509.979,611.911 510.547,602.268 511.116,595.805 511.684,587.187 512.252,578.889 512.821,569.541 513.389,559.543 513.957,552.723 514.526,541.871 515.094,534.739 515.662,528.546 516.231,520.411 516.799,513.591 517.367,505.86 517.936,497.277 518.504,487.906 519.072,482.828 519.641,477.647 520.209,471.759 520.778,466.904 521.346,458.141 521.914,453.72 522.483,448.158 523.051,439.489 523.619,433.258 524.188,430.513 524.756,426.672 525.324,421.888 525.893,418.271 526.461,415.429 527.029,408.653 527.598,406.17 528.166,401.359 528.734,396.819 529.303,393.543 529.871,387.931 530.439,382.83 531.008,379.801 531.576,374.846 532.144,373.285 532.713,370.46 533.281,365.811 533.85,362.2 534.418,359.886 534.986,358.575 535.555,356.168 536.123,353.611 536.691,349.119 537.26,346.822 537.828,343.652 538.396,340.707 538.965,335.879 539.533,334.9 540.101,329.768 540.67,327.098 541.238,324.715 541.806,322.286 542.375,320.841 542.943,319.397 543.511,319.082 544.08,317.653 544.648,314.063 545.216,310.584 545.785,307.265 546.353,304.079 546.921,302.466 547.49,301.758 548.058,298.656 548.627,299.073 549.195,296.126 549.763,294.544 550.332,291.992 550.9,289.367 551.468,288.034 552.037,288.625 552.605,285.132 553.173,284.906 553.742,283.729 554.31,281.632 554.878,278.557 555.447,276.744 556.015,273.697 556.583,275.855 557.152,274.768 557.72,271.999 558.288,274.377 558.857,273.352 559.425,272.647 559.993,270.788 560.562,273.033 561.13,268.702 561.698,267.921 562.267,268.142 562.835,267.175 563.404,266.304 563.972,266.605 564.54,266.659 565.109,263.647 565.677,261.81 566.245,263.027 566.814,262.368 567.382,263.613 567.95,259.847 568.519,260.136 569.087,261.583 569.655,260.625 570.224,258.9 570.792,262.381 571.36,260.271 571.929,258.949 572.497,260.27 573.065,260.21 573.634,261.425 574.202,260.262 574.77,260.429 575.339,258.29 575.907,258.398 576.476,257.423 577.044,254.442 577.612,254.853 578.181,254.054 578.749,252.285 579.317,252.678 579.886,252.974 580.454,252.212 581.022,252.489 581.591,252.658 582.159,250.899 582.727,252.434 583.296,252.526 583.864,253.632 584.432,252.532 585.001,250.629 585.569,249.714 586.137,249.934 586.706,250.034 587.274,249.213 587.842,251.409 588.411,249.243 588.979,250.474 589.547,252.72 590.116,251.622 590.684,251.511 591.253,251.292 591.821,249.184 592.389,248.164 592.958,249.307 593.526,249.395 594.094,248.276 594.663,248.275 595.231,249.497 595.799,249.708 596.368,248.716 596.936,247.528 597.504,245.612 598.073,244.65 598.641,244.895 599.209,245.304 599.778,243.297 600.346,241.498 600.914,243.778 601.483,243.855 602.051,243.123 602.619,243.474 603.188,244.933 603.756,244.146 604.325,245.317 604.893,246.276 605.461,249.37 606.03,248.199 606.598,248.824 607.166,248.727 607.735,247.428 608.303,248.388 608.871,248.143 609.44,248.976 610.008,248.848 610.576,249.503 611.145,249.117 611.713,249.751 612.281,248.25 612.85,244.826 613.418,244.747 613.986,244.553 614.555,244.402 615.123,244.391 615.691,244.096 616.26,243.923 616.828,245.013 617.396,244.941 617.965,246.845 618.533,246.502 619.102,246.242 619.67,245.748 620.238,245.402 620.807,246.278 621.375,242.811 621.943,243.651 622.512,242.348 623.08,244.079 623.648,245.809 624.217,244.45 624.785,244.137 625.353,243.684 625.922,242.305 626.49,241.104 627.058,239.831 627.627,237.575 628.195,236.737 628.763,236.969 629.332,236.203 629.9,236.348 630.468,237.642 631.037,234.715 631.605,235.051 632.173,235.218 632.742,236.625 633.31,235.81 633.879,235.906 634.447,236.118 635.015,236.122 635.584,235.1 636.152,235.59 636.72,234.887 637.289,237.118 637.857,236.042 638.425,234.162 638.994,231.382 639.562,229.938 640.13,228.56 640.699,228.966 641.267,227.614 641.835,229.404 642.404,230.243 642.972,231.848 643.54,231.346 644.109,234.059 644.677,234.422 645.245,234.622 645.814,233.657 646.382,232.926 646.951,233.245 647.519,233.505 648.087,231.909 648.656,234.214 649.224,234.621 649.792,234.633 650.361,234.035 650.929,235.473 651.497,236.882 652.066,237.996 652.634,235.975 653.202,237.278 653.771,235.267 654.339,234.412 654.907,233.917 655.476,232.148 656.044,231.804 656.612,231.314 657.181,230.868 657.749,232.586 658.317,231.871 658.886,229.513 659.454,230.082 660.022,229.518 660.591,230.272 661.159,231.721 661.728,232.379 662.296,231.739 662.864,233.006 663.433,233.237 664.001,233.555 664.569,234.035 665.138,231.183 665.706,231.704 666.274,233.152 666.843,233.616 667.411,236.1 667.979,236.233 668.548,237.567 669.116,239.561 669.684,238.53 670.253,238.544 670.821,244.529 671.389,242.9 671.958,242.59 672.526,241.267 673.094,242.033 673.663,240.682 674.231,240.408 674.799,241.173 675.368,240.814 675.936,240.478 676.505,242.401 677.073,241.799 677.641,243.533 678.21,241.997 678.778,241.546 679.346,240.058 679.915,238.652 680.483,237.372 681.051,238.051 681.62,236.786 682.188,236.667 682.756,236.555 683.325,235.619 683.893,234.399 684.461,235.508 685.03,233.237 685.598,233.341 686.166,232.46 686.735,231.664 687.303,231.757 687.871,234.029 688.44,233.919 689.008,232.951 689.577,232.192 690.145,232.658 690.713,233.863 691.282,231.797 691.85,229.767 692.418,229.182 692.987,229.712 693.555,234.271 694.123,232.01 694.692,230.261 695.26,229.612 695.828,231.873 696.397,232.984 696.965,233.035 697.533,231.094 698.102,233.291 698.67,233.483 699.238,232.452 699.807,231.519 700.375,231.811 700.943,231.959 701.512,231.264 702.08,232.694 702.648,233.984 703.217,231.842 703.785,231.892 704.354,231.871 704.922,232.995 705.49,235.864 706.059,234.614 706.627,232.541 707.195,231.667 707.764,230.725 708.332,229.232 708.9,228.665 709.469,228.093 710.037,230.697 710.605,231.193 711.174,232.57 711.742,231.771 712.31,231.923 712.879,231.193 713.447,231.403 714.015,231.888 714.584,231.717 715.152,228.845 715.72,233.349 716.289,234.584 716.857,234.56 717.425,232.61 717.994,233.674 718.562,235.669 719.131,235.592 719.699,236.682 720.267,235.517 720.836,235.378 721.404,236.233 721.972,236.245 722.541,236.194 723.109,233.999 723.677,233.865 724.246,235.08 724.814,234.914 725.382,236.769 725.951,238.618 726.519,237.311 727.087,239.345 727.656,236.083 728.224,237.076 728.792,237.771 729.361,238.27 729.929,237.045 730.497,236.836 731.066,238.969 731.634,237.666 732.203,238.308 732.771,237.89 733.339,239.92 733.908,240.492 734.476,240.046 735.044,240.339 735.613,240.848 736.181,238.02 736.749,236.748 737.318,234.369 737.886,234.223 738.454,234.164 739.023,231.985 739.591,233.979 740.159,233.649 740.728,232.584 741.296,230.558 741.864,232.602 742.433,231.423 743.001,231.373 743.569,229.445 744.138,228.688 744.706,231.106 745.274,228.822 745.843,231.183 746.411,232.332 746.98,233.403 747.548,232.159 748.116,237.328 748.685,238.061 749.253,237.762 749.821,236.259 750.39,234.932 750.958,233.824 751.526,233.802 752.095,236.803 752.663,237.324 753.231,236.978 753.8,237.641 754.368,237.039 754.936,235.732 755.505,234.415 756.073,234.172 756.641,232.864 757.21,232.595 757.778,233.699 758.346,231.667 758.915,232.94 759.483,230.878 760.052,229.879 760.62,230.938 761.188,229.826 761.757,229.896 762.325,229.799 762.893,229.877 763.462,228.084 764.03,230.334 764.598,229.266 765.167,231.482 765.735,230.431 766.303,230.703 766.872,229.729 767.44,227.715 768.008,227.972 768.577,227.073 769.145,227.386 769.713,228.626 770.282,226.543 770.85,226.922 771.418,229.115 771.987,228.183 772.555,227.319 773.123,230.662 773.692,230.812 774.26,227.862 774.829,228.053 775.397,227.995 775.965,229.219 776.534,232.267 777.102,231.34 777.67,231.398 778.239,232.372 778.807,233.382 779.375,234.157 779.944,232.838 780.512,231.815 781.08,231.654 781.649,230.561 782.217,229.509 782.785,231.692 783.354,232.66 783.922,231.598 784.49,232.522 785.059,232.455 785.627,232.21 786.195,231.191 786.764,231.298 787.332,230.384 787.9,230.434 788.469,229.614 789.037,227.607 789.606,227.869 790.174,227.022 790.742,226.22 791.311,225.65 791.879,227.229 792.447,225.366 793.016,221.797 793.584,221.531 794.152,222.172 794.721,222.981 795.289,223.699 795.857,224.235 796.426,222.933 796.994,224.616 797.562,224.136 798.131,225.916 798.699,227.428 799.267,227.84 799.836,228.191 800.404,226.62 800.972,228.459 801.541,230.024 802.109,228.264 802.678,227.574 803.246,225.861 803.814,226.443 804.383,224.932 804.951,225.366 805.519,226.953 806.088,227.317 806.656,226.792 807.224,226.211 807.793,226.647 808.361,227.233 808.929,225.55 809.498,228.182 810.066,228.587 810.634,228.079 811.203,230.585 811.771,230.916 812.339,232.181 812.908,234.366 813.476,234.377 814.044,233.309 814.613,235.312 815.181,235.209 815.749,233.99 816.318,235.152 816.886,234.115 817.455,234.021 818.023,232.8 818.591,232.84 819.16,230.542 819.728,230.873 820.296,230.097 820.865,230.15 821.433,231.471 822.001,234.769 822.57,235.674 823.138,235.4 823.706,236.2 824.275,237.019 824.843,237.58 825.411,239.205 825.98,235.721 826.548,233.701 827.116,234.664 827.685,234.385 828.253,234.225 828.821,234.979 829.39,235.627 829.958,235.982 830.526,235.782 831.095,236.582 831.663,234.106 832.232,233.741 832.8,231.523 833.368,230.527 833.937,230.56 834.505,231.693 835.073,231.938 835.642,235.232 836.21,234.147 836.778,235.036 837.347,234.902 837.915,233.667 838.483,232.51 839.052,232.535 839.62,232.535 840.188,232.811 840.757,232.631 841.325,232.558 841.893,230.529 842.462,232.625 843.03,231.459 843.598,231.458 844.167,232.514 844.735,231.55 845.304,231.403 845.872,232.519 846.44,233.644 847.009,230.387 847.577,234.629 848.145,234.396 848.714,234.102 849.282,232.958 849.85,232.823 850.419,232.665 850.987,230.409 851.555,231.21 852.124,231.146 852.692,233.365 853.26,234.504 853.829,233.185 854.397,232.961 854.965,229.559 855.534,228.484 856.102,229.89 856.67,229.008 857.239,229.076 857.807,229.232 858.375,229.481 858.944,229.818 859.512,230.93 860.081,230.969 860.649,231.938 861.217,230.568 861.786,231.663 862.354,233.429 862.922,231.848 863.491,232.624 864.059,233.515 864.627,233.256 865.196,229.961 865.764,231.076 866.332,232.134 866.901,233.082 867.469,232.881 868.037,232.543 868.606,233.146 869.174,233.823 869.742,232.662 870.311,232.581 870.879,231.415 871.447,230.393 872.016,230.476 872.584,232.48 873.152,232.553 873.721,234.217 874.289,231.961 874.858,231.863 875.426,229.709 875.994,228.488 876.563,228.608 877.131,232.709 877.699,231.597 878.268,231.56 878.836,232.728 879.404,232.711 879.973,231.507 880.541,232.398 881.109,234.221 881.678,234.092 882.246,234.786 882.814,234.367 883.383,233.141 883.951,232.033 884.519,232.835 885.088,231.587 885.656,230.41 886.224,230.338 886.793,229.431 887.361,230.441 887.93,229.519 888.498,227.694 889.066,228.833 889.635,228.73 890.203,230.006 890.771,228.979 891.34,227.016 891.908,228.122 892.476,228.991 893.045,227.728 893.613,225.852 894.181,227.382 894.75,227.716 895.318,225.627 895.886,223.922 896.455,225.224 897.023,225.489 897.591,228.029 898.16,230.141 898.728,228.077 899.296,228.3 899.865,227.388 900.433,229.687 901.001,228.772 901.57,228.83 902.138,230.02 902.707,228.073 903.275,226.261 903.843,225.581 904.412,227.863 904.98,229.261 905.548,229.272 906.117,230.513 906.685,230.536 907.253,231.862 907.822,232.959 908.39,232.612 908.958,232.504 909.527,232.408 910.095,235.347 910.663,235.271 911.232,235.019 911.8,233.681 912.368,233.68 912.937,232.456 913.505,230.289 914.073,228.395 914.642,227.507 915.21,228.926 915.779,229.091 916.347,228.257 916.915,230.555 917.484,231.664 918.052,232.562 918.62,232.206 919.189,232.229 919.757,234.507 920.325,233.129 920.894,234.012 921.462,234.84 922.03,235.513 922.599,235.056 923.167,234.724 923.735,235.411 924.304,235.824 924.872,235.477 925.44,235.13 926.009,235.749 926.577,236.462 927.145,235.011 927.714,233.459 928.282,232.119 928.85,231.789 929.419,230.532 929.987,230.408 930.556,229.388 931.124,229.309 931.692,227.309 932.261,227.542 932.829,227.896 933.397,228.104 933.966,226.118 934.534,226.319 935.102,227.59 935.671,226.599 936.239,226.864 936.807,227.029 937.376,227.212 937.944,226.447 938.512,226.73 939.081,226.933 939.649,226.032 940.217,225.34 940.786,226.993 941.354,227.381 941.922,227.559 942.491,227.789 943.059,227.997 943.627,227.215 944.196,226.567 944.764,225.874 945.333,225.14 945.901,227.392 946.469,226.569 947.038,225.999 947.606,225.433 948.174,226.845 948.743,220.927 949.311,220.761 949.879,221.806 950.448,223.492 951.016,223.069 951.584,224.801 952.153,228.186 952.721,230.568 953.289,231.613 953.858,232.563 954.426,231.397 954.994,232.541 955.563,231.682 956.131,231.666 956.699,232.855 957.268,233.729 957.836,232.691 958.405,231.642 958.973,232.852 959.541,230.587 960.11,229.655 960.678,228.728 961.246,228.903 961.815,230.274 962.383,228.46 962.951,229.834 963.52,227.869 964.088,231.183 964.656,232.138 965.225,229.18 965.793,227.424 966.361,229.602 966.93,227.66 967.498,227.217 968.066,227.621 968.635,228.027 969.203,226.08 969.771,226.366 970.34,226.763 970.908,227.021 971.476,227.368 972.045,228.838 972.613,227.062 973.182,227.343 973.75,224.727 974.318,225.424 974.887,226.773 975.455,229.176 976.023,227.451 976.592,228.777 977.16,231.021 977.728,229.947 978.297,231.345 978.865,233.687 979.433,235.773 980.002,233.617 980.57,232.461 981.138,234.546 981.707,235.656 982.275,233.372 982.843,232.348 983.412,233.481 983.98,236.316 984.548,235.818 985.117,235.685 985.685,233.614 986.253,234.18 986.822,234.121 987.39,233.891 987.959,233.797 988.527,232.501 989.095,232.322 989.664,233.253 990.232,232.339 990.8,232.237 991.369,230.161 991.937,230.338 992.505,229.38 993.074,230.682 993.642,231.748 994.21,228.8 994.779,231.951 995.347,231.837 995.915,231.794 996.484,232.728 997.052,231.685 997.62,231.416 998.189,233.218 998.757,233.204 999.325,234.061 999.894,234.941 1000.46,236.886 1001.03,236.521 1001.6,237.311 1002.17,234.728 1002.74,234.393 1003.3,233.254 1003.87,234.133 1004.44,233.878 1005.01,233.714 1005.58,232.386 1006.15,232.522 1006.71,233.246 1007.28,233.335 1007.85,234.257 1008.42,234.912 1008.99,234.454 1009.56,235.249 1010.12,233.967 1010.69,232.774 1011.26,232.5 1011.83,232.56 1012.4,230.469 1012.97,231.68 1013.53,234.515 1014.1,234.19 1014.67,233.001 1015.24,233.072 1015.81,233.825 1016.38,231.498 1016.94,233.304 1017.51,234.083 1018.08,232.761 1018.65,233.438 1019.22,232.156 1019.79,233.239 1020.35,232.72 1020.92,232.431 1021.49,233.316 1022.06,233.194 1022.63,235.023 1023.2,233.616 1023.76,232.122 1024.33,229.907 1024.9,229.829 1025.47,229.88 1026.04,228.765 1026.61,228.801 1027.17,226.482 1027.74,226.606 1028.31,225.787 1028.88,226.971 1029.45,227.023 1030.02,227.208 1030.58,230.434 1031.15,231.162 1031.72,231 1032.29,229.885 1032.86,230.833 1033.43,228.683 1033.99,229.917 1034.56,229.656 1035.13,230.804 1035.7,232.705 1036.27,232.28 1036.84,231.85 1037.4,232.748 1037.97,230.361 1038.54,231.426 1039.11,231.413 1039.68,230.49 1040.25,228.243 1040.81,228.366 1041.38,229.41 1041.95,230.325 1042.52,229.159 1043.09,230.256 1043.66,229.006 1044.22,227.925 1044.79,227.108 1045.36,229.34 1045.93,229.215 1046.5,228.324 1047.07,231.499 1047.63,231.349 1048.2,231.332 1048.77,229.315 1049.34,228.62 1049.91,228.683 1050.48,227.682 1051.05,225.678 1051.61,226.773 1052.18,228.092 1052.75,226.985 1053.32,227.297 1053.89,225.27 1054.46,225.781 1055.02,225.035 1055.59,225.631 1056.16,225.884 1056.73,226.089 1057.3,226.545 1057.87,226.795 1058.43,227.306 1059,227.606 1059.57,228.874 1060.14,230.239 1060.71,232.246 1061.28,231.054 1061.84,232.089 1062.41,230.962 1062.98,229.835 1063.55,229.774 1064.12,229.783 1064.69,226.899 1065.25,228.2 1065.82,229.186 1066.39,229.244 1066.96,230.502 1067.53,231.519 1068.1,230.505 1068.66,230.48 1069.23,229.566 1069.8,229.776 1070.37,231.759 1070.94,231.749 1071.51,230.677 1072.07,229.572 1072.64,228.356 1073.21,228.516 1073.78,229.916 1074.35,227.832 1074.92,228.023 1075.48,227.028 1076.05,227.173 1076.62,226.522 1077.19,227.99 1077.76,228.375 1078.33,228.287 1078.89,228.593 1079.46,229.669 1080.03,228.69 1080.6,229.931 1081.17,231.134 1081.74,231.171 1082.3,230.144 1082.87,229.175 1083.44,229.185 1084.01,228.281 1084.58,230.547 1085.15,232.822 1085.71,231.813 1086.28,233.741 1086.85,233.347 1087.42,233.116 1087.99,231.044 1088.56,231.239 1089.12,233.293 1089.69,235.073 1090.26,235.647 1090.83,236.419 1091.4,235.002 1091.97,234.725 1092.53,233.473 1093.1,235.501 1093.67,233.098 1094.24,230.763 1094.81,229.663 1095.38,227.584 1095.94,230.844 1096.51,229.641 1097.08,230.689 1097.65,230.528 1098.22,231.356 1098.79,231.221 1099.35,231.29 1099.92,230.118 1100.49,226.878 1101.06,228.256 1101.63,227.609 1102.2,226.414 1102.76,225.656 1103.33,226.11 1103.9,228.28 1104.47,227.311 1105.04,226.486 1105.61,227.739 1106.17,228.678 1106.74,230.655 1107.31,231.576 1107.88,233.378 1108.45,232.23 1109.02,234.238 1109.58,233.809 1110.15,230.64 1110.72,233.442 1111.29,233.277 1111.86,235.025 1112.43,236.703 1112.99,234.299 1113.56,234.99 1114.13,232.32 1114.7,232.18 1115.27,232.066 1115.84,231.994 1116.4,233.859 1116.97,232.701 1117.54,231.427 1118.11,229.429 1118.68,226.167 1119.25,225.854 1119.81,229.238 1120.38,228.198 1120.95,229.513 1121.52,230.486 1122.09,231.315 1122.66,234.419 1123.23,234.106 1123.79,234.824 1124.36,233.285 1124.93,234.216 1125.5,233.876 1126.07,233.807 1126.64,233.434 1127.2,234.086 1127.77,234.039 1128.34,232.607 1128.91,232.152 1129.48,232.037 1130.05,230.713 1130.61,230.568 1131.18,230.485 1131.75,231.172 1132.32,230.856 1132.89,232.772 1133.46,232.627 1134.02,232.444 1134.59,231.387 1135.16,232.237 1135.73,232.879 1136.3,232.458 1136.87,232.214 1137.43,232.99 1138,233.607 1138.57,233.172 1139.14,232.92 1139.71,232.53 1140.28,233.199 1140.84,234.004 1141.41,233.855 1141.98,234.487 1142.55,232.892 1143.12,231.493 1143.69,231.131 1144.25,226.788 1144.82,224.892 1145.39,225.212 1145.96,225.434 1146.53,222.611 1147.1,221.107 1147.66,220.846 1148.23,221.448 1148.8,223.086 1149.37,222.536 1149.94,223.014 1150.51,223.493 1151.07,224.135 1151.64,224.638 1152.21,225.921 1152.78,227.332 1153.35,226.684 1153.92,227.758 1154.48,227.888 1155.05,227.881 1155.62,227.16 1156.19,228.385 1156.76,228.496 1157.33,228.667 1157.89,228.923 1158.46,227.895 1159.03,226.945 1159.6,226.339 1160.17,226.542 1160.74,227.913 1161.3,226.053 1161.87,226.568 1162.44,227.977 1163.01,228.284 1163.58,228.461 1164.15,232.776 1164.71,231.537 1165.28,232.479 1165.85,231.567 1166.42,228.353 1166.99,228.663 1167.56,229.925 1168.12,230.928 1168.69,231.922 1169.26,231.95 1169.83,232.944 1170.4,232.778 1170.97,233.399 1171.53,231.29 1172.1,233.256 1172.67,232.949 1173.24,231.805 1173.81,231.683 1174.38,230.628 1174.94,228.523 1175.51,227.674 1176.08,228.865 1176.65,229.105 1177.22,231.194 1177.79,230.229 1178.35,232.191 1178.92,232.119 1179.49,232 1180.06,232.778 1180.63,232.523 1181.2,231.318 1181.76,228.224 1182.33,229.372 1182.9,225.314 1183.47,223.484 1184.04,224.103 1184.61,221.554 1185.17,222.356 1185.74,222.022 1186.31,222.473 1186.88,225.003 1187.45,227.587 1188.02,228.764 1188.58,227.876 1189.15,226.163 1189.72,227.428 1190.29,226.581 1190.86,228.755 1191.43,226.029 1192,224.372 1192.56,223.839 1193.13,225.597 1193.7,227.186 1194.27,228.362 1194.84,227.43 1195.41,228.869 1195.97,229.009 1196.54,229.253 1197.11,231.494 1197.68,232.645 1198.25,233.542 1198.82,236.479 1199.38,236.268 1199.95,235.946 1200.52,236.671 1201.09,235.269 1201.66,234.018 1202.23,234.907 1202.79,236.532 1203.36,236.278 1203.93,236.805 1204.5,233.611 1205.07,233.542 1205.64,233.163 1206.2,231.882 1206.77,232.791 1207.34,231.645 1207.91,231.574 1208.48,230.622 1209.05,230.642 1209.61,230.585 1210.18,230.844 1210.75,231.57 1211.32,230.441 1211.89,231.28 1212.46,233.223 1213.02,230.948 1213.59,231.946 1214.16,231.918 1214.73,231.792 1215.3,231.812 1215.87,232.937 1216.43,230.747 1217,231.808 1217.57,229.599 1218.14,231.788 1218.71,229.787 1219.28,231.113 1219.84,229.003 1220.41,230.17 1220.98,227.2 1221.55,229.535 1222.12,229.464 1222.69,229.707 1223.25,230.952 1223.82,227.133 1224.39,227.369 1224.96,226.621 1225.53,228.788 1226.1,227.896 1226.66,228.017 1227.23,226.275 1227.8,226.579 1228.37,225.901 1228.94,225.297 1229.51,225.837 1230.07,227.668 1230.64,225.719 1231.21,225.846 1231.78,222.251 1232.35,222.851 1232.92,226.552 1233.48,228.088 1234.05,226.337 1234.62,229.889 1235.19,230.101 1235.76,230.392 1236.33,230.583 1236.89,228.582 1237.46,229.861 1238.03,233.192 1238.6,233.19 1239.17,234.229 1239.74,235.232 1240.3,234.951 1240.87,234.882 1241.44,233.723 1242.01,234.543 1242.58,233.098 1243.15,234.938 1243.71,234.941 1244.28,234.662 1244.85,235.362 1245.42,235.883 1245.99,234.549 1246.56,234.194 1247.12,237.137 1247.69,236.653 1248.26,238.454 1248.83,237.186 1249.4,238.582 1249.97,237.878 1250.53,237.464 1251.1,234.667 1251.67,233.167 1252.24,233.91 1252.81,232.609 1253.38,235.659 1253.94,233.127 1254.51,231.898 1255.08,231.858 1255.65,231.576 1256.22,231.152 1256.79,232.113 1257.35,231.957 1257.92,232.904 1258.49,233.742 1259.06,234.463 1259.63,232.201 1260.2,231.955 1260.76,232.838 1261.33,232.386 1261.9,234.358 1262.47,233.05 1263.04,233.526 1263.61,232.128 1264.18,232.781 1264.74,231.372 1265.31,233.285 1265.88,233.928 1266.45,233.58 1267.02,234.414 1267.59,234.128 1268.15,234.905 1268.72,234.21 1269.29,233.689 1269.86,232.437 1270.43,231.972 1271,231.593 1271.56,229.019 1272.13,230.13 1272.7,230.045 1273.27,230.893 1273.84,229.68 1274.41,228.65 1274.97,231.67 1275.54,232.45 1276.11,232.38 1276.68,233.266 1277.25,232.871 1277.82,232.241 1278.38,234.015 1278.95,234.678 1279.52,235.012 1280.09,236.289 1280.66,236.548 1281.23,236.843 1281.79,234.104 1282.36,234.722 1282.93,233.163 1283.5,230.657 1284.07,231.294 1284.64,231.167 1285.2,231.713 1285.77,230.468 1286.34,231.133 1286.91,229.636 1287.48,228.619 1288.05,230.61 1288.61,230.086 1289.18,228.827 1289.75,228.532 1290.32,226.467 1290.89,224.246 1291.46,224.541 1292.02,223.702 1292.59,222.995 1293.16,224.618 1293.73,223.782 1294.3,224.011 1294.87,222.079 1295.43,220.242 1296,223.028 1296.57,222.568 1297.14,224.2 1297.71,223.539 1298.28,222.715 1298.84,222.135 1299.41,223.514 1299.98,223.893 1300.55,226.397 1301.12,225.498 1301.69,225.616 1302.25,225.744 1302.82,224.886 1303.39,224.2 1303.96,225.454 1304.53,226.665 1305.1,225.613 1305.66,227.04 1306.23,225.197 1306.8,224.391 1307.37,224.767 1307.94,227.414 1308.51,224.637 1309.07,223.765 1309.64,223.204 1310.21,224.968 1310.78,226.315 1311.35,227.564 1311.92,226.979 1312.48,226.393 1313.05,226.823 1313.62,226.049 1314.19,230.401 1314.76,230.223 1315.33,229.118 1315.89,228.308 1316.46,226.474 1317.03,228.149 1317.6,228.288 1318.17,227.638 1318.74,228.814 1319.3,226.825 1319.87,226.141 1320.44,226.36 1321.01,226.85 1321.58,226.866 1322.15,226.125 1322.71,227.444 1323.28,226.453 1323.85,227.814 1324.42,227.154 1324.99,226.326 1325.56,228.767 1326.12,228.016 1326.69,229.288 1327.26,230.527 1327.83,230.578 1328.4,230.096 1328.97,232.179 1329.53,233.013 1330.1,231.75 1330.67,233.763 1331.24,232.54 1331.81,232.473 1332.38,233.38 1332.94,235.413 1333.51,236.273 1334.08,237.026 1334.65,238.773 1335.22,238.257 1335.79,237.628 1336.36,238.125 1336.92,237.702 1337.49,237.074 1338.06,235.739 1338.63,234.154 1339.2,231.601 1339.77,230.586 1340.33,231.667 1340.9,230.286 1341.47,232.451 1342.04,230.163 1342.61,230.128 1343.18,230.096 1343.74,229.106 1344.31,229.206 1344.88,227.353 1345.45,226.621 1346.02,226.879 1346.59,228.255 1347.15,227.532 1347.72,226.725 1348.29,226.146 1348.86,227.586 1349.43,228.967 1350,229.201 1350.56,230.144 1351.13,230.21 1351.7,230.103 1352.27,230.267 1352.84,231.472 1353.41,232.549 1353.97,233.411 1354.54,233.283 1355.11,231.208 1355.68,230.178 1356.25,232.269 1356.82,232.062 1357.38,231.819 1357.95,232.901 1358.52,234.78 1359.09,234.728 1359.66,233.459 1360.23,233.348 1360.79,234.094 1361.36,234.897 1361.93,231.42 1362.5,229.082 1363.07,228.968 1363.64,229.992 1364.2,227.83 1364.77,227.892 1365.34,227.851 1365.91,225.755 1366.48,227.316 1367.05,227.61 1367.61,225.541 1368.18,224.828 1368.75,225.02 1369.32,224.365 1369.89,224.718 1370.46,226.477 1371.02,226.854 1371.59,227.108 1372.16,227.524 1372.73,226.783 1373.3,224.023 1373.87,225.613 1374.43,226.121 1375,226.681 1375.57,229.137 1376.14,229.39 1376.71,230.759 1377.28,230.428 1377.84,229.757 1378.41,229.952 1378.98,231.113 1379.55,231.236 1380.12,232.45 1380.69,229.118 1381.25,229.511 1381.82,228.843 1382.39,231.349 1382.96,231.265 1383.53,229.449 1384.1,230.578 1384.66,230.753 1385.23,231.925 1385.8,231.751 1386.37,234.73 1386.94,234.301 1387.51,234.11 1388.07,232.82 1388.64,232.562 1389.21,231.446 1389.78,232.527 1390.35,231.585 1390.92,230.462 1391.48,230.446 1392.05,231.557 1392.62,233.612 1393.19,235.712 1393.76,234.308 1394.33,233.089 1394.89,231.821 1395.46,227.381 1396.03,227.766 1396.6,226.88 1397.17,226.008 1397.74,225.175 1398.3,226.84 1398.87,228.22 1399.44,227.218 1400.01,228.597 1400.58,230.783 1401.15,231.932 1401.71,233.926 1402.28,234.879 1402.85,232.551 1403.42,229.972 1403.99,228.995 1404.56,228.177 1405.13,227.202 1405.69,226.449 1406.26,229.045 1406.83,228.122 1407.4,229.349 1407.97,230.74 1408.54,233.909 1409.1,234.858 1409.67,234.428 1410.24,235.146 1410.81,233.945 1411.38,231.649 1411.95,232.586 1412.51,233.428 1413.08,232.44 1413.65,236.54 1414.22,236.36 1414.79,232.896 1415.36,231.684 1415.92,230.58 1416.49,229.497 1417.06,229.7 1417.63,229.894 1418.2,227.81 1418.77,228.091 1419.33,228.292 1419.9,231.219 1420.47,231.071 1421.04,230.785 1421.61,231.593 1422.18,231.623 1422.74,230.558 1423.31,230.684 1423.88,232.883 1424.45,231.713 1425.02,232.476 1425.59,231.202 1426.15,230.188 1426.72,226.949 1427.29,227.112 1427.86,226.351 1428.43,225.456 1429,224.93 1429.56,226.176 1430.13,226.327 1430.7,227.9 1431.27,231.042 1431.84,229.85 1432.41,228.894 1432.97,229.207 1433.54,227.07 1434.11,227.263 1434.68,228.646 1435.25,226.777 1435.82,227.902 1436.38,229.226 1436.95,230.219 1437.52,230.223 1438.09,228.176 1438.66,231.377 1439.23,230.086 1439.79,231.163 1440.36,230.81 1440.93,230.781 1441.5,231.874 1442.07,232.622 1442.64,232.277 1443.2,231.193 1443.77,232.162 1444.34,231.272 1444.91,232.184 1445.48,232.184 1446.05,233.09 1446.61,234.685 1447.18,233.39 1447.75,234.055 1448.32,230.806 1448.89,230.517 1449.46,229.237 1450.02,227.218 1450.59,228.256 1451.16,227.534 1451.73,229.142 1452.3,228.162 1452.87,229.532 1453.43,230.812 1454,230.026 1454.57,231.172 1455.14,231.165 1455.71,232.006 1456.28,230.821 1456.84,230.938 1457.41,230.792 1457.98,228.799 1458.55,229.064 1459.12,231.353 1459.69,229.229 1460.25,230.502 1460.82,232.29 1461.39,232.334 1461.96,230.23 1462.53,231.295 1463.1,231.286 1463.66,231.215 1464.23,231.115 1464.8,229.105 1465.37,230.293 1465.94,230.308 1466.51,228.131 1467.07,228.521 1467.64,228.377 1468.21,226.353 1468.78,225.609 1469.35,226.054 1469.92,224.361 1470.48,225.777 1471.05,225.215 1471.62,225.622 1472.19,229.121 1472.76,231.317 1473.33,230.246 1473.89,234.427 1474.46,233.043 1475.03,235.076 1475.6,234.674 1476.17,232.375 1476.74,233.31 1477.31,233.156 1477.87,233.021 1478.44,233.992 1479.01,231.489 1479.58,229.134 1480.15,229.46 1480.72,230.662 1481.28,230.574 1481.85,230.667 1482.42,233.556 1482.99,230.978 1483.56,230.745 1484.13,226.436 1484.69,225.701 1485.26,227.166 1485.83,227.262 1486.4,227.532 1486.97,226.812 1487.54,228.205 1488.1,226.123 1488.67,227.542 1489.24,228.559 1489.81,229.784 1490.38,228.805 1490.95,231.09 1491.51,232.024 1492.08,231.965 1492.65,230.797 1493.22,228.638 1493.79,230.845 1494.36,230.826 1494.92,229.79 1495.49,231.826 1496.06,231.723 1496.63,232.069 1497.2,233.888 1497.77,231.723 1498.33,229.39 1498.9,229.212 1499.47,230.33 1500.04,231.401 1500.61,231.263 1501.18,230.096 1501.74,232.383 1502.31,234.395 1502.88,233.032 1503.45,232.969 1504.02,233.638 1504.59,234.717 1505.15,233.262 1505.72,232.044 1506.29,228.774 1506.86,228.878 1507.43,229.989 1508,229.883 1508.56,229.88 1509.13,229.996 1509.7,231.135 1510.27,233.192 1510.84,234.13 1511.41,234.733 1511.97,233.394 1512.54,236.102 1513.11,236.496 1513.68,237.051 1514.25,238.459 1514.82,238.773 1515.38,237.307 1515.95,237.826 1516.52,238.363 1517.09,237.879 1517.66,237.337 1518.23,236.837 1518.79,236.253 1519.36,237.735 1519.93,234.97 1520.5,231.563 1521.07,229.48 1521.64,228.141 1522.2,227.075 1522.77,228.21 1523.34,227.298 1523.91,225.284 1524.48,227.645 1525.05,228.699 1525.61,231.961 1526.18,232.586 1526.75,231.074 1527.32,230.982 1527.89,234.104 1528.46,234.528 1529.02,232.129 1529.59,230.856 1530.16,229.753 1530.73,229.854 1531.3,229.532 1531.87,230.514 1532.43,232.437 1533,232.251 1533.57,232.925 1534.14,232.661 1534.71,231.446 1535.28,231.278 1535.84,232.191 1536.41,231.78 1536.98,232.606 1537.55,230.208 1538.12,232.011 1538.69,232.791 1539.25,233.542 1539.82,233.454 1540.39,232.383 1540.96,231.134 1541.53,229.629 1542.1,230.585 1542.66,229.446 1543.23,228.307 1543.8,227.396 1544.37,225.498 1544.94,224.463 1545.51,224.607 1546.08,226.023 1546.64,227.429 1547.21,229.565 1547.78,229.805 1548.35,228.66 1548.92,229.337 1549.49,228.143 1550.05,228.116 1550.62,227.994 1551.19,228.874 1551.76,228.081 1552.33,227.105 1552.9,229.266 1553.46,229.082 1554.03,229.973 1554.6,230.87 1555.17,232.657 1555.74,233.485 1556.31,233.363 1556.87,230.884 1557.44,232.478 1558.01,230.087 1558.58,232.038 1559.15,229.665 1559.72,229.562 1560.28,228.439 1560.85,227.381 1561.42,225.576 1561.99,225.812 1562.56,225.073 1563.13,224.097 1563.69,224.498 1564.26,224.89 1564.83,225.117 1565.4,227.638 1565.97,231.024 1566.54,230.805 1567.1,228.809 1567.67,228.893 1568.24,229.789 1568.81,228.669 1569.38,228.591 1569.95,226.759 1570.51,226.036 1571.08,228.227 1571.65,227.28 1572.22,231.761 1572.79,232.827 1573.36,230.608 1573.92,229.322 1574.49,229.289 1575.06,229.316 1575.63,229.392 1576.2,227.308 1576.77,228.46 1577.33,228.461 1577.9,228.691 1578.47,232.011 1579.04,231.753 1579.61,232.7 1580.18,231.246 1580.74,228.952 1581.31,230.089 1581.88,228.944 1582.45,225.97 1583.02,226.134 1583.59,227.492 1584.15,225.747 1584.72,227.099 1585.29,227.239 1585.86,225.599 1586.43,226.968 1587,225.999 1587.56,228.255 1588.13,227.527 1588.7,228.749 1589.27,228.93 1589.84,230.021 1590.41,231.083 1590.97,231.908 1591.54,231.012 1592.11,230.967 1592.68,225.838 1593.25,227.283 1593.82,227.201 1594.38,228.425 1594.95,225.651 1595.52,225.055 1596.09,225.496 1596.66,225.017 1597.23,226.704 1597.79,224.929 1598.36,225.516 1598.93,227.964 1599.5,228.992 1600.07,228.962 1600.64,228.181 1601.2,228.37 1601.77,227.277 1602.34,226.604 1602.91,225.893 1603.48,226.232 1604.05,224.581 1604.61,224.093 1605.18,223.528 1605.75,224.237 1606.32,224.902 1606.89,225.491 1607.46,229.918 1608.02,231.2 1608.59,232.187 1609.16,231.998 1609.73,231.923 1610.3,231.889 1610.87,233.054 1611.43,234.957 1612,234.705 1612.57,234.426 1613.14,233.316 1613.71,233.259 1614.28,233.216 1614.84,230.929 1615.41,231.84 1615.98,231.651 1616.55,232.714 1617.12,232.622 1617.69,233.531 1618.26,231.224 1618.82,231.505 1619.39,228.417 1619.96,226.499 1620.53,224.739 1621.1,226.215 1621.67,223.643 1622.23,223.954 1622.8,226.623 1623.37,225.699 1623.94,229.116 1624.51,229.413 1625.08,226.498 1625.64,224.842 1626.21,225.474 1626.78,226.125 1627.35,227.589 1627.92,229.981 1628.49,232.084 1629.05,230.964 1629.62,229.916 1630.19,229.139 1630.76,232.391 1631.33,232.466 1631.9,232.435 1632.46,234.42 1633.03,233.018 1633.6,237.154 1634.17,238.806 1634.74,237.506 1635.31,237.238 1635.87,236.036 1636.44,237.477 1637.01,237.821 1637.58,236.191 1638.15,236.937 1638.72,234.566 1639.28,234.248 1639.85,232.994 1640.42,230.822 1640.99,232.057 1641.56,234.372 1642.13,232.889 1642.69,230.583 1643.26,231.445 1643.83,231.344 1644.4,231.089 1644.97,230.025 1645.54,230.089 1646.1,230.073 1646.67,230.28 1647.24,228.184 1647.81,227.505 1648.38,228.833 1648.95,230.014 1649.51,230.146 1650.08,230.152 1650.65,230.144 1651.22,225.827 1651.79,225.181 1652.36,227.494 1652.92,224.806 1653.49,223.324 1654.06,226.038 1654.63,225.431 1655.2,225.914 1655.77,229.163 1656.33,231.533 1656.9,231.33 1657.47,231.184 1658.04,233.295 1658.61,232.214 1659.18,233.13 1659.74,234.793 1660.31,236.559 1660.88,235.148 1661.45,234.8 1662.02,233.494 1662.59,232.993 1663.15,232.678 1663.72,231.202 1664.29,228.973 1664.86,230.867 1665.43,232.038 1666,231.639 1666.56,232.523 1667.13,231.193 1667.7,230.06 1668.27,230.262 1668.84,228.14 1669.41,227.278 1669.97,229.794 1670.54,229.787 1671.11,233.04 1671.68,231.721 1672.25,229.616 1672.82,229.576 1673.38,230.713 1673.95,231.554 1674.52,230.582 1675.09,231.413 1675.66,232.172 1676.23,232.821 1676.79,234.682 1677.36,235.523 1677.93,234.066 1678.5,233.819 1679.07,234.632 1679.64,235.566 1680.2,236.245 1680.77,235.656 1681.34,235.965 1681.91,232.207 1682.48,230.679 1683.05,231.652 1683.61,232.531 1684.18,230.192 1684.75,229.9 1685.32,228.707 1685.89,228.65 1686.46,231.631 1687.02,233.48 1687.59,234.262 1688.16,235.002 1688.73,232.522 1689.3,232.319 1689.87,232.87 1690.44,232.464 1691,229.013 1691.57,227.927 1692.14,229.384 1692.71,224.051 1693.28,224.291 1693.85,224.578 1694.41,224.701 1694.98,223.862 1695.55,224.357 1696.12,224.671 1696.69,223.157 1697.26,222.796 1697.82,223.207 1698.39,224.763 1698.96,224.004 1699.53,226.5 1700.1,222.56 1700.67,225.31 1701.23,225.631 1701.8,225.362 1702.37,225.518 1702.94,224.95 1703.51,225.115 1704.08,225.507 1704.64,225.958 1705.21,228.509 1705.78,227.742 1706.35,226.846 1706.92,226.233 1707.49,227.867 1708.05,232.096 1708.62,232.03 1709.19,231.976 1709.76,230.802 1710.33,229.005 1710.9,230.157 1711.46,231.42 1712.03,231.317 1712.6,230.42 1713.17,231.408 1713.74,234.505 1714.31,237.445 1714.87,237.735 1715.44,235.976 1716.01,235.373 1716.58,234.925 1717.15,236.634 1717.72,234.972 1718.28,233.691 1718.85,232.559 1719.42,232.512 1719.99,234.335 1720.56,233.868 1721.13,234.519 1721.69,236.198 1722.26,233.799 1722.83,233.317 1723.4,233.131 1723.97,228.67 1724.54,229.719 1725.1,232.834 1725.67,232.572 1726.24,231.471 1726.81,233.315 1727.38,233.248 1727.95,235.046 1728.51,235.776 1729.08,237.45 1729.65,236.934 1730.22,236.41 1730.79,236.783 1731.36,235.34 1731.92,234.967 1732.49,232.26 1733.06,237.924 1733.63,237.216 1734.2,236.445 1734.77,235.674 1735.33,235.173 1735.9,235.706 1736.47,235.024 1737.04,233.44 1737.61,229.985 1738.18,230.801 1738.74,227.677 1739.31,225.65 1739.88,224.834 1740.45,225.301 1741.02,228.648 1741.59,229.525 1742.15,227.597 1742.72,225.465 1743.29,225.799 1743.86,225.065 1744.43,223.216 1745,224.745 1745.56,225.241 1746.13,224.636 1746.7,225.077 1747.27,225.162 1747.84,224.647 1748.41,225.056 1748.97,227.75 1749.54,226.938 1750.11,228.148 1750.68,229.351 1751.25,227.455 1751.82,226.521 1752.38,226.659 1752.95,226.903 1753.52,227.176 1754.09,226.249 1754.66,225.525 1755.23,230.105 1755.79,228.875 1756.36,227.701 1756.93,230.123 1757.5,229.075 1758.07,229.926 1758.64,229.842 1759.21,228.786 1759.77,227.685 1760.34,227.782 1760.91,227.049 1761.48,227.586 1762.05,227.656 1762.62,225.747 1763.18,226.231 1763.75,228.501 1764.32,228.795 1764.89,225.913 1765.46,228.415 1766.03,229.871 1766.59,227.711 1767.16,228.144 1767.73,227.468 1768.3,227.659 1768.87,226.684 1769.44,228.094 1770,224.294 1770.57,224.667 1771.14,226.315 1771.71,230.637 1772.28,231.901 1772.85,233.772 1773.41,232.471 1773.98,231.416 1774.55,231.523 1775.12,230.437 1775.69,229.391 1776.26,229.452 1776.82,229.72 1777.39,230.87 1777.96,230.881 1778.53,232.003 1779.1,233.095 1779.67,231.817 1780.23,231.707 1780.8,231.576 1781.37,231.617 1781.94,232.742 1782.51,231.379 1783.08,231.308 1783.64,231.508 1784.21,231.306 1784.78,229.048 1785.35,227.11 1785.92,228.404 1786.49,228.773 1787.05,227.675 1787.62,230.072 1788.19,230.244 1788.76,230.332 1789.33,229.626 1789.9,229.567 1790.46,229.672 1791.03,228.754 1791.6,227.795 1792.17,228.919 1792.74,228.979 1793.31,226.86 1793.87,225.9 1794.44,227.131 1795.01,226.253 1795.58,226.695 1796.15,228.161 1796.72,228.344 1797.28,228.487 1797.85,226.508 1798.42,225.682 1798.99,226.084 1799.56,223.463 1800.13,224.137 1800.69,225.741 1801.26,225.325 1801.83,228.907 1802.4,228.017 1802.97,231.285 1803.54,232.345 1804.1,234.386 1804.67,233.222 1805.24,233.166 1805.81,232.052 1806.38,233.059 1806.95,231.73 1807.51,231.71 1808.08,228.473 1808.65,230.511 1809.22,229.44 1809.79,229.566 1810.36,230.76 1810.92,229.688 1811.49,230.734 1812.06,231.828 1812.63,232.84 1813.2,232.657 1813.77,232.453 1814.33,231.192 1814.9,232.179 1815.47,234.194 1816.04,233.848 1816.61,233.697 1817.18,233.682 1817.74,233.569 1818.31,233.418 1818.88,233.248 1819.45,234.01 1820.02,234.761 1820.59,236.636 1821.15,236.305 1821.72,237.11 1822.29,235.827 1822.86,235.595 1823.43,235.365 1824,236.269 1824.56,238.886 1825.13,238.46 1825.7,237.023 1826.27,237.574 1826.84,237.097 1827.41,235.554 1827.97,236.074 1828.54,234.696 1829.11,235.345 1829.68,234.838 1830.25,234.435 1830.82,233.037 1831.39,233.841 1831.95,233.633 1832.52,234.385 1833.09,234.971 1833.66,234.517 1834.23,233.165 1834.8,232.65 1835.36,231.202 1835.93,233.354 1836.5,233.803 1837.07,233.357 1837.64,232.007 1838.21,231.813 1838.77,228.356 1839.34,228.129 1839.91,229.329 1840.48,230.404 1841.05,232.323 1841.62,230.039 1842.18,227.878 1842.75,224.61 1843.32,224.832 1843.89,225.983 1844.46,229.27 1845.03,226.084 1845.59,226.165 1846.16,224.648 1846.73,222.841 1847.3,225.428 1847.87,227.763 1848.44,227.562 1849,226.439 1849.57,227.346 1850.14,229.412 1850.71,229.418 1851.28,230.224 1851.85,229.184 1852.41,231.269 1852.98,235.099 1853.55,234.565 1854.12,232.879 1854.69,234.93 1855.26,233.478 1855.82,232.238 1856.39,231.017 1856.96,231.805 1857.53,231.673 1858.1,231.394 1858.67,231.502 1859.23,231.401 1859.8,231.398 1860.37,229.25 1860.94,230.396 1861.51,230.338 1862.08,231.17 1862.64,230.856 1863.21,231.884 1863.78,229.563 1864.35,228.527 1864.92,228.372 1865.49,228.424 1866.05,228.423 1866.62,228.317 1867.19,228.318 1867.76,229.288 1868.33,229.054 1868.9,228.182 1869.46,227.372 1870.03,227.536 1870.6,227.62 1871.17,229.027 1871.74,228.115 1872.31,226.196 1872.87,225.285 1873.44,225.287 1874.01,225.623 1874.58,223.783 1875.15,223.323 1875.72,221.53 1876.28,224.303 1876.85,222.526 1877.42,224.304 1877.99,223.47 1878.56,224.224 1879.13,223.704 1879.69,225.1 1880.26,224.695 1880.83,224.064 1881.4,223.328 1881.97,223.9 1882.54,224.404 1883.1,226.973 1883.67,227.391 1884.24,227.591 1884.81,229.223 1885.38,228.425 1885.95,229.821 1886.51,229.866 1887.08,228.931 1887.65,229.112 1888.22,231.259 1888.79,231.338 1889.36,231.182 1889.92,231.142 1890.49,230.134 1891.06,228.226 1891.63,228.679 1892.2,227.948 1892.77,229.088 1893.33,228.561 1893.9,228.789 1894.47,230.022 1895.04,231.082 1895.61,233.065 1896.18,232.685 1896.74,232.694 1897.31,233.598 1897.88,234.22 1898.45,234.087 1899.02,235.081 1899.59,234.89 1900.16,235.551 1900.72,236.11 1901.29,234.538 1901.86,234.095 1902.43,233.043 1903,234.009 1903.57,232.606 1904.13,230.188 1904.7,232.866 1905.27,232.821 1905.84,233.513 1906.41,234.165 1906.98,233.732 1907.54,233.508 1908.11,232.213 1908.68,229.965 1909.25,229.087 1909.82,229.166 1910.39,228.177 1910.95,228.241 1911.52,226.387 1912.09,228.678 1912.66,227.76 1913.23,224.839 1913.8,225.104 1914.36,223.623 1914.93,223.047 1915.5,224.611 1916.07,224.993 1916.64,224.359 1917.21,224.981 1917.77,226.427 1918.34,225.75 1918.91,226.056 1919.48,225.216 1920.05,224.666 1920.62,226.218 1921.18,227.596 1921.75,228.639 1922.32,229.923 1922.89,228.943 1923.46,228.064 1924.03,229.389 1924.59,231.65 1925.16,233.772 1925.73,233.707 1926.3,234.195 1926.87,232.722 1927.44,233.742 1928,234.622 1928.57,235.419 1929.14,232.974 1929.71,234.897 1930.28,234.473 1930.85,234.214 1931.41,232.963 1931.98,232.605 1932.55,230.377 1933.12,232.604 1933.69,234.503 1934.26,233.199 1934.82,234.016 1935.39,233.881 1935.96,233.592 1936.53,235.49 1937.1,235.031 1937.67,234.646 1938.23,237.42 1938.8,239.081 1939.37,237.625 1939.94,237.05 1940.51,236.557 1941.08,235.986 1941.64,238.61 1942.21,236.762 1942.78,235.228 1943.35,234.899 1943.92,235.587 1944.49,234.882 1945.05,236.447 1945.62,235.915 1946.19,235.342 1946.76,233.645 1947.33,231.227 1947.9,230.145 1948.46,228.029 1949.03,225.857 1949.6,227.079 1950.17,226.019 1950.74,228.461 1951.31,228.308 1951.87,227.316 1952.44,224.285 1953.01,224.595 1953.58,226.011 1954.15,226.315 1954.72,226.533 1955.28,225.676 1955.85,224.952 1956.42,227.18 1956.99,227.35 1957.56,229.663 1958.13,231.645 1958.69,231.661 1959.26,230.525 1959.83,231.476 1960.4,231.366 1960.97,232.324 1961.54,230.958 1962.1,231.8 1962.67,232.718 1963.24,233.178 1963.81,232.048 1964.38,231.847 1964.95,229.696 1965.51,229.701 1966.08,230.444 1966.65,231.216 1967.22,228.054 1967.79,227.021 1968.36,228.411 1968.92,228.371 1969.49,229.563 1970.06,229.513 1970.63,228.557 1971.2,231.569 1971.77,231.59 1972.34,228.381 1972.9,229.71 1973.47,229.725 1974.04,230.834 1974.61,230.825 1975.18,230.755 1975.75,230.66 1976.31,230.704 1976.88,228.854 1977.45,227.944 1978.02,226.231 1978.59,226.548 1979.16,227.61 1979.72,227.857 1980.29,227.971 1980.86,229.147 1981.43,228.176 1982,225.218 1982.57,225.611 1983.13,226.953 1983.7,225.135 1984.27,224.484 1984.84,223.864 1985.41,224.355 1985.98,225.839 1986.54,229.486 1987.11,228.461 1987.68,227.667 1988.25,229.047 1988.82,230.371 1989.39,231.609 1989.95,230.574 1990.52,230.702 1991.09,230.652 1991.66,231.389 1992.23,231.311 1992.8,233.204 1993.36,233.076 1993.93,231.756 1994.5,230.622 1995.07,230.466 1995.64,230.349 1996.21,232.566 1996.77,230.097 1997.34,230.043 1997.91,229.171 1998.48,230.033 1999.05,229.029 1999.62,228.084 2000.18,227.295 2000.75,228.733 2001.32,227.889 2001.89,228.181 2002.46,230.315 2003.03,230.307 2003.59,231.465 2004.16,230.364 2004.73,231.311 2005.3,231.26 2005.87,230.065 2006.44,229.986 2007,231.039 2007.57,233.998 2008.14,232.718 2008.71,235.593 2009.28,233.079 2009.85,234.857 2010.41,233.607 2010.98,231.477 2011.55,233.532 2012.12,233.342 2012.69,235.229 2013.26,236.034 2013.82,237.358 2014.39,235.804 2014.96,233.386 2015.53,235.124 2016.1,237.879 2016.67,236.084 2017.23,236.67 2017.8,233.802 2018.37,233.493 2018.94,232.185 2019.51,232.152 2020.08,232.172 2020.64,230.929 2021.21,230.687 2021.78,233.618 2022.35,230.39 2022.92,230.345 2023.49,229.181 2024.05,228.77 2024.62,228.921 2025.19,227.851 2025.76,226.691 2026.33,225.635 2026.9,225.752 2027.46,223.896 2028.03,223.022 2028.6,224.562 2029.17,224.317 2029.74,224.762 2030.31,223.924 2030.87,226.099 2031.44,227.377 2032.01,227.685 2032.58,226.911 2033.15,224.953 2033.72,225.318 2034.28,225.491 2034.85,224.702 2035.42,227.154 2035.99,229.549 2036.56,229.707 2037.13,229.616 2037.69,230.532 2038.26,231.402 2038.83,233.453 2039.4,235.356 2039.97,234.829 2040.54,235.334 2041.11,235.874 2041.67,236.646 2042.24,236.349 2042.81,235.912 2043.38,236.334 2043.95,234.81 2044.52,234.505 2045.08,234.109 2045.65,231.808 2046.22,230.703 2046.79,229.572 2047.36,229.644 2047.93,229.569 2048.49,227.338 2049.06,226.484 2049.63,226.726 2050.2,226.758 2050.77,225.975 2051.34,224.141 2051.9,222.415 2052.47,219.895 2053.04,221.471 2053.61,222.976 2054.18,225.507 2054.75,224.718 2055.31,228.289 2055.88,228.453 2056.45,227.477 2057.02,227.79 2057.59,227.135 2058.16,227.127 2058.72,224.584 2059.29,225.06 2059.86,225.515 2060.43,226.781 2061,225.051 2061.57,226.368 2062.13,227.71 2062.7,227.078 2063.27,229.521 2063.84,228.707 2064.41,229.973 2064.98,230.98 2065.54,233.124 2066.11,233.898 2066.68,233.908 2067.25,231.676 2067.82,232.619 2068.39,231.411 2068.95,232.494 2069.52,232.399 2070.09,234.307 2070.66,233.133 2071.23,233.951 2071.8,233.882 2072.36,234.69 2072.93,236.379 2073.5,232.856 2074.07,231.743 2074.64,232.822 2075.21,233.686 2075.77,233.525 2076.34,234.305 2076.91,233.241 2077.48,232.043 2078.05,232.729 2078.62,232.529 2079.18,232.403 2079.75,234.33 2080.32,232.794 2080.89,233.579 2081.46,233.456 2082.03,233.069 2082.59,232.748 2083.16,234.673 2083.73,235.526 2084.3,227.684 2084.87,228.957 2085.44,227.82 2086,227.705 2086.57,226.834 2087.14,224.871 2087.71,226.215 2088.28,228.357 2088.85,227.568 2089.41,228.859 2089.98,229.969 2090.55,229.94 2091.12,231.128 2091.69,231.034 2092.26,233.047 2092.82,230.704 2093.39,228.555 2093.96,226.435 2094.53,227.6 2095.1,227.72 2095.67,228.923 2096.23,230.072 2096.8,231.963 2097.37,232.724 2097.94,232.75 2098.51,233.445 2099.08,233.193 2099.64,231.834 2100.21,232.645 2100.78,233.303 2101.35,233.075 2101.92,231.825 2102.49,229.566 2103.05,229.375 2103.62,229.356 2104.19,228.427 2104.76,228.73 2105.33,229.835 2105.9,231.883 2106.46,231.708 2107.03,230.433 2107.6,229.422 2108.17,228.477 2108.74,228.56 2109.31,229.664 2109.87,231.757 2110.44,231.687 2111.01,230.538 2111.58,230.508 2112.15,230.522 2112.72,230.412 2113.29,231.56 2113.85,231.336 2114.42,231.355 2114.99,230.303 2115.56,230.135 2116.13,229.025 2116.7,228.112 2117.26,229.105 2117.83,229.342 2118.4,228.313 2118.97,227.463 2119.54,226.555 2120.11,227.793 2120.67,226.895 2121.24,226.881 2121.81,229.078 2122.38,229.177 2122.95,229.133 2123.52,230.049 2124.08,229.014 2124.65,230.209 2125.22,229.006 2125.79,230.165 2126.36,229.137 2126.93,231.277 2127.49,234.394 2128.06,234.949 2128.63,233.589 2129.2,233.082 2129.77,231.741 2130.34,230.434 2130.9,230.327 2131.47,230.21 2132.04,228.909 2132.61,228.026 2133.18,226.841 2133.75,227.985 2134.31,227.037 2134.88,227.461 2135.45,225.452 2136.02,228.74 2136.59,229.91 2137.16,230.052 2137.72,228.995 2138.29,230.095 2138.86,228.047 2139.43,224.276 2140,223.794 2140.57,222.272 2141.13,223.075 2141.7,221.605 2142.27,222.327 2142.84,224.078 2143.41,224.614 2143.98,227.053 2144.54,226.255 2145.11,226.624 2145.68,228.024 2146.25,228.374 2146.82,227.669 2147.39,226.749 2147.95,229.146 2148.52,229.144 2149.09,226.17 2149.66,227.59 2150.23,222.718 2150.8,221.288 2151.36,221.983 2151.93,223.772 2152.5,224.573 2153.07,224.958 2153.64,228.623 2154.21,228.903 2154.77,231.224 2155.34,232.376 2155.91,230.218 2156.48,229.337 2157.05,229.25 2157.62,230.531 2158.18,230.721 2158.75,231.918 2159.32,229.977 2159.89,231.115 \"/>\n<path clip-path=\"url(#clip400)\" d=\"M1649.46 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1649.46 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip400)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1649.46,1245.03 2150.8,1245.03 2150.8,1089.51 1649.46,1089.51 1649.46,1245.03 \"/>\n<polyline clip-path=\"url(#clip400)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1669.53,1141.35 1789.98,1141.35 \"/>\n<path clip-path=\"url(#clip400)\" d=\"M1817.46 1125.34 L1817.46 1132.71 L1826.23 1132.71 L1826.23 1136.02 L1817.46 1136.02 L1817.46 1150.09 Q1817.46 1153.26 1818.32 1154.16 Q1819.2 1155.07 1821.86 1155.07 L1826.23 1155.07 L1826.23 1158.63 L1821.86 1158.63 Q1816.93 1158.63 1815.05 1156.8 Q1813.18 1154.95 1813.18 1150.09 L1813.18 1136.02 L1810.05 1136.02 L1810.05 1132.71 L1813.18 1132.71 L1813.18 1125.34 L1817.46 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M1843.62 1145.6 Q1838.46 1145.6 1836.47 1146.78 Q1834.48 1147.96 1834.48 1150.81 Q1834.48 1153.08 1835.96 1154.42 Q1837.46 1155.74 1840.03 1155.74 Q1843.57 1155.74 1845.7 1153.24 Q1847.86 1150.72 1847.86 1146.55 L1847.86 1145.6 L1843.62 1145.6 M1852.11 1143.84 L1852.11 1158.63 L1847.86 1158.63 L1847.86 1154.7 Q1846.4 1157.06 1844.22 1158.19 Q1842.05 1159.3 1838.9 1159.3 Q1834.92 1159.3 1832.55 1157.08 Q1830.22 1154.84 1830.22 1151.09 Q1830.22 1146.71 1833.13 1144.49 Q1836.07 1142.27 1841.88 1142.27 L1847.86 1142.27 L1847.86 1141.85 Q1847.86 1138.91 1845.91 1137.31 Q1843.99 1135.69 1840.49 1135.69 Q1838.27 1135.69 1836.17 1136.22 Q1834.06 1136.76 1832.11 1137.82 L1832.11 1133.89 Q1834.45 1132.98 1836.65 1132.54 Q1838.85 1132.08 1840.93 1132.08 Q1846.56 1132.08 1849.34 1135 Q1852.11 1137.91 1852.11 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M1875.91 1136.69 Q1875.19 1136.27 1874.34 1136.09 Q1873.5 1135.88 1872.48 1135.88 Q1868.87 1135.88 1866.93 1138.24 Q1865.01 1140.58 1865.01 1144.97 L1865.01 1158.63 L1860.73 1158.63 L1860.73 1132.71 L1865.01 1132.71 L1865.01 1136.73 Q1866.35 1134.37 1868.5 1133.24 Q1870.66 1132.08 1873.73 1132.08 Q1874.17 1132.08 1874.71 1132.15 Q1875.24 1132.2 1875.89 1132.31 L1875.91 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M1896.6 1145.37 Q1896.6 1140.74 1894.68 1138.19 Q1892.79 1135.65 1889.34 1135.65 Q1885.91 1135.65 1883.99 1138.19 Q1882.09 1140.74 1882.09 1145.37 Q1882.09 1149.97 1883.99 1152.52 Q1885.91 1155.07 1889.34 1155.07 Q1892.79 1155.07 1894.68 1152.52 Q1896.6 1149.97 1896.6 1145.37 M1900.86 1155.41 Q1900.86 1162.03 1897.92 1165.25 Q1894.98 1168.49 1888.92 1168.49 Q1886.67 1168.49 1884.68 1168.15 Q1882.69 1167.82 1880.82 1167.13 L1880.82 1162.98 Q1882.69 1164 1884.52 1164.49 Q1886.35 1164.97 1888.25 1164.97 Q1892.44 1164.97 1894.52 1162.78 Q1896.6 1160.6 1896.6 1156.18 L1896.6 1154.07 Q1895.29 1156.36 1893.23 1157.5 Q1891.17 1158.63 1888.29 1158.63 Q1883.53 1158.63 1880.61 1155 Q1877.69 1151.36 1877.69 1145.37 Q1877.69 1139.35 1880.61 1135.72 Q1883.53 1132.08 1888.29 1132.08 Q1891.17 1132.08 1893.23 1133.22 Q1895.29 1134.35 1896.6 1136.64 L1896.6 1132.71 L1900.86 1132.71 L1900.86 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M1931.81 1144.6 L1931.81 1146.69 L1912.23 1146.69 Q1912.51 1151.09 1914.87 1153.4 Q1917.25 1155.69 1921.49 1155.69 Q1923.94 1155.69 1926.23 1155.09 Q1928.55 1154.49 1930.82 1153.28 L1930.82 1157.31 Q1928.53 1158.28 1926.12 1158.79 Q1923.71 1159.3 1921.23 1159.3 Q1915.03 1159.3 1911.4 1155.69 Q1907.79 1152.08 1907.79 1145.92 Q1907.79 1139.56 1911.21 1135.83 Q1914.66 1132.08 1920.49 1132.08 Q1925.73 1132.08 1928.76 1135.46 Q1931.81 1138.82 1931.81 1144.6 M1927.55 1143.35 Q1927.51 1139.86 1925.59 1137.78 Q1923.69 1135.69 1920.54 1135.69 Q1916.98 1135.69 1914.82 1137.71 Q1912.69 1139.72 1912.37 1143.38 L1927.55 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M1943.02 1125.34 L1943.02 1132.71 L1951.79 1132.71 L1951.79 1136.02 L1943.02 1136.02 L1943.02 1150.09 Q1943.02 1153.26 1943.87 1154.16 Q1944.75 1155.07 1947.41 1155.07 L1951.79 1155.07 L1951.79 1158.63 L1947.41 1158.63 Q1942.48 1158.63 1940.61 1156.8 Q1938.73 1154.95 1938.73 1150.09 L1938.73 1136.02 L1935.61 1136.02 L1935.61 1132.71 L1938.73 1132.71 L1938.73 1125.34 L1943.02 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip400)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1669.53,1193.19 1789.98,1193.19 \"/>\n<path clip-path=\"url(#clip400)\" d=\"M1831.77 1194.82 L1831.77 1210.47 L1827.51 1210.47 L1827.51 1194.96 Q1827.51 1191.28 1826.07 1189.45 Q1824.64 1187.62 1821.77 1187.62 Q1818.32 1187.62 1816.33 1189.82 Q1814.34 1192.02 1814.34 1195.82 L1814.34 1210.47 L1810.05 1210.47 L1810.05 1184.55 L1814.34 1184.55 L1814.34 1188.57 Q1815.86 1186.24 1817.92 1185.08 Q1820.01 1183.92 1822.72 1183.92 Q1827.18 1183.92 1829.48 1186.7 Q1831.77 1189.45 1831.77 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M1850.31 1187.53 Q1846.88 1187.53 1844.89 1190.22 Q1842.9 1192.88 1842.9 1197.53 Q1842.9 1202.18 1844.87 1204.87 Q1846.86 1207.53 1850.31 1207.53 Q1853.71 1207.53 1855.7 1204.85 Q1857.69 1202.16 1857.69 1197.53 Q1857.69 1192.93 1855.7 1190.24 Q1853.71 1187.53 1850.31 1187.53 M1850.31 1183.92 Q1855.86 1183.92 1859.04 1187.53 Q1862.21 1191.14 1862.21 1197.53 Q1862.21 1203.9 1859.04 1207.53 Q1855.86 1211.14 1850.31 1211.14 Q1844.73 1211.14 1841.56 1207.53 Q1838.41 1203.9 1838.41 1197.53 Q1838.41 1191.14 1841.56 1187.53 Q1844.73 1183.92 1850.31 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M1884.29 1188.53 Q1883.57 1188.11 1882.72 1187.93 Q1881.88 1187.72 1880.86 1187.72 Q1877.25 1187.72 1875.31 1190.08 Q1873.39 1192.42 1873.39 1196.81 L1873.39 1210.47 L1869.11 1210.47 L1869.11 1184.55 L1873.39 1184.55 L1873.39 1188.57 Q1874.73 1186.21 1876.88 1185.08 Q1879.04 1183.92 1882.11 1183.92 Q1882.55 1183.92 1883.09 1183.99 Q1883.62 1184.04 1884.27 1184.15 L1884.29 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip400)\" d=\"M1908.11 1189.52 Q1909.71 1186.65 1911.93 1185.29 Q1914.15 1183.92 1917.16 1183.92 Q1921.21 1183.92 1923.41 1186.77 Q1925.61 1189.59 1925.61 1194.82 L1925.61 1210.47 L1921.33 1210.47 L1921.33 1194.96 Q1921.33 1191.24 1920.01 1189.43 Q1918.69 1187.62 1915.98 1187.62 Q1912.67 1187.62 1910.75 1189.82 Q1908.83 1192.02 1908.83 1195.82 L1908.83 1210.47 L1904.54 1210.47 L1904.54 1194.96 Q1904.54 1191.21 1903.23 1189.43 Q1901.91 1187.62 1899.15 1187.62 Q1895.89 1187.62 1893.97 1189.85 Q1892.04 1192.05 1892.04 1195.82 L1892.04 1210.47 L1887.76 1210.47 L1887.76 1184.55 L1892.04 1184.55 L1892.04 1188.57 Q1893.5 1186.19 1895.54 1185.06 Q1897.58 1183.92 1900.38 1183.92 Q1903.2 1183.92 1905.17 1185.36 Q1907.16 1186.79 1908.11 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.037 ± 0.023\n  with uncertainty of ± 0.0020434677284095907\n  from 62 blocks after 5 transformations (k = 6).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.01865 ± (0.00219413, 0.00222413) (MC)\n  95% confidence interval: [-4.02329, -4.01426]) (MC)\n  linear error propagation: -4.01867 ± 0.0022541\n  |δ_y| = |0.00161155| (≤ 0.1 for normal approx)\n  Blocking successful with 31 blocks after 6 transformations (k = 7).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.018647980683187, val_l = 0.0046436908091509466, val_u = 0.004392889154938295)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.steps, df.shift, ylabel=\"energy\", xlabel=\"steps\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.steps[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.steps[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip430\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip430)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip431\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip430)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip432\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip432)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip432)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip432)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip432)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip430)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip430)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip430)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip430)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip430)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip430)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M1220.15 1391.71 L1220.15 1397.25 Q1217.67 1395.98 1214.99 1395.34 Q1212.32 1394.71 1209.46 1394.71 Q1205.1 1394.71 1202.9 1396.04 Q1200.74 1397.38 1200.74 1400.05 Q1200.74 1402.09 1202.3 1403.27 Q1203.85 1404.41 1208.57 1405.46 L1210.57 1405.91 Q1216.81 1407.25 1219.42 1409.7 Q1222.06 1412.12 1222.06 1416.48 Q1222.06 1421.44 1218.11 1424.34 Q1214.2 1427.23 1207.32 1427.23 Q1204.46 1427.23 1201.34 1426.66 Q1198.25 1426.12 1194.82 1425.01 L1194.82 1418.96 Q1198.06 1420.65 1201.21 1421.51 Q1204.36 1422.33 1207.45 1422.33 Q1211.59 1422.33 1213.82 1420.93 Q1216.05 1419.5 1216.05 1416.92 Q1216.05 1414.54 1214.42 1413.26 Q1212.83 1411.99 1207.39 1410.81 L1205.35 1410.33 Q1199.91 1409.19 1197.49 1406.83 Q1195.07 1404.45 1195.07 1400.31 Q1195.07 1395.28 1198.64 1392.54 Q1202.2 1389.8 1208.76 1389.8 Q1212 1389.8 1214.87 1390.28 Q1217.73 1390.76 1220.15 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M1237.18 1380.54 L1237.18 1390.66 L1249.24 1390.66 L1249.24 1395.22 L1237.18 1395.22 L1237.18 1414.57 Q1237.18 1418.93 1238.36 1420.17 Q1239.57 1421.41 1243.23 1421.41 L1249.24 1421.41 L1249.24 1426.31 L1243.23 1426.31 Q1236.45 1426.31 1233.87 1423.8 Q1231.29 1421.25 1231.29 1414.57 L1231.29 1395.22 L1226.99 1395.22 L1226.99 1390.66 L1231.29 1390.66 L1231.29 1380.54 L1237.18 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M1287.44 1407.02 L1287.44 1409.89 L1260.51 1409.89 Q1260.89 1415.94 1264.14 1419.12 Q1267.42 1422.27 1273.24 1422.27 Q1276.61 1422.27 1279.77 1421.44 Q1282.95 1420.61 1286.07 1418.96 L1286.07 1424.5 Q1282.92 1425.83 1279.61 1426.53 Q1276.3 1427.23 1272.89 1427.23 Q1264.36 1427.23 1259.36 1422.27 Q1254.4 1417.3 1254.4 1408.84 Q1254.4 1400.08 1259.11 1394.96 Q1263.85 1389.8 1271.87 1389.8 Q1279.07 1389.8 1283.24 1394.45 Q1287.44 1399.07 1287.44 1407.02 M1281.58 1405.3 Q1281.52 1400.5 1278.87 1397.63 Q1276.26 1394.77 1271.94 1394.77 Q1267.03 1394.77 1264.07 1397.54 Q1261.15 1400.31 1260.7 1405.34 L1281.58 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M1302.71 1420.96 L1302.71 1439.87 L1296.83 1439.87 L1296.83 1390.66 L1302.71 1390.66 L1302.71 1396.07 Q1304.56 1392.89 1307.36 1391.36 Q1310.19 1389.8 1314.11 1389.8 Q1320.6 1389.8 1324.64 1394.96 Q1328.72 1400.12 1328.72 1408.52 Q1328.72 1416.92 1324.64 1422.08 Q1320.6 1427.23 1314.11 1427.23 Q1310.19 1427.23 1307.36 1425.71 Q1304.56 1424.15 1302.71 1420.96 M1322.64 1408.52 Q1322.64 1402.06 1319.97 1398.4 Q1317.32 1394.71 1312.68 1394.71 Q1308.03 1394.71 1305.36 1398.4 Q1302.71 1402.06 1302.71 1408.52 Q1302.71 1414.98 1305.36 1418.67 Q1308.03 1422.33 1312.68 1422.33 Q1317.32 1422.33 1319.97 1418.67 Q1322.64 1414.98 1322.64 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M1361.15 1391.71 L1361.15 1397.25 Q1358.67 1395.98 1356 1395.34 Q1353.32 1394.71 1350.46 1394.71 Q1346.1 1394.71 1343.9 1396.04 Q1341.74 1397.38 1341.74 1400.05 Q1341.74 1402.09 1343.3 1403.27 Q1344.86 1404.41 1349.57 1405.46 L1351.57 1405.91 Q1357.81 1407.25 1360.42 1409.7 Q1363.06 1412.12 1363.06 1416.48 Q1363.06 1421.44 1359.11 1424.34 Q1355.2 1427.23 1348.32 1427.23 Q1345.46 1427.23 1342.34 1426.66 Q1339.25 1426.12 1335.82 1425.01 L1335.82 1418.96 Q1339.06 1420.65 1342.21 1421.51 Q1345.36 1422.33 1348.45 1422.33 Q1352.59 1422.33 1354.82 1420.93 Q1357.05 1419.5 1357.05 1416.92 Q1357.05 1414.54 1355.42 1413.26 Q1353.83 1411.99 1348.39 1410.81 L1346.35 1410.33 Q1340.91 1409.19 1338.49 1406.83 Q1336.07 1404.45 1336.07 1400.31 Q1336.07 1395.28 1339.64 1392.54 Q1343.2 1389.8 1349.76 1389.8 Q1353 1389.8 1355.87 1390.28 Q1358.73 1390.76 1361.15 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip432)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1143.9 2211.02,1143.9 \"/>\n<polyline clip-path=\"url(#clip432)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,990.161 2211.02,990.161 \"/>\n<polyline clip-path=\"url(#clip432)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,836.424 2211.02,836.424 \"/>\n<polyline clip-path=\"url(#clip432)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,682.687 2211.02,682.687 \"/>\n<polyline clip-path=\"url(#clip432)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,528.95 2211.02,528.95 \"/>\n<polyline clip-path=\"url(#clip432)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,375.213 2211.02,375.213 \"/>\n<polyline clip-path=\"url(#clip432)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,221.475 2211.02,221.475 \"/>\n<polyline clip-path=\"url(#clip430)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip430)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1143.9 365.751,1143.9 \"/>\n<polyline clip-path=\"url(#clip430)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,990.161 365.751,990.161 \"/>\n<polyline clip-path=\"url(#clip430)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,836.424 365.751,836.424 \"/>\n<polyline clip-path=\"url(#clip430)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,682.687 365.751,682.687 \"/>\n<polyline clip-path=\"url(#clip430)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,528.95 365.751,528.95 \"/>\n<polyline clip-path=\"url(#clip430)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,375.213 365.751,375.213 \"/>\n<polyline clip-path=\"url(#clip430)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,221.475 365.751,221.475 \"/>\n<path clip-path=\"url(#clip430)\" d=\"M298.909 1129.7 Q295.298 1129.7 293.469 1133.26 Q291.664 1136.8 291.664 1143.93 Q291.664 1151.04 293.469 1154.6 Q295.298 1158.15 298.909 1158.15 Q302.543 1158.15 304.349 1154.6 Q306.177 1151.04 306.177 1143.93 Q306.177 1136.8 304.349 1133.26 Q302.543 1129.7 298.909 1129.7 M298.909 1125.99 Q304.719 1125.99 307.775 1130.6 Q310.853 1135.18 310.853 1143.93 Q310.853 1152.66 307.775 1157.27 Q304.719 1161.85 298.909 1161.85 Q293.099 1161.85 290.02 1157.27 Q286.964 1152.66 286.964 1143.93 Q286.964 1135.18 290.02 1130.6 Q293.099 1125.99 298.909 1125.99 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M259.557 1003.51 L267.196 1003.51 L267.196 977.141 L258.886 978.807 L258.886 974.548 L267.15 972.881 L271.826 972.881 L271.826 1003.51 L279.465 1003.51 L279.465 1007.44 L259.557 1007.44 L259.557 1003.51 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M298.909 975.96 Q295.298 975.96 293.469 979.525 Q291.664 983.066 291.664 990.196 Q291.664 997.302 293.469 1000.87 Q295.298 1004.41 298.909 1004.41 Q302.543 1004.41 304.349 1000.87 Q306.177 997.302 306.177 990.196 Q306.177 983.066 304.349 979.525 Q302.543 975.96 298.909 975.96 M298.909 972.256 Q304.719 972.256 307.775 976.863 Q310.853 981.446 310.853 990.196 Q310.853 998.923 307.775 1003.53 Q304.719 1008.11 298.909 1008.11 Q293.099 1008.11 290.02 1003.53 Q286.964 998.923 286.964 990.196 Q286.964 981.446 290.02 976.863 Q293.099 972.256 298.909 972.256 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M262.775 849.769 L279.094 849.769 L279.094 853.704 L257.15 853.704 L257.15 849.769 Q259.812 847.014 264.395 842.385 Q269.002 837.732 270.182 836.389 Q272.428 833.866 273.307 832.13 Q274.21 830.371 274.21 828.681 Q274.21 825.927 272.266 824.19 Q270.344 822.454 267.242 822.454 Q265.043 822.454 262.59 823.218 Q260.159 823.982 257.381 825.533 L257.381 820.811 Q260.205 819.677 262.659 819.098 Q265.113 818.519 267.15 818.519 Q272.52 818.519 275.715 821.204 Q278.909 823.889 278.909 828.38 Q278.909 830.51 278.099 832.431 Q277.312 834.329 275.205 836.922 Q274.627 837.593 271.525 840.811 Q268.423 844.005 262.775 849.769 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M298.909 822.223 Q295.298 822.223 293.469 825.788 Q291.664 829.329 291.664 836.459 Q291.664 843.565 293.469 847.13 Q295.298 850.672 298.909 850.672 Q302.543 850.672 304.349 847.13 Q306.177 843.565 306.177 836.459 Q306.177 829.329 304.349 825.788 Q302.543 822.223 298.909 822.223 M298.909 818.519 Q304.719 818.519 307.775 823.126 Q310.853 827.709 310.853 836.459 Q310.853 845.186 307.775 849.792 Q304.719 854.375 298.909 854.375 Q293.099 854.375 290.02 849.792 Q286.964 845.186 286.964 836.459 Q286.964 827.709 290.02 823.126 Q293.099 818.519 298.909 818.519 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M272.914 681.333 Q276.27 682.05 278.145 684.319 Q280.043 686.587 280.043 689.921 Q280.043 695.036 276.525 697.837 Q273.006 700.638 266.525 700.638 Q264.349 700.638 262.034 700.198 Q259.742 699.782 257.289 698.925 L257.289 694.411 Q259.233 695.546 261.548 696.124 Q263.863 696.703 266.386 696.703 Q270.784 696.703 273.076 694.967 Q275.39 693.231 275.39 689.921 Q275.39 686.865 273.238 685.152 Q271.108 683.416 267.289 683.416 L263.261 683.416 L263.261 679.574 L267.474 679.574 Q270.923 679.574 272.752 678.208 Q274.58 676.819 274.58 674.226 Q274.58 671.564 272.682 670.152 Q270.807 668.717 267.289 668.717 Q265.367 668.717 263.168 669.134 Q260.969 669.55 258.33 670.43 L258.33 666.263 Q260.992 665.523 263.307 665.152 Q265.645 664.782 267.705 664.782 Q273.029 664.782 276.131 667.212 Q279.233 669.62 279.233 673.74 Q279.233 676.611 277.59 678.601 Q275.946 680.569 272.914 681.333 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M298.909 668.486 Q295.298 668.486 293.469 672.05 Q291.664 675.592 291.664 682.722 Q291.664 689.828 293.469 693.393 Q295.298 696.935 298.909 696.935 Q302.543 696.935 304.349 693.393 Q306.177 689.828 306.177 682.722 Q306.177 675.592 304.349 672.05 Q302.543 668.486 298.909 668.486 M298.909 664.782 Q304.719 664.782 307.775 669.388 Q310.853 673.972 310.853 682.722 Q310.853 691.448 307.775 696.055 Q304.719 700.638 298.909 700.638 Q293.099 700.638 290.02 696.055 Q286.964 691.448 286.964 682.722 Q286.964 673.972 290.02 669.388 Q293.099 664.782 298.909 664.782 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M271.594 515.744 L259.789 534.193 L271.594 534.193 L271.594 515.744 M270.367 511.67 L276.247 511.67 L276.247 534.193 L281.177 534.193 L281.177 538.082 L276.247 538.082 L276.247 546.23 L271.594 546.23 L271.594 538.082 L255.992 538.082 L255.992 533.568 L270.367 511.67 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M298.909 514.748 Q295.298 514.748 293.469 518.313 Q291.664 521.855 291.664 528.984 Q291.664 536.091 293.469 539.656 Q295.298 543.197 298.909 543.197 Q302.543 543.197 304.349 539.656 Q306.177 536.091 306.177 528.984 Q306.177 521.855 304.349 518.313 Q302.543 514.748 298.909 514.748 M298.909 511.045 Q304.719 511.045 307.775 515.651 Q310.853 520.235 310.853 528.984 Q310.853 537.711 307.775 542.318 Q304.719 546.901 298.909 546.901 Q293.099 546.901 290.02 542.318 Q286.964 537.711 286.964 528.984 Q286.964 520.235 290.02 515.651 Q293.099 511.045 298.909 511.045 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M258.793 357.933 L277.15 357.933 L277.15 361.868 L263.076 361.868 L263.076 370.34 Q264.094 369.993 265.113 369.831 Q266.131 369.645 267.15 369.645 Q272.937 369.645 276.316 372.817 Q279.696 375.988 279.696 381.405 Q279.696 386.983 276.224 390.085 Q272.752 393.164 266.432 393.164 Q264.256 393.164 261.988 392.793 Q259.742 392.423 257.335 391.682 L257.335 386.983 Q259.418 388.118 261.641 388.673 Q263.863 389.229 266.34 389.229 Q270.344 389.229 272.682 387.122 Q275.02 385.016 275.02 381.405 Q275.02 377.794 272.682 375.687 Q270.344 373.581 266.34 373.581 Q264.465 373.581 262.59 373.997 Q260.738 374.414 258.793 375.294 L258.793 357.933 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M298.909 361.011 Q295.298 361.011 293.469 364.576 Q291.664 368.118 291.664 375.247 Q291.664 382.354 293.469 385.918 Q295.298 389.46 298.909 389.46 Q302.543 389.46 304.349 385.918 Q306.177 382.354 306.177 375.247 Q306.177 368.118 304.349 364.576 Q302.543 361.011 298.909 361.011 M298.909 357.308 Q304.719 357.308 307.775 361.914 Q310.853 366.497 310.853 375.247 Q310.853 383.974 307.775 388.581 Q304.719 393.164 298.909 393.164 Q293.099 393.164 290.02 388.581 Q286.964 383.974 286.964 375.247 Q286.964 366.497 290.02 361.914 Q293.099 357.308 298.909 357.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M269.326 219.612 Q266.178 219.612 264.326 221.765 Q262.497 223.917 262.497 227.667 Q262.497 231.394 264.326 233.57 Q266.178 235.723 269.326 235.723 Q272.474 235.723 274.303 233.57 Q276.154 231.394 276.154 227.667 Q276.154 223.917 274.303 221.765 Q272.474 219.612 269.326 219.612 M278.608 204.959 L278.608 209.218 Q276.849 208.385 275.043 207.945 Q273.261 207.505 271.502 207.505 Q266.872 207.505 264.418 210.63 Q261.988 213.755 261.641 220.075 Q263.006 218.061 265.066 216.996 Q267.127 215.908 269.603 215.908 Q274.812 215.908 277.821 219.08 Q280.853 222.228 280.853 227.667 Q280.853 232.991 277.705 236.209 Q274.557 239.427 269.326 239.427 Q263.33 239.427 260.159 234.843 Q256.988 230.237 256.988 221.51 Q256.988 213.316 260.877 208.455 Q264.766 203.57 271.316 203.57 Q273.076 203.57 274.858 203.918 Q276.664 204.265 278.608 204.959 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M298.909 207.274 Q295.298 207.274 293.469 210.839 Q291.664 214.38 291.664 221.51 Q291.664 228.616 293.469 232.181 Q295.298 235.723 298.909 235.723 Q302.543 235.723 304.349 232.181 Q306.177 228.616 306.177 221.51 Q306.177 214.38 304.349 210.839 Q302.543 207.274 298.909 207.274 M298.909 203.57 Q304.719 203.57 307.775 208.177 Q310.853 212.76 310.853 221.51 Q310.853 230.237 307.775 234.843 Q304.719 239.427 298.909 239.427 Q293.099 239.427 290.02 234.843 Q286.964 230.237 286.964 221.51 Q286.964 212.76 290.02 208.177 Q293.099 203.57 298.909 203.57 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip432)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1030.62 400.199,1045.28 400.786,941.861 401.372,852.675 401.958,767.215 402.545,687.169 403.131,617.815 403.718,550.968 404.304,495.201 404.891,443.167 405.477,394.435 406.063,350.606 406.65,387.99 407.236,349.551 407.823,315.296 408.409,284.954 408.995,318.061 409.582,293.071 410.168,271.572 410.755,252.107 411.341,235.529 411.927,222.426 412.514,250.91 413.1,240.531 413.687,232.377 414.273,226.293 414.86,222.652 415.446,220.669 416.032,219.895 416.619,220.653 417.205,222.826 417.792,248.861 418.378,254.707 418.964,280.732 419.551,288.203 420.137,295.954 420.724,303.92 421.31,313.767 421.896,324.006 422.483,333.932 423.069,383.299 423.656,395.473 424.242,407.787 424.829,431.699 425.415,443.835 426.001,475.685 426.588,505.892 427.174,516.409 427.761,543.126 428.347,560.763 428.933,578.771 429.52,597.11 430.106,614.327 430.693,637.475 431.279,661.17 431.865,683.271 432.452,693.5 433.038,703.99 433.625,714.111 434.211,729.559 434.798,744.25 435.384,763.069 435.97,776.721 436.557,793.867 437.143,803.031 437.73,811.456 438.316,824.126 438.902,835.883 439.489,850.955 440.075,865.026 440.662,872.637 441.248,883.874 441.835,897.403 442.421,907.554 443.007,920.357 443.594,932.753 444.18,950.434 444.767,956.082 445.353,961.799 445.939,967.425 446.526,972.952 447.112,986.277 447.699,991.273 448.285,998.512 448.871,1012.98 449.458,1019.83 450.044,1024.21 450.631,1028.52 451.217,1035.17 451.804,1043.94 452.39,1052.45 452.976,1060.54 453.563,1066.27 454.149,1071.83 454.736,1077.3 455.322,1082.32 455.908,1083.52 456.495,1090.64 457.081,1091.88 457.668,1097.25 458.254,1102.15 458.84,1109.07 459.427,1117.26 460.013,1119.93 460.6,1129.78 461.186,1133.3 461.773,1135.34 462.359,1140.79 462.945,1144.16 463.532,1149.16 464.118,1155.69 464.705,1163.61 465.291,1164.74 465.877,1166.15 466.464,1168.8 467.05,1169.92 467.637,1177.27 468.223,1178.01 468.809,1180.61 469.396,1188.08 469.982,1191.98 470.569,1190.73 471.155,1191.21 471.742,1193.18 472.328,1193.51 472.914,1192.78 473.501,1197.92 474.087,1196.9 474.674,1199.33 475.26,1201.47 475.846,1201.88 476.433,1205.73 477.019,1208.95 477.606,1209.33 478.192,1212.51 478.778,1210.99 479.365,1211.3 479.951,1214.24 480.538,1215.82 481.124,1215.67 481.711,1214.19 482.297,1214.26 482.883,1214.59 483.47,1217.65 484.056,1217.79 484.643,1219.18 485.229,1220.33 485.815,1224.1 486.402,1222.77 486.988,1227.07 487.575,1228.16 488.161,1228.93 488.748,1229.81 489.334,1229.44 489.92,1229.1 490.507,1227.29 491.093,1226.98 491.68,1229.56 492.266,1232.07 492.852,1234.45 493.439,1236.72 494.025,1237.01 494.612,1236.14 495.198,1238.42 495.784,1236.19 496.371,1238.33 496.957,1238.75 497.544,1240.48 498.13,1242.35 498.717,1242.61 499.303,1240.43 499.889,1243.49 500.476,1242.44 501.062,1242.61 501.649,1243.98 502.235,1246.66 502.821,1247.79 503.408,1250.53 503.994,1246.72 504.581,1246.99 505.167,1249.42 505.753,1245.38 506.34,1245.61 506.926,1245.45 507.513,1246.77 508.099,1242.93 508.686,1247.38 509.272,1247.43 509.858,1246.23 510.445,1246.53 511.031,1246.73 511.618,1245.47 512.204,1244.52 512.79,1247.43 513.377,1248.92 513.963,1246.63 514.55,1246.66 515.136,1244.31 515.722,1248.23 516.309,1247.15 516.895,1244.61 517.482,1245.05 518.068,1246.47 518.655,1241.41 519.241,1243.28 519.827,1244.21 520.414,1241.86 521,1241.2 521.587,1238.95 522.173,1239.65 522.759,1238.71 523.346,1240.66 523.932,1239.84 524.519,1240.38 525.105,1243.44 525.691,1242.35 526.278,1242.74 526.864,1244.37 527.451,1243.35 528.037,1242.44 528.624,1242.83 529.21,1241.96 529.796,1241.21 530.383,1242.86 530.969,1240.45 531.556,1239.8 532.142,1237.88 532.728,1238.68 533.315,1240.51 533.901,1241.15 534.488,1240.41 535.074,1239.81 535.661,1240.35 536.247,1237.16 536.833,1239.34 537.42,1237.35 538.006,1234.07 538.593,1234.89 539.179,1234.51 539.765,1234.27 540.352,1236.38 540.938,1237.19 541.525,1235.33 542.111,1234.77 542.697,1235.69 543.284,1235.25 543.87,1233.3 544.457,1232.58 545.043,1233.34 545.63,1234.36 546.216,1236.31 546.802,1237.13 547.389,1236.48 547.975,1235.62 548.562,1237.73 549.148,1239.64 549.734,1236.55 550.321,1236.13 550.907,1236.71 551.494,1235.96 552.08,1233.84 552.666,1234.46 553.253,1232.68 553.839,1231.13 554.426,1226.91 555.012,1227.9 555.599,1226.69 556.185,1226.36 556.771,1227.52 557.358,1225.92 557.944,1225.78 558.531,1224.32 559.117,1224.03 559.703,1222.76 560.29,1222.78 560.876,1221.53 561.463,1222.92 562.049,1226.72 562.635,1226.47 563.222,1226.36 563.808,1226.2 564.395,1225.87 564.981,1225.89 565.568,1225.77 566.154,1224.1 566.74,1223.83 567.327,1221.12 567.913,1221.14 568.5,1221.07 569.086,1221.3 569.672,1221.35 570.259,1219.9 570.845,1223.79 571.432,1222.45 572.018,1223.74 572.605,1221.31 573.191,1218.84 573.777,1220.14 574.364,1220.19 574.95,1220.41 575.537,1221.78 576.123,1222.97 576.709,1224.27 577.296,1226.81 577.882,1227.66 578.469,1227.22 579.055,1228 579.641,1227.67 580.228,1225.94 580.814,1229.34 581.401,1228.83 581.987,1228.5 582.574,1226.66 583.16,1227.5 583.746,1227.25 584.333,1226.86 584.919,1226.71 585.506,1227.82 586.092,1227.1 586.678,1227.83 587.265,1224.99 587.851,1226.14 588.438,1228.3 589.024,1231.59 589.61,1233.32 590.197,1235 590.783,1234.55 591.37,1236.22 591.956,1234.11 592.543,1233.1 593.129,1231.15 593.715,1231.72 594.302,1228.38 594.888,1227.85 595.475,1227.5 596.061,1228.57 596.647,1229.38 597.234,1228.93 597.82,1228.54 598.407,1230.4 598.993,1227.55 599.579,1226.95 600.166,1226.83 600.752,1227.46 601.339,1225.61 601.925,1223.76 602.512,1222.23 603.098,1224.52 603.684,1222.78 604.271,1225.08 604.857,1226 605.444,1226.5 606.03,1228.57 606.616,1228.94 607.203,1229.5 607.789,1230.02 608.376,1227.91 608.962,1228.72 609.548,1231.55 610.135,1230.88 610.721,1231.57 611.308,1230.66 611.894,1228.9 612.481,1228.06 613.067,1228.79 613.653,1227.2 614.24,1226.85 614.826,1226.39 615.413,1225.72 615.999,1229.11 616.585,1228.45 617.172,1226.65 617.758,1226.01 618.345,1222.89 618.931,1222.59 619.518,1220.81 620.104,1218.19 620.69,1219.23 621.277,1219.01 621.863,1211.44 622.45,1213.11 623.036,1213.18 623.622,1214.51 624.209,1213.3 624.795,1214.68 625.382,1214.77 625.968,1213.58 626.554,1213.76 627.141,1213.92 627.727,1211.3 628.314,1211.75 628.9,1209.33 629.487,1210.91 630.073,1211.18 630.659,1212.74 631.246,1214.22 631.832,1215.59 632.419,1214.59 633.005,1215.95 633.591,1215.94 634.178,1215.92 634.764,1216.91 635.351,1218.27 635.937,1216.82 636.523,1219.46 637.11,1219.26 637.696,1220.26 638.283,1221.18 638.869,1221.03 639.456,1218.22 640.042,1218.26 640.628,1219.35 641.215,1220.21 641.801,1219.6 642.388,1218.07 642.974,1220.5 643.56,1222.93 644.147,1223.65 644.733,1223.03 645.32,1217.49 645.906,1220.15 646.492,1222.23 647.079,1223.02 647.665,1220.28 648.252,1218.89 648.838,1218.76 649.425,1221.06 650.011,1218.36 650.597,1218.05 651.184,1219.22 651.77,1220.31 652.357,1219.92 652.943,1219.7 653.529,1220.51 654.116,1218.74 654.702,1217.1 655.289,1219.62 655.875,1219.52 656.462,1219.51 657.048,1218.1 657.634,1214.52 658.221,1215.92 658.807,1218.34 659.394,1219.35 659.98,1220.46 660.566,1222.27 661.153,1222.98 661.739,1223.71 662.326,1220.59 662.912,1219.97 663.498,1218.27 664.085,1219.19 664.671,1218.96 665.258,1219.81 665.844,1219.53 666.431,1218.91 667.017,1219.08 667.603,1222.54 668.19,1217.08 668.776,1215.5 669.363,1215.42 669.949,1217.7 670.535,1216.34 671.122,1213.82 671.708,1213.78 672.295,1212.32 672.881,1213.59 673.467,1213.63 674.054,1212.46 674.64,1212.3 675.227,1212.22 675.813,1214.76 676.4,1214.83 676.986,1213.26 677.572,1213.34 678.159,1210.96 678.745,1208.53 679.332,1209.93 679.918,1207.27 680.504,1211.05 681.091,1209.69 681.677,1208.67 682.264,1207.88 682.85,1209.19 683.436,1209.28 684.023,1206.5 684.609,1207.89 685.196,1206.93 685.782,1207.24 686.369,1204.57 686.955,1203.63 687.541,1203.93 688.128,1203.33 688.714,1202.46 689.301,1205.68 689.887,1207.05 690.473,1209.81 691.06,1209.88 691.646,1209.86 692.233,1212.42 692.819,1209.95 693.405,1210.26 693.992,1211.48 694.578,1213.89 695.165,1211.39 695.751,1212.77 696.338,1212.8 696.924,1215.12 697.51,1216.05 698.097,1213.15 698.683,1215.91 699.27,1213.06 699.856,1211.64 700.442,1210.28 701.029,1211.72 701.615,1205.36 702.202,1204.28 702.788,1204.46 703.375,1206.12 703.961,1207.6 704.547,1208.84 705.134,1208.78 705.72,1205.02 706.307,1204.23 706.893,1204.48 707.479,1203.5 708.066,1204.06 708.652,1205.5 709.239,1206.98 709.825,1207.17 710.411,1208.67 710.998,1208.94 711.584,1207.53 712.171,1209.93 712.757,1208.34 713.344,1210.79 713.93,1211.99 714.516,1210.7 715.103,1212.04 715.689,1211.96 716.276,1212.09 716.862,1212 717.448,1214.19 718.035,1211.5 718.621,1212.8 719.208,1210.12 719.794,1211.37 720.38,1211.03 720.967,1212.21 721.553,1214.66 722.14,1214.41 722.726,1215.56 723.313,1215.25 723.899,1213.81 724.485,1216.38 725.072,1216 725.658,1213.42 726.245,1214.57 726.831,1215.67 727.417,1211.67 728.004,1211.48 728.59,1215.05 729.177,1214.88 729.763,1215 730.349,1213.56 730.936,1209.87 731.522,1210.95 732.109,1210.86 732.695,1209.64 733.282,1208.35 733.868,1207.33 734.454,1208.84 735.041,1210.03 735.627,1210.19 736.214,1211.48 736.8,1212.75 737.386,1210.11 737.973,1208.89 738.559,1210.13 739.146,1208.97 739.732,1208.99 740.318,1209.24 740.905,1210.43 741.491,1210.28 742.078,1211.37 742.664,1211.3 743.251,1212.29 743.837,1214.74 744.423,1214.49 745.01,1215.57 745.596,1216.62 746.183,1217.4 746.769,1215.6 747.355,1217.93 747.942,1222.36 748.528,1222.88 749.115,1222.31 749.701,1221.52 750.288,1220.82 750.874,1220.33 751.46,1222.05 752.047,1220.18 752.633,1220.89 753.22,1218.88 753.806,1217.15 754.392,1216.72 754.979,1216.35 755.565,1218.3 756.152,1216.15 756.738,1214.29 757.324,1216.43 757.911,1217.32 758.497,1219.46 759.084,1218.85 759.67,1220.77 760.257,1220.37 760.843,1218.56 761.429,1218.2 762.016,1218.9 762.602,1219.69 763.189,1219.25 763.775,1218.63 764.361,1220.74 764.948,1217.66 765.534,1217.21 766.121,1217.87 766.707,1214.87 767.293,1214.46 767.88,1212.9 768.466,1210.18 769.053,1210.07 769.639,1211.27 770.226,1208.75 770.812,1208.75 771.398,1210.12 771.985,1208.61 772.571,1209.76 773.158,1209.78 773.744,1211.18 774.33,1211.07 774.917,1213.8 775.503,1213.39 776.09,1214.32 776.676,1214.26 777.262,1212.65 777.849,1208.59 778.435,1207.38 779.022,1207.58 779.608,1206.47 780.195,1205.33 780.781,1204.48 781.367,1202.31 781.954,1206.36 782.54,1208.7 783.127,1207.44 783.713,1207.67 784.299,1207.76 784.886,1206.75 785.472,1205.84 786.059,1205.27 786.645,1205.38 787.232,1204.27 787.818,1207.14 788.404,1207.49 788.991,1210.11 789.577,1211.29 790.164,1211.25 790.75,1209.86 791.336,1209.52 791.923,1205.46 792.509,1206.66 793.096,1205.48 793.682,1205.53 794.268,1206.92 794.855,1208.25 795.441,1208.17 796.028,1208.11 796.614,1207.72 797.201,1207.87 797.787,1207.9 798.373,1210.32 798.96,1207.76 799.546,1209.12 800.133,1209.09 800.719,1207.77 801.305,1208.89 801.892,1209.04 802.478,1207.65 803.065,1206.22 803.651,1210.11 804.237,1204.93 804.824,1205.11 805.41,1205.36 805.997,1206.67 806.583,1206.77 807.17,1206.9 807.756,1209.59 808.342,1208.6 808.929,1208.66 809.515,1205.93 810.102,1204.46 810.688,1205.97 811.274,1206.17 811.861,1210.25 812.447,1211.57 813.034,1209.9 813.62,1210.98 814.206,1210.93 814.793,1210.76 815.379,1210.48 815.966,1210.09 816.552,1208.74 817.139,1208.68 817.725,1207.48 818.311,1209.11 818.898,1207.76 819.484,1205.57 820.071,1207.42 820.657,1206.44 821.243,1205.29 821.83,1205.53 822.416,1209.47 823.003,1208.12 823.589,1206.81 824.175,1205.6 824.762,1205.78 825.348,1206.13 825.935,1205.33 826.521,1204.44 827.108,1205.77 827.694,1205.81 828.28,1207.17 828.867,1208.39 829.453,1208.28 830.04,1205.83 830.626,1205.68 831.212,1203.6 831.799,1206.25 832.385,1206.33 832.972,1208.91 833.558,1210.41 834.145,1210.3 834.731,1205.35 835.317,1206.64 835.904,1206.65 836.49,1205.2 837.077,1205.16 837.663,1206.56 838.249,1205.45 838.836,1203.17 839.422,1203.23 840.009,1202.29 840.595,1202.69 841.181,1204.09 841.768,1205.37 842.354,1204.34 842.941,1205.8 843.527,1207.2 844.114,1207.28 844.7,1208.38 845.286,1207.17 845.873,1208.29 846.459,1210.52 847.046,1209.2 847.632,1209.36 848.218,1207.84 848.805,1209.09 849.391,1211.5 849.978,1210.24 850.564,1209.23 851.15,1210.79 851.737,1213.13 852.323,1211.37 852.91,1211.03 853.496,1213.63 854.083,1215.8 854.669,1214.37 855.255,1214.17 855.842,1211.2 856.428,1208.68 857.015,1211.19 857.601,1210.97 858.187,1212.12 858.774,1209.4 859.36,1210.52 859.947,1210.48 860.533,1209.07 861.119,1211.44 861.706,1213.69 862.292,1214.61 862.879,1211.95 863.465,1210.3 864.052,1210.31 864.638,1208.82 865.224,1208.79 865.811,1207.16 866.397,1205.78 866.984,1206.14 867.57,1206.22 868.156,1206.28 868.743,1202.63 869.329,1202.6 869.916,1202.79 870.502,1204.31 871.089,1204.23 871.675,1205.64 872.261,1208.22 872.848,1210.52 873.434,1211.64 874.021,1209.98 874.607,1209.81 875.193,1210.85 875.78,1208.1 876.366,1206.74 876.953,1205.61 877.539,1205.99 878.125,1205.91 878.712,1203.08 879.298,1204.66 879.885,1203.51 880.471,1202.41 881.058,1201.47 881.644,1201.91 882.23,1202.2 882.817,1201.25 883.403,1200.62 883.99,1200.91 884.576,1201.2 885.162,1200.33 885.749,1199.32 886.335,1200.95 886.922,1202.73 887.508,1204.28 888.094,1204.64 888.681,1206.13 889.267,1206.28 889.854,1207.51 890.44,1207.63 891.027,1210.08 891.613,1209.86 892.199,1209.49 892.786,1209.3 893.372,1211.76 893.959,1211.61 894.545,1210.16 895.131,1211.42 895.718,1211.19 896.304,1211.06 896.891,1210.92 897.477,1211.92 898.063,1211.66 898.65,1211.5 899.236,1212.67 899.823,1213.61 900.409,1211.72 900.996,1211.32 901.582,1211.17 902.168,1210.96 902.755,1210.76 903.341,1211.76 903.928,1212.62 904.514,1213.54 905.1,1214.54 905.687,1211.92 906.273,1212.99 906.86,1213.77 907.446,1214.55 908.032,1212.95 908.619,1220.19 909.205,1220.61 909.792,1219.57 910.378,1217.74 910.965,1218.41 911.551,1216.48 912.137,1212.5 912.724,1209.65 913.31,1208.37 913.897,1207.18 914.483,1208.54 915.069,1207.12 915.656,1208.11 916.242,1208.09 916.829,1206.61 917.415,1205.48 918.002,1206.66 918.588,1207.88 919.174,1206.37 919.761,1209.06 920.347,1210.19 920.934,1211.33 921.52,1211.15 922.106,1209.51 922.693,1211.72 923.279,1210.09 923.866,1212.48 924.452,1208.51 925.038,1207.32 925.625,1210.87 926.211,1213.03 926.798,1210.45 927.384,1212.83 927.971,1213.42 928.557,1213 929.143,1212.57 929.73,1214.98 930.316,1214.74 930.903,1214.34 931.489,1214.11 932.075,1213.77 932.662,1212.05 933.248,1214.24 933.835,1213.97 934.421,1217.21 935.007,1216.49 935.594,1214.97 936.18,1212.13 936.767,1214.25 937.353,1212.71 937.94,1210.01 938.526,1211.3 939.112,1209.6 939.699,1206.72 940.285,1204.08 940.872,1206.58 941.458,1207.91 942.044,1205.31 942.631,1203.85 943.217,1206.51 943.804,1207.68 944.39,1206.25 944.976,1202.7 945.563,1203.17 946.149,1203.19 946.736,1205.59 947.322,1204.82 947.909,1204.8 948.495,1204.98 949.081,1205.01 949.668,1206.51 950.254,1206.67 950.841,1205.48 951.427,1206.52 952.013,1206.6 952.6,1209.08 953.186,1208.86 953.773,1210.02 954.359,1208.46 954.945,1207.15 955.532,1210.7 956.118,1206.89 956.705,1206.99 957.291,1207 957.878,1205.82 958.464,1207.04 959.05,1207.33 959.637,1205.1 960.223,1205.04 960.81,1203.93 961.396,1202.76 961.982,1200.26 962.569,1200.55 963.155,1199.43 963.742,1202.42 964.328,1202.72 964.915,1204.01 965.501,1202.86 966.087,1203.08 966.674,1203.19 967.26,1204.73 967.847,1204.51 968.433,1203.57 969.019,1203.39 969.606,1202.19 970.192,1201.29 970.779,1201.74 971.365,1200.66 971.951,1202.11 972.538,1203.47 973.124,1203.74 973.711,1203.62 974.297,1206.11 974.884,1204.62 975.47,1201.13 976.056,1201.42 976.643,1202.78 977.229,1202.62 977.816,1201.64 978.402,1204.39 978.988,1202.15 979.575,1201.13 980.161,1202.65 980.748,1201.76 981.334,1203.25 981.92,1201.88 982.507,1202.44 983.093,1202.73 983.68,1201.6 984.266,1201.67 984.853,1199.36 985.439,1200.96 986.025,1202.71 986.612,1205.36 987.198,1205.46 987.785,1205.41 988.371,1206.77 988.957,1206.76 989.544,1209.61 990.13,1209.54 990.717,1210.62 991.303,1209.29 991.889,1209.31 992.476,1209.16 993.062,1205.31 993.649,1204.41 994.235,1204.59 994.822,1205.92 995.408,1204.78 995.994,1207.38 996.581,1205.91 997.167,1206.24 997.754,1204.85 998.34,1202.52 998.926,1202.98 999.513,1203.45 1000.1,1202.31 1000.69,1205.16 1001.27,1203.86 1001.86,1203.85 1002.44,1204.94 1003.03,1207.67 1003.62,1207.56 1004.2,1206.34 1004.79,1205.24 1005.38,1206.66 1005.96,1205.35 1006.55,1206.87 1007.14,1208.21 1007.72,1209.25 1008.31,1206.61 1008.9,1206.79 1009.48,1207.89 1010.07,1204.07 1010.65,1204.22 1011.24,1204.22 1011.83,1206.64 1012.41,1207.51 1013,1207.47 1013.59,1208.72 1014.17,1211.21 1014.76,1209.99 1015.35,1208.47 1015.93,1209.87 1016.52,1209.56 1017.11,1212.09 1017.69,1211.59 1018.28,1212.6 1018.86,1212 1019.45,1211.8 1020.04,1211.65 1020.62,1211.2 1021.21,1210.98 1021.8,1210.44 1022.38,1210.14 1022.97,1208.66 1023.56,1207.03 1024.14,1204.59 1024.73,1205.99 1025.32,1204.71 1025.9,1206.04 1026.49,1207.39 1027.07,1207.47 1027.66,1207.47 1028.25,1210.99 1028.83,1209.48 1029.42,1208.33 1030.01,1208.29 1030.59,1206.78 1031.18,1205.53 1031.77,1206.73 1032.35,1206.76 1032.94,1207.86 1033.52,1207.62 1034.11,1205.21 1034.7,1205.19 1035.28,1206.46 1035.87,1207.79 1036.46,1209.28 1037.04,1209.13 1037.63,1207.47 1038.22,1210.01 1038.8,1209.83 1039.39,1211.09 1039.98,1210.99 1040.56,1211.85 1041.15,1210.16 1041.73,1209.74 1042.32,1209.89 1042.91,1209.56 1043.49,1208.29 1044.08,1209.5 1044.67,1208.02 1045.25,1206.56 1045.84,1206.5 1046.43,1207.72 1047.01,1208.9 1047.6,1208.91 1048.19,1210.04 1048.77,1207.33 1049.36,1204.54 1049.94,1205.71 1050.53,1203.32 1051.12,1203.72 1051.7,1203.92 1052.29,1206.38 1052.88,1206.12 1053.46,1203.59 1054.05,1201.34 1054.64,1200.52 1055.22,1199.44 1055.81,1201.03 1056.39,1201.25 1056.98,1202.67 1057.57,1200.12 1058.15,1202.92 1058.74,1205.7 1059.33,1207.03 1059.91,1209.57 1060.5,1205.66 1061.09,1207.11 1061.67,1205.85 1062.26,1206.03 1062.85,1205.02 1063.43,1205.15 1064.02,1205.04 1064.6,1206.44 1065.19,1210.38 1065.78,1208.79 1066.36,1209.62 1066.95,1211.13 1067.54,1212.14 1068.12,1211.7 1068.71,1209.16 1069.3,1210.38 1069.88,1211.45 1070.47,1210.02 1071.06,1208.94 1071.64,1206.57 1072.23,1205.43 1072.81,1203.2 1073.4,1204.53 1073.99,1202.02 1074.57,1202.45 1075.16,1206.23 1075.75,1202.8 1076.33,1202.93 1076.92,1200.71 1077.51,1198.55 1078.09,1201.33 1078.68,1200.39 1079.26,1203.53 1079.85,1203.65 1080.44,1203.74 1081.02,1203.79 1081.61,1201.47 1082.2,1202.79 1082.78,1204.29 1083.37,1206.69 1083.96,1210.67 1084.54,1211.14 1085.13,1207.14 1085.72,1208.42 1086.3,1206.87 1086.89,1205.7 1087.47,1204.69 1088.06,1200.87 1088.65,1201.15 1089.23,1200.18 1089.82,1201.95 1090.41,1200.74 1090.99,1201.06 1091.58,1201.05 1092.17,1201.42 1092.75,1200.55 1093.34,1200.51 1093.93,1202.17 1094.51,1202.66 1095.1,1202.76 1095.68,1204.33 1096.27,1204.49 1096.86,1204.58 1097.44,1203.74 1098.03,1204.1 1098.62,1201.75 1099.2,1201.86 1099.79,1202.03 1100.38,1203.26 1100.96,1202.19 1101.55,1201.36 1102.14,1201.81 1102.72,1202.06 1103.31,1201.06 1103.89,1200.24 1104.48,1200.69 1105.07,1200.92 1105.65,1201.33 1106.24,1200.46 1106.83,1199.41 1107.41,1199.5 1108,1198.64 1108.59,1200.48 1109.17,1202.12 1109.76,1202.53 1110.34,1207.79 1110.93,1210.17 1111.52,1209.91 1112.1,1209.76 1112.69,1213.28 1113.28,1215.28 1113.86,1215.81 1114.45,1215.31 1115.04,1213.53 1115.62,1214.37 1116.21,1213.97 1116.8,1213.56 1117.38,1212.95 1117.97,1212.48 1118.55,1211.06 1119.14,1209.45 1119.73,1210.3 1120.31,1209.08 1120.9,1208.98 1121.49,1209.04 1122.07,1209.97 1122.66,1208.56 1123.25,1208.47 1123.83,1208.3 1124.42,1208.02 1125.01,1209.3 1125.59,1210.51 1126.18,1211.32 1126.76,1211.17 1127.35,1209.59 1127.94,1211.9 1128.52,1211.37 1129.11,1209.75 1129.7,1209.43 1130.28,1209.26 1130.87,1204.05 1131.46,1205.5 1132.04,1204.31 1132.63,1205.37 1133.21,1209.25 1133.8,1208.92 1134.39,1207.42 1134.97,1206.2 1135.56,1204.97 1136.15,1204.9 1136.73,1203.64 1137.32,1203.78 1137.91,1202.96 1138.49,1205.45 1139.08,1203.03 1139.67,1203.33 1140.25,1204.66 1140.84,1204.77 1141.42,1206.02 1142.01,1208.57 1142.6,1209.64 1143.18,1208.25 1143.77,1207.99 1144.36,1205.47 1144.94,1206.63 1145.53,1204.23 1146.12,1204.27 1146.7,1204.37 1147.29,1203.38 1147.88,1203.63 1148.46,1205.04 1149.05,1208.78 1149.63,1207.43 1150.22,1212.37 1150.81,1214.71 1151.39,1214.12 1151.98,1217.34 1152.57,1216.58 1153.15,1217.17 1153.74,1216.82 1154.33,1213.94 1154.91,1210.93 1155.5,1209.56 1156.09,1210.67 1156.67,1212.81 1157.26,1211.37 1157.84,1212.46 1158.43,1209.91 1159.02,1213.25 1159.6,1215.36 1160.19,1216.14 1160.78,1214.16 1161.36,1212.34 1161.95,1210.99 1162.54,1212.16 1163.12,1210.48 1163.71,1210.34 1164.29,1210.07 1164.88,1207.36 1165.47,1205.93 1166.05,1204.77 1166.64,1201.1 1167.23,1201.21 1167.81,1201.46 1168.4,1200.43 1168.99,1201.99 1169.57,1203.4 1170.16,1202.22 1170.75,1200.12 1171.33,1200.28 1171.92,1199.49 1172.5,1203.24 1173.09,1203.24 1173.68,1203.62 1174.26,1205.11 1174.85,1203.96 1175.44,1205.3 1176.02,1205.35 1176.61,1206.48 1177.2,1206.44 1177.78,1206.5 1178.37,1206.17 1178.96,1205.27 1179.54,1206.62 1180.13,1205.59 1180.71,1203.19 1181.3,1205.89 1181.89,1204.66 1182.47,1204.65 1183.06,1204.76 1183.65,1204.7 1184.23,1203.29 1184.82,1205.89 1185.41,1204.58 1185.99,1207.24 1186.58,1204.58 1187.16,1206.98 1187.75,1205.38 1188.34,1207.92 1188.92,1206.53 1189.51,1210.14 1190.1,1207.37 1190.68,1207.48 1191.27,1207.2 1191.86,1205.69 1192.44,1210.32 1193.03,1210.1 1193.62,1211.08 1194.2,1208.53 1194.79,1209.65 1195.37,1209.56 1195.96,1211.72 1196.55,1211.45 1197.13,1212.35 1197.72,1213.19 1198.31,1212.65 1198.89,1210.53 1199.48,1212.96 1200.07,1212.91 1200.65,1217.36 1201.24,1216.82 1201.83,1212.52 1202.41,1210.74 1203,1212.91 1203.58,1208.69 1204.17,1208.44 1204.76,1208.09 1205.34,1207.85 1205.93,1210.27 1206.52,1208.76 1207.1,1204.7 1207.69,1204.63 1208.28,1203.29 1208.86,1201.97 1209.45,1202.19 1210.03,1202.16 1210.62,1203.47 1211.21,1202.38 1211.79,1204.04 1212.38,1201.72 1212.97,1201.61 1213.55,1201.83 1214.14,1200.87 1214.73,1200.11 1215.31,1201.6 1215.9,1201.93 1216.49,1198.23 1217.07,1198.66 1217.66,1196.3 1218.24,1197.65 1218.83,1195.78 1219.42,1196.44 1220,1196.76 1220.59,1200.01 1221.18,1201.73 1221.76,1200.76 1222.35,1202.26 1222.94,1198.47 1223.52,1201.43 1224.11,1202.86 1224.7,1202.87 1225.28,1203.17 1225.87,1203.66 1226.45,1202.46 1227.04,1202.61 1227.63,1201.41 1228.21,1200.32 1228.8,1199.35 1229.39,1202.01 1229.97,1202.26 1230.56,1201.14 1231.15,1201.63 1231.73,1199.17 1232.32,1200.67 1232.91,1200.02 1233.49,1201.65 1234.08,1200.8 1234.66,1202.46 1235.25,1200.1 1235.84,1199.24 1236.42,1199.57 1237.01,1198.47 1237.6,1198.72 1238.18,1197.68 1238.77,1198.41 1239.36,1198.95 1239.94,1200.4 1240.53,1200.91 1241.11,1201.33 1241.7,1204.43 1242.29,1203.1 1242.87,1203.21 1243.46,1202.18 1244.05,1203.64 1244.63,1204.9 1245.22,1201.26 1245.81,1200.28 1246.39,1200.31 1246.98,1199.17 1247.57,1199.58 1248.15,1200.29 1248.74,1198.07 1249.32,1197.17 1249.91,1196.65 1250.5,1194.98 1251.08,1194.51 1251.67,1194 1252.26,1197.19 1252.84,1196.34 1253.43,1198.14 1254.02,1201.12 1254.6,1200.33 1255.19,1200.46 1255.78,1199.77 1256.36,1201.25 1256.95,1200.43 1257.53,1202.23 1258.12,1203.48 1258.71,1201.1 1259.29,1201.73 1259.88,1203.26 1260.47,1203.65 1261.05,1206.2 1261.64,1208.98 1262.23,1208.76 1262.81,1209.91 1263.4,1210.92 1263.98,1209.13 1264.57,1210.27 1265.16,1210.14 1265.74,1212.63 1266.33,1215.04 1266.92,1211.91 1267.5,1212.63 1268.09,1210.84 1268.68,1211.78 1269.26,1212.94 1269.85,1213.82 1270.44,1212.34 1271.02,1212.04 1271.61,1209.16 1272.19,1210.34 1272.78,1210.3 1273.37,1210.26 1273.95,1211.4 1274.54,1212.36 1275.13,1210.98 1275.71,1209.63 1276.3,1210.99 1276.89,1209.37 1277.47,1211.67 1278.06,1212.77 1278.65,1212.45 1279.23,1209.37 1279.82,1212.8 1280.4,1213.99 1280.99,1214.82 1281.58,1212.85 1282.16,1211.35 1282.75,1209.92 1283.34,1210.69 1283.92,1211.48 1284.51,1211.05 1285.1,1212.07 1285.68,1206.88 1286.27,1207.09 1286.86,1208.43 1287.44,1209.44 1288.03,1211.71 1288.61,1209.77 1289.2,1209.65 1289.79,1210.48 1290.37,1209.11 1290.96,1211.56 1291.55,1212.47 1292.13,1212.3 1292.72,1211.8 1293.31,1211.86 1293.89,1212.84 1294.48,1211.33 1295.06,1212.6 1295.65,1211.04 1296.24,1211.89 1296.82,1212.97 1297.41,1210.1 1298,1211.05 1298.58,1209.55 1299.17,1208.06 1299.76,1207.99 1300.34,1208.57 1300.93,1206.04 1301.52,1204.97 1302.1,1206.44 1302.69,1203.95 1303.27,1205.36 1303.86,1205.38 1304.45,1204.22 1305.03,1201.66 1305.62,1200.48 1306.21,1199.41 1306.79,1197.11 1307.38,1197.53 1307.97,1198.11 1308.55,1197.32 1309.14,1197.65 1309.73,1198.24 1310.31,1199.71 1310.9,1201.51 1311.48,1204.54 1312.07,1205.74 1312.66,1204.41 1313.24,1206.06 1313.83,1203.42 1314.42,1206.15 1315,1206.19 1315.59,1206.23 1316.18,1207.44 1316.76,1207.34 1317.35,1209.62 1317.93,1210.57 1318.52,1210.35 1319.11,1208.75 1319.69,1209.68 1320.28,1210.72 1320.87,1211.5 1321.45,1209.85 1322.04,1208.24 1322.63,1207.98 1323.21,1206.86 1323.8,1206.78 1324.39,1206.91 1324.97,1206.71 1325.56,1205.24 1326.14,1203.89 1326.73,1202.79 1327.32,1202.87 1327.9,1205.32 1328.49,1206.55 1329.08,1204 1329.66,1204.21 1330.25,1204.46 1330.84,1203.1 1331.42,1200.74 1332.01,1200.69 1332.6,1202.13 1333.18,1202.19 1333.77,1201.2 1334.35,1200.13 1334.94,1204.26 1335.53,1207.07 1336.11,1207.24 1336.7,1206.02 1337.29,1208.66 1337.87,1208.64 1338.46,1208.74 1339.05,1211.34 1339.63,1209.55 1340.22,1209.26 1340.8,1211.83 1341.39,1212.81 1341.98,1212.7 1342.56,1213.62 1343.15,1213.33 1343.74,1211.33 1344.32,1210.96 1344.91,1210.73 1345.5,1210.3 1346.08,1211.26 1346.67,1214.68 1347.26,1212.9 1347.84,1212.4 1348.43,1211.82 1349.01,1208.92 1349.6,1208.63 1350.19,1206.99 1350.77,1207.37 1351.36,1208.19 1351.95,1207.96 1352.53,1206.55 1353.12,1206.38 1353.71,1204.87 1354.29,1208.88 1354.88,1208.42 1355.47,1209.25 1356.05,1206.23 1356.64,1206.31 1357.22,1208.49 1357.81,1207.14 1358.4,1206.91 1358.98,1205.47 1359.57,1205.64 1360.16,1201.97 1360.74,1202.38 1361.33,1202.52 1361.92,1204 1362.5,1204.25 1363.09,1205.55 1363.68,1204.2 1364.26,1205.3 1364.85,1206.63 1365.43,1206.64 1366.02,1205.29 1366.61,1202.74 1367.19,1200.09 1367.78,1201.68 1368.37,1203.07 1368.95,1204.55 1369.54,1209.91 1370.13,1209.51 1370.71,1210.64 1371.3,1211.78 1371.88,1212.89 1372.47,1210.99 1373.06,1209.39 1373.64,1210.65 1374.23,1209.05 1374.82,1206.43 1375.4,1205.01 1375.99,1202.54 1376.58,1201.28 1377.16,1204.01 1377.75,1207.1 1378.34,1208.29 1378.92,1209.32 1379.51,1210.55 1380.09,1211.53 1380.68,1208.47 1381.27,1209.62 1381.85,1208.17 1382.44,1206.5 1383.03,1202.62 1383.61,1201.37 1384.2,1201.79 1384.79,1200.81 1385.37,1202.16 1385.96,1204.87 1386.55,1203.69 1387.13,1202.6 1387.72,1203.73 1388.3,1198.67 1388.89,1198.73 1389.48,1202.82 1390.06,1204.23 1390.65,1205.54 1391.24,1206.85 1391.82,1206.62 1392.41,1206.4 1393,1208.94 1393.58,1208.65 1394.17,1208.46 1394.75,1204.94 1395.34,1205.1 1395.93,1205.42 1396.51,1204.42 1397.1,1204.35 1397.69,1205.62 1398.27,1205.45 1398.86,1202.76 1399.45,1204.12 1400.03,1203.16 1400.62,1204.66 1401.21,1205.87 1401.79,1209.8 1402.38,1209.68 1402.96,1210.68 1403.55,1211.85 1404.14,1212.6 1404.72,1211.22 1405.31,1211.13 1405.9,1209.31 1406.48,1205.54 1407.07,1206.98 1407.66,1208.15 1408.24,1207.8 1408.83,1210.42 1409.42,1210.25 1410,1208.64 1410.59,1210.95 1411.17,1209.67 1411.76,1208.11 1412.35,1206.92 1412.93,1206.92 1413.52,1209.41 1414.11,1205.56 1414.69,1207.1 1415.28,1205.79 1415.87,1206.2 1416.45,1206.22 1417.04,1204.87 1417.63,1203.92 1418.21,1204.28 1418.8,1205.56 1419.38,1204.35 1419.97,1205.39 1420.56,1204.25 1421.14,1204.2 1421.73,1203.05 1422.32,1201.03 1422.9,1202.5 1423.49,1201.62 1424.08,1205.49 1424.66,1205.82 1425.25,1207.37 1425.83,1209.85 1426.42,1208.66 1427.01,1209.58 1427.59,1207.69 1428.18,1208.91 1428.77,1207.29 1429.35,1205.74 1429.94,1206.69 1430.53,1205.29 1431.11,1205.28 1431.7,1204.23 1432.29,1205.63 1432.87,1205.47 1433.46,1205.63 1434.04,1208.04 1434.63,1207.75 1435.22,1204.99 1435.8,1207.55 1436.39,1206.03 1436.98,1203.84 1437.56,1203.73 1438.15,1206.25 1438.74,1204.95 1439.32,1204.93 1439.91,1204.99 1440.5,1205.09 1441.08,1207.51 1441.67,1206.09 1442.25,1206.07 1442.84,1208.72 1443.43,1208.29 1444.01,1208.51 1444.6,1211.01 1445.19,1212 1445.77,1211.57 1446.36,1213.72 1446.95,1212.14 1447.53,1212.93 1448.12,1212.55 1448.7,1208.41 1449.29,1205.76 1449.88,1207.04 1450.46,1201.94 1451.05,1203.53 1451.64,1200.98 1452.22,1201.35 1452.81,1204.05 1453.4,1202.86 1453.98,1202.97 1454.57,1203.06 1455.16,1201.81 1455.74,1204.77 1456.33,1207.61 1456.91,1207.24 1457.5,1205.79 1458.09,1205.89 1458.67,1205.76 1459.26,1202.23 1459.85,1205.29 1460.43,1205.56 1461.02,1210.78 1461.61,1211.76 1462.19,1210.09 1462.78,1210.05 1463.37,1209.79 1463.95,1210.72 1464.54,1209.11 1465.12,1211.69 1465.71,1210.06 1466.3,1208.89 1466.88,1207.44 1467.47,1208.64 1468.06,1205.89 1468.64,1204.73 1469.23,1204.76 1469.82,1206.14 1470.4,1208.75 1470.99,1206.1 1471.57,1206.11 1472.16,1207.35 1472.75,1204.88 1473.33,1204.97 1473.92,1204.51 1474.51,1202.25 1475.09,1204.8 1475.68,1207.6 1476.27,1207.84 1476.85,1206.5 1477.44,1205.19 1478.03,1205.33 1478.61,1206.73 1479.2,1203.94 1479.78,1201.43 1480.37,1203 1480.96,1203.01 1481.54,1202.12 1482.13,1200.72 1482.72,1202.39 1483.3,1203.8 1483.89,1207.74 1484.48,1207.65 1485.06,1206.33 1485.65,1206.46 1486.24,1206.47 1486.82,1206.34 1487.41,1204.95 1487.99,1202.42 1488.58,1201.2 1489.17,1200.37 1489.75,1201.9 1490.34,1198.51 1490.93,1197.89 1491.51,1197.06 1492.1,1195.16 1492.69,1194.58 1493.27,1196.17 1493.86,1195.37 1494.45,1194.52 1495.03,1194.92 1495.62,1195.4 1496.2,1195.84 1496.79,1196.4 1497.38,1194.44 1497.96,1197.64 1498.55,1201.69 1499.14,1204.19 1499.72,1205.83 1500.31,1207.18 1500.9,1205.87 1501.48,1207.03 1502.07,1209.54 1502.65,1206.79 1503.24,1205.57 1503.83,1201.63 1504.41,1200.83 1505,1202.62 1505.59,1202.71 1506.17,1198.88 1506.76,1198.27 1507.35,1201.09 1507.93,1202.59 1508.52,1203.92 1509.11,1203.81 1509.69,1204.21 1510.28,1203.03 1510.86,1200.68 1511.45,1200.85 1512.04,1199.98 1512.62,1200.23 1513.21,1201.66 1513.8,1201.83 1514.38,1200.69 1514.97,1201.15 1515.56,1200.1 1516.14,1202.96 1516.73,1200.77 1517.32,1199.77 1517.9,1198.79 1518.49,1198.82 1519.07,1200.05 1519.66,1201.52 1520.25,1203.33 1520.83,1202.18 1521.42,1203.55 1522.01,1204.95 1522.59,1206.11 1523.18,1208.47 1523.77,1209.84 1524.35,1209.8 1524.94,1208.22 1525.52,1206.61 1526.11,1204.08 1526.7,1203.8 1527.28,1205.2 1527.87,1204.42 1528.46,1205.89 1529.04,1205.97 1529.63,1206.17 1530.22,1205.15 1530.8,1206.14 1531.39,1207.38 1531.98,1204.83 1532.56,1205.07 1533.15,1204.01 1533.73,1202.93 1534.32,1200.73 1534.91,1199.66 1535.49,1199.73 1536.08,1202.68 1536.67,1200.72 1537.25,1203.58 1537.84,1201.2 1538.43,1204.05 1539.01,1204.19 1539.6,1205.57 1540.19,1206.89 1540.77,1209.15 1541.36,1208.97 1541.94,1209.97 1542.53,1211.27 1543.12,1210.93 1543.7,1210.59 1544.29,1210.45 1544.88,1207.51 1545.46,1203.45 1546.05,1203.7 1546.64,1206.11 1547.22,1206.04 1547.81,1204.98 1548.4,1206.35 1548.98,1206.48 1549.57,1208.75 1550.15,1209.7 1550.74,1207.14 1551.33,1208.34 1551.91,1202.96 1552.5,1201.62 1553.09,1204.26 1553.67,1205.82 1554.26,1205.88 1554.85,1205.87 1555.43,1205.79 1556.02,1208.34 1556.6,1207.01 1557.19,1207.05 1557.78,1206.82 1558.36,1202.81 1558.95,1203.08 1559.54,1201.89 1560.12,1203.6 1560.71,1206.37 1561.3,1205.01 1561.88,1206.41 1562.47,1210.05 1563.06,1209.95 1563.64,1208.4 1564.23,1210.58 1564.81,1209.04 1565.4,1208.95 1565.99,1211.01 1566.57,1209.45 1567.16,1210.71 1567.75,1208.07 1568.33,1209 1568.92,1207.58 1569.51,1207.39 1570.09,1206.09 1570.68,1204.8 1571.27,1203.78 1571.85,1204.83 1572.44,1204.86 1573.02,1211.08 1573.61,1209.43 1574.2,1209.59 1574.78,1208.18 1575.37,1211.59 1575.96,1212.42 1576.54,1212 1577.13,1212.7 1577.72,1210.77 1578.3,1213.01 1578.89,1212.42 1579.47,1209.56 1580.06,1208.37 1580.65,1208.43 1581.23,1209.41 1581.82,1209.23 1582.41,1210.6 1582.99,1211.48 1583.58,1212.43 1584.17,1212.12 1584.75,1214.22 1585.34,1214.94 1585.93,1215.77 1586.51,1215.07 1587.1,1214.4 1587.68,1213.82 1588.27,1208.55 1588.86,1207 1589.44,1205.77 1590.03,1205.95 1590.62,1206 1591.2,1206 1591.79,1204.54 1592.38,1202.14 1592.96,1202.34 1593.55,1202.57 1594.14,1203.82 1594.72,1203.82 1595.31,1203.8 1595.89,1206.51 1596.48,1205.39 1597.07,1205.58 1597.65,1204.25 1598.24,1204.3 1598.83,1203.13 1599.41,1205.86 1600,1205.5 1600.59,1209.22 1601.17,1211.59 1601.76,1213.81 1602.34,1212.15 1602.93,1215.36 1603.52,1215.14 1604.1,1212.06 1604.69,1213.26 1605.28,1209.22 1605.86,1208.88 1606.45,1212.44 1607.04,1214.54 1607.62,1213.9 1608.21,1213.22 1608.8,1211.54 1609.38,1208.7 1609.97,1206.14 1610.55,1207.46 1611.14,1208.72 1611.73,1209.67 1612.31,1205.73 1612.9,1205.59 1613.49,1205.57 1614.07,1203.09 1614.66,1204.7 1615.25,1199.58 1615.83,1197.38 1616.42,1198.77 1617.01,1198.92 1617.59,1200.23 1618.18,1198.32 1618.76,1197.73 1619.35,1199.54 1619.94,1198.48 1620.52,1201.22 1621.11,1201.51 1621.7,1202.94 1622.28,1205.52 1622.87,1204 1623.46,1201.13 1624.04,1202.84 1624.63,1205.59 1625.22,1204.53 1625.8,1204.62 1626.39,1204.9 1626.97,1206.17 1627.56,1206.1 1628.15,1206.12 1628.73,1205.87 1629.32,1208.42 1629.91,1209.29 1630.49,1207.74 1631.08,1206.34 1631.67,1206.18 1632.25,1206.17 1632.84,1206.18 1633.42,1211.43 1634.01,1212.31 1634.6,1209.63 1635.18,1212.95 1635.77,1214.87 1636.36,1211.75 1636.94,1212.58 1637.53,1212.11 1638.12,1208.27 1638.7,1205.41 1639.29,1205.62 1639.88,1205.77 1640.46,1203.17 1641.05,1204.42 1641.63,1203.25 1642.22,1201.15 1642.81,1198.88 1643.39,1200.45 1643.98,1200.76 1644.57,1202.24 1645.15,1202.78 1645.74,1203.09 1646.33,1204.83 1646.91,1207.52 1647.5,1205.25 1648.09,1203.8 1648.67,1204.24 1649.26,1203.13 1649.84,1204.7 1650.43,1206.05 1651.02,1205.81 1651.6,1208.39 1652.19,1209.48 1652.78,1206.49 1653.36,1206.51 1653.95,1202.56 1654.54,1204.1 1655.12,1206.62 1655.71,1206.69 1656.29,1205.32 1656.88,1204.28 1657.47,1205.43 1658.05,1204.41 1658.64,1203.45 1659.23,1202.61 1659.81,1200.28 1660.4,1199.14 1660.99,1200.79 1661.57,1201 1662.16,1199.92 1662.75,1198.67 1663.33,1197.71 1663.92,1198.29 1664.5,1197.78 1665.09,1202.23 1665.68,1204.05 1666.26,1202.85 1666.85,1201.74 1667.44,1204.54 1668.02,1204.89 1668.61,1206.35 1669.2,1206.45 1669.78,1202.86 1670.37,1200.57 1670.96,1199.54 1671.54,1198.53 1672.13,1201.45 1672.71,1201.64 1673.3,1200.92 1673.89,1201.35 1674.47,1205.5 1675.06,1206.84 1675.65,1205.12 1676.23,1211.61 1676.82,1211.47 1677.41,1211.26 1677.99,1211.24 1678.58,1212.39 1679.17,1211.94 1679.75,1211.7 1680.34,1213.66 1680.92,1214.27 1681.51,1213.94 1682.1,1212.23 1682.68,1213.28 1683.27,1210.4 1683.86,1215.26 1684.44,1212.11 1685.03,1211.84 1685.62,1212.27 1686.2,1212.2 1686.79,1213 1687.37,1212.92 1687.96,1212.57 1688.55,1212.13 1689.13,1209.13 1689.72,1210.11 1690.31,1211.25 1690.89,1212.07 1691.48,1210.19 1692.07,1205.09 1692.65,1205.13 1693.24,1205.15 1693.83,1206.54 1694.41,1208.71 1695,1207.34 1695.58,1205.8 1696.17,1205.9 1696.76,1206.96 1697.34,1205.75 1697.93,1201.94 1698.52,1198.24 1699.1,1197.71 1699.69,1199.68 1700.28,1200.28 1700.86,1200.71 1701.45,1198.5 1702.04,1200.38 1702.62,1201.83 1703.21,1203.13 1703.79,1203.13 1704.38,1200.85 1704.97,1201.32 1705.55,1200.43 1706.14,1198.28 1706.73,1201.07 1707.31,1201.57 1707.9,1201.72 1708.49,1207.08 1709.07,1205.84 1709.66,1202.06 1710.24,1202.31 1710.83,1203.6 1711.42,1201.32 1712,1201.33 1712.59,1199.06 1713.18,1198.05 1713.76,1195.86 1714.35,1196.32 1714.94,1196.8 1715.52,1196.19 1716.11,1197.8 1716.7,1198.14 1717.28,1201.33 1717.87,1194.35 1718.45,1195.03 1719.04,1195.81 1719.63,1196.6 1720.21,1197.08 1720.8,1196.31 1721.39,1197.01 1721.97,1198.83 1722.56,1202.97 1723.15,1201.98 1723.73,1205.76 1724.32,1208.28 1724.91,1209.38 1725.49,1208.94 1726.08,1204.99 1726.66,1203.96 1727.25,1206.32 1727.84,1208.97 1728.42,1208.68 1729.01,1209.67 1729.6,1212.03 1730.18,1210.35 1730.77,1209.87 1731.36,1210.72 1731.94,1210.32 1732.53,1210.34 1733.11,1211.08 1733.7,1210.72 1734.29,1207.57 1734.87,1208.62 1735.46,1207.23 1736.05,1205.81 1736.63,1208.14 1737.22,1209.33 1737.81,1209.25 1738.39,1209.04 1738.98,1208.79 1739.57,1209.98 1740.15,1210.96 1740.74,1205.5 1741.32,1207 1741.91,1208.46 1742.5,1205.57 1743.08,1206.85 1743.67,1205.84 1744.26,1205.95 1744.84,1207.24 1745.43,1208.61 1746.02,1208.55 1746.6,1209.5 1747.19,1208.92 1747.78,1208.9 1748.36,1211.28 1748.95,1210.79 1749.53,1208.13 1750.12,1207.82 1750.71,1211.35 1751.29,1208.41 1751.88,1206.68 1752.47,1209.32 1753.05,1208.85 1753.64,1209.72 1754.23,1209.55 1754.81,1210.79 1755.4,1209.17 1755.99,1213.82 1756.57,1213.51 1757.16,1211.65 1757.74,1206.49 1758.33,1204.93 1758.92,1202.61 1759.5,1204.11 1760.09,1205.34 1760.68,1205.18 1761.26,1206.47 1761.85,1207.74 1762.44,1207.69 1763.02,1207.38 1763.61,1205.99 1764.19,1205.96 1764.78,1204.57 1765.37,1203.2 1765.95,1204.69 1766.54,1204.78 1767.13,1204.91 1767.71,1204.82 1768.3,1203.42 1768.89,1205.02 1769.47,1205.07 1770.06,1204.8 1770.65,1205.02 1771.23,1207.74 1771.82,1210.12 1772.4,1208.62 1772.99,1208.21 1773.58,1209.58 1774.16,1206.73 1774.75,1206.52 1775.34,1206.41 1775.92,1207.27 1776.51,1207.35 1777.1,1207.24 1777.68,1208.37 1778.27,1209.57 1778.86,1208.26 1779.44,1208.21 1780.03,1210.82 1780.61,1212.06 1781.2,1210.67 1781.79,1211.81 1782.37,1211.36 1782.96,1209.67 1783.55,1209.49 1784.13,1209.36 1784.72,1211.81 1785.31,1212.9 1785.89,1212.51 1786.48,1215.79 1787.06,1215.13 1787.65,1213.33 1788.24,1213.94 1788.82,1209.71 1789.41,1210.82 1790,1206.9 1790.58,1205.58 1791.17,1203.03 1791.76,1204.36 1792.34,1204.35 1792.93,1205.64 1793.52,1204.37 1794.1,1205.92 1794.69,1205.9 1795.27,1209.81 1795.86,1207.37 1796.45,1208.67 1797.03,1208.53 1797.62,1207.09 1798.21,1208.38 1798.79,1207.12 1799.38,1205.77 1799.97,1204.5 1800.55,1204.66 1801.14,1204.85 1801.73,1206.33 1802.31,1205.1 1802.9,1202.6 1803.48,1202.92 1804.07,1203.02 1804.66,1202.95 1805.24,1203.01 1805.83,1203.11 1806.42,1203.24 1807,1202.24 1807.59,1201.23 1808.18,1198.82 1808.76,1199.07 1809.35,1197.94 1809.94,1199.35 1810.52,1199.5 1811.11,1199.65 1811.69,1198.42 1812.28,1195.06 1812.87,1195.38 1813.45,1196.94 1814.04,1196.1 1814.63,1196.51 1815.21,1198.23 1815.8,1197.47 1816.39,1199.01 1816.97,1198.11 1817.56,1198.61 1818.14,1198.99 1818.73,1200.59 1819.32,1199.54 1819.9,1199.71 1820.49,1198.71 1821.08,1197.89 1821.66,1198.33 1822.25,1199.88 1822.84,1200.44 1823.42,1202.14 1824.01,1199.49 1824.6,1198.87 1825.18,1199.33 1825.77,1200.9 1826.35,1201.09 1826.94,1205.26 1827.53,1205.58 1828.11,1204.17 1828.7,1202.88 1829.29,1200.54 1829.87,1203.27 1830.46,1205.9 1831.05,1209.92 1831.63,1209.78 1832.22,1208.51 1832.81,1204.62 1833.39,1208.51 1833.98,1208.51 1834.56,1210.44 1835.15,1212.76 1835.74,1209.81 1836.32,1207.09 1836.91,1207.39 1837.5,1208.81 1838.08,1207.8 1838.67,1205.36 1839.26,1205.37 1839.84,1204.41 1840.43,1205.67 1841.01,1203.16 1841.6,1198.45 1842.19,1198.99 1842.77,1200.94 1843.36,1198.37 1843.95,1200.04 1844.53,1201.47 1845.12,1202.91 1845.71,1201.93 1846.29,1202.05 1846.88,1202.35 1847.47,1202.19 1848.05,1202.28 1848.64,1202.26 1849.22,1204.85 1849.81,1203.47 1850.4,1203.54 1850.98,1202.52 1851.57,1202.88 1852.16,1201.61 1852.74,1204.4 1853.33,1205.67 1853.92,1205.9 1854.5,1205.88 1855.09,1205.92 1855.68,1206.09 1856.26,1206.13 1856.85,1205 1857.43,1205.31 1858.02,1206.39 1858.61,1207.42 1859.19,1207.29 1859.78,1207.25 1860.37,1205.6 1860.95,1206.74 1861.54,1209.12 1862.13,1210.32 1862.71,1210.43 1863.3,1210.14 1863.88,1212.48 1864.47,1213.18 1865.06,1215.51 1865.64,1212.37 1866.23,1214.66 1866.82,1212.69 1867.4,1213.84 1867.99,1213.08 1868.58,1213.85 1869.16,1212.32 1869.75,1212.93 1870.34,1213.82 1870.92,1214.86 1871.51,1214.33 1872.09,1213.87 1872.68,1210.89 1873.27,1210.46 1873.85,1210.29 1874.44,1208.37 1875.03,1209.36 1875.61,1207.7 1876.2,1207.66 1876.79,1208.8 1877.37,1208.61 1877.96,1206.02 1878.55,1205.9 1879.13,1206.06 1879.72,1206.09 1880.3,1207.29 1880.89,1209.61 1881.48,1209.11 1882.06,1210.03 1882.65,1208.7 1883.24,1209.37 1883.82,1209.13 1884.41,1207.66 1885,1206.37 1885.58,1203.94 1886.17,1204.33 1886.76,1204.26 1887.34,1203.09 1887.93,1202.25 1888.51,1202.32 1889.1,1201.01 1889.69,1201.13 1890.27,1200.21 1890.86,1199.39 1891.45,1201.17 1892.03,1201.61 1892.62,1202.8 1893.21,1201.55 1893.79,1203.18 1894.38,1206.06 1894.96,1202.8 1895.55,1202.79 1896.14,1201.88 1896.72,1201.01 1897.31,1201.44 1897.9,1201.63 1898.48,1203.13 1899.07,1205.82 1899.66,1206.89 1900.24,1206.82 1900.83,1208.05 1901.42,1208.02 1902,1210.31 1902.59,1207.62 1903.17,1208.77 1903.76,1212.37 1904.35,1212.18 1904.93,1214.09 1905.52,1214.94 1906.11,1213.22 1906.69,1212.89 1907.28,1213.78 1907.87,1213.17 1908.45,1211.54 1909.04,1212.45 1909.63,1212.18 1910.21,1213.3 1910.8,1214.09 1911.38,1212.34 1911.97,1210.76 1912.56,1209.55 1913.14,1208.03 1913.73,1209.23 1914.32,1210.32 1914.9,1208.76 1915.49,1206.03 1916.08,1203.4 1916.66,1203.4 1917.25,1202.72 1917.83,1204.42 1918.42,1203.11 1919.01,1201.95 1919.59,1200.87 1920.18,1203.74 1920.77,1201.32 1921.35,1201.72 1921.94,1201.94 1922.53,1203.37 1923.11,1203.74 1923.7,1206.4 1924.29,1203.68 1924.87,1201.3 1925.46,1202.79 1926.04,1201.72 1926.63,1201.79 1927.22,1202.06 1927.8,1199.66 1928.39,1200.09 1928.98,1200.44 1929.56,1196.94 1930.15,1194.73 1930.74,1196.3 1931.32,1196.83 1931.91,1197.27 1932.5,1197.82 1933.08,1194.46 1933.67,1196.52 1934.25,1198.24 1934.84,1198.53 1935.43,1197.57 1936.01,1198.3 1936.6,1196.28 1937.19,1196.78 1937.77,1197.34 1938.36,1199.29 1938.95,1202.16 1939.53,1203.45 1940.12,1206.02 1940.71,1208.71 1941.29,1207.33 1941.88,1208.69 1942.46,1205.83 1943.05,1206.05 1943.64,1207.3 1944.22,1211.04 1944.81,1210.81 1945.4,1209.23 1945.98,1208.96 1946.57,1208.78 1947.16,1209.91 1947.74,1210.9 1948.33,1208.32 1948.91,1208.18 1949.5,1205.44 1950.09,1203.04 1950.67,1202.98 1951.26,1204.33 1951.85,1203.17 1952.43,1203.27 1953.02,1202.07 1953.61,1203.69 1954.19,1202.64 1954.78,1201.48 1955.37,1200.86 1955.95,1202.17 1956.54,1202.37 1957.12,1204.95 1957.71,1204.95 1958.3,1204.06 1958.88,1203.11 1959.47,1206.94 1960.06,1208.24 1960.64,1206.63 1961.23,1206.72 1961.82,1205.31 1962.4,1205.39 1962.99,1206.57 1963.58,1202.94 1964.16,1202.88 1964.75,1206.75 1965.33,1205.18 1965.92,1205.17 1966.51,1203.83 1967.09,1203.83 1967.68,1203.9 1968.27,1204 1968.85,1203.93 1969.44,1206.17 1970.03,1207.31 1970.61,1209.44 1971.2,1209.15 1971.78,1207.95 1972.37,1207.71 1972.96,1207.63 1973.54,1206.25 1974.13,1207.45 1974.72,1211.09 1975.3,1210.73 1975.89,1209.21 1976.48,1211.49 1977.06,1212.4 1977.65,1213.29 1978.24,1212.84 1978.82,1211.19 1979.41,1206.86 1979.99,1208.12 1980.58,1209.13 1981.17,1207.51 1981.75,1205.93 1982.34,1204.42 1982.93,1205.64 1983.51,1205.48 1984.1,1205.52 1984.69,1204.62 1985.27,1204.68 1985.86,1202.35 1986.45,1202.43 1987.03,1203.97 1987.62,1205.31 1988.2,1205.49 1988.79,1205.63 1989.38,1202.92 1989.96,1205.87 1990.55,1205.94 1991.14,1207.01 1991.72,1205.98 1992.31,1207.21 1992.9,1208.38 1993.48,1209.39 1994.07,1207.71 1994.65,1208.77 1995.24,1208.47 1995.83,1205.92 1996.41,1205.93 1997,1204.52 1997.59,1205.83 1998.17,1204.67 1998.76,1204.7 1999.35,1206.13 1999.93,1206.23 2000.52,1204.95 2001.11,1201.32 2001.69,1202.8 2002.28,1199.22 2002.86,1202.17 2003.45,1199.92 2004.04,1201.34 2004.62,1203.86 2005.21,1201.32 2005.8,1201.47 2006.38,1199.09 2006.97,1197.98 2007.56,1196.22 2008.14,1197.95 2008.73,1200.77 2009.32,1198.57 2009.9,1195.08 2010.49,1197.09 2011.07,1196.23 2011.66,1199.59 2012.25,1199.88 2012.83,1201.4 2013.42,1201.39 2014.01,1201.32 2014.59,1202.78 2015.18,1203.06 2015.77,1199.47 2016.35,1203.33 2016.94,1203.38 2017.53,1204.79 2018.11,1205.31 2018.7,1205.16 2019.28,1206.49 2019.87,1207.95 2020.46,1209.32 2021.04,1209.29 2021.63,1211.64 2022.22,1212.84 2022.8,1211.15 2023.39,1211.58 2023.98,1211.18 2024.56,1212.33 2025.15,1209.84 2025.73,1208.39 2026.32,1208.08 2026.91,1209.08 2027.49,1211.53 2028.08,1211.21 2028.67,1211.12 2029.25,1212.19 2029.84,1209.34 2030.43,1206.51 2031.01,1206.33 2031.6,1206.45 2032.19,1205.35 2032.77,1204.28 2033.36,1201.75 2033.94,1199.34 2034.53,1199.87 2035.12,1199.14 2035.7,1198.35 2036.29,1197.27 2036.88,1197.48 2037.46,1197.87 2038.05,1197.21 2038.64,1198.93 2039.22,1199.19 2039.81,1199.57 2040.4,1202.29 2040.98,1203.59 2041.57,1204.96 2042.15,1204.89 2042.74,1204.99 2043.33,1207.71 2043.91,1208.82 2044.5,1208.61 2045.09,1208.66 2045.67,1209.69 2046.26,1212.01 2046.85,1214.24 2047.43,1217.46 2048.02,1215.81 2048.6,1214.2 2049.19,1211.3 2049.78,1212.37 2050.36,1208.17 2050.95,1208.02 2051.54,1209.24 2052.12,1208.93 2052.71,1209.78 2053.3,1209.86 2053.88,1213.02 2054.47,1212.57 2055.06,1212.14 2055.64,1210.72 2056.23,1212.9 2056.81,1211.42 2057.4,1209.89 2057.99,1210.71 2058.57,1207.82 2059.16,1208.82 2059.75,1207.32 2060.33,1206.1 2060.92,1203.46 2061.51,1202.45 2062.09,1202.35 2062.68,1204.98 2063.27,1203.79 2063.85,1205.21 2064.44,1203.86 2065.02,1203.92 2065.61,1201.54 2066.2,1202.87 2066.78,1201.8 2067.37,1201.8 2067.96,1200.72 2068.54,1198.55 2069.13,1202.7 2069.72,1204 2070.3,1202.64 2070.89,1201.53 2071.48,1201.64 2072.06,1200.61 2072.65,1201.81 2073.23,1203.2 2073.82,1202.31 2074.41,1202.5 2074.99,1202.59 2075.58,1200.19 2076.17,1201.96 2076.75,1200.94 2077.34,1201.01 2077.93,1201.41 2078.51,1201.73 2079.1,1199.32 2079.68,1198.17 2080.27,1207.6 2080.86,1206.11 2081.44,1207.52 2082.03,1207.72 2082.62,1208.83 2083.2,1211.29 2083.79,1209.79 2084.38,1207.28 2084.96,1208.28 2085.55,1206.78 2086.14,1205.46 2086.72,1205.5 2087.31,1204.06 2087.89,1204.15 2088.48,1201.68 2089.07,1204.46 2089.65,1207.07 2090.24,1209.68 2090.83,1208.35 2091.41,1208.27 2092,1206.87 2092.59,1205.5 2093.17,1203.2 2093.76,1202.23 2094.35,1202.13 2094.93,1201.22 2095.52,1201.45 2096.1,1203.04 2096.69,1202.01 2097.28,1201.15 2097.86,1201.35 2098.45,1202.81 2099.04,1205.52 2099.62,1205.76 2100.21,1205.81 2100.8,1206.96 2101.38,1206.63 2101.97,1205.32 2102.55,1202.83 2103.14,1203.01 2103.73,1204.52 2104.31,1205.75 2104.9,1206.91 2105.49,1206.85 2106.07,1205.55 2106.66,1203.01 2107.25,1203.06 2107.83,1204.42 2108.42,1204.45 2109.01,1204.43 2109.59,1204.55 2110.18,1203.15 2110.76,1203.39 2111.35,1203.34 2111.94,1204.59 2112.52,1204.79 2113.11,1206.14 2113.7,1207.28 2114.28,1206.12 2114.87,1205.86 2115.46,1207.13 2116.04,1208.21 2116.63,1209.37 2117.22,1207.96 2117.8,1209.11 2118.39,1209.2 2118.97,1206.61 2119.56,1206.52 2120.15,1206.59 2120.73,1205.5 2121.32,1206.77 2121.91,1205.34 2122.49,1206.8 2123.08,1205.42 2123.67,1206.67 2124.25,1204.09 2124.84,1200.26 2125.42,1199.48 2126.01,1201.03 2126.6,1201.57 2127.18,1203.13 2127.77,1204.69 2128.36,1204.81 2128.94,1204.95 2129.53,1206.53 2130.12,1207.64 2130.7,1209.13 2131.29,1207.82 2131.88,1209.02 2132.46,1208.58 2133.05,1211.08 2133.63,1207.2 2134.22,1205.82 2134.81,1205.65 2135.39,1206.94 2135.98,1205.63 2136.57,1208.12 2137.15,1212.74 2137.74,1213.47 2138.33,1215.46 2138.91,1214.68 2139.5,1216.62 2140.09,1215.95 2140.67,1214.02 2141.26,1213.52 2141.84,1210.69 2142.43,1211.74 2143.02,1211.38 2143.6,1209.77 2144.19,1209.39 2144.78,1210.29 2145.36,1211.47 2145.95,1208.64 2146.54,1208.67 2147.12,1212.3 2147.71,1210.67 2148.3,1216.64 2148.88,1218.54 2149.47,1217.91 2150.05,1215.95 2150.64,1215.13 2151.23,1214.8 2151.81,1210.48 2152.4,1210.17 2152.99,1207.38 2153.57,1205.95 2154.16,1208.52 2154.75,1209.6 2155.33,1209.72 2155.92,1208.18 2156.5,1207.94 2157.09,1206.47 2157.68,1208.8 2158.26,1207.42 \"/>\n<path clip-path=\"url(#clip432)\" d=\"M986.025 1206.31 L986.612 1206.31 L987.198 1206.31 L987.785 1206.31 L988.371 1206.31 L988.957 1206.31 L989.544 1206.31 L990.13 1206.31 L990.717 1206.31 L991.303 1206.31 L991.889 1206.31 L992.476 1206.31 L993.062 1206.31 L993.649 1206.31 L994.235 1206.31 L994.822 1206.31 L995.408 1206.31 L995.994 1206.31 L996.581 1206.31 L997.167 1206.31 L997.754 1206.31 L998.34 1206.31 L998.926 1206.31 L999.513 1206.31 L1000.1 1206.31 L1000.69 1206.31 L1001.27 1206.31 L1001.86 1206.31 L1002.44 1206.31 L1003.03 1206.31 L1003.62 1206.31 L1004.2 1206.31 L1004.79 1206.31 L1005.38 1206.31 L1005.96 1206.31 L1006.55 1206.31 L1007.14 1206.31 L1007.72 1206.31 L1008.31 1206.31 L1008.9 1206.31 L1009.48 1206.31 L1010.07 1206.31 L1010.65 1206.31 L1011.24 1206.31 L1011.83 1206.31 L1012.41 1206.31 L1013 1206.31 L1013.59 1206.31 L1014.17 1206.31 L1014.76 1206.31 L1015.35 1206.31 L1015.93 1206.31 L1016.52 1206.31 L1017.11 1206.31 L1017.69 1206.31 L1018.28 1206.31 L1018.86 1206.31 L1019.45 1206.31 L1020.04 1206.31 L1020.62 1206.31 L1021.21 1206.31 L1021.8 1206.31 L1022.38 1206.31 L1022.97 1206.31 L1023.56 1206.31 L1024.14 1206.31 L1024.73 1206.31 L1025.32 1206.31 L1025.9 1206.31 L1026.49 1206.31 L1027.07 1206.31 L1027.66 1206.31 L1028.25 1206.31 L1028.83 1206.31 L1029.42 1206.31 L1030.01 1206.31 L1030.59 1206.31 L1031.18 1206.31 L1031.77 1206.31 L1032.35 1206.31 L1032.94 1206.31 L1033.52 1206.31 L1034.11 1206.31 L1034.7 1206.31 L1035.28 1206.31 L1035.87 1206.31 L1036.46 1206.31 L1037.04 1206.31 L1037.63 1206.31 L1038.22 1206.31 L1038.8 1206.31 L1039.39 1206.31 L1039.98 1206.31 L1040.56 1206.31 L1041.15 1206.31 L1041.73 1206.31 L1042.32 1206.31 L1042.91 1206.31 L1043.49 1206.31 L1044.08 1206.31 L1044.67 1206.31 L1045.25 1206.31 L1045.84 1206.31 L1046.43 1206.31 L1047.01 1206.31 L1047.6 1206.31 L1048.19 1206.31 L1048.77 1206.31 L1049.36 1206.31 L1049.94 1206.31 L1050.53 1206.31 L1051.12 1206.31 L1051.7 1206.31 L1052.29 1206.31 L1052.88 1206.31 L1053.46 1206.31 L1054.05 1206.31 L1054.64 1206.31 L1055.22 1206.31 L1055.81 1206.31 L1056.39 1206.31 L1056.98 1206.31 L1057.57 1206.31 L1058.15 1206.31 L1058.74 1206.31 L1059.33 1206.31 L1059.91 1206.31 L1060.5 1206.31 L1061.09 1206.31 L1061.67 1206.31 L1062.26 1206.31 L1062.85 1206.31 L1063.43 1206.31 L1064.02 1206.31 L1064.6 1206.31 L1065.19 1206.31 L1065.78 1206.31 L1066.36 1206.31 L1066.95 1206.31 L1067.54 1206.31 L1068.12 1206.31 L1068.71 1206.31 L1069.3 1206.31 L1069.88 1206.31 L1070.47 1206.31 L1071.06 1206.31 L1071.64 1206.31 L1072.23 1206.31 L1072.81 1206.31 L1073.4 1206.31 L1073.99 1206.31 L1074.57 1206.31 L1075.16 1206.31 L1075.75 1206.31 L1076.33 1206.31 L1076.92 1206.31 L1077.51 1206.31 L1078.09 1206.31 L1078.68 1206.31 L1079.26 1206.31 L1079.85 1206.31 L1080.44 1206.31 L1081.02 1206.31 L1081.61 1206.31 L1082.2 1206.31 L1082.78 1206.31 L1083.37 1206.31 L1083.96 1206.31 L1084.54 1206.31 L1085.13 1206.31 L1085.72 1206.31 L1086.3 1206.31 L1086.89 1206.31 L1087.47 1206.31 L1088.06 1206.31 L1088.65 1206.31 L1089.23 1206.31 L1089.82 1206.31 L1090.41 1206.31 L1090.99 1206.31 L1091.58 1206.31 L1092.17 1206.31 L1092.75 1206.31 L1093.34 1206.31 L1093.93 1206.31 L1094.51 1206.31 L1095.1 1206.31 L1095.68 1206.31 L1096.27 1206.31 L1096.86 1206.31 L1097.44 1206.31 L1098.03 1206.31 L1098.62 1206.31 L1099.2 1206.31 L1099.79 1206.31 L1100.38 1206.31 L1100.96 1206.31 L1101.55 1206.31 L1102.14 1206.31 L1102.72 1206.31 L1103.31 1206.31 L1103.89 1206.31 L1104.48 1206.31 L1105.07 1206.31 L1105.65 1206.31 L1106.24 1206.31 L1106.83 1206.31 L1107.41 1206.31 L1108 1206.31 L1108.59 1206.31 L1109.17 1206.31 L1109.76 1206.31 L1110.34 1206.31 L1110.93 1206.31 L1111.52 1206.31 L1112.1 1206.31 L1112.69 1206.31 L1113.28 1206.31 L1113.86 1206.31 L1114.45 1206.31 L1115.04 1206.31 L1115.62 1206.31 L1116.21 1206.31 L1116.8 1206.31 L1117.38 1206.31 L1117.97 1206.31 L1118.55 1206.31 L1119.14 1206.31 L1119.73 1206.31 L1120.31 1206.31 L1120.9 1206.31 L1121.49 1206.31 L1122.07 1206.31 L1122.66 1206.31 L1123.25 1206.31 L1123.83 1206.31 L1124.42 1206.31 L1125.01 1206.31 L1125.59 1206.31 L1126.18 1206.31 L1126.76 1206.31 L1127.35 1206.31 L1127.94 1206.31 L1128.52 1206.31 L1129.11 1206.31 L1129.7 1206.31 L1130.28 1206.31 L1130.87 1206.31 L1131.46 1206.31 L1132.04 1206.31 L1132.63 1206.31 L1133.21 1206.31 L1133.8 1206.31 L1134.39 1206.31 L1134.97 1206.31 L1135.56 1206.31 L1136.15 1206.31 L1136.73 1206.31 L1137.32 1206.31 L1137.91 1206.31 L1138.49 1206.31 L1139.08 1206.31 L1139.67 1206.31 L1140.25 1206.31 L1140.84 1206.31 L1141.42 1206.31 L1142.01 1206.31 L1142.6 1206.31 L1143.18 1206.31 L1143.77 1206.31 L1144.36 1206.31 L1144.94 1206.31 L1145.53 1206.31 L1146.12 1206.31 L1146.7 1206.31 L1147.29 1206.31 L1147.88 1206.31 L1148.46 1206.31 L1149.05 1206.31 L1149.63 1206.31 L1150.22 1206.31 L1150.81 1206.31 L1151.39 1206.31 L1151.98 1206.31 L1152.57 1206.31 L1153.15 1206.31 L1153.74 1206.31 L1154.33 1206.31 L1154.91 1206.31 L1155.5 1206.31 L1156.09 1206.31 L1156.67 1206.31 L1157.26 1206.31 L1157.84 1206.31 L1158.43 1206.31 L1159.02 1206.31 L1159.6 1206.31 L1160.19 1206.31 L1160.78 1206.31 L1161.36 1206.31 L1161.95 1206.31 L1162.54 1206.31 L1163.12 1206.31 L1163.71 1206.31 L1164.29 1206.31 L1164.88 1206.31 L1165.47 1206.31 L1166.05 1206.31 L1166.64 1206.31 L1167.23 1206.31 L1167.81 1206.31 L1168.4 1206.31 L1168.99 1206.31 L1169.57 1206.31 L1170.16 1206.31 L1170.75 1206.31 L1171.33 1206.31 L1171.92 1206.31 L1172.5 1206.31 L1173.09 1206.31 L1173.68 1206.31 L1174.26 1206.31 L1174.85 1206.31 L1175.44 1206.31 L1176.02 1206.31 L1176.61 1206.31 L1177.2 1206.31 L1177.78 1206.31 L1178.37 1206.31 L1178.96 1206.31 L1179.54 1206.31 L1180.13 1206.31 L1180.71 1206.31 L1181.3 1206.31 L1181.89 1206.31 L1182.47 1206.31 L1183.06 1206.31 L1183.65 1206.31 L1184.23 1206.31 L1184.82 1206.31 L1185.41 1206.31 L1185.99 1206.31 L1186.58 1206.31 L1187.16 1206.31 L1187.75 1206.31 L1188.34 1206.31 L1188.92 1206.31 L1189.51 1206.31 L1190.1 1206.31 L1190.68 1206.31 L1191.27 1206.31 L1191.86 1206.31 L1192.44 1206.31 L1193.03 1206.31 L1193.62 1206.31 L1194.2 1206.31 L1194.79 1206.31 L1195.37 1206.31 L1195.96 1206.31 L1196.55 1206.31 L1197.13 1206.31 L1197.72 1206.31 L1198.31 1206.31 L1198.89 1206.31 L1199.48 1206.31 L1200.07 1206.31 L1200.65 1206.31 L1201.24 1206.31 L1201.83 1206.31 L1202.41 1206.31 L1203 1206.31 L1203.58 1206.31 L1204.17 1206.31 L1204.76 1206.31 L1205.34 1206.31 L1205.93 1206.31 L1206.52 1206.31 L1207.1 1206.31 L1207.69 1206.31 L1208.28 1206.31 L1208.86 1206.31 L1209.45 1206.31 L1210.03 1206.31 L1210.62 1206.31 L1211.21 1206.31 L1211.79 1206.31 L1212.38 1206.31 L1212.97 1206.31 L1213.55 1206.31 L1214.14 1206.31 L1214.73 1206.31 L1215.31 1206.31 L1215.9 1206.31 L1216.49 1206.31 L1217.07 1206.31 L1217.66 1206.31 L1218.24 1206.31 L1218.83 1206.31 L1219.42 1206.31 L1220 1206.31 L1220.59 1206.31 L1221.18 1206.31 L1221.76 1206.31 L1222.35 1206.31 L1222.94 1206.31 L1223.52 1206.31 L1224.11 1206.31 L1224.7 1206.31 L1225.28 1206.31 L1225.87 1206.31 L1226.45 1206.31 L1227.04 1206.31 L1227.63 1206.31 L1228.21 1206.31 L1228.8 1206.31 L1229.39 1206.31 L1229.97 1206.31 L1230.56 1206.31 L1231.15 1206.31 L1231.73 1206.31 L1232.32 1206.31 L1232.91 1206.31 L1233.49 1206.31 L1234.08 1206.31 L1234.66 1206.31 L1235.25 1206.31 L1235.84 1206.31 L1236.42 1206.31 L1237.01 1206.31 L1237.6 1206.31 L1238.18 1206.31 L1238.77 1206.31 L1239.36 1206.31 L1239.94 1206.31 L1240.53 1206.31 L1241.11 1206.31 L1241.7 1206.31 L1242.29 1206.31 L1242.87 1206.31 L1243.46 1206.31 L1244.05 1206.31 L1244.63 1206.31 L1245.22 1206.31 L1245.81 1206.31 L1246.39 1206.31 L1246.98 1206.31 L1247.57 1206.31 L1248.15 1206.31 L1248.74 1206.31 L1249.32 1206.31 L1249.91 1206.31 L1250.5 1206.31 L1251.08 1206.31 L1251.67 1206.31 L1252.26 1206.31 L1252.84 1206.31 L1253.43 1206.31 L1254.02 1206.31 L1254.6 1206.31 L1255.19 1206.31 L1255.78 1206.31 L1256.36 1206.31 L1256.95 1206.31 L1257.53 1206.31 L1258.12 1206.31 L1258.71 1206.31 L1259.29 1206.31 L1259.88 1206.31 L1260.47 1206.31 L1261.05 1206.31 L1261.64 1206.31 L1262.23 1206.31 L1262.81 1206.31 L1263.4 1206.31 L1263.98 1206.31 L1264.57 1206.31 L1265.16 1206.31 L1265.74 1206.31 L1266.33 1206.31 L1266.92 1206.31 L1267.5 1206.31 L1268.09 1206.31 L1268.68 1206.31 L1269.26 1206.31 L1269.85 1206.31 L1270.44 1206.31 L1271.02 1206.31 L1271.61 1206.31 L1272.19 1206.31 L1272.78 1206.31 L1273.37 1206.31 L1273.95 1206.31 L1274.54 1206.31 L1275.13 1206.31 L1275.71 1206.31 L1276.3 1206.31 L1276.89 1206.31 L1277.47 1206.31 L1278.06 1206.31 L1278.65 1206.31 L1279.23 1206.31 L1279.82 1206.31 L1280.4 1206.31 L1280.99 1206.31 L1281.58 1206.31 L1282.16 1206.31 L1282.75 1206.31 L1283.34 1206.31 L1283.92 1206.31 L1284.51 1206.31 L1285.1 1206.31 L1285.68 1206.31 L1286.27 1206.31 L1286.86 1206.31 L1287.44 1206.31 L1288.03 1206.31 L1288.61 1206.31 L1289.2 1206.31 L1289.79 1206.31 L1290.37 1206.31 L1290.96 1206.31 L1291.55 1206.31 L1292.13 1206.31 L1292.72 1206.31 L1293.31 1206.31 L1293.89 1206.31 L1294.48 1206.31 L1295.06 1206.31 L1295.65 1206.31 L1296.24 1206.31 L1296.82 1206.31 L1297.41 1206.31 L1298 1206.31 L1298.58 1206.31 L1299.17 1206.31 L1299.76 1206.31 L1300.34 1206.31 L1300.93 1206.31 L1301.52 1206.31 L1302.1 1206.31 L1302.69 1206.31 L1303.27 1206.31 L1303.86 1206.31 L1304.45 1206.31 L1305.03 1206.31 L1305.62 1206.31 L1306.21 1206.31 L1306.79 1206.31 L1307.38 1206.31 L1307.97 1206.31 L1308.55 1206.31 L1309.14 1206.31 L1309.73 1206.31 L1310.31 1206.31 L1310.9 1206.31 L1311.48 1206.31 L1312.07 1206.31 L1312.66 1206.31 L1313.24 1206.31 L1313.83 1206.31 L1314.42 1206.31 L1315 1206.31 L1315.59 1206.31 L1316.18 1206.31 L1316.76 1206.31 L1317.35 1206.31 L1317.93 1206.31 L1318.52 1206.31 L1319.11 1206.31 L1319.69 1206.31 L1320.28 1206.31 L1320.87 1206.31 L1321.45 1206.31 L1322.04 1206.31 L1322.63 1206.31 L1323.21 1206.31 L1323.8 1206.31 L1324.39 1206.31 L1324.97 1206.31 L1325.56 1206.31 L1326.14 1206.31 L1326.73 1206.31 L1327.32 1206.31 L1327.9 1206.31 L1328.49 1206.31 L1329.08 1206.31 L1329.66 1206.31 L1330.25 1206.31 L1330.84 1206.31 L1331.42 1206.31 L1332.01 1206.31 L1332.6 1206.31 L1333.18 1206.31 L1333.77 1206.31 L1334.35 1206.31 L1334.94 1206.31 L1335.53 1206.31 L1336.11 1206.31 L1336.7 1206.31 L1337.29 1206.31 L1337.87 1206.31 L1338.46 1206.31 L1339.05 1206.31 L1339.63 1206.31 L1340.22 1206.31 L1340.8 1206.31 L1341.39 1206.31 L1341.98 1206.31 L1342.56 1206.31 L1343.15 1206.31 L1343.74 1206.31 L1344.32 1206.31 L1344.91 1206.31 L1345.5 1206.31 L1346.08 1206.31 L1346.67 1206.31 L1347.26 1206.31 L1347.84 1206.31 L1348.43 1206.31 L1349.01 1206.31 L1349.6 1206.31 L1350.19 1206.31 L1350.77 1206.31 L1351.36 1206.31 L1351.95 1206.31 L1352.53 1206.31 L1353.12 1206.31 L1353.71 1206.31 L1354.29 1206.31 L1354.88 1206.31 L1355.47 1206.31 L1356.05 1206.31 L1356.64 1206.31 L1357.22 1206.31 L1357.81 1206.31 L1358.4 1206.31 L1358.98 1206.31 L1359.57 1206.31 L1360.16 1206.31 L1360.74 1206.31 L1361.33 1206.31 L1361.92 1206.31 L1362.5 1206.31 L1363.09 1206.31 L1363.68 1206.31 L1364.26 1206.31 L1364.85 1206.31 L1365.43 1206.31 L1366.02 1206.31 L1366.61 1206.31 L1367.19 1206.31 L1367.78 1206.31 L1368.37 1206.31 L1368.95 1206.31 L1369.54 1206.31 L1370.13 1206.31 L1370.71 1206.31 L1371.3 1206.31 L1371.88 1206.31 L1372.47 1206.31 L1373.06 1206.31 L1373.64 1206.31 L1374.23 1206.31 L1374.82 1206.31 L1375.4 1206.31 L1375.99 1206.31 L1376.58 1206.31 L1377.16 1206.31 L1377.75 1206.31 L1378.34 1206.31 L1378.92 1206.31 L1379.51 1206.31 L1380.09 1206.31 L1380.68 1206.31 L1381.27 1206.31 L1381.85 1206.31 L1382.44 1206.31 L1383.03 1206.31 L1383.61 1206.31 L1384.2 1206.31 L1384.79 1206.31 L1385.37 1206.31 L1385.96 1206.31 L1386.55 1206.31 L1387.13 1206.31 L1387.72 1206.31 L1388.3 1206.31 L1388.89 1206.31 L1389.48 1206.31 L1390.06 1206.31 L1390.65 1206.31 L1391.24 1206.31 L1391.82 1206.31 L1392.41 1206.31 L1393 1206.31 L1393.58 1206.31 L1394.17 1206.31 L1394.75 1206.31 L1395.34 1206.31 L1395.93 1206.31 L1396.51 1206.31 L1397.1 1206.31 L1397.69 1206.31 L1398.27 1206.31 L1398.86 1206.31 L1399.45 1206.31 L1400.03 1206.31 L1400.62 1206.31 L1401.21 1206.31 L1401.79 1206.31 L1402.38 1206.31 L1402.96 1206.31 L1403.55 1206.31 L1404.14 1206.31 L1404.72 1206.31 L1405.31 1206.31 L1405.9 1206.31 L1406.48 1206.31 L1407.07 1206.31 L1407.66 1206.31 L1408.24 1206.31 L1408.83 1206.31 L1409.42 1206.31 L1410 1206.31 L1410.59 1206.31 L1411.17 1206.31 L1411.76 1206.31 L1412.35 1206.31 L1412.93 1206.31 L1413.52 1206.31 L1414.11 1206.31 L1414.69 1206.31 L1415.28 1206.31 L1415.87 1206.31 L1416.45 1206.31 L1417.04 1206.31 L1417.63 1206.31 L1418.21 1206.31 L1418.8 1206.31 L1419.38 1206.31 L1419.97 1206.31 L1420.56 1206.31 L1421.14 1206.31 L1421.73 1206.31 L1422.32 1206.31 L1422.9 1206.31 L1423.49 1206.31 L1424.08 1206.31 L1424.66 1206.31 L1425.25 1206.31 L1425.83 1206.31 L1426.42 1206.31 L1427.01 1206.31 L1427.59 1206.31 L1428.18 1206.31 L1428.77 1206.31 L1429.35 1206.31 L1429.94 1206.31 L1430.53 1206.31 L1431.11 1206.31 L1431.7 1206.31 L1432.29 1206.31 L1432.87 1206.31 L1433.46 1206.31 L1434.04 1206.31 L1434.63 1206.31 L1435.22 1206.31 L1435.8 1206.31 L1436.39 1206.31 L1436.98 1206.31 L1437.56 1206.31 L1438.15 1206.31 L1438.74 1206.31 L1439.32 1206.31 L1439.91 1206.31 L1440.5 1206.31 L1441.08 1206.31 L1441.67 1206.31 L1442.25 1206.31 L1442.84 1206.31 L1443.43 1206.31 L1444.01 1206.31 L1444.6 1206.31 L1445.19 1206.31 L1445.77 1206.31 L1446.36 1206.31 L1446.95 1206.31 L1447.53 1206.31 L1448.12 1206.31 L1448.7 1206.31 L1449.29 1206.31 L1449.88 1206.31 L1450.46 1206.31 L1451.05 1206.31 L1451.64 1206.31 L1452.22 1206.31 L1452.81 1206.31 L1453.4 1206.31 L1453.98 1206.31 L1454.57 1206.31 L1455.16 1206.31 L1455.74 1206.31 L1456.33 1206.31 L1456.91 1206.31 L1457.5 1206.31 L1458.09 1206.31 L1458.67 1206.31 L1459.26 1206.31 L1459.85 1206.31 L1460.43 1206.31 L1461.02 1206.31 L1461.61 1206.31 L1462.19 1206.31 L1462.78 1206.31 L1463.37 1206.31 L1463.95 1206.31 L1464.54 1206.31 L1465.12 1206.31 L1465.71 1206.31 L1466.3 1206.31 L1466.88 1206.31 L1467.47 1206.31 L1468.06 1206.31 L1468.64 1206.31 L1469.23 1206.31 L1469.82 1206.31 L1470.4 1206.31 L1470.99 1206.31 L1471.57 1206.31 L1472.16 1206.31 L1472.75 1206.31 L1473.33 1206.31 L1473.92 1206.31 L1474.51 1206.31 L1475.09 1206.31 L1475.68 1206.31 L1476.27 1206.31 L1476.85 1206.31 L1477.44 1206.31 L1478.03 1206.31 L1478.61 1206.31 L1479.2 1206.31 L1479.78 1206.31 L1480.37 1206.31 L1480.96 1206.31 L1481.54 1206.31 L1482.13 1206.31 L1482.72 1206.31 L1483.3 1206.31 L1483.89 1206.31 L1484.48 1206.31 L1485.06 1206.31 L1485.65 1206.31 L1486.24 1206.31 L1486.82 1206.31 L1487.41 1206.31 L1487.99 1206.31 L1488.58 1206.31 L1489.17 1206.31 L1489.75 1206.31 L1490.34 1206.31 L1490.93 1206.31 L1491.51 1206.31 L1492.1 1206.31 L1492.69 1206.31 L1493.27 1206.31 L1493.86 1206.31 L1494.45 1206.31 L1495.03 1206.31 L1495.62 1206.31 L1496.2 1206.31 L1496.79 1206.31 L1497.38 1206.31 L1497.96 1206.31 L1498.55 1206.31 L1499.14 1206.31 L1499.72 1206.31 L1500.31 1206.31 L1500.9 1206.31 L1501.48 1206.31 L1502.07 1206.31 L1502.65 1206.31 L1503.24 1206.31 L1503.83 1206.31 L1504.41 1206.31 L1505 1206.31 L1505.59 1206.31 L1506.17 1206.31 L1506.76 1206.31 L1507.35 1206.31 L1507.93 1206.31 L1508.52 1206.31 L1509.11 1206.31 L1509.69 1206.31 L1510.28 1206.31 L1510.86 1206.31 L1511.45 1206.31 L1512.04 1206.31 L1512.62 1206.31 L1513.21 1206.31 L1513.8 1206.31 L1514.38 1206.31 L1514.97 1206.31 L1515.56 1206.31 L1516.14 1206.31 L1516.73 1206.31 L1517.32 1206.31 L1517.9 1206.31 L1518.49 1206.31 L1519.07 1206.31 L1519.66 1206.31 L1520.25 1206.31 L1520.83 1206.31 L1521.42 1206.31 L1522.01 1206.31 L1522.59 1206.31 L1523.18 1206.31 L1523.77 1206.31 L1524.35 1206.31 L1524.94 1206.31 L1525.52 1206.31 L1526.11 1206.31 L1526.7 1206.31 L1527.28 1206.31 L1527.87 1206.31 L1528.46 1206.31 L1529.04 1206.31 L1529.63 1206.31 L1530.22 1206.31 L1530.8 1206.31 L1531.39 1206.31 L1531.98 1206.31 L1532.56 1206.31 L1533.15 1206.31 L1533.73 1206.31 L1534.32 1206.31 L1534.91 1206.31 L1535.49 1206.31 L1536.08 1206.31 L1536.67 1206.31 L1537.25 1206.31 L1537.84 1206.31 L1538.43 1206.31 L1539.01 1206.31 L1539.6 1206.31 L1540.19 1206.31 L1540.77 1206.31 L1541.36 1206.31 L1541.94 1206.31 L1542.53 1206.31 L1543.12 1206.31 L1543.7 1206.31 L1544.29 1206.31 L1544.88 1206.31 L1545.46 1206.31 L1546.05 1206.31 L1546.64 1206.31 L1547.22 1206.31 L1547.81 1206.31 L1548.4 1206.31 L1548.98 1206.31 L1549.57 1206.31 L1550.15 1206.31 L1550.74 1206.31 L1551.33 1206.31 L1551.91 1206.31 L1552.5 1206.31 L1553.09 1206.31 L1553.67 1206.31 L1554.26 1206.31 L1554.85 1206.31 L1555.43 1206.31 L1556.02 1206.31 L1556.6 1206.31 L1557.19 1206.31 L1557.78 1206.31 L1558.36 1206.31 L1558.95 1206.31 L1559.54 1206.31 L1560.12 1206.31 L1560.71 1206.31 L1561.3 1206.31 L1561.88 1206.31 L1562.47 1206.31 L1563.06 1206.31 L1563.64 1206.31 L1564.23 1206.31 L1564.81 1206.31 L1565.4 1206.31 L1565.99 1206.31 L1566.57 1206.31 L1567.16 1206.31 L1567.75 1206.31 L1568.33 1206.31 L1568.92 1206.31 L1569.51 1206.31 L1570.09 1206.31 L1570.68 1206.31 L1571.27 1206.31 L1571.85 1206.31 L1572.44 1206.31 L1573.02 1206.31 L1573.61 1206.31 L1574.2 1206.31 L1574.78 1206.31 L1575.37 1206.31 L1575.96 1206.31 L1576.54 1206.31 L1577.13 1206.31 L1577.72 1206.31 L1578.3 1206.31 L1578.89 1206.31 L1579.47 1206.31 L1580.06 1206.31 L1580.65 1206.31 L1581.23 1206.31 L1581.82 1206.31 L1582.41 1206.31 L1582.99 1206.31 L1583.58 1206.31 L1584.17 1206.31 L1584.75 1206.31 L1585.34 1206.31 L1585.93 1206.31 L1586.51 1206.31 L1587.1 1206.31 L1587.68 1206.31 L1588.27 1206.31 L1588.86 1206.31 L1589.44 1206.31 L1590.03 1206.31 L1590.62 1206.31 L1591.2 1206.31 L1591.79 1206.31 L1592.38 1206.31 L1592.96 1206.31 L1593.55 1206.31 L1594.14 1206.31 L1594.72 1206.31 L1595.31 1206.31 L1595.89 1206.31 L1596.48 1206.31 L1597.07 1206.31 L1597.65 1206.31 L1598.24 1206.31 L1598.83 1206.31 L1599.41 1206.31 L1600 1206.31 L1600.59 1206.31 L1601.17 1206.31 L1601.76 1206.31 L1602.34 1206.31 L1602.93 1206.31 L1603.52 1206.31 L1604.1 1206.31 L1604.69 1206.31 L1605.28 1206.31 L1605.86 1206.31 L1606.45 1206.31 L1607.04 1206.31 L1607.62 1206.31 L1608.21 1206.31 L1608.8 1206.31 L1609.38 1206.31 L1609.97 1206.31 L1610.55 1206.31 L1611.14 1206.31 L1611.73 1206.31 L1612.31 1206.31 L1612.9 1206.31 L1613.49 1206.31 L1614.07 1206.31 L1614.66 1206.31 L1615.25 1206.31 L1615.83 1206.31 L1616.42 1206.31 L1617.01 1206.31 L1617.59 1206.31 L1618.18 1206.31 L1618.76 1206.31 L1619.35 1206.31 L1619.94 1206.31 L1620.52 1206.31 L1621.11 1206.31 L1621.7 1206.31 L1622.28 1206.31 L1622.87 1206.31 L1623.46 1206.31 L1624.04 1206.31 L1624.63 1206.31 L1625.22 1206.31 L1625.8 1206.31 L1626.39 1206.31 L1626.97 1206.31 L1627.56 1206.31 L1628.15 1206.31 L1628.73 1206.31 L1629.32 1206.31 L1629.91 1206.31 L1630.49 1206.31 L1631.08 1206.31 L1631.67 1206.31 L1632.25 1206.31 L1632.84 1206.31 L1633.42 1206.31 L1634.01 1206.31 L1634.6 1206.31 L1635.18 1206.31 L1635.77 1206.31 L1636.36 1206.31 L1636.94 1206.31 L1637.53 1206.31 L1638.12 1206.31 L1638.7 1206.31 L1639.29 1206.31 L1639.88 1206.31 L1640.46 1206.31 L1641.05 1206.31 L1641.63 1206.31 L1642.22 1206.31 L1642.81 1206.31 L1643.39 1206.31 L1643.98 1206.31 L1644.57 1206.31 L1645.15 1206.31 L1645.74 1206.31 L1646.33 1206.31 L1646.91 1206.31 L1647.5 1206.31 L1648.09 1206.31 L1648.67 1206.31 L1649.26 1206.31 L1649.84 1206.31 L1650.43 1206.31 L1651.02 1206.31 L1651.6 1206.31 L1652.19 1206.31 L1652.78 1206.31 L1653.36 1206.31 L1653.95 1206.31 L1654.54 1206.31 L1655.12 1206.31 L1655.71 1206.31 L1656.29 1206.31 L1656.88 1206.31 L1657.47 1206.31 L1658.05 1206.31 L1658.64 1206.31 L1659.23 1206.31 L1659.81 1206.31 L1660.4 1206.31 L1660.99 1206.31 L1661.57 1206.31 L1662.16 1206.31 L1662.75 1206.31 L1663.33 1206.31 L1663.92 1206.31 L1664.5 1206.31 L1665.09 1206.31 L1665.68 1206.31 L1666.26 1206.31 L1666.85 1206.31 L1667.44 1206.31 L1668.02 1206.31 L1668.61 1206.31 L1669.2 1206.31 L1669.78 1206.31 L1670.37 1206.31 L1670.96 1206.31 L1671.54 1206.31 L1672.13 1206.31 L1672.71 1206.31 L1673.3 1206.31 L1673.89 1206.31 L1674.47 1206.31 L1675.06 1206.31 L1675.65 1206.31 L1676.23 1206.31 L1676.82 1206.31 L1677.41 1206.31 L1677.99 1206.31 L1678.58 1206.31 L1679.17 1206.31 L1679.75 1206.31 L1680.34 1206.31 L1680.92 1206.31 L1681.51 1206.31 L1682.1 1206.31 L1682.68 1206.31 L1683.27 1206.31 L1683.86 1206.31 L1684.44 1206.31 L1685.03 1206.31 L1685.62 1206.31 L1686.2 1206.31 L1686.79 1206.31 L1687.37 1206.31 L1687.96 1206.31 L1688.55 1206.31 L1689.13 1206.31 L1689.72 1206.31 L1690.31 1206.31 L1690.89 1206.31 L1691.48 1206.31 L1692.07 1206.31 L1692.65 1206.31 L1693.24 1206.31 L1693.83 1206.31 L1694.41 1206.31 L1695 1206.31 L1695.58 1206.31 L1696.17 1206.31 L1696.76 1206.31 L1697.34 1206.31 L1697.93 1206.31 L1698.52 1206.31 L1699.1 1206.31 L1699.69 1206.31 L1700.28 1206.31 L1700.86 1206.31 L1701.45 1206.31 L1702.04 1206.31 L1702.62 1206.31 L1703.21 1206.31 L1703.79 1206.31 L1704.38 1206.31 L1704.97 1206.31 L1705.55 1206.31 L1706.14 1206.31 L1706.73 1206.31 L1707.31 1206.31 L1707.9 1206.31 L1708.49 1206.31 L1709.07 1206.31 L1709.66 1206.31 L1710.24 1206.31 L1710.83 1206.31 L1711.42 1206.31 L1712 1206.31 L1712.59 1206.31 L1713.18 1206.31 L1713.76 1206.31 L1714.35 1206.31 L1714.94 1206.31 L1715.52 1206.31 L1716.11 1206.31 L1716.7 1206.31 L1717.28 1206.31 L1717.87 1206.31 L1718.45 1206.31 L1719.04 1206.31 L1719.63 1206.31 L1720.21 1206.31 L1720.8 1206.31 L1721.39 1206.31 L1721.97 1206.31 L1722.56 1206.31 L1723.15 1206.31 L1723.73 1206.31 L1724.32 1206.31 L1724.91 1206.31 L1725.49 1206.31 L1726.08 1206.31 L1726.66 1206.31 L1727.25 1206.31 L1727.84 1206.31 L1728.42 1206.31 L1729.01 1206.31 L1729.6 1206.31 L1730.18 1206.31 L1730.77 1206.31 L1731.36 1206.31 L1731.94 1206.31 L1732.53 1206.31 L1733.11 1206.31 L1733.7 1206.31 L1734.29 1206.31 L1734.87 1206.31 L1735.46 1206.31 L1736.05 1206.31 L1736.63 1206.31 L1737.22 1206.31 L1737.81 1206.31 L1738.39 1206.31 L1738.98 1206.31 L1739.57 1206.31 L1740.15 1206.31 L1740.74 1206.31 L1741.32 1206.31 L1741.91 1206.31 L1742.5 1206.31 L1743.08 1206.31 L1743.67 1206.31 L1744.26 1206.31 L1744.84 1206.31 L1745.43 1206.31 L1746.02 1206.31 L1746.6 1206.31 L1747.19 1206.31 L1747.78 1206.31 L1748.36 1206.31 L1748.95 1206.31 L1749.53 1206.31 L1750.12 1206.31 L1750.71 1206.31 L1751.29 1206.31 L1751.88 1206.31 L1752.47 1206.31 L1753.05 1206.31 L1753.64 1206.31 L1754.23 1206.31 L1754.81 1206.31 L1755.4 1206.31 L1755.99 1206.31 L1756.57 1206.31 L1757.16 1206.31 L1757.74 1206.31 L1758.33 1206.31 L1758.92 1206.31 L1759.5 1206.31 L1760.09 1206.31 L1760.68 1206.31 L1761.26 1206.31 L1761.85 1206.31 L1762.44 1206.31 L1763.02 1206.31 L1763.61 1206.31 L1764.19 1206.31 L1764.78 1206.31 L1765.37 1206.31 L1765.95 1206.31 L1766.54 1206.31 L1767.13 1206.31 L1767.71 1206.31 L1768.3 1206.31 L1768.89 1206.31 L1769.47 1206.31 L1770.06 1206.31 L1770.65 1206.31 L1771.23 1206.31 L1771.82 1206.31 L1772.4 1206.31 L1772.99 1206.31 L1773.58 1206.31 L1774.16 1206.31 L1774.75 1206.31 L1775.34 1206.31 L1775.92 1206.31 L1776.51 1206.31 L1777.1 1206.31 L1777.68 1206.31 L1778.27 1206.31 L1778.86 1206.31 L1779.44 1206.31 L1780.03 1206.31 L1780.61 1206.31 L1781.2 1206.31 L1781.79 1206.31 L1782.37 1206.31 L1782.96 1206.31 L1783.55 1206.31 L1784.13 1206.31 L1784.72 1206.31 L1785.31 1206.31 L1785.89 1206.31 L1786.48 1206.31 L1787.06 1206.31 L1787.65 1206.31 L1788.24 1206.31 L1788.82 1206.31 L1789.41 1206.31 L1790 1206.31 L1790.58 1206.31 L1791.17 1206.31 L1791.76 1206.31 L1792.34 1206.31 L1792.93 1206.31 L1793.52 1206.31 L1794.1 1206.31 L1794.69 1206.31 L1795.27 1206.31 L1795.86 1206.31 L1796.45 1206.31 L1797.03 1206.31 L1797.62 1206.31 L1798.21 1206.31 L1798.79 1206.31 L1799.38 1206.31 L1799.97 1206.31 L1800.55 1206.31 L1801.14 1206.31 L1801.73 1206.31 L1802.31 1206.31 L1802.9 1206.31 L1803.48 1206.31 L1804.07 1206.31 L1804.66 1206.31 L1805.24 1206.31 L1805.83 1206.31 L1806.42 1206.31 L1807 1206.31 L1807.59 1206.31 L1808.18 1206.31 L1808.76 1206.31 L1809.35 1206.31 L1809.94 1206.31 L1810.52 1206.31 L1811.11 1206.31 L1811.69 1206.31 L1812.28 1206.31 L1812.87 1206.31 L1813.45 1206.31 L1814.04 1206.31 L1814.63 1206.31 L1815.21 1206.31 L1815.8 1206.31 L1816.39 1206.31 L1816.97 1206.31 L1817.56 1206.31 L1818.14 1206.31 L1818.73 1206.31 L1819.32 1206.31 L1819.9 1206.31 L1820.49 1206.31 L1821.08 1206.31 L1821.66 1206.31 L1822.25 1206.31 L1822.84 1206.31 L1823.42 1206.31 L1824.01 1206.31 L1824.6 1206.31 L1825.18 1206.31 L1825.77 1206.31 L1826.35 1206.31 L1826.94 1206.31 L1827.53 1206.31 L1828.11 1206.31 L1828.7 1206.31 L1829.29 1206.31 L1829.87 1206.31 L1830.46 1206.31 L1831.05 1206.31 L1831.63 1206.31 L1832.22 1206.31 L1832.81 1206.31 L1833.39 1206.31 L1833.98 1206.31 L1834.56 1206.31 L1835.15 1206.31 L1835.74 1206.31 L1836.32 1206.31 L1836.91 1206.31 L1837.5 1206.31 L1838.08 1206.31 L1838.67 1206.31 L1839.26 1206.31 L1839.84 1206.31 L1840.43 1206.31 L1841.01 1206.31 L1841.6 1206.31 L1842.19 1206.31 L1842.77 1206.31 L1843.36 1206.31 L1843.95 1206.31 L1844.53 1206.31 L1845.12 1206.31 L1845.71 1206.31 L1846.29 1206.31 L1846.88 1206.31 L1847.47 1206.31 L1848.05 1206.31 L1848.64 1206.31 L1849.22 1206.31 L1849.81 1206.31 L1850.4 1206.31 L1850.98 1206.31 L1851.57 1206.31 L1852.16 1206.31 L1852.74 1206.31 L1853.33 1206.31 L1853.92 1206.31 L1854.5 1206.31 L1855.09 1206.31 L1855.68 1206.31 L1856.26 1206.31 L1856.85 1206.31 L1857.43 1206.31 L1858.02 1206.31 L1858.61 1206.31 L1859.19 1206.31 L1859.78 1206.31 L1860.37 1206.31 L1860.95 1206.31 L1861.54 1206.31 L1862.13 1206.31 L1862.71 1206.31 L1863.3 1206.31 L1863.88 1206.31 L1864.47 1206.31 L1865.06 1206.31 L1865.64 1206.31 L1866.23 1206.31 L1866.82 1206.31 L1867.4 1206.31 L1867.99 1206.31 L1868.58 1206.31 L1869.16 1206.31 L1869.75 1206.31 L1870.34 1206.31 L1870.92 1206.31 L1871.51 1206.31 L1872.09 1206.31 L1872.68 1206.31 L1873.27 1206.31 L1873.85 1206.31 L1874.44 1206.31 L1875.03 1206.31 L1875.61 1206.31 L1876.2 1206.31 L1876.79 1206.31 L1877.37 1206.31 L1877.96 1206.31 L1878.55 1206.31 L1879.13 1206.31 L1879.72 1206.31 L1880.3 1206.31 L1880.89 1206.31 L1881.48 1206.31 L1882.06 1206.31 L1882.65 1206.31 L1883.24 1206.31 L1883.82 1206.31 L1884.41 1206.31 L1885 1206.31 L1885.58 1206.31 L1886.17 1206.31 L1886.76 1206.31 L1887.34 1206.31 L1887.93 1206.31 L1888.51 1206.31 L1889.1 1206.31 L1889.69 1206.31 L1890.27 1206.31 L1890.86 1206.31 L1891.45 1206.31 L1892.03 1206.31 L1892.62 1206.31 L1893.21 1206.31 L1893.79 1206.31 L1894.38 1206.31 L1894.96 1206.31 L1895.55 1206.31 L1896.14 1206.31 L1896.72 1206.31 L1897.31 1206.31 L1897.9 1206.31 L1898.48 1206.31 L1899.07 1206.31 L1899.66 1206.31 L1900.24 1206.31 L1900.83 1206.31 L1901.42 1206.31 L1902 1206.31 L1902.59 1206.31 L1903.17 1206.31 L1903.76 1206.31 L1904.35 1206.31 L1904.93 1206.31 L1905.52 1206.31 L1906.11 1206.31 L1906.69 1206.31 L1907.28 1206.31 L1907.87 1206.31 L1908.45 1206.31 L1909.04 1206.31 L1909.63 1206.31 L1910.21 1206.31 L1910.8 1206.31 L1911.38 1206.31 L1911.97 1206.31 L1912.56 1206.31 L1913.14 1206.31 L1913.73 1206.31 L1914.32 1206.31 L1914.9 1206.31 L1915.49 1206.31 L1916.08 1206.31 L1916.66 1206.31 L1917.25 1206.31 L1917.83 1206.31 L1918.42 1206.31 L1919.01 1206.31 L1919.59 1206.31 L1920.18 1206.31 L1920.77 1206.31 L1921.35 1206.31 L1921.94 1206.31 L1922.53 1206.31 L1923.11 1206.31 L1923.7 1206.31 L1924.29 1206.31 L1924.87 1206.31 L1925.46 1206.31 L1926.04 1206.31 L1926.63 1206.31 L1927.22 1206.31 L1927.8 1206.31 L1928.39 1206.31 L1928.98 1206.31 L1929.56 1206.31 L1930.15 1206.31 L1930.74 1206.31 L1931.32 1206.31 L1931.91 1206.31 L1932.5 1206.31 L1933.08 1206.31 L1933.67 1206.31 L1934.25 1206.31 L1934.84 1206.31 L1935.43 1206.31 L1936.01 1206.31 L1936.6 1206.31 L1937.19 1206.31 L1937.77 1206.31 L1938.36 1206.31 L1938.95 1206.31 L1939.53 1206.31 L1940.12 1206.31 L1940.71 1206.31 L1941.29 1206.31 L1941.88 1206.31 L1942.46 1206.31 L1943.05 1206.31 L1943.64 1206.31 L1944.22 1206.31 L1944.81 1206.31 L1945.4 1206.31 L1945.98 1206.31 L1946.57 1206.31 L1947.16 1206.31 L1947.74 1206.31 L1948.33 1206.31 L1948.91 1206.31 L1949.5 1206.31 L1950.09 1206.31 L1950.67 1206.31 L1951.26 1206.31 L1951.85 1206.31 L1952.43 1206.31 L1953.02 1206.31 L1953.61 1206.31 L1954.19 1206.31 L1954.78 1206.31 L1955.37 1206.31 L1955.95 1206.31 L1956.54 1206.31 L1957.12 1206.31 L1957.71 1206.31 L1958.3 1206.31 L1958.88 1206.31 L1959.47 1206.31 L1960.06 1206.31 L1960.64 1206.31 L1961.23 1206.31 L1961.82 1206.31 L1962.4 1206.31 L1962.99 1206.31 L1963.58 1206.31 L1964.16 1206.31 L1964.75 1206.31 L1965.33 1206.31 L1965.92 1206.31 L1966.51 1206.31 L1967.09 1206.31 L1967.68 1206.31 L1968.27 1206.31 L1968.85 1206.31 L1969.44 1206.31 L1970.03 1206.31 L1970.61 1206.31 L1971.2 1206.31 L1971.78 1206.31 L1972.37 1206.31 L1972.96 1206.31 L1973.54 1206.31 L1974.13 1206.31 L1974.72 1206.31 L1975.3 1206.31 L1975.89 1206.31 L1976.48 1206.31 L1977.06 1206.31 L1977.65 1206.31 L1978.24 1206.31 L1978.82 1206.31 L1979.41 1206.31 L1979.99 1206.31 L1980.58 1206.31 L1981.17 1206.31 L1981.75 1206.31 L1982.34 1206.31 L1982.93 1206.31 L1983.51 1206.31 L1984.1 1206.31 L1984.69 1206.31 L1985.27 1206.31 L1985.86 1206.31 L1986.45 1206.31 L1987.03 1206.31 L1987.62 1206.31 L1988.2 1206.31 L1988.79 1206.31 L1989.38 1206.31 L1989.96 1206.31 L1990.55 1206.31 L1991.14 1206.31 L1991.72 1206.31 L1992.31 1206.31 L1992.9 1206.31 L1993.48 1206.31 L1994.07 1206.31 L1994.65 1206.31 L1995.24 1206.31 L1995.83 1206.31 L1996.41 1206.31 L1997 1206.31 L1997.59 1206.31 L1998.17 1206.31 L1998.76 1206.31 L1999.35 1206.31 L1999.93 1206.31 L2000.52 1206.31 L2001.11 1206.31 L2001.69 1206.31 L2002.28 1206.31 L2002.86 1206.31 L2003.45 1206.31 L2004.04 1206.31 L2004.62 1206.31 L2005.21 1206.31 L2005.8 1206.31 L2006.38 1206.31 L2006.97 1206.31 L2007.56 1206.31 L2008.14 1206.31 L2008.73 1206.31 L2009.32 1206.31 L2009.9 1206.31 L2010.49 1206.31 L2011.07 1206.31 L2011.66 1206.31 L2012.25 1206.31 L2012.83 1206.31 L2013.42 1206.31 L2014.01 1206.31 L2014.59 1206.31 L2015.18 1206.31 L2015.77 1206.31 L2016.35 1206.31 L2016.94 1206.31 L2017.53 1206.31 L2018.11 1206.31 L2018.7 1206.31 L2019.28 1206.31 L2019.87 1206.31 L2020.46 1206.31 L2021.04 1206.31 L2021.63 1206.31 L2022.22 1206.31 L2022.8 1206.31 L2023.39 1206.31 L2023.98 1206.31 L2024.56 1206.31 L2025.15 1206.31 L2025.73 1206.31 L2026.32 1206.31 L2026.91 1206.31 L2027.49 1206.31 L2028.08 1206.31 L2028.67 1206.31 L2029.25 1206.31 L2029.84 1206.31 L2030.43 1206.31 L2031.01 1206.31 L2031.6 1206.31 L2032.19 1206.31 L2032.77 1206.31 L2033.36 1206.31 L2033.94 1206.31 L2034.53 1206.31 L2035.12 1206.31 L2035.7 1206.31 L2036.29 1206.31 L2036.88 1206.31 L2037.46 1206.31 L2038.05 1206.31 L2038.64 1206.31 L2039.22 1206.31 L2039.81 1206.31 L2040.4 1206.31 L2040.98 1206.31 L2041.57 1206.31 L2042.15 1206.31 L2042.74 1206.31 L2043.33 1206.31 L2043.91 1206.31 L2044.5 1206.31 L2045.09 1206.31 L2045.67 1206.31 L2046.26 1206.31 L2046.85 1206.31 L2047.43 1206.31 L2048.02 1206.31 L2048.6 1206.31 L2049.19 1206.31 L2049.78 1206.31 L2050.36 1206.31 L2050.95 1206.31 L2051.54 1206.31 L2052.12 1206.31 L2052.71 1206.31 L2053.3 1206.31 L2053.88 1206.31 L2054.47 1206.31 L2055.06 1206.31 L2055.64 1206.31 L2056.23 1206.31 L2056.81 1206.31 L2057.4 1206.31 L2057.99 1206.31 L2058.57 1206.31 L2059.16 1206.31 L2059.75 1206.31 L2060.33 1206.31 L2060.92 1206.31 L2061.51 1206.31 L2062.09 1206.31 L2062.68 1206.31 L2063.27 1206.31 L2063.85 1206.31 L2064.44 1206.31 L2065.02 1206.31 L2065.61 1206.31 L2066.2 1206.31 L2066.78 1206.31 L2067.37 1206.31 L2067.96 1206.31 L2068.54 1206.31 L2069.13 1206.31 L2069.72 1206.31 L2070.3 1206.31 L2070.89 1206.31 L2071.48 1206.31 L2072.06 1206.31 L2072.65 1206.31 L2073.23 1206.31 L2073.82 1206.31 L2074.41 1206.31 L2074.99 1206.31 L2075.58 1206.31 L2076.17 1206.31 L2076.75 1206.31 L2077.34 1206.31 L2077.93 1206.31 L2078.51 1206.31 L2079.1 1206.31 L2079.68 1206.31 L2080.27 1206.31 L2080.86 1206.31 L2081.44 1206.31 L2082.03 1206.31 L2082.62 1206.31 L2083.2 1206.31 L2083.79 1206.31 L2084.38 1206.31 L2084.96 1206.31 L2085.55 1206.31 L2086.14 1206.31 L2086.72 1206.31 L2087.31 1206.31 L2087.89 1206.31 L2088.48 1206.31 L2089.07 1206.31 L2089.65 1206.31 L2090.24 1206.31 L2090.83 1206.31 L2091.41 1206.31 L2092 1206.31 L2092.59 1206.31 L2093.17 1206.31 L2093.76 1206.31 L2094.35 1206.31 L2094.93 1206.31 L2095.52 1206.31 L2096.1 1206.31 L2096.69 1206.31 L2097.28 1206.31 L2097.86 1206.31 L2098.45 1206.31 L2099.04 1206.31 L2099.62 1206.31 L2100.21 1206.31 L2100.8 1206.31 L2101.38 1206.31 L2101.97 1206.31 L2102.55 1206.31 L2103.14 1206.31 L2103.73 1206.31 L2104.31 1206.31 L2104.9 1206.31 L2105.49 1206.31 L2106.07 1206.31 L2106.66 1206.31 L2107.25 1206.31 L2107.83 1206.31 L2108.42 1206.31 L2109.01 1206.31 L2109.59 1206.31 L2110.18 1206.31 L2110.76 1206.31 L2111.35 1206.31 L2111.94 1206.31 L2112.52 1206.31 L2113.11 1206.31 L2113.7 1206.31 L2114.28 1206.31 L2114.87 1206.31 L2115.46 1206.31 L2116.04 1206.31 L2116.63 1206.31 L2117.22 1206.31 L2117.8 1206.31 L2118.39 1206.31 L2118.97 1206.31 L2119.56 1206.31 L2120.15 1206.31 L2120.73 1206.31 L2121.32 1206.31 L2121.91 1206.31 L2122.49 1206.31 L2123.08 1206.31 L2123.67 1206.31 L2124.25 1206.31 L2124.84 1206.31 L2125.42 1206.31 L2126.01 1206.31 L2126.6 1206.31 L2127.18 1206.31 L2127.77 1206.31 L2128.36 1206.31 L2128.94 1206.31 L2129.53 1206.31 L2130.12 1206.31 L2130.7 1206.31 L2131.29 1206.31 L2131.88 1206.31 L2132.46 1206.31 L2133.05 1206.31 L2133.63 1206.31 L2134.22 1206.31 L2134.81 1206.31 L2135.39 1206.31 L2135.98 1206.31 L2136.57 1206.31 L2137.15 1206.31 L2137.74 1206.31 L2138.33 1206.31 L2138.91 1206.31 L2139.5 1206.31 L2140.09 1206.31 L2140.67 1206.31 L2141.26 1206.31 L2141.84 1206.31 L2142.43 1206.31 L2143.02 1206.31 L2143.6 1206.31 L2144.19 1206.31 L2144.78 1206.31 L2145.36 1206.31 L2145.95 1206.31 L2146.54 1206.31 L2147.12 1206.31 L2147.71 1206.31 L2148.3 1206.31 L2148.88 1206.31 L2149.47 1206.31 L2150.05 1206.31 L2150.64 1206.31 L2151.23 1206.31 L2151.81 1206.31 L2152.4 1206.31 L2152.99 1206.31 L2153.57 1206.31 L2154.16 1206.31 L2154.75 1206.31 L2155.33 1206.31 L2155.92 1206.31 L2156.5 1206.31 L2157.09 1206.31 L2157.68 1206.31 L2158.26 1206.31 L2158.26 1205.61 L2157.68 1205.61 L2157.09 1205.61 L2156.5 1205.61 L2155.92 1205.61 L2155.33 1205.61 L2154.75 1205.61 L2154.16 1205.61 L2153.57 1205.61 L2152.99 1205.61 L2152.4 1205.61 L2151.81 1205.61 L2151.23 1205.61 L2150.64 1205.61 L2150.05 1205.61 L2149.47 1205.61 L2148.88 1205.61 L2148.3 1205.61 L2147.71 1205.61 L2147.12 1205.61 L2146.54 1205.61 L2145.95 1205.61 L2145.36 1205.61 L2144.78 1205.61 L2144.19 1205.61 L2143.6 1205.61 L2143.02 1205.61 L2142.43 1205.61 L2141.84 1205.61 L2141.26 1205.61 L2140.67 1205.61 L2140.09 1205.61 L2139.5 1205.61 L2138.91 1205.61 L2138.33 1205.61 L2137.74 1205.61 L2137.15 1205.61 L2136.57 1205.61 L2135.98 1205.61 L2135.39 1205.61 L2134.81 1205.61 L2134.22 1205.61 L2133.63 1205.61 L2133.05 1205.61 L2132.46 1205.61 L2131.88 1205.61 L2131.29 1205.61 L2130.7 1205.61 L2130.12 1205.61 L2129.53 1205.61 L2128.94 1205.61 L2128.36 1205.61 L2127.77 1205.61 L2127.18 1205.61 L2126.6 1205.61 L2126.01 1205.61 L2125.42 1205.61 L2124.84 1205.61 L2124.25 1205.61 L2123.67 1205.61 L2123.08 1205.61 L2122.49 1205.61 L2121.91 1205.61 L2121.32 1205.61 L2120.73 1205.61 L2120.15 1205.61 L2119.56 1205.61 L2118.97 1205.61 L2118.39 1205.61 L2117.8 1205.61 L2117.22 1205.61 L2116.63 1205.61 L2116.04 1205.61 L2115.46 1205.61 L2114.87 1205.61 L2114.28 1205.61 L2113.7 1205.61 L2113.11 1205.61 L2112.52 1205.61 L2111.94 1205.61 L2111.35 1205.61 L2110.76 1205.61 L2110.18 1205.61 L2109.59 1205.61 L2109.01 1205.61 L2108.42 1205.61 L2107.83 1205.61 L2107.25 1205.61 L2106.66 1205.61 L2106.07 1205.61 L2105.49 1205.61 L2104.9 1205.61 L2104.31 1205.61 L2103.73 1205.61 L2103.14 1205.61 L2102.55 1205.61 L2101.97 1205.61 L2101.38 1205.61 L2100.8 1205.61 L2100.21 1205.61 L2099.62 1205.61 L2099.04 1205.61 L2098.45 1205.61 L2097.86 1205.61 L2097.28 1205.61 L2096.69 1205.61 L2096.1 1205.61 L2095.52 1205.61 L2094.93 1205.61 L2094.35 1205.61 L2093.76 1205.61 L2093.17 1205.61 L2092.59 1205.61 L2092 1205.61 L2091.41 1205.61 L2090.83 1205.61 L2090.24 1205.61 L2089.65 1205.61 L2089.07 1205.61 L2088.48 1205.61 L2087.89 1205.61 L2087.31 1205.61 L2086.72 1205.61 L2086.14 1205.61 L2085.55 1205.61 L2084.96 1205.61 L2084.38 1205.61 L2083.79 1205.61 L2083.2 1205.61 L2082.62 1205.61 L2082.03 1205.61 L2081.44 1205.61 L2080.86 1205.61 L2080.27 1205.61 L2079.68 1205.61 L2079.1 1205.61 L2078.51 1205.61 L2077.93 1205.61 L2077.34 1205.61 L2076.75 1205.61 L2076.17 1205.61 L2075.58 1205.61 L2074.99 1205.61 L2074.41 1205.61 L2073.82 1205.61 L2073.23 1205.61 L2072.65 1205.61 L2072.06 1205.61 L2071.48 1205.61 L2070.89 1205.61 L2070.3 1205.61 L2069.72 1205.61 L2069.13 1205.61 L2068.54 1205.61 L2067.96 1205.61 L2067.37 1205.61 L2066.78 1205.61 L2066.2 1205.61 L2065.61 1205.61 L2065.02 1205.61 L2064.44 1205.61 L2063.85 1205.61 L2063.27 1205.61 L2062.68 1205.61 L2062.09 1205.61 L2061.51 1205.61 L2060.92 1205.61 L2060.33 1205.61 L2059.75 1205.61 L2059.16 1205.61 L2058.57 1205.61 L2057.99 1205.61 L2057.4 1205.61 L2056.81 1205.61 L2056.23 1205.61 L2055.64 1205.61 L2055.06 1205.61 L2054.47 1205.61 L2053.88 1205.61 L2053.3 1205.61 L2052.71 1205.61 L2052.12 1205.61 L2051.54 1205.61 L2050.95 1205.61 L2050.36 1205.61 L2049.78 1205.61 L2049.19 1205.61 L2048.6 1205.61 L2048.02 1205.61 L2047.43 1205.61 L2046.85 1205.61 L2046.26 1205.61 L2045.67 1205.61 L2045.09 1205.61 L2044.5 1205.61 L2043.91 1205.61 L2043.33 1205.61 L2042.74 1205.61 L2042.15 1205.61 L2041.57 1205.61 L2040.98 1205.61 L2040.4 1205.61 L2039.81 1205.61 L2039.22 1205.61 L2038.64 1205.61 L2038.05 1205.61 L2037.46 1205.61 L2036.88 1205.61 L2036.29 1205.61 L2035.7 1205.61 L2035.12 1205.61 L2034.53 1205.61 L2033.94 1205.61 L2033.36 1205.61 L2032.77 1205.61 L2032.19 1205.61 L2031.6 1205.61 L2031.01 1205.61 L2030.43 1205.61 L2029.84 1205.61 L2029.25 1205.61 L2028.67 1205.61 L2028.08 1205.61 L2027.49 1205.61 L2026.91 1205.61 L2026.32 1205.61 L2025.73 1205.61 L2025.15 1205.61 L2024.56 1205.61 L2023.98 1205.61 L2023.39 1205.61 L2022.8 1205.61 L2022.22 1205.61 L2021.63 1205.61 L2021.04 1205.61 L2020.46 1205.61 L2019.87 1205.61 L2019.28 1205.61 L2018.7 1205.61 L2018.11 1205.61 L2017.53 1205.61 L2016.94 1205.61 L2016.35 1205.61 L2015.77 1205.61 L2015.18 1205.61 L2014.59 1205.61 L2014.01 1205.61 L2013.42 1205.61 L2012.83 1205.61 L2012.25 1205.61 L2011.66 1205.61 L2011.07 1205.61 L2010.49 1205.61 L2009.9 1205.61 L2009.32 1205.61 L2008.73 1205.61 L2008.14 1205.61 L2007.56 1205.61 L2006.97 1205.61 L2006.38 1205.61 L2005.8 1205.61 L2005.21 1205.61 L2004.62 1205.61 L2004.04 1205.61 L2003.45 1205.61 L2002.86 1205.61 L2002.28 1205.61 L2001.69 1205.61 L2001.11 1205.61 L2000.52 1205.61 L1999.93 1205.61 L1999.35 1205.61 L1998.76 1205.61 L1998.17 1205.61 L1997.59 1205.61 L1997 1205.61 L1996.41 1205.61 L1995.83 1205.61 L1995.24 1205.61 L1994.65 1205.61 L1994.07 1205.61 L1993.48 1205.61 L1992.9 1205.61 L1992.31 1205.61 L1991.72 1205.61 L1991.14 1205.61 L1990.55 1205.61 L1989.96 1205.61 L1989.38 1205.61 L1988.79 1205.61 L1988.2 1205.61 L1987.62 1205.61 L1987.03 1205.61 L1986.45 1205.61 L1985.86 1205.61 L1985.27 1205.61 L1984.69 1205.61 L1984.1 1205.61 L1983.51 1205.61 L1982.93 1205.61 L1982.34 1205.61 L1981.75 1205.61 L1981.17 1205.61 L1980.58 1205.61 L1979.99 1205.61 L1979.41 1205.61 L1978.82 1205.61 L1978.24 1205.61 L1977.65 1205.61 L1977.06 1205.61 L1976.48 1205.61 L1975.89 1205.61 L1975.3 1205.61 L1974.72 1205.61 L1974.13 1205.61 L1973.54 1205.61 L1972.96 1205.61 L1972.37 1205.61 L1971.78 1205.61 L1971.2 1205.61 L1970.61 1205.61 L1970.03 1205.61 L1969.44 1205.61 L1968.85 1205.61 L1968.27 1205.61 L1967.68 1205.61 L1967.09 1205.61 L1966.51 1205.61 L1965.92 1205.61 L1965.33 1205.61 L1964.75 1205.61 L1964.16 1205.61 L1963.58 1205.61 L1962.99 1205.61 L1962.4 1205.61 L1961.82 1205.61 L1961.23 1205.61 L1960.64 1205.61 L1960.06 1205.61 L1959.47 1205.61 L1958.88 1205.61 L1958.3 1205.61 L1957.71 1205.61 L1957.12 1205.61 L1956.54 1205.61 L1955.95 1205.61 L1955.37 1205.61 L1954.78 1205.61 L1954.19 1205.61 L1953.61 1205.61 L1953.02 1205.61 L1952.43 1205.61 L1951.85 1205.61 L1951.26 1205.61 L1950.67 1205.61 L1950.09 1205.61 L1949.5 1205.61 L1948.91 1205.61 L1948.33 1205.61 L1947.74 1205.61 L1947.16 1205.61 L1946.57 1205.61 L1945.98 1205.61 L1945.4 1205.61 L1944.81 1205.61 L1944.22 1205.61 L1943.64 1205.61 L1943.05 1205.61 L1942.46 1205.61 L1941.88 1205.61 L1941.29 1205.61 L1940.71 1205.61 L1940.12 1205.61 L1939.53 1205.61 L1938.95 1205.61 L1938.36 1205.61 L1937.77 1205.61 L1937.19 1205.61 L1936.6 1205.61 L1936.01 1205.61 L1935.43 1205.61 L1934.84 1205.61 L1934.25 1205.61 L1933.67 1205.61 L1933.08 1205.61 L1932.5 1205.61 L1931.91 1205.61 L1931.32 1205.61 L1930.74 1205.61 L1930.15 1205.61 L1929.56 1205.61 L1928.98 1205.61 L1928.39 1205.61 L1927.8 1205.61 L1927.22 1205.61 L1926.63 1205.61 L1926.04 1205.61 L1925.46 1205.61 L1924.87 1205.61 L1924.29 1205.61 L1923.7 1205.61 L1923.11 1205.61 L1922.53 1205.61 L1921.94 1205.61 L1921.35 1205.61 L1920.77 1205.61 L1920.18 1205.61 L1919.59 1205.61 L1919.01 1205.61 L1918.42 1205.61 L1917.83 1205.61 L1917.25 1205.61 L1916.66 1205.61 L1916.08 1205.61 L1915.49 1205.61 L1914.9 1205.61 L1914.32 1205.61 L1913.73 1205.61 L1913.14 1205.61 L1912.56 1205.61 L1911.97 1205.61 L1911.38 1205.61 L1910.8 1205.61 L1910.21 1205.61 L1909.63 1205.61 L1909.04 1205.61 L1908.45 1205.61 L1907.87 1205.61 L1907.28 1205.61 L1906.69 1205.61 L1906.11 1205.61 L1905.52 1205.61 L1904.93 1205.61 L1904.35 1205.61 L1903.76 1205.61 L1903.17 1205.61 L1902.59 1205.61 L1902 1205.61 L1901.42 1205.61 L1900.83 1205.61 L1900.24 1205.61 L1899.66 1205.61 L1899.07 1205.61 L1898.48 1205.61 L1897.9 1205.61 L1897.31 1205.61 L1896.72 1205.61 L1896.14 1205.61 L1895.55 1205.61 L1894.96 1205.61 L1894.38 1205.61 L1893.79 1205.61 L1893.21 1205.61 L1892.62 1205.61 L1892.03 1205.61 L1891.45 1205.61 L1890.86 1205.61 L1890.27 1205.61 L1889.69 1205.61 L1889.1 1205.61 L1888.51 1205.61 L1887.93 1205.61 L1887.34 1205.61 L1886.76 1205.61 L1886.17 1205.61 L1885.58 1205.61 L1885 1205.61 L1884.41 1205.61 L1883.82 1205.61 L1883.24 1205.61 L1882.65 1205.61 L1882.06 1205.61 L1881.48 1205.61 L1880.89 1205.61 L1880.3 1205.61 L1879.72 1205.61 L1879.13 1205.61 L1878.55 1205.61 L1877.96 1205.61 L1877.37 1205.61 L1876.79 1205.61 L1876.2 1205.61 L1875.61 1205.61 L1875.03 1205.61 L1874.44 1205.61 L1873.85 1205.61 L1873.27 1205.61 L1872.68 1205.61 L1872.09 1205.61 L1871.51 1205.61 L1870.92 1205.61 L1870.34 1205.61 L1869.75 1205.61 L1869.16 1205.61 L1868.58 1205.61 L1867.99 1205.61 L1867.4 1205.61 L1866.82 1205.61 L1866.23 1205.61 L1865.64 1205.61 L1865.06 1205.61 L1864.47 1205.61 L1863.88 1205.61 L1863.3 1205.61 L1862.71 1205.61 L1862.13 1205.61 L1861.54 1205.61 L1860.95 1205.61 L1860.37 1205.61 L1859.78 1205.61 L1859.19 1205.61 L1858.61 1205.61 L1858.02 1205.61 L1857.43 1205.61 L1856.85 1205.61 L1856.26 1205.61 L1855.68 1205.61 L1855.09 1205.61 L1854.5 1205.61 L1853.92 1205.61 L1853.33 1205.61 L1852.74 1205.61 L1852.16 1205.61 L1851.57 1205.61 L1850.98 1205.61 L1850.4 1205.61 L1849.81 1205.61 L1849.22 1205.61 L1848.64 1205.61 L1848.05 1205.61 L1847.47 1205.61 L1846.88 1205.61 L1846.29 1205.61 L1845.71 1205.61 L1845.12 1205.61 L1844.53 1205.61 L1843.95 1205.61 L1843.36 1205.61 L1842.77 1205.61 L1842.19 1205.61 L1841.6 1205.61 L1841.01 1205.61 L1840.43 1205.61 L1839.84 1205.61 L1839.26 1205.61 L1838.67 1205.61 L1838.08 1205.61 L1837.5 1205.61 L1836.91 1205.61 L1836.32 1205.61 L1835.74 1205.61 L1835.15 1205.61 L1834.56 1205.61 L1833.98 1205.61 L1833.39 1205.61 L1832.81 1205.61 L1832.22 1205.61 L1831.63 1205.61 L1831.05 1205.61 L1830.46 1205.61 L1829.87 1205.61 L1829.29 1205.61 L1828.7 1205.61 L1828.11 1205.61 L1827.53 1205.61 L1826.94 1205.61 L1826.35 1205.61 L1825.77 1205.61 L1825.18 1205.61 L1824.6 1205.61 L1824.01 1205.61 L1823.42 1205.61 L1822.84 1205.61 L1822.25 1205.61 L1821.66 1205.61 L1821.08 1205.61 L1820.49 1205.61 L1819.9 1205.61 L1819.32 1205.61 L1818.73 1205.61 L1818.14 1205.61 L1817.56 1205.61 L1816.97 1205.61 L1816.39 1205.61 L1815.8 1205.61 L1815.21 1205.61 L1814.63 1205.61 L1814.04 1205.61 L1813.45 1205.61 L1812.87 1205.61 L1812.28 1205.61 L1811.69 1205.61 L1811.11 1205.61 L1810.52 1205.61 L1809.94 1205.61 L1809.35 1205.61 L1808.76 1205.61 L1808.18 1205.61 L1807.59 1205.61 L1807 1205.61 L1806.42 1205.61 L1805.83 1205.61 L1805.24 1205.61 L1804.66 1205.61 L1804.07 1205.61 L1803.48 1205.61 L1802.9 1205.61 L1802.31 1205.61 L1801.73 1205.61 L1801.14 1205.61 L1800.55 1205.61 L1799.97 1205.61 L1799.38 1205.61 L1798.79 1205.61 L1798.21 1205.61 L1797.62 1205.61 L1797.03 1205.61 L1796.45 1205.61 L1795.86 1205.61 L1795.27 1205.61 L1794.69 1205.61 L1794.1 1205.61 L1793.52 1205.61 L1792.93 1205.61 L1792.34 1205.61 L1791.76 1205.61 L1791.17 1205.61 L1790.58 1205.61 L1790 1205.61 L1789.41 1205.61 L1788.82 1205.61 L1788.24 1205.61 L1787.65 1205.61 L1787.06 1205.61 L1786.48 1205.61 L1785.89 1205.61 L1785.31 1205.61 L1784.72 1205.61 L1784.13 1205.61 L1783.55 1205.61 L1782.96 1205.61 L1782.37 1205.61 L1781.79 1205.61 L1781.2 1205.61 L1780.61 1205.61 L1780.03 1205.61 L1779.44 1205.61 L1778.86 1205.61 L1778.27 1205.61 L1777.68 1205.61 L1777.1 1205.61 L1776.51 1205.61 L1775.92 1205.61 L1775.34 1205.61 L1774.75 1205.61 L1774.16 1205.61 L1773.58 1205.61 L1772.99 1205.61 L1772.4 1205.61 L1771.82 1205.61 L1771.23 1205.61 L1770.65 1205.61 L1770.06 1205.61 L1769.47 1205.61 L1768.89 1205.61 L1768.3 1205.61 L1767.71 1205.61 L1767.13 1205.61 L1766.54 1205.61 L1765.95 1205.61 L1765.37 1205.61 L1764.78 1205.61 L1764.19 1205.61 L1763.61 1205.61 L1763.02 1205.61 L1762.44 1205.61 L1761.85 1205.61 L1761.26 1205.61 L1760.68 1205.61 L1760.09 1205.61 L1759.5 1205.61 L1758.92 1205.61 L1758.33 1205.61 L1757.74 1205.61 L1757.16 1205.61 L1756.57 1205.61 L1755.99 1205.61 L1755.4 1205.61 L1754.81 1205.61 L1754.23 1205.61 L1753.64 1205.61 L1753.05 1205.61 L1752.47 1205.61 L1751.88 1205.61 L1751.29 1205.61 L1750.71 1205.61 L1750.12 1205.61 L1749.53 1205.61 L1748.95 1205.61 L1748.36 1205.61 L1747.78 1205.61 L1747.19 1205.61 L1746.6 1205.61 L1746.02 1205.61 L1745.43 1205.61 L1744.84 1205.61 L1744.26 1205.61 L1743.67 1205.61 L1743.08 1205.61 L1742.5 1205.61 L1741.91 1205.61 L1741.32 1205.61 L1740.74 1205.61 L1740.15 1205.61 L1739.57 1205.61 L1738.98 1205.61 L1738.39 1205.61 L1737.81 1205.61 L1737.22 1205.61 L1736.63 1205.61 L1736.05 1205.61 L1735.46 1205.61 L1734.87 1205.61 L1734.29 1205.61 L1733.7 1205.61 L1733.11 1205.61 L1732.53 1205.61 L1731.94 1205.61 L1731.36 1205.61 L1730.77 1205.61 L1730.18 1205.61 L1729.6 1205.61 L1729.01 1205.61 L1728.42 1205.61 L1727.84 1205.61 L1727.25 1205.61 L1726.66 1205.61 L1726.08 1205.61 L1725.49 1205.61 L1724.91 1205.61 L1724.32 1205.61 L1723.73 1205.61 L1723.15 1205.61 L1722.56 1205.61 L1721.97 1205.61 L1721.39 1205.61 L1720.8 1205.61 L1720.21 1205.61 L1719.63 1205.61 L1719.04 1205.61 L1718.45 1205.61 L1717.87 1205.61 L1717.28 1205.61 L1716.7 1205.61 L1716.11 1205.61 L1715.52 1205.61 L1714.94 1205.61 L1714.35 1205.61 L1713.76 1205.61 L1713.18 1205.61 L1712.59 1205.61 L1712 1205.61 L1711.42 1205.61 L1710.83 1205.61 L1710.24 1205.61 L1709.66 1205.61 L1709.07 1205.61 L1708.49 1205.61 L1707.9 1205.61 L1707.31 1205.61 L1706.73 1205.61 L1706.14 1205.61 L1705.55 1205.61 L1704.97 1205.61 L1704.38 1205.61 L1703.79 1205.61 L1703.21 1205.61 L1702.62 1205.61 L1702.04 1205.61 L1701.45 1205.61 L1700.86 1205.61 L1700.28 1205.61 L1699.69 1205.61 L1699.1 1205.61 L1698.52 1205.61 L1697.93 1205.61 L1697.34 1205.61 L1696.76 1205.61 L1696.17 1205.61 L1695.58 1205.61 L1695 1205.61 L1694.41 1205.61 L1693.83 1205.61 L1693.24 1205.61 L1692.65 1205.61 L1692.07 1205.61 L1691.48 1205.61 L1690.89 1205.61 L1690.31 1205.61 L1689.72 1205.61 L1689.13 1205.61 L1688.55 1205.61 L1687.96 1205.61 L1687.37 1205.61 L1686.79 1205.61 L1686.2 1205.61 L1685.62 1205.61 L1685.03 1205.61 L1684.44 1205.61 L1683.86 1205.61 L1683.27 1205.61 L1682.68 1205.61 L1682.1 1205.61 L1681.51 1205.61 L1680.92 1205.61 L1680.34 1205.61 L1679.75 1205.61 L1679.17 1205.61 L1678.58 1205.61 L1677.99 1205.61 L1677.41 1205.61 L1676.82 1205.61 L1676.23 1205.61 L1675.65 1205.61 L1675.06 1205.61 L1674.47 1205.61 L1673.89 1205.61 L1673.3 1205.61 L1672.71 1205.61 L1672.13 1205.61 L1671.54 1205.61 L1670.96 1205.61 L1670.37 1205.61 L1669.78 1205.61 L1669.2 1205.61 L1668.61 1205.61 L1668.02 1205.61 L1667.44 1205.61 L1666.85 1205.61 L1666.26 1205.61 L1665.68 1205.61 L1665.09 1205.61 L1664.5 1205.61 L1663.92 1205.61 L1663.33 1205.61 L1662.75 1205.61 L1662.16 1205.61 L1661.57 1205.61 L1660.99 1205.61 L1660.4 1205.61 L1659.81 1205.61 L1659.23 1205.61 L1658.64 1205.61 L1658.05 1205.61 L1657.47 1205.61 L1656.88 1205.61 L1656.29 1205.61 L1655.71 1205.61 L1655.12 1205.61 L1654.54 1205.61 L1653.95 1205.61 L1653.36 1205.61 L1652.78 1205.61 L1652.19 1205.61 L1651.6 1205.61 L1651.02 1205.61 L1650.43 1205.61 L1649.84 1205.61 L1649.26 1205.61 L1648.67 1205.61 L1648.09 1205.61 L1647.5 1205.61 L1646.91 1205.61 L1646.33 1205.61 L1645.74 1205.61 L1645.15 1205.61 L1644.57 1205.61 L1643.98 1205.61 L1643.39 1205.61 L1642.81 1205.61 L1642.22 1205.61 L1641.63 1205.61 L1641.05 1205.61 L1640.46 1205.61 L1639.88 1205.61 L1639.29 1205.61 L1638.7 1205.61 L1638.12 1205.61 L1637.53 1205.61 L1636.94 1205.61 L1636.36 1205.61 L1635.77 1205.61 L1635.18 1205.61 L1634.6 1205.61 L1634.01 1205.61 L1633.42 1205.61 L1632.84 1205.61 L1632.25 1205.61 L1631.67 1205.61 L1631.08 1205.61 L1630.49 1205.61 L1629.91 1205.61 L1629.32 1205.61 L1628.73 1205.61 L1628.15 1205.61 L1627.56 1205.61 L1626.97 1205.61 L1626.39 1205.61 L1625.8 1205.61 L1625.22 1205.61 L1624.63 1205.61 L1624.04 1205.61 L1623.46 1205.61 L1622.87 1205.61 L1622.28 1205.61 L1621.7 1205.61 L1621.11 1205.61 L1620.52 1205.61 L1619.94 1205.61 L1619.35 1205.61 L1618.76 1205.61 L1618.18 1205.61 L1617.59 1205.61 L1617.01 1205.61 L1616.42 1205.61 L1615.83 1205.61 L1615.25 1205.61 L1614.66 1205.61 L1614.07 1205.61 L1613.49 1205.61 L1612.9 1205.61 L1612.31 1205.61 L1611.73 1205.61 L1611.14 1205.61 L1610.55 1205.61 L1609.97 1205.61 L1609.38 1205.61 L1608.8 1205.61 L1608.21 1205.61 L1607.62 1205.61 L1607.04 1205.61 L1606.45 1205.61 L1605.86 1205.61 L1605.28 1205.61 L1604.69 1205.61 L1604.1 1205.61 L1603.52 1205.61 L1602.93 1205.61 L1602.34 1205.61 L1601.76 1205.61 L1601.17 1205.61 L1600.59 1205.61 L1600 1205.61 L1599.41 1205.61 L1598.83 1205.61 L1598.24 1205.61 L1597.65 1205.61 L1597.07 1205.61 L1596.48 1205.61 L1595.89 1205.61 L1595.31 1205.61 L1594.72 1205.61 L1594.14 1205.61 L1593.55 1205.61 L1592.96 1205.61 L1592.38 1205.61 L1591.79 1205.61 L1591.2 1205.61 L1590.62 1205.61 L1590.03 1205.61 L1589.44 1205.61 L1588.86 1205.61 L1588.27 1205.61 L1587.68 1205.61 L1587.1 1205.61 L1586.51 1205.61 L1585.93 1205.61 L1585.34 1205.61 L1584.75 1205.61 L1584.17 1205.61 L1583.58 1205.61 L1582.99 1205.61 L1582.41 1205.61 L1581.82 1205.61 L1581.23 1205.61 L1580.65 1205.61 L1580.06 1205.61 L1579.47 1205.61 L1578.89 1205.61 L1578.3 1205.61 L1577.72 1205.61 L1577.13 1205.61 L1576.54 1205.61 L1575.96 1205.61 L1575.37 1205.61 L1574.78 1205.61 L1574.2 1205.61 L1573.61 1205.61 L1573.02 1205.61 L1572.44 1205.61 L1571.85 1205.61 L1571.27 1205.61 L1570.68 1205.61 L1570.09 1205.61 L1569.51 1205.61 L1568.92 1205.61 L1568.33 1205.61 L1567.75 1205.61 L1567.16 1205.61 L1566.57 1205.61 L1565.99 1205.61 L1565.4 1205.61 L1564.81 1205.61 L1564.23 1205.61 L1563.64 1205.61 L1563.06 1205.61 L1562.47 1205.61 L1561.88 1205.61 L1561.3 1205.61 L1560.71 1205.61 L1560.12 1205.61 L1559.54 1205.61 L1558.95 1205.61 L1558.36 1205.61 L1557.78 1205.61 L1557.19 1205.61 L1556.6 1205.61 L1556.02 1205.61 L1555.43 1205.61 L1554.85 1205.61 L1554.26 1205.61 L1553.67 1205.61 L1553.09 1205.61 L1552.5 1205.61 L1551.91 1205.61 L1551.33 1205.61 L1550.74 1205.61 L1550.15 1205.61 L1549.57 1205.61 L1548.98 1205.61 L1548.4 1205.61 L1547.81 1205.61 L1547.22 1205.61 L1546.64 1205.61 L1546.05 1205.61 L1545.46 1205.61 L1544.88 1205.61 L1544.29 1205.61 L1543.7 1205.61 L1543.12 1205.61 L1542.53 1205.61 L1541.94 1205.61 L1541.36 1205.61 L1540.77 1205.61 L1540.19 1205.61 L1539.6 1205.61 L1539.01 1205.61 L1538.43 1205.61 L1537.84 1205.61 L1537.25 1205.61 L1536.67 1205.61 L1536.08 1205.61 L1535.49 1205.61 L1534.91 1205.61 L1534.32 1205.61 L1533.73 1205.61 L1533.15 1205.61 L1532.56 1205.61 L1531.98 1205.61 L1531.39 1205.61 L1530.8 1205.61 L1530.22 1205.61 L1529.63 1205.61 L1529.04 1205.61 L1528.46 1205.61 L1527.87 1205.61 L1527.28 1205.61 L1526.7 1205.61 L1526.11 1205.61 L1525.52 1205.61 L1524.94 1205.61 L1524.35 1205.61 L1523.77 1205.61 L1523.18 1205.61 L1522.59 1205.61 L1522.01 1205.61 L1521.42 1205.61 L1520.83 1205.61 L1520.25 1205.61 L1519.66 1205.61 L1519.07 1205.61 L1518.49 1205.61 L1517.9 1205.61 L1517.32 1205.61 L1516.73 1205.61 L1516.14 1205.61 L1515.56 1205.61 L1514.97 1205.61 L1514.38 1205.61 L1513.8 1205.61 L1513.21 1205.61 L1512.62 1205.61 L1512.04 1205.61 L1511.45 1205.61 L1510.86 1205.61 L1510.28 1205.61 L1509.69 1205.61 L1509.11 1205.61 L1508.52 1205.61 L1507.93 1205.61 L1507.35 1205.61 L1506.76 1205.61 L1506.17 1205.61 L1505.59 1205.61 L1505 1205.61 L1504.41 1205.61 L1503.83 1205.61 L1503.24 1205.61 L1502.65 1205.61 L1502.07 1205.61 L1501.48 1205.61 L1500.9 1205.61 L1500.31 1205.61 L1499.72 1205.61 L1499.14 1205.61 L1498.55 1205.61 L1497.96 1205.61 L1497.38 1205.61 L1496.79 1205.61 L1496.2 1205.61 L1495.62 1205.61 L1495.03 1205.61 L1494.45 1205.61 L1493.86 1205.61 L1493.27 1205.61 L1492.69 1205.61 L1492.1 1205.61 L1491.51 1205.61 L1490.93 1205.61 L1490.34 1205.61 L1489.75 1205.61 L1489.17 1205.61 L1488.58 1205.61 L1487.99 1205.61 L1487.41 1205.61 L1486.82 1205.61 L1486.24 1205.61 L1485.65 1205.61 L1485.06 1205.61 L1484.48 1205.61 L1483.89 1205.61 L1483.3 1205.61 L1482.72 1205.61 L1482.13 1205.61 L1481.54 1205.61 L1480.96 1205.61 L1480.37 1205.61 L1479.78 1205.61 L1479.2 1205.61 L1478.61 1205.61 L1478.03 1205.61 L1477.44 1205.61 L1476.85 1205.61 L1476.27 1205.61 L1475.68 1205.61 L1475.09 1205.61 L1474.51 1205.61 L1473.92 1205.61 L1473.33 1205.61 L1472.75 1205.61 L1472.16 1205.61 L1471.57 1205.61 L1470.99 1205.61 L1470.4 1205.61 L1469.82 1205.61 L1469.23 1205.61 L1468.64 1205.61 L1468.06 1205.61 L1467.47 1205.61 L1466.88 1205.61 L1466.3 1205.61 L1465.71 1205.61 L1465.12 1205.61 L1464.54 1205.61 L1463.95 1205.61 L1463.37 1205.61 L1462.78 1205.61 L1462.19 1205.61 L1461.61 1205.61 L1461.02 1205.61 L1460.43 1205.61 L1459.85 1205.61 L1459.26 1205.61 L1458.67 1205.61 L1458.09 1205.61 L1457.5 1205.61 L1456.91 1205.61 L1456.33 1205.61 L1455.74 1205.61 L1455.16 1205.61 L1454.57 1205.61 L1453.98 1205.61 L1453.4 1205.61 L1452.81 1205.61 L1452.22 1205.61 L1451.64 1205.61 L1451.05 1205.61 L1450.46 1205.61 L1449.88 1205.61 L1449.29 1205.61 L1448.7 1205.61 L1448.12 1205.61 L1447.53 1205.61 L1446.95 1205.61 L1446.36 1205.61 L1445.77 1205.61 L1445.19 1205.61 L1444.6 1205.61 L1444.01 1205.61 L1443.43 1205.61 L1442.84 1205.61 L1442.25 1205.61 L1441.67 1205.61 L1441.08 1205.61 L1440.5 1205.61 L1439.91 1205.61 L1439.32 1205.61 L1438.74 1205.61 L1438.15 1205.61 L1437.56 1205.61 L1436.98 1205.61 L1436.39 1205.61 L1435.8 1205.61 L1435.22 1205.61 L1434.63 1205.61 L1434.04 1205.61 L1433.46 1205.61 L1432.87 1205.61 L1432.29 1205.61 L1431.7 1205.61 L1431.11 1205.61 L1430.53 1205.61 L1429.94 1205.61 L1429.35 1205.61 L1428.77 1205.61 L1428.18 1205.61 L1427.59 1205.61 L1427.01 1205.61 L1426.42 1205.61 L1425.83 1205.61 L1425.25 1205.61 L1424.66 1205.61 L1424.08 1205.61 L1423.49 1205.61 L1422.9 1205.61 L1422.32 1205.61 L1421.73 1205.61 L1421.14 1205.61 L1420.56 1205.61 L1419.97 1205.61 L1419.38 1205.61 L1418.8 1205.61 L1418.21 1205.61 L1417.63 1205.61 L1417.04 1205.61 L1416.45 1205.61 L1415.87 1205.61 L1415.28 1205.61 L1414.69 1205.61 L1414.11 1205.61 L1413.52 1205.61 L1412.93 1205.61 L1412.35 1205.61 L1411.76 1205.61 L1411.17 1205.61 L1410.59 1205.61 L1410 1205.61 L1409.42 1205.61 L1408.83 1205.61 L1408.24 1205.61 L1407.66 1205.61 L1407.07 1205.61 L1406.48 1205.61 L1405.9 1205.61 L1405.31 1205.61 L1404.72 1205.61 L1404.14 1205.61 L1403.55 1205.61 L1402.96 1205.61 L1402.38 1205.61 L1401.79 1205.61 L1401.21 1205.61 L1400.62 1205.61 L1400.03 1205.61 L1399.45 1205.61 L1398.86 1205.61 L1398.27 1205.61 L1397.69 1205.61 L1397.1 1205.61 L1396.51 1205.61 L1395.93 1205.61 L1395.34 1205.61 L1394.75 1205.61 L1394.17 1205.61 L1393.58 1205.61 L1393 1205.61 L1392.41 1205.61 L1391.82 1205.61 L1391.24 1205.61 L1390.65 1205.61 L1390.06 1205.61 L1389.48 1205.61 L1388.89 1205.61 L1388.3 1205.61 L1387.72 1205.61 L1387.13 1205.61 L1386.55 1205.61 L1385.96 1205.61 L1385.37 1205.61 L1384.79 1205.61 L1384.2 1205.61 L1383.61 1205.61 L1383.03 1205.61 L1382.44 1205.61 L1381.85 1205.61 L1381.27 1205.61 L1380.68 1205.61 L1380.09 1205.61 L1379.51 1205.61 L1378.92 1205.61 L1378.34 1205.61 L1377.75 1205.61 L1377.16 1205.61 L1376.58 1205.61 L1375.99 1205.61 L1375.4 1205.61 L1374.82 1205.61 L1374.23 1205.61 L1373.64 1205.61 L1373.06 1205.61 L1372.47 1205.61 L1371.88 1205.61 L1371.3 1205.61 L1370.71 1205.61 L1370.13 1205.61 L1369.54 1205.61 L1368.95 1205.61 L1368.37 1205.61 L1367.78 1205.61 L1367.19 1205.61 L1366.61 1205.61 L1366.02 1205.61 L1365.43 1205.61 L1364.85 1205.61 L1364.26 1205.61 L1363.68 1205.61 L1363.09 1205.61 L1362.5 1205.61 L1361.92 1205.61 L1361.33 1205.61 L1360.74 1205.61 L1360.16 1205.61 L1359.57 1205.61 L1358.98 1205.61 L1358.4 1205.61 L1357.81 1205.61 L1357.22 1205.61 L1356.64 1205.61 L1356.05 1205.61 L1355.47 1205.61 L1354.88 1205.61 L1354.29 1205.61 L1353.71 1205.61 L1353.12 1205.61 L1352.53 1205.61 L1351.95 1205.61 L1351.36 1205.61 L1350.77 1205.61 L1350.19 1205.61 L1349.6 1205.61 L1349.01 1205.61 L1348.43 1205.61 L1347.84 1205.61 L1347.26 1205.61 L1346.67 1205.61 L1346.08 1205.61 L1345.5 1205.61 L1344.91 1205.61 L1344.32 1205.61 L1343.74 1205.61 L1343.15 1205.61 L1342.56 1205.61 L1341.98 1205.61 L1341.39 1205.61 L1340.8 1205.61 L1340.22 1205.61 L1339.63 1205.61 L1339.05 1205.61 L1338.46 1205.61 L1337.87 1205.61 L1337.29 1205.61 L1336.7 1205.61 L1336.11 1205.61 L1335.53 1205.61 L1334.94 1205.61 L1334.35 1205.61 L1333.77 1205.61 L1333.18 1205.61 L1332.6 1205.61 L1332.01 1205.61 L1331.42 1205.61 L1330.84 1205.61 L1330.25 1205.61 L1329.66 1205.61 L1329.08 1205.61 L1328.49 1205.61 L1327.9 1205.61 L1327.32 1205.61 L1326.73 1205.61 L1326.14 1205.61 L1325.56 1205.61 L1324.97 1205.61 L1324.39 1205.61 L1323.8 1205.61 L1323.21 1205.61 L1322.63 1205.61 L1322.04 1205.61 L1321.45 1205.61 L1320.87 1205.61 L1320.28 1205.61 L1319.69 1205.61 L1319.11 1205.61 L1318.52 1205.61 L1317.93 1205.61 L1317.35 1205.61 L1316.76 1205.61 L1316.18 1205.61 L1315.59 1205.61 L1315 1205.61 L1314.42 1205.61 L1313.83 1205.61 L1313.24 1205.61 L1312.66 1205.61 L1312.07 1205.61 L1311.48 1205.61 L1310.9 1205.61 L1310.31 1205.61 L1309.73 1205.61 L1309.14 1205.61 L1308.55 1205.61 L1307.97 1205.61 L1307.38 1205.61 L1306.79 1205.61 L1306.21 1205.61 L1305.62 1205.61 L1305.03 1205.61 L1304.45 1205.61 L1303.86 1205.61 L1303.27 1205.61 L1302.69 1205.61 L1302.1 1205.61 L1301.52 1205.61 L1300.93 1205.61 L1300.34 1205.61 L1299.76 1205.61 L1299.17 1205.61 L1298.58 1205.61 L1298 1205.61 L1297.41 1205.61 L1296.82 1205.61 L1296.24 1205.61 L1295.65 1205.61 L1295.06 1205.61 L1294.48 1205.61 L1293.89 1205.61 L1293.31 1205.61 L1292.72 1205.61 L1292.13 1205.61 L1291.55 1205.61 L1290.96 1205.61 L1290.37 1205.61 L1289.79 1205.61 L1289.2 1205.61 L1288.61 1205.61 L1288.03 1205.61 L1287.44 1205.61 L1286.86 1205.61 L1286.27 1205.61 L1285.68 1205.61 L1285.1 1205.61 L1284.51 1205.61 L1283.92 1205.61 L1283.34 1205.61 L1282.75 1205.61 L1282.16 1205.61 L1281.58 1205.61 L1280.99 1205.61 L1280.4 1205.61 L1279.82 1205.61 L1279.23 1205.61 L1278.65 1205.61 L1278.06 1205.61 L1277.47 1205.61 L1276.89 1205.61 L1276.3 1205.61 L1275.71 1205.61 L1275.13 1205.61 L1274.54 1205.61 L1273.95 1205.61 L1273.37 1205.61 L1272.78 1205.61 L1272.19 1205.61 L1271.61 1205.61 L1271.02 1205.61 L1270.44 1205.61 L1269.85 1205.61 L1269.26 1205.61 L1268.68 1205.61 L1268.09 1205.61 L1267.5 1205.61 L1266.92 1205.61 L1266.33 1205.61 L1265.74 1205.61 L1265.16 1205.61 L1264.57 1205.61 L1263.98 1205.61 L1263.4 1205.61 L1262.81 1205.61 L1262.23 1205.61 L1261.64 1205.61 L1261.05 1205.61 L1260.47 1205.61 L1259.88 1205.61 L1259.29 1205.61 L1258.71 1205.61 L1258.12 1205.61 L1257.53 1205.61 L1256.95 1205.61 L1256.36 1205.61 L1255.78 1205.61 L1255.19 1205.61 L1254.6 1205.61 L1254.02 1205.61 L1253.43 1205.61 L1252.84 1205.61 L1252.26 1205.61 L1251.67 1205.61 L1251.08 1205.61 L1250.5 1205.61 L1249.91 1205.61 L1249.32 1205.61 L1248.74 1205.61 L1248.15 1205.61 L1247.57 1205.61 L1246.98 1205.61 L1246.39 1205.61 L1245.81 1205.61 L1245.22 1205.61 L1244.63 1205.61 L1244.05 1205.61 L1243.46 1205.61 L1242.87 1205.61 L1242.29 1205.61 L1241.7 1205.61 L1241.11 1205.61 L1240.53 1205.61 L1239.94 1205.61 L1239.36 1205.61 L1238.77 1205.61 L1238.18 1205.61 L1237.6 1205.61 L1237.01 1205.61 L1236.42 1205.61 L1235.84 1205.61 L1235.25 1205.61 L1234.66 1205.61 L1234.08 1205.61 L1233.49 1205.61 L1232.91 1205.61 L1232.32 1205.61 L1231.73 1205.61 L1231.15 1205.61 L1230.56 1205.61 L1229.97 1205.61 L1229.39 1205.61 L1228.8 1205.61 L1228.21 1205.61 L1227.63 1205.61 L1227.04 1205.61 L1226.45 1205.61 L1225.87 1205.61 L1225.28 1205.61 L1224.7 1205.61 L1224.11 1205.61 L1223.52 1205.61 L1222.94 1205.61 L1222.35 1205.61 L1221.76 1205.61 L1221.18 1205.61 L1220.59 1205.61 L1220 1205.61 L1219.42 1205.61 L1218.83 1205.61 L1218.24 1205.61 L1217.66 1205.61 L1217.07 1205.61 L1216.49 1205.61 L1215.9 1205.61 L1215.31 1205.61 L1214.73 1205.61 L1214.14 1205.61 L1213.55 1205.61 L1212.97 1205.61 L1212.38 1205.61 L1211.79 1205.61 L1211.21 1205.61 L1210.62 1205.61 L1210.03 1205.61 L1209.45 1205.61 L1208.86 1205.61 L1208.28 1205.61 L1207.69 1205.61 L1207.1 1205.61 L1206.52 1205.61 L1205.93 1205.61 L1205.34 1205.61 L1204.76 1205.61 L1204.17 1205.61 L1203.58 1205.61 L1203 1205.61 L1202.41 1205.61 L1201.83 1205.61 L1201.24 1205.61 L1200.65 1205.61 L1200.07 1205.61 L1199.48 1205.61 L1198.89 1205.61 L1198.31 1205.61 L1197.72 1205.61 L1197.13 1205.61 L1196.55 1205.61 L1195.96 1205.61 L1195.37 1205.61 L1194.79 1205.61 L1194.2 1205.61 L1193.62 1205.61 L1193.03 1205.61 L1192.44 1205.61 L1191.86 1205.61 L1191.27 1205.61 L1190.68 1205.61 L1190.1 1205.61 L1189.51 1205.61 L1188.92 1205.61 L1188.34 1205.61 L1187.75 1205.61 L1187.16 1205.61 L1186.58 1205.61 L1185.99 1205.61 L1185.41 1205.61 L1184.82 1205.61 L1184.23 1205.61 L1183.65 1205.61 L1183.06 1205.61 L1182.47 1205.61 L1181.89 1205.61 L1181.3 1205.61 L1180.71 1205.61 L1180.13 1205.61 L1179.54 1205.61 L1178.96 1205.61 L1178.37 1205.61 L1177.78 1205.61 L1177.2 1205.61 L1176.61 1205.61 L1176.02 1205.61 L1175.44 1205.61 L1174.85 1205.61 L1174.26 1205.61 L1173.68 1205.61 L1173.09 1205.61 L1172.5 1205.61 L1171.92 1205.61 L1171.33 1205.61 L1170.75 1205.61 L1170.16 1205.61 L1169.57 1205.61 L1168.99 1205.61 L1168.4 1205.61 L1167.81 1205.61 L1167.23 1205.61 L1166.64 1205.61 L1166.05 1205.61 L1165.47 1205.61 L1164.88 1205.61 L1164.29 1205.61 L1163.71 1205.61 L1163.12 1205.61 L1162.54 1205.61 L1161.95 1205.61 L1161.36 1205.61 L1160.78 1205.61 L1160.19 1205.61 L1159.6 1205.61 L1159.02 1205.61 L1158.43 1205.61 L1157.84 1205.61 L1157.26 1205.61 L1156.67 1205.61 L1156.09 1205.61 L1155.5 1205.61 L1154.91 1205.61 L1154.33 1205.61 L1153.74 1205.61 L1153.15 1205.61 L1152.57 1205.61 L1151.98 1205.61 L1151.39 1205.61 L1150.81 1205.61 L1150.22 1205.61 L1149.63 1205.61 L1149.05 1205.61 L1148.46 1205.61 L1147.88 1205.61 L1147.29 1205.61 L1146.7 1205.61 L1146.12 1205.61 L1145.53 1205.61 L1144.94 1205.61 L1144.36 1205.61 L1143.77 1205.61 L1143.18 1205.61 L1142.6 1205.61 L1142.01 1205.61 L1141.42 1205.61 L1140.84 1205.61 L1140.25 1205.61 L1139.67 1205.61 L1139.08 1205.61 L1138.49 1205.61 L1137.91 1205.61 L1137.32 1205.61 L1136.73 1205.61 L1136.15 1205.61 L1135.56 1205.61 L1134.97 1205.61 L1134.39 1205.61 L1133.8 1205.61 L1133.21 1205.61 L1132.63 1205.61 L1132.04 1205.61 L1131.46 1205.61 L1130.87 1205.61 L1130.28 1205.61 L1129.7 1205.61 L1129.11 1205.61 L1128.52 1205.61 L1127.94 1205.61 L1127.35 1205.61 L1126.76 1205.61 L1126.18 1205.61 L1125.59 1205.61 L1125.01 1205.61 L1124.42 1205.61 L1123.83 1205.61 L1123.25 1205.61 L1122.66 1205.61 L1122.07 1205.61 L1121.49 1205.61 L1120.9 1205.61 L1120.31 1205.61 L1119.73 1205.61 L1119.14 1205.61 L1118.55 1205.61 L1117.97 1205.61 L1117.38 1205.61 L1116.8 1205.61 L1116.21 1205.61 L1115.62 1205.61 L1115.04 1205.61 L1114.45 1205.61 L1113.86 1205.61 L1113.28 1205.61 L1112.69 1205.61 L1112.1 1205.61 L1111.52 1205.61 L1110.93 1205.61 L1110.34 1205.61 L1109.76 1205.61 L1109.17 1205.61 L1108.59 1205.61 L1108 1205.61 L1107.41 1205.61 L1106.83 1205.61 L1106.24 1205.61 L1105.65 1205.61 L1105.07 1205.61 L1104.48 1205.61 L1103.89 1205.61 L1103.31 1205.61 L1102.72 1205.61 L1102.14 1205.61 L1101.55 1205.61 L1100.96 1205.61 L1100.38 1205.61 L1099.79 1205.61 L1099.2 1205.61 L1098.62 1205.61 L1098.03 1205.61 L1097.44 1205.61 L1096.86 1205.61 L1096.27 1205.61 L1095.68 1205.61 L1095.1 1205.61 L1094.51 1205.61 L1093.93 1205.61 L1093.34 1205.61 L1092.75 1205.61 L1092.17 1205.61 L1091.58 1205.61 L1090.99 1205.61 L1090.41 1205.61 L1089.82 1205.61 L1089.23 1205.61 L1088.65 1205.61 L1088.06 1205.61 L1087.47 1205.61 L1086.89 1205.61 L1086.3 1205.61 L1085.72 1205.61 L1085.13 1205.61 L1084.54 1205.61 L1083.96 1205.61 L1083.37 1205.61 L1082.78 1205.61 L1082.2 1205.61 L1081.61 1205.61 L1081.02 1205.61 L1080.44 1205.61 L1079.85 1205.61 L1079.26 1205.61 L1078.68 1205.61 L1078.09 1205.61 L1077.51 1205.61 L1076.92 1205.61 L1076.33 1205.61 L1075.75 1205.61 L1075.16 1205.61 L1074.57 1205.61 L1073.99 1205.61 L1073.4 1205.61 L1072.81 1205.61 L1072.23 1205.61 L1071.64 1205.61 L1071.06 1205.61 L1070.47 1205.61 L1069.88 1205.61 L1069.3 1205.61 L1068.71 1205.61 L1068.12 1205.61 L1067.54 1205.61 L1066.95 1205.61 L1066.36 1205.61 L1065.78 1205.61 L1065.19 1205.61 L1064.6 1205.61 L1064.02 1205.61 L1063.43 1205.61 L1062.85 1205.61 L1062.26 1205.61 L1061.67 1205.61 L1061.09 1205.61 L1060.5 1205.61 L1059.91 1205.61 L1059.33 1205.61 L1058.74 1205.61 L1058.15 1205.61 L1057.57 1205.61 L1056.98 1205.61 L1056.39 1205.61 L1055.81 1205.61 L1055.22 1205.61 L1054.64 1205.61 L1054.05 1205.61 L1053.46 1205.61 L1052.88 1205.61 L1052.29 1205.61 L1051.7 1205.61 L1051.12 1205.61 L1050.53 1205.61 L1049.94 1205.61 L1049.36 1205.61 L1048.77 1205.61 L1048.19 1205.61 L1047.6 1205.61 L1047.01 1205.61 L1046.43 1205.61 L1045.84 1205.61 L1045.25 1205.61 L1044.67 1205.61 L1044.08 1205.61 L1043.49 1205.61 L1042.91 1205.61 L1042.32 1205.61 L1041.73 1205.61 L1041.15 1205.61 L1040.56 1205.61 L1039.98 1205.61 L1039.39 1205.61 L1038.8 1205.61 L1038.22 1205.61 L1037.63 1205.61 L1037.04 1205.61 L1036.46 1205.61 L1035.87 1205.61 L1035.28 1205.61 L1034.7 1205.61 L1034.11 1205.61 L1033.52 1205.61 L1032.94 1205.61 L1032.35 1205.61 L1031.77 1205.61 L1031.18 1205.61 L1030.59 1205.61 L1030.01 1205.61 L1029.42 1205.61 L1028.83 1205.61 L1028.25 1205.61 L1027.66 1205.61 L1027.07 1205.61 L1026.49 1205.61 L1025.9 1205.61 L1025.32 1205.61 L1024.73 1205.61 L1024.14 1205.61 L1023.56 1205.61 L1022.97 1205.61 L1022.38 1205.61 L1021.8 1205.61 L1021.21 1205.61 L1020.62 1205.61 L1020.04 1205.61 L1019.45 1205.61 L1018.86 1205.61 L1018.28 1205.61 L1017.69 1205.61 L1017.11 1205.61 L1016.52 1205.61 L1015.93 1205.61 L1015.35 1205.61 L1014.76 1205.61 L1014.17 1205.61 L1013.59 1205.61 L1013 1205.61 L1012.41 1205.61 L1011.83 1205.61 L1011.24 1205.61 L1010.65 1205.61 L1010.07 1205.61 L1009.48 1205.61 L1008.9 1205.61 L1008.31 1205.61 L1007.72 1205.61 L1007.14 1205.61 L1006.55 1205.61 L1005.96 1205.61 L1005.38 1205.61 L1004.79 1205.61 L1004.2 1205.61 L1003.62 1205.61 L1003.03 1205.61 L1002.44 1205.61 L1001.86 1205.61 L1001.27 1205.61 L1000.69 1205.61 L1000.1 1205.61 L999.513 1205.61 L998.926 1205.61 L998.34 1205.61 L997.754 1205.61 L997.167 1205.61 L996.581 1205.61 L995.994 1205.61 L995.408 1205.61 L994.822 1205.61 L994.235 1205.61 L993.649 1205.61 L993.062 1205.61 L992.476 1205.61 L991.889 1205.61 L991.303 1205.61 L990.717 1205.61 L990.13 1205.61 L989.544 1205.61 L988.957 1205.61 L988.371 1205.61 L987.785 1205.61 L987.198 1205.61 L986.612 1205.61 L986.025 1205.61  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip432)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1205.96 986.612,1205.96 987.198,1205.96 987.785,1205.96 988.371,1205.96 988.957,1205.96 989.544,1205.96 990.13,1205.96 990.717,1205.96 991.303,1205.96 991.889,1205.96 992.476,1205.96 993.062,1205.96 993.649,1205.96 994.235,1205.96 994.822,1205.96 995.408,1205.96 995.994,1205.96 996.581,1205.96 997.167,1205.96 997.754,1205.96 998.34,1205.96 998.926,1205.96 999.513,1205.96 1000.1,1205.96 1000.69,1205.96 1001.27,1205.96 1001.86,1205.96 1002.44,1205.96 1003.03,1205.96 1003.62,1205.96 1004.2,1205.96 1004.79,1205.96 1005.38,1205.96 1005.96,1205.96 1006.55,1205.96 1007.14,1205.96 1007.72,1205.96 1008.31,1205.96 1008.9,1205.96 1009.48,1205.96 1010.07,1205.96 1010.65,1205.96 1011.24,1205.96 1011.83,1205.96 1012.41,1205.96 1013,1205.96 1013.59,1205.96 1014.17,1205.96 1014.76,1205.96 1015.35,1205.96 1015.93,1205.96 1016.52,1205.96 1017.11,1205.96 1017.69,1205.96 1018.28,1205.96 1018.86,1205.96 1019.45,1205.96 1020.04,1205.96 1020.62,1205.96 1021.21,1205.96 1021.8,1205.96 1022.38,1205.96 1022.97,1205.96 1023.56,1205.96 1024.14,1205.96 1024.73,1205.96 1025.32,1205.96 1025.9,1205.96 1026.49,1205.96 1027.07,1205.96 1027.66,1205.96 1028.25,1205.96 1028.83,1205.96 1029.42,1205.96 1030.01,1205.96 1030.59,1205.96 1031.18,1205.96 1031.77,1205.96 1032.35,1205.96 1032.94,1205.96 1033.52,1205.96 1034.11,1205.96 1034.7,1205.96 1035.28,1205.96 1035.87,1205.96 1036.46,1205.96 1037.04,1205.96 1037.63,1205.96 1038.22,1205.96 1038.8,1205.96 1039.39,1205.96 1039.98,1205.96 1040.56,1205.96 1041.15,1205.96 1041.73,1205.96 1042.32,1205.96 1042.91,1205.96 1043.49,1205.96 1044.08,1205.96 1044.67,1205.96 1045.25,1205.96 1045.84,1205.96 1046.43,1205.96 1047.01,1205.96 1047.6,1205.96 1048.19,1205.96 1048.77,1205.96 1049.36,1205.96 1049.94,1205.96 1050.53,1205.96 1051.12,1205.96 1051.7,1205.96 1052.29,1205.96 1052.88,1205.96 1053.46,1205.96 1054.05,1205.96 1054.64,1205.96 1055.22,1205.96 1055.81,1205.96 1056.39,1205.96 1056.98,1205.96 1057.57,1205.96 1058.15,1205.96 1058.74,1205.96 1059.33,1205.96 1059.91,1205.96 1060.5,1205.96 1061.09,1205.96 1061.67,1205.96 1062.26,1205.96 1062.85,1205.96 1063.43,1205.96 1064.02,1205.96 1064.6,1205.96 1065.19,1205.96 1065.78,1205.96 1066.36,1205.96 1066.95,1205.96 1067.54,1205.96 1068.12,1205.96 1068.71,1205.96 1069.3,1205.96 1069.88,1205.96 1070.47,1205.96 1071.06,1205.96 1071.64,1205.96 1072.23,1205.96 1072.81,1205.96 1073.4,1205.96 1073.99,1205.96 1074.57,1205.96 1075.16,1205.96 1075.75,1205.96 1076.33,1205.96 1076.92,1205.96 1077.51,1205.96 1078.09,1205.96 1078.68,1205.96 1079.26,1205.96 1079.85,1205.96 1080.44,1205.96 1081.02,1205.96 1081.61,1205.96 1082.2,1205.96 1082.78,1205.96 1083.37,1205.96 1083.96,1205.96 1084.54,1205.96 1085.13,1205.96 1085.72,1205.96 1086.3,1205.96 1086.89,1205.96 1087.47,1205.96 1088.06,1205.96 1088.65,1205.96 1089.23,1205.96 1089.82,1205.96 1090.41,1205.96 1090.99,1205.96 1091.58,1205.96 1092.17,1205.96 1092.75,1205.96 1093.34,1205.96 1093.93,1205.96 1094.51,1205.96 1095.1,1205.96 1095.68,1205.96 1096.27,1205.96 1096.86,1205.96 1097.44,1205.96 1098.03,1205.96 1098.62,1205.96 1099.2,1205.96 1099.79,1205.96 1100.38,1205.96 1100.96,1205.96 1101.55,1205.96 1102.14,1205.96 1102.72,1205.96 1103.31,1205.96 1103.89,1205.96 1104.48,1205.96 1105.07,1205.96 1105.65,1205.96 1106.24,1205.96 1106.83,1205.96 1107.41,1205.96 1108,1205.96 1108.59,1205.96 1109.17,1205.96 1109.76,1205.96 1110.34,1205.96 1110.93,1205.96 1111.52,1205.96 1112.1,1205.96 1112.69,1205.96 1113.28,1205.96 1113.86,1205.96 1114.45,1205.96 1115.04,1205.96 1115.62,1205.96 1116.21,1205.96 1116.8,1205.96 1117.38,1205.96 1117.97,1205.96 1118.55,1205.96 1119.14,1205.96 1119.73,1205.96 1120.31,1205.96 1120.9,1205.96 1121.49,1205.96 1122.07,1205.96 1122.66,1205.96 1123.25,1205.96 1123.83,1205.96 1124.42,1205.96 1125.01,1205.96 1125.59,1205.96 1126.18,1205.96 1126.76,1205.96 1127.35,1205.96 1127.94,1205.96 1128.52,1205.96 1129.11,1205.96 1129.7,1205.96 1130.28,1205.96 1130.87,1205.96 1131.46,1205.96 1132.04,1205.96 1132.63,1205.96 1133.21,1205.96 1133.8,1205.96 1134.39,1205.96 1134.97,1205.96 1135.56,1205.96 1136.15,1205.96 1136.73,1205.96 1137.32,1205.96 1137.91,1205.96 1138.49,1205.96 1139.08,1205.96 1139.67,1205.96 1140.25,1205.96 1140.84,1205.96 1141.42,1205.96 1142.01,1205.96 1142.6,1205.96 1143.18,1205.96 1143.77,1205.96 1144.36,1205.96 1144.94,1205.96 1145.53,1205.96 1146.12,1205.96 1146.7,1205.96 1147.29,1205.96 1147.88,1205.96 1148.46,1205.96 1149.05,1205.96 1149.63,1205.96 1150.22,1205.96 1150.81,1205.96 1151.39,1205.96 1151.98,1205.96 1152.57,1205.96 1153.15,1205.96 1153.74,1205.96 1154.33,1205.96 1154.91,1205.96 1155.5,1205.96 1156.09,1205.96 1156.67,1205.96 1157.26,1205.96 1157.84,1205.96 1158.43,1205.96 1159.02,1205.96 1159.6,1205.96 1160.19,1205.96 1160.78,1205.96 1161.36,1205.96 1161.95,1205.96 1162.54,1205.96 1163.12,1205.96 1163.71,1205.96 1164.29,1205.96 1164.88,1205.96 1165.47,1205.96 1166.05,1205.96 1166.64,1205.96 1167.23,1205.96 1167.81,1205.96 1168.4,1205.96 1168.99,1205.96 1169.57,1205.96 1170.16,1205.96 1170.75,1205.96 1171.33,1205.96 1171.92,1205.96 1172.5,1205.96 1173.09,1205.96 1173.68,1205.96 1174.26,1205.96 1174.85,1205.96 1175.44,1205.96 1176.02,1205.96 1176.61,1205.96 1177.2,1205.96 1177.78,1205.96 1178.37,1205.96 1178.96,1205.96 1179.54,1205.96 1180.13,1205.96 1180.71,1205.96 1181.3,1205.96 1181.89,1205.96 1182.47,1205.96 1183.06,1205.96 1183.65,1205.96 1184.23,1205.96 1184.82,1205.96 1185.41,1205.96 1185.99,1205.96 1186.58,1205.96 1187.16,1205.96 1187.75,1205.96 1188.34,1205.96 1188.92,1205.96 1189.51,1205.96 1190.1,1205.96 1190.68,1205.96 1191.27,1205.96 1191.86,1205.96 1192.44,1205.96 1193.03,1205.96 1193.62,1205.96 1194.2,1205.96 1194.79,1205.96 1195.37,1205.96 1195.96,1205.96 1196.55,1205.96 1197.13,1205.96 1197.72,1205.96 1198.31,1205.96 1198.89,1205.96 1199.48,1205.96 1200.07,1205.96 1200.65,1205.96 1201.24,1205.96 1201.83,1205.96 1202.41,1205.96 1203,1205.96 1203.58,1205.96 1204.17,1205.96 1204.76,1205.96 1205.34,1205.96 1205.93,1205.96 1206.52,1205.96 1207.1,1205.96 1207.69,1205.96 1208.28,1205.96 1208.86,1205.96 1209.45,1205.96 1210.03,1205.96 1210.62,1205.96 1211.21,1205.96 1211.79,1205.96 1212.38,1205.96 1212.97,1205.96 1213.55,1205.96 1214.14,1205.96 1214.73,1205.96 1215.31,1205.96 1215.9,1205.96 1216.49,1205.96 1217.07,1205.96 1217.66,1205.96 1218.24,1205.96 1218.83,1205.96 1219.42,1205.96 1220,1205.96 1220.59,1205.96 1221.18,1205.96 1221.76,1205.96 1222.35,1205.96 1222.94,1205.96 1223.52,1205.96 1224.11,1205.96 1224.7,1205.96 1225.28,1205.96 1225.87,1205.96 1226.45,1205.96 1227.04,1205.96 1227.63,1205.96 1228.21,1205.96 1228.8,1205.96 1229.39,1205.96 1229.97,1205.96 1230.56,1205.96 1231.15,1205.96 1231.73,1205.96 1232.32,1205.96 1232.91,1205.96 1233.49,1205.96 1234.08,1205.96 1234.66,1205.96 1235.25,1205.96 1235.84,1205.96 1236.42,1205.96 1237.01,1205.96 1237.6,1205.96 1238.18,1205.96 1238.77,1205.96 1239.36,1205.96 1239.94,1205.96 1240.53,1205.96 1241.11,1205.96 1241.7,1205.96 1242.29,1205.96 1242.87,1205.96 1243.46,1205.96 1244.05,1205.96 1244.63,1205.96 1245.22,1205.96 1245.81,1205.96 1246.39,1205.96 1246.98,1205.96 1247.57,1205.96 1248.15,1205.96 1248.74,1205.96 1249.32,1205.96 1249.91,1205.96 1250.5,1205.96 1251.08,1205.96 1251.67,1205.96 1252.26,1205.96 1252.84,1205.96 1253.43,1205.96 1254.02,1205.96 1254.6,1205.96 1255.19,1205.96 1255.78,1205.96 1256.36,1205.96 1256.95,1205.96 1257.53,1205.96 1258.12,1205.96 1258.71,1205.96 1259.29,1205.96 1259.88,1205.96 1260.47,1205.96 1261.05,1205.96 1261.64,1205.96 1262.23,1205.96 1262.81,1205.96 1263.4,1205.96 1263.98,1205.96 1264.57,1205.96 1265.16,1205.96 1265.74,1205.96 1266.33,1205.96 1266.92,1205.96 1267.5,1205.96 1268.09,1205.96 1268.68,1205.96 1269.26,1205.96 1269.85,1205.96 1270.44,1205.96 1271.02,1205.96 1271.61,1205.96 1272.19,1205.96 1272.78,1205.96 1273.37,1205.96 1273.95,1205.96 1274.54,1205.96 1275.13,1205.96 1275.71,1205.96 1276.3,1205.96 1276.89,1205.96 1277.47,1205.96 1278.06,1205.96 1278.65,1205.96 1279.23,1205.96 1279.82,1205.96 1280.4,1205.96 1280.99,1205.96 1281.58,1205.96 1282.16,1205.96 1282.75,1205.96 1283.34,1205.96 1283.92,1205.96 1284.51,1205.96 1285.1,1205.96 1285.68,1205.96 1286.27,1205.96 1286.86,1205.96 1287.44,1205.96 1288.03,1205.96 1288.61,1205.96 1289.2,1205.96 1289.79,1205.96 1290.37,1205.96 1290.96,1205.96 1291.55,1205.96 1292.13,1205.96 1292.72,1205.96 1293.31,1205.96 1293.89,1205.96 1294.48,1205.96 1295.06,1205.96 1295.65,1205.96 1296.24,1205.96 1296.82,1205.96 1297.41,1205.96 1298,1205.96 1298.58,1205.96 1299.17,1205.96 1299.76,1205.96 1300.34,1205.96 1300.93,1205.96 1301.52,1205.96 1302.1,1205.96 1302.69,1205.96 1303.27,1205.96 1303.86,1205.96 1304.45,1205.96 1305.03,1205.96 1305.62,1205.96 1306.21,1205.96 1306.79,1205.96 1307.38,1205.96 1307.97,1205.96 1308.55,1205.96 1309.14,1205.96 1309.73,1205.96 1310.31,1205.96 1310.9,1205.96 1311.48,1205.96 1312.07,1205.96 1312.66,1205.96 1313.24,1205.96 1313.83,1205.96 1314.42,1205.96 1315,1205.96 1315.59,1205.96 1316.18,1205.96 1316.76,1205.96 1317.35,1205.96 1317.93,1205.96 1318.52,1205.96 1319.11,1205.96 1319.69,1205.96 1320.28,1205.96 1320.87,1205.96 1321.45,1205.96 1322.04,1205.96 1322.63,1205.96 1323.21,1205.96 1323.8,1205.96 1324.39,1205.96 1324.97,1205.96 1325.56,1205.96 1326.14,1205.96 1326.73,1205.96 1327.32,1205.96 1327.9,1205.96 1328.49,1205.96 1329.08,1205.96 1329.66,1205.96 1330.25,1205.96 1330.84,1205.96 1331.42,1205.96 1332.01,1205.96 1332.6,1205.96 1333.18,1205.96 1333.77,1205.96 1334.35,1205.96 1334.94,1205.96 1335.53,1205.96 1336.11,1205.96 1336.7,1205.96 1337.29,1205.96 1337.87,1205.96 1338.46,1205.96 1339.05,1205.96 1339.63,1205.96 1340.22,1205.96 1340.8,1205.96 1341.39,1205.96 1341.98,1205.96 1342.56,1205.96 1343.15,1205.96 1343.74,1205.96 1344.32,1205.96 1344.91,1205.96 1345.5,1205.96 1346.08,1205.96 1346.67,1205.96 1347.26,1205.96 1347.84,1205.96 1348.43,1205.96 1349.01,1205.96 1349.6,1205.96 1350.19,1205.96 1350.77,1205.96 1351.36,1205.96 1351.95,1205.96 1352.53,1205.96 1353.12,1205.96 1353.71,1205.96 1354.29,1205.96 1354.88,1205.96 1355.47,1205.96 1356.05,1205.96 1356.64,1205.96 1357.22,1205.96 1357.81,1205.96 1358.4,1205.96 1358.98,1205.96 1359.57,1205.96 1360.16,1205.96 1360.74,1205.96 1361.33,1205.96 1361.92,1205.96 1362.5,1205.96 1363.09,1205.96 1363.68,1205.96 1364.26,1205.96 1364.85,1205.96 1365.43,1205.96 1366.02,1205.96 1366.61,1205.96 1367.19,1205.96 1367.78,1205.96 1368.37,1205.96 1368.95,1205.96 1369.54,1205.96 1370.13,1205.96 1370.71,1205.96 1371.3,1205.96 1371.88,1205.96 1372.47,1205.96 1373.06,1205.96 1373.64,1205.96 1374.23,1205.96 1374.82,1205.96 1375.4,1205.96 1375.99,1205.96 1376.58,1205.96 1377.16,1205.96 1377.75,1205.96 1378.34,1205.96 1378.92,1205.96 1379.51,1205.96 1380.09,1205.96 1380.68,1205.96 1381.27,1205.96 1381.85,1205.96 1382.44,1205.96 1383.03,1205.96 1383.61,1205.96 1384.2,1205.96 1384.79,1205.96 1385.37,1205.96 1385.96,1205.96 1386.55,1205.96 1387.13,1205.96 1387.72,1205.96 1388.3,1205.96 1388.89,1205.96 1389.48,1205.96 1390.06,1205.96 1390.65,1205.96 1391.24,1205.96 1391.82,1205.96 1392.41,1205.96 1393,1205.96 1393.58,1205.96 1394.17,1205.96 1394.75,1205.96 1395.34,1205.96 1395.93,1205.96 1396.51,1205.96 1397.1,1205.96 1397.69,1205.96 1398.27,1205.96 1398.86,1205.96 1399.45,1205.96 1400.03,1205.96 1400.62,1205.96 1401.21,1205.96 1401.79,1205.96 1402.38,1205.96 1402.96,1205.96 1403.55,1205.96 1404.14,1205.96 1404.72,1205.96 1405.31,1205.96 1405.9,1205.96 1406.48,1205.96 1407.07,1205.96 1407.66,1205.96 1408.24,1205.96 1408.83,1205.96 1409.42,1205.96 1410,1205.96 1410.59,1205.96 1411.17,1205.96 1411.76,1205.96 1412.35,1205.96 1412.93,1205.96 1413.52,1205.96 1414.11,1205.96 1414.69,1205.96 1415.28,1205.96 1415.87,1205.96 1416.45,1205.96 1417.04,1205.96 1417.63,1205.96 1418.21,1205.96 1418.8,1205.96 1419.38,1205.96 1419.97,1205.96 1420.56,1205.96 1421.14,1205.96 1421.73,1205.96 1422.32,1205.96 1422.9,1205.96 1423.49,1205.96 1424.08,1205.96 1424.66,1205.96 1425.25,1205.96 1425.83,1205.96 1426.42,1205.96 1427.01,1205.96 1427.59,1205.96 1428.18,1205.96 1428.77,1205.96 1429.35,1205.96 1429.94,1205.96 1430.53,1205.96 1431.11,1205.96 1431.7,1205.96 1432.29,1205.96 1432.87,1205.96 1433.46,1205.96 1434.04,1205.96 1434.63,1205.96 1435.22,1205.96 1435.8,1205.96 1436.39,1205.96 1436.98,1205.96 1437.56,1205.96 1438.15,1205.96 1438.74,1205.96 1439.32,1205.96 1439.91,1205.96 1440.5,1205.96 1441.08,1205.96 1441.67,1205.96 1442.25,1205.96 1442.84,1205.96 1443.43,1205.96 1444.01,1205.96 1444.6,1205.96 1445.19,1205.96 1445.77,1205.96 1446.36,1205.96 1446.95,1205.96 1447.53,1205.96 1448.12,1205.96 1448.7,1205.96 1449.29,1205.96 1449.88,1205.96 1450.46,1205.96 1451.05,1205.96 1451.64,1205.96 1452.22,1205.96 1452.81,1205.96 1453.4,1205.96 1453.98,1205.96 1454.57,1205.96 1455.16,1205.96 1455.74,1205.96 1456.33,1205.96 1456.91,1205.96 1457.5,1205.96 1458.09,1205.96 1458.67,1205.96 1459.26,1205.96 1459.85,1205.96 1460.43,1205.96 1461.02,1205.96 1461.61,1205.96 1462.19,1205.96 1462.78,1205.96 1463.37,1205.96 1463.95,1205.96 1464.54,1205.96 1465.12,1205.96 1465.71,1205.96 1466.3,1205.96 1466.88,1205.96 1467.47,1205.96 1468.06,1205.96 1468.64,1205.96 1469.23,1205.96 1469.82,1205.96 1470.4,1205.96 1470.99,1205.96 1471.57,1205.96 1472.16,1205.96 1472.75,1205.96 1473.33,1205.96 1473.92,1205.96 1474.51,1205.96 1475.09,1205.96 1475.68,1205.96 1476.27,1205.96 1476.85,1205.96 1477.44,1205.96 1478.03,1205.96 1478.61,1205.96 1479.2,1205.96 1479.78,1205.96 1480.37,1205.96 1480.96,1205.96 1481.54,1205.96 1482.13,1205.96 1482.72,1205.96 1483.3,1205.96 1483.89,1205.96 1484.48,1205.96 1485.06,1205.96 1485.65,1205.96 1486.24,1205.96 1486.82,1205.96 1487.41,1205.96 1487.99,1205.96 1488.58,1205.96 1489.17,1205.96 1489.75,1205.96 1490.34,1205.96 1490.93,1205.96 1491.51,1205.96 1492.1,1205.96 1492.69,1205.96 1493.27,1205.96 1493.86,1205.96 1494.45,1205.96 1495.03,1205.96 1495.62,1205.96 1496.2,1205.96 1496.79,1205.96 1497.38,1205.96 1497.96,1205.96 1498.55,1205.96 1499.14,1205.96 1499.72,1205.96 1500.31,1205.96 1500.9,1205.96 1501.48,1205.96 1502.07,1205.96 1502.65,1205.96 1503.24,1205.96 1503.83,1205.96 1504.41,1205.96 1505,1205.96 1505.59,1205.96 1506.17,1205.96 1506.76,1205.96 1507.35,1205.96 1507.93,1205.96 1508.52,1205.96 1509.11,1205.96 1509.69,1205.96 1510.28,1205.96 1510.86,1205.96 1511.45,1205.96 1512.04,1205.96 1512.62,1205.96 1513.21,1205.96 1513.8,1205.96 1514.38,1205.96 1514.97,1205.96 1515.56,1205.96 1516.14,1205.96 1516.73,1205.96 1517.32,1205.96 1517.9,1205.96 1518.49,1205.96 1519.07,1205.96 1519.66,1205.96 1520.25,1205.96 1520.83,1205.96 1521.42,1205.96 1522.01,1205.96 1522.59,1205.96 1523.18,1205.96 1523.77,1205.96 1524.35,1205.96 1524.94,1205.96 1525.52,1205.96 1526.11,1205.96 1526.7,1205.96 1527.28,1205.96 1527.87,1205.96 1528.46,1205.96 1529.04,1205.96 1529.63,1205.96 1530.22,1205.96 1530.8,1205.96 1531.39,1205.96 1531.98,1205.96 1532.56,1205.96 1533.15,1205.96 1533.73,1205.96 1534.32,1205.96 1534.91,1205.96 1535.49,1205.96 1536.08,1205.96 1536.67,1205.96 1537.25,1205.96 1537.84,1205.96 1538.43,1205.96 1539.01,1205.96 1539.6,1205.96 1540.19,1205.96 1540.77,1205.96 1541.36,1205.96 1541.94,1205.96 1542.53,1205.96 1543.12,1205.96 1543.7,1205.96 1544.29,1205.96 1544.88,1205.96 1545.46,1205.96 1546.05,1205.96 1546.64,1205.96 1547.22,1205.96 1547.81,1205.96 1548.4,1205.96 1548.98,1205.96 1549.57,1205.96 1550.15,1205.96 1550.74,1205.96 1551.33,1205.96 1551.91,1205.96 1552.5,1205.96 1553.09,1205.96 1553.67,1205.96 1554.26,1205.96 1554.85,1205.96 1555.43,1205.96 1556.02,1205.96 1556.6,1205.96 1557.19,1205.96 1557.78,1205.96 1558.36,1205.96 1558.95,1205.96 1559.54,1205.96 1560.12,1205.96 1560.71,1205.96 1561.3,1205.96 1561.88,1205.96 1562.47,1205.96 1563.06,1205.96 1563.64,1205.96 1564.23,1205.96 1564.81,1205.96 1565.4,1205.96 1565.99,1205.96 1566.57,1205.96 1567.16,1205.96 1567.75,1205.96 1568.33,1205.96 1568.92,1205.96 1569.51,1205.96 1570.09,1205.96 1570.68,1205.96 1571.27,1205.96 1571.85,1205.96 1572.44,1205.96 1573.02,1205.96 1573.61,1205.96 1574.2,1205.96 1574.78,1205.96 1575.37,1205.96 1575.96,1205.96 1576.54,1205.96 1577.13,1205.96 1577.72,1205.96 1578.3,1205.96 1578.89,1205.96 1579.47,1205.96 1580.06,1205.96 1580.65,1205.96 1581.23,1205.96 1581.82,1205.96 1582.41,1205.96 1582.99,1205.96 1583.58,1205.96 1584.17,1205.96 1584.75,1205.96 1585.34,1205.96 1585.93,1205.96 1586.51,1205.96 1587.1,1205.96 1587.68,1205.96 1588.27,1205.96 1588.86,1205.96 1589.44,1205.96 1590.03,1205.96 1590.62,1205.96 1591.2,1205.96 1591.79,1205.96 1592.38,1205.96 1592.96,1205.96 1593.55,1205.96 1594.14,1205.96 1594.72,1205.96 1595.31,1205.96 1595.89,1205.96 1596.48,1205.96 1597.07,1205.96 1597.65,1205.96 1598.24,1205.96 1598.83,1205.96 1599.41,1205.96 1600,1205.96 1600.59,1205.96 1601.17,1205.96 1601.76,1205.96 1602.34,1205.96 1602.93,1205.96 1603.52,1205.96 1604.1,1205.96 1604.69,1205.96 1605.28,1205.96 1605.86,1205.96 1606.45,1205.96 1607.04,1205.96 1607.62,1205.96 1608.21,1205.96 1608.8,1205.96 1609.38,1205.96 1609.97,1205.96 1610.55,1205.96 1611.14,1205.96 1611.73,1205.96 1612.31,1205.96 1612.9,1205.96 1613.49,1205.96 1614.07,1205.96 1614.66,1205.96 1615.25,1205.96 1615.83,1205.96 1616.42,1205.96 1617.01,1205.96 1617.59,1205.96 1618.18,1205.96 1618.76,1205.96 1619.35,1205.96 1619.94,1205.96 1620.52,1205.96 1621.11,1205.96 1621.7,1205.96 1622.28,1205.96 1622.87,1205.96 1623.46,1205.96 1624.04,1205.96 1624.63,1205.96 1625.22,1205.96 1625.8,1205.96 1626.39,1205.96 1626.97,1205.96 1627.56,1205.96 1628.15,1205.96 1628.73,1205.96 1629.32,1205.96 1629.91,1205.96 1630.49,1205.96 1631.08,1205.96 1631.67,1205.96 1632.25,1205.96 1632.84,1205.96 1633.42,1205.96 1634.01,1205.96 1634.6,1205.96 1635.18,1205.96 1635.77,1205.96 1636.36,1205.96 1636.94,1205.96 1637.53,1205.96 1638.12,1205.96 1638.7,1205.96 1639.29,1205.96 1639.88,1205.96 1640.46,1205.96 1641.05,1205.96 1641.63,1205.96 1642.22,1205.96 1642.81,1205.96 1643.39,1205.96 1643.98,1205.96 1644.57,1205.96 1645.15,1205.96 1645.74,1205.96 1646.33,1205.96 1646.91,1205.96 1647.5,1205.96 1648.09,1205.96 1648.67,1205.96 1649.26,1205.96 1649.84,1205.96 1650.43,1205.96 1651.02,1205.96 1651.6,1205.96 1652.19,1205.96 1652.78,1205.96 1653.36,1205.96 1653.95,1205.96 1654.54,1205.96 1655.12,1205.96 1655.71,1205.96 1656.29,1205.96 1656.88,1205.96 1657.47,1205.96 1658.05,1205.96 1658.64,1205.96 1659.23,1205.96 1659.81,1205.96 1660.4,1205.96 1660.99,1205.96 1661.57,1205.96 1662.16,1205.96 1662.75,1205.96 1663.33,1205.96 1663.92,1205.96 1664.5,1205.96 1665.09,1205.96 1665.68,1205.96 1666.26,1205.96 1666.85,1205.96 1667.44,1205.96 1668.02,1205.96 1668.61,1205.96 1669.2,1205.96 1669.78,1205.96 1670.37,1205.96 1670.96,1205.96 1671.54,1205.96 1672.13,1205.96 1672.71,1205.96 1673.3,1205.96 1673.89,1205.96 1674.47,1205.96 1675.06,1205.96 1675.65,1205.96 1676.23,1205.96 1676.82,1205.96 1677.41,1205.96 1677.99,1205.96 1678.58,1205.96 1679.17,1205.96 1679.75,1205.96 1680.34,1205.96 1680.92,1205.96 1681.51,1205.96 1682.1,1205.96 1682.68,1205.96 1683.27,1205.96 1683.86,1205.96 1684.44,1205.96 1685.03,1205.96 1685.62,1205.96 1686.2,1205.96 1686.79,1205.96 1687.37,1205.96 1687.96,1205.96 1688.55,1205.96 1689.13,1205.96 1689.72,1205.96 1690.31,1205.96 1690.89,1205.96 1691.48,1205.96 1692.07,1205.96 1692.65,1205.96 1693.24,1205.96 1693.83,1205.96 1694.41,1205.96 1695,1205.96 1695.58,1205.96 1696.17,1205.96 1696.76,1205.96 1697.34,1205.96 1697.93,1205.96 1698.52,1205.96 1699.1,1205.96 1699.69,1205.96 1700.28,1205.96 1700.86,1205.96 1701.45,1205.96 1702.04,1205.96 1702.62,1205.96 1703.21,1205.96 1703.79,1205.96 1704.38,1205.96 1704.97,1205.96 1705.55,1205.96 1706.14,1205.96 1706.73,1205.96 1707.31,1205.96 1707.9,1205.96 1708.49,1205.96 1709.07,1205.96 1709.66,1205.96 1710.24,1205.96 1710.83,1205.96 1711.42,1205.96 1712,1205.96 1712.59,1205.96 1713.18,1205.96 1713.76,1205.96 1714.35,1205.96 1714.94,1205.96 1715.52,1205.96 1716.11,1205.96 1716.7,1205.96 1717.28,1205.96 1717.87,1205.96 1718.45,1205.96 1719.04,1205.96 1719.63,1205.96 1720.21,1205.96 1720.8,1205.96 1721.39,1205.96 1721.97,1205.96 1722.56,1205.96 1723.15,1205.96 1723.73,1205.96 1724.32,1205.96 1724.91,1205.96 1725.49,1205.96 1726.08,1205.96 1726.66,1205.96 1727.25,1205.96 1727.84,1205.96 1728.42,1205.96 1729.01,1205.96 1729.6,1205.96 1730.18,1205.96 1730.77,1205.96 1731.36,1205.96 1731.94,1205.96 1732.53,1205.96 1733.11,1205.96 1733.7,1205.96 1734.29,1205.96 1734.87,1205.96 1735.46,1205.96 1736.05,1205.96 1736.63,1205.96 1737.22,1205.96 1737.81,1205.96 1738.39,1205.96 1738.98,1205.96 1739.57,1205.96 1740.15,1205.96 1740.74,1205.96 1741.32,1205.96 1741.91,1205.96 1742.5,1205.96 1743.08,1205.96 1743.67,1205.96 1744.26,1205.96 1744.84,1205.96 1745.43,1205.96 1746.02,1205.96 1746.6,1205.96 1747.19,1205.96 1747.78,1205.96 1748.36,1205.96 1748.95,1205.96 1749.53,1205.96 1750.12,1205.96 1750.71,1205.96 1751.29,1205.96 1751.88,1205.96 1752.47,1205.96 1753.05,1205.96 1753.64,1205.96 1754.23,1205.96 1754.81,1205.96 1755.4,1205.96 1755.99,1205.96 1756.57,1205.96 1757.16,1205.96 1757.74,1205.96 1758.33,1205.96 1758.92,1205.96 1759.5,1205.96 1760.09,1205.96 1760.68,1205.96 1761.26,1205.96 1761.85,1205.96 1762.44,1205.96 1763.02,1205.96 1763.61,1205.96 1764.19,1205.96 1764.78,1205.96 1765.37,1205.96 1765.95,1205.96 1766.54,1205.96 1767.13,1205.96 1767.71,1205.96 1768.3,1205.96 1768.89,1205.96 1769.47,1205.96 1770.06,1205.96 1770.65,1205.96 1771.23,1205.96 1771.82,1205.96 1772.4,1205.96 1772.99,1205.96 1773.58,1205.96 1774.16,1205.96 1774.75,1205.96 1775.34,1205.96 1775.92,1205.96 1776.51,1205.96 1777.1,1205.96 1777.68,1205.96 1778.27,1205.96 1778.86,1205.96 1779.44,1205.96 1780.03,1205.96 1780.61,1205.96 1781.2,1205.96 1781.79,1205.96 1782.37,1205.96 1782.96,1205.96 1783.55,1205.96 1784.13,1205.96 1784.72,1205.96 1785.31,1205.96 1785.89,1205.96 1786.48,1205.96 1787.06,1205.96 1787.65,1205.96 1788.24,1205.96 1788.82,1205.96 1789.41,1205.96 1790,1205.96 1790.58,1205.96 1791.17,1205.96 1791.76,1205.96 1792.34,1205.96 1792.93,1205.96 1793.52,1205.96 1794.1,1205.96 1794.69,1205.96 1795.27,1205.96 1795.86,1205.96 1796.45,1205.96 1797.03,1205.96 1797.62,1205.96 1798.21,1205.96 1798.79,1205.96 1799.38,1205.96 1799.97,1205.96 1800.55,1205.96 1801.14,1205.96 1801.73,1205.96 1802.31,1205.96 1802.9,1205.96 1803.48,1205.96 1804.07,1205.96 1804.66,1205.96 1805.24,1205.96 1805.83,1205.96 1806.42,1205.96 1807,1205.96 1807.59,1205.96 1808.18,1205.96 1808.76,1205.96 1809.35,1205.96 1809.94,1205.96 1810.52,1205.96 1811.11,1205.96 1811.69,1205.96 1812.28,1205.96 1812.87,1205.96 1813.45,1205.96 1814.04,1205.96 1814.63,1205.96 1815.21,1205.96 1815.8,1205.96 1816.39,1205.96 1816.97,1205.96 1817.56,1205.96 1818.14,1205.96 1818.73,1205.96 1819.32,1205.96 1819.9,1205.96 1820.49,1205.96 1821.08,1205.96 1821.66,1205.96 1822.25,1205.96 1822.84,1205.96 1823.42,1205.96 1824.01,1205.96 1824.6,1205.96 1825.18,1205.96 1825.77,1205.96 1826.35,1205.96 1826.94,1205.96 1827.53,1205.96 1828.11,1205.96 1828.7,1205.96 1829.29,1205.96 1829.87,1205.96 1830.46,1205.96 1831.05,1205.96 1831.63,1205.96 1832.22,1205.96 1832.81,1205.96 1833.39,1205.96 1833.98,1205.96 1834.56,1205.96 1835.15,1205.96 1835.74,1205.96 1836.32,1205.96 1836.91,1205.96 1837.5,1205.96 1838.08,1205.96 1838.67,1205.96 1839.26,1205.96 1839.84,1205.96 1840.43,1205.96 1841.01,1205.96 1841.6,1205.96 1842.19,1205.96 1842.77,1205.96 1843.36,1205.96 1843.95,1205.96 1844.53,1205.96 1845.12,1205.96 1845.71,1205.96 1846.29,1205.96 1846.88,1205.96 1847.47,1205.96 1848.05,1205.96 1848.64,1205.96 1849.22,1205.96 1849.81,1205.96 1850.4,1205.96 1850.98,1205.96 1851.57,1205.96 1852.16,1205.96 1852.74,1205.96 1853.33,1205.96 1853.92,1205.96 1854.5,1205.96 1855.09,1205.96 1855.68,1205.96 1856.26,1205.96 1856.85,1205.96 1857.43,1205.96 1858.02,1205.96 1858.61,1205.96 1859.19,1205.96 1859.78,1205.96 1860.37,1205.96 1860.95,1205.96 1861.54,1205.96 1862.13,1205.96 1862.71,1205.96 1863.3,1205.96 1863.88,1205.96 1864.47,1205.96 1865.06,1205.96 1865.64,1205.96 1866.23,1205.96 1866.82,1205.96 1867.4,1205.96 1867.99,1205.96 1868.58,1205.96 1869.16,1205.96 1869.75,1205.96 1870.34,1205.96 1870.92,1205.96 1871.51,1205.96 1872.09,1205.96 1872.68,1205.96 1873.27,1205.96 1873.85,1205.96 1874.44,1205.96 1875.03,1205.96 1875.61,1205.96 1876.2,1205.96 1876.79,1205.96 1877.37,1205.96 1877.96,1205.96 1878.55,1205.96 1879.13,1205.96 1879.72,1205.96 1880.3,1205.96 1880.89,1205.96 1881.48,1205.96 1882.06,1205.96 1882.65,1205.96 1883.24,1205.96 1883.82,1205.96 1884.41,1205.96 1885,1205.96 1885.58,1205.96 1886.17,1205.96 1886.76,1205.96 1887.34,1205.96 1887.93,1205.96 1888.51,1205.96 1889.1,1205.96 1889.69,1205.96 1890.27,1205.96 1890.86,1205.96 1891.45,1205.96 1892.03,1205.96 1892.62,1205.96 1893.21,1205.96 1893.79,1205.96 1894.38,1205.96 1894.96,1205.96 1895.55,1205.96 1896.14,1205.96 1896.72,1205.96 1897.31,1205.96 1897.9,1205.96 1898.48,1205.96 1899.07,1205.96 1899.66,1205.96 1900.24,1205.96 1900.83,1205.96 1901.42,1205.96 1902,1205.96 1902.59,1205.96 1903.17,1205.96 1903.76,1205.96 1904.35,1205.96 1904.93,1205.96 1905.52,1205.96 1906.11,1205.96 1906.69,1205.96 1907.28,1205.96 1907.87,1205.96 1908.45,1205.96 1909.04,1205.96 1909.63,1205.96 1910.21,1205.96 1910.8,1205.96 1911.38,1205.96 1911.97,1205.96 1912.56,1205.96 1913.14,1205.96 1913.73,1205.96 1914.32,1205.96 1914.9,1205.96 1915.49,1205.96 1916.08,1205.96 1916.66,1205.96 1917.25,1205.96 1917.83,1205.96 1918.42,1205.96 1919.01,1205.96 1919.59,1205.96 1920.18,1205.96 1920.77,1205.96 1921.35,1205.96 1921.94,1205.96 1922.53,1205.96 1923.11,1205.96 1923.7,1205.96 1924.29,1205.96 1924.87,1205.96 1925.46,1205.96 1926.04,1205.96 1926.63,1205.96 1927.22,1205.96 1927.8,1205.96 1928.39,1205.96 1928.98,1205.96 1929.56,1205.96 1930.15,1205.96 1930.74,1205.96 1931.32,1205.96 1931.91,1205.96 1932.5,1205.96 1933.08,1205.96 1933.67,1205.96 1934.25,1205.96 1934.84,1205.96 1935.43,1205.96 1936.01,1205.96 1936.6,1205.96 1937.19,1205.96 1937.77,1205.96 1938.36,1205.96 1938.95,1205.96 1939.53,1205.96 1940.12,1205.96 1940.71,1205.96 1941.29,1205.96 1941.88,1205.96 1942.46,1205.96 1943.05,1205.96 1943.64,1205.96 1944.22,1205.96 1944.81,1205.96 1945.4,1205.96 1945.98,1205.96 1946.57,1205.96 1947.16,1205.96 1947.74,1205.96 1948.33,1205.96 1948.91,1205.96 1949.5,1205.96 1950.09,1205.96 1950.67,1205.96 1951.26,1205.96 1951.85,1205.96 1952.43,1205.96 1953.02,1205.96 1953.61,1205.96 1954.19,1205.96 1954.78,1205.96 1955.37,1205.96 1955.95,1205.96 1956.54,1205.96 1957.12,1205.96 1957.71,1205.96 1958.3,1205.96 1958.88,1205.96 1959.47,1205.96 1960.06,1205.96 1960.64,1205.96 1961.23,1205.96 1961.82,1205.96 1962.4,1205.96 1962.99,1205.96 1963.58,1205.96 1964.16,1205.96 1964.75,1205.96 1965.33,1205.96 1965.92,1205.96 1966.51,1205.96 1967.09,1205.96 1967.68,1205.96 1968.27,1205.96 1968.85,1205.96 1969.44,1205.96 1970.03,1205.96 1970.61,1205.96 1971.2,1205.96 1971.78,1205.96 1972.37,1205.96 1972.96,1205.96 1973.54,1205.96 1974.13,1205.96 1974.72,1205.96 1975.3,1205.96 1975.89,1205.96 1976.48,1205.96 1977.06,1205.96 1977.65,1205.96 1978.24,1205.96 1978.82,1205.96 1979.41,1205.96 1979.99,1205.96 1980.58,1205.96 1981.17,1205.96 1981.75,1205.96 1982.34,1205.96 1982.93,1205.96 1983.51,1205.96 1984.1,1205.96 1984.69,1205.96 1985.27,1205.96 1985.86,1205.96 1986.45,1205.96 1987.03,1205.96 1987.62,1205.96 1988.2,1205.96 1988.79,1205.96 1989.38,1205.96 1989.96,1205.96 1990.55,1205.96 1991.14,1205.96 1991.72,1205.96 1992.31,1205.96 1992.9,1205.96 1993.48,1205.96 1994.07,1205.96 1994.65,1205.96 1995.24,1205.96 1995.83,1205.96 1996.41,1205.96 1997,1205.96 1997.59,1205.96 1998.17,1205.96 1998.76,1205.96 1999.35,1205.96 1999.93,1205.96 2000.52,1205.96 2001.11,1205.96 2001.69,1205.96 2002.28,1205.96 2002.86,1205.96 2003.45,1205.96 2004.04,1205.96 2004.62,1205.96 2005.21,1205.96 2005.8,1205.96 2006.38,1205.96 2006.97,1205.96 2007.56,1205.96 2008.14,1205.96 2008.73,1205.96 2009.32,1205.96 2009.9,1205.96 2010.49,1205.96 2011.07,1205.96 2011.66,1205.96 2012.25,1205.96 2012.83,1205.96 2013.42,1205.96 2014.01,1205.96 2014.59,1205.96 2015.18,1205.96 2015.77,1205.96 2016.35,1205.96 2016.94,1205.96 2017.53,1205.96 2018.11,1205.96 2018.7,1205.96 2019.28,1205.96 2019.87,1205.96 2020.46,1205.96 2021.04,1205.96 2021.63,1205.96 2022.22,1205.96 2022.8,1205.96 2023.39,1205.96 2023.98,1205.96 2024.56,1205.96 2025.15,1205.96 2025.73,1205.96 2026.32,1205.96 2026.91,1205.96 2027.49,1205.96 2028.08,1205.96 2028.67,1205.96 2029.25,1205.96 2029.84,1205.96 2030.43,1205.96 2031.01,1205.96 2031.6,1205.96 2032.19,1205.96 2032.77,1205.96 2033.36,1205.96 2033.94,1205.96 2034.53,1205.96 2035.12,1205.96 2035.7,1205.96 2036.29,1205.96 2036.88,1205.96 2037.46,1205.96 2038.05,1205.96 2038.64,1205.96 2039.22,1205.96 2039.81,1205.96 2040.4,1205.96 2040.98,1205.96 2041.57,1205.96 2042.15,1205.96 2042.74,1205.96 2043.33,1205.96 2043.91,1205.96 2044.5,1205.96 2045.09,1205.96 2045.67,1205.96 2046.26,1205.96 2046.85,1205.96 2047.43,1205.96 2048.02,1205.96 2048.6,1205.96 2049.19,1205.96 2049.78,1205.96 2050.36,1205.96 2050.95,1205.96 2051.54,1205.96 2052.12,1205.96 2052.71,1205.96 2053.3,1205.96 2053.88,1205.96 2054.47,1205.96 2055.06,1205.96 2055.64,1205.96 2056.23,1205.96 2056.81,1205.96 2057.4,1205.96 2057.99,1205.96 2058.57,1205.96 2059.16,1205.96 2059.75,1205.96 2060.33,1205.96 2060.92,1205.96 2061.51,1205.96 2062.09,1205.96 2062.68,1205.96 2063.27,1205.96 2063.85,1205.96 2064.44,1205.96 2065.02,1205.96 2065.61,1205.96 2066.2,1205.96 2066.78,1205.96 2067.37,1205.96 2067.96,1205.96 2068.54,1205.96 2069.13,1205.96 2069.72,1205.96 2070.3,1205.96 2070.89,1205.96 2071.48,1205.96 2072.06,1205.96 2072.65,1205.96 2073.23,1205.96 2073.82,1205.96 2074.41,1205.96 2074.99,1205.96 2075.58,1205.96 2076.17,1205.96 2076.75,1205.96 2077.34,1205.96 2077.93,1205.96 2078.51,1205.96 2079.1,1205.96 2079.68,1205.96 2080.27,1205.96 2080.86,1205.96 2081.44,1205.96 2082.03,1205.96 2082.62,1205.96 2083.2,1205.96 2083.79,1205.96 2084.38,1205.96 2084.96,1205.96 2085.55,1205.96 2086.14,1205.96 2086.72,1205.96 2087.31,1205.96 2087.89,1205.96 2088.48,1205.96 2089.07,1205.96 2089.65,1205.96 2090.24,1205.96 2090.83,1205.96 2091.41,1205.96 2092,1205.96 2092.59,1205.96 2093.17,1205.96 2093.76,1205.96 2094.35,1205.96 2094.93,1205.96 2095.52,1205.96 2096.1,1205.96 2096.69,1205.96 2097.28,1205.96 2097.86,1205.96 2098.45,1205.96 2099.04,1205.96 2099.62,1205.96 2100.21,1205.96 2100.8,1205.96 2101.38,1205.96 2101.97,1205.96 2102.55,1205.96 2103.14,1205.96 2103.73,1205.96 2104.31,1205.96 2104.9,1205.96 2105.49,1205.96 2106.07,1205.96 2106.66,1205.96 2107.25,1205.96 2107.83,1205.96 2108.42,1205.96 2109.01,1205.96 2109.59,1205.96 2110.18,1205.96 2110.76,1205.96 2111.35,1205.96 2111.94,1205.96 2112.52,1205.96 2113.11,1205.96 2113.7,1205.96 2114.28,1205.96 2114.87,1205.96 2115.46,1205.96 2116.04,1205.96 2116.63,1205.96 2117.22,1205.96 2117.8,1205.96 2118.39,1205.96 2118.97,1205.96 2119.56,1205.96 2120.15,1205.96 2120.73,1205.96 2121.32,1205.96 2121.91,1205.96 2122.49,1205.96 2123.08,1205.96 2123.67,1205.96 2124.25,1205.96 2124.84,1205.96 2125.42,1205.96 2126.01,1205.96 2126.6,1205.96 2127.18,1205.96 2127.77,1205.96 2128.36,1205.96 2128.94,1205.96 2129.53,1205.96 2130.12,1205.96 2130.7,1205.96 2131.29,1205.96 2131.88,1205.96 2132.46,1205.96 2133.05,1205.96 2133.63,1205.96 2134.22,1205.96 2134.81,1205.96 2135.39,1205.96 2135.98,1205.96 2136.57,1205.96 2137.15,1205.96 2137.74,1205.96 2138.33,1205.96 2138.91,1205.96 2139.5,1205.96 2140.09,1205.96 2140.67,1205.96 2141.26,1205.96 2141.84,1205.96 2142.43,1205.96 2143.02,1205.96 2143.6,1205.96 2144.19,1205.96 2144.78,1205.96 2145.36,1205.96 2145.95,1205.96 2146.54,1205.96 2147.12,1205.96 2147.71,1205.96 2148.3,1205.96 2148.88,1205.96 2149.47,1205.96 2150.05,1205.96 2150.64,1205.96 2151.23,1205.96 2151.81,1205.96 2152.4,1205.96 2152.99,1205.96 2153.57,1205.96 2154.16,1205.96 2154.75,1205.96 2155.33,1205.96 2155.92,1205.96 2156.5,1205.96 2157.09,1205.96 2157.68,1205.96 2158.26,1205.96 \"/>\n<path clip-path=\"url(#clip432)\" d=\"M986.025 1205.75 L986.612 1205.75 L987.198 1205.75 L987.785 1205.75 L988.371 1205.75 L988.957 1205.75 L989.544 1205.75 L990.13 1205.75 L990.717 1205.75 L991.303 1205.75 L991.889 1205.75 L992.476 1205.75 L993.062 1205.75 L993.649 1205.75 L994.235 1205.75 L994.822 1205.75 L995.408 1205.75 L995.994 1205.75 L996.581 1205.75 L997.167 1205.75 L997.754 1205.75 L998.34 1205.75 L998.926 1205.75 L999.513 1205.75 L1000.1 1205.75 L1000.69 1205.75 L1001.27 1205.75 L1001.86 1205.75 L1002.44 1205.75 L1003.03 1205.75 L1003.62 1205.75 L1004.2 1205.75 L1004.79 1205.75 L1005.38 1205.75 L1005.96 1205.75 L1006.55 1205.75 L1007.14 1205.75 L1007.72 1205.75 L1008.31 1205.75 L1008.9 1205.75 L1009.48 1205.75 L1010.07 1205.75 L1010.65 1205.75 L1011.24 1205.75 L1011.83 1205.75 L1012.41 1205.75 L1013 1205.75 L1013.59 1205.75 L1014.17 1205.75 L1014.76 1205.75 L1015.35 1205.75 L1015.93 1205.75 L1016.52 1205.75 L1017.11 1205.75 L1017.69 1205.75 L1018.28 1205.75 L1018.86 1205.75 L1019.45 1205.75 L1020.04 1205.75 L1020.62 1205.75 L1021.21 1205.75 L1021.8 1205.75 L1022.38 1205.75 L1022.97 1205.75 L1023.56 1205.75 L1024.14 1205.75 L1024.73 1205.75 L1025.32 1205.75 L1025.9 1205.75 L1026.49 1205.75 L1027.07 1205.75 L1027.66 1205.75 L1028.25 1205.75 L1028.83 1205.75 L1029.42 1205.75 L1030.01 1205.75 L1030.59 1205.75 L1031.18 1205.75 L1031.77 1205.75 L1032.35 1205.75 L1032.94 1205.75 L1033.52 1205.75 L1034.11 1205.75 L1034.7 1205.75 L1035.28 1205.75 L1035.87 1205.75 L1036.46 1205.75 L1037.04 1205.75 L1037.63 1205.75 L1038.22 1205.75 L1038.8 1205.75 L1039.39 1205.75 L1039.98 1205.75 L1040.56 1205.75 L1041.15 1205.75 L1041.73 1205.75 L1042.32 1205.75 L1042.91 1205.75 L1043.49 1205.75 L1044.08 1205.75 L1044.67 1205.75 L1045.25 1205.75 L1045.84 1205.75 L1046.43 1205.75 L1047.01 1205.75 L1047.6 1205.75 L1048.19 1205.75 L1048.77 1205.75 L1049.36 1205.75 L1049.94 1205.75 L1050.53 1205.75 L1051.12 1205.75 L1051.7 1205.75 L1052.29 1205.75 L1052.88 1205.75 L1053.46 1205.75 L1054.05 1205.75 L1054.64 1205.75 L1055.22 1205.75 L1055.81 1205.75 L1056.39 1205.75 L1056.98 1205.75 L1057.57 1205.75 L1058.15 1205.75 L1058.74 1205.75 L1059.33 1205.75 L1059.91 1205.75 L1060.5 1205.75 L1061.09 1205.75 L1061.67 1205.75 L1062.26 1205.75 L1062.85 1205.75 L1063.43 1205.75 L1064.02 1205.75 L1064.6 1205.75 L1065.19 1205.75 L1065.78 1205.75 L1066.36 1205.75 L1066.95 1205.75 L1067.54 1205.75 L1068.12 1205.75 L1068.71 1205.75 L1069.3 1205.75 L1069.88 1205.75 L1070.47 1205.75 L1071.06 1205.75 L1071.64 1205.75 L1072.23 1205.75 L1072.81 1205.75 L1073.4 1205.75 L1073.99 1205.75 L1074.57 1205.75 L1075.16 1205.75 L1075.75 1205.75 L1076.33 1205.75 L1076.92 1205.75 L1077.51 1205.75 L1078.09 1205.75 L1078.68 1205.75 L1079.26 1205.75 L1079.85 1205.75 L1080.44 1205.75 L1081.02 1205.75 L1081.61 1205.75 L1082.2 1205.75 L1082.78 1205.75 L1083.37 1205.75 L1083.96 1205.75 L1084.54 1205.75 L1085.13 1205.75 L1085.72 1205.75 L1086.3 1205.75 L1086.89 1205.75 L1087.47 1205.75 L1088.06 1205.75 L1088.65 1205.75 L1089.23 1205.75 L1089.82 1205.75 L1090.41 1205.75 L1090.99 1205.75 L1091.58 1205.75 L1092.17 1205.75 L1092.75 1205.75 L1093.34 1205.75 L1093.93 1205.75 L1094.51 1205.75 L1095.1 1205.75 L1095.68 1205.75 L1096.27 1205.75 L1096.86 1205.75 L1097.44 1205.75 L1098.03 1205.75 L1098.62 1205.75 L1099.2 1205.75 L1099.79 1205.75 L1100.38 1205.75 L1100.96 1205.75 L1101.55 1205.75 L1102.14 1205.75 L1102.72 1205.75 L1103.31 1205.75 L1103.89 1205.75 L1104.48 1205.75 L1105.07 1205.75 L1105.65 1205.75 L1106.24 1205.75 L1106.83 1205.75 L1107.41 1205.75 L1108 1205.75 L1108.59 1205.75 L1109.17 1205.75 L1109.76 1205.75 L1110.34 1205.75 L1110.93 1205.75 L1111.52 1205.75 L1112.1 1205.75 L1112.69 1205.75 L1113.28 1205.75 L1113.86 1205.75 L1114.45 1205.75 L1115.04 1205.75 L1115.62 1205.75 L1116.21 1205.75 L1116.8 1205.75 L1117.38 1205.75 L1117.97 1205.75 L1118.55 1205.75 L1119.14 1205.75 L1119.73 1205.75 L1120.31 1205.75 L1120.9 1205.75 L1121.49 1205.75 L1122.07 1205.75 L1122.66 1205.75 L1123.25 1205.75 L1123.83 1205.75 L1124.42 1205.75 L1125.01 1205.75 L1125.59 1205.75 L1126.18 1205.75 L1126.76 1205.75 L1127.35 1205.75 L1127.94 1205.75 L1128.52 1205.75 L1129.11 1205.75 L1129.7 1205.75 L1130.28 1205.75 L1130.87 1205.75 L1131.46 1205.75 L1132.04 1205.75 L1132.63 1205.75 L1133.21 1205.75 L1133.8 1205.75 L1134.39 1205.75 L1134.97 1205.75 L1135.56 1205.75 L1136.15 1205.75 L1136.73 1205.75 L1137.32 1205.75 L1137.91 1205.75 L1138.49 1205.75 L1139.08 1205.75 L1139.67 1205.75 L1140.25 1205.75 L1140.84 1205.75 L1141.42 1205.75 L1142.01 1205.75 L1142.6 1205.75 L1143.18 1205.75 L1143.77 1205.75 L1144.36 1205.75 L1144.94 1205.75 L1145.53 1205.75 L1146.12 1205.75 L1146.7 1205.75 L1147.29 1205.75 L1147.88 1205.75 L1148.46 1205.75 L1149.05 1205.75 L1149.63 1205.75 L1150.22 1205.75 L1150.81 1205.75 L1151.39 1205.75 L1151.98 1205.75 L1152.57 1205.75 L1153.15 1205.75 L1153.74 1205.75 L1154.33 1205.75 L1154.91 1205.75 L1155.5 1205.75 L1156.09 1205.75 L1156.67 1205.75 L1157.26 1205.75 L1157.84 1205.75 L1158.43 1205.75 L1159.02 1205.75 L1159.6 1205.75 L1160.19 1205.75 L1160.78 1205.75 L1161.36 1205.75 L1161.95 1205.75 L1162.54 1205.75 L1163.12 1205.75 L1163.71 1205.75 L1164.29 1205.75 L1164.88 1205.75 L1165.47 1205.75 L1166.05 1205.75 L1166.64 1205.75 L1167.23 1205.75 L1167.81 1205.75 L1168.4 1205.75 L1168.99 1205.75 L1169.57 1205.75 L1170.16 1205.75 L1170.75 1205.75 L1171.33 1205.75 L1171.92 1205.75 L1172.5 1205.75 L1173.09 1205.75 L1173.68 1205.75 L1174.26 1205.75 L1174.85 1205.75 L1175.44 1205.75 L1176.02 1205.75 L1176.61 1205.75 L1177.2 1205.75 L1177.78 1205.75 L1178.37 1205.75 L1178.96 1205.75 L1179.54 1205.75 L1180.13 1205.75 L1180.71 1205.75 L1181.3 1205.75 L1181.89 1205.75 L1182.47 1205.75 L1183.06 1205.75 L1183.65 1205.75 L1184.23 1205.75 L1184.82 1205.75 L1185.41 1205.75 L1185.99 1205.75 L1186.58 1205.75 L1187.16 1205.75 L1187.75 1205.75 L1188.34 1205.75 L1188.92 1205.75 L1189.51 1205.75 L1190.1 1205.75 L1190.68 1205.75 L1191.27 1205.75 L1191.86 1205.75 L1192.44 1205.75 L1193.03 1205.75 L1193.62 1205.75 L1194.2 1205.75 L1194.79 1205.75 L1195.37 1205.75 L1195.96 1205.75 L1196.55 1205.75 L1197.13 1205.75 L1197.72 1205.75 L1198.31 1205.75 L1198.89 1205.75 L1199.48 1205.75 L1200.07 1205.75 L1200.65 1205.75 L1201.24 1205.75 L1201.83 1205.75 L1202.41 1205.75 L1203 1205.75 L1203.58 1205.75 L1204.17 1205.75 L1204.76 1205.75 L1205.34 1205.75 L1205.93 1205.75 L1206.52 1205.75 L1207.1 1205.75 L1207.69 1205.75 L1208.28 1205.75 L1208.86 1205.75 L1209.45 1205.75 L1210.03 1205.75 L1210.62 1205.75 L1211.21 1205.75 L1211.79 1205.75 L1212.38 1205.75 L1212.97 1205.75 L1213.55 1205.75 L1214.14 1205.75 L1214.73 1205.75 L1215.31 1205.75 L1215.9 1205.75 L1216.49 1205.75 L1217.07 1205.75 L1217.66 1205.75 L1218.24 1205.75 L1218.83 1205.75 L1219.42 1205.75 L1220 1205.75 L1220.59 1205.75 L1221.18 1205.75 L1221.76 1205.75 L1222.35 1205.75 L1222.94 1205.75 L1223.52 1205.75 L1224.11 1205.75 L1224.7 1205.75 L1225.28 1205.75 L1225.87 1205.75 L1226.45 1205.75 L1227.04 1205.75 L1227.63 1205.75 L1228.21 1205.75 L1228.8 1205.75 L1229.39 1205.75 L1229.97 1205.75 L1230.56 1205.75 L1231.15 1205.75 L1231.73 1205.75 L1232.32 1205.75 L1232.91 1205.75 L1233.49 1205.75 L1234.08 1205.75 L1234.66 1205.75 L1235.25 1205.75 L1235.84 1205.75 L1236.42 1205.75 L1237.01 1205.75 L1237.6 1205.75 L1238.18 1205.75 L1238.77 1205.75 L1239.36 1205.75 L1239.94 1205.75 L1240.53 1205.75 L1241.11 1205.75 L1241.7 1205.75 L1242.29 1205.75 L1242.87 1205.75 L1243.46 1205.75 L1244.05 1205.75 L1244.63 1205.75 L1245.22 1205.75 L1245.81 1205.75 L1246.39 1205.75 L1246.98 1205.75 L1247.57 1205.75 L1248.15 1205.75 L1248.74 1205.75 L1249.32 1205.75 L1249.91 1205.75 L1250.5 1205.75 L1251.08 1205.75 L1251.67 1205.75 L1252.26 1205.75 L1252.84 1205.75 L1253.43 1205.75 L1254.02 1205.75 L1254.6 1205.75 L1255.19 1205.75 L1255.78 1205.75 L1256.36 1205.75 L1256.95 1205.75 L1257.53 1205.75 L1258.12 1205.75 L1258.71 1205.75 L1259.29 1205.75 L1259.88 1205.75 L1260.47 1205.75 L1261.05 1205.75 L1261.64 1205.75 L1262.23 1205.75 L1262.81 1205.75 L1263.4 1205.75 L1263.98 1205.75 L1264.57 1205.75 L1265.16 1205.75 L1265.74 1205.75 L1266.33 1205.75 L1266.92 1205.75 L1267.5 1205.75 L1268.09 1205.75 L1268.68 1205.75 L1269.26 1205.75 L1269.85 1205.75 L1270.44 1205.75 L1271.02 1205.75 L1271.61 1205.75 L1272.19 1205.75 L1272.78 1205.75 L1273.37 1205.75 L1273.95 1205.75 L1274.54 1205.75 L1275.13 1205.75 L1275.71 1205.75 L1276.3 1205.75 L1276.89 1205.75 L1277.47 1205.75 L1278.06 1205.75 L1278.65 1205.75 L1279.23 1205.75 L1279.82 1205.75 L1280.4 1205.75 L1280.99 1205.75 L1281.58 1205.75 L1282.16 1205.75 L1282.75 1205.75 L1283.34 1205.75 L1283.92 1205.75 L1284.51 1205.75 L1285.1 1205.75 L1285.68 1205.75 L1286.27 1205.75 L1286.86 1205.75 L1287.44 1205.75 L1288.03 1205.75 L1288.61 1205.75 L1289.2 1205.75 L1289.79 1205.75 L1290.37 1205.75 L1290.96 1205.75 L1291.55 1205.75 L1292.13 1205.75 L1292.72 1205.75 L1293.31 1205.75 L1293.89 1205.75 L1294.48 1205.75 L1295.06 1205.75 L1295.65 1205.75 L1296.24 1205.75 L1296.82 1205.75 L1297.41 1205.75 L1298 1205.75 L1298.58 1205.75 L1299.17 1205.75 L1299.76 1205.75 L1300.34 1205.75 L1300.93 1205.75 L1301.52 1205.75 L1302.1 1205.75 L1302.69 1205.75 L1303.27 1205.75 L1303.86 1205.75 L1304.45 1205.75 L1305.03 1205.75 L1305.62 1205.75 L1306.21 1205.75 L1306.79 1205.75 L1307.38 1205.75 L1307.97 1205.75 L1308.55 1205.75 L1309.14 1205.75 L1309.73 1205.75 L1310.31 1205.75 L1310.9 1205.75 L1311.48 1205.75 L1312.07 1205.75 L1312.66 1205.75 L1313.24 1205.75 L1313.83 1205.75 L1314.42 1205.75 L1315 1205.75 L1315.59 1205.75 L1316.18 1205.75 L1316.76 1205.75 L1317.35 1205.75 L1317.93 1205.75 L1318.52 1205.75 L1319.11 1205.75 L1319.69 1205.75 L1320.28 1205.75 L1320.87 1205.75 L1321.45 1205.75 L1322.04 1205.75 L1322.63 1205.75 L1323.21 1205.75 L1323.8 1205.75 L1324.39 1205.75 L1324.97 1205.75 L1325.56 1205.75 L1326.14 1205.75 L1326.73 1205.75 L1327.32 1205.75 L1327.9 1205.75 L1328.49 1205.75 L1329.08 1205.75 L1329.66 1205.75 L1330.25 1205.75 L1330.84 1205.75 L1331.42 1205.75 L1332.01 1205.75 L1332.6 1205.75 L1333.18 1205.75 L1333.77 1205.75 L1334.35 1205.75 L1334.94 1205.75 L1335.53 1205.75 L1336.11 1205.75 L1336.7 1205.75 L1337.29 1205.75 L1337.87 1205.75 L1338.46 1205.75 L1339.05 1205.75 L1339.63 1205.75 L1340.22 1205.75 L1340.8 1205.75 L1341.39 1205.75 L1341.98 1205.75 L1342.56 1205.75 L1343.15 1205.75 L1343.74 1205.75 L1344.32 1205.75 L1344.91 1205.75 L1345.5 1205.75 L1346.08 1205.75 L1346.67 1205.75 L1347.26 1205.75 L1347.84 1205.75 L1348.43 1205.75 L1349.01 1205.75 L1349.6 1205.75 L1350.19 1205.75 L1350.77 1205.75 L1351.36 1205.75 L1351.95 1205.75 L1352.53 1205.75 L1353.12 1205.75 L1353.71 1205.75 L1354.29 1205.75 L1354.88 1205.75 L1355.47 1205.75 L1356.05 1205.75 L1356.64 1205.75 L1357.22 1205.75 L1357.81 1205.75 L1358.4 1205.75 L1358.98 1205.75 L1359.57 1205.75 L1360.16 1205.75 L1360.74 1205.75 L1361.33 1205.75 L1361.92 1205.75 L1362.5 1205.75 L1363.09 1205.75 L1363.68 1205.75 L1364.26 1205.75 L1364.85 1205.75 L1365.43 1205.75 L1366.02 1205.75 L1366.61 1205.75 L1367.19 1205.75 L1367.78 1205.75 L1368.37 1205.75 L1368.95 1205.75 L1369.54 1205.75 L1370.13 1205.75 L1370.71 1205.75 L1371.3 1205.75 L1371.88 1205.75 L1372.47 1205.75 L1373.06 1205.75 L1373.64 1205.75 L1374.23 1205.75 L1374.82 1205.75 L1375.4 1205.75 L1375.99 1205.75 L1376.58 1205.75 L1377.16 1205.75 L1377.75 1205.75 L1378.34 1205.75 L1378.92 1205.75 L1379.51 1205.75 L1380.09 1205.75 L1380.68 1205.75 L1381.27 1205.75 L1381.85 1205.75 L1382.44 1205.75 L1383.03 1205.75 L1383.61 1205.75 L1384.2 1205.75 L1384.79 1205.75 L1385.37 1205.75 L1385.96 1205.75 L1386.55 1205.75 L1387.13 1205.75 L1387.72 1205.75 L1388.3 1205.75 L1388.89 1205.75 L1389.48 1205.75 L1390.06 1205.75 L1390.65 1205.75 L1391.24 1205.75 L1391.82 1205.75 L1392.41 1205.75 L1393 1205.75 L1393.58 1205.75 L1394.17 1205.75 L1394.75 1205.75 L1395.34 1205.75 L1395.93 1205.75 L1396.51 1205.75 L1397.1 1205.75 L1397.69 1205.75 L1398.27 1205.75 L1398.86 1205.75 L1399.45 1205.75 L1400.03 1205.75 L1400.62 1205.75 L1401.21 1205.75 L1401.79 1205.75 L1402.38 1205.75 L1402.96 1205.75 L1403.55 1205.75 L1404.14 1205.75 L1404.72 1205.75 L1405.31 1205.75 L1405.9 1205.75 L1406.48 1205.75 L1407.07 1205.75 L1407.66 1205.75 L1408.24 1205.75 L1408.83 1205.75 L1409.42 1205.75 L1410 1205.75 L1410.59 1205.75 L1411.17 1205.75 L1411.76 1205.75 L1412.35 1205.75 L1412.93 1205.75 L1413.52 1205.75 L1414.11 1205.75 L1414.69 1205.75 L1415.28 1205.75 L1415.87 1205.75 L1416.45 1205.75 L1417.04 1205.75 L1417.63 1205.75 L1418.21 1205.75 L1418.8 1205.75 L1419.38 1205.75 L1419.97 1205.75 L1420.56 1205.75 L1421.14 1205.75 L1421.73 1205.75 L1422.32 1205.75 L1422.9 1205.75 L1423.49 1205.75 L1424.08 1205.75 L1424.66 1205.75 L1425.25 1205.75 L1425.83 1205.75 L1426.42 1205.75 L1427.01 1205.75 L1427.59 1205.75 L1428.18 1205.75 L1428.77 1205.75 L1429.35 1205.75 L1429.94 1205.75 L1430.53 1205.75 L1431.11 1205.75 L1431.7 1205.75 L1432.29 1205.75 L1432.87 1205.75 L1433.46 1205.75 L1434.04 1205.75 L1434.63 1205.75 L1435.22 1205.75 L1435.8 1205.75 L1436.39 1205.75 L1436.98 1205.75 L1437.56 1205.75 L1438.15 1205.75 L1438.74 1205.75 L1439.32 1205.75 L1439.91 1205.75 L1440.5 1205.75 L1441.08 1205.75 L1441.67 1205.75 L1442.25 1205.75 L1442.84 1205.75 L1443.43 1205.75 L1444.01 1205.75 L1444.6 1205.75 L1445.19 1205.75 L1445.77 1205.75 L1446.36 1205.75 L1446.95 1205.75 L1447.53 1205.75 L1448.12 1205.75 L1448.7 1205.75 L1449.29 1205.75 L1449.88 1205.75 L1450.46 1205.75 L1451.05 1205.75 L1451.64 1205.75 L1452.22 1205.75 L1452.81 1205.75 L1453.4 1205.75 L1453.98 1205.75 L1454.57 1205.75 L1455.16 1205.75 L1455.74 1205.75 L1456.33 1205.75 L1456.91 1205.75 L1457.5 1205.75 L1458.09 1205.75 L1458.67 1205.75 L1459.26 1205.75 L1459.85 1205.75 L1460.43 1205.75 L1461.02 1205.75 L1461.61 1205.75 L1462.19 1205.75 L1462.78 1205.75 L1463.37 1205.75 L1463.95 1205.75 L1464.54 1205.75 L1465.12 1205.75 L1465.71 1205.75 L1466.3 1205.75 L1466.88 1205.75 L1467.47 1205.75 L1468.06 1205.75 L1468.64 1205.75 L1469.23 1205.75 L1469.82 1205.75 L1470.4 1205.75 L1470.99 1205.75 L1471.57 1205.75 L1472.16 1205.75 L1472.75 1205.75 L1473.33 1205.75 L1473.92 1205.75 L1474.51 1205.75 L1475.09 1205.75 L1475.68 1205.75 L1476.27 1205.75 L1476.85 1205.75 L1477.44 1205.75 L1478.03 1205.75 L1478.61 1205.75 L1479.2 1205.75 L1479.78 1205.75 L1480.37 1205.75 L1480.96 1205.75 L1481.54 1205.75 L1482.13 1205.75 L1482.72 1205.75 L1483.3 1205.75 L1483.89 1205.75 L1484.48 1205.75 L1485.06 1205.75 L1485.65 1205.75 L1486.24 1205.75 L1486.82 1205.75 L1487.41 1205.75 L1487.99 1205.75 L1488.58 1205.75 L1489.17 1205.75 L1489.75 1205.75 L1490.34 1205.75 L1490.93 1205.75 L1491.51 1205.75 L1492.1 1205.75 L1492.69 1205.75 L1493.27 1205.75 L1493.86 1205.75 L1494.45 1205.75 L1495.03 1205.75 L1495.62 1205.75 L1496.2 1205.75 L1496.79 1205.75 L1497.38 1205.75 L1497.96 1205.75 L1498.55 1205.75 L1499.14 1205.75 L1499.72 1205.75 L1500.31 1205.75 L1500.9 1205.75 L1501.48 1205.75 L1502.07 1205.75 L1502.65 1205.75 L1503.24 1205.75 L1503.83 1205.75 L1504.41 1205.75 L1505 1205.75 L1505.59 1205.75 L1506.17 1205.75 L1506.76 1205.75 L1507.35 1205.75 L1507.93 1205.75 L1508.52 1205.75 L1509.11 1205.75 L1509.69 1205.75 L1510.28 1205.75 L1510.86 1205.75 L1511.45 1205.75 L1512.04 1205.75 L1512.62 1205.75 L1513.21 1205.75 L1513.8 1205.75 L1514.38 1205.75 L1514.97 1205.75 L1515.56 1205.75 L1516.14 1205.75 L1516.73 1205.75 L1517.32 1205.75 L1517.9 1205.75 L1518.49 1205.75 L1519.07 1205.75 L1519.66 1205.75 L1520.25 1205.75 L1520.83 1205.75 L1521.42 1205.75 L1522.01 1205.75 L1522.59 1205.75 L1523.18 1205.75 L1523.77 1205.75 L1524.35 1205.75 L1524.94 1205.75 L1525.52 1205.75 L1526.11 1205.75 L1526.7 1205.75 L1527.28 1205.75 L1527.87 1205.75 L1528.46 1205.75 L1529.04 1205.75 L1529.63 1205.75 L1530.22 1205.75 L1530.8 1205.75 L1531.39 1205.75 L1531.98 1205.75 L1532.56 1205.75 L1533.15 1205.75 L1533.73 1205.75 L1534.32 1205.75 L1534.91 1205.75 L1535.49 1205.75 L1536.08 1205.75 L1536.67 1205.75 L1537.25 1205.75 L1537.84 1205.75 L1538.43 1205.75 L1539.01 1205.75 L1539.6 1205.75 L1540.19 1205.75 L1540.77 1205.75 L1541.36 1205.75 L1541.94 1205.75 L1542.53 1205.75 L1543.12 1205.75 L1543.7 1205.75 L1544.29 1205.75 L1544.88 1205.75 L1545.46 1205.75 L1546.05 1205.75 L1546.64 1205.75 L1547.22 1205.75 L1547.81 1205.75 L1548.4 1205.75 L1548.98 1205.75 L1549.57 1205.75 L1550.15 1205.75 L1550.74 1205.75 L1551.33 1205.75 L1551.91 1205.75 L1552.5 1205.75 L1553.09 1205.75 L1553.67 1205.75 L1554.26 1205.75 L1554.85 1205.75 L1555.43 1205.75 L1556.02 1205.75 L1556.6 1205.75 L1557.19 1205.75 L1557.78 1205.75 L1558.36 1205.75 L1558.95 1205.75 L1559.54 1205.75 L1560.12 1205.75 L1560.71 1205.75 L1561.3 1205.75 L1561.88 1205.75 L1562.47 1205.75 L1563.06 1205.75 L1563.64 1205.75 L1564.23 1205.75 L1564.81 1205.75 L1565.4 1205.75 L1565.99 1205.75 L1566.57 1205.75 L1567.16 1205.75 L1567.75 1205.75 L1568.33 1205.75 L1568.92 1205.75 L1569.51 1205.75 L1570.09 1205.75 L1570.68 1205.75 L1571.27 1205.75 L1571.85 1205.75 L1572.44 1205.75 L1573.02 1205.75 L1573.61 1205.75 L1574.2 1205.75 L1574.78 1205.75 L1575.37 1205.75 L1575.96 1205.75 L1576.54 1205.75 L1577.13 1205.75 L1577.72 1205.75 L1578.3 1205.75 L1578.89 1205.75 L1579.47 1205.75 L1580.06 1205.75 L1580.65 1205.75 L1581.23 1205.75 L1581.82 1205.75 L1582.41 1205.75 L1582.99 1205.75 L1583.58 1205.75 L1584.17 1205.75 L1584.75 1205.75 L1585.34 1205.75 L1585.93 1205.75 L1586.51 1205.75 L1587.1 1205.75 L1587.68 1205.75 L1588.27 1205.75 L1588.86 1205.75 L1589.44 1205.75 L1590.03 1205.75 L1590.62 1205.75 L1591.2 1205.75 L1591.79 1205.75 L1592.38 1205.75 L1592.96 1205.75 L1593.55 1205.75 L1594.14 1205.75 L1594.72 1205.75 L1595.31 1205.75 L1595.89 1205.75 L1596.48 1205.75 L1597.07 1205.75 L1597.65 1205.75 L1598.24 1205.75 L1598.83 1205.75 L1599.41 1205.75 L1600 1205.75 L1600.59 1205.75 L1601.17 1205.75 L1601.76 1205.75 L1602.34 1205.75 L1602.93 1205.75 L1603.52 1205.75 L1604.1 1205.75 L1604.69 1205.75 L1605.28 1205.75 L1605.86 1205.75 L1606.45 1205.75 L1607.04 1205.75 L1607.62 1205.75 L1608.21 1205.75 L1608.8 1205.75 L1609.38 1205.75 L1609.97 1205.75 L1610.55 1205.75 L1611.14 1205.75 L1611.73 1205.75 L1612.31 1205.75 L1612.9 1205.75 L1613.49 1205.75 L1614.07 1205.75 L1614.66 1205.75 L1615.25 1205.75 L1615.83 1205.75 L1616.42 1205.75 L1617.01 1205.75 L1617.59 1205.75 L1618.18 1205.75 L1618.76 1205.75 L1619.35 1205.75 L1619.94 1205.75 L1620.52 1205.75 L1621.11 1205.75 L1621.7 1205.75 L1622.28 1205.75 L1622.87 1205.75 L1623.46 1205.75 L1624.04 1205.75 L1624.63 1205.75 L1625.22 1205.75 L1625.8 1205.75 L1626.39 1205.75 L1626.97 1205.75 L1627.56 1205.75 L1628.15 1205.75 L1628.73 1205.75 L1629.32 1205.75 L1629.91 1205.75 L1630.49 1205.75 L1631.08 1205.75 L1631.67 1205.75 L1632.25 1205.75 L1632.84 1205.75 L1633.42 1205.75 L1634.01 1205.75 L1634.6 1205.75 L1635.18 1205.75 L1635.77 1205.75 L1636.36 1205.75 L1636.94 1205.75 L1637.53 1205.75 L1638.12 1205.75 L1638.7 1205.75 L1639.29 1205.75 L1639.88 1205.75 L1640.46 1205.75 L1641.05 1205.75 L1641.63 1205.75 L1642.22 1205.75 L1642.81 1205.75 L1643.39 1205.75 L1643.98 1205.75 L1644.57 1205.75 L1645.15 1205.75 L1645.74 1205.75 L1646.33 1205.75 L1646.91 1205.75 L1647.5 1205.75 L1648.09 1205.75 L1648.67 1205.75 L1649.26 1205.75 L1649.84 1205.75 L1650.43 1205.75 L1651.02 1205.75 L1651.6 1205.75 L1652.19 1205.75 L1652.78 1205.75 L1653.36 1205.75 L1653.95 1205.75 L1654.54 1205.75 L1655.12 1205.75 L1655.71 1205.75 L1656.29 1205.75 L1656.88 1205.75 L1657.47 1205.75 L1658.05 1205.75 L1658.64 1205.75 L1659.23 1205.75 L1659.81 1205.75 L1660.4 1205.75 L1660.99 1205.75 L1661.57 1205.75 L1662.16 1205.75 L1662.75 1205.75 L1663.33 1205.75 L1663.92 1205.75 L1664.5 1205.75 L1665.09 1205.75 L1665.68 1205.75 L1666.26 1205.75 L1666.85 1205.75 L1667.44 1205.75 L1668.02 1205.75 L1668.61 1205.75 L1669.2 1205.75 L1669.78 1205.75 L1670.37 1205.75 L1670.96 1205.75 L1671.54 1205.75 L1672.13 1205.75 L1672.71 1205.75 L1673.3 1205.75 L1673.89 1205.75 L1674.47 1205.75 L1675.06 1205.75 L1675.65 1205.75 L1676.23 1205.75 L1676.82 1205.75 L1677.41 1205.75 L1677.99 1205.75 L1678.58 1205.75 L1679.17 1205.75 L1679.75 1205.75 L1680.34 1205.75 L1680.92 1205.75 L1681.51 1205.75 L1682.1 1205.75 L1682.68 1205.75 L1683.27 1205.75 L1683.86 1205.75 L1684.44 1205.75 L1685.03 1205.75 L1685.62 1205.75 L1686.2 1205.75 L1686.79 1205.75 L1687.37 1205.75 L1687.96 1205.75 L1688.55 1205.75 L1689.13 1205.75 L1689.72 1205.75 L1690.31 1205.75 L1690.89 1205.75 L1691.48 1205.75 L1692.07 1205.75 L1692.65 1205.75 L1693.24 1205.75 L1693.83 1205.75 L1694.41 1205.75 L1695 1205.75 L1695.58 1205.75 L1696.17 1205.75 L1696.76 1205.75 L1697.34 1205.75 L1697.93 1205.75 L1698.52 1205.75 L1699.1 1205.75 L1699.69 1205.75 L1700.28 1205.75 L1700.86 1205.75 L1701.45 1205.75 L1702.04 1205.75 L1702.62 1205.75 L1703.21 1205.75 L1703.79 1205.75 L1704.38 1205.75 L1704.97 1205.75 L1705.55 1205.75 L1706.14 1205.75 L1706.73 1205.75 L1707.31 1205.75 L1707.9 1205.75 L1708.49 1205.75 L1709.07 1205.75 L1709.66 1205.75 L1710.24 1205.75 L1710.83 1205.75 L1711.42 1205.75 L1712 1205.75 L1712.59 1205.75 L1713.18 1205.75 L1713.76 1205.75 L1714.35 1205.75 L1714.94 1205.75 L1715.52 1205.75 L1716.11 1205.75 L1716.7 1205.75 L1717.28 1205.75 L1717.87 1205.75 L1718.45 1205.75 L1719.04 1205.75 L1719.63 1205.75 L1720.21 1205.75 L1720.8 1205.75 L1721.39 1205.75 L1721.97 1205.75 L1722.56 1205.75 L1723.15 1205.75 L1723.73 1205.75 L1724.32 1205.75 L1724.91 1205.75 L1725.49 1205.75 L1726.08 1205.75 L1726.66 1205.75 L1727.25 1205.75 L1727.84 1205.75 L1728.42 1205.75 L1729.01 1205.75 L1729.6 1205.75 L1730.18 1205.75 L1730.77 1205.75 L1731.36 1205.75 L1731.94 1205.75 L1732.53 1205.75 L1733.11 1205.75 L1733.7 1205.75 L1734.29 1205.75 L1734.87 1205.75 L1735.46 1205.75 L1736.05 1205.75 L1736.63 1205.75 L1737.22 1205.75 L1737.81 1205.75 L1738.39 1205.75 L1738.98 1205.75 L1739.57 1205.75 L1740.15 1205.75 L1740.74 1205.75 L1741.32 1205.75 L1741.91 1205.75 L1742.5 1205.75 L1743.08 1205.75 L1743.67 1205.75 L1744.26 1205.75 L1744.84 1205.75 L1745.43 1205.75 L1746.02 1205.75 L1746.6 1205.75 L1747.19 1205.75 L1747.78 1205.75 L1748.36 1205.75 L1748.95 1205.75 L1749.53 1205.75 L1750.12 1205.75 L1750.71 1205.75 L1751.29 1205.75 L1751.88 1205.75 L1752.47 1205.75 L1753.05 1205.75 L1753.64 1205.75 L1754.23 1205.75 L1754.81 1205.75 L1755.4 1205.75 L1755.99 1205.75 L1756.57 1205.75 L1757.16 1205.75 L1757.74 1205.75 L1758.33 1205.75 L1758.92 1205.75 L1759.5 1205.75 L1760.09 1205.75 L1760.68 1205.75 L1761.26 1205.75 L1761.85 1205.75 L1762.44 1205.75 L1763.02 1205.75 L1763.61 1205.75 L1764.19 1205.75 L1764.78 1205.75 L1765.37 1205.75 L1765.95 1205.75 L1766.54 1205.75 L1767.13 1205.75 L1767.71 1205.75 L1768.3 1205.75 L1768.89 1205.75 L1769.47 1205.75 L1770.06 1205.75 L1770.65 1205.75 L1771.23 1205.75 L1771.82 1205.75 L1772.4 1205.75 L1772.99 1205.75 L1773.58 1205.75 L1774.16 1205.75 L1774.75 1205.75 L1775.34 1205.75 L1775.92 1205.75 L1776.51 1205.75 L1777.1 1205.75 L1777.68 1205.75 L1778.27 1205.75 L1778.86 1205.75 L1779.44 1205.75 L1780.03 1205.75 L1780.61 1205.75 L1781.2 1205.75 L1781.79 1205.75 L1782.37 1205.75 L1782.96 1205.75 L1783.55 1205.75 L1784.13 1205.75 L1784.72 1205.75 L1785.31 1205.75 L1785.89 1205.75 L1786.48 1205.75 L1787.06 1205.75 L1787.65 1205.75 L1788.24 1205.75 L1788.82 1205.75 L1789.41 1205.75 L1790 1205.75 L1790.58 1205.75 L1791.17 1205.75 L1791.76 1205.75 L1792.34 1205.75 L1792.93 1205.75 L1793.52 1205.75 L1794.1 1205.75 L1794.69 1205.75 L1795.27 1205.75 L1795.86 1205.75 L1796.45 1205.75 L1797.03 1205.75 L1797.62 1205.75 L1798.21 1205.75 L1798.79 1205.75 L1799.38 1205.75 L1799.97 1205.75 L1800.55 1205.75 L1801.14 1205.75 L1801.73 1205.75 L1802.31 1205.75 L1802.9 1205.75 L1803.48 1205.75 L1804.07 1205.75 L1804.66 1205.75 L1805.24 1205.75 L1805.83 1205.75 L1806.42 1205.75 L1807 1205.75 L1807.59 1205.75 L1808.18 1205.75 L1808.76 1205.75 L1809.35 1205.75 L1809.94 1205.75 L1810.52 1205.75 L1811.11 1205.75 L1811.69 1205.75 L1812.28 1205.75 L1812.87 1205.75 L1813.45 1205.75 L1814.04 1205.75 L1814.63 1205.75 L1815.21 1205.75 L1815.8 1205.75 L1816.39 1205.75 L1816.97 1205.75 L1817.56 1205.75 L1818.14 1205.75 L1818.73 1205.75 L1819.32 1205.75 L1819.9 1205.75 L1820.49 1205.75 L1821.08 1205.75 L1821.66 1205.75 L1822.25 1205.75 L1822.84 1205.75 L1823.42 1205.75 L1824.01 1205.75 L1824.6 1205.75 L1825.18 1205.75 L1825.77 1205.75 L1826.35 1205.75 L1826.94 1205.75 L1827.53 1205.75 L1828.11 1205.75 L1828.7 1205.75 L1829.29 1205.75 L1829.87 1205.75 L1830.46 1205.75 L1831.05 1205.75 L1831.63 1205.75 L1832.22 1205.75 L1832.81 1205.75 L1833.39 1205.75 L1833.98 1205.75 L1834.56 1205.75 L1835.15 1205.75 L1835.74 1205.75 L1836.32 1205.75 L1836.91 1205.75 L1837.5 1205.75 L1838.08 1205.75 L1838.67 1205.75 L1839.26 1205.75 L1839.84 1205.75 L1840.43 1205.75 L1841.01 1205.75 L1841.6 1205.75 L1842.19 1205.75 L1842.77 1205.75 L1843.36 1205.75 L1843.95 1205.75 L1844.53 1205.75 L1845.12 1205.75 L1845.71 1205.75 L1846.29 1205.75 L1846.88 1205.75 L1847.47 1205.75 L1848.05 1205.75 L1848.64 1205.75 L1849.22 1205.75 L1849.81 1205.75 L1850.4 1205.75 L1850.98 1205.75 L1851.57 1205.75 L1852.16 1205.75 L1852.74 1205.75 L1853.33 1205.75 L1853.92 1205.75 L1854.5 1205.75 L1855.09 1205.75 L1855.68 1205.75 L1856.26 1205.75 L1856.85 1205.75 L1857.43 1205.75 L1858.02 1205.75 L1858.61 1205.75 L1859.19 1205.75 L1859.78 1205.75 L1860.37 1205.75 L1860.95 1205.75 L1861.54 1205.75 L1862.13 1205.75 L1862.71 1205.75 L1863.3 1205.75 L1863.88 1205.75 L1864.47 1205.75 L1865.06 1205.75 L1865.64 1205.75 L1866.23 1205.75 L1866.82 1205.75 L1867.4 1205.75 L1867.99 1205.75 L1868.58 1205.75 L1869.16 1205.75 L1869.75 1205.75 L1870.34 1205.75 L1870.92 1205.75 L1871.51 1205.75 L1872.09 1205.75 L1872.68 1205.75 L1873.27 1205.75 L1873.85 1205.75 L1874.44 1205.75 L1875.03 1205.75 L1875.61 1205.75 L1876.2 1205.75 L1876.79 1205.75 L1877.37 1205.75 L1877.96 1205.75 L1878.55 1205.75 L1879.13 1205.75 L1879.72 1205.75 L1880.3 1205.75 L1880.89 1205.75 L1881.48 1205.75 L1882.06 1205.75 L1882.65 1205.75 L1883.24 1205.75 L1883.82 1205.75 L1884.41 1205.75 L1885 1205.75 L1885.58 1205.75 L1886.17 1205.75 L1886.76 1205.75 L1887.34 1205.75 L1887.93 1205.75 L1888.51 1205.75 L1889.1 1205.75 L1889.69 1205.75 L1890.27 1205.75 L1890.86 1205.75 L1891.45 1205.75 L1892.03 1205.75 L1892.62 1205.75 L1893.21 1205.75 L1893.79 1205.75 L1894.38 1205.75 L1894.96 1205.75 L1895.55 1205.75 L1896.14 1205.75 L1896.72 1205.75 L1897.31 1205.75 L1897.9 1205.75 L1898.48 1205.75 L1899.07 1205.75 L1899.66 1205.75 L1900.24 1205.75 L1900.83 1205.75 L1901.42 1205.75 L1902 1205.75 L1902.59 1205.75 L1903.17 1205.75 L1903.76 1205.75 L1904.35 1205.75 L1904.93 1205.75 L1905.52 1205.75 L1906.11 1205.75 L1906.69 1205.75 L1907.28 1205.75 L1907.87 1205.75 L1908.45 1205.75 L1909.04 1205.75 L1909.63 1205.75 L1910.21 1205.75 L1910.8 1205.75 L1911.38 1205.75 L1911.97 1205.75 L1912.56 1205.75 L1913.14 1205.75 L1913.73 1205.75 L1914.32 1205.75 L1914.9 1205.75 L1915.49 1205.75 L1916.08 1205.75 L1916.66 1205.75 L1917.25 1205.75 L1917.83 1205.75 L1918.42 1205.75 L1919.01 1205.75 L1919.59 1205.75 L1920.18 1205.75 L1920.77 1205.75 L1921.35 1205.75 L1921.94 1205.75 L1922.53 1205.75 L1923.11 1205.75 L1923.7 1205.75 L1924.29 1205.75 L1924.87 1205.75 L1925.46 1205.75 L1926.04 1205.75 L1926.63 1205.75 L1927.22 1205.75 L1927.8 1205.75 L1928.39 1205.75 L1928.98 1205.75 L1929.56 1205.75 L1930.15 1205.75 L1930.74 1205.75 L1931.32 1205.75 L1931.91 1205.75 L1932.5 1205.75 L1933.08 1205.75 L1933.67 1205.75 L1934.25 1205.75 L1934.84 1205.75 L1935.43 1205.75 L1936.01 1205.75 L1936.6 1205.75 L1937.19 1205.75 L1937.77 1205.75 L1938.36 1205.75 L1938.95 1205.75 L1939.53 1205.75 L1940.12 1205.75 L1940.71 1205.75 L1941.29 1205.75 L1941.88 1205.75 L1942.46 1205.75 L1943.05 1205.75 L1943.64 1205.75 L1944.22 1205.75 L1944.81 1205.75 L1945.4 1205.75 L1945.98 1205.75 L1946.57 1205.75 L1947.16 1205.75 L1947.74 1205.75 L1948.33 1205.75 L1948.91 1205.75 L1949.5 1205.75 L1950.09 1205.75 L1950.67 1205.75 L1951.26 1205.75 L1951.85 1205.75 L1952.43 1205.75 L1953.02 1205.75 L1953.61 1205.75 L1954.19 1205.75 L1954.78 1205.75 L1955.37 1205.75 L1955.95 1205.75 L1956.54 1205.75 L1957.12 1205.75 L1957.71 1205.75 L1958.3 1205.75 L1958.88 1205.75 L1959.47 1205.75 L1960.06 1205.75 L1960.64 1205.75 L1961.23 1205.75 L1961.82 1205.75 L1962.4 1205.75 L1962.99 1205.75 L1963.58 1205.75 L1964.16 1205.75 L1964.75 1205.75 L1965.33 1205.75 L1965.92 1205.75 L1966.51 1205.75 L1967.09 1205.75 L1967.68 1205.75 L1968.27 1205.75 L1968.85 1205.75 L1969.44 1205.75 L1970.03 1205.75 L1970.61 1205.75 L1971.2 1205.75 L1971.78 1205.75 L1972.37 1205.75 L1972.96 1205.75 L1973.54 1205.75 L1974.13 1205.75 L1974.72 1205.75 L1975.3 1205.75 L1975.89 1205.75 L1976.48 1205.75 L1977.06 1205.75 L1977.65 1205.75 L1978.24 1205.75 L1978.82 1205.75 L1979.41 1205.75 L1979.99 1205.75 L1980.58 1205.75 L1981.17 1205.75 L1981.75 1205.75 L1982.34 1205.75 L1982.93 1205.75 L1983.51 1205.75 L1984.1 1205.75 L1984.69 1205.75 L1985.27 1205.75 L1985.86 1205.75 L1986.45 1205.75 L1987.03 1205.75 L1987.62 1205.75 L1988.2 1205.75 L1988.79 1205.75 L1989.38 1205.75 L1989.96 1205.75 L1990.55 1205.75 L1991.14 1205.75 L1991.72 1205.75 L1992.31 1205.75 L1992.9 1205.75 L1993.48 1205.75 L1994.07 1205.75 L1994.65 1205.75 L1995.24 1205.75 L1995.83 1205.75 L1996.41 1205.75 L1997 1205.75 L1997.59 1205.75 L1998.17 1205.75 L1998.76 1205.75 L1999.35 1205.75 L1999.93 1205.75 L2000.52 1205.75 L2001.11 1205.75 L2001.69 1205.75 L2002.28 1205.75 L2002.86 1205.75 L2003.45 1205.75 L2004.04 1205.75 L2004.62 1205.75 L2005.21 1205.75 L2005.8 1205.75 L2006.38 1205.75 L2006.97 1205.75 L2007.56 1205.75 L2008.14 1205.75 L2008.73 1205.75 L2009.32 1205.75 L2009.9 1205.75 L2010.49 1205.75 L2011.07 1205.75 L2011.66 1205.75 L2012.25 1205.75 L2012.83 1205.75 L2013.42 1205.75 L2014.01 1205.75 L2014.59 1205.75 L2015.18 1205.75 L2015.77 1205.75 L2016.35 1205.75 L2016.94 1205.75 L2017.53 1205.75 L2018.11 1205.75 L2018.7 1205.75 L2019.28 1205.75 L2019.87 1205.75 L2020.46 1205.75 L2021.04 1205.75 L2021.63 1205.75 L2022.22 1205.75 L2022.8 1205.75 L2023.39 1205.75 L2023.98 1205.75 L2024.56 1205.75 L2025.15 1205.75 L2025.73 1205.75 L2026.32 1205.75 L2026.91 1205.75 L2027.49 1205.75 L2028.08 1205.75 L2028.67 1205.75 L2029.25 1205.75 L2029.84 1205.75 L2030.43 1205.75 L2031.01 1205.75 L2031.6 1205.75 L2032.19 1205.75 L2032.77 1205.75 L2033.36 1205.75 L2033.94 1205.75 L2034.53 1205.75 L2035.12 1205.75 L2035.7 1205.75 L2036.29 1205.75 L2036.88 1205.75 L2037.46 1205.75 L2038.05 1205.75 L2038.64 1205.75 L2039.22 1205.75 L2039.81 1205.75 L2040.4 1205.75 L2040.98 1205.75 L2041.57 1205.75 L2042.15 1205.75 L2042.74 1205.75 L2043.33 1205.75 L2043.91 1205.75 L2044.5 1205.75 L2045.09 1205.75 L2045.67 1205.75 L2046.26 1205.75 L2046.85 1205.75 L2047.43 1205.75 L2048.02 1205.75 L2048.6 1205.75 L2049.19 1205.75 L2049.78 1205.75 L2050.36 1205.75 L2050.95 1205.75 L2051.54 1205.75 L2052.12 1205.75 L2052.71 1205.75 L2053.3 1205.75 L2053.88 1205.75 L2054.47 1205.75 L2055.06 1205.75 L2055.64 1205.75 L2056.23 1205.75 L2056.81 1205.75 L2057.4 1205.75 L2057.99 1205.75 L2058.57 1205.75 L2059.16 1205.75 L2059.75 1205.75 L2060.33 1205.75 L2060.92 1205.75 L2061.51 1205.75 L2062.09 1205.75 L2062.68 1205.75 L2063.27 1205.75 L2063.85 1205.75 L2064.44 1205.75 L2065.02 1205.75 L2065.61 1205.75 L2066.2 1205.75 L2066.78 1205.75 L2067.37 1205.75 L2067.96 1205.75 L2068.54 1205.75 L2069.13 1205.75 L2069.72 1205.75 L2070.3 1205.75 L2070.89 1205.75 L2071.48 1205.75 L2072.06 1205.75 L2072.65 1205.75 L2073.23 1205.75 L2073.82 1205.75 L2074.41 1205.75 L2074.99 1205.75 L2075.58 1205.75 L2076.17 1205.75 L2076.75 1205.75 L2077.34 1205.75 L2077.93 1205.75 L2078.51 1205.75 L2079.1 1205.75 L2079.68 1205.75 L2080.27 1205.75 L2080.86 1205.75 L2081.44 1205.75 L2082.03 1205.75 L2082.62 1205.75 L2083.2 1205.75 L2083.79 1205.75 L2084.38 1205.75 L2084.96 1205.75 L2085.55 1205.75 L2086.14 1205.75 L2086.72 1205.75 L2087.31 1205.75 L2087.89 1205.75 L2088.48 1205.75 L2089.07 1205.75 L2089.65 1205.75 L2090.24 1205.75 L2090.83 1205.75 L2091.41 1205.75 L2092 1205.75 L2092.59 1205.75 L2093.17 1205.75 L2093.76 1205.75 L2094.35 1205.75 L2094.93 1205.75 L2095.52 1205.75 L2096.1 1205.75 L2096.69 1205.75 L2097.28 1205.75 L2097.86 1205.75 L2098.45 1205.75 L2099.04 1205.75 L2099.62 1205.75 L2100.21 1205.75 L2100.8 1205.75 L2101.38 1205.75 L2101.97 1205.75 L2102.55 1205.75 L2103.14 1205.75 L2103.73 1205.75 L2104.31 1205.75 L2104.9 1205.75 L2105.49 1205.75 L2106.07 1205.75 L2106.66 1205.75 L2107.25 1205.75 L2107.83 1205.75 L2108.42 1205.75 L2109.01 1205.75 L2109.59 1205.75 L2110.18 1205.75 L2110.76 1205.75 L2111.35 1205.75 L2111.94 1205.75 L2112.52 1205.75 L2113.11 1205.75 L2113.7 1205.75 L2114.28 1205.75 L2114.87 1205.75 L2115.46 1205.75 L2116.04 1205.75 L2116.63 1205.75 L2117.22 1205.75 L2117.8 1205.75 L2118.39 1205.75 L2118.97 1205.75 L2119.56 1205.75 L2120.15 1205.75 L2120.73 1205.75 L2121.32 1205.75 L2121.91 1205.75 L2122.49 1205.75 L2123.08 1205.75 L2123.67 1205.75 L2124.25 1205.75 L2124.84 1205.75 L2125.42 1205.75 L2126.01 1205.75 L2126.6 1205.75 L2127.18 1205.75 L2127.77 1205.75 L2128.36 1205.75 L2128.94 1205.75 L2129.53 1205.75 L2130.12 1205.75 L2130.7 1205.75 L2131.29 1205.75 L2131.88 1205.75 L2132.46 1205.75 L2133.05 1205.75 L2133.63 1205.75 L2134.22 1205.75 L2134.81 1205.75 L2135.39 1205.75 L2135.98 1205.75 L2136.57 1205.75 L2137.15 1205.75 L2137.74 1205.75 L2138.33 1205.75 L2138.91 1205.75 L2139.5 1205.75 L2140.09 1205.75 L2140.67 1205.75 L2141.26 1205.75 L2141.84 1205.75 L2142.43 1205.75 L2143.02 1205.75 L2143.6 1205.75 L2144.19 1205.75 L2144.78 1205.75 L2145.36 1205.75 L2145.95 1205.75 L2146.54 1205.75 L2147.12 1205.75 L2147.71 1205.75 L2148.3 1205.75 L2148.88 1205.75 L2149.47 1205.75 L2150.05 1205.75 L2150.64 1205.75 L2151.23 1205.75 L2151.81 1205.75 L2152.4 1205.75 L2152.99 1205.75 L2153.57 1205.75 L2154.16 1205.75 L2154.75 1205.75 L2155.33 1205.75 L2155.92 1205.75 L2156.5 1205.75 L2157.09 1205.75 L2157.68 1205.75 L2158.26 1205.75 L2158.26 1205.61 L2157.68 1205.61 L2157.09 1205.61 L2156.5 1205.61 L2155.92 1205.61 L2155.33 1205.61 L2154.75 1205.61 L2154.16 1205.61 L2153.57 1205.61 L2152.99 1205.61 L2152.4 1205.61 L2151.81 1205.61 L2151.23 1205.61 L2150.64 1205.61 L2150.05 1205.61 L2149.47 1205.61 L2148.88 1205.61 L2148.3 1205.61 L2147.71 1205.61 L2147.12 1205.61 L2146.54 1205.61 L2145.95 1205.61 L2145.36 1205.61 L2144.78 1205.61 L2144.19 1205.61 L2143.6 1205.61 L2143.02 1205.61 L2142.43 1205.61 L2141.84 1205.61 L2141.26 1205.61 L2140.67 1205.61 L2140.09 1205.61 L2139.5 1205.61 L2138.91 1205.61 L2138.33 1205.61 L2137.74 1205.61 L2137.15 1205.61 L2136.57 1205.61 L2135.98 1205.61 L2135.39 1205.61 L2134.81 1205.61 L2134.22 1205.61 L2133.63 1205.61 L2133.05 1205.61 L2132.46 1205.61 L2131.88 1205.61 L2131.29 1205.61 L2130.7 1205.61 L2130.12 1205.61 L2129.53 1205.61 L2128.94 1205.61 L2128.36 1205.61 L2127.77 1205.61 L2127.18 1205.61 L2126.6 1205.61 L2126.01 1205.61 L2125.42 1205.61 L2124.84 1205.61 L2124.25 1205.61 L2123.67 1205.61 L2123.08 1205.61 L2122.49 1205.61 L2121.91 1205.61 L2121.32 1205.61 L2120.73 1205.61 L2120.15 1205.61 L2119.56 1205.61 L2118.97 1205.61 L2118.39 1205.61 L2117.8 1205.61 L2117.22 1205.61 L2116.63 1205.61 L2116.04 1205.61 L2115.46 1205.61 L2114.87 1205.61 L2114.28 1205.61 L2113.7 1205.61 L2113.11 1205.61 L2112.52 1205.61 L2111.94 1205.61 L2111.35 1205.61 L2110.76 1205.61 L2110.18 1205.61 L2109.59 1205.61 L2109.01 1205.61 L2108.42 1205.61 L2107.83 1205.61 L2107.25 1205.61 L2106.66 1205.61 L2106.07 1205.61 L2105.49 1205.61 L2104.9 1205.61 L2104.31 1205.61 L2103.73 1205.61 L2103.14 1205.61 L2102.55 1205.61 L2101.97 1205.61 L2101.38 1205.61 L2100.8 1205.61 L2100.21 1205.61 L2099.62 1205.61 L2099.04 1205.61 L2098.45 1205.61 L2097.86 1205.61 L2097.28 1205.61 L2096.69 1205.61 L2096.1 1205.61 L2095.52 1205.61 L2094.93 1205.61 L2094.35 1205.61 L2093.76 1205.61 L2093.17 1205.61 L2092.59 1205.61 L2092 1205.61 L2091.41 1205.61 L2090.83 1205.61 L2090.24 1205.61 L2089.65 1205.61 L2089.07 1205.61 L2088.48 1205.61 L2087.89 1205.61 L2087.31 1205.61 L2086.72 1205.61 L2086.14 1205.61 L2085.55 1205.61 L2084.96 1205.61 L2084.38 1205.61 L2083.79 1205.61 L2083.2 1205.61 L2082.62 1205.61 L2082.03 1205.61 L2081.44 1205.61 L2080.86 1205.61 L2080.27 1205.61 L2079.68 1205.61 L2079.1 1205.61 L2078.51 1205.61 L2077.93 1205.61 L2077.34 1205.61 L2076.75 1205.61 L2076.17 1205.61 L2075.58 1205.61 L2074.99 1205.61 L2074.41 1205.61 L2073.82 1205.61 L2073.23 1205.61 L2072.65 1205.61 L2072.06 1205.61 L2071.48 1205.61 L2070.89 1205.61 L2070.3 1205.61 L2069.72 1205.61 L2069.13 1205.61 L2068.54 1205.61 L2067.96 1205.61 L2067.37 1205.61 L2066.78 1205.61 L2066.2 1205.61 L2065.61 1205.61 L2065.02 1205.61 L2064.44 1205.61 L2063.85 1205.61 L2063.27 1205.61 L2062.68 1205.61 L2062.09 1205.61 L2061.51 1205.61 L2060.92 1205.61 L2060.33 1205.61 L2059.75 1205.61 L2059.16 1205.61 L2058.57 1205.61 L2057.99 1205.61 L2057.4 1205.61 L2056.81 1205.61 L2056.23 1205.61 L2055.64 1205.61 L2055.06 1205.61 L2054.47 1205.61 L2053.88 1205.61 L2053.3 1205.61 L2052.71 1205.61 L2052.12 1205.61 L2051.54 1205.61 L2050.95 1205.61 L2050.36 1205.61 L2049.78 1205.61 L2049.19 1205.61 L2048.6 1205.61 L2048.02 1205.61 L2047.43 1205.61 L2046.85 1205.61 L2046.26 1205.61 L2045.67 1205.61 L2045.09 1205.61 L2044.5 1205.61 L2043.91 1205.61 L2043.33 1205.61 L2042.74 1205.61 L2042.15 1205.61 L2041.57 1205.61 L2040.98 1205.61 L2040.4 1205.61 L2039.81 1205.61 L2039.22 1205.61 L2038.64 1205.61 L2038.05 1205.61 L2037.46 1205.61 L2036.88 1205.61 L2036.29 1205.61 L2035.7 1205.61 L2035.12 1205.61 L2034.53 1205.61 L2033.94 1205.61 L2033.36 1205.61 L2032.77 1205.61 L2032.19 1205.61 L2031.6 1205.61 L2031.01 1205.61 L2030.43 1205.61 L2029.84 1205.61 L2029.25 1205.61 L2028.67 1205.61 L2028.08 1205.61 L2027.49 1205.61 L2026.91 1205.61 L2026.32 1205.61 L2025.73 1205.61 L2025.15 1205.61 L2024.56 1205.61 L2023.98 1205.61 L2023.39 1205.61 L2022.8 1205.61 L2022.22 1205.61 L2021.63 1205.61 L2021.04 1205.61 L2020.46 1205.61 L2019.87 1205.61 L2019.28 1205.61 L2018.7 1205.61 L2018.11 1205.61 L2017.53 1205.61 L2016.94 1205.61 L2016.35 1205.61 L2015.77 1205.61 L2015.18 1205.61 L2014.59 1205.61 L2014.01 1205.61 L2013.42 1205.61 L2012.83 1205.61 L2012.25 1205.61 L2011.66 1205.61 L2011.07 1205.61 L2010.49 1205.61 L2009.9 1205.61 L2009.32 1205.61 L2008.73 1205.61 L2008.14 1205.61 L2007.56 1205.61 L2006.97 1205.61 L2006.38 1205.61 L2005.8 1205.61 L2005.21 1205.61 L2004.62 1205.61 L2004.04 1205.61 L2003.45 1205.61 L2002.86 1205.61 L2002.28 1205.61 L2001.69 1205.61 L2001.11 1205.61 L2000.52 1205.61 L1999.93 1205.61 L1999.35 1205.61 L1998.76 1205.61 L1998.17 1205.61 L1997.59 1205.61 L1997 1205.61 L1996.41 1205.61 L1995.83 1205.61 L1995.24 1205.61 L1994.65 1205.61 L1994.07 1205.61 L1993.48 1205.61 L1992.9 1205.61 L1992.31 1205.61 L1991.72 1205.61 L1991.14 1205.61 L1990.55 1205.61 L1989.96 1205.61 L1989.38 1205.61 L1988.79 1205.61 L1988.2 1205.61 L1987.62 1205.61 L1987.03 1205.61 L1986.45 1205.61 L1985.86 1205.61 L1985.27 1205.61 L1984.69 1205.61 L1984.1 1205.61 L1983.51 1205.61 L1982.93 1205.61 L1982.34 1205.61 L1981.75 1205.61 L1981.17 1205.61 L1980.58 1205.61 L1979.99 1205.61 L1979.41 1205.61 L1978.82 1205.61 L1978.24 1205.61 L1977.65 1205.61 L1977.06 1205.61 L1976.48 1205.61 L1975.89 1205.61 L1975.3 1205.61 L1974.72 1205.61 L1974.13 1205.61 L1973.54 1205.61 L1972.96 1205.61 L1972.37 1205.61 L1971.78 1205.61 L1971.2 1205.61 L1970.61 1205.61 L1970.03 1205.61 L1969.44 1205.61 L1968.85 1205.61 L1968.27 1205.61 L1967.68 1205.61 L1967.09 1205.61 L1966.51 1205.61 L1965.92 1205.61 L1965.33 1205.61 L1964.75 1205.61 L1964.16 1205.61 L1963.58 1205.61 L1962.99 1205.61 L1962.4 1205.61 L1961.82 1205.61 L1961.23 1205.61 L1960.64 1205.61 L1960.06 1205.61 L1959.47 1205.61 L1958.88 1205.61 L1958.3 1205.61 L1957.71 1205.61 L1957.12 1205.61 L1956.54 1205.61 L1955.95 1205.61 L1955.37 1205.61 L1954.78 1205.61 L1954.19 1205.61 L1953.61 1205.61 L1953.02 1205.61 L1952.43 1205.61 L1951.85 1205.61 L1951.26 1205.61 L1950.67 1205.61 L1950.09 1205.61 L1949.5 1205.61 L1948.91 1205.61 L1948.33 1205.61 L1947.74 1205.61 L1947.16 1205.61 L1946.57 1205.61 L1945.98 1205.61 L1945.4 1205.61 L1944.81 1205.61 L1944.22 1205.61 L1943.64 1205.61 L1943.05 1205.61 L1942.46 1205.61 L1941.88 1205.61 L1941.29 1205.61 L1940.71 1205.61 L1940.12 1205.61 L1939.53 1205.61 L1938.95 1205.61 L1938.36 1205.61 L1937.77 1205.61 L1937.19 1205.61 L1936.6 1205.61 L1936.01 1205.61 L1935.43 1205.61 L1934.84 1205.61 L1934.25 1205.61 L1933.67 1205.61 L1933.08 1205.61 L1932.5 1205.61 L1931.91 1205.61 L1931.32 1205.61 L1930.74 1205.61 L1930.15 1205.61 L1929.56 1205.61 L1928.98 1205.61 L1928.39 1205.61 L1927.8 1205.61 L1927.22 1205.61 L1926.63 1205.61 L1926.04 1205.61 L1925.46 1205.61 L1924.87 1205.61 L1924.29 1205.61 L1923.7 1205.61 L1923.11 1205.61 L1922.53 1205.61 L1921.94 1205.61 L1921.35 1205.61 L1920.77 1205.61 L1920.18 1205.61 L1919.59 1205.61 L1919.01 1205.61 L1918.42 1205.61 L1917.83 1205.61 L1917.25 1205.61 L1916.66 1205.61 L1916.08 1205.61 L1915.49 1205.61 L1914.9 1205.61 L1914.32 1205.61 L1913.73 1205.61 L1913.14 1205.61 L1912.56 1205.61 L1911.97 1205.61 L1911.38 1205.61 L1910.8 1205.61 L1910.21 1205.61 L1909.63 1205.61 L1909.04 1205.61 L1908.45 1205.61 L1907.87 1205.61 L1907.28 1205.61 L1906.69 1205.61 L1906.11 1205.61 L1905.52 1205.61 L1904.93 1205.61 L1904.35 1205.61 L1903.76 1205.61 L1903.17 1205.61 L1902.59 1205.61 L1902 1205.61 L1901.42 1205.61 L1900.83 1205.61 L1900.24 1205.61 L1899.66 1205.61 L1899.07 1205.61 L1898.48 1205.61 L1897.9 1205.61 L1897.31 1205.61 L1896.72 1205.61 L1896.14 1205.61 L1895.55 1205.61 L1894.96 1205.61 L1894.38 1205.61 L1893.79 1205.61 L1893.21 1205.61 L1892.62 1205.61 L1892.03 1205.61 L1891.45 1205.61 L1890.86 1205.61 L1890.27 1205.61 L1889.69 1205.61 L1889.1 1205.61 L1888.51 1205.61 L1887.93 1205.61 L1887.34 1205.61 L1886.76 1205.61 L1886.17 1205.61 L1885.58 1205.61 L1885 1205.61 L1884.41 1205.61 L1883.82 1205.61 L1883.24 1205.61 L1882.65 1205.61 L1882.06 1205.61 L1881.48 1205.61 L1880.89 1205.61 L1880.3 1205.61 L1879.72 1205.61 L1879.13 1205.61 L1878.55 1205.61 L1877.96 1205.61 L1877.37 1205.61 L1876.79 1205.61 L1876.2 1205.61 L1875.61 1205.61 L1875.03 1205.61 L1874.44 1205.61 L1873.85 1205.61 L1873.27 1205.61 L1872.68 1205.61 L1872.09 1205.61 L1871.51 1205.61 L1870.92 1205.61 L1870.34 1205.61 L1869.75 1205.61 L1869.16 1205.61 L1868.58 1205.61 L1867.99 1205.61 L1867.4 1205.61 L1866.82 1205.61 L1866.23 1205.61 L1865.64 1205.61 L1865.06 1205.61 L1864.47 1205.61 L1863.88 1205.61 L1863.3 1205.61 L1862.71 1205.61 L1862.13 1205.61 L1861.54 1205.61 L1860.95 1205.61 L1860.37 1205.61 L1859.78 1205.61 L1859.19 1205.61 L1858.61 1205.61 L1858.02 1205.61 L1857.43 1205.61 L1856.85 1205.61 L1856.26 1205.61 L1855.68 1205.61 L1855.09 1205.61 L1854.5 1205.61 L1853.92 1205.61 L1853.33 1205.61 L1852.74 1205.61 L1852.16 1205.61 L1851.57 1205.61 L1850.98 1205.61 L1850.4 1205.61 L1849.81 1205.61 L1849.22 1205.61 L1848.64 1205.61 L1848.05 1205.61 L1847.47 1205.61 L1846.88 1205.61 L1846.29 1205.61 L1845.71 1205.61 L1845.12 1205.61 L1844.53 1205.61 L1843.95 1205.61 L1843.36 1205.61 L1842.77 1205.61 L1842.19 1205.61 L1841.6 1205.61 L1841.01 1205.61 L1840.43 1205.61 L1839.84 1205.61 L1839.26 1205.61 L1838.67 1205.61 L1838.08 1205.61 L1837.5 1205.61 L1836.91 1205.61 L1836.32 1205.61 L1835.74 1205.61 L1835.15 1205.61 L1834.56 1205.61 L1833.98 1205.61 L1833.39 1205.61 L1832.81 1205.61 L1832.22 1205.61 L1831.63 1205.61 L1831.05 1205.61 L1830.46 1205.61 L1829.87 1205.61 L1829.29 1205.61 L1828.7 1205.61 L1828.11 1205.61 L1827.53 1205.61 L1826.94 1205.61 L1826.35 1205.61 L1825.77 1205.61 L1825.18 1205.61 L1824.6 1205.61 L1824.01 1205.61 L1823.42 1205.61 L1822.84 1205.61 L1822.25 1205.61 L1821.66 1205.61 L1821.08 1205.61 L1820.49 1205.61 L1819.9 1205.61 L1819.32 1205.61 L1818.73 1205.61 L1818.14 1205.61 L1817.56 1205.61 L1816.97 1205.61 L1816.39 1205.61 L1815.8 1205.61 L1815.21 1205.61 L1814.63 1205.61 L1814.04 1205.61 L1813.45 1205.61 L1812.87 1205.61 L1812.28 1205.61 L1811.69 1205.61 L1811.11 1205.61 L1810.52 1205.61 L1809.94 1205.61 L1809.35 1205.61 L1808.76 1205.61 L1808.18 1205.61 L1807.59 1205.61 L1807 1205.61 L1806.42 1205.61 L1805.83 1205.61 L1805.24 1205.61 L1804.66 1205.61 L1804.07 1205.61 L1803.48 1205.61 L1802.9 1205.61 L1802.31 1205.61 L1801.73 1205.61 L1801.14 1205.61 L1800.55 1205.61 L1799.97 1205.61 L1799.38 1205.61 L1798.79 1205.61 L1798.21 1205.61 L1797.62 1205.61 L1797.03 1205.61 L1796.45 1205.61 L1795.86 1205.61 L1795.27 1205.61 L1794.69 1205.61 L1794.1 1205.61 L1793.52 1205.61 L1792.93 1205.61 L1792.34 1205.61 L1791.76 1205.61 L1791.17 1205.61 L1790.58 1205.61 L1790 1205.61 L1789.41 1205.61 L1788.82 1205.61 L1788.24 1205.61 L1787.65 1205.61 L1787.06 1205.61 L1786.48 1205.61 L1785.89 1205.61 L1785.31 1205.61 L1784.72 1205.61 L1784.13 1205.61 L1783.55 1205.61 L1782.96 1205.61 L1782.37 1205.61 L1781.79 1205.61 L1781.2 1205.61 L1780.61 1205.61 L1780.03 1205.61 L1779.44 1205.61 L1778.86 1205.61 L1778.27 1205.61 L1777.68 1205.61 L1777.1 1205.61 L1776.51 1205.61 L1775.92 1205.61 L1775.34 1205.61 L1774.75 1205.61 L1774.16 1205.61 L1773.58 1205.61 L1772.99 1205.61 L1772.4 1205.61 L1771.82 1205.61 L1771.23 1205.61 L1770.65 1205.61 L1770.06 1205.61 L1769.47 1205.61 L1768.89 1205.61 L1768.3 1205.61 L1767.71 1205.61 L1767.13 1205.61 L1766.54 1205.61 L1765.95 1205.61 L1765.37 1205.61 L1764.78 1205.61 L1764.19 1205.61 L1763.61 1205.61 L1763.02 1205.61 L1762.44 1205.61 L1761.85 1205.61 L1761.26 1205.61 L1760.68 1205.61 L1760.09 1205.61 L1759.5 1205.61 L1758.92 1205.61 L1758.33 1205.61 L1757.74 1205.61 L1757.16 1205.61 L1756.57 1205.61 L1755.99 1205.61 L1755.4 1205.61 L1754.81 1205.61 L1754.23 1205.61 L1753.64 1205.61 L1753.05 1205.61 L1752.47 1205.61 L1751.88 1205.61 L1751.29 1205.61 L1750.71 1205.61 L1750.12 1205.61 L1749.53 1205.61 L1748.95 1205.61 L1748.36 1205.61 L1747.78 1205.61 L1747.19 1205.61 L1746.6 1205.61 L1746.02 1205.61 L1745.43 1205.61 L1744.84 1205.61 L1744.26 1205.61 L1743.67 1205.61 L1743.08 1205.61 L1742.5 1205.61 L1741.91 1205.61 L1741.32 1205.61 L1740.74 1205.61 L1740.15 1205.61 L1739.57 1205.61 L1738.98 1205.61 L1738.39 1205.61 L1737.81 1205.61 L1737.22 1205.61 L1736.63 1205.61 L1736.05 1205.61 L1735.46 1205.61 L1734.87 1205.61 L1734.29 1205.61 L1733.7 1205.61 L1733.11 1205.61 L1732.53 1205.61 L1731.94 1205.61 L1731.36 1205.61 L1730.77 1205.61 L1730.18 1205.61 L1729.6 1205.61 L1729.01 1205.61 L1728.42 1205.61 L1727.84 1205.61 L1727.25 1205.61 L1726.66 1205.61 L1726.08 1205.61 L1725.49 1205.61 L1724.91 1205.61 L1724.32 1205.61 L1723.73 1205.61 L1723.15 1205.61 L1722.56 1205.61 L1721.97 1205.61 L1721.39 1205.61 L1720.8 1205.61 L1720.21 1205.61 L1719.63 1205.61 L1719.04 1205.61 L1718.45 1205.61 L1717.87 1205.61 L1717.28 1205.61 L1716.7 1205.61 L1716.11 1205.61 L1715.52 1205.61 L1714.94 1205.61 L1714.35 1205.61 L1713.76 1205.61 L1713.18 1205.61 L1712.59 1205.61 L1712 1205.61 L1711.42 1205.61 L1710.83 1205.61 L1710.24 1205.61 L1709.66 1205.61 L1709.07 1205.61 L1708.49 1205.61 L1707.9 1205.61 L1707.31 1205.61 L1706.73 1205.61 L1706.14 1205.61 L1705.55 1205.61 L1704.97 1205.61 L1704.38 1205.61 L1703.79 1205.61 L1703.21 1205.61 L1702.62 1205.61 L1702.04 1205.61 L1701.45 1205.61 L1700.86 1205.61 L1700.28 1205.61 L1699.69 1205.61 L1699.1 1205.61 L1698.52 1205.61 L1697.93 1205.61 L1697.34 1205.61 L1696.76 1205.61 L1696.17 1205.61 L1695.58 1205.61 L1695 1205.61 L1694.41 1205.61 L1693.83 1205.61 L1693.24 1205.61 L1692.65 1205.61 L1692.07 1205.61 L1691.48 1205.61 L1690.89 1205.61 L1690.31 1205.61 L1689.72 1205.61 L1689.13 1205.61 L1688.55 1205.61 L1687.96 1205.61 L1687.37 1205.61 L1686.79 1205.61 L1686.2 1205.61 L1685.62 1205.61 L1685.03 1205.61 L1684.44 1205.61 L1683.86 1205.61 L1683.27 1205.61 L1682.68 1205.61 L1682.1 1205.61 L1681.51 1205.61 L1680.92 1205.61 L1680.34 1205.61 L1679.75 1205.61 L1679.17 1205.61 L1678.58 1205.61 L1677.99 1205.61 L1677.41 1205.61 L1676.82 1205.61 L1676.23 1205.61 L1675.65 1205.61 L1675.06 1205.61 L1674.47 1205.61 L1673.89 1205.61 L1673.3 1205.61 L1672.71 1205.61 L1672.13 1205.61 L1671.54 1205.61 L1670.96 1205.61 L1670.37 1205.61 L1669.78 1205.61 L1669.2 1205.61 L1668.61 1205.61 L1668.02 1205.61 L1667.44 1205.61 L1666.85 1205.61 L1666.26 1205.61 L1665.68 1205.61 L1665.09 1205.61 L1664.5 1205.61 L1663.92 1205.61 L1663.33 1205.61 L1662.75 1205.61 L1662.16 1205.61 L1661.57 1205.61 L1660.99 1205.61 L1660.4 1205.61 L1659.81 1205.61 L1659.23 1205.61 L1658.64 1205.61 L1658.05 1205.61 L1657.47 1205.61 L1656.88 1205.61 L1656.29 1205.61 L1655.71 1205.61 L1655.12 1205.61 L1654.54 1205.61 L1653.95 1205.61 L1653.36 1205.61 L1652.78 1205.61 L1652.19 1205.61 L1651.6 1205.61 L1651.02 1205.61 L1650.43 1205.61 L1649.84 1205.61 L1649.26 1205.61 L1648.67 1205.61 L1648.09 1205.61 L1647.5 1205.61 L1646.91 1205.61 L1646.33 1205.61 L1645.74 1205.61 L1645.15 1205.61 L1644.57 1205.61 L1643.98 1205.61 L1643.39 1205.61 L1642.81 1205.61 L1642.22 1205.61 L1641.63 1205.61 L1641.05 1205.61 L1640.46 1205.61 L1639.88 1205.61 L1639.29 1205.61 L1638.7 1205.61 L1638.12 1205.61 L1637.53 1205.61 L1636.94 1205.61 L1636.36 1205.61 L1635.77 1205.61 L1635.18 1205.61 L1634.6 1205.61 L1634.01 1205.61 L1633.42 1205.61 L1632.84 1205.61 L1632.25 1205.61 L1631.67 1205.61 L1631.08 1205.61 L1630.49 1205.61 L1629.91 1205.61 L1629.32 1205.61 L1628.73 1205.61 L1628.15 1205.61 L1627.56 1205.61 L1626.97 1205.61 L1626.39 1205.61 L1625.8 1205.61 L1625.22 1205.61 L1624.63 1205.61 L1624.04 1205.61 L1623.46 1205.61 L1622.87 1205.61 L1622.28 1205.61 L1621.7 1205.61 L1621.11 1205.61 L1620.52 1205.61 L1619.94 1205.61 L1619.35 1205.61 L1618.76 1205.61 L1618.18 1205.61 L1617.59 1205.61 L1617.01 1205.61 L1616.42 1205.61 L1615.83 1205.61 L1615.25 1205.61 L1614.66 1205.61 L1614.07 1205.61 L1613.49 1205.61 L1612.9 1205.61 L1612.31 1205.61 L1611.73 1205.61 L1611.14 1205.61 L1610.55 1205.61 L1609.97 1205.61 L1609.38 1205.61 L1608.8 1205.61 L1608.21 1205.61 L1607.62 1205.61 L1607.04 1205.61 L1606.45 1205.61 L1605.86 1205.61 L1605.28 1205.61 L1604.69 1205.61 L1604.1 1205.61 L1603.52 1205.61 L1602.93 1205.61 L1602.34 1205.61 L1601.76 1205.61 L1601.17 1205.61 L1600.59 1205.61 L1600 1205.61 L1599.41 1205.61 L1598.83 1205.61 L1598.24 1205.61 L1597.65 1205.61 L1597.07 1205.61 L1596.48 1205.61 L1595.89 1205.61 L1595.31 1205.61 L1594.72 1205.61 L1594.14 1205.61 L1593.55 1205.61 L1592.96 1205.61 L1592.38 1205.61 L1591.79 1205.61 L1591.2 1205.61 L1590.62 1205.61 L1590.03 1205.61 L1589.44 1205.61 L1588.86 1205.61 L1588.27 1205.61 L1587.68 1205.61 L1587.1 1205.61 L1586.51 1205.61 L1585.93 1205.61 L1585.34 1205.61 L1584.75 1205.61 L1584.17 1205.61 L1583.58 1205.61 L1582.99 1205.61 L1582.41 1205.61 L1581.82 1205.61 L1581.23 1205.61 L1580.65 1205.61 L1580.06 1205.61 L1579.47 1205.61 L1578.89 1205.61 L1578.3 1205.61 L1577.72 1205.61 L1577.13 1205.61 L1576.54 1205.61 L1575.96 1205.61 L1575.37 1205.61 L1574.78 1205.61 L1574.2 1205.61 L1573.61 1205.61 L1573.02 1205.61 L1572.44 1205.61 L1571.85 1205.61 L1571.27 1205.61 L1570.68 1205.61 L1570.09 1205.61 L1569.51 1205.61 L1568.92 1205.61 L1568.33 1205.61 L1567.75 1205.61 L1567.16 1205.61 L1566.57 1205.61 L1565.99 1205.61 L1565.4 1205.61 L1564.81 1205.61 L1564.23 1205.61 L1563.64 1205.61 L1563.06 1205.61 L1562.47 1205.61 L1561.88 1205.61 L1561.3 1205.61 L1560.71 1205.61 L1560.12 1205.61 L1559.54 1205.61 L1558.95 1205.61 L1558.36 1205.61 L1557.78 1205.61 L1557.19 1205.61 L1556.6 1205.61 L1556.02 1205.61 L1555.43 1205.61 L1554.85 1205.61 L1554.26 1205.61 L1553.67 1205.61 L1553.09 1205.61 L1552.5 1205.61 L1551.91 1205.61 L1551.33 1205.61 L1550.74 1205.61 L1550.15 1205.61 L1549.57 1205.61 L1548.98 1205.61 L1548.4 1205.61 L1547.81 1205.61 L1547.22 1205.61 L1546.64 1205.61 L1546.05 1205.61 L1545.46 1205.61 L1544.88 1205.61 L1544.29 1205.61 L1543.7 1205.61 L1543.12 1205.61 L1542.53 1205.61 L1541.94 1205.61 L1541.36 1205.61 L1540.77 1205.61 L1540.19 1205.61 L1539.6 1205.61 L1539.01 1205.61 L1538.43 1205.61 L1537.84 1205.61 L1537.25 1205.61 L1536.67 1205.61 L1536.08 1205.61 L1535.49 1205.61 L1534.91 1205.61 L1534.32 1205.61 L1533.73 1205.61 L1533.15 1205.61 L1532.56 1205.61 L1531.98 1205.61 L1531.39 1205.61 L1530.8 1205.61 L1530.22 1205.61 L1529.63 1205.61 L1529.04 1205.61 L1528.46 1205.61 L1527.87 1205.61 L1527.28 1205.61 L1526.7 1205.61 L1526.11 1205.61 L1525.52 1205.61 L1524.94 1205.61 L1524.35 1205.61 L1523.77 1205.61 L1523.18 1205.61 L1522.59 1205.61 L1522.01 1205.61 L1521.42 1205.61 L1520.83 1205.61 L1520.25 1205.61 L1519.66 1205.61 L1519.07 1205.61 L1518.49 1205.61 L1517.9 1205.61 L1517.32 1205.61 L1516.73 1205.61 L1516.14 1205.61 L1515.56 1205.61 L1514.97 1205.61 L1514.38 1205.61 L1513.8 1205.61 L1513.21 1205.61 L1512.62 1205.61 L1512.04 1205.61 L1511.45 1205.61 L1510.86 1205.61 L1510.28 1205.61 L1509.69 1205.61 L1509.11 1205.61 L1508.52 1205.61 L1507.93 1205.61 L1507.35 1205.61 L1506.76 1205.61 L1506.17 1205.61 L1505.59 1205.61 L1505 1205.61 L1504.41 1205.61 L1503.83 1205.61 L1503.24 1205.61 L1502.65 1205.61 L1502.07 1205.61 L1501.48 1205.61 L1500.9 1205.61 L1500.31 1205.61 L1499.72 1205.61 L1499.14 1205.61 L1498.55 1205.61 L1497.96 1205.61 L1497.38 1205.61 L1496.79 1205.61 L1496.2 1205.61 L1495.62 1205.61 L1495.03 1205.61 L1494.45 1205.61 L1493.86 1205.61 L1493.27 1205.61 L1492.69 1205.61 L1492.1 1205.61 L1491.51 1205.61 L1490.93 1205.61 L1490.34 1205.61 L1489.75 1205.61 L1489.17 1205.61 L1488.58 1205.61 L1487.99 1205.61 L1487.41 1205.61 L1486.82 1205.61 L1486.24 1205.61 L1485.65 1205.61 L1485.06 1205.61 L1484.48 1205.61 L1483.89 1205.61 L1483.3 1205.61 L1482.72 1205.61 L1482.13 1205.61 L1481.54 1205.61 L1480.96 1205.61 L1480.37 1205.61 L1479.78 1205.61 L1479.2 1205.61 L1478.61 1205.61 L1478.03 1205.61 L1477.44 1205.61 L1476.85 1205.61 L1476.27 1205.61 L1475.68 1205.61 L1475.09 1205.61 L1474.51 1205.61 L1473.92 1205.61 L1473.33 1205.61 L1472.75 1205.61 L1472.16 1205.61 L1471.57 1205.61 L1470.99 1205.61 L1470.4 1205.61 L1469.82 1205.61 L1469.23 1205.61 L1468.64 1205.61 L1468.06 1205.61 L1467.47 1205.61 L1466.88 1205.61 L1466.3 1205.61 L1465.71 1205.61 L1465.12 1205.61 L1464.54 1205.61 L1463.95 1205.61 L1463.37 1205.61 L1462.78 1205.61 L1462.19 1205.61 L1461.61 1205.61 L1461.02 1205.61 L1460.43 1205.61 L1459.85 1205.61 L1459.26 1205.61 L1458.67 1205.61 L1458.09 1205.61 L1457.5 1205.61 L1456.91 1205.61 L1456.33 1205.61 L1455.74 1205.61 L1455.16 1205.61 L1454.57 1205.61 L1453.98 1205.61 L1453.4 1205.61 L1452.81 1205.61 L1452.22 1205.61 L1451.64 1205.61 L1451.05 1205.61 L1450.46 1205.61 L1449.88 1205.61 L1449.29 1205.61 L1448.7 1205.61 L1448.12 1205.61 L1447.53 1205.61 L1446.95 1205.61 L1446.36 1205.61 L1445.77 1205.61 L1445.19 1205.61 L1444.6 1205.61 L1444.01 1205.61 L1443.43 1205.61 L1442.84 1205.61 L1442.25 1205.61 L1441.67 1205.61 L1441.08 1205.61 L1440.5 1205.61 L1439.91 1205.61 L1439.32 1205.61 L1438.74 1205.61 L1438.15 1205.61 L1437.56 1205.61 L1436.98 1205.61 L1436.39 1205.61 L1435.8 1205.61 L1435.22 1205.61 L1434.63 1205.61 L1434.04 1205.61 L1433.46 1205.61 L1432.87 1205.61 L1432.29 1205.61 L1431.7 1205.61 L1431.11 1205.61 L1430.53 1205.61 L1429.94 1205.61 L1429.35 1205.61 L1428.77 1205.61 L1428.18 1205.61 L1427.59 1205.61 L1427.01 1205.61 L1426.42 1205.61 L1425.83 1205.61 L1425.25 1205.61 L1424.66 1205.61 L1424.08 1205.61 L1423.49 1205.61 L1422.9 1205.61 L1422.32 1205.61 L1421.73 1205.61 L1421.14 1205.61 L1420.56 1205.61 L1419.97 1205.61 L1419.38 1205.61 L1418.8 1205.61 L1418.21 1205.61 L1417.63 1205.61 L1417.04 1205.61 L1416.45 1205.61 L1415.87 1205.61 L1415.28 1205.61 L1414.69 1205.61 L1414.11 1205.61 L1413.52 1205.61 L1412.93 1205.61 L1412.35 1205.61 L1411.76 1205.61 L1411.17 1205.61 L1410.59 1205.61 L1410 1205.61 L1409.42 1205.61 L1408.83 1205.61 L1408.24 1205.61 L1407.66 1205.61 L1407.07 1205.61 L1406.48 1205.61 L1405.9 1205.61 L1405.31 1205.61 L1404.72 1205.61 L1404.14 1205.61 L1403.55 1205.61 L1402.96 1205.61 L1402.38 1205.61 L1401.79 1205.61 L1401.21 1205.61 L1400.62 1205.61 L1400.03 1205.61 L1399.45 1205.61 L1398.86 1205.61 L1398.27 1205.61 L1397.69 1205.61 L1397.1 1205.61 L1396.51 1205.61 L1395.93 1205.61 L1395.34 1205.61 L1394.75 1205.61 L1394.17 1205.61 L1393.58 1205.61 L1393 1205.61 L1392.41 1205.61 L1391.82 1205.61 L1391.24 1205.61 L1390.65 1205.61 L1390.06 1205.61 L1389.48 1205.61 L1388.89 1205.61 L1388.3 1205.61 L1387.72 1205.61 L1387.13 1205.61 L1386.55 1205.61 L1385.96 1205.61 L1385.37 1205.61 L1384.79 1205.61 L1384.2 1205.61 L1383.61 1205.61 L1383.03 1205.61 L1382.44 1205.61 L1381.85 1205.61 L1381.27 1205.61 L1380.68 1205.61 L1380.09 1205.61 L1379.51 1205.61 L1378.92 1205.61 L1378.34 1205.61 L1377.75 1205.61 L1377.16 1205.61 L1376.58 1205.61 L1375.99 1205.61 L1375.4 1205.61 L1374.82 1205.61 L1374.23 1205.61 L1373.64 1205.61 L1373.06 1205.61 L1372.47 1205.61 L1371.88 1205.61 L1371.3 1205.61 L1370.71 1205.61 L1370.13 1205.61 L1369.54 1205.61 L1368.95 1205.61 L1368.37 1205.61 L1367.78 1205.61 L1367.19 1205.61 L1366.61 1205.61 L1366.02 1205.61 L1365.43 1205.61 L1364.85 1205.61 L1364.26 1205.61 L1363.68 1205.61 L1363.09 1205.61 L1362.5 1205.61 L1361.92 1205.61 L1361.33 1205.61 L1360.74 1205.61 L1360.16 1205.61 L1359.57 1205.61 L1358.98 1205.61 L1358.4 1205.61 L1357.81 1205.61 L1357.22 1205.61 L1356.64 1205.61 L1356.05 1205.61 L1355.47 1205.61 L1354.88 1205.61 L1354.29 1205.61 L1353.71 1205.61 L1353.12 1205.61 L1352.53 1205.61 L1351.95 1205.61 L1351.36 1205.61 L1350.77 1205.61 L1350.19 1205.61 L1349.6 1205.61 L1349.01 1205.61 L1348.43 1205.61 L1347.84 1205.61 L1347.26 1205.61 L1346.67 1205.61 L1346.08 1205.61 L1345.5 1205.61 L1344.91 1205.61 L1344.32 1205.61 L1343.74 1205.61 L1343.15 1205.61 L1342.56 1205.61 L1341.98 1205.61 L1341.39 1205.61 L1340.8 1205.61 L1340.22 1205.61 L1339.63 1205.61 L1339.05 1205.61 L1338.46 1205.61 L1337.87 1205.61 L1337.29 1205.61 L1336.7 1205.61 L1336.11 1205.61 L1335.53 1205.61 L1334.94 1205.61 L1334.35 1205.61 L1333.77 1205.61 L1333.18 1205.61 L1332.6 1205.61 L1332.01 1205.61 L1331.42 1205.61 L1330.84 1205.61 L1330.25 1205.61 L1329.66 1205.61 L1329.08 1205.61 L1328.49 1205.61 L1327.9 1205.61 L1327.32 1205.61 L1326.73 1205.61 L1326.14 1205.61 L1325.56 1205.61 L1324.97 1205.61 L1324.39 1205.61 L1323.8 1205.61 L1323.21 1205.61 L1322.63 1205.61 L1322.04 1205.61 L1321.45 1205.61 L1320.87 1205.61 L1320.28 1205.61 L1319.69 1205.61 L1319.11 1205.61 L1318.52 1205.61 L1317.93 1205.61 L1317.35 1205.61 L1316.76 1205.61 L1316.18 1205.61 L1315.59 1205.61 L1315 1205.61 L1314.42 1205.61 L1313.83 1205.61 L1313.24 1205.61 L1312.66 1205.61 L1312.07 1205.61 L1311.48 1205.61 L1310.9 1205.61 L1310.31 1205.61 L1309.73 1205.61 L1309.14 1205.61 L1308.55 1205.61 L1307.97 1205.61 L1307.38 1205.61 L1306.79 1205.61 L1306.21 1205.61 L1305.62 1205.61 L1305.03 1205.61 L1304.45 1205.61 L1303.86 1205.61 L1303.27 1205.61 L1302.69 1205.61 L1302.1 1205.61 L1301.52 1205.61 L1300.93 1205.61 L1300.34 1205.61 L1299.76 1205.61 L1299.17 1205.61 L1298.58 1205.61 L1298 1205.61 L1297.41 1205.61 L1296.82 1205.61 L1296.24 1205.61 L1295.65 1205.61 L1295.06 1205.61 L1294.48 1205.61 L1293.89 1205.61 L1293.31 1205.61 L1292.72 1205.61 L1292.13 1205.61 L1291.55 1205.61 L1290.96 1205.61 L1290.37 1205.61 L1289.79 1205.61 L1289.2 1205.61 L1288.61 1205.61 L1288.03 1205.61 L1287.44 1205.61 L1286.86 1205.61 L1286.27 1205.61 L1285.68 1205.61 L1285.1 1205.61 L1284.51 1205.61 L1283.92 1205.61 L1283.34 1205.61 L1282.75 1205.61 L1282.16 1205.61 L1281.58 1205.61 L1280.99 1205.61 L1280.4 1205.61 L1279.82 1205.61 L1279.23 1205.61 L1278.65 1205.61 L1278.06 1205.61 L1277.47 1205.61 L1276.89 1205.61 L1276.3 1205.61 L1275.71 1205.61 L1275.13 1205.61 L1274.54 1205.61 L1273.95 1205.61 L1273.37 1205.61 L1272.78 1205.61 L1272.19 1205.61 L1271.61 1205.61 L1271.02 1205.61 L1270.44 1205.61 L1269.85 1205.61 L1269.26 1205.61 L1268.68 1205.61 L1268.09 1205.61 L1267.5 1205.61 L1266.92 1205.61 L1266.33 1205.61 L1265.74 1205.61 L1265.16 1205.61 L1264.57 1205.61 L1263.98 1205.61 L1263.4 1205.61 L1262.81 1205.61 L1262.23 1205.61 L1261.64 1205.61 L1261.05 1205.61 L1260.47 1205.61 L1259.88 1205.61 L1259.29 1205.61 L1258.71 1205.61 L1258.12 1205.61 L1257.53 1205.61 L1256.95 1205.61 L1256.36 1205.61 L1255.78 1205.61 L1255.19 1205.61 L1254.6 1205.61 L1254.02 1205.61 L1253.43 1205.61 L1252.84 1205.61 L1252.26 1205.61 L1251.67 1205.61 L1251.08 1205.61 L1250.5 1205.61 L1249.91 1205.61 L1249.32 1205.61 L1248.74 1205.61 L1248.15 1205.61 L1247.57 1205.61 L1246.98 1205.61 L1246.39 1205.61 L1245.81 1205.61 L1245.22 1205.61 L1244.63 1205.61 L1244.05 1205.61 L1243.46 1205.61 L1242.87 1205.61 L1242.29 1205.61 L1241.7 1205.61 L1241.11 1205.61 L1240.53 1205.61 L1239.94 1205.61 L1239.36 1205.61 L1238.77 1205.61 L1238.18 1205.61 L1237.6 1205.61 L1237.01 1205.61 L1236.42 1205.61 L1235.84 1205.61 L1235.25 1205.61 L1234.66 1205.61 L1234.08 1205.61 L1233.49 1205.61 L1232.91 1205.61 L1232.32 1205.61 L1231.73 1205.61 L1231.15 1205.61 L1230.56 1205.61 L1229.97 1205.61 L1229.39 1205.61 L1228.8 1205.61 L1228.21 1205.61 L1227.63 1205.61 L1227.04 1205.61 L1226.45 1205.61 L1225.87 1205.61 L1225.28 1205.61 L1224.7 1205.61 L1224.11 1205.61 L1223.52 1205.61 L1222.94 1205.61 L1222.35 1205.61 L1221.76 1205.61 L1221.18 1205.61 L1220.59 1205.61 L1220 1205.61 L1219.42 1205.61 L1218.83 1205.61 L1218.24 1205.61 L1217.66 1205.61 L1217.07 1205.61 L1216.49 1205.61 L1215.9 1205.61 L1215.31 1205.61 L1214.73 1205.61 L1214.14 1205.61 L1213.55 1205.61 L1212.97 1205.61 L1212.38 1205.61 L1211.79 1205.61 L1211.21 1205.61 L1210.62 1205.61 L1210.03 1205.61 L1209.45 1205.61 L1208.86 1205.61 L1208.28 1205.61 L1207.69 1205.61 L1207.1 1205.61 L1206.52 1205.61 L1205.93 1205.61 L1205.34 1205.61 L1204.76 1205.61 L1204.17 1205.61 L1203.58 1205.61 L1203 1205.61 L1202.41 1205.61 L1201.83 1205.61 L1201.24 1205.61 L1200.65 1205.61 L1200.07 1205.61 L1199.48 1205.61 L1198.89 1205.61 L1198.31 1205.61 L1197.72 1205.61 L1197.13 1205.61 L1196.55 1205.61 L1195.96 1205.61 L1195.37 1205.61 L1194.79 1205.61 L1194.2 1205.61 L1193.62 1205.61 L1193.03 1205.61 L1192.44 1205.61 L1191.86 1205.61 L1191.27 1205.61 L1190.68 1205.61 L1190.1 1205.61 L1189.51 1205.61 L1188.92 1205.61 L1188.34 1205.61 L1187.75 1205.61 L1187.16 1205.61 L1186.58 1205.61 L1185.99 1205.61 L1185.41 1205.61 L1184.82 1205.61 L1184.23 1205.61 L1183.65 1205.61 L1183.06 1205.61 L1182.47 1205.61 L1181.89 1205.61 L1181.3 1205.61 L1180.71 1205.61 L1180.13 1205.61 L1179.54 1205.61 L1178.96 1205.61 L1178.37 1205.61 L1177.78 1205.61 L1177.2 1205.61 L1176.61 1205.61 L1176.02 1205.61 L1175.44 1205.61 L1174.85 1205.61 L1174.26 1205.61 L1173.68 1205.61 L1173.09 1205.61 L1172.5 1205.61 L1171.92 1205.61 L1171.33 1205.61 L1170.75 1205.61 L1170.16 1205.61 L1169.57 1205.61 L1168.99 1205.61 L1168.4 1205.61 L1167.81 1205.61 L1167.23 1205.61 L1166.64 1205.61 L1166.05 1205.61 L1165.47 1205.61 L1164.88 1205.61 L1164.29 1205.61 L1163.71 1205.61 L1163.12 1205.61 L1162.54 1205.61 L1161.95 1205.61 L1161.36 1205.61 L1160.78 1205.61 L1160.19 1205.61 L1159.6 1205.61 L1159.02 1205.61 L1158.43 1205.61 L1157.84 1205.61 L1157.26 1205.61 L1156.67 1205.61 L1156.09 1205.61 L1155.5 1205.61 L1154.91 1205.61 L1154.33 1205.61 L1153.74 1205.61 L1153.15 1205.61 L1152.57 1205.61 L1151.98 1205.61 L1151.39 1205.61 L1150.81 1205.61 L1150.22 1205.61 L1149.63 1205.61 L1149.05 1205.61 L1148.46 1205.61 L1147.88 1205.61 L1147.29 1205.61 L1146.7 1205.61 L1146.12 1205.61 L1145.53 1205.61 L1144.94 1205.61 L1144.36 1205.61 L1143.77 1205.61 L1143.18 1205.61 L1142.6 1205.61 L1142.01 1205.61 L1141.42 1205.61 L1140.84 1205.61 L1140.25 1205.61 L1139.67 1205.61 L1139.08 1205.61 L1138.49 1205.61 L1137.91 1205.61 L1137.32 1205.61 L1136.73 1205.61 L1136.15 1205.61 L1135.56 1205.61 L1134.97 1205.61 L1134.39 1205.61 L1133.8 1205.61 L1133.21 1205.61 L1132.63 1205.61 L1132.04 1205.61 L1131.46 1205.61 L1130.87 1205.61 L1130.28 1205.61 L1129.7 1205.61 L1129.11 1205.61 L1128.52 1205.61 L1127.94 1205.61 L1127.35 1205.61 L1126.76 1205.61 L1126.18 1205.61 L1125.59 1205.61 L1125.01 1205.61 L1124.42 1205.61 L1123.83 1205.61 L1123.25 1205.61 L1122.66 1205.61 L1122.07 1205.61 L1121.49 1205.61 L1120.9 1205.61 L1120.31 1205.61 L1119.73 1205.61 L1119.14 1205.61 L1118.55 1205.61 L1117.97 1205.61 L1117.38 1205.61 L1116.8 1205.61 L1116.21 1205.61 L1115.62 1205.61 L1115.04 1205.61 L1114.45 1205.61 L1113.86 1205.61 L1113.28 1205.61 L1112.69 1205.61 L1112.1 1205.61 L1111.52 1205.61 L1110.93 1205.61 L1110.34 1205.61 L1109.76 1205.61 L1109.17 1205.61 L1108.59 1205.61 L1108 1205.61 L1107.41 1205.61 L1106.83 1205.61 L1106.24 1205.61 L1105.65 1205.61 L1105.07 1205.61 L1104.48 1205.61 L1103.89 1205.61 L1103.31 1205.61 L1102.72 1205.61 L1102.14 1205.61 L1101.55 1205.61 L1100.96 1205.61 L1100.38 1205.61 L1099.79 1205.61 L1099.2 1205.61 L1098.62 1205.61 L1098.03 1205.61 L1097.44 1205.61 L1096.86 1205.61 L1096.27 1205.61 L1095.68 1205.61 L1095.1 1205.61 L1094.51 1205.61 L1093.93 1205.61 L1093.34 1205.61 L1092.75 1205.61 L1092.17 1205.61 L1091.58 1205.61 L1090.99 1205.61 L1090.41 1205.61 L1089.82 1205.61 L1089.23 1205.61 L1088.65 1205.61 L1088.06 1205.61 L1087.47 1205.61 L1086.89 1205.61 L1086.3 1205.61 L1085.72 1205.61 L1085.13 1205.61 L1084.54 1205.61 L1083.96 1205.61 L1083.37 1205.61 L1082.78 1205.61 L1082.2 1205.61 L1081.61 1205.61 L1081.02 1205.61 L1080.44 1205.61 L1079.85 1205.61 L1079.26 1205.61 L1078.68 1205.61 L1078.09 1205.61 L1077.51 1205.61 L1076.92 1205.61 L1076.33 1205.61 L1075.75 1205.61 L1075.16 1205.61 L1074.57 1205.61 L1073.99 1205.61 L1073.4 1205.61 L1072.81 1205.61 L1072.23 1205.61 L1071.64 1205.61 L1071.06 1205.61 L1070.47 1205.61 L1069.88 1205.61 L1069.3 1205.61 L1068.71 1205.61 L1068.12 1205.61 L1067.54 1205.61 L1066.95 1205.61 L1066.36 1205.61 L1065.78 1205.61 L1065.19 1205.61 L1064.6 1205.61 L1064.02 1205.61 L1063.43 1205.61 L1062.85 1205.61 L1062.26 1205.61 L1061.67 1205.61 L1061.09 1205.61 L1060.5 1205.61 L1059.91 1205.61 L1059.33 1205.61 L1058.74 1205.61 L1058.15 1205.61 L1057.57 1205.61 L1056.98 1205.61 L1056.39 1205.61 L1055.81 1205.61 L1055.22 1205.61 L1054.64 1205.61 L1054.05 1205.61 L1053.46 1205.61 L1052.88 1205.61 L1052.29 1205.61 L1051.7 1205.61 L1051.12 1205.61 L1050.53 1205.61 L1049.94 1205.61 L1049.36 1205.61 L1048.77 1205.61 L1048.19 1205.61 L1047.6 1205.61 L1047.01 1205.61 L1046.43 1205.61 L1045.84 1205.61 L1045.25 1205.61 L1044.67 1205.61 L1044.08 1205.61 L1043.49 1205.61 L1042.91 1205.61 L1042.32 1205.61 L1041.73 1205.61 L1041.15 1205.61 L1040.56 1205.61 L1039.98 1205.61 L1039.39 1205.61 L1038.8 1205.61 L1038.22 1205.61 L1037.63 1205.61 L1037.04 1205.61 L1036.46 1205.61 L1035.87 1205.61 L1035.28 1205.61 L1034.7 1205.61 L1034.11 1205.61 L1033.52 1205.61 L1032.94 1205.61 L1032.35 1205.61 L1031.77 1205.61 L1031.18 1205.61 L1030.59 1205.61 L1030.01 1205.61 L1029.42 1205.61 L1028.83 1205.61 L1028.25 1205.61 L1027.66 1205.61 L1027.07 1205.61 L1026.49 1205.61 L1025.9 1205.61 L1025.32 1205.61 L1024.73 1205.61 L1024.14 1205.61 L1023.56 1205.61 L1022.97 1205.61 L1022.38 1205.61 L1021.8 1205.61 L1021.21 1205.61 L1020.62 1205.61 L1020.04 1205.61 L1019.45 1205.61 L1018.86 1205.61 L1018.28 1205.61 L1017.69 1205.61 L1017.11 1205.61 L1016.52 1205.61 L1015.93 1205.61 L1015.35 1205.61 L1014.76 1205.61 L1014.17 1205.61 L1013.59 1205.61 L1013 1205.61 L1012.41 1205.61 L1011.83 1205.61 L1011.24 1205.61 L1010.65 1205.61 L1010.07 1205.61 L1009.48 1205.61 L1008.9 1205.61 L1008.31 1205.61 L1007.72 1205.61 L1007.14 1205.61 L1006.55 1205.61 L1005.96 1205.61 L1005.38 1205.61 L1004.79 1205.61 L1004.2 1205.61 L1003.62 1205.61 L1003.03 1205.61 L1002.44 1205.61 L1001.86 1205.61 L1001.27 1205.61 L1000.69 1205.61 L1000.1 1205.61 L999.513 1205.61 L998.926 1205.61 L998.34 1205.61 L997.754 1205.61 L997.167 1205.61 L996.581 1205.61 L995.994 1205.61 L995.408 1205.61 L994.822 1205.61 L994.235 1205.61 L993.649 1205.61 L993.062 1205.61 L992.476 1205.61 L991.889 1205.61 L991.303 1205.61 L990.717 1205.61 L990.13 1205.61 L989.544 1205.61 L988.957 1205.61 L988.371 1205.61 L987.785 1205.61 L987.198 1205.61 L986.612 1205.61 L986.025 1205.61  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip432)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1205.68 986.612,1205.68 987.198,1205.68 987.785,1205.68 988.371,1205.68 988.957,1205.68 989.544,1205.68 990.13,1205.68 990.717,1205.68 991.303,1205.68 991.889,1205.68 992.476,1205.68 993.062,1205.68 993.649,1205.68 994.235,1205.68 994.822,1205.68 995.408,1205.68 995.994,1205.68 996.581,1205.68 997.167,1205.68 997.754,1205.68 998.34,1205.68 998.926,1205.68 999.513,1205.68 1000.1,1205.68 1000.69,1205.68 1001.27,1205.68 1001.86,1205.68 1002.44,1205.68 1003.03,1205.68 1003.62,1205.68 1004.2,1205.68 1004.79,1205.68 1005.38,1205.68 1005.96,1205.68 1006.55,1205.68 1007.14,1205.68 1007.72,1205.68 1008.31,1205.68 1008.9,1205.68 1009.48,1205.68 1010.07,1205.68 1010.65,1205.68 1011.24,1205.68 1011.83,1205.68 1012.41,1205.68 1013,1205.68 1013.59,1205.68 1014.17,1205.68 1014.76,1205.68 1015.35,1205.68 1015.93,1205.68 1016.52,1205.68 1017.11,1205.68 1017.69,1205.68 1018.28,1205.68 1018.86,1205.68 1019.45,1205.68 1020.04,1205.68 1020.62,1205.68 1021.21,1205.68 1021.8,1205.68 1022.38,1205.68 1022.97,1205.68 1023.56,1205.68 1024.14,1205.68 1024.73,1205.68 1025.32,1205.68 1025.9,1205.68 1026.49,1205.68 1027.07,1205.68 1027.66,1205.68 1028.25,1205.68 1028.83,1205.68 1029.42,1205.68 1030.01,1205.68 1030.59,1205.68 1031.18,1205.68 1031.77,1205.68 1032.35,1205.68 1032.94,1205.68 1033.52,1205.68 1034.11,1205.68 1034.7,1205.68 1035.28,1205.68 1035.87,1205.68 1036.46,1205.68 1037.04,1205.68 1037.63,1205.68 1038.22,1205.68 1038.8,1205.68 1039.39,1205.68 1039.98,1205.68 1040.56,1205.68 1041.15,1205.68 1041.73,1205.68 1042.32,1205.68 1042.91,1205.68 1043.49,1205.68 1044.08,1205.68 1044.67,1205.68 1045.25,1205.68 1045.84,1205.68 1046.43,1205.68 1047.01,1205.68 1047.6,1205.68 1048.19,1205.68 1048.77,1205.68 1049.36,1205.68 1049.94,1205.68 1050.53,1205.68 1051.12,1205.68 1051.7,1205.68 1052.29,1205.68 1052.88,1205.68 1053.46,1205.68 1054.05,1205.68 1054.64,1205.68 1055.22,1205.68 1055.81,1205.68 1056.39,1205.68 1056.98,1205.68 1057.57,1205.68 1058.15,1205.68 1058.74,1205.68 1059.33,1205.68 1059.91,1205.68 1060.5,1205.68 1061.09,1205.68 1061.67,1205.68 1062.26,1205.68 1062.85,1205.68 1063.43,1205.68 1064.02,1205.68 1064.6,1205.68 1065.19,1205.68 1065.78,1205.68 1066.36,1205.68 1066.95,1205.68 1067.54,1205.68 1068.12,1205.68 1068.71,1205.68 1069.3,1205.68 1069.88,1205.68 1070.47,1205.68 1071.06,1205.68 1071.64,1205.68 1072.23,1205.68 1072.81,1205.68 1073.4,1205.68 1073.99,1205.68 1074.57,1205.68 1075.16,1205.68 1075.75,1205.68 1076.33,1205.68 1076.92,1205.68 1077.51,1205.68 1078.09,1205.68 1078.68,1205.68 1079.26,1205.68 1079.85,1205.68 1080.44,1205.68 1081.02,1205.68 1081.61,1205.68 1082.2,1205.68 1082.78,1205.68 1083.37,1205.68 1083.96,1205.68 1084.54,1205.68 1085.13,1205.68 1085.72,1205.68 1086.3,1205.68 1086.89,1205.68 1087.47,1205.68 1088.06,1205.68 1088.65,1205.68 1089.23,1205.68 1089.82,1205.68 1090.41,1205.68 1090.99,1205.68 1091.58,1205.68 1092.17,1205.68 1092.75,1205.68 1093.34,1205.68 1093.93,1205.68 1094.51,1205.68 1095.1,1205.68 1095.68,1205.68 1096.27,1205.68 1096.86,1205.68 1097.44,1205.68 1098.03,1205.68 1098.62,1205.68 1099.2,1205.68 1099.79,1205.68 1100.38,1205.68 1100.96,1205.68 1101.55,1205.68 1102.14,1205.68 1102.72,1205.68 1103.31,1205.68 1103.89,1205.68 1104.48,1205.68 1105.07,1205.68 1105.65,1205.68 1106.24,1205.68 1106.83,1205.68 1107.41,1205.68 1108,1205.68 1108.59,1205.68 1109.17,1205.68 1109.76,1205.68 1110.34,1205.68 1110.93,1205.68 1111.52,1205.68 1112.1,1205.68 1112.69,1205.68 1113.28,1205.68 1113.86,1205.68 1114.45,1205.68 1115.04,1205.68 1115.62,1205.68 1116.21,1205.68 1116.8,1205.68 1117.38,1205.68 1117.97,1205.68 1118.55,1205.68 1119.14,1205.68 1119.73,1205.68 1120.31,1205.68 1120.9,1205.68 1121.49,1205.68 1122.07,1205.68 1122.66,1205.68 1123.25,1205.68 1123.83,1205.68 1124.42,1205.68 1125.01,1205.68 1125.59,1205.68 1126.18,1205.68 1126.76,1205.68 1127.35,1205.68 1127.94,1205.68 1128.52,1205.68 1129.11,1205.68 1129.7,1205.68 1130.28,1205.68 1130.87,1205.68 1131.46,1205.68 1132.04,1205.68 1132.63,1205.68 1133.21,1205.68 1133.8,1205.68 1134.39,1205.68 1134.97,1205.68 1135.56,1205.68 1136.15,1205.68 1136.73,1205.68 1137.32,1205.68 1137.91,1205.68 1138.49,1205.68 1139.08,1205.68 1139.67,1205.68 1140.25,1205.68 1140.84,1205.68 1141.42,1205.68 1142.01,1205.68 1142.6,1205.68 1143.18,1205.68 1143.77,1205.68 1144.36,1205.68 1144.94,1205.68 1145.53,1205.68 1146.12,1205.68 1146.7,1205.68 1147.29,1205.68 1147.88,1205.68 1148.46,1205.68 1149.05,1205.68 1149.63,1205.68 1150.22,1205.68 1150.81,1205.68 1151.39,1205.68 1151.98,1205.68 1152.57,1205.68 1153.15,1205.68 1153.74,1205.68 1154.33,1205.68 1154.91,1205.68 1155.5,1205.68 1156.09,1205.68 1156.67,1205.68 1157.26,1205.68 1157.84,1205.68 1158.43,1205.68 1159.02,1205.68 1159.6,1205.68 1160.19,1205.68 1160.78,1205.68 1161.36,1205.68 1161.95,1205.68 1162.54,1205.68 1163.12,1205.68 1163.71,1205.68 1164.29,1205.68 1164.88,1205.68 1165.47,1205.68 1166.05,1205.68 1166.64,1205.68 1167.23,1205.68 1167.81,1205.68 1168.4,1205.68 1168.99,1205.68 1169.57,1205.68 1170.16,1205.68 1170.75,1205.68 1171.33,1205.68 1171.92,1205.68 1172.5,1205.68 1173.09,1205.68 1173.68,1205.68 1174.26,1205.68 1174.85,1205.68 1175.44,1205.68 1176.02,1205.68 1176.61,1205.68 1177.2,1205.68 1177.78,1205.68 1178.37,1205.68 1178.96,1205.68 1179.54,1205.68 1180.13,1205.68 1180.71,1205.68 1181.3,1205.68 1181.89,1205.68 1182.47,1205.68 1183.06,1205.68 1183.65,1205.68 1184.23,1205.68 1184.82,1205.68 1185.41,1205.68 1185.99,1205.68 1186.58,1205.68 1187.16,1205.68 1187.75,1205.68 1188.34,1205.68 1188.92,1205.68 1189.51,1205.68 1190.1,1205.68 1190.68,1205.68 1191.27,1205.68 1191.86,1205.68 1192.44,1205.68 1193.03,1205.68 1193.62,1205.68 1194.2,1205.68 1194.79,1205.68 1195.37,1205.68 1195.96,1205.68 1196.55,1205.68 1197.13,1205.68 1197.72,1205.68 1198.31,1205.68 1198.89,1205.68 1199.48,1205.68 1200.07,1205.68 1200.65,1205.68 1201.24,1205.68 1201.83,1205.68 1202.41,1205.68 1203,1205.68 1203.58,1205.68 1204.17,1205.68 1204.76,1205.68 1205.34,1205.68 1205.93,1205.68 1206.52,1205.68 1207.1,1205.68 1207.69,1205.68 1208.28,1205.68 1208.86,1205.68 1209.45,1205.68 1210.03,1205.68 1210.62,1205.68 1211.21,1205.68 1211.79,1205.68 1212.38,1205.68 1212.97,1205.68 1213.55,1205.68 1214.14,1205.68 1214.73,1205.68 1215.31,1205.68 1215.9,1205.68 1216.49,1205.68 1217.07,1205.68 1217.66,1205.68 1218.24,1205.68 1218.83,1205.68 1219.42,1205.68 1220,1205.68 1220.59,1205.68 1221.18,1205.68 1221.76,1205.68 1222.35,1205.68 1222.94,1205.68 1223.52,1205.68 1224.11,1205.68 1224.7,1205.68 1225.28,1205.68 1225.87,1205.68 1226.45,1205.68 1227.04,1205.68 1227.63,1205.68 1228.21,1205.68 1228.8,1205.68 1229.39,1205.68 1229.97,1205.68 1230.56,1205.68 1231.15,1205.68 1231.73,1205.68 1232.32,1205.68 1232.91,1205.68 1233.49,1205.68 1234.08,1205.68 1234.66,1205.68 1235.25,1205.68 1235.84,1205.68 1236.42,1205.68 1237.01,1205.68 1237.6,1205.68 1238.18,1205.68 1238.77,1205.68 1239.36,1205.68 1239.94,1205.68 1240.53,1205.68 1241.11,1205.68 1241.7,1205.68 1242.29,1205.68 1242.87,1205.68 1243.46,1205.68 1244.05,1205.68 1244.63,1205.68 1245.22,1205.68 1245.81,1205.68 1246.39,1205.68 1246.98,1205.68 1247.57,1205.68 1248.15,1205.68 1248.74,1205.68 1249.32,1205.68 1249.91,1205.68 1250.5,1205.68 1251.08,1205.68 1251.67,1205.68 1252.26,1205.68 1252.84,1205.68 1253.43,1205.68 1254.02,1205.68 1254.6,1205.68 1255.19,1205.68 1255.78,1205.68 1256.36,1205.68 1256.95,1205.68 1257.53,1205.68 1258.12,1205.68 1258.71,1205.68 1259.29,1205.68 1259.88,1205.68 1260.47,1205.68 1261.05,1205.68 1261.64,1205.68 1262.23,1205.68 1262.81,1205.68 1263.4,1205.68 1263.98,1205.68 1264.57,1205.68 1265.16,1205.68 1265.74,1205.68 1266.33,1205.68 1266.92,1205.68 1267.5,1205.68 1268.09,1205.68 1268.68,1205.68 1269.26,1205.68 1269.85,1205.68 1270.44,1205.68 1271.02,1205.68 1271.61,1205.68 1272.19,1205.68 1272.78,1205.68 1273.37,1205.68 1273.95,1205.68 1274.54,1205.68 1275.13,1205.68 1275.71,1205.68 1276.3,1205.68 1276.89,1205.68 1277.47,1205.68 1278.06,1205.68 1278.65,1205.68 1279.23,1205.68 1279.82,1205.68 1280.4,1205.68 1280.99,1205.68 1281.58,1205.68 1282.16,1205.68 1282.75,1205.68 1283.34,1205.68 1283.92,1205.68 1284.51,1205.68 1285.1,1205.68 1285.68,1205.68 1286.27,1205.68 1286.86,1205.68 1287.44,1205.68 1288.03,1205.68 1288.61,1205.68 1289.2,1205.68 1289.79,1205.68 1290.37,1205.68 1290.96,1205.68 1291.55,1205.68 1292.13,1205.68 1292.72,1205.68 1293.31,1205.68 1293.89,1205.68 1294.48,1205.68 1295.06,1205.68 1295.65,1205.68 1296.24,1205.68 1296.82,1205.68 1297.41,1205.68 1298,1205.68 1298.58,1205.68 1299.17,1205.68 1299.76,1205.68 1300.34,1205.68 1300.93,1205.68 1301.52,1205.68 1302.1,1205.68 1302.69,1205.68 1303.27,1205.68 1303.86,1205.68 1304.45,1205.68 1305.03,1205.68 1305.62,1205.68 1306.21,1205.68 1306.79,1205.68 1307.38,1205.68 1307.97,1205.68 1308.55,1205.68 1309.14,1205.68 1309.73,1205.68 1310.31,1205.68 1310.9,1205.68 1311.48,1205.68 1312.07,1205.68 1312.66,1205.68 1313.24,1205.68 1313.83,1205.68 1314.42,1205.68 1315,1205.68 1315.59,1205.68 1316.18,1205.68 1316.76,1205.68 1317.35,1205.68 1317.93,1205.68 1318.52,1205.68 1319.11,1205.68 1319.69,1205.68 1320.28,1205.68 1320.87,1205.68 1321.45,1205.68 1322.04,1205.68 1322.63,1205.68 1323.21,1205.68 1323.8,1205.68 1324.39,1205.68 1324.97,1205.68 1325.56,1205.68 1326.14,1205.68 1326.73,1205.68 1327.32,1205.68 1327.9,1205.68 1328.49,1205.68 1329.08,1205.68 1329.66,1205.68 1330.25,1205.68 1330.84,1205.68 1331.42,1205.68 1332.01,1205.68 1332.6,1205.68 1333.18,1205.68 1333.77,1205.68 1334.35,1205.68 1334.94,1205.68 1335.53,1205.68 1336.11,1205.68 1336.7,1205.68 1337.29,1205.68 1337.87,1205.68 1338.46,1205.68 1339.05,1205.68 1339.63,1205.68 1340.22,1205.68 1340.8,1205.68 1341.39,1205.68 1341.98,1205.68 1342.56,1205.68 1343.15,1205.68 1343.74,1205.68 1344.32,1205.68 1344.91,1205.68 1345.5,1205.68 1346.08,1205.68 1346.67,1205.68 1347.26,1205.68 1347.84,1205.68 1348.43,1205.68 1349.01,1205.68 1349.6,1205.68 1350.19,1205.68 1350.77,1205.68 1351.36,1205.68 1351.95,1205.68 1352.53,1205.68 1353.12,1205.68 1353.71,1205.68 1354.29,1205.68 1354.88,1205.68 1355.47,1205.68 1356.05,1205.68 1356.64,1205.68 1357.22,1205.68 1357.81,1205.68 1358.4,1205.68 1358.98,1205.68 1359.57,1205.68 1360.16,1205.68 1360.74,1205.68 1361.33,1205.68 1361.92,1205.68 1362.5,1205.68 1363.09,1205.68 1363.68,1205.68 1364.26,1205.68 1364.85,1205.68 1365.43,1205.68 1366.02,1205.68 1366.61,1205.68 1367.19,1205.68 1367.78,1205.68 1368.37,1205.68 1368.95,1205.68 1369.54,1205.68 1370.13,1205.68 1370.71,1205.68 1371.3,1205.68 1371.88,1205.68 1372.47,1205.68 1373.06,1205.68 1373.64,1205.68 1374.23,1205.68 1374.82,1205.68 1375.4,1205.68 1375.99,1205.68 1376.58,1205.68 1377.16,1205.68 1377.75,1205.68 1378.34,1205.68 1378.92,1205.68 1379.51,1205.68 1380.09,1205.68 1380.68,1205.68 1381.27,1205.68 1381.85,1205.68 1382.44,1205.68 1383.03,1205.68 1383.61,1205.68 1384.2,1205.68 1384.79,1205.68 1385.37,1205.68 1385.96,1205.68 1386.55,1205.68 1387.13,1205.68 1387.72,1205.68 1388.3,1205.68 1388.89,1205.68 1389.48,1205.68 1390.06,1205.68 1390.65,1205.68 1391.24,1205.68 1391.82,1205.68 1392.41,1205.68 1393,1205.68 1393.58,1205.68 1394.17,1205.68 1394.75,1205.68 1395.34,1205.68 1395.93,1205.68 1396.51,1205.68 1397.1,1205.68 1397.69,1205.68 1398.27,1205.68 1398.86,1205.68 1399.45,1205.68 1400.03,1205.68 1400.62,1205.68 1401.21,1205.68 1401.79,1205.68 1402.38,1205.68 1402.96,1205.68 1403.55,1205.68 1404.14,1205.68 1404.72,1205.68 1405.31,1205.68 1405.9,1205.68 1406.48,1205.68 1407.07,1205.68 1407.66,1205.68 1408.24,1205.68 1408.83,1205.68 1409.42,1205.68 1410,1205.68 1410.59,1205.68 1411.17,1205.68 1411.76,1205.68 1412.35,1205.68 1412.93,1205.68 1413.52,1205.68 1414.11,1205.68 1414.69,1205.68 1415.28,1205.68 1415.87,1205.68 1416.45,1205.68 1417.04,1205.68 1417.63,1205.68 1418.21,1205.68 1418.8,1205.68 1419.38,1205.68 1419.97,1205.68 1420.56,1205.68 1421.14,1205.68 1421.73,1205.68 1422.32,1205.68 1422.9,1205.68 1423.49,1205.68 1424.08,1205.68 1424.66,1205.68 1425.25,1205.68 1425.83,1205.68 1426.42,1205.68 1427.01,1205.68 1427.59,1205.68 1428.18,1205.68 1428.77,1205.68 1429.35,1205.68 1429.94,1205.68 1430.53,1205.68 1431.11,1205.68 1431.7,1205.68 1432.29,1205.68 1432.87,1205.68 1433.46,1205.68 1434.04,1205.68 1434.63,1205.68 1435.22,1205.68 1435.8,1205.68 1436.39,1205.68 1436.98,1205.68 1437.56,1205.68 1438.15,1205.68 1438.74,1205.68 1439.32,1205.68 1439.91,1205.68 1440.5,1205.68 1441.08,1205.68 1441.67,1205.68 1442.25,1205.68 1442.84,1205.68 1443.43,1205.68 1444.01,1205.68 1444.6,1205.68 1445.19,1205.68 1445.77,1205.68 1446.36,1205.68 1446.95,1205.68 1447.53,1205.68 1448.12,1205.68 1448.7,1205.68 1449.29,1205.68 1449.88,1205.68 1450.46,1205.68 1451.05,1205.68 1451.64,1205.68 1452.22,1205.68 1452.81,1205.68 1453.4,1205.68 1453.98,1205.68 1454.57,1205.68 1455.16,1205.68 1455.74,1205.68 1456.33,1205.68 1456.91,1205.68 1457.5,1205.68 1458.09,1205.68 1458.67,1205.68 1459.26,1205.68 1459.85,1205.68 1460.43,1205.68 1461.02,1205.68 1461.61,1205.68 1462.19,1205.68 1462.78,1205.68 1463.37,1205.68 1463.95,1205.68 1464.54,1205.68 1465.12,1205.68 1465.71,1205.68 1466.3,1205.68 1466.88,1205.68 1467.47,1205.68 1468.06,1205.68 1468.64,1205.68 1469.23,1205.68 1469.82,1205.68 1470.4,1205.68 1470.99,1205.68 1471.57,1205.68 1472.16,1205.68 1472.75,1205.68 1473.33,1205.68 1473.92,1205.68 1474.51,1205.68 1475.09,1205.68 1475.68,1205.68 1476.27,1205.68 1476.85,1205.68 1477.44,1205.68 1478.03,1205.68 1478.61,1205.68 1479.2,1205.68 1479.78,1205.68 1480.37,1205.68 1480.96,1205.68 1481.54,1205.68 1482.13,1205.68 1482.72,1205.68 1483.3,1205.68 1483.89,1205.68 1484.48,1205.68 1485.06,1205.68 1485.65,1205.68 1486.24,1205.68 1486.82,1205.68 1487.41,1205.68 1487.99,1205.68 1488.58,1205.68 1489.17,1205.68 1489.75,1205.68 1490.34,1205.68 1490.93,1205.68 1491.51,1205.68 1492.1,1205.68 1492.69,1205.68 1493.27,1205.68 1493.86,1205.68 1494.45,1205.68 1495.03,1205.68 1495.62,1205.68 1496.2,1205.68 1496.79,1205.68 1497.38,1205.68 1497.96,1205.68 1498.55,1205.68 1499.14,1205.68 1499.72,1205.68 1500.31,1205.68 1500.9,1205.68 1501.48,1205.68 1502.07,1205.68 1502.65,1205.68 1503.24,1205.68 1503.83,1205.68 1504.41,1205.68 1505,1205.68 1505.59,1205.68 1506.17,1205.68 1506.76,1205.68 1507.35,1205.68 1507.93,1205.68 1508.52,1205.68 1509.11,1205.68 1509.69,1205.68 1510.28,1205.68 1510.86,1205.68 1511.45,1205.68 1512.04,1205.68 1512.62,1205.68 1513.21,1205.68 1513.8,1205.68 1514.38,1205.68 1514.97,1205.68 1515.56,1205.68 1516.14,1205.68 1516.73,1205.68 1517.32,1205.68 1517.9,1205.68 1518.49,1205.68 1519.07,1205.68 1519.66,1205.68 1520.25,1205.68 1520.83,1205.68 1521.42,1205.68 1522.01,1205.68 1522.59,1205.68 1523.18,1205.68 1523.77,1205.68 1524.35,1205.68 1524.94,1205.68 1525.52,1205.68 1526.11,1205.68 1526.7,1205.68 1527.28,1205.68 1527.87,1205.68 1528.46,1205.68 1529.04,1205.68 1529.63,1205.68 1530.22,1205.68 1530.8,1205.68 1531.39,1205.68 1531.98,1205.68 1532.56,1205.68 1533.15,1205.68 1533.73,1205.68 1534.32,1205.68 1534.91,1205.68 1535.49,1205.68 1536.08,1205.68 1536.67,1205.68 1537.25,1205.68 1537.84,1205.68 1538.43,1205.68 1539.01,1205.68 1539.6,1205.68 1540.19,1205.68 1540.77,1205.68 1541.36,1205.68 1541.94,1205.68 1542.53,1205.68 1543.12,1205.68 1543.7,1205.68 1544.29,1205.68 1544.88,1205.68 1545.46,1205.68 1546.05,1205.68 1546.64,1205.68 1547.22,1205.68 1547.81,1205.68 1548.4,1205.68 1548.98,1205.68 1549.57,1205.68 1550.15,1205.68 1550.74,1205.68 1551.33,1205.68 1551.91,1205.68 1552.5,1205.68 1553.09,1205.68 1553.67,1205.68 1554.26,1205.68 1554.85,1205.68 1555.43,1205.68 1556.02,1205.68 1556.6,1205.68 1557.19,1205.68 1557.78,1205.68 1558.36,1205.68 1558.95,1205.68 1559.54,1205.68 1560.12,1205.68 1560.71,1205.68 1561.3,1205.68 1561.88,1205.68 1562.47,1205.68 1563.06,1205.68 1563.64,1205.68 1564.23,1205.68 1564.81,1205.68 1565.4,1205.68 1565.99,1205.68 1566.57,1205.68 1567.16,1205.68 1567.75,1205.68 1568.33,1205.68 1568.92,1205.68 1569.51,1205.68 1570.09,1205.68 1570.68,1205.68 1571.27,1205.68 1571.85,1205.68 1572.44,1205.68 1573.02,1205.68 1573.61,1205.68 1574.2,1205.68 1574.78,1205.68 1575.37,1205.68 1575.96,1205.68 1576.54,1205.68 1577.13,1205.68 1577.72,1205.68 1578.3,1205.68 1578.89,1205.68 1579.47,1205.68 1580.06,1205.68 1580.65,1205.68 1581.23,1205.68 1581.82,1205.68 1582.41,1205.68 1582.99,1205.68 1583.58,1205.68 1584.17,1205.68 1584.75,1205.68 1585.34,1205.68 1585.93,1205.68 1586.51,1205.68 1587.1,1205.68 1587.68,1205.68 1588.27,1205.68 1588.86,1205.68 1589.44,1205.68 1590.03,1205.68 1590.62,1205.68 1591.2,1205.68 1591.79,1205.68 1592.38,1205.68 1592.96,1205.68 1593.55,1205.68 1594.14,1205.68 1594.72,1205.68 1595.31,1205.68 1595.89,1205.68 1596.48,1205.68 1597.07,1205.68 1597.65,1205.68 1598.24,1205.68 1598.83,1205.68 1599.41,1205.68 1600,1205.68 1600.59,1205.68 1601.17,1205.68 1601.76,1205.68 1602.34,1205.68 1602.93,1205.68 1603.52,1205.68 1604.1,1205.68 1604.69,1205.68 1605.28,1205.68 1605.86,1205.68 1606.45,1205.68 1607.04,1205.68 1607.62,1205.68 1608.21,1205.68 1608.8,1205.68 1609.38,1205.68 1609.97,1205.68 1610.55,1205.68 1611.14,1205.68 1611.73,1205.68 1612.31,1205.68 1612.9,1205.68 1613.49,1205.68 1614.07,1205.68 1614.66,1205.68 1615.25,1205.68 1615.83,1205.68 1616.42,1205.68 1617.01,1205.68 1617.59,1205.68 1618.18,1205.68 1618.76,1205.68 1619.35,1205.68 1619.94,1205.68 1620.52,1205.68 1621.11,1205.68 1621.7,1205.68 1622.28,1205.68 1622.87,1205.68 1623.46,1205.68 1624.04,1205.68 1624.63,1205.68 1625.22,1205.68 1625.8,1205.68 1626.39,1205.68 1626.97,1205.68 1627.56,1205.68 1628.15,1205.68 1628.73,1205.68 1629.32,1205.68 1629.91,1205.68 1630.49,1205.68 1631.08,1205.68 1631.67,1205.68 1632.25,1205.68 1632.84,1205.68 1633.42,1205.68 1634.01,1205.68 1634.6,1205.68 1635.18,1205.68 1635.77,1205.68 1636.36,1205.68 1636.94,1205.68 1637.53,1205.68 1638.12,1205.68 1638.7,1205.68 1639.29,1205.68 1639.88,1205.68 1640.46,1205.68 1641.05,1205.68 1641.63,1205.68 1642.22,1205.68 1642.81,1205.68 1643.39,1205.68 1643.98,1205.68 1644.57,1205.68 1645.15,1205.68 1645.74,1205.68 1646.33,1205.68 1646.91,1205.68 1647.5,1205.68 1648.09,1205.68 1648.67,1205.68 1649.26,1205.68 1649.84,1205.68 1650.43,1205.68 1651.02,1205.68 1651.6,1205.68 1652.19,1205.68 1652.78,1205.68 1653.36,1205.68 1653.95,1205.68 1654.54,1205.68 1655.12,1205.68 1655.71,1205.68 1656.29,1205.68 1656.88,1205.68 1657.47,1205.68 1658.05,1205.68 1658.64,1205.68 1659.23,1205.68 1659.81,1205.68 1660.4,1205.68 1660.99,1205.68 1661.57,1205.68 1662.16,1205.68 1662.75,1205.68 1663.33,1205.68 1663.92,1205.68 1664.5,1205.68 1665.09,1205.68 1665.68,1205.68 1666.26,1205.68 1666.85,1205.68 1667.44,1205.68 1668.02,1205.68 1668.61,1205.68 1669.2,1205.68 1669.78,1205.68 1670.37,1205.68 1670.96,1205.68 1671.54,1205.68 1672.13,1205.68 1672.71,1205.68 1673.3,1205.68 1673.89,1205.68 1674.47,1205.68 1675.06,1205.68 1675.65,1205.68 1676.23,1205.68 1676.82,1205.68 1677.41,1205.68 1677.99,1205.68 1678.58,1205.68 1679.17,1205.68 1679.75,1205.68 1680.34,1205.68 1680.92,1205.68 1681.51,1205.68 1682.1,1205.68 1682.68,1205.68 1683.27,1205.68 1683.86,1205.68 1684.44,1205.68 1685.03,1205.68 1685.62,1205.68 1686.2,1205.68 1686.79,1205.68 1687.37,1205.68 1687.96,1205.68 1688.55,1205.68 1689.13,1205.68 1689.72,1205.68 1690.31,1205.68 1690.89,1205.68 1691.48,1205.68 1692.07,1205.68 1692.65,1205.68 1693.24,1205.68 1693.83,1205.68 1694.41,1205.68 1695,1205.68 1695.58,1205.68 1696.17,1205.68 1696.76,1205.68 1697.34,1205.68 1697.93,1205.68 1698.52,1205.68 1699.1,1205.68 1699.69,1205.68 1700.28,1205.68 1700.86,1205.68 1701.45,1205.68 1702.04,1205.68 1702.62,1205.68 1703.21,1205.68 1703.79,1205.68 1704.38,1205.68 1704.97,1205.68 1705.55,1205.68 1706.14,1205.68 1706.73,1205.68 1707.31,1205.68 1707.9,1205.68 1708.49,1205.68 1709.07,1205.68 1709.66,1205.68 1710.24,1205.68 1710.83,1205.68 1711.42,1205.68 1712,1205.68 1712.59,1205.68 1713.18,1205.68 1713.76,1205.68 1714.35,1205.68 1714.94,1205.68 1715.52,1205.68 1716.11,1205.68 1716.7,1205.68 1717.28,1205.68 1717.87,1205.68 1718.45,1205.68 1719.04,1205.68 1719.63,1205.68 1720.21,1205.68 1720.8,1205.68 1721.39,1205.68 1721.97,1205.68 1722.56,1205.68 1723.15,1205.68 1723.73,1205.68 1724.32,1205.68 1724.91,1205.68 1725.49,1205.68 1726.08,1205.68 1726.66,1205.68 1727.25,1205.68 1727.84,1205.68 1728.42,1205.68 1729.01,1205.68 1729.6,1205.68 1730.18,1205.68 1730.77,1205.68 1731.36,1205.68 1731.94,1205.68 1732.53,1205.68 1733.11,1205.68 1733.7,1205.68 1734.29,1205.68 1734.87,1205.68 1735.46,1205.68 1736.05,1205.68 1736.63,1205.68 1737.22,1205.68 1737.81,1205.68 1738.39,1205.68 1738.98,1205.68 1739.57,1205.68 1740.15,1205.68 1740.74,1205.68 1741.32,1205.68 1741.91,1205.68 1742.5,1205.68 1743.08,1205.68 1743.67,1205.68 1744.26,1205.68 1744.84,1205.68 1745.43,1205.68 1746.02,1205.68 1746.6,1205.68 1747.19,1205.68 1747.78,1205.68 1748.36,1205.68 1748.95,1205.68 1749.53,1205.68 1750.12,1205.68 1750.71,1205.68 1751.29,1205.68 1751.88,1205.68 1752.47,1205.68 1753.05,1205.68 1753.64,1205.68 1754.23,1205.68 1754.81,1205.68 1755.4,1205.68 1755.99,1205.68 1756.57,1205.68 1757.16,1205.68 1757.74,1205.68 1758.33,1205.68 1758.92,1205.68 1759.5,1205.68 1760.09,1205.68 1760.68,1205.68 1761.26,1205.68 1761.85,1205.68 1762.44,1205.68 1763.02,1205.68 1763.61,1205.68 1764.19,1205.68 1764.78,1205.68 1765.37,1205.68 1765.95,1205.68 1766.54,1205.68 1767.13,1205.68 1767.71,1205.68 1768.3,1205.68 1768.89,1205.68 1769.47,1205.68 1770.06,1205.68 1770.65,1205.68 1771.23,1205.68 1771.82,1205.68 1772.4,1205.68 1772.99,1205.68 1773.58,1205.68 1774.16,1205.68 1774.75,1205.68 1775.34,1205.68 1775.92,1205.68 1776.51,1205.68 1777.1,1205.68 1777.68,1205.68 1778.27,1205.68 1778.86,1205.68 1779.44,1205.68 1780.03,1205.68 1780.61,1205.68 1781.2,1205.68 1781.79,1205.68 1782.37,1205.68 1782.96,1205.68 1783.55,1205.68 1784.13,1205.68 1784.72,1205.68 1785.31,1205.68 1785.89,1205.68 1786.48,1205.68 1787.06,1205.68 1787.65,1205.68 1788.24,1205.68 1788.82,1205.68 1789.41,1205.68 1790,1205.68 1790.58,1205.68 1791.17,1205.68 1791.76,1205.68 1792.34,1205.68 1792.93,1205.68 1793.52,1205.68 1794.1,1205.68 1794.69,1205.68 1795.27,1205.68 1795.86,1205.68 1796.45,1205.68 1797.03,1205.68 1797.62,1205.68 1798.21,1205.68 1798.79,1205.68 1799.38,1205.68 1799.97,1205.68 1800.55,1205.68 1801.14,1205.68 1801.73,1205.68 1802.31,1205.68 1802.9,1205.68 1803.48,1205.68 1804.07,1205.68 1804.66,1205.68 1805.24,1205.68 1805.83,1205.68 1806.42,1205.68 1807,1205.68 1807.59,1205.68 1808.18,1205.68 1808.76,1205.68 1809.35,1205.68 1809.94,1205.68 1810.52,1205.68 1811.11,1205.68 1811.69,1205.68 1812.28,1205.68 1812.87,1205.68 1813.45,1205.68 1814.04,1205.68 1814.63,1205.68 1815.21,1205.68 1815.8,1205.68 1816.39,1205.68 1816.97,1205.68 1817.56,1205.68 1818.14,1205.68 1818.73,1205.68 1819.32,1205.68 1819.9,1205.68 1820.49,1205.68 1821.08,1205.68 1821.66,1205.68 1822.25,1205.68 1822.84,1205.68 1823.42,1205.68 1824.01,1205.68 1824.6,1205.68 1825.18,1205.68 1825.77,1205.68 1826.35,1205.68 1826.94,1205.68 1827.53,1205.68 1828.11,1205.68 1828.7,1205.68 1829.29,1205.68 1829.87,1205.68 1830.46,1205.68 1831.05,1205.68 1831.63,1205.68 1832.22,1205.68 1832.81,1205.68 1833.39,1205.68 1833.98,1205.68 1834.56,1205.68 1835.15,1205.68 1835.74,1205.68 1836.32,1205.68 1836.91,1205.68 1837.5,1205.68 1838.08,1205.68 1838.67,1205.68 1839.26,1205.68 1839.84,1205.68 1840.43,1205.68 1841.01,1205.68 1841.6,1205.68 1842.19,1205.68 1842.77,1205.68 1843.36,1205.68 1843.95,1205.68 1844.53,1205.68 1845.12,1205.68 1845.71,1205.68 1846.29,1205.68 1846.88,1205.68 1847.47,1205.68 1848.05,1205.68 1848.64,1205.68 1849.22,1205.68 1849.81,1205.68 1850.4,1205.68 1850.98,1205.68 1851.57,1205.68 1852.16,1205.68 1852.74,1205.68 1853.33,1205.68 1853.92,1205.68 1854.5,1205.68 1855.09,1205.68 1855.68,1205.68 1856.26,1205.68 1856.85,1205.68 1857.43,1205.68 1858.02,1205.68 1858.61,1205.68 1859.19,1205.68 1859.78,1205.68 1860.37,1205.68 1860.95,1205.68 1861.54,1205.68 1862.13,1205.68 1862.71,1205.68 1863.3,1205.68 1863.88,1205.68 1864.47,1205.68 1865.06,1205.68 1865.64,1205.68 1866.23,1205.68 1866.82,1205.68 1867.4,1205.68 1867.99,1205.68 1868.58,1205.68 1869.16,1205.68 1869.75,1205.68 1870.34,1205.68 1870.92,1205.68 1871.51,1205.68 1872.09,1205.68 1872.68,1205.68 1873.27,1205.68 1873.85,1205.68 1874.44,1205.68 1875.03,1205.68 1875.61,1205.68 1876.2,1205.68 1876.79,1205.68 1877.37,1205.68 1877.96,1205.68 1878.55,1205.68 1879.13,1205.68 1879.72,1205.68 1880.3,1205.68 1880.89,1205.68 1881.48,1205.68 1882.06,1205.68 1882.65,1205.68 1883.24,1205.68 1883.82,1205.68 1884.41,1205.68 1885,1205.68 1885.58,1205.68 1886.17,1205.68 1886.76,1205.68 1887.34,1205.68 1887.93,1205.68 1888.51,1205.68 1889.1,1205.68 1889.69,1205.68 1890.27,1205.68 1890.86,1205.68 1891.45,1205.68 1892.03,1205.68 1892.62,1205.68 1893.21,1205.68 1893.79,1205.68 1894.38,1205.68 1894.96,1205.68 1895.55,1205.68 1896.14,1205.68 1896.72,1205.68 1897.31,1205.68 1897.9,1205.68 1898.48,1205.68 1899.07,1205.68 1899.66,1205.68 1900.24,1205.68 1900.83,1205.68 1901.42,1205.68 1902,1205.68 1902.59,1205.68 1903.17,1205.68 1903.76,1205.68 1904.35,1205.68 1904.93,1205.68 1905.52,1205.68 1906.11,1205.68 1906.69,1205.68 1907.28,1205.68 1907.87,1205.68 1908.45,1205.68 1909.04,1205.68 1909.63,1205.68 1910.21,1205.68 1910.8,1205.68 1911.38,1205.68 1911.97,1205.68 1912.56,1205.68 1913.14,1205.68 1913.73,1205.68 1914.32,1205.68 1914.9,1205.68 1915.49,1205.68 1916.08,1205.68 1916.66,1205.68 1917.25,1205.68 1917.83,1205.68 1918.42,1205.68 1919.01,1205.68 1919.59,1205.68 1920.18,1205.68 1920.77,1205.68 1921.35,1205.68 1921.94,1205.68 1922.53,1205.68 1923.11,1205.68 1923.7,1205.68 1924.29,1205.68 1924.87,1205.68 1925.46,1205.68 1926.04,1205.68 1926.63,1205.68 1927.22,1205.68 1927.8,1205.68 1928.39,1205.68 1928.98,1205.68 1929.56,1205.68 1930.15,1205.68 1930.74,1205.68 1931.32,1205.68 1931.91,1205.68 1932.5,1205.68 1933.08,1205.68 1933.67,1205.68 1934.25,1205.68 1934.84,1205.68 1935.43,1205.68 1936.01,1205.68 1936.6,1205.68 1937.19,1205.68 1937.77,1205.68 1938.36,1205.68 1938.95,1205.68 1939.53,1205.68 1940.12,1205.68 1940.71,1205.68 1941.29,1205.68 1941.88,1205.68 1942.46,1205.68 1943.05,1205.68 1943.64,1205.68 1944.22,1205.68 1944.81,1205.68 1945.4,1205.68 1945.98,1205.68 1946.57,1205.68 1947.16,1205.68 1947.74,1205.68 1948.33,1205.68 1948.91,1205.68 1949.5,1205.68 1950.09,1205.68 1950.67,1205.68 1951.26,1205.68 1951.85,1205.68 1952.43,1205.68 1953.02,1205.68 1953.61,1205.68 1954.19,1205.68 1954.78,1205.68 1955.37,1205.68 1955.95,1205.68 1956.54,1205.68 1957.12,1205.68 1957.71,1205.68 1958.3,1205.68 1958.88,1205.68 1959.47,1205.68 1960.06,1205.68 1960.64,1205.68 1961.23,1205.68 1961.82,1205.68 1962.4,1205.68 1962.99,1205.68 1963.58,1205.68 1964.16,1205.68 1964.75,1205.68 1965.33,1205.68 1965.92,1205.68 1966.51,1205.68 1967.09,1205.68 1967.68,1205.68 1968.27,1205.68 1968.85,1205.68 1969.44,1205.68 1970.03,1205.68 1970.61,1205.68 1971.2,1205.68 1971.78,1205.68 1972.37,1205.68 1972.96,1205.68 1973.54,1205.68 1974.13,1205.68 1974.72,1205.68 1975.3,1205.68 1975.89,1205.68 1976.48,1205.68 1977.06,1205.68 1977.65,1205.68 1978.24,1205.68 1978.82,1205.68 1979.41,1205.68 1979.99,1205.68 1980.58,1205.68 1981.17,1205.68 1981.75,1205.68 1982.34,1205.68 1982.93,1205.68 1983.51,1205.68 1984.1,1205.68 1984.69,1205.68 1985.27,1205.68 1985.86,1205.68 1986.45,1205.68 1987.03,1205.68 1987.62,1205.68 1988.2,1205.68 1988.79,1205.68 1989.38,1205.68 1989.96,1205.68 1990.55,1205.68 1991.14,1205.68 1991.72,1205.68 1992.31,1205.68 1992.9,1205.68 1993.48,1205.68 1994.07,1205.68 1994.65,1205.68 1995.24,1205.68 1995.83,1205.68 1996.41,1205.68 1997,1205.68 1997.59,1205.68 1998.17,1205.68 1998.76,1205.68 1999.35,1205.68 1999.93,1205.68 2000.52,1205.68 2001.11,1205.68 2001.69,1205.68 2002.28,1205.68 2002.86,1205.68 2003.45,1205.68 2004.04,1205.68 2004.62,1205.68 2005.21,1205.68 2005.8,1205.68 2006.38,1205.68 2006.97,1205.68 2007.56,1205.68 2008.14,1205.68 2008.73,1205.68 2009.32,1205.68 2009.9,1205.68 2010.49,1205.68 2011.07,1205.68 2011.66,1205.68 2012.25,1205.68 2012.83,1205.68 2013.42,1205.68 2014.01,1205.68 2014.59,1205.68 2015.18,1205.68 2015.77,1205.68 2016.35,1205.68 2016.94,1205.68 2017.53,1205.68 2018.11,1205.68 2018.7,1205.68 2019.28,1205.68 2019.87,1205.68 2020.46,1205.68 2021.04,1205.68 2021.63,1205.68 2022.22,1205.68 2022.8,1205.68 2023.39,1205.68 2023.98,1205.68 2024.56,1205.68 2025.15,1205.68 2025.73,1205.68 2026.32,1205.68 2026.91,1205.68 2027.49,1205.68 2028.08,1205.68 2028.67,1205.68 2029.25,1205.68 2029.84,1205.68 2030.43,1205.68 2031.01,1205.68 2031.6,1205.68 2032.19,1205.68 2032.77,1205.68 2033.36,1205.68 2033.94,1205.68 2034.53,1205.68 2035.12,1205.68 2035.7,1205.68 2036.29,1205.68 2036.88,1205.68 2037.46,1205.68 2038.05,1205.68 2038.64,1205.68 2039.22,1205.68 2039.81,1205.68 2040.4,1205.68 2040.98,1205.68 2041.57,1205.68 2042.15,1205.68 2042.74,1205.68 2043.33,1205.68 2043.91,1205.68 2044.5,1205.68 2045.09,1205.68 2045.67,1205.68 2046.26,1205.68 2046.85,1205.68 2047.43,1205.68 2048.02,1205.68 2048.6,1205.68 2049.19,1205.68 2049.78,1205.68 2050.36,1205.68 2050.95,1205.68 2051.54,1205.68 2052.12,1205.68 2052.71,1205.68 2053.3,1205.68 2053.88,1205.68 2054.47,1205.68 2055.06,1205.68 2055.64,1205.68 2056.23,1205.68 2056.81,1205.68 2057.4,1205.68 2057.99,1205.68 2058.57,1205.68 2059.16,1205.68 2059.75,1205.68 2060.33,1205.68 2060.92,1205.68 2061.51,1205.68 2062.09,1205.68 2062.68,1205.68 2063.27,1205.68 2063.85,1205.68 2064.44,1205.68 2065.02,1205.68 2065.61,1205.68 2066.2,1205.68 2066.78,1205.68 2067.37,1205.68 2067.96,1205.68 2068.54,1205.68 2069.13,1205.68 2069.72,1205.68 2070.3,1205.68 2070.89,1205.68 2071.48,1205.68 2072.06,1205.68 2072.65,1205.68 2073.23,1205.68 2073.82,1205.68 2074.41,1205.68 2074.99,1205.68 2075.58,1205.68 2076.17,1205.68 2076.75,1205.68 2077.34,1205.68 2077.93,1205.68 2078.51,1205.68 2079.1,1205.68 2079.68,1205.68 2080.27,1205.68 2080.86,1205.68 2081.44,1205.68 2082.03,1205.68 2082.62,1205.68 2083.2,1205.68 2083.79,1205.68 2084.38,1205.68 2084.96,1205.68 2085.55,1205.68 2086.14,1205.68 2086.72,1205.68 2087.31,1205.68 2087.89,1205.68 2088.48,1205.68 2089.07,1205.68 2089.65,1205.68 2090.24,1205.68 2090.83,1205.68 2091.41,1205.68 2092,1205.68 2092.59,1205.68 2093.17,1205.68 2093.76,1205.68 2094.35,1205.68 2094.93,1205.68 2095.52,1205.68 2096.1,1205.68 2096.69,1205.68 2097.28,1205.68 2097.86,1205.68 2098.45,1205.68 2099.04,1205.68 2099.62,1205.68 2100.21,1205.68 2100.8,1205.68 2101.38,1205.68 2101.97,1205.68 2102.55,1205.68 2103.14,1205.68 2103.73,1205.68 2104.31,1205.68 2104.9,1205.68 2105.49,1205.68 2106.07,1205.68 2106.66,1205.68 2107.25,1205.68 2107.83,1205.68 2108.42,1205.68 2109.01,1205.68 2109.59,1205.68 2110.18,1205.68 2110.76,1205.68 2111.35,1205.68 2111.94,1205.68 2112.52,1205.68 2113.11,1205.68 2113.7,1205.68 2114.28,1205.68 2114.87,1205.68 2115.46,1205.68 2116.04,1205.68 2116.63,1205.68 2117.22,1205.68 2117.8,1205.68 2118.39,1205.68 2118.97,1205.68 2119.56,1205.68 2120.15,1205.68 2120.73,1205.68 2121.32,1205.68 2121.91,1205.68 2122.49,1205.68 2123.08,1205.68 2123.67,1205.68 2124.25,1205.68 2124.84,1205.68 2125.42,1205.68 2126.01,1205.68 2126.6,1205.68 2127.18,1205.68 2127.77,1205.68 2128.36,1205.68 2128.94,1205.68 2129.53,1205.68 2130.12,1205.68 2130.7,1205.68 2131.29,1205.68 2131.88,1205.68 2132.46,1205.68 2133.05,1205.68 2133.63,1205.68 2134.22,1205.68 2134.81,1205.68 2135.39,1205.68 2135.98,1205.68 2136.57,1205.68 2137.15,1205.68 2137.74,1205.68 2138.33,1205.68 2138.91,1205.68 2139.5,1205.68 2140.09,1205.68 2140.67,1205.68 2141.26,1205.68 2141.84,1205.68 2142.43,1205.68 2143.02,1205.68 2143.6,1205.68 2144.19,1205.68 2144.78,1205.68 2145.36,1205.68 2145.95,1205.68 2146.54,1205.68 2147.12,1205.68 2147.71,1205.68 2148.3,1205.68 2148.88,1205.68 2149.47,1205.68 2150.05,1205.68 2150.64,1205.68 2151.23,1205.68 2151.81,1205.68 2152.4,1205.68 2152.99,1205.68 2153.57,1205.68 2154.16,1205.68 2154.75,1205.68 2155.33,1205.68 2155.92,1205.68 2156.5,1205.68 2157.09,1205.68 2157.68,1205.68 2158.26,1205.68 \"/>\n<polyline clip-path=\"url(#clip432)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1562.41,1188.48 1400.89,899.083 \"/>\n<polyline clip-path=\"url(#clip432)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1222.3 985.439,1188.48 2158.26,1188.48 2158.26,1222.3 985.439,1222.3 \"/>\n<path clip-path=\"url(#clip430)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip430)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip430)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip430)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip430)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip430)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip430)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip430)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip433\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip433)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip433)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip433)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip433)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip433)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip430)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip430)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip430)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip430)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip430)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip430)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip430)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip433)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip433)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip433)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip433)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip433)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip430)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip430)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip430)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip430)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip430)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip430)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip430)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip430)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip433)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-1577.5 161.555,-1388.05 162.114,-2724.3 162.673,-3876.59 163.232,-4980.75 163.792,-6014.96 164.351,-6911.03 164.91,-7774.7 165.469,-8495.22 166.029,-9167.51 166.588,-9797.13 167.147,-10363.4 167.706,-9880.4 168.266,-10377 168.825,-10819.6 169.384,-11211.6 169.943,-10783.9 170.503,-11106.8 171.062,-11384.5 171.621,-11636 172.18,-11850.2 172.74,-12019.5 173.299,-11651.5 173.858,-11785.6 174.417,-11890.9 174.977,-11969.6 175.536,-12016.6 176.095,-12042.2 176.655,-12052.2 177.214,-12042.4 177.773,-12014.4 178.332,-11678 178.892,-11602.4 179.451,-11266.2 180.01,-11169.7 180.569,-11069.5 181.129,-10966.6 181.688,-10839.4 182.247,-10707.1 182.806,-10578.8 183.366,-9941.01 183.925,-9783.72 184.484,-9624.63 185.043,-9315.68 185.603,-9158.88 186.162,-8747.37 186.721,-8357.08 187.28,-8221.21 187.84,-7876.02 188.399,-7648.14 188.958,-7415.48 189.517,-7178.54 190.077,-6956.1 190.636,-6657.02 191.195,-6350.87 191.754,-6065.32 192.314,-5933.17 192.873,-5797.63 193.432,-5666.87 193.991,-5467.27 194.551,-5277.47 195.11,-5034.32 195.669,-4857.93 196.228,-4636.4 196.788,-4518 197.347,-4409.15 197.906,-4245.45 198.465,-4093.55 199.025,-3898.81 199.584,-3717.02 200.143,-3618.69 200.702,-3473.5 201.262,-3298.7 201.821,-3167.55 202.38,-3002.13 202.939,-2841.97 203.499,-2613.53 204.058,-2540.55 204.617,-2466.7 205.176,-2394.01 205.736,-2322.6 206.295,-2150.43 206.854,-2085.88 207.413,-1992.35 207.973,-1805.37 208.532,-1716.97 209.091,-1660.35 209.65,-1604.63 210.21,-1518.67 210.769,-1405.39 211.328,-1295.5 211.887,-1190.95 212.447,-1116.96 213.006,-1045.05 213.565,-974.403 214.124,-909.596 214.684,-894.09 215.243,-802.038 215.802,-786.086 216.361,-716.64 216.921,-653.361 217.48,-563.94 218.039,-458.13 218.598,-423.641 219.158,-296.404 219.717,-250.871 220.276,-224.534 220.835,-154.084 221.395,-110.588 221.954,-45.9524 222.513,38.3511 223.072,140.725 223.632,155.402 224.191,173.618 224.75,207.746 225.309,222.281 225.869,317.269 226.428,326.836 226.987,360.445 227.546,456.926 228.106,507.265 228.665,491.195 229.224,497.307 229.783,522.772 230.343,527.103 230.902,517.645 231.461,584.058 232.02,570.788 232.58,602.261 233.139,629.926 233.698,635.221 234.257,684.904 234.817,726.555 235.376,731.434 235.935,772.474 236.494,752.943 237.054,756.949 237.613,794.853 238.172,815.266 238.731,813.396 239.291,794.202 239.85,795.115 240.409,799.424 240.968,838.936 241.528,840.747 242.087,858.693 242.646,873.572 243.205,922.34 243.765,905.111 244.324,960.632 244.883,974.751 245.442,984.689 246.002,996.113 246.561,991.287 247.12,986.897 247.679,963.554 248.239,959.453 248.798,992.849 249.357,1025.31 249.916,1056.01 250.476,1085.36 251.035,1089.02 251.594,1077.88 252.153,1107.35 252.713,1078.46 253.272,1106.07 253.831,1111.61 254.39,1133.86 254.95,1158.07 255.509,1161.5 256.068,1133.28 256.627,1172.85 257.187,1159.19 257.746,1161.4 258.305,1179.17 258.864,1213.73 259.424,1228.32 259.983,1263.74 260.542,1214.55 261.101,1218.03 261.661,1249.43 262.22,1197.23 262.779,1200.14 263.338,1198.11 263.898,1215.2 264.457,1165.62 265.016,1223.03 265.575,1223.69 266.135,1208.22 266.694,1212.07 267.253,1214.65 267.812,1198.4 268.372,1186.09 268.931,1223.67 269.49,1243.01 270.049,1213.35 270.609,1213.74 271.168,1183.43 271.727,1234.05 272.286,1220.08 272.846,1187.26 273.405,1192.95 273.964,1211.36 274.523,1145.96 275.083,1170.09 275.642,1182.07 276.201,1151.68 276.76,1143.23 277.32,1114.15 277.879,1123.21 278.438,1111.09 278.997,1136.24 279.557,1125.71 280.116,1132.63 280.675,1172.2 281.234,1158.02 281.794,1163.17 282.353,1184.19 282.912,1170.98 283.471,1159.21 284.031,1164.34 284.59,1153.03 285.149,1143.35 285.708,1164.6 286.268,1133.49 286.827,1125.06 287.386,1100.32 287.945,1110.69 288.505,1134.29 289.064,1142.58 289.623,1132.98 290.182,1125.21 290.742,1132.19 291.301,1091.05 291.86,1119.18 292.419,1093.5 292.979,1051.11 293.538,1061.72 294.097,1056.83 294.656,1053.7 295.216,1080.92 295.775,1091.34 296.334,1067.44 296.893,1060.08 297.453,1072.01 298.012,1066.4 298.571,1041.19 299.13,1031.8 299.69,1041.62 300.249,1054.85 300.808,1080.08 301.368,1090.64 301.927,1082.24 302.486,1071.13 303.045,1098.44 303.605,1123 304.164,1083.19 304.723,1077.73 305.282,1085.16 305.842,1075.55 306.401,1048.16 306.96,1056.13 307.519,1033.11 308.079,1013.1 308.638,958.586 309.197,971.36 309.756,955.749 310.316,951.5 310.875,966.517 311.434,945.787 311.993,944.05 312.553,925.121 313.112,921.326 313.671,905.021 314.23,905.182 314.79,889.132 315.349,907.083 315.908,956.169 316.467,952.876 317.027,951.458 317.586,949.393 318.145,945.149 318.704,945.44 319.264,943.876 319.823,922.221 320.382,918.77 320.941,883.778 321.501,884.08 322.06,883.156 322.619,886.052 323.178,886.733 323.738,868.025 324.297,918.31 324.856,901.017 325.415,917.573 325.975,886.233 326.534,854.319 327.093,871.146 327.652,871.698 328.212,874.584 328.771,892.349 329.33,907.695 329.889,924.529 330.449,957.308 331.008,968.28 331.567,962.58 332.126,972.61 332.686,968.452 333.245,946.049 333.804,990.04 334.363,983.332 334.923,979.184 335.482,955.377 336.041,966.267 336.6,963.011 337.16,957.884 337.719,955.984 338.278,970.306 338.837,961.035 339.397,970.476 339.956,933.735 340.515,948.614 341.074,976.512 341.634,1019.11 342.193,1041.45 342.752,1063.17 343.311,1057.3 343.871,1078.9 344.43,1051.58 344.989,1038.62 345.548,1013.34 346.108,1020.74 346.667,977.594 347.226,970.668 347.785,966.202 348.345,980.054 348.904,990.521 349.463,984.631 350.022,979.591 350.582,1003.71 351.141,966.825 351.7,959.161 352.259,957.591 352.819,965.66 353.378,941.748 353.937,917.828 354.496,898.115 355.056,927.685 355.615,905.273 356.174,934.885 356.733,946.825 357.293,953.326 357.852,980.058 358.411,984.878 358.97,992.094 359.53,998.757 360.089,971.491 360.648,982.009 361.207,1018.59 361.767,1009.84 362.326,1018.73 362.885,1007.09 363.444,984.247 364.004,973.417 364.563,982.814 365.122,962.366 365.681,957.848 366.241,951.887 366.8,943.265 367.359,987.038 367.918,978.52 368.478,955.226 369.037,946.981 369.596,906.683 370.155,902.746 370.715,879.752 371.274,845.859 371.833,859.3 372.392,856.497 372.952,758.726 373.511,780.232 374.07,781.225 374.629,798.415 375.189,782.79 375.748,800.6 376.307,801.689 376.866,786.365 377.426,788.658 377.985,790.703 378.544,756.934 379.103,762.72 379.663,731.507 380.222,751.824 380.781,755.334 381.34,775.445 381.9,794.694 382.459,812.353 383.018,799.365 383.577,816.967 384.137,816.802 384.696,816.567 385.255,829.396 385.814,846.992 386.374,828.17 386.933,862.374 387.492,859.79 388.051,872.711 388.611,884.537 389.17,882.624 389.729,846.304 390.288,846.849 390.848,860.96 391.407,872.073 391.966,864.111 392.525,844.326 393.085,875.773 393.644,907.217 394.203,916.528 394.762,908.503 395.322,836.831 395.881,871.225 396.44,898.182 396.999,908.373 397.559,872.965 398.118,854.933 398.677,853.251 399.236,882.961 399.796,848.061 400.355,844.069 400.914,859.292 401.473,873.29 402.033,868.274 402.592,865.439 403.151,875.834 403.71,852.981 404.27,831.856 404.829,864.456 405.388,863.148 405.947,862.946 406.507,844.716 407.066,798.541 407.625,816.534 408.184,847.86 408.744,860.909 409.303,875.278 409.862,898.583 410.421,907.771 410.981,917.225 411.54,876.949 412.099,868.982 412.658,846.98 413.218,858.827 413.777,855.931 414.336,866.893 414.895,863.273 415.455,855.262 416.014,857.418 416.573,902.117 417.132,831.633 417.692,811.159 418.251,810.174 418.81,839.592 419.369,822.051 419.929,789.466 420.488,788.989 421.047,770.066 421.606,786.476 422.166,787.022 422.725,771.899 423.284,769.836 423.843,768.76 424.403,801.589 424.962,802.517 425.521,782.196 426.08,783.302 426.64,752.511 427.199,721.174 427.758,739.264 428.318,704.821 428.877,753.662 429.436,736.111 429.995,722.975 430.555,712.712 431.114,729.618 431.673,730.796 432.232,694.942 432.792,712.875 433.351,700.382 433.91,704.482 434.469,669.908 435.029,657.804 435.588,661.692 436.147,653.978 436.706,642.739 437.266,684.315 437.825,702.029 438.384,737.606 438.943,738.605 439.503,738.298 440.062,771.429 440.621,739.427 441.18,743.46 441.74,759.181 442.299,790.336 442.858,758.032 443.417,775.853 443.977,776.254 444.536,806.216 445.095,818.33 445.654,780.783 446.214,816.402 446.773,779.703 447.332,761.293 447.891,743.737 448.451,762.355 449.01,680.093 449.569,666.264 450.128,668.556 450.688,690.01 451.247,709.105 451.806,725.135 452.365,724.348 452.925,675.805 453.484,665.51 454.043,668.768 454.602,656.162 455.162,663.387 455.721,681.942 456.28,701.036 456.839,703.56 457.399,722.974 457.958,726.372 458.517,708.215 459.076,739.167 459.636,718.636 460.195,750.263 460.754,765.77 461.313,749.193 461.873,766.462 462.432,765.462 462.991,767.068 463.55,765.972 464.11,794.222 464.669,759.512 465.228,776.264 465.787,741.676 466.347,757.817 466.906,753.455 467.465,768.614 468.024,800.374 468.584,797.103 469.143,811.887 469.702,807.932 470.261,789.331 470.821,822.492 471.38,817.672 471.939,784.252 472.498,799.215 473.058,813.386 473.617,761.745 474.176,759.237 474.735,805.393 475.295,803.111 475.854,804.681 476.413,786.126 476.972,738.46 477.532,752.415 478.091,751.154 478.65,735.421 479.209,718.818 479.769,705.605 480.328,725.183 480.887,740.489 481.446,742.515 482.006,759.258 482.565,775.685 483.124,741.54 483.683,725.821 484.243,741.786 484.802,726.795 485.361,727.121 485.92,730.283 486.48,745.702 487.039,743.709 487.598,757.745 488.157,756.888 488.717,769.71 489.276,801.395 489.835,798.072 490.394,812.075 490.954,825.612 491.513,835.759 492.072,812.397 492.631,842.507 493.191,899.744 493.75,906.479 494.309,899.131 494.868,888.962 495.428,879.958 495.987,873.555 496.546,895.735 497.105,871.658 497.665,880.87 498.224,854.879 498.783,832.496 499.342,826.872 499.902,822.086 500.461,847.338 501.02,819.576 501.579,795.519 502.139,823.221 502.698,834.64 503.257,862.293 503.816,854.492 504.376,879.311 504.935,874.131 505.494,850.749 506.053,846.027 506.613,855.143 507.172,865.291 507.731,859.674 508.29,851.58 508.85,878.853 509.409,839.017 509.968,833.276 510.527,841.744 511.087,803.012 511.646,797.676 512.205,777.523 512.764,742.44 513.324,740.963 513.883,756.532 514.442,723.93 515.001,723.974 515.561,741.671 516.12,722.138 516.679,736.981 517.238,737.243 517.798,755.32 518.357,753.881 518.916,789.255 519.475,783.937 520.035,795.919 520.594,795.108 521.153,774.327 521.712,721.921 522.272,706.204 522.831,708.828 523.39,694.561 523.949,679.745 524.509,668.743 525.068,640.687 525.627,693.075 526.186,723.264 526.746,706.968 527.305,709.984 527.864,711.21 528.423,698.065 528.983,686.325 529.542,679.029 530.101,680.394 530.66,666.018 531.22,703.16 531.779,707.716 532.338,741.569 532.897,756.835 533.457,756.21 534.016,738.251 534.575,733.927 535.134,681.412 535.694,696.985 536.253,681.711 536.812,682.338 537.371,700.372 537.931,717.533 538.49,716.422 539.049,715.69 539.608,710.609 540.168,712.644 540.727,713.026 541.286,744.251 541.845,711.134 542.405,728.752 542.964,728.36 543.523,711.337 544.082,725.801 544.642,727.684 545.201,709.734 545.76,691.271 546.319,741.512 546.879,674.577 547.438,676.881 547.997,680.215 548.556,697.063 549.116,698.323 549.675,700.002 550.234,734.763 550.793,722.079 551.353,722.768 551.912,687.499 552.471,668.54 553.031,688.027 553.59,690.624 554.149,743.318 554.708,760.393 555.268,738.823 555.827,752.779 556.386,752.071 556.945,749.962 557.505,746.338 558.064,741.255 558.623,723.864 559.182,723.031 559.742,707.527 560.301,728.544 560.86,711.191 561.419,682.887 561.979,706.804 562.538,694.062 563.097,679.253 563.656,682.319 564.216,733.252 564.775,715.784 565.334,698.843 565.893,683.291 566.453,685.567 567.012,690.057 567.571,679.813 568.13,668.222 568.69,685.408 569.249,685.909 569.808,703.54 570.367,719.244 570.927,717.876 571.486,686.229 572.045,684.355 572.604,657.385 573.164,691.712 573.723,692.695 574.282,726.071 574.841,745.392 575.401,744.035 575.96,679.992 576.519,696.727 577.078,696.871 577.638,678.046 578.197,677.53 578.756,695.711 579.315,681.266 579.875,651.824 580.434,652.617 580.993,640.439 581.552,645.63 582.112,663.691 582.671,680.235 583.23,667.03 583.789,685.871 584.349,703.954 584.908,705.011 585.467,719.234 586.026,703.578 586.586,717.991 587.145,746.856 587.704,729.74 588.263,731.774 588.823,712.168 589.382,728.36 589.941,759.531 590.5,743.146 591.06,730.146 591.619,750.328 592.178,780.5 592.737,757.852 593.297,753.459 593.856,786.961 594.415,815.043 594.974,796.596 595.534,793.969 596.093,755.595 596.652,723.088 597.211,755.526 597.771,752.669 598.33,767.546 598.889,732.313 599.448,746.844 600.008,746.358 600.567,728.073 601.126,758.706 601.685,787.77 602.245,799.625 602.804,765.274 603.363,744.04 603.922,744.137 604.482,724.903 605.041,724.447 605.6,703.465 606.159,685.643 606.719,690.259 607.278,691.213 607.837,692.007 608.396,644.936 608.956,644.535 609.515,646.949 610.074,666.566 610.633,665.507 611.193,683.727 611.752,717.137 612.311,746.865 612.87,761.349 613.43,739.897 613.989,737.694 614.548,751.129 615.107,715.595 615.667,698.033 616.226,683.428 616.785,688.302 617.344,687.305 617.904,650.738 618.463,671.146 619.022,656.306 619.581,642.045 620.141,629.959 620.7,635.541 621.259,639.279 621.818,627.018 622.378,618.871 622.937,622.61 623.496,626.444 624.055,615.141 624.615,602.126 625.174,623.13 625.733,646.145 626.292,666.251 626.852,670.845 627.411,690.145 627.97,691.984 628.529,707.944 629.089,709.438 629.648,741.097 630.207,738.326 630.766,733.573 631.326,731.021 631.885,762.788 632.444,760.902 633.003,742.161 633.563,758.493 634.122,755.442 634.681,753.864 635.24,751.978 635.8,764.881 636.359,761.585 636.918,759.464 637.477,774.588 638.037,786.7 638.596,762.284 639.155,757.188 639.714,755.256 640.274,752.454 640.833,749.924 641.392,762.857 641.951,773.929 642.511,785.9 643.07,798.718 643.629,764.975 644.188,778.744 644.748,788.782 645.307,798.922 645.866,778.27 646.425,871.79 646.985,877.219 647.544,863.812 648.103,840.074 648.662,848.725 649.222,823.834 649.781,772.442 650.34,735.637 650.899,719.061 651.459,703.648 652.018,721.279 652.577,702.886 653.136,715.692 653.696,715.473 654.255,696.281 654.814,681.666 655.373,696.932 655.933,712.688 656.492,693.174 657.051,728.015 657.61,742.553 658.17,757.265 658.729,754.975 659.288,733.818 659.847,762.282 660.407,741.237 660.966,772.203 661.525,720.82 662.084,705.472 662.644,751.41 663.203,779.275 663.762,745.924 664.321,776.61 664.881,784.328 665.44,778.906 665.999,773.324 666.558,804.501 667.118,801.289 667.677,796.238 668.236,793.24 668.795,788.771 669.355,766.561 669.914,794.85 670.473,791.396 671.032,833.247 671.592,824.017 672.151,804.351 672.71,767.682 673.269,795.077 673.829,775.097 674.388,740.253 674.947,756.89 675.506,734.956 676.066,697.69 676.625,663.658 677.184,695.977 677.743,713.147 678.303,679.549 678.862,660.654 679.421,695.027 679.981,710.184 680.54,691.652 681.099,645.832 681.658,651.825 682.218,652.175 682.777,683.19 683.336,673.181 683.895,672.882 684.455,675.292 685.014,675.631 685.573,694.951 686.132,697.062 686.692,681.717 687.251,695.18 687.81,696.12 688.369,728.161 688.929,725.378 689.488,740.395 690.047,720.166 690.606,703.224 691.166,749.099 691.725,699.962 692.284,701.22 692.843,701.385 693.403,686.159 693.962,701.808 694.521,705.578 695.08,676.797 695.64,676.076 696.199,661.627 696.758,646.528 697.317,614.295 697.877,617.995 698.436,603.529 698.995,642.165 699.554,646.053 700.114,662.733 700.673,647.906 701.232,650.711 701.791,652.145 702.351,672.002 702.91,669.184 703.469,657.032 704.028,654.678 704.588,639.159 705.147,627.55 705.706,633.328 706.265,619.435 706.825,638.12 707.384,655.766 707.943,659.284 708.502,657.63 709.062,689.821 709.621,670.659 710.18,625.485 710.739,629.274 711.299,646.794 711.858,644.809 712.417,632.04 712.976,667.582 713.536,638.713 714.095,625.458 714.654,645.101 715.213,633.63 715.773,652.843 716.332,635.155 716.891,642.385 717.45,646.156 718.01,631.517 718.569,632.459 719.128,602.661 719.687,623.372 720.247,645.877 720.806,680.139 721.365,681.446 721.924,680.747 722.484,698.356 723.043,698.227 723.602,735.025 724.161,734.221 724.721,748.16 725.28,730.957 725.839,731.131 726.398,729.193 726.958,679.45 727.517,667.901 728.076,670.151 728.635,687.442 729.195,672.613 729.754,706.218 730.313,687.283 730.872,691.464 731.432,673.573 731.991,643.442 732.55,649.355 733.109,655.471 733.669,640.813 734.228,677.6 734.787,660.78 735.346,660.599 735.906,674.746 736.465,709.958 737.024,708.631 737.583,692.789 738.143,678.637 738.702,696.927 739.261,679.986 739.82,699.606 740.38,716.942 740.939,730.454 741.498,696.37 742.057,698.578 742.617,712.868 743.176,663.524 743.735,665.481 744.294,665.384 744.854,696.758 745.413,707.931 745.972,707.421 746.531,723.603 747.091,755.779 747.65,740.003 748.209,720.362 748.768,738.369 749.328,734.46 749.887,767.103 750.446,760.608 751.005,773.636 751.565,765.888 752.124,763.333 752.683,761.441 753.242,755.556 753.802,752.75 754.361,745.79 754.92,741.968 755.479,722.844 756.039,701.792 756.598,670.186 757.157,688.319 757.716,671.75 758.276,688.896 758.835,706.393 759.394,707.451 759.953,707.427 760.513,752.834 761.072,733.429 761.631,718.558 762.19,717.953 762.75,698.465 763.309,682.35 763.868,697.897 764.427,698.187 764.987,712.467 765.546,709.35 766.105,678.272 766.664,677.942 767.224,694.336 767.783,711.548 768.342,730.845 768.901,728.893 769.461,707.409 770.02,740.219 770.579,737.946 771.138,754.211 771.698,752.906 772.257,764.036 772.816,742.144 773.375,736.777 773.935,738.713 774.494,734.482 775.053,718.07 775.612,733.598 776.172,714.563 776.731,695.719 777.29,694.843 777.849,710.692 778.409,725.925 778.968,726.083 779.527,740.581 780.086,705.563 780.646,669.605 781.205,684.692 781.764,653.79 782.323,658.913 782.883,661.565 783.442,693.304 784.001,689.968 784.56,657.274 785.12,628.215 785.679,617.629 786.238,603.724 786.797,624.203 787.357,627.08 787.916,645.443 788.475,612.391 789.034,648.683 789.594,684.573 790.153,701.689 790.712,734.494 791.271,684.073 791.831,702.784 792.39,686.473 792.949,688.848 793.508,675.708 794.068,677.473 794.627,676.064 795.186,694.154 795.745,745.049 796.305,724.437 796.864,735.19 797.423,754.711 797.982,767.739 798.542,762.029 799.101,729.243 799.66,745.034 800.219,758.853 800.779,740.338 801.338,726.358 801.897,695.741 802.456,681.099 803.016,652.262 803.575,669.37 804.134,637.055 804.693,642.579 805.253,691.394 805.812,647.107 806.371,648.7 806.931,620.142 807.49,592.112 808.049,628.09 808.608,615.902 809.168,656.551 809.727,658.096 810.286,659.27 810.845,659.828 811.405,629.847 811.964,646.974 812.523,666.271 813.082,697.313 813.642,748.721 814.201,754.866 814.76,703.11 815.319,719.733 815.879,699.692 816.438,684.596 816.997,671.454 817.556,622.165 818.116,625.795 818.675,613.236 819.234,636.088 819.793,620.442 820.353,624.568 820.912,624.501 821.471,629.269 822.03,617.97 822.59,617.506 823.149,638.902 823.708,645.332 824.267,646.518 824.827,666.789 825.386,668.912 825.945,670.104 826.504,659.187 827.064,663.859 827.623,633.469 828.182,634.955 828.741,637.078 829.301,653.029 829.86,639.263 830.419,628.514 830.978,634.31 831.538,637.461 832.097,624.598 832.656,613.987 833.215,619.799 833.775,622.841 834.334,628.143 834.893,616.863 835.452,603.233 836.012,604.396 836.571,593.293 837.13,617.129 837.689,638.33 838.249,643.621 838.808,711.545 839.367,742.283 839.926,738.899 840.486,736.952 841.045,782.543 841.604,808.331 842.163,815.179 842.723,808.659 843.282,785.778 843.841,796.537 844.4,791.426 844.96,786.143 845.519,778.164 846.078,772.151 846.637,753.782 847.197,732.966 847.756,744.006 848.315,728.245 848.874,726.944 849.434,727.765 849.993,739.782 850.552,721.482 851.111,720.295 851.671,718.135 852.23,714.572 852.789,731.094 853.348,746.702 853.908,757.191 854.467,755.195 855.026,734.818 855.585,764.664 856.145,757.866 856.704,736.878 857.263,732.744 857.822,730.553 858.382,663.191 858.941,681.912 859.5,666.645 860.059,680.301 860.619,730.412 861.178,726.098 861.737,706.74 862.296,691.034 862.856,675.148 863.415,674.169 863.974,657.969 864.533,659.73 865.093,649.133 865.652,681.366 866.211,650.044 866.77,653.928 867.33,671.103 867.889,672.523 868.448,688.661 869.007,721.606 869.567,735.439 870.126,717.516 870.685,714.151 871.244,681.633 871.804,696.506 872.363,665.594 872.922,666.11 873.481,667.388 874.041,654.566 874.6,657.788 875.159,676.044 875.718,724.321 876.278,706.899 876.837,770.787 877.396,800.905 877.955,793.276 878.515,834.953 879.074,825.091 879.633,832.701 880.192,828.162 880.752,790.984 881.311,752.097 881.87,734.423 882.429,748.796 882.989,776.357 883.548,757.762 884.107,771.893 884.666,738.893 885.226,782.085 885.785,809.299 886.344,819.406 886.903,793.855 887.463,770.372 888.022,752.837 888.581,768.021 889.14,746.283 889.7,744.48 890.259,741.018 890.818,706.056 891.377,687.504 891.937,672.592 892.496,625.158 893.055,626.54 893.614,629.747 894.174,616.496 894.733,636.663 895.292,654.851 895.851,639.627 896.411,612.464 896.97,614.515 897.529,604.285 898.088,652.72 898.648,652.742 899.207,657.679 899.766,676.95 900.325,662.095 900.885,679.344 901.444,680.017 902.003,694.574 902.562,694.114 903.122,694.871 903.681,690.67 904.24,679.028 904.799,696.376 905.359,683.09 905.918,652.13 906.477,687.037 907.036,671.073 907.596,670.967 908.155,672.417 908.714,671.6 909.273,653.364 909.833,687.013 910.392,670.138 910.951,704.386 911.51,670.121 912.07,701.118 912.629,680.376 913.188,713.258 913.747,695.283 914.307,741.924 914.866,706.187 915.425,707.5 915.984,703.901 916.544,684.454 917.103,744.206 917.662,741.448 918.221,754.037 918.781,721.133 919.34,735.571 919.899,734.375 920.458,762.346 921.018,758.788 921.577,770.521 922.136,781.293 922.695,774.335 923.255,746.965 923.814,778.292 924.373,777.676 924.932,835.209 925.492,828.271 926.051,772.631 926.61,749.662 927.169,777.755 927.729,723.196 928.288,719.944 928.847,715.397 929.406,712.317 929.966,743.642 930.525,724.043 931.084,671.682 931.644,670.78 932.203,653.456 932.762,636.364 933.321,639.237 933.881,638.861 934.44,655.694 934.999,641.665 935.558,663.113 936.118,633.172 936.677,631.647 937.236,634.577 937.795,622.14 938.355,612.297 938.914,631.614 939.473,635.874 940.032,588.094 940.592,593.611 941.151,563.081 941.71,580.595 942.269,556.319 942.829,564.872 943.388,569.044 943.947,611.02 944.506,633.309 945.066,620.661 945.625,640.041 946.184,591.127 946.743,629.415 947.303,647.878 947.862,647.986 948.421,651.905 948.98,658.148 949.54,642.709 950.099,644.568 950.658,629.087 951.217,615.04 951.777,602.554 952.336,636.914 952.895,640.154 953.454,625.687 954.014,631.992 954.573,600.212 955.132,619.556 955.691,611.155 956.251,632.161 956.81,621.272 957.369,642.666 957.928,612.154 958.488,601.044 959.047,605.373 959.606,591.166 960.165,594.358 960.725,580.872 961.284,590.384 961.843,597.363 962.402,616.018 962.962,622.655 963.521,628.066 964.08,668.122 964.639,651.017 965.199,652.364 965.758,639.055 966.317,657.92 966.876,674.246 967.436,627.238 967.995,614.483 968.554,614.889 969.113,600.238 969.673,605.508 970.232,614.602 970.791,585.989 971.35,574.341 971.91,567.664 972.469,545.986 973.028,539.988 973.587,533.357 974.147,574.593 974.706,563.609 975.265,586.813 975.824,625.373 976.384,615.204 976.943,616.86 977.502,607.954 978.061,627.073 978.621,616.52 979.18,639.776 979.739,655.911 980.298,625.097 980.858,633.214 981.417,653.024 981.976,658.068 982.535,690.969 983.095,726.872 983.654,724.089 984.213,738.932 984.772,751.973 985.332,728.804 985.891,743.58 986.45,741.976 987.009,774.049 987.569,805.163 988.128,764.769 988.687,774.138 989.246,750.983 989.806,763.149 990.365,778.059 990.924,789.413 991.483,770.337 992.043,766.471 992.602,729.22 993.161,744.462 993.72,744.045 994.28,743.444 994.839,758.247 995.398,770.599 995.957,752.814 996.517,735.303 997.076,752.864 997.635,731.903 998.194,761.744 998.754,775.882 999.313,771.78 999.872,731.986 1000.43,776.331 1000.99,791.663 1001.55,802.394 1002.11,776.959 1002.67,757.484 1003.23,739.083 1003.79,749.067 1004.35,759.226 1004.91,753.652 1005.46,766.817 1006.02,699.779 1006.58,702.5 1007.14,719.855 1007.7,732.913 1008.26,762.245 1008.82,737.119 1009.38,735.559 1009.94,746.341 1010.5,728.662 1011.06,760.291 1011.62,772.04 1012.18,769.847 1012.73,763.351 1013.29,764.115 1013.85,776.751 1014.41,757.316 1014.97,773.692 1015.53,753.505 1016.09,764.581 1016.65,778.501 1017.21,741.385 1017.77,753.614 1018.33,734.303 1018.89,715.1 1019.45,714.193 1020.01,721.637 1020.56,688.887 1021.12,675.121 1021.68,694.144 1022.24,661.921 1022.8,680.106 1023.36,680.427 1023.92,665.412 1024.48,632.329 1025.04,617.107 1025.6,603.306 1026.16,573.503 1026.72,579.031 1027.28,586.489 1027.83,576.312 1028.39,580.55 1028.95,588.163 1029.51,607.147 1030.07,630.468 1030.63,669.506 1031.19,685.031 1031.75,667.894 1032.31,689.171 1032.87,655.047 1033.43,690.374 1033.99,690.922 1034.55,691.444 1035.1,707.026 1035.66,705.775 1036.22,735.175 1036.78,747.515 1037.34,744.565 1037.9,723.992 1038.46,735.936 1039.02,749.394 1039.58,759.535 1040.14,738.205 1040.7,717.316 1041.26,714.015 1041.82,699.49 1042.38,698.459 1042.93,700.133 1043.49,697.578 1044.05,678.594 1044.61,661.216 1045.17,646.895 1045.73,647.923 1046.29,679.656 1046.85,695.551 1047.41,662.628 1047.97,665.242 1048.53,668.489 1049.09,650.936 1049.65,620.437 1050.2,619.836 1050.76,638.457 1051.32,639.195 1051.88,626.448 1052.44,612.556 1053,665.922 1053.56,702.314 1054.12,704.444 1054.68,688.728 1055.24,722.744 1055.8,722.485 1056.36,723.832 1056.92,757.411 1057.48,734.31 1058.03,730.574 1058.59,763.782 1059.15,776.371 1059.71,775.012 1060.27,786.839 1060.83,783.109 1061.39,757.255 1061.95,752.471 1062.51,749.518 1063.07,743.932 1063.63,756.38 1064.19,800.617 1064.75,777.634 1065.3,771.086 1065.86,763.562 1066.42,726.096 1066.98,722.451 1067.54,701.161 1068.1,706.187 1068.66,716.664 1069.22,713.726 1069.78,695.533 1070.34,693.304 1070.9,673.858 1071.46,725.575 1072.02,719.73 1072.57,730.439 1073.13,691.443 1073.69,692.391 1074.25,720.63 1074.81,703.101 1075.37,700.216 1075.93,681.584 1076.49,683.787 1077.05,636.322 1077.61,641.677 1078.17,643.422 1078.73,662.561 1079.29,665.819 1079.85,682.664 1080.4,665.228 1080.96,679.355 1081.52,696.595 1082.08,696.748 1082.64,679.192 1083.2,646.362 1083.76,612.127 1084.32,632.613 1084.88,650.558 1085.44,669.656 1086,738.936 1086.56,733.75 1087.12,748.38 1087.67,763.066 1088.23,777.388 1088.79,752.848 1089.35,732.232 1089.91,748.553 1090.47,727.82 1091.03,693.943 1091.59,675.664 1092.15,643.684 1092.71,627.476 1093.27,662.771 1093.83,702.627 1094.39,718.044 1094.94,731.263 1095.5,747.171 1096.06,759.883 1096.62,720.3 1097.18,735.144 1097.74,716.516 1098.3,694.891 1098.86,644.783 1099.42,628.643 1099.98,633.988 1100.54,621.336 1101.1,638.766 1101.66,673.791 1102.22,658.571 1102.77,644.56 1103.33,659.134 1103.89,593.686 1104.45,594.558 1105.01,647.361 1105.57,665.62 1106.13,682.527 1106.69,699.437 1107.25,696.456 1107.81,693.547 1108.37,726.366 1108.93,722.695 1109.49,720.177 1110.04,674.741 1110.6,676.749 1111.16,680.975 1111.72,668.064 1112.28,667.163 1112.84,683.484 1113.4,681.372 1113.96,646.584 1114.52,664.191 1115.08,651.693 1115.64,671.055 1116.2,686.693 1116.76,737.537 1117.31,735.977 1117.87,748.845 1118.43,764.044 1118.99,773.719 1119.55,755.831 1120.11,754.692 1120.67,731.211 1121.23,682.538 1121.79,701.029 1122.35,716.144 1122.91,711.633 1123.47,745.469 1124.03,743.4 1124.59,722.585 1125.14,752.375 1125.7,735.784 1126.26,715.7 1126.82,700.374 1127.38,700.305 1127.94,732.452 1128.5,682.745 1129.06,702.695 1129.62,685.768 1130.18,691.017 1130.74,691.286 1131.3,673.887 1131.86,661.583 1132.41,666.265 1132.97,682.681 1133.53,667.105 1134.09,680.519 1134.65,665.809 1135.21,665.189 1135.77,650.297 1136.33,624.215 1136.89,643.262 1137.45,631.785 1138.01,681.794 1138.57,686.135 1139.13,706.165 1139.68,738.139 1140.24,722.758 1140.8,734.69 1141.36,710.249 1141.92,725.967 1142.48,705.063 1143.04,685.129 1143.6,697.299 1144.16,679.315 1144.72,679.115 1145.28,665.57 1145.84,683.67 1146.4,681.625 1146.96,683.683 1147.51,714.833 1148.07,711.084 1148.63,675.437 1149.19,708.472 1149.75,688.761 1150.31,660.496 1150.87,659.158 1151.43,691.607 1151.99,674.845 1152.55,674.644 1153.11,675.419 1153.67,676.666 1154.23,707.979 1154.78,689.634 1155.34,689.368 1155.9,723.535 1156.46,718.043 1157.02,720.813 1157.58,753.101 1158.14,765.934 1158.7,760.375 1159.26,788.136 1159.82,767.762 1160.38,777.916 1160.94,773.072 1161.5,719.593 1162.05,685.388 1162.61,701.891 1163.17,635.975 1163.73,656.506 1164.29,623.518 1164.85,628.354 1165.41,663.239 1165.97,647.821 1166.53,649.291 1167.09,650.49 1167.65,634.296 1168.21,672.578 1168.77,709.212 1169.33,704.406 1169.88,685.722 1170.44,686.971 1171,685.384 1171.56,639.716 1172.12,679.287 1172.68,682.715 1173.24,750.191 1173.8,762.861 1174.36,741.27 1174.92,740.697 1175.48,737.359 1176.04,749.471 1176.6,728.646 1177.15,761.909 1177.71,740.903 1178.27,725.76 1178.83,707.013 1179.39,722.523 1179.95,687.017 1180.51,672.015 1181.07,672.381 1181.63,690.214 1182.19,723.96 1182.75,689.746 1183.31,689.838 1183.87,705.931 1184.43,674.01 1184.98,675.126 1185.54,669.202 1186.1,639.924 1186.66,672.92 1187.22,709.146 1187.78,712.181 1188.34,694.902 1188.9,678.006 1189.46,679.789 1190.02,697.826 1190.58,661.844 1191.14,629.417 1191.7,649.627 1192.25,649.744 1192.81,638.325 1193.37,620.218 1193.93,641.784 1194.49,660.037 1195.05,710.89 1195.61,709.685 1196.17,692.636 1196.73,694.346 1197.29,694.484 1197.85,692.755 1198.41,674.89 1198.97,642.18 1199.52,626.448 1200.08,615.713 1200.64,635.433 1201.2,591.662 1201.76,583.606 1202.32,572.858 1202.88,548.431 1203.44,540.885 1204,561.459 1204.56,551.023 1205.12,540.144 1205.68,545.288 1206.24,551.495 1206.8,557.188 1207.35,564.37 1207.91,539.023 1208.47,580.432 1209.03,632.698 1209.59,665.039 1210.15,686.275 1210.71,703.628 1211.27,686.779 1211.83,701.688 1212.39,734.135 1212.95,698.63 1213.51,682.877 1214.07,632.023 1214.62,621.623 1215.18,644.696 1215.74,645.871 1216.3,596.406 1216.86,588.494 1217.42,624.996 1217.98,644.431 1218.54,661.582 1219.1,660.124 1219.66,665.284 1220.22,650.045 1220.78,619.655 1221.34,621.891 1221.89,610.622 1222.45,613.939 1223.01,632.308 1223.57,634.563 1224.13,619.846 1224.69,625.699 1225.25,612.193 1225.81,649.194 1226.37,620.803 1226.93,607.946 1227.49,595.291 1228.05,595.647 1228.61,611.516 1229.17,630.506 1229.72,653.882 1230.28,639.02 1230.84,656.796 1231.4,674.914 1231.96,689.791 1232.52,720.38 1233.08,738.016 1233.64,737.517 1234.2,717.07 1234.76,696.314 1235.32,663.614 1235.88,660.041 1236.44,678.143 1236.99,667.968 1237.55,686.977 1238.11,688.036 1238.67,690.579 1239.23,677.432 1239.79,690.286 1240.35,706.247 1240.91,673.267 1241.47,676.449 1242.03,662.773 1242.59,648.734 1243.15,620.376 1243.71,606.538 1244.26,607.447 1244.82,645.526 1245.38,620.202 1245.94,657.124 1246.5,626.455 1247.06,663.215 1247.62,664.987 1248.18,682.828 1248.74,699.967 1249.3,729.107 1249.86,726.827 1250.42,739.732 1250.98,756.575 1251.54,752.167 1252.09,747.784 1252.65,745.865 1253.21,707.92 1253.77,655.491 1254.33,658.675 1254.89,689.858 1255.45,688.955 1256.01,675.273 1256.57,692.988 1257.13,694.681 1257.69,723.908 1258.25,736.293 1258.81,703.209 1259.36,718.67 1259.92,649.129 1260.48,631.849 1261.04,665.976 1261.6,686.06 1262.16,686.847 1262.72,686.698 1263.28,685.761 1263.84,718.721 1264.4,701.523 1264.96,702.041 1265.52,698.963 1266.08,647.201 1266.63,650.688 1267.19,635.282 1267.75,657.415 1268.31,693.157 1268.87,675.659 1269.43,693.682 1269.99,740.704 1270.55,739.437 1271.11,719.394 1271.67,747.573 1272.23,727.741 1272.79,726.498 1273.35,753.093 1273.91,733.054 1274.46,749.233 1275.02,715.147 1275.58,727.157 1276.14,708.793 1276.7,706.397 1277.26,689.624 1277.82,672.964 1278.38,659.702 1278.94,673.279 1279.5,673.729 1280.06,753.998 1280.62,732.687 1281.18,734.866 1281.73,716.572 1282.29,760.612 1282.85,771.331 1283.41,766.003 1283.97,774.939 1284.53,750.104 1285.09,778.98 1285.65,771.397 1286.21,734.469 1286.77,719.003 1287.33,719.837 1287.89,732.479 1288.45,730.128 1289,747.829 1289.56,759.272 1290.12,771.507 1290.68,767.521 1291.24,794.571 1291.8,803.927 1292.36,814.625 1292.92,805.586 1293.48,797.017 1294.04,789.422 1294.6,721.413 1295.16,701.316 1295.72,685.453 1296.28,687.814 1296.83,688.438 1297.39,688.436 1297.95,669.535 1298.51,638.606 1299.07,641.109 1299.63,644.127 1300.19,660.322 1300.75,660.254 1301.31,659.985 1301.87,695.078 1302.43,680.497 1302.99,682.957 1303.55,665.754 1304.1,666.428 1304.66,651.332 1305.22,686.656 1305.78,681.904 1306.34,730.049 1306.9,760.677 1307.46,789.372 1308.02,767.928 1308.58,809.388 1309.14,806.54 1309.7,766.684 1310.26,782.239 1310.82,730.033 1311.38,725.692 1311.93,771.664 1312.49,798.723 1313.05,790.476 1313.61,781.724 1314.17,760.021 1314.73,723.26 1315.29,690.214 1315.85,707.265 1316.41,723.514 1316.97,735.801 1317.53,684.948 1318.09,683.077 1318.65,682.869 1319.2,650.856 1319.76,671.67 1320.32,605.439 1320.88,577.095 1321.44,595.033 1322,596.996 1322.56,613.836 1323.12,589.222 1323.68,581.519 1324.24,604.947 1324.8,591.291 1325.36,626.689 1325.92,630.353 1326.47,648.879 1327.03,682.222 1327.59,662.582 1328.15,625.476 1328.71,647.581 1329.27,683.071 1329.83,669.378 1330.39,670.575 1330.95,674.23 1331.51,690.677 1332.07,689.729 1332.63,689.996 1333.19,686.785 1333.75,719.686 1334.3,730.941 1334.86,710.918 1335.42,692.787 1335.98,690.759 1336.54,690.673 1337.1,690.8 1337.66,758.559 1338.22,770.007 1338.78,735.303 1339.34,778.236 1339.9,803.056 1340.46,762.704 1341.02,773.491 1341.57,767.384 1342.13,717.737 1342.69,680.765 1343.25,683.539 1343.81,685.485 1344.37,651.908 1344.93,667.998 1345.49,652.917 1346.05,625.756 1346.61,596.41 1347.17,616.75 1347.73,620.718 1348.29,639.905 1348.84,646.776 1349.4,650.868 1349.96,673.352 1350.52,708.083 1351.08,678.683 1351.64,660.031 1352.2,665.735 1352.76,651.359 1353.32,671.588 1353.88,689.101 1354.44,685.952 1355,719.272 1355.56,733.42 1356.12,694.813 1356.67,695.035 1357.23,643.932 1357.79,663.841 1358.35,696.475 1358.91,697.283 1359.47,679.593 1360.03,666.185 1360.59,681.063 1361.15,667.85 1361.71,655.518 1362.27,644.673 1362.83,614.492 1363.39,599.806 1363.94,621.165 1364.5,623.862 1365.06,609.9 1365.62,593.767 1366.18,581.358 1366.74,588.806 1367.3,582.219 1367.86,639.762 1368.42,663.182 1368.98,647.723 1369.54,633.408 1370.1,669.504 1370.66,674.092 1371.21,692.92 1371.77,694.269 1372.33,647.862 1372.89,618.27 1373.45,604.902 1374.01,591.952 1374.57,629.611 1375.13,632.086 1375.69,622.737 1376.25,628.304 1376.81,681.902 1377.37,699.302 1377.93,677.119 1378.49,760.941 1379.04,759.072 1379.6,756.407 1380.16,756.19 1380.72,771.002 1381.28,765.198 1381.84,762.073 1382.4,787.432 1382.96,795.241 1383.52,791.075 1384.08,768.906 1384.64,782.43 1385.2,745.264 1385.76,808.023 1386.31,767.379 1386.87,763.848 1387.43,769.455 1387.99,768.493 1388.55,778.822 1389.11,777.839 1389.67,773.256 1390.23,767.631 1390.79,728.93 1391.35,741.483 1391.91,756.286 1392.47,766.916 1393.03,742.516 1393.58,676.728 1394.14,677.175 1394.7,677.461 1395.26,695.387 1395.82,723.441 1396.38,705.691 1396.94,685.822 1397.5,687.07 1398.06,700.832 1398.62,685.199 1399.18,635.983 1399.74,588.151 1400.3,581.315 1400.86,606.814 1401.41,614.557 1401.97,620.023 1402.53,591.535 1403.09,615.823 1403.65,634.558 1404.21,651.325 1404.77,651.332 1405.33,621.851 1405.89,627.95 1406.45,616.52 1407.01,588.65 1407.57,624.682 1408.13,631.166 1408.68,633.134 1409.24,702.428 1409.8,686.405 1410.36,637.515 1410.92,640.815 1411.48,657.425 1412.04,627.968 1412.6,628.051 1413.16,598.727 1413.72,585.675 1414.28,557.447 1414.84,563.375 1415.4,569.567 1415.95,561.742 1416.51,582.524 1417.07,586.821 1417.63,628.053 1418.19,537.911 1418.75,546.722 1419.31,556.757 1419.87,567.002 1420.43,573.228 1420.99,563.249 1421.55,572.331 1422.11,595.831 1422.67,649.243 1423.23,636.459 1423.78,685.361 1424.34,717.897 1424.9,732.066 1425.46,726.394 1426.02,675.414 1426.58,662.11 1427.14,692.588 1427.7,726.792 1428.26,723.01 1428.82,735.855 1429.38,766.336 1429.94,744.571 1430.5,738.473 1431.05,749.462 1431.61,744.263 1432.17,744.496 1432.73,754.108 1433.29,749.401 1433.85,708.774 1434.41,722.243 1434.97,704.266 1435.53,685.992 1436.09,716.013 1436.65,731.502 1437.21,730.458 1437.77,727.713 1438.33,724.448 1438.88,739.891 1439.44,752.449 1440,682.019 1440.56,701.369 1441.12,720.196 1441.68,682.912 1442.24,699.406 1442.8,686.37 1443.36,687.768 1443.92,704.468 1444.48,722.179 1445.04,721.416 1445.6,733.653 1446.15,726.187 1446.71,725.897 1447.27,756.594 1447.83,750.367 1448.39,715.982 1448.95,711.882 1449.51,757.505 1450.07,719.595 1450.63,697.253 1451.19,731.277 1451.75,725.244 1452.31,736.473 1452.87,734.302 1453.42,750.365 1453.98,729.325 1454.54,789.496 1455.1,785.478 1455.66,761.365 1456.22,694.708 1456.78,674.659 1457.34,644.637 1457.9,664.04 1458.46,679.954 1459.02,677.885 1459.58,694.553 1460.14,710.922 1460.7,710.213 1461.25,706.219 1461.81,688.276 1462.37,687.881 1462.93,670.001 1463.49,652.229 1464.05,671.457 1464.61,672.688 1465.17,674.283 1465.73,673.208 1466.29,655.029 1466.85,675.72 1467.41,676.453 1467.97,672.963 1468.52,675.724 1469.08,710.894 1469.64,741.66 1470.2,722.298 1470.76,717.041 1471.32,734.719 1471.88,697.834 1472.44,695.172 1473,693.759 1473.56,704.818 1474.12,705.911 1474.68,704.448 1475.24,719.019 1475.79,734.515 1476.35,717.608 1476.91,717.042 1477.47,750.664 1478.03,766.724 1478.59,748.755 1479.15,763.453 1479.71,757.731 1480.27,735.818 1480.83,733.56 1481.39,731.88 1481.95,763.446 1482.51,777.517 1483.07,772.599 1483.62,814.854 1484.18,806.389 1484.74,783.147 1485.3,791.019 1485.86,736.357 1486.42,750.724 1486.98,700.02 1487.54,682.981 1488.1,650.115 1488.66,667.186 1489.22,667.12 1489.78,683.76 1490.34,667.315 1490.89,687.366 1491.45,687.193 1492.01,737.625 1492.57,706.128 1493.13,722.859 1493.69,721.101 1494.25,702.516 1494.81,719.189 1495.37,702.903 1495.93,685.501 1496.49,669.042 1497.05,671.108 1497.61,673.556 1498.16,692.72 1498.72,676.857 1499.28,644.454 1499.84,648.682 1500.4,649.92 1500.96,649.08 1501.52,649.767 1502.08,651.106 1502.64,652.786 1503.2,639.813 1503.76,626.766 1504.32,595.711 1504.88,598.943 1505.44,584.318 1505.99,602.469 1506.55,604.388 1507.11,606.35 1507.67,590.452 1508.23,547.121 1508.79,551.169 1509.35,571.377 1509.91,560.524 1510.47,565.794 1511.03,588.058 1511.59,578.175 1512.15,598.131 1512.71,586.478 1513.26,592.897 1513.82,597.825 1514.38,618.572 1514.94,604.999 1515.5,607.15 1516.06,594.212 1516.62,583.653 1517.18,589.346 1517.74,609.339 1518.3,616.538 1518.86,638.58 1519.42,604.362 1519.98,596.281 1520.53,602.203 1521.09,622.503 1521.65,624.997 1522.21,678.845 1522.77,682.968 1523.33,664.761 1523.89,648.114 1524.45,617.837 1525.01,653.129 1525.57,687.12 1526.13,739.022 1526.69,737.257 1527.25,720.887 1527.81,670.617 1528.36,720.877 1528.92,720.865 1529.48,745.84 1530.04,775.783 1530.6,737.588 1531.16,702.459 1531.72,706.361 1532.28,724.768 1532.84,711.695 1533.4,680.134 1533.96,680.283 1534.52,667.844 1535.08,684.173 1535.63,651.683 1536.19,590.942 1536.75,597.85 1537.31,623.106 1537.87,589.896 1538.43,611.361 1538.99,629.883 1539.55,648.48 1540.11,635.807 1540.67,637.386 1541.23,641.324 1541.79,639.246 1542.35,640.418 1542.9,640.089 1543.46,673.505 1544.02,655.762 1544.58,656.614 1545.14,643.471 1545.7,648.111 1546.26,631.711 1546.82,667.707 1547.38,684.163 1547.94,687.115 1548.5,686.854 1549.06,687.412 1549.62,689.612 1550.18,690.159 1550.73,675.5 1551.29,679.448 1551.85,693.491 1552.41,706.813 1552.97,705.1 1553.53,704.602 1554.09,683.294 1554.65,697.982 1555.21,728.705 1555.77,744.198 1556.33,745.662 1556.89,741.915 1557.45,772.084 1558,781.248 1558.56,811.335 1559.12,770.681 1559.68,800.254 1560.24,774.833 1560.8,789.678 1561.36,779.944 1561.92,789.904 1562.48,770.061 1563.04,777.956 1563.6,789.508 1564.16,802.896 1564.72,796.054 1565.28,790.107 1565.83,751.667 1566.39,746.086 1566.95,743.805 1567.51,718.99 1568.07,731.817 1568.63,710.425 1569.19,709.823 1569.75,724.607 1570.31,722.154 1570.87,688.723 1571.43,687.133 1571.99,689.24 1572.55,689.554 1573.1,705.122 1573.66,735.105 1574.22,728.586 1574.78,740.536 1575.34,723.311 1575.9,731.925 1576.46,728.85 1577.02,709.904 1577.58,693.267 1578.14,661.749 1578.7,666.849 1579.26,665.925 1579.82,650.892 1580.37,640.02 1580.93,640.866 1581.49,623.956 1582.05,625.465 1582.61,613.559 1583.17,603.055 1583.73,626.067 1584.29,631.725 1584.85,647.104 1585.41,630.98 1585.97,651.929 1586.53,689.251 1587.09,647.069 1587.65,646.952 1588.2,635.22 1588.76,623.905 1589.32,629.5 1589.88,631.933 1590.44,651.333 1591,686.084 1591.56,699.951 1592.12,699.035 1592.68,714.89 1593.24,714.495 1593.8,744.165 1594.36,709.398 1594.92,724.267 1595.47,770.778 1596.03,768.273 1596.59,792.996 1597.15,803.994 1597.71,781.752 1598.27,777.484 1598.83,788.99 1599.39,781.054 1599.95,760.007 1600.51,771.772 1601.07,768.332 1601.63,782.749 1602.19,792.888 1602.74,770.291 1603.3,749.897 1603.86,734.33 1604.42,714.622 1604.98,730.109 1605.54,744.287 1606.1,724.126 1606.66,688.794 1607.22,654.887 1607.78,654.814 1608.34,646.01 1608.9,668.009 1609.46,651.13 1610.02,636.135 1610.57,622.181 1611.13,659.162 1611.69,627.942 1612.25,633.174 1612.81,635.943 1613.37,654.429 1613.93,659.21 1614.49,693.545 1615.05,658.423 1615.61,627.708 1616.17,646.945 1616.73,633.119 1617.29,634.068 1617.84,637.487 1618.4,606.452 1618.96,612.071 1619.52,616.65 1620.08,571.386 1620.64,542.824 1621.2,563.142 1621.76,569.943 1622.32,575.618 1622.88,582.683 1623.44,539.333 1624,565.993 1624.56,588.216 1625.11,591.854 1625.67,579.529 1626.23,588.984 1626.79,562.789 1627.35,569.27 1627.91,576.547 1628.47,601.756 1629.03,638.786 1629.59,655.493 1630.15,688.749 1630.71,723.455 1631.27,705.641 1631.83,723.205 1632.39,686.186 1632.94,689.124 1633.5,705.258 1634.06,753.602 1634.62,750.565 1635.18,730.118 1635.74,726.633 1636.3,724.407 1636.86,738.956 1637.42,751.673 1637.98,718.385 1638.54,716.635 1639.1,681.192 1639.66,650.158 1640.21,649.454 1640.77,666.877 1641.33,651.801 1641.89,653.14 1642.45,637.684 1643.01,658.526 1643.57,645.039 1644.13,630.069 1644.69,622.032 1645.25,638.919 1645.81,641.499 1646.37,674.833 1646.93,674.901 1647.48,663.357 1648.04,651.132 1648.6,700.511 1649.16,717.365 1649.72,696.54 1650.28,697.7 1650.84,679.543 1651.4,680.518 1651.96,695.741 1652.52,648.873 1653.08,648.108 1653.64,698.123 1654.2,677.8 1654.76,677.711 1655.31,660.414 1655.87,660.353 1656.43,661.245 1656.99,662.562 1657.55,661.72 1658.11,690.642 1658.67,705.33 1659.23,732.876 1659.79,729.132 1660.35,713.594 1660.91,710.507 1661.47,709.431 1662.03,691.653 1662.58,707.221 1663.14,754.193 1663.7,749.56 1664.26,729.943 1664.82,759.41 1665.38,771.153 1665.94,782.595 1666.5,776.852 1667.06,755.426 1667.62,699.544 1668.18,715.858 1668.74,728.846 1669.3,707.949 1669.85,687.494 1670.41,667.949 1670.97,683.794 1671.53,681.655 1672.09,682.278 1672.65,670.542 1673.21,671.382 1673.77,641.209 1674.33,642.293 1674.89,662.199 1675.45,679.557 1676.01,681.878 1676.57,683.631 1677.13,648.665 1677.68,686.799 1678.24,687.669 1678.8,701.426 1679.36,688.189 1679.92,704.005 1680.48,719.196 1681.04,732.226 1681.6,710.541 1682.16,724.238 1682.72,720.356 1683.28,687.446 1683.84,687.52 1684.4,669.262 1684.95,686.186 1685.51,671.222 1686.07,671.69 1686.63,690.157 1687.19,691.421 1687.75,674.918 1688.31,628.018 1688.87,647.021 1689.43,600.855 1689.99,638.879 1690.55,609.907 1691.11,628.203 1691.67,660.715 1692.23,627.93 1692.78,629.879 1693.34,599.108 1693.9,584.825 1694.46,562.056 1695.02,584.418 1695.58,620.868 1696.14,592.443 1696.7,547.313 1697.26,573.351 1697.82,562.257 1698.38,605.563 1698.94,609.323 1699.5,628.931 1700.05,628.827 1700.61,627.905 1701.17,646.851 1701.73,650.424 1702.29,604.093 1702.85,653.889 1703.41,654.527 1703.97,672.763 1704.53,679.537 1705.09,677.591 1705.65,694.778 1706.21,713.682 1706.77,731.297 1707.32,730.869 1707.88,761.26 1708.44,776.852 1709,754.975 1709.56,760.541 1710.12,755.382 1710.68,770.151 1711.24,738.029 1711.8,719.258 1712.36,715.291 1712.92,728.202 1713.48,759.867 1714.04,755.758 1714.6,754.542 1715.15,768.339 1715.71,731.616 1716.27,694.951 1716.83,692.654 1717.39,694.232 1717.95,679.995 1718.51,666.205 1719.07,633.497 1719.63,602.429 1720.19,609.164 1720.75,599.743 1721.31,589.617 1721.87,575.635 1722.42,578.343 1722.98,583.339 1723.54,574.881 1724.1,597.074 1724.66,600.467 1725.22,605.38 1725.78,640.448 1726.34,657.345 1726.9,674.958 1727.46,674.021 1728.02,675.354 1728.58,710.568 1729.14,724.833 1729.69,722.175 1730.25,722.735 1730.81,736.057 1731.37,766.056 1731.93,794.875 1732.49,836.533 1733.05,815.139 1733.61,794.315 1734.17,756.954 1734.73,770.743 1735.29,716.457 1735.85,714.472 1736.41,730.31 1736.97,726.232 1737.52,737.238 1738.08,738.3 1738.64,779.073 1739.2,773.334 1739.76,767.794 1740.32,749.393 1740.88,777.542 1741.44,758.483 1742,738.624 1742.56,749.297 1743.12,711.897 1743.68,724.88 1744.24,705.447 1744.79,689.662 1745.35,655.641 1745.91,642.523 1746.47,641.216 1747.03,675.244 1747.59,659.921 1748.15,678.209 1748.71,660.76 1749.27,661.549 1749.83,630.767 1750.39,648.004 1750.95,634.191 1751.51,634.106 1752.06,620.204 1752.62,592.113 1753.18,645.839 1753.74,662.554 1754.3,645.07 1754.86,630.622 1755.42,632.081 1755.98,618.728 1756.54,634.238 1757.1,652.187 1757.66,640.796 1758.22,643.153 1758.78,644.421 1759.34,613.341 1759.89,636.281 1760.45,623.101 1761.01,623.979 1761.57,629.081 1762.13,633.241 1762.69,602.074 1763.25,587.212 1763.81,709.042 1764.37,689.838 1764.93,708.064 1765.49,710.584 1766.05,725.01 1766.61,756.773 1767.16,737.367 1767.72,704.994 1768.28,717.938 1768.84,698.478 1769.4,681.441 1769.96,681.953 1770.52,663.334 1771.08,664.528 1771.64,632.553 1772.2,668.573 1772.76,702.187 1773.32,735.933 1773.88,718.828 1774.43,717.733 1774.99,699.607 1775.55,681.932 1776.11,652.207 1776.67,639.654 1777.23,638.462 1777.79,626.711 1778.35,629.679 1778.91,650.163 1779.47,636.876 1780.03,625.739 1780.59,628.369 1781.15,647.161 1781.71,682.205 1782.26,685.385 1782.82,685.937 1783.38,700.779 1783.94,696.57 1784.5,679.647 1785.06,647.518 1785.62,649.751 1786.18,669.341 1786.74,685.165 1787.3,700.231 1787.86,699.455 1788.42,682.611 1788.98,649.842 1789.53,650.461 1790.09,668.074 1790.65,668.439 1791.21,668.118 1791.77,669.739 1792.33,651.586 1792.89,654.696 1793.45,654.042 1794.01,670.232 1794.57,672.826 1795.13,690.295 1795.69,704.978 1796.25,690.014 1796.8,686.625 1797.36,703.048 1797.92,716.963 1798.48,732.03 1799.04,713.723 1799.6,728.551 1800.16,729.771 1800.72,696.313 1801.28,695.105 1801.84,696.095 1802.4,682.027 1802.96,698.328 1803.52,679.897 1804.08,698.805 1804.63,680.947 1805.19,697.099 1805.75,663.764 1806.31,614.281 1806.87,604.212 1807.43,624.213 1807.99,631.162 1808.55,651.402 1809.11,671.489 1809.67,673.093 1810.23,674.874 1810.79,695.312 1811.35,709.566 1811.9,728.827 1812.46,711.902 1813.02,727.444 1813.58,721.768 1814.14,754.081 1814.7,703.988 1815.26,686.036 1815.82,683.893 1816.38,700.534 1816.94,683.609 1817.5,715.805 1818.06,775.547 1818.62,784.897 1819.18,810.615 1819.73,800.52 1820.29,825.633 1820.85,817.008 1821.41,792.061 1821.97,785.554 1822.53,749.074 1823.09,762.546 1823.65,757.962 1824.21,737.106 1824.77,732.275 1825.33,743.892 1825.89,759.083 1826.45,722.536 1827,722.884 1827.56,769.853 1828.12,748.821 1828.68,825.866 1829.24,850.473 1829.8,842.361 1830.36,816.936 1830.92,806.392 1831.48,802.082 1832.04,746.246 1832.6,742.319 1833.16,706.216 1833.72,687.756 1834.27,721.046 1834.83,734.887 1835.39,736.513 1835.95,716.652 1836.51,713.549 1837.07,694.539 1837.63,724.551 1838.19,706.712 \"/>\n<path clip-path=\"url(#clip433)\" d=\"M720.247 692.381 L720.806 692.381 L721.365 692.381 L721.924 692.381 L722.484 692.381 L723.043 692.381 L723.602 692.381 L724.161 692.381 L724.721 692.381 L725.28 692.381 L725.839 692.381 L726.398 692.381 L726.958 692.381 L727.517 692.381 L728.076 692.381 L728.635 692.381 L729.195 692.381 L729.754 692.381 L730.313 692.381 L730.872 692.381 L731.432 692.381 L731.991 692.381 L732.55 692.381 L733.109 692.381 L733.669 692.381 L734.228 692.381 L734.787 692.381 L735.346 692.381 L735.906 692.381 L736.465 692.381 L737.024 692.381 L737.583 692.381 L738.143 692.381 L738.702 692.381 L739.261 692.381 L739.82 692.381 L740.38 692.381 L740.939 692.381 L741.498 692.381 L742.057 692.381 L742.617 692.381 L743.176 692.381 L743.735 692.381 L744.294 692.381 L744.854 692.381 L745.413 692.381 L745.972 692.381 L746.531 692.381 L747.091 692.381 L747.65 692.381 L748.209 692.381 L748.768 692.381 L749.328 692.381 L749.887 692.381 L750.446 692.381 L751.005 692.381 L751.565 692.381 L752.124 692.381 L752.683 692.381 L753.242 692.381 L753.802 692.381 L754.361 692.381 L754.92 692.381 L755.479 692.381 L756.039 692.381 L756.598 692.381 L757.157 692.381 L757.716 692.381 L758.276 692.381 L758.835 692.381 L759.394 692.381 L759.953 692.381 L760.513 692.381 L761.072 692.381 L761.631 692.381 L762.19 692.381 L762.75 692.381 L763.309 692.381 L763.868 692.381 L764.427 692.381 L764.987 692.381 L765.546 692.381 L766.105 692.381 L766.664 692.381 L767.224 692.381 L767.783 692.381 L768.342 692.381 L768.901 692.381 L769.461 692.381 L770.02 692.381 L770.579 692.381 L771.138 692.381 L771.698 692.381 L772.257 692.381 L772.816 692.381 L773.375 692.381 L773.935 692.381 L774.494 692.381 L775.053 692.381 L775.612 692.381 L776.172 692.381 L776.731 692.381 L777.29 692.381 L777.849 692.381 L778.409 692.381 L778.968 692.381 L779.527 692.381 L780.086 692.381 L780.646 692.381 L781.205 692.381 L781.764 692.381 L782.323 692.381 L782.883 692.381 L783.442 692.381 L784.001 692.381 L784.56 692.381 L785.12 692.381 L785.679 692.381 L786.238 692.381 L786.797 692.381 L787.357 692.381 L787.916 692.381 L788.475 692.381 L789.034 692.381 L789.594 692.381 L790.153 692.381 L790.712 692.381 L791.271 692.381 L791.831 692.381 L792.39 692.381 L792.949 692.381 L793.508 692.381 L794.068 692.381 L794.627 692.381 L795.186 692.381 L795.745 692.381 L796.305 692.381 L796.864 692.381 L797.423 692.381 L797.982 692.381 L798.542 692.381 L799.101 692.381 L799.66 692.381 L800.219 692.381 L800.779 692.381 L801.338 692.381 L801.897 692.381 L802.456 692.381 L803.016 692.381 L803.575 692.381 L804.134 692.381 L804.693 692.381 L805.253 692.381 L805.812 692.381 L806.371 692.381 L806.931 692.381 L807.49 692.381 L808.049 692.381 L808.608 692.381 L809.168 692.381 L809.727 692.381 L810.286 692.381 L810.845 692.381 L811.405 692.381 L811.964 692.381 L812.523 692.381 L813.082 692.381 L813.642 692.381 L814.201 692.381 L814.76 692.381 L815.319 692.381 L815.879 692.381 L816.438 692.381 L816.997 692.381 L817.556 692.381 L818.116 692.381 L818.675 692.381 L819.234 692.381 L819.793 692.381 L820.353 692.381 L820.912 692.381 L821.471 692.381 L822.03 692.381 L822.59 692.381 L823.149 692.381 L823.708 692.381 L824.267 692.381 L824.827 692.381 L825.386 692.381 L825.945 692.381 L826.504 692.381 L827.064 692.381 L827.623 692.381 L828.182 692.381 L828.741 692.381 L829.301 692.381 L829.86 692.381 L830.419 692.381 L830.978 692.381 L831.538 692.381 L832.097 692.381 L832.656 692.381 L833.215 692.381 L833.775 692.381 L834.334 692.381 L834.893 692.381 L835.452 692.381 L836.012 692.381 L836.571 692.381 L837.13 692.381 L837.689 692.381 L838.249 692.381 L838.808 692.381 L839.367 692.381 L839.926 692.381 L840.486 692.381 L841.045 692.381 L841.604 692.381 L842.163 692.381 L842.723 692.381 L843.282 692.381 L843.841 692.381 L844.4 692.381 L844.96 692.381 L845.519 692.381 L846.078 692.381 L846.637 692.381 L847.197 692.381 L847.756 692.381 L848.315 692.381 L848.874 692.381 L849.434 692.381 L849.993 692.381 L850.552 692.381 L851.111 692.381 L851.671 692.381 L852.23 692.381 L852.789 692.381 L853.348 692.381 L853.908 692.381 L854.467 692.381 L855.026 692.381 L855.585 692.381 L856.145 692.381 L856.704 692.381 L857.263 692.381 L857.822 692.381 L858.382 692.381 L858.941 692.381 L859.5 692.381 L860.059 692.381 L860.619 692.381 L861.178 692.381 L861.737 692.381 L862.296 692.381 L862.856 692.381 L863.415 692.381 L863.974 692.381 L864.533 692.381 L865.093 692.381 L865.652 692.381 L866.211 692.381 L866.77 692.381 L867.33 692.381 L867.889 692.381 L868.448 692.381 L869.007 692.381 L869.567 692.381 L870.126 692.381 L870.685 692.381 L871.244 692.381 L871.804 692.381 L872.363 692.381 L872.922 692.381 L873.481 692.381 L874.041 692.381 L874.6 692.381 L875.159 692.381 L875.718 692.381 L876.278 692.381 L876.837 692.381 L877.396 692.381 L877.955 692.381 L878.515 692.381 L879.074 692.381 L879.633 692.381 L880.192 692.381 L880.752 692.381 L881.311 692.381 L881.87 692.381 L882.429 692.381 L882.989 692.381 L883.548 692.381 L884.107 692.381 L884.666 692.381 L885.226 692.381 L885.785 692.381 L886.344 692.381 L886.903 692.381 L887.463 692.381 L888.022 692.381 L888.581 692.381 L889.14 692.381 L889.7 692.381 L890.259 692.381 L890.818 692.381 L891.377 692.381 L891.937 692.381 L892.496 692.381 L893.055 692.381 L893.614 692.381 L894.174 692.381 L894.733 692.381 L895.292 692.381 L895.851 692.381 L896.411 692.381 L896.97 692.381 L897.529 692.381 L898.088 692.381 L898.648 692.381 L899.207 692.381 L899.766 692.381 L900.325 692.381 L900.885 692.381 L901.444 692.381 L902.003 692.381 L902.562 692.381 L903.122 692.381 L903.681 692.381 L904.24 692.381 L904.799 692.381 L905.359 692.381 L905.918 692.381 L906.477 692.381 L907.036 692.381 L907.596 692.381 L908.155 692.381 L908.714 692.381 L909.273 692.381 L909.833 692.381 L910.392 692.381 L910.951 692.381 L911.51 692.381 L912.07 692.381 L912.629 692.381 L913.188 692.381 L913.747 692.381 L914.307 692.381 L914.866 692.381 L915.425 692.381 L915.984 692.381 L916.544 692.381 L917.103 692.381 L917.662 692.381 L918.221 692.381 L918.781 692.381 L919.34 692.381 L919.899 692.381 L920.458 692.381 L921.018 692.381 L921.577 692.381 L922.136 692.381 L922.695 692.381 L923.255 692.381 L923.814 692.381 L924.373 692.381 L924.932 692.381 L925.492 692.381 L926.051 692.381 L926.61 692.381 L927.169 692.381 L927.729 692.381 L928.288 692.381 L928.847 692.381 L929.406 692.381 L929.966 692.381 L930.525 692.381 L931.084 692.381 L931.644 692.381 L932.203 692.381 L932.762 692.381 L933.321 692.381 L933.881 692.381 L934.44 692.381 L934.999 692.381 L935.558 692.381 L936.118 692.381 L936.677 692.381 L937.236 692.381 L937.795 692.381 L938.355 692.381 L938.914 692.381 L939.473 692.381 L940.032 692.381 L940.592 692.381 L941.151 692.381 L941.71 692.381 L942.269 692.381 L942.829 692.381 L943.388 692.381 L943.947 692.381 L944.506 692.381 L945.066 692.381 L945.625 692.381 L946.184 692.381 L946.743 692.381 L947.303 692.381 L947.862 692.381 L948.421 692.381 L948.98 692.381 L949.54 692.381 L950.099 692.381 L950.658 692.381 L951.217 692.381 L951.777 692.381 L952.336 692.381 L952.895 692.381 L953.454 692.381 L954.014 692.381 L954.573 692.381 L955.132 692.381 L955.691 692.381 L956.251 692.381 L956.81 692.381 L957.369 692.381 L957.928 692.381 L958.488 692.381 L959.047 692.381 L959.606 692.381 L960.165 692.381 L960.725 692.381 L961.284 692.381 L961.843 692.381 L962.402 692.381 L962.962 692.381 L963.521 692.381 L964.08 692.381 L964.639 692.381 L965.199 692.381 L965.758 692.381 L966.317 692.381 L966.876 692.381 L967.436 692.381 L967.995 692.381 L968.554 692.381 L969.113 692.381 L969.673 692.381 L970.232 692.381 L970.791 692.381 L971.35 692.381 L971.91 692.381 L972.469 692.381 L973.028 692.381 L973.587 692.381 L974.147 692.381 L974.706 692.381 L975.265 692.381 L975.824 692.381 L976.384 692.381 L976.943 692.381 L977.502 692.381 L978.061 692.381 L978.621 692.381 L979.18 692.381 L979.739 692.381 L980.298 692.381 L980.858 692.381 L981.417 692.381 L981.976 692.381 L982.535 692.381 L983.095 692.381 L983.654 692.381 L984.213 692.381 L984.772 692.381 L985.332 692.381 L985.891 692.381 L986.45 692.381 L987.009 692.381 L987.569 692.381 L988.128 692.381 L988.687 692.381 L989.246 692.381 L989.806 692.381 L990.365 692.381 L990.924 692.381 L991.483 692.381 L992.043 692.381 L992.602 692.381 L993.161 692.381 L993.72 692.381 L994.28 692.381 L994.839 692.381 L995.398 692.381 L995.957 692.381 L996.517 692.381 L997.076 692.381 L997.635 692.381 L998.194 692.381 L998.754 692.381 L999.313 692.381 L999.872 692.381 L1000.43 692.381 L1000.99 692.381 L1001.55 692.381 L1002.11 692.381 L1002.67 692.381 L1003.23 692.381 L1003.79 692.381 L1004.35 692.381 L1004.91 692.381 L1005.46 692.381 L1006.02 692.381 L1006.58 692.381 L1007.14 692.381 L1007.7 692.381 L1008.26 692.381 L1008.82 692.381 L1009.38 692.381 L1009.94 692.381 L1010.5 692.381 L1011.06 692.381 L1011.62 692.381 L1012.18 692.381 L1012.73 692.381 L1013.29 692.381 L1013.85 692.381 L1014.41 692.381 L1014.97 692.381 L1015.53 692.381 L1016.09 692.381 L1016.65 692.381 L1017.21 692.381 L1017.77 692.381 L1018.33 692.381 L1018.89 692.381 L1019.45 692.381 L1020.01 692.381 L1020.56 692.381 L1021.12 692.381 L1021.68 692.381 L1022.24 692.381 L1022.8 692.381 L1023.36 692.381 L1023.92 692.381 L1024.48 692.381 L1025.04 692.381 L1025.6 692.381 L1026.16 692.381 L1026.72 692.381 L1027.28 692.381 L1027.83 692.381 L1028.39 692.381 L1028.95 692.381 L1029.51 692.381 L1030.07 692.381 L1030.63 692.381 L1031.19 692.381 L1031.75 692.381 L1032.31 692.381 L1032.87 692.381 L1033.43 692.381 L1033.99 692.381 L1034.55 692.381 L1035.1 692.381 L1035.66 692.381 L1036.22 692.381 L1036.78 692.381 L1037.34 692.381 L1037.9 692.381 L1038.46 692.381 L1039.02 692.381 L1039.58 692.381 L1040.14 692.381 L1040.7 692.381 L1041.26 692.381 L1041.82 692.381 L1042.38 692.381 L1042.93 692.381 L1043.49 692.381 L1044.05 692.381 L1044.61 692.381 L1045.17 692.381 L1045.73 692.381 L1046.29 692.381 L1046.85 692.381 L1047.41 692.381 L1047.97 692.381 L1048.53 692.381 L1049.09 692.381 L1049.65 692.381 L1050.2 692.381 L1050.76 692.381 L1051.32 692.381 L1051.88 692.381 L1052.44 692.381 L1053 692.381 L1053.56 692.381 L1054.12 692.381 L1054.68 692.381 L1055.24 692.381 L1055.8 692.381 L1056.36 692.381 L1056.92 692.381 L1057.48 692.381 L1058.03 692.381 L1058.59 692.381 L1059.15 692.381 L1059.71 692.381 L1060.27 692.381 L1060.83 692.381 L1061.39 692.381 L1061.95 692.381 L1062.51 692.381 L1063.07 692.381 L1063.63 692.381 L1064.19 692.381 L1064.75 692.381 L1065.3 692.381 L1065.86 692.381 L1066.42 692.381 L1066.98 692.381 L1067.54 692.381 L1068.1 692.381 L1068.66 692.381 L1069.22 692.381 L1069.78 692.381 L1070.34 692.381 L1070.9 692.381 L1071.46 692.381 L1072.02 692.381 L1072.57 692.381 L1073.13 692.381 L1073.69 692.381 L1074.25 692.381 L1074.81 692.381 L1075.37 692.381 L1075.93 692.381 L1076.49 692.381 L1077.05 692.381 L1077.61 692.381 L1078.17 692.381 L1078.73 692.381 L1079.29 692.381 L1079.85 692.381 L1080.4 692.381 L1080.96 692.381 L1081.52 692.381 L1082.08 692.381 L1082.64 692.381 L1083.2 692.381 L1083.76 692.381 L1084.32 692.381 L1084.88 692.381 L1085.44 692.381 L1086 692.381 L1086.56 692.381 L1087.12 692.381 L1087.67 692.381 L1088.23 692.381 L1088.79 692.381 L1089.35 692.381 L1089.91 692.381 L1090.47 692.381 L1091.03 692.381 L1091.59 692.381 L1092.15 692.381 L1092.71 692.381 L1093.27 692.381 L1093.83 692.381 L1094.39 692.381 L1094.94 692.381 L1095.5 692.381 L1096.06 692.381 L1096.62 692.381 L1097.18 692.381 L1097.74 692.381 L1098.3 692.381 L1098.86 692.381 L1099.42 692.381 L1099.98 692.381 L1100.54 692.381 L1101.1 692.381 L1101.66 692.381 L1102.22 692.381 L1102.77 692.381 L1103.33 692.381 L1103.89 692.381 L1104.45 692.381 L1105.01 692.381 L1105.57 692.381 L1106.13 692.381 L1106.69 692.381 L1107.25 692.381 L1107.81 692.381 L1108.37 692.381 L1108.93 692.381 L1109.49 692.381 L1110.04 692.381 L1110.6 692.381 L1111.16 692.381 L1111.72 692.381 L1112.28 692.381 L1112.84 692.381 L1113.4 692.381 L1113.96 692.381 L1114.52 692.381 L1115.08 692.381 L1115.64 692.381 L1116.2 692.381 L1116.76 692.381 L1117.31 692.381 L1117.87 692.381 L1118.43 692.381 L1118.99 692.381 L1119.55 692.381 L1120.11 692.381 L1120.67 692.381 L1121.23 692.381 L1121.79 692.381 L1122.35 692.381 L1122.91 692.381 L1123.47 692.381 L1124.03 692.381 L1124.59 692.381 L1125.14 692.381 L1125.7 692.381 L1126.26 692.381 L1126.82 692.381 L1127.38 692.381 L1127.94 692.381 L1128.5 692.381 L1129.06 692.381 L1129.62 692.381 L1130.18 692.381 L1130.74 692.381 L1131.3 692.381 L1131.86 692.381 L1132.41 692.381 L1132.97 692.381 L1133.53 692.381 L1134.09 692.381 L1134.65 692.381 L1135.21 692.381 L1135.77 692.381 L1136.33 692.381 L1136.89 692.381 L1137.45 692.381 L1138.01 692.381 L1138.57 692.381 L1139.13 692.381 L1139.68 692.381 L1140.24 692.381 L1140.8 692.381 L1141.36 692.381 L1141.92 692.381 L1142.48 692.381 L1143.04 692.381 L1143.6 692.381 L1144.16 692.381 L1144.72 692.381 L1145.28 692.381 L1145.84 692.381 L1146.4 692.381 L1146.96 692.381 L1147.51 692.381 L1148.07 692.381 L1148.63 692.381 L1149.19 692.381 L1149.75 692.381 L1150.31 692.381 L1150.87 692.381 L1151.43 692.381 L1151.99 692.381 L1152.55 692.381 L1153.11 692.381 L1153.67 692.381 L1154.23 692.381 L1154.78 692.381 L1155.34 692.381 L1155.9 692.381 L1156.46 692.381 L1157.02 692.381 L1157.58 692.381 L1158.14 692.381 L1158.7 692.381 L1159.26 692.381 L1159.82 692.381 L1160.38 692.381 L1160.94 692.381 L1161.5 692.381 L1162.05 692.381 L1162.61 692.381 L1163.17 692.381 L1163.73 692.381 L1164.29 692.381 L1164.85 692.381 L1165.41 692.381 L1165.97 692.381 L1166.53 692.381 L1167.09 692.381 L1167.65 692.381 L1168.21 692.381 L1168.77 692.381 L1169.33 692.381 L1169.88 692.381 L1170.44 692.381 L1171 692.381 L1171.56 692.381 L1172.12 692.381 L1172.68 692.381 L1173.24 692.381 L1173.8 692.381 L1174.36 692.381 L1174.92 692.381 L1175.48 692.381 L1176.04 692.381 L1176.6 692.381 L1177.15 692.381 L1177.71 692.381 L1178.27 692.381 L1178.83 692.381 L1179.39 692.381 L1179.95 692.381 L1180.51 692.381 L1181.07 692.381 L1181.63 692.381 L1182.19 692.381 L1182.75 692.381 L1183.31 692.381 L1183.87 692.381 L1184.43 692.381 L1184.98 692.381 L1185.54 692.381 L1186.1 692.381 L1186.66 692.381 L1187.22 692.381 L1187.78 692.381 L1188.34 692.381 L1188.9 692.381 L1189.46 692.381 L1190.02 692.381 L1190.58 692.381 L1191.14 692.381 L1191.7 692.381 L1192.25 692.381 L1192.81 692.381 L1193.37 692.381 L1193.93 692.381 L1194.49 692.381 L1195.05 692.381 L1195.61 692.381 L1196.17 692.381 L1196.73 692.381 L1197.29 692.381 L1197.85 692.381 L1198.41 692.381 L1198.97 692.381 L1199.52 692.381 L1200.08 692.381 L1200.64 692.381 L1201.2 692.381 L1201.76 692.381 L1202.32 692.381 L1202.88 692.381 L1203.44 692.381 L1204 692.381 L1204.56 692.381 L1205.12 692.381 L1205.68 692.381 L1206.24 692.381 L1206.8 692.381 L1207.35 692.381 L1207.91 692.381 L1208.47 692.381 L1209.03 692.381 L1209.59 692.381 L1210.15 692.381 L1210.71 692.381 L1211.27 692.381 L1211.83 692.381 L1212.39 692.381 L1212.95 692.381 L1213.51 692.381 L1214.07 692.381 L1214.62 692.381 L1215.18 692.381 L1215.74 692.381 L1216.3 692.381 L1216.86 692.381 L1217.42 692.381 L1217.98 692.381 L1218.54 692.381 L1219.1 692.381 L1219.66 692.381 L1220.22 692.381 L1220.78 692.381 L1221.34 692.381 L1221.89 692.381 L1222.45 692.381 L1223.01 692.381 L1223.57 692.381 L1224.13 692.381 L1224.69 692.381 L1225.25 692.381 L1225.81 692.381 L1226.37 692.381 L1226.93 692.381 L1227.49 692.381 L1228.05 692.381 L1228.61 692.381 L1229.17 692.381 L1229.72 692.381 L1230.28 692.381 L1230.84 692.381 L1231.4 692.381 L1231.96 692.381 L1232.52 692.381 L1233.08 692.381 L1233.64 692.381 L1234.2 692.381 L1234.76 692.381 L1235.32 692.381 L1235.88 692.381 L1236.44 692.381 L1236.99 692.381 L1237.55 692.381 L1238.11 692.381 L1238.67 692.381 L1239.23 692.381 L1239.79 692.381 L1240.35 692.381 L1240.91 692.381 L1241.47 692.381 L1242.03 692.381 L1242.59 692.381 L1243.15 692.381 L1243.71 692.381 L1244.26 692.381 L1244.82 692.381 L1245.38 692.381 L1245.94 692.381 L1246.5 692.381 L1247.06 692.381 L1247.62 692.381 L1248.18 692.381 L1248.74 692.381 L1249.3 692.381 L1249.86 692.381 L1250.42 692.381 L1250.98 692.381 L1251.54 692.381 L1252.09 692.381 L1252.65 692.381 L1253.21 692.381 L1253.77 692.381 L1254.33 692.381 L1254.89 692.381 L1255.45 692.381 L1256.01 692.381 L1256.57 692.381 L1257.13 692.381 L1257.69 692.381 L1258.25 692.381 L1258.81 692.381 L1259.36 692.381 L1259.92 692.381 L1260.48 692.381 L1261.04 692.381 L1261.6 692.381 L1262.16 692.381 L1262.72 692.381 L1263.28 692.381 L1263.84 692.381 L1264.4 692.381 L1264.96 692.381 L1265.52 692.381 L1266.08 692.381 L1266.63 692.381 L1267.19 692.381 L1267.75 692.381 L1268.31 692.381 L1268.87 692.381 L1269.43 692.381 L1269.99 692.381 L1270.55 692.381 L1271.11 692.381 L1271.67 692.381 L1272.23 692.381 L1272.79 692.381 L1273.35 692.381 L1273.91 692.381 L1274.46 692.381 L1275.02 692.381 L1275.58 692.381 L1276.14 692.381 L1276.7 692.381 L1277.26 692.381 L1277.82 692.381 L1278.38 692.381 L1278.94 692.381 L1279.5 692.381 L1280.06 692.381 L1280.62 692.381 L1281.18 692.381 L1281.73 692.381 L1282.29 692.381 L1282.85 692.381 L1283.41 692.381 L1283.97 692.381 L1284.53 692.381 L1285.09 692.381 L1285.65 692.381 L1286.21 692.381 L1286.77 692.381 L1287.33 692.381 L1287.89 692.381 L1288.45 692.381 L1289 692.381 L1289.56 692.381 L1290.12 692.381 L1290.68 692.381 L1291.24 692.381 L1291.8 692.381 L1292.36 692.381 L1292.92 692.381 L1293.48 692.381 L1294.04 692.381 L1294.6 692.381 L1295.16 692.381 L1295.72 692.381 L1296.28 692.381 L1296.83 692.381 L1297.39 692.381 L1297.95 692.381 L1298.51 692.381 L1299.07 692.381 L1299.63 692.381 L1300.19 692.381 L1300.75 692.381 L1301.31 692.381 L1301.87 692.381 L1302.43 692.381 L1302.99 692.381 L1303.55 692.381 L1304.1 692.381 L1304.66 692.381 L1305.22 692.381 L1305.78 692.381 L1306.34 692.381 L1306.9 692.381 L1307.46 692.381 L1308.02 692.381 L1308.58 692.381 L1309.14 692.381 L1309.7 692.381 L1310.26 692.381 L1310.82 692.381 L1311.38 692.381 L1311.93 692.381 L1312.49 692.381 L1313.05 692.381 L1313.61 692.381 L1314.17 692.381 L1314.73 692.381 L1315.29 692.381 L1315.85 692.381 L1316.41 692.381 L1316.97 692.381 L1317.53 692.381 L1318.09 692.381 L1318.65 692.381 L1319.2 692.381 L1319.76 692.381 L1320.32 692.381 L1320.88 692.381 L1321.44 692.381 L1322 692.381 L1322.56 692.381 L1323.12 692.381 L1323.68 692.381 L1324.24 692.381 L1324.8 692.381 L1325.36 692.381 L1325.92 692.381 L1326.47 692.381 L1327.03 692.381 L1327.59 692.381 L1328.15 692.381 L1328.71 692.381 L1329.27 692.381 L1329.83 692.381 L1330.39 692.381 L1330.95 692.381 L1331.51 692.381 L1332.07 692.381 L1332.63 692.381 L1333.19 692.381 L1333.75 692.381 L1334.3 692.381 L1334.86 692.381 L1335.42 692.381 L1335.98 692.381 L1336.54 692.381 L1337.1 692.381 L1337.66 692.381 L1338.22 692.381 L1338.78 692.381 L1339.34 692.381 L1339.9 692.381 L1340.46 692.381 L1341.02 692.381 L1341.57 692.381 L1342.13 692.381 L1342.69 692.381 L1343.25 692.381 L1343.81 692.381 L1344.37 692.381 L1344.93 692.381 L1345.49 692.381 L1346.05 692.381 L1346.61 692.381 L1347.17 692.381 L1347.73 692.381 L1348.29 692.381 L1348.84 692.381 L1349.4 692.381 L1349.96 692.381 L1350.52 692.381 L1351.08 692.381 L1351.64 692.381 L1352.2 692.381 L1352.76 692.381 L1353.32 692.381 L1353.88 692.381 L1354.44 692.381 L1355 692.381 L1355.56 692.381 L1356.12 692.381 L1356.67 692.381 L1357.23 692.381 L1357.79 692.381 L1358.35 692.381 L1358.91 692.381 L1359.47 692.381 L1360.03 692.381 L1360.59 692.381 L1361.15 692.381 L1361.71 692.381 L1362.27 692.381 L1362.83 692.381 L1363.39 692.381 L1363.94 692.381 L1364.5 692.381 L1365.06 692.381 L1365.62 692.381 L1366.18 692.381 L1366.74 692.381 L1367.3 692.381 L1367.86 692.381 L1368.42 692.381 L1368.98 692.381 L1369.54 692.381 L1370.1 692.381 L1370.66 692.381 L1371.21 692.381 L1371.77 692.381 L1372.33 692.381 L1372.89 692.381 L1373.45 692.381 L1374.01 692.381 L1374.57 692.381 L1375.13 692.381 L1375.69 692.381 L1376.25 692.381 L1376.81 692.381 L1377.37 692.381 L1377.93 692.381 L1378.49 692.381 L1379.04 692.381 L1379.6 692.381 L1380.16 692.381 L1380.72 692.381 L1381.28 692.381 L1381.84 692.381 L1382.4 692.381 L1382.96 692.381 L1383.52 692.381 L1384.08 692.381 L1384.64 692.381 L1385.2 692.381 L1385.76 692.381 L1386.31 692.381 L1386.87 692.381 L1387.43 692.381 L1387.99 692.381 L1388.55 692.381 L1389.11 692.381 L1389.67 692.381 L1390.23 692.381 L1390.79 692.381 L1391.35 692.381 L1391.91 692.381 L1392.47 692.381 L1393.03 692.381 L1393.58 692.381 L1394.14 692.381 L1394.7 692.381 L1395.26 692.381 L1395.82 692.381 L1396.38 692.381 L1396.94 692.381 L1397.5 692.381 L1398.06 692.381 L1398.62 692.381 L1399.18 692.381 L1399.74 692.381 L1400.3 692.381 L1400.86 692.381 L1401.41 692.381 L1401.97 692.381 L1402.53 692.381 L1403.09 692.381 L1403.65 692.381 L1404.21 692.381 L1404.77 692.381 L1405.33 692.381 L1405.89 692.381 L1406.45 692.381 L1407.01 692.381 L1407.57 692.381 L1408.13 692.381 L1408.68 692.381 L1409.24 692.381 L1409.8 692.381 L1410.36 692.381 L1410.92 692.381 L1411.48 692.381 L1412.04 692.381 L1412.6 692.381 L1413.16 692.381 L1413.72 692.381 L1414.28 692.381 L1414.84 692.381 L1415.4 692.381 L1415.95 692.381 L1416.51 692.381 L1417.07 692.381 L1417.63 692.381 L1418.19 692.381 L1418.75 692.381 L1419.31 692.381 L1419.87 692.381 L1420.43 692.381 L1420.99 692.381 L1421.55 692.381 L1422.11 692.381 L1422.67 692.381 L1423.23 692.381 L1423.78 692.381 L1424.34 692.381 L1424.9 692.381 L1425.46 692.381 L1426.02 692.381 L1426.58 692.381 L1427.14 692.381 L1427.7 692.381 L1428.26 692.381 L1428.82 692.381 L1429.38 692.381 L1429.94 692.381 L1430.5 692.381 L1431.05 692.381 L1431.61 692.381 L1432.17 692.381 L1432.73 692.381 L1433.29 692.381 L1433.85 692.381 L1434.41 692.381 L1434.97 692.381 L1435.53 692.381 L1436.09 692.381 L1436.65 692.381 L1437.21 692.381 L1437.77 692.381 L1438.33 692.381 L1438.88 692.381 L1439.44 692.381 L1440 692.381 L1440.56 692.381 L1441.12 692.381 L1441.68 692.381 L1442.24 692.381 L1442.8 692.381 L1443.36 692.381 L1443.92 692.381 L1444.48 692.381 L1445.04 692.381 L1445.6 692.381 L1446.15 692.381 L1446.71 692.381 L1447.27 692.381 L1447.83 692.381 L1448.39 692.381 L1448.95 692.381 L1449.51 692.381 L1450.07 692.381 L1450.63 692.381 L1451.19 692.381 L1451.75 692.381 L1452.31 692.381 L1452.87 692.381 L1453.42 692.381 L1453.98 692.381 L1454.54 692.381 L1455.1 692.381 L1455.66 692.381 L1456.22 692.381 L1456.78 692.381 L1457.34 692.381 L1457.9 692.381 L1458.46 692.381 L1459.02 692.381 L1459.58 692.381 L1460.14 692.381 L1460.7 692.381 L1461.25 692.381 L1461.81 692.381 L1462.37 692.381 L1462.93 692.381 L1463.49 692.381 L1464.05 692.381 L1464.61 692.381 L1465.17 692.381 L1465.73 692.381 L1466.29 692.381 L1466.85 692.381 L1467.41 692.381 L1467.97 692.381 L1468.52 692.381 L1469.08 692.381 L1469.64 692.381 L1470.2 692.381 L1470.76 692.381 L1471.32 692.381 L1471.88 692.381 L1472.44 692.381 L1473 692.381 L1473.56 692.381 L1474.12 692.381 L1474.68 692.381 L1475.24 692.381 L1475.79 692.381 L1476.35 692.381 L1476.91 692.381 L1477.47 692.381 L1478.03 692.381 L1478.59 692.381 L1479.15 692.381 L1479.71 692.381 L1480.27 692.381 L1480.83 692.381 L1481.39 692.381 L1481.95 692.381 L1482.51 692.381 L1483.07 692.381 L1483.62 692.381 L1484.18 692.381 L1484.74 692.381 L1485.3 692.381 L1485.86 692.381 L1486.42 692.381 L1486.98 692.381 L1487.54 692.381 L1488.1 692.381 L1488.66 692.381 L1489.22 692.381 L1489.78 692.381 L1490.34 692.381 L1490.89 692.381 L1491.45 692.381 L1492.01 692.381 L1492.57 692.381 L1493.13 692.381 L1493.69 692.381 L1494.25 692.381 L1494.81 692.381 L1495.37 692.381 L1495.93 692.381 L1496.49 692.381 L1497.05 692.381 L1497.61 692.381 L1498.16 692.381 L1498.72 692.381 L1499.28 692.381 L1499.84 692.381 L1500.4 692.381 L1500.96 692.381 L1501.52 692.381 L1502.08 692.381 L1502.64 692.381 L1503.2 692.381 L1503.76 692.381 L1504.32 692.381 L1504.88 692.381 L1505.44 692.381 L1505.99 692.381 L1506.55 692.381 L1507.11 692.381 L1507.67 692.381 L1508.23 692.381 L1508.79 692.381 L1509.35 692.381 L1509.91 692.381 L1510.47 692.381 L1511.03 692.381 L1511.59 692.381 L1512.15 692.381 L1512.71 692.381 L1513.26 692.381 L1513.82 692.381 L1514.38 692.381 L1514.94 692.381 L1515.5 692.381 L1516.06 692.381 L1516.62 692.381 L1517.18 692.381 L1517.74 692.381 L1518.3 692.381 L1518.86 692.381 L1519.42 692.381 L1519.98 692.381 L1520.53 692.381 L1521.09 692.381 L1521.65 692.381 L1522.21 692.381 L1522.77 692.381 L1523.33 692.381 L1523.89 692.381 L1524.45 692.381 L1525.01 692.381 L1525.57 692.381 L1526.13 692.381 L1526.69 692.381 L1527.25 692.381 L1527.81 692.381 L1528.36 692.381 L1528.92 692.381 L1529.48 692.381 L1530.04 692.381 L1530.6 692.381 L1531.16 692.381 L1531.72 692.381 L1532.28 692.381 L1532.84 692.381 L1533.4 692.381 L1533.96 692.381 L1534.52 692.381 L1535.08 692.381 L1535.63 692.381 L1536.19 692.381 L1536.75 692.381 L1537.31 692.381 L1537.87 692.381 L1538.43 692.381 L1538.99 692.381 L1539.55 692.381 L1540.11 692.381 L1540.67 692.381 L1541.23 692.381 L1541.79 692.381 L1542.35 692.381 L1542.9 692.381 L1543.46 692.381 L1544.02 692.381 L1544.58 692.381 L1545.14 692.381 L1545.7 692.381 L1546.26 692.381 L1546.82 692.381 L1547.38 692.381 L1547.94 692.381 L1548.5 692.381 L1549.06 692.381 L1549.62 692.381 L1550.18 692.381 L1550.73 692.381 L1551.29 692.381 L1551.85 692.381 L1552.41 692.381 L1552.97 692.381 L1553.53 692.381 L1554.09 692.381 L1554.65 692.381 L1555.21 692.381 L1555.77 692.381 L1556.33 692.381 L1556.89 692.381 L1557.45 692.381 L1558 692.381 L1558.56 692.381 L1559.12 692.381 L1559.68 692.381 L1560.24 692.381 L1560.8 692.381 L1561.36 692.381 L1561.92 692.381 L1562.48 692.381 L1563.04 692.381 L1563.6 692.381 L1564.16 692.381 L1564.72 692.381 L1565.28 692.381 L1565.83 692.381 L1566.39 692.381 L1566.95 692.381 L1567.51 692.381 L1568.07 692.381 L1568.63 692.381 L1569.19 692.381 L1569.75 692.381 L1570.31 692.381 L1570.87 692.381 L1571.43 692.381 L1571.99 692.381 L1572.55 692.381 L1573.1 692.381 L1573.66 692.381 L1574.22 692.381 L1574.78 692.381 L1575.34 692.381 L1575.9 692.381 L1576.46 692.381 L1577.02 692.381 L1577.58 692.381 L1578.14 692.381 L1578.7 692.381 L1579.26 692.381 L1579.82 692.381 L1580.37 692.381 L1580.93 692.381 L1581.49 692.381 L1582.05 692.381 L1582.61 692.381 L1583.17 692.381 L1583.73 692.381 L1584.29 692.381 L1584.85 692.381 L1585.41 692.381 L1585.97 692.381 L1586.53 692.381 L1587.09 692.381 L1587.65 692.381 L1588.2 692.381 L1588.76 692.381 L1589.32 692.381 L1589.88 692.381 L1590.44 692.381 L1591 692.381 L1591.56 692.381 L1592.12 692.381 L1592.68 692.381 L1593.24 692.381 L1593.8 692.381 L1594.36 692.381 L1594.92 692.381 L1595.47 692.381 L1596.03 692.381 L1596.59 692.381 L1597.15 692.381 L1597.71 692.381 L1598.27 692.381 L1598.83 692.381 L1599.39 692.381 L1599.95 692.381 L1600.51 692.381 L1601.07 692.381 L1601.63 692.381 L1602.19 692.381 L1602.74 692.381 L1603.3 692.381 L1603.86 692.381 L1604.42 692.381 L1604.98 692.381 L1605.54 692.381 L1606.1 692.381 L1606.66 692.381 L1607.22 692.381 L1607.78 692.381 L1608.34 692.381 L1608.9 692.381 L1609.46 692.381 L1610.02 692.381 L1610.57 692.381 L1611.13 692.381 L1611.69 692.381 L1612.25 692.381 L1612.81 692.381 L1613.37 692.381 L1613.93 692.381 L1614.49 692.381 L1615.05 692.381 L1615.61 692.381 L1616.17 692.381 L1616.73 692.381 L1617.29 692.381 L1617.84 692.381 L1618.4 692.381 L1618.96 692.381 L1619.52 692.381 L1620.08 692.381 L1620.64 692.381 L1621.2 692.381 L1621.76 692.381 L1622.32 692.381 L1622.88 692.381 L1623.44 692.381 L1624 692.381 L1624.56 692.381 L1625.11 692.381 L1625.67 692.381 L1626.23 692.381 L1626.79 692.381 L1627.35 692.381 L1627.91 692.381 L1628.47 692.381 L1629.03 692.381 L1629.59 692.381 L1630.15 692.381 L1630.71 692.381 L1631.27 692.381 L1631.83 692.381 L1632.39 692.381 L1632.94 692.381 L1633.5 692.381 L1634.06 692.381 L1634.62 692.381 L1635.18 692.381 L1635.74 692.381 L1636.3 692.381 L1636.86 692.381 L1637.42 692.381 L1637.98 692.381 L1638.54 692.381 L1639.1 692.381 L1639.66 692.381 L1640.21 692.381 L1640.77 692.381 L1641.33 692.381 L1641.89 692.381 L1642.45 692.381 L1643.01 692.381 L1643.57 692.381 L1644.13 692.381 L1644.69 692.381 L1645.25 692.381 L1645.81 692.381 L1646.37 692.381 L1646.93 692.381 L1647.48 692.381 L1648.04 692.381 L1648.6 692.381 L1649.16 692.381 L1649.72 692.381 L1650.28 692.381 L1650.84 692.381 L1651.4 692.381 L1651.96 692.381 L1652.52 692.381 L1653.08 692.381 L1653.64 692.381 L1654.2 692.381 L1654.76 692.381 L1655.31 692.381 L1655.87 692.381 L1656.43 692.381 L1656.99 692.381 L1657.55 692.381 L1658.11 692.381 L1658.67 692.381 L1659.23 692.381 L1659.79 692.381 L1660.35 692.381 L1660.91 692.381 L1661.47 692.381 L1662.03 692.381 L1662.58 692.381 L1663.14 692.381 L1663.7 692.381 L1664.26 692.381 L1664.82 692.381 L1665.38 692.381 L1665.94 692.381 L1666.5 692.381 L1667.06 692.381 L1667.62 692.381 L1668.18 692.381 L1668.74 692.381 L1669.3 692.381 L1669.85 692.381 L1670.41 692.381 L1670.97 692.381 L1671.53 692.381 L1672.09 692.381 L1672.65 692.381 L1673.21 692.381 L1673.77 692.381 L1674.33 692.381 L1674.89 692.381 L1675.45 692.381 L1676.01 692.381 L1676.57 692.381 L1677.13 692.381 L1677.68 692.381 L1678.24 692.381 L1678.8 692.381 L1679.36 692.381 L1679.92 692.381 L1680.48 692.381 L1681.04 692.381 L1681.6 692.381 L1682.16 692.381 L1682.72 692.381 L1683.28 692.381 L1683.84 692.381 L1684.4 692.381 L1684.95 692.381 L1685.51 692.381 L1686.07 692.381 L1686.63 692.381 L1687.19 692.381 L1687.75 692.381 L1688.31 692.381 L1688.87 692.381 L1689.43 692.381 L1689.99 692.381 L1690.55 692.381 L1691.11 692.381 L1691.67 692.381 L1692.23 692.381 L1692.78 692.381 L1693.34 692.381 L1693.9 692.381 L1694.46 692.381 L1695.02 692.381 L1695.58 692.381 L1696.14 692.381 L1696.7 692.381 L1697.26 692.381 L1697.82 692.381 L1698.38 692.381 L1698.94 692.381 L1699.5 692.381 L1700.05 692.381 L1700.61 692.381 L1701.17 692.381 L1701.73 692.381 L1702.29 692.381 L1702.85 692.381 L1703.41 692.381 L1703.97 692.381 L1704.53 692.381 L1705.09 692.381 L1705.65 692.381 L1706.21 692.381 L1706.77 692.381 L1707.32 692.381 L1707.88 692.381 L1708.44 692.381 L1709 692.381 L1709.56 692.381 L1710.12 692.381 L1710.68 692.381 L1711.24 692.381 L1711.8 692.381 L1712.36 692.381 L1712.92 692.381 L1713.48 692.381 L1714.04 692.381 L1714.6 692.381 L1715.15 692.381 L1715.71 692.381 L1716.27 692.381 L1716.83 692.381 L1717.39 692.381 L1717.95 692.381 L1718.51 692.381 L1719.07 692.381 L1719.63 692.381 L1720.19 692.381 L1720.75 692.381 L1721.31 692.381 L1721.87 692.381 L1722.42 692.381 L1722.98 692.381 L1723.54 692.381 L1724.1 692.381 L1724.66 692.381 L1725.22 692.381 L1725.78 692.381 L1726.34 692.381 L1726.9 692.381 L1727.46 692.381 L1728.02 692.381 L1728.58 692.381 L1729.14 692.381 L1729.69 692.381 L1730.25 692.381 L1730.81 692.381 L1731.37 692.381 L1731.93 692.381 L1732.49 692.381 L1733.05 692.381 L1733.61 692.381 L1734.17 692.381 L1734.73 692.381 L1735.29 692.381 L1735.85 692.381 L1736.41 692.381 L1736.97 692.381 L1737.52 692.381 L1738.08 692.381 L1738.64 692.381 L1739.2 692.381 L1739.76 692.381 L1740.32 692.381 L1740.88 692.381 L1741.44 692.381 L1742 692.381 L1742.56 692.381 L1743.12 692.381 L1743.68 692.381 L1744.24 692.381 L1744.79 692.381 L1745.35 692.381 L1745.91 692.381 L1746.47 692.381 L1747.03 692.381 L1747.59 692.381 L1748.15 692.381 L1748.71 692.381 L1749.27 692.381 L1749.83 692.381 L1750.39 692.381 L1750.95 692.381 L1751.51 692.381 L1752.06 692.381 L1752.62 692.381 L1753.18 692.381 L1753.74 692.381 L1754.3 692.381 L1754.86 692.381 L1755.42 692.381 L1755.98 692.381 L1756.54 692.381 L1757.1 692.381 L1757.66 692.381 L1758.22 692.381 L1758.78 692.381 L1759.34 692.381 L1759.89 692.381 L1760.45 692.381 L1761.01 692.381 L1761.57 692.381 L1762.13 692.381 L1762.69 692.381 L1763.25 692.381 L1763.81 692.381 L1764.37 692.381 L1764.93 692.381 L1765.49 692.381 L1766.05 692.381 L1766.61 692.381 L1767.16 692.381 L1767.72 692.381 L1768.28 692.381 L1768.84 692.381 L1769.4 692.381 L1769.96 692.381 L1770.52 692.381 L1771.08 692.381 L1771.64 692.381 L1772.2 692.381 L1772.76 692.381 L1773.32 692.381 L1773.88 692.381 L1774.43 692.381 L1774.99 692.381 L1775.55 692.381 L1776.11 692.381 L1776.67 692.381 L1777.23 692.381 L1777.79 692.381 L1778.35 692.381 L1778.91 692.381 L1779.47 692.381 L1780.03 692.381 L1780.59 692.381 L1781.15 692.381 L1781.71 692.381 L1782.26 692.381 L1782.82 692.381 L1783.38 692.381 L1783.94 692.381 L1784.5 692.381 L1785.06 692.381 L1785.62 692.381 L1786.18 692.381 L1786.74 692.381 L1787.3 692.381 L1787.86 692.381 L1788.42 692.381 L1788.98 692.381 L1789.53 692.381 L1790.09 692.381 L1790.65 692.381 L1791.21 692.381 L1791.77 692.381 L1792.33 692.381 L1792.89 692.381 L1793.45 692.381 L1794.01 692.381 L1794.57 692.381 L1795.13 692.381 L1795.69 692.381 L1796.25 692.381 L1796.8 692.381 L1797.36 692.381 L1797.92 692.381 L1798.48 692.381 L1799.04 692.381 L1799.6 692.381 L1800.16 692.381 L1800.72 692.381 L1801.28 692.381 L1801.84 692.381 L1802.4 692.381 L1802.96 692.381 L1803.52 692.381 L1804.08 692.381 L1804.63 692.381 L1805.19 692.381 L1805.75 692.381 L1806.31 692.381 L1806.87 692.381 L1807.43 692.381 L1807.99 692.381 L1808.55 692.381 L1809.11 692.381 L1809.67 692.381 L1810.23 692.381 L1810.79 692.381 L1811.35 692.381 L1811.9 692.381 L1812.46 692.381 L1813.02 692.381 L1813.58 692.381 L1814.14 692.381 L1814.7 692.381 L1815.26 692.381 L1815.82 692.381 L1816.38 692.381 L1816.94 692.381 L1817.5 692.381 L1818.06 692.381 L1818.62 692.381 L1819.18 692.381 L1819.73 692.381 L1820.29 692.381 L1820.85 692.381 L1821.41 692.381 L1821.97 692.381 L1822.53 692.381 L1823.09 692.381 L1823.65 692.381 L1824.21 692.381 L1824.77 692.381 L1825.33 692.381 L1825.89 692.381 L1826.45 692.381 L1827 692.381 L1827.56 692.381 L1828.12 692.381 L1828.68 692.381 L1829.24 692.381 L1829.8 692.381 L1830.36 692.381 L1830.92 692.381 L1831.48 692.381 L1832.04 692.381 L1832.6 692.381 L1833.16 692.381 L1833.72 692.381 L1834.27 692.381 L1834.83 692.381 L1835.39 692.381 L1835.95 692.381 L1836.51 692.381 L1837.07 692.381 L1837.63 692.381 L1838.19 692.381 L1838.19 683.415 L1837.63 683.415 L1837.07 683.415 L1836.51 683.415 L1835.95 683.415 L1835.39 683.415 L1834.83 683.415 L1834.27 683.415 L1833.72 683.415 L1833.16 683.415 L1832.6 683.415 L1832.04 683.415 L1831.48 683.415 L1830.92 683.415 L1830.36 683.415 L1829.8 683.415 L1829.24 683.415 L1828.68 683.415 L1828.12 683.415 L1827.56 683.415 L1827 683.415 L1826.45 683.415 L1825.89 683.415 L1825.33 683.415 L1824.77 683.415 L1824.21 683.415 L1823.65 683.415 L1823.09 683.415 L1822.53 683.415 L1821.97 683.415 L1821.41 683.415 L1820.85 683.415 L1820.29 683.415 L1819.73 683.415 L1819.18 683.415 L1818.62 683.415 L1818.06 683.415 L1817.5 683.415 L1816.94 683.415 L1816.38 683.415 L1815.82 683.415 L1815.26 683.415 L1814.7 683.415 L1814.14 683.415 L1813.58 683.415 L1813.02 683.415 L1812.46 683.415 L1811.9 683.415 L1811.35 683.415 L1810.79 683.415 L1810.23 683.415 L1809.67 683.415 L1809.11 683.415 L1808.55 683.415 L1807.99 683.415 L1807.43 683.415 L1806.87 683.415 L1806.31 683.415 L1805.75 683.415 L1805.19 683.415 L1804.63 683.415 L1804.08 683.415 L1803.52 683.415 L1802.96 683.415 L1802.4 683.415 L1801.84 683.415 L1801.28 683.415 L1800.72 683.415 L1800.16 683.415 L1799.6 683.415 L1799.04 683.415 L1798.48 683.415 L1797.92 683.415 L1797.36 683.415 L1796.8 683.415 L1796.25 683.415 L1795.69 683.415 L1795.13 683.415 L1794.57 683.415 L1794.01 683.415 L1793.45 683.415 L1792.89 683.415 L1792.33 683.415 L1791.77 683.415 L1791.21 683.415 L1790.65 683.415 L1790.09 683.415 L1789.53 683.415 L1788.98 683.415 L1788.42 683.415 L1787.86 683.415 L1787.3 683.415 L1786.74 683.415 L1786.18 683.415 L1785.62 683.415 L1785.06 683.415 L1784.5 683.415 L1783.94 683.415 L1783.38 683.415 L1782.82 683.415 L1782.26 683.415 L1781.71 683.415 L1781.15 683.415 L1780.59 683.415 L1780.03 683.415 L1779.47 683.415 L1778.91 683.415 L1778.35 683.415 L1777.79 683.415 L1777.23 683.415 L1776.67 683.415 L1776.11 683.415 L1775.55 683.415 L1774.99 683.415 L1774.43 683.415 L1773.88 683.415 L1773.32 683.415 L1772.76 683.415 L1772.2 683.415 L1771.64 683.415 L1771.08 683.415 L1770.52 683.415 L1769.96 683.415 L1769.4 683.415 L1768.84 683.415 L1768.28 683.415 L1767.72 683.415 L1767.16 683.415 L1766.61 683.415 L1766.05 683.415 L1765.49 683.415 L1764.93 683.415 L1764.37 683.415 L1763.81 683.415 L1763.25 683.415 L1762.69 683.415 L1762.13 683.415 L1761.57 683.415 L1761.01 683.415 L1760.45 683.415 L1759.89 683.415 L1759.34 683.415 L1758.78 683.415 L1758.22 683.415 L1757.66 683.415 L1757.1 683.415 L1756.54 683.415 L1755.98 683.415 L1755.42 683.415 L1754.86 683.415 L1754.3 683.415 L1753.74 683.415 L1753.18 683.415 L1752.62 683.415 L1752.06 683.415 L1751.51 683.415 L1750.95 683.415 L1750.39 683.415 L1749.83 683.415 L1749.27 683.415 L1748.71 683.415 L1748.15 683.415 L1747.59 683.415 L1747.03 683.415 L1746.47 683.415 L1745.91 683.415 L1745.35 683.415 L1744.79 683.415 L1744.24 683.415 L1743.68 683.415 L1743.12 683.415 L1742.56 683.415 L1742 683.415 L1741.44 683.415 L1740.88 683.415 L1740.32 683.415 L1739.76 683.415 L1739.2 683.415 L1738.64 683.415 L1738.08 683.415 L1737.52 683.415 L1736.97 683.415 L1736.41 683.415 L1735.85 683.415 L1735.29 683.415 L1734.73 683.415 L1734.17 683.415 L1733.61 683.415 L1733.05 683.415 L1732.49 683.415 L1731.93 683.415 L1731.37 683.415 L1730.81 683.415 L1730.25 683.415 L1729.69 683.415 L1729.14 683.415 L1728.58 683.415 L1728.02 683.415 L1727.46 683.415 L1726.9 683.415 L1726.34 683.415 L1725.78 683.415 L1725.22 683.415 L1724.66 683.415 L1724.1 683.415 L1723.54 683.415 L1722.98 683.415 L1722.42 683.415 L1721.87 683.415 L1721.31 683.415 L1720.75 683.415 L1720.19 683.415 L1719.63 683.415 L1719.07 683.415 L1718.51 683.415 L1717.95 683.415 L1717.39 683.415 L1716.83 683.415 L1716.27 683.415 L1715.71 683.415 L1715.15 683.415 L1714.6 683.415 L1714.04 683.415 L1713.48 683.415 L1712.92 683.415 L1712.36 683.415 L1711.8 683.415 L1711.24 683.415 L1710.68 683.415 L1710.12 683.415 L1709.56 683.415 L1709 683.415 L1708.44 683.415 L1707.88 683.415 L1707.32 683.415 L1706.77 683.415 L1706.21 683.415 L1705.65 683.415 L1705.09 683.415 L1704.53 683.415 L1703.97 683.415 L1703.41 683.415 L1702.85 683.415 L1702.29 683.415 L1701.73 683.415 L1701.17 683.415 L1700.61 683.415 L1700.05 683.415 L1699.5 683.415 L1698.94 683.415 L1698.38 683.415 L1697.82 683.415 L1697.26 683.415 L1696.7 683.415 L1696.14 683.415 L1695.58 683.415 L1695.02 683.415 L1694.46 683.415 L1693.9 683.415 L1693.34 683.415 L1692.78 683.415 L1692.23 683.415 L1691.67 683.415 L1691.11 683.415 L1690.55 683.415 L1689.99 683.415 L1689.43 683.415 L1688.87 683.415 L1688.31 683.415 L1687.75 683.415 L1687.19 683.415 L1686.63 683.415 L1686.07 683.415 L1685.51 683.415 L1684.95 683.415 L1684.4 683.415 L1683.84 683.415 L1683.28 683.415 L1682.72 683.415 L1682.16 683.415 L1681.6 683.415 L1681.04 683.415 L1680.48 683.415 L1679.92 683.415 L1679.36 683.415 L1678.8 683.415 L1678.24 683.415 L1677.68 683.415 L1677.13 683.415 L1676.57 683.415 L1676.01 683.415 L1675.45 683.415 L1674.89 683.415 L1674.33 683.415 L1673.77 683.415 L1673.21 683.415 L1672.65 683.415 L1672.09 683.415 L1671.53 683.415 L1670.97 683.415 L1670.41 683.415 L1669.85 683.415 L1669.3 683.415 L1668.74 683.415 L1668.18 683.415 L1667.62 683.415 L1667.06 683.415 L1666.5 683.415 L1665.94 683.415 L1665.38 683.415 L1664.82 683.415 L1664.26 683.415 L1663.7 683.415 L1663.14 683.415 L1662.58 683.415 L1662.03 683.415 L1661.47 683.415 L1660.91 683.415 L1660.35 683.415 L1659.79 683.415 L1659.23 683.415 L1658.67 683.415 L1658.11 683.415 L1657.55 683.415 L1656.99 683.415 L1656.43 683.415 L1655.87 683.415 L1655.31 683.415 L1654.76 683.415 L1654.2 683.415 L1653.64 683.415 L1653.08 683.415 L1652.52 683.415 L1651.96 683.415 L1651.4 683.415 L1650.84 683.415 L1650.28 683.415 L1649.72 683.415 L1649.16 683.415 L1648.6 683.415 L1648.04 683.415 L1647.48 683.415 L1646.93 683.415 L1646.37 683.415 L1645.81 683.415 L1645.25 683.415 L1644.69 683.415 L1644.13 683.415 L1643.57 683.415 L1643.01 683.415 L1642.45 683.415 L1641.89 683.415 L1641.33 683.415 L1640.77 683.415 L1640.21 683.415 L1639.66 683.415 L1639.1 683.415 L1638.54 683.415 L1637.98 683.415 L1637.42 683.415 L1636.86 683.415 L1636.3 683.415 L1635.74 683.415 L1635.18 683.415 L1634.62 683.415 L1634.06 683.415 L1633.5 683.415 L1632.94 683.415 L1632.39 683.415 L1631.83 683.415 L1631.27 683.415 L1630.71 683.415 L1630.15 683.415 L1629.59 683.415 L1629.03 683.415 L1628.47 683.415 L1627.91 683.415 L1627.35 683.415 L1626.79 683.415 L1626.23 683.415 L1625.67 683.415 L1625.11 683.415 L1624.56 683.415 L1624 683.415 L1623.44 683.415 L1622.88 683.415 L1622.32 683.415 L1621.76 683.415 L1621.2 683.415 L1620.64 683.415 L1620.08 683.415 L1619.52 683.415 L1618.96 683.415 L1618.4 683.415 L1617.84 683.415 L1617.29 683.415 L1616.73 683.415 L1616.17 683.415 L1615.61 683.415 L1615.05 683.415 L1614.49 683.415 L1613.93 683.415 L1613.37 683.415 L1612.81 683.415 L1612.25 683.415 L1611.69 683.415 L1611.13 683.415 L1610.57 683.415 L1610.02 683.415 L1609.46 683.415 L1608.9 683.415 L1608.34 683.415 L1607.78 683.415 L1607.22 683.415 L1606.66 683.415 L1606.1 683.415 L1605.54 683.415 L1604.98 683.415 L1604.42 683.415 L1603.86 683.415 L1603.3 683.415 L1602.74 683.415 L1602.19 683.415 L1601.63 683.415 L1601.07 683.415 L1600.51 683.415 L1599.95 683.415 L1599.39 683.415 L1598.83 683.415 L1598.27 683.415 L1597.71 683.415 L1597.15 683.415 L1596.59 683.415 L1596.03 683.415 L1595.47 683.415 L1594.92 683.415 L1594.36 683.415 L1593.8 683.415 L1593.24 683.415 L1592.68 683.415 L1592.12 683.415 L1591.56 683.415 L1591 683.415 L1590.44 683.415 L1589.88 683.415 L1589.32 683.415 L1588.76 683.415 L1588.2 683.415 L1587.65 683.415 L1587.09 683.415 L1586.53 683.415 L1585.97 683.415 L1585.41 683.415 L1584.85 683.415 L1584.29 683.415 L1583.73 683.415 L1583.17 683.415 L1582.61 683.415 L1582.05 683.415 L1581.49 683.415 L1580.93 683.415 L1580.37 683.415 L1579.82 683.415 L1579.26 683.415 L1578.7 683.415 L1578.14 683.415 L1577.58 683.415 L1577.02 683.415 L1576.46 683.415 L1575.9 683.415 L1575.34 683.415 L1574.78 683.415 L1574.22 683.415 L1573.66 683.415 L1573.1 683.415 L1572.55 683.415 L1571.99 683.415 L1571.43 683.415 L1570.87 683.415 L1570.31 683.415 L1569.75 683.415 L1569.19 683.415 L1568.63 683.415 L1568.07 683.415 L1567.51 683.415 L1566.95 683.415 L1566.39 683.415 L1565.83 683.415 L1565.28 683.415 L1564.72 683.415 L1564.16 683.415 L1563.6 683.415 L1563.04 683.415 L1562.48 683.415 L1561.92 683.415 L1561.36 683.415 L1560.8 683.415 L1560.24 683.415 L1559.68 683.415 L1559.12 683.415 L1558.56 683.415 L1558 683.415 L1557.45 683.415 L1556.89 683.415 L1556.33 683.415 L1555.77 683.415 L1555.21 683.415 L1554.65 683.415 L1554.09 683.415 L1553.53 683.415 L1552.97 683.415 L1552.41 683.415 L1551.85 683.415 L1551.29 683.415 L1550.73 683.415 L1550.18 683.415 L1549.62 683.415 L1549.06 683.415 L1548.5 683.415 L1547.94 683.415 L1547.38 683.415 L1546.82 683.415 L1546.26 683.415 L1545.7 683.415 L1545.14 683.415 L1544.58 683.415 L1544.02 683.415 L1543.46 683.415 L1542.9 683.415 L1542.35 683.415 L1541.79 683.415 L1541.23 683.415 L1540.67 683.415 L1540.11 683.415 L1539.55 683.415 L1538.99 683.415 L1538.43 683.415 L1537.87 683.415 L1537.31 683.415 L1536.75 683.415 L1536.19 683.415 L1535.63 683.415 L1535.08 683.415 L1534.52 683.415 L1533.96 683.415 L1533.4 683.415 L1532.84 683.415 L1532.28 683.415 L1531.72 683.415 L1531.16 683.415 L1530.6 683.415 L1530.04 683.415 L1529.48 683.415 L1528.92 683.415 L1528.36 683.415 L1527.81 683.415 L1527.25 683.415 L1526.69 683.415 L1526.13 683.415 L1525.57 683.415 L1525.01 683.415 L1524.45 683.415 L1523.89 683.415 L1523.33 683.415 L1522.77 683.415 L1522.21 683.415 L1521.65 683.415 L1521.09 683.415 L1520.53 683.415 L1519.98 683.415 L1519.42 683.415 L1518.86 683.415 L1518.3 683.415 L1517.74 683.415 L1517.18 683.415 L1516.62 683.415 L1516.06 683.415 L1515.5 683.415 L1514.94 683.415 L1514.38 683.415 L1513.82 683.415 L1513.26 683.415 L1512.71 683.415 L1512.15 683.415 L1511.59 683.415 L1511.03 683.415 L1510.47 683.415 L1509.91 683.415 L1509.35 683.415 L1508.79 683.415 L1508.23 683.415 L1507.67 683.415 L1507.11 683.415 L1506.55 683.415 L1505.99 683.415 L1505.44 683.415 L1504.88 683.415 L1504.32 683.415 L1503.76 683.415 L1503.2 683.415 L1502.64 683.415 L1502.08 683.415 L1501.52 683.415 L1500.96 683.415 L1500.4 683.415 L1499.84 683.415 L1499.28 683.415 L1498.72 683.415 L1498.16 683.415 L1497.61 683.415 L1497.05 683.415 L1496.49 683.415 L1495.93 683.415 L1495.37 683.415 L1494.81 683.415 L1494.25 683.415 L1493.69 683.415 L1493.13 683.415 L1492.57 683.415 L1492.01 683.415 L1491.45 683.415 L1490.89 683.415 L1490.34 683.415 L1489.78 683.415 L1489.22 683.415 L1488.66 683.415 L1488.1 683.415 L1487.54 683.415 L1486.98 683.415 L1486.42 683.415 L1485.86 683.415 L1485.3 683.415 L1484.74 683.415 L1484.18 683.415 L1483.62 683.415 L1483.07 683.415 L1482.51 683.415 L1481.95 683.415 L1481.39 683.415 L1480.83 683.415 L1480.27 683.415 L1479.71 683.415 L1479.15 683.415 L1478.59 683.415 L1478.03 683.415 L1477.47 683.415 L1476.91 683.415 L1476.35 683.415 L1475.79 683.415 L1475.24 683.415 L1474.68 683.415 L1474.12 683.415 L1473.56 683.415 L1473 683.415 L1472.44 683.415 L1471.88 683.415 L1471.32 683.415 L1470.76 683.415 L1470.2 683.415 L1469.64 683.415 L1469.08 683.415 L1468.52 683.415 L1467.97 683.415 L1467.41 683.415 L1466.85 683.415 L1466.29 683.415 L1465.73 683.415 L1465.17 683.415 L1464.61 683.415 L1464.05 683.415 L1463.49 683.415 L1462.93 683.415 L1462.37 683.415 L1461.81 683.415 L1461.25 683.415 L1460.7 683.415 L1460.14 683.415 L1459.58 683.415 L1459.02 683.415 L1458.46 683.415 L1457.9 683.415 L1457.34 683.415 L1456.78 683.415 L1456.22 683.415 L1455.66 683.415 L1455.1 683.415 L1454.54 683.415 L1453.98 683.415 L1453.42 683.415 L1452.87 683.415 L1452.31 683.415 L1451.75 683.415 L1451.19 683.415 L1450.63 683.415 L1450.07 683.415 L1449.51 683.415 L1448.95 683.415 L1448.39 683.415 L1447.83 683.415 L1447.27 683.415 L1446.71 683.415 L1446.15 683.415 L1445.6 683.415 L1445.04 683.415 L1444.48 683.415 L1443.92 683.415 L1443.36 683.415 L1442.8 683.415 L1442.24 683.415 L1441.68 683.415 L1441.12 683.415 L1440.56 683.415 L1440 683.415 L1439.44 683.415 L1438.88 683.415 L1438.33 683.415 L1437.77 683.415 L1437.21 683.415 L1436.65 683.415 L1436.09 683.415 L1435.53 683.415 L1434.97 683.415 L1434.41 683.415 L1433.85 683.415 L1433.29 683.415 L1432.73 683.415 L1432.17 683.415 L1431.61 683.415 L1431.05 683.415 L1430.5 683.415 L1429.94 683.415 L1429.38 683.415 L1428.82 683.415 L1428.26 683.415 L1427.7 683.415 L1427.14 683.415 L1426.58 683.415 L1426.02 683.415 L1425.46 683.415 L1424.9 683.415 L1424.34 683.415 L1423.78 683.415 L1423.23 683.415 L1422.67 683.415 L1422.11 683.415 L1421.55 683.415 L1420.99 683.415 L1420.43 683.415 L1419.87 683.415 L1419.31 683.415 L1418.75 683.415 L1418.19 683.415 L1417.63 683.415 L1417.07 683.415 L1416.51 683.415 L1415.95 683.415 L1415.4 683.415 L1414.84 683.415 L1414.28 683.415 L1413.72 683.415 L1413.16 683.415 L1412.6 683.415 L1412.04 683.415 L1411.48 683.415 L1410.92 683.415 L1410.36 683.415 L1409.8 683.415 L1409.24 683.415 L1408.68 683.415 L1408.13 683.415 L1407.57 683.415 L1407.01 683.415 L1406.45 683.415 L1405.89 683.415 L1405.33 683.415 L1404.77 683.415 L1404.21 683.415 L1403.65 683.415 L1403.09 683.415 L1402.53 683.415 L1401.97 683.415 L1401.41 683.415 L1400.86 683.415 L1400.3 683.415 L1399.74 683.415 L1399.18 683.415 L1398.62 683.415 L1398.06 683.415 L1397.5 683.415 L1396.94 683.415 L1396.38 683.415 L1395.82 683.415 L1395.26 683.415 L1394.7 683.415 L1394.14 683.415 L1393.58 683.415 L1393.03 683.415 L1392.47 683.415 L1391.91 683.415 L1391.35 683.415 L1390.79 683.415 L1390.23 683.415 L1389.67 683.415 L1389.11 683.415 L1388.55 683.415 L1387.99 683.415 L1387.43 683.415 L1386.87 683.415 L1386.31 683.415 L1385.76 683.415 L1385.2 683.415 L1384.64 683.415 L1384.08 683.415 L1383.52 683.415 L1382.96 683.415 L1382.4 683.415 L1381.84 683.415 L1381.28 683.415 L1380.72 683.415 L1380.16 683.415 L1379.6 683.415 L1379.04 683.415 L1378.49 683.415 L1377.93 683.415 L1377.37 683.415 L1376.81 683.415 L1376.25 683.415 L1375.69 683.415 L1375.13 683.415 L1374.57 683.415 L1374.01 683.415 L1373.45 683.415 L1372.89 683.415 L1372.33 683.415 L1371.77 683.415 L1371.21 683.415 L1370.66 683.415 L1370.1 683.415 L1369.54 683.415 L1368.98 683.415 L1368.42 683.415 L1367.86 683.415 L1367.3 683.415 L1366.74 683.415 L1366.18 683.415 L1365.62 683.415 L1365.06 683.415 L1364.5 683.415 L1363.94 683.415 L1363.39 683.415 L1362.83 683.415 L1362.27 683.415 L1361.71 683.415 L1361.15 683.415 L1360.59 683.415 L1360.03 683.415 L1359.47 683.415 L1358.91 683.415 L1358.35 683.415 L1357.79 683.415 L1357.23 683.415 L1356.67 683.415 L1356.12 683.415 L1355.56 683.415 L1355 683.415 L1354.44 683.415 L1353.88 683.415 L1353.32 683.415 L1352.76 683.415 L1352.2 683.415 L1351.64 683.415 L1351.08 683.415 L1350.52 683.415 L1349.96 683.415 L1349.4 683.415 L1348.84 683.415 L1348.29 683.415 L1347.73 683.415 L1347.17 683.415 L1346.61 683.415 L1346.05 683.415 L1345.49 683.415 L1344.93 683.415 L1344.37 683.415 L1343.81 683.415 L1343.25 683.415 L1342.69 683.415 L1342.13 683.415 L1341.57 683.415 L1341.02 683.415 L1340.46 683.415 L1339.9 683.415 L1339.34 683.415 L1338.78 683.415 L1338.22 683.415 L1337.66 683.415 L1337.1 683.415 L1336.54 683.415 L1335.98 683.415 L1335.42 683.415 L1334.86 683.415 L1334.3 683.415 L1333.75 683.415 L1333.19 683.415 L1332.63 683.415 L1332.07 683.415 L1331.51 683.415 L1330.95 683.415 L1330.39 683.415 L1329.83 683.415 L1329.27 683.415 L1328.71 683.415 L1328.15 683.415 L1327.59 683.415 L1327.03 683.415 L1326.47 683.415 L1325.92 683.415 L1325.36 683.415 L1324.8 683.415 L1324.24 683.415 L1323.68 683.415 L1323.12 683.415 L1322.56 683.415 L1322 683.415 L1321.44 683.415 L1320.88 683.415 L1320.32 683.415 L1319.76 683.415 L1319.2 683.415 L1318.65 683.415 L1318.09 683.415 L1317.53 683.415 L1316.97 683.415 L1316.41 683.415 L1315.85 683.415 L1315.29 683.415 L1314.73 683.415 L1314.17 683.415 L1313.61 683.415 L1313.05 683.415 L1312.49 683.415 L1311.93 683.415 L1311.38 683.415 L1310.82 683.415 L1310.26 683.415 L1309.7 683.415 L1309.14 683.415 L1308.58 683.415 L1308.02 683.415 L1307.46 683.415 L1306.9 683.415 L1306.34 683.415 L1305.78 683.415 L1305.22 683.415 L1304.66 683.415 L1304.1 683.415 L1303.55 683.415 L1302.99 683.415 L1302.43 683.415 L1301.87 683.415 L1301.31 683.415 L1300.75 683.415 L1300.19 683.415 L1299.63 683.415 L1299.07 683.415 L1298.51 683.415 L1297.95 683.415 L1297.39 683.415 L1296.83 683.415 L1296.28 683.415 L1295.72 683.415 L1295.16 683.415 L1294.6 683.415 L1294.04 683.415 L1293.48 683.415 L1292.92 683.415 L1292.36 683.415 L1291.8 683.415 L1291.24 683.415 L1290.68 683.415 L1290.12 683.415 L1289.56 683.415 L1289 683.415 L1288.45 683.415 L1287.89 683.415 L1287.33 683.415 L1286.77 683.415 L1286.21 683.415 L1285.65 683.415 L1285.09 683.415 L1284.53 683.415 L1283.97 683.415 L1283.41 683.415 L1282.85 683.415 L1282.29 683.415 L1281.73 683.415 L1281.18 683.415 L1280.62 683.415 L1280.06 683.415 L1279.5 683.415 L1278.94 683.415 L1278.38 683.415 L1277.82 683.415 L1277.26 683.415 L1276.7 683.415 L1276.14 683.415 L1275.58 683.415 L1275.02 683.415 L1274.46 683.415 L1273.91 683.415 L1273.35 683.415 L1272.79 683.415 L1272.23 683.415 L1271.67 683.415 L1271.11 683.415 L1270.55 683.415 L1269.99 683.415 L1269.43 683.415 L1268.87 683.415 L1268.31 683.415 L1267.75 683.415 L1267.19 683.415 L1266.63 683.415 L1266.08 683.415 L1265.52 683.415 L1264.96 683.415 L1264.4 683.415 L1263.84 683.415 L1263.28 683.415 L1262.72 683.415 L1262.16 683.415 L1261.6 683.415 L1261.04 683.415 L1260.48 683.415 L1259.92 683.415 L1259.36 683.415 L1258.81 683.415 L1258.25 683.415 L1257.69 683.415 L1257.13 683.415 L1256.57 683.415 L1256.01 683.415 L1255.45 683.415 L1254.89 683.415 L1254.33 683.415 L1253.77 683.415 L1253.21 683.415 L1252.65 683.415 L1252.09 683.415 L1251.54 683.415 L1250.98 683.415 L1250.42 683.415 L1249.86 683.415 L1249.3 683.415 L1248.74 683.415 L1248.18 683.415 L1247.62 683.415 L1247.06 683.415 L1246.5 683.415 L1245.94 683.415 L1245.38 683.415 L1244.82 683.415 L1244.26 683.415 L1243.71 683.415 L1243.15 683.415 L1242.59 683.415 L1242.03 683.415 L1241.47 683.415 L1240.91 683.415 L1240.35 683.415 L1239.79 683.415 L1239.23 683.415 L1238.67 683.415 L1238.11 683.415 L1237.55 683.415 L1236.99 683.415 L1236.44 683.415 L1235.88 683.415 L1235.32 683.415 L1234.76 683.415 L1234.2 683.415 L1233.64 683.415 L1233.08 683.415 L1232.52 683.415 L1231.96 683.415 L1231.4 683.415 L1230.84 683.415 L1230.28 683.415 L1229.72 683.415 L1229.17 683.415 L1228.61 683.415 L1228.05 683.415 L1227.49 683.415 L1226.93 683.415 L1226.37 683.415 L1225.81 683.415 L1225.25 683.415 L1224.69 683.415 L1224.13 683.415 L1223.57 683.415 L1223.01 683.415 L1222.45 683.415 L1221.89 683.415 L1221.34 683.415 L1220.78 683.415 L1220.22 683.415 L1219.66 683.415 L1219.1 683.415 L1218.54 683.415 L1217.98 683.415 L1217.42 683.415 L1216.86 683.415 L1216.3 683.415 L1215.74 683.415 L1215.18 683.415 L1214.62 683.415 L1214.07 683.415 L1213.51 683.415 L1212.95 683.415 L1212.39 683.415 L1211.83 683.415 L1211.27 683.415 L1210.71 683.415 L1210.15 683.415 L1209.59 683.415 L1209.03 683.415 L1208.47 683.415 L1207.91 683.415 L1207.35 683.415 L1206.8 683.415 L1206.24 683.415 L1205.68 683.415 L1205.12 683.415 L1204.56 683.415 L1204 683.415 L1203.44 683.415 L1202.88 683.415 L1202.32 683.415 L1201.76 683.415 L1201.2 683.415 L1200.64 683.415 L1200.08 683.415 L1199.52 683.415 L1198.97 683.415 L1198.41 683.415 L1197.85 683.415 L1197.29 683.415 L1196.73 683.415 L1196.17 683.415 L1195.61 683.415 L1195.05 683.415 L1194.49 683.415 L1193.93 683.415 L1193.37 683.415 L1192.81 683.415 L1192.25 683.415 L1191.7 683.415 L1191.14 683.415 L1190.58 683.415 L1190.02 683.415 L1189.46 683.415 L1188.9 683.415 L1188.34 683.415 L1187.78 683.415 L1187.22 683.415 L1186.66 683.415 L1186.1 683.415 L1185.54 683.415 L1184.98 683.415 L1184.43 683.415 L1183.87 683.415 L1183.31 683.415 L1182.75 683.415 L1182.19 683.415 L1181.63 683.415 L1181.07 683.415 L1180.51 683.415 L1179.95 683.415 L1179.39 683.415 L1178.83 683.415 L1178.27 683.415 L1177.71 683.415 L1177.15 683.415 L1176.6 683.415 L1176.04 683.415 L1175.48 683.415 L1174.92 683.415 L1174.36 683.415 L1173.8 683.415 L1173.24 683.415 L1172.68 683.415 L1172.12 683.415 L1171.56 683.415 L1171 683.415 L1170.44 683.415 L1169.88 683.415 L1169.33 683.415 L1168.77 683.415 L1168.21 683.415 L1167.65 683.415 L1167.09 683.415 L1166.53 683.415 L1165.97 683.415 L1165.41 683.415 L1164.85 683.415 L1164.29 683.415 L1163.73 683.415 L1163.17 683.415 L1162.61 683.415 L1162.05 683.415 L1161.5 683.415 L1160.94 683.415 L1160.38 683.415 L1159.82 683.415 L1159.26 683.415 L1158.7 683.415 L1158.14 683.415 L1157.58 683.415 L1157.02 683.415 L1156.46 683.415 L1155.9 683.415 L1155.34 683.415 L1154.78 683.415 L1154.23 683.415 L1153.67 683.415 L1153.11 683.415 L1152.55 683.415 L1151.99 683.415 L1151.43 683.415 L1150.87 683.415 L1150.31 683.415 L1149.75 683.415 L1149.19 683.415 L1148.63 683.415 L1148.07 683.415 L1147.51 683.415 L1146.96 683.415 L1146.4 683.415 L1145.84 683.415 L1145.28 683.415 L1144.72 683.415 L1144.16 683.415 L1143.6 683.415 L1143.04 683.415 L1142.48 683.415 L1141.92 683.415 L1141.36 683.415 L1140.8 683.415 L1140.24 683.415 L1139.68 683.415 L1139.13 683.415 L1138.57 683.415 L1138.01 683.415 L1137.45 683.415 L1136.89 683.415 L1136.33 683.415 L1135.77 683.415 L1135.21 683.415 L1134.65 683.415 L1134.09 683.415 L1133.53 683.415 L1132.97 683.415 L1132.41 683.415 L1131.86 683.415 L1131.3 683.415 L1130.74 683.415 L1130.18 683.415 L1129.62 683.415 L1129.06 683.415 L1128.5 683.415 L1127.94 683.415 L1127.38 683.415 L1126.82 683.415 L1126.26 683.415 L1125.7 683.415 L1125.14 683.415 L1124.59 683.415 L1124.03 683.415 L1123.47 683.415 L1122.91 683.415 L1122.35 683.415 L1121.79 683.415 L1121.23 683.415 L1120.67 683.415 L1120.11 683.415 L1119.55 683.415 L1118.99 683.415 L1118.43 683.415 L1117.87 683.415 L1117.31 683.415 L1116.76 683.415 L1116.2 683.415 L1115.64 683.415 L1115.08 683.415 L1114.52 683.415 L1113.96 683.415 L1113.4 683.415 L1112.84 683.415 L1112.28 683.415 L1111.72 683.415 L1111.16 683.415 L1110.6 683.415 L1110.04 683.415 L1109.49 683.415 L1108.93 683.415 L1108.37 683.415 L1107.81 683.415 L1107.25 683.415 L1106.69 683.415 L1106.13 683.415 L1105.57 683.415 L1105.01 683.415 L1104.45 683.415 L1103.89 683.415 L1103.33 683.415 L1102.77 683.415 L1102.22 683.415 L1101.66 683.415 L1101.1 683.415 L1100.54 683.415 L1099.98 683.415 L1099.42 683.415 L1098.86 683.415 L1098.3 683.415 L1097.74 683.415 L1097.18 683.415 L1096.62 683.415 L1096.06 683.415 L1095.5 683.415 L1094.94 683.415 L1094.39 683.415 L1093.83 683.415 L1093.27 683.415 L1092.71 683.415 L1092.15 683.415 L1091.59 683.415 L1091.03 683.415 L1090.47 683.415 L1089.91 683.415 L1089.35 683.415 L1088.79 683.415 L1088.23 683.415 L1087.67 683.415 L1087.12 683.415 L1086.56 683.415 L1086 683.415 L1085.44 683.415 L1084.88 683.415 L1084.32 683.415 L1083.76 683.415 L1083.2 683.415 L1082.64 683.415 L1082.08 683.415 L1081.52 683.415 L1080.96 683.415 L1080.4 683.415 L1079.85 683.415 L1079.29 683.415 L1078.73 683.415 L1078.17 683.415 L1077.61 683.415 L1077.05 683.415 L1076.49 683.415 L1075.93 683.415 L1075.37 683.415 L1074.81 683.415 L1074.25 683.415 L1073.69 683.415 L1073.13 683.415 L1072.57 683.415 L1072.02 683.415 L1071.46 683.415 L1070.9 683.415 L1070.34 683.415 L1069.78 683.415 L1069.22 683.415 L1068.66 683.415 L1068.1 683.415 L1067.54 683.415 L1066.98 683.415 L1066.42 683.415 L1065.86 683.415 L1065.3 683.415 L1064.75 683.415 L1064.19 683.415 L1063.63 683.415 L1063.07 683.415 L1062.51 683.415 L1061.95 683.415 L1061.39 683.415 L1060.83 683.415 L1060.27 683.415 L1059.71 683.415 L1059.15 683.415 L1058.59 683.415 L1058.03 683.415 L1057.48 683.415 L1056.92 683.415 L1056.36 683.415 L1055.8 683.415 L1055.24 683.415 L1054.68 683.415 L1054.12 683.415 L1053.56 683.415 L1053 683.415 L1052.44 683.415 L1051.88 683.415 L1051.32 683.415 L1050.76 683.415 L1050.2 683.415 L1049.65 683.415 L1049.09 683.415 L1048.53 683.415 L1047.97 683.415 L1047.41 683.415 L1046.85 683.415 L1046.29 683.415 L1045.73 683.415 L1045.17 683.415 L1044.61 683.415 L1044.05 683.415 L1043.49 683.415 L1042.93 683.415 L1042.38 683.415 L1041.82 683.415 L1041.26 683.415 L1040.7 683.415 L1040.14 683.415 L1039.58 683.415 L1039.02 683.415 L1038.46 683.415 L1037.9 683.415 L1037.34 683.415 L1036.78 683.415 L1036.22 683.415 L1035.66 683.415 L1035.1 683.415 L1034.55 683.415 L1033.99 683.415 L1033.43 683.415 L1032.87 683.415 L1032.31 683.415 L1031.75 683.415 L1031.19 683.415 L1030.63 683.415 L1030.07 683.415 L1029.51 683.415 L1028.95 683.415 L1028.39 683.415 L1027.83 683.415 L1027.28 683.415 L1026.72 683.415 L1026.16 683.415 L1025.6 683.415 L1025.04 683.415 L1024.48 683.415 L1023.92 683.415 L1023.36 683.415 L1022.8 683.415 L1022.24 683.415 L1021.68 683.415 L1021.12 683.415 L1020.56 683.415 L1020.01 683.415 L1019.45 683.415 L1018.89 683.415 L1018.33 683.415 L1017.77 683.415 L1017.21 683.415 L1016.65 683.415 L1016.09 683.415 L1015.53 683.415 L1014.97 683.415 L1014.41 683.415 L1013.85 683.415 L1013.29 683.415 L1012.73 683.415 L1012.18 683.415 L1011.62 683.415 L1011.06 683.415 L1010.5 683.415 L1009.94 683.415 L1009.38 683.415 L1008.82 683.415 L1008.26 683.415 L1007.7 683.415 L1007.14 683.415 L1006.58 683.415 L1006.02 683.415 L1005.46 683.415 L1004.91 683.415 L1004.35 683.415 L1003.79 683.415 L1003.23 683.415 L1002.67 683.415 L1002.11 683.415 L1001.55 683.415 L1000.99 683.415 L1000.43 683.415 L999.872 683.415 L999.313 683.415 L998.754 683.415 L998.194 683.415 L997.635 683.415 L997.076 683.415 L996.517 683.415 L995.957 683.415 L995.398 683.415 L994.839 683.415 L994.28 683.415 L993.72 683.415 L993.161 683.415 L992.602 683.415 L992.043 683.415 L991.483 683.415 L990.924 683.415 L990.365 683.415 L989.806 683.415 L989.246 683.415 L988.687 683.415 L988.128 683.415 L987.569 683.415 L987.009 683.415 L986.45 683.415 L985.891 683.415 L985.332 683.415 L984.772 683.415 L984.213 683.415 L983.654 683.415 L983.095 683.415 L982.535 683.415 L981.976 683.415 L981.417 683.415 L980.858 683.415 L980.298 683.415 L979.739 683.415 L979.18 683.415 L978.621 683.415 L978.061 683.415 L977.502 683.415 L976.943 683.415 L976.384 683.415 L975.824 683.415 L975.265 683.415 L974.706 683.415 L974.147 683.415 L973.587 683.415 L973.028 683.415 L972.469 683.415 L971.91 683.415 L971.35 683.415 L970.791 683.415 L970.232 683.415 L969.673 683.415 L969.113 683.415 L968.554 683.415 L967.995 683.415 L967.436 683.415 L966.876 683.415 L966.317 683.415 L965.758 683.415 L965.199 683.415 L964.639 683.415 L964.08 683.415 L963.521 683.415 L962.962 683.415 L962.402 683.415 L961.843 683.415 L961.284 683.415 L960.725 683.415 L960.165 683.415 L959.606 683.415 L959.047 683.415 L958.488 683.415 L957.928 683.415 L957.369 683.415 L956.81 683.415 L956.251 683.415 L955.691 683.415 L955.132 683.415 L954.573 683.415 L954.014 683.415 L953.454 683.415 L952.895 683.415 L952.336 683.415 L951.777 683.415 L951.217 683.415 L950.658 683.415 L950.099 683.415 L949.54 683.415 L948.98 683.415 L948.421 683.415 L947.862 683.415 L947.303 683.415 L946.743 683.415 L946.184 683.415 L945.625 683.415 L945.066 683.415 L944.506 683.415 L943.947 683.415 L943.388 683.415 L942.829 683.415 L942.269 683.415 L941.71 683.415 L941.151 683.415 L940.592 683.415 L940.032 683.415 L939.473 683.415 L938.914 683.415 L938.355 683.415 L937.795 683.415 L937.236 683.415 L936.677 683.415 L936.118 683.415 L935.558 683.415 L934.999 683.415 L934.44 683.415 L933.881 683.415 L933.321 683.415 L932.762 683.415 L932.203 683.415 L931.644 683.415 L931.084 683.415 L930.525 683.415 L929.966 683.415 L929.406 683.415 L928.847 683.415 L928.288 683.415 L927.729 683.415 L927.169 683.415 L926.61 683.415 L926.051 683.415 L925.492 683.415 L924.932 683.415 L924.373 683.415 L923.814 683.415 L923.255 683.415 L922.695 683.415 L922.136 683.415 L921.577 683.415 L921.018 683.415 L920.458 683.415 L919.899 683.415 L919.34 683.415 L918.781 683.415 L918.221 683.415 L917.662 683.415 L917.103 683.415 L916.544 683.415 L915.984 683.415 L915.425 683.415 L914.866 683.415 L914.307 683.415 L913.747 683.415 L913.188 683.415 L912.629 683.415 L912.07 683.415 L911.51 683.415 L910.951 683.415 L910.392 683.415 L909.833 683.415 L909.273 683.415 L908.714 683.415 L908.155 683.415 L907.596 683.415 L907.036 683.415 L906.477 683.415 L905.918 683.415 L905.359 683.415 L904.799 683.415 L904.24 683.415 L903.681 683.415 L903.122 683.415 L902.562 683.415 L902.003 683.415 L901.444 683.415 L900.885 683.415 L900.325 683.415 L899.766 683.415 L899.207 683.415 L898.648 683.415 L898.088 683.415 L897.529 683.415 L896.97 683.415 L896.411 683.415 L895.851 683.415 L895.292 683.415 L894.733 683.415 L894.174 683.415 L893.614 683.415 L893.055 683.415 L892.496 683.415 L891.937 683.415 L891.377 683.415 L890.818 683.415 L890.259 683.415 L889.7 683.415 L889.14 683.415 L888.581 683.415 L888.022 683.415 L887.463 683.415 L886.903 683.415 L886.344 683.415 L885.785 683.415 L885.226 683.415 L884.666 683.415 L884.107 683.415 L883.548 683.415 L882.989 683.415 L882.429 683.415 L881.87 683.415 L881.311 683.415 L880.752 683.415 L880.192 683.415 L879.633 683.415 L879.074 683.415 L878.515 683.415 L877.955 683.415 L877.396 683.415 L876.837 683.415 L876.278 683.415 L875.718 683.415 L875.159 683.415 L874.6 683.415 L874.041 683.415 L873.481 683.415 L872.922 683.415 L872.363 683.415 L871.804 683.415 L871.244 683.415 L870.685 683.415 L870.126 683.415 L869.567 683.415 L869.007 683.415 L868.448 683.415 L867.889 683.415 L867.33 683.415 L866.77 683.415 L866.211 683.415 L865.652 683.415 L865.093 683.415 L864.533 683.415 L863.974 683.415 L863.415 683.415 L862.856 683.415 L862.296 683.415 L861.737 683.415 L861.178 683.415 L860.619 683.415 L860.059 683.415 L859.5 683.415 L858.941 683.415 L858.382 683.415 L857.822 683.415 L857.263 683.415 L856.704 683.415 L856.145 683.415 L855.585 683.415 L855.026 683.415 L854.467 683.415 L853.908 683.415 L853.348 683.415 L852.789 683.415 L852.23 683.415 L851.671 683.415 L851.111 683.415 L850.552 683.415 L849.993 683.415 L849.434 683.415 L848.874 683.415 L848.315 683.415 L847.756 683.415 L847.197 683.415 L846.637 683.415 L846.078 683.415 L845.519 683.415 L844.96 683.415 L844.4 683.415 L843.841 683.415 L843.282 683.415 L842.723 683.415 L842.163 683.415 L841.604 683.415 L841.045 683.415 L840.486 683.415 L839.926 683.415 L839.367 683.415 L838.808 683.415 L838.249 683.415 L837.689 683.415 L837.13 683.415 L836.571 683.415 L836.012 683.415 L835.452 683.415 L834.893 683.415 L834.334 683.415 L833.775 683.415 L833.215 683.415 L832.656 683.415 L832.097 683.415 L831.538 683.415 L830.978 683.415 L830.419 683.415 L829.86 683.415 L829.301 683.415 L828.741 683.415 L828.182 683.415 L827.623 683.415 L827.064 683.415 L826.504 683.415 L825.945 683.415 L825.386 683.415 L824.827 683.415 L824.267 683.415 L823.708 683.415 L823.149 683.415 L822.59 683.415 L822.03 683.415 L821.471 683.415 L820.912 683.415 L820.353 683.415 L819.793 683.415 L819.234 683.415 L818.675 683.415 L818.116 683.415 L817.556 683.415 L816.997 683.415 L816.438 683.415 L815.879 683.415 L815.319 683.415 L814.76 683.415 L814.201 683.415 L813.642 683.415 L813.082 683.415 L812.523 683.415 L811.964 683.415 L811.405 683.415 L810.845 683.415 L810.286 683.415 L809.727 683.415 L809.168 683.415 L808.608 683.415 L808.049 683.415 L807.49 683.415 L806.931 683.415 L806.371 683.415 L805.812 683.415 L805.253 683.415 L804.693 683.415 L804.134 683.415 L803.575 683.415 L803.016 683.415 L802.456 683.415 L801.897 683.415 L801.338 683.415 L800.779 683.415 L800.219 683.415 L799.66 683.415 L799.101 683.415 L798.542 683.415 L797.982 683.415 L797.423 683.415 L796.864 683.415 L796.305 683.415 L795.745 683.415 L795.186 683.415 L794.627 683.415 L794.068 683.415 L793.508 683.415 L792.949 683.415 L792.39 683.415 L791.831 683.415 L791.271 683.415 L790.712 683.415 L790.153 683.415 L789.594 683.415 L789.034 683.415 L788.475 683.415 L787.916 683.415 L787.357 683.415 L786.797 683.415 L786.238 683.415 L785.679 683.415 L785.12 683.415 L784.56 683.415 L784.001 683.415 L783.442 683.415 L782.883 683.415 L782.323 683.415 L781.764 683.415 L781.205 683.415 L780.646 683.415 L780.086 683.415 L779.527 683.415 L778.968 683.415 L778.409 683.415 L777.849 683.415 L777.29 683.415 L776.731 683.415 L776.172 683.415 L775.612 683.415 L775.053 683.415 L774.494 683.415 L773.935 683.415 L773.375 683.415 L772.816 683.415 L772.257 683.415 L771.698 683.415 L771.138 683.415 L770.579 683.415 L770.02 683.415 L769.461 683.415 L768.901 683.415 L768.342 683.415 L767.783 683.415 L767.224 683.415 L766.664 683.415 L766.105 683.415 L765.546 683.415 L764.987 683.415 L764.427 683.415 L763.868 683.415 L763.309 683.415 L762.75 683.415 L762.19 683.415 L761.631 683.415 L761.072 683.415 L760.513 683.415 L759.953 683.415 L759.394 683.415 L758.835 683.415 L758.276 683.415 L757.716 683.415 L757.157 683.415 L756.598 683.415 L756.039 683.415 L755.479 683.415 L754.92 683.415 L754.361 683.415 L753.802 683.415 L753.242 683.415 L752.683 683.415 L752.124 683.415 L751.565 683.415 L751.005 683.415 L750.446 683.415 L749.887 683.415 L749.328 683.415 L748.768 683.415 L748.209 683.415 L747.65 683.415 L747.091 683.415 L746.531 683.415 L745.972 683.415 L745.413 683.415 L744.854 683.415 L744.294 683.415 L743.735 683.415 L743.176 683.415 L742.617 683.415 L742.057 683.415 L741.498 683.415 L740.939 683.415 L740.38 683.415 L739.82 683.415 L739.261 683.415 L738.702 683.415 L738.143 683.415 L737.583 683.415 L737.024 683.415 L736.465 683.415 L735.906 683.415 L735.346 683.415 L734.787 683.415 L734.228 683.415 L733.669 683.415 L733.109 683.415 L732.55 683.415 L731.991 683.415 L731.432 683.415 L730.872 683.415 L730.313 683.415 L729.754 683.415 L729.195 683.415 L728.635 683.415 L728.076 683.415 L727.517 683.415 L726.958 683.415 L726.398 683.415 L725.839 683.415 L725.28 683.415 L724.721 683.415 L724.161 683.415 L723.602 683.415 L723.043 683.415 L722.484 683.415 L721.924 683.415 L721.365 683.415 L720.806 683.415 L720.247 683.415  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip433)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,687.898 720.806,687.898 721.365,687.898 721.924,687.898 722.484,687.898 723.043,687.898 723.602,687.898 724.161,687.898 724.721,687.898 725.28,687.898 725.839,687.898 726.398,687.898 726.958,687.898 727.517,687.898 728.076,687.898 728.635,687.898 729.195,687.898 729.754,687.898 730.313,687.898 730.872,687.898 731.432,687.898 731.991,687.898 732.55,687.898 733.109,687.898 733.669,687.898 734.228,687.898 734.787,687.898 735.346,687.898 735.906,687.898 736.465,687.898 737.024,687.898 737.583,687.898 738.143,687.898 738.702,687.898 739.261,687.898 739.82,687.898 740.38,687.898 740.939,687.898 741.498,687.898 742.057,687.898 742.617,687.898 743.176,687.898 743.735,687.898 744.294,687.898 744.854,687.898 745.413,687.898 745.972,687.898 746.531,687.898 747.091,687.898 747.65,687.898 748.209,687.898 748.768,687.898 749.328,687.898 749.887,687.898 750.446,687.898 751.005,687.898 751.565,687.898 752.124,687.898 752.683,687.898 753.242,687.898 753.802,687.898 754.361,687.898 754.92,687.898 755.479,687.898 756.039,687.898 756.598,687.898 757.157,687.898 757.716,687.898 758.276,687.898 758.835,687.898 759.394,687.898 759.953,687.898 760.513,687.898 761.072,687.898 761.631,687.898 762.19,687.898 762.75,687.898 763.309,687.898 763.868,687.898 764.427,687.898 764.987,687.898 765.546,687.898 766.105,687.898 766.664,687.898 767.224,687.898 767.783,687.898 768.342,687.898 768.901,687.898 769.461,687.898 770.02,687.898 770.579,687.898 771.138,687.898 771.698,687.898 772.257,687.898 772.816,687.898 773.375,687.898 773.935,687.898 774.494,687.898 775.053,687.898 775.612,687.898 776.172,687.898 776.731,687.898 777.29,687.898 777.849,687.898 778.409,687.898 778.968,687.898 779.527,687.898 780.086,687.898 780.646,687.898 781.205,687.898 781.764,687.898 782.323,687.898 782.883,687.898 783.442,687.898 784.001,687.898 784.56,687.898 785.12,687.898 785.679,687.898 786.238,687.898 786.797,687.898 787.357,687.898 787.916,687.898 788.475,687.898 789.034,687.898 789.594,687.898 790.153,687.898 790.712,687.898 791.271,687.898 791.831,687.898 792.39,687.898 792.949,687.898 793.508,687.898 794.068,687.898 794.627,687.898 795.186,687.898 795.745,687.898 796.305,687.898 796.864,687.898 797.423,687.898 797.982,687.898 798.542,687.898 799.101,687.898 799.66,687.898 800.219,687.898 800.779,687.898 801.338,687.898 801.897,687.898 802.456,687.898 803.016,687.898 803.575,687.898 804.134,687.898 804.693,687.898 805.253,687.898 805.812,687.898 806.371,687.898 806.931,687.898 807.49,687.898 808.049,687.898 808.608,687.898 809.168,687.898 809.727,687.898 810.286,687.898 810.845,687.898 811.405,687.898 811.964,687.898 812.523,687.898 813.082,687.898 813.642,687.898 814.201,687.898 814.76,687.898 815.319,687.898 815.879,687.898 816.438,687.898 816.997,687.898 817.556,687.898 818.116,687.898 818.675,687.898 819.234,687.898 819.793,687.898 820.353,687.898 820.912,687.898 821.471,687.898 822.03,687.898 822.59,687.898 823.149,687.898 823.708,687.898 824.267,687.898 824.827,687.898 825.386,687.898 825.945,687.898 826.504,687.898 827.064,687.898 827.623,687.898 828.182,687.898 828.741,687.898 829.301,687.898 829.86,687.898 830.419,687.898 830.978,687.898 831.538,687.898 832.097,687.898 832.656,687.898 833.215,687.898 833.775,687.898 834.334,687.898 834.893,687.898 835.452,687.898 836.012,687.898 836.571,687.898 837.13,687.898 837.689,687.898 838.249,687.898 838.808,687.898 839.367,687.898 839.926,687.898 840.486,687.898 841.045,687.898 841.604,687.898 842.163,687.898 842.723,687.898 843.282,687.898 843.841,687.898 844.4,687.898 844.96,687.898 845.519,687.898 846.078,687.898 846.637,687.898 847.197,687.898 847.756,687.898 848.315,687.898 848.874,687.898 849.434,687.898 849.993,687.898 850.552,687.898 851.111,687.898 851.671,687.898 852.23,687.898 852.789,687.898 853.348,687.898 853.908,687.898 854.467,687.898 855.026,687.898 855.585,687.898 856.145,687.898 856.704,687.898 857.263,687.898 857.822,687.898 858.382,687.898 858.941,687.898 859.5,687.898 860.059,687.898 860.619,687.898 861.178,687.898 861.737,687.898 862.296,687.898 862.856,687.898 863.415,687.898 863.974,687.898 864.533,687.898 865.093,687.898 865.652,687.898 866.211,687.898 866.77,687.898 867.33,687.898 867.889,687.898 868.448,687.898 869.007,687.898 869.567,687.898 870.126,687.898 870.685,687.898 871.244,687.898 871.804,687.898 872.363,687.898 872.922,687.898 873.481,687.898 874.041,687.898 874.6,687.898 875.159,687.898 875.718,687.898 876.278,687.898 876.837,687.898 877.396,687.898 877.955,687.898 878.515,687.898 879.074,687.898 879.633,687.898 880.192,687.898 880.752,687.898 881.311,687.898 881.87,687.898 882.429,687.898 882.989,687.898 883.548,687.898 884.107,687.898 884.666,687.898 885.226,687.898 885.785,687.898 886.344,687.898 886.903,687.898 887.463,687.898 888.022,687.898 888.581,687.898 889.14,687.898 889.7,687.898 890.259,687.898 890.818,687.898 891.377,687.898 891.937,687.898 892.496,687.898 893.055,687.898 893.614,687.898 894.174,687.898 894.733,687.898 895.292,687.898 895.851,687.898 896.411,687.898 896.97,687.898 897.529,687.898 898.088,687.898 898.648,687.898 899.207,687.898 899.766,687.898 900.325,687.898 900.885,687.898 901.444,687.898 902.003,687.898 902.562,687.898 903.122,687.898 903.681,687.898 904.24,687.898 904.799,687.898 905.359,687.898 905.918,687.898 906.477,687.898 907.036,687.898 907.596,687.898 908.155,687.898 908.714,687.898 909.273,687.898 909.833,687.898 910.392,687.898 910.951,687.898 911.51,687.898 912.07,687.898 912.629,687.898 913.188,687.898 913.747,687.898 914.307,687.898 914.866,687.898 915.425,687.898 915.984,687.898 916.544,687.898 917.103,687.898 917.662,687.898 918.221,687.898 918.781,687.898 919.34,687.898 919.899,687.898 920.458,687.898 921.018,687.898 921.577,687.898 922.136,687.898 922.695,687.898 923.255,687.898 923.814,687.898 924.373,687.898 924.932,687.898 925.492,687.898 926.051,687.898 926.61,687.898 927.169,687.898 927.729,687.898 928.288,687.898 928.847,687.898 929.406,687.898 929.966,687.898 930.525,687.898 931.084,687.898 931.644,687.898 932.203,687.898 932.762,687.898 933.321,687.898 933.881,687.898 934.44,687.898 934.999,687.898 935.558,687.898 936.118,687.898 936.677,687.898 937.236,687.898 937.795,687.898 938.355,687.898 938.914,687.898 939.473,687.898 940.032,687.898 940.592,687.898 941.151,687.898 941.71,687.898 942.269,687.898 942.829,687.898 943.388,687.898 943.947,687.898 944.506,687.898 945.066,687.898 945.625,687.898 946.184,687.898 946.743,687.898 947.303,687.898 947.862,687.898 948.421,687.898 948.98,687.898 949.54,687.898 950.099,687.898 950.658,687.898 951.217,687.898 951.777,687.898 952.336,687.898 952.895,687.898 953.454,687.898 954.014,687.898 954.573,687.898 955.132,687.898 955.691,687.898 956.251,687.898 956.81,687.898 957.369,687.898 957.928,687.898 958.488,687.898 959.047,687.898 959.606,687.898 960.165,687.898 960.725,687.898 961.284,687.898 961.843,687.898 962.402,687.898 962.962,687.898 963.521,687.898 964.08,687.898 964.639,687.898 965.199,687.898 965.758,687.898 966.317,687.898 966.876,687.898 967.436,687.898 967.995,687.898 968.554,687.898 969.113,687.898 969.673,687.898 970.232,687.898 970.791,687.898 971.35,687.898 971.91,687.898 972.469,687.898 973.028,687.898 973.587,687.898 974.147,687.898 974.706,687.898 975.265,687.898 975.824,687.898 976.384,687.898 976.943,687.898 977.502,687.898 978.061,687.898 978.621,687.898 979.18,687.898 979.739,687.898 980.298,687.898 980.858,687.898 981.417,687.898 981.976,687.898 982.535,687.898 983.095,687.898 983.654,687.898 984.213,687.898 984.772,687.898 985.332,687.898 985.891,687.898 986.45,687.898 987.009,687.898 987.569,687.898 988.128,687.898 988.687,687.898 989.246,687.898 989.806,687.898 990.365,687.898 990.924,687.898 991.483,687.898 992.043,687.898 992.602,687.898 993.161,687.898 993.72,687.898 994.28,687.898 994.839,687.898 995.398,687.898 995.957,687.898 996.517,687.898 997.076,687.898 997.635,687.898 998.194,687.898 998.754,687.898 999.313,687.898 999.872,687.898 1000.43,687.898 1000.99,687.898 1001.55,687.898 1002.11,687.898 1002.67,687.898 1003.23,687.898 1003.79,687.898 1004.35,687.898 1004.91,687.898 1005.46,687.898 1006.02,687.898 1006.58,687.898 1007.14,687.898 1007.7,687.898 1008.26,687.898 1008.82,687.898 1009.38,687.898 1009.94,687.898 1010.5,687.898 1011.06,687.898 1011.62,687.898 1012.18,687.898 1012.73,687.898 1013.29,687.898 1013.85,687.898 1014.41,687.898 1014.97,687.898 1015.53,687.898 1016.09,687.898 1016.65,687.898 1017.21,687.898 1017.77,687.898 1018.33,687.898 1018.89,687.898 1019.45,687.898 1020.01,687.898 1020.56,687.898 1021.12,687.898 1021.68,687.898 1022.24,687.898 1022.8,687.898 1023.36,687.898 1023.92,687.898 1024.48,687.898 1025.04,687.898 1025.6,687.898 1026.16,687.898 1026.72,687.898 1027.28,687.898 1027.83,687.898 1028.39,687.898 1028.95,687.898 1029.51,687.898 1030.07,687.898 1030.63,687.898 1031.19,687.898 1031.75,687.898 1032.31,687.898 1032.87,687.898 1033.43,687.898 1033.99,687.898 1034.55,687.898 1035.1,687.898 1035.66,687.898 1036.22,687.898 1036.78,687.898 1037.34,687.898 1037.9,687.898 1038.46,687.898 1039.02,687.898 1039.58,687.898 1040.14,687.898 1040.7,687.898 1041.26,687.898 1041.82,687.898 1042.38,687.898 1042.93,687.898 1043.49,687.898 1044.05,687.898 1044.61,687.898 1045.17,687.898 1045.73,687.898 1046.29,687.898 1046.85,687.898 1047.41,687.898 1047.97,687.898 1048.53,687.898 1049.09,687.898 1049.65,687.898 1050.2,687.898 1050.76,687.898 1051.32,687.898 1051.88,687.898 1052.44,687.898 1053,687.898 1053.56,687.898 1054.12,687.898 1054.68,687.898 1055.24,687.898 1055.8,687.898 1056.36,687.898 1056.92,687.898 1057.48,687.898 1058.03,687.898 1058.59,687.898 1059.15,687.898 1059.71,687.898 1060.27,687.898 1060.83,687.898 1061.39,687.898 1061.95,687.898 1062.51,687.898 1063.07,687.898 1063.63,687.898 1064.19,687.898 1064.75,687.898 1065.3,687.898 1065.86,687.898 1066.42,687.898 1066.98,687.898 1067.54,687.898 1068.1,687.898 1068.66,687.898 1069.22,687.898 1069.78,687.898 1070.34,687.898 1070.9,687.898 1071.46,687.898 1072.02,687.898 1072.57,687.898 1073.13,687.898 1073.69,687.898 1074.25,687.898 1074.81,687.898 1075.37,687.898 1075.93,687.898 1076.49,687.898 1077.05,687.898 1077.61,687.898 1078.17,687.898 1078.73,687.898 1079.29,687.898 1079.85,687.898 1080.4,687.898 1080.96,687.898 1081.52,687.898 1082.08,687.898 1082.64,687.898 1083.2,687.898 1083.76,687.898 1084.32,687.898 1084.88,687.898 1085.44,687.898 1086,687.898 1086.56,687.898 1087.12,687.898 1087.67,687.898 1088.23,687.898 1088.79,687.898 1089.35,687.898 1089.91,687.898 1090.47,687.898 1091.03,687.898 1091.59,687.898 1092.15,687.898 1092.71,687.898 1093.27,687.898 1093.83,687.898 1094.39,687.898 1094.94,687.898 1095.5,687.898 1096.06,687.898 1096.62,687.898 1097.18,687.898 1097.74,687.898 1098.3,687.898 1098.86,687.898 1099.42,687.898 1099.98,687.898 1100.54,687.898 1101.1,687.898 1101.66,687.898 1102.22,687.898 1102.77,687.898 1103.33,687.898 1103.89,687.898 1104.45,687.898 1105.01,687.898 1105.57,687.898 1106.13,687.898 1106.69,687.898 1107.25,687.898 1107.81,687.898 1108.37,687.898 1108.93,687.898 1109.49,687.898 1110.04,687.898 1110.6,687.898 1111.16,687.898 1111.72,687.898 1112.28,687.898 1112.84,687.898 1113.4,687.898 1113.96,687.898 1114.52,687.898 1115.08,687.898 1115.64,687.898 1116.2,687.898 1116.76,687.898 1117.31,687.898 1117.87,687.898 1118.43,687.898 1118.99,687.898 1119.55,687.898 1120.11,687.898 1120.67,687.898 1121.23,687.898 1121.79,687.898 1122.35,687.898 1122.91,687.898 1123.47,687.898 1124.03,687.898 1124.59,687.898 1125.14,687.898 1125.7,687.898 1126.26,687.898 1126.82,687.898 1127.38,687.898 1127.94,687.898 1128.5,687.898 1129.06,687.898 1129.62,687.898 1130.18,687.898 1130.74,687.898 1131.3,687.898 1131.86,687.898 1132.41,687.898 1132.97,687.898 1133.53,687.898 1134.09,687.898 1134.65,687.898 1135.21,687.898 1135.77,687.898 1136.33,687.898 1136.89,687.898 1137.45,687.898 1138.01,687.898 1138.57,687.898 1139.13,687.898 1139.68,687.898 1140.24,687.898 1140.8,687.898 1141.36,687.898 1141.92,687.898 1142.48,687.898 1143.04,687.898 1143.6,687.898 1144.16,687.898 1144.72,687.898 1145.28,687.898 1145.84,687.898 1146.4,687.898 1146.96,687.898 1147.51,687.898 1148.07,687.898 1148.63,687.898 1149.19,687.898 1149.75,687.898 1150.31,687.898 1150.87,687.898 1151.43,687.898 1151.99,687.898 1152.55,687.898 1153.11,687.898 1153.67,687.898 1154.23,687.898 1154.78,687.898 1155.34,687.898 1155.9,687.898 1156.46,687.898 1157.02,687.898 1157.58,687.898 1158.14,687.898 1158.7,687.898 1159.26,687.898 1159.82,687.898 1160.38,687.898 1160.94,687.898 1161.5,687.898 1162.05,687.898 1162.61,687.898 1163.17,687.898 1163.73,687.898 1164.29,687.898 1164.85,687.898 1165.41,687.898 1165.97,687.898 1166.53,687.898 1167.09,687.898 1167.65,687.898 1168.21,687.898 1168.77,687.898 1169.33,687.898 1169.88,687.898 1170.44,687.898 1171,687.898 1171.56,687.898 1172.12,687.898 1172.68,687.898 1173.24,687.898 1173.8,687.898 1174.36,687.898 1174.92,687.898 1175.48,687.898 1176.04,687.898 1176.6,687.898 1177.15,687.898 1177.71,687.898 1178.27,687.898 1178.83,687.898 1179.39,687.898 1179.95,687.898 1180.51,687.898 1181.07,687.898 1181.63,687.898 1182.19,687.898 1182.75,687.898 1183.31,687.898 1183.87,687.898 1184.43,687.898 1184.98,687.898 1185.54,687.898 1186.1,687.898 1186.66,687.898 1187.22,687.898 1187.78,687.898 1188.34,687.898 1188.9,687.898 1189.46,687.898 1190.02,687.898 1190.58,687.898 1191.14,687.898 1191.7,687.898 1192.25,687.898 1192.81,687.898 1193.37,687.898 1193.93,687.898 1194.49,687.898 1195.05,687.898 1195.61,687.898 1196.17,687.898 1196.73,687.898 1197.29,687.898 1197.85,687.898 1198.41,687.898 1198.97,687.898 1199.52,687.898 1200.08,687.898 1200.64,687.898 1201.2,687.898 1201.76,687.898 1202.32,687.898 1202.88,687.898 1203.44,687.898 1204,687.898 1204.56,687.898 1205.12,687.898 1205.68,687.898 1206.24,687.898 1206.8,687.898 1207.35,687.898 1207.91,687.898 1208.47,687.898 1209.03,687.898 1209.59,687.898 1210.15,687.898 1210.71,687.898 1211.27,687.898 1211.83,687.898 1212.39,687.898 1212.95,687.898 1213.51,687.898 1214.07,687.898 1214.62,687.898 1215.18,687.898 1215.74,687.898 1216.3,687.898 1216.86,687.898 1217.42,687.898 1217.98,687.898 1218.54,687.898 1219.1,687.898 1219.66,687.898 1220.22,687.898 1220.78,687.898 1221.34,687.898 1221.89,687.898 1222.45,687.898 1223.01,687.898 1223.57,687.898 1224.13,687.898 1224.69,687.898 1225.25,687.898 1225.81,687.898 1226.37,687.898 1226.93,687.898 1227.49,687.898 1228.05,687.898 1228.61,687.898 1229.17,687.898 1229.72,687.898 1230.28,687.898 1230.84,687.898 1231.4,687.898 1231.96,687.898 1232.52,687.898 1233.08,687.898 1233.64,687.898 1234.2,687.898 1234.76,687.898 1235.32,687.898 1235.88,687.898 1236.44,687.898 1236.99,687.898 1237.55,687.898 1238.11,687.898 1238.67,687.898 1239.23,687.898 1239.79,687.898 1240.35,687.898 1240.91,687.898 1241.47,687.898 1242.03,687.898 1242.59,687.898 1243.15,687.898 1243.71,687.898 1244.26,687.898 1244.82,687.898 1245.38,687.898 1245.94,687.898 1246.5,687.898 1247.06,687.898 1247.62,687.898 1248.18,687.898 1248.74,687.898 1249.3,687.898 1249.86,687.898 1250.42,687.898 1250.98,687.898 1251.54,687.898 1252.09,687.898 1252.65,687.898 1253.21,687.898 1253.77,687.898 1254.33,687.898 1254.89,687.898 1255.45,687.898 1256.01,687.898 1256.57,687.898 1257.13,687.898 1257.69,687.898 1258.25,687.898 1258.81,687.898 1259.36,687.898 1259.92,687.898 1260.48,687.898 1261.04,687.898 1261.6,687.898 1262.16,687.898 1262.72,687.898 1263.28,687.898 1263.84,687.898 1264.4,687.898 1264.96,687.898 1265.52,687.898 1266.08,687.898 1266.63,687.898 1267.19,687.898 1267.75,687.898 1268.31,687.898 1268.87,687.898 1269.43,687.898 1269.99,687.898 1270.55,687.898 1271.11,687.898 1271.67,687.898 1272.23,687.898 1272.79,687.898 1273.35,687.898 1273.91,687.898 1274.46,687.898 1275.02,687.898 1275.58,687.898 1276.14,687.898 1276.7,687.898 1277.26,687.898 1277.82,687.898 1278.38,687.898 1278.94,687.898 1279.5,687.898 1280.06,687.898 1280.62,687.898 1281.18,687.898 1281.73,687.898 1282.29,687.898 1282.85,687.898 1283.41,687.898 1283.97,687.898 1284.53,687.898 1285.09,687.898 1285.65,687.898 1286.21,687.898 1286.77,687.898 1287.33,687.898 1287.89,687.898 1288.45,687.898 1289,687.898 1289.56,687.898 1290.12,687.898 1290.68,687.898 1291.24,687.898 1291.8,687.898 1292.36,687.898 1292.92,687.898 1293.48,687.898 1294.04,687.898 1294.6,687.898 1295.16,687.898 1295.72,687.898 1296.28,687.898 1296.83,687.898 1297.39,687.898 1297.95,687.898 1298.51,687.898 1299.07,687.898 1299.63,687.898 1300.19,687.898 1300.75,687.898 1301.31,687.898 1301.87,687.898 1302.43,687.898 1302.99,687.898 1303.55,687.898 1304.1,687.898 1304.66,687.898 1305.22,687.898 1305.78,687.898 1306.34,687.898 1306.9,687.898 1307.46,687.898 1308.02,687.898 1308.58,687.898 1309.14,687.898 1309.7,687.898 1310.26,687.898 1310.82,687.898 1311.38,687.898 1311.93,687.898 1312.49,687.898 1313.05,687.898 1313.61,687.898 1314.17,687.898 1314.73,687.898 1315.29,687.898 1315.85,687.898 1316.41,687.898 1316.97,687.898 1317.53,687.898 1318.09,687.898 1318.65,687.898 1319.2,687.898 1319.76,687.898 1320.32,687.898 1320.88,687.898 1321.44,687.898 1322,687.898 1322.56,687.898 1323.12,687.898 1323.68,687.898 1324.24,687.898 1324.8,687.898 1325.36,687.898 1325.92,687.898 1326.47,687.898 1327.03,687.898 1327.59,687.898 1328.15,687.898 1328.71,687.898 1329.27,687.898 1329.83,687.898 1330.39,687.898 1330.95,687.898 1331.51,687.898 1332.07,687.898 1332.63,687.898 1333.19,687.898 1333.75,687.898 1334.3,687.898 1334.86,687.898 1335.42,687.898 1335.98,687.898 1336.54,687.898 1337.1,687.898 1337.66,687.898 1338.22,687.898 1338.78,687.898 1339.34,687.898 1339.9,687.898 1340.46,687.898 1341.02,687.898 1341.57,687.898 1342.13,687.898 1342.69,687.898 1343.25,687.898 1343.81,687.898 1344.37,687.898 1344.93,687.898 1345.49,687.898 1346.05,687.898 1346.61,687.898 1347.17,687.898 1347.73,687.898 1348.29,687.898 1348.84,687.898 1349.4,687.898 1349.96,687.898 1350.52,687.898 1351.08,687.898 1351.64,687.898 1352.2,687.898 1352.76,687.898 1353.32,687.898 1353.88,687.898 1354.44,687.898 1355,687.898 1355.56,687.898 1356.12,687.898 1356.67,687.898 1357.23,687.898 1357.79,687.898 1358.35,687.898 1358.91,687.898 1359.47,687.898 1360.03,687.898 1360.59,687.898 1361.15,687.898 1361.71,687.898 1362.27,687.898 1362.83,687.898 1363.39,687.898 1363.94,687.898 1364.5,687.898 1365.06,687.898 1365.62,687.898 1366.18,687.898 1366.74,687.898 1367.3,687.898 1367.86,687.898 1368.42,687.898 1368.98,687.898 1369.54,687.898 1370.1,687.898 1370.66,687.898 1371.21,687.898 1371.77,687.898 1372.33,687.898 1372.89,687.898 1373.45,687.898 1374.01,687.898 1374.57,687.898 1375.13,687.898 1375.69,687.898 1376.25,687.898 1376.81,687.898 1377.37,687.898 1377.93,687.898 1378.49,687.898 1379.04,687.898 1379.6,687.898 1380.16,687.898 1380.72,687.898 1381.28,687.898 1381.84,687.898 1382.4,687.898 1382.96,687.898 1383.52,687.898 1384.08,687.898 1384.64,687.898 1385.2,687.898 1385.76,687.898 1386.31,687.898 1386.87,687.898 1387.43,687.898 1387.99,687.898 1388.55,687.898 1389.11,687.898 1389.67,687.898 1390.23,687.898 1390.79,687.898 1391.35,687.898 1391.91,687.898 1392.47,687.898 1393.03,687.898 1393.58,687.898 1394.14,687.898 1394.7,687.898 1395.26,687.898 1395.82,687.898 1396.38,687.898 1396.94,687.898 1397.5,687.898 1398.06,687.898 1398.62,687.898 1399.18,687.898 1399.74,687.898 1400.3,687.898 1400.86,687.898 1401.41,687.898 1401.97,687.898 1402.53,687.898 1403.09,687.898 1403.65,687.898 1404.21,687.898 1404.77,687.898 1405.33,687.898 1405.89,687.898 1406.45,687.898 1407.01,687.898 1407.57,687.898 1408.13,687.898 1408.68,687.898 1409.24,687.898 1409.8,687.898 1410.36,687.898 1410.92,687.898 1411.48,687.898 1412.04,687.898 1412.6,687.898 1413.16,687.898 1413.72,687.898 1414.28,687.898 1414.84,687.898 1415.4,687.898 1415.95,687.898 1416.51,687.898 1417.07,687.898 1417.63,687.898 1418.19,687.898 1418.75,687.898 1419.31,687.898 1419.87,687.898 1420.43,687.898 1420.99,687.898 1421.55,687.898 1422.11,687.898 1422.67,687.898 1423.23,687.898 1423.78,687.898 1424.34,687.898 1424.9,687.898 1425.46,687.898 1426.02,687.898 1426.58,687.898 1427.14,687.898 1427.7,687.898 1428.26,687.898 1428.82,687.898 1429.38,687.898 1429.94,687.898 1430.5,687.898 1431.05,687.898 1431.61,687.898 1432.17,687.898 1432.73,687.898 1433.29,687.898 1433.85,687.898 1434.41,687.898 1434.97,687.898 1435.53,687.898 1436.09,687.898 1436.65,687.898 1437.21,687.898 1437.77,687.898 1438.33,687.898 1438.88,687.898 1439.44,687.898 1440,687.898 1440.56,687.898 1441.12,687.898 1441.68,687.898 1442.24,687.898 1442.8,687.898 1443.36,687.898 1443.92,687.898 1444.48,687.898 1445.04,687.898 1445.6,687.898 1446.15,687.898 1446.71,687.898 1447.27,687.898 1447.83,687.898 1448.39,687.898 1448.95,687.898 1449.51,687.898 1450.07,687.898 1450.63,687.898 1451.19,687.898 1451.75,687.898 1452.31,687.898 1452.87,687.898 1453.42,687.898 1453.98,687.898 1454.54,687.898 1455.1,687.898 1455.66,687.898 1456.22,687.898 1456.78,687.898 1457.34,687.898 1457.9,687.898 1458.46,687.898 1459.02,687.898 1459.58,687.898 1460.14,687.898 1460.7,687.898 1461.25,687.898 1461.81,687.898 1462.37,687.898 1462.93,687.898 1463.49,687.898 1464.05,687.898 1464.61,687.898 1465.17,687.898 1465.73,687.898 1466.29,687.898 1466.85,687.898 1467.41,687.898 1467.97,687.898 1468.52,687.898 1469.08,687.898 1469.64,687.898 1470.2,687.898 1470.76,687.898 1471.32,687.898 1471.88,687.898 1472.44,687.898 1473,687.898 1473.56,687.898 1474.12,687.898 1474.68,687.898 1475.24,687.898 1475.79,687.898 1476.35,687.898 1476.91,687.898 1477.47,687.898 1478.03,687.898 1478.59,687.898 1479.15,687.898 1479.71,687.898 1480.27,687.898 1480.83,687.898 1481.39,687.898 1481.95,687.898 1482.51,687.898 1483.07,687.898 1483.62,687.898 1484.18,687.898 1484.74,687.898 1485.3,687.898 1485.86,687.898 1486.42,687.898 1486.98,687.898 1487.54,687.898 1488.1,687.898 1488.66,687.898 1489.22,687.898 1489.78,687.898 1490.34,687.898 1490.89,687.898 1491.45,687.898 1492.01,687.898 1492.57,687.898 1493.13,687.898 1493.69,687.898 1494.25,687.898 1494.81,687.898 1495.37,687.898 1495.93,687.898 1496.49,687.898 1497.05,687.898 1497.61,687.898 1498.16,687.898 1498.72,687.898 1499.28,687.898 1499.84,687.898 1500.4,687.898 1500.96,687.898 1501.52,687.898 1502.08,687.898 1502.64,687.898 1503.2,687.898 1503.76,687.898 1504.32,687.898 1504.88,687.898 1505.44,687.898 1505.99,687.898 1506.55,687.898 1507.11,687.898 1507.67,687.898 1508.23,687.898 1508.79,687.898 1509.35,687.898 1509.91,687.898 1510.47,687.898 1511.03,687.898 1511.59,687.898 1512.15,687.898 1512.71,687.898 1513.26,687.898 1513.82,687.898 1514.38,687.898 1514.94,687.898 1515.5,687.898 1516.06,687.898 1516.62,687.898 1517.18,687.898 1517.74,687.898 1518.3,687.898 1518.86,687.898 1519.42,687.898 1519.98,687.898 1520.53,687.898 1521.09,687.898 1521.65,687.898 1522.21,687.898 1522.77,687.898 1523.33,687.898 1523.89,687.898 1524.45,687.898 1525.01,687.898 1525.57,687.898 1526.13,687.898 1526.69,687.898 1527.25,687.898 1527.81,687.898 1528.36,687.898 1528.92,687.898 1529.48,687.898 1530.04,687.898 1530.6,687.898 1531.16,687.898 1531.72,687.898 1532.28,687.898 1532.84,687.898 1533.4,687.898 1533.96,687.898 1534.52,687.898 1535.08,687.898 1535.63,687.898 1536.19,687.898 1536.75,687.898 1537.31,687.898 1537.87,687.898 1538.43,687.898 1538.99,687.898 1539.55,687.898 1540.11,687.898 1540.67,687.898 1541.23,687.898 1541.79,687.898 1542.35,687.898 1542.9,687.898 1543.46,687.898 1544.02,687.898 1544.58,687.898 1545.14,687.898 1545.7,687.898 1546.26,687.898 1546.82,687.898 1547.38,687.898 1547.94,687.898 1548.5,687.898 1549.06,687.898 1549.62,687.898 1550.18,687.898 1550.73,687.898 1551.29,687.898 1551.85,687.898 1552.41,687.898 1552.97,687.898 1553.53,687.898 1554.09,687.898 1554.65,687.898 1555.21,687.898 1555.77,687.898 1556.33,687.898 1556.89,687.898 1557.45,687.898 1558,687.898 1558.56,687.898 1559.12,687.898 1559.68,687.898 1560.24,687.898 1560.8,687.898 1561.36,687.898 1561.92,687.898 1562.48,687.898 1563.04,687.898 1563.6,687.898 1564.16,687.898 1564.72,687.898 1565.28,687.898 1565.83,687.898 1566.39,687.898 1566.95,687.898 1567.51,687.898 1568.07,687.898 1568.63,687.898 1569.19,687.898 1569.75,687.898 1570.31,687.898 1570.87,687.898 1571.43,687.898 1571.99,687.898 1572.55,687.898 1573.1,687.898 1573.66,687.898 1574.22,687.898 1574.78,687.898 1575.34,687.898 1575.9,687.898 1576.46,687.898 1577.02,687.898 1577.58,687.898 1578.14,687.898 1578.7,687.898 1579.26,687.898 1579.82,687.898 1580.37,687.898 1580.93,687.898 1581.49,687.898 1582.05,687.898 1582.61,687.898 1583.17,687.898 1583.73,687.898 1584.29,687.898 1584.85,687.898 1585.41,687.898 1585.97,687.898 1586.53,687.898 1587.09,687.898 1587.65,687.898 1588.2,687.898 1588.76,687.898 1589.32,687.898 1589.88,687.898 1590.44,687.898 1591,687.898 1591.56,687.898 1592.12,687.898 1592.68,687.898 1593.24,687.898 1593.8,687.898 1594.36,687.898 1594.92,687.898 1595.47,687.898 1596.03,687.898 1596.59,687.898 1597.15,687.898 1597.71,687.898 1598.27,687.898 1598.83,687.898 1599.39,687.898 1599.95,687.898 1600.51,687.898 1601.07,687.898 1601.63,687.898 1602.19,687.898 1602.74,687.898 1603.3,687.898 1603.86,687.898 1604.42,687.898 1604.98,687.898 1605.54,687.898 1606.1,687.898 1606.66,687.898 1607.22,687.898 1607.78,687.898 1608.34,687.898 1608.9,687.898 1609.46,687.898 1610.02,687.898 1610.57,687.898 1611.13,687.898 1611.69,687.898 1612.25,687.898 1612.81,687.898 1613.37,687.898 1613.93,687.898 1614.49,687.898 1615.05,687.898 1615.61,687.898 1616.17,687.898 1616.73,687.898 1617.29,687.898 1617.84,687.898 1618.4,687.898 1618.96,687.898 1619.52,687.898 1620.08,687.898 1620.64,687.898 1621.2,687.898 1621.76,687.898 1622.32,687.898 1622.88,687.898 1623.44,687.898 1624,687.898 1624.56,687.898 1625.11,687.898 1625.67,687.898 1626.23,687.898 1626.79,687.898 1627.35,687.898 1627.91,687.898 1628.47,687.898 1629.03,687.898 1629.59,687.898 1630.15,687.898 1630.71,687.898 1631.27,687.898 1631.83,687.898 1632.39,687.898 1632.94,687.898 1633.5,687.898 1634.06,687.898 1634.62,687.898 1635.18,687.898 1635.74,687.898 1636.3,687.898 1636.86,687.898 1637.42,687.898 1637.98,687.898 1638.54,687.898 1639.1,687.898 1639.66,687.898 1640.21,687.898 1640.77,687.898 1641.33,687.898 1641.89,687.898 1642.45,687.898 1643.01,687.898 1643.57,687.898 1644.13,687.898 1644.69,687.898 1645.25,687.898 1645.81,687.898 1646.37,687.898 1646.93,687.898 1647.48,687.898 1648.04,687.898 1648.6,687.898 1649.16,687.898 1649.72,687.898 1650.28,687.898 1650.84,687.898 1651.4,687.898 1651.96,687.898 1652.52,687.898 1653.08,687.898 1653.64,687.898 1654.2,687.898 1654.76,687.898 1655.31,687.898 1655.87,687.898 1656.43,687.898 1656.99,687.898 1657.55,687.898 1658.11,687.898 1658.67,687.898 1659.23,687.898 1659.79,687.898 1660.35,687.898 1660.91,687.898 1661.47,687.898 1662.03,687.898 1662.58,687.898 1663.14,687.898 1663.7,687.898 1664.26,687.898 1664.82,687.898 1665.38,687.898 1665.94,687.898 1666.5,687.898 1667.06,687.898 1667.62,687.898 1668.18,687.898 1668.74,687.898 1669.3,687.898 1669.85,687.898 1670.41,687.898 1670.97,687.898 1671.53,687.898 1672.09,687.898 1672.65,687.898 1673.21,687.898 1673.77,687.898 1674.33,687.898 1674.89,687.898 1675.45,687.898 1676.01,687.898 1676.57,687.898 1677.13,687.898 1677.68,687.898 1678.24,687.898 1678.8,687.898 1679.36,687.898 1679.92,687.898 1680.48,687.898 1681.04,687.898 1681.6,687.898 1682.16,687.898 1682.72,687.898 1683.28,687.898 1683.84,687.898 1684.4,687.898 1684.95,687.898 1685.51,687.898 1686.07,687.898 1686.63,687.898 1687.19,687.898 1687.75,687.898 1688.31,687.898 1688.87,687.898 1689.43,687.898 1689.99,687.898 1690.55,687.898 1691.11,687.898 1691.67,687.898 1692.23,687.898 1692.78,687.898 1693.34,687.898 1693.9,687.898 1694.46,687.898 1695.02,687.898 1695.58,687.898 1696.14,687.898 1696.7,687.898 1697.26,687.898 1697.82,687.898 1698.38,687.898 1698.94,687.898 1699.5,687.898 1700.05,687.898 1700.61,687.898 1701.17,687.898 1701.73,687.898 1702.29,687.898 1702.85,687.898 1703.41,687.898 1703.97,687.898 1704.53,687.898 1705.09,687.898 1705.65,687.898 1706.21,687.898 1706.77,687.898 1707.32,687.898 1707.88,687.898 1708.44,687.898 1709,687.898 1709.56,687.898 1710.12,687.898 1710.68,687.898 1711.24,687.898 1711.8,687.898 1712.36,687.898 1712.92,687.898 1713.48,687.898 1714.04,687.898 1714.6,687.898 1715.15,687.898 1715.71,687.898 1716.27,687.898 1716.83,687.898 1717.39,687.898 1717.95,687.898 1718.51,687.898 1719.07,687.898 1719.63,687.898 1720.19,687.898 1720.75,687.898 1721.31,687.898 1721.87,687.898 1722.42,687.898 1722.98,687.898 1723.54,687.898 1724.1,687.898 1724.66,687.898 1725.22,687.898 1725.78,687.898 1726.34,687.898 1726.9,687.898 1727.46,687.898 1728.02,687.898 1728.58,687.898 1729.14,687.898 1729.69,687.898 1730.25,687.898 1730.81,687.898 1731.37,687.898 1731.93,687.898 1732.49,687.898 1733.05,687.898 1733.61,687.898 1734.17,687.898 1734.73,687.898 1735.29,687.898 1735.85,687.898 1736.41,687.898 1736.97,687.898 1737.52,687.898 1738.08,687.898 1738.64,687.898 1739.2,687.898 1739.76,687.898 1740.32,687.898 1740.88,687.898 1741.44,687.898 1742,687.898 1742.56,687.898 1743.12,687.898 1743.68,687.898 1744.24,687.898 1744.79,687.898 1745.35,687.898 1745.91,687.898 1746.47,687.898 1747.03,687.898 1747.59,687.898 1748.15,687.898 1748.71,687.898 1749.27,687.898 1749.83,687.898 1750.39,687.898 1750.95,687.898 1751.51,687.898 1752.06,687.898 1752.62,687.898 1753.18,687.898 1753.74,687.898 1754.3,687.898 1754.86,687.898 1755.42,687.898 1755.98,687.898 1756.54,687.898 1757.1,687.898 1757.66,687.898 1758.22,687.898 1758.78,687.898 1759.34,687.898 1759.89,687.898 1760.45,687.898 1761.01,687.898 1761.57,687.898 1762.13,687.898 1762.69,687.898 1763.25,687.898 1763.81,687.898 1764.37,687.898 1764.93,687.898 1765.49,687.898 1766.05,687.898 1766.61,687.898 1767.16,687.898 1767.72,687.898 1768.28,687.898 1768.84,687.898 1769.4,687.898 1769.96,687.898 1770.52,687.898 1771.08,687.898 1771.64,687.898 1772.2,687.898 1772.76,687.898 1773.32,687.898 1773.88,687.898 1774.43,687.898 1774.99,687.898 1775.55,687.898 1776.11,687.898 1776.67,687.898 1777.23,687.898 1777.79,687.898 1778.35,687.898 1778.91,687.898 1779.47,687.898 1780.03,687.898 1780.59,687.898 1781.15,687.898 1781.71,687.898 1782.26,687.898 1782.82,687.898 1783.38,687.898 1783.94,687.898 1784.5,687.898 1785.06,687.898 1785.62,687.898 1786.18,687.898 1786.74,687.898 1787.3,687.898 1787.86,687.898 1788.42,687.898 1788.98,687.898 1789.53,687.898 1790.09,687.898 1790.65,687.898 1791.21,687.898 1791.77,687.898 1792.33,687.898 1792.89,687.898 1793.45,687.898 1794.01,687.898 1794.57,687.898 1795.13,687.898 1795.69,687.898 1796.25,687.898 1796.8,687.898 1797.36,687.898 1797.92,687.898 1798.48,687.898 1799.04,687.898 1799.6,687.898 1800.16,687.898 1800.72,687.898 1801.28,687.898 1801.84,687.898 1802.4,687.898 1802.96,687.898 1803.52,687.898 1804.08,687.898 1804.63,687.898 1805.19,687.898 1805.75,687.898 1806.31,687.898 1806.87,687.898 1807.43,687.898 1807.99,687.898 1808.55,687.898 1809.11,687.898 1809.67,687.898 1810.23,687.898 1810.79,687.898 1811.35,687.898 1811.9,687.898 1812.46,687.898 1813.02,687.898 1813.58,687.898 1814.14,687.898 1814.7,687.898 1815.26,687.898 1815.82,687.898 1816.38,687.898 1816.94,687.898 1817.5,687.898 1818.06,687.898 1818.62,687.898 1819.18,687.898 1819.73,687.898 1820.29,687.898 1820.85,687.898 1821.41,687.898 1821.97,687.898 1822.53,687.898 1823.09,687.898 1823.65,687.898 1824.21,687.898 1824.77,687.898 1825.33,687.898 1825.89,687.898 1826.45,687.898 1827,687.898 1827.56,687.898 1828.12,687.898 1828.68,687.898 1829.24,687.898 1829.8,687.898 1830.36,687.898 1830.92,687.898 1831.48,687.898 1832.04,687.898 1832.6,687.898 1833.16,687.898 1833.72,687.898 1834.27,687.898 1834.83,687.898 1835.39,687.898 1835.95,687.898 1836.51,687.898 1837.07,687.898 1837.63,687.898 1838.19,687.898 \"/>\n<path clip-path=\"url(#clip433)\" d=\"M720.247 685.215 L720.806 685.215 L721.365 685.215 L721.924 685.215 L722.484 685.215 L723.043 685.215 L723.602 685.215 L724.161 685.215 L724.721 685.215 L725.28 685.215 L725.839 685.215 L726.398 685.215 L726.958 685.215 L727.517 685.215 L728.076 685.215 L728.635 685.215 L729.195 685.215 L729.754 685.215 L730.313 685.215 L730.872 685.215 L731.432 685.215 L731.991 685.215 L732.55 685.215 L733.109 685.215 L733.669 685.215 L734.228 685.215 L734.787 685.215 L735.346 685.215 L735.906 685.215 L736.465 685.215 L737.024 685.215 L737.583 685.215 L738.143 685.215 L738.702 685.215 L739.261 685.215 L739.82 685.215 L740.38 685.215 L740.939 685.215 L741.498 685.215 L742.057 685.215 L742.617 685.215 L743.176 685.215 L743.735 685.215 L744.294 685.215 L744.854 685.215 L745.413 685.215 L745.972 685.215 L746.531 685.215 L747.091 685.215 L747.65 685.215 L748.209 685.215 L748.768 685.215 L749.328 685.215 L749.887 685.215 L750.446 685.215 L751.005 685.215 L751.565 685.215 L752.124 685.215 L752.683 685.215 L753.242 685.215 L753.802 685.215 L754.361 685.215 L754.92 685.215 L755.479 685.215 L756.039 685.215 L756.598 685.215 L757.157 685.215 L757.716 685.215 L758.276 685.215 L758.835 685.215 L759.394 685.215 L759.953 685.215 L760.513 685.215 L761.072 685.215 L761.631 685.215 L762.19 685.215 L762.75 685.215 L763.309 685.215 L763.868 685.215 L764.427 685.215 L764.987 685.215 L765.546 685.215 L766.105 685.215 L766.664 685.215 L767.224 685.215 L767.783 685.215 L768.342 685.215 L768.901 685.215 L769.461 685.215 L770.02 685.215 L770.579 685.215 L771.138 685.215 L771.698 685.215 L772.257 685.215 L772.816 685.215 L773.375 685.215 L773.935 685.215 L774.494 685.215 L775.053 685.215 L775.612 685.215 L776.172 685.215 L776.731 685.215 L777.29 685.215 L777.849 685.215 L778.409 685.215 L778.968 685.215 L779.527 685.215 L780.086 685.215 L780.646 685.215 L781.205 685.215 L781.764 685.215 L782.323 685.215 L782.883 685.215 L783.442 685.215 L784.001 685.215 L784.56 685.215 L785.12 685.215 L785.679 685.215 L786.238 685.215 L786.797 685.215 L787.357 685.215 L787.916 685.215 L788.475 685.215 L789.034 685.215 L789.594 685.215 L790.153 685.215 L790.712 685.215 L791.271 685.215 L791.831 685.215 L792.39 685.215 L792.949 685.215 L793.508 685.215 L794.068 685.215 L794.627 685.215 L795.186 685.215 L795.745 685.215 L796.305 685.215 L796.864 685.215 L797.423 685.215 L797.982 685.215 L798.542 685.215 L799.101 685.215 L799.66 685.215 L800.219 685.215 L800.779 685.215 L801.338 685.215 L801.897 685.215 L802.456 685.215 L803.016 685.215 L803.575 685.215 L804.134 685.215 L804.693 685.215 L805.253 685.215 L805.812 685.215 L806.371 685.215 L806.931 685.215 L807.49 685.215 L808.049 685.215 L808.608 685.215 L809.168 685.215 L809.727 685.215 L810.286 685.215 L810.845 685.215 L811.405 685.215 L811.964 685.215 L812.523 685.215 L813.082 685.215 L813.642 685.215 L814.201 685.215 L814.76 685.215 L815.319 685.215 L815.879 685.215 L816.438 685.215 L816.997 685.215 L817.556 685.215 L818.116 685.215 L818.675 685.215 L819.234 685.215 L819.793 685.215 L820.353 685.215 L820.912 685.215 L821.471 685.215 L822.03 685.215 L822.59 685.215 L823.149 685.215 L823.708 685.215 L824.267 685.215 L824.827 685.215 L825.386 685.215 L825.945 685.215 L826.504 685.215 L827.064 685.215 L827.623 685.215 L828.182 685.215 L828.741 685.215 L829.301 685.215 L829.86 685.215 L830.419 685.215 L830.978 685.215 L831.538 685.215 L832.097 685.215 L832.656 685.215 L833.215 685.215 L833.775 685.215 L834.334 685.215 L834.893 685.215 L835.452 685.215 L836.012 685.215 L836.571 685.215 L837.13 685.215 L837.689 685.215 L838.249 685.215 L838.808 685.215 L839.367 685.215 L839.926 685.215 L840.486 685.215 L841.045 685.215 L841.604 685.215 L842.163 685.215 L842.723 685.215 L843.282 685.215 L843.841 685.215 L844.4 685.215 L844.96 685.215 L845.519 685.215 L846.078 685.215 L846.637 685.215 L847.197 685.215 L847.756 685.215 L848.315 685.215 L848.874 685.215 L849.434 685.215 L849.993 685.215 L850.552 685.215 L851.111 685.215 L851.671 685.215 L852.23 685.215 L852.789 685.215 L853.348 685.215 L853.908 685.215 L854.467 685.215 L855.026 685.215 L855.585 685.215 L856.145 685.215 L856.704 685.215 L857.263 685.215 L857.822 685.215 L858.382 685.215 L858.941 685.215 L859.5 685.215 L860.059 685.215 L860.619 685.215 L861.178 685.215 L861.737 685.215 L862.296 685.215 L862.856 685.215 L863.415 685.215 L863.974 685.215 L864.533 685.215 L865.093 685.215 L865.652 685.215 L866.211 685.215 L866.77 685.215 L867.33 685.215 L867.889 685.215 L868.448 685.215 L869.007 685.215 L869.567 685.215 L870.126 685.215 L870.685 685.215 L871.244 685.215 L871.804 685.215 L872.363 685.215 L872.922 685.215 L873.481 685.215 L874.041 685.215 L874.6 685.215 L875.159 685.215 L875.718 685.215 L876.278 685.215 L876.837 685.215 L877.396 685.215 L877.955 685.215 L878.515 685.215 L879.074 685.215 L879.633 685.215 L880.192 685.215 L880.752 685.215 L881.311 685.215 L881.87 685.215 L882.429 685.215 L882.989 685.215 L883.548 685.215 L884.107 685.215 L884.666 685.215 L885.226 685.215 L885.785 685.215 L886.344 685.215 L886.903 685.215 L887.463 685.215 L888.022 685.215 L888.581 685.215 L889.14 685.215 L889.7 685.215 L890.259 685.215 L890.818 685.215 L891.377 685.215 L891.937 685.215 L892.496 685.215 L893.055 685.215 L893.614 685.215 L894.174 685.215 L894.733 685.215 L895.292 685.215 L895.851 685.215 L896.411 685.215 L896.97 685.215 L897.529 685.215 L898.088 685.215 L898.648 685.215 L899.207 685.215 L899.766 685.215 L900.325 685.215 L900.885 685.215 L901.444 685.215 L902.003 685.215 L902.562 685.215 L903.122 685.215 L903.681 685.215 L904.24 685.215 L904.799 685.215 L905.359 685.215 L905.918 685.215 L906.477 685.215 L907.036 685.215 L907.596 685.215 L908.155 685.215 L908.714 685.215 L909.273 685.215 L909.833 685.215 L910.392 685.215 L910.951 685.215 L911.51 685.215 L912.07 685.215 L912.629 685.215 L913.188 685.215 L913.747 685.215 L914.307 685.215 L914.866 685.215 L915.425 685.215 L915.984 685.215 L916.544 685.215 L917.103 685.215 L917.662 685.215 L918.221 685.215 L918.781 685.215 L919.34 685.215 L919.899 685.215 L920.458 685.215 L921.018 685.215 L921.577 685.215 L922.136 685.215 L922.695 685.215 L923.255 685.215 L923.814 685.215 L924.373 685.215 L924.932 685.215 L925.492 685.215 L926.051 685.215 L926.61 685.215 L927.169 685.215 L927.729 685.215 L928.288 685.215 L928.847 685.215 L929.406 685.215 L929.966 685.215 L930.525 685.215 L931.084 685.215 L931.644 685.215 L932.203 685.215 L932.762 685.215 L933.321 685.215 L933.881 685.215 L934.44 685.215 L934.999 685.215 L935.558 685.215 L936.118 685.215 L936.677 685.215 L937.236 685.215 L937.795 685.215 L938.355 685.215 L938.914 685.215 L939.473 685.215 L940.032 685.215 L940.592 685.215 L941.151 685.215 L941.71 685.215 L942.269 685.215 L942.829 685.215 L943.388 685.215 L943.947 685.215 L944.506 685.215 L945.066 685.215 L945.625 685.215 L946.184 685.215 L946.743 685.215 L947.303 685.215 L947.862 685.215 L948.421 685.215 L948.98 685.215 L949.54 685.215 L950.099 685.215 L950.658 685.215 L951.217 685.215 L951.777 685.215 L952.336 685.215 L952.895 685.215 L953.454 685.215 L954.014 685.215 L954.573 685.215 L955.132 685.215 L955.691 685.215 L956.251 685.215 L956.81 685.215 L957.369 685.215 L957.928 685.215 L958.488 685.215 L959.047 685.215 L959.606 685.215 L960.165 685.215 L960.725 685.215 L961.284 685.215 L961.843 685.215 L962.402 685.215 L962.962 685.215 L963.521 685.215 L964.08 685.215 L964.639 685.215 L965.199 685.215 L965.758 685.215 L966.317 685.215 L966.876 685.215 L967.436 685.215 L967.995 685.215 L968.554 685.215 L969.113 685.215 L969.673 685.215 L970.232 685.215 L970.791 685.215 L971.35 685.215 L971.91 685.215 L972.469 685.215 L973.028 685.215 L973.587 685.215 L974.147 685.215 L974.706 685.215 L975.265 685.215 L975.824 685.215 L976.384 685.215 L976.943 685.215 L977.502 685.215 L978.061 685.215 L978.621 685.215 L979.18 685.215 L979.739 685.215 L980.298 685.215 L980.858 685.215 L981.417 685.215 L981.976 685.215 L982.535 685.215 L983.095 685.215 L983.654 685.215 L984.213 685.215 L984.772 685.215 L985.332 685.215 L985.891 685.215 L986.45 685.215 L987.009 685.215 L987.569 685.215 L988.128 685.215 L988.687 685.215 L989.246 685.215 L989.806 685.215 L990.365 685.215 L990.924 685.215 L991.483 685.215 L992.043 685.215 L992.602 685.215 L993.161 685.215 L993.72 685.215 L994.28 685.215 L994.839 685.215 L995.398 685.215 L995.957 685.215 L996.517 685.215 L997.076 685.215 L997.635 685.215 L998.194 685.215 L998.754 685.215 L999.313 685.215 L999.872 685.215 L1000.43 685.215 L1000.99 685.215 L1001.55 685.215 L1002.11 685.215 L1002.67 685.215 L1003.23 685.215 L1003.79 685.215 L1004.35 685.215 L1004.91 685.215 L1005.46 685.215 L1006.02 685.215 L1006.58 685.215 L1007.14 685.215 L1007.7 685.215 L1008.26 685.215 L1008.82 685.215 L1009.38 685.215 L1009.94 685.215 L1010.5 685.215 L1011.06 685.215 L1011.62 685.215 L1012.18 685.215 L1012.73 685.215 L1013.29 685.215 L1013.85 685.215 L1014.41 685.215 L1014.97 685.215 L1015.53 685.215 L1016.09 685.215 L1016.65 685.215 L1017.21 685.215 L1017.77 685.215 L1018.33 685.215 L1018.89 685.215 L1019.45 685.215 L1020.01 685.215 L1020.56 685.215 L1021.12 685.215 L1021.68 685.215 L1022.24 685.215 L1022.8 685.215 L1023.36 685.215 L1023.92 685.215 L1024.48 685.215 L1025.04 685.215 L1025.6 685.215 L1026.16 685.215 L1026.72 685.215 L1027.28 685.215 L1027.83 685.215 L1028.39 685.215 L1028.95 685.215 L1029.51 685.215 L1030.07 685.215 L1030.63 685.215 L1031.19 685.215 L1031.75 685.215 L1032.31 685.215 L1032.87 685.215 L1033.43 685.215 L1033.99 685.215 L1034.55 685.215 L1035.1 685.215 L1035.66 685.215 L1036.22 685.215 L1036.78 685.215 L1037.34 685.215 L1037.9 685.215 L1038.46 685.215 L1039.02 685.215 L1039.58 685.215 L1040.14 685.215 L1040.7 685.215 L1041.26 685.215 L1041.82 685.215 L1042.38 685.215 L1042.93 685.215 L1043.49 685.215 L1044.05 685.215 L1044.61 685.215 L1045.17 685.215 L1045.73 685.215 L1046.29 685.215 L1046.85 685.215 L1047.41 685.215 L1047.97 685.215 L1048.53 685.215 L1049.09 685.215 L1049.65 685.215 L1050.2 685.215 L1050.76 685.215 L1051.32 685.215 L1051.88 685.215 L1052.44 685.215 L1053 685.215 L1053.56 685.215 L1054.12 685.215 L1054.68 685.215 L1055.24 685.215 L1055.8 685.215 L1056.36 685.215 L1056.92 685.215 L1057.48 685.215 L1058.03 685.215 L1058.59 685.215 L1059.15 685.215 L1059.71 685.215 L1060.27 685.215 L1060.83 685.215 L1061.39 685.215 L1061.95 685.215 L1062.51 685.215 L1063.07 685.215 L1063.63 685.215 L1064.19 685.215 L1064.75 685.215 L1065.3 685.215 L1065.86 685.215 L1066.42 685.215 L1066.98 685.215 L1067.54 685.215 L1068.1 685.215 L1068.66 685.215 L1069.22 685.215 L1069.78 685.215 L1070.34 685.215 L1070.9 685.215 L1071.46 685.215 L1072.02 685.215 L1072.57 685.215 L1073.13 685.215 L1073.69 685.215 L1074.25 685.215 L1074.81 685.215 L1075.37 685.215 L1075.93 685.215 L1076.49 685.215 L1077.05 685.215 L1077.61 685.215 L1078.17 685.215 L1078.73 685.215 L1079.29 685.215 L1079.85 685.215 L1080.4 685.215 L1080.96 685.215 L1081.52 685.215 L1082.08 685.215 L1082.64 685.215 L1083.2 685.215 L1083.76 685.215 L1084.32 685.215 L1084.88 685.215 L1085.44 685.215 L1086 685.215 L1086.56 685.215 L1087.12 685.215 L1087.67 685.215 L1088.23 685.215 L1088.79 685.215 L1089.35 685.215 L1089.91 685.215 L1090.47 685.215 L1091.03 685.215 L1091.59 685.215 L1092.15 685.215 L1092.71 685.215 L1093.27 685.215 L1093.83 685.215 L1094.39 685.215 L1094.94 685.215 L1095.5 685.215 L1096.06 685.215 L1096.62 685.215 L1097.18 685.215 L1097.74 685.215 L1098.3 685.215 L1098.86 685.215 L1099.42 685.215 L1099.98 685.215 L1100.54 685.215 L1101.1 685.215 L1101.66 685.215 L1102.22 685.215 L1102.77 685.215 L1103.33 685.215 L1103.89 685.215 L1104.45 685.215 L1105.01 685.215 L1105.57 685.215 L1106.13 685.215 L1106.69 685.215 L1107.25 685.215 L1107.81 685.215 L1108.37 685.215 L1108.93 685.215 L1109.49 685.215 L1110.04 685.215 L1110.6 685.215 L1111.16 685.215 L1111.72 685.215 L1112.28 685.215 L1112.84 685.215 L1113.4 685.215 L1113.96 685.215 L1114.52 685.215 L1115.08 685.215 L1115.64 685.215 L1116.2 685.215 L1116.76 685.215 L1117.31 685.215 L1117.87 685.215 L1118.43 685.215 L1118.99 685.215 L1119.55 685.215 L1120.11 685.215 L1120.67 685.215 L1121.23 685.215 L1121.79 685.215 L1122.35 685.215 L1122.91 685.215 L1123.47 685.215 L1124.03 685.215 L1124.59 685.215 L1125.14 685.215 L1125.7 685.215 L1126.26 685.215 L1126.82 685.215 L1127.38 685.215 L1127.94 685.215 L1128.5 685.215 L1129.06 685.215 L1129.62 685.215 L1130.18 685.215 L1130.74 685.215 L1131.3 685.215 L1131.86 685.215 L1132.41 685.215 L1132.97 685.215 L1133.53 685.215 L1134.09 685.215 L1134.65 685.215 L1135.21 685.215 L1135.77 685.215 L1136.33 685.215 L1136.89 685.215 L1137.45 685.215 L1138.01 685.215 L1138.57 685.215 L1139.13 685.215 L1139.68 685.215 L1140.24 685.215 L1140.8 685.215 L1141.36 685.215 L1141.92 685.215 L1142.48 685.215 L1143.04 685.215 L1143.6 685.215 L1144.16 685.215 L1144.72 685.215 L1145.28 685.215 L1145.84 685.215 L1146.4 685.215 L1146.96 685.215 L1147.51 685.215 L1148.07 685.215 L1148.63 685.215 L1149.19 685.215 L1149.75 685.215 L1150.31 685.215 L1150.87 685.215 L1151.43 685.215 L1151.99 685.215 L1152.55 685.215 L1153.11 685.215 L1153.67 685.215 L1154.23 685.215 L1154.78 685.215 L1155.34 685.215 L1155.9 685.215 L1156.46 685.215 L1157.02 685.215 L1157.58 685.215 L1158.14 685.215 L1158.7 685.215 L1159.26 685.215 L1159.82 685.215 L1160.38 685.215 L1160.94 685.215 L1161.5 685.215 L1162.05 685.215 L1162.61 685.215 L1163.17 685.215 L1163.73 685.215 L1164.29 685.215 L1164.85 685.215 L1165.41 685.215 L1165.97 685.215 L1166.53 685.215 L1167.09 685.215 L1167.65 685.215 L1168.21 685.215 L1168.77 685.215 L1169.33 685.215 L1169.88 685.215 L1170.44 685.215 L1171 685.215 L1171.56 685.215 L1172.12 685.215 L1172.68 685.215 L1173.24 685.215 L1173.8 685.215 L1174.36 685.215 L1174.92 685.215 L1175.48 685.215 L1176.04 685.215 L1176.6 685.215 L1177.15 685.215 L1177.71 685.215 L1178.27 685.215 L1178.83 685.215 L1179.39 685.215 L1179.95 685.215 L1180.51 685.215 L1181.07 685.215 L1181.63 685.215 L1182.19 685.215 L1182.75 685.215 L1183.31 685.215 L1183.87 685.215 L1184.43 685.215 L1184.98 685.215 L1185.54 685.215 L1186.1 685.215 L1186.66 685.215 L1187.22 685.215 L1187.78 685.215 L1188.34 685.215 L1188.9 685.215 L1189.46 685.215 L1190.02 685.215 L1190.58 685.215 L1191.14 685.215 L1191.7 685.215 L1192.25 685.215 L1192.81 685.215 L1193.37 685.215 L1193.93 685.215 L1194.49 685.215 L1195.05 685.215 L1195.61 685.215 L1196.17 685.215 L1196.73 685.215 L1197.29 685.215 L1197.85 685.215 L1198.41 685.215 L1198.97 685.215 L1199.52 685.215 L1200.08 685.215 L1200.64 685.215 L1201.2 685.215 L1201.76 685.215 L1202.32 685.215 L1202.88 685.215 L1203.44 685.215 L1204 685.215 L1204.56 685.215 L1205.12 685.215 L1205.68 685.215 L1206.24 685.215 L1206.8 685.215 L1207.35 685.215 L1207.91 685.215 L1208.47 685.215 L1209.03 685.215 L1209.59 685.215 L1210.15 685.215 L1210.71 685.215 L1211.27 685.215 L1211.83 685.215 L1212.39 685.215 L1212.95 685.215 L1213.51 685.215 L1214.07 685.215 L1214.62 685.215 L1215.18 685.215 L1215.74 685.215 L1216.3 685.215 L1216.86 685.215 L1217.42 685.215 L1217.98 685.215 L1218.54 685.215 L1219.1 685.215 L1219.66 685.215 L1220.22 685.215 L1220.78 685.215 L1221.34 685.215 L1221.89 685.215 L1222.45 685.215 L1223.01 685.215 L1223.57 685.215 L1224.13 685.215 L1224.69 685.215 L1225.25 685.215 L1225.81 685.215 L1226.37 685.215 L1226.93 685.215 L1227.49 685.215 L1228.05 685.215 L1228.61 685.215 L1229.17 685.215 L1229.72 685.215 L1230.28 685.215 L1230.84 685.215 L1231.4 685.215 L1231.96 685.215 L1232.52 685.215 L1233.08 685.215 L1233.64 685.215 L1234.2 685.215 L1234.76 685.215 L1235.32 685.215 L1235.88 685.215 L1236.44 685.215 L1236.99 685.215 L1237.55 685.215 L1238.11 685.215 L1238.67 685.215 L1239.23 685.215 L1239.79 685.215 L1240.35 685.215 L1240.91 685.215 L1241.47 685.215 L1242.03 685.215 L1242.59 685.215 L1243.15 685.215 L1243.71 685.215 L1244.26 685.215 L1244.82 685.215 L1245.38 685.215 L1245.94 685.215 L1246.5 685.215 L1247.06 685.215 L1247.62 685.215 L1248.18 685.215 L1248.74 685.215 L1249.3 685.215 L1249.86 685.215 L1250.42 685.215 L1250.98 685.215 L1251.54 685.215 L1252.09 685.215 L1252.65 685.215 L1253.21 685.215 L1253.77 685.215 L1254.33 685.215 L1254.89 685.215 L1255.45 685.215 L1256.01 685.215 L1256.57 685.215 L1257.13 685.215 L1257.69 685.215 L1258.25 685.215 L1258.81 685.215 L1259.36 685.215 L1259.92 685.215 L1260.48 685.215 L1261.04 685.215 L1261.6 685.215 L1262.16 685.215 L1262.72 685.215 L1263.28 685.215 L1263.84 685.215 L1264.4 685.215 L1264.96 685.215 L1265.52 685.215 L1266.08 685.215 L1266.63 685.215 L1267.19 685.215 L1267.75 685.215 L1268.31 685.215 L1268.87 685.215 L1269.43 685.215 L1269.99 685.215 L1270.55 685.215 L1271.11 685.215 L1271.67 685.215 L1272.23 685.215 L1272.79 685.215 L1273.35 685.215 L1273.91 685.215 L1274.46 685.215 L1275.02 685.215 L1275.58 685.215 L1276.14 685.215 L1276.7 685.215 L1277.26 685.215 L1277.82 685.215 L1278.38 685.215 L1278.94 685.215 L1279.5 685.215 L1280.06 685.215 L1280.62 685.215 L1281.18 685.215 L1281.73 685.215 L1282.29 685.215 L1282.85 685.215 L1283.41 685.215 L1283.97 685.215 L1284.53 685.215 L1285.09 685.215 L1285.65 685.215 L1286.21 685.215 L1286.77 685.215 L1287.33 685.215 L1287.89 685.215 L1288.45 685.215 L1289 685.215 L1289.56 685.215 L1290.12 685.215 L1290.68 685.215 L1291.24 685.215 L1291.8 685.215 L1292.36 685.215 L1292.92 685.215 L1293.48 685.215 L1294.04 685.215 L1294.6 685.215 L1295.16 685.215 L1295.72 685.215 L1296.28 685.215 L1296.83 685.215 L1297.39 685.215 L1297.95 685.215 L1298.51 685.215 L1299.07 685.215 L1299.63 685.215 L1300.19 685.215 L1300.75 685.215 L1301.31 685.215 L1301.87 685.215 L1302.43 685.215 L1302.99 685.215 L1303.55 685.215 L1304.1 685.215 L1304.66 685.215 L1305.22 685.215 L1305.78 685.215 L1306.34 685.215 L1306.9 685.215 L1307.46 685.215 L1308.02 685.215 L1308.58 685.215 L1309.14 685.215 L1309.7 685.215 L1310.26 685.215 L1310.82 685.215 L1311.38 685.215 L1311.93 685.215 L1312.49 685.215 L1313.05 685.215 L1313.61 685.215 L1314.17 685.215 L1314.73 685.215 L1315.29 685.215 L1315.85 685.215 L1316.41 685.215 L1316.97 685.215 L1317.53 685.215 L1318.09 685.215 L1318.65 685.215 L1319.2 685.215 L1319.76 685.215 L1320.32 685.215 L1320.88 685.215 L1321.44 685.215 L1322 685.215 L1322.56 685.215 L1323.12 685.215 L1323.68 685.215 L1324.24 685.215 L1324.8 685.215 L1325.36 685.215 L1325.92 685.215 L1326.47 685.215 L1327.03 685.215 L1327.59 685.215 L1328.15 685.215 L1328.71 685.215 L1329.27 685.215 L1329.83 685.215 L1330.39 685.215 L1330.95 685.215 L1331.51 685.215 L1332.07 685.215 L1332.63 685.215 L1333.19 685.215 L1333.75 685.215 L1334.3 685.215 L1334.86 685.215 L1335.42 685.215 L1335.98 685.215 L1336.54 685.215 L1337.1 685.215 L1337.66 685.215 L1338.22 685.215 L1338.78 685.215 L1339.34 685.215 L1339.9 685.215 L1340.46 685.215 L1341.02 685.215 L1341.57 685.215 L1342.13 685.215 L1342.69 685.215 L1343.25 685.215 L1343.81 685.215 L1344.37 685.215 L1344.93 685.215 L1345.49 685.215 L1346.05 685.215 L1346.61 685.215 L1347.17 685.215 L1347.73 685.215 L1348.29 685.215 L1348.84 685.215 L1349.4 685.215 L1349.96 685.215 L1350.52 685.215 L1351.08 685.215 L1351.64 685.215 L1352.2 685.215 L1352.76 685.215 L1353.32 685.215 L1353.88 685.215 L1354.44 685.215 L1355 685.215 L1355.56 685.215 L1356.12 685.215 L1356.67 685.215 L1357.23 685.215 L1357.79 685.215 L1358.35 685.215 L1358.91 685.215 L1359.47 685.215 L1360.03 685.215 L1360.59 685.215 L1361.15 685.215 L1361.71 685.215 L1362.27 685.215 L1362.83 685.215 L1363.39 685.215 L1363.94 685.215 L1364.5 685.215 L1365.06 685.215 L1365.62 685.215 L1366.18 685.215 L1366.74 685.215 L1367.3 685.215 L1367.86 685.215 L1368.42 685.215 L1368.98 685.215 L1369.54 685.215 L1370.1 685.215 L1370.66 685.215 L1371.21 685.215 L1371.77 685.215 L1372.33 685.215 L1372.89 685.215 L1373.45 685.215 L1374.01 685.215 L1374.57 685.215 L1375.13 685.215 L1375.69 685.215 L1376.25 685.215 L1376.81 685.215 L1377.37 685.215 L1377.93 685.215 L1378.49 685.215 L1379.04 685.215 L1379.6 685.215 L1380.16 685.215 L1380.72 685.215 L1381.28 685.215 L1381.84 685.215 L1382.4 685.215 L1382.96 685.215 L1383.52 685.215 L1384.08 685.215 L1384.64 685.215 L1385.2 685.215 L1385.76 685.215 L1386.31 685.215 L1386.87 685.215 L1387.43 685.215 L1387.99 685.215 L1388.55 685.215 L1389.11 685.215 L1389.67 685.215 L1390.23 685.215 L1390.79 685.215 L1391.35 685.215 L1391.91 685.215 L1392.47 685.215 L1393.03 685.215 L1393.58 685.215 L1394.14 685.215 L1394.7 685.215 L1395.26 685.215 L1395.82 685.215 L1396.38 685.215 L1396.94 685.215 L1397.5 685.215 L1398.06 685.215 L1398.62 685.215 L1399.18 685.215 L1399.74 685.215 L1400.3 685.215 L1400.86 685.215 L1401.41 685.215 L1401.97 685.215 L1402.53 685.215 L1403.09 685.215 L1403.65 685.215 L1404.21 685.215 L1404.77 685.215 L1405.33 685.215 L1405.89 685.215 L1406.45 685.215 L1407.01 685.215 L1407.57 685.215 L1408.13 685.215 L1408.68 685.215 L1409.24 685.215 L1409.8 685.215 L1410.36 685.215 L1410.92 685.215 L1411.48 685.215 L1412.04 685.215 L1412.6 685.215 L1413.16 685.215 L1413.72 685.215 L1414.28 685.215 L1414.84 685.215 L1415.4 685.215 L1415.95 685.215 L1416.51 685.215 L1417.07 685.215 L1417.63 685.215 L1418.19 685.215 L1418.75 685.215 L1419.31 685.215 L1419.87 685.215 L1420.43 685.215 L1420.99 685.215 L1421.55 685.215 L1422.11 685.215 L1422.67 685.215 L1423.23 685.215 L1423.78 685.215 L1424.34 685.215 L1424.9 685.215 L1425.46 685.215 L1426.02 685.215 L1426.58 685.215 L1427.14 685.215 L1427.7 685.215 L1428.26 685.215 L1428.82 685.215 L1429.38 685.215 L1429.94 685.215 L1430.5 685.215 L1431.05 685.215 L1431.61 685.215 L1432.17 685.215 L1432.73 685.215 L1433.29 685.215 L1433.85 685.215 L1434.41 685.215 L1434.97 685.215 L1435.53 685.215 L1436.09 685.215 L1436.65 685.215 L1437.21 685.215 L1437.77 685.215 L1438.33 685.215 L1438.88 685.215 L1439.44 685.215 L1440 685.215 L1440.56 685.215 L1441.12 685.215 L1441.68 685.215 L1442.24 685.215 L1442.8 685.215 L1443.36 685.215 L1443.92 685.215 L1444.48 685.215 L1445.04 685.215 L1445.6 685.215 L1446.15 685.215 L1446.71 685.215 L1447.27 685.215 L1447.83 685.215 L1448.39 685.215 L1448.95 685.215 L1449.51 685.215 L1450.07 685.215 L1450.63 685.215 L1451.19 685.215 L1451.75 685.215 L1452.31 685.215 L1452.87 685.215 L1453.42 685.215 L1453.98 685.215 L1454.54 685.215 L1455.1 685.215 L1455.66 685.215 L1456.22 685.215 L1456.78 685.215 L1457.34 685.215 L1457.9 685.215 L1458.46 685.215 L1459.02 685.215 L1459.58 685.215 L1460.14 685.215 L1460.7 685.215 L1461.25 685.215 L1461.81 685.215 L1462.37 685.215 L1462.93 685.215 L1463.49 685.215 L1464.05 685.215 L1464.61 685.215 L1465.17 685.215 L1465.73 685.215 L1466.29 685.215 L1466.85 685.215 L1467.41 685.215 L1467.97 685.215 L1468.52 685.215 L1469.08 685.215 L1469.64 685.215 L1470.2 685.215 L1470.76 685.215 L1471.32 685.215 L1471.88 685.215 L1472.44 685.215 L1473 685.215 L1473.56 685.215 L1474.12 685.215 L1474.68 685.215 L1475.24 685.215 L1475.79 685.215 L1476.35 685.215 L1476.91 685.215 L1477.47 685.215 L1478.03 685.215 L1478.59 685.215 L1479.15 685.215 L1479.71 685.215 L1480.27 685.215 L1480.83 685.215 L1481.39 685.215 L1481.95 685.215 L1482.51 685.215 L1483.07 685.215 L1483.62 685.215 L1484.18 685.215 L1484.74 685.215 L1485.3 685.215 L1485.86 685.215 L1486.42 685.215 L1486.98 685.215 L1487.54 685.215 L1488.1 685.215 L1488.66 685.215 L1489.22 685.215 L1489.78 685.215 L1490.34 685.215 L1490.89 685.215 L1491.45 685.215 L1492.01 685.215 L1492.57 685.215 L1493.13 685.215 L1493.69 685.215 L1494.25 685.215 L1494.81 685.215 L1495.37 685.215 L1495.93 685.215 L1496.49 685.215 L1497.05 685.215 L1497.61 685.215 L1498.16 685.215 L1498.72 685.215 L1499.28 685.215 L1499.84 685.215 L1500.4 685.215 L1500.96 685.215 L1501.52 685.215 L1502.08 685.215 L1502.64 685.215 L1503.2 685.215 L1503.76 685.215 L1504.32 685.215 L1504.88 685.215 L1505.44 685.215 L1505.99 685.215 L1506.55 685.215 L1507.11 685.215 L1507.67 685.215 L1508.23 685.215 L1508.79 685.215 L1509.35 685.215 L1509.91 685.215 L1510.47 685.215 L1511.03 685.215 L1511.59 685.215 L1512.15 685.215 L1512.71 685.215 L1513.26 685.215 L1513.82 685.215 L1514.38 685.215 L1514.94 685.215 L1515.5 685.215 L1516.06 685.215 L1516.62 685.215 L1517.18 685.215 L1517.74 685.215 L1518.3 685.215 L1518.86 685.215 L1519.42 685.215 L1519.98 685.215 L1520.53 685.215 L1521.09 685.215 L1521.65 685.215 L1522.21 685.215 L1522.77 685.215 L1523.33 685.215 L1523.89 685.215 L1524.45 685.215 L1525.01 685.215 L1525.57 685.215 L1526.13 685.215 L1526.69 685.215 L1527.25 685.215 L1527.81 685.215 L1528.36 685.215 L1528.92 685.215 L1529.48 685.215 L1530.04 685.215 L1530.6 685.215 L1531.16 685.215 L1531.72 685.215 L1532.28 685.215 L1532.84 685.215 L1533.4 685.215 L1533.96 685.215 L1534.52 685.215 L1535.08 685.215 L1535.63 685.215 L1536.19 685.215 L1536.75 685.215 L1537.31 685.215 L1537.87 685.215 L1538.43 685.215 L1538.99 685.215 L1539.55 685.215 L1540.11 685.215 L1540.67 685.215 L1541.23 685.215 L1541.79 685.215 L1542.35 685.215 L1542.9 685.215 L1543.46 685.215 L1544.02 685.215 L1544.58 685.215 L1545.14 685.215 L1545.7 685.215 L1546.26 685.215 L1546.82 685.215 L1547.38 685.215 L1547.94 685.215 L1548.5 685.215 L1549.06 685.215 L1549.62 685.215 L1550.18 685.215 L1550.73 685.215 L1551.29 685.215 L1551.85 685.215 L1552.41 685.215 L1552.97 685.215 L1553.53 685.215 L1554.09 685.215 L1554.65 685.215 L1555.21 685.215 L1555.77 685.215 L1556.33 685.215 L1556.89 685.215 L1557.45 685.215 L1558 685.215 L1558.56 685.215 L1559.12 685.215 L1559.68 685.215 L1560.24 685.215 L1560.8 685.215 L1561.36 685.215 L1561.92 685.215 L1562.48 685.215 L1563.04 685.215 L1563.6 685.215 L1564.16 685.215 L1564.72 685.215 L1565.28 685.215 L1565.83 685.215 L1566.39 685.215 L1566.95 685.215 L1567.51 685.215 L1568.07 685.215 L1568.63 685.215 L1569.19 685.215 L1569.75 685.215 L1570.31 685.215 L1570.87 685.215 L1571.43 685.215 L1571.99 685.215 L1572.55 685.215 L1573.1 685.215 L1573.66 685.215 L1574.22 685.215 L1574.78 685.215 L1575.34 685.215 L1575.9 685.215 L1576.46 685.215 L1577.02 685.215 L1577.58 685.215 L1578.14 685.215 L1578.7 685.215 L1579.26 685.215 L1579.82 685.215 L1580.37 685.215 L1580.93 685.215 L1581.49 685.215 L1582.05 685.215 L1582.61 685.215 L1583.17 685.215 L1583.73 685.215 L1584.29 685.215 L1584.85 685.215 L1585.41 685.215 L1585.97 685.215 L1586.53 685.215 L1587.09 685.215 L1587.65 685.215 L1588.2 685.215 L1588.76 685.215 L1589.32 685.215 L1589.88 685.215 L1590.44 685.215 L1591 685.215 L1591.56 685.215 L1592.12 685.215 L1592.68 685.215 L1593.24 685.215 L1593.8 685.215 L1594.36 685.215 L1594.92 685.215 L1595.47 685.215 L1596.03 685.215 L1596.59 685.215 L1597.15 685.215 L1597.71 685.215 L1598.27 685.215 L1598.83 685.215 L1599.39 685.215 L1599.95 685.215 L1600.51 685.215 L1601.07 685.215 L1601.63 685.215 L1602.19 685.215 L1602.74 685.215 L1603.3 685.215 L1603.86 685.215 L1604.42 685.215 L1604.98 685.215 L1605.54 685.215 L1606.1 685.215 L1606.66 685.215 L1607.22 685.215 L1607.78 685.215 L1608.34 685.215 L1608.9 685.215 L1609.46 685.215 L1610.02 685.215 L1610.57 685.215 L1611.13 685.215 L1611.69 685.215 L1612.25 685.215 L1612.81 685.215 L1613.37 685.215 L1613.93 685.215 L1614.49 685.215 L1615.05 685.215 L1615.61 685.215 L1616.17 685.215 L1616.73 685.215 L1617.29 685.215 L1617.84 685.215 L1618.4 685.215 L1618.96 685.215 L1619.52 685.215 L1620.08 685.215 L1620.64 685.215 L1621.2 685.215 L1621.76 685.215 L1622.32 685.215 L1622.88 685.215 L1623.44 685.215 L1624 685.215 L1624.56 685.215 L1625.11 685.215 L1625.67 685.215 L1626.23 685.215 L1626.79 685.215 L1627.35 685.215 L1627.91 685.215 L1628.47 685.215 L1629.03 685.215 L1629.59 685.215 L1630.15 685.215 L1630.71 685.215 L1631.27 685.215 L1631.83 685.215 L1632.39 685.215 L1632.94 685.215 L1633.5 685.215 L1634.06 685.215 L1634.62 685.215 L1635.18 685.215 L1635.74 685.215 L1636.3 685.215 L1636.86 685.215 L1637.42 685.215 L1637.98 685.215 L1638.54 685.215 L1639.1 685.215 L1639.66 685.215 L1640.21 685.215 L1640.77 685.215 L1641.33 685.215 L1641.89 685.215 L1642.45 685.215 L1643.01 685.215 L1643.57 685.215 L1644.13 685.215 L1644.69 685.215 L1645.25 685.215 L1645.81 685.215 L1646.37 685.215 L1646.93 685.215 L1647.48 685.215 L1648.04 685.215 L1648.6 685.215 L1649.16 685.215 L1649.72 685.215 L1650.28 685.215 L1650.84 685.215 L1651.4 685.215 L1651.96 685.215 L1652.52 685.215 L1653.08 685.215 L1653.64 685.215 L1654.2 685.215 L1654.76 685.215 L1655.31 685.215 L1655.87 685.215 L1656.43 685.215 L1656.99 685.215 L1657.55 685.215 L1658.11 685.215 L1658.67 685.215 L1659.23 685.215 L1659.79 685.215 L1660.35 685.215 L1660.91 685.215 L1661.47 685.215 L1662.03 685.215 L1662.58 685.215 L1663.14 685.215 L1663.7 685.215 L1664.26 685.215 L1664.82 685.215 L1665.38 685.215 L1665.94 685.215 L1666.5 685.215 L1667.06 685.215 L1667.62 685.215 L1668.18 685.215 L1668.74 685.215 L1669.3 685.215 L1669.85 685.215 L1670.41 685.215 L1670.97 685.215 L1671.53 685.215 L1672.09 685.215 L1672.65 685.215 L1673.21 685.215 L1673.77 685.215 L1674.33 685.215 L1674.89 685.215 L1675.45 685.215 L1676.01 685.215 L1676.57 685.215 L1677.13 685.215 L1677.68 685.215 L1678.24 685.215 L1678.8 685.215 L1679.36 685.215 L1679.92 685.215 L1680.48 685.215 L1681.04 685.215 L1681.6 685.215 L1682.16 685.215 L1682.72 685.215 L1683.28 685.215 L1683.84 685.215 L1684.4 685.215 L1684.95 685.215 L1685.51 685.215 L1686.07 685.215 L1686.63 685.215 L1687.19 685.215 L1687.75 685.215 L1688.31 685.215 L1688.87 685.215 L1689.43 685.215 L1689.99 685.215 L1690.55 685.215 L1691.11 685.215 L1691.67 685.215 L1692.23 685.215 L1692.78 685.215 L1693.34 685.215 L1693.9 685.215 L1694.46 685.215 L1695.02 685.215 L1695.58 685.215 L1696.14 685.215 L1696.7 685.215 L1697.26 685.215 L1697.82 685.215 L1698.38 685.215 L1698.94 685.215 L1699.5 685.215 L1700.05 685.215 L1700.61 685.215 L1701.17 685.215 L1701.73 685.215 L1702.29 685.215 L1702.85 685.215 L1703.41 685.215 L1703.97 685.215 L1704.53 685.215 L1705.09 685.215 L1705.65 685.215 L1706.21 685.215 L1706.77 685.215 L1707.32 685.215 L1707.88 685.215 L1708.44 685.215 L1709 685.215 L1709.56 685.215 L1710.12 685.215 L1710.68 685.215 L1711.24 685.215 L1711.8 685.215 L1712.36 685.215 L1712.92 685.215 L1713.48 685.215 L1714.04 685.215 L1714.6 685.215 L1715.15 685.215 L1715.71 685.215 L1716.27 685.215 L1716.83 685.215 L1717.39 685.215 L1717.95 685.215 L1718.51 685.215 L1719.07 685.215 L1719.63 685.215 L1720.19 685.215 L1720.75 685.215 L1721.31 685.215 L1721.87 685.215 L1722.42 685.215 L1722.98 685.215 L1723.54 685.215 L1724.1 685.215 L1724.66 685.215 L1725.22 685.215 L1725.78 685.215 L1726.34 685.215 L1726.9 685.215 L1727.46 685.215 L1728.02 685.215 L1728.58 685.215 L1729.14 685.215 L1729.69 685.215 L1730.25 685.215 L1730.81 685.215 L1731.37 685.215 L1731.93 685.215 L1732.49 685.215 L1733.05 685.215 L1733.61 685.215 L1734.17 685.215 L1734.73 685.215 L1735.29 685.215 L1735.85 685.215 L1736.41 685.215 L1736.97 685.215 L1737.52 685.215 L1738.08 685.215 L1738.64 685.215 L1739.2 685.215 L1739.76 685.215 L1740.32 685.215 L1740.88 685.215 L1741.44 685.215 L1742 685.215 L1742.56 685.215 L1743.12 685.215 L1743.68 685.215 L1744.24 685.215 L1744.79 685.215 L1745.35 685.215 L1745.91 685.215 L1746.47 685.215 L1747.03 685.215 L1747.59 685.215 L1748.15 685.215 L1748.71 685.215 L1749.27 685.215 L1749.83 685.215 L1750.39 685.215 L1750.95 685.215 L1751.51 685.215 L1752.06 685.215 L1752.62 685.215 L1753.18 685.215 L1753.74 685.215 L1754.3 685.215 L1754.86 685.215 L1755.42 685.215 L1755.98 685.215 L1756.54 685.215 L1757.1 685.215 L1757.66 685.215 L1758.22 685.215 L1758.78 685.215 L1759.34 685.215 L1759.89 685.215 L1760.45 685.215 L1761.01 685.215 L1761.57 685.215 L1762.13 685.215 L1762.69 685.215 L1763.25 685.215 L1763.81 685.215 L1764.37 685.215 L1764.93 685.215 L1765.49 685.215 L1766.05 685.215 L1766.61 685.215 L1767.16 685.215 L1767.72 685.215 L1768.28 685.215 L1768.84 685.215 L1769.4 685.215 L1769.96 685.215 L1770.52 685.215 L1771.08 685.215 L1771.64 685.215 L1772.2 685.215 L1772.76 685.215 L1773.32 685.215 L1773.88 685.215 L1774.43 685.215 L1774.99 685.215 L1775.55 685.215 L1776.11 685.215 L1776.67 685.215 L1777.23 685.215 L1777.79 685.215 L1778.35 685.215 L1778.91 685.215 L1779.47 685.215 L1780.03 685.215 L1780.59 685.215 L1781.15 685.215 L1781.71 685.215 L1782.26 685.215 L1782.82 685.215 L1783.38 685.215 L1783.94 685.215 L1784.5 685.215 L1785.06 685.215 L1785.62 685.215 L1786.18 685.215 L1786.74 685.215 L1787.3 685.215 L1787.86 685.215 L1788.42 685.215 L1788.98 685.215 L1789.53 685.215 L1790.09 685.215 L1790.65 685.215 L1791.21 685.215 L1791.77 685.215 L1792.33 685.215 L1792.89 685.215 L1793.45 685.215 L1794.01 685.215 L1794.57 685.215 L1795.13 685.215 L1795.69 685.215 L1796.25 685.215 L1796.8 685.215 L1797.36 685.215 L1797.92 685.215 L1798.48 685.215 L1799.04 685.215 L1799.6 685.215 L1800.16 685.215 L1800.72 685.215 L1801.28 685.215 L1801.84 685.215 L1802.4 685.215 L1802.96 685.215 L1803.52 685.215 L1804.08 685.215 L1804.63 685.215 L1805.19 685.215 L1805.75 685.215 L1806.31 685.215 L1806.87 685.215 L1807.43 685.215 L1807.99 685.215 L1808.55 685.215 L1809.11 685.215 L1809.67 685.215 L1810.23 685.215 L1810.79 685.215 L1811.35 685.215 L1811.9 685.215 L1812.46 685.215 L1813.02 685.215 L1813.58 685.215 L1814.14 685.215 L1814.7 685.215 L1815.26 685.215 L1815.82 685.215 L1816.38 685.215 L1816.94 685.215 L1817.5 685.215 L1818.06 685.215 L1818.62 685.215 L1819.18 685.215 L1819.73 685.215 L1820.29 685.215 L1820.85 685.215 L1821.41 685.215 L1821.97 685.215 L1822.53 685.215 L1823.09 685.215 L1823.65 685.215 L1824.21 685.215 L1824.77 685.215 L1825.33 685.215 L1825.89 685.215 L1826.45 685.215 L1827 685.215 L1827.56 685.215 L1828.12 685.215 L1828.68 685.215 L1829.24 685.215 L1829.8 685.215 L1830.36 685.215 L1830.92 685.215 L1831.48 685.215 L1832.04 685.215 L1832.6 685.215 L1833.16 685.215 L1833.72 685.215 L1834.27 685.215 L1834.83 685.215 L1835.39 685.215 L1835.95 685.215 L1836.51 685.215 L1837.07 685.215 L1837.63 685.215 L1838.19 685.215 L1838.19 683.42 L1837.63 683.42 L1837.07 683.42 L1836.51 683.42 L1835.95 683.42 L1835.39 683.42 L1834.83 683.42 L1834.27 683.42 L1833.72 683.42 L1833.16 683.42 L1832.6 683.42 L1832.04 683.42 L1831.48 683.42 L1830.92 683.42 L1830.36 683.42 L1829.8 683.42 L1829.24 683.42 L1828.68 683.42 L1828.12 683.42 L1827.56 683.42 L1827 683.42 L1826.45 683.42 L1825.89 683.42 L1825.33 683.42 L1824.77 683.42 L1824.21 683.42 L1823.65 683.42 L1823.09 683.42 L1822.53 683.42 L1821.97 683.42 L1821.41 683.42 L1820.85 683.42 L1820.29 683.42 L1819.73 683.42 L1819.18 683.42 L1818.62 683.42 L1818.06 683.42 L1817.5 683.42 L1816.94 683.42 L1816.38 683.42 L1815.82 683.42 L1815.26 683.42 L1814.7 683.42 L1814.14 683.42 L1813.58 683.42 L1813.02 683.42 L1812.46 683.42 L1811.9 683.42 L1811.35 683.42 L1810.79 683.42 L1810.23 683.42 L1809.67 683.42 L1809.11 683.42 L1808.55 683.42 L1807.99 683.42 L1807.43 683.42 L1806.87 683.42 L1806.31 683.42 L1805.75 683.42 L1805.19 683.42 L1804.63 683.42 L1804.08 683.42 L1803.52 683.42 L1802.96 683.42 L1802.4 683.42 L1801.84 683.42 L1801.28 683.42 L1800.72 683.42 L1800.16 683.42 L1799.6 683.42 L1799.04 683.42 L1798.48 683.42 L1797.92 683.42 L1797.36 683.42 L1796.8 683.42 L1796.25 683.42 L1795.69 683.42 L1795.13 683.42 L1794.57 683.42 L1794.01 683.42 L1793.45 683.42 L1792.89 683.42 L1792.33 683.42 L1791.77 683.42 L1791.21 683.42 L1790.65 683.42 L1790.09 683.42 L1789.53 683.42 L1788.98 683.42 L1788.42 683.42 L1787.86 683.42 L1787.3 683.42 L1786.74 683.42 L1786.18 683.42 L1785.62 683.42 L1785.06 683.42 L1784.5 683.42 L1783.94 683.42 L1783.38 683.42 L1782.82 683.42 L1782.26 683.42 L1781.71 683.42 L1781.15 683.42 L1780.59 683.42 L1780.03 683.42 L1779.47 683.42 L1778.91 683.42 L1778.35 683.42 L1777.79 683.42 L1777.23 683.42 L1776.67 683.42 L1776.11 683.42 L1775.55 683.42 L1774.99 683.42 L1774.43 683.42 L1773.88 683.42 L1773.32 683.42 L1772.76 683.42 L1772.2 683.42 L1771.64 683.42 L1771.08 683.42 L1770.52 683.42 L1769.96 683.42 L1769.4 683.42 L1768.84 683.42 L1768.28 683.42 L1767.72 683.42 L1767.16 683.42 L1766.61 683.42 L1766.05 683.42 L1765.49 683.42 L1764.93 683.42 L1764.37 683.42 L1763.81 683.42 L1763.25 683.42 L1762.69 683.42 L1762.13 683.42 L1761.57 683.42 L1761.01 683.42 L1760.45 683.42 L1759.89 683.42 L1759.34 683.42 L1758.78 683.42 L1758.22 683.42 L1757.66 683.42 L1757.1 683.42 L1756.54 683.42 L1755.98 683.42 L1755.42 683.42 L1754.86 683.42 L1754.3 683.42 L1753.74 683.42 L1753.18 683.42 L1752.62 683.42 L1752.06 683.42 L1751.51 683.42 L1750.95 683.42 L1750.39 683.42 L1749.83 683.42 L1749.27 683.42 L1748.71 683.42 L1748.15 683.42 L1747.59 683.42 L1747.03 683.42 L1746.47 683.42 L1745.91 683.42 L1745.35 683.42 L1744.79 683.42 L1744.24 683.42 L1743.68 683.42 L1743.12 683.42 L1742.56 683.42 L1742 683.42 L1741.44 683.42 L1740.88 683.42 L1740.32 683.42 L1739.76 683.42 L1739.2 683.42 L1738.64 683.42 L1738.08 683.42 L1737.52 683.42 L1736.97 683.42 L1736.41 683.42 L1735.85 683.42 L1735.29 683.42 L1734.73 683.42 L1734.17 683.42 L1733.61 683.42 L1733.05 683.42 L1732.49 683.42 L1731.93 683.42 L1731.37 683.42 L1730.81 683.42 L1730.25 683.42 L1729.69 683.42 L1729.14 683.42 L1728.58 683.42 L1728.02 683.42 L1727.46 683.42 L1726.9 683.42 L1726.34 683.42 L1725.78 683.42 L1725.22 683.42 L1724.66 683.42 L1724.1 683.42 L1723.54 683.42 L1722.98 683.42 L1722.42 683.42 L1721.87 683.42 L1721.31 683.42 L1720.75 683.42 L1720.19 683.42 L1719.63 683.42 L1719.07 683.42 L1718.51 683.42 L1717.95 683.42 L1717.39 683.42 L1716.83 683.42 L1716.27 683.42 L1715.71 683.42 L1715.15 683.42 L1714.6 683.42 L1714.04 683.42 L1713.48 683.42 L1712.92 683.42 L1712.36 683.42 L1711.8 683.42 L1711.24 683.42 L1710.68 683.42 L1710.12 683.42 L1709.56 683.42 L1709 683.42 L1708.44 683.42 L1707.88 683.42 L1707.32 683.42 L1706.77 683.42 L1706.21 683.42 L1705.65 683.42 L1705.09 683.42 L1704.53 683.42 L1703.97 683.42 L1703.41 683.42 L1702.85 683.42 L1702.29 683.42 L1701.73 683.42 L1701.17 683.42 L1700.61 683.42 L1700.05 683.42 L1699.5 683.42 L1698.94 683.42 L1698.38 683.42 L1697.82 683.42 L1697.26 683.42 L1696.7 683.42 L1696.14 683.42 L1695.58 683.42 L1695.02 683.42 L1694.46 683.42 L1693.9 683.42 L1693.34 683.42 L1692.78 683.42 L1692.23 683.42 L1691.67 683.42 L1691.11 683.42 L1690.55 683.42 L1689.99 683.42 L1689.43 683.42 L1688.87 683.42 L1688.31 683.42 L1687.75 683.42 L1687.19 683.42 L1686.63 683.42 L1686.07 683.42 L1685.51 683.42 L1684.95 683.42 L1684.4 683.42 L1683.84 683.42 L1683.28 683.42 L1682.72 683.42 L1682.16 683.42 L1681.6 683.42 L1681.04 683.42 L1680.48 683.42 L1679.92 683.42 L1679.36 683.42 L1678.8 683.42 L1678.24 683.42 L1677.68 683.42 L1677.13 683.42 L1676.57 683.42 L1676.01 683.42 L1675.45 683.42 L1674.89 683.42 L1674.33 683.42 L1673.77 683.42 L1673.21 683.42 L1672.65 683.42 L1672.09 683.42 L1671.53 683.42 L1670.97 683.42 L1670.41 683.42 L1669.85 683.42 L1669.3 683.42 L1668.74 683.42 L1668.18 683.42 L1667.62 683.42 L1667.06 683.42 L1666.5 683.42 L1665.94 683.42 L1665.38 683.42 L1664.82 683.42 L1664.26 683.42 L1663.7 683.42 L1663.14 683.42 L1662.58 683.42 L1662.03 683.42 L1661.47 683.42 L1660.91 683.42 L1660.35 683.42 L1659.79 683.42 L1659.23 683.42 L1658.67 683.42 L1658.11 683.42 L1657.55 683.42 L1656.99 683.42 L1656.43 683.42 L1655.87 683.42 L1655.31 683.42 L1654.76 683.42 L1654.2 683.42 L1653.64 683.42 L1653.08 683.42 L1652.52 683.42 L1651.96 683.42 L1651.4 683.42 L1650.84 683.42 L1650.28 683.42 L1649.72 683.42 L1649.16 683.42 L1648.6 683.42 L1648.04 683.42 L1647.48 683.42 L1646.93 683.42 L1646.37 683.42 L1645.81 683.42 L1645.25 683.42 L1644.69 683.42 L1644.13 683.42 L1643.57 683.42 L1643.01 683.42 L1642.45 683.42 L1641.89 683.42 L1641.33 683.42 L1640.77 683.42 L1640.21 683.42 L1639.66 683.42 L1639.1 683.42 L1638.54 683.42 L1637.98 683.42 L1637.42 683.42 L1636.86 683.42 L1636.3 683.42 L1635.74 683.42 L1635.18 683.42 L1634.62 683.42 L1634.06 683.42 L1633.5 683.42 L1632.94 683.42 L1632.39 683.42 L1631.83 683.42 L1631.27 683.42 L1630.71 683.42 L1630.15 683.42 L1629.59 683.42 L1629.03 683.42 L1628.47 683.42 L1627.91 683.42 L1627.35 683.42 L1626.79 683.42 L1626.23 683.42 L1625.67 683.42 L1625.11 683.42 L1624.56 683.42 L1624 683.42 L1623.44 683.42 L1622.88 683.42 L1622.32 683.42 L1621.76 683.42 L1621.2 683.42 L1620.64 683.42 L1620.08 683.42 L1619.52 683.42 L1618.96 683.42 L1618.4 683.42 L1617.84 683.42 L1617.29 683.42 L1616.73 683.42 L1616.17 683.42 L1615.61 683.42 L1615.05 683.42 L1614.49 683.42 L1613.93 683.42 L1613.37 683.42 L1612.81 683.42 L1612.25 683.42 L1611.69 683.42 L1611.13 683.42 L1610.57 683.42 L1610.02 683.42 L1609.46 683.42 L1608.9 683.42 L1608.34 683.42 L1607.78 683.42 L1607.22 683.42 L1606.66 683.42 L1606.1 683.42 L1605.54 683.42 L1604.98 683.42 L1604.42 683.42 L1603.86 683.42 L1603.3 683.42 L1602.74 683.42 L1602.19 683.42 L1601.63 683.42 L1601.07 683.42 L1600.51 683.42 L1599.95 683.42 L1599.39 683.42 L1598.83 683.42 L1598.27 683.42 L1597.71 683.42 L1597.15 683.42 L1596.59 683.42 L1596.03 683.42 L1595.47 683.42 L1594.92 683.42 L1594.36 683.42 L1593.8 683.42 L1593.24 683.42 L1592.68 683.42 L1592.12 683.42 L1591.56 683.42 L1591 683.42 L1590.44 683.42 L1589.88 683.42 L1589.32 683.42 L1588.76 683.42 L1588.2 683.42 L1587.65 683.42 L1587.09 683.42 L1586.53 683.42 L1585.97 683.42 L1585.41 683.42 L1584.85 683.42 L1584.29 683.42 L1583.73 683.42 L1583.17 683.42 L1582.61 683.42 L1582.05 683.42 L1581.49 683.42 L1580.93 683.42 L1580.37 683.42 L1579.82 683.42 L1579.26 683.42 L1578.7 683.42 L1578.14 683.42 L1577.58 683.42 L1577.02 683.42 L1576.46 683.42 L1575.9 683.42 L1575.34 683.42 L1574.78 683.42 L1574.22 683.42 L1573.66 683.42 L1573.1 683.42 L1572.55 683.42 L1571.99 683.42 L1571.43 683.42 L1570.87 683.42 L1570.31 683.42 L1569.75 683.42 L1569.19 683.42 L1568.63 683.42 L1568.07 683.42 L1567.51 683.42 L1566.95 683.42 L1566.39 683.42 L1565.83 683.42 L1565.28 683.42 L1564.72 683.42 L1564.16 683.42 L1563.6 683.42 L1563.04 683.42 L1562.48 683.42 L1561.92 683.42 L1561.36 683.42 L1560.8 683.42 L1560.24 683.42 L1559.68 683.42 L1559.12 683.42 L1558.56 683.42 L1558 683.42 L1557.45 683.42 L1556.89 683.42 L1556.33 683.42 L1555.77 683.42 L1555.21 683.42 L1554.65 683.42 L1554.09 683.42 L1553.53 683.42 L1552.97 683.42 L1552.41 683.42 L1551.85 683.42 L1551.29 683.42 L1550.73 683.42 L1550.18 683.42 L1549.62 683.42 L1549.06 683.42 L1548.5 683.42 L1547.94 683.42 L1547.38 683.42 L1546.82 683.42 L1546.26 683.42 L1545.7 683.42 L1545.14 683.42 L1544.58 683.42 L1544.02 683.42 L1543.46 683.42 L1542.9 683.42 L1542.35 683.42 L1541.79 683.42 L1541.23 683.42 L1540.67 683.42 L1540.11 683.42 L1539.55 683.42 L1538.99 683.42 L1538.43 683.42 L1537.87 683.42 L1537.31 683.42 L1536.75 683.42 L1536.19 683.42 L1535.63 683.42 L1535.08 683.42 L1534.52 683.42 L1533.96 683.42 L1533.4 683.42 L1532.84 683.42 L1532.28 683.42 L1531.72 683.42 L1531.16 683.42 L1530.6 683.42 L1530.04 683.42 L1529.48 683.42 L1528.92 683.42 L1528.36 683.42 L1527.81 683.42 L1527.25 683.42 L1526.69 683.42 L1526.13 683.42 L1525.57 683.42 L1525.01 683.42 L1524.45 683.42 L1523.89 683.42 L1523.33 683.42 L1522.77 683.42 L1522.21 683.42 L1521.65 683.42 L1521.09 683.42 L1520.53 683.42 L1519.98 683.42 L1519.42 683.42 L1518.86 683.42 L1518.3 683.42 L1517.74 683.42 L1517.18 683.42 L1516.62 683.42 L1516.06 683.42 L1515.5 683.42 L1514.94 683.42 L1514.38 683.42 L1513.82 683.42 L1513.26 683.42 L1512.71 683.42 L1512.15 683.42 L1511.59 683.42 L1511.03 683.42 L1510.47 683.42 L1509.91 683.42 L1509.35 683.42 L1508.79 683.42 L1508.23 683.42 L1507.67 683.42 L1507.11 683.42 L1506.55 683.42 L1505.99 683.42 L1505.44 683.42 L1504.88 683.42 L1504.32 683.42 L1503.76 683.42 L1503.2 683.42 L1502.64 683.42 L1502.08 683.42 L1501.52 683.42 L1500.96 683.42 L1500.4 683.42 L1499.84 683.42 L1499.28 683.42 L1498.72 683.42 L1498.16 683.42 L1497.61 683.42 L1497.05 683.42 L1496.49 683.42 L1495.93 683.42 L1495.37 683.42 L1494.81 683.42 L1494.25 683.42 L1493.69 683.42 L1493.13 683.42 L1492.57 683.42 L1492.01 683.42 L1491.45 683.42 L1490.89 683.42 L1490.34 683.42 L1489.78 683.42 L1489.22 683.42 L1488.66 683.42 L1488.1 683.42 L1487.54 683.42 L1486.98 683.42 L1486.42 683.42 L1485.86 683.42 L1485.3 683.42 L1484.74 683.42 L1484.18 683.42 L1483.62 683.42 L1483.07 683.42 L1482.51 683.42 L1481.95 683.42 L1481.39 683.42 L1480.83 683.42 L1480.27 683.42 L1479.71 683.42 L1479.15 683.42 L1478.59 683.42 L1478.03 683.42 L1477.47 683.42 L1476.91 683.42 L1476.35 683.42 L1475.79 683.42 L1475.24 683.42 L1474.68 683.42 L1474.12 683.42 L1473.56 683.42 L1473 683.42 L1472.44 683.42 L1471.88 683.42 L1471.32 683.42 L1470.76 683.42 L1470.2 683.42 L1469.64 683.42 L1469.08 683.42 L1468.52 683.42 L1467.97 683.42 L1467.41 683.42 L1466.85 683.42 L1466.29 683.42 L1465.73 683.42 L1465.17 683.42 L1464.61 683.42 L1464.05 683.42 L1463.49 683.42 L1462.93 683.42 L1462.37 683.42 L1461.81 683.42 L1461.25 683.42 L1460.7 683.42 L1460.14 683.42 L1459.58 683.42 L1459.02 683.42 L1458.46 683.42 L1457.9 683.42 L1457.34 683.42 L1456.78 683.42 L1456.22 683.42 L1455.66 683.42 L1455.1 683.42 L1454.54 683.42 L1453.98 683.42 L1453.42 683.42 L1452.87 683.42 L1452.31 683.42 L1451.75 683.42 L1451.19 683.42 L1450.63 683.42 L1450.07 683.42 L1449.51 683.42 L1448.95 683.42 L1448.39 683.42 L1447.83 683.42 L1447.27 683.42 L1446.71 683.42 L1446.15 683.42 L1445.6 683.42 L1445.04 683.42 L1444.48 683.42 L1443.92 683.42 L1443.36 683.42 L1442.8 683.42 L1442.24 683.42 L1441.68 683.42 L1441.12 683.42 L1440.56 683.42 L1440 683.42 L1439.44 683.42 L1438.88 683.42 L1438.33 683.42 L1437.77 683.42 L1437.21 683.42 L1436.65 683.42 L1436.09 683.42 L1435.53 683.42 L1434.97 683.42 L1434.41 683.42 L1433.85 683.42 L1433.29 683.42 L1432.73 683.42 L1432.17 683.42 L1431.61 683.42 L1431.05 683.42 L1430.5 683.42 L1429.94 683.42 L1429.38 683.42 L1428.82 683.42 L1428.26 683.42 L1427.7 683.42 L1427.14 683.42 L1426.58 683.42 L1426.02 683.42 L1425.46 683.42 L1424.9 683.42 L1424.34 683.42 L1423.78 683.42 L1423.23 683.42 L1422.67 683.42 L1422.11 683.42 L1421.55 683.42 L1420.99 683.42 L1420.43 683.42 L1419.87 683.42 L1419.31 683.42 L1418.75 683.42 L1418.19 683.42 L1417.63 683.42 L1417.07 683.42 L1416.51 683.42 L1415.95 683.42 L1415.4 683.42 L1414.84 683.42 L1414.28 683.42 L1413.72 683.42 L1413.16 683.42 L1412.6 683.42 L1412.04 683.42 L1411.48 683.42 L1410.92 683.42 L1410.36 683.42 L1409.8 683.42 L1409.24 683.42 L1408.68 683.42 L1408.13 683.42 L1407.57 683.42 L1407.01 683.42 L1406.45 683.42 L1405.89 683.42 L1405.33 683.42 L1404.77 683.42 L1404.21 683.42 L1403.65 683.42 L1403.09 683.42 L1402.53 683.42 L1401.97 683.42 L1401.41 683.42 L1400.86 683.42 L1400.3 683.42 L1399.74 683.42 L1399.18 683.42 L1398.62 683.42 L1398.06 683.42 L1397.5 683.42 L1396.94 683.42 L1396.38 683.42 L1395.82 683.42 L1395.26 683.42 L1394.7 683.42 L1394.14 683.42 L1393.58 683.42 L1393.03 683.42 L1392.47 683.42 L1391.91 683.42 L1391.35 683.42 L1390.79 683.42 L1390.23 683.42 L1389.67 683.42 L1389.11 683.42 L1388.55 683.42 L1387.99 683.42 L1387.43 683.42 L1386.87 683.42 L1386.31 683.42 L1385.76 683.42 L1385.2 683.42 L1384.64 683.42 L1384.08 683.42 L1383.52 683.42 L1382.96 683.42 L1382.4 683.42 L1381.84 683.42 L1381.28 683.42 L1380.72 683.42 L1380.16 683.42 L1379.6 683.42 L1379.04 683.42 L1378.49 683.42 L1377.93 683.42 L1377.37 683.42 L1376.81 683.42 L1376.25 683.42 L1375.69 683.42 L1375.13 683.42 L1374.57 683.42 L1374.01 683.42 L1373.45 683.42 L1372.89 683.42 L1372.33 683.42 L1371.77 683.42 L1371.21 683.42 L1370.66 683.42 L1370.1 683.42 L1369.54 683.42 L1368.98 683.42 L1368.42 683.42 L1367.86 683.42 L1367.3 683.42 L1366.74 683.42 L1366.18 683.42 L1365.62 683.42 L1365.06 683.42 L1364.5 683.42 L1363.94 683.42 L1363.39 683.42 L1362.83 683.42 L1362.27 683.42 L1361.71 683.42 L1361.15 683.42 L1360.59 683.42 L1360.03 683.42 L1359.47 683.42 L1358.91 683.42 L1358.35 683.42 L1357.79 683.42 L1357.23 683.42 L1356.67 683.42 L1356.12 683.42 L1355.56 683.42 L1355 683.42 L1354.44 683.42 L1353.88 683.42 L1353.32 683.42 L1352.76 683.42 L1352.2 683.42 L1351.64 683.42 L1351.08 683.42 L1350.52 683.42 L1349.96 683.42 L1349.4 683.42 L1348.84 683.42 L1348.29 683.42 L1347.73 683.42 L1347.17 683.42 L1346.61 683.42 L1346.05 683.42 L1345.49 683.42 L1344.93 683.42 L1344.37 683.42 L1343.81 683.42 L1343.25 683.42 L1342.69 683.42 L1342.13 683.42 L1341.57 683.42 L1341.02 683.42 L1340.46 683.42 L1339.9 683.42 L1339.34 683.42 L1338.78 683.42 L1338.22 683.42 L1337.66 683.42 L1337.1 683.42 L1336.54 683.42 L1335.98 683.42 L1335.42 683.42 L1334.86 683.42 L1334.3 683.42 L1333.75 683.42 L1333.19 683.42 L1332.63 683.42 L1332.07 683.42 L1331.51 683.42 L1330.95 683.42 L1330.39 683.42 L1329.83 683.42 L1329.27 683.42 L1328.71 683.42 L1328.15 683.42 L1327.59 683.42 L1327.03 683.42 L1326.47 683.42 L1325.92 683.42 L1325.36 683.42 L1324.8 683.42 L1324.24 683.42 L1323.68 683.42 L1323.12 683.42 L1322.56 683.42 L1322 683.42 L1321.44 683.42 L1320.88 683.42 L1320.32 683.42 L1319.76 683.42 L1319.2 683.42 L1318.65 683.42 L1318.09 683.42 L1317.53 683.42 L1316.97 683.42 L1316.41 683.42 L1315.85 683.42 L1315.29 683.42 L1314.73 683.42 L1314.17 683.42 L1313.61 683.42 L1313.05 683.42 L1312.49 683.42 L1311.93 683.42 L1311.38 683.42 L1310.82 683.42 L1310.26 683.42 L1309.7 683.42 L1309.14 683.42 L1308.58 683.42 L1308.02 683.42 L1307.46 683.42 L1306.9 683.42 L1306.34 683.42 L1305.78 683.42 L1305.22 683.42 L1304.66 683.42 L1304.1 683.42 L1303.55 683.42 L1302.99 683.42 L1302.43 683.42 L1301.87 683.42 L1301.31 683.42 L1300.75 683.42 L1300.19 683.42 L1299.63 683.42 L1299.07 683.42 L1298.51 683.42 L1297.95 683.42 L1297.39 683.42 L1296.83 683.42 L1296.28 683.42 L1295.72 683.42 L1295.16 683.42 L1294.6 683.42 L1294.04 683.42 L1293.48 683.42 L1292.92 683.42 L1292.36 683.42 L1291.8 683.42 L1291.24 683.42 L1290.68 683.42 L1290.12 683.42 L1289.56 683.42 L1289 683.42 L1288.45 683.42 L1287.89 683.42 L1287.33 683.42 L1286.77 683.42 L1286.21 683.42 L1285.65 683.42 L1285.09 683.42 L1284.53 683.42 L1283.97 683.42 L1283.41 683.42 L1282.85 683.42 L1282.29 683.42 L1281.73 683.42 L1281.18 683.42 L1280.62 683.42 L1280.06 683.42 L1279.5 683.42 L1278.94 683.42 L1278.38 683.42 L1277.82 683.42 L1277.26 683.42 L1276.7 683.42 L1276.14 683.42 L1275.58 683.42 L1275.02 683.42 L1274.46 683.42 L1273.91 683.42 L1273.35 683.42 L1272.79 683.42 L1272.23 683.42 L1271.67 683.42 L1271.11 683.42 L1270.55 683.42 L1269.99 683.42 L1269.43 683.42 L1268.87 683.42 L1268.31 683.42 L1267.75 683.42 L1267.19 683.42 L1266.63 683.42 L1266.08 683.42 L1265.52 683.42 L1264.96 683.42 L1264.4 683.42 L1263.84 683.42 L1263.28 683.42 L1262.72 683.42 L1262.16 683.42 L1261.6 683.42 L1261.04 683.42 L1260.48 683.42 L1259.92 683.42 L1259.36 683.42 L1258.81 683.42 L1258.25 683.42 L1257.69 683.42 L1257.13 683.42 L1256.57 683.42 L1256.01 683.42 L1255.45 683.42 L1254.89 683.42 L1254.33 683.42 L1253.77 683.42 L1253.21 683.42 L1252.65 683.42 L1252.09 683.42 L1251.54 683.42 L1250.98 683.42 L1250.42 683.42 L1249.86 683.42 L1249.3 683.42 L1248.74 683.42 L1248.18 683.42 L1247.62 683.42 L1247.06 683.42 L1246.5 683.42 L1245.94 683.42 L1245.38 683.42 L1244.82 683.42 L1244.26 683.42 L1243.71 683.42 L1243.15 683.42 L1242.59 683.42 L1242.03 683.42 L1241.47 683.42 L1240.91 683.42 L1240.35 683.42 L1239.79 683.42 L1239.23 683.42 L1238.67 683.42 L1238.11 683.42 L1237.55 683.42 L1236.99 683.42 L1236.44 683.42 L1235.88 683.42 L1235.32 683.42 L1234.76 683.42 L1234.2 683.42 L1233.64 683.42 L1233.08 683.42 L1232.52 683.42 L1231.96 683.42 L1231.4 683.42 L1230.84 683.42 L1230.28 683.42 L1229.72 683.42 L1229.17 683.42 L1228.61 683.42 L1228.05 683.42 L1227.49 683.42 L1226.93 683.42 L1226.37 683.42 L1225.81 683.42 L1225.25 683.42 L1224.69 683.42 L1224.13 683.42 L1223.57 683.42 L1223.01 683.42 L1222.45 683.42 L1221.89 683.42 L1221.34 683.42 L1220.78 683.42 L1220.22 683.42 L1219.66 683.42 L1219.1 683.42 L1218.54 683.42 L1217.98 683.42 L1217.42 683.42 L1216.86 683.42 L1216.3 683.42 L1215.74 683.42 L1215.18 683.42 L1214.62 683.42 L1214.07 683.42 L1213.51 683.42 L1212.95 683.42 L1212.39 683.42 L1211.83 683.42 L1211.27 683.42 L1210.71 683.42 L1210.15 683.42 L1209.59 683.42 L1209.03 683.42 L1208.47 683.42 L1207.91 683.42 L1207.35 683.42 L1206.8 683.42 L1206.24 683.42 L1205.68 683.42 L1205.12 683.42 L1204.56 683.42 L1204 683.42 L1203.44 683.42 L1202.88 683.42 L1202.32 683.42 L1201.76 683.42 L1201.2 683.42 L1200.64 683.42 L1200.08 683.42 L1199.52 683.42 L1198.97 683.42 L1198.41 683.42 L1197.85 683.42 L1197.29 683.42 L1196.73 683.42 L1196.17 683.42 L1195.61 683.42 L1195.05 683.42 L1194.49 683.42 L1193.93 683.42 L1193.37 683.42 L1192.81 683.42 L1192.25 683.42 L1191.7 683.42 L1191.14 683.42 L1190.58 683.42 L1190.02 683.42 L1189.46 683.42 L1188.9 683.42 L1188.34 683.42 L1187.78 683.42 L1187.22 683.42 L1186.66 683.42 L1186.1 683.42 L1185.54 683.42 L1184.98 683.42 L1184.43 683.42 L1183.87 683.42 L1183.31 683.42 L1182.75 683.42 L1182.19 683.42 L1181.63 683.42 L1181.07 683.42 L1180.51 683.42 L1179.95 683.42 L1179.39 683.42 L1178.83 683.42 L1178.27 683.42 L1177.71 683.42 L1177.15 683.42 L1176.6 683.42 L1176.04 683.42 L1175.48 683.42 L1174.92 683.42 L1174.36 683.42 L1173.8 683.42 L1173.24 683.42 L1172.68 683.42 L1172.12 683.42 L1171.56 683.42 L1171 683.42 L1170.44 683.42 L1169.88 683.42 L1169.33 683.42 L1168.77 683.42 L1168.21 683.42 L1167.65 683.42 L1167.09 683.42 L1166.53 683.42 L1165.97 683.42 L1165.41 683.42 L1164.85 683.42 L1164.29 683.42 L1163.73 683.42 L1163.17 683.42 L1162.61 683.42 L1162.05 683.42 L1161.5 683.42 L1160.94 683.42 L1160.38 683.42 L1159.82 683.42 L1159.26 683.42 L1158.7 683.42 L1158.14 683.42 L1157.58 683.42 L1157.02 683.42 L1156.46 683.42 L1155.9 683.42 L1155.34 683.42 L1154.78 683.42 L1154.23 683.42 L1153.67 683.42 L1153.11 683.42 L1152.55 683.42 L1151.99 683.42 L1151.43 683.42 L1150.87 683.42 L1150.31 683.42 L1149.75 683.42 L1149.19 683.42 L1148.63 683.42 L1148.07 683.42 L1147.51 683.42 L1146.96 683.42 L1146.4 683.42 L1145.84 683.42 L1145.28 683.42 L1144.72 683.42 L1144.16 683.42 L1143.6 683.42 L1143.04 683.42 L1142.48 683.42 L1141.92 683.42 L1141.36 683.42 L1140.8 683.42 L1140.24 683.42 L1139.68 683.42 L1139.13 683.42 L1138.57 683.42 L1138.01 683.42 L1137.45 683.42 L1136.89 683.42 L1136.33 683.42 L1135.77 683.42 L1135.21 683.42 L1134.65 683.42 L1134.09 683.42 L1133.53 683.42 L1132.97 683.42 L1132.41 683.42 L1131.86 683.42 L1131.3 683.42 L1130.74 683.42 L1130.18 683.42 L1129.62 683.42 L1129.06 683.42 L1128.5 683.42 L1127.94 683.42 L1127.38 683.42 L1126.82 683.42 L1126.26 683.42 L1125.7 683.42 L1125.14 683.42 L1124.59 683.42 L1124.03 683.42 L1123.47 683.42 L1122.91 683.42 L1122.35 683.42 L1121.79 683.42 L1121.23 683.42 L1120.67 683.42 L1120.11 683.42 L1119.55 683.42 L1118.99 683.42 L1118.43 683.42 L1117.87 683.42 L1117.31 683.42 L1116.76 683.42 L1116.2 683.42 L1115.64 683.42 L1115.08 683.42 L1114.52 683.42 L1113.96 683.42 L1113.4 683.42 L1112.84 683.42 L1112.28 683.42 L1111.72 683.42 L1111.16 683.42 L1110.6 683.42 L1110.04 683.42 L1109.49 683.42 L1108.93 683.42 L1108.37 683.42 L1107.81 683.42 L1107.25 683.42 L1106.69 683.42 L1106.13 683.42 L1105.57 683.42 L1105.01 683.42 L1104.45 683.42 L1103.89 683.42 L1103.33 683.42 L1102.77 683.42 L1102.22 683.42 L1101.66 683.42 L1101.1 683.42 L1100.54 683.42 L1099.98 683.42 L1099.42 683.42 L1098.86 683.42 L1098.3 683.42 L1097.74 683.42 L1097.18 683.42 L1096.62 683.42 L1096.06 683.42 L1095.5 683.42 L1094.94 683.42 L1094.39 683.42 L1093.83 683.42 L1093.27 683.42 L1092.71 683.42 L1092.15 683.42 L1091.59 683.42 L1091.03 683.42 L1090.47 683.42 L1089.91 683.42 L1089.35 683.42 L1088.79 683.42 L1088.23 683.42 L1087.67 683.42 L1087.12 683.42 L1086.56 683.42 L1086 683.42 L1085.44 683.42 L1084.88 683.42 L1084.32 683.42 L1083.76 683.42 L1083.2 683.42 L1082.64 683.42 L1082.08 683.42 L1081.52 683.42 L1080.96 683.42 L1080.4 683.42 L1079.85 683.42 L1079.29 683.42 L1078.73 683.42 L1078.17 683.42 L1077.61 683.42 L1077.05 683.42 L1076.49 683.42 L1075.93 683.42 L1075.37 683.42 L1074.81 683.42 L1074.25 683.42 L1073.69 683.42 L1073.13 683.42 L1072.57 683.42 L1072.02 683.42 L1071.46 683.42 L1070.9 683.42 L1070.34 683.42 L1069.78 683.42 L1069.22 683.42 L1068.66 683.42 L1068.1 683.42 L1067.54 683.42 L1066.98 683.42 L1066.42 683.42 L1065.86 683.42 L1065.3 683.42 L1064.75 683.42 L1064.19 683.42 L1063.63 683.42 L1063.07 683.42 L1062.51 683.42 L1061.95 683.42 L1061.39 683.42 L1060.83 683.42 L1060.27 683.42 L1059.71 683.42 L1059.15 683.42 L1058.59 683.42 L1058.03 683.42 L1057.48 683.42 L1056.92 683.42 L1056.36 683.42 L1055.8 683.42 L1055.24 683.42 L1054.68 683.42 L1054.12 683.42 L1053.56 683.42 L1053 683.42 L1052.44 683.42 L1051.88 683.42 L1051.32 683.42 L1050.76 683.42 L1050.2 683.42 L1049.65 683.42 L1049.09 683.42 L1048.53 683.42 L1047.97 683.42 L1047.41 683.42 L1046.85 683.42 L1046.29 683.42 L1045.73 683.42 L1045.17 683.42 L1044.61 683.42 L1044.05 683.42 L1043.49 683.42 L1042.93 683.42 L1042.38 683.42 L1041.82 683.42 L1041.26 683.42 L1040.7 683.42 L1040.14 683.42 L1039.58 683.42 L1039.02 683.42 L1038.46 683.42 L1037.9 683.42 L1037.34 683.42 L1036.78 683.42 L1036.22 683.42 L1035.66 683.42 L1035.1 683.42 L1034.55 683.42 L1033.99 683.42 L1033.43 683.42 L1032.87 683.42 L1032.31 683.42 L1031.75 683.42 L1031.19 683.42 L1030.63 683.42 L1030.07 683.42 L1029.51 683.42 L1028.95 683.42 L1028.39 683.42 L1027.83 683.42 L1027.28 683.42 L1026.72 683.42 L1026.16 683.42 L1025.6 683.42 L1025.04 683.42 L1024.48 683.42 L1023.92 683.42 L1023.36 683.42 L1022.8 683.42 L1022.24 683.42 L1021.68 683.42 L1021.12 683.42 L1020.56 683.42 L1020.01 683.42 L1019.45 683.42 L1018.89 683.42 L1018.33 683.42 L1017.77 683.42 L1017.21 683.42 L1016.65 683.42 L1016.09 683.42 L1015.53 683.42 L1014.97 683.42 L1014.41 683.42 L1013.85 683.42 L1013.29 683.42 L1012.73 683.42 L1012.18 683.42 L1011.62 683.42 L1011.06 683.42 L1010.5 683.42 L1009.94 683.42 L1009.38 683.42 L1008.82 683.42 L1008.26 683.42 L1007.7 683.42 L1007.14 683.42 L1006.58 683.42 L1006.02 683.42 L1005.46 683.42 L1004.91 683.42 L1004.35 683.42 L1003.79 683.42 L1003.23 683.42 L1002.67 683.42 L1002.11 683.42 L1001.55 683.42 L1000.99 683.42 L1000.43 683.42 L999.872 683.42 L999.313 683.42 L998.754 683.42 L998.194 683.42 L997.635 683.42 L997.076 683.42 L996.517 683.42 L995.957 683.42 L995.398 683.42 L994.839 683.42 L994.28 683.42 L993.72 683.42 L993.161 683.42 L992.602 683.42 L992.043 683.42 L991.483 683.42 L990.924 683.42 L990.365 683.42 L989.806 683.42 L989.246 683.42 L988.687 683.42 L988.128 683.42 L987.569 683.42 L987.009 683.42 L986.45 683.42 L985.891 683.42 L985.332 683.42 L984.772 683.42 L984.213 683.42 L983.654 683.42 L983.095 683.42 L982.535 683.42 L981.976 683.42 L981.417 683.42 L980.858 683.42 L980.298 683.42 L979.739 683.42 L979.18 683.42 L978.621 683.42 L978.061 683.42 L977.502 683.42 L976.943 683.42 L976.384 683.42 L975.824 683.42 L975.265 683.42 L974.706 683.42 L974.147 683.42 L973.587 683.42 L973.028 683.42 L972.469 683.42 L971.91 683.42 L971.35 683.42 L970.791 683.42 L970.232 683.42 L969.673 683.42 L969.113 683.42 L968.554 683.42 L967.995 683.42 L967.436 683.42 L966.876 683.42 L966.317 683.42 L965.758 683.42 L965.199 683.42 L964.639 683.42 L964.08 683.42 L963.521 683.42 L962.962 683.42 L962.402 683.42 L961.843 683.42 L961.284 683.42 L960.725 683.42 L960.165 683.42 L959.606 683.42 L959.047 683.42 L958.488 683.42 L957.928 683.42 L957.369 683.42 L956.81 683.42 L956.251 683.42 L955.691 683.42 L955.132 683.42 L954.573 683.42 L954.014 683.42 L953.454 683.42 L952.895 683.42 L952.336 683.42 L951.777 683.42 L951.217 683.42 L950.658 683.42 L950.099 683.42 L949.54 683.42 L948.98 683.42 L948.421 683.42 L947.862 683.42 L947.303 683.42 L946.743 683.42 L946.184 683.42 L945.625 683.42 L945.066 683.42 L944.506 683.42 L943.947 683.42 L943.388 683.42 L942.829 683.42 L942.269 683.42 L941.71 683.42 L941.151 683.42 L940.592 683.42 L940.032 683.42 L939.473 683.42 L938.914 683.42 L938.355 683.42 L937.795 683.42 L937.236 683.42 L936.677 683.42 L936.118 683.42 L935.558 683.42 L934.999 683.42 L934.44 683.42 L933.881 683.42 L933.321 683.42 L932.762 683.42 L932.203 683.42 L931.644 683.42 L931.084 683.42 L930.525 683.42 L929.966 683.42 L929.406 683.42 L928.847 683.42 L928.288 683.42 L927.729 683.42 L927.169 683.42 L926.61 683.42 L926.051 683.42 L925.492 683.42 L924.932 683.42 L924.373 683.42 L923.814 683.42 L923.255 683.42 L922.695 683.42 L922.136 683.42 L921.577 683.42 L921.018 683.42 L920.458 683.42 L919.899 683.42 L919.34 683.42 L918.781 683.42 L918.221 683.42 L917.662 683.42 L917.103 683.42 L916.544 683.42 L915.984 683.42 L915.425 683.42 L914.866 683.42 L914.307 683.42 L913.747 683.42 L913.188 683.42 L912.629 683.42 L912.07 683.42 L911.51 683.42 L910.951 683.42 L910.392 683.42 L909.833 683.42 L909.273 683.42 L908.714 683.42 L908.155 683.42 L907.596 683.42 L907.036 683.42 L906.477 683.42 L905.918 683.42 L905.359 683.42 L904.799 683.42 L904.24 683.42 L903.681 683.42 L903.122 683.42 L902.562 683.42 L902.003 683.42 L901.444 683.42 L900.885 683.42 L900.325 683.42 L899.766 683.42 L899.207 683.42 L898.648 683.42 L898.088 683.42 L897.529 683.42 L896.97 683.42 L896.411 683.42 L895.851 683.42 L895.292 683.42 L894.733 683.42 L894.174 683.42 L893.614 683.42 L893.055 683.42 L892.496 683.42 L891.937 683.42 L891.377 683.42 L890.818 683.42 L890.259 683.42 L889.7 683.42 L889.14 683.42 L888.581 683.42 L888.022 683.42 L887.463 683.42 L886.903 683.42 L886.344 683.42 L885.785 683.42 L885.226 683.42 L884.666 683.42 L884.107 683.42 L883.548 683.42 L882.989 683.42 L882.429 683.42 L881.87 683.42 L881.311 683.42 L880.752 683.42 L880.192 683.42 L879.633 683.42 L879.074 683.42 L878.515 683.42 L877.955 683.42 L877.396 683.42 L876.837 683.42 L876.278 683.42 L875.718 683.42 L875.159 683.42 L874.6 683.42 L874.041 683.42 L873.481 683.42 L872.922 683.42 L872.363 683.42 L871.804 683.42 L871.244 683.42 L870.685 683.42 L870.126 683.42 L869.567 683.42 L869.007 683.42 L868.448 683.42 L867.889 683.42 L867.33 683.42 L866.77 683.42 L866.211 683.42 L865.652 683.42 L865.093 683.42 L864.533 683.42 L863.974 683.42 L863.415 683.42 L862.856 683.42 L862.296 683.42 L861.737 683.42 L861.178 683.42 L860.619 683.42 L860.059 683.42 L859.5 683.42 L858.941 683.42 L858.382 683.42 L857.822 683.42 L857.263 683.42 L856.704 683.42 L856.145 683.42 L855.585 683.42 L855.026 683.42 L854.467 683.42 L853.908 683.42 L853.348 683.42 L852.789 683.42 L852.23 683.42 L851.671 683.42 L851.111 683.42 L850.552 683.42 L849.993 683.42 L849.434 683.42 L848.874 683.42 L848.315 683.42 L847.756 683.42 L847.197 683.42 L846.637 683.42 L846.078 683.42 L845.519 683.42 L844.96 683.42 L844.4 683.42 L843.841 683.42 L843.282 683.42 L842.723 683.42 L842.163 683.42 L841.604 683.42 L841.045 683.42 L840.486 683.42 L839.926 683.42 L839.367 683.42 L838.808 683.42 L838.249 683.42 L837.689 683.42 L837.13 683.42 L836.571 683.42 L836.012 683.42 L835.452 683.42 L834.893 683.42 L834.334 683.42 L833.775 683.42 L833.215 683.42 L832.656 683.42 L832.097 683.42 L831.538 683.42 L830.978 683.42 L830.419 683.42 L829.86 683.42 L829.301 683.42 L828.741 683.42 L828.182 683.42 L827.623 683.42 L827.064 683.42 L826.504 683.42 L825.945 683.42 L825.386 683.42 L824.827 683.42 L824.267 683.42 L823.708 683.42 L823.149 683.42 L822.59 683.42 L822.03 683.42 L821.471 683.42 L820.912 683.42 L820.353 683.42 L819.793 683.42 L819.234 683.42 L818.675 683.42 L818.116 683.42 L817.556 683.42 L816.997 683.42 L816.438 683.42 L815.879 683.42 L815.319 683.42 L814.76 683.42 L814.201 683.42 L813.642 683.42 L813.082 683.42 L812.523 683.42 L811.964 683.42 L811.405 683.42 L810.845 683.42 L810.286 683.42 L809.727 683.42 L809.168 683.42 L808.608 683.42 L808.049 683.42 L807.49 683.42 L806.931 683.42 L806.371 683.42 L805.812 683.42 L805.253 683.42 L804.693 683.42 L804.134 683.42 L803.575 683.42 L803.016 683.42 L802.456 683.42 L801.897 683.42 L801.338 683.42 L800.779 683.42 L800.219 683.42 L799.66 683.42 L799.101 683.42 L798.542 683.42 L797.982 683.42 L797.423 683.42 L796.864 683.42 L796.305 683.42 L795.745 683.42 L795.186 683.42 L794.627 683.42 L794.068 683.42 L793.508 683.42 L792.949 683.42 L792.39 683.42 L791.831 683.42 L791.271 683.42 L790.712 683.42 L790.153 683.42 L789.594 683.42 L789.034 683.42 L788.475 683.42 L787.916 683.42 L787.357 683.42 L786.797 683.42 L786.238 683.42 L785.679 683.42 L785.12 683.42 L784.56 683.42 L784.001 683.42 L783.442 683.42 L782.883 683.42 L782.323 683.42 L781.764 683.42 L781.205 683.42 L780.646 683.42 L780.086 683.42 L779.527 683.42 L778.968 683.42 L778.409 683.42 L777.849 683.42 L777.29 683.42 L776.731 683.42 L776.172 683.42 L775.612 683.42 L775.053 683.42 L774.494 683.42 L773.935 683.42 L773.375 683.42 L772.816 683.42 L772.257 683.42 L771.698 683.42 L771.138 683.42 L770.579 683.42 L770.02 683.42 L769.461 683.42 L768.901 683.42 L768.342 683.42 L767.783 683.42 L767.224 683.42 L766.664 683.42 L766.105 683.42 L765.546 683.42 L764.987 683.42 L764.427 683.42 L763.868 683.42 L763.309 683.42 L762.75 683.42 L762.19 683.42 L761.631 683.42 L761.072 683.42 L760.513 683.42 L759.953 683.42 L759.394 683.42 L758.835 683.42 L758.276 683.42 L757.716 683.42 L757.157 683.42 L756.598 683.42 L756.039 683.42 L755.479 683.42 L754.92 683.42 L754.361 683.42 L753.802 683.42 L753.242 683.42 L752.683 683.42 L752.124 683.42 L751.565 683.42 L751.005 683.42 L750.446 683.42 L749.887 683.42 L749.328 683.42 L748.768 683.42 L748.209 683.42 L747.65 683.42 L747.091 683.42 L746.531 683.42 L745.972 683.42 L745.413 683.42 L744.854 683.42 L744.294 683.42 L743.735 683.42 L743.176 683.42 L742.617 683.42 L742.057 683.42 L741.498 683.42 L740.939 683.42 L740.38 683.42 L739.82 683.42 L739.261 683.42 L738.702 683.42 L738.143 683.42 L737.583 683.42 L737.024 683.42 L736.465 683.42 L735.906 683.42 L735.346 683.42 L734.787 683.42 L734.228 683.42 L733.669 683.42 L733.109 683.42 L732.55 683.42 L731.991 683.42 L731.432 683.42 L730.872 683.42 L730.313 683.42 L729.754 683.42 L729.195 683.42 L728.635 683.42 L728.076 683.42 L727.517 683.42 L726.958 683.42 L726.398 683.42 L725.839 683.42 L725.28 683.42 L724.721 683.42 L724.161 683.42 L723.602 683.42 L723.043 683.42 L722.484 683.42 L721.924 683.42 L721.365 683.42 L720.806 683.42 L720.247 683.42  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip433)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,684.292 720.806,684.292 721.365,684.292 721.924,684.292 722.484,684.292 723.043,684.292 723.602,684.292 724.161,684.292 724.721,684.292 725.28,684.292 725.839,684.292 726.398,684.292 726.958,684.292 727.517,684.292 728.076,684.292 728.635,684.292 729.195,684.292 729.754,684.292 730.313,684.292 730.872,684.292 731.432,684.292 731.991,684.292 732.55,684.292 733.109,684.292 733.669,684.292 734.228,684.292 734.787,684.292 735.346,684.292 735.906,684.292 736.465,684.292 737.024,684.292 737.583,684.292 738.143,684.292 738.702,684.292 739.261,684.292 739.82,684.292 740.38,684.292 740.939,684.292 741.498,684.292 742.057,684.292 742.617,684.292 743.176,684.292 743.735,684.292 744.294,684.292 744.854,684.292 745.413,684.292 745.972,684.292 746.531,684.292 747.091,684.292 747.65,684.292 748.209,684.292 748.768,684.292 749.328,684.292 749.887,684.292 750.446,684.292 751.005,684.292 751.565,684.292 752.124,684.292 752.683,684.292 753.242,684.292 753.802,684.292 754.361,684.292 754.92,684.292 755.479,684.292 756.039,684.292 756.598,684.292 757.157,684.292 757.716,684.292 758.276,684.292 758.835,684.292 759.394,684.292 759.953,684.292 760.513,684.292 761.072,684.292 761.631,684.292 762.19,684.292 762.75,684.292 763.309,684.292 763.868,684.292 764.427,684.292 764.987,684.292 765.546,684.292 766.105,684.292 766.664,684.292 767.224,684.292 767.783,684.292 768.342,684.292 768.901,684.292 769.461,684.292 770.02,684.292 770.579,684.292 771.138,684.292 771.698,684.292 772.257,684.292 772.816,684.292 773.375,684.292 773.935,684.292 774.494,684.292 775.053,684.292 775.612,684.292 776.172,684.292 776.731,684.292 777.29,684.292 777.849,684.292 778.409,684.292 778.968,684.292 779.527,684.292 780.086,684.292 780.646,684.292 781.205,684.292 781.764,684.292 782.323,684.292 782.883,684.292 783.442,684.292 784.001,684.292 784.56,684.292 785.12,684.292 785.679,684.292 786.238,684.292 786.797,684.292 787.357,684.292 787.916,684.292 788.475,684.292 789.034,684.292 789.594,684.292 790.153,684.292 790.712,684.292 791.271,684.292 791.831,684.292 792.39,684.292 792.949,684.292 793.508,684.292 794.068,684.292 794.627,684.292 795.186,684.292 795.745,684.292 796.305,684.292 796.864,684.292 797.423,684.292 797.982,684.292 798.542,684.292 799.101,684.292 799.66,684.292 800.219,684.292 800.779,684.292 801.338,684.292 801.897,684.292 802.456,684.292 803.016,684.292 803.575,684.292 804.134,684.292 804.693,684.292 805.253,684.292 805.812,684.292 806.371,684.292 806.931,684.292 807.49,684.292 808.049,684.292 808.608,684.292 809.168,684.292 809.727,684.292 810.286,684.292 810.845,684.292 811.405,684.292 811.964,684.292 812.523,684.292 813.082,684.292 813.642,684.292 814.201,684.292 814.76,684.292 815.319,684.292 815.879,684.292 816.438,684.292 816.997,684.292 817.556,684.292 818.116,684.292 818.675,684.292 819.234,684.292 819.793,684.292 820.353,684.292 820.912,684.292 821.471,684.292 822.03,684.292 822.59,684.292 823.149,684.292 823.708,684.292 824.267,684.292 824.827,684.292 825.386,684.292 825.945,684.292 826.504,684.292 827.064,684.292 827.623,684.292 828.182,684.292 828.741,684.292 829.301,684.292 829.86,684.292 830.419,684.292 830.978,684.292 831.538,684.292 832.097,684.292 832.656,684.292 833.215,684.292 833.775,684.292 834.334,684.292 834.893,684.292 835.452,684.292 836.012,684.292 836.571,684.292 837.13,684.292 837.689,684.292 838.249,684.292 838.808,684.292 839.367,684.292 839.926,684.292 840.486,684.292 841.045,684.292 841.604,684.292 842.163,684.292 842.723,684.292 843.282,684.292 843.841,684.292 844.4,684.292 844.96,684.292 845.519,684.292 846.078,684.292 846.637,684.292 847.197,684.292 847.756,684.292 848.315,684.292 848.874,684.292 849.434,684.292 849.993,684.292 850.552,684.292 851.111,684.292 851.671,684.292 852.23,684.292 852.789,684.292 853.348,684.292 853.908,684.292 854.467,684.292 855.026,684.292 855.585,684.292 856.145,684.292 856.704,684.292 857.263,684.292 857.822,684.292 858.382,684.292 858.941,684.292 859.5,684.292 860.059,684.292 860.619,684.292 861.178,684.292 861.737,684.292 862.296,684.292 862.856,684.292 863.415,684.292 863.974,684.292 864.533,684.292 865.093,684.292 865.652,684.292 866.211,684.292 866.77,684.292 867.33,684.292 867.889,684.292 868.448,684.292 869.007,684.292 869.567,684.292 870.126,684.292 870.685,684.292 871.244,684.292 871.804,684.292 872.363,684.292 872.922,684.292 873.481,684.292 874.041,684.292 874.6,684.292 875.159,684.292 875.718,684.292 876.278,684.292 876.837,684.292 877.396,684.292 877.955,684.292 878.515,684.292 879.074,684.292 879.633,684.292 880.192,684.292 880.752,684.292 881.311,684.292 881.87,684.292 882.429,684.292 882.989,684.292 883.548,684.292 884.107,684.292 884.666,684.292 885.226,684.292 885.785,684.292 886.344,684.292 886.903,684.292 887.463,684.292 888.022,684.292 888.581,684.292 889.14,684.292 889.7,684.292 890.259,684.292 890.818,684.292 891.377,684.292 891.937,684.292 892.496,684.292 893.055,684.292 893.614,684.292 894.174,684.292 894.733,684.292 895.292,684.292 895.851,684.292 896.411,684.292 896.97,684.292 897.529,684.292 898.088,684.292 898.648,684.292 899.207,684.292 899.766,684.292 900.325,684.292 900.885,684.292 901.444,684.292 902.003,684.292 902.562,684.292 903.122,684.292 903.681,684.292 904.24,684.292 904.799,684.292 905.359,684.292 905.918,684.292 906.477,684.292 907.036,684.292 907.596,684.292 908.155,684.292 908.714,684.292 909.273,684.292 909.833,684.292 910.392,684.292 910.951,684.292 911.51,684.292 912.07,684.292 912.629,684.292 913.188,684.292 913.747,684.292 914.307,684.292 914.866,684.292 915.425,684.292 915.984,684.292 916.544,684.292 917.103,684.292 917.662,684.292 918.221,684.292 918.781,684.292 919.34,684.292 919.899,684.292 920.458,684.292 921.018,684.292 921.577,684.292 922.136,684.292 922.695,684.292 923.255,684.292 923.814,684.292 924.373,684.292 924.932,684.292 925.492,684.292 926.051,684.292 926.61,684.292 927.169,684.292 927.729,684.292 928.288,684.292 928.847,684.292 929.406,684.292 929.966,684.292 930.525,684.292 931.084,684.292 931.644,684.292 932.203,684.292 932.762,684.292 933.321,684.292 933.881,684.292 934.44,684.292 934.999,684.292 935.558,684.292 936.118,684.292 936.677,684.292 937.236,684.292 937.795,684.292 938.355,684.292 938.914,684.292 939.473,684.292 940.032,684.292 940.592,684.292 941.151,684.292 941.71,684.292 942.269,684.292 942.829,684.292 943.388,684.292 943.947,684.292 944.506,684.292 945.066,684.292 945.625,684.292 946.184,684.292 946.743,684.292 947.303,684.292 947.862,684.292 948.421,684.292 948.98,684.292 949.54,684.292 950.099,684.292 950.658,684.292 951.217,684.292 951.777,684.292 952.336,684.292 952.895,684.292 953.454,684.292 954.014,684.292 954.573,684.292 955.132,684.292 955.691,684.292 956.251,684.292 956.81,684.292 957.369,684.292 957.928,684.292 958.488,684.292 959.047,684.292 959.606,684.292 960.165,684.292 960.725,684.292 961.284,684.292 961.843,684.292 962.402,684.292 962.962,684.292 963.521,684.292 964.08,684.292 964.639,684.292 965.199,684.292 965.758,684.292 966.317,684.292 966.876,684.292 967.436,684.292 967.995,684.292 968.554,684.292 969.113,684.292 969.673,684.292 970.232,684.292 970.791,684.292 971.35,684.292 971.91,684.292 972.469,684.292 973.028,684.292 973.587,684.292 974.147,684.292 974.706,684.292 975.265,684.292 975.824,684.292 976.384,684.292 976.943,684.292 977.502,684.292 978.061,684.292 978.621,684.292 979.18,684.292 979.739,684.292 980.298,684.292 980.858,684.292 981.417,684.292 981.976,684.292 982.535,684.292 983.095,684.292 983.654,684.292 984.213,684.292 984.772,684.292 985.332,684.292 985.891,684.292 986.45,684.292 987.009,684.292 987.569,684.292 988.128,684.292 988.687,684.292 989.246,684.292 989.806,684.292 990.365,684.292 990.924,684.292 991.483,684.292 992.043,684.292 992.602,684.292 993.161,684.292 993.72,684.292 994.28,684.292 994.839,684.292 995.398,684.292 995.957,684.292 996.517,684.292 997.076,684.292 997.635,684.292 998.194,684.292 998.754,684.292 999.313,684.292 999.872,684.292 1000.43,684.292 1000.99,684.292 1001.55,684.292 1002.11,684.292 1002.67,684.292 1003.23,684.292 1003.79,684.292 1004.35,684.292 1004.91,684.292 1005.46,684.292 1006.02,684.292 1006.58,684.292 1007.14,684.292 1007.7,684.292 1008.26,684.292 1008.82,684.292 1009.38,684.292 1009.94,684.292 1010.5,684.292 1011.06,684.292 1011.62,684.292 1012.18,684.292 1012.73,684.292 1013.29,684.292 1013.85,684.292 1014.41,684.292 1014.97,684.292 1015.53,684.292 1016.09,684.292 1016.65,684.292 1017.21,684.292 1017.77,684.292 1018.33,684.292 1018.89,684.292 1019.45,684.292 1020.01,684.292 1020.56,684.292 1021.12,684.292 1021.68,684.292 1022.24,684.292 1022.8,684.292 1023.36,684.292 1023.92,684.292 1024.48,684.292 1025.04,684.292 1025.6,684.292 1026.16,684.292 1026.72,684.292 1027.28,684.292 1027.83,684.292 1028.39,684.292 1028.95,684.292 1029.51,684.292 1030.07,684.292 1030.63,684.292 1031.19,684.292 1031.75,684.292 1032.31,684.292 1032.87,684.292 1033.43,684.292 1033.99,684.292 1034.55,684.292 1035.1,684.292 1035.66,684.292 1036.22,684.292 1036.78,684.292 1037.34,684.292 1037.9,684.292 1038.46,684.292 1039.02,684.292 1039.58,684.292 1040.14,684.292 1040.7,684.292 1041.26,684.292 1041.82,684.292 1042.38,684.292 1042.93,684.292 1043.49,684.292 1044.05,684.292 1044.61,684.292 1045.17,684.292 1045.73,684.292 1046.29,684.292 1046.85,684.292 1047.41,684.292 1047.97,684.292 1048.53,684.292 1049.09,684.292 1049.65,684.292 1050.2,684.292 1050.76,684.292 1051.32,684.292 1051.88,684.292 1052.44,684.292 1053,684.292 1053.56,684.292 1054.12,684.292 1054.68,684.292 1055.24,684.292 1055.8,684.292 1056.36,684.292 1056.92,684.292 1057.48,684.292 1058.03,684.292 1058.59,684.292 1059.15,684.292 1059.71,684.292 1060.27,684.292 1060.83,684.292 1061.39,684.292 1061.95,684.292 1062.51,684.292 1063.07,684.292 1063.63,684.292 1064.19,684.292 1064.75,684.292 1065.3,684.292 1065.86,684.292 1066.42,684.292 1066.98,684.292 1067.54,684.292 1068.1,684.292 1068.66,684.292 1069.22,684.292 1069.78,684.292 1070.34,684.292 1070.9,684.292 1071.46,684.292 1072.02,684.292 1072.57,684.292 1073.13,684.292 1073.69,684.292 1074.25,684.292 1074.81,684.292 1075.37,684.292 1075.93,684.292 1076.49,684.292 1077.05,684.292 1077.61,684.292 1078.17,684.292 1078.73,684.292 1079.29,684.292 1079.85,684.292 1080.4,684.292 1080.96,684.292 1081.52,684.292 1082.08,684.292 1082.64,684.292 1083.2,684.292 1083.76,684.292 1084.32,684.292 1084.88,684.292 1085.44,684.292 1086,684.292 1086.56,684.292 1087.12,684.292 1087.67,684.292 1088.23,684.292 1088.79,684.292 1089.35,684.292 1089.91,684.292 1090.47,684.292 1091.03,684.292 1091.59,684.292 1092.15,684.292 1092.71,684.292 1093.27,684.292 1093.83,684.292 1094.39,684.292 1094.94,684.292 1095.5,684.292 1096.06,684.292 1096.62,684.292 1097.18,684.292 1097.74,684.292 1098.3,684.292 1098.86,684.292 1099.42,684.292 1099.98,684.292 1100.54,684.292 1101.1,684.292 1101.66,684.292 1102.22,684.292 1102.77,684.292 1103.33,684.292 1103.89,684.292 1104.45,684.292 1105.01,684.292 1105.57,684.292 1106.13,684.292 1106.69,684.292 1107.25,684.292 1107.81,684.292 1108.37,684.292 1108.93,684.292 1109.49,684.292 1110.04,684.292 1110.6,684.292 1111.16,684.292 1111.72,684.292 1112.28,684.292 1112.84,684.292 1113.4,684.292 1113.96,684.292 1114.52,684.292 1115.08,684.292 1115.64,684.292 1116.2,684.292 1116.76,684.292 1117.31,684.292 1117.87,684.292 1118.43,684.292 1118.99,684.292 1119.55,684.292 1120.11,684.292 1120.67,684.292 1121.23,684.292 1121.79,684.292 1122.35,684.292 1122.91,684.292 1123.47,684.292 1124.03,684.292 1124.59,684.292 1125.14,684.292 1125.7,684.292 1126.26,684.292 1126.82,684.292 1127.38,684.292 1127.94,684.292 1128.5,684.292 1129.06,684.292 1129.62,684.292 1130.18,684.292 1130.74,684.292 1131.3,684.292 1131.86,684.292 1132.41,684.292 1132.97,684.292 1133.53,684.292 1134.09,684.292 1134.65,684.292 1135.21,684.292 1135.77,684.292 1136.33,684.292 1136.89,684.292 1137.45,684.292 1138.01,684.292 1138.57,684.292 1139.13,684.292 1139.68,684.292 1140.24,684.292 1140.8,684.292 1141.36,684.292 1141.92,684.292 1142.48,684.292 1143.04,684.292 1143.6,684.292 1144.16,684.292 1144.72,684.292 1145.28,684.292 1145.84,684.292 1146.4,684.292 1146.96,684.292 1147.51,684.292 1148.07,684.292 1148.63,684.292 1149.19,684.292 1149.75,684.292 1150.31,684.292 1150.87,684.292 1151.43,684.292 1151.99,684.292 1152.55,684.292 1153.11,684.292 1153.67,684.292 1154.23,684.292 1154.78,684.292 1155.34,684.292 1155.9,684.292 1156.46,684.292 1157.02,684.292 1157.58,684.292 1158.14,684.292 1158.7,684.292 1159.26,684.292 1159.82,684.292 1160.38,684.292 1160.94,684.292 1161.5,684.292 1162.05,684.292 1162.61,684.292 1163.17,684.292 1163.73,684.292 1164.29,684.292 1164.85,684.292 1165.41,684.292 1165.97,684.292 1166.53,684.292 1167.09,684.292 1167.65,684.292 1168.21,684.292 1168.77,684.292 1169.33,684.292 1169.88,684.292 1170.44,684.292 1171,684.292 1171.56,684.292 1172.12,684.292 1172.68,684.292 1173.24,684.292 1173.8,684.292 1174.36,684.292 1174.92,684.292 1175.48,684.292 1176.04,684.292 1176.6,684.292 1177.15,684.292 1177.71,684.292 1178.27,684.292 1178.83,684.292 1179.39,684.292 1179.95,684.292 1180.51,684.292 1181.07,684.292 1181.63,684.292 1182.19,684.292 1182.75,684.292 1183.31,684.292 1183.87,684.292 1184.43,684.292 1184.98,684.292 1185.54,684.292 1186.1,684.292 1186.66,684.292 1187.22,684.292 1187.78,684.292 1188.34,684.292 1188.9,684.292 1189.46,684.292 1190.02,684.292 1190.58,684.292 1191.14,684.292 1191.7,684.292 1192.25,684.292 1192.81,684.292 1193.37,684.292 1193.93,684.292 1194.49,684.292 1195.05,684.292 1195.61,684.292 1196.17,684.292 1196.73,684.292 1197.29,684.292 1197.85,684.292 1198.41,684.292 1198.97,684.292 1199.52,684.292 1200.08,684.292 1200.64,684.292 1201.2,684.292 1201.76,684.292 1202.32,684.292 1202.88,684.292 1203.44,684.292 1204,684.292 1204.56,684.292 1205.12,684.292 1205.68,684.292 1206.24,684.292 1206.8,684.292 1207.35,684.292 1207.91,684.292 1208.47,684.292 1209.03,684.292 1209.59,684.292 1210.15,684.292 1210.71,684.292 1211.27,684.292 1211.83,684.292 1212.39,684.292 1212.95,684.292 1213.51,684.292 1214.07,684.292 1214.62,684.292 1215.18,684.292 1215.74,684.292 1216.3,684.292 1216.86,684.292 1217.42,684.292 1217.98,684.292 1218.54,684.292 1219.1,684.292 1219.66,684.292 1220.22,684.292 1220.78,684.292 1221.34,684.292 1221.89,684.292 1222.45,684.292 1223.01,684.292 1223.57,684.292 1224.13,684.292 1224.69,684.292 1225.25,684.292 1225.81,684.292 1226.37,684.292 1226.93,684.292 1227.49,684.292 1228.05,684.292 1228.61,684.292 1229.17,684.292 1229.72,684.292 1230.28,684.292 1230.84,684.292 1231.4,684.292 1231.96,684.292 1232.52,684.292 1233.08,684.292 1233.64,684.292 1234.2,684.292 1234.76,684.292 1235.32,684.292 1235.88,684.292 1236.44,684.292 1236.99,684.292 1237.55,684.292 1238.11,684.292 1238.67,684.292 1239.23,684.292 1239.79,684.292 1240.35,684.292 1240.91,684.292 1241.47,684.292 1242.03,684.292 1242.59,684.292 1243.15,684.292 1243.71,684.292 1244.26,684.292 1244.82,684.292 1245.38,684.292 1245.94,684.292 1246.5,684.292 1247.06,684.292 1247.62,684.292 1248.18,684.292 1248.74,684.292 1249.3,684.292 1249.86,684.292 1250.42,684.292 1250.98,684.292 1251.54,684.292 1252.09,684.292 1252.65,684.292 1253.21,684.292 1253.77,684.292 1254.33,684.292 1254.89,684.292 1255.45,684.292 1256.01,684.292 1256.57,684.292 1257.13,684.292 1257.69,684.292 1258.25,684.292 1258.81,684.292 1259.36,684.292 1259.92,684.292 1260.48,684.292 1261.04,684.292 1261.6,684.292 1262.16,684.292 1262.72,684.292 1263.28,684.292 1263.84,684.292 1264.4,684.292 1264.96,684.292 1265.52,684.292 1266.08,684.292 1266.63,684.292 1267.19,684.292 1267.75,684.292 1268.31,684.292 1268.87,684.292 1269.43,684.292 1269.99,684.292 1270.55,684.292 1271.11,684.292 1271.67,684.292 1272.23,684.292 1272.79,684.292 1273.35,684.292 1273.91,684.292 1274.46,684.292 1275.02,684.292 1275.58,684.292 1276.14,684.292 1276.7,684.292 1277.26,684.292 1277.82,684.292 1278.38,684.292 1278.94,684.292 1279.5,684.292 1280.06,684.292 1280.62,684.292 1281.18,684.292 1281.73,684.292 1282.29,684.292 1282.85,684.292 1283.41,684.292 1283.97,684.292 1284.53,684.292 1285.09,684.292 1285.65,684.292 1286.21,684.292 1286.77,684.292 1287.33,684.292 1287.89,684.292 1288.45,684.292 1289,684.292 1289.56,684.292 1290.12,684.292 1290.68,684.292 1291.24,684.292 1291.8,684.292 1292.36,684.292 1292.92,684.292 1293.48,684.292 1294.04,684.292 1294.6,684.292 1295.16,684.292 1295.72,684.292 1296.28,684.292 1296.83,684.292 1297.39,684.292 1297.95,684.292 1298.51,684.292 1299.07,684.292 1299.63,684.292 1300.19,684.292 1300.75,684.292 1301.31,684.292 1301.87,684.292 1302.43,684.292 1302.99,684.292 1303.55,684.292 1304.1,684.292 1304.66,684.292 1305.22,684.292 1305.78,684.292 1306.34,684.292 1306.9,684.292 1307.46,684.292 1308.02,684.292 1308.58,684.292 1309.14,684.292 1309.7,684.292 1310.26,684.292 1310.82,684.292 1311.38,684.292 1311.93,684.292 1312.49,684.292 1313.05,684.292 1313.61,684.292 1314.17,684.292 1314.73,684.292 1315.29,684.292 1315.85,684.292 1316.41,684.292 1316.97,684.292 1317.53,684.292 1318.09,684.292 1318.65,684.292 1319.2,684.292 1319.76,684.292 1320.32,684.292 1320.88,684.292 1321.44,684.292 1322,684.292 1322.56,684.292 1323.12,684.292 1323.68,684.292 1324.24,684.292 1324.8,684.292 1325.36,684.292 1325.92,684.292 1326.47,684.292 1327.03,684.292 1327.59,684.292 1328.15,684.292 1328.71,684.292 1329.27,684.292 1329.83,684.292 1330.39,684.292 1330.95,684.292 1331.51,684.292 1332.07,684.292 1332.63,684.292 1333.19,684.292 1333.75,684.292 1334.3,684.292 1334.86,684.292 1335.42,684.292 1335.98,684.292 1336.54,684.292 1337.1,684.292 1337.66,684.292 1338.22,684.292 1338.78,684.292 1339.34,684.292 1339.9,684.292 1340.46,684.292 1341.02,684.292 1341.57,684.292 1342.13,684.292 1342.69,684.292 1343.25,684.292 1343.81,684.292 1344.37,684.292 1344.93,684.292 1345.49,684.292 1346.05,684.292 1346.61,684.292 1347.17,684.292 1347.73,684.292 1348.29,684.292 1348.84,684.292 1349.4,684.292 1349.96,684.292 1350.52,684.292 1351.08,684.292 1351.64,684.292 1352.2,684.292 1352.76,684.292 1353.32,684.292 1353.88,684.292 1354.44,684.292 1355,684.292 1355.56,684.292 1356.12,684.292 1356.67,684.292 1357.23,684.292 1357.79,684.292 1358.35,684.292 1358.91,684.292 1359.47,684.292 1360.03,684.292 1360.59,684.292 1361.15,684.292 1361.71,684.292 1362.27,684.292 1362.83,684.292 1363.39,684.292 1363.94,684.292 1364.5,684.292 1365.06,684.292 1365.62,684.292 1366.18,684.292 1366.74,684.292 1367.3,684.292 1367.86,684.292 1368.42,684.292 1368.98,684.292 1369.54,684.292 1370.1,684.292 1370.66,684.292 1371.21,684.292 1371.77,684.292 1372.33,684.292 1372.89,684.292 1373.45,684.292 1374.01,684.292 1374.57,684.292 1375.13,684.292 1375.69,684.292 1376.25,684.292 1376.81,684.292 1377.37,684.292 1377.93,684.292 1378.49,684.292 1379.04,684.292 1379.6,684.292 1380.16,684.292 1380.72,684.292 1381.28,684.292 1381.84,684.292 1382.4,684.292 1382.96,684.292 1383.52,684.292 1384.08,684.292 1384.64,684.292 1385.2,684.292 1385.76,684.292 1386.31,684.292 1386.87,684.292 1387.43,684.292 1387.99,684.292 1388.55,684.292 1389.11,684.292 1389.67,684.292 1390.23,684.292 1390.79,684.292 1391.35,684.292 1391.91,684.292 1392.47,684.292 1393.03,684.292 1393.58,684.292 1394.14,684.292 1394.7,684.292 1395.26,684.292 1395.82,684.292 1396.38,684.292 1396.94,684.292 1397.5,684.292 1398.06,684.292 1398.62,684.292 1399.18,684.292 1399.74,684.292 1400.3,684.292 1400.86,684.292 1401.41,684.292 1401.97,684.292 1402.53,684.292 1403.09,684.292 1403.65,684.292 1404.21,684.292 1404.77,684.292 1405.33,684.292 1405.89,684.292 1406.45,684.292 1407.01,684.292 1407.57,684.292 1408.13,684.292 1408.68,684.292 1409.24,684.292 1409.8,684.292 1410.36,684.292 1410.92,684.292 1411.48,684.292 1412.04,684.292 1412.6,684.292 1413.16,684.292 1413.72,684.292 1414.28,684.292 1414.84,684.292 1415.4,684.292 1415.95,684.292 1416.51,684.292 1417.07,684.292 1417.63,684.292 1418.19,684.292 1418.75,684.292 1419.31,684.292 1419.87,684.292 1420.43,684.292 1420.99,684.292 1421.55,684.292 1422.11,684.292 1422.67,684.292 1423.23,684.292 1423.78,684.292 1424.34,684.292 1424.9,684.292 1425.46,684.292 1426.02,684.292 1426.58,684.292 1427.14,684.292 1427.7,684.292 1428.26,684.292 1428.82,684.292 1429.38,684.292 1429.94,684.292 1430.5,684.292 1431.05,684.292 1431.61,684.292 1432.17,684.292 1432.73,684.292 1433.29,684.292 1433.85,684.292 1434.41,684.292 1434.97,684.292 1435.53,684.292 1436.09,684.292 1436.65,684.292 1437.21,684.292 1437.77,684.292 1438.33,684.292 1438.88,684.292 1439.44,684.292 1440,684.292 1440.56,684.292 1441.12,684.292 1441.68,684.292 1442.24,684.292 1442.8,684.292 1443.36,684.292 1443.92,684.292 1444.48,684.292 1445.04,684.292 1445.6,684.292 1446.15,684.292 1446.71,684.292 1447.27,684.292 1447.83,684.292 1448.39,684.292 1448.95,684.292 1449.51,684.292 1450.07,684.292 1450.63,684.292 1451.19,684.292 1451.75,684.292 1452.31,684.292 1452.87,684.292 1453.42,684.292 1453.98,684.292 1454.54,684.292 1455.1,684.292 1455.66,684.292 1456.22,684.292 1456.78,684.292 1457.34,684.292 1457.9,684.292 1458.46,684.292 1459.02,684.292 1459.58,684.292 1460.14,684.292 1460.7,684.292 1461.25,684.292 1461.81,684.292 1462.37,684.292 1462.93,684.292 1463.49,684.292 1464.05,684.292 1464.61,684.292 1465.17,684.292 1465.73,684.292 1466.29,684.292 1466.85,684.292 1467.41,684.292 1467.97,684.292 1468.52,684.292 1469.08,684.292 1469.64,684.292 1470.2,684.292 1470.76,684.292 1471.32,684.292 1471.88,684.292 1472.44,684.292 1473,684.292 1473.56,684.292 1474.12,684.292 1474.68,684.292 1475.24,684.292 1475.79,684.292 1476.35,684.292 1476.91,684.292 1477.47,684.292 1478.03,684.292 1478.59,684.292 1479.15,684.292 1479.71,684.292 1480.27,684.292 1480.83,684.292 1481.39,684.292 1481.95,684.292 1482.51,684.292 1483.07,684.292 1483.62,684.292 1484.18,684.292 1484.74,684.292 1485.3,684.292 1485.86,684.292 1486.42,684.292 1486.98,684.292 1487.54,684.292 1488.1,684.292 1488.66,684.292 1489.22,684.292 1489.78,684.292 1490.34,684.292 1490.89,684.292 1491.45,684.292 1492.01,684.292 1492.57,684.292 1493.13,684.292 1493.69,684.292 1494.25,684.292 1494.81,684.292 1495.37,684.292 1495.93,684.292 1496.49,684.292 1497.05,684.292 1497.61,684.292 1498.16,684.292 1498.72,684.292 1499.28,684.292 1499.84,684.292 1500.4,684.292 1500.96,684.292 1501.52,684.292 1502.08,684.292 1502.64,684.292 1503.2,684.292 1503.76,684.292 1504.32,684.292 1504.88,684.292 1505.44,684.292 1505.99,684.292 1506.55,684.292 1507.11,684.292 1507.67,684.292 1508.23,684.292 1508.79,684.292 1509.35,684.292 1509.91,684.292 1510.47,684.292 1511.03,684.292 1511.59,684.292 1512.15,684.292 1512.71,684.292 1513.26,684.292 1513.82,684.292 1514.38,684.292 1514.94,684.292 1515.5,684.292 1516.06,684.292 1516.62,684.292 1517.18,684.292 1517.74,684.292 1518.3,684.292 1518.86,684.292 1519.42,684.292 1519.98,684.292 1520.53,684.292 1521.09,684.292 1521.65,684.292 1522.21,684.292 1522.77,684.292 1523.33,684.292 1523.89,684.292 1524.45,684.292 1525.01,684.292 1525.57,684.292 1526.13,684.292 1526.69,684.292 1527.25,684.292 1527.81,684.292 1528.36,684.292 1528.92,684.292 1529.48,684.292 1530.04,684.292 1530.6,684.292 1531.16,684.292 1531.72,684.292 1532.28,684.292 1532.84,684.292 1533.4,684.292 1533.96,684.292 1534.52,684.292 1535.08,684.292 1535.63,684.292 1536.19,684.292 1536.75,684.292 1537.31,684.292 1537.87,684.292 1538.43,684.292 1538.99,684.292 1539.55,684.292 1540.11,684.292 1540.67,684.292 1541.23,684.292 1541.79,684.292 1542.35,684.292 1542.9,684.292 1543.46,684.292 1544.02,684.292 1544.58,684.292 1545.14,684.292 1545.7,684.292 1546.26,684.292 1546.82,684.292 1547.38,684.292 1547.94,684.292 1548.5,684.292 1549.06,684.292 1549.62,684.292 1550.18,684.292 1550.73,684.292 1551.29,684.292 1551.85,684.292 1552.41,684.292 1552.97,684.292 1553.53,684.292 1554.09,684.292 1554.65,684.292 1555.21,684.292 1555.77,684.292 1556.33,684.292 1556.89,684.292 1557.45,684.292 1558,684.292 1558.56,684.292 1559.12,684.292 1559.68,684.292 1560.24,684.292 1560.8,684.292 1561.36,684.292 1561.92,684.292 1562.48,684.292 1563.04,684.292 1563.6,684.292 1564.16,684.292 1564.72,684.292 1565.28,684.292 1565.83,684.292 1566.39,684.292 1566.95,684.292 1567.51,684.292 1568.07,684.292 1568.63,684.292 1569.19,684.292 1569.75,684.292 1570.31,684.292 1570.87,684.292 1571.43,684.292 1571.99,684.292 1572.55,684.292 1573.1,684.292 1573.66,684.292 1574.22,684.292 1574.78,684.292 1575.34,684.292 1575.9,684.292 1576.46,684.292 1577.02,684.292 1577.58,684.292 1578.14,684.292 1578.7,684.292 1579.26,684.292 1579.82,684.292 1580.37,684.292 1580.93,684.292 1581.49,684.292 1582.05,684.292 1582.61,684.292 1583.17,684.292 1583.73,684.292 1584.29,684.292 1584.85,684.292 1585.41,684.292 1585.97,684.292 1586.53,684.292 1587.09,684.292 1587.65,684.292 1588.2,684.292 1588.76,684.292 1589.32,684.292 1589.88,684.292 1590.44,684.292 1591,684.292 1591.56,684.292 1592.12,684.292 1592.68,684.292 1593.24,684.292 1593.8,684.292 1594.36,684.292 1594.92,684.292 1595.47,684.292 1596.03,684.292 1596.59,684.292 1597.15,684.292 1597.71,684.292 1598.27,684.292 1598.83,684.292 1599.39,684.292 1599.95,684.292 1600.51,684.292 1601.07,684.292 1601.63,684.292 1602.19,684.292 1602.74,684.292 1603.3,684.292 1603.86,684.292 1604.42,684.292 1604.98,684.292 1605.54,684.292 1606.1,684.292 1606.66,684.292 1607.22,684.292 1607.78,684.292 1608.34,684.292 1608.9,684.292 1609.46,684.292 1610.02,684.292 1610.57,684.292 1611.13,684.292 1611.69,684.292 1612.25,684.292 1612.81,684.292 1613.37,684.292 1613.93,684.292 1614.49,684.292 1615.05,684.292 1615.61,684.292 1616.17,684.292 1616.73,684.292 1617.29,684.292 1617.84,684.292 1618.4,684.292 1618.96,684.292 1619.52,684.292 1620.08,684.292 1620.64,684.292 1621.2,684.292 1621.76,684.292 1622.32,684.292 1622.88,684.292 1623.44,684.292 1624,684.292 1624.56,684.292 1625.11,684.292 1625.67,684.292 1626.23,684.292 1626.79,684.292 1627.35,684.292 1627.91,684.292 1628.47,684.292 1629.03,684.292 1629.59,684.292 1630.15,684.292 1630.71,684.292 1631.27,684.292 1631.83,684.292 1632.39,684.292 1632.94,684.292 1633.5,684.292 1634.06,684.292 1634.62,684.292 1635.18,684.292 1635.74,684.292 1636.3,684.292 1636.86,684.292 1637.42,684.292 1637.98,684.292 1638.54,684.292 1639.1,684.292 1639.66,684.292 1640.21,684.292 1640.77,684.292 1641.33,684.292 1641.89,684.292 1642.45,684.292 1643.01,684.292 1643.57,684.292 1644.13,684.292 1644.69,684.292 1645.25,684.292 1645.81,684.292 1646.37,684.292 1646.93,684.292 1647.48,684.292 1648.04,684.292 1648.6,684.292 1649.16,684.292 1649.72,684.292 1650.28,684.292 1650.84,684.292 1651.4,684.292 1651.96,684.292 1652.52,684.292 1653.08,684.292 1653.64,684.292 1654.2,684.292 1654.76,684.292 1655.31,684.292 1655.87,684.292 1656.43,684.292 1656.99,684.292 1657.55,684.292 1658.11,684.292 1658.67,684.292 1659.23,684.292 1659.79,684.292 1660.35,684.292 1660.91,684.292 1661.47,684.292 1662.03,684.292 1662.58,684.292 1663.14,684.292 1663.7,684.292 1664.26,684.292 1664.82,684.292 1665.38,684.292 1665.94,684.292 1666.5,684.292 1667.06,684.292 1667.62,684.292 1668.18,684.292 1668.74,684.292 1669.3,684.292 1669.85,684.292 1670.41,684.292 1670.97,684.292 1671.53,684.292 1672.09,684.292 1672.65,684.292 1673.21,684.292 1673.77,684.292 1674.33,684.292 1674.89,684.292 1675.45,684.292 1676.01,684.292 1676.57,684.292 1677.13,684.292 1677.68,684.292 1678.24,684.292 1678.8,684.292 1679.36,684.292 1679.92,684.292 1680.48,684.292 1681.04,684.292 1681.6,684.292 1682.16,684.292 1682.72,684.292 1683.28,684.292 1683.84,684.292 1684.4,684.292 1684.95,684.292 1685.51,684.292 1686.07,684.292 1686.63,684.292 1687.19,684.292 1687.75,684.292 1688.31,684.292 1688.87,684.292 1689.43,684.292 1689.99,684.292 1690.55,684.292 1691.11,684.292 1691.67,684.292 1692.23,684.292 1692.78,684.292 1693.34,684.292 1693.9,684.292 1694.46,684.292 1695.02,684.292 1695.58,684.292 1696.14,684.292 1696.7,684.292 1697.26,684.292 1697.82,684.292 1698.38,684.292 1698.94,684.292 1699.5,684.292 1700.05,684.292 1700.61,684.292 1701.17,684.292 1701.73,684.292 1702.29,684.292 1702.85,684.292 1703.41,684.292 1703.97,684.292 1704.53,684.292 1705.09,684.292 1705.65,684.292 1706.21,684.292 1706.77,684.292 1707.32,684.292 1707.88,684.292 1708.44,684.292 1709,684.292 1709.56,684.292 1710.12,684.292 1710.68,684.292 1711.24,684.292 1711.8,684.292 1712.36,684.292 1712.92,684.292 1713.48,684.292 1714.04,684.292 1714.6,684.292 1715.15,684.292 1715.71,684.292 1716.27,684.292 1716.83,684.292 1717.39,684.292 1717.95,684.292 1718.51,684.292 1719.07,684.292 1719.63,684.292 1720.19,684.292 1720.75,684.292 1721.31,684.292 1721.87,684.292 1722.42,684.292 1722.98,684.292 1723.54,684.292 1724.1,684.292 1724.66,684.292 1725.22,684.292 1725.78,684.292 1726.34,684.292 1726.9,684.292 1727.46,684.292 1728.02,684.292 1728.58,684.292 1729.14,684.292 1729.69,684.292 1730.25,684.292 1730.81,684.292 1731.37,684.292 1731.93,684.292 1732.49,684.292 1733.05,684.292 1733.61,684.292 1734.17,684.292 1734.73,684.292 1735.29,684.292 1735.85,684.292 1736.41,684.292 1736.97,684.292 1737.52,684.292 1738.08,684.292 1738.64,684.292 1739.2,684.292 1739.76,684.292 1740.32,684.292 1740.88,684.292 1741.44,684.292 1742,684.292 1742.56,684.292 1743.12,684.292 1743.68,684.292 1744.24,684.292 1744.79,684.292 1745.35,684.292 1745.91,684.292 1746.47,684.292 1747.03,684.292 1747.59,684.292 1748.15,684.292 1748.71,684.292 1749.27,684.292 1749.83,684.292 1750.39,684.292 1750.95,684.292 1751.51,684.292 1752.06,684.292 1752.62,684.292 1753.18,684.292 1753.74,684.292 1754.3,684.292 1754.86,684.292 1755.42,684.292 1755.98,684.292 1756.54,684.292 1757.1,684.292 1757.66,684.292 1758.22,684.292 1758.78,684.292 1759.34,684.292 1759.89,684.292 1760.45,684.292 1761.01,684.292 1761.57,684.292 1762.13,684.292 1762.69,684.292 1763.25,684.292 1763.81,684.292 1764.37,684.292 1764.93,684.292 1765.49,684.292 1766.05,684.292 1766.61,684.292 1767.16,684.292 1767.72,684.292 1768.28,684.292 1768.84,684.292 1769.4,684.292 1769.96,684.292 1770.52,684.292 1771.08,684.292 1771.64,684.292 1772.2,684.292 1772.76,684.292 1773.32,684.292 1773.88,684.292 1774.43,684.292 1774.99,684.292 1775.55,684.292 1776.11,684.292 1776.67,684.292 1777.23,684.292 1777.79,684.292 1778.35,684.292 1778.91,684.292 1779.47,684.292 1780.03,684.292 1780.59,684.292 1781.15,684.292 1781.71,684.292 1782.26,684.292 1782.82,684.292 1783.38,684.292 1783.94,684.292 1784.5,684.292 1785.06,684.292 1785.62,684.292 1786.18,684.292 1786.74,684.292 1787.3,684.292 1787.86,684.292 1788.42,684.292 1788.98,684.292 1789.53,684.292 1790.09,684.292 1790.65,684.292 1791.21,684.292 1791.77,684.292 1792.33,684.292 1792.89,684.292 1793.45,684.292 1794.01,684.292 1794.57,684.292 1795.13,684.292 1795.69,684.292 1796.25,684.292 1796.8,684.292 1797.36,684.292 1797.92,684.292 1798.48,684.292 1799.04,684.292 1799.6,684.292 1800.16,684.292 1800.72,684.292 1801.28,684.292 1801.84,684.292 1802.4,684.292 1802.96,684.292 1803.52,684.292 1804.08,684.292 1804.63,684.292 1805.19,684.292 1805.75,684.292 1806.31,684.292 1806.87,684.292 1807.43,684.292 1807.99,684.292 1808.55,684.292 1809.11,684.292 1809.67,684.292 1810.23,684.292 1810.79,684.292 1811.35,684.292 1811.9,684.292 1812.46,684.292 1813.02,684.292 1813.58,684.292 1814.14,684.292 1814.7,684.292 1815.26,684.292 1815.82,684.292 1816.38,684.292 1816.94,684.292 1817.5,684.292 1818.06,684.292 1818.62,684.292 1819.18,684.292 1819.73,684.292 1820.29,684.292 1820.85,684.292 1821.41,684.292 1821.97,684.292 1822.53,684.292 1823.09,684.292 1823.65,684.292 1824.21,684.292 1824.77,684.292 1825.33,684.292 1825.89,684.292 1826.45,684.292 1827,684.292 1827.56,684.292 1828.12,684.292 1828.68,684.292 1829.24,684.292 1829.8,684.292 1830.36,684.292 1830.92,684.292 1831.48,684.292 1832.04,684.292 1832.6,684.292 1833.16,684.292 1833.72,684.292 1834.27,684.292 1834.83,684.292 1835.39,684.292 1835.95,684.292 1836.51,684.292 1837.07,684.292 1837.63,684.292 1838.19,684.292 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906472","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $targetwalkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.036800814227262 ± 0.0225708387872555\nProjected Energy: -4.018647980683187 ± (0.0046436908091509466, 0.004392889154938295)\nExact Energy: -4.021502406906472\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from lomc! as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b]; shift=:shift, norm=:norm, dτ=df.dτ[end], skip=0)\n\nCalculate the growth witness directly from a DataFrame returned by lomc!. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0) -> g\ngrowth_witness(df::DataFrame, [b]; skip=0) -> g\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, dτ;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n) -> r::RatioBlockingResult\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    dτ=df.dτ[end],\n    kwargs...\n) -> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively. Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means(). dτ is the time step and weights a function that calulates the weights. See w_exp() and w_lin().\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m)\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator. Error propagation is done with MonteCarloMeasurements. Progagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a DataFrame returned by lomc!. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator() and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\n-> (;df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df returned from lomc! repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\ndf, _ = lomc!(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(df; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-Tuple{AbstractVector, AbstractVector, AbstractVector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, dτ;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n) -> r::RatioBlockingResult\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    dτ=df.dτ[end],\n    kwargs...\n)\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means(). dτ is the time step and weights a function that calulates the weights. See w_exp() and w_lin(). Additional keyword arguments are passed on to ratio_of_means().\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the unweighted ratio. Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame returned by lomc!. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df returned from lomc! repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\ndf, _ = lomc!(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(df; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(\n    df::DataFrame;\n    skip=0, hproj=:hproj, vproj=:vproj, kwargs...\n) -> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy() to set these up in lomc!()). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, dτ;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n) -> r::RatioBlockingResult\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n) -> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame returned by lomc!. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means(). dτ is the time step and weights a function that calulates the weights. See w_exp() and w_lin(). Additional keyword arguments are passed on to ratio_of_means().\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df returned from lomc! repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\ndf, _ = lomc!(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(df; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...) -> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, dτ; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip.\n\nSee also w_lin(), growth_estimator(), mixed_estimator().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, dτ; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip.\n\nSee also w_exp(), growth_estimator(), mixed_estimator().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the result of replica lomc! passed as  argument df, using replicas _1 and _2. Calls ratio_of_means() to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame version can extract the relevant information from the result of lomc!. Set up lomc! with the keyword argument replica = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by lomc! as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallowed_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">0.470598</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">1.4437e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">1.068e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">9.017e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">1.272e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">2.615e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">8.486e-6</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0-1.41421im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im      0.0-2.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+1.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im\n 0.0-1.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999991\n -0.9999999999999991\n -0.9999999999999982\n -0.9999999999999973\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000027\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n       0.0+0.0im       -5.55112e-17-0.353553im         0.534676-0.217841im      2.77556e-17-0.204124im             0.0+0.0im           0.534676+0.217841im      2.77556e-17+0.204124im             0.0+0.0im       -5.55112e-17+0.353553im           0.0+0.0im\n       0.0+0.0im        5.55112e-17-0.5im             -0.378073+0.154037im              0.0-0.288675im             0.0+0.0im          -0.378073-0.154037im     -5.55112e-17+0.288675im             0.0+0.0im                0.0+0.5im                0.0+0.0im\n       0.0+0.612372im           0.0+0.0im          -5.55112e-17+0.0im           -1.2326e-32+2.77556e-17im          0.0+0.353553im           0.0+0.0im                   0.0+2.77556e-17im          0.0+0.353553im           0.0+0.0im                0.0+0.612372im\n       0.0+0.0im                0.0+0.353553im      5.55112e-17+6.93889e-17im           0.0-0.612372im             0.0+0.0im        5.55112e-17-1.38778e-16im           0.0+0.612372im             0.0+0.0im                0.0-0.353553im           0.0+0.0im\n       0.0-0.353553im    1.2326e-32+1.11022e-16im   5.55112e-17-2.77556e-17im  -2.46519e-32-2.77556e-17im          0.0+0.612372im  -1.11022e-16-2.77556e-17im   4.93038e-32-2.77556e-17im          0.0+0.612372im   -1.2326e-32+8.32667e-17im        0.0-0.353553im\n       0.0+0.0im           0.353553+0.0im                   0.0+0.0im              0.612372+0.0im                  0.0+0.0im                0.0+0.0im              0.612372+0.0im                  0.0+0.0im           0.353553+0.0im                0.0+0.0im\n -0.353553+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.612372+0.0im                0.0+0.0im                   0.0+0.0im             0.612372+0.0im                0.0+0.0im           0.353553+0.0im\n       0.0+0.0im               -0.5+7.02973e-17im     -0.154037-0.378073im         0.288675-1.95105e-16im          0.0+0.0im          -0.154037+0.378073im         0.288675+2.29062e-16im          0.0+0.0im               -0.5-7.48398e-17im        0.0+0.0im\n       0.0+0.0im          -0.353553+8.84171e-17im      0.217841+0.534676im         0.204124-1.1389e-16im   8.32667e-17+0.0im           0.217841-0.534676im         0.204124+2.4427e-16im   8.32667e-17+0.0im          -0.353553-8.31718e-17im        0.0+0.0im\n  0.612372+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.353553-0.0im                0.0+0.0im                   0.0+0.0im             0.353553+0.0im                0.0+0.0im          -0.612372-0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -1.6810327175633306e-17\n  3.469966302164114e-17\n  0.15915494309189535\n  0.1591549430918954\n  0.1591549430918954","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(BoseFS{4,5}(0, 0, 4, 0, 0); u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 1 0 0 3⟩\"\n fs\"|1 3 0 0 0⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843  0.0       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8        0.0       0.282843  0.565685  0.0       0.0       0.0       0.0\n  0.0       0.8       0.4       0.581966  0.4       0.0       0.4        0.282843  0.565685  0.0       0.69282   0.69282   0.0       0.0\n  0.0       0.4       0.8       0.4       2.81803   0.4       0.0        0.0       0.565685  0.282843  0.69282   0.0       0.69282   0.0\n  0.0       0.8       0.4       0.0       0.4       0.581966  0.4        0.282843  0.565685  0.0       0.0       0.0       0.69282   0.69282\n  0.0       0.4       0.8       0.4       0.0       0.4       2.81803    0.0       0.565685  0.282843  0.0       0.69282   0.0       0.69282\n  0.0       0.565685  0.0       0.282843  0.0       0.282843  0.0       -0.472136  0.8       0.0       0.489898  0.0       0.0       0.489898\n  0.0       0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n  0.0       0.0       0.565685  0.0       0.282843  0.0       0.282843   0.0       0.8       8.47214   0.0       0.489898  0.489898  0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.0       0.0        0.489898  0.489898  0.0       1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.69282    0.0       0.489898  0.489898  0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.69282   0.0        0.0       0.489898  0.489898  0.0       0.0       6.03607   0.0\n  0.0       0.0       0.0       0.0       0.0       0.69282   0.69282    0.489898  0.489898  0.0       0.0       0.0       0.0       1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.9798639983216155\n -3.363124291613371\n -0.7590191922770746\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781396\n  1.530592997097333\n  1.5835732611867464\n  3.072870330325867\n  3.125672653951849\n  4.862107221562182\n  6.26069485038059\n  6.402671211183119\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348     0.175378     0.0135766   -2.81719e-15  -0.0221221  -0.0697193   1.3739e-15    0.0314466   -2.35922e-16  -0.0360987   -0.0161557  -5.55112e-17   0.00625248  -0.0058099\n  0.177701     0.932229     0.105473     3.01009e-14   0.225254   -0.132826    9.71445e-17  -0.00292026  -2.09555e-15  -0.0861158   -0.0907789  -4.996e-16     0.0591715   -0.0264275\n  0.0768085   -0.0622307    0.0129069   -6.06251e-14  -0.447424   -0.63969     2.05322e-14   0.383444    -6.54338e-15  -0.431051    -0.181167   -6.10623e-16   0.0599783   -0.106852\n -0.0214153   -0.175119    -0.20169      0.616673      0.522017   -0.296818   -0.31234      -0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797    0.0693699     0.0495446   0.416847    0.33773       0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153   -0.175119    -0.20169     -0.616673      0.522017   -0.296818    0.31234      -0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797   -0.0693699     0.0495446   0.416847   -0.33773       0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.0138439   -0.165902     0.922758     1.00753e-14   0.1111     -0.172508   -1.30521e-14  -0.207974     2.66454e-15   0.0848902   -0.149153   -8.32667e-16   0.0712921   -0.0301968\n -0.00234782   0.00840544  -0.098969    -9.6867e-15   -0.0847116   0.082999    1.51129e-14   0.274424     3.60822e-15   0.575786    -0.61385    -2.72005e-15   0.353775    -0.259338\n -0.00237613   0.00294196   0.00143189   5.56152e-15   0.0427486   0.0110863  -3.72619e-15  -0.0663108    9.50628e-16   0.00167015   0.0832916   2.91434e-15  -0.448519    -0.8863\n  0.00363555   0.0455298   -0.133824    -0.332825     -0.290831   -0.057199   -0.527627     -0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478   0.0150664    0.0206752   -0.0642658    -0.0638689  -0.0250518   0.0999631    -0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499\n  0.00195478   0.0150664    0.0206752    0.0642658    -0.0638689  -0.0250518  -0.0999631    -0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555   0.0455298   -0.133824     0.332825     -0.290831   -0.057199    0.527627     -0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133606\n -0.7590191922770747","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321601\n -3.363124291613371\n -0.7590191922770853\n  0.13584182219621077\n  0.15789998694609508\n  0.876711441178136\n  1.530592997097317\n  1.5835732611867481\n  3.0728703303258706\n  3.1256726539518365\n  4.862107221562165\n  6.260694850380596\n  6.4026712111831126\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321621\n -3.3631242916133637\n -0.759019192277076\n  0.1578999869460802\n  0.8767114411781437\n  1.5835732611867417\n  3.125672653951844\n  4.862107221562179\n  6.402671211183117\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.0066861389450877905\n 0.033070399772041625\n 3.9204869225657406\n 0.03307039977204162\n 0.006686138945087839","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nDensityMatrixDiagonal\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html#Model-Hamiltonians","page":"Hamiltonians","title":"Model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardReal1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardReal1D2C","text":"BoseHubbardReal1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0)\n\nImplements a two-component one-dimensional Bose Hubbard chain in real space.\n\nhatH = hatH_a + hatH_b + Vsum_i n_a_in_b_i\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nua: the on-site interaction parameter parameter for Hamiltonian a.\nub: the on-site interaction parameter parameter for Hamiltonian b.\nta: the hopping strength for Hamiltonian a.\ntb: the hopping strength for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nSee also\n\nHubbardReal1D\nBoseHubbardMom1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) + v sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2t cos(k)\ncontinuum_dispersion: ϵ_k = tk^2\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardMom1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardMom1D2C","text":"BoseHubbardMom1D2C(add::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0, kwargs...)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with a two-component Bose gas.\n\nhatH = hatH_a + hatH_b + fracVMsum_kpqr b^_r a^_q b_p a_k δ_r+qp+k\n\nArguments\n\nadd: the starting address.\nua: the u parameter for Hamiltonian a.\nub: the u parameter for Hamiltonian b.\nta: the t parameter for Hamiltonian a.\ntb: the t parameter for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nFurther keyword arguments are passed on to the constructor of HubbardMom1D.\n\nSee also\n\nBoseFS2C\nBoseHubbardReal1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2t cos(k)\ncontinuum_dispersion: ϵ_k = tk^2\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions \n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl \n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x  so that single particle energies are \n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to  be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order  degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl \n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and  the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between  basis states of any noninteracting energy level, leading to many more offdiagonals and  fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger  restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator  basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The    allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults    to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make    the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the    interactions. The values are always scaled relative to the first dimension, which sets    the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed    to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are    ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without    comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building  a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions \n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that  conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots  are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x  so that single particle energies are \n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to  be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using  first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d) \n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator  basis functions, see four_oscillator_integral_general, with the additional restriction  that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults    to a 1D spectrum with number of levels matching modes of addr. Will be sorted to    make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets    the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed    to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are    ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function  potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi \n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots  are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x  so that single particle energies are \n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to  be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix  representation of this Hamiltonian for a single particle is completely dense in the even-parity  subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty    for a 1D trap or contain values greater than 1.0. The maximum index    in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,    including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if    only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of \nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other","page":"Hamiltonians","title":"Other","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of lomc!() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(k)\n\nDispersion relation for HubbardMom1D. Returns -2cos(k).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(k)\n\nDispersion relation for HubbardMom1D. Returns k^2.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(BoseFS{3,3}(1, 1, 1); u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(BoseFS{3,3}(1, 1, 1); u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(BoseFS{3,3}(0, 2, 1); u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Observables are AbstractHamiltonians that represent a physical observable. Their ground state expectation values can be sampled by passing them into AllOverlaps.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"ParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator([address]) <: AbstractHamiltonian\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. Passing an address is optional.\n\njulia> h = FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3); bsr = BasisSetRepresentation(h);\n\njulia> gs = DVec(zip(bsr.basis, eigen(Matrix(bsr)).vectors[:,1])); # ground state\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractHamiltonian{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int,c=:cross) <: AbstractHamiltonian{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d of a two component system in a momentum-space Fock-state basis. It returns a Complex value.\n\nCorrelation across two components:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s b^_p  b_q a_r δ_s+pq+r\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\nc: possible instructions: :cross: default instruction, computing correlation between particles across two components; :first: computing correlation between particles within the first component; :second: computing correlation between particles within the second component. These are the only defined instructions, using anything else will produce errors.\n\nTo use on a one-component system\n\nFor a system with only one component, e.g. with BoseFS, the second argument c is irrelevant and can be any of the above instructions, one could simply skip this argument and let it be the default value.\n\nSee also\n\nBoseHubbardMom1D2C\nBoseFS2C\nG2RealCorrelator\nG2RealSpace\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into lomc! with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractHamiltonian, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    hatC_textstring(d) = frac1M sum_j^M delta n_j (e^i pi sum_j leq k  j + d delta n_k) delta n_j+d\n\nHere, delta hatn_j = hatn_j - barn is the boson number deviation from the mean filling number and barn = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractHamiltonian, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator hatp.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(add => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(add => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(add => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Hamiltonians-interface","page":"Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. The most general form of a model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with lomc!). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallowed_address_type(h::AbstractHamiltonian): defaults to typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.starting_address","page":"Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, add, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address add and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallowed_address_type","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, add)\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address add of the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRep.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.allowed_address_type","page":"Hamiltonians","title":"Rimu.Interfaces.allowed_address_type","text":"allowed_address_type(h::AbstractHamiltonian)\n\nReturn the type of addresses that can be used with Hamiltonian h.\n\nPart of the AbstractHamiltonian interface.\n\nDefaults to typeof(starting_address(h)). Overload this function if the Hamiltonian can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"hamiltonians.html#Base.adjoint","page":"Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractHamiltonian)\n\nRepresent the adjoint of an AbstractHamiltonian. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.dot","page":"Hamiltonians","title":"LinearAlgebra.dot","text":"dot(map::OccupiedModeMap, vec::AbstractVector)\ndot(map1::OccupiedModeMap, map2::OccupiedModeMap)\n\nDot product extracting mode occupation numbers from an OccupiedModeMap similar to onr.\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> dot(mb, 1:7)\n27\n\njulia> mb⋅(1:7) == onr(b)⋅(1:7)\ntrue\n\nSee also SingleComponentFockAddress.\n\n\n\n\n\ndot(w, op::AbstractHamiltonian, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\ndot(y::PDVec, A::AbstractHamiltonian, x::PDVec[, w::PDWorkingMemory])\n\nPerform y ⋅ A ⋅ x. The working memory w is required to facilitate threaded/distributed operations with non-diagonal A. If needed and not passed a new instance will be allocated. A can be replaced with a tuple of operators.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractHamiltonian, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allowed_address_type.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here for HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Harmonic-Oscillator","page":"Hamiltonians","title":"Harmonic Oscillator","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim}; \n    target_energy = nothing, \n    max_energy = nothing, \n    max_blocks = nothing, \n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns \n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRep\nindices: tuple of mode indices that allow recreation of the generating address    addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when    the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating    tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved    after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.    Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds  addr are determined by parity. In this case the blocks are not generated; t_basis  will be zero, and block_size will be an estimate. Pass the seed addresses to  BasisSetRep with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis  indices n_xn_yldots. These indices are bounded by S which is a  tuple of the maximum number of states in each dimension. By default the  groundstate in each dimension is indexed by 0, but this can be changed  by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions, \n\n    mathcalI(ijkl) = int_-infty^infty dx  \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function,  and is non-zero unless i+j+k+l is odd. See e.g.  Titchmarsh (1948). This is a generalisation of the closed form in  Papenbrock (2002), which is is the special  case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin, \n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state  corresponds to a D-tuple of harmonic oscillator indices mathbfn_i.  S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of  phi_i(0) to speed-up the calculation. The values can be calculated with  log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D  harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"RMPI.html#Module-RMPI","page":"RMPI","title":"Module RMPI","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI","category":"page"},{"location":"RMPI.html#Rimu.RMPI","page":"RMPI","title":"Rimu.RMPI","text":"Module for providing MPI functionality for Rimu. This module is unexported. To use it, run\n\nusing Rimu.RMPI\n\n\n\n\n\n","category":"module"},{"location":"RMPI.html#MPIData","page":"RMPI","title":"MPIData","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIData","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIData","page":"RMPI","title":"Rimu.RMPI.MPIData","text":"MPIData(data; kwargs...)\n\nWrapper used for signaling that this data is part of a distributed data structure and communication should happen with MPI. MPIData can generally be used where an AbstractDVec would be used otherwise. Unlike AbstractDVecs, MPIData does not support indexing, or iteration over keys, values, and pairs.\n\nKeyword arguments:\n\nsetup = mpi_point_to_point - controls the communication stratgy\nmpi_one_sided uses one-sided communication with remote memory access (RMA), sets MPIOneSided strategy.\nmpi_point_to_point uses MPIPointToPoint strategy.\nmpi_all_to_all uses MPIAllToAll strategy.\nmpi_no_exchange sets MPINoWalkerExchange strategy. Experimental. Use with caution!\ncomm = mpi_comm()\nroot = mpi_root\nThe rest of the keyword arguments are passed to setup.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Setup-functions","page":"RMPI","title":"Setup functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"The following distribute strategies are available. The functions are unexported.","category":"page"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.mpi_point_to_point\nRimu.RMPI.mpi_one_sided\nRimu.RMPI.mpi_all_to_all\nRimu.RMPI.mpi_no_exchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_point_to_point","page":"RMPI","title":"Rimu.RMPI.mpi_point_to_point","text":"mpi_point_to_point(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to point-to-point.\n\nSets up the MPIData structure with MPIPointToPoint strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_one_sided","page":"RMPI","title":"Rimu.RMPI.mpi_one_sided","text":"mpi_one_sided(data, comm = mpi_comm(), root = mpi_root; capacity)\n\nDeclare data as mpi-distributed and set communication strategy to one-sided with remote memory access (RMA). capacity sets the capacity of the RMA windows.\n\nSets up the MPIData structure with MPIOneSided strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_all_to_all","page":"RMPI","title":"Rimu.RMPI.mpi_all_to_all","text":"mpi_all_to_all(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to all-to-all.\n\nSets up the MPIData structure with MPIAllToAll strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_no_exchange","page":"RMPI","title":"Rimu.RMPI.mpi_no_exchange","text":"mpi_no_exchange(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to MPINoWalkerExchange. Sets up the MPIData structure with MPINoWalkerExchange strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Strategies","page":"RMPI","title":"Strategies","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIPointToPoint\nRimu.RMPI.MPIOneSided\nRimu.RMPI.MPIAllToAll\nRimu.RMPI.MPINoWalkerExchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIPointToPoint","page":"RMPI","title":"Rimu.RMPI.MPIPointToPoint","text":"MPIPointToPoint{N,A}\n\nPoint-to-point communication strategy. Uses circular communication using MPI.Send and MPI.Recv!.\n\nConstructor\n\nMPIPointToPoint(::Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIOneSided","page":"RMPI","title":"Rimu.RMPI.MPIOneSided","text":"MPIOneSided(nprocs, myrank, comm, ::Type{T}, capacity)\n\nCommunication buffer for use with MPI one-sided communication (remote memory access). Up to capacity elements of type T can be exchanged between MPI ranks via put. It is important that isbitstype(T) == true. Objects of type MPIOneSided have to be freed manually with a (blocking) call to free().\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIAllToAll","page":"RMPI","title":"Rimu.RMPI.MPIAllToAll","text":" MPIAllToAll\n\nAll-to-all communication strategy. The communication works in two steps: first MPI.Alltoall! is used to communicate the number of walkers each rank wants to send to other ranks, then MPI.Alltoallv! is used to send the walkers around.\n\nConstructor\n\nMPIAllToAll(Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPINoWalkerExchange","page":"RMPI","title":"Rimu.RMPI.MPINoWalkerExchange","text":"MPINoWalkerExchange(nprocs, my_rank, comm)\n\nStrategy for not exchanging walkers between ranks. Consequently there will be no cross-rank annihilations.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#MPI-convenience-functions","page":"RMPI","title":"MPI convenience functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Modules = [Rimu.RMPI]\nPages = [\"helpers.jl\"]\nPrivate = true\nPublic = true","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_root","page":"RMPI","title":"Rimu.RMPI.mpi_root","text":"Default MPI root for RMPI.\n\n\n\n\n\n","category":"constant"},{"location":"RMPI.html#Rimu.DictVectors.mpi_comm-Tuple{}","page":"RMPI","title":"Rimu.DictVectors.mpi_comm","text":"Default MPI communicator for RMPI.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.DictVectors.mpi_rank","page":"RMPI","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.DictVectors.mpi_size","page":"RMPI","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.is_mpi_root","page":"RMPI","title":"Rimu.RMPI.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_allprintln-Tuple","page":"RMPI","title":"Rimu.RMPI.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_barrier","page":"RMPI","title":"Rimu.RMPI.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_combine_walkers!-Tuple{Rimu.RMPI.MPIData, AbstractDVec}","page":"RMPI","title":"Rimu.RMPI.mpi_combine_walkers!","text":"mpi_combine_walkers!(target, source, [strategy])\n\nDistribute the entries of source to the target data structure such that all entries in the target are on the process with the correct mpi rank as controlled by targetrank(). MPI syncronizing.\n\nNote: the storage of the source is communicated rather than the source itself.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_seed!","page":"RMPI","title":"Rimu.RMPI.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.next_mpiID","page":"RMPI","title":"Rimu.RMPI.next_mpiID","text":"next_mpiID()\n\nProduce a new ID number for MPI distributed objects. Uses an internal counter.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.targetrank-Tuple{Union{Integer, AbstractFockAddress}, Any}","page":"RMPI","title":"Rimu.RMPI.targetrank","text":"targetrank(key, np)\n\nCompute the rank where the key belongs.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.@mpi_root-Tuple","page":"RMPI","title":"Rimu.RMPI.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"RMPI.html#Index","page":"RMPI","title":"Index","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Pages   = [\"RMPI.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nnnzs = 0: The number of non-zero elements in the basis set representation. Setting a   non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^6, nnzs, cutoff, filter, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(BoseFS{1,3}(1, 0, 0); u=1.0, t=1.0)) with dimension 3 and 9 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int64} with 9 stored entries:\n  0.0  -1.0  -1.0\n -1.0   0.0  -1.0\n -1.0  -1.0   0.0\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(BoseFS{1,3}(1, 0, 0); u=1.0, t=1.0)) with dimension 2 and 4 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int64} with 4 stored entries:\n  0.0  -1.0\n -1.0   0.0\n\njulia> using LinearAlgebra; eigvals(Matrix(bsr)) # eigenvalues\n3-element Vector{Float64}:\n -1.9999999999999996\n  0.9999999999999997\n  1.0000000000000002\n\njulia> ev = eigvecs(Matrix(bsr))[:,1] # ground state eigenvector\n3-element Vector{Float64}:\n -0.5773502691896257\n -0.5773502691896255\n -0.5773502691896257\n\njulia> DVec(zip(bsr.basis,ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => -0.57735\n  fs\"|0 1 0⟩\" => -0.57735\n  fs\"|1 0 0⟩\" => -0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. A maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nSetting sort to true will sort the basis. Any additional keyword arguments are passed on to Base.sort!.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"randomnumbers.html#Random-numbers-in-Rimu","page":"Random numbers","title":"Random numbers in Rimu","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"Rimu uses Julia's built-in random number generator, which currently defaults to Xoshiro256++.","category":"page"},{"location":"randomnumbers.html#Reproducibility","page":"Random numbers","title":"Reproducibility","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"If you want FCIQMC runs to be reproducible, make sure to seed the RNG with Random.seed!.","category":"page"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"MPI-distributed runs can also be made reproducible by seeding the RNG with Rimu.RMPI.mpi_seed!.","category":"page"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://joachimbrand.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for  parsing by Literate. The process of generating  documentation is automated in the docs/make.jl file and assumes that the following line is  at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example, ","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, product = hopnextneighbour(add, chosen)\n\nCompute the new address of a hopping event for the Bose-Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\nBoundary conditions are periodic.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS2C","text":"BoseFS2C{NA,NB,M,AA,AB} <: AbstractFockAddress\nBoseFS2C(onr_a, onr_b)\n\nAddress type that constructed with two BoseFS{N,M,S}. It represents a Fock state with two components, e.g. two different species of bosons with particle number NA from species S and particle number NB from species B. The number of modes M is expected to be the same for both components.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, Tuple{Vararg{Int64, var\"#s61\"}} where var\"#s61\", Tuple{Vararg{Int64, var\"#s5\"}} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.12.0. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(num_replicas=2; operator=nothing, transform=nothing, vecnorm=true) <: ReplicaStrategy{num_replicas}\n\nRun num_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee lomc!, ReplicaStrategy and AbstractHamiltonian (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to lomc! then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep dτ constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; targetwalkers = 1_000_000) <: ShiftStrategy\n\nDon't update the shift.  Return when targetwalkers is reached.\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in lomc! is advised as the default may not be appropriate.\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; targetwalkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; targetwalkers = 1000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(targetwalkers, ζ = 0.08, ξ = 0.0016) <: ShiftStrategy\n\nStrategy for updating the shift: After targetwalkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, dτ) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt{S} <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(targetwalkers, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After targetwalkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nThis will work with MPIData.\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to lomc!. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntargetwalkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; targetwalkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 10)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; targetwalkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, seeTimeStepStrategy`.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * targetwalkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates.\n\nIndexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nSee also ReplicaStrategy, SpectralState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to lomc! and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_reporting_strategy\nreport!\nreport_after_step!\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to lomc!.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in lomc!()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, walltime = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the walltime is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with advance!.\n\nSee also SpectralState, SpectralStrategy, ReplicaState, ReplicaStrategy, replica_stats, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several SingleStates representing the ground state and excited states of a single replica.\n\nIndexing the SpectralState state[i] returns the ith SingleState.\n\nSee also SpectralStrategy, ReplicaState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_dτ(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, shift_strategy)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Tuple, Tuple{Vararg{AbstractDVec, N}}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators. This function is overloaded for MPIData. The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main lomc! loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in lomc! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> add = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(add);\n\njulia> df1, state = lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 10)\n\njulia> size(df2)\n(200, 10)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(BoseFS{6,3}(1, 2, 3); u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.targetwalkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from lomc!, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before lomc! exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{R}, Tuple{S}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{S, R}, Any, Any}} where {S, R}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 1.6, 1.6, 0.4, 0.4)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an AbstractMatrix of configuration vectors from the state. The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also SingleState, ReplicaState, SpectralState, PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_dτ-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_dτ","text":"update_dτ(s<:TimeStepStrategy, dτ, tnorm) -> new dτ\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#RMPI","page":"API","title":"RMPI","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module RMPI","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by lomc! when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of lomc!, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with lomc!, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by lomc!.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with mpirun julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu and Rimu.RMPI, which contains MPI-related functionality.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu\nusing Rimu.RMPI","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0); u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Next, we construct the starting vector. We use a PDVec, which is automatically MPI-distributed if MPI is available. We set the vector's stochastic style to IsDynamicSemistochastic, which improves statistics and reduces the sign problem.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails. Setting save_if=is_mpi_root() will ensure only the root MPI rank will write to the file. The chunk_size parameter determines how often the data is saved to the file. Progress messages are suppressed with io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    save_if=is_mpi_root(),\n    reporting_interval=1,\n    chunk_size=1000,\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10_000 walkers. We will also compute the projected energy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"s_strat = DoubleLogUpdate(targetwalkers=10_000)\npost_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ProjectedEnergy{HubbardMom1D{Float64, 10, BoseFS{10, 10, BitString{19, 1, UInt32}}, 6.0, 1.0}, Rimu.DictVectors.FrozenPDVec{BoseFS{10, 10, BitString{19, 1, UInt32}}, Float64, 1}, Rimu.DictVectors.FrozenPDVec{BoseFS{10, 10, BitString{19, 1, UInt32}}, Float64, 1}}(:vproj, :hproj, HubbardMom1D(BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0); u=6.0, t=1.0), Rimu.DictVectors.FrozenPDVec{BoseFS{10, 10, BitString{19, 1, UInt32}}, Float64, 1}(([BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0) => 1.0],)), Rimu.DictVectors.FrozenPDVec{BoseFS{10, 10, BitString{19, 1, UInt32}}, Float64, 1}(([BoseFS{10,10}(1, 0, 0, 0, 8, 0, 0, 0, 1, 0) => 5.692099788303083, BoseFS{10,10}(0, 0, 0, 0, 8, 0, 0, 0, 0, 2) => 4.024922359499621, BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0) => 7.0, BoseFS{10,10}(0, 0, 1, 0, 8, 0, 1, 0, 0, 0) => 5.692099788303083, BoseFS{10,10}(0, 0, 0, 1, 8, 1, 0, 0, 0, 0) => 5.692099788303083, BoseFS{10,10}(0, 1, 0, 0, 8, 0, 0, 1, 0, 0) => 5.692099788303083],)))","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"lomc!(H, initial_vector; reporting_strategy, s_strat, post_step_strategy, dτ=1e-4, laststep=10_000);\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. lomc!.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main lomc!() computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI for use in lomc!() is enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary. Additional MPI-related functionality is provided by the module RMPI.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with lomc! and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with lomc! and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and PointToPoint when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> map!(x -> -x, values(pv)); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\nIf dv is an MPIData, synchronize its contents among the ranks first.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(md::MPIData)\n\nCompute the walkernumber of the distributed data on every MPI rank with MPI.Allreduce. MPI syncronizing.\n\n\n\n\n\nwalkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.dot_from_right","page":"Dict vectors","title":"Rimu.DictVectors.dot_from_right","text":"dot_from_right(w, op::AbstractHamiltonian, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in lomc!.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in lomc!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in lomc!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in lomc!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in lomc!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.MainSegmentIterator","page":"Dict vectors","title":"Rimu.DictVectors.MainSegmentIterator","text":"MainSegmentIterator{W,D} <: AbstractVector{D}\n\nIterates the main segments of a specified rank. See remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured in a series of columns, where each has a number of segments (see PDVec) equal to the number of segments across all MPI ranks. The purpose of this organisation is to allow spawning in parallel without using locks or atomic operations.\n\nThe steps performed on a PDWorkingMemory during a typical operation are perform_spawns!, collect_local!, synchronize_remote!, and move_and_compress!.\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports deposit! and StochasticStyle and acts as a target for spawning.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nCollect each row in w into its main segment. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the main segments on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.main_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.main_column","text":"main_column(::PDWorkingMemory) -> PDVec\n\nReturn the \"main\" column of the working memory wrapped in a PDVec.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local rank.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all ranks.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, t::PDVec, ham, boost)\n\nPerform spawns from t through ham to w.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the main segments that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!(w::PDWorkingMemory)\n\nSynchronize non-local segments across MPI. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, two implementations are provided, NotDistributed, and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint <: Communicator\n\nCommunicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer\n\nMultiple vectors stored in a simple buffer with MPI communication.\n\nSee replace_collections!, mpi_send, mpi_recv_any!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_comm","page":"Dict vectors","title":"Rimu.DictVectors.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_rank","page":"Dict vectors","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm)\n\nSend the buffers to dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_size","page":"Dict vectors","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into buffers.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] ::PDWorkingMemory)\n\nCopy pairs from remote ranks to the local part of the PDWorkingMemory.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored.\n\nIf the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"}]
}
