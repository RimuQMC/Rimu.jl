var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Rimu includes an unexported module RMPI, which must be imported to access additional MPI-related functionality.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"using Rimu.RMPI\nmpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(BoseFS{6,6}(1, 1, 1, 1, 1, 1); u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"num_replicas = 3\nreplica_strategy = AllOverlaps(num_replicas; operator = G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntargetwalkers = 100;\ndτ = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"df, state = lomc!(\n    H; style=IsDynamicSemistochastic(),\n    dτ,\n    laststep = steps_equilibrate + steps_measure,\n    targetwalkers,\n    replica_strategy,\n);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $num_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.210397630724869 ± 0.002945411560125692\n   G2(1) = 0.9179375998196901 ± 0.0014487882545570095\n   G2(2) = 0.9824618365485462 ± 0.0008078855891765099\n   G2(3) = 0.9888034965386578 ± 0.0012000192916385307\n   G2(4) = 0.9824618365485462 ± 0.0008078855891765099\n   G2(5) = 0.9179375998196901 ± 0.0014487882545570095\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $num_replicas replicas:\")\nfor i in 1:num_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -3.982824328882403 ± 0.13748856752861724\n   Replica 2: -3.974753826250174 ± 0.12466355058904417\n   Replica 3: -4.011054302602586 ± 0.12438161612595747\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(BoseFS{6,6}(1, 1, 1, 1, 1, 1); u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"targetwalkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(BoseFS{6,6}(1, 1, 1, 1, 1, 1); u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    targetwalkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [targetwalkers];\n    label=\"targetwalkers\", xlabel=\"steps\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.steps, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip170\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip170)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip171\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip170)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip172\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip172)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip172)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip172)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip172)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip170)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip170)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip170)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip170)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip170)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip170)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1248.87 1391.71 L1248.87 1397.25 Q1246.38 1395.98 1243.71 1395.34 Q1241.04 1394.71 1238.17 1394.71 Q1233.81 1394.71 1231.62 1396.04 Q1229.45 1397.38 1229.45 1400.05 Q1229.45 1402.09 1231.01 1403.27 Q1232.57 1404.41 1237.28 1405.46 L1239.29 1405.91 Q1245.52 1407.25 1248.13 1409.7 Q1250.78 1412.12 1250.78 1416.48 Q1250.78 1421.44 1246.83 1424.34 Q1242.91 1427.23 1236.04 1427.23 Q1233.17 1427.23 1230.06 1426.66 Q1226.97 1426.12 1223.53 1425.01 L1223.53 1418.96 Q1226.78 1420.65 1229.93 1421.51 Q1233.08 1422.33 1236.17 1422.33 Q1240.3 1422.33 1242.53 1420.93 Q1244.76 1419.5 1244.76 1416.92 Q1244.76 1414.54 1243.14 1413.26 Q1241.55 1411.99 1236.1 1410.81 L1234.07 1410.33 Q1228.62 1409.19 1226.2 1406.83 Q1223.79 1404.45 1223.79 1400.31 Q1223.79 1395.28 1227.35 1392.54 Q1230.91 1389.8 1237.47 1389.8 Q1240.72 1389.8 1243.58 1390.28 Q1246.45 1390.76 1248.87 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1265.89 1380.54 L1265.89 1390.66 L1277.96 1390.66 L1277.96 1395.22 L1265.89 1395.22 L1265.89 1414.57 Q1265.89 1418.93 1267.07 1420.17 Q1268.28 1421.41 1271.94 1421.41 L1277.96 1421.41 L1277.96 1426.31 L1271.94 1426.31 Q1265.16 1426.31 1262.58 1423.8 Q1260.01 1421.25 1260.01 1414.57 L1260.01 1395.22 L1255.71 1395.22 L1255.71 1390.66 L1260.01 1390.66 L1260.01 1380.54 L1265.89 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1316.15 1407.02 L1316.15 1409.89 L1289.22 1409.89 Q1289.61 1415.94 1292.85 1419.12 Q1296.13 1422.27 1301.96 1422.27 Q1305.33 1422.27 1308.48 1421.44 Q1311.66 1420.61 1314.78 1418.96 L1314.78 1424.5 Q1311.63 1425.83 1308.32 1426.53 Q1305.01 1427.23 1301.61 1427.23 Q1293.08 1427.23 1288.08 1422.27 Q1283.11 1417.3 1283.11 1408.84 Q1283.11 1400.08 1287.82 1394.96 Q1292.57 1389.8 1300.59 1389.8 Q1307.78 1389.8 1311.95 1394.45 Q1316.15 1399.07 1316.15 1407.02 M1310.3 1405.3 Q1310.23 1400.5 1307.59 1397.63 Q1304.98 1394.77 1300.65 1394.77 Q1295.75 1394.77 1292.79 1397.54 Q1289.86 1400.31 1289.42 1405.34 L1310.3 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1331.43 1420.96 L1331.43 1439.87 L1325.54 1439.87 L1325.54 1390.66 L1331.43 1390.66 L1331.43 1396.07 Q1333.28 1392.89 1336.08 1391.36 Q1338.91 1389.8 1342.82 1389.8 Q1349.32 1389.8 1353.36 1394.96 Q1357.43 1400.12 1357.43 1408.52 Q1357.43 1416.92 1353.36 1422.08 Q1349.32 1427.23 1342.82 1427.23 Q1338.91 1427.23 1336.08 1425.71 Q1333.28 1424.15 1331.43 1420.96 M1351.35 1408.52 Q1351.35 1402.06 1348.68 1398.4 Q1346.04 1394.71 1341.39 1394.71 Q1336.74 1394.71 1334.07 1398.4 Q1331.43 1402.06 1331.43 1408.52 Q1331.43 1414.98 1334.07 1418.67 Q1336.74 1422.33 1341.39 1422.33 Q1346.04 1422.33 1348.68 1418.67 Q1351.35 1414.98 1351.35 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1389.87 1391.71 L1389.87 1397.25 Q1387.38 1395.98 1384.71 1395.34 Q1382.04 1394.71 1379.17 1394.71 Q1374.81 1394.71 1372.62 1396.04 Q1370.45 1397.38 1370.45 1400.05 Q1370.45 1402.09 1372.01 1403.27 Q1373.57 1404.41 1378.28 1405.46 L1380.29 1405.91 Q1386.52 1407.25 1389.13 1409.7 Q1391.78 1412.12 1391.78 1416.48 Q1391.78 1421.44 1387.83 1424.34 Q1383.91 1427.23 1377.04 1427.23 Q1374.18 1427.23 1371.06 1426.66 Q1367.97 1426.12 1364.53 1425.01 L1364.53 1418.96 Q1367.78 1420.65 1370.93 1421.51 Q1374.08 1422.33 1377.17 1422.33 Q1381.3 1422.33 1383.53 1420.93 Q1385.76 1419.5 1385.76 1416.92 Q1385.76 1414.54 1384.14 1413.26 Q1382.55 1411.99 1377.1 1410.81 L1375.07 1410.33 Q1369.62 1409.19 1367.2 1406.83 Q1364.79 1404.45 1364.79 1400.31 Q1364.79 1395.28 1368.35 1392.54 Q1371.92 1389.8 1378.47 1389.8 Q1381.72 1389.8 1384.58 1390.28 Q1387.45 1390.76 1389.87 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip172)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1261.86 2211.02,1261.86 \"/>\n<polyline clip-path=\"url(#clip172)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1004.36 2211.02,1004.36 \"/>\n<polyline clip-path=\"url(#clip172)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,746.862 2211.02,746.862 \"/>\n<polyline clip-path=\"url(#clip172)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,489.364 2211.02,489.364 \"/>\n<polyline clip-path=\"url(#clip172)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,231.866 2211.02,231.866 \"/>\n<polyline clip-path=\"url(#clip170)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip170)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1261.86 423.181,1261.86 \"/>\n<polyline clip-path=\"url(#clip170)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1004.36 423.181,1004.36 \"/>\n<polyline clip-path=\"url(#clip170)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,746.862 423.181,746.862 \"/>\n<polyline clip-path=\"url(#clip170)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,489.364 423.181,489.364 \"/>\n<polyline clip-path=\"url(#clip170)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,231.866 423.181,231.866 \"/>\n<path clip-path=\"url(#clip170)\" d=\"M356.339 1247.66 Q352.728 1247.66 350.899 1251.22 Q349.094 1254.76 349.094 1261.89 Q349.094 1269 350.899 1272.56 Q352.728 1276.11 356.339 1276.11 Q359.973 1276.11 361.779 1272.56 Q363.608 1269 363.608 1261.89 Q363.608 1254.76 361.779 1251.22 Q359.973 1247.66 356.339 1247.66 M356.339 1243.95 Q362.149 1243.95 365.205 1248.56 Q368.284 1253.14 368.284 1261.89 Q368.284 1270.62 365.205 1275.23 Q362.149 1279.81 356.339 1279.81 Q350.529 1279.81 347.45 1275.23 Q344.395 1270.62 344.395 1261.89 Q344.395 1253.14 347.45 1248.56 Q350.529 1243.95 356.339 1243.95 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M290.043 1017.71 L306.363 1017.71 L306.363 1021.64 L284.418 1021.64 L284.418 1017.71 Q287.08 1014.95 291.664 1010.32 Q296.27 1005.67 297.451 1004.33 Q299.696 1001.8 300.576 1000.07 Q301.478 998.307 301.478 996.617 Q301.478 993.863 299.534 992.127 Q297.613 990.39 294.511 990.39 Q292.312 990.39 289.858 991.154 Q287.427 991.918 284.65 993.469 L284.65 988.747 Q287.474 987.613 289.927 987.034 Q292.381 986.455 294.418 986.455 Q299.789 986.455 302.983 989.14 Q306.177 991.826 306.177 996.316 Q306.177 998.446 305.367 1000.37 Q304.58 1002.27 302.474 1004.86 Q301.895 1005.53 298.793 1008.75 Q295.691 1011.94 290.043 1017.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M316.224 987.08 L334.58 987.08 L334.58 991.015 L320.506 991.015 L320.506 999.488 Q321.524 999.14 322.543 998.978 Q323.562 998.793 324.58 998.793 Q330.367 998.793 333.747 1001.96 Q337.126 1005.14 337.126 1010.55 Q337.126 1016.13 333.654 1019.23 Q330.182 1022.31 323.862 1022.31 Q321.687 1022.31 319.418 1021.94 Q317.173 1021.57 314.765 1020.83 L314.765 1016.13 Q316.849 1017.27 319.071 1017.82 Q321.293 1018.38 323.77 1018.38 Q327.774 1018.38 330.112 1016.27 Q332.45 1014.16 332.45 1010.55 Q332.45 1006.94 330.112 1004.83 Q327.774 1002.73 323.77 1002.73 Q321.895 1002.73 320.02 1003.14 Q318.168 1003.56 316.224 1004.44 L316.224 987.08 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M356.339 990.159 Q352.728 990.159 350.899 993.724 Q349.094 997.265 349.094 1004.39 Q349.094 1011.5 350.899 1015.07 Q352.728 1018.61 356.339 1018.61 Q359.973 1018.61 361.779 1015.07 Q363.608 1011.5 363.608 1004.39 Q363.608 997.265 361.779 993.724 Q359.973 990.159 356.339 990.159 M356.339 986.455 Q362.149 986.455 365.205 991.062 Q368.284 995.645 368.284 1004.39 Q368.284 1013.12 365.205 1017.73 Q362.149 1022.31 356.339 1022.31 Q350.529 1022.31 347.45 1017.73 Q344.395 1013.12 344.395 1004.39 Q344.395 995.645 347.45 991.062 Q350.529 986.455 356.339 986.455 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M286.062 729.582 L304.418 729.582 L304.418 733.517 L290.344 733.517 L290.344 741.989 Q291.363 741.642 292.381 741.48 Q293.4 741.295 294.418 741.295 Q300.205 741.295 303.585 744.466 Q306.964 747.637 306.964 753.054 Q306.964 758.633 303.492 761.735 Q300.02 764.813 293.701 764.813 Q291.525 764.813 289.256 764.443 Q287.011 764.073 284.603 763.332 L284.603 758.633 Q286.687 759.767 288.909 760.323 Q291.131 760.878 293.608 760.878 Q297.613 760.878 299.951 758.772 Q302.288 756.665 302.288 753.054 Q302.288 749.443 299.951 747.337 Q297.613 745.23 293.608 745.23 Q291.733 745.23 289.858 745.647 Q288.006 746.063 286.062 746.943 L286.062 729.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M326.177 732.661 Q322.566 732.661 320.737 736.225 Q318.932 739.767 318.932 746.897 Q318.932 754.003 320.737 757.568 Q322.566 761.11 326.177 761.11 Q329.811 761.11 331.617 757.568 Q333.446 754.003 333.446 746.897 Q333.446 739.767 331.617 736.225 Q329.811 732.661 326.177 732.661 M326.177 728.957 Q331.987 728.957 335.043 733.563 Q338.122 738.147 338.122 746.897 Q338.122 755.624 335.043 760.23 Q331.987 764.813 326.177 764.813 Q320.367 764.813 317.288 760.23 Q314.233 755.624 314.233 746.897 Q314.233 738.147 317.288 733.563 Q320.367 728.957 326.177 728.957 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M356.339 732.661 Q352.728 732.661 350.899 736.225 Q349.094 739.767 349.094 746.897 Q349.094 754.003 350.899 757.568 Q352.728 761.11 356.339 761.11 Q359.973 761.11 361.779 757.568 Q363.608 754.003 363.608 746.897 Q363.608 739.767 361.779 736.225 Q359.973 732.661 356.339 732.661 M356.339 728.957 Q362.149 728.957 365.205 733.563 Q368.284 738.147 368.284 746.897 Q368.284 755.624 365.205 760.23 Q362.149 764.813 356.339 764.813 Q350.529 764.813 347.45 760.23 Q344.395 755.624 344.395 746.897 Q344.395 738.147 347.45 733.563 Q350.529 728.957 356.339 728.957 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M284.835 472.084 L307.057 472.084 L307.057 474.074 L294.511 506.644 L289.627 506.644 L301.432 476.019 L284.835 476.019 L284.835 472.084 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M316.224 472.084 L334.58 472.084 L334.58 476.019 L320.506 476.019 L320.506 484.491 Q321.524 484.144 322.543 483.982 Q323.562 483.797 324.58 483.797 Q330.367 483.797 333.747 486.968 Q337.126 490.139 337.126 495.556 Q337.126 501.135 333.654 504.236 Q330.182 507.315 323.862 507.315 Q321.687 507.315 319.418 506.945 Q317.173 506.574 314.765 505.834 L314.765 501.135 Q316.849 502.269 319.071 502.824 Q321.293 503.38 323.77 503.38 Q327.774 503.38 330.112 501.273 Q332.45 499.167 332.45 495.556 Q332.45 491.945 330.112 489.838 Q327.774 487.732 323.77 487.732 Q321.895 487.732 320.02 488.148 Q318.168 488.565 316.224 489.445 L316.224 472.084 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M356.339 475.162 Q352.728 475.162 350.899 478.727 Q349.094 482.269 349.094 489.398 Q349.094 496.505 350.899 500.07 Q352.728 503.611 356.339 503.611 Q359.973 503.611 361.779 500.07 Q363.608 496.505 363.608 489.398 Q363.608 482.269 361.779 478.727 Q359.973 475.162 356.339 475.162 M356.339 471.459 Q362.149 471.459 365.205 476.065 Q368.284 480.649 368.284 489.398 Q368.284 498.125 365.205 502.732 Q362.149 507.315 356.339 507.315 Q350.529 507.315 347.45 502.732 Q344.395 498.125 344.395 489.398 Q344.395 480.649 347.45 476.065 Q350.529 471.459 356.339 471.459 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M256.664 245.21 L264.303 245.21 L264.303 218.845 L255.992 220.511 L255.992 216.252 L264.256 214.586 L268.932 214.586 L268.932 245.21 L276.571 245.21 L276.571 249.146 L256.664 249.146 L256.664 245.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M296.015 217.664 Q292.404 217.664 290.576 221.229 Q288.77 224.771 288.77 231.9 Q288.77 239.007 290.576 242.571 Q292.404 246.113 296.015 246.113 Q299.65 246.113 301.455 242.571 Q303.284 239.007 303.284 231.9 Q303.284 224.771 301.455 221.229 Q299.65 217.664 296.015 217.664 M296.015 213.961 Q301.826 213.961 304.881 218.567 Q307.96 223.15 307.96 231.9 Q307.96 240.627 304.881 245.234 Q301.826 249.817 296.015 249.817 Q290.205 249.817 287.127 245.234 Q284.071 240.627 284.071 231.9 Q284.071 223.15 287.127 218.567 Q290.205 213.961 296.015 213.961 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M326.177 217.664 Q322.566 217.664 320.737 221.229 Q318.932 224.771 318.932 231.9 Q318.932 239.007 320.737 242.571 Q322.566 246.113 326.177 246.113 Q329.811 246.113 331.617 242.571 Q333.446 239.007 333.446 231.9 Q333.446 224.771 331.617 221.229 Q329.811 217.664 326.177 217.664 M326.177 213.961 Q331.987 213.961 335.043 218.567 Q338.122 223.15 338.122 231.9 Q338.122 240.627 335.043 245.234 Q331.987 249.817 326.177 249.817 Q320.367 249.817 317.288 245.234 Q314.233 240.627 314.233 231.9 Q314.233 223.15 317.288 218.567 Q320.367 213.961 326.177 213.961 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M356.339 217.664 Q352.728 217.664 350.899 221.229 Q349.094 224.771 349.094 231.9 Q349.094 239.007 350.899 242.571 Q352.728 246.113 356.339 246.113 Q359.973 246.113 361.779 242.571 Q363.608 239.007 363.608 231.9 Q363.608 224.771 361.779 221.229 Q359.973 217.664 356.339 217.664 M356.339 213.961 Q362.149 213.961 365.205 218.567 Q368.284 223.15 368.284 231.9 Q368.284 240.627 365.205 245.234 Q362.149 249.817 356.339 249.817 Q350.529 249.817 347.45 245.234 Q344.395 240.627 344.395 231.9 Q344.395 223.15 347.45 218.567 Q350.529 213.961 356.339 213.961 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip172)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,231.866 4017.76,231.866 \"/>\n<polyline clip-path=\"url(#clip172)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1249.5 456.554,1249.49 457.123,1248.39 457.691,1248.25 458.259,1248 458.828,1247.7 459.396,1247.33 459.964,1246.89 460.533,1246.39 461.101,1245.8 461.669,1245.14 462.238,1244.38 462.806,1242.5 463.375,1241.56 463.943,1239.48 464.511,1238.37 465.08,1237.18 465.648,1235.87 466.216,1234.43 466.785,1232.88 467.353,1230.16 467.921,1228.39 468.49,1226.47 469.058,1224.39 469.626,1222.21 470.195,1219.83 470.763,1217.31 471.331,1214.63 471.9,1208.7 472.468,1204.73 473.036,1199.57 473.605,1196.19 474.173,1192.67 474.741,1188.97 475.31,1185.15 475.878,1181.11 476.446,1176.79 477.015,1172.25 477.583,1166.49 478.152,1161.5 478.72,1155.23 479.288,1149.76 479.857,1142.02 480.425,1135.08 480.993,1128.99 481.562,1122.59 482.13,1115.97 482.698,1107.07 483.267,1099.11 483.835,1091.96 484.403,1084.61 484.972,1075.96 485.54,1066.17 486.108,1058.17 486.677,1046.94 487.245,1038.69 487.813,1029.14 488.382,1019.53 488.95,1009.69 489.518,1000.62 490.087,989.275 490.655,976.944 491.224,966.537 491.792,954.124 492.36,944.88 492.929,934.379 493.497,922.964 494.065,911.438 494.634,898.768 495.202,884.246 495.77,872.951 496.339,862.676 496.907,853.5 497.475,841.204 498.044,832.056 498.612,821.817 499.18,811.612 499.749,800.479 500.317,788.345 500.885,777.299 501.454,766.349 502.022,756.728 502.59,747.118 503.159,738.674 503.727,727.946 504.295,719.566 504.864,707.977 505.432,699.656 506.001,688.409 506.569,678.134 507.137,669.015 507.706,661.073 508.274,649.98 508.842,642.409 509.411,630.504 509.979,621.119 510.547,613.959 511.116,603.522 511.684,596.736 512.252,589.924 512.821,582.956 513.389,575.109 513.957,568.369 514.526,558.556 515.094,552.264 515.662,542.974 516.231,533.523 516.799,523.4 517.367,516.646 517.936,507.88 518.504,498.343 519.072,492.075 519.641,487.018 520.209,479.953 520.778,474.284 521.346,468.587 521.914,461.032 522.483,454.56 523.051,450.533 523.619,445.187 524.188,441.114 524.756,435.166 525.324,430.241 525.893,426.444 526.461,421.78 527.029,420.222 527.598,413.46 528.166,407.694 528.734,402.146 529.303,395.987 529.871,393.008 530.439,389.999 531.008,387.236 531.576,384.336 532.144,381.332 532.713,376.258 533.281,372.407 533.85,369.972 534.418,365.358 534.986,361.807 535.555,358.232 536.123,354.838 536.691,351.841 537.26,347.829 537.828,344.635 538.396,338.807 538.965,336.19 539.533,333.449 540.101,330.901 540.67,327.288 541.238,325.074 541.806,323.837 542.375,322.577 542.943,321.342 543.511,319.004 544.08,313.643 544.648,313.702 545.216,311.488 545.785,309.456 546.353,307.494 546.921,305.647 547.49,303.741 548.058,301.795 548.627,302.164 549.195,300.489 549.763,298.558 550.332,297.848 550.9,296.076 551.468,295.417 552.037,294.707 552.605,293.643 553.173,292.837 553.742,288.936 554.31,290.454 554.878,286.513 555.447,288.014 556.015,287.202 556.583,285.359 557.152,283.904 557.72,281.309 558.288,280.018 558.857,278.664 559.425,278.027 559.993,278.499 560.562,276.876 561.13,275.434 561.698,271.913 562.267,270.684 562.835,271.436 563.404,273.321 563.972,273.087 564.54,272.651 565.109,270.263 565.677,269.016 566.245,266.84 566.814,268.871 567.382,268.437 567.95,266.207 568.519,265.872 569.087,266.559 569.655,266.132 570.224,265.929 570.792,266.33 571.36,267.023 571.929,266.479 572.497,265.057 573.065,264.696 573.634,264.179 574.202,263.579 574.77,263.134 575.339,263.7 575.907,262.281 576.476,263.833 577.044,263.169 577.612,264.8 578.181,265.109 578.749,264.628 579.317,264.71 579.886,262.794 580.454,263.01 581.022,262.296 581.591,262.728 582.159,262.054 582.727,260.284 583.296,261.781 583.864,261.103 584.432,258.405 585.001,257.659 585.569,256.945 586.137,255.231 586.706,254.834 587.274,253.42 587.842,251.966 588.411,251.729 588.979,249.448 589.547,248.372 590.116,250.253 590.684,250.021 591.253,252.803 591.821,250.355 592.389,251.096 592.958,250.601 593.526,250.278 594.094,249.202 594.663,251.048 595.231,250.861 595.799,250.421 596.368,248.797 596.936,248.39 597.504,247.092 598.073,248.031 598.641,247.87 599.209,246.261 599.778,247.125 600.346,244.928 600.914,243.892 601.483,241.598 602.051,240.787 602.619,238.97 603.188,241.437 603.756,241.276 604.325,241.333 604.893,242.706 605.461,242.493 606.03,242.423 606.598,242.435 607.166,242.609 607.735,242.334 608.303,242.332 608.871,241.441 609.44,237.57 610.008,238.837 610.576,238.186 611.145,238.564 611.713,237.833 612.281,238.059 612.85,237.15 613.418,238.477 613.986,236.861 614.555,235.108 615.123,232.419 615.691,231.909 616.26,231.769 616.828,230.473 617.396,230.309 617.965,229.27 618.533,227.159 619.102,227.181 619.67,225.248 620.238,226.623 620.807,227.701 621.375,229.942 621.943,229.751 622.512,235.03 623.08,235.711 623.648,237.355 624.217,236.626 624.785,239.116 625.353,239.322 625.922,239.3 626.49,237.267 627.058,237.589 627.627,238.009 628.195,237.259 628.763,237.688 629.332,236.824 629.9,237.255 630.468,236.75 631.037,239.353 631.605,239.651 632.173,242.118 632.742,243.087 633.31,242.127 633.879,244.296 634.447,244.134 635.015,242.902 635.584,243.685 636.152,243.749 636.72,246.499 637.289,244.083 637.857,244.798 638.425,240.143 638.994,240.214 639.562,239.132 640.13,238.146 640.699,238.315 641.267,238.51 641.835,234.45 642.404,235.098 642.972,235.573 643.54,236.062 644.109,238.282 644.677,243.768 645.245,242.812 645.814,242.556 646.382,242.485 646.951,241.472 647.519,241.342 648.087,242.371 648.656,242.306 649.224,242.013 649.792,243.02 650.361,242.618 650.929,243.297 651.497,243.823 652.066,242.278 652.634,241.133 653.202,240.776 653.771,242.596 654.339,241.397 654.907,240.114 655.476,239.954 656.044,240.968 656.612,239.646 657.181,237.328 657.749,234.318 658.317,233.581 658.886,233.701 659.454,233.902 660.022,234.308 660.591,235.811 661.159,233.906 661.728,232.449 662.296,234.092 662.864,233.521 663.433,236.038 664.001,235.992 664.569,238.053 665.138,235.955 665.706,235.19 666.274,232.414 666.843,233.722 667.411,231.904 667.979,231.484 668.548,231.793 669.116,235.293 669.684,233.144 670.253,232.39 670.821,231.446 671.389,230.685 671.958,231.053 672.526,231.622 673.094,232.146 673.663,231.667 674.231,235.242 674.799,237.517 675.368,237.426 675.936,236.264 676.505,237.591 677.073,237.709 677.641,238.665 678.21,237.665 678.778,235.68 679.346,235.841 679.915,236.015 680.483,235.841 681.051,234.776 681.62,234.146 682.188,236.396 682.756,235.216 683.325,235.438 683.893,235.482 684.461,237.458 685.03,236.536 685.598,235.399 686.166,235.403 686.735,235.616 687.303,236.771 687.871,238.707 688.44,238.425 689.008,239.391 689.577,239.283 690.145,236.221 690.713,235.17 691.282,234.317 691.85,233.578 692.418,235.796 692.987,237.732 693.555,236.646 694.123,236.775 694.692,237.642 695.26,235.701 695.828,234.677 696.397,233.779 696.965,236.155 697.533,232.799 698.102,232.95 698.67,231.249 699.238,231.417 699.807,228.452 700.375,228.818 700.943,226.934 701.512,227.714 702.08,230.288 702.648,232.696 703.217,231.945 703.785,234.464 704.354,234.602 704.922,233.619 705.49,232.88 706.059,235.33 706.627,236.555 707.195,235.512 707.764,235.469 708.332,235.652 708.9,234.675 709.469,232.59 710.037,233.627 710.605,233.742 711.174,233.955 711.742,234.028 712.31,234.137 712.879,233.282 713.447,232.562 714.015,235.866 714.584,233.659 715.152,234.854 715.72,236.11 716.289,233.073 716.857,233.328 717.425,235.38 717.994,234.087 718.562,238.486 719.131,236.292 719.699,237.358 720.267,239.162 720.836,237.925 721.404,235.815 721.972,233.721 722.541,232.86 723.109,233.831 723.677,233.117 724.246,233.252 724.814,233.514 725.382,232.238 725.951,232.52 726.519,231.771 727.087,232.147 727.656,232.403 728.224,235.727 728.792,236.716 729.361,233.766 729.929,234.762 730.497,233.691 731.066,232.683 731.634,233.97 732.203,234.99 732.771,234.032 733.339,234.169 733.908,237.376 734.476,235.456 735.044,237.526 735.613,238.207 736.181,237.977 736.749,234.75 737.318,234.935 737.886,235.14 738.454,232.816 739.023,231.009 739.591,232.452 740.159,230.511 740.728,229.814 741.296,227.244 741.864,227.8 742.433,227.37 743.001,229.051 743.569,229.655 744.138,232.066 744.706,233.161 745.274,232.355 745.843,234.415 746.411,237.772 746.98,238.724 747.548,240.659 748.116,240.293 748.685,240.11 749.253,238.784 749.821,238.318 750.39,238.075 750.958,236.95 751.526,237.877 752.095,236.754 752.663,236.53 753.231,237.247 753.8,237.841 754.368,238.424 754.936,239.04 755.505,239.949 756.073,239.388 756.641,236.889 757.21,236.571 757.778,237.246 758.346,237.023 758.915,236.788 759.483,236.464 760.052,237.332 760.62,238.194 761.188,238.734 761.757,238.298 762.325,237.721 762.893,237.392 763.462,236.879 764.03,236.683 764.598,235.21 765.167,234.831 765.735,233.533 766.303,232.445 766.872,230.351 767.44,233.369 768.008,230.188 768.577,228.214 769.145,227.503 769.713,228.706 770.282,226.749 770.85,225.842 771.418,224.432 771.987,225.921 772.555,225.308 773.123,228.976 773.692,229.097 774.26,227.458 774.829,226.951 775.397,227.443 775.965,228.733 776.534,229.156 777.102,229.44 777.67,228.527 778.239,228.816 778.807,230.155 779.375,230.412 779.944,229.737 780.512,230.034 781.08,228.378 781.649,228.668 782.217,228.946 782.785,230.395 783.354,229.545 783.922,229.719 784.49,232.117 785.059,231.394 785.627,231.552 786.195,231.683 786.764,232.844 787.332,232.758 787.9,234.947 788.469,233.823 789.037,232.872 789.606,232.855 790.174,235.022 790.742,235.913 791.311,237.104 791.879,236.818 792.447,237.461 793.016,237.443 793.584,238.257 794.152,239.07 794.721,238.45 795.289,237.961 795.857,237.49 796.426,238.264 796.994,238.196 797.562,237.586 798.131,237.323 798.699,236.97 799.267,232.415 799.836,234.539 800.404,232.48 800.972,231.599 801.541,232.707 802.109,234.07 802.678,232.827 803.246,232.533 803.814,230.519 804.383,228.596 804.951,227.813 805.519,226.978 806.088,227.259 806.656,226.611 807.224,228.099 807.793,228.295 808.361,231.641 808.929,232.885 809.498,232.946 810.066,234.061 810.634,234.049 811.203,235.236 811.771,235.255 812.339,234.971 812.908,235.772 813.476,234.634 814.044,235.473 814.613,235.55 815.181,234.317 815.749,231.426 816.318,231.647 816.886,231.619 817.455,231.605 818.023,230.669 818.591,231.984 819.16,231.071 819.728,231.231 820.296,232.472 820.865,232.475 821.433,231.66 822.001,231.773 822.57,232.903 823.138,232.802 823.706,232.922 824.275,234.187 824.843,228.944 825.411,229.231 825.98,229.495 826.548,231.026 827.116,230.274 827.685,231.409 828.253,231.613 828.821,232.736 829.39,233.018 829.958,232.797 830.526,232.824 831.095,230.927 831.663,233.184 832.232,232.118 832.8,231.217 833.368,229.457 833.937,228.913 834.505,229.177 835.073,228.391 835.642,228.605 836.21,229.814 836.778,233.196 837.347,233.319 837.915,233.359 838.483,234.602 839.052,233.433 839.62,233.396 840.188,231.344 840.757,229.409 841.325,230.67 841.893,230.947 842.462,230.145 843.03,230.427 843.598,231.812 844.167,231.947 844.735,235.093 845.304,234.049 845.872,231.9 846.44,231.794 847.009,231.85 847.577,232.907 848.145,235.2 848.714,235.072 849.282,235.055 849.85,235.893 850.419,235.823 850.987,233.487 851.555,233.483 852.124,233.139 852.692,234.047 853.26,233.091 853.829,233.078 854.397,232.925 854.965,233.868 855.534,236.062 856.102,235.736 856.67,234.744 857.239,235.642 857.807,234.448 858.375,234.159 858.944,235.071 859.512,233.995 860.081,234.985 860.649,233.787 861.217,233.713 861.786,232.418 862.354,234.528 862.922,236.48 863.491,238.318 864.059,239.073 864.627,238.714 865.196,238.126 865.764,236.64 866.332,236.531 866.901,237.207 867.469,237.736 868.037,237.308 868.606,239.115 869.174,236.546 869.742,237.251 870.311,237.902 870.879,237.609 871.447,236.366 872.016,233.86 872.584,233.837 873.152,234.661 873.721,234.523 874.289,236.39 874.858,236.998 875.426,235.552 875.994,234.282 876.563,233.826 877.131,232.473 877.699,231.41 878.268,232.282 878.836,232.309 879.404,230.356 879.973,229.536 880.541,230.543 881.109,230.508 881.678,230.484 882.246,229.513 882.814,230.693 883.383,231.73 883.951,230.733 884.519,231.959 885.088,230.009 885.656,230.157 886.224,228.995 886.793,229.981 887.361,229.91 887.93,231.11 888.498,230.019 889.066,230.017 889.635,228.223 890.203,228.64 890.771,227.872 891.34,227.091 891.908,229.444 892.476,228.71 893.045,227.998 893.613,231.441 894.181,229.472 894.75,229.66 895.318,228.061 895.886,227.321 896.455,227.701 897.023,228.133 897.591,231.484 898.16,232.576 898.728,230.613 899.296,230.844 899.865,231.954 900.433,232.076 901.001,231.222 901.57,232.364 902.138,230.433 902.707,229.765 903.275,229.986 903.843,231.617 904.412,233.911 904.98,233.618 905.548,233.594 906.117,232.501 906.685,231.411 907.253,232.498 907.822,232.529 908.39,231.369 908.958,230.389 909.527,232.682 910.095,230.468 910.663,228.7 911.232,227.006 911.8,228.407 912.368,228.62 912.937,227.842 913.505,227.254 914.073,228.527 914.642,228.795 915.21,229.025 915.779,228.352 916.347,228.727 916.915,227.803 917.484,230.36 918.052,229.738 918.62,230.963 919.189,230.89 919.757,231.337 920.325,231.398 920.894,231.586 921.462,230.709 922.03,230.786 922.599,230.946 923.167,232.221 923.735,233.291 924.304,236.442 924.872,236.201 925.44,239.049 926.009,237.539 926.577,236.31 927.145,237.132 927.714,237.857 928.282,235.383 928.85,234.284 929.419,233.404 929.987,234.543 930.556,234.65 931.124,236.571 931.692,235.224 932.261,236.07 932.829,236.812 933.397,237.394 933.966,235.887 934.534,235.757 935.102,233.675 935.671,231.554 936.239,231.495 936.807,229.571 937.376,231.853 937.944,232.063 938.512,230.119 939.081,230.347 939.649,231.602 940.217,232.426 940.786,231.614 941.354,235.974 941.922,235.526 942.491,235.317 943.059,234.229 943.627,234.95 944.196,236.894 944.764,235.378 945.333,234.294 945.901,234.114 946.469,231.925 947.038,229.782 947.606,228.793 948.174,232.156 948.743,232.404 949.311,232.318 949.879,231.286 950.448,231.213 951.016,231.288 951.584,232.523 952.153,232.815 952.721,231.847 953.289,231.972 953.858,233.088 954.426,235.284 954.994,233.034 955.563,232.836 956.131,230.621 956.699,230.782 957.268,229.943 957.836,228.065 958.405,229.391 958.973,230.486 959.541,229.682 960.11,228.976 960.678,232.235 961.246,233.2 961.815,231.282 962.383,230.343 962.951,229.374 963.52,228.396 964.088,230.79 964.656,231.816 965.225,233.809 965.793,234.709 966.361,235.597 966.93,236.202 967.498,234.894 968.066,235.83 968.635,235.625 969.203,234.217 969.771,235.223 970.34,234.843 970.908,237.624 971.476,239.254 972.045,238.696 972.613,238.332 973.182,238.841 973.75,238.218 974.318,239.675 974.887,238.085 975.455,238.606 976.023,237.259 976.592,234.55 977.16,235.318 977.728,234.909 978.297,234.57 978.865,234.293 979.433,234.315 980.002,232.963 980.57,234.833 981.138,234.308 981.707,233.89 982.275,232.639 982.843,231.436 983.412,230.487 983.98,228.686 984.548,227.952 985.117,227.036 985.685,226.087 986.253,226.399 986.822,225.797 987.39,226.997 987.959,227.075 988.527,226.259 989.095,228.769 989.664,228.901 990.232,229.259 990.8,227.35 991.369,227.673 991.937,227.885 992.505,229.103 993.074,231.125 993.642,231.131 994.21,230.951 994.779,231.914 995.347,231.78 995.915,230.769 996.484,230.735 997.052,231.917 997.62,230.887 998.189,229.811 998.757,228.79 999.325,232.086 999.894,232.1 1000.46,233.216 1001.03,229.882 1001.6,230.203 1002.17,230.183 1002.74,231.347 1003.3,231.452 1003.87,232.815 1004.44,233.694 1005.01,233.508 1005.58,235.217 1006.15,235.993 1006.71,235.498 1007.28,236.142 1007.85,235.972 1008.42,235.634 1008.99,233.344 1009.56,235.293 1010.12,235.019 1010.69,233.483 1011.26,231.339 1011.83,229.365 1012.4,228.702 1012.97,229.057 1013.53,231.274 1014.1,229.163 1014.67,229.268 1015.24,229.49 1015.81,228.789 1016.38,229.851 1016.94,228.987 1017.51,228.198 1018.08,228.601 1018.65,227.765 1019.22,229.182 1019.79,230.755 1020.35,230.94 1020.92,230.863 1021.49,229.847 1022.06,230.146 1022.63,229.561 1023.2,230.726 1023.76,229.814 1024.33,228.993 1024.9,228.131 1025.47,227.484 1026.04,226.942 1026.61,228.583 1027.17,229.08 1027.74,229.192 1028.31,230.526 1028.88,231.629 1029.45,233.924 1030.02,232.94 1030.58,233.063 1031.15,230.873 1031.72,231.239 1032.29,231.237 1032.86,230.284 1033.43,229.56 1033.99,230.824 1034.56,230.998 1035.13,229.924 1035.7,232.241 1036.27,231.292 1036.84,231.339 1037.4,233.633 1037.97,232.497 1038.54,233.545 1039.11,233.538 1039.68,234.337 1040.25,236.236 1040.81,235.871 1041.38,235.254 1041.95,233.926 1042.52,233.59 1043.09,232.545 1043.66,233.509 1044.22,235.362 1044.79,236.282 1045.36,234.932 1045.93,232.455 1046.5,232.391 1047.07,230.389 1047.63,229.648 1048.2,230.876 1048.77,231.15 1049.34,237.332 1049.91,236.901 1050.48,236.539 1051.05,238.198 1051.61,239.688 1052.18,236.932 1052.75,235.378 1053.32,234.129 1053.89,237.037 1054.46,237.786 1055.02,237.305 1055.59,233.739 1056.16,231.511 1056.73,232.598 1057.3,231.465 1057.87,231.551 1058.43,231.775 1059,231.816 1059.57,229.996 1060.14,229.227 1060.71,230.506 1061.28,230.492 1061.84,230.571 1062.41,231.587 1062.98,231.489 1063.55,232.384 1064.12,231.374 1064.69,231.379 1065.25,233.46 1065.82,232.353 1066.39,233.366 1066.96,233.25 1067.53,234.052 1068.1,233.774 1068.66,230.621 1069.23,228.589 1069.8,229.746 1070.37,230.95 1070.94,230.9 1071.51,234.033 1072.07,232.914 1072.64,232.752 1073.21,231.725 1073.78,232.766 1074.35,233.769 1074.92,234.719 1075.48,233.493 1076.05,231.952 1076.62,231.959 1077.19,231.757 1077.76,229.733 1078.33,230.837 1078.89,229.953 1079.46,229.066 1080.03,230.31 1080.6,227.262 1081.17,227.521 1081.74,227.859 1082.3,230.255 1082.87,230.352 1083.44,232.39 1084.01,230.053 1084.58,230.112 1085.15,232.243 1085.71,232.39 1086.28,230.286 1086.85,230.24 1087.42,231.263 1087.99,230.301 1088.56,230.201 1089.12,232.328 1089.69,233.582 1090.26,234.608 1090.83,233.255 1091.4,232.082 1091.97,231.238 1092.53,232.465 1093.1,232.411 1093.67,232.191 1094.24,232.235 1094.81,231.259 1095.38,232.401 1095.94,231.285 1096.51,229.388 1097.08,229.633 1097.65,230.732 1098.22,231.992 1098.79,227.758 1099.35,227.054 1099.92,227.588 1100.49,225.878 1101.06,226.307 1101.63,225.876 1102.2,226.373 1102.76,227.773 1103.33,227.941 1103.9,228.267 1104.47,230.836 1105.04,232.041 1105.61,232.04 1106.17,233.268 1106.74,232.154 1107.31,231.134 1107.88,229.316 1108.45,229.69 1109.02,228.91 1109.58,230.269 1110.15,231.736 1110.72,231.887 1111.29,231.038 1111.86,230.05 1112.43,232.416 1112.99,233.408 1113.56,233.525 1114.13,234.421 1114.7,232.239 1115.27,232.217 1115.84,234.125 1116.4,235.023 1116.97,233.846 1117.54,231.569 1118.11,231.582 1118.68,233.923 1119.25,232.836 1119.81,232.95 1120.38,233.018 1120.95,230.926 1121.52,231.229 1122.09,231.338 1122.66,231.349 1123.23,231.299 1123.79,228.519 1124.36,231.015 1124.93,233.119 1125.5,233.272 1126.07,234.194 1126.64,234.181 1127.2,234.2 1127.77,233.108 1128.34,233.177 1128.91,233.015 1129.48,235.206 1130.05,236.109 1130.61,235.936 1131.18,234.9 1131.75,235.547 1132.32,234.343 1132.89,231.93 1133.46,232.901 1134.02,232.69 1134.59,232.626 1135.16,233.725 1135.73,233.81 1136.3,231.921 1136.87,232.87 1137.43,231.753 1138,232.79 1138.57,234.886 1139.14,235.646 1139.71,234.321 1140.28,234.063 1140.84,233.99 1141.41,234.101 1141.98,231.879 1142.55,231.922 1143.12,230.868 1143.69,230.816 1144.25,230.811 1144.82,231.968 1145.39,231.866 1145.96,235.99 1146.53,236.799 1147.1,238.564 1147.66,238.901 1148.23,237.277 1148.8,235.938 1149.37,236.653 1149.94,236.256 1150.51,234.795 1151.07,233.574 1151.64,232.344 1152.21,231.248 1152.78,230.06 1153.35,233.252 1153.92,235.244 1154.48,235.108 1155.05,234.058 1155.62,234.966 1156.19,236.821 1156.76,234.63 1157.33,233.466 1157.89,233.527 1158.46,234.537 1159.03,234.071 1159.6,233 1160.17,231.853 1160.74,232.969 1161.3,231.823 1161.87,230.768 1162.44,230.774 1163.01,230.66 1163.58,230.581 1164.15,229.39 1164.71,229.529 1165.28,230.782 1165.85,230.666 1166.42,231.546 1166.99,230.566 1167.56,232.595 1168.12,232.646 1168.69,234.698 1169.26,235.418 1169.83,237.283 1170.4,237.846 1170.97,237.385 1171.53,238.051 1172.1,237.633 1172.67,238.247 1173.24,236.674 1173.81,236.196 1174.38,234.784 1174.94,234.383 1175.51,234.183 1176.08,233.901 1176.65,233.719 1177.22,235.203 1177.79,234.829 1178.35,234.426 1178.92,234.275 1179.49,235.178 1180.06,234.779 1180.63,234.572 1181.2,235.032 1181.76,234.63 1182.33,234.172 1182.9,232.906 1183.47,232.669 1184.04,231.462 1184.61,230.364 1185.17,231.364 1185.74,228.9 1186.31,228.759 1186.88,229.937 1187.45,229.931 1188.02,227.829 1188.58,227.744 1189.15,228.018 1189.72,228.295 1190.29,225.438 1190.86,226.121 1191.43,226.329 1192,226.556 1192.56,228.899 1193.13,228.979 1193.7,227.867 1194.27,227.09 1194.84,227.251 1195.41,227.436 1195.97,228.789 1196.54,224.741 1197.11,224.126 1197.68,224.647 1198.25,226.199 1198.82,227.697 1199.38,227.914 1199.95,226.352 1200.52,229.89 1201.09,229.918 1201.66,230.106 1202.23,231.055 1202.79,231.041 1203.36,231.148 1203.93,230.034 1204.5,229.226 1205.07,229.414 1205.64,229.635 1206.2,228.659 1206.77,227.906 1207.34,229.216 1207.91,230.48 1208.48,231.726 1209.05,232.641 1209.61,232.502 1210.18,230.341 1210.75,228.501 1211.32,229.758 1211.89,229.945 1212.46,229.112 1213.02,228.22 1213.59,229.436 1214.16,229.706 1214.73,231.867 1215.3,231.82 1215.87,231.676 1216.43,231.676 1217,231.718 1217.57,231.678 1218.14,232.562 1218.71,233.676 1219.28,234.699 1219.84,233.585 1220.41,233.631 1220.98,234.358 1221.55,234.084 1222.12,232.926 1222.69,232.702 1223.25,234.609 1223.82,234.456 1224.39,236.27 1224.96,234.884 1225.53,232.441 1226.1,231.383 1226.66,232.622 1227.23,233.505 1227.8,231.308 1228.37,232.366 1228.94,232.3 1229.51,235.424 1230.07,234.017 1230.64,233.812 1231.21,231.573 1231.78,230.502 1232.35,232.592 1232.92,231.574 1233.48,231.721 1234.05,231.695 1234.62,232.69 1235.19,232.572 1235.76,231.51 1236.33,231.567 1236.89,230.687 1237.46,230.804 1238.03,229.111 1238.6,228.131 1239.17,229.418 1239.74,229.515 1240.3,228.81 1240.87,226.091 1241.44,227.51 1242.01,226.671 1242.58,228.197 1243.15,228.465 1243.71,229.799 1244.28,231.1 1244.85,232.248 1245.42,231.142 1245.99,231.275 1246.56,232.282 1247.12,232.301 1247.69,231.332 1248.26,230.337 1248.83,230.373 1249.4,233.738 1249.97,231.395 1250.53,232.417 1251.1,232.397 1251.67,234.192 1252.24,233.138 1252.81,233.104 1253.38,233.923 1253.94,233.853 1254.51,231.647 1255.08,230.724 1255.65,228.987 1256.22,232.381 1256.79,232.265 1257.35,233.538 1257.92,233.282 1258.49,232.982 1259.06,232.04 1259.63,233.089 1260.2,233.974 1260.76,232.944 1261.33,232.98 1261.9,233.975 1262.47,234.035 1263.04,234.694 1263.61,236.511 1264.18,235.143 1264.74,231.626 1265.31,232.664 1265.88,232.641 1266.45,230.655 1267.02,230.731 1267.59,230.957 1268.15,229.941 1268.72,229.103 1269.29,229.344 1269.86,228.788 1270.43,228.909 1271,231.424 1271.56,230.559 1272.13,231.716 1272.7,234.85 1273.27,236.784 1273.84,236.479 1274.41,237.374 1274.97,234.992 1275.54,232.646 1276.11,232.456 1276.68,233.285 1277.25,232.975 1277.82,231.675 1278.38,231.728 1278.95,231.619 1279.52,231.535 1280.09,231.797 1280.66,230.833 1281.23,230.928 1281.79,232.08 1282.36,230.961 1282.93,230.87 1283.5,231.943 1284.07,234.046 1284.64,232.775 1285.2,231.706 1285.77,231.826 1286.34,231.65 1286.91,231.91 1287.48,231.895 1288.05,231.782 1288.61,231.808 1289.18,232.909 1289.75,231.691 1290.32,233.567 1290.89,233.375 1291.46,231.267 1292.02,231.57 1292.59,232.628 1293.16,231.66 1293.73,232.842 1294.3,233.839 1294.87,235.459 1295.43,236.176 1296,236.067 1296.57,236.007 1297.14,234.722 1297.71,233.644 1298.28,232.459 1298.84,229.411 1299.41,229.566 1299.98,229.652 1300.55,229.806 1301.12,230.253 1301.69,231.402 1302.25,232.454 1302.82,233.501 1303.39,233.374 1303.96,233.314 1304.53,235.248 1305.1,234.058 1305.66,233.027 1306.23,232.872 1306.8,233.667 1307.37,233.763 1307.94,233.569 1308.51,235.494 1309.07,235.284 1309.64,235.026 1310.21,232.802 1310.78,233.669 1311.35,234.627 1311.92,233.343 1312.48,232 1313.05,231.986 1313.62,231.227 1314.19,231.248 1314.76,231.258 1315.33,231.258 1315.89,231.132 1316.46,228.99 1317.03,230.313 1317.6,226.252 1318.17,228.662 1318.74,229.693 1319.3,229.983 1319.87,228.002 1320.44,227.06 1321.01,228.235 1321.58,228.806 1322.15,226.901 1322.71,227.167 1323.28,228.652 1323.85,228.885 1324.42,229.014 1324.99,228.214 1325.56,229.688 1326.12,232.104 1326.69,234.196 1327.26,232.772 1327.83,231.631 1328.4,232.555 1328.97,232.503 1329.53,230.093 1330.1,231.24 1330.67,232.26 1331.24,232.098 1331.81,233.241 1332.38,234.195 1332.94,233.058 1333.51,234.07 1334.08,234.003 1334.65,234.931 1335.22,234.786 1335.79,232.599 1336.36,232.44 1336.92,233.237 1337.49,232.109 1338.06,230.85 1338.63,232.07 1339.2,231.156 1339.77,228.969 1340.33,230.563 1340.9,230.655 1341.47,229.817 1342.04,229.029 1342.61,229.25 1343.18,231.808 1343.74,232.599 1344.31,233.66 1344.88,233.772 1345.45,231.41 1346.02,230.328 1346.59,230.483 1347.15,231.618 1347.72,233.702 1348.29,234.508 1348.86,233.146 1349.43,232.303 1350,232.267 1350.56,231.333 1351.13,231.448 1351.7,233.69 1352.27,232.59 1352.84,230.442 1353.41,230.375 1353.97,232.54 1354.54,231.551 1355.11,231.243 1355.68,234.356 1356.25,234.002 1356.82,233.652 1357.38,234.672 1357.95,232.545 1358.52,231.501 1359.09,232.596 1359.66,232.552 1360.23,232.648 1360.79,230.434 1361.36,229.415 1361.93,229.881 1362.5,232.286 1363.07,232.126 1363.64,231.104 1364.2,230.973 1364.77,230.88 1365.34,233.147 1365.91,232.068 1366.48,231.19 1367.05,230.562 1367.61,230.55 1368.18,229.497 1368.75,229.486 1369.32,226.747 1369.89,227.324 1370.46,227.821 1371.02,229.261 1371.59,231.59 1372.16,231.471 1372.73,231.387 1373.3,231.658 1373.87,229.488 1374.43,231.643 1375,232.655 1375.57,232.651 1376.14,233.714 1376.71,232.655 1377.28,233.655 1377.84,229.524 1378.41,228.742 1378.98,229.138 1379.55,229.192 1380.12,229.488 1380.69,227.68 1381.25,227.062 1381.82,227.297 1382.39,228.815 1382.96,227.949 1383.53,230.401 1384.1,230.584 1384.66,233.767 1385.23,234.845 1385.8,236.759 1386.37,233.437 1386.94,235.388 1387.51,234.03 1388.07,230.924 1388.64,232.09 1389.21,233.327 1389.78,233.178 1390.35,232.347 1390.92,233.67 1391.48,233.437 1392.05,233.482 1392.62,233.315 1393.19,237.543 1393.76,242.414 1394.33,241.593 1394.89,240.005 1395.46,239.252 1396.03,236.696 1396.6,235.234 1397.17,234.935 1397.74,234.446 1398.3,233.008 1398.87,233.827 1399.44,234.578 1400.01,234.5 1400.58,232.117 1401.15,232.031 1401.71,234.214 1402.28,231.855 1402.85,230.697 1403.42,230.955 1403.99,232.947 1404.56,232.723 1405.13,232.616 1405.69,233.291 1406.26,233.156 1406.83,235.146 1407.4,234.592 1407.97,235.277 1408.54,232.799 1409.1,232.697 1409.67,231.565 1410.24,233.635 1410.81,235.682 1411.38,235.371 1411.95,237.146 1412.51,236.566 1413.08,236.253 1413.65,235.56 1414.22,231.765 1414.79,230.74 1415.36,230.82 1415.92,230.867 1416.49,231.781 1417.06,230.733 1417.63,230.764 1418.2,228.897 1418.77,227.991 1419.33,227.185 1419.9,227.459 1420.47,226.449 1421.04,226.649 1421.61,229.078 1422.18,227.182 1422.74,230.574 1423.31,229.553 1423.88,230.684 1424.45,228.635 1425.02,229.916 1425.59,229.036 1426.15,229.003 1426.72,228.239 1427.29,226.474 1427.86,227.633 1428.43,230.053 1429,230.182 1429.56,229.399 1430.13,229.888 1430.7,230.843 1431.27,227.798 1431.84,227.309 1432.41,227.474 1432.97,228.593 1433.54,228.795 1434.11,228.85 1434.68,229.133 1435.25,229.423 1435.82,229.488 1436.38,228.686 1436.95,227.997 1437.52,227.377 1438.09,228.645 1438.66,225.813 1439.23,228.181 1439.79,229.563 1440.36,228.857 1440.93,229.1 1441.5,230.459 1442.07,230.554 1442.64,230.832 1443.2,231.023 1443.77,232.377 1444.34,231.554 1444.91,232.576 1445.48,233.418 1446.05,233.449 1446.61,234.335 1447.18,234.463 1447.75,235.352 1448.32,233.256 1448.89,232.006 1449.46,232.289 1450.02,228.102 1450.59,228.336 1451.16,229.668 1451.73,230.968 1452.3,232.355 1452.87,234.323 1453.43,234.468 1454,232.261 1454.57,233.222 1455.14,233.043 1455.71,233.075 1456.28,233.847 1456.84,233.881 1457.41,235.689 1457.98,234.739 1458.55,232.434 1459.12,232.556 1459.69,232.82 1460.25,232.667 1460.82,234.686 1461.39,235.549 1461.96,234.431 1462.53,234.188 1463.1,234.123 1463.66,235.017 1464.23,232.8 1464.8,232.539 1465.37,232.512 1465.94,230.154 1466.51,230.237 1467.07,230.444 1467.64,229.805 1468.21,232.252 1468.78,230.373 1469.35,230.311 1469.92,230.224 1470.48,232.515 1471.05,229.649 1471.62,230.924 1472.19,231.143 1472.76,231.396 1473.33,230.447 1473.89,230.646 1474.46,232.779 1475.03,234.017 1475.6,231.931 1476.17,232.969 1476.74,232.103 1477.31,232.289 1477.87,233.441 1478.44,235.593 1479.01,236.374 1479.58,236.195 1480.15,235.738 1480.72,234.594 1481.28,233.202 1481.85,232.922 1482.42,230.926 1482.99,227.776 1483.56,225.985 1484.13,227.482 1484.69,229.793 1485.26,229.632 1485.83,228.697 1486.4,227.014 1486.97,226.672 1487.54,227.075 1488.1,229.521 1488.67,227.773 1489.24,227.063 1489.81,228.682 1490.38,231.12 1490.95,233.153 1491.51,235.238 1492.08,234.174 1492.65,234.916 1493.22,233.582 1493.79,232.35 1494.36,233.559 1494.92,233.269 1495.49,233.297 1496.06,231.121 1496.63,231.392 1497.2,233.605 1497.77,233.371 1498.33,231.143 1498.9,234.201 1499.47,233.123 1500.04,235.314 1500.61,235.022 1501.18,234.813 1501.74,233.541 1502.31,231.436 1502.88,230.532 1503.45,229.661 1504.02,228.795 1504.59,229.218 1505.15,229.505 1505.72,228.773 1506.29,228.85 1506.86,229.08 1507.43,231.36 1508,229.163 1508.56,228.207 1509.13,227.436 1509.7,227.758 1510.27,228.07 1510.84,228.386 1511.41,227.431 1511.97,227.854 1512.54,227.043 1513.11,226.472 1513.68,225.084 1514.25,226.687 1514.82,227.202 1515.38,228.673 1515.95,227.804 1516.52,230.322 1517.09,230.381 1517.66,229.562 1518.23,228.794 1518.79,229.126 1519.36,226.425 1519.93,227.898 1520.5,227.541 1521.07,228.144 1521.64,228.488 1522.2,228.762 1522.77,229.94 1523.34,229.26 1523.91,230.735 1524.48,230.912 1525.05,233.127 1525.61,234.124 1526.18,233.911 1526.75,232.879 1527.32,233.779 1527.89,232.773 1528.46,234.841 1529.02,233.73 1529.59,233.81 1530.16,235.932 1530.73,236.752 1531.3,234.497 1531.87,235.474 1532.43,234.396 1533,234.173 1533.57,236.184 1534.14,237.774 1534.71,236.461 1535.28,235.174 1535.84,235.279 1536.41,231.144 1536.98,232.431 1537.55,234.609 1538.12,236.545 1538.69,236.399 1539.25,235.106 1539.82,235.17 1540.39,236.092 1540.96,234.806 1541.53,234.552 1542.1,232.297 1542.66,232.385 1543.23,233.519 1543.8,232.381 1544.37,233.446 1544.94,231.233 1545.51,232.283 1546.08,233.25 1546.64,233.295 1547.21,234.522 1547.78,232.294 1548.35,233.479 1548.92,233.484 1549.49,234.568 1550.05,234.573 1550.62,235.601 1551.19,237.527 1551.76,237.346 1552.33,236.088 1552.9,233.695 1553.46,233.526 1554.03,233.131 1554.6,234.016 1555.17,233.805 1555.74,234.744 1556.31,235.686 1556.87,236.355 1557.44,239.137 1558.01,237.686 1558.58,239.373 1559.15,237.612 1559.72,238.1 1560.28,239.737 1560.85,238.156 1561.42,237.476 1561.99,234.125 1562.56,232.968 1563.13,235.801 1563.69,236.805 1564.26,236.27 1564.83,234.97 1565.4,233.972 1565.97,232.848 1566.54,234.574 1567.1,232.254 1567.67,229.069 1568.24,228.237 1568.81,228.641 1569.38,227.729 1569.95,226.981 1570.51,226.563 1571.08,228.008 1571.65,232.287 1572.22,231.189 1572.79,230.237 1573.36,228.366 1573.92,229.456 1574.49,227.615 1575.06,229.851 1575.63,232.885 1576.2,233.74 1576.77,229.623 1577.33,231.86 1577.9,232.688 1578.47,231.561 1579.04,233.339 1579.61,233.256 1580.18,233.951 1580.74,234.833 1581.31,233.502 1581.88,232.569 1582.45,231.659 1583.02,233.547 1583.59,232.23 1584.15,231.029 1584.72,230.897 1585.29,231.675 1585.86,230.621 1586.43,232.448 1587,231.407 1587.56,229.461 1588.13,226.237 1588.7,227.421 1589.27,226.593 1589.84,224.859 1590.41,226.022 1590.97,226.486 1591.54,228.788 1592.11,231.035 1592.68,228.18 1593.25,229.446 1593.82,229.654 1594.38,226.758 1594.95,225.138 1595.52,222.54 1596.09,224.081 1596.66,222.476 1597.23,222.116 1597.79,222.808 1598.36,225.619 1598.93,225.076 1599.5,227.811 1600.07,227.051 1600.64,227.702 1601.2,230.527 1601.77,231.927 1602.34,232.885 1602.91,230.941 1603.48,230.131 1604.05,231.197 1604.61,232.385 1605.18,233.396 1605.75,235.432 1606.32,235.435 1606.89,236.413 1607.46,236.344 1608.02,238.146 1608.59,239.79 1609.16,239.332 1609.73,238.864 1610.3,238.679 1610.87,238.314 1611.43,239.931 1612,238.562 1612.57,238.131 1613.14,239.868 1613.71,239.405 1614.28,240.027 1614.84,238.183 1615.41,238.691 1615.98,237.348 1616.55,236.776 1617.12,238.575 1617.69,238.088 1618.26,234.716 1618.82,233.54 1619.39,234.28 1619.96,233.04 1620.53,230.92 1621.1,233.917 1621.67,234.674 1622.23,233.223 1622.8,233.08 1623.37,230.673 1623.94,231.594 1624.51,232.458 1625.08,233.346 1625.64,232.057 1626.21,230.927 1626.78,231.91 1627.35,230.545 1627.92,231.704 1628.49,230.525 1629.05,231.615 1629.62,232.294 1630.19,231.14 1630.76,229.832 1631.33,229.021 1631.9,229.045 1632.46,227.225 1633.03,227.385 1633.6,227.936 1634.17,228.211 1634.74,228.376 1635.31,228.587 1635.87,229.774 1636.44,230 1637.01,229.015 1637.58,228.305 1638.15,228.579 1638.72,227.939 1639.28,229.385 1639.85,228.659 1640.42,228.955 1640.99,229.138 1641.56,229.196 1642.13,228.384 1642.69,228.759 1643.26,230.04 1643.83,230.279 1644.4,232.387 1644.97,231.408 1645.54,231.46 1646.1,231.553 1646.67,230.755 1647.24,230.878 1647.81,231.808 1648.38,231.921 1648.95,232.815 1649.51,232.665 1650.08,232.601 1650.65,232.282 1651.22,233.283 1651.79,233.378 1652.36,234.465 1652.92,234.27 1653.49,234.316 1654.06,234.065 1654.63,233.751 1655.2,233.422 1655.77,231.418 1656.33,230.603 1656.9,227.665 1657.47,225.824 1658.04,225.384 1658.61,221.745 1659.18,223.468 1659.74,222.221 1660.31,222.895 1660.88,223.597 1661.45,224.121 1662.02,225.637 1662.59,226.289 1663.15,228.751 1663.72,228.881 1664.29,228.242 1664.86,229.751 1665.43,230.902 1666,231.184 1666.56,233.25 1667.13,233.362 1667.7,236.469 1668.27,238.334 1668.84,238.957 1669.41,238.518 1669.97,234.28 1670.54,234.426 1671.11,233.235 1671.68,235.218 1672.25,235.026 1672.82,237.008 1673.38,236.649 1673.95,235.317 1674.52,234.182 1675.09,237.038 1675.66,238.626 1676.23,238.099 1676.79,236.54 1677.36,237.37 1677.93,237.826 1678.5,236.397 1679.07,236.112 1679.64,234.714 1680.2,234.555 1680.77,234.51 1681.34,235.542 1681.91,235.4 1682.48,235.196 1683.05,231.854 1683.61,232.732 1684.18,232.771 1684.75,232.942 1685.32,231.626 1685.89,232.932 1686.46,232.792 1687.02,231.726 1687.59,230.788 1688.16,230.737 1688.73,231.793 1689.3,231.936 1689.87,229.756 1690.44,227.701 1691,225.869 1691.57,229.411 1692.14,231.714 1692.71,231.455 1693.28,231.617 1693.85,233.54 1694.41,233.31 1694.98,237.142 1695.55,236.821 1696.12,236.419 1696.69,237.104 1697.26,235.749 1697.82,236.51 1698.39,236.103 1698.96,234.83 1699.53,234.599 1700.1,235.282 1700.67,233.844 1701.23,233.985 1701.8,231.597 1702.37,227.211 1702.94,226.313 1703.51,224.644 1704.08,224.318 1704.64,224.836 1705.21,228.316 1705.78,229.312 1706.35,235.696 1706.92,233.449 1707.49,231.174 1708.05,231.978 1708.62,233.328 1709.19,235.336 1709.76,237.257 1710.33,235.871 1710.9,234.473 1711.46,234.14 1712.03,233.007 1712.6,231.914 1713.17,231.901 1713.74,231.684 1714.31,232.738 1714.87,232.78 1715.44,232.826 1716.01,231.743 1716.58,231.741 1717.15,232.815 1717.72,233.554 1718.28,233.286 1718.85,233.155 1719.42,232.992 1719.99,231.694 1720.56,231.512 1721.13,231.387 1721.69,232.436 1722.26,232.396 1722.83,233.288 1723.4,231.117 1723.97,231.018 1724.54,230.626 1725.1,232.751 1725.67,231.628 1726.24,232.476 1726.81,234.546 1727.38,235.199 1727.95,234.019 1728.51,233.775 1729.08,233.641 1729.65,231.324 1730.22,231.214 1730.79,229.21 1731.36,227.474 1731.92,227.685 1732.49,230.143 1733.06,232.324 1733.63,229.709 1734.2,231.763 1734.77,232.757 1735.33,231.545 1735.9,232.665 1736.47,233.638 1737.04,233.344 1737.61,232.318 1738.18,233.249 1738.74,234.074 1739.31,234.971 1739.88,234.852 1740.45,236.538 1741.02,234.982 1741.59,234.717 1742.15,234.341 1742.72,233.109 1743.29,231.76 1743.86,231.706 1744.43,230.56 1745,231.615 1745.56,229.433 1746.13,230.761 1746.7,229.604 1747.27,228.765 1747.84,226.936 1748.41,224.989 1748.97,225.554 1749.54,225.992 1750.11,225.414 1750.68,226.891 1751.25,224.052 1751.82,224.737 1752.38,224.145 1752.95,225.707 1753.52,225.143 1754.09,227.802 1754.66,227.25 1755.23,227.459 1755.79,230.66 1756.36,226.828 1756.93,227.325 1757.5,227.817 1758.07,227.275 1758.64,226.65 1759.21,224.149 1759.77,224.712 1760.34,223.253 1760.91,222.037 1761.48,223.81 1762.05,226.608 1762.62,225.001 1763.18,225.58 1763.75,226.272 1764.32,227.515 1764.89,228.975 1765.46,228.521 1766.03,228.837 1766.59,231.225 1767.16,231.329 1767.73,231.541 1768.3,230.674 1768.87,229.778 1769.44,232.043 1770,232.191 1770.57,233.214 1771.14,232.106 1771.71,232.231 1772.28,233.415 1772.85,233.243 1773.41,232.387 1773.98,235.489 1774.55,234.456 1775.12,235.346 1775.69,234.14 1776.26,238.165 1776.82,238.877 1777.39,240.583 1777.96,238.266 1778.53,236.059 1779.1,235.684 1779.67,234.629 1780.23,236.449 1780.8,240.572 1781.37,239.904 1781.94,240.515 1782.51,238.991 1783.08,239.527 1783.64,238.981 1784.21,238.501 1784.78,238.162 1785.35,238.575 1785.92,238.185 1786.49,237.958 1787.05,237.402 1787.62,237.146 1788.19,236.601 1788.76,236.41 1789.33,236.3 1789.9,238.255 1790.46,236.816 1791.03,239.606 1791.6,239.025 1792.17,238.429 1792.74,237.088 1793.31,235.654 1793.87,235.293 1794.44,234.907 1795.01,234.471 1795.58,231.012 1796.15,230.839 1796.72,229.666 1797.28,228.436 1797.85,229.578 1798.42,228.397 1798.99,228.455 1799.56,231.878 1800.13,230.577 1800.69,230.534 1801.26,231.509 1801.83,233.587 1802.4,232.576 1802.97,231.276 1803.54,234.319 1804.1,232.022 1804.67,230.794 1805.24,229.63 1805.81,228.767 1806.38,229.989 1806.95,229.975 1807.51,230.147 1808.08,230.059 1808.65,230.1 1809.22,228.106 1809.79,223.948 1810.36,226.477 1810.92,226.577 1811.49,224.995 1812.06,225.317 1812.63,224.54 1813.2,224.05 1813.77,225.456 1814.33,224.649 1814.9,225.237 1815.47,223.542 1816.04,227.232 1816.61,227.413 1817.18,227.744 1817.74,228.222 1818.31,230.6 1818.88,233.742 1819.45,232.6 1820.02,233.741 1820.59,234.693 1821.15,233.606 1821.72,233.518 1822.29,233.578 1822.86,232.426 1823.43,230.35 1824,231.557 1824.56,230.303 1825.13,229.372 1825.7,230.573 1826.27,230.603 1826.84,230.53 1827.41,228.412 1827.97,228.551 1828.54,229.925 1829.11,228.874 1829.68,227.089 1830.25,227.607 1830.82,229.011 1831.39,228.495 1831.95,230.886 1832.52,230.931 1833.09,230.176 1833.66,231.458 1834.23,230.458 1834.8,230.589 1835.36,232.87 1835.93,232.915 1836.5,231.879 1837.07,233.045 1837.64,231.821 1838.21,233.093 1838.77,232.142 1839.34,231.042 1839.91,230.176 1840.48,234.618 1841.05,235.44 1841.62,237.518 1842.18,236.196 1842.75,234.926 1843.32,234.733 1843.89,234.438 1844.46,232.354 1845.03,232.509 1845.59,231.635 1846.16,230.733 1846.73,231.73 1847.3,231.814 1847.87,231.101 1848.44,229.292 1849,229.523 1849.57,231.901 1850.14,232.775 1850.71,233.413 1851.28,232.412 1851.85,232.437 1852.41,232.437 1852.98,233.472 1853.55,231.284 1854.12,230.251 1854.69,230.364 1855.26,230.488 1855.82,231.775 1856.39,231.558 1856.96,232.494 1857.53,231.31 1858.1,232.379 1858.67,232.646 1859.23,232.57 1859.8,231.633 1860.37,231.756 1860.94,233.787 1861.51,231.586 1862.08,231.642 1862.64,233.922 1863.21,234.767 1863.78,232.459 1864.35,229.303 1864.92,229.671 1865.49,228.999 1866.05,228.199 1866.62,228.605 1867.19,227.781 1867.76,227.124 1868.33,228.735 1868.9,231.298 1869.46,233.41 1870.03,234.366 1870.6,234.047 1871.17,234.83 1871.74,235.774 1872.31,236.674 1872.87,237.151 1873.44,238.883 1874.01,238.468 1874.58,239.034 1875.15,240.517 1875.72,239.927 1876.28,238.162 1876.85,236.844 1877.42,236.457 1877.99,235.136 1878.56,234.085 1879.13,234.055 1879.69,232.827 1880.26,232.819 1880.83,232.638 1881.4,232.563 1881.97,235.494 1882.54,236.136 1883.1,231.538 1883.67,230.564 1884.24,231.659 1884.81,231.485 1885.38,230.469 1885.95,231.403 1886.51,229.379 1887.08,228.578 1887.65,229.924 1888.22,229.81 1888.79,230.854 1889.36,228.732 1889.92,229.054 1890.49,230.256 1891.06,229.251 1891.63,230.32 1892.2,230.744 1892.77,232.613 1893.33,232.446 1893.9,232.478 1894.47,230.2 1895.04,230.366 1895.61,231.406 1896.18,231.504 1896.74,231.415 1897.31,229.294 1897.88,229.346 1898.45,231.465 1899.02,231.421 1899.59,231.392 1900.16,231.314 1900.72,231.248 1901.29,232.284 1901.86,235.407 1902.43,235.922 1903,238.638 1903.57,237.09 1904.13,236.813 1904.7,237.622 1905.27,238.44 1905.84,237.937 1906.41,235.458 1906.98,236.209 1907.54,235.685 1908.11,235.121 1908.68,237.007 1909.25,238.312 1909.82,237.846 1910.39,238.422 1910.95,237.77 1911.52,237.156 1912.09,234.361 1912.66,236.317 1913.23,238.211 1913.8,237.438 1914.36,236.807 1914.93,235.475 1915.5,234.13 1916.07,232.749 1916.64,234.49 1917.21,234.241 1917.77,232.721 1918.34,234.668 1918.91,234.36 1919.48,233.888 1920.05,232.468 1920.62,232.175 1921.18,230.005 1921.75,229.907 1922.32,228.797 1922.89,225.882 1923.46,225.295 1924.03,226.574 1924.59,225.823 1925.16,226.214 1925.73,226.523 1926.3,226.802 1926.87,225.956 1927.44,225.29 1928,226.079 1928.57,226.337 1929.14,225.776 1929.71,229.376 1930.28,228.432 1930.85,228.841 1931.41,232.105 1931.98,229.907 1932.55,229.742 1933.12,227.942 1933.69,228.119 1934.26,227.204 1934.82,230.671 1935.39,230.85 1935.96,230.768 1936.53,231.419 1937.1,232.35 1937.67,232.199 1938.23,232.008 1938.8,229.892 1939.37,229.069 1939.94,228.144 1940.51,227.447 1941.08,226.796 1941.64,225.394 1942.21,223.772 1942.78,225.212 1943.35,223.661 1943.92,225.33 1944.49,226.844 1945.05,227.437 1945.62,228.811 1946.19,228.984 1946.76,228.305 1947.33,232.922 1947.9,233.796 1948.46,233.573 1949.03,232.344 1949.6,233.323 1950.17,232.341 1950.74,230.309 1951.31,228.39 1951.87,225.559 1952.44,223.89 1953.01,223.499 1953.58,222.237 1954.15,220.01 1954.72,219.895 1955.28,222.783 1955.85,223.408 1956.42,225.301 1956.99,230.05 1957.56,231.573 1958.13,234.832 1958.69,234.68 1959.26,233.6 1959.83,231.428 1960.4,231.607 1960.97,229.818 1961.54,230.151 1962.1,231.741 1962.67,231.172 1963.24,231.467 1963.81,231.661 1964.38,231.782 1964.95,234.988 1965.51,234.873 1966.08,235.866 1966.65,234.742 1967.22,233.565 1967.79,233.702 1968.36,235.974 1968.92,237.78 1969.49,238.273 1970.06,234.96 1970.63,234.756 1971.2,236.762 1971.77,238.523 1972.34,236.138 1972.9,237.02 1973.47,235.645 1974.04,234.502 1974.61,235.415 1975.18,234.014 1975.75,230.713 1976.31,230.92 1976.88,230.147 1977.45,230.271 1978.02,231.337 1978.59,232.482 1979.16,231.48 1979.72,232.642 1980.29,231.685 1980.86,232.861 1981.43,231.753 1982,229.718 1982.57,227.739 1983.13,229.17 1983.7,230.44 1984.27,231.592 1984.84,231.88 1985.41,229.867 1985.98,229.834 1986.54,230.024 1987.11,230.094 1987.68,232.47 1988.25,231.415 1988.82,232.407 1989.39,234.583 1989.95,234.427 1990.52,234.314 1991.09,233.323 1991.66,235.444 1992.23,235.182 1992.8,235.052 1993.36,234.074 1993.93,233.971 1994.5,234.859 1995.07,233.622 1995.64,233.702 1996.21,234.837 1996.77,233.425 1997.34,233.463 1997.91,233.26 1998.48,233.372 1999.05,235.508 1999.62,233.091 2000.18,232.829 2000.75,232.777 2001.32,234.654 2001.89,232.345 2002.46,233.489 2003.03,231.436 2003.59,232.615 2004.16,232.597 2004.73,231.424 2005.3,233.602 2005.87,233.598 2006.44,236.728 2007,237.328 2007.57,237.942 2008.14,236.715 2008.71,236.301 2009.28,234.979 2009.85,235.881 2010.41,234.587 2010.98,235.363 2011.55,233.108 2012.12,234.018 2012.69,235.796 2013.26,236.307 2013.82,237.054 2014.39,236.602 2014.96,235.385 2015.53,232.041 2016.1,230.947 2016.67,233.096 2017.23,231.966 2017.8,233.977 2018.37,235.003 2018.94,234.846 2019.51,235.562 2020.08,236.199 2020.64,237.733 2021.21,237.364 2021.78,236.751 2022.35,237.476 2022.92,237.108 2023.49,235.642 2024.05,235.272 2024.62,235.061 2025.19,235.002 2025.76,236.88 2026.33,236.418 2026.9,236.034 2027.46,235.502 2028.03,236.271 2028.6,235.497 2029.17,235.069 2029.74,235.707 2030.31,235.357 2030.87,230.753 2031.44,230.65 2032.01,229.629 2032.58,230.803 2033.15,230.699 2033.72,230.766 2034.28,231.674 2034.85,232.726 2035.42,232.565 2035.99,232.397 2036.56,232.186 2037.13,233.166 2037.69,233.678 2038.26,232.373 2038.83,232.858 2039.4,233.811 2039.97,233.465 2040.54,237.328 2041.11,235.726 2041.67,234.223 2042.24,232.633 2042.81,233.52 2043.38,234.316 2043.95,234.982 2044.52,232.503 2045.08,232.362 2045.65,232.193 2046.22,231.715 2046.79,231.534 2047.36,231.297 2047.93,232.394 2048.49,232.22 2049.06,231.346 2049.63,230.183 2050.2,230.983 2050.77,232.028 2051.34,233.064 2051.9,231.463 2052.47,231.235 2053.04,230.107 2053.61,230.094 2054.18,231.053 2054.75,230.009 2055.31,229.993 2055.88,230.003 2056.45,229.879 2057.02,228.827 2057.59,229.906 2058.16,229.812 2058.72,229.703 2059.29,227.427 2059.86,226.446 2060.43,227.589 2061,226.75 2061.57,226.92 2062.13,228.016 2062.7,229.216 2063.27,229.329 2063.84,230.417 2064.41,231.508 2064.98,232.456 2065.54,233.23 2066.11,231.784 2066.68,230.578 2067.25,231.746 2067.82,230.508 2068.39,231.412 2068.95,232.157 2069.52,229.932 2070.09,228.918 2070.66,227.97 2071.23,227.045 2071.8,227.474 2072.36,226.608 2072.93,227.197 2073.5,227.335 2074.07,228.49 2074.64,227.698 2075.21,226.906 2075.77,228.324 2076.34,232.568 2076.91,233.44 2077.48,233.209 2078.05,233.02 2078.62,232.832 2079.18,231.741 2079.75,231.904 2080.32,232.889 2080.89,233.898 2081.46,234.709 2082.03,232.215 2082.59,231.165 2083.16,231.25 2083.73,231.152 2084.3,232.052 2084.87,229.8 2085.44,229.931 2086,229.113 2086.57,229.321 2087.14,228.492 2087.71,228.54 2088.28,229.793 2088.85,230.079 2089.41,231.244 2089.98,232.313 2090.55,234.294 2091.12,234.02 2091.69,233.712 2092.26,231.503 2092.82,231.588 2093.39,230.515 2093.96,231.664 2094.53,231.67 2095.1,231.67 2095.67,231.722 2096.23,230.854 2096.8,228.839 2097.37,229.991 2097.94,227.854 2098.51,224.877 2099.08,225.403 2099.64,225.678 2100.21,225.019 2100.78,223.578 2101.35,225.05 2101.92,223.473 2102.49,225.145 2103.05,225.73 2103.62,223.75 2104.19,225.596 2104.76,226.02 2105.33,223.503 2105.9,225.386 2106.46,226.799 2107.03,228.382 2107.6,229.875 2108.17,229.88 2108.74,232.116 2109.31,232.183 2109.87,231.348 2110.44,231.635 2111.01,232.565 2111.58,234.766 2112.15,234.733 2112.72,234.436 2113.29,235.212 2113.85,235.149 2114.42,234.875 2114.99,235.564 2115.56,234.278 2116.13,236.997 2116.7,235.777 2117.26,234.381 2117.83,235.123 2118.4,234.843 2118.97,234.829 2119.54,236.928 2120.11,236.493 2120.67,237.268 2121.24,234.73 2121.81,235.549 2122.38,234.298 2122.95,234.877 2123.52,235.602 2124.08,237.405 2124.65,234.102 2125.22,234.078 2125.79,234.039 2126.36,231.91 2126.93,232.668 2127.49,232.592 2128.06,232.385 2128.63,231.081 2129.2,231.342 2129.77,229.161 2130.34,229.413 2130.9,229.601 2131.47,229.637 2132.04,229.867 2132.61,229.848 2133.18,230.825 2133.75,233.084 2134.31,231.975 2134.88,236.17 2135.45,234.942 2136.02,233.839 2136.59,231.728 2137.16,231.733 2137.72,229.724 2138.29,228.741 2138.86,230.162 2139.43,230.382 2140,230.483 2140.57,230.712 2141.13,228.768 2141.7,231.009 2142.27,232.07 2142.84,232.088 2143.41,235.185 2143.98,237.186 2144.54,239.779 2145.11,239.033 2145.68,239.479 2146.25,239.244 2146.82,238.568 2147.39,238.01 2147.95,238.606 2148.52,237.96 2149.09,235.32 2149.66,235.013 2150.23,235.451 2150.8,234.109 2151.36,235.079 2151.93,232.741 2152.5,232.784 2153.07,234.706 2153.64,234.495 2154.21,232.242 2154.77,231.968 2155.34,232.658 2155.91,230.49 2156.48,230.789 2157.05,231.846 2157.62,231.798 2158.18,231.912 2158.75,230.936 2159.32,231.007 2159.89,228.019 \"/>\n<path clip-path=\"url(#clip170)\" d=\"M1649.46 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1649.46 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip170)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1649.46,1245.03 2150.8,1245.03 2150.8,1089.51 1649.46,1089.51 1649.46,1245.03 \"/>\n<polyline clip-path=\"url(#clip170)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1669.53,1141.35 1789.98,1141.35 \"/>\n<path clip-path=\"url(#clip170)\" d=\"M1817.46 1125.34 L1817.46 1132.71 L1826.23 1132.71 L1826.23 1136.02 L1817.46 1136.02 L1817.46 1150.09 Q1817.46 1153.26 1818.32 1154.16 Q1819.2 1155.07 1821.86 1155.07 L1826.23 1155.07 L1826.23 1158.63 L1821.86 1158.63 Q1816.93 1158.63 1815.05 1156.8 Q1813.18 1154.95 1813.18 1150.09 L1813.18 1136.02 L1810.05 1136.02 L1810.05 1132.71 L1813.18 1132.71 L1813.18 1125.34 L1817.46 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1843.62 1145.6 Q1838.46 1145.6 1836.47 1146.78 Q1834.48 1147.96 1834.48 1150.81 Q1834.48 1153.08 1835.96 1154.42 Q1837.46 1155.74 1840.03 1155.74 Q1843.57 1155.74 1845.7 1153.24 Q1847.86 1150.72 1847.86 1146.55 L1847.86 1145.6 L1843.62 1145.6 M1852.11 1143.84 L1852.11 1158.63 L1847.86 1158.63 L1847.86 1154.7 Q1846.4 1157.06 1844.22 1158.19 Q1842.05 1159.3 1838.9 1159.3 Q1834.92 1159.3 1832.55 1157.08 Q1830.22 1154.84 1830.22 1151.09 Q1830.22 1146.71 1833.13 1144.49 Q1836.07 1142.27 1841.88 1142.27 L1847.86 1142.27 L1847.86 1141.85 Q1847.86 1138.91 1845.91 1137.31 Q1843.99 1135.69 1840.49 1135.69 Q1838.27 1135.69 1836.17 1136.22 Q1834.06 1136.76 1832.11 1137.82 L1832.11 1133.89 Q1834.45 1132.98 1836.65 1132.54 Q1838.85 1132.08 1840.93 1132.08 Q1846.56 1132.08 1849.34 1135 Q1852.11 1137.91 1852.11 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1875.91 1136.69 Q1875.19 1136.27 1874.34 1136.09 Q1873.5 1135.88 1872.48 1135.88 Q1868.87 1135.88 1866.93 1138.24 Q1865.01 1140.58 1865.01 1144.97 L1865.01 1158.63 L1860.73 1158.63 L1860.73 1132.71 L1865.01 1132.71 L1865.01 1136.73 Q1866.35 1134.37 1868.5 1133.24 Q1870.66 1132.08 1873.73 1132.08 Q1874.17 1132.08 1874.71 1132.15 Q1875.24 1132.2 1875.89 1132.31 L1875.91 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1896.6 1145.37 Q1896.6 1140.74 1894.68 1138.19 Q1892.79 1135.65 1889.34 1135.65 Q1885.91 1135.65 1883.99 1138.19 Q1882.09 1140.74 1882.09 1145.37 Q1882.09 1149.97 1883.99 1152.52 Q1885.91 1155.07 1889.34 1155.07 Q1892.79 1155.07 1894.68 1152.52 Q1896.6 1149.97 1896.6 1145.37 M1900.86 1155.41 Q1900.86 1162.03 1897.92 1165.25 Q1894.98 1168.49 1888.92 1168.49 Q1886.67 1168.49 1884.68 1168.15 Q1882.69 1167.82 1880.82 1167.13 L1880.82 1162.98 Q1882.69 1164 1884.52 1164.49 Q1886.35 1164.97 1888.25 1164.97 Q1892.44 1164.97 1894.52 1162.78 Q1896.6 1160.6 1896.6 1156.18 L1896.6 1154.07 Q1895.29 1156.36 1893.23 1157.5 Q1891.17 1158.63 1888.29 1158.63 Q1883.53 1158.63 1880.61 1155 Q1877.69 1151.36 1877.69 1145.37 Q1877.69 1139.35 1880.61 1135.72 Q1883.53 1132.08 1888.29 1132.08 Q1891.17 1132.08 1893.23 1133.22 Q1895.29 1134.35 1896.6 1136.64 L1896.6 1132.71 L1900.86 1132.71 L1900.86 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1931.81 1144.6 L1931.81 1146.69 L1912.23 1146.69 Q1912.51 1151.09 1914.87 1153.4 Q1917.25 1155.69 1921.49 1155.69 Q1923.94 1155.69 1926.23 1155.09 Q1928.55 1154.49 1930.82 1153.28 L1930.82 1157.31 Q1928.53 1158.28 1926.12 1158.79 Q1923.71 1159.3 1921.23 1159.3 Q1915.03 1159.3 1911.4 1155.69 Q1907.79 1152.08 1907.79 1145.92 Q1907.79 1139.56 1911.21 1135.83 Q1914.66 1132.08 1920.49 1132.08 Q1925.73 1132.08 1928.76 1135.46 Q1931.81 1138.82 1931.81 1144.6 M1927.55 1143.35 Q1927.51 1139.86 1925.59 1137.78 Q1923.69 1135.69 1920.54 1135.69 Q1916.98 1135.69 1914.82 1137.71 Q1912.69 1139.72 1912.37 1143.38 L1927.55 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1943.02 1125.34 L1943.02 1132.71 L1951.79 1132.71 L1951.79 1136.02 L1943.02 1136.02 L1943.02 1150.09 Q1943.02 1153.26 1943.87 1154.16 Q1944.75 1155.07 1947.41 1155.07 L1951.79 1155.07 L1951.79 1158.63 L1947.41 1158.63 Q1942.48 1158.63 1940.61 1156.8 Q1938.73 1154.95 1938.73 1150.09 L1938.73 1136.02 L1935.61 1136.02 L1935.61 1132.71 L1938.73 1132.71 L1938.73 1125.34 L1943.02 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip170)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1669.53,1193.19 1789.98,1193.19 \"/>\n<path clip-path=\"url(#clip170)\" d=\"M1831.77 1194.82 L1831.77 1210.47 L1827.51 1210.47 L1827.51 1194.96 Q1827.51 1191.28 1826.07 1189.45 Q1824.64 1187.62 1821.77 1187.62 Q1818.32 1187.62 1816.33 1189.82 Q1814.34 1192.02 1814.34 1195.82 L1814.34 1210.47 L1810.05 1210.47 L1810.05 1184.55 L1814.34 1184.55 L1814.34 1188.57 Q1815.86 1186.24 1817.92 1185.08 Q1820.01 1183.92 1822.72 1183.92 Q1827.18 1183.92 1829.48 1186.7 Q1831.77 1189.45 1831.77 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1850.31 1187.53 Q1846.88 1187.53 1844.89 1190.22 Q1842.9 1192.88 1842.9 1197.53 Q1842.9 1202.18 1844.87 1204.87 Q1846.86 1207.53 1850.31 1207.53 Q1853.71 1207.53 1855.7 1204.85 Q1857.69 1202.16 1857.69 1197.53 Q1857.69 1192.93 1855.7 1190.24 Q1853.71 1187.53 1850.31 1187.53 M1850.31 1183.92 Q1855.86 1183.92 1859.04 1187.53 Q1862.21 1191.14 1862.21 1197.53 Q1862.21 1203.9 1859.04 1207.53 Q1855.86 1211.14 1850.31 1211.14 Q1844.73 1211.14 1841.56 1207.53 Q1838.41 1203.9 1838.41 1197.53 Q1838.41 1191.14 1841.56 1187.53 Q1844.73 1183.92 1850.31 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1884.29 1188.53 Q1883.57 1188.11 1882.72 1187.93 Q1881.88 1187.72 1880.86 1187.72 Q1877.25 1187.72 1875.31 1190.08 Q1873.39 1192.42 1873.39 1196.81 L1873.39 1210.47 L1869.11 1210.47 L1869.11 1184.55 L1873.39 1184.55 L1873.39 1188.57 Q1874.73 1186.21 1876.88 1185.08 Q1879.04 1183.92 1882.11 1183.92 Q1882.55 1183.92 1883.09 1183.99 Q1883.62 1184.04 1884.27 1184.15 L1884.29 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip170)\" d=\"M1908.11 1189.52 Q1909.71 1186.65 1911.93 1185.29 Q1914.15 1183.92 1917.16 1183.92 Q1921.21 1183.92 1923.41 1186.77 Q1925.61 1189.59 1925.61 1194.82 L1925.61 1210.47 L1921.33 1210.47 L1921.33 1194.96 Q1921.33 1191.24 1920.01 1189.43 Q1918.69 1187.62 1915.98 1187.62 Q1912.67 1187.62 1910.75 1189.82 Q1908.83 1192.02 1908.83 1195.82 L1908.83 1210.47 L1904.54 1210.47 L1904.54 1194.96 Q1904.54 1191.21 1903.23 1189.43 Q1901.91 1187.62 1899.15 1187.62 Q1895.89 1187.62 1893.97 1189.85 Q1892.04 1192.05 1892.04 1195.82 L1892.04 1210.47 L1887.76 1210.47 L1887.76 1184.55 L1892.04 1184.55 L1892.04 1188.57 Q1893.5 1186.19 1895.54 1185.06 Q1897.58 1183.92 1900.38 1183.92 Q1903.2 1183.92 1905.17 1185.36 Q1907.16 1186.79 1908.11 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.022 ± 0.024\n  with uncertainty of ± 0.0021559004938320075\n  from 62 blocks after 5 transformations (k = 6).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.01223 ± (0.00322922, 0.00307426) (MC)\n  95% confidence interval: [-4.01824, -4.00614]) (MC)\n  linear error propagation: -4.01285 ± 0.00308702\n  |δ_y| = |0.00338504| (≤ 0.1 for normal approx)\n  Blocking successful with 15 blocks after 7 transformations (k = 8).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.012232170269146, val_l = 0.006009556144911166, val_u = 0.006088957081226809)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.steps, df.shift, ylabel=\"energy\", xlabel=\"steps\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.steps[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.steps[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip200\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip200)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip201\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip200)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip202\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip202)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip202)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip202)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip202)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip200)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip200)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip200)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip200)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip200)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip200)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M1220.15 1391.71 L1220.15 1397.25 Q1217.67 1395.98 1214.99 1395.34 Q1212.32 1394.71 1209.46 1394.71 Q1205.1 1394.71 1202.9 1396.04 Q1200.74 1397.38 1200.74 1400.05 Q1200.74 1402.09 1202.3 1403.27 Q1203.85 1404.41 1208.57 1405.46 L1210.57 1405.91 Q1216.81 1407.25 1219.42 1409.7 Q1222.06 1412.12 1222.06 1416.48 Q1222.06 1421.44 1218.11 1424.34 Q1214.2 1427.23 1207.32 1427.23 Q1204.46 1427.23 1201.34 1426.66 Q1198.25 1426.12 1194.82 1425.01 L1194.82 1418.96 Q1198.06 1420.65 1201.21 1421.51 Q1204.36 1422.33 1207.45 1422.33 Q1211.59 1422.33 1213.82 1420.93 Q1216.05 1419.5 1216.05 1416.92 Q1216.05 1414.54 1214.42 1413.26 Q1212.83 1411.99 1207.39 1410.81 L1205.35 1410.33 Q1199.91 1409.19 1197.49 1406.83 Q1195.07 1404.45 1195.07 1400.31 Q1195.07 1395.28 1198.64 1392.54 Q1202.2 1389.8 1208.76 1389.8 Q1212 1389.8 1214.87 1390.28 Q1217.73 1390.76 1220.15 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M1237.18 1380.54 L1237.18 1390.66 L1249.24 1390.66 L1249.24 1395.22 L1237.18 1395.22 L1237.18 1414.57 Q1237.18 1418.93 1238.36 1420.17 Q1239.57 1421.41 1243.23 1421.41 L1249.24 1421.41 L1249.24 1426.31 L1243.23 1426.31 Q1236.45 1426.31 1233.87 1423.8 Q1231.29 1421.25 1231.29 1414.57 L1231.29 1395.22 L1226.99 1395.22 L1226.99 1390.66 L1231.29 1390.66 L1231.29 1380.54 L1237.18 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M1287.44 1407.02 L1287.44 1409.89 L1260.51 1409.89 Q1260.89 1415.94 1264.14 1419.12 Q1267.42 1422.27 1273.24 1422.27 Q1276.61 1422.27 1279.77 1421.44 Q1282.95 1420.61 1286.07 1418.96 L1286.07 1424.5 Q1282.92 1425.83 1279.61 1426.53 Q1276.3 1427.23 1272.89 1427.23 Q1264.36 1427.23 1259.36 1422.27 Q1254.4 1417.3 1254.4 1408.84 Q1254.4 1400.08 1259.11 1394.96 Q1263.85 1389.8 1271.87 1389.8 Q1279.07 1389.8 1283.24 1394.45 Q1287.44 1399.07 1287.44 1407.02 M1281.58 1405.3 Q1281.52 1400.5 1278.87 1397.63 Q1276.26 1394.77 1271.94 1394.77 Q1267.03 1394.77 1264.07 1397.54 Q1261.15 1400.31 1260.7 1405.34 L1281.58 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M1302.71 1420.96 L1302.71 1439.87 L1296.83 1439.87 L1296.83 1390.66 L1302.71 1390.66 L1302.71 1396.07 Q1304.56 1392.89 1307.36 1391.36 Q1310.19 1389.8 1314.11 1389.8 Q1320.6 1389.8 1324.64 1394.96 Q1328.72 1400.12 1328.72 1408.52 Q1328.72 1416.92 1324.64 1422.08 Q1320.6 1427.23 1314.11 1427.23 Q1310.19 1427.23 1307.36 1425.71 Q1304.56 1424.15 1302.71 1420.96 M1322.64 1408.52 Q1322.64 1402.06 1319.97 1398.4 Q1317.32 1394.71 1312.68 1394.71 Q1308.03 1394.71 1305.36 1398.4 Q1302.71 1402.06 1302.71 1408.52 Q1302.71 1414.98 1305.36 1418.67 Q1308.03 1422.33 1312.68 1422.33 Q1317.32 1422.33 1319.97 1418.67 Q1322.64 1414.98 1322.64 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M1361.15 1391.71 L1361.15 1397.25 Q1358.67 1395.98 1356 1395.34 Q1353.32 1394.71 1350.46 1394.71 Q1346.1 1394.71 1343.9 1396.04 Q1341.74 1397.38 1341.74 1400.05 Q1341.74 1402.09 1343.3 1403.27 Q1344.86 1404.41 1349.57 1405.46 L1351.57 1405.91 Q1357.81 1407.25 1360.42 1409.7 Q1363.06 1412.12 1363.06 1416.48 Q1363.06 1421.44 1359.11 1424.34 Q1355.2 1427.23 1348.32 1427.23 Q1345.46 1427.23 1342.34 1426.66 Q1339.25 1426.12 1335.82 1425.01 L1335.82 1418.96 Q1339.06 1420.65 1342.21 1421.51 Q1345.36 1422.33 1348.45 1422.33 Q1352.59 1422.33 1354.82 1420.93 Q1357.05 1419.5 1357.05 1416.92 Q1357.05 1414.54 1355.42 1413.26 Q1353.83 1411.99 1348.39 1410.81 L1346.35 1410.33 Q1340.91 1409.19 1338.49 1406.83 Q1336.07 1404.45 1336.07 1400.31 Q1336.07 1395.28 1339.64 1392.54 Q1343.2 1389.8 1349.76 1389.8 Q1353 1389.8 1355.87 1390.28 Q1358.73 1390.76 1361.15 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip202)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1144.75 2211.02,1144.75 \"/>\n<polyline clip-path=\"url(#clip202)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,983.804 2211.02,983.804 \"/>\n<polyline clip-path=\"url(#clip202)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,822.854 2211.02,822.854 \"/>\n<polyline clip-path=\"url(#clip202)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,661.904 2211.02,661.904 \"/>\n<polyline clip-path=\"url(#clip202)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,500.954 2211.02,500.954 \"/>\n<polyline clip-path=\"url(#clip202)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,340.004 2211.02,340.004 \"/>\n<polyline clip-path=\"url(#clip200)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip200)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1144.75 365.751,1144.75 \"/>\n<polyline clip-path=\"url(#clip200)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,983.804 365.751,983.804 \"/>\n<polyline clip-path=\"url(#clip200)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,822.854 365.751,822.854 \"/>\n<polyline clip-path=\"url(#clip200)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,661.904 365.751,661.904 \"/>\n<polyline clip-path=\"url(#clip200)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,500.954 365.751,500.954 \"/>\n<polyline clip-path=\"url(#clip200)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,340.004 365.751,340.004 \"/>\n<path clip-path=\"url(#clip200)\" d=\"M298.909 1130.55 Q295.298 1130.55 293.469 1134.12 Q291.664 1137.66 291.664 1144.79 Q291.664 1151.89 293.469 1155.46 Q295.298 1159 298.909 1159 Q302.543 1159 304.349 1155.46 Q306.177 1151.89 306.177 1144.79 Q306.177 1137.66 304.349 1134.12 Q302.543 1130.55 298.909 1130.55 M298.909 1126.85 Q304.719 1126.85 307.775 1131.46 Q310.853 1136.04 310.853 1144.79 Q310.853 1153.52 307.775 1158.12 Q304.719 1162.71 298.909 1162.71 Q293.099 1162.71 290.02 1158.12 Q286.964 1153.52 286.964 1144.79 Q286.964 1136.04 290.02 1131.46 Q293.099 1126.85 298.909 1126.85 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M259.557 997.149 L267.196 997.149 L267.196 970.783 L258.886 972.45 L258.886 968.19 L267.15 966.524 L271.826 966.524 L271.826 997.149 L279.465 997.149 L279.465 1001.08 L259.557 1001.08 L259.557 997.149 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M298.909 969.603 Q295.298 969.603 293.469 973.167 Q291.664 976.709 291.664 983.839 Q291.664 990.945 293.469 994.51 Q295.298 998.051 298.909 998.051 Q302.543 998.051 304.349 994.51 Q306.177 990.945 306.177 983.839 Q306.177 976.709 304.349 973.167 Q302.543 969.603 298.909 969.603 M298.909 965.899 Q304.719 965.899 307.775 970.505 Q310.853 975.089 310.853 983.839 Q310.853 992.565 307.775 997.172 Q304.719 1001.76 298.909 1001.76 Q293.099 1001.76 290.02 997.172 Q286.964 992.565 286.964 983.839 Q286.964 975.089 290.02 970.505 Q293.099 965.899 298.909 965.899 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M262.775 836.199 L279.094 836.199 L279.094 840.134 L257.15 840.134 L257.15 836.199 Q259.812 833.444 264.395 828.815 Q269.002 824.162 270.182 822.819 Q272.428 820.296 273.307 818.56 Q274.21 816.801 274.21 815.111 Q274.21 812.356 272.266 810.62 Q270.344 808.884 267.242 808.884 Q265.043 808.884 262.59 809.648 Q260.159 810.412 257.381 811.963 L257.381 807.241 Q260.205 806.106 262.659 805.528 Q265.113 804.949 267.15 804.949 Q272.52 804.949 275.715 807.634 Q278.909 810.319 278.909 814.81 Q278.909 816.94 278.099 818.861 Q277.312 820.759 275.205 823.352 Q274.627 824.023 271.525 827.241 Q268.423 830.435 262.775 836.199 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M298.909 808.653 Q295.298 808.653 293.469 812.217 Q291.664 815.759 291.664 822.889 Q291.664 829.995 293.469 833.56 Q295.298 837.102 298.909 837.102 Q302.543 837.102 304.349 833.56 Q306.177 829.995 306.177 822.889 Q306.177 815.759 304.349 812.217 Q302.543 808.653 298.909 808.653 M298.909 804.949 Q304.719 804.949 307.775 809.555 Q310.853 814.139 310.853 822.889 Q310.853 831.615 307.775 836.222 Q304.719 840.805 298.909 840.805 Q293.099 840.805 290.02 836.222 Q286.964 831.615 286.964 822.889 Q286.964 814.139 290.02 809.555 Q293.099 804.949 298.909 804.949 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M272.914 660.55 Q276.27 661.268 278.145 663.536 Q280.043 665.805 280.043 669.138 Q280.043 674.254 276.525 677.054 Q273.006 679.855 266.525 679.855 Q264.349 679.855 262.034 679.416 Q259.742 678.999 257.289 678.142 L257.289 673.629 Q259.233 674.763 261.548 675.342 Q263.863 675.92 266.386 675.92 Q270.784 675.92 273.076 674.184 Q275.39 672.448 275.39 669.138 Q275.39 666.082 273.238 664.369 Q271.108 662.633 267.289 662.633 L263.261 662.633 L263.261 658.791 L267.474 658.791 Q270.923 658.791 272.752 657.425 Q274.58 656.036 274.58 653.443 Q274.58 650.781 272.682 649.369 Q270.807 647.934 267.289 647.934 Q265.367 647.934 263.168 648.351 Q260.969 648.768 258.33 649.647 L258.33 645.481 Q260.992 644.74 263.307 644.369 Q265.645 643.999 267.705 643.999 Q273.029 643.999 276.131 646.43 Q279.233 648.837 279.233 652.957 Q279.233 655.828 277.59 657.818 Q275.946 659.786 272.914 660.55 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M298.909 647.703 Q295.298 647.703 293.469 651.268 Q291.664 654.809 291.664 661.939 Q291.664 669.045 293.469 672.61 Q295.298 676.152 298.909 676.152 Q302.543 676.152 304.349 672.61 Q306.177 669.045 306.177 661.939 Q306.177 654.809 304.349 651.268 Q302.543 647.703 298.909 647.703 M298.909 643.999 Q304.719 643.999 307.775 648.606 Q310.853 653.189 310.853 661.939 Q310.853 670.666 307.775 675.272 Q304.719 679.855 298.909 679.855 Q293.099 679.855 290.02 675.272 Q286.964 670.666 286.964 661.939 Q286.964 653.189 290.02 648.606 Q293.099 643.999 298.909 643.999 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M271.594 487.748 L259.789 506.197 L271.594 506.197 L271.594 487.748 M270.367 483.674 L276.247 483.674 L276.247 506.197 L281.177 506.197 L281.177 510.086 L276.247 510.086 L276.247 518.234 L271.594 518.234 L271.594 510.086 L255.992 510.086 L255.992 505.572 L270.367 483.674 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M298.909 486.753 Q295.298 486.753 293.469 490.318 Q291.664 493.859 291.664 500.989 Q291.664 508.095 293.469 511.66 Q295.298 515.202 298.909 515.202 Q302.543 515.202 304.349 511.66 Q306.177 508.095 306.177 500.989 Q306.177 493.859 304.349 490.318 Q302.543 486.753 298.909 486.753 M298.909 483.049 Q304.719 483.049 307.775 487.656 Q310.853 492.239 310.853 500.989 Q310.853 509.716 307.775 514.322 Q304.719 518.906 298.909 518.906 Q293.099 518.906 290.02 514.322 Q286.964 509.716 286.964 500.989 Q286.964 492.239 290.02 487.656 Q293.099 483.049 298.909 483.049 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M258.793 322.724 L277.15 322.724 L277.15 326.66 L263.076 326.66 L263.076 335.132 Q264.094 334.784 265.113 334.622 Q266.131 334.437 267.15 334.437 Q272.937 334.437 276.316 337.609 Q279.696 340.78 279.696 346.196 Q279.696 351.775 276.224 354.877 Q272.752 357.956 266.432 357.956 Q264.256 357.956 261.988 357.585 Q259.742 357.215 257.335 356.474 L257.335 351.775 Q259.418 352.909 261.641 353.465 Q263.863 354.02 266.34 354.02 Q270.344 354.02 272.682 351.914 Q275.02 349.808 275.02 346.196 Q275.02 342.585 272.682 340.479 Q270.344 338.372 266.34 338.372 Q264.465 338.372 262.59 338.789 Q260.738 339.206 258.793 340.085 L258.793 322.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M298.909 325.803 Q295.298 325.803 293.469 329.368 Q291.664 332.909 291.664 340.039 Q291.664 347.146 293.469 350.71 Q295.298 354.252 298.909 354.252 Q302.543 354.252 304.349 350.71 Q306.177 347.146 306.177 340.039 Q306.177 332.909 304.349 329.368 Q302.543 325.803 298.909 325.803 M298.909 322.099 Q304.719 322.099 307.775 326.706 Q310.853 331.289 310.853 340.039 Q310.853 348.766 307.775 353.372 Q304.719 357.956 298.909 357.956 Q293.099 357.956 290.02 353.372 Q286.964 348.766 286.964 340.039 Q286.964 331.289 290.02 326.706 Q293.099 322.099 298.909 322.099 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip202)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1151.34 400.199,1149.03 400.786,1036.21 401.372,1034.34 401.958,936.628 402.545,848.689 403.131,766.252 403.718,689.119 404.304,619.164 404.891,553.578 405.477,493.992 406.063,440.028 406.65,392.425 407.236,421.466 407.823,381.136 408.409,408.094 408.995,373.27 409.582,341.004 410.168,312.486 410.755,288.755 411.341,267.635 411.927,293.558 412.514,275.326 413.1,260.185 413.687,248.52 414.273,237.377 414.86,230.094 415.446,224.179 416.032,219.895 416.619,295.895 417.205,314.279 417.792,353.237 418.378,350.403 418.964,348.22 419.551,347.026 420.137,345.894 420.724,346.432 421.31,349.33 421.896,353.457 422.483,372.339 423.069,378.069 423.656,397.678 424.242,405.006 424.829,435.543 425.415,454.115 426.001,461.706 426.588,470.834 427.174,480.288 427.761,507.679 428.347,524.758 428.933,533.713 429.52,542.923 430.106,560.207 430.693,583.5 431.279,593.351 431.865,622.112 432.452,631.213 433.038,646.876 433.625,661.694 434.211,676.713 434.798,686.892 435.384,707.389 435.97,731.261 436.557,745.283 437.143,767.187 437.73,774.95 438.316,787.405 438.902,802.895 439.489,818.194 440.075,837.079 440.662,861.733 441.248,874.601 441.835,883.767 442.421,889.204 443.007,904.342 443.594,909.537 444.18,917.952 444.767,926.16 445.353,936.931 445.939,950.342 446.526,960.616 447.112,970.545 447.699,976.96 448.285,983.363 448.871,986.87 449.458,996.084 450.044,999.616 450.631,1010.87 451.217,1014.48 451.804,1024.9 452.39,1033.14 452.976,1038.88 453.563,1042.13 454.149,1052.28 454.736,1055.02 455.322,1066.92 455.908,1073.7 456.495,1076.07 457.081,1085.12 457.668,1087.06 458.254,1089.18 458.84,1091.73 459.427,1096.09 460.013,1098.48 460.6,1106.75 461.186,1108.62 461.773,1116.11 462.359,1124 462.945,1133.2 463.532,1136.59 464.118,1143.62 464.705,1152.09 465.291,1155.12 465.877,1156.22 466.464,1160.81 467.05,1163.2 467.637,1165.76 468.223,1171.48 468.809,1175.57 469.396,1175.83 469.982,1178.31 470.569,1178.87 471.155,1182.51 471.742,1184.65 472.328,1185.12 472.914,1187.04 473.501,1184.22 474.087,1189.53 474.674,1193.43 475.26,1197.12 475.846,1201.84 476.433,1201.88 477.019,1202.04 477.606,1201.9 478.192,1202.04 478.778,1202.4 479.365,1205.91 479.951,1207.72 480.538,1207.53 481.124,1210.6 481.711,1212.22 482.297,1213.95 482.883,1215.5 483.47,1216.56 484.056,1219.15 484.643,1220.66 485.229,1225.99 485.815,1226.88 486.402,1228.02 486.988,1228.94 487.575,1231.43 488.161,1232.03 488.748,1231.32 489.334,1230.68 489.92,1230.03 490.507,1230.95 491.093,1236.12 491.68,1233.91 492.266,1234.84 492.852,1235.57 493.439,1236.26 494.025,1236.83 494.612,1237.53 495.198,1238.34 495.784,1236.02 496.371,1236.49 496.957,1237.35 497.544,1236.59 498.13,1237.3 498.717,1236.54 499.303,1235.86 499.889,1235.69 500.476,1235.19 501.062,1238.89 501.649,1235.37 502.235,1239.18 502.821,1235.75 503.408,1235.41 503.994,1236.47 504.581,1237.05 505.167,1239.19 505.753,1239.65 506.34,1240.23 506.926,1239.88 507.513,1238.07 508.099,1239.04 508.686,1239.82 509.272,1243.38 509.858,1243.99 510.445,1242 511.031,1238.49 511.618,1237.75 512.204,1237.27 512.79,1239.4 513.377,1240.07 513.963,1242 514.55,1238.43 515.136,1238.06 515.722,1240.07 516.309,1239.64 516.895,1237.87 517.482,1237.55 518.068,1236.95 518.655,1235.55 519.241,1233.76 519.827,1233.59 520.414,1234.58 521,1234.21 521.587,1234.06 522.173,1234.03 522.759,1233.81 523.346,1232.27 523.932,1233.33 524.519,1230.52 525.105,1230.58 525.691,1227.63 526.278,1226.39 526.864,1226.18 527.451,1225.24 528.037,1226.93 528.624,1225.86 529.21,1226 529.796,1224.67 530.383,1224.77 530.969,1226.32 531.556,1223.64 532.142,1223.77 532.728,1226.56 533.315,1226.87 533.901,1227.15 534.488,1228.75 535.074,1228.68 535.661,1229.94 536.247,1231.29 536.833,1231.09 537.42,1233.55 538.006,1234.5 538.593,1231.65 539.179,1231.48 539.765,1227.41 540.352,1230.06 540.938,1228.63 541.525,1228.79 542.111,1228.74 542.697,1229.67 543.284,1226.84 543.87,1226.6 544.457,1226.69 545.043,1228.33 545.63,1228.43 546.216,1229.69 546.802,1228.09 547.389,1227.89 547.975,1229.57 548.562,1228.09 549.148,1230.55 549.734,1231.56 550.321,1234.21 550.907,1235.01 551.494,1237.12 552.08,1233.77 552.666,1233.74 553.253,1233.43 553.839,1231.42 554.426,1231.42 555.012,1231.25 555.599,1230.97 556.185,1230.48 556.771,1230.56 557.358,1230.3 557.944,1231.18 558.531,1235.92 559.117,1234.15 559.703,1234.81 560.29,1234.17 560.876,1234.94 561.463,1234.5 562.049,1235.51 562.635,1233.67 563.222,1235.58 563.808,1237.7 564.395,1241.05 564.981,1241.69 565.568,1241.86 566.154,1243.52 566.74,1243.76 567.327,1245.12 567.913,1247.87 568.5,1247.96 569.086,1250.53 569.672,1248.95 570.259,1247.71 570.845,1244.97 571.432,1245.26 572.018,1238.58 572.605,1237.63 573.191,1235.42 573.777,1236.22 574.364,1232.91 574.95,1232.46 575.537,1232.3 576.123,1234.72 576.709,1234.18 577.296,1233.49 577.882,1234.3 578.469,1233.62 579.055,1234.58 579.641,1233.9 580.228,1234.41 580.814,1230.95 581.401,1230.38 581.987,1227.01 582.574,1225.51 583.16,1226.46 583.746,1223.41 584.333,1223.3 584.919,1224.58 585.506,1223.3 586.092,1222.92 586.678,1219.06 587.265,1221.82 587.851,1220.59 588.438,1226.26 589.024,1225.96 589.61,1227.14 590.197,1228.22 590.783,1227.85 591.37,1227.44 591.956,1232.47 592.543,1231.58 593.129,1230.89 593.715,1230.17 594.302,1227.22 594.888,1220 595.475,1220.93 596.061,1220.99 596.647,1220.81 597.234,1221.85 597.82,1221.78 598.407,1220.21 598.993,1220.03 599.579,1220.15 600.166,1218.59 600.752,1218.83 601.339,1217.69 601.925,1216.72 602.512,1218.41 603.098,1219.62 603.684,1219.85 604.271,1217.28 604.857,1218.56 605.444,1219.97 606.03,1219.97 606.616,1218.46 607.203,1219.93 607.789,1222.71 608.376,1226.43 608.962,1227.31 609.548,1227.11 610.135,1226.81 610.721,1226.24 611.308,1224.26 611.894,1226.59 612.481,1228.4 613.067,1226.29 613.653,1226.96 614.24,1223.7 614.826,1223.66 615.413,1220.91 615.999,1223.45 616.585,1224.32 617.172,1227.79 617.758,1226.1 618.345,1228.38 618.931,1228.91 619.518,1228.53 620.104,1224.06 620.69,1226.72 621.277,1227.65 621.863,1228.84 622.45,1229.82 623.036,1229.38 623.622,1228.68 624.209,1228.01 624.795,1228.62 625.382,1224.06 625.968,1221.06 626.554,1221.03 627.141,1222.38 627.727,1220.57 628.314,1220.28 628.9,1218.9 629.487,1220.02 630.073,1222.42 630.659,1222.11 631.246,1221.79 631.832,1221.91 632.419,1223.17 633.005,1223.91 633.591,1220.97 634.178,1222.37 634.764,1222 635.351,1221.85 635.937,1219.23 636.523,1220.27 637.11,1221.61 637.696,1221.52 638.283,1221.16 638.869,1219.58 639.456,1216.98 640.042,1217.17 640.628,1215.76 641.215,1215.71 641.801,1219.45 642.388,1220.69 642.974,1221.7 643.56,1222.58 644.147,1219.7 644.733,1217.12 645.32,1218.37 645.906,1218.08 646.492,1216.85 647.079,1219.19 647.665,1220.4 648.252,1221.48 648.838,1218.39 649.425,1222.58 650.011,1222.36 650.597,1224.5 651.184,1224.31 651.77,1228.09 652.357,1227.71 652.943,1230.18 653.529,1229.31 654.116,1226.14 654.702,1223.11 655.289,1224.05 655.875,1220.83 656.462,1220.59 657.048,1221.78 657.634,1222.68 658.221,1219.52 658.807,1217.87 659.394,1219.08 659.98,1219.05 660.566,1218.72 661.153,1219.88 661.739,1222.47 662.326,1221.13 662.912,1220.94 663.498,1220.62 664.085,1220.47 664.671,1220.28 665.258,1221.32 665.844,1222.2 666.431,1217.96 667.017,1220.68 667.603,1219.11 668.19,1217.43 668.776,1221.2 669.363,1220.85 669.949,1218.19 670.535,1219.75 671.122,1214.06 671.708,1216.71 672.295,1215.23 672.881,1212.78 673.467,1214.19 674.054,1216.74 674.64,1219.32 675.227,1220.37 675.813,1219.1 676.4,1219.97 676.986,1219.76 677.572,1219.39 678.159,1220.98 678.745,1220.61 679.332,1221.55 679.918,1221.08 680.504,1220.74 681.091,1216.48 681.677,1215.12 682.264,1218.77 682.85,1217.45 683.436,1218.75 684.023,1219.99 684.609,1218.32 685.196,1216.97 685.782,1218.11 686.369,1217.88 686.955,1213.72 687.541,1216.04 688.128,1213.3 688.714,1212.28 689.301,1212.42 689.887,1216.4 690.473,1216.09 691.06,1215.75 691.646,1218.64 692.233,1220.92 692.819,1219.1 693.405,1221.56 693.992,1222.48 694.578,1225.8 695.165,1225.21 695.751,1225.86 696.338,1223.83 696.924,1223.14 697.51,1220.12 698.097,1218.72 698.683,1219.71 699.27,1217.07 699.856,1212.71 700.442,1211.34 701.029,1208.68 701.615,1208.93 702.202,1208.95 702.788,1210.45 703.375,1210.88 703.961,1211.02 704.547,1212.31 705.134,1211 705.72,1212.28 706.307,1212.45 706.893,1211.41 707.479,1210.52 708.066,1209.62 708.652,1208.66 709.239,1207.32 709.825,1207.83 710.411,1210.85 710.998,1211.13 711.584,1210.15 712.171,1210.3 712.757,1210.47 713.344,1210.76 713.93,1209.54 714.516,1208.29 715.103,1207.44 715.689,1207.83 716.276,1208.41 716.862,1208.68 717.448,1209.2 718.035,1209.33 718.621,1211.09 719.208,1211.49 719.794,1213.08 720.38,1214.43 720.967,1217.08 721.553,1213.27 722.14,1217.29 722.726,1219.84 723.313,1220.83 723.899,1219.42 724.485,1221.98 725.072,1223.26 725.658,1225.19 726.245,1223.49 726.831,1224.42 727.417,1219.92 728.004,1219.84 728.59,1222 729.177,1222.75 729.763,1222.25 730.349,1220.72 730.936,1220.26 731.522,1219.97 732.109,1221.19 732.695,1220.9 733.282,1219.28 733.868,1218.99 734.454,1219.89 735.041,1219.56 735.627,1221.71 736.214,1221.43 736.8,1221.16 737.386,1219.39 737.973,1220.51 738.559,1220.34 739.146,1217.34 739.732,1218.26 740.318,1218.07 740.905,1217.91 741.491,1216.43 742.078,1216.52 742.664,1213.7 743.251,1215.06 743.837,1216.22 744.423,1216.22 745.01,1213.43 745.596,1212.21 746.183,1210.58 746.769,1210.81 747.355,1209.87 747.942,1209.75 748.528,1208.57 749.115,1207.36 749.701,1207.98 750.288,1208.44 750.874,1208.89 751.46,1207.76 752.047,1207.68 752.633,1208.31 753.22,1208.5 753.806,1208.82 754.392,1214.51 754.979,1211.79 755.565,1214.35 756.152,1215.46 756.738,1214.05 757.324,1212.29 757.911,1213.82 758.497,1214.17 759.084,1216.72 759.67,1219.2 760.257,1220.28 760.843,1221.44 761.429,1221.21 762.016,1222.14 762.602,1220.38 763.189,1220.23 763.775,1216.06 764.361,1214.48 764.948,1214.38 765.534,1212.92 766.121,1212.89 766.707,1211.31 767.293,1211.2 767.88,1211.48 768.466,1210.38 769.053,1211.74 769.639,1210.6 770.226,1210.41 770.812,1211.89 771.398,1215.52 771.985,1215.25 772.571,1215.29 773.158,1215.31 773.744,1216.51 774.33,1214.87 774.917,1216.03 775.503,1215.84 776.09,1214.28 776.676,1214.26 777.262,1215.28 777.849,1215.14 778.435,1213.71 779.022,1213.81 779.608,1213.63 780.195,1211.99 780.781,1218.61 781.367,1218.32 781.954,1218.05 782.54,1216.16 783.127,1217.14 783.713,1215.74 784.299,1215.49 784.886,1214.06 785.472,1213.68 786.059,1213.93 786.645,1213.87 787.232,1216.27 787.818,1213.41 788.404,1214.74 788.991,1215.88 789.577,1218.14 790.164,1218.89 790.75,1218.63 791.336,1219.7 791.923,1219.51 792.509,1218.06 793.096,1213.8 793.682,1213.61 794.268,1213.52 794.855,1211.89 795.441,1213.32 796.028,1213.33 796.614,1215.91 797.201,1218.38 797.787,1216.84 798.373,1216.52 798.96,1217.56 799.546,1217.24 800.133,1215.52 800.719,1215.34 801.305,1211.32 801.892,1212.58 802.478,1215.27 803.065,1215.4 803.651,1215.33 804.237,1213.98 804.824,1211.03 805.41,1211.11 805.997,1211.05 806.583,1209.9 807.17,1209.89 807.756,1212.77 808.342,1212.74 808.929,1213.14 809.515,1211.95 810.102,1213.11 810.688,1213.1 811.274,1213.26 811.861,1212.03 812.447,1209.18 813.034,1209.49 813.62,1210.66 814.206,1209.44 814.793,1210.87 815.379,1211.18 815.966,1209.95 816.552,1211.25 817.139,1209.93 817.725,1211.38 818.311,1211.43 818.898,1213.04 819.484,1210.33 820.071,1207.76 820.657,1205.29 821.243,1204.16 821.83,1204.44 822.416,1205.02 823.003,1206.77 823.589,1206.79 824.175,1205.81 824.762,1205 825.348,1205.4 825.935,1202.94 826.521,1206.05 827.108,1205.03 827.694,1204.07 828.28,1204.29 828.867,1205.74 829.453,1208.83 830.04,1208.81 830.626,1207.71 831.212,1207.81 831.799,1205.36 832.385,1204.47 832.972,1206.19 833.558,1207.72 834.145,1208.24 834.731,1209.92 835.317,1211.26 835.904,1210.16 836.49,1210.12 837.077,1212.6 837.663,1213.68 838.249,1212.45 838.836,1212.53 839.422,1212.59 840.009,1213.87 840.595,1212.42 841.181,1211.13 841.768,1212.4 842.354,1210.87 842.941,1213.35 843.527,1213.21 844.114,1214.73 844.7,1213.55 845.286,1213.69 845.873,1212.21 846.459,1213.61 847.046,1213.66 847.632,1215.99 848.218,1215.55 848.805,1216.61 849.391,1217.7 849.978,1214.83 850.564,1215.82 851.15,1216.81 851.737,1212.52 852.323,1215.04 852.91,1214.86 853.496,1216.95 854.083,1217.98 854.669,1217.61 855.255,1217.17 855.842,1213 856.428,1211.61 857.015,1214.1 857.601,1213.84 858.187,1212.45 858.774,1212.29 859.36,1213.37 859.947,1211.93 860.533,1214.38 861.119,1215.27 861.706,1215.04 862.292,1213.01 862.879,1210.09 863.465,1210.41 864.052,1210.4 864.638,1211.75 865.224,1213.12 865.811,1211.75 866.397,1211.69 866.984,1213.15 867.57,1214.42 868.156,1211.53 868.743,1214.33 869.329,1216.62 869.916,1218.85 870.502,1217.19 871.089,1217 871.675,1218.07 872.261,1218.92 872.848,1217.42 873.434,1217.16 874.021,1216.95 874.607,1217.87 875.193,1217.48 875.78,1218.74 876.366,1215.59 876.953,1216.41 877.539,1214.91 878.125,1215.02 878.712,1214.48 879.298,1214.41 879.885,1214.19 880.471,1215.31 881.058,1215.24 881.644,1215.06 882.23,1213.46 882.817,1212.09 883.403,1208.02 883.99,1208.22 884.576,1204.46 885.162,1206.21 885.749,1207.65 886.335,1206.48 886.922,1205.42 887.508,1208.44 888.094,1209.76 888.681,1210.82 889.267,1209.33 889.854,1209.12 890.44,1206.59 891.027,1208.2 891.613,1207.03 892.199,1205.98 892.786,1205.11 893.372,1206.9 893.959,1206.97 894.545,1209.53 895.131,1212.19 895.718,1212.27 896.304,1214.73 896.891,1211.88 897.477,1211.62 898.063,1214.09 898.65,1213.84 899.236,1212.28 899.823,1211.24 900.409,1212.26 900.996,1206.69 901.582,1207.17 902.168,1207.34 902.755,1208.65 903.341,1207.67 903.928,1205.1 904.514,1206.91 905.1,1208.21 905.687,1208.38 906.273,1211.12 906.86,1213.85 907.446,1215.16 908.032,1210.95 908.619,1210.63 909.205,1210.72 909.792,1212.03 910.378,1212.14 910.965,1212.06 911.551,1210.5 912.137,1210.11 912.724,1211.32 913.31,1211.16 913.897,1209.73 914.483,1206.9 915.069,1209.69 915.656,1209.91 916.242,1212.71 916.829,1212.54 917.415,1213.63 918.002,1216.07 918.588,1214.48 919.174,1213.14 919.761,1214.2 920.347,1215.16 920.934,1211.08 921.52,1209.84 922.106,1212.25 922.693,1213.46 923.279,1214.73 923.866,1216.04 924.452,1213.08 925.038,1211.8 925.625,1209.25 926.211,1208.06 926.798,1206.85 927.384,1205.98 927.971,1207.55 928.557,1206.27 929.143,1206.44 929.73,1208.14 930.316,1206.8 930.903,1207.2 931.489,1203.56 932.075,1201.33 932.662,1201.86 933.248,1202.15 933.835,1201.34 934.421,1201.96 935.007,1199.93 935.594,1201.78 936.18,1200.95 936.767,1202.51 937.353,1205.84 937.94,1204.8 938.526,1205.23 939.112,1205.59 939.699,1205.88 940.285,1205.79 940.872,1207.45 941.458,1205.04 942.044,1205.63 942.631,1206.11 943.217,1207.65 943.804,1209.17 944.39,1210.39 944.976,1212.71 945.563,1213.72 946.149,1214.99 946.736,1216.31 947.322,1216.06 947.909,1216.96 948.495,1215.59 949.081,1215.61 949.668,1216.77 950.254,1213.72 950.841,1213.63 951.427,1213.25 952.013,1215.74 952.6,1215.44 953.186,1215.27 953.773,1213.83 954.359,1211.32 954.945,1211.33 955.532,1211.58 956.118,1210.38 956.705,1210.54 957.291,1211.84 957.878,1211.91 958.464,1210.43 959.05,1211.74 959.637,1213.13 960.223,1214.48 960.81,1210.36 961.396,1210.34 961.982,1208.91 962.569,1213.13 963.155,1212.77 963.742,1212.83 964.328,1211.39 964.915,1211.27 965.501,1209.54 966.087,1208.4 966.674,1208.59 967.26,1206.37 967.847,1205.29 968.433,1205.82 969.019,1204.9 969.606,1205.01 970.192,1205.34 970.779,1208.18 971.365,1205.65 971.951,1205.91 972.538,1207.8 973.124,1210.49 973.711,1213.02 974.297,1213.92 974.884,1213.55 975.47,1210.8 976.056,1213.5 976.643,1213.43 977.229,1213.22 977.816,1214.17 978.402,1212.89 978.988,1214.04 979.575,1215.12 980.161,1214.7 980.748,1215.84 981.334,1214.14 981.92,1212.21 982.507,1212 983.093,1212.12 983.68,1213.44 984.266,1213.11 984.853,1213.9 985.439,1212.47 986.025,1213.66 986.612,1214.76 987.198,1215.92 987.785,1216.84 988.371,1217.64 988.957,1215.67 989.544,1215.13 990.13,1215.05 990.717,1213.42 991.303,1212.05 991.889,1209.13 992.476,1210.33 993.062,1210.15 993.649,1212.91 994.235,1212.47 994.822,1212.49 995.408,1213.72 995.994,1214.68 996.581,1213.13 997.167,1212.93 997.754,1214.32 998.34,1211.42 998.926,1212.62 999.513,1212.57 1000.1,1209.66 1000.69,1211.06 1001.27,1209.71 1001.86,1209.68 1002.44,1208.61 1003.03,1206.12 1003.62,1206.48 1004.2,1207.17 1004.79,1208.78 1005.38,1209.16 1005.96,1210.45 1006.55,1209.2 1007.14,1206.79 1007.72,1205.53 1008.31,1207.15 1008.9,1210.23 1009.48,1210.3 1010.07,1212.84 1010.65,1213.82 1011.24,1212.31 1011.83,1211.99 1012.41,1204.1 1013,1204.52 1013.59,1204.86 1014.17,1202.61 1014.76,1200.54 1015.35,1203.88 1015.93,1205.74 1016.52,1207.25 1017.11,1203.47 1017.69,1202.38 1018.28,1202.85 1018.86,1207.28 1019.45,1210.07 1020.04,1208.7 1020.62,1210.12 1021.21,1210.03 1021.8,1209.75 1022.38,1209.7 1022.97,1212.02 1023.56,1213.04 1024.14,1211.48 1024.73,1211.53 1025.32,1211.47 1025.9,1210.2 1026.49,1210.34 1027.07,1209.2 1027.66,1210.48 1028.25,1210.48 1028.83,1207.84 1029.42,1209.22 1030.01,1207.91 1030.59,1208.02 1031.18,1206.96 1031.77,1207.26 1032.35,1211.24 1032.94,1213.85 1033.52,1212.46 1034.11,1210.98 1034.7,1211.07 1035.28,1207.1 1035.87,1208.47 1036.46,1208.65 1037.04,1209.94 1037.63,1208.61 1038.22,1207.31 1038.8,1206.05 1039.39,1207.54 1039.98,1209.47 1040.56,1209.46 1041.15,1209.72 1041.73,1212.3 1042.32,1210.94 1042.91,1212.09 1043.49,1213.27 1044.08,1211.76 1044.67,1215.67 1045.25,1215.46 1045.84,1215.14 1046.43,1212.19 1047.01,1212.11 1047.6,1209.55 1048.19,1212.51 1048.77,1212.48 1049.36,1209.81 1049.94,1209.61 1050.53,1212.28 1051.12,1212.38 1051.7,1211.12 1052.29,1212.36 1052.88,1212.52 1053.46,1209.86 1054.05,1208.24 1054.64,1206.89 1055.22,1208.55 1055.81,1210.01 1056.39,1211.08 1056.98,1209.53 1057.57,1209.59 1058.15,1209.85 1058.74,1209.79 1059.33,1211.03 1059.91,1209.58 1060.5,1210.99 1061.09,1213.42 1061.67,1213.17 1062.26,1211.83 1062.85,1210.25 1063.43,1215.64 1064.02,1216.63 1064.6,1216.08 1065.19,1218.35 1065.78,1217.96 1066.36,1218.64 1066.95,1218.16 1067.54,1216.52 1068.12,1216.41 1068.71,1216.1 1069.3,1212.92 1069.88,1211.41 1070.47,1211.4 1071.06,1209.83 1071.64,1211.22 1072.23,1212.51 1072.81,1214.84 1073.4,1214.43 1073.99,1215.48 1074.57,1213.82 1075.16,1211.99 1075.75,1211.8 1076.33,1212.89 1076.92,1214.16 1077.51,1211.2 1078.09,1209.91 1078.68,1209.73 1079.26,1208.54 1079.85,1211.26 1080.44,1211.28 1081.02,1208.84 1081.61,1207.63 1082.2,1209.06 1082.78,1211.91 1083.37,1211.91 1083.96,1208.92 1084.54,1210.26 1085.13,1210.09 1085.72,1209.98 1086.3,1212.62 1086.89,1212.25 1087.47,1212.13 1088.06,1212.13 1088.65,1212.21 1089.23,1215.76 1089.82,1212.67 1090.41,1210 1090.99,1209.78 1091.58,1208.56 1092.17,1208.52 1092.75,1208.44 1093.34,1209.78 1093.93,1209.66 1094.51,1209.83 1095.1,1207 1095.68,1205.76 1096.27,1205.88 1096.86,1207.1 1097.44,1206.2 1098.03,1207.65 1098.62,1210.66 1099.2,1209.42 1099.79,1209.67 1100.38,1209.73 1100.96,1208.31 1101.55,1208.15 1102.14,1210.51 1102.72,1209.3 1103.31,1210.7 1103.89,1209.38 1104.48,1206.68 1105.07,1205.63 1105.65,1207.23 1106.24,1207.5 1106.83,1207.54 1107.41,1207.34 1108,1210.12 1108.59,1210.07 1109.17,1211.41 1109.76,1211.5 1110.34,1211.54 1110.93,1210.09 1111.52,1210.21 1112.1,1204.95 1112.69,1203.81 1113.28,1201.42 1113.86,1200.82 1114.45,1202.73 1115.04,1204.3 1115.62,1203.29 1116.21,1203.68 1116.8,1205.44 1117.38,1206.92 1117.97,1208.45 1118.55,1209.84 1119.14,1211.36 1119.73,1207.34 1120.31,1204.76 1120.9,1204.85 1121.49,1206.11 1122.07,1204.89 1122.66,1202.44 1123.25,1205.12 1123.83,1206.54 1124.42,1206.42 1125.01,1205.09 1125.59,1205.62 1126.18,1206.93 1126.76,1208.37 1127.35,1206.94 1127.94,1208.38 1128.52,1209.72 1129.11,1209.74 1129.7,1209.92 1130.28,1210.05 1130.87,1211.59 1131.46,1211.48 1132.04,1209.94 1132.63,1210.12 1133.21,1209.03 1133.8,1210.28 1134.39,1207.73 1134.97,1207.64 1135.56,1205 1136.15,1204.01 1136.73,1201.54 1137.32,1200.68 1137.91,1201.12 1138.49,1200.13 1139.08,1200.51 1139.67,1199.57 1140.25,1201.43 1140.84,1201.92 1141.42,1203.62 1142.01,1204.06 1142.6,1204.25 1143.18,1204.56 1143.77,1204.74 1144.36,1202.79 1144.94,1203.19 1145.53,1203.63 1146.12,1203.76 1146.7,1202.54 1147.29,1202.97 1147.88,1203.16 1148.46,1202.51 1149.05,1202.94 1149.63,1203.46 1150.22,1205.02 1150.81,1205.29 1151.39,1206.81 1151.98,1208.22 1152.57,1206.99 1153.15,1210.13 1153.74,1210.39 1154.33,1208.97 1154.91,1209.02 1155.5,1211.74 1156.09,1211.95 1156.67,1211.71 1157.26,1211.45 1157.84,1215.17 1158.43,1214.46 1159.02,1214.34 1159.6,1214.19 1160.19,1211.35 1160.78,1211.32 1161.36,1212.8 1161.95,1213.89 1162.54,1213.8 1163.12,1213.68 1163.71,1212.08 1164.29,1217.29 1164.88,1218.25 1165.47,1217.78 1166.05,1215.99 1166.64,1214.23 1167.23,1214.06 1167.81,1216.14 1168.4,1211.78 1168.99,1211.8 1169.57,1211.61 1170.16,1210.44 1170.75,1210.48 1171.33,1210.37 1171.92,1211.8 1172.5,1212.88 1173.09,1212.7 1173.68,1212.48 1174.26,1213.78 1174.85,1214.82 1175.44,1213.25 1176.02,1211.71 1176.61,1210.16 1177.2,1208.99 1177.78,1209.15 1178.37,1211.89 1178.96,1214.27 1179.54,1212.75 1180.13,1212.57 1180.71,1213.67 1181.3,1214.88 1181.89,1213.42 1182.47,1213.14 1183.06,1210.44 1183.65,1210.5 1184.23,1210.69 1184.82,1210.69 1185.41,1210.64 1185.99,1210.7 1186.58,1209.57 1187.16,1208.13 1187.75,1206.78 1188.34,1208.13 1188.92,1208.03 1189.51,1207.06 1190.1,1207.35 1190.68,1208.77 1191.27,1209.03 1191.86,1206.57 1192.44,1206.7 1193.03,1204.31 1193.62,1205.98 1194.2,1209.02 1194.79,1210.36 1195.37,1208.79 1195.96,1207.64 1196.55,1210.4 1197.13,1209.07 1197.72,1209.14 1198.31,1205.14 1198.89,1206.85 1199.48,1207.06 1200.07,1209.87 1200.65,1211.24 1201.24,1208.61 1201.83,1209.89 1202.41,1209.71 1203,1209.74 1203.58,1208.48 1204.17,1208.61 1204.76,1209.95 1205.34,1209.88 1205.93,1211.01 1206.52,1210.89 1207.1,1213.07 1207.69,1214.39 1208.28,1212.84 1208.86,1212.78 1209.45,1213.74 1210.03,1217.27 1210.62,1215.61 1211.21,1216.78 1211.79,1214.97 1212.38,1214.73 1212.97,1213.11 1213.55,1211.51 1214.14,1210.06 1214.73,1211.46 1215.31,1211.31 1215.9,1210.04 1216.49,1210.01 1217.07,1211.23 1217.66,1212.51 1218.24,1212.51 1218.83,1208.25 1219.42,1211.2 1220,1209.9 1220.59,1209.92 1221.18,1207.61 1221.76,1208.9 1222.35,1208.91 1222.94,1207.83 1223.52,1207.87 1224.11,1210.64 1224.7,1211.82 1225.28,1214.06 1225.87,1209.81 1226.45,1209.94 1227.04,1208.31 1227.63,1208.59 1228.21,1208.94 1228.8,1210.11 1229.39,1208.77 1229.97,1207.61 1230.56,1208.87 1231.15,1208.8 1231.73,1207.5 1232.32,1207.37 1232.91,1206.48 1233.49,1204.08 1234.08,1205.71 1234.66,1210.12 1235.25,1208.8 1235.84,1208.81 1236.42,1211.33 1237.01,1211.26 1237.6,1211 1238.18,1212.32 1238.77,1213.43 1239.36,1213.19 1239.94,1213.96 1240.53,1213.89 1241.11,1210.76 1241.7,1211.87 1242.29,1210.43 1242.87,1206.43 1243.46,1203.88 1244.05,1204.15 1244.63,1202.89 1245.22,1205.8 1245.81,1208.72 1246.39,1208.94 1246.98,1207.87 1247.57,1208.23 1248.15,1209.86 1248.74,1209.8 1249.32,1209.94 1249.91,1210.05 1250.5,1209.73 1251.08,1210.96 1251.67,1210.86 1252.26,1209.42 1252.84,1210.84 1253.43,1210.98 1254.02,1209.63 1254.6,1206.95 1255.19,1208.51 1255.78,1209.86 1256.36,1209.71 1256.95,1209.93 1257.53,1209.61 1258.12,1209.62 1258.71,1209.77 1259.29,1209.74 1259.88,1208.33 1260.47,1209.86 1261.05,1207.47 1261.64,1207.67 1262.23,1210.32 1262.81,1209.95 1263.4,1208.61 1263.98,1209.83 1264.57,1208.33 1265.16,1207.03 1265.74,1204.91 1266.33,1203.9 1266.92,1203.93 1267.5,1203.9 1268.09,1205.44 1268.68,1206.75 1269.26,1208.22 1269.85,1212.08 1270.44,1211.95 1271.02,1211.9 1271.61,1211.76 1272.19,1211.24 1272.78,1209.82 1273.37,1208.49 1273.95,1207.13 1274.54,1207.26 1275.13,1207.29 1275.71,1204.79 1276.3,1206.22 1276.89,1207.49 1277.47,1207.65 1278.06,1206.61 1278.65,1206.45 1279.23,1206.65 1279.82,1204.14 1280.4,1204.32 1280.99,1204.56 1281.58,1207.33 1282.16,1206.2 1282.75,1204.93 1283.34,1206.5 1283.92,1208.18 1284.51,1208.19 1285.1,1209.15 1285.68,1209.14 1286.27,1209.15 1286.86,1209.16 1287.44,1209.34 1288.03,1212.08 1288.61,1210.47 1289.2,1215.67 1289.79,1212.75 1290.37,1211.52 1290.96,1211.2 1291.55,1213.77 1292.13,1215.06 1292.72,1213.69 1293.31,1213.06 1293.89,1215.55 1294.48,1215.34 1295.06,1213.57 1295.65,1213.35 1296.24,1213.26 1296.82,1214.35 1297.41,1212.57 1298,1209.54 1298.58,1206.87 1299.17,1208.63 1299.76,1210.06 1300.34,1208.89 1300.93,1208.94 1301.52,1211.99 1302.1,1210.58 1302.69,1209.29 1303.27,1209.49 1303.86,1208.02 1304.45,1206.77 1305.03,1208.16 1305.62,1206.84 1306.21,1206.87 1306.79,1205.63 1307.38,1205.74 1307.97,1208.46 1308.55,1208.65 1309.14,1207.61 1309.73,1209.02 1310.31,1210.62 1310.9,1209.09 1311.48,1210.25 1312.07,1213.05 1312.66,1211.09 1313.24,1211.01 1313.83,1212.11 1314.42,1213.16 1315,1212.95 1315.59,1209.76 1316.18,1208.75 1316.76,1207.38 1317.35,1207.19 1317.93,1210.16 1318.52,1211.54 1319.11,1211.39 1319.69,1209.98 1320.28,1207.32 1320.87,1206.25 1321.45,1207.92 1322.04,1208.96 1322.63,1209 1323.21,1210.18 1323.8,1210.05 1324.39,1207.2 1324.97,1208.55 1325.56,1211.27 1326.14,1211.39 1326.73,1208.67 1327.32,1209.92 1327.9,1210.32 1328.49,1206.36 1329.08,1206.75 1329.66,1207.14 1330.25,1205.8 1330.84,1208.44 1331.42,1209.76 1332.01,1208.37 1332.6,1208.41 1333.18,1208.27 1333.77,1211.07 1334.35,1212.4 1334.94,1211.87 1335.53,1208.86 1336.11,1209.05 1336.7,1210.35 1337.29,1210.53 1337.87,1210.67 1338.46,1207.81 1339.05,1209.15 1339.63,1210.27 1340.22,1211.08 1340.8,1211.13 1341.39,1212.5 1341.98,1212.58 1342.56,1216.12 1343.15,1215.51 1343.74,1214.99 1344.32,1213.26 1344.91,1210.36 1345.5,1210.52 1346.08,1210.64 1346.67,1210.31 1347.26,1213.07 1347.84,1210.39 1348.43,1209.1 1349.01,1209.09 1349.6,1207.71 1350.19,1209.02 1350.77,1207.72 1351.36,1212.94 1351.95,1214 1352.53,1213.57 1353.12,1213.57 1353.71,1213.26 1354.29,1215.62 1354.88,1216.51 1355.47,1216.33 1356.05,1214.51 1356.64,1215.69 1357.22,1212.67 1357.81,1212.47 1358.4,1208.45 1358.98,1207.02 1359.57,1204.49 1360.16,1208.62 1360.74,1206.09 1361.33,1207.74 1361.92,1211.65 1362.5,1210.18 1363.09,1208.6 1363.68,1208.75 1364.26,1209.78 1364.85,1208.08 1365.43,1208.33 1366.02,1208.23 1366.61,1208.41 1367.19,1202.96 1367.78,1196.56 1368.37,1197.35 1368.95,1199.15 1369.54,1199.91 1370.13,1203 1370.71,1204.76 1371.3,1205.05 1371.88,1205.6 1372.47,1207.37 1373.06,1206.3 1373.64,1205.29 1374.23,1205.32 1374.82,1208.3 1375.4,1208.4 1375.99,1205.61 1376.58,1208.57 1377.16,1210.04 1377.75,1209.74 1378.34,1207.22 1378.92,1207.48 1379.51,1207.6 1380.09,1206.72 1380.68,1206.85 1381.27,1204.28 1381.85,1204.91 1382.44,1203.96 1383.03,1207.04 1383.61,1207.15 1384.2,1208.57 1384.79,1205.94 1385.37,1203.28 1385.96,1203.58 1386.55,1201.22 1387.13,1201.83 1387.72,1202.11 1388.3,1202.89 1388.89,1207.64 1389.48,1208.95 1390.06,1208.88 1390.65,1208.85 1391.24,1207.71 1391.82,1209.04 1392.41,1209.03 1393,1211.44 1393.58,1212.66 1394.17,1213.78 1394.75,1213.55 1395.34,1214.94 1395.93,1214.82 1396.51,1211.87 1397.1,1214.35 1397.69,1210.15 1398.27,1211.48 1398.86,1210.1 1399.45,1212.74 1400.03,1211.19 1400.62,1212.36 1401.21,1212.47 1401.79,1213.51 1402.38,1215.84 1402.96,1214.51 1403.55,1211.54 1404.14,1211.42 1404.72,1212.45 1405.31,1211.89 1405.9,1210.73 1406.48,1214.63 1407.07,1215.35 1407.66,1215.25 1408.24,1213.94 1408.83,1213.77 1409.42,1213.77 1410,1213.49 1410.59,1213.19 1411.17,1213.17 1411.76,1214.25 1412.35,1215.2 1412.93,1216.08 1413.52,1214.59 1414.11,1218.26 1414.69,1215.41 1415.28,1213.74 1415.87,1214.7 1416.45,1214.46 1417.04,1212.8 1417.63,1212.72 1418.21,1212.39 1418.8,1212.18 1419.38,1210.47 1419.97,1211.51 1420.56,1210.21 1421.14,1209.12 1421.73,1209.04 1422.32,1207.87 1422.9,1207.65 1423.49,1206.44 1424.08,1209.04 1424.66,1210.6 1425.25,1210.23 1425.83,1215.55 1426.42,1215.35 1427.01,1213.74 1427.59,1212.14 1428.18,1210.4 1428.77,1207.87 1429.35,1207.62 1429.94,1210.38 1430.53,1209.14 1431.11,1209.33 1431.7,1209.26 1432.29,1208.25 1432.87,1208.16 1433.46,1205.79 1434.04,1206.91 1434.63,1209.78 1435.22,1209.61 1435.8,1209.26 1436.39,1209.43 1436.98,1206.83 1437.56,1205.66 1438.15,1207 1438.74,1207.24 1439.32,1207.27 1439.91,1206.07 1440.5,1208.82 1441.08,1209.13 1441.67,1209.15 1442.25,1212.14 1442.84,1212.07 1443.43,1211.85 1444.01,1212.7 1444.6,1209.63 1445.19,1212.02 1445.77,1212.14 1446.36,1212.29 1446.95,1209.41 1447.53,1213.04 1448.12,1211.47 1448.7,1211.22 1449.29,1210.91 1449.88,1212.13 1450.46,1211.92 1451.05,1209.23 1451.64,1207.62 1452.22,1210.23 1452.81,1208.91 1453.4,1209.98 1453.98,1209.74 1454.57,1208.26 1455.16,1205.47 1455.74,1204.38 1456.33,1204.49 1456.91,1204.97 1457.5,1206.34 1458.09,1208.05 1458.67,1208.37 1459.26,1210.89 1459.85,1214.92 1460.43,1217.29 1461.02,1215.54 1461.61,1212.71 1462.19,1212.97 1462.78,1214.22 1463.37,1216.43 1463.95,1216.99 1464.54,1216.6 1465.12,1213.62 1465.71,1215.9 1466.3,1216.9 1466.88,1214.96 1467.47,1211.94 1468.06,1209.37 1468.64,1206.67 1469.23,1207.94 1469.82,1206.94 1470.4,1208.57 1470.99,1210.1 1471.57,1208.54 1472.16,1208.87 1472.75,1208.8 1473.33,1211.54 1473.92,1211.21 1474.51,1208.4 1475.09,1208.65 1475.68,1211.46 1476.27,1207.58 1476.85,1208.89 1477.44,1206.06 1478.03,1206.35 1478.61,1206.54 1479.2,1208.09 1479.78,1210.73 1480.37,1211.89 1480.96,1213.04 1481.54,1214.19 1482.13,1213.73 1482.72,1213.43 1483.3,1214.42 1483.89,1214.4 1484.48,1214.19 1485.06,1211.35 1485.65,1214.16 1486.24,1215.45 1486.82,1216.52 1487.41,1216.22 1487.99,1215.92 1488.58,1215.62 1489.17,1216.92 1489.75,1216.49 1490.34,1217.62 1490.93,1218.46 1491.51,1220.36 1492.1,1218.5 1492.69,1217.97 1493.27,1216.22 1493.86,1217.4 1494.45,1214.3 1495.03,1214.27 1495.62,1215.34 1496.2,1216.38 1496.79,1216.03 1497.38,1219.53 1497.96,1217.8 1498.55,1218.35 1499.14,1217.69 1499.72,1217.35 1500.31,1217.08 1500.9,1215.66 1501.48,1216.58 1502.07,1214.76 1502.65,1214.57 1503.24,1211.77 1503.83,1210.46 1504.41,1210.68 1505,1211.94 1505.59,1210.77 1506.17,1212.01 1506.76,1209.34 1507.35,1210.69 1507.93,1210.54 1508.52,1207.78 1509.11,1206.62 1509.69,1209.39 1510.28,1208.07 1510.86,1209.36 1511.45,1209.58 1512.04,1206.95 1512.62,1204.81 1513.21,1206.34 1513.8,1207.87 1514.38,1207.66 1514.97,1212.85 1515.56,1211.23 1516.14,1208.43 1516.73,1205.88 1517.32,1205.95 1517.9,1207.5 1518.49,1207.33 1519.07,1206.07 1519.66,1207.61 1520.25,1207.86 1520.83,1210.67 1521.42,1210.55 1522.01,1209.09 1522.59,1210.5 1523.18,1209.13 1523.77,1211.91 1524.35,1210.59 1524.94,1209.34 1525.52,1209.25 1526.11,1207.65 1526.7,1210.43 1527.28,1208.9 1527.87,1208.86 1528.46,1207.43 1529.04,1207.36 1529.63,1205.97 1530.22,1203.41 1530.8,1203.51 1531.39,1204.98 1531.98,1207.93 1532.56,1208.1 1533.15,1208.57 1533.73,1207.4 1534.32,1207.62 1534.91,1206.37 1535.49,1205.09 1536.08,1204.14 1536.67,1200.46 1537.25,1202.14 1537.84,1199.83 1538.43,1201.9 1539.01,1201.13 1539.6,1198.87 1540.19,1200.71 1540.77,1201.42 1541.36,1205.57 1541.94,1206.99 1542.53,1203.34 1543.12,1201.96 1543.7,1202.52 1544.29,1204.07 1544.88,1205.27 1545.46,1206.65 1546.05,1204.42 1546.64,1207.32 1547.22,1211.37 1547.81,1212.49 1548.4,1212.07 1548.98,1213.31 1549.57,1214.36 1550.15,1215.01 1550.74,1213.31 1551.33,1207.96 1551.91,1209.35 1552.5,1210.58 1553.09,1213 1553.67,1211.7 1554.26,1214.1 1554.85,1211.37 1555.43,1207.55 1556.02,1206.43 1556.6,1211.63 1557.19,1208.84 1557.78,1207.78 1558.36,1209.2 1558.95,1206.94 1559.54,1207.01 1560.12,1206.09 1560.71,1204.91 1561.3,1206.53 1561.88,1207.68 1562.47,1208.83 1563.06,1206.42 1563.64,1208.06 1564.23,1209.58 1564.81,1209.77 1565.4,1208.81 1565.99,1210.15 1566.57,1207.86 1567.16,1209.17 1567.75,1211.66 1568.33,1215.81 1568.92,1214.45 1569.51,1215.61 1570.09,1217.94 1570.68,1216.64 1571.27,1216.2 1571.85,1213.41 1572.44,1210.63 1573.02,1214.28 1573.61,1212.76 1574.2,1212.56 1574.78,1216.29 1575.37,1218.48 1575.96,1221.93 1576.54,1220.21 1577.13,1222.44 1577.72,1223.13 1578.3,1222.49 1578.89,1219.16 1579.47,1220.01 1580.06,1216.7 1580.65,1217.77 1581.23,1217.06 1581.82,1213.58 1582.41,1211.83 1582.99,1210.6 1583.58,1213.06 1584.17,1214.11 1584.75,1212.8 1585.34,1211.3 1585.93,1209.99 1586.51,1207.35 1587.1,1207.26 1587.68,1205.92 1588.27,1205.89 1588.86,1203.47 1589.44,1201.2 1590.03,1201.59 1590.62,1202.01 1591.2,1202.07 1591.79,1202.37 1592.38,1200.13 1592.96,1201.68 1593.55,1202.07 1594.14,1199.68 1594.72,1200.07 1595.31,1199.09 1595.89,1201.25 1596.48,1200.44 1597.07,1201.99 1597.65,1202.59 1598.24,1200.16 1598.83,1200.61 1599.41,1204.77 1600,1206.21 1600.59,1205.22 1601.17,1206.74 1601.76,1209.42 1602.34,1205.62 1602.93,1204.6 1603.52,1206.38 1604.1,1206.53 1604.69,1209.57 1605.28,1208.43 1605.86,1207.33 1606.45,1206.18 1607.04,1207.79 1607.62,1209.23 1608.21,1208 1608.8,1209.73 1609.38,1208.29 1609.97,1209.8 1610.55,1208.44 1611.14,1207.58 1611.73,1209.04 1612.31,1210.73 1612.9,1211.81 1613.49,1211.85 1614.07,1214.23 1614.66,1214.14 1615.25,1213.56 1615.83,1213.31 1616.42,1213.19 1617.01,1213.01 1617.59,1211.58 1618.18,1211.34 1618.76,1212.64 1619.35,1213.62 1619.94,1213.36 1620.52,1214.25 1621.11,1212.51 1621.7,1213.5 1622.28,1213.2 1622.87,1213.04 1623.46,1213.04 1624.04,1214.13 1624.63,1213.74 1625.22,1212.19 1625.8,1211.93 1626.39,1209.29 1626.97,1210.52 1627.56,1210.47 1628.15,1210.36 1628.73,1211.38 1629.32,1211.25 1629.91,1210.09 1630.49,1209.95 1631.08,1208.81 1631.67,1208.98 1632.25,1209.04 1632.84,1209.43 1633.42,1208.14 1634.01,1207.98 1634.6,1206.56 1635.18,1206.74 1635.77,1206.62 1636.36,1206.88 1636.94,1207.23 1637.53,1207.6 1638.12,1210.12 1638.7,1211.17 1639.29,1214.93 1639.88,1217.38 1640.46,1218.08 1641.05,1222.85 1641.63,1220.92 1642.22,1222.71 1642.81,1222.1 1643.39,1221.43 1643.98,1220.98 1644.57,1219.25 1645.15,1218.58 1645.74,1215.59 1646.33,1215.5 1646.91,1216.39 1647.5,1214.56 1648.09,1213.15 1648.67,1212.81 1649.26,1210.19 1649.84,1210.02 1650.43,1206.01 1651.02,1203.5 1651.6,1202.54 1652.19,1202.92 1652.78,1208.18 1653.36,1207.94 1653.95,1209.4 1654.54,1206.83 1655.12,1206.99 1655.71,1204.37 1656.29,1204.7 1656.88,1206.29 1657.47,1207.65 1658.05,1203.94 1658.64,1201.77 1659.23,1202.28 1659.81,1204.12 1660.4,1202.94 1660.99,1202.22 1661.57,1203.9 1662.16,1204.15 1662.75,1205.83 1663.33,1205.97 1663.92,1205.96 1664.5,1204.57 1665.09,1204.66 1665.68,1204.83 1666.26,1209.02 1666.85,1207.9 1667.44,1207.83 1668.02,1207.59 1668.61,1209.24 1669.2,1207.58 1669.78,1207.73 1670.37,1209.07 1670.96,1210.26 1671.54,1210.36 1672.13,1209.04 1672.71,1208.86 1673.3,1211.63 1673.89,1214.3 1674.47,1216.73 1675.06,1212.38 1675.65,1209.51 1676.23,1209.84 1676.82,1209.64 1677.41,1207.2 1677.99,1207.45 1678.58,1202.51 1679.17,1202.79 1679.75,1203.18 1680.34,1202.19 1680.92,1203.79 1681.51,1202.72 1682.1,1203.13 1682.68,1204.65 1683.27,1204.87 1683.86,1203.93 1684.44,1205.68 1685.03,1205.45 1685.62,1208.45 1686.2,1214.03 1686.79,1215.29 1687.37,1217.54 1687.96,1218.13 1688.55,1217.67 1689.13,1213.43 1689.72,1212.25 1690.31,1204.17 1690.89,1206.94 1691.48,1209.81 1692.07,1208.8 1692.65,1207.07 1693.24,1204.47 1693.83,1201.92 1694.41,1203.56 1695,1205.25 1695.58,1205.61 1696.17,1207 1696.76,1208.37 1697.34,1208.38 1697.93,1208.66 1698.52,1207.32 1699.1,1207.24 1699.69,1207.16 1700.28,1208.52 1700.86,1208.52 1701.45,1207.16 1702.04,1206.19 1702.62,1206.49 1703.21,1206.62 1703.79,1206.8 1704.38,1208.43 1704.97,1208.66 1705.55,1208.83 1706.14,1207.5 1706.73,1207.54 1707.31,1206.39 1707.9,1209.12 1708.49,1209.27 1709.07,1209.79 1709.66,1207.11 1710.24,1208.52 1710.83,1207.45 1711.42,1204.79 1712,1203.88 1712.59,1205.31 1713.18,1205.57 1713.76,1205.69 1714.35,1208.6 1714.94,1208.76 1715.52,1211.32 1716.11,1213.6 1716.7,1213.44 1717.28,1210.42 1717.87,1207.68 1718.45,1211 1719.04,1208.44 1719.63,1207.17 1720.21,1208.7 1720.8,1207.28 1721.39,1206.01 1721.97,1206.34 1722.56,1207.62 1723.15,1206.42 1723.73,1205.33 1724.32,1204.13 1724.91,1204.2 1725.49,1201.97 1726.08,1203.84 1726.66,1204.1 1727.25,1204.51 1727.84,1206.03 1728.42,1207.72 1729.01,1207.79 1729.6,1209.25 1730.18,1207.94 1730.77,1210.72 1731.36,1209.1 1731.94,1210.6 1732.53,1211.72 1733.11,1214.12 1733.7,1216.71 1734.29,1216.17 1734.87,1215.77 1735.46,1216.65 1736.05,1214.94 1736.63,1218.66 1737.22,1217.98 1737.81,1218.91 1738.39,1217.13 1738.98,1217.99 1739.57,1214.79 1740.15,1215.59 1740.74,1215.44 1741.32,1211.48 1741.91,1216.38 1742.5,1215.88 1743.08,1215.36 1743.67,1216.15 1744.26,1217.06 1744.84,1220.36 1745.43,1219.84 1746.02,1221.86 1746.6,1223.62 1747.19,1221.62 1747.78,1218.28 1748.36,1220.44 1748.95,1219.88 1749.53,1219.16 1750.12,1217.72 1750.71,1215.98 1751.29,1216.63 1751.88,1216.31 1752.47,1213.34 1753.05,1213.23 1753.64,1212.97 1754.23,1214.08 1754.81,1215.25 1755.4,1212.42 1755.99,1212.23 1756.57,1210.91 1757.16,1212.29 1757.74,1212.13 1758.33,1210.61 1758.92,1210.79 1759.5,1211.85 1760.09,1207.87 1760.68,1209.1 1761.26,1207.9 1761.85,1209.35 1762.44,1204.14 1763.02,1203.07 1763.61,1200.7 1764.19,1203.46 1764.78,1206.13 1765.37,1206.5 1765.95,1207.76 1766.54,1205.36 1767.13,1199.95 1767.71,1200.59 1768.3,1199.6 1768.89,1201.35 1769.47,1200.48 1770.06,1200.99 1770.65,1201.43 1771.23,1201.69 1771.82,1201.01 1772.4,1201.34 1772.99,1201.47 1773.58,1202.03 1774.16,1202.22 1774.75,1202.79 1775.34,1202.91 1775.92,1202.94 1776.51,1200.32 1777.1,1202.01 1777.68,1198.3 1778.27,1198.86 1778.86,1199.44 1779.44,1201 1780.03,1202.7 1780.61,1203.07 1781.2,1203.48 1781.79,1203.96 1782.37,1208.31 1782.96,1208.55 1783.55,1210.07 1784.13,1211.69 1784.72,1210.32 1785.31,1211.88 1785.89,1211.89 1786.48,1207.62 1787.06,1209.28 1787.65,1209.36 1788.24,1208.16 1788.82,1205.51 1789.41,1206.76 1790,1208.4 1790.58,1204.53 1791.17,1207.4 1791.76,1208.96 1792.34,1210.47 1792.93,1211.62 1793.52,1210.15 1794.1,1210.21 1794.69,1210.04 1795.27,1210.2 1795.86,1210.19 1796.45,1212.77 1797.03,1218.14 1797.62,1215.13 1798.21,1215.14 1798.79,1217.27 1799.38,1217.04 1799.97,1218.18 1800.55,1218.99 1801.14,1217.4 1801.73,1218.58 1802.31,1218.02 1802.9,1220.33 1803.48,1215.86 1804.07,1215.75 1804.66,1215.44 1805.24,1214.93 1805.83,1212 1806.42,1208.02 1807,1209.43 1807.59,1207.96 1808.18,1206.69 1808.76,1208.01 1809.35,1208.08 1809.94,1207.96 1810.52,1209.39 1811.11,1212.02 1811.69,1210.52 1812.28,1212.13 1812.87,1213.35 1813.45,1211.89 1814.04,1211.88 1814.63,1212 1815.21,1214.73 1815.8,1214.64 1816.39,1212.98 1816.97,1214.36 1817.56,1216.7 1818.14,1216.17 1818.73,1214.49 1819.32,1215.22 1819.9,1212.26 1820.49,1212.22 1821.08,1213.21 1821.66,1211.62 1822.25,1212.9 1822.84,1212.77 1823.42,1209.9 1824.01,1209.81 1824.6,1211.11 1825.18,1209.62 1825.77,1211.15 1826.35,1209.53 1826.94,1210.71 1827.53,1212.11 1828.11,1213.23 1828.7,1207.61 1829.29,1206.49 1829.87,1203.74 1830.46,1205.29 1831.05,1206.81 1831.63,1206.98 1832.22,1207.28 1832.81,1209.88 1833.39,1209.67 1833.98,1210.77 1834.56,1211.92 1835.15,1210.68 1835.74,1210.57 1836.32,1211.48 1836.91,1213.81 1837.5,1213.58 1838.08,1210.61 1838.67,1209.49 1839.26,1208.65 1839.84,1209.89 1840.43,1209.85 1841.01,1209.83 1841.6,1208.5 1842.19,1211.25 1842.77,1212.58 1843.36,1212.48 1843.95,1212.35 1844.53,1210.75 1845.12,1211.03 1845.71,1209.84 1846.29,1211.34 1846.88,1209.99 1847.47,1209.63 1848.05,1209.71 1848.64,1210.89 1849.22,1210.74 1849.81,1208.15 1850.4,1210.91 1850.98,1210.84 1851.57,1207.94 1852.16,1206.81 1852.74,1209.68 1853.33,1213.69 1853.92,1213.29 1854.5,1214.2 1855.09,1215.28 1855.68,1214.86 1856.26,1215.99 1856.85,1216.92 1857.43,1215 1858.02,1211.81 1858.61,1209.13 1859.19,1207.87 1859.78,1208.22 1860.37,1207.16 1860.95,1205.88 1861.54,1204.63 1862.13,1203.9 1862.71,1201.54 1863.3,1201.9 1863.88,1201.01 1864.47,1198.92 1865.06,1199.46 1865.64,1201.53 1866.23,1203.06 1866.82,1203.43 1867.4,1205.01 1867.99,1206.27 1868.58,1206.25 1869.16,1207.76 1869.75,1207.75 1870.34,1207.96 1870.92,1208.03 1871.51,1204.27 1872.09,1203.36 1872.68,1209.13 1873.27,1210.37 1873.85,1209.01 1874.44,1209.24 1875.03,1210.54 1875.61,1209.39 1876.2,1211.98 1876.79,1213.06 1877.37,1211.43 1877.96,1211.62 1878.55,1210.34 1879.13,1213.07 1879.72,1212.74 1880.3,1211.28 1880.89,1212.6 1881.48,1211.3 1882.06,1210.8 1882.65,1208.45 1883.24,1208.64 1883.82,1208.58 1884.41,1211.47 1885,1211.3 1885.58,1210.02 1886.17,1209.9 1886.76,1210.03 1887.34,1212.74 1887.93,1212.74 1888.51,1210.1 1889.1,1210.17 1889.69,1210.21 1890.27,1210.33 1890.86,1210.42 1891.45,1209.12 1892.03,1205.12 1892.62,1204.37 1893.21,1200.79 1893.79,1202.6 1894.38,1202.83 1894.96,1201.66 1895.55,1200.47 1896.14,1200.95 1896.72,1203.98 1897.31,1202.92 1897.9,1203.49 1898.48,1204.11 1899.07,1201.62 1899.66,1199.81 1900.24,1200.25 1900.83,1199.36 1901.42,1200.03 1902,1200.67 1902.59,1204.12 1903.17,1201.55 1903.76,1199.01 1904.35,1199.84 1904.93,1200.51 1905.52,1202.1 1906.11,1203.73 1906.69,1205.43 1907.28,1203.19 1907.87,1203.44 1908.45,1205.32 1909.04,1202.81 1909.63,1203.13 1910.21,1203.68 1910.8,1205.44 1911.38,1205.8 1911.97,1208.55 1912.56,1208.72 1913.14,1210.19 1913.73,1213.96 1914.32,1214.86 1914.9,1213.4 1915.49,1214.48 1916.08,1214.14 1916.66,1213.89 1917.25,1213.67 1917.83,1214.87 1918.42,1215.86 1919.01,1215.02 1919.59,1214.84 1920.18,1215.69 1920.77,1211.27 1921.35,1212.53 1921.94,1212.1 1922.53,1208.02 1923.11,1210.81 1923.7,1211.07 1924.29,1213.41 1924.87,1213.28 1925.46,1214.54 1926.04,1210.25 1926.63,1210.05 1927.22,1210.18 1927.8,1209.38 1928.39,1208.2 1928.98,1208.38 1929.56,1208.62 1930.15,1211.31 1930.74,1212.4 1931.32,1213.65 1931.91,1214.63 1932.5,1215.56 1933.08,1217.47 1933.67,1219.68 1934.25,1218.06 1934.84,1220.19 1935.43,1218.28 1936.01,1216.53 1936.6,1215.9 1937.19,1214.26 1937.77,1214.12 1938.36,1215.05 1938.95,1209.26 1939.53,1208.12 1940.12,1208.36 1940.71,1209.88 1941.29,1208.62 1941.88,1209.84 1942.46,1212.42 1943.05,1214.9 1943.64,1218.58 1944.22,1220.85 1944.81,1221.54 1945.4,1223.34 1945.98,1226.39 1946.57,1226.83 1947.16,1223.49 1947.74,1222.92 1948.33,1220.74 1948.91,1214.87 1949.5,1212.97 1950.09,1208.82 1950.67,1208.94 1951.26,1210.25 1951.85,1212.98 1952.43,1212.76 1953.02,1215.05 1953.61,1214.67 1954.19,1212.69 1954.78,1213.42 1955.37,1213.06 1955.95,1212.82 1956.54,1212.67 1957.12,1208.58 1957.71,1208.65 1958.3,1207.3 1958.88,1208.64 1959.47,1210.07 1960.06,1209.86 1960.64,1206.91 1961.23,1204.49 1961.82,1203.71 1962.4,1207.79 1962.99,1207.97 1963.58,1205.33 1964.16,1202.95 1964.75,1205.84 1965.33,1204.61 1965.92,1206.24 1966.51,1207.61 1967.09,1206.37 1967.68,1208.08 1968.27,1212.23 1968.85,1212 1969.44,1213.01 1970.03,1212.89 1970.61,1211.57 1971.2,1210.13 1971.78,1211.39 1972.37,1209.92 1972.96,1211.12 1973.54,1209.62 1974.13,1211.01 1974.72,1213.6 1975.3,1216.17 1975.89,1214.46 1976.48,1212.91 1977.06,1211.48 1977.65,1211.12 1978.24,1213.68 1978.82,1213.77 1979.41,1213.58 1979.99,1213.54 1980.58,1210.56 1981.17,1211.88 1981.75,1210.63 1982.34,1207.84 1982.93,1207.97 1983.51,1208.05 1984.1,1209.26 1984.69,1206.51 1985.27,1206.75 1985.86,1206.84 1986.45,1208.01 1987.03,1208.08 1987.62,1206.9 1988.2,1208.4 1988.79,1208.26 1989.38,1206.76 1989.96,1208.49 1990.55,1208.4 1991.14,1208.62 1991.72,1208.44 1992.31,1205.67 1992.9,1208.67 1993.48,1208.98 1994.07,1209.02 1994.65,1206.6 1995.24,1209.48 1995.83,1208 1996.41,1210.58 1997,1209.09 1997.59,1209.1 1998.17,1210.57 1998.76,1207.8 1999.35,1207.77 1999.93,1203.72 2000.52,1202.83 2001.11,1201.9 2001.69,1203.33 2002.28,1203.73 2002.86,1205.31 2003.45,1204.08 2004.04,1205.64 2004.62,1204.58 2005.21,1207.37 2005.8,1206.18 2006.38,1203.85 2006.97,1203.1 2007.56,1202.03 2008.14,1202.48 2008.73,1203.92 2009.32,1208.1 2009.9,1209.49 2010.49,1206.77 2011.07,1208.18 2011.66,1205.62 2012.25,1204.25 2012.83,1204.37 2013.42,1203.38 2014.01,1202.47 2014.59,1200.4 2015.18,1200.73 2015.77,1201.37 2016.35,1200.32 2016.94,1200.65 2017.53,1202.4 2018.11,1202.78 2018.7,1202.96 2019.28,1202.96 2019.87,1200.47 2020.46,1200.94 2021.04,1201.32 2021.63,1201.9 2022.22,1200.82 2022.8,1201.7 2023.39,1202.16 2023.98,1201.26 2024.56,1201.61 2025.15,1207.4 2025.73,1207.56 2026.32,1208.89 2026.91,1207.45 2027.49,1207.61 2028.08,1207.56 2028.67,1206.43 2029.25,1205.09 2029.84,1205.27 2030.43,1205.47 2031.01,1205.73 2031.6,1204.47 2032.19,1203.78 2032.77,1205.4 2033.36,1204.77 2033.94,1203.53 2034.53,1203.92 2035.12,1198.94 2035.7,1200.85 2036.29,1202.68 2036.88,1204.65 2037.46,1203.5 2038.05,1202.44 2038.64,1201.53 2039.22,1204.62 2039.81,1204.78 2040.4,1204.98 2040.98,1205.58 2041.57,1205.82 2042.15,1206.13 2042.74,1204.75 2043.33,1204.95 2043.91,1206.06 2044.5,1207.55 2045.09,1206.58 2045.67,1205.27 2046.26,1203.94 2046.85,1205.95 2047.43,1206.25 2048.02,1207.71 2048.6,1207.77 2049.19,1206.59 2049.78,1207.94 2050.36,1208.01 2050.95,1208.04 2051.54,1208.24 2052.12,1209.63 2052.71,1208.34 2053.3,1208.5 2053.88,1208.69 2054.47,1211.64 2055.06,1213 2055.64,1211.68 2056.23,1212.85 2056.81,1212.76 2057.4,1211.5 2057.99,1210.07 2058.57,1209.99 2059.16,1208.67 2059.75,1207.31 2060.33,1206.12 2060.92,1205.11 2061.51,1206.92 2062.09,1208.46 2062.68,1207.01 2063.27,1208.59 2063.85,1207.47 2064.44,1206.53 2065.02,1209.36 2065.61,1210.69 2066.2,1211.97 2066.78,1213.24 2067.37,1212.82 2067.96,1214.03 2068.54,1213.41 2069.13,1213.35 2069.72,1212 2070.3,1213.09 2070.89,1214.2 2071.48,1212.52 2072.06,1207.21 2072.65,1206.08 2073.23,1206.33 2073.82,1206.54 2074.41,1206.75 2074.99,1208.12 2075.58,1207.91 2076.17,1206.66 2076.75,1205.34 2077.34,1204.25 2077.93,1207.37 2078.51,1208.7 2079.1,1208.61 2079.68,1208.75 2080.27,1207.62 2080.86,1210.48 2081.44,1210.37 2082.03,1211.46 2082.62,1211.26 2083.2,1212.38 2083.79,1212.4 2084.38,1210.89 2084.96,1210.58 2085.55,1209.14 2086.14,1207.79 2086.72,1205.25 2087.31,1205.54 2087.89,1205.88 2088.48,1208.65 2089.07,1208.55 2089.65,1209.93 2090.24,1208.5 2090.83,1208.5 2091.41,1208.5 2092,1208.44 2092.59,1209.55 2093.17,1212.14 2093.76,1210.75 2094.35,1213.51 2094.93,1217.39 2095.52,1216.9 2096.1,1216.71 2096.69,1217.7 2097.28,1219.69 2097.86,1218.04 2098.45,1220.2 2099.04,1218.29 2099.62,1217.72 2100.21,1220.38 2100.8,1218.24 2101.38,1217.86 2101.97,1221.2 2102.55,1219.02 2103.14,1217.39 2103.73,1215.51 2104.31,1213.7 2104.9,1213.74 2105.49,1210.94 2106.07,1210.85 2106.66,1211.9 2107.25,1211.55 2107.83,1210.37 2108.42,1207.54 2109.01,1207.51 2109.59,1207.82 2110.18,1206.76 2110.76,1206.76 2111.35,1207.03 2111.94,1206.07 2112.52,1207.62 2113.11,1204.08 2113.7,1205.52 2114.28,1207.2 2114.87,1206.19 2115.46,1206.47 2116.04,1206.41 2116.63,1203.65 2117.22,1204.08 2117.8,1202.97 2118.39,1206.09 2118.97,1204.97 2119.56,1206.48 2120.15,1205.67 2120.73,1204.67 2121.32,1202.27 2121.91,1206.36 2122.49,1206.33 2123.08,1206.33 2123.67,1208.99 2124.25,1208.02 2124.84,1208.1 2125.42,1208.34 2126.01,1209.99 2126.6,1209.68 2127.18,1212.47 2127.77,1212.22 2128.36,1212.04 2128.94,1212.05 2129.53,1211.81 2130.12,1211.89 2130.7,1210.69 2131.29,1207.84 2131.88,1209.22 2132.46,1203.86 2133.05,1205.32 2133.63,1206.66 2134.22,1209.3 2134.81,1209.3 2135.39,1211.86 2135.98,1213.17 2136.57,1211.44 2137.15,1211.2 2137.74,1211.11 2138.33,1210.85 2138.91,1213.35 2139.5,1210.58 2140.09,1209.25 2140.67,1209.22 2141.26,1205.26 2141.84,1202.61 2142.43,1199.15 2143.02,1199.91 2143.6,1199.16 2144.19,1199.27 2144.78,1199.95 2145.36,1200.5 2145.95,1199.58 2146.54,1200.24 2147.12,1203.47 2147.71,1203.77 2148.3,1203.14 2148.88,1204.76 2149.47,1203.47 2150.05,1206.37 2150.64,1206.3 2151.23,1203.82 2151.81,1204.02 2152.4,1206.83 2152.99,1207.17 2153.57,1206.28 2154.16,1209.03 2154.75,1208.68 2155.33,1207.36 2155.92,1207.42 2156.5,1207.28 2157.09,1208.52 2157.68,1208.46 2158.26,1212.28 \"/>\n<path clip-path=\"url(#clip202)\" d=\"M986.025 1209.87 L986.612 1209.87 L987.198 1209.87 L987.785 1209.87 L988.371 1209.87 L988.957 1209.87 L989.544 1209.87 L990.13 1209.87 L990.717 1209.87 L991.303 1209.87 L991.889 1209.87 L992.476 1209.87 L993.062 1209.87 L993.649 1209.87 L994.235 1209.87 L994.822 1209.87 L995.408 1209.87 L995.994 1209.87 L996.581 1209.87 L997.167 1209.87 L997.754 1209.87 L998.34 1209.87 L998.926 1209.87 L999.513 1209.87 L1000.1 1209.87 L1000.69 1209.87 L1001.27 1209.87 L1001.86 1209.87 L1002.44 1209.87 L1003.03 1209.87 L1003.62 1209.87 L1004.2 1209.87 L1004.79 1209.87 L1005.38 1209.87 L1005.96 1209.87 L1006.55 1209.87 L1007.14 1209.87 L1007.72 1209.87 L1008.31 1209.87 L1008.9 1209.87 L1009.48 1209.87 L1010.07 1209.87 L1010.65 1209.87 L1011.24 1209.87 L1011.83 1209.87 L1012.41 1209.87 L1013 1209.87 L1013.59 1209.87 L1014.17 1209.87 L1014.76 1209.87 L1015.35 1209.87 L1015.93 1209.87 L1016.52 1209.87 L1017.11 1209.87 L1017.69 1209.87 L1018.28 1209.87 L1018.86 1209.87 L1019.45 1209.87 L1020.04 1209.87 L1020.62 1209.87 L1021.21 1209.87 L1021.8 1209.87 L1022.38 1209.87 L1022.97 1209.87 L1023.56 1209.87 L1024.14 1209.87 L1024.73 1209.87 L1025.32 1209.87 L1025.9 1209.87 L1026.49 1209.87 L1027.07 1209.87 L1027.66 1209.87 L1028.25 1209.87 L1028.83 1209.87 L1029.42 1209.87 L1030.01 1209.87 L1030.59 1209.87 L1031.18 1209.87 L1031.77 1209.87 L1032.35 1209.87 L1032.94 1209.87 L1033.52 1209.87 L1034.11 1209.87 L1034.7 1209.87 L1035.28 1209.87 L1035.87 1209.87 L1036.46 1209.87 L1037.04 1209.87 L1037.63 1209.87 L1038.22 1209.87 L1038.8 1209.87 L1039.39 1209.87 L1039.98 1209.87 L1040.56 1209.87 L1041.15 1209.87 L1041.73 1209.87 L1042.32 1209.87 L1042.91 1209.87 L1043.49 1209.87 L1044.08 1209.87 L1044.67 1209.87 L1045.25 1209.87 L1045.84 1209.87 L1046.43 1209.87 L1047.01 1209.87 L1047.6 1209.87 L1048.19 1209.87 L1048.77 1209.87 L1049.36 1209.87 L1049.94 1209.87 L1050.53 1209.87 L1051.12 1209.87 L1051.7 1209.87 L1052.29 1209.87 L1052.88 1209.87 L1053.46 1209.87 L1054.05 1209.87 L1054.64 1209.87 L1055.22 1209.87 L1055.81 1209.87 L1056.39 1209.87 L1056.98 1209.87 L1057.57 1209.87 L1058.15 1209.87 L1058.74 1209.87 L1059.33 1209.87 L1059.91 1209.87 L1060.5 1209.87 L1061.09 1209.87 L1061.67 1209.87 L1062.26 1209.87 L1062.85 1209.87 L1063.43 1209.87 L1064.02 1209.87 L1064.6 1209.87 L1065.19 1209.87 L1065.78 1209.87 L1066.36 1209.87 L1066.95 1209.87 L1067.54 1209.87 L1068.12 1209.87 L1068.71 1209.87 L1069.3 1209.87 L1069.88 1209.87 L1070.47 1209.87 L1071.06 1209.87 L1071.64 1209.87 L1072.23 1209.87 L1072.81 1209.87 L1073.4 1209.87 L1073.99 1209.87 L1074.57 1209.87 L1075.16 1209.87 L1075.75 1209.87 L1076.33 1209.87 L1076.92 1209.87 L1077.51 1209.87 L1078.09 1209.87 L1078.68 1209.87 L1079.26 1209.87 L1079.85 1209.87 L1080.44 1209.87 L1081.02 1209.87 L1081.61 1209.87 L1082.2 1209.87 L1082.78 1209.87 L1083.37 1209.87 L1083.96 1209.87 L1084.54 1209.87 L1085.13 1209.87 L1085.72 1209.87 L1086.3 1209.87 L1086.89 1209.87 L1087.47 1209.87 L1088.06 1209.87 L1088.65 1209.87 L1089.23 1209.87 L1089.82 1209.87 L1090.41 1209.87 L1090.99 1209.87 L1091.58 1209.87 L1092.17 1209.87 L1092.75 1209.87 L1093.34 1209.87 L1093.93 1209.87 L1094.51 1209.87 L1095.1 1209.87 L1095.68 1209.87 L1096.27 1209.87 L1096.86 1209.87 L1097.44 1209.87 L1098.03 1209.87 L1098.62 1209.87 L1099.2 1209.87 L1099.79 1209.87 L1100.38 1209.87 L1100.96 1209.87 L1101.55 1209.87 L1102.14 1209.87 L1102.72 1209.87 L1103.31 1209.87 L1103.89 1209.87 L1104.48 1209.87 L1105.07 1209.87 L1105.65 1209.87 L1106.24 1209.87 L1106.83 1209.87 L1107.41 1209.87 L1108 1209.87 L1108.59 1209.87 L1109.17 1209.87 L1109.76 1209.87 L1110.34 1209.87 L1110.93 1209.87 L1111.52 1209.87 L1112.1 1209.87 L1112.69 1209.87 L1113.28 1209.87 L1113.86 1209.87 L1114.45 1209.87 L1115.04 1209.87 L1115.62 1209.87 L1116.21 1209.87 L1116.8 1209.87 L1117.38 1209.87 L1117.97 1209.87 L1118.55 1209.87 L1119.14 1209.87 L1119.73 1209.87 L1120.31 1209.87 L1120.9 1209.87 L1121.49 1209.87 L1122.07 1209.87 L1122.66 1209.87 L1123.25 1209.87 L1123.83 1209.87 L1124.42 1209.87 L1125.01 1209.87 L1125.59 1209.87 L1126.18 1209.87 L1126.76 1209.87 L1127.35 1209.87 L1127.94 1209.87 L1128.52 1209.87 L1129.11 1209.87 L1129.7 1209.87 L1130.28 1209.87 L1130.87 1209.87 L1131.46 1209.87 L1132.04 1209.87 L1132.63 1209.87 L1133.21 1209.87 L1133.8 1209.87 L1134.39 1209.87 L1134.97 1209.87 L1135.56 1209.87 L1136.15 1209.87 L1136.73 1209.87 L1137.32 1209.87 L1137.91 1209.87 L1138.49 1209.87 L1139.08 1209.87 L1139.67 1209.87 L1140.25 1209.87 L1140.84 1209.87 L1141.42 1209.87 L1142.01 1209.87 L1142.6 1209.87 L1143.18 1209.87 L1143.77 1209.87 L1144.36 1209.87 L1144.94 1209.87 L1145.53 1209.87 L1146.12 1209.87 L1146.7 1209.87 L1147.29 1209.87 L1147.88 1209.87 L1148.46 1209.87 L1149.05 1209.87 L1149.63 1209.87 L1150.22 1209.87 L1150.81 1209.87 L1151.39 1209.87 L1151.98 1209.87 L1152.57 1209.87 L1153.15 1209.87 L1153.74 1209.87 L1154.33 1209.87 L1154.91 1209.87 L1155.5 1209.87 L1156.09 1209.87 L1156.67 1209.87 L1157.26 1209.87 L1157.84 1209.87 L1158.43 1209.87 L1159.02 1209.87 L1159.6 1209.87 L1160.19 1209.87 L1160.78 1209.87 L1161.36 1209.87 L1161.95 1209.87 L1162.54 1209.87 L1163.12 1209.87 L1163.71 1209.87 L1164.29 1209.87 L1164.88 1209.87 L1165.47 1209.87 L1166.05 1209.87 L1166.64 1209.87 L1167.23 1209.87 L1167.81 1209.87 L1168.4 1209.87 L1168.99 1209.87 L1169.57 1209.87 L1170.16 1209.87 L1170.75 1209.87 L1171.33 1209.87 L1171.92 1209.87 L1172.5 1209.87 L1173.09 1209.87 L1173.68 1209.87 L1174.26 1209.87 L1174.85 1209.87 L1175.44 1209.87 L1176.02 1209.87 L1176.61 1209.87 L1177.2 1209.87 L1177.78 1209.87 L1178.37 1209.87 L1178.96 1209.87 L1179.54 1209.87 L1180.13 1209.87 L1180.71 1209.87 L1181.3 1209.87 L1181.89 1209.87 L1182.47 1209.87 L1183.06 1209.87 L1183.65 1209.87 L1184.23 1209.87 L1184.82 1209.87 L1185.41 1209.87 L1185.99 1209.87 L1186.58 1209.87 L1187.16 1209.87 L1187.75 1209.87 L1188.34 1209.87 L1188.92 1209.87 L1189.51 1209.87 L1190.1 1209.87 L1190.68 1209.87 L1191.27 1209.87 L1191.86 1209.87 L1192.44 1209.87 L1193.03 1209.87 L1193.62 1209.87 L1194.2 1209.87 L1194.79 1209.87 L1195.37 1209.87 L1195.96 1209.87 L1196.55 1209.87 L1197.13 1209.87 L1197.72 1209.87 L1198.31 1209.87 L1198.89 1209.87 L1199.48 1209.87 L1200.07 1209.87 L1200.65 1209.87 L1201.24 1209.87 L1201.83 1209.87 L1202.41 1209.87 L1203 1209.87 L1203.58 1209.87 L1204.17 1209.87 L1204.76 1209.87 L1205.34 1209.87 L1205.93 1209.87 L1206.52 1209.87 L1207.1 1209.87 L1207.69 1209.87 L1208.28 1209.87 L1208.86 1209.87 L1209.45 1209.87 L1210.03 1209.87 L1210.62 1209.87 L1211.21 1209.87 L1211.79 1209.87 L1212.38 1209.87 L1212.97 1209.87 L1213.55 1209.87 L1214.14 1209.87 L1214.73 1209.87 L1215.31 1209.87 L1215.9 1209.87 L1216.49 1209.87 L1217.07 1209.87 L1217.66 1209.87 L1218.24 1209.87 L1218.83 1209.87 L1219.42 1209.87 L1220 1209.87 L1220.59 1209.87 L1221.18 1209.87 L1221.76 1209.87 L1222.35 1209.87 L1222.94 1209.87 L1223.52 1209.87 L1224.11 1209.87 L1224.7 1209.87 L1225.28 1209.87 L1225.87 1209.87 L1226.45 1209.87 L1227.04 1209.87 L1227.63 1209.87 L1228.21 1209.87 L1228.8 1209.87 L1229.39 1209.87 L1229.97 1209.87 L1230.56 1209.87 L1231.15 1209.87 L1231.73 1209.87 L1232.32 1209.87 L1232.91 1209.87 L1233.49 1209.87 L1234.08 1209.87 L1234.66 1209.87 L1235.25 1209.87 L1235.84 1209.87 L1236.42 1209.87 L1237.01 1209.87 L1237.6 1209.87 L1238.18 1209.87 L1238.77 1209.87 L1239.36 1209.87 L1239.94 1209.87 L1240.53 1209.87 L1241.11 1209.87 L1241.7 1209.87 L1242.29 1209.87 L1242.87 1209.87 L1243.46 1209.87 L1244.05 1209.87 L1244.63 1209.87 L1245.22 1209.87 L1245.81 1209.87 L1246.39 1209.87 L1246.98 1209.87 L1247.57 1209.87 L1248.15 1209.87 L1248.74 1209.87 L1249.32 1209.87 L1249.91 1209.87 L1250.5 1209.87 L1251.08 1209.87 L1251.67 1209.87 L1252.26 1209.87 L1252.84 1209.87 L1253.43 1209.87 L1254.02 1209.87 L1254.6 1209.87 L1255.19 1209.87 L1255.78 1209.87 L1256.36 1209.87 L1256.95 1209.87 L1257.53 1209.87 L1258.12 1209.87 L1258.71 1209.87 L1259.29 1209.87 L1259.88 1209.87 L1260.47 1209.87 L1261.05 1209.87 L1261.64 1209.87 L1262.23 1209.87 L1262.81 1209.87 L1263.4 1209.87 L1263.98 1209.87 L1264.57 1209.87 L1265.16 1209.87 L1265.74 1209.87 L1266.33 1209.87 L1266.92 1209.87 L1267.5 1209.87 L1268.09 1209.87 L1268.68 1209.87 L1269.26 1209.87 L1269.85 1209.87 L1270.44 1209.87 L1271.02 1209.87 L1271.61 1209.87 L1272.19 1209.87 L1272.78 1209.87 L1273.37 1209.87 L1273.95 1209.87 L1274.54 1209.87 L1275.13 1209.87 L1275.71 1209.87 L1276.3 1209.87 L1276.89 1209.87 L1277.47 1209.87 L1278.06 1209.87 L1278.65 1209.87 L1279.23 1209.87 L1279.82 1209.87 L1280.4 1209.87 L1280.99 1209.87 L1281.58 1209.87 L1282.16 1209.87 L1282.75 1209.87 L1283.34 1209.87 L1283.92 1209.87 L1284.51 1209.87 L1285.1 1209.87 L1285.68 1209.87 L1286.27 1209.87 L1286.86 1209.87 L1287.44 1209.87 L1288.03 1209.87 L1288.61 1209.87 L1289.2 1209.87 L1289.79 1209.87 L1290.37 1209.87 L1290.96 1209.87 L1291.55 1209.87 L1292.13 1209.87 L1292.72 1209.87 L1293.31 1209.87 L1293.89 1209.87 L1294.48 1209.87 L1295.06 1209.87 L1295.65 1209.87 L1296.24 1209.87 L1296.82 1209.87 L1297.41 1209.87 L1298 1209.87 L1298.58 1209.87 L1299.17 1209.87 L1299.76 1209.87 L1300.34 1209.87 L1300.93 1209.87 L1301.52 1209.87 L1302.1 1209.87 L1302.69 1209.87 L1303.27 1209.87 L1303.86 1209.87 L1304.45 1209.87 L1305.03 1209.87 L1305.62 1209.87 L1306.21 1209.87 L1306.79 1209.87 L1307.38 1209.87 L1307.97 1209.87 L1308.55 1209.87 L1309.14 1209.87 L1309.73 1209.87 L1310.31 1209.87 L1310.9 1209.87 L1311.48 1209.87 L1312.07 1209.87 L1312.66 1209.87 L1313.24 1209.87 L1313.83 1209.87 L1314.42 1209.87 L1315 1209.87 L1315.59 1209.87 L1316.18 1209.87 L1316.76 1209.87 L1317.35 1209.87 L1317.93 1209.87 L1318.52 1209.87 L1319.11 1209.87 L1319.69 1209.87 L1320.28 1209.87 L1320.87 1209.87 L1321.45 1209.87 L1322.04 1209.87 L1322.63 1209.87 L1323.21 1209.87 L1323.8 1209.87 L1324.39 1209.87 L1324.97 1209.87 L1325.56 1209.87 L1326.14 1209.87 L1326.73 1209.87 L1327.32 1209.87 L1327.9 1209.87 L1328.49 1209.87 L1329.08 1209.87 L1329.66 1209.87 L1330.25 1209.87 L1330.84 1209.87 L1331.42 1209.87 L1332.01 1209.87 L1332.6 1209.87 L1333.18 1209.87 L1333.77 1209.87 L1334.35 1209.87 L1334.94 1209.87 L1335.53 1209.87 L1336.11 1209.87 L1336.7 1209.87 L1337.29 1209.87 L1337.87 1209.87 L1338.46 1209.87 L1339.05 1209.87 L1339.63 1209.87 L1340.22 1209.87 L1340.8 1209.87 L1341.39 1209.87 L1341.98 1209.87 L1342.56 1209.87 L1343.15 1209.87 L1343.74 1209.87 L1344.32 1209.87 L1344.91 1209.87 L1345.5 1209.87 L1346.08 1209.87 L1346.67 1209.87 L1347.26 1209.87 L1347.84 1209.87 L1348.43 1209.87 L1349.01 1209.87 L1349.6 1209.87 L1350.19 1209.87 L1350.77 1209.87 L1351.36 1209.87 L1351.95 1209.87 L1352.53 1209.87 L1353.12 1209.87 L1353.71 1209.87 L1354.29 1209.87 L1354.88 1209.87 L1355.47 1209.87 L1356.05 1209.87 L1356.64 1209.87 L1357.22 1209.87 L1357.81 1209.87 L1358.4 1209.87 L1358.98 1209.87 L1359.57 1209.87 L1360.16 1209.87 L1360.74 1209.87 L1361.33 1209.87 L1361.92 1209.87 L1362.5 1209.87 L1363.09 1209.87 L1363.68 1209.87 L1364.26 1209.87 L1364.85 1209.87 L1365.43 1209.87 L1366.02 1209.87 L1366.61 1209.87 L1367.19 1209.87 L1367.78 1209.87 L1368.37 1209.87 L1368.95 1209.87 L1369.54 1209.87 L1370.13 1209.87 L1370.71 1209.87 L1371.3 1209.87 L1371.88 1209.87 L1372.47 1209.87 L1373.06 1209.87 L1373.64 1209.87 L1374.23 1209.87 L1374.82 1209.87 L1375.4 1209.87 L1375.99 1209.87 L1376.58 1209.87 L1377.16 1209.87 L1377.75 1209.87 L1378.34 1209.87 L1378.92 1209.87 L1379.51 1209.87 L1380.09 1209.87 L1380.68 1209.87 L1381.27 1209.87 L1381.85 1209.87 L1382.44 1209.87 L1383.03 1209.87 L1383.61 1209.87 L1384.2 1209.87 L1384.79 1209.87 L1385.37 1209.87 L1385.96 1209.87 L1386.55 1209.87 L1387.13 1209.87 L1387.72 1209.87 L1388.3 1209.87 L1388.89 1209.87 L1389.48 1209.87 L1390.06 1209.87 L1390.65 1209.87 L1391.24 1209.87 L1391.82 1209.87 L1392.41 1209.87 L1393 1209.87 L1393.58 1209.87 L1394.17 1209.87 L1394.75 1209.87 L1395.34 1209.87 L1395.93 1209.87 L1396.51 1209.87 L1397.1 1209.87 L1397.69 1209.87 L1398.27 1209.87 L1398.86 1209.87 L1399.45 1209.87 L1400.03 1209.87 L1400.62 1209.87 L1401.21 1209.87 L1401.79 1209.87 L1402.38 1209.87 L1402.96 1209.87 L1403.55 1209.87 L1404.14 1209.87 L1404.72 1209.87 L1405.31 1209.87 L1405.9 1209.87 L1406.48 1209.87 L1407.07 1209.87 L1407.66 1209.87 L1408.24 1209.87 L1408.83 1209.87 L1409.42 1209.87 L1410 1209.87 L1410.59 1209.87 L1411.17 1209.87 L1411.76 1209.87 L1412.35 1209.87 L1412.93 1209.87 L1413.52 1209.87 L1414.11 1209.87 L1414.69 1209.87 L1415.28 1209.87 L1415.87 1209.87 L1416.45 1209.87 L1417.04 1209.87 L1417.63 1209.87 L1418.21 1209.87 L1418.8 1209.87 L1419.38 1209.87 L1419.97 1209.87 L1420.56 1209.87 L1421.14 1209.87 L1421.73 1209.87 L1422.32 1209.87 L1422.9 1209.87 L1423.49 1209.87 L1424.08 1209.87 L1424.66 1209.87 L1425.25 1209.87 L1425.83 1209.87 L1426.42 1209.87 L1427.01 1209.87 L1427.59 1209.87 L1428.18 1209.87 L1428.77 1209.87 L1429.35 1209.87 L1429.94 1209.87 L1430.53 1209.87 L1431.11 1209.87 L1431.7 1209.87 L1432.29 1209.87 L1432.87 1209.87 L1433.46 1209.87 L1434.04 1209.87 L1434.63 1209.87 L1435.22 1209.87 L1435.8 1209.87 L1436.39 1209.87 L1436.98 1209.87 L1437.56 1209.87 L1438.15 1209.87 L1438.74 1209.87 L1439.32 1209.87 L1439.91 1209.87 L1440.5 1209.87 L1441.08 1209.87 L1441.67 1209.87 L1442.25 1209.87 L1442.84 1209.87 L1443.43 1209.87 L1444.01 1209.87 L1444.6 1209.87 L1445.19 1209.87 L1445.77 1209.87 L1446.36 1209.87 L1446.95 1209.87 L1447.53 1209.87 L1448.12 1209.87 L1448.7 1209.87 L1449.29 1209.87 L1449.88 1209.87 L1450.46 1209.87 L1451.05 1209.87 L1451.64 1209.87 L1452.22 1209.87 L1452.81 1209.87 L1453.4 1209.87 L1453.98 1209.87 L1454.57 1209.87 L1455.16 1209.87 L1455.74 1209.87 L1456.33 1209.87 L1456.91 1209.87 L1457.5 1209.87 L1458.09 1209.87 L1458.67 1209.87 L1459.26 1209.87 L1459.85 1209.87 L1460.43 1209.87 L1461.02 1209.87 L1461.61 1209.87 L1462.19 1209.87 L1462.78 1209.87 L1463.37 1209.87 L1463.95 1209.87 L1464.54 1209.87 L1465.12 1209.87 L1465.71 1209.87 L1466.3 1209.87 L1466.88 1209.87 L1467.47 1209.87 L1468.06 1209.87 L1468.64 1209.87 L1469.23 1209.87 L1469.82 1209.87 L1470.4 1209.87 L1470.99 1209.87 L1471.57 1209.87 L1472.16 1209.87 L1472.75 1209.87 L1473.33 1209.87 L1473.92 1209.87 L1474.51 1209.87 L1475.09 1209.87 L1475.68 1209.87 L1476.27 1209.87 L1476.85 1209.87 L1477.44 1209.87 L1478.03 1209.87 L1478.61 1209.87 L1479.2 1209.87 L1479.78 1209.87 L1480.37 1209.87 L1480.96 1209.87 L1481.54 1209.87 L1482.13 1209.87 L1482.72 1209.87 L1483.3 1209.87 L1483.89 1209.87 L1484.48 1209.87 L1485.06 1209.87 L1485.65 1209.87 L1486.24 1209.87 L1486.82 1209.87 L1487.41 1209.87 L1487.99 1209.87 L1488.58 1209.87 L1489.17 1209.87 L1489.75 1209.87 L1490.34 1209.87 L1490.93 1209.87 L1491.51 1209.87 L1492.1 1209.87 L1492.69 1209.87 L1493.27 1209.87 L1493.86 1209.87 L1494.45 1209.87 L1495.03 1209.87 L1495.62 1209.87 L1496.2 1209.87 L1496.79 1209.87 L1497.38 1209.87 L1497.96 1209.87 L1498.55 1209.87 L1499.14 1209.87 L1499.72 1209.87 L1500.31 1209.87 L1500.9 1209.87 L1501.48 1209.87 L1502.07 1209.87 L1502.65 1209.87 L1503.24 1209.87 L1503.83 1209.87 L1504.41 1209.87 L1505 1209.87 L1505.59 1209.87 L1506.17 1209.87 L1506.76 1209.87 L1507.35 1209.87 L1507.93 1209.87 L1508.52 1209.87 L1509.11 1209.87 L1509.69 1209.87 L1510.28 1209.87 L1510.86 1209.87 L1511.45 1209.87 L1512.04 1209.87 L1512.62 1209.87 L1513.21 1209.87 L1513.8 1209.87 L1514.38 1209.87 L1514.97 1209.87 L1515.56 1209.87 L1516.14 1209.87 L1516.73 1209.87 L1517.32 1209.87 L1517.9 1209.87 L1518.49 1209.87 L1519.07 1209.87 L1519.66 1209.87 L1520.25 1209.87 L1520.83 1209.87 L1521.42 1209.87 L1522.01 1209.87 L1522.59 1209.87 L1523.18 1209.87 L1523.77 1209.87 L1524.35 1209.87 L1524.94 1209.87 L1525.52 1209.87 L1526.11 1209.87 L1526.7 1209.87 L1527.28 1209.87 L1527.87 1209.87 L1528.46 1209.87 L1529.04 1209.87 L1529.63 1209.87 L1530.22 1209.87 L1530.8 1209.87 L1531.39 1209.87 L1531.98 1209.87 L1532.56 1209.87 L1533.15 1209.87 L1533.73 1209.87 L1534.32 1209.87 L1534.91 1209.87 L1535.49 1209.87 L1536.08 1209.87 L1536.67 1209.87 L1537.25 1209.87 L1537.84 1209.87 L1538.43 1209.87 L1539.01 1209.87 L1539.6 1209.87 L1540.19 1209.87 L1540.77 1209.87 L1541.36 1209.87 L1541.94 1209.87 L1542.53 1209.87 L1543.12 1209.87 L1543.7 1209.87 L1544.29 1209.87 L1544.88 1209.87 L1545.46 1209.87 L1546.05 1209.87 L1546.64 1209.87 L1547.22 1209.87 L1547.81 1209.87 L1548.4 1209.87 L1548.98 1209.87 L1549.57 1209.87 L1550.15 1209.87 L1550.74 1209.87 L1551.33 1209.87 L1551.91 1209.87 L1552.5 1209.87 L1553.09 1209.87 L1553.67 1209.87 L1554.26 1209.87 L1554.85 1209.87 L1555.43 1209.87 L1556.02 1209.87 L1556.6 1209.87 L1557.19 1209.87 L1557.78 1209.87 L1558.36 1209.87 L1558.95 1209.87 L1559.54 1209.87 L1560.12 1209.87 L1560.71 1209.87 L1561.3 1209.87 L1561.88 1209.87 L1562.47 1209.87 L1563.06 1209.87 L1563.64 1209.87 L1564.23 1209.87 L1564.81 1209.87 L1565.4 1209.87 L1565.99 1209.87 L1566.57 1209.87 L1567.16 1209.87 L1567.75 1209.87 L1568.33 1209.87 L1568.92 1209.87 L1569.51 1209.87 L1570.09 1209.87 L1570.68 1209.87 L1571.27 1209.87 L1571.85 1209.87 L1572.44 1209.87 L1573.02 1209.87 L1573.61 1209.87 L1574.2 1209.87 L1574.78 1209.87 L1575.37 1209.87 L1575.96 1209.87 L1576.54 1209.87 L1577.13 1209.87 L1577.72 1209.87 L1578.3 1209.87 L1578.89 1209.87 L1579.47 1209.87 L1580.06 1209.87 L1580.65 1209.87 L1581.23 1209.87 L1581.82 1209.87 L1582.41 1209.87 L1582.99 1209.87 L1583.58 1209.87 L1584.17 1209.87 L1584.75 1209.87 L1585.34 1209.87 L1585.93 1209.87 L1586.51 1209.87 L1587.1 1209.87 L1587.68 1209.87 L1588.27 1209.87 L1588.86 1209.87 L1589.44 1209.87 L1590.03 1209.87 L1590.62 1209.87 L1591.2 1209.87 L1591.79 1209.87 L1592.38 1209.87 L1592.96 1209.87 L1593.55 1209.87 L1594.14 1209.87 L1594.72 1209.87 L1595.31 1209.87 L1595.89 1209.87 L1596.48 1209.87 L1597.07 1209.87 L1597.65 1209.87 L1598.24 1209.87 L1598.83 1209.87 L1599.41 1209.87 L1600 1209.87 L1600.59 1209.87 L1601.17 1209.87 L1601.76 1209.87 L1602.34 1209.87 L1602.93 1209.87 L1603.52 1209.87 L1604.1 1209.87 L1604.69 1209.87 L1605.28 1209.87 L1605.86 1209.87 L1606.45 1209.87 L1607.04 1209.87 L1607.62 1209.87 L1608.21 1209.87 L1608.8 1209.87 L1609.38 1209.87 L1609.97 1209.87 L1610.55 1209.87 L1611.14 1209.87 L1611.73 1209.87 L1612.31 1209.87 L1612.9 1209.87 L1613.49 1209.87 L1614.07 1209.87 L1614.66 1209.87 L1615.25 1209.87 L1615.83 1209.87 L1616.42 1209.87 L1617.01 1209.87 L1617.59 1209.87 L1618.18 1209.87 L1618.76 1209.87 L1619.35 1209.87 L1619.94 1209.87 L1620.52 1209.87 L1621.11 1209.87 L1621.7 1209.87 L1622.28 1209.87 L1622.87 1209.87 L1623.46 1209.87 L1624.04 1209.87 L1624.63 1209.87 L1625.22 1209.87 L1625.8 1209.87 L1626.39 1209.87 L1626.97 1209.87 L1627.56 1209.87 L1628.15 1209.87 L1628.73 1209.87 L1629.32 1209.87 L1629.91 1209.87 L1630.49 1209.87 L1631.08 1209.87 L1631.67 1209.87 L1632.25 1209.87 L1632.84 1209.87 L1633.42 1209.87 L1634.01 1209.87 L1634.6 1209.87 L1635.18 1209.87 L1635.77 1209.87 L1636.36 1209.87 L1636.94 1209.87 L1637.53 1209.87 L1638.12 1209.87 L1638.7 1209.87 L1639.29 1209.87 L1639.88 1209.87 L1640.46 1209.87 L1641.05 1209.87 L1641.63 1209.87 L1642.22 1209.87 L1642.81 1209.87 L1643.39 1209.87 L1643.98 1209.87 L1644.57 1209.87 L1645.15 1209.87 L1645.74 1209.87 L1646.33 1209.87 L1646.91 1209.87 L1647.5 1209.87 L1648.09 1209.87 L1648.67 1209.87 L1649.26 1209.87 L1649.84 1209.87 L1650.43 1209.87 L1651.02 1209.87 L1651.6 1209.87 L1652.19 1209.87 L1652.78 1209.87 L1653.36 1209.87 L1653.95 1209.87 L1654.54 1209.87 L1655.12 1209.87 L1655.71 1209.87 L1656.29 1209.87 L1656.88 1209.87 L1657.47 1209.87 L1658.05 1209.87 L1658.64 1209.87 L1659.23 1209.87 L1659.81 1209.87 L1660.4 1209.87 L1660.99 1209.87 L1661.57 1209.87 L1662.16 1209.87 L1662.75 1209.87 L1663.33 1209.87 L1663.92 1209.87 L1664.5 1209.87 L1665.09 1209.87 L1665.68 1209.87 L1666.26 1209.87 L1666.85 1209.87 L1667.44 1209.87 L1668.02 1209.87 L1668.61 1209.87 L1669.2 1209.87 L1669.78 1209.87 L1670.37 1209.87 L1670.96 1209.87 L1671.54 1209.87 L1672.13 1209.87 L1672.71 1209.87 L1673.3 1209.87 L1673.89 1209.87 L1674.47 1209.87 L1675.06 1209.87 L1675.65 1209.87 L1676.23 1209.87 L1676.82 1209.87 L1677.41 1209.87 L1677.99 1209.87 L1678.58 1209.87 L1679.17 1209.87 L1679.75 1209.87 L1680.34 1209.87 L1680.92 1209.87 L1681.51 1209.87 L1682.1 1209.87 L1682.68 1209.87 L1683.27 1209.87 L1683.86 1209.87 L1684.44 1209.87 L1685.03 1209.87 L1685.62 1209.87 L1686.2 1209.87 L1686.79 1209.87 L1687.37 1209.87 L1687.96 1209.87 L1688.55 1209.87 L1689.13 1209.87 L1689.72 1209.87 L1690.31 1209.87 L1690.89 1209.87 L1691.48 1209.87 L1692.07 1209.87 L1692.65 1209.87 L1693.24 1209.87 L1693.83 1209.87 L1694.41 1209.87 L1695 1209.87 L1695.58 1209.87 L1696.17 1209.87 L1696.76 1209.87 L1697.34 1209.87 L1697.93 1209.87 L1698.52 1209.87 L1699.1 1209.87 L1699.69 1209.87 L1700.28 1209.87 L1700.86 1209.87 L1701.45 1209.87 L1702.04 1209.87 L1702.62 1209.87 L1703.21 1209.87 L1703.79 1209.87 L1704.38 1209.87 L1704.97 1209.87 L1705.55 1209.87 L1706.14 1209.87 L1706.73 1209.87 L1707.31 1209.87 L1707.9 1209.87 L1708.49 1209.87 L1709.07 1209.87 L1709.66 1209.87 L1710.24 1209.87 L1710.83 1209.87 L1711.42 1209.87 L1712 1209.87 L1712.59 1209.87 L1713.18 1209.87 L1713.76 1209.87 L1714.35 1209.87 L1714.94 1209.87 L1715.52 1209.87 L1716.11 1209.87 L1716.7 1209.87 L1717.28 1209.87 L1717.87 1209.87 L1718.45 1209.87 L1719.04 1209.87 L1719.63 1209.87 L1720.21 1209.87 L1720.8 1209.87 L1721.39 1209.87 L1721.97 1209.87 L1722.56 1209.87 L1723.15 1209.87 L1723.73 1209.87 L1724.32 1209.87 L1724.91 1209.87 L1725.49 1209.87 L1726.08 1209.87 L1726.66 1209.87 L1727.25 1209.87 L1727.84 1209.87 L1728.42 1209.87 L1729.01 1209.87 L1729.6 1209.87 L1730.18 1209.87 L1730.77 1209.87 L1731.36 1209.87 L1731.94 1209.87 L1732.53 1209.87 L1733.11 1209.87 L1733.7 1209.87 L1734.29 1209.87 L1734.87 1209.87 L1735.46 1209.87 L1736.05 1209.87 L1736.63 1209.87 L1737.22 1209.87 L1737.81 1209.87 L1738.39 1209.87 L1738.98 1209.87 L1739.57 1209.87 L1740.15 1209.87 L1740.74 1209.87 L1741.32 1209.87 L1741.91 1209.87 L1742.5 1209.87 L1743.08 1209.87 L1743.67 1209.87 L1744.26 1209.87 L1744.84 1209.87 L1745.43 1209.87 L1746.02 1209.87 L1746.6 1209.87 L1747.19 1209.87 L1747.78 1209.87 L1748.36 1209.87 L1748.95 1209.87 L1749.53 1209.87 L1750.12 1209.87 L1750.71 1209.87 L1751.29 1209.87 L1751.88 1209.87 L1752.47 1209.87 L1753.05 1209.87 L1753.64 1209.87 L1754.23 1209.87 L1754.81 1209.87 L1755.4 1209.87 L1755.99 1209.87 L1756.57 1209.87 L1757.16 1209.87 L1757.74 1209.87 L1758.33 1209.87 L1758.92 1209.87 L1759.5 1209.87 L1760.09 1209.87 L1760.68 1209.87 L1761.26 1209.87 L1761.85 1209.87 L1762.44 1209.87 L1763.02 1209.87 L1763.61 1209.87 L1764.19 1209.87 L1764.78 1209.87 L1765.37 1209.87 L1765.95 1209.87 L1766.54 1209.87 L1767.13 1209.87 L1767.71 1209.87 L1768.3 1209.87 L1768.89 1209.87 L1769.47 1209.87 L1770.06 1209.87 L1770.65 1209.87 L1771.23 1209.87 L1771.82 1209.87 L1772.4 1209.87 L1772.99 1209.87 L1773.58 1209.87 L1774.16 1209.87 L1774.75 1209.87 L1775.34 1209.87 L1775.92 1209.87 L1776.51 1209.87 L1777.1 1209.87 L1777.68 1209.87 L1778.27 1209.87 L1778.86 1209.87 L1779.44 1209.87 L1780.03 1209.87 L1780.61 1209.87 L1781.2 1209.87 L1781.79 1209.87 L1782.37 1209.87 L1782.96 1209.87 L1783.55 1209.87 L1784.13 1209.87 L1784.72 1209.87 L1785.31 1209.87 L1785.89 1209.87 L1786.48 1209.87 L1787.06 1209.87 L1787.65 1209.87 L1788.24 1209.87 L1788.82 1209.87 L1789.41 1209.87 L1790 1209.87 L1790.58 1209.87 L1791.17 1209.87 L1791.76 1209.87 L1792.34 1209.87 L1792.93 1209.87 L1793.52 1209.87 L1794.1 1209.87 L1794.69 1209.87 L1795.27 1209.87 L1795.86 1209.87 L1796.45 1209.87 L1797.03 1209.87 L1797.62 1209.87 L1798.21 1209.87 L1798.79 1209.87 L1799.38 1209.87 L1799.97 1209.87 L1800.55 1209.87 L1801.14 1209.87 L1801.73 1209.87 L1802.31 1209.87 L1802.9 1209.87 L1803.48 1209.87 L1804.07 1209.87 L1804.66 1209.87 L1805.24 1209.87 L1805.83 1209.87 L1806.42 1209.87 L1807 1209.87 L1807.59 1209.87 L1808.18 1209.87 L1808.76 1209.87 L1809.35 1209.87 L1809.94 1209.87 L1810.52 1209.87 L1811.11 1209.87 L1811.69 1209.87 L1812.28 1209.87 L1812.87 1209.87 L1813.45 1209.87 L1814.04 1209.87 L1814.63 1209.87 L1815.21 1209.87 L1815.8 1209.87 L1816.39 1209.87 L1816.97 1209.87 L1817.56 1209.87 L1818.14 1209.87 L1818.73 1209.87 L1819.32 1209.87 L1819.9 1209.87 L1820.49 1209.87 L1821.08 1209.87 L1821.66 1209.87 L1822.25 1209.87 L1822.84 1209.87 L1823.42 1209.87 L1824.01 1209.87 L1824.6 1209.87 L1825.18 1209.87 L1825.77 1209.87 L1826.35 1209.87 L1826.94 1209.87 L1827.53 1209.87 L1828.11 1209.87 L1828.7 1209.87 L1829.29 1209.87 L1829.87 1209.87 L1830.46 1209.87 L1831.05 1209.87 L1831.63 1209.87 L1832.22 1209.87 L1832.81 1209.87 L1833.39 1209.87 L1833.98 1209.87 L1834.56 1209.87 L1835.15 1209.87 L1835.74 1209.87 L1836.32 1209.87 L1836.91 1209.87 L1837.5 1209.87 L1838.08 1209.87 L1838.67 1209.87 L1839.26 1209.87 L1839.84 1209.87 L1840.43 1209.87 L1841.01 1209.87 L1841.6 1209.87 L1842.19 1209.87 L1842.77 1209.87 L1843.36 1209.87 L1843.95 1209.87 L1844.53 1209.87 L1845.12 1209.87 L1845.71 1209.87 L1846.29 1209.87 L1846.88 1209.87 L1847.47 1209.87 L1848.05 1209.87 L1848.64 1209.87 L1849.22 1209.87 L1849.81 1209.87 L1850.4 1209.87 L1850.98 1209.87 L1851.57 1209.87 L1852.16 1209.87 L1852.74 1209.87 L1853.33 1209.87 L1853.92 1209.87 L1854.5 1209.87 L1855.09 1209.87 L1855.68 1209.87 L1856.26 1209.87 L1856.85 1209.87 L1857.43 1209.87 L1858.02 1209.87 L1858.61 1209.87 L1859.19 1209.87 L1859.78 1209.87 L1860.37 1209.87 L1860.95 1209.87 L1861.54 1209.87 L1862.13 1209.87 L1862.71 1209.87 L1863.3 1209.87 L1863.88 1209.87 L1864.47 1209.87 L1865.06 1209.87 L1865.64 1209.87 L1866.23 1209.87 L1866.82 1209.87 L1867.4 1209.87 L1867.99 1209.87 L1868.58 1209.87 L1869.16 1209.87 L1869.75 1209.87 L1870.34 1209.87 L1870.92 1209.87 L1871.51 1209.87 L1872.09 1209.87 L1872.68 1209.87 L1873.27 1209.87 L1873.85 1209.87 L1874.44 1209.87 L1875.03 1209.87 L1875.61 1209.87 L1876.2 1209.87 L1876.79 1209.87 L1877.37 1209.87 L1877.96 1209.87 L1878.55 1209.87 L1879.13 1209.87 L1879.72 1209.87 L1880.3 1209.87 L1880.89 1209.87 L1881.48 1209.87 L1882.06 1209.87 L1882.65 1209.87 L1883.24 1209.87 L1883.82 1209.87 L1884.41 1209.87 L1885 1209.87 L1885.58 1209.87 L1886.17 1209.87 L1886.76 1209.87 L1887.34 1209.87 L1887.93 1209.87 L1888.51 1209.87 L1889.1 1209.87 L1889.69 1209.87 L1890.27 1209.87 L1890.86 1209.87 L1891.45 1209.87 L1892.03 1209.87 L1892.62 1209.87 L1893.21 1209.87 L1893.79 1209.87 L1894.38 1209.87 L1894.96 1209.87 L1895.55 1209.87 L1896.14 1209.87 L1896.72 1209.87 L1897.31 1209.87 L1897.9 1209.87 L1898.48 1209.87 L1899.07 1209.87 L1899.66 1209.87 L1900.24 1209.87 L1900.83 1209.87 L1901.42 1209.87 L1902 1209.87 L1902.59 1209.87 L1903.17 1209.87 L1903.76 1209.87 L1904.35 1209.87 L1904.93 1209.87 L1905.52 1209.87 L1906.11 1209.87 L1906.69 1209.87 L1907.28 1209.87 L1907.87 1209.87 L1908.45 1209.87 L1909.04 1209.87 L1909.63 1209.87 L1910.21 1209.87 L1910.8 1209.87 L1911.38 1209.87 L1911.97 1209.87 L1912.56 1209.87 L1913.14 1209.87 L1913.73 1209.87 L1914.32 1209.87 L1914.9 1209.87 L1915.49 1209.87 L1916.08 1209.87 L1916.66 1209.87 L1917.25 1209.87 L1917.83 1209.87 L1918.42 1209.87 L1919.01 1209.87 L1919.59 1209.87 L1920.18 1209.87 L1920.77 1209.87 L1921.35 1209.87 L1921.94 1209.87 L1922.53 1209.87 L1923.11 1209.87 L1923.7 1209.87 L1924.29 1209.87 L1924.87 1209.87 L1925.46 1209.87 L1926.04 1209.87 L1926.63 1209.87 L1927.22 1209.87 L1927.8 1209.87 L1928.39 1209.87 L1928.98 1209.87 L1929.56 1209.87 L1930.15 1209.87 L1930.74 1209.87 L1931.32 1209.87 L1931.91 1209.87 L1932.5 1209.87 L1933.08 1209.87 L1933.67 1209.87 L1934.25 1209.87 L1934.84 1209.87 L1935.43 1209.87 L1936.01 1209.87 L1936.6 1209.87 L1937.19 1209.87 L1937.77 1209.87 L1938.36 1209.87 L1938.95 1209.87 L1939.53 1209.87 L1940.12 1209.87 L1940.71 1209.87 L1941.29 1209.87 L1941.88 1209.87 L1942.46 1209.87 L1943.05 1209.87 L1943.64 1209.87 L1944.22 1209.87 L1944.81 1209.87 L1945.4 1209.87 L1945.98 1209.87 L1946.57 1209.87 L1947.16 1209.87 L1947.74 1209.87 L1948.33 1209.87 L1948.91 1209.87 L1949.5 1209.87 L1950.09 1209.87 L1950.67 1209.87 L1951.26 1209.87 L1951.85 1209.87 L1952.43 1209.87 L1953.02 1209.87 L1953.61 1209.87 L1954.19 1209.87 L1954.78 1209.87 L1955.37 1209.87 L1955.95 1209.87 L1956.54 1209.87 L1957.12 1209.87 L1957.71 1209.87 L1958.3 1209.87 L1958.88 1209.87 L1959.47 1209.87 L1960.06 1209.87 L1960.64 1209.87 L1961.23 1209.87 L1961.82 1209.87 L1962.4 1209.87 L1962.99 1209.87 L1963.58 1209.87 L1964.16 1209.87 L1964.75 1209.87 L1965.33 1209.87 L1965.92 1209.87 L1966.51 1209.87 L1967.09 1209.87 L1967.68 1209.87 L1968.27 1209.87 L1968.85 1209.87 L1969.44 1209.87 L1970.03 1209.87 L1970.61 1209.87 L1971.2 1209.87 L1971.78 1209.87 L1972.37 1209.87 L1972.96 1209.87 L1973.54 1209.87 L1974.13 1209.87 L1974.72 1209.87 L1975.3 1209.87 L1975.89 1209.87 L1976.48 1209.87 L1977.06 1209.87 L1977.65 1209.87 L1978.24 1209.87 L1978.82 1209.87 L1979.41 1209.87 L1979.99 1209.87 L1980.58 1209.87 L1981.17 1209.87 L1981.75 1209.87 L1982.34 1209.87 L1982.93 1209.87 L1983.51 1209.87 L1984.1 1209.87 L1984.69 1209.87 L1985.27 1209.87 L1985.86 1209.87 L1986.45 1209.87 L1987.03 1209.87 L1987.62 1209.87 L1988.2 1209.87 L1988.79 1209.87 L1989.38 1209.87 L1989.96 1209.87 L1990.55 1209.87 L1991.14 1209.87 L1991.72 1209.87 L1992.31 1209.87 L1992.9 1209.87 L1993.48 1209.87 L1994.07 1209.87 L1994.65 1209.87 L1995.24 1209.87 L1995.83 1209.87 L1996.41 1209.87 L1997 1209.87 L1997.59 1209.87 L1998.17 1209.87 L1998.76 1209.87 L1999.35 1209.87 L1999.93 1209.87 L2000.52 1209.87 L2001.11 1209.87 L2001.69 1209.87 L2002.28 1209.87 L2002.86 1209.87 L2003.45 1209.87 L2004.04 1209.87 L2004.62 1209.87 L2005.21 1209.87 L2005.8 1209.87 L2006.38 1209.87 L2006.97 1209.87 L2007.56 1209.87 L2008.14 1209.87 L2008.73 1209.87 L2009.32 1209.87 L2009.9 1209.87 L2010.49 1209.87 L2011.07 1209.87 L2011.66 1209.87 L2012.25 1209.87 L2012.83 1209.87 L2013.42 1209.87 L2014.01 1209.87 L2014.59 1209.87 L2015.18 1209.87 L2015.77 1209.87 L2016.35 1209.87 L2016.94 1209.87 L2017.53 1209.87 L2018.11 1209.87 L2018.7 1209.87 L2019.28 1209.87 L2019.87 1209.87 L2020.46 1209.87 L2021.04 1209.87 L2021.63 1209.87 L2022.22 1209.87 L2022.8 1209.87 L2023.39 1209.87 L2023.98 1209.87 L2024.56 1209.87 L2025.15 1209.87 L2025.73 1209.87 L2026.32 1209.87 L2026.91 1209.87 L2027.49 1209.87 L2028.08 1209.87 L2028.67 1209.87 L2029.25 1209.87 L2029.84 1209.87 L2030.43 1209.87 L2031.01 1209.87 L2031.6 1209.87 L2032.19 1209.87 L2032.77 1209.87 L2033.36 1209.87 L2033.94 1209.87 L2034.53 1209.87 L2035.12 1209.87 L2035.7 1209.87 L2036.29 1209.87 L2036.88 1209.87 L2037.46 1209.87 L2038.05 1209.87 L2038.64 1209.87 L2039.22 1209.87 L2039.81 1209.87 L2040.4 1209.87 L2040.98 1209.87 L2041.57 1209.87 L2042.15 1209.87 L2042.74 1209.87 L2043.33 1209.87 L2043.91 1209.87 L2044.5 1209.87 L2045.09 1209.87 L2045.67 1209.87 L2046.26 1209.87 L2046.85 1209.87 L2047.43 1209.87 L2048.02 1209.87 L2048.6 1209.87 L2049.19 1209.87 L2049.78 1209.87 L2050.36 1209.87 L2050.95 1209.87 L2051.54 1209.87 L2052.12 1209.87 L2052.71 1209.87 L2053.3 1209.87 L2053.88 1209.87 L2054.47 1209.87 L2055.06 1209.87 L2055.64 1209.87 L2056.23 1209.87 L2056.81 1209.87 L2057.4 1209.87 L2057.99 1209.87 L2058.57 1209.87 L2059.16 1209.87 L2059.75 1209.87 L2060.33 1209.87 L2060.92 1209.87 L2061.51 1209.87 L2062.09 1209.87 L2062.68 1209.87 L2063.27 1209.87 L2063.85 1209.87 L2064.44 1209.87 L2065.02 1209.87 L2065.61 1209.87 L2066.2 1209.87 L2066.78 1209.87 L2067.37 1209.87 L2067.96 1209.87 L2068.54 1209.87 L2069.13 1209.87 L2069.72 1209.87 L2070.3 1209.87 L2070.89 1209.87 L2071.48 1209.87 L2072.06 1209.87 L2072.65 1209.87 L2073.23 1209.87 L2073.82 1209.87 L2074.41 1209.87 L2074.99 1209.87 L2075.58 1209.87 L2076.17 1209.87 L2076.75 1209.87 L2077.34 1209.87 L2077.93 1209.87 L2078.51 1209.87 L2079.1 1209.87 L2079.68 1209.87 L2080.27 1209.87 L2080.86 1209.87 L2081.44 1209.87 L2082.03 1209.87 L2082.62 1209.87 L2083.2 1209.87 L2083.79 1209.87 L2084.38 1209.87 L2084.96 1209.87 L2085.55 1209.87 L2086.14 1209.87 L2086.72 1209.87 L2087.31 1209.87 L2087.89 1209.87 L2088.48 1209.87 L2089.07 1209.87 L2089.65 1209.87 L2090.24 1209.87 L2090.83 1209.87 L2091.41 1209.87 L2092 1209.87 L2092.59 1209.87 L2093.17 1209.87 L2093.76 1209.87 L2094.35 1209.87 L2094.93 1209.87 L2095.52 1209.87 L2096.1 1209.87 L2096.69 1209.87 L2097.28 1209.87 L2097.86 1209.87 L2098.45 1209.87 L2099.04 1209.87 L2099.62 1209.87 L2100.21 1209.87 L2100.8 1209.87 L2101.38 1209.87 L2101.97 1209.87 L2102.55 1209.87 L2103.14 1209.87 L2103.73 1209.87 L2104.31 1209.87 L2104.9 1209.87 L2105.49 1209.87 L2106.07 1209.87 L2106.66 1209.87 L2107.25 1209.87 L2107.83 1209.87 L2108.42 1209.87 L2109.01 1209.87 L2109.59 1209.87 L2110.18 1209.87 L2110.76 1209.87 L2111.35 1209.87 L2111.94 1209.87 L2112.52 1209.87 L2113.11 1209.87 L2113.7 1209.87 L2114.28 1209.87 L2114.87 1209.87 L2115.46 1209.87 L2116.04 1209.87 L2116.63 1209.87 L2117.22 1209.87 L2117.8 1209.87 L2118.39 1209.87 L2118.97 1209.87 L2119.56 1209.87 L2120.15 1209.87 L2120.73 1209.87 L2121.32 1209.87 L2121.91 1209.87 L2122.49 1209.87 L2123.08 1209.87 L2123.67 1209.87 L2124.25 1209.87 L2124.84 1209.87 L2125.42 1209.87 L2126.01 1209.87 L2126.6 1209.87 L2127.18 1209.87 L2127.77 1209.87 L2128.36 1209.87 L2128.94 1209.87 L2129.53 1209.87 L2130.12 1209.87 L2130.7 1209.87 L2131.29 1209.87 L2131.88 1209.87 L2132.46 1209.87 L2133.05 1209.87 L2133.63 1209.87 L2134.22 1209.87 L2134.81 1209.87 L2135.39 1209.87 L2135.98 1209.87 L2136.57 1209.87 L2137.15 1209.87 L2137.74 1209.87 L2138.33 1209.87 L2138.91 1209.87 L2139.5 1209.87 L2140.09 1209.87 L2140.67 1209.87 L2141.26 1209.87 L2141.84 1209.87 L2142.43 1209.87 L2143.02 1209.87 L2143.6 1209.87 L2144.19 1209.87 L2144.78 1209.87 L2145.36 1209.87 L2145.95 1209.87 L2146.54 1209.87 L2147.12 1209.87 L2147.71 1209.87 L2148.3 1209.87 L2148.88 1209.87 L2149.47 1209.87 L2150.05 1209.87 L2150.64 1209.87 L2151.23 1209.87 L2151.81 1209.87 L2152.4 1209.87 L2152.99 1209.87 L2153.57 1209.87 L2154.16 1209.87 L2154.75 1209.87 L2155.33 1209.87 L2155.92 1209.87 L2156.5 1209.87 L2157.09 1209.87 L2157.68 1209.87 L2158.26 1209.87 L2158.26 1209.11 L2157.68 1209.11 L2157.09 1209.11 L2156.5 1209.11 L2155.92 1209.11 L2155.33 1209.11 L2154.75 1209.11 L2154.16 1209.11 L2153.57 1209.11 L2152.99 1209.11 L2152.4 1209.11 L2151.81 1209.11 L2151.23 1209.11 L2150.64 1209.11 L2150.05 1209.11 L2149.47 1209.11 L2148.88 1209.11 L2148.3 1209.11 L2147.71 1209.11 L2147.12 1209.11 L2146.54 1209.11 L2145.95 1209.11 L2145.36 1209.11 L2144.78 1209.11 L2144.19 1209.11 L2143.6 1209.11 L2143.02 1209.11 L2142.43 1209.11 L2141.84 1209.11 L2141.26 1209.11 L2140.67 1209.11 L2140.09 1209.11 L2139.5 1209.11 L2138.91 1209.11 L2138.33 1209.11 L2137.74 1209.11 L2137.15 1209.11 L2136.57 1209.11 L2135.98 1209.11 L2135.39 1209.11 L2134.81 1209.11 L2134.22 1209.11 L2133.63 1209.11 L2133.05 1209.11 L2132.46 1209.11 L2131.88 1209.11 L2131.29 1209.11 L2130.7 1209.11 L2130.12 1209.11 L2129.53 1209.11 L2128.94 1209.11 L2128.36 1209.11 L2127.77 1209.11 L2127.18 1209.11 L2126.6 1209.11 L2126.01 1209.11 L2125.42 1209.11 L2124.84 1209.11 L2124.25 1209.11 L2123.67 1209.11 L2123.08 1209.11 L2122.49 1209.11 L2121.91 1209.11 L2121.32 1209.11 L2120.73 1209.11 L2120.15 1209.11 L2119.56 1209.11 L2118.97 1209.11 L2118.39 1209.11 L2117.8 1209.11 L2117.22 1209.11 L2116.63 1209.11 L2116.04 1209.11 L2115.46 1209.11 L2114.87 1209.11 L2114.28 1209.11 L2113.7 1209.11 L2113.11 1209.11 L2112.52 1209.11 L2111.94 1209.11 L2111.35 1209.11 L2110.76 1209.11 L2110.18 1209.11 L2109.59 1209.11 L2109.01 1209.11 L2108.42 1209.11 L2107.83 1209.11 L2107.25 1209.11 L2106.66 1209.11 L2106.07 1209.11 L2105.49 1209.11 L2104.9 1209.11 L2104.31 1209.11 L2103.73 1209.11 L2103.14 1209.11 L2102.55 1209.11 L2101.97 1209.11 L2101.38 1209.11 L2100.8 1209.11 L2100.21 1209.11 L2099.62 1209.11 L2099.04 1209.11 L2098.45 1209.11 L2097.86 1209.11 L2097.28 1209.11 L2096.69 1209.11 L2096.1 1209.11 L2095.52 1209.11 L2094.93 1209.11 L2094.35 1209.11 L2093.76 1209.11 L2093.17 1209.11 L2092.59 1209.11 L2092 1209.11 L2091.41 1209.11 L2090.83 1209.11 L2090.24 1209.11 L2089.65 1209.11 L2089.07 1209.11 L2088.48 1209.11 L2087.89 1209.11 L2087.31 1209.11 L2086.72 1209.11 L2086.14 1209.11 L2085.55 1209.11 L2084.96 1209.11 L2084.38 1209.11 L2083.79 1209.11 L2083.2 1209.11 L2082.62 1209.11 L2082.03 1209.11 L2081.44 1209.11 L2080.86 1209.11 L2080.27 1209.11 L2079.68 1209.11 L2079.1 1209.11 L2078.51 1209.11 L2077.93 1209.11 L2077.34 1209.11 L2076.75 1209.11 L2076.17 1209.11 L2075.58 1209.11 L2074.99 1209.11 L2074.41 1209.11 L2073.82 1209.11 L2073.23 1209.11 L2072.65 1209.11 L2072.06 1209.11 L2071.48 1209.11 L2070.89 1209.11 L2070.3 1209.11 L2069.72 1209.11 L2069.13 1209.11 L2068.54 1209.11 L2067.96 1209.11 L2067.37 1209.11 L2066.78 1209.11 L2066.2 1209.11 L2065.61 1209.11 L2065.02 1209.11 L2064.44 1209.11 L2063.85 1209.11 L2063.27 1209.11 L2062.68 1209.11 L2062.09 1209.11 L2061.51 1209.11 L2060.92 1209.11 L2060.33 1209.11 L2059.75 1209.11 L2059.16 1209.11 L2058.57 1209.11 L2057.99 1209.11 L2057.4 1209.11 L2056.81 1209.11 L2056.23 1209.11 L2055.64 1209.11 L2055.06 1209.11 L2054.47 1209.11 L2053.88 1209.11 L2053.3 1209.11 L2052.71 1209.11 L2052.12 1209.11 L2051.54 1209.11 L2050.95 1209.11 L2050.36 1209.11 L2049.78 1209.11 L2049.19 1209.11 L2048.6 1209.11 L2048.02 1209.11 L2047.43 1209.11 L2046.85 1209.11 L2046.26 1209.11 L2045.67 1209.11 L2045.09 1209.11 L2044.5 1209.11 L2043.91 1209.11 L2043.33 1209.11 L2042.74 1209.11 L2042.15 1209.11 L2041.57 1209.11 L2040.98 1209.11 L2040.4 1209.11 L2039.81 1209.11 L2039.22 1209.11 L2038.64 1209.11 L2038.05 1209.11 L2037.46 1209.11 L2036.88 1209.11 L2036.29 1209.11 L2035.7 1209.11 L2035.12 1209.11 L2034.53 1209.11 L2033.94 1209.11 L2033.36 1209.11 L2032.77 1209.11 L2032.19 1209.11 L2031.6 1209.11 L2031.01 1209.11 L2030.43 1209.11 L2029.84 1209.11 L2029.25 1209.11 L2028.67 1209.11 L2028.08 1209.11 L2027.49 1209.11 L2026.91 1209.11 L2026.32 1209.11 L2025.73 1209.11 L2025.15 1209.11 L2024.56 1209.11 L2023.98 1209.11 L2023.39 1209.11 L2022.8 1209.11 L2022.22 1209.11 L2021.63 1209.11 L2021.04 1209.11 L2020.46 1209.11 L2019.87 1209.11 L2019.28 1209.11 L2018.7 1209.11 L2018.11 1209.11 L2017.53 1209.11 L2016.94 1209.11 L2016.35 1209.11 L2015.77 1209.11 L2015.18 1209.11 L2014.59 1209.11 L2014.01 1209.11 L2013.42 1209.11 L2012.83 1209.11 L2012.25 1209.11 L2011.66 1209.11 L2011.07 1209.11 L2010.49 1209.11 L2009.9 1209.11 L2009.32 1209.11 L2008.73 1209.11 L2008.14 1209.11 L2007.56 1209.11 L2006.97 1209.11 L2006.38 1209.11 L2005.8 1209.11 L2005.21 1209.11 L2004.62 1209.11 L2004.04 1209.11 L2003.45 1209.11 L2002.86 1209.11 L2002.28 1209.11 L2001.69 1209.11 L2001.11 1209.11 L2000.52 1209.11 L1999.93 1209.11 L1999.35 1209.11 L1998.76 1209.11 L1998.17 1209.11 L1997.59 1209.11 L1997 1209.11 L1996.41 1209.11 L1995.83 1209.11 L1995.24 1209.11 L1994.65 1209.11 L1994.07 1209.11 L1993.48 1209.11 L1992.9 1209.11 L1992.31 1209.11 L1991.72 1209.11 L1991.14 1209.11 L1990.55 1209.11 L1989.96 1209.11 L1989.38 1209.11 L1988.79 1209.11 L1988.2 1209.11 L1987.62 1209.11 L1987.03 1209.11 L1986.45 1209.11 L1985.86 1209.11 L1985.27 1209.11 L1984.69 1209.11 L1984.1 1209.11 L1983.51 1209.11 L1982.93 1209.11 L1982.34 1209.11 L1981.75 1209.11 L1981.17 1209.11 L1980.58 1209.11 L1979.99 1209.11 L1979.41 1209.11 L1978.82 1209.11 L1978.24 1209.11 L1977.65 1209.11 L1977.06 1209.11 L1976.48 1209.11 L1975.89 1209.11 L1975.3 1209.11 L1974.72 1209.11 L1974.13 1209.11 L1973.54 1209.11 L1972.96 1209.11 L1972.37 1209.11 L1971.78 1209.11 L1971.2 1209.11 L1970.61 1209.11 L1970.03 1209.11 L1969.44 1209.11 L1968.85 1209.11 L1968.27 1209.11 L1967.68 1209.11 L1967.09 1209.11 L1966.51 1209.11 L1965.92 1209.11 L1965.33 1209.11 L1964.75 1209.11 L1964.16 1209.11 L1963.58 1209.11 L1962.99 1209.11 L1962.4 1209.11 L1961.82 1209.11 L1961.23 1209.11 L1960.64 1209.11 L1960.06 1209.11 L1959.47 1209.11 L1958.88 1209.11 L1958.3 1209.11 L1957.71 1209.11 L1957.12 1209.11 L1956.54 1209.11 L1955.95 1209.11 L1955.37 1209.11 L1954.78 1209.11 L1954.19 1209.11 L1953.61 1209.11 L1953.02 1209.11 L1952.43 1209.11 L1951.85 1209.11 L1951.26 1209.11 L1950.67 1209.11 L1950.09 1209.11 L1949.5 1209.11 L1948.91 1209.11 L1948.33 1209.11 L1947.74 1209.11 L1947.16 1209.11 L1946.57 1209.11 L1945.98 1209.11 L1945.4 1209.11 L1944.81 1209.11 L1944.22 1209.11 L1943.64 1209.11 L1943.05 1209.11 L1942.46 1209.11 L1941.88 1209.11 L1941.29 1209.11 L1940.71 1209.11 L1940.12 1209.11 L1939.53 1209.11 L1938.95 1209.11 L1938.36 1209.11 L1937.77 1209.11 L1937.19 1209.11 L1936.6 1209.11 L1936.01 1209.11 L1935.43 1209.11 L1934.84 1209.11 L1934.25 1209.11 L1933.67 1209.11 L1933.08 1209.11 L1932.5 1209.11 L1931.91 1209.11 L1931.32 1209.11 L1930.74 1209.11 L1930.15 1209.11 L1929.56 1209.11 L1928.98 1209.11 L1928.39 1209.11 L1927.8 1209.11 L1927.22 1209.11 L1926.63 1209.11 L1926.04 1209.11 L1925.46 1209.11 L1924.87 1209.11 L1924.29 1209.11 L1923.7 1209.11 L1923.11 1209.11 L1922.53 1209.11 L1921.94 1209.11 L1921.35 1209.11 L1920.77 1209.11 L1920.18 1209.11 L1919.59 1209.11 L1919.01 1209.11 L1918.42 1209.11 L1917.83 1209.11 L1917.25 1209.11 L1916.66 1209.11 L1916.08 1209.11 L1915.49 1209.11 L1914.9 1209.11 L1914.32 1209.11 L1913.73 1209.11 L1913.14 1209.11 L1912.56 1209.11 L1911.97 1209.11 L1911.38 1209.11 L1910.8 1209.11 L1910.21 1209.11 L1909.63 1209.11 L1909.04 1209.11 L1908.45 1209.11 L1907.87 1209.11 L1907.28 1209.11 L1906.69 1209.11 L1906.11 1209.11 L1905.52 1209.11 L1904.93 1209.11 L1904.35 1209.11 L1903.76 1209.11 L1903.17 1209.11 L1902.59 1209.11 L1902 1209.11 L1901.42 1209.11 L1900.83 1209.11 L1900.24 1209.11 L1899.66 1209.11 L1899.07 1209.11 L1898.48 1209.11 L1897.9 1209.11 L1897.31 1209.11 L1896.72 1209.11 L1896.14 1209.11 L1895.55 1209.11 L1894.96 1209.11 L1894.38 1209.11 L1893.79 1209.11 L1893.21 1209.11 L1892.62 1209.11 L1892.03 1209.11 L1891.45 1209.11 L1890.86 1209.11 L1890.27 1209.11 L1889.69 1209.11 L1889.1 1209.11 L1888.51 1209.11 L1887.93 1209.11 L1887.34 1209.11 L1886.76 1209.11 L1886.17 1209.11 L1885.58 1209.11 L1885 1209.11 L1884.41 1209.11 L1883.82 1209.11 L1883.24 1209.11 L1882.65 1209.11 L1882.06 1209.11 L1881.48 1209.11 L1880.89 1209.11 L1880.3 1209.11 L1879.72 1209.11 L1879.13 1209.11 L1878.55 1209.11 L1877.96 1209.11 L1877.37 1209.11 L1876.79 1209.11 L1876.2 1209.11 L1875.61 1209.11 L1875.03 1209.11 L1874.44 1209.11 L1873.85 1209.11 L1873.27 1209.11 L1872.68 1209.11 L1872.09 1209.11 L1871.51 1209.11 L1870.92 1209.11 L1870.34 1209.11 L1869.75 1209.11 L1869.16 1209.11 L1868.58 1209.11 L1867.99 1209.11 L1867.4 1209.11 L1866.82 1209.11 L1866.23 1209.11 L1865.64 1209.11 L1865.06 1209.11 L1864.47 1209.11 L1863.88 1209.11 L1863.3 1209.11 L1862.71 1209.11 L1862.13 1209.11 L1861.54 1209.11 L1860.95 1209.11 L1860.37 1209.11 L1859.78 1209.11 L1859.19 1209.11 L1858.61 1209.11 L1858.02 1209.11 L1857.43 1209.11 L1856.85 1209.11 L1856.26 1209.11 L1855.68 1209.11 L1855.09 1209.11 L1854.5 1209.11 L1853.92 1209.11 L1853.33 1209.11 L1852.74 1209.11 L1852.16 1209.11 L1851.57 1209.11 L1850.98 1209.11 L1850.4 1209.11 L1849.81 1209.11 L1849.22 1209.11 L1848.64 1209.11 L1848.05 1209.11 L1847.47 1209.11 L1846.88 1209.11 L1846.29 1209.11 L1845.71 1209.11 L1845.12 1209.11 L1844.53 1209.11 L1843.95 1209.11 L1843.36 1209.11 L1842.77 1209.11 L1842.19 1209.11 L1841.6 1209.11 L1841.01 1209.11 L1840.43 1209.11 L1839.84 1209.11 L1839.26 1209.11 L1838.67 1209.11 L1838.08 1209.11 L1837.5 1209.11 L1836.91 1209.11 L1836.32 1209.11 L1835.74 1209.11 L1835.15 1209.11 L1834.56 1209.11 L1833.98 1209.11 L1833.39 1209.11 L1832.81 1209.11 L1832.22 1209.11 L1831.63 1209.11 L1831.05 1209.11 L1830.46 1209.11 L1829.87 1209.11 L1829.29 1209.11 L1828.7 1209.11 L1828.11 1209.11 L1827.53 1209.11 L1826.94 1209.11 L1826.35 1209.11 L1825.77 1209.11 L1825.18 1209.11 L1824.6 1209.11 L1824.01 1209.11 L1823.42 1209.11 L1822.84 1209.11 L1822.25 1209.11 L1821.66 1209.11 L1821.08 1209.11 L1820.49 1209.11 L1819.9 1209.11 L1819.32 1209.11 L1818.73 1209.11 L1818.14 1209.11 L1817.56 1209.11 L1816.97 1209.11 L1816.39 1209.11 L1815.8 1209.11 L1815.21 1209.11 L1814.63 1209.11 L1814.04 1209.11 L1813.45 1209.11 L1812.87 1209.11 L1812.28 1209.11 L1811.69 1209.11 L1811.11 1209.11 L1810.52 1209.11 L1809.94 1209.11 L1809.35 1209.11 L1808.76 1209.11 L1808.18 1209.11 L1807.59 1209.11 L1807 1209.11 L1806.42 1209.11 L1805.83 1209.11 L1805.24 1209.11 L1804.66 1209.11 L1804.07 1209.11 L1803.48 1209.11 L1802.9 1209.11 L1802.31 1209.11 L1801.73 1209.11 L1801.14 1209.11 L1800.55 1209.11 L1799.97 1209.11 L1799.38 1209.11 L1798.79 1209.11 L1798.21 1209.11 L1797.62 1209.11 L1797.03 1209.11 L1796.45 1209.11 L1795.86 1209.11 L1795.27 1209.11 L1794.69 1209.11 L1794.1 1209.11 L1793.52 1209.11 L1792.93 1209.11 L1792.34 1209.11 L1791.76 1209.11 L1791.17 1209.11 L1790.58 1209.11 L1790 1209.11 L1789.41 1209.11 L1788.82 1209.11 L1788.24 1209.11 L1787.65 1209.11 L1787.06 1209.11 L1786.48 1209.11 L1785.89 1209.11 L1785.31 1209.11 L1784.72 1209.11 L1784.13 1209.11 L1783.55 1209.11 L1782.96 1209.11 L1782.37 1209.11 L1781.79 1209.11 L1781.2 1209.11 L1780.61 1209.11 L1780.03 1209.11 L1779.44 1209.11 L1778.86 1209.11 L1778.27 1209.11 L1777.68 1209.11 L1777.1 1209.11 L1776.51 1209.11 L1775.92 1209.11 L1775.34 1209.11 L1774.75 1209.11 L1774.16 1209.11 L1773.58 1209.11 L1772.99 1209.11 L1772.4 1209.11 L1771.82 1209.11 L1771.23 1209.11 L1770.65 1209.11 L1770.06 1209.11 L1769.47 1209.11 L1768.89 1209.11 L1768.3 1209.11 L1767.71 1209.11 L1767.13 1209.11 L1766.54 1209.11 L1765.95 1209.11 L1765.37 1209.11 L1764.78 1209.11 L1764.19 1209.11 L1763.61 1209.11 L1763.02 1209.11 L1762.44 1209.11 L1761.85 1209.11 L1761.26 1209.11 L1760.68 1209.11 L1760.09 1209.11 L1759.5 1209.11 L1758.92 1209.11 L1758.33 1209.11 L1757.74 1209.11 L1757.16 1209.11 L1756.57 1209.11 L1755.99 1209.11 L1755.4 1209.11 L1754.81 1209.11 L1754.23 1209.11 L1753.64 1209.11 L1753.05 1209.11 L1752.47 1209.11 L1751.88 1209.11 L1751.29 1209.11 L1750.71 1209.11 L1750.12 1209.11 L1749.53 1209.11 L1748.95 1209.11 L1748.36 1209.11 L1747.78 1209.11 L1747.19 1209.11 L1746.6 1209.11 L1746.02 1209.11 L1745.43 1209.11 L1744.84 1209.11 L1744.26 1209.11 L1743.67 1209.11 L1743.08 1209.11 L1742.5 1209.11 L1741.91 1209.11 L1741.32 1209.11 L1740.74 1209.11 L1740.15 1209.11 L1739.57 1209.11 L1738.98 1209.11 L1738.39 1209.11 L1737.81 1209.11 L1737.22 1209.11 L1736.63 1209.11 L1736.05 1209.11 L1735.46 1209.11 L1734.87 1209.11 L1734.29 1209.11 L1733.7 1209.11 L1733.11 1209.11 L1732.53 1209.11 L1731.94 1209.11 L1731.36 1209.11 L1730.77 1209.11 L1730.18 1209.11 L1729.6 1209.11 L1729.01 1209.11 L1728.42 1209.11 L1727.84 1209.11 L1727.25 1209.11 L1726.66 1209.11 L1726.08 1209.11 L1725.49 1209.11 L1724.91 1209.11 L1724.32 1209.11 L1723.73 1209.11 L1723.15 1209.11 L1722.56 1209.11 L1721.97 1209.11 L1721.39 1209.11 L1720.8 1209.11 L1720.21 1209.11 L1719.63 1209.11 L1719.04 1209.11 L1718.45 1209.11 L1717.87 1209.11 L1717.28 1209.11 L1716.7 1209.11 L1716.11 1209.11 L1715.52 1209.11 L1714.94 1209.11 L1714.35 1209.11 L1713.76 1209.11 L1713.18 1209.11 L1712.59 1209.11 L1712 1209.11 L1711.42 1209.11 L1710.83 1209.11 L1710.24 1209.11 L1709.66 1209.11 L1709.07 1209.11 L1708.49 1209.11 L1707.9 1209.11 L1707.31 1209.11 L1706.73 1209.11 L1706.14 1209.11 L1705.55 1209.11 L1704.97 1209.11 L1704.38 1209.11 L1703.79 1209.11 L1703.21 1209.11 L1702.62 1209.11 L1702.04 1209.11 L1701.45 1209.11 L1700.86 1209.11 L1700.28 1209.11 L1699.69 1209.11 L1699.1 1209.11 L1698.52 1209.11 L1697.93 1209.11 L1697.34 1209.11 L1696.76 1209.11 L1696.17 1209.11 L1695.58 1209.11 L1695 1209.11 L1694.41 1209.11 L1693.83 1209.11 L1693.24 1209.11 L1692.65 1209.11 L1692.07 1209.11 L1691.48 1209.11 L1690.89 1209.11 L1690.31 1209.11 L1689.72 1209.11 L1689.13 1209.11 L1688.55 1209.11 L1687.96 1209.11 L1687.37 1209.11 L1686.79 1209.11 L1686.2 1209.11 L1685.62 1209.11 L1685.03 1209.11 L1684.44 1209.11 L1683.86 1209.11 L1683.27 1209.11 L1682.68 1209.11 L1682.1 1209.11 L1681.51 1209.11 L1680.92 1209.11 L1680.34 1209.11 L1679.75 1209.11 L1679.17 1209.11 L1678.58 1209.11 L1677.99 1209.11 L1677.41 1209.11 L1676.82 1209.11 L1676.23 1209.11 L1675.65 1209.11 L1675.06 1209.11 L1674.47 1209.11 L1673.89 1209.11 L1673.3 1209.11 L1672.71 1209.11 L1672.13 1209.11 L1671.54 1209.11 L1670.96 1209.11 L1670.37 1209.11 L1669.78 1209.11 L1669.2 1209.11 L1668.61 1209.11 L1668.02 1209.11 L1667.44 1209.11 L1666.85 1209.11 L1666.26 1209.11 L1665.68 1209.11 L1665.09 1209.11 L1664.5 1209.11 L1663.92 1209.11 L1663.33 1209.11 L1662.75 1209.11 L1662.16 1209.11 L1661.57 1209.11 L1660.99 1209.11 L1660.4 1209.11 L1659.81 1209.11 L1659.23 1209.11 L1658.64 1209.11 L1658.05 1209.11 L1657.47 1209.11 L1656.88 1209.11 L1656.29 1209.11 L1655.71 1209.11 L1655.12 1209.11 L1654.54 1209.11 L1653.95 1209.11 L1653.36 1209.11 L1652.78 1209.11 L1652.19 1209.11 L1651.6 1209.11 L1651.02 1209.11 L1650.43 1209.11 L1649.84 1209.11 L1649.26 1209.11 L1648.67 1209.11 L1648.09 1209.11 L1647.5 1209.11 L1646.91 1209.11 L1646.33 1209.11 L1645.74 1209.11 L1645.15 1209.11 L1644.57 1209.11 L1643.98 1209.11 L1643.39 1209.11 L1642.81 1209.11 L1642.22 1209.11 L1641.63 1209.11 L1641.05 1209.11 L1640.46 1209.11 L1639.88 1209.11 L1639.29 1209.11 L1638.7 1209.11 L1638.12 1209.11 L1637.53 1209.11 L1636.94 1209.11 L1636.36 1209.11 L1635.77 1209.11 L1635.18 1209.11 L1634.6 1209.11 L1634.01 1209.11 L1633.42 1209.11 L1632.84 1209.11 L1632.25 1209.11 L1631.67 1209.11 L1631.08 1209.11 L1630.49 1209.11 L1629.91 1209.11 L1629.32 1209.11 L1628.73 1209.11 L1628.15 1209.11 L1627.56 1209.11 L1626.97 1209.11 L1626.39 1209.11 L1625.8 1209.11 L1625.22 1209.11 L1624.63 1209.11 L1624.04 1209.11 L1623.46 1209.11 L1622.87 1209.11 L1622.28 1209.11 L1621.7 1209.11 L1621.11 1209.11 L1620.52 1209.11 L1619.94 1209.11 L1619.35 1209.11 L1618.76 1209.11 L1618.18 1209.11 L1617.59 1209.11 L1617.01 1209.11 L1616.42 1209.11 L1615.83 1209.11 L1615.25 1209.11 L1614.66 1209.11 L1614.07 1209.11 L1613.49 1209.11 L1612.9 1209.11 L1612.31 1209.11 L1611.73 1209.11 L1611.14 1209.11 L1610.55 1209.11 L1609.97 1209.11 L1609.38 1209.11 L1608.8 1209.11 L1608.21 1209.11 L1607.62 1209.11 L1607.04 1209.11 L1606.45 1209.11 L1605.86 1209.11 L1605.28 1209.11 L1604.69 1209.11 L1604.1 1209.11 L1603.52 1209.11 L1602.93 1209.11 L1602.34 1209.11 L1601.76 1209.11 L1601.17 1209.11 L1600.59 1209.11 L1600 1209.11 L1599.41 1209.11 L1598.83 1209.11 L1598.24 1209.11 L1597.65 1209.11 L1597.07 1209.11 L1596.48 1209.11 L1595.89 1209.11 L1595.31 1209.11 L1594.72 1209.11 L1594.14 1209.11 L1593.55 1209.11 L1592.96 1209.11 L1592.38 1209.11 L1591.79 1209.11 L1591.2 1209.11 L1590.62 1209.11 L1590.03 1209.11 L1589.44 1209.11 L1588.86 1209.11 L1588.27 1209.11 L1587.68 1209.11 L1587.1 1209.11 L1586.51 1209.11 L1585.93 1209.11 L1585.34 1209.11 L1584.75 1209.11 L1584.17 1209.11 L1583.58 1209.11 L1582.99 1209.11 L1582.41 1209.11 L1581.82 1209.11 L1581.23 1209.11 L1580.65 1209.11 L1580.06 1209.11 L1579.47 1209.11 L1578.89 1209.11 L1578.3 1209.11 L1577.72 1209.11 L1577.13 1209.11 L1576.54 1209.11 L1575.96 1209.11 L1575.37 1209.11 L1574.78 1209.11 L1574.2 1209.11 L1573.61 1209.11 L1573.02 1209.11 L1572.44 1209.11 L1571.85 1209.11 L1571.27 1209.11 L1570.68 1209.11 L1570.09 1209.11 L1569.51 1209.11 L1568.92 1209.11 L1568.33 1209.11 L1567.75 1209.11 L1567.16 1209.11 L1566.57 1209.11 L1565.99 1209.11 L1565.4 1209.11 L1564.81 1209.11 L1564.23 1209.11 L1563.64 1209.11 L1563.06 1209.11 L1562.47 1209.11 L1561.88 1209.11 L1561.3 1209.11 L1560.71 1209.11 L1560.12 1209.11 L1559.54 1209.11 L1558.95 1209.11 L1558.36 1209.11 L1557.78 1209.11 L1557.19 1209.11 L1556.6 1209.11 L1556.02 1209.11 L1555.43 1209.11 L1554.85 1209.11 L1554.26 1209.11 L1553.67 1209.11 L1553.09 1209.11 L1552.5 1209.11 L1551.91 1209.11 L1551.33 1209.11 L1550.74 1209.11 L1550.15 1209.11 L1549.57 1209.11 L1548.98 1209.11 L1548.4 1209.11 L1547.81 1209.11 L1547.22 1209.11 L1546.64 1209.11 L1546.05 1209.11 L1545.46 1209.11 L1544.88 1209.11 L1544.29 1209.11 L1543.7 1209.11 L1543.12 1209.11 L1542.53 1209.11 L1541.94 1209.11 L1541.36 1209.11 L1540.77 1209.11 L1540.19 1209.11 L1539.6 1209.11 L1539.01 1209.11 L1538.43 1209.11 L1537.84 1209.11 L1537.25 1209.11 L1536.67 1209.11 L1536.08 1209.11 L1535.49 1209.11 L1534.91 1209.11 L1534.32 1209.11 L1533.73 1209.11 L1533.15 1209.11 L1532.56 1209.11 L1531.98 1209.11 L1531.39 1209.11 L1530.8 1209.11 L1530.22 1209.11 L1529.63 1209.11 L1529.04 1209.11 L1528.46 1209.11 L1527.87 1209.11 L1527.28 1209.11 L1526.7 1209.11 L1526.11 1209.11 L1525.52 1209.11 L1524.94 1209.11 L1524.35 1209.11 L1523.77 1209.11 L1523.18 1209.11 L1522.59 1209.11 L1522.01 1209.11 L1521.42 1209.11 L1520.83 1209.11 L1520.25 1209.11 L1519.66 1209.11 L1519.07 1209.11 L1518.49 1209.11 L1517.9 1209.11 L1517.32 1209.11 L1516.73 1209.11 L1516.14 1209.11 L1515.56 1209.11 L1514.97 1209.11 L1514.38 1209.11 L1513.8 1209.11 L1513.21 1209.11 L1512.62 1209.11 L1512.04 1209.11 L1511.45 1209.11 L1510.86 1209.11 L1510.28 1209.11 L1509.69 1209.11 L1509.11 1209.11 L1508.52 1209.11 L1507.93 1209.11 L1507.35 1209.11 L1506.76 1209.11 L1506.17 1209.11 L1505.59 1209.11 L1505 1209.11 L1504.41 1209.11 L1503.83 1209.11 L1503.24 1209.11 L1502.65 1209.11 L1502.07 1209.11 L1501.48 1209.11 L1500.9 1209.11 L1500.31 1209.11 L1499.72 1209.11 L1499.14 1209.11 L1498.55 1209.11 L1497.96 1209.11 L1497.38 1209.11 L1496.79 1209.11 L1496.2 1209.11 L1495.62 1209.11 L1495.03 1209.11 L1494.45 1209.11 L1493.86 1209.11 L1493.27 1209.11 L1492.69 1209.11 L1492.1 1209.11 L1491.51 1209.11 L1490.93 1209.11 L1490.34 1209.11 L1489.75 1209.11 L1489.17 1209.11 L1488.58 1209.11 L1487.99 1209.11 L1487.41 1209.11 L1486.82 1209.11 L1486.24 1209.11 L1485.65 1209.11 L1485.06 1209.11 L1484.48 1209.11 L1483.89 1209.11 L1483.3 1209.11 L1482.72 1209.11 L1482.13 1209.11 L1481.54 1209.11 L1480.96 1209.11 L1480.37 1209.11 L1479.78 1209.11 L1479.2 1209.11 L1478.61 1209.11 L1478.03 1209.11 L1477.44 1209.11 L1476.85 1209.11 L1476.27 1209.11 L1475.68 1209.11 L1475.09 1209.11 L1474.51 1209.11 L1473.92 1209.11 L1473.33 1209.11 L1472.75 1209.11 L1472.16 1209.11 L1471.57 1209.11 L1470.99 1209.11 L1470.4 1209.11 L1469.82 1209.11 L1469.23 1209.11 L1468.64 1209.11 L1468.06 1209.11 L1467.47 1209.11 L1466.88 1209.11 L1466.3 1209.11 L1465.71 1209.11 L1465.12 1209.11 L1464.54 1209.11 L1463.95 1209.11 L1463.37 1209.11 L1462.78 1209.11 L1462.19 1209.11 L1461.61 1209.11 L1461.02 1209.11 L1460.43 1209.11 L1459.85 1209.11 L1459.26 1209.11 L1458.67 1209.11 L1458.09 1209.11 L1457.5 1209.11 L1456.91 1209.11 L1456.33 1209.11 L1455.74 1209.11 L1455.16 1209.11 L1454.57 1209.11 L1453.98 1209.11 L1453.4 1209.11 L1452.81 1209.11 L1452.22 1209.11 L1451.64 1209.11 L1451.05 1209.11 L1450.46 1209.11 L1449.88 1209.11 L1449.29 1209.11 L1448.7 1209.11 L1448.12 1209.11 L1447.53 1209.11 L1446.95 1209.11 L1446.36 1209.11 L1445.77 1209.11 L1445.19 1209.11 L1444.6 1209.11 L1444.01 1209.11 L1443.43 1209.11 L1442.84 1209.11 L1442.25 1209.11 L1441.67 1209.11 L1441.08 1209.11 L1440.5 1209.11 L1439.91 1209.11 L1439.32 1209.11 L1438.74 1209.11 L1438.15 1209.11 L1437.56 1209.11 L1436.98 1209.11 L1436.39 1209.11 L1435.8 1209.11 L1435.22 1209.11 L1434.63 1209.11 L1434.04 1209.11 L1433.46 1209.11 L1432.87 1209.11 L1432.29 1209.11 L1431.7 1209.11 L1431.11 1209.11 L1430.53 1209.11 L1429.94 1209.11 L1429.35 1209.11 L1428.77 1209.11 L1428.18 1209.11 L1427.59 1209.11 L1427.01 1209.11 L1426.42 1209.11 L1425.83 1209.11 L1425.25 1209.11 L1424.66 1209.11 L1424.08 1209.11 L1423.49 1209.11 L1422.9 1209.11 L1422.32 1209.11 L1421.73 1209.11 L1421.14 1209.11 L1420.56 1209.11 L1419.97 1209.11 L1419.38 1209.11 L1418.8 1209.11 L1418.21 1209.11 L1417.63 1209.11 L1417.04 1209.11 L1416.45 1209.11 L1415.87 1209.11 L1415.28 1209.11 L1414.69 1209.11 L1414.11 1209.11 L1413.52 1209.11 L1412.93 1209.11 L1412.35 1209.11 L1411.76 1209.11 L1411.17 1209.11 L1410.59 1209.11 L1410 1209.11 L1409.42 1209.11 L1408.83 1209.11 L1408.24 1209.11 L1407.66 1209.11 L1407.07 1209.11 L1406.48 1209.11 L1405.9 1209.11 L1405.31 1209.11 L1404.72 1209.11 L1404.14 1209.11 L1403.55 1209.11 L1402.96 1209.11 L1402.38 1209.11 L1401.79 1209.11 L1401.21 1209.11 L1400.62 1209.11 L1400.03 1209.11 L1399.45 1209.11 L1398.86 1209.11 L1398.27 1209.11 L1397.69 1209.11 L1397.1 1209.11 L1396.51 1209.11 L1395.93 1209.11 L1395.34 1209.11 L1394.75 1209.11 L1394.17 1209.11 L1393.58 1209.11 L1393 1209.11 L1392.41 1209.11 L1391.82 1209.11 L1391.24 1209.11 L1390.65 1209.11 L1390.06 1209.11 L1389.48 1209.11 L1388.89 1209.11 L1388.3 1209.11 L1387.72 1209.11 L1387.13 1209.11 L1386.55 1209.11 L1385.96 1209.11 L1385.37 1209.11 L1384.79 1209.11 L1384.2 1209.11 L1383.61 1209.11 L1383.03 1209.11 L1382.44 1209.11 L1381.85 1209.11 L1381.27 1209.11 L1380.68 1209.11 L1380.09 1209.11 L1379.51 1209.11 L1378.92 1209.11 L1378.34 1209.11 L1377.75 1209.11 L1377.16 1209.11 L1376.58 1209.11 L1375.99 1209.11 L1375.4 1209.11 L1374.82 1209.11 L1374.23 1209.11 L1373.64 1209.11 L1373.06 1209.11 L1372.47 1209.11 L1371.88 1209.11 L1371.3 1209.11 L1370.71 1209.11 L1370.13 1209.11 L1369.54 1209.11 L1368.95 1209.11 L1368.37 1209.11 L1367.78 1209.11 L1367.19 1209.11 L1366.61 1209.11 L1366.02 1209.11 L1365.43 1209.11 L1364.85 1209.11 L1364.26 1209.11 L1363.68 1209.11 L1363.09 1209.11 L1362.5 1209.11 L1361.92 1209.11 L1361.33 1209.11 L1360.74 1209.11 L1360.16 1209.11 L1359.57 1209.11 L1358.98 1209.11 L1358.4 1209.11 L1357.81 1209.11 L1357.22 1209.11 L1356.64 1209.11 L1356.05 1209.11 L1355.47 1209.11 L1354.88 1209.11 L1354.29 1209.11 L1353.71 1209.11 L1353.12 1209.11 L1352.53 1209.11 L1351.95 1209.11 L1351.36 1209.11 L1350.77 1209.11 L1350.19 1209.11 L1349.6 1209.11 L1349.01 1209.11 L1348.43 1209.11 L1347.84 1209.11 L1347.26 1209.11 L1346.67 1209.11 L1346.08 1209.11 L1345.5 1209.11 L1344.91 1209.11 L1344.32 1209.11 L1343.74 1209.11 L1343.15 1209.11 L1342.56 1209.11 L1341.98 1209.11 L1341.39 1209.11 L1340.8 1209.11 L1340.22 1209.11 L1339.63 1209.11 L1339.05 1209.11 L1338.46 1209.11 L1337.87 1209.11 L1337.29 1209.11 L1336.7 1209.11 L1336.11 1209.11 L1335.53 1209.11 L1334.94 1209.11 L1334.35 1209.11 L1333.77 1209.11 L1333.18 1209.11 L1332.6 1209.11 L1332.01 1209.11 L1331.42 1209.11 L1330.84 1209.11 L1330.25 1209.11 L1329.66 1209.11 L1329.08 1209.11 L1328.49 1209.11 L1327.9 1209.11 L1327.32 1209.11 L1326.73 1209.11 L1326.14 1209.11 L1325.56 1209.11 L1324.97 1209.11 L1324.39 1209.11 L1323.8 1209.11 L1323.21 1209.11 L1322.63 1209.11 L1322.04 1209.11 L1321.45 1209.11 L1320.87 1209.11 L1320.28 1209.11 L1319.69 1209.11 L1319.11 1209.11 L1318.52 1209.11 L1317.93 1209.11 L1317.35 1209.11 L1316.76 1209.11 L1316.18 1209.11 L1315.59 1209.11 L1315 1209.11 L1314.42 1209.11 L1313.83 1209.11 L1313.24 1209.11 L1312.66 1209.11 L1312.07 1209.11 L1311.48 1209.11 L1310.9 1209.11 L1310.31 1209.11 L1309.73 1209.11 L1309.14 1209.11 L1308.55 1209.11 L1307.97 1209.11 L1307.38 1209.11 L1306.79 1209.11 L1306.21 1209.11 L1305.62 1209.11 L1305.03 1209.11 L1304.45 1209.11 L1303.86 1209.11 L1303.27 1209.11 L1302.69 1209.11 L1302.1 1209.11 L1301.52 1209.11 L1300.93 1209.11 L1300.34 1209.11 L1299.76 1209.11 L1299.17 1209.11 L1298.58 1209.11 L1298 1209.11 L1297.41 1209.11 L1296.82 1209.11 L1296.24 1209.11 L1295.65 1209.11 L1295.06 1209.11 L1294.48 1209.11 L1293.89 1209.11 L1293.31 1209.11 L1292.72 1209.11 L1292.13 1209.11 L1291.55 1209.11 L1290.96 1209.11 L1290.37 1209.11 L1289.79 1209.11 L1289.2 1209.11 L1288.61 1209.11 L1288.03 1209.11 L1287.44 1209.11 L1286.86 1209.11 L1286.27 1209.11 L1285.68 1209.11 L1285.1 1209.11 L1284.51 1209.11 L1283.92 1209.11 L1283.34 1209.11 L1282.75 1209.11 L1282.16 1209.11 L1281.58 1209.11 L1280.99 1209.11 L1280.4 1209.11 L1279.82 1209.11 L1279.23 1209.11 L1278.65 1209.11 L1278.06 1209.11 L1277.47 1209.11 L1276.89 1209.11 L1276.3 1209.11 L1275.71 1209.11 L1275.13 1209.11 L1274.54 1209.11 L1273.95 1209.11 L1273.37 1209.11 L1272.78 1209.11 L1272.19 1209.11 L1271.61 1209.11 L1271.02 1209.11 L1270.44 1209.11 L1269.85 1209.11 L1269.26 1209.11 L1268.68 1209.11 L1268.09 1209.11 L1267.5 1209.11 L1266.92 1209.11 L1266.33 1209.11 L1265.74 1209.11 L1265.16 1209.11 L1264.57 1209.11 L1263.98 1209.11 L1263.4 1209.11 L1262.81 1209.11 L1262.23 1209.11 L1261.64 1209.11 L1261.05 1209.11 L1260.47 1209.11 L1259.88 1209.11 L1259.29 1209.11 L1258.71 1209.11 L1258.12 1209.11 L1257.53 1209.11 L1256.95 1209.11 L1256.36 1209.11 L1255.78 1209.11 L1255.19 1209.11 L1254.6 1209.11 L1254.02 1209.11 L1253.43 1209.11 L1252.84 1209.11 L1252.26 1209.11 L1251.67 1209.11 L1251.08 1209.11 L1250.5 1209.11 L1249.91 1209.11 L1249.32 1209.11 L1248.74 1209.11 L1248.15 1209.11 L1247.57 1209.11 L1246.98 1209.11 L1246.39 1209.11 L1245.81 1209.11 L1245.22 1209.11 L1244.63 1209.11 L1244.05 1209.11 L1243.46 1209.11 L1242.87 1209.11 L1242.29 1209.11 L1241.7 1209.11 L1241.11 1209.11 L1240.53 1209.11 L1239.94 1209.11 L1239.36 1209.11 L1238.77 1209.11 L1238.18 1209.11 L1237.6 1209.11 L1237.01 1209.11 L1236.42 1209.11 L1235.84 1209.11 L1235.25 1209.11 L1234.66 1209.11 L1234.08 1209.11 L1233.49 1209.11 L1232.91 1209.11 L1232.32 1209.11 L1231.73 1209.11 L1231.15 1209.11 L1230.56 1209.11 L1229.97 1209.11 L1229.39 1209.11 L1228.8 1209.11 L1228.21 1209.11 L1227.63 1209.11 L1227.04 1209.11 L1226.45 1209.11 L1225.87 1209.11 L1225.28 1209.11 L1224.7 1209.11 L1224.11 1209.11 L1223.52 1209.11 L1222.94 1209.11 L1222.35 1209.11 L1221.76 1209.11 L1221.18 1209.11 L1220.59 1209.11 L1220 1209.11 L1219.42 1209.11 L1218.83 1209.11 L1218.24 1209.11 L1217.66 1209.11 L1217.07 1209.11 L1216.49 1209.11 L1215.9 1209.11 L1215.31 1209.11 L1214.73 1209.11 L1214.14 1209.11 L1213.55 1209.11 L1212.97 1209.11 L1212.38 1209.11 L1211.79 1209.11 L1211.21 1209.11 L1210.62 1209.11 L1210.03 1209.11 L1209.45 1209.11 L1208.86 1209.11 L1208.28 1209.11 L1207.69 1209.11 L1207.1 1209.11 L1206.52 1209.11 L1205.93 1209.11 L1205.34 1209.11 L1204.76 1209.11 L1204.17 1209.11 L1203.58 1209.11 L1203 1209.11 L1202.41 1209.11 L1201.83 1209.11 L1201.24 1209.11 L1200.65 1209.11 L1200.07 1209.11 L1199.48 1209.11 L1198.89 1209.11 L1198.31 1209.11 L1197.72 1209.11 L1197.13 1209.11 L1196.55 1209.11 L1195.96 1209.11 L1195.37 1209.11 L1194.79 1209.11 L1194.2 1209.11 L1193.62 1209.11 L1193.03 1209.11 L1192.44 1209.11 L1191.86 1209.11 L1191.27 1209.11 L1190.68 1209.11 L1190.1 1209.11 L1189.51 1209.11 L1188.92 1209.11 L1188.34 1209.11 L1187.75 1209.11 L1187.16 1209.11 L1186.58 1209.11 L1185.99 1209.11 L1185.41 1209.11 L1184.82 1209.11 L1184.23 1209.11 L1183.65 1209.11 L1183.06 1209.11 L1182.47 1209.11 L1181.89 1209.11 L1181.3 1209.11 L1180.71 1209.11 L1180.13 1209.11 L1179.54 1209.11 L1178.96 1209.11 L1178.37 1209.11 L1177.78 1209.11 L1177.2 1209.11 L1176.61 1209.11 L1176.02 1209.11 L1175.44 1209.11 L1174.85 1209.11 L1174.26 1209.11 L1173.68 1209.11 L1173.09 1209.11 L1172.5 1209.11 L1171.92 1209.11 L1171.33 1209.11 L1170.75 1209.11 L1170.16 1209.11 L1169.57 1209.11 L1168.99 1209.11 L1168.4 1209.11 L1167.81 1209.11 L1167.23 1209.11 L1166.64 1209.11 L1166.05 1209.11 L1165.47 1209.11 L1164.88 1209.11 L1164.29 1209.11 L1163.71 1209.11 L1163.12 1209.11 L1162.54 1209.11 L1161.95 1209.11 L1161.36 1209.11 L1160.78 1209.11 L1160.19 1209.11 L1159.6 1209.11 L1159.02 1209.11 L1158.43 1209.11 L1157.84 1209.11 L1157.26 1209.11 L1156.67 1209.11 L1156.09 1209.11 L1155.5 1209.11 L1154.91 1209.11 L1154.33 1209.11 L1153.74 1209.11 L1153.15 1209.11 L1152.57 1209.11 L1151.98 1209.11 L1151.39 1209.11 L1150.81 1209.11 L1150.22 1209.11 L1149.63 1209.11 L1149.05 1209.11 L1148.46 1209.11 L1147.88 1209.11 L1147.29 1209.11 L1146.7 1209.11 L1146.12 1209.11 L1145.53 1209.11 L1144.94 1209.11 L1144.36 1209.11 L1143.77 1209.11 L1143.18 1209.11 L1142.6 1209.11 L1142.01 1209.11 L1141.42 1209.11 L1140.84 1209.11 L1140.25 1209.11 L1139.67 1209.11 L1139.08 1209.11 L1138.49 1209.11 L1137.91 1209.11 L1137.32 1209.11 L1136.73 1209.11 L1136.15 1209.11 L1135.56 1209.11 L1134.97 1209.11 L1134.39 1209.11 L1133.8 1209.11 L1133.21 1209.11 L1132.63 1209.11 L1132.04 1209.11 L1131.46 1209.11 L1130.87 1209.11 L1130.28 1209.11 L1129.7 1209.11 L1129.11 1209.11 L1128.52 1209.11 L1127.94 1209.11 L1127.35 1209.11 L1126.76 1209.11 L1126.18 1209.11 L1125.59 1209.11 L1125.01 1209.11 L1124.42 1209.11 L1123.83 1209.11 L1123.25 1209.11 L1122.66 1209.11 L1122.07 1209.11 L1121.49 1209.11 L1120.9 1209.11 L1120.31 1209.11 L1119.73 1209.11 L1119.14 1209.11 L1118.55 1209.11 L1117.97 1209.11 L1117.38 1209.11 L1116.8 1209.11 L1116.21 1209.11 L1115.62 1209.11 L1115.04 1209.11 L1114.45 1209.11 L1113.86 1209.11 L1113.28 1209.11 L1112.69 1209.11 L1112.1 1209.11 L1111.52 1209.11 L1110.93 1209.11 L1110.34 1209.11 L1109.76 1209.11 L1109.17 1209.11 L1108.59 1209.11 L1108 1209.11 L1107.41 1209.11 L1106.83 1209.11 L1106.24 1209.11 L1105.65 1209.11 L1105.07 1209.11 L1104.48 1209.11 L1103.89 1209.11 L1103.31 1209.11 L1102.72 1209.11 L1102.14 1209.11 L1101.55 1209.11 L1100.96 1209.11 L1100.38 1209.11 L1099.79 1209.11 L1099.2 1209.11 L1098.62 1209.11 L1098.03 1209.11 L1097.44 1209.11 L1096.86 1209.11 L1096.27 1209.11 L1095.68 1209.11 L1095.1 1209.11 L1094.51 1209.11 L1093.93 1209.11 L1093.34 1209.11 L1092.75 1209.11 L1092.17 1209.11 L1091.58 1209.11 L1090.99 1209.11 L1090.41 1209.11 L1089.82 1209.11 L1089.23 1209.11 L1088.65 1209.11 L1088.06 1209.11 L1087.47 1209.11 L1086.89 1209.11 L1086.3 1209.11 L1085.72 1209.11 L1085.13 1209.11 L1084.54 1209.11 L1083.96 1209.11 L1083.37 1209.11 L1082.78 1209.11 L1082.2 1209.11 L1081.61 1209.11 L1081.02 1209.11 L1080.44 1209.11 L1079.85 1209.11 L1079.26 1209.11 L1078.68 1209.11 L1078.09 1209.11 L1077.51 1209.11 L1076.92 1209.11 L1076.33 1209.11 L1075.75 1209.11 L1075.16 1209.11 L1074.57 1209.11 L1073.99 1209.11 L1073.4 1209.11 L1072.81 1209.11 L1072.23 1209.11 L1071.64 1209.11 L1071.06 1209.11 L1070.47 1209.11 L1069.88 1209.11 L1069.3 1209.11 L1068.71 1209.11 L1068.12 1209.11 L1067.54 1209.11 L1066.95 1209.11 L1066.36 1209.11 L1065.78 1209.11 L1065.19 1209.11 L1064.6 1209.11 L1064.02 1209.11 L1063.43 1209.11 L1062.85 1209.11 L1062.26 1209.11 L1061.67 1209.11 L1061.09 1209.11 L1060.5 1209.11 L1059.91 1209.11 L1059.33 1209.11 L1058.74 1209.11 L1058.15 1209.11 L1057.57 1209.11 L1056.98 1209.11 L1056.39 1209.11 L1055.81 1209.11 L1055.22 1209.11 L1054.64 1209.11 L1054.05 1209.11 L1053.46 1209.11 L1052.88 1209.11 L1052.29 1209.11 L1051.7 1209.11 L1051.12 1209.11 L1050.53 1209.11 L1049.94 1209.11 L1049.36 1209.11 L1048.77 1209.11 L1048.19 1209.11 L1047.6 1209.11 L1047.01 1209.11 L1046.43 1209.11 L1045.84 1209.11 L1045.25 1209.11 L1044.67 1209.11 L1044.08 1209.11 L1043.49 1209.11 L1042.91 1209.11 L1042.32 1209.11 L1041.73 1209.11 L1041.15 1209.11 L1040.56 1209.11 L1039.98 1209.11 L1039.39 1209.11 L1038.8 1209.11 L1038.22 1209.11 L1037.63 1209.11 L1037.04 1209.11 L1036.46 1209.11 L1035.87 1209.11 L1035.28 1209.11 L1034.7 1209.11 L1034.11 1209.11 L1033.52 1209.11 L1032.94 1209.11 L1032.35 1209.11 L1031.77 1209.11 L1031.18 1209.11 L1030.59 1209.11 L1030.01 1209.11 L1029.42 1209.11 L1028.83 1209.11 L1028.25 1209.11 L1027.66 1209.11 L1027.07 1209.11 L1026.49 1209.11 L1025.9 1209.11 L1025.32 1209.11 L1024.73 1209.11 L1024.14 1209.11 L1023.56 1209.11 L1022.97 1209.11 L1022.38 1209.11 L1021.8 1209.11 L1021.21 1209.11 L1020.62 1209.11 L1020.04 1209.11 L1019.45 1209.11 L1018.86 1209.11 L1018.28 1209.11 L1017.69 1209.11 L1017.11 1209.11 L1016.52 1209.11 L1015.93 1209.11 L1015.35 1209.11 L1014.76 1209.11 L1014.17 1209.11 L1013.59 1209.11 L1013 1209.11 L1012.41 1209.11 L1011.83 1209.11 L1011.24 1209.11 L1010.65 1209.11 L1010.07 1209.11 L1009.48 1209.11 L1008.9 1209.11 L1008.31 1209.11 L1007.72 1209.11 L1007.14 1209.11 L1006.55 1209.11 L1005.96 1209.11 L1005.38 1209.11 L1004.79 1209.11 L1004.2 1209.11 L1003.62 1209.11 L1003.03 1209.11 L1002.44 1209.11 L1001.86 1209.11 L1001.27 1209.11 L1000.69 1209.11 L1000.1 1209.11 L999.513 1209.11 L998.926 1209.11 L998.34 1209.11 L997.754 1209.11 L997.167 1209.11 L996.581 1209.11 L995.994 1209.11 L995.408 1209.11 L994.822 1209.11 L994.235 1209.11 L993.649 1209.11 L993.062 1209.11 L992.476 1209.11 L991.889 1209.11 L991.303 1209.11 L990.717 1209.11 L990.13 1209.11 L989.544 1209.11 L988.957 1209.11 L988.371 1209.11 L987.785 1209.11 L987.198 1209.11 L986.612 1209.11 L986.025 1209.11  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip202)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1209.49 986.612,1209.49 987.198,1209.49 987.785,1209.49 988.371,1209.49 988.957,1209.49 989.544,1209.49 990.13,1209.49 990.717,1209.49 991.303,1209.49 991.889,1209.49 992.476,1209.49 993.062,1209.49 993.649,1209.49 994.235,1209.49 994.822,1209.49 995.408,1209.49 995.994,1209.49 996.581,1209.49 997.167,1209.49 997.754,1209.49 998.34,1209.49 998.926,1209.49 999.513,1209.49 1000.1,1209.49 1000.69,1209.49 1001.27,1209.49 1001.86,1209.49 1002.44,1209.49 1003.03,1209.49 1003.62,1209.49 1004.2,1209.49 1004.79,1209.49 1005.38,1209.49 1005.96,1209.49 1006.55,1209.49 1007.14,1209.49 1007.72,1209.49 1008.31,1209.49 1008.9,1209.49 1009.48,1209.49 1010.07,1209.49 1010.65,1209.49 1011.24,1209.49 1011.83,1209.49 1012.41,1209.49 1013,1209.49 1013.59,1209.49 1014.17,1209.49 1014.76,1209.49 1015.35,1209.49 1015.93,1209.49 1016.52,1209.49 1017.11,1209.49 1017.69,1209.49 1018.28,1209.49 1018.86,1209.49 1019.45,1209.49 1020.04,1209.49 1020.62,1209.49 1021.21,1209.49 1021.8,1209.49 1022.38,1209.49 1022.97,1209.49 1023.56,1209.49 1024.14,1209.49 1024.73,1209.49 1025.32,1209.49 1025.9,1209.49 1026.49,1209.49 1027.07,1209.49 1027.66,1209.49 1028.25,1209.49 1028.83,1209.49 1029.42,1209.49 1030.01,1209.49 1030.59,1209.49 1031.18,1209.49 1031.77,1209.49 1032.35,1209.49 1032.94,1209.49 1033.52,1209.49 1034.11,1209.49 1034.7,1209.49 1035.28,1209.49 1035.87,1209.49 1036.46,1209.49 1037.04,1209.49 1037.63,1209.49 1038.22,1209.49 1038.8,1209.49 1039.39,1209.49 1039.98,1209.49 1040.56,1209.49 1041.15,1209.49 1041.73,1209.49 1042.32,1209.49 1042.91,1209.49 1043.49,1209.49 1044.08,1209.49 1044.67,1209.49 1045.25,1209.49 1045.84,1209.49 1046.43,1209.49 1047.01,1209.49 1047.6,1209.49 1048.19,1209.49 1048.77,1209.49 1049.36,1209.49 1049.94,1209.49 1050.53,1209.49 1051.12,1209.49 1051.7,1209.49 1052.29,1209.49 1052.88,1209.49 1053.46,1209.49 1054.05,1209.49 1054.64,1209.49 1055.22,1209.49 1055.81,1209.49 1056.39,1209.49 1056.98,1209.49 1057.57,1209.49 1058.15,1209.49 1058.74,1209.49 1059.33,1209.49 1059.91,1209.49 1060.5,1209.49 1061.09,1209.49 1061.67,1209.49 1062.26,1209.49 1062.85,1209.49 1063.43,1209.49 1064.02,1209.49 1064.6,1209.49 1065.19,1209.49 1065.78,1209.49 1066.36,1209.49 1066.95,1209.49 1067.54,1209.49 1068.12,1209.49 1068.71,1209.49 1069.3,1209.49 1069.88,1209.49 1070.47,1209.49 1071.06,1209.49 1071.64,1209.49 1072.23,1209.49 1072.81,1209.49 1073.4,1209.49 1073.99,1209.49 1074.57,1209.49 1075.16,1209.49 1075.75,1209.49 1076.33,1209.49 1076.92,1209.49 1077.51,1209.49 1078.09,1209.49 1078.68,1209.49 1079.26,1209.49 1079.85,1209.49 1080.44,1209.49 1081.02,1209.49 1081.61,1209.49 1082.2,1209.49 1082.78,1209.49 1083.37,1209.49 1083.96,1209.49 1084.54,1209.49 1085.13,1209.49 1085.72,1209.49 1086.3,1209.49 1086.89,1209.49 1087.47,1209.49 1088.06,1209.49 1088.65,1209.49 1089.23,1209.49 1089.82,1209.49 1090.41,1209.49 1090.99,1209.49 1091.58,1209.49 1092.17,1209.49 1092.75,1209.49 1093.34,1209.49 1093.93,1209.49 1094.51,1209.49 1095.1,1209.49 1095.68,1209.49 1096.27,1209.49 1096.86,1209.49 1097.44,1209.49 1098.03,1209.49 1098.62,1209.49 1099.2,1209.49 1099.79,1209.49 1100.38,1209.49 1100.96,1209.49 1101.55,1209.49 1102.14,1209.49 1102.72,1209.49 1103.31,1209.49 1103.89,1209.49 1104.48,1209.49 1105.07,1209.49 1105.65,1209.49 1106.24,1209.49 1106.83,1209.49 1107.41,1209.49 1108,1209.49 1108.59,1209.49 1109.17,1209.49 1109.76,1209.49 1110.34,1209.49 1110.93,1209.49 1111.52,1209.49 1112.1,1209.49 1112.69,1209.49 1113.28,1209.49 1113.86,1209.49 1114.45,1209.49 1115.04,1209.49 1115.62,1209.49 1116.21,1209.49 1116.8,1209.49 1117.38,1209.49 1117.97,1209.49 1118.55,1209.49 1119.14,1209.49 1119.73,1209.49 1120.31,1209.49 1120.9,1209.49 1121.49,1209.49 1122.07,1209.49 1122.66,1209.49 1123.25,1209.49 1123.83,1209.49 1124.42,1209.49 1125.01,1209.49 1125.59,1209.49 1126.18,1209.49 1126.76,1209.49 1127.35,1209.49 1127.94,1209.49 1128.52,1209.49 1129.11,1209.49 1129.7,1209.49 1130.28,1209.49 1130.87,1209.49 1131.46,1209.49 1132.04,1209.49 1132.63,1209.49 1133.21,1209.49 1133.8,1209.49 1134.39,1209.49 1134.97,1209.49 1135.56,1209.49 1136.15,1209.49 1136.73,1209.49 1137.32,1209.49 1137.91,1209.49 1138.49,1209.49 1139.08,1209.49 1139.67,1209.49 1140.25,1209.49 1140.84,1209.49 1141.42,1209.49 1142.01,1209.49 1142.6,1209.49 1143.18,1209.49 1143.77,1209.49 1144.36,1209.49 1144.94,1209.49 1145.53,1209.49 1146.12,1209.49 1146.7,1209.49 1147.29,1209.49 1147.88,1209.49 1148.46,1209.49 1149.05,1209.49 1149.63,1209.49 1150.22,1209.49 1150.81,1209.49 1151.39,1209.49 1151.98,1209.49 1152.57,1209.49 1153.15,1209.49 1153.74,1209.49 1154.33,1209.49 1154.91,1209.49 1155.5,1209.49 1156.09,1209.49 1156.67,1209.49 1157.26,1209.49 1157.84,1209.49 1158.43,1209.49 1159.02,1209.49 1159.6,1209.49 1160.19,1209.49 1160.78,1209.49 1161.36,1209.49 1161.95,1209.49 1162.54,1209.49 1163.12,1209.49 1163.71,1209.49 1164.29,1209.49 1164.88,1209.49 1165.47,1209.49 1166.05,1209.49 1166.64,1209.49 1167.23,1209.49 1167.81,1209.49 1168.4,1209.49 1168.99,1209.49 1169.57,1209.49 1170.16,1209.49 1170.75,1209.49 1171.33,1209.49 1171.92,1209.49 1172.5,1209.49 1173.09,1209.49 1173.68,1209.49 1174.26,1209.49 1174.85,1209.49 1175.44,1209.49 1176.02,1209.49 1176.61,1209.49 1177.2,1209.49 1177.78,1209.49 1178.37,1209.49 1178.96,1209.49 1179.54,1209.49 1180.13,1209.49 1180.71,1209.49 1181.3,1209.49 1181.89,1209.49 1182.47,1209.49 1183.06,1209.49 1183.65,1209.49 1184.23,1209.49 1184.82,1209.49 1185.41,1209.49 1185.99,1209.49 1186.58,1209.49 1187.16,1209.49 1187.75,1209.49 1188.34,1209.49 1188.92,1209.49 1189.51,1209.49 1190.1,1209.49 1190.68,1209.49 1191.27,1209.49 1191.86,1209.49 1192.44,1209.49 1193.03,1209.49 1193.62,1209.49 1194.2,1209.49 1194.79,1209.49 1195.37,1209.49 1195.96,1209.49 1196.55,1209.49 1197.13,1209.49 1197.72,1209.49 1198.31,1209.49 1198.89,1209.49 1199.48,1209.49 1200.07,1209.49 1200.65,1209.49 1201.24,1209.49 1201.83,1209.49 1202.41,1209.49 1203,1209.49 1203.58,1209.49 1204.17,1209.49 1204.76,1209.49 1205.34,1209.49 1205.93,1209.49 1206.52,1209.49 1207.1,1209.49 1207.69,1209.49 1208.28,1209.49 1208.86,1209.49 1209.45,1209.49 1210.03,1209.49 1210.62,1209.49 1211.21,1209.49 1211.79,1209.49 1212.38,1209.49 1212.97,1209.49 1213.55,1209.49 1214.14,1209.49 1214.73,1209.49 1215.31,1209.49 1215.9,1209.49 1216.49,1209.49 1217.07,1209.49 1217.66,1209.49 1218.24,1209.49 1218.83,1209.49 1219.42,1209.49 1220,1209.49 1220.59,1209.49 1221.18,1209.49 1221.76,1209.49 1222.35,1209.49 1222.94,1209.49 1223.52,1209.49 1224.11,1209.49 1224.7,1209.49 1225.28,1209.49 1225.87,1209.49 1226.45,1209.49 1227.04,1209.49 1227.63,1209.49 1228.21,1209.49 1228.8,1209.49 1229.39,1209.49 1229.97,1209.49 1230.56,1209.49 1231.15,1209.49 1231.73,1209.49 1232.32,1209.49 1232.91,1209.49 1233.49,1209.49 1234.08,1209.49 1234.66,1209.49 1235.25,1209.49 1235.84,1209.49 1236.42,1209.49 1237.01,1209.49 1237.6,1209.49 1238.18,1209.49 1238.77,1209.49 1239.36,1209.49 1239.94,1209.49 1240.53,1209.49 1241.11,1209.49 1241.7,1209.49 1242.29,1209.49 1242.87,1209.49 1243.46,1209.49 1244.05,1209.49 1244.63,1209.49 1245.22,1209.49 1245.81,1209.49 1246.39,1209.49 1246.98,1209.49 1247.57,1209.49 1248.15,1209.49 1248.74,1209.49 1249.32,1209.49 1249.91,1209.49 1250.5,1209.49 1251.08,1209.49 1251.67,1209.49 1252.26,1209.49 1252.84,1209.49 1253.43,1209.49 1254.02,1209.49 1254.6,1209.49 1255.19,1209.49 1255.78,1209.49 1256.36,1209.49 1256.95,1209.49 1257.53,1209.49 1258.12,1209.49 1258.71,1209.49 1259.29,1209.49 1259.88,1209.49 1260.47,1209.49 1261.05,1209.49 1261.64,1209.49 1262.23,1209.49 1262.81,1209.49 1263.4,1209.49 1263.98,1209.49 1264.57,1209.49 1265.16,1209.49 1265.74,1209.49 1266.33,1209.49 1266.92,1209.49 1267.5,1209.49 1268.09,1209.49 1268.68,1209.49 1269.26,1209.49 1269.85,1209.49 1270.44,1209.49 1271.02,1209.49 1271.61,1209.49 1272.19,1209.49 1272.78,1209.49 1273.37,1209.49 1273.95,1209.49 1274.54,1209.49 1275.13,1209.49 1275.71,1209.49 1276.3,1209.49 1276.89,1209.49 1277.47,1209.49 1278.06,1209.49 1278.65,1209.49 1279.23,1209.49 1279.82,1209.49 1280.4,1209.49 1280.99,1209.49 1281.58,1209.49 1282.16,1209.49 1282.75,1209.49 1283.34,1209.49 1283.92,1209.49 1284.51,1209.49 1285.1,1209.49 1285.68,1209.49 1286.27,1209.49 1286.86,1209.49 1287.44,1209.49 1288.03,1209.49 1288.61,1209.49 1289.2,1209.49 1289.79,1209.49 1290.37,1209.49 1290.96,1209.49 1291.55,1209.49 1292.13,1209.49 1292.72,1209.49 1293.31,1209.49 1293.89,1209.49 1294.48,1209.49 1295.06,1209.49 1295.65,1209.49 1296.24,1209.49 1296.82,1209.49 1297.41,1209.49 1298,1209.49 1298.58,1209.49 1299.17,1209.49 1299.76,1209.49 1300.34,1209.49 1300.93,1209.49 1301.52,1209.49 1302.1,1209.49 1302.69,1209.49 1303.27,1209.49 1303.86,1209.49 1304.45,1209.49 1305.03,1209.49 1305.62,1209.49 1306.21,1209.49 1306.79,1209.49 1307.38,1209.49 1307.97,1209.49 1308.55,1209.49 1309.14,1209.49 1309.73,1209.49 1310.31,1209.49 1310.9,1209.49 1311.48,1209.49 1312.07,1209.49 1312.66,1209.49 1313.24,1209.49 1313.83,1209.49 1314.42,1209.49 1315,1209.49 1315.59,1209.49 1316.18,1209.49 1316.76,1209.49 1317.35,1209.49 1317.93,1209.49 1318.52,1209.49 1319.11,1209.49 1319.69,1209.49 1320.28,1209.49 1320.87,1209.49 1321.45,1209.49 1322.04,1209.49 1322.63,1209.49 1323.21,1209.49 1323.8,1209.49 1324.39,1209.49 1324.97,1209.49 1325.56,1209.49 1326.14,1209.49 1326.73,1209.49 1327.32,1209.49 1327.9,1209.49 1328.49,1209.49 1329.08,1209.49 1329.66,1209.49 1330.25,1209.49 1330.84,1209.49 1331.42,1209.49 1332.01,1209.49 1332.6,1209.49 1333.18,1209.49 1333.77,1209.49 1334.35,1209.49 1334.94,1209.49 1335.53,1209.49 1336.11,1209.49 1336.7,1209.49 1337.29,1209.49 1337.87,1209.49 1338.46,1209.49 1339.05,1209.49 1339.63,1209.49 1340.22,1209.49 1340.8,1209.49 1341.39,1209.49 1341.98,1209.49 1342.56,1209.49 1343.15,1209.49 1343.74,1209.49 1344.32,1209.49 1344.91,1209.49 1345.5,1209.49 1346.08,1209.49 1346.67,1209.49 1347.26,1209.49 1347.84,1209.49 1348.43,1209.49 1349.01,1209.49 1349.6,1209.49 1350.19,1209.49 1350.77,1209.49 1351.36,1209.49 1351.95,1209.49 1352.53,1209.49 1353.12,1209.49 1353.71,1209.49 1354.29,1209.49 1354.88,1209.49 1355.47,1209.49 1356.05,1209.49 1356.64,1209.49 1357.22,1209.49 1357.81,1209.49 1358.4,1209.49 1358.98,1209.49 1359.57,1209.49 1360.16,1209.49 1360.74,1209.49 1361.33,1209.49 1361.92,1209.49 1362.5,1209.49 1363.09,1209.49 1363.68,1209.49 1364.26,1209.49 1364.85,1209.49 1365.43,1209.49 1366.02,1209.49 1366.61,1209.49 1367.19,1209.49 1367.78,1209.49 1368.37,1209.49 1368.95,1209.49 1369.54,1209.49 1370.13,1209.49 1370.71,1209.49 1371.3,1209.49 1371.88,1209.49 1372.47,1209.49 1373.06,1209.49 1373.64,1209.49 1374.23,1209.49 1374.82,1209.49 1375.4,1209.49 1375.99,1209.49 1376.58,1209.49 1377.16,1209.49 1377.75,1209.49 1378.34,1209.49 1378.92,1209.49 1379.51,1209.49 1380.09,1209.49 1380.68,1209.49 1381.27,1209.49 1381.85,1209.49 1382.44,1209.49 1383.03,1209.49 1383.61,1209.49 1384.2,1209.49 1384.79,1209.49 1385.37,1209.49 1385.96,1209.49 1386.55,1209.49 1387.13,1209.49 1387.72,1209.49 1388.3,1209.49 1388.89,1209.49 1389.48,1209.49 1390.06,1209.49 1390.65,1209.49 1391.24,1209.49 1391.82,1209.49 1392.41,1209.49 1393,1209.49 1393.58,1209.49 1394.17,1209.49 1394.75,1209.49 1395.34,1209.49 1395.93,1209.49 1396.51,1209.49 1397.1,1209.49 1397.69,1209.49 1398.27,1209.49 1398.86,1209.49 1399.45,1209.49 1400.03,1209.49 1400.62,1209.49 1401.21,1209.49 1401.79,1209.49 1402.38,1209.49 1402.96,1209.49 1403.55,1209.49 1404.14,1209.49 1404.72,1209.49 1405.31,1209.49 1405.9,1209.49 1406.48,1209.49 1407.07,1209.49 1407.66,1209.49 1408.24,1209.49 1408.83,1209.49 1409.42,1209.49 1410,1209.49 1410.59,1209.49 1411.17,1209.49 1411.76,1209.49 1412.35,1209.49 1412.93,1209.49 1413.52,1209.49 1414.11,1209.49 1414.69,1209.49 1415.28,1209.49 1415.87,1209.49 1416.45,1209.49 1417.04,1209.49 1417.63,1209.49 1418.21,1209.49 1418.8,1209.49 1419.38,1209.49 1419.97,1209.49 1420.56,1209.49 1421.14,1209.49 1421.73,1209.49 1422.32,1209.49 1422.9,1209.49 1423.49,1209.49 1424.08,1209.49 1424.66,1209.49 1425.25,1209.49 1425.83,1209.49 1426.42,1209.49 1427.01,1209.49 1427.59,1209.49 1428.18,1209.49 1428.77,1209.49 1429.35,1209.49 1429.94,1209.49 1430.53,1209.49 1431.11,1209.49 1431.7,1209.49 1432.29,1209.49 1432.87,1209.49 1433.46,1209.49 1434.04,1209.49 1434.63,1209.49 1435.22,1209.49 1435.8,1209.49 1436.39,1209.49 1436.98,1209.49 1437.56,1209.49 1438.15,1209.49 1438.74,1209.49 1439.32,1209.49 1439.91,1209.49 1440.5,1209.49 1441.08,1209.49 1441.67,1209.49 1442.25,1209.49 1442.84,1209.49 1443.43,1209.49 1444.01,1209.49 1444.6,1209.49 1445.19,1209.49 1445.77,1209.49 1446.36,1209.49 1446.95,1209.49 1447.53,1209.49 1448.12,1209.49 1448.7,1209.49 1449.29,1209.49 1449.88,1209.49 1450.46,1209.49 1451.05,1209.49 1451.64,1209.49 1452.22,1209.49 1452.81,1209.49 1453.4,1209.49 1453.98,1209.49 1454.57,1209.49 1455.16,1209.49 1455.74,1209.49 1456.33,1209.49 1456.91,1209.49 1457.5,1209.49 1458.09,1209.49 1458.67,1209.49 1459.26,1209.49 1459.85,1209.49 1460.43,1209.49 1461.02,1209.49 1461.61,1209.49 1462.19,1209.49 1462.78,1209.49 1463.37,1209.49 1463.95,1209.49 1464.54,1209.49 1465.12,1209.49 1465.71,1209.49 1466.3,1209.49 1466.88,1209.49 1467.47,1209.49 1468.06,1209.49 1468.64,1209.49 1469.23,1209.49 1469.82,1209.49 1470.4,1209.49 1470.99,1209.49 1471.57,1209.49 1472.16,1209.49 1472.75,1209.49 1473.33,1209.49 1473.92,1209.49 1474.51,1209.49 1475.09,1209.49 1475.68,1209.49 1476.27,1209.49 1476.85,1209.49 1477.44,1209.49 1478.03,1209.49 1478.61,1209.49 1479.2,1209.49 1479.78,1209.49 1480.37,1209.49 1480.96,1209.49 1481.54,1209.49 1482.13,1209.49 1482.72,1209.49 1483.3,1209.49 1483.89,1209.49 1484.48,1209.49 1485.06,1209.49 1485.65,1209.49 1486.24,1209.49 1486.82,1209.49 1487.41,1209.49 1487.99,1209.49 1488.58,1209.49 1489.17,1209.49 1489.75,1209.49 1490.34,1209.49 1490.93,1209.49 1491.51,1209.49 1492.1,1209.49 1492.69,1209.49 1493.27,1209.49 1493.86,1209.49 1494.45,1209.49 1495.03,1209.49 1495.62,1209.49 1496.2,1209.49 1496.79,1209.49 1497.38,1209.49 1497.96,1209.49 1498.55,1209.49 1499.14,1209.49 1499.72,1209.49 1500.31,1209.49 1500.9,1209.49 1501.48,1209.49 1502.07,1209.49 1502.65,1209.49 1503.24,1209.49 1503.83,1209.49 1504.41,1209.49 1505,1209.49 1505.59,1209.49 1506.17,1209.49 1506.76,1209.49 1507.35,1209.49 1507.93,1209.49 1508.52,1209.49 1509.11,1209.49 1509.69,1209.49 1510.28,1209.49 1510.86,1209.49 1511.45,1209.49 1512.04,1209.49 1512.62,1209.49 1513.21,1209.49 1513.8,1209.49 1514.38,1209.49 1514.97,1209.49 1515.56,1209.49 1516.14,1209.49 1516.73,1209.49 1517.32,1209.49 1517.9,1209.49 1518.49,1209.49 1519.07,1209.49 1519.66,1209.49 1520.25,1209.49 1520.83,1209.49 1521.42,1209.49 1522.01,1209.49 1522.59,1209.49 1523.18,1209.49 1523.77,1209.49 1524.35,1209.49 1524.94,1209.49 1525.52,1209.49 1526.11,1209.49 1526.7,1209.49 1527.28,1209.49 1527.87,1209.49 1528.46,1209.49 1529.04,1209.49 1529.63,1209.49 1530.22,1209.49 1530.8,1209.49 1531.39,1209.49 1531.98,1209.49 1532.56,1209.49 1533.15,1209.49 1533.73,1209.49 1534.32,1209.49 1534.91,1209.49 1535.49,1209.49 1536.08,1209.49 1536.67,1209.49 1537.25,1209.49 1537.84,1209.49 1538.43,1209.49 1539.01,1209.49 1539.6,1209.49 1540.19,1209.49 1540.77,1209.49 1541.36,1209.49 1541.94,1209.49 1542.53,1209.49 1543.12,1209.49 1543.7,1209.49 1544.29,1209.49 1544.88,1209.49 1545.46,1209.49 1546.05,1209.49 1546.64,1209.49 1547.22,1209.49 1547.81,1209.49 1548.4,1209.49 1548.98,1209.49 1549.57,1209.49 1550.15,1209.49 1550.74,1209.49 1551.33,1209.49 1551.91,1209.49 1552.5,1209.49 1553.09,1209.49 1553.67,1209.49 1554.26,1209.49 1554.85,1209.49 1555.43,1209.49 1556.02,1209.49 1556.6,1209.49 1557.19,1209.49 1557.78,1209.49 1558.36,1209.49 1558.95,1209.49 1559.54,1209.49 1560.12,1209.49 1560.71,1209.49 1561.3,1209.49 1561.88,1209.49 1562.47,1209.49 1563.06,1209.49 1563.64,1209.49 1564.23,1209.49 1564.81,1209.49 1565.4,1209.49 1565.99,1209.49 1566.57,1209.49 1567.16,1209.49 1567.75,1209.49 1568.33,1209.49 1568.92,1209.49 1569.51,1209.49 1570.09,1209.49 1570.68,1209.49 1571.27,1209.49 1571.85,1209.49 1572.44,1209.49 1573.02,1209.49 1573.61,1209.49 1574.2,1209.49 1574.78,1209.49 1575.37,1209.49 1575.96,1209.49 1576.54,1209.49 1577.13,1209.49 1577.72,1209.49 1578.3,1209.49 1578.89,1209.49 1579.47,1209.49 1580.06,1209.49 1580.65,1209.49 1581.23,1209.49 1581.82,1209.49 1582.41,1209.49 1582.99,1209.49 1583.58,1209.49 1584.17,1209.49 1584.75,1209.49 1585.34,1209.49 1585.93,1209.49 1586.51,1209.49 1587.1,1209.49 1587.68,1209.49 1588.27,1209.49 1588.86,1209.49 1589.44,1209.49 1590.03,1209.49 1590.62,1209.49 1591.2,1209.49 1591.79,1209.49 1592.38,1209.49 1592.96,1209.49 1593.55,1209.49 1594.14,1209.49 1594.72,1209.49 1595.31,1209.49 1595.89,1209.49 1596.48,1209.49 1597.07,1209.49 1597.65,1209.49 1598.24,1209.49 1598.83,1209.49 1599.41,1209.49 1600,1209.49 1600.59,1209.49 1601.17,1209.49 1601.76,1209.49 1602.34,1209.49 1602.93,1209.49 1603.52,1209.49 1604.1,1209.49 1604.69,1209.49 1605.28,1209.49 1605.86,1209.49 1606.45,1209.49 1607.04,1209.49 1607.62,1209.49 1608.21,1209.49 1608.8,1209.49 1609.38,1209.49 1609.97,1209.49 1610.55,1209.49 1611.14,1209.49 1611.73,1209.49 1612.31,1209.49 1612.9,1209.49 1613.49,1209.49 1614.07,1209.49 1614.66,1209.49 1615.25,1209.49 1615.83,1209.49 1616.42,1209.49 1617.01,1209.49 1617.59,1209.49 1618.18,1209.49 1618.76,1209.49 1619.35,1209.49 1619.94,1209.49 1620.52,1209.49 1621.11,1209.49 1621.7,1209.49 1622.28,1209.49 1622.87,1209.49 1623.46,1209.49 1624.04,1209.49 1624.63,1209.49 1625.22,1209.49 1625.8,1209.49 1626.39,1209.49 1626.97,1209.49 1627.56,1209.49 1628.15,1209.49 1628.73,1209.49 1629.32,1209.49 1629.91,1209.49 1630.49,1209.49 1631.08,1209.49 1631.67,1209.49 1632.25,1209.49 1632.84,1209.49 1633.42,1209.49 1634.01,1209.49 1634.6,1209.49 1635.18,1209.49 1635.77,1209.49 1636.36,1209.49 1636.94,1209.49 1637.53,1209.49 1638.12,1209.49 1638.7,1209.49 1639.29,1209.49 1639.88,1209.49 1640.46,1209.49 1641.05,1209.49 1641.63,1209.49 1642.22,1209.49 1642.81,1209.49 1643.39,1209.49 1643.98,1209.49 1644.57,1209.49 1645.15,1209.49 1645.74,1209.49 1646.33,1209.49 1646.91,1209.49 1647.5,1209.49 1648.09,1209.49 1648.67,1209.49 1649.26,1209.49 1649.84,1209.49 1650.43,1209.49 1651.02,1209.49 1651.6,1209.49 1652.19,1209.49 1652.78,1209.49 1653.36,1209.49 1653.95,1209.49 1654.54,1209.49 1655.12,1209.49 1655.71,1209.49 1656.29,1209.49 1656.88,1209.49 1657.47,1209.49 1658.05,1209.49 1658.64,1209.49 1659.23,1209.49 1659.81,1209.49 1660.4,1209.49 1660.99,1209.49 1661.57,1209.49 1662.16,1209.49 1662.75,1209.49 1663.33,1209.49 1663.92,1209.49 1664.5,1209.49 1665.09,1209.49 1665.68,1209.49 1666.26,1209.49 1666.85,1209.49 1667.44,1209.49 1668.02,1209.49 1668.61,1209.49 1669.2,1209.49 1669.78,1209.49 1670.37,1209.49 1670.96,1209.49 1671.54,1209.49 1672.13,1209.49 1672.71,1209.49 1673.3,1209.49 1673.89,1209.49 1674.47,1209.49 1675.06,1209.49 1675.65,1209.49 1676.23,1209.49 1676.82,1209.49 1677.41,1209.49 1677.99,1209.49 1678.58,1209.49 1679.17,1209.49 1679.75,1209.49 1680.34,1209.49 1680.92,1209.49 1681.51,1209.49 1682.1,1209.49 1682.68,1209.49 1683.27,1209.49 1683.86,1209.49 1684.44,1209.49 1685.03,1209.49 1685.62,1209.49 1686.2,1209.49 1686.79,1209.49 1687.37,1209.49 1687.96,1209.49 1688.55,1209.49 1689.13,1209.49 1689.72,1209.49 1690.31,1209.49 1690.89,1209.49 1691.48,1209.49 1692.07,1209.49 1692.65,1209.49 1693.24,1209.49 1693.83,1209.49 1694.41,1209.49 1695,1209.49 1695.58,1209.49 1696.17,1209.49 1696.76,1209.49 1697.34,1209.49 1697.93,1209.49 1698.52,1209.49 1699.1,1209.49 1699.69,1209.49 1700.28,1209.49 1700.86,1209.49 1701.45,1209.49 1702.04,1209.49 1702.62,1209.49 1703.21,1209.49 1703.79,1209.49 1704.38,1209.49 1704.97,1209.49 1705.55,1209.49 1706.14,1209.49 1706.73,1209.49 1707.31,1209.49 1707.9,1209.49 1708.49,1209.49 1709.07,1209.49 1709.66,1209.49 1710.24,1209.49 1710.83,1209.49 1711.42,1209.49 1712,1209.49 1712.59,1209.49 1713.18,1209.49 1713.76,1209.49 1714.35,1209.49 1714.94,1209.49 1715.52,1209.49 1716.11,1209.49 1716.7,1209.49 1717.28,1209.49 1717.87,1209.49 1718.45,1209.49 1719.04,1209.49 1719.63,1209.49 1720.21,1209.49 1720.8,1209.49 1721.39,1209.49 1721.97,1209.49 1722.56,1209.49 1723.15,1209.49 1723.73,1209.49 1724.32,1209.49 1724.91,1209.49 1725.49,1209.49 1726.08,1209.49 1726.66,1209.49 1727.25,1209.49 1727.84,1209.49 1728.42,1209.49 1729.01,1209.49 1729.6,1209.49 1730.18,1209.49 1730.77,1209.49 1731.36,1209.49 1731.94,1209.49 1732.53,1209.49 1733.11,1209.49 1733.7,1209.49 1734.29,1209.49 1734.87,1209.49 1735.46,1209.49 1736.05,1209.49 1736.63,1209.49 1737.22,1209.49 1737.81,1209.49 1738.39,1209.49 1738.98,1209.49 1739.57,1209.49 1740.15,1209.49 1740.74,1209.49 1741.32,1209.49 1741.91,1209.49 1742.5,1209.49 1743.08,1209.49 1743.67,1209.49 1744.26,1209.49 1744.84,1209.49 1745.43,1209.49 1746.02,1209.49 1746.6,1209.49 1747.19,1209.49 1747.78,1209.49 1748.36,1209.49 1748.95,1209.49 1749.53,1209.49 1750.12,1209.49 1750.71,1209.49 1751.29,1209.49 1751.88,1209.49 1752.47,1209.49 1753.05,1209.49 1753.64,1209.49 1754.23,1209.49 1754.81,1209.49 1755.4,1209.49 1755.99,1209.49 1756.57,1209.49 1757.16,1209.49 1757.74,1209.49 1758.33,1209.49 1758.92,1209.49 1759.5,1209.49 1760.09,1209.49 1760.68,1209.49 1761.26,1209.49 1761.85,1209.49 1762.44,1209.49 1763.02,1209.49 1763.61,1209.49 1764.19,1209.49 1764.78,1209.49 1765.37,1209.49 1765.95,1209.49 1766.54,1209.49 1767.13,1209.49 1767.71,1209.49 1768.3,1209.49 1768.89,1209.49 1769.47,1209.49 1770.06,1209.49 1770.65,1209.49 1771.23,1209.49 1771.82,1209.49 1772.4,1209.49 1772.99,1209.49 1773.58,1209.49 1774.16,1209.49 1774.75,1209.49 1775.34,1209.49 1775.92,1209.49 1776.51,1209.49 1777.1,1209.49 1777.68,1209.49 1778.27,1209.49 1778.86,1209.49 1779.44,1209.49 1780.03,1209.49 1780.61,1209.49 1781.2,1209.49 1781.79,1209.49 1782.37,1209.49 1782.96,1209.49 1783.55,1209.49 1784.13,1209.49 1784.72,1209.49 1785.31,1209.49 1785.89,1209.49 1786.48,1209.49 1787.06,1209.49 1787.65,1209.49 1788.24,1209.49 1788.82,1209.49 1789.41,1209.49 1790,1209.49 1790.58,1209.49 1791.17,1209.49 1791.76,1209.49 1792.34,1209.49 1792.93,1209.49 1793.52,1209.49 1794.1,1209.49 1794.69,1209.49 1795.27,1209.49 1795.86,1209.49 1796.45,1209.49 1797.03,1209.49 1797.62,1209.49 1798.21,1209.49 1798.79,1209.49 1799.38,1209.49 1799.97,1209.49 1800.55,1209.49 1801.14,1209.49 1801.73,1209.49 1802.31,1209.49 1802.9,1209.49 1803.48,1209.49 1804.07,1209.49 1804.66,1209.49 1805.24,1209.49 1805.83,1209.49 1806.42,1209.49 1807,1209.49 1807.59,1209.49 1808.18,1209.49 1808.76,1209.49 1809.35,1209.49 1809.94,1209.49 1810.52,1209.49 1811.11,1209.49 1811.69,1209.49 1812.28,1209.49 1812.87,1209.49 1813.45,1209.49 1814.04,1209.49 1814.63,1209.49 1815.21,1209.49 1815.8,1209.49 1816.39,1209.49 1816.97,1209.49 1817.56,1209.49 1818.14,1209.49 1818.73,1209.49 1819.32,1209.49 1819.9,1209.49 1820.49,1209.49 1821.08,1209.49 1821.66,1209.49 1822.25,1209.49 1822.84,1209.49 1823.42,1209.49 1824.01,1209.49 1824.6,1209.49 1825.18,1209.49 1825.77,1209.49 1826.35,1209.49 1826.94,1209.49 1827.53,1209.49 1828.11,1209.49 1828.7,1209.49 1829.29,1209.49 1829.87,1209.49 1830.46,1209.49 1831.05,1209.49 1831.63,1209.49 1832.22,1209.49 1832.81,1209.49 1833.39,1209.49 1833.98,1209.49 1834.56,1209.49 1835.15,1209.49 1835.74,1209.49 1836.32,1209.49 1836.91,1209.49 1837.5,1209.49 1838.08,1209.49 1838.67,1209.49 1839.26,1209.49 1839.84,1209.49 1840.43,1209.49 1841.01,1209.49 1841.6,1209.49 1842.19,1209.49 1842.77,1209.49 1843.36,1209.49 1843.95,1209.49 1844.53,1209.49 1845.12,1209.49 1845.71,1209.49 1846.29,1209.49 1846.88,1209.49 1847.47,1209.49 1848.05,1209.49 1848.64,1209.49 1849.22,1209.49 1849.81,1209.49 1850.4,1209.49 1850.98,1209.49 1851.57,1209.49 1852.16,1209.49 1852.74,1209.49 1853.33,1209.49 1853.92,1209.49 1854.5,1209.49 1855.09,1209.49 1855.68,1209.49 1856.26,1209.49 1856.85,1209.49 1857.43,1209.49 1858.02,1209.49 1858.61,1209.49 1859.19,1209.49 1859.78,1209.49 1860.37,1209.49 1860.95,1209.49 1861.54,1209.49 1862.13,1209.49 1862.71,1209.49 1863.3,1209.49 1863.88,1209.49 1864.47,1209.49 1865.06,1209.49 1865.64,1209.49 1866.23,1209.49 1866.82,1209.49 1867.4,1209.49 1867.99,1209.49 1868.58,1209.49 1869.16,1209.49 1869.75,1209.49 1870.34,1209.49 1870.92,1209.49 1871.51,1209.49 1872.09,1209.49 1872.68,1209.49 1873.27,1209.49 1873.85,1209.49 1874.44,1209.49 1875.03,1209.49 1875.61,1209.49 1876.2,1209.49 1876.79,1209.49 1877.37,1209.49 1877.96,1209.49 1878.55,1209.49 1879.13,1209.49 1879.72,1209.49 1880.3,1209.49 1880.89,1209.49 1881.48,1209.49 1882.06,1209.49 1882.65,1209.49 1883.24,1209.49 1883.82,1209.49 1884.41,1209.49 1885,1209.49 1885.58,1209.49 1886.17,1209.49 1886.76,1209.49 1887.34,1209.49 1887.93,1209.49 1888.51,1209.49 1889.1,1209.49 1889.69,1209.49 1890.27,1209.49 1890.86,1209.49 1891.45,1209.49 1892.03,1209.49 1892.62,1209.49 1893.21,1209.49 1893.79,1209.49 1894.38,1209.49 1894.96,1209.49 1895.55,1209.49 1896.14,1209.49 1896.72,1209.49 1897.31,1209.49 1897.9,1209.49 1898.48,1209.49 1899.07,1209.49 1899.66,1209.49 1900.24,1209.49 1900.83,1209.49 1901.42,1209.49 1902,1209.49 1902.59,1209.49 1903.17,1209.49 1903.76,1209.49 1904.35,1209.49 1904.93,1209.49 1905.52,1209.49 1906.11,1209.49 1906.69,1209.49 1907.28,1209.49 1907.87,1209.49 1908.45,1209.49 1909.04,1209.49 1909.63,1209.49 1910.21,1209.49 1910.8,1209.49 1911.38,1209.49 1911.97,1209.49 1912.56,1209.49 1913.14,1209.49 1913.73,1209.49 1914.32,1209.49 1914.9,1209.49 1915.49,1209.49 1916.08,1209.49 1916.66,1209.49 1917.25,1209.49 1917.83,1209.49 1918.42,1209.49 1919.01,1209.49 1919.59,1209.49 1920.18,1209.49 1920.77,1209.49 1921.35,1209.49 1921.94,1209.49 1922.53,1209.49 1923.11,1209.49 1923.7,1209.49 1924.29,1209.49 1924.87,1209.49 1925.46,1209.49 1926.04,1209.49 1926.63,1209.49 1927.22,1209.49 1927.8,1209.49 1928.39,1209.49 1928.98,1209.49 1929.56,1209.49 1930.15,1209.49 1930.74,1209.49 1931.32,1209.49 1931.91,1209.49 1932.5,1209.49 1933.08,1209.49 1933.67,1209.49 1934.25,1209.49 1934.84,1209.49 1935.43,1209.49 1936.01,1209.49 1936.6,1209.49 1937.19,1209.49 1937.77,1209.49 1938.36,1209.49 1938.95,1209.49 1939.53,1209.49 1940.12,1209.49 1940.71,1209.49 1941.29,1209.49 1941.88,1209.49 1942.46,1209.49 1943.05,1209.49 1943.64,1209.49 1944.22,1209.49 1944.81,1209.49 1945.4,1209.49 1945.98,1209.49 1946.57,1209.49 1947.16,1209.49 1947.74,1209.49 1948.33,1209.49 1948.91,1209.49 1949.5,1209.49 1950.09,1209.49 1950.67,1209.49 1951.26,1209.49 1951.85,1209.49 1952.43,1209.49 1953.02,1209.49 1953.61,1209.49 1954.19,1209.49 1954.78,1209.49 1955.37,1209.49 1955.95,1209.49 1956.54,1209.49 1957.12,1209.49 1957.71,1209.49 1958.3,1209.49 1958.88,1209.49 1959.47,1209.49 1960.06,1209.49 1960.64,1209.49 1961.23,1209.49 1961.82,1209.49 1962.4,1209.49 1962.99,1209.49 1963.58,1209.49 1964.16,1209.49 1964.75,1209.49 1965.33,1209.49 1965.92,1209.49 1966.51,1209.49 1967.09,1209.49 1967.68,1209.49 1968.27,1209.49 1968.85,1209.49 1969.44,1209.49 1970.03,1209.49 1970.61,1209.49 1971.2,1209.49 1971.78,1209.49 1972.37,1209.49 1972.96,1209.49 1973.54,1209.49 1974.13,1209.49 1974.72,1209.49 1975.3,1209.49 1975.89,1209.49 1976.48,1209.49 1977.06,1209.49 1977.65,1209.49 1978.24,1209.49 1978.82,1209.49 1979.41,1209.49 1979.99,1209.49 1980.58,1209.49 1981.17,1209.49 1981.75,1209.49 1982.34,1209.49 1982.93,1209.49 1983.51,1209.49 1984.1,1209.49 1984.69,1209.49 1985.27,1209.49 1985.86,1209.49 1986.45,1209.49 1987.03,1209.49 1987.62,1209.49 1988.2,1209.49 1988.79,1209.49 1989.38,1209.49 1989.96,1209.49 1990.55,1209.49 1991.14,1209.49 1991.72,1209.49 1992.31,1209.49 1992.9,1209.49 1993.48,1209.49 1994.07,1209.49 1994.65,1209.49 1995.24,1209.49 1995.83,1209.49 1996.41,1209.49 1997,1209.49 1997.59,1209.49 1998.17,1209.49 1998.76,1209.49 1999.35,1209.49 1999.93,1209.49 2000.52,1209.49 2001.11,1209.49 2001.69,1209.49 2002.28,1209.49 2002.86,1209.49 2003.45,1209.49 2004.04,1209.49 2004.62,1209.49 2005.21,1209.49 2005.8,1209.49 2006.38,1209.49 2006.97,1209.49 2007.56,1209.49 2008.14,1209.49 2008.73,1209.49 2009.32,1209.49 2009.9,1209.49 2010.49,1209.49 2011.07,1209.49 2011.66,1209.49 2012.25,1209.49 2012.83,1209.49 2013.42,1209.49 2014.01,1209.49 2014.59,1209.49 2015.18,1209.49 2015.77,1209.49 2016.35,1209.49 2016.94,1209.49 2017.53,1209.49 2018.11,1209.49 2018.7,1209.49 2019.28,1209.49 2019.87,1209.49 2020.46,1209.49 2021.04,1209.49 2021.63,1209.49 2022.22,1209.49 2022.8,1209.49 2023.39,1209.49 2023.98,1209.49 2024.56,1209.49 2025.15,1209.49 2025.73,1209.49 2026.32,1209.49 2026.91,1209.49 2027.49,1209.49 2028.08,1209.49 2028.67,1209.49 2029.25,1209.49 2029.84,1209.49 2030.43,1209.49 2031.01,1209.49 2031.6,1209.49 2032.19,1209.49 2032.77,1209.49 2033.36,1209.49 2033.94,1209.49 2034.53,1209.49 2035.12,1209.49 2035.7,1209.49 2036.29,1209.49 2036.88,1209.49 2037.46,1209.49 2038.05,1209.49 2038.64,1209.49 2039.22,1209.49 2039.81,1209.49 2040.4,1209.49 2040.98,1209.49 2041.57,1209.49 2042.15,1209.49 2042.74,1209.49 2043.33,1209.49 2043.91,1209.49 2044.5,1209.49 2045.09,1209.49 2045.67,1209.49 2046.26,1209.49 2046.85,1209.49 2047.43,1209.49 2048.02,1209.49 2048.6,1209.49 2049.19,1209.49 2049.78,1209.49 2050.36,1209.49 2050.95,1209.49 2051.54,1209.49 2052.12,1209.49 2052.71,1209.49 2053.3,1209.49 2053.88,1209.49 2054.47,1209.49 2055.06,1209.49 2055.64,1209.49 2056.23,1209.49 2056.81,1209.49 2057.4,1209.49 2057.99,1209.49 2058.57,1209.49 2059.16,1209.49 2059.75,1209.49 2060.33,1209.49 2060.92,1209.49 2061.51,1209.49 2062.09,1209.49 2062.68,1209.49 2063.27,1209.49 2063.85,1209.49 2064.44,1209.49 2065.02,1209.49 2065.61,1209.49 2066.2,1209.49 2066.78,1209.49 2067.37,1209.49 2067.96,1209.49 2068.54,1209.49 2069.13,1209.49 2069.72,1209.49 2070.3,1209.49 2070.89,1209.49 2071.48,1209.49 2072.06,1209.49 2072.65,1209.49 2073.23,1209.49 2073.82,1209.49 2074.41,1209.49 2074.99,1209.49 2075.58,1209.49 2076.17,1209.49 2076.75,1209.49 2077.34,1209.49 2077.93,1209.49 2078.51,1209.49 2079.1,1209.49 2079.68,1209.49 2080.27,1209.49 2080.86,1209.49 2081.44,1209.49 2082.03,1209.49 2082.62,1209.49 2083.2,1209.49 2083.79,1209.49 2084.38,1209.49 2084.96,1209.49 2085.55,1209.49 2086.14,1209.49 2086.72,1209.49 2087.31,1209.49 2087.89,1209.49 2088.48,1209.49 2089.07,1209.49 2089.65,1209.49 2090.24,1209.49 2090.83,1209.49 2091.41,1209.49 2092,1209.49 2092.59,1209.49 2093.17,1209.49 2093.76,1209.49 2094.35,1209.49 2094.93,1209.49 2095.52,1209.49 2096.1,1209.49 2096.69,1209.49 2097.28,1209.49 2097.86,1209.49 2098.45,1209.49 2099.04,1209.49 2099.62,1209.49 2100.21,1209.49 2100.8,1209.49 2101.38,1209.49 2101.97,1209.49 2102.55,1209.49 2103.14,1209.49 2103.73,1209.49 2104.31,1209.49 2104.9,1209.49 2105.49,1209.49 2106.07,1209.49 2106.66,1209.49 2107.25,1209.49 2107.83,1209.49 2108.42,1209.49 2109.01,1209.49 2109.59,1209.49 2110.18,1209.49 2110.76,1209.49 2111.35,1209.49 2111.94,1209.49 2112.52,1209.49 2113.11,1209.49 2113.7,1209.49 2114.28,1209.49 2114.87,1209.49 2115.46,1209.49 2116.04,1209.49 2116.63,1209.49 2117.22,1209.49 2117.8,1209.49 2118.39,1209.49 2118.97,1209.49 2119.56,1209.49 2120.15,1209.49 2120.73,1209.49 2121.32,1209.49 2121.91,1209.49 2122.49,1209.49 2123.08,1209.49 2123.67,1209.49 2124.25,1209.49 2124.84,1209.49 2125.42,1209.49 2126.01,1209.49 2126.6,1209.49 2127.18,1209.49 2127.77,1209.49 2128.36,1209.49 2128.94,1209.49 2129.53,1209.49 2130.12,1209.49 2130.7,1209.49 2131.29,1209.49 2131.88,1209.49 2132.46,1209.49 2133.05,1209.49 2133.63,1209.49 2134.22,1209.49 2134.81,1209.49 2135.39,1209.49 2135.98,1209.49 2136.57,1209.49 2137.15,1209.49 2137.74,1209.49 2138.33,1209.49 2138.91,1209.49 2139.5,1209.49 2140.09,1209.49 2140.67,1209.49 2141.26,1209.49 2141.84,1209.49 2142.43,1209.49 2143.02,1209.49 2143.6,1209.49 2144.19,1209.49 2144.78,1209.49 2145.36,1209.49 2145.95,1209.49 2146.54,1209.49 2147.12,1209.49 2147.71,1209.49 2148.3,1209.49 2148.88,1209.49 2149.47,1209.49 2150.05,1209.49 2150.64,1209.49 2151.23,1209.49 2151.81,1209.49 2152.4,1209.49 2152.99,1209.49 2153.57,1209.49 2154.16,1209.49 2154.75,1209.49 2155.33,1209.49 2155.92,1209.49 2156.5,1209.49 2157.09,1209.49 2157.68,1209.49 2158.26,1209.49 \"/>\n<path clip-path=\"url(#clip202)\" d=\"M986.025 1209.43 L986.612 1209.43 L987.198 1209.43 L987.785 1209.43 L988.371 1209.43 L988.957 1209.43 L989.544 1209.43 L990.13 1209.43 L990.717 1209.43 L991.303 1209.43 L991.889 1209.43 L992.476 1209.43 L993.062 1209.43 L993.649 1209.43 L994.235 1209.43 L994.822 1209.43 L995.408 1209.43 L995.994 1209.43 L996.581 1209.43 L997.167 1209.43 L997.754 1209.43 L998.34 1209.43 L998.926 1209.43 L999.513 1209.43 L1000.1 1209.43 L1000.69 1209.43 L1001.27 1209.43 L1001.86 1209.43 L1002.44 1209.43 L1003.03 1209.43 L1003.62 1209.43 L1004.2 1209.43 L1004.79 1209.43 L1005.38 1209.43 L1005.96 1209.43 L1006.55 1209.43 L1007.14 1209.43 L1007.72 1209.43 L1008.31 1209.43 L1008.9 1209.43 L1009.48 1209.43 L1010.07 1209.43 L1010.65 1209.43 L1011.24 1209.43 L1011.83 1209.43 L1012.41 1209.43 L1013 1209.43 L1013.59 1209.43 L1014.17 1209.43 L1014.76 1209.43 L1015.35 1209.43 L1015.93 1209.43 L1016.52 1209.43 L1017.11 1209.43 L1017.69 1209.43 L1018.28 1209.43 L1018.86 1209.43 L1019.45 1209.43 L1020.04 1209.43 L1020.62 1209.43 L1021.21 1209.43 L1021.8 1209.43 L1022.38 1209.43 L1022.97 1209.43 L1023.56 1209.43 L1024.14 1209.43 L1024.73 1209.43 L1025.32 1209.43 L1025.9 1209.43 L1026.49 1209.43 L1027.07 1209.43 L1027.66 1209.43 L1028.25 1209.43 L1028.83 1209.43 L1029.42 1209.43 L1030.01 1209.43 L1030.59 1209.43 L1031.18 1209.43 L1031.77 1209.43 L1032.35 1209.43 L1032.94 1209.43 L1033.52 1209.43 L1034.11 1209.43 L1034.7 1209.43 L1035.28 1209.43 L1035.87 1209.43 L1036.46 1209.43 L1037.04 1209.43 L1037.63 1209.43 L1038.22 1209.43 L1038.8 1209.43 L1039.39 1209.43 L1039.98 1209.43 L1040.56 1209.43 L1041.15 1209.43 L1041.73 1209.43 L1042.32 1209.43 L1042.91 1209.43 L1043.49 1209.43 L1044.08 1209.43 L1044.67 1209.43 L1045.25 1209.43 L1045.84 1209.43 L1046.43 1209.43 L1047.01 1209.43 L1047.6 1209.43 L1048.19 1209.43 L1048.77 1209.43 L1049.36 1209.43 L1049.94 1209.43 L1050.53 1209.43 L1051.12 1209.43 L1051.7 1209.43 L1052.29 1209.43 L1052.88 1209.43 L1053.46 1209.43 L1054.05 1209.43 L1054.64 1209.43 L1055.22 1209.43 L1055.81 1209.43 L1056.39 1209.43 L1056.98 1209.43 L1057.57 1209.43 L1058.15 1209.43 L1058.74 1209.43 L1059.33 1209.43 L1059.91 1209.43 L1060.5 1209.43 L1061.09 1209.43 L1061.67 1209.43 L1062.26 1209.43 L1062.85 1209.43 L1063.43 1209.43 L1064.02 1209.43 L1064.6 1209.43 L1065.19 1209.43 L1065.78 1209.43 L1066.36 1209.43 L1066.95 1209.43 L1067.54 1209.43 L1068.12 1209.43 L1068.71 1209.43 L1069.3 1209.43 L1069.88 1209.43 L1070.47 1209.43 L1071.06 1209.43 L1071.64 1209.43 L1072.23 1209.43 L1072.81 1209.43 L1073.4 1209.43 L1073.99 1209.43 L1074.57 1209.43 L1075.16 1209.43 L1075.75 1209.43 L1076.33 1209.43 L1076.92 1209.43 L1077.51 1209.43 L1078.09 1209.43 L1078.68 1209.43 L1079.26 1209.43 L1079.85 1209.43 L1080.44 1209.43 L1081.02 1209.43 L1081.61 1209.43 L1082.2 1209.43 L1082.78 1209.43 L1083.37 1209.43 L1083.96 1209.43 L1084.54 1209.43 L1085.13 1209.43 L1085.72 1209.43 L1086.3 1209.43 L1086.89 1209.43 L1087.47 1209.43 L1088.06 1209.43 L1088.65 1209.43 L1089.23 1209.43 L1089.82 1209.43 L1090.41 1209.43 L1090.99 1209.43 L1091.58 1209.43 L1092.17 1209.43 L1092.75 1209.43 L1093.34 1209.43 L1093.93 1209.43 L1094.51 1209.43 L1095.1 1209.43 L1095.68 1209.43 L1096.27 1209.43 L1096.86 1209.43 L1097.44 1209.43 L1098.03 1209.43 L1098.62 1209.43 L1099.2 1209.43 L1099.79 1209.43 L1100.38 1209.43 L1100.96 1209.43 L1101.55 1209.43 L1102.14 1209.43 L1102.72 1209.43 L1103.31 1209.43 L1103.89 1209.43 L1104.48 1209.43 L1105.07 1209.43 L1105.65 1209.43 L1106.24 1209.43 L1106.83 1209.43 L1107.41 1209.43 L1108 1209.43 L1108.59 1209.43 L1109.17 1209.43 L1109.76 1209.43 L1110.34 1209.43 L1110.93 1209.43 L1111.52 1209.43 L1112.1 1209.43 L1112.69 1209.43 L1113.28 1209.43 L1113.86 1209.43 L1114.45 1209.43 L1115.04 1209.43 L1115.62 1209.43 L1116.21 1209.43 L1116.8 1209.43 L1117.38 1209.43 L1117.97 1209.43 L1118.55 1209.43 L1119.14 1209.43 L1119.73 1209.43 L1120.31 1209.43 L1120.9 1209.43 L1121.49 1209.43 L1122.07 1209.43 L1122.66 1209.43 L1123.25 1209.43 L1123.83 1209.43 L1124.42 1209.43 L1125.01 1209.43 L1125.59 1209.43 L1126.18 1209.43 L1126.76 1209.43 L1127.35 1209.43 L1127.94 1209.43 L1128.52 1209.43 L1129.11 1209.43 L1129.7 1209.43 L1130.28 1209.43 L1130.87 1209.43 L1131.46 1209.43 L1132.04 1209.43 L1132.63 1209.43 L1133.21 1209.43 L1133.8 1209.43 L1134.39 1209.43 L1134.97 1209.43 L1135.56 1209.43 L1136.15 1209.43 L1136.73 1209.43 L1137.32 1209.43 L1137.91 1209.43 L1138.49 1209.43 L1139.08 1209.43 L1139.67 1209.43 L1140.25 1209.43 L1140.84 1209.43 L1141.42 1209.43 L1142.01 1209.43 L1142.6 1209.43 L1143.18 1209.43 L1143.77 1209.43 L1144.36 1209.43 L1144.94 1209.43 L1145.53 1209.43 L1146.12 1209.43 L1146.7 1209.43 L1147.29 1209.43 L1147.88 1209.43 L1148.46 1209.43 L1149.05 1209.43 L1149.63 1209.43 L1150.22 1209.43 L1150.81 1209.43 L1151.39 1209.43 L1151.98 1209.43 L1152.57 1209.43 L1153.15 1209.43 L1153.74 1209.43 L1154.33 1209.43 L1154.91 1209.43 L1155.5 1209.43 L1156.09 1209.43 L1156.67 1209.43 L1157.26 1209.43 L1157.84 1209.43 L1158.43 1209.43 L1159.02 1209.43 L1159.6 1209.43 L1160.19 1209.43 L1160.78 1209.43 L1161.36 1209.43 L1161.95 1209.43 L1162.54 1209.43 L1163.12 1209.43 L1163.71 1209.43 L1164.29 1209.43 L1164.88 1209.43 L1165.47 1209.43 L1166.05 1209.43 L1166.64 1209.43 L1167.23 1209.43 L1167.81 1209.43 L1168.4 1209.43 L1168.99 1209.43 L1169.57 1209.43 L1170.16 1209.43 L1170.75 1209.43 L1171.33 1209.43 L1171.92 1209.43 L1172.5 1209.43 L1173.09 1209.43 L1173.68 1209.43 L1174.26 1209.43 L1174.85 1209.43 L1175.44 1209.43 L1176.02 1209.43 L1176.61 1209.43 L1177.2 1209.43 L1177.78 1209.43 L1178.37 1209.43 L1178.96 1209.43 L1179.54 1209.43 L1180.13 1209.43 L1180.71 1209.43 L1181.3 1209.43 L1181.89 1209.43 L1182.47 1209.43 L1183.06 1209.43 L1183.65 1209.43 L1184.23 1209.43 L1184.82 1209.43 L1185.41 1209.43 L1185.99 1209.43 L1186.58 1209.43 L1187.16 1209.43 L1187.75 1209.43 L1188.34 1209.43 L1188.92 1209.43 L1189.51 1209.43 L1190.1 1209.43 L1190.68 1209.43 L1191.27 1209.43 L1191.86 1209.43 L1192.44 1209.43 L1193.03 1209.43 L1193.62 1209.43 L1194.2 1209.43 L1194.79 1209.43 L1195.37 1209.43 L1195.96 1209.43 L1196.55 1209.43 L1197.13 1209.43 L1197.72 1209.43 L1198.31 1209.43 L1198.89 1209.43 L1199.48 1209.43 L1200.07 1209.43 L1200.65 1209.43 L1201.24 1209.43 L1201.83 1209.43 L1202.41 1209.43 L1203 1209.43 L1203.58 1209.43 L1204.17 1209.43 L1204.76 1209.43 L1205.34 1209.43 L1205.93 1209.43 L1206.52 1209.43 L1207.1 1209.43 L1207.69 1209.43 L1208.28 1209.43 L1208.86 1209.43 L1209.45 1209.43 L1210.03 1209.43 L1210.62 1209.43 L1211.21 1209.43 L1211.79 1209.43 L1212.38 1209.43 L1212.97 1209.43 L1213.55 1209.43 L1214.14 1209.43 L1214.73 1209.43 L1215.31 1209.43 L1215.9 1209.43 L1216.49 1209.43 L1217.07 1209.43 L1217.66 1209.43 L1218.24 1209.43 L1218.83 1209.43 L1219.42 1209.43 L1220 1209.43 L1220.59 1209.43 L1221.18 1209.43 L1221.76 1209.43 L1222.35 1209.43 L1222.94 1209.43 L1223.52 1209.43 L1224.11 1209.43 L1224.7 1209.43 L1225.28 1209.43 L1225.87 1209.43 L1226.45 1209.43 L1227.04 1209.43 L1227.63 1209.43 L1228.21 1209.43 L1228.8 1209.43 L1229.39 1209.43 L1229.97 1209.43 L1230.56 1209.43 L1231.15 1209.43 L1231.73 1209.43 L1232.32 1209.43 L1232.91 1209.43 L1233.49 1209.43 L1234.08 1209.43 L1234.66 1209.43 L1235.25 1209.43 L1235.84 1209.43 L1236.42 1209.43 L1237.01 1209.43 L1237.6 1209.43 L1238.18 1209.43 L1238.77 1209.43 L1239.36 1209.43 L1239.94 1209.43 L1240.53 1209.43 L1241.11 1209.43 L1241.7 1209.43 L1242.29 1209.43 L1242.87 1209.43 L1243.46 1209.43 L1244.05 1209.43 L1244.63 1209.43 L1245.22 1209.43 L1245.81 1209.43 L1246.39 1209.43 L1246.98 1209.43 L1247.57 1209.43 L1248.15 1209.43 L1248.74 1209.43 L1249.32 1209.43 L1249.91 1209.43 L1250.5 1209.43 L1251.08 1209.43 L1251.67 1209.43 L1252.26 1209.43 L1252.84 1209.43 L1253.43 1209.43 L1254.02 1209.43 L1254.6 1209.43 L1255.19 1209.43 L1255.78 1209.43 L1256.36 1209.43 L1256.95 1209.43 L1257.53 1209.43 L1258.12 1209.43 L1258.71 1209.43 L1259.29 1209.43 L1259.88 1209.43 L1260.47 1209.43 L1261.05 1209.43 L1261.64 1209.43 L1262.23 1209.43 L1262.81 1209.43 L1263.4 1209.43 L1263.98 1209.43 L1264.57 1209.43 L1265.16 1209.43 L1265.74 1209.43 L1266.33 1209.43 L1266.92 1209.43 L1267.5 1209.43 L1268.09 1209.43 L1268.68 1209.43 L1269.26 1209.43 L1269.85 1209.43 L1270.44 1209.43 L1271.02 1209.43 L1271.61 1209.43 L1272.19 1209.43 L1272.78 1209.43 L1273.37 1209.43 L1273.95 1209.43 L1274.54 1209.43 L1275.13 1209.43 L1275.71 1209.43 L1276.3 1209.43 L1276.89 1209.43 L1277.47 1209.43 L1278.06 1209.43 L1278.65 1209.43 L1279.23 1209.43 L1279.82 1209.43 L1280.4 1209.43 L1280.99 1209.43 L1281.58 1209.43 L1282.16 1209.43 L1282.75 1209.43 L1283.34 1209.43 L1283.92 1209.43 L1284.51 1209.43 L1285.1 1209.43 L1285.68 1209.43 L1286.27 1209.43 L1286.86 1209.43 L1287.44 1209.43 L1288.03 1209.43 L1288.61 1209.43 L1289.2 1209.43 L1289.79 1209.43 L1290.37 1209.43 L1290.96 1209.43 L1291.55 1209.43 L1292.13 1209.43 L1292.72 1209.43 L1293.31 1209.43 L1293.89 1209.43 L1294.48 1209.43 L1295.06 1209.43 L1295.65 1209.43 L1296.24 1209.43 L1296.82 1209.43 L1297.41 1209.43 L1298 1209.43 L1298.58 1209.43 L1299.17 1209.43 L1299.76 1209.43 L1300.34 1209.43 L1300.93 1209.43 L1301.52 1209.43 L1302.1 1209.43 L1302.69 1209.43 L1303.27 1209.43 L1303.86 1209.43 L1304.45 1209.43 L1305.03 1209.43 L1305.62 1209.43 L1306.21 1209.43 L1306.79 1209.43 L1307.38 1209.43 L1307.97 1209.43 L1308.55 1209.43 L1309.14 1209.43 L1309.73 1209.43 L1310.31 1209.43 L1310.9 1209.43 L1311.48 1209.43 L1312.07 1209.43 L1312.66 1209.43 L1313.24 1209.43 L1313.83 1209.43 L1314.42 1209.43 L1315 1209.43 L1315.59 1209.43 L1316.18 1209.43 L1316.76 1209.43 L1317.35 1209.43 L1317.93 1209.43 L1318.52 1209.43 L1319.11 1209.43 L1319.69 1209.43 L1320.28 1209.43 L1320.87 1209.43 L1321.45 1209.43 L1322.04 1209.43 L1322.63 1209.43 L1323.21 1209.43 L1323.8 1209.43 L1324.39 1209.43 L1324.97 1209.43 L1325.56 1209.43 L1326.14 1209.43 L1326.73 1209.43 L1327.32 1209.43 L1327.9 1209.43 L1328.49 1209.43 L1329.08 1209.43 L1329.66 1209.43 L1330.25 1209.43 L1330.84 1209.43 L1331.42 1209.43 L1332.01 1209.43 L1332.6 1209.43 L1333.18 1209.43 L1333.77 1209.43 L1334.35 1209.43 L1334.94 1209.43 L1335.53 1209.43 L1336.11 1209.43 L1336.7 1209.43 L1337.29 1209.43 L1337.87 1209.43 L1338.46 1209.43 L1339.05 1209.43 L1339.63 1209.43 L1340.22 1209.43 L1340.8 1209.43 L1341.39 1209.43 L1341.98 1209.43 L1342.56 1209.43 L1343.15 1209.43 L1343.74 1209.43 L1344.32 1209.43 L1344.91 1209.43 L1345.5 1209.43 L1346.08 1209.43 L1346.67 1209.43 L1347.26 1209.43 L1347.84 1209.43 L1348.43 1209.43 L1349.01 1209.43 L1349.6 1209.43 L1350.19 1209.43 L1350.77 1209.43 L1351.36 1209.43 L1351.95 1209.43 L1352.53 1209.43 L1353.12 1209.43 L1353.71 1209.43 L1354.29 1209.43 L1354.88 1209.43 L1355.47 1209.43 L1356.05 1209.43 L1356.64 1209.43 L1357.22 1209.43 L1357.81 1209.43 L1358.4 1209.43 L1358.98 1209.43 L1359.57 1209.43 L1360.16 1209.43 L1360.74 1209.43 L1361.33 1209.43 L1361.92 1209.43 L1362.5 1209.43 L1363.09 1209.43 L1363.68 1209.43 L1364.26 1209.43 L1364.85 1209.43 L1365.43 1209.43 L1366.02 1209.43 L1366.61 1209.43 L1367.19 1209.43 L1367.78 1209.43 L1368.37 1209.43 L1368.95 1209.43 L1369.54 1209.43 L1370.13 1209.43 L1370.71 1209.43 L1371.3 1209.43 L1371.88 1209.43 L1372.47 1209.43 L1373.06 1209.43 L1373.64 1209.43 L1374.23 1209.43 L1374.82 1209.43 L1375.4 1209.43 L1375.99 1209.43 L1376.58 1209.43 L1377.16 1209.43 L1377.75 1209.43 L1378.34 1209.43 L1378.92 1209.43 L1379.51 1209.43 L1380.09 1209.43 L1380.68 1209.43 L1381.27 1209.43 L1381.85 1209.43 L1382.44 1209.43 L1383.03 1209.43 L1383.61 1209.43 L1384.2 1209.43 L1384.79 1209.43 L1385.37 1209.43 L1385.96 1209.43 L1386.55 1209.43 L1387.13 1209.43 L1387.72 1209.43 L1388.3 1209.43 L1388.89 1209.43 L1389.48 1209.43 L1390.06 1209.43 L1390.65 1209.43 L1391.24 1209.43 L1391.82 1209.43 L1392.41 1209.43 L1393 1209.43 L1393.58 1209.43 L1394.17 1209.43 L1394.75 1209.43 L1395.34 1209.43 L1395.93 1209.43 L1396.51 1209.43 L1397.1 1209.43 L1397.69 1209.43 L1398.27 1209.43 L1398.86 1209.43 L1399.45 1209.43 L1400.03 1209.43 L1400.62 1209.43 L1401.21 1209.43 L1401.79 1209.43 L1402.38 1209.43 L1402.96 1209.43 L1403.55 1209.43 L1404.14 1209.43 L1404.72 1209.43 L1405.31 1209.43 L1405.9 1209.43 L1406.48 1209.43 L1407.07 1209.43 L1407.66 1209.43 L1408.24 1209.43 L1408.83 1209.43 L1409.42 1209.43 L1410 1209.43 L1410.59 1209.43 L1411.17 1209.43 L1411.76 1209.43 L1412.35 1209.43 L1412.93 1209.43 L1413.52 1209.43 L1414.11 1209.43 L1414.69 1209.43 L1415.28 1209.43 L1415.87 1209.43 L1416.45 1209.43 L1417.04 1209.43 L1417.63 1209.43 L1418.21 1209.43 L1418.8 1209.43 L1419.38 1209.43 L1419.97 1209.43 L1420.56 1209.43 L1421.14 1209.43 L1421.73 1209.43 L1422.32 1209.43 L1422.9 1209.43 L1423.49 1209.43 L1424.08 1209.43 L1424.66 1209.43 L1425.25 1209.43 L1425.83 1209.43 L1426.42 1209.43 L1427.01 1209.43 L1427.59 1209.43 L1428.18 1209.43 L1428.77 1209.43 L1429.35 1209.43 L1429.94 1209.43 L1430.53 1209.43 L1431.11 1209.43 L1431.7 1209.43 L1432.29 1209.43 L1432.87 1209.43 L1433.46 1209.43 L1434.04 1209.43 L1434.63 1209.43 L1435.22 1209.43 L1435.8 1209.43 L1436.39 1209.43 L1436.98 1209.43 L1437.56 1209.43 L1438.15 1209.43 L1438.74 1209.43 L1439.32 1209.43 L1439.91 1209.43 L1440.5 1209.43 L1441.08 1209.43 L1441.67 1209.43 L1442.25 1209.43 L1442.84 1209.43 L1443.43 1209.43 L1444.01 1209.43 L1444.6 1209.43 L1445.19 1209.43 L1445.77 1209.43 L1446.36 1209.43 L1446.95 1209.43 L1447.53 1209.43 L1448.12 1209.43 L1448.7 1209.43 L1449.29 1209.43 L1449.88 1209.43 L1450.46 1209.43 L1451.05 1209.43 L1451.64 1209.43 L1452.22 1209.43 L1452.81 1209.43 L1453.4 1209.43 L1453.98 1209.43 L1454.57 1209.43 L1455.16 1209.43 L1455.74 1209.43 L1456.33 1209.43 L1456.91 1209.43 L1457.5 1209.43 L1458.09 1209.43 L1458.67 1209.43 L1459.26 1209.43 L1459.85 1209.43 L1460.43 1209.43 L1461.02 1209.43 L1461.61 1209.43 L1462.19 1209.43 L1462.78 1209.43 L1463.37 1209.43 L1463.95 1209.43 L1464.54 1209.43 L1465.12 1209.43 L1465.71 1209.43 L1466.3 1209.43 L1466.88 1209.43 L1467.47 1209.43 L1468.06 1209.43 L1468.64 1209.43 L1469.23 1209.43 L1469.82 1209.43 L1470.4 1209.43 L1470.99 1209.43 L1471.57 1209.43 L1472.16 1209.43 L1472.75 1209.43 L1473.33 1209.43 L1473.92 1209.43 L1474.51 1209.43 L1475.09 1209.43 L1475.68 1209.43 L1476.27 1209.43 L1476.85 1209.43 L1477.44 1209.43 L1478.03 1209.43 L1478.61 1209.43 L1479.2 1209.43 L1479.78 1209.43 L1480.37 1209.43 L1480.96 1209.43 L1481.54 1209.43 L1482.13 1209.43 L1482.72 1209.43 L1483.3 1209.43 L1483.89 1209.43 L1484.48 1209.43 L1485.06 1209.43 L1485.65 1209.43 L1486.24 1209.43 L1486.82 1209.43 L1487.41 1209.43 L1487.99 1209.43 L1488.58 1209.43 L1489.17 1209.43 L1489.75 1209.43 L1490.34 1209.43 L1490.93 1209.43 L1491.51 1209.43 L1492.1 1209.43 L1492.69 1209.43 L1493.27 1209.43 L1493.86 1209.43 L1494.45 1209.43 L1495.03 1209.43 L1495.62 1209.43 L1496.2 1209.43 L1496.79 1209.43 L1497.38 1209.43 L1497.96 1209.43 L1498.55 1209.43 L1499.14 1209.43 L1499.72 1209.43 L1500.31 1209.43 L1500.9 1209.43 L1501.48 1209.43 L1502.07 1209.43 L1502.65 1209.43 L1503.24 1209.43 L1503.83 1209.43 L1504.41 1209.43 L1505 1209.43 L1505.59 1209.43 L1506.17 1209.43 L1506.76 1209.43 L1507.35 1209.43 L1507.93 1209.43 L1508.52 1209.43 L1509.11 1209.43 L1509.69 1209.43 L1510.28 1209.43 L1510.86 1209.43 L1511.45 1209.43 L1512.04 1209.43 L1512.62 1209.43 L1513.21 1209.43 L1513.8 1209.43 L1514.38 1209.43 L1514.97 1209.43 L1515.56 1209.43 L1516.14 1209.43 L1516.73 1209.43 L1517.32 1209.43 L1517.9 1209.43 L1518.49 1209.43 L1519.07 1209.43 L1519.66 1209.43 L1520.25 1209.43 L1520.83 1209.43 L1521.42 1209.43 L1522.01 1209.43 L1522.59 1209.43 L1523.18 1209.43 L1523.77 1209.43 L1524.35 1209.43 L1524.94 1209.43 L1525.52 1209.43 L1526.11 1209.43 L1526.7 1209.43 L1527.28 1209.43 L1527.87 1209.43 L1528.46 1209.43 L1529.04 1209.43 L1529.63 1209.43 L1530.22 1209.43 L1530.8 1209.43 L1531.39 1209.43 L1531.98 1209.43 L1532.56 1209.43 L1533.15 1209.43 L1533.73 1209.43 L1534.32 1209.43 L1534.91 1209.43 L1535.49 1209.43 L1536.08 1209.43 L1536.67 1209.43 L1537.25 1209.43 L1537.84 1209.43 L1538.43 1209.43 L1539.01 1209.43 L1539.6 1209.43 L1540.19 1209.43 L1540.77 1209.43 L1541.36 1209.43 L1541.94 1209.43 L1542.53 1209.43 L1543.12 1209.43 L1543.7 1209.43 L1544.29 1209.43 L1544.88 1209.43 L1545.46 1209.43 L1546.05 1209.43 L1546.64 1209.43 L1547.22 1209.43 L1547.81 1209.43 L1548.4 1209.43 L1548.98 1209.43 L1549.57 1209.43 L1550.15 1209.43 L1550.74 1209.43 L1551.33 1209.43 L1551.91 1209.43 L1552.5 1209.43 L1553.09 1209.43 L1553.67 1209.43 L1554.26 1209.43 L1554.85 1209.43 L1555.43 1209.43 L1556.02 1209.43 L1556.6 1209.43 L1557.19 1209.43 L1557.78 1209.43 L1558.36 1209.43 L1558.95 1209.43 L1559.54 1209.43 L1560.12 1209.43 L1560.71 1209.43 L1561.3 1209.43 L1561.88 1209.43 L1562.47 1209.43 L1563.06 1209.43 L1563.64 1209.43 L1564.23 1209.43 L1564.81 1209.43 L1565.4 1209.43 L1565.99 1209.43 L1566.57 1209.43 L1567.16 1209.43 L1567.75 1209.43 L1568.33 1209.43 L1568.92 1209.43 L1569.51 1209.43 L1570.09 1209.43 L1570.68 1209.43 L1571.27 1209.43 L1571.85 1209.43 L1572.44 1209.43 L1573.02 1209.43 L1573.61 1209.43 L1574.2 1209.43 L1574.78 1209.43 L1575.37 1209.43 L1575.96 1209.43 L1576.54 1209.43 L1577.13 1209.43 L1577.72 1209.43 L1578.3 1209.43 L1578.89 1209.43 L1579.47 1209.43 L1580.06 1209.43 L1580.65 1209.43 L1581.23 1209.43 L1581.82 1209.43 L1582.41 1209.43 L1582.99 1209.43 L1583.58 1209.43 L1584.17 1209.43 L1584.75 1209.43 L1585.34 1209.43 L1585.93 1209.43 L1586.51 1209.43 L1587.1 1209.43 L1587.68 1209.43 L1588.27 1209.43 L1588.86 1209.43 L1589.44 1209.43 L1590.03 1209.43 L1590.62 1209.43 L1591.2 1209.43 L1591.79 1209.43 L1592.38 1209.43 L1592.96 1209.43 L1593.55 1209.43 L1594.14 1209.43 L1594.72 1209.43 L1595.31 1209.43 L1595.89 1209.43 L1596.48 1209.43 L1597.07 1209.43 L1597.65 1209.43 L1598.24 1209.43 L1598.83 1209.43 L1599.41 1209.43 L1600 1209.43 L1600.59 1209.43 L1601.17 1209.43 L1601.76 1209.43 L1602.34 1209.43 L1602.93 1209.43 L1603.52 1209.43 L1604.1 1209.43 L1604.69 1209.43 L1605.28 1209.43 L1605.86 1209.43 L1606.45 1209.43 L1607.04 1209.43 L1607.62 1209.43 L1608.21 1209.43 L1608.8 1209.43 L1609.38 1209.43 L1609.97 1209.43 L1610.55 1209.43 L1611.14 1209.43 L1611.73 1209.43 L1612.31 1209.43 L1612.9 1209.43 L1613.49 1209.43 L1614.07 1209.43 L1614.66 1209.43 L1615.25 1209.43 L1615.83 1209.43 L1616.42 1209.43 L1617.01 1209.43 L1617.59 1209.43 L1618.18 1209.43 L1618.76 1209.43 L1619.35 1209.43 L1619.94 1209.43 L1620.52 1209.43 L1621.11 1209.43 L1621.7 1209.43 L1622.28 1209.43 L1622.87 1209.43 L1623.46 1209.43 L1624.04 1209.43 L1624.63 1209.43 L1625.22 1209.43 L1625.8 1209.43 L1626.39 1209.43 L1626.97 1209.43 L1627.56 1209.43 L1628.15 1209.43 L1628.73 1209.43 L1629.32 1209.43 L1629.91 1209.43 L1630.49 1209.43 L1631.08 1209.43 L1631.67 1209.43 L1632.25 1209.43 L1632.84 1209.43 L1633.42 1209.43 L1634.01 1209.43 L1634.6 1209.43 L1635.18 1209.43 L1635.77 1209.43 L1636.36 1209.43 L1636.94 1209.43 L1637.53 1209.43 L1638.12 1209.43 L1638.7 1209.43 L1639.29 1209.43 L1639.88 1209.43 L1640.46 1209.43 L1641.05 1209.43 L1641.63 1209.43 L1642.22 1209.43 L1642.81 1209.43 L1643.39 1209.43 L1643.98 1209.43 L1644.57 1209.43 L1645.15 1209.43 L1645.74 1209.43 L1646.33 1209.43 L1646.91 1209.43 L1647.5 1209.43 L1648.09 1209.43 L1648.67 1209.43 L1649.26 1209.43 L1649.84 1209.43 L1650.43 1209.43 L1651.02 1209.43 L1651.6 1209.43 L1652.19 1209.43 L1652.78 1209.43 L1653.36 1209.43 L1653.95 1209.43 L1654.54 1209.43 L1655.12 1209.43 L1655.71 1209.43 L1656.29 1209.43 L1656.88 1209.43 L1657.47 1209.43 L1658.05 1209.43 L1658.64 1209.43 L1659.23 1209.43 L1659.81 1209.43 L1660.4 1209.43 L1660.99 1209.43 L1661.57 1209.43 L1662.16 1209.43 L1662.75 1209.43 L1663.33 1209.43 L1663.92 1209.43 L1664.5 1209.43 L1665.09 1209.43 L1665.68 1209.43 L1666.26 1209.43 L1666.85 1209.43 L1667.44 1209.43 L1668.02 1209.43 L1668.61 1209.43 L1669.2 1209.43 L1669.78 1209.43 L1670.37 1209.43 L1670.96 1209.43 L1671.54 1209.43 L1672.13 1209.43 L1672.71 1209.43 L1673.3 1209.43 L1673.89 1209.43 L1674.47 1209.43 L1675.06 1209.43 L1675.65 1209.43 L1676.23 1209.43 L1676.82 1209.43 L1677.41 1209.43 L1677.99 1209.43 L1678.58 1209.43 L1679.17 1209.43 L1679.75 1209.43 L1680.34 1209.43 L1680.92 1209.43 L1681.51 1209.43 L1682.1 1209.43 L1682.68 1209.43 L1683.27 1209.43 L1683.86 1209.43 L1684.44 1209.43 L1685.03 1209.43 L1685.62 1209.43 L1686.2 1209.43 L1686.79 1209.43 L1687.37 1209.43 L1687.96 1209.43 L1688.55 1209.43 L1689.13 1209.43 L1689.72 1209.43 L1690.31 1209.43 L1690.89 1209.43 L1691.48 1209.43 L1692.07 1209.43 L1692.65 1209.43 L1693.24 1209.43 L1693.83 1209.43 L1694.41 1209.43 L1695 1209.43 L1695.58 1209.43 L1696.17 1209.43 L1696.76 1209.43 L1697.34 1209.43 L1697.93 1209.43 L1698.52 1209.43 L1699.1 1209.43 L1699.69 1209.43 L1700.28 1209.43 L1700.86 1209.43 L1701.45 1209.43 L1702.04 1209.43 L1702.62 1209.43 L1703.21 1209.43 L1703.79 1209.43 L1704.38 1209.43 L1704.97 1209.43 L1705.55 1209.43 L1706.14 1209.43 L1706.73 1209.43 L1707.31 1209.43 L1707.9 1209.43 L1708.49 1209.43 L1709.07 1209.43 L1709.66 1209.43 L1710.24 1209.43 L1710.83 1209.43 L1711.42 1209.43 L1712 1209.43 L1712.59 1209.43 L1713.18 1209.43 L1713.76 1209.43 L1714.35 1209.43 L1714.94 1209.43 L1715.52 1209.43 L1716.11 1209.43 L1716.7 1209.43 L1717.28 1209.43 L1717.87 1209.43 L1718.45 1209.43 L1719.04 1209.43 L1719.63 1209.43 L1720.21 1209.43 L1720.8 1209.43 L1721.39 1209.43 L1721.97 1209.43 L1722.56 1209.43 L1723.15 1209.43 L1723.73 1209.43 L1724.32 1209.43 L1724.91 1209.43 L1725.49 1209.43 L1726.08 1209.43 L1726.66 1209.43 L1727.25 1209.43 L1727.84 1209.43 L1728.42 1209.43 L1729.01 1209.43 L1729.6 1209.43 L1730.18 1209.43 L1730.77 1209.43 L1731.36 1209.43 L1731.94 1209.43 L1732.53 1209.43 L1733.11 1209.43 L1733.7 1209.43 L1734.29 1209.43 L1734.87 1209.43 L1735.46 1209.43 L1736.05 1209.43 L1736.63 1209.43 L1737.22 1209.43 L1737.81 1209.43 L1738.39 1209.43 L1738.98 1209.43 L1739.57 1209.43 L1740.15 1209.43 L1740.74 1209.43 L1741.32 1209.43 L1741.91 1209.43 L1742.5 1209.43 L1743.08 1209.43 L1743.67 1209.43 L1744.26 1209.43 L1744.84 1209.43 L1745.43 1209.43 L1746.02 1209.43 L1746.6 1209.43 L1747.19 1209.43 L1747.78 1209.43 L1748.36 1209.43 L1748.95 1209.43 L1749.53 1209.43 L1750.12 1209.43 L1750.71 1209.43 L1751.29 1209.43 L1751.88 1209.43 L1752.47 1209.43 L1753.05 1209.43 L1753.64 1209.43 L1754.23 1209.43 L1754.81 1209.43 L1755.4 1209.43 L1755.99 1209.43 L1756.57 1209.43 L1757.16 1209.43 L1757.74 1209.43 L1758.33 1209.43 L1758.92 1209.43 L1759.5 1209.43 L1760.09 1209.43 L1760.68 1209.43 L1761.26 1209.43 L1761.85 1209.43 L1762.44 1209.43 L1763.02 1209.43 L1763.61 1209.43 L1764.19 1209.43 L1764.78 1209.43 L1765.37 1209.43 L1765.95 1209.43 L1766.54 1209.43 L1767.13 1209.43 L1767.71 1209.43 L1768.3 1209.43 L1768.89 1209.43 L1769.47 1209.43 L1770.06 1209.43 L1770.65 1209.43 L1771.23 1209.43 L1771.82 1209.43 L1772.4 1209.43 L1772.99 1209.43 L1773.58 1209.43 L1774.16 1209.43 L1774.75 1209.43 L1775.34 1209.43 L1775.92 1209.43 L1776.51 1209.43 L1777.1 1209.43 L1777.68 1209.43 L1778.27 1209.43 L1778.86 1209.43 L1779.44 1209.43 L1780.03 1209.43 L1780.61 1209.43 L1781.2 1209.43 L1781.79 1209.43 L1782.37 1209.43 L1782.96 1209.43 L1783.55 1209.43 L1784.13 1209.43 L1784.72 1209.43 L1785.31 1209.43 L1785.89 1209.43 L1786.48 1209.43 L1787.06 1209.43 L1787.65 1209.43 L1788.24 1209.43 L1788.82 1209.43 L1789.41 1209.43 L1790 1209.43 L1790.58 1209.43 L1791.17 1209.43 L1791.76 1209.43 L1792.34 1209.43 L1792.93 1209.43 L1793.52 1209.43 L1794.1 1209.43 L1794.69 1209.43 L1795.27 1209.43 L1795.86 1209.43 L1796.45 1209.43 L1797.03 1209.43 L1797.62 1209.43 L1798.21 1209.43 L1798.79 1209.43 L1799.38 1209.43 L1799.97 1209.43 L1800.55 1209.43 L1801.14 1209.43 L1801.73 1209.43 L1802.31 1209.43 L1802.9 1209.43 L1803.48 1209.43 L1804.07 1209.43 L1804.66 1209.43 L1805.24 1209.43 L1805.83 1209.43 L1806.42 1209.43 L1807 1209.43 L1807.59 1209.43 L1808.18 1209.43 L1808.76 1209.43 L1809.35 1209.43 L1809.94 1209.43 L1810.52 1209.43 L1811.11 1209.43 L1811.69 1209.43 L1812.28 1209.43 L1812.87 1209.43 L1813.45 1209.43 L1814.04 1209.43 L1814.63 1209.43 L1815.21 1209.43 L1815.8 1209.43 L1816.39 1209.43 L1816.97 1209.43 L1817.56 1209.43 L1818.14 1209.43 L1818.73 1209.43 L1819.32 1209.43 L1819.9 1209.43 L1820.49 1209.43 L1821.08 1209.43 L1821.66 1209.43 L1822.25 1209.43 L1822.84 1209.43 L1823.42 1209.43 L1824.01 1209.43 L1824.6 1209.43 L1825.18 1209.43 L1825.77 1209.43 L1826.35 1209.43 L1826.94 1209.43 L1827.53 1209.43 L1828.11 1209.43 L1828.7 1209.43 L1829.29 1209.43 L1829.87 1209.43 L1830.46 1209.43 L1831.05 1209.43 L1831.63 1209.43 L1832.22 1209.43 L1832.81 1209.43 L1833.39 1209.43 L1833.98 1209.43 L1834.56 1209.43 L1835.15 1209.43 L1835.74 1209.43 L1836.32 1209.43 L1836.91 1209.43 L1837.5 1209.43 L1838.08 1209.43 L1838.67 1209.43 L1839.26 1209.43 L1839.84 1209.43 L1840.43 1209.43 L1841.01 1209.43 L1841.6 1209.43 L1842.19 1209.43 L1842.77 1209.43 L1843.36 1209.43 L1843.95 1209.43 L1844.53 1209.43 L1845.12 1209.43 L1845.71 1209.43 L1846.29 1209.43 L1846.88 1209.43 L1847.47 1209.43 L1848.05 1209.43 L1848.64 1209.43 L1849.22 1209.43 L1849.81 1209.43 L1850.4 1209.43 L1850.98 1209.43 L1851.57 1209.43 L1852.16 1209.43 L1852.74 1209.43 L1853.33 1209.43 L1853.92 1209.43 L1854.5 1209.43 L1855.09 1209.43 L1855.68 1209.43 L1856.26 1209.43 L1856.85 1209.43 L1857.43 1209.43 L1858.02 1209.43 L1858.61 1209.43 L1859.19 1209.43 L1859.78 1209.43 L1860.37 1209.43 L1860.95 1209.43 L1861.54 1209.43 L1862.13 1209.43 L1862.71 1209.43 L1863.3 1209.43 L1863.88 1209.43 L1864.47 1209.43 L1865.06 1209.43 L1865.64 1209.43 L1866.23 1209.43 L1866.82 1209.43 L1867.4 1209.43 L1867.99 1209.43 L1868.58 1209.43 L1869.16 1209.43 L1869.75 1209.43 L1870.34 1209.43 L1870.92 1209.43 L1871.51 1209.43 L1872.09 1209.43 L1872.68 1209.43 L1873.27 1209.43 L1873.85 1209.43 L1874.44 1209.43 L1875.03 1209.43 L1875.61 1209.43 L1876.2 1209.43 L1876.79 1209.43 L1877.37 1209.43 L1877.96 1209.43 L1878.55 1209.43 L1879.13 1209.43 L1879.72 1209.43 L1880.3 1209.43 L1880.89 1209.43 L1881.48 1209.43 L1882.06 1209.43 L1882.65 1209.43 L1883.24 1209.43 L1883.82 1209.43 L1884.41 1209.43 L1885 1209.43 L1885.58 1209.43 L1886.17 1209.43 L1886.76 1209.43 L1887.34 1209.43 L1887.93 1209.43 L1888.51 1209.43 L1889.1 1209.43 L1889.69 1209.43 L1890.27 1209.43 L1890.86 1209.43 L1891.45 1209.43 L1892.03 1209.43 L1892.62 1209.43 L1893.21 1209.43 L1893.79 1209.43 L1894.38 1209.43 L1894.96 1209.43 L1895.55 1209.43 L1896.14 1209.43 L1896.72 1209.43 L1897.31 1209.43 L1897.9 1209.43 L1898.48 1209.43 L1899.07 1209.43 L1899.66 1209.43 L1900.24 1209.43 L1900.83 1209.43 L1901.42 1209.43 L1902 1209.43 L1902.59 1209.43 L1903.17 1209.43 L1903.76 1209.43 L1904.35 1209.43 L1904.93 1209.43 L1905.52 1209.43 L1906.11 1209.43 L1906.69 1209.43 L1907.28 1209.43 L1907.87 1209.43 L1908.45 1209.43 L1909.04 1209.43 L1909.63 1209.43 L1910.21 1209.43 L1910.8 1209.43 L1911.38 1209.43 L1911.97 1209.43 L1912.56 1209.43 L1913.14 1209.43 L1913.73 1209.43 L1914.32 1209.43 L1914.9 1209.43 L1915.49 1209.43 L1916.08 1209.43 L1916.66 1209.43 L1917.25 1209.43 L1917.83 1209.43 L1918.42 1209.43 L1919.01 1209.43 L1919.59 1209.43 L1920.18 1209.43 L1920.77 1209.43 L1921.35 1209.43 L1921.94 1209.43 L1922.53 1209.43 L1923.11 1209.43 L1923.7 1209.43 L1924.29 1209.43 L1924.87 1209.43 L1925.46 1209.43 L1926.04 1209.43 L1926.63 1209.43 L1927.22 1209.43 L1927.8 1209.43 L1928.39 1209.43 L1928.98 1209.43 L1929.56 1209.43 L1930.15 1209.43 L1930.74 1209.43 L1931.32 1209.43 L1931.91 1209.43 L1932.5 1209.43 L1933.08 1209.43 L1933.67 1209.43 L1934.25 1209.43 L1934.84 1209.43 L1935.43 1209.43 L1936.01 1209.43 L1936.6 1209.43 L1937.19 1209.43 L1937.77 1209.43 L1938.36 1209.43 L1938.95 1209.43 L1939.53 1209.43 L1940.12 1209.43 L1940.71 1209.43 L1941.29 1209.43 L1941.88 1209.43 L1942.46 1209.43 L1943.05 1209.43 L1943.64 1209.43 L1944.22 1209.43 L1944.81 1209.43 L1945.4 1209.43 L1945.98 1209.43 L1946.57 1209.43 L1947.16 1209.43 L1947.74 1209.43 L1948.33 1209.43 L1948.91 1209.43 L1949.5 1209.43 L1950.09 1209.43 L1950.67 1209.43 L1951.26 1209.43 L1951.85 1209.43 L1952.43 1209.43 L1953.02 1209.43 L1953.61 1209.43 L1954.19 1209.43 L1954.78 1209.43 L1955.37 1209.43 L1955.95 1209.43 L1956.54 1209.43 L1957.12 1209.43 L1957.71 1209.43 L1958.3 1209.43 L1958.88 1209.43 L1959.47 1209.43 L1960.06 1209.43 L1960.64 1209.43 L1961.23 1209.43 L1961.82 1209.43 L1962.4 1209.43 L1962.99 1209.43 L1963.58 1209.43 L1964.16 1209.43 L1964.75 1209.43 L1965.33 1209.43 L1965.92 1209.43 L1966.51 1209.43 L1967.09 1209.43 L1967.68 1209.43 L1968.27 1209.43 L1968.85 1209.43 L1969.44 1209.43 L1970.03 1209.43 L1970.61 1209.43 L1971.2 1209.43 L1971.78 1209.43 L1972.37 1209.43 L1972.96 1209.43 L1973.54 1209.43 L1974.13 1209.43 L1974.72 1209.43 L1975.3 1209.43 L1975.89 1209.43 L1976.48 1209.43 L1977.06 1209.43 L1977.65 1209.43 L1978.24 1209.43 L1978.82 1209.43 L1979.41 1209.43 L1979.99 1209.43 L1980.58 1209.43 L1981.17 1209.43 L1981.75 1209.43 L1982.34 1209.43 L1982.93 1209.43 L1983.51 1209.43 L1984.1 1209.43 L1984.69 1209.43 L1985.27 1209.43 L1985.86 1209.43 L1986.45 1209.43 L1987.03 1209.43 L1987.62 1209.43 L1988.2 1209.43 L1988.79 1209.43 L1989.38 1209.43 L1989.96 1209.43 L1990.55 1209.43 L1991.14 1209.43 L1991.72 1209.43 L1992.31 1209.43 L1992.9 1209.43 L1993.48 1209.43 L1994.07 1209.43 L1994.65 1209.43 L1995.24 1209.43 L1995.83 1209.43 L1996.41 1209.43 L1997 1209.43 L1997.59 1209.43 L1998.17 1209.43 L1998.76 1209.43 L1999.35 1209.43 L1999.93 1209.43 L2000.52 1209.43 L2001.11 1209.43 L2001.69 1209.43 L2002.28 1209.43 L2002.86 1209.43 L2003.45 1209.43 L2004.04 1209.43 L2004.62 1209.43 L2005.21 1209.43 L2005.8 1209.43 L2006.38 1209.43 L2006.97 1209.43 L2007.56 1209.43 L2008.14 1209.43 L2008.73 1209.43 L2009.32 1209.43 L2009.9 1209.43 L2010.49 1209.43 L2011.07 1209.43 L2011.66 1209.43 L2012.25 1209.43 L2012.83 1209.43 L2013.42 1209.43 L2014.01 1209.43 L2014.59 1209.43 L2015.18 1209.43 L2015.77 1209.43 L2016.35 1209.43 L2016.94 1209.43 L2017.53 1209.43 L2018.11 1209.43 L2018.7 1209.43 L2019.28 1209.43 L2019.87 1209.43 L2020.46 1209.43 L2021.04 1209.43 L2021.63 1209.43 L2022.22 1209.43 L2022.8 1209.43 L2023.39 1209.43 L2023.98 1209.43 L2024.56 1209.43 L2025.15 1209.43 L2025.73 1209.43 L2026.32 1209.43 L2026.91 1209.43 L2027.49 1209.43 L2028.08 1209.43 L2028.67 1209.43 L2029.25 1209.43 L2029.84 1209.43 L2030.43 1209.43 L2031.01 1209.43 L2031.6 1209.43 L2032.19 1209.43 L2032.77 1209.43 L2033.36 1209.43 L2033.94 1209.43 L2034.53 1209.43 L2035.12 1209.43 L2035.7 1209.43 L2036.29 1209.43 L2036.88 1209.43 L2037.46 1209.43 L2038.05 1209.43 L2038.64 1209.43 L2039.22 1209.43 L2039.81 1209.43 L2040.4 1209.43 L2040.98 1209.43 L2041.57 1209.43 L2042.15 1209.43 L2042.74 1209.43 L2043.33 1209.43 L2043.91 1209.43 L2044.5 1209.43 L2045.09 1209.43 L2045.67 1209.43 L2046.26 1209.43 L2046.85 1209.43 L2047.43 1209.43 L2048.02 1209.43 L2048.6 1209.43 L2049.19 1209.43 L2049.78 1209.43 L2050.36 1209.43 L2050.95 1209.43 L2051.54 1209.43 L2052.12 1209.43 L2052.71 1209.43 L2053.3 1209.43 L2053.88 1209.43 L2054.47 1209.43 L2055.06 1209.43 L2055.64 1209.43 L2056.23 1209.43 L2056.81 1209.43 L2057.4 1209.43 L2057.99 1209.43 L2058.57 1209.43 L2059.16 1209.43 L2059.75 1209.43 L2060.33 1209.43 L2060.92 1209.43 L2061.51 1209.43 L2062.09 1209.43 L2062.68 1209.43 L2063.27 1209.43 L2063.85 1209.43 L2064.44 1209.43 L2065.02 1209.43 L2065.61 1209.43 L2066.2 1209.43 L2066.78 1209.43 L2067.37 1209.43 L2067.96 1209.43 L2068.54 1209.43 L2069.13 1209.43 L2069.72 1209.43 L2070.3 1209.43 L2070.89 1209.43 L2071.48 1209.43 L2072.06 1209.43 L2072.65 1209.43 L2073.23 1209.43 L2073.82 1209.43 L2074.41 1209.43 L2074.99 1209.43 L2075.58 1209.43 L2076.17 1209.43 L2076.75 1209.43 L2077.34 1209.43 L2077.93 1209.43 L2078.51 1209.43 L2079.1 1209.43 L2079.68 1209.43 L2080.27 1209.43 L2080.86 1209.43 L2081.44 1209.43 L2082.03 1209.43 L2082.62 1209.43 L2083.2 1209.43 L2083.79 1209.43 L2084.38 1209.43 L2084.96 1209.43 L2085.55 1209.43 L2086.14 1209.43 L2086.72 1209.43 L2087.31 1209.43 L2087.89 1209.43 L2088.48 1209.43 L2089.07 1209.43 L2089.65 1209.43 L2090.24 1209.43 L2090.83 1209.43 L2091.41 1209.43 L2092 1209.43 L2092.59 1209.43 L2093.17 1209.43 L2093.76 1209.43 L2094.35 1209.43 L2094.93 1209.43 L2095.52 1209.43 L2096.1 1209.43 L2096.69 1209.43 L2097.28 1209.43 L2097.86 1209.43 L2098.45 1209.43 L2099.04 1209.43 L2099.62 1209.43 L2100.21 1209.43 L2100.8 1209.43 L2101.38 1209.43 L2101.97 1209.43 L2102.55 1209.43 L2103.14 1209.43 L2103.73 1209.43 L2104.31 1209.43 L2104.9 1209.43 L2105.49 1209.43 L2106.07 1209.43 L2106.66 1209.43 L2107.25 1209.43 L2107.83 1209.43 L2108.42 1209.43 L2109.01 1209.43 L2109.59 1209.43 L2110.18 1209.43 L2110.76 1209.43 L2111.35 1209.43 L2111.94 1209.43 L2112.52 1209.43 L2113.11 1209.43 L2113.7 1209.43 L2114.28 1209.43 L2114.87 1209.43 L2115.46 1209.43 L2116.04 1209.43 L2116.63 1209.43 L2117.22 1209.43 L2117.8 1209.43 L2118.39 1209.43 L2118.97 1209.43 L2119.56 1209.43 L2120.15 1209.43 L2120.73 1209.43 L2121.32 1209.43 L2121.91 1209.43 L2122.49 1209.43 L2123.08 1209.43 L2123.67 1209.43 L2124.25 1209.43 L2124.84 1209.43 L2125.42 1209.43 L2126.01 1209.43 L2126.6 1209.43 L2127.18 1209.43 L2127.77 1209.43 L2128.36 1209.43 L2128.94 1209.43 L2129.53 1209.43 L2130.12 1209.43 L2130.7 1209.43 L2131.29 1209.43 L2131.88 1209.43 L2132.46 1209.43 L2133.05 1209.43 L2133.63 1209.43 L2134.22 1209.43 L2134.81 1209.43 L2135.39 1209.43 L2135.98 1209.43 L2136.57 1209.43 L2137.15 1209.43 L2137.74 1209.43 L2138.33 1209.43 L2138.91 1209.43 L2139.5 1209.43 L2140.09 1209.43 L2140.67 1209.43 L2141.26 1209.43 L2141.84 1209.43 L2142.43 1209.43 L2143.02 1209.43 L2143.6 1209.43 L2144.19 1209.43 L2144.78 1209.43 L2145.36 1209.43 L2145.95 1209.43 L2146.54 1209.43 L2147.12 1209.43 L2147.71 1209.43 L2148.3 1209.43 L2148.88 1209.43 L2149.47 1209.43 L2150.05 1209.43 L2150.64 1209.43 L2151.23 1209.43 L2151.81 1209.43 L2152.4 1209.43 L2152.99 1209.43 L2153.57 1209.43 L2154.16 1209.43 L2154.75 1209.43 L2155.33 1209.43 L2155.92 1209.43 L2156.5 1209.43 L2157.09 1209.43 L2157.68 1209.43 L2158.26 1209.43 L2158.26 1209.23 L2157.68 1209.23 L2157.09 1209.23 L2156.5 1209.23 L2155.92 1209.23 L2155.33 1209.23 L2154.75 1209.23 L2154.16 1209.23 L2153.57 1209.23 L2152.99 1209.23 L2152.4 1209.23 L2151.81 1209.23 L2151.23 1209.23 L2150.64 1209.23 L2150.05 1209.23 L2149.47 1209.23 L2148.88 1209.23 L2148.3 1209.23 L2147.71 1209.23 L2147.12 1209.23 L2146.54 1209.23 L2145.95 1209.23 L2145.36 1209.23 L2144.78 1209.23 L2144.19 1209.23 L2143.6 1209.23 L2143.02 1209.23 L2142.43 1209.23 L2141.84 1209.23 L2141.26 1209.23 L2140.67 1209.23 L2140.09 1209.23 L2139.5 1209.23 L2138.91 1209.23 L2138.33 1209.23 L2137.74 1209.23 L2137.15 1209.23 L2136.57 1209.23 L2135.98 1209.23 L2135.39 1209.23 L2134.81 1209.23 L2134.22 1209.23 L2133.63 1209.23 L2133.05 1209.23 L2132.46 1209.23 L2131.88 1209.23 L2131.29 1209.23 L2130.7 1209.23 L2130.12 1209.23 L2129.53 1209.23 L2128.94 1209.23 L2128.36 1209.23 L2127.77 1209.23 L2127.18 1209.23 L2126.6 1209.23 L2126.01 1209.23 L2125.42 1209.23 L2124.84 1209.23 L2124.25 1209.23 L2123.67 1209.23 L2123.08 1209.23 L2122.49 1209.23 L2121.91 1209.23 L2121.32 1209.23 L2120.73 1209.23 L2120.15 1209.23 L2119.56 1209.23 L2118.97 1209.23 L2118.39 1209.23 L2117.8 1209.23 L2117.22 1209.23 L2116.63 1209.23 L2116.04 1209.23 L2115.46 1209.23 L2114.87 1209.23 L2114.28 1209.23 L2113.7 1209.23 L2113.11 1209.23 L2112.52 1209.23 L2111.94 1209.23 L2111.35 1209.23 L2110.76 1209.23 L2110.18 1209.23 L2109.59 1209.23 L2109.01 1209.23 L2108.42 1209.23 L2107.83 1209.23 L2107.25 1209.23 L2106.66 1209.23 L2106.07 1209.23 L2105.49 1209.23 L2104.9 1209.23 L2104.31 1209.23 L2103.73 1209.23 L2103.14 1209.23 L2102.55 1209.23 L2101.97 1209.23 L2101.38 1209.23 L2100.8 1209.23 L2100.21 1209.23 L2099.62 1209.23 L2099.04 1209.23 L2098.45 1209.23 L2097.86 1209.23 L2097.28 1209.23 L2096.69 1209.23 L2096.1 1209.23 L2095.52 1209.23 L2094.93 1209.23 L2094.35 1209.23 L2093.76 1209.23 L2093.17 1209.23 L2092.59 1209.23 L2092 1209.23 L2091.41 1209.23 L2090.83 1209.23 L2090.24 1209.23 L2089.65 1209.23 L2089.07 1209.23 L2088.48 1209.23 L2087.89 1209.23 L2087.31 1209.23 L2086.72 1209.23 L2086.14 1209.23 L2085.55 1209.23 L2084.96 1209.23 L2084.38 1209.23 L2083.79 1209.23 L2083.2 1209.23 L2082.62 1209.23 L2082.03 1209.23 L2081.44 1209.23 L2080.86 1209.23 L2080.27 1209.23 L2079.68 1209.23 L2079.1 1209.23 L2078.51 1209.23 L2077.93 1209.23 L2077.34 1209.23 L2076.75 1209.23 L2076.17 1209.23 L2075.58 1209.23 L2074.99 1209.23 L2074.41 1209.23 L2073.82 1209.23 L2073.23 1209.23 L2072.65 1209.23 L2072.06 1209.23 L2071.48 1209.23 L2070.89 1209.23 L2070.3 1209.23 L2069.72 1209.23 L2069.13 1209.23 L2068.54 1209.23 L2067.96 1209.23 L2067.37 1209.23 L2066.78 1209.23 L2066.2 1209.23 L2065.61 1209.23 L2065.02 1209.23 L2064.44 1209.23 L2063.85 1209.23 L2063.27 1209.23 L2062.68 1209.23 L2062.09 1209.23 L2061.51 1209.23 L2060.92 1209.23 L2060.33 1209.23 L2059.75 1209.23 L2059.16 1209.23 L2058.57 1209.23 L2057.99 1209.23 L2057.4 1209.23 L2056.81 1209.23 L2056.23 1209.23 L2055.64 1209.23 L2055.06 1209.23 L2054.47 1209.23 L2053.88 1209.23 L2053.3 1209.23 L2052.71 1209.23 L2052.12 1209.23 L2051.54 1209.23 L2050.95 1209.23 L2050.36 1209.23 L2049.78 1209.23 L2049.19 1209.23 L2048.6 1209.23 L2048.02 1209.23 L2047.43 1209.23 L2046.85 1209.23 L2046.26 1209.23 L2045.67 1209.23 L2045.09 1209.23 L2044.5 1209.23 L2043.91 1209.23 L2043.33 1209.23 L2042.74 1209.23 L2042.15 1209.23 L2041.57 1209.23 L2040.98 1209.23 L2040.4 1209.23 L2039.81 1209.23 L2039.22 1209.23 L2038.64 1209.23 L2038.05 1209.23 L2037.46 1209.23 L2036.88 1209.23 L2036.29 1209.23 L2035.7 1209.23 L2035.12 1209.23 L2034.53 1209.23 L2033.94 1209.23 L2033.36 1209.23 L2032.77 1209.23 L2032.19 1209.23 L2031.6 1209.23 L2031.01 1209.23 L2030.43 1209.23 L2029.84 1209.23 L2029.25 1209.23 L2028.67 1209.23 L2028.08 1209.23 L2027.49 1209.23 L2026.91 1209.23 L2026.32 1209.23 L2025.73 1209.23 L2025.15 1209.23 L2024.56 1209.23 L2023.98 1209.23 L2023.39 1209.23 L2022.8 1209.23 L2022.22 1209.23 L2021.63 1209.23 L2021.04 1209.23 L2020.46 1209.23 L2019.87 1209.23 L2019.28 1209.23 L2018.7 1209.23 L2018.11 1209.23 L2017.53 1209.23 L2016.94 1209.23 L2016.35 1209.23 L2015.77 1209.23 L2015.18 1209.23 L2014.59 1209.23 L2014.01 1209.23 L2013.42 1209.23 L2012.83 1209.23 L2012.25 1209.23 L2011.66 1209.23 L2011.07 1209.23 L2010.49 1209.23 L2009.9 1209.23 L2009.32 1209.23 L2008.73 1209.23 L2008.14 1209.23 L2007.56 1209.23 L2006.97 1209.23 L2006.38 1209.23 L2005.8 1209.23 L2005.21 1209.23 L2004.62 1209.23 L2004.04 1209.23 L2003.45 1209.23 L2002.86 1209.23 L2002.28 1209.23 L2001.69 1209.23 L2001.11 1209.23 L2000.52 1209.23 L1999.93 1209.23 L1999.35 1209.23 L1998.76 1209.23 L1998.17 1209.23 L1997.59 1209.23 L1997 1209.23 L1996.41 1209.23 L1995.83 1209.23 L1995.24 1209.23 L1994.65 1209.23 L1994.07 1209.23 L1993.48 1209.23 L1992.9 1209.23 L1992.31 1209.23 L1991.72 1209.23 L1991.14 1209.23 L1990.55 1209.23 L1989.96 1209.23 L1989.38 1209.23 L1988.79 1209.23 L1988.2 1209.23 L1987.62 1209.23 L1987.03 1209.23 L1986.45 1209.23 L1985.86 1209.23 L1985.27 1209.23 L1984.69 1209.23 L1984.1 1209.23 L1983.51 1209.23 L1982.93 1209.23 L1982.34 1209.23 L1981.75 1209.23 L1981.17 1209.23 L1980.58 1209.23 L1979.99 1209.23 L1979.41 1209.23 L1978.82 1209.23 L1978.24 1209.23 L1977.65 1209.23 L1977.06 1209.23 L1976.48 1209.23 L1975.89 1209.23 L1975.3 1209.23 L1974.72 1209.23 L1974.13 1209.23 L1973.54 1209.23 L1972.96 1209.23 L1972.37 1209.23 L1971.78 1209.23 L1971.2 1209.23 L1970.61 1209.23 L1970.03 1209.23 L1969.44 1209.23 L1968.85 1209.23 L1968.27 1209.23 L1967.68 1209.23 L1967.09 1209.23 L1966.51 1209.23 L1965.92 1209.23 L1965.33 1209.23 L1964.75 1209.23 L1964.16 1209.23 L1963.58 1209.23 L1962.99 1209.23 L1962.4 1209.23 L1961.82 1209.23 L1961.23 1209.23 L1960.64 1209.23 L1960.06 1209.23 L1959.47 1209.23 L1958.88 1209.23 L1958.3 1209.23 L1957.71 1209.23 L1957.12 1209.23 L1956.54 1209.23 L1955.95 1209.23 L1955.37 1209.23 L1954.78 1209.23 L1954.19 1209.23 L1953.61 1209.23 L1953.02 1209.23 L1952.43 1209.23 L1951.85 1209.23 L1951.26 1209.23 L1950.67 1209.23 L1950.09 1209.23 L1949.5 1209.23 L1948.91 1209.23 L1948.33 1209.23 L1947.74 1209.23 L1947.16 1209.23 L1946.57 1209.23 L1945.98 1209.23 L1945.4 1209.23 L1944.81 1209.23 L1944.22 1209.23 L1943.64 1209.23 L1943.05 1209.23 L1942.46 1209.23 L1941.88 1209.23 L1941.29 1209.23 L1940.71 1209.23 L1940.12 1209.23 L1939.53 1209.23 L1938.95 1209.23 L1938.36 1209.23 L1937.77 1209.23 L1937.19 1209.23 L1936.6 1209.23 L1936.01 1209.23 L1935.43 1209.23 L1934.84 1209.23 L1934.25 1209.23 L1933.67 1209.23 L1933.08 1209.23 L1932.5 1209.23 L1931.91 1209.23 L1931.32 1209.23 L1930.74 1209.23 L1930.15 1209.23 L1929.56 1209.23 L1928.98 1209.23 L1928.39 1209.23 L1927.8 1209.23 L1927.22 1209.23 L1926.63 1209.23 L1926.04 1209.23 L1925.46 1209.23 L1924.87 1209.23 L1924.29 1209.23 L1923.7 1209.23 L1923.11 1209.23 L1922.53 1209.23 L1921.94 1209.23 L1921.35 1209.23 L1920.77 1209.23 L1920.18 1209.23 L1919.59 1209.23 L1919.01 1209.23 L1918.42 1209.23 L1917.83 1209.23 L1917.25 1209.23 L1916.66 1209.23 L1916.08 1209.23 L1915.49 1209.23 L1914.9 1209.23 L1914.32 1209.23 L1913.73 1209.23 L1913.14 1209.23 L1912.56 1209.23 L1911.97 1209.23 L1911.38 1209.23 L1910.8 1209.23 L1910.21 1209.23 L1909.63 1209.23 L1909.04 1209.23 L1908.45 1209.23 L1907.87 1209.23 L1907.28 1209.23 L1906.69 1209.23 L1906.11 1209.23 L1905.52 1209.23 L1904.93 1209.23 L1904.35 1209.23 L1903.76 1209.23 L1903.17 1209.23 L1902.59 1209.23 L1902 1209.23 L1901.42 1209.23 L1900.83 1209.23 L1900.24 1209.23 L1899.66 1209.23 L1899.07 1209.23 L1898.48 1209.23 L1897.9 1209.23 L1897.31 1209.23 L1896.72 1209.23 L1896.14 1209.23 L1895.55 1209.23 L1894.96 1209.23 L1894.38 1209.23 L1893.79 1209.23 L1893.21 1209.23 L1892.62 1209.23 L1892.03 1209.23 L1891.45 1209.23 L1890.86 1209.23 L1890.27 1209.23 L1889.69 1209.23 L1889.1 1209.23 L1888.51 1209.23 L1887.93 1209.23 L1887.34 1209.23 L1886.76 1209.23 L1886.17 1209.23 L1885.58 1209.23 L1885 1209.23 L1884.41 1209.23 L1883.82 1209.23 L1883.24 1209.23 L1882.65 1209.23 L1882.06 1209.23 L1881.48 1209.23 L1880.89 1209.23 L1880.3 1209.23 L1879.72 1209.23 L1879.13 1209.23 L1878.55 1209.23 L1877.96 1209.23 L1877.37 1209.23 L1876.79 1209.23 L1876.2 1209.23 L1875.61 1209.23 L1875.03 1209.23 L1874.44 1209.23 L1873.85 1209.23 L1873.27 1209.23 L1872.68 1209.23 L1872.09 1209.23 L1871.51 1209.23 L1870.92 1209.23 L1870.34 1209.23 L1869.75 1209.23 L1869.16 1209.23 L1868.58 1209.23 L1867.99 1209.23 L1867.4 1209.23 L1866.82 1209.23 L1866.23 1209.23 L1865.64 1209.23 L1865.06 1209.23 L1864.47 1209.23 L1863.88 1209.23 L1863.3 1209.23 L1862.71 1209.23 L1862.13 1209.23 L1861.54 1209.23 L1860.95 1209.23 L1860.37 1209.23 L1859.78 1209.23 L1859.19 1209.23 L1858.61 1209.23 L1858.02 1209.23 L1857.43 1209.23 L1856.85 1209.23 L1856.26 1209.23 L1855.68 1209.23 L1855.09 1209.23 L1854.5 1209.23 L1853.92 1209.23 L1853.33 1209.23 L1852.74 1209.23 L1852.16 1209.23 L1851.57 1209.23 L1850.98 1209.23 L1850.4 1209.23 L1849.81 1209.23 L1849.22 1209.23 L1848.64 1209.23 L1848.05 1209.23 L1847.47 1209.23 L1846.88 1209.23 L1846.29 1209.23 L1845.71 1209.23 L1845.12 1209.23 L1844.53 1209.23 L1843.95 1209.23 L1843.36 1209.23 L1842.77 1209.23 L1842.19 1209.23 L1841.6 1209.23 L1841.01 1209.23 L1840.43 1209.23 L1839.84 1209.23 L1839.26 1209.23 L1838.67 1209.23 L1838.08 1209.23 L1837.5 1209.23 L1836.91 1209.23 L1836.32 1209.23 L1835.74 1209.23 L1835.15 1209.23 L1834.56 1209.23 L1833.98 1209.23 L1833.39 1209.23 L1832.81 1209.23 L1832.22 1209.23 L1831.63 1209.23 L1831.05 1209.23 L1830.46 1209.23 L1829.87 1209.23 L1829.29 1209.23 L1828.7 1209.23 L1828.11 1209.23 L1827.53 1209.23 L1826.94 1209.23 L1826.35 1209.23 L1825.77 1209.23 L1825.18 1209.23 L1824.6 1209.23 L1824.01 1209.23 L1823.42 1209.23 L1822.84 1209.23 L1822.25 1209.23 L1821.66 1209.23 L1821.08 1209.23 L1820.49 1209.23 L1819.9 1209.23 L1819.32 1209.23 L1818.73 1209.23 L1818.14 1209.23 L1817.56 1209.23 L1816.97 1209.23 L1816.39 1209.23 L1815.8 1209.23 L1815.21 1209.23 L1814.63 1209.23 L1814.04 1209.23 L1813.45 1209.23 L1812.87 1209.23 L1812.28 1209.23 L1811.69 1209.23 L1811.11 1209.23 L1810.52 1209.23 L1809.94 1209.23 L1809.35 1209.23 L1808.76 1209.23 L1808.18 1209.23 L1807.59 1209.23 L1807 1209.23 L1806.42 1209.23 L1805.83 1209.23 L1805.24 1209.23 L1804.66 1209.23 L1804.07 1209.23 L1803.48 1209.23 L1802.9 1209.23 L1802.31 1209.23 L1801.73 1209.23 L1801.14 1209.23 L1800.55 1209.23 L1799.97 1209.23 L1799.38 1209.23 L1798.79 1209.23 L1798.21 1209.23 L1797.62 1209.23 L1797.03 1209.23 L1796.45 1209.23 L1795.86 1209.23 L1795.27 1209.23 L1794.69 1209.23 L1794.1 1209.23 L1793.52 1209.23 L1792.93 1209.23 L1792.34 1209.23 L1791.76 1209.23 L1791.17 1209.23 L1790.58 1209.23 L1790 1209.23 L1789.41 1209.23 L1788.82 1209.23 L1788.24 1209.23 L1787.65 1209.23 L1787.06 1209.23 L1786.48 1209.23 L1785.89 1209.23 L1785.31 1209.23 L1784.72 1209.23 L1784.13 1209.23 L1783.55 1209.23 L1782.96 1209.23 L1782.37 1209.23 L1781.79 1209.23 L1781.2 1209.23 L1780.61 1209.23 L1780.03 1209.23 L1779.44 1209.23 L1778.86 1209.23 L1778.27 1209.23 L1777.68 1209.23 L1777.1 1209.23 L1776.51 1209.23 L1775.92 1209.23 L1775.34 1209.23 L1774.75 1209.23 L1774.16 1209.23 L1773.58 1209.23 L1772.99 1209.23 L1772.4 1209.23 L1771.82 1209.23 L1771.23 1209.23 L1770.65 1209.23 L1770.06 1209.23 L1769.47 1209.23 L1768.89 1209.23 L1768.3 1209.23 L1767.71 1209.23 L1767.13 1209.23 L1766.54 1209.23 L1765.95 1209.23 L1765.37 1209.23 L1764.78 1209.23 L1764.19 1209.23 L1763.61 1209.23 L1763.02 1209.23 L1762.44 1209.23 L1761.85 1209.23 L1761.26 1209.23 L1760.68 1209.23 L1760.09 1209.23 L1759.5 1209.23 L1758.92 1209.23 L1758.33 1209.23 L1757.74 1209.23 L1757.16 1209.23 L1756.57 1209.23 L1755.99 1209.23 L1755.4 1209.23 L1754.81 1209.23 L1754.23 1209.23 L1753.64 1209.23 L1753.05 1209.23 L1752.47 1209.23 L1751.88 1209.23 L1751.29 1209.23 L1750.71 1209.23 L1750.12 1209.23 L1749.53 1209.23 L1748.95 1209.23 L1748.36 1209.23 L1747.78 1209.23 L1747.19 1209.23 L1746.6 1209.23 L1746.02 1209.23 L1745.43 1209.23 L1744.84 1209.23 L1744.26 1209.23 L1743.67 1209.23 L1743.08 1209.23 L1742.5 1209.23 L1741.91 1209.23 L1741.32 1209.23 L1740.74 1209.23 L1740.15 1209.23 L1739.57 1209.23 L1738.98 1209.23 L1738.39 1209.23 L1737.81 1209.23 L1737.22 1209.23 L1736.63 1209.23 L1736.05 1209.23 L1735.46 1209.23 L1734.87 1209.23 L1734.29 1209.23 L1733.7 1209.23 L1733.11 1209.23 L1732.53 1209.23 L1731.94 1209.23 L1731.36 1209.23 L1730.77 1209.23 L1730.18 1209.23 L1729.6 1209.23 L1729.01 1209.23 L1728.42 1209.23 L1727.84 1209.23 L1727.25 1209.23 L1726.66 1209.23 L1726.08 1209.23 L1725.49 1209.23 L1724.91 1209.23 L1724.32 1209.23 L1723.73 1209.23 L1723.15 1209.23 L1722.56 1209.23 L1721.97 1209.23 L1721.39 1209.23 L1720.8 1209.23 L1720.21 1209.23 L1719.63 1209.23 L1719.04 1209.23 L1718.45 1209.23 L1717.87 1209.23 L1717.28 1209.23 L1716.7 1209.23 L1716.11 1209.23 L1715.52 1209.23 L1714.94 1209.23 L1714.35 1209.23 L1713.76 1209.23 L1713.18 1209.23 L1712.59 1209.23 L1712 1209.23 L1711.42 1209.23 L1710.83 1209.23 L1710.24 1209.23 L1709.66 1209.23 L1709.07 1209.23 L1708.49 1209.23 L1707.9 1209.23 L1707.31 1209.23 L1706.73 1209.23 L1706.14 1209.23 L1705.55 1209.23 L1704.97 1209.23 L1704.38 1209.23 L1703.79 1209.23 L1703.21 1209.23 L1702.62 1209.23 L1702.04 1209.23 L1701.45 1209.23 L1700.86 1209.23 L1700.28 1209.23 L1699.69 1209.23 L1699.1 1209.23 L1698.52 1209.23 L1697.93 1209.23 L1697.34 1209.23 L1696.76 1209.23 L1696.17 1209.23 L1695.58 1209.23 L1695 1209.23 L1694.41 1209.23 L1693.83 1209.23 L1693.24 1209.23 L1692.65 1209.23 L1692.07 1209.23 L1691.48 1209.23 L1690.89 1209.23 L1690.31 1209.23 L1689.72 1209.23 L1689.13 1209.23 L1688.55 1209.23 L1687.96 1209.23 L1687.37 1209.23 L1686.79 1209.23 L1686.2 1209.23 L1685.62 1209.23 L1685.03 1209.23 L1684.44 1209.23 L1683.86 1209.23 L1683.27 1209.23 L1682.68 1209.23 L1682.1 1209.23 L1681.51 1209.23 L1680.92 1209.23 L1680.34 1209.23 L1679.75 1209.23 L1679.17 1209.23 L1678.58 1209.23 L1677.99 1209.23 L1677.41 1209.23 L1676.82 1209.23 L1676.23 1209.23 L1675.65 1209.23 L1675.06 1209.23 L1674.47 1209.23 L1673.89 1209.23 L1673.3 1209.23 L1672.71 1209.23 L1672.13 1209.23 L1671.54 1209.23 L1670.96 1209.23 L1670.37 1209.23 L1669.78 1209.23 L1669.2 1209.23 L1668.61 1209.23 L1668.02 1209.23 L1667.44 1209.23 L1666.85 1209.23 L1666.26 1209.23 L1665.68 1209.23 L1665.09 1209.23 L1664.5 1209.23 L1663.92 1209.23 L1663.33 1209.23 L1662.75 1209.23 L1662.16 1209.23 L1661.57 1209.23 L1660.99 1209.23 L1660.4 1209.23 L1659.81 1209.23 L1659.23 1209.23 L1658.64 1209.23 L1658.05 1209.23 L1657.47 1209.23 L1656.88 1209.23 L1656.29 1209.23 L1655.71 1209.23 L1655.12 1209.23 L1654.54 1209.23 L1653.95 1209.23 L1653.36 1209.23 L1652.78 1209.23 L1652.19 1209.23 L1651.6 1209.23 L1651.02 1209.23 L1650.43 1209.23 L1649.84 1209.23 L1649.26 1209.23 L1648.67 1209.23 L1648.09 1209.23 L1647.5 1209.23 L1646.91 1209.23 L1646.33 1209.23 L1645.74 1209.23 L1645.15 1209.23 L1644.57 1209.23 L1643.98 1209.23 L1643.39 1209.23 L1642.81 1209.23 L1642.22 1209.23 L1641.63 1209.23 L1641.05 1209.23 L1640.46 1209.23 L1639.88 1209.23 L1639.29 1209.23 L1638.7 1209.23 L1638.12 1209.23 L1637.53 1209.23 L1636.94 1209.23 L1636.36 1209.23 L1635.77 1209.23 L1635.18 1209.23 L1634.6 1209.23 L1634.01 1209.23 L1633.42 1209.23 L1632.84 1209.23 L1632.25 1209.23 L1631.67 1209.23 L1631.08 1209.23 L1630.49 1209.23 L1629.91 1209.23 L1629.32 1209.23 L1628.73 1209.23 L1628.15 1209.23 L1627.56 1209.23 L1626.97 1209.23 L1626.39 1209.23 L1625.8 1209.23 L1625.22 1209.23 L1624.63 1209.23 L1624.04 1209.23 L1623.46 1209.23 L1622.87 1209.23 L1622.28 1209.23 L1621.7 1209.23 L1621.11 1209.23 L1620.52 1209.23 L1619.94 1209.23 L1619.35 1209.23 L1618.76 1209.23 L1618.18 1209.23 L1617.59 1209.23 L1617.01 1209.23 L1616.42 1209.23 L1615.83 1209.23 L1615.25 1209.23 L1614.66 1209.23 L1614.07 1209.23 L1613.49 1209.23 L1612.9 1209.23 L1612.31 1209.23 L1611.73 1209.23 L1611.14 1209.23 L1610.55 1209.23 L1609.97 1209.23 L1609.38 1209.23 L1608.8 1209.23 L1608.21 1209.23 L1607.62 1209.23 L1607.04 1209.23 L1606.45 1209.23 L1605.86 1209.23 L1605.28 1209.23 L1604.69 1209.23 L1604.1 1209.23 L1603.52 1209.23 L1602.93 1209.23 L1602.34 1209.23 L1601.76 1209.23 L1601.17 1209.23 L1600.59 1209.23 L1600 1209.23 L1599.41 1209.23 L1598.83 1209.23 L1598.24 1209.23 L1597.65 1209.23 L1597.07 1209.23 L1596.48 1209.23 L1595.89 1209.23 L1595.31 1209.23 L1594.72 1209.23 L1594.14 1209.23 L1593.55 1209.23 L1592.96 1209.23 L1592.38 1209.23 L1591.79 1209.23 L1591.2 1209.23 L1590.62 1209.23 L1590.03 1209.23 L1589.44 1209.23 L1588.86 1209.23 L1588.27 1209.23 L1587.68 1209.23 L1587.1 1209.23 L1586.51 1209.23 L1585.93 1209.23 L1585.34 1209.23 L1584.75 1209.23 L1584.17 1209.23 L1583.58 1209.23 L1582.99 1209.23 L1582.41 1209.23 L1581.82 1209.23 L1581.23 1209.23 L1580.65 1209.23 L1580.06 1209.23 L1579.47 1209.23 L1578.89 1209.23 L1578.3 1209.23 L1577.72 1209.23 L1577.13 1209.23 L1576.54 1209.23 L1575.96 1209.23 L1575.37 1209.23 L1574.78 1209.23 L1574.2 1209.23 L1573.61 1209.23 L1573.02 1209.23 L1572.44 1209.23 L1571.85 1209.23 L1571.27 1209.23 L1570.68 1209.23 L1570.09 1209.23 L1569.51 1209.23 L1568.92 1209.23 L1568.33 1209.23 L1567.75 1209.23 L1567.16 1209.23 L1566.57 1209.23 L1565.99 1209.23 L1565.4 1209.23 L1564.81 1209.23 L1564.23 1209.23 L1563.64 1209.23 L1563.06 1209.23 L1562.47 1209.23 L1561.88 1209.23 L1561.3 1209.23 L1560.71 1209.23 L1560.12 1209.23 L1559.54 1209.23 L1558.95 1209.23 L1558.36 1209.23 L1557.78 1209.23 L1557.19 1209.23 L1556.6 1209.23 L1556.02 1209.23 L1555.43 1209.23 L1554.85 1209.23 L1554.26 1209.23 L1553.67 1209.23 L1553.09 1209.23 L1552.5 1209.23 L1551.91 1209.23 L1551.33 1209.23 L1550.74 1209.23 L1550.15 1209.23 L1549.57 1209.23 L1548.98 1209.23 L1548.4 1209.23 L1547.81 1209.23 L1547.22 1209.23 L1546.64 1209.23 L1546.05 1209.23 L1545.46 1209.23 L1544.88 1209.23 L1544.29 1209.23 L1543.7 1209.23 L1543.12 1209.23 L1542.53 1209.23 L1541.94 1209.23 L1541.36 1209.23 L1540.77 1209.23 L1540.19 1209.23 L1539.6 1209.23 L1539.01 1209.23 L1538.43 1209.23 L1537.84 1209.23 L1537.25 1209.23 L1536.67 1209.23 L1536.08 1209.23 L1535.49 1209.23 L1534.91 1209.23 L1534.32 1209.23 L1533.73 1209.23 L1533.15 1209.23 L1532.56 1209.23 L1531.98 1209.23 L1531.39 1209.23 L1530.8 1209.23 L1530.22 1209.23 L1529.63 1209.23 L1529.04 1209.23 L1528.46 1209.23 L1527.87 1209.23 L1527.28 1209.23 L1526.7 1209.23 L1526.11 1209.23 L1525.52 1209.23 L1524.94 1209.23 L1524.35 1209.23 L1523.77 1209.23 L1523.18 1209.23 L1522.59 1209.23 L1522.01 1209.23 L1521.42 1209.23 L1520.83 1209.23 L1520.25 1209.23 L1519.66 1209.23 L1519.07 1209.23 L1518.49 1209.23 L1517.9 1209.23 L1517.32 1209.23 L1516.73 1209.23 L1516.14 1209.23 L1515.56 1209.23 L1514.97 1209.23 L1514.38 1209.23 L1513.8 1209.23 L1513.21 1209.23 L1512.62 1209.23 L1512.04 1209.23 L1511.45 1209.23 L1510.86 1209.23 L1510.28 1209.23 L1509.69 1209.23 L1509.11 1209.23 L1508.52 1209.23 L1507.93 1209.23 L1507.35 1209.23 L1506.76 1209.23 L1506.17 1209.23 L1505.59 1209.23 L1505 1209.23 L1504.41 1209.23 L1503.83 1209.23 L1503.24 1209.23 L1502.65 1209.23 L1502.07 1209.23 L1501.48 1209.23 L1500.9 1209.23 L1500.31 1209.23 L1499.72 1209.23 L1499.14 1209.23 L1498.55 1209.23 L1497.96 1209.23 L1497.38 1209.23 L1496.79 1209.23 L1496.2 1209.23 L1495.62 1209.23 L1495.03 1209.23 L1494.45 1209.23 L1493.86 1209.23 L1493.27 1209.23 L1492.69 1209.23 L1492.1 1209.23 L1491.51 1209.23 L1490.93 1209.23 L1490.34 1209.23 L1489.75 1209.23 L1489.17 1209.23 L1488.58 1209.23 L1487.99 1209.23 L1487.41 1209.23 L1486.82 1209.23 L1486.24 1209.23 L1485.65 1209.23 L1485.06 1209.23 L1484.48 1209.23 L1483.89 1209.23 L1483.3 1209.23 L1482.72 1209.23 L1482.13 1209.23 L1481.54 1209.23 L1480.96 1209.23 L1480.37 1209.23 L1479.78 1209.23 L1479.2 1209.23 L1478.61 1209.23 L1478.03 1209.23 L1477.44 1209.23 L1476.85 1209.23 L1476.27 1209.23 L1475.68 1209.23 L1475.09 1209.23 L1474.51 1209.23 L1473.92 1209.23 L1473.33 1209.23 L1472.75 1209.23 L1472.16 1209.23 L1471.57 1209.23 L1470.99 1209.23 L1470.4 1209.23 L1469.82 1209.23 L1469.23 1209.23 L1468.64 1209.23 L1468.06 1209.23 L1467.47 1209.23 L1466.88 1209.23 L1466.3 1209.23 L1465.71 1209.23 L1465.12 1209.23 L1464.54 1209.23 L1463.95 1209.23 L1463.37 1209.23 L1462.78 1209.23 L1462.19 1209.23 L1461.61 1209.23 L1461.02 1209.23 L1460.43 1209.23 L1459.85 1209.23 L1459.26 1209.23 L1458.67 1209.23 L1458.09 1209.23 L1457.5 1209.23 L1456.91 1209.23 L1456.33 1209.23 L1455.74 1209.23 L1455.16 1209.23 L1454.57 1209.23 L1453.98 1209.23 L1453.4 1209.23 L1452.81 1209.23 L1452.22 1209.23 L1451.64 1209.23 L1451.05 1209.23 L1450.46 1209.23 L1449.88 1209.23 L1449.29 1209.23 L1448.7 1209.23 L1448.12 1209.23 L1447.53 1209.23 L1446.95 1209.23 L1446.36 1209.23 L1445.77 1209.23 L1445.19 1209.23 L1444.6 1209.23 L1444.01 1209.23 L1443.43 1209.23 L1442.84 1209.23 L1442.25 1209.23 L1441.67 1209.23 L1441.08 1209.23 L1440.5 1209.23 L1439.91 1209.23 L1439.32 1209.23 L1438.74 1209.23 L1438.15 1209.23 L1437.56 1209.23 L1436.98 1209.23 L1436.39 1209.23 L1435.8 1209.23 L1435.22 1209.23 L1434.63 1209.23 L1434.04 1209.23 L1433.46 1209.23 L1432.87 1209.23 L1432.29 1209.23 L1431.7 1209.23 L1431.11 1209.23 L1430.53 1209.23 L1429.94 1209.23 L1429.35 1209.23 L1428.77 1209.23 L1428.18 1209.23 L1427.59 1209.23 L1427.01 1209.23 L1426.42 1209.23 L1425.83 1209.23 L1425.25 1209.23 L1424.66 1209.23 L1424.08 1209.23 L1423.49 1209.23 L1422.9 1209.23 L1422.32 1209.23 L1421.73 1209.23 L1421.14 1209.23 L1420.56 1209.23 L1419.97 1209.23 L1419.38 1209.23 L1418.8 1209.23 L1418.21 1209.23 L1417.63 1209.23 L1417.04 1209.23 L1416.45 1209.23 L1415.87 1209.23 L1415.28 1209.23 L1414.69 1209.23 L1414.11 1209.23 L1413.52 1209.23 L1412.93 1209.23 L1412.35 1209.23 L1411.76 1209.23 L1411.17 1209.23 L1410.59 1209.23 L1410 1209.23 L1409.42 1209.23 L1408.83 1209.23 L1408.24 1209.23 L1407.66 1209.23 L1407.07 1209.23 L1406.48 1209.23 L1405.9 1209.23 L1405.31 1209.23 L1404.72 1209.23 L1404.14 1209.23 L1403.55 1209.23 L1402.96 1209.23 L1402.38 1209.23 L1401.79 1209.23 L1401.21 1209.23 L1400.62 1209.23 L1400.03 1209.23 L1399.45 1209.23 L1398.86 1209.23 L1398.27 1209.23 L1397.69 1209.23 L1397.1 1209.23 L1396.51 1209.23 L1395.93 1209.23 L1395.34 1209.23 L1394.75 1209.23 L1394.17 1209.23 L1393.58 1209.23 L1393 1209.23 L1392.41 1209.23 L1391.82 1209.23 L1391.24 1209.23 L1390.65 1209.23 L1390.06 1209.23 L1389.48 1209.23 L1388.89 1209.23 L1388.3 1209.23 L1387.72 1209.23 L1387.13 1209.23 L1386.55 1209.23 L1385.96 1209.23 L1385.37 1209.23 L1384.79 1209.23 L1384.2 1209.23 L1383.61 1209.23 L1383.03 1209.23 L1382.44 1209.23 L1381.85 1209.23 L1381.27 1209.23 L1380.68 1209.23 L1380.09 1209.23 L1379.51 1209.23 L1378.92 1209.23 L1378.34 1209.23 L1377.75 1209.23 L1377.16 1209.23 L1376.58 1209.23 L1375.99 1209.23 L1375.4 1209.23 L1374.82 1209.23 L1374.23 1209.23 L1373.64 1209.23 L1373.06 1209.23 L1372.47 1209.23 L1371.88 1209.23 L1371.3 1209.23 L1370.71 1209.23 L1370.13 1209.23 L1369.54 1209.23 L1368.95 1209.23 L1368.37 1209.23 L1367.78 1209.23 L1367.19 1209.23 L1366.61 1209.23 L1366.02 1209.23 L1365.43 1209.23 L1364.85 1209.23 L1364.26 1209.23 L1363.68 1209.23 L1363.09 1209.23 L1362.5 1209.23 L1361.92 1209.23 L1361.33 1209.23 L1360.74 1209.23 L1360.16 1209.23 L1359.57 1209.23 L1358.98 1209.23 L1358.4 1209.23 L1357.81 1209.23 L1357.22 1209.23 L1356.64 1209.23 L1356.05 1209.23 L1355.47 1209.23 L1354.88 1209.23 L1354.29 1209.23 L1353.71 1209.23 L1353.12 1209.23 L1352.53 1209.23 L1351.95 1209.23 L1351.36 1209.23 L1350.77 1209.23 L1350.19 1209.23 L1349.6 1209.23 L1349.01 1209.23 L1348.43 1209.23 L1347.84 1209.23 L1347.26 1209.23 L1346.67 1209.23 L1346.08 1209.23 L1345.5 1209.23 L1344.91 1209.23 L1344.32 1209.23 L1343.74 1209.23 L1343.15 1209.23 L1342.56 1209.23 L1341.98 1209.23 L1341.39 1209.23 L1340.8 1209.23 L1340.22 1209.23 L1339.63 1209.23 L1339.05 1209.23 L1338.46 1209.23 L1337.87 1209.23 L1337.29 1209.23 L1336.7 1209.23 L1336.11 1209.23 L1335.53 1209.23 L1334.94 1209.23 L1334.35 1209.23 L1333.77 1209.23 L1333.18 1209.23 L1332.6 1209.23 L1332.01 1209.23 L1331.42 1209.23 L1330.84 1209.23 L1330.25 1209.23 L1329.66 1209.23 L1329.08 1209.23 L1328.49 1209.23 L1327.9 1209.23 L1327.32 1209.23 L1326.73 1209.23 L1326.14 1209.23 L1325.56 1209.23 L1324.97 1209.23 L1324.39 1209.23 L1323.8 1209.23 L1323.21 1209.23 L1322.63 1209.23 L1322.04 1209.23 L1321.45 1209.23 L1320.87 1209.23 L1320.28 1209.23 L1319.69 1209.23 L1319.11 1209.23 L1318.52 1209.23 L1317.93 1209.23 L1317.35 1209.23 L1316.76 1209.23 L1316.18 1209.23 L1315.59 1209.23 L1315 1209.23 L1314.42 1209.23 L1313.83 1209.23 L1313.24 1209.23 L1312.66 1209.23 L1312.07 1209.23 L1311.48 1209.23 L1310.9 1209.23 L1310.31 1209.23 L1309.73 1209.23 L1309.14 1209.23 L1308.55 1209.23 L1307.97 1209.23 L1307.38 1209.23 L1306.79 1209.23 L1306.21 1209.23 L1305.62 1209.23 L1305.03 1209.23 L1304.45 1209.23 L1303.86 1209.23 L1303.27 1209.23 L1302.69 1209.23 L1302.1 1209.23 L1301.52 1209.23 L1300.93 1209.23 L1300.34 1209.23 L1299.76 1209.23 L1299.17 1209.23 L1298.58 1209.23 L1298 1209.23 L1297.41 1209.23 L1296.82 1209.23 L1296.24 1209.23 L1295.65 1209.23 L1295.06 1209.23 L1294.48 1209.23 L1293.89 1209.23 L1293.31 1209.23 L1292.72 1209.23 L1292.13 1209.23 L1291.55 1209.23 L1290.96 1209.23 L1290.37 1209.23 L1289.79 1209.23 L1289.2 1209.23 L1288.61 1209.23 L1288.03 1209.23 L1287.44 1209.23 L1286.86 1209.23 L1286.27 1209.23 L1285.68 1209.23 L1285.1 1209.23 L1284.51 1209.23 L1283.92 1209.23 L1283.34 1209.23 L1282.75 1209.23 L1282.16 1209.23 L1281.58 1209.23 L1280.99 1209.23 L1280.4 1209.23 L1279.82 1209.23 L1279.23 1209.23 L1278.65 1209.23 L1278.06 1209.23 L1277.47 1209.23 L1276.89 1209.23 L1276.3 1209.23 L1275.71 1209.23 L1275.13 1209.23 L1274.54 1209.23 L1273.95 1209.23 L1273.37 1209.23 L1272.78 1209.23 L1272.19 1209.23 L1271.61 1209.23 L1271.02 1209.23 L1270.44 1209.23 L1269.85 1209.23 L1269.26 1209.23 L1268.68 1209.23 L1268.09 1209.23 L1267.5 1209.23 L1266.92 1209.23 L1266.33 1209.23 L1265.74 1209.23 L1265.16 1209.23 L1264.57 1209.23 L1263.98 1209.23 L1263.4 1209.23 L1262.81 1209.23 L1262.23 1209.23 L1261.64 1209.23 L1261.05 1209.23 L1260.47 1209.23 L1259.88 1209.23 L1259.29 1209.23 L1258.71 1209.23 L1258.12 1209.23 L1257.53 1209.23 L1256.95 1209.23 L1256.36 1209.23 L1255.78 1209.23 L1255.19 1209.23 L1254.6 1209.23 L1254.02 1209.23 L1253.43 1209.23 L1252.84 1209.23 L1252.26 1209.23 L1251.67 1209.23 L1251.08 1209.23 L1250.5 1209.23 L1249.91 1209.23 L1249.32 1209.23 L1248.74 1209.23 L1248.15 1209.23 L1247.57 1209.23 L1246.98 1209.23 L1246.39 1209.23 L1245.81 1209.23 L1245.22 1209.23 L1244.63 1209.23 L1244.05 1209.23 L1243.46 1209.23 L1242.87 1209.23 L1242.29 1209.23 L1241.7 1209.23 L1241.11 1209.23 L1240.53 1209.23 L1239.94 1209.23 L1239.36 1209.23 L1238.77 1209.23 L1238.18 1209.23 L1237.6 1209.23 L1237.01 1209.23 L1236.42 1209.23 L1235.84 1209.23 L1235.25 1209.23 L1234.66 1209.23 L1234.08 1209.23 L1233.49 1209.23 L1232.91 1209.23 L1232.32 1209.23 L1231.73 1209.23 L1231.15 1209.23 L1230.56 1209.23 L1229.97 1209.23 L1229.39 1209.23 L1228.8 1209.23 L1228.21 1209.23 L1227.63 1209.23 L1227.04 1209.23 L1226.45 1209.23 L1225.87 1209.23 L1225.28 1209.23 L1224.7 1209.23 L1224.11 1209.23 L1223.52 1209.23 L1222.94 1209.23 L1222.35 1209.23 L1221.76 1209.23 L1221.18 1209.23 L1220.59 1209.23 L1220 1209.23 L1219.42 1209.23 L1218.83 1209.23 L1218.24 1209.23 L1217.66 1209.23 L1217.07 1209.23 L1216.49 1209.23 L1215.9 1209.23 L1215.31 1209.23 L1214.73 1209.23 L1214.14 1209.23 L1213.55 1209.23 L1212.97 1209.23 L1212.38 1209.23 L1211.79 1209.23 L1211.21 1209.23 L1210.62 1209.23 L1210.03 1209.23 L1209.45 1209.23 L1208.86 1209.23 L1208.28 1209.23 L1207.69 1209.23 L1207.1 1209.23 L1206.52 1209.23 L1205.93 1209.23 L1205.34 1209.23 L1204.76 1209.23 L1204.17 1209.23 L1203.58 1209.23 L1203 1209.23 L1202.41 1209.23 L1201.83 1209.23 L1201.24 1209.23 L1200.65 1209.23 L1200.07 1209.23 L1199.48 1209.23 L1198.89 1209.23 L1198.31 1209.23 L1197.72 1209.23 L1197.13 1209.23 L1196.55 1209.23 L1195.96 1209.23 L1195.37 1209.23 L1194.79 1209.23 L1194.2 1209.23 L1193.62 1209.23 L1193.03 1209.23 L1192.44 1209.23 L1191.86 1209.23 L1191.27 1209.23 L1190.68 1209.23 L1190.1 1209.23 L1189.51 1209.23 L1188.92 1209.23 L1188.34 1209.23 L1187.75 1209.23 L1187.16 1209.23 L1186.58 1209.23 L1185.99 1209.23 L1185.41 1209.23 L1184.82 1209.23 L1184.23 1209.23 L1183.65 1209.23 L1183.06 1209.23 L1182.47 1209.23 L1181.89 1209.23 L1181.3 1209.23 L1180.71 1209.23 L1180.13 1209.23 L1179.54 1209.23 L1178.96 1209.23 L1178.37 1209.23 L1177.78 1209.23 L1177.2 1209.23 L1176.61 1209.23 L1176.02 1209.23 L1175.44 1209.23 L1174.85 1209.23 L1174.26 1209.23 L1173.68 1209.23 L1173.09 1209.23 L1172.5 1209.23 L1171.92 1209.23 L1171.33 1209.23 L1170.75 1209.23 L1170.16 1209.23 L1169.57 1209.23 L1168.99 1209.23 L1168.4 1209.23 L1167.81 1209.23 L1167.23 1209.23 L1166.64 1209.23 L1166.05 1209.23 L1165.47 1209.23 L1164.88 1209.23 L1164.29 1209.23 L1163.71 1209.23 L1163.12 1209.23 L1162.54 1209.23 L1161.95 1209.23 L1161.36 1209.23 L1160.78 1209.23 L1160.19 1209.23 L1159.6 1209.23 L1159.02 1209.23 L1158.43 1209.23 L1157.84 1209.23 L1157.26 1209.23 L1156.67 1209.23 L1156.09 1209.23 L1155.5 1209.23 L1154.91 1209.23 L1154.33 1209.23 L1153.74 1209.23 L1153.15 1209.23 L1152.57 1209.23 L1151.98 1209.23 L1151.39 1209.23 L1150.81 1209.23 L1150.22 1209.23 L1149.63 1209.23 L1149.05 1209.23 L1148.46 1209.23 L1147.88 1209.23 L1147.29 1209.23 L1146.7 1209.23 L1146.12 1209.23 L1145.53 1209.23 L1144.94 1209.23 L1144.36 1209.23 L1143.77 1209.23 L1143.18 1209.23 L1142.6 1209.23 L1142.01 1209.23 L1141.42 1209.23 L1140.84 1209.23 L1140.25 1209.23 L1139.67 1209.23 L1139.08 1209.23 L1138.49 1209.23 L1137.91 1209.23 L1137.32 1209.23 L1136.73 1209.23 L1136.15 1209.23 L1135.56 1209.23 L1134.97 1209.23 L1134.39 1209.23 L1133.8 1209.23 L1133.21 1209.23 L1132.63 1209.23 L1132.04 1209.23 L1131.46 1209.23 L1130.87 1209.23 L1130.28 1209.23 L1129.7 1209.23 L1129.11 1209.23 L1128.52 1209.23 L1127.94 1209.23 L1127.35 1209.23 L1126.76 1209.23 L1126.18 1209.23 L1125.59 1209.23 L1125.01 1209.23 L1124.42 1209.23 L1123.83 1209.23 L1123.25 1209.23 L1122.66 1209.23 L1122.07 1209.23 L1121.49 1209.23 L1120.9 1209.23 L1120.31 1209.23 L1119.73 1209.23 L1119.14 1209.23 L1118.55 1209.23 L1117.97 1209.23 L1117.38 1209.23 L1116.8 1209.23 L1116.21 1209.23 L1115.62 1209.23 L1115.04 1209.23 L1114.45 1209.23 L1113.86 1209.23 L1113.28 1209.23 L1112.69 1209.23 L1112.1 1209.23 L1111.52 1209.23 L1110.93 1209.23 L1110.34 1209.23 L1109.76 1209.23 L1109.17 1209.23 L1108.59 1209.23 L1108 1209.23 L1107.41 1209.23 L1106.83 1209.23 L1106.24 1209.23 L1105.65 1209.23 L1105.07 1209.23 L1104.48 1209.23 L1103.89 1209.23 L1103.31 1209.23 L1102.72 1209.23 L1102.14 1209.23 L1101.55 1209.23 L1100.96 1209.23 L1100.38 1209.23 L1099.79 1209.23 L1099.2 1209.23 L1098.62 1209.23 L1098.03 1209.23 L1097.44 1209.23 L1096.86 1209.23 L1096.27 1209.23 L1095.68 1209.23 L1095.1 1209.23 L1094.51 1209.23 L1093.93 1209.23 L1093.34 1209.23 L1092.75 1209.23 L1092.17 1209.23 L1091.58 1209.23 L1090.99 1209.23 L1090.41 1209.23 L1089.82 1209.23 L1089.23 1209.23 L1088.65 1209.23 L1088.06 1209.23 L1087.47 1209.23 L1086.89 1209.23 L1086.3 1209.23 L1085.72 1209.23 L1085.13 1209.23 L1084.54 1209.23 L1083.96 1209.23 L1083.37 1209.23 L1082.78 1209.23 L1082.2 1209.23 L1081.61 1209.23 L1081.02 1209.23 L1080.44 1209.23 L1079.85 1209.23 L1079.26 1209.23 L1078.68 1209.23 L1078.09 1209.23 L1077.51 1209.23 L1076.92 1209.23 L1076.33 1209.23 L1075.75 1209.23 L1075.16 1209.23 L1074.57 1209.23 L1073.99 1209.23 L1073.4 1209.23 L1072.81 1209.23 L1072.23 1209.23 L1071.64 1209.23 L1071.06 1209.23 L1070.47 1209.23 L1069.88 1209.23 L1069.3 1209.23 L1068.71 1209.23 L1068.12 1209.23 L1067.54 1209.23 L1066.95 1209.23 L1066.36 1209.23 L1065.78 1209.23 L1065.19 1209.23 L1064.6 1209.23 L1064.02 1209.23 L1063.43 1209.23 L1062.85 1209.23 L1062.26 1209.23 L1061.67 1209.23 L1061.09 1209.23 L1060.5 1209.23 L1059.91 1209.23 L1059.33 1209.23 L1058.74 1209.23 L1058.15 1209.23 L1057.57 1209.23 L1056.98 1209.23 L1056.39 1209.23 L1055.81 1209.23 L1055.22 1209.23 L1054.64 1209.23 L1054.05 1209.23 L1053.46 1209.23 L1052.88 1209.23 L1052.29 1209.23 L1051.7 1209.23 L1051.12 1209.23 L1050.53 1209.23 L1049.94 1209.23 L1049.36 1209.23 L1048.77 1209.23 L1048.19 1209.23 L1047.6 1209.23 L1047.01 1209.23 L1046.43 1209.23 L1045.84 1209.23 L1045.25 1209.23 L1044.67 1209.23 L1044.08 1209.23 L1043.49 1209.23 L1042.91 1209.23 L1042.32 1209.23 L1041.73 1209.23 L1041.15 1209.23 L1040.56 1209.23 L1039.98 1209.23 L1039.39 1209.23 L1038.8 1209.23 L1038.22 1209.23 L1037.63 1209.23 L1037.04 1209.23 L1036.46 1209.23 L1035.87 1209.23 L1035.28 1209.23 L1034.7 1209.23 L1034.11 1209.23 L1033.52 1209.23 L1032.94 1209.23 L1032.35 1209.23 L1031.77 1209.23 L1031.18 1209.23 L1030.59 1209.23 L1030.01 1209.23 L1029.42 1209.23 L1028.83 1209.23 L1028.25 1209.23 L1027.66 1209.23 L1027.07 1209.23 L1026.49 1209.23 L1025.9 1209.23 L1025.32 1209.23 L1024.73 1209.23 L1024.14 1209.23 L1023.56 1209.23 L1022.97 1209.23 L1022.38 1209.23 L1021.8 1209.23 L1021.21 1209.23 L1020.62 1209.23 L1020.04 1209.23 L1019.45 1209.23 L1018.86 1209.23 L1018.28 1209.23 L1017.69 1209.23 L1017.11 1209.23 L1016.52 1209.23 L1015.93 1209.23 L1015.35 1209.23 L1014.76 1209.23 L1014.17 1209.23 L1013.59 1209.23 L1013 1209.23 L1012.41 1209.23 L1011.83 1209.23 L1011.24 1209.23 L1010.65 1209.23 L1010.07 1209.23 L1009.48 1209.23 L1008.9 1209.23 L1008.31 1209.23 L1007.72 1209.23 L1007.14 1209.23 L1006.55 1209.23 L1005.96 1209.23 L1005.38 1209.23 L1004.79 1209.23 L1004.2 1209.23 L1003.62 1209.23 L1003.03 1209.23 L1002.44 1209.23 L1001.86 1209.23 L1001.27 1209.23 L1000.69 1209.23 L1000.1 1209.23 L999.513 1209.23 L998.926 1209.23 L998.34 1209.23 L997.754 1209.23 L997.167 1209.23 L996.581 1209.23 L995.994 1209.23 L995.408 1209.23 L994.822 1209.23 L994.235 1209.23 L993.649 1209.23 L993.062 1209.23 L992.476 1209.23 L991.889 1209.23 L991.303 1209.23 L990.717 1209.23 L990.13 1209.23 L989.544 1209.23 L988.957 1209.23 L988.371 1209.23 L987.785 1209.23 L987.198 1209.23 L986.612 1209.23 L986.025 1209.23  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip202)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1209.33 986.612,1209.33 987.198,1209.33 987.785,1209.33 988.371,1209.33 988.957,1209.33 989.544,1209.33 990.13,1209.33 990.717,1209.33 991.303,1209.33 991.889,1209.33 992.476,1209.33 993.062,1209.33 993.649,1209.33 994.235,1209.33 994.822,1209.33 995.408,1209.33 995.994,1209.33 996.581,1209.33 997.167,1209.33 997.754,1209.33 998.34,1209.33 998.926,1209.33 999.513,1209.33 1000.1,1209.33 1000.69,1209.33 1001.27,1209.33 1001.86,1209.33 1002.44,1209.33 1003.03,1209.33 1003.62,1209.33 1004.2,1209.33 1004.79,1209.33 1005.38,1209.33 1005.96,1209.33 1006.55,1209.33 1007.14,1209.33 1007.72,1209.33 1008.31,1209.33 1008.9,1209.33 1009.48,1209.33 1010.07,1209.33 1010.65,1209.33 1011.24,1209.33 1011.83,1209.33 1012.41,1209.33 1013,1209.33 1013.59,1209.33 1014.17,1209.33 1014.76,1209.33 1015.35,1209.33 1015.93,1209.33 1016.52,1209.33 1017.11,1209.33 1017.69,1209.33 1018.28,1209.33 1018.86,1209.33 1019.45,1209.33 1020.04,1209.33 1020.62,1209.33 1021.21,1209.33 1021.8,1209.33 1022.38,1209.33 1022.97,1209.33 1023.56,1209.33 1024.14,1209.33 1024.73,1209.33 1025.32,1209.33 1025.9,1209.33 1026.49,1209.33 1027.07,1209.33 1027.66,1209.33 1028.25,1209.33 1028.83,1209.33 1029.42,1209.33 1030.01,1209.33 1030.59,1209.33 1031.18,1209.33 1031.77,1209.33 1032.35,1209.33 1032.94,1209.33 1033.52,1209.33 1034.11,1209.33 1034.7,1209.33 1035.28,1209.33 1035.87,1209.33 1036.46,1209.33 1037.04,1209.33 1037.63,1209.33 1038.22,1209.33 1038.8,1209.33 1039.39,1209.33 1039.98,1209.33 1040.56,1209.33 1041.15,1209.33 1041.73,1209.33 1042.32,1209.33 1042.91,1209.33 1043.49,1209.33 1044.08,1209.33 1044.67,1209.33 1045.25,1209.33 1045.84,1209.33 1046.43,1209.33 1047.01,1209.33 1047.6,1209.33 1048.19,1209.33 1048.77,1209.33 1049.36,1209.33 1049.94,1209.33 1050.53,1209.33 1051.12,1209.33 1051.7,1209.33 1052.29,1209.33 1052.88,1209.33 1053.46,1209.33 1054.05,1209.33 1054.64,1209.33 1055.22,1209.33 1055.81,1209.33 1056.39,1209.33 1056.98,1209.33 1057.57,1209.33 1058.15,1209.33 1058.74,1209.33 1059.33,1209.33 1059.91,1209.33 1060.5,1209.33 1061.09,1209.33 1061.67,1209.33 1062.26,1209.33 1062.85,1209.33 1063.43,1209.33 1064.02,1209.33 1064.6,1209.33 1065.19,1209.33 1065.78,1209.33 1066.36,1209.33 1066.95,1209.33 1067.54,1209.33 1068.12,1209.33 1068.71,1209.33 1069.3,1209.33 1069.88,1209.33 1070.47,1209.33 1071.06,1209.33 1071.64,1209.33 1072.23,1209.33 1072.81,1209.33 1073.4,1209.33 1073.99,1209.33 1074.57,1209.33 1075.16,1209.33 1075.75,1209.33 1076.33,1209.33 1076.92,1209.33 1077.51,1209.33 1078.09,1209.33 1078.68,1209.33 1079.26,1209.33 1079.85,1209.33 1080.44,1209.33 1081.02,1209.33 1081.61,1209.33 1082.2,1209.33 1082.78,1209.33 1083.37,1209.33 1083.96,1209.33 1084.54,1209.33 1085.13,1209.33 1085.72,1209.33 1086.3,1209.33 1086.89,1209.33 1087.47,1209.33 1088.06,1209.33 1088.65,1209.33 1089.23,1209.33 1089.82,1209.33 1090.41,1209.33 1090.99,1209.33 1091.58,1209.33 1092.17,1209.33 1092.75,1209.33 1093.34,1209.33 1093.93,1209.33 1094.51,1209.33 1095.1,1209.33 1095.68,1209.33 1096.27,1209.33 1096.86,1209.33 1097.44,1209.33 1098.03,1209.33 1098.62,1209.33 1099.2,1209.33 1099.79,1209.33 1100.38,1209.33 1100.96,1209.33 1101.55,1209.33 1102.14,1209.33 1102.72,1209.33 1103.31,1209.33 1103.89,1209.33 1104.48,1209.33 1105.07,1209.33 1105.65,1209.33 1106.24,1209.33 1106.83,1209.33 1107.41,1209.33 1108,1209.33 1108.59,1209.33 1109.17,1209.33 1109.76,1209.33 1110.34,1209.33 1110.93,1209.33 1111.52,1209.33 1112.1,1209.33 1112.69,1209.33 1113.28,1209.33 1113.86,1209.33 1114.45,1209.33 1115.04,1209.33 1115.62,1209.33 1116.21,1209.33 1116.8,1209.33 1117.38,1209.33 1117.97,1209.33 1118.55,1209.33 1119.14,1209.33 1119.73,1209.33 1120.31,1209.33 1120.9,1209.33 1121.49,1209.33 1122.07,1209.33 1122.66,1209.33 1123.25,1209.33 1123.83,1209.33 1124.42,1209.33 1125.01,1209.33 1125.59,1209.33 1126.18,1209.33 1126.76,1209.33 1127.35,1209.33 1127.94,1209.33 1128.52,1209.33 1129.11,1209.33 1129.7,1209.33 1130.28,1209.33 1130.87,1209.33 1131.46,1209.33 1132.04,1209.33 1132.63,1209.33 1133.21,1209.33 1133.8,1209.33 1134.39,1209.33 1134.97,1209.33 1135.56,1209.33 1136.15,1209.33 1136.73,1209.33 1137.32,1209.33 1137.91,1209.33 1138.49,1209.33 1139.08,1209.33 1139.67,1209.33 1140.25,1209.33 1140.84,1209.33 1141.42,1209.33 1142.01,1209.33 1142.6,1209.33 1143.18,1209.33 1143.77,1209.33 1144.36,1209.33 1144.94,1209.33 1145.53,1209.33 1146.12,1209.33 1146.7,1209.33 1147.29,1209.33 1147.88,1209.33 1148.46,1209.33 1149.05,1209.33 1149.63,1209.33 1150.22,1209.33 1150.81,1209.33 1151.39,1209.33 1151.98,1209.33 1152.57,1209.33 1153.15,1209.33 1153.74,1209.33 1154.33,1209.33 1154.91,1209.33 1155.5,1209.33 1156.09,1209.33 1156.67,1209.33 1157.26,1209.33 1157.84,1209.33 1158.43,1209.33 1159.02,1209.33 1159.6,1209.33 1160.19,1209.33 1160.78,1209.33 1161.36,1209.33 1161.95,1209.33 1162.54,1209.33 1163.12,1209.33 1163.71,1209.33 1164.29,1209.33 1164.88,1209.33 1165.47,1209.33 1166.05,1209.33 1166.64,1209.33 1167.23,1209.33 1167.81,1209.33 1168.4,1209.33 1168.99,1209.33 1169.57,1209.33 1170.16,1209.33 1170.75,1209.33 1171.33,1209.33 1171.92,1209.33 1172.5,1209.33 1173.09,1209.33 1173.68,1209.33 1174.26,1209.33 1174.85,1209.33 1175.44,1209.33 1176.02,1209.33 1176.61,1209.33 1177.2,1209.33 1177.78,1209.33 1178.37,1209.33 1178.96,1209.33 1179.54,1209.33 1180.13,1209.33 1180.71,1209.33 1181.3,1209.33 1181.89,1209.33 1182.47,1209.33 1183.06,1209.33 1183.65,1209.33 1184.23,1209.33 1184.82,1209.33 1185.41,1209.33 1185.99,1209.33 1186.58,1209.33 1187.16,1209.33 1187.75,1209.33 1188.34,1209.33 1188.92,1209.33 1189.51,1209.33 1190.1,1209.33 1190.68,1209.33 1191.27,1209.33 1191.86,1209.33 1192.44,1209.33 1193.03,1209.33 1193.62,1209.33 1194.2,1209.33 1194.79,1209.33 1195.37,1209.33 1195.96,1209.33 1196.55,1209.33 1197.13,1209.33 1197.72,1209.33 1198.31,1209.33 1198.89,1209.33 1199.48,1209.33 1200.07,1209.33 1200.65,1209.33 1201.24,1209.33 1201.83,1209.33 1202.41,1209.33 1203,1209.33 1203.58,1209.33 1204.17,1209.33 1204.76,1209.33 1205.34,1209.33 1205.93,1209.33 1206.52,1209.33 1207.1,1209.33 1207.69,1209.33 1208.28,1209.33 1208.86,1209.33 1209.45,1209.33 1210.03,1209.33 1210.62,1209.33 1211.21,1209.33 1211.79,1209.33 1212.38,1209.33 1212.97,1209.33 1213.55,1209.33 1214.14,1209.33 1214.73,1209.33 1215.31,1209.33 1215.9,1209.33 1216.49,1209.33 1217.07,1209.33 1217.66,1209.33 1218.24,1209.33 1218.83,1209.33 1219.42,1209.33 1220,1209.33 1220.59,1209.33 1221.18,1209.33 1221.76,1209.33 1222.35,1209.33 1222.94,1209.33 1223.52,1209.33 1224.11,1209.33 1224.7,1209.33 1225.28,1209.33 1225.87,1209.33 1226.45,1209.33 1227.04,1209.33 1227.63,1209.33 1228.21,1209.33 1228.8,1209.33 1229.39,1209.33 1229.97,1209.33 1230.56,1209.33 1231.15,1209.33 1231.73,1209.33 1232.32,1209.33 1232.91,1209.33 1233.49,1209.33 1234.08,1209.33 1234.66,1209.33 1235.25,1209.33 1235.84,1209.33 1236.42,1209.33 1237.01,1209.33 1237.6,1209.33 1238.18,1209.33 1238.77,1209.33 1239.36,1209.33 1239.94,1209.33 1240.53,1209.33 1241.11,1209.33 1241.7,1209.33 1242.29,1209.33 1242.87,1209.33 1243.46,1209.33 1244.05,1209.33 1244.63,1209.33 1245.22,1209.33 1245.81,1209.33 1246.39,1209.33 1246.98,1209.33 1247.57,1209.33 1248.15,1209.33 1248.74,1209.33 1249.32,1209.33 1249.91,1209.33 1250.5,1209.33 1251.08,1209.33 1251.67,1209.33 1252.26,1209.33 1252.84,1209.33 1253.43,1209.33 1254.02,1209.33 1254.6,1209.33 1255.19,1209.33 1255.78,1209.33 1256.36,1209.33 1256.95,1209.33 1257.53,1209.33 1258.12,1209.33 1258.71,1209.33 1259.29,1209.33 1259.88,1209.33 1260.47,1209.33 1261.05,1209.33 1261.64,1209.33 1262.23,1209.33 1262.81,1209.33 1263.4,1209.33 1263.98,1209.33 1264.57,1209.33 1265.16,1209.33 1265.74,1209.33 1266.33,1209.33 1266.92,1209.33 1267.5,1209.33 1268.09,1209.33 1268.68,1209.33 1269.26,1209.33 1269.85,1209.33 1270.44,1209.33 1271.02,1209.33 1271.61,1209.33 1272.19,1209.33 1272.78,1209.33 1273.37,1209.33 1273.95,1209.33 1274.54,1209.33 1275.13,1209.33 1275.71,1209.33 1276.3,1209.33 1276.89,1209.33 1277.47,1209.33 1278.06,1209.33 1278.65,1209.33 1279.23,1209.33 1279.82,1209.33 1280.4,1209.33 1280.99,1209.33 1281.58,1209.33 1282.16,1209.33 1282.75,1209.33 1283.34,1209.33 1283.92,1209.33 1284.51,1209.33 1285.1,1209.33 1285.68,1209.33 1286.27,1209.33 1286.86,1209.33 1287.44,1209.33 1288.03,1209.33 1288.61,1209.33 1289.2,1209.33 1289.79,1209.33 1290.37,1209.33 1290.96,1209.33 1291.55,1209.33 1292.13,1209.33 1292.72,1209.33 1293.31,1209.33 1293.89,1209.33 1294.48,1209.33 1295.06,1209.33 1295.65,1209.33 1296.24,1209.33 1296.82,1209.33 1297.41,1209.33 1298,1209.33 1298.58,1209.33 1299.17,1209.33 1299.76,1209.33 1300.34,1209.33 1300.93,1209.33 1301.52,1209.33 1302.1,1209.33 1302.69,1209.33 1303.27,1209.33 1303.86,1209.33 1304.45,1209.33 1305.03,1209.33 1305.62,1209.33 1306.21,1209.33 1306.79,1209.33 1307.38,1209.33 1307.97,1209.33 1308.55,1209.33 1309.14,1209.33 1309.73,1209.33 1310.31,1209.33 1310.9,1209.33 1311.48,1209.33 1312.07,1209.33 1312.66,1209.33 1313.24,1209.33 1313.83,1209.33 1314.42,1209.33 1315,1209.33 1315.59,1209.33 1316.18,1209.33 1316.76,1209.33 1317.35,1209.33 1317.93,1209.33 1318.52,1209.33 1319.11,1209.33 1319.69,1209.33 1320.28,1209.33 1320.87,1209.33 1321.45,1209.33 1322.04,1209.33 1322.63,1209.33 1323.21,1209.33 1323.8,1209.33 1324.39,1209.33 1324.97,1209.33 1325.56,1209.33 1326.14,1209.33 1326.73,1209.33 1327.32,1209.33 1327.9,1209.33 1328.49,1209.33 1329.08,1209.33 1329.66,1209.33 1330.25,1209.33 1330.84,1209.33 1331.42,1209.33 1332.01,1209.33 1332.6,1209.33 1333.18,1209.33 1333.77,1209.33 1334.35,1209.33 1334.94,1209.33 1335.53,1209.33 1336.11,1209.33 1336.7,1209.33 1337.29,1209.33 1337.87,1209.33 1338.46,1209.33 1339.05,1209.33 1339.63,1209.33 1340.22,1209.33 1340.8,1209.33 1341.39,1209.33 1341.98,1209.33 1342.56,1209.33 1343.15,1209.33 1343.74,1209.33 1344.32,1209.33 1344.91,1209.33 1345.5,1209.33 1346.08,1209.33 1346.67,1209.33 1347.26,1209.33 1347.84,1209.33 1348.43,1209.33 1349.01,1209.33 1349.6,1209.33 1350.19,1209.33 1350.77,1209.33 1351.36,1209.33 1351.95,1209.33 1352.53,1209.33 1353.12,1209.33 1353.71,1209.33 1354.29,1209.33 1354.88,1209.33 1355.47,1209.33 1356.05,1209.33 1356.64,1209.33 1357.22,1209.33 1357.81,1209.33 1358.4,1209.33 1358.98,1209.33 1359.57,1209.33 1360.16,1209.33 1360.74,1209.33 1361.33,1209.33 1361.92,1209.33 1362.5,1209.33 1363.09,1209.33 1363.68,1209.33 1364.26,1209.33 1364.85,1209.33 1365.43,1209.33 1366.02,1209.33 1366.61,1209.33 1367.19,1209.33 1367.78,1209.33 1368.37,1209.33 1368.95,1209.33 1369.54,1209.33 1370.13,1209.33 1370.71,1209.33 1371.3,1209.33 1371.88,1209.33 1372.47,1209.33 1373.06,1209.33 1373.64,1209.33 1374.23,1209.33 1374.82,1209.33 1375.4,1209.33 1375.99,1209.33 1376.58,1209.33 1377.16,1209.33 1377.75,1209.33 1378.34,1209.33 1378.92,1209.33 1379.51,1209.33 1380.09,1209.33 1380.68,1209.33 1381.27,1209.33 1381.85,1209.33 1382.44,1209.33 1383.03,1209.33 1383.61,1209.33 1384.2,1209.33 1384.79,1209.33 1385.37,1209.33 1385.96,1209.33 1386.55,1209.33 1387.13,1209.33 1387.72,1209.33 1388.3,1209.33 1388.89,1209.33 1389.48,1209.33 1390.06,1209.33 1390.65,1209.33 1391.24,1209.33 1391.82,1209.33 1392.41,1209.33 1393,1209.33 1393.58,1209.33 1394.17,1209.33 1394.75,1209.33 1395.34,1209.33 1395.93,1209.33 1396.51,1209.33 1397.1,1209.33 1397.69,1209.33 1398.27,1209.33 1398.86,1209.33 1399.45,1209.33 1400.03,1209.33 1400.62,1209.33 1401.21,1209.33 1401.79,1209.33 1402.38,1209.33 1402.96,1209.33 1403.55,1209.33 1404.14,1209.33 1404.72,1209.33 1405.31,1209.33 1405.9,1209.33 1406.48,1209.33 1407.07,1209.33 1407.66,1209.33 1408.24,1209.33 1408.83,1209.33 1409.42,1209.33 1410,1209.33 1410.59,1209.33 1411.17,1209.33 1411.76,1209.33 1412.35,1209.33 1412.93,1209.33 1413.52,1209.33 1414.11,1209.33 1414.69,1209.33 1415.28,1209.33 1415.87,1209.33 1416.45,1209.33 1417.04,1209.33 1417.63,1209.33 1418.21,1209.33 1418.8,1209.33 1419.38,1209.33 1419.97,1209.33 1420.56,1209.33 1421.14,1209.33 1421.73,1209.33 1422.32,1209.33 1422.9,1209.33 1423.49,1209.33 1424.08,1209.33 1424.66,1209.33 1425.25,1209.33 1425.83,1209.33 1426.42,1209.33 1427.01,1209.33 1427.59,1209.33 1428.18,1209.33 1428.77,1209.33 1429.35,1209.33 1429.94,1209.33 1430.53,1209.33 1431.11,1209.33 1431.7,1209.33 1432.29,1209.33 1432.87,1209.33 1433.46,1209.33 1434.04,1209.33 1434.63,1209.33 1435.22,1209.33 1435.8,1209.33 1436.39,1209.33 1436.98,1209.33 1437.56,1209.33 1438.15,1209.33 1438.74,1209.33 1439.32,1209.33 1439.91,1209.33 1440.5,1209.33 1441.08,1209.33 1441.67,1209.33 1442.25,1209.33 1442.84,1209.33 1443.43,1209.33 1444.01,1209.33 1444.6,1209.33 1445.19,1209.33 1445.77,1209.33 1446.36,1209.33 1446.95,1209.33 1447.53,1209.33 1448.12,1209.33 1448.7,1209.33 1449.29,1209.33 1449.88,1209.33 1450.46,1209.33 1451.05,1209.33 1451.64,1209.33 1452.22,1209.33 1452.81,1209.33 1453.4,1209.33 1453.98,1209.33 1454.57,1209.33 1455.16,1209.33 1455.74,1209.33 1456.33,1209.33 1456.91,1209.33 1457.5,1209.33 1458.09,1209.33 1458.67,1209.33 1459.26,1209.33 1459.85,1209.33 1460.43,1209.33 1461.02,1209.33 1461.61,1209.33 1462.19,1209.33 1462.78,1209.33 1463.37,1209.33 1463.95,1209.33 1464.54,1209.33 1465.12,1209.33 1465.71,1209.33 1466.3,1209.33 1466.88,1209.33 1467.47,1209.33 1468.06,1209.33 1468.64,1209.33 1469.23,1209.33 1469.82,1209.33 1470.4,1209.33 1470.99,1209.33 1471.57,1209.33 1472.16,1209.33 1472.75,1209.33 1473.33,1209.33 1473.92,1209.33 1474.51,1209.33 1475.09,1209.33 1475.68,1209.33 1476.27,1209.33 1476.85,1209.33 1477.44,1209.33 1478.03,1209.33 1478.61,1209.33 1479.2,1209.33 1479.78,1209.33 1480.37,1209.33 1480.96,1209.33 1481.54,1209.33 1482.13,1209.33 1482.72,1209.33 1483.3,1209.33 1483.89,1209.33 1484.48,1209.33 1485.06,1209.33 1485.65,1209.33 1486.24,1209.33 1486.82,1209.33 1487.41,1209.33 1487.99,1209.33 1488.58,1209.33 1489.17,1209.33 1489.75,1209.33 1490.34,1209.33 1490.93,1209.33 1491.51,1209.33 1492.1,1209.33 1492.69,1209.33 1493.27,1209.33 1493.86,1209.33 1494.45,1209.33 1495.03,1209.33 1495.62,1209.33 1496.2,1209.33 1496.79,1209.33 1497.38,1209.33 1497.96,1209.33 1498.55,1209.33 1499.14,1209.33 1499.72,1209.33 1500.31,1209.33 1500.9,1209.33 1501.48,1209.33 1502.07,1209.33 1502.65,1209.33 1503.24,1209.33 1503.83,1209.33 1504.41,1209.33 1505,1209.33 1505.59,1209.33 1506.17,1209.33 1506.76,1209.33 1507.35,1209.33 1507.93,1209.33 1508.52,1209.33 1509.11,1209.33 1509.69,1209.33 1510.28,1209.33 1510.86,1209.33 1511.45,1209.33 1512.04,1209.33 1512.62,1209.33 1513.21,1209.33 1513.8,1209.33 1514.38,1209.33 1514.97,1209.33 1515.56,1209.33 1516.14,1209.33 1516.73,1209.33 1517.32,1209.33 1517.9,1209.33 1518.49,1209.33 1519.07,1209.33 1519.66,1209.33 1520.25,1209.33 1520.83,1209.33 1521.42,1209.33 1522.01,1209.33 1522.59,1209.33 1523.18,1209.33 1523.77,1209.33 1524.35,1209.33 1524.94,1209.33 1525.52,1209.33 1526.11,1209.33 1526.7,1209.33 1527.28,1209.33 1527.87,1209.33 1528.46,1209.33 1529.04,1209.33 1529.63,1209.33 1530.22,1209.33 1530.8,1209.33 1531.39,1209.33 1531.98,1209.33 1532.56,1209.33 1533.15,1209.33 1533.73,1209.33 1534.32,1209.33 1534.91,1209.33 1535.49,1209.33 1536.08,1209.33 1536.67,1209.33 1537.25,1209.33 1537.84,1209.33 1538.43,1209.33 1539.01,1209.33 1539.6,1209.33 1540.19,1209.33 1540.77,1209.33 1541.36,1209.33 1541.94,1209.33 1542.53,1209.33 1543.12,1209.33 1543.7,1209.33 1544.29,1209.33 1544.88,1209.33 1545.46,1209.33 1546.05,1209.33 1546.64,1209.33 1547.22,1209.33 1547.81,1209.33 1548.4,1209.33 1548.98,1209.33 1549.57,1209.33 1550.15,1209.33 1550.74,1209.33 1551.33,1209.33 1551.91,1209.33 1552.5,1209.33 1553.09,1209.33 1553.67,1209.33 1554.26,1209.33 1554.85,1209.33 1555.43,1209.33 1556.02,1209.33 1556.6,1209.33 1557.19,1209.33 1557.78,1209.33 1558.36,1209.33 1558.95,1209.33 1559.54,1209.33 1560.12,1209.33 1560.71,1209.33 1561.3,1209.33 1561.88,1209.33 1562.47,1209.33 1563.06,1209.33 1563.64,1209.33 1564.23,1209.33 1564.81,1209.33 1565.4,1209.33 1565.99,1209.33 1566.57,1209.33 1567.16,1209.33 1567.75,1209.33 1568.33,1209.33 1568.92,1209.33 1569.51,1209.33 1570.09,1209.33 1570.68,1209.33 1571.27,1209.33 1571.85,1209.33 1572.44,1209.33 1573.02,1209.33 1573.61,1209.33 1574.2,1209.33 1574.78,1209.33 1575.37,1209.33 1575.96,1209.33 1576.54,1209.33 1577.13,1209.33 1577.72,1209.33 1578.3,1209.33 1578.89,1209.33 1579.47,1209.33 1580.06,1209.33 1580.65,1209.33 1581.23,1209.33 1581.82,1209.33 1582.41,1209.33 1582.99,1209.33 1583.58,1209.33 1584.17,1209.33 1584.75,1209.33 1585.34,1209.33 1585.93,1209.33 1586.51,1209.33 1587.1,1209.33 1587.68,1209.33 1588.27,1209.33 1588.86,1209.33 1589.44,1209.33 1590.03,1209.33 1590.62,1209.33 1591.2,1209.33 1591.79,1209.33 1592.38,1209.33 1592.96,1209.33 1593.55,1209.33 1594.14,1209.33 1594.72,1209.33 1595.31,1209.33 1595.89,1209.33 1596.48,1209.33 1597.07,1209.33 1597.65,1209.33 1598.24,1209.33 1598.83,1209.33 1599.41,1209.33 1600,1209.33 1600.59,1209.33 1601.17,1209.33 1601.76,1209.33 1602.34,1209.33 1602.93,1209.33 1603.52,1209.33 1604.1,1209.33 1604.69,1209.33 1605.28,1209.33 1605.86,1209.33 1606.45,1209.33 1607.04,1209.33 1607.62,1209.33 1608.21,1209.33 1608.8,1209.33 1609.38,1209.33 1609.97,1209.33 1610.55,1209.33 1611.14,1209.33 1611.73,1209.33 1612.31,1209.33 1612.9,1209.33 1613.49,1209.33 1614.07,1209.33 1614.66,1209.33 1615.25,1209.33 1615.83,1209.33 1616.42,1209.33 1617.01,1209.33 1617.59,1209.33 1618.18,1209.33 1618.76,1209.33 1619.35,1209.33 1619.94,1209.33 1620.52,1209.33 1621.11,1209.33 1621.7,1209.33 1622.28,1209.33 1622.87,1209.33 1623.46,1209.33 1624.04,1209.33 1624.63,1209.33 1625.22,1209.33 1625.8,1209.33 1626.39,1209.33 1626.97,1209.33 1627.56,1209.33 1628.15,1209.33 1628.73,1209.33 1629.32,1209.33 1629.91,1209.33 1630.49,1209.33 1631.08,1209.33 1631.67,1209.33 1632.25,1209.33 1632.84,1209.33 1633.42,1209.33 1634.01,1209.33 1634.6,1209.33 1635.18,1209.33 1635.77,1209.33 1636.36,1209.33 1636.94,1209.33 1637.53,1209.33 1638.12,1209.33 1638.7,1209.33 1639.29,1209.33 1639.88,1209.33 1640.46,1209.33 1641.05,1209.33 1641.63,1209.33 1642.22,1209.33 1642.81,1209.33 1643.39,1209.33 1643.98,1209.33 1644.57,1209.33 1645.15,1209.33 1645.74,1209.33 1646.33,1209.33 1646.91,1209.33 1647.5,1209.33 1648.09,1209.33 1648.67,1209.33 1649.26,1209.33 1649.84,1209.33 1650.43,1209.33 1651.02,1209.33 1651.6,1209.33 1652.19,1209.33 1652.78,1209.33 1653.36,1209.33 1653.95,1209.33 1654.54,1209.33 1655.12,1209.33 1655.71,1209.33 1656.29,1209.33 1656.88,1209.33 1657.47,1209.33 1658.05,1209.33 1658.64,1209.33 1659.23,1209.33 1659.81,1209.33 1660.4,1209.33 1660.99,1209.33 1661.57,1209.33 1662.16,1209.33 1662.75,1209.33 1663.33,1209.33 1663.92,1209.33 1664.5,1209.33 1665.09,1209.33 1665.68,1209.33 1666.26,1209.33 1666.85,1209.33 1667.44,1209.33 1668.02,1209.33 1668.61,1209.33 1669.2,1209.33 1669.78,1209.33 1670.37,1209.33 1670.96,1209.33 1671.54,1209.33 1672.13,1209.33 1672.71,1209.33 1673.3,1209.33 1673.89,1209.33 1674.47,1209.33 1675.06,1209.33 1675.65,1209.33 1676.23,1209.33 1676.82,1209.33 1677.41,1209.33 1677.99,1209.33 1678.58,1209.33 1679.17,1209.33 1679.75,1209.33 1680.34,1209.33 1680.92,1209.33 1681.51,1209.33 1682.1,1209.33 1682.68,1209.33 1683.27,1209.33 1683.86,1209.33 1684.44,1209.33 1685.03,1209.33 1685.62,1209.33 1686.2,1209.33 1686.79,1209.33 1687.37,1209.33 1687.96,1209.33 1688.55,1209.33 1689.13,1209.33 1689.72,1209.33 1690.31,1209.33 1690.89,1209.33 1691.48,1209.33 1692.07,1209.33 1692.65,1209.33 1693.24,1209.33 1693.83,1209.33 1694.41,1209.33 1695,1209.33 1695.58,1209.33 1696.17,1209.33 1696.76,1209.33 1697.34,1209.33 1697.93,1209.33 1698.52,1209.33 1699.1,1209.33 1699.69,1209.33 1700.28,1209.33 1700.86,1209.33 1701.45,1209.33 1702.04,1209.33 1702.62,1209.33 1703.21,1209.33 1703.79,1209.33 1704.38,1209.33 1704.97,1209.33 1705.55,1209.33 1706.14,1209.33 1706.73,1209.33 1707.31,1209.33 1707.9,1209.33 1708.49,1209.33 1709.07,1209.33 1709.66,1209.33 1710.24,1209.33 1710.83,1209.33 1711.42,1209.33 1712,1209.33 1712.59,1209.33 1713.18,1209.33 1713.76,1209.33 1714.35,1209.33 1714.94,1209.33 1715.52,1209.33 1716.11,1209.33 1716.7,1209.33 1717.28,1209.33 1717.87,1209.33 1718.45,1209.33 1719.04,1209.33 1719.63,1209.33 1720.21,1209.33 1720.8,1209.33 1721.39,1209.33 1721.97,1209.33 1722.56,1209.33 1723.15,1209.33 1723.73,1209.33 1724.32,1209.33 1724.91,1209.33 1725.49,1209.33 1726.08,1209.33 1726.66,1209.33 1727.25,1209.33 1727.84,1209.33 1728.42,1209.33 1729.01,1209.33 1729.6,1209.33 1730.18,1209.33 1730.77,1209.33 1731.36,1209.33 1731.94,1209.33 1732.53,1209.33 1733.11,1209.33 1733.7,1209.33 1734.29,1209.33 1734.87,1209.33 1735.46,1209.33 1736.05,1209.33 1736.63,1209.33 1737.22,1209.33 1737.81,1209.33 1738.39,1209.33 1738.98,1209.33 1739.57,1209.33 1740.15,1209.33 1740.74,1209.33 1741.32,1209.33 1741.91,1209.33 1742.5,1209.33 1743.08,1209.33 1743.67,1209.33 1744.26,1209.33 1744.84,1209.33 1745.43,1209.33 1746.02,1209.33 1746.6,1209.33 1747.19,1209.33 1747.78,1209.33 1748.36,1209.33 1748.95,1209.33 1749.53,1209.33 1750.12,1209.33 1750.71,1209.33 1751.29,1209.33 1751.88,1209.33 1752.47,1209.33 1753.05,1209.33 1753.64,1209.33 1754.23,1209.33 1754.81,1209.33 1755.4,1209.33 1755.99,1209.33 1756.57,1209.33 1757.16,1209.33 1757.74,1209.33 1758.33,1209.33 1758.92,1209.33 1759.5,1209.33 1760.09,1209.33 1760.68,1209.33 1761.26,1209.33 1761.85,1209.33 1762.44,1209.33 1763.02,1209.33 1763.61,1209.33 1764.19,1209.33 1764.78,1209.33 1765.37,1209.33 1765.95,1209.33 1766.54,1209.33 1767.13,1209.33 1767.71,1209.33 1768.3,1209.33 1768.89,1209.33 1769.47,1209.33 1770.06,1209.33 1770.65,1209.33 1771.23,1209.33 1771.82,1209.33 1772.4,1209.33 1772.99,1209.33 1773.58,1209.33 1774.16,1209.33 1774.75,1209.33 1775.34,1209.33 1775.92,1209.33 1776.51,1209.33 1777.1,1209.33 1777.68,1209.33 1778.27,1209.33 1778.86,1209.33 1779.44,1209.33 1780.03,1209.33 1780.61,1209.33 1781.2,1209.33 1781.79,1209.33 1782.37,1209.33 1782.96,1209.33 1783.55,1209.33 1784.13,1209.33 1784.72,1209.33 1785.31,1209.33 1785.89,1209.33 1786.48,1209.33 1787.06,1209.33 1787.65,1209.33 1788.24,1209.33 1788.82,1209.33 1789.41,1209.33 1790,1209.33 1790.58,1209.33 1791.17,1209.33 1791.76,1209.33 1792.34,1209.33 1792.93,1209.33 1793.52,1209.33 1794.1,1209.33 1794.69,1209.33 1795.27,1209.33 1795.86,1209.33 1796.45,1209.33 1797.03,1209.33 1797.62,1209.33 1798.21,1209.33 1798.79,1209.33 1799.38,1209.33 1799.97,1209.33 1800.55,1209.33 1801.14,1209.33 1801.73,1209.33 1802.31,1209.33 1802.9,1209.33 1803.48,1209.33 1804.07,1209.33 1804.66,1209.33 1805.24,1209.33 1805.83,1209.33 1806.42,1209.33 1807,1209.33 1807.59,1209.33 1808.18,1209.33 1808.76,1209.33 1809.35,1209.33 1809.94,1209.33 1810.52,1209.33 1811.11,1209.33 1811.69,1209.33 1812.28,1209.33 1812.87,1209.33 1813.45,1209.33 1814.04,1209.33 1814.63,1209.33 1815.21,1209.33 1815.8,1209.33 1816.39,1209.33 1816.97,1209.33 1817.56,1209.33 1818.14,1209.33 1818.73,1209.33 1819.32,1209.33 1819.9,1209.33 1820.49,1209.33 1821.08,1209.33 1821.66,1209.33 1822.25,1209.33 1822.84,1209.33 1823.42,1209.33 1824.01,1209.33 1824.6,1209.33 1825.18,1209.33 1825.77,1209.33 1826.35,1209.33 1826.94,1209.33 1827.53,1209.33 1828.11,1209.33 1828.7,1209.33 1829.29,1209.33 1829.87,1209.33 1830.46,1209.33 1831.05,1209.33 1831.63,1209.33 1832.22,1209.33 1832.81,1209.33 1833.39,1209.33 1833.98,1209.33 1834.56,1209.33 1835.15,1209.33 1835.74,1209.33 1836.32,1209.33 1836.91,1209.33 1837.5,1209.33 1838.08,1209.33 1838.67,1209.33 1839.26,1209.33 1839.84,1209.33 1840.43,1209.33 1841.01,1209.33 1841.6,1209.33 1842.19,1209.33 1842.77,1209.33 1843.36,1209.33 1843.95,1209.33 1844.53,1209.33 1845.12,1209.33 1845.71,1209.33 1846.29,1209.33 1846.88,1209.33 1847.47,1209.33 1848.05,1209.33 1848.64,1209.33 1849.22,1209.33 1849.81,1209.33 1850.4,1209.33 1850.98,1209.33 1851.57,1209.33 1852.16,1209.33 1852.74,1209.33 1853.33,1209.33 1853.92,1209.33 1854.5,1209.33 1855.09,1209.33 1855.68,1209.33 1856.26,1209.33 1856.85,1209.33 1857.43,1209.33 1858.02,1209.33 1858.61,1209.33 1859.19,1209.33 1859.78,1209.33 1860.37,1209.33 1860.95,1209.33 1861.54,1209.33 1862.13,1209.33 1862.71,1209.33 1863.3,1209.33 1863.88,1209.33 1864.47,1209.33 1865.06,1209.33 1865.64,1209.33 1866.23,1209.33 1866.82,1209.33 1867.4,1209.33 1867.99,1209.33 1868.58,1209.33 1869.16,1209.33 1869.75,1209.33 1870.34,1209.33 1870.92,1209.33 1871.51,1209.33 1872.09,1209.33 1872.68,1209.33 1873.27,1209.33 1873.85,1209.33 1874.44,1209.33 1875.03,1209.33 1875.61,1209.33 1876.2,1209.33 1876.79,1209.33 1877.37,1209.33 1877.96,1209.33 1878.55,1209.33 1879.13,1209.33 1879.72,1209.33 1880.3,1209.33 1880.89,1209.33 1881.48,1209.33 1882.06,1209.33 1882.65,1209.33 1883.24,1209.33 1883.82,1209.33 1884.41,1209.33 1885,1209.33 1885.58,1209.33 1886.17,1209.33 1886.76,1209.33 1887.34,1209.33 1887.93,1209.33 1888.51,1209.33 1889.1,1209.33 1889.69,1209.33 1890.27,1209.33 1890.86,1209.33 1891.45,1209.33 1892.03,1209.33 1892.62,1209.33 1893.21,1209.33 1893.79,1209.33 1894.38,1209.33 1894.96,1209.33 1895.55,1209.33 1896.14,1209.33 1896.72,1209.33 1897.31,1209.33 1897.9,1209.33 1898.48,1209.33 1899.07,1209.33 1899.66,1209.33 1900.24,1209.33 1900.83,1209.33 1901.42,1209.33 1902,1209.33 1902.59,1209.33 1903.17,1209.33 1903.76,1209.33 1904.35,1209.33 1904.93,1209.33 1905.52,1209.33 1906.11,1209.33 1906.69,1209.33 1907.28,1209.33 1907.87,1209.33 1908.45,1209.33 1909.04,1209.33 1909.63,1209.33 1910.21,1209.33 1910.8,1209.33 1911.38,1209.33 1911.97,1209.33 1912.56,1209.33 1913.14,1209.33 1913.73,1209.33 1914.32,1209.33 1914.9,1209.33 1915.49,1209.33 1916.08,1209.33 1916.66,1209.33 1917.25,1209.33 1917.83,1209.33 1918.42,1209.33 1919.01,1209.33 1919.59,1209.33 1920.18,1209.33 1920.77,1209.33 1921.35,1209.33 1921.94,1209.33 1922.53,1209.33 1923.11,1209.33 1923.7,1209.33 1924.29,1209.33 1924.87,1209.33 1925.46,1209.33 1926.04,1209.33 1926.63,1209.33 1927.22,1209.33 1927.8,1209.33 1928.39,1209.33 1928.98,1209.33 1929.56,1209.33 1930.15,1209.33 1930.74,1209.33 1931.32,1209.33 1931.91,1209.33 1932.5,1209.33 1933.08,1209.33 1933.67,1209.33 1934.25,1209.33 1934.84,1209.33 1935.43,1209.33 1936.01,1209.33 1936.6,1209.33 1937.19,1209.33 1937.77,1209.33 1938.36,1209.33 1938.95,1209.33 1939.53,1209.33 1940.12,1209.33 1940.71,1209.33 1941.29,1209.33 1941.88,1209.33 1942.46,1209.33 1943.05,1209.33 1943.64,1209.33 1944.22,1209.33 1944.81,1209.33 1945.4,1209.33 1945.98,1209.33 1946.57,1209.33 1947.16,1209.33 1947.74,1209.33 1948.33,1209.33 1948.91,1209.33 1949.5,1209.33 1950.09,1209.33 1950.67,1209.33 1951.26,1209.33 1951.85,1209.33 1952.43,1209.33 1953.02,1209.33 1953.61,1209.33 1954.19,1209.33 1954.78,1209.33 1955.37,1209.33 1955.95,1209.33 1956.54,1209.33 1957.12,1209.33 1957.71,1209.33 1958.3,1209.33 1958.88,1209.33 1959.47,1209.33 1960.06,1209.33 1960.64,1209.33 1961.23,1209.33 1961.82,1209.33 1962.4,1209.33 1962.99,1209.33 1963.58,1209.33 1964.16,1209.33 1964.75,1209.33 1965.33,1209.33 1965.92,1209.33 1966.51,1209.33 1967.09,1209.33 1967.68,1209.33 1968.27,1209.33 1968.85,1209.33 1969.44,1209.33 1970.03,1209.33 1970.61,1209.33 1971.2,1209.33 1971.78,1209.33 1972.37,1209.33 1972.96,1209.33 1973.54,1209.33 1974.13,1209.33 1974.72,1209.33 1975.3,1209.33 1975.89,1209.33 1976.48,1209.33 1977.06,1209.33 1977.65,1209.33 1978.24,1209.33 1978.82,1209.33 1979.41,1209.33 1979.99,1209.33 1980.58,1209.33 1981.17,1209.33 1981.75,1209.33 1982.34,1209.33 1982.93,1209.33 1983.51,1209.33 1984.1,1209.33 1984.69,1209.33 1985.27,1209.33 1985.86,1209.33 1986.45,1209.33 1987.03,1209.33 1987.62,1209.33 1988.2,1209.33 1988.79,1209.33 1989.38,1209.33 1989.96,1209.33 1990.55,1209.33 1991.14,1209.33 1991.72,1209.33 1992.31,1209.33 1992.9,1209.33 1993.48,1209.33 1994.07,1209.33 1994.65,1209.33 1995.24,1209.33 1995.83,1209.33 1996.41,1209.33 1997,1209.33 1997.59,1209.33 1998.17,1209.33 1998.76,1209.33 1999.35,1209.33 1999.93,1209.33 2000.52,1209.33 2001.11,1209.33 2001.69,1209.33 2002.28,1209.33 2002.86,1209.33 2003.45,1209.33 2004.04,1209.33 2004.62,1209.33 2005.21,1209.33 2005.8,1209.33 2006.38,1209.33 2006.97,1209.33 2007.56,1209.33 2008.14,1209.33 2008.73,1209.33 2009.32,1209.33 2009.9,1209.33 2010.49,1209.33 2011.07,1209.33 2011.66,1209.33 2012.25,1209.33 2012.83,1209.33 2013.42,1209.33 2014.01,1209.33 2014.59,1209.33 2015.18,1209.33 2015.77,1209.33 2016.35,1209.33 2016.94,1209.33 2017.53,1209.33 2018.11,1209.33 2018.7,1209.33 2019.28,1209.33 2019.87,1209.33 2020.46,1209.33 2021.04,1209.33 2021.63,1209.33 2022.22,1209.33 2022.8,1209.33 2023.39,1209.33 2023.98,1209.33 2024.56,1209.33 2025.15,1209.33 2025.73,1209.33 2026.32,1209.33 2026.91,1209.33 2027.49,1209.33 2028.08,1209.33 2028.67,1209.33 2029.25,1209.33 2029.84,1209.33 2030.43,1209.33 2031.01,1209.33 2031.6,1209.33 2032.19,1209.33 2032.77,1209.33 2033.36,1209.33 2033.94,1209.33 2034.53,1209.33 2035.12,1209.33 2035.7,1209.33 2036.29,1209.33 2036.88,1209.33 2037.46,1209.33 2038.05,1209.33 2038.64,1209.33 2039.22,1209.33 2039.81,1209.33 2040.4,1209.33 2040.98,1209.33 2041.57,1209.33 2042.15,1209.33 2042.74,1209.33 2043.33,1209.33 2043.91,1209.33 2044.5,1209.33 2045.09,1209.33 2045.67,1209.33 2046.26,1209.33 2046.85,1209.33 2047.43,1209.33 2048.02,1209.33 2048.6,1209.33 2049.19,1209.33 2049.78,1209.33 2050.36,1209.33 2050.95,1209.33 2051.54,1209.33 2052.12,1209.33 2052.71,1209.33 2053.3,1209.33 2053.88,1209.33 2054.47,1209.33 2055.06,1209.33 2055.64,1209.33 2056.23,1209.33 2056.81,1209.33 2057.4,1209.33 2057.99,1209.33 2058.57,1209.33 2059.16,1209.33 2059.75,1209.33 2060.33,1209.33 2060.92,1209.33 2061.51,1209.33 2062.09,1209.33 2062.68,1209.33 2063.27,1209.33 2063.85,1209.33 2064.44,1209.33 2065.02,1209.33 2065.61,1209.33 2066.2,1209.33 2066.78,1209.33 2067.37,1209.33 2067.96,1209.33 2068.54,1209.33 2069.13,1209.33 2069.72,1209.33 2070.3,1209.33 2070.89,1209.33 2071.48,1209.33 2072.06,1209.33 2072.65,1209.33 2073.23,1209.33 2073.82,1209.33 2074.41,1209.33 2074.99,1209.33 2075.58,1209.33 2076.17,1209.33 2076.75,1209.33 2077.34,1209.33 2077.93,1209.33 2078.51,1209.33 2079.1,1209.33 2079.68,1209.33 2080.27,1209.33 2080.86,1209.33 2081.44,1209.33 2082.03,1209.33 2082.62,1209.33 2083.2,1209.33 2083.79,1209.33 2084.38,1209.33 2084.96,1209.33 2085.55,1209.33 2086.14,1209.33 2086.72,1209.33 2087.31,1209.33 2087.89,1209.33 2088.48,1209.33 2089.07,1209.33 2089.65,1209.33 2090.24,1209.33 2090.83,1209.33 2091.41,1209.33 2092,1209.33 2092.59,1209.33 2093.17,1209.33 2093.76,1209.33 2094.35,1209.33 2094.93,1209.33 2095.52,1209.33 2096.1,1209.33 2096.69,1209.33 2097.28,1209.33 2097.86,1209.33 2098.45,1209.33 2099.04,1209.33 2099.62,1209.33 2100.21,1209.33 2100.8,1209.33 2101.38,1209.33 2101.97,1209.33 2102.55,1209.33 2103.14,1209.33 2103.73,1209.33 2104.31,1209.33 2104.9,1209.33 2105.49,1209.33 2106.07,1209.33 2106.66,1209.33 2107.25,1209.33 2107.83,1209.33 2108.42,1209.33 2109.01,1209.33 2109.59,1209.33 2110.18,1209.33 2110.76,1209.33 2111.35,1209.33 2111.94,1209.33 2112.52,1209.33 2113.11,1209.33 2113.7,1209.33 2114.28,1209.33 2114.87,1209.33 2115.46,1209.33 2116.04,1209.33 2116.63,1209.33 2117.22,1209.33 2117.8,1209.33 2118.39,1209.33 2118.97,1209.33 2119.56,1209.33 2120.15,1209.33 2120.73,1209.33 2121.32,1209.33 2121.91,1209.33 2122.49,1209.33 2123.08,1209.33 2123.67,1209.33 2124.25,1209.33 2124.84,1209.33 2125.42,1209.33 2126.01,1209.33 2126.6,1209.33 2127.18,1209.33 2127.77,1209.33 2128.36,1209.33 2128.94,1209.33 2129.53,1209.33 2130.12,1209.33 2130.7,1209.33 2131.29,1209.33 2131.88,1209.33 2132.46,1209.33 2133.05,1209.33 2133.63,1209.33 2134.22,1209.33 2134.81,1209.33 2135.39,1209.33 2135.98,1209.33 2136.57,1209.33 2137.15,1209.33 2137.74,1209.33 2138.33,1209.33 2138.91,1209.33 2139.5,1209.33 2140.09,1209.33 2140.67,1209.33 2141.26,1209.33 2141.84,1209.33 2142.43,1209.33 2143.02,1209.33 2143.6,1209.33 2144.19,1209.33 2144.78,1209.33 2145.36,1209.33 2145.95,1209.33 2146.54,1209.33 2147.12,1209.33 2147.71,1209.33 2148.3,1209.33 2148.88,1209.33 2149.47,1209.33 2150.05,1209.33 2150.64,1209.33 2151.23,1209.33 2151.81,1209.33 2152.4,1209.33 2152.99,1209.33 2153.57,1209.33 2154.16,1209.33 2154.75,1209.33 2155.33,1209.33 2155.92,1209.33 2156.5,1209.33 2157.09,1209.33 2157.68,1209.33 2158.26,1209.33 \"/>\n<polyline clip-path=\"url(#clip202)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1562.04,1191.43 1400.03,899.083 \"/>\n<polyline clip-path=\"url(#clip202)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1226.84 985.439,1191.43 2158.26,1191.43 2158.26,1226.84 985.439,1226.84 \"/>\n<path clip-path=\"url(#clip200)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip200)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip200)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip200)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip200)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip200)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip200)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip200)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip203\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip203)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip203)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip203)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip203)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip203)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip200)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip200)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip200)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip200)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip200)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip200)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip200)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip203)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip203)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip203)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip203)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip203)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip200)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip200)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip200)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip200)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip200)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip200)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip200)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip200)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip203)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-32.6883 161.555,-61.1853 162.114,-1453.51 162.673,-1476.6 163.232,-2682.45 163.792,-3767.72 164.351,-4785.09 164.91,-5737 165.469,-6600.34 166.029,-7409.74 166.588,-8145.1 167.147,-8811.08 167.706,-9398.57 168.266,-9040.16 168.825,-9537.88 169.384,-9205.19 169.943,-9634.95 170.503,-10033.2 171.062,-10385.1 171.621,-10678 172.18,-10938.6 172.74,-10618.7 173.299,-10843.7 173.858,-11030.6 174.417,-11174.5 174.977,-11312 175.536,-11401.9 176.095,-11474.9 176.655,-11527.8 177.214,-10589.9 177.773,-10363 178.332,-9882.19 178.892,-9917.17 179.451,-9944.1 180.01,-9958.83 180.569,-9972.81 181.129,-9966.17 181.688,-9930.4 182.247,-9879.46 182.806,-9646.44 183.366,-9575.73 183.925,-9333.73 184.484,-9243.3 185.043,-8866.43 185.603,-8637.24 186.162,-8543.55 186.721,-8430.9 187.28,-8314.22 187.84,-7976.19 188.399,-7765.42 188.958,-7654.89 189.517,-7541.24 190.077,-7327.93 190.636,-7040.47 191.195,-6918.9 191.754,-6563.95 192.314,-6451.63 192.873,-6258.33 193.432,-6075.46 193.991,-5890.1 194.551,-5764.49 195.11,-5511.53 195.669,-5216.93 196.228,-5043.87 196.788,-4773.55 197.347,-4677.75 197.906,-4524.04 198.465,-4332.88 199.025,-4144.07 199.584,-3911 200.143,-3606.75 200.702,-3447.94 201.262,-3334.82 201.821,-3267.72 202.38,-3080.9 202.939,-3016.78 203.499,-2912.94 204.058,-2811.65 204.617,-2678.71 205.176,-2513.2 205.736,-2386.41 206.295,-2263.87 206.854,-2184.71 207.413,-2105.69 207.973,-2062.41 208.532,-1948.69 209.091,-1905.11 209.65,-1766.24 210.21,-1721.71 210.769,-1593.09 211.328,-1491.35 211.887,-1420.58 212.447,-1380.44 213.006,-1255.22 213.565,-1221.41 214.124,-1074.45 214.684,-990.856 215.243,-961.582 215.802,-849.893 216.361,-825.924 216.921,-799.759 217.48,-768.301 218.039,-714.494 218.598,-685.019 219.158,-582.995 219.717,-559.883 220.276,-467.484 220.835,-370.07 221.395,-256.492 221.954,-214.671 222.513,-127.983 223.072,-23.3816 223.632,13.9885 224.191,27.5649 224.75,84.2276 225.309,113.744 225.869,145.273 226.428,215.921 226.987,266.396 227.546,269.633 228.106,300.235 228.665,307.116 229.224,351.986 229.783,378.379 230.343,384.23 230.902,407.917 231.461,373.179 232.02,438.7 232.58,486.828 233.139,532.286 233.698,590.561 234.257,591.059 234.817,593.032 235.376,591.348 235.935,593.03 236.494,597.497 237.054,640.803 237.613,663.122 238.172,660.825 238.731,698.702 239.291,718.657 239.85,740.046 240.409,759.209 240.968,772.279 241.528,804.21 242.087,822.804 242.646,888.608 243.205,899.653 243.765,913.647 244.324,925.057 244.883,955.714 245.442,963.165 246.002,954.412 246.561,946.444 247.12,938.451 247.679,949.804 248.239,1013.61 248.798,986.305 249.357,997.805 249.916,1006.86 250.476,1015.31 251.035,1022.42 251.594,1031.07 252.153,1040.97 252.713,1012.4 253.272,1018.19 253.831,1028.79 254.39,1019.47 254.95,1028.2 255.509,1018.79 256.068,1010.45 256.627,1008.27 257.187,1002.1 257.746,1047.82 258.305,1004.4 258.864,1051.42 259.424,1009.12 259.983,1004.82 260.542,1017.9 261.101,1025.07 261.661,1051.55 262.22,1057.24 262.779,1064.35 263.338,1060.07 263.898,1037.73 264.457,1049.73 265.016,1059.25 265.575,1103.25 266.135,1110.76 266.694,1086.25 267.253,1042.93 267.812,1033.71 268.372,1027.87 268.931,1054.1 269.49,1062.41 270.049,1086.21 270.609,1042.12 271.168,1037.57 271.727,1062.43 272.286,1057.1 272.846,1035.25 273.405,1031.31 273.964,1023.86 274.523,1006.65 275.083,984.539 275.642,982.369 276.201,994.645 276.76,990.103 277.32,988.206 277.879,987.814 278.438,985.105 278.997,966.125 279.557,979.171 280.116,944.461 280.675,945.222 281.234,908.908 281.794,893.569 282.353,890.964 282.912,879.343 283.471,900.171 284.031,886.975 284.59,888.796 285.149,872.264 285.708,873.517 286.268,892.733 286.827,859.595 287.386,861.209 287.945,895.705 288.505,899.456 289.064,902.911 289.623,922.695 290.182,921.803 290.742,937.378 291.301,954.008 291.86,951.551 292.419,981.913 292.979,993.668 293.538,958.421 294.097,956.406 294.656,906.134 295.216,938.876 295.775,921.249 296.334,923.185 296.893,922.535 297.453,934.025 298.012,899.056 298.571,896.082 299.13,897.213 299.69,917.449 300.249,918.697 300.808,934.302 301.368,914.56 301.927,912.101 302.486,932.826 303.045,914.563 303.605,944.867 304.164,957.309 304.723,990.07 305.282,999.926 305.842,1025.98 306.401,984.642 306.96,984.226 307.519,980.418 308.079,955.659 308.638,955.675 309.197,953.498 309.756,950.024 310.316,943.981 310.875,945.024 311.434,941.814 311.993,952.723 312.553,1011.12 313.112,989.301 313.671,997.448 314.23,989.505 314.79,999.011 315.349,993.583 315.908,1006.05 316.467,983.41 317.027,1006.94 317.586,1033.09 318.145,1074.49 318.704,1082.34 319.264,1084.53 319.823,1104.94 320.382,1107.95 320.941,1124.75 321.501,1158.65 322.06,1159.76 322.619,1191.45 323.178,1171.96 323.738,1156.7 324.297,1122.81 324.856,1126.41 325.415,1043.95 325.975,1032.21 326.534,1005.03 327.093,1014.86 327.652,973.983 328.212,968.47 328.771,966.506 329.33,996.41 329.889,989.643 330.449,981.214 331.008,991.19 331.567,982.736 332.126,994.593 332.686,986.251 333.245,992.558 333.804,949.846 334.363,942.794 334.923,901.228 335.482,882.634 336.041,894.427 336.6,856.722 337.16,855.453 337.719,871.247 338.278,855.36 338.837,850.673 339.397,803.15 339.956,837.128 340.515,821.944 341.074,891.942 341.634,888.258 342.193,902.818 342.752,916.185 343.311,911.576 343.871,906.479 344.43,968.601 344.989,957.586 345.548,949.08 346.108,940.209 346.667,903.805 347.226,814.7 347.785,826.231 348.345,826.897 348.904,824.719 349.463,837.52 350.022,836.607 350.582,817.321 351.141,815.099 351.7,816.515 352.259,797.352 352.819,800.296 353.378,786.15 353.937,774.24 354.496,795.103 355.056,810.056 355.615,812.859 356.174,781.178 356.733,796.911 357.293,814.318 357.852,814.304 358.411,795.703 358.97,813.853 359.53,848.167 360.089,894.026 360.648,904.881 361.207,902.46 361.767,898.727 362.326,891.689 362.885,867.221 363.444,896.064 364.004,918.39 364.563,892.322 365.122,900.639 365.681,860.397 366.241,859.837 366.8,825.968 367.359,857.233 367.918,868.053 368.478,910.794 369.037,890.01 369.596,918.079 370.155,924.669 370.715,919.934 371.274,864.778 371.833,897.623 372.392,909.095 372.952,923.785 373.511,935.88 374.07,930.458 374.629,921.764 375.189,913.604 375.748,921.042 376.307,864.766 376.866,827.758 377.426,827.459 377.985,844.113 378.544,821.765 379.103,818.131 379.663,801.174 380.222,814.906 380.781,844.502 381.34,840.767 381.9,836.793 382.459,838.255 383.018,853.853 383.577,862.893 384.137,826.661 384.696,843.893 385.255,839.358 385.814,837.564 386.374,805.213 386.933,818.051 387.492,834.583 388.051,833.427 388.611,828.967 389.17,809.554 389.729,777.39 390.288,779.741 390.848,762.414 391.407,761.782 391.966,807.947 392.525,823.203 393.085,835.652 393.644,846.539 394.203,811.007 394.762,779.183 395.322,794.553 395.881,791.04 396.44,775.799 396.999,804.701 397.559,819.677 398.118,832.978 398.677,794.879 399.236,846.505 399.796,843.83 400.355,870.28 400.914,867.824 401.473,914.527 402.033,909.834 402.592,940.315 403.151,929.603 403.71,890.492 404.27,853.105 404.829,864.675 405.388,824.947 405.947,821.968 406.507,836.637 407.066,847.734 407.625,808.781 408.184,788.35 408.744,803.392 409.303,802.933 409.862,798.935 410.421,813.188 410.981,845.182 411.54,828.621 412.099,826.269 412.658,822.331 413.218,820.538 413.777,818.153 414.336,830.922 414.895,841.833 415.455,789.504 416.014,823.092 416.573,803.683 417.132,782.927 417.692,829.532 418.251,825.153 418.81,792.327 419.369,811.638 419.929,741.437 420.488,774.093 421.047,755.868 421.606,725.606 422.166,742.944 422.725,774.427 423.284,806.262 423.843,819.243 424.403,803.646 424.962,814.286 425.521,811.77 426.08,807.217 426.64,826.806 427.199,822.247 427.758,833.841 428.318,827.959 428.877,823.839 429.436,771.245 429.995,754.433 430.555,799.505 431.114,783.21 431.673,799.209 432.232,814.523 432.792,793.986 433.351,777.248 433.91,791.393 434.469,788.563 435.029,737.198 435.588,765.837 436.147,732.002 436.706,719.468 437.266,721.148 437.825,770.262 438.384,766.449 438.943,762.272 439.503,797.912 440.062,826.048 440.621,803.603 441.18,833.957 441.74,845.325 442.299,886.274 442.858,878.987 443.417,886.975 443.977,862.005 444.536,853.389 445.095,816.158 445.654,798.853 446.214,811.145 446.773,778.536 447.332,724.704 447.891,707.801 448.451,674.995 449.01,678.074 449.569,678.372 450.128,696.836 450.688,702.082 451.247,703.926 451.806,719.807 452.365,703.572 452.925,719.472 453.484,721.506 454.043,708.724 454.602,697.664 455.162,686.576 455.721,674.785 456.28,658.163 456.839,664.55 457.399,701.779 457.958,705.263 458.517,693.127 459.076,694.996 459.636,697.117 460.195,700.707 460.754,685.568 461.313,670.237 461.873,659.72 462.432,664.491 462.991,671.639 463.55,675.041 464.11,681.432 464.669,682.986 465.228,704.767 465.787,709.725 466.347,729.276 466.906,745.894 467.465,778.664 468.024,731.639 468.584,781.217 469.143,812.722 469.702,824.985 470.261,807.477 470.821,839.121 471.38,854.883 471.939,878.781 472.498,857.794 473.058,869.213 473.617,813.761 474.176,812.754 474.735,839.316 475.295,848.612 475.854,842.416 476.413,823.552 476.972,817.882 477.532,814.264 478.091,829.338 478.65,825.826 479.209,805.751 479.769,802.243 480.328,813.292 480.887,809.284 481.446,835.843 482.006,832.362 482.565,828.981 483.124,807.131 483.683,820.933 484.243,818.923 484.802,781.878 485.361,793.184 485.92,790.84 486.48,788.87 487.039,770.655 487.598,771.712 488.157,736.914 488.717,753.689 489.276,768.079 489.835,768.043 490.394,733.554 490.954,718.511 491.513,698.431 492.072,701.333 492.631,689.633 493.191,688.191 493.75,673.574 494.309,658.721 494.868,666.317 495.428,672.018 495.987,677.594 496.546,663.593 497.105,662.692 497.665,670.382 498.224,672.774 498.783,676.67 499.342,746.965 499.902,713.328 500.461,744.956 501.02,758.633 501.579,741.267 502.139,719.531 502.698,738.434 503.257,742.781 503.816,774.244 504.376,804.864 504.935,818.137 505.494,832.47 506.053,829.579 506.613,841.136 507.172,819.442 507.731,817.54 508.29,766.071 508.85,746.561 509.409,745.293 509.968,727.373 510.527,726.896 511.087,707.489 511.646,706.139 512.205,709.588 512.764,695.979 513.324,712.737 513.883,698.625 514.442,696.306 515.001,714.631 515.561,759.407 516.12,756.068 516.679,756.567 517.238,756.866 517.798,771.662 518.357,751.351 518.916,765.671 519.475,763.405 520.035,744.068 520.594,743.841 521.153,756.486 521.712,754.761 522.272,737.01 522.831,738.268 523.39,736.095 523.949,715.823 524.509,797.588 525.068,793.997 525.627,790.66 526.186,767.341 526.746,779.411 527.305,762.059 527.864,758.992 528.423,741.394 528.983,736.687 529.542,739.808 530.101,739.096 530.66,768.648 531.22,733.424 531.779,749.798 532.338,763.894 532.897,791.75 533.457,801.031 534.016,797.804 534.575,810.953 535.134,808.668 535.694,790.702 536.253,738.126 536.812,735.788 537.371,734.708 537.931,714.641 538.49,732.225 539.049,732.33 539.608,764.161 540.168,794.737 540.727,775.686 541.286,771.69 541.845,784.585 542.405,780.688 542.964,759.347 543.523,757.242 544.082,707.626 544.642,723.102 545.201,756.283 545.76,757.929 546.319,757.072 546.879,740.445 547.438,703.965 547.997,704.955 548.556,704.228 549.116,690.007 549.675,689.867 550.234,725.497 550.793,725.073 551.353,729.986 551.912,715.287 552.471,729.684 553.031,729.501 553.59,731.545 554.149,716.358 554.708,681.108 555.268,684.956 555.827,699.42 556.386,684.363 556.945,702.028 557.505,705.795 558.064,690.7 558.623,706.691 559.182,690.404 559.742,708.342 560.301,708.915 560.86,728.75 561.419,695.318 561.979,663.678 562.538,633.159 563.097,619.208 563.656,622.669 564.216,629.861 564.775,651.435 565.334,651.674 565.893,639.544 566.453,629.526 567.012,634.477 567.571,604.177 568.13,642.59 568.69,629.998 569.249,618.04 569.808,620.804 570.367,638.688 570.927,676.859 571.486,676.599 572.045,663.001 572.604,664.31 573.164,634.002 573.723,622.993 574.282,644.255 574.841,663.162 575.401,669.614 575.96,690.318 576.519,706.858 577.078,693.281 577.638,692.72 578.197,723.31 578.756,736.654 579.315,721.554 579.875,722.501 580.434,723.305 580.993,738.983 581.552,721.169 582.112,705.223 582.671,720.949 583.23,702.005 583.789,732.64 584.349,730.887 584.908,749.667 585.467,735.059 586.026,736.759 586.586,718.511 587.145,735.889 587.704,736.489 588.263,765.219 588.823,759.792 589.382,772.826 589.941,786.294 590.5,750.868 591.06,763.135 591.619,775.271 592.178,722.401 592.737,753.471 593.297,751.25 593.856,777.032 594.415,789.793 594.974,785.244 595.534,779.743 596.093,728.265 596.652,711.196 597.211,741.868 597.771,738.614 598.33,721.482 598.889,719.531 599.448,732.907 600.008,715.134 600.567,745.347 601.126,756.284 601.685,753.467 602.245,728.401 602.804,692.345 603.363,696.338 603.922,696.178 604.482,712.855 605.041,729.818 605.6,712.853 606.159,712.168 606.719,730.216 607.278,745.772 607.837,710.156 608.396,744.738 608.956,772.928 609.515,800.461 610.074,779.989 610.633,777.715 611.193,790.914 611.752,801.375 612.311,782.839 612.87,779.655 613.43,776.996 613.989,788.433 614.548,783.628 615.107,799.096 615.667,760.217 616.226,770.443 616.785,751.851 617.344,753.272 617.904,746.548 618.463,745.761 619.022,742.942 619.581,756.819 620.141,755.957 620.7,753.786 621.259,734.006 621.818,717.039 622.378,666.882 622.937,669.272 623.496,622.861 624.055,644.539 624.615,662.221 625.174,647.86 625.733,634.747 626.292,672.012 626.852,688.274 627.411,701.399 627.97,682.963 628.529,680.446 629.089,649.251 629.648,669.064 630.207,654.67 630.766,641.644 631.326,630.901 631.885,653.017 632.444,653.836 633.003,685.476 633.563,718.321 634.122,719.354 634.681,749.704 635.24,714.543 635.8,711.232 636.359,741.74 636.918,738.703 637.477,719.435 638.037,706.542 638.596,719.151 639.155,650.491 639.714,656.305 640.274,658.468 640.833,674.58 641.392,662.466 641.951,630.796 642.511,653.201 643.07,669.22 643.629,671.305 644.188,705.105 644.748,738.778 645.307,754.944 645.866,703.037 646.425,699.036 646.985,700.227 647.544,716.334 648.103,717.65 648.662,716.675 649.222,697.425 649.781,692.625 650.34,707.564 650.899,705.61 651.459,687.994 652.018,652.987 652.577,687.422 653.136,690.168 653.696,724.723 654.255,722.576 654.814,736.098 655.373,766.161 655.933,746.534 656.492,730.088 657.051,743.151 657.61,754.901 658.17,704.578 658.729,689.255 659.288,719.043 659.847,733.976 660.407,749.675 660.966,765.777 661.525,729.259 662.084,713.462 662.644,682.083 663.203,667.287 663.762,652.386 664.321,641.673 664.881,660.993 665.44,645.281 665.999,647.296 666.558,668.351 667.118,651.757 667.677,656.715 668.236,611.844 668.795,584.248 669.355,590.795 669.914,594.452 670.473,584.39 671.032,592.088 671.592,567.038 672.151,589.818 672.71,579.646 673.269,598.869 673.829,640.002 674.388,627.05 674.947,632.436 675.506,636.853 676.066,640.382 676.625,639.281 677.184,659.842 677.743,630.015 678.303,637.38 678.862,643.222 679.421,662.31 679.981,681.012 680.54,696.057 681.099,724.761 681.658,737.249 682.218,752.804 682.777,769.152 683.336,766.049 683.895,777.16 684.455,760.232 685.014,760.513 685.573,774.769 686.132,737.16 686.692,736.044 687.251,731.341 687.81,762.069 688.369,758.403 688.929,756.379 689.488,738.491 690.047,707.579 690.606,707.721 691.166,710.769 691.725,695.909 692.284,697.992 692.843,713.929 693.403,714.794 693.962,696.552 694.521,712.746 695.08,729.95 695.64,746.617 696.199,695.758 696.758,695.478 697.317,677.833 697.877,729.86 698.436,725.435 698.995,726.259 699.554,708.481 700.114,706.989 700.673,685.654 701.232,671.508 701.791,673.889 702.351,646.423 702.91,633.128 703.469,639.672 704.028,628.367 704.588,629.735 705.147,633.799 705.706,668.77 706.265,637.57 706.825,640.838 707.384,664.094 707.943,697.344 708.502,728.53 709.062,739.703 709.621,735.102 710.18,701.137 710.739,734.495 711.299,733.67 711.858,730.982 712.417,742.716 712.976,726.998 713.536,741.19 714.095,754.443 714.654,749.252 715.213,763.378 715.773,742.41 716.332,718.535 716.891,715.964 717.45,717.456 718.01,733.725 718.569,729.657 719.128,739.38 719.687,721.779 720.247,736.471 720.806,749.991 721.365,764.395 721.924,775.682 722.484,785.524 723.043,761.315 723.602,754.531 724.161,753.638 724.721,733.505 725.28,716.572 725.839,680.498 726.398,695.368 726.958,693.095 727.517,727.206 728.076,721.753 728.635,721.978 729.195,737.147 729.754,749.008 730.313,729.862 730.872,727.439 731.432,744.584 731.991,708.75 732.55,723.576 733.109,723.012 733.669,687.057 734.228,704.401 734.787,687.706 735.346,687.291 735.906,674.172 736.465,643.426 737.024,647.846 737.583,656.343 738.143,676.264 738.702,680.917 739.261,696.849 739.82,681.457 740.38,651.707 740.939,636.098 741.498,656.053 742.057,694.16 742.617,694.974 743.176,726.315 743.735,738.405 744.294,719.788 744.854,715.796 745.413,618.506 745.972,623.635 746.531,627.79 747.091,600.098 747.65,574.536 748.209,615.749 748.768,638.746 749.328,657.366 749.887,610.739 750.446,597.291 751.005,603.062 751.565,657.699 752.124,692.202 752.683,675.206 753.242,692.82 753.802,691.594 754.361,688.16 754.92,687.547 755.479,716.174 756.039,728.83 756.598,709.544 757.157,710.184 757.716,709.369 758.276,693.8 758.835,695.424 759.394,681.455 759.953,697.186 760.513,697.26 761.072,664.64 761.631,681.594 762.19,665.485 762.75,666.848 763.309,653.772 763.868,657.483 764.427,706.528 764.987,738.811 765.546,721.666 766.105,703.396 766.664,704.47 767.224,655.441 767.783,672.404 768.342,674.636 768.901,690.53 769.461,674.177 770.02,658.096 770.579,642.527 771.138,660.975 771.698,684.743 772.257,684.615 772.816,687.766 773.375,719.614 773.935,702.928 774.494,717.122 775.053,731.652 775.612,712.969 776.172,761.274 776.731,758.629 777.29,754.672 777.849,718.305 778.409,717.283 778.968,685.69 779.527,722.284 780.086,721.919 780.646,688.937 781.205,686.518 781.764,719.44 782.323,720.655 782.883,705.074 783.442,720.38 784.001,722.438 784.56,689.491 785.12,669.593 785.679,652.884 786.238,673.373 786.797,691.425 787.357,704.637 787.916,685.52 788.475,686.173 789.034,689.474 789.594,688.684 790.153,703.932 790.712,686.143 791.271,703.533 791.831,733.533 792.39,730.436 792.949,713.862 793.508,694.398 794.068,760.861 794.627,773.145 795.186,766.265 795.745,794.362 796.305,789.483 796.864,797.946 797.423,792.007 797.982,771.762 798.542,770.4 799.101,766.5 799.66,727.261 800.219,708.63 800.779,708.593 801.338,689.202 801.897,706.317 802.456,722.269 803.016,751.062 803.575,745.977 804.134,758.891 804.693,738.463 805.253,715.884 805.812,713.555 806.371,726.9 806.931,742.68 807.49,706.035 808.049,690.228 808.608,687.915 809.168,673.279 809.727,706.868 810.286,707.101 810.845,676.927 811.405,662.065 811.964,679.659 812.523,714.898 813.082,714.798 813.642,678.01 814.201,694.499 814.76,692.407 815.319,691.006 815.879,723.57 816.438,719.094 816.997,717.582 817.556,717.564 818.116,718.507 818.675,762.355 819.234,724.184 819.793,691.332 820.353,688.539 820.912,673.563 821.471,673.047 822.03,672.038 822.59,688.519 823.149,687.055 823.708,689.21 824.267,654.291 824.827,639.001 825.386,640.414 825.945,655.517 826.504,644.37 827.064,662.228 827.623,699.485 828.182,684.176 828.741,687.185 829.301,687.931 829.86,670.379 830.419,668.475 830.978,697.619 831.538,682.674 832.097,699.942 832.656,683.647 833.215,650.322 833.775,637.385 834.334,657.125 834.893,660.45 835.452,660.913 836.012,658.501 836.571,692.823 837.13,692.14 837.689,708.708 838.249,709.831 838.808,710.231 839.367,692.364 839.926,693.929 840.486,628.907 841.045,614.841 841.604,585.388 842.163,577.97 842.723,601.503 843.282,620.992 843.841,608.44 844.4,613.241 844.96,634.95 845.519,653.304 846.078,672.15 846.637,689.249 847.197,708.114 847.756,658.449 848.315,626.602 848.874,627.7 849.434,643.26 849.993,628.273 850.552,598.008 851.111,631.077 851.671,648.587 852.23,647.122 852.789,630.683 853.348,637.206 853.908,653.4 854.467,671.11 855.026,653.548 855.585,671.258 856.145,687.86 856.704,688.103 857.263,690.232 857.822,691.836 858.382,710.942 858.941,709.529 859.5,690.565 860.059,692.729 860.619,679.249 861.178,694.756 861.737,663.243 862.296,662.21 862.856,629.623 863.415,617.392 863.974,586.812 864.533,576.227 865.093,581.662 865.652,569.419 866.211,574.127 866.77,562.613 867.33,585.532 867.889,591.601 868.448,612.555 869.007,617.98 869.567,620.362 870.126,624.092 870.685,626.337 871.244,602.343 871.804,607.218 872.363,612.659 872.922,614.261 873.481,599.268 874.041,604.538 874.6,606.898 875.159,598.801 875.718,604.18 876.278,610.536 876.837,629.792 877.396,633.199 877.955,651.951 878.515,669.327 879.074,654.074 879.633,692.94 880.192,696.069 880.752,678.524 881.311,679.222 881.87,712.796 882.429,715.372 882.989,712.35 883.548,709.192 884.107,755.023 884.666,746.329 885.226,744.83 885.785,742.98 886.344,707.895 886.903,707.561 887.463,725.889 888.022,739.284 888.581,738.232 889.14,736.756 889.7,716.904 890.259,781.24 890.818,793.051 891.377,787.291 891.937,765.225 892.496,743.512 893.055,741.393 893.614,767.076 894.174,713.301 894.733,713.472 895.292,711.129 895.851,696.743 896.411,697.225 896.97,695.796 897.529,713.523 898.088,726.78 898.648,724.641 899.207,721.916 899.766,737.931 900.325,750.73 900.885,731.394 901.444,712.364 902.003,693.197 902.562,678.837 903.122,680.783 903.681,714.58 904.24,743.929 904.799,725.236 905.359,722.96 905.918,736.627 906.477,751.473 907.036,733.518 907.596,730.022 908.155,696.72 908.714,697.456 909.273,699.738 909.833,699.794 910.392,699.19 910.951,699.865 911.51,686.01 912.07,668.238 912.629,651.543 913.188,668.241 913.747,666.992 914.307,654.974 914.866,658.53 915.425,676.101 915.984,679.294 916.544,648.983 917.103,650.537 917.662,621.092 918.221,641.622 918.781,679.203 919.34,695.672 919.899,676.322 920.458,662.175 921.018,696.267 921.577,679.79 922.136,680.676 922.695,631.288 923.255,652.392 923.814,654.962 924.373,689.622 924.932,706.54 925.492,674.086 926.051,689.883 926.61,687.661 927.169,688.121 927.729,672.503 928.288,674.114 928.847,690.615 929.406,689.819 929.966,703.748 930.525,702.272 931.084,729.189 931.644,745.414 932.203,726.373 932.762,725.611 933.321,737.395 933.881,780.946 934.44,760.491 934.999,774.986 935.558,752.674 936.118,749.598 936.677,729.699 937.236,709.891 937.795,692.065 938.355,709.355 938.914,707.484 939.473,691.823 940.032,691.4 940.592,706.51 941.151,722.311 941.71,722.219 942.269,669.717 942.829,706.034 943.388,690.097 943.947,690.249 944.506,661.787 945.066,677.694 945.625,677.83 946.184,664.538 946.743,665.007 947.303,699.145 947.862,713.718 948.421,741.361 948.98,688.888 949.54,690.557 950.099,670.382 950.658,673.9 951.217,678.2 951.777,692.682 952.336,676.114 952.895,661.777 953.454,677.357 954.014,676.461 954.573,660.442 955.132,658.845 955.691,647.782 956.251,618.211 956.81,638.38 957.369,692.795 957.928,676.529 958.488,676.649 959.047,707.645 959.606,706.828 960.165,703.63 960.725,719.876 961.284,733.622 961.843,730.682 962.402,740.194 962.962,739.246 963.521,700.634 964.08,714.385 964.639,696.586 965.199,647.246 965.758,615.773 966.317,619.071 966.876,603.498 967.436,639.425 967.995,675.452 968.554,678.2 969.113,664.963 969.673,669.41 970.232,689.532 970.791,688.761 971.35,690.521 971.91,691.918 972.469,687.888 973.028,703.077 973.587,701.904 974.147,684.072 974.706,701.603 975.265,703.318 975.824,686.738 976.384,653.596 976.943,672.95 977.502,689.492 978.061,687.652 978.621,690.442 979.18,686.42 979.739,686.638 980.298,688.398 980.858,688.022 981.417,670.708 981.976,689.564 982.535,660.072 983.095,662.57 983.654,695.285 984.213,690.708 984.772,674.153 985.332,689.153 985.891,670.61 986.45,654.595 987.009,628.423 987.569,615.984 988.128,616.367 988.687,616.029 989.246,635.033 989.806,651.155 990.365,669.264 990.924,717.007 991.483,715.336 992.043,714.698 992.602,712.954 993.161,706.561 993.72,689.003 994.28,672.593 994.839,655.91 995.398,657.414 995.957,657.896 996.517,626.941 997.076,644.67 997.635,660.25 998.194,662.325 998.754,649.494 999.313,647.41 999.872,649.898 1000.43,618.997 1000.99,621.193 1001.55,624.199 1002.11,658.292 1002.67,644.338 1003.23,628.677 1003.79,648.065 1004.35,668.767 1004.91,668.938 1005.46,680.845 1006.02,680.71 1006.58,680.744 1007.14,680.942 1007.7,683.102 1008.26,716.981 1008.82,697.085 1009.38,761.259 1009.94,725.223 1010.5,710.02 1011.06,706.135 1011.62,737.801 1012.18,753.752 1012.73,736.818 1013.29,728.986 1013.85,759.779 1014.41,757.146 1014.97,735.312 1015.53,732.651 1016.09,731.536 1016.65,744.965 1017.21,722.971 1017.77,685.655 1018.33,652.625 1018.89,674.349 1019.45,692.021 1020.01,677.558 1020.56,678.155 1021.12,715.871 1021.68,698.392 1022.24,682.527 1022.8,684.962 1023.36,666.892 1023.92,651.423 1024.48,668.616 1025.04,652.3 1025.6,652.682 1026.16,637.372 1026.72,638.716 1027.28,672.287 1027.83,674.571 1028.39,661.837 1028.95,679.176 1029.51,698.909 1030.07,680.026 1030.63,694.344 1031.19,728.928 1031.75,704.78 1032.31,703.741 1032.87,717.275 1033.43,730.287 1033.99,727.686 1034.55,688.286 1035.1,675.859 1035.66,658.91 1036.22,656.592 1036.78,693.205 1037.34,710.343 1037.9,708.395 1038.46,690.977 1039.02,658.223 1039.58,644.947 1040.14,665.605 1040.7,678.487 1041.26,678.918 1041.82,693.495 1042.38,691.853 1042.93,656.663 1043.49,673.441 1044.05,707.002 1044.61,708.492 1045.17,674.904 1045.73,690.253 1046.29,695.201 1046.85,646.367 1047.41,651.173 1047.97,656.032 1048.53,639.388 1049.09,672.052 1049.65,688.28 1050.2,671.152 1050.76,671.622 1051.32,669.899 1051.88,704.49 1052.44,720.933 1053,714.373 1053.56,677.159 1054.12,679.552 1054.68,695.553 1055.24,697.851 1055.8,699.585 1056.36,664.212 1056.92,680.804 1057.48,694.551 1058.03,704.633 1058.59,705.234 1059.15,722.176 1059.71,723.079 1060.27,766.755 1060.83,759.298 1061.39,752.896 1061.95,731.563 1062.51,695.759 1063.07,697.714 1063.63,699.159 1064.19,695.054 1064.75,729.212 1065.3,696.085 1065.86,680.219 1066.42,680.036 1066.98,663.053 1067.54,679.171 1068.1,663.164 1068.66,727.605 1069.22,740.6 1069.78,735.341 1070.34,735.344 1070.9,731.508 1071.46,760.607 1072.02,771.583 1072.57,769.376 1073.13,746.978 1073.69,761.5 1074.25,724.227 1074.81,721.808 1075.37,672.093 1075.93,654.498 1076.49,623.341 1077.05,674.278 1077.61,643.018 1078.17,663.346 1078.73,711.587 1079.29,693.53 1079.85,673.993 1080.4,675.89 1080.96,688.569 1081.52,667.574 1082.08,670.694 1082.64,669.49 1083.2,671.622 1083.76,604.423 1084.32,525.403 1084.88,535.183 1085.44,557.369 1086,566.785 1086.56,604.953 1087.12,626.559 1087.67,630.239 1088.23,637.017 1088.79,658.884 1089.35,645.632 1089.91,633.177 1090.47,633.572 1091.03,670.304 1091.59,671.574 1092.15,637.127 1092.71,673.572 1093.27,691.795 1093.83,688.1 1094.39,657.024 1094.94,660.217 1095.5,661.647 1096.06,650.782 1096.62,652.463 1097.18,620.676 1097.74,628.413 1098.3,616.756 1098.86,654.783 1099.42,656.097 1099.98,673.652 1100.54,641.159 1101.1,608.306 1101.66,612.031 1102.22,582.91 1102.77,590.445 1103.33,593.929 1103.89,603.525 1104.45,662.208 1105.01,678.355 1105.57,677.455 1106.13,677.037 1106.69,662.966 1107.25,679.478 1107.81,679.329 1108.37,708.992 1108.93,724.117 1109.49,737.947 1110.04,735.092 1110.6,752.269 1111.16,750.799 1111.72,714.33 1112.28,744.925 1112.84,693.144 1113.4,709.573 1113.96,692.515 1114.52,725.059 1115.08,705.945 1115.64,720.371 1116.2,721.753 1116.76,734.619 1117.31,763.388 1117.87,746.893 1118.43,710.232 1118.99,708.767 1119.55,721.571 1120.11,714.665 1120.67,700.269 1121.23,748.383 1121.79,757.287 1122.35,756.111 1122.91,739.913 1123.47,737.757 1124.03,737.844 1124.59,734.329 1125.14,730.62 1125.7,730.35 1126.26,743.67 1126.82,755.449 1127.38,766.367 1127.94,747.865 1128.5,793.22 1129.06,758.003 1129.62,737.449 1130.18,749.247 1130.74,746.35 1131.3,725.862 1131.86,724.8 1132.41,720.836 1132.97,718.161 1133.53,697.115 1134.09,709.904 1134.65,693.912 1135.21,680.433 1135.77,679.465 1136.33,665.001 1136.89,662.224 1137.45,647.396 1138.01,679.376 1138.57,698.624 1139.13,694.136 1139.68,759.788 1140.24,757.275 1140.8,737.449 1141.36,717.706 1141.92,696.165 1142.48,665.005 1143.04,661.951 1143.6,695.931 1144.16,680.666 1144.72,683.066 1145.28,682.199 1145.84,669.664 1146.4,668.519 1146.96,639.358 1147.51,653.169 1148.07,688.62 1148.63,686.518 1149.19,682.147 1149.75,684.269 1150.31,652.195 1150.87,637.702 1151.43,654.204 1151.99,657.255 1152.55,657.548 1153.11,642.746 1153.67,676.738 1154.23,680.559 1154.78,680.773 1155.34,717.67 1155.9,716.882 1156.46,714.135 1157.02,724.605 1157.58,686.773 1158.14,716.211 1158.7,717.637 1159.26,719.492 1159.82,683.951 1160.38,728.815 1160.94,709.466 1161.5,706.312 1162.05,702.561 1162.61,717.626 1163.17,714.943 1163.73,681.748 1164.29,661.956 1164.85,694.165 1165.41,677.79 1165.97,691.089 1166.53,688.081 1167.09,669.809 1167.65,635.377 1168.21,621.875 1168.77,623.316 1169.33,629.199 1169.88,646.064 1170.44,667.17 1171,671.162 1171.56,702.247 1172.12,751.987 1172.68,781.289 1173.24,759.658 1173.8,724.762 1174.36,727.933 1174.92,743.3 1175.48,770.657 1176.04,777.504 1176.6,772.789 1177.15,735.902 1177.71,764.052 1178.27,776.439 1178.83,752.537 1179.39,715.223 1179.95,683.447 1180.51,650.164 1181.07,665.917 1181.63,653.497 1182.19,673.601 1182.75,692.48 1183.31,673.276 1183.87,677.333 1184.43,676.446 1184.98,710.268 1185.54,706.23 1186.1,671.531 1186.66,674.679 1187.22,709.285 1187.78,661.36 1188.34,677.628 1188.9,642.679 1189.46,646.216 1190.02,648.542 1190.58,667.703 1191.14,700.323 1191.7,714.665 1192.25,728.76 1192.81,743.032 1193.37,737.351 1193.93,733.653 1194.49,745.872 1195.05,745.617 1195.61,742.938 1196.17,707.972 1196.73,742.649 1197.29,758.485 1197.85,771.694 1198.41,768.001 1198.97,764.378 1199.52,760.599 1200.08,776.635 1200.64,771.37 1201.2,785.31 1201.76,795.739 1202.32,819.115 1202.88,796.12 1203.44,789.646 1204,768.024 1204.56,782.635 1205.12,744.363 1205.68,743.918 1206.24,757.244 1206.8,770.003 1207.35,765.747 1207.91,808.915 1208.47,787.527 1209.03,794.345 1209.59,786.219 1210.15,781.972 1210.71,778.709 1211.27,761.179 1211.83,772.453 1212.39,750.086 1212.95,747.645 1213.51,713.081 1214.07,696.972 1214.62,699.64 1215.18,715.272 1215.74,700.78 1216.3,716.041 1216.86,683.148 1217.42,699.761 1217.98,697.921 1218.54,663.824 1219.1,649.609 1219.66,683.708 1220.22,667.485 1220.78,683.379 1221.34,686.107 1221.89,653.66 1222.45,627.179 1223.01,646.113 1223.57,665.025 1224.13,662.348 1224.69,726.439 1225.25,706.412 1225.81,671.913 1226.37,640.479 1226.93,641.354 1227.49,660.376 1228.05,658.362 1228.61,642.768 1229.17,661.782 1229.72,664.878 1230.28,699.589 1230.84,698.07 1231.4,680.037 1231.96,697.453 1232.52,680.515 1233.08,714.87 1233.64,698.546 1234.2,683.188 1234.76,682.059 1235.32,662.268 1235.88,696.562 1236.44,677.751 1236.99,677.187 1237.55,659.595 1238.11,658.673 1238.67,641.606 1239.23,610.012 1239.79,611.125 1240.35,629.319 1240.91,665.782 1241.47,667.871 1242.03,673.58 1242.59,659.243 1243.15,661.913 1243.71,646.499 1244.26,630.742 1244.82,618.988 1245.38,573.564 1245.94,594.299 1246.5,565.779 1247.06,591.339 1247.62,581.836 1248.18,553.965 1248.74,576.583 1249.3,585.405 1249.86,636.598 1250.42,654.143 1250.98,609.115 1251.54,592.017 1252.09,598.949 1252.65,618.121 1253.21,632.91 1253.77,649.98 1254.33,622.467 1254.89,658.185 1255.45,708.135 1256.01,722.041 1256.57,716.817 1257.13,732.109 1257.69,745.108 1258.25,753.164 1258.81,732.152 1259.36,666.118 1259.92,683.259 1260.48,698.438 1261.04,728.3 1261.6,712.286 1262.16,741.907 1262.72,708.126 1263.28,661.027 1263.84,647.238 1264.4,711.441 1264.96,676.973 1265.52,663.934 1266.08,681.424 1266.63,653.52 1267.19,654.37 1267.75,642.983 1268.31,628.425 1268.87,648.502 1269.43,662.698 1269.99,676.797 1270.55,647.139 1271.11,667.369 1271.67,686.148 1272.23,688.47 1272.79,676.536 1273.35,693.174 1273.91,664.814 1274.46,681.018 1275.02,711.748 1275.58,763.015 1276.14,746.209 1276.7,760.541 1277.26,789.291 1277.82,773.26 1278.38,767.798 1278.94,733.38 1279.5,699.034 1280.06,744.111 1280.62,725.385 1281.18,722.869 1281.73,768.962 1282.29,795.875 1282.85,838.513 1283.41,817.323 1283.97,844.764 1284.53,853.264 1285.09,845.473 1285.65,804.338 1286.21,814.757 1286.77,774.025 1287.33,787.189 1287.89,778.466 1288.45,735.421 1289,713.804 1289.56,698.715 1290.12,728.991 1290.68,741.998 1291.24,725.781 1291.8,707.298 1292.36,691.204 1292.92,658.612 1293.48,657.471 1294.04,640.908 1294.6,640.599 1295.16,610.711 1295.72,582.705 1296.28,587.524 1296.83,592.624 1297.39,593.383 1297.95,597.066 1298.51,569.436 1299.07,588.643 1299.63,593.388 1300.19,563.922 1300.75,568.787 1301.31,556.587 1301.87,583.279 1302.43,573.284 1302.99,592.433 1303.55,599.778 1304.1,569.787 1304.66,575.423 1305.22,626.795 1305.78,644.462 1306.34,632.283 1306.9,651.09 1307.46,684.08 1308.02,637.186 1308.58,624.616 1309.14,646.621 1309.7,648.453 1310.26,685.963 1310.82,671.852 1311.38,658.336 1311.93,644.162 1312.49,664.013 1313.05,681.731 1313.61,666.547 1314.17,688.005 1314.73,670.192 1315.29,688.771 1315.85,672.05 1316.41,661.437 1316.97,679.472 1317.53,700.24 1318.09,713.6 1318.65,714.111 1319.2,743.515 1319.76,742.434 1320.32,735.177 1320.88,732.069 1321.44,730.615 1322,728.379 1322.56,710.758 1323.12,707.858 1323.68,723.897 1324.24,735.912 1324.8,732.704 1325.36,743.759 1325.92,722.277 1326.47,734.447 1327.03,730.777 1327.59,728.802 1328.15,728.738 1328.71,742.307 1329.27,737.494 1329.83,718.331 1330.39,715.15 1330.95,682.482 1331.51,697.723 1332.07,697.041 1332.63,695.706 1333.19,708.349 1333.75,706.763 1334.3,692.446 1334.86,690.681 1335.42,676.594 1335.98,678.659 1336.54,679.415 1337.1,684.216 1337.66,668.323 1338.22,666.389 1338.78,648.773 1339.34,651.056 1339.9,649.59 1340.46,652.779 1341.02,657.064 1341.57,661.664 1342.13,692.728 1342.69,705.693 1343.25,752.183 1343.81,782.308 1344.37,791.051 1344.93,849.855 1345.49,826.09 1346.05,848.125 1346.61,840.565 1347.17,832.365 1347.73,826.734 1348.29,805.407 1348.84,797.12 1349.4,760.263 1349.96,759.184 1350.52,770.122 1351.08,747.567 1351.64,730.13 1352.2,725.986 1352.76,693.675 1353.32,691.487 1353.88,641.993 1354.44,611.062 1355,599.18 1355.56,603.94 1356.12,668.869 1356.67,665.814 1357.23,683.815 1357.79,652.104 1358.35,654.098 1358.91,621.81 1359.47,625.903 1360.03,645.463 1360.59,662.308 1361.15,616.48 1361.71,589.754 1362.27,595.999 1362.83,618.739 1363.39,604.17 1363.94,595.253 1364.5,616.005 1365.06,619.108 1365.62,639.872 1366.18,641.504 1366.74,641.38 1367.3,624.263 1367.86,625.374 1368.42,627.498 1368.98,679.144 1369.54,665.338 1370.1,664.444 1370.66,661.482 1371.21,681.866 1371.77,661.383 1372.33,663.247 1372.89,679.748 1373.45,694.548 1374.01,695.676 1374.57,679.417 1375.13,677.186 1375.69,711.445 1376.25,744.325 1376.81,774.303 1377.37,720.631 1377.93,685.2 1378.49,689.321 1379.04,686.894 1379.6,656.687 1380.16,659.8 1380.72,598.86 1381.28,602.299 1381.84,607.113 1382.4,594.875 1382.96,614.674 1383.52,601.445 1384.08,606.443 1384.64,625.239 1385.2,627.967 1385.76,616.34 1386.31,637.981 1386.87,635.147 1387.43,672.102 1387.99,741.039 1388.55,756.537 1389.11,784.349 1389.67,791.659 1390.23,785.884 1390.79,733.564 1391.35,719.023 1391.91,619.285 1392.47,653.561 1393.03,688.888 1393.58,676.448 1394.14,655.156 1394.7,623.027 1395.26,591.602 1395.82,611.84 1396.38,632.674 1396.94,637.115 1397.5,654.279 1398.06,671.136 1398.62,671.329 1399.18,674.727 1399.74,658.195 1400.3,657.263 1400.86,656.258 1401.41,672.999 1401.97,673.077 1402.53,656.211 1403.09,644.275 1403.65,647.967 1404.21,649.597 1404.77,651.775 1405.33,671.862 1405.89,674.766 1406.45,676.847 1407.01,660.481 1407.57,660.939 1408.13,646.732 1408.68,680.464 1409.24,682.243 1409.8,688.668 1410.36,655.619 1410.92,673.023 1411.48,659.756 1412.04,626.93 1412.6,615.808 1413.16,633.395 1413.72,636.567 1414.28,638.101 1414.84,674.033 1415.4,675.932 1415.95,707.613 1416.51,735.653 1417.07,733.708 1417.63,696.421 1418.19,662.659 1418.75,703.63 1419.31,672.01 1419.87,656.383 1420.43,675.191 1420.99,657.657 1421.55,642.085 1422.11,646.171 1422.67,661.878 1423.23,647.076 1423.78,633.632 1424.34,618.804 1424.9,619.725 1425.46,592.17 1426.02,615.307 1426.58,618.521 1427.14,623.574 1427.7,642.236 1428.26,663.09 1428.82,663.969 1429.38,682.04 1429.94,665.853 1430.5,700.22 1431.05,680.116 1431.61,698.626 1432.17,712.496 1432.73,742.113 1433.29,774.093 1433.85,767.383 1434.41,762.476 1434.97,773.312 1435.53,752.188 1436.09,798.115 1436.65,789.819 1437.21,801.268 1437.77,779.224 1438.33,789.935 1438.88,750.376 1439.44,760.282 1440,758.428 1440.56,709.55 1441.12,770.041 1441.68,763.805 1442.24,757.489 1442.8,767.234 1443.36,778.43 1443.92,819.153 1444.48,812.724 1445.04,837.704 1445.6,859.322 1446.15,834.672 1446.71,793.41 1447.27,820.17 1447.83,813.225 1448.39,804.334 1448.95,786.588 1449.51,765.033 1450.07,773.043 1450.63,769.12 1451.19,732.54 1451.75,731.106 1452.31,727.928 1452.87,741.658 1453.42,756.114 1453.98,721.149 1454.54,718.758 1455.1,702.539 1455.66,719.578 1456.22,717.543 1456.78,698.776 1457.34,701.008 1457.9,714.07 1458.46,664.995 1459.02,680.171 1459.58,665.334 1460.14,683.282 1460.7,618.976 1461.25,605.752 1461.81,576.533 1462.37,610.554 1462.93,643.487 1463.49,648.116 1464.05,663.592 1464.61,633.988 1465.17,567.274 1465.73,575.167 1466.29,562.983 1466.85,584.474 1467.41,573.779 1467.97,580.058 1468.52,585.46 1469.08,588.772 1469.64,580.277 1470.2,584.386 1470.76,586.022 1471.32,592.926 1471.88,595.275 1472.44,602.251 1473,603.805 1473.56,604.139 1474.12,571.847 1474.68,592.635 1475.24,546.931 1475.79,553.741 1476.35,560.961 1476.91,580.163 1477.47,601.207 1478.03,605.738 1478.59,610.764 1479.15,616.704 1479.71,670.387 1480.27,673.361 1480.83,692.109 1481.39,712.089 1481.95,695.224 1482.51,714.469 1483.07,714.633 1483.62,661.899 1484.18,682.351 1484.74,683.432 1485.3,668.515 1485.86,635.897 1486.42,651.3 1486.98,671.535 1487.54,623.792 1488.1,659.221 1488.66,678.486 1489.22,697.103 1489.78,711.334 1490.34,693.106 1490.89,693.905 1491.45,691.787 1492.01,693.697 1492.57,693.623 1493.13,725.447 1493.69,791.683 1494.25,754.565 1494.81,754.667 1495.37,781.031 1495.93,778.107 1496.49,792.278 1497.05,802.176 1497.61,782.605 1498.16,797.19 1498.72,790.229 1499.28,818.741 1499.84,763.594 1500.4,762.193 1500.96,758.378 1501.52,752.149 1502.08,715.932 1502.64,666.866 1503.2,684.288 1503.76,666.088 1504.32,650.489 1504.88,666.761 1505.44,667.598 1505.99,666.143 1506.55,683.764 1507.11,716.251 1507.67,697.742 1508.23,717.542 1508.79,732.648 1509.35,714.558 1509.91,714.487 1510.47,716.018 1511.03,749.685 1511.59,748.561 1512.15,728.02 1512.71,745.122 1513.26,774.021 1513.82,767.376 1514.38,746.671 1514.94,755.656 1515.5,719.139 1516.06,718.738 1516.62,730.885 1517.18,711.255 1517.74,727.1 1518.3,725.481 1518.86,689.986 1519.42,688.961 1519.98,704.951 1520.53,686.59 1521.09,705.493 1521.65,685.489 1522.21,700.077 1522.77,717.3 1523.33,731.168 1523.89,661.745 1524.45,647.915 1525.01,613.972 1525.57,633.126 1526.13,651.852 1526.69,653.948 1527.25,657.721 1527.81,689.759 1528.36,687.176 1528.92,700.722 1529.48,714.979 1530.04,699.658 1530.6,698.367 1531.16,709.602 1531.72,738.263 1532.28,735.423 1532.84,698.766 1533.4,685.005 1533.96,674.661 1534.52,689.96 1535.08,689.397 1535.63,689.214 1536.19,672.739 1536.75,706.698 1537.31,723.11 1537.87,721.833 1538.43,720.339 1538.99,700.526 1539.55,703.968 1540.11,689.332 1540.67,707.776 1541.23,691.12 1541.79,686.759 1542.35,687.719 1542.9,702.246 1543.46,700.389 1544.02,668.425 1544.58,702.505 1545.14,701.701 1545.7,665.863 1546.26,651.904 1546.82,687.39 1547.38,736.812 1547.94,731.834 1548.5,743.058 1549.06,756.492 1549.62,751.257 1550.18,765.172 1550.73,776.722 1551.29,752.926 1551.85,713.632 1552.41,680.557 1552.97,665.015 1553.53,669.273 1554.09,656.242 1554.65,640.426 1555.21,624.988 1555.77,615.966 1556.33,586.904 1556.89,591.315 1557.45,580.295 1558,554.567 1558.56,561.245 1559.12,586.72 1559.68,605.625 1560.24,610.202 1560.8,629.647 1561.36,645.223 1561.92,645.005 1562.48,663.677 1563.04,663.513 1563.6,666.074 1564.16,667.008 1564.72,620.569 1565.28,609.309 1565.83,680.486 1566.39,695.905 1566.95,679.09 1567.51,681.892 1568.07,697.976 1568.63,683.721 1569.19,715.664 1569.75,729.007 1570.31,708.887 1570.87,711.285 1571.43,695.506 1571.99,729.152 1572.55,725.064 1573.1,707.047 1573.66,723.338 1574.22,707.354 1574.78,701.169 1575.34,672.099 1575.9,674.501 1576.46,673.816 1577.02,709.457 1577.58,707.371 1578.14,691.471 1578.7,690.076 1579.26,691.589 1579.82,725.053 1580.37,725.034 1580.93,692.507 1581.49,693.332 1582.05,693.911 1582.61,695.296 1583.17,696.494 1583.73,680.391 1584.29,631.021 1584.85,621.784 1585.41,577.574 1585.97,599.982 1586.53,602.737 1587.09,588.413 1587.65,573.684 1588.2,579.607 1588.76,616.929 1589.32,603.957 1589.88,610.883 1590.44,618.618 1591,587.801 1591.56,565.563 1592.12,570.945 1592.68,559.969 1593.24,568.268 1593.8,576.161 1594.36,618.678 1594.92,587.012 1595.47,555.683 1596.03,565.944 1596.59,574.199 1597.15,593.726 1597.71,613.841 1598.27,634.902 1598.83,607.182 1599.39,610.295 1599.95,633.528 1600.51,602.569 1601.07,606.555 1601.63,613.239 1602.19,634.986 1602.74,639.407 1603.3,673.435 1603.86,675.542 1604.42,693.578 1604.98,740.192 1605.54,751.209 1606.1,733.23 1606.66,746.613 1607.22,742.349 1607.78,739.248 1608.34,736.524 1608.9,751.33 1609.46,763.562 1610.02,753.243 1610.57,750.988 1611.13,761.463 1611.69,706.928 1612.25,722.503 1612.81,717.139 1613.37,666.785 1613.93,701.275 1614.49,704.469 1615.05,733.359 1615.61,731.79 1616.17,747.284 1616.73,694.318 1617.29,691.873 1617.84,693.481 1618.4,683.579 1618.96,669.06 1619.52,671.287 1620.08,674.19 1620.64,707.421 1621.2,720.947 1621.76,736.318 1622.32,748.392 1622.88,759.95 1623.44,783.451 1624,810.787 1624.56,790.775 1625.11,817.057 1625.67,793.498 1626.23,771.817 1626.79,764.077 1627.35,743.889 1627.91,742.123 1628.47,753.664 1629.03,682.185 1629.59,668.082 1630.15,671.001 1630.71,689.847 1631.27,674.278 1631.83,689.292 1632.39,721.097 1632.94,751.706 1633.5,797.115 1634.06,825.146 1634.62,833.697 1635.18,855.949 1635.74,893.597 1636.3,899.015 1636.86,857.708 1637.42,850.752 1637.98,823.777 1638.54,751.365 1639.1,727.971 1639.66,676.716 1640.21,678.192 1640.77,694.363 1641.33,728.031 1641.89,725.353 1642.45,753.544 1643.01,748.955 1643.57,724.473 1644.13,733.472 1644.69,729.039 1645.25,726.104 1645.81,724.278 1646.37,673.77 1646.93,674.627 1647.48,658.012 1648.04,674.526 1648.6,692.191 1649.16,689.506 1649.72,653.084 1650.28,623.265 1650.84,613.619 1651.4,664.014 1651.96,666.286 1652.52,633.701 1653.08,604.323 1653.64,639.997 1654.2,624.729 1654.76,644.863 1655.31,661.741 1655.87,646.52 1656.43,667.528 1656.99,718.834 1657.55,715.924 1658.11,728.366 1658.67,726.949 1659.23,710.691 1659.79,692.826 1660.35,708.413 1660.91,690.242 1661.47,705.063 1662.03,686.608 1662.58,703.739 1663.14,735.762 1663.7,767.468 1664.26,746.305 1664.82,727.184 1665.38,709.515 1665.94,705.062 1666.5,736.709 1667.06,737.843 1667.62,735.483 1668.18,734.95 1668.74,698.136 1669.3,714.543 1669.85,699.068 1670.41,664.609 1670.97,666.238 1671.53,667.221 1672.09,682.09 1672.65,648.187 1673.21,651.216 1673.77,652.237 1674.33,666.694 1674.89,667.633 1675.45,652.968 1676.01,671.561 1676.57,669.752 1677.13,651.283 1677.68,672.626 1678.24,671.55 1678.8,674.262 1679.36,672.061 1679.92,637.896 1680.48,674.906 1681.04,678.645 1681.6,679.17 1682.16,649.296 1682.72,684.828 1683.28,666.659 1683.84,698.486 1684.4,680.067 1684.95,680.122 1685.51,698.357 1686.07,664.186 1686.63,663.723 1687.19,613.772 1687.75,602.772 1688.31,591.373 1688.87,608.908 1689.43,613.952 1689.99,633.457 1690.55,618.244 1691.11,637.443 1691.67,624.351 1692.23,658.829 1692.78,644.103 1693.34,615.386 1693.9,606.095 1694.46,592.914 1695.02,598.445 1695.58,616.209 1696.14,667.84 1696.7,685 1697.26,651.453 1697.82,668.871 1698.38,637.167 1698.94,620.328 1699.5,621.836 1700.05,609.609 1700.61,598.399 1701.17,572.802 1701.73,576.823 1702.29,584.824 1702.85,571.833 1703.41,575.92 1703.97,597.481 1704.53,602.145 1705.09,604.421 1705.65,604.365 1706.21,573.729 1706.77,579.482 1707.32,584.149 1707.88,591.266 1708.44,577.995 1709,588.846 1709.56,594.487 1710.12,583.416 1710.68,587.765 1711.24,659.217 1711.8,661.183 1712.36,677.589 1712.92,659.833 1713.48,661.8 1714.04,661.11 1714.6,647.168 1715.15,630.673 1715.71,632.942 1716.27,635.365 1716.83,638.526 1717.39,622.985 1717.95,614.528 1718.51,634.516 1719.07,626.724 1719.63,611.404 1720.19,616.25 1720.75,554.76 1721.31,578.4 1721.87,600.925 1722.42,625.257 1722.98,611.051 1723.54,597.976 1724.1,586.722 1724.66,624.837 1725.22,626.852 1725.78,629.359 1726.34,636.788 1726.9,639.684 1727.46,643.519 1728.02,626.43 1728.58,629.005 1729.14,642.637 1729.69,661.086 1730.25,649.037 1730.81,632.863 1731.37,616.508 1731.93,641.334 1732.49,645.053 1733.05,662.967 1733.61,663.709 1734.17,649.195 1734.73,665.854 1735.29,666.667 1735.85,667.091 1736.41,669.61 1736.97,686.736 1737.52,670.732 1738.08,672.824 1738.64,675.163 1739.2,711.537 1739.76,728.258 1740.32,712.033 1740.88,726.49 1741.44,725.402 1742,709.752 1742.56,692.114 1743.12,691.146 1743.68,674.844 1744.24,658.144 1744.79,643.337 1745.35,630.962 1745.91,653.297 1746.47,672.298 1747.03,654.327 1747.59,673.833 1748.15,660.034 1748.71,648.444 1749.27,683.347 1749.83,699.854 1750.39,715.631 1750.95,731.326 1751.51,726.094 1752.06,741.013 1752.62,733.41 1753.18,732.677 1753.74,715.973 1754.3,729.423 1754.86,743.112 1755.42,722.419 1755.98,656.827 1756.54,642.872 1757.1,646.021 1757.66,648.581 1758.22,651.194 1758.78,668.069 1759.34,665.542 1759.89,650.018 1760.45,633.807 1761.01,620.379 1761.57,658.805 1762.13,675.23 1762.69,674.109 1763.25,675.829 1763.81,661.888 1764.37,697.239 1764.93,695.825 1765.49,709.255 1766.05,706.844 1766.61,720.636 1767.16,720.923 1767.72,702.286 1768.28,698.424 1768.84,680.662 1769.4,664.031 1769.96,632.675 1770.52,636.252 1771.08,640.437 1771.64,674.66 1772.2,673.438 1772.76,690.396 1773.32,672.742 1773.88,672.718 1774.43,672.771 1774.99,672.007 1775.55,685.703 1776.11,717.667 1776.67,700.516 1777.23,734.628 1777.79,782.464 1778.35,776.387 1778.91,774.063 1779.47,786.274 1780.03,810.902 1780.59,790.452 1781.15,817.183 1781.71,793.64 1782.26,786.549 1782.82,819.392 1783.38,793.031 1783.94,788.322 1784.5,829.461 1785.06,802.621 1785.62,782.495 1786.18,759.242 1786.74,736.883 1787.3,737.427 1787.86,702.878 1788.42,701.748 1788.98,714.78 1789.53,710.438 1790.09,695.866 1790.65,660.955 1791.21,660.577 1791.77,664.385 1792.33,651.329 1792.89,651.299 1793.45,654.602 1794.01,642.797 1794.57,661.952 1795.13,618.272 1795.69,635.953 1796.25,656.779 1796.8,644.306 1797.36,647.713 1797.92,647.016 1798.48,612.932 1799.04,618.253 1799.6,604.57 1800.16,642.987 1800.72,629.174 1801.28,647.789 1801.84,637.9 1802.4,625.515 1802.96,595.872 1803.52,646.321 1804.08,646.008 1804.63,645.949 1805.19,678.811 1805.75,666.869 1806.31,667.808 1806.87,670.849 1807.43,691.204 1807.99,687.351 1808.55,721.77 1809.11,718.647 1809.67,716.453 1810.23,716.584 1810.79,713.66 1811.35,714.581 1811.9,699.854 1812.46,664.619 1813.02,681.704 1813.58,615.517 1814.14,633.582 1814.7,650.028 1815.26,682.664 1815.82,682.626 1816.38,714.242 1816.94,730.34 1817.5,708.991 1818.06,706.058 1818.62,704.932 1819.18,701.763 1819.73,732.642 1820.29,698.394 1820.85,681.967 1821.41,681.63 1821.97,632.732 1822.53,600.091 1823.09,557.371 1823.65,566.757 1824.21,557.458 1824.77,558.834 1825.33,567.255 1825.89,574.014 1826.45,562.671 1827,570.825 1827.56,610.677 1828.12,614.453 1828.68,606.568 1829.24,626.627 1829.8,610.637 1830.36,646.514 1830.92,645.562 1831.48,614.972 1832.04,617.421 1832.6,652.12 1833.16,656.316 1833.72,645.419 1834.27,679.281 1834.83,675.013 1835.39,658.722 1835.95,659.484 1836.51,657.708 1837.07,673.038 1837.63,672.219 1838.19,719.394 \"/>\n<path clip-path=\"url(#clip203)\" d=\"M720.247 689.714 L720.806 689.714 L721.365 689.714 L721.924 689.714 L722.484 689.714 L723.043 689.714 L723.602 689.714 L724.161 689.714 L724.721 689.714 L725.28 689.714 L725.839 689.714 L726.398 689.714 L726.958 689.714 L727.517 689.714 L728.076 689.714 L728.635 689.714 L729.195 689.714 L729.754 689.714 L730.313 689.714 L730.872 689.714 L731.432 689.714 L731.991 689.714 L732.55 689.714 L733.109 689.714 L733.669 689.714 L734.228 689.714 L734.787 689.714 L735.346 689.714 L735.906 689.714 L736.465 689.714 L737.024 689.714 L737.583 689.714 L738.143 689.714 L738.702 689.714 L739.261 689.714 L739.82 689.714 L740.38 689.714 L740.939 689.714 L741.498 689.714 L742.057 689.714 L742.617 689.714 L743.176 689.714 L743.735 689.714 L744.294 689.714 L744.854 689.714 L745.413 689.714 L745.972 689.714 L746.531 689.714 L747.091 689.714 L747.65 689.714 L748.209 689.714 L748.768 689.714 L749.328 689.714 L749.887 689.714 L750.446 689.714 L751.005 689.714 L751.565 689.714 L752.124 689.714 L752.683 689.714 L753.242 689.714 L753.802 689.714 L754.361 689.714 L754.92 689.714 L755.479 689.714 L756.039 689.714 L756.598 689.714 L757.157 689.714 L757.716 689.714 L758.276 689.714 L758.835 689.714 L759.394 689.714 L759.953 689.714 L760.513 689.714 L761.072 689.714 L761.631 689.714 L762.19 689.714 L762.75 689.714 L763.309 689.714 L763.868 689.714 L764.427 689.714 L764.987 689.714 L765.546 689.714 L766.105 689.714 L766.664 689.714 L767.224 689.714 L767.783 689.714 L768.342 689.714 L768.901 689.714 L769.461 689.714 L770.02 689.714 L770.579 689.714 L771.138 689.714 L771.698 689.714 L772.257 689.714 L772.816 689.714 L773.375 689.714 L773.935 689.714 L774.494 689.714 L775.053 689.714 L775.612 689.714 L776.172 689.714 L776.731 689.714 L777.29 689.714 L777.849 689.714 L778.409 689.714 L778.968 689.714 L779.527 689.714 L780.086 689.714 L780.646 689.714 L781.205 689.714 L781.764 689.714 L782.323 689.714 L782.883 689.714 L783.442 689.714 L784.001 689.714 L784.56 689.714 L785.12 689.714 L785.679 689.714 L786.238 689.714 L786.797 689.714 L787.357 689.714 L787.916 689.714 L788.475 689.714 L789.034 689.714 L789.594 689.714 L790.153 689.714 L790.712 689.714 L791.271 689.714 L791.831 689.714 L792.39 689.714 L792.949 689.714 L793.508 689.714 L794.068 689.714 L794.627 689.714 L795.186 689.714 L795.745 689.714 L796.305 689.714 L796.864 689.714 L797.423 689.714 L797.982 689.714 L798.542 689.714 L799.101 689.714 L799.66 689.714 L800.219 689.714 L800.779 689.714 L801.338 689.714 L801.897 689.714 L802.456 689.714 L803.016 689.714 L803.575 689.714 L804.134 689.714 L804.693 689.714 L805.253 689.714 L805.812 689.714 L806.371 689.714 L806.931 689.714 L807.49 689.714 L808.049 689.714 L808.608 689.714 L809.168 689.714 L809.727 689.714 L810.286 689.714 L810.845 689.714 L811.405 689.714 L811.964 689.714 L812.523 689.714 L813.082 689.714 L813.642 689.714 L814.201 689.714 L814.76 689.714 L815.319 689.714 L815.879 689.714 L816.438 689.714 L816.997 689.714 L817.556 689.714 L818.116 689.714 L818.675 689.714 L819.234 689.714 L819.793 689.714 L820.353 689.714 L820.912 689.714 L821.471 689.714 L822.03 689.714 L822.59 689.714 L823.149 689.714 L823.708 689.714 L824.267 689.714 L824.827 689.714 L825.386 689.714 L825.945 689.714 L826.504 689.714 L827.064 689.714 L827.623 689.714 L828.182 689.714 L828.741 689.714 L829.301 689.714 L829.86 689.714 L830.419 689.714 L830.978 689.714 L831.538 689.714 L832.097 689.714 L832.656 689.714 L833.215 689.714 L833.775 689.714 L834.334 689.714 L834.893 689.714 L835.452 689.714 L836.012 689.714 L836.571 689.714 L837.13 689.714 L837.689 689.714 L838.249 689.714 L838.808 689.714 L839.367 689.714 L839.926 689.714 L840.486 689.714 L841.045 689.714 L841.604 689.714 L842.163 689.714 L842.723 689.714 L843.282 689.714 L843.841 689.714 L844.4 689.714 L844.96 689.714 L845.519 689.714 L846.078 689.714 L846.637 689.714 L847.197 689.714 L847.756 689.714 L848.315 689.714 L848.874 689.714 L849.434 689.714 L849.993 689.714 L850.552 689.714 L851.111 689.714 L851.671 689.714 L852.23 689.714 L852.789 689.714 L853.348 689.714 L853.908 689.714 L854.467 689.714 L855.026 689.714 L855.585 689.714 L856.145 689.714 L856.704 689.714 L857.263 689.714 L857.822 689.714 L858.382 689.714 L858.941 689.714 L859.5 689.714 L860.059 689.714 L860.619 689.714 L861.178 689.714 L861.737 689.714 L862.296 689.714 L862.856 689.714 L863.415 689.714 L863.974 689.714 L864.533 689.714 L865.093 689.714 L865.652 689.714 L866.211 689.714 L866.77 689.714 L867.33 689.714 L867.889 689.714 L868.448 689.714 L869.007 689.714 L869.567 689.714 L870.126 689.714 L870.685 689.714 L871.244 689.714 L871.804 689.714 L872.363 689.714 L872.922 689.714 L873.481 689.714 L874.041 689.714 L874.6 689.714 L875.159 689.714 L875.718 689.714 L876.278 689.714 L876.837 689.714 L877.396 689.714 L877.955 689.714 L878.515 689.714 L879.074 689.714 L879.633 689.714 L880.192 689.714 L880.752 689.714 L881.311 689.714 L881.87 689.714 L882.429 689.714 L882.989 689.714 L883.548 689.714 L884.107 689.714 L884.666 689.714 L885.226 689.714 L885.785 689.714 L886.344 689.714 L886.903 689.714 L887.463 689.714 L888.022 689.714 L888.581 689.714 L889.14 689.714 L889.7 689.714 L890.259 689.714 L890.818 689.714 L891.377 689.714 L891.937 689.714 L892.496 689.714 L893.055 689.714 L893.614 689.714 L894.174 689.714 L894.733 689.714 L895.292 689.714 L895.851 689.714 L896.411 689.714 L896.97 689.714 L897.529 689.714 L898.088 689.714 L898.648 689.714 L899.207 689.714 L899.766 689.714 L900.325 689.714 L900.885 689.714 L901.444 689.714 L902.003 689.714 L902.562 689.714 L903.122 689.714 L903.681 689.714 L904.24 689.714 L904.799 689.714 L905.359 689.714 L905.918 689.714 L906.477 689.714 L907.036 689.714 L907.596 689.714 L908.155 689.714 L908.714 689.714 L909.273 689.714 L909.833 689.714 L910.392 689.714 L910.951 689.714 L911.51 689.714 L912.07 689.714 L912.629 689.714 L913.188 689.714 L913.747 689.714 L914.307 689.714 L914.866 689.714 L915.425 689.714 L915.984 689.714 L916.544 689.714 L917.103 689.714 L917.662 689.714 L918.221 689.714 L918.781 689.714 L919.34 689.714 L919.899 689.714 L920.458 689.714 L921.018 689.714 L921.577 689.714 L922.136 689.714 L922.695 689.714 L923.255 689.714 L923.814 689.714 L924.373 689.714 L924.932 689.714 L925.492 689.714 L926.051 689.714 L926.61 689.714 L927.169 689.714 L927.729 689.714 L928.288 689.714 L928.847 689.714 L929.406 689.714 L929.966 689.714 L930.525 689.714 L931.084 689.714 L931.644 689.714 L932.203 689.714 L932.762 689.714 L933.321 689.714 L933.881 689.714 L934.44 689.714 L934.999 689.714 L935.558 689.714 L936.118 689.714 L936.677 689.714 L937.236 689.714 L937.795 689.714 L938.355 689.714 L938.914 689.714 L939.473 689.714 L940.032 689.714 L940.592 689.714 L941.151 689.714 L941.71 689.714 L942.269 689.714 L942.829 689.714 L943.388 689.714 L943.947 689.714 L944.506 689.714 L945.066 689.714 L945.625 689.714 L946.184 689.714 L946.743 689.714 L947.303 689.714 L947.862 689.714 L948.421 689.714 L948.98 689.714 L949.54 689.714 L950.099 689.714 L950.658 689.714 L951.217 689.714 L951.777 689.714 L952.336 689.714 L952.895 689.714 L953.454 689.714 L954.014 689.714 L954.573 689.714 L955.132 689.714 L955.691 689.714 L956.251 689.714 L956.81 689.714 L957.369 689.714 L957.928 689.714 L958.488 689.714 L959.047 689.714 L959.606 689.714 L960.165 689.714 L960.725 689.714 L961.284 689.714 L961.843 689.714 L962.402 689.714 L962.962 689.714 L963.521 689.714 L964.08 689.714 L964.639 689.714 L965.199 689.714 L965.758 689.714 L966.317 689.714 L966.876 689.714 L967.436 689.714 L967.995 689.714 L968.554 689.714 L969.113 689.714 L969.673 689.714 L970.232 689.714 L970.791 689.714 L971.35 689.714 L971.91 689.714 L972.469 689.714 L973.028 689.714 L973.587 689.714 L974.147 689.714 L974.706 689.714 L975.265 689.714 L975.824 689.714 L976.384 689.714 L976.943 689.714 L977.502 689.714 L978.061 689.714 L978.621 689.714 L979.18 689.714 L979.739 689.714 L980.298 689.714 L980.858 689.714 L981.417 689.714 L981.976 689.714 L982.535 689.714 L983.095 689.714 L983.654 689.714 L984.213 689.714 L984.772 689.714 L985.332 689.714 L985.891 689.714 L986.45 689.714 L987.009 689.714 L987.569 689.714 L988.128 689.714 L988.687 689.714 L989.246 689.714 L989.806 689.714 L990.365 689.714 L990.924 689.714 L991.483 689.714 L992.043 689.714 L992.602 689.714 L993.161 689.714 L993.72 689.714 L994.28 689.714 L994.839 689.714 L995.398 689.714 L995.957 689.714 L996.517 689.714 L997.076 689.714 L997.635 689.714 L998.194 689.714 L998.754 689.714 L999.313 689.714 L999.872 689.714 L1000.43 689.714 L1000.99 689.714 L1001.55 689.714 L1002.11 689.714 L1002.67 689.714 L1003.23 689.714 L1003.79 689.714 L1004.35 689.714 L1004.91 689.714 L1005.46 689.714 L1006.02 689.714 L1006.58 689.714 L1007.14 689.714 L1007.7 689.714 L1008.26 689.714 L1008.82 689.714 L1009.38 689.714 L1009.94 689.714 L1010.5 689.714 L1011.06 689.714 L1011.62 689.714 L1012.18 689.714 L1012.73 689.714 L1013.29 689.714 L1013.85 689.714 L1014.41 689.714 L1014.97 689.714 L1015.53 689.714 L1016.09 689.714 L1016.65 689.714 L1017.21 689.714 L1017.77 689.714 L1018.33 689.714 L1018.89 689.714 L1019.45 689.714 L1020.01 689.714 L1020.56 689.714 L1021.12 689.714 L1021.68 689.714 L1022.24 689.714 L1022.8 689.714 L1023.36 689.714 L1023.92 689.714 L1024.48 689.714 L1025.04 689.714 L1025.6 689.714 L1026.16 689.714 L1026.72 689.714 L1027.28 689.714 L1027.83 689.714 L1028.39 689.714 L1028.95 689.714 L1029.51 689.714 L1030.07 689.714 L1030.63 689.714 L1031.19 689.714 L1031.75 689.714 L1032.31 689.714 L1032.87 689.714 L1033.43 689.714 L1033.99 689.714 L1034.55 689.714 L1035.1 689.714 L1035.66 689.714 L1036.22 689.714 L1036.78 689.714 L1037.34 689.714 L1037.9 689.714 L1038.46 689.714 L1039.02 689.714 L1039.58 689.714 L1040.14 689.714 L1040.7 689.714 L1041.26 689.714 L1041.82 689.714 L1042.38 689.714 L1042.93 689.714 L1043.49 689.714 L1044.05 689.714 L1044.61 689.714 L1045.17 689.714 L1045.73 689.714 L1046.29 689.714 L1046.85 689.714 L1047.41 689.714 L1047.97 689.714 L1048.53 689.714 L1049.09 689.714 L1049.65 689.714 L1050.2 689.714 L1050.76 689.714 L1051.32 689.714 L1051.88 689.714 L1052.44 689.714 L1053 689.714 L1053.56 689.714 L1054.12 689.714 L1054.68 689.714 L1055.24 689.714 L1055.8 689.714 L1056.36 689.714 L1056.92 689.714 L1057.48 689.714 L1058.03 689.714 L1058.59 689.714 L1059.15 689.714 L1059.71 689.714 L1060.27 689.714 L1060.83 689.714 L1061.39 689.714 L1061.95 689.714 L1062.51 689.714 L1063.07 689.714 L1063.63 689.714 L1064.19 689.714 L1064.75 689.714 L1065.3 689.714 L1065.86 689.714 L1066.42 689.714 L1066.98 689.714 L1067.54 689.714 L1068.1 689.714 L1068.66 689.714 L1069.22 689.714 L1069.78 689.714 L1070.34 689.714 L1070.9 689.714 L1071.46 689.714 L1072.02 689.714 L1072.57 689.714 L1073.13 689.714 L1073.69 689.714 L1074.25 689.714 L1074.81 689.714 L1075.37 689.714 L1075.93 689.714 L1076.49 689.714 L1077.05 689.714 L1077.61 689.714 L1078.17 689.714 L1078.73 689.714 L1079.29 689.714 L1079.85 689.714 L1080.4 689.714 L1080.96 689.714 L1081.52 689.714 L1082.08 689.714 L1082.64 689.714 L1083.2 689.714 L1083.76 689.714 L1084.32 689.714 L1084.88 689.714 L1085.44 689.714 L1086 689.714 L1086.56 689.714 L1087.12 689.714 L1087.67 689.714 L1088.23 689.714 L1088.79 689.714 L1089.35 689.714 L1089.91 689.714 L1090.47 689.714 L1091.03 689.714 L1091.59 689.714 L1092.15 689.714 L1092.71 689.714 L1093.27 689.714 L1093.83 689.714 L1094.39 689.714 L1094.94 689.714 L1095.5 689.714 L1096.06 689.714 L1096.62 689.714 L1097.18 689.714 L1097.74 689.714 L1098.3 689.714 L1098.86 689.714 L1099.42 689.714 L1099.98 689.714 L1100.54 689.714 L1101.1 689.714 L1101.66 689.714 L1102.22 689.714 L1102.77 689.714 L1103.33 689.714 L1103.89 689.714 L1104.45 689.714 L1105.01 689.714 L1105.57 689.714 L1106.13 689.714 L1106.69 689.714 L1107.25 689.714 L1107.81 689.714 L1108.37 689.714 L1108.93 689.714 L1109.49 689.714 L1110.04 689.714 L1110.6 689.714 L1111.16 689.714 L1111.72 689.714 L1112.28 689.714 L1112.84 689.714 L1113.4 689.714 L1113.96 689.714 L1114.52 689.714 L1115.08 689.714 L1115.64 689.714 L1116.2 689.714 L1116.76 689.714 L1117.31 689.714 L1117.87 689.714 L1118.43 689.714 L1118.99 689.714 L1119.55 689.714 L1120.11 689.714 L1120.67 689.714 L1121.23 689.714 L1121.79 689.714 L1122.35 689.714 L1122.91 689.714 L1123.47 689.714 L1124.03 689.714 L1124.59 689.714 L1125.14 689.714 L1125.7 689.714 L1126.26 689.714 L1126.82 689.714 L1127.38 689.714 L1127.94 689.714 L1128.5 689.714 L1129.06 689.714 L1129.62 689.714 L1130.18 689.714 L1130.74 689.714 L1131.3 689.714 L1131.86 689.714 L1132.41 689.714 L1132.97 689.714 L1133.53 689.714 L1134.09 689.714 L1134.65 689.714 L1135.21 689.714 L1135.77 689.714 L1136.33 689.714 L1136.89 689.714 L1137.45 689.714 L1138.01 689.714 L1138.57 689.714 L1139.13 689.714 L1139.68 689.714 L1140.24 689.714 L1140.8 689.714 L1141.36 689.714 L1141.92 689.714 L1142.48 689.714 L1143.04 689.714 L1143.6 689.714 L1144.16 689.714 L1144.72 689.714 L1145.28 689.714 L1145.84 689.714 L1146.4 689.714 L1146.96 689.714 L1147.51 689.714 L1148.07 689.714 L1148.63 689.714 L1149.19 689.714 L1149.75 689.714 L1150.31 689.714 L1150.87 689.714 L1151.43 689.714 L1151.99 689.714 L1152.55 689.714 L1153.11 689.714 L1153.67 689.714 L1154.23 689.714 L1154.78 689.714 L1155.34 689.714 L1155.9 689.714 L1156.46 689.714 L1157.02 689.714 L1157.58 689.714 L1158.14 689.714 L1158.7 689.714 L1159.26 689.714 L1159.82 689.714 L1160.38 689.714 L1160.94 689.714 L1161.5 689.714 L1162.05 689.714 L1162.61 689.714 L1163.17 689.714 L1163.73 689.714 L1164.29 689.714 L1164.85 689.714 L1165.41 689.714 L1165.97 689.714 L1166.53 689.714 L1167.09 689.714 L1167.65 689.714 L1168.21 689.714 L1168.77 689.714 L1169.33 689.714 L1169.88 689.714 L1170.44 689.714 L1171 689.714 L1171.56 689.714 L1172.12 689.714 L1172.68 689.714 L1173.24 689.714 L1173.8 689.714 L1174.36 689.714 L1174.92 689.714 L1175.48 689.714 L1176.04 689.714 L1176.6 689.714 L1177.15 689.714 L1177.71 689.714 L1178.27 689.714 L1178.83 689.714 L1179.39 689.714 L1179.95 689.714 L1180.51 689.714 L1181.07 689.714 L1181.63 689.714 L1182.19 689.714 L1182.75 689.714 L1183.31 689.714 L1183.87 689.714 L1184.43 689.714 L1184.98 689.714 L1185.54 689.714 L1186.1 689.714 L1186.66 689.714 L1187.22 689.714 L1187.78 689.714 L1188.34 689.714 L1188.9 689.714 L1189.46 689.714 L1190.02 689.714 L1190.58 689.714 L1191.14 689.714 L1191.7 689.714 L1192.25 689.714 L1192.81 689.714 L1193.37 689.714 L1193.93 689.714 L1194.49 689.714 L1195.05 689.714 L1195.61 689.714 L1196.17 689.714 L1196.73 689.714 L1197.29 689.714 L1197.85 689.714 L1198.41 689.714 L1198.97 689.714 L1199.52 689.714 L1200.08 689.714 L1200.64 689.714 L1201.2 689.714 L1201.76 689.714 L1202.32 689.714 L1202.88 689.714 L1203.44 689.714 L1204 689.714 L1204.56 689.714 L1205.12 689.714 L1205.68 689.714 L1206.24 689.714 L1206.8 689.714 L1207.35 689.714 L1207.91 689.714 L1208.47 689.714 L1209.03 689.714 L1209.59 689.714 L1210.15 689.714 L1210.71 689.714 L1211.27 689.714 L1211.83 689.714 L1212.39 689.714 L1212.95 689.714 L1213.51 689.714 L1214.07 689.714 L1214.62 689.714 L1215.18 689.714 L1215.74 689.714 L1216.3 689.714 L1216.86 689.714 L1217.42 689.714 L1217.98 689.714 L1218.54 689.714 L1219.1 689.714 L1219.66 689.714 L1220.22 689.714 L1220.78 689.714 L1221.34 689.714 L1221.89 689.714 L1222.45 689.714 L1223.01 689.714 L1223.57 689.714 L1224.13 689.714 L1224.69 689.714 L1225.25 689.714 L1225.81 689.714 L1226.37 689.714 L1226.93 689.714 L1227.49 689.714 L1228.05 689.714 L1228.61 689.714 L1229.17 689.714 L1229.72 689.714 L1230.28 689.714 L1230.84 689.714 L1231.4 689.714 L1231.96 689.714 L1232.52 689.714 L1233.08 689.714 L1233.64 689.714 L1234.2 689.714 L1234.76 689.714 L1235.32 689.714 L1235.88 689.714 L1236.44 689.714 L1236.99 689.714 L1237.55 689.714 L1238.11 689.714 L1238.67 689.714 L1239.23 689.714 L1239.79 689.714 L1240.35 689.714 L1240.91 689.714 L1241.47 689.714 L1242.03 689.714 L1242.59 689.714 L1243.15 689.714 L1243.71 689.714 L1244.26 689.714 L1244.82 689.714 L1245.38 689.714 L1245.94 689.714 L1246.5 689.714 L1247.06 689.714 L1247.62 689.714 L1248.18 689.714 L1248.74 689.714 L1249.3 689.714 L1249.86 689.714 L1250.42 689.714 L1250.98 689.714 L1251.54 689.714 L1252.09 689.714 L1252.65 689.714 L1253.21 689.714 L1253.77 689.714 L1254.33 689.714 L1254.89 689.714 L1255.45 689.714 L1256.01 689.714 L1256.57 689.714 L1257.13 689.714 L1257.69 689.714 L1258.25 689.714 L1258.81 689.714 L1259.36 689.714 L1259.92 689.714 L1260.48 689.714 L1261.04 689.714 L1261.6 689.714 L1262.16 689.714 L1262.72 689.714 L1263.28 689.714 L1263.84 689.714 L1264.4 689.714 L1264.96 689.714 L1265.52 689.714 L1266.08 689.714 L1266.63 689.714 L1267.19 689.714 L1267.75 689.714 L1268.31 689.714 L1268.87 689.714 L1269.43 689.714 L1269.99 689.714 L1270.55 689.714 L1271.11 689.714 L1271.67 689.714 L1272.23 689.714 L1272.79 689.714 L1273.35 689.714 L1273.91 689.714 L1274.46 689.714 L1275.02 689.714 L1275.58 689.714 L1276.14 689.714 L1276.7 689.714 L1277.26 689.714 L1277.82 689.714 L1278.38 689.714 L1278.94 689.714 L1279.5 689.714 L1280.06 689.714 L1280.62 689.714 L1281.18 689.714 L1281.73 689.714 L1282.29 689.714 L1282.85 689.714 L1283.41 689.714 L1283.97 689.714 L1284.53 689.714 L1285.09 689.714 L1285.65 689.714 L1286.21 689.714 L1286.77 689.714 L1287.33 689.714 L1287.89 689.714 L1288.45 689.714 L1289 689.714 L1289.56 689.714 L1290.12 689.714 L1290.68 689.714 L1291.24 689.714 L1291.8 689.714 L1292.36 689.714 L1292.92 689.714 L1293.48 689.714 L1294.04 689.714 L1294.6 689.714 L1295.16 689.714 L1295.72 689.714 L1296.28 689.714 L1296.83 689.714 L1297.39 689.714 L1297.95 689.714 L1298.51 689.714 L1299.07 689.714 L1299.63 689.714 L1300.19 689.714 L1300.75 689.714 L1301.31 689.714 L1301.87 689.714 L1302.43 689.714 L1302.99 689.714 L1303.55 689.714 L1304.1 689.714 L1304.66 689.714 L1305.22 689.714 L1305.78 689.714 L1306.34 689.714 L1306.9 689.714 L1307.46 689.714 L1308.02 689.714 L1308.58 689.714 L1309.14 689.714 L1309.7 689.714 L1310.26 689.714 L1310.82 689.714 L1311.38 689.714 L1311.93 689.714 L1312.49 689.714 L1313.05 689.714 L1313.61 689.714 L1314.17 689.714 L1314.73 689.714 L1315.29 689.714 L1315.85 689.714 L1316.41 689.714 L1316.97 689.714 L1317.53 689.714 L1318.09 689.714 L1318.65 689.714 L1319.2 689.714 L1319.76 689.714 L1320.32 689.714 L1320.88 689.714 L1321.44 689.714 L1322 689.714 L1322.56 689.714 L1323.12 689.714 L1323.68 689.714 L1324.24 689.714 L1324.8 689.714 L1325.36 689.714 L1325.92 689.714 L1326.47 689.714 L1327.03 689.714 L1327.59 689.714 L1328.15 689.714 L1328.71 689.714 L1329.27 689.714 L1329.83 689.714 L1330.39 689.714 L1330.95 689.714 L1331.51 689.714 L1332.07 689.714 L1332.63 689.714 L1333.19 689.714 L1333.75 689.714 L1334.3 689.714 L1334.86 689.714 L1335.42 689.714 L1335.98 689.714 L1336.54 689.714 L1337.1 689.714 L1337.66 689.714 L1338.22 689.714 L1338.78 689.714 L1339.34 689.714 L1339.9 689.714 L1340.46 689.714 L1341.02 689.714 L1341.57 689.714 L1342.13 689.714 L1342.69 689.714 L1343.25 689.714 L1343.81 689.714 L1344.37 689.714 L1344.93 689.714 L1345.49 689.714 L1346.05 689.714 L1346.61 689.714 L1347.17 689.714 L1347.73 689.714 L1348.29 689.714 L1348.84 689.714 L1349.4 689.714 L1349.96 689.714 L1350.52 689.714 L1351.08 689.714 L1351.64 689.714 L1352.2 689.714 L1352.76 689.714 L1353.32 689.714 L1353.88 689.714 L1354.44 689.714 L1355 689.714 L1355.56 689.714 L1356.12 689.714 L1356.67 689.714 L1357.23 689.714 L1357.79 689.714 L1358.35 689.714 L1358.91 689.714 L1359.47 689.714 L1360.03 689.714 L1360.59 689.714 L1361.15 689.714 L1361.71 689.714 L1362.27 689.714 L1362.83 689.714 L1363.39 689.714 L1363.94 689.714 L1364.5 689.714 L1365.06 689.714 L1365.62 689.714 L1366.18 689.714 L1366.74 689.714 L1367.3 689.714 L1367.86 689.714 L1368.42 689.714 L1368.98 689.714 L1369.54 689.714 L1370.1 689.714 L1370.66 689.714 L1371.21 689.714 L1371.77 689.714 L1372.33 689.714 L1372.89 689.714 L1373.45 689.714 L1374.01 689.714 L1374.57 689.714 L1375.13 689.714 L1375.69 689.714 L1376.25 689.714 L1376.81 689.714 L1377.37 689.714 L1377.93 689.714 L1378.49 689.714 L1379.04 689.714 L1379.6 689.714 L1380.16 689.714 L1380.72 689.714 L1381.28 689.714 L1381.84 689.714 L1382.4 689.714 L1382.96 689.714 L1383.52 689.714 L1384.08 689.714 L1384.64 689.714 L1385.2 689.714 L1385.76 689.714 L1386.31 689.714 L1386.87 689.714 L1387.43 689.714 L1387.99 689.714 L1388.55 689.714 L1389.11 689.714 L1389.67 689.714 L1390.23 689.714 L1390.79 689.714 L1391.35 689.714 L1391.91 689.714 L1392.47 689.714 L1393.03 689.714 L1393.58 689.714 L1394.14 689.714 L1394.7 689.714 L1395.26 689.714 L1395.82 689.714 L1396.38 689.714 L1396.94 689.714 L1397.5 689.714 L1398.06 689.714 L1398.62 689.714 L1399.18 689.714 L1399.74 689.714 L1400.3 689.714 L1400.86 689.714 L1401.41 689.714 L1401.97 689.714 L1402.53 689.714 L1403.09 689.714 L1403.65 689.714 L1404.21 689.714 L1404.77 689.714 L1405.33 689.714 L1405.89 689.714 L1406.45 689.714 L1407.01 689.714 L1407.57 689.714 L1408.13 689.714 L1408.68 689.714 L1409.24 689.714 L1409.8 689.714 L1410.36 689.714 L1410.92 689.714 L1411.48 689.714 L1412.04 689.714 L1412.6 689.714 L1413.16 689.714 L1413.72 689.714 L1414.28 689.714 L1414.84 689.714 L1415.4 689.714 L1415.95 689.714 L1416.51 689.714 L1417.07 689.714 L1417.63 689.714 L1418.19 689.714 L1418.75 689.714 L1419.31 689.714 L1419.87 689.714 L1420.43 689.714 L1420.99 689.714 L1421.55 689.714 L1422.11 689.714 L1422.67 689.714 L1423.23 689.714 L1423.78 689.714 L1424.34 689.714 L1424.9 689.714 L1425.46 689.714 L1426.02 689.714 L1426.58 689.714 L1427.14 689.714 L1427.7 689.714 L1428.26 689.714 L1428.82 689.714 L1429.38 689.714 L1429.94 689.714 L1430.5 689.714 L1431.05 689.714 L1431.61 689.714 L1432.17 689.714 L1432.73 689.714 L1433.29 689.714 L1433.85 689.714 L1434.41 689.714 L1434.97 689.714 L1435.53 689.714 L1436.09 689.714 L1436.65 689.714 L1437.21 689.714 L1437.77 689.714 L1438.33 689.714 L1438.88 689.714 L1439.44 689.714 L1440 689.714 L1440.56 689.714 L1441.12 689.714 L1441.68 689.714 L1442.24 689.714 L1442.8 689.714 L1443.36 689.714 L1443.92 689.714 L1444.48 689.714 L1445.04 689.714 L1445.6 689.714 L1446.15 689.714 L1446.71 689.714 L1447.27 689.714 L1447.83 689.714 L1448.39 689.714 L1448.95 689.714 L1449.51 689.714 L1450.07 689.714 L1450.63 689.714 L1451.19 689.714 L1451.75 689.714 L1452.31 689.714 L1452.87 689.714 L1453.42 689.714 L1453.98 689.714 L1454.54 689.714 L1455.1 689.714 L1455.66 689.714 L1456.22 689.714 L1456.78 689.714 L1457.34 689.714 L1457.9 689.714 L1458.46 689.714 L1459.02 689.714 L1459.58 689.714 L1460.14 689.714 L1460.7 689.714 L1461.25 689.714 L1461.81 689.714 L1462.37 689.714 L1462.93 689.714 L1463.49 689.714 L1464.05 689.714 L1464.61 689.714 L1465.17 689.714 L1465.73 689.714 L1466.29 689.714 L1466.85 689.714 L1467.41 689.714 L1467.97 689.714 L1468.52 689.714 L1469.08 689.714 L1469.64 689.714 L1470.2 689.714 L1470.76 689.714 L1471.32 689.714 L1471.88 689.714 L1472.44 689.714 L1473 689.714 L1473.56 689.714 L1474.12 689.714 L1474.68 689.714 L1475.24 689.714 L1475.79 689.714 L1476.35 689.714 L1476.91 689.714 L1477.47 689.714 L1478.03 689.714 L1478.59 689.714 L1479.15 689.714 L1479.71 689.714 L1480.27 689.714 L1480.83 689.714 L1481.39 689.714 L1481.95 689.714 L1482.51 689.714 L1483.07 689.714 L1483.62 689.714 L1484.18 689.714 L1484.74 689.714 L1485.3 689.714 L1485.86 689.714 L1486.42 689.714 L1486.98 689.714 L1487.54 689.714 L1488.1 689.714 L1488.66 689.714 L1489.22 689.714 L1489.78 689.714 L1490.34 689.714 L1490.89 689.714 L1491.45 689.714 L1492.01 689.714 L1492.57 689.714 L1493.13 689.714 L1493.69 689.714 L1494.25 689.714 L1494.81 689.714 L1495.37 689.714 L1495.93 689.714 L1496.49 689.714 L1497.05 689.714 L1497.61 689.714 L1498.16 689.714 L1498.72 689.714 L1499.28 689.714 L1499.84 689.714 L1500.4 689.714 L1500.96 689.714 L1501.52 689.714 L1502.08 689.714 L1502.64 689.714 L1503.2 689.714 L1503.76 689.714 L1504.32 689.714 L1504.88 689.714 L1505.44 689.714 L1505.99 689.714 L1506.55 689.714 L1507.11 689.714 L1507.67 689.714 L1508.23 689.714 L1508.79 689.714 L1509.35 689.714 L1509.91 689.714 L1510.47 689.714 L1511.03 689.714 L1511.59 689.714 L1512.15 689.714 L1512.71 689.714 L1513.26 689.714 L1513.82 689.714 L1514.38 689.714 L1514.94 689.714 L1515.5 689.714 L1516.06 689.714 L1516.62 689.714 L1517.18 689.714 L1517.74 689.714 L1518.3 689.714 L1518.86 689.714 L1519.42 689.714 L1519.98 689.714 L1520.53 689.714 L1521.09 689.714 L1521.65 689.714 L1522.21 689.714 L1522.77 689.714 L1523.33 689.714 L1523.89 689.714 L1524.45 689.714 L1525.01 689.714 L1525.57 689.714 L1526.13 689.714 L1526.69 689.714 L1527.25 689.714 L1527.81 689.714 L1528.36 689.714 L1528.92 689.714 L1529.48 689.714 L1530.04 689.714 L1530.6 689.714 L1531.16 689.714 L1531.72 689.714 L1532.28 689.714 L1532.84 689.714 L1533.4 689.714 L1533.96 689.714 L1534.52 689.714 L1535.08 689.714 L1535.63 689.714 L1536.19 689.714 L1536.75 689.714 L1537.31 689.714 L1537.87 689.714 L1538.43 689.714 L1538.99 689.714 L1539.55 689.714 L1540.11 689.714 L1540.67 689.714 L1541.23 689.714 L1541.79 689.714 L1542.35 689.714 L1542.9 689.714 L1543.46 689.714 L1544.02 689.714 L1544.58 689.714 L1545.14 689.714 L1545.7 689.714 L1546.26 689.714 L1546.82 689.714 L1547.38 689.714 L1547.94 689.714 L1548.5 689.714 L1549.06 689.714 L1549.62 689.714 L1550.18 689.714 L1550.73 689.714 L1551.29 689.714 L1551.85 689.714 L1552.41 689.714 L1552.97 689.714 L1553.53 689.714 L1554.09 689.714 L1554.65 689.714 L1555.21 689.714 L1555.77 689.714 L1556.33 689.714 L1556.89 689.714 L1557.45 689.714 L1558 689.714 L1558.56 689.714 L1559.12 689.714 L1559.68 689.714 L1560.24 689.714 L1560.8 689.714 L1561.36 689.714 L1561.92 689.714 L1562.48 689.714 L1563.04 689.714 L1563.6 689.714 L1564.16 689.714 L1564.72 689.714 L1565.28 689.714 L1565.83 689.714 L1566.39 689.714 L1566.95 689.714 L1567.51 689.714 L1568.07 689.714 L1568.63 689.714 L1569.19 689.714 L1569.75 689.714 L1570.31 689.714 L1570.87 689.714 L1571.43 689.714 L1571.99 689.714 L1572.55 689.714 L1573.1 689.714 L1573.66 689.714 L1574.22 689.714 L1574.78 689.714 L1575.34 689.714 L1575.9 689.714 L1576.46 689.714 L1577.02 689.714 L1577.58 689.714 L1578.14 689.714 L1578.7 689.714 L1579.26 689.714 L1579.82 689.714 L1580.37 689.714 L1580.93 689.714 L1581.49 689.714 L1582.05 689.714 L1582.61 689.714 L1583.17 689.714 L1583.73 689.714 L1584.29 689.714 L1584.85 689.714 L1585.41 689.714 L1585.97 689.714 L1586.53 689.714 L1587.09 689.714 L1587.65 689.714 L1588.2 689.714 L1588.76 689.714 L1589.32 689.714 L1589.88 689.714 L1590.44 689.714 L1591 689.714 L1591.56 689.714 L1592.12 689.714 L1592.68 689.714 L1593.24 689.714 L1593.8 689.714 L1594.36 689.714 L1594.92 689.714 L1595.47 689.714 L1596.03 689.714 L1596.59 689.714 L1597.15 689.714 L1597.71 689.714 L1598.27 689.714 L1598.83 689.714 L1599.39 689.714 L1599.95 689.714 L1600.51 689.714 L1601.07 689.714 L1601.63 689.714 L1602.19 689.714 L1602.74 689.714 L1603.3 689.714 L1603.86 689.714 L1604.42 689.714 L1604.98 689.714 L1605.54 689.714 L1606.1 689.714 L1606.66 689.714 L1607.22 689.714 L1607.78 689.714 L1608.34 689.714 L1608.9 689.714 L1609.46 689.714 L1610.02 689.714 L1610.57 689.714 L1611.13 689.714 L1611.69 689.714 L1612.25 689.714 L1612.81 689.714 L1613.37 689.714 L1613.93 689.714 L1614.49 689.714 L1615.05 689.714 L1615.61 689.714 L1616.17 689.714 L1616.73 689.714 L1617.29 689.714 L1617.84 689.714 L1618.4 689.714 L1618.96 689.714 L1619.52 689.714 L1620.08 689.714 L1620.64 689.714 L1621.2 689.714 L1621.76 689.714 L1622.32 689.714 L1622.88 689.714 L1623.44 689.714 L1624 689.714 L1624.56 689.714 L1625.11 689.714 L1625.67 689.714 L1626.23 689.714 L1626.79 689.714 L1627.35 689.714 L1627.91 689.714 L1628.47 689.714 L1629.03 689.714 L1629.59 689.714 L1630.15 689.714 L1630.71 689.714 L1631.27 689.714 L1631.83 689.714 L1632.39 689.714 L1632.94 689.714 L1633.5 689.714 L1634.06 689.714 L1634.62 689.714 L1635.18 689.714 L1635.74 689.714 L1636.3 689.714 L1636.86 689.714 L1637.42 689.714 L1637.98 689.714 L1638.54 689.714 L1639.1 689.714 L1639.66 689.714 L1640.21 689.714 L1640.77 689.714 L1641.33 689.714 L1641.89 689.714 L1642.45 689.714 L1643.01 689.714 L1643.57 689.714 L1644.13 689.714 L1644.69 689.714 L1645.25 689.714 L1645.81 689.714 L1646.37 689.714 L1646.93 689.714 L1647.48 689.714 L1648.04 689.714 L1648.6 689.714 L1649.16 689.714 L1649.72 689.714 L1650.28 689.714 L1650.84 689.714 L1651.4 689.714 L1651.96 689.714 L1652.52 689.714 L1653.08 689.714 L1653.64 689.714 L1654.2 689.714 L1654.76 689.714 L1655.31 689.714 L1655.87 689.714 L1656.43 689.714 L1656.99 689.714 L1657.55 689.714 L1658.11 689.714 L1658.67 689.714 L1659.23 689.714 L1659.79 689.714 L1660.35 689.714 L1660.91 689.714 L1661.47 689.714 L1662.03 689.714 L1662.58 689.714 L1663.14 689.714 L1663.7 689.714 L1664.26 689.714 L1664.82 689.714 L1665.38 689.714 L1665.94 689.714 L1666.5 689.714 L1667.06 689.714 L1667.62 689.714 L1668.18 689.714 L1668.74 689.714 L1669.3 689.714 L1669.85 689.714 L1670.41 689.714 L1670.97 689.714 L1671.53 689.714 L1672.09 689.714 L1672.65 689.714 L1673.21 689.714 L1673.77 689.714 L1674.33 689.714 L1674.89 689.714 L1675.45 689.714 L1676.01 689.714 L1676.57 689.714 L1677.13 689.714 L1677.68 689.714 L1678.24 689.714 L1678.8 689.714 L1679.36 689.714 L1679.92 689.714 L1680.48 689.714 L1681.04 689.714 L1681.6 689.714 L1682.16 689.714 L1682.72 689.714 L1683.28 689.714 L1683.84 689.714 L1684.4 689.714 L1684.95 689.714 L1685.51 689.714 L1686.07 689.714 L1686.63 689.714 L1687.19 689.714 L1687.75 689.714 L1688.31 689.714 L1688.87 689.714 L1689.43 689.714 L1689.99 689.714 L1690.55 689.714 L1691.11 689.714 L1691.67 689.714 L1692.23 689.714 L1692.78 689.714 L1693.34 689.714 L1693.9 689.714 L1694.46 689.714 L1695.02 689.714 L1695.58 689.714 L1696.14 689.714 L1696.7 689.714 L1697.26 689.714 L1697.82 689.714 L1698.38 689.714 L1698.94 689.714 L1699.5 689.714 L1700.05 689.714 L1700.61 689.714 L1701.17 689.714 L1701.73 689.714 L1702.29 689.714 L1702.85 689.714 L1703.41 689.714 L1703.97 689.714 L1704.53 689.714 L1705.09 689.714 L1705.65 689.714 L1706.21 689.714 L1706.77 689.714 L1707.32 689.714 L1707.88 689.714 L1708.44 689.714 L1709 689.714 L1709.56 689.714 L1710.12 689.714 L1710.68 689.714 L1711.24 689.714 L1711.8 689.714 L1712.36 689.714 L1712.92 689.714 L1713.48 689.714 L1714.04 689.714 L1714.6 689.714 L1715.15 689.714 L1715.71 689.714 L1716.27 689.714 L1716.83 689.714 L1717.39 689.714 L1717.95 689.714 L1718.51 689.714 L1719.07 689.714 L1719.63 689.714 L1720.19 689.714 L1720.75 689.714 L1721.31 689.714 L1721.87 689.714 L1722.42 689.714 L1722.98 689.714 L1723.54 689.714 L1724.1 689.714 L1724.66 689.714 L1725.22 689.714 L1725.78 689.714 L1726.34 689.714 L1726.9 689.714 L1727.46 689.714 L1728.02 689.714 L1728.58 689.714 L1729.14 689.714 L1729.69 689.714 L1730.25 689.714 L1730.81 689.714 L1731.37 689.714 L1731.93 689.714 L1732.49 689.714 L1733.05 689.714 L1733.61 689.714 L1734.17 689.714 L1734.73 689.714 L1735.29 689.714 L1735.85 689.714 L1736.41 689.714 L1736.97 689.714 L1737.52 689.714 L1738.08 689.714 L1738.64 689.714 L1739.2 689.714 L1739.76 689.714 L1740.32 689.714 L1740.88 689.714 L1741.44 689.714 L1742 689.714 L1742.56 689.714 L1743.12 689.714 L1743.68 689.714 L1744.24 689.714 L1744.79 689.714 L1745.35 689.714 L1745.91 689.714 L1746.47 689.714 L1747.03 689.714 L1747.59 689.714 L1748.15 689.714 L1748.71 689.714 L1749.27 689.714 L1749.83 689.714 L1750.39 689.714 L1750.95 689.714 L1751.51 689.714 L1752.06 689.714 L1752.62 689.714 L1753.18 689.714 L1753.74 689.714 L1754.3 689.714 L1754.86 689.714 L1755.42 689.714 L1755.98 689.714 L1756.54 689.714 L1757.1 689.714 L1757.66 689.714 L1758.22 689.714 L1758.78 689.714 L1759.34 689.714 L1759.89 689.714 L1760.45 689.714 L1761.01 689.714 L1761.57 689.714 L1762.13 689.714 L1762.69 689.714 L1763.25 689.714 L1763.81 689.714 L1764.37 689.714 L1764.93 689.714 L1765.49 689.714 L1766.05 689.714 L1766.61 689.714 L1767.16 689.714 L1767.72 689.714 L1768.28 689.714 L1768.84 689.714 L1769.4 689.714 L1769.96 689.714 L1770.52 689.714 L1771.08 689.714 L1771.64 689.714 L1772.2 689.714 L1772.76 689.714 L1773.32 689.714 L1773.88 689.714 L1774.43 689.714 L1774.99 689.714 L1775.55 689.714 L1776.11 689.714 L1776.67 689.714 L1777.23 689.714 L1777.79 689.714 L1778.35 689.714 L1778.91 689.714 L1779.47 689.714 L1780.03 689.714 L1780.59 689.714 L1781.15 689.714 L1781.71 689.714 L1782.26 689.714 L1782.82 689.714 L1783.38 689.714 L1783.94 689.714 L1784.5 689.714 L1785.06 689.714 L1785.62 689.714 L1786.18 689.714 L1786.74 689.714 L1787.3 689.714 L1787.86 689.714 L1788.42 689.714 L1788.98 689.714 L1789.53 689.714 L1790.09 689.714 L1790.65 689.714 L1791.21 689.714 L1791.77 689.714 L1792.33 689.714 L1792.89 689.714 L1793.45 689.714 L1794.01 689.714 L1794.57 689.714 L1795.13 689.714 L1795.69 689.714 L1796.25 689.714 L1796.8 689.714 L1797.36 689.714 L1797.92 689.714 L1798.48 689.714 L1799.04 689.714 L1799.6 689.714 L1800.16 689.714 L1800.72 689.714 L1801.28 689.714 L1801.84 689.714 L1802.4 689.714 L1802.96 689.714 L1803.52 689.714 L1804.08 689.714 L1804.63 689.714 L1805.19 689.714 L1805.75 689.714 L1806.31 689.714 L1806.87 689.714 L1807.43 689.714 L1807.99 689.714 L1808.55 689.714 L1809.11 689.714 L1809.67 689.714 L1810.23 689.714 L1810.79 689.714 L1811.35 689.714 L1811.9 689.714 L1812.46 689.714 L1813.02 689.714 L1813.58 689.714 L1814.14 689.714 L1814.7 689.714 L1815.26 689.714 L1815.82 689.714 L1816.38 689.714 L1816.94 689.714 L1817.5 689.714 L1818.06 689.714 L1818.62 689.714 L1819.18 689.714 L1819.73 689.714 L1820.29 689.714 L1820.85 689.714 L1821.41 689.714 L1821.97 689.714 L1822.53 689.714 L1823.09 689.714 L1823.65 689.714 L1824.21 689.714 L1824.77 689.714 L1825.33 689.714 L1825.89 689.714 L1826.45 689.714 L1827 689.714 L1827.56 689.714 L1828.12 689.714 L1828.68 689.714 L1829.24 689.714 L1829.8 689.714 L1830.36 689.714 L1830.92 689.714 L1831.48 689.714 L1832.04 689.714 L1832.6 689.714 L1833.16 689.714 L1833.72 689.714 L1834.27 689.714 L1834.83 689.714 L1835.39 689.714 L1835.95 689.714 L1836.51 689.714 L1837.07 689.714 L1837.63 689.714 L1838.19 689.714 L1838.19 680.254 L1837.63 680.254 L1837.07 680.254 L1836.51 680.254 L1835.95 680.254 L1835.39 680.254 L1834.83 680.254 L1834.27 680.254 L1833.72 680.254 L1833.16 680.254 L1832.6 680.254 L1832.04 680.254 L1831.48 680.254 L1830.92 680.254 L1830.36 680.254 L1829.8 680.254 L1829.24 680.254 L1828.68 680.254 L1828.12 680.254 L1827.56 680.254 L1827 680.254 L1826.45 680.254 L1825.89 680.254 L1825.33 680.254 L1824.77 680.254 L1824.21 680.254 L1823.65 680.254 L1823.09 680.254 L1822.53 680.254 L1821.97 680.254 L1821.41 680.254 L1820.85 680.254 L1820.29 680.254 L1819.73 680.254 L1819.18 680.254 L1818.62 680.254 L1818.06 680.254 L1817.5 680.254 L1816.94 680.254 L1816.38 680.254 L1815.82 680.254 L1815.26 680.254 L1814.7 680.254 L1814.14 680.254 L1813.58 680.254 L1813.02 680.254 L1812.46 680.254 L1811.9 680.254 L1811.35 680.254 L1810.79 680.254 L1810.23 680.254 L1809.67 680.254 L1809.11 680.254 L1808.55 680.254 L1807.99 680.254 L1807.43 680.254 L1806.87 680.254 L1806.31 680.254 L1805.75 680.254 L1805.19 680.254 L1804.63 680.254 L1804.08 680.254 L1803.52 680.254 L1802.96 680.254 L1802.4 680.254 L1801.84 680.254 L1801.28 680.254 L1800.72 680.254 L1800.16 680.254 L1799.6 680.254 L1799.04 680.254 L1798.48 680.254 L1797.92 680.254 L1797.36 680.254 L1796.8 680.254 L1796.25 680.254 L1795.69 680.254 L1795.13 680.254 L1794.57 680.254 L1794.01 680.254 L1793.45 680.254 L1792.89 680.254 L1792.33 680.254 L1791.77 680.254 L1791.21 680.254 L1790.65 680.254 L1790.09 680.254 L1789.53 680.254 L1788.98 680.254 L1788.42 680.254 L1787.86 680.254 L1787.3 680.254 L1786.74 680.254 L1786.18 680.254 L1785.62 680.254 L1785.06 680.254 L1784.5 680.254 L1783.94 680.254 L1783.38 680.254 L1782.82 680.254 L1782.26 680.254 L1781.71 680.254 L1781.15 680.254 L1780.59 680.254 L1780.03 680.254 L1779.47 680.254 L1778.91 680.254 L1778.35 680.254 L1777.79 680.254 L1777.23 680.254 L1776.67 680.254 L1776.11 680.254 L1775.55 680.254 L1774.99 680.254 L1774.43 680.254 L1773.88 680.254 L1773.32 680.254 L1772.76 680.254 L1772.2 680.254 L1771.64 680.254 L1771.08 680.254 L1770.52 680.254 L1769.96 680.254 L1769.4 680.254 L1768.84 680.254 L1768.28 680.254 L1767.72 680.254 L1767.16 680.254 L1766.61 680.254 L1766.05 680.254 L1765.49 680.254 L1764.93 680.254 L1764.37 680.254 L1763.81 680.254 L1763.25 680.254 L1762.69 680.254 L1762.13 680.254 L1761.57 680.254 L1761.01 680.254 L1760.45 680.254 L1759.89 680.254 L1759.34 680.254 L1758.78 680.254 L1758.22 680.254 L1757.66 680.254 L1757.1 680.254 L1756.54 680.254 L1755.98 680.254 L1755.42 680.254 L1754.86 680.254 L1754.3 680.254 L1753.74 680.254 L1753.18 680.254 L1752.62 680.254 L1752.06 680.254 L1751.51 680.254 L1750.95 680.254 L1750.39 680.254 L1749.83 680.254 L1749.27 680.254 L1748.71 680.254 L1748.15 680.254 L1747.59 680.254 L1747.03 680.254 L1746.47 680.254 L1745.91 680.254 L1745.35 680.254 L1744.79 680.254 L1744.24 680.254 L1743.68 680.254 L1743.12 680.254 L1742.56 680.254 L1742 680.254 L1741.44 680.254 L1740.88 680.254 L1740.32 680.254 L1739.76 680.254 L1739.2 680.254 L1738.64 680.254 L1738.08 680.254 L1737.52 680.254 L1736.97 680.254 L1736.41 680.254 L1735.85 680.254 L1735.29 680.254 L1734.73 680.254 L1734.17 680.254 L1733.61 680.254 L1733.05 680.254 L1732.49 680.254 L1731.93 680.254 L1731.37 680.254 L1730.81 680.254 L1730.25 680.254 L1729.69 680.254 L1729.14 680.254 L1728.58 680.254 L1728.02 680.254 L1727.46 680.254 L1726.9 680.254 L1726.34 680.254 L1725.78 680.254 L1725.22 680.254 L1724.66 680.254 L1724.1 680.254 L1723.54 680.254 L1722.98 680.254 L1722.42 680.254 L1721.87 680.254 L1721.31 680.254 L1720.75 680.254 L1720.19 680.254 L1719.63 680.254 L1719.07 680.254 L1718.51 680.254 L1717.95 680.254 L1717.39 680.254 L1716.83 680.254 L1716.27 680.254 L1715.71 680.254 L1715.15 680.254 L1714.6 680.254 L1714.04 680.254 L1713.48 680.254 L1712.92 680.254 L1712.36 680.254 L1711.8 680.254 L1711.24 680.254 L1710.68 680.254 L1710.12 680.254 L1709.56 680.254 L1709 680.254 L1708.44 680.254 L1707.88 680.254 L1707.32 680.254 L1706.77 680.254 L1706.21 680.254 L1705.65 680.254 L1705.09 680.254 L1704.53 680.254 L1703.97 680.254 L1703.41 680.254 L1702.85 680.254 L1702.29 680.254 L1701.73 680.254 L1701.17 680.254 L1700.61 680.254 L1700.05 680.254 L1699.5 680.254 L1698.94 680.254 L1698.38 680.254 L1697.82 680.254 L1697.26 680.254 L1696.7 680.254 L1696.14 680.254 L1695.58 680.254 L1695.02 680.254 L1694.46 680.254 L1693.9 680.254 L1693.34 680.254 L1692.78 680.254 L1692.23 680.254 L1691.67 680.254 L1691.11 680.254 L1690.55 680.254 L1689.99 680.254 L1689.43 680.254 L1688.87 680.254 L1688.31 680.254 L1687.75 680.254 L1687.19 680.254 L1686.63 680.254 L1686.07 680.254 L1685.51 680.254 L1684.95 680.254 L1684.4 680.254 L1683.84 680.254 L1683.28 680.254 L1682.72 680.254 L1682.16 680.254 L1681.6 680.254 L1681.04 680.254 L1680.48 680.254 L1679.92 680.254 L1679.36 680.254 L1678.8 680.254 L1678.24 680.254 L1677.68 680.254 L1677.13 680.254 L1676.57 680.254 L1676.01 680.254 L1675.45 680.254 L1674.89 680.254 L1674.33 680.254 L1673.77 680.254 L1673.21 680.254 L1672.65 680.254 L1672.09 680.254 L1671.53 680.254 L1670.97 680.254 L1670.41 680.254 L1669.85 680.254 L1669.3 680.254 L1668.74 680.254 L1668.18 680.254 L1667.62 680.254 L1667.06 680.254 L1666.5 680.254 L1665.94 680.254 L1665.38 680.254 L1664.82 680.254 L1664.26 680.254 L1663.7 680.254 L1663.14 680.254 L1662.58 680.254 L1662.03 680.254 L1661.47 680.254 L1660.91 680.254 L1660.35 680.254 L1659.79 680.254 L1659.23 680.254 L1658.67 680.254 L1658.11 680.254 L1657.55 680.254 L1656.99 680.254 L1656.43 680.254 L1655.87 680.254 L1655.31 680.254 L1654.76 680.254 L1654.2 680.254 L1653.64 680.254 L1653.08 680.254 L1652.52 680.254 L1651.96 680.254 L1651.4 680.254 L1650.84 680.254 L1650.28 680.254 L1649.72 680.254 L1649.16 680.254 L1648.6 680.254 L1648.04 680.254 L1647.48 680.254 L1646.93 680.254 L1646.37 680.254 L1645.81 680.254 L1645.25 680.254 L1644.69 680.254 L1644.13 680.254 L1643.57 680.254 L1643.01 680.254 L1642.45 680.254 L1641.89 680.254 L1641.33 680.254 L1640.77 680.254 L1640.21 680.254 L1639.66 680.254 L1639.1 680.254 L1638.54 680.254 L1637.98 680.254 L1637.42 680.254 L1636.86 680.254 L1636.3 680.254 L1635.74 680.254 L1635.18 680.254 L1634.62 680.254 L1634.06 680.254 L1633.5 680.254 L1632.94 680.254 L1632.39 680.254 L1631.83 680.254 L1631.27 680.254 L1630.71 680.254 L1630.15 680.254 L1629.59 680.254 L1629.03 680.254 L1628.47 680.254 L1627.91 680.254 L1627.35 680.254 L1626.79 680.254 L1626.23 680.254 L1625.67 680.254 L1625.11 680.254 L1624.56 680.254 L1624 680.254 L1623.44 680.254 L1622.88 680.254 L1622.32 680.254 L1621.76 680.254 L1621.2 680.254 L1620.64 680.254 L1620.08 680.254 L1619.52 680.254 L1618.96 680.254 L1618.4 680.254 L1617.84 680.254 L1617.29 680.254 L1616.73 680.254 L1616.17 680.254 L1615.61 680.254 L1615.05 680.254 L1614.49 680.254 L1613.93 680.254 L1613.37 680.254 L1612.81 680.254 L1612.25 680.254 L1611.69 680.254 L1611.13 680.254 L1610.57 680.254 L1610.02 680.254 L1609.46 680.254 L1608.9 680.254 L1608.34 680.254 L1607.78 680.254 L1607.22 680.254 L1606.66 680.254 L1606.1 680.254 L1605.54 680.254 L1604.98 680.254 L1604.42 680.254 L1603.86 680.254 L1603.3 680.254 L1602.74 680.254 L1602.19 680.254 L1601.63 680.254 L1601.07 680.254 L1600.51 680.254 L1599.95 680.254 L1599.39 680.254 L1598.83 680.254 L1598.27 680.254 L1597.71 680.254 L1597.15 680.254 L1596.59 680.254 L1596.03 680.254 L1595.47 680.254 L1594.92 680.254 L1594.36 680.254 L1593.8 680.254 L1593.24 680.254 L1592.68 680.254 L1592.12 680.254 L1591.56 680.254 L1591 680.254 L1590.44 680.254 L1589.88 680.254 L1589.32 680.254 L1588.76 680.254 L1588.2 680.254 L1587.65 680.254 L1587.09 680.254 L1586.53 680.254 L1585.97 680.254 L1585.41 680.254 L1584.85 680.254 L1584.29 680.254 L1583.73 680.254 L1583.17 680.254 L1582.61 680.254 L1582.05 680.254 L1581.49 680.254 L1580.93 680.254 L1580.37 680.254 L1579.82 680.254 L1579.26 680.254 L1578.7 680.254 L1578.14 680.254 L1577.58 680.254 L1577.02 680.254 L1576.46 680.254 L1575.9 680.254 L1575.34 680.254 L1574.78 680.254 L1574.22 680.254 L1573.66 680.254 L1573.1 680.254 L1572.55 680.254 L1571.99 680.254 L1571.43 680.254 L1570.87 680.254 L1570.31 680.254 L1569.75 680.254 L1569.19 680.254 L1568.63 680.254 L1568.07 680.254 L1567.51 680.254 L1566.95 680.254 L1566.39 680.254 L1565.83 680.254 L1565.28 680.254 L1564.72 680.254 L1564.16 680.254 L1563.6 680.254 L1563.04 680.254 L1562.48 680.254 L1561.92 680.254 L1561.36 680.254 L1560.8 680.254 L1560.24 680.254 L1559.68 680.254 L1559.12 680.254 L1558.56 680.254 L1558 680.254 L1557.45 680.254 L1556.89 680.254 L1556.33 680.254 L1555.77 680.254 L1555.21 680.254 L1554.65 680.254 L1554.09 680.254 L1553.53 680.254 L1552.97 680.254 L1552.41 680.254 L1551.85 680.254 L1551.29 680.254 L1550.73 680.254 L1550.18 680.254 L1549.62 680.254 L1549.06 680.254 L1548.5 680.254 L1547.94 680.254 L1547.38 680.254 L1546.82 680.254 L1546.26 680.254 L1545.7 680.254 L1545.14 680.254 L1544.58 680.254 L1544.02 680.254 L1543.46 680.254 L1542.9 680.254 L1542.35 680.254 L1541.79 680.254 L1541.23 680.254 L1540.67 680.254 L1540.11 680.254 L1539.55 680.254 L1538.99 680.254 L1538.43 680.254 L1537.87 680.254 L1537.31 680.254 L1536.75 680.254 L1536.19 680.254 L1535.63 680.254 L1535.08 680.254 L1534.52 680.254 L1533.96 680.254 L1533.4 680.254 L1532.84 680.254 L1532.28 680.254 L1531.72 680.254 L1531.16 680.254 L1530.6 680.254 L1530.04 680.254 L1529.48 680.254 L1528.92 680.254 L1528.36 680.254 L1527.81 680.254 L1527.25 680.254 L1526.69 680.254 L1526.13 680.254 L1525.57 680.254 L1525.01 680.254 L1524.45 680.254 L1523.89 680.254 L1523.33 680.254 L1522.77 680.254 L1522.21 680.254 L1521.65 680.254 L1521.09 680.254 L1520.53 680.254 L1519.98 680.254 L1519.42 680.254 L1518.86 680.254 L1518.3 680.254 L1517.74 680.254 L1517.18 680.254 L1516.62 680.254 L1516.06 680.254 L1515.5 680.254 L1514.94 680.254 L1514.38 680.254 L1513.82 680.254 L1513.26 680.254 L1512.71 680.254 L1512.15 680.254 L1511.59 680.254 L1511.03 680.254 L1510.47 680.254 L1509.91 680.254 L1509.35 680.254 L1508.79 680.254 L1508.23 680.254 L1507.67 680.254 L1507.11 680.254 L1506.55 680.254 L1505.99 680.254 L1505.44 680.254 L1504.88 680.254 L1504.32 680.254 L1503.76 680.254 L1503.2 680.254 L1502.64 680.254 L1502.08 680.254 L1501.52 680.254 L1500.96 680.254 L1500.4 680.254 L1499.84 680.254 L1499.28 680.254 L1498.72 680.254 L1498.16 680.254 L1497.61 680.254 L1497.05 680.254 L1496.49 680.254 L1495.93 680.254 L1495.37 680.254 L1494.81 680.254 L1494.25 680.254 L1493.69 680.254 L1493.13 680.254 L1492.57 680.254 L1492.01 680.254 L1491.45 680.254 L1490.89 680.254 L1490.34 680.254 L1489.78 680.254 L1489.22 680.254 L1488.66 680.254 L1488.1 680.254 L1487.54 680.254 L1486.98 680.254 L1486.42 680.254 L1485.86 680.254 L1485.3 680.254 L1484.74 680.254 L1484.18 680.254 L1483.62 680.254 L1483.07 680.254 L1482.51 680.254 L1481.95 680.254 L1481.39 680.254 L1480.83 680.254 L1480.27 680.254 L1479.71 680.254 L1479.15 680.254 L1478.59 680.254 L1478.03 680.254 L1477.47 680.254 L1476.91 680.254 L1476.35 680.254 L1475.79 680.254 L1475.24 680.254 L1474.68 680.254 L1474.12 680.254 L1473.56 680.254 L1473 680.254 L1472.44 680.254 L1471.88 680.254 L1471.32 680.254 L1470.76 680.254 L1470.2 680.254 L1469.64 680.254 L1469.08 680.254 L1468.52 680.254 L1467.97 680.254 L1467.41 680.254 L1466.85 680.254 L1466.29 680.254 L1465.73 680.254 L1465.17 680.254 L1464.61 680.254 L1464.05 680.254 L1463.49 680.254 L1462.93 680.254 L1462.37 680.254 L1461.81 680.254 L1461.25 680.254 L1460.7 680.254 L1460.14 680.254 L1459.58 680.254 L1459.02 680.254 L1458.46 680.254 L1457.9 680.254 L1457.34 680.254 L1456.78 680.254 L1456.22 680.254 L1455.66 680.254 L1455.1 680.254 L1454.54 680.254 L1453.98 680.254 L1453.42 680.254 L1452.87 680.254 L1452.31 680.254 L1451.75 680.254 L1451.19 680.254 L1450.63 680.254 L1450.07 680.254 L1449.51 680.254 L1448.95 680.254 L1448.39 680.254 L1447.83 680.254 L1447.27 680.254 L1446.71 680.254 L1446.15 680.254 L1445.6 680.254 L1445.04 680.254 L1444.48 680.254 L1443.92 680.254 L1443.36 680.254 L1442.8 680.254 L1442.24 680.254 L1441.68 680.254 L1441.12 680.254 L1440.56 680.254 L1440 680.254 L1439.44 680.254 L1438.88 680.254 L1438.33 680.254 L1437.77 680.254 L1437.21 680.254 L1436.65 680.254 L1436.09 680.254 L1435.53 680.254 L1434.97 680.254 L1434.41 680.254 L1433.85 680.254 L1433.29 680.254 L1432.73 680.254 L1432.17 680.254 L1431.61 680.254 L1431.05 680.254 L1430.5 680.254 L1429.94 680.254 L1429.38 680.254 L1428.82 680.254 L1428.26 680.254 L1427.7 680.254 L1427.14 680.254 L1426.58 680.254 L1426.02 680.254 L1425.46 680.254 L1424.9 680.254 L1424.34 680.254 L1423.78 680.254 L1423.23 680.254 L1422.67 680.254 L1422.11 680.254 L1421.55 680.254 L1420.99 680.254 L1420.43 680.254 L1419.87 680.254 L1419.31 680.254 L1418.75 680.254 L1418.19 680.254 L1417.63 680.254 L1417.07 680.254 L1416.51 680.254 L1415.95 680.254 L1415.4 680.254 L1414.84 680.254 L1414.28 680.254 L1413.72 680.254 L1413.16 680.254 L1412.6 680.254 L1412.04 680.254 L1411.48 680.254 L1410.92 680.254 L1410.36 680.254 L1409.8 680.254 L1409.24 680.254 L1408.68 680.254 L1408.13 680.254 L1407.57 680.254 L1407.01 680.254 L1406.45 680.254 L1405.89 680.254 L1405.33 680.254 L1404.77 680.254 L1404.21 680.254 L1403.65 680.254 L1403.09 680.254 L1402.53 680.254 L1401.97 680.254 L1401.41 680.254 L1400.86 680.254 L1400.3 680.254 L1399.74 680.254 L1399.18 680.254 L1398.62 680.254 L1398.06 680.254 L1397.5 680.254 L1396.94 680.254 L1396.38 680.254 L1395.82 680.254 L1395.26 680.254 L1394.7 680.254 L1394.14 680.254 L1393.58 680.254 L1393.03 680.254 L1392.47 680.254 L1391.91 680.254 L1391.35 680.254 L1390.79 680.254 L1390.23 680.254 L1389.67 680.254 L1389.11 680.254 L1388.55 680.254 L1387.99 680.254 L1387.43 680.254 L1386.87 680.254 L1386.31 680.254 L1385.76 680.254 L1385.2 680.254 L1384.64 680.254 L1384.08 680.254 L1383.52 680.254 L1382.96 680.254 L1382.4 680.254 L1381.84 680.254 L1381.28 680.254 L1380.72 680.254 L1380.16 680.254 L1379.6 680.254 L1379.04 680.254 L1378.49 680.254 L1377.93 680.254 L1377.37 680.254 L1376.81 680.254 L1376.25 680.254 L1375.69 680.254 L1375.13 680.254 L1374.57 680.254 L1374.01 680.254 L1373.45 680.254 L1372.89 680.254 L1372.33 680.254 L1371.77 680.254 L1371.21 680.254 L1370.66 680.254 L1370.1 680.254 L1369.54 680.254 L1368.98 680.254 L1368.42 680.254 L1367.86 680.254 L1367.3 680.254 L1366.74 680.254 L1366.18 680.254 L1365.62 680.254 L1365.06 680.254 L1364.5 680.254 L1363.94 680.254 L1363.39 680.254 L1362.83 680.254 L1362.27 680.254 L1361.71 680.254 L1361.15 680.254 L1360.59 680.254 L1360.03 680.254 L1359.47 680.254 L1358.91 680.254 L1358.35 680.254 L1357.79 680.254 L1357.23 680.254 L1356.67 680.254 L1356.12 680.254 L1355.56 680.254 L1355 680.254 L1354.44 680.254 L1353.88 680.254 L1353.32 680.254 L1352.76 680.254 L1352.2 680.254 L1351.64 680.254 L1351.08 680.254 L1350.52 680.254 L1349.96 680.254 L1349.4 680.254 L1348.84 680.254 L1348.29 680.254 L1347.73 680.254 L1347.17 680.254 L1346.61 680.254 L1346.05 680.254 L1345.49 680.254 L1344.93 680.254 L1344.37 680.254 L1343.81 680.254 L1343.25 680.254 L1342.69 680.254 L1342.13 680.254 L1341.57 680.254 L1341.02 680.254 L1340.46 680.254 L1339.9 680.254 L1339.34 680.254 L1338.78 680.254 L1338.22 680.254 L1337.66 680.254 L1337.1 680.254 L1336.54 680.254 L1335.98 680.254 L1335.42 680.254 L1334.86 680.254 L1334.3 680.254 L1333.75 680.254 L1333.19 680.254 L1332.63 680.254 L1332.07 680.254 L1331.51 680.254 L1330.95 680.254 L1330.39 680.254 L1329.83 680.254 L1329.27 680.254 L1328.71 680.254 L1328.15 680.254 L1327.59 680.254 L1327.03 680.254 L1326.47 680.254 L1325.92 680.254 L1325.36 680.254 L1324.8 680.254 L1324.24 680.254 L1323.68 680.254 L1323.12 680.254 L1322.56 680.254 L1322 680.254 L1321.44 680.254 L1320.88 680.254 L1320.32 680.254 L1319.76 680.254 L1319.2 680.254 L1318.65 680.254 L1318.09 680.254 L1317.53 680.254 L1316.97 680.254 L1316.41 680.254 L1315.85 680.254 L1315.29 680.254 L1314.73 680.254 L1314.17 680.254 L1313.61 680.254 L1313.05 680.254 L1312.49 680.254 L1311.93 680.254 L1311.38 680.254 L1310.82 680.254 L1310.26 680.254 L1309.7 680.254 L1309.14 680.254 L1308.58 680.254 L1308.02 680.254 L1307.46 680.254 L1306.9 680.254 L1306.34 680.254 L1305.78 680.254 L1305.22 680.254 L1304.66 680.254 L1304.1 680.254 L1303.55 680.254 L1302.99 680.254 L1302.43 680.254 L1301.87 680.254 L1301.31 680.254 L1300.75 680.254 L1300.19 680.254 L1299.63 680.254 L1299.07 680.254 L1298.51 680.254 L1297.95 680.254 L1297.39 680.254 L1296.83 680.254 L1296.28 680.254 L1295.72 680.254 L1295.16 680.254 L1294.6 680.254 L1294.04 680.254 L1293.48 680.254 L1292.92 680.254 L1292.36 680.254 L1291.8 680.254 L1291.24 680.254 L1290.68 680.254 L1290.12 680.254 L1289.56 680.254 L1289 680.254 L1288.45 680.254 L1287.89 680.254 L1287.33 680.254 L1286.77 680.254 L1286.21 680.254 L1285.65 680.254 L1285.09 680.254 L1284.53 680.254 L1283.97 680.254 L1283.41 680.254 L1282.85 680.254 L1282.29 680.254 L1281.73 680.254 L1281.18 680.254 L1280.62 680.254 L1280.06 680.254 L1279.5 680.254 L1278.94 680.254 L1278.38 680.254 L1277.82 680.254 L1277.26 680.254 L1276.7 680.254 L1276.14 680.254 L1275.58 680.254 L1275.02 680.254 L1274.46 680.254 L1273.91 680.254 L1273.35 680.254 L1272.79 680.254 L1272.23 680.254 L1271.67 680.254 L1271.11 680.254 L1270.55 680.254 L1269.99 680.254 L1269.43 680.254 L1268.87 680.254 L1268.31 680.254 L1267.75 680.254 L1267.19 680.254 L1266.63 680.254 L1266.08 680.254 L1265.52 680.254 L1264.96 680.254 L1264.4 680.254 L1263.84 680.254 L1263.28 680.254 L1262.72 680.254 L1262.16 680.254 L1261.6 680.254 L1261.04 680.254 L1260.48 680.254 L1259.92 680.254 L1259.36 680.254 L1258.81 680.254 L1258.25 680.254 L1257.69 680.254 L1257.13 680.254 L1256.57 680.254 L1256.01 680.254 L1255.45 680.254 L1254.89 680.254 L1254.33 680.254 L1253.77 680.254 L1253.21 680.254 L1252.65 680.254 L1252.09 680.254 L1251.54 680.254 L1250.98 680.254 L1250.42 680.254 L1249.86 680.254 L1249.3 680.254 L1248.74 680.254 L1248.18 680.254 L1247.62 680.254 L1247.06 680.254 L1246.5 680.254 L1245.94 680.254 L1245.38 680.254 L1244.82 680.254 L1244.26 680.254 L1243.71 680.254 L1243.15 680.254 L1242.59 680.254 L1242.03 680.254 L1241.47 680.254 L1240.91 680.254 L1240.35 680.254 L1239.79 680.254 L1239.23 680.254 L1238.67 680.254 L1238.11 680.254 L1237.55 680.254 L1236.99 680.254 L1236.44 680.254 L1235.88 680.254 L1235.32 680.254 L1234.76 680.254 L1234.2 680.254 L1233.64 680.254 L1233.08 680.254 L1232.52 680.254 L1231.96 680.254 L1231.4 680.254 L1230.84 680.254 L1230.28 680.254 L1229.72 680.254 L1229.17 680.254 L1228.61 680.254 L1228.05 680.254 L1227.49 680.254 L1226.93 680.254 L1226.37 680.254 L1225.81 680.254 L1225.25 680.254 L1224.69 680.254 L1224.13 680.254 L1223.57 680.254 L1223.01 680.254 L1222.45 680.254 L1221.89 680.254 L1221.34 680.254 L1220.78 680.254 L1220.22 680.254 L1219.66 680.254 L1219.1 680.254 L1218.54 680.254 L1217.98 680.254 L1217.42 680.254 L1216.86 680.254 L1216.3 680.254 L1215.74 680.254 L1215.18 680.254 L1214.62 680.254 L1214.07 680.254 L1213.51 680.254 L1212.95 680.254 L1212.39 680.254 L1211.83 680.254 L1211.27 680.254 L1210.71 680.254 L1210.15 680.254 L1209.59 680.254 L1209.03 680.254 L1208.47 680.254 L1207.91 680.254 L1207.35 680.254 L1206.8 680.254 L1206.24 680.254 L1205.68 680.254 L1205.12 680.254 L1204.56 680.254 L1204 680.254 L1203.44 680.254 L1202.88 680.254 L1202.32 680.254 L1201.76 680.254 L1201.2 680.254 L1200.64 680.254 L1200.08 680.254 L1199.52 680.254 L1198.97 680.254 L1198.41 680.254 L1197.85 680.254 L1197.29 680.254 L1196.73 680.254 L1196.17 680.254 L1195.61 680.254 L1195.05 680.254 L1194.49 680.254 L1193.93 680.254 L1193.37 680.254 L1192.81 680.254 L1192.25 680.254 L1191.7 680.254 L1191.14 680.254 L1190.58 680.254 L1190.02 680.254 L1189.46 680.254 L1188.9 680.254 L1188.34 680.254 L1187.78 680.254 L1187.22 680.254 L1186.66 680.254 L1186.1 680.254 L1185.54 680.254 L1184.98 680.254 L1184.43 680.254 L1183.87 680.254 L1183.31 680.254 L1182.75 680.254 L1182.19 680.254 L1181.63 680.254 L1181.07 680.254 L1180.51 680.254 L1179.95 680.254 L1179.39 680.254 L1178.83 680.254 L1178.27 680.254 L1177.71 680.254 L1177.15 680.254 L1176.6 680.254 L1176.04 680.254 L1175.48 680.254 L1174.92 680.254 L1174.36 680.254 L1173.8 680.254 L1173.24 680.254 L1172.68 680.254 L1172.12 680.254 L1171.56 680.254 L1171 680.254 L1170.44 680.254 L1169.88 680.254 L1169.33 680.254 L1168.77 680.254 L1168.21 680.254 L1167.65 680.254 L1167.09 680.254 L1166.53 680.254 L1165.97 680.254 L1165.41 680.254 L1164.85 680.254 L1164.29 680.254 L1163.73 680.254 L1163.17 680.254 L1162.61 680.254 L1162.05 680.254 L1161.5 680.254 L1160.94 680.254 L1160.38 680.254 L1159.82 680.254 L1159.26 680.254 L1158.7 680.254 L1158.14 680.254 L1157.58 680.254 L1157.02 680.254 L1156.46 680.254 L1155.9 680.254 L1155.34 680.254 L1154.78 680.254 L1154.23 680.254 L1153.67 680.254 L1153.11 680.254 L1152.55 680.254 L1151.99 680.254 L1151.43 680.254 L1150.87 680.254 L1150.31 680.254 L1149.75 680.254 L1149.19 680.254 L1148.63 680.254 L1148.07 680.254 L1147.51 680.254 L1146.96 680.254 L1146.4 680.254 L1145.84 680.254 L1145.28 680.254 L1144.72 680.254 L1144.16 680.254 L1143.6 680.254 L1143.04 680.254 L1142.48 680.254 L1141.92 680.254 L1141.36 680.254 L1140.8 680.254 L1140.24 680.254 L1139.68 680.254 L1139.13 680.254 L1138.57 680.254 L1138.01 680.254 L1137.45 680.254 L1136.89 680.254 L1136.33 680.254 L1135.77 680.254 L1135.21 680.254 L1134.65 680.254 L1134.09 680.254 L1133.53 680.254 L1132.97 680.254 L1132.41 680.254 L1131.86 680.254 L1131.3 680.254 L1130.74 680.254 L1130.18 680.254 L1129.62 680.254 L1129.06 680.254 L1128.5 680.254 L1127.94 680.254 L1127.38 680.254 L1126.82 680.254 L1126.26 680.254 L1125.7 680.254 L1125.14 680.254 L1124.59 680.254 L1124.03 680.254 L1123.47 680.254 L1122.91 680.254 L1122.35 680.254 L1121.79 680.254 L1121.23 680.254 L1120.67 680.254 L1120.11 680.254 L1119.55 680.254 L1118.99 680.254 L1118.43 680.254 L1117.87 680.254 L1117.31 680.254 L1116.76 680.254 L1116.2 680.254 L1115.64 680.254 L1115.08 680.254 L1114.52 680.254 L1113.96 680.254 L1113.4 680.254 L1112.84 680.254 L1112.28 680.254 L1111.72 680.254 L1111.16 680.254 L1110.6 680.254 L1110.04 680.254 L1109.49 680.254 L1108.93 680.254 L1108.37 680.254 L1107.81 680.254 L1107.25 680.254 L1106.69 680.254 L1106.13 680.254 L1105.57 680.254 L1105.01 680.254 L1104.45 680.254 L1103.89 680.254 L1103.33 680.254 L1102.77 680.254 L1102.22 680.254 L1101.66 680.254 L1101.1 680.254 L1100.54 680.254 L1099.98 680.254 L1099.42 680.254 L1098.86 680.254 L1098.3 680.254 L1097.74 680.254 L1097.18 680.254 L1096.62 680.254 L1096.06 680.254 L1095.5 680.254 L1094.94 680.254 L1094.39 680.254 L1093.83 680.254 L1093.27 680.254 L1092.71 680.254 L1092.15 680.254 L1091.59 680.254 L1091.03 680.254 L1090.47 680.254 L1089.91 680.254 L1089.35 680.254 L1088.79 680.254 L1088.23 680.254 L1087.67 680.254 L1087.12 680.254 L1086.56 680.254 L1086 680.254 L1085.44 680.254 L1084.88 680.254 L1084.32 680.254 L1083.76 680.254 L1083.2 680.254 L1082.64 680.254 L1082.08 680.254 L1081.52 680.254 L1080.96 680.254 L1080.4 680.254 L1079.85 680.254 L1079.29 680.254 L1078.73 680.254 L1078.17 680.254 L1077.61 680.254 L1077.05 680.254 L1076.49 680.254 L1075.93 680.254 L1075.37 680.254 L1074.81 680.254 L1074.25 680.254 L1073.69 680.254 L1073.13 680.254 L1072.57 680.254 L1072.02 680.254 L1071.46 680.254 L1070.9 680.254 L1070.34 680.254 L1069.78 680.254 L1069.22 680.254 L1068.66 680.254 L1068.1 680.254 L1067.54 680.254 L1066.98 680.254 L1066.42 680.254 L1065.86 680.254 L1065.3 680.254 L1064.75 680.254 L1064.19 680.254 L1063.63 680.254 L1063.07 680.254 L1062.51 680.254 L1061.95 680.254 L1061.39 680.254 L1060.83 680.254 L1060.27 680.254 L1059.71 680.254 L1059.15 680.254 L1058.59 680.254 L1058.03 680.254 L1057.48 680.254 L1056.92 680.254 L1056.36 680.254 L1055.8 680.254 L1055.24 680.254 L1054.68 680.254 L1054.12 680.254 L1053.56 680.254 L1053 680.254 L1052.44 680.254 L1051.88 680.254 L1051.32 680.254 L1050.76 680.254 L1050.2 680.254 L1049.65 680.254 L1049.09 680.254 L1048.53 680.254 L1047.97 680.254 L1047.41 680.254 L1046.85 680.254 L1046.29 680.254 L1045.73 680.254 L1045.17 680.254 L1044.61 680.254 L1044.05 680.254 L1043.49 680.254 L1042.93 680.254 L1042.38 680.254 L1041.82 680.254 L1041.26 680.254 L1040.7 680.254 L1040.14 680.254 L1039.58 680.254 L1039.02 680.254 L1038.46 680.254 L1037.9 680.254 L1037.34 680.254 L1036.78 680.254 L1036.22 680.254 L1035.66 680.254 L1035.1 680.254 L1034.55 680.254 L1033.99 680.254 L1033.43 680.254 L1032.87 680.254 L1032.31 680.254 L1031.75 680.254 L1031.19 680.254 L1030.63 680.254 L1030.07 680.254 L1029.51 680.254 L1028.95 680.254 L1028.39 680.254 L1027.83 680.254 L1027.28 680.254 L1026.72 680.254 L1026.16 680.254 L1025.6 680.254 L1025.04 680.254 L1024.48 680.254 L1023.92 680.254 L1023.36 680.254 L1022.8 680.254 L1022.24 680.254 L1021.68 680.254 L1021.12 680.254 L1020.56 680.254 L1020.01 680.254 L1019.45 680.254 L1018.89 680.254 L1018.33 680.254 L1017.77 680.254 L1017.21 680.254 L1016.65 680.254 L1016.09 680.254 L1015.53 680.254 L1014.97 680.254 L1014.41 680.254 L1013.85 680.254 L1013.29 680.254 L1012.73 680.254 L1012.18 680.254 L1011.62 680.254 L1011.06 680.254 L1010.5 680.254 L1009.94 680.254 L1009.38 680.254 L1008.82 680.254 L1008.26 680.254 L1007.7 680.254 L1007.14 680.254 L1006.58 680.254 L1006.02 680.254 L1005.46 680.254 L1004.91 680.254 L1004.35 680.254 L1003.79 680.254 L1003.23 680.254 L1002.67 680.254 L1002.11 680.254 L1001.55 680.254 L1000.99 680.254 L1000.43 680.254 L999.872 680.254 L999.313 680.254 L998.754 680.254 L998.194 680.254 L997.635 680.254 L997.076 680.254 L996.517 680.254 L995.957 680.254 L995.398 680.254 L994.839 680.254 L994.28 680.254 L993.72 680.254 L993.161 680.254 L992.602 680.254 L992.043 680.254 L991.483 680.254 L990.924 680.254 L990.365 680.254 L989.806 680.254 L989.246 680.254 L988.687 680.254 L988.128 680.254 L987.569 680.254 L987.009 680.254 L986.45 680.254 L985.891 680.254 L985.332 680.254 L984.772 680.254 L984.213 680.254 L983.654 680.254 L983.095 680.254 L982.535 680.254 L981.976 680.254 L981.417 680.254 L980.858 680.254 L980.298 680.254 L979.739 680.254 L979.18 680.254 L978.621 680.254 L978.061 680.254 L977.502 680.254 L976.943 680.254 L976.384 680.254 L975.824 680.254 L975.265 680.254 L974.706 680.254 L974.147 680.254 L973.587 680.254 L973.028 680.254 L972.469 680.254 L971.91 680.254 L971.35 680.254 L970.791 680.254 L970.232 680.254 L969.673 680.254 L969.113 680.254 L968.554 680.254 L967.995 680.254 L967.436 680.254 L966.876 680.254 L966.317 680.254 L965.758 680.254 L965.199 680.254 L964.639 680.254 L964.08 680.254 L963.521 680.254 L962.962 680.254 L962.402 680.254 L961.843 680.254 L961.284 680.254 L960.725 680.254 L960.165 680.254 L959.606 680.254 L959.047 680.254 L958.488 680.254 L957.928 680.254 L957.369 680.254 L956.81 680.254 L956.251 680.254 L955.691 680.254 L955.132 680.254 L954.573 680.254 L954.014 680.254 L953.454 680.254 L952.895 680.254 L952.336 680.254 L951.777 680.254 L951.217 680.254 L950.658 680.254 L950.099 680.254 L949.54 680.254 L948.98 680.254 L948.421 680.254 L947.862 680.254 L947.303 680.254 L946.743 680.254 L946.184 680.254 L945.625 680.254 L945.066 680.254 L944.506 680.254 L943.947 680.254 L943.388 680.254 L942.829 680.254 L942.269 680.254 L941.71 680.254 L941.151 680.254 L940.592 680.254 L940.032 680.254 L939.473 680.254 L938.914 680.254 L938.355 680.254 L937.795 680.254 L937.236 680.254 L936.677 680.254 L936.118 680.254 L935.558 680.254 L934.999 680.254 L934.44 680.254 L933.881 680.254 L933.321 680.254 L932.762 680.254 L932.203 680.254 L931.644 680.254 L931.084 680.254 L930.525 680.254 L929.966 680.254 L929.406 680.254 L928.847 680.254 L928.288 680.254 L927.729 680.254 L927.169 680.254 L926.61 680.254 L926.051 680.254 L925.492 680.254 L924.932 680.254 L924.373 680.254 L923.814 680.254 L923.255 680.254 L922.695 680.254 L922.136 680.254 L921.577 680.254 L921.018 680.254 L920.458 680.254 L919.899 680.254 L919.34 680.254 L918.781 680.254 L918.221 680.254 L917.662 680.254 L917.103 680.254 L916.544 680.254 L915.984 680.254 L915.425 680.254 L914.866 680.254 L914.307 680.254 L913.747 680.254 L913.188 680.254 L912.629 680.254 L912.07 680.254 L911.51 680.254 L910.951 680.254 L910.392 680.254 L909.833 680.254 L909.273 680.254 L908.714 680.254 L908.155 680.254 L907.596 680.254 L907.036 680.254 L906.477 680.254 L905.918 680.254 L905.359 680.254 L904.799 680.254 L904.24 680.254 L903.681 680.254 L903.122 680.254 L902.562 680.254 L902.003 680.254 L901.444 680.254 L900.885 680.254 L900.325 680.254 L899.766 680.254 L899.207 680.254 L898.648 680.254 L898.088 680.254 L897.529 680.254 L896.97 680.254 L896.411 680.254 L895.851 680.254 L895.292 680.254 L894.733 680.254 L894.174 680.254 L893.614 680.254 L893.055 680.254 L892.496 680.254 L891.937 680.254 L891.377 680.254 L890.818 680.254 L890.259 680.254 L889.7 680.254 L889.14 680.254 L888.581 680.254 L888.022 680.254 L887.463 680.254 L886.903 680.254 L886.344 680.254 L885.785 680.254 L885.226 680.254 L884.666 680.254 L884.107 680.254 L883.548 680.254 L882.989 680.254 L882.429 680.254 L881.87 680.254 L881.311 680.254 L880.752 680.254 L880.192 680.254 L879.633 680.254 L879.074 680.254 L878.515 680.254 L877.955 680.254 L877.396 680.254 L876.837 680.254 L876.278 680.254 L875.718 680.254 L875.159 680.254 L874.6 680.254 L874.041 680.254 L873.481 680.254 L872.922 680.254 L872.363 680.254 L871.804 680.254 L871.244 680.254 L870.685 680.254 L870.126 680.254 L869.567 680.254 L869.007 680.254 L868.448 680.254 L867.889 680.254 L867.33 680.254 L866.77 680.254 L866.211 680.254 L865.652 680.254 L865.093 680.254 L864.533 680.254 L863.974 680.254 L863.415 680.254 L862.856 680.254 L862.296 680.254 L861.737 680.254 L861.178 680.254 L860.619 680.254 L860.059 680.254 L859.5 680.254 L858.941 680.254 L858.382 680.254 L857.822 680.254 L857.263 680.254 L856.704 680.254 L856.145 680.254 L855.585 680.254 L855.026 680.254 L854.467 680.254 L853.908 680.254 L853.348 680.254 L852.789 680.254 L852.23 680.254 L851.671 680.254 L851.111 680.254 L850.552 680.254 L849.993 680.254 L849.434 680.254 L848.874 680.254 L848.315 680.254 L847.756 680.254 L847.197 680.254 L846.637 680.254 L846.078 680.254 L845.519 680.254 L844.96 680.254 L844.4 680.254 L843.841 680.254 L843.282 680.254 L842.723 680.254 L842.163 680.254 L841.604 680.254 L841.045 680.254 L840.486 680.254 L839.926 680.254 L839.367 680.254 L838.808 680.254 L838.249 680.254 L837.689 680.254 L837.13 680.254 L836.571 680.254 L836.012 680.254 L835.452 680.254 L834.893 680.254 L834.334 680.254 L833.775 680.254 L833.215 680.254 L832.656 680.254 L832.097 680.254 L831.538 680.254 L830.978 680.254 L830.419 680.254 L829.86 680.254 L829.301 680.254 L828.741 680.254 L828.182 680.254 L827.623 680.254 L827.064 680.254 L826.504 680.254 L825.945 680.254 L825.386 680.254 L824.827 680.254 L824.267 680.254 L823.708 680.254 L823.149 680.254 L822.59 680.254 L822.03 680.254 L821.471 680.254 L820.912 680.254 L820.353 680.254 L819.793 680.254 L819.234 680.254 L818.675 680.254 L818.116 680.254 L817.556 680.254 L816.997 680.254 L816.438 680.254 L815.879 680.254 L815.319 680.254 L814.76 680.254 L814.201 680.254 L813.642 680.254 L813.082 680.254 L812.523 680.254 L811.964 680.254 L811.405 680.254 L810.845 680.254 L810.286 680.254 L809.727 680.254 L809.168 680.254 L808.608 680.254 L808.049 680.254 L807.49 680.254 L806.931 680.254 L806.371 680.254 L805.812 680.254 L805.253 680.254 L804.693 680.254 L804.134 680.254 L803.575 680.254 L803.016 680.254 L802.456 680.254 L801.897 680.254 L801.338 680.254 L800.779 680.254 L800.219 680.254 L799.66 680.254 L799.101 680.254 L798.542 680.254 L797.982 680.254 L797.423 680.254 L796.864 680.254 L796.305 680.254 L795.745 680.254 L795.186 680.254 L794.627 680.254 L794.068 680.254 L793.508 680.254 L792.949 680.254 L792.39 680.254 L791.831 680.254 L791.271 680.254 L790.712 680.254 L790.153 680.254 L789.594 680.254 L789.034 680.254 L788.475 680.254 L787.916 680.254 L787.357 680.254 L786.797 680.254 L786.238 680.254 L785.679 680.254 L785.12 680.254 L784.56 680.254 L784.001 680.254 L783.442 680.254 L782.883 680.254 L782.323 680.254 L781.764 680.254 L781.205 680.254 L780.646 680.254 L780.086 680.254 L779.527 680.254 L778.968 680.254 L778.409 680.254 L777.849 680.254 L777.29 680.254 L776.731 680.254 L776.172 680.254 L775.612 680.254 L775.053 680.254 L774.494 680.254 L773.935 680.254 L773.375 680.254 L772.816 680.254 L772.257 680.254 L771.698 680.254 L771.138 680.254 L770.579 680.254 L770.02 680.254 L769.461 680.254 L768.901 680.254 L768.342 680.254 L767.783 680.254 L767.224 680.254 L766.664 680.254 L766.105 680.254 L765.546 680.254 L764.987 680.254 L764.427 680.254 L763.868 680.254 L763.309 680.254 L762.75 680.254 L762.19 680.254 L761.631 680.254 L761.072 680.254 L760.513 680.254 L759.953 680.254 L759.394 680.254 L758.835 680.254 L758.276 680.254 L757.716 680.254 L757.157 680.254 L756.598 680.254 L756.039 680.254 L755.479 680.254 L754.92 680.254 L754.361 680.254 L753.802 680.254 L753.242 680.254 L752.683 680.254 L752.124 680.254 L751.565 680.254 L751.005 680.254 L750.446 680.254 L749.887 680.254 L749.328 680.254 L748.768 680.254 L748.209 680.254 L747.65 680.254 L747.091 680.254 L746.531 680.254 L745.972 680.254 L745.413 680.254 L744.854 680.254 L744.294 680.254 L743.735 680.254 L743.176 680.254 L742.617 680.254 L742.057 680.254 L741.498 680.254 L740.939 680.254 L740.38 680.254 L739.82 680.254 L739.261 680.254 L738.702 680.254 L738.143 680.254 L737.583 680.254 L737.024 680.254 L736.465 680.254 L735.906 680.254 L735.346 680.254 L734.787 680.254 L734.228 680.254 L733.669 680.254 L733.109 680.254 L732.55 680.254 L731.991 680.254 L731.432 680.254 L730.872 680.254 L730.313 680.254 L729.754 680.254 L729.195 680.254 L728.635 680.254 L728.076 680.254 L727.517 680.254 L726.958 680.254 L726.398 680.254 L725.839 680.254 L725.28 680.254 L724.721 680.254 L724.161 680.254 L723.602 680.254 L723.043 680.254 L722.484 680.254 L721.924 680.254 L721.365 680.254 L720.806 680.254 L720.247 680.254  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip203)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,684.984 720.806,684.984 721.365,684.984 721.924,684.984 722.484,684.984 723.043,684.984 723.602,684.984 724.161,684.984 724.721,684.984 725.28,684.984 725.839,684.984 726.398,684.984 726.958,684.984 727.517,684.984 728.076,684.984 728.635,684.984 729.195,684.984 729.754,684.984 730.313,684.984 730.872,684.984 731.432,684.984 731.991,684.984 732.55,684.984 733.109,684.984 733.669,684.984 734.228,684.984 734.787,684.984 735.346,684.984 735.906,684.984 736.465,684.984 737.024,684.984 737.583,684.984 738.143,684.984 738.702,684.984 739.261,684.984 739.82,684.984 740.38,684.984 740.939,684.984 741.498,684.984 742.057,684.984 742.617,684.984 743.176,684.984 743.735,684.984 744.294,684.984 744.854,684.984 745.413,684.984 745.972,684.984 746.531,684.984 747.091,684.984 747.65,684.984 748.209,684.984 748.768,684.984 749.328,684.984 749.887,684.984 750.446,684.984 751.005,684.984 751.565,684.984 752.124,684.984 752.683,684.984 753.242,684.984 753.802,684.984 754.361,684.984 754.92,684.984 755.479,684.984 756.039,684.984 756.598,684.984 757.157,684.984 757.716,684.984 758.276,684.984 758.835,684.984 759.394,684.984 759.953,684.984 760.513,684.984 761.072,684.984 761.631,684.984 762.19,684.984 762.75,684.984 763.309,684.984 763.868,684.984 764.427,684.984 764.987,684.984 765.546,684.984 766.105,684.984 766.664,684.984 767.224,684.984 767.783,684.984 768.342,684.984 768.901,684.984 769.461,684.984 770.02,684.984 770.579,684.984 771.138,684.984 771.698,684.984 772.257,684.984 772.816,684.984 773.375,684.984 773.935,684.984 774.494,684.984 775.053,684.984 775.612,684.984 776.172,684.984 776.731,684.984 777.29,684.984 777.849,684.984 778.409,684.984 778.968,684.984 779.527,684.984 780.086,684.984 780.646,684.984 781.205,684.984 781.764,684.984 782.323,684.984 782.883,684.984 783.442,684.984 784.001,684.984 784.56,684.984 785.12,684.984 785.679,684.984 786.238,684.984 786.797,684.984 787.357,684.984 787.916,684.984 788.475,684.984 789.034,684.984 789.594,684.984 790.153,684.984 790.712,684.984 791.271,684.984 791.831,684.984 792.39,684.984 792.949,684.984 793.508,684.984 794.068,684.984 794.627,684.984 795.186,684.984 795.745,684.984 796.305,684.984 796.864,684.984 797.423,684.984 797.982,684.984 798.542,684.984 799.101,684.984 799.66,684.984 800.219,684.984 800.779,684.984 801.338,684.984 801.897,684.984 802.456,684.984 803.016,684.984 803.575,684.984 804.134,684.984 804.693,684.984 805.253,684.984 805.812,684.984 806.371,684.984 806.931,684.984 807.49,684.984 808.049,684.984 808.608,684.984 809.168,684.984 809.727,684.984 810.286,684.984 810.845,684.984 811.405,684.984 811.964,684.984 812.523,684.984 813.082,684.984 813.642,684.984 814.201,684.984 814.76,684.984 815.319,684.984 815.879,684.984 816.438,684.984 816.997,684.984 817.556,684.984 818.116,684.984 818.675,684.984 819.234,684.984 819.793,684.984 820.353,684.984 820.912,684.984 821.471,684.984 822.03,684.984 822.59,684.984 823.149,684.984 823.708,684.984 824.267,684.984 824.827,684.984 825.386,684.984 825.945,684.984 826.504,684.984 827.064,684.984 827.623,684.984 828.182,684.984 828.741,684.984 829.301,684.984 829.86,684.984 830.419,684.984 830.978,684.984 831.538,684.984 832.097,684.984 832.656,684.984 833.215,684.984 833.775,684.984 834.334,684.984 834.893,684.984 835.452,684.984 836.012,684.984 836.571,684.984 837.13,684.984 837.689,684.984 838.249,684.984 838.808,684.984 839.367,684.984 839.926,684.984 840.486,684.984 841.045,684.984 841.604,684.984 842.163,684.984 842.723,684.984 843.282,684.984 843.841,684.984 844.4,684.984 844.96,684.984 845.519,684.984 846.078,684.984 846.637,684.984 847.197,684.984 847.756,684.984 848.315,684.984 848.874,684.984 849.434,684.984 849.993,684.984 850.552,684.984 851.111,684.984 851.671,684.984 852.23,684.984 852.789,684.984 853.348,684.984 853.908,684.984 854.467,684.984 855.026,684.984 855.585,684.984 856.145,684.984 856.704,684.984 857.263,684.984 857.822,684.984 858.382,684.984 858.941,684.984 859.5,684.984 860.059,684.984 860.619,684.984 861.178,684.984 861.737,684.984 862.296,684.984 862.856,684.984 863.415,684.984 863.974,684.984 864.533,684.984 865.093,684.984 865.652,684.984 866.211,684.984 866.77,684.984 867.33,684.984 867.889,684.984 868.448,684.984 869.007,684.984 869.567,684.984 870.126,684.984 870.685,684.984 871.244,684.984 871.804,684.984 872.363,684.984 872.922,684.984 873.481,684.984 874.041,684.984 874.6,684.984 875.159,684.984 875.718,684.984 876.278,684.984 876.837,684.984 877.396,684.984 877.955,684.984 878.515,684.984 879.074,684.984 879.633,684.984 880.192,684.984 880.752,684.984 881.311,684.984 881.87,684.984 882.429,684.984 882.989,684.984 883.548,684.984 884.107,684.984 884.666,684.984 885.226,684.984 885.785,684.984 886.344,684.984 886.903,684.984 887.463,684.984 888.022,684.984 888.581,684.984 889.14,684.984 889.7,684.984 890.259,684.984 890.818,684.984 891.377,684.984 891.937,684.984 892.496,684.984 893.055,684.984 893.614,684.984 894.174,684.984 894.733,684.984 895.292,684.984 895.851,684.984 896.411,684.984 896.97,684.984 897.529,684.984 898.088,684.984 898.648,684.984 899.207,684.984 899.766,684.984 900.325,684.984 900.885,684.984 901.444,684.984 902.003,684.984 902.562,684.984 903.122,684.984 903.681,684.984 904.24,684.984 904.799,684.984 905.359,684.984 905.918,684.984 906.477,684.984 907.036,684.984 907.596,684.984 908.155,684.984 908.714,684.984 909.273,684.984 909.833,684.984 910.392,684.984 910.951,684.984 911.51,684.984 912.07,684.984 912.629,684.984 913.188,684.984 913.747,684.984 914.307,684.984 914.866,684.984 915.425,684.984 915.984,684.984 916.544,684.984 917.103,684.984 917.662,684.984 918.221,684.984 918.781,684.984 919.34,684.984 919.899,684.984 920.458,684.984 921.018,684.984 921.577,684.984 922.136,684.984 922.695,684.984 923.255,684.984 923.814,684.984 924.373,684.984 924.932,684.984 925.492,684.984 926.051,684.984 926.61,684.984 927.169,684.984 927.729,684.984 928.288,684.984 928.847,684.984 929.406,684.984 929.966,684.984 930.525,684.984 931.084,684.984 931.644,684.984 932.203,684.984 932.762,684.984 933.321,684.984 933.881,684.984 934.44,684.984 934.999,684.984 935.558,684.984 936.118,684.984 936.677,684.984 937.236,684.984 937.795,684.984 938.355,684.984 938.914,684.984 939.473,684.984 940.032,684.984 940.592,684.984 941.151,684.984 941.71,684.984 942.269,684.984 942.829,684.984 943.388,684.984 943.947,684.984 944.506,684.984 945.066,684.984 945.625,684.984 946.184,684.984 946.743,684.984 947.303,684.984 947.862,684.984 948.421,684.984 948.98,684.984 949.54,684.984 950.099,684.984 950.658,684.984 951.217,684.984 951.777,684.984 952.336,684.984 952.895,684.984 953.454,684.984 954.014,684.984 954.573,684.984 955.132,684.984 955.691,684.984 956.251,684.984 956.81,684.984 957.369,684.984 957.928,684.984 958.488,684.984 959.047,684.984 959.606,684.984 960.165,684.984 960.725,684.984 961.284,684.984 961.843,684.984 962.402,684.984 962.962,684.984 963.521,684.984 964.08,684.984 964.639,684.984 965.199,684.984 965.758,684.984 966.317,684.984 966.876,684.984 967.436,684.984 967.995,684.984 968.554,684.984 969.113,684.984 969.673,684.984 970.232,684.984 970.791,684.984 971.35,684.984 971.91,684.984 972.469,684.984 973.028,684.984 973.587,684.984 974.147,684.984 974.706,684.984 975.265,684.984 975.824,684.984 976.384,684.984 976.943,684.984 977.502,684.984 978.061,684.984 978.621,684.984 979.18,684.984 979.739,684.984 980.298,684.984 980.858,684.984 981.417,684.984 981.976,684.984 982.535,684.984 983.095,684.984 983.654,684.984 984.213,684.984 984.772,684.984 985.332,684.984 985.891,684.984 986.45,684.984 987.009,684.984 987.569,684.984 988.128,684.984 988.687,684.984 989.246,684.984 989.806,684.984 990.365,684.984 990.924,684.984 991.483,684.984 992.043,684.984 992.602,684.984 993.161,684.984 993.72,684.984 994.28,684.984 994.839,684.984 995.398,684.984 995.957,684.984 996.517,684.984 997.076,684.984 997.635,684.984 998.194,684.984 998.754,684.984 999.313,684.984 999.872,684.984 1000.43,684.984 1000.99,684.984 1001.55,684.984 1002.11,684.984 1002.67,684.984 1003.23,684.984 1003.79,684.984 1004.35,684.984 1004.91,684.984 1005.46,684.984 1006.02,684.984 1006.58,684.984 1007.14,684.984 1007.7,684.984 1008.26,684.984 1008.82,684.984 1009.38,684.984 1009.94,684.984 1010.5,684.984 1011.06,684.984 1011.62,684.984 1012.18,684.984 1012.73,684.984 1013.29,684.984 1013.85,684.984 1014.41,684.984 1014.97,684.984 1015.53,684.984 1016.09,684.984 1016.65,684.984 1017.21,684.984 1017.77,684.984 1018.33,684.984 1018.89,684.984 1019.45,684.984 1020.01,684.984 1020.56,684.984 1021.12,684.984 1021.68,684.984 1022.24,684.984 1022.8,684.984 1023.36,684.984 1023.92,684.984 1024.48,684.984 1025.04,684.984 1025.6,684.984 1026.16,684.984 1026.72,684.984 1027.28,684.984 1027.83,684.984 1028.39,684.984 1028.95,684.984 1029.51,684.984 1030.07,684.984 1030.63,684.984 1031.19,684.984 1031.75,684.984 1032.31,684.984 1032.87,684.984 1033.43,684.984 1033.99,684.984 1034.55,684.984 1035.1,684.984 1035.66,684.984 1036.22,684.984 1036.78,684.984 1037.34,684.984 1037.9,684.984 1038.46,684.984 1039.02,684.984 1039.58,684.984 1040.14,684.984 1040.7,684.984 1041.26,684.984 1041.82,684.984 1042.38,684.984 1042.93,684.984 1043.49,684.984 1044.05,684.984 1044.61,684.984 1045.17,684.984 1045.73,684.984 1046.29,684.984 1046.85,684.984 1047.41,684.984 1047.97,684.984 1048.53,684.984 1049.09,684.984 1049.65,684.984 1050.2,684.984 1050.76,684.984 1051.32,684.984 1051.88,684.984 1052.44,684.984 1053,684.984 1053.56,684.984 1054.12,684.984 1054.68,684.984 1055.24,684.984 1055.8,684.984 1056.36,684.984 1056.92,684.984 1057.48,684.984 1058.03,684.984 1058.59,684.984 1059.15,684.984 1059.71,684.984 1060.27,684.984 1060.83,684.984 1061.39,684.984 1061.95,684.984 1062.51,684.984 1063.07,684.984 1063.63,684.984 1064.19,684.984 1064.75,684.984 1065.3,684.984 1065.86,684.984 1066.42,684.984 1066.98,684.984 1067.54,684.984 1068.1,684.984 1068.66,684.984 1069.22,684.984 1069.78,684.984 1070.34,684.984 1070.9,684.984 1071.46,684.984 1072.02,684.984 1072.57,684.984 1073.13,684.984 1073.69,684.984 1074.25,684.984 1074.81,684.984 1075.37,684.984 1075.93,684.984 1076.49,684.984 1077.05,684.984 1077.61,684.984 1078.17,684.984 1078.73,684.984 1079.29,684.984 1079.85,684.984 1080.4,684.984 1080.96,684.984 1081.52,684.984 1082.08,684.984 1082.64,684.984 1083.2,684.984 1083.76,684.984 1084.32,684.984 1084.88,684.984 1085.44,684.984 1086,684.984 1086.56,684.984 1087.12,684.984 1087.67,684.984 1088.23,684.984 1088.79,684.984 1089.35,684.984 1089.91,684.984 1090.47,684.984 1091.03,684.984 1091.59,684.984 1092.15,684.984 1092.71,684.984 1093.27,684.984 1093.83,684.984 1094.39,684.984 1094.94,684.984 1095.5,684.984 1096.06,684.984 1096.62,684.984 1097.18,684.984 1097.74,684.984 1098.3,684.984 1098.86,684.984 1099.42,684.984 1099.98,684.984 1100.54,684.984 1101.1,684.984 1101.66,684.984 1102.22,684.984 1102.77,684.984 1103.33,684.984 1103.89,684.984 1104.45,684.984 1105.01,684.984 1105.57,684.984 1106.13,684.984 1106.69,684.984 1107.25,684.984 1107.81,684.984 1108.37,684.984 1108.93,684.984 1109.49,684.984 1110.04,684.984 1110.6,684.984 1111.16,684.984 1111.72,684.984 1112.28,684.984 1112.84,684.984 1113.4,684.984 1113.96,684.984 1114.52,684.984 1115.08,684.984 1115.64,684.984 1116.2,684.984 1116.76,684.984 1117.31,684.984 1117.87,684.984 1118.43,684.984 1118.99,684.984 1119.55,684.984 1120.11,684.984 1120.67,684.984 1121.23,684.984 1121.79,684.984 1122.35,684.984 1122.91,684.984 1123.47,684.984 1124.03,684.984 1124.59,684.984 1125.14,684.984 1125.7,684.984 1126.26,684.984 1126.82,684.984 1127.38,684.984 1127.94,684.984 1128.5,684.984 1129.06,684.984 1129.62,684.984 1130.18,684.984 1130.74,684.984 1131.3,684.984 1131.86,684.984 1132.41,684.984 1132.97,684.984 1133.53,684.984 1134.09,684.984 1134.65,684.984 1135.21,684.984 1135.77,684.984 1136.33,684.984 1136.89,684.984 1137.45,684.984 1138.01,684.984 1138.57,684.984 1139.13,684.984 1139.68,684.984 1140.24,684.984 1140.8,684.984 1141.36,684.984 1141.92,684.984 1142.48,684.984 1143.04,684.984 1143.6,684.984 1144.16,684.984 1144.72,684.984 1145.28,684.984 1145.84,684.984 1146.4,684.984 1146.96,684.984 1147.51,684.984 1148.07,684.984 1148.63,684.984 1149.19,684.984 1149.75,684.984 1150.31,684.984 1150.87,684.984 1151.43,684.984 1151.99,684.984 1152.55,684.984 1153.11,684.984 1153.67,684.984 1154.23,684.984 1154.78,684.984 1155.34,684.984 1155.9,684.984 1156.46,684.984 1157.02,684.984 1157.58,684.984 1158.14,684.984 1158.7,684.984 1159.26,684.984 1159.82,684.984 1160.38,684.984 1160.94,684.984 1161.5,684.984 1162.05,684.984 1162.61,684.984 1163.17,684.984 1163.73,684.984 1164.29,684.984 1164.85,684.984 1165.41,684.984 1165.97,684.984 1166.53,684.984 1167.09,684.984 1167.65,684.984 1168.21,684.984 1168.77,684.984 1169.33,684.984 1169.88,684.984 1170.44,684.984 1171,684.984 1171.56,684.984 1172.12,684.984 1172.68,684.984 1173.24,684.984 1173.8,684.984 1174.36,684.984 1174.92,684.984 1175.48,684.984 1176.04,684.984 1176.6,684.984 1177.15,684.984 1177.71,684.984 1178.27,684.984 1178.83,684.984 1179.39,684.984 1179.95,684.984 1180.51,684.984 1181.07,684.984 1181.63,684.984 1182.19,684.984 1182.75,684.984 1183.31,684.984 1183.87,684.984 1184.43,684.984 1184.98,684.984 1185.54,684.984 1186.1,684.984 1186.66,684.984 1187.22,684.984 1187.78,684.984 1188.34,684.984 1188.9,684.984 1189.46,684.984 1190.02,684.984 1190.58,684.984 1191.14,684.984 1191.7,684.984 1192.25,684.984 1192.81,684.984 1193.37,684.984 1193.93,684.984 1194.49,684.984 1195.05,684.984 1195.61,684.984 1196.17,684.984 1196.73,684.984 1197.29,684.984 1197.85,684.984 1198.41,684.984 1198.97,684.984 1199.52,684.984 1200.08,684.984 1200.64,684.984 1201.2,684.984 1201.76,684.984 1202.32,684.984 1202.88,684.984 1203.44,684.984 1204,684.984 1204.56,684.984 1205.12,684.984 1205.68,684.984 1206.24,684.984 1206.8,684.984 1207.35,684.984 1207.91,684.984 1208.47,684.984 1209.03,684.984 1209.59,684.984 1210.15,684.984 1210.71,684.984 1211.27,684.984 1211.83,684.984 1212.39,684.984 1212.95,684.984 1213.51,684.984 1214.07,684.984 1214.62,684.984 1215.18,684.984 1215.74,684.984 1216.3,684.984 1216.86,684.984 1217.42,684.984 1217.98,684.984 1218.54,684.984 1219.1,684.984 1219.66,684.984 1220.22,684.984 1220.78,684.984 1221.34,684.984 1221.89,684.984 1222.45,684.984 1223.01,684.984 1223.57,684.984 1224.13,684.984 1224.69,684.984 1225.25,684.984 1225.81,684.984 1226.37,684.984 1226.93,684.984 1227.49,684.984 1228.05,684.984 1228.61,684.984 1229.17,684.984 1229.72,684.984 1230.28,684.984 1230.84,684.984 1231.4,684.984 1231.96,684.984 1232.52,684.984 1233.08,684.984 1233.64,684.984 1234.2,684.984 1234.76,684.984 1235.32,684.984 1235.88,684.984 1236.44,684.984 1236.99,684.984 1237.55,684.984 1238.11,684.984 1238.67,684.984 1239.23,684.984 1239.79,684.984 1240.35,684.984 1240.91,684.984 1241.47,684.984 1242.03,684.984 1242.59,684.984 1243.15,684.984 1243.71,684.984 1244.26,684.984 1244.82,684.984 1245.38,684.984 1245.94,684.984 1246.5,684.984 1247.06,684.984 1247.62,684.984 1248.18,684.984 1248.74,684.984 1249.3,684.984 1249.86,684.984 1250.42,684.984 1250.98,684.984 1251.54,684.984 1252.09,684.984 1252.65,684.984 1253.21,684.984 1253.77,684.984 1254.33,684.984 1254.89,684.984 1255.45,684.984 1256.01,684.984 1256.57,684.984 1257.13,684.984 1257.69,684.984 1258.25,684.984 1258.81,684.984 1259.36,684.984 1259.92,684.984 1260.48,684.984 1261.04,684.984 1261.6,684.984 1262.16,684.984 1262.72,684.984 1263.28,684.984 1263.84,684.984 1264.4,684.984 1264.96,684.984 1265.52,684.984 1266.08,684.984 1266.63,684.984 1267.19,684.984 1267.75,684.984 1268.31,684.984 1268.87,684.984 1269.43,684.984 1269.99,684.984 1270.55,684.984 1271.11,684.984 1271.67,684.984 1272.23,684.984 1272.79,684.984 1273.35,684.984 1273.91,684.984 1274.46,684.984 1275.02,684.984 1275.58,684.984 1276.14,684.984 1276.7,684.984 1277.26,684.984 1277.82,684.984 1278.38,684.984 1278.94,684.984 1279.5,684.984 1280.06,684.984 1280.62,684.984 1281.18,684.984 1281.73,684.984 1282.29,684.984 1282.85,684.984 1283.41,684.984 1283.97,684.984 1284.53,684.984 1285.09,684.984 1285.65,684.984 1286.21,684.984 1286.77,684.984 1287.33,684.984 1287.89,684.984 1288.45,684.984 1289,684.984 1289.56,684.984 1290.12,684.984 1290.68,684.984 1291.24,684.984 1291.8,684.984 1292.36,684.984 1292.92,684.984 1293.48,684.984 1294.04,684.984 1294.6,684.984 1295.16,684.984 1295.72,684.984 1296.28,684.984 1296.83,684.984 1297.39,684.984 1297.95,684.984 1298.51,684.984 1299.07,684.984 1299.63,684.984 1300.19,684.984 1300.75,684.984 1301.31,684.984 1301.87,684.984 1302.43,684.984 1302.99,684.984 1303.55,684.984 1304.1,684.984 1304.66,684.984 1305.22,684.984 1305.78,684.984 1306.34,684.984 1306.9,684.984 1307.46,684.984 1308.02,684.984 1308.58,684.984 1309.14,684.984 1309.7,684.984 1310.26,684.984 1310.82,684.984 1311.38,684.984 1311.93,684.984 1312.49,684.984 1313.05,684.984 1313.61,684.984 1314.17,684.984 1314.73,684.984 1315.29,684.984 1315.85,684.984 1316.41,684.984 1316.97,684.984 1317.53,684.984 1318.09,684.984 1318.65,684.984 1319.2,684.984 1319.76,684.984 1320.32,684.984 1320.88,684.984 1321.44,684.984 1322,684.984 1322.56,684.984 1323.12,684.984 1323.68,684.984 1324.24,684.984 1324.8,684.984 1325.36,684.984 1325.92,684.984 1326.47,684.984 1327.03,684.984 1327.59,684.984 1328.15,684.984 1328.71,684.984 1329.27,684.984 1329.83,684.984 1330.39,684.984 1330.95,684.984 1331.51,684.984 1332.07,684.984 1332.63,684.984 1333.19,684.984 1333.75,684.984 1334.3,684.984 1334.86,684.984 1335.42,684.984 1335.98,684.984 1336.54,684.984 1337.1,684.984 1337.66,684.984 1338.22,684.984 1338.78,684.984 1339.34,684.984 1339.9,684.984 1340.46,684.984 1341.02,684.984 1341.57,684.984 1342.13,684.984 1342.69,684.984 1343.25,684.984 1343.81,684.984 1344.37,684.984 1344.93,684.984 1345.49,684.984 1346.05,684.984 1346.61,684.984 1347.17,684.984 1347.73,684.984 1348.29,684.984 1348.84,684.984 1349.4,684.984 1349.96,684.984 1350.52,684.984 1351.08,684.984 1351.64,684.984 1352.2,684.984 1352.76,684.984 1353.32,684.984 1353.88,684.984 1354.44,684.984 1355,684.984 1355.56,684.984 1356.12,684.984 1356.67,684.984 1357.23,684.984 1357.79,684.984 1358.35,684.984 1358.91,684.984 1359.47,684.984 1360.03,684.984 1360.59,684.984 1361.15,684.984 1361.71,684.984 1362.27,684.984 1362.83,684.984 1363.39,684.984 1363.94,684.984 1364.5,684.984 1365.06,684.984 1365.62,684.984 1366.18,684.984 1366.74,684.984 1367.3,684.984 1367.86,684.984 1368.42,684.984 1368.98,684.984 1369.54,684.984 1370.1,684.984 1370.66,684.984 1371.21,684.984 1371.77,684.984 1372.33,684.984 1372.89,684.984 1373.45,684.984 1374.01,684.984 1374.57,684.984 1375.13,684.984 1375.69,684.984 1376.25,684.984 1376.81,684.984 1377.37,684.984 1377.93,684.984 1378.49,684.984 1379.04,684.984 1379.6,684.984 1380.16,684.984 1380.72,684.984 1381.28,684.984 1381.84,684.984 1382.4,684.984 1382.96,684.984 1383.52,684.984 1384.08,684.984 1384.64,684.984 1385.2,684.984 1385.76,684.984 1386.31,684.984 1386.87,684.984 1387.43,684.984 1387.99,684.984 1388.55,684.984 1389.11,684.984 1389.67,684.984 1390.23,684.984 1390.79,684.984 1391.35,684.984 1391.91,684.984 1392.47,684.984 1393.03,684.984 1393.58,684.984 1394.14,684.984 1394.7,684.984 1395.26,684.984 1395.82,684.984 1396.38,684.984 1396.94,684.984 1397.5,684.984 1398.06,684.984 1398.62,684.984 1399.18,684.984 1399.74,684.984 1400.3,684.984 1400.86,684.984 1401.41,684.984 1401.97,684.984 1402.53,684.984 1403.09,684.984 1403.65,684.984 1404.21,684.984 1404.77,684.984 1405.33,684.984 1405.89,684.984 1406.45,684.984 1407.01,684.984 1407.57,684.984 1408.13,684.984 1408.68,684.984 1409.24,684.984 1409.8,684.984 1410.36,684.984 1410.92,684.984 1411.48,684.984 1412.04,684.984 1412.6,684.984 1413.16,684.984 1413.72,684.984 1414.28,684.984 1414.84,684.984 1415.4,684.984 1415.95,684.984 1416.51,684.984 1417.07,684.984 1417.63,684.984 1418.19,684.984 1418.75,684.984 1419.31,684.984 1419.87,684.984 1420.43,684.984 1420.99,684.984 1421.55,684.984 1422.11,684.984 1422.67,684.984 1423.23,684.984 1423.78,684.984 1424.34,684.984 1424.9,684.984 1425.46,684.984 1426.02,684.984 1426.58,684.984 1427.14,684.984 1427.7,684.984 1428.26,684.984 1428.82,684.984 1429.38,684.984 1429.94,684.984 1430.5,684.984 1431.05,684.984 1431.61,684.984 1432.17,684.984 1432.73,684.984 1433.29,684.984 1433.85,684.984 1434.41,684.984 1434.97,684.984 1435.53,684.984 1436.09,684.984 1436.65,684.984 1437.21,684.984 1437.77,684.984 1438.33,684.984 1438.88,684.984 1439.44,684.984 1440,684.984 1440.56,684.984 1441.12,684.984 1441.68,684.984 1442.24,684.984 1442.8,684.984 1443.36,684.984 1443.92,684.984 1444.48,684.984 1445.04,684.984 1445.6,684.984 1446.15,684.984 1446.71,684.984 1447.27,684.984 1447.83,684.984 1448.39,684.984 1448.95,684.984 1449.51,684.984 1450.07,684.984 1450.63,684.984 1451.19,684.984 1451.75,684.984 1452.31,684.984 1452.87,684.984 1453.42,684.984 1453.98,684.984 1454.54,684.984 1455.1,684.984 1455.66,684.984 1456.22,684.984 1456.78,684.984 1457.34,684.984 1457.9,684.984 1458.46,684.984 1459.02,684.984 1459.58,684.984 1460.14,684.984 1460.7,684.984 1461.25,684.984 1461.81,684.984 1462.37,684.984 1462.93,684.984 1463.49,684.984 1464.05,684.984 1464.61,684.984 1465.17,684.984 1465.73,684.984 1466.29,684.984 1466.85,684.984 1467.41,684.984 1467.97,684.984 1468.52,684.984 1469.08,684.984 1469.64,684.984 1470.2,684.984 1470.76,684.984 1471.32,684.984 1471.88,684.984 1472.44,684.984 1473,684.984 1473.56,684.984 1474.12,684.984 1474.68,684.984 1475.24,684.984 1475.79,684.984 1476.35,684.984 1476.91,684.984 1477.47,684.984 1478.03,684.984 1478.59,684.984 1479.15,684.984 1479.71,684.984 1480.27,684.984 1480.83,684.984 1481.39,684.984 1481.95,684.984 1482.51,684.984 1483.07,684.984 1483.62,684.984 1484.18,684.984 1484.74,684.984 1485.3,684.984 1485.86,684.984 1486.42,684.984 1486.98,684.984 1487.54,684.984 1488.1,684.984 1488.66,684.984 1489.22,684.984 1489.78,684.984 1490.34,684.984 1490.89,684.984 1491.45,684.984 1492.01,684.984 1492.57,684.984 1493.13,684.984 1493.69,684.984 1494.25,684.984 1494.81,684.984 1495.37,684.984 1495.93,684.984 1496.49,684.984 1497.05,684.984 1497.61,684.984 1498.16,684.984 1498.72,684.984 1499.28,684.984 1499.84,684.984 1500.4,684.984 1500.96,684.984 1501.52,684.984 1502.08,684.984 1502.64,684.984 1503.2,684.984 1503.76,684.984 1504.32,684.984 1504.88,684.984 1505.44,684.984 1505.99,684.984 1506.55,684.984 1507.11,684.984 1507.67,684.984 1508.23,684.984 1508.79,684.984 1509.35,684.984 1509.91,684.984 1510.47,684.984 1511.03,684.984 1511.59,684.984 1512.15,684.984 1512.71,684.984 1513.26,684.984 1513.82,684.984 1514.38,684.984 1514.94,684.984 1515.5,684.984 1516.06,684.984 1516.62,684.984 1517.18,684.984 1517.74,684.984 1518.3,684.984 1518.86,684.984 1519.42,684.984 1519.98,684.984 1520.53,684.984 1521.09,684.984 1521.65,684.984 1522.21,684.984 1522.77,684.984 1523.33,684.984 1523.89,684.984 1524.45,684.984 1525.01,684.984 1525.57,684.984 1526.13,684.984 1526.69,684.984 1527.25,684.984 1527.81,684.984 1528.36,684.984 1528.92,684.984 1529.48,684.984 1530.04,684.984 1530.6,684.984 1531.16,684.984 1531.72,684.984 1532.28,684.984 1532.84,684.984 1533.4,684.984 1533.96,684.984 1534.52,684.984 1535.08,684.984 1535.63,684.984 1536.19,684.984 1536.75,684.984 1537.31,684.984 1537.87,684.984 1538.43,684.984 1538.99,684.984 1539.55,684.984 1540.11,684.984 1540.67,684.984 1541.23,684.984 1541.79,684.984 1542.35,684.984 1542.9,684.984 1543.46,684.984 1544.02,684.984 1544.58,684.984 1545.14,684.984 1545.7,684.984 1546.26,684.984 1546.82,684.984 1547.38,684.984 1547.94,684.984 1548.5,684.984 1549.06,684.984 1549.62,684.984 1550.18,684.984 1550.73,684.984 1551.29,684.984 1551.85,684.984 1552.41,684.984 1552.97,684.984 1553.53,684.984 1554.09,684.984 1554.65,684.984 1555.21,684.984 1555.77,684.984 1556.33,684.984 1556.89,684.984 1557.45,684.984 1558,684.984 1558.56,684.984 1559.12,684.984 1559.68,684.984 1560.24,684.984 1560.8,684.984 1561.36,684.984 1561.92,684.984 1562.48,684.984 1563.04,684.984 1563.6,684.984 1564.16,684.984 1564.72,684.984 1565.28,684.984 1565.83,684.984 1566.39,684.984 1566.95,684.984 1567.51,684.984 1568.07,684.984 1568.63,684.984 1569.19,684.984 1569.75,684.984 1570.31,684.984 1570.87,684.984 1571.43,684.984 1571.99,684.984 1572.55,684.984 1573.1,684.984 1573.66,684.984 1574.22,684.984 1574.78,684.984 1575.34,684.984 1575.9,684.984 1576.46,684.984 1577.02,684.984 1577.58,684.984 1578.14,684.984 1578.7,684.984 1579.26,684.984 1579.82,684.984 1580.37,684.984 1580.93,684.984 1581.49,684.984 1582.05,684.984 1582.61,684.984 1583.17,684.984 1583.73,684.984 1584.29,684.984 1584.85,684.984 1585.41,684.984 1585.97,684.984 1586.53,684.984 1587.09,684.984 1587.65,684.984 1588.2,684.984 1588.76,684.984 1589.32,684.984 1589.88,684.984 1590.44,684.984 1591,684.984 1591.56,684.984 1592.12,684.984 1592.68,684.984 1593.24,684.984 1593.8,684.984 1594.36,684.984 1594.92,684.984 1595.47,684.984 1596.03,684.984 1596.59,684.984 1597.15,684.984 1597.71,684.984 1598.27,684.984 1598.83,684.984 1599.39,684.984 1599.95,684.984 1600.51,684.984 1601.07,684.984 1601.63,684.984 1602.19,684.984 1602.74,684.984 1603.3,684.984 1603.86,684.984 1604.42,684.984 1604.98,684.984 1605.54,684.984 1606.1,684.984 1606.66,684.984 1607.22,684.984 1607.78,684.984 1608.34,684.984 1608.9,684.984 1609.46,684.984 1610.02,684.984 1610.57,684.984 1611.13,684.984 1611.69,684.984 1612.25,684.984 1612.81,684.984 1613.37,684.984 1613.93,684.984 1614.49,684.984 1615.05,684.984 1615.61,684.984 1616.17,684.984 1616.73,684.984 1617.29,684.984 1617.84,684.984 1618.4,684.984 1618.96,684.984 1619.52,684.984 1620.08,684.984 1620.64,684.984 1621.2,684.984 1621.76,684.984 1622.32,684.984 1622.88,684.984 1623.44,684.984 1624,684.984 1624.56,684.984 1625.11,684.984 1625.67,684.984 1626.23,684.984 1626.79,684.984 1627.35,684.984 1627.91,684.984 1628.47,684.984 1629.03,684.984 1629.59,684.984 1630.15,684.984 1630.71,684.984 1631.27,684.984 1631.83,684.984 1632.39,684.984 1632.94,684.984 1633.5,684.984 1634.06,684.984 1634.62,684.984 1635.18,684.984 1635.74,684.984 1636.3,684.984 1636.86,684.984 1637.42,684.984 1637.98,684.984 1638.54,684.984 1639.1,684.984 1639.66,684.984 1640.21,684.984 1640.77,684.984 1641.33,684.984 1641.89,684.984 1642.45,684.984 1643.01,684.984 1643.57,684.984 1644.13,684.984 1644.69,684.984 1645.25,684.984 1645.81,684.984 1646.37,684.984 1646.93,684.984 1647.48,684.984 1648.04,684.984 1648.6,684.984 1649.16,684.984 1649.72,684.984 1650.28,684.984 1650.84,684.984 1651.4,684.984 1651.96,684.984 1652.52,684.984 1653.08,684.984 1653.64,684.984 1654.2,684.984 1654.76,684.984 1655.31,684.984 1655.87,684.984 1656.43,684.984 1656.99,684.984 1657.55,684.984 1658.11,684.984 1658.67,684.984 1659.23,684.984 1659.79,684.984 1660.35,684.984 1660.91,684.984 1661.47,684.984 1662.03,684.984 1662.58,684.984 1663.14,684.984 1663.7,684.984 1664.26,684.984 1664.82,684.984 1665.38,684.984 1665.94,684.984 1666.5,684.984 1667.06,684.984 1667.62,684.984 1668.18,684.984 1668.74,684.984 1669.3,684.984 1669.85,684.984 1670.41,684.984 1670.97,684.984 1671.53,684.984 1672.09,684.984 1672.65,684.984 1673.21,684.984 1673.77,684.984 1674.33,684.984 1674.89,684.984 1675.45,684.984 1676.01,684.984 1676.57,684.984 1677.13,684.984 1677.68,684.984 1678.24,684.984 1678.8,684.984 1679.36,684.984 1679.92,684.984 1680.48,684.984 1681.04,684.984 1681.6,684.984 1682.16,684.984 1682.72,684.984 1683.28,684.984 1683.84,684.984 1684.4,684.984 1684.95,684.984 1685.51,684.984 1686.07,684.984 1686.63,684.984 1687.19,684.984 1687.75,684.984 1688.31,684.984 1688.87,684.984 1689.43,684.984 1689.99,684.984 1690.55,684.984 1691.11,684.984 1691.67,684.984 1692.23,684.984 1692.78,684.984 1693.34,684.984 1693.9,684.984 1694.46,684.984 1695.02,684.984 1695.58,684.984 1696.14,684.984 1696.7,684.984 1697.26,684.984 1697.82,684.984 1698.38,684.984 1698.94,684.984 1699.5,684.984 1700.05,684.984 1700.61,684.984 1701.17,684.984 1701.73,684.984 1702.29,684.984 1702.85,684.984 1703.41,684.984 1703.97,684.984 1704.53,684.984 1705.09,684.984 1705.65,684.984 1706.21,684.984 1706.77,684.984 1707.32,684.984 1707.88,684.984 1708.44,684.984 1709,684.984 1709.56,684.984 1710.12,684.984 1710.68,684.984 1711.24,684.984 1711.8,684.984 1712.36,684.984 1712.92,684.984 1713.48,684.984 1714.04,684.984 1714.6,684.984 1715.15,684.984 1715.71,684.984 1716.27,684.984 1716.83,684.984 1717.39,684.984 1717.95,684.984 1718.51,684.984 1719.07,684.984 1719.63,684.984 1720.19,684.984 1720.75,684.984 1721.31,684.984 1721.87,684.984 1722.42,684.984 1722.98,684.984 1723.54,684.984 1724.1,684.984 1724.66,684.984 1725.22,684.984 1725.78,684.984 1726.34,684.984 1726.9,684.984 1727.46,684.984 1728.02,684.984 1728.58,684.984 1729.14,684.984 1729.69,684.984 1730.25,684.984 1730.81,684.984 1731.37,684.984 1731.93,684.984 1732.49,684.984 1733.05,684.984 1733.61,684.984 1734.17,684.984 1734.73,684.984 1735.29,684.984 1735.85,684.984 1736.41,684.984 1736.97,684.984 1737.52,684.984 1738.08,684.984 1738.64,684.984 1739.2,684.984 1739.76,684.984 1740.32,684.984 1740.88,684.984 1741.44,684.984 1742,684.984 1742.56,684.984 1743.12,684.984 1743.68,684.984 1744.24,684.984 1744.79,684.984 1745.35,684.984 1745.91,684.984 1746.47,684.984 1747.03,684.984 1747.59,684.984 1748.15,684.984 1748.71,684.984 1749.27,684.984 1749.83,684.984 1750.39,684.984 1750.95,684.984 1751.51,684.984 1752.06,684.984 1752.62,684.984 1753.18,684.984 1753.74,684.984 1754.3,684.984 1754.86,684.984 1755.42,684.984 1755.98,684.984 1756.54,684.984 1757.1,684.984 1757.66,684.984 1758.22,684.984 1758.78,684.984 1759.34,684.984 1759.89,684.984 1760.45,684.984 1761.01,684.984 1761.57,684.984 1762.13,684.984 1762.69,684.984 1763.25,684.984 1763.81,684.984 1764.37,684.984 1764.93,684.984 1765.49,684.984 1766.05,684.984 1766.61,684.984 1767.16,684.984 1767.72,684.984 1768.28,684.984 1768.84,684.984 1769.4,684.984 1769.96,684.984 1770.52,684.984 1771.08,684.984 1771.64,684.984 1772.2,684.984 1772.76,684.984 1773.32,684.984 1773.88,684.984 1774.43,684.984 1774.99,684.984 1775.55,684.984 1776.11,684.984 1776.67,684.984 1777.23,684.984 1777.79,684.984 1778.35,684.984 1778.91,684.984 1779.47,684.984 1780.03,684.984 1780.59,684.984 1781.15,684.984 1781.71,684.984 1782.26,684.984 1782.82,684.984 1783.38,684.984 1783.94,684.984 1784.5,684.984 1785.06,684.984 1785.62,684.984 1786.18,684.984 1786.74,684.984 1787.3,684.984 1787.86,684.984 1788.42,684.984 1788.98,684.984 1789.53,684.984 1790.09,684.984 1790.65,684.984 1791.21,684.984 1791.77,684.984 1792.33,684.984 1792.89,684.984 1793.45,684.984 1794.01,684.984 1794.57,684.984 1795.13,684.984 1795.69,684.984 1796.25,684.984 1796.8,684.984 1797.36,684.984 1797.92,684.984 1798.48,684.984 1799.04,684.984 1799.6,684.984 1800.16,684.984 1800.72,684.984 1801.28,684.984 1801.84,684.984 1802.4,684.984 1802.96,684.984 1803.52,684.984 1804.08,684.984 1804.63,684.984 1805.19,684.984 1805.75,684.984 1806.31,684.984 1806.87,684.984 1807.43,684.984 1807.99,684.984 1808.55,684.984 1809.11,684.984 1809.67,684.984 1810.23,684.984 1810.79,684.984 1811.35,684.984 1811.9,684.984 1812.46,684.984 1813.02,684.984 1813.58,684.984 1814.14,684.984 1814.7,684.984 1815.26,684.984 1815.82,684.984 1816.38,684.984 1816.94,684.984 1817.5,684.984 1818.06,684.984 1818.62,684.984 1819.18,684.984 1819.73,684.984 1820.29,684.984 1820.85,684.984 1821.41,684.984 1821.97,684.984 1822.53,684.984 1823.09,684.984 1823.65,684.984 1824.21,684.984 1824.77,684.984 1825.33,684.984 1825.89,684.984 1826.45,684.984 1827,684.984 1827.56,684.984 1828.12,684.984 1828.68,684.984 1829.24,684.984 1829.8,684.984 1830.36,684.984 1830.92,684.984 1831.48,684.984 1832.04,684.984 1832.6,684.984 1833.16,684.984 1833.72,684.984 1834.27,684.984 1834.83,684.984 1835.39,684.984 1835.95,684.984 1836.51,684.984 1837.07,684.984 1837.63,684.984 1838.19,684.984 \"/>\n<path clip-path=\"url(#clip203)\" d=\"M720.247 684.212 L720.806 684.212 L721.365 684.212 L721.924 684.212 L722.484 684.212 L723.043 684.212 L723.602 684.212 L724.161 684.212 L724.721 684.212 L725.28 684.212 L725.839 684.212 L726.398 684.212 L726.958 684.212 L727.517 684.212 L728.076 684.212 L728.635 684.212 L729.195 684.212 L729.754 684.212 L730.313 684.212 L730.872 684.212 L731.432 684.212 L731.991 684.212 L732.55 684.212 L733.109 684.212 L733.669 684.212 L734.228 684.212 L734.787 684.212 L735.346 684.212 L735.906 684.212 L736.465 684.212 L737.024 684.212 L737.583 684.212 L738.143 684.212 L738.702 684.212 L739.261 684.212 L739.82 684.212 L740.38 684.212 L740.939 684.212 L741.498 684.212 L742.057 684.212 L742.617 684.212 L743.176 684.212 L743.735 684.212 L744.294 684.212 L744.854 684.212 L745.413 684.212 L745.972 684.212 L746.531 684.212 L747.091 684.212 L747.65 684.212 L748.209 684.212 L748.768 684.212 L749.328 684.212 L749.887 684.212 L750.446 684.212 L751.005 684.212 L751.565 684.212 L752.124 684.212 L752.683 684.212 L753.242 684.212 L753.802 684.212 L754.361 684.212 L754.92 684.212 L755.479 684.212 L756.039 684.212 L756.598 684.212 L757.157 684.212 L757.716 684.212 L758.276 684.212 L758.835 684.212 L759.394 684.212 L759.953 684.212 L760.513 684.212 L761.072 684.212 L761.631 684.212 L762.19 684.212 L762.75 684.212 L763.309 684.212 L763.868 684.212 L764.427 684.212 L764.987 684.212 L765.546 684.212 L766.105 684.212 L766.664 684.212 L767.224 684.212 L767.783 684.212 L768.342 684.212 L768.901 684.212 L769.461 684.212 L770.02 684.212 L770.579 684.212 L771.138 684.212 L771.698 684.212 L772.257 684.212 L772.816 684.212 L773.375 684.212 L773.935 684.212 L774.494 684.212 L775.053 684.212 L775.612 684.212 L776.172 684.212 L776.731 684.212 L777.29 684.212 L777.849 684.212 L778.409 684.212 L778.968 684.212 L779.527 684.212 L780.086 684.212 L780.646 684.212 L781.205 684.212 L781.764 684.212 L782.323 684.212 L782.883 684.212 L783.442 684.212 L784.001 684.212 L784.56 684.212 L785.12 684.212 L785.679 684.212 L786.238 684.212 L786.797 684.212 L787.357 684.212 L787.916 684.212 L788.475 684.212 L789.034 684.212 L789.594 684.212 L790.153 684.212 L790.712 684.212 L791.271 684.212 L791.831 684.212 L792.39 684.212 L792.949 684.212 L793.508 684.212 L794.068 684.212 L794.627 684.212 L795.186 684.212 L795.745 684.212 L796.305 684.212 L796.864 684.212 L797.423 684.212 L797.982 684.212 L798.542 684.212 L799.101 684.212 L799.66 684.212 L800.219 684.212 L800.779 684.212 L801.338 684.212 L801.897 684.212 L802.456 684.212 L803.016 684.212 L803.575 684.212 L804.134 684.212 L804.693 684.212 L805.253 684.212 L805.812 684.212 L806.371 684.212 L806.931 684.212 L807.49 684.212 L808.049 684.212 L808.608 684.212 L809.168 684.212 L809.727 684.212 L810.286 684.212 L810.845 684.212 L811.405 684.212 L811.964 684.212 L812.523 684.212 L813.082 684.212 L813.642 684.212 L814.201 684.212 L814.76 684.212 L815.319 684.212 L815.879 684.212 L816.438 684.212 L816.997 684.212 L817.556 684.212 L818.116 684.212 L818.675 684.212 L819.234 684.212 L819.793 684.212 L820.353 684.212 L820.912 684.212 L821.471 684.212 L822.03 684.212 L822.59 684.212 L823.149 684.212 L823.708 684.212 L824.267 684.212 L824.827 684.212 L825.386 684.212 L825.945 684.212 L826.504 684.212 L827.064 684.212 L827.623 684.212 L828.182 684.212 L828.741 684.212 L829.301 684.212 L829.86 684.212 L830.419 684.212 L830.978 684.212 L831.538 684.212 L832.097 684.212 L832.656 684.212 L833.215 684.212 L833.775 684.212 L834.334 684.212 L834.893 684.212 L835.452 684.212 L836.012 684.212 L836.571 684.212 L837.13 684.212 L837.689 684.212 L838.249 684.212 L838.808 684.212 L839.367 684.212 L839.926 684.212 L840.486 684.212 L841.045 684.212 L841.604 684.212 L842.163 684.212 L842.723 684.212 L843.282 684.212 L843.841 684.212 L844.4 684.212 L844.96 684.212 L845.519 684.212 L846.078 684.212 L846.637 684.212 L847.197 684.212 L847.756 684.212 L848.315 684.212 L848.874 684.212 L849.434 684.212 L849.993 684.212 L850.552 684.212 L851.111 684.212 L851.671 684.212 L852.23 684.212 L852.789 684.212 L853.348 684.212 L853.908 684.212 L854.467 684.212 L855.026 684.212 L855.585 684.212 L856.145 684.212 L856.704 684.212 L857.263 684.212 L857.822 684.212 L858.382 684.212 L858.941 684.212 L859.5 684.212 L860.059 684.212 L860.619 684.212 L861.178 684.212 L861.737 684.212 L862.296 684.212 L862.856 684.212 L863.415 684.212 L863.974 684.212 L864.533 684.212 L865.093 684.212 L865.652 684.212 L866.211 684.212 L866.77 684.212 L867.33 684.212 L867.889 684.212 L868.448 684.212 L869.007 684.212 L869.567 684.212 L870.126 684.212 L870.685 684.212 L871.244 684.212 L871.804 684.212 L872.363 684.212 L872.922 684.212 L873.481 684.212 L874.041 684.212 L874.6 684.212 L875.159 684.212 L875.718 684.212 L876.278 684.212 L876.837 684.212 L877.396 684.212 L877.955 684.212 L878.515 684.212 L879.074 684.212 L879.633 684.212 L880.192 684.212 L880.752 684.212 L881.311 684.212 L881.87 684.212 L882.429 684.212 L882.989 684.212 L883.548 684.212 L884.107 684.212 L884.666 684.212 L885.226 684.212 L885.785 684.212 L886.344 684.212 L886.903 684.212 L887.463 684.212 L888.022 684.212 L888.581 684.212 L889.14 684.212 L889.7 684.212 L890.259 684.212 L890.818 684.212 L891.377 684.212 L891.937 684.212 L892.496 684.212 L893.055 684.212 L893.614 684.212 L894.174 684.212 L894.733 684.212 L895.292 684.212 L895.851 684.212 L896.411 684.212 L896.97 684.212 L897.529 684.212 L898.088 684.212 L898.648 684.212 L899.207 684.212 L899.766 684.212 L900.325 684.212 L900.885 684.212 L901.444 684.212 L902.003 684.212 L902.562 684.212 L903.122 684.212 L903.681 684.212 L904.24 684.212 L904.799 684.212 L905.359 684.212 L905.918 684.212 L906.477 684.212 L907.036 684.212 L907.596 684.212 L908.155 684.212 L908.714 684.212 L909.273 684.212 L909.833 684.212 L910.392 684.212 L910.951 684.212 L911.51 684.212 L912.07 684.212 L912.629 684.212 L913.188 684.212 L913.747 684.212 L914.307 684.212 L914.866 684.212 L915.425 684.212 L915.984 684.212 L916.544 684.212 L917.103 684.212 L917.662 684.212 L918.221 684.212 L918.781 684.212 L919.34 684.212 L919.899 684.212 L920.458 684.212 L921.018 684.212 L921.577 684.212 L922.136 684.212 L922.695 684.212 L923.255 684.212 L923.814 684.212 L924.373 684.212 L924.932 684.212 L925.492 684.212 L926.051 684.212 L926.61 684.212 L927.169 684.212 L927.729 684.212 L928.288 684.212 L928.847 684.212 L929.406 684.212 L929.966 684.212 L930.525 684.212 L931.084 684.212 L931.644 684.212 L932.203 684.212 L932.762 684.212 L933.321 684.212 L933.881 684.212 L934.44 684.212 L934.999 684.212 L935.558 684.212 L936.118 684.212 L936.677 684.212 L937.236 684.212 L937.795 684.212 L938.355 684.212 L938.914 684.212 L939.473 684.212 L940.032 684.212 L940.592 684.212 L941.151 684.212 L941.71 684.212 L942.269 684.212 L942.829 684.212 L943.388 684.212 L943.947 684.212 L944.506 684.212 L945.066 684.212 L945.625 684.212 L946.184 684.212 L946.743 684.212 L947.303 684.212 L947.862 684.212 L948.421 684.212 L948.98 684.212 L949.54 684.212 L950.099 684.212 L950.658 684.212 L951.217 684.212 L951.777 684.212 L952.336 684.212 L952.895 684.212 L953.454 684.212 L954.014 684.212 L954.573 684.212 L955.132 684.212 L955.691 684.212 L956.251 684.212 L956.81 684.212 L957.369 684.212 L957.928 684.212 L958.488 684.212 L959.047 684.212 L959.606 684.212 L960.165 684.212 L960.725 684.212 L961.284 684.212 L961.843 684.212 L962.402 684.212 L962.962 684.212 L963.521 684.212 L964.08 684.212 L964.639 684.212 L965.199 684.212 L965.758 684.212 L966.317 684.212 L966.876 684.212 L967.436 684.212 L967.995 684.212 L968.554 684.212 L969.113 684.212 L969.673 684.212 L970.232 684.212 L970.791 684.212 L971.35 684.212 L971.91 684.212 L972.469 684.212 L973.028 684.212 L973.587 684.212 L974.147 684.212 L974.706 684.212 L975.265 684.212 L975.824 684.212 L976.384 684.212 L976.943 684.212 L977.502 684.212 L978.061 684.212 L978.621 684.212 L979.18 684.212 L979.739 684.212 L980.298 684.212 L980.858 684.212 L981.417 684.212 L981.976 684.212 L982.535 684.212 L983.095 684.212 L983.654 684.212 L984.213 684.212 L984.772 684.212 L985.332 684.212 L985.891 684.212 L986.45 684.212 L987.009 684.212 L987.569 684.212 L988.128 684.212 L988.687 684.212 L989.246 684.212 L989.806 684.212 L990.365 684.212 L990.924 684.212 L991.483 684.212 L992.043 684.212 L992.602 684.212 L993.161 684.212 L993.72 684.212 L994.28 684.212 L994.839 684.212 L995.398 684.212 L995.957 684.212 L996.517 684.212 L997.076 684.212 L997.635 684.212 L998.194 684.212 L998.754 684.212 L999.313 684.212 L999.872 684.212 L1000.43 684.212 L1000.99 684.212 L1001.55 684.212 L1002.11 684.212 L1002.67 684.212 L1003.23 684.212 L1003.79 684.212 L1004.35 684.212 L1004.91 684.212 L1005.46 684.212 L1006.02 684.212 L1006.58 684.212 L1007.14 684.212 L1007.7 684.212 L1008.26 684.212 L1008.82 684.212 L1009.38 684.212 L1009.94 684.212 L1010.5 684.212 L1011.06 684.212 L1011.62 684.212 L1012.18 684.212 L1012.73 684.212 L1013.29 684.212 L1013.85 684.212 L1014.41 684.212 L1014.97 684.212 L1015.53 684.212 L1016.09 684.212 L1016.65 684.212 L1017.21 684.212 L1017.77 684.212 L1018.33 684.212 L1018.89 684.212 L1019.45 684.212 L1020.01 684.212 L1020.56 684.212 L1021.12 684.212 L1021.68 684.212 L1022.24 684.212 L1022.8 684.212 L1023.36 684.212 L1023.92 684.212 L1024.48 684.212 L1025.04 684.212 L1025.6 684.212 L1026.16 684.212 L1026.72 684.212 L1027.28 684.212 L1027.83 684.212 L1028.39 684.212 L1028.95 684.212 L1029.51 684.212 L1030.07 684.212 L1030.63 684.212 L1031.19 684.212 L1031.75 684.212 L1032.31 684.212 L1032.87 684.212 L1033.43 684.212 L1033.99 684.212 L1034.55 684.212 L1035.1 684.212 L1035.66 684.212 L1036.22 684.212 L1036.78 684.212 L1037.34 684.212 L1037.9 684.212 L1038.46 684.212 L1039.02 684.212 L1039.58 684.212 L1040.14 684.212 L1040.7 684.212 L1041.26 684.212 L1041.82 684.212 L1042.38 684.212 L1042.93 684.212 L1043.49 684.212 L1044.05 684.212 L1044.61 684.212 L1045.17 684.212 L1045.73 684.212 L1046.29 684.212 L1046.85 684.212 L1047.41 684.212 L1047.97 684.212 L1048.53 684.212 L1049.09 684.212 L1049.65 684.212 L1050.2 684.212 L1050.76 684.212 L1051.32 684.212 L1051.88 684.212 L1052.44 684.212 L1053 684.212 L1053.56 684.212 L1054.12 684.212 L1054.68 684.212 L1055.24 684.212 L1055.8 684.212 L1056.36 684.212 L1056.92 684.212 L1057.48 684.212 L1058.03 684.212 L1058.59 684.212 L1059.15 684.212 L1059.71 684.212 L1060.27 684.212 L1060.83 684.212 L1061.39 684.212 L1061.95 684.212 L1062.51 684.212 L1063.07 684.212 L1063.63 684.212 L1064.19 684.212 L1064.75 684.212 L1065.3 684.212 L1065.86 684.212 L1066.42 684.212 L1066.98 684.212 L1067.54 684.212 L1068.1 684.212 L1068.66 684.212 L1069.22 684.212 L1069.78 684.212 L1070.34 684.212 L1070.9 684.212 L1071.46 684.212 L1072.02 684.212 L1072.57 684.212 L1073.13 684.212 L1073.69 684.212 L1074.25 684.212 L1074.81 684.212 L1075.37 684.212 L1075.93 684.212 L1076.49 684.212 L1077.05 684.212 L1077.61 684.212 L1078.17 684.212 L1078.73 684.212 L1079.29 684.212 L1079.85 684.212 L1080.4 684.212 L1080.96 684.212 L1081.52 684.212 L1082.08 684.212 L1082.64 684.212 L1083.2 684.212 L1083.76 684.212 L1084.32 684.212 L1084.88 684.212 L1085.44 684.212 L1086 684.212 L1086.56 684.212 L1087.12 684.212 L1087.67 684.212 L1088.23 684.212 L1088.79 684.212 L1089.35 684.212 L1089.91 684.212 L1090.47 684.212 L1091.03 684.212 L1091.59 684.212 L1092.15 684.212 L1092.71 684.212 L1093.27 684.212 L1093.83 684.212 L1094.39 684.212 L1094.94 684.212 L1095.5 684.212 L1096.06 684.212 L1096.62 684.212 L1097.18 684.212 L1097.74 684.212 L1098.3 684.212 L1098.86 684.212 L1099.42 684.212 L1099.98 684.212 L1100.54 684.212 L1101.1 684.212 L1101.66 684.212 L1102.22 684.212 L1102.77 684.212 L1103.33 684.212 L1103.89 684.212 L1104.45 684.212 L1105.01 684.212 L1105.57 684.212 L1106.13 684.212 L1106.69 684.212 L1107.25 684.212 L1107.81 684.212 L1108.37 684.212 L1108.93 684.212 L1109.49 684.212 L1110.04 684.212 L1110.6 684.212 L1111.16 684.212 L1111.72 684.212 L1112.28 684.212 L1112.84 684.212 L1113.4 684.212 L1113.96 684.212 L1114.52 684.212 L1115.08 684.212 L1115.64 684.212 L1116.2 684.212 L1116.76 684.212 L1117.31 684.212 L1117.87 684.212 L1118.43 684.212 L1118.99 684.212 L1119.55 684.212 L1120.11 684.212 L1120.67 684.212 L1121.23 684.212 L1121.79 684.212 L1122.35 684.212 L1122.91 684.212 L1123.47 684.212 L1124.03 684.212 L1124.59 684.212 L1125.14 684.212 L1125.7 684.212 L1126.26 684.212 L1126.82 684.212 L1127.38 684.212 L1127.94 684.212 L1128.5 684.212 L1129.06 684.212 L1129.62 684.212 L1130.18 684.212 L1130.74 684.212 L1131.3 684.212 L1131.86 684.212 L1132.41 684.212 L1132.97 684.212 L1133.53 684.212 L1134.09 684.212 L1134.65 684.212 L1135.21 684.212 L1135.77 684.212 L1136.33 684.212 L1136.89 684.212 L1137.45 684.212 L1138.01 684.212 L1138.57 684.212 L1139.13 684.212 L1139.68 684.212 L1140.24 684.212 L1140.8 684.212 L1141.36 684.212 L1141.92 684.212 L1142.48 684.212 L1143.04 684.212 L1143.6 684.212 L1144.16 684.212 L1144.72 684.212 L1145.28 684.212 L1145.84 684.212 L1146.4 684.212 L1146.96 684.212 L1147.51 684.212 L1148.07 684.212 L1148.63 684.212 L1149.19 684.212 L1149.75 684.212 L1150.31 684.212 L1150.87 684.212 L1151.43 684.212 L1151.99 684.212 L1152.55 684.212 L1153.11 684.212 L1153.67 684.212 L1154.23 684.212 L1154.78 684.212 L1155.34 684.212 L1155.9 684.212 L1156.46 684.212 L1157.02 684.212 L1157.58 684.212 L1158.14 684.212 L1158.7 684.212 L1159.26 684.212 L1159.82 684.212 L1160.38 684.212 L1160.94 684.212 L1161.5 684.212 L1162.05 684.212 L1162.61 684.212 L1163.17 684.212 L1163.73 684.212 L1164.29 684.212 L1164.85 684.212 L1165.41 684.212 L1165.97 684.212 L1166.53 684.212 L1167.09 684.212 L1167.65 684.212 L1168.21 684.212 L1168.77 684.212 L1169.33 684.212 L1169.88 684.212 L1170.44 684.212 L1171 684.212 L1171.56 684.212 L1172.12 684.212 L1172.68 684.212 L1173.24 684.212 L1173.8 684.212 L1174.36 684.212 L1174.92 684.212 L1175.48 684.212 L1176.04 684.212 L1176.6 684.212 L1177.15 684.212 L1177.71 684.212 L1178.27 684.212 L1178.83 684.212 L1179.39 684.212 L1179.95 684.212 L1180.51 684.212 L1181.07 684.212 L1181.63 684.212 L1182.19 684.212 L1182.75 684.212 L1183.31 684.212 L1183.87 684.212 L1184.43 684.212 L1184.98 684.212 L1185.54 684.212 L1186.1 684.212 L1186.66 684.212 L1187.22 684.212 L1187.78 684.212 L1188.34 684.212 L1188.9 684.212 L1189.46 684.212 L1190.02 684.212 L1190.58 684.212 L1191.14 684.212 L1191.7 684.212 L1192.25 684.212 L1192.81 684.212 L1193.37 684.212 L1193.93 684.212 L1194.49 684.212 L1195.05 684.212 L1195.61 684.212 L1196.17 684.212 L1196.73 684.212 L1197.29 684.212 L1197.85 684.212 L1198.41 684.212 L1198.97 684.212 L1199.52 684.212 L1200.08 684.212 L1200.64 684.212 L1201.2 684.212 L1201.76 684.212 L1202.32 684.212 L1202.88 684.212 L1203.44 684.212 L1204 684.212 L1204.56 684.212 L1205.12 684.212 L1205.68 684.212 L1206.24 684.212 L1206.8 684.212 L1207.35 684.212 L1207.91 684.212 L1208.47 684.212 L1209.03 684.212 L1209.59 684.212 L1210.15 684.212 L1210.71 684.212 L1211.27 684.212 L1211.83 684.212 L1212.39 684.212 L1212.95 684.212 L1213.51 684.212 L1214.07 684.212 L1214.62 684.212 L1215.18 684.212 L1215.74 684.212 L1216.3 684.212 L1216.86 684.212 L1217.42 684.212 L1217.98 684.212 L1218.54 684.212 L1219.1 684.212 L1219.66 684.212 L1220.22 684.212 L1220.78 684.212 L1221.34 684.212 L1221.89 684.212 L1222.45 684.212 L1223.01 684.212 L1223.57 684.212 L1224.13 684.212 L1224.69 684.212 L1225.25 684.212 L1225.81 684.212 L1226.37 684.212 L1226.93 684.212 L1227.49 684.212 L1228.05 684.212 L1228.61 684.212 L1229.17 684.212 L1229.72 684.212 L1230.28 684.212 L1230.84 684.212 L1231.4 684.212 L1231.96 684.212 L1232.52 684.212 L1233.08 684.212 L1233.64 684.212 L1234.2 684.212 L1234.76 684.212 L1235.32 684.212 L1235.88 684.212 L1236.44 684.212 L1236.99 684.212 L1237.55 684.212 L1238.11 684.212 L1238.67 684.212 L1239.23 684.212 L1239.79 684.212 L1240.35 684.212 L1240.91 684.212 L1241.47 684.212 L1242.03 684.212 L1242.59 684.212 L1243.15 684.212 L1243.71 684.212 L1244.26 684.212 L1244.82 684.212 L1245.38 684.212 L1245.94 684.212 L1246.5 684.212 L1247.06 684.212 L1247.62 684.212 L1248.18 684.212 L1248.74 684.212 L1249.3 684.212 L1249.86 684.212 L1250.42 684.212 L1250.98 684.212 L1251.54 684.212 L1252.09 684.212 L1252.65 684.212 L1253.21 684.212 L1253.77 684.212 L1254.33 684.212 L1254.89 684.212 L1255.45 684.212 L1256.01 684.212 L1256.57 684.212 L1257.13 684.212 L1257.69 684.212 L1258.25 684.212 L1258.81 684.212 L1259.36 684.212 L1259.92 684.212 L1260.48 684.212 L1261.04 684.212 L1261.6 684.212 L1262.16 684.212 L1262.72 684.212 L1263.28 684.212 L1263.84 684.212 L1264.4 684.212 L1264.96 684.212 L1265.52 684.212 L1266.08 684.212 L1266.63 684.212 L1267.19 684.212 L1267.75 684.212 L1268.31 684.212 L1268.87 684.212 L1269.43 684.212 L1269.99 684.212 L1270.55 684.212 L1271.11 684.212 L1271.67 684.212 L1272.23 684.212 L1272.79 684.212 L1273.35 684.212 L1273.91 684.212 L1274.46 684.212 L1275.02 684.212 L1275.58 684.212 L1276.14 684.212 L1276.7 684.212 L1277.26 684.212 L1277.82 684.212 L1278.38 684.212 L1278.94 684.212 L1279.5 684.212 L1280.06 684.212 L1280.62 684.212 L1281.18 684.212 L1281.73 684.212 L1282.29 684.212 L1282.85 684.212 L1283.41 684.212 L1283.97 684.212 L1284.53 684.212 L1285.09 684.212 L1285.65 684.212 L1286.21 684.212 L1286.77 684.212 L1287.33 684.212 L1287.89 684.212 L1288.45 684.212 L1289 684.212 L1289.56 684.212 L1290.12 684.212 L1290.68 684.212 L1291.24 684.212 L1291.8 684.212 L1292.36 684.212 L1292.92 684.212 L1293.48 684.212 L1294.04 684.212 L1294.6 684.212 L1295.16 684.212 L1295.72 684.212 L1296.28 684.212 L1296.83 684.212 L1297.39 684.212 L1297.95 684.212 L1298.51 684.212 L1299.07 684.212 L1299.63 684.212 L1300.19 684.212 L1300.75 684.212 L1301.31 684.212 L1301.87 684.212 L1302.43 684.212 L1302.99 684.212 L1303.55 684.212 L1304.1 684.212 L1304.66 684.212 L1305.22 684.212 L1305.78 684.212 L1306.34 684.212 L1306.9 684.212 L1307.46 684.212 L1308.02 684.212 L1308.58 684.212 L1309.14 684.212 L1309.7 684.212 L1310.26 684.212 L1310.82 684.212 L1311.38 684.212 L1311.93 684.212 L1312.49 684.212 L1313.05 684.212 L1313.61 684.212 L1314.17 684.212 L1314.73 684.212 L1315.29 684.212 L1315.85 684.212 L1316.41 684.212 L1316.97 684.212 L1317.53 684.212 L1318.09 684.212 L1318.65 684.212 L1319.2 684.212 L1319.76 684.212 L1320.32 684.212 L1320.88 684.212 L1321.44 684.212 L1322 684.212 L1322.56 684.212 L1323.12 684.212 L1323.68 684.212 L1324.24 684.212 L1324.8 684.212 L1325.36 684.212 L1325.92 684.212 L1326.47 684.212 L1327.03 684.212 L1327.59 684.212 L1328.15 684.212 L1328.71 684.212 L1329.27 684.212 L1329.83 684.212 L1330.39 684.212 L1330.95 684.212 L1331.51 684.212 L1332.07 684.212 L1332.63 684.212 L1333.19 684.212 L1333.75 684.212 L1334.3 684.212 L1334.86 684.212 L1335.42 684.212 L1335.98 684.212 L1336.54 684.212 L1337.1 684.212 L1337.66 684.212 L1338.22 684.212 L1338.78 684.212 L1339.34 684.212 L1339.9 684.212 L1340.46 684.212 L1341.02 684.212 L1341.57 684.212 L1342.13 684.212 L1342.69 684.212 L1343.25 684.212 L1343.81 684.212 L1344.37 684.212 L1344.93 684.212 L1345.49 684.212 L1346.05 684.212 L1346.61 684.212 L1347.17 684.212 L1347.73 684.212 L1348.29 684.212 L1348.84 684.212 L1349.4 684.212 L1349.96 684.212 L1350.52 684.212 L1351.08 684.212 L1351.64 684.212 L1352.2 684.212 L1352.76 684.212 L1353.32 684.212 L1353.88 684.212 L1354.44 684.212 L1355 684.212 L1355.56 684.212 L1356.12 684.212 L1356.67 684.212 L1357.23 684.212 L1357.79 684.212 L1358.35 684.212 L1358.91 684.212 L1359.47 684.212 L1360.03 684.212 L1360.59 684.212 L1361.15 684.212 L1361.71 684.212 L1362.27 684.212 L1362.83 684.212 L1363.39 684.212 L1363.94 684.212 L1364.5 684.212 L1365.06 684.212 L1365.62 684.212 L1366.18 684.212 L1366.74 684.212 L1367.3 684.212 L1367.86 684.212 L1368.42 684.212 L1368.98 684.212 L1369.54 684.212 L1370.1 684.212 L1370.66 684.212 L1371.21 684.212 L1371.77 684.212 L1372.33 684.212 L1372.89 684.212 L1373.45 684.212 L1374.01 684.212 L1374.57 684.212 L1375.13 684.212 L1375.69 684.212 L1376.25 684.212 L1376.81 684.212 L1377.37 684.212 L1377.93 684.212 L1378.49 684.212 L1379.04 684.212 L1379.6 684.212 L1380.16 684.212 L1380.72 684.212 L1381.28 684.212 L1381.84 684.212 L1382.4 684.212 L1382.96 684.212 L1383.52 684.212 L1384.08 684.212 L1384.64 684.212 L1385.2 684.212 L1385.76 684.212 L1386.31 684.212 L1386.87 684.212 L1387.43 684.212 L1387.99 684.212 L1388.55 684.212 L1389.11 684.212 L1389.67 684.212 L1390.23 684.212 L1390.79 684.212 L1391.35 684.212 L1391.91 684.212 L1392.47 684.212 L1393.03 684.212 L1393.58 684.212 L1394.14 684.212 L1394.7 684.212 L1395.26 684.212 L1395.82 684.212 L1396.38 684.212 L1396.94 684.212 L1397.5 684.212 L1398.06 684.212 L1398.62 684.212 L1399.18 684.212 L1399.74 684.212 L1400.3 684.212 L1400.86 684.212 L1401.41 684.212 L1401.97 684.212 L1402.53 684.212 L1403.09 684.212 L1403.65 684.212 L1404.21 684.212 L1404.77 684.212 L1405.33 684.212 L1405.89 684.212 L1406.45 684.212 L1407.01 684.212 L1407.57 684.212 L1408.13 684.212 L1408.68 684.212 L1409.24 684.212 L1409.8 684.212 L1410.36 684.212 L1410.92 684.212 L1411.48 684.212 L1412.04 684.212 L1412.6 684.212 L1413.16 684.212 L1413.72 684.212 L1414.28 684.212 L1414.84 684.212 L1415.4 684.212 L1415.95 684.212 L1416.51 684.212 L1417.07 684.212 L1417.63 684.212 L1418.19 684.212 L1418.75 684.212 L1419.31 684.212 L1419.87 684.212 L1420.43 684.212 L1420.99 684.212 L1421.55 684.212 L1422.11 684.212 L1422.67 684.212 L1423.23 684.212 L1423.78 684.212 L1424.34 684.212 L1424.9 684.212 L1425.46 684.212 L1426.02 684.212 L1426.58 684.212 L1427.14 684.212 L1427.7 684.212 L1428.26 684.212 L1428.82 684.212 L1429.38 684.212 L1429.94 684.212 L1430.5 684.212 L1431.05 684.212 L1431.61 684.212 L1432.17 684.212 L1432.73 684.212 L1433.29 684.212 L1433.85 684.212 L1434.41 684.212 L1434.97 684.212 L1435.53 684.212 L1436.09 684.212 L1436.65 684.212 L1437.21 684.212 L1437.77 684.212 L1438.33 684.212 L1438.88 684.212 L1439.44 684.212 L1440 684.212 L1440.56 684.212 L1441.12 684.212 L1441.68 684.212 L1442.24 684.212 L1442.8 684.212 L1443.36 684.212 L1443.92 684.212 L1444.48 684.212 L1445.04 684.212 L1445.6 684.212 L1446.15 684.212 L1446.71 684.212 L1447.27 684.212 L1447.83 684.212 L1448.39 684.212 L1448.95 684.212 L1449.51 684.212 L1450.07 684.212 L1450.63 684.212 L1451.19 684.212 L1451.75 684.212 L1452.31 684.212 L1452.87 684.212 L1453.42 684.212 L1453.98 684.212 L1454.54 684.212 L1455.1 684.212 L1455.66 684.212 L1456.22 684.212 L1456.78 684.212 L1457.34 684.212 L1457.9 684.212 L1458.46 684.212 L1459.02 684.212 L1459.58 684.212 L1460.14 684.212 L1460.7 684.212 L1461.25 684.212 L1461.81 684.212 L1462.37 684.212 L1462.93 684.212 L1463.49 684.212 L1464.05 684.212 L1464.61 684.212 L1465.17 684.212 L1465.73 684.212 L1466.29 684.212 L1466.85 684.212 L1467.41 684.212 L1467.97 684.212 L1468.52 684.212 L1469.08 684.212 L1469.64 684.212 L1470.2 684.212 L1470.76 684.212 L1471.32 684.212 L1471.88 684.212 L1472.44 684.212 L1473 684.212 L1473.56 684.212 L1474.12 684.212 L1474.68 684.212 L1475.24 684.212 L1475.79 684.212 L1476.35 684.212 L1476.91 684.212 L1477.47 684.212 L1478.03 684.212 L1478.59 684.212 L1479.15 684.212 L1479.71 684.212 L1480.27 684.212 L1480.83 684.212 L1481.39 684.212 L1481.95 684.212 L1482.51 684.212 L1483.07 684.212 L1483.62 684.212 L1484.18 684.212 L1484.74 684.212 L1485.3 684.212 L1485.86 684.212 L1486.42 684.212 L1486.98 684.212 L1487.54 684.212 L1488.1 684.212 L1488.66 684.212 L1489.22 684.212 L1489.78 684.212 L1490.34 684.212 L1490.89 684.212 L1491.45 684.212 L1492.01 684.212 L1492.57 684.212 L1493.13 684.212 L1493.69 684.212 L1494.25 684.212 L1494.81 684.212 L1495.37 684.212 L1495.93 684.212 L1496.49 684.212 L1497.05 684.212 L1497.61 684.212 L1498.16 684.212 L1498.72 684.212 L1499.28 684.212 L1499.84 684.212 L1500.4 684.212 L1500.96 684.212 L1501.52 684.212 L1502.08 684.212 L1502.64 684.212 L1503.2 684.212 L1503.76 684.212 L1504.32 684.212 L1504.88 684.212 L1505.44 684.212 L1505.99 684.212 L1506.55 684.212 L1507.11 684.212 L1507.67 684.212 L1508.23 684.212 L1508.79 684.212 L1509.35 684.212 L1509.91 684.212 L1510.47 684.212 L1511.03 684.212 L1511.59 684.212 L1512.15 684.212 L1512.71 684.212 L1513.26 684.212 L1513.82 684.212 L1514.38 684.212 L1514.94 684.212 L1515.5 684.212 L1516.06 684.212 L1516.62 684.212 L1517.18 684.212 L1517.74 684.212 L1518.3 684.212 L1518.86 684.212 L1519.42 684.212 L1519.98 684.212 L1520.53 684.212 L1521.09 684.212 L1521.65 684.212 L1522.21 684.212 L1522.77 684.212 L1523.33 684.212 L1523.89 684.212 L1524.45 684.212 L1525.01 684.212 L1525.57 684.212 L1526.13 684.212 L1526.69 684.212 L1527.25 684.212 L1527.81 684.212 L1528.36 684.212 L1528.92 684.212 L1529.48 684.212 L1530.04 684.212 L1530.6 684.212 L1531.16 684.212 L1531.72 684.212 L1532.28 684.212 L1532.84 684.212 L1533.4 684.212 L1533.96 684.212 L1534.52 684.212 L1535.08 684.212 L1535.63 684.212 L1536.19 684.212 L1536.75 684.212 L1537.31 684.212 L1537.87 684.212 L1538.43 684.212 L1538.99 684.212 L1539.55 684.212 L1540.11 684.212 L1540.67 684.212 L1541.23 684.212 L1541.79 684.212 L1542.35 684.212 L1542.9 684.212 L1543.46 684.212 L1544.02 684.212 L1544.58 684.212 L1545.14 684.212 L1545.7 684.212 L1546.26 684.212 L1546.82 684.212 L1547.38 684.212 L1547.94 684.212 L1548.5 684.212 L1549.06 684.212 L1549.62 684.212 L1550.18 684.212 L1550.73 684.212 L1551.29 684.212 L1551.85 684.212 L1552.41 684.212 L1552.97 684.212 L1553.53 684.212 L1554.09 684.212 L1554.65 684.212 L1555.21 684.212 L1555.77 684.212 L1556.33 684.212 L1556.89 684.212 L1557.45 684.212 L1558 684.212 L1558.56 684.212 L1559.12 684.212 L1559.68 684.212 L1560.24 684.212 L1560.8 684.212 L1561.36 684.212 L1561.92 684.212 L1562.48 684.212 L1563.04 684.212 L1563.6 684.212 L1564.16 684.212 L1564.72 684.212 L1565.28 684.212 L1565.83 684.212 L1566.39 684.212 L1566.95 684.212 L1567.51 684.212 L1568.07 684.212 L1568.63 684.212 L1569.19 684.212 L1569.75 684.212 L1570.31 684.212 L1570.87 684.212 L1571.43 684.212 L1571.99 684.212 L1572.55 684.212 L1573.1 684.212 L1573.66 684.212 L1574.22 684.212 L1574.78 684.212 L1575.34 684.212 L1575.9 684.212 L1576.46 684.212 L1577.02 684.212 L1577.58 684.212 L1578.14 684.212 L1578.7 684.212 L1579.26 684.212 L1579.82 684.212 L1580.37 684.212 L1580.93 684.212 L1581.49 684.212 L1582.05 684.212 L1582.61 684.212 L1583.17 684.212 L1583.73 684.212 L1584.29 684.212 L1584.85 684.212 L1585.41 684.212 L1585.97 684.212 L1586.53 684.212 L1587.09 684.212 L1587.65 684.212 L1588.2 684.212 L1588.76 684.212 L1589.32 684.212 L1589.88 684.212 L1590.44 684.212 L1591 684.212 L1591.56 684.212 L1592.12 684.212 L1592.68 684.212 L1593.24 684.212 L1593.8 684.212 L1594.36 684.212 L1594.92 684.212 L1595.47 684.212 L1596.03 684.212 L1596.59 684.212 L1597.15 684.212 L1597.71 684.212 L1598.27 684.212 L1598.83 684.212 L1599.39 684.212 L1599.95 684.212 L1600.51 684.212 L1601.07 684.212 L1601.63 684.212 L1602.19 684.212 L1602.74 684.212 L1603.3 684.212 L1603.86 684.212 L1604.42 684.212 L1604.98 684.212 L1605.54 684.212 L1606.1 684.212 L1606.66 684.212 L1607.22 684.212 L1607.78 684.212 L1608.34 684.212 L1608.9 684.212 L1609.46 684.212 L1610.02 684.212 L1610.57 684.212 L1611.13 684.212 L1611.69 684.212 L1612.25 684.212 L1612.81 684.212 L1613.37 684.212 L1613.93 684.212 L1614.49 684.212 L1615.05 684.212 L1615.61 684.212 L1616.17 684.212 L1616.73 684.212 L1617.29 684.212 L1617.84 684.212 L1618.4 684.212 L1618.96 684.212 L1619.52 684.212 L1620.08 684.212 L1620.64 684.212 L1621.2 684.212 L1621.76 684.212 L1622.32 684.212 L1622.88 684.212 L1623.44 684.212 L1624 684.212 L1624.56 684.212 L1625.11 684.212 L1625.67 684.212 L1626.23 684.212 L1626.79 684.212 L1627.35 684.212 L1627.91 684.212 L1628.47 684.212 L1629.03 684.212 L1629.59 684.212 L1630.15 684.212 L1630.71 684.212 L1631.27 684.212 L1631.83 684.212 L1632.39 684.212 L1632.94 684.212 L1633.5 684.212 L1634.06 684.212 L1634.62 684.212 L1635.18 684.212 L1635.74 684.212 L1636.3 684.212 L1636.86 684.212 L1637.42 684.212 L1637.98 684.212 L1638.54 684.212 L1639.1 684.212 L1639.66 684.212 L1640.21 684.212 L1640.77 684.212 L1641.33 684.212 L1641.89 684.212 L1642.45 684.212 L1643.01 684.212 L1643.57 684.212 L1644.13 684.212 L1644.69 684.212 L1645.25 684.212 L1645.81 684.212 L1646.37 684.212 L1646.93 684.212 L1647.48 684.212 L1648.04 684.212 L1648.6 684.212 L1649.16 684.212 L1649.72 684.212 L1650.28 684.212 L1650.84 684.212 L1651.4 684.212 L1651.96 684.212 L1652.52 684.212 L1653.08 684.212 L1653.64 684.212 L1654.2 684.212 L1654.76 684.212 L1655.31 684.212 L1655.87 684.212 L1656.43 684.212 L1656.99 684.212 L1657.55 684.212 L1658.11 684.212 L1658.67 684.212 L1659.23 684.212 L1659.79 684.212 L1660.35 684.212 L1660.91 684.212 L1661.47 684.212 L1662.03 684.212 L1662.58 684.212 L1663.14 684.212 L1663.7 684.212 L1664.26 684.212 L1664.82 684.212 L1665.38 684.212 L1665.94 684.212 L1666.5 684.212 L1667.06 684.212 L1667.62 684.212 L1668.18 684.212 L1668.74 684.212 L1669.3 684.212 L1669.85 684.212 L1670.41 684.212 L1670.97 684.212 L1671.53 684.212 L1672.09 684.212 L1672.65 684.212 L1673.21 684.212 L1673.77 684.212 L1674.33 684.212 L1674.89 684.212 L1675.45 684.212 L1676.01 684.212 L1676.57 684.212 L1677.13 684.212 L1677.68 684.212 L1678.24 684.212 L1678.8 684.212 L1679.36 684.212 L1679.92 684.212 L1680.48 684.212 L1681.04 684.212 L1681.6 684.212 L1682.16 684.212 L1682.72 684.212 L1683.28 684.212 L1683.84 684.212 L1684.4 684.212 L1684.95 684.212 L1685.51 684.212 L1686.07 684.212 L1686.63 684.212 L1687.19 684.212 L1687.75 684.212 L1688.31 684.212 L1688.87 684.212 L1689.43 684.212 L1689.99 684.212 L1690.55 684.212 L1691.11 684.212 L1691.67 684.212 L1692.23 684.212 L1692.78 684.212 L1693.34 684.212 L1693.9 684.212 L1694.46 684.212 L1695.02 684.212 L1695.58 684.212 L1696.14 684.212 L1696.7 684.212 L1697.26 684.212 L1697.82 684.212 L1698.38 684.212 L1698.94 684.212 L1699.5 684.212 L1700.05 684.212 L1700.61 684.212 L1701.17 684.212 L1701.73 684.212 L1702.29 684.212 L1702.85 684.212 L1703.41 684.212 L1703.97 684.212 L1704.53 684.212 L1705.09 684.212 L1705.65 684.212 L1706.21 684.212 L1706.77 684.212 L1707.32 684.212 L1707.88 684.212 L1708.44 684.212 L1709 684.212 L1709.56 684.212 L1710.12 684.212 L1710.68 684.212 L1711.24 684.212 L1711.8 684.212 L1712.36 684.212 L1712.92 684.212 L1713.48 684.212 L1714.04 684.212 L1714.6 684.212 L1715.15 684.212 L1715.71 684.212 L1716.27 684.212 L1716.83 684.212 L1717.39 684.212 L1717.95 684.212 L1718.51 684.212 L1719.07 684.212 L1719.63 684.212 L1720.19 684.212 L1720.75 684.212 L1721.31 684.212 L1721.87 684.212 L1722.42 684.212 L1722.98 684.212 L1723.54 684.212 L1724.1 684.212 L1724.66 684.212 L1725.22 684.212 L1725.78 684.212 L1726.34 684.212 L1726.9 684.212 L1727.46 684.212 L1728.02 684.212 L1728.58 684.212 L1729.14 684.212 L1729.69 684.212 L1730.25 684.212 L1730.81 684.212 L1731.37 684.212 L1731.93 684.212 L1732.49 684.212 L1733.05 684.212 L1733.61 684.212 L1734.17 684.212 L1734.73 684.212 L1735.29 684.212 L1735.85 684.212 L1736.41 684.212 L1736.97 684.212 L1737.52 684.212 L1738.08 684.212 L1738.64 684.212 L1739.2 684.212 L1739.76 684.212 L1740.32 684.212 L1740.88 684.212 L1741.44 684.212 L1742 684.212 L1742.56 684.212 L1743.12 684.212 L1743.68 684.212 L1744.24 684.212 L1744.79 684.212 L1745.35 684.212 L1745.91 684.212 L1746.47 684.212 L1747.03 684.212 L1747.59 684.212 L1748.15 684.212 L1748.71 684.212 L1749.27 684.212 L1749.83 684.212 L1750.39 684.212 L1750.95 684.212 L1751.51 684.212 L1752.06 684.212 L1752.62 684.212 L1753.18 684.212 L1753.74 684.212 L1754.3 684.212 L1754.86 684.212 L1755.42 684.212 L1755.98 684.212 L1756.54 684.212 L1757.1 684.212 L1757.66 684.212 L1758.22 684.212 L1758.78 684.212 L1759.34 684.212 L1759.89 684.212 L1760.45 684.212 L1761.01 684.212 L1761.57 684.212 L1762.13 684.212 L1762.69 684.212 L1763.25 684.212 L1763.81 684.212 L1764.37 684.212 L1764.93 684.212 L1765.49 684.212 L1766.05 684.212 L1766.61 684.212 L1767.16 684.212 L1767.72 684.212 L1768.28 684.212 L1768.84 684.212 L1769.4 684.212 L1769.96 684.212 L1770.52 684.212 L1771.08 684.212 L1771.64 684.212 L1772.2 684.212 L1772.76 684.212 L1773.32 684.212 L1773.88 684.212 L1774.43 684.212 L1774.99 684.212 L1775.55 684.212 L1776.11 684.212 L1776.67 684.212 L1777.23 684.212 L1777.79 684.212 L1778.35 684.212 L1778.91 684.212 L1779.47 684.212 L1780.03 684.212 L1780.59 684.212 L1781.15 684.212 L1781.71 684.212 L1782.26 684.212 L1782.82 684.212 L1783.38 684.212 L1783.94 684.212 L1784.5 684.212 L1785.06 684.212 L1785.62 684.212 L1786.18 684.212 L1786.74 684.212 L1787.3 684.212 L1787.86 684.212 L1788.42 684.212 L1788.98 684.212 L1789.53 684.212 L1790.09 684.212 L1790.65 684.212 L1791.21 684.212 L1791.77 684.212 L1792.33 684.212 L1792.89 684.212 L1793.45 684.212 L1794.01 684.212 L1794.57 684.212 L1795.13 684.212 L1795.69 684.212 L1796.25 684.212 L1796.8 684.212 L1797.36 684.212 L1797.92 684.212 L1798.48 684.212 L1799.04 684.212 L1799.6 684.212 L1800.16 684.212 L1800.72 684.212 L1801.28 684.212 L1801.84 684.212 L1802.4 684.212 L1802.96 684.212 L1803.52 684.212 L1804.08 684.212 L1804.63 684.212 L1805.19 684.212 L1805.75 684.212 L1806.31 684.212 L1806.87 684.212 L1807.43 684.212 L1807.99 684.212 L1808.55 684.212 L1809.11 684.212 L1809.67 684.212 L1810.23 684.212 L1810.79 684.212 L1811.35 684.212 L1811.9 684.212 L1812.46 684.212 L1813.02 684.212 L1813.58 684.212 L1814.14 684.212 L1814.7 684.212 L1815.26 684.212 L1815.82 684.212 L1816.38 684.212 L1816.94 684.212 L1817.5 684.212 L1818.06 684.212 L1818.62 684.212 L1819.18 684.212 L1819.73 684.212 L1820.29 684.212 L1820.85 684.212 L1821.41 684.212 L1821.97 684.212 L1822.53 684.212 L1823.09 684.212 L1823.65 684.212 L1824.21 684.212 L1824.77 684.212 L1825.33 684.212 L1825.89 684.212 L1826.45 684.212 L1827 684.212 L1827.56 684.212 L1828.12 684.212 L1828.68 684.212 L1829.24 684.212 L1829.8 684.212 L1830.36 684.212 L1830.92 684.212 L1831.48 684.212 L1832.04 684.212 L1832.6 684.212 L1833.16 684.212 L1833.72 684.212 L1834.27 684.212 L1834.83 684.212 L1835.39 684.212 L1835.95 684.212 L1836.51 684.212 L1837.07 684.212 L1837.63 684.212 L1838.19 684.212 L1838.19 681.809 L1837.63 681.809 L1837.07 681.809 L1836.51 681.809 L1835.95 681.809 L1835.39 681.809 L1834.83 681.809 L1834.27 681.809 L1833.72 681.809 L1833.16 681.809 L1832.6 681.809 L1832.04 681.809 L1831.48 681.809 L1830.92 681.809 L1830.36 681.809 L1829.8 681.809 L1829.24 681.809 L1828.68 681.809 L1828.12 681.809 L1827.56 681.809 L1827 681.809 L1826.45 681.809 L1825.89 681.809 L1825.33 681.809 L1824.77 681.809 L1824.21 681.809 L1823.65 681.809 L1823.09 681.809 L1822.53 681.809 L1821.97 681.809 L1821.41 681.809 L1820.85 681.809 L1820.29 681.809 L1819.73 681.809 L1819.18 681.809 L1818.62 681.809 L1818.06 681.809 L1817.5 681.809 L1816.94 681.809 L1816.38 681.809 L1815.82 681.809 L1815.26 681.809 L1814.7 681.809 L1814.14 681.809 L1813.58 681.809 L1813.02 681.809 L1812.46 681.809 L1811.9 681.809 L1811.35 681.809 L1810.79 681.809 L1810.23 681.809 L1809.67 681.809 L1809.11 681.809 L1808.55 681.809 L1807.99 681.809 L1807.43 681.809 L1806.87 681.809 L1806.31 681.809 L1805.75 681.809 L1805.19 681.809 L1804.63 681.809 L1804.08 681.809 L1803.52 681.809 L1802.96 681.809 L1802.4 681.809 L1801.84 681.809 L1801.28 681.809 L1800.72 681.809 L1800.16 681.809 L1799.6 681.809 L1799.04 681.809 L1798.48 681.809 L1797.92 681.809 L1797.36 681.809 L1796.8 681.809 L1796.25 681.809 L1795.69 681.809 L1795.13 681.809 L1794.57 681.809 L1794.01 681.809 L1793.45 681.809 L1792.89 681.809 L1792.33 681.809 L1791.77 681.809 L1791.21 681.809 L1790.65 681.809 L1790.09 681.809 L1789.53 681.809 L1788.98 681.809 L1788.42 681.809 L1787.86 681.809 L1787.3 681.809 L1786.74 681.809 L1786.18 681.809 L1785.62 681.809 L1785.06 681.809 L1784.5 681.809 L1783.94 681.809 L1783.38 681.809 L1782.82 681.809 L1782.26 681.809 L1781.71 681.809 L1781.15 681.809 L1780.59 681.809 L1780.03 681.809 L1779.47 681.809 L1778.91 681.809 L1778.35 681.809 L1777.79 681.809 L1777.23 681.809 L1776.67 681.809 L1776.11 681.809 L1775.55 681.809 L1774.99 681.809 L1774.43 681.809 L1773.88 681.809 L1773.32 681.809 L1772.76 681.809 L1772.2 681.809 L1771.64 681.809 L1771.08 681.809 L1770.52 681.809 L1769.96 681.809 L1769.4 681.809 L1768.84 681.809 L1768.28 681.809 L1767.72 681.809 L1767.16 681.809 L1766.61 681.809 L1766.05 681.809 L1765.49 681.809 L1764.93 681.809 L1764.37 681.809 L1763.81 681.809 L1763.25 681.809 L1762.69 681.809 L1762.13 681.809 L1761.57 681.809 L1761.01 681.809 L1760.45 681.809 L1759.89 681.809 L1759.34 681.809 L1758.78 681.809 L1758.22 681.809 L1757.66 681.809 L1757.1 681.809 L1756.54 681.809 L1755.98 681.809 L1755.42 681.809 L1754.86 681.809 L1754.3 681.809 L1753.74 681.809 L1753.18 681.809 L1752.62 681.809 L1752.06 681.809 L1751.51 681.809 L1750.95 681.809 L1750.39 681.809 L1749.83 681.809 L1749.27 681.809 L1748.71 681.809 L1748.15 681.809 L1747.59 681.809 L1747.03 681.809 L1746.47 681.809 L1745.91 681.809 L1745.35 681.809 L1744.79 681.809 L1744.24 681.809 L1743.68 681.809 L1743.12 681.809 L1742.56 681.809 L1742 681.809 L1741.44 681.809 L1740.88 681.809 L1740.32 681.809 L1739.76 681.809 L1739.2 681.809 L1738.64 681.809 L1738.08 681.809 L1737.52 681.809 L1736.97 681.809 L1736.41 681.809 L1735.85 681.809 L1735.29 681.809 L1734.73 681.809 L1734.17 681.809 L1733.61 681.809 L1733.05 681.809 L1732.49 681.809 L1731.93 681.809 L1731.37 681.809 L1730.81 681.809 L1730.25 681.809 L1729.69 681.809 L1729.14 681.809 L1728.58 681.809 L1728.02 681.809 L1727.46 681.809 L1726.9 681.809 L1726.34 681.809 L1725.78 681.809 L1725.22 681.809 L1724.66 681.809 L1724.1 681.809 L1723.54 681.809 L1722.98 681.809 L1722.42 681.809 L1721.87 681.809 L1721.31 681.809 L1720.75 681.809 L1720.19 681.809 L1719.63 681.809 L1719.07 681.809 L1718.51 681.809 L1717.95 681.809 L1717.39 681.809 L1716.83 681.809 L1716.27 681.809 L1715.71 681.809 L1715.15 681.809 L1714.6 681.809 L1714.04 681.809 L1713.48 681.809 L1712.92 681.809 L1712.36 681.809 L1711.8 681.809 L1711.24 681.809 L1710.68 681.809 L1710.12 681.809 L1709.56 681.809 L1709 681.809 L1708.44 681.809 L1707.88 681.809 L1707.32 681.809 L1706.77 681.809 L1706.21 681.809 L1705.65 681.809 L1705.09 681.809 L1704.53 681.809 L1703.97 681.809 L1703.41 681.809 L1702.85 681.809 L1702.29 681.809 L1701.73 681.809 L1701.17 681.809 L1700.61 681.809 L1700.05 681.809 L1699.5 681.809 L1698.94 681.809 L1698.38 681.809 L1697.82 681.809 L1697.26 681.809 L1696.7 681.809 L1696.14 681.809 L1695.58 681.809 L1695.02 681.809 L1694.46 681.809 L1693.9 681.809 L1693.34 681.809 L1692.78 681.809 L1692.23 681.809 L1691.67 681.809 L1691.11 681.809 L1690.55 681.809 L1689.99 681.809 L1689.43 681.809 L1688.87 681.809 L1688.31 681.809 L1687.75 681.809 L1687.19 681.809 L1686.63 681.809 L1686.07 681.809 L1685.51 681.809 L1684.95 681.809 L1684.4 681.809 L1683.84 681.809 L1683.28 681.809 L1682.72 681.809 L1682.16 681.809 L1681.6 681.809 L1681.04 681.809 L1680.48 681.809 L1679.92 681.809 L1679.36 681.809 L1678.8 681.809 L1678.24 681.809 L1677.68 681.809 L1677.13 681.809 L1676.57 681.809 L1676.01 681.809 L1675.45 681.809 L1674.89 681.809 L1674.33 681.809 L1673.77 681.809 L1673.21 681.809 L1672.65 681.809 L1672.09 681.809 L1671.53 681.809 L1670.97 681.809 L1670.41 681.809 L1669.85 681.809 L1669.3 681.809 L1668.74 681.809 L1668.18 681.809 L1667.62 681.809 L1667.06 681.809 L1666.5 681.809 L1665.94 681.809 L1665.38 681.809 L1664.82 681.809 L1664.26 681.809 L1663.7 681.809 L1663.14 681.809 L1662.58 681.809 L1662.03 681.809 L1661.47 681.809 L1660.91 681.809 L1660.35 681.809 L1659.79 681.809 L1659.23 681.809 L1658.67 681.809 L1658.11 681.809 L1657.55 681.809 L1656.99 681.809 L1656.43 681.809 L1655.87 681.809 L1655.31 681.809 L1654.76 681.809 L1654.2 681.809 L1653.64 681.809 L1653.08 681.809 L1652.52 681.809 L1651.96 681.809 L1651.4 681.809 L1650.84 681.809 L1650.28 681.809 L1649.72 681.809 L1649.16 681.809 L1648.6 681.809 L1648.04 681.809 L1647.48 681.809 L1646.93 681.809 L1646.37 681.809 L1645.81 681.809 L1645.25 681.809 L1644.69 681.809 L1644.13 681.809 L1643.57 681.809 L1643.01 681.809 L1642.45 681.809 L1641.89 681.809 L1641.33 681.809 L1640.77 681.809 L1640.21 681.809 L1639.66 681.809 L1639.1 681.809 L1638.54 681.809 L1637.98 681.809 L1637.42 681.809 L1636.86 681.809 L1636.3 681.809 L1635.74 681.809 L1635.18 681.809 L1634.62 681.809 L1634.06 681.809 L1633.5 681.809 L1632.94 681.809 L1632.39 681.809 L1631.83 681.809 L1631.27 681.809 L1630.71 681.809 L1630.15 681.809 L1629.59 681.809 L1629.03 681.809 L1628.47 681.809 L1627.91 681.809 L1627.35 681.809 L1626.79 681.809 L1626.23 681.809 L1625.67 681.809 L1625.11 681.809 L1624.56 681.809 L1624 681.809 L1623.44 681.809 L1622.88 681.809 L1622.32 681.809 L1621.76 681.809 L1621.2 681.809 L1620.64 681.809 L1620.08 681.809 L1619.52 681.809 L1618.96 681.809 L1618.4 681.809 L1617.84 681.809 L1617.29 681.809 L1616.73 681.809 L1616.17 681.809 L1615.61 681.809 L1615.05 681.809 L1614.49 681.809 L1613.93 681.809 L1613.37 681.809 L1612.81 681.809 L1612.25 681.809 L1611.69 681.809 L1611.13 681.809 L1610.57 681.809 L1610.02 681.809 L1609.46 681.809 L1608.9 681.809 L1608.34 681.809 L1607.78 681.809 L1607.22 681.809 L1606.66 681.809 L1606.1 681.809 L1605.54 681.809 L1604.98 681.809 L1604.42 681.809 L1603.86 681.809 L1603.3 681.809 L1602.74 681.809 L1602.19 681.809 L1601.63 681.809 L1601.07 681.809 L1600.51 681.809 L1599.95 681.809 L1599.39 681.809 L1598.83 681.809 L1598.27 681.809 L1597.71 681.809 L1597.15 681.809 L1596.59 681.809 L1596.03 681.809 L1595.47 681.809 L1594.92 681.809 L1594.36 681.809 L1593.8 681.809 L1593.24 681.809 L1592.68 681.809 L1592.12 681.809 L1591.56 681.809 L1591 681.809 L1590.44 681.809 L1589.88 681.809 L1589.32 681.809 L1588.76 681.809 L1588.2 681.809 L1587.65 681.809 L1587.09 681.809 L1586.53 681.809 L1585.97 681.809 L1585.41 681.809 L1584.85 681.809 L1584.29 681.809 L1583.73 681.809 L1583.17 681.809 L1582.61 681.809 L1582.05 681.809 L1581.49 681.809 L1580.93 681.809 L1580.37 681.809 L1579.82 681.809 L1579.26 681.809 L1578.7 681.809 L1578.14 681.809 L1577.58 681.809 L1577.02 681.809 L1576.46 681.809 L1575.9 681.809 L1575.34 681.809 L1574.78 681.809 L1574.22 681.809 L1573.66 681.809 L1573.1 681.809 L1572.55 681.809 L1571.99 681.809 L1571.43 681.809 L1570.87 681.809 L1570.31 681.809 L1569.75 681.809 L1569.19 681.809 L1568.63 681.809 L1568.07 681.809 L1567.51 681.809 L1566.95 681.809 L1566.39 681.809 L1565.83 681.809 L1565.28 681.809 L1564.72 681.809 L1564.16 681.809 L1563.6 681.809 L1563.04 681.809 L1562.48 681.809 L1561.92 681.809 L1561.36 681.809 L1560.8 681.809 L1560.24 681.809 L1559.68 681.809 L1559.12 681.809 L1558.56 681.809 L1558 681.809 L1557.45 681.809 L1556.89 681.809 L1556.33 681.809 L1555.77 681.809 L1555.21 681.809 L1554.65 681.809 L1554.09 681.809 L1553.53 681.809 L1552.97 681.809 L1552.41 681.809 L1551.85 681.809 L1551.29 681.809 L1550.73 681.809 L1550.18 681.809 L1549.62 681.809 L1549.06 681.809 L1548.5 681.809 L1547.94 681.809 L1547.38 681.809 L1546.82 681.809 L1546.26 681.809 L1545.7 681.809 L1545.14 681.809 L1544.58 681.809 L1544.02 681.809 L1543.46 681.809 L1542.9 681.809 L1542.35 681.809 L1541.79 681.809 L1541.23 681.809 L1540.67 681.809 L1540.11 681.809 L1539.55 681.809 L1538.99 681.809 L1538.43 681.809 L1537.87 681.809 L1537.31 681.809 L1536.75 681.809 L1536.19 681.809 L1535.63 681.809 L1535.08 681.809 L1534.52 681.809 L1533.96 681.809 L1533.4 681.809 L1532.84 681.809 L1532.28 681.809 L1531.72 681.809 L1531.16 681.809 L1530.6 681.809 L1530.04 681.809 L1529.48 681.809 L1528.92 681.809 L1528.36 681.809 L1527.81 681.809 L1527.25 681.809 L1526.69 681.809 L1526.13 681.809 L1525.57 681.809 L1525.01 681.809 L1524.45 681.809 L1523.89 681.809 L1523.33 681.809 L1522.77 681.809 L1522.21 681.809 L1521.65 681.809 L1521.09 681.809 L1520.53 681.809 L1519.98 681.809 L1519.42 681.809 L1518.86 681.809 L1518.3 681.809 L1517.74 681.809 L1517.18 681.809 L1516.62 681.809 L1516.06 681.809 L1515.5 681.809 L1514.94 681.809 L1514.38 681.809 L1513.82 681.809 L1513.26 681.809 L1512.71 681.809 L1512.15 681.809 L1511.59 681.809 L1511.03 681.809 L1510.47 681.809 L1509.91 681.809 L1509.35 681.809 L1508.79 681.809 L1508.23 681.809 L1507.67 681.809 L1507.11 681.809 L1506.55 681.809 L1505.99 681.809 L1505.44 681.809 L1504.88 681.809 L1504.32 681.809 L1503.76 681.809 L1503.2 681.809 L1502.64 681.809 L1502.08 681.809 L1501.52 681.809 L1500.96 681.809 L1500.4 681.809 L1499.84 681.809 L1499.28 681.809 L1498.72 681.809 L1498.16 681.809 L1497.61 681.809 L1497.05 681.809 L1496.49 681.809 L1495.93 681.809 L1495.37 681.809 L1494.81 681.809 L1494.25 681.809 L1493.69 681.809 L1493.13 681.809 L1492.57 681.809 L1492.01 681.809 L1491.45 681.809 L1490.89 681.809 L1490.34 681.809 L1489.78 681.809 L1489.22 681.809 L1488.66 681.809 L1488.1 681.809 L1487.54 681.809 L1486.98 681.809 L1486.42 681.809 L1485.86 681.809 L1485.3 681.809 L1484.74 681.809 L1484.18 681.809 L1483.62 681.809 L1483.07 681.809 L1482.51 681.809 L1481.95 681.809 L1481.39 681.809 L1480.83 681.809 L1480.27 681.809 L1479.71 681.809 L1479.15 681.809 L1478.59 681.809 L1478.03 681.809 L1477.47 681.809 L1476.91 681.809 L1476.35 681.809 L1475.79 681.809 L1475.24 681.809 L1474.68 681.809 L1474.12 681.809 L1473.56 681.809 L1473 681.809 L1472.44 681.809 L1471.88 681.809 L1471.32 681.809 L1470.76 681.809 L1470.2 681.809 L1469.64 681.809 L1469.08 681.809 L1468.52 681.809 L1467.97 681.809 L1467.41 681.809 L1466.85 681.809 L1466.29 681.809 L1465.73 681.809 L1465.17 681.809 L1464.61 681.809 L1464.05 681.809 L1463.49 681.809 L1462.93 681.809 L1462.37 681.809 L1461.81 681.809 L1461.25 681.809 L1460.7 681.809 L1460.14 681.809 L1459.58 681.809 L1459.02 681.809 L1458.46 681.809 L1457.9 681.809 L1457.34 681.809 L1456.78 681.809 L1456.22 681.809 L1455.66 681.809 L1455.1 681.809 L1454.54 681.809 L1453.98 681.809 L1453.42 681.809 L1452.87 681.809 L1452.31 681.809 L1451.75 681.809 L1451.19 681.809 L1450.63 681.809 L1450.07 681.809 L1449.51 681.809 L1448.95 681.809 L1448.39 681.809 L1447.83 681.809 L1447.27 681.809 L1446.71 681.809 L1446.15 681.809 L1445.6 681.809 L1445.04 681.809 L1444.48 681.809 L1443.92 681.809 L1443.36 681.809 L1442.8 681.809 L1442.24 681.809 L1441.68 681.809 L1441.12 681.809 L1440.56 681.809 L1440 681.809 L1439.44 681.809 L1438.88 681.809 L1438.33 681.809 L1437.77 681.809 L1437.21 681.809 L1436.65 681.809 L1436.09 681.809 L1435.53 681.809 L1434.97 681.809 L1434.41 681.809 L1433.85 681.809 L1433.29 681.809 L1432.73 681.809 L1432.17 681.809 L1431.61 681.809 L1431.05 681.809 L1430.5 681.809 L1429.94 681.809 L1429.38 681.809 L1428.82 681.809 L1428.26 681.809 L1427.7 681.809 L1427.14 681.809 L1426.58 681.809 L1426.02 681.809 L1425.46 681.809 L1424.9 681.809 L1424.34 681.809 L1423.78 681.809 L1423.23 681.809 L1422.67 681.809 L1422.11 681.809 L1421.55 681.809 L1420.99 681.809 L1420.43 681.809 L1419.87 681.809 L1419.31 681.809 L1418.75 681.809 L1418.19 681.809 L1417.63 681.809 L1417.07 681.809 L1416.51 681.809 L1415.95 681.809 L1415.4 681.809 L1414.84 681.809 L1414.28 681.809 L1413.72 681.809 L1413.16 681.809 L1412.6 681.809 L1412.04 681.809 L1411.48 681.809 L1410.92 681.809 L1410.36 681.809 L1409.8 681.809 L1409.24 681.809 L1408.68 681.809 L1408.13 681.809 L1407.57 681.809 L1407.01 681.809 L1406.45 681.809 L1405.89 681.809 L1405.33 681.809 L1404.77 681.809 L1404.21 681.809 L1403.65 681.809 L1403.09 681.809 L1402.53 681.809 L1401.97 681.809 L1401.41 681.809 L1400.86 681.809 L1400.3 681.809 L1399.74 681.809 L1399.18 681.809 L1398.62 681.809 L1398.06 681.809 L1397.5 681.809 L1396.94 681.809 L1396.38 681.809 L1395.82 681.809 L1395.26 681.809 L1394.7 681.809 L1394.14 681.809 L1393.58 681.809 L1393.03 681.809 L1392.47 681.809 L1391.91 681.809 L1391.35 681.809 L1390.79 681.809 L1390.23 681.809 L1389.67 681.809 L1389.11 681.809 L1388.55 681.809 L1387.99 681.809 L1387.43 681.809 L1386.87 681.809 L1386.31 681.809 L1385.76 681.809 L1385.2 681.809 L1384.64 681.809 L1384.08 681.809 L1383.52 681.809 L1382.96 681.809 L1382.4 681.809 L1381.84 681.809 L1381.28 681.809 L1380.72 681.809 L1380.16 681.809 L1379.6 681.809 L1379.04 681.809 L1378.49 681.809 L1377.93 681.809 L1377.37 681.809 L1376.81 681.809 L1376.25 681.809 L1375.69 681.809 L1375.13 681.809 L1374.57 681.809 L1374.01 681.809 L1373.45 681.809 L1372.89 681.809 L1372.33 681.809 L1371.77 681.809 L1371.21 681.809 L1370.66 681.809 L1370.1 681.809 L1369.54 681.809 L1368.98 681.809 L1368.42 681.809 L1367.86 681.809 L1367.3 681.809 L1366.74 681.809 L1366.18 681.809 L1365.62 681.809 L1365.06 681.809 L1364.5 681.809 L1363.94 681.809 L1363.39 681.809 L1362.83 681.809 L1362.27 681.809 L1361.71 681.809 L1361.15 681.809 L1360.59 681.809 L1360.03 681.809 L1359.47 681.809 L1358.91 681.809 L1358.35 681.809 L1357.79 681.809 L1357.23 681.809 L1356.67 681.809 L1356.12 681.809 L1355.56 681.809 L1355 681.809 L1354.44 681.809 L1353.88 681.809 L1353.32 681.809 L1352.76 681.809 L1352.2 681.809 L1351.64 681.809 L1351.08 681.809 L1350.52 681.809 L1349.96 681.809 L1349.4 681.809 L1348.84 681.809 L1348.29 681.809 L1347.73 681.809 L1347.17 681.809 L1346.61 681.809 L1346.05 681.809 L1345.49 681.809 L1344.93 681.809 L1344.37 681.809 L1343.81 681.809 L1343.25 681.809 L1342.69 681.809 L1342.13 681.809 L1341.57 681.809 L1341.02 681.809 L1340.46 681.809 L1339.9 681.809 L1339.34 681.809 L1338.78 681.809 L1338.22 681.809 L1337.66 681.809 L1337.1 681.809 L1336.54 681.809 L1335.98 681.809 L1335.42 681.809 L1334.86 681.809 L1334.3 681.809 L1333.75 681.809 L1333.19 681.809 L1332.63 681.809 L1332.07 681.809 L1331.51 681.809 L1330.95 681.809 L1330.39 681.809 L1329.83 681.809 L1329.27 681.809 L1328.71 681.809 L1328.15 681.809 L1327.59 681.809 L1327.03 681.809 L1326.47 681.809 L1325.92 681.809 L1325.36 681.809 L1324.8 681.809 L1324.24 681.809 L1323.68 681.809 L1323.12 681.809 L1322.56 681.809 L1322 681.809 L1321.44 681.809 L1320.88 681.809 L1320.32 681.809 L1319.76 681.809 L1319.2 681.809 L1318.65 681.809 L1318.09 681.809 L1317.53 681.809 L1316.97 681.809 L1316.41 681.809 L1315.85 681.809 L1315.29 681.809 L1314.73 681.809 L1314.17 681.809 L1313.61 681.809 L1313.05 681.809 L1312.49 681.809 L1311.93 681.809 L1311.38 681.809 L1310.82 681.809 L1310.26 681.809 L1309.7 681.809 L1309.14 681.809 L1308.58 681.809 L1308.02 681.809 L1307.46 681.809 L1306.9 681.809 L1306.34 681.809 L1305.78 681.809 L1305.22 681.809 L1304.66 681.809 L1304.1 681.809 L1303.55 681.809 L1302.99 681.809 L1302.43 681.809 L1301.87 681.809 L1301.31 681.809 L1300.75 681.809 L1300.19 681.809 L1299.63 681.809 L1299.07 681.809 L1298.51 681.809 L1297.95 681.809 L1297.39 681.809 L1296.83 681.809 L1296.28 681.809 L1295.72 681.809 L1295.16 681.809 L1294.6 681.809 L1294.04 681.809 L1293.48 681.809 L1292.92 681.809 L1292.36 681.809 L1291.8 681.809 L1291.24 681.809 L1290.68 681.809 L1290.12 681.809 L1289.56 681.809 L1289 681.809 L1288.45 681.809 L1287.89 681.809 L1287.33 681.809 L1286.77 681.809 L1286.21 681.809 L1285.65 681.809 L1285.09 681.809 L1284.53 681.809 L1283.97 681.809 L1283.41 681.809 L1282.85 681.809 L1282.29 681.809 L1281.73 681.809 L1281.18 681.809 L1280.62 681.809 L1280.06 681.809 L1279.5 681.809 L1278.94 681.809 L1278.38 681.809 L1277.82 681.809 L1277.26 681.809 L1276.7 681.809 L1276.14 681.809 L1275.58 681.809 L1275.02 681.809 L1274.46 681.809 L1273.91 681.809 L1273.35 681.809 L1272.79 681.809 L1272.23 681.809 L1271.67 681.809 L1271.11 681.809 L1270.55 681.809 L1269.99 681.809 L1269.43 681.809 L1268.87 681.809 L1268.31 681.809 L1267.75 681.809 L1267.19 681.809 L1266.63 681.809 L1266.08 681.809 L1265.52 681.809 L1264.96 681.809 L1264.4 681.809 L1263.84 681.809 L1263.28 681.809 L1262.72 681.809 L1262.16 681.809 L1261.6 681.809 L1261.04 681.809 L1260.48 681.809 L1259.92 681.809 L1259.36 681.809 L1258.81 681.809 L1258.25 681.809 L1257.69 681.809 L1257.13 681.809 L1256.57 681.809 L1256.01 681.809 L1255.45 681.809 L1254.89 681.809 L1254.33 681.809 L1253.77 681.809 L1253.21 681.809 L1252.65 681.809 L1252.09 681.809 L1251.54 681.809 L1250.98 681.809 L1250.42 681.809 L1249.86 681.809 L1249.3 681.809 L1248.74 681.809 L1248.18 681.809 L1247.62 681.809 L1247.06 681.809 L1246.5 681.809 L1245.94 681.809 L1245.38 681.809 L1244.82 681.809 L1244.26 681.809 L1243.71 681.809 L1243.15 681.809 L1242.59 681.809 L1242.03 681.809 L1241.47 681.809 L1240.91 681.809 L1240.35 681.809 L1239.79 681.809 L1239.23 681.809 L1238.67 681.809 L1238.11 681.809 L1237.55 681.809 L1236.99 681.809 L1236.44 681.809 L1235.88 681.809 L1235.32 681.809 L1234.76 681.809 L1234.2 681.809 L1233.64 681.809 L1233.08 681.809 L1232.52 681.809 L1231.96 681.809 L1231.4 681.809 L1230.84 681.809 L1230.28 681.809 L1229.72 681.809 L1229.17 681.809 L1228.61 681.809 L1228.05 681.809 L1227.49 681.809 L1226.93 681.809 L1226.37 681.809 L1225.81 681.809 L1225.25 681.809 L1224.69 681.809 L1224.13 681.809 L1223.57 681.809 L1223.01 681.809 L1222.45 681.809 L1221.89 681.809 L1221.34 681.809 L1220.78 681.809 L1220.22 681.809 L1219.66 681.809 L1219.1 681.809 L1218.54 681.809 L1217.98 681.809 L1217.42 681.809 L1216.86 681.809 L1216.3 681.809 L1215.74 681.809 L1215.18 681.809 L1214.62 681.809 L1214.07 681.809 L1213.51 681.809 L1212.95 681.809 L1212.39 681.809 L1211.83 681.809 L1211.27 681.809 L1210.71 681.809 L1210.15 681.809 L1209.59 681.809 L1209.03 681.809 L1208.47 681.809 L1207.91 681.809 L1207.35 681.809 L1206.8 681.809 L1206.24 681.809 L1205.68 681.809 L1205.12 681.809 L1204.56 681.809 L1204 681.809 L1203.44 681.809 L1202.88 681.809 L1202.32 681.809 L1201.76 681.809 L1201.2 681.809 L1200.64 681.809 L1200.08 681.809 L1199.52 681.809 L1198.97 681.809 L1198.41 681.809 L1197.85 681.809 L1197.29 681.809 L1196.73 681.809 L1196.17 681.809 L1195.61 681.809 L1195.05 681.809 L1194.49 681.809 L1193.93 681.809 L1193.37 681.809 L1192.81 681.809 L1192.25 681.809 L1191.7 681.809 L1191.14 681.809 L1190.58 681.809 L1190.02 681.809 L1189.46 681.809 L1188.9 681.809 L1188.34 681.809 L1187.78 681.809 L1187.22 681.809 L1186.66 681.809 L1186.1 681.809 L1185.54 681.809 L1184.98 681.809 L1184.43 681.809 L1183.87 681.809 L1183.31 681.809 L1182.75 681.809 L1182.19 681.809 L1181.63 681.809 L1181.07 681.809 L1180.51 681.809 L1179.95 681.809 L1179.39 681.809 L1178.83 681.809 L1178.27 681.809 L1177.71 681.809 L1177.15 681.809 L1176.6 681.809 L1176.04 681.809 L1175.48 681.809 L1174.92 681.809 L1174.36 681.809 L1173.8 681.809 L1173.24 681.809 L1172.68 681.809 L1172.12 681.809 L1171.56 681.809 L1171 681.809 L1170.44 681.809 L1169.88 681.809 L1169.33 681.809 L1168.77 681.809 L1168.21 681.809 L1167.65 681.809 L1167.09 681.809 L1166.53 681.809 L1165.97 681.809 L1165.41 681.809 L1164.85 681.809 L1164.29 681.809 L1163.73 681.809 L1163.17 681.809 L1162.61 681.809 L1162.05 681.809 L1161.5 681.809 L1160.94 681.809 L1160.38 681.809 L1159.82 681.809 L1159.26 681.809 L1158.7 681.809 L1158.14 681.809 L1157.58 681.809 L1157.02 681.809 L1156.46 681.809 L1155.9 681.809 L1155.34 681.809 L1154.78 681.809 L1154.23 681.809 L1153.67 681.809 L1153.11 681.809 L1152.55 681.809 L1151.99 681.809 L1151.43 681.809 L1150.87 681.809 L1150.31 681.809 L1149.75 681.809 L1149.19 681.809 L1148.63 681.809 L1148.07 681.809 L1147.51 681.809 L1146.96 681.809 L1146.4 681.809 L1145.84 681.809 L1145.28 681.809 L1144.72 681.809 L1144.16 681.809 L1143.6 681.809 L1143.04 681.809 L1142.48 681.809 L1141.92 681.809 L1141.36 681.809 L1140.8 681.809 L1140.24 681.809 L1139.68 681.809 L1139.13 681.809 L1138.57 681.809 L1138.01 681.809 L1137.45 681.809 L1136.89 681.809 L1136.33 681.809 L1135.77 681.809 L1135.21 681.809 L1134.65 681.809 L1134.09 681.809 L1133.53 681.809 L1132.97 681.809 L1132.41 681.809 L1131.86 681.809 L1131.3 681.809 L1130.74 681.809 L1130.18 681.809 L1129.62 681.809 L1129.06 681.809 L1128.5 681.809 L1127.94 681.809 L1127.38 681.809 L1126.82 681.809 L1126.26 681.809 L1125.7 681.809 L1125.14 681.809 L1124.59 681.809 L1124.03 681.809 L1123.47 681.809 L1122.91 681.809 L1122.35 681.809 L1121.79 681.809 L1121.23 681.809 L1120.67 681.809 L1120.11 681.809 L1119.55 681.809 L1118.99 681.809 L1118.43 681.809 L1117.87 681.809 L1117.31 681.809 L1116.76 681.809 L1116.2 681.809 L1115.64 681.809 L1115.08 681.809 L1114.52 681.809 L1113.96 681.809 L1113.4 681.809 L1112.84 681.809 L1112.28 681.809 L1111.72 681.809 L1111.16 681.809 L1110.6 681.809 L1110.04 681.809 L1109.49 681.809 L1108.93 681.809 L1108.37 681.809 L1107.81 681.809 L1107.25 681.809 L1106.69 681.809 L1106.13 681.809 L1105.57 681.809 L1105.01 681.809 L1104.45 681.809 L1103.89 681.809 L1103.33 681.809 L1102.77 681.809 L1102.22 681.809 L1101.66 681.809 L1101.1 681.809 L1100.54 681.809 L1099.98 681.809 L1099.42 681.809 L1098.86 681.809 L1098.3 681.809 L1097.74 681.809 L1097.18 681.809 L1096.62 681.809 L1096.06 681.809 L1095.5 681.809 L1094.94 681.809 L1094.39 681.809 L1093.83 681.809 L1093.27 681.809 L1092.71 681.809 L1092.15 681.809 L1091.59 681.809 L1091.03 681.809 L1090.47 681.809 L1089.91 681.809 L1089.35 681.809 L1088.79 681.809 L1088.23 681.809 L1087.67 681.809 L1087.12 681.809 L1086.56 681.809 L1086 681.809 L1085.44 681.809 L1084.88 681.809 L1084.32 681.809 L1083.76 681.809 L1083.2 681.809 L1082.64 681.809 L1082.08 681.809 L1081.52 681.809 L1080.96 681.809 L1080.4 681.809 L1079.85 681.809 L1079.29 681.809 L1078.73 681.809 L1078.17 681.809 L1077.61 681.809 L1077.05 681.809 L1076.49 681.809 L1075.93 681.809 L1075.37 681.809 L1074.81 681.809 L1074.25 681.809 L1073.69 681.809 L1073.13 681.809 L1072.57 681.809 L1072.02 681.809 L1071.46 681.809 L1070.9 681.809 L1070.34 681.809 L1069.78 681.809 L1069.22 681.809 L1068.66 681.809 L1068.1 681.809 L1067.54 681.809 L1066.98 681.809 L1066.42 681.809 L1065.86 681.809 L1065.3 681.809 L1064.75 681.809 L1064.19 681.809 L1063.63 681.809 L1063.07 681.809 L1062.51 681.809 L1061.95 681.809 L1061.39 681.809 L1060.83 681.809 L1060.27 681.809 L1059.71 681.809 L1059.15 681.809 L1058.59 681.809 L1058.03 681.809 L1057.48 681.809 L1056.92 681.809 L1056.36 681.809 L1055.8 681.809 L1055.24 681.809 L1054.68 681.809 L1054.12 681.809 L1053.56 681.809 L1053 681.809 L1052.44 681.809 L1051.88 681.809 L1051.32 681.809 L1050.76 681.809 L1050.2 681.809 L1049.65 681.809 L1049.09 681.809 L1048.53 681.809 L1047.97 681.809 L1047.41 681.809 L1046.85 681.809 L1046.29 681.809 L1045.73 681.809 L1045.17 681.809 L1044.61 681.809 L1044.05 681.809 L1043.49 681.809 L1042.93 681.809 L1042.38 681.809 L1041.82 681.809 L1041.26 681.809 L1040.7 681.809 L1040.14 681.809 L1039.58 681.809 L1039.02 681.809 L1038.46 681.809 L1037.9 681.809 L1037.34 681.809 L1036.78 681.809 L1036.22 681.809 L1035.66 681.809 L1035.1 681.809 L1034.55 681.809 L1033.99 681.809 L1033.43 681.809 L1032.87 681.809 L1032.31 681.809 L1031.75 681.809 L1031.19 681.809 L1030.63 681.809 L1030.07 681.809 L1029.51 681.809 L1028.95 681.809 L1028.39 681.809 L1027.83 681.809 L1027.28 681.809 L1026.72 681.809 L1026.16 681.809 L1025.6 681.809 L1025.04 681.809 L1024.48 681.809 L1023.92 681.809 L1023.36 681.809 L1022.8 681.809 L1022.24 681.809 L1021.68 681.809 L1021.12 681.809 L1020.56 681.809 L1020.01 681.809 L1019.45 681.809 L1018.89 681.809 L1018.33 681.809 L1017.77 681.809 L1017.21 681.809 L1016.65 681.809 L1016.09 681.809 L1015.53 681.809 L1014.97 681.809 L1014.41 681.809 L1013.85 681.809 L1013.29 681.809 L1012.73 681.809 L1012.18 681.809 L1011.62 681.809 L1011.06 681.809 L1010.5 681.809 L1009.94 681.809 L1009.38 681.809 L1008.82 681.809 L1008.26 681.809 L1007.7 681.809 L1007.14 681.809 L1006.58 681.809 L1006.02 681.809 L1005.46 681.809 L1004.91 681.809 L1004.35 681.809 L1003.79 681.809 L1003.23 681.809 L1002.67 681.809 L1002.11 681.809 L1001.55 681.809 L1000.99 681.809 L1000.43 681.809 L999.872 681.809 L999.313 681.809 L998.754 681.809 L998.194 681.809 L997.635 681.809 L997.076 681.809 L996.517 681.809 L995.957 681.809 L995.398 681.809 L994.839 681.809 L994.28 681.809 L993.72 681.809 L993.161 681.809 L992.602 681.809 L992.043 681.809 L991.483 681.809 L990.924 681.809 L990.365 681.809 L989.806 681.809 L989.246 681.809 L988.687 681.809 L988.128 681.809 L987.569 681.809 L987.009 681.809 L986.45 681.809 L985.891 681.809 L985.332 681.809 L984.772 681.809 L984.213 681.809 L983.654 681.809 L983.095 681.809 L982.535 681.809 L981.976 681.809 L981.417 681.809 L980.858 681.809 L980.298 681.809 L979.739 681.809 L979.18 681.809 L978.621 681.809 L978.061 681.809 L977.502 681.809 L976.943 681.809 L976.384 681.809 L975.824 681.809 L975.265 681.809 L974.706 681.809 L974.147 681.809 L973.587 681.809 L973.028 681.809 L972.469 681.809 L971.91 681.809 L971.35 681.809 L970.791 681.809 L970.232 681.809 L969.673 681.809 L969.113 681.809 L968.554 681.809 L967.995 681.809 L967.436 681.809 L966.876 681.809 L966.317 681.809 L965.758 681.809 L965.199 681.809 L964.639 681.809 L964.08 681.809 L963.521 681.809 L962.962 681.809 L962.402 681.809 L961.843 681.809 L961.284 681.809 L960.725 681.809 L960.165 681.809 L959.606 681.809 L959.047 681.809 L958.488 681.809 L957.928 681.809 L957.369 681.809 L956.81 681.809 L956.251 681.809 L955.691 681.809 L955.132 681.809 L954.573 681.809 L954.014 681.809 L953.454 681.809 L952.895 681.809 L952.336 681.809 L951.777 681.809 L951.217 681.809 L950.658 681.809 L950.099 681.809 L949.54 681.809 L948.98 681.809 L948.421 681.809 L947.862 681.809 L947.303 681.809 L946.743 681.809 L946.184 681.809 L945.625 681.809 L945.066 681.809 L944.506 681.809 L943.947 681.809 L943.388 681.809 L942.829 681.809 L942.269 681.809 L941.71 681.809 L941.151 681.809 L940.592 681.809 L940.032 681.809 L939.473 681.809 L938.914 681.809 L938.355 681.809 L937.795 681.809 L937.236 681.809 L936.677 681.809 L936.118 681.809 L935.558 681.809 L934.999 681.809 L934.44 681.809 L933.881 681.809 L933.321 681.809 L932.762 681.809 L932.203 681.809 L931.644 681.809 L931.084 681.809 L930.525 681.809 L929.966 681.809 L929.406 681.809 L928.847 681.809 L928.288 681.809 L927.729 681.809 L927.169 681.809 L926.61 681.809 L926.051 681.809 L925.492 681.809 L924.932 681.809 L924.373 681.809 L923.814 681.809 L923.255 681.809 L922.695 681.809 L922.136 681.809 L921.577 681.809 L921.018 681.809 L920.458 681.809 L919.899 681.809 L919.34 681.809 L918.781 681.809 L918.221 681.809 L917.662 681.809 L917.103 681.809 L916.544 681.809 L915.984 681.809 L915.425 681.809 L914.866 681.809 L914.307 681.809 L913.747 681.809 L913.188 681.809 L912.629 681.809 L912.07 681.809 L911.51 681.809 L910.951 681.809 L910.392 681.809 L909.833 681.809 L909.273 681.809 L908.714 681.809 L908.155 681.809 L907.596 681.809 L907.036 681.809 L906.477 681.809 L905.918 681.809 L905.359 681.809 L904.799 681.809 L904.24 681.809 L903.681 681.809 L903.122 681.809 L902.562 681.809 L902.003 681.809 L901.444 681.809 L900.885 681.809 L900.325 681.809 L899.766 681.809 L899.207 681.809 L898.648 681.809 L898.088 681.809 L897.529 681.809 L896.97 681.809 L896.411 681.809 L895.851 681.809 L895.292 681.809 L894.733 681.809 L894.174 681.809 L893.614 681.809 L893.055 681.809 L892.496 681.809 L891.937 681.809 L891.377 681.809 L890.818 681.809 L890.259 681.809 L889.7 681.809 L889.14 681.809 L888.581 681.809 L888.022 681.809 L887.463 681.809 L886.903 681.809 L886.344 681.809 L885.785 681.809 L885.226 681.809 L884.666 681.809 L884.107 681.809 L883.548 681.809 L882.989 681.809 L882.429 681.809 L881.87 681.809 L881.311 681.809 L880.752 681.809 L880.192 681.809 L879.633 681.809 L879.074 681.809 L878.515 681.809 L877.955 681.809 L877.396 681.809 L876.837 681.809 L876.278 681.809 L875.718 681.809 L875.159 681.809 L874.6 681.809 L874.041 681.809 L873.481 681.809 L872.922 681.809 L872.363 681.809 L871.804 681.809 L871.244 681.809 L870.685 681.809 L870.126 681.809 L869.567 681.809 L869.007 681.809 L868.448 681.809 L867.889 681.809 L867.33 681.809 L866.77 681.809 L866.211 681.809 L865.652 681.809 L865.093 681.809 L864.533 681.809 L863.974 681.809 L863.415 681.809 L862.856 681.809 L862.296 681.809 L861.737 681.809 L861.178 681.809 L860.619 681.809 L860.059 681.809 L859.5 681.809 L858.941 681.809 L858.382 681.809 L857.822 681.809 L857.263 681.809 L856.704 681.809 L856.145 681.809 L855.585 681.809 L855.026 681.809 L854.467 681.809 L853.908 681.809 L853.348 681.809 L852.789 681.809 L852.23 681.809 L851.671 681.809 L851.111 681.809 L850.552 681.809 L849.993 681.809 L849.434 681.809 L848.874 681.809 L848.315 681.809 L847.756 681.809 L847.197 681.809 L846.637 681.809 L846.078 681.809 L845.519 681.809 L844.96 681.809 L844.4 681.809 L843.841 681.809 L843.282 681.809 L842.723 681.809 L842.163 681.809 L841.604 681.809 L841.045 681.809 L840.486 681.809 L839.926 681.809 L839.367 681.809 L838.808 681.809 L838.249 681.809 L837.689 681.809 L837.13 681.809 L836.571 681.809 L836.012 681.809 L835.452 681.809 L834.893 681.809 L834.334 681.809 L833.775 681.809 L833.215 681.809 L832.656 681.809 L832.097 681.809 L831.538 681.809 L830.978 681.809 L830.419 681.809 L829.86 681.809 L829.301 681.809 L828.741 681.809 L828.182 681.809 L827.623 681.809 L827.064 681.809 L826.504 681.809 L825.945 681.809 L825.386 681.809 L824.827 681.809 L824.267 681.809 L823.708 681.809 L823.149 681.809 L822.59 681.809 L822.03 681.809 L821.471 681.809 L820.912 681.809 L820.353 681.809 L819.793 681.809 L819.234 681.809 L818.675 681.809 L818.116 681.809 L817.556 681.809 L816.997 681.809 L816.438 681.809 L815.879 681.809 L815.319 681.809 L814.76 681.809 L814.201 681.809 L813.642 681.809 L813.082 681.809 L812.523 681.809 L811.964 681.809 L811.405 681.809 L810.845 681.809 L810.286 681.809 L809.727 681.809 L809.168 681.809 L808.608 681.809 L808.049 681.809 L807.49 681.809 L806.931 681.809 L806.371 681.809 L805.812 681.809 L805.253 681.809 L804.693 681.809 L804.134 681.809 L803.575 681.809 L803.016 681.809 L802.456 681.809 L801.897 681.809 L801.338 681.809 L800.779 681.809 L800.219 681.809 L799.66 681.809 L799.101 681.809 L798.542 681.809 L797.982 681.809 L797.423 681.809 L796.864 681.809 L796.305 681.809 L795.745 681.809 L795.186 681.809 L794.627 681.809 L794.068 681.809 L793.508 681.809 L792.949 681.809 L792.39 681.809 L791.831 681.809 L791.271 681.809 L790.712 681.809 L790.153 681.809 L789.594 681.809 L789.034 681.809 L788.475 681.809 L787.916 681.809 L787.357 681.809 L786.797 681.809 L786.238 681.809 L785.679 681.809 L785.12 681.809 L784.56 681.809 L784.001 681.809 L783.442 681.809 L782.883 681.809 L782.323 681.809 L781.764 681.809 L781.205 681.809 L780.646 681.809 L780.086 681.809 L779.527 681.809 L778.968 681.809 L778.409 681.809 L777.849 681.809 L777.29 681.809 L776.731 681.809 L776.172 681.809 L775.612 681.809 L775.053 681.809 L774.494 681.809 L773.935 681.809 L773.375 681.809 L772.816 681.809 L772.257 681.809 L771.698 681.809 L771.138 681.809 L770.579 681.809 L770.02 681.809 L769.461 681.809 L768.901 681.809 L768.342 681.809 L767.783 681.809 L767.224 681.809 L766.664 681.809 L766.105 681.809 L765.546 681.809 L764.987 681.809 L764.427 681.809 L763.868 681.809 L763.309 681.809 L762.75 681.809 L762.19 681.809 L761.631 681.809 L761.072 681.809 L760.513 681.809 L759.953 681.809 L759.394 681.809 L758.835 681.809 L758.276 681.809 L757.716 681.809 L757.157 681.809 L756.598 681.809 L756.039 681.809 L755.479 681.809 L754.92 681.809 L754.361 681.809 L753.802 681.809 L753.242 681.809 L752.683 681.809 L752.124 681.809 L751.565 681.809 L751.005 681.809 L750.446 681.809 L749.887 681.809 L749.328 681.809 L748.768 681.809 L748.209 681.809 L747.65 681.809 L747.091 681.809 L746.531 681.809 L745.972 681.809 L745.413 681.809 L744.854 681.809 L744.294 681.809 L743.735 681.809 L743.176 681.809 L742.617 681.809 L742.057 681.809 L741.498 681.809 L740.939 681.809 L740.38 681.809 L739.82 681.809 L739.261 681.809 L738.702 681.809 L738.143 681.809 L737.583 681.809 L737.024 681.809 L736.465 681.809 L735.906 681.809 L735.346 681.809 L734.787 681.809 L734.228 681.809 L733.669 681.809 L733.109 681.809 L732.55 681.809 L731.991 681.809 L731.432 681.809 L730.872 681.809 L730.313 681.809 L729.754 681.809 L729.195 681.809 L728.635 681.809 L728.076 681.809 L727.517 681.809 L726.958 681.809 L726.398 681.809 L725.839 681.809 L725.28 681.809 L724.721 681.809 L724.161 681.809 L723.602 681.809 L723.043 681.809 L722.484 681.809 L721.924 681.809 L721.365 681.809 L720.806 681.809 L720.247 681.809  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip203)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,683.018 720.806,683.018 721.365,683.018 721.924,683.018 722.484,683.018 723.043,683.018 723.602,683.018 724.161,683.018 724.721,683.018 725.28,683.018 725.839,683.018 726.398,683.018 726.958,683.018 727.517,683.018 728.076,683.018 728.635,683.018 729.195,683.018 729.754,683.018 730.313,683.018 730.872,683.018 731.432,683.018 731.991,683.018 732.55,683.018 733.109,683.018 733.669,683.018 734.228,683.018 734.787,683.018 735.346,683.018 735.906,683.018 736.465,683.018 737.024,683.018 737.583,683.018 738.143,683.018 738.702,683.018 739.261,683.018 739.82,683.018 740.38,683.018 740.939,683.018 741.498,683.018 742.057,683.018 742.617,683.018 743.176,683.018 743.735,683.018 744.294,683.018 744.854,683.018 745.413,683.018 745.972,683.018 746.531,683.018 747.091,683.018 747.65,683.018 748.209,683.018 748.768,683.018 749.328,683.018 749.887,683.018 750.446,683.018 751.005,683.018 751.565,683.018 752.124,683.018 752.683,683.018 753.242,683.018 753.802,683.018 754.361,683.018 754.92,683.018 755.479,683.018 756.039,683.018 756.598,683.018 757.157,683.018 757.716,683.018 758.276,683.018 758.835,683.018 759.394,683.018 759.953,683.018 760.513,683.018 761.072,683.018 761.631,683.018 762.19,683.018 762.75,683.018 763.309,683.018 763.868,683.018 764.427,683.018 764.987,683.018 765.546,683.018 766.105,683.018 766.664,683.018 767.224,683.018 767.783,683.018 768.342,683.018 768.901,683.018 769.461,683.018 770.02,683.018 770.579,683.018 771.138,683.018 771.698,683.018 772.257,683.018 772.816,683.018 773.375,683.018 773.935,683.018 774.494,683.018 775.053,683.018 775.612,683.018 776.172,683.018 776.731,683.018 777.29,683.018 777.849,683.018 778.409,683.018 778.968,683.018 779.527,683.018 780.086,683.018 780.646,683.018 781.205,683.018 781.764,683.018 782.323,683.018 782.883,683.018 783.442,683.018 784.001,683.018 784.56,683.018 785.12,683.018 785.679,683.018 786.238,683.018 786.797,683.018 787.357,683.018 787.916,683.018 788.475,683.018 789.034,683.018 789.594,683.018 790.153,683.018 790.712,683.018 791.271,683.018 791.831,683.018 792.39,683.018 792.949,683.018 793.508,683.018 794.068,683.018 794.627,683.018 795.186,683.018 795.745,683.018 796.305,683.018 796.864,683.018 797.423,683.018 797.982,683.018 798.542,683.018 799.101,683.018 799.66,683.018 800.219,683.018 800.779,683.018 801.338,683.018 801.897,683.018 802.456,683.018 803.016,683.018 803.575,683.018 804.134,683.018 804.693,683.018 805.253,683.018 805.812,683.018 806.371,683.018 806.931,683.018 807.49,683.018 808.049,683.018 808.608,683.018 809.168,683.018 809.727,683.018 810.286,683.018 810.845,683.018 811.405,683.018 811.964,683.018 812.523,683.018 813.082,683.018 813.642,683.018 814.201,683.018 814.76,683.018 815.319,683.018 815.879,683.018 816.438,683.018 816.997,683.018 817.556,683.018 818.116,683.018 818.675,683.018 819.234,683.018 819.793,683.018 820.353,683.018 820.912,683.018 821.471,683.018 822.03,683.018 822.59,683.018 823.149,683.018 823.708,683.018 824.267,683.018 824.827,683.018 825.386,683.018 825.945,683.018 826.504,683.018 827.064,683.018 827.623,683.018 828.182,683.018 828.741,683.018 829.301,683.018 829.86,683.018 830.419,683.018 830.978,683.018 831.538,683.018 832.097,683.018 832.656,683.018 833.215,683.018 833.775,683.018 834.334,683.018 834.893,683.018 835.452,683.018 836.012,683.018 836.571,683.018 837.13,683.018 837.689,683.018 838.249,683.018 838.808,683.018 839.367,683.018 839.926,683.018 840.486,683.018 841.045,683.018 841.604,683.018 842.163,683.018 842.723,683.018 843.282,683.018 843.841,683.018 844.4,683.018 844.96,683.018 845.519,683.018 846.078,683.018 846.637,683.018 847.197,683.018 847.756,683.018 848.315,683.018 848.874,683.018 849.434,683.018 849.993,683.018 850.552,683.018 851.111,683.018 851.671,683.018 852.23,683.018 852.789,683.018 853.348,683.018 853.908,683.018 854.467,683.018 855.026,683.018 855.585,683.018 856.145,683.018 856.704,683.018 857.263,683.018 857.822,683.018 858.382,683.018 858.941,683.018 859.5,683.018 860.059,683.018 860.619,683.018 861.178,683.018 861.737,683.018 862.296,683.018 862.856,683.018 863.415,683.018 863.974,683.018 864.533,683.018 865.093,683.018 865.652,683.018 866.211,683.018 866.77,683.018 867.33,683.018 867.889,683.018 868.448,683.018 869.007,683.018 869.567,683.018 870.126,683.018 870.685,683.018 871.244,683.018 871.804,683.018 872.363,683.018 872.922,683.018 873.481,683.018 874.041,683.018 874.6,683.018 875.159,683.018 875.718,683.018 876.278,683.018 876.837,683.018 877.396,683.018 877.955,683.018 878.515,683.018 879.074,683.018 879.633,683.018 880.192,683.018 880.752,683.018 881.311,683.018 881.87,683.018 882.429,683.018 882.989,683.018 883.548,683.018 884.107,683.018 884.666,683.018 885.226,683.018 885.785,683.018 886.344,683.018 886.903,683.018 887.463,683.018 888.022,683.018 888.581,683.018 889.14,683.018 889.7,683.018 890.259,683.018 890.818,683.018 891.377,683.018 891.937,683.018 892.496,683.018 893.055,683.018 893.614,683.018 894.174,683.018 894.733,683.018 895.292,683.018 895.851,683.018 896.411,683.018 896.97,683.018 897.529,683.018 898.088,683.018 898.648,683.018 899.207,683.018 899.766,683.018 900.325,683.018 900.885,683.018 901.444,683.018 902.003,683.018 902.562,683.018 903.122,683.018 903.681,683.018 904.24,683.018 904.799,683.018 905.359,683.018 905.918,683.018 906.477,683.018 907.036,683.018 907.596,683.018 908.155,683.018 908.714,683.018 909.273,683.018 909.833,683.018 910.392,683.018 910.951,683.018 911.51,683.018 912.07,683.018 912.629,683.018 913.188,683.018 913.747,683.018 914.307,683.018 914.866,683.018 915.425,683.018 915.984,683.018 916.544,683.018 917.103,683.018 917.662,683.018 918.221,683.018 918.781,683.018 919.34,683.018 919.899,683.018 920.458,683.018 921.018,683.018 921.577,683.018 922.136,683.018 922.695,683.018 923.255,683.018 923.814,683.018 924.373,683.018 924.932,683.018 925.492,683.018 926.051,683.018 926.61,683.018 927.169,683.018 927.729,683.018 928.288,683.018 928.847,683.018 929.406,683.018 929.966,683.018 930.525,683.018 931.084,683.018 931.644,683.018 932.203,683.018 932.762,683.018 933.321,683.018 933.881,683.018 934.44,683.018 934.999,683.018 935.558,683.018 936.118,683.018 936.677,683.018 937.236,683.018 937.795,683.018 938.355,683.018 938.914,683.018 939.473,683.018 940.032,683.018 940.592,683.018 941.151,683.018 941.71,683.018 942.269,683.018 942.829,683.018 943.388,683.018 943.947,683.018 944.506,683.018 945.066,683.018 945.625,683.018 946.184,683.018 946.743,683.018 947.303,683.018 947.862,683.018 948.421,683.018 948.98,683.018 949.54,683.018 950.099,683.018 950.658,683.018 951.217,683.018 951.777,683.018 952.336,683.018 952.895,683.018 953.454,683.018 954.014,683.018 954.573,683.018 955.132,683.018 955.691,683.018 956.251,683.018 956.81,683.018 957.369,683.018 957.928,683.018 958.488,683.018 959.047,683.018 959.606,683.018 960.165,683.018 960.725,683.018 961.284,683.018 961.843,683.018 962.402,683.018 962.962,683.018 963.521,683.018 964.08,683.018 964.639,683.018 965.199,683.018 965.758,683.018 966.317,683.018 966.876,683.018 967.436,683.018 967.995,683.018 968.554,683.018 969.113,683.018 969.673,683.018 970.232,683.018 970.791,683.018 971.35,683.018 971.91,683.018 972.469,683.018 973.028,683.018 973.587,683.018 974.147,683.018 974.706,683.018 975.265,683.018 975.824,683.018 976.384,683.018 976.943,683.018 977.502,683.018 978.061,683.018 978.621,683.018 979.18,683.018 979.739,683.018 980.298,683.018 980.858,683.018 981.417,683.018 981.976,683.018 982.535,683.018 983.095,683.018 983.654,683.018 984.213,683.018 984.772,683.018 985.332,683.018 985.891,683.018 986.45,683.018 987.009,683.018 987.569,683.018 988.128,683.018 988.687,683.018 989.246,683.018 989.806,683.018 990.365,683.018 990.924,683.018 991.483,683.018 992.043,683.018 992.602,683.018 993.161,683.018 993.72,683.018 994.28,683.018 994.839,683.018 995.398,683.018 995.957,683.018 996.517,683.018 997.076,683.018 997.635,683.018 998.194,683.018 998.754,683.018 999.313,683.018 999.872,683.018 1000.43,683.018 1000.99,683.018 1001.55,683.018 1002.11,683.018 1002.67,683.018 1003.23,683.018 1003.79,683.018 1004.35,683.018 1004.91,683.018 1005.46,683.018 1006.02,683.018 1006.58,683.018 1007.14,683.018 1007.7,683.018 1008.26,683.018 1008.82,683.018 1009.38,683.018 1009.94,683.018 1010.5,683.018 1011.06,683.018 1011.62,683.018 1012.18,683.018 1012.73,683.018 1013.29,683.018 1013.85,683.018 1014.41,683.018 1014.97,683.018 1015.53,683.018 1016.09,683.018 1016.65,683.018 1017.21,683.018 1017.77,683.018 1018.33,683.018 1018.89,683.018 1019.45,683.018 1020.01,683.018 1020.56,683.018 1021.12,683.018 1021.68,683.018 1022.24,683.018 1022.8,683.018 1023.36,683.018 1023.92,683.018 1024.48,683.018 1025.04,683.018 1025.6,683.018 1026.16,683.018 1026.72,683.018 1027.28,683.018 1027.83,683.018 1028.39,683.018 1028.95,683.018 1029.51,683.018 1030.07,683.018 1030.63,683.018 1031.19,683.018 1031.75,683.018 1032.31,683.018 1032.87,683.018 1033.43,683.018 1033.99,683.018 1034.55,683.018 1035.1,683.018 1035.66,683.018 1036.22,683.018 1036.78,683.018 1037.34,683.018 1037.9,683.018 1038.46,683.018 1039.02,683.018 1039.58,683.018 1040.14,683.018 1040.7,683.018 1041.26,683.018 1041.82,683.018 1042.38,683.018 1042.93,683.018 1043.49,683.018 1044.05,683.018 1044.61,683.018 1045.17,683.018 1045.73,683.018 1046.29,683.018 1046.85,683.018 1047.41,683.018 1047.97,683.018 1048.53,683.018 1049.09,683.018 1049.65,683.018 1050.2,683.018 1050.76,683.018 1051.32,683.018 1051.88,683.018 1052.44,683.018 1053,683.018 1053.56,683.018 1054.12,683.018 1054.68,683.018 1055.24,683.018 1055.8,683.018 1056.36,683.018 1056.92,683.018 1057.48,683.018 1058.03,683.018 1058.59,683.018 1059.15,683.018 1059.71,683.018 1060.27,683.018 1060.83,683.018 1061.39,683.018 1061.95,683.018 1062.51,683.018 1063.07,683.018 1063.63,683.018 1064.19,683.018 1064.75,683.018 1065.3,683.018 1065.86,683.018 1066.42,683.018 1066.98,683.018 1067.54,683.018 1068.1,683.018 1068.66,683.018 1069.22,683.018 1069.78,683.018 1070.34,683.018 1070.9,683.018 1071.46,683.018 1072.02,683.018 1072.57,683.018 1073.13,683.018 1073.69,683.018 1074.25,683.018 1074.81,683.018 1075.37,683.018 1075.93,683.018 1076.49,683.018 1077.05,683.018 1077.61,683.018 1078.17,683.018 1078.73,683.018 1079.29,683.018 1079.85,683.018 1080.4,683.018 1080.96,683.018 1081.52,683.018 1082.08,683.018 1082.64,683.018 1083.2,683.018 1083.76,683.018 1084.32,683.018 1084.88,683.018 1085.44,683.018 1086,683.018 1086.56,683.018 1087.12,683.018 1087.67,683.018 1088.23,683.018 1088.79,683.018 1089.35,683.018 1089.91,683.018 1090.47,683.018 1091.03,683.018 1091.59,683.018 1092.15,683.018 1092.71,683.018 1093.27,683.018 1093.83,683.018 1094.39,683.018 1094.94,683.018 1095.5,683.018 1096.06,683.018 1096.62,683.018 1097.18,683.018 1097.74,683.018 1098.3,683.018 1098.86,683.018 1099.42,683.018 1099.98,683.018 1100.54,683.018 1101.1,683.018 1101.66,683.018 1102.22,683.018 1102.77,683.018 1103.33,683.018 1103.89,683.018 1104.45,683.018 1105.01,683.018 1105.57,683.018 1106.13,683.018 1106.69,683.018 1107.25,683.018 1107.81,683.018 1108.37,683.018 1108.93,683.018 1109.49,683.018 1110.04,683.018 1110.6,683.018 1111.16,683.018 1111.72,683.018 1112.28,683.018 1112.84,683.018 1113.4,683.018 1113.96,683.018 1114.52,683.018 1115.08,683.018 1115.64,683.018 1116.2,683.018 1116.76,683.018 1117.31,683.018 1117.87,683.018 1118.43,683.018 1118.99,683.018 1119.55,683.018 1120.11,683.018 1120.67,683.018 1121.23,683.018 1121.79,683.018 1122.35,683.018 1122.91,683.018 1123.47,683.018 1124.03,683.018 1124.59,683.018 1125.14,683.018 1125.7,683.018 1126.26,683.018 1126.82,683.018 1127.38,683.018 1127.94,683.018 1128.5,683.018 1129.06,683.018 1129.62,683.018 1130.18,683.018 1130.74,683.018 1131.3,683.018 1131.86,683.018 1132.41,683.018 1132.97,683.018 1133.53,683.018 1134.09,683.018 1134.65,683.018 1135.21,683.018 1135.77,683.018 1136.33,683.018 1136.89,683.018 1137.45,683.018 1138.01,683.018 1138.57,683.018 1139.13,683.018 1139.68,683.018 1140.24,683.018 1140.8,683.018 1141.36,683.018 1141.92,683.018 1142.48,683.018 1143.04,683.018 1143.6,683.018 1144.16,683.018 1144.72,683.018 1145.28,683.018 1145.84,683.018 1146.4,683.018 1146.96,683.018 1147.51,683.018 1148.07,683.018 1148.63,683.018 1149.19,683.018 1149.75,683.018 1150.31,683.018 1150.87,683.018 1151.43,683.018 1151.99,683.018 1152.55,683.018 1153.11,683.018 1153.67,683.018 1154.23,683.018 1154.78,683.018 1155.34,683.018 1155.9,683.018 1156.46,683.018 1157.02,683.018 1157.58,683.018 1158.14,683.018 1158.7,683.018 1159.26,683.018 1159.82,683.018 1160.38,683.018 1160.94,683.018 1161.5,683.018 1162.05,683.018 1162.61,683.018 1163.17,683.018 1163.73,683.018 1164.29,683.018 1164.85,683.018 1165.41,683.018 1165.97,683.018 1166.53,683.018 1167.09,683.018 1167.65,683.018 1168.21,683.018 1168.77,683.018 1169.33,683.018 1169.88,683.018 1170.44,683.018 1171,683.018 1171.56,683.018 1172.12,683.018 1172.68,683.018 1173.24,683.018 1173.8,683.018 1174.36,683.018 1174.92,683.018 1175.48,683.018 1176.04,683.018 1176.6,683.018 1177.15,683.018 1177.71,683.018 1178.27,683.018 1178.83,683.018 1179.39,683.018 1179.95,683.018 1180.51,683.018 1181.07,683.018 1181.63,683.018 1182.19,683.018 1182.75,683.018 1183.31,683.018 1183.87,683.018 1184.43,683.018 1184.98,683.018 1185.54,683.018 1186.1,683.018 1186.66,683.018 1187.22,683.018 1187.78,683.018 1188.34,683.018 1188.9,683.018 1189.46,683.018 1190.02,683.018 1190.58,683.018 1191.14,683.018 1191.7,683.018 1192.25,683.018 1192.81,683.018 1193.37,683.018 1193.93,683.018 1194.49,683.018 1195.05,683.018 1195.61,683.018 1196.17,683.018 1196.73,683.018 1197.29,683.018 1197.85,683.018 1198.41,683.018 1198.97,683.018 1199.52,683.018 1200.08,683.018 1200.64,683.018 1201.2,683.018 1201.76,683.018 1202.32,683.018 1202.88,683.018 1203.44,683.018 1204,683.018 1204.56,683.018 1205.12,683.018 1205.68,683.018 1206.24,683.018 1206.8,683.018 1207.35,683.018 1207.91,683.018 1208.47,683.018 1209.03,683.018 1209.59,683.018 1210.15,683.018 1210.71,683.018 1211.27,683.018 1211.83,683.018 1212.39,683.018 1212.95,683.018 1213.51,683.018 1214.07,683.018 1214.62,683.018 1215.18,683.018 1215.74,683.018 1216.3,683.018 1216.86,683.018 1217.42,683.018 1217.98,683.018 1218.54,683.018 1219.1,683.018 1219.66,683.018 1220.22,683.018 1220.78,683.018 1221.34,683.018 1221.89,683.018 1222.45,683.018 1223.01,683.018 1223.57,683.018 1224.13,683.018 1224.69,683.018 1225.25,683.018 1225.81,683.018 1226.37,683.018 1226.93,683.018 1227.49,683.018 1228.05,683.018 1228.61,683.018 1229.17,683.018 1229.72,683.018 1230.28,683.018 1230.84,683.018 1231.4,683.018 1231.96,683.018 1232.52,683.018 1233.08,683.018 1233.64,683.018 1234.2,683.018 1234.76,683.018 1235.32,683.018 1235.88,683.018 1236.44,683.018 1236.99,683.018 1237.55,683.018 1238.11,683.018 1238.67,683.018 1239.23,683.018 1239.79,683.018 1240.35,683.018 1240.91,683.018 1241.47,683.018 1242.03,683.018 1242.59,683.018 1243.15,683.018 1243.71,683.018 1244.26,683.018 1244.82,683.018 1245.38,683.018 1245.94,683.018 1246.5,683.018 1247.06,683.018 1247.62,683.018 1248.18,683.018 1248.74,683.018 1249.3,683.018 1249.86,683.018 1250.42,683.018 1250.98,683.018 1251.54,683.018 1252.09,683.018 1252.65,683.018 1253.21,683.018 1253.77,683.018 1254.33,683.018 1254.89,683.018 1255.45,683.018 1256.01,683.018 1256.57,683.018 1257.13,683.018 1257.69,683.018 1258.25,683.018 1258.81,683.018 1259.36,683.018 1259.92,683.018 1260.48,683.018 1261.04,683.018 1261.6,683.018 1262.16,683.018 1262.72,683.018 1263.28,683.018 1263.84,683.018 1264.4,683.018 1264.96,683.018 1265.52,683.018 1266.08,683.018 1266.63,683.018 1267.19,683.018 1267.75,683.018 1268.31,683.018 1268.87,683.018 1269.43,683.018 1269.99,683.018 1270.55,683.018 1271.11,683.018 1271.67,683.018 1272.23,683.018 1272.79,683.018 1273.35,683.018 1273.91,683.018 1274.46,683.018 1275.02,683.018 1275.58,683.018 1276.14,683.018 1276.7,683.018 1277.26,683.018 1277.82,683.018 1278.38,683.018 1278.94,683.018 1279.5,683.018 1280.06,683.018 1280.62,683.018 1281.18,683.018 1281.73,683.018 1282.29,683.018 1282.85,683.018 1283.41,683.018 1283.97,683.018 1284.53,683.018 1285.09,683.018 1285.65,683.018 1286.21,683.018 1286.77,683.018 1287.33,683.018 1287.89,683.018 1288.45,683.018 1289,683.018 1289.56,683.018 1290.12,683.018 1290.68,683.018 1291.24,683.018 1291.8,683.018 1292.36,683.018 1292.92,683.018 1293.48,683.018 1294.04,683.018 1294.6,683.018 1295.16,683.018 1295.72,683.018 1296.28,683.018 1296.83,683.018 1297.39,683.018 1297.95,683.018 1298.51,683.018 1299.07,683.018 1299.63,683.018 1300.19,683.018 1300.75,683.018 1301.31,683.018 1301.87,683.018 1302.43,683.018 1302.99,683.018 1303.55,683.018 1304.1,683.018 1304.66,683.018 1305.22,683.018 1305.78,683.018 1306.34,683.018 1306.9,683.018 1307.46,683.018 1308.02,683.018 1308.58,683.018 1309.14,683.018 1309.7,683.018 1310.26,683.018 1310.82,683.018 1311.38,683.018 1311.93,683.018 1312.49,683.018 1313.05,683.018 1313.61,683.018 1314.17,683.018 1314.73,683.018 1315.29,683.018 1315.85,683.018 1316.41,683.018 1316.97,683.018 1317.53,683.018 1318.09,683.018 1318.65,683.018 1319.2,683.018 1319.76,683.018 1320.32,683.018 1320.88,683.018 1321.44,683.018 1322,683.018 1322.56,683.018 1323.12,683.018 1323.68,683.018 1324.24,683.018 1324.8,683.018 1325.36,683.018 1325.92,683.018 1326.47,683.018 1327.03,683.018 1327.59,683.018 1328.15,683.018 1328.71,683.018 1329.27,683.018 1329.83,683.018 1330.39,683.018 1330.95,683.018 1331.51,683.018 1332.07,683.018 1332.63,683.018 1333.19,683.018 1333.75,683.018 1334.3,683.018 1334.86,683.018 1335.42,683.018 1335.98,683.018 1336.54,683.018 1337.1,683.018 1337.66,683.018 1338.22,683.018 1338.78,683.018 1339.34,683.018 1339.9,683.018 1340.46,683.018 1341.02,683.018 1341.57,683.018 1342.13,683.018 1342.69,683.018 1343.25,683.018 1343.81,683.018 1344.37,683.018 1344.93,683.018 1345.49,683.018 1346.05,683.018 1346.61,683.018 1347.17,683.018 1347.73,683.018 1348.29,683.018 1348.84,683.018 1349.4,683.018 1349.96,683.018 1350.52,683.018 1351.08,683.018 1351.64,683.018 1352.2,683.018 1352.76,683.018 1353.32,683.018 1353.88,683.018 1354.44,683.018 1355,683.018 1355.56,683.018 1356.12,683.018 1356.67,683.018 1357.23,683.018 1357.79,683.018 1358.35,683.018 1358.91,683.018 1359.47,683.018 1360.03,683.018 1360.59,683.018 1361.15,683.018 1361.71,683.018 1362.27,683.018 1362.83,683.018 1363.39,683.018 1363.94,683.018 1364.5,683.018 1365.06,683.018 1365.62,683.018 1366.18,683.018 1366.74,683.018 1367.3,683.018 1367.86,683.018 1368.42,683.018 1368.98,683.018 1369.54,683.018 1370.1,683.018 1370.66,683.018 1371.21,683.018 1371.77,683.018 1372.33,683.018 1372.89,683.018 1373.45,683.018 1374.01,683.018 1374.57,683.018 1375.13,683.018 1375.69,683.018 1376.25,683.018 1376.81,683.018 1377.37,683.018 1377.93,683.018 1378.49,683.018 1379.04,683.018 1379.6,683.018 1380.16,683.018 1380.72,683.018 1381.28,683.018 1381.84,683.018 1382.4,683.018 1382.96,683.018 1383.52,683.018 1384.08,683.018 1384.64,683.018 1385.2,683.018 1385.76,683.018 1386.31,683.018 1386.87,683.018 1387.43,683.018 1387.99,683.018 1388.55,683.018 1389.11,683.018 1389.67,683.018 1390.23,683.018 1390.79,683.018 1391.35,683.018 1391.91,683.018 1392.47,683.018 1393.03,683.018 1393.58,683.018 1394.14,683.018 1394.7,683.018 1395.26,683.018 1395.82,683.018 1396.38,683.018 1396.94,683.018 1397.5,683.018 1398.06,683.018 1398.62,683.018 1399.18,683.018 1399.74,683.018 1400.3,683.018 1400.86,683.018 1401.41,683.018 1401.97,683.018 1402.53,683.018 1403.09,683.018 1403.65,683.018 1404.21,683.018 1404.77,683.018 1405.33,683.018 1405.89,683.018 1406.45,683.018 1407.01,683.018 1407.57,683.018 1408.13,683.018 1408.68,683.018 1409.24,683.018 1409.8,683.018 1410.36,683.018 1410.92,683.018 1411.48,683.018 1412.04,683.018 1412.6,683.018 1413.16,683.018 1413.72,683.018 1414.28,683.018 1414.84,683.018 1415.4,683.018 1415.95,683.018 1416.51,683.018 1417.07,683.018 1417.63,683.018 1418.19,683.018 1418.75,683.018 1419.31,683.018 1419.87,683.018 1420.43,683.018 1420.99,683.018 1421.55,683.018 1422.11,683.018 1422.67,683.018 1423.23,683.018 1423.78,683.018 1424.34,683.018 1424.9,683.018 1425.46,683.018 1426.02,683.018 1426.58,683.018 1427.14,683.018 1427.7,683.018 1428.26,683.018 1428.82,683.018 1429.38,683.018 1429.94,683.018 1430.5,683.018 1431.05,683.018 1431.61,683.018 1432.17,683.018 1432.73,683.018 1433.29,683.018 1433.85,683.018 1434.41,683.018 1434.97,683.018 1435.53,683.018 1436.09,683.018 1436.65,683.018 1437.21,683.018 1437.77,683.018 1438.33,683.018 1438.88,683.018 1439.44,683.018 1440,683.018 1440.56,683.018 1441.12,683.018 1441.68,683.018 1442.24,683.018 1442.8,683.018 1443.36,683.018 1443.92,683.018 1444.48,683.018 1445.04,683.018 1445.6,683.018 1446.15,683.018 1446.71,683.018 1447.27,683.018 1447.83,683.018 1448.39,683.018 1448.95,683.018 1449.51,683.018 1450.07,683.018 1450.63,683.018 1451.19,683.018 1451.75,683.018 1452.31,683.018 1452.87,683.018 1453.42,683.018 1453.98,683.018 1454.54,683.018 1455.1,683.018 1455.66,683.018 1456.22,683.018 1456.78,683.018 1457.34,683.018 1457.9,683.018 1458.46,683.018 1459.02,683.018 1459.58,683.018 1460.14,683.018 1460.7,683.018 1461.25,683.018 1461.81,683.018 1462.37,683.018 1462.93,683.018 1463.49,683.018 1464.05,683.018 1464.61,683.018 1465.17,683.018 1465.73,683.018 1466.29,683.018 1466.85,683.018 1467.41,683.018 1467.97,683.018 1468.52,683.018 1469.08,683.018 1469.64,683.018 1470.2,683.018 1470.76,683.018 1471.32,683.018 1471.88,683.018 1472.44,683.018 1473,683.018 1473.56,683.018 1474.12,683.018 1474.68,683.018 1475.24,683.018 1475.79,683.018 1476.35,683.018 1476.91,683.018 1477.47,683.018 1478.03,683.018 1478.59,683.018 1479.15,683.018 1479.71,683.018 1480.27,683.018 1480.83,683.018 1481.39,683.018 1481.95,683.018 1482.51,683.018 1483.07,683.018 1483.62,683.018 1484.18,683.018 1484.74,683.018 1485.3,683.018 1485.86,683.018 1486.42,683.018 1486.98,683.018 1487.54,683.018 1488.1,683.018 1488.66,683.018 1489.22,683.018 1489.78,683.018 1490.34,683.018 1490.89,683.018 1491.45,683.018 1492.01,683.018 1492.57,683.018 1493.13,683.018 1493.69,683.018 1494.25,683.018 1494.81,683.018 1495.37,683.018 1495.93,683.018 1496.49,683.018 1497.05,683.018 1497.61,683.018 1498.16,683.018 1498.72,683.018 1499.28,683.018 1499.84,683.018 1500.4,683.018 1500.96,683.018 1501.52,683.018 1502.08,683.018 1502.64,683.018 1503.2,683.018 1503.76,683.018 1504.32,683.018 1504.88,683.018 1505.44,683.018 1505.99,683.018 1506.55,683.018 1507.11,683.018 1507.67,683.018 1508.23,683.018 1508.79,683.018 1509.35,683.018 1509.91,683.018 1510.47,683.018 1511.03,683.018 1511.59,683.018 1512.15,683.018 1512.71,683.018 1513.26,683.018 1513.82,683.018 1514.38,683.018 1514.94,683.018 1515.5,683.018 1516.06,683.018 1516.62,683.018 1517.18,683.018 1517.74,683.018 1518.3,683.018 1518.86,683.018 1519.42,683.018 1519.98,683.018 1520.53,683.018 1521.09,683.018 1521.65,683.018 1522.21,683.018 1522.77,683.018 1523.33,683.018 1523.89,683.018 1524.45,683.018 1525.01,683.018 1525.57,683.018 1526.13,683.018 1526.69,683.018 1527.25,683.018 1527.81,683.018 1528.36,683.018 1528.92,683.018 1529.48,683.018 1530.04,683.018 1530.6,683.018 1531.16,683.018 1531.72,683.018 1532.28,683.018 1532.84,683.018 1533.4,683.018 1533.96,683.018 1534.52,683.018 1535.08,683.018 1535.63,683.018 1536.19,683.018 1536.75,683.018 1537.31,683.018 1537.87,683.018 1538.43,683.018 1538.99,683.018 1539.55,683.018 1540.11,683.018 1540.67,683.018 1541.23,683.018 1541.79,683.018 1542.35,683.018 1542.9,683.018 1543.46,683.018 1544.02,683.018 1544.58,683.018 1545.14,683.018 1545.7,683.018 1546.26,683.018 1546.82,683.018 1547.38,683.018 1547.94,683.018 1548.5,683.018 1549.06,683.018 1549.62,683.018 1550.18,683.018 1550.73,683.018 1551.29,683.018 1551.85,683.018 1552.41,683.018 1552.97,683.018 1553.53,683.018 1554.09,683.018 1554.65,683.018 1555.21,683.018 1555.77,683.018 1556.33,683.018 1556.89,683.018 1557.45,683.018 1558,683.018 1558.56,683.018 1559.12,683.018 1559.68,683.018 1560.24,683.018 1560.8,683.018 1561.36,683.018 1561.92,683.018 1562.48,683.018 1563.04,683.018 1563.6,683.018 1564.16,683.018 1564.72,683.018 1565.28,683.018 1565.83,683.018 1566.39,683.018 1566.95,683.018 1567.51,683.018 1568.07,683.018 1568.63,683.018 1569.19,683.018 1569.75,683.018 1570.31,683.018 1570.87,683.018 1571.43,683.018 1571.99,683.018 1572.55,683.018 1573.1,683.018 1573.66,683.018 1574.22,683.018 1574.78,683.018 1575.34,683.018 1575.9,683.018 1576.46,683.018 1577.02,683.018 1577.58,683.018 1578.14,683.018 1578.7,683.018 1579.26,683.018 1579.82,683.018 1580.37,683.018 1580.93,683.018 1581.49,683.018 1582.05,683.018 1582.61,683.018 1583.17,683.018 1583.73,683.018 1584.29,683.018 1584.85,683.018 1585.41,683.018 1585.97,683.018 1586.53,683.018 1587.09,683.018 1587.65,683.018 1588.2,683.018 1588.76,683.018 1589.32,683.018 1589.88,683.018 1590.44,683.018 1591,683.018 1591.56,683.018 1592.12,683.018 1592.68,683.018 1593.24,683.018 1593.8,683.018 1594.36,683.018 1594.92,683.018 1595.47,683.018 1596.03,683.018 1596.59,683.018 1597.15,683.018 1597.71,683.018 1598.27,683.018 1598.83,683.018 1599.39,683.018 1599.95,683.018 1600.51,683.018 1601.07,683.018 1601.63,683.018 1602.19,683.018 1602.74,683.018 1603.3,683.018 1603.86,683.018 1604.42,683.018 1604.98,683.018 1605.54,683.018 1606.1,683.018 1606.66,683.018 1607.22,683.018 1607.78,683.018 1608.34,683.018 1608.9,683.018 1609.46,683.018 1610.02,683.018 1610.57,683.018 1611.13,683.018 1611.69,683.018 1612.25,683.018 1612.81,683.018 1613.37,683.018 1613.93,683.018 1614.49,683.018 1615.05,683.018 1615.61,683.018 1616.17,683.018 1616.73,683.018 1617.29,683.018 1617.84,683.018 1618.4,683.018 1618.96,683.018 1619.52,683.018 1620.08,683.018 1620.64,683.018 1621.2,683.018 1621.76,683.018 1622.32,683.018 1622.88,683.018 1623.44,683.018 1624,683.018 1624.56,683.018 1625.11,683.018 1625.67,683.018 1626.23,683.018 1626.79,683.018 1627.35,683.018 1627.91,683.018 1628.47,683.018 1629.03,683.018 1629.59,683.018 1630.15,683.018 1630.71,683.018 1631.27,683.018 1631.83,683.018 1632.39,683.018 1632.94,683.018 1633.5,683.018 1634.06,683.018 1634.62,683.018 1635.18,683.018 1635.74,683.018 1636.3,683.018 1636.86,683.018 1637.42,683.018 1637.98,683.018 1638.54,683.018 1639.1,683.018 1639.66,683.018 1640.21,683.018 1640.77,683.018 1641.33,683.018 1641.89,683.018 1642.45,683.018 1643.01,683.018 1643.57,683.018 1644.13,683.018 1644.69,683.018 1645.25,683.018 1645.81,683.018 1646.37,683.018 1646.93,683.018 1647.48,683.018 1648.04,683.018 1648.6,683.018 1649.16,683.018 1649.72,683.018 1650.28,683.018 1650.84,683.018 1651.4,683.018 1651.96,683.018 1652.52,683.018 1653.08,683.018 1653.64,683.018 1654.2,683.018 1654.76,683.018 1655.31,683.018 1655.87,683.018 1656.43,683.018 1656.99,683.018 1657.55,683.018 1658.11,683.018 1658.67,683.018 1659.23,683.018 1659.79,683.018 1660.35,683.018 1660.91,683.018 1661.47,683.018 1662.03,683.018 1662.58,683.018 1663.14,683.018 1663.7,683.018 1664.26,683.018 1664.82,683.018 1665.38,683.018 1665.94,683.018 1666.5,683.018 1667.06,683.018 1667.62,683.018 1668.18,683.018 1668.74,683.018 1669.3,683.018 1669.85,683.018 1670.41,683.018 1670.97,683.018 1671.53,683.018 1672.09,683.018 1672.65,683.018 1673.21,683.018 1673.77,683.018 1674.33,683.018 1674.89,683.018 1675.45,683.018 1676.01,683.018 1676.57,683.018 1677.13,683.018 1677.68,683.018 1678.24,683.018 1678.8,683.018 1679.36,683.018 1679.92,683.018 1680.48,683.018 1681.04,683.018 1681.6,683.018 1682.16,683.018 1682.72,683.018 1683.28,683.018 1683.84,683.018 1684.4,683.018 1684.95,683.018 1685.51,683.018 1686.07,683.018 1686.63,683.018 1687.19,683.018 1687.75,683.018 1688.31,683.018 1688.87,683.018 1689.43,683.018 1689.99,683.018 1690.55,683.018 1691.11,683.018 1691.67,683.018 1692.23,683.018 1692.78,683.018 1693.34,683.018 1693.9,683.018 1694.46,683.018 1695.02,683.018 1695.58,683.018 1696.14,683.018 1696.7,683.018 1697.26,683.018 1697.82,683.018 1698.38,683.018 1698.94,683.018 1699.5,683.018 1700.05,683.018 1700.61,683.018 1701.17,683.018 1701.73,683.018 1702.29,683.018 1702.85,683.018 1703.41,683.018 1703.97,683.018 1704.53,683.018 1705.09,683.018 1705.65,683.018 1706.21,683.018 1706.77,683.018 1707.32,683.018 1707.88,683.018 1708.44,683.018 1709,683.018 1709.56,683.018 1710.12,683.018 1710.68,683.018 1711.24,683.018 1711.8,683.018 1712.36,683.018 1712.92,683.018 1713.48,683.018 1714.04,683.018 1714.6,683.018 1715.15,683.018 1715.71,683.018 1716.27,683.018 1716.83,683.018 1717.39,683.018 1717.95,683.018 1718.51,683.018 1719.07,683.018 1719.63,683.018 1720.19,683.018 1720.75,683.018 1721.31,683.018 1721.87,683.018 1722.42,683.018 1722.98,683.018 1723.54,683.018 1724.1,683.018 1724.66,683.018 1725.22,683.018 1725.78,683.018 1726.34,683.018 1726.9,683.018 1727.46,683.018 1728.02,683.018 1728.58,683.018 1729.14,683.018 1729.69,683.018 1730.25,683.018 1730.81,683.018 1731.37,683.018 1731.93,683.018 1732.49,683.018 1733.05,683.018 1733.61,683.018 1734.17,683.018 1734.73,683.018 1735.29,683.018 1735.85,683.018 1736.41,683.018 1736.97,683.018 1737.52,683.018 1738.08,683.018 1738.64,683.018 1739.2,683.018 1739.76,683.018 1740.32,683.018 1740.88,683.018 1741.44,683.018 1742,683.018 1742.56,683.018 1743.12,683.018 1743.68,683.018 1744.24,683.018 1744.79,683.018 1745.35,683.018 1745.91,683.018 1746.47,683.018 1747.03,683.018 1747.59,683.018 1748.15,683.018 1748.71,683.018 1749.27,683.018 1749.83,683.018 1750.39,683.018 1750.95,683.018 1751.51,683.018 1752.06,683.018 1752.62,683.018 1753.18,683.018 1753.74,683.018 1754.3,683.018 1754.86,683.018 1755.42,683.018 1755.98,683.018 1756.54,683.018 1757.1,683.018 1757.66,683.018 1758.22,683.018 1758.78,683.018 1759.34,683.018 1759.89,683.018 1760.45,683.018 1761.01,683.018 1761.57,683.018 1762.13,683.018 1762.69,683.018 1763.25,683.018 1763.81,683.018 1764.37,683.018 1764.93,683.018 1765.49,683.018 1766.05,683.018 1766.61,683.018 1767.16,683.018 1767.72,683.018 1768.28,683.018 1768.84,683.018 1769.4,683.018 1769.96,683.018 1770.52,683.018 1771.08,683.018 1771.64,683.018 1772.2,683.018 1772.76,683.018 1773.32,683.018 1773.88,683.018 1774.43,683.018 1774.99,683.018 1775.55,683.018 1776.11,683.018 1776.67,683.018 1777.23,683.018 1777.79,683.018 1778.35,683.018 1778.91,683.018 1779.47,683.018 1780.03,683.018 1780.59,683.018 1781.15,683.018 1781.71,683.018 1782.26,683.018 1782.82,683.018 1783.38,683.018 1783.94,683.018 1784.5,683.018 1785.06,683.018 1785.62,683.018 1786.18,683.018 1786.74,683.018 1787.3,683.018 1787.86,683.018 1788.42,683.018 1788.98,683.018 1789.53,683.018 1790.09,683.018 1790.65,683.018 1791.21,683.018 1791.77,683.018 1792.33,683.018 1792.89,683.018 1793.45,683.018 1794.01,683.018 1794.57,683.018 1795.13,683.018 1795.69,683.018 1796.25,683.018 1796.8,683.018 1797.36,683.018 1797.92,683.018 1798.48,683.018 1799.04,683.018 1799.6,683.018 1800.16,683.018 1800.72,683.018 1801.28,683.018 1801.84,683.018 1802.4,683.018 1802.96,683.018 1803.52,683.018 1804.08,683.018 1804.63,683.018 1805.19,683.018 1805.75,683.018 1806.31,683.018 1806.87,683.018 1807.43,683.018 1807.99,683.018 1808.55,683.018 1809.11,683.018 1809.67,683.018 1810.23,683.018 1810.79,683.018 1811.35,683.018 1811.9,683.018 1812.46,683.018 1813.02,683.018 1813.58,683.018 1814.14,683.018 1814.7,683.018 1815.26,683.018 1815.82,683.018 1816.38,683.018 1816.94,683.018 1817.5,683.018 1818.06,683.018 1818.62,683.018 1819.18,683.018 1819.73,683.018 1820.29,683.018 1820.85,683.018 1821.41,683.018 1821.97,683.018 1822.53,683.018 1823.09,683.018 1823.65,683.018 1824.21,683.018 1824.77,683.018 1825.33,683.018 1825.89,683.018 1826.45,683.018 1827,683.018 1827.56,683.018 1828.12,683.018 1828.68,683.018 1829.24,683.018 1829.8,683.018 1830.36,683.018 1830.92,683.018 1831.48,683.018 1832.04,683.018 1832.6,683.018 1833.16,683.018 1833.72,683.018 1834.27,683.018 1834.83,683.018 1835.39,683.018 1835.95,683.018 1836.51,683.018 1837.07,683.018 1837.63,683.018 1838.19,683.018 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906472","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $targetwalkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.022129538524478 ± 0.02381269927150682\nProjected Energy: -4.012232170269146 ± (0.006009556144911166, 0.006088957081226809)\nExact Energy: -4.021502406906472\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from lomc! as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b]; shift=:shift, norm=:norm, dτ=df.dτ[end], skip=0)\n\nCalculate the growth witness directly from a DataFrame returned by lomc!. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0)\ngrowth_witness(df::DataFrame, [b]; skip=0)\ngrowth_witness(sim::PMCSimulation, [b]; skip=0)\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, dτ;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n)\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    dτ=determine_constant_time_step(df),\n    kwargs...\n)\ngrowth_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively.  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means(). dτ is the time step and weights a function that calulates the weights. See w_exp() and w_lin().\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m)\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator.  Error propagation is done with MonteCarloMeasurements. Propagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a DataFrame returned by lomc!. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\ngrowth_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df or PMCSimulation sim. repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\ndf, _ = lomc!(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(df; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-Tuple{AbstractVector, AbstractVector, AbstractVector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, dτ;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    dτ=df.dτ[end],\n    kwargs...\n)\nmixed_estimator(sim::PMCSimulation, h; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up).  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means(). dτ is the time step and weights a function that calulates the weights. See w_exp() and w_lin().  Additional keyword arguments are passed on to ratio_of_means().\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the unweighted ratio.  Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame returned by lomc!. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\nmixed_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df returned from lomc! repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\ndf, _ = lomc!(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(df; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(df::DataFrame; skip=0, hproj=:hproj, vproj=:vproj, kwargs...)\nprojected_energy(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy() to set these up in lomc!()). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, dτ;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n)\nrayleigh_replica_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame returned by lomc!. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means(). dτ is the time step and weights a function that calulates the weights. See w_exp() and w_lin(). Additional keyword arguments are passed on to ratio_of_means().\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\nrayleigh_replica_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df returned from lomc! repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\ndf, _ = lomc!(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(df; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...)\nshift_estimator(sim::PMCSimulation; kwargs...)\n-> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, dτ; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip.\n\nSee also w_lin, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, dτ; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip.\n\nSee also w_exp, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\nreplica_fidelity(sim::PMCSimulation; kwargs...)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the result of replica lomc! passed as  argument df, using replicas _1 and _2. Calls ratio_of_means() to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame version can extract the relevant information from the result of lomc!. Set up lomc! with the keyword argument replica = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.determine_constant_time_step-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.determine_constant_time_step","text":"determine_constant_time_step(df) -> dτ\n\nGiven a DataFrame df, determine the time step that was used to compute it. Throw an error if time step is not constant.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by lomc! as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallowed_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">0.491729</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">1.3726e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">1.1571e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">9.258e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">1.352e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">2.545e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">8.195e-6</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0-1.41421im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im      0.0-2.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+1.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im\n 0.0-1.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999991\n -0.9999999999999991\n -0.9999999999999982\n -0.9999999999999973\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000027\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n       0.0+0.0im       -5.55112e-17-0.353553im         0.534676-0.217841im      2.77556e-17-0.204124im             0.0+0.0im           0.534676+0.217841im      2.77556e-17+0.204124im             0.0+0.0im       -5.55112e-17+0.353553im           0.0+0.0im\n       0.0+0.0im        5.55112e-17-0.5im             -0.378073+0.154037im              0.0-0.288675im             0.0+0.0im          -0.378073-0.154037im     -5.55112e-17+0.288675im             0.0+0.0im                0.0+0.5im                0.0+0.0im\n       0.0+0.612372im           0.0+0.0im          -5.55112e-17+0.0im           -1.2326e-32+2.77556e-17im          0.0+0.353553im           0.0+0.0im                   0.0+2.77556e-17im          0.0+0.353553im           0.0+0.0im                0.0+0.612372im\n       0.0+0.0im                0.0+0.353553im      5.55112e-17+6.93889e-17im           0.0-0.612372im             0.0+0.0im        5.55112e-17-1.38778e-16im           0.0+0.612372im             0.0+0.0im                0.0-0.353553im           0.0+0.0im\n       0.0-0.353553im    1.2326e-32+1.11022e-16im   5.55112e-17-2.77556e-17im  -2.46519e-32-2.77556e-17im          0.0+0.612372im  -1.11022e-16-2.77556e-17im   4.93038e-32-2.77556e-17im          0.0+0.612372im   -1.2326e-32+8.32667e-17im        0.0-0.353553im\n       0.0+0.0im           0.353553+0.0im                   0.0+0.0im              0.612372+0.0im                  0.0+0.0im                0.0+0.0im              0.612372+0.0im                  0.0+0.0im           0.353553+0.0im                0.0+0.0im\n -0.353553+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.612372+0.0im                0.0+0.0im                   0.0+0.0im             0.612372+0.0im                0.0+0.0im           0.353553+0.0im\n       0.0+0.0im               -0.5+7.02973e-17im     -0.154037-0.378073im         0.288675-1.95105e-16im          0.0+0.0im          -0.154037+0.378073im         0.288675+2.29062e-16im          0.0+0.0im               -0.5-7.48398e-17im        0.0+0.0im\n       0.0+0.0im          -0.353553+8.84171e-17im      0.217841+0.534676im         0.204124-1.1389e-16im   8.32667e-17+0.0im           0.217841-0.534676im         0.204124+2.4427e-16im   8.32667e-17+0.0im          -0.353553-8.31718e-17im        0.0+0.0im\n  0.612372+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.353553-0.0im                0.0+0.0im                   0.0+0.0im             0.353553+0.0im                0.0+0.0im          -0.612372-0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -1.6810327175633306e-17\n  3.469966302164114e-17\n  0.15915494309189535\n  0.1591549430918954\n  0.1591549430918954","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(BoseFS{4,5}(0, 0, 4, 0, 0); u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 1 0 0 3⟩\"\n fs\"|1 3 0 0 0⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843  0.0       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8        0.0       0.282843  0.565685  0.0       0.0       0.0       0.0\n  0.0       0.8       0.4       0.581966  0.4       0.0       0.4        0.282843  0.565685  0.0       0.69282   0.69282   0.0       0.0\n  0.0       0.4       0.8       0.4       2.81803   0.4       0.0        0.0       0.565685  0.282843  0.69282   0.0       0.69282   0.0\n  0.0       0.8       0.4       0.0       0.4       0.581966  0.4        0.282843  0.565685  0.0       0.0       0.0       0.69282   0.69282\n  0.0       0.4       0.8       0.4       0.0       0.4       2.81803    0.0       0.565685  0.282843  0.0       0.69282   0.0       0.69282\n  0.0       0.565685  0.0       0.282843  0.0       0.282843  0.0       -0.472136  0.8       0.0       0.489898  0.0       0.0       0.489898\n  0.0       0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n  0.0       0.0       0.565685  0.0       0.282843  0.0       0.282843   0.0       0.8       8.47214   0.0       0.489898  0.489898  0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.0       0.0        0.489898  0.489898  0.0       1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.69282    0.0       0.489898  0.489898  0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.69282   0.0        0.0       0.489898  0.489898  0.0       0.0       6.03607   0.0\n  0.0       0.0       0.0       0.0       0.0       0.69282   0.69282    0.489898  0.489898  0.0       0.0       0.0       0.0       1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.9798639983216155\n -3.363124291613371\n -0.7590191922770746\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781396\n  1.530592997097333\n  1.5835732611867464\n  3.072870330325867\n  3.125672653951849\n  4.862107221562182\n  6.26069485038059\n  6.402671211183119\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348     0.175378     0.0135766   -2.81719e-15  -0.0221221  -0.0697193   1.3739e-15    0.0314466   -2.35922e-16  -0.0360987   -0.0161557  -5.55112e-17   0.00625248  -0.0058099\n  0.177701     0.932229     0.105473     3.01009e-14   0.225254   -0.132826    9.71445e-17  -0.00292026  -2.09555e-15  -0.0861158   -0.0907789  -4.996e-16     0.0591715   -0.0264275\n  0.0768085   -0.0622307    0.0129069   -6.06251e-14  -0.447424   -0.63969     2.05322e-14   0.383444    -6.54338e-15  -0.431051    -0.181167   -6.10623e-16   0.0599783   -0.106852\n -0.0214153   -0.175119    -0.20169      0.616673      0.522017   -0.296818   -0.31234      -0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797    0.0693699     0.0495446   0.416847    0.33773       0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153   -0.175119    -0.20169     -0.616673      0.522017   -0.296818    0.31234      -0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797   -0.0693699     0.0495446   0.416847   -0.33773       0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.0138439   -0.165902     0.922758     1.00753e-14   0.1111     -0.172508   -1.30521e-14  -0.207974     2.66454e-15   0.0848902   -0.149153   -8.32667e-16   0.0712921   -0.0301968\n -0.00234782   0.00840544  -0.098969    -9.6867e-15   -0.0847116   0.082999    1.51129e-14   0.274424     3.60822e-15   0.575786    -0.61385    -2.72005e-15   0.353775    -0.259338\n -0.00237613   0.00294196   0.00143189   5.56152e-15   0.0427486   0.0110863  -3.72619e-15  -0.0663108    9.50628e-16   0.00167015   0.0832916   2.91434e-15  -0.448519    -0.8863\n  0.00363555   0.0455298   -0.133824    -0.332825     -0.290831   -0.057199   -0.527627     -0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478   0.0150664    0.0206752   -0.0642658    -0.0638689  -0.0250518   0.0999631    -0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499\n  0.00195478   0.0150664    0.0206752    0.0642658    -0.0638689  -0.0250518  -0.0999631    -0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555   0.0455298   -0.133824     0.332825     -0.290831   -0.057199    0.527627     -0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133606\n -0.7590191922770747","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321601\n -3.363124291613371\n -0.7590191922770853\n  0.13584182219621077\n  0.15789998694609508\n  0.876711441178136\n  1.530592997097317\n  1.5835732611867481\n  3.0728703303258706\n  3.1256726539518365\n  4.862107221562165\n  6.260694850380596\n  6.4026712111831126\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321621\n -3.3631242916133637\n -0.759019192277076\n  0.1578999869460802\n  0.8767114411781437\n  1.5835732611867417\n  3.125672653951844\n  4.862107221562179\n  6.402671211183117\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.0066861389450877905\n 0.033070399772041625\n 3.9204869225657406\n 0.03307039977204162\n 0.006686138945087839","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nDensityMatrixDiagonal\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html#Model-Hamiltonians","page":"Hamiltonians","title":"Model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardReal1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardReal1D2C","text":"BoseHubbardReal1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0)\n\nImplements a two-component one-dimensional Bose Hubbard chain in real space.\n\nhatH = hatH_a + hatH_b + Vsum_i n_a_in_b_i\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nua: the on-site interaction parameter parameter for Hamiltonian a.\nub: the on-site interaction parameter parameter for Hamiltonian b.\nta: the hopping strength for Hamiltonian a.\ntb: the hopping strength for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nSee also\n\nHubbardReal1D\nBoseHubbardMom1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) + v sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2t cos(k)\ncontinuum_dispersion: ϵ_k = tk^2\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardMom1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardMom1D2C","text":"BoseHubbardMom1D2C(add::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0, kwargs...)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with a two-component Bose gas.\n\nhatH = hatH_a + hatH_b + fracVMsum_kpqr b^_r a^_q b_p a_k δ_r+qp+k\n\nArguments\n\nadd: the starting address.\nua: the u parameter for Hamiltonian a.\nub: the u parameter for Hamiltonian b.\nta: the t parameter for Hamiltonian a.\ntb: the t parameter for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nFurther keyword arguments are passed on to the constructor of HubbardMom1D.\n\nSee also\n\nBoseFS2C\nBoseHubbardReal1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2t cos(k)\ncontinuum_dispersion: ϵ_k = tk^2\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions \n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl \n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x  so that single particle energies are \n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to  be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order  degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl \n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and  the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between  basis states of any noninteracting energy level, leading to many more offdiagonals and  fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger  restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator  basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The    allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults    to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make    the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the    interactions. The values are always scaled relative to the first dimension, which sets    the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed    to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are    ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without    comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building  a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions \n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that  conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots  are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x  so that single particle energies are \n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to  be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using  first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d) \n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator  basis functions, see four_oscillator_integral_general, with the additional restriction  that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults    to a 1D spectrum with number of levels matching modes of addr. Will be sorted to    make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets    the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed    to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are    ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function  potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi \n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots  are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x  so that single particle energies are \n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to  be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix  representation of this Hamiltonian for a single particle is completely dense in the even-parity  subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty    for a 1D trap or contain values greater than 1.0. The maximum index    in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,    including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if    only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of \nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other","page":"Hamiltonians","title":"Other","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of lomc!() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(k)\n\nDispersion relation for HubbardMom1D. Returns -2cos(k).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(k)\n\nDispersion relation for HubbardMom1D. Returns k^2.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(BoseFS{3,3}(1, 1, 1); u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(BoseFS{3,3}(1, 1, 1); u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(BoseFS{3,3}(0, 2, 1); u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Observables are AbstractHamiltonians that represent a physical observable. Their ground state expectation values can be sampled by passing them into AllOverlaps.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"ParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator([address]) <: AbstractHamiltonian\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. Passing an address is optional.\n\njulia> h = FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3); bsr = BasisSetRepresentation(h);\n\njulia> gs = DVec(zip(bsr.basis, eigen(Matrix(bsr)).vectors[:,1])); # ground state\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractHamiltonian{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int,c=:cross) <: AbstractHamiltonian{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d of a two component system in a momentum-space Fock-state basis. It returns a Complex value.\n\nCorrelation across two components:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s b^_p  b_q a_r δ_s+pq+r\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\nc: possible instructions: :cross: default instruction, computing correlation between particles across two components; :first: computing correlation between particles within the first component; :second: computing correlation between particles within the second component. These are the only defined instructions, using anything else will produce errors.\n\nTo use on a one-component system\n\nFor a system with only one component, e.g. with BoseFS, the second argument c is irrelevant and can be any of the above instructions, one could simply skip this argument and let it be the default value.\n\nSee also\n\nBoseHubbardMom1D2C\nBoseFS2C\nG2RealCorrelator\nG2RealSpace\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into lomc! with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractHamiltonian, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    hatC_textstring(d) = frac1M sum_j^M delta n_j (e^i pi sum_j leq k  j + d delta n_k) delta n_j+d\n\nHere, delta hatn_j = hatn_j - barn is the boson number deviation from the mean filling number and barn = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractHamiltonian, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator hatp.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(add => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(add => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(add => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Hamiltonians-interface","page":"Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. The most general form of a model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with lomc!). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallowed_address_type(h::AbstractHamiltonian): defaults to typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.starting_address","page":"Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, add, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address add and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallowed_address_type","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, add)\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address add of the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRep.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.allowed_address_type","page":"Hamiltonians","title":"Rimu.Interfaces.allowed_address_type","text":"allowed_address_type(h::AbstractHamiltonian)\n\nReturn the type of addresses that can be used with Hamiltonian h.\n\nPart of the AbstractHamiltonian interface.\n\nDefaults to typeof(starting_address(h)). Overload this function if the Hamiltonian can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"hamiltonians.html#Base.adjoint","page":"Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractHamiltonian)\n\nRepresent the adjoint of an AbstractHamiltonian. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.dot","page":"Hamiltonians","title":"LinearAlgebra.dot","text":"dot(map::OccupiedModeMap, vec::AbstractVector)\ndot(map1::OccupiedModeMap, map2::OccupiedModeMap)\n\nDot product extracting mode occupation numbers from an OccupiedModeMap similar to onr.\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> dot(mb, 1:7)\n27\n\njulia> mb⋅(1:7) == onr(b)⋅(1:7)\ntrue\n\nSee also SingleComponentFockAddress.\n\n\n\n\n\ndot(w, op::AbstractHamiltonian, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\ndot(y::PDVec, A::AbstractHamiltonian, x::PDVec[, w::PDWorkingMemory])\n\nPerform y ⋅ A ⋅ x. The working memory w is required to facilitate threaded/distributed operations with non-diagonal A. If needed and not passed a new instance will be allocated. A can be replaced with a tuple of operators.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractHamiltonian, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allowed_address_type.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here for HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Harmonic-Oscillator","page":"Hamiltonians","title":"Harmonic Oscillator","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim}; \n    target_energy = nothing, \n    max_energy = nothing, \n    max_blocks = nothing, \n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns \n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRep\nindices: tuple of mode indices that allow recreation of the generating address    addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when    the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating    tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved    after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.    Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds  addr are determined by parity. In this case the blocks are not generated; t_basis  will be zero, and block_size will be an estimate. Pass the seed addresses to  BasisSetRep with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis  indices n_xn_yldots. These indices are bounded by S which is a  tuple of the maximum number of states in each dimension. By default the  groundstate in each dimension is indexed by 0, but this can be changed  by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions, \n\n    mathcalI(ijkl) = int_-infty^infty dx  \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function,  and is non-zero unless i+j+k+l is odd. See e.g.  Titchmarsh (1948). This is a generalisation of the closed form in  Papenbrock (2002), which is is the special  case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin, \n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state  corresponds to a D-tuple of harmonic oscillator indices mathbfn_i.  S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of  phi_i(0) to speed-up the calculation. The values can be calculated with  log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D  harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"RMPI.html#Module-RMPI","page":"RMPI","title":"Module RMPI","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI","category":"page"},{"location":"RMPI.html#Rimu.RMPI","page":"RMPI","title":"Rimu.RMPI","text":"Module for providing MPI functionality for Rimu. This module is unexported. To use it, run\n\nusing Rimu.RMPI\n\n\n\n\n\n","category":"module"},{"location":"RMPI.html#MPIData","page":"RMPI","title":"MPIData","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIData","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIData","page":"RMPI","title":"Rimu.RMPI.MPIData","text":"MPIData(data; kwargs...)\n\nWrapper used for signaling that this data is part of a distributed data structure and communication should happen with MPI. MPIData can generally be used where an AbstractDVec would be used otherwise. Unlike AbstractDVecs, MPIData does not support indexing, or iteration over keys, values, and pairs.\n\nKeyword arguments:\n\nsetup = mpi_point_to_point - controls the communication stratgy\nmpi_one_sided uses one-sided communication with remote memory access (RMA), sets MPIOneSided strategy.\nmpi_point_to_point uses MPIPointToPoint strategy.\nmpi_all_to_all uses MPIAllToAll strategy.\nmpi_no_exchange sets MPINoWalkerExchange strategy. Experimental. Use with caution!\ncomm = mpi_comm()\nroot = mpi_root\nThe rest of the keyword arguments are passed to setup.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Setup-functions","page":"RMPI","title":"Setup functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"The following distribute strategies are available. The functions are unexported.","category":"page"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.mpi_point_to_point\nRimu.RMPI.mpi_one_sided\nRimu.RMPI.mpi_all_to_all\nRimu.RMPI.mpi_no_exchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_point_to_point","page":"RMPI","title":"Rimu.RMPI.mpi_point_to_point","text":"mpi_point_to_point(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to point-to-point.\n\nSets up the MPIData structure with MPIPointToPoint strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_one_sided","page":"RMPI","title":"Rimu.RMPI.mpi_one_sided","text":"mpi_one_sided(data, comm = mpi_comm(), root = mpi_root; capacity)\n\nDeclare data as mpi-distributed and set communication strategy to one-sided with remote memory access (RMA). capacity sets the capacity of the RMA windows.\n\nSets up the MPIData structure with MPIOneSided strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_all_to_all","page":"RMPI","title":"Rimu.RMPI.mpi_all_to_all","text":"mpi_all_to_all(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to all-to-all.\n\nSets up the MPIData structure with MPIAllToAll strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_no_exchange","page":"RMPI","title":"Rimu.RMPI.mpi_no_exchange","text":"mpi_no_exchange(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to MPINoWalkerExchange. Sets up the MPIData structure with MPINoWalkerExchange strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Strategies","page":"RMPI","title":"Strategies","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIPointToPoint\nRimu.RMPI.MPIOneSided\nRimu.RMPI.MPIAllToAll\nRimu.RMPI.MPINoWalkerExchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIPointToPoint","page":"RMPI","title":"Rimu.RMPI.MPIPointToPoint","text":"MPIPointToPoint{N,A}\n\nPoint-to-point communication strategy. Uses circular communication using MPI.Send and MPI.Recv!.\n\nConstructor\n\nMPIPointToPoint(::Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIOneSided","page":"RMPI","title":"Rimu.RMPI.MPIOneSided","text":"MPIOneSided(nprocs, myrank, comm, ::Type{T}, capacity)\n\nCommunication buffer for use with MPI one-sided communication (remote memory access). Up to capacity elements of type T can be exchanged between MPI ranks via put. It is important that isbitstype(T) == true. Objects of type MPIOneSided have to be freed manually with a (blocking) call to free().\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIAllToAll","page":"RMPI","title":"Rimu.RMPI.MPIAllToAll","text":" MPIAllToAll\n\nAll-to-all communication strategy. The communication works in two steps: first MPI.Alltoall! is used to communicate the number of walkers each rank wants to send to other ranks, then MPI.Alltoallv! is used to send the walkers around.\n\nConstructor\n\nMPIAllToAll(Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPINoWalkerExchange","page":"RMPI","title":"Rimu.RMPI.MPINoWalkerExchange","text":"MPINoWalkerExchange(nprocs, my_rank, comm)\n\nStrategy for not exchanging walkers between ranks. Consequently there will be no cross-rank annihilations.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#MPI-convenience-functions","page":"RMPI","title":"MPI convenience functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Modules = [Rimu.RMPI]\nPages = [\"helpers.jl\"]\nPrivate = true\nPublic = true","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_root","page":"RMPI","title":"Rimu.RMPI.mpi_root","text":"Default MPI root for RMPI.\n\n\n\n\n\n","category":"constant"},{"location":"RMPI.html#Rimu.DictVectors.mpi_comm-Tuple{}","page":"RMPI","title":"Rimu.DictVectors.mpi_comm","text":"Default MPI communicator for RMPI.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.DictVectors.mpi_rank","page":"RMPI","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.DictVectors.mpi_size","page":"RMPI","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.is_mpi_root","page":"RMPI","title":"Rimu.RMPI.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_allprintln-Tuple","page":"RMPI","title":"Rimu.RMPI.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_barrier","page":"RMPI","title":"Rimu.RMPI.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_combine_walkers!-Tuple{Rimu.RMPI.MPIData, AbstractDVec}","page":"RMPI","title":"Rimu.RMPI.mpi_combine_walkers!","text":"mpi_combine_walkers!(target, source, [strategy])\n\nDistribute the entries of source to the target data structure such that all entries in the target are on the process with the correct mpi rank as controlled by targetrank(). MPI syncronizing.\n\nNote: the storage of the source is communicated rather than the source itself.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_seed!","page":"RMPI","title":"Rimu.RMPI.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.next_mpiID","page":"RMPI","title":"Rimu.RMPI.next_mpiID","text":"next_mpiID()\n\nProduce a new ID number for MPI distributed objects. Uses an internal counter.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.targetrank-Tuple{Union{Integer, AbstractFockAddress}, Any}","page":"RMPI","title":"Rimu.RMPI.targetrank","text":"targetrank(key, np)\n\nCompute the rank where the key belongs.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.@mpi_root-Tuple","page":"RMPI","title":"Rimu.RMPI.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"RMPI.html#Index","page":"RMPI","title":"Index","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Pages   = [\"RMPI.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nnnzs = 0: The number of non-zero elements in the basis set representation. Setting a   non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^6, nnzs, cutoff, filter, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(BoseFS{1,3}(1, 0, 0); u=1.0, t=1.0)) with dimension 3 and 9 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int64} with 9 stored entries:\n  0.0  -1.0  -1.0\n -1.0   0.0  -1.0\n -1.0  -1.0   0.0\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(BoseFS{1,3}(1, 0, 0); u=1.0, t=1.0)) with dimension 2 and 4 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int64} with 4 stored entries:\n  0.0  -1.0\n -1.0   0.0\n\njulia> using LinearAlgebra; eigvals(Matrix(bsr)) # eigenvalues\n3-element Vector{Float64}:\n -1.9999999999999996\n  0.9999999999999997\n  1.0000000000000002\n\njulia> ev = eigvecs(Matrix(bsr))[:,1] # ground state eigenvector\n3-element Vector{Float64}:\n -0.5773502691896257\n -0.5773502691896255\n -0.5773502691896257\n\njulia> DVec(zip(bsr.basis,ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => -0.57735\n  fs\"|0 1 0⟩\" => -0.57735\n  fs\"|1 0 0⟩\" => -0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. A maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nSetting sort to true will sort the basis. Any additional keyword arguments are passed on to Base.sort!.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"randomnumbers.html#Random-numbers-in-Rimu","page":"Random numbers","title":"Random numbers in Rimu","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"Rimu uses Julia's built-in random number generator, which currently defaults to Xoshiro256++.","category":"page"},{"location":"randomnumbers.html#Reproducibility","page":"Random numbers","title":"Reproducibility","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"If you want FCIQMC runs to be reproducible, make sure to seed the RNG with Random.seed!.","category":"page"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"MPI-distributed runs can also be made reproducible by seeding the RNG with Rimu.RMPI.mpi_seed!.","category":"page"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://joachimbrand.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for  parsing by Literate. The process of generating  documentation is automated in the docs/make.jl file and assumes that the following line is  at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example, ","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, product = hopnextneighbour(add, chosen)\n\nCompute the new address of a hopping event for the Bose-Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\nBoundary conditions are periodic.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS2C","text":"BoseFS2C{NA,NB,M,AA,AB} <: AbstractFockAddress\nBoseFS2C(onr_a, onr_b)\n\nAddress type that constructed with two BoseFS{N,M,S}. It represents a Fock state with two components, e.g. two different species of bosons with particle number NA from species S and particle number NB from species B. The number of modes M is expected to be the same for both components.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, Tuple{Vararg{Int64, var\"#s61\"}} where var\"#s61\", Tuple{Vararg{Int64, var\"#s5\"}} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.12.0. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(num_replicas=2; operator=nothing, transform=nothing, vecnorm=true) <: ReplicaStrategy{num_replicas}\n\nRun num_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee lomc!, ReplicaStrategy and AbstractHamiltonian (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to lomc! then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep dτ constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; targetwalkers = 1_000_000) <: ShiftStrategy\n\nDon't update the shift.  Return when targetwalkers is reached.\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in lomc! is advised as the default may not be appropriate.\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; targetwalkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; targetwalkers = 1000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(targetwalkers, ζ = 0.08, ξ = 0.0016) <: ShiftStrategy\n\nStrategy for updating the shift: After targetwalkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, dτ) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt{S} <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(targetwalkers, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After targetwalkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nThis will work with MPIData.\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to lomc!. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntargetwalkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; targetwalkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 10)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; targetwalkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, seeTimeStepStrategy`.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * targetwalkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates.\n\nIndexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nSee also ReplicaStrategy, SpectralState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to lomc! and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_reporting_strategy\nreport!\nreport_after_step!\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to lomc!.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in lomc!()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, walltime = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the walltime is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with advance!.\n\nSee also SpectralState, SpectralStrategy, ReplicaState, ReplicaStrategy, replica_stats, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several SingleStates representing the ground state and excited states of a single replica.\n\nIndexing the SpectralState state[i] returns the ith SingleState.\n\nSee also SpectralStrategy, ReplicaState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_dτ(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, shift_strategy)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Tuple, Tuple{Vararg{AbstractDVec, N}}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators. This function is overloaded for MPIData. The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main lomc! loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in lomc! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> add = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(add);\n\njulia> df1, state = lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 10)\n\njulia> size(df2)\n(200, 10)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(BoseFS{6,3}(1, 2, 3); u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.targetwalkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from lomc!, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before lomc! exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{R}, Tuple{S}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{S, R}, Any, Any}} where {S, R}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 1.6, 1.6, 0.4, 0.4)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an AbstractMatrix of configuration vectors from the state. The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also SingleState, ReplicaState, SpectralState, PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_dτ-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_dτ","text":"update_dτ(s<:TimeStepStrategy, dτ, tnorm) -> new dτ\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#RMPI","page":"API","title":"RMPI","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module RMPI","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by lomc! when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of lomc!, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with lomc!, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by lomc!.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with mpirun julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu and Rimu.RMPI, which contains MPI-related functionality.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu\nusing Rimu.RMPI","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0); u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Next, we construct the starting vector. We use a PDVec, which is automatically MPI-distributed if MPI is available. We set the vector's stochastic style to IsDynamicSemistochastic, which improves statistics and reduces the sign problem.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails. Setting save_if=is_mpi_root() will ensure only the root MPI rank will write to the file. The chunk_size parameter determines how often the data is saved to the file. Progress messages are suppressed with io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    save_if=is_mpi_root(),\n    reporting_interval=1,\n    chunk_size=1000,\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10_000 walkers. We will also compute the projected energy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"s_strat = DoubleLogUpdate(targetwalkers=10_000)\npost_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ProjectedEnergy{HubbardMom1D{Float64, 10, BoseFS{10, 10, BitString{19, 1, UInt32}}, 6.0, 1.0}, Rimu.DictVectors.FrozenPDVec{BoseFS{10, 10, BitString{19, 1, UInt32}}, Float64, 1}, Rimu.DictVectors.FrozenPDVec{BoseFS{10, 10, BitString{19, 1, UInt32}}, Float64, 1}}(:vproj, :hproj, HubbardMom1D(BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0); u=6.0, t=1.0), Rimu.DictVectors.FrozenPDVec{BoseFS{10, 10, BitString{19, 1, UInt32}}, Float64, 1}(([BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0) => 1.0],)), Rimu.DictVectors.FrozenPDVec{BoseFS{10, 10, BitString{19, 1, UInt32}}, Float64, 1}(([BoseFS{10,10}(1, 0, 0, 0, 8, 0, 0, 0, 1, 0) => 5.692099788303083, BoseFS{10,10}(0, 0, 0, 0, 8, 0, 0, 0, 0, 2) => 4.024922359499621, BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0) => 7.0, BoseFS{10,10}(0, 0, 1, 0, 8, 0, 1, 0, 0, 0) => 5.692099788303083, BoseFS{10,10}(0, 0, 0, 1, 8, 1, 0, 0, 0, 0) => 5.692099788303083, BoseFS{10,10}(0, 1, 0, 0, 8, 0, 0, 1, 0, 0) => 5.692099788303083],)))","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"lomc!(H, initial_vector; reporting_strategy, s_strat, post_step_strategy, dτ=1e-4, laststep=10_000);\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. lomc!.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main lomc!() computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI for use in lomc!() is enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary. Additional MPI-related functionality is provided by the module RMPI.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with lomc! and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with lomc! and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and PointToPoint when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> map!(x -> -x, values(pv)); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\nIf dv is an MPIData, synchronize its contents among the ranks first.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(md::MPIData)\n\nCompute the walkernumber of the distributed data on every MPI rank with MPI.Allreduce. MPI syncronizing.\n\n\n\n\n\nwalkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.dot_from_right","page":"Dict vectors","title":"Rimu.DictVectors.dot_from_right","text":"dot_from_right(w, op::AbstractHamiltonian, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in lomc!.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in lomc!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in lomc!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in lomc!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in lomc!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.MainSegmentIterator","page":"Dict vectors","title":"Rimu.DictVectors.MainSegmentIterator","text":"MainSegmentIterator{W,D} <: AbstractVector{D}\n\nIterates the main segments of a specified rank. See remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured in a series of columns, where each has a number of segments (see PDVec) equal to the number of segments across all MPI ranks. The purpose of this organisation is to allow spawning in parallel without using locks or atomic operations.\n\nThe steps performed on a PDWorkingMemory during a typical operation are perform_spawns!, collect_local!, synchronize_remote!, and move_and_compress!.\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports deposit! and StochasticStyle and acts as a target for spawning.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nCollect each row in w into its main segment. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the main segments on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.main_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.main_column","text":"main_column(::PDWorkingMemory) -> PDVec\n\nReturn the \"main\" column of the working memory wrapped in a PDVec.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local rank.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all ranks.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, t::PDVec, ham, boost)\n\nPerform spawns from t through ham to w.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the main segments that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!(w::PDWorkingMemory)\n\nSynchronize non-local segments across MPI. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, two implementations are provided, NotDistributed, and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint <: Communicator\n\nCommunicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer\n\nMultiple vectors stored in a simple buffer with MPI communication.\n\nSee replace_collections!, mpi_send, mpi_recv_any!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_comm","page":"Dict vectors","title":"Rimu.DictVectors.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_rank","page":"Dict vectors","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm)\n\nSend the buffers to dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_size","page":"Dict vectors","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into buffers.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] ::PDWorkingMemory)\n\nCopy pairs from remote ranks to the local part of the PDWorkingMemory.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored.\n\nIf the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"}]
}
