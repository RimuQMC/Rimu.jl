var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Rimu includes an unexported module RMPI, which must be imported to access additional MPI-related functionality.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"using Rimu.RMPI\nmpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(BoseFS{6,6}(1, 1, 1, 1, 1, 1); u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"num_replicas = 3\nreplica_strategy = AllOverlaps(num_replicas; operator = G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntargetwalkers = 100;\ndτ = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"df, state = lomc!(\n    H; style=IsDynamicSemistochastic(),\n    dτ,\n    laststep = steps_equilibrate + steps_measure,\n    targetwalkers,\n    replica_strategy,\n);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $num_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.210397630724869 ± 0.002945411560125692\n   G2(1) = 0.9179375998196901 ± 0.0014487882545570095\n   G2(2) = 0.9824618365485462 ± 0.0008078855891765099\n   G2(3) = 0.9888034965386578 ± 0.0012000192916385307\n   G2(4) = 0.9824618365485462 ± 0.0008078855891765099\n   G2(5) = 0.9179375998196901 ± 0.0014487882545570095\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $num_replicas replicas:\")\nfor i in 1:num_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -3.982824328882403 ± 0.13748856752861724\n   Replica 2: -3.974753826250174 ± 0.12466355058904417\n   Replica 3: -4.011054302602586 ± 0.12438161612595747\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(BoseFS{6,6}(1, 1, 1, 1, 1, 1); u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"targetwalkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(BoseFS{6,6}(1, 1, 1, 1, 1, 1); u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    targetwalkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [targetwalkers];\n    label=\"targetwalkers\", xlabel=\"steps\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.steps, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip910\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip910)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip911\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip910)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip912\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip912)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip912)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip912)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip912)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip910)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip910)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip910)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip910)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip910)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip910)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M1248.87 1391.71 L1248.87 1397.25 Q1246.38 1395.98 1243.71 1395.34 Q1241.04 1394.71 1238.17 1394.71 Q1233.81 1394.71 1231.62 1396.04 Q1229.45 1397.38 1229.45 1400.05 Q1229.45 1402.09 1231.01 1403.27 Q1232.57 1404.41 1237.28 1405.46 L1239.29 1405.91 Q1245.52 1407.25 1248.13 1409.7 Q1250.78 1412.12 1250.78 1416.48 Q1250.78 1421.44 1246.83 1424.34 Q1242.91 1427.23 1236.04 1427.23 Q1233.17 1427.23 1230.06 1426.66 Q1226.97 1426.12 1223.53 1425.01 L1223.53 1418.96 Q1226.78 1420.65 1229.93 1421.51 Q1233.08 1422.33 1236.17 1422.33 Q1240.3 1422.33 1242.53 1420.93 Q1244.76 1419.5 1244.76 1416.92 Q1244.76 1414.54 1243.14 1413.26 Q1241.55 1411.99 1236.1 1410.81 L1234.07 1410.33 Q1228.62 1409.19 1226.2 1406.83 Q1223.79 1404.45 1223.79 1400.31 Q1223.79 1395.28 1227.35 1392.54 Q1230.91 1389.8 1237.47 1389.8 Q1240.72 1389.8 1243.58 1390.28 Q1246.45 1390.76 1248.87 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M1265.89 1380.54 L1265.89 1390.66 L1277.96 1390.66 L1277.96 1395.22 L1265.89 1395.22 L1265.89 1414.57 Q1265.89 1418.93 1267.07 1420.17 Q1268.28 1421.41 1271.94 1421.41 L1277.96 1421.41 L1277.96 1426.31 L1271.94 1426.31 Q1265.16 1426.31 1262.58 1423.8 Q1260.01 1421.25 1260.01 1414.57 L1260.01 1395.22 L1255.71 1395.22 L1255.71 1390.66 L1260.01 1390.66 L1260.01 1380.54 L1265.89 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M1316.15 1407.02 L1316.15 1409.89 L1289.22 1409.89 Q1289.61 1415.94 1292.85 1419.12 Q1296.13 1422.27 1301.96 1422.27 Q1305.33 1422.27 1308.48 1421.44 Q1311.66 1420.61 1314.78 1418.96 L1314.78 1424.5 Q1311.63 1425.83 1308.32 1426.53 Q1305.01 1427.23 1301.61 1427.23 Q1293.08 1427.23 1288.08 1422.27 Q1283.11 1417.3 1283.11 1408.84 Q1283.11 1400.08 1287.82 1394.96 Q1292.57 1389.8 1300.59 1389.8 Q1307.78 1389.8 1311.95 1394.45 Q1316.15 1399.07 1316.15 1407.02 M1310.3 1405.3 Q1310.23 1400.5 1307.59 1397.63 Q1304.98 1394.77 1300.65 1394.77 Q1295.75 1394.77 1292.79 1397.54 Q1289.86 1400.31 1289.42 1405.34 L1310.3 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M1331.43 1420.96 L1331.43 1439.87 L1325.54 1439.87 L1325.54 1390.66 L1331.43 1390.66 L1331.43 1396.07 Q1333.28 1392.89 1336.08 1391.36 Q1338.91 1389.8 1342.82 1389.8 Q1349.32 1389.8 1353.36 1394.96 Q1357.43 1400.12 1357.43 1408.52 Q1357.43 1416.92 1353.36 1422.08 Q1349.32 1427.23 1342.82 1427.23 Q1338.91 1427.23 1336.08 1425.71 Q1333.28 1424.15 1331.43 1420.96 M1351.35 1408.52 Q1351.35 1402.06 1348.68 1398.4 Q1346.04 1394.71 1341.39 1394.71 Q1336.74 1394.71 1334.07 1398.4 Q1331.43 1402.06 1331.43 1408.52 Q1331.43 1414.98 1334.07 1418.67 Q1336.74 1422.33 1341.39 1422.33 Q1346.04 1422.33 1348.68 1418.67 Q1351.35 1414.98 1351.35 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M1389.87 1391.71 L1389.87 1397.25 Q1387.38 1395.98 1384.71 1395.34 Q1382.04 1394.71 1379.17 1394.71 Q1374.81 1394.71 1372.62 1396.04 Q1370.45 1397.38 1370.45 1400.05 Q1370.45 1402.09 1372.01 1403.27 Q1373.57 1404.41 1378.28 1405.46 L1380.29 1405.91 Q1386.52 1407.25 1389.13 1409.7 Q1391.78 1412.12 1391.78 1416.48 Q1391.78 1421.44 1387.83 1424.34 Q1383.91 1427.23 1377.04 1427.23 Q1374.18 1427.23 1371.06 1426.66 Q1367.97 1426.12 1364.53 1425.01 L1364.53 1418.96 Q1367.78 1420.65 1370.93 1421.51 Q1374.08 1422.33 1377.17 1422.33 Q1381.3 1422.33 1383.53 1420.93 Q1385.76 1419.5 1385.76 1416.92 Q1385.76 1414.54 1384.14 1413.26 Q1382.55 1411.99 1377.1 1410.81 L1375.07 1410.33 Q1369.62 1409.19 1367.2 1406.83 Q1364.79 1404.45 1364.79 1400.31 Q1364.79 1395.28 1368.35 1392.54 Q1371.92 1389.8 1378.47 1389.8 Q1381.72 1389.8 1384.58 1390.28 Q1387.45 1390.76 1389.87 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip912)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1260.83 2211.02,1260.83 \"/>\n<polyline clip-path=\"url(#clip912)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1003.22 2211.02,1003.22 \"/>\n<polyline clip-path=\"url(#clip912)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,745.613 2211.02,745.613 \"/>\n<polyline clip-path=\"url(#clip912)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,488.002 2211.02,488.002 \"/>\n<polyline clip-path=\"url(#clip912)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,230.392 2211.02,230.392 \"/>\n<polyline clip-path=\"url(#clip910)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip910)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1260.83 423.181,1260.83 \"/>\n<polyline clip-path=\"url(#clip910)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1003.22 423.181,1003.22 \"/>\n<polyline clip-path=\"url(#clip910)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,745.613 423.181,745.613 \"/>\n<polyline clip-path=\"url(#clip910)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,488.002 423.181,488.002 \"/>\n<polyline clip-path=\"url(#clip910)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,230.392 423.181,230.392 \"/>\n<path clip-path=\"url(#clip910)\" d=\"M356.339 1246.63 Q352.728 1246.63 350.899 1250.2 Q349.094 1253.74 349.094 1260.87 Q349.094 1267.97 350.899 1271.54 Q352.728 1275.08 356.339 1275.08 Q359.973 1275.08 361.779 1271.54 Q363.608 1267.97 363.608 1260.87 Q363.608 1253.74 361.779 1250.2 Q359.973 1246.63 356.339 1246.63 M356.339 1242.93 Q362.149 1242.93 365.205 1247.53 Q368.284 1252.12 368.284 1260.87 Q368.284 1269.59 365.205 1274.2 Q362.149 1278.78 356.339 1278.78 Q350.529 1278.78 347.45 1274.2 Q344.395 1269.59 344.395 1260.87 Q344.395 1252.12 347.45 1247.53 Q350.529 1242.93 356.339 1242.93 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M290.043 1016.57 L306.363 1016.57 L306.363 1020.5 L284.418 1020.5 L284.418 1016.57 Q287.08 1013.81 291.664 1009.18 Q296.27 1004.53 297.451 1003.19 Q299.696 1000.66 300.576 998.929 Q301.478 997.17 301.478 995.48 Q301.478 992.725 299.534 990.989 Q297.613 989.253 294.511 989.253 Q292.312 989.253 289.858 990.017 Q287.427 990.781 284.65 992.332 L284.65 987.609 Q287.474 986.475 289.927 985.896 Q292.381 985.318 294.418 985.318 Q299.789 985.318 302.983 988.003 Q306.177 990.688 306.177 995.179 Q306.177 997.308 305.367 999.23 Q304.58 1001.13 302.474 1003.72 Q301.895 1004.39 298.793 1007.61 Q295.691 1010.8 290.043 1016.57 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M316.224 985.943 L334.58 985.943 L334.58 989.878 L320.506 989.878 L320.506 998.35 Q321.524 998.003 322.543 997.841 Q323.562 997.656 324.58 997.656 Q330.367 997.656 333.747 1000.83 Q337.126 1004 337.126 1009.41 Q337.126 1014.99 333.654 1018.1 Q330.182 1021.17 323.862 1021.17 Q321.687 1021.17 319.418 1020.8 Q317.173 1020.43 314.765 1019.69 L314.765 1014.99 Q316.849 1016.13 319.071 1016.68 Q321.293 1017.24 323.77 1017.24 Q327.774 1017.24 330.112 1015.13 Q332.45 1013.03 332.45 1009.41 Q332.45 1005.8 330.112 1003.7 Q327.774 1001.59 323.77 1001.59 Q321.895 1001.59 320.02 1002.01 Q318.168 1002.42 316.224 1003.3 L316.224 985.943 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M356.339 989.021 Q352.728 989.021 350.899 992.586 Q349.094 996.128 349.094 1003.26 Q349.094 1010.36 350.899 1013.93 Q352.728 1017.47 356.339 1017.47 Q359.973 1017.47 361.779 1013.93 Q363.608 1010.36 363.608 1003.26 Q363.608 996.128 361.779 992.586 Q359.973 989.021 356.339 989.021 M356.339 985.318 Q362.149 985.318 365.205 989.924 Q368.284 994.508 368.284 1003.26 Q368.284 1011.98 365.205 1016.59 Q362.149 1021.17 356.339 1021.17 Q350.529 1021.17 347.45 1016.59 Q344.395 1011.98 344.395 1003.26 Q344.395 994.508 347.45 989.924 Q350.529 985.318 356.339 985.318 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M286.062 728.333 L304.418 728.333 L304.418 732.268 L290.344 732.268 L290.344 740.74 Q291.363 740.393 292.381 740.231 Q293.4 740.046 294.418 740.046 Q300.205 740.046 303.585 743.217 Q306.964 746.388 306.964 751.805 Q306.964 757.383 303.492 760.485 Q300.02 763.564 293.701 763.564 Q291.525 763.564 289.256 763.194 Q287.011 762.823 284.603 762.082 L284.603 757.383 Q286.687 758.518 288.909 759.073 Q291.131 759.629 293.608 759.629 Q297.613 759.629 299.951 757.522 Q302.288 755.416 302.288 751.805 Q302.288 748.194 299.951 746.087 Q297.613 743.981 293.608 743.981 Q291.733 743.981 289.858 744.397 Q288.006 744.814 286.062 745.694 L286.062 728.333 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M326.177 731.411 Q322.566 731.411 320.737 734.976 Q318.932 738.518 318.932 745.647 Q318.932 752.754 320.737 756.319 Q322.566 759.86 326.177 759.86 Q329.811 759.86 331.617 756.319 Q333.446 752.754 333.446 745.647 Q333.446 738.518 331.617 734.976 Q329.811 731.411 326.177 731.411 M326.177 727.708 Q331.987 727.708 335.043 732.314 Q338.122 736.897 338.122 745.647 Q338.122 754.374 335.043 758.981 Q331.987 763.564 326.177 763.564 Q320.367 763.564 317.288 758.981 Q314.233 754.374 314.233 745.647 Q314.233 736.897 317.288 732.314 Q320.367 727.708 326.177 727.708 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M356.339 731.411 Q352.728 731.411 350.899 734.976 Q349.094 738.518 349.094 745.647 Q349.094 752.754 350.899 756.319 Q352.728 759.86 356.339 759.86 Q359.973 759.86 361.779 756.319 Q363.608 752.754 363.608 745.647 Q363.608 738.518 361.779 734.976 Q359.973 731.411 356.339 731.411 M356.339 727.708 Q362.149 727.708 365.205 732.314 Q368.284 736.897 368.284 745.647 Q368.284 754.374 365.205 758.981 Q362.149 763.564 356.339 763.564 Q350.529 763.564 347.45 758.981 Q344.395 754.374 344.395 745.647 Q344.395 736.897 347.45 732.314 Q350.529 727.708 356.339 727.708 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M284.835 470.722 L307.057 470.722 L307.057 472.713 L294.511 505.282 L289.627 505.282 L301.432 474.658 L284.835 474.658 L284.835 470.722 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M316.224 470.722 L334.58 470.722 L334.58 474.658 L320.506 474.658 L320.506 483.13 Q321.524 482.783 322.543 482.621 Q323.562 482.435 324.58 482.435 Q330.367 482.435 333.747 485.607 Q337.126 488.778 337.126 494.195 Q337.126 499.773 333.654 502.875 Q330.182 505.954 323.862 505.954 Q321.687 505.954 319.418 505.583 Q317.173 505.213 314.765 504.472 L314.765 499.773 Q316.849 500.907 319.071 501.463 Q321.293 502.019 323.77 502.019 Q327.774 502.019 330.112 499.912 Q332.45 497.806 332.45 494.195 Q332.45 490.583 330.112 488.477 Q327.774 486.37 323.77 486.37 Q321.895 486.37 320.02 486.787 Q318.168 487.204 316.224 488.083 L316.224 470.722 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M356.339 473.801 Q352.728 473.801 350.899 477.366 Q349.094 480.908 349.094 488.037 Q349.094 495.144 350.899 498.708 Q352.728 502.25 356.339 502.25 Q359.973 502.25 361.779 498.708 Q363.608 495.144 363.608 488.037 Q363.608 480.908 361.779 477.366 Q359.973 473.801 356.339 473.801 M356.339 470.097 Q362.149 470.097 365.205 474.704 Q368.284 479.287 368.284 488.037 Q368.284 496.764 365.205 501.37 Q362.149 505.954 356.339 505.954 Q350.529 505.954 347.45 501.37 Q344.395 496.764 344.395 488.037 Q344.395 479.287 347.45 474.704 Q350.529 470.097 356.339 470.097 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M256.664 243.737 L264.303 243.737 L264.303 217.371 L255.992 219.038 L255.992 214.779 L264.256 213.112 L268.932 213.112 L268.932 243.737 L276.571 243.737 L276.571 247.672 L256.664 247.672 L256.664 243.737 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M296.015 216.191 Q292.404 216.191 290.576 219.756 Q288.77 223.297 288.77 230.427 Q288.77 237.533 290.576 241.098 Q292.404 244.64 296.015 244.64 Q299.65 244.64 301.455 241.098 Q303.284 237.533 303.284 230.427 Q303.284 223.297 301.455 219.756 Q299.65 216.191 296.015 216.191 M296.015 212.487 Q301.826 212.487 304.881 217.094 Q307.96 221.677 307.96 230.427 Q307.96 239.154 304.881 243.76 Q301.826 248.344 296.015 248.344 Q290.205 248.344 287.127 243.76 Q284.071 239.154 284.071 230.427 Q284.071 221.677 287.127 217.094 Q290.205 212.487 296.015 212.487 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M326.177 216.191 Q322.566 216.191 320.737 219.756 Q318.932 223.297 318.932 230.427 Q318.932 237.533 320.737 241.098 Q322.566 244.64 326.177 244.64 Q329.811 244.64 331.617 241.098 Q333.446 237.533 333.446 230.427 Q333.446 223.297 331.617 219.756 Q329.811 216.191 326.177 216.191 M326.177 212.487 Q331.987 212.487 335.043 217.094 Q338.122 221.677 338.122 230.427 Q338.122 239.154 335.043 243.76 Q331.987 248.344 326.177 248.344 Q320.367 248.344 317.288 243.76 Q314.233 239.154 314.233 230.427 Q314.233 221.677 317.288 217.094 Q320.367 212.487 326.177 212.487 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M356.339 216.191 Q352.728 216.191 350.899 219.756 Q349.094 223.297 349.094 230.427 Q349.094 237.533 350.899 241.098 Q352.728 244.64 356.339 244.64 Q359.973 244.64 361.779 241.098 Q363.608 237.533 363.608 230.427 Q363.608 223.297 361.779 219.756 Q359.973 216.191 356.339 216.191 M356.339 212.487 Q362.149 212.487 365.205 217.094 Q368.284 221.677 368.284 230.427 Q368.284 239.154 365.205 243.76 Q362.149 248.344 356.339 248.344 Q350.529 248.344 347.45 243.76 Q344.395 239.154 344.395 230.427 Q344.395 221.677 347.45 217.094 Q350.529 212.487 356.339 212.487 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip912)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,230.392 4017.76,230.392 \"/>\n<polyline clip-path=\"url(#clip912)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1250.45 456.554,1249.28 457.123,1249.12 457.691,1248.88 458.259,1248.58 458.828,1248.23 459.396,1246.76 459.964,1245.25 460.533,1244.72 461.101,1244.12 461.669,1243.45 462.238,1242.66 462.806,1241.8 463.375,1240.86 463.943,1239.82 464.511,1236.62 465.08,1235.41 465.648,1234.12 466.216,1231.68 466.785,1230.14 467.353,1227.46 467.921,1224.67 468.49,1222.82 469.058,1220.81 469.626,1217.64 470.195,1215.3 470.763,1211.78 471.331,1209.15 471.9,1206.35 472.468,1202.39 473.036,1199.21 473.605,1193.86 474.173,1190.3 474.741,1186.59 475.31,1181.71 475.878,1175.61 476.446,1170.33 477.015,1165.91 477.583,1161.32 478.152,1156.44 478.72,1150.16 479.288,1143.86 479.857,1137.22 480.425,1130.38 480.993,1123.36 481.562,1117.17 482.13,1109.78 482.698,1103.17 483.267,1095.29 483.835,1088.46 484.403,1081.27 484.972,1073.89 485.54,1065.3 486.108,1057.66 486.677,1047.61 487.245,1037.32 487.813,1026.76 488.382,1016.31 488.95,1007.83 489.518,998.288 490.087,989.516 490.655,980.629 491.224,969.573 491.792,958.351 492.36,948.14 492.929,938.979 493.497,928.659 494.065,919.297 494.634,909.735 495.202,900.254 495.77,890.628 496.339,879.751 496.907,867.914 497.475,858.092 498.044,846.347 498.612,835.589 499.18,823.756 499.749,811.234 500.317,801.82 500.885,788.351 501.454,776.06 502.022,765.779 502.59,755.546 503.159,743.441 503.727,733.53 504.295,724.764 504.864,713.818 505.432,702.99 506.001,692.401 506.569,681.915 507.137,673.616 507.706,665.421 508.274,654.167 508.842,643.143 509.411,633.347 509.979,622.683 510.547,614.257 511.116,603.775 511.684,595.282 512.252,588.275 512.821,576.055 513.389,566.121 513.957,557.678 514.526,549.386 515.094,541.132 515.662,532.11 516.231,526.54 516.799,519.76 517.367,515.017 517.936,506.229 518.504,495.708 519.072,490.964 519.641,484.063 520.209,479.244 520.778,471.487 521.346,469.128 521.914,465.783 522.483,457.841 523.051,452.268 523.619,447.923 524.188,442.329 524.756,438.958 525.324,429.575 525.893,424.879 526.461,418.2 527.029,412.877 527.598,408.672 528.166,403.282 528.734,400.271 529.303,393.884 529.871,390.906 530.439,383.945 531.008,381.426 531.576,377.684 532.144,375.179 532.713,372.679 533.281,369.042 533.85,366.854 534.418,363.544 534.986,360.182 535.555,358.057 536.123,355.638 536.691,353.261 537.26,351.027 537.828,345.689 538.396,343.723 538.965,340.624 539.533,337.858 540.101,335.123 540.67,335.413 541.238,333.403 541.806,329.379 542.375,327.519 542.943,324.739 543.511,321.981 544.08,320.42 544.648,317.854 545.216,316.282 545.785,313.719 546.353,312.345 546.921,309.858 547.49,308.701 548.058,307.545 548.627,301.211 549.195,299.19 549.763,299.236 550.332,297.216 550.9,296.097 551.468,293.147 552.037,292.298 552.605,289.509 553.173,288.965 553.742,289.065 554.31,288.567 554.878,287.578 555.447,284.804 556.015,282.03 556.583,281.62 557.152,282.962 557.72,282.276 558.288,282.639 558.857,279.962 559.425,280.117 559.993,279.343 560.562,277.588 561.13,278.052 561.698,276.26 562.267,275.796 562.835,275.208 563.404,272.367 563.972,271.972 564.54,270.414 565.109,267.916 565.677,267.61 566.245,264.209 566.814,263.107 567.382,263.289 567.95,264.146 568.519,263.802 569.087,260.616 569.655,259.638 570.224,258.662 570.792,257.743 571.36,258.966 571.929,257.703 572.497,257.592 573.065,256.636 573.634,256.542 574.202,254.484 574.77,254.852 575.339,256.065 575.907,256.061 576.476,253.83 577.044,253.795 577.612,252.942 578.181,253.034 578.749,253.098 579.317,252.015 579.886,252.182 580.454,252.237 581.022,252.347 581.591,252.234 582.159,251.344 582.727,251.567 583.296,252.758 583.864,253.685 584.432,254.568 585.001,253.432 585.569,251.327 586.137,252.279 586.706,253.225 587.274,252.898 587.842,252.521 588.411,253.345 588.979,252.89 589.547,251.556 590.116,251.213 590.684,251.061 591.253,252.755 591.821,250.199 592.389,252.206 592.958,251.849 593.526,250.567 594.094,249.059 594.663,248.841 595.231,247.682 595.799,248.615 596.368,247.398 596.936,249.214 597.504,247.914 598.073,248.592 598.641,247.144 599.209,248.101 599.778,246.712 600.346,246.453 600.914,246.238 601.483,247.044 602.051,249.958 602.619,248.241 603.188,246.655 603.756,242.172 604.325,241.09 604.893,242.279 605.461,243.318 606.03,242.017 606.598,243.87 607.166,242.773 607.735,241.643 608.303,240.521 608.871,240.546 609.44,238.651 610.008,238.824 610.576,238.929 611.145,238.953 611.713,239.305 612.281,240.42 612.85,239.517 613.418,239.654 613.986,236.563 614.555,240.954 615.123,239.705 615.691,241.704 616.26,240.672 616.828,240.568 617.396,240.698 617.965,237.438 618.533,234.336 619.102,233.731 619.67,233.153 620.238,231.49 620.807,227.894 621.375,228.658 621.943,231.384 622.512,231.189 623.08,228.5 623.648,229.46 624.217,229.058 624.785,229.649 625.353,229.413 625.922,231.157 626.49,232.683 627.058,233.33 627.627,234.901 628.195,236.438 628.763,236.779 629.332,236.925 629.9,238.357 630.468,238.427 631.037,236.501 631.605,236.857 632.173,237.089 632.742,239.228 633.31,237.877 633.879,238.899 634.447,237.938 635.015,239.126 635.584,236.108 636.152,233.355 636.72,233.742 637.289,236.086 637.857,235.32 638.425,236.508 638.994,236.849 639.562,235.913 640.13,235.091 640.699,235.245 641.267,240.858 641.835,239.707 642.404,239.677 642.972,238.627 643.54,237.544 644.109,235.573 644.677,235.802 645.245,235.135 645.814,235.369 646.382,234.436 646.951,234.736 647.519,234.895 648.087,232.218 648.656,233.599 649.224,231.735 649.792,232.215 650.361,234.714 650.929,234.025 651.497,234.243 652.066,233.397 652.634,232.827 653.202,233.065 653.771,232.189 654.339,230.439 654.907,230.075 655.476,229.601 656.044,233.353 656.612,233.751 657.181,234.133 657.749,236.749 658.317,237.948 658.886,237.919 659.454,233.828 660.022,232.029 660.591,233.523 661.159,233.487 661.728,232.807 662.296,234.045 662.864,233.29 663.433,233.643 664.001,231.807 664.569,229.963 665.138,231.41 665.706,231.994 666.274,232.2 666.843,234.488 667.411,236.716 667.979,238.817 668.548,238.496 669.116,239.582 669.684,240.18 670.253,241.078 670.821,242.785 671.389,241.211 671.958,241.062 672.526,239.649 673.094,239.446 673.663,239.087 674.231,239.312 674.799,239.208 675.368,240.058 675.936,238.841 676.505,238.654 677.073,238.567 677.641,238.428 678.21,239.212 678.778,240.072 679.346,241.048 679.915,240.72 680.483,236.133 681.051,238.06 681.62,237.877 682.188,236.63 682.756,237.208 683.325,238.081 683.893,237.725 684.461,239.568 685.03,238.062 685.598,237.473 686.166,237.171 686.735,236.703 687.303,236.311 687.871,235.019 688.44,233.925 689.008,232.808 689.577,231.673 690.145,229.418 690.713,230.761 691.282,231.955 691.85,230.938 692.418,231.2 692.987,231.403 693.555,230.674 694.123,230.683 694.692,231.028 695.26,229.136 695.828,231.647 696.397,232.798 696.965,230.871 697.533,233.296 698.102,232.478 698.67,231.602 699.238,232.018 699.807,230.523 700.375,228.721 700.943,231.211 701.512,230.515 702.08,229.997 702.648,231.343 703.217,233.713 703.785,233.722 704.354,232.86 704.922,233.036 705.49,232.345 706.059,230.464 706.627,230.929 707.195,233.225 707.764,234.377 708.332,235.432 708.9,234.354 709.469,235.501 710.037,233.383 710.605,233.371 711.174,234.293 711.742,237.299 712.31,237.102 712.879,236.944 713.447,235.622 714.015,233.345 714.584,232.212 715.152,231.291 715.72,233.63 716.289,232.577 716.857,230.724 717.425,230.927 717.994,230.098 718.562,230.373 719.131,231.659 719.699,232.59 720.267,232.572 720.836,232.594 721.404,230.658 721.972,229.708 722.541,230.015 723.109,229.405 723.677,231.855 724.246,230.933 724.814,234.069 725.382,231.008 725.951,230.386 726.519,231.723 727.087,230.708 727.656,229.844 728.224,232.148 728.792,233.395 729.361,235.627 729.929,233.031 730.497,235.049 731.066,231.952 731.634,230.062 732.203,229.234 732.771,229.415 733.339,228.782 733.908,228.376 734.476,229.503 735.044,229.809 735.613,232.067 736.181,231.088 736.749,231.171 737.318,230.294 737.886,231.781 738.454,231.875 739.023,233.205 739.591,234.239 740.159,234.072 740.728,234.017 741.296,232.9 741.864,231.926 742.433,230.303 743.001,231.576 743.569,232.828 744.138,232.97 744.706,235.287 745.274,234.33 745.843,236.261 746.411,236.028 746.98,233.845 747.548,233.895 748.116,232.837 748.685,233.767 749.253,231.487 749.821,232.687 750.39,233.853 750.958,234.875 751.526,234.751 752.095,234.647 752.663,234.562 753.231,234.569 753.8,234.479 754.368,234.44 754.936,236.251 755.505,235.68 756.073,235.459 756.641,234.089 757.21,232.941 757.778,234.1 758.346,233.038 758.915,231.874 759.483,233.04 760.052,232.963 760.62,233.244 761.188,230.966 761.757,230.928 762.325,231.068 762.893,229.047 763.462,228.17 764.03,229.744 764.598,232.31 765.167,233.348 765.735,233.242 766.303,234.201 766.872,234.082 767.44,231.905 768.008,236.135 768.577,236.65 769.145,235.344 769.713,236.04 770.282,236.683 770.85,237.304 771.418,237.062 771.987,234.646 772.555,232.429 773.123,230.382 773.692,229.663 774.26,227.847 774.829,229.158 775.397,232.558 775.965,229.541 776.534,230.29 777.102,227.15 777.67,226.605 778.239,227.102 778.807,228.495 779.375,232.812 779.944,230.455 780.512,230.506 781.08,231.519 781.649,231.376 782.217,234.297 782.785,235.179 783.354,235.895 783.922,234.568 784.49,234.24 785.059,232.893 785.627,233.533 786.195,233.401 786.764,233.215 787.332,233.152 787.9,231.949 788.469,231.788 789.037,231.721 789.606,231.519 790.174,231.321 790.742,230.088 791.311,228.102 791.879,228.197 792.447,227.362 793.016,228.713 793.584,228.866 794.152,226.901 794.721,226.244 795.289,225.574 795.857,225.237 796.426,225.569 796.994,226.997 797.562,226.299 798.131,227.772 798.699,227.003 799.267,229.531 799.836,227.572 800.404,228.076 800.972,229.295 801.541,230.529 802.109,230.547 802.678,230.815 803.246,230.104 803.814,233.434 804.383,231.339 804.951,231.372 805.519,231.372 806.088,231.556 806.656,232.847 807.224,232.801 807.793,234.709 808.361,234.599 808.929,235.186 809.498,233.08 810.066,231.941 810.634,230.86 811.203,231.755 811.771,229.628 812.339,227.696 812.908,230.016 813.476,229.934 814.044,231.032 814.613,232.048 815.181,232.992 815.749,232.072 816.318,232.945 816.886,231.919 817.455,232.114 818.023,233.287 818.591,234.052 819.16,234.13 819.728,235.053 820.296,235.814 820.865,233.683 821.433,234.625 822.001,233.338 822.57,231.212 823.138,230.324 823.706,230.42 824.275,230.424 824.843,230.632 825.411,229.992 825.98,229.291 826.548,230.503 827.116,231.483 827.685,230.713 828.253,230.877 828.821,230.025 829.39,230.204 829.958,233.526 830.526,233.348 831.095,233.266 831.663,231.086 832.232,232.043 832.8,231.085 833.368,228.044 833.937,229.191 834.505,229.383 835.073,229.648 835.642,229.825 836.21,226.914 836.778,227.312 837.347,229.733 837.915,229.791 838.483,228.923 839.052,230 839.62,230.173 840.188,231.353 840.757,232.458 841.325,233.476 841.893,232.335 842.462,232.328 843.03,232.38 843.598,232.492 844.167,232.76 844.735,231.536 845.304,231.678 845.872,235.759 846.44,234.302 847.009,234.165 847.577,232.06 848.145,231.091 848.714,232.193 849.282,232.098 849.85,233.297 850.419,233.088 850.987,236.112 851.555,235.716 852.124,234.312 852.692,234.051 853.26,233.836 853.829,231.576 854.397,231.651 854.965,229.543 855.534,230.631 856.102,230.383 856.67,234.816 857.239,234.63 857.807,234.438 858.375,233.897 858.944,233.477 859.512,230.145 860.081,229.012 860.649,227.214 861.217,225.434 861.786,226.812 862.354,225.965 862.922,226.559 863.491,229.878 864.059,230.036 864.627,229.167 865.196,227.291 865.764,227.598 866.332,227.749 866.901,228.062 867.469,228.413 868.037,229.883 868.606,229.956 869.174,230.164 869.742,230.414 870.311,230.524 870.879,229.825 871.447,229.016 872.016,230.222 872.584,229.253 873.152,229.335 873.721,232.605 874.289,233.485 874.858,233.276 875.426,232.125 875.994,231.934 876.563,231.125 877.131,230.984 877.699,230.809 878.268,232.905 878.836,232.806 879.404,234.991 879.973,232.752 880.541,233.656 881.109,233.349 881.678,231.055 882.246,232.067 882.814,232.046 883.383,233.956 883.951,233.718 884.519,233.751 885.088,233.499 885.656,232.252 886.224,232.084 886.793,232.98 887.361,231.863 887.93,231.701 888.498,231.602 889.066,230.497 889.635,227.421 890.203,227.573 890.771,227.846 891.34,227.121 891.908,228.483 892.476,229.548 893.045,229.736 893.613,228.952 894.181,230.014 894.75,230.982 895.318,232.058 895.886,230.712 896.455,229.647 897.023,228.731 897.591,227.967 898.16,226.075 898.728,227.357 899.296,226.541 899.865,224.796 900.433,224.202 901.001,225.928 901.57,226.351 902.138,226.809 902.707,226.022 903.275,225.632 903.843,228.518 904.412,228.946 904.98,229.047 905.548,229.19 906.117,229.443 906.685,229.55 907.253,229.586 907.822,227.838 908.39,227.126 908.958,228.558 909.527,228.968 910.095,228.267 910.663,228.542 911.232,228.725 911.8,227.863 912.368,232.419 912.937,232.406 913.505,231.347 914.073,232.6 914.642,231.618 915.21,234.684 915.779,236.432 916.347,237.073 916.915,237.822 917.484,238.615 918.052,239.128 918.62,239.393 919.189,238.816 919.757,237.978 920.325,238.436 920.894,235.731 921.462,236.449 922.03,234.93 922.599,234.826 923.167,234.482 923.735,233.373 924.304,232.38 924.872,231.381 925.44,231.511 926.009,230.599 926.577,231.555 927.145,231.716 927.714,230.659 928.282,231.753 928.85,232.403 929.419,233.163 929.987,233.977 930.556,234.792 931.124,235.644 931.692,236.34 932.261,237 932.829,236.638 933.397,235.049 933.966,235.811 934.534,235.091 935.102,235.626 935.671,237.014 936.239,236.189 936.807,237.036 937.376,236.432 937.944,235.699 938.512,234.297 939.081,233.893 939.649,232.517 940.217,230.097 940.786,228.888 941.354,229.815 941.922,228.534 942.491,228.822 943.059,224.755 943.627,225.429 944.196,226.495 944.764,226.532 945.333,226.794 945.901,229.042 946.469,230.089 947.038,230.99 947.606,230.8 948.174,230.611 948.743,230.379 949.311,230.056 949.879,231.179 950.448,232.177 951.016,234.134 951.584,232.95 952.153,232.807 952.721,232.653 953.289,232.278 953.858,234.225 954.426,234.764 954.994,233.384 955.563,232.903 956.131,232.676 956.699,231.299 957.268,229.954 957.836,227.758 958.405,228.754 958.973,229.736 959.541,228.507 960.11,229.611 960.678,229.655 961.246,227.793 961.815,226.827 962.383,225.762 962.951,224.891 963.52,225.22 964.088,226.655 964.656,228.958 965.225,228.036 965.793,227.269 966.361,227.252 966.93,226.164 967.498,227.44 968.066,228.572 968.635,227.533 969.203,228.899 969.771,226.8 970.34,227.279 970.908,228.436 971.476,228.731 972.045,228.744 972.613,227.844 973.182,226.961 973.75,226.032 974.318,225.15 974.887,223.568 975.455,224.722 976.023,225.405 976.592,223.868 977.16,224.285 977.728,224.781 978.297,223.965 978.865,223.127 979.433,221.641 980.002,224.486 980.57,225.051 981.138,223.259 981.707,221.693 982.275,224.574 982.843,224.784 983.412,225.139 983.98,227.8 984.548,228.106 985.117,227.617 985.685,230.239 986.253,230.355 986.822,230.604 987.39,231.583 987.959,232.569 988.527,232.586 989.095,234.415 989.664,234.578 990.232,233.372 990.8,232.357 991.369,232.263 991.937,232.325 992.505,231.125 993.074,229.24 993.642,230.521 994.21,229.763 994.779,228.875 995.347,228.107 995.915,227.39 996.484,227.55 997.052,229.967 997.62,229.073 998.189,230.249 998.757,228.429 999.325,228.641 999.894,229.99 1000.46,233.091 1001.03,233.019 1001.6,233.742 1002.17,234.715 1002.74,235.54 1003.3,234.333 1003.87,232.049 1004.44,233.011 1005.01,232.994 1005.58,230.954 1006.15,231.997 1006.71,234.134 1007.28,234.709 1007.85,235.337 1008.42,234.101 1008.99,234.821 1009.56,233.557 1010.12,232.301 1010.69,230.28 1011.26,231.321 1011.83,232.458 1012.4,232.352 1012.97,233.202 1013.53,235.311 1014.1,234.019 1014.67,235.68 1015.24,234.415 1015.81,234.278 1016.38,232.071 1016.94,230.04 1017.51,227.975 1018.08,226.154 1018.65,228.345 1019.22,225.501 1019.79,226.955 1020.35,228.646 1020.92,225.671 1021.49,225.167 1022.06,224.677 1022.63,227.287 1023.2,227.476 1023.76,226.535 1024.33,224.9 1024.9,229.393 1025.47,228.619 1026.04,228.881 1026.61,229.022 1027.17,227.338 1027.74,228.63 1028.31,231.023 1028.88,232.002 1029.45,231.9 1030.02,230.841 1030.58,227.901 1031.15,229.139 1031.72,230.512 1032.29,231.952 1032.86,229.673 1033.43,230.053 1033.99,231.11 1034.56,231.292 1035.13,229.436 1035.7,229.334 1036.27,230.574 1036.84,231.788 1037.4,232.85 1037.97,233.872 1038.54,232.703 1039.11,233.62 1039.68,232.624 1040.25,231.327 1040.81,230.486 1041.38,229.561 1041.95,227.572 1042.52,224.967 1043.09,223.552 1043.66,226.012 1044.22,227.523 1044.79,229.87 1045.36,230.115 1045.93,230.235 1046.5,232.348 1047.07,234.259 1047.63,232.114 1048.2,233.145 1048.77,233.236 1049.34,231.239 1049.91,230.252 1050.48,229.167 1051.05,229.405 1051.61,229.427 1052.18,227.646 1052.75,228.988 1053.32,230.093 1053.89,228.332 1054.46,227.313 1055.02,227.909 1055.59,227.114 1056.16,225.418 1056.73,228.011 1057.3,227.356 1057.87,228.67 1058.43,228.874 1059,228.071 1059.57,233.69 1060.14,233.58 1060.71,232.47 1061.28,232.469 1061.84,232.427 1062.41,232.482 1062.98,233.297 1063.55,234.31 1064.12,230.008 1064.69,229.147 1065.25,228.348 1065.82,229.442 1066.39,227.539 1066.96,229.054 1067.53,231.275 1068.1,231.203 1068.66,230.198 1069.23,231.507 1069.8,231.455 1070.37,230.656 1070.94,229.918 1071.51,230.212 1072.07,230.337 1072.64,231.607 1073.21,234.887 1073.78,235.747 1074.35,236.757 1074.92,234.559 1075.48,234.473 1076.05,236.492 1076.62,236.061 1077.19,237.949 1077.76,239.37 1078.33,235.833 1078.89,235.621 1079.46,237.386 1080.03,239.051 1080.6,238.49 1081.17,237.877 1081.74,238.427 1082.3,235.729 1082.87,237.576 1083.44,236.133 1084.01,235.716 1084.58,235.955 1085.15,236.53 1085.71,237.04 1086.28,235.271 1086.85,236.863 1087.42,236.151 1087.99,233.48 1088.56,233.295 1089.12,235.186 1089.69,233.605 1090.26,234.321 1090.83,232.671 1091.4,232.441 1091.97,230.438 1092.53,230.375 1093.1,232.314 1093.67,231.399 1094.24,231.256 1094.81,230.205 1095.38,230.135 1095.94,229.953 1096.51,230.766 1097.08,228.422 1097.65,227.458 1098.22,225.451 1098.79,227.498 1099.35,227.49 1099.92,228.475 1100.49,227.399 1101.06,226.771 1101.63,226.855 1102.2,227.109 1102.76,226.303 1103.33,227.52 1103.9,229.561 1104.47,229.625 1105.04,229.545 1105.61,229.584 1106.17,232.597 1106.74,230.455 1107.31,230.175 1107.88,230.064 1108.45,231.143 1109.02,231.012 1109.58,231.022 1110.15,229.723 1110.72,229.654 1111.29,229.692 1111.86,229.729 1112.43,229.936 1112.99,228.85 1113.56,229.929 1114.13,230.043 1114.7,230.983 1115.27,228.77 1115.84,229.837 1116.4,233.988 1116.97,234.569 1117.54,234.131 1118.11,232.614 1118.68,232.445 1119.25,231.322 1119.81,229.243 1120.38,228.295 1120.95,228.438 1121.52,228.432 1122.09,227.693 1122.66,226.729 1123.23,229.023 1123.79,227.964 1124.36,227.239 1124.93,225.594 1125.5,225.85 1126.07,225.123 1126.64,226.473 1127.2,224.683 1127.77,225.083 1128.34,226.641 1128.91,225.904 1129.48,225.335 1130.05,226.607 1130.61,224.984 1131.18,225.258 1131.75,227.716 1132.32,228.031 1132.89,227.078 1133.46,226.329 1134.02,227.801 1134.59,229.024 1135.16,228.307 1135.73,229.439 1136.3,230.343 1136.87,230.417 1137.43,231.666 1138,231.588 1138.57,233.543 1139.14,236.59 1139.71,238.25 1140.28,236.851 1140.84,235.23 1141.41,234.126 1141.98,235.999 1142.55,237.718 1143.12,237.291 1143.69,237.698 1144.25,236.976 1144.82,233.313 1145.39,231.75 1145.96,230.575 1146.53,233.738 1147.1,234.279 1147.66,232.986 1148.23,231.816 1148.8,230.614 1149.37,230.59 1149.94,232.648 1150.51,233.503 1151.07,233.263 1151.64,232.279 1152.21,228.767 1152.78,230.712 1153.35,230.734 1153.92,232.692 1154.48,230.351 1155.05,231.466 1155.62,232.369 1156.19,232.33 1156.76,234.074 1157.33,233.006 1157.89,230.65 1158.46,231.573 1159.03,232.475 1159.6,230.29 1160.17,229.485 1160.74,228.676 1161.3,229.448 1161.87,230.38 1162.44,228.228 1163.01,230.452 1163.58,230.539 1164.15,230.239 1164.71,230.166 1165.28,227.995 1165.85,228.104 1166.42,229.388 1166.99,231.367 1167.56,229.224 1168.12,230.148 1168.69,230.148 1169.26,230.117 1169.83,231.081 1170.4,230.069 1170.97,229.948 1171.53,227.805 1172.1,229.01 1172.67,226.862 1173.24,227.111 1173.81,227.512 1174.38,229.801 1174.94,230.071 1175.51,229.002 1176.08,228.101 1176.65,228.154 1177.22,230.494 1177.79,229.525 1178.35,229.798 1178.92,230.986 1179.49,229.997 1180.06,229.036 1180.63,225.973 1181.2,227.22 1181.76,226.285 1182.33,227.545 1182.9,229.805 1183.47,231.035 1184.04,228.969 1184.61,230.177 1185.17,230.072 1185.74,228.915 1186.31,230.923 1186.88,227.962 1187.45,229.198 1188.02,229.209 1188.58,228.162 1189.15,231.41 1189.72,229.307 1190.29,229.511 1190.86,230.527 1191.43,232.647 1192,232.484 1192.56,229.977 1193.13,230.16 1193.7,230.409 1194.27,229.204 1194.84,228.35 1195.41,227.422 1195.97,228.583 1196.54,227.888 1197.11,227.091 1197.68,227.457 1198.25,226.69 1198.82,229.225 1199.38,229.235 1199.95,226.449 1200.52,225.711 1201.09,228.091 1201.66,229.349 1202.23,230.746 1202.79,230.773 1203.36,229.84 1203.93,230.98 1204.5,232.01 1205.07,229.748 1205.64,227.715 1206.2,227.22 1206.77,229.469 1207.34,228.403 1207.91,229.736 1208.48,232.955 1209.05,234.045 1209.61,234.806 1210.18,233.562 1210.75,233.358 1211.32,234.112 1211.89,232.841 1212.46,231.424 1213.02,231.151 1213.59,229.204 1214.16,229.42 1214.73,230.577 1215.3,231.777 1215.87,231.608 1216.43,232.624 1217,231.58 1217.57,230.787 1218.14,229.805 1218.71,231.916 1219.28,231.693 1219.84,232.582 1220.41,230.419 1220.98,232.34 1221.55,231.248 1222.12,232.08 1222.69,229.977 1223.25,231.027 1223.82,227.973 1224.39,228.249 1224.96,228.539 1225.53,230.926 1226.1,233.097 1226.66,231.936 1227.23,234.006 1227.8,231.679 1228.37,231.832 1228.94,231.78 1229.51,231.599 1230.07,232.58 1230.64,232.507 1231.21,233.573 1231.78,232.051 1232.35,236.1 1232.92,235.636 1233.48,236.092 1234.05,234.746 1234.62,236.555 1235.19,238.324 1235.76,236.678 1236.33,235.115 1236.89,232.563 1237.46,233.332 1238.03,233.055 1238.6,232.724 1239.17,231.519 1239.74,230.601 1240.3,230.295 1240.87,233.403 1241.44,233.213 1242.01,236.001 1242.58,233.754 1243.15,232.62 1243.71,231.429 1244.28,232.343 1244.85,232.424 1245.42,231.358 1245.99,229.069 1246.56,228.112 1247.12,230.185 1247.69,232.167 1248.26,231.933 1248.83,229.412 1249.4,232.563 1249.97,231.408 1250.53,229.26 1251.1,229.115 1251.67,230.039 1252.24,229.03 1252.81,229.136 1253.38,228.932 1253.94,228.939 1254.51,230.177 1255.08,227.992 1255.65,228.131 1256.22,230.197 1256.79,230.158 1257.35,233.244 1257.92,233.202 1258.49,230.799 1259.06,230.512 1259.63,229.431 1260.2,230.378 1260.76,231.221 1261.33,231.959 1261.9,235.844 1262.47,235.137 1263.04,233.812 1263.61,231.296 1264.18,233.066 1264.74,234.686 1265.31,232.434 1265.88,232.24 1266.45,230.76 1267.02,231.584 1267.59,230.276 1268.15,229.002 1268.72,231.057 1269.29,230.764 1269.86,229.57 1270.43,231.64 1271,233.611 1271.56,233.419 1272.13,233.193 1272.7,233 1273.27,232.495 1273.84,230.413 1274.41,231.223 1274.97,229.987 1275.54,232.096 1276.11,229.713 1276.68,230.63 1277.25,228.221 1277.82,227.5 1278.38,226.742 1278.95,227.906 1279.52,228.929 1280.09,228.012 1280.66,230.049 1281.23,229.897 1281.79,229.66 1282.36,230.829 1282.93,231.645 1283.5,230.334 1284.07,231.023 1284.64,231.019 1285.2,231.95 1285.77,231.841 1286.34,230.525 1286.91,228.324 1287.48,229.389 1288.05,229.254 1288.61,228.154 1289.18,228.231 1289.75,228.322 1290.32,229.102 1290.89,227.171 1291.46,225.125 1292.02,225.24 1292.59,225.211 1293.16,222.439 1293.73,223.984 1294.3,225.827 1294.87,225.272 1295.43,225.534 1296,225.947 1296.57,224.105 1297.14,224.321 1297.71,224.685 1298.28,225.088 1298.84,227.359 1299.41,226.69 1299.98,226.053 1300.55,226.355 1301.12,225.736 1301.69,226.154 1302.25,226.434 1302.82,226.667 1303.39,225.993 1303.96,228.414 1304.53,229.838 1305.1,231.098 1305.66,229.06 1306.23,229.113 1306.8,227.507 1307.37,226.798 1307.94,227.997 1308.51,227.889 1309.07,227.98 1309.64,230.21 1310.21,230.322 1310.78,227.198 1311.35,227.383 1311.92,227.73 1312.48,226.982 1313.05,227.369 1313.62,227.47 1314.19,226.683 1314.76,228.051 1315.33,228.49 1315.89,228.797 1316.46,228.164 1317.03,233.653 1317.6,231.519 1318.17,231.365 1318.74,231.172 1319.3,231.173 1319.87,232.254 1320.44,231.227 1321.01,230.206 1321.58,230.259 1322.15,232.477 1322.71,232.615 1323.28,234.457 1323.85,233.339 1324.42,233.27 1324.99,233.978 1325.56,232.831 1326.12,233.81 1326.69,233.328 1327.26,234.186 1327.83,235.077 1328.4,234.009 1328.97,233.934 1329.53,231.698 1330.1,231.617 1330.67,231.542 1331.24,229.649 1331.81,230.789 1332.38,230.742 1332.94,229.842 1333.51,229.111 1334.08,231.471 1334.65,230.475 1335.22,231.381 1335.79,231.232 1336.36,232.224 1336.92,230.958 1337.49,229.88 1338.06,228.973 1338.63,229.024 1339.2,229.217 1339.77,230.353 1340.33,231.696 1340.9,230.563 1341.47,231.689 1342.04,230.757 1342.61,229.812 1343.18,226.668 1343.74,226.816 1344.31,229.054 1344.88,226.118 1345.45,226.237 1346.02,227.688 1346.59,226.97 1347.15,227.26 1347.72,229.441 1348.29,228.492 1348.86,229.989 1349.43,231.302 1350,231.41 1350.56,231.282 1351.13,231.104 1351.7,233.164 1352.27,231.858 1352.84,232.725 1353.41,233.506 1353.97,234.428 1354.54,234.19 1355.11,235.008 1355.68,231.502 1356.25,231.248 1356.82,230.097 1357.38,231.315 1357.95,232.133 1358.52,232.831 1359.09,232.753 1359.66,232.688 1360.23,231.608 1360.79,232.51 1361.36,233.412 1361.93,233.165 1362.5,232.904 1363.07,229.461 1363.64,229.484 1364.2,228.38 1364.77,230.395 1365.34,230.521 1365.91,230.238 1366.48,231.079 1367.05,231.11 1367.61,230.822 1368.18,231.077 1368.75,230.204 1369.32,229.21 1369.89,230.28 1370.46,230.321 1371.02,229.194 1371.59,227.046 1372.16,225.272 1372.73,225.731 1373.3,226.252 1373.87,225.603 1374.43,225.017 1375,226.337 1375.57,227.494 1376.14,227.904 1376.71,228.341 1377.28,228.496 1377.84,227.855 1378.41,226.945 1378.98,226.53 1379.55,225.779 1380.12,226.127 1380.69,224.416 1381.25,222.802 1381.82,221.434 1382.39,221.053 1382.96,222.748 1383.53,226.547 1384.1,227.899 1384.66,226.113 1385.23,227.415 1385.8,225.869 1386.37,228.147 1386.94,227.317 1387.51,226.659 1388.07,227.93 1388.64,228.872 1389.21,230.14 1389.78,230.186 1390.35,230.153 1390.92,230.076 1391.48,230.467 1392.05,229.758 1392.62,232.062 1393.19,231.247 1393.76,232.383 1394.33,233.483 1394.89,234.5 1395.46,234.265 1396.03,230.954 1396.6,232.191 1397.17,232.208 1397.74,233.319 1398.3,235.175 1398.87,233.984 1399.44,234.931 1400.01,232.577 1400.58,233.55 1401.15,233.312 1401.71,234.061 1402.28,235.004 1402.85,233.584 1403.42,231.422 1403.99,234.459 1404.56,232.321 1405.13,234.675 1405.69,233.484 1406.26,234.406 1406.83,233.127 1407.4,232.949 1407.97,234.006 1408.54,232.778 1409.1,233.938 1409.67,234.648 1410.24,233.33 1410.81,232.991 1411.38,232.775 1411.95,232.578 1412.51,230.329 1413.08,230.414 1413.65,231.519 1414.22,232.551 1414.79,232.662 1415.36,232.296 1415.92,232.186 1416.49,233.205 1417.06,234.867 1417.63,232.379 1418.2,233.091 1418.77,230.161 1419.33,229.344 1419.9,228.47 1420.47,227.696 1421.04,228.092 1421.61,227.121 1422.18,227.431 1422.74,227.866 1423.31,230.077 1423.88,228.951 1424.45,229.027 1425.02,229.116 1425.59,228.205 1426.15,228.442 1426.72,227.609 1427.29,226.792 1427.86,228.237 1428.43,228.647 1429,229.043 1429.56,229.134 1430.13,231.262 1430.7,230.191 1431.27,229.083 1431.84,230.443 1432.41,228.59 1432.97,228.657 1433.54,227.747 1434.11,228.015 1434.68,229.322 1435.25,229.258 1435.82,230.545 1436.38,229.653 1436.95,229.791 1437.52,230.898 1438.09,230.989 1438.66,231.908 1439.23,232.946 1439.79,232.124 1440.36,232.099 1440.93,231.972 1441.5,231.136 1442.07,230.121 1442.64,231.248 1443.2,230.195 1443.77,230.416 1444.34,229.398 1444.91,230.501 1445.48,231.463 1446.05,234.624 1446.61,233.413 1447.18,235.481 1447.75,234.961 1448.32,234.771 1448.89,233.327 1449.46,229.954 1450.02,230.019 1450.59,231.425 1451.16,229.457 1451.73,229.464 1452.3,230.41 1452.87,232.632 1453.43,233.305 1454,231.987 1454.57,232.662 1455.14,229.581 1455.71,230.844 1456.28,228.873 1456.84,228.865 1457.41,229.162 1457.98,229.523 1458.55,226.387 1459.12,225.835 1459.69,229.286 1460.25,229.148 1460.82,228.199 1461.39,228.241 1461.96,228.396 1462.53,226.555 1463.1,227.818 1463.66,228.88 1464.23,230.147 1464.8,229.095 1465.37,228.232 1465.94,228.594 1466.51,229.784 1467.07,230.805 1467.64,231.03 1468.21,232.074 1468.78,231.226 1469.35,230.248 1469.92,231.374 1470.48,231.346 1471.05,233.177 1471.62,234.027 1472.19,232.707 1472.76,233.512 1473.33,234.307 1473.89,235.081 1474.46,235.991 1475.03,239.464 1475.6,238.846 1476.17,237.524 1476.74,235.197 1477.31,232.877 1477.87,233.767 1478.44,233.57 1479.01,234.227 1479.58,232.921 1480.15,233.554 1480.72,233.217 1481.28,233.035 1481.85,233.756 1482.42,232.524 1482.99,233.369 1483.56,233.281 1484.13,233.052 1484.69,231.745 1485.26,231.339 1485.83,232.196 1486.4,232.095 1486.97,229.736 1487.54,227.923 1488.1,226.771 1488.67,228.063 1489.24,227.287 1489.81,227.52 1490.38,228.745 1490.95,229.769 1491.51,230.661 1492.08,231.774 1492.65,233.541 1493.22,233.207 1493.79,233.127 1494.36,232.025 1494.92,231.976 1495.49,232.939 1496.06,230.368 1496.63,230.302 1497.2,229.304 1497.77,229.513 1498.33,230.531 1498.9,227.211 1499.47,227.41 1500.04,227.572 1500.61,226.605 1501.18,227.98 1501.74,230.237 1502.31,229.292 1502.88,230.329 1503.45,230.298 1504.02,230.294 1504.59,230.075 1505.15,230.094 1505.72,229.108 1506.29,229.163 1506.86,228.339 1507.43,228.427 1508,229.62 1508.56,231.792 1509.13,231.636 1509.7,232.538 1510.27,233.503 1510.84,232.25 1511.41,232.951 1511.97,235.73 1512.54,235.36 1513.11,237.005 1513.68,237.256 1514.25,235.565 1514.82,235.029 1515.38,235.385 1515.95,234.942 1516.52,233.301 1517.09,232.157 1517.66,230.905 1518.23,228.541 1518.79,224.566 1519.36,224.869 1519.93,225.323 1520.5,226.499 1521.07,226.591 1521.64,226.689 1522.2,226.689 1522.77,227.669 1523.34,228.811 1523.91,226.906 1524.48,229.033 1525.05,229.115 1525.61,228.082 1526.18,228.194 1526.75,229.359 1527.32,227.456 1527.89,227.51 1528.46,228.671 1529.02,230.869 1529.59,229.642 1530.16,229.57 1530.73,232.589 1531.3,232.221 1531.87,232.041 1532.43,231.104 1533,228.919 1533.57,228.056 1534.14,228.286 1534.71,226.631 1535.28,226.913 1535.84,227.359 1536.41,228.548 1536.98,230.705 1537.55,231.432 1538.12,230.257 1538.69,233.285 1539.25,234.107 1539.82,234.864 1540.39,233.63 1540.96,235.382 1541.53,232.645 1542.1,233.313 1542.66,232.915 1543.23,233.757 1543.8,234.499 1544.37,232.936 1544.94,233.671 1545.51,233.329 1546.08,233.232 1546.64,230.814 1547.21,231.743 1547.78,230.555 1548.35,230.507 1548.92,229.564 1549.49,229.589 1550.05,232.634 1550.62,234.491 1551.19,234.362 1551.76,233.645 1552.33,234.405 1552.9,234.126 1553.46,233.695 1554.03,232.3 1554.6,233.138 1555.17,232.96 1555.74,230.403 1556.31,233.624 1556.87,233.224 1557.44,230.613 1558.01,230.441 1558.58,232.4 1559.15,233.049 1559.72,231.579 1560.28,232.339 1560.85,231.987 1561.42,230.999 1561.99,228.601 1562.56,229.507 1563.13,227.545 1563.69,228.615 1564.26,229.476 1564.83,227.251 1565.4,227.388 1565.97,226.455 1566.54,226.571 1567.1,227.625 1567.67,227.751 1568.24,226.564 1568.81,225.573 1569.38,226.949 1569.95,227.298 1570.51,227.549 1571.08,227.836 1571.65,226.949 1572.22,228.143 1572.79,228.901 1573.36,227.813 1573.92,225.832 1574.49,227.059 1575.06,227.296 1575.63,225.716 1576.2,225.088 1576.77,223.335 1577.33,223.684 1577.9,225.116 1578.47,226.737 1579.04,225.824 1579.61,225.117 1580.18,226.572 1580.74,229.058 1581.31,228.08 1581.88,229.34 1582.45,226.488 1583.02,226.82 1583.59,225.977 1584.15,224.468 1584.72,226.97 1585.29,227.169 1585.86,226.544 1586.43,229.124 1587,231.576 1587.56,230.546 1588.13,230.655 1588.7,228.713 1589.27,228.86 1589.84,230.003 1590.41,227.976 1590.97,227.303 1591.54,229.805 1592.11,231.729 1592.68,231.563 1593.25,231.563 1593.82,233.515 1594.38,232.217 1594.95,230.111 1595.52,231.006 1596.09,231.051 1596.66,233.236 1597.23,234.122 1597.79,232.833 1598.36,232.692 1598.93,233.605 1599.5,230.401 1600.07,230.435 1600.64,230.407 1601.2,230.446 1601.77,230.484 1602.34,229.618 1602.91,230.654 1603.48,231.909 1604.05,229.612 1604.61,231.748 1605.18,232.643 1605.75,230.179 1606.32,229.998 1606.89,228.934 1607.46,230.006 1608.02,227.913 1608.59,228.294 1609.16,229.453 1609.73,228.226 1610.3,229.298 1610.87,229.4 1611.43,227.447 1612,228.866 1612.57,227.886 1613.14,229.207 1613.71,228.493 1614.28,230.842 1614.84,230.931 1615.41,228.863 1615.98,228.12 1616.55,228.177 1617.12,227.502 1617.69,227.803 1618.26,228.985 1618.82,230.358 1619.39,232.48 1619.96,231.396 1620.53,231.332 1621.1,233.2 1621.67,231.905 1622.23,231.916 1622.8,232.01 1623.37,230.808 1623.94,231.754 1624.51,230.542 1625.08,230.499 1625.64,229.531 1626.21,230.856 1626.78,232.789 1627.35,232.406 1627.92,233.647 1628.49,235.45 1629.05,235.928 1629.62,233.679 1630.19,232.309 1630.76,233.171 1631.33,233.142 1631.9,231.742 1632.46,230.713 1633.03,230.775 1633.6,230.556 1634.17,233.544 1634.74,232.27 1635.31,231.985 1635.87,230.79 1636.44,231.816 1637.01,230.622 1637.58,229.492 1638.15,229.703 1638.72,228.488 1639.28,228.667 1639.85,228.756 1640.42,228.786 1640.99,230.676 1641.56,230.697 1642.13,231.767 1642.69,231.731 1643.26,230.297 1643.83,229.348 1644.4,230.556 1644.97,231.702 1645.54,230.56 1646.1,230.434 1646.67,229.191 1647.24,227.215 1647.81,228.534 1648.38,227.658 1648.95,228.831 1649.51,227.887 1650.08,228.252 1650.65,228.303 1651.22,228.476 1651.79,226.415 1652.36,226.595 1652.92,225.871 1653.49,227.176 1654.06,225.441 1654.63,223.939 1655.2,223.469 1655.77,224.166 1656.33,222.792 1656.9,227.745 1657.47,225.71 1658.04,229.224 1658.61,230.451 1659.18,230.867 1659.74,231.739 1660.31,231.805 1660.88,231.827 1661.45,231.805 1662.02,232.73 1662.59,234.564 1663.15,235.481 1663.72,233.114 1664.29,232.94 1664.86,232.85 1665.43,231.607 1666,232.713 1666.56,233.693 1667.13,233.293 1667.7,233.172 1668.27,231.985 1668.84,232.206 1669.41,233.304 1669.97,232.074 1670.54,232.073 1671.11,231.89 1671.68,232.957 1672.25,234.837 1672.82,232.567 1673.38,229.289 1673.95,228.092 1674.52,228.276 1675.09,224.437 1675.66,227.98 1676.23,227.33 1676.79,228.755 1677.36,227.75 1677.93,228.82 1678.5,230.062 1679.07,231.191 1679.64,231.235 1680.2,228.941 1680.77,231.255 1681.34,229.453 1681.91,230.687 1682.48,230.538 1683.05,230.782 1683.61,230.753 1684.18,230.589 1684.75,229.624 1685.32,230.627 1685.89,231.857 1686.46,229.722 1687.02,229.636 1687.59,228.886 1688.16,227.878 1688.73,229.047 1689.3,229.229 1689.87,229.342 1690.44,229.41 1691,228.552 1691.57,229.772 1692.14,227.873 1692.71,226.103 1693.28,225.531 1693.85,227.021 1694.41,227.199 1694.98,226.595 1695.55,227.919 1696.12,229.384 1696.69,230.463 1697.26,230.493 1697.82,230.601 1698.39,229.563 1698.96,229.82 1699.53,229.901 1700.1,231.014 1700.67,232.068 1701.23,230.095 1701.8,231.213 1702.37,231.273 1702.94,232.272 1703.51,234.132 1704.08,236.088 1704.64,233.672 1705.21,233.286 1705.78,234.143 1706.35,234.913 1706.92,234.693 1707.49,234.602 1708.05,235.506 1708.62,237.279 1709.19,236.926 1709.76,235.337 1710.33,236.232 1710.9,235.706 1711.46,234.482 1712.03,235.061 1712.6,234.816 1713.17,232.376 1713.74,234.305 1714.31,234.998 1714.87,232.705 1715.44,232.498 1716.01,232.564 1716.58,233.366 1717.15,230.968 1717.72,231.988 1718.28,232.164 1718.85,231.962 1719.42,231.136 1719.99,230.075 1720.56,230.106 1721.13,230.938 1721.69,231.123 1722.26,233.112 1722.83,234.039 1723.4,231.446 1723.97,230.055 1724.54,230.829 1725.1,234.952 1725.67,235.553 1726.24,235.136 1726.81,232.629 1727.38,231.242 1727.95,232.17 1728.51,231.815 1729.08,233.494 1729.65,233.211 1730.22,235.046 1730.79,235.796 1731.36,234.479 1731.92,237.275 1732.49,236.676 1733.06,238.235 1733.63,241.782 1734.2,237.714 1734.77,238.972 1735.33,240.339 1735.9,241.329 1736.47,241.242 1737.04,238.177 1737.61,237.457 1738.18,235.758 1738.74,235.17 1739.31,234.423 1739.88,232.8 1740.45,231.358 1741.02,228.248 1741.59,227.139 1742.15,227.009 1742.72,225.981 1743.29,226.13 1743.86,225.205 1744.43,224.461 1745,225.705 1745.56,224.824 1746.13,225.133 1746.7,224.395 1747.27,225.818 1747.84,221.965 1748.41,224.403 1748.97,223.773 1749.54,223.99 1750.11,225.477 1750.68,224.82 1751.25,222.916 1751.82,225.5 1752.38,226.761 1752.95,227.943 1753.52,231.11 1754.09,230.95 1754.66,225.637 1755.23,224.605 1755.79,224.31 1756.36,225.545 1756.93,226.634 1757.5,224.689 1758.07,226.039 1758.64,225.334 1759.21,223.472 1759.77,223.065 1760.34,223.634 1760.91,226.012 1761.48,230.367 1762.05,231.303 1762.62,232.071 1763.18,232.951 1763.75,233.719 1764.32,235.765 1764.89,233.326 1765.46,236.301 1766.03,237.164 1766.59,237.43 1767.16,234.74 1767.73,230.316 1768.3,231.2 1768.87,235.437 1769.44,234.11 1770,231.773 1770.57,232.476 1771.14,236.525 1771.71,237.18 1772.28,236.404 1772.85,236.956 1773.41,237.475 1773.98,235.9 1774.55,235.185 1775.12,233.739 1775.69,235.253 1776.26,233.875 1776.82,233.635 1777.39,233.424 1777.96,232.031 1778.53,231.686 1779.1,231.376 1779.67,230.104 1780.23,230.03 1780.8,228.732 1781.37,227.793 1781.94,226.69 1782.51,227.787 1783.08,228.991 1783.64,228.714 1784.21,228.59 1784.78,228.825 1785.35,228.767 1785.92,229.714 1786.49,228.631 1787.05,227.684 1787.62,227.842 1788.19,228.058 1788.76,228.9 1789.33,227.774 1789.9,228.936 1790.46,227.937 1791.03,227.879 1791.6,227.865 1792.17,227.814 1792.74,225.674 1793.31,227.066 1793.87,224.262 1794.44,223.509 1795.01,224.87 1795.58,225.312 1796.15,225.716 1796.72,225.053 1797.28,221.324 1797.85,221.038 1798.42,221.503 1798.99,221.979 1799.56,226.693 1800.13,226.002 1800.69,227.286 1801.26,227.645 1801.83,224.952 1802.4,222.363 1802.97,219.895 1803.54,220.827 1804.1,222.48 1804.67,222.865 1805.24,224.429 1805.81,224.793 1806.38,227.291 1806.95,226.632 1807.51,227.042 1808.08,228.411 1808.65,229.779 1809.22,229.082 1809.79,229.251 1810.36,228.307 1810.92,226.53 1811.49,226.874 1812.06,228.373 1812.63,228.783 1813.2,228.994 1813.77,232.3 1814.33,232.481 1814.9,232.298 1815.47,232.106 1816.04,231.109 1816.61,231.53 1817.18,231.512 1817.74,231.428 1818.31,231.459 1818.88,230.535 1819.45,229.574 1820.02,228.85 1820.59,229.96 1821.15,232.079 1821.72,230.094 1822.29,230.104 1822.86,232.231 1823.43,229.047 1824,229.113 1824.56,229.357 1825.13,229.587 1825.7,229.878 1826.27,231.082 1826.84,231.35 1827.41,231.202 1827.97,230.006 1828.54,228.789 1829.11,230.249 1829.68,231.456 1830.25,230.512 1830.82,229.644 1831.39,229.988 1831.95,229.899 1832.52,230.863 1833.09,230.852 1833.66,231.673 1834.23,230.52 1834.8,231.631 1835.36,232.51 1835.93,233.448 1836.5,229.964 1837.07,231.268 1837.64,230.355 1838.21,231.505 1838.77,229.369 1839.34,231.591 1839.91,232.589 1840.48,235.701 1841.05,235.465 1841.62,235.248 1842.18,235.05 1842.75,232.9 1843.32,231.887 1843.89,232.948 1844.46,232.697 1845.03,230.409 1845.59,226.538 1846.16,226.903 1846.73,226.092 1847.3,226.408 1847.87,226.762 1848.44,225.049 1849,225.573 1849.57,227.143 1850.14,228.377 1850.71,228.624 1851.28,225.742 1851.85,227.351 1852.41,227.749 1852.98,226.011 1853.55,229.385 1854.12,229.388 1854.69,228.659 1855.26,226.969 1855.82,229.281 1856.39,228.349 1856.96,231.736 1857.53,231.883 1858.1,233.034 1858.67,235.041 1859.23,234.671 1859.8,233.594 1860.37,233.458 1860.94,233.211 1861.51,234.102 1862.08,233.929 1862.64,233.02 1863.21,232.924 1863.78,232.984 1864.35,232.632 1864.92,232.579 1865.49,234.888 1866.05,233.384 1866.62,233.346 1867.19,234.139 1867.76,233.887 1868.33,232.718 1868.9,232.471 1869.46,232.568 1870.03,231.519 1870.6,231.377 1871.17,231.399 1871.74,228.208 1872.31,228.55 1872.87,229.8 1873.44,230.693 1874.01,232.93 1874.58,233.773 1875.15,233.559 1875.72,232.549 1876.28,233.484 1876.85,233.272 1877.42,232.896 1877.99,231.723 1878.56,230.519 1879.13,232.514 1879.69,231.172 1880.26,233.156 1880.83,234.149 1881.4,235.093 1881.97,234.703 1882.54,234.357 1883.1,234.224 1883.67,234.141 1884.24,230.79 1884.81,229.744 1885.38,229.059 1885.95,231.293 1886.51,225.954 1887.08,226.233 1887.65,226.636 1888.22,227.874 1888.79,228.814 1889.36,229.897 1889.92,228.928 1890.49,230.086 1891.06,229.842 1891.63,228.772 1892.2,231.999 1892.77,231.788 1893.33,232.625 1893.9,230.368 1894.47,226.103 1895.04,226.43 1895.61,227.72 1896.18,226.966 1896.74,227.173 1897.31,226.503 1897.88,226.871 1898.45,228.233 1899.02,225.494 1899.59,226.753 1900.16,225.98 1900.72,225.049 1901.29,228.338 1901.86,227.704 1902.43,226.681 1903,228.029 1903.57,229.47 1904.13,229.59 1904.7,228.914 1905.27,229.13 1905.84,231.414 1906.41,232.133 1906.98,233.037 1907.54,234.002 1908.11,232.689 1908.68,234.64 1909.25,234.664 1909.82,236.424 1910.39,235.73 1910.95,234.573 1911.52,232.23 1912.09,232.982 1912.66,232.869 1913.23,233.539 1913.8,233.306 1914.36,235.35 1914.93,236.103 1915.5,234.998 1916.07,235.376 1916.64,235.122 1917.21,235.672 1917.77,236.306 1918.34,235.688 1918.91,233.337 1919.48,235.097 1920.05,233.601 1920.62,232.272 1921.18,234.255 1921.75,236.048 1922.32,234.585 1922.89,233.088 1923.46,232.817 1924.03,234.697 1924.59,234.254 1925.16,233.768 1925.73,232.485 1926.3,230.039 1926.87,232.014 1927.44,230.787 1928,231.588 1928.57,231.217 1929.14,231.142 1929.71,229.996 1930.28,226.101 1930.85,227.157 1931.41,227.182 1931.98,228.104 1932.55,229.364 1933.12,228.306 1933.69,229.21 1934.26,227.062 1934.82,226.284 1935.39,224.376 1935.96,224.703 1936.53,223.262 1937.1,221.74 1937.67,224.179 1938.23,224.624 1938.8,225.064 1939.37,224.618 1939.94,224.669 1940.51,227.036 1941.08,228.143 1941.64,228.38 1942.21,229.559 1942.78,229.417 1943.35,227.587 1943.92,226.866 1944.49,228.192 1945.05,227.536 1945.62,229.793 1946.19,229.967 1946.76,230.099 1947.33,231.164 1947.9,231.288 1948.46,232.178 1949.03,233.089 1949.6,231.975 1950.17,227.91 1950.74,226.975 1951.31,227.302 1951.87,228.686 1952.44,228.694 1953.01,228.472 1953.58,228.598 1954.15,228.7 1954.72,227.945 1955.28,226.145 1955.85,227.423 1956.42,228.828 1956.99,231.039 1957.56,230.274 1958.13,230.189 1958.69,229.248 1959.26,230.598 1959.83,229.664 1960.4,230.852 1960.97,232.092 1961.54,231.017 1962.1,232.097 1962.67,231.032 1963.24,232.134 1963.81,232.277 1964.38,231.207 1964.95,229.1 1965.51,230.431 1966.08,232.604 1966.65,230.163 1967.22,229.321 1967.79,228.454 1968.36,228.641 1968.92,228.688 1969.49,231.962 1970.06,233.914 1970.63,238.839 1971.2,238.337 1971.77,238.632 1972.34,237.968 1972.9,238.112 1973.47,239.803 1974.04,238.378 1974.61,237.844 1975.18,237.372 1975.75,235.88 1976.31,237.325 1976.88,234.657 1977.45,233.986 1978.02,233.587 1978.59,234.443 1979.16,235.233 1979.72,233.638 1980.29,232.441 1980.86,230.185 1981.43,230.114 1982,230.96 1982.57,231.8 1983.13,232.757 1983.7,234.437 1984.27,235.167 1984.84,233.695 1985.41,231.422 1985.98,231.279 1986.54,229.904 1987.11,230.67 1987.68,230.493 1988.25,230.714 1988.82,227.6 1989.39,227.736 1989.95,226.588 1990.52,223.692 1991.09,224.986 1991.66,224.28 1992.23,224.493 1992.8,226.756 1993.36,226.962 1993.93,226.064 1994.5,226.484 1995.07,225.507 1995.64,226.838 1996.21,228.026 1996.77,229.336 1997.34,228.569 1997.91,228.754 1998.48,228.956 1999.05,228.907 1999.62,228.86 2000.18,227.95 2000.75,228.205 2001.32,226.339 2001.89,228.692 2002.46,227.523 2003.03,227.813 2003.59,229.015 2004.16,229.204 2004.73,230.363 2005.3,229.638 2005.87,228.9 2006.44,229.077 2007,234.263 2007.57,231.063 2008.14,231.904 2008.71,231.863 2009.28,231.647 2009.85,232.473 2010.41,231.118 2010.98,231.1 2011.55,230.052 2012.12,233.2 2012.69,230.974 2013.26,232.83 2013.82,232.548 2014.39,230.361 2014.96,230.229 2015.53,233.548 2016.1,233.132 2016.67,232.052 2017.23,232.185 2017.8,230.98 2018.37,232.183 2018.94,231.863 2019.51,233.704 2020.08,233.47 2020.64,234.541 2021.21,231.169 2021.78,230.234 2022.35,228.254 2022.92,228.165 2023.49,227.961 2024.05,228.157 2024.62,227.308 2025.19,227.381 2025.76,227.422 2026.33,227.634 2026.9,226.778 2027.46,224.8 2028.03,227.451 2028.6,227.548 2029.17,227.726 2029.74,226.275 2030.31,226.454 2030.87,228.592 2031.44,229.628 2032.01,229.719 2032.58,228.781 2033.15,227.941 2033.72,227.324 2034.28,227.577 2034.85,228.722 2035.42,227.682 2035.99,228.04 2036.56,228.473 2037.13,229.739 2037.69,229.634 2038.26,229.768 2038.83,226.807 2039.4,228.898 2039.97,229.026 2040.54,230.225 2041.11,227.084 2041.67,227.634 2042.24,229.65 2042.81,228.708 2043.38,228.771 2043.95,230.023 2044.52,228.173 2045.08,228.39 2045.65,227.689 2046.22,226.807 2046.79,225.089 2047.36,226.374 2047.93,225.746 2048.49,224.045 2049.06,225.533 2049.63,226.907 2050.2,227.379 2050.77,227.673 2051.34,227.868 2051.9,227.239 2052.47,228.625 2053.04,228.997 2053.61,231.283 2054.18,230.357 2054.75,229.35 2055.31,229.706 2055.88,229.86 2056.45,229.018 2057.02,229.326 2057.59,228.719 2058.16,228.932 2058.72,229.144 2059.29,229.341 2059.86,230.426 2060.43,231.496 2061,233.325 2061.57,233.045 2062.13,231.693 2062.7,231.732 2063.27,229.737 2063.84,230.742 2064.41,230.795 2064.98,232.132 2065.54,229.881 2066.11,230.073 2066.68,230.236 2067.25,232.29 2067.82,230.112 2068.39,231.403 2068.95,232.521 2069.52,231.495 2070.09,231.442 2070.66,230.371 2071.23,229.298 2071.8,226.283 2072.36,226.538 2072.93,226.797 2073.5,231.332 2074.07,231.277 2074.64,231.316 2075.21,232.305 2075.77,233.319 2076.34,233.261 2076.91,233.02 2077.48,231.777 2078.05,232.787 2078.62,232.892 2079.18,230.729 2079.75,231.742 2080.32,233.67 2080.89,231.568 2081.46,231.495 2082.03,232.365 2082.59,230.288 2083.16,230.567 2083.73,231.656 2084.3,230.566 2084.87,230.447 2085.44,232.75 2086,234.881 2086.57,232.539 2087.14,232.294 2087.71,233.449 2088.28,233.208 2088.85,233.003 2089.41,234.951 2089.98,234.659 2090.55,233.5 2091.12,234.441 2091.69,234.324 2092.26,232.039 2092.82,231.639 2093.39,231.487 2093.96,229.682 2094.53,229.666 2095.1,229.786 2095.67,230.859 2096.23,233.172 2096.8,232.07 2097.37,231.899 2097.94,231.824 2098.51,230.82 2099.08,230.97 2099.64,230.853 2100.21,230.74 2100.78,227.748 2101.35,229.042 2101.92,228.123 2102.49,226.264 2103.05,226.466 2103.62,226.7 2104.19,224.832 2104.76,226.27 2105.33,226.751 2105.9,227.979 2106.46,227.257 2107.03,227.377 2107.6,227.595 2108.17,227.892 2108.74,229.184 2109.31,228.47 2109.87,229.82 2110.44,227.763 2111.01,228.934 2111.58,231.278 2112.15,230.282 2112.72,230.262 2113.29,232.23 2113.85,231.196 2114.42,230.137 2114.99,231.281 2115.56,231.26 2116.13,229.151 2116.7,229.222 2117.26,230.394 2117.83,231.475 2118.4,232.557 2118.97,234.506 2119.54,234.268 2120.11,234.261 2120.67,235.322 2121.24,233.864 2121.81,234.744 2122.38,233.446 2122.95,233.309 2123.52,233.09 2124.08,237.208 2124.65,236.835 2125.22,235.332 2125.79,238.002 2126.36,237.548 2126.93,236.222 2127.49,236.789 2128.06,234.349 2128.63,234.956 2129.2,233.507 2129.77,233.514 2130.34,236.23 2130.9,236.657 2131.47,238.163 2132.04,238.592 2132.61,236.802 2133.18,237.483 2133.75,234.842 2134.31,230.127 2134.88,231.077 2135.45,230.788 2136.02,229.543 2136.59,229.851 2137.16,230.969 2137.72,231.601 2138.29,231.316 2138.86,230.207 2139.43,226.76 2140,226.953 2140.57,227.225 2141.13,227.383 2141.7,227.476 2142.27,231.809 2142.84,232.734 2143.41,231.565 2143.98,232.498 2144.54,232.368 2145.11,232.164 2145.68,230.91 2146.25,232.711 2146.82,232.319 2147.39,231.989 2147.95,232.858 2148.52,232.513 2149.09,229.978 2149.66,230.961 2150.23,231.691 2150.8,228.555 2151.36,227.621 2151.93,226.718 2152.5,227.668 2153.07,228.89 2153.64,229.172 2154.21,230.161 2154.77,232.175 2155.34,231.889 2155.91,231.399 2156.48,230.372 2157.05,231.288 2157.62,230.012 2158.18,227.963 2158.75,228.1 2159.32,231.219 2159.89,230.144 \"/>\n<path clip-path=\"url(#clip910)\" d=\"M1649.46 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1649.46 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip910)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1649.46,1245.03 2150.8,1245.03 2150.8,1089.51 1649.46,1089.51 1649.46,1245.03 \"/>\n<polyline clip-path=\"url(#clip910)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1669.53,1141.35 1789.98,1141.35 \"/>\n<path clip-path=\"url(#clip910)\" d=\"M1817.46 1125.34 L1817.46 1132.71 L1826.23 1132.71 L1826.23 1136.02 L1817.46 1136.02 L1817.46 1150.09 Q1817.46 1153.26 1818.32 1154.16 Q1819.2 1155.07 1821.86 1155.07 L1826.23 1155.07 L1826.23 1158.63 L1821.86 1158.63 Q1816.93 1158.63 1815.05 1156.8 Q1813.18 1154.95 1813.18 1150.09 L1813.18 1136.02 L1810.05 1136.02 L1810.05 1132.71 L1813.18 1132.71 L1813.18 1125.34 L1817.46 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M1843.62 1145.6 Q1838.46 1145.6 1836.47 1146.78 Q1834.48 1147.96 1834.48 1150.81 Q1834.48 1153.08 1835.96 1154.42 Q1837.46 1155.74 1840.03 1155.74 Q1843.57 1155.74 1845.7 1153.24 Q1847.86 1150.72 1847.86 1146.55 L1847.86 1145.6 L1843.62 1145.6 M1852.11 1143.84 L1852.11 1158.63 L1847.86 1158.63 L1847.86 1154.7 Q1846.4 1157.06 1844.22 1158.19 Q1842.05 1159.3 1838.9 1159.3 Q1834.92 1159.3 1832.55 1157.08 Q1830.22 1154.84 1830.22 1151.09 Q1830.22 1146.71 1833.13 1144.49 Q1836.07 1142.27 1841.88 1142.27 L1847.86 1142.27 L1847.86 1141.85 Q1847.86 1138.91 1845.91 1137.31 Q1843.99 1135.69 1840.49 1135.69 Q1838.27 1135.69 1836.17 1136.22 Q1834.06 1136.76 1832.11 1137.82 L1832.11 1133.89 Q1834.45 1132.98 1836.65 1132.54 Q1838.85 1132.08 1840.93 1132.08 Q1846.56 1132.08 1849.34 1135 Q1852.11 1137.91 1852.11 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M1875.91 1136.69 Q1875.19 1136.27 1874.34 1136.09 Q1873.5 1135.88 1872.48 1135.88 Q1868.87 1135.88 1866.93 1138.24 Q1865.01 1140.58 1865.01 1144.97 L1865.01 1158.63 L1860.73 1158.63 L1860.73 1132.71 L1865.01 1132.71 L1865.01 1136.73 Q1866.35 1134.37 1868.5 1133.24 Q1870.66 1132.08 1873.73 1132.08 Q1874.17 1132.08 1874.71 1132.15 Q1875.24 1132.2 1875.89 1132.31 L1875.91 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M1896.6 1145.37 Q1896.6 1140.74 1894.68 1138.19 Q1892.79 1135.65 1889.34 1135.65 Q1885.91 1135.65 1883.99 1138.19 Q1882.09 1140.74 1882.09 1145.37 Q1882.09 1149.97 1883.99 1152.52 Q1885.91 1155.07 1889.34 1155.07 Q1892.79 1155.07 1894.68 1152.52 Q1896.6 1149.97 1896.6 1145.37 M1900.86 1155.41 Q1900.86 1162.03 1897.92 1165.25 Q1894.98 1168.49 1888.92 1168.49 Q1886.67 1168.49 1884.68 1168.15 Q1882.69 1167.82 1880.82 1167.13 L1880.82 1162.98 Q1882.69 1164 1884.52 1164.49 Q1886.35 1164.97 1888.25 1164.97 Q1892.44 1164.97 1894.52 1162.78 Q1896.6 1160.6 1896.6 1156.18 L1896.6 1154.07 Q1895.29 1156.36 1893.23 1157.5 Q1891.17 1158.63 1888.29 1158.63 Q1883.53 1158.63 1880.61 1155 Q1877.69 1151.36 1877.69 1145.37 Q1877.69 1139.35 1880.61 1135.72 Q1883.53 1132.08 1888.29 1132.08 Q1891.17 1132.08 1893.23 1133.22 Q1895.29 1134.35 1896.6 1136.64 L1896.6 1132.71 L1900.86 1132.71 L1900.86 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M1931.81 1144.6 L1931.81 1146.69 L1912.23 1146.69 Q1912.51 1151.09 1914.87 1153.4 Q1917.25 1155.69 1921.49 1155.69 Q1923.94 1155.69 1926.23 1155.09 Q1928.55 1154.49 1930.82 1153.28 L1930.82 1157.31 Q1928.53 1158.28 1926.12 1158.79 Q1923.71 1159.3 1921.23 1159.3 Q1915.03 1159.3 1911.4 1155.69 Q1907.79 1152.08 1907.79 1145.92 Q1907.79 1139.56 1911.21 1135.83 Q1914.66 1132.08 1920.49 1132.08 Q1925.73 1132.08 1928.76 1135.46 Q1931.81 1138.82 1931.81 1144.6 M1927.55 1143.35 Q1927.51 1139.86 1925.59 1137.78 Q1923.69 1135.69 1920.54 1135.69 Q1916.98 1135.69 1914.82 1137.71 Q1912.69 1139.72 1912.37 1143.38 L1927.55 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M1943.02 1125.34 L1943.02 1132.71 L1951.79 1132.71 L1951.79 1136.02 L1943.02 1136.02 L1943.02 1150.09 Q1943.02 1153.26 1943.87 1154.16 Q1944.75 1155.07 1947.41 1155.07 L1951.79 1155.07 L1951.79 1158.63 L1947.41 1158.63 Q1942.48 1158.63 1940.61 1156.8 Q1938.73 1154.95 1938.73 1150.09 L1938.73 1136.02 L1935.61 1136.02 L1935.61 1132.71 L1938.73 1132.71 L1938.73 1125.34 L1943.02 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip910)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1669.53,1193.19 1789.98,1193.19 \"/>\n<path clip-path=\"url(#clip910)\" d=\"M1831.77 1194.82 L1831.77 1210.47 L1827.51 1210.47 L1827.51 1194.96 Q1827.51 1191.28 1826.07 1189.45 Q1824.64 1187.62 1821.77 1187.62 Q1818.32 1187.62 1816.33 1189.82 Q1814.34 1192.02 1814.34 1195.82 L1814.34 1210.47 L1810.05 1210.47 L1810.05 1184.55 L1814.34 1184.55 L1814.34 1188.57 Q1815.86 1186.24 1817.92 1185.08 Q1820.01 1183.92 1822.72 1183.92 Q1827.18 1183.92 1829.48 1186.7 Q1831.77 1189.45 1831.77 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M1850.31 1187.53 Q1846.88 1187.53 1844.89 1190.22 Q1842.9 1192.88 1842.9 1197.53 Q1842.9 1202.18 1844.87 1204.87 Q1846.86 1207.53 1850.31 1207.53 Q1853.71 1207.53 1855.7 1204.85 Q1857.69 1202.16 1857.69 1197.53 Q1857.69 1192.93 1855.7 1190.24 Q1853.71 1187.53 1850.31 1187.53 M1850.31 1183.92 Q1855.86 1183.92 1859.04 1187.53 Q1862.21 1191.14 1862.21 1197.53 Q1862.21 1203.9 1859.04 1207.53 Q1855.86 1211.14 1850.31 1211.14 Q1844.73 1211.14 1841.56 1207.53 Q1838.41 1203.9 1838.41 1197.53 Q1838.41 1191.14 1841.56 1187.53 Q1844.73 1183.92 1850.31 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M1884.29 1188.53 Q1883.57 1188.11 1882.72 1187.93 Q1881.88 1187.72 1880.86 1187.72 Q1877.25 1187.72 1875.31 1190.08 Q1873.39 1192.42 1873.39 1196.81 L1873.39 1210.47 L1869.11 1210.47 L1869.11 1184.55 L1873.39 1184.55 L1873.39 1188.57 Q1874.73 1186.21 1876.88 1185.08 Q1879.04 1183.92 1882.11 1183.92 Q1882.55 1183.92 1883.09 1183.99 Q1883.62 1184.04 1884.27 1184.15 L1884.29 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip910)\" d=\"M1908.11 1189.52 Q1909.71 1186.65 1911.93 1185.29 Q1914.15 1183.92 1917.16 1183.92 Q1921.21 1183.92 1923.41 1186.77 Q1925.61 1189.59 1925.61 1194.82 L1925.61 1210.47 L1921.33 1210.47 L1921.33 1194.96 Q1921.33 1191.24 1920.01 1189.43 Q1918.69 1187.62 1915.98 1187.62 Q1912.67 1187.62 1910.75 1189.82 Q1908.83 1192.02 1908.83 1195.82 L1908.83 1210.47 L1904.54 1210.47 L1904.54 1194.96 Q1904.54 1191.21 1903.23 1189.43 Q1901.91 1187.62 1899.15 1187.62 Q1895.89 1187.62 1893.97 1189.85 Q1892.04 1192.05 1892.04 1195.82 L1892.04 1210.47 L1887.76 1210.47 L1887.76 1184.55 L1892.04 1184.55 L1892.04 1188.57 Q1893.5 1186.19 1895.54 1185.06 Q1897.58 1183.92 1900.38 1183.92 Q1903.2 1183.92 1905.17 1185.36 Q1907.16 1186.79 1908.11 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.033 ± 0.023\n  with uncertainty of ± 0.0020715474702739643\n  from 62 blocks after 5 transformations (k = 6).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.01681 ± (0.0021042, 0.00226352) (MC)\n  95% confidence interval: [-4.02119, -4.01253]) (MC)\n  linear error propagation: -4.01697 ± 0.00216595\n  |δ_y| = |0.00156696| (≤ 0.1 for normal approx)\n  Blocking successful with 31 blocks after 6 transformations (k = 7).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.016807350687735, val_l = 0.004387484338286285, val_u = 0.004279097136760335)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.steps, df.shift, ylabel=\"energy\", xlabel=\"steps\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.steps[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.steps[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip940\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip940)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip941\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip940)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip942\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip942)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip942)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip942)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip942)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip940)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip940)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip940)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip940)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip940)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip940)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1220.15 1391.71 L1220.15 1397.25 Q1217.67 1395.98 1214.99 1395.34 Q1212.32 1394.71 1209.46 1394.71 Q1205.1 1394.71 1202.9 1396.04 Q1200.74 1397.38 1200.74 1400.05 Q1200.74 1402.09 1202.3 1403.27 Q1203.85 1404.41 1208.57 1405.46 L1210.57 1405.91 Q1216.81 1407.25 1219.42 1409.7 Q1222.06 1412.12 1222.06 1416.48 Q1222.06 1421.44 1218.11 1424.34 Q1214.2 1427.23 1207.32 1427.23 Q1204.46 1427.23 1201.34 1426.66 Q1198.25 1426.12 1194.82 1425.01 L1194.82 1418.96 Q1198.06 1420.65 1201.21 1421.51 Q1204.36 1422.33 1207.45 1422.33 Q1211.59 1422.33 1213.82 1420.93 Q1216.05 1419.5 1216.05 1416.92 Q1216.05 1414.54 1214.42 1413.26 Q1212.83 1411.99 1207.39 1410.81 L1205.35 1410.33 Q1199.91 1409.19 1197.49 1406.83 Q1195.07 1404.45 1195.07 1400.31 Q1195.07 1395.28 1198.64 1392.54 Q1202.2 1389.8 1208.76 1389.8 Q1212 1389.8 1214.87 1390.28 Q1217.73 1390.76 1220.15 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1237.18 1380.54 L1237.18 1390.66 L1249.24 1390.66 L1249.24 1395.22 L1237.18 1395.22 L1237.18 1414.57 Q1237.18 1418.93 1238.36 1420.17 Q1239.57 1421.41 1243.23 1421.41 L1249.24 1421.41 L1249.24 1426.31 L1243.23 1426.31 Q1236.45 1426.31 1233.87 1423.8 Q1231.29 1421.25 1231.29 1414.57 L1231.29 1395.22 L1226.99 1395.22 L1226.99 1390.66 L1231.29 1390.66 L1231.29 1380.54 L1237.18 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1287.44 1407.02 L1287.44 1409.89 L1260.51 1409.89 Q1260.89 1415.94 1264.14 1419.12 Q1267.42 1422.27 1273.24 1422.27 Q1276.61 1422.27 1279.77 1421.44 Q1282.95 1420.61 1286.07 1418.96 L1286.07 1424.5 Q1282.92 1425.83 1279.61 1426.53 Q1276.3 1427.23 1272.89 1427.23 Q1264.36 1427.23 1259.36 1422.27 Q1254.4 1417.3 1254.4 1408.84 Q1254.4 1400.08 1259.11 1394.96 Q1263.85 1389.8 1271.87 1389.8 Q1279.07 1389.8 1283.24 1394.45 Q1287.44 1399.07 1287.44 1407.02 M1281.58 1405.3 Q1281.52 1400.5 1278.87 1397.63 Q1276.26 1394.77 1271.94 1394.77 Q1267.03 1394.77 1264.07 1397.54 Q1261.15 1400.31 1260.7 1405.34 L1281.58 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1302.71 1420.96 L1302.71 1439.87 L1296.83 1439.87 L1296.83 1390.66 L1302.71 1390.66 L1302.71 1396.07 Q1304.56 1392.89 1307.36 1391.36 Q1310.19 1389.8 1314.11 1389.8 Q1320.6 1389.8 1324.64 1394.96 Q1328.72 1400.12 1328.72 1408.52 Q1328.72 1416.92 1324.64 1422.08 Q1320.6 1427.23 1314.11 1427.23 Q1310.19 1427.23 1307.36 1425.71 Q1304.56 1424.15 1302.71 1420.96 M1322.64 1408.52 Q1322.64 1402.06 1319.97 1398.4 Q1317.32 1394.71 1312.68 1394.71 Q1308.03 1394.71 1305.36 1398.4 Q1302.71 1402.06 1302.71 1408.52 Q1302.71 1414.98 1305.36 1418.67 Q1308.03 1422.33 1312.68 1422.33 Q1317.32 1422.33 1319.97 1418.67 Q1322.64 1414.98 1322.64 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1361.15 1391.71 L1361.15 1397.25 Q1358.67 1395.98 1356 1395.34 Q1353.32 1394.71 1350.46 1394.71 Q1346.1 1394.71 1343.9 1396.04 Q1341.74 1397.38 1341.74 1400.05 Q1341.74 1402.09 1343.3 1403.27 Q1344.86 1404.41 1349.57 1405.46 L1351.57 1405.91 Q1357.81 1407.25 1360.42 1409.7 Q1363.06 1412.12 1363.06 1416.48 Q1363.06 1421.44 1359.11 1424.34 Q1355.2 1427.23 1348.32 1427.23 Q1345.46 1427.23 1342.34 1426.66 Q1339.25 1426.12 1335.82 1425.01 L1335.82 1418.96 Q1339.06 1420.65 1342.21 1421.51 Q1345.36 1422.33 1348.45 1422.33 Q1352.59 1422.33 1354.82 1420.93 Q1357.05 1419.5 1357.05 1416.92 Q1357.05 1414.54 1355.42 1413.26 Q1353.83 1411.99 1348.39 1410.81 L1346.35 1410.33 Q1340.91 1409.19 1338.49 1406.83 Q1336.07 1404.45 1336.07 1400.31 Q1336.07 1395.28 1339.64 1392.54 Q1343.2 1389.8 1349.76 1389.8 Q1353 1389.8 1355.87 1390.28 Q1358.73 1390.76 1361.15 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip942)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1142.36 2211.02,1142.36 \"/>\n<polyline clip-path=\"url(#clip942)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,965.215 2211.02,965.215 \"/>\n<polyline clip-path=\"url(#clip942)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,788.067 2211.02,788.067 \"/>\n<polyline clip-path=\"url(#clip942)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,610.918 2211.02,610.918 \"/>\n<polyline clip-path=\"url(#clip942)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,433.77 2211.02,433.77 \"/>\n<polyline clip-path=\"url(#clip942)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,256.621 2211.02,256.621 \"/>\n<polyline clip-path=\"url(#clip940)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip940)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1142.36 365.751,1142.36 \"/>\n<polyline clip-path=\"url(#clip940)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,965.215 365.751,965.215 \"/>\n<polyline clip-path=\"url(#clip940)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,788.067 365.751,788.067 \"/>\n<polyline clip-path=\"url(#clip940)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,610.918 365.751,610.918 \"/>\n<polyline clip-path=\"url(#clip940)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,433.77 365.751,433.77 \"/>\n<polyline clip-path=\"url(#clip940)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,256.621 365.751,256.621 \"/>\n<path clip-path=\"url(#clip940)\" d=\"M298.909 1128.16 Q295.298 1128.16 293.469 1131.73 Q291.664 1135.27 291.664 1142.4 Q291.664 1149.5 293.469 1153.07 Q295.298 1156.61 298.909 1156.61 Q302.543 1156.61 304.349 1153.07 Q306.177 1149.5 306.177 1142.4 Q306.177 1135.27 304.349 1131.73 Q302.543 1128.16 298.909 1128.16 M298.909 1124.46 Q304.719 1124.46 307.775 1129.06 Q310.853 1133.65 310.853 1142.4 Q310.853 1151.13 307.775 1155.73 Q304.719 1160.31 298.909 1160.31 Q293.099 1160.31 290.02 1155.73 Q286.964 1151.13 286.964 1142.4 Q286.964 1133.65 290.02 1129.06 Q293.099 1124.46 298.909 1124.46 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M259.557 978.56 L267.196 978.56 L267.196 952.194 L258.886 953.861 L258.886 949.602 L267.15 947.935 L271.826 947.935 L271.826 978.56 L279.465 978.56 L279.465 982.495 L259.557 982.495 L259.557 978.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M298.909 951.014 Q295.298 951.014 293.469 954.579 Q291.664 958.12 291.664 965.25 Q291.664 972.356 293.469 975.921 Q295.298 979.463 298.909 979.463 Q302.543 979.463 304.349 975.921 Q306.177 972.356 306.177 965.25 Q306.177 958.12 304.349 954.579 Q302.543 951.014 298.909 951.014 M298.909 947.31 Q304.719 947.31 307.775 951.917 Q310.853 956.5 310.853 965.25 Q310.853 973.977 307.775 978.583 Q304.719 983.166 298.909 983.166 Q293.099 983.166 290.02 978.583 Q286.964 973.977 286.964 965.25 Q286.964 956.5 290.02 951.917 Q293.099 947.31 298.909 947.31 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M262.775 801.411 L279.094 801.411 L279.094 805.347 L257.15 805.347 L257.15 801.411 Q259.812 798.657 264.395 794.027 Q269.002 789.374 270.182 788.032 Q272.428 785.509 273.307 783.773 Q274.21 782.013 274.21 780.324 Q274.21 777.569 272.266 775.833 Q270.344 774.097 267.242 774.097 Q265.043 774.097 262.59 774.861 Q260.159 775.625 257.381 777.175 L257.381 772.453 Q260.205 771.319 262.659 770.74 Q265.113 770.162 267.15 770.162 Q272.52 770.162 275.715 772.847 Q278.909 775.532 278.909 780.023 Q278.909 782.152 278.099 784.074 Q277.312 785.972 275.205 788.564 Q274.627 789.236 271.525 792.453 Q268.423 795.648 262.775 801.411 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M298.909 773.865 Q295.298 773.865 293.469 777.43 Q291.664 780.972 291.664 788.101 Q291.664 795.208 293.469 798.773 Q295.298 802.314 298.909 802.314 Q302.543 802.314 304.349 798.773 Q306.177 795.208 306.177 788.101 Q306.177 780.972 304.349 777.43 Q302.543 773.865 298.909 773.865 M298.909 770.162 Q304.719 770.162 307.775 774.768 Q310.853 779.351 310.853 788.101 Q310.853 796.828 307.775 801.435 Q304.719 806.018 298.909 806.018 Q293.099 806.018 290.02 801.435 Q286.964 796.828 286.964 788.101 Q286.964 779.351 290.02 774.768 Q293.099 770.162 298.909 770.162 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M272.914 609.564 Q276.27 610.282 278.145 612.55 Q280.043 614.819 280.043 618.152 Q280.043 623.268 276.525 626.069 Q273.006 628.869 266.525 628.869 Q264.349 628.869 262.034 628.43 Q259.742 628.013 257.289 627.156 L257.289 622.643 Q259.233 623.777 261.548 624.356 Q263.863 624.934 266.386 624.934 Q270.784 624.934 273.076 623.198 Q275.39 621.462 275.39 618.152 Q275.39 615.096 273.238 613.383 Q271.108 611.647 267.289 611.647 L263.261 611.647 L263.261 607.805 L267.474 607.805 Q270.923 607.805 272.752 606.439 Q274.58 605.05 274.58 602.458 Q274.58 599.796 272.682 598.383 Q270.807 596.948 267.289 596.948 Q265.367 596.948 263.168 597.365 Q260.969 597.782 258.33 598.661 L258.33 594.495 Q260.992 593.754 263.307 593.384 Q265.645 593.013 267.705 593.013 Q273.029 593.013 276.131 595.444 Q279.233 597.851 279.233 601.971 Q279.233 604.842 277.59 606.833 Q275.946 608.8 272.914 609.564 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M298.909 596.717 Q295.298 596.717 293.469 600.282 Q291.664 603.823 291.664 610.953 Q291.664 618.059 293.469 621.624 Q295.298 625.166 298.909 625.166 Q302.543 625.166 304.349 621.624 Q306.177 618.059 306.177 610.953 Q306.177 603.823 304.349 600.282 Q302.543 596.717 298.909 596.717 M298.909 593.013 Q304.719 593.013 307.775 597.62 Q310.853 602.203 310.853 610.953 Q310.853 619.68 307.775 624.286 Q304.719 628.869 298.909 628.869 Q293.099 628.869 290.02 624.286 Q286.964 619.68 286.964 610.953 Q286.964 602.203 290.02 597.62 Q293.099 593.013 298.909 593.013 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M271.594 420.564 L259.789 439.013 L271.594 439.013 L271.594 420.564 M270.367 416.49 L276.247 416.49 L276.247 439.013 L281.177 439.013 L281.177 442.902 L276.247 442.902 L276.247 451.05 L271.594 451.05 L271.594 442.902 L255.992 442.902 L255.992 438.388 L270.367 416.49 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M298.909 419.568 Q295.298 419.568 293.469 423.133 Q291.664 426.675 291.664 433.804 Q291.664 440.911 293.469 444.476 Q295.298 448.017 298.909 448.017 Q302.543 448.017 304.349 444.476 Q306.177 440.911 306.177 433.804 Q306.177 426.675 304.349 423.133 Q302.543 419.568 298.909 419.568 M298.909 415.865 Q304.719 415.865 307.775 420.471 Q310.853 425.054 310.853 433.804 Q310.853 442.531 307.775 447.138 Q304.719 451.721 298.909 451.721 Q293.099 451.721 290.02 447.138 Q286.964 442.531 286.964 433.804 Q286.964 425.054 290.02 420.471 Q293.099 415.865 298.909 415.865 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M258.793 239.341 L277.15 239.341 L277.15 243.276 L263.076 243.276 L263.076 251.749 Q264.094 251.401 265.113 251.239 Q266.131 251.054 267.15 251.054 Q272.937 251.054 276.316 254.225 Q279.696 257.397 279.696 262.813 Q279.696 268.392 276.224 271.494 Q272.752 274.573 266.432 274.573 Q264.256 274.573 261.988 274.202 Q259.742 273.832 257.335 273.091 L257.335 268.392 Q259.418 269.526 261.641 270.082 Q263.863 270.637 266.34 270.637 Q270.344 270.637 272.682 268.531 Q275.02 266.424 275.02 262.813 Q275.02 259.202 272.682 257.096 Q270.344 254.989 266.34 254.989 Q264.465 254.989 262.59 255.406 Q260.738 255.823 258.793 256.702 L258.793 239.341 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M298.909 242.42 Q295.298 242.42 293.469 245.985 Q291.664 249.526 291.664 256.656 Q291.664 263.762 293.469 267.327 Q295.298 270.869 298.909 270.869 Q302.543 270.869 304.349 267.327 Q306.177 263.762 306.177 256.656 Q306.177 249.526 304.349 245.985 Q302.543 242.42 298.909 242.42 M298.909 238.716 Q304.719 238.716 307.775 243.323 Q310.853 247.906 310.853 256.656 Q310.853 265.383 307.775 269.989 Q304.719 274.573 298.909 274.573 Q293.099 274.573 290.02 269.989 Q286.964 265.383 286.964 256.656 Q286.964 247.906 290.02 243.323 Q293.099 238.716 298.909 238.716 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip942)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1011.84 400.199,891.92 400.786,916.885 401.372,809.335 401.958,710.793 402.545,620.661 403.131,536.22 403.718,571.111 404.304,596.485 404.891,526.093 405.477,460.51 406.063,401.082 406.65,348.987 407.236,302 407.823,258.589 408.409,219.895 408.995,314.224 409.582,278.365 410.168,245.352 410.755,268.297 411.341,241.546 411.927,262.912 412.514,281.532 413.1,258.694 413.687,239.975 414.273,257.979 414.86,244.323 415.446,263.665 416.032,252.754 416.619,244.245 417.205,262.21 417.792,257.476 418.378,298.067 418.964,295.326 419.551,293.512 420.137,310.894 420.724,345.513 421.31,361.821 421.896,361.784 422.483,362.481 423.069,365.367 423.656,384.925 424.242,401.759 424.829,419.941 425.415,437.61 426.001,454.808 426.588,461.387 427.174,478.068 427.761,485.571 428.347,502.89 428.933,509.477 429.52,517.895 430.106,526.526 430.693,543.117 431.279,551.422 431.865,575.175 432.452,598.681 433.038,622.108 433.625,643.196 434.211,651.69 434.798,665.426 435.384,674.182 435.97,682.95 436.557,701.976 437.143,720.815 437.73,734.064 438.316,742.005 438.902,754.646 439.489,762.735 440.075,771.351 440.662,779.348 441.248,787.671 441.835,800.516 442.421,816.537 443.007,824.903 443.594,839.826 444.18,851.056 444.767,865.642 445.353,882.165 445.939,888.612 446.526,907.498 447.112,922.521 447.699,931.483 448.285,940.281 448.871,954.303 449.458,962.206 450.044,967.05 450.631,977.746 451.217,988.131 451.804,997.919 452.39,1007.48 452.976,1011.72 453.563,1015.81 454.149,1027.33 454.736,1038.35 455.322,1046.59 455.908,1056.89 456.495,1062.27 457.081,1072.3 457.668,1078.12 458.254,1080.87 458.84,1094.8 459.427,1104.04 460.013,1110.32 460.6,1116.44 461.186,1122.61 461.773,1130.45 462.359,1131.64 462.945,1135.32 463.532,1135.2 464.118,1142.97 464.705,1154.15 465.291,1154.65 465.877,1159.29 466.464,1160.22 467.05,1166.66 467.637,1163.42 468.223,1162.04 468.809,1169.06 469.396,1171.99 469.982,1172.86 470.569,1176.05 471.155,1175.47 471.742,1185.47 472.328,1187.52 472.914,1193.1 473.501,1196.5 474.087,1198.13 474.674,1201.86 475.26,1201.72 475.846,1207.3 476.433,1207.36 477.019,1214.08 477.606,1213.65 478.192,1215.3 478.778,1215.02 479.365,1214.8 479.951,1216.5 480.538,1215.95 481.124,1217.26 481.711,1218.75 482.297,1218.34 482.883,1218.46 483.47,1218.57 484.056,1218.53 484.643,1223.46 485.229,1223.2 485.815,1224.77 486.402,1225.9 486.988,1227.06 487.575,1223.57 488.161,1223.65 488.748,1226.93 489.334,1226.95 489.92,1228.44 490.507,1229.97 491.093,1229.74 491.68,1231.08 492.266,1230.98 492.852,1232.43 493.439,1232.13 494.025,1233.57 494.612,1233.05 495.198,1232.57 495.784,1239.93 496.371,1240.96 496.957,1238.93 497.544,1240 498.13,1239.78 498.717,1242.33 499.303,1241.81 499.889,1244.21 500.476,1243.35 501.062,1241.54 501.649,1240.62 502.235,1240.44 502.821,1242.94 503.408,1245.5 503.994,1244.65 504.581,1241.22 505.167,1240.75 505.753,1238.75 506.34,1241.23 506.926,1239.6 507.513,1239.34 508.099,1240.54 508.686,1238.53 509.272,1239.82 509.858,1239.21 510.445,1238.8 511.031,1241.7 511.618,1241.1 512.204,1242.21 512.79,1244.72 513.377,1244.12 513.963,1248.02 514.55,1248.67 515.136,1247.49 515.722,1245.33 516.309,1244.88 516.895,1248.56 517.482,1249.13 518.068,1249.72 518.655,1250.26 519.241,1247.73 519.827,1248.76 520.414,1248.16 521,1248.77 521.587,1248.18 522.173,1250.41 522.759,1249.21 523.346,1246.79 523.932,1246.08 524.519,1248.57 525.105,1247.96 525.691,1248.54 526.278,1247.78 526.864,1247.06 527.451,1247.98 528.037,1247.14 528.624,1246.45 529.21,1245.69 529.796,1245.24 530.383,1245.91 530.969,1245.01 531.556,1242.71 532.142,1240.76 532.728,1238.84 533.315,1239.8 533.901,1242.18 534.488,1240.23 535.074,1238.27 535.661,1238.1 536.247,1238.01 536.833,1236.22 537.42,1236.23 538.006,1237.52 538.593,1237.42 539.179,1237.06 539.765,1234.06 540.352,1237.1 540.938,1233.67 541.525,1233.58 542.111,1234.82 542.697,1236.41 543.284,1236.21 543.87,1237.35 544.457,1235.54 545.043,1236.77 545.63,1233.7 546.216,1235.04 546.802,1233.58 547.389,1235.15 547.975,1233.32 548.562,1234.81 549.148,1234.72 549.734,1234.58 550.321,1233 550.907,1228.37 551.494,1230.28 552.08,1232.05 552.666,1237.97 553.253,1239.18 553.839,1237.2 554.426,1235.4 555.012,1236.89 555.599,1233.93 556.185,1235.12 556.771,1236.38 557.358,1237.66 557.944,1237.34 558.531,1239.75 559.117,1239.27 559.703,1238.89 560.29,1238.62 560.876,1237.89 561.463,1236.06 562.049,1237.06 562.635,1236.62 563.222,1240.73 563.808,1234.35 564.395,1235.83 564.981,1232.74 565.568,1233.89 566.154,1233.75 566.74,1233.28 567.327,1237.61 567.913,1241.79 568.5,1242.54 569.086,1243.26 569.672,1245.52 570.259,1250.53 570.845,1249.53 571.432,1245.75 572.018,1246 572.605,1249.75 573.191,1248.46 573.777,1249.04 574.364,1248.25 574.95,1248.6 575.537,1246.18 576.123,1244.02 576.709,1243.05 577.296,1240.75 577.882,1238.46 578.469,1237.81 579.055,1237.43 579.641,1235.23 580.228,1234.91 580.814,1237.41 581.401,1236.74 581.987,1236.23 582.574,1233.02 583.16,1234.69 583.746,1233.04 584.333,1234.16 584.919,1232.27 585.506,1236.3 586.092,1240.02 586.678,1239.39 587.265,1236 587.851,1236.92 588.438,1235.11 589.024,1234.46 589.61,1235.6 590.197,1236.61 590.783,1236.26 591.37,1228.19 591.956,1229.53 592.543,1229.32 593.129,1230.55 593.715,1231.85 594.302,1234.44 594.888,1233.97 595.475,1234.76 596.061,1234.3 596.647,1235.48 597.234,1234.94 597.82,1234.6 598.407,1238.24 598.993,1236.25 599.579,1238.78 600.166,1238.07 600.752,1234.5 601.339,1235.36 601.925,1234.95 602.512,1236.03 603.098,1236.75 603.684,1236.35 604.271,1237.51 604.857,1239.92 605.444,1240.43 606.03,1241.1 606.616,1235.85 607.203,1235.21 607.789,1234.58 608.376,1230.79 608.962,1228.92 609.548,1228.75 610.135,1234.31 610.721,1236.75 611.308,1234.6 611.894,1234.57 612.481,1235.44 613.067,1233.63 613.653,1234.59 614.24,1234.02 614.826,1236.51 615.413,1239.06 615.999,1237.04 616.585,1236.19 617.172,1235.86 617.758,1232.59 618.345,1229.33 618.931,1226.19 619.518,1226.41 620.104,1224.65 620.69,1223.55 621.277,1222.01 621.863,1219.29 622.45,1221.18 623.036,1221.09 623.622,1222.8 624.209,1222.83 624.795,1223.09 625.382,1222.53 625.968,1222.43 626.554,1220.98 627.141,1222.44 627.727,1222.47 628.314,1222.37 628.9,1222.34 629.487,1221.01 630.073,1219.55 630.659,1217.89 631.246,1218.07 631.832,1224.26 632.419,1221.39 633.005,1221.43 633.591,1222.99 634.178,1222 634.764,1220.58 635.351,1220.87 635.937,1218.06 636.523,1219.94 637.11,1220.56 637.696,1220.79 638.283,1221.26 638.869,1221.64 639.456,1223.3 640.042,1224.71 640.628,1226.19 641.215,1227.71 641.801,1230.84 642.388,1228.99 642.974,1227.3 643.56,1228.68 644.147,1228.3 644.733,1227.99 645.32,1228.99 645.906,1228.97 646.492,1228.48 647.079,1231.11 647.665,1227.63 648.252,1225.97 648.838,1228.61 649.425,1225.19 650.011,1226.26 650.597,1227.44 651.184,1226.82 651.77,1228.87 652.357,1231.4 652.943,1227.95 653.529,1228.91 654.116,1229.63 654.702,1227.75 655.289,1224.39 655.875,1224.29 656.462,1225.41 657.048,1225.09 657.634,1225.99 658.221,1228.58 658.807,1227.93 659.394,1224.69 659.98,1222.99 660.566,1221.39 661.153,1222.77 661.739,1221.04 662.326,1223.89 662.912,1223.82 663.498,1222.44 664.085,1218.09 664.671,1218.18 665.258,1218.22 665.844,1219.9 666.431,1222.97 667.017,1224.48 667.603,1225.72 668.19,1222.41 668.776,1223.8 669.363,1226.34 669.949,1226.05 670.535,1227.2 671.122,1226.82 671.708,1225.02 672.295,1223.67 672.881,1223.64 673.467,1223.55 674.054,1226.2 674.64,1227.53 675.227,1227.12 675.813,1227.98 676.4,1224.57 676.986,1225.83 677.572,1221.4 678.159,1225.61 678.745,1226.46 679.332,1224.59 679.918,1225.97 680.504,1227.18 681.091,1223.96 681.677,1222.16 682.264,1218.93 682.85,1222.44 683.436,1219.53 684.023,1223.76 684.609,1226.37 685.196,1227.54 685.782,1227.32 686.369,1228.23 686.955,1228.84 687.541,1227.32 688.128,1226.91 688.714,1223.76 689.301,1225.09 689.887,1224.95 690.473,1226.16 691.06,1224.08 691.646,1223.91 692.233,1222 692.819,1220.47 693.405,1220.59 693.992,1220.57 694.578,1222.04 695.165,1223.34 695.751,1225.58 696.338,1223.79 696.924,1222 697.51,1221.74 698.097,1218.4 698.683,1219.61 699.27,1216.78 699.856,1216.95 700.442,1219.87 701.029,1219.71 701.615,1221.1 702.202,1219.72 702.788,1222.84 703.375,1221.12 703.961,1219.42 704.547,1217.88 705.134,1217.93 705.72,1217.96 706.307,1217.96 706.893,1217.84 707.479,1217.85 708.066,1217.79 708.652,1215.13 709.239,1215.77 709.825,1215.93 710.411,1217.72 710.998,1219.24 711.584,1217.54 712.171,1218.93 712.757,1220.49 713.344,1218.81 713.93,1218.85 714.516,1218.38 715.103,1221.51 715.689,1221.54 716.276,1221.33 716.862,1224.15 717.448,1225.41 718.035,1223.27 718.621,1219.69 719.208,1218.17 719.794,1218.24 720.38,1216.81 720.967,1216.87 721.553,1219.84 722.14,1213.84 722.726,1212.95 723.313,1214.62 723.899,1213.5 724.485,1212.44 725.072,1211.39 725.658,1211.54 726.245,1214.77 726.831,1217.77 727.417,1220.59 728.004,1221.59 728.59,1224.16 729.177,1222.39 729.763,1217.65 730.349,1221.83 730.936,1220.8 731.522,1225.2 732.109,1226.05 732.695,1225.46 733.282,1223.6 733.868,1217.6 734.454,1220.84 735.041,1220.77 735.627,1219.34 736.214,1219.52 736.8,1215.38 737.386,1214.03 737.973,1212.89 738.559,1214.61 739.146,1214.95 739.732,1216.74 740.318,1215.77 740.905,1215.87 741.491,1216.05 742.078,1216.06 742.664,1217.68 743.251,1217.86 743.837,1217.92 744.423,1218.16 745.01,1218.41 745.596,1220.12 746.183,1222.91 746.769,1222.84 747.355,1224.06 747.942,1222.26 748.528,1222.09 749.115,1224.88 749.701,1225.9 750.288,1226.95 750.874,1227.55 751.46,1227.23 752.047,1225.36 752.633,1226.43 753.22,1224.49 753.806,1225.63 754.392,1222.19 754.979,1224.95 755.565,1224.33 756.152,1222.68 756.738,1220.98 757.324,1220.95 757.911,1220.57 758.497,1221.56 759.084,1216.89 759.67,1219.75 760.257,1219.68 760.843,1219.65 761.429,1219.37 762.016,1217.52 762.602,1217.52 763.189,1214.76 763.775,1214.8 764.361,1213.86 764.948,1216.69 765.534,1218.22 766.121,1219.69 766.707,1218.42 767.293,1221.37 767.88,1224.1 768.466,1220.92 769.053,1221.05 769.639,1219.52 770.226,1218.07 770.812,1216.7 771.398,1217.92 771.985,1216.65 772.571,1218.02 773.158,1217.71 773.744,1216.01 774.33,1214.85 774.917,1214.64 775.503,1213.24 776.09,1212.04 776.676,1214.89 777.262,1213.47 777.849,1215.17 778.435,1218.08 779.022,1219.3 779.608,1219.17 780.195,1219.16 780.781,1218.87 781.367,1219.76 781.954,1220.75 782.54,1219.08 783.127,1217.7 783.713,1218.75 784.299,1218.51 784.886,1219.7 785.472,1219.46 786.059,1214.79 786.645,1214.96 787.232,1214.99 787.818,1217.98 788.404,1216.61 788.991,1217.91 789.577,1222.16 790.164,1220.62 790.75,1220.38 791.336,1220.04 791.923,1219.81 792.509,1223.9 793.096,1223.44 793.682,1220.13 794.268,1220.07 794.855,1221.3 795.441,1219.83 796.028,1219.6 796.614,1217.95 797.201,1216.37 797.787,1214.89 798.373,1216.4 798.96,1216.36 799.546,1216.23 800.133,1216.02 800.719,1215.59 801.305,1217.24 801.892,1217.01 802.478,1211.23 803.065,1213.14 803.651,1213.22 804.237,1216.08 804.824,1217.39 805.41,1215.83 805.997,1215.91 806.583,1214.18 807.17,1214.39 807.756,1210.06 808.342,1210.46 808.929,1212.29 809.515,1212.55 810.102,1212.75 810.688,1215.83 811.274,1215.7 811.861,1218.62 812.447,1217.12 813.034,1217.46 813.62,1211.23 814.206,1211.37 814.793,1211.52 815.379,1212.17 815.966,1212.67 816.552,1217.26 817.139,1218.86 817.725,1221.41 818.311,1223.99 818.898,1222.2 819.484,1223.48 820.071,1222.77 820.657,1218.23 821.243,1218.02 821.83,1219.25 822.416,1221.91 823.003,1221.57 823.589,1221.43 824.175,1221.06 824.762,1220.64 825.348,1218.63 825.935,1218.54 826.521,1218.26 827.108,1217.92 827.694,1217.76 828.28,1218.74 828.867,1219.89 829.453,1218.24 830.04,1219.6 830.626,1219.52 831.212,1214.96 831.799,1213.66 832.385,1213.87 832.972,1215.41 833.558,1215.63 834.145,1216.72 834.731,1216.9 835.317,1217.13 835.904,1214.17 836.49,1214.24 837.077,1211.1 837.663,1214.12 838.249,1212.79 838.836,1213.13 839.422,1216.27 840.009,1214.83 840.595,1214.82 841.181,1212.09 841.768,1212.32 842.354,1212.18 842.941,1212.45 843.527,1214.11 844.114,1214.3 844.7,1212.99 845.286,1214.49 845.873,1214.68 846.459,1214.78 847.046,1216.3 847.632,1220.61 848.218,1220.47 848.805,1220.17 849.391,1221.25 849.978,1219.44 850.564,1218 851.15,1217.76 851.737,1218.87 852.323,1217.43 852.91,1216.08 853.496,1214.55 854.083,1216.39 854.669,1217.88 855.255,1219.18 855.842,1220.3 856.428,1223.01 857.015,1221.34 857.601,1222.56 858.187,1225.11 858.774,1226.09 859.36,1223.85 859.947,1223.38 860.533,1222.85 861.119,1224.05 861.706,1224.71 862.292,1220.81 862.879,1220.26 863.465,1220.16 864.052,1220 864.638,1219.67 865.224,1219.55 865.811,1219.52 866.397,1221.99 866.984,1223.06 867.57,1221.14 868.156,1220.62 868.743,1221.64 869.329,1221.32 869.916,1221.11 870.502,1222.36 871.089,1216.04 871.675,1216 872.261,1217.44 872.848,1215.65 873.434,1216.97 874.021,1212.62 874.607,1210.04 875.193,1208.97 875.78,1207.73 876.366,1206.4 876.953,1205.45 877.539,1204.83 878.125,1205.4 878.712,1206.35 879.298,1205.49 879.885,1209.09 880.471,1207.93 881.058,1209.91 881.644,1209.93 882.23,1210.29 882.817,1211.74 883.403,1213.05 883.99,1214.4 884.576,1214.19 885.162,1215.44 885.749,1214.09 886.335,1213.83 886.922,1215.28 887.508,1213.74 888.094,1212.79 888.681,1211.66 889.267,1210.44 889.854,1209.2 890.44,1207.87 891.027,1206.75 891.613,1205.65 892.199,1205.98 892.786,1208.05 893.372,1206.85 893.959,1207.71 894.545,1206.83 895.131,1204.73 895.718,1205.71 896.304,1204.35 896.891,1205.02 897.477,1205.89 898.063,1207.72 898.65,1208.18 899.236,1210.02 899.823,1213.36 900.409,1215.06 900.996,1213.8 901.582,1215.61 902.168,1215.26 902.755,1220.99 903.341,1220.2 903.928,1218.85 904.514,1218.91 905.1,1218.65 905.687,1215.6 906.273,1214.17 906.86,1212.91 907.446,1213.16 908.032,1213.42 908.619,1213.74 909.205,1214.19 909.792,1212.62 910.378,1211.2 910.965,1208.4 911.551,1209.96 912.137,1210.09 912.724,1210.24 913.31,1210.71 913.897,1207.92 914.483,1207.05 915.069,1208.87 915.656,1209.47 916.242,1209.72 916.829,1211.59 917.415,1213.45 918.002,1216.54 918.588,1215.22 919.174,1213.89 919.761,1215.63 920.347,1214.13 920.934,1214.09 921.52,1216.72 922.106,1218.14 922.693,1219.73 923.279,1221.07 923.866,1220.76 924.452,1218.9 925.038,1215.78 925.625,1217.11 926.211,1218.25 926.798,1218.36 927.384,1219.96 927.971,1218.3 928.557,1216.79 929.143,1218.3 929.73,1216.46 930.316,1219.44 930.903,1218.87 931.489,1217.34 932.075,1216.98 932.662,1217.01 933.248,1218.31 933.835,1219.62 934.421,1221.01 935.007,1222.36 935.594,1224.71 936.18,1223.29 936.767,1222.49 937.353,1224.77 937.94,1224.37 938.526,1223.85 939.112,1225.14 939.699,1226.48 940.285,1228.75 940.872,1225.03 941.458,1224.4 942.044,1227.04 942.631,1229.42 943.217,1225.65 943.804,1225.51 944.39,1225.17 944.976,1221.6 945.563,1221.24 946.149,1221.99 946.736,1218.39 947.322,1218.23 947.909,1217.88 948.495,1216.5 949.081,1215.08 949.668,1215 950.254,1212.37 950.841,1212.03 951.427,1213.61 952.013,1214.95 952.6,1215.03 953.186,1214.89 953.773,1216.53 954.359,1219.15 954.945,1217.38 955.532,1218.44 956.118,1219.71 956.705,1220.82 957.291,1221.89 957.878,1221.75 958.464,1218.44 959.05,1219.7 959.637,1218.09 960.223,1220.65 960.81,1220.4 961.396,1218.56 961.982,1214.22 962.569,1214.24 963.155,1213.16 963.742,1211.69 964.328,1210.41 964.915,1211.97 965.501,1215.07 966.087,1213.68 966.674,1213.63 967.26,1216.42 967.847,1214.94 968.433,1211.89 969.019,1210.98 969.606,1209.98 970.192,1211.58 970.779,1210.46 971.365,1212.12 971.951,1213.8 972.538,1216.59 973.124,1215.13 973.711,1213.5 974.297,1213.6 974.884,1212.35 975.47,1209.3 976.056,1210.99 976.643,1208.55 977.229,1210.18 977.816,1210.26 978.402,1213.26 978.988,1216.07 979.575,1218.97 980.161,1221.58 980.748,1218.63 981.334,1222.67 981.92,1220.77 982.507,1218.5 983.093,1222.7 983.68,1223.54 984.266,1224.36 984.853,1220.88 985.439,1220.7 986.025,1222.09 986.612,1224.48 987.198,1218.35 987.785,1219.46 988.371,1219.14 988.957,1218.99 989.544,1221.38 990.13,1219.66 990.717,1216.35 991.303,1214.96 991.889,1215.06 992.476,1216.5 993.062,1220.61 993.649,1218.95 994.235,1217.06 994.822,1215.03 995.408,1218.19 995.994,1217.67 996.581,1216.2 997.167,1215.92 997.754,1218.5 998.34,1218.67 998.926,1216.96 999.513,1215.25 1000.1,1213.72 1000.69,1212.22 1001.27,1213.77 1001.86,1212.41 1002.44,1213.72 1003.03,1215.48 1003.62,1216.64 1004.2,1217.93 1004.79,1220.74 1005.38,1224.46 1005.96,1226.58 1006.55,1223.34 1007.14,1221.34 1007.72,1218.14 1008.31,1217.81 1008.9,1217.65 1009.48,1214.69 1010.07,1211.94 1010.65,1214.85 1011.24,1213.36 1011.83,1213.15 1012.41,1215.88 1013,1217.24 1013.59,1218.77 1014.17,1218.47 1014.76,1218.46 1015.35,1220.98 1015.93,1219.18 1016.52,1217.67 1017.11,1220.15 1017.69,1221.63 1018.28,1220.88 1018.86,1222.06 1019.45,1224.52 1020.04,1221.03 1020.62,1222.01 1021.21,1220.26 1021.8,1220.02 1022.38,1221.18 1022.97,1213.36 1023.56,1213.43 1024.14,1214.9 1024.73,1214.84 1025.32,1214.85 1025.9,1214.71 1026.49,1213.51 1027.07,1212 1027.66,1217.94 1028.25,1219.16 1028.83,1220.31 1029.42,1218.83 1030.01,1221.53 1030.59,1219.48 1031.18,1216.4 1031.77,1216.48 1032.35,1217.87 1032.94,1216.04 1033.52,1216.08 1034.11,1217.17 1034.7,1218.2 1035.28,1217.8 1035.87,1217.63 1036.46,1215.85 1037.04,1211.2 1037.63,1209.87 1038.22,1208.29 1038.8,1211.22 1039.39,1211.22 1039.98,1208.27 1040.56,1208.71 1041.15,1205.88 1041.73,1203.66 1042.32,1208.41 1042.91,1208.56 1043.49,1205.93 1044.08,1203.38 1044.67,1203.93 1045.25,1204.58 1045.84,1203.59 1046.43,1207.18 1047.01,1204.43 1047.6,1206.27 1048.19,1206.7 1048.77,1206.21 1049.36,1205.25 1049.94,1204.36 1050.53,1206.67 1051.12,1204.29 1051.7,1205.12 1052.29,1208.72 1052.88,1208.9 1053.46,1206.15 1054.05,1208.25 1054.64,1207.15 1055.22,1209.36 1055.81,1209.62 1056.39,1212.38 1056.98,1212.47 1057.57,1209.75 1058.15,1210.98 1058.74,1211.15 1059.33,1212.6 1059.91,1212.71 1060.5,1212.97 1061.09,1211.84 1061.67,1215.12 1062.26,1216.52 1062.85,1219.4 1063.43,1216.68 1064.02,1216.77 1064.6,1215.47 1065.19,1217.03 1065.78,1217.99 1066.36,1217.97 1066.95,1217.71 1067.54,1218.93 1068.12,1217.34 1068.71,1214.56 1069.3,1214.5 1069.88,1214.63 1070.47,1214.6 1071.06,1210.39 1071.64,1213.34 1072.23,1213.73 1072.81,1213.89 1073.4,1212.39 1073.99,1212.55 1074.57,1212.52 1075.16,1214.32 1075.75,1214.44 1076.33,1214.4 1076.92,1214.37 1077.51,1214.1 1078.09,1215.63 1078.68,1214.16 1079.26,1214.02 1079.85,1212.71 1080.44,1215.79 1081.02,1214.34 1081.61,1208.53 1082.2,1207.61 1082.78,1208.11 1083.37,1210.14 1083.96,1210.32 1084.54,1211.84 1085.13,1214.73 1085.72,1216.09 1086.3,1215.95 1086.89,1216.01 1087.47,1217.1 1088.06,1218.52 1088.65,1215.41 1089.23,1216.93 1089.82,1218.01 1090.41,1220.4 1090.99,1220.17 1091.58,1221.31 1092.17,1219.57 1092.75,1222.18 1093.34,1221.78 1093.93,1219.75 1094.51,1220.88 1095.1,1221.8 1095.68,1220.16 1096.27,1222.53 1096.86,1222.3 1097.44,1219 1098.03,1218.63 1098.62,1220.03 1099.2,1221.17 1099.79,1219.22 1100.38,1217.58 1100.96,1218.62 1101.55,1217.09 1102.14,1215.85 1102.72,1215.75 1103.31,1214 1103.89,1214.07 1104.48,1211.29 1105.07,1206.91 1105.65,1204.39 1106.24,1206.15 1106.83,1208.26 1107.41,1209.68 1108,1206.94 1108.59,1204.36 1109.17,1204.76 1109.76,1204 1110.34,1204.81 1110.93,1209.79 1111.52,1211.91 1112.1,1213.52 1112.69,1209.07 1113.28,1208.22 1113.86,1209.93 1114.45,1211.5 1115.04,1213.15 1115.62,1213.18 1116.21,1210.28 1116.8,1209.02 1117.38,1209.27 1117.97,1210.58 1118.55,1215.45 1119.14,1212.77 1119.73,1212.73 1120.31,1209.97 1120.9,1213.2 1121.49,1211.63 1122.07,1210.33 1122.66,1210.33 1123.25,1207.83 1123.83,1209.23 1124.42,1212.47 1125.01,1211.16 1125.59,1209.86 1126.18,1212.87 1126.76,1214.01 1127.35,1215.16 1127.94,1214.13 1128.52,1212.85 1129.11,1215.87 1129.7,1212.81 1130.28,1212.68 1130.87,1213.1 1131.46,1213.21 1132.04,1216.26 1132.63,1216.17 1133.21,1214.43 1133.8,1211.68 1134.39,1214.66 1134.97,1213.4 1135.56,1213.41 1136.15,1213.46 1136.73,1212.11 1137.32,1213.51 1137.91,1213.69 1138.49,1216.71 1139.08,1215.09 1139.67,1218.13 1140.25,1217.88 1140.84,1217.41 1141.42,1214.29 1142.01,1213.92 1142.6,1215.43 1143.18,1216.73 1143.77,1216.72 1144.36,1213.5 1144.94,1214.86 1145.53,1214.5 1146.12,1212.85 1146.7,1214.22 1147.29,1215.58 1147.88,1219.9 1148.46,1218.28 1149.05,1219.67 1149.63,1218.02 1150.22,1214.94 1150.81,1213.23 1151.39,1216.11 1151.98,1214.45 1152.57,1214.61 1153.15,1216.24 1153.74,1213.46 1154.33,1217.6 1154.91,1215.93 1155.5,1215.95 1156.09,1217.45 1156.67,1212.96 1157.26,1215.88 1157.84,1215.62 1158.43,1214.22 1159.02,1211.24 1159.6,1211.41 1160.19,1214.87 1160.78,1214.63 1161.36,1214.28 1161.95,1215.97 1162.54,1217.2 1163.12,1218.55 1163.71,1217.01 1164.29,1218.03 1164.88,1219.22 1165.47,1218.8 1166.05,1219.95 1166.64,1216.5 1167.23,1216.52 1167.81,1220.45 1168.4,1221.59 1168.99,1218.39 1169.57,1216.69 1170.16,1214.76 1170.75,1214.72 1171.33,1216.01 1171.92,1214.43 1172.5,1212.97 1173.09,1216.1 1173.68,1218.96 1174.26,1219.73 1174.85,1216.67 1175.44,1218.19 1176.02,1216.37 1176.61,1211.87 1177.2,1210.27 1177.78,1209.09 1178.37,1210.72 1178.96,1210.92 1179.54,1209.78 1180.13,1211.47 1180.71,1213.39 1181.3,1213.74 1181.89,1216.45 1182.47,1216.18 1183.06,1214.59 1183.65,1212.9 1184.23,1213.1 1184.82,1211.64 1185.41,1213.04 1185.99,1214.12 1186.58,1215.49 1187.16,1212.54 1187.75,1212.82 1188.34,1211.53 1188.92,1214.51 1189.51,1211.81 1190.1,1213.29 1190.68,1212.1 1191.27,1215 1191.86,1213.54 1192.44,1217.8 1193.03,1217.48 1193.62,1217.14 1194.2,1213.84 1194.79,1210.78 1195.37,1212.33 1195.96,1209.38 1196.55,1212.55 1197.13,1212.3 1197.72,1212.34 1198.31,1212.55 1198.89,1211.14 1199.48,1211.18 1200.07,1209.62 1200.65,1211.68 1201.24,1205.93 1201.83,1206.43 1202.41,1205.64 1203,1207.38 1203.58,1204.71 1204.17,1202.04 1204.76,1204.15 1205.34,1206.18 1205.93,1209.64 1206.52,1208.5 1207.1,1208.81 1207.69,1209.2 1208.28,1210.83 1208.86,1212.09 1209.45,1212.51 1210.03,1208.15 1210.62,1208.33 1211.21,1204.33 1211.79,1207.34 1212.38,1208.84 1212.97,1210.45 1213.55,1209.14 1214.14,1208.97 1214.73,1210.41 1215.31,1213.6 1215.9,1214.97 1216.49,1212.13 1217.07,1209.36 1217.66,1209.63 1218.24,1213.13 1218.83,1208.73 1219.42,1210.3 1220,1213.28 1220.59,1213.52 1221.18,1212.26 1221.76,1213.68 1222.35,1213.57 1222.94,1213.89 1223.52,1213.92 1224.11,1212.23 1224.7,1215.29 1225.28,1215.16 1225.87,1212.33 1226.45,1212.39 1227.04,1208.06 1227.63,1208.04 1228.21,1211.34 1228.8,1211.73 1229.39,1213.25 1229.97,1211.94 1230.56,1210.76 1231.15,1209.7 1231.73,1204.19 1232.32,1205.04 1232.91,1206.77 1233.49,1210.22 1234.08,1207.7 1234.66,1205.35 1235.25,1208.4 1235.84,1208.62 1236.42,1210.64 1237.01,1209.48 1237.6,1211.28 1238.18,1213.07 1238.77,1210.23 1239.36,1210.62 1239.94,1212.28 1240.53,1209.4 1241.11,1206.6 1241.7,1206.78 1242.29,1207.01 1242.87,1207.21 1243.46,1207.84 1244.05,1210.71 1244.63,1209.57 1245.22,1211.28 1245.81,1208.34 1246.39,1211.63 1246.98,1210.36 1247.57,1213.73 1248.15,1214.8 1248.74,1215.94 1249.32,1214.42 1249.91,1213.05 1250.5,1214.37 1251.08,1211.59 1251.67,1211.81 1252.26,1212.15 1252.84,1210.54 1253.43,1209.38 1254.02,1211.18 1254.6,1210.22 1255.19,1210.21 1255.78,1208.88 1256.36,1208.99 1256.95,1210.8 1257.53,1213.88 1258.12,1212.45 1258.71,1212.66 1259.29,1214.23 1259.88,1214.19 1260.47,1214.12 1261.05,1213.08 1261.64,1215.82 1262.23,1218.77 1262.81,1218.75 1263.4,1218.94 1263.98,1222.94 1264.57,1221.01 1265.16,1218.61 1265.74,1219.51 1266.33,1219.29 1266.92,1218.84 1267.5,1221.54 1268.09,1221.41 1268.68,1221.07 1269.26,1220.66 1269.85,1217.63 1270.44,1218.65 1271.02,1219.64 1271.61,1219.34 1272.19,1220.32 1272.78,1219.86 1273.37,1219.59 1273.95,1219.37 1274.54,1220.41 1275.13,1217.15 1275.71,1215.21 1276.3,1213.45 1276.89,1216.29 1277.47,1216.26 1278.06,1218.54 1278.65,1219.61 1279.23,1218.03 1279.82,1218.25 1280.4,1218.19 1280.99,1215.13 1281.58,1214.98 1282.16,1219.36 1282.75,1219.19 1283.34,1218.78 1283.92,1219.9 1284.51,1219.45 1285.1,1219.4 1285.68,1220.58 1286.27,1218.77 1286.86,1218.22 1287.44,1217.84 1288.03,1218.77 1288.61,1211.13 1289.2,1214.04 1289.79,1214.22 1290.37,1214.46 1290.96,1214.44 1291.55,1212.9 1292.13,1214.29 1292.72,1215.7 1293.31,1215.63 1293.89,1212.52 1294.48,1212.27 1295.06,1209.62 1295.65,1211.08 1296.24,1211.1 1296.82,1210.02 1297.41,1211.53 1298,1210.09 1298.58,1210.67 1299.17,1209.39 1299.76,1208.03 1300.34,1209.4 1300.93,1209.41 1301.52,1212.45 1302.1,1212.53 1302.69,1212.6 1303.27,1215.23 1303.86,1213.65 1304.45,1213.71 1305.03,1214.96 1305.62,1216 1306.21,1212.72 1306.79,1214.09 1307.38,1212.82 1307.97,1213 1308.55,1211.58 1309.14,1213.31 1309.73,1214.81 1310.31,1216.09 1310.9,1216.06 1311.48,1215.83 1312.07,1214.27 1312.66,1212.38 1313.24,1213.94 1313.83,1212.35 1314.42,1213.62 1315,1214.94 1315.59,1219.36 1316.18,1219.25 1316.76,1216.22 1317.35,1220.36 1317.93,1220.31 1318.52,1218.4 1319.11,1219.48 1319.69,1219.17 1320.28,1216.2 1320.87,1217.55 1321.45,1215.51 1322.04,1213.68 1322.63,1213.5 1323.21,1213.65 1323.8,1213.88 1324.39,1210.96 1324.97,1212.72 1325.56,1211.46 1326.14,1210.3 1326.73,1208.92 1327.32,1209.14 1327.9,1207.89 1328.49,1212.69 1329.08,1213.02 1329.66,1214.61 1330.25,1212.91 1330.84,1211.73 1331.42,1210.7 1332.01,1210.75 1332.6,1210.77 1333.18,1212.23 1333.77,1210.93 1334.35,1209.6 1334.94,1209.86 1335.53,1210.15 1336.11,1214.92 1336.7,1214.91 1337.29,1216.48 1337.87,1213.71 1338.46,1213.54 1339.05,1213.93 1339.63,1212.75 1340.22,1212.69 1340.8,1213.08 1341.39,1212.71 1341.98,1213.91 1342.56,1215.31 1343.15,1213.84 1343.74,1213.79 1344.32,1215.37 1344.91,1218.41 1345.5,1220.98 1346.08,1220.48 1346.67,1219.88 1347.26,1220.9 1347.84,1221.85 1348.43,1220.15 1349.01,1218.65 1349.6,1218.15 1350.19,1217.61 1350.77,1217.45 1351.36,1218.4 1351.95,1219.74 1352.53,1220.42 1353.12,1221.57 1353.71,1221.21 1354.29,1223.72 1354.88,1226.13 1355.47,1228.24 1356.05,1229.02 1356.64,1226.92 1357.22,1221.83 1357.81,1220.04 1358.4,1222.61 1358.98,1220.9 1359.57,1223.15 1360.16,1220.09 1360.74,1221.31 1361.33,1222.31 1361.92,1220.64 1362.5,1219.39 1363.09,1217.65 1363.68,1217.59 1364.26,1217.65 1364.85,1217.76 1365.43,1217.22 1366.02,1218.21 1366.61,1215 1367.19,1216.1 1367.78,1214.48 1368.37,1212.87 1368.95,1211.36 1369.54,1211.58 1370.13,1216.12 1370.71,1214.37 1371.3,1214.3 1371.88,1212.69 1372.47,1209.99 1373.06,1211.54 1373.64,1210.1 1374.23,1213.29 1374.82,1211.86 1375.4,1212.11 1375.99,1210.98 1376.58,1209.55 1377.16,1211.42 1377.75,1214.37 1378.34,1210.07 1378.92,1212.97 1379.51,1209.6 1380.09,1211.16 1380.68,1209.78 1381.27,1211.47 1381.85,1211.64 1382.44,1210.08 1383.03,1211.71 1383.61,1210.02 1384.2,1208.92 1384.79,1210.66 1385.37,1211.05 1385.96,1211.28 1386.55,1211.49 1387.13,1214.59 1387.72,1214.48 1388.3,1212.92 1388.89,1211.44 1389.48,1211.23 1390.06,1211.68 1390.65,1211.78 1391.24,1210.3 1391.82,1207.88 1392.41,1211.26 1393,1210.2 1393.58,1214.25 1394.17,1215.4 1394.75,1216.65 1395.34,1217.79 1395.93,1217.31 1396.51,1218.73 1397.1,1218.38 1397.69,1217.86 1398.27,1214.83 1398.86,1216.42 1399.45,1216.35 1400.03,1216.26 1400.62,1217.57 1401.21,1217.3 1401.79,1218.52 1402.38,1219.74 1402.96,1217.82 1403.55,1217.3 1404.14,1216.8 1404.72,1216.7 1405.31,1213.76 1405.9,1215.23 1406.48,1216.79 1407.07,1214.92 1407.66,1217.52 1408.24,1217.47 1408.83,1218.8 1409.42,1218.49 1410,1216.73 1410.59,1216.85 1411.17,1215.07 1411.76,1216.32 1412.35,1216.15 1412.93,1214.61 1413.52,1214.47 1414.11,1213.16 1414.69,1211.66 1415.28,1212.75 1415.87,1212.73 1416.45,1212.87 1417.04,1214 1417.63,1215.4 1418.21,1213.83 1418.8,1215.28 1419.38,1214.98 1419.97,1216.4 1420.56,1214.88 1421.14,1213.53 1421.73,1209.05 1422.32,1210.64 1422.9,1207.65 1423.49,1208.24 1424.08,1208.38 1424.66,1210.29 1425.25,1214.95 1425.83,1214.87 1426.42,1212.91 1427.01,1215.64 1427.59,1215.66 1428.18,1214.35 1428.77,1211.24 1429.35,1210.23 1429.94,1212 1430.53,1211.01 1431.11,1215.27 1431.7,1213.52 1432.29,1216.27 1432.87,1216.32 1433.46,1215.95 1434.04,1215.48 1434.63,1219.89 1435.22,1220.77 1435.8,1216.07 1436.39,1216.29 1436.98,1217.66 1437.56,1217.66 1438.15,1217.5 1438.74,1220.13 1439.32,1218.47 1439.91,1217.05 1440.5,1215.32 1441.08,1216.8 1441.67,1218.04 1442.25,1217.6 1442.84,1215.98 1443.43,1214.56 1444.01,1214.24 1444.6,1212.75 1445.19,1213.9 1445.77,1215.25 1446.36,1213.67 1446.95,1213.68 1447.53,1211.08 1448.12,1209.81 1448.7,1211.57 1449.29,1210.37 1449.88,1209.17 1450.46,1207.97 1451.05,1206.56 1451.64,1201.49 1452.22,1202.12 1452.81,1203.75 1453.4,1206.84 1453.98,1209.97 1454.57,1208.65 1455.16,1208.84 1455.74,1207.83 1456.33,1209.56 1456.91,1208.6 1457.5,1208.98 1458.09,1209.16 1458.67,1208.07 1459.26,1209.72 1459.85,1208.47 1460.43,1208.51 1461.02,1208.75 1461.61,1210.52 1462.19,1211.05 1462.78,1209.82 1463.37,1209.91 1463.95,1213.18 1464.54,1215.73 1465.12,1217.41 1465.71,1215.71 1466.3,1216.85 1466.88,1216.61 1467.47,1214.98 1468.06,1213.59 1468.64,1212.35 1469.23,1210.78 1469.82,1208.26 1470.4,1208.65 1470.99,1208.68 1471.57,1210.15 1472.16,1210.18 1472.75,1208.78 1473.33,1212.32 1473.92,1212.42 1474.51,1213.82 1475.09,1213.55 1475.68,1212.15 1476.27,1216.8 1476.85,1216.61 1477.44,1216.46 1478.03,1217.89 1478.61,1216.07 1479.2,1212.98 1479.78,1214.31 1480.37,1212.88 1480.96,1212.93 1481.54,1212.93 1482.13,1213.24 1482.72,1213.23 1483.3,1214.62 1483.89,1214.57 1484.48,1215.76 1485.06,1215.7 1485.65,1214.08 1486.24,1211.05 1486.82,1211.23 1487.41,1209.93 1487.99,1208.52 1488.58,1210.19 1489.17,1209.15 1489.75,1205.17 1490.34,1205.54 1490.93,1203.09 1491.51,1202.55 1492.1,1204.75 1492.69,1205.36 1493.27,1204.73 1493.86,1205.22 1494.45,1207.4 1495.03,1208.93 1495.62,1210.64 1496.2,1213.94 1496.79,1219.55 1497.38,1219.28 1497.96,1218.8 1498.55,1217.3 1499.14,1217.28 1499.72,1217.24 1500.31,1217.35 1500.9,1216.08 1501.48,1214.55 1502.07,1217.26 1502.65,1214.38 1503.24,1214.3 1503.83,1215.79 1504.41,1215.69 1505,1214.12 1505.59,1216.81 1506.17,1216.82 1506.76,1215.27 1507.35,1212.24 1507.93,1213.95 1508.52,1214.07 1509.11,1209.85 1509.69,1210.31 1510.28,1210.51 1510.86,1211.78 1511.45,1214.83 1512.04,1216.08 1512.62,1215.82 1513.21,1218.19 1513.8,1217.9 1514.38,1217.37 1514.97,1215.79 1515.56,1212.82 1516.14,1211.79 1516.73,1213.41 1517.32,1209.16 1517.9,1207.92 1518.49,1206.75 1519.07,1208.37 1519.66,1205.81 1520.25,1209.53 1520.83,1208.53 1521.42,1209.01 1522.01,1207.75 1522.59,1206.61 1523.18,1208.7 1523.77,1207.6 1524.35,1207.99 1524.94,1208.04 1525.52,1211.36 1526.11,1210.05 1526.7,1211.68 1527.28,1211.74 1527.87,1213.06 1528.46,1213.05 1529.04,1208.79 1529.63,1206.12 1530.22,1206.19 1530.8,1207.09 1531.39,1205.93 1531.98,1206.21 1532.56,1206.71 1533.15,1208.59 1533.73,1207.36 1534.32,1207.53 1534.91,1211.05 1535.49,1206.52 1536.08,1207 1536.67,1210.59 1537.25,1210.82 1537.84,1208.07 1538.43,1207.1 1539.01,1209.1 1539.6,1208 1540.19,1208.44 1540.77,1209.78 1541.36,1213.13 1541.94,1211.91 1542.53,1214.68 1543.12,1213.26 1543.7,1212.1 1544.29,1215.24 1544.88,1215.14 1545.46,1216.52 1546.05,1216.47 1546.64,1215.1 1547.22,1215 1547.81,1216.73 1548.4,1218.22 1548.98,1216.43 1549.57,1216.04 1550.15,1215.77 1550.74,1215.45 1551.33,1216.76 1551.91,1215.18 1552.5,1214.18 1553.09,1215.75 1553.67,1218.59 1554.26,1217 1554.85,1216.76 1555.43,1219.05 1556.02,1220.06 1556.6,1222.65 1557.19,1222.35 1557.78,1220.54 1558.36,1218.42 1558.95,1219.8 1559.54,1220.91 1560.12,1219.02 1560.71,1215.65 1561.3,1217.06 1561.88,1215.35 1562.47,1219.37 1563.06,1219.02 1563.64,1220.29 1564.23,1222.52 1564.81,1219.19 1565.4,1219 1565.99,1219.97 1566.57,1216.46 1567.16,1213.06 1567.75,1214.47 1568.33,1214.31 1568.92,1217.03 1569.51,1216.87 1570.09,1215.31 1570.68,1218.16 1571.27,1219.17 1571.85,1215.75 1572.44,1213.06 1573.02,1213.26 1573.61,1213.23 1574.2,1210.45 1574.78,1212.19 1575.37,1215.1 1575.96,1213.85 1576.54,1213.77 1577.13,1210.68 1577.72,1209.36 1578.3,1211.07 1578.89,1211.2 1579.47,1209.85 1580.06,1214.26 1580.65,1214.22 1581.23,1214.25 1581.82,1214.2 1582.41,1214.14 1582.99,1215.36 1583.58,1213.93 1584.17,1212.16 1584.75,1215.34 1585.34,1212.36 1585.93,1211.07 1586.51,1214.46 1587.1,1214.72 1587.68,1216.23 1588.27,1214.76 1588.86,1217.71 1589.44,1217.24 1590.03,1215.68 1590.62,1217.42 1591.2,1215.98 1591.79,1215.87 1592.38,1218.63 1592.96,1216.72 1593.55,1218.14 1594.14,1216.35 1594.72,1217.39 1595.31,1214.15 1595.89,1214.01 1596.48,1216.89 1597.07,1217.98 1597.65,1217.96 1598.24,1218.96 1598.83,1218.62 1599.41,1217.04 1600,1215.15 1600.59,1212.17 1601.17,1213.64 1601.76,1213.7 1602.34,1211.05 1602.93,1212.79 1603.52,1212.74 1604.1,1212.56 1604.69,1214.21 1605.28,1212.87 1605.86,1214.53 1606.45,1214.59 1607.04,1215.94 1607.62,1214.11 1608.21,1211.38 1608.8,1211.85 1609.38,1210.05 1609.97,1207.42 1610.55,1206.61 1611.14,1209.62 1611.73,1211.46 1612.31,1210.19 1612.9,1210.16 1613.49,1212.05 1614.07,1213.46 1614.66,1213.36 1615.25,1213.66 1615.83,1209.46 1616.42,1211.16 1617.01,1211.51 1617.59,1213.14 1618.18,1211.69 1618.76,1213.33 1619.35,1214.91 1619.94,1214.64 1620.52,1216.36 1621.11,1216.16 1621.7,1216.08 1622.28,1216.09 1622.87,1213.48 1623.46,1213.44 1624.04,1211.93 1624.63,1211.95 1625.22,1213.92 1625.8,1215.25 1626.39,1213.59 1626.97,1211.98 1627.56,1213.54 1628.15,1213.72 1628.73,1215.46 1629.32,1218.26 1629.91,1216.5 1630.49,1217.77 1631.08,1216.21 1631.67,1217.57 1632.25,1217.13 1632.84,1217.12 1633.42,1216.93 1634.01,1219.87 1634.6,1219.73 1635.18,1220.84 1635.77,1219.14 1636.36,1221.65 1636.94,1223.89 1637.53,1224.72 1638.12,1223.94 1638.7,1226.02 1639.29,1219.32 1639.88,1222.23 1640.46,1217.45 1641.05,1215.76 1641.63,1215.17 1642.22,1213.94 1642.81,1213.81 1643.39,1213.74 1643.98,1213.73 1644.57,1212.39 1645.15,1209.74 1645.74,1208.34 1646.33,1211.53 1646.91,1211.7 1647.5,1211.75 1648.09,1213.43 1648.67,1211.85 1649.26,1210.4 1649.84,1210.88 1650.43,1210.97 1651.02,1212.56 1651.6,1212.2 1652.19,1210.61 1652.78,1212.26 1653.36,1212.21 1653.95,1212.42 1654.54,1210.88 1655.12,1208.17 1655.71,1211.24 1656.29,1215.78 1656.88,1217.49 1657.47,1217.29 1658.05,1222.72 1658.64,1217.93 1659.23,1218.9 1659.81,1216.99 1660.4,1218.45 1660.99,1217.02 1661.57,1215.32 1662.16,1213.75 1662.75,1213.66 1663.33,1216.86 1663.92,1213.65 1664.5,1216.16 1665.09,1214.45 1665.68,1214.65 1666.26,1214.31 1666.85,1214.34 1667.44,1214.56 1668.02,1215.9 1668.61,1214.52 1669.2,1212.79 1669.78,1215.74 1670.37,1215.88 1670.96,1216.95 1671.54,1218.4 1672.13,1216.84 1672.71,1216.62 1673.3,1216.49 1673.89,1216.43 1674.47,1217.66 1675.06,1216 1675.65,1218.67 1676.23,1221.22 1676.82,1222.13 1677.41,1220.19 1677.99,1220.03 1678.58,1220.96 1679.17,1219.21 1679.75,1217.23 1680.34,1215.74 1680.92,1215.7 1681.51,1215.55 1682.1,1217 1682.68,1216.66 1683.27,1216.56 1683.86,1215.01 1684.44,1213.52 1685.03,1216.24 1685.62,1214.68 1686.2,1214.57 1686.79,1213.14 1687.37,1210.48 1687.96,1207.62 1688.55,1210.86 1689.13,1211.32 1689.72,1210.03 1690.31,1208.84 1690.89,1209.03 1691.48,1209.04 1692.07,1207.65 1692.65,1205 1693.24,1205.31 1693.83,1207.37 1694.41,1205.98 1695,1206.56 1695.58,1208.14 1696.17,1207.21 1696.76,1207.42 1697.34,1210.73 1697.93,1207.97 1698.52,1206.88 1699.1,1209.98 1699.69,1210.21 1700.28,1210.06 1700.86,1208.87 1701.45,1212.16 1702.04,1210.71 1702.62,1210.42 1703.21,1210.66 1703.79,1211.77 1704.38,1213.24 1704.97,1213.21 1705.55,1212.05 1706.14,1211.77 1706.73,1208.96 1707.31,1207.58 1707.9,1211.12 1708.49,1213.05 1709.07,1211.97 1709.66,1206.16 1710.24,1205.19 1710.83,1205.63 1711.42,1209.03 1712,1210.92 1712.59,1209.59 1713.18,1210.04 1713.76,1207.64 1714.35,1207.95 1714.94,1205.29 1715.52,1204.11 1716.11,1205.81 1716.7,1201.76 1717.28,1202.41 1717.87,1200.04 1718.45,1194.8 1719.04,1200.24 1719.63,1198.26 1720.21,1196.09 1720.8,1194.41 1721.39,1194.23 1721.97,1198.27 1722.56,1199.07 1723.15,1201.28 1723.73,1201.96 1724.32,1202.88 1724.91,1205.05 1725.49,1207.01 1726.08,1211.34 1726.66,1212.96 1727.25,1213.23 1727.84,1214.76 1728.42,1214.67 1729.01,1216.08 1729.6,1217.26 1730.18,1215.68 1730.77,1217.04 1731.36,1216.76 1731.94,1217.94 1732.53,1216.12 1733.11,1221.61 1733.7,1218.45 1734.29,1219.49 1734.87,1219.37 1735.46,1217.47 1736.05,1218.52 1736.63,1221.33 1737.22,1217.93 1737.81,1216.3 1738.39,1214.75 1738.98,1210.38 1739.57,1210.58 1740.15,1218.01 1740.74,1219.58 1741.32,1220.15 1741.91,1218.59 1742.5,1217.2 1743.08,1220.02 1743.67,1218.29 1744.26,1219.4 1744.84,1222.13 1745.43,1222.89 1746.02,1222.3 1746.6,1219.17 1747.19,1213.19 1747.78,1211.88 1748.36,1210.77 1748.95,1209.49 1749.53,1208.34 1750.12,1205.37 1750.71,1208.65 1751.29,1204.38 1751.88,1203 1752.47,1202.44 1753.05,1206.04 1753.64,1212.14 1754.23,1210.9 1754.81,1204.91 1755.4,1206.65 1755.99,1209.83 1756.57,1208.8 1757.16,1203.04 1757.74,1201.95 1758.33,1202.86 1758.92,1201.91 1759.5,1201 1760.09,1203.03 1760.68,1203.88 1761.26,1205.79 1761.85,1203.56 1762.44,1205.37 1763.02,1205.61 1763.61,1205.82 1764.19,1207.69 1764.78,1208.13 1765.37,1208.53 1765.95,1210.29 1766.54,1210.4 1767.13,1212.23 1767.71,1213.59 1768.3,1215.2 1768.89,1213.77 1769.47,1212.16 1770.06,1212.59 1770.65,1212.8 1771.23,1212.52 1771.82,1212.65 1772.4,1211.37 1772.99,1212.9 1773.58,1214.28 1774.16,1214.13 1774.75,1213.9 1775.34,1212.78 1775.92,1214.4 1776.51,1212.85 1777.1,1214.28 1777.68,1214.43 1778.27,1214.52 1778.86,1214.66 1779.44,1217.72 1780.03,1215.91 1780.61,1219.92 1781.2,1221.13 1781.79,1219.42 1782.37,1218.96 1782.96,1218.54 1783.55,1219.59 1784.13,1224.93 1784.72,1225.58 1785.31,1225.19 1785.89,1224.77 1786.48,1218.42 1787.06,1219.49 1787.65,1217.82 1788.24,1217.4 1788.82,1221.24 1789.41,1225 1790,1228.65 1790.58,1227.64 1791.17,1225.6 1791.76,1225.28 1792.34,1223.31 1792.93,1222.96 1793.52,1219.63 1794.1,1220.64 1794.69,1220.17 1795.27,1218.34 1795.86,1216.48 1796.45,1217.47 1797.03,1217.27 1797.62,1218.63 1798.21,1221.17 1798.79,1220.79 1799.38,1218.79 1799.97,1218.28 1800.55,1218.02 1801.14,1213.42 1801.73,1213.12 1802.31,1213.32 1802.9,1213.53 1803.48,1214.89 1804.07,1214.27 1804.66,1214.27 1805.24,1214.36 1805.83,1214.28 1806.42,1215.55 1807,1216.89 1807.59,1217.93 1808.18,1216.42 1808.76,1213.46 1809.35,1216.2 1809.94,1216.19 1810.52,1213.21 1811.11,1217.63 1811.69,1217.58 1812.28,1217.27 1812.87,1216.97 1813.45,1216.59 1814.04,1214.91 1814.63,1214.52 1815.21,1214.7 1815.8,1216.36 1816.39,1218.07 1816.97,1216.07 1817.56,1214.38 1818.14,1215.67 1818.73,1216.89 1819.32,1216.43 1819.9,1216.56 1820.49,1215.22 1821.08,1215.23 1821.66,1214.06 1822.25,1215.64 1822.84,1214.08 1823.42,1212.81 1824.01,1211.43 1824.6,1216.24 1825.18,1214.43 1825.77,1215.68 1826.35,1214.07 1826.94,1217.04 1827.53,1213.95 1828.11,1212.51 1828.7,1208.07 1829.29,1208.26 1829.87,1208.42 1830.46,1208.57 1831.05,1211.47 1831.63,1212.82 1832.22,1211.29 1832.81,1211.57 1833.39,1214.72 1833.98,1220.14 1834.56,1219.74 1835.15,1220.97 1835.74,1220.64 1836.32,1220.26 1836.91,1222.75 1837.5,1222.16 1838.08,1220.1 1838.67,1218.46 1839.26,1218.17 1839.84,1222.25 1840.43,1220.13 1841.01,1219.66 1841.6,1222.16 1842.19,1217.56 1842.77,1217.58 1843.36,1218.63 1843.95,1221.05 1844.53,1217.9 1845.12,1219.24 1845.71,1214.55 1846.29,1214.3 1846.88,1212.64 1847.47,1209.75 1848.05,1210.14 1848.64,1211.54 1849.22,1211.64 1849.81,1211.9 1850.4,1210.57 1850.98,1210.71 1851.57,1211.89 1852.16,1211.96 1852.74,1211.8 1853.33,1212.23 1853.92,1212.24 1854.5,1208.93 1855.09,1210.92 1855.68,1210.89 1856.26,1209.7 1856.85,1209.95 1857.43,1211.5 1858.02,1211.78 1858.61,1211.59 1859.19,1213 1859.78,1213.17 1860.37,1213.11 1860.95,1217.56 1861.54,1217.14 1862.13,1215.44 1862.71,1214.2 1863.3,1211.05 1863.88,1209.79 1864.47,1210 1865.06,1211.33 1865.64,1209.96 1866.23,1210.17 1866.82,1210.62 1867.4,1212.2 1867.99,1213.86 1868.58,1211.05 1869.16,1212.88 1869.75,1210.07 1870.34,1208.59 1870.92,1207.16 1871.51,1207.58 1872.09,1207.95 1872.68,1208.03 1873.27,1208.04 1873.85,1212.65 1874.44,1214.1 1875.03,1215.08 1875.61,1211.98 1876.2,1219.44 1876.79,1219.17 1877.37,1218.72 1877.96,1217.09 1878.55,1215.84 1879.13,1214.37 1879.72,1215.74 1880.3,1214.16 1880.89,1214.51 1881.48,1216.02 1882.06,1211.54 1882.65,1211.79 1883.24,1210.58 1883.82,1213.69 1884.41,1219.66 1885,1219.32 1885.58,1217.62 1886.17,1218.75 1886.76,1218.56 1887.34,1219.58 1887.93,1219.17 1888.51,1217.37 1889.1,1221.25 1889.69,1219.63 1890.27,1220.81 1890.86,1222.23 1891.45,1217.78 1892.03,1218.72 1892.62,1220.23 1893.21,1218.44 1893.79,1216.49 1894.38,1216.35 1894.96,1217.32 1895.55,1217.06 1896.14,1213.89 1896.72,1212.85 1897.31,1211.53 1897.9,1210.1 1898.48,1211.85 1899.07,1209.04 1899.66,1208.89 1900.24,1206.29 1900.83,1207.1 1901.42,1208.58 1902,1211.76 1902.59,1210.66 1903.17,1210.74 1903.76,1209.73 1904.35,1209.98 1904.93,1207.02 1905.52,1205.82 1906.11,1207.22 1906.69,1206.56 1907.28,1206.78 1907.87,1205.87 1908.45,1204.83 1909.04,1205.54 1909.63,1208.71 1910.21,1206.15 1910.8,1208.13 1911.38,1209.91 1911.97,1207.06 1912.56,1204.43 1913.14,1206.34 1913.73,1208.33 1914.32,1208.64 1914.9,1205.92 1915.49,1206.43 1916.08,1207.01 1916.66,1208.72 1917.25,1212.09 1917.83,1209.33 1918.42,1211.01 1919.01,1209.87 1919.59,1210.36 1920.18,1210.45 1920.77,1212.03 1921.35,1217.49 1921.94,1216.14 1922.53,1216.19 1923.11,1214.99 1923.7,1213.29 1924.29,1214.8 1924.87,1213.59 1925.46,1216.63 1926.04,1217.81 1926.63,1220.58 1927.22,1220.29 1927.8,1222.46 1928.39,1224.77 1928.98,1221.61 1929.56,1221.16 1930.15,1220.71 1930.74,1221.47 1931.32,1221.56 1931.91,1218.41 1932.5,1216.95 1933.08,1216.69 1933.67,1215.09 1934.25,1215.31 1934.84,1217.9 1935.43,1218.99 1936.01,1217.23 1936.6,1218.21 1937.19,1215.12 1937.77,1214.9 1938.36,1214.72 1938.95,1213.24 1939.53,1213.04 1940.12,1211.77 1940.71,1210.44 1941.29,1211.93 1941.88,1217.58 1942.46,1218.96 1943.05,1218.6 1943.64,1216.74 1944.22,1216.78 1944.81,1217.14 1945.4,1217.01 1945.98,1216.92 1946.57,1218.02 1947.16,1220.61 1947.74,1218.94 1948.33,1217.05 1948.91,1214 1949.5,1215.05 1950.09,1215.18 1950.67,1216.5 1951.26,1214.64 1951.85,1215.94 1952.43,1214.3 1953.02,1212.54 1953.61,1214 1954.19,1212.47 1954.78,1213.92 1955.37,1212.35 1955.95,1212.11 1956.54,1213.56 1957.12,1216.49 1957.71,1214.66 1958.3,1211.61 1958.88,1214.97 1959.47,1216.16 1960.06,1217.4 1960.64,1217.19 1961.23,1217.18 1961.82,1212.63 1962.4,1209.84 1962.99,1202.8 1963.58,1203.27 1964.16,1202.64 1964.75,1203.35 1965.33,1202.94 1965.92,1200.33 1966.51,1202.09 1967.09,1202.62 1967.68,1203.08 1968.27,1204.99 1968.85,1202.8 1969.44,1206.38 1970.03,1207.2 1970.61,1207.67 1971.2,1206.37 1971.78,1205.15 1972.37,1207.26 1972.96,1208.85 1973.54,1211.97 1974.13,1212.07 1974.72,1210.89 1975.3,1209.7 1975.89,1208.31 1976.48,1205.88 1977.06,1204.74 1977.65,1206.69 1978.24,1209.79 1978.82,1209.96 1979.41,1211.87 1979.99,1210.81 1980.58,1211.05 1981.17,1210.73 1981.75,1215.09 1982.34,1214.97 1982.93,1216.65 1983.51,1220.8 1984.1,1219.18 1984.69,1220.31 1985.27,1220.18 1985.86,1217.18 1986.45,1217 1987.03,1218.35 1987.62,1217.88 1988.2,1219.35 1988.79,1217.62 1989.38,1216.06 1989.96,1214.29 1990.55,1215.39 1991.14,1215.18 1991.72,1214.95 1992.31,1215.05 1992.9,1215.16 1993.48,1216.48 1994.07,1216.19 1994.65,1218.86 1995.24,1215.68 1995.83,1217.36 1996.41,1217.03 1997,1215.42 1997.59,1215.19 1998.17,1213.6 1998.76,1214.62 1999.35,1215.67 1999.93,1215.47 2000.52,1208.22 2001.11,1212.61 2001.69,1211.41 2002.28,1211.43 2002.86,1211.69 2003.45,1210.5 2004.04,1212.34 2004.62,1212.35 2005.21,1213.8 2005.8,1209.39 2006.38,1212.44 2006.97,1209.81 2007.56,1210.14 2008.14,1213.15 2008.73,1213.34 2009.32,1208.68 2009.9,1209.18 2010.49,1210.62 2011.07,1210.39 2011.66,1212.03 2012.25,1210.33 2012.83,1210.73 2013.42,1208.1 2014.01,1208.34 2014.59,1206.74 2015.18,1211.37 2015.77,1212.66 2016.35,1215.44 2016.94,1215.62 2017.53,1215.97 2018.11,1215.76 2018.7,1217.01 2019.28,1217 2019.87,1217.02 2020.46,1216.81 2021.04,1218.08 2021.63,1220.94 2022.22,1217.39 2022.8,1217.34 2023.39,1217.16 2023.98,1219.27 2024.56,1219.13 2025.15,1216.25 2025.73,1214.84 2026.32,1214.74 2026.91,1216.07 2027.49,1217.29 2028.08,1218.22 2028.67,1217.95 2029.25,1216.43 2029.84,1217.93 2030.43,1217.5 2031.01,1216.96 2031.6,1215.24 2032.19,1215.41 2032.77,1215.24 2033.36,1219.4 2033.94,1216.57 2034.53,1216.43 2035.12,1214.79 2035.7,1219.19 2036.29,1218.52 2036.88,1215.77 2037.46,1217.11 2038.05,1217.07 2038.64,1215.36 2039.22,1217.96 2039.81,1217.72 2040.4,1218.75 2040.98,1220.06 2041.57,1222.56 2042.15,1220.91 2042.74,1221.9 2043.33,1224.4 2043.91,1222.5 2044.5,1220.71 2045.09,1220.15 2045.67,1219.82 2046.26,1219.62 2046.85,1220.57 2047.43,1218.71 2048.02,1218.24 2048.6,1215.07 2049.19,1216.35 2049.78,1217.76 2050.36,1217.29 2050.95,1217.1 2051.54,1218.29 2052.12,1217.9 2052.71,1218.78 2053.3,1218.52 2053.88,1218.27 2054.47,1218.03 2055.06,1216.53 2055.64,1215.03 2056.23,1212.43 2056.81,1212.74 2057.4,1214.57 2057.99,1214.48 2058.57,1217.24 2059.16,1215.85 2059.75,1215.77 2060.33,1213.88 2060.92,1216.99 2061.51,1216.73 2062.09,1216.51 2062.68,1213.63 2063.27,1216.64 2063.85,1214.84 2064.44,1213.24 2065.02,1214.62 2065.61,1214.66 2066.2,1216.14 2066.78,1217.64 2067.37,1221.89 2067.96,1221.65 2068.54,1221.39 2069.13,1215.14 2069.72,1215.19 2070.3,1215.11 2070.89,1213.7 2071.48,1212.22 2072.06,1212.22 2072.65,1212.48 2073.23,1214.15 2073.82,1212.69 2074.41,1212.48 2074.99,1215.45 2075.58,1214.02 2076.17,1211.27 2076.75,1214.14 2077.34,1214.21 2077.93,1212.95 2078.51,1215.82 2079.1,1215.43 2079.68,1213.89 2080.27,1215.39 2080.86,1215.55 2081.44,1212.32 2082.03,1209.25 2082.62,1212.42 2083.2,1212.71 2083.79,1211.03 2084.38,1211.29 2084.96,1211.5 2085.55,1208.68 2086.14,1208.97 2086.72,1210.48 2087.31,1209.07 2087.89,1209.13 2088.48,1212.23 2089.07,1212.75 2089.65,1212.93 2090.24,1215.43 2090.83,1215.47 2091.41,1215.32 2092,1213.84 2092.59,1210.57 2093.17,1212.05 2093.76,1212.24 2094.35,1212.3 2094.93,1213.67 2095.52,1213.45 2096.1,1213.6 2096.69,1213.75 2097.28,1217.93 2097.86,1216.19 2098.45,1217.51 2099.04,1220.18 2099.62,1220.01 2100.21,1219.79 2100.8,1222.5 2101.38,1220.64 2101.97,1220.08 2102.55,1218.47 2103.14,1219.54 2103.73,1219.46 2104.31,1219.24 2104.9,1218.9 2105.49,1217.16 2106.07,1218.19 2106.66,1216.35 2107.25,1219.25 2107.83,1217.68 2108.42,1214.44 2109.01,1215.81 2109.59,1215.84 2110.18,1213.08 2110.76,1214.48 2111.35,1215.95 2111.94,1214.35 2112.52,1214.35 2113.11,1217.29 2113.7,1217.22 2114.28,1215.61 2114.87,1214.09 2115.46,1212.54 2116.04,1209.74 2116.63,1209.96 2117.22,1209.87 2117.8,1208.26 2118.39,1210.18 2118.97,1208.85 2119.56,1210.56 2120.15,1210.66 2120.73,1210.89 2121.32,1205.01 2121.91,1205.35 2122.49,1207.29 2123.08,1203.39 2123.67,1203.82 2124.25,1205.5 2124.84,1204.54 2125.42,1207.8 2126.01,1206.83 2126.6,1208.75 2127.18,1208.65 2127.77,1204.74 2128.36,1203.98 2128.94,1201.68 2129.53,1200.86 2130.12,1203.16 2130.7,1202.02 2131.29,1205.55 2131.88,1212.06 2132.46,1210.73 2133.05,1211.12 2133.63,1212.85 2134.22,1212.44 2134.81,1210.89 2135.39,1209.99 2135.98,1210.35 2136.57,1211.88 2137.15,1216.72 2137.74,1216.55 2138.33,1216.26 2138.91,1216.13 2139.5,1216.08 2140.09,1210.09 2140.67,1208.75 2141.26,1210.32 2141.84,1208.98 2142.43,1209.11 2143.02,1209.34 2143.6,1211.05 2144.19,1208.51 2144.78,1208.99 2145.36,1209.4 2145.95,1208.14 2146.54,1208.56 2147.12,1212.06 2147.71,1210.69 2148.3,1209.65 2148.88,1214.01 2149.47,1215.37 2150.05,1216.71 2150.64,1215.48 2151.23,1213.84 2151.81,1213.49 2152.4,1212.14 2152.99,1209.32 2153.57,1209.67 2154.16,1210.32 2154.75,1211.73 2155.33,1210.44 2155.92,1212.21 2156.5,1215.09 2157.09,1214.97 2157.68,1210.66 2158.26,1212.14 \"/>\n<path clip-path=\"url(#clip942)\" d=\"M986.025 1214.21 L986.612 1214.21 L987.198 1214.21 L987.785 1214.21 L988.371 1214.21 L988.957 1214.21 L989.544 1214.21 L990.13 1214.21 L990.717 1214.21 L991.303 1214.21 L991.889 1214.21 L992.476 1214.21 L993.062 1214.21 L993.649 1214.21 L994.235 1214.21 L994.822 1214.21 L995.408 1214.21 L995.994 1214.21 L996.581 1214.21 L997.167 1214.21 L997.754 1214.21 L998.34 1214.21 L998.926 1214.21 L999.513 1214.21 L1000.1 1214.21 L1000.69 1214.21 L1001.27 1214.21 L1001.86 1214.21 L1002.44 1214.21 L1003.03 1214.21 L1003.62 1214.21 L1004.2 1214.21 L1004.79 1214.21 L1005.38 1214.21 L1005.96 1214.21 L1006.55 1214.21 L1007.14 1214.21 L1007.72 1214.21 L1008.31 1214.21 L1008.9 1214.21 L1009.48 1214.21 L1010.07 1214.21 L1010.65 1214.21 L1011.24 1214.21 L1011.83 1214.21 L1012.41 1214.21 L1013 1214.21 L1013.59 1214.21 L1014.17 1214.21 L1014.76 1214.21 L1015.35 1214.21 L1015.93 1214.21 L1016.52 1214.21 L1017.11 1214.21 L1017.69 1214.21 L1018.28 1214.21 L1018.86 1214.21 L1019.45 1214.21 L1020.04 1214.21 L1020.62 1214.21 L1021.21 1214.21 L1021.8 1214.21 L1022.38 1214.21 L1022.97 1214.21 L1023.56 1214.21 L1024.14 1214.21 L1024.73 1214.21 L1025.32 1214.21 L1025.9 1214.21 L1026.49 1214.21 L1027.07 1214.21 L1027.66 1214.21 L1028.25 1214.21 L1028.83 1214.21 L1029.42 1214.21 L1030.01 1214.21 L1030.59 1214.21 L1031.18 1214.21 L1031.77 1214.21 L1032.35 1214.21 L1032.94 1214.21 L1033.52 1214.21 L1034.11 1214.21 L1034.7 1214.21 L1035.28 1214.21 L1035.87 1214.21 L1036.46 1214.21 L1037.04 1214.21 L1037.63 1214.21 L1038.22 1214.21 L1038.8 1214.21 L1039.39 1214.21 L1039.98 1214.21 L1040.56 1214.21 L1041.15 1214.21 L1041.73 1214.21 L1042.32 1214.21 L1042.91 1214.21 L1043.49 1214.21 L1044.08 1214.21 L1044.67 1214.21 L1045.25 1214.21 L1045.84 1214.21 L1046.43 1214.21 L1047.01 1214.21 L1047.6 1214.21 L1048.19 1214.21 L1048.77 1214.21 L1049.36 1214.21 L1049.94 1214.21 L1050.53 1214.21 L1051.12 1214.21 L1051.7 1214.21 L1052.29 1214.21 L1052.88 1214.21 L1053.46 1214.21 L1054.05 1214.21 L1054.64 1214.21 L1055.22 1214.21 L1055.81 1214.21 L1056.39 1214.21 L1056.98 1214.21 L1057.57 1214.21 L1058.15 1214.21 L1058.74 1214.21 L1059.33 1214.21 L1059.91 1214.21 L1060.5 1214.21 L1061.09 1214.21 L1061.67 1214.21 L1062.26 1214.21 L1062.85 1214.21 L1063.43 1214.21 L1064.02 1214.21 L1064.6 1214.21 L1065.19 1214.21 L1065.78 1214.21 L1066.36 1214.21 L1066.95 1214.21 L1067.54 1214.21 L1068.12 1214.21 L1068.71 1214.21 L1069.3 1214.21 L1069.88 1214.21 L1070.47 1214.21 L1071.06 1214.21 L1071.64 1214.21 L1072.23 1214.21 L1072.81 1214.21 L1073.4 1214.21 L1073.99 1214.21 L1074.57 1214.21 L1075.16 1214.21 L1075.75 1214.21 L1076.33 1214.21 L1076.92 1214.21 L1077.51 1214.21 L1078.09 1214.21 L1078.68 1214.21 L1079.26 1214.21 L1079.85 1214.21 L1080.44 1214.21 L1081.02 1214.21 L1081.61 1214.21 L1082.2 1214.21 L1082.78 1214.21 L1083.37 1214.21 L1083.96 1214.21 L1084.54 1214.21 L1085.13 1214.21 L1085.72 1214.21 L1086.3 1214.21 L1086.89 1214.21 L1087.47 1214.21 L1088.06 1214.21 L1088.65 1214.21 L1089.23 1214.21 L1089.82 1214.21 L1090.41 1214.21 L1090.99 1214.21 L1091.58 1214.21 L1092.17 1214.21 L1092.75 1214.21 L1093.34 1214.21 L1093.93 1214.21 L1094.51 1214.21 L1095.1 1214.21 L1095.68 1214.21 L1096.27 1214.21 L1096.86 1214.21 L1097.44 1214.21 L1098.03 1214.21 L1098.62 1214.21 L1099.2 1214.21 L1099.79 1214.21 L1100.38 1214.21 L1100.96 1214.21 L1101.55 1214.21 L1102.14 1214.21 L1102.72 1214.21 L1103.31 1214.21 L1103.89 1214.21 L1104.48 1214.21 L1105.07 1214.21 L1105.65 1214.21 L1106.24 1214.21 L1106.83 1214.21 L1107.41 1214.21 L1108 1214.21 L1108.59 1214.21 L1109.17 1214.21 L1109.76 1214.21 L1110.34 1214.21 L1110.93 1214.21 L1111.52 1214.21 L1112.1 1214.21 L1112.69 1214.21 L1113.28 1214.21 L1113.86 1214.21 L1114.45 1214.21 L1115.04 1214.21 L1115.62 1214.21 L1116.21 1214.21 L1116.8 1214.21 L1117.38 1214.21 L1117.97 1214.21 L1118.55 1214.21 L1119.14 1214.21 L1119.73 1214.21 L1120.31 1214.21 L1120.9 1214.21 L1121.49 1214.21 L1122.07 1214.21 L1122.66 1214.21 L1123.25 1214.21 L1123.83 1214.21 L1124.42 1214.21 L1125.01 1214.21 L1125.59 1214.21 L1126.18 1214.21 L1126.76 1214.21 L1127.35 1214.21 L1127.94 1214.21 L1128.52 1214.21 L1129.11 1214.21 L1129.7 1214.21 L1130.28 1214.21 L1130.87 1214.21 L1131.46 1214.21 L1132.04 1214.21 L1132.63 1214.21 L1133.21 1214.21 L1133.8 1214.21 L1134.39 1214.21 L1134.97 1214.21 L1135.56 1214.21 L1136.15 1214.21 L1136.73 1214.21 L1137.32 1214.21 L1137.91 1214.21 L1138.49 1214.21 L1139.08 1214.21 L1139.67 1214.21 L1140.25 1214.21 L1140.84 1214.21 L1141.42 1214.21 L1142.01 1214.21 L1142.6 1214.21 L1143.18 1214.21 L1143.77 1214.21 L1144.36 1214.21 L1144.94 1214.21 L1145.53 1214.21 L1146.12 1214.21 L1146.7 1214.21 L1147.29 1214.21 L1147.88 1214.21 L1148.46 1214.21 L1149.05 1214.21 L1149.63 1214.21 L1150.22 1214.21 L1150.81 1214.21 L1151.39 1214.21 L1151.98 1214.21 L1152.57 1214.21 L1153.15 1214.21 L1153.74 1214.21 L1154.33 1214.21 L1154.91 1214.21 L1155.5 1214.21 L1156.09 1214.21 L1156.67 1214.21 L1157.26 1214.21 L1157.84 1214.21 L1158.43 1214.21 L1159.02 1214.21 L1159.6 1214.21 L1160.19 1214.21 L1160.78 1214.21 L1161.36 1214.21 L1161.95 1214.21 L1162.54 1214.21 L1163.12 1214.21 L1163.71 1214.21 L1164.29 1214.21 L1164.88 1214.21 L1165.47 1214.21 L1166.05 1214.21 L1166.64 1214.21 L1167.23 1214.21 L1167.81 1214.21 L1168.4 1214.21 L1168.99 1214.21 L1169.57 1214.21 L1170.16 1214.21 L1170.75 1214.21 L1171.33 1214.21 L1171.92 1214.21 L1172.5 1214.21 L1173.09 1214.21 L1173.68 1214.21 L1174.26 1214.21 L1174.85 1214.21 L1175.44 1214.21 L1176.02 1214.21 L1176.61 1214.21 L1177.2 1214.21 L1177.78 1214.21 L1178.37 1214.21 L1178.96 1214.21 L1179.54 1214.21 L1180.13 1214.21 L1180.71 1214.21 L1181.3 1214.21 L1181.89 1214.21 L1182.47 1214.21 L1183.06 1214.21 L1183.65 1214.21 L1184.23 1214.21 L1184.82 1214.21 L1185.41 1214.21 L1185.99 1214.21 L1186.58 1214.21 L1187.16 1214.21 L1187.75 1214.21 L1188.34 1214.21 L1188.92 1214.21 L1189.51 1214.21 L1190.1 1214.21 L1190.68 1214.21 L1191.27 1214.21 L1191.86 1214.21 L1192.44 1214.21 L1193.03 1214.21 L1193.62 1214.21 L1194.2 1214.21 L1194.79 1214.21 L1195.37 1214.21 L1195.96 1214.21 L1196.55 1214.21 L1197.13 1214.21 L1197.72 1214.21 L1198.31 1214.21 L1198.89 1214.21 L1199.48 1214.21 L1200.07 1214.21 L1200.65 1214.21 L1201.24 1214.21 L1201.83 1214.21 L1202.41 1214.21 L1203 1214.21 L1203.58 1214.21 L1204.17 1214.21 L1204.76 1214.21 L1205.34 1214.21 L1205.93 1214.21 L1206.52 1214.21 L1207.1 1214.21 L1207.69 1214.21 L1208.28 1214.21 L1208.86 1214.21 L1209.45 1214.21 L1210.03 1214.21 L1210.62 1214.21 L1211.21 1214.21 L1211.79 1214.21 L1212.38 1214.21 L1212.97 1214.21 L1213.55 1214.21 L1214.14 1214.21 L1214.73 1214.21 L1215.31 1214.21 L1215.9 1214.21 L1216.49 1214.21 L1217.07 1214.21 L1217.66 1214.21 L1218.24 1214.21 L1218.83 1214.21 L1219.42 1214.21 L1220 1214.21 L1220.59 1214.21 L1221.18 1214.21 L1221.76 1214.21 L1222.35 1214.21 L1222.94 1214.21 L1223.52 1214.21 L1224.11 1214.21 L1224.7 1214.21 L1225.28 1214.21 L1225.87 1214.21 L1226.45 1214.21 L1227.04 1214.21 L1227.63 1214.21 L1228.21 1214.21 L1228.8 1214.21 L1229.39 1214.21 L1229.97 1214.21 L1230.56 1214.21 L1231.15 1214.21 L1231.73 1214.21 L1232.32 1214.21 L1232.91 1214.21 L1233.49 1214.21 L1234.08 1214.21 L1234.66 1214.21 L1235.25 1214.21 L1235.84 1214.21 L1236.42 1214.21 L1237.01 1214.21 L1237.6 1214.21 L1238.18 1214.21 L1238.77 1214.21 L1239.36 1214.21 L1239.94 1214.21 L1240.53 1214.21 L1241.11 1214.21 L1241.7 1214.21 L1242.29 1214.21 L1242.87 1214.21 L1243.46 1214.21 L1244.05 1214.21 L1244.63 1214.21 L1245.22 1214.21 L1245.81 1214.21 L1246.39 1214.21 L1246.98 1214.21 L1247.57 1214.21 L1248.15 1214.21 L1248.74 1214.21 L1249.32 1214.21 L1249.91 1214.21 L1250.5 1214.21 L1251.08 1214.21 L1251.67 1214.21 L1252.26 1214.21 L1252.84 1214.21 L1253.43 1214.21 L1254.02 1214.21 L1254.6 1214.21 L1255.19 1214.21 L1255.78 1214.21 L1256.36 1214.21 L1256.95 1214.21 L1257.53 1214.21 L1258.12 1214.21 L1258.71 1214.21 L1259.29 1214.21 L1259.88 1214.21 L1260.47 1214.21 L1261.05 1214.21 L1261.64 1214.21 L1262.23 1214.21 L1262.81 1214.21 L1263.4 1214.21 L1263.98 1214.21 L1264.57 1214.21 L1265.16 1214.21 L1265.74 1214.21 L1266.33 1214.21 L1266.92 1214.21 L1267.5 1214.21 L1268.09 1214.21 L1268.68 1214.21 L1269.26 1214.21 L1269.85 1214.21 L1270.44 1214.21 L1271.02 1214.21 L1271.61 1214.21 L1272.19 1214.21 L1272.78 1214.21 L1273.37 1214.21 L1273.95 1214.21 L1274.54 1214.21 L1275.13 1214.21 L1275.71 1214.21 L1276.3 1214.21 L1276.89 1214.21 L1277.47 1214.21 L1278.06 1214.21 L1278.65 1214.21 L1279.23 1214.21 L1279.82 1214.21 L1280.4 1214.21 L1280.99 1214.21 L1281.58 1214.21 L1282.16 1214.21 L1282.75 1214.21 L1283.34 1214.21 L1283.92 1214.21 L1284.51 1214.21 L1285.1 1214.21 L1285.68 1214.21 L1286.27 1214.21 L1286.86 1214.21 L1287.44 1214.21 L1288.03 1214.21 L1288.61 1214.21 L1289.2 1214.21 L1289.79 1214.21 L1290.37 1214.21 L1290.96 1214.21 L1291.55 1214.21 L1292.13 1214.21 L1292.72 1214.21 L1293.31 1214.21 L1293.89 1214.21 L1294.48 1214.21 L1295.06 1214.21 L1295.65 1214.21 L1296.24 1214.21 L1296.82 1214.21 L1297.41 1214.21 L1298 1214.21 L1298.58 1214.21 L1299.17 1214.21 L1299.76 1214.21 L1300.34 1214.21 L1300.93 1214.21 L1301.52 1214.21 L1302.1 1214.21 L1302.69 1214.21 L1303.27 1214.21 L1303.86 1214.21 L1304.45 1214.21 L1305.03 1214.21 L1305.62 1214.21 L1306.21 1214.21 L1306.79 1214.21 L1307.38 1214.21 L1307.97 1214.21 L1308.55 1214.21 L1309.14 1214.21 L1309.73 1214.21 L1310.31 1214.21 L1310.9 1214.21 L1311.48 1214.21 L1312.07 1214.21 L1312.66 1214.21 L1313.24 1214.21 L1313.83 1214.21 L1314.42 1214.21 L1315 1214.21 L1315.59 1214.21 L1316.18 1214.21 L1316.76 1214.21 L1317.35 1214.21 L1317.93 1214.21 L1318.52 1214.21 L1319.11 1214.21 L1319.69 1214.21 L1320.28 1214.21 L1320.87 1214.21 L1321.45 1214.21 L1322.04 1214.21 L1322.63 1214.21 L1323.21 1214.21 L1323.8 1214.21 L1324.39 1214.21 L1324.97 1214.21 L1325.56 1214.21 L1326.14 1214.21 L1326.73 1214.21 L1327.32 1214.21 L1327.9 1214.21 L1328.49 1214.21 L1329.08 1214.21 L1329.66 1214.21 L1330.25 1214.21 L1330.84 1214.21 L1331.42 1214.21 L1332.01 1214.21 L1332.6 1214.21 L1333.18 1214.21 L1333.77 1214.21 L1334.35 1214.21 L1334.94 1214.21 L1335.53 1214.21 L1336.11 1214.21 L1336.7 1214.21 L1337.29 1214.21 L1337.87 1214.21 L1338.46 1214.21 L1339.05 1214.21 L1339.63 1214.21 L1340.22 1214.21 L1340.8 1214.21 L1341.39 1214.21 L1341.98 1214.21 L1342.56 1214.21 L1343.15 1214.21 L1343.74 1214.21 L1344.32 1214.21 L1344.91 1214.21 L1345.5 1214.21 L1346.08 1214.21 L1346.67 1214.21 L1347.26 1214.21 L1347.84 1214.21 L1348.43 1214.21 L1349.01 1214.21 L1349.6 1214.21 L1350.19 1214.21 L1350.77 1214.21 L1351.36 1214.21 L1351.95 1214.21 L1352.53 1214.21 L1353.12 1214.21 L1353.71 1214.21 L1354.29 1214.21 L1354.88 1214.21 L1355.47 1214.21 L1356.05 1214.21 L1356.64 1214.21 L1357.22 1214.21 L1357.81 1214.21 L1358.4 1214.21 L1358.98 1214.21 L1359.57 1214.21 L1360.16 1214.21 L1360.74 1214.21 L1361.33 1214.21 L1361.92 1214.21 L1362.5 1214.21 L1363.09 1214.21 L1363.68 1214.21 L1364.26 1214.21 L1364.85 1214.21 L1365.43 1214.21 L1366.02 1214.21 L1366.61 1214.21 L1367.19 1214.21 L1367.78 1214.21 L1368.37 1214.21 L1368.95 1214.21 L1369.54 1214.21 L1370.13 1214.21 L1370.71 1214.21 L1371.3 1214.21 L1371.88 1214.21 L1372.47 1214.21 L1373.06 1214.21 L1373.64 1214.21 L1374.23 1214.21 L1374.82 1214.21 L1375.4 1214.21 L1375.99 1214.21 L1376.58 1214.21 L1377.16 1214.21 L1377.75 1214.21 L1378.34 1214.21 L1378.92 1214.21 L1379.51 1214.21 L1380.09 1214.21 L1380.68 1214.21 L1381.27 1214.21 L1381.85 1214.21 L1382.44 1214.21 L1383.03 1214.21 L1383.61 1214.21 L1384.2 1214.21 L1384.79 1214.21 L1385.37 1214.21 L1385.96 1214.21 L1386.55 1214.21 L1387.13 1214.21 L1387.72 1214.21 L1388.3 1214.21 L1388.89 1214.21 L1389.48 1214.21 L1390.06 1214.21 L1390.65 1214.21 L1391.24 1214.21 L1391.82 1214.21 L1392.41 1214.21 L1393 1214.21 L1393.58 1214.21 L1394.17 1214.21 L1394.75 1214.21 L1395.34 1214.21 L1395.93 1214.21 L1396.51 1214.21 L1397.1 1214.21 L1397.69 1214.21 L1398.27 1214.21 L1398.86 1214.21 L1399.45 1214.21 L1400.03 1214.21 L1400.62 1214.21 L1401.21 1214.21 L1401.79 1214.21 L1402.38 1214.21 L1402.96 1214.21 L1403.55 1214.21 L1404.14 1214.21 L1404.72 1214.21 L1405.31 1214.21 L1405.9 1214.21 L1406.48 1214.21 L1407.07 1214.21 L1407.66 1214.21 L1408.24 1214.21 L1408.83 1214.21 L1409.42 1214.21 L1410 1214.21 L1410.59 1214.21 L1411.17 1214.21 L1411.76 1214.21 L1412.35 1214.21 L1412.93 1214.21 L1413.52 1214.21 L1414.11 1214.21 L1414.69 1214.21 L1415.28 1214.21 L1415.87 1214.21 L1416.45 1214.21 L1417.04 1214.21 L1417.63 1214.21 L1418.21 1214.21 L1418.8 1214.21 L1419.38 1214.21 L1419.97 1214.21 L1420.56 1214.21 L1421.14 1214.21 L1421.73 1214.21 L1422.32 1214.21 L1422.9 1214.21 L1423.49 1214.21 L1424.08 1214.21 L1424.66 1214.21 L1425.25 1214.21 L1425.83 1214.21 L1426.42 1214.21 L1427.01 1214.21 L1427.59 1214.21 L1428.18 1214.21 L1428.77 1214.21 L1429.35 1214.21 L1429.94 1214.21 L1430.53 1214.21 L1431.11 1214.21 L1431.7 1214.21 L1432.29 1214.21 L1432.87 1214.21 L1433.46 1214.21 L1434.04 1214.21 L1434.63 1214.21 L1435.22 1214.21 L1435.8 1214.21 L1436.39 1214.21 L1436.98 1214.21 L1437.56 1214.21 L1438.15 1214.21 L1438.74 1214.21 L1439.32 1214.21 L1439.91 1214.21 L1440.5 1214.21 L1441.08 1214.21 L1441.67 1214.21 L1442.25 1214.21 L1442.84 1214.21 L1443.43 1214.21 L1444.01 1214.21 L1444.6 1214.21 L1445.19 1214.21 L1445.77 1214.21 L1446.36 1214.21 L1446.95 1214.21 L1447.53 1214.21 L1448.12 1214.21 L1448.7 1214.21 L1449.29 1214.21 L1449.88 1214.21 L1450.46 1214.21 L1451.05 1214.21 L1451.64 1214.21 L1452.22 1214.21 L1452.81 1214.21 L1453.4 1214.21 L1453.98 1214.21 L1454.57 1214.21 L1455.16 1214.21 L1455.74 1214.21 L1456.33 1214.21 L1456.91 1214.21 L1457.5 1214.21 L1458.09 1214.21 L1458.67 1214.21 L1459.26 1214.21 L1459.85 1214.21 L1460.43 1214.21 L1461.02 1214.21 L1461.61 1214.21 L1462.19 1214.21 L1462.78 1214.21 L1463.37 1214.21 L1463.95 1214.21 L1464.54 1214.21 L1465.12 1214.21 L1465.71 1214.21 L1466.3 1214.21 L1466.88 1214.21 L1467.47 1214.21 L1468.06 1214.21 L1468.64 1214.21 L1469.23 1214.21 L1469.82 1214.21 L1470.4 1214.21 L1470.99 1214.21 L1471.57 1214.21 L1472.16 1214.21 L1472.75 1214.21 L1473.33 1214.21 L1473.92 1214.21 L1474.51 1214.21 L1475.09 1214.21 L1475.68 1214.21 L1476.27 1214.21 L1476.85 1214.21 L1477.44 1214.21 L1478.03 1214.21 L1478.61 1214.21 L1479.2 1214.21 L1479.78 1214.21 L1480.37 1214.21 L1480.96 1214.21 L1481.54 1214.21 L1482.13 1214.21 L1482.72 1214.21 L1483.3 1214.21 L1483.89 1214.21 L1484.48 1214.21 L1485.06 1214.21 L1485.65 1214.21 L1486.24 1214.21 L1486.82 1214.21 L1487.41 1214.21 L1487.99 1214.21 L1488.58 1214.21 L1489.17 1214.21 L1489.75 1214.21 L1490.34 1214.21 L1490.93 1214.21 L1491.51 1214.21 L1492.1 1214.21 L1492.69 1214.21 L1493.27 1214.21 L1493.86 1214.21 L1494.45 1214.21 L1495.03 1214.21 L1495.62 1214.21 L1496.2 1214.21 L1496.79 1214.21 L1497.38 1214.21 L1497.96 1214.21 L1498.55 1214.21 L1499.14 1214.21 L1499.72 1214.21 L1500.31 1214.21 L1500.9 1214.21 L1501.48 1214.21 L1502.07 1214.21 L1502.65 1214.21 L1503.24 1214.21 L1503.83 1214.21 L1504.41 1214.21 L1505 1214.21 L1505.59 1214.21 L1506.17 1214.21 L1506.76 1214.21 L1507.35 1214.21 L1507.93 1214.21 L1508.52 1214.21 L1509.11 1214.21 L1509.69 1214.21 L1510.28 1214.21 L1510.86 1214.21 L1511.45 1214.21 L1512.04 1214.21 L1512.62 1214.21 L1513.21 1214.21 L1513.8 1214.21 L1514.38 1214.21 L1514.97 1214.21 L1515.56 1214.21 L1516.14 1214.21 L1516.73 1214.21 L1517.32 1214.21 L1517.9 1214.21 L1518.49 1214.21 L1519.07 1214.21 L1519.66 1214.21 L1520.25 1214.21 L1520.83 1214.21 L1521.42 1214.21 L1522.01 1214.21 L1522.59 1214.21 L1523.18 1214.21 L1523.77 1214.21 L1524.35 1214.21 L1524.94 1214.21 L1525.52 1214.21 L1526.11 1214.21 L1526.7 1214.21 L1527.28 1214.21 L1527.87 1214.21 L1528.46 1214.21 L1529.04 1214.21 L1529.63 1214.21 L1530.22 1214.21 L1530.8 1214.21 L1531.39 1214.21 L1531.98 1214.21 L1532.56 1214.21 L1533.15 1214.21 L1533.73 1214.21 L1534.32 1214.21 L1534.91 1214.21 L1535.49 1214.21 L1536.08 1214.21 L1536.67 1214.21 L1537.25 1214.21 L1537.84 1214.21 L1538.43 1214.21 L1539.01 1214.21 L1539.6 1214.21 L1540.19 1214.21 L1540.77 1214.21 L1541.36 1214.21 L1541.94 1214.21 L1542.53 1214.21 L1543.12 1214.21 L1543.7 1214.21 L1544.29 1214.21 L1544.88 1214.21 L1545.46 1214.21 L1546.05 1214.21 L1546.64 1214.21 L1547.22 1214.21 L1547.81 1214.21 L1548.4 1214.21 L1548.98 1214.21 L1549.57 1214.21 L1550.15 1214.21 L1550.74 1214.21 L1551.33 1214.21 L1551.91 1214.21 L1552.5 1214.21 L1553.09 1214.21 L1553.67 1214.21 L1554.26 1214.21 L1554.85 1214.21 L1555.43 1214.21 L1556.02 1214.21 L1556.6 1214.21 L1557.19 1214.21 L1557.78 1214.21 L1558.36 1214.21 L1558.95 1214.21 L1559.54 1214.21 L1560.12 1214.21 L1560.71 1214.21 L1561.3 1214.21 L1561.88 1214.21 L1562.47 1214.21 L1563.06 1214.21 L1563.64 1214.21 L1564.23 1214.21 L1564.81 1214.21 L1565.4 1214.21 L1565.99 1214.21 L1566.57 1214.21 L1567.16 1214.21 L1567.75 1214.21 L1568.33 1214.21 L1568.92 1214.21 L1569.51 1214.21 L1570.09 1214.21 L1570.68 1214.21 L1571.27 1214.21 L1571.85 1214.21 L1572.44 1214.21 L1573.02 1214.21 L1573.61 1214.21 L1574.2 1214.21 L1574.78 1214.21 L1575.37 1214.21 L1575.96 1214.21 L1576.54 1214.21 L1577.13 1214.21 L1577.72 1214.21 L1578.3 1214.21 L1578.89 1214.21 L1579.47 1214.21 L1580.06 1214.21 L1580.65 1214.21 L1581.23 1214.21 L1581.82 1214.21 L1582.41 1214.21 L1582.99 1214.21 L1583.58 1214.21 L1584.17 1214.21 L1584.75 1214.21 L1585.34 1214.21 L1585.93 1214.21 L1586.51 1214.21 L1587.1 1214.21 L1587.68 1214.21 L1588.27 1214.21 L1588.86 1214.21 L1589.44 1214.21 L1590.03 1214.21 L1590.62 1214.21 L1591.2 1214.21 L1591.79 1214.21 L1592.38 1214.21 L1592.96 1214.21 L1593.55 1214.21 L1594.14 1214.21 L1594.72 1214.21 L1595.31 1214.21 L1595.89 1214.21 L1596.48 1214.21 L1597.07 1214.21 L1597.65 1214.21 L1598.24 1214.21 L1598.83 1214.21 L1599.41 1214.21 L1600 1214.21 L1600.59 1214.21 L1601.17 1214.21 L1601.76 1214.21 L1602.34 1214.21 L1602.93 1214.21 L1603.52 1214.21 L1604.1 1214.21 L1604.69 1214.21 L1605.28 1214.21 L1605.86 1214.21 L1606.45 1214.21 L1607.04 1214.21 L1607.62 1214.21 L1608.21 1214.21 L1608.8 1214.21 L1609.38 1214.21 L1609.97 1214.21 L1610.55 1214.21 L1611.14 1214.21 L1611.73 1214.21 L1612.31 1214.21 L1612.9 1214.21 L1613.49 1214.21 L1614.07 1214.21 L1614.66 1214.21 L1615.25 1214.21 L1615.83 1214.21 L1616.42 1214.21 L1617.01 1214.21 L1617.59 1214.21 L1618.18 1214.21 L1618.76 1214.21 L1619.35 1214.21 L1619.94 1214.21 L1620.52 1214.21 L1621.11 1214.21 L1621.7 1214.21 L1622.28 1214.21 L1622.87 1214.21 L1623.46 1214.21 L1624.04 1214.21 L1624.63 1214.21 L1625.22 1214.21 L1625.8 1214.21 L1626.39 1214.21 L1626.97 1214.21 L1627.56 1214.21 L1628.15 1214.21 L1628.73 1214.21 L1629.32 1214.21 L1629.91 1214.21 L1630.49 1214.21 L1631.08 1214.21 L1631.67 1214.21 L1632.25 1214.21 L1632.84 1214.21 L1633.42 1214.21 L1634.01 1214.21 L1634.6 1214.21 L1635.18 1214.21 L1635.77 1214.21 L1636.36 1214.21 L1636.94 1214.21 L1637.53 1214.21 L1638.12 1214.21 L1638.7 1214.21 L1639.29 1214.21 L1639.88 1214.21 L1640.46 1214.21 L1641.05 1214.21 L1641.63 1214.21 L1642.22 1214.21 L1642.81 1214.21 L1643.39 1214.21 L1643.98 1214.21 L1644.57 1214.21 L1645.15 1214.21 L1645.74 1214.21 L1646.33 1214.21 L1646.91 1214.21 L1647.5 1214.21 L1648.09 1214.21 L1648.67 1214.21 L1649.26 1214.21 L1649.84 1214.21 L1650.43 1214.21 L1651.02 1214.21 L1651.6 1214.21 L1652.19 1214.21 L1652.78 1214.21 L1653.36 1214.21 L1653.95 1214.21 L1654.54 1214.21 L1655.12 1214.21 L1655.71 1214.21 L1656.29 1214.21 L1656.88 1214.21 L1657.47 1214.21 L1658.05 1214.21 L1658.64 1214.21 L1659.23 1214.21 L1659.81 1214.21 L1660.4 1214.21 L1660.99 1214.21 L1661.57 1214.21 L1662.16 1214.21 L1662.75 1214.21 L1663.33 1214.21 L1663.92 1214.21 L1664.5 1214.21 L1665.09 1214.21 L1665.68 1214.21 L1666.26 1214.21 L1666.85 1214.21 L1667.44 1214.21 L1668.02 1214.21 L1668.61 1214.21 L1669.2 1214.21 L1669.78 1214.21 L1670.37 1214.21 L1670.96 1214.21 L1671.54 1214.21 L1672.13 1214.21 L1672.71 1214.21 L1673.3 1214.21 L1673.89 1214.21 L1674.47 1214.21 L1675.06 1214.21 L1675.65 1214.21 L1676.23 1214.21 L1676.82 1214.21 L1677.41 1214.21 L1677.99 1214.21 L1678.58 1214.21 L1679.17 1214.21 L1679.75 1214.21 L1680.34 1214.21 L1680.92 1214.21 L1681.51 1214.21 L1682.1 1214.21 L1682.68 1214.21 L1683.27 1214.21 L1683.86 1214.21 L1684.44 1214.21 L1685.03 1214.21 L1685.62 1214.21 L1686.2 1214.21 L1686.79 1214.21 L1687.37 1214.21 L1687.96 1214.21 L1688.55 1214.21 L1689.13 1214.21 L1689.72 1214.21 L1690.31 1214.21 L1690.89 1214.21 L1691.48 1214.21 L1692.07 1214.21 L1692.65 1214.21 L1693.24 1214.21 L1693.83 1214.21 L1694.41 1214.21 L1695 1214.21 L1695.58 1214.21 L1696.17 1214.21 L1696.76 1214.21 L1697.34 1214.21 L1697.93 1214.21 L1698.52 1214.21 L1699.1 1214.21 L1699.69 1214.21 L1700.28 1214.21 L1700.86 1214.21 L1701.45 1214.21 L1702.04 1214.21 L1702.62 1214.21 L1703.21 1214.21 L1703.79 1214.21 L1704.38 1214.21 L1704.97 1214.21 L1705.55 1214.21 L1706.14 1214.21 L1706.73 1214.21 L1707.31 1214.21 L1707.9 1214.21 L1708.49 1214.21 L1709.07 1214.21 L1709.66 1214.21 L1710.24 1214.21 L1710.83 1214.21 L1711.42 1214.21 L1712 1214.21 L1712.59 1214.21 L1713.18 1214.21 L1713.76 1214.21 L1714.35 1214.21 L1714.94 1214.21 L1715.52 1214.21 L1716.11 1214.21 L1716.7 1214.21 L1717.28 1214.21 L1717.87 1214.21 L1718.45 1214.21 L1719.04 1214.21 L1719.63 1214.21 L1720.21 1214.21 L1720.8 1214.21 L1721.39 1214.21 L1721.97 1214.21 L1722.56 1214.21 L1723.15 1214.21 L1723.73 1214.21 L1724.32 1214.21 L1724.91 1214.21 L1725.49 1214.21 L1726.08 1214.21 L1726.66 1214.21 L1727.25 1214.21 L1727.84 1214.21 L1728.42 1214.21 L1729.01 1214.21 L1729.6 1214.21 L1730.18 1214.21 L1730.77 1214.21 L1731.36 1214.21 L1731.94 1214.21 L1732.53 1214.21 L1733.11 1214.21 L1733.7 1214.21 L1734.29 1214.21 L1734.87 1214.21 L1735.46 1214.21 L1736.05 1214.21 L1736.63 1214.21 L1737.22 1214.21 L1737.81 1214.21 L1738.39 1214.21 L1738.98 1214.21 L1739.57 1214.21 L1740.15 1214.21 L1740.74 1214.21 L1741.32 1214.21 L1741.91 1214.21 L1742.5 1214.21 L1743.08 1214.21 L1743.67 1214.21 L1744.26 1214.21 L1744.84 1214.21 L1745.43 1214.21 L1746.02 1214.21 L1746.6 1214.21 L1747.19 1214.21 L1747.78 1214.21 L1748.36 1214.21 L1748.95 1214.21 L1749.53 1214.21 L1750.12 1214.21 L1750.71 1214.21 L1751.29 1214.21 L1751.88 1214.21 L1752.47 1214.21 L1753.05 1214.21 L1753.64 1214.21 L1754.23 1214.21 L1754.81 1214.21 L1755.4 1214.21 L1755.99 1214.21 L1756.57 1214.21 L1757.16 1214.21 L1757.74 1214.21 L1758.33 1214.21 L1758.92 1214.21 L1759.5 1214.21 L1760.09 1214.21 L1760.68 1214.21 L1761.26 1214.21 L1761.85 1214.21 L1762.44 1214.21 L1763.02 1214.21 L1763.61 1214.21 L1764.19 1214.21 L1764.78 1214.21 L1765.37 1214.21 L1765.95 1214.21 L1766.54 1214.21 L1767.13 1214.21 L1767.71 1214.21 L1768.3 1214.21 L1768.89 1214.21 L1769.47 1214.21 L1770.06 1214.21 L1770.65 1214.21 L1771.23 1214.21 L1771.82 1214.21 L1772.4 1214.21 L1772.99 1214.21 L1773.58 1214.21 L1774.16 1214.21 L1774.75 1214.21 L1775.34 1214.21 L1775.92 1214.21 L1776.51 1214.21 L1777.1 1214.21 L1777.68 1214.21 L1778.27 1214.21 L1778.86 1214.21 L1779.44 1214.21 L1780.03 1214.21 L1780.61 1214.21 L1781.2 1214.21 L1781.79 1214.21 L1782.37 1214.21 L1782.96 1214.21 L1783.55 1214.21 L1784.13 1214.21 L1784.72 1214.21 L1785.31 1214.21 L1785.89 1214.21 L1786.48 1214.21 L1787.06 1214.21 L1787.65 1214.21 L1788.24 1214.21 L1788.82 1214.21 L1789.41 1214.21 L1790 1214.21 L1790.58 1214.21 L1791.17 1214.21 L1791.76 1214.21 L1792.34 1214.21 L1792.93 1214.21 L1793.52 1214.21 L1794.1 1214.21 L1794.69 1214.21 L1795.27 1214.21 L1795.86 1214.21 L1796.45 1214.21 L1797.03 1214.21 L1797.62 1214.21 L1798.21 1214.21 L1798.79 1214.21 L1799.38 1214.21 L1799.97 1214.21 L1800.55 1214.21 L1801.14 1214.21 L1801.73 1214.21 L1802.31 1214.21 L1802.9 1214.21 L1803.48 1214.21 L1804.07 1214.21 L1804.66 1214.21 L1805.24 1214.21 L1805.83 1214.21 L1806.42 1214.21 L1807 1214.21 L1807.59 1214.21 L1808.18 1214.21 L1808.76 1214.21 L1809.35 1214.21 L1809.94 1214.21 L1810.52 1214.21 L1811.11 1214.21 L1811.69 1214.21 L1812.28 1214.21 L1812.87 1214.21 L1813.45 1214.21 L1814.04 1214.21 L1814.63 1214.21 L1815.21 1214.21 L1815.8 1214.21 L1816.39 1214.21 L1816.97 1214.21 L1817.56 1214.21 L1818.14 1214.21 L1818.73 1214.21 L1819.32 1214.21 L1819.9 1214.21 L1820.49 1214.21 L1821.08 1214.21 L1821.66 1214.21 L1822.25 1214.21 L1822.84 1214.21 L1823.42 1214.21 L1824.01 1214.21 L1824.6 1214.21 L1825.18 1214.21 L1825.77 1214.21 L1826.35 1214.21 L1826.94 1214.21 L1827.53 1214.21 L1828.11 1214.21 L1828.7 1214.21 L1829.29 1214.21 L1829.87 1214.21 L1830.46 1214.21 L1831.05 1214.21 L1831.63 1214.21 L1832.22 1214.21 L1832.81 1214.21 L1833.39 1214.21 L1833.98 1214.21 L1834.56 1214.21 L1835.15 1214.21 L1835.74 1214.21 L1836.32 1214.21 L1836.91 1214.21 L1837.5 1214.21 L1838.08 1214.21 L1838.67 1214.21 L1839.26 1214.21 L1839.84 1214.21 L1840.43 1214.21 L1841.01 1214.21 L1841.6 1214.21 L1842.19 1214.21 L1842.77 1214.21 L1843.36 1214.21 L1843.95 1214.21 L1844.53 1214.21 L1845.12 1214.21 L1845.71 1214.21 L1846.29 1214.21 L1846.88 1214.21 L1847.47 1214.21 L1848.05 1214.21 L1848.64 1214.21 L1849.22 1214.21 L1849.81 1214.21 L1850.4 1214.21 L1850.98 1214.21 L1851.57 1214.21 L1852.16 1214.21 L1852.74 1214.21 L1853.33 1214.21 L1853.92 1214.21 L1854.5 1214.21 L1855.09 1214.21 L1855.68 1214.21 L1856.26 1214.21 L1856.85 1214.21 L1857.43 1214.21 L1858.02 1214.21 L1858.61 1214.21 L1859.19 1214.21 L1859.78 1214.21 L1860.37 1214.21 L1860.95 1214.21 L1861.54 1214.21 L1862.13 1214.21 L1862.71 1214.21 L1863.3 1214.21 L1863.88 1214.21 L1864.47 1214.21 L1865.06 1214.21 L1865.64 1214.21 L1866.23 1214.21 L1866.82 1214.21 L1867.4 1214.21 L1867.99 1214.21 L1868.58 1214.21 L1869.16 1214.21 L1869.75 1214.21 L1870.34 1214.21 L1870.92 1214.21 L1871.51 1214.21 L1872.09 1214.21 L1872.68 1214.21 L1873.27 1214.21 L1873.85 1214.21 L1874.44 1214.21 L1875.03 1214.21 L1875.61 1214.21 L1876.2 1214.21 L1876.79 1214.21 L1877.37 1214.21 L1877.96 1214.21 L1878.55 1214.21 L1879.13 1214.21 L1879.72 1214.21 L1880.3 1214.21 L1880.89 1214.21 L1881.48 1214.21 L1882.06 1214.21 L1882.65 1214.21 L1883.24 1214.21 L1883.82 1214.21 L1884.41 1214.21 L1885 1214.21 L1885.58 1214.21 L1886.17 1214.21 L1886.76 1214.21 L1887.34 1214.21 L1887.93 1214.21 L1888.51 1214.21 L1889.1 1214.21 L1889.69 1214.21 L1890.27 1214.21 L1890.86 1214.21 L1891.45 1214.21 L1892.03 1214.21 L1892.62 1214.21 L1893.21 1214.21 L1893.79 1214.21 L1894.38 1214.21 L1894.96 1214.21 L1895.55 1214.21 L1896.14 1214.21 L1896.72 1214.21 L1897.31 1214.21 L1897.9 1214.21 L1898.48 1214.21 L1899.07 1214.21 L1899.66 1214.21 L1900.24 1214.21 L1900.83 1214.21 L1901.42 1214.21 L1902 1214.21 L1902.59 1214.21 L1903.17 1214.21 L1903.76 1214.21 L1904.35 1214.21 L1904.93 1214.21 L1905.52 1214.21 L1906.11 1214.21 L1906.69 1214.21 L1907.28 1214.21 L1907.87 1214.21 L1908.45 1214.21 L1909.04 1214.21 L1909.63 1214.21 L1910.21 1214.21 L1910.8 1214.21 L1911.38 1214.21 L1911.97 1214.21 L1912.56 1214.21 L1913.14 1214.21 L1913.73 1214.21 L1914.32 1214.21 L1914.9 1214.21 L1915.49 1214.21 L1916.08 1214.21 L1916.66 1214.21 L1917.25 1214.21 L1917.83 1214.21 L1918.42 1214.21 L1919.01 1214.21 L1919.59 1214.21 L1920.18 1214.21 L1920.77 1214.21 L1921.35 1214.21 L1921.94 1214.21 L1922.53 1214.21 L1923.11 1214.21 L1923.7 1214.21 L1924.29 1214.21 L1924.87 1214.21 L1925.46 1214.21 L1926.04 1214.21 L1926.63 1214.21 L1927.22 1214.21 L1927.8 1214.21 L1928.39 1214.21 L1928.98 1214.21 L1929.56 1214.21 L1930.15 1214.21 L1930.74 1214.21 L1931.32 1214.21 L1931.91 1214.21 L1932.5 1214.21 L1933.08 1214.21 L1933.67 1214.21 L1934.25 1214.21 L1934.84 1214.21 L1935.43 1214.21 L1936.01 1214.21 L1936.6 1214.21 L1937.19 1214.21 L1937.77 1214.21 L1938.36 1214.21 L1938.95 1214.21 L1939.53 1214.21 L1940.12 1214.21 L1940.71 1214.21 L1941.29 1214.21 L1941.88 1214.21 L1942.46 1214.21 L1943.05 1214.21 L1943.64 1214.21 L1944.22 1214.21 L1944.81 1214.21 L1945.4 1214.21 L1945.98 1214.21 L1946.57 1214.21 L1947.16 1214.21 L1947.74 1214.21 L1948.33 1214.21 L1948.91 1214.21 L1949.5 1214.21 L1950.09 1214.21 L1950.67 1214.21 L1951.26 1214.21 L1951.85 1214.21 L1952.43 1214.21 L1953.02 1214.21 L1953.61 1214.21 L1954.19 1214.21 L1954.78 1214.21 L1955.37 1214.21 L1955.95 1214.21 L1956.54 1214.21 L1957.12 1214.21 L1957.71 1214.21 L1958.3 1214.21 L1958.88 1214.21 L1959.47 1214.21 L1960.06 1214.21 L1960.64 1214.21 L1961.23 1214.21 L1961.82 1214.21 L1962.4 1214.21 L1962.99 1214.21 L1963.58 1214.21 L1964.16 1214.21 L1964.75 1214.21 L1965.33 1214.21 L1965.92 1214.21 L1966.51 1214.21 L1967.09 1214.21 L1967.68 1214.21 L1968.27 1214.21 L1968.85 1214.21 L1969.44 1214.21 L1970.03 1214.21 L1970.61 1214.21 L1971.2 1214.21 L1971.78 1214.21 L1972.37 1214.21 L1972.96 1214.21 L1973.54 1214.21 L1974.13 1214.21 L1974.72 1214.21 L1975.3 1214.21 L1975.89 1214.21 L1976.48 1214.21 L1977.06 1214.21 L1977.65 1214.21 L1978.24 1214.21 L1978.82 1214.21 L1979.41 1214.21 L1979.99 1214.21 L1980.58 1214.21 L1981.17 1214.21 L1981.75 1214.21 L1982.34 1214.21 L1982.93 1214.21 L1983.51 1214.21 L1984.1 1214.21 L1984.69 1214.21 L1985.27 1214.21 L1985.86 1214.21 L1986.45 1214.21 L1987.03 1214.21 L1987.62 1214.21 L1988.2 1214.21 L1988.79 1214.21 L1989.38 1214.21 L1989.96 1214.21 L1990.55 1214.21 L1991.14 1214.21 L1991.72 1214.21 L1992.31 1214.21 L1992.9 1214.21 L1993.48 1214.21 L1994.07 1214.21 L1994.65 1214.21 L1995.24 1214.21 L1995.83 1214.21 L1996.41 1214.21 L1997 1214.21 L1997.59 1214.21 L1998.17 1214.21 L1998.76 1214.21 L1999.35 1214.21 L1999.93 1214.21 L2000.52 1214.21 L2001.11 1214.21 L2001.69 1214.21 L2002.28 1214.21 L2002.86 1214.21 L2003.45 1214.21 L2004.04 1214.21 L2004.62 1214.21 L2005.21 1214.21 L2005.8 1214.21 L2006.38 1214.21 L2006.97 1214.21 L2007.56 1214.21 L2008.14 1214.21 L2008.73 1214.21 L2009.32 1214.21 L2009.9 1214.21 L2010.49 1214.21 L2011.07 1214.21 L2011.66 1214.21 L2012.25 1214.21 L2012.83 1214.21 L2013.42 1214.21 L2014.01 1214.21 L2014.59 1214.21 L2015.18 1214.21 L2015.77 1214.21 L2016.35 1214.21 L2016.94 1214.21 L2017.53 1214.21 L2018.11 1214.21 L2018.7 1214.21 L2019.28 1214.21 L2019.87 1214.21 L2020.46 1214.21 L2021.04 1214.21 L2021.63 1214.21 L2022.22 1214.21 L2022.8 1214.21 L2023.39 1214.21 L2023.98 1214.21 L2024.56 1214.21 L2025.15 1214.21 L2025.73 1214.21 L2026.32 1214.21 L2026.91 1214.21 L2027.49 1214.21 L2028.08 1214.21 L2028.67 1214.21 L2029.25 1214.21 L2029.84 1214.21 L2030.43 1214.21 L2031.01 1214.21 L2031.6 1214.21 L2032.19 1214.21 L2032.77 1214.21 L2033.36 1214.21 L2033.94 1214.21 L2034.53 1214.21 L2035.12 1214.21 L2035.7 1214.21 L2036.29 1214.21 L2036.88 1214.21 L2037.46 1214.21 L2038.05 1214.21 L2038.64 1214.21 L2039.22 1214.21 L2039.81 1214.21 L2040.4 1214.21 L2040.98 1214.21 L2041.57 1214.21 L2042.15 1214.21 L2042.74 1214.21 L2043.33 1214.21 L2043.91 1214.21 L2044.5 1214.21 L2045.09 1214.21 L2045.67 1214.21 L2046.26 1214.21 L2046.85 1214.21 L2047.43 1214.21 L2048.02 1214.21 L2048.6 1214.21 L2049.19 1214.21 L2049.78 1214.21 L2050.36 1214.21 L2050.95 1214.21 L2051.54 1214.21 L2052.12 1214.21 L2052.71 1214.21 L2053.3 1214.21 L2053.88 1214.21 L2054.47 1214.21 L2055.06 1214.21 L2055.64 1214.21 L2056.23 1214.21 L2056.81 1214.21 L2057.4 1214.21 L2057.99 1214.21 L2058.57 1214.21 L2059.16 1214.21 L2059.75 1214.21 L2060.33 1214.21 L2060.92 1214.21 L2061.51 1214.21 L2062.09 1214.21 L2062.68 1214.21 L2063.27 1214.21 L2063.85 1214.21 L2064.44 1214.21 L2065.02 1214.21 L2065.61 1214.21 L2066.2 1214.21 L2066.78 1214.21 L2067.37 1214.21 L2067.96 1214.21 L2068.54 1214.21 L2069.13 1214.21 L2069.72 1214.21 L2070.3 1214.21 L2070.89 1214.21 L2071.48 1214.21 L2072.06 1214.21 L2072.65 1214.21 L2073.23 1214.21 L2073.82 1214.21 L2074.41 1214.21 L2074.99 1214.21 L2075.58 1214.21 L2076.17 1214.21 L2076.75 1214.21 L2077.34 1214.21 L2077.93 1214.21 L2078.51 1214.21 L2079.1 1214.21 L2079.68 1214.21 L2080.27 1214.21 L2080.86 1214.21 L2081.44 1214.21 L2082.03 1214.21 L2082.62 1214.21 L2083.2 1214.21 L2083.79 1214.21 L2084.38 1214.21 L2084.96 1214.21 L2085.55 1214.21 L2086.14 1214.21 L2086.72 1214.21 L2087.31 1214.21 L2087.89 1214.21 L2088.48 1214.21 L2089.07 1214.21 L2089.65 1214.21 L2090.24 1214.21 L2090.83 1214.21 L2091.41 1214.21 L2092 1214.21 L2092.59 1214.21 L2093.17 1214.21 L2093.76 1214.21 L2094.35 1214.21 L2094.93 1214.21 L2095.52 1214.21 L2096.1 1214.21 L2096.69 1214.21 L2097.28 1214.21 L2097.86 1214.21 L2098.45 1214.21 L2099.04 1214.21 L2099.62 1214.21 L2100.21 1214.21 L2100.8 1214.21 L2101.38 1214.21 L2101.97 1214.21 L2102.55 1214.21 L2103.14 1214.21 L2103.73 1214.21 L2104.31 1214.21 L2104.9 1214.21 L2105.49 1214.21 L2106.07 1214.21 L2106.66 1214.21 L2107.25 1214.21 L2107.83 1214.21 L2108.42 1214.21 L2109.01 1214.21 L2109.59 1214.21 L2110.18 1214.21 L2110.76 1214.21 L2111.35 1214.21 L2111.94 1214.21 L2112.52 1214.21 L2113.11 1214.21 L2113.7 1214.21 L2114.28 1214.21 L2114.87 1214.21 L2115.46 1214.21 L2116.04 1214.21 L2116.63 1214.21 L2117.22 1214.21 L2117.8 1214.21 L2118.39 1214.21 L2118.97 1214.21 L2119.56 1214.21 L2120.15 1214.21 L2120.73 1214.21 L2121.32 1214.21 L2121.91 1214.21 L2122.49 1214.21 L2123.08 1214.21 L2123.67 1214.21 L2124.25 1214.21 L2124.84 1214.21 L2125.42 1214.21 L2126.01 1214.21 L2126.6 1214.21 L2127.18 1214.21 L2127.77 1214.21 L2128.36 1214.21 L2128.94 1214.21 L2129.53 1214.21 L2130.12 1214.21 L2130.7 1214.21 L2131.29 1214.21 L2131.88 1214.21 L2132.46 1214.21 L2133.05 1214.21 L2133.63 1214.21 L2134.22 1214.21 L2134.81 1214.21 L2135.39 1214.21 L2135.98 1214.21 L2136.57 1214.21 L2137.15 1214.21 L2137.74 1214.21 L2138.33 1214.21 L2138.91 1214.21 L2139.5 1214.21 L2140.09 1214.21 L2140.67 1214.21 L2141.26 1214.21 L2141.84 1214.21 L2142.43 1214.21 L2143.02 1214.21 L2143.6 1214.21 L2144.19 1214.21 L2144.78 1214.21 L2145.36 1214.21 L2145.95 1214.21 L2146.54 1214.21 L2147.12 1214.21 L2147.71 1214.21 L2148.3 1214.21 L2148.88 1214.21 L2149.47 1214.21 L2150.05 1214.21 L2150.64 1214.21 L2151.23 1214.21 L2151.81 1214.21 L2152.4 1214.21 L2152.99 1214.21 L2153.57 1214.21 L2154.16 1214.21 L2154.75 1214.21 L2155.33 1214.21 L2155.92 1214.21 L2156.5 1214.21 L2157.09 1214.21 L2157.68 1214.21 L2158.26 1214.21 L2158.26 1213.4 L2157.68 1213.4 L2157.09 1213.4 L2156.5 1213.4 L2155.92 1213.4 L2155.33 1213.4 L2154.75 1213.4 L2154.16 1213.4 L2153.57 1213.4 L2152.99 1213.4 L2152.4 1213.4 L2151.81 1213.4 L2151.23 1213.4 L2150.64 1213.4 L2150.05 1213.4 L2149.47 1213.4 L2148.88 1213.4 L2148.3 1213.4 L2147.71 1213.4 L2147.12 1213.4 L2146.54 1213.4 L2145.95 1213.4 L2145.36 1213.4 L2144.78 1213.4 L2144.19 1213.4 L2143.6 1213.4 L2143.02 1213.4 L2142.43 1213.4 L2141.84 1213.4 L2141.26 1213.4 L2140.67 1213.4 L2140.09 1213.4 L2139.5 1213.4 L2138.91 1213.4 L2138.33 1213.4 L2137.74 1213.4 L2137.15 1213.4 L2136.57 1213.4 L2135.98 1213.4 L2135.39 1213.4 L2134.81 1213.4 L2134.22 1213.4 L2133.63 1213.4 L2133.05 1213.4 L2132.46 1213.4 L2131.88 1213.4 L2131.29 1213.4 L2130.7 1213.4 L2130.12 1213.4 L2129.53 1213.4 L2128.94 1213.4 L2128.36 1213.4 L2127.77 1213.4 L2127.18 1213.4 L2126.6 1213.4 L2126.01 1213.4 L2125.42 1213.4 L2124.84 1213.4 L2124.25 1213.4 L2123.67 1213.4 L2123.08 1213.4 L2122.49 1213.4 L2121.91 1213.4 L2121.32 1213.4 L2120.73 1213.4 L2120.15 1213.4 L2119.56 1213.4 L2118.97 1213.4 L2118.39 1213.4 L2117.8 1213.4 L2117.22 1213.4 L2116.63 1213.4 L2116.04 1213.4 L2115.46 1213.4 L2114.87 1213.4 L2114.28 1213.4 L2113.7 1213.4 L2113.11 1213.4 L2112.52 1213.4 L2111.94 1213.4 L2111.35 1213.4 L2110.76 1213.4 L2110.18 1213.4 L2109.59 1213.4 L2109.01 1213.4 L2108.42 1213.4 L2107.83 1213.4 L2107.25 1213.4 L2106.66 1213.4 L2106.07 1213.4 L2105.49 1213.4 L2104.9 1213.4 L2104.31 1213.4 L2103.73 1213.4 L2103.14 1213.4 L2102.55 1213.4 L2101.97 1213.4 L2101.38 1213.4 L2100.8 1213.4 L2100.21 1213.4 L2099.62 1213.4 L2099.04 1213.4 L2098.45 1213.4 L2097.86 1213.4 L2097.28 1213.4 L2096.69 1213.4 L2096.1 1213.4 L2095.52 1213.4 L2094.93 1213.4 L2094.35 1213.4 L2093.76 1213.4 L2093.17 1213.4 L2092.59 1213.4 L2092 1213.4 L2091.41 1213.4 L2090.83 1213.4 L2090.24 1213.4 L2089.65 1213.4 L2089.07 1213.4 L2088.48 1213.4 L2087.89 1213.4 L2087.31 1213.4 L2086.72 1213.4 L2086.14 1213.4 L2085.55 1213.4 L2084.96 1213.4 L2084.38 1213.4 L2083.79 1213.4 L2083.2 1213.4 L2082.62 1213.4 L2082.03 1213.4 L2081.44 1213.4 L2080.86 1213.4 L2080.27 1213.4 L2079.68 1213.4 L2079.1 1213.4 L2078.51 1213.4 L2077.93 1213.4 L2077.34 1213.4 L2076.75 1213.4 L2076.17 1213.4 L2075.58 1213.4 L2074.99 1213.4 L2074.41 1213.4 L2073.82 1213.4 L2073.23 1213.4 L2072.65 1213.4 L2072.06 1213.4 L2071.48 1213.4 L2070.89 1213.4 L2070.3 1213.4 L2069.72 1213.4 L2069.13 1213.4 L2068.54 1213.4 L2067.96 1213.4 L2067.37 1213.4 L2066.78 1213.4 L2066.2 1213.4 L2065.61 1213.4 L2065.02 1213.4 L2064.44 1213.4 L2063.85 1213.4 L2063.27 1213.4 L2062.68 1213.4 L2062.09 1213.4 L2061.51 1213.4 L2060.92 1213.4 L2060.33 1213.4 L2059.75 1213.4 L2059.16 1213.4 L2058.57 1213.4 L2057.99 1213.4 L2057.4 1213.4 L2056.81 1213.4 L2056.23 1213.4 L2055.64 1213.4 L2055.06 1213.4 L2054.47 1213.4 L2053.88 1213.4 L2053.3 1213.4 L2052.71 1213.4 L2052.12 1213.4 L2051.54 1213.4 L2050.95 1213.4 L2050.36 1213.4 L2049.78 1213.4 L2049.19 1213.4 L2048.6 1213.4 L2048.02 1213.4 L2047.43 1213.4 L2046.85 1213.4 L2046.26 1213.4 L2045.67 1213.4 L2045.09 1213.4 L2044.5 1213.4 L2043.91 1213.4 L2043.33 1213.4 L2042.74 1213.4 L2042.15 1213.4 L2041.57 1213.4 L2040.98 1213.4 L2040.4 1213.4 L2039.81 1213.4 L2039.22 1213.4 L2038.64 1213.4 L2038.05 1213.4 L2037.46 1213.4 L2036.88 1213.4 L2036.29 1213.4 L2035.7 1213.4 L2035.12 1213.4 L2034.53 1213.4 L2033.94 1213.4 L2033.36 1213.4 L2032.77 1213.4 L2032.19 1213.4 L2031.6 1213.4 L2031.01 1213.4 L2030.43 1213.4 L2029.84 1213.4 L2029.25 1213.4 L2028.67 1213.4 L2028.08 1213.4 L2027.49 1213.4 L2026.91 1213.4 L2026.32 1213.4 L2025.73 1213.4 L2025.15 1213.4 L2024.56 1213.4 L2023.98 1213.4 L2023.39 1213.4 L2022.8 1213.4 L2022.22 1213.4 L2021.63 1213.4 L2021.04 1213.4 L2020.46 1213.4 L2019.87 1213.4 L2019.28 1213.4 L2018.7 1213.4 L2018.11 1213.4 L2017.53 1213.4 L2016.94 1213.4 L2016.35 1213.4 L2015.77 1213.4 L2015.18 1213.4 L2014.59 1213.4 L2014.01 1213.4 L2013.42 1213.4 L2012.83 1213.4 L2012.25 1213.4 L2011.66 1213.4 L2011.07 1213.4 L2010.49 1213.4 L2009.9 1213.4 L2009.32 1213.4 L2008.73 1213.4 L2008.14 1213.4 L2007.56 1213.4 L2006.97 1213.4 L2006.38 1213.4 L2005.8 1213.4 L2005.21 1213.4 L2004.62 1213.4 L2004.04 1213.4 L2003.45 1213.4 L2002.86 1213.4 L2002.28 1213.4 L2001.69 1213.4 L2001.11 1213.4 L2000.52 1213.4 L1999.93 1213.4 L1999.35 1213.4 L1998.76 1213.4 L1998.17 1213.4 L1997.59 1213.4 L1997 1213.4 L1996.41 1213.4 L1995.83 1213.4 L1995.24 1213.4 L1994.65 1213.4 L1994.07 1213.4 L1993.48 1213.4 L1992.9 1213.4 L1992.31 1213.4 L1991.72 1213.4 L1991.14 1213.4 L1990.55 1213.4 L1989.96 1213.4 L1989.38 1213.4 L1988.79 1213.4 L1988.2 1213.4 L1987.62 1213.4 L1987.03 1213.4 L1986.45 1213.4 L1985.86 1213.4 L1985.27 1213.4 L1984.69 1213.4 L1984.1 1213.4 L1983.51 1213.4 L1982.93 1213.4 L1982.34 1213.4 L1981.75 1213.4 L1981.17 1213.4 L1980.58 1213.4 L1979.99 1213.4 L1979.41 1213.4 L1978.82 1213.4 L1978.24 1213.4 L1977.65 1213.4 L1977.06 1213.4 L1976.48 1213.4 L1975.89 1213.4 L1975.3 1213.4 L1974.72 1213.4 L1974.13 1213.4 L1973.54 1213.4 L1972.96 1213.4 L1972.37 1213.4 L1971.78 1213.4 L1971.2 1213.4 L1970.61 1213.4 L1970.03 1213.4 L1969.44 1213.4 L1968.85 1213.4 L1968.27 1213.4 L1967.68 1213.4 L1967.09 1213.4 L1966.51 1213.4 L1965.92 1213.4 L1965.33 1213.4 L1964.75 1213.4 L1964.16 1213.4 L1963.58 1213.4 L1962.99 1213.4 L1962.4 1213.4 L1961.82 1213.4 L1961.23 1213.4 L1960.64 1213.4 L1960.06 1213.4 L1959.47 1213.4 L1958.88 1213.4 L1958.3 1213.4 L1957.71 1213.4 L1957.12 1213.4 L1956.54 1213.4 L1955.95 1213.4 L1955.37 1213.4 L1954.78 1213.4 L1954.19 1213.4 L1953.61 1213.4 L1953.02 1213.4 L1952.43 1213.4 L1951.85 1213.4 L1951.26 1213.4 L1950.67 1213.4 L1950.09 1213.4 L1949.5 1213.4 L1948.91 1213.4 L1948.33 1213.4 L1947.74 1213.4 L1947.16 1213.4 L1946.57 1213.4 L1945.98 1213.4 L1945.4 1213.4 L1944.81 1213.4 L1944.22 1213.4 L1943.64 1213.4 L1943.05 1213.4 L1942.46 1213.4 L1941.88 1213.4 L1941.29 1213.4 L1940.71 1213.4 L1940.12 1213.4 L1939.53 1213.4 L1938.95 1213.4 L1938.36 1213.4 L1937.77 1213.4 L1937.19 1213.4 L1936.6 1213.4 L1936.01 1213.4 L1935.43 1213.4 L1934.84 1213.4 L1934.25 1213.4 L1933.67 1213.4 L1933.08 1213.4 L1932.5 1213.4 L1931.91 1213.4 L1931.32 1213.4 L1930.74 1213.4 L1930.15 1213.4 L1929.56 1213.4 L1928.98 1213.4 L1928.39 1213.4 L1927.8 1213.4 L1927.22 1213.4 L1926.63 1213.4 L1926.04 1213.4 L1925.46 1213.4 L1924.87 1213.4 L1924.29 1213.4 L1923.7 1213.4 L1923.11 1213.4 L1922.53 1213.4 L1921.94 1213.4 L1921.35 1213.4 L1920.77 1213.4 L1920.18 1213.4 L1919.59 1213.4 L1919.01 1213.4 L1918.42 1213.4 L1917.83 1213.4 L1917.25 1213.4 L1916.66 1213.4 L1916.08 1213.4 L1915.49 1213.4 L1914.9 1213.4 L1914.32 1213.4 L1913.73 1213.4 L1913.14 1213.4 L1912.56 1213.4 L1911.97 1213.4 L1911.38 1213.4 L1910.8 1213.4 L1910.21 1213.4 L1909.63 1213.4 L1909.04 1213.4 L1908.45 1213.4 L1907.87 1213.4 L1907.28 1213.4 L1906.69 1213.4 L1906.11 1213.4 L1905.52 1213.4 L1904.93 1213.4 L1904.35 1213.4 L1903.76 1213.4 L1903.17 1213.4 L1902.59 1213.4 L1902 1213.4 L1901.42 1213.4 L1900.83 1213.4 L1900.24 1213.4 L1899.66 1213.4 L1899.07 1213.4 L1898.48 1213.4 L1897.9 1213.4 L1897.31 1213.4 L1896.72 1213.4 L1896.14 1213.4 L1895.55 1213.4 L1894.96 1213.4 L1894.38 1213.4 L1893.79 1213.4 L1893.21 1213.4 L1892.62 1213.4 L1892.03 1213.4 L1891.45 1213.4 L1890.86 1213.4 L1890.27 1213.4 L1889.69 1213.4 L1889.1 1213.4 L1888.51 1213.4 L1887.93 1213.4 L1887.34 1213.4 L1886.76 1213.4 L1886.17 1213.4 L1885.58 1213.4 L1885 1213.4 L1884.41 1213.4 L1883.82 1213.4 L1883.24 1213.4 L1882.65 1213.4 L1882.06 1213.4 L1881.48 1213.4 L1880.89 1213.4 L1880.3 1213.4 L1879.72 1213.4 L1879.13 1213.4 L1878.55 1213.4 L1877.96 1213.4 L1877.37 1213.4 L1876.79 1213.4 L1876.2 1213.4 L1875.61 1213.4 L1875.03 1213.4 L1874.44 1213.4 L1873.85 1213.4 L1873.27 1213.4 L1872.68 1213.4 L1872.09 1213.4 L1871.51 1213.4 L1870.92 1213.4 L1870.34 1213.4 L1869.75 1213.4 L1869.16 1213.4 L1868.58 1213.4 L1867.99 1213.4 L1867.4 1213.4 L1866.82 1213.4 L1866.23 1213.4 L1865.64 1213.4 L1865.06 1213.4 L1864.47 1213.4 L1863.88 1213.4 L1863.3 1213.4 L1862.71 1213.4 L1862.13 1213.4 L1861.54 1213.4 L1860.95 1213.4 L1860.37 1213.4 L1859.78 1213.4 L1859.19 1213.4 L1858.61 1213.4 L1858.02 1213.4 L1857.43 1213.4 L1856.85 1213.4 L1856.26 1213.4 L1855.68 1213.4 L1855.09 1213.4 L1854.5 1213.4 L1853.92 1213.4 L1853.33 1213.4 L1852.74 1213.4 L1852.16 1213.4 L1851.57 1213.4 L1850.98 1213.4 L1850.4 1213.4 L1849.81 1213.4 L1849.22 1213.4 L1848.64 1213.4 L1848.05 1213.4 L1847.47 1213.4 L1846.88 1213.4 L1846.29 1213.4 L1845.71 1213.4 L1845.12 1213.4 L1844.53 1213.4 L1843.95 1213.4 L1843.36 1213.4 L1842.77 1213.4 L1842.19 1213.4 L1841.6 1213.4 L1841.01 1213.4 L1840.43 1213.4 L1839.84 1213.4 L1839.26 1213.4 L1838.67 1213.4 L1838.08 1213.4 L1837.5 1213.4 L1836.91 1213.4 L1836.32 1213.4 L1835.74 1213.4 L1835.15 1213.4 L1834.56 1213.4 L1833.98 1213.4 L1833.39 1213.4 L1832.81 1213.4 L1832.22 1213.4 L1831.63 1213.4 L1831.05 1213.4 L1830.46 1213.4 L1829.87 1213.4 L1829.29 1213.4 L1828.7 1213.4 L1828.11 1213.4 L1827.53 1213.4 L1826.94 1213.4 L1826.35 1213.4 L1825.77 1213.4 L1825.18 1213.4 L1824.6 1213.4 L1824.01 1213.4 L1823.42 1213.4 L1822.84 1213.4 L1822.25 1213.4 L1821.66 1213.4 L1821.08 1213.4 L1820.49 1213.4 L1819.9 1213.4 L1819.32 1213.4 L1818.73 1213.4 L1818.14 1213.4 L1817.56 1213.4 L1816.97 1213.4 L1816.39 1213.4 L1815.8 1213.4 L1815.21 1213.4 L1814.63 1213.4 L1814.04 1213.4 L1813.45 1213.4 L1812.87 1213.4 L1812.28 1213.4 L1811.69 1213.4 L1811.11 1213.4 L1810.52 1213.4 L1809.94 1213.4 L1809.35 1213.4 L1808.76 1213.4 L1808.18 1213.4 L1807.59 1213.4 L1807 1213.4 L1806.42 1213.4 L1805.83 1213.4 L1805.24 1213.4 L1804.66 1213.4 L1804.07 1213.4 L1803.48 1213.4 L1802.9 1213.4 L1802.31 1213.4 L1801.73 1213.4 L1801.14 1213.4 L1800.55 1213.4 L1799.97 1213.4 L1799.38 1213.4 L1798.79 1213.4 L1798.21 1213.4 L1797.62 1213.4 L1797.03 1213.4 L1796.45 1213.4 L1795.86 1213.4 L1795.27 1213.4 L1794.69 1213.4 L1794.1 1213.4 L1793.52 1213.4 L1792.93 1213.4 L1792.34 1213.4 L1791.76 1213.4 L1791.17 1213.4 L1790.58 1213.4 L1790 1213.4 L1789.41 1213.4 L1788.82 1213.4 L1788.24 1213.4 L1787.65 1213.4 L1787.06 1213.4 L1786.48 1213.4 L1785.89 1213.4 L1785.31 1213.4 L1784.72 1213.4 L1784.13 1213.4 L1783.55 1213.4 L1782.96 1213.4 L1782.37 1213.4 L1781.79 1213.4 L1781.2 1213.4 L1780.61 1213.4 L1780.03 1213.4 L1779.44 1213.4 L1778.86 1213.4 L1778.27 1213.4 L1777.68 1213.4 L1777.1 1213.4 L1776.51 1213.4 L1775.92 1213.4 L1775.34 1213.4 L1774.75 1213.4 L1774.16 1213.4 L1773.58 1213.4 L1772.99 1213.4 L1772.4 1213.4 L1771.82 1213.4 L1771.23 1213.4 L1770.65 1213.4 L1770.06 1213.4 L1769.47 1213.4 L1768.89 1213.4 L1768.3 1213.4 L1767.71 1213.4 L1767.13 1213.4 L1766.54 1213.4 L1765.95 1213.4 L1765.37 1213.4 L1764.78 1213.4 L1764.19 1213.4 L1763.61 1213.4 L1763.02 1213.4 L1762.44 1213.4 L1761.85 1213.4 L1761.26 1213.4 L1760.68 1213.4 L1760.09 1213.4 L1759.5 1213.4 L1758.92 1213.4 L1758.33 1213.4 L1757.74 1213.4 L1757.16 1213.4 L1756.57 1213.4 L1755.99 1213.4 L1755.4 1213.4 L1754.81 1213.4 L1754.23 1213.4 L1753.64 1213.4 L1753.05 1213.4 L1752.47 1213.4 L1751.88 1213.4 L1751.29 1213.4 L1750.71 1213.4 L1750.12 1213.4 L1749.53 1213.4 L1748.95 1213.4 L1748.36 1213.4 L1747.78 1213.4 L1747.19 1213.4 L1746.6 1213.4 L1746.02 1213.4 L1745.43 1213.4 L1744.84 1213.4 L1744.26 1213.4 L1743.67 1213.4 L1743.08 1213.4 L1742.5 1213.4 L1741.91 1213.4 L1741.32 1213.4 L1740.74 1213.4 L1740.15 1213.4 L1739.57 1213.4 L1738.98 1213.4 L1738.39 1213.4 L1737.81 1213.4 L1737.22 1213.4 L1736.63 1213.4 L1736.05 1213.4 L1735.46 1213.4 L1734.87 1213.4 L1734.29 1213.4 L1733.7 1213.4 L1733.11 1213.4 L1732.53 1213.4 L1731.94 1213.4 L1731.36 1213.4 L1730.77 1213.4 L1730.18 1213.4 L1729.6 1213.4 L1729.01 1213.4 L1728.42 1213.4 L1727.84 1213.4 L1727.25 1213.4 L1726.66 1213.4 L1726.08 1213.4 L1725.49 1213.4 L1724.91 1213.4 L1724.32 1213.4 L1723.73 1213.4 L1723.15 1213.4 L1722.56 1213.4 L1721.97 1213.4 L1721.39 1213.4 L1720.8 1213.4 L1720.21 1213.4 L1719.63 1213.4 L1719.04 1213.4 L1718.45 1213.4 L1717.87 1213.4 L1717.28 1213.4 L1716.7 1213.4 L1716.11 1213.4 L1715.52 1213.4 L1714.94 1213.4 L1714.35 1213.4 L1713.76 1213.4 L1713.18 1213.4 L1712.59 1213.4 L1712 1213.4 L1711.42 1213.4 L1710.83 1213.4 L1710.24 1213.4 L1709.66 1213.4 L1709.07 1213.4 L1708.49 1213.4 L1707.9 1213.4 L1707.31 1213.4 L1706.73 1213.4 L1706.14 1213.4 L1705.55 1213.4 L1704.97 1213.4 L1704.38 1213.4 L1703.79 1213.4 L1703.21 1213.4 L1702.62 1213.4 L1702.04 1213.4 L1701.45 1213.4 L1700.86 1213.4 L1700.28 1213.4 L1699.69 1213.4 L1699.1 1213.4 L1698.52 1213.4 L1697.93 1213.4 L1697.34 1213.4 L1696.76 1213.4 L1696.17 1213.4 L1695.58 1213.4 L1695 1213.4 L1694.41 1213.4 L1693.83 1213.4 L1693.24 1213.4 L1692.65 1213.4 L1692.07 1213.4 L1691.48 1213.4 L1690.89 1213.4 L1690.31 1213.4 L1689.72 1213.4 L1689.13 1213.4 L1688.55 1213.4 L1687.96 1213.4 L1687.37 1213.4 L1686.79 1213.4 L1686.2 1213.4 L1685.62 1213.4 L1685.03 1213.4 L1684.44 1213.4 L1683.86 1213.4 L1683.27 1213.4 L1682.68 1213.4 L1682.1 1213.4 L1681.51 1213.4 L1680.92 1213.4 L1680.34 1213.4 L1679.75 1213.4 L1679.17 1213.4 L1678.58 1213.4 L1677.99 1213.4 L1677.41 1213.4 L1676.82 1213.4 L1676.23 1213.4 L1675.65 1213.4 L1675.06 1213.4 L1674.47 1213.4 L1673.89 1213.4 L1673.3 1213.4 L1672.71 1213.4 L1672.13 1213.4 L1671.54 1213.4 L1670.96 1213.4 L1670.37 1213.4 L1669.78 1213.4 L1669.2 1213.4 L1668.61 1213.4 L1668.02 1213.4 L1667.44 1213.4 L1666.85 1213.4 L1666.26 1213.4 L1665.68 1213.4 L1665.09 1213.4 L1664.5 1213.4 L1663.92 1213.4 L1663.33 1213.4 L1662.75 1213.4 L1662.16 1213.4 L1661.57 1213.4 L1660.99 1213.4 L1660.4 1213.4 L1659.81 1213.4 L1659.23 1213.4 L1658.64 1213.4 L1658.05 1213.4 L1657.47 1213.4 L1656.88 1213.4 L1656.29 1213.4 L1655.71 1213.4 L1655.12 1213.4 L1654.54 1213.4 L1653.95 1213.4 L1653.36 1213.4 L1652.78 1213.4 L1652.19 1213.4 L1651.6 1213.4 L1651.02 1213.4 L1650.43 1213.4 L1649.84 1213.4 L1649.26 1213.4 L1648.67 1213.4 L1648.09 1213.4 L1647.5 1213.4 L1646.91 1213.4 L1646.33 1213.4 L1645.74 1213.4 L1645.15 1213.4 L1644.57 1213.4 L1643.98 1213.4 L1643.39 1213.4 L1642.81 1213.4 L1642.22 1213.4 L1641.63 1213.4 L1641.05 1213.4 L1640.46 1213.4 L1639.88 1213.4 L1639.29 1213.4 L1638.7 1213.4 L1638.12 1213.4 L1637.53 1213.4 L1636.94 1213.4 L1636.36 1213.4 L1635.77 1213.4 L1635.18 1213.4 L1634.6 1213.4 L1634.01 1213.4 L1633.42 1213.4 L1632.84 1213.4 L1632.25 1213.4 L1631.67 1213.4 L1631.08 1213.4 L1630.49 1213.4 L1629.91 1213.4 L1629.32 1213.4 L1628.73 1213.4 L1628.15 1213.4 L1627.56 1213.4 L1626.97 1213.4 L1626.39 1213.4 L1625.8 1213.4 L1625.22 1213.4 L1624.63 1213.4 L1624.04 1213.4 L1623.46 1213.4 L1622.87 1213.4 L1622.28 1213.4 L1621.7 1213.4 L1621.11 1213.4 L1620.52 1213.4 L1619.94 1213.4 L1619.35 1213.4 L1618.76 1213.4 L1618.18 1213.4 L1617.59 1213.4 L1617.01 1213.4 L1616.42 1213.4 L1615.83 1213.4 L1615.25 1213.4 L1614.66 1213.4 L1614.07 1213.4 L1613.49 1213.4 L1612.9 1213.4 L1612.31 1213.4 L1611.73 1213.4 L1611.14 1213.4 L1610.55 1213.4 L1609.97 1213.4 L1609.38 1213.4 L1608.8 1213.4 L1608.21 1213.4 L1607.62 1213.4 L1607.04 1213.4 L1606.45 1213.4 L1605.86 1213.4 L1605.28 1213.4 L1604.69 1213.4 L1604.1 1213.4 L1603.52 1213.4 L1602.93 1213.4 L1602.34 1213.4 L1601.76 1213.4 L1601.17 1213.4 L1600.59 1213.4 L1600 1213.4 L1599.41 1213.4 L1598.83 1213.4 L1598.24 1213.4 L1597.65 1213.4 L1597.07 1213.4 L1596.48 1213.4 L1595.89 1213.4 L1595.31 1213.4 L1594.72 1213.4 L1594.14 1213.4 L1593.55 1213.4 L1592.96 1213.4 L1592.38 1213.4 L1591.79 1213.4 L1591.2 1213.4 L1590.62 1213.4 L1590.03 1213.4 L1589.44 1213.4 L1588.86 1213.4 L1588.27 1213.4 L1587.68 1213.4 L1587.1 1213.4 L1586.51 1213.4 L1585.93 1213.4 L1585.34 1213.4 L1584.75 1213.4 L1584.17 1213.4 L1583.58 1213.4 L1582.99 1213.4 L1582.41 1213.4 L1581.82 1213.4 L1581.23 1213.4 L1580.65 1213.4 L1580.06 1213.4 L1579.47 1213.4 L1578.89 1213.4 L1578.3 1213.4 L1577.72 1213.4 L1577.13 1213.4 L1576.54 1213.4 L1575.96 1213.4 L1575.37 1213.4 L1574.78 1213.4 L1574.2 1213.4 L1573.61 1213.4 L1573.02 1213.4 L1572.44 1213.4 L1571.85 1213.4 L1571.27 1213.4 L1570.68 1213.4 L1570.09 1213.4 L1569.51 1213.4 L1568.92 1213.4 L1568.33 1213.4 L1567.75 1213.4 L1567.16 1213.4 L1566.57 1213.4 L1565.99 1213.4 L1565.4 1213.4 L1564.81 1213.4 L1564.23 1213.4 L1563.64 1213.4 L1563.06 1213.4 L1562.47 1213.4 L1561.88 1213.4 L1561.3 1213.4 L1560.71 1213.4 L1560.12 1213.4 L1559.54 1213.4 L1558.95 1213.4 L1558.36 1213.4 L1557.78 1213.4 L1557.19 1213.4 L1556.6 1213.4 L1556.02 1213.4 L1555.43 1213.4 L1554.85 1213.4 L1554.26 1213.4 L1553.67 1213.4 L1553.09 1213.4 L1552.5 1213.4 L1551.91 1213.4 L1551.33 1213.4 L1550.74 1213.4 L1550.15 1213.4 L1549.57 1213.4 L1548.98 1213.4 L1548.4 1213.4 L1547.81 1213.4 L1547.22 1213.4 L1546.64 1213.4 L1546.05 1213.4 L1545.46 1213.4 L1544.88 1213.4 L1544.29 1213.4 L1543.7 1213.4 L1543.12 1213.4 L1542.53 1213.4 L1541.94 1213.4 L1541.36 1213.4 L1540.77 1213.4 L1540.19 1213.4 L1539.6 1213.4 L1539.01 1213.4 L1538.43 1213.4 L1537.84 1213.4 L1537.25 1213.4 L1536.67 1213.4 L1536.08 1213.4 L1535.49 1213.4 L1534.91 1213.4 L1534.32 1213.4 L1533.73 1213.4 L1533.15 1213.4 L1532.56 1213.4 L1531.98 1213.4 L1531.39 1213.4 L1530.8 1213.4 L1530.22 1213.4 L1529.63 1213.4 L1529.04 1213.4 L1528.46 1213.4 L1527.87 1213.4 L1527.28 1213.4 L1526.7 1213.4 L1526.11 1213.4 L1525.52 1213.4 L1524.94 1213.4 L1524.35 1213.4 L1523.77 1213.4 L1523.18 1213.4 L1522.59 1213.4 L1522.01 1213.4 L1521.42 1213.4 L1520.83 1213.4 L1520.25 1213.4 L1519.66 1213.4 L1519.07 1213.4 L1518.49 1213.4 L1517.9 1213.4 L1517.32 1213.4 L1516.73 1213.4 L1516.14 1213.4 L1515.56 1213.4 L1514.97 1213.4 L1514.38 1213.4 L1513.8 1213.4 L1513.21 1213.4 L1512.62 1213.4 L1512.04 1213.4 L1511.45 1213.4 L1510.86 1213.4 L1510.28 1213.4 L1509.69 1213.4 L1509.11 1213.4 L1508.52 1213.4 L1507.93 1213.4 L1507.35 1213.4 L1506.76 1213.4 L1506.17 1213.4 L1505.59 1213.4 L1505 1213.4 L1504.41 1213.4 L1503.83 1213.4 L1503.24 1213.4 L1502.65 1213.4 L1502.07 1213.4 L1501.48 1213.4 L1500.9 1213.4 L1500.31 1213.4 L1499.72 1213.4 L1499.14 1213.4 L1498.55 1213.4 L1497.96 1213.4 L1497.38 1213.4 L1496.79 1213.4 L1496.2 1213.4 L1495.62 1213.4 L1495.03 1213.4 L1494.45 1213.4 L1493.86 1213.4 L1493.27 1213.4 L1492.69 1213.4 L1492.1 1213.4 L1491.51 1213.4 L1490.93 1213.4 L1490.34 1213.4 L1489.75 1213.4 L1489.17 1213.4 L1488.58 1213.4 L1487.99 1213.4 L1487.41 1213.4 L1486.82 1213.4 L1486.24 1213.4 L1485.65 1213.4 L1485.06 1213.4 L1484.48 1213.4 L1483.89 1213.4 L1483.3 1213.4 L1482.72 1213.4 L1482.13 1213.4 L1481.54 1213.4 L1480.96 1213.4 L1480.37 1213.4 L1479.78 1213.4 L1479.2 1213.4 L1478.61 1213.4 L1478.03 1213.4 L1477.44 1213.4 L1476.85 1213.4 L1476.27 1213.4 L1475.68 1213.4 L1475.09 1213.4 L1474.51 1213.4 L1473.92 1213.4 L1473.33 1213.4 L1472.75 1213.4 L1472.16 1213.4 L1471.57 1213.4 L1470.99 1213.4 L1470.4 1213.4 L1469.82 1213.4 L1469.23 1213.4 L1468.64 1213.4 L1468.06 1213.4 L1467.47 1213.4 L1466.88 1213.4 L1466.3 1213.4 L1465.71 1213.4 L1465.12 1213.4 L1464.54 1213.4 L1463.95 1213.4 L1463.37 1213.4 L1462.78 1213.4 L1462.19 1213.4 L1461.61 1213.4 L1461.02 1213.4 L1460.43 1213.4 L1459.85 1213.4 L1459.26 1213.4 L1458.67 1213.4 L1458.09 1213.4 L1457.5 1213.4 L1456.91 1213.4 L1456.33 1213.4 L1455.74 1213.4 L1455.16 1213.4 L1454.57 1213.4 L1453.98 1213.4 L1453.4 1213.4 L1452.81 1213.4 L1452.22 1213.4 L1451.64 1213.4 L1451.05 1213.4 L1450.46 1213.4 L1449.88 1213.4 L1449.29 1213.4 L1448.7 1213.4 L1448.12 1213.4 L1447.53 1213.4 L1446.95 1213.4 L1446.36 1213.4 L1445.77 1213.4 L1445.19 1213.4 L1444.6 1213.4 L1444.01 1213.4 L1443.43 1213.4 L1442.84 1213.4 L1442.25 1213.4 L1441.67 1213.4 L1441.08 1213.4 L1440.5 1213.4 L1439.91 1213.4 L1439.32 1213.4 L1438.74 1213.4 L1438.15 1213.4 L1437.56 1213.4 L1436.98 1213.4 L1436.39 1213.4 L1435.8 1213.4 L1435.22 1213.4 L1434.63 1213.4 L1434.04 1213.4 L1433.46 1213.4 L1432.87 1213.4 L1432.29 1213.4 L1431.7 1213.4 L1431.11 1213.4 L1430.53 1213.4 L1429.94 1213.4 L1429.35 1213.4 L1428.77 1213.4 L1428.18 1213.4 L1427.59 1213.4 L1427.01 1213.4 L1426.42 1213.4 L1425.83 1213.4 L1425.25 1213.4 L1424.66 1213.4 L1424.08 1213.4 L1423.49 1213.4 L1422.9 1213.4 L1422.32 1213.4 L1421.73 1213.4 L1421.14 1213.4 L1420.56 1213.4 L1419.97 1213.4 L1419.38 1213.4 L1418.8 1213.4 L1418.21 1213.4 L1417.63 1213.4 L1417.04 1213.4 L1416.45 1213.4 L1415.87 1213.4 L1415.28 1213.4 L1414.69 1213.4 L1414.11 1213.4 L1413.52 1213.4 L1412.93 1213.4 L1412.35 1213.4 L1411.76 1213.4 L1411.17 1213.4 L1410.59 1213.4 L1410 1213.4 L1409.42 1213.4 L1408.83 1213.4 L1408.24 1213.4 L1407.66 1213.4 L1407.07 1213.4 L1406.48 1213.4 L1405.9 1213.4 L1405.31 1213.4 L1404.72 1213.4 L1404.14 1213.4 L1403.55 1213.4 L1402.96 1213.4 L1402.38 1213.4 L1401.79 1213.4 L1401.21 1213.4 L1400.62 1213.4 L1400.03 1213.4 L1399.45 1213.4 L1398.86 1213.4 L1398.27 1213.4 L1397.69 1213.4 L1397.1 1213.4 L1396.51 1213.4 L1395.93 1213.4 L1395.34 1213.4 L1394.75 1213.4 L1394.17 1213.4 L1393.58 1213.4 L1393 1213.4 L1392.41 1213.4 L1391.82 1213.4 L1391.24 1213.4 L1390.65 1213.4 L1390.06 1213.4 L1389.48 1213.4 L1388.89 1213.4 L1388.3 1213.4 L1387.72 1213.4 L1387.13 1213.4 L1386.55 1213.4 L1385.96 1213.4 L1385.37 1213.4 L1384.79 1213.4 L1384.2 1213.4 L1383.61 1213.4 L1383.03 1213.4 L1382.44 1213.4 L1381.85 1213.4 L1381.27 1213.4 L1380.68 1213.4 L1380.09 1213.4 L1379.51 1213.4 L1378.92 1213.4 L1378.34 1213.4 L1377.75 1213.4 L1377.16 1213.4 L1376.58 1213.4 L1375.99 1213.4 L1375.4 1213.4 L1374.82 1213.4 L1374.23 1213.4 L1373.64 1213.4 L1373.06 1213.4 L1372.47 1213.4 L1371.88 1213.4 L1371.3 1213.4 L1370.71 1213.4 L1370.13 1213.4 L1369.54 1213.4 L1368.95 1213.4 L1368.37 1213.4 L1367.78 1213.4 L1367.19 1213.4 L1366.61 1213.4 L1366.02 1213.4 L1365.43 1213.4 L1364.85 1213.4 L1364.26 1213.4 L1363.68 1213.4 L1363.09 1213.4 L1362.5 1213.4 L1361.92 1213.4 L1361.33 1213.4 L1360.74 1213.4 L1360.16 1213.4 L1359.57 1213.4 L1358.98 1213.4 L1358.4 1213.4 L1357.81 1213.4 L1357.22 1213.4 L1356.64 1213.4 L1356.05 1213.4 L1355.47 1213.4 L1354.88 1213.4 L1354.29 1213.4 L1353.71 1213.4 L1353.12 1213.4 L1352.53 1213.4 L1351.95 1213.4 L1351.36 1213.4 L1350.77 1213.4 L1350.19 1213.4 L1349.6 1213.4 L1349.01 1213.4 L1348.43 1213.4 L1347.84 1213.4 L1347.26 1213.4 L1346.67 1213.4 L1346.08 1213.4 L1345.5 1213.4 L1344.91 1213.4 L1344.32 1213.4 L1343.74 1213.4 L1343.15 1213.4 L1342.56 1213.4 L1341.98 1213.4 L1341.39 1213.4 L1340.8 1213.4 L1340.22 1213.4 L1339.63 1213.4 L1339.05 1213.4 L1338.46 1213.4 L1337.87 1213.4 L1337.29 1213.4 L1336.7 1213.4 L1336.11 1213.4 L1335.53 1213.4 L1334.94 1213.4 L1334.35 1213.4 L1333.77 1213.4 L1333.18 1213.4 L1332.6 1213.4 L1332.01 1213.4 L1331.42 1213.4 L1330.84 1213.4 L1330.25 1213.4 L1329.66 1213.4 L1329.08 1213.4 L1328.49 1213.4 L1327.9 1213.4 L1327.32 1213.4 L1326.73 1213.4 L1326.14 1213.4 L1325.56 1213.4 L1324.97 1213.4 L1324.39 1213.4 L1323.8 1213.4 L1323.21 1213.4 L1322.63 1213.4 L1322.04 1213.4 L1321.45 1213.4 L1320.87 1213.4 L1320.28 1213.4 L1319.69 1213.4 L1319.11 1213.4 L1318.52 1213.4 L1317.93 1213.4 L1317.35 1213.4 L1316.76 1213.4 L1316.18 1213.4 L1315.59 1213.4 L1315 1213.4 L1314.42 1213.4 L1313.83 1213.4 L1313.24 1213.4 L1312.66 1213.4 L1312.07 1213.4 L1311.48 1213.4 L1310.9 1213.4 L1310.31 1213.4 L1309.73 1213.4 L1309.14 1213.4 L1308.55 1213.4 L1307.97 1213.4 L1307.38 1213.4 L1306.79 1213.4 L1306.21 1213.4 L1305.62 1213.4 L1305.03 1213.4 L1304.45 1213.4 L1303.86 1213.4 L1303.27 1213.4 L1302.69 1213.4 L1302.1 1213.4 L1301.52 1213.4 L1300.93 1213.4 L1300.34 1213.4 L1299.76 1213.4 L1299.17 1213.4 L1298.58 1213.4 L1298 1213.4 L1297.41 1213.4 L1296.82 1213.4 L1296.24 1213.4 L1295.65 1213.4 L1295.06 1213.4 L1294.48 1213.4 L1293.89 1213.4 L1293.31 1213.4 L1292.72 1213.4 L1292.13 1213.4 L1291.55 1213.4 L1290.96 1213.4 L1290.37 1213.4 L1289.79 1213.4 L1289.2 1213.4 L1288.61 1213.4 L1288.03 1213.4 L1287.44 1213.4 L1286.86 1213.4 L1286.27 1213.4 L1285.68 1213.4 L1285.1 1213.4 L1284.51 1213.4 L1283.92 1213.4 L1283.34 1213.4 L1282.75 1213.4 L1282.16 1213.4 L1281.58 1213.4 L1280.99 1213.4 L1280.4 1213.4 L1279.82 1213.4 L1279.23 1213.4 L1278.65 1213.4 L1278.06 1213.4 L1277.47 1213.4 L1276.89 1213.4 L1276.3 1213.4 L1275.71 1213.4 L1275.13 1213.4 L1274.54 1213.4 L1273.95 1213.4 L1273.37 1213.4 L1272.78 1213.4 L1272.19 1213.4 L1271.61 1213.4 L1271.02 1213.4 L1270.44 1213.4 L1269.85 1213.4 L1269.26 1213.4 L1268.68 1213.4 L1268.09 1213.4 L1267.5 1213.4 L1266.92 1213.4 L1266.33 1213.4 L1265.74 1213.4 L1265.16 1213.4 L1264.57 1213.4 L1263.98 1213.4 L1263.4 1213.4 L1262.81 1213.4 L1262.23 1213.4 L1261.64 1213.4 L1261.05 1213.4 L1260.47 1213.4 L1259.88 1213.4 L1259.29 1213.4 L1258.71 1213.4 L1258.12 1213.4 L1257.53 1213.4 L1256.95 1213.4 L1256.36 1213.4 L1255.78 1213.4 L1255.19 1213.4 L1254.6 1213.4 L1254.02 1213.4 L1253.43 1213.4 L1252.84 1213.4 L1252.26 1213.4 L1251.67 1213.4 L1251.08 1213.4 L1250.5 1213.4 L1249.91 1213.4 L1249.32 1213.4 L1248.74 1213.4 L1248.15 1213.4 L1247.57 1213.4 L1246.98 1213.4 L1246.39 1213.4 L1245.81 1213.4 L1245.22 1213.4 L1244.63 1213.4 L1244.05 1213.4 L1243.46 1213.4 L1242.87 1213.4 L1242.29 1213.4 L1241.7 1213.4 L1241.11 1213.4 L1240.53 1213.4 L1239.94 1213.4 L1239.36 1213.4 L1238.77 1213.4 L1238.18 1213.4 L1237.6 1213.4 L1237.01 1213.4 L1236.42 1213.4 L1235.84 1213.4 L1235.25 1213.4 L1234.66 1213.4 L1234.08 1213.4 L1233.49 1213.4 L1232.91 1213.4 L1232.32 1213.4 L1231.73 1213.4 L1231.15 1213.4 L1230.56 1213.4 L1229.97 1213.4 L1229.39 1213.4 L1228.8 1213.4 L1228.21 1213.4 L1227.63 1213.4 L1227.04 1213.4 L1226.45 1213.4 L1225.87 1213.4 L1225.28 1213.4 L1224.7 1213.4 L1224.11 1213.4 L1223.52 1213.4 L1222.94 1213.4 L1222.35 1213.4 L1221.76 1213.4 L1221.18 1213.4 L1220.59 1213.4 L1220 1213.4 L1219.42 1213.4 L1218.83 1213.4 L1218.24 1213.4 L1217.66 1213.4 L1217.07 1213.4 L1216.49 1213.4 L1215.9 1213.4 L1215.31 1213.4 L1214.73 1213.4 L1214.14 1213.4 L1213.55 1213.4 L1212.97 1213.4 L1212.38 1213.4 L1211.79 1213.4 L1211.21 1213.4 L1210.62 1213.4 L1210.03 1213.4 L1209.45 1213.4 L1208.86 1213.4 L1208.28 1213.4 L1207.69 1213.4 L1207.1 1213.4 L1206.52 1213.4 L1205.93 1213.4 L1205.34 1213.4 L1204.76 1213.4 L1204.17 1213.4 L1203.58 1213.4 L1203 1213.4 L1202.41 1213.4 L1201.83 1213.4 L1201.24 1213.4 L1200.65 1213.4 L1200.07 1213.4 L1199.48 1213.4 L1198.89 1213.4 L1198.31 1213.4 L1197.72 1213.4 L1197.13 1213.4 L1196.55 1213.4 L1195.96 1213.4 L1195.37 1213.4 L1194.79 1213.4 L1194.2 1213.4 L1193.62 1213.4 L1193.03 1213.4 L1192.44 1213.4 L1191.86 1213.4 L1191.27 1213.4 L1190.68 1213.4 L1190.1 1213.4 L1189.51 1213.4 L1188.92 1213.4 L1188.34 1213.4 L1187.75 1213.4 L1187.16 1213.4 L1186.58 1213.4 L1185.99 1213.4 L1185.41 1213.4 L1184.82 1213.4 L1184.23 1213.4 L1183.65 1213.4 L1183.06 1213.4 L1182.47 1213.4 L1181.89 1213.4 L1181.3 1213.4 L1180.71 1213.4 L1180.13 1213.4 L1179.54 1213.4 L1178.96 1213.4 L1178.37 1213.4 L1177.78 1213.4 L1177.2 1213.4 L1176.61 1213.4 L1176.02 1213.4 L1175.44 1213.4 L1174.85 1213.4 L1174.26 1213.4 L1173.68 1213.4 L1173.09 1213.4 L1172.5 1213.4 L1171.92 1213.4 L1171.33 1213.4 L1170.75 1213.4 L1170.16 1213.4 L1169.57 1213.4 L1168.99 1213.4 L1168.4 1213.4 L1167.81 1213.4 L1167.23 1213.4 L1166.64 1213.4 L1166.05 1213.4 L1165.47 1213.4 L1164.88 1213.4 L1164.29 1213.4 L1163.71 1213.4 L1163.12 1213.4 L1162.54 1213.4 L1161.95 1213.4 L1161.36 1213.4 L1160.78 1213.4 L1160.19 1213.4 L1159.6 1213.4 L1159.02 1213.4 L1158.43 1213.4 L1157.84 1213.4 L1157.26 1213.4 L1156.67 1213.4 L1156.09 1213.4 L1155.5 1213.4 L1154.91 1213.4 L1154.33 1213.4 L1153.74 1213.4 L1153.15 1213.4 L1152.57 1213.4 L1151.98 1213.4 L1151.39 1213.4 L1150.81 1213.4 L1150.22 1213.4 L1149.63 1213.4 L1149.05 1213.4 L1148.46 1213.4 L1147.88 1213.4 L1147.29 1213.4 L1146.7 1213.4 L1146.12 1213.4 L1145.53 1213.4 L1144.94 1213.4 L1144.36 1213.4 L1143.77 1213.4 L1143.18 1213.4 L1142.6 1213.4 L1142.01 1213.4 L1141.42 1213.4 L1140.84 1213.4 L1140.25 1213.4 L1139.67 1213.4 L1139.08 1213.4 L1138.49 1213.4 L1137.91 1213.4 L1137.32 1213.4 L1136.73 1213.4 L1136.15 1213.4 L1135.56 1213.4 L1134.97 1213.4 L1134.39 1213.4 L1133.8 1213.4 L1133.21 1213.4 L1132.63 1213.4 L1132.04 1213.4 L1131.46 1213.4 L1130.87 1213.4 L1130.28 1213.4 L1129.7 1213.4 L1129.11 1213.4 L1128.52 1213.4 L1127.94 1213.4 L1127.35 1213.4 L1126.76 1213.4 L1126.18 1213.4 L1125.59 1213.4 L1125.01 1213.4 L1124.42 1213.4 L1123.83 1213.4 L1123.25 1213.4 L1122.66 1213.4 L1122.07 1213.4 L1121.49 1213.4 L1120.9 1213.4 L1120.31 1213.4 L1119.73 1213.4 L1119.14 1213.4 L1118.55 1213.4 L1117.97 1213.4 L1117.38 1213.4 L1116.8 1213.4 L1116.21 1213.4 L1115.62 1213.4 L1115.04 1213.4 L1114.45 1213.4 L1113.86 1213.4 L1113.28 1213.4 L1112.69 1213.4 L1112.1 1213.4 L1111.52 1213.4 L1110.93 1213.4 L1110.34 1213.4 L1109.76 1213.4 L1109.17 1213.4 L1108.59 1213.4 L1108 1213.4 L1107.41 1213.4 L1106.83 1213.4 L1106.24 1213.4 L1105.65 1213.4 L1105.07 1213.4 L1104.48 1213.4 L1103.89 1213.4 L1103.31 1213.4 L1102.72 1213.4 L1102.14 1213.4 L1101.55 1213.4 L1100.96 1213.4 L1100.38 1213.4 L1099.79 1213.4 L1099.2 1213.4 L1098.62 1213.4 L1098.03 1213.4 L1097.44 1213.4 L1096.86 1213.4 L1096.27 1213.4 L1095.68 1213.4 L1095.1 1213.4 L1094.51 1213.4 L1093.93 1213.4 L1093.34 1213.4 L1092.75 1213.4 L1092.17 1213.4 L1091.58 1213.4 L1090.99 1213.4 L1090.41 1213.4 L1089.82 1213.4 L1089.23 1213.4 L1088.65 1213.4 L1088.06 1213.4 L1087.47 1213.4 L1086.89 1213.4 L1086.3 1213.4 L1085.72 1213.4 L1085.13 1213.4 L1084.54 1213.4 L1083.96 1213.4 L1083.37 1213.4 L1082.78 1213.4 L1082.2 1213.4 L1081.61 1213.4 L1081.02 1213.4 L1080.44 1213.4 L1079.85 1213.4 L1079.26 1213.4 L1078.68 1213.4 L1078.09 1213.4 L1077.51 1213.4 L1076.92 1213.4 L1076.33 1213.4 L1075.75 1213.4 L1075.16 1213.4 L1074.57 1213.4 L1073.99 1213.4 L1073.4 1213.4 L1072.81 1213.4 L1072.23 1213.4 L1071.64 1213.4 L1071.06 1213.4 L1070.47 1213.4 L1069.88 1213.4 L1069.3 1213.4 L1068.71 1213.4 L1068.12 1213.4 L1067.54 1213.4 L1066.95 1213.4 L1066.36 1213.4 L1065.78 1213.4 L1065.19 1213.4 L1064.6 1213.4 L1064.02 1213.4 L1063.43 1213.4 L1062.85 1213.4 L1062.26 1213.4 L1061.67 1213.4 L1061.09 1213.4 L1060.5 1213.4 L1059.91 1213.4 L1059.33 1213.4 L1058.74 1213.4 L1058.15 1213.4 L1057.57 1213.4 L1056.98 1213.4 L1056.39 1213.4 L1055.81 1213.4 L1055.22 1213.4 L1054.64 1213.4 L1054.05 1213.4 L1053.46 1213.4 L1052.88 1213.4 L1052.29 1213.4 L1051.7 1213.4 L1051.12 1213.4 L1050.53 1213.4 L1049.94 1213.4 L1049.36 1213.4 L1048.77 1213.4 L1048.19 1213.4 L1047.6 1213.4 L1047.01 1213.4 L1046.43 1213.4 L1045.84 1213.4 L1045.25 1213.4 L1044.67 1213.4 L1044.08 1213.4 L1043.49 1213.4 L1042.91 1213.4 L1042.32 1213.4 L1041.73 1213.4 L1041.15 1213.4 L1040.56 1213.4 L1039.98 1213.4 L1039.39 1213.4 L1038.8 1213.4 L1038.22 1213.4 L1037.63 1213.4 L1037.04 1213.4 L1036.46 1213.4 L1035.87 1213.4 L1035.28 1213.4 L1034.7 1213.4 L1034.11 1213.4 L1033.52 1213.4 L1032.94 1213.4 L1032.35 1213.4 L1031.77 1213.4 L1031.18 1213.4 L1030.59 1213.4 L1030.01 1213.4 L1029.42 1213.4 L1028.83 1213.4 L1028.25 1213.4 L1027.66 1213.4 L1027.07 1213.4 L1026.49 1213.4 L1025.9 1213.4 L1025.32 1213.4 L1024.73 1213.4 L1024.14 1213.4 L1023.56 1213.4 L1022.97 1213.4 L1022.38 1213.4 L1021.8 1213.4 L1021.21 1213.4 L1020.62 1213.4 L1020.04 1213.4 L1019.45 1213.4 L1018.86 1213.4 L1018.28 1213.4 L1017.69 1213.4 L1017.11 1213.4 L1016.52 1213.4 L1015.93 1213.4 L1015.35 1213.4 L1014.76 1213.4 L1014.17 1213.4 L1013.59 1213.4 L1013 1213.4 L1012.41 1213.4 L1011.83 1213.4 L1011.24 1213.4 L1010.65 1213.4 L1010.07 1213.4 L1009.48 1213.4 L1008.9 1213.4 L1008.31 1213.4 L1007.72 1213.4 L1007.14 1213.4 L1006.55 1213.4 L1005.96 1213.4 L1005.38 1213.4 L1004.79 1213.4 L1004.2 1213.4 L1003.62 1213.4 L1003.03 1213.4 L1002.44 1213.4 L1001.86 1213.4 L1001.27 1213.4 L1000.69 1213.4 L1000.1 1213.4 L999.513 1213.4 L998.926 1213.4 L998.34 1213.4 L997.754 1213.4 L997.167 1213.4 L996.581 1213.4 L995.994 1213.4 L995.408 1213.4 L994.822 1213.4 L994.235 1213.4 L993.649 1213.4 L993.062 1213.4 L992.476 1213.4 L991.889 1213.4 L991.303 1213.4 L990.717 1213.4 L990.13 1213.4 L989.544 1213.4 L988.957 1213.4 L988.371 1213.4 L987.785 1213.4 L987.198 1213.4 L986.612 1213.4 L986.025 1213.4  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip942)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1213.81 986.612,1213.81 987.198,1213.81 987.785,1213.81 988.371,1213.81 988.957,1213.81 989.544,1213.81 990.13,1213.81 990.717,1213.81 991.303,1213.81 991.889,1213.81 992.476,1213.81 993.062,1213.81 993.649,1213.81 994.235,1213.81 994.822,1213.81 995.408,1213.81 995.994,1213.81 996.581,1213.81 997.167,1213.81 997.754,1213.81 998.34,1213.81 998.926,1213.81 999.513,1213.81 1000.1,1213.81 1000.69,1213.81 1001.27,1213.81 1001.86,1213.81 1002.44,1213.81 1003.03,1213.81 1003.62,1213.81 1004.2,1213.81 1004.79,1213.81 1005.38,1213.81 1005.96,1213.81 1006.55,1213.81 1007.14,1213.81 1007.72,1213.81 1008.31,1213.81 1008.9,1213.81 1009.48,1213.81 1010.07,1213.81 1010.65,1213.81 1011.24,1213.81 1011.83,1213.81 1012.41,1213.81 1013,1213.81 1013.59,1213.81 1014.17,1213.81 1014.76,1213.81 1015.35,1213.81 1015.93,1213.81 1016.52,1213.81 1017.11,1213.81 1017.69,1213.81 1018.28,1213.81 1018.86,1213.81 1019.45,1213.81 1020.04,1213.81 1020.62,1213.81 1021.21,1213.81 1021.8,1213.81 1022.38,1213.81 1022.97,1213.81 1023.56,1213.81 1024.14,1213.81 1024.73,1213.81 1025.32,1213.81 1025.9,1213.81 1026.49,1213.81 1027.07,1213.81 1027.66,1213.81 1028.25,1213.81 1028.83,1213.81 1029.42,1213.81 1030.01,1213.81 1030.59,1213.81 1031.18,1213.81 1031.77,1213.81 1032.35,1213.81 1032.94,1213.81 1033.52,1213.81 1034.11,1213.81 1034.7,1213.81 1035.28,1213.81 1035.87,1213.81 1036.46,1213.81 1037.04,1213.81 1037.63,1213.81 1038.22,1213.81 1038.8,1213.81 1039.39,1213.81 1039.98,1213.81 1040.56,1213.81 1041.15,1213.81 1041.73,1213.81 1042.32,1213.81 1042.91,1213.81 1043.49,1213.81 1044.08,1213.81 1044.67,1213.81 1045.25,1213.81 1045.84,1213.81 1046.43,1213.81 1047.01,1213.81 1047.6,1213.81 1048.19,1213.81 1048.77,1213.81 1049.36,1213.81 1049.94,1213.81 1050.53,1213.81 1051.12,1213.81 1051.7,1213.81 1052.29,1213.81 1052.88,1213.81 1053.46,1213.81 1054.05,1213.81 1054.64,1213.81 1055.22,1213.81 1055.81,1213.81 1056.39,1213.81 1056.98,1213.81 1057.57,1213.81 1058.15,1213.81 1058.74,1213.81 1059.33,1213.81 1059.91,1213.81 1060.5,1213.81 1061.09,1213.81 1061.67,1213.81 1062.26,1213.81 1062.85,1213.81 1063.43,1213.81 1064.02,1213.81 1064.6,1213.81 1065.19,1213.81 1065.78,1213.81 1066.36,1213.81 1066.95,1213.81 1067.54,1213.81 1068.12,1213.81 1068.71,1213.81 1069.3,1213.81 1069.88,1213.81 1070.47,1213.81 1071.06,1213.81 1071.64,1213.81 1072.23,1213.81 1072.81,1213.81 1073.4,1213.81 1073.99,1213.81 1074.57,1213.81 1075.16,1213.81 1075.75,1213.81 1076.33,1213.81 1076.92,1213.81 1077.51,1213.81 1078.09,1213.81 1078.68,1213.81 1079.26,1213.81 1079.85,1213.81 1080.44,1213.81 1081.02,1213.81 1081.61,1213.81 1082.2,1213.81 1082.78,1213.81 1083.37,1213.81 1083.96,1213.81 1084.54,1213.81 1085.13,1213.81 1085.72,1213.81 1086.3,1213.81 1086.89,1213.81 1087.47,1213.81 1088.06,1213.81 1088.65,1213.81 1089.23,1213.81 1089.82,1213.81 1090.41,1213.81 1090.99,1213.81 1091.58,1213.81 1092.17,1213.81 1092.75,1213.81 1093.34,1213.81 1093.93,1213.81 1094.51,1213.81 1095.1,1213.81 1095.68,1213.81 1096.27,1213.81 1096.86,1213.81 1097.44,1213.81 1098.03,1213.81 1098.62,1213.81 1099.2,1213.81 1099.79,1213.81 1100.38,1213.81 1100.96,1213.81 1101.55,1213.81 1102.14,1213.81 1102.72,1213.81 1103.31,1213.81 1103.89,1213.81 1104.48,1213.81 1105.07,1213.81 1105.65,1213.81 1106.24,1213.81 1106.83,1213.81 1107.41,1213.81 1108,1213.81 1108.59,1213.81 1109.17,1213.81 1109.76,1213.81 1110.34,1213.81 1110.93,1213.81 1111.52,1213.81 1112.1,1213.81 1112.69,1213.81 1113.28,1213.81 1113.86,1213.81 1114.45,1213.81 1115.04,1213.81 1115.62,1213.81 1116.21,1213.81 1116.8,1213.81 1117.38,1213.81 1117.97,1213.81 1118.55,1213.81 1119.14,1213.81 1119.73,1213.81 1120.31,1213.81 1120.9,1213.81 1121.49,1213.81 1122.07,1213.81 1122.66,1213.81 1123.25,1213.81 1123.83,1213.81 1124.42,1213.81 1125.01,1213.81 1125.59,1213.81 1126.18,1213.81 1126.76,1213.81 1127.35,1213.81 1127.94,1213.81 1128.52,1213.81 1129.11,1213.81 1129.7,1213.81 1130.28,1213.81 1130.87,1213.81 1131.46,1213.81 1132.04,1213.81 1132.63,1213.81 1133.21,1213.81 1133.8,1213.81 1134.39,1213.81 1134.97,1213.81 1135.56,1213.81 1136.15,1213.81 1136.73,1213.81 1137.32,1213.81 1137.91,1213.81 1138.49,1213.81 1139.08,1213.81 1139.67,1213.81 1140.25,1213.81 1140.84,1213.81 1141.42,1213.81 1142.01,1213.81 1142.6,1213.81 1143.18,1213.81 1143.77,1213.81 1144.36,1213.81 1144.94,1213.81 1145.53,1213.81 1146.12,1213.81 1146.7,1213.81 1147.29,1213.81 1147.88,1213.81 1148.46,1213.81 1149.05,1213.81 1149.63,1213.81 1150.22,1213.81 1150.81,1213.81 1151.39,1213.81 1151.98,1213.81 1152.57,1213.81 1153.15,1213.81 1153.74,1213.81 1154.33,1213.81 1154.91,1213.81 1155.5,1213.81 1156.09,1213.81 1156.67,1213.81 1157.26,1213.81 1157.84,1213.81 1158.43,1213.81 1159.02,1213.81 1159.6,1213.81 1160.19,1213.81 1160.78,1213.81 1161.36,1213.81 1161.95,1213.81 1162.54,1213.81 1163.12,1213.81 1163.71,1213.81 1164.29,1213.81 1164.88,1213.81 1165.47,1213.81 1166.05,1213.81 1166.64,1213.81 1167.23,1213.81 1167.81,1213.81 1168.4,1213.81 1168.99,1213.81 1169.57,1213.81 1170.16,1213.81 1170.75,1213.81 1171.33,1213.81 1171.92,1213.81 1172.5,1213.81 1173.09,1213.81 1173.68,1213.81 1174.26,1213.81 1174.85,1213.81 1175.44,1213.81 1176.02,1213.81 1176.61,1213.81 1177.2,1213.81 1177.78,1213.81 1178.37,1213.81 1178.96,1213.81 1179.54,1213.81 1180.13,1213.81 1180.71,1213.81 1181.3,1213.81 1181.89,1213.81 1182.47,1213.81 1183.06,1213.81 1183.65,1213.81 1184.23,1213.81 1184.82,1213.81 1185.41,1213.81 1185.99,1213.81 1186.58,1213.81 1187.16,1213.81 1187.75,1213.81 1188.34,1213.81 1188.92,1213.81 1189.51,1213.81 1190.1,1213.81 1190.68,1213.81 1191.27,1213.81 1191.86,1213.81 1192.44,1213.81 1193.03,1213.81 1193.62,1213.81 1194.2,1213.81 1194.79,1213.81 1195.37,1213.81 1195.96,1213.81 1196.55,1213.81 1197.13,1213.81 1197.72,1213.81 1198.31,1213.81 1198.89,1213.81 1199.48,1213.81 1200.07,1213.81 1200.65,1213.81 1201.24,1213.81 1201.83,1213.81 1202.41,1213.81 1203,1213.81 1203.58,1213.81 1204.17,1213.81 1204.76,1213.81 1205.34,1213.81 1205.93,1213.81 1206.52,1213.81 1207.1,1213.81 1207.69,1213.81 1208.28,1213.81 1208.86,1213.81 1209.45,1213.81 1210.03,1213.81 1210.62,1213.81 1211.21,1213.81 1211.79,1213.81 1212.38,1213.81 1212.97,1213.81 1213.55,1213.81 1214.14,1213.81 1214.73,1213.81 1215.31,1213.81 1215.9,1213.81 1216.49,1213.81 1217.07,1213.81 1217.66,1213.81 1218.24,1213.81 1218.83,1213.81 1219.42,1213.81 1220,1213.81 1220.59,1213.81 1221.18,1213.81 1221.76,1213.81 1222.35,1213.81 1222.94,1213.81 1223.52,1213.81 1224.11,1213.81 1224.7,1213.81 1225.28,1213.81 1225.87,1213.81 1226.45,1213.81 1227.04,1213.81 1227.63,1213.81 1228.21,1213.81 1228.8,1213.81 1229.39,1213.81 1229.97,1213.81 1230.56,1213.81 1231.15,1213.81 1231.73,1213.81 1232.32,1213.81 1232.91,1213.81 1233.49,1213.81 1234.08,1213.81 1234.66,1213.81 1235.25,1213.81 1235.84,1213.81 1236.42,1213.81 1237.01,1213.81 1237.6,1213.81 1238.18,1213.81 1238.77,1213.81 1239.36,1213.81 1239.94,1213.81 1240.53,1213.81 1241.11,1213.81 1241.7,1213.81 1242.29,1213.81 1242.87,1213.81 1243.46,1213.81 1244.05,1213.81 1244.63,1213.81 1245.22,1213.81 1245.81,1213.81 1246.39,1213.81 1246.98,1213.81 1247.57,1213.81 1248.15,1213.81 1248.74,1213.81 1249.32,1213.81 1249.91,1213.81 1250.5,1213.81 1251.08,1213.81 1251.67,1213.81 1252.26,1213.81 1252.84,1213.81 1253.43,1213.81 1254.02,1213.81 1254.6,1213.81 1255.19,1213.81 1255.78,1213.81 1256.36,1213.81 1256.95,1213.81 1257.53,1213.81 1258.12,1213.81 1258.71,1213.81 1259.29,1213.81 1259.88,1213.81 1260.47,1213.81 1261.05,1213.81 1261.64,1213.81 1262.23,1213.81 1262.81,1213.81 1263.4,1213.81 1263.98,1213.81 1264.57,1213.81 1265.16,1213.81 1265.74,1213.81 1266.33,1213.81 1266.92,1213.81 1267.5,1213.81 1268.09,1213.81 1268.68,1213.81 1269.26,1213.81 1269.85,1213.81 1270.44,1213.81 1271.02,1213.81 1271.61,1213.81 1272.19,1213.81 1272.78,1213.81 1273.37,1213.81 1273.95,1213.81 1274.54,1213.81 1275.13,1213.81 1275.71,1213.81 1276.3,1213.81 1276.89,1213.81 1277.47,1213.81 1278.06,1213.81 1278.65,1213.81 1279.23,1213.81 1279.82,1213.81 1280.4,1213.81 1280.99,1213.81 1281.58,1213.81 1282.16,1213.81 1282.75,1213.81 1283.34,1213.81 1283.92,1213.81 1284.51,1213.81 1285.1,1213.81 1285.68,1213.81 1286.27,1213.81 1286.86,1213.81 1287.44,1213.81 1288.03,1213.81 1288.61,1213.81 1289.2,1213.81 1289.79,1213.81 1290.37,1213.81 1290.96,1213.81 1291.55,1213.81 1292.13,1213.81 1292.72,1213.81 1293.31,1213.81 1293.89,1213.81 1294.48,1213.81 1295.06,1213.81 1295.65,1213.81 1296.24,1213.81 1296.82,1213.81 1297.41,1213.81 1298,1213.81 1298.58,1213.81 1299.17,1213.81 1299.76,1213.81 1300.34,1213.81 1300.93,1213.81 1301.52,1213.81 1302.1,1213.81 1302.69,1213.81 1303.27,1213.81 1303.86,1213.81 1304.45,1213.81 1305.03,1213.81 1305.62,1213.81 1306.21,1213.81 1306.79,1213.81 1307.38,1213.81 1307.97,1213.81 1308.55,1213.81 1309.14,1213.81 1309.73,1213.81 1310.31,1213.81 1310.9,1213.81 1311.48,1213.81 1312.07,1213.81 1312.66,1213.81 1313.24,1213.81 1313.83,1213.81 1314.42,1213.81 1315,1213.81 1315.59,1213.81 1316.18,1213.81 1316.76,1213.81 1317.35,1213.81 1317.93,1213.81 1318.52,1213.81 1319.11,1213.81 1319.69,1213.81 1320.28,1213.81 1320.87,1213.81 1321.45,1213.81 1322.04,1213.81 1322.63,1213.81 1323.21,1213.81 1323.8,1213.81 1324.39,1213.81 1324.97,1213.81 1325.56,1213.81 1326.14,1213.81 1326.73,1213.81 1327.32,1213.81 1327.9,1213.81 1328.49,1213.81 1329.08,1213.81 1329.66,1213.81 1330.25,1213.81 1330.84,1213.81 1331.42,1213.81 1332.01,1213.81 1332.6,1213.81 1333.18,1213.81 1333.77,1213.81 1334.35,1213.81 1334.94,1213.81 1335.53,1213.81 1336.11,1213.81 1336.7,1213.81 1337.29,1213.81 1337.87,1213.81 1338.46,1213.81 1339.05,1213.81 1339.63,1213.81 1340.22,1213.81 1340.8,1213.81 1341.39,1213.81 1341.98,1213.81 1342.56,1213.81 1343.15,1213.81 1343.74,1213.81 1344.32,1213.81 1344.91,1213.81 1345.5,1213.81 1346.08,1213.81 1346.67,1213.81 1347.26,1213.81 1347.84,1213.81 1348.43,1213.81 1349.01,1213.81 1349.6,1213.81 1350.19,1213.81 1350.77,1213.81 1351.36,1213.81 1351.95,1213.81 1352.53,1213.81 1353.12,1213.81 1353.71,1213.81 1354.29,1213.81 1354.88,1213.81 1355.47,1213.81 1356.05,1213.81 1356.64,1213.81 1357.22,1213.81 1357.81,1213.81 1358.4,1213.81 1358.98,1213.81 1359.57,1213.81 1360.16,1213.81 1360.74,1213.81 1361.33,1213.81 1361.92,1213.81 1362.5,1213.81 1363.09,1213.81 1363.68,1213.81 1364.26,1213.81 1364.85,1213.81 1365.43,1213.81 1366.02,1213.81 1366.61,1213.81 1367.19,1213.81 1367.78,1213.81 1368.37,1213.81 1368.95,1213.81 1369.54,1213.81 1370.13,1213.81 1370.71,1213.81 1371.3,1213.81 1371.88,1213.81 1372.47,1213.81 1373.06,1213.81 1373.64,1213.81 1374.23,1213.81 1374.82,1213.81 1375.4,1213.81 1375.99,1213.81 1376.58,1213.81 1377.16,1213.81 1377.75,1213.81 1378.34,1213.81 1378.92,1213.81 1379.51,1213.81 1380.09,1213.81 1380.68,1213.81 1381.27,1213.81 1381.85,1213.81 1382.44,1213.81 1383.03,1213.81 1383.61,1213.81 1384.2,1213.81 1384.79,1213.81 1385.37,1213.81 1385.96,1213.81 1386.55,1213.81 1387.13,1213.81 1387.72,1213.81 1388.3,1213.81 1388.89,1213.81 1389.48,1213.81 1390.06,1213.81 1390.65,1213.81 1391.24,1213.81 1391.82,1213.81 1392.41,1213.81 1393,1213.81 1393.58,1213.81 1394.17,1213.81 1394.75,1213.81 1395.34,1213.81 1395.93,1213.81 1396.51,1213.81 1397.1,1213.81 1397.69,1213.81 1398.27,1213.81 1398.86,1213.81 1399.45,1213.81 1400.03,1213.81 1400.62,1213.81 1401.21,1213.81 1401.79,1213.81 1402.38,1213.81 1402.96,1213.81 1403.55,1213.81 1404.14,1213.81 1404.72,1213.81 1405.31,1213.81 1405.9,1213.81 1406.48,1213.81 1407.07,1213.81 1407.66,1213.81 1408.24,1213.81 1408.83,1213.81 1409.42,1213.81 1410,1213.81 1410.59,1213.81 1411.17,1213.81 1411.76,1213.81 1412.35,1213.81 1412.93,1213.81 1413.52,1213.81 1414.11,1213.81 1414.69,1213.81 1415.28,1213.81 1415.87,1213.81 1416.45,1213.81 1417.04,1213.81 1417.63,1213.81 1418.21,1213.81 1418.8,1213.81 1419.38,1213.81 1419.97,1213.81 1420.56,1213.81 1421.14,1213.81 1421.73,1213.81 1422.32,1213.81 1422.9,1213.81 1423.49,1213.81 1424.08,1213.81 1424.66,1213.81 1425.25,1213.81 1425.83,1213.81 1426.42,1213.81 1427.01,1213.81 1427.59,1213.81 1428.18,1213.81 1428.77,1213.81 1429.35,1213.81 1429.94,1213.81 1430.53,1213.81 1431.11,1213.81 1431.7,1213.81 1432.29,1213.81 1432.87,1213.81 1433.46,1213.81 1434.04,1213.81 1434.63,1213.81 1435.22,1213.81 1435.8,1213.81 1436.39,1213.81 1436.98,1213.81 1437.56,1213.81 1438.15,1213.81 1438.74,1213.81 1439.32,1213.81 1439.91,1213.81 1440.5,1213.81 1441.08,1213.81 1441.67,1213.81 1442.25,1213.81 1442.84,1213.81 1443.43,1213.81 1444.01,1213.81 1444.6,1213.81 1445.19,1213.81 1445.77,1213.81 1446.36,1213.81 1446.95,1213.81 1447.53,1213.81 1448.12,1213.81 1448.7,1213.81 1449.29,1213.81 1449.88,1213.81 1450.46,1213.81 1451.05,1213.81 1451.64,1213.81 1452.22,1213.81 1452.81,1213.81 1453.4,1213.81 1453.98,1213.81 1454.57,1213.81 1455.16,1213.81 1455.74,1213.81 1456.33,1213.81 1456.91,1213.81 1457.5,1213.81 1458.09,1213.81 1458.67,1213.81 1459.26,1213.81 1459.85,1213.81 1460.43,1213.81 1461.02,1213.81 1461.61,1213.81 1462.19,1213.81 1462.78,1213.81 1463.37,1213.81 1463.95,1213.81 1464.54,1213.81 1465.12,1213.81 1465.71,1213.81 1466.3,1213.81 1466.88,1213.81 1467.47,1213.81 1468.06,1213.81 1468.64,1213.81 1469.23,1213.81 1469.82,1213.81 1470.4,1213.81 1470.99,1213.81 1471.57,1213.81 1472.16,1213.81 1472.75,1213.81 1473.33,1213.81 1473.92,1213.81 1474.51,1213.81 1475.09,1213.81 1475.68,1213.81 1476.27,1213.81 1476.85,1213.81 1477.44,1213.81 1478.03,1213.81 1478.61,1213.81 1479.2,1213.81 1479.78,1213.81 1480.37,1213.81 1480.96,1213.81 1481.54,1213.81 1482.13,1213.81 1482.72,1213.81 1483.3,1213.81 1483.89,1213.81 1484.48,1213.81 1485.06,1213.81 1485.65,1213.81 1486.24,1213.81 1486.82,1213.81 1487.41,1213.81 1487.99,1213.81 1488.58,1213.81 1489.17,1213.81 1489.75,1213.81 1490.34,1213.81 1490.93,1213.81 1491.51,1213.81 1492.1,1213.81 1492.69,1213.81 1493.27,1213.81 1493.86,1213.81 1494.45,1213.81 1495.03,1213.81 1495.62,1213.81 1496.2,1213.81 1496.79,1213.81 1497.38,1213.81 1497.96,1213.81 1498.55,1213.81 1499.14,1213.81 1499.72,1213.81 1500.31,1213.81 1500.9,1213.81 1501.48,1213.81 1502.07,1213.81 1502.65,1213.81 1503.24,1213.81 1503.83,1213.81 1504.41,1213.81 1505,1213.81 1505.59,1213.81 1506.17,1213.81 1506.76,1213.81 1507.35,1213.81 1507.93,1213.81 1508.52,1213.81 1509.11,1213.81 1509.69,1213.81 1510.28,1213.81 1510.86,1213.81 1511.45,1213.81 1512.04,1213.81 1512.62,1213.81 1513.21,1213.81 1513.8,1213.81 1514.38,1213.81 1514.97,1213.81 1515.56,1213.81 1516.14,1213.81 1516.73,1213.81 1517.32,1213.81 1517.9,1213.81 1518.49,1213.81 1519.07,1213.81 1519.66,1213.81 1520.25,1213.81 1520.83,1213.81 1521.42,1213.81 1522.01,1213.81 1522.59,1213.81 1523.18,1213.81 1523.77,1213.81 1524.35,1213.81 1524.94,1213.81 1525.52,1213.81 1526.11,1213.81 1526.7,1213.81 1527.28,1213.81 1527.87,1213.81 1528.46,1213.81 1529.04,1213.81 1529.63,1213.81 1530.22,1213.81 1530.8,1213.81 1531.39,1213.81 1531.98,1213.81 1532.56,1213.81 1533.15,1213.81 1533.73,1213.81 1534.32,1213.81 1534.91,1213.81 1535.49,1213.81 1536.08,1213.81 1536.67,1213.81 1537.25,1213.81 1537.84,1213.81 1538.43,1213.81 1539.01,1213.81 1539.6,1213.81 1540.19,1213.81 1540.77,1213.81 1541.36,1213.81 1541.94,1213.81 1542.53,1213.81 1543.12,1213.81 1543.7,1213.81 1544.29,1213.81 1544.88,1213.81 1545.46,1213.81 1546.05,1213.81 1546.64,1213.81 1547.22,1213.81 1547.81,1213.81 1548.4,1213.81 1548.98,1213.81 1549.57,1213.81 1550.15,1213.81 1550.74,1213.81 1551.33,1213.81 1551.91,1213.81 1552.5,1213.81 1553.09,1213.81 1553.67,1213.81 1554.26,1213.81 1554.85,1213.81 1555.43,1213.81 1556.02,1213.81 1556.6,1213.81 1557.19,1213.81 1557.78,1213.81 1558.36,1213.81 1558.95,1213.81 1559.54,1213.81 1560.12,1213.81 1560.71,1213.81 1561.3,1213.81 1561.88,1213.81 1562.47,1213.81 1563.06,1213.81 1563.64,1213.81 1564.23,1213.81 1564.81,1213.81 1565.4,1213.81 1565.99,1213.81 1566.57,1213.81 1567.16,1213.81 1567.75,1213.81 1568.33,1213.81 1568.92,1213.81 1569.51,1213.81 1570.09,1213.81 1570.68,1213.81 1571.27,1213.81 1571.85,1213.81 1572.44,1213.81 1573.02,1213.81 1573.61,1213.81 1574.2,1213.81 1574.78,1213.81 1575.37,1213.81 1575.96,1213.81 1576.54,1213.81 1577.13,1213.81 1577.72,1213.81 1578.3,1213.81 1578.89,1213.81 1579.47,1213.81 1580.06,1213.81 1580.65,1213.81 1581.23,1213.81 1581.82,1213.81 1582.41,1213.81 1582.99,1213.81 1583.58,1213.81 1584.17,1213.81 1584.75,1213.81 1585.34,1213.81 1585.93,1213.81 1586.51,1213.81 1587.1,1213.81 1587.68,1213.81 1588.27,1213.81 1588.86,1213.81 1589.44,1213.81 1590.03,1213.81 1590.62,1213.81 1591.2,1213.81 1591.79,1213.81 1592.38,1213.81 1592.96,1213.81 1593.55,1213.81 1594.14,1213.81 1594.72,1213.81 1595.31,1213.81 1595.89,1213.81 1596.48,1213.81 1597.07,1213.81 1597.65,1213.81 1598.24,1213.81 1598.83,1213.81 1599.41,1213.81 1600,1213.81 1600.59,1213.81 1601.17,1213.81 1601.76,1213.81 1602.34,1213.81 1602.93,1213.81 1603.52,1213.81 1604.1,1213.81 1604.69,1213.81 1605.28,1213.81 1605.86,1213.81 1606.45,1213.81 1607.04,1213.81 1607.62,1213.81 1608.21,1213.81 1608.8,1213.81 1609.38,1213.81 1609.97,1213.81 1610.55,1213.81 1611.14,1213.81 1611.73,1213.81 1612.31,1213.81 1612.9,1213.81 1613.49,1213.81 1614.07,1213.81 1614.66,1213.81 1615.25,1213.81 1615.83,1213.81 1616.42,1213.81 1617.01,1213.81 1617.59,1213.81 1618.18,1213.81 1618.76,1213.81 1619.35,1213.81 1619.94,1213.81 1620.52,1213.81 1621.11,1213.81 1621.7,1213.81 1622.28,1213.81 1622.87,1213.81 1623.46,1213.81 1624.04,1213.81 1624.63,1213.81 1625.22,1213.81 1625.8,1213.81 1626.39,1213.81 1626.97,1213.81 1627.56,1213.81 1628.15,1213.81 1628.73,1213.81 1629.32,1213.81 1629.91,1213.81 1630.49,1213.81 1631.08,1213.81 1631.67,1213.81 1632.25,1213.81 1632.84,1213.81 1633.42,1213.81 1634.01,1213.81 1634.6,1213.81 1635.18,1213.81 1635.77,1213.81 1636.36,1213.81 1636.94,1213.81 1637.53,1213.81 1638.12,1213.81 1638.7,1213.81 1639.29,1213.81 1639.88,1213.81 1640.46,1213.81 1641.05,1213.81 1641.63,1213.81 1642.22,1213.81 1642.81,1213.81 1643.39,1213.81 1643.98,1213.81 1644.57,1213.81 1645.15,1213.81 1645.74,1213.81 1646.33,1213.81 1646.91,1213.81 1647.5,1213.81 1648.09,1213.81 1648.67,1213.81 1649.26,1213.81 1649.84,1213.81 1650.43,1213.81 1651.02,1213.81 1651.6,1213.81 1652.19,1213.81 1652.78,1213.81 1653.36,1213.81 1653.95,1213.81 1654.54,1213.81 1655.12,1213.81 1655.71,1213.81 1656.29,1213.81 1656.88,1213.81 1657.47,1213.81 1658.05,1213.81 1658.64,1213.81 1659.23,1213.81 1659.81,1213.81 1660.4,1213.81 1660.99,1213.81 1661.57,1213.81 1662.16,1213.81 1662.75,1213.81 1663.33,1213.81 1663.92,1213.81 1664.5,1213.81 1665.09,1213.81 1665.68,1213.81 1666.26,1213.81 1666.85,1213.81 1667.44,1213.81 1668.02,1213.81 1668.61,1213.81 1669.2,1213.81 1669.78,1213.81 1670.37,1213.81 1670.96,1213.81 1671.54,1213.81 1672.13,1213.81 1672.71,1213.81 1673.3,1213.81 1673.89,1213.81 1674.47,1213.81 1675.06,1213.81 1675.65,1213.81 1676.23,1213.81 1676.82,1213.81 1677.41,1213.81 1677.99,1213.81 1678.58,1213.81 1679.17,1213.81 1679.75,1213.81 1680.34,1213.81 1680.92,1213.81 1681.51,1213.81 1682.1,1213.81 1682.68,1213.81 1683.27,1213.81 1683.86,1213.81 1684.44,1213.81 1685.03,1213.81 1685.62,1213.81 1686.2,1213.81 1686.79,1213.81 1687.37,1213.81 1687.96,1213.81 1688.55,1213.81 1689.13,1213.81 1689.72,1213.81 1690.31,1213.81 1690.89,1213.81 1691.48,1213.81 1692.07,1213.81 1692.65,1213.81 1693.24,1213.81 1693.83,1213.81 1694.41,1213.81 1695,1213.81 1695.58,1213.81 1696.17,1213.81 1696.76,1213.81 1697.34,1213.81 1697.93,1213.81 1698.52,1213.81 1699.1,1213.81 1699.69,1213.81 1700.28,1213.81 1700.86,1213.81 1701.45,1213.81 1702.04,1213.81 1702.62,1213.81 1703.21,1213.81 1703.79,1213.81 1704.38,1213.81 1704.97,1213.81 1705.55,1213.81 1706.14,1213.81 1706.73,1213.81 1707.31,1213.81 1707.9,1213.81 1708.49,1213.81 1709.07,1213.81 1709.66,1213.81 1710.24,1213.81 1710.83,1213.81 1711.42,1213.81 1712,1213.81 1712.59,1213.81 1713.18,1213.81 1713.76,1213.81 1714.35,1213.81 1714.94,1213.81 1715.52,1213.81 1716.11,1213.81 1716.7,1213.81 1717.28,1213.81 1717.87,1213.81 1718.45,1213.81 1719.04,1213.81 1719.63,1213.81 1720.21,1213.81 1720.8,1213.81 1721.39,1213.81 1721.97,1213.81 1722.56,1213.81 1723.15,1213.81 1723.73,1213.81 1724.32,1213.81 1724.91,1213.81 1725.49,1213.81 1726.08,1213.81 1726.66,1213.81 1727.25,1213.81 1727.84,1213.81 1728.42,1213.81 1729.01,1213.81 1729.6,1213.81 1730.18,1213.81 1730.77,1213.81 1731.36,1213.81 1731.94,1213.81 1732.53,1213.81 1733.11,1213.81 1733.7,1213.81 1734.29,1213.81 1734.87,1213.81 1735.46,1213.81 1736.05,1213.81 1736.63,1213.81 1737.22,1213.81 1737.81,1213.81 1738.39,1213.81 1738.98,1213.81 1739.57,1213.81 1740.15,1213.81 1740.74,1213.81 1741.32,1213.81 1741.91,1213.81 1742.5,1213.81 1743.08,1213.81 1743.67,1213.81 1744.26,1213.81 1744.84,1213.81 1745.43,1213.81 1746.02,1213.81 1746.6,1213.81 1747.19,1213.81 1747.78,1213.81 1748.36,1213.81 1748.95,1213.81 1749.53,1213.81 1750.12,1213.81 1750.71,1213.81 1751.29,1213.81 1751.88,1213.81 1752.47,1213.81 1753.05,1213.81 1753.64,1213.81 1754.23,1213.81 1754.81,1213.81 1755.4,1213.81 1755.99,1213.81 1756.57,1213.81 1757.16,1213.81 1757.74,1213.81 1758.33,1213.81 1758.92,1213.81 1759.5,1213.81 1760.09,1213.81 1760.68,1213.81 1761.26,1213.81 1761.85,1213.81 1762.44,1213.81 1763.02,1213.81 1763.61,1213.81 1764.19,1213.81 1764.78,1213.81 1765.37,1213.81 1765.95,1213.81 1766.54,1213.81 1767.13,1213.81 1767.71,1213.81 1768.3,1213.81 1768.89,1213.81 1769.47,1213.81 1770.06,1213.81 1770.65,1213.81 1771.23,1213.81 1771.82,1213.81 1772.4,1213.81 1772.99,1213.81 1773.58,1213.81 1774.16,1213.81 1774.75,1213.81 1775.34,1213.81 1775.92,1213.81 1776.51,1213.81 1777.1,1213.81 1777.68,1213.81 1778.27,1213.81 1778.86,1213.81 1779.44,1213.81 1780.03,1213.81 1780.61,1213.81 1781.2,1213.81 1781.79,1213.81 1782.37,1213.81 1782.96,1213.81 1783.55,1213.81 1784.13,1213.81 1784.72,1213.81 1785.31,1213.81 1785.89,1213.81 1786.48,1213.81 1787.06,1213.81 1787.65,1213.81 1788.24,1213.81 1788.82,1213.81 1789.41,1213.81 1790,1213.81 1790.58,1213.81 1791.17,1213.81 1791.76,1213.81 1792.34,1213.81 1792.93,1213.81 1793.52,1213.81 1794.1,1213.81 1794.69,1213.81 1795.27,1213.81 1795.86,1213.81 1796.45,1213.81 1797.03,1213.81 1797.62,1213.81 1798.21,1213.81 1798.79,1213.81 1799.38,1213.81 1799.97,1213.81 1800.55,1213.81 1801.14,1213.81 1801.73,1213.81 1802.31,1213.81 1802.9,1213.81 1803.48,1213.81 1804.07,1213.81 1804.66,1213.81 1805.24,1213.81 1805.83,1213.81 1806.42,1213.81 1807,1213.81 1807.59,1213.81 1808.18,1213.81 1808.76,1213.81 1809.35,1213.81 1809.94,1213.81 1810.52,1213.81 1811.11,1213.81 1811.69,1213.81 1812.28,1213.81 1812.87,1213.81 1813.45,1213.81 1814.04,1213.81 1814.63,1213.81 1815.21,1213.81 1815.8,1213.81 1816.39,1213.81 1816.97,1213.81 1817.56,1213.81 1818.14,1213.81 1818.73,1213.81 1819.32,1213.81 1819.9,1213.81 1820.49,1213.81 1821.08,1213.81 1821.66,1213.81 1822.25,1213.81 1822.84,1213.81 1823.42,1213.81 1824.01,1213.81 1824.6,1213.81 1825.18,1213.81 1825.77,1213.81 1826.35,1213.81 1826.94,1213.81 1827.53,1213.81 1828.11,1213.81 1828.7,1213.81 1829.29,1213.81 1829.87,1213.81 1830.46,1213.81 1831.05,1213.81 1831.63,1213.81 1832.22,1213.81 1832.81,1213.81 1833.39,1213.81 1833.98,1213.81 1834.56,1213.81 1835.15,1213.81 1835.74,1213.81 1836.32,1213.81 1836.91,1213.81 1837.5,1213.81 1838.08,1213.81 1838.67,1213.81 1839.26,1213.81 1839.84,1213.81 1840.43,1213.81 1841.01,1213.81 1841.6,1213.81 1842.19,1213.81 1842.77,1213.81 1843.36,1213.81 1843.95,1213.81 1844.53,1213.81 1845.12,1213.81 1845.71,1213.81 1846.29,1213.81 1846.88,1213.81 1847.47,1213.81 1848.05,1213.81 1848.64,1213.81 1849.22,1213.81 1849.81,1213.81 1850.4,1213.81 1850.98,1213.81 1851.57,1213.81 1852.16,1213.81 1852.74,1213.81 1853.33,1213.81 1853.92,1213.81 1854.5,1213.81 1855.09,1213.81 1855.68,1213.81 1856.26,1213.81 1856.85,1213.81 1857.43,1213.81 1858.02,1213.81 1858.61,1213.81 1859.19,1213.81 1859.78,1213.81 1860.37,1213.81 1860.95,1213.81 1861.54,1213.81 1862.13,1213.81 1862.71,1213.81 1863.3,1213.81 1863.88,1213.81 1864.47,1213.81 1865.06,1213.81 1865.64,1213.81 1866.23,1213.81 1866.82,1213.81 1867.4,1213.81 1867.99,1213.81 1868.58,1213.81 1869.16,1213.81 1869.75,1213.81 1870.34,1213.81 1870.92,1213.81 1871.51,1213.81 1872.09,1213.81 1872.68,1213.81 1873.27,1213.81 1873.85,1213.81 1874.44,1213.81 1875.03,1213.81 1875.61,1213.81 1876.2,1213.81 1876.79,1213.81 1877.37,1213.81 1877.96,1213.81 1878.55,1213.81 1879.13,1213.81 1879.72,1213.81 1880.3,1213.81 1880.89,1213.81 1881.48,1213.81 1882.06,1213.81 1882.65,1213.81 1883.24,1213.81 1883.82,1213.81 1884.41,1213.81 1885,1213.81 1885.58,1213.81 1886.17,1213.81 1886.76,1213.81 1887.34,1213.81 1887.93,1213.81 1888.51,1213.81 1889.1,1213.81 1889.69,1213.81 1890.27,1213.81 1890.86,1213.81 1891.45,1213.81 1892.03,1213.81 1892.62,1213.81 1893.21,1213.81 1893.79,1213.81 1894.38,1213.81 1894.96,1213.81 1895.55,1213.81 1896.14,1213.81 1896.72,1213.81 1897.31,1213.81 1897.9,1213.81 1898.48,1213.81 1899.07,1213.81 1899.66,1213.81 1900.24,1213.81 1900.83,1213.81 1901.42,1213.81 1902,1213.81 1902.59,1213.81 1903.17,1213.81 1903.76,1213.81 1904.35,1213.81 1904.93,1213.81 1905.52,1213.81 1906.11,1213.81 1906.69,1213.81 1907.28,1213.81 1907.87,1213.81 1908.45,1213.81 1909.04,1213.81 1909.63,1213.81 1910.21,1213.81 1910.8,1213.81 1911.38,1213.81 1911.97,1213.81 1912.56,1213.81 1913.14,1213.81 1913.73,1213.81 1914.32,1213.81 1914.9,1213.81 1915.49,1213.81 1916.08,1213.81 1916.66,1213.81 1917.25,1213.81 1917.83,1213.81 1918.42,1213.81 1919.01,1213.81 1919.59,1213.81 1920.18,1213.81 1920.77,1213.81 1921.35,1213.81 1921.94,1213.81 1922.53,1213.81 1923.11,1213.81 1923.7,1213.81 1924.29,1213.81 1924.87,1213.81 1925.46,1213.81 1926.04,1213.81 1926.63,1213.81 1927.22,1213.81 1927.8,1213.81 1928.39,1213.81 1928.98,1213.81 1929.56,1213.81 1930.15,1213.81 1930.74,1213.81 1931.32,1213.81 1931.91,1213.81 1932.5,1213.81 1933.08,1213.81 1933.67,1213.81 1934.25,1213.81 1934.84,1213.81 1935.43,1213.81 1936.01,1213.81 1936.6,1213.81 1937.19,1213.81 1937.77,1213.81 1938.36,1213.81 1938.95,1213.81 1939.53,1213.81 1940.12,1213.81 1940.71,1213.81 1941.29,1213.81 1941.88,1213.81 1942.46,1213.81 1943.05,1213.81 1943.64,1213.81 1944.22,1213.81 1944.81,1213.81 1945.4,1213.81 1945.98,1213.81 1946.57,1213.81 1947.16,1213.81 1947.74,1213.81 1948.33,1213.81 1948.91,1213.81 1949.5,1213.81 1950.09,1213.81 1950.67,1213.81 1951.26,1213.81 1951.85,1213.81 1952.43,1213.81 1953.02,1213.81 1953.61,1213.81 1954.19,1213.81 1954.78,1213.81 1955.37,1213.81 1955.95,1213.81 1956.54,1213.81 1957.12,1213.81 1957.71,1213.81 1958.3,1213.81 1958.88,1213.81 1959.47,1213.81 1960.06,1213.81 1960.64,1213.81 1961.23,1213.81 1961.82,1213.81 1962.4,1213.81 1962.99,1213.81 1963.58,1213.81 1964.16,1213.81 1964.75,1213.81 1965.33,1213.81 1965.92,1213.81 1966.51,1213.81 1967.09,1213.81 1967.68,1213.81 1968.27,1213.81 1968.85,1213.81 1969.44,1213.81 1970.03,1213.81 1970.61,1213.81 1971.2,1213.81 1971.78,1213.81 1972.37,1213.81 1972.96,1213.81 1973.54,1213.81 1974.13,1213.81 1974.72,1213.81 1975.3,1213.81 1975.89,1213.81 1976.48,1213.81 1977.06,1213.81 1977.65,1213.81 1978.24,1213.81 1978.82,1213.81 1979.41,1213.81 1979.99,1213.81 1980.58,1213.81 1981.17,1213.81 1981.75,1213.81 1982.34,1213.81 1982.93,1213.81 1983.51,1213.81 1984.1,1213.81 1984.69,1213.81 1985.27,1213.81 1985.86,1213.81 1986.45,1213.81 1987.03,1213.81 1987.62,1213.81 1988.2,1213.81 1988.79,1213.81 1989.38,1213.81 1989.96,1213.81 1990.55,1213.81 1991.14,1213.81 1991.72,1213.81 1992.31,1213.81 1992.9,1213.81 1993.48,1213.81 1994.07,1213.81 1994.65,1213.81 1995.24,1213.81 1995.83,1213.81 1996.41,1213.81 1997,1213.81 1997.59,1213.81 1998.17,1213.81 1998.76,1213.81 1999.35,1213.81 1999.93,1213.81 2000.52,1213.81 2001.11,1213.81 2001.69,1213.81 2002.28,1213.81 2002.86,1213.81 2003.45,1213.81 2004.04,1213.81 2004.62,1213.81 2005.21,1213.81 2005.8,1213.81 2006.38,1213.81 2006.97,1213.81 2007.56,1213.81 2008.14,1213.81 2008.73,1213.81 2009.32,1213.81 2009.9,1213.81 2010.49,1213.81 2011.07,1213.81 2011.66,1213.81 2012.25,1213.81 2012.83,1213.81 2013.42,1213.81 2014.01,1213.81 2014.59,1213.81 2015.18,1213.81 2015.77,1213.81 2016.35,1213.81 2016.94,1213.81 2017.53,1213.81 2018.11,1213.81 2018.7,1213.81 2019.28,1213.81 2019.87,1213.81 2020.46,1213.81 2021.04,1213.81 2021.63,1213.81 2022.22,1213.81 2022.8,1213.81 2023.39,1213.81 2023.98,1213.81 2024.56,1213.81 2025.15,1213.81 2025.73,1213.81 2026.32,1213.81 2026.91,1213.81 2027.49,1213.81 2028.08,1213.81 2028.67,1213.81 2029.25,1213.81 2029.84,1213.81 2030.43,1213.81 2031.01,1213.81 2031.6,1213.81 2032.19,1213.81 2032.77,1213.81 2033.36,1213.81 2033.94,1213.81 2034.53,1213.81 2035.12,1213.81 2035.7,1213.81 2036.29,1213.81 2036.88,1213.81 2037.46,1213.81 2038.05,1213.81 2038.64,1213.81 2039.22,1213.81 2039.81,1213.81 2040.4,1213.81 2040.98,1213.81 2041.57,1213.81 2042.15,1213.81 2042.74,1213.81 2043.33,1213.81 2043.91,1213.81 2044.5,1213.81 2045.09,1213.81 2045.67,1213.81 2046.26,1213.81 2046.85,1213.81 2047.43,1213.81 2048.02,1213.81 2048.6,1213.81 2049.19,1213.81 2049.78,1213.81 2050.36,1213.81 2050.95,1213.81 2051.54,1213.81 2052.12,1213.81 2052.71,1213.81 2053.3,1213.81 2053.88,1213.81 2054.47,1213.81 2055.06,1213.81 2055.64,1213.81 2056.23,1213.81 2056.81,1213.81 2057.4,1213.81 2057.99,1213.81 2058.57,1213.81 2059.16,1213.81 2059.75,1213.81 2060.33,1213.81 2060.92,1213.81 2061.51,1213.81 2062.09,1213.81 2062.68,1213.81 2063.27,1213.81 2063.85,1213.81 2064.44,1213.81 2065.02,1213.81 2065.61,1213.81 2066.2,1213.81 2066.78,1213.81 2067.37,1213.81 2067.96,1213.81 2068.54,1213.81 2069.13,1213.81 2069.72,1213.81 2070.3,1213.81 2070.89,1213.81 2071.48,1213.81 2072.06,1213.81 2072.65,1213.81 2073.23,1213.81 2073.82,1213.81 2074.41,1213.81 2074.99,1213.81 2075.58,1213.81 2076.17,1213.81 2076.75,1213.81 2077.34,1213.81 2077.93,1213.81 2078.51,1213.81 2079.1,1213.81 2079.68,1213.81 2080.27,1213.81 2080.86,1213.81 2081.44,1213.81 2082.03,1213.81 2082.62,1213.81 2083.2,1213.81 2083.79,1213.81 2084.38,1213.81 2084.96,1213.81 2085.55,1213.81 2086.14,1213.81 2086.72,1213.81 2087.31,1213.81 2087.89,1213.81 2088.48,1213.81 2089.07,1213.81 2089.65,1213.81 2090.24,1213.81 2090.83,1213.81 2091.41,1213.81 2092,1213.81 2092.59,1213.81 2093.17,1213.81 2093.76,1213.81 2094.35,1213.81 2094.93,1213.81 2095.52,1213.81 2096.1,1213.81 2096.69,1213.81 2097.28,1213.81 2097.86,1213.81 2098.45,1213.81 2099.04,1213.81 2099.62,1213.81 2100.21,1213.81 2100.8,1213.81 2101.38,1213.81 2101.97,1213.81 2102.55,1213.81 2103.14,1213.81 2103.73,1213.81 2104.31,1213.81 2104.9,1213.81 2105.49,1213.81 2106.07,1213.81 2106.66,1213.81 2107.25,1213.81 2107.83,1213.81 2108.42,1213.81 2109.01,1213.81 2109.59,1213.81 2110.18,1213.81 2110.76,1213.81 2111.35,1213.81 2111.94,1213.81 2112.52,1213.81 2113.11,1213.81 2113.7,1213.81 2114.28,1213.81 2114.87,1213.81 2115.46,1213.81 2116.04,1213.81 2116.63,1213.81 2117.22,1213.81 2117.8,1213.81 2118.39,1213.81 2118.97,1213.81 2119.56,1213.81 2120.15,1213.81 2120.73,1213.81 2121.32,1213.81 2121.91,1213.81 2122.49,1213.81 2123.08,1213.81 2123.67,1213.81 2124.25,1213.81 2124.84,1213.81 2125.42,1213.81 2126.01,1213.81 2126.6,1213.81 2127.18,1213.81 2127.77,1213.81 2128.36,1213.81 2128.94,1213.81 2129.53,1213.81 2130.12,1213.81 2130.7,1213.81 2131.29,1213.81 2131.88,1213.81 2132.46,1213.81 2133.05,1213.81 2133.63,1213.81 2134.22,1213.81 2134.81,1213.81 2135.39,1213.81 2135.98,1213.81 2136.57,1213.81 2137.15,1213.81 2137.74,1213.81 2138.33,1213.81 2138.91,1213.81 2139.5,1213.81 2140.09,1213.81 2140.67,1213.81 2141.26,1213.81 2141.84,1213.81 2142.43,1213.81 2143.02,1213.81 2143.6,1213.81 2144.19,1213.81 2144.78,1213.81 2145.36,1213.81 2145.95,1213.81 2146.54,1213.81 2147.12,1213.81 2147.71,1213.81 2148.3,1213.81 2148.88,1213.81 2149.47,1213.81 2150.05,1213.81 2150.64,1213.81 2151.23,1213.81 2151.81,1213.81 2152.4,1213.81 2152.99,1213.81 2153.57,1213.81 2154.16,1213.81 2154.75,1213.81 2155.33,1213.81 2155.92,1213.81 2156.5,1213.81 2157.09,1213.81 2157.68,1213.81 2158.26,1213.81 \"/>\n<path clip-path=\"url(#clip942)\" d=\"M986.025 1213.6 L986.612 1213.6 L987.198 1213.6 L987.785 1213.6 L988.371 1213.6 L988.957 1213.6 L989.544 1213.6 L990.13 1213.6 L990.717 1213.6 L991.303 1213.6 L991.889 1213.6 L992.476 1213.6 L993.062 1213.6 L993.649 1213.6 L994.235 1213.6 L994.822 1213.6 L995.408 1213.6 L995.994 1213.6 L996.581 1213.6 L997.167 1213.6 L997.754 1213.6 L998.34 1213.6 L998.926 1213.6 L999.513 1213.6 L1000.1 1213.6 L1000.69 1213.6 L1001.27 1213.6 L1001.86 1213.6 L1002.44 1213.6 L1003.03 1213.6 L1003.62 1213.6 L1004.2 1213.6 L1004.79 1213.6 L1005.38 1213.6 L1005.96 1213.6 L1006.55 1213.6 L1007.14 1213.6 L1007.72 1213.6 L1008.31 1213.6 L1008.9 1213.6 L1009.48 1213.6 L1010.07 1213.6 L1010.65 1213.6 L1011.24 1213.6 L1011.83 1213.6 L1012.41 1213.6 L1013 1213.6 L1013.59 1213.6 L1014.17 1213.6 L1014.76 1213.6 L1015.35 1213.6 L1015.93 1213.6 L1016.52 1213.6 L1017.11 1213.6 L1017.69 1213.6 L1018.28 1213.6 L1018.86 1213.6 L1019.45 1213.6 L1020.04 1213.6 L1020.62 1213.6 L1021.21 1213.6 L1021.8 1213.6 L1022.38 1213.6 L1022.97 1213.6 L1023.56 1213.6 L1024.14 1213.6 L1024.73 1213.6 L1025.32 1213.6 L1025.9 1213.6 L1026.49 1213.6 L1027.07 1213.6 L1027.66 1213.6 L1028.25 1213.6 L1028.83 1213.6 L1029.42 1213.6 L1030.01 1213.6 L1030.59 1213.6 L1031.18 1213.6 L1031.77 1213.6 L1032.35 1213.6 L1032.94 1213.6 L1033.52 1213.6 L1034.11 1213.6 L1034.7 1213.6 L1035.28 1213.6 L1035.87 1213.6 L1036.46 1213.6 L1037.04 1213.6 L1037.63 1213.6 L1038.22 1213.6 L1038.8 1213.6 L1039.39 1213.6 L1039.98 1213.6 L1040.56 1213.6 L1041.15 1213.6 L1041.73 1213.6 L1042.32 1213.6 L1042.91 1213.6 L1043.49 1213.6 L1044.08 1213.6 L1044.67 1213.6 L1045.25 1213.6 L1045.84 1213.6 L1046.43 1213.6 L1047.01 1213.6 L1047.6 1213.6 L1048.19 1213.6 L1048.77 1213.6 L1049.36 1213.6 L1049.94 1213.6 L1050.53 1213.6 L1051.12 1213.6 L1051.7 1213.6 L1052.29 1213.6 L1052.88 1213.6 L1053.46 1213.6 L1054.05 1213.6 L1054.64 1213.6 L1055.22 1213.6 L1055.81 1213.6 L1056.39 1213.6 L1056.98 1213.6 L1057.57 1213.6 L1058.15 1213.6 L1058.74 1213.6 L1059.33 1213.6 L1059.91 1213.6 L1060.5 1213.6 L1061.09 1213.6 L1061.67 1213.6 L1062.26 1213.6 L1062.85 1213.6 L1063.43 1213.6 L1064.02 1213.6 L1064.6 1213.6 L1065.19 1213.6 L1065.78 1213.6 L1066.36 1213.6 L1066.95 1213.6 L1067.54 1213.6 L1068.12 1213.6 L1068.71 1213.6 L1069.3 1213.6 L1069.88 1213.6 L1070.47 1213.6 L1071.06 1213.6 L1071.64 1213.6 L1072.23 1213.6 L1072.81 1213.6 L1073.4 1213.6 L1073.99 1213.6 L1074.57 1213.6 L1075.16 1213.6 L1075.75 1213.6 L1076.33 1213.6 L1076.92 1213.6 L1077.51 1213.6 L1078.09 1213.6 L1078.68 1213.6 L1079.26 1213.6 L1079.85 1213.6 L1080.44 1213.6 L1081.02 1213.6 L1081.61 1213.6 L1082.2 1213.6 L1082.78 1213.6 L1083.37 1213.6 L1083.96 1213.6 L1084.54 1213.6 L1085.13 1213.6 L1085.72 1213.6 L1086.3 1213.6 L1086.89 1213.6 L1087.47 1213.6 L1088.06 1213.6 L1088.65 1213.6 L1089.23 1213.6 L1089.82 1213.6 L1090.41 1213.6 L1090.99 1213.6 L1091.58 1213.6 L1092.17 1213.6 L1092.75 1213.6 L1093.34 1213.6 L1093.93 1213.6 L1094.51 1213.6 L1095.1 1213.6 L1095.68 1213.6 L1096.27 1213.6 L1096.86 1213.6 L1097.44 1213.6 L1098.03 1213.6 L1098.62 1213.6 L1099.2 1213.6 L1099.79 1213.6 L1100.38 1213.6 L1100.96 1213.6 L1101.55 1213.6 L1102.14 1213.6 L1102.72 1213.6 L1103.31 1213.6 L1103.89 1213.6 L1104.48 1213.6 L1105.07 1213.6 L1105.65 1213.6 L1106.24 1213.6 L1106.83 1213.6 L1107.41 1213.6 L1108 1213.6 L1108.59 1213.6 L1109.17 1213.6 L1109.76 1213.6 L1110.34 1213.6 L1110.93 1213.6 L1111.52 1213.6 L1112.1 1213.6 L1112.69 1213.6 L1113.28 1213.6 L1113.86 1213.6 L1114.45 1213.6 L1115.04 1213.6 L1115.62 1213.6 L1116.21 1213.6 L1116.8 1213.6 L1117.38 1213.6 L1117.97 1213.6 L1118.55 1213.6 L1119.14 1213.6 L1119.73 1213.6 L1120.31 1213.6 L1120.9 1213.6 L1121.49 1213.6 L1122.07 1213.6 L1122.66 1213.6 L1123.25 1213.6 L1123.83 1213.6 L1124.42 1213.6 L1125.01 1213.6 L1125.59 1213.6 L1126.18 1213.6 L1126.76 1213.6 L1127.35 1213.6 L1127.94 1213.6 L1128.52 1213.6 L1129.11 1213.6 L1129.7 1213.6 L1130.28 1213.6 L1130.87 1213.6 L1131.46 1213.6 L1132.04 1213.6 L1132.63 1213.6 L1133.21 1213.6 L1133.8 1213.6 L1134.39 1213.6 L1134.97 1213.6 L1135.56 1213.6 L1136.15 1213.6 L1136.73 1213.6 L1137.32 1213.6 L1137.91 1213.6 L1138.49 1213.6 L1139.08 1213.6 L1139.67 1213.6 L1140.25 1213.6 L1140.84 1213.6 L1141.42 1213.6 L1142.01 1213.6 L1142.6 1213.6 L1143.18 1213.6 L1143.77 1213.6 L1144.36 1213.6 L1144.94 1213.6 L1145.53 1213.6 L1146.12 1213.6 L1146.7 1213.6 L1147.29 1213.6 L1147.88 1213.6 L1148.46 1213.6 L1149.05 1213.6 L1149.63 1213.6 L1150.22 1213.6 L1150.81 1213.6 L1151.39 1213.6 L1151.98 1213.6 L1152.57 1213.6 L1153.15 1213.6 L1153.74 1213.6 L1154.33 1213.6 L1154.91 1213.6 L1155.5 1213.6 L1156.09 1213.6 L1156.67 1213.6 L1157.26 1213.6 L1157.84 1213.6 L1158.43 1213.6 L1159.02 1213.6 L1159.6 1213.6 L1160.19 1213.6 L1160.78 1213.6 L1161.36 1213.6 L1161.95 1213.6 L1162.54 1213.6 L1163.12 1213.6 L1163.71 1213.6 L1164.29 1213.6 L1164.88 1213.6 L1165.47 1213.6 L1166.05 1213.6 L1166.64 1213.6 L1167.23 1213.6 L1167.81 1213.6 L1168.4 1213.6 L1168.99 1213.6 L1169.57 1213.6 L1170.16 1213.6 L1170.75 1213.6 L1171.33 1213.6 L1171.92 1213.6 L1172.5 1213.6 L1173.09 1213.6 L1173.68 1213.6 L1174.26 1213.6 L1174.85 1213.6 L1175.44 1213.6 L1176.02 1213.6 L1176.61 1213.6 L1177.2 1213.6 L1177.78 1213.6 L1178.37 1213.6 L1178.96 1213.6 L1179.54 1213.6 L1180.13 1213.6 L1180.71 1213.6 L1181.3 1213.6 L1181.89 1213.6 L1182.47 1213.6 L1183.06 1213.6 L1183.65 1213.6 L1184.23 1213.6 L1184.82 1213.6 L1185.41 1213.6 L1185.99 1213.6 L1186.58 1213.6 L1187.16 1213.6 L1187.75 1213.6 L1188.34 1213.6 L1188.92 1213.6 L1189.51 1213.6 L1190.1 1213.6 L1190.68 1213.6 L1191.27 1213.6 L1191.86 1213.6 L1192.44 1213.6 L1193.03 1213.6 L1193.62 1213.6 L1194.2 1213.6 L1194.79 1213.6 L1195.37 1213.6 L1195.96 1213.6 L1196.55 1213.6 L1197.13 1213.6 L1197.72 1213.6 L1198.31 1213.6 L1198.89 1213.6 L1199.48 1213.6 L1200.07 1213.6 L1200.65 1213.6 L1201.24 1213.6 L1201.83 1213.6 L1202.41 1213.6 L1203 1213.6 L1203.58 1213.6 L1204.17 1213.6 L1204.76 1213.6 L1205.34 1213.6 L1205.93 1213.6 L1206.52 1213.6 L1207.1 1213.6 L1207.69 1213.6 L1208.28 1213.6 L1208.86 1213.6 L1209.45 1213.6 L1210.03 1213.6 L1210.62 1213.6 L1211.21 1213.6 L1211.79 1213.6 L1212.38 1213.6 L1212.97 1213.6 L1213.55 1213.6 L1214.14 1213.6 L1214.73 1213.6 L1215.31 1213.6 L1215.9 1213.6 L1216.49 1213.6 L1217.07 1213.6 L1217.66 1213.6 L1218.24 1213.6 L1218.83 1213.6 L1219.42 1213.6 L1220 1213.6 L1220.59 1213.6 L1221.18 1213.6 L1221.76 1213.6 L1222.35 1213.6 L1222.94 1213.6 L1223.52 1213.6 L1224.11 1213.6 L1224.7 1213.6 L1225.28 1213.6 L1225.87 1213.6 L1226.45 1213.6 L1227.04 1213.6 L1227.63 1213.6 L1228.21 1213.6 L1228.8 1213.6 L1229.39 1213.6 L1229.97 1213.6 L1230.56 1213.6 L1231.15 1213.6 L1231.73 1213.6 L1232.32 1213.6 L1232.91 1213.6 L1233.49 1213.6 L1234.08 1213.6 L1234.66 1213.6 L1235.25 1213.6 L1235.84 1213.6 L1236.42 1213.6 L1237.01 1213.6 L1237.6 1213.6 L1238.18 1213.6 L1238.77 1213.6 L1239.36 1213.6 L1239.94 1213.6 L1240.53 1213.6 L1241.11 1213.6 L1241.7 1213.6 L1242.29 1213.6 L1242.87 1213.6 L1243.46 1213.6 L1244.05 1213.6 L1244.63 1213.6 L1245.22 1213.6 L1245.81 1213.6 L1246.39 1213.6 L1246.98 1213.6 L1247.57 1213.6 L1248.15 1213.6 L1248.74 1213.6 L1249.32 1213.6 L1249.91 1213.6 L1250.5 1213.6 L1251.08 1213.6 L1251.67 1213.6 L1252.26 1213.6 L1252.84 1213.6 L1253.43 1213.6 L1254.02 1213.6 L1254.6 1213.6 L1255.19 1213.6 L1255.78 1213.6 L1256.36 1213.6 L1256.95 1213.6 L1257.53 1213.6 L1258.12 1213.6 L1258.71 1213.6 L1259.29 1213.6 L1259.88 1213.6 L1260.47 1213.6 L1261.05 1213.6 L1261.64 1213.6 L1262.23 1213.6 L1262.81 1213.6 L1263.4 1213.6 L1263.98 1213.6 L1264.57 1213.6 L1265.16 1213.6 L1265.74 1213.6 L1266.33 1213.6 L1266.92 1213.6 L1267.5 1213.6 L1268.09 1213.6 L1268.68 1213.6 L1269.26 1213.6 L1269.85 1213.6 L1270.44 1213.6 L1271.02 1213.6 L1271.61 1213.6 L1272.19 1213.6 L1272.78 1213.6 L1273.37 1213.6 L1273.95 1213.6 L1274.54 1213.6 L1275.13 1213.6 L1275.71 1213.6 L1276.3 1213.6 L1276.89 1213.6 L1277.47 1213.6 L1278.06 1213.6 L1278.65 1213.6 L1279.23 1213.6 L1279.82 1213.6 L1280.4 1213.6 L1280.99 1213.6 L1281.58 1213.6 L1282.16 1213.6 L1282.75 1213.6 L1283.34 1213.6 L1283.92 1213.6 L1284.51 1213.6 L1285.1 1213.6 L1285.68 1213.6 L1286.27 1213.6 L1286.86 1213.6 L1287.44 1213.6 L1288.03 1213.6 L1288.61 1213.6 L1289.2 1213.6 L1289.79 1213.6 L1290.37 1213.6 L1290.96 1213.6 L1291.55 1213.6 L1292.13 1213.6 L1292.72 1213.6 L1293.31 1213.6 L1293.89 1213.6 L1294.48 1213.6 L1295.06 1213.6 L1295.65 1213.6 L1296.24 1213.6 L1296.82 1213.6 L1297.41 1213.6 L1298 1213.6 L1298.58 1213.6 L1299.17 1213.6 L1299.76 1213.6 L1300.34 1213.6 L1300.93 1213.6 L1301.52 1213.6 L1302.1 1213.6 L1302.69 1213.6 L1303.27 1213.6 L1303.86 1213.6 L1304.45 1213.6 L1305.03 1213.6 L1305.62 1213.6 L1306.21 1213.6 L1306.79 1213.6 L1307.38 1213.6 L1307.97 1213.6 L1308.55 1213.6 L1309.14 1213.6 L1309.73 1213.6 L1310.31 1213.6 L1310.9 1213.6 L1311.48 1213.6 L1312.07 1213.6 L1312.66 1213.6 L1313.24 1213.6 L1313.83 1213.6 L1314.42 1213.6 L1315 1213.6 L1315.59 1213.6 L1316.18 1213.6 L1316.76 1213.6 L1317.35 1213.6 L1317.93 1213.6 L1318.52 1213.6 L1319.11 1213.6 L1319.69 1213.6 L1320.28 1213.6 L1320.87 1213.6 L1321.45 1213.6 L1322.04 1213.6 L1322.63 1213.6 L1323.21 1213.6 L1323.8 1213.6 L1324.39 1213.6 L1324.97 1213.6 L1325.56 1213.6 L1326.14 1213.6 L1326.73 1213.6 L1327.32 1213.6 L1327.9 1213.6 L1328.49 1213.6 L1329.08 1213.6 L1329.66 1213.6 L1330.25 1213.6 L1330.84 1213.6 L1331.42 1213.6 L1332.01 1213.6 L1332.6 1213.6 L1333.18 1213.6 L1333.77 1213.6 L1334.35 1213.6 L1334.94 1213.6 L1335.53 1213.6 L1336.11 1213.6 L1336.7 1213.6 L1337.29 1213.6 L1337.87 1213.6 L1338.46 1213.6 L1339.05 1213.6 L1339.63 1213.6 L1340.22 1213.6 L1340.8 1213.6 L1341.39 1213.6 L1341.98 1213.6 L1342.56 1213.6 L1343.15 1213.6 L1343.74 1213.6 L1344.32 1213.6 L1344.91 1213.6 L1345.5 1213.6 L1346.08 1213.6 L1346.67 1213.6 L1347.26 1213.6 L1347.84 1213.6 L1348.43 1213.6 L1349.01 1213.6 L1349.6 1213.6 L1350.19 1213.6 L1350.77 1213.6 L1351.36 1213.6 L1351.95 1213.6 L1352.53 1213.6 L1353.12 1213.6 L1353.71 1213.6 L1354.29 1213.6 L1354.88 1213.6 L1355.47 1213.6 L1356.05 1213.6 L1356.64 1213.6 L1357.22 1213.6 L1357.81 1213.6 L1358.4 1213.6 L1358.98 1213.6 L1359.57 1213.6 L1360.16 1213.6 L1360.74 1213.6 L1361.33 1213.6 L1361.92 1213.6 L1362.5 1213.6 L1363.09 1213.6 L1363.68 1213.6 L1364.26 1213.6 L1364.85 1213.6 L1365.43 1213.6 L1366.02 1213.6 L1366.61 1213.6 L1367.19 1213.6 L1367.78 1213.6 L1368.37 1213.6 L1368.95 1213.6 L1369.54 1213.6 L1370.13 1213.6 L1370.71 1213.6 L1371.3 1213.6 L1371.88 1213.6 L1372.47 1213.6 L1373.06 1213.6 L1373.64 1213.6 L1374.23 1213.6 L1374.82 1213.6 L1375.4 1213.6 L1375.99 1213.6 L1376.58 1213.6 L1377.16 1213.6 L1377.75 1213.6 L1378.34 1213.6 L1378.92 1213.6 L1379.51 1213.6 L1380.09 1213.6 L1380.68 1213.6 L1381.27 1213.6 L1381.85 1213.6 L1382.44 1213.6 L1383.03 1213.6 L1383.61 1213.6 L1384.2 1213.6 L1384.79 1213.6 L1385.37 1213.6 L1385.96 1213.6 L1386.55 1213.6 L1387.13 1213.6 L1387.72 1213.6 L1388.3 1213.6 L1388.89 1213.6 L1389.48 1213.6 L1390.06 1213.6 L1390.65 1213.6 L1391.24 1213.6 L1391.82 1213.6 L1392.41 1213.6 L1393 1213.6 L1393.58 1213.6 L1394.17 1213.6 L1394.75 1213.6 L1395.34 1213.6 L1395.93 1213.6 L1396.51 1213.6 L1397.1 1213.6 L1397.69 1213.6 L1398.27 1213.6 L1398.86 1213.6 L1399.45 1213.6 L1400.03 1213.6 L1400.62 1213.6 L1401.21 1213.6 L1401.79 1213.6 L1402.38 1213.6 L1402.96 1213.6 L1403.55 1213.6 L1404.14 1213.6 L1404.72 1213.6 L1405.31 1213.6 L1405.9 1213.6 L1406.48 1213.6 L1407.07 1213.6 L1407.66 1213.6 L1408.24 1213.6 L1408.83 1213.6 L1409.42 1213.6 L1410 1213.6 L1410.59 1213.6 L1411.17 1213.6 L1411.76 1213.6 L1412.35 1213.6 L1412.93 1213.6 L1413.52 1213.6 L1414.11 1213.6 L1414.69 1213.6 L1415.28 1213.6 L1415.87 1213.6 L1416.45 1213.6 L1417.04 1213.6 L1417.63 1213.6 L1418.21 1213.6 L1418.8 1213.6 L1419.38 1213.6 L1419.97 1213.6 L1420.56 1213.6 L1421.14 1213.6 L1421.73 1213.6 L1422.32 1213.6 L1422.9 1213.6 L1423.49 1213.6 L1424.08 1213.6 L1424.66 1213.6 L1425.25 1213.6 L1425.83 1213.6 L1426.42 1213.6 L1427.01 1213.6 L1427.59 1213.6 L1428.18 1213.6 L1428.77 1213.6 L1429.35 1213.6 L1429.94 1213.6 L1430.53 1213.6 L1431.11 1213.6 L1431.7 1213.6 L1432.29 1213.6 L1432.87 1213.6 L1433.46 1213.6 L1434.04 1213.6 L1434.63 1213.6 L1435.22 1213.6 L1435.8 1213.6 L1436.39 1213.6 L1436.98 1213.6 L1437.56 1213.6 L1438.15 1213.6 L1438.74 1213.6 L1439.32 1213.6 L1439.91 1213.6 L1440.5 1213.6 L1441.08 1213.6 L1441.67 1213.6 L1442.25 1213.6 L1442.84 1213.6 L1443.43 1213.6 L1444.01 1213.6 L1444.6 1213.6 L1445.19 1213.6 L1445.77 1213.6 L1446.36 1213.6 L1446.95 1213.6 L1447.53 1213.6 L1448.12 1213.6 L1448.7 1213.6 L1449.29 1213.6 L1449.88 1213.6 L1450.46 1213.6 L1451.05 1213.6 L1451.64 1213.6 L1452.22 1213.6 L1452.81 1213.6 L1453.4 1213.6 L1453.98 1213.6 L1454.57 1213.6 L1455.16 1213.6 L1455.74 1213.6 L1456.33 1213.6 L1456.91 1213.6 L1457.5 1213.6 L1458.09 1213.6 L1458.67 1213.6 L1459.26 1213.6 L1459.85 1213.6 L1460.43 1213.6 L1461.02 1213.6 L1461.61 1213.6 L1462.19 1213.6 L1462.78 1213.6 L1463.37 1213.6 L1463.95 1213.6 L1464.54 1213.6 L1465.12 1213.6 L1465.71 1213.6 L1466.3 1213.6 L1466.88 1213.6 L1467.47 1213.6 L1468.06 1213.6 L1468.64 1213.6 L1469.23 1213.6 L1469.82 1213.6 L1470.4 1213.6 L1470.99 1213.6 L1471.57 1213.6 L1472.16 1213.6 L1472.75 1213.6 L1473.33 1213.6 L1473.92 1213.6 L1474.51 1213.6 L1475.09 1213.6 L1475.68 1213.6 L1476.27 1213.6 L1476.85 1213.6 L1477.44 1213.6 L1478.03 1213.6 L1478.61 1213.6 L1479.2 1213.6 L1479.78 1213.6 L1480.37 1213.6 L1480.96 1213.6 L1481.54 1213.6 L1482.13 1213.6 L1482.72 1213.6 L1483.3 1213.6 L1483.89 1213.6 L1484.48 1213.6 L1485.06 1213.6 L1485.65 1213.6 L1486.24 1213.6 L1486.82 1213.6 L1487.41 1213.6 L1487.99 1213.6 L1488.58 1213.6 L1489.17 1213.6 L1489.75 1213.6 L1490.34 1213.6 L1490.93 1213.6 L1491.51 1213.6 L1492.1 1213.6 L1492.69 1213.6 L1493.27 1213.6 L1493.86 1213.6 L1494.45 1213.6 L1495.03 1213.6 L1495.62 1213.6 L1496.2 1213.6 L1496.79 1213.6 L1497.38 1213.6 L1497.96 1213.6 L1498.55 1213.6 L1499.14 1213.6 L1499.72 1213.6 L1500.31 1213.6 L1500.9 1213.6 L1501.48 1213.6 L1502.07 1213.6 L1502.65 1213.6 L1503.24 1213.6 L1503.83 1213.6 L1504.41 1213.6 L1505 1213.6 L1505.59 1213.6 L1506.17 1213.6 L1506.76 1213.6 L1507.35 1213.6 L1507.93 1213.6 L1508.52 1213.6 L1509.11 1213.6 L1509.69 1213.6 L1510.28 1213.6 L1510.86 1213.6 L1511.45 1213.6 L1512.04 1213.6 L1512.62 1213.6 L1513.21 1213.6 L1513.8 1213.6 L1514.38 1213.6 L1514.97 1213.6 L1515.56 1213.6 L1516.14 1213.6 L1516.73 1213.6 L1517.32 1213.6 L1517.9 1213.6 L1518.49 1213.6 L1519.07 1213.6 L1519.66 1213.6 L1520.25 1213.6 L1520.83 1213.6 L1521.42 1213.6 L1522.01 1213.6 L1522.59 1213.6 L1523.18 1213.6 L1523.77 1213.6 L1524.35 1213.6 L1524.94 1213.6 L1525.52 1213.6 L1526.11 1213.6 L1526.7 1213.6 L1527.28 1213.6 L1527.87 1213.6 L1528.46 1213.6 L1529.04 1213.6 L1529.63 1213.6 L1530.22 1213.6 L1530.8 1213.6 L1531.39 1213.6 L1531.98 1213.6 L1532.56 1213.6 L1533.15 1213.6 L1533.73 1213.6 L1534.32 1213.6 L1534.91 1213.6 L1535.49 1213.6 L1536.08 1213.6 L1536.67 1213.6 L1537.25 1213.6 L1537.84 1213.6 L1538.43 1213.6 L1539.01 1213.6 L1539.6 1213.6 L1540.19 1213.6 L1540.77 1213.6 L1541.36 1213.6 L1541.94 1213.6 L1542.53 1213.6 L1543.12 1213.6 L1543.7 1213.6 L1544.29 1213.6 L1544.88 1213.6 L1545.46 1213.6 L1546.05 1213.6 L1546.64 1213.6 L1547.22 1213.6 L1547.81 1213.6 L1548.4 1213.6 L1548.98 1213.6 L1549.57 1213.6 L1550.15 1213.6 L1550.74 1213.6 L1551.33 1213.6 L1551.91 1213.6 L1552.5 1213.6 L1553.09 1213.6 L1553.67 1213.6 L1554.26 1213.6 L1554.85 1213.6 L1555.43 1213.6 L1556.02 1213.6 L1556.6 1213.6 L1557.19 1213.6 L1557.78 1213.6 L1558.36 1213.6 L1558.95 1213.6 L1559.54 1213.6 L1560.12 1213.6 L1560.71 1213.6 L1561.3 1213.6 L1561.88 1213.6 L1562.47 1213.6 L1563.06 1213.6 L1563.64 1213.6 L1564.23 1213.6 L1564.81 1213.6 L1565.4 1213.6 L1565.99 1213.6 L1566.57 1213.6 L1567.16 1213.6 L1567.75 1213.6 L1568.33 1213.6 L1568.92 1213.6 L1569.51 1213.6 L1570.09 1213.6 L1570.68 1213.6 L1571.27 1213.6 L1571.85 1213.6 L1572.44 1213.6 L1573.02 1213.6 L1573.61 1213.6 L1574.2 1213.6 L1574.78 1213.6 L1575.37 1213.6 L1575.96 1213.6 L1576.54 1213.6 L1577.13 1213.6 L1577.72 1213.6 L1578.3 1213.6 L1578.89 1213.6 L1579.47 1213.6 L1580.06 1213.6 L1580.65 1213.6 L1581.23 1213.6 L1581.82 1213.6 L1582.41 1213.6 L1582.99 1213.6 L1583.58 1213.6 L1584.17 1213.6 L1584.75 1213.6 L1585.34 1213.6 L1585.93 1213.6 L1586.51 1213.6 L1587.1 1213.6 L1587.68 1213.6 L1588.27 1213.6 L1588.86 1213.6 L1589.44 1213.6 L1590.03 1213.6 L1590.62 1213.6 L1591.2 1213.6 L1591.79 1213.6 L1592.38 1213.6 L1592.96 1213.6 L1593.55 1213.6 L1594.14 1213.6 L1594.72 1213.6 L1595.31 1213.6 L1595.89 1213.6 L1596.48 1213.6 L1597.07 1213.6 L1597.65 1213.6 L1598.24 1213.6 L1598.83 1213.6 L1599.41 1213.6 L1600 1213.6 L1600.59 1213.6 L1601.17 1213.6 L1601.76 1213.6 L1602.34 1213.6 L1602.93 1213.6 L1603.52 1213.6 L1604.1 1213.6 L1604.69 1213.6 L1605.28 1213.6 L1605.86 1213.6 L1606.45 1213.6 L1607.04 1213.6 L1607.62 1213.6 L1608.21 1213.6 L1608.8 1213.6 L1609.38 1213.6 L1609.97 1213.6 L1610.55 1213.6 L1611.14 1213.6 L1611.73 1213.6 L1612.31 1213.6 L1612.9 1213.6 L1613.49 1213.6 L1614.07 1213.6 L1614.66 1213.6 L1615.25 1213.6 L1615.83 1213.6 L1616.42 1213.6 L1617.01 1213.6 L1617.59 1213.6 L1618.18 1213.6 L1618.76 1213.6 L1619.35 1213.6 L1619.94 1213.6 L1620.52 1213.6 L1621.11 1213.6 L1621.7 1213.6 L1622.28 1213.6 L1622.87 1213.6 L1623.46 1213.6 L1624.04 1213.6 L1624.63 1213.6 L1625.22 1213.6 L1625.8 1213.6 L1626.39 1213.6 L1626.97 1213.6 L1627.56 1213.6 L1628.15 1213.6 L1628.73 1213.6 L1629.32 1213.6 L1629.91 1213.6 L1630.49 1213.6 L1631.08 1213.6 L1631.67 1213.6 L1632.25 1213.6 L1632.84 1213.6 L1633.42 1213.6 L1634.01 1213.6 L1634.6 1213.6 L1635.18 1213.6 L1635.77 1213.6 L1636.36 1213.6 L1636.94 1213.6 L1637.53 1213.6 L1638.12 1213.6 L1638.7 1213.6 L1639.29 1213.6 L1639.88 1213.6 L1640.46 1213.6 L1641.05 1213.6 L1641.63 1213.6 L1642.22 1213.6 L1642.81 1213.6 L1643.39 1213.6 L1643.98 1213.6 L1644.57 1213.6 L1645.15 1213.6 L1645.74 1213.6 L1646.33 1213.6 L1646.91 1213.6 L1647.5 1213.6 L1648.09 1213.6 L1648.67 1213.6 L1649.26 1213.6 L1649.84 1213.6 L1650.43 1213.6 L1651.02 1213.6 L1651.6 1213.6 L1652.19 1213.6 L1652.78 1213.6 L1653.36 1213.6 L1653.95 1213.6 L1654.54 1213.6 L1655.12 1213.6 L1655.71 1213.6 L1656.29 1213.6 L1656.88 1213.6 L1657.47 1213.6 L1658.05 1213.6 L1658.64 1213.6 L1659.23 1213.6 L1659.81 1213.6 L1660.4 1213.6 L1660.99 1213.6 L1661.57 1213.6 L1662.16 1213.6 L1662.75 1213.6 L1663.33 1213.6 L1663.92 1213.6 L1664.5 1213.6 L1665.09 1213.6 L1665.68 1213.6 L1666.26 1213.6 L1666.85 1213.6 L1667.44 1213.6 L1668.02 1213.6 L1668.61 1213.6 L1669.2 1213.6 L1669.78 1213.6 L1670.37 1213.6 L1670.96 1213.6 L1671.54 1213.6 L1672.13 1213.6 L1672.71 1213.6 L1673.3 1213.6 L1673.89 1213.6 L1674.47 1213.6 L1675.06 1213.6 L1675.65 1213.6 L1676.23 1213.6 L1676.82 1213.6 L1677.41 1213.6 L1677.99 1213.6 L1678.58 1213.6 L1679.17 1213.6 L1679.75 1213.6 L1680.34 1213.6 L1680.92 1213.6 L1681.51 1213.6 L1682.1 1213.6 L1682.68 1213.6 L1683.27 1213.6 L1683.86 1213.6 L1684.44 1213.6 L1685.03 1213.6 L1685.62 1213.6 L1686.2 1213.6 L1686.79 1213.6 L1687.37 1213.6 L1687.96 1213.6 L1688.55 1213.6 L1689.13 1213.6 L1689.72 1213.6 L1690.31 1213.6 L1690.89 1213.6 L1691.48 1213.6 L1692.07 1213.6 L1692.65 1213.6 L1693.24 1213.6 L1693.83 1213.6 L1694.41 1213.6 L1695 1213.6 L1695.58 1213.6 L1696.17 1213.6 L1696.76 1213.6 L1697.34 1213.6 L1697.93 1213.6 L1698.52 1213.6 L1699.1 1213.6 L1699.69 1213.6 L1700.28 1213.6 L1700.86 1213.6 L1701.45 1213.6 L1702.04 1213.6 L1702.62 1213.6 L1703.21 1213.6 L1703.79 1213.6 L1704.38 1213.6 L1704.97 1213.6 L1705.55 1213.6 L1706.14 1213.6 L1706.73 1213.6 L1707.31 1213.6 L1707.9 1213.6 L1708.49 1213.6 L1709.07 1213.6 L1709.66 1213.6 L1710.24 1213.6 L1710.83 1213.6 L1711.42 1213.6 L1712 1213.6 L1712.59 1213.6 L1713.18 1213.6 L1713.76 1213.6 L1714.35 1213.6 L1714.94 1213.6 L1715.52 1213.6 L1716.11 1213.6 L1716.7 1213.6 L1717.28 1213.6 L1717.87 1213.6 L1718.45 1213.6 L1719.04 1213.6 L1719.63 1213.6 L1720.21 1213.6 L1720.8 1213.6 L1721.39 1213.6 L1721.97 1213.6 L1722.56 1213.6 L1723.15 1213.6 L1723.73 1213.6 L1724.32 1213.6 L1724.91 1213.6 L1725.49 1213.6 L1726.08 1213.6 L1726.66 1213.6 L1727.25 1213.6 L1727.84 1213.6 L1728.42 1213.6 L1729.01 1213.6 L1729.6 1213.6 L1730.18 1213.6 L1730.77 1213.6 L1731.36 1213.6 L1731.94 1213.6 L1732.53 1213.6 L1733.11 1213.6 L1733.7 1213.6 L1734.29 1213.6 L1734.87 1213.6 L1735.46 1213.6 L1736.05 1213.6 L1736.63 1213.6 L1737.22 1213.6 L1737.81 1213.6 L1738.39 1213.6 L1738.98 1213.6 L1739.57 1213.6 L1740.15 1213.6 L1740.74 1213.6 L1741.32 1213.6 L1741.91 1213.6 L1742.5 1213.6 L1743.08 1213.6 L1743.67 1213.6 L1744.26 1213.6 L1744.84 1213.6 L1745.43 1213.6 L1746.02 1213.6 L1746.6 1213.6 L1747.19 1213.6 L1747.78 1213.6 L1748.36 1213.6 L1748.95 1213.6 L1749.53 1213.6 L1750.12 1213.6 L1750.71 1213.6 L1751.29 1213.6 L1751.88 1213.6 L1752.47 1213.6 L1753.05 1213.6 L1753.64 1213.6 L1754.23 1213.6 L1754.81 1213.6 L1755.4 1213.6 L1755.99 1213.6 L1756.57 1213.6 L1757.16 1213.6 L1757.74 1213.6 L1758.33 1213.6 L1758.92 1213.6 L1759.5 1213.6 L1760.09 1213.6 L1760.68 1213.6 L1761.26 1213.6 L1761.85 1213.6 L1762.44 1213.6 L1763.02 1213.6 L1763.61 1213.6 L1764.19 1213.6 L1764.78 1213.6 L1765.37 1213.6 L1765.95 1213.6 L1766.54 1213.6 L1767.13 1213.6 L1767.71 1213.6 L1768.3 1213.6 L1768.89 1213.6 L1769.47 1213.6 L1770.06 1213.6 L1770.65 1213.6 L1771.23 1213.6 L1771.82 1213.6 L1772.4 1213.6 L1772.99 1213.6 L1773.58 1213.6 L1774.16 1213.6 L1774.75 1213.6 L1775.34 1213.6 L1775.92 1213.6 L1776.51 1213.6 L1777.1 1213.6 L1777.68 1213.6 L1778.27 1213.6 L1778.86 1213.6 L1779.44 1213.6 L1780.03 1213.6 L1780.61 1213.6 L1781.2 1213.6 L1781.79 1213.6 L1782.37 1213.6 L1782.96 1213.6 L1783.55 1213.6 L1784.13 1213.6 L1784.72 1213.6 L1785.31 1213.6 L1785.89 1213.6 L1786.48 1213.6 L1787.06 1213.6 L1787.65 1213.6 L1788.24 1213.6 L1788.82 1213.6 L1789.41 1213.6 L1790 1213.6 L1790.58 1213.6 L1791.17 1213.6 L1791.76 1213.6 L1792.34 1213.6 L1792.93 1213.6 L1793.52 1213.6 L1794.1 1213.6 L1794.69 1213.6 L1795.27 1213.6 L1795.86 1213.6 L1796.45 1213.6 L1797.03 1213.6 L1797.62 1213.6 L1798.21 1213.6 L1798.79 1213.6 L1799.38 1213.6 L1799.97 1213.6 L1800.55 1213.6 L1801.14 1213.6 L1801.73 1213.6 L1802.31 1213.6 L1802.9 1213.6 L1803.48 1213.6 L1804.07 1213.6 L1804.66 1213.6 L1805.24 1213.6 L1805.83 1213.6 L1806.42 1213.6 L1807 1213.6 L1807.59 1213.6 L1808.18 1213.6 L1808.76 1213.6 L1809.35 1213.6 L1809.94 1213.6 L1810.52 1213.6 L1811.11 1213.6 L1811.69 1213.6 L1812.28 1213.6 L1812.87 1213.6 L1813.45 1213.6 L1814.04 1213.6 L1814.63 1213.6 L1815.21 1213.6 L1815.8 1213.6 L1816.39 1213.6 L1816.97 1213.6 L1817.56 1213.6 L1818.14 1213.6 L1818.73 1213.6 L1819.32 1213.6 L1819.9 1213.6 L1820.49 1213.6 L1821.08 1213.6 L1821.66 1213.6 L1822.25 1213.6 L1822.84 1213.6 L1823.42 1213.6 L1824.01 1213.6 L1824.6 1213.6 L1825.18 1213.6 L1825.77 1213.6 L1826.35 1213.6 L1826.94 1213.6 L1827.53 1213.6 L1828.11 1213.6 L1828.7 1213.6 L1829.29 1213.6 L1829.87 1213.6 L1830.46 1213.6 L1831.05 1213.6 L1831.63 1213.6 L1832.22 1213.6 L1832.81 1213.6 L1833.39 1213.6 L1833.98 1213.6 L1834.56 1213.6 L1835.15 1213.6 L1835.74 1213.6 L1836.32 1213.6 L1836.91 1213.6 L1837.5 1213.6 L1838.08 1213.6 L1838.67 1213.6 L1839.26 1213.6 L1839.84 1213.6 L1840.43 1213.6 L1841.01 1213.6 L1841.6 1213.6 L1842.19 1213.6 L1842.77 1213.6 L1843.36 1213.6 L1843.95 1213.6 L1844.53 1213.6 L1845.12 1213.6 L1845.71 1213.6 L1846.29 1213.6 L1846.88 1213.6 L1847.47 1213.6 L1848.05 1213.6 L1848.64 1213.6 L1849.22 1213.6 L1849.81 1213.6 L1850.4 1213.6 L1850.98 1213.6 L1851.57 1213.6 L1852.16 1213.6 L1852.74 1213.6 L1853.33 1213.6 L1853.92 1213.6 L1854.5 1213.6 L1855.09 1213.6 L1855.68 1213.6 L1856.26 1213.6 L1856.85 1213.6 L1857.43 1213.6 L1858.02 1213.6 L1858.61 1213.6 L1859.19 1213.6 L1859.78 1213.6 L1860.37 1213.6 L1860.95 1213.6 L1861.54 1213.6 L1862.13 1213.6 L1862.71 1213.6 L1863.3 1213.6 L1863.88 1213.6 L1864.47 1213.6 L1865.06 1213.6 L1865.64 1213.6 L1866.23 1213.6 L1866.82 1213.6 L1867.4 1213.6 L1867.99 1213.6 L1868.58 1213.6 L1869.16 1213.6 L1869.75 1213.6 L1870.34 1213.6 L1870.92 1213.6 L1871.51 1213.6 L1872.09 1213.6 L1872.68 1213.6 L1873.27 1213.6 L1873.85 1213.6 L1874.44 1213.6 L1875.03 1213.6 L1875.61 1213.6 L1876.2 1213.6 L1876.79 1213.6 L1877.37 1213.6 L1877.96 1213.6 L1878.55 1213.6 L1879.13 1213.6 L1879.72 1213.6 L1880.3 1213.6 L1880.89 1213.6 L1881.48 1213.6 L1882.06 1213.6 L1882.65 1213.6 L1883.24 1213.6 L1883.82 1213.6 L1884.41 1213.6 L1885 1213.6 L1885.58 1213.6 L1886.17 1213.6 L1886.76 1213.6 L1887.34 1213.6 L1887.93 1213.6 L1888.51 1213.6 L1889.1 1213.6 L1889.69 1213.6 L1890.27 1213.6 L1890.86 1213.6 L1891.45 1213.6 L1892.03 1213.6 L1892.62 1213.6 L1893.21 1213.6 L1893.79 1213.6 L1894.38 1213.6 L1894.96 1213.6 L1895.55 1213.6 L1896.14 1213.6 L1896.72 1213.6 L1897.31 1213.6 L1897.9 1213.6 L1898.48 1213.6 L1899.07 1213.6 L1899.66 1213.6 L1900.24 1213.6 L1900.83 1213.6 L1901.42 1213.6 L1902 1213.6 L1902.59 1213.6 L1903.17 1213.6 L1903.76 1213.6 L1904.35 1213.6 L1904.93 1213.6 L1905.52 1213.6 L1906.11 1213.6 L1906.69 1213.6 L1907.28 1213.6 L1907.87 1213.6 L1908.45 1213.6 L1909.04 1213.6 L1909.63 1213.6 L1910.21 1213.6 L1910.8 1213.6 L1911.38 1213.6 L1911.97 1213.6 L1912.56 1213.6 L1913.14 1213.6 L1913.73 1213.6 L1914.32 1213.6 L1914.9 1213.6 L1915.49 1213.6 L1916.08 1213.6 L1916.66 1213.6 L1917.25 1213.6 L1917.83 1213.6 L1918.42 1213.6 L1919.01 1213.6 L1919.59 1213.6 L1920.18 1213.6 L1920.77 1213.6 L1921.35 1213.6 L1921.94 1213.6 L1922.53 1213.6 L1923.11 1213.6 L1923.7 1213.6 L1924.29 1213.6 L1924.87 1213.6 L1925.46 1213.6 L1926.04 1213.6 L1926.63 1213.6 L1927.22 1213.6 L1927.8 1213.6 L1928.39 1213.6 L1928.98 1213.6 L1929.56 1213.6 L1930.15 1213.6 L1930.74 1213.6 L1931.32 1213.6 L1931.91 1213.6 L1932.5 1213.6 L1933.08 1213.6 L1933.67 1213.6 L1934.25 1213.6 L1934.84 1213.6 L1935.43 1213.6 L1936.01 1213.6 L1936.6 1213.6 L1937.19 1213.6 L1937.77 1213.6 L1938.36 1213.6 L1938.95 1213.6 L1939.53 1213.6 L1940.12 1213.6 L1940.71 1213.6 L1941.29 1213.6 L1941.88 1213.6 L1942.46 1213.6 L1943.05 1213.6 L1943.64 1213.6 L1944.22 1213.6 L1944.81 1213.6 L1945.4 1213.6 L1945.98 1213.6 L1946.57 1213.6 L1947.16 1213.6 L1947.74 1213.6 L1948.33 1213.6 L1948.91 1213.6 L1949.5 1213.6 L1950.09 1213.6 L1950.67 1213.6 L1951.26 1213.6 L1951.85 1213.6 L1952.43 1213.6 L1953.02 1213.6 L1953.61 1213.6 L1954.19 1213.6 L1954.78 1213.6 L1955.37 1213.6 L1955.95 1213.6 L1956.54 1213.6 L1957.12 1213.6 L1957.71 1213.6 L1958.3 1213.6 L1958.88 1213.6 L1959.47 1213.6 L1960.06 1213.6 L1960.64 1213.6 L1961.23 1213.6 L1961.82 1213.6 L1962.4 1213.6 L1962.99 1213.6 L1963.58 1213.6 L1964.16 1213.6 L1964.75 1213.6 L1965.33 1213.6 L1965.92 1213.6 L1966.51 1213.6 L1967.09 1213.6 L1967.68 1213.6 L1968.27 1213.6 L1968.85 1213.6 L1969.44 1213.6 L1970.03 1213.6 L1970.61 1213.6 L1971.2 1213.6 L1971.78 1213.6 L1972.37 1213.6 L1972.96 1213.6 L1973.54 1213.6 L1974.13 1213.6 L1974.72 1213.6 L1975.3 1213.6 L1975.89 1213.6 L1976.48 1213.6 L1977.06 1213.6 L1977.65 1213.6 L1978.24 1213.6 L1978.82 1213.6 L1979.41 1213.6 L1979.99 1213.6 L1980.58 1213.6 L1981.17 1213.6 L1981.75 1213.6 L1982.34 1213.6 L1982.93 1213.6 L1983.51 1213.6 L1984.1 1213.6 L1984.69 1213.6 L1985.27 1213.6 L1985.86 1213.6 L1986.45 1213.6 L1987.03 1213.6 L1987.62 1213.6 L1988.2 1213.6 L1988.79 1213.6 L1989.38 1213.6 L1989.96 1213.6 L1990.55 1213.6 L1991.14 1213.6 L1991.72 1213.6 L1992.31 1213.6 L1992.9 1213.6 L1993.48 1213.6 L1994.07 1213.6 L1994.65 1213.6 L1995.24 1213.6 L1995.83 1213.6 L1996.41 1213.6 L1997 1213.6 L1997.59 1213.6 L1998.17 1213.6 L1998.76 1213.6 L1999.35 1213.6 L1999.93 1213.6 L2000.52 1213.6 L2001.11 1213.6 L2001.69 1213.6 L2002.28 1213.6 L2002.86 1213.6 L2003.45 1213.6 L2004.04 1213.6 L2004.62 1213.6 L2005.21 1213.6 L2005.8 1213.6 L2006.38 1213.6 L2006.97 1213.6 L2007.56 1213.6 L2008.14 1213.6 L2008.73 1213.6 L2009.32 1213.6 L2009.9 1213.6 L2010.49 1213.6 L2011.07 1213.6 L2011.66 1213.6 L2012.25 1213.6 L2012.83 1213.6 L2013.42 1213.6 L2014.01 1213.6 L2014.59 1213.6 L2015.18 1213.6 L2015.77 1213.6 L2016.35 1213.6 L2016.94 1213.6 L2017.53 1213.6 L2018.11 1213.6 L2018.7 1213.6 L2019.28 1213.6 L2019.87 1213.6 L2020.46 1213.6 L2021.04 1213.6 L2021.63 1213.6 L2022.22 1213.6 L2022.8 1213.6 L2023.39 1213.6 L2023.98 1213.6 L2024.56 1213.6 L2025.15 1213.6 L2025.73 1213.6 L2026.32 1213.6 L2026.91 1213.6 L2027.49 1213.6 L2028.08 1213.6 L2028.67 1213.6 L2029.25 1213.6 L2029.84 1213.6 L2030.43 1213.6 L2031.01 1213.6 L2031.6 1213.6 L2032.19 1213.6 L2032.77 1213.6 L2033.36 1213.6 L2033.94 1213.6 L2034.53 1213.6 L2035.12 1213.6 L2035.7 1213.6 L2036.29 1213.6 L2036.88 1213.6 L2037.46 1213.6 L2038.05 1213.6 L2038.64 1213.6 L2039.22 1213.6 L2039.81 1213.6 L2040.4 1213.6 L2040.98 1213.6 L2041.57 1213.6 L2042.15 1213.6 L2042.74 1213.6 L2043.33 1213.6 L2043.91 1213.6 L2044.5 1213.6 L2045.09 1213.6 L2045.67 1213.6 L2046.26 1213.6 L2046.85 1213.6 L2047.43 1213.6 L2048.02 1213.6 L2048.6 1213.6 L2049.19 1213.6 L2049.78 1213.6 L2050.36 1213.6 L2050.95 1213.6 L2051.54 1213.6 L2052.12 1213.6 L2052.71 1213.6 L2053.3 1213.6 L2053.88 1213.6 L2054.47 1213.6 L2055.06 1213.6 L2055.64 1213.6 L2056.23 1213.6 L2056.81 1213.6 L2057.4 1213.6 L2057.99 1213.6 L2058.57 1213.6 L2059.16 1213.6 L2059.75 1213.6 L2060.33 1213.6 L2060.92 1213.6 L2061.51 1213.6 L2062.09 1213.6 L2062.68 1213.6 L2063.27 1213.6 L2063.85 1213.6 L2064.44 1213.6 L2065.02 1213.6 L2065.61 1213.6 L2066.2 1213.6 L2066.78 1213.6 L2067.37 1213.6 L2067.96 1213.6 L2068.54 1213.6 L2069.13 1213.6 L2069.72 1213.6 L2070.3 1213.6 L2070.89 1213.6 L2071.48 1213.6 L2072.06 1213.6 L2072.65 1213.6 L2073.23 1213.6 L2073.82 1213.6 L2074.41 1213.6 L2074.99 1213.6 L2075.58 1213.6 L2076.17 1213.6 L2076.75 1213.6 L2077.34 1213.6 L2077.93 1213.6 L2078.51 1213.6 L2079.1 1213.6 L2079.68 1213.6 L2080.27 1213.6 L2080.86 1213.6 L2081.44 1213.6 L2082.03 1213.6 L2082.62 1213.6 L2083.2 1213.6 L2083.79 1213.6 L2084.38 1213.6 L2084.96 1213.6 L2085.55 1213.6 L2086.14 1213.6 L2086.72 1213.6 L2087.31 1213.6 L2087.89 1213.6 L2088.48 1213.6 L2089.07 1213.6 L2089.65 1213.6 L2090.24 1213.6 L2090.83 1213.6 L2091.41 1213.6 L2092 1213.6 L2092.59 1213.6 L2093.17 1213.6 L2093.76 1213.6 L2094.35 1213.6 L2094.93 1213.6 L2095.52 1213.6 L2096.1 1213.6 L2096.69 1213.6 L2097.28 1213.6 L2097.86 1213.6 L2098.45 1213.6 L2099.04 1213.6 L2099.62 1213.6 L2100.21 1213.6 L2100.8 1213.6 L2101.38 1213.6 L2101.97 1213.6 L2102.55 1213.6 L2103.14 1213.6 L2103.73 1213.6 L2104.31 1213.6 L2104.9 1213.6 L2105.49 1213.6 L2106.07 1213.6 L2106.66 1213.6 L2107.25 1213.6 L2107.83 1213.6 L2108.42 1213.6 L2109.01 1213.6 L2109.59 1213.6 L2110.18 1213.6 L2110.76 1213.6 L2111.35 1213.6 L2111.94 1213.6 L2112.52 1213.6 L2113.11 1213.6 L2113.7 1213.6 L2114.28 1213.6 L2114.87 1213.6 L2115.46 1213.6 L2116.04 1213.6 L2116.63 1213.6 L2117.22 1213.6 L2117.8 1213.6 L2118.39 1213.6 L2118.97 1213.6 L2119.56 1213.6 L2120.15 1213.6 L2120.73 1213.6 L2121.32 1213.6 L2121.91 1213.6 L2122.49 1213.6 L2123.08 1213.6 L2123.67 1213.6 L2124.25 1213.6 L2124.84 1213.6 L2125.42 1213.6 L2126.01 1213.6 L2126.6 1213.6 L2127.18 1213.6 L2127.77 1213.6 L2128.36 1213.6 L2128.94 1213.6 L2129.53 1213.6 L2130.12 1213.6 L2130.7 1213.6 L2131.29 1213.6 L2131.88 1213.6 L2132.46 1213.6 L2133.05 1213.6 L2133.63 1213.6 L2134.22 1213.6 L2134.81 1213.6 L2135.39 1213.6 L2135.98 1213.6 L2136.57 1213.6 L2137.15 1213.6 L2137.74 1213.6 L2138.33 1213.6 L2138.91 1213.6 L2139.5 1213.6 L2140.09 1213.6 L2140.67 1213.6 L2141.26 1213.6 L2141.84 1213.6 L2142.43 1213.6 L2143.02 1213.6 L2143.6 1213.6 L2144.19 1213.6 L2144.78 1213.6 L2145.36 1213.6 L2145.95 1213.6 L2146.54 1213.6 L2147.12 1213.6 L2147.71 1213.6 L2148.3 1213.6 L2148.88 1213.6 L2149.47 1213.6 L2150.05 1213.6 L2150.64 1213.6 L2151.23 1213.6 L2151.81 1213.6 L2152.4 1213.6 L2152.99 1213.6 L2153.57 1213.6 L2154.16 1213.6 L2154.75 1213.6 L2155.33 1213.6 L2155.92 1213.6 L2156.5 1213.6 L2157.09 1213.6 L2157.68 1213.6 L2158.26 1213.6 L2158.26 1213.44 L2157.68 1213.44 L2157.09 1213.44 L2156.5 1213.44 L2155.92 1213.44 L2155.33 1213.44 L2154.75 1213.44 L2154.16 1213.44 L2153.57 1213.44 L2152.99 1213.44 L2152.4 1213.44 L2151.81 1213.44 L2151.23 1213.44 L2150.64 1213.44 L2150.05 1213.44 L2149.47 1213.44 L2148.88 1213.44 L2148.3 1213.44 L2147.71 1213.44 L2147.12 1213.44 L2146.54 1213.44 L2145.95 1213.44 L2145.36 1213.44 L2144.78 1213.44 L2144.19 1213.44 L2143.6 1213.44 L2143.02 1213.44 L2142.43 1213.44 L2141.84 1213.44 L2141.26 1213.44 L2140.67 1213.44 L2140.09 1213.44 L2139.5 1213.44 L2138.91 1213.44 L2138.33 1213.44 L2137.74 1213.44 L2137.15 1213.44 L2136.57 1213.44 L2135.98 1213.44 L2135.39 1213.44 L2134.81 1213.44 L2134.22 1213.44 L2133.63 1213.44 L2133.05 1213.44 L2132.46 1213.44 L2131.88 1213.44 L2131.29 1213.44 L2130.7 1213.44 L2130.12 1213.44 L2129.53 1213.44 L2128.94 1213.44 L2128.36 1213.44 L2127.77 1213.44 L2127.18 1213.44 L2126.6 1213.44 L2126.01 1213.44 L2125.42 1213.44 L2124.84 1213.44 L2124.25 1213.44 L2123.67 1213.44 L2123.08 1213.44 L2122.49 1213.44 L2121.91 1213.44 L2121.32 1213.44 L2120.73 1213.44 L2120.15 1213.44 L2119.56 1213.44 L2118.97 1213.44 L2118.39 1213.44 L2117.8 1213.44 L2117.22 1213.44 L2116.63 1213.44 L2116.04 1213.44 L2115.46 1213.44 L2114.87 1213.44 L2114.28 1213.44 L2113.7 1213.44 L2113.11 1213.44 L2112.52 1213.44 L2111.94 1213.44 L2111.35 1213.44 L2110.76 1213.44 L2110.18 1213.44 L2109.59 1213.44 L2109.01 1213.44 L2108.42 1213.44 L2107.83 1213.44 L2107.25 1213.44 L2106.66 1213.44 L2106.07 1213.44 L2105.49 1213.44 L2104.9 1213.44 L2104.31 1213.44 L2103.73 1213.44 L2103.14 1213.44 L2102.55 1213.44 L2101.97 1213.44 L2101.38 1213.44 L2100.8 1213.44 L2100.21 1213.44 L2099.62 1213.44 L2099.04 1213.44 L2098.45 1213.44 L2097.86 1213.44 L2097.28 1213.44 L2096.69 1213.44 L2096.1 1213.44 L2095.52 1213.44 L2094.93 1213.44 L2094.35 1213.44 L2093.76 1213.44 L2093.17 1213.44 L2092.59 1213.44 L2092 1213.44 L2091.41 1213.44 L2090.83 1213.44 L2090.24 1213.44 L2089.65 1213.44 L2089.07 1213.44 L2088.48 1213.44 L2087.89 1213.44 L2087.31 1213.44 L2086.72 1213.44 L2086.14 1213.44 L2085.55 1213.44 L2084.96 1213.44 L2084.38 1213.44 L2083.79 1213.44 L2083.2 1213.44 L2082.62 1213.44 L2082.03 1213.44 L2081.44 1213.44 L2080.86 1213.44 L2080.27 1213.44 L2079.68 1213.44 L2079.1 1213.44 L2078.51 1213.44 L2077.93 1213.44 L2077.34 1213.44 L2076.75 1213.44 L2076.17 1213.44 L2075.58 1213.44 L2074.99 1213.44 L2074.41 1213.44 L2073.82 1213.44 L2073.23 1213.44 L2072.65 1213.44 L2072.06 1213.44 L2071.48 1213.44 L2070.89 1213.44 L2070.3 1213.44 L2069.72 1213.44 L2069.13 1213.44 L2068.54 1213.44 L2067.96 1213.44 L2067.37 1213.44 L2066.78 1213.44 L2066.2 1213.44 L2065.61 1213.44 L2065.02 1213.44 L2064.44 1213.44 L2063.85 1213.44 L2063.27 1213.44 L2062.68 1213.44 L2062.09 1213.44 L2061.51 1213.44 L2060.92 1213.44 L2060.33 1213.44 L2059.75 1213.44 L2059.16 1213.44 L2058.57 1213.44 L2057.99 1213.44 L2057.4 1213.44 L2056.81 1213.44 L2056.23 1213.44 L2055.64 1213.44 L2055.06 1213.44 L2054.47 1213.44 L2053.88 1213.44 L2053.3 1213.44 L2052.71 1213.44 L2052.12 1213.44 L2051.54 1213.44 L2050.95 1213.44 L2050.36 1213.44 L2049.78 1213.44 L2049.19 1213.44 L2048.6 1213.44 L2048.02 1213.44 L2047.43 1213.44 L2046.85 1213.44 L2046.26 1213.44 L2045.67 1213.44 L2045.09 1213.44 L2044.5 1213.44 L2043.91 1213.44 L2043.33 1213.44 L2042.74 1213.44 L2042.15 1213.44 L2041.57 1213.44 L2040.98 1213.44 L2040.4 1213.44 L2039.81 1213.44 L2039.22 1213.44 L2038.64 1213.44 L2038.05 1213.44 L2037.46 1213.44 L2036.88 1213.44 L2036.29 1213.44 L2035.7 1213.44 L2035.12 1213.44 L2034.53 1213.44 L2033.94 1213.44 L2033.36 1213.44 L2032.77 1213.44 L2032.19 1213.44 L2031.6 1213.44 L2031.01 1213.44 L2030.43 1213.44 L2029.84 1213.44 L2029.25 1213.44 L2028.67 1213.44 L2028.08 1213.44 L2027.49 1213.44 L2026.91 1213.44 L2026.32 1213.44 L2025.73 1213.44 L2025.15 1213.44 L2024.56 1213.44 L2023.98 1213.44 L2023.39 1213.44 L2022.8 1213.44 L2022.22 1213.44 L2021.63 1213.44 L2021.04 1213.44 L2020.46 1213.44 L2019.87 1213.44 L2019.28 1213.44 L2018.7 1213.44 L2018.11 1213.44 L2017.53 1213.44 L2016.94 1213.44 L2016.35 1213.44 L2015.77 1213.44 L2015.18 1213.44 L2014.59 1213.44 L2014.01 1213.44 L2013.42 1213.44 L2012.83 1213.44 L2012.25 1213.44 L2011.66 1213.44 L2011.07 1213.44 L2010.49 1213.44 L2009.9 1213.44 L2009.32 1213.44 L2008.73 1213.44 L2008.14 1213.44 L2007.56 1213.44 L2006.97 1213.44 L2006.38 1213.44 L2005.8 1213.44 L2005.21 1213.44 L2004.62 1213.44 L2004.04 1213.44 L2003.45 1213.44 L2002.86 1213.44 L2002.28 1213.44 L2001.69 1213.44 L2001.11 1213.44 L2000.52 1213.44 L1999.93 1213.44 L1999.35 1213.44 L1998.76 1213.44 L1998.17 1213.44 L1997.59 1213.44 L1997 1213.44 L1996.41 1213.44 L1995.83 1213.44 L1995.24 1213.44 L1994.65 1213.44 L1994.07 1213.44 L1993.48 1213.44 L1992.9 1213.44 L1992.31 1213.44 L1991.72 1213.44 L1991.14 1213.44 L1990.55 1213.44 L1989.96 1213.44 L1989.38 1213.44 L1988.79 1213.44 L1988.2 1213.44 L1987.62 1213.44 L1987.03 1213.44 L1986.45 1213.44 L1985.86 1213.44 L1985.27 1213.44 L1984.69 1213.44 L1984.1 1213.44 L1983.51 1213.44 L1982.93 1213.44 L1982.34 1213.44 L1981.75 1213.44 L1981.17 1213.44 L1980.58 1213.44 L1979.99 1213.44 L1979.41 1213.44 L1978.82 1213.44 L1978.24 1213.44 L1977.65 1213.44 L1977.06 1213.44 L1976.48 1213.44 L1975.89 1213.44 L1975.3 1213.44 L1974.72 1213.44 L1974.13 1213.44 L1973.54 1213.44 L1972.96 1213.44 L1972.37 1213.44 L1971.78 1213.44 L1971.2 1213.44 L1970.61 1213.44 L1970.03 1213.44 L1969.44 1213.44 L1968.85 1213.44 L1968.27 1213.44 L1967.68 1213.44 L1967.09 1213.44 L1966.51 1213.44 L1965.92 1213.44 L1965.33 1213.44 L1964.75 1213.44 L1964.16 1213.44 L1963.58 1213.44 L1962.99 1213.44 L1962.4 1213.44 L1961.82 1213.44 L1961.23 1213.44 L1960.64 1213.44 L1960.06 1213.44 L1959.47 1213.44 L1958.88 1213.44 L1958.3 1213.44 L1957.71 1213.44 L1957.12 1213.44 L1956.54 1213.44 L1955.95 1213.44 L1955.37 1213.44 L1954.78 1213.44 L1954.19 1213.44 L1953.61 1213.44 L1953.02 1213.44 L1952.43 1213.44 L1951.85 1213.44 L1951.26 1213.44 L1950.67 1213.44 L1950.09 1213.44 L1949.5 1213.44 L1948.91 1213.44 L1948.33 1213.44 L1947.74 1213.44 L1947.16 1213.44 L1946.57 1213.44 L1945.98 1213.44 L1945.4 1213.44 L1944.81 1213.44 L1944.22 1213.44 L1943.64 1213.44 L1943.05 1213.44 L1942.46 1213.44 L1941.88 1213.44 L1941.29 1213.44 L1940.71 1213.44 L1940.12 1213.44 L1939.53 1213.44 L1938.95 1213.44 L1938.36 1213.44 L1937.77 1213.44 L1937.19 1213.44 L1936.6 1213.44 L1936.01 1213.44 L1935.43 1213.44 L1934.84 1213.44 L1934.25 1213.44 L1933.67 1213.44 L1933.08 1213.44 L1932.5 1213.44 L1931.91 1213.44 L1931.32 1213.44 L1930.74 1213.44 L1930.15 1213.44 L1929.56 1213.44 L1928.98 1213.44 L1928.39 1213.44 L1927.8 1213.44 L1927.22 1213.44 L1926.63 1213.44 L1926.04 1213.44 L1925.46 1213.44 L1924.87 1213.44 L1924.29 1213.44 L1923.7 1213.44 L1923.11 1213.44 L1922.53 1213.44 L1921.94 1213.44 L1921.35 1213.44 L1920.77 1213.44 L1920.18 1213.44 L1919.59 1213.44 L1919.01 1213.44 L1918.42 1213.44 L1917.83 1213.44 L1917.25 1213.44 L1916.66 1213.44 L1916.08 1213.44 L1915.49 1213.44 L1914.9 1213.44 L1914.32 1213.44 L1913.73 1213.44 L1913.14 1213.44 L1912.56 1213.44 L1911.97 1213.44 L1911.38 1213.44 L1910.8 1213.44 L1910.21 1213.44 L1909.63 1213.44 L1909.04 1213.44 L1908.45 1213.44 L1907.87 1213.44 L1907.28 1213.44 L1906.69 1213.44 L1906.11 1213.44 L1905.52 1213.44 L1904.93 1213.44 L1904.35 1213.44 L1903.76 1213.44 L1903.17 1213.44 L1902.59 1213.44 L1902 1213.44 L1901.42 1213.44 L1900.83 1213.44 L1900.24 1213.44 L1899.66 1213.44 L1899.07 1213.44 L1898.48 1213.44 L1897.9 1213.44 L1897.31 1213.44 L1896.72 1213.44 L1896.14 1213.44 L1895.55 1213.44 L1894.96 1213.44 L1894.38 1213.44 L1893.79 1213.44 L1893.21 1213.44 L1892.62 1213.44 L1892.03 1213.44 L1891.45 1213.44 L1890.86 1213.44 L1890.27 1213.44 L1889.69 1213.44 L1889.1 1213.44 L1888.51 1213.44 L1887.93 1213.44 L1887.34 1213.44 L1886.76 1213.44 L1886.17 1213.44 L1885.58 1213.44 L1885 1213.44 L1884.41 1213.44 L1883.82 1213.44 L1883.24 1213.44 L1882.65 1213.44 L1882.06 1213.44 L1881.48 1213.44 L1880.89 1213.44 L1880.3 1213.44 L1879.72 1213.44 L1879.13 1213.44 L1878.55 1213.44 L1877.96 1213.44 L1877.37 1213.44 L1876.79 1213.44 L1876.2 1213.44 L1875.61 1213.44 L1875.03 1213.44 L1874.44 1213.44 L1873.85 1213.44 L1873.27 1213.44 L1872.68 1213.44 L1872.09 1213.44 L1871.51 1213.44 L1870.92 1213.44 L1870.34 1213.44 L1869.75 1213.44 L1869.16 1213.44 L1868.58 1213.44 L1867.99 1213.44 L1867.4 1213.44 L1866.82 1213.44 L1866.23 1213.44 L1865.64 1213.44 L1865.06 1213.44 L1864.47 1213.44 L1863.88 1213.44 L1863.3 1213.44 L1862.71 1213.44 L1862.13 1213.44 L1861.54 1213.44 L1860.95 1213.44 L1860.37 1213.44 L1859.78 1213.44 L1859.19 1213.44 L1858.61 1213.44 L1858.02 1213.44 L1857.43 1213.44 L1856.85 1213.44 L1856.26 1213.44 L1855.68 1213.44 L1855.09 1213.44 L1854.5 1213.44 L1853.92 1213.44 L1853.33 1213.44 L1852.74 1213.44 L1852.16 1213.44 L1851.57 1213.44 L1850.98 1213.44 L1850.4 1213.44 L1849.81 1213.44 L1849.22 1213.44 L1848.64 1213.44 L1848.05 1213.44 L1847.47 1213.44 L1846.88 1213.44 L1846.29 1213.44 L1845.71 1213.44 L1845.12 1213.44 L1844.53 1213.44 L1843.95 1213.44 L1843.36 1213.44 L1842.77 1213.44 L1842.19 1213.44 L1841.6 1213.44 L1841.01 1213.44 L1840.43 1213.44 L1839.84 1213.44 L1839.26 1213.44 L1838.67 1213.44 L1838.08 1213.44 L1837.5 1213.44 L1836.91 1213.44 L1836.32 1213.44 L1835.74 1213.44 L1835.15 1213.44 L1834.56 1213.44 L1833.98 1213.44 L1833.39 1213.44 L1832.81 1213.44 L1832.22 1213.44 L1831.63 1213.44 L1831.05 1213.44 L1830.46 1213.44 L1829.87 1213.44 L1829.29 1213.44 L1828.7 1213.44 L1828.11 1213.44 L1827.53 1213.44 L1826.94 1213.44 L1826.35 1213.44 L1825.77 1213.44 L1825.18 1213.44 L1824.6 1213.44 L1824.01 1213.44 L1823.42 1213.44 L1822.84 1213.44 L1822.25 1213.44 L1821.66 1213.44 L1821.08 1213.44 L1820.49 1213.44 L1819.9 1213.44 L1819.32 1213.44 L1818.73 1213.44 L1818.14 1213.44 L1817.56 1213.44 L1816.97 1213.44 L1816.39 1213.44 L1815.8 1213.44 L1815.21 1213.44 L1814.63 1213.44 L1814.04 1213.44 L1813.45 1213.44 L1812.87 1213.44 L1812.28 1213.44 L1811.69 1213.44 L1811.11 1213.44 L1810.52 1213.44 L1809.94 1213.44 L1809.35 1213.44 L1808.76 1213.44 L1808.18 1213.44 L1807.59 1213.44 L1807 1213.44 L1806.42 1213.44 L1805.83 1213.44 L1805.24 1213.44 L1804.66 1213.44 L1804.07 1213.44 L1803.48 1213.44 L1802.9 1213.44 L1802.31 1213.44 L1801.73 1213.44 L1801.14 1213.44 L1800.55 1213.44 L1799.97 1213.44 L1799.38 1213.44 L1798.79 1213.44 L1798.21 1213.44 L1797.62 1213.44 L1797.03 1213.44 L1796.45 1213.44 L1795.86 1213.44 L1795.27 1213.44 L1794.69 1213.44 L1794.1 1213.44 L1793.52 1213.44 L1792.93 1213.44 L1792.34 1213.44 L1791.76 1213.44 L1791.17 1213.44 L1790.58 1213.44 L1790 1213.44 L1789.41 1213.44 L1788.82 1213.44 L1788.24 1213.44 L1787.65 1213.44 L1787.06 1213.44 L1786.48 1213.44 L1785.89 1213.44 L1785.31 1213.44 L1784.72 1213.44 L1784.13 1213.44 L1783.55 1213.44 L1782.96 1213.44 L1782.37 1213.44 L1781.79 1213.44 L1781.2 1213.44 L1780.61 1213.44 L1780.03 1213.44 L1779.44 1213.44 L1778.86 1213.44 L1778.27 1213.44 L1777.68 1213.44 L1777.1 1213.44 L1776.51 1213.44 L1775.92 1213.44 L1775.34 1213.44 L1774.75 1213.44 L1774.16 1213.44 L1773.58 1213.44 L1772.99 1213.44 L1772.4 1213.44 L1771.82 1213.44 L1771.23 1213.44 L1770.65 1213.44 L1770.06 1213.44 L1769.47 1213.44 L1768.89 1213.44 L1768.3 1213.44 L1767.71 1213.44 L1767.13 1213.44 L1766.54 1213.44 L1765.95 1213.44 L1765.37 1213.44 L1764.78 1213.44 L1764.19 1213.44 L1763.61 1213.44 L1763.02 1213.44 L1762.44 1213.44 L1761.85 1213.44 L1761.26 1213.44 L1760.68 1213.44 L1760.09 1213.44 L1759.5 1213.44 L1758.92 1213.44 L1758.33 1213.44 L1757.74 1213.44 L1757.16 1213.44 L1756.57 1213.44 L1755.99 1213.44 L1755.4 1213.44 L1754.81 1213.44 L1754.23 1213.44 L1753.64 1213.44 L1753.05 1213.44 L1752.47 1213.44 L1751.88 1213.44 L1751.29 1213.44 L1750.71 1213.44 L1750.12 1213.44 L1749.53 1213.44 L1748.95 1213.44 L1748.36 1213.44 L1747.78 1213.44 L1747.19 1213.44 L1746.6 1213.44 L1746.02 1213.44 L1745.43 1213.44 L1744.84 1213.44 L1744.26 1213.44 L1743.67 1213.44 L1743.08 1213.44 L1742.5 1213.44 L1741.91 1213.44 L1741.32 1213.44 L1740.74 1213.44 L1740.15 1213.44 L1739.57 1213.44 L1738.98 1213.44 L1738.39 1213.44 L1737.81 1213.44 L1737.22 1213.44 L1736.63 1213.44 L1736.05 1213.44 L1735.46 1213.44 L1734.87 1213.44 L1734.29 1213.44 L1733.7 1213.44 L1733.11 1213.44 L1732.53 1213.44 L1731.94 1213.44 L1731.36 1213.44 L1730.77 1213.44 L1730.18 1213.44 L1729.6 1213.44 L1729.01 1213.44 L1728.42 1213.44 L1727.84 1213.44 L1727.25 1213.44 L1726.66 1213.44 L1726.08 1213.44 L1725.49 1213.44 L1724.91 1213.44 L1724.32 1213.44 L1723.73 1213.44 L1723.15 1213.44 L1722.56 1213.44 L1721.97 1213.44 L1721.39 1213.44 L1720.8 1213.44 L1720.21 1213.44 L1719.63 1213.44 L1719.04 1213.44 L1718.45 1213.44 L1717.87 1213.44 L1717.28 1213.44 L1716.7 1213.44 L1716.11 1213.44 L1715.52 1213.44 L1714.94 1213.44 L1714.35 1213.44 L1713.76 1213.44 L1713.18 1213.44 L1712.59 1213.44 L1712 1213.44 L1711.42 1213.44 L1710.83 1213.44 L1710.24 1213.44 L1709.66 1213.44 L1709.07 1213.44 L1708.49 1213.44 L1707.9 1213.44 L1707.31 1213.44 L1706.73 1213.44 L1706.14 1213.44 L1705.55 1213.44 L1704.97 1213.44 L1704.38 1213.44 L1703.79 1213.44 L1703.21 1213.44 L1702.62 1213.44 L1702.04 1213.44 L1701.45 1213.44 L1700.86 1213.44 L1700.28 1213.44 L1699.69 1213.44 L1699.1 1213.44 L1698.52 1213.44 L1697.93 1213.44 L1697.34 1213.44 L1696.76 1213.44 L1696.17 1213.44 L1695.58 1213.44 L1695 1213.44 L1694.41 1213.44 L1693.83 1213.44 L1693.24 1213.44 L1692.65 1213.44 L1692.07 1213.44 L1691.48 1213.44 L1690.89 1213.44 L1690.31 1213.44 L1689.72 1213.44 L1689.13 1213.44 L1688.55 1213.44 L1687.96 1213.44 L1687.37 1213.44 L1686.79 1213.44 L1686.2 1213.44 L1685.62 1213.44 L1685.03 1213.44 L1684.44 1213.44 L1683.86 1213.44 L1683.27 1213.44 L1682.68 1213.44 L1682.1 1213.44 L1681.51 1213.44 L1680.92 1213.44 L1680.34 1213.44 L1679.75 1213.44 L1679.17 1213.44 L1678.58 1213.44 L1677.99 1213.44 L1677.41 1213.44 L1676.82 1213.44 L1676.23 1213.44 L1675.65 1213.44 L1675.06 1213.44 L1674.47 1213.44 L1673.89 1213.44 L1673.3 1213.44 L1672.71 1213.44 L1672.13 1213.44 L1671.54 1213.44 L1670.96 1213.44 L1670.37 1213.44 L1669.78 1213.44 L1669.2 1213.44 L1668.61 1213.44 L1668.02 1213.44 L1667.44 1213.44 L1666.85 1213.44 L1666.26 1213.44 L1665.68 1213.44 L1665.09 1213.44 L1664.5 1213.44 L1663.92 1213.44 L1663.33 1213.44 L1662.75 1213.44 L1662.16 1213.44 L1661.57 1213.44 L1660.99 1213.44 L1660.4 1213.44 L1659.81 1213.44 L1659.23 1213.44 L1658.64 1213.44 L1658.05 1213.44 L1657.47 1213.44 L1656.88 1213.44 L1656.29 1213.44 L1655.71 1213.44 L1655.12 1213.44 L1654.54 1213.44 L1653.95 1213.44 L1653.36 1213.44 L1652.78 1213.44 L1652.19 1213.44 L1651.6 1213.44 L1651.02 1213.44 L1650.43 1213.44 L1649.84 1213.44 L1649.26 1213.44 L1648.67 1213.44 L1648.09 1213.44 L1647.5 1213.44 L1646.91 1213.44 L1646.33 1213.44 L1645.74 1213.44 L1645.15 1213.44 L1644.57 1213.44 L1643.98 1213.44 L1643.39 1213.44 L1642.81 1213.44 L1642.22 1213.44 L1641.63 1213.44 L1641.05 1213.44 L1640.46 1213.44 L1639.88 1213.44 L1639.29 1213.44 L1638.7 1213.44 L1638.12 1213.44 L1637.53 1213.44 L1636.94 1213.44 L1636.36 1213.44 L1635.77 1213.44 L1635.18 1213.44 L1634.6 1213.44 L1634.01 1213.44 L1633.42 1213.44 L1632.84 1213.44 L1632.25 1213.44 L1631.67 1213.44 L1631.08 1213.44 L1630.49 1213.44 L1629.91 1213.44 L1629.32 1213.44 L1628.73 1213.44 L1628.15 1213.44 L1627.56 1213.44 L1626.97 1213.44 L1626.39 1213.44 L1625.8 1213.44 L1625.22 1213.44 L1624.63 1213.44 L1624.04 1213.44 L1623.46 1213.44 L1622.87 1213.44 L1622.28 1213.44 L1621.7 1213.44 L1621.11 1213.44 L1620.52 1213.44 L1619.94 1213.44 L1619.35 1213.44 L1618.76 1213.44 L1618.18 1213.44 L1617.59 1213.44 L1617.01 1213.44 L1616.42 1213.44 L1615.83 1213.44 L1615.25 1213.44 L1614.66 1213.44 L1614.07 1213.44 L1613.49 1213.44 L1612.9 1213.44 L1612.31 1213.44 L1611.73 1213.44 L1611.14 1213.44 L1610.55 1213.44 L1609.97 1213.44 L1609.38 1213.44 L1608.8 1213.44 L1608.21 1213.44 L1607.62 1213.44 L1607.04 1213.44 L1606.45 1213.44 L1605.86 1213.44 L1605.28 1213.44 L1604.69 1213.44 L1604.1 1213.44 L1603.52 1213.44 L1602.93 1213.44 L1602.34 1213.44 L1601.76 1213.44 L1601.17 1213.44 L1600.59 1213.44 L1600 1213.44 L1599.41 1213.44 L1598.83 1213.44 L1598.24 1213.44 L1597.65 1213.44 L1597.07 1213.44 L1596.48 1213.44 L1595.89 1213.44 L1595.31 1213.44 L1594.72 1213.44 L1594.14 1213.44 L1593.55 1213.44 L1592.96 1213.44 L1592.38 1213.44 L1591.79 1213.44 L1591.2 1213.44 L1590.62 1213.44 L1590.03 1213.44 L1589.44 1213.44 L1588.86 1213.44 L1588.27 1213.44 L1587.68 1213.44 L1587.1 1213.44 L1586.51 1213.44 L1585.93 1213.44 L1585.34 1213.44 L1584.75 1213.44 L1584.17 1213.44 L1583.58 1213.44 L1582.99 1213.44 L1582.41 1213.44 L1581.82 1213.44 L1581.23 1213.44 L1580.65 1213.44 L1580.06 1213.44 L1579.47 1213.44 L1578.89 1213.44 L1578.3 1213.44 L1577.72 1213.44 L1577.13 1213.44 L1576.54 1213.44 L1575.96 1213.44 L1575.37 1213.44 L1574.78 1213.44 L1574.2 1213.44 L1573.61 1213.44 L1573.02 1213.44 L1572.44 1213.44 L1571.85 1213.44 L1571.27 1213.44 L1570.68 1213.44 L1570.09 1213.44 L1569.51 1213.44 L1568.92 1213.44 L1568.33 1213.44 L1567.75 1213.44 L1567.16 1213.44 L1566.57 1213.44 L1565.99 1213.44 L1565.4 1213.44 L1564.81 1213.44 L1564.23 1213.44 L1563.64 1213.44 L1563.06 1213.44 L1562.47 1213.44 L1561.88 1213.44 L1561.3 1213.44 L1560.71 1213.44 L1560.12 1213.44 L1559.54 1213.44 L1558.95 1213.44 L1558.36 1213.44 L1557.78 1213.44 L1557.19 1213.44 L1556.6 1213.44 L1556.02 1213.44 L1555.43 1213.44 L1554.85 1213.44 L1554.26 1213.44 L1553.67 1213.44 L1553.09 1213.44 L1552.5 1213.44 L1551.91 1213.44 L1551.33 1213.44 L1550.74 1213.44 L1550.15 1213.44 L1549.57 1213.44 L1548.98 1213.44 L1548.4 1213.44 L1547.81 1213.44 L1547.22 1213.44 L1546.64 1213.44 L1546.05 1213.44 L1545.46 1213.44 L1544.88 1213.44 L1544.29 1213.44 L1543.7 1213.44 L1543.12 1213.44 L1542.53 1213.44 L1541.94 1213.44 L1541.36 1213.44 L1540.77 1213.44 L1540.19 1213.44 L1539.6 1213.44 L1539.01 1213.44 L1538.43 1213.44 L1537.84 1213.44 L1537.25 1213.44 L1536.67 1213.44 L1536.08 1213.44 L1535.49 1213.44 L1534.91 1213.44 L1534.32 1213.44 L1533.73 1213.44 L1533.15 1213.44 L1532.56 1213.44 L1531.98 1213.44 L1531.39 1213.44 L1530.8 1213.44 L1530.22 1213.44 L1529.63 1213.44 L1529.04 1213.44 L1528.46 1213.44 L1527.87 1213.44 L1527.28 1213.44 L1526.7 1213.44 L1526.11 1213.44 L1525.52 1213.44 L1524.94 1213.44 L1524.35 1213.44 L1523.77 1213.44 L1523.18 1213.44 L1522.59 1213.44 L1522.01 1213.44 L1521.42 1213.44 L1520.83 1213.44 L1520.25 1213.44 L1519.66 1213.44 L1519.07 1213.44 L1518.49 1213.44 L1517.9 1213.44 L1517.32 1213.44 L1516.73 1213.44 L1516.14 1213.44 L1515.56 1213.44 L1514.97 1213.44 L1514.38 1213.44 L1513.8 1213.44 L1513.21 1213.44 L1512.62 1213.44 L1512.04 1213.44 L1511.45 1213.44 L1510.86 1213.44 L1510.28 1213.44 L1509.69 1213.44 L1509.11 1213.44 L1508.52 1213.44 L1507.93 1213.44 L1507.35 1213.44 L1506.76 1213.44 L1506.17 1213.44 L1505.59 1213.44 L1505 1213.44 L1504.41 1213.44 L1503.83 1213.44 L1503.24 1213.44 L1502.65 1213.44 L1502.07 1213.44 L1501.48 1213.44 L1500.9 1213.44 L1500.31 1213.44 L1499.72 1213.44 L1499.14 1213.44 L1498.55 1213.44 L1497.96 1213.44 L1497.38 1213.44 L1496.79 1213.44 L1496.2 1213.44 L1495.62 1213.44 L1495.03 1213.44 L1494.45 1213.44 L1493.86 1213.44 L1493.27 1213.44 L1492.69 1213.44 L1492.1 1213.44 L1491.51 1213.44 L1490.93 1213.44 L1490.34 1213.44 L1489.75 1213.44 L1489.17 1213.44 L1488.58 1213.44 L1487.99 1213.44 L1487.41 1213.44 L1486.82 1213.44 L1486.24 1213.44 L1485.65 1213.44 L1485.06 1213.44 L1484.48 1213.44 L1483.89 1213.44 L1483.3 1213.44 L1482.72 1213.44 L1482.13 1213.44 L1481.54 1213.44 L1480.96 1213.44 L1480.37 1213.44 L1479.78 1213.44 L1479.2 1213.44 L1478.61 1213.44 L1478.03 1213.44 L1477.44 1213.44 L1476.85 1213.44 L1476.27 1213.44 L1475.68 1213.44 L1475.09 1213.44 L1474.51 1213.44 L1473.92 1213.44 L1473.33 1213.44 L1472.75 1213.44 L1472.16 1213.44 L1471.57 1213.44 L1470.99 1213.44 L1470.4 1213.44 L1469.82 1213.44 L1469.23 1213.44 L1468.64 1213.44 L1468.06 1213.44 L1467.47 1213.44 L1466.88 1213.44 L1466.3 1213.44 L1465.71 1213.44 L1465.12 1213.44 L1464.54 1213.44 L1463.95 1213.44 L1463.37 1213.44 L1462.78 1213.44 L1462.19 1213.44 L1461.61 1213.44 L1461.02 1213.44 L1460.43 1213.44 L1459.85 1213.44 L1459.26 1213.44 L1458.67 1213.44 L1458.09 1213.44 L1457.5 1213.44 L1456.91 1213.44 L1456.33 1213.44 L1455.74 1213.44 L1455.16 1213.44 L1454.57 1213.44 L1453.98 1213.44 L1453.4 1213.44 L1452.81 1213.44 L1452.22 1213.44 L1451.64 1213.44 L1451.05 1213.44 L1450.46 1213.44 L1449.88 1213.44 L1449.29 1213.44 L1448.7 1213.44 L1448.12 1213.44 L1447.53 1213.44 L1446.95 1213.44 L1446.36 1213.44 L1445.77 1213.44 L1445.19 1213.44 L1444.6 1213.44 L1444.01 1213.44 L1443.43 1213.44 L1442.84 1213.44 L1442.25 1213.44 L1441.67 1213.44 L1441.08 1213.44 L1440.5 1213.44 L1439.91 1213.44 L1439.32 1213.44 L1438.74 1213.44 L1438.15 1213.44 L1437.56 1213.44 L1436.98 1213.44 L1436.39 1213.44 L1435.8 1213.44 L1435.22 1213.44 L1434.63 1213.44 L1434.04 1213.44 L1433.46 1213.44 L1432.87 1213.44 L1432.29 1213.44 L1431.7 1213.44 L1431.11 1213.44 L1430.53 1213.44 L1429.94 1213.44 L1429.35 1213.44 L1428.77 1213.44 L1428.18 1213.44 L1427.59 1213.44 L1427.01 1213.44 L1426.42 1213.44 L1425.83 1213.44 L1425.25 1213.44 L1424.66 1213.44 L1424.08 1213.44 L1423.49 1213.44 L1422.9 1213.44 L1422.32 1213.44 L1421.73 1213.44 L1421.14 1213.44 L1420.56 1213.44 L1419.97 1213.44 L1419.38 1213.44 L1418.8 1213.44 L1418.21 1213.44 L1417.63 1213.44 L1417.04 1213.44 L1416.45 1213.44 L1415.87 1213.44 L1415.28 1213.44 L1414.69 1213.44 L1414.11 1213.44 L1413.52 1213.44 L1412.93 1213.44 L1412.35 1213.44 L1411.76 1213.44 L1411.17 1213.44 L1410.59 1213.44 L1410 1213.44 L1409.42 1213.44 L1408.83 1213.44 L1408.24 1213.44 L1407.66 1213.44 L1407.07 1213.44 L1406.48 1213.44 L1405.9 1213.44 L1405.31 1213.44 L1404.72 1213.44 L1404.14 1213.44 L1403.55 1213.44 L1402.96 1213.44 L1402.38 1213.44 L1401.79 1213.44 L1401.21 1213.44 L1400.62 1213.44 L1400.03 1213.44 L1399.45 1213.44 L1398.86 1213.44 L1398.27 1213.44 L1397.69 1213.44 L1397.1 1213.44 L1396.51 1213.44 L1395.93 1213.44 L1395.34 1213.44 L1394.75 1213.44 L1394.17 1213.44 L1393.58 1213.44 L1393 1213.44 L1392.41 1213.44 L1391.82 1213.44 L1391.24 1213.44 L1390.65 1213.44 L1390.06 1213.44 L1389.48 1213.44 L1388.89 1213.44 L1388.3 1213.44 L1387.72 1213.44 L1387.13 1213.44 L1386.55 1213.44 L1385.96 1213.44 L1385.37 1213.44 L1384.79 1213.44 L1384.2 1213.44 L1383.61 1213.44 L1383.03 1213.44 L1382.44 1213.44 L1381.85 1213.44 L1381.27 1213.44 L1380.68 1213.44 L1380.09 1213.44 L1379.51 1213.44 L1378.92 1213.44 L1378.34 1213.44 L1377.75 1213.44 L1377.16 1213.44 L1376.58 1213.44 L1375.99 1213.44 L1375.4 1213.44 L1374.82 1213.44 L1374.23 1213.44 L1373.64 1213.44 L1373.06 1213.44 L1372.47 1213.44 L1371.88 1213.44 L1371.3 1213.44 L1370.71 1213.44 L1370.13 1213.44 L1369.54 1213.44 L1368.95 1213.44 L1368.37 1213.44 L1367.78 1213.44 L1367.19 1213.44 L1366.61 1213.44 L1366.02 1213.44 L1365.43 1213.44 L1364.85 1213.44 L1364.26 1213.44 L1363.68 1213.44 L1363.09 1213.44 L1362.5 1213.44 L1361.92 1213.44 L1361.33 1213.44 L1360.74 1213.44 L1360.16 1213.44 L1359.57 1213.44 L1358.98 1213.44 L1358.4 1213.44 L1357.81 1213.44 L1357.22 1213.44 L1356.64 1213.44 L1356.05 1213.44 L1355.47 1213.44 L1354.88 1213.44 L1354.29 1213.44 L1353.71 1213.44 L1353.12 1213.44 L1352.53 1213.44 L1351.95 1213.44 L1351.36 1213.44 L1350.77 1213.44 L1350.19 1213.44 L1349.6 1213.44 L1349.01 1213.44 L1348.43 1213.44 L1347.84 1213.44 L1347.26 1213.44 L1346.67 1213.44 L1346.08 1213.44 L1345.5 1213.44 L1344.91 1213.44 L1344.32 1213.44 L1343.74 1213.44 L1343.15 1213.44 L1342.56 1213.44 L1341.98 1213.44 L1341.39 1213.44 L1340.8 1213.44 L1340.22 1213.44 L1339.63 1213.44 L1339.05 1213.44 L1338.46 1213.44 L1337.87 1213.44 L1337.29 1213.44 L1336.7 1213.44 L1336.11 1213.44 L1335.53 1213.44 L1334.94 1213.44 L1334.35 1213.44 L1333.77 1213.44 L1333.18 1213.44 L1332.6 1213.44 L1332.01 1213.44 L1331.42 1213.44 L1330.84 1213.44 L1330.25 1213.44 L1329.66 1213.44 L1329.08 1213.44 L1328.49 1213.44 L1327.9 1213.44 L1327.32 1213.44 L1326.73 1213.44 L1326.14 1213.44 L1325.56 1213.44 L1324.97 1213.44 L1324.39 1213.44 L1323.8 1213.44 L1323.21 1213.44 L1322.63 1213.44 L1322.04 1213.44 L1321.45 1213.44 L1320.87 1213.44 L1320.28 1213.44 L1319.69 1213.44 L1319.11 1213.44 L1318.52 1213.44 L1317.93 1213.44 L1317.35 1213.44 L1316.76 1213.44 L1316.18 1213.44 L1315.59 1213.44 L1315 1213.44 L1314.42 1213.44 L1313.83 1213.44 L1313.24 1213.44 L1312.66 1213.44 L1312.07 1213.44 L1311.48 1213.44 L1310.9 1213.44 L1310.31 1213.44 L1309.73 1213.44 L1309.14 1213.44 L1308.55 1213.44 L1307.97 1213.44 L1307.38 1213.44 L1306.79 1213.44 L1306.21 1213.44 L1305.62 1213.44 L1305.03 1213.44 L1304.45 1213.44 L1303.86 1213.44 L1303.27 1213.44 L1302.69 1213.44 L1302.1 1213.44 L1301.52 1213.44 L1300.93 1213.44 L1300.34 1213.44 L1299.76 1213.44 L1299.17 1213.44 L1298.58 1213.44 L1298 1213.44 L1297.41 1213.44 L1296.82 1213.44 L1296.24 1213.44 L1295.65 1213.44 L1295.06 1213.44 L1294.48 1213.44 L1293.89 1213.44 L1293.31 1213.44 L1292.72 1213.44 L1292.13 1213.44 L1291.55 1213.44 L1290.96 1213.44 L1290.37 1213.44 L1289.79 1213.44 L1289.2 1213.44 L1288.61 1213.44 L1288.03 1213.44 L1287.44 1213.44 L1286.86 1213.44 L1286.27 1213.44 L1285.68 1213.44 L1285.1 1213.44 L1284.51 1213.44 L1283.92 1213.44 L1283.34 1213.44 L1282.75 1213.44 L1282.16 1213.44 L1281.58 1213.44 L1280.99 1213.44 L1280.4 1213.44 L1279.82 1213.44 L1279.23 1213.44 L1278.65 1213.44 L1278.06 1213.44 L1277.47 1213.44 L1276.89 1213.44 L1276.3 1213.44 L1275.71 1213.44 L1275.13 1213.44 L1274.54 1213.44 L1273.95 1213.44 L1273.37 1213.44 L1272.78 1213.44 L1272.19 1213.44 L1271.61 1213.44 L1271.02 1213.44 L1270.44 1213.44 L1269.85 1213.44 L1269.26 1213.44 L1268.68 1213.44 L1268.09 1213.44 L1267.5 1213.44 L1266.92 1213.44 L1266.33 1213.44 L1265.74 1213.44 L1265.16 1213.44 L1264.57 1213.44 L1263.98 1213.44 L1263.4 1213.44 L1262.81 1213.44 L1262.23 1213.44 L1261.64 1213.44 L1261.05 1213.44 L1260.47 1213.44 L1259.88 1213.44 L1259.29 1213.44 L1258.71 1213.44 L1258.12 1213.44 L1257.53 1213.44 L1256.95 1213.44 L1256.36 1213.44 L1255.78 1213.44 L1255.19 1213.44 L1254.6 1213.44 L1254.02 1213.44 L1253.43 1213.44 L1252.84 1213.44 L1252.26 1213.44 L1251.67 1213.44 L1251.08 1213.44 L1250.5 1213.44 L1249.91 1213.44 L1249.32 1213.44 L1248.74 1213.44 L1248.15 1213.44 L1247.57 1213.44 L1246.98 1213.44 L1246.39 1213.44 L1245.81 1213.44 L1245.22 1213.44 L1244.63 1213.44 L1244.05 1213.44 L1243.46 1213.44 L1242.87 1213.44 L1242.29 1213.44 L1241.7 1213.44 L1241.11 1213.44 L1240.53 1213.44 L1239.94 1213.44 L1239.36 1213.44 L1238.77 1213.44 L1238.18 1213.44 L1237.6 1213.44 L1237.01 1213.44 L1236.42 1213.44 L1235.84 1213.44 L1235.25 1213.44 L1234.66 1213.44 L1234.08 1213.44 L1233.49 1213.44 L1232.91 1213.44 L1232.32 1213.44 L1231.73 1213.44 L1231.15 1213.44 L1230.56 1213.44 L1229.97 1213.44 L1229.39 1213.44 L1228.8 1213.44 L1228.21 1213.44 L1227.63 1213.44 L1227.04 1213.44 L1226.45 1213.44 L1225.87 1213.44 L1225.28 1213.44 L1224.7 1213.44 L1224.11 1213.44 L1223.52 1213.44 L1222.94 1213.44 L1222.35 1213.44 L1221.76 1213.44 L1221.18 1213.44 L1220.59 1213.44 L1220 1213.44 L1219.42 1213.44 L1218.83 1213.44 L1218.24 1213.44 L1217.66 1213.44 L1217.07 1213.44 L1216.49 1213.44 L1215.9 1213.44 L1215.31 1213.44 L1214.73 1213.44 L1214.14 1213.44 L1213.55 1213.44 L1212.97 1213.44 L1212.38 1213.44 L1211.79 1213.44 L1211.21 1213.44 L1210.62 1213.44 L1210.03 1213.44 L1209.45 1213.44 L1208.86 1213.44 L1208.28 1213.44 L1207.69 1213.44 L1207.1 1213.44 L1206.52 1213.44 L1205.93 1213.44 L1205.34 1213.44 L1204.76 1213.44 L1204.17 1213.44 L1203.58 1213.44 L1203 1213.44 L1202.41 1213.44 L1201.83 1213.44 L1201.24 1213.44 L1200.65 1213.44 L1200.07 1213.44 L1199.48 1213.44 L1198.89 1213.44 L1198.31 1213.44 L1197.72 1213.44 L1197.13 1213.44 L1196.55 1213.44 L1195.96 1213.44 L1195.37 1213.44 L1194.79 1213.44 L1194.2 1213.44 L1193.62 1213.44 L1193.03 1213.44 L1192.44 1213.44 L1191.86 1213.44 L1191.27 1213.44 L1190.68 1213.44 L1190.1 1213.44 L1189.51 1213.44 L1188.92 1213.44 L1188.34 1213.44 L1187.75 1213.44 L1187.16 1213.44 L1186.58 1213.44 L1185.99 1213.44 L1185.41 1213.44 L1184.82 1213.44 L1184.23 1213.44 L1183.65 1213.44 L1183.06 1213.44 L1182.47 1213.44 L1181.89 1213.44 L1181.3 1213.44 L1180.71 1213.44 L1180.13 1213.44 L1179.54 1213.44 L1178.96 1213.44 L1178.37 1213.44 L1177.78 1213.44 L1177.2 1213.44 L1176.61 1213.44 L1176.02 1213.44 L1175.44 1213.44 L1174.85 1213.44 L1174.26 1213.44 L1173.68 1213.44 L1173.09 1213.44 L1172.5 1213.44 L1171.92 1213.44 L1171.33 1213.44 L1170.75 1213.44 L1170.16 1213.44 L1169.57 1213.44 L1168.99 1213.44 L1168.4 1213.44 L1167.81 1213.44 L1167.23 1213.44 L1166.64 1213.44 L1166.05 1213.44 L1165.47 1213.44 L1164.88 1213.44 L1164.29 1213.44 L1163.71 1213.44 L1163.12 1213.44 L1162.54 1213.44 L1161.95 1213.44 L1161.36 1213.44 L1160.78 1213.44 L1160.19 1213.44 L1159.6 1213.44 L1159.02 1213.44 L1158.43 1213.44 L1157.84 1213.44 L1157.26 1213.44 L1156.67 1213.44 L1156.09 1213.44 L1155.5 1213.44 L1154.91 1213.44 L1154.33 1213.44 L1153.74 1213.44 L1153.15 1213.44 L1152.57 1213.44 L1151.98 1213.44 L1151.39 1213.44 L1150.81 1213.44 L1150.22 1213.44 L1149.63 1213.44 L1149.05 1213.44 L1148.46 1213.44 L1147.88 1213.44 L1147.29 1213.44 L1146.7 1213.44 L1146.12 1213.44 L1145.53 1213.44 L1144.94 1213.44 L1144.36 1213.44 L1143.77 1213.44 L1143.18 1213.44 L1142.6 1213.44 L1142.01 1213.44 L1141.42 1213.44 L1140.84 1213.44 L1140.25 1213.44 L1139.67 1213.44 L1139.08 1213.44 L1138.49 1213.44 L1137.91 1213.44 L1137.32 1213.44 L1136.73 1213.44 L1136.15 1213.44 L1135.56 1213.44 L1134.97 1213.44 L1134.39 1213.44 L1133.8 1213.44 L1133.21 1213.44 L1132.63 1213.44 L1132.04 1213.44 L1131.46 1213.44 L1130.87 1213.44 L1130.28 1213.44 L1129.7 1213.44 L1129.11 1213.44 L1128.52 1213.44 L1127.94 1213.44 L1127.35 1213.44 L1126.76 1213.44 L1126.18 1213.44 L1125.59 1213.44 L1125.01 1213.44 L1124.42 1213.44 L1123.83 1213.44 L1123.25 1213.44 L1122.66 1213.44 L1122.07 1213.44 L1121.49 1213.44 L1120.9 1213.44 L1120.31 1213.44 L1119.73 1213.44 L1119.14 1213.44 L1118.55 1213.44 L1117.97 1213.44 L1117.38 1213.44 L1116.8 1213.44 L1116.21 1213.44 L1115.62 1213.44 L1115.04 1213.44 L1114.45 1213.44 L1113.86 1213.44 L1113.28 1213.44 L1112.69 1213.44 L1112.1 1213.44 L1111.52 1213.44 L1110.93 1213.44 L1110.34 1213.44 L1109.76 1213.44 L1109.17 1213.44 L1108.59 1213.44 L1108 1213.44 L1107.41 1213.44 L1106.83 1213.44 L1106.24 1213.44 L1105.65 1213.44 L1105.07 1213.44 L1104.48 1213.44 L1103.89 1213.44 L1103.31 1213.44 L1102.72 1213.44 L1102.14 1213.44 L1101.55 1213.44 L1100.96 1213.44 L1100.38 1213.44 L1099.79 1213.44 L1099.2 1213.44 L1098.62 1213.44 L1098.03 1213.44 L1097.44 1213.44 L1096.86 1213.44 L1096.27 1213.44 L1095.68 1213.44 L1095.1 1213.44 L1094.51 1213.44 L1093.93 1213.44 L1093.34 1213.44 L1092.75 1213.44 L1092.17 1213.44 L1091.58 1213.44 L1090.99 1213.44 L1090.41 1213.44 L1089.82 1213.44 L1089.23 1213.44 L1088.65 1213.44 L1088.06 1213.44 L1087.47 1213.44 L1086.89 1213.44 L1086.3 1213.44 L1085.72 1213.44 L1085.13 1213.44 L1084.54 1213.44 L1083.96 1213.44 L1083.37 1213.44 L1082.78 1213.44 L1082.2 1213.44 L1081.61 1213.44 L1081.02 1213.44 L1080.44 1213.44 L1079.85 1213.44 L1079.26 1213.44 L1078.68 1213.44 L1078.09 1213.44 L1077.51 1213.44 L1076.92 1213.44 L1076.33 1213.44 L1075.75 1213.44 L1075.16 1213.44 L1074.57 1213.44 L1073.99 1213.44 L1073.4 1213.44 L1072.81 1213.44 L1072.23 1213.44 L1071.64 1213.44 L1071.06 1213.44 L1070.47 1213.44 L1069.88 1213.44 L1069.3 1213.44 L1068.71 1213.44 L1068.12 1213.44 L1067.54 1213.44 L1066.95 1213.44 L1066.36 1213.44 L1065.78 1213.44 L1065.19 1213.44 L1064.6 1213.44 L1064.02 1213.44 L1063.43 1213.44 L1062.85 1213.44 L1062.26 1213.44 L1061.67 1213.44 L1061.09 1213.44 L1060.5 1213.44 L1059.91 1213.44 L1059.33 1213.44 L1058.74 1213.44 L1058.15 1213.44 L1057.57 1213.44 L1056.98 1213.44 L1056.39 1213.44 L1055.81 1213.44 L1055.22 1213.44 L1054.64 1213.44 L1054.05 1213.44 L1053.46 1213.44 L1052.88 1213.44 L1052.29 1213.44 L1051.7 1213.44 L1051.12 1213.44 L1050.53 1213.44 L1049.94 1213.44 L1049.36 1213.44 L1048.77 1213.44 L1048.19 1213.44 L1047.6 1213.44 L1047.01 1213.44 L1046.43 1213.44 L1045.84 1213.44 L1045.25 1213.44 L1044.67 1213.44 L1044.08 1213.44 L1043.49 1213.44 L1042.91 1213.44 L1042.32 1213.44 L1041.73 1213.44 L1041.15 1213.44 L1040.56 1213.44 L1039.98 1213.44 L1039.39 1213.44 L1038.8 1213.44 L1038.22 1213.44 L1037.63 1213.44 L1037.04 1213.44 L1036.46 1213.44 L1035.87 1213.44 L1035.28 1213.44 L1034.7 1213.44 L1034.11 1213.44 L1033.52 1213.44 L1032.94 1213.44 L1032.35 1213.44 L1031.77 1213.44 L1031.18 1213.44 L1030.59 1213.44 L1030.01 1213.44 L1029.42 1213.44 L1028.83 1213.44 L1028.25 1213.44 L1027.66 1213.44 L1027.07 1213.44 L1026.49 1213.44 L1025.9 1213.44 L1025.32 1213.44 L1024.73 1213.44 L1024.14 1213.44 L1023.56 1213.44 L1022.97 1213.44 L1022.38 1213.44 L1021.8 1213.44 L1021.21 1213.44 L1020.62 1213.44 L1020.04 1213.44 L1019.45 1213.44 L1018.86 1213.44 L1018.28 1213.44 L1017.69 1213.44 L1017.11 1213.44 L1016.52 1213.44 L1015.93 1213.44 L1015.35 1213.44 L1014.76 1213.44 L1014.17 1213.44 L1013.59 1213.44 L1013 1213.44 L1012.41 1213.44 L1011.83 1213.44 L1011.24 1213.44 L1010.65 1213.44 L1010.07 1213.44 L1009.48 1213.44 L1008.9 1213.44 L1008.31 1213.44 L1007.72 1213.44 L1007.14 1213.44 L1006.55 1213.44 L1005.96 1213.44 L1005.38 1213.44 L1004.79 1213.44 L1004.2 1213.44 L1003.62 1213.44 L1003.03 1213.44 L1002.44 1213.44 L1001.86 1213.44 L1001.27 1213.44 L1000.69 1213.44 L1000.1 1213.44 L999.513 1213.44 L998.926 1213.44 L998.34 1213.44 L997.754 1213.44 L997.167 1213.44 L996.581 1213.44 L995.994 1213.44 L995.408 1213.44 L994.822 1213.44 L994.235 1213.44 L993.649 1213.44 L993.062 1213.44 L992.476 1213.44 L991.889 1213.44 L991.303 1213.44 L990.717 1213.44 L990.13 1213.44 L989.544 1213.44 L988.957 1213.44 L988.371 1213.44 L987.785 1213.44 L987.198 1213.44 L986.612 1213.44 L986.025 1213.44  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip942)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1213.52 986.612,1213.52 987.198,1213.52 987.785,1213.52 988.371,1213.52 988.957,1213.52 989.544,1213.52 990.13,1213.52 990.717,1213.52 991.303,1213.52 991.889,1213.52 992.476,1213.52 993.062,1213.52 993.649,1213.52 994.235,1213.52 994.822,1213.52 995.408,1213.52 995.994,1213.52 996.581,1213.52 997.167,1213.52 997.754,1213.52 998.34,1213.52 998.926,1213.52 999.513,1213.52 1000.1,1213.52 1000.69,1213.52 1001.27,1213.52 1001.86,1213.52 1002.44,1213.52 1003.03,1213.52 1003.62,1213.52 1004.2,1213.52 1004.79,1213.52 1005.38,1213.52 1005.96,1213.52 1006.55,1213.52 1007.14,1213.52 1007.72,1213.52 1008.31,1213.52 1008.9,1213.52 1009.48,1213.52 1010.07,1213.52 1010.65,1213.52 1011.24,1213.52 1011.83,1213.52 1012.41,1213.52 1013,1213.52 1013.59,1213.52 1014.17,1213.52 1014.76,1213.52 1015.35,1213.52 1015.93,1213.52 1016.52,1213.52 1017.11,1213.52 1017.69,1213.52 1018.28,1213.52 1018.86,1213.52 1019.45,1213.52 1020.04,1213.52 1020.62,1213.52 1021.21,1213.52 1021.8,1213.52 1022.38,1213.52 1022.97,1213.52 1023.56,1213.52 1024.14,1213.52 1024.73,1213.52 1025.32,1213.52 1025.9,1213.52 1026.49,1213.52 1027.07,1213.52 1027.66,1213.52 1028.25,1213.52 1028.83,1213.52 1029.42,1213.52 1030.01,1213.52 1030.59,1213.52 1031.18,1213.52 1031.77,1213.52 1032.35,1213.52 1032.94,1213.52 1033.52,1213.52 1034.11,1213.52 1034.7,1213.52 1035.28,1213.52 1035.87,1213.52 1036.46,1213.52 1037.04,1213.52 1037.63,1213.52 1038.22,1213.52 1038.8,1213.52 1039.39,1213.52 1039.98,1213.52 1040.56,1213.52 1041.15,1213.52 1041.73,1213.52 1042.32,1213.52 1042.91,1213.52 1043.49,1213.52 1044.08,1213.52 1044.67,1213.52 1045.25,1213.52 1045.84,1213.52 1046.43,1213.52 1047.01,1213.52 1047.6,1213.52 1048.19,1213.52 1048.77,1213.52 1049.36,1213.52 1049.94,1213.52 1050.53,1213.52 1051.12,1213.52 1051.7,1213.52 1052.29,1213.52 1052.88,1213.52 1053.46,1213.52 1054.05,1213.52 1054.64,1213.52 1055.22,1213.52 1055.81,1213.52 1056.39,1213.52 1056.98,1213.52 1057.57,1213.52 1058.15,1213.52 1058.74,1213.52 1059.33,1213.52 1059.91,1213.52 1060.5,1213.52 1061.09,1213.52 1061.67,1213.52 1062.26,1213.52 1062.85,1213.52 1063.43,1213.52 1064.02,1213.52 1064.6,1213.52 1065.19,1213.52 1065.78,1213.52 1066.36,1213.52 1066.95,1213.52 1067.54,1213.52 1068.12,1213.52 1068.71,1213.52 1069.3,1213.52 1069.88,1213.52 1070.47,1213.52 1071.06,1213.52 1071.64,1213.52 1072.23,1213.52 1072.81,1213.52 1073.4,1213.52 1073.99,1213.52 1074.57,1213.52 1075.16,1213.52 1075.75,1213.52 1076.33,1213.52 1076.92,1213.52 1077.51,1213.52 1078.09,1213.52 1078.68,1213.52 1079.26,1213.52 1079.85,1213.52 1080.44,1213.52 1081.02,1213.52 1081.61,1213.52 1082.2,1213.52 1082.78,1213.52 1083.37,1213.52 1083.96,1213.52 1084.54,1213.52 1085.13,1213.52 1085.72,1213.52 1086.3,1213.52 1086.89,1213.52 1087.47,1213.52 1088.06,1213.52 1088.65,1213.52 1089.23,1213.52 1089.82,1213.52 1090.41,1213.52 1090.99,1213.52 1091.58,1213.52 1092.17,1213.52 1092.75,1213.52 1093.34,1213.52 1093.93,1213.52 1094.51,1213.52 1095.1,1213.52 1095.68,1213.52 1096.27,1213.52 1096.86,1213.52 1097.44,1213.52 1098.03,1213.52 1098.62,1213.52 1099.2,1213.52 1099.79,1213.52 1100.38,1213.52 1100.96,1213.52 1101.55,1213.52 1102.14,1213.52 1102.72,1213.52 1103.31,1213.52 1103.89,1213.52 1104.48,1213.52 1105.07,1213.52 1105.65,1213.52 1106.24,1213.52 1106.83,1213.52 1107.41,1213.52 1108,1213.52 1108.59,1213.52 1109.17,1213.52 1109.76,1213.52 1110.34,1213.52 1110.93,1213.52 1111.52,1213.52 1112.1,1213.52 1112.69,1213.52 1113.28,1213.52 1113.86,1213.52 1114.45,1213.52 1115.04,1213.52 1115.62,1213.52 1116.21,1213.52 1116.8,1213.52 1117.38,1213.52 1117.97,1213.52 1118.55,1213.52 1119.14,1213.52 1119.73,1213.52 1120.31,1213.52 1120.9,1213.52 1121.49,1213.52 1122.07,1213.52 1122.66,1213.52 1123.25,1213.52 1123.83,1213.52 1124.42,1213.52 1125.01,1213.52 1125.59,1213.52 1126.18,1213.52 1126.76,1213.52 1127.35,1213.52 1127.94,1213.52 1128.52,1213.52 1129.11,1213.52 1129.7,1213.52 1130.28,1213.52 1130.87,1213.52 1131.46,1213.52 1132.04,1213.52 1132.63,1213.52 1133.21,1213.52 1133.8,1213.52 1134.39,1213.52 1134.97,1213.52 1135.56,1213.52 1136.15,1213.52 1136.73,1213.52 1137.32,1213.52 1137.91,1213.52 1138.49,1213.52 1139.08,1213.52 1139.67,1213.52 1140.25,1213.52 1140.84,1213.52 1141.42,1213.52 1142.01,1213.52 1142.6,1213.52 1143.18,1213.52 1143.77,1213.52 1144.36,1213.52 1144.94,1213.52 1145.53,1213.52 1146.12,1213.52 1146.7,1213.52 1147.29,1213.52 1147.88,1213.52 1148.46,1213.52 1149.05,1213.52 1149.63,1213.52 1150.22,1213.52 1150.81,1213.52 1151.39,1213.52 1151.98,1213.52 1152.57,1213.52 1153.15,1213.52 1153.74,1213.52 1154.33,1213.52 1154.91,1213.52 1155.5,1213.52 1156.09,1213.52 1156.67,1213.52 1157.26,1213.52 1157.84,1213.52 1158.43,1213.52 1159.02,1213.52 1159.6,1213.52 1160.19,1213.52 1160.78,1213.52 1161.36,1213.52 1161.95,1213.52 1162.54,1213.52 1163.12,1213.52 1163.71,1213.52 1164.29,1213.52 1164.88,1213.52 1165.47,1213.52 1166.05,1213.52 1166.64,1213.52 1167.23,1213.52 1167.81,1213.52 1168.4,1213.52 1168.99,1213.52 1169.57,1213.52 1170.16,1213.52 1170.75,1213.52 1171.33,1213.52 1171.92,1213.52 1172.5,1213.52 1173.09,1213.52 1173.68,1213.52 1174.26,1213.52 1174.85,1213.52 1175.44,1213.52 1176.02,1213.52 1176.61,1213.52 1177.2,1213.52 1177.78,1213.52 1178.37,1213.52 1178.96,1213.52 1179.54,1213.52 1180.13,1213.52 1180.71,1213.52 1181.3,1213.52 1181.89,1213.52 1182.47,1213.52 1183.06,1213.52 1183.65,1213.52 1184.23,1213.52 1184.82,1213.52 1185.41,1213.52 1185.99,1213.52 1186.58,1213.52 1187.16,1213.52 1187.75,1213.52 1188.34,1213.52 1188.92,1213.52 1189.51,1213.52 1190.1,1213.52 1190.68,1213.52 1191.27,1213.52 1191.86,1213.52 1192.44,1213.52 1193.03,1213.52 1193.62,1213.52 1194.2,1213.52 1194.79,1213.52 1195.37,1213.52 1195.96,1213.52 1196.55,1213.52 1197.13,1213.52 1197.72,1213.52 1198.31,1213.52 1198.89,1213.52 1199.48,1213.52 1200.07,1213.52 1200.65,1213.52 1201.24,1213.52 1201.83,1213.52 1202.41,1213.52 1203,1213.52 1203.58,1213.52 1204.17,1213.52 1204.76,1213.52 1205.34,1213.52 1205.93,1213.52 1206.52,1213.52 1207.1,1213.52 1207.69,1213.52 1208.28,1213.52 1208.86,1213.52 1209.45,1213.52 1210.03,1213.52 1210.62,1213.52 1211.21,1213.52 1211.79,1213.52 1212.38,1213.52 1212.97,1213.52 1213.55,1213.52 1214.14,1213.52 1214.73,1213.52 1215.31,1213.52 1215.9,1213.52 1216.49,1213.52 1217.07,1213.52 1217.66,1213.52 1218.24,1213.52 1218.83,1213.52 1219.42,1213.52 1220,1213.52 1220.59,1213.52 1221.18,1213.52 1221.76,1213.52 1222.35,1213.52 1222.94,1213.52 1223.52,1213.52 1224.11,1213.52 1224.7,1213.52 1225.28,1213.52 1225.87,1213.52 1226.45,1213.52 1227.04,1213.52 1227.63,1213.52 1228.21,1213.52 1228.8,1213.52 1229.39,1213.52 1229.97,1213.52 1230.56,1213.52 1231.15,1213.52 1231.73,1213.52 1232.32,1213.52 1232.91,1213.52 1233.49,1213.52 1234.08,1213.52 1234.66,1213.52 1235.25,1213.52 1235.84,1213.52 1236.42,1213.52 1237.01,1213.52 1237.6,1213.52 1238.18,1213.52 1238.77,1213.52 1239.36,1213.52 1239.94,1213.52 1240.53,1213.52 1241.11,1213.52 1241.7,1213.52 1242.29,1213.52 1242.87,1213.52 1243.46,1213.52 1244.05,1213.52 1244.63,1213.52 1245.22,1213.52 1245.81,1213.52 1246.39,1213.52 1246.98,1213.52 1247.57,1213.52 1248.15,1213.52 1248.74,1213.52 1249.32,1213.52 1249.91,1213.52 1250.5,1213.52 1251.08,1213.52 1251.67,1213.52 1252.26,1213.52 1252.84,1213.52 1253.43,1213.52 1254.02,1213.52 1254.6,1213.52 1255.19,1213.52 1255.78,1213.52 1256.36,1213.52 1256.95,1213.52 1257.53,1213.52 1258.12,1213.52 1258.71,1213.52 1259.29,1213.52 1259.88,1213.52 1260.47,1213.52 1261.05,1213.52 1261.64,1213.52 1262.23,1213.52 1262.81,1213.52 1263.4,1213.52 1263.98,1213.52 1264.57,1213.52 1265.16,1213.52 1265.74,1213.52 1266.33,1213.52 1266.92,1213.52 1267.5,1213.52 1268.09,1213.52 1268.68,1213.52 1269.26,1213.52 1269.85,1213.52 1270.44,1213.52 1271.02,1213.52 1271.61,1213.52 1272.19,1213.52 1272.78,1213.52 1273.37,1213.52 1273.95,1213.52 1274.54,1213.52 1275.13,1213.52 1275.71,1213.52 1276.3,1213.52 1276.89,1213.52 1277.47,1213.52 1278.06,1213.52 1278.65,1213.52 1279.23,1213.52 1279.82,1213.52 1280.4,1213.52 1280.99,1213.52 1281.58,1213.52 1282.16,1213.52 1282.75,1213.52 1283.34,1213.52 1283.92,1213.52 1284.51,1213.52 1285.1,1213.52 1285.68,1213.52 1286.27,1213.52 1286.86,1213.52 1287.44,1213.52 1288.03,1213.52 1288.61,1213.52 1289.2,1213.52 1289.79,1213.52 1290.37,1213.52 1290.96,1213.52 1291.55,1213.52 1292.13,1213.52 1292.72,1213.52 1293.31,1213.52 1293.89,1213.52 1294.48,1213.52 1295.06,1213.52 1295.65,1213.52 1296.24,1213.52 1296.82,1213.52 1297.41,1213.52 1298,1213.52 1298.58,1213.52 1299.17,1213.52 1299.76,1213.52 1300.34,1213.52 1300.93,1213.52 1301.52,1213.52 1302.1,1213.52 1302.69,1213.52 1303.27,1213.52 1303.86,1213.52 1304.45,1213.52 1305.03,1213.52 1305.62,1213.52 1306.21,1213.52 1306.79,1213.52 1307.38,1213.52 1307.97,1213.52 1308.55,1213.52 1309.14,1213.52 1309.73,1213.52 1310.31,1213.52 1310.9,1213.52 1311.48,1213.52 1312.07,1213.52 1312.66,1213.52 1313.24,1213.52 1313.83,1213.52 1314.42,1213.52 1315,1213.52 1315.59,1213.52 1316.18,1213.52 1316.76,1213.52 1317.35,1213.52 1317.93,1213.52 1318.52,1213.52 1319.11,1213.52 1319.69,1213.52 1320.28,1213.52 1320.87,1213.52 1321.45,1213.52 1322.04,1213.52 1322.63,1213.52 1323.21,1213.52 1323.8,1213.52 1324.39,1213.52 1324.97,1213.52 1325.56,1213.52 1326.14,1213.52 1326.73,1213.52 1327.32,1213.52 1327.9,1213.52 1328.49,1213.52 1329.08,1213.52 1329.66,1213.52 1330.25,1213.52 1330.84,1213.52 1331.42,1213.52 1332.01,1213.52 1332.6,1213.52 1333.18,1213.52 1333.77,1213.52 1334.35,1213.52 1334.94,1213.52 1335.53,1213.52 1336.11,1213.52 1336.7,1213.52 1337.29,1213.52 1337.87,1213.52 1338.46,1213.52 1339.05,1213.52 1339.63,1213.52 1340.22,1213.52 1340.8,1213.52 1341.39,1213.52 1341.98,1213.52 1342.56,1213.52 1343.15,1213.52 1343.74,1213.52 1344.32,1213.52 1344.91,1213.52 1345.5,1213.52 1346.08,1213.52 1346.67,1213.52 1347.26,1213.52 1347.84,1213.52 1348.43,1213.52 1349.01,1213.52 1349.6,1213.52 1350.19,1213.52 1350.77,1213.52 1351.36,1213.52 1351.95,1213.52 1352.53,1213.52 1353.12,1213.52 1353.71,1213.52 1354.29,1213.52 1354.88,1213.52 1355.47,1213.52 1356.05,1213.52 1356.64,1213.52 1357.22,1213.52 1357.81,1213.52 1358.4,1213.52 1358.98,1213.52 1359.57,1213.52 1360.16,1213.52 1360.74,1213.52 1361.33,1213.52 1361.92,1213.52 1362.5,1213.52 1363.09,1213.52 1363.68,1213.52 1364.26,1213.52 1364.85,1213.52 1365.43,1213.52 1366.02,1213.52 1366.61,1213.52 1367.19,1213.52 1367.78,1213.52 1368.37,1213.52 1368.95,1213.52 1369.54,1213.52 1370.13,1213.52 1370.71,1213.52 1371.3,1213.52 1371.88,1213.52 1372.47,1213.52 1373.06,1213.52 1373.64,1213.52 1374.23,1213.52 1374.82,1213.52 1375.4,1213.52 1375.99,1213.52 1376.58,1213.52 1377.16,1213.52 1377.75,1213.52 1378.34,1213.52 1378.92,1213.52 1379.51,1213.52 1380.09,1213.52 1380.68,1213.52 1381.27,1213.52 1381.85,1213.52 1382.44,1213.52 1383.03,1213.52 1383.61,1213.52 1384.2,1213.52 1384.79,1213.52 1385.37,1213.52 1385.96,1213.52 1386.55,1213.52 1387.13,1213.52 1387.72,1213.52 1388.3,1213.52 1388.89,1213.52 1389.48,1213.52 1390.06,1213.52 1390.65,1213.52 1391.24,1213.52 1391.82,1213.52 1392.41,1213.52 1393,1213.52 1393.58,1213.52 1394.17,1213.52 1394.75,1213.52 1395.34,1213.52 1395.93,1213.52 1396.51,1213.52 1397.1,1213.52 1397.69,1213.52 1398.27,1213.52 1398.86,1213.52 1399.45,1213.52 1400.03,1213.52 1400.62,1213.52 1401.21,1213.52 1401.79,1213.52 1402.38,1213.52 1402.96,1213.52 1403.55,1213.52 1404.14,1213.52 1404.72,1213.52 1405.31,1213.52 1405.9,1213.52 1406.48,1213.52 1407.07,1213.52 1407.66,1213.52 1408.24,1213.52 1408.83,1213.52 1409.42,1213.52 1410,1213.52 1410.59,1213.52 1411.17,1213.52 1411.76,1213.52 1412.35,1213.52 1412.93,1213.52 1413.52,1213.52 1414.11,1213.52 1414.69,1213.52 1415.28,1213.52 1415.87,1213.52 1416.45,1213.52 1417.04,1213.52 1417.63,1213.52 1418.21,1213.52 1418.8,1213.52 1419.38,1213.52 1419.97,1213.52 1420.56,1213.52 1421.14,1213.52 1421.73,1213.52 1422.32,1213.52 1422.9,1213.52 1423.49,1213.52 1424.08,1213.52 1424.66,1213.52 1425.25,1213.52 1425.83,1213.52 1426.42,1213.52 1427.01,1213.52 1427.59,1213.52 1428.18,1213.52 1428.77,1213.52 1429.35,1213.52 1429.94,1213.52 1430.53,1213.52 1431.11,1213.52 1431.7,1213.52 1432.29,1213.52 1432.87,1213.52 1433.46,1213.52 1434.04,1213.52 1434.63,1213.52 1435.22,1213.52 1435.8,1213.52 1436.39,1213.52 1436.98,1213.52 1437.56,1213.52 1438.15,1213.52 1438.74,1213.52 1439.32,1213.52 1439.91,1213.52 1440.5,1213.52 1441.08,1213.52 1441.67,1213.52 1442.25,1213.52 1442.84,1213.52 1443.43,1213.52 1444.01,1213.52 1444.6,1213.52 1445.19,1213.52 1445.77,1213.52 1446.36,1213.52 1446.95,1213.52 1447.53,1213.52 1448.12,1213.52 1448.7,1213.52 1449.29,1213.52 1449.88,1213.52 1450.46,1213.52 1451.05,1213.52 1451.64,1213.52 1452.22,1213.52 1452.81,1213.52 1453.4,1213.52 1453.98,1213.52 1454.57,1213.52 1455.16,1213.52 1455.74,1213.52 1456.33,1213.52 1456.91,1213.52 1457.5,1213.52 1458.09,1213.52 1458.67,1213.52 1459.26,1213.52 1459.85,1213.52 1460.43,1213.52 1461.02,1213.52 1461.61,1213.52 1462.19,1213.52 1462.78,1213.52 1463.37,1213.52 1463.95,1213.52 1464.54,1213.52 1465.12,1213.52 1465.71,1213.52 1466.3,1213.52 1466.88,1213.52 1467.47,1213.52 1468.06,1213.52 1468.64,1213.52 1469.23,1213.52 1469.82,1213.52 1470.4,1213.52 1470.99,1213.52 1471.57,1213.52 1472.16,1213.52 1472.75,1213.52 1473.33,1213.52 1473.92,1213.52 1474.51,1213.52 1475.09,1213.52 1475.68,1213.52 1476.27,1213.52 1476.85,1213.52 1477.44,1213.52 1478.03,1213.52 1478.61,1213.52 1479.2,1213.52 1479.78,1213.52 1480.37,1213.52 1480.96,1213.52 1481.54,1213.52 1482.13,1213.52 1482.72,1213.52 1483.3,1213.52 1483.89,1213.52 1484.48,1213.52 1485.06,1213.52 1485.65,1213.52 1486.24,1213.52 1486.82,1213.52 1487.41,1213.52 1487.99,1213.52 1488.58,1213.52 1489.17,1213.52 1489.75,1213.52 1490.34,1213.52 1490.93,1213.52 1491.51,1213.52 1492.1,1213.52 1492.69,1213.52 1493.27,1213.52 1493.86,1213.52 1494.45,1213.52 1495.03,1213.52 1495.62,1213.52 1496.2,1213.52 1496.79,1213.52 1497.38,1213.52 1497.96,1213.52 1498.55,1213.52 1499.14,1213.52 1499.72,1213.52 1500.31,1213.52 1500.9,1213.52 1501.48,1213.52 1502.07,1213.52 1502.65,1213.52 1503.24,1213.52 1503.83,1213.52 1504.41,1213.52 1505,1213.52 1505.59,1213.52 1506.17,1213.52 1506.76,1213.52 1507.35,1213.52 1507.93,1213.52 1508.52,1213.52 1509.11,1213.52 1509.69,1213.52 1510.28,1213.52 1510.86,1213.52 1511.45,1213.52 1512.04,1213.52 1512.62,1213.52 1513.21,1213.52 1513.8,1213.52 1514.38,1213.52 1514.97,1213.52 1515.56,1213.52 1516.14,1213.52 1516.73,1213.52 1517.32,1213.52 1517.9,1213.52 1518.49,1213.52 1519.07,1213.52 1519.66,1213.52 1520.25,1213.52 1520.83,1213.52 1521.42,1213.52 1522.01,1213.52 1522.59,1213.52 1523.18,1213.52 1523.77,1213.52 1524.35,1213.52 1524.94,1213.52 1525.52,1213.52 1526.11,1213.52 1526.7,1213.52 1527.28,1213.52 1527.87,1213.52 1528.46,1213.52 1529.04,1213.52 1529.63,1213.52 1530.22,1213.52 1530.8,1213.52 1531.39,1213.52 1531.98,1213.52 1532.56,1213.52 1533.15,1213.52 1533.73,1213.52 1534.32,1213.52 1534.91,1213.52 1535.49,1213.52 1536.08,1213.52 1536.67,1213.52 1537.25,1213.52 1537.84,1213.52 1538.43,1213.52 1539.01,1213.52 1539.6,1213.52 1540.19,1213.52 1540.77,1213.52 1541.36,1213.52 1541.94,1213.52 1542.53,1213.52 1543.12,1213.52 1543.7,1213.52 1544.29,1213.52 1544.88,1213.52 1545.46,1213.52 1546.05,1213.52 1546.64,1213.52 1547.22,1213.52 1547.81,1213.52 1548.4,1213.52 1548.98,1213.52 1549.57,1213.52 1550.15,1213.52 1550.74,1213.52 1551.33,1213.52 1551.91,1213.52 1552.5,1213.52 1553.09,1213.52 1553.67,1213.52 1554.26,1213.52 1554.85,1213.52 1555.43,1213.52 1556.02,1213.52 1556.6,1213.52 1557.19,1213.52 1557.78,1213.52 1558.36,1213.52 1558.95,1213.52 1559.54,1213.52 1560.12,1213.52 1560.71,1213.52 1561.3,1213.52 1561.88,1213.52 1562.47,1213.52 1563.06,1213.52 1563.64,1213.52 1564.23,1213.52 1564.81,1213.52 1565.4,1213.52 1565.99,1213.52 1566.57,1213.52 1567.16,1213.52 1567.75,1213.52 1568.33,1213.52 1568.92,1213.52 1569.51,1213.52 1570.09,1213.52 1570.68,1213.52 1571.27,1213.52 1571.85,1213.52 1572.44,1213.52 1573.02,1213.52 1573.61,1213.52 1574.2,1213.52 1574.78,1213.52 1575.37,1213.52 1575.96,1213.52 1576.54,1213.52 1577.13,1213.52 1577.72,1213.52 1578.3,1213.52 1578.89,1213.52 1579.47,1213.52 1580.06,1213.52 1580.65,1213.52 1581.23,1213.52 1581.82,1213.52 1582.41,1213.52 1582.99,1213.52 1583.58,1213.52 1584.17,1213.52 1584.75,1213.52 1585.34,1213.52 1585.93,1213.52 1586.51,1213.52 1587.1,1213.52 1587.68,1213.52 1588.27,1213.52 1588.86,1213.52 1589.44,1213.52 1590.03,1213.52 1590.62,1213.52 1591.2,1213.52 1591.79,1213.52 1592.38,1213.52 1592.96,1213.52 1593.55,1213.52 1594.14,1213.52 1594.72,1213.52 1595.31,1213.52 1595.89,1213.52 1596.48,1213.52 1597.07,1213.52 1597.65,1213.52 1598.24,1213.52 1598.83,1213.52 1599.41,1213.52 1600,1213.52 1600.59,1213.52 1601.17,1213.52 1601.76,1213.52 1602.34,1213.52 1602.93,1213.52 1603.52,1213.52 1604.1,1213.52 1604.69,1213.52 1605.28,1213.52 1605.86,1213.52 1606.45,1213.52 1607.04,1213.52 1607.62,1213.52 1608.21,1213.52 1608.8,1213.52 1609.38,1213.52 1609.97,1213.52 1610.55,1213.52 1611.14,1213.52 1611.73,1213.52 1612.31,1213.52 1612.9,1213.52 1613.49,1213.52 1614.07,1213.52 1614.66,1213.52 1615.25,1213.52 1615.83,1213.52 1616.42,1213.52 1617.01,1213.52 1617.59,1213.52 1618.18,1213.52 1618.76,1213.52 1619.35,1213.52 1619.94,1213.52 1620.52,1213.52 1621.11,1213.52 1621.7,1213.52 1622.28,1213.52 1622.87,1213.52 1623.46,1213.52 1624.04,1213.52 1624.63,1213.52 1625.22,1213.52 1625.8,1213.52 1626.39,1213.52 1626.97,1213.52 1627.56,1213.52 1628.15,1213.52 1628.73,1213.52 1629.32,1213.52 1629.91,1213.52 1630.49,1213.52 1631.08,1213.52 1631.67,1213.52 1632.25,1213.52 1632.84,1213.52 1633.42,1213.52 1634.01,1213.52 1634.6,1213.52 1635.18,1213.52 1635.77,1213.52 1636.36,1213.52 1636.94,1213.52 1637.53,1213.52 1638.12,1213.52 1638.7,1213.52 1639.29,1213.52 1639.88,1213.52 1640.46,1213.52 1641.05,1213.52 1641.63,1213.52 1642.22,1213.52 1642.81,1213.52 1643.39,1213.52 1643.98,1213.52 1644.57,1213.52 1645.15,1213.52 1645.74,1213.52 1646.33,1213.52 1646.91,1213.52 1647.5,1213.52 1648.09,1213.52 1648.67,1213.52 1649.26,1213.52 1649.84,1213.52 1650.43,1213.52 1651.02,1213.52 1651.6,1213.52 1652.19,1213.52 1652.78,1213.52 1653.36,1213.52 1653.95,1213.52 1654.54,1213.52 1655.12,1213.52 1655.71,1213.52 1656.29,1213.52 1656.88,1213.52 1657.47,1213.52 1658.05,1213.52 1658.64,1213.52 1659.23,1213.52 1659.81,1213.52 1660.4,1213.52 1660.99,1213.52 1661.57,1213.52 1662.16,1213.52 1662.75,1213.52 1663.33,1213.52 1663.92,1213.52 1664.5,1213.52 1665.09,1213.52 1665.68,1213.52 1666.26,1213.52 1666.85,1213.52 1667.44,1213.52 1668.02,1213.52 1668.61,1213.52 1669.2,1213.52 1669.78,1213.52 1670.37,1213.52 1670.96,1213.52 1671.54,1213.52 1672.13,1213.52 1672.71,1213.52 1673.3,1213.52 1673.89,1213.52 1674.47,1213.52 1675.06,1213.52 1675.65,1213.52 1676.23,1213.52 1676.82,1213.52 1677.41,1213.52 1677.99,1213.52 1678.58,1213.52 1679.17,1213.52 1679.75,1213.52 1680.34,1213.52 1680.92,1213.52 1681.51,1213.52 1682.1,1213.52 1682.68,1213.52 1683.27,1213.52 1683.86,1213.52 1684.44,1213.52 1685.03,1213.52 1685.62,1213.52 1686.2,1213.52 1686.79,1213.52 1687.37,1213.52 1687.96,1213.52 1688.55,1213.52 1689.13,1213.52 1689.72,1213.52 1690.31,1213.52 1690.89,1213.52 1691.48,1213.52 1692.07,1213.52 1692.65,1213.52 1693.24,1213.52 1693.83,1213.52 1694.41,1213.52 1695,1213.52 1695.58,1213.52 1696.17,1213.52 1696.76,1213.52 1697.34,1213.52 1697.93,1213.52 1698.52,1213.52 1699.1,1213.52 1699.69,1213.52 1700.28,1213.52 1700.86,1213.52 1701.45,1213.52 1702.04,1213.52 1702.62,1213.52 1703.21,1213.52 1703.79,1213.52 1704.38,1213.52 1704.97,1213.52 1705.55,1213.52 1706.14,1213.52 1706.73,1213.52 1707.31,1213.52 1707.9,1213.52 1708.49,1213.52 1709.07,1213.52 1709.66,1213.52 1710.24,1213.52 1710.83,1213.52 1711.42,1213.52 1712,1213.52 1712.59,1213.52 1713.18,1213.52 1713.76,1213.52 1714.35,1213.52 1714.94,1213.52 1715.52,1213.52 1716.11,1213.52 1716.7,1213.52 1717.28,1213.52 1717.87,1213.52 1718.45,1213.52 1719.04,1213.52 1719.63,1213.52 1720.21,1213.52 1720.8,1213.52 1721.39,1213.52 1721.97,1213.52 1722.56,1213.52 1723.15,1213.52 1723.73,1213.52 1724.32,1213.52 1724.91,1213.52 1725.49,1213.52 1726.08,1213.52 1726.66,1213.52 1727.25,1213.52 1727.84,1213.52 1728.42,1213.52 1729.01,1213.52 1729.6,1213.52 1730.18,1213.52 1730.77,1213.52 1731.36,1213.52 1731.94,1213.52 1732.53,1213.52 1733.11,1213.52 1733.7,1213.52 1734.29,1213.52 1734.87,1213.52 1735.46,1213.52 1736.05,1213.52 1736.63,1213.52 1737.22,1213.52 1737.81,1213.52 1738.39,1213.52 1738.98,1213.52 1739.57,1213.52 1740.15,1213.52 1740.74,1213.52 1741.32,1213.52 1741.91,1213.52 1742.5,1213.52 1743.08,1213.52 1743.67,1213.52 1744.26,1213.52 1744.84,1213.52 1745.43,1213.52 1746.02,1213.52 1746.6,1213.52 1747.19,1213.52 1747.78,1213.52 1748.36,1213.52 1748.95,1213.52 1749.53,1213.52 1750.12,1213.52 1750.71,1213.52 1751.29,1213.52 1751.88,1213.52 1752.47,1213.52 1753.05,1213.52 1753.64,1213.52 1754.23,1213.52 1754.81,1213.52 1755.4,1213.52 1755.99,1213.52 1756.57,1213.52 1757.16,1213.52 1757.74,1213.52 1758.33,1213.52 1758.92,1213.52 1759.5,1213.52 1760.09,1213.52 1760.68,1213.52 1761.26,1213.52 1761.85,1213.52 1762.44,1213.52 1763.02,1213.52 1763.61,1213.52 1764.19,1213.52 1764.78,1213.52 1765.37,1213.52 1765.95,1213.52 1766.54,1213.52 1767.13,1213.52 1767.71,1213.52 1768.3,1213.52 1768.89,1213.52 1769.47,1213.52 1770.06,1213.52 1770.65,1213.52 1771.23,1213.52 1771.82,1213.52 1772.4,1213.52 1772.99,1213.52 1773.58,1213.52 1774.16,1213.52 1774.75,1213.52 1775.34,1213.52 1775.92,1213.52 1776.51,1213.52 1777.1,1213.52 1777.68,1213.52 1778.27,1213.52 1778.86,1213.52 1779.44,1213.52 1780.03,1213.52 1780.61,1213.52 1781.2,1213.52 1781.79,1213.52 1782.37,1213.52 1782.96,1213.52 1783.55,1213.52 1784.13,1213.52 1784.72,1213.52 1785.31,1213.52 1785.89,1213.52 1786.48,1213.52 1787.06,1213.52 1787.65,1213.52 1788.24,1213.52 1788.82,1213.52 1789.41,1213.52 1790,1213.52 1790.58,1213.52 1791.17,1213.52 1791.76,1213.52 1792.34,1213.52 1792.93,1213.52 1793.52,1213.52 1794.1,1213.52 1794.69,1213.52 1795.27,1213.52 1795.86,1213.52 1796.45,1213.52 1797.03,1213.52 1797.62,1213.52 1798.21,1213.52 1798.79,1213.52 1799.38,1213.52 1799.97,1213.52 1800.55,1213.52 1801.14,1213.52 1801.73,1213.52 1802.31,1213.52 1802.9,1213.52 1803.48,1213.52 1804.07,1213.52 1804.66,1213.52 1805.24,1213.52 1805.83,1213.52 1806.42,1213.52 1807,1213.52 1807.59,1213.52 1808.18,1213.52 1808.76,1213.52 1809.35,1213.52 1809.94,1213.52 1810.52,1213.52 1811.11,1213.52 1811.69,1213.52 1812.28,1213.52 1812.87,1213.52 1813.45,1213.52 1814.04,1213.52 1814.63,1213.52 1815.21,1213.52 1815.8,1213.52 1816.39,1213.52 1816.97,1213.52 1817.56,1213.52 1818.14,1213.52 1818.73,1213.52 1819.32,1213.52 1819.9,1213.52 1820.49,1213.52 1821.08,1213.52 1821.66,1213.52 1822.25,1213.52 1822.84,1213.52 1823.42,1213.52 1824.01,1213.52 1824.6,1213.52 1825.18,1213.52 1825.77,1213.52 1826.35,1213.52 1826.94,1213.52 1827.53,1213.52 1828.11,1213.52 1828.7,1213.52 1829.29,1213.52 1829.87,1213.52 1830.46,1213.52 1831.05,1213.52 1831.63,1213.52 1832.22,1213.52 1832.81,1213.52 1833.39,1213.52 1833.98,1213.52 1834.56,1213.52 1835.15,1213.52 1835.74,1213.52 1836.32,1213.52 1836.91,1213.52 1837.5,1213.52 1838.08,1213.52 1838.67,1213.52 1839.26,1213.52 1839.84,1213.52 1840.43,1213.52 1841.01,1213.52 1841.6,1213.52 1842.19,1213.52 1842.77,1213.52 1843.36,1213.52 1843.95,1213.52 1844.53,1213.52 1845.12,1213.52 1845.71,1213.52 1846.29,1213.52 1846.88,1213.52 1847.47,1213.52 1848.05,1213.52 1848.64,1213.52 1849.22,1213.52 1849.81,1213.52 1850.4,1213.52 1850.98,1213.52 1851.57,1213.52 1852.16,1213.52 1852.74,1213.52 1853.33,1213.52 1853.92,1213.52 1854.5,1213.52 1855.09,1213.52 1855.68,1213.52 1856.26,1213.52 1856.85,1213.52 1857.43,1213.52 1858.02,1213.52 1858.61,1213.52 1859.19,1213.52 1859.78,1213.52 1860.37,1213.52 1860.95,1213.52 1861.54,1213.52 1862.13,1213.52 1862.71,1213.52 1863.3,1213.52 1863.88,1213.52 1864.47,1213.52 1865.06,1213.52 1865.64,1213.52 1866.23,1213.52 1866.82,1213.52 1867.4,1213.52 1867.99,1213.52 1868.58,1213.52 1869.16,1213.52 1869.75,1213.52 1870.34,1213.52 1870.92,1213.52 1871.51,1213.52 1872.09,1213.52 1872.68,1213.52 1873.27,1213.52 1873.85,1213.52 1874.44,1213.52 1875.03,1213.52 1875.61,1213.52 1876.2,1213.52 1876.79,1213.52 1877.37,1213.52 1877.96,1213.52 1878.55,1213.52 1879.13,1213.52 1879.72,1213.52 1880.3,1213.52 1880.89,1213.52 1881.48,1213.52 1882.06,1213.52 1882.65,1213.52 1883.24,1213.52 1883.82,1213.52 1884.41,1213.52 1885,1213.52 1885.58,1213.52 1886.17,1213.52 1886.76,1213.52 1887.34,1213.52 1887.93,1213.52 1888.51,1213.52 1889.1,1213.52 1889.69,1213.52 1890.27,1213.52 1890.86,1213.52 1891.45,1213.52 1892.03,1213.52 1892.62,1213.52 1893.21,1213.52 1893.79,1213.52 1894.38,1213.52 1894.96,1213.52 1895.55,1213.52 1896.14,1213.52 1896.72,1213.52 1897.31,1213.52 1897.9,1213.52 1898.48,1213.52 1899.07,1213.52 1899.66,1213.52 1900.24,1213.52 1900.83,1213.52 1901.42,1213.52 1902,1213.52 1902.59,1213.52 1903.17,1213.52 1903.76,1213.52 1904.35,1213.52 1904.93,1213.52 1905.52,1213.52 1906.11,1213.52 1906.69,1213.52 1907.28,1213.52 1907.87,1213.52 1908.45,1213.52 1909.04,1213.52 1909.63,1213.52 1910.21,1213.52 1910.8,1213.52 1911.38,1213.52 1911.97,1213.52 1912.56,1213.52 1913.14,1213.52 1913.73,1213.52 1914.32,1213.52 1914.9,1213.52 1915.49,1213.52 1916.08,1213.52 1916.66,1213.52 1917.25,1213.52 1917.83,1213.52 1918.42,1213.52 1919.01,1213.52 1919.59,1213.52 1920.18,1213.52 1920.77,1213.52 1921.35,1213.52 1921.94,1213.52 1922.53,1213.52 1923.11,1213.52 1923.7,1213.52 1924.29,1213.52 1924.87,1213.52 1925.46,1213.52 1926.04,1213.52 1926.63,1213.52 1927.22,1213.52 1927.8,1213.52 1928.39,1213.52 1928.98,1213.52 1929.56,1213.52 1930.15,1213.52 1930.74,1213.52 1931.32,1213.52 1931.91,1213.52 1932.5,1213.52 1933.08,1213.52 1933.67,1213.52 1934.25,1213.52 1934.84,1213.52 1935.43,1213.52 1936.01,1213.52 1936.6,1213.52 1937.19,1213.52 1937.77,1213.52 1938.36,1213.52 1938.95,1213.52 1939.53,1213.52 1940.12,1213.52 1940.71,1213.52 1941.29,1213.52 1941.88,1213.52 1942.46,1213.52 1943.05,1213.52 1943.64,1213.52 1944.22,1213.52 1944.81,1213.52 1945.4,1213.52 1945.98,1213.52 1946.57,1213.52 1947.16,1213.52 1947.74,1213.52 1948.33,1213.52 1948.91,1213.52 1949.5,1213.52 1950.09,1213.52 1950.67,1213.52 1951.26,1213.52 1951.85,1213.52 1952.43,1213.52 1953.02,1213.52 1953.61,1213.52 1954.19,1213.52 1954.78,1213.52 1955.37,1213.52 1955.95,1213.52 1956.54,1213.52 1957.12,1213.52 1957.71,1213.52 1958.3,1213.52 1958.88,1213.52 1959.47,1213.52 1960.06,1213.52 1960.64,1213.52 1961.23,1213.52 1961.82,1213.52 1962.4,1213.52 1962.99,1213.52 1963.58,1213.52 1964.16,1213.52 1964.75,1213.52 1965.33,1213.52 1965.92,1213.52 1966.51,1213.52 1967.09,1213.52 1967.68,1213.52 1968.27,1213.52 1968.85,1213.52 1969.44,1213.52 1970.03,1213.52 1970.61,1213.52 1971.2,1213.52 1971.78,1213.52 1972.37,1213.52 1972.96,1213.52 1973.54,1213.52 1974.13,1213.52 1974.72,1213.52 1975.3,1213.52 1975.89,1213.52 1976.48,1213.52 1977.06,1213.52 1977.65,1213.52 1978.24,1213.52 1978.82,1213.52 1979.41,1213.52 1979.99,1213.52 1980.58,1213.52 1981.17,1213.52 1981.75,1213.52 1982.34,1213.52 1982.93,1213.52 1983.51,1213.52 1984.1,1213.52 1984.69,1213.52 1985.27,1213.52 1985.86,1213.52 1986.45,1213.52 1987.03,1213.52 1987.62,1213.52 1988.2,1213.52 1988.79,1213.52 1989.38,1213.52 1989.96,1213.52 1990.55,1213.52 1991.14,1213.52 1991.72,1213.52 1992.31,1213.52 1992.9,1213.52 1993.48,1213.52 1994.07,1213.52 1994.65,1213.52 1995.24,1213.52 1995.83,1213.52 1996.41,1213.52 1997,1213.52 1997.59,1213.52 1998.17,1213.52 1998.76,1213.52 1999.35,1213.52 1999.93,1213.52 2000.52,1213.52 2001.11,1213.52 2001.69,1213.52 2002.28,1213.52 2002.86,1213.52 2003.45,1213.52 2004.04,1213.52 2004.62,1213.52 2005.21,1213.52 2005.8,1213.52 2006.38,1213.52 2006.97,1213.52 2007.56,1213.52 2008.14,1213.52 2008.73,1213.52 2009.32,1213.52 2009.9,1213.52 2010.49,1213.52 2011.07,1213.52 2011.66,1213.52 2012.25,1213.52 2012.83,1213.52 2013.42,1213.52 2014.01,1213.52 2014.59,1213.52 2015.18,1213.52 2015.77,1213.52 2016.35,1213.52 2016.94,1213.52 2017.53,1213.52 2018.11,1213.52 2018.7,1213.52 2019.28,1213.52 2019.87,1213.52 2020.46,1213.52 2021.04,1213.52 2021.63,1213.52 2022.22,1213.52 2022.8,1213.52 2023.39,1213.52 2023.98,1213.52 2024.56,1213.52 2025.15,1213.52 2025.73,1213.52 2026.32,1213.52 2026.91,1213.52 2027.49,1213.52 2028.08,1213.52 2028.67,1213.52 2029.25,1213.52 2029.84,1213.52 2030.43,1213.52 2031.01,1213.52 2031.6,1213.52 2032.19,1213.52 2032.77,1213.52 2033.36,1213.52 2033.94,1213.52 2034.53,1213.52 2035.12,1213.52 2035.7,1213.52 2036.29,1213.52 2036.88,1213.52 2037.46,1213.52 2038.05,1213.52 2038.64,1213.52 2039.22,1213.52 2039.81,1213.52 2040.4,1213.52 2040.98,1213.52 2041.57,1213.52 2042.15,1213.52 2042.74,1213.52 2043.33,1213.52 2043.91,1213.52 2044.5,1213.52 2045.09,1213.52 2045.67,1213.52 2046.26,1213.52 2046.85,1213.52 2047.43,1213.52 2048.02,1213.52 2048.6,1213.52 2049.19,1213.52 2049.78,1213.52 2050.36,1213.52 2050.95,1213.52 2051.54,1213.52 2052.12,1213.52 2052.71,1213.52 2053.3,1213.52 2053.88,1213.52 2054.47,1213.52 2055.06,1213.52 2055.64,1213.52 2056.23,1213.52 2056.81,1213.52 2057.4,1213.52 2057.99,1213.52 2058.57,1213.52 2059.16,1213.52 2059.75,1213.52 2060.33,1213.52 2060.92,1213.52 2061.51,1213.52 2062.09,1213.52 2062.68,1213.52 2063.27,1213.52 2063.85,1213.52 2064.44,1213.52 2065.02,1213.52 2065.61,1213.52 2066.2,1213.52 2066.78,1213.52 2067.37,1213.52 2067.96,1213.52 2068.54,1213.52 2069.13,1213.52 2069.72,1213.52 2070.3,1213.52 2070.89,1213.52 2071.48,1213.52 2072.06,1213.52 2072.65,1213.52 2073.23,1213.52 2073.82,1213.52 2074.41,1213.52 2074.99,1213.52 2075.58,1213.52 2076.17,1213.52 2076.75,1213.52 2077.34,1213.52 2077.93,1213.52 2078.51,1213.52 2079.1,1213.52 2079.68,1213.52 2080.27,1213.52 2080.86,1213.52 2081.44,1213.52 2082.03,1213.52 2082.62,1213.52 2083.2,1213.52 2083.79,1213.52 2084.38,1213.52 2084.96,1213.52 2085.55,1213.52 2086.14,1213.52 2086.72,1213.52 2087.31,1213.52 2087.89,1213.52 2088.48,1213.52 2089.07,1213.52 2089.65,1213.52 2090.24,1213.52 2090.83,1213.52 2091.41,1213.52 2092,1213.52 2092.59,1213.52 2093.17,1213.52 2093.76,1213.52 2094.35,1213.52 2094.93,1213.52 2095.52,1213.52 2096.1,1213.52 2096.69,1213.52 2097.28,1213.52 2097.86,1213.52 2098.45,1213.52 2099.04,1213.52 2099.62,1213.52 2100.21,1213.52 2100.8,1213.52 2101.38,1213.52 2101.97,1213.52 2102.55,1213.52 2103.14,1213.52 2103.73,1213.52 2104.31,1213.52 2104.9,1213.52 2105.49,1213.52 2106.07,1213.52 2106.66,1213.52 2107.25,1213.52 2107.83,1213.52 2108.42,1213.52 2109.01,1213.52 2109.59,1213.52 2110.18,1213.52 2110.76,1213.52 2111.35,1213.52 2111.94,1213.52 2112.52,1213.52 2113.11,1213.52 2113.7,1213.52 2114.28,1213.52 2114.87,1213.52 2115.46,1213.52 2116.04,1213.52 2116.63,1213.52 2117.22,1213.52 2117.8,1213.52 2118.39,1213.52 2118.97,1213.52 2119.56,1213.52 2120.15,1213.52 2120.73,1213.52 2121.32,1213.52 2121.91,1213.52 2122.49,1213.52 2123.08,1213.52 2123.67,1213.52 2124.25,1213.52 2124.84,1213.52 2125.42,1213.52 2126.01,1213.52 2126.6,1213.52 2127.18,1213.52 2127.77,1213.52 2128.36,1213.52 2128.94,1213.52 2129.53,1213.52 2130.12,1213.52 2130.7,1213.52 2131.29,1213.52 2131.88,1213.52 2132.46,1213.52 2133.05,1213.52 2133.63,1213.52 2134.22,1213.52 2134.81,1213.52 2135.39,1213.52 2135.98,1213.52 2136.57,1213.52 2137.15,1213.52 2137.74,1213.52 2138.33,1213.52 2138.91,1213.52 2139.5,1213.52 2140.09,1213.52 2140.67,1213.52 2141.26,1213.52 2141.84,1213.52 2142.43,1213.52 2143.02,1213.52 2143.6,1213.52 2144.19,1213.52 2144.78,1213.52 2145.36,1213.52 2145.95,1213.52 2146.54,1213.52 2147.12,1213.52 2147.71,1213.52 2148.3,1213.52 2148.88,1213.52 2149.47,1213.52 2150.05,1213.52 2150.64,1213.52 2151.23,1213.52 2151.81,1213.52 2152.4,1213.52 2152.99,1213.52 2153.57,1213.52 2154.16,1213.52 2154.75,1213.52 2155.33,1213.52 2155.92,1213.52 2156.5,1213.52 2157.09,1213.52 2157.68,1213.52 2158.26,1213.52 \"/>\n<polyline clip-path=\"url(#clip942)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1561.14,1193.74 1399.1,899.083 \"/>\n<polyline clip-path=\"url(#clip942)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1232.71 985.439,1193.74 2158.26,1193.74 2158.26,1232.71 985.439,1232.71 \"/>\n<path clip-path=\"url(#clip940)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip940)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip940)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip940)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip940)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip940)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip940)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip940)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip943\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip943)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip943)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip943)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip943)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip943)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip940)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip940)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip940)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip940)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip940)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip940)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip940)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip943)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip943)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip943)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip943)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip943)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip940)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip940)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip940)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip940)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip940)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip940)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip940)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip940)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip943)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-1577.5 161.555,-2922.08 162.114,-2642.16 162.673,-3848.08 163.232,-4953 163.792,-5963.63 164.351,-6910.43 164.91,-6519.22 165.469,-6234.7 166.029,-7023.99 166.588,-7759.35 167.147,-8425.69 167.706,-9009.82 168.266,-9536.67 168.825,-10023.4 169.384,-10457.3 169.943,-9399.6 170.503,-9801.69 171.062,-10171.8 171.621,-9914.57 172.18,-10214.5 172.74,-9974.95 173.299,-9766.18 173.858,-10022.3 174.417,-10232.1 174.977,-10030.3 175.536,-10183.4 176.095,-9966.51 176.655,-10088.9 177.214,-10184.3 177.773,-9982.83 178.332,-10035.9 178.892,-9580.78 179.451,-9611.51 180.01,-9631.85 180.569,-9436.95 181.129,-9048.77 181.688,-8865.92 182.247,-8866.33 182.806,-8858.51 183.366,-8826.16 183.925,-8606.86 184.484,-8418.11 185.043,-8214.24 185.603,-8016.12 186.162,-7823.28 186.721,-7749.51 187.28,-7562.48 187.84,-7478.35 188.399,-7284.16 188.958,-7210.3 189.517,-7115.91 190.077,-7019.14 190.636,-6833.1 191.195,-6739.98 191.754,-6473.65 192.314,-6210.08 192.873,-5947.4 193.432,-5710.95 193.991,-5615.7 194.551,-5461.69 195.11,-5363.51 195.669,-5265.2 196.228,-5051.87 196.788,-4840.62 197.347,-4692.07 197.906,-4603.03 198.465,-4461.3 199.025,-4370.59 199.584,-4273.98 200.143,-4184.32 200.702,-4090.99 201.262,-3946.96 201.821,-3767.33 202.38,-3673.52 202.939,-3506.19 203.499,-3380.28 204.058,-3216.72 204.617,-3031.47 205.176,-2959.18 205.736,-2747.41 206.295,-2578.96 206.854,-2478.48 207.413,-2379.82 207.973,-2222.6 208.532,-2133.99 209.091,-2079.67 209.65,-1959.75 210.21,-1843.3 210.769,-1733.54 211.328,-1626.32 211.887,-1578.85 212.447,-1532.93 213.006,-1403.76 213.565,-1280.25 214.124,-1187.87 214.684,-1072.34 215.243,-1012.02 215.802,-899.498 216.361,-834.317 216.921,-803.491 217.48,-647.25 218.039,-543.67 218.598,-473.178 219.158,-404.616 219.717,-335.373 220.276,-247.525 220.835,-234.2 221.395,-192.913 221.954,-194.285 222.513,-107.156 223.072,18.2693 223.632,23.8273 224.191,75.8243 224.75,86.2491 225.309,158.485 225.869,122.148 226.428,106.717 226.987,185.398 227.546,218.241 228.106,228.045 228.665,263.835 229.224,257.285 229.783,369.409 230.343,392.44 230.902,454.959 231.461,493.069 232.02,511.308 232.58,553.124 233.139,551.566 233.698,614.165 234.257,614.847 234.817,690.212 235.376,685.424 235.935,703.86 236.494,700.751 237.054,698.317 237.613,717.34 238.172,711.117 238.731,725.878 239.291,742.522 239.85,737.937 240.409,739.269 240.968,740.599 241.528,740.08 242.087,795.338 242.646,792.406 243.205,810.048 243.765,822.748 244.324,835.698 244.883,796.564 245.442,797.553 246.002,834.254 246.561,834.505 247.12,851.246 247.679,868.412 248.239,865.747 248.798,880.863 249.357,879.673 249.916,895.936 250.476,892.627 251.035,908.74 251.594,902.935 252.153,897.491 252.713,980.09 253.272,991.567 253.831,968.832 254.39,980.866 254.95,978.359 255.509,1006.9 256.068,1001.16 256.627,1028.07 257.187,1018.36 257.746,998.111 258.305,987.777 258.864,985.781 259.424,1013.77 259.983,1042.54 260.542,1032.99 261.101,994.548 261.661,989.272 262.22,966.839 262.779,994.597 263.338,976.361 263.898,973.434 264.457,986.93 265.016,964.379 265.575,978.844 266.135,972.013 266.694,967.375 267.253,999.881 267.812,993.145 268.372,1005.57 268.931,1033.81 269.49,1027.01 270.049,1070.73 270.609,1078.05 271.168,1064.82 271.727,1040.58 272.286,1035.59 272.846,1076.83 273.405,1083.2 273.964,1089.85 274.523,1095.86 275.083,1067.55 275.642,1079.03 276.201,1072.28 276.76,1079.22 277.32,1072.54 277.879,1097.55 278.438,1084.09 278.997,1056.91 279.557,1048.96 280.116,1076.89 280.675,1070.14 281.234,1076.57 281.794,1068.04 282.353,1059.95 282.912,1070.29 283.471,1060.87 284.031,1053.19 284.59,1044.61 285.149,1039.58 285.708,1047.07 286.268,1036.97 286.827,1011.22 287.386,989.337 287.945,967.859 288.505,978.59 289.064,1005.25 289.623,983.43 290.182,961.401 290.742,959.539 291.301,958.571 291.86,938.42 292.419,938.592 292.979,953.003 293.538,951.922 294.097,947.878 294.656,914.22 295.216,948.294 295.775,909.909 296.334,908.842 296.893,922.727 297.453,940.618 298.012,938.31 298.571,951.115 299.13,930.805 299.69,944.606 300.249,910.245 300.808,925.215 301.368,908.902 301.927,926.413 302.486,905.896 303.045,922.597 303.605,921.657 304.164,920.102 304.723,902.297 305.282,850.472 305.842,871.886 306.401,891.694 306.96,958.125 307.519,971.672 308.079,949.457 308.638,929.228 309.197,945.93 309.756,912.805 310.316,926.096 310.875,940.239 311.434,954.577 311.993,951.05 312.553,977.983 313.112,972.676 313.671,968.393 314.23,965.367 314.79,957.146 315.349,936.671 315.908,947.903 316.467,942.911 317.027,989.028 317.586,917.481 318.145,934.036 318.704,899.389 319.264,912.296 319.823,910.758 320.382,905.534 320.941,954.056 321.501,1000.92 322.06,1009.26 322.619,1017.35 323.178,1042.7 323.738,1098.89 324.297,1087.67 324.856,1045.34 325.415,1048.1 325.975,1090.13 326.534,1075.64 327.093,1082.23 327.652,1073.36 328.212,1077.31 328.771,1050.18 329.33,1025.9 329.889,1014.98 330.449,989.274 331.008,963.588 331.567,956.324 332.126,952.032 332.686,927.32 333.245,923.754 333.804,951.77 334.363,944.239 334.923,938.573 335.482,902.591 336.041,921.278 336.6,902.759 337.16,915.371 337.719,894.193 338.278,939.29 338.837,981.021 339.397,973.986 339.956,935.928 340.515,946.272 341.074,925.959 341.634,918.669 342.193,931.487 342.752,942.768 343.311,938.894 343.871,848.428 344.43,863.471 344.989,861.056 345.548,874.848 346.108,889.45 346.667,918.434 347.226,913.204 347.785,922.086 348.345,916.919 348.904,930.119 349.463,924.13 350.022,920.277 350.582,961.124 351.141,938.78 351.7,967.176 352.259,959.198 352.819,919.214 353.378,928.754 353.937,924.193 354.496,936.349 355.056,944.419 355.615,939.913 356.174,952.887 356.733,979.89 357.293,985.601 357.852,993.144 358.411,934.321 358.97,927.127 359.53,920.051 360.089,877.55 360.648,856.587 361.207,854.71 361.767,917.084 362.326,944.387 362.885,920.318 363.444,919.93 364.004,929.688 364.563,909.413 365.122,920.209 365.681,913.738 366.241,941.685 366.8,970.259 367.359,947.622 367.918,938.113 368.478,934.37 369.037,897.725 369.596,861.233 370.155,825.985 370.715,828.471 371.274,808.738 371.833,796.395 372.392,779.089 372.952,748.634 373.511,769.824 374.07,768.835 374.629,787.967 375.189,788.328 375.748,791.222 376.307,784.962 376.866,783.849 377.426,767.616 377.985,783.932 378.544,784.287 379.103,783.105 379.663,782.773 380.222,767.864 380.781,751.478 381.34,732.968 381.9,734.885 382.459,804.397 383.018,772.113 383.577,772.642 384.137,790.067 384.696,778.983 385.255,763.051 385.814,766.317 386.374,734.812 386.933,755.858 387.492,762.813 388.051,765.415 388.611,770.71 389.17,774.97 389.729,793.571 390.288,809.415 390.848,825.934 391.407,843.076 391.966,878.155 392.525,857.335 393.085,838.423 393.644,853.952 394.203,849.664 394.762,846.221 395.322,857.391 395.881,857.161 396.44,851.633 396.999,881.2 397.559,842.085 398.118,823.563 398.677,853.172 399.236,814.822 399.796,826.822 400.355,839.968 400.914,833.052 401.473,856.074 402.033,884.366 402.592,845.73 403.151,856.43 403.71,864.535 404.27,843.474 404.829,805.826 405.388,804.671 405.947,817.228 406.507,813.698 407.066,823.775 407.625,852.779 408.184,845.442 408.744,809.115 409.303,790.059 409.862,772.147 410.421,787.62 410.981,768.274 411.54,800.152 412.099,799.42 412.658,783.936 413.218,735.202 413.777,736.19 414.336,736.619 414.895,755.503 415.455,789.834 416.014,806.796 416.573,820.733 417.132,783.588 417.692,799.198 418.251,827.701 418.81,824.409 419.369,837.281 419.929,833.045 420.488,812.814 421.047,797.758 421.606,797.361 422.166,796.348 422.725,826.146 423.284,841.017 423.843,836.39 424.403,846.094 424.962,807.855 425.521,821.928 426.08,772.321 426.64,819.437 427.199,829.04 427.758,807.999 428.318,823.567 428.877,837.047 429.436,800.955 429.995,780.751 430.555,744.579 431.114,783.947 431.673,751.286 432.232,798.705 432.792,827.976 433.351,841.084 433.91,838.601 434.469,848.844 435.029,855.718 435.588,838.632 436.147,834.095 436.706,798.748 437.266,813.651 437.825,812.123 438.384,825.682 438.943,802.303 439.503,800.399 440.062,778.98 440.621,761.796 441.18,763.246 441.74,762.968 442.299,779.48 442.858,794.049 443.417,819.128 443.977,799.121 444.536,779.018 445.095,776.038 445.654,738.65 446.214,752.256 446.773,720.52 447.332,722.395 447.891,755.142 448.451,753.289 449.01,768.888 449.569,753.472 450.128,788.371 450.688,769.131 451.247,750.029 451.806,732.813 452.365,733.396 452.925,733.686 453.484,733.72 454.043,732.314 454.602,732.439 455.162,731.8 455.721,701.922 456.28,709.141 456.839,710.997 457.399,731.068 457.958,748.045 458.517,728.965 459.076,744.58 459.636,762.113 460.195,743.28 460.754,743.679 461.313,738.45 461.873,773.465 462.432,773.873 462.991,771.51 463.55,803.088 464.11,817.267 464.669,793.228 465.228,753.046 465.787,736.089 466.347,736.838 466.906,720.825 467.465,721.523 468.024,754.728 468.584,687.477 469.143,677.56 469.702,696.275 470.261,683.743 470.821,671.822 471.38,660.05 471.939,661.74 472.498,697.883 473.058,731.55 473.617,763.138 474.176,774.459 474.735,803.196 475.295,783.396 475.854,730.28 476.413,777.088 476.972,765.577 477.532,814.926 478.091,824.466 478.65,817.841 479.209,796.997 479.769,729.654 480.328,766.028 480.887,765.201 481.446,749.229 482.006,751.141 482.565,704.773 483.124,689.636 483.683,676.839 484.243,696.114 484.802,699.993 485.361,720.066 485.92,709.189 486.48,710.302 487.039,712.308 487.598,712.428 488.157,730.535 488.717,732.592 489.276,733.229 489.835,736.001 490.394,738.755 490.954,757.876 491.513,789.162 492.072,788.386 492.631,802.157 493.191,781.89 493.75,780.008 494.309,811.317 494.868,822.68 495.428,834.459 495.987,841.216 496.546,837.593 497.105,816.714 497.665,828.699 498.224,806.869 498.783,819.729 499.342,781.085 499.902,812.12 500.461,805.076 501.02,786.643 501.579,767.58 502.139,767.254 502.698,762.994 503.257,774.05 503.816,721.695 504.376,753.765 504.935,752.958 505.494,752.656 506.053,749.46 506.613,728.747 507.172,728.715 507.731,697.862 508.29,698.274 508.85,687.695 509.409,719.453 509.968,736.589 510.527,753.131 511.087,738.891 511.646,771.933 512.205,802.504 512.764,766.905 513.324,768.306 513.883,751.171 514.442,734.978 515.001,719.595 515.561,733.284 516.12,719.01 516.679,734.397 517.238,730.851 517.798,711.82 518.357,698.854 518.916,696.493 519.475,680.769 520.035,667.298 520.594,699.28 521.153,683.389 521.712,702.396 522.272,734.996 522.831,748.711 523.39,747.223 523.949,747.147 524.509,743.874 525.068,753.865 525.627,765 526.186,746.287 526.746,730.83 527.305,742.607 527.864,739.925 528.423,753.187 528.983,750.49 529.542,698.215 530.101,700.057 530.66,700.43 531.22,733.895 531.779,718.617 532.338,733.18 532.897,780.776 533.457,763.485 534.016,760.831 534.575,756.975 535.134,754.426 535.694,800.305 536.253,795.132 536.812,758.069 537.371,757.355 537.931,771.181 538.49,754.707 539.049,752.116 539.608,733.608 540.168,715.915 540.727,699.225 541.286,716.257 541.845,715.764 542.405,714.354 542.964,711.969 543.523,707.101 544.082,725.658 544.642,723.072 545.201,658.263 545.76,679.629 546.319,680.581 546.879,712.624 547.438,727.367 547.997,709.795 548.556,710.734 549.116,691.298 549.675,693.702 550.234,645.112 550.793,649.608 551.353,670.145 551.912,673.048 552.471,675.317 553.031,709.872 553.59,708.333 554.149,741.115 554.708,724.258 555.268,728.086 555.827,658.21 556.386,659.787 556.945,661.5 557.505,668.792 558.064,674.344 558.623,725.874 559.182,743.762 559.742,772.404 560.301,801.267 560.86,781.211 561.419,795.576 561.979,787.644 562.538,736.717 563.097,734.392 563.656,748.16 564.216,777.995 564.775,774.129 565.334,772.617 565.893,768.517 566.453,763.737 567.012,741.247 567.571,740.257 568.13,737.112 568.69,733.265 569.249,731.514 569.808,742.473 570.367,755.358 570.927,736.832 571.486,752.12 572.045,751.184 572.604,700.033 573.164,685.477 573.723,687.822 574.282,705.073 574.841,707.545 575.401,719.815 575.96,721.805 576.519,724.377 577.078,691.233 577.638,692.011 578.197,656.791 578.756,690.703 579.315,675.717 579.875,679.551 580.434,714.788 580.993,698.635 581.552,698.457 582.112,667.83 582.671,670.48 583.23,668.936 583.789,671.867 584.349,690.58 584.908,692.641 585.467,678.006 586.026,694.81 586.586,696.903 587.145,698.062 587.704,715.082 588.263,763.362 588.823,761.891 589.382,758.474 589.941,770.635 590.5,750.269 591.06,734.13 591.619,731.437 592.178,743.958 592.737,727.718 593.297,712.6 593.856,695.477 594.415,716.149 594.974,732.811 595.534,747.424 596.093,759.933 596.652,790.345 597.211,771.573 597.771,785.31 598.33,813.819 598.889,824.82 599.448,799.726 600.008,794.472 600.567,788.531 601.126,801.966 601.685,809.427 602.245,765.633 602.804,759.484 603.363,758.354 603.922,756.523 604.482,752.915 605.041,751.53 605.6,751.222 606.159,778.911 606.719,790.878 607.278,769.414 607.837,763.542 608.396,774.983 608.956,771.325 609.515,769.024 610.074,783.066 610.633,712.189 611.193,711.774 611.752,727.836 612.311,707.8 612.87,722.584 613.43,673.856 613.989,644.9 614.548,632.879 615.107,618.957 615.667,604.084 616.226,593.4 616.785,586.484 617.344,592.86 617.904,603.532 618.463,593.924 619.022,634.264 619.581,621.258 620.141,643.388 620.7,643.643 621.259,647.705 621.818,663.935 622.378,678.683 622.937,693.792 623.496,691.452 624.055,705.455 624.615,690.338 625.174,687.447 625.733,703.681 626.292,686.381 626.852,675.709 627.411,663.108 627.97,649.416 628.529,635.432 629.089,620.611 629.648,607.988 630.207,595.696 630.766,599.376 631.326,622.577 631.885,609.085 632.444,618.803 633.003,608.887 633.563,585.317 634.122,596.323 634.681,581.12 635.24,588.625 635.8,598.352 636.359,618.866 636.918,624.027 637.477,644.656 638.037,682.1 638.596,701.181 639.155,687.084 639.714,707.393 640.274,703.44 640.833,767.676 641.392,758.866 641.951,743.692 642.511,744.309 643.07,741.386 643.629,707.223 644.188,691.184 644.748,677.106 645.307,679.908 645.866,682.766 646.425,686.34 646.985,691.422 647.544,673.858 648.103,657.897 648.662,626.488 649.222,644.009 649.781,645.468 650.34,647.147 650.899,652.369 651.459,621.075 652.018,611.381 652.577,631.806 653.136,638.474 653.696,641.277 654.255,662.261 654.814,683.148 655.373,717.771 655.933,702.954 656.492,688.018 657.051,707.536 657.61,690.778 658.17,690.317 658.729,719.785 659.288,735.733 659.847,753.528 660.407,768.575 660.966,765.121 661.525,744.243 662.084,709.253 662.644,724.179 663.203,736.939 663.762,738.159 664.321,756.182 664.881,737.481 665.44,720.622 665.999,737.498 666.558,716.931 667.118,750.325 667.677,743.923 668.236,726.732 668.795,722.705 669.355,723 669.914,737.643 670.473,752.285 671.032,767.897 671.592,783.04 672.151,809.396 672.71,793.453 673.269,784.511 673.829,810.084 674.388,805.567 674.947,799.693 675.506,814.177 676.066,829.252 676.625,854.68 677.184,812.932 677.743,805.909 678.303,835.569 678.862,862.203 679.421,819.879 679.981,818.385 680.54,814.543 681.099,774.472 681.658,770.459 682.218,778.845 682.777,738.517 683.336,736.734 683.895,732.828 684.455,717.355 685.014,701.459 685.573,700.52 686.132,670.983 686.692,667.16 687.251,684.909 687.81,699.987 688.369,700.86 688.929,699.305 689.488,717.616 690.047,747.031 690.606,727.243 691.166,739.118 691.725,753.273 692.284,765.802 692.843,777.755 693.403,776.17 693.962,739.079 694.521,753.267 695.08,735.181 695.64,763.826 696.199,761.106 696.758,740.452 697.317,691.746 697.877,692.045 698.436,679.829 698.995,663.427 699.554,649.05 700.114,666.528 700.673,701.345 701.232,685.67 701.791,685.119 702.351,716.463 702.91,699.856 703.469,665.669 704.028,655.429 704.588,644.173 705.147,662.176 705.706,649.651 706.265,668.239 706.825,687.063 707.384,718.301 707.943,701.947 708.502,683.745 709.062,684.79 709.621,670.779 710.18,636.611 710.739,655.502 711.299,628.141 711.858,646.484 712.417,647.403 712.976,681.019 713.536,712.464 714.095,745.016 714.654,774.311 715.213,741.25 715.773,786.469 716.332,765.197 716.891,739.722 717.45,786.907 718.01,796.248 718.569,805.521 719.128,766.412 719.687,764.395 720.247,780.043 720.806,806.837 721.365,738.078 721.924,750.539 722.484,746.973 723.043,745.228 723.602,772.075 724.161,752.74 724.721,715.668 725.28,700.062 725.839,701.162 726.398,717.375 726.958,763.442 727.517,744.763 728.076,723.567 728.635,700.862 729.195,736.235 729.754,730.497 730.313,713.965 730.872,710.882 731.432,739.787 731.991,741.695 732.55,722.52 733.109,703.354 733.669,686.195 734.228,669.31 734.787,686.679 735.346,671.504 735.906,686.213 736.465,705.951 737.024,718.895 737.583,733.407 738.143,764.902 738.702,806.585 739.261,830.382 739.82,794 740.38,771.653 740.939,735.692 741.498,731.989 742.057,730.193 742.617,696.982 743.176,666.221 743.735,698.865 744.294,682.084 744.854,679.788 745.413,710.387 745.972,725.657 746.531,742.759 747.091,739.386 747.65,739.343 748.209,767.604 748.768,747.39 749.328,730.457 749.887,758.214 750.446,774.835 751.005,766.434 751.565,779.666 752.124,807.256 752.683,768.14 753.242,779.15 753.802,759.46 754.361,756.796 754.92,769.862 755.479,682.155 756.039,682.871 756.598,699.387 757.157,698.775 757.716,698.787 758.276,697.287 758.835,683.804 759.394,666.918 759.953,733.491 760.513,747.137 761.072,760.07 761.631,743.511 762.19,773.684 762.75,750.787 763.309,716.264 763.868,717.128 764.427,732.696 764.987,712.147 765.546,712.636 766.105,724.878 766.664,736.4 767.224,731.926 767.783,730.021 768.342,710.052 768.901,657.94 769.461,642.949 770.02,625.325 770.579,658.093 771.138,658.172 771.698,625 772.257,629.931 772.816,598.28 773.375,573.407 773.935,626.664 774.494,628.334 775.053,598.785 775.612,570.223 776.172,576.437 776.731,583.653 777.29,572.617 777.849,612.845 778.409,581.965 778.968,602.585 779.527,607.408 780.086,601.97 780.646,591.153 781.205,581.197 781.764,607.121 782.323,580.419 782.883,589.697 783.442,630.111 784.001,632.076 784.56,601.312 785.12,624.803 785.679,612.501 786.238,637.319 786.797,640.24 787.357,671.145 787.916,672.129 788.475,641.598 789.034,655.417 789.594,657.358 790.153,673.635 790.712,674.799 791.271,677.736 791.831,665.081 792.39,701.808 792.949,717.54 793.508,749.889 794.068,719.342 794.627,720.36 795.186,705.793 795.745,723.269 796.305,734.034 796.864,733.835 797.423,730.944 797.982,744.583 798.542,726.767 799.101,695.605 799.66,694.855 800.219,696.354 800.779,695.99 801.338,648.819 801.897,681.872 802.456,686.251 803.016,688.067 803.575,671.198 804.134,673.028 804.693,672.671 805.253,692.91 805.812,694.197 806.371,693.831 806.931,693.475 807.49,690.416 808.049,707.623 808.608,691.144 809.168,689.488 809.727,674.81 810.286,709.423 810.845,693.156 811.405,627.941 811.964,617.649 812.523,623.288 813.082,646.054 813.642,648.033 814.201,665.086 814.76,697.499 815.319,712.75 815.879,711.138 816.438,711.84 816.997,724.048 817.556,739.996 818.116,705.129 818.675,722.179 819.234,734.302 819.793,761.038 820.353,758.513 820.912,771.287 821.471,751.763 822.03,781.003 822.59,776.502 823.149,753.725 823.708,766.439 824.267,776.728 824.827,758.352 825.386,784.94 825.945,782.317 826.504,745.375 827.064,741.26 827.623,756.94 828.182,769.694 828.741,747.872 829.301,729.469 829.86,741.14 830.419,724 830.978,710.095 831.538,708.941 832.097,689.269 832.656,690.116 833.215,658.929 833.775,609.799 834.334,581.592 834.893,601.326 835.452,624.961 836.012,640.902 836.571,610.162 837.13,581.21 837.689,585.71 838.249,577.12 838.808,586.296 839.367,642.149 839.926,665.888 840.486,683.961 841.045,634.062 841.604,624.492 842.163,643.694 842.723,661.325 843.282,679.816 843.841,680.119 844.4,647.643 844.96,633.478 845.519,636.293 846.078,650.926 846.637,705.591 847.197,675.521 847.756,675.076 848.315,644.129 848.874,680.283 849.434,662.744 849.993,648.198 850.552,648.195 851.111,620.086 851.671,635.803 852.23,672.102 852.789,657.499 853.348,642.929 853.908,676.677 854.467,689.377 855.026,702.363 855.585,690.755 856.145,676.393 856.704,710.217 857.263,675.942 857.822,674.549 858.382,679.229 858.941,680.42 859.5,714.59 860.059,713.618 860.619,694.155 861.178,663.338 861.737,696.74 862.296,682.582 862.856,682.655 863.415,683.216 863.974,668.137 864.533,683.855 865.093,685.853 865.652,719.641 866.211,701.524 866.77,735.665 867.33,732.846 867.889,727.56 868.448,692.512 869.007,688.45 869.567,705.338 870.126,719.926 870.685,719.786 871.244,683.717 871.804,698.915 872.363,694.892 872.922,676.396 873.481,691.76 874.041,706.992 874.6,755.456 875.159,737.27 875.718,752.9 876.278,734.41 876.837,699.798 877.396,680.633 877.955,712.927 878.515,694.374 879.074,696.095 879.633,714.374 880.192,683.253 880.752,729.633 881.311,710.968 881.87,711.17 882.429,727.97 882.989,677.599 883.548,710.364 884.107,707.487 884.666,691.788 885.226,658.363 885.785,660.236 886.344,699.059 886.903,696.31 887.463,692.466 888.022,711.402 888.581,725.174 889.14,740.367 889.7,723.063 890.259,734.529 890.818,747.8 891.377,743.075 891.937,756.005 892.496,717.372 893.055,717.566 893.614,761.647 894.174,774.408 894.733,738.551 895.292,719.497 895.851,697.856 896.411,697.321 896.97,711.88 897.529,694.107 898.088,677.715 898.648,712.811 899.207,744.934 899.766,753.53 900.325,719.191 900.885,736.234 901.444,715.901 902.003,665.416 902.562,647.43 903.122,634.287 903.681,652.563 904.24,654.807 904.799,641.986 905.359,660.883 905.918,682.461 906.477,686.435 907.036,716.82 907.596,713.797 908.155,695.91 908.714,676.965 909.273,679.189 909.833,662.801 910.392,678.563 910.951,690.687 911.51,706.015 912.07,672.964 912.629,676.018 913.188,661.606 913.747,694.983 914.307,664.729 914.866,681.327 915.425,667.968 915.984,700.54 916.544,684.148 917.103,731.956 917.662,728.363 918.221,724.471 918.781,687.516 919.34,653.149 919.899,670.613 920.458,637.504 921.018,673.08 921.577,670.268 922.136,670.641 922.695,673.071 923.255,657.23 923.814,657.706 924.373,640.244 924.932,663.266 925.492,598.833 926.051,604.402 926.61,595.58 927.169,615.087 927.729,585.137 928.288,555.208 928.847,578.829 929.406,601.599 929.966,640.413 930.525,627.628 931.084,631.082 931.644,635.475 932.203,653.742 932.762,667.851 933.321,672.599 933.881,623.671 934.44,625.734 934.999,580.838 935.558,614.602 936.118,631.445 936.677,649.513 937.236,634.809 937.795,632.919 938.355,649.087 938.914,684.786 939.473,700.224 940.032,668.359 940.592,637.219 941.151,640.354 941.71,679.553 942.269,630.256 942.829,647.779 943.388,681.265 943.947,683.889 944.506,669.757 945.066,685.726 945.625,684.48 946.184,688.076 946.743,688.417 947.303,669.403 947.862,703.791 948.421,702.344 948.98,670.581 949.54,671.261 950.099,622.736 950.658,622.51 951.217,659.506 951.777,663.887 952.336,680.849 952.895,666.253 953.454,652.991 954.014,641.115 954.573,579.32 955.132,588.812 955.691,608.27 956.251,646.873 956.81,618.705 957.369,592.309 957.928,626.506 958.488,628.932 959.047,651.68 959.606,638.595 960.165,658.807 960.725,678.867 961.284,646.978 961.843,651.389 962.402,670.043 962.962,637.736 963.521,606.282 964.08,608.316 964.639,610.948 965.199,613.131 965.758,620.286 966.317,652.423 966.876,639.663 967.436,658.856 967.995,625.785 968.554,662.757 969.113,648.541 969.673,686.327 970.232,698.307 970.791,711.096 971.35,693.958 971.91,678.663 972.469,693.504 973.028,662.238 973.587,664.735 974.147,668.613 974.706,650.453 975.265,637.479 975.824,657.727 976.384,646.911 976.943,646.768 977.502,631.916 978.061,633.156 978.621,653.429 979.18,687.977 979.739,671.879 980.298,674.318 980.858,691.932 981.417,691.418 981.976,690.659 982.535,679.039 983.095,709.745 983.654,742.787 984.213,742.605 984.772,744.65 985.332,789.57 985.891,767.875 986.45,741.014 987.009,751.102 987.569,748.589 988.128,743.607 988.687,773.796 989.246,772.351 989.806,768.535 990.365,763.987 990.924,730.032 991.483,741.452 992.043,752.58 992.602,749.185 993.161,760.125 993.72,755.008 994.28,751.933 994.839,749.498 995.398,761.207 995.957,724.586 996.517,702.83 997.076,683.172 997.635,715.004 998.194,714.591 998.754,740.19 999.313,752.199 999.872,734.506 1000.43,736.939 1000.99,736.272 1001.55,701.986 1002.11,700.285 1002.67,749.37 1003.23,747.441 1003.79,742.935 1004.35,755.479 1004.91,750.465 1005.46,749.817 1006.02,763.043 1006.58,742.743 1007.14,736.572 1007.7,732.339 1008.26,742.763 1008.82,657.07 1009.38,689.7 1009.94,691.775 1010.5,694.509 1011.06,694.261 1011.62,676.982 1012.18,692.593 1012.73,708.396 1013.29,707.617 1013.85,672.747 1014.41,669.92 1014.97,640.171 1015.53,656.567 1016.09,656.739 1016.65,644.681 1017.21,661.662 1017.77,645.471 1018.33,652.015 1018.89,637.572 1019.45,622.326 1020.01,637.745 1020.56,637.808 1021.12,671.978 1021.68,672.851 1022.24,673.645 1022.8,703.076 1023.36,685.375 1023.92,685.995 1024.48,700.042 1025.04,711.701 1025.6,674.98 1026.16,690.321 1026.72,676.032 1027.28,678.08 1027.83,662.186 1028.39,681.563 1028.95,698.346 1029.51,712.757 1030.07,712.391 1030.63,709.783 1031.19,692.293 1031.75,671.157 1032.31,688.595 1032.87,670.817 1033.43,685.084 1033.99,699.832 1034.55,749.361 1035.1,748.195 1035.66,714.176 1036.22,760.645 1036.78,760.094 1037.34,738.629 1037.9,750.716 1038.46,747.232 1039.02,713.954 1039.58,729.148 1040.14,706.225 1040.7,685.678 1041.26,683.704 1041.82,685.41 1042.38,687.926 1042.93,655.251 1043.49,674.985 1044.05,660.869 1044.61,647.832 1045.17,632.325 1045.73,634.83 1046.29,620.742 1046.85,674.607 1047.41,678.266 1047.97,696.112 1048.53,677.044 1049.09,663.866 1049.65,652.337 1050.2,652.811 1050.76,653.111 1051.32,669.418 1051.88,654.825 1052.44,639.951 1053,642.915 1053.56,646.164 1054.12,699.596 1054.68,699.514 1055.24,717.145 1055.8,686.099 1056.36,684.116 1056.92,688.518 1057.48,675.336 1058.03,674.639 1058.59,678.957 1059.15,674.8 1059.71,688.334 1060.27,704.006 1060.83,687.563 1061.39,686.95 1061.95,704.684 1062.51,738.769 1063.07,767.586 1063.63,761.976 1064.19,755.248 1064.75,766.684 1065.3,777.331 1065.86,758.315 1066.42,741.429 1066.98,735.884 1067.54,729.804 1068.1,728.003 1068.66,738.649 1069.22,753.693 1069.78,761.258 1070.34,774.219 1070.9,770.194 1071.46,798.28 1072.02,825.341 1072.57,849.016 1073.13,857.713 1073.69,834.133 1074.25,777.05 1074.81,757.034 1075.37,785.808 1075.93,766.714 1076.49,791.86 1077.05,757.536 1077.61,771.252 1078.17,782.521 1078.73,763.732 1079.29,749.708 1079.85,730.25 1080.4,729.602 1080.96,730.175 1081.52,731.461 1082.08,725.409 1082.64,736.534 1083.2,700.48 1083.76,712.805 1084.32,694.646 1084.88,676.685 1085.44,659.674 1086,662.114 1086.56,713.106 1087.12,693.461 1087.67,692.629 1088.23,674.562 1088.79,644.348 1089.35,661.685 1089.91,645.611 1090.47,681.355 1091.03,665.342 1091.59,668.116 1092.15,655.405 1092.71,639.374 1093.27,660.368 1093.83,693.459 1094.39,645.252 1094.94,677.723 1095.5,639.985 1096.06,657.472 1096.62,641.963 1097.18,660.903 1097.74,662.864 1098.3,645.4 1098.86,663.662 1099.42,644.621 1099.98,632.319 1100.54,651.798 1101.1,656.25 1101.66,658.841 1102.22,661.21 1102.77,695.952 1103.33,694.642 1103.89,677.242 1104.45,660.639 1105.01,658.214 1105.57,663.29 1106.13,664.435 1106.69,647.807 1107.25,620.707 1107.81,658.583 1108.37,646.745 1108.93,692.058 1109.49,704.964 1110.04,719.021 1110.6,731.764 1111.16,726.373 1111.72,742.318 1112.28,738.469 1112.84,732.557 1113.4,698.596 1113.96,716.392 1114.52,715.646 1115.08,714.673 1115.64,729.372 1116.2,726.319 1116.76,739.99 1117.31,753.662 1117.87,732.102 1118.43,726.332 1118.99,720.654 1119.55,719.627 1120.11,686.558 1120.67,703.139 1121.23,720.618 1121.79,699.65 1122.35,728.742 1122.91,728.256 1123.47,743.072 1124.03,739.683 1124.59,719.893 1125.14,721.217 1125.7,701.333 1126.26,715.311 1126.82,713.384 1127.38,696.156 1127.94,694.556 1128.5,679.901 1129.06,663.085 1129.62,675.251 1130.18,675.112 1130.74,676.585 1131.3,689.251 1131.86,705.006 1132.41,687.345 1132.97,703.647 1133.53,700.237 1134.09,716.241 1134.65,699.205 1135.21,684.021 1135.77,633.849 1136.33,651.654 1136.89,618.061 1137.45,624.703 1138.01,626.292 1138.57,647.736 1139.13,699.96 1139.68,699.065 1140.24,677.064 1140.8,707.703 1141.36,707.868 1141.92,693.281 1142.48,658.301 1143.04,646.984 1143.6,666.865 1144.16,655.731 1144.72,703.529 1145.28,683.926 1145.84,714.771 1146.4,715.357 1146.96,711.173 1147.51,705.874 1148.07,755.349 1148.63,765.234 1149.19,712.504 1149.75,715.015 1150.31,730.3 1150.87,730.306 1151.43,728.545 1151.99,758.04 1152.55,739.41 1153.11,723.538 1153.67,704.081 1154.23,720.697 1154.78,734.641 1155.34,729.632 1155.9,711.492 1156.46,695.617 1157.02,691.953 1157.58,675.32 1158.14,688.153 1158.7,703.288 1159.26,685.602 1159.82,685.738 1160.38,656.597 1160.94,642.32 1161.5,662.022 1162.05,648.612 1162.61,635.097 1163.17,621.667 1163.73,605.838 1164.29,549.079 1164.85,556.07 1165.41,574.406 1165.97,609.02 1166.53,644.158 1167.09,629.343 1167.65,631.406 1168.21,620.068 1168.77,639.484 1169.33,628.717 1169.88,633.064 1170.44,635.052 1171,622.864 1171.56,641.264 1172.12,627.282 1172.68,627.75 1173.24,630.461 1173.8,650.242 1174.36,656.216 1174.92,642.422 1175.48,643.456 1176.04,680.065 1176.6,708.742 1177.15,727.56 1177.71,708.421 1178.27,721.301 1178.83,718.613 1179.39,700.262 1179.95,684.688 1180.51,670.853 1181.07,653.246 1181.63,624.971 1182.19,629.263 1182.75,629.656 1183.31,646.179 1183.87,646.45 1184.43,630.778 1184.98,670.478 1185.54,671.533 1186.1,687.243 1186.66,684.304 1187.22,668.555 1187.78,720.666 1188.34,718.527 1188.9,716.905 1189.46,732.927 1190.02,712.526 1190.58,677.815 1191.14,692.724 1191.7,676.757 1192.25,677.271 1192.81,677.354 1193.37,680.826 1193.93,680.627 1194.49,696.217 1195.05,695.746 1195.61,709.069 1196.17,708.328 1196.73,690.184 1197.29,656.248 1197.85,658.281 1198.41,643.678 1198.97,627.804 1199.52,646.597 1200.08,634.965 1200.64,590.299 1201.2,594.495 1201.76,566.94 1202.32,560.919 1202.88,585.551 1203.44,592.429 1204,585.362 1204.56,590.829 1205.12,615.33 1205.68,632.46 1206.24,651.631 1206.8,688.63 1207.35,751.492 1207.91,748.542 1208.47,743.148 1209.03,726.284 1209.59,726.047 1210.15,725.675 1210.71,726.817 1211.27,712.595 1211.83,695.5 1212.39,725.887 1212.95,693.581 1213.51,692.707 1214.07,709.325 1214.62,708.276 1215.18,690.663 1215.74,720.856 1216.3,720.901 1216.86,703.579 1217.42,669.551 1217.98,688.699 1218.54,690.072 1219.1,642.8 1219.66,647.927 1220.22,650.196 1220.78,664.445 1221.34,698.571 1221.89,712.572 1222.45,709.689 1223.01,736.291 1223.57,733.031 1224.13,727.111 1224.69,709.383 1225.25,676.06 1225.81,664.515 1226.37,682.676 1226.93,635.029 1227.49,621.161 1228.05,608.06 1228.61,626.16 1229.17,597.495 1229.72,639.151 1230.28,627.925 1230.84,633.31 1231.4,619.237 1231.96,606.482 1232.52,629.889 1233.08,617.511 1233.64,621.881 1234.2,622.518 1234.76,659.726 1235.32,644.972 1235.88,663.249 1236.44,663.964 1236.99,678.754 1237.55,678.609 1238.11,630.933 1238.67,600.941 1239.23,601.713 1239.79,611.808 1240.35,598.806 1240.91,601.971 1241.47,607.616 1242.03,628.593 1242.59,614.794 1243.15,616.747 1243.71,656.226 1244.26,605.482 1244.82,610.796 1245.38,651.046 1245.94,653.692 1246.5,622.826 1247.06,611.971 1247.62,634.325 1248.18,621.985 1248.74,626.926 1249.3,641.986 1249.86,679.504 1250.42,665.818 1250.98,696.902 1251.54,680.979 1252.09,668.001 1252.65,703.22 1253.21,702.043 1253.77,717.598 1254.33,716.98 1254.89,701.641 1255.45,700.514 1256.01,719.933 1256.57,736.633 1257.13,716.557 1257.69,712.152 1258.25,709.172 1258.81,705.543 1259.36,720.236 1259.92,702.572 1260.48,691.363 1261.04,708.894 1261.6,740.749 1262.16,722.93 1262.72,720.238 1263.28,745.943 1263.84,757.213 1264.4,786.254 1264.96,782.977 1265.52,762.647 1266.08,738.877 1266.63,754.314 1267.19,766.776 1267.75,745.625 1268.31,707.789 1268.87,723.557 1269.43,704.475 1269.99,749.552 1270.55,745.559 1271.11,759.873 1271.67,784.835 1272.23,747.482 1272.79,745.419 1273.35,756.212 1273.91,716.91 1274.46,678.74 1275.02,694.588 1275.58,692.828 1276.14,723.258 1276.7,721.468 1277.26,703.982 1277.82,735.939 1278.38,747.249 1278.94,708.909 1279.5,678.817 1280.06,681.029 1280.62,680.66 1281.18,649.525 1281.73,669.037 1282.29,701.613 1282.85,687.633 1283.41,686.733 1283.97,652.098 1284.53,637.24 1285.09,656.424 1285.65,657.897 1286.21,642.775 1286.77,692.27 1287.33,691.735 1287.89,692.153 1288.45,691.531 1289,690.919 1289.56,704.507 1290.12,688.464 1290.68,668.623 1291.24,704.297 1291.8,670.923 1292.36,656.406 1292.92,694.511 1293.48,697.42 1294.04,714.262 1294.6,697.867 1295.16,730.865 1295.72,725.645 1296.28,708.096 1296.83,727.642 1297.39,711.474 1297.95,710.22 1298.51,741.178 1299.07,719.823 1299.63,735.678 1300.19,715.703 1300.75,727.283 1301.31,690.944 1301.87,689.409 1302.43,721.746 1302.99,733.887 1303.55,733.697 1304.1,744.972 1304.66,741.136 1305.22,723.376 1305.78,702.224 1306.34,668.828 1306.9,685.26 1307.46,685.962 1308.02,656.236 1308.58,675.783 1309.14,675.131 1309.7,673.192 1310.26,691.611 1310.82,676.587 1311.38,695.254 1311.93,695.875 1312.49,711.071 1313.05,690.502 1313.61,659.912 1314.17,665.2 1314.73,645.01 1315.29,615.529 1315.85,606.415 1316.41,640.219 1316.97,660.818 1317.53,646.631 1318.09,646.234 1318.65,667.444 1319.2,683.235 1319.76,682.157 1320.32,685.481 1320.88,638.352 1321.44,657.476 1322,661.377 1322.56,679.698 1323.12,663.437 1323.68,681.789 1324.24,699.49 1324.8,696.445 1325.36,715.741 1325.92,713.525 1326.47,712.656 1327.03,712.691 1327.59,683.467 1328.15,683.057 1328.71,666.124 1329.27,666.265 1329.83,688.425 1330.39,703.368 1330.95,684.69 1331.51,666.609 1332.07,684.172 1332.63,686.115 1333.19,705.631 1333.75,737.027 1334.3,717.307 1334.86,731.618 1335.42,714.051 1335.98,729.351 1336.54,724.391 1337.1,724.254 1337.66,722.182 1338.22,755.106 1338.78,753.499 1339.34,766.019 1339.9,746.952 1340.46,775.131 1341.02,800.143 1341.57,809.473 1342.13,800.716 1342.69,824.092 1343.25,748.911 1343.81,781.614 1344.37,727.942 1344.93,709.009 1345.49,702.453 1346.05,688.583 1346.61,687.116 1347.17,686.34 1347.73,686.242 1348.29,671.234 1348.84,641.571 1349.4,625.785 1349.96,661.59 1350.52,663.499 1351.08,664.122 1351.64,682.956 1352.2,665.146 1352.76,648.98 1353.32,654.263 1353.88,655.288 1354.44,673.13 1355,669.167 1355.56,651.289 1356.12,669.779 1356.67,669.283 1357.23,671.641 1357.79,654.369 1358.35,623.897 1358.91,658.344 1359.47,709.261 1360.03,728.395 1360.59,726.222 1361.15,787.024 1361.71,733.357 1362.27,744.291 1362.83,722.867 1363.39,739.143 1363.94,723.16 1364.5,704.132 1365.06,686.473 1365.62,685.54 1366.18,721.339 1366.74,685.407 1367.3,713.482 1367.86,694.361 1368.42,696.621 1368.98,692.742 1369.54,693.076 1370.1,695.536 1370.66,710.659 1371.21,695.121 1371.77,675.689 1372.33,708.833 1372.89,710.394 1373.45,722.412 1374.01,738.688 1374.57,721.121 1375.13,718.674 1375.69,717.257 1376.25,716.514 1376.81,730.288 1377.37,711.684 1377.93,741.701 1378.49,770.229 1379.04,780.502 1379.6,758.667 1380.16,756.907 1380.72,767.361 1381.28,747.766 1381.84,725.515 1382.4,708.866 1382.96,708.375 1383.52,706.648 1384.08,722.907 1384.64,719.114 1385.2,718.025 1385.76,700.663 1386.31,683.882 1386.87,714.418 1387.43,696.919 1387.99,695.716 1388.55,679.714 1389.11,649.793 1389.67,617.727 1390.23,654.145 1390.79,659.21 1391.35,644.791 1391.91,631.473 1392.47,633.561 1393.03,633.662 1393.58,618.072 1394.14,588.441 1394.7,591.907 1395.26,615.012 1395.82,599.338 1396.38,605.847 1396.94,623.546 1397.5,613.134 1398.06,615.569 1398.62,652.69 1399.18,621.651 1399.74,609.493 1400.3,644.259 1400.86,646.809 1401.41,645.126 1401.97,631.81 1402.53,668.672 1403.09,652.425 1403.65,649.171 1404.21,651.795 1404.77,664.326 1405.33,680.791 1405.89,680.394 1406.45,667.402 1407.01,664.321 1407.57,632.747 1408.13,617.287 1408.68,657.038 1409.24,678.596 1409.8,666.525 1410.36,601.386 1410.92,590.472 1411.48,595.47 1412.04,633.58 1412.6,654.74 1413.16,639.853 1413.72,644.893 1414.28,617.991 1414.84,621.504 1415.4,591.661 1415.95,578.368 1416.51,597.512 1417.07,552.03 1417.63,559.375 1418.19,532.743 1418.75,474.005 1419.31,535.04 1419.87,512.83 1420.43,488.478 1420.99,469.662 1421.55,467.658 1422.11,512.948 1422.67,521.938 1423.23,546.647 1423.78,554.283 1424.34,564.598 1424.9,588.965 1425.46,610.944 1426.02,659.529 1426.58,677.593 1427.14,680.623 1427.7,697.788 1428.26,696.803 1428.82,712.598 1429.38,725.834 1429.94,708.187 1430.5,723.423 1431.05,720.296 1431.61,733.469 1432.17,713.039 1432.73,774.677 1433.29,739.178 1433.85,750.868 1434.41,749.513 1434.97,728.228 1435.53,740.015 1436.09,771.496 1436.65,733.381 1437.21,715.134 1437.77,697.713 1438.33,648.698 1438.88,651.001 1439.44,734.219 1440,751.832 1440.56,758.236 1441.12,740.778 1441.68,725.217 1442.24,756.823 1442.8,737.447 1443.36,749.831 1443.92,780.495 1444.48,788.982 1445.04,782.353 1445.6,747.223 1446.15,680.211 1446.71,665.497 1447.27,653.111 1447.83,638.734 1448.39,625.819 1448.95,592.481 1449.51,629.337 1450.07,581.428 1450.63,565.944 1451.19,559.638 1451.75,600.002 1452.31,668.395 1452.87,654.501 1453.42,587.426 1453.98,606.833 1454.54,642.524 1455.1,631.019 1455.66,566.436 1456.22,554.179 1456.78,564.358 1457.34,553.761 1457.9,543.511 1458.46,566.245 1459.02,575.843 1459.58,597.199 1460.14,572.253 1460.7,592.517 1461.25,595.223 1461.81,597.558 1462.37,618.582 1462.93,623.511 1463.49,627.987 1464.05,647.705 1464.61,648.947 1465.17,669.457 1465.73,684.71 1466.29,702.803 1466.85,686.752 1467.41,668.653 1467.97,673.437 1468.52,675.897 1469.08,672.753 1469.64,674.16 1470.2,659.778 1470.76,677.002 1471.32,692.404 1471.88,690.76 1472.44,688.15 1473,675.663 1473.56,693.787 1474.12,676.353 1474.68,692.495 1475.24,694.156 1475.79,695.143 1476.35,696.734 1476.91,731.06 1477.47,710.709 1478.03,755.637 1478.59,769.294 1479.15,750.126 1479.71,744.909 1480.27,740.151 1480.83,751.957 1481.39,811.855 1481.95,819.094 1482.51,814.719 1483.07,810.021 1483.62,738.894 1484.18,750.864 1484.74,732.089 1485.3,727.412 1485.86,770.445 1486.42,812.586 1486.98,853.519 1487.54,842.227 1488.1,819.379 1488.66,815.806 1489.22,793.675 1489.78,789.809 1490.34,752.403 1490.89,763.699 1491.45,758.434 1492.01,737.981 1492.57,717.101 1493.13,728.235 1493.69,725.983 1494.25,741.172 1494.81,769.674 1495.37,765.477 1495.93,743.05 1496.49,737.237 1497.05,734.417 1497.61,682.834 1498.16,679.384 1498.72,681.625 1499.28,684.059 1499.84,699.231 1500.4,692.38 1500.96,692.324 1501.52,693.29 1502.08,692.492 1502.64,706.696 1503.2,721.762 1503.76,733.393 1504.32,716.432 1504.88,683.21 1505.44,713.929 1505.99,713.866 1506.55,680.473 1507.11,730.001 1507.67,729.387 1508.23,725.935 1508.79,722.646 1509.35,718.318 1509.91,699.535 1510.47,695.102 1511.03,697.139 1511.59,715.714 1512.15,734.954 1512.71,712.494 1513.26,693.542 1513.82,708.082 1514.38,721.687 1514.94,716.509 1515.5,718.032 1516.06,703.023 1516.62,703.059 1517.18,689.985 1517.74,707.746 1518.3,690.214 1518.86,675.987 1519.42,660.532 1519.98,714.472 1520.53,694.085 1521.09,708.171 1521.65,690.089 1522.21,723.342 1522.77,688.707 1523.33,672.618 1523.89,622.814 1524.45,624.902 1525.01,626.763 1525.57,628.379 1526.13,660.888 1526.69,676.068 1527.25,658.896 1527.81,662.057 1528.36,697.382 1528.92,758.14 1529.48,753.614 1530.04,767.402 1530.6,763.768 1531.16,759.451 1531.72,787.392 1532.28,780.841 1532.84,757.714 1533.4,739.366 1533.96,736.103 1534.52,781.842 1535.08,758.049 1535.63,752.75 1536.19,780.81 1536.75,729.226 1537.31,729.492 1537.87,741.252 1538.43,768.3 1538.99,733.06 1539.55,748.045 1540.11,695.423 1540.67,692.682 1541.23,674.081 1541.79,641.595 1542.35,646.001 1542.9,661.675 1543.46,662.837 1544.02,665.776 1544.58,650.856 1545.14,652.436 1545.7,665.68 1546.26,666.386 1546.82,664.658 1547.38,669.411 1547.94,669.56 1548.5,632.439 1549.06,654.793 1549.62,654.467 1550.18,641.038 1550.73,643.866 1551.29,661.218 1551.85,664.399 1552.41,662.233 1552.97,678.084 1553.53,679.975 1554.09,679.321 1554.65,729.178 1555.21,724.482 1555.77,705.408 1556.33,691.541 1556.89,656.225 1557.45,642.135 1558,644.462 1558.56,659.413 1559.12,644 1559.68,646.402 1560.24,651.445 1560.8,669.151 1561.36,687.688 1561.92,656.239 1562.48,676.723 1563.04,645.217 1563.6,628.697 1564.16,612.626 1564.72,617.337 1565.28,621.47 1565.83,622.336 1566.39,622.471 1566.95,674.122 1567.51,690.454 1568.07,701.417 1568.63,666.7 1569.19,750.249 1569.75,747.247 1570.31,742.217 1570.87,723.964 1571.43,709.97 1571.99,693.449 1572.55,708.829 1573.1,691.079 1573.66,695.01 1574.22,711.991 1574.78,661.735 1575.34,664.553 1575.9,650.937 1576.46,685.797 1577.02,752.742 1577.58,748.947 1578.14,729.939 1578.7,742.581 1579.26,740.395 1579.82,751.888 1580.37,747.321 1580.93,727.034 1581.49,770.629 1582.05,752.427 1582.61,765.648 1583.17,781.587 1583.73,731.683 1584.29,742.265 1584.85,759.129 1585.41,739.138 1585.97,717.229 1586.53,715.628 1587.09,726.506 1587.65,723.562 1588.2,688.033 1588.76,676.393 1589.32,661.607 1589.88,645.566 1590.44,665.153 1591,633.66 1591.56,631.966 1592.12,602.821 1592.68,611.942 1593.24,628.576 1593.8,664.235 1594.36,651.824 1594.92,652.796 1595.47,641.466 1596.03,644.173 1596.59,610.998 1597.15,597.556 1597.71,613.268 1598.27,605.867 1598.83,608.332 1599.39,598.181 1599.95,586.525 1600.51,594.472 1601.07,629.961 1601.63,601.256 1602.19,623.427 1602.74,643.399 1603.3,611.529 1603.86,582.004 1604.42,603.382 1604.98,625.707 1605.54,629.159 1606.1,598.731 1606.66,604.399 1607.22,610.877 1607.78,630.071 1608.34,667.93 1608.9,636.957 1609.46,655.781 1610.02,643.048 1610.57,648.512 1611.13,649.445 1611.69,667.246 1612.25,728.484 1612.81,713.259 1613.37,713.872 1613.93,700.395 1614.49,681.309 1615.05,698.235 1615.61,684.687 1616.17,718.757 1616.73,731.982 1617.29,763.112 1617.84,759.848 1618.4,784.117 1618.96,810.079 1619.52,774.642 1620.08,769.591 1620.64,764.489 1621.2,773.097 1621.76,774.077 1622.32,738.773 1622.88,722.432 1623.44,719.416 1624,701.513 1624.56,704.003 1625.11,733.037 1625.67,745.206 1626.23,725.487 1626.79,736.467 1627.35,701.898 1627.91,699.344 1628.47,697.405 1629.03,680.735 1629.59,678.541 1630.15,664.26 1630.71,649.349 1631.27,666.076 1631.83,729.487 1632.39,744.92 1632.94,740.842 1633.5,720.075 1634.06,720.485 1634.62,724.496 1635.18,723.103 1635.74,722.059 1636.3,734.42 1636.86,763.4 1637.42,744.676 1637.98,723.535 1638.54,689.258 1639.1,701.104 1639.66,702.477 1640.21,717.329 1640.77,696.46 1641.33,711.081 1641.89,692.61 1642.45,672.946 1643.01,689.357 1643.57,672.158 1644.13,688.397 1644.69,670.843 1645.25,668.054 1645.81,684.327 1646.37,717.212 1646.93,696.685 1647.48,662.452 1648.04,700.204 1648.6,713.505 1649.16,727.464 1649.72,725.122 1650.28,724.926 1650.84,673.947 1651.4,642.688 1651.96,563.683 1652.52,569.027 1653.08,561.893 1653.64,569.862 1654.2,565.236 1654.76,536.024 1655.31,555.719 1655.87,561.696 1656.43,566.871 1656.99,588.321 1657.55,563.76 1658.11,603.813 1658.67,613.079 1659.23,618.279 1659.79,603.768 1660.35,590.045 1660.91,613.739 1661.47,631.61 1662.03,666.488 1662.58,667.671 1663.14,654.453 1663.7,641.045 1664.26,625.539 1664.82,598.291 1665.38,585.52 1665.94,607.286 1666.5,642.098 1667.06,644.026 1667.62,665.38 1668.18,653.492 1668.74,656.181 1669.3,652.681 1669.85,701.508 1670.41,700.223 1670.97,719.052 1671.53,765.543 1672.09,747.362 1672.65,760.067 1673.21,758.625 1673.77,724.999 1674.33,722.89 1674.89,738.023 1675.45,732.765 1676.01,749.275 1676.57,729.937 1677.13,712.39 1677.68,692.553 1678.24,704.925 1678.8,702.582 1679.36,699.912 1679.92,701.119 1680.48,702.318 1681.04,717.081 1681.6,713.824 1682.16,743.763 1682.72,708.104 1683.28,726.971 1683.84,723.306 1684.4,705.232 1684.95,702.684 1685.51,684.836 1686.07,696.244 1686.63,708.072 1687.19,705.743 1687.75,624.482 1688.31,673.728 1688.87,660.276 1689.43,660.466 1689.99,663.407 1690.55,650.006 1691.11,670.713 1691.67,670.766 1692.23,687.044 1692.78,637.57 1693.34,671.776 1693.9,642.352 1694.46,646.049 1695.02,679.821 1695.58,681.898 1696.14,629.67 1696.7,635.259 1697.26,651.436 1697.82,648.83 1698.38,667.245 1698.94,648.12 1699.5,652.621 1700.05,623.137 1700.61,625.81 1701.17,607.945 1701.73,659.825 1702.29,674.299 1702.85,705.467 1703.41,707.516 1703.97,711.399 1704.53,709.081 1705.09,723.095 1705.65,722.891 1706.21,723.179 1706.77,720.765 1707.32,735.043 1707.88,767.121 1708.44,727.318 1709,726.711 1709.56,724.789 1710.12,748.363 1710.68,746.815 1711.24,714.49 1711.8,698.772 1712.36,697.588 1712.92,712.52 1713.48,726.207 1714.04,736.643 1714.6,733.618 1715.15,716.519 1715.71,733.361 1716.27,728.579 1716.83,722.497 1717.39,703.208 1717.95,705.056 1718.51,703.182 1719.07,749.855 1719.63,718.143 1720.19,716.596 1720.75,698.176 1721.31,747.542 1721.87,739.947 1722.42,709.13 1722.98,724.168 1723.54,723.688 1724.1,704.516 1724.66,733.695 1725.22,730.977 1725.78,742.595 1726.34,757.263 1726.9,785.26 1727.46,766.781 1728.02,777.856 1728.58,805.894 1729.14,784.57 1729.69,764.531 1730.25,758.209 1730.81,754.519 1731.37,752.31 1731.93,762.95 1732.49,742.165 1733.05,736.875 1733.61,701.354 1734.17,715.647 1734.73,731.498 1735.29,726.218 1735.85,724.016 1736.41,737.4 1736.97,732.985 1737.52,742.845 1738.08,740.019 1738.64,737.143 1739.2,734.434 1739.76,717.696 1740.32,700.847 1740.88,671.68 1741.44,675.197 1742,695.678 1742.56,694.661 1743.12,725.643 1743.68,710.039 1744.24,709.096 1744.79,687.92 1745.35,722.815 1745.91,719.956 1746.47,717.482 1747.03,685.2 1747.59,718.901 1748.15,698.67 1748.71,680.753 1749.27,696.253 1749.83,696.744 1750.39,713.28 1750.95,730.155 1751.51,777.793 1752.06,775.06 1752.62,772.189 1753.18,702.062 1753.74,702.627 1754.3,701.752 1754.86,685.882 1755.42,669.311 1755.98,669.319 1756.54,672.233 1757.1,691.009 1757.66,674.666 1758.22,672.279 1758.78,705.563 1759.34,689.522 1759.89,658.699 1760.45,690.835 1761.01,691.609 1761.57,677.571 1762.13,709.66 1762.69,705.297 1763.25,688.108 1763.81,704.881 1764.37,706.698 1764.93,670.414 1765.49,636.045 1766.05,671.624 1766.61,674.818 1767.16,656.028 1767.72,658.886 1768.28,661.249 1768.84,629.681 1769.4,632.894 1769.96,649.87 1770.52,634.051 1771.08,634.658 1771.64,669.474 1772.2,675.274 1772.76,677.274 1773.32,705.331 1773.88,705.807 1774.43,704.144 1774.99,687.463 1775.55,650.876 1776.11,667.39 1776.67,669.567 1777.23,670.282 1777.79,685.644 1778.35,683.158 1778.91,684.818 1779.47,686.457 1780.03,733.35 1780.59,713.852 1781.15,728.697 1781.71,758.55 1782.26,756.655 1782.82,754.19 1783.38,784.578 1783.94,763.786 1784.5,757.511 1785.06,739.374 1785.62,751.444 1786.18,750.531 1786.74,748.042 1787.3,744.231 1787.86,724.718 1788.42,736.311 1788.98,715.686 1789.53,748.167 1790.09,730.599 1790.65,694.189 1791.21,709.585 1791.77,709.944 1792.33,679 1792.89,694.718 1793.45,711.123 1794.01,693.206 1794.57,693.258 1795.13,726.156 1795.69,725.43 1796.25,707.37 1796.8,690.348 1797.36,672.968 1797.92,641.547 1798.48,644.035 1799.04,642.952 1799.6,624.996 1800.16,646.503 1800.72,631.531 1801.28,650.675 1801.84,651.896 1802.4,654.443 1802.96,588.535 1803.52,592.341 1804.08,614.112 1804.63,570.337 1805.19,575.177 1805.75,593.948 1806.31,583.18 1806.87,619.772 1807.43,608.959 1807.99,630.423 1808.55,629.354 1809.11,585.485 1809.67,576.919 1810.23,551.124 1810.79,541.917 1811.35,567.743 1811.9,554.98 1812.46,594.559 1813.02,667.494 1813.58,652.638 1814.14,656.966 1814.7,676.423 1815.26,671.852 1815.82,654.422 1816.38,644.3 1816.94,648.413 1817.5,665.576 1818.06,719.755 1818.62,717.855 1819.18,714.644 1819.73,713.144 1820.29,712.605 1820.85,645.406 1821.41,630.387 1821.97,648.078 1822.53,633.024 1823.09,634.423 1823.65,637.021 1824.21,656.221 1824.77,627.701 1825.33,633.159 1825.89,637.769 1826.45,623.58 1827,628.257 1827.56,667.509 1828.12,652.172 1828.68,640.497 1829.24,689.413 1829.8,704.643 1830.36,719.655 1830.92,705.89 1831.48,687.549 1832.04,683.58 1832.6,668.414 1833.16,636.779 1833.72,640.726 1834.27,647.993 1834.83,663.834 1835.39,649.432 1835.95,669.225 1836.51,701.527 1837.07,700.133 1837.63,651.817 1838.19,668.466 \"/>\n<path clip-path=\"url(#clip943)\" d=\"M720.247 691.703 L720.806 691.703 L721.365 691.703 L721.924 691.703 L722.484 691.703 L723.043 691.703 L723.602 691.703 L724.161 691.703 L724.721 691.703 L725.28 691.703 L725.839 691.703 L726.398 691.703 L726.958 691.703 L727.517 691.703 L728.076 691.703 L728.635 691.703 L729.195 691.703 L729.754 691.703 L730.313 691.703 L730.872 691.703 L731.432 691.703 L731.991 691.703 L732.55 691.703 L733.109 691.703 L733.669 691.703 L734.228 691.703 L734.787 691.703 L735.346 691.703 L735.906 691.703 L736.465 691.703 L737.024 691.703 L737.583 691.703 L738.143 691.703 L738.702 691.703 L739.261 691.703 L739.82 691.703 L740.38 691.703 L740.939 691.703 L741.498 691.703 L742.057 691.703 L742.617 691.703 L743.176 691.703 L743.735 691.703 L744.294 691.703 L744.854 691.703 L745.413 691.703 L745.972 691.703 L746.531 691.703 L747.091 691.703 L747.65 691.703 L748.209 691.703 L748.768 691.703 L749.328 691.703 L749.887 691.703 L750.446 691.703 L751.005 691.703 L751.565 691.703 L752.124 691.703 L752.683 691.703 L753.242 691.703 L753.802 691.703 L754.361 691.703 L754.92 691.703 L755.479 691.703 L756.039 691.703 L756.598 691.703 L757.157 691.703 L757.716 691.703 L758.276 691.703 L758.835 691.703 L759.394 691.703 L759.953 691.703 L760.513 691.703 L761.072 691.703 L761.631 691.703 L762.19 691.703 L762.75 691.703 L763.309 691.703 L763.868 691.703 L764.427 691.703 L764.987 691.703 L765.546 691.703 L766.105 691.703 L766.664 691.703 L767.224 691.703 L767.783 691.703 L768.342 691.703 L768.901 691.703 L769.461 691.703 L770.02 691.703 L770.579 691.703 L771.138 691.703 L771.698 691.703 L772.257 691.703 L772.816 691.703 L773.375 691.703 L773.935 691.703 L774.494 691.703 L775.053 691.703 L775.612 691.703 L776.172 691.703 L776.731 691.703 L777.29 691.703 L777.849 691.703 L778.409 691.703 L778.968 691.703 L779.527 691.703 L780.086 691.703 L780.646 691.703 L781.205 691.703 L781.764 691.703 L782.323 691.703 L782.883 691.703 L783.442 691.703 L784.001 691.703 L784.56 691.703 L785.12 691.703 L785.679 691.703 L786.238 691.703 L786.797 691.703 L787.357 691.703 L787.916 691.703 L788.475 691.703 L789.034 691.703 L789.594 691.703 L790.153 691.703 L790.712 691.703 L791.271 691.703 L791.831 691.703 L792.39 691.703 L792.949 691.703 L793.508 691.703 L794.068 691.703 L794.627 691.703 L795.186 691.703 L795.745 691.703 L796.305 691.703 L796.864 691.703 L797.423 691.703 L797.982 691.703 L798.542 691.703 L799.101 691.703 L799.66 691.703 L800.219 691.703 L800.779 691.703 L801.338 691.703 L801.897 691.703 L802.456 691.703 L803.016 691.703 L803.575 691.703 L804.134 691.703 L804.693 691.703 L805.253 691.703 L805.812 691.703 L806.371 691.703 L806.931 691.703 L807.49 691.703 L808.049 691.703 L808.608 691.703 L809.168 691.703 L809.727 691.703 L810.286 691.703 L810.845 691.703 L811.405 691.703 L811.964 691.703 L812.523 691.703 L813.082 691.703 L813.642 691.703 L814.201 691.703 L814.76 691.703 L815.319 691.703 L815.879 691.703 L816.438 691.703 L816.997 691.703 L817.556 691.703 L818.116 691.703 L818.675 691.703 L819.234 691.703 L819.793 691.703 L820.353 691.703 L820.912 691.703 L821.471 691.703 L822.03 691.703 L822.59 691.703 L823.149 691.703 L823.708 691.703 L824.267 691.703 L824.827 691.703 L825.386 691.703 L825.945 691.703 L826.504 691.703 L827.064 691.703 L827.623 691.703 L828.182 691.703 L828.741 691.703 L829.301 691.703 L829.86 691.703 L830.419 691.703 L830.978 691.703 L831.538 691.703 L832.097 691.703 L832.656 691.703 L833.215 691.703 L833.775 691.703 L834.334 691.703 L834.893 691.703 L835.452 691.703 L836.012 691.703 L836.571 691.703 L837.13 691.703 L837.689 691.703 L838.249 691.703 L838.808 691.703 L839.367 691.703 L839.926 691.703 L840.486 691.703 L841.045 691.703 L841.604 691.703 L842.163 691.703 L842.723 691.703 L843.282 691.703 L843.841 691.703 L844.4 691.703 L844.96 691.703 L845.519 691.703 L846.078 691.703 L846.637 691.703 L847.197 691.703 L847.756 691.703 L848.315 691.703 L848.874 691.703 L849.434 691.703 L849.993 691.703 L850.552 691.703 L851.111 691.703 L851.671 691.703 L852.23 691.703 L852.789 691.703 L853.348 691.703 L853.908 691.703 L854.467 691.703 L855.026 691.703 L855.585 691.703 L856.145 691.703 L856.704 691.703 L857.263 691.703 L857.822 691.703 L858.382 691.703 L858.941 691.703 L859.5 691.703 L860.059 691.703 L860.619 691.703 L861.178 691.703 L861.737 691.703 L862.296 691.703 L862.856 691.703 L863.415 691.703 L863.974 691.703 L864.533 691.703 L865.093 691.703 L865.652 691.703 L866.211 691.703 L866.77 691.703 L867.33 691.703 L867.889 691.703 L868.448 691.703 L869.007 691.703 L869.567 691.703 L870.126 691.703 L870.685 691.703 L871.244 691.703 L871.804 691.703 L872.363 691.703 L872.922 691.703 L873.481 691.703 L874.041 691.703 L874.6 691.703 L875.159 691.703 L875.718 691.703 L876.278 691.703 L876.837 691.703 L877.396 691.703 L877.955 691.703 L878.515 691.703 L879.074 691.703 L879.633 691.703 L880.192 691.703 L880.752 691.703 L881.311 691.703 L881.87 691.703 L882.429 691.703 L882.989 691.703 L883.548 691.703 L884.107 691.703 L884.666 691.703 L885.226 691.703 L885.785 691.703 L886.344 691.703 L886.903 691.703 L887.463 691.703 L888.022 691.703 L888.581 691.703 L889.14 691.703 L889.7 691.703 L890.259 691.703 L890.818 691.703 L891.377 691.703 L891.937 691.703 L892.496 691.703 L893.055 691.703 L893.614 691.703 L894.174 691.703 L894.733 691.703 L895.292 691.703 L895.851 691.703 L896.411 691.703 L896.97 691.703 L897.529 691.703 L898.088 691.703 L898.648 691.703 L899.207 691.703 L899.766 691.703 L900.325 691.703 L900.885 691.703 L901.444 691.703 L902.003 691.703 L902.562 691.703 L903.122 691.703 L903.681 691.703 L904.24 691.703 L904.799 691.703 L905.359 691.703 L905.918 691.703 L906.477 691.703 L907.036 691.703 L907.596 691.703 L908.155 691.703 L908.714 691.703 L909.273 691.703 L909.833 691.703 L910.392 691.703 L910.951 691.703 L911.51 691.703 L912.07 691.703 L912.629 691.703 L913.188 691.703 L913.747 691.703 L914.307 691.703 L914.866 691.703 L915.425 691.703 L915.984 691.703 L916.544 691.703 L917.103 691.703 L917.662 691.703 L918.221 691.703 L918.781 691.703 L919.34 691.703 L919.899 691.703 L920.458 691.703 L921.018 691.703 L921.577 691.703 L922.136 691.703 L922.695 691.703 L923.255 691.703 L923.814 691.703 L924.373 691.703 L924.932 691.703 L925.492 691.703 L926.051 691.703 L926.61 691.703 L927.169 691.703 L927.729 691.703 L928.288 691.703 L928.847 691.703 L929.406 691.703 L929.966 691.703 L930.525 691.703 L931.084 691.703 L931.644 691.703 L932.203 691.703 L932.762 691.703 L933.321 691.703 L933.881 691.703 L934.44 691.703 L934.999 691.703 L935.558 691.703 L936.118 691.703 L936.677 691.703 L937.236 691.703 L937.795 691.703 L938.355 691.703 L938.914 691.703 L939.473 691.703 L940.032 691.703 L940.592 691.703 L941.151 691.703 L941.71 691.703 L942.269 691.703 L942.829 691.703 L943.388 691.703 L943.947 691.703 L944.506 691.703 L945.066 691.703 L945.625 691.703 L946.184 691.703 L946.743 691.703 L947.303 691.703 L947.862 691.703 L948.421 691.703 L948.98 691.703 L949.54 691.703 L950.099 691.703 L950.658 691.703 L951.217 691.703 L951.777 691.703 L952.336 691.703 L952.895 691.703 L953.454 691.703 L954.014 691.703 L954.573 691.703 L955.132 691.703 L955.691 691.703 L956.251 691.703 L956.81 691.703 L957.369 691.703 L957.928 691.703 L958.488 691.703 L959.047 691.703 L959.606 691.703 L960.165 691.703 L960.725 691.703 L961.284 691.703 L961.843 691.703 L962.402 691.703 L962.962 691.703 L963.521 691.703 L964.08 691.703 L964.639 691.703 L965.199 691.703 L965.758 691.703 L966.317 691.703 L966.876 691.703 L967.436 691.703 L967.995 691.703 L968.554 691.703 L969.113 691.703 L969.673 691.703 L970.232 691.703 L970.791 691.703 L971.35 691.703 L971.91 691.703 L972.469 691.703 L973.028 691.703 L973.587 691.703 L974.147 691.703 L974.706 691.703 L975.265 691.703 L975.824 691.703 L976.384 691.703 L976.943 691.703 L977.502 691.703 L978.061 691.703 L978.621 691.703 L979.18 691.703 L979.739 691.703 L980.298 691.703 L980.858 691.703 L981.417 691.703 L981.976 691.703 L982.535 691.703 L983.095 691.703 L983.654 691.703 L984.213 691.703 L984.772 691.703 L985.332 691.703 L985.891 691.703 L986.45 691.703 L987.009 691.703 L987.569 691.703 L988.128 691.703 L988.687 691.703 L989.246 691.703 L989.806 691.703 L990.365 691.703 L990.924 691.703 L991.483 691.703 L992.043 691.703 L992.602 691.703 L993.161 691.703 L993.72 691.703 L994.28 691.703 L994.839 691.703 L995.398 691.703 L995.957 691.703 L996.517 691.703 L997.076 691.703 L997.635 691.703 L998.194 691.703 L998.754 691.703 L999.313 691.703 L999.872 691.703 L1000.43 691.703 L1000.99 691.703 L1001.55 691.703 L1002.11 691.703 L1002.67 691.703 L1003.23 691.703 L1003.79 691.703 L1004.35 691.703 L1004.91 691.703 L1005.46 691.703 L1006.02 691.703 L1006.58 691.703 L1007.14 691.703 L1007.7 691.703 L1008.26 691.703 L1008.82 691.703 L1009.38 691.703 L1009.94 691.703 L1010.5 691.703 L1011.06 691.703 L1011.62 691.703 L1012.18 691.703 L1012.73 691.703 L1013.29 691.703 L1013.85 691.703 L1014.41 691.703 L1014.97 691.703 L1015.53 691.703 L1016.09 691.703 L1016.65 691.703 L1017.21 691.703 L1017.77 691.703 L1018.33 691.703 L1018.89 691.703 L1019.45 691.703 L1020.01 691.703 L1020.56 691.703 L1021.12 691.703 L1021.68 691.703 L1022.24 691.703 L1022.8 691.703 L1023.36 691.703 L1023.92 691.703 L1024.48 691.703 L1025.04 691.703 L1025.6 691.703 L1026.16 691.703 L1026.72 691.703 L1027.28 691.703 L1027.83 691.703 L1028.39 691.703 L1028.95 691.703 L1029.51 691.703 L1030.07 691.703 L1030.63 691.703 L1031.19 691.703 L1031.75 691.703 L1032.31 691.703 L1032.87 691.703 L1033.43 691.703 L1033.99 691.703 L1034.55 691.703 L1035.1 691.703 L1035.66 691.703 L1036.22 691.703 L1036.78 691.703 L1037.34 691.703 L1037.9 691.703 L1038.46 691.703 L1039.02 691.703 L1039.58 691.703 L1040.14 691.703 L1040.7 691.703 L1041.26 691.703 L1041.82 691.703 L1042.38 691.703 L1042.93 691.703 L1043.49 691.703 L1044.05 691.703 L1044.61 691.703 L1045.17 691.703 L1045.73 691.703 L1046.29 691.703 L1046.85 691.703 L1047.41 691.703 L1047.97 691.703 L1048.53 691.703 L1049.09 691.703 L1049.65 691.703 L1050.2 691.703 L1050.76 691.703 L1051.32 691.703 L1051.88 691.703 L1052.44 691.703 L1053 691.703 L1053.56 691.703 L1054.12 691.703 L1054.68 691.703 L1055.24 691.703 L1055.8 691.703 L1056.36 691.703 L1056.92 691.703 L1057.48 691.703 L1058.03 691.703 L1058.59 691.703 L1059.15 691.703 L1059.71 691.703 L1060.27 691.703 L1060.83 691.703 L1061.39 691.703 L1061.95 691.703 L1062.51 691.703 L1063.07 691.703 L1063.63 691.703 L1064.19 691.703 L1064.75 691.703 L1065.3 691.703 L1065.86 691.703 L1066.42 691.703 L1066.98 691.703 L1067.54 691.703 L1068.1 691.703 L1068.66 691.703 L1069.22 691.703 L1069.78 691.703 L1070.34 691.703 L1070.9 691.703 L1071.46 691.703 L1072.02 691.703 L1072.57 691.703 L1073.13 691.703 L1073.69 691.703 L1074.25 691.703 L1074.81 691.703 L1075.37 691.703 L1075.93 691.703 L1076.49 691.703 L1077.05 691.703 L1077.61 691.703 L1078.17 691.703 L1078.73 691.703 L1079.29 691.703 L1079.85 691.703 L1080.4 691.703 L1080.96 691.703 L1081.52 691.703 L1082.08 691.703 L1082.64 691.703 L1083.2 691.703 L1083.76 691.703 L1084.32 691.703 L1084.88 691.703 L1085.44 691.703 L1086 691.703 L1086.56 691.703 L1087.12 691.703 L1087.67 691.703 L1088.23 691.703 L1088.79 691.703 L1089.35 691.703 L1089.91 691.703 L1090.47 691.703 L1091.03 691.703 L1091.59 691.703 L1092.15 691.703 L1092.71 691.703 L1093.27 691.703 L1093.83 691.703 L1094.39 691.703 L1094.94 691.703 L1095.5 691.703 L1096.06 691.703 L1096.62 691.703 L1097.18 691.703 L1097.74 691.703 L1098.3 691.703 L1098.86 691.703 L1099.42 691.703 L1099.98 691.703 L1100.54 691.703 L1101.1 691.703 L1101.66 691.703 L1102.22 691.703 L1102.77 691.703 L1103.33 691.703 L1103.89 691.703 L1104.45 691.703 L1105.01 691.703 L1105.57 691.703 L1106.13 691.703 L1106.69 691.703 L1107.25 691.703 L1107.81 691.703 L1108.37 691.703 L1108.93 691.703 L1109.49 691.703 L1110.04 691.703 L1110.6 691.703 L1111.16 691.703 L1111.72 691.703 L1112.28 691.703 L1112.84 691.703 L1113.4 691.703 L1113.96 691.703 L1114.52 691.703 L1115.08 691.703 L1115.64 691.703 L1116.2 691.703 L1116.76 691.703 L1117.31 691.703 L1117.87 691.703 L1118.43 691.703 L1118.99 691.703 L1119.55 691.703 L1120.11 691.703 L1120.67 691.703 L1121.23 691.703 L1121.79 691.703 L1122.35 691.703 L1122.91 691.703 L1123.47 691.703 L1124.03 691.703 L1124.59 691.703 L1125.14 691.703 L1125.7 691.703 L1126.26 691.703 L1126.82 691.703 L1127.38 691.703 L1127.94 691.703 L1128.5 691.703 L1129.06 691.703 L1129.62 691.703 L1130.18 691.703 L1130.74 691.703 L1131.3 691.703 L1131.86 691.703 L1132.41 691.703 L1132.97 691.703 L1133.53 691.703 L1134.09 691.703 L1134.65 691.703 L1135.21 691.703 L1135.77 691.703 L1136.33 691.703 L1136.89 691.703 L1137.45 691.703 L1138.01 691.703 L1138.57 691.703 L1139.13 691.703 L1139.68 691.703 L1140.24 691.703 L1140.8 691.703 L1141.36 691.703 L1141.92 691.703 L1142.48 691.703 L1143.04 691.703 L1143.6 691.703 L1144.16 691.703 L1144.72 691.703 L1145.28 691.703 L1145.84 691.703 L1146.4 691.703 L1146.96 691.703 L1147.51 691.703 L1148.07 691.703 L1148.63 691.703 L1149.19 691.703 L1149.75 691.703 L1150.31 691.703 L1150.87 691.703 L1151.43 691.703 L1151.99 691.703 L1152.55 691.703 L1153.11 691.703 L1153.67 691.703 L1154.23 691.703 L1154.78 691.703 L1155.34 691.703 L1155.9 691.703 L1156.46 691.703 L1157.02 691.703 L1157.58 691.703 L1158.14 691.703 L1158.7 691.703 L1159.26 691.703 L1159.82 691.703 L1160.38 691.703 L1160.94 691.703 L1161.5 691.703 L1162.05 691.703 L1162.61 691.703 L1163.17 691.703 L1163.73 691.703 L1164.29 691.703 L1164.85 691.703 L1165.41 691.703 L1165.97 691.703 L1166.53 691.703 L1167.09 691.703 L1167.65 691.703 L1168.21 691.703 L1168.77 691.703 L1169.33 691.703 L1169.88 691.703 L1170.44 691.703 L1171 691.703 L1171.56 691.703 L1172.12 691.703 L1172.68 691.703 L1173.24 691.703 L1173.8 691.703 L1174.36 691.703 L1174.92 691.703 L1175.48 691.703 L1176.04 691.703 L1176.6 691.703 L1177.15 691.703 L1177.71 691.703 L1178.27 691.703 L1178.83 691.703 L1179.39 691.703 L1179.95 691.703 L1180.51 691.703 L1181.07 691.703 L1181.63 691.703 L1182.19 691.703 L1182.75 691.703 L1183.31 691.703 L1183.87 691.703 L1184.43 691.703 L1184.98 691.703 L1185.54 691.703 L1186.1 691.703 L1186.66 691.703 L1187.22 691.703 L1187.78 691.703 L1188.34 691.703 L1188.9 691.703 L1189.46 691.703 L1190.02 691.703 L1190.58 691.703 L1191.14 691.703 L1191.7 691.703 L1192.25 691.703 L1192.81 691.703 L1193.37 691.703 L1193.93 691.703 L1194.49 691.703 L1195.05 691.703 L1195.61 691.703 L1196.17 691.703 L1196.73 691.703 L1197.29 691.703 L1197.85 691.703 L1198.41 691.703 L1198.97 691.703 L1199.52 691.703 L1200.08 691.703 L1200.64 691.703 L1201.2 691.703 L1201.76 691.703 L1202.32 691.703 L1202.88 691.703 L1203.44 691.703 L1204 691.703 L1204.56 691.703 L1205.12 691.703 L1205.68 691.703 L1206.24 691.703 L1206.8 691.703 L1207.35 691.703 L1207.91 691.703 L1208.47 691.703 L1209.03 691.703 L1209.59 691.703 L1210.15 691.703 L1210.71 691.703 L1211.27 691.703 L1211.83 691.703 L1212.39 691.703 L1212.95 691.703 L1213.51 691.703 L1214.07 691.703 L1214.62 691.703 L1215.18 691.703 L1215.74 691.703 L1216.3 691.703 L1216.86 691.703 L1217.42 691.703 L1217.98 691.703 L1218.54 691.703 L1219.1 691.703 L1219.66 691.703 L1220.22 691.703 L1220.78 691.703 L1221.34 691.703 L1221.89 691.703 L1222.45 691.703 L1223.01 691.703 L1223.57 691.703 L1224.13 691.703 L1224.69 691.703 L1225.25 691.703 L1225.81 691.703 L1226.37 691.703 L1226.93 691.703 L1227.49 691.703 L1228.05 691.703 L1228.61 691.703 L1229.17 691.703 L1229.72 691.703 L1230.28 691.703 L1230.84 691.703 L1231.4 691.703 L1231.96 691.703 L1232.52 691.703 L1233.08 691.703 L1233.64 691.703 L1234.2 691.703 L1234.76 691.703 L1235.32 691.703 L1235.88 691.703 L1236.44 691.703 L1236.99 691.703 L1237.55 691.703 L1238.11 691.703 L1238.67 691.703 L1239.23 691.703 L1239.79 691.703 L1240.35 691.703 L1240.91 691.703 L1241.47 691.703 L1242.03 691.703 L1242.59 691.703 L1243.15 691.703 L1243.71 691.703 L1244.26 691.703 L1244.82 691.703 L1245.38 691.703 L1245.94 691.703 L1246.5 691.703 L1247.06 691.703 L1247.62 691.703 L1248.18 691.703 L1248.74 691.703 L1249.3 691.703 L1249.86 691.703 L1250.42 691.703 L1250.98 691.703 L1251.54 691.703 L1252.09 691.703 L1252.65 691.703 L1253.21 691.703 L1253.77 691.703 L1254.33 691.703 L1254.89 691.703 L1255.45 691.703 L1256.01 691.703 L1256.57 691.703 L1257.13 691.703 L1257.69 691.703 L1258.25 691.703 L1258.81 691.703 L1259.36 691.703 L1259.92 691.703 L1260.48 691.703 L1261.04 691.703 L1261.6 691.703 L1262.16 691.703 L1262.72 691.703 L1263.28 691.703 L1263.84 691.703 L1264.4 691.703 L1264.96 691.703 L1265.52 691.703 L1266.08 691.703 L1266.63 691.703 L1267.19 691.703 L1267.75 691.703 L1268.31 691.703 L1268.87 691.703 L1269.43 691.703 L1269.99 691.703 L1270.55 691.703 L1271.11 691.703 L1271.67 691.703 L1272.23 691.703 L1272.79 691.703 L1273.35 691.703 L1273.91 691.703 L1274.46 691.703 L1275.02 691.703 L1275.58 691.703 L1276.14 691.703 L1276.7 691.703 L1277.26 691.703 L1277.82 691.703 L1278.38 691.703 L1278.94 691.703 L1279.5 691.703 L1280.06 691.703 L1280.62 691.703 L1281.18 691.703 L1281.73 691.703 L1282.29 691.703 L1282.85 691.703 L1283.41 691.703 L1283.97 691.703 L1284.53 691.703 L1285.09 691.703 L1285.65 691.703 L1286.21 691.703 L1286.77 691.703 L1287.33 691.703 L1287.89 691.703 L1288.45 691.703 L1289 691.703 L1289.56 691.703 L1290.12 691.703 L1290.68 691.703 L1291.24 691.703 L1291.8 691.703 L1292.36 691.703 L1292.92 691.703 L1293.48 691.703 L1294.04 691.703 L1294.6 691.703 L1295.16 691.703 L1295.72 691.703 L1296.28 691.703 L1296.83 691.703 L1297.39 691.703 L1297.95 691.703 L1298.51 691.703 L1299.07 691.703 L1299.63 691.703 L1300.19 691.703 L1300.75 691.703 L1301.31 691.703 L1301.87 691.703 L1302.43 691.703 L1302.99 691.703 L1303.55 691.703 L1304.1 691.703 L1304.66 691.703 L1305.22 691.703 L1305.78 691.703 L1306.34 691.703 L1306.9 691.703 L1307.46 691.703 L1308.02 691.703 L1308.58 691.703 L1309.14 691.703 L1309.7 691.703 L1310.26 691.703 L1310.82 691.703 L1311.38 691.703 L1311.93 691.703 L1312.49 691.703 L1313.05 691.703 L1313.61 691.703 L1314.17 691.703 L1314.73 691.703 L1315.29 691.703 L1315.85 691.703 L1316.41 691.703 L1316.97 691.703 L1317.53 691.703 L1318.09 691.703 L1318.65 691.703 L1319.2 691.703 L1319.76 691.703 L1320.32 691.703 L1320.88 691.703 L1321.44 691.703 L1322 691.703 L1322.56 691.703 L1323.12 691.703 L1323.68 691.703 L1324.24 691.703 L1324.8 691.703 L1325.36 691.703 L1325.92 691.703 L1326.47 691.703 L1327.03 691.703 L1327.59 691.703 L1328.15 691.703 L1328.71 691.703 L1329.27 691.703 L1329.83 691.703 L1330.39 691.703 L1330.95 691.703 L1331.51 691.703 L1332.07 691.703 L1332.63 691.703 L1333.19 691.703 L1333.75 691.703 L1334.3 691.703 L1334.86 691.703 L1335.42 691.703 L1335.98 691.703 L1336.54 691.703 L1337.1 691.703 L1337.66 691.703 L1338.22 691.703 L1338.78 691.703 L1339.34 691.703 L1339.9 691.703 L1340.46 691.703 L1341.02 691.703 L1341.57 691.703 L1342.13 691.703 L1342.69 691.703 L1343.25 691.703 L1343.81 691.703 L1344.37 691.703 L1344.93 691.703 L1345.49 691.703 L1346.05 691.703 L1346.61 691.703 L1347.17 691.703 L1347.73 691.703 L1348.29 691.703 L1348.84 691.703 L1349.4 691.703 L1349.96 691.703 L1350.52 691.703 L1351.08 691.703 L1351.64 691.703 L1352.2 691.703 L1352.76 691.703 L1353.32 691.703 L1353.88 691.703 L1354.44 691.703 L1355 691.703 L1355.56 691.703 L1356.12 691.703 L1356.67 691.703 L1357.23 691.703 L1357.79 691.703 L1358.35 691.703 L1358.91 691.703 L1359.47 691.703 L1360.03 691.703 L1360.59 691.703 L1361.15 691.703 L1361.71 691.703 L1362.27 691.703 L1362.83 691.703 L1363.39 691.703 L1363.94 691.703 L1364.5 691.703 L1365.06 691.703 L1365.62 691.703 L1366.18 691.703 L1366.74 691.703 L1367.3 691.703 L1367.86 691.703 L1368.42 691.703 L1368.98 691.703 L1369.54 691.703 L1370.1 691.703 L1370.66 691.703 L1371.21 691.703 L1371.77 691.703 L1372.33 691.703 L1372.89 691.703 L1373.45 691.703 L1374.01 691.703 L1374.57 691.703 L1375.13 691.703 L1375.69 691.703 L1376.25 691.703 L1376.81 691.703 L1377.37 691.703 L1377.93 691.703 L1378.49 691.703 L1379.04 691.703 L1379.6 691.703 L1380.16 691.703 L1380.72 691.703 L1381.28 691.703 L1381.84 691.703 L1382.4 691.703 L1382.96 691.703 L1383.52 691.703 L1384.08 691.703 L1384.64 691.703 L1385.2 691.703 L1385.76 691.703 L1386.31 691.703 L1386.87 691.703 L1387.43 691.703 L1387.99 691.703 L1388.55 691.703 L1389.11 691.703 L1389.67 691.703 L1390.23 691.703 L1390.79 691.703 L1391.35 691.703 L1391.91 691.703 L1392.47 691.703 L1393.03 691.703 L1393.58 691.703 L1394.14 691.703 L1394.7 691.703 L1395.26 691.703 L1395.82 691.703 L1396.38 691.703 L1396.94 691.703 L1397.5 691.703 L1398.06 691.703 L1398.62 691.703 L1399.18 691.703 L1399.74 691.703 L1400.3 691.703 L1400.86 691.703 L1401.41 691.703 L1401.97 691.703 L1402.53 691.703 L1403.09 691.703 L1403.65 691.703 L1404.21 691.703 L1404.77 691.703 L1405.33 691.703 L1405.89 691.703 L1406.45 691.703 L1407.01 691.703 L1407.57 691.703 L1408.13 691.703 L1408.68 691.703 L1409.24 691.703 L1409.8 691.703 L1410.36 691.703 L1410.92 691.703 L1411.48 691.703 L1412.04 691.703 L1412.6 691.703 L1413.16 691.703 L1413.72 691.703 L1414.28 691.703 L1414.84 691.703 L1415.4 691.703 L1415.95 691.703 L1416.51 691.703 L1417.07 691.703 L1417.63 691.703 L1418.19 691.703 L1418.75 691.703 L1419.31 691.703 L1419.87 691.703 L1420.43 691.703 L1420.99 691.703 L1421.55 691.703 L1422.11 691.703 L1422.67 691.703 L1423.23 691.703 L1423.78 691.703 L1424.34 691.703 L1424.9 691.703 L1425.46 691.703 L1426.02 691.703 L1426.58 691.703 L1427.14 691.703 L1427.7 691.703 L1428.26 691.703 L1428.82 691.703 L1429.38 691.703 L1429.94 691.703 L1430.5 691.703 L1431.05 691.703 L1431.61 691.703 L1432.17 691.703 L1432.73 691.703 L1433.29 691.703 L1433.85 691.703 L1434.41 691.703 L1434.97 691.703 L1435.53 691.703 L1436.09 691.703 L1436.65 691.703 L1437.21 691.703 L1437.77 691.703 L1438.33 691.703 L1438.88 691.703 L1439.44 691.703 L1440 691.703 L1440.56 691.703 L1441.12 691.703 L1441.68 691.703 L1442.24 691.703 L1442.8 691.703 L1443.36 691.703 L1443.92 691.703 L1444.48 691.703 L1445.04 691.703 L1445.6 691.703 L1446.15 691.703 L1446.71 691.703 L1447.27 691.703 L1447.83 691.703 L1448.39 691.703 L1448.95 691.703 L1449.51 691.703 L1450.07 691.703 L1450.63 691.703 L1451.19 691.703 L1451.75 691.703 L1452.31 691.703 L1452.87 691.703 L1453.42 691.703 L1453.98 691.703 L1454.54 691.703 L1455.1 691.703 L1455.66 691.703 L1456.22 691.703 L1456.78 691.703 L1457.34 691.703 L1457.9 691.703 L1458.46 691.703 L1459.02 691.703 L1459.58 691.703 L1460.14 691.703 L1460.7 691.703 L1461.25 691.703 L1461.81 691.703 L1462.37 691.703 L1462.93 691.703 L1463.49 691.703 L1464.05 691.703 L1464.61 691.703 L1465.17 691.703 L1465.73 691.703 L1466.29 691.703 L1466.85 691.703 L1467.41 691.703 L1467.97 691.703 L1468.52 691.703 L1469.08 691.703 L1469.64 691.703 L1470.2 691.703 L1470.76 691.703 L1471.32 691.703 L1471.88 691.703 L1472.44 691.703 L1473 691.703 L1473.56 691.703 L1474.12 691.703 L1474.68 691.703 L1475.24 691.703 L1475.79 691.703 L1476.35 691.703 L1476.91 691.703 L1477.47 691.703 L1478.03 691.703 L1478.59 691.703 L1479.15 691.703 L1479.71 691.703 L1480.27 691.703 L1480.83 691.703 L1481.39 691.703 L1481.95 691.703 L1482.51 691.703 L1483.07 691.703 L1483.62 691.703 L1484.18 691.703 L1484.74 691.703 L1485.3 691.703 L1485.86 691.703 L1486.42 691.703 L1486.98 691.703 L1487.54 691.703 L1488.1 691.703 L1488.66 691.703 L1489.22 691.703 L1489.78 691.703 L1490.34 691.703 L1490.89 691.703 L1491.45 691.703 L1492.01 691.703 L1492.57 691.703 L1493.13 691.703 L1493.69 691.703 L1494.25 691.703 L1494.81 691.703 L1495.37 691.703 L1495.93 691.703 L1496.49 691.703 L1497.05 691.703 L1497.61 691.703 L1498.16 691.703 L1498.72 691.703 L1499.28 691.703 L1499.84 691.703 L1500.4 691.703 L1500.96 691.703 L1501.52 691.703 L1502.08 691.703 L1502.64 691.703 L1503.2 691.703 L1503.76 691.703 L1504.32 691.703 L1504.88 691.703 L1505.44 691.703 L1505.99 691.703 L1506.55 691.703 L1507.11 691.703 L1507.67 691.703 L1508.23 691.703 L1508.79 691.703 L1509.35 691.703 L1509.91 691.703 L1510.47 691.703 L1511.03 691.703 L1511.59 691.703 L1512.15 691.703 L1512.71 691.703 L1513.26 691.703 L1513.82 691.703 L1514.38 691.703 L1514.94 691.703 L1515.5 691.703 L1516.06 691.703 L1516.62 691.703 L1517.18 691.703 L1517.74 691.703 L1518.3 691.703 L1518.86 691.703 L1519.42 691.703 L1519.98 691.703 L1520.53 691.703 L1521.09 691.703 L1521.65 691.703 L1522.21 691.703 L1522.77 691.703 L1523.33 691.703 L1523.89 691.703 L1524.45 691.703 L1525.01 691.703 L1525.57 691.703 L1526.13 691.703 L1526.69 691.703 L1527.25 691.703 L1527.81 691.703 L1528.36 691.703 L1528.92 691.703 L1529.48 691.703 L1530.04 691.703 L1530.6 691.703 L1531.16 691.703 L1531.72 691.703 L1532.28 691.703 L1532.84 691.703 L1533.4 691.703 L1533.96 691.703 L1534.52 691.703 L1535.08 691.703 L1535.63 691.703 L1536.19 691.703 L1536.75 691.703 L1537.31 691.703 L1537.87 691.703 L1538.43 691.703 L1538.99 691.703 L1539.55 691.703 L1540.11 691.703 L1540.67 691.703 L1541.23 691.703 L1541.79 691.703 L1542.35 691.703 L1542.9 691.703 L1543.46 691.703 L1544.02 691.703 L1544.58 691.703 L1545.14 691.703 L1545.7 691.703 L1546.26 691.703 L1546.82 691.703 L1547.38 691.703 L1547.94 691.703 L1548.5 691.703 L1549.06 691.703 L1549.62 691.703 L1550.18 691.703 L1550.73 691.703 L1551.29 691.703 L1551.85 691.703 L1552.41 691.703 L1552.97 691.703 L1553.53 691.703 L1554.09 691.703 L1554.65 691.703 L1555.21 691.703 L1555.77 691.703 L1556.33 691.703 L1556.89 691.703 L1557.45 691.703 L1558 691.703 L1558.56 691.703 L1559.12 691.703 L1559.68 691.703 L1560.24 691.703 L1560.8 691.703 L1561.36 691.703 L1561.92 691.703 L1562.48 691.703 L1563.04 691.703 L1563.6 691.703 L1564.16 691.703 L1564.72 691.703 L1565.28 691.703 L1565.83 691.703 L1566.39 691.703 L1566.95 691.703 L1567.51 691.703 L1568.07 691.703 L1568.63 691.703 L1569.19 691.703 L1569.75 691.703 L1570.31 691.703 L1570.87 691.703 L1571.43 691.703 L1571.99 691.703 L1572.55 691.703 L1573.1 691.703 L1573.66 691.703 L1574.22 691.703 L1574.78 691.703 L1575.34 691.703 L1575.9 691.703 L1576.46 691.703 L1577.02 691.703 L1577.58 691.703 L1578.14 691.703 L1578.7 691.703 L1579.26 691.703 L1579.82 691.703 L1580.37 691.703 L1580.93 691.703 L1581.49 691.703 L1582.05 691.703 L1582.61 691.703 L1583.17 691.703 L1583.73 691.703 L1584.29 691.703 L1584.85 691.703 L1585.41 691.703 L1585.97 691.703 L1586.53 691.703 L1587.09 691.703 L1587.65 691.703 L1588.2 691.703 L1588.76 691.703 L1589.32 691.703 L1589.88 691.703 L1590.44 691.703 L1591 691.703 L1591.56 691.703 L1592.12 691.703 L1592.68 691.703 L1593.24 691.703 L1593.8 691.703 L1594.36 691.703 L1594.92 691.703 L1595.47 691.703 L1596.03 691.703 L1596.59 691.703 L1597.15 691.703 L1597.71 691.703 L1598.27 691.703 L1598.83 691.703 L1599.39 691.703 L1599.95 691.703 L1600.51 691.703 L1601.07 691.703 L1601.63 691.703 L1602.19 691.703 L1602.74 691.703 L1603.3 691.703 L1603.86 691.703 L1604.42 691.703 L1604.98 691.703 L1605.54 691.703 L1606.1 691.703 L1606.66 691.703 L1607.22 691.703 L1607.78 691.703 L1608.34 691.703 L1608.9 691.703 L1609.46 691.703 L1610.02 691.703 L1610.57 691.703 L1611.13 691.703 L1611.69 691.703 L1612.25 691.703 L1612.81 691.703 L1613.37 691.703 L1613.93 691.703 L1614.49 691.703 L1615.05 691.703 L1615.61 691.703 L1616.17 691.703 L1616.73 691.703 L1617.29 691.703 L1617.84 691.703 L1618.4 691.703 L1618.96 691.703 L1619.52 691.703 L1620.08 691.703 L1620.64 691.703 L1621.2 691.703 L1621.76 691.703 L1622.32 691.703 L1622.88 691.703 L1623.44 691.703 L1624 691.703 L1624.56 691.703 L1625.11 691.703 L1625.67 691.703 L1626.23 691.703 L1626.79 691.703 L1627.35 691.703 L1627.91 691.703 L1628.47 691.703 L1629.03 691.703 L1629.59 691.703 L1630.15 691.703 L1630.71 691.703 L1631.27 691.703 L1631.83 691.703 L1632.39 691.703 L1632.94 691.703 L1633.5 691.703 L1634.06 691.703 L1634.62 691.703 L1635.18 691.703 L1635.74 691.703 L1636.3 691.703 L1636.86 691.703 L1637.42 691.703 L1637.98 691.703 L1638.54 691.703 L1639.1 691.703 L1639.66 691.703 L1640.21 691.703 L1640.77 691.703 L1641.33 691.703 L1641.89 691.703 L1642.45 691.703 L1643.01 691.703 L1643.57 691.703 L1644.13 691.703 L1644.69 691.703 L1645.25 691.703 L1645.81 691.703 L1646.37 691.703 L1646.93 691.703 L1647.48 691.703 L1648.04 691.703 L1648.6 691.703 L1649.16 691.703 L1649.72 691.703 L1650.28 691.703 L1650.84 691.703 L1651.4 691.703 L1651.96 691.703 L1652.52 691.703 L1653.08 691.703 L1653.64 691.703 L1654.2 691.703 L1654.76 691.703 L1655.31 691.703 L1655.87 691.703 L1656.43 691.703 L1656.99 691.703 L1657.55 691.703 L1658.11 691.703 L1658.67 691.703 L1659.23 691.703 L1659.79 691.703 L1660.35 691.703 L1660.91 691.703 L1661.47 691.703 L1662.03 691.703 L1662.58 691.703 L1663.14 691.703 L1663.7 691.703 L1664.26 691.703 L1664.82 691.703 L1665.38 691.703 L1665.94 691.703 L1666.5 691.703 L1667.06 691.703 L1667.62 691.703 L1668.18 691.703 L1668.74 691.703 L1669.3 691.703 L1669.85 691.703 L1670.41 691.703 L1670.97 691.703 L1671.53 691.703 L1672.09 691.703 L1672.65 691.703 L1673.21 691.703 L1673.77 691.703 L1674.33 691.703 L1674.89 691.703 L1675.45 691.703 L1676.01 691.703 L1676.57 691.703 L1677.13 691.703 L1677.68 691.703 L1678.24 691.703 L1678.8 691.703 L1679.36 691.703 L1679.92 691.703 L1680.48 691.703 L1681.04 691.703 L1681.6 691.703 L1682.16 691.703 L1682.72 691.703 L1683.28 691.703 L1683.84 691.703 L1684.4 691.703 L1684.95 691.703 L1685.51 691.703 L1686.07 691.703 L1686.63 691.703 L1687.19 691.703 L1687.75 691.703 L1688.31 691.703 L1688.87 691.703 L1689.43 691.703 L1689.99 691.703 L1690.55 691.703 L1691.11 691.703 L1691.67 691.703 L1692.23 691.703 L1692.78 691.703 L1693.34 691.703 L1693.9 691.703 L1694.46 691.703 L1695.02 691.703 L1695.58 691.703 L1696.14 691.703 L1696.7 691.703 L1697.26 691.703 L1697.82 691.703 L1698.38 691.703 L1698.94 691.703 L1699.5 691.703 L1700.05 691.703 L1700.61 691.703 L1701.17 691.703 L1701.73 691.703 L1702.29 691.703 L1702.85 691.703 L1703.41 691.703 L1703.97 691.703 L1704.53 691.703 L1705.09 691.703 L1705.65 691.703 L1706.21 691.703 L1706.77 691.703 L1707.32 691.703 L1707.88 691.703 L1708.44 691.703 L1709 691.703 L1709.56 691.703 L1710.12 691.703 L1710.68 691.703 L1711.24 691.703 L1711.8 691.703 L1712.36 691.703 L1712.92 691.703 L1713.48 691.703 L1714.04 691.703 L1714.6 691.703 L1715.15 691.703 L1715.71 691.703 L1716.27 691.703 L1716.83 691.703 L1717.39 691.703 L1717.95 691.703 L1718.51 691.703 L1719.07 691.703 L1719.63 691.703 L1720.19 691.703 L1720.75 691.703 L1721.31 691.703 L1721.87 691.703 L1722.42 691.703 L1722.98 691.703 L1723.54 691.703 L1724.1 691.703 L1724.66 691.703 L1725.22 691.703 L1725.78 691.703 L1726.34 691.703 L1726.9 691.703 L1727.46 691.703 L1728.02 691.703 L1728.58 691.703 L1729.14 691.703 L1729.69 691.703 L1730.25 691.703 L1730.81 691.703 L1731.37 691.703 L1731.93 691.703 L1732.49 691.703 L1733.05 691.703 L1733.61 691.703 L1734.17 691.703 L1734.73 691.703 L1735.29 691.703 L1735.85 691.703 L1736.41 691.703 L1736.97 691.703 L1737.52 691.703 L1738.08 691.703 L1738.64 691.703 L1739.2 691.703 L1739.76 691.703 L1740.32 691.703 L1740.88 691.703 L1741.44 691.703 L1742 691.703 L1742.56 691.703 L1743.12 691.703 L1743.68 691.703 L1744.24 691.703 L1744.79 691.703 L1745.35 691.703 L1745.91 691.703 L1746.47 691.703 L1747.03 691.703 L1747.59 691.703 L1748.15 691.703 L1748.71 691.703 L1749.27 691.703 L1749.83 691.703 L1750.39 691.703 L1750.95 691.703 L1751.51 691.703 L1752.06 691.703 L1752.62 691.703 L1753.18 691.703 L1753.74 691.703 L1754.3 691.703 L1754.86 691.703 L1755.42 691.703 L1755.98 691.703 L1756.54 691.703 L1757.1 691.703 L1757.66 691.703 L1758.22 691.703 L1758.78 691.703 L1759.34 691.703 L1759.89 691.703 L1760.45 691.703 L1761.01 691.703 L1761.57 691.703 L1762.13 691.703 L1762.69 691.703 L1763.25 691.703 L1763.81 691.703 L1764.37 691.703 L1764.93 691.703 L1765.49 691.703 L1766.05 691.703 L1766.61 691.703 L1767.16 691.703 L1767.72 691.703 L1768.28 691.703 L1768.84 691.703 L1769.4 691.703 L1769.96 691.703 L1770.52 691.703 L1771.08 691.703 L1771.64 691.703 L1772.2 691.703 L1772.76 691.703 L1773.32 691.703 L1773.88 691.703 L1774.43 691.703 L1774.99 691.703 L1775.55 691.703 L1776.11 691.703 L1776.67 691.703 L1777.23 691.703 L1777.79 691.703 L1778.35 691.703 L1778.91 691.703 L1779.47 691.703 L1780.03 691.703 L1780.59 691.703 L1781.15 691.703 L1781.71 691.703 L1782.26 691.703 L1782.82 691.703 L1783.38 691.703 L1783.94 691.703 L1784.5 691.703 L1785.06 691.703 L1785.62 691.703 L1786.18 691.703 L1786.74 691.703 L1787.3 691.703 L1787.86 691.703 L1788.42 691.703 L1788.98 691.703 L1789.53 691.703 L1790.09 691.703 L1790.65 691.703 L1791.21 691.703 L1791.77 691.703 L1792.33 691.703 L1792.89 691.703 L1793.45 691.703 L1794.01 691.703 L1794.57 691.703 L1795.13 691.703 L1795.69 691.703 L1796.25 691.703 L1796.8 691.703 L1797.36 691.703 L1797.92 691.703 L1798.48 691.703 L1799.04 691.703 L1799.6 691.703 L1800.16 691.703 L1800.72 691.703 L1801.28 691.703 L1801.84 691.703 L1802.4 691.703 L1802.96 691.703 L1803.52 691.703 L1804.08 691.703 L1804.63 691.703 L1805.19 691.703 L1805.75 691.703 L1806.31 691.703 L1806.87 691.703 L1807.43 691.703 L1807.99 691.703 L1808.55 691.703 L1809.11 691.703 L1809.67 691.703 L1810.23 691.703 L1810.79 691.703 L1811.35 691.703 L1811.9 691.703 L1812.46 691.703 L1813.02 691.703 L1813.58 691.703 L1814.14 691.703 L1814.7 691.703 L1815.26 691.703 L1815.82 691.703 L1816.38 691.703 L1816.94 691.703 L1817.5 691.703 L1818.06 691.703 L1818.62 691.703 L1819.18 691.703 L1819.73 691.703 L1820.29 691.703 L1820.85 691.703 L1821.41 691.703 L1821.97 691.703 L1822.53 691.703 L1823.09 691.703 L1823.65 691.703 L1824.21 691.703 L1824.77 691.703 L1825.33 691.703 L1825.89 691.703 L1826.45 691.703 L1827 691.703 L1827.56 691.703 L1828.12 691.703 L1828.68 691.703 L1829.24 691.703 L1829.8 691.703 L1830.36 691.703 L1830.92 691.703 L1831.48 691.703 L1832.04 691.703 L1832.6 691.703 L1833.16 691.703 L1833.72 691.703 L1834.27 691.703 L1834.83 691.703 L1835.39 691.703 L1835.95 691.703 L1836.51 691.703 L1837.07 691.703 L1837.63 691.703 L1838.19 691.703 L1838.19 682.614 L1837.63 682.614 L1837.07 682.614 L1836.51 682.614 L1835.95 682.614 L1835.39 682.614 L1834.83 682.614 L1834.27 682.614 L1833.72 682.614 L1833.16 682.614 L1832.6 682.614 L1832.04 682.614 L1831.48 682.614 L1830.92 682.614 L1830.36 682.614 L1829.8 682.614 L1829.24 682.614 L1828.68 682.614 L1828.12 682.614 L1827.56 682.614 L1827 682.614 L1826.45 682.614 L1825.89 682.614 L1825.33 682.614 L1824.77 682.614 L1824.21 682.614 L1823.65 682.614 L1823.09 682.614 L1822.53 682.614 L1821.97 682.614 L1821.41 682.614 L1820.85 682.614 L1820.29 682.614 L1819.73 682.614 L1819.18 682.614 L1818.62 682.614 L1818.06 682.614 L1817.5 682.614 L1816.94 682.614 L1816.38 682.614 L1815.82 682.614 L1815.26 682.614 L1814.7 682.614 L1814.14 682.614 L1813.58 682.614 L1813.02 682.614 L1812.46 682.614 L1811.9 682.614 L1811.35 682.614 L1810.79 682.614 L1810.23 682.614 L1809.67 682.614 L1809.11 682.614 L1808.55 682.614 L1807.99 682.614 L1807.43 682.614 L1806.87 682.614 L1806.31 682.614 L1805.75 682.614 L1805.19 682.614 L1804.63 682.614 L1804.08 682.614 L1803.52 682.614 L1802.96 682.614 L1802.4 682.614 L1801.84 682.614 L1801.28 682.614 L1800.72 682.614 L1800.16 682.614 L1799.6 682.614 L1799.04 682.614 L1798.48 682.614 L1797.92 682.614 L1797.36 682.614 L1796.8 682.614 L1796.25 682.614 L1795.69 682.614 L1795.13 682.614 L1794.57 682.614 L1794.01 682.614 L1793.45 682.614 L1792.89 682.614 L1792.33 682.614 L1791.77 682.614 L1791.21 682.614 L1790.65 682.614 L1790.09 682.614 L1789.53 682.614 L1788.98 682.614 L1788.42 682.614 L1787.86 682.614 L1787.3 682.614 L1786.74 682.614 L1786.18 682.614 L1785.62 682.614 L1785.06 682.614 L1784.5 682.614 L1783.94 682.614 L1783.38 682.614 L1782.82 682.614 L1782.26 682.614 L1781.71 682.614 L1781.15 682.614 L1780.59 682.614 L1780.03 682.614 L1779.47 682.614 L1778.91 682.614 L1778.35 682.614 L1777.79 682.614 L1777.23 682.614 L1776.67 682.614 L1776.11 682.614 L1775.55 682.614 L1774.99 682.614 L1774.43 682.614 L1773.88 682.614 L1773.32 682.614 L1772.76 682.614 L1772.2 682.614 L1771.64 682.614 L1771.08 682.614 L1770.52 682.614 L1769.96 682.614 L1769.4 682.614 L1768.84 682.614 L1768.28 682.614 L1767.72 682.614 L1767.16 682.614 L1766.61 682.614 L1766.05 682.614 L1765.49 682.614 L1764.93 682.614 L1764.37 682.614 L1763.81 682.614 L1763.25 682.614 L1762.69 682.614 L1762.13 682.614 L1761.57 682.614 L1761.01 682.614 L1760.45 682.614 L1759.89 682.614 L1759.34 682.614 L1758.78 682.614 L1758.22 682.614 L1757.66 682.614 L1757.1 682.614 L1756.54 682.614 L1755.98 682.614 L1755.42 682.614 L1754.86 682.614 L1754.3 682.614 L1753.74 682.614 L1753.18 682.614 L1752.62 682.614 L1752.06 682.614 L1751.51 682.614 L1750.95 682.614 L1750.39 682.614 L1749.83 682.614 L1749.27 682.614 L1748.71 682.614 L1748.15 682.614 L1747.59 682.614 L1747.03 682.614 L1746.47 682.614 L1745.91 682.614 L1745.35 682.614 L1744.79 682.614 L1744.24 682.614 L1743.68 682.614 L1743.12 682.614 L1742.56 682.614 L1742 682.614 L1741.44 682.614 L1740.88 682.614 L1740.32 682.614 L1739.76 682.614 L1739.2 682.614 L1738.64 682.614 L1738.08 682.614 L1737.52 682.614 L1736.97 682.614 L1736.41 682.614 L1735.85 682.614 L1735.29 682.614 L1734.73 682.614 L1734.17 682.614 L1733.61 682.614 L1733.05 682.614 L1732.49 682.614 L1731.93 682.614 L1731.37 682.614 L1730.81 682.614 L1730.25 682.614 L1729.69 682.614 L1729.14 682.614 L1728.58 682.614 L1728.02 682.614 L1727.46 682.614 L1726.9 682.614 L1726.34 682.614 L1725.78 682.614 L1725.22 682.614 L1724.66 682.614 L1724.1 682.614 L1723.54 682.614 L1722.98 682.614 L1722.42 682.614 L1721.87 682.614 L1721.31 682.614 L1720.75 682.614 L1720.19 682.614 L1719.63 682.614 L1719.07 682.614 L1718.51 682.614 L1717.95 682.614 L1717.39 682.614 L1716.83 682.614 L1716.27 682.614 L1715.71 682.614 L1715.15 682.614 L1714.6 682.614 L1714.04 682.614 L1713.48 682.614 L1712.92 682.614 L1712.36 682.614 L1711.8 682.614 L1711.24 682.614 L1710.68 682.614 L1710.12 682.614 L1709.56 682.614 L1709 682.614 L1708.44 682.614 L1707.88 682.614 L1707.32 682.614 L1706.77 682.614 L1706.21 682.614 L1705.65 682.614 L1705.09 682.614 L1704.53 682.614 L1703.97 682.614 L1703.41 682.614 L1702.85 682.614 L1702.29 682.614 L1701.73 682.614 L1701.17 682.614 L1700.61 682.614 L1700.05 682.614 L1699.5 682.614 L1698.94 682.614 L1698.38 682.614 L1697.82 682.614 L1697.26 682.614 L1696.7 682.614 L1696.14 682.614 L1695.58 682.614 L1695.02 682.614 L1694.46 682.614 L1693.9 682.614 L1693.34 682.614 L1692.78 682.614 L1692.23 682.614 L1691.67 682.614 L1691.11 682.614 L1690.55 682.614 L1689.99 682.614 L1689.43 682.614 L1688.87 682.614 L1688.31 682.614 L1687.75 682.614 L1687.19 682.614 L1686.63 682.614 L1686.07 682.614 L1685.51 682.614 L1684.95 682.614 L1684.4 682.614 L1683.84 682.614 L1683.28 682.614 L1682.72 682.614 L1682.16 682.614 L1681.6 682.614 L1681.04 682.614 L1680.48 682.614 L1679.92 682.614 L1679.36 682.614 L1678.8 682.614 L1678.24 682.614 L1677.68 682.614 L1677.13 682.614 L1676.57 682.614 L1676.01 682.614 L1675.45 682.614 L1674.89 682.614 L1674.33 682.614 L1673.77 682.614 L1673.21 682.614 L1672.65 682.614 L1672.09 682.614 L1671.53 682.614 L1670.97 682.614 L1670.41 682.614 L1669.85 682.614 L1669.3 682.614 L1668.74 682.614 L1668.18 682.614 L1667.62 682.614 L1667.06 682.614 L1666.5 682.614 L1665.94 682.614 L1665.38 682.614 L1664.82 682.614 L1664.26 682.614 L1663.7 682.614 L1663.14 682.614 L1662.58 682.614 L1662.03 682.614 L1661.47 682.614 L1660.91 682.614 L1660.35 682.614 L1659.79 682.614 L1659.23 682.614 L1658.67 682.614 L1658.11 682.614 L1657.55 682.614 L1656.99 682.614 L1656.43 682.614 L1655.87 682.614 L1655.31 682.614 L1654.76 682.614 L1654.2 682.614 L1653.64 682.614 L1653.08 682.614 L1652.52 682.614 L1651.96 682.614 L1651.4 682.614 L1650.84 682.614 L1650.28 682.614 L1649.72 682.614 L1649.16 682.614 L1648.6 682.614 L1648.04 682.614 L1647.48 682.614 L1646.93 682.614 L1646.37 682.614 L1645.81 682.614 L1645.25 682.614 L1644.69 682.614 L1644.13 682.614 L1643.57 682.614 L1643.01 682.614 L1642.45 682.614 L1641.89 682.614 L1641.33 682.614 L1640.77 682.614 L1640.21 682.614 L1639.66 682.614 L1639.1 682.614 L1638.54 682.614 L1637.98 682.614 L1637.42 682.614 L1636.86 682.614 L1636.3 682.614 L1635.74 682.614 L1635.18 682.614 L1634.62 682.614 L1634.06 682.614 L1633.5 682.614 L1632.94 682.614 L1632.39 682.614 L1631.83 682.614 L1631.27 682.614 L1630.71 682.614 L1630.15 682.614 L1629.59 682.614 L1629.03 682.614 L1628.47 682.614 L1627.91 682.614 L1627.35 682.614 L1626.79 682.614 L1626.23 682.614 L1625.67 682.614 L1625.11 682.614 L1624.56 682.614 L1624 682.614 L1623.44 682.614 L1622.88 682.614 L1622.32 682.614 L1621.76 682.614 L1621.2 682.614 L1620.64 682.614 L1620.08 682.614 L1619.52 682.614 L1618.96 682.614 L1618.4 682.614 L1617.84 682.614 L1617.29 682.614 L1616.73 682.614 L1616.17 682.614 L1615.61 682.614 L1615.05 682.614 L1614.49 682.614 L1613.93 682.614 L1613.37 682.614 L1612.81 682.614 L1612.25 682.614 L1611.69 682.614 L1611.13 682.614 L1610.57 682.614 L1610.02 682.614 L1609.46 682.614 L1608.9 682.614 L1608.34 682.614 L1607.78 682.614 L1607.22 682.614 L1606.66 682.614 L1606.1 682.614 L1605.54 682.614 L1604.98 682.614 L1604.42 682.614 L1603.86 682.614 L1603.3 682.614 L1602.74 682.614 L1602.19 682.614 L1601.63 682.614 L1601.07 682.614 L1600.51 682.614 L1599.95 682.614 L1599.39 682.614 L1598.83 682.614 L1598.27 682.614 L1597.71 682.614 L1597.15 682.614 L1596.59 682.614 L1596.03 682.614 L1595.47 682.614 L1594.92 682.614 L1594.36 682.614 L1593.8 682.614 L1593.24 682.614 L1592.68 682.614 L1592.12 682.614 L1591.56 682.614 L1591 682.614 L1590.44 682.614 L1589.88 682.614 L1589.32 682.614 L1588.76 682.614 L1588.2 682.614 L1587.65 682.614 L1587.09 682.614 L1586.53 682.614 L1585.97 682.614 L1585.41 682.614 L1584.85 682.614 L1584.29 682.614 L1583.73 682.614 L1583.17 682.614 L1582.61 682.614 L1582.05 682.614 L1581.49 682.614 L1580.93 682.614 L1580.37 682.614 L1579.82 682.614 L1579.26 682.614 L1578.7 682.614 L1578.14 682.614 L1577.58 682.614 L1577.02 682.614 L1576.46 682.614 L1575.9 682.614 L1575.34 682.614 L1574.78 682.614 L1574.22 682.614 L1573.66 682.614 L1573.1 682.614 L1572.55 682.614 L1571.99 682.614 L1571.43 682.614 L1570.87 682.614 L1570.31 682.614 L1569.75 682.614 L1569.19 682.614 L1568.63 682.614 L1568.07 682.614 L1567.51 682.614 L1566.95 682.614 L1566.39 682.614 L1565.83 682.614 L1565.28 682.614 L1564.72 682.614 L1564.16 682.614 L1563.6 682.614 L1563.04 682.614 L1562.48 682.614 L1561.92 682.614 L1561.36 682.614 L1560.8 682.614 L1560.24 682.614 L1559.68 682.614 L1559.12 682.614 L1558.56 682.614 L1558 682.614 L1557.45 682.614 L1556.89 682.614 L1556.33 682.614 L1555.77 682.614 L1555.21 682.614 L1554.65 682.614 L1554.09 682.614 L1553.53 682.614 L1552.97 682.614 L1552.41 682.614 L1551.85 682.614 L1551.29 682.614 L1550.73 682.614 L1550.18 682.614 L1549.62 682.614 L1549.06 682.614 L1548.5 682.614 L1547.94 682.614 L1547.38 682.614 L1546.82 682.614 L1546.26 682.614 L1545.7 682.614 L1545.14 682.614 L1544.58 682.614 L1544.02 682.614 L1543.46 682.614 L1542.9 682.614 L1542.35 682.614 L1541.79 682.614 L1541.23 682.614 L1540.67 682.614 L1540.11 682.614 L1539.55 682.614 L1538.99 682.614 L1538.43 682.614 L1537.87 682.614 L1537.31 682.614 L1536.75 682.614 L1536.19 682.614 L1535.63 682.614 L1535.08 682.614 L1534.52 682.614 L1533.96 682.614 L1533.4 682.614 L1532.84 682.614 L1532.28 682.614 L1531.72 682.614 L1531.16 682.614 L1530.6 682.614 L1530.04 682.614 L1529.48 682.614 L1528.92 682.614 L1528.36 682.614 L1527.81 682.614 L1527.25 682.614 L1526.69 682.614 L1526.13 682.614 L1525.57 682.614 L1525.01 682.614 L1524.45 682.614 L1523.89 682.614 L1523.33 682.614 L1522.77 682.614 L1522.21 682.614 L1521.65 682.614 L1521.09 682.614 L1520.53 682.614 L1519.98 682.614 L1519.42 682.614 L1518.86 682.614 L1518.3 682.614 L1517.74 682.614 L1517.18 682.614 L1516.62 682.614 L1516.06 682.614 L1515.5 682.614 L1514.94 682.614 L1514.38 682.614 L1513.82 682.614 L1513.26 682.614 L1512.71 682.614 L1512.15 682.614 L1511.59 682.614 L1511.03 682.614 L1510.47 682.614 L1509.91 682.614 L1509.35 682.614 L1508.79 682.614 L1508.23 682.614 L1507.67 682.614 L1507.11 682.614 L1506.55 682.614 L1505.99 682.614 L1505.44 682.614 L1504.88 682.614 L1504.32 682.614 L1503.76 682.614 L1503.2 682.614 L1502.64 682.614 L1502.08 682.614 L1501.52 682.614 L1500.96 682.614 L1500.4 682.614 L1499.84 682.614 L1499.28 682.614 L1498.72 682.614 L1498.16 682.614 L1497.61 682.614 L1497.05 682.614 L1496.49 682.614 L1495.93 682.614 L1495.37 682.614 L1494.81 682.614 L1494.25 682.614 L1493.69 682.614 L1493.13 682.614 L1492.57 682.614 L1492.01 682.614 L1491.45 682.614 L1490.89 682.614 L1490.34 682.614 L1489.78 682.614 L1489.22 682.614 L1488.66 682.614 L1488.1 682.614 L1487.54 682.614 L1486.98 682.614 L1486.42 682.614 L1485.86 682.614 L1485.3 682.614 L1484.74 682.614 L1484.18 682.614 L1483.62 682.614 L1483.07 682.614 L1482.51 682.614 L1481.95 682.614 L1481.39 682.614 L1480.83 682.614 L1480.27 682.614 L1479.71 682.614 L1479.15 682.614 L1478.59 682.614 L1478.03 682.614 L1477.47 682.614 L1476.91 682.614 L1476.35 682.614 L1475.79 682.614 L1475.24 682.614 L1474.68 682.614 L1474.12 682.614 L1473.56 682.614 L1473 682.614 L1472.44 682.614 L1471.88 682.614 L1471.32 682.614 L1470.76 682.614 L1470.2 682.614 L1469.64 682.614 L1469.08 682.614 L1468.52 682.614 L1467.97 682.614 L1467.41 682.614 L1466.85 682.614 L1466.29 682.614 L1465.73 682.614 L1465.17 682.614 L1464.61 682.614 L1464.05 682.614 L1463.49 682.614 L1462.93 682.614 L1462.37 682.614 L1461.81 682.614 L1461.25 682.614 L1460.7 682.614 L1460.14 682.614 L1459.58 682.614 L1459.02 682.614 L1458.46 682.614 L1457.9 682.614 L1457.34 682.614 L1456.78 682.614 L1456.22 682.614 L1455.66 682.614 L1455.1 682.614 L1454.54 682.614 L1453.98 682.614 L1453.42 682.614 L1452.87 682.614 L1452.31 682.614 L1451.75 682.614 L1451.19 682.614 L1450.63 682.614 L1450.07 682.614 L1449.51 682.614 L1448.95 682.614 L1448.39 682.614 L1447.83 682.614 L1447.27 682.614 L1446.71 682.614 L1446.15 682.614 L1445.6 682.614 L1445.04 682.614 L1444.48 682.614 L1443.92 682.614 L1443.36 682.614 L1442.8 682.614 L1442.24 682.614 L1441.68 682.614 L1441.12 682.614 L1440.56 682.614 L1440 682.614 L1439.44 682.614 L1438.88 682.614 L1438.33 682.614 L1437.77 682.614 L1437.21 682.614 L1436.65 682.614 L1436.09 682.614 L1435.53 682.614 L1434.97 682.614 L1434.41 682.614 L1433.85 682.614 L1433.29 682.614 L1432.73 682.614 L1432.17 682.614 L1431.61 682.614 L1431.05 682.614 L1430.5 682.614 L1429.94 682.614 L1429.38 682.614 L1428.82 682.614 L1428.26 682.614 L1427.7 682.614 L1427.14 682.614 L1426.58 682.614 L1426.02 682.614 L1425.46 682.614 L1424.9 682.614 L1424.34 682.614 L1423.78 682.614 L1423.23 682.614 L1422.67 682.614 L1422.11 682.614 L1421.55 682.614 L1420.99 682.614 L1420.43 682.614 L1419.87 682.614 L1419.31 682.614 L1418.75 682.614 L1418.19 682.614 L1417.63 682.614 L1417.07 682.614 L1416.51 682.614 L1415.95 682.614 L1415.4 682.614 L1414.84 682.614 L1414.28 682.614 L1413.72 682.614 L1413.16 682.614 L1412.6 682.614 L1412.04 682.614 L1411.48 682.614 L1410.92 682.614 L1410.36 682.614 L1409.8 682.614 L1409.24 682.614 L1408.68 682.614 L1408.13 682.614 L1407.57 682.614 L1407.01 682.614 L1406.45 682.614 L1405.89 682.614 L1405.33 682.614 L1404.77 682.614 L1404.21 682.614 L1403.65 682.614 L1403.09 682.614 L1402.53 682.614 L1401.97 682.614 L1401.41 682.614 L1400.86 682.614 L1400.3 682.614 L1399.74 682.614 L1399.18 682.614 L1398.62 682.614 L1398.06 682.614 L1397.5 682.614 L1396.94 682.614 L1396.38 682.614 L1395.82 682.614 L1395.26 682.614 L1394.7 682.614 L1394.14 682.614 L1393.58 682.614 L1393.03 682.614 L1392.47 682.614 L1391.91 682.614 L1391.35 682.614 L1390.79 682.614 L1390.23 682.614 L1389.67 682.614 L1389.11 682.614 L1388.55 682.614 L1387.99 682.614 L1387.43 682.614 L1386.87 682.614 L1386.31 682.614 L1385.76 682.614 L1385.2 682.614 L1384.64 682.614 L1384.08 682.614 L1383.52 682.614 L1382.96 682.614 L1382.4 682.614 L1381.84 682.614 L1381.28 682.614 L1380.72 682.614 L1380.16 682.614 L1379.6 682.614 L1379.04 682.614 L1378.49 682.614 L1377.93 682.614 L1377.37 682.614 L1376.81 682.614 L1376.25 682.614 L1375.69 682.614 L1375.13 682.614 L1374.57 682.614 L1374.01 682.614 L1373.45 682.614 L1372.89 682.614 L1372.33 682.614 L1371.77 682.614 L1371.21 682.614 L1370.66 682.614 L1370.1 682.614 L1369.54 682.614 L1368.98 682.614 L1368.42 682.614 L1367.86 682.614 L1367.3 682.614 L1366.74 682.614 L1366.18 682.614 L1365.62 682.614 L1365.06 682.614 L1364.5 682.614 L1363.94 682.614 L1363.39 682.614 L1362.83 682.614 L1362.27 682.614 L1361.71 682.614 L1361.15 682.614 L1360.59 682.614 L1360.03 682.614 L1359.47 682.614 L1358.91 682.614 L1358.35 682.614 L1357.79 682.614 L1357.23 682.614 L1356.67 682.614 L1356.12 682.614 L1355.56 682.614 L1355 682.614 L1354.44 682.614 L1353.88 682.614 L1353.32 682.614 L1352.76 682.614 L1352.2 682.614 L1351.64 682.614 L1351.08 682.614 L1350.52 682.614 L1349.96 682.614 L1349.4 682.614 L1348.84 682.614 L1348.29 682.614 L1347.73 682.614 L1347.17 682.614 L1346.61 682.614 L1346.05 682.614 L1345.49 682.614 L1344.93 682.614 L1344.37 682.614 L1343.81 682.614 L1343.25 682.614 L1342.69 682.614 L1342.13 682.614 L1341.57 682.614 L1341.02 682.614 L1340.46 682.614 L1339.9 682.614 L1339.34 682.614 L1338.78 682.614 L1338.22 682.614 L1337.66 682.614 L1337.1 682.614 L1336.54 682.614 L1335.98 682.614 L1335.42 682.614 L1334.86 682.614 L1334.3 682.614 L1333.75 682.614 L1333.19 682.614 L1332.63 682.614 L1332.07 682.614 L1331.51 682.614 L1330.95 682.614 L1330.39 682.614 L1329.83 682.614 L1329.27 682.614 L1328.71 682.614 L1328.15 682.614 L1327.59 682.614 L1327.03 682.614 L1326.47 682.614 L1325.92 682.614 L1325.36 682.614 L1324.8 682.614 L1324.24 682.614 L1323.68 682.614 L1323.12 682.614 L1322.56 682.614 L1322 682.614 L1321.44 682.614 L1320.88 682.614 L1320.32 682.614 L1319.76 682.614 L1319.2 682.614 L1318.65 682.614 L1318.09 682.614 L1317.53 682.614 L1316.97 682.614 L1316.41 682.614 L1315.85 682.614 L1315.29 682.614 L1314.73 682.614 L1314.17 682.614 L1313.61 682.614 L1313.05 682.614 L1312.49 682.614 L1311.93 682.614 L1311.38 682.614 L1310.82 682.614 L1310.26 682.614 L1309.7 682.614 L1309.14 682.614 L1308.58 682.614 L1308.02 682.614 L1307.46 682.614 L1306.9 682.614 L1306.34 682.614 L1305.78 682.614 L1305.22 682.614 L1304.66 682.614 L1304.1 682.614 L1303.55 682.614 L1302.99 682.614 L1302.43 682.614 L1301.87 682.614 L1301.31 682.614 L1300.75 682.614 L1300.19 682.614 L1299.63 682.614 L1299.07 682.614 L1298.51 682.614 L1297.95 682.614 L1297.39 682.614 L1296.83 682.614 L1296.28 682.614 L1295.72 682.614 L1295.16 682.614 L1294.6 682.614 L1294.04 682.614 L1293.48 682.614 L1292.92 682.614 L1292.36 682.614 L1291.8 682.614 L1291.24 682.614 L1290.68 682.614 L1290.12 682.614 L1289.56 682.614 L1289 682.614 L1288.45 682.614 L1287.89 682.614 L1287.33 682.614 L1286.77 682.614 L1286.21 682.614 L1285.65 682.614 L1285.09 682.614 L1284.53 682.614 L1283.97 682.614 L1283.41 682.614 L1282.85 682.614 L1282.29 682.614 L1281.73 682.614 L1281.18 682.614 L1280.62 682.614 L1280.06 682.614 L1279.5 682.614 L1278.94 682.614 L1278.38 682.614 L1277.82 682.614 L1277.26 682.614 L1276.7 682.614 L1276.14 682.614 L1275.58 682.614 L1275.02 682.614 L1274.46 682.614 L1273.91 682.614 L1273.35 682.614 L1272.79 682.614 L1272.23 682.614 L1271.67 682.614 L1271.11 682.614 L1270.55 682.614 L1269.99 682.614 L1269.43 682.614 L1268.87 682.614 L1268.31 682.614 L1267.75 682.614 L1267.19 682.614 L1266.63 682.614 L1266.08 682.614 L1265.52 682.614 L1264.96 682.614 L1264.4 682.614 L1263.84 682.614 L1263.28 682.614 L1262.72 682.614 L1262.16 682.614 L1261.6 682.614 L1261.04 682.614 L1260.48 682.614 L1259.92 682.614 L1259.36 682.614 L1258.81 682.614 L1258.25 682.614 L1257.69 682.614 L1257.13 682.614 L1256.57 682.614 L1256.01 682.614 L1255.45 682.614 L1254.89 682.614 L1254.33 682.614 L1253.77 682.614 L1253.21 682.614 L1252.65 682.614 L1252.09 682.614 L1251.54 682.614 L1250.98 682.614 L1250.42 682.614 L1249.86 682.614 L1249.3 682.614 L1248.74 682.614 L1248.18 682.614 L1247.62 682.614 L1247.06 682.614 L1246.5 682.614 L1245.94 682.614 L1245.38 682.614 L1244.82 682.614 L1244.26 682.614 L1243.71 682.614 L1243.15 682.614 L1242.59 682.614 L1242.03 682.614 L1241.47 682.614 L1240.91 682.614 L1240.35 682.614 L1239.79 682.614 L1239.23 682.614 L1238.67 682.614 L1238.11 682.614 L1237.55 682.614 L1236.99 682.614 L1236.44 682.614 L1235.88 682.614 L1235.32 682.614 L1234.76 682.614 L1234.2 682.614 L1233.64 682.614 L1233.08 682.614 L1232.52 682.614 L1231.96 682.614 L1231.4 682.614 L1230.84 682.614 L1230.28 682.614 L1229.72 682.614 L1229.17 682.614 L1228.61 682.614 L1228.05 682.614 L1227.49 682.614 L1226.93 682.614 L1226.37 682.614 L1225.81 682.614 L1225.25 682.614 L1224.69 682.614 L1224.13 682.614 L1223.57 682.614 L1223.01 682.614 L1222.45 682.614 L1221.89 682.614 L1221.34 682.614 L1220.78 682.614 L1220.22 682.614 L1219.66 682.614 L1219.1 682.614 L1218.54 682.614 L1217.98 682.614 L1217.42 682.614 L1216.86 682.614 L1216.3 682.614 L1215.74 682.614 L1215.18 682.614 L1214.62 682.614 L1214.07 682.614 L1213.51 682.614 L1212.95 682.614 L1212.39 682.614 L1211.83 682.614 L1211.27 682.614 L1210.71 682.614 L1210.15 682.614 L1209.59 682.614 L1209.03 682.614 L1208.47 682.614 L1207.91 682.614 L1207.35 682.614 L1206.8 682.614 L1206.24 682.614 L1205.68 682.614 L1205.12 682.614 L1204.56 682.614 L1204 682.614 L1203.44 682.614 L1202.88 682.614 L1202.32 682.614 L1201.76 682.614 L1201.2 682.614 L1200.64 682.614 L1200.08 682.614 L1199.52 682.614 L1198.97 682.614 L1198.41 682.614 L1197.85 682.614 L1197.29 682.614 L1196.73 682.614 L1196.17 682.614 L1195.61 682.614 L1195.05 682.614 L1194.49 682.614 L1193.93 682.614 L1193.37 682.614 L1192.81 682.614 L1192.25 682.614 L1191.7 682.614 L1191.14 682.614 L1190.58 682.614 L1190.02 682.614 L1189.46 682.614 L1188.9 682.614 L1188.34 682.614 L1187.78 682.614 L1187.22 682.614 L1186.66 682.614 L1186.1 682.614 L1185.54 682.614 L1184.98 682.614 L1184.43 682.614 L1183.87 682.614 L1183.31 682.614 L1182.75 682.614 L1182.19 682.614 L1181.63 682.614 L1181.07 682.614 L1180.51 682.614 L1179.95 682.614 L1179.39 682.614 L1178.83 682.614 L1178.27 682.614 L1177.71 682.614 L1177.15 682.614 L1176.6 682.614 L1176.04 682.614 L1175.48 682.614 L1174.92 682.614 L1174.36 682.614 L1173.8 682.614 L1173.24 682.614 L1172.68 682.614 L1172.12 682.614 L1171.56 682.614 L1171 682.614 L1170.44 682.614 L1169.88 682.614 L1169.33 682.614 L1168.77 682.614 L1168.21 682.614 L1167.65 682.614 L1167.09 682.614 L1166.53 682.614 L1165.97 682.614 L1165.41 682.614 L1164.85 682.614 L1164.29 682.614 L1163.73 682.614 L1163.17 682.614 L1162.61 682.614 L1162.05 682.614 L1161.5 682.614 L1160.94 682.614 L1160.38 682.614 L1159.82 682.614 L1159.26 682.614 L1158.7 682.614 L1158.14 682.614 L1157.58 682.614 L1157.02 682.614 L1156.46 682.614 L1155.9 682.614 L1155.34 682.614 L1154.78 682.614 L1154.23 682.614 L1153.67 682.614 L1153.11 682.614 L1152.55 682.614 L1151.99 682.614 L1151.43 682.614 L1150.87 682.614 L1150.31 682.614 L1149.75 682.614 L1149.19 682.614 L1148.63 682.614 L1148.07 682.614 L1147.51 682.614 L1146.96 682.614 L1146.4 682.614 L1145.84 682.614 L1145.28 682.614 L1144.72 682.614 L1144.16 682.614 L1143.6 682.614 L1143.04 682.614 L1142.48 682.614 L1141.92 682.614 L1141.36 682.614 L1140.8 682.614 L1140.24 682.614 L1139.68 682.614 L1139.13 682.614 L1138.57 682.614 L1138.01 682.614 L1137.45 682.614 L1136.89 682.614 L1136.33 682.614 L1135.77 682.614 L1135.21 682.614 L1134.65 682.614 L1134.09 682.614 L1133.53 682.614 L1132.97 682.614 L1132.41 682.614 L1131.86 682.614 L1131.3 682.614 L1130.74 682.614 L1130.18 682.614 L1129.62 682.614 L1129.06 682.614 L1128.5 682.614 L1127.94 682.614 L1127.38 682.614 L1126.82 682.614 L1126.26 682.614 L1125.7 682.614 L1125.14 682.614 L1124.59 682.614 L1124.03 682.614 L1123.47 682.614 L1122.91 682.614 L1122.35 682.614 L1121.79 682.614 L1121.23 682.614 L1120.67 682.614 L1120.11 682.614 L1119.55 682.614 L1118.99 682.614 L1118.43 682.614 L1117.87 682.614 L1117.31 682.614 L1116.76 682.614 L1116.2 682.614 L1115.64 682.614 L1115.08 682.614 L1114.52 682.614 L1113.96 682.614 L1113.4 682.614 L1112.84 682.614 L1112.28 682.614 L1111.72 682.614 L1111.16 682.614 L1110.6 682.614 L1110.04 682.614 L1109.49 682.614 L1108.93 682.614 L1108.37 682.614 L1107.81 682.614 L1107.25 682.614 L1106.69 682.614 L1106.13 682.614 L1105.57 682.614 L1105.01 682.614 L1104.45 682.614 L1103.89 682.614 L1103.33 682.614 L1102.77 682.614 L1102.22 682.614 L1101.66 682.614 L1101.1 682.614 L1100.54 682.614 L1099.98 682.614 L1099.42 682.614 L1098.86 682.614 L1098.3 682.614 L1097.74 682.614 L1097.18 682.614 L1096.62 682.614 L1096.06 682.614 L1095.5 682.614 L1094.94 682.614 L1094.39 682.614 L1093.83 682.614 L1093.27 682.614 L1092.71 682.614 L1092.15 682.614 L1091.59 682.614 L1091.03 682.614 L1090.47 682.614 L1089.91 682.614 L1089.35 682.614 L1088.79 682.614 L1088.23 682.614 L1087.67 682.614 L1087.12 682.614 L1086.56 682.614 L1086 682.614 L1085.44 682.614 L1084.88 682.614 L1084.32 682.614 L1083.76 682.614 L1083.2 682.614 L1082.64 682.614 L1082.08 682.614 L1081.52 682.614 L1080.96 682.614 L1080.4 682.614 L1079.85 682.614 L1079.29 682.614 L1078.73 682.614 L1078.17 682.614 L1077.61 682.614 L1077.05 682.614 L1076.49 682.614 L1075.93 682.614 L1075.37 682.614 L1074.81 682.614 L1074.25 682.614 L1073.69 682.614 L1073.13 682.614 L1072.57 682.614 L1072.02 682.614 L1071.46 682.614 L1070.9 682.614 L1070.34 682.614 L1069.78 682.614 L1069.22 682.614 L1068.66 682.614 L1068.1 682.614 L1067.54 682.614 L1066.98 682.614 L1066.42 682.614 L1065.86 682.614 L1065.3 682.614 L1064.75 682.614 L1064.19 682.614 L1063.63 682.614 L1063.07 682.614 L1062.51 682.614 L1061.95 682.614 L1061.39 682.614 L1060.83 682.614 L1060.27 682.614 L1059.71 682.614 L1059.15 682.614 L1058.59 682.614 L1058.03 682.614 L1057.48 682.614 L1056.92 682.614 L1056.36 682.614 L1055.8 682.614 L1055.24 682.614 L1054.68 682.614 L1054.12 682.614 L1053.56 682.614 L1053 682.614 L1052.44 682.614 L1051.88 682.614 L1051.32 682.614 L1050.76 682.614 L1050.2 682.614 L1049.65 682.614 L1049.09 682.614 L1048.53 682.614 L1047.97 682.614 L1047.41 682.614 L1046.85 682.614 L1046.29 682.614 L1045.73 682.614 L1045.17 682.614 L1044.61 682.614 L1044.05 682.614 L1043.49 682.614 L1042.93 682.614 L1042.38 682.614 L1041.82 682.614 L1041.26 682.614 L1040.7 682.614 L1040.14 682.614 L1039.58 682.614 L1039.02 682.614 L1038.46 682.614 L1037.9 682.614 L1037.34 682.614 L1036.78 682.614 L1036.22 682.614 L1035.66 682.614 L1035.1 682.614 L1034.55 682.614 L1033.99 682.614 L1033.43 682.614 L1032.87 682.614 L1032.31 682.614 L1031.75 682.614 L1031.19 682.614 L1030.63 682.614 L1030.07 682.614 L1029.51 682.614 L1028.95 682.614 L1028.39 682.614 L1027.83 682.614 L1027.28 682.614 L1026.72 682.614 L1026.16 682.614 L1025.6 682.614 L1025.04 682.614 L1024.48 682.614 L1023.92 682.614 L1023.36 682.614 L1022.8 682.614 L1022.24 682.614 L1021.68 682.614 L1021.12 682.614 L1020.56 682.614 L1020.01 682.614 L1019.45 682.614 L1018.89 682.614 L1018.33 682.614 L1017.77 682.614 L1017.21 682.614 L1016.65 682.614 L1016.09 682.614 L1015.53 682.614 L1014.97 682.614 L1014.41 682.614 L1013.85 682.614 L1013.29 682.614 L1012.73 682.614 L1012.18 682.614 L1011.62 682.614 L1011.06 682.614 L1010.5 682.614 L1009.94 682.614 L1009.38 682.614 L1008.82 682.614 L1008.26 682.614 L1007.7 682.614 L1007.14 682.614 L1006.58 682.614 L1006.02 682.614 L1005.46 682.614 L1004.91 682.614 L1004.35 682.614 L1003.79 682.614 L1003.23 682.614 L1002.67 682.614 L1002.11 682.614 L1001.55 682.614 L1000.99 682.614 L1000.43 682.614 L999.872 682.614 L999.313 682.614 L998.754 682.614 L998.194 682.614 L997.635 682.614 L997.076 682.614 L996.517 682.614 L995.957 682.614 L995.398 682.614 L994.839 682.614 L994.28 682.614 L993.72 682.614 L993.161 682.614 L992.602 682.614 L992.043 682.614 L991.483 682.614 L990.924 682.614 L990.365 682.614 L989.806 682.614 L989.246 682.614 L988.687 682.614 L988.128 682.614 L987.569 682.614 L987.009 682.614 L986.45 682.614 L985.891 682.614 L985.332 682.614 L984.772 682.614 L984.213 682.614 L983.654 682.614 L983.095 682.614 L982.535 682.614 L981.976 682.614 L981.417 682.614 L980.858 682.614 L980.298 682.614 L979.739 682.614 L979.18 682.614 L978.621 682.614 L978.061 682.614 L977.502 682.614 L976.943 682.614 L976.384 682.614 L975.824 682.614 L975.265 682.614 L974.706 682.614 L974.147 682.614 L973.587 682.614 L973.028 682.614 L972.469 682.614 L971.91 682.614 L971.35 682.614 L970.791 682.614 L970.232 682.614 L969.673 682.614 L969.113 682.614 L968.554 682.614 L967.995 682.614 L967.436 682.614 L966.876 682.614 L966.317 682.614 L965.758 682.614 L965.199 682.614 L964.639 682.614 L964.08 682.614 L963.521 682.614 L962.962 682.614 L962.402 682.614 L961.843 682.614 L961.284 682.614 L960.725 682.614 L960.165 682.614 L959.606 682.614 L959.047 682.614 L958.488 682.614 L957.928 682.614 L957.369 682.614 L956.81 682.614 L956.251 682.614 L955.691 682.614 L955.132 682.614 L954.573 682.614 L954.014 682.614 L953.454 682.614 L952.895 682.614 L952.336 682.614 L951.777 682.614 L951.217 682.614 L950.658 682.614 L950.099 682.614 L949.54 682.614 L948.98 682.614 L948.421 682.614 L947.862 682.614 L947.303 682.614 L946.743 682.614 L946.184 682.614 L945.625 682.614 L945.066 682.614 L944.506 682.614 L943.947 682.614 L943.388 682.614 L942.829 682.614 L942.269 682.614 L941.71 682.614 L941.151 682.614 L940.592 682.614 L940.032 682.614 L939.473 682.614 L938.914 682.614 L938.355 682.614 L937.795 682.614 L937.236 682.614 L936.677 682.614 L936.118 682.614 L935.558 682.614 L934.999 682.614 L934.44 682.614 L933.881 682.614 L933.321 682.614 L932.762 682.614 L932.203 682.614 L931.644 682.614 L931.084 682.614 L930.525 682.614 L929.966 682.614 L929.406 682.614 L928.847 682.614 L928.288 682.614 L927.729 682.614 L927.169 682.614 L926.61 682.614 L926.051 682.614 L925.492 682.614 L924.932 682.614 L924.373 682.614 L923.814 682.614 L923.255 682.614 L922.695 682.614 L922.136 682.614 L921.577 682.614 L921.018 682.614 L920.458 682.614 L919.899 682.614 L919.34 682.614 L918.781 682.614 L918.221 682.614 L917.662 682.614 L917.103 682.614 L916.544 682.614 L915.984 682.614 L915.425 682.614 L914.866 682.614 L914.307 682.614 L913.747 682.614 L913.188 682.614 L912.629 682.614 L912.07 682.614 L911.51 682.614 L910.951 682.614 L910.392 682.614 L909.833 682.614 L909.273 682.614 L908.714 682.614 L908.155 682.614 L907.596 682.614 L907.036 682.614 L906.477 682.614 L905.918 682.614 L905.359 682.614 L904.799 682.614 L904.24 682.614 L903.681 682.614 L903.122 682.614 L902.562 682.614 L902.003 682.614 L901.444 682.614 L900.885 682.614 L900.325 682.614 L899.766 682.614 L899.207 682.614 L898.648 682.614 L898.088 682.614 L897.529 682.614 L896.97 682.614 L896.411 682.614 L895.851 682.614 L895.292 682.614 L894.733 682.614 L894.174 682.614 L893.614 682.614 L893.055 682.614 L892.496 682.614 L891.937 682.614 L891.377 682.614 L890.818 682.614 L890.259 682.614 L889.7 682.614 L889.14 682.614 L888.581 682.614 L888.022 682.614 L887.463 682.614 L886.903 682.614 L886.344 682.614 L885.785 682.614 L885.226 682.614 L884.666 682.614 L884.107 682.614 L883.548 682.614 L882.989 682.614 L882.429 682.614 L881.87 682.614 L881.311 682.614 L880.752 682.614 L880.192 682.614 L879.633 682.614 L879.074 682.614 L878.515 682.614 L877.955 682.614 L877.396 682.614 L876.837 682.614 L876.278 682.614 L875.718 682.614 L875.159 682.614 L874.6 682.614 L874.041 682.614 L873.481 682.614 L872.922 682.614 L872.363 682.614 L871.804 682.614 L871.244 682.614 L870.685 682.614 L870.126 682.614 L869.567 682.614 L869.007 682.614 L868.448 682.614 L867.889 682.614 L867.33 682.614 L866.77 682.614 L866.211 682.614 L865.652 682.614 L865.093 682.614 L864.533 682.614 L863.974 682.614 L863.415 682.614 L862.856 682.614 L862.296 682.614 L861.737 682.614 L861.178 682.614 L860.619 682.614 L860.059 682.614 L859.5 682.614 L858.941 682.614 L858.382 682.614 L857.822 682.614 L857.263 682.614 L856.704 682.614 L856.145 682.614 L855.585 682.614 L855.026 682.614 L854.467 682.614 L853.908 682.614 L853.348 682.614 L852.789 682.614 L852.23 682.614 L851.671 682.614 L851.111 682.614 L850.552 682.614 L849.993 682.614 L849.434 682.614 L848.874 682.614 L848.315 682.614 L847.756 682.614 L847.197 682.614 L846.637 682.614 L846.078 682.614 L845.519 682.614 L844.96 682.614 L844.4 682.614 L843.841 682.614 L843.282 682.614 L842.723 682.614 L842.163 682.614 L841.604 682.614 L841.045 682.614 L840.486 682.614 L839.926 682.614 L839.367 682.614 L838.808 682.614 L838.249 682.614 L837.689 682.614 L837.13 682.614 L836.571 682.614 L836.012 682.614 L835.452 682.614 L834.893 682.614 L834.334 682.614 L833.775 682.614 L833.215 682.614 L832.656 682.614 L832.097 682.614 L831.538 682.614 L830.978 682.614 L830.419 682.614 L829.86 682.614 L829.301 682.614 L828.741 682.614 L828.182 682.614 L827.623 682.614 L827.064 682.614 L826.504 682.614 L825.945 682.614 L825.386 682.614 L824.827 682.614 L824.267 682.614 L823.708 682.614 L823.149 682.614 L822.59 682.614 L822.03 682.614 L821.471 682.614 L820.912 682.614 L820.353 682.614 L819.793 682.614 L819.234 682.614 L818.675 682.614 L818.116 682.614 L817.556 682.614 L816.997 682.614 L816.438 682.614 L815.879 682.614 L815.319 682.614 L814.76 682.614 L814.201 682.614 L813.642 682.614 L813.082 682.614 L812.523 682.614 L811.964 682.614 L811.405 682.614 L810.845 682.614 L810.286 682.614 L809.727 682.614 L809.168 682.614 L808.608 682.614 L808.049 682.614 L807.49 682.614 L806.931 682.614 L806.371 682.614 L805.812 682.614 L805.253 682.614 L804.693 682.614 L804.134 682.614 L803.575 682.614 L803.016 682.614 L802.456 682.614 L801.897 682.614 L801.338 682.614 L800.779 682.614 L800.219 682.614 L799.66 682.614 L799.101 682.614 L798.542 682.614 L797.982 682.614 L797.423 682.614 L796.864 682.614 L796.305 682.614 L795.745 682.614 L795.186 682.614 L794.627 682.614 L794.068 682.614 L793.508 682.614 L792.949 682.614 L792.39 682.614 L791.831 682.614 L791.271 682.614 L790.712 682.614 L790.153 682.614 L789.594 682.614 L789.034 682.614 L788.475 682.614 L787.916 682.614 L787.357 682.614 L786.797 682.614 L786.238 682.614 L785.679 682.614 L785.12 682.614 L784.56 682.614 L784.001 682.614 L783.442 682.614 L782.883 682.614 L782.323 682.614 L781.764 682.614 L781.205 682.614 L780.646 682.614 L780.086 682.614 L779.527 682.614 L778.968 682.614 L778.409 682.614 L777.849 682.614 L777.29 682.614 L776.731 682.614 L776.172 682.614 L775.612 682.614 L775.053 682.614 L774.494 682.614 L773.935 682.614 L773.375 682.614 L772.816 682.614 L772.257 682.614 L771.698 682.614 L771.138 682.614 L770.579 682.614 L770.02 682.614 L769.461 682.614 L768.901 682.614 L768.342 682.614 L767.783 682.614 L767.224 682.614 L766.664 682.614 L766.105 682.614 L765.546 682.614 L764.987 682.614 L764.427 682.614 L763.868 682.614 L763.309 682.614 L762.75 682.614 L762.19 682.614 L761.631 682.614 L761.072 682.614 L760.513 682.614 L759.953 682.614 L759.394 682.614 L758.835 682.614 L758.276 682.614 L757.716 682.614 L757.157 682.614 L756.598 682.614 L756.039 682.614 L755.479 682.614 L754.92 682.614 L754.361 682.614 L753.802 682.614 L753.242 682.614 L752.683 682.614 L752.124 682.614 L751.565 682.614 L751.005 682.614 L750.446 682.614 L749.887 682.614 L749.328 682.614 L748.768 682.614 L748.209 682.614 L747.65 682.614 L747.091 682.614 L746.531 682.614 L745.972 682.614 L745.413 682.614 L744.854 682.614 L744.294 682.614 L743.735 682.614 L743.176 682.614 L742.617 682.614 L742.057 682.614 L741.498 682.614 L740.939 682.614 L740.38 682.614 L739.82 682.614 L739.261 682.614 L738.702 682.614 L738.143 682.614 L737.583 682.614 L737.024 682.614 L736.465 682.614 L735.906 682.614 L735.346 682.614 L734.787 682.614 L734.228 682.614 L733.669 682.614 L733.109 682.614 L732.55 682.614 L731.991 682.614 L731.432 682.614 L730.872 682.614 L730.313 682.614 L729.754 682.614 L729.195 682.614 L728.635 682.614 L728.076 682.614 L727.517 682.614 L726.958 682.614 L726.398 682.614 L725.839 682.614 L725.28 682.614 L724.721 682.614 L724.161 682.614 L723.602 682.614 L723.043 682.614 L722.484 682.614 L721.924 682.614 L721.365 682.614 L720.806 682.614 L720.247 682.614  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip943)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,687.158 720.806,687.158 721.365,687.158 721.924,687.158 722.484,687.158 723.043,687.158 723.602,687.158 724.161,687.158 724.721,687.158 725.28,687.158 725.839,687.158 726.398,687.158 726.958,687.158 727.517,687.158 728.076,687.158 728.635,687.158 729.195,687.158 729.754,687.158 730.313,687.158 730.872,687.158 731.432,687.158 731.991,687.158 732.55,687.158 733.109,687.158 733.669,687.158 734.228,687.158 734.787,687.158 735.346,687.158 735.906,687.158 736.465,687.158 737.024,687.158 737.583,687.158 738.143,687.158 738.702,687.158 739.261,687.158 739.82,687.158 740.38,687.158 740.939,687.158 741.498,687.158 742.057,687.158 742.617,687.158 743.176,687.158 743.735,687.158 744.294,687.158 744.854,687.158 745.413,687.158 745.972,687.158 746.531,687.158 747.091,687.158 747.65,687.158 748.209,687.158 748.768,687.158 749.328,687.158 749.887,687.158 750.446,687.158 751.005,687.158 751.565,687.158 752.124,687.158 752.683,687.158 753.242,687.158 753.802,687.158 754.361,687.158 754.92,687.158 755.479,687.158 756.039,687.158 756.598,687.158 757.157,687.158 757.716,687.158 758.276,687.158 758.835,687.158 759.394,687.158 759.953,687.158 760.513,687.158 761.072,687.158 761.631,687.158 762.19,687.158 762.75,687.158 763.309,687.158 763.868,687.158 764.427,687.158 764.987,687.158 765.546,687.158 766.105,687.158 766.664,687.158 767.224,687.158 767.783,687.158 768.342,687.158 768.901,687.158 769.461,687.158 770.02,687.158 770.579,687.158 771.138,687.158 771.698,687.158 772.257,687.158 772.816,687.158 773.375,687.158 773.935,687.158 774.494,687.158 775.053,687.158 775.612,687.158 776.172,687.158 776.731,687.158 777.29,687.158 777.849,687.158 778.409,687.158 778.968,687.158 779.527,687.158 780.086,687.158 780.646,687.158 781.205,687.158 781.764,687.158 782.323,687.158 782.883,687.158 783.442,687.158 784.001,687.158 784.56,687.158 785.12,687.158 785.679,687.158 786.238,687.158 786.797,687.158 787.357,687.158 787.916,687.158 788.475,687.158 789.034,687.158 789.594,687.158 790.153,687.158 790.712,687.158 791.271,687.158 791.831,687.158 792.39,687.158 792.949,687.158 793.508,687.158 794.068,687.158 794.627,687.158 795.186,687.158 795.745,687.158 796.305,687.158 796.864,687.158 797.423,687.158 797.982,687.158 798.542,687.158 799.101,687.158 799.66,687.158 800.219,687.158 800.779,687.158 801.338,687.158 801.897,687.158 802.456,687.158 803.016,687.158 803.575,687.158 804.134,687.158 804.693,687.158 805.253,687.158 805.812,687.158 806.371,687.158 806.931,687.158 807.49,687.158 808.049,687.158 808.608,687.158 809.168,687.158 809.727,687.158 810.286,687.158 810.845,687.158 811.405,687.158 811.964,687.158 812.523,687.158 813.082,687.158 813.642,687.158 814.201,687.158 814.76,687.158 815.319,687.158 815.879,687.158 816.438,687.158 816.997,687.158 817.556,687.158 818.116,687.158 818.675,687.158 819.234,687.158 819.793,687.158 820.353,687.158 820.912,687.158 821.471,687.158 822.03,687.158 822.59,687.158 823.149,687.158 823.708,687.158 824.267,687.158 824.827,687.158 825.386,687.158 825.945,687.158 826.504,687.158 827.064,687.158 827.623,687.158 828.182,687.158 828.741,687.158 829.301,687.158 829.86,687.158 830.419,687.158 830.978,687.158 831.538,687.158 832.097,687.158 832.656,687.158 833.215,687.158 833.775,687.158 834.334,687.158 834.893,687.158 835.452,687.158 836.012,687.158 836.571,687.158 837.13,687.158 837.689,687.158 838.249,687.158 838.808,687.158 839.367,687.158 839.926,687.158 840.486,687.158 841.045,687.158 841.604,687.158 842.163,687.158 842.723,687.158 843.282,687.158 843.841,687.158 844.4,687.158 844.96,687.158 845.519,687.158 846.078,687.158 846.637,687.158 847.197,687.158 847.756,687.158 848.315,687.158 848.874,687.158 849.434,687.158 849.993,687.158 850.552,687.158 851.111,687.158 851.671,687.158 852.23,687.158 852.789,687.158 853.348,687.158 853.908,687.158 854.467,687.158 855.026,687.158 855.585,687.158 856.145,687.158 856.704,687.158 857.263,687.158 857.822,687.158 858.382,687.158 858.941,687.158 859.5,687.158 860.059,687.158 860.619,687.158 861.178,687.158 861.737,687.158 862.296,687.158 862.856,687.158 863.415,687.158 863.974,687.158 864.533,687.158 865.093,687.158 865.652,687.158 866.211,687.158 866.77,687.158 867.33,687.158 867.889,687.158 868.448,687.158 869.007,687.158 869.567,687.158 870.126,687.158 870.685,687.158 871.244,687.158 871.804,687.158 872.363,687.158 872.922,687.158 873.481,687.158 874.041,687.158 874.6,687.158 875.159,687.158 875.718,687.158 876.278,687.158 876.837,687.158 877.396,687.158 877.955,687.158 878.515,687.158 879.074,687.158 879.633,687.158 880.192,687.158 880.752,687.158 881.311,687.158 881.87,687.158 882.429,687.158 882.989,687.158 883.548,687.158 884.107,687.158 884.666,687.158 885.226,687.158 885.785,687.158 886.344,687.158 886.903,687.158 887.463,687.158 888.022,687.158 888.581,687.158 889.14,687.158 889.7,687.158 890.259,687.158 890.818,687.158 891.377,687.158 891.937,687.158 892.496,687.158 893.055,687.158 893.614,687.158 894.174,687.158 894.733,687.158 895.292,687.158 895.851,687.158 896.411,687.158 896.97,687.158 897.529,687.158 898.088,687.158 898.648,687.158 899.207,687.158 899.766,687.158 900.325,687.158 900.885,687.158 901.444,687.158 902.003,687.158 902.562,687.158 903.122,687.158 903.681,687.158 904.24,687.158 904.799,687.158 905.359,687.158 905.918,687.158 906.477,687.158 907.036,687.158 907.596,687.158 908.155,687.158 908.714,687.158 909.273,687.158 909.833,687.158 910.392,687.158 910.951,687.158 911.51,687.158 912.07,687.158 912.629,687.158 913.188,687.158 913.747,687.158 914.307,687.158 914.866,687.158 915.425,687.158 915.984,687.158 916.544,687.158 917.103,687.158 917.662,687.158 918.221,687.158 918.781,687.158 919.34,687.158 919.899,687.158 920.458,687.158 921.018,687.158 921.577,687.158 922.136,687.158 922.695,687.158 923.255,687.158 923.814,687.158 924.373,687.158 924.932,687.158 925.492,687.158 926.051,687.158 926.61,687.158 927.169,687.158 927.729,687.158 928.288,687.158 928.847,687.158 929.406,687.158 929.966,687.158 930.525,687.158 931.084,687.158 931.644,687.158 932.203,687.158 932.762,687.158 933.321,687.158 933.881,687.158 934.44,687.158 934.999,687.158 935.558,687.158 936.118,687.158 936.677,687.158 937.236,687.158 937.795,687.158 938.355,687.158 938.914,687.158 939.473,687.158 940.032,687.158 940.592,687.158 941.151,687.158 941.71,687.158 942.269,687.158 942.829,687.158 943.388,687.158 943.947,687.158 944.506,687.158 945.066,687.158 945.625,687.158 946.184,687.158 946.743,687.158 947.303,687.158 947.862,687.158 948.421,687.158 948.98,687.158 949.54,687.158 950.099,687.158 950.658,687.158 951.217,687.158 951.777,687.158 952.336,687.158 952.895,687.158 953.454,687.158 954.014,687.158 954.573,687.158 955.132,687.158 955.691,687.158 956.251,687.158 956.81,687.158 957.369,687.158 957.928,687.158 958.488,687.158 959.047,687.158 959.606,687.158 960.165,687.158 960.725,687.158 961.284,687.158 961.843,687.158 962.402,687.158 962.962,687.158 963.521,687.158 964.08,687.158 964.639,687.158 965.199,687.158 965.758,687.158 966.317,687.158 966.876,687.158 967.436,687.158 967.995,687.158 968.554,687.158 969.113,687.158 969.673,687.158 970.232,687.158 970.791,687.158 971.35,687.158 971.91,687.158 972.469,687.158 973.028,687.158 973.587,687.158 974.147,687.158 974.706,687.158 975.265,687.158 975.824,687.158 976.384,687.158 976.943,687.158 977.502,687.158 978.061,687.158 978.621,687.158 979.18,687.158 979.739,687.158 980.298,687.158 980.858,687.158 981.417,687.158 981.976,687.158 982.535,687.158 983.095,687.158 983.654,687.158 984.213,687.158 984.772,687.158 985.332,687.158 985.891,687.158 986.45,687.158 987.009,687.158 987.569,687.158 988.128,687.158 988.687,687.158 989.246,687.158 989.806,687.158 990.365,687.158 990.924,687.158 991.483,687.158 992.043,687.158 992.602,687.158 993.161,687.158 993.72,687.158 994.28,687.158 994.839,687.158 995.398,687.158 995.957,687.158 996.517,687.158 997.076,687.158 997.635,687.158 998.194,687.158 998.754,687.158 999.313,687.158 999.872,687.158 1000.43,687.158 1000.99,687.158 1001.55,687.158 1002.11,687.158 1002.67,687.158 1003.23,687.158 1003.79,687.158 1004.35,687.158 1004.91,687.158 1005.46,687.158 1006.02,687.158 1006.58,687.158 1007.14,687.158 1007.7,687.158 1008.26,687.158 1008.82,687.158 1009.38,687.158 1009.94,687.158 1010.5,687.158 1011.06,687.158 1011.62,687.158 1012.18,687.158 1012.73,687.158 1013.29,687.158 1013.85,687.158 1014.41,687.158 1014.97,687.158 1015.53,687.158 1016.09,687.158 1016.65,687.158 1017.21,687.158 1017.77,687.158 1018.33,687.158 1018.89,687.158 1019.45,687.158 1020.01,687.158 1020.56,687.158 1021.12,687.158 1021.68,687.158 1022.24,687.158 1022.8,687.158 1023.36,687.158 1023.92,687.158 1024.48,687.158 1025.04,687.158 1025.6,687.158 1026.16,687.158 1026.72,687.158 1027.28,687.158 1027.83,687.158 1028.39,687.158 1028.95,687.158 1029.51,687.158 1030.07,687.158 1030.63,687.158 1031.19,687.158 1031.75,687.158 1032.31,687.158 1032.87,687.158 1033.43,687.158 1033.99,687.158 1034.55,687.158 1035.1,687.158 1035.66,687.158 1036.22,687.158 1036.78,687.158 1037.34,687.158 1037.9,687.158 1038.46,687.158 1039.02,687.158 1039.58,687.158 1040.14,687.158 1040.7,687.158 1041.26,687.158 1041.82,687.158 1042.38,687.158 1042.93,687.158 1043.49,687.158 1044.05,687.158 1044.61,687.158 1045.17,687.158 1045.73,687.158 1046.29,687.158 1046.85,687.158 1047.41,687.158 1047.97,687.158 1048.53,687.158 1049.09,687.158 1049.65,687.158 1050.2,687.158 1050.76,687.158 1051.32,687.158 1051.88,687.158 1052.44,687.158 1053,687.158 1053.56,687.158 1054.12,687.158 1054.68,687.158 1055.24,687.158 1055.8,687.158 1056.36,687.158 1056.92,687.158 1057.48,687.158 1058.03,687.158 1058.59,687.158 1059.15,687.158 1059.71,687.158 1060.27,687.158 1060.83,687.158 1061.39,687.158 1061.95,687.158 1062.51,687.158 1063.07,687.158 1063.63,687.158 1064.19,687.158 1064.75,687.158 1065.3,687.158 1065.86,687.158 1066.42,687.158 1066.98,687.158 1067.54,687.158 1068.1,687.158 1068.66,687.158 1069.22,687.158 1069.78,687.158 1070.34,687.158 1070.9,687.158 1071.46,687.158 1072.02,687.158 1072.57,687.158 1073.13,687.158 1073.69,687.158 1074.25,687.158 1074.81,687.158 1075.37,687.158 1075.93,687.158 1076.49,687.158 1077.05,687.158 1077.61,687.158 1078.17,687.158 1078.73,687.158 1079.29,687.158 1079.85,687.158 1080.4,687.158 1080.96,687.158 1081.52,687.158 1082.08,687.158 1082.64,687.158 1083.2,687.158 1083.76,687.158 1084.32,687.158 1084.88,687.158 1085.44,687.158 1086,687.158 1086.56,687.158 1087.12,687.158 1087.67,687.158 1088.23,687.158 1088.79,687.158 1089.35,687.158 1089.91,687.158 1090.47,687.158 1091.03,687.158 1091.59,687.158 1092.15,687.158 1092.71,687.158 1093.27,687.158 1093.83,687.158 1094.39,687.158 1094.94,687.158 1095.5,687.158 1096.06,687.158 1096.62,687.158 1097.18,687.158 1097.74,687.158 1098.3,687.158 1098.86,687.158 1099.42,687.158 1099.98,687.158 1100.54,687.158 1101.1,687.158 1101.66,687.158 1102.22,687.158 1102.77,687.158 1103.33,687.158 1103.89,687.158 1104.45,687.158 1105.01,687.158 1105.57,687.158 1106.13,687.158 1106.69,687.158 1107.25,687.158 1107.81,687.158 1108.37,687.158 1108.93,687.158 1109.49,687.158 1110.04,687.158 1110.6,687.158 1111.16,687.158 1111.72,687.158 1112.28,687.158 1112.84,687.158 1113.4,687.158 1113.96,687.158 1114.52,687.158 1115.08,687.158 1115.64,687.158 1116.2,687.158 1116.76,687.158 1117.31,687.158 1117.87,687.158 1118.43,687.158 1118.99,687.158 1119.55,687.158 1120.11,687.158 1120.67,687.158 1121.23,687.158 1121.79,687.158 1122.35,687.158 1122.91,687.158 1123.47,687.158 1124.03,687.158 1124.59,687.158 1125.14,687.158 1125.7,687.158 1126.26,687.158 1126.82,687.158 1127.38,687.158 1127.94,687.158 1128.5,687.158 1129.06,687.158 1129.62,687.158 1130.18,687.158 1130.74,687.158 1131.3,687.158 1131.86,687.158 1132.41,687.158 1132.97,687.158 1133.53,687.158 1134.09,687.158 1134.65,687.158 1135.21,687.158 1135.77,687.158 1136.33,687.158 1136.89,687.158 1137.45,687.158 1138.01,687.158 1138.57,687.158 1139.13,687.158 1139.68,687.158 1140.24,687.158 1140.8,687.158 1141.36,687.158 1141.92,687.158 1142.48,687.158 1143.04,687.158 1143.6,687.158 1144.16,687.158 1144.72,687.158 1145.28,687.158 1145.84,687.158 1146.4,687.158 1146.96,687.158 1147.51,687.158 1148.07,687.158 1148.63,687.158 1149.19,687.158 1149.75,687.158 1150.31,687.158 1150.87,687.158 1151.43,687.158 1151.99,687.158 1152.55,687.158 1153.11,687.158 1153.67,687.158 1154.23,687.158 1154.78,687.158 1155.34,687.158 1155.9,687.158 1156.46,687.158 1157.02,687.158 1157.58,687.158 1158.14,687.158 1158.7,687.158 1159.26,687.158 1159.82,687.158 1160.38,687.158 1160.94,687.158 1161.5,687.158 1162.05,687.158 1162.61,687.158 1163.17,687.158 1163.73,687.158 1164.29,687.158 1164.85,687.158 1165.41,687.158 1165.97,687.158 1166.53,687.158 1167.09,687.158 1167.65,687.158 1168.21,687.158 1168.77,687.158 1169.33,687.158 1169.88,687.158 1170.44,687.158 1171,687.158 1171.56,687.158 1172.12,687.158 1172.68,687.158 1173.24,687.158 1173.8,687.158 1174.36,687.158 1174.92,687.158 1175.48,687.158 1176.04,687.158 1176.6,687.158 1177.15,687.158 1177.71,687.158 1178.27,687.158 1178.83,687.158 1179.39,687.158 1179.95,687.158 1180.51,687.158 1181.07,687.158 1181.63,687.158 1182.19,687.158 1182.75,687.158 1183.31,687.158 1183.87,687.158 1184.43,687.158 1184.98,687.158 1185.54,687.158 1186.1,687.158 1186.66,687.158 1187.22,687.158 1187.78,687.158 1188.34,687.158 1188.9,687.158 1189.46,687.158 1190.02,687.158 1190.58,687.158 1191.14,687.158 1191.7,687.158 1192.25,687.158 1192.81,687.158 1193.37,687.158 1193.93,687.158 1194.49,687.158 1195.05,687.158 1195.61,687.158 1196.17,687.158 1196.73,687.158 1197.29,687.158 1197.85,687.158 1198.41,687.158 1198.97,687.158 1199.52,687.158 1200.08,687.158 1200.64,687.158 1201.2,687.158 1201.76,687.158 1202.32,687.158 1202.88,687.158 1203.44,687.158 1204,687.158 1204.56,687.158 1205.12,687.158 1205.68,687.158 1206.24,687.158 1206.8,687.158 1207.35,687.158 1207.91,687.158 1208.47,687.158 1209.03,687.158 1209.59,687.158 1210.15,687.158 1210.71,687.158 1211.27,687.158 1211.83,687.158 1212.39,687.158 1212.95,687.158 1213.51,687.158 1214.07,687.158 1214.62,687.158 1215.18,687.158 1215.74,687.158 1216.3,687.158 1216.86,687.158 1217.42,687.158 1217.98,687.158 1218.54,687.158 1219.1,687.158 1219.66,687.158 1220.22,687.158 1220.78,687.158 1221.34,687.158 1221.89,687.158 1222.45,687.158 1223.01,687.158 1223.57,687.158 1224.13,687.158 1224.69,687.158 1225.25,687.158 1225.81,687.158 1226.37,687.158 1226.93,687.158 1227.49,687.158 1228.05,687.158 1228.61,687.158 1229.17,687.158 1229.72,687.158 1230.28,687.158 1230.84,687.158 1231.4,687.158 1231.96,687.158 1232.52,687.158 1233.08,687.158 1233.64,687.158 1234.2,687.158 1234.76,687.158 1235.32,687.158 1235.88,687.158 1236.44,687.158 1236.99,687.158 1237.55,687.158 1238.11,687.158 1238.67,687.158 1239.23,687.158 1239.79,687.158 1240.35,687.158 1240.91,687.158 1241.47,687.158 1242.03,687.158 1242.59,687.158 1243.15,687.158 1243.71,687.158 1244.26,687.158 1244.82,687.158 1245.38,687.158 1245.94,687.158 1246.5,687.158 1247.06,687.158 1247.62,687.158 1248.18,687.158 1248.74,687.158 1249.3,687.158 1249.86,687.158 1250.42,687.158 1250.98,687.158 1251.54,687.158 1252.09,687.158 1252.65,687.158 1253.21,687.158 1253.77,687.158 1254.33,687.158 1254.89,687.158 1255.45,687.158 1256.01,687.158 1256.57,687.158 1257.13,687.158 1257.69,687.158 1258.25,687.158 1258.81,687.158 1259.36,687.158 1259.92,687.158 1260.48,687.158 1261.04,687.158 1261.6,687.158 1262.16,687.158 1262.72,687.158 1263.28,687.158 1263.84,687.158 1264.4,687.158 1264.96,687.158 1265.52,687.158 1266.08,687.158 1266.63,687.158 1267.19,687.158 1267.75,687.158 1268.31,687.158 1268.87,687.158 1269.43,687.158 1269.99,687.158 1270.55,687.158 1271.11,687.158 1271.67,687.158 1272.23,687.158 1272.79,687.158 1273.35,687.158 1273.91,687.158 1274.46,687.158 1275.02,687.158 1275.58,687.158 1276.14,687.158 1276.7,687.158 1277.26,687.158 1277.82,687.158 1278.38,687.158 1278.94,687.158 1279.5,687.158 1280.06,687.158 1280.62,687.158 1281.18,687.158 1281.73,687.158 1282.29,687.158 1282.85,687.158 1283.41,687.158 1283.97,687.158 1284.53,687.158 1285.09,687.158 1285.65,687.158 1286.21,687.158 1286.77,687.158 1287.33,687.158 1287.89,687.158 1288.45,687.158 1289,687.158 1289.56,687.158 1290.12,687.158 1290.68,687.158 1291.24,687.158 1291.8,687.158 1292.36,687.158 1292.92,687.158 1293.48,687.158 1294.04,687.158 1294.6,687.158 1295.16,687.158 1295.72,687.158 1296.28,687.158 1296.83,687.158 1297.39,687.158 1297.95,687.158 1298.51,687.158 1299.07,687.158 1299.63,687.158 1300.19,687.158 1300.75,687.158 1301.31,687.158 1301.87,687.158 1302.43,687.158 1302.99,687.158 1303.55,687.158 1304.1,687.158 1304.66,687.158 1305.22,687.158 1305.78,687.158 1306.34,687.158 1306.9,687.158 1307.46,687.158 1308.02,687.158 1308.58,687.158 1309.14,687.158 1309.7,687.158 1310.26,687.158 1310.82,687.158 1311.38,687.158 1311.93,687.158 1312.49,687.158 1313.05,687.158 1313.61,687.158 1314.17,687.158 1314.73,687.158 1315.29,687.158 1315.85,687.158 1316.41,687.158 1316.97,687.158 1317.53,687.158 1318.09,687.158 1318.65,687.158 1319.2,687.158 1319.76,687.158 1320.32,687.158 1320.88,687.158 1321.44,687.158 1322,687.158 1322.56,687.158 1323.12,687.158 1323.68,687.158 1324.24,687.158 1324.8,687.158 1325.36,687.158 1325.92,687.158 1326.47,687.158 1327.03,687.158 1327.59,687.158 1328.15,687.158 1328.71,687.158 1329.27,687.158 1329.83,687.158 1330.39,687.158 1330.95,687.158 1331.51,687.158 1332.07,687.158 1332.63,687.158 1333.19,687.158 1333.75,687.158 1334.3,687.158 1334.86,687.158 1335.42,687.158 1335.98,687.158 1336.54,687.158 1337.1,687.158 1337.66,687.158 1338.22,687.158 1338.78,687.158 1339.34,687.158 1339.9,687.158 1340.46,687.158 1341.02,687.158 1341.57,687.158 1342.13,687.158 1342.69,687.158 1343.25,687.158 1343.81,687.158 1344.37,687.158 1344.93,687.158 1345.49,687.158 1346.05,687.158 1346.61,687.158 1347.17,687.158 1347.73,687.158 1348.29,687.158 1348.84,687.158 1349.4,687.158 1349.96,687.158 1350.52,687.158 1351.08,687.158 1351.64,687.158 1352.2,687.158 1352.76,687.158 1353.32,687.158 1353.88,687.158 1354.44,687.158 1355,687.158 1355.56,687.158 1356.12,687.158 1356.67,687.158 1357.23,687.158 1357.79,687.158 1358.35,687.158 1358.91,687.158 1359.47,687.158 1360.03,687.158 1360.59,687.158 1361.15,687.158 1361.71,687.158 1362.27,687.158 1362.83,687.158 1363.39,687.158 1363.94,687.158 1364.5,687.158 1365.06,687.158 1365.62,687.158 1366.18,687.158 1366.74,687.158 1367.3,687.158 1367.86,687.158 1368.42,687.158 1368.98,687.158 1369.54,687.158 1370.1,687.158 1370.66,687.158 1371.21,687.158 1371.77,687.158 1372.33,687.158 1372.89,687.158 1373.45,687.158 1374.01,687.158 1374.57,687.158 1375.13,687.158 1375.69,687.158 1376.25,687.158 1376.81,687.158 1377.37,687.158 1377.93,687.158 1378.49,687.158 1379.04,687.158 1379.6,687.158 1380.16,687.158 1380.72,687.158 1381.28,687.158 1381.84,687.158 1382.4,687.158 1382.96,687.158 1383.52,687.158 1384.08,687.158 1384.64,687.158 1385.2,687.158 1385.76,687.158 1386.31,687.158 1386.87,687.158 1387.43,687.158 1387.99,687.158 1388.55,687.158 1389.11,687.158 1389.67,687.158 1390.23,687.158 1390.79,687.158 1391.35,687.158 1391.91,687.158 1392.47,687.158 1393.03,687.158 1393.58,687.158 1394.14,687.158 1394.7,687.158 1395.26,687.158 1395.82,687.158 1396.38,687.158 1396.94,687.158 1397.5,687.158 1398.06,687.158 1398.62,687.158 1399.18,687.158 1399.74,687.158 1400.3,687.158 1400.86,687.158 1401.41,687.158 1401.97,687.158 1402.53,687.158 1403.09,687.158 1403.65,687.158 1404.21,687.158 1404.77,687.158 1405.33,687.158 1405.89,687.158 1406.45,687.158 1407.01,687.158 1407.57,687.158 1408.13,687.158 1408.68,687.158 1409.24,687.158 1409.8,687.158 1410.36,687.158 1410.92,687.158 1411.48,687.158 1412.04,687.158 1412.6,687.158 1413.16,687.158 1413.72,687.158 1414.28,687.158 1414.84,687.158 1415.4,687.158 1415.95,687.158 1416.51,687.158 1417.07,687.158 1417.63,687.158 1418.19,687.158 1418.75,687.158 1419.31,687.158 1419.87,687.158 1420.43,687.158 1420.99,687.158 1421.55,687.158 1422.11,687.158 1422.67,687.158 1423.23,687.158 1423.78,687.158 1424.34,687.158 1424.9,687.158 1425.46,687.158 1426.02,687.158 1426.58,687.158 1427.14,687.158 1427.7,687.158 1428.26,687.158 1428.82,687.158 1429.38,687.158 1429.94,687.158 1430.5,687.158 1431.05,687.158 1431.61,687.158 1432.17,687.158 1432.73,687.158 1433.29,687.158 1433.85,687.158 1434.41,687.158 1434.97,687.158 1435.53,687.158 1436.09,687.158 1436.65,687.158 1437.21,687.158 1437.77,687.158 1438.33,687.158 1438.88,687.158 1439.44,687.158 1440,687.158 1440.56,687.158 1441.12,687.158 1441.68,687.158 1442.24,687.158 1442.8,687.158 1443.36,687.158 1443.92,687.158 1444.48,687.158 1445.04,687.158 1445.6,687.158 1446.15,687.158 1446.71,687.158 1447.27,687.158 1447.83,687.158 1448.39,687.158 1448.95,687.158 1449.51,687.158 1450.07,687.158 1450.63,687.158 1451.19,687.158 1451.75,687.158 1452.31,687.158 1452.87,687.158 1453.42,687.158 1453.98,687.158 1454.54,687.158 1455.1,687.158 1455.66,687.158 1456.22,687.158 1456.78,687.158 1457.34,687.158 1457.9,687.158 1458.46,687.158 1459.02,687.158 1459.58,687.158 1460.14,687.158 1460.7,687.158 1461.25,687.158 1461.81,687.158 1462.37,687.158 1462.93,687.158 1463.49,687.158 1464.05,687.158 1464.61,687.158 1465.17,687.158 1465.73,687.158 1466.29,687.158 1466.85,687.158 1467.41,687.158 1467.97,687.158 1468.52,687.158 1469.08,687.158 1469.64,687.158 1470.2,687.158 1470.76,687.158 1471.32,687.158 1471.88,687.158 1472.44,687.158 1473,687.158 1473.56,687.158 1474.12,687.158 1474.68,687.158 1475.24,687.158 1475.79,687.158 1476.35,687.158 1476.91,687.158 1477.47,687.158 1478.03,687.158 1478.59,687.158 1479.15,687.158 1479.71,687.158 1480.27,687.158 1480.83,687.158 1481.39,687.158 1481.95,687.158 1482.51,687.158 1483.07,687.158 1483.62,687.158 1484.18,687.158 1484.74,687.158 1485.3,687.158 1485.86,687.158 1486.42,687.158 1486.98,687.158 1487.54,687.158 1488.1,687.158 1488.66,687.158 1489.22,687.158 1489.78,687.158 1490.34,687.158 1490.89,687.158 1491.45,687.158 1492.01,687.158 1492.57,687.158 1493.13,687.158 1493.69,687.158 1494.25,687.158 1494.81,687.158 1495.37,687.158 1495.93,687.158 1496.49,687.158 1497.05,687.158 1497.61,687.158 1498.16,687.158 1498.72,687.158 1499.28,687.158 1499.84,687.158 1500.4,687.158 1500.96,687.158 1501.52,687.158 1502.08,687.158 1502.64,687.158 1503.2,687.158 1503.76,687.158 1504.32,687.158 1504.88,687.158 1505.44,687.158 1505.99,687.158 1506.55,687.158 1507.11,687.158 1507.67,687.158 1508.23,687.158 1508.79,687.158 1509.35,687.158 1509.91,687.158 1510.47,687.158 1511.03,687.158 1511.59,687.158 1512.15,687.158 1512.71,687.158 1513.26,687.158 1513.82,687.158 1514.38,687.158 1514.94,687.158 1515.5,687.158 1516.06,687.158 1516.62,687.158 1517.18,687.158 1517.74,687.158 1518.3,687.158 1518.86,687.158 1519.42,687.158 1519.98,687.158 1520.53,687.158 1521.09,687.158 1521.65,687.158 1522.21,687.158 1522.77,687.158 1523.33,687.158 1523.89,687.158 1524.45,687.158 1525.01,687.158 1525.57,687.158 1526.13,687.158 1526.69,687.158 1527.25,687.158 1527.81,687.158 1528.36,687.158 1528.92,687.158 1529.48,687.158 1530.04,687.158 1530.6,687.158 1531.16,687.158 1531.72,687.158 1532.28,687.158 1532.84,687.158 1533.4,687.158 1533.96,687.158 1534.52,687.158 1535.08,687.158 1535.63,687.158 1536.19,687.158 1536.75,687.158 1537.31,687.158 1537.87,687.158 1538.43,687.158 1538.99,687.158 1539.55,687.158 1540.11,687.158 1540.67,687.158 1541.23,687.158 1541.79,687.158 1542.35,687.158 1542.9,687.158 1543.46,687.158 1544.02,687.158 1544.58,687.158 1545.14,687.158 1545.7,687.158 1546.26,687.158 1546.82,687.158 1547.38,687.158 1547.94,687.158 1548.5,687.158 1549.06,687.158 1549.62,687.158 1550.18,687.158 1550.73,687.158 1551.29,687.158 1551.85,687.158 1552.41,687.158 1552.97,687.158 1553.53,687.158 1554.09,687.158 1554.65,687.158 1555.21,687.158 1555.77,687.158 1556.33,687.158 1556.89,687.158 1557.45,687.158 1558,687.158 1558.56,687.158 1559.12,687.158 1559.68,687.158 1560.24,687.158 1560.8,687.158 1561.36,687.158 1561.92,687.158 1562.48,687.158 1563.04,687.158 1563.6,687.158 1564.16,687.158 1564.72,687.158 1565.28,687.158 1565.83,687.158 1566.39,687.158 1566.95,687.158 1567.51,687.158 1568.07,687.158 1568.63,687.158 1569.19,687.158 1569.75,687.158 1570.31,687.158 1570.87,687.158 1571.43,687.158 1571.99,687.158 1572.55,687.158 1573.1,687.158 1573.66,687.158 1574.22,687.158 1574.78,687.158 1575.34,687.158 1575.9,687.158 1576.46,687.158 1577.02,687.158 1577.58,687.158 1578.14,687.158 1578.7,687.158 1579.26,687.158 1579.82,687.158 1580.37,687.158 1580.93,687.158 1581.49,687.158 1582.05,687.158 1582.61,687.158 1583.17,687.158 1583.73,687.158 1584.29,687.158 1584.85,687.158 1585.41,687.158 1585.97,687.158 1586.53,687.158 1587.09,687.158 1587.65,687.158 1588.2,687.158 1588.76,687.158 1589.32,687.158 1589.88,687.158 1590.44,687.158 1591,687.158 1591.56,687.158 1592.12,687.158 1592.68,687.158 1593.24,687.158 1593.8,687.158 1594.36,687.158 1594.92,687.158 1595.47,687.158 1596.03,687.158 1596.59,687.158 1597.15,687.158 1597.71,687.158 1598.27,687.158 1598.83,687.158 1599.39,687.158 1599.95,687.158 1600.51,687.158 1601.07,687.158 1601.63,687.158 1602.19,687.158 1602.74,687.158 1603.3,687.158 1603.86,687.158 1604.42,687.158 1604.98,687.158 1605.54,687.158 1606.1,687.158 1606.66,687.158 1607.22,687.158 1607.78,687.158 1608.34,687.158 1608.9,687.158 1609.46,687.158 1610.02,687.158 1610.57,687.158 1611.13,687.158 1611.69,687.158 1612.25,687.158 1612.81,687.158 1613.37,687.158 1613.93,687.158 1614.49,687.158 1615.05,687.158 1615.61,687.158 1616.17,687.158 1616.73,687.158 1617.29,687.158 1617.84,687.158 1618.4,687.158 1618.96,687.158 1619.52,687.158 1620.08,687.158 1620.64,687.158 1621.2,687.158 1621.76,687.158 1622.32,687.158 1622.88,687.158 1623.44,687.158 1624,687.158 1624.56,687.158 1625.11,687.158 1625.67,687.158 1626.23,687.158 1626.79,687.158 1627.35,687.158 1627.91,687.158 1628.47,687.158 1629.03,687.158 1629.59,687.158 1630.15,687.158 1630.71,687.158 1631.27,687.158 1631.83,687.158 1632.39,687.158 1632.94,687.158 1633.5,687.158 1634.06,687.158 1634.62,687.158 1635.18,687.158 1635.74,687.158 1636.3,687.158 1636.86,687.158 1637.42,687.158 1637.98,687.158 1638.54,687.158 1639.1,687.158 1639.66,687.158 1640.21,687.158 1640.77,687.158 1641.33,687.158 1641.89,687.158 1642.45,687.158 1643.01,687.158 1643.57,687.158 1644.13,687.158 1644.69,687.158 1645.25,687.158 1645.81,687.158 1646.37,687.158 1646.93,687.158 1647.48,687.158 1648.04,687.158 1648.6,687.158 1649.16,687.158 1649.72,687.158 1650.28,687.158 1650.84,687.158 1651.4,687.158 1651.96,687.158 1652.52,687.158 1653.08,687.158 1653.64,687.158 1654.2,687.158 1654.76,687.158 1655.31,687.158 1655.87,687.158 1656.43,687.158 1656.99,687.158 1657.55,687.158 1658.11,687.158 1658.67,687.158 1659.23,687.158 1659.79,687.158 1660.35,687.158 1660.91,687.158 1661.47,687.158 1662.03,687.158 1662.58,687.158 1663.14,687.158 1663.7,687.158 1664.26,687.158 1664.82,687.158 1665.38,687.158 1665.94,687.158 1666.5,687.158 1667.06,687.158 1667.62,687.158 1668.18,687.158 1668.74,687.158 1669.3,687.158 1669.85,687.158 1670.41,687.158 1670.97,687.158 1671.53,687.158 1672.09,687.158 1672.65,687.158 1673.21,687.158 1673.77,687.158 1674.33,687.158 1674.89,687.158 1675.45,687.158 1676.01,687.158 1676.57,687.158 1677.13,687.158 1677.68,687.158 1678.24,687.158 1678.8,687.158 1679.36,687.158 1679.92,687.158 1680.48,687.158 1681.04,687.158 1681.6,687.158 1682.16,687.158 1682.72,687.158 1683.28,687.158 1683.84,687.158 1684.4,687.158 1684.95,687.158 1685.51,687.158 1686.07,687.158 1686.63,687.158 1687.19,687.158 1687.75,687.158 1688.31,687.158 1688.87,687.158 1689.43,687.158 1689.99,687.158 1690.55,687.158 1691.11,687.158 1691.67,687.158 1692.23,687.158 1692.78,687.158 1693.34,687.158 1693.9,687.158 1694.46,687.158 1695.02,687.158 1695.58,687.158 1696.14,687.158 1696.7,687.158 1697.26,687.158 1697.82,687.158 1698.38,687.158 1698.94,687.158 1699.5,687.158 1700.05,687.158 1700.61,687.158 1701.17,687.158 1701.73,687.158 1702.29,687.158 1702.85,687.158 1703.41,687.158 1703.97,687.158 1704.53,687.158 1705.09,687.158 1705.65,687.158 1706.21,687.158 1706.77,687.158 1707.32,687.158 1707.88,687.158 1708.44,687.158 1709,687.158 1709.56,687.158 1710.12,687.158 1710.68,687.158 1711.24,687.158 1711.8,687.158 1712.36,687.158 1712.92,687.158 1713.48,687.158 1714.04,687.158 1714.6,687.158 1715.15,687.158 1715.71,687.158 1716.27,687.158 1716.83,687.158 1717.39,687.158 1717.95,687.158 1718.51,687.158 1719.07,687.158 1719.63,687.158 1720.19,687.158 1720.75,687.158 1721.31,687.158 1721.87,687.158 1722.42,687.158 1722.98,687.158 1723.54,687.158 1724.1,687.158 1724.66,687.158 1725.22,687.158 1725.78,687.158 1726.34,687.158 1726.9,687.158 1727.46,687.158 1728.02,687.158 1728.58,687.158 1729.14,687.158 1729.69,687.158 1730.25,687.158 1730.81,687.158 1731.37,687.158 1731.93,687.158 1732.49,687.158 1733.05,687.158 1733.61,687.158 1734.17,687.158 1734.73,687.158 1735.29,687.158 1735.85,687.158 1736.41,687.158 1736.97,687.158 1737.52,687.158 1738.08,687.158 1738.64,687.158 1739.2,687.158 1739.76,687.158 1740.32,687.158 1740.88,687.158 1741.44,687.158 1742,687.158 1742.56,687.158 1743.12,687.158 1743.68,687.158 1744.24,687.158 1744.79,687.158 1745.35,687.158 1745.91,687.158 1746.47,687.158 1747.03,687.158 1747.59,687.158 1748.15,687.158 1748.71,687.158 1749.27,687.158 1749.83,687.158 1750.39,687.158 1750.95,687.158 1751.51,687.158 1752.06,687.158 1752.62,687.158 1753.18,687.158 1753.74,687.158 1754.3,687.158 1754.86,687.158 1755.42,687.158 1755.98,687.158 1756.54,687.158 1757.1,687.158 1757.66,687.158 1758.22,687.158 1758.78,687.158 1759.34,687.158 1759.89,687.158 1760.45,687.158 1761.01,687.158 1761.57,687.158 1762.13,687.158 1762.69,687.158 1763.25,687.158 1763.81,687.158 1764.37,687.158 1764.93,687.158 1765.49,687.158 1766.05,687.158 1766.61,687.158 1767.16,687.158 1767.72,687.158 1768.28,687.158 1768.84,687.158 1769.4,687.158 1769.96,687.158 1770.52,687.158 1771.08,687.158 1771.64,687.158 1772.2,687.158 1772.76,687.158 1773.32,687.158 1773.88,687.158 1774.43,687.158 1774.99,687.158 1775.55,687.158 1776.11,687.158 1776.67,687.158 1777.23,687.158 1777.79,687.158 1778.35,687.158 1778.91,687.158 1779.47,687.158 1780.03,687.158 1780.59,687.158 1781.15,687.158 1781.71,687.158 1782.26,687.158 1782.82,687.158 1783.38,687.158 1783.94,687.158 1784.5,687.158 1785.06,687.158 1785.62,687.158 1786.18,687.158 1786.74,687.158 1787.3,687.158 1787.86,687.158 1788.42,687.158 1788.98,687.158 1789.53,687.158 1790.09,687.158 1790.65,687.158 1791.21,687.158 1791.77,687.158 1792.33,687.158 1792.89,687.158 1793.45,687.158 1794.01,687.158 1794.57,687.158 1795.13,687.158 1795.69,687.158 1796.25,687.158 1796.8,687.158 1797.36,687.158 1797.92,687.158 1798.48,687.158 1799.04,687.158 1799.6,687.158 1800.16,687.158 1800.72,687.158 1801.28,687.158 1801.84,687.158 1802.4,687.158 1802.96,687.158 1803.52,687.158 1804.08,687.158 1804.63,687.158 1805.19,687.158 1805.75,687.158 1806.31,687.158 1806.87,687.158 1807.43,687.158 1807.99,687.158 1808.55,687.158 1809.11,687.158 1809.67,687.158 1810.23,687.158 1810.79,687.158 1811.35,687.158 1811.9,687.158 1812.46,687.158 1813.02,687.158 1813.58,687.158 1814.14,687.158 1814.7,687.158 1815.26,687.158 1815.82,687.158 1816.38,687.158 1816.94,687.158 1817.5,687.158 1818.06,687.158 1818.62,687.158 1819.18,687.158 1819.73,687.158 1820.29,687.158 1820.85,687.158 1821.41,687.158 1821.97,687.158 1822.53,687.158 1823.09,687.158 1823.65,687.158 1824.21,687.158 1824.77,687.158 1825.33,687.158 1825.89,687.158 1826.45,687.158 1827,687.158 1827.56,687.158 1828.12,687.158 1828.68,687.158 1829.24,687.158 1829.8,687.158 1830.36,687.158 1830.92,687.158 1831.48,687.158 1832.04,687.158 1832.6,687.158 1833.16,687.158 1833.72,687.158 1834.27,687.158 1834.83,687.158 1835.39,687.158 1835.95,687.158 1836.51,687.158 1837.07,687.158 1837.63,687.158 1838.19,687.158 \"/>\n<path clip-path=\"url(#clip943)\" d=\"M720.247 684.798 L720.806 684.798 L721.365 684.798 L721.924 684.798 L722.484 684.798 L723.043 684.798 L723.602 684.798 L724.161 684.798 L724.721 684.798 L725.28 684.798 L725.839 684.798 L726.398 684.798 L726.958 684.798 L727.517 684.798 L728.076 684.798 L728.635 684.798 L729.195 684.798 L729.754 684.798 L730.313 684.798 L730.872 684.798 L731.432 684.798 L731.991 684.798 L732.55 684.798 L733.109 684.798 L733.669 684.798 L734.228 684.798 L734.787 684.798 L735.346 684.798 L735.906 684.798 L736.465 684.798 L737.024 684.798 L737.583 684.798 L738.143 684.798 L738.702 684.798 L739.261 684.798 L739.82 684.798 L740.38 684.798 L740.939 684.798 L741.498 684.798 L742.057 684.798 L742.617 684.798 L743.176 684.798 L743.735 684.798 L744.294 684.798 L744.854 684.798 L745.413 684.798 L745.972 684.798 L746.531 684.798 L747.091 684.798 L747.65 684.798 L748.209 684.798 L748.768 684.798 L749.328 684.798 L749.887 684.798 L750.446 684.798 L751.005 684.798 L751.565 684.798 L752.124 684.798 L752.683 684.798 L753.242 684.798 L753.802 684.798 L754.361 684.798 L754.92 684.798 L755.479 684.798 L756.039 684.798 L756.598 684.798 L757.157 684.798 L757.716 684.798 L758.276 684.798 L758.835 684.798 L759.394 684.798 L759.953 684.798 L760.513 684.798 L761.072 684.798 L761.631 684.798 L762.19 684.798 L762.75 684.798 L763.309 684.798 L763.868 684.798 L764.427 684.798 L764.987 684.798 L765.546 684.798 L766.105 684.798 L766.664 684.798 L767.224 684.798 L767.783 684.798 L768.342 684.798 L768.901 684.798 L769.461 684.798 L770.02 684.798 L770.579 684.798 L771.138 684.798 L771.698 684.798 L772.257 684.798 L772.816 684.798 L773.375 684.798 L773.935 684.798 L774.494 684.798 L775.053 684.798 L775.612 684.798 L776.172 684.798 L776.731 684.798 L777.29 684.798 L777.849 684.798 L778.409 684.798 L778.968 684.798 L779.527 684.798 L780.086 684.798 L780.646 684.798 L781.205 684.798 L781.764 684.798 L782.323 684.798 L782.883 684.798 L783.442 684.798 L784.001 684.798 L784.56 684.798 L785.12 684.798 L785.679 684.798 L786.238 684.798 L786.797 684.798 L787.357 684.798 L787.916 684.798 L788.475 684.798 L789.034 684.798 L789.594 684.798 L790.153 684.798 L790.712 684.798 L791.271 684.798 L791.831 684.798 L792.39 684.798 L792.949 684.798 L793.508 684.798 L794.068 684.798 L794.627 684.798 L795.186 684.798 L795.745 684.798 L796.305 684.798 L796.864 684.798 L797.423 684.798 L797.982 684.798 L798.542 684.798 L799.101 684.798 L799.66 684.798 L800.219 684.798 L800.779 684.798 L801.338 684.798 L801.897 684.798 L802.456 684.798 L803.016 684.798 L803.575 684.798 L804.134 684.798 L804.693 684.798 L805.253 684.798 L805.812 684.798 L806.371 684.798 L806.931 684.798 L807.49 684.798 L808.049 684.798 L808.608 684.798 L809.168 684.798 L809.727 684.798 L810.286 684.798 L810.845 684.798 L811.405 684.798 L811.964 684.798 L812.523 684.798 L813.082 684.798 L813.642 684.798 L814.201 684.798 L814.76 684.798 L815.319 684.798 L815.879 684.798 L816.438 684.798 L816.997 684.798 L817.556 684.798 L818.116 684.798 L818.675 684.798 L819.234 684.798 L819.793 684.798 L820.353 684.798 L820.912 684.798 L821.471 684.798 L822.03 684.798 L822.59 684.798 L823.149 684.798 L823.708 684.798 L824.267 684.798 L824.827 684.798 L825.386 684.798 L825.945 684.798 L826.504 684.798 L827.064 684.798 L827.623 684.798 L828.182 684.798 L828.741 684.798 L829.301 684.798 L829.86 684.798 L830.419 684.798 L830.978 684.798 L831.538 684.798 L832.097 684.798 L832.656 684.798 L833.215 684.798 L833.775 684.798 L834.334 684.798 L834.893 684.798 L835.452 684.798 L836.012 684.798 L836.571 684.798 L837.13 684.798 L837.689 684.798 L838.249 684.798 L838.808 684.798 L839.367 684.798 L839.926 684.798 L840.486 684.798 L841.045 684.798 L841.604 684.798 L842.163 684.798 L842.723 684.798 L843.282 684.798 L843.841 684.798 L844.4 684.798 L844.96 684.798 L845.519 684.798 L846.078 684.798 L846.637 684.798 L847.197 684.798 L847.756 684.798 L848.315 684.798 L848.874 684.798 L849.434 684.798 L849.993 684.798 L850.552 684.798 L851.111 684.798 L851.671 684.798 L852.23 684.798 L852.789 684.798 L853.348 684.798 L853.908 684.798 L854.467 684.798 L855.026 684.798 L855.585 684.798 L856.145 684.798 L856.704 684.798 L857.263 684.798 L857.822 684.798 L858.382 684.798 L858.941 684.798 L859.5 684.798 L860.059 684.798 L860.619 684.798 L861.178 684.798 L861.737 684.798 L862.296 684.798 L862.856 684.798 L863.415 684.798 L863.974 684.798 L864.533 684.798 L865.093 684.798 L865.652 684.798 L866.211 684.798 L866.77 684.798 L867.33 684.798 L867.889 684.798 L868.448 684.798 L869.007 684.798 L869.567 684.798 L870.126 684.798 L870.685 684.798 L871.244 684.798 L871.804 684.798 L872.363 684.798 L872.922 684.798 L873.481 684.798 L874.041 684.798 L874.6 684.798 L875.159 684.798 L875.718 684.798 L876.278 684.798 L876.837 684.798 L877.396 684.798 L877.955 684.798 L878.515 684.798 L879.074 684.798 L879.633 684.798 L880.192 684.798 L880.752 684.798 L881.311 684.798 L881.87 684.798 L882.429 684.798 L882.989 684.798 L883.548 684.798 L884.107 684.798 L884.666 684.798 L885.226 684.798 L885.785 684.798 L886.344 684.798 L886.903 684.798 L887.463 684.798 L888.022 684.798 L888.581 684.798 L889.14 684.798 L889.7 684.798 L890.259 684.798 L890.818 684.798 L891.377 684.798 L891.937 684.798 L892.496 684.798 L893.055 684.798 L893.614 684.798 L894.174 684.798 L894.733 684.798 L895.292 684.798 L895.851 684.798 L896.411 684.798 L896.97 684.798 L897.529 684.798 L898.088 684.798 L898.648 684.798 L899.207 684.798 L899.766 684.798 L900.325 684.798 L900.885 684.798 L901.444 684.798 L902.003 684.798 L902.562 684.798 L903.122 684.798 L903.681 684.798 L904.24 684.798 L904.799 684.798 L905.359 684.798 L905.918 684.798 L906.477 684.798 L907.036 684.798 L907.596 684.798 L908.155 684.798 L908.714 684.798 L909.273 684.798 L909.833 684.798 L910.392 684.798 L910.951 684.798 L911.51 684.798 L912.07 684.798 L912.629 684.798 L913.188 684.798 L913.747 684.798 L914.307 684.798 L914.866 684.798 L915.425 684.798 L915.984 684.798 L916.544 684.798 L917.103 684.798 L917.662 684.798 L918.221 684.798 L918.781 684.798 L919.34 684.798 L919.899 684.798 L920.458 684.798 L921.018 684.798 L921.577 684.798 L922.136 684.798 L922.695 684.798 L923.255 684.798 L923.814 684.798 L924.373 684.798 L924.932 684.798 L925.492 684.798 L926.051 684.798 L926.61 684.798 L927.169 684.798 L927.729 684.798 L928.288 684.798 L928.847 684.798 L929.406 684.798 L929.966 684.798 L930.525 684.798 L931.084 684.798 L931.644 684.798 L932.203 684.798 L932.762 684.798 L933.321 684.798 L933.881 684.798 L934.44 684.798 L934.999 684.798 L935.558 684.798 L936.118 684.798 L936.677 684.798 L937.236 684.798 L937.795 684.798 L938.355 684.798 L938.914 684.798 L939.473 684.798 L940.032 684.798 L940.592 684.798 L941.151 684.798 L941.71 684.798 L942.269 684.798 L942.829 684.798 L943.388 684.798 L943.947 684.798 L944.506 684.798 L945.066 684.798 L945.625 684.798 L946.184 684.798 L946.743 684.798 L947.303 684.798 L947.862 684.798 L948.421 684.798 L948.98 684.798 L949.54 684.798 L950.099 684.798 L950.658 684.798 L951.217 684.798 L951.777 684.798 L952.336 684.798 L952.895 684.798 L953.454 684.798 L954.014 684.798 L954.573 684.798 L955.132 684.798 L955.691 684.798 L956.251 684.798 L956.81 684.798 L957.369 684.798 L957.928 684.798 L958.488 684.798 L959.047 684.798 L959.606 684.798 L960.165 684.798 L960.725 684.798 L961.284 684.798 L961.843 684.798 L962.402 684.798 L962.962 684.798 L963.521 684.798 L964.08 684.798 L964.639 684.798 L965.199 684.798 L965.758 684.798 L966.317 684.798 L966.876 684.798 L967.436 684.798 L967.995 684.798 L968.554 684.798 L969.113 684.798 L969.673 684.798 L970.232 684.798 L970.791 684.798 L971.35 684.798 L971.91 684.798 L972.469 684.798 L973.028 684.798 L973.587 684.798 L974.147 684.798 L974.706 684.798 L975.265 684.798 L975.824 684.798 L976.384 684.798 L976.943 684.798 L977.502 684.798 L978.061 684.798 L978.621 684.798 L979.18 684.798 L979.739 684.798 L980.298 684.798 L980.858 684.798 L981.417 684.798 L981.976 684.798 L982.535 684.798 L983.095 684.798 L983.654 684.798 L984.213 684.798 L984.772 684.798 L985.332 684.798 L985.891 684.798 L986.45 684.798 L987.009 684.798 L987.569 684.798 L988.128 684.798 L988.687 684.798 L989.246 684.798 L989.806 684.798 L990.365 684.798 L990.924 684.798 L991.483 684.798 L992.043 684.798 L992.602 684.798 L993.161 684.798 L993.72 684.798 L994.28 684.798 L994.839 684.798 L995.398 684.798 L995.957 684.798 L996.517 684.798 L997.076 684.798 L997.635 684.798 L998.194 684.798 L998.754 684.798 L999.313 684.798 L999.872 684.798 L1000.43 684.798 L1000.99 684.798 L1001.55 684.798 L1002.11 684.798 L1002.67 684.798 L1003.23 684.798 L1003.79 684.798 L1004.35 684.798 L1004.91 684.798 L1005.46 684.798 L1006.02 684.798 L1006.58 684.798 L1007.14 684.798 L1007.7 684.798 L1008.26 684.798 L1008.82 684.798 L1009.38 684.798 L1009.94 684.798 L1010.5 684.798 L1011.06 684.798 L1011.62 684.798 L1012.18 684.798 L1012.73 684.798 L1013.29 684.798 L1013.85 684.798 L1014.41 684.798 L1014.97 684.798 L1015.53 684.798 L1016.09 684.798 L1016.65 684.798 L1017.21 684.798 L1017.77 684.798 L1018.33 684.798 L1018.89 684.798 L1019.45 684.798 L1020.01 684.798 L1020.56 684.798 L1021.12 684.798 L1021.68 684.798 L1022.24 684.798 L1022.8 684.798 L1023.36 684.798 L1023.92 684.798 L1024.48 684.798 L1025.04 684.798 L1025.6 684.798 L1026.16 684.798 L1026.72 684.798 L1027.28 684.798 L1027.83 684.798 L1028.39 684.798 L1028.95 684.798 L1029.51 684.798 L1030.07 684.798 L1030.63 684.798 L1031.19 684.798 L1031.75 684.798 L1032.31 684.798 L1032.87 684.798 L1033.43 684.798 L1033.99 684.798 L1034.55 684.798 L1035.1 684.798 L1035.66 684.798 L1036.22 684.798 L1036.78 684.798 L1037.34 684.798 L1037.9 684.798 L1038.46 684.798 L1039.02 684.798 L1039.58 684.798 L1040.14 684.798 L1040.7 684.798 L1041.26 684.798 L1041.82 684.798 L1042.38 684.798 L1042.93 684.798 L1043.49 684.798 L1044.05 684.798 L1044.61 684.798 L1045.17 684.798 L1045.73 684.798 L1046.29 684.798 L1046.85 684.798 L1047.41 684.798 L1047.97 684.798 L1048.53 684.798 L1049.09 684.798 L1049.65 684.798 L1050.2 684.798 L1050.76 684.798 L1051.32 684.798 L1051.88 684.798 L1052.44 684.798 L1053 684.798 L1053.56 684.798 L1054.12 684.798 L1054.68 684.798 L1055.24 684.798 L1055.8 684.798 L1056.36 684.798 L1056.92 684.798 L1057.48 684.798 L1058.03 684.798 L1058.59 684.798 L1059.15 684.798 L1059.71 684.798 L1060.27 684.798 L1060.83 684.798 L1061.39 684.798 L1061.95 684.798 L1062.51 684.798 L1063.07 684.798 L1063.63 684.798 L1064.19 684.798 L1064.75 684.798 L1065.3 684.798 L1065.86 684.798 L1066.42 684.798 L1066.98 684.798 L1067.54 684.798 L1068.1 684.798 L1068.66 684.798 L1069.22 684.798 L1069.78 684.798 L1070.34 684.798 L1070.9 684.798 L1071.46 684.798 L1072.02 684.798 L1072.57 684.798 L1073.13 684.798 L1073.69 684.798 L1074.25 684.798 L1074.81 684.798 L1075.37 684.798 L1075.93 684.798 L1076.49 684.798 L1077.05 684.798 L1077.61 684.798 L1078.17 684.798 L1078.73 684.798 L1079.29 684.798 L1079.85 684.798 L1080.4 684.798 L1080.96 684.798 L1081.52 684.798 L1082.08 684.798 L1082.64 684.798 L1083.2 684.798 L1083.76 684.798 L1084.32 684.798 L1084.88 684.798 L1085.44 684.798 L1086 684.798 L1086.56 684.798 L1087.12 684.798 L1087.67 684.798 L1088.23 684.798 L1088.79 684.798 L1089.35 684.798 L1089.91 684.798 L1090.47 684.798 L1091.03 684.798 L1091.59 684.798 L1092.15 684.798 L1092.71 684.798 L1093.27 684.798 L1093.83 684.798 L1094.39 684.798 L1094.94 684.798 L1095.5 684.798 L1096.06 684.798 L1096.62 684.798 L1097.18 684.798 L1097.74 684.798 L1098.3 684.798 L1098.86 684.798 L1099.42 684.798 L1099.98 684.798 L1100.54 684.798 L1101.1 684.798 L1101.66 684.798 L1102.22 684.798 L1102.77 684.798 L1103.33 684.798 L1103.89 684.798 L1104.45 684.798 L1105.01 684.798 L1105.57 684.798 L1106.13 684.798 L1106.69 684.798 L1107.25 684.798 L1107.81 684.798 L1108.37 684.798 L1108.93 684.798 L1109.49 684.798 L1110.04 684.798 L1110.6 684.798 L1111.16 684.798 L1111.72 684.798 L1112.28 684.798 L1112.84 684.798 L1113.4 684.798 L1113.96 684.798 L1114.52 684.798 L1115.08 684.798 L1115.64 684.798 L1116.2 684.798 L1116.76 684.798 L1117.31 684.798 L1117.87 684.798 L1118.43 684.798 L1118.99 684.798 L1119.55 684.798 L1120.11 684.798 L1120.67 684.798 L1121.23 684.798 L1121.79 684.798 L1122.35 684.798 L1122.91 684.798 L1123.47 684.798 L1124.03 684.798 L1124.59 684.798 L1125.14 684.798 L1125.7 684.798 L1126.26 684.798 L1126.82 684.798 L1127.38 684.798 L1127.94 684.798 L1128.5 684.798 L1129.06 684.798 L1129.62 684.798 L1130.18 684.798 L1130.74 684.798 L1131.3 684.798 L1131.86 684.798 L1132.41 684.798 L1132.97 684.798 L1133.53 684.798 L1134.09 684.798 L1134.65 684.798 L1135.21 684.798 L1135.77 684.798 L1136.33 684.798 L1136.89 684.798 L1137.45 684.798 L1138.01 684.798 L1138.57 684.798 L1139.13 684.798 L1139.68 684.798 L1140.24 684.798 L1140.8 684.798 L1141.36 684.798 L1141.92 684.798 L1142.48 684.798 L1143.04 684.798 L1143.6 684.798 L1144.16 684.798 L1144.72 684.798 L1145.28 684.798 L1145.84 684.798 L1146.4 684.798 L1146.96 684.798 L1147.51 684.798 L1148.07 684.798 L1148.63 684.798 L1149.19 684.798 L1149.75 684.798 L1150.31 684.798 L1150.87 684.798 L1151.43 684.798 L1151.99 684.798 L1152.55 684.798 L1153.11 684.798 L1153.67 684.798 L1154.23 684.798 L1154.78 684.798 L1155.34 684.798 L1155.9 684.798 L1156.46 684.798 L1157.02 684.798 L1157.58 684.798 L1158.14 684.798 L1158.7 684.798 L1159.26 684.798 L1159.82 684.798 L1160.38 684.798 L1160.94 684.798 L1161.5 684.798 L1162.05 684.798 L1162.61 684.798 L1163.17 684.798 L1163.73 684.798 L1164.29 684.798 L1164.85 684.798 L1165.41 684.798 L1165.97 684.798 L1166.53 684.798 L1167.09 684.798 L1167.65 684.798 L1168.21 684.798 L1168.77 684.798 L1169.33 684.798 L1169.88 684.798 L1170.44 684.798 L1171 684.798 L1171.56 684.798 L1172.12 684.798 L1172.68 684.798 L1173.24 684.798 L1173.8 684.798 L1174.36 684.798 L1174.92 684.798 L1175.48 684.798 L1176.04 684.798 L1176.6 684.798 L1177.15 684.798 L1177.71 684.798 L1178.27 684.798 L1178.83 684.798 L1179.39 684.798 L1179.95 684.798 L1180.51 684.798 L1181.07 684.798 L1181.63 684.798 L1182.19 684.798 L1182.75 684.798 L1183.31 684.798 L1183.87 684.798 L1184.43 684.798 L1184.98 684.798 L1185.54 684.798 L1186.1 684.798 L1186.66 684.798 L1187.22 684.798 L1187.78 684.798 L1188.34 684.798 L1188.9 684.798 L1189.46 684.798 L1190.02 684.798 L1190.58 684.798 L1191.14 684.798 L1191.7 684.798 L1192.25 684.798 L1192.81 684.798 L1193.37 684.798 L1193.93 684.798 L1194.49 684.798 L1195.05 684.798 L1195.61 684.798 L1196.17 684.798 L1196.73 684.798 L1197.29 684.798 L1197.85 684.798 L1198.41 684.798 L1198.97 684.798 L1199.52 684.798 L1200.08 684.798 L1200.64 684.798 L1201.2 684.798 L1201.76 684.798 L1202.32 684.798 L1202.88 684.798 L1203.44 684.798 L1204 684.798 L1204.56 684.798 L1205.12 684.798 L1205.68 684.798 L1206.24 684.798 L1206.8 684.798 L1207.35 684.798 L1207.91 684.798 L1208.47 684.798 L1209.03 684.798 L1209.59 684.798 L1210.15 684.798 L1210.71 684.798 L1211.27 684.798 L1211.83 684.798 L1212.39 684.798 L1212.95 684.798 L1213.51 684.798 L1214.07 684.798 L1214.62 684.798 L1215.18 684.798 L1215.74 684.798 L1216.3 684.798 L1216.86 684.798 L1217.42 684.798 L1217.98 684.798 L1218.54 684.798 L1219.1 684.798 L1219.66 684.798 L1220.22 684.798 L1220.78 684.798 L1221.34 684.798 L1221.89 684.798 L1222.45 684.798 L1223.01 684.798 L1223.57 684.798 L1224.13 684.798 L1224.69 684.798 L1225.25 684.798 L1225.81 684.798 L1226.37 684.798 L1226.93 684.798 L1227.49 684.798 L1228.05 684.798 L1228.61 684.798 L1229.17 684.798 L1229.72 684.798 L1230.28 684.798 L1230.84 684.798 L1231.4 684.798 L1231.96 684.798 L1232.52 684.798 L1233.08 684.798 L1233.64 684.798 L1234.2 684.798 L1234.76 684.798 L1235.32 684.798 L1235.88 684.798 L1236.44 684.798 L1236.99 684.798 L1237.55 684.798 L1238.11 684.798 L1238.67 684.798 L1239.23 684.798 L1239.79 684.798 L1240.35 684.798 L1240.91 684.798 L1241.47 684.798 L1242.03 684.798 L1242.59 684.798 L1243.15 684.798 L1243.71 684.798 L1244.26 684.798 L1244.82 684.798 L1245.38 684.798 L1245.94 684.798 L1246.5 684.798 L1247.06 684.798 L1247.62 684.798 L1248.18 684.798 L1248.74 684.798 L1249.3 684.798 L1249.86 684.798 L1250.42 684.798 L1250.98 684.798 L1251.54 684.798 L1252.09 684.798 L1252.65 684.798 L1253.21 684.798 L1253.77 684.798 L1254.33 684.798 L1254.89 684.798 L1255.45 684.798 L1256.01 684.798 L1256.57 684.798 L1257.13 684.798 L1257.69 684.798 L1258.25 684.798 L1258.81 684.798 L1259.36 684.798 L1259.92 684.798 L1260.48 684.798 L1261.04 684.798 L1261.6 684.798 L1262.16 684.798 L1262.72 684.798 L1263.28 684.798 L1263.84 684.798 L1264.4 684.798 L1264.96 684.798 L1265.52 684.798 L1266.08 684.798 L1266.63 684.798 L1267.19 684.798 L1267.75 684.798 L1268.31 684.798 L1268.87 684.798 L1269.43 684.798 L1269.99 684.798 L1270.55 684.798 L1271.11 684.798 L1271.67 684.798 L1272.23 684.798 L1272.79 684.798 L1273.35 684.798 L1273.91 684.798 L1274.46 684.798 L1275.02 684.798 L1275.58 684.798 L1276.14 684.798 L1276.7 684.798 L1277.26 684.798 L1277.82 684.798 L1278.38 684.798 L1278.94 684.798 L1279.5 684.798 L1280.06 684.798 L1280.62 684.798 L1281.18 684.798 L1281.73 684.798 L1282.29 684.798 L1282.85 684.798 L1283.41 684.798 L1283.97 684.798 L1284.53 684.798 L1285.09 684.798 L1285.65 684.798 L1286.21 684.798 L1286.77 684.798 L1287.33 684.798 L1287.89 684.798 L1288.45 684.798 L1289 684.798 L1289.56 684.798 L1290.12 684.798 L1290.68 684.798 L1291.24 684.798 L1291.8 684.798 L1292.36 684.798 L1292.92 684.798 L1293.48 684.798 L1294.04 684.798 L1294.6 684.798 L1295.16 684.798 L1295.72 684.798 L1296.28 684.798 L1296.83 684.798 L1297.39 684.798 L1297.95 684.798 L1298.51 684.798 L1299.07 684.798 L1299.63 684.798 L1300.19 684.798 L1300.75 684.798 L1301.31 684.798 L1301.87 684.798 L1302.43 684.798 L1302.99 684.798 L1303.55 684.798 L1304.1 684.798 L1304.66 684.798 L1305.22 684.798 L1305.78 684.798 L1306.34 684.798 L1306.9 684.798 L1307.46 684.798 L1308.02 684.798 L1308.58 684.798 L1309.14 684.798 L1309.7 684.798 L1310.26 684.798 L1310.82 684.798 L1311.38 684.798 L1311.93 684.798 L1312.49 684.798 L1313.05 684.798 L1313.61 684.798 L1314.17 684.798 L1314.73 684.798 L1315.29 684.798 L1315.85 684.798 L1316.41 684.798 L1316.97 684.798 L1317.53 684.798 L1318.09 684.798 L1318.65 684.798 L1319.2 684.798 L1319.76 684.798 L1320.32 684.798 L1320.88 684.798 L1321.44 684.798 L1322 684.798 L1322.56 684.798 L1323.12 684.798 L1323.68 684.798 L1324.24 684.798 L1324.8 684.798 L1325.36 684.798 L1325.92 684.798 L1326.47 684.798 L1327.03 684.798 L1327.59 684.798 L1328.15 684.798 L1328.71 684.798 L1329.27 684.798 L1329.83 684.798 L1330.39 684.798 L1330.95 684.798 L1331.51 684.798 L1332.07 684.798 L1332.63 684.798 L1333.19 684.798 L1333.75 684.798 L1334.3 684.798 L1334.86 684.798 L1335.42 684.798 L1335.98 684.798 L1336.54 684.798 L1337.1 684.798 L1337.66 684.798 L1338.22 684.798 L1338.78 684.798 L1339.34 684.798 L1339.9 684.798 L1340.46 684.798 L1341.02 684.798 L1341.57 684.798 L1342.13 684.798 L1342.69 684.798 L1343.25 684.798 L1343.81 684.798 L1344.37 684.798 L1344.93 684.798 L1345.49 684.798 L1346.05 684.798 L1346.61 684.798 L1347.17 684.798 L1347.73 684.798 L1348.29 684.798 L1348.84 684.798 L1349.4 684.798 L1349.96 684.798 L1350.52 684.798 L1351.08 684.798 L1351.64 684.798 L1352.2 684.798 L1352.76 684.798 L1353.32 684.798 L1353.88 684.798 L1354.44 684.798 L1355 684.798 L1355.56 684.798 L1356.12 684.798 L1356.67 684.798 L1357.23 684.798 L1357.79 684.798 L1358.35 684.798 L1358.91 684.798 L1359.47 684.798 L1360.03 684.798 L1360.59 684.798 L1361.15 684.798 L1361.71 684.798 L1362.27 684.798 L1362.83 684.798 L1363.39 684.798 L1363.94 684.798 L1364.5 684.798 L1365.06 684.798 L1365.62 684.798 L1366.18 684.798 L1366.74 684.798 L1367.3 684.798 L1367.86 684.798 L1368.42 684.798 L1368.98 684.798 L1369.54 684.798 L1370.1 684.798 L1370.66 684.798 L1371.21 684.798 L1371.77 684.798 L1372.33 684.798 L1372.89 684.798 L1373.45 684.798 L1374.01 684.798 L1374.57 684.798 L1375.13 684.798 L1375.69 684.798 L1376.25 684.798 L1376.81 684.798 L1377.37 684.798 L1377.93 684.798 L1378.49 684.798 L1379.04 684.798 L1379.6 684.798 L1380.16 684.798 L1380.72 684.798 L1381.28 684.798 L1381.84 684.798 L1382.4 684.798 L1382.96 684.798 L1383.52 684.798 L1384.08 684.798 L1384.64 684.798 L1385.2 684.798 L1385.76 684.798 L1386.31 684.798 L1386.87 684.798 L1387.43 684.798 L1387.99 684.798 L1388.55 684.798 L1389.11 684.798 L1389.67 684.798 L1390.23 684.798 L1390.79 684.798 L1391.35 684.798 L1391.91 684.798 L1392.47 684.798 L1393.03 684.798 L1393.58 684.798 L1394.14 684.798 L1394.7 684.798 L1395.26 684.798 L1395.82 684.798 L1396.38 684.798 L1396.94 684.798 L1397.5 684.798 L1398.06 684.798 L1398.62 684.798 L1399.18 684.798 L1399.74 684.798 L1400.3 684.798 L1400.86 684.798 L1401.41 684.798 L1401.97 684.798 L1402.53 684.798 L1403.09 684.798 L1403.65 684.798 L1404.21 684.798 L1404.77 684.798 L1405.33 684.798 L1405.89 684.798 L1406.45 684.798 L1407.01 684.798 L1407.57 684.798 L1408.13 684.798 L1408.68 684.798 L1409.24 684.798 L1409.8 684.798 L1410.36 684.798 L1410.92 684.798 L1411.48 684.798 L1412.04 684.798 L1412.6 684.798 L1413.16 684.798 L1413.72 684.798 L1414.28 684.798 L1414.84 684.798 L1415.4 684.798 L1415.95 684.798 L1416.51 684.798 L1417.07 684.798 L1417.63 684.798 L1418.19 684.798 L1418.75 684.798 L1419.31 684.798 L1419.87 684.798 L1420.43 684.798 L1420.99 684.798 L1421.55 684.798 L1422.11 684.798 L1422.67 684.798 L1423.23 684.798 L1423.78 684.798 L1424.34 684.798 L1424.9 684.798 L1425.46 684.798 L1426.02 684.798 L1426.58 684.798 L1427.14 684.798 L1427.7 684.798 L1428.26 684.798 L1428.82 684.798 L1429.38 684.798 L1429.94 684.798 L1430.5 684.798 L1431.05 684.798 L1431.61 684.798 L1432.17 684.798 L1432.73 684.798 L1433.29 684.798 L1433.85 684.798 L1434.41 684.798 L1434.97 684.798 L1435.53 684.798 L1436.09 684.798 L1436.65 684.798 L1437.21 684.798 L1437.77 684.798 L1438.33 684.798 L1438.88 684.798 L1439.44 684.798 L1440 684.798 L1440.56 684.798 L1441.12 684.798 L1441.68 684.798 L1442.24 684.798 L1442.8 684.798 L1443.36 684.798 L1443.92 684.798 L1444.48 684.798 L1445.04 684.798 L1445.6 684.798 L1446.15 684.798 L1446.71 684.798 L1447.27 684.798 L1447.83 684.798 L1448.39 684.798 L1448.95 684.798 L1449.51 684.798 L1450.07 684.798 L1450.63 684.798 L1451.19 684.798 L1451.75 684.798 L1452.31 684.798 L1452.87 684.798 L1453.42 684.798 L1453.98 684.798 L1454.54 684.798 L1455.1 684.798 L1455.66 684.798 L1456.22 684.798 L1456.78 684.798 L1457.34 684.798 L1457.9 684.798 L1458.46 684.798 L1459.02 684.798 L1459.58 684.798 L1460.14 684.798 L1460.7 684.798 L1461.25 684.798 L1461.81 684.798 L1462.37 684.798 L1462.93 684.798 L1463.49 684.798 L1464.05 684.798 L1464.61 684.798 L1465.17 684.798 L1465.73 684.798 L1466.29 684.798 L1466.85 684.798 L1467.41 684.798 L1467.97 684.798 L1468.52 684.798 L1469.08 684.798 L1469.64 684.798 L1470.2 684.798 L1470.76 684.798 L1471.32 684.798 L1471.88 684.798 L1472.44 684.798 L1473 684.798 L1473.56 684.798 L1474.12 684.798 L1474.68 684.798 L1475.24 684.798 L1475.79 684.798 L1476.35 684.798 L1476.91 684.798 L1477.47 684.798 L1478.03 684.798 L1478.59 684.798 L1479.15 684.798 L1479.71 684.798 L1480.27 684.798 L1480.83 684.798 L1481.39 684.798 L1481.95 684.798 L1482.51 684.798 L1483.07 684.798 L1483.62 684.798 L1484.18 684.798 L1484.74 684.798 L1485.3 684.798 L1485.86 684.798 L1486.42 684.798 L1486.98 684.798 L1487.54 684.798 L1488.1 684.798 L1488.66 684.798 L1489.22 684.798 L1489.78 684.798 L1490.34 684.798 L1490.89 684.798 L1491.45 684.798 L1492.01 684.798 L1492.57 684.798 L1493.13 684.798 L1493.69 684.798 L1494.25 684.798 L1494.81 684.798 L1495.37 684.798 L1495.93 684.798 L1496.49 684.798 L1497.05 684.798 L1497.61 684.798 L1498.16 684.798 L1498.72 684.798 L1499.28 684.798 L1499.84 684.798 L1500.4 684.798 L1500.96 684.798 L1501.52 684.798 L1502.08 684.798 L1502.64 684.798 L1503.2 684.798 L1503.76 684.798 L1504.32 684.798 L1504.88 684.798 L1505.44 684.798 L1505.99 684.798 L1506.55 684.798 L1507.11 684.798 L1507.67 684.798 L1508.23 684.798 L1508.79 684.798 L1509.35 684.798 L1509.91 684.798 L1510.47 684.798 L1511.03 684.798 L1511.59 684.798 L1512.15 684.798 L1512.71 684.798 L1513.26 684.798 L1513.82 684.798 L1514.38 684.798 L1514.94 684.798 L1515.5 684.798 L1516.06 684.798 L1516.62 684.798 L1517.18 684.798 L1517.74 684.798 L1518.3 684.798 L1518.86 684.798 L1519.42 684.798 L1519.98 684.798 L1520.53 684.798 L1521.09 684.798 L1521.65 684.798 L1522.21 684.798 L1522.77 684.798 L1523.33 684.798 L1523.89 684.798 L1524.45 684.798 L1525.01 684.798 L1525.57 684.798 L1526.13 684.798 L1526.69 684.798 L1527.25 684.798 L1527.81 684.798 L1528.36 684.798 L1528.92 684.798 L1529.48 684.798 L1530.04 684.798 L1530.6 684.798 L1531.16 684.798 L1531.72 684.798 L1532.28 684.798 L1532.84 684.798 L1533.4 684.798 L1533.96 684.798 L1534.52 684.798 L1535.08 684.798 L1535.63 684.798 L1536.19 684.798 L1536.75 684.798 L1537.31 684.798 L1537.87 684.798 L1538.43 684.798 L1538.99 684.798 L1539.55 684.798 L1540.11 684.798 L1540.67 684.798 L1541.23 684.798 L1541.79 684.798 L1542.35 684.798 L1542.9 684.798 L1543.46 684.798 L1544.02 684.798 L1544.58 684.798 L1545.14 684.798 L1545.7 684.798 L1546.26 684.798 L1546.82 684.798 L1547.38 684.798 L1547.94 684.798 L1548.5 684.798 L1549.06 684.798 L1549.62 684.798 L1550.18 684.798 L1550.73 684.798 L1551.29 684.798 L1551.85 684.798 L1552.41 684.798 L1552.97 684.798 L1553.53 684.798 L1554.09 684.798 L1554.65 684.798 L1555.21 684.798 L1555.77 684.798 L1556.33 684.798 L1556.89 684.798 L1557.45 684.798 L1558 684.798 L1558.56 684.798 L1559.12 684.798 L1559.68 684.798 L1560.24 684.798 L1560.8 684.798 L1561.36 684.798 L1561.92 684.798 L1562.48 684.798 L1563.04 684.798 L1563.6 684.798 L1564.16 684.798 L1564.72 684.798 L1565.28 684.798 L1565.83 684.798 L1566.39 684.798 L1566.95 684.798 L1567.51 684.798 L1568.07 684.798 L1568.63 684.798 L1569.19 684.798 L1569.75 684.798 L1570.31 684.798 L1570.87 684.798 L1571.43 684.798 L1571.99 684.798 L1572.55 684.798 L1573.1 684.798 L1573.66 684.798 L1574.22 684.798 L1574.78 684.798 L1575.34 684.798 L1575.9 684.798 L1576.46 684.798 L1577.02 684.798 L1577.58 684.798 L1578.14 684.798 L1578.7 684.798 L1579.26 684.798 L1579.82 684.798 L1580.37 684.798 L1580.93 684.798 L1581.49 684.798 L1582.05 684.798 L1582.61 684.798 L1583.17 684.798 L1583.73 684.798 L1584.29 684.798 L1584.85 684.798 L1585.41 684.798 L1585.97 684.798 L1586.53 684.798 L1587.09 684.798 L1587.65 684.798 L1588.2 684.798 L1588.76 684.798 L1589.32 684.798 L1589.88 684.798 L1590.44 684.798 L1591 684.798 L1591.56 684.798 L1592.12 684.798 L1592.68 684.798 L1593.24 684.798 L1593.8 684.798 L1594.36 684.798 L1594.92 684.798 L1595.47 684.798 L1596.03 684.798 L1596.59 684.798 L1597.15 684.798 L1597.71 684.798 L1598.27 684.798 L1598.83 684.798 L1599.39 684.798 L1599.95 684.798 L1600.51 684.798 L1601.07 684.798 L1601.63 684.798 L1602.19 684.798 L1602.74 684.798 L1603.3 684.798 L1603.86 684.798 L1604.42 684.798 L1604.98 684.798 L1605.54 684.798 L1606.1 684.798 L1606.66 684.798 L1607.22 684.798 L1607.78 684.798 L1608.34 684.798 L1608.9 684.798 L1609.46 684.798 L1610.02 684.798 L1610.57 684.798 L1611.13 684.798 L1611.69 684.798 L1612.25 684.798 L1612.81 684.798 L1613.37 684.798 L1613.93 684.798 L1614.49 684.798 L1615.05 684.798 L1615.61 684.798 L1616.17 684.798 L1616.73 684.798 L1617.29 684.798 L1617.84 684.798 L1618.4 684.798 L1618.96 684.798 L1619.52 684.798 L1620.08 684.798 L1620.64 684.798 L1621.2 684.798 L1621.76 684.798 L1622.32 684.798 L1622.88 684.798 L1623.44 684.798 L1624 684.798 L1624.56 684.798 L1625.11 684.798 L1625.67 684.798 L1626.23 684.798 L1626.79 684.798 L1627.35 684.798 L1627.91 684.798 L1628.47 684.798 L1629.03 684.798 L1629.59 684.798 L1630.15 684.798 L1630.71 684.798 L1631.27 684.798 L1631.83 684.798 L1632.39 684.798 L1632.94 684.798 L1633.5 684.798 L1634.06 684.798 L1634.62 684.798 L1635.18 684.798 L1635.74 684.798 L1636.3 684.798 L1636.86 684.798 L1637.42 684.798 L1637.98 684.798 L1638.54 684.798 L1639.1 684.798 L1639.66 684.798 L1640.21 684.798 L1640.77 684.798 L1641.33 684.798 L1641.89 684.798 L1642.45 684.798 L1643.01 684.798 L1643.57 684.798 L1644.13 684.798 L1644.69 684.798 L1645.25 684.798 L1645.81 684.798 L1646.37 684.798 L1646.93 684.798 L1647.48 684.798 L1648.04 684.798 L1648.6 684.798 L1649.16 684.798 L1649.72 684.798 L1650.28 684.798 L1650.84 684.798 L1651.4 684.798 L1651.96 684.798 L1652.52 684.798 L1653.08 684.798 L1653.64 684.798 L1654.2 684.798 L1654.76 684.798 L1655.31 684.798 L1655.87 684.798 L1656.43 684.798 L1656.99 684.798 L1657.55 684.798 L1658.11 684.798 L1658.67 684.798 L1659.23 684.798 L1659.79 684.798 L1660.35 684.798 L1660.91 684.798 L1661.47 684.798 L1662.03 684.798 L1662.58 684.798 L1663.14 684.798 L1663.7 684.798 L1664.26 684.798 L1664.82 684.798 L1665.38 684.798 L1665.94 684.798 L1666.5 684.798 L1667.06 684.798 L1667.62 684.798 L1668.18 684.798 L1668.74 684.798 L1669.3 684.798 L1669.85 684.798 L1670.41 684.798 L1670.97 684.798 L1671.53 684.798 L1672.09 684.798 L1672.65 684.798 L1673.21 684.798 L1673.77 684.798 L1674.33 684.798 L1674.89 684.798 L1675.45 684.798 L1676.01 684.798 L1676.57 684.798 L1677.13 684.798 L1677.68 684.798 L1678.24 684.798 L1678.8 684.798 L1679.36 684.798 L1679.92 684.798 L1680.48 684.798 L1681.04 684.798 L1681.6 684.798 L1682.16 684.798 L1682.72 684.798 L1683.28 684.798 L1683.84 684.798 L1684.4 684.798 L1684.95 684.798 L1685.51 684.798 L1686.07 684.798 L1686.63 684.798 L1687.19 684.798 L1687.75 684.798 L1688.31 684.798 L1688.87 684.798 L1689.43 684.798 L1689.99 684.798 L1690.55 684.798 L1691.11 684.798 L1691.67 684.798 L1692.23 684.798 L1692.78 684.798 L1693.34 684.798 L1693.9 684.798 L1694.46 684.798 L1695.02 684.798 L1695.58 684.798 L1696.14 684.798 L1696.7 684.798 L1697.26 684.798 L1697.82 684.798 L1698.38 684.798 L1698.94 684.798 L1699.5 684.798 L1700.05 684.798 L1700.61 684.798 L1701.17 684.798 L1701.73 684.798 L1702.29 684.798 L1702.85 684.798 L1703.41 684.798 L1703.97 684.798 L1704.53 684.798 L1705.09 684.798 L1705.65 684.798 L1706.21 684.798 L1706.77 684.798 L1707.32 684.798 L1707.88 684.798 L1708.44 684.798 L1709 684.798 L1709.56 684.798 L1710.12 684.798 L1710.68 684.798 L1711.24 684.798 L1711.8 684.798 L1712.36 684.798 L1712.92 684.798 L1713.48 684.798 L1714.04 684.798 L1714.6 684.798 L1715.15 684.798 L1715.71 684.798 L1716.27 684.798 L1716.83 684.798 L1717.39 684.798 L1717.95 684.798 L1718.51 684.798 L1719.07 684.798 L1719.63 684.798 L1720.19 684.798 L1720.75 684.798 L1721.31 684.798 L1721.87 684.798 L1722.42 684.798 L1722.98 684.798 L1723.54 684.798 L1724.1 684.798 L1724.66 684.798 L1725.22 684.798 L1725.78 684.798 L1726.34 684.798 L1726.9 684.798 L1727.46 684.798 L1728.02 684.798 L1728.58 684.798 L1729.14 684.798 L1729.69 684.798 L1730.25 684.798 L1730.81 684.798 L1731.37 684.798 L1731.93 684.798 L1732.49 684.798 L1733.05 684.798 L1733.61 684.798 L1734.17 684.798 L1734.73 684.798 L1735.29 684.798 L1735.85 684.798 L1736.41 684.798 L1736.97 684.798 L1737.52 684.798 L1738.08 684.798 L1738.64 684.798 L1739.2 684.798 L1739.76 684.798 L1740.32 684.798 L1740.88 684.798 L1741.44 684.798 L1742 684.798 L1742.56 684.798 L1743.12 684.798 L1743.68 684.798 L1744.24 684.798 L1744.79 684.798 L1745.35 684.798 L1745.91 684.798 L1746.47 684.798 L1747.03 684.798 L1747.59 684.798 L1748.15 684.798 L1748.71 684.798 L1749.27 684.798 L1749.83 684.798 L1750.39 684.798 L1750.95 684.798 L1751.51 684.798 L1752.06 684.798 L1752.62 684.798 L1753.18 684.798 L1753.74 684.798 L1754.3 684.798 L1754.86 684.798 L1755.42 684.798 L1755.98 684.798 L1756.54 684.798 L1757.1 684.798 L1757.66 684.798 L1758.22 684.798 L1758.78 684.798 L1759.34 684.798 L1759.89 684.798 L1760.45 684.798 L1761.01 684.798 L1761.57 684.798 L1762.13 684.798 L1762.69 684.798 L1763.25 684.798 L1763.81 684.798 L1764.37 684.798 L1764.93 684.798 L1765.49 684.798 L1766.05 684.798 L1766.61 684.798 L1767.16 684.798 L1767.72 684.798 L1768.28 684.798 L1768.84 684.798 L1769.4 684.798 L1769.96 684.798 L1770.52 684.798 L1771.08 684.798 L1771.64 684.798 L1772.2 684.798 L1772.76 684.798 L1773.32 684.798 L1773.88 684.798 L1774.43 684.798 L1774.99 684.798 L1775.55 684.798 L1776.11 684.798 L1776.67 684.798 L1777.23 684.798 L1777.79 684.798 L1778.35 684.798 L1778.91 684.798 L1779.47 684.798 L1780.03 684.798 L1780.59 684.798 L1781.15 684.798 L1781.71 684.798 L1782.26 684.798 L1782.82 684.798 L1783.38 684.798 L1783.94 684.798 L1784.5 684.798 L1785.06 684.798 L1785.62 684.798 L1786.18 684.798 L1786.74 684.798 L1787.3 684.798 L1787.86 684.798 L1788.42 684.798 L1788.98 684.798 L1789.53 684.798 L1790.09 684.798 L1790.65 684.798 L1791.21 684.798 L1791.77 684.798 L1792.33 684.798 L1792.89 684.798 L1793.45 684.798 L1794.01 684.798 L1794.57 684.798 L1795.13 684.798 L1795.69 684.798 L1796.25 684.798 L1796.8 684.798 L1797.36 684.798 L1797.92 684.798 L1798.48 684.798 L1799.04 684.798 L1799.6 684.798 L1800.16 684.798 L1800.72 684.798 L1801.28 684.798 L1801.84 684.798 L1802.4 684.798 L1802.96 684.798 L1803.52 684.798 L1804.08 684.798 L1804.63 684.798 L1805.19 684.798 L1805.75 684.798 L1806.31 684.798 L1806.87 684.798 L1807.43 684.798 L1807.99 684.798 L1808.55 684.798 L1809.11 684.798 L1809.67 684.798 L1810.23 684.798 L1810.79 684.798 L1811.35 684.798 L1811.9 684.798 L1812.46 684.798 L1813.02 684.798 L1813.58 684.798 L1814.14 684.798 L1814.7 684.798 L1815.26 684.798 L1815.82 684.798 L1816.38 684.798 L1816.94 684.798 L1817.5 684.798 L1818.06 684.798 L1818.62 684.798 L1819.18 684.798 L1819.73 684.798 L1820.29 684.798 L1820.85 684.798 L1821.41 684.798 L1821.97 684.798 L1822.53 684.798 L1823.09 684.798 L1823.65 684.798 L1824.21 684.798 L1824.77 684.798 L1825.33 684.798 L1825.89 684.798 L1826.45 684.798 L1827 684.798 L1827.56 684.798 L1828.12 684.798 L1828.68 684.798 L1829.24 684.798 L1829.8 684.798 L1830.36 684.798 L1830.92 684.798 L1831.48 684.798 L1832.04 684.798 L1832.6 684.798 L1833.16 684.798 L1833.72 684.798 L1834.27 684.798 L1834.83 684.798 L1835.39 684.798 L1835.95 684.798 L1836.51 684.798 L1837.07 684.798 L1837.63 684.798 L1838.19 684.798 L1838.19 683.077 L1837.63 683.077 L1837.07 683.077 L1836.51 683.077 L1835.95 683.077 L1835.39 683.077 L1834.83 683.077 L1834.27 683.077 L1833.72 683.077 L1833.16 683.077 L1832.6 683.077 L1832.04 683.077 L1831.48 683.077 L1830.92 683.077 L1830.36 683.077 L1829.8 683.077 L1829.24 683.077 L1828.68 683.077 L1828.12 683.077 L1827.56 683.077 L1827 683.077 L1826.45 683.077 L1825.89 683.077 L1825.33 683.077 L1824.77 683.077 L1824.21 683.077 L1823.65 683.077 L1823.09 683.077 L1822.53 683.077 L1821.97 683.077 L1821.41 683.077 L1820.85 683.077 L1820.29 683.077 L1819.73 683.077 L1819.18 683.077 L1818.62 683.077 L1818.06 683.077 L1817.5 683.077 L1816.94 683.077 L1816.38 683.077 L1815.82 683.077 L1815.26 683.077 L1814.7 683.077 L1814.14 683.077 L1813.58 683.077 L1813.02 683.077 L1812.46 683.077 L1811.9 683.077 L1811.35 683.077 L1810.79 683.077 L1810.23 683.077 L1809.67 683.077 L1809.11 683.077 L1808.55 683.077 L1807.99 683.077 L1807.43 683.077 L1806.87 683.077 L1806.31 683.077 L1805.75 683.077 L1805.19 683.077 L1804.63 683.077 L1804.08 683.077 L1803.52 683.077 L1802.96 683.077 L1802.4 683.077 L1801.84 683.077 L1801.28 683.077 L1800.72 683.077 L1800.16 683.077 L1799.6 683.077 L1799.04 683.077 L1798.48 683.077 L1797.92 683.077 L1797.36 683.077 L1796.8 683.077 L1796.25 683.077 L1795.69 683.077 L1795.13 683.077 L1794.57 683.077 L1794.01 683.077 L1793.45 683.077 L1792.89 683.077 L1792.33 683.077 L1791.77 683.077 L1791.21 683.077 L1790.65 683.077 L1790.09 683.077 L1789.53 683.077 L1788.98 683.077 L1788.42 683.077 L1787.86 683.077 L1787.3 683.077 L1786.74 683.077 L1786.18 683.077 L1785.62 683.077 L1785.06 683.077 L1784.5 683.077 L1783.94 683.077 L1783.38 683.077 L1782.82 683.077 L1782.26 683.077 L1781.71 683.077 L1781.15 683.077 L1780.59 683.077 L1780.03 683.077 L1779.47 683.077 L1778.91 683.077 L1778.35 683.077 L1777.79 683.077 L1777.23 683.077 L1776.67 683.077 L1776.11 683.077 L1775.55 683.077 L1774.99 683.077 L1774.43 683.077 L1773.88 683.077 L1773.32 683.077 L1772.76 683.077 L1772.2 683.077 L1771.64 683.077 L1771.08 683.077 L1770.52 683.077 L1769.96 683.077 L1769.4 683.077 L1768.84 683.077 L1768.28 683.077 L1767.72 683.077 L1767.16 683.077 L1766.61 683.077 L1766.05 683.077 L1765.49 683.077 L1764.93 683.077 L1764.37 683.077 L1763.81 683.077 L1763.25 683.077 L1762.69 683.077 L1762.13 683.077 L1761.57 683.077 L1761.01 683.077 L1760.45 683.077 L1759.89 683.077 L1759.34 683.077 L1758.78 683.077 L1758.22 683.077 L1757.66 683.077 L1757.1 683.077 L1756.54 683.077 L1755.98 683.077 L1755.42 683.077 L1754.86 683.077 L1754.3 683.077 L1753.74 683.077 L1753.18 683.077 L1752.62 683.077 L1752.06 683.077 L1751.51 683.077 L1750.95 683.077 L1750.39 683.077 L1749.83 683.077 L1749.27 683.077 L1748.71 683.077 L1748.15 683.077 L1747.59 683.077 L1747.03 683.077 L1746.47 683.077 L1745.91 683.077 L1745.35 683.077 L1744.79 683.077 L1744.24 683.077 L1743.68 683.077 L1743.12 683.077 L1742.56 683.077 L1742 683.077 L1741.44 683.077 L1740.88 683.077 L1740.32 683.077 L1739.76 683.077 L1739.2 683.077 L1738.64 683.077 L1738.08 683.077 L1737.52 683.077 L1736.97 683.077 L1736.41 683.077 L1735.85 683.077 L1735.29 683.077 L1734.73 683.077 L1734.17 683.077 L1733.61 683.077 L1733.05 683.077 L1732.49 683.077 L1731.93 683.077 L1731.37 683.077 L1730.81 683.077 L1730.25 683.077 L1729.69 683.077 L1729.14 683.077 L1728.58 683.077 L1728.02 683.077 L1727.46 683.077 L1726.9 683.077 L1726.34 683.077 L1725.78 683.077 L1725.22 683.077 L1724.66 683.077 L1724.1 683.077 L1723.54 683.077 L1722.98 683.077 L1722.42 683.077 L1721.87 683.077 L1721.31 683.077 L1720.75 683.077 L1720.19 683.077 L1719.63 683.077 L1719.07 683.077 L1718.51 683.077 L1717.95 683.077 L1717.39 683.077 L1716.83 683.077 L1716.27 683.077 L1715.71 683.077 L1715.15 683.077 L1714.6 683.077 L1714.04 683.077 L1713.48 683.077 L1712.92 683.077 L1712.36 683.077 L1711.8 683.077 L1711.24 683.077 L1710.68 683.077 L1710.12 683.077 L1709.56 683.077 L1709 683.077 L1708.44 683.077 L1707.88 683.077 L1707.32 683.077 L1706.77 683.077 L1706.21 683.077 L1705.65 683.077 L1705.09 683.077 L1704.53 683.077 L1703.97 683.077 L1703.41 683.077 L1702.85 683.077 L1702.29 683.077 L1701.73 683.077 L1701.17 683.077 L1700.61 683.077 L1700.05 683.077 L1699.5 683.077 L1698.94 683.077 L1698.38 683.077 L1697.82 683.077 L1697.26 683.077 L1696.7 683.077 L1696.14 683.077 L1695.58 683.077 L1695.02 683.077 L1694.46 683.077 L1693.9 683.077 L1693.34 683.077 L1692.78 683.077 L1692.23 683.077 L1691.67 683.077 L1691.11 683.077 L1690.55 683.077 L1689.99 683.077 L1689.43 683.077 L1688.87 683.077 L1688.31 683.077 L1687.75 683.077 L1687.19 683.077 L1686.63 683.077 L1686.07 683.077 L1685.51 683.077 L1684.95 683.077 L1684.4 683.077 L1683.84 683.077 L1683.28 683.077 L1682.72 683.077 L1682.16 683.077 L1681.6 683.077 L1681.04 683.077 L1680.48 683.077 L1679.92 683.077 L1679.36 683.077 L1678.8 683.077 L1678.24 683.077 L1677.68 683.077 L1677.13 683.077 L1676.57 683.077 L1676.01 683.077 L1675.45 683.077 L1674.89 683.077 L1674.33 683.077 L1673.77 683.077 L1673.21 683.077 L1672.65 683.077 L1672.09 683.077 L1671.53 683.077 L1670.97 683.077 L1670.41 683.077 L1669.85 683.077 L1669.3 683.077 L1668.74 683.077 L1668.18 683.077 L1667.62 683.077 L1667.06 683.077 L1666.5 683.077 L1665.94 683.077 L1665.38 683.077 L1664.82 683.077 L1664.26 683.077 L1663.7 683.077 L1663.14 683.077 L1662.58 683.077 L1662.03 683.077 L1661.47 683.077 L1660.91 683.077 L1660.35 683.077 L1659.79 683.077 L1659.23 683.077 L1658.67 683.077 L1658.11 683.077 L1657.55 683.077 L1656.99 683.077 L1656.43 683.077 L1655.87 683.077 L1655.31 683.077 L1654.76 683.077 L1654.2 683.077 L1653.64 683.077 L1653.08 683.077 L1652.52 683.077 L1651.96 683.077 L1651.4 683.077 L1650.84 683.077 L1650.28 683.077 L1649.72 683.077 L1649.16 683.077 L1648.6 683.077 L1648.04 683.077 L1647.48 683.077 L1646.93 683.077 L1646.37 683.077 L1645.81 683.077 L1645.25 683.077 L1644.69 683.077 L1644.13 683.077 L1643.57 683.077 L1643.01 683.077 L1642.45 683.077 L1641.89 683.077 L1641.33 683.077 L1640.77 683.077 L1640.21 683.077 L1639.66 683.077 L1639.1 683.077 L1638.54 683.077 L1637.98 683.077 L1637.42 683.077 L1636.86 683.077 L1636.3 683.077 L1635.74 683.077 L1635.18 683.077 L1634.62 683.077 L1634.06 683.077 L1633.5 683.077 L1632.94 683.077 L1632.39 683.077 L1631.83 683.077 L1631.27 683.077 L1630.71 683.077 L1630.15 683.077 L1629.59 683.077 L1629.03 683.077 L1628.47 683.077 L1627.91 683.077 L1627.35 683.077 L1626.79 683.077 L1626.23 683.077 L1625.67 683.077 L1625.11 683.077 L1624.56 683.077 L1624 683.077 L1623.44 683.077 L1622.88 683.077 L1622.32 683.077 L1621.76 683.077 L1621.2 683.077 L1620.64 683.077 L1620.08 683.077 L1619.52 683.077 L1618.96 683.077 L1618.4 683.077 L1617.84 683.077 L1617.29 683.077 L1616.73 683.077 L1616.17 683.077 L1615.61 683.077 L1615.05 683.077 L1614.49 683.077 L1613.93 683.077 L1613.37 683.077 L1612.81 683.077 L1612.25 683.077 L1611.69 683.077 L1611.13 683.077 L1610.57 683.077 L1610.02 683.077 L1609.46 683.077 L1608.9 683.077 L1608.34 683.077 L1607.78 683.077 L1607.22 683.077 L1606.66 683.077 L1606.1 683.077 L1605.54 683.077 L1604.98 683.077 L1604.42 683.077 L1603.86 683.077 L1603.3 683.077 L1602.74 683.077 L1602.19 683.077 L1601.63 683.077 L1601.07 683.077 L1600.51 683.077 L1599.95 683.077 L1599.39 683.077 L1598.83 683.077 L1598.27 683.077 L1597.71 683.077 L1597.15 683.077 L1596.59 683.077 L1596.03 683.077 L1595.47 683.077 L1594.92 683.077 L1594.36 683.077 L1593.8 683.077 L1593.24 683.077 L1592.68 683.077 L1592.12 683.077 L1591.56 683.077 L1591 683.077 L1590.44 683.077 L1589.88 683.077 L1589.32 683.077 L1588.76 683.077 L1588.2 683.077 L1587.65 683.077 L1587.09 683.077 L1586.53 683.077 L1585.97 683.077 L1585.41 683.077 L1584.85 683.077 L1584.29 683.077 L1583.73 683.077 L1583.17 683.077 L1582.61 683.077 L1582.05 683.077 L1581.49 683.077 L1580.93 683.077 L1580.37 683.077 L1579.82 683.077 L1579.26 683.077 L1578.7 683.077 L1578.14 683.077 L1577.58 683.077 L1577.02 683.077 L1576.46 683.077 L1575.9 683.077 L1575.34 683.077 L1574.78 683.077 L1574.22 683.077 L1573.66 683.077 L1573.1 683.077 L1572.55 683.077 L1571.99 683.077 L1571.43 683.077 L1570.87 683.077 L1570.31 683.077 L1569.75 683.077 L1569.19 683.077 L1568.63 683.077 L1568.07 683.077 L1567.51 683.077 L1566.95 683.077 L1566.39 683.077 L1565.83 683.077 L1565.28 683.077 L1564.72 683.077 L1564.16 683.077 L1563.6 683.077 L1563.04 683.077 L1562.48 683.077 L1561.92 683.077 L1561.36 683.077 L1560.8 683.077 L1560.24 683.077 L1559.68 683.077 L1559.12 683.077 L1558.56 683.077 L1558 683.077 L1557.45 683.077 L1556.89 683.077 L1556.33 683.077 L1555.77 683.077 L1555.21 683.077 L1554.65 683.077 L1554.09 683.077 L1553.53 683.077 L1552.97 683.077 L1552.41 683.077 L1551.85 683.077 L1551.29 683.077 L1550.73 683.077 L1550.18 683.077 L1549.62 683.077 L1549.06 683.077 L1548.5 683.077 L1547.94 683.077 L1547.38 683.077 L1546.82 683.077 L1546.26 683.077 L1545.7 683.077 L1545.14 683.077 L1544.58 683.077 L1544.02 683.077 L1543.46 683.077 L1542.9 683.077 L1542.35 683.077 L1541.79 683.077 L1541.23 683.077 L1540.67 683.077 L1540.11 683.077 L1539.55 683.077 L1538.99 683.077 L1538.43 683.077 L1537.87 683.077 L1537.31 683.077 L1536.75 683.077 L1536.19 683.077 L1535.63 683.077 L1535.08 683.077 L1534.52 683.077 L1533.96 683.077 L1533.4 683.077 L1532.84 683.077 L1532.28 683.077 L1531.72 683.077 L1531.16 683.077 L1530.6 683.077 L1530.04 683.077 L1529.48 683.077 L1528.92 683.077 L1528.36 683.077 L1527.81 683.077 L1527.25 683.077 L1526.69 683.077 L1526.13 683.077 L1525.57 683.077 L1525.01 683.077 L1524.45 683.077 L1523.89 683.077 L1523.33 683.077 L1522.77 683.077 L1522.21 683.077 L1521.65 683.077 L1521.09 683.077 L1520.53 683.077 L1519.98 683.077 L1519.42 683.077 L1518.86 683.077 L1518.3 683.077 L1517.74 683.077 L1517.18 683.077 L1516.62 683.077 L1516.06 683.077 L1515.5 683.077 L1514.94 683.077 L1514.38 683.077 L1513.82 683.077 L1513.26 683.077 L1512.71 683.077 L1512.15 683.077 L1511.59 683.077 L1511.03 683.077 L1510.47 683.077 L1509.91 683.077 L1509.35 683.077 L1508.79 683.077 L1508.23 683.077 L1507.67 683.077 L1507.11 683.077 L1506.55 683.077 L1505.99 683.077 L1505.44 683.077 L1504.88 683.077 L1504.32 683.077 L1503.76 683.077 L1503.2 683.077 L1502.64 683.077 L1502.08 683.077 L1501.52 683.077 L1500.96 683.077 L1500.4 683.077 L1499.84 683.077 L1499.28 683.077 L1498.72 683.077 L1498.16 683.077 L1497.61 683.077 L1497.05 683.077 L1496.49 683.077 L1495.93 683.077 L1495.37 683.077 L1494.81 683.077 L1494.25 683.077 L1493.69 683.077 L1493.13 683.077 L1492.57 683.077 L1492.01 683.077 L1491.45 683.077 L1490.89 683.077 L1490.34 683.077 L1489.78 683.077 L1489.22 683.077 L1488.66 683.077 L1488.1 683.077 L1487.54 683.077 L1486.98 683.077 L1486.42 683.077 L1485.86 683.077 L1485.3 683.077 L1484.74 683.077 L1484.18 683.077 L1483.62 683.077 L1483.07 683.077 L1482.51 683.077 L1481.95 683.077 L1481.39 683.077 L1480.83 683.077 L1480.27 683.077 L1479.71 683.077 L1479.15 683.077 L1478.59 683.077 L1478.03 683.077 L1477.47 683.077 L1476.91 683.077 L1476.35 683.077 L1475.79 683.077 L1475.24 683.077 L1474.68 683.077 L1474.12 683.077 L1473.56 683.077 L1473 683.077 L1472.44 683.077 L1471.88 683.077 L1471.32 683.077 L1470.76 683.077 L1470.2 683.077 L1469.64 683.077 L1469.08 683.077 L1468.52 683.077 L1467.97 683.077 L1467.41 683.077 L1466.85 683.077 L1466.29 683.077 L1465.73 683.077 L1465.17 683.077 L1464.61 683.077 L1464.05 683.077 L1463.49 683.077 L1462.93 683.077 L1462.37 683.077 L1461.81 683.077 L1461.25 683.077 L1460.7 683.077 L1460.14 683.077 L1459.58 683.077 L1459.02 683.077 L1458.46 683.077 L1457.9 683.077 L1457.34 683.077 L1456.78 683.077 L1456.22 683.077 L1455.66 683.077 L1455.1 683.077 L1454.54 683.077 L1453.98 683.077 L1453.42 683.077 L1452.87 683.077 L1452.31 683.077 L1451.75 683.077 L1451.19 683.077 L1450.63 683.077 L1450.07 683.077 L1449.51 683.077 L1448.95 683.077 L1448.39 683.077 L1447.83 683.077 L1447.27 683.077 L1446.71 683.077 L1446.15 683.077 L1445.6 683.077 L1445.04 683.077 L1444.48 683.077 L1443.92 683.077 L1443.36 683.077 L1442.8 683.077 L1442.24 683.077 L1441.68 683.077 L1441.12 683.077 L1440.56 683.077 L1440 683.077 L1439.44 683.077 L1438.88 683.077 L1438.33 683.077 L1437.77 683.077 L1437.21 683.077 L1436.65 683.077 L1436.09 683.077 L1435.53 683.077 L1434.97 683.077 L1434.41 683.077 L1433.85 683.077 L1433.29 683.077 L1432.73 683.077 L1432.17 683.077 L1431.61 683.077 L1431.05 683.077 L1430.5 683.077 L1429.94 683.077 L1429.38 683.077 L1428.82 683.077 L1428.26 683.077 L1427.7 683.077 L1427.14 683.077 L1426.58 683.077 L1426.02 683.077 L1425.46 683.077 L1424.9 683.077 L1424.34 683.077 L1423.78 683.077 L1423.23 683.077 L1422.67 683.077 L1422.11 683.077 L1421.55 683.077 L1420.99 683.077 L1420.43 683.077 L1419.87 683.077 L1419.31 683.077 L1418.75 683.077 L1418.19 683.077 L1417.63 683.077 L1417.07 683.077 L1416.51 683.077 L1415.95 683.077 L1415.4 683.077 L1414.84 683.077 L1414.28 683.077 L1413.72 683.077 L1413.16 683.077 L1412.6 683.077 L1412.04 683.077 L1411.48 683.077 L1410.92 683.077 L1410.36 683.077 L1409.8 683.077 L1409.24 683.077 L1408.68 683.077 L1408.13 683.077 L1407.57 683.077 L1407.01 683.077 L1406.45 683.077 L1405.89 683.077 L1405.33 683.077 L1404.77 683.077 L1404.21 683.077 L1403.65 683.077 L1403.09 683.077 L1402.53 683.077 L1401.97 683.077 L1401.41 683.077 L1400.86 683.077 L1400.3 683.077 L1399.74 683.077 L1399.18 683.077 L1398.62 683.077 L1398.06 683.077 L1397.5 683.077 L1396.94 683.077 L1396.38 683.077 L1395.82 683.077 L1395.26 683.077 L1394.7 683.077 L1394.14 683.077 L1393.58 683.077 L1393.03 683.077 L1392.47 683.077 L1391.91 683.077 L1391.35 683.077 L1390.79 683.077 L1390.23 683.077 L1389.67 683.077 L1389.11 683.077 L1388.55 683.077 L1387.99 683.077 L1387.43 683.077 L1386.87 683.077 L1386.31 683.077 L1385.76 683.077 L1385.2 683.077 L1384.64 683.077 L1384.08 683.077 L1383.52 683.077 L1382.96 683.077 L1382.4 683.077 L1381.84 683.077 L1381.28 683.077 L1380.72 683.077 L1380.16 683.077 L1379.6 683.077 L1379.04 683.077 L1378.49 683.077 L1377.93 683.077 L1377.37 683.077 L1376.81 683.077 L1376.25 683.077 L1375.69 683.077 L1375.13 683.077 L1374.57 683.077 L1374.01 683.077 L1373.45 683.077 L1372.89 683.077 L1372.33 683.077 L1371.77 683.077 L1371.21 683.077 L1370.66 683.077 L1370.1 683.077 L1369.54 683.077 L1368.98 683.077 L1368.42 683.077 L1367.86 683.077 L1367.3 683.077 L1366.74 683.077 L1366.18 683.077 L1365.62 683.077 L1365.06 683.077 L1364.5 683.077 L1363.94 683.077 L1363.39 683.077 L1362.83 683.077 L1362.27 683.077 L1361.71 683.077 L1361.15 683.077 L1360.59 683.077 L1360.03 683.077 L1359.47 683.077 L1358.91 683.077 L1358.35 683.077 L1357.79 683.077 L1357.23 683.077 L1356.67 683.077 L1356.12 683.077 L1355.56 683.077 L1355 683.077 L1354.44 683.077 L1353.88 683.077 L1353.32 683.077 L1352.76 683.077 L1352.2 683.077 L1351.64 683.077 L1351.08 683.077 L1350.52 683.077 L1349.96 683.077 L1349.4 683.077 L1348.84 683.077 L1348.29 683.077 L1347.73 683.077 L1347.17 683.077 L1346.61 683.077 L1346.05 683.077 L1345.49 683.077 L1344.93 683.077 L1344.37 683.077 L1343.81 683.077 L1343.25 683.077 L1342.69 683.077 L1342.13 683.077 L1341.57 683.077 L1341.02 683.077 L1340.46 683.077 L1339.9 683.077 L1339.34 683.077 L1338.78 683.077 L1338.22 683.077 L1337.66 683.077 L1337.1 683.077 L1336.54 683.077 L1335.98 683.077 L1335.42 683.077 L1334.86 683.077 L1334.3 683.077 L1333.75 683.077 L1333.19 683.077 L1332.63 683.077 L1332.07 683.077 L1331.51 683.077 L1330.95 683.077 L1330.39 683.077 L1329.83 683.077 L1329.27 683.077 L1328.71 683.077 L1328.15 683.077 L1327.59 683.077 L1327.03 683.077 L1326.47 683.077 L1325.92 683.077 L1325.36 683.077 L1324.8 683.077 L1324.24 683.077 L1323.68 683.077 L1323.12 683.077 L1322.56 683.077 L1322 683.077 L1321.44 683.077 L1320.88 683.077 L1320.32 683.077 L1319.76 683.077 L1319.2 683.077 L1318.65 683.077 L1318.09 683.077 L1317.53 683.077 L1316.97 683.077 L1316.41 683.077 L1315.85 683.077 L1315.29 683.077 L1314.73 683.077 L1314.17 683.077 L1313.61 683.077 L1313.05 683.077 L1312.49 683.077 L1311.93 683.077 L1311.38 683.077 L1310.82 683.077 L1310.26 683.077 L1309.7 683.077 L1309.14 683.077 L1308.58 683.077 L1308.02 683.077 L1307.46 683.077 L1306.9 683.077 L1306.34 683.077 L1305.78 683.077 L1305.22 683.077 L1304.66 683.077 L1304.1 683.077 L1303.55 683.077 L1302.99 683.077 L1302.43 683.077 L1301.87 683.077 L1301.31 683.077 L1300.75 683.077 L1300.19 683.077 L1299.63 683.077 L1299.07 683.077 L1298.51 683.077 L1297.95 683.077 L1297.39 683.077 L1296.83 683.077 L1296.28 683.077 L1295.72 683.077 L1295.16 683.077 L1294.6 683.077 L1294.04 683.077 L1293.48 683.077 L1292.92 683.077 L1292.36 683.077 L1291.8 683.077 L1291.24 683.077 L1290.68 683.077 L1290.12 683.077 L1289.56 683.077 L1289 683.077 L1288.45 683.077 L1287.89 683.077 L1287.33 683.077 L1286.77 683.077 L1286.21 683.077 L1285.65 683.077 L1285.09 683.077 L1284.53 683.077 L1283.97 683.077 L1283.41 683.077 L1282.85 683.077 L1282.29 683.077 L1281.73 683.077 L1281.18 683.077 L1280.62 683.077 L1280.06 683.077 L1279.5 683.077 L1278.94 683.077 L1278.38 683.077 L1277.82 683.077 L1277.26 683.077 L1276.7 683.077 L1276.14 683.077 L1275.58 683.077 L1275.02 683.077 L1274.46 683.077 L1273.91 683.077 L1273.35 683.077 L1272.79 683.077 L1272.23 683.077 L1271.67 683.077 L1271.11 683.077 L1270.55 683.077 L1269.99 683.077 L1269.43 683.077 L1268.87 683.077 L1268.31 683.077 L1267.75 683.077 L1267.19 683.077 L1266.63 683.077 L1266.08 683.077 L1265.52 683.077 L1264.96 683.077 L1264.4 683.077 L1263.84 683.077 L1263.28 683.077 L1262.72 683.077 L1262.16 683.077 L1261.6 683.077 L1261.04 683.077 L1260.48 683.077 L1259.92 683.077 L1259.36 683.077 L1258.81 683.077 L1258.25 683.077 L1257.69 683.077 L1257.13 683.077 L1256.57 683.077 L1256.01 683.077 L1255.45 683.077 L1254.89 683.077 L1254.33 683.077 L1253.77 683.077 L1253.21 683.077 L1252.65 683.077 L1252.09 683.077 L1251.54 683.077 L1250.98 683.077 L1250.42 683.077 L1249.86 683.077 L1249.3 683.077 L1248.74 683.077 L1248.18 683.077 L1247.62 683.077 L1247.06 683.077 L1246.5 683.077 L1245.94 683.077 L1245.38 683.077 L1244.82 683.077 L1244.26 683.077 L1243.71 683.077 L1243.15 683.077 L1242.59 683.077 L1242.03 683.077 L1241.47 683.077 L1240.91 683.077 L1240.35 683.077 L1239.79 683.077 L1239.23 683.077 L1238.67 683.077 L1238.11 683.077 L1237.55 683.077 L1236.99 683.077 L1236.44 683.077 L1235.88 683.077 L1235.32 683.077 L1234.76 683.077 L1234.2 683.077 L1233.64 683.077 L1233.08 683.077 L1232.52 683.077 L1231.96 683.077 L1231.4 683.077 L1230.84 683.077 L1230.28 683.077 L1229.72 683.077 L1229.17 683.077 L1228.61 683.077 L1228.05 683.077 L1227.49 683.077 L1226.93 683.077 L1226.37 683.077 L1225.81 683.077 L1225.25 683.077 L1224.69 683.077 L1224.13 683.077 L1223.57 683.077 L1223.01 683.077 L1222.45 683.077 L1221.89 683.077 L1221.34 683.077 L1220.78 683.077 L1220.22 683.077 L1219.66 683.077 L1219.1 683.077 L1218.54 683.077 L1217.98 683.077 L1217.42 683.077 L1216.86 683.077 L1216.3 683.077 L1215.74 683.077 L1215.18 683.077 L1214.62 683.077 L1214.07 683.077 L1213.51 683.077 L1212.95 683.077 L1212.39 683.077 L1211.83 683.077 L1211.27 683.077 L1210.71 683.077 L1210.15 683.077 L1209.59 683.077 L1209.03 683.077 L1208.47 683.077 L1207.91 683.077 L1207.35 683.077 L1206.8 683.077 L1206.24 683.077 L1205.68 683.077 L1205.12 683.077 L1204.56 683.077 L1204 683.077 L1203.44 683.077 L1202.88 683.077 L1202.32 683.077 L1201.76 683.077 L1201.2 683.077 L1200.64 683.077 L1200.08 683.077 L1199.52 683.077 L1198.97 683.077 L1198.41 683.077 L1197.85 683.077 L1197.29 683.077 L1196.73 683.077 L1196.17 683.077 L1195.61 683.077 L1195.05 683.077 L1194.49 683.077 L1193.93 683.077 L1193.37 683.077 L1192.81 683.077 L1192.25 683.077 L1191.7 683.077 L1191.14 683.077 L1190.58 683.077 L1190.02 683.077 L1189.46 683.077 L1188.9 683.077 L1188.34 683.077 L1187.78 683.077 L1187.22 683.077 L1186.66 683.077 L1186.1 683.077 L1185.54 683.077 L1184.98 683.077 L1184.43 683.077 L1183.87 683.077 L1183.31 683.077 L1182.75 683.077 L1182.19 683.077 L1181.63 683.077 L1181.07 683.077 L1180.51 683.077 L1179.95 683.077 L1179.39 683.077 L1178.83 683.077 L1178.27 683.077 L1177.71 683.077 L1177.15 683.077 L1176.6 683.077 L1176.04 683.077 L1175.48 683.077 L1174.92 683.077 L1174.36 683.077 L1173.8 683.077 L1173.24 683.077 L1172.68 683.077 L1172.12 683.077 L1171.56 683.077 L1171 683.077 L1170.44 683.077 L1169.88 683.077 L1169.33 683.077 L1168.77 683.077 L1168.21 683.077 L1167.65 683.077 L1167.09 683.077 L1166.53 683.077 L1165.97 683.077 L1165.41 683.077 L1164.85 683.077 L1164.29 683.077 L1163.73 683.077 L1163.17 683.077 L1162.61 683.077 L1162.05 683.077 L1161.5 683.077 L1160.94 683.077 L1160.38 683.077 L1159.82 683.077 L1159.26 683.077 L1158.7 683.077 L1158.14 683.077 L1157.58 683.077 L1157.02 683.077 L1156.46 683.077 L1155.9 683.077 L1155.34 683.077 L1154.78 683.077 L1154.23 683.077 L1153.67 683.077 L1153.11 683.077 L1152.55 683.077 L1151.99 683.077 L1151.43 683.077 L1150.87 683.077 L1150.31 683.077 L1149.75 683.077 L1149.19 683.077 L1148.63 683.077 L1148.07 683.077 L1147.51 683.077 L1146.96 683.077 L1146.4 683.077 L1145.84 683.077 L1145.28 683.077 L1144.72 683.077 L1144.16 683.077 L1143.6 683.077 L1143.04 683.077 L1142.48 683.077 L1141.92 683.077 L1141.36 683.077 L1140.8 683.077 L1140.24 683.077 L1139.68 683.077 L1139.13 683.077 L1138.57 683.077 L1138.01 683.077 L1137.45 683.077 L1136.89 683.077 L1136.33 683.077 L1135.77 683.077 L1135.21 683.077 L1134.65 683.077 L1134.09 683.077 L1133.53 683.077 L1132.97 683.077 L1132.41 683.077 L1131.86 683.077 L1131.3 683.077 L1130.74 683.077 L1130.18 683.077 L1129.62 683.077 L1129.06 683.077 L1128.5 683.077 L1127.94 683.077 L1127.38 683.077 L1126.82 683.077 L1126.26 683.077 L1125.7 683.077 L1125.14 683.077 L1124.59 683.077 L1124.03 683.077 L1123.47 683.077 L1122.91 683.077 L1122.35 683.077 L1121.79 683.077 L1121.23 683.077 L1120.67 683.077 L1120.11 683.077 L1119.55 683.077 L1118.99 683.077 L1118.43 683.077 L1117.87 683.077 L1117.31 683.077 L1116.76 683.077 L1116.2 683.077 L1115.64 683.077 L1115.08 683.077 L1114.52 683.077 L1113.96 683.077 L1113.4 683.077 L1112.84 683.077 L1112.28 683.077 L1111.72 683.077 L1111.16 683.077 L1110.6 683.077 L1110.04 683.077 L1109.49 683.077 L1108.93 683.077 L1108.37 683.077 L1107.81 683.077 L1107.25 683.077 L1106.69 683.077 L1106.13 683.077 L1105.57 683.077 L1105.01 683.077 L1104.45 683.077 L1103.89 683.077 L1103.33 683.077 L1102.77 683.077 L1102.22 683.077 L1101.66 683.077 L1101.1 683.077 L1100.54 683.077 L1099.98 683.077 L1099.42 683.077 L1098.86 683.077 L1098.3 683.077 L1097.74 683.077 L1097.18 683.077 L1096.62 683.077 L1096.06 683.077 L1095.5 683.077 L1094.94 683.077 L1094.39 683.077 L1093.83 683.077 L1093.27 683.077 L1092.71 683.077 L1092.15 683.077 L1091.59 683.077 L1091.03 683.077 L1090.47 683.077 L1089.91 683.077 L1089.35 683.077 L1088.79 683.077 L1088.23 683.077 L1087.67 683.077 L1087.12 683.077 L1086.56 683.077 L1086 683.077 L1085.44 683.077 L1084.88 683.077 L1084.32 683.077 L1083.76 683.077 L1083.2 683.077 L1082.64 683.077 L1082.08 683.077 L1081.52 683.077 L1080.96 683.077 L1080.4 683.077 L1079.85 683.077 L1079.29 683.077 L1078.73 683.077 L1078.17 683.077 L1077.61 683.077 L1077.05 683.077 L1076.49 683.077 L1075.93 683.077 L1075.37 683.077 L1074.81 683.077 L1074.25 683.077 L1073.69 683.077 L1073.13 683.077 L1072.57 683.077 L1072.02 683.077 L1071.46 683.077 L1070.9 683.077 L1070.34 683.077 L1069.78 683.077 L1069.22 683.077 L1068.66 683.077 L1068.1 683.077 L1067.54 683.077 L1066.98 683.077 L1066.42 683.077 L1065.86 683.077 L1065.3 683.077 L1064.75 683.077 L1064.19 683.077 L1063.63 683.077 L1063.07 683.077 L1062.51 683.077 L1061.95 683.077 L1061.39 683.077 L1060.83 683.077 L1060.27 683.077 L1059.71 683.077 L1059.15 683.077 L1058.59 683.077 L1058.03 683.077 L1057.48 683.077 L1056.92 683.077 L1056.36 683.077 L1055.8 683.077 L1055.24 683.077 L1054.68 683.077 L1054.12 683.077 L1053.56 683.077 L1053 683.077 L1052.44 683.077 L1051.88 683.077 L1051.32 683.077 L1050.76 683.077 L1050.2 683.077 L1049.65 683.077 L1049.09 683.077 L1048.53 683.077 L1047.97 683.077 L1047.41 683.077 L1046.85 683.077 L1046.29 683.077 L1045.73 683.077 L1045.17 683.077 L1044.61 683.077 L1044.05 683.077 L1043.49 683.077 L1042.93 683.077 L1042.38 683.077 L1041.82 683.077 L1041.26 683.077 L1040.7 683.077 L1040.14 683.077 L1039.58 683.077 L1039.02 683.077 L1038.46 683.077 L1037.9 683.077 L1037.34 683.077 L1036.78 683.077 L1036.22 683.077 L1035.66 683.077 L1035.1 683.077 L1034.55 683.077 L1033.99 683.077 L1033.43 683.077 L1032.87 683.077 L1032.31 683.077 L1031.75 683.077 L1031.19 683.077 L1030.63 683.077 L1030.07 683.077 L1029.51 683.077 L1028.95 683.077 L1028.39 683.077 L1027.83 683.077 L1027.28 683.077 L1026.72 683.077 L1026.16 683.077 L1025.6 683.077 L1025.04 683.077 L1024.48 683.077 L1023.92 683.077 L1023.36 683.077 L1022.8 683.077 L1022.24 683.077 L1021.68 683.077 L1021.12 683.077 L1020.56 683.077 L1020.01 683.077 L1019.45 683.077 L1018.89 683.077 L1018.33 683.077 L1017.77 683.077 L1017.21 683.077 L1016.65 683.077 L1016.09 683.077 L1015.53 683.077 L1014.97 683.077 L1014.41 683.077 L1013.85 683.077 L1013.29 683.077 L1012.73 683.077 L1012.18 683.077 L1011.62 683.077 L1011.06 683.077 L1010.5 683.077 L1009.94 683.077 L1009.38 683.077 L1008.82 683.077 L1008.26 683.077 L1007.7 683.077 L1007.14 683.077 L1006.58 683.077 L1006.02 683.077 L1005.46 683.077 L1004.91 683.077 L1004.35 683.077 L1003.79 683.077 L1003.23 683.077 L1002.67 683.077 L1002.11 683.077 L1001.55 683.077 L1000.99 683.077 L1000.43 683.077 L999.872 683.077 L999.313 683.077 L998.754 683.077 L998.194 683.077 L997.635 683.077 L997.076 683.077 L996.517 683.077 L995.957 683.077 L995.398 683.077 L994.839 683.077 L994.28 683.077 L993.72 683.077 L993.161 683.077 L992.602 683.077 L992.043 683.077 L991.483 683.077 L990.924 683.077 L990.365 683.077 L989.806 683.077 L989.246 683.077 L988.687 683.077 L988.128 683.077 L987.569 683.077 L987.009 683.077 L986.45 683.077 L985.891 683.077 L985.332 683.077 L984.772 683.077 L984.213 683.077 L983.654 683.077 L983.095 683.077 L982.535 683.077 L981.976 683.077 L981.417 683.077 L980.858 683.077 L980.298 683.077 L979.739 683.077 L979.18 683.077 L978.621 683.077 L978.061 683.077 L977.502 683.077 L976.943 683.077 L976.384 683.077 L975.824 683.077 L975.265 683.077 L974.706 683.077 L974.147 683.077 L973.587 683.077 L973.028 683.077 L972.469 683.077 L971.91 683.077 L971.35 683.077 L970.791 683.077 L970.232 683.077 L969.673 683.077 L969.113 683.077 L968.554 683.077 L967.995 683.077 L967.436 683.077 L966.876 683.077 L966.317 683.077 L965.758 683.077 L965.199 683.077 L964.639 683.077 L964.08 683.077 L963.521 683.077 L962.962 683.077 L962.402 683.077 L961.843 683.077 L961.284 683.077 L960.725 683.077 L960.165 683.077 L959.606 683.077 L959.047 683.077 L958.488 683.077 L957.928 683.077 L957.369 683.077 L956.81 683.077 L956.251 683.077 L955.691 683.077 L955.132 683.077 L954.573 683.077 L954.014 683.077 L953.454 683.077 L952.895 683.077 L952.336 683.077 L951.777 683.077 L951.217 683.077 L950.658 683.077 L950.099 683.077 L949.54 683.077 L948.98 683.077 L948.421 683.077 L947.862 683.077 L947.303 683.077 L946.743 683.077 L946.184 683.077 L945.625 683.077 L945.066 683.077 L944.506 683.077 L943.947 683.077 L943.388 683.077 L942.829 683.077 L942.269 683.077 L941.71 683.077 L941.151 683.077 L940.592 683.077 L940.032 683.077 L939.473 683.077 L938.914 683.077 L938.355 683.077 L937.795 683.077 L937.236 683.077 L936.677 683.077 L936.118 683.077 L935.558 683.077 L934.999 683.077 L934.44 683.077 L933.881 683.077 L933.321 683.077 L932.762 683.077 L932.203 683.077 L931.644 683.077 L931.084 683.077 L930.525 683.077 L929.966 683.077 L929.406 683.077 L928.847 683.077 L928.288 683.077 L927.729 683.077 L927.169 683.077 L926.61 683.077 L926.051 683.077 L925.492 683.077 L924.932 683.077 L924.373 683.077 L923.814 683.077 L923.255 683.077 L922.695 683.077 L922.136 683.077 L921.577 683.077 L921.018 683.077 L920.458 683.077 L919.899 683.077 L919.34 683.077 L918.781 683.077 L918.221 683.077 L917.662 683.077 L917.103 683.077 L916.544 683.077 L915.984 683.077 L915.425 683.077 L914.866 683.077 L914.307 683.077 L913.747 683.077 L913.188 683.077 L912.629 683.077 L912.07 683.077 L911.51 683.077 L910.951 683.077 L910.392 683.077 L909.833 683.077 L909.273 683.077 L908.714 683.077 L908.155 683.077 L907.596 683.077 L907.036 683.077 L906.477 683.077 L905.918 683.077 L905.359 683.077 L904.799 683.077 L904.24 683.077 L903.681 683.077 L903.122 683.077 L902.562 683.077 L902.003 683.077 L901.444 683.077 L900.885 683.077 L900.325 683.077 L899.766 683.077 L899.207 683.077 L898.648 683.077 L898.088 683.077 L897.529 683.077 L896.97 683.077 L896.411 683.077 L895.851 683.077 L895.292 683.077 L894.733 683.077 L894.174 683.077 L893.614 683.077 L893.055 683.077 L892.496 683.077 L891.937 683.077 L891.377 683.077 L890.818 683.077 L890.259 683.077 L889.7 683.077 L889.14 683.077 L888.581 683.077 L888.022 683.077 L887.463 683.077 L886.903 683.077 L886.344 683.077 L885.785 683.077 L885.226 683.077 L884.666 683.077 L884.107 683.077 L883.548 683.077 L882.989 683.077 L882.429 683.077 L881.87 683.077 L881.311 683.077 L880.752 683.077 L880.192 683.077 L879.633 683.077 L879.074 683.077 L878.515 683.077 L877.955 683.077 L877.396 683.077 L876.837 683.077 L876.278 683.077 L875.718 683.077 L875.159 683.077 L874.6 683.077 L874.041 683.077 L873.481 683.077 L872.922 683.077 L872.363 683.077 L871.804 683.077 L871.244 683.077 L870.685 683.077 L870.126 683.077 L869.567 683.077 L869.007 683.077 L868.448 683.077 L867.889 683.077 L867.33 683.077 L866.77 683.077 L866.211 683.077 L865.652 683.077 L865.093 683.077 L864.533 683.077 L863.974 683.077 L863.415 683.077 L862.856 683.077 L862.296 683.077 L861.737 683.077 L861.178 683.077 L860.619 683.077 L860.059 683.077 L859.5 683.077 L858.941 683.077 L858.382 683.077 L857.822 683.077 L857.263 683.077 L856.704 683.077 L856.145 683.077 L855.585 683.077 L855.026 683.077 L854.467 683.077 L853.908 683.077 L853.348 683.077 L852.789 683.077 L852.23 683.077 L851.671 683.077 L851.111 683.077 L850.552 683.077 L849.993 683.077 L849.434 683.077 L848.874 683.077 L848.315 683.077 L847.756 683.077 L847.197 683.077 L846.637 683.077 L846.078 683.077 L845.519 683.077 L844.96 683.077 L844.4 683.077 L843.841 683.077 L843.282 683.077 L842.723 683.077 L842.163 683.077 L841.604 683.077 L841.045 683.077 L840.486 683.077 L839.926 683.077 L839.367 683.077 L838.808 683.077 L838.249 683.077 L837.689 683.077 L837.13 683.077 L836.571 683.077 L836.012 683.077 L835.452 683.077 L834.893 683.077 L834.334 683.077 L833.775 683.077 L833.215 683.077 L832.656 683.077 L832.097 683.077 L831.538 683.077 L830.978 683.077 L830.419 683.077 L829.86 683.077 L829.301 683.077 L828.741 683.077 L828.182 683.077 L827.623 683.077 L827.064 683.077 L826.504 683.077 L825.945 683.077 L825.386 683.077 L824.827 683.077 L824.267 683.077 L823.708 683.077 L823.149 683.077 L822.59 683.077 L822.03 683.077 L821.471 683.077 L820.912 683.077 L820.353 683.077 L819.793 683.077 L819.234 683.077 L818.675 683.077 L818.116 683.077 L817.556 683.077 L816.997 683.077 L816.438 683.077 L815.879 683.077 L815.319 683.077 L814.76 683.077 L814.201 683.077 L813.642 683.077 L813.082 683.077 L812.523 683.077 L811.964 683.077 L811.405 683.077 L810.845 683.077 L810.286 683.077 L809.727 683.077 L809.168 683.077 L808.608 683.077 L808.049 683.077 L807.49 683.077 L806.931 683.077 L806.371 683.077 L805.812 683.077 L805.253 683.077 L804.693 683.077 L804.134 683.077 L803.575 683.077 L803.016 683.077 L802.456 683.077 L801.897 683.077 L801.338 683.077 L800.779 683.077 L800.219 683.077 L799.66 683.077 L799.101 683.077 L798.542 683.077 L797.982 683.077 L797.423 683.077 L796.864 683.077 L796.305 683.077 L795.745 683.077 L795.186 683.077 L794.627 683.077 L794.068 683.077 L793.508 683.077 L792.949 683.077 L792.39 683.077 L791.831 683.077 L791.271 683.077 L790.712 683.077 L790.153 683.077 L789.594 683.077 L789.034 683.077 L788.475 683.077 L787.916 683.077 L787.357 683.077 L786.797 683.077 L786.238 683.077 L785.679 683.077 L785.12 683.077 L784.56 683.077 L784.001 683.077 L783.442 683.077 L782.883 683.077 L782.323 683.077 L781.764 683.077 L781.205 683.077 L780.646 683.077 L780.086 683.077 L779.527 683.077 L778.968 683.077 L778.409 683.077 L777.849 683.077 L777.29 683.077 L776.731 683.077 L776.172 683.077 L775.612 683.077 L775.053 683.077 L774.494 683.077 L773.935 683.077 L773.375 683.077 L772.816 683.077 L772.257 683.077 L771.698 683.077 L771.138 683.077 L770.579 683.077 L770.02 683.077 L769.461 683.077 L768.901 683.077 L768.342 683.077 L767.783 683.077 L767.224 683.077 L766.664 683.077 L766.105 683.077 L765.546 683.077 L764.987 683.077 L764.427 683.077 L763.868 683.077 L763.309 683.077 L762.75 683.077 L762.19 683.077 L761.631 683.077 L761.072 683.077 L760.513 683.077 L759.953 683.077 L759.394 683.077 L758.835 683.077 L758.276 683.077 L757.716 683.077 L757.157 683.077 L756.598 683.077 L756.039 683.077 L755.479 683.077 L754.92 683.077 L754.361 683.077 L753.802 683.077 L753.242 683.077 L752.683 683.077 L752.124 683.077 L751.565 683.077 L751.005 683.077 L750.446 683.077 L749.887 683.077 L749.328 683.077 L748.768 683.077 L748.209 683.077 L747.65 683.077 L747.091 683.077 L746.531 683.077 L745.972 683.077 L745.413 683.077 L744.854 683.077 L744.294 683.077 L743.735 683.077 L743.176 683.077 L742.617 683.077 L742.057 683.077 L741.498 683.077 L740.939 683.077 L740.38 683.077 L739.82 683.077 L739.261 683.077 L738.702 683.077 L738.143 683.077 L737.583 683.077 L737.024 683.077 L736.465 683.077 L735.906 683.077 L735.346 683.077 L734.787 683.077 L734.228 683.077 L733.669 683.077 L733.109 683.077 L732.55 683.077 L731.991 683.077 L731.432 683.077 L730.872 683.077 L730.313 683.077 L729.754 683.077 L729.195 683.077 L728.635 683.077 L728.076 683.077 L727.517 683.077 L726.958 683.077 L726.398 683.077 L725.839 683.077 L725.28 683.077 L724.721 683.077 L724.161 683.077 L723.602 683.077 L723.043 683.077 L722.484 683.077 L721.924 683.077 L721.365 683.077 L720.806 683.077 L720.247 683.077  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip943)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,683.927 720.806,683.927 721.365,683.927 721.924,683.927 722.484,683.927 723.043,683.927 723.602,683.927 724.161,683.927 724.721,683.927 725.28,683.927 725.839,683.927 726.398,683.927 726.958,683.927 727.517,683.927 728.076,683.927 728.635,683.927 729.195,683.927 729.754,683.927 730.313,683.927 730.872,683.927 731.432,683.927 731.991,683.927 732.55,683.927 733.109,683.927 733.669,683.927 734.228,683.927 734.787,683.927 735.346,683.927 735.906,683.927 736.465,683.927 737.024,683.927 737.583,683.927 738.143,683.927 738.702,683.927 739.261,683.927 739.82,683.927 740.38,683.927 740.939,683.927 741.498,683.927 742.057,683.927 742.617,683.927 743.176,683.927 743.735,683.927 744.294,683.927 744.854,683.927 745.413,683.927 745.972,683.927 746.531,683.927 747.091,683.927 747.65,683.927 748.209,683.927 748.768,683.927 749.328,683.927 749.887,683.927 750.446,683.927 751.005,683.927 751.565,683.927 752.124,683.927 752.683,683.927 753.242,683.927 753.802,683.927 754.361,683.927 754.92,683.927 755.479,683.927 756.039,683.927 756.598,683.927 757.157,683.927 757.716,683.927 758.276,683.927 758.835,683.927 759.394,683.927 759.953,683.927 760.513,683.927 761.072,683.927 761.631,683.927 762.19,683.927 762.75,683.927 763.309,683.927 763.868,683.927 764.427,683.927 764.987,683.927 765.546,683.927 766.105,683.927 766.664,683.927 767.224,683.927 767.783,683.927 768.342,683.927 768.901,683.927 769.461,683.927 770.02,683.927 770.579,683.927 771.138,683.927 771.698,683.927 772.257,683.927 772.816,683.927 773.375,683.927 773.935,683.927 774.494,683.927 775.053,683.927 775.612,683.927 776.172,683.927 776.731,683.927 777.29,683.927 777.849,683.927 778.409,683.927 778.968,683.927 779.527,683.927 780.086,683.927 780.646,683.927 781.205,683.927 781.764,683.927 782.323,683.927 782.883,683.927 783.442,683.927 784.001,683.927 784.56,683.927 785.12,683.927 785.679,683.927 786.238,683.927 786.797,683.927 787.357,683.927 787.916,683.927 788.475,683.927 789.034,683.927 789.594,683.927 790.153,683.927 790.712,683.927 791.271,683.927 791.831,683.927 792.39,683.927 792.949,683.927 793.508,683.927 794.068,683.927 794.627,683.927 795.186,683.927 795.745,683.927 796.305,683.927 796.864,683.927 797.423,683.927 797.982,683.927 798.542,683.927 799.101,683.927 799.66,683.927 800.219,683.927 800.779,683.927 801.338,683.927 801.897,683.927 802.456,683.927 803.016,683.927 803.575,683.927 804.134,683.927 804.693,683.927 805.253,683.927 805.812,683.927 806.371,683.927 806.931,683.927 807.49,683.927 808.049,683.927 808.608,683.927 809.168,683.927 809.727,683.927 810.286,683.927 810.845,683.927 811.405,683.927 811.964,683.927 812.523,683.927 813.082,683.927 813.642,683.927 814.201,683.927 814.76,683.927 815.319,683.927 815.879,683.927 816.438,683.927 816.997,683.927 817.556,683.927 818.116,683.927 818.675,683.927 819.234,683.927 819.793,683.927 820.353,683.927 820.912,683.927 821.471,683.927 822.03,683.927 822.59,683.927 823.149,683.927 823.708,683.927 824.267,683.927 824.827,683.927 825.386,683.927 825.945,683.927 826.504,683.927 827.064,683.927 827.623,683.927 828.182,683.927 828.741,683.927 829.301,683.927 829.86,683.927 830.419,683.927 830.978,683.927 831.538,683.927 832.097,683.927 832.656,683.927 833.215,683.927 833.775,683.927 834.334,683.927 834.893,683.927 835.452,683.927 836.012,683.927 836.571,683.927 837.13,683.927 837.689,683.927 838.249,683.927 838.808,683.927 839.367,683.927 839.926,683.927 840.486,683.927 841.045,683.927 841.604,683.927 842.163,683.927 842.723,683.927 843.282,683.927 843.841,683.927 844.4,683.927 844.96,683.927 845.519,683.927 846.078,683.927 846.637,683.927 847.197,683.927 847.756,683.927 848.315,683.927 848.874,683.927 849.434,683.927 849.993,683.927 850.552,683.927 851.111,683.927 851.671,683.927 852.23,683.927 852.789,683.927 853.348,683.927 853.908,683.927 854.467,683.927 855.026,683.927 855.585,683.927 856.145,683.927 856.704,683.927 857.263,683.927 857.822,683.927 858.382,683.927 858.941,683.927 859.5,683.927 860.059,683.927 860.619,683.927 861.178,683.927 861.737,683.927 862.296,683.927 862.856,683.927 863.415,683.927 863.974,683.927 864.533,683.927 865.093,683.927 865.652,683.927 866.211,683.927 866.77,683.927 867.33,683.927 867.889,683.927 868.448,683.927 869.007,683.927 869.567,683.927 870.126,683.927 870.685,683.927 871.244,683.927 871.804,683.927 872.363,683.927 872.922,683.927 873.481,683.927 874.041,683.927 874.6,683.927 875.159,683.927 875.718,683.927 876.278,683.927 876.837,683.927 877.396,683.927 877.955,683.927 878.515,683.927 879.074,683.927 879.633,683.927 880.192,683.927 880.752,683.927 881.311,683.927 881.87,683.927 882.429,683.927 882.989,683.927 883.548,683.927 884.107,683.927 884.666,683.927 885.226,683.927 885.785,683.927 886.344,683.927 886.903,683.927 887.463,683.927 888.022,683.927 888.581,683.927 889.14,683.927 889.7,683.927 890.259,683.927 890.818,683.927 891.377,683.927 891.937,683.927 892.496,683.927 893.055,683.927 893.614,683.927 894.174,683.927 894.733,683.927 895.292,683.927 895.851,683.927 896.411,683.927 896.97,683.927 897.529,683.927 898.088,683.927 898.648,683.927 899.207,683.927 899.766,683.927 900.325,683.927 900.885,683.927 901.444,683.927 902.003,683.927 902.562,683.927 903.122,683.927 903.681,683.927 904.24,683.927 904.799,683.927 905.359,683.927 905.918,683.927 906.477,683.927 907.036,683.927 907.596,683.927 908.155,683.927 908.714,683.927 909.273,683.927 909.833,683.927 910.392,683.927 910.951,683.927 911.51,683.927 912.07,683.927 912.629,683.927 913.188,683.927 913.747,683.927 914.307,683.927 914.866,683.927 915.425,683.927 915.984,683.927 916.544,683.927 917.103,683.927 917.662,683.927 918.221,683.927 918.781,683.927 919.34,683.927 919.899,683.927 920.458,683.927 921.018,683.927 921.577,683.927 922.136,683.927 922.695,683.927 923.255,683.927 923.814,683.927 924.373,683.927 924.932,683.927 925.492,683.927 926.051,683.927 926.61,683.927 927.169,683.927 927.729,683.927 928.288,683.927 928.847,683.927 929.406,683.927 929.966,683.927 930.525,683.927 931.084,683.927 931.644,683.927 932.203,683.927 932.762,683.927 933.321,683.927 933.881,683.927 934.44,683.927 934.999,683.927 935.558,683.927 936.118,683.927 936.677,683.927 937.236,683.927 937.795,683.927 938.355,683.927 938.914,683.927 939.473,683.927 940.032,683.927 940.592,683.927 941.151,683.927 941.71,683.927 942.269,683.927 942.829,683.927 943.388,683.927 943.947,683.927 944.506,683.927 945.066,683.927 945.625,683.927 946.184,683.927 946.743,683.927 947.303,683.927 947.862,683.927 948.421,683.927 948.98,683.927 949.54,683.927 950.099,683.927 950.658,683.927 951.217,683.927 951.777,683.927 952.336,683.927 952.895,683.927 953.454,683.927 954.014,683.927 954.573,683.927 955.132,683.927 955.691,683.927 956.251,683.927 956.81,683.927 957.369,683.927 957.928,683.927 958.488,683.927 959.047,683.927 959.606,683.927 960.165,683.927 960.725,683.927 961.284,683.927 961.843,683.927 962.402,683.927 962.962,683.927 963.521,683.927 964.08,683.927 964.639,683.927 965.199,683.927 965.758,683.927 966.317,683.927 966.876,683.927 967.436,683.927 967.995,683.927 968.554,683.927 969.113,683.927 969.673,683.927 970.232,683.927 970.791,683.927 971.35,683.927 971.91,683.927 972.469,683.927 973.028,683.927 973.587,683.927 974.147,683.927 974.706,683.927 975.265,683.927 975.824,683.927 976.384,683.927 976.943,683.927 977.502,683.927 978.061,683.927 978.621,683.927 979.18,683.927 979.739,683.927 980.298,683.927 980.858,683.927 981.417,683.927 981.976,683.927 982.535,683.927 983.095,683.927 983.654,683.927 984.213,683.927 984.772,683.927 985.332,683.927 985.891,683.927 986.45,683.927 987.009,683.927 987.569,683.927 988.128,683.927 988.687,683.927 989.246,683.927 989.806,683.927 990.365,683.927 990.924,683.927 991.483,683.927 992.043,683.927 992.602,683.927 993.161,683.927 993.72,683.927 994.28,683.927 994.839,683.927 995.398,683.927 995.957,683.927 996.517,683.927 997.076,683.927 997.635,683.927 998.194,683.927 998.754,683.927 999.313,683.927 999.872,683.927 1000.43,683.927 1000.99,683.927 1001.55,683.927 1002.11,683.927 1002.67,683.927 1003.23,683.927 1003.79,683.927 1004.35,683.927 1004.91,683.927 1005.46,683.927 1006.02,683.927 1006.58,683.927 1007.14,683.927 1007.7,683.927 1008.26,683.927 1008.82,683.927 1009.38,683.927 1009.94,683.927 1010.5,683.927 1011.06,683.927 1011.62,683.927 1012.18,683.927 1012.73,683.927 1013.29,683.927 1013.85,683.927 1014.41,683.927 1014.97,683.927 1015.53,683.927 1016.09,683.927 1016.65,683.927 1017.21,683.927 1017.77,683.927 1018.33,683.927 1018.89,683.927 1019.45,683.927 1020.01,683.927 1020.56,683.927 1021.12,683.927 1021.68,683.927 1022.24,683.927 1022.8,683.927 1023.36,683.927 1023.92,683.927 1024.48,683.927 1025.04,683.927 1025.6,683.927 1026.16,683.927 1026.72,683.927 1027.28,683.927 1027.83,683.927 1028.39,683.927 1028.95,683.927 1029.51,683.927 1030.07,683.927 1030.63,683.927 1031.19,683.927 1031.75,683.927 1032.31,683.927 1032.87,683.927 1033.43,683.927 1033.99,683.927 1034.55,683.927 1035.1,683.927 1035.66,683.927 1036.22,683.927 1036.78,683.927 1037.34,683.927 1037.9,683.927 1038.46,683.927 1039.02,683.927 1039.58,683.927 1040.14,683.927 1040.7,683.927 1041.26,683.927 1041.82,683.927 1042.38,683.927 1042.93,683.927 1043.49,683.927 1044.05,683.927 1044.61,683.927 1045.17,683.927 1045.73,683.927 1046.29,683.927 1046.85,683.927 1047.41,683.927 1047.97,683.927 1048.53,683.927 1049.09,683.927 1049.65,683.927 1050.2,683.927 1050.76,683.927 1051.32,683.927 1051.88,683.927 1052.44,683.927 1053,683.927 1053.56,683.927 1054.12,683.927 1054.68,683.927 1055.24,683.927 1055.8,683.927 1056.36,683.927 1056.92,683.927 1057.48,683.927 1058.03,683.927 1058.59,683.927 1059.15,683.927 1059.71,683.927 1060.27,683.927 1060.83,683.927 1061.39,683.927 1061.95,683.927 1062.51,683.927 1063.07,683.927 1063.63,683.927 1064.19,683.927 1064.75,683.927 1065.3,683.927 1065.86,683.927 1066.42,683.927 1066.98,683.927 1067.54,683.927 1068.1,683.927 1068.66,683.927 1069.22,683.927 1069.78,683.927 1070.34,683.927 1070.9,683.927 1071.46,683.927 1072.02,683.927 1072.57,683.927 1073.13,683.927 1073.69,683.927 1074.25,683.927 1074.81,683.927 1075.37,683.927 1075.93,683.927 1076.49,683.927 1077.05,683.927 1077.61,683.927 1078.17,683.927 1078.73,683.927 1079.29,683.927 1079.85,683.927 1080.4,683.927 1080.96,683.927 1081.52,683.927 1082.08,683.927 1082.64,683.927 1083.2,683.927 1083.76,683.927 1084.32,683.927 1084.88,683.927 1085.44,683.927 1086,683.927 1086.56,683.927 1087.12,683.927 1087.67,683.927 1088.23,683.927 1088.79,683.927 1089.35,683.927 1089.91,683.927 1090.47,683.927 1091.03,683.927 1091.59,683.927 1092.15,683.927 1092.71,683.927 1093.27,683.927 1093.83,683.927 1094.39,683.927 1094.94,683.927 1095.5,683.927 1096.06,683.927 1096.62,683.927 1097.18,683.927 1097.74,683.927 1098.3,683.927 1098.86,683.927 1099.42,683.927 1099.98,683.927 1100.54,683.927 1101.1,683.927 1101.66,683.927 1102.22,683.927 1102.77,683.927 1103.33,683.927 1103.89,683.927 1104.45,683.927 1105.01,683.927 1105.57,683.927 1106.13,683.927 1106.69,683.927 1107.25,683.927 1107.81,683.927 1108.37,683.927 1108.93,683.927 1109.49,683.927 1110.04,683.927 1110.6,683.927 1111.16,683.927 1111.72,683.927 1112.28,683.927 1112.84,683.927 1113.4,683.927 1113.96,683.927 1114.52,683.927 1115.08,683.927 1115.64,683.927 1116.2,683.927 1116.76,683.927 1117.31,683.927 1117.87,683.927 1118.43,683.927 1118.99,683.927 1119.55,683.927 1120.11,683.927 1120.67,683.927 1121.23,683.927 1121.79,683.927 1122.35,683.927 1122.91,683.927 1123.47,683.927 1124.03,683.927 1124.59,683.927 1125.14,683.927 1125.7,683.927 1126.26,683.927 1126.82,683.927 1127.38,683.927 1127.94,683.927 1128.5,683.927 1129.06,683.927 1129.62,683.927 1130.18,683.927 1130.74,683.927 1131.3,683.927 1131.86,683.927 1132.41,683.927 1132.97,683.927 1133.53,683.927 1134.09,683.927 1134.65,683.927 1135.21,683.927 1135.77,683.927 1136.33,683.927 1136.89,683.927 1137.45,683.927 1138.01,683.927 1138.57,683.927 1139.13,683.927 1139.68,683.927 1140.24,683.927 1140.8,683.927 1141.36,683.927 1141.92,683.927 1142.48,683.927 1143.04,683.927 1143.6,683.927 1144.16,683.927 1144.72,683.927 1145.28,683.927 1145.84,683.927 1146.4,683.927 1146.96,683.927 1147.51,683.927 1148.07,683.927 1148.63,683.927 1149.19,683.927 1149.75,683.927 1150.31,683.927 1150.87,683.927 1151.43,683.927 1151.99,683.927 1152.55,683.927 1153.11,683.927 1153.67,683.927 1154.23,683.927 1154.78,683.927 1155.34,683.927 1155.9,683.927 1156.46,683.927 1157.02,683.927 1157.58,683.927 1158.14,683.927 1158.7,683.927 1159.26,683.927 1159.82,683.927 1160.38,683.927 1160.94,683.927 1161.5,683.927 1162.05,683.927 1162.61,683.927 1163.17,683.927 1163.73,683.927 1164.29,683.927 1164.85,683.927 1165.41,683.927 1165.97,683.927 1166.53,683.927 1167.09,683.927 1167.65,683.927 1168.21,683.927 1168.77,683.927 1169.33,683.927 1169.88,683.927 1170.44,683.927 1171,683.927 1171.56,683.927 1172.12,683.927 1172.68,683.927 1173.24,683.927 1173.8,683.927 1174.36,683.927 1174.92,683.927 1175.48,683.927 1176.04,683.927 1176.6,683.927 1177.15,683.927 1177.71,683.927 1178.27,683.927 1178.83,683.927 1179.39,683.927 1179.95,683.927 1180.51,683.927 1181.07,683.927 1181.63,683.927 1182.19,683.927 1182.75,683.927 1183.31,683.927 1183.87,683.927 1184.43,683.927 1184.98,683.927 1185.54,683.927 1186.1,683.927 1186.66,683.927 1187.22,683.927 1187.78,683.927 1188.34,683.927 1188.9,683.927 1189.46,683.927 1190.02,683.927 1190.58,683.927 1191.14,683.927 1191.7,683.927 1192.25,683.927 1192.81,683.927 1193.37,683.927 1193.93,683.927 1194.49,683.927 1195.05,683.927 1195.61,683.927 1196.17,683.927 1196.73,683.927 1197.29,683.927 1197.85,683.927 1198.41,683.927 1198.97,683.927 1199.52,683.927 1200.08,683.927 1200.64,683.927 1201.2,683.927 1201.76,683.927 1202.32,683.927 1202.88,683.927 1203.44,683.927 1204,683.927 1204.56,683.927 1205.12,683.927 1205.68,683.927 1206.24,683.927 1206.8,683.927 1207.35,683.927 1207.91,683.927 1208.47,683.927 1209.03,683.927 1209.59,683.927 1210.15,683.927 1210.71,683.927 1211.27,683.927 1211.83,683.927 1212.39,683.927 1212.95,683.927 1213.51,683.927 1214.07,683.927 1214.62,683.927 1215.18,683.927 1215.74,683.927 1216.3,683.927 1216.86,683.927 1217.42,683.927 1217.98,683.927 1218.54,683.927 1219.1,683.927 1219.66,683.927 1220.22,683.927 1220.78,683.927 1221.34,683.927 1221.89,683.927 1222.45,683.927 1223.01,683.927 1223.57,683.927 1224.13,683.927 1224.69,683.927 1225.25,683.927 1225.81,683.927 1226.37,683.927 1226.93,683.927 1227.49,683.927 1228.05,683.927 1228.61,683.927 1229.17,683.927 1229.72,683.927 1230.28,683.927 1230.84,683.927 1231.4,683.927 1231.96,683.927 1232.52,683.927 1233.08,683.927 1233.64,683.927 1234.2,683.927 1234.76,683.927 1235.32,683.927 1235.88,683.927 1236.44,683.927 1236.99,683.927 1237.55,683.927 1238.11,683.927 1238.67,683.927 1239.23,683.927 1239.79,683.927 1240.35,683.927 1240.91,683.927 1241.47,683.927 1242.03,683.927 1242.59,683.927 1243.15,683.927 1243.71,683.927 1244.26,683.927 1244.82,683.927 1245.38,683.927 1245.94,683.927 1246.5,683.927 1247.06,683.927 1247.62,683.927 1248.18,683.927 1248.74,683.927 1249.3,683.927 1249.86,683.927 1250.42,683.927 1250.98,683.927 1251.54,683.927 1252.09,683.927 1252.65,683.927 1253.21,683.927 1253.77,683.927 1254.33,683.927 1254.89,683.927 1255.45,683.927 1256.01,683.927 1256.57,683.927 1257.13,683.927 1257.69,683.927 1258.25,683.927 1258.81,683.927 1259.36,683.927 1259.92,683.927 1260.48,683.927 1261.04,683.927 1261.6,683.927 1262.16,683.927 1262.72,683.927 1263.28,683.927 1263.84,683.927 1264.4,683.927 1264.96,683.927 1265.52,683.927 1266.08,683.927 1266.63,683.927 1267.19,683.927 1267.75,683.927 1268.31,683.927 1268.87,683.927 1269.43,683.927 1269.99,683.927 1270.55,683.927 1271.11,683.927 1271.67,683.927 1272.23,683.927 1272.79,683.927 1273.35,683.927 1273.91,683.927 1274.46,683.927 1275.02,683.927 1275.58,683.927 1276.14,683.927 1276.7,683.927 1277.26,683.927 1277.82,683.927 1278.38,683.927 1278.94,683.927 1279.5,683.927 1280.06,683.927 1280.62,683.927 1281.18,683.927 1281.73,683.927 1282.29,683.927 1282.85,683.927 1283.41,683.927 1283.97,683.927 1284.53,683.927 1285.09,683.927 1285.65,683.927 1286.21,683.927 1286.77,683.927 1287.33,683.927 1287.89,683.927 1288.45,683.927 1289,683.927 1289.56,683.927 1290.12,683.927 1290.68,683.927 1291.24,683.927 1291.8,683.927 1292.36,683.927 1292.92,683.927 1293.48,683.927 1294.04,683.927 1294.6,683.927 1295.16,683.927 1295.72,683.927 1296.28,683.927 1296.83,683.927 1297.39,683.927 1297.95,683.927 1298.51,683.927 1299.07,683.927 1299.63,683.927 1300.19,683.927 1300.75,683.927 1301.31,683.927 1301.87,683.927 1302.43,683.927 1302.99,683.927 1303.55,683.927 1304.1,683.927 1304.66,683.927 1305.22,683.927 1305.78,683.927 1306.34,683.927 1306.9,683.927 1307.46,683.927 1308.02,683.927 1308.58,683.927 1309.14,683.927 1309.7,683.927 1310.26,683.927 1310.82,683.927 1311.38,683.927 1311.93,683.927 1312.49,683.927 1313.05,683.927 1313.61,683.927 1314.17,683.927 1314.73,683.927 1315.29,683.927 1315.85,683.927 1316.41,683.927 1316.97,683.927 1317.53,683.927 1318.09,683.927 1318.65,683.927 1319.2,683.927 1319.76,683.927 1320.32,683.927 1320.88,683.927 1321.44,683.927 1322,683.927 1322.56,683.927 1323.12,683.927 1323.68,683.927 1324.24,683.927 1324.8,683.927 1325.36,683.927 1325.92,683.927 1326.47,683.927 1327.03,683.927 1327.59,683.927 1328.15,683.927 1328.71,683.927 1329.27,683.927 1329.83,683.927 1330.39,683.927 1330.95,683.927 1331.51,683.927 1332.07,683.927 1332.63,683.927 1333.19,683.927 1333.75,683.927 1334.3,683.927 1334.86,683.927 1335.42,683.927 1335.98,683.927 1336.54,683.927 1337.1,683.927 1337.66,683.927 1338.22,683.927 1338.78,683.927 1339.34,683.927 1339.9,683.927 1340.46,683.927 1341.02,683.927 1341.57,683.927 1342.13,683.927 1342.69,683.927 1343.25,683.927 1343.81,683.927 1344.37,683.927 1344.93,683.927 1345.49,683.927 1346.05,683.927 1346.61,683.927 1347.17,683.927 1347.73,683.927 1348.29,683.927 1348.84,683.927 1349.4,683.927 1349.96,683.927 1350.52,683.927 1351.08,683.927 1351.64,683.927 1352.2,683.927 1352.76,683.927 1353.32,683.927 1353.88,683.927 1354.44,683.927 1355,683.927 1355.56,683.927 1356.12,683.927 1356.67,683.927 1357.23,683.927 1357.79,683.927 1358.35,683.927 1358.91,683.927 1359.47,683.927 1360.03,683.927 1360.59,683.927 1361.15,683.927 1361.71,683.927 1362.27,683.927 1362.83,683.927 1363.39,683.927 1363.94,683.927 1364.5,683.927 1365.06,683.927 1365.62,683.927 1366.18,683.927 1366.74,683.927 1367.3,683.927 1367.86,683.927 1368.42,683.927 1368.98,683.927 1369.54,683.927 1370.1,683.927 1370.66,683.927 1371.21,683.927 1371.77,683.927 1372.33,683.927 1372.89,683.927 1373.45,683.927 1374.01,683.927 1374.57,683.927 1375.13,683.927 1375.69,683.927 1376.25,683.927 1376.81,683.927 1377.37,683.927 1377.93,683.927 1378.49,683.927 1379.04,683.927 1379.6,683.927 1380.16,683.927 1380.72,683.927 1381.28,683.927 1381.84,683.927 1382.4,683.927 1382.96,683.927 1383.52,683.927 1384.08,683.927 1384.64,683.927 1385.2,683.927 1385.76,683.927 1386.31,683.927 1386.87,683.927 1387.43,683.927 1387.99,683.927 1388.55,683.927 1389.11,683.927 1389.67,683.927 1390.23,683.927 1390.79,683.927 1391.35,683.927 1391.91,683.927 1392.47,683.927 1393.03,683.927 1393.58,683.927 1394.14,683.927 1394.7,683.927 1395.26,683.927 1395.82,683.927 1396.38,683.927 1396.94,683.927 1397.5,683.927 1398.06,683.927 1398.62,683.927 1399.18,683.927 1399.74,683.927 1400.3,683.927 1400.86,683.927 1401.41,683.927 1401.97,683.927 1402.53,683.927 1403.09,683.927 1403.65,683.927 1404.21,683.927 1404.77,683.927 1405.33,683.927 1405.89,683.927 1406.45,683.927 1407.01,683.927 1407.57,683.927 1408.13,683.927 1408.68,683.927 1409.24,683.927 1409.8,683.927 1410.36,683.927 1410.92,683.927 1411.48,683.927 1412.04,683.927 1412.6,683.927 1413.16,683.927 1413.72,683.927 1414.28,683.927 1414.84,683.927 1415.4,683.927 1415.95,683.927 1416.51,683.927 1417.07,683.927 1417.63,683.927 1418.19,683.927 1418.75,683.927 1419.31,683.927 1419.87,683.927 1420.43,683.927 1420.99,683.927 1421.55,683.927 1422.11,683.927 1422.67,683.927 1423.23,683.927 1423.78,683.927 1424.34,683.927 1424.9,683.927 1425.46,683.927 1426.02,683.927 1426.58,683.927 1427.14,683.927 1427.7,683.927 1428.26,683.927 1428.82,683.927 1429.38,683.927 1429.94,683.927 1430.5,683.927 1431.05,683.927 1431.61,683.927 1432.17,683.927 1432.73,683.927 1433.29,683.927 1433.85,683.927 1434.41,683.927 1434.97,683.927 1435.53,683.927 1436.09,683.927 1436.65,683.927 1437.21,683.927 1437.77,683.927 1438.33,683.927 1438.88,683.927 1439.44,683.927 1440,683.927 1440.56,683.927 1441.12,683.927 1441.68,683.927 1442.24,683.927 1442.8,683.927 1443.36,683.927 1443.92,683.927 1444.48,683.927 1445.04,683.927 1445.6,683.927 1446.15,683.927 1446.71,683.927 1447.27,683.927 1447.83,683.927 1448.39,683.927 1448.95,683.927 1449.51,683.927 1450.07,683.927 1450.63,683.927 1451.19,683.927 1451.75,683.927 1452.31,683.927 1452.87,683.927 1453.42,683.927 1453.98,683.927 1454.54,683.927 1455.1,683.927 1455.66,683.927 1456.22,683.927 1456.78,683.927 1457.34,683.927 1457.9,683.927 1458.46,683.927 1459.02,683.927 1459.58,683.927 1460.14,683.927 1460.7,683.927 1461.25,683.927 1461.81,683.927 1462.37,683.927 1462.93,683.927 1463.49,683.927 1464.05,683.927 1464.61,683.927 1465.17,683.927 1465.73,683.927 1466.29,683.927 1466.85,683.927 1467.41,683.927 1467.97,683.927 1468.52,683.927 1469.08,683.927 1469.64,683.927 1470.2,683.927 1470.76,683.927 1471.32,683.927 1471.88,683.927 1472.44,683.927 1473,683.927 1473.56,683.927 1474.12,683.927 1474.68,683.927 1475.24,683.927 1475.79,683.927 1476.35,683.927 1476.91,683.927 1477.47,683.927 1478.03,683.927 1478.59,683.927 1479.15,683.927 1479.71,683.927 1480.27,683.927 1480.83,683.927 1481.39,683.927 1481.95,683.927 1482.51,683.927 1483.07,683.927 1483.62,683.927 1484.18,683.927 1484.74,683.927 1485.3,683.927 1485.86,683.927 1486.42,683.927 1486.98,683.927 1487.54,683.927 1488.1,683.927 1488.66,683.927 1489.22,683.927 1489.78,683.927 1490.34,683.927 1490.89,683.927 1491.45,683.927 1492.01,683.927 1492.57,683.927 1493.13,683.927 1493.69,683.927 1494.25,683.927 1494.81,683.927 1495.37,683.927 1495.93,683.927 1496.49,683.927 1497.05,683.927 1497.61,683.927 1498.16,683.927 1498.72,683.927 1499.28,683.927 1499.84,683.927 1500.4,683.927 1500.96,683.927 1501.52,683.927 1502.08,683.927 1502.64,683.927 1503.2,683.927 1503.76,683.927 1504.32,683.927 1504.88,683.927 1505.44,683.927 1505.99,683.927 1506.55,683.927 1507.11,683.927 1507.67,683.927 1508.23,683.927 1508.79,683.927 1509.35,683.927 1509.91,683.927 1510.47,683.927 1511.03,683.927 1511.59,683.927 1512.15,683.927 1512.71,683.927 1513.26,683.927 1513.82,683.927 1514.38,683.927 1514.94,683.927 1515.5,683.927 1516.06,683.927 1516.62,683.927 1517.18,683.927 1517.74,683.927 1518.3,683.927 1518.86,683.927 1519.42,683.927 1519.98,683.927 1520.53,683.927 1521.09,683.927 1521.65,683.927 1522.21,683.927 1522.77,683.927 1523.33,683.927 1523.89,683.927 1524.45,683.927 1525.01,683.927 1525.57,683.927 1526.13,683.927 1526.69,683.927 1527.25,683.927 1527.81,683.927 1528.36,683.927 1528.92,683.927 1529.48,683.927 1530.04,683.927 1530.6,683.927 1531.16,683.927 1531.72,683.927 1532.28,683.927 1532.84,683.927 1533.4,683.927 1533.96,683.927 1534.52,683.927 1535.08,683.927 1535.63,683.927 1536.19,683.927 1536.75,683.927 1537.31,683.927 1537.87,683.927 1538.43,683.927 1538.99,683.927 1539.55,683.927 1540.11,683.927 1540.67,683.927 1541.23,683.927 1541.79,683.927 1542.35,683.927 1542.9,683.927 1543.46,683.927 1544.02,683.927 1544.58,683.927 1545.14,683.927 1545.7,683.927 1546.26,683.927 1546.82,683.927 1547.38,683.927 1547.94,683.927 1548.5,683.927 1549.06,683.927 1549.62,683.927 1550.18,683.927 1550.73,683.927 1551.29,683.927 1551.85,683.927 1552.41,683.927 1552.97,683.927 1553.53,683.927 1554.09,683.927 1554.65,683.927 1555.21,683.927 1555.77,683.927 1556.33,683.927 1556.89,683.927 1557.45,683.927 1558,683.927 1558.56,683.927 1559.12,683.927 1559.68,683.927 1560.24,683.927 1560.8,683.927 1561.36,683.927 1561.92,683.927 1562.48,683.927 1563.04,683.927 1563.6,683.927 1564.16,683.927 1564.72,683.927 1565.28,683.927 1565.83,683.927 1566.39,683.927 1566.95,683.927 1567.51,683.927 1568.07,683.927 1568.63,683.927 1569.19,683.927 1569.75,683.927 1570.31,683.927 1570.87,683.927 1571.43,683.927 1571.99,683.927 1572.55,683.927 1573.1,683.927 1573.66,683.927 1574.22,683.927 1574.78,683.927 1575.34,683.927 1575.9,683.927 1576.46,683.927 1577.02,683.927 1577.58,683.927 1578.14,683.927 1578.7,683.927 1579.26,683.927 1579.82,683.927 1580.37,683.927 1580.93,683.927 1581.49,683.927 1582.05,683.927 1582.61,683.927 1583.17,683.927 1583.73,683.927 1584.29,683.927 1584.85,683.927 1585.41,683.927 1585.97,683.927 1586.53,683.927 1587.09,683.927 1587.65,683.927 1588.2,683.927 1588.76,683.927 1589.32,683.927 1589.88,683.927 1590.44,683.927 1591,683.927 1591.56,683.927 1592.12,683.927 1592.68,683.927 1593.24,683.927 1593.8,683.927 1594.36,683.927 1594.92,683.927 1595.47,683.927 1596.03,683.927 1596.59,683.927 1597.15,683.927 1597.71,683.927 1598.27,683.927 1598.83,683.927 1599.39,683.927 1599.95,683.927 1600.51,683.927 1601.07,683.927 1601.63,683.927 1602.19,683.927 1602.74,683.927 1603.3,683.927 1603.86,683.927 1604.42,683.927 1604.98,683.927 1605.54,683.927 1606.1,683.927 1606.66,683.927 1607.22,683.927 1607.78,683.927 1608.34,683.927 1608.9,683.927 1609.46,683.927 1610.02,683.927 1610.57,683.927 1611.13,683.927 1611.69,683.927 1612.25,683.927 1612.81,683.927 1613.37,683.927 1613.93,683.927 1614.49,683.927 1615.05,683.927 1615.61,683.927 1616.17,683.927 1616.73,683.927 1617.29,683.927 1617.84,683.927 1618.4,683.927 1618.96,683.927 1619.52,683.927 1620.08,683.927 1620.64,683.927 1621.2,683.927 1621.76,683.927 1622.32,683.927 1622.88,683.927 1623.44,683.927 1624,683.927 1624.56,683.927 1625.11,683.927 1625.67,683.927 1626.23,683.927 1626.79,683.927 1627.35,683.927 1627.91,683.927 1628.47,683.927 1629.03,683.927 1629.59,683.927 1630.15,683.927 1630.71,683.927 1631.27,683.927 1631.83,683.927 1632.39,683.927 1632.94,683.927 1633.5,683.927 1634.06,683.927 1634.62,683.927 1635.18,683.927 1635.74,683.927 1636.3,683.927 1636.86,683.927 1637.42,683.927 1637.98,683.927 1638.54,683.927 1639.1,683.927 1639.66,683.927 1640.21,683.927 1640.77,683.927 1641.33,683.927 1641.89,683.927 1642.45,683.927 1643.01,683.927 1643.57,683.927 1644.13,683.927 1644.69,683.927 1645.25,683.927 1645.81,683.927 1646.37,683.927 1646.93,683.927 1647.48,683.927 1648.04,683.927 1648.6,683.927 1649.16,683.927 1649.72,683.927 1650.28,683.927 1650.84,683.927 1651.4,683.927 1651.96,683.927 1652.52,683.927 1653.08,683.927 1653.64,683.927 1654.2,683.927 1654.76,683.927 1655.31,683.927 1655.87,683.927 1656.43,683.927 1656.99,683.927 1657.55,683.927 1658.11,683.927 1658.67,683.927 1659.23,683.927 1659.79,683.927 1660.35,683.927 1660.91,683.927 1661.47,683.927 1662.03,683.927 1662.58,683.927 1663.14,683.927 1663.7,683.927 1664.26,683.927 1664.82,683.927 1665.38,683.927 1665.94,683.927 1666.5,683.927 1667.06,683.927 1667.62,683.927 1668.18,683.927 1668.74,683.927 1669.3,683.927 1669.85,683.927 1670.41,683.927 1670.97,683.927 1671.53,683.927 1672.09,683.927 1672.65,683.927 1673.21,683.927 1673.77,683.927 1674.33,683.927 1674.89,683.927 1675.45,683.927 1676.01,683.927 1676.57,683.927 1677.13,683.927 1677.68,683.927 1678.24,683.927 1678.8,683.927 1679.36,683.927 1679.92,683.927 1680.48,683.927 1681.04,683.927 1681.6,683.927 1682.16,683.927 1682.72,683.927 1683.28,683.927 1683.84,683.927 1684.4,683.927 1684.95,683.927 1685.51,683.927 1686.07,683.927 1686.63,683.927 1687.19,683.927 1687.75,683.927 1688.31,683.927 1688.87,683.927 1689.43,683.927 1689.99,683.927 1690.55,683.927 1691.11,683.927 1691.67,683.927 1692.23,683.927 1692.78,683.927 1693.34,683.927 1693.9,683.927 1694.46,683.927 1695.02,683.927 1695.58,683.927 1696.14,683.927 1696.7,683.927 1697.26,683.927 1697.82,683.927 1698.38,683.927 1698.94,683.927 1699.5,683.927 1700.05,683.927 1700.61,683.927 1701.17,683.927 1701.73,683.927 1702.29,683.927 1702.85,683.927 1703.41,683.927 1703.97,683.927 1704.53,683.927 1705.09,683.927 1705.65,683.927 1706.21,683.927 1706.77,683.927 1707.32,683.927 1707.88,683.927 1708.44,683.927 1709,683.927 1709.56,683.927 1710.12,683.927 1710.68,683.927 1711.24,683.927 1711.8,683.927 1712.36,683.927 1712.92,683.927 1713.48,683.927 1714.04,683.927 1714.6,683.927 1715.15,683.927 1715.71,683.927 1716.27,683.927 1716.83,683.927 1717.39,683.927 1717.95,683.927 1718.51,683.927 1719.07,683.927 1719.63,683.927 1720.19,683.927 1720.75,683.927 1721.31,683.927 1721.87,683.927 1722.42,683.927 1722.98,683.927 1723.54,683.927 1724.1,683.927 1724.66,683.927 1725.22,683.927 1725.78,683.927 1726.34,683.927 1726.9,683.927 1727.46,683.927 1728.02,683.927 1728.58,683.927 1729.14,683.927 1729.69,683.927 1730.25,683.927 1730.81,683.927 1731.37,683.927 1731.93,683.927 1732.49,683.927 1733.05,683.927 1733.61,683.927 1734.17,683.927 1734.73,683.927 1735.29,683.927 1735.85,683.927 1736.41,683.927 1736.97,683.927 1737.52,683.927 1738.08,683.927 1738.64,683.927 1739.2,683.927 1739.76,683.927 1740.32,683.927 1740.88,683.927 1741.44,683.927 1742,683.927 1742.56,683.927 1743.12,683.927 1743.68,683.927 1744.24,683.927 1744.79,683.927 1745.35,683.927 1745.91,683.927 1746.47,683.927 1747.03,683.927 1747.59,683.927 1748.15,683.927 1748.71,683.927 1749.27,683.927 1749.83,683.927 1750.39,683.927 1750.95,683.927 1751.51,683.927 1752.06,683.927 1752.62,683.927 1753.18,683.927 1753.74,683.927 1754.3,683.927 1754.86,683.927 1755.42,683.927 1755.98,683.927 1756.54,683.927 1757.1,683.927 1757.66,683.927 1758.22,683.927 1758.78,683.927 1759.34,683.927 1759.89,683.927 1760.45,683.927 1761.01,683.927 1761.57,683.927 1762.13,683.927 1762.69,683.927 1763.25,683.927 1763.81,683.927 1764.37,683.927 1764.93,683.927 1765.49,683.927 1766.05,683.927 1766.61,683.927 1767.16,683.927 1767.72,683.927 1768.28,683.927 1768.84,683.927 1769.4,683.927 1769.96,683.927 1770.52,683.927 1771.08,683.927 1771.64,683.927 1772.2,683.927 1772.76,683.927 1773.32,683.927 1773.88,683.927 1774.43,683.927 1774.99,683.927 1775.55,683.927 1776.11,683.927 1776.67,683.927 1777.23,683.927 1777.79,683.927 1778.35,683.927 1778.91,683.927 1779.47,683.927 1780.03,683.927 1780.59,683.927 1781.15,683.927 1781.71,683.927 1782.26,683.927 1782.82,683.927 1783.38,683.927 1783.94,683.927 1784.5,683.927 1785.06,683.927 1785.62,683.927 1786.18,683.927 1786.74,683.927 1787.3,683.927 1787.86,683.927 1788.42,683.927 1788.98,683.927 1789.53,683.927 1790.09,683.927 1790.65,683.927 1791.21,683.927 1791.77,683.927 1792.33,683.927 1792.89,683.927 1793.45,683.927 1794.01,683.927 1794.57,683.927 1795.13,683.927 1795.69,683.927 1796.25,683.927 1796.8,683.927 1797.36,683.927 1797.92,683.927 1798.48,683.927 1799.04,683.927 1799.6,683.927 1800.16,683.927 1800.72,683.927 1801.28,683.927 1801.84,683.927 1802.4,683.927 1802.96,683.927 1803.52,683.927 1804.08,683.927 1804.63,683.927 1805.19,683.927 1805.75,683.927 1806.31,683.927 1806.87,683.927 1807.43,683.927 1807.99,683.927 1808.55,683.927 1809.11,683.927 1809.67,683.927 1810.23,683.927 1810.79,683.927 1811.35,683.927 1811.9,683.927 1812.46,683.927 1813.02,683.927 1813.58,683.927 1814.14,683.927 1814.7,683.927 1815.26,683.927 1815.82,683.927 1816.38,683.927 1816.94,683.927 1817.5,683.927 1818.06,683.927 1818.62,683.927 1819.18,683.927 1819.73,683.927 1820.29,683.927 1820.85,683.927 1821.41,683.927 1821.97,683.927 1822.53,683.927 1823.09,683.927 1823.65,683.927 1824.21,683.927 1824.77,683.927 1825.33,683.927 1825.89,683.927 1826.45,683.927 1827,683.927 1827.56,683.927 1828.12,683.927 1828.68,683.927 1829.24,683.927 1829.8,683.927 1830.36,683.927 1830.92,683.927 1831.48,683.927 1832.04,683.927 1832.6,683.927 1833.16,683.927 1833.72,683.927 1834.27,683.927 1834.83,683.927 1835.39,683.927 1835.95,683.927 1836.51,683.927 1837.07,683.927 1837.63,683.927 1838.19,683.927 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906472","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $targetwalkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.033076582199697 ± 0.02288098967341693\nProjected Energy: -4.016807350687735 ± (0.004387484338286285, 0.004279097136760335)\nExact Energy: -4.021502406906472\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from lomc! as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b]; shift=:shift, norm=:norm, dτ=df.dτ[end], skip=0)\n\nCalculate the growth witness directly from a DataFrame returned by lomc!. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0) -> g\ngrowth_witness(df::DataFrame, [b]; skip=0) -> g\ngrowth_witness(sim::SimulationState, [b]; skip=0) -> g\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, dτ;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n) -> r::RatioBlockingResult\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    dτ=determine_constant_time_step(df),\n    kwargs...\n) -> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively. Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means(). dτ is the time step and weights a function that calulates the weights. See w_exp() and w_lin().\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m)\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator. Error propagation is done with MonteCarloMeasurements. Progagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a DataFrame returned by lomc!. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator() and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\n-> (;df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df returned from lomc! repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\ndf, _ = lomc!(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(df; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-Tuple{AbstractVector, AbstractVector, AbstractVector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, dτ;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n) -> r::RatioBlockingResult\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    dτ=df.dτ[end],\n    kwargs...\n)\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means(). dτ is the time step and weights a function that calulates the weights. See w_exp() and w_lin(). Additional keyword arguments are passed on to ratio_of_means().\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the unweighted ratio. Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame returned by lomc!. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df returned from lomc! repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\ndf, _ = lomc!(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(df; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(\n    df::DataFrame;\n    skip=0, hproj=:hproj, vproj=:vproj, kwargs...\n) -> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy() to set these up in lomc!()). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, dτ;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n) -> r::RatioBlockingResult\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n) -> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame returned by lomc!. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means(). dτ is the time step and weights a function that calulates the weights. See w_exp() and w_lin(). Additional keyword arguments are passed on to ratio_of_means().\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df returned from lomc! repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\ndf, _ = lomc!(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(df; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...) -> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, dτ; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip.\n\nSee also w_lin(), growth_estimator(), mixed_estimator().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, dτ; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip.\n\nSee also w_exp(), growth_estimator(), mixed_estimator().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the result of replica lomc! passed as  argument df, using replicas _1 and _2. Calls ratio_of_means() to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame version can extract the relevant information from the result of lomc!. Set up lomc! with the keyword argument replica = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.determine_constant_time_step-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.determine_constant_time_step","text":"determine_constant_time_step(df) -> dτ\n\nGiven a DataFrame df, determine the time step that was used to compute it. Throw an error if time step is not constant.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by lomc! as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallowed_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">0.47115</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">1.3716e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">1.0679e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">9.097e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">1.283e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">2.635e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">8.365e-6</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0-1.41421im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im      0.0-2.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+1.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im\n 0.0-1.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999991\n -0.9999999999999991\n -0.9999999999999982\n -0.9999999999999973\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000027\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n       0.0+0.0im       -5.55112e-17-0.353553im         0.534676-0.217841im      2.77556e-17-0.204124im             0.0+0.0im           0.534676+0.217841im      2.77556e-17+0.204124im             0.0+0.0im       -5.55112e-17+0.353553im           0.0+0.0im\n       0.0+0.0im        5.55112e-17-0.5im             -0.378073+0.154037im              0.0-0.288675im             0.0+0.0im          -0.378073-0.154037im     -5.55112e-17+0.288675im             0.0+0.0im                0.0+0.5im                0.0+0.0im\n       0.0+0.612372im           0.0+0.0im          -5.55112e-17+0.0im           -1.2326e-32+2.77556e-17im          0.0+0.353553im           0.0+0.0im                   0.0+2.77556e-17im          0.0+0.353553im           0.0+0.0im                0.0+0.612372im\n       0.0+0.0im                0.0+0.353553im      5.55112e-17+6.93889e-17im           0.0-0.612372im             0.0+0.0im        5.55112e-17-1.38778e-16im           0.0+0.612372im             0.0+0.0im                0.0-0.353553im           0.0+0.0im\n       0.0-0.353553im    1.2326e-32+1.11022e-16im   5.55112e-17-2.77556e-17im  -2.46519e-32-2.77556e-17im          0.0+0.612372im  -1.11022e-16-2.77556e-17im   4.93038e-32-2.77556e-17im          0.0+0.612372im   -1.2326e-32+8.32667e-17im        0.0-0.353553im\n       0.0+0.0im           0.353553+0.0im                   0.0+0.0im              0.612372+0.0im                  0.0+0.0im                0.0+0.0im              0.612372+0.0im                  0.0+0.0im           0.353553+0.0im                0.0+0.0im\n -0.353553+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.612372+0.0im                0.0+0.0im                   0.0+0.0im             0.612372+0.0im                0.0+0.0im           0.353553+0.0im\n       0.0+0.0im               -0.5+7.02973e-17im     -0.154037-0.378073im         0.288675-1.95105e-16im          0.0+0.0im          -0.154037+0.378073im         0.288675+2.29062e-16im          0.0+0.0im               -0.5-7.48398e-17im        0.0+0.0im\n       0.0+0.0im          -0.353553+8.84171e-17im      0.217841+0.534676im         0.204124-1.1389e-16im   8.32667e-17+0.0im           0.217841-0.534676im         0.204124+2.4427e-16im   8.32667e-17+0.0im          -0.353553-8.31718e-17im        0.0+0.0im\n  0.612372+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.353553-0.0im                0.0+0.0im                   0.0+0.0im             0.353553+0.0im                0.0+0.0im          -0.612372-0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -1.6810327175633306e-17\n  3.469966302164114e-17\n  0.15915494309189535\n  0.1591549430918954\n  0.1591549430918954","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(BoseFS{4,5}(0, 0, 4, 0, 0); u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 1 0 0 3⟩\"\n fs\"|1 3 0 0 0⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843  0.0       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8        0.0       0.282843  0.565685  0.0       0.0       0.0       0.0\n  0.0       0.8       0.4       0.581966  0.4       0.0       0.4        0.282843  0.565685  0.0       0.69282   0.69282   0.0       0.0\n  0.0       0.4       0.8       0.4       2.81803   0.4       0.0        0.0       0.565685  0.282843  0.69282   0.0       0.69282   0.0\n  0.0       0.8       0.4       0.0       0.4       0.581966  0.4        0.282843  0.565685  0.0       0.0       0.0       0.69282   0.69282\n  0.0       0.4       0.8       0.4       0.0       0.4       2.81803    0.0       0.565685  0.282843  0.0       0.69282   0.0       0.69282\n  0.0       0.565685  0.0       0.282843  0.0       0.282843  0.0       -0.472136  0.8       0.0       0.489898  0.0       0.0       0.489898\n  0.0       0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n  0.0       0.0       0.565685  0.0       0.282843  0.0       0.282843   0.0       0.8       8.47214   0.0       0.489898  0.489898  0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.0       0.0        0.489898  0.489898  0.0       1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.69282    0.0       0.489898  0.489898  0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.69282   0.0        0.0       0.489898  0.489898  0.0       0.0       6.03607   0.0\n  0.0       0.0       0.0       0.0       0.0       0.69282   0.69282    0.489898  0.489898  0.0       0.0       0.0       0.0       1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.9798639983216155\n -3.363124291613371\n -0.7590191922770746\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781396\n  1.530592997097333\n  1.5835732611867464\n  3.072870330325867\n  3.125672653951849\n  4.862107221562182\n  6.26069485038059\n  6.402671211183119\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348     0.175378     0.0135766   -2.81719e-15  -0.0221221  -0.0697193   1.3739e-15    0.0314466   -2.35922e-16  -0.0360987   -0.0161557  -5.55112e-17   0.00625248  -0.0058099\n  0.177701     0.932229     0.105473     3.01009e-14   0.225254   -0.132826    9.71445e-17  -0.00292026  -2.09555e-15  -0.0861158   -0.0907789  -4.996e-16     0.0591715   -0.0264275\n  0.0768085   -0.0622307    0.0129069   -6.06251e-14  -0.447424   -0.63969     2.05322e-14   0.383444    -6.54338e-15  -0.431051    -0.181167   -6.10623e-16   0.0599783   -0.106852\n -0.0214153   -0.175119    -0.20169      0.616673      0.522017   -0.296818   -0.31234      -0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797    0.0693699     0.0495446   0.416847    0.33773       0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153   -0.175119    -0.20169     -0.616673      0.522017   -0.296818    0.31234      -0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797   -0.0693699     0.0495446   0.416847   -0.33773       0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.0138439   -0.165902     0.922758     1.00753e-14   0.1111     -0.172508   -1.30521e-14  -0.207974     2.66454e-15   0.0848902   -0.149153   -8.32667e-16   0.0712921   -0.0301968\n -0.00234782   0.00840544  -0.098969    -9.6867e-15   -0.0847116   0.082999    1.51129e-14   0.274424     3.60822e-15   0.575786    -0.61385    -2.72005e-15   0.353775    -0.259338\n -0.00237613   0.00294196   0.00143189   5.56152e-15   0.0427486   0.0110863  -3.72619e-15  -0.0663108    9.50628e-16   0.00167015   0.0832916   2.91434e-15  -0.448519    -0.8863\n  0.00363555   0.0455298   -0.133824    -0.332825     -0.290831   -0.057199   -0.527627     -0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478   0.0150664    0.0206752   -0.0642658    -0.0638689  -0.0250518   0.0999631    -0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499\n  0.00195478   0.0150664    0.0206752    0.0642658    -0.0638689  -0.0250518  -0.0999631    -0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555   0.0455298   -0.133824     0.332825     -0.290831   -0.057199    0.527627     -0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133606\n -0.7590191922770747","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321601\n -3.363124291613371\n -0.7590191922770853\n  0.13584182219621077\n  0.15789998694609508\n  0.876711441178136\n  1.530592997097317\n  1.5835732611867481\n  3.0728703303258706\n  3.1256726539518365\n  4.862107221562165\n  6.260694850380596\n  6.4026712111831126\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321621\n -3.3631242916133637\n -0.759019192277076\n  0.1578999869460802\n  0.8767114411781437\n  1.5835732611867417\n  3.125672653951844\n  4.862107221562179\n  6.402671211183117\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.0066861389450877905\n 0.033070399772041625\n 3.9204869225657406\n 0.03307039977204162\n 0.006686138945087839","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nDensityMatrixDiagonal\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html#Model-Hamiltonians","page":"Hamiltonians","title":"Model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardReal1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardReal1D2C","text":"BoseHubbardReal1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0)\n\nImplements a two-component one-dimensional Bose Hubbard chain in real space.\n\nhatH = hatH_a + hatH_b + Vsum_i n_a_in_b_i\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nua: the on-site interaction parameter parameter for Hamiltonian a.\nub: the on-site interaction parameter parameter for Hamiltonian b.\nta: the hopping strength for Hamiltonian a.\ntb: the hopping strength for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nSee also\n\nHubbardReal1D\nBoseHubbardMom1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) + v sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2t cos(k)\ncontinuum_dispersion: ϵ_k = tk^2\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardMom1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardMom1D2C","text":"BoseHubbardMom1D2C(add::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0, kwargs...)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with a two-component Bose gas.\n\nhatH = hatH_a + hatH_b + fracVMsum_kpqr b^_r a^_q b_p a_k δ_r+qp+k\n\nArguments\n\nadd: the starting address.\nua: the u parameter for Hamiltonian a.\nub: the u parameter for Hamiltonian b.\nta: the t parameter for Hamiltonian a.\ntb: the t parameter for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nFurther keyword arguments are passed on to the constructor of HubbardMom1D.\n\nSee also\n\nBoseFS2C\nBoseHubbardReal1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2t cos(k)\ncontinuum_dispersion: ϵ_k = tk^2\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions \n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl \n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x  so that single particle energies are \n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to  be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order  degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl \n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and  the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between  basis states of any noninteracting energy level, leading to many more offdiagonals and  fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger  restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator  basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The    allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults    to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make    the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the    interactions. The values are always scaled relative to the first dimension, which sets    the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed    to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are    ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without    comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building  a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions \n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that  conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots  are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x  so that single particle energies are \n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to  be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using  first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d) \n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator  basis functions, see four_oscillator_integral_general, with the additional restriction  that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults    to a 1D spectrum with number of levels matching modes of addr. Will be sorted to    make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets    the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed    to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are    ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function  potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi \n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots  are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x  so that single particle energies are \n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to  be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix  representation of this Hamiltonian for a single particle is completely dense in the even-parity  subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty    for a 1D trap or contain values greater than 1.0. The maximum index    in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,    including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if    only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of \nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other","page":"Hamiltonians","title":"Other","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of lomc!() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(k)\n\nDispersion relation for HubbardMom1D. Returns -2cos(k).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(k)\n\nDispersion relation for HubbardMom1D. Returns k^2.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(BoseFS{3,3}(1, 1, 1); u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(BoseFS{3,3}(1, 1, 1); u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(BoseFS{3,3}(0, 2, 1); u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Observables are AbstractHamiltonians that represent a physical observable. Their ground state expectation values can be sampled by passing them into AllOverlaps.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"ParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator([address]) <: AbstractHamiltonian\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. Passing an address is optional.\n\njulia> h = FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3); bsr = BasisSetRepresentation(h);\n\njulia> gs = DVec(zip(bsr.basis, eigen(Matrix(bsr)).vectors[:,1])); # ground state\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractHamiltonian{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int,c=:cross) <: AbstractHamiltonian{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d of a two component system in a momentum-space Fock-state basis. It returns a Complex value.\n\nCorrelation across two components:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s b^_p  b_q a_r δ_s+pq+r\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\nc: possible instructions: :cross: default instruction, computing correlation between particles across two components; :first: computing correlation between particles within the first component; :second: computing correlation between particles within the second component. These are the only defined instructions, using anything else will produce errors.\n\nTo use on a one-component system\n\nFor a system with only one component, e.g. with BoseFS, the second argument c is irrelevant and can be any of the above instructions, one could simply skip this argument and let it be the default value.\n\nSee also\n\nBoseHubbardMom1D2C\nBoseFS2C\nG2RealCorrelator\nG2RealSpace\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into lomc! with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractHamiltonian, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    hatC_textstring(d) = frac1M sum_j^M delta n_j (e^i pi sum_j leq k  j + d delta n_k) delta n_j+d\n\nHere, delta hatn_j = hatn_j - barn is the boson number deviation from the mean filling number and barn = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractHamiltonian, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator hatp.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(add => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(add => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(add => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Hamiltonians-interface","page":"Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. The most general form of a model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with lomc!). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallowed_address_type(h::AbstractHamiltonian): defaults to typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.starting_address","page":"Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, add, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address add and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallowed_address_type","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, add)\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address add of the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRep.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.allowed_address_type","page":"Hamiltonians","title":"Rimu.Interfaces.allowed_address_type","text":"allowed_address_type(h::AbstractHamiltonian)\n\nReturn the type of addresses that can be used with Hamiltonian h.\n\nPart of the AbstractHamiltonian interface.\n\nDefaults to typeof(starting_address(h)). Overload this function if the Hamiltonian can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"hamiltonians.html#Base.adjoint","page":"Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractHamiltonian)\n\nRepresent the adjoint of an AbstractHamiltonian. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.dot","page":"Hamiltonians","title":"LinearAlgebra.dot","text":"dot(map::OccupiedModeMap, vec::AbstractVector)\ndot(map1::OccupiedModeMap, map2::OccupiedModeMap)\n\nDot product extracting mode occupation numbers from an OccupiedModeMap similar to onr.\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> dot(mb, 1:7)\n27\n\njulia> mb⋅(1:7) == onr(b)⋅(1:7)\ntrue\n\nSee also SingleComponentFockAddress.\n\n\n\n\n\ndot(w, op::AbstractHamiltonian, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\ndot(y::PDVec, A::AbstractHamiltonian, x::PDVec[, w::PDWorkingMemory])\n\nPerform y ⋅ A ⋅ x. The working memory w is required to facilitate threaded/distributed operations with non-diagonal A. If needed and not passed a new instance will be allocated. A can be replaced with a tuple of operators.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractHamiltonian, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allowed_address_type.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here for HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Harmonic-Oscillator","page":"Hamiltonians","title":"Harmonic Oscillator","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim}; \n    target_energy = nothing, \n    max_energy = nothing, \n    max_blocks = nothing, \n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns \n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRep\nindices: tuple of mode indices that allow recreation of the generating address    addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when    the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating    tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved    after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.    Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds  addr are determined by parity. In this case the blocks are not generated; t_basis  will be zero, and block_size will be an estimate. Pass the seed addresses to  BasisSetRep with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis  indices n_xn_yldots. These indices are bounded by S which is a  tuple of the maximum number of states in each dimension. By default the  groundstate in each dimension is indexed by 0, but this can be changed  by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions, \n\n    mathcalI(ijkl) = int_-infty^infty dx  \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function,  and is non-zero unless i+j+k+l is odd. See e.g.  Titchmarsh (1948). This is a generalisation of the closed form in  Papenbrock (2002), which is is the special  case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin, \n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state  corresponds to a D-tuple of harmonic oscillator indices mathbfn_i.  S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of  phi_i(0) to speed-up the calculation. The values can be calculated with  log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D  harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"RMPI.html#Module-RMPI","page":"RMPI","title":"Module RMPI","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI","category":"page"},{"location":"RMPI.html#Rimu.RMPI","page":"RMPI","title":"Rimu.RMPI","text":"Module for providing MPI functionality for Rimu. This module is unexported. To use it, run\n\nusing Rimu.RMPI\n\n\n\n\n\n","category":"module"},{"location":"RMPI.html#MPIData","page":"RMPI","title":"MPIData","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIData","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIData","page":"RMPI","title":"Rimu.RMPI.MPIData","text":"MPIData(data; kwargs...)\n\nWrapper used for signaling that this data is part of a distributed data structure and communication should happen with MPI. MPIData can generally be used where an AbstractDVec would be used otherwise. Unlike AbstractDVecs, MPIData does not support indexing, or iteration over keys, values, and pairs.\n\nKeyword arguments:\n\nsetup = mpi_point_to_point - controls the communication stratgy\nmpi_one_sided uses one-sided communication with remote memory access (RMA), sets MPIOneSided strategy.\nmpi_point_to_point uses MPIPointToPoint strategy.\nmpi_all_to_all uses MPIAllToAll strategy.\nmpi_no_exchange sets MPINoWalkerExchange strategy. Experimental. Use with caution!\ncomm = mpi_comm()\nroot = mpi_root\nThe rest of the keyword arguments are passed to setup.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Setup-functions","page":"RMPI","title":"Setup functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"The following distribute strategies are available. The functions are unexported.","category":"page"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.mpi_point_to_point\nRimu.RMPI.mpi_one_sided\nRimu.RMPI.mpi_all_to_all\nRimu.RMPI.mpi_no_exchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_point_to_point","page":"RMPI","title":"Rimu.RMPI.mpi_point_to_point","text":"mpi_point_to_point(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to point-to-point.\n\nSets up the MPIData structure with MPIPointToPoint strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_one_sided","page":"RMPI","title":"Rimu.RMPI.mpi_one_sided","text":"mpi_one_sided(data, comm = mpi_comm(), root = mpi_root; capacity)\n\nDeclare data as mpi-distributed and set communication strategy to one-sided with remote memory access (RMA). capacity sets the capacity of the RMA windows.\n\nSets up the MPIData structure with MPIOneSided strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_all_to_all","page":"RMPI","title":"Rimu.RMPI.mpi_all_to_all","text":"mpi_all_to_all(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to all-to-all.\n\nSets up the MPIData structure with MPIAllToAll strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_no_exchange","page":"RMPI","title":"Rimu.RMPI.mpi_no_exchange","text":"mpi_no_exchange(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to MPINoWalkerExchange. Sets up the MPIData structure with MPINoWalkerExchange strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Strategies","page":"RMPI","title":"Strategies","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIPointToPoint\nRimu.RMPI.MPIOneSided\nRimu.RMPI.MPIAllToAll\nRimu.RMPI.MPINoWalkerExchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIPointToPoint","page":"RMPI","title":"Rimu.RMPI.MPIPointToPoint","text":"MPIPointToPoint{N,A}\n\nPoint-to-point communication strategy. Uses circular communication using MPI.Send and MPI.Recv!.\n\nConstructor\n\nMPIPointToPoint(::Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIOneSided","page":"RMPI","title":"Rimu.RMPI.MPIOneSided","text":"MPIOneSided(nprocs, myrank, comm, ::Type{T}, capacity)\n\nCommunication buffer for use with MPI one-sided communication (remote memory access). Up to capacity elements of type T can be exchanged between MPI ranks via put. It is important that isbitstype(T) == true. Objects of type MPIOneSided have to be freed manually with a (blocking) call to free().\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIAllToAll","page":"RMPI","title":"Rimu.RMPI.MPIAllToAll","text":" MPIAllToAll\n\nAll-to-all communication strategy. The communication works in two steps: first MPI.Alltoall! is used to communicate the number of walkers each rank wants to send to other ranks, then MPI.Alltoallv! is used to send the walkers around.\n\nConstructor\n\nMPIAllToAll(Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPINoWalkerExchange","page":"RMPI","title":"Rimu.RMPI.MPINoWalkerExchange","text":"MPINoWalkerExchange(nprocs, my_rank, comm)\n\nStrategy for not exchanging walkers between ranks. Consequently there will be no cross-rank annihilations.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#MPI-convenience-functions","page":"RMPI","title":"MPI convenience functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Modules = [Rimu.RMPI]\nPages = [\"helpers.jl\"]\nPrivate = true\nPublic = true","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_root","page":"RMPI","title":"Rimu.RMPI.mpi_root","text":"Default MPI root for RMPI.\n\n\n\n\n\n","category":"constant"},{"location":"RMPI.html#Rimu.DictVectors.mpi_comm-Tuple{}","page":"RMPI","title":"Rimu.DictVectors.mpi_comm","text":"Default MPI communicator for RMPI.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.DictVectors.mpi_rank","page":"RMPI","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.DictVectors.mpi_size","page":"RMPI","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.is_mpi_root","page":"RMPI","title":"Rimu.RMPI.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_allprintln-Tuple","page":"RMPI","title":"Rimu.RMPI.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_barrier","page":"RMPI","title":"Rimu.RMPI.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_combine_walkers!-Tuple{Rimu.RMPI.MPIData, AbstractDVec}","page":"RMPI","title":"Rimu.RMPI.mpi_combine_walkers!","text":"mpi_combine_walkers!(target, source, [strategy])\n\nDistribute the entries of source to the target data structure such that all entries in the target are on the process with the correct mpi rank as controlled by targetrank(). MPI syncronizing.\n\nNote: the storage of the source is communicated rather than the source itself.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_seed!","page":"RMPI","title":"Rimu.RMPI.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.next_mpiID","page":"RMPI","title":"Rimu.RMPI.next_mpiID","text":"next_mpiID()\n\nProduce a new ID number for MPI distributed objects. Uses an internal counter.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.targetrank-Tuple{Union{Integer, AbstractFockAddress}, Any}","page":"RMPI","title":"Rimu.RMPI.targetrank","text":"targetrank(key, np)\n\nCompute the rank where the key belongs.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.@mpi_root-Tuple","page":"RMPI","title":"Rimu.RMPI.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"RMPI.html#Index","page":"RMPI","title":"Index","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Pages   = [\"RMPI.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nnnzs = 0: The number of non-zero elements in the basis set representation. Setting a   non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^6, nnzs, cutoff, filter, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(BoseFS{1,3}(1, 0, 0); u=1.0, t=1.0)) with dimension 3 and 9 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int64} with 9 stored entries:\n  0.0  -1.0  -1.0\n -1.0   0.0  -1.0\n -1.0  -1.0   0.0\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(BoseFS{1,3}(1, 0, 0); u=1.0, t=1.0)) with dimension 2 and 4 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int64} with 4 stored entries:\n  0.0  -1.0\n -1.0   0.0\n\njulia> using LinearAlgebra; eigvals(Matrix(bsr)) # eigenvalues\n3-element Vector{Float64}:\n -1.9999999999999996\n  0.9999999999999997\n  1.0000000000000002\n\njulia> ev = eigvecs(Matrix(bsr))[:,1] # ground state eigenvector\n3-element Vector{Float64}:\n -0.5773502691896257\n -0.5773502691896255\n -0.5773502691896257\n\njulia> DVec(zip(bsr.basis,ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => -0.57735\n  fs\"|0 1 0⟩\" => -0.57735\n  fs\"|1 0 0⟩\" => -0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. A maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nSetting sort to true will sort the basis. Any additional keyword arguments are passed on to Base.sort!.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"randomnumbers.html#Random-numbers-in-Rimu","page":"Random numbers","title":"Random numbers in Rimu","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"Rimu uses Julia's built-in random number generator, which currently defaults to Xoshiro256++.","category":"page"},{"location":"randomnumbers.html#Reproducibility","page":"Random numbers","title":"Reproducibility","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"If you want FCIQMC runs to be reproducible, make sure to seed the RNG with Random.seed!.","category":"page"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"MPI-distributed runs can also be made reproducible by seeding the RNG with Rimu.RMPI.mpi_seed!.","category":"page"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://joachimbrand.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for  parsing by Literate. The process of generating  documentation is automated in the docs/make.jl file and assumes that the following line is  at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example, ","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, product = hopnextneighbour(add, chosen)\n\nCompute the new address of a hopping event for the Bose-Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\nBoundary conditions are periodic.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS2C","text":"BoseFS2C{NA,NB,M,AA,AB} <: AbstractFockAddress\nBoseFS2C(onr_a, onr_b)\n\nAddress type that constructed with two BoseFS{N,M,S}. It represents a Fock state with two components, e.g. two different species of bosons with particle number NA from species S and particle number NB from species B. The number of modes M is expected to be the same for both components.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, Tuple{Vararg{Int64, var\"#s61\"}} where var\"#s61\", Tuple{Vararg{Int64, var\"#s5\"}} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.12.0. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(num_replicas=2; operator=nothing, transform=nothing, vecnorm=true) <: ReplicaStrategy{num_replicas}\n\nRun num_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee lomc!, ReplicaStrategy and AbstractHamiltonian (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to lomc! then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep dτ constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; targetwalkers = 1_000_000) <: ShiftStrategy\n\nDon't update the shift.  Return when targetwalkers is reached.\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in lomc! is advised as the default may not be appropriate.\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; targetwalkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; targetwalkers = 1000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(targetwalkers, ζ = 0.08, ξ = 0.0016) <: ShiftStrategy\n\nStrategy for updating the shift: After targetwalkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, dτ) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt{S} <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(targetwalkers, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After targetwalkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nThis will work with MPIData.\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to lomc!. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntargetwalkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; targetwalkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 10)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; targetwalkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, seeTimeStepStrategy`.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * targetwalkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates.\n\nIndexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nSee also ReplicaStrategy, SpectralState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to lomc! and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_reporting_strategy\nreport!\nreport_after_step!\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to lomc!.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in lomc!()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, walltime = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the walltime is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with advance!.\n\nSee also SpectralState, SpectralStrategy, ReplicaState, ReplicaStrategy, replica_stats, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several SingleStates representing the ground state and excited states of a single replica.\n\nIndexing the SpectralState state[i] returns the ith SingleState.\n\nSee also SpectralStrategy, ReplicaState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_dτ(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, shift_strategy)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Tuple, Tuple{Vararg{AbstractDVec, N}}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators. This function is overloaded for MPIData. The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main lomc! loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in lomc! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> add = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(add);\n\njulia> df1, state = lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 10)\n\njulia> size(df2)\n(200, 10)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(BoseFS{6,3}(1, 2, 3); u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.targetwalkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from lomc!, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before lomc! exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{R}, Tuple{S}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{S, R}, Any, Any}} where {S, R}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 1.6, 1.6, 0.4, 0.4)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an AbstractMatrix of configuration vectors from the state. The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also SingleState, ReplicaState, SpectralState, PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_dτ-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_dτ","text":"update_dτ(s<:TimeStepStrategy, dτ, tnorm) -> new dτ\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#RMPI","page":"API","title":"RMPI","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module RMPI","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by lomc! when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of lomc!, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with lomc!, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by lomc!.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with mpirun julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu and Rimu.RMPI, which contains MPI-related functionality.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu\nusing Rimu.RMPI","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0); u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Next, we construct the starting vector. We use a PDVec, which is automatically MPI-distributed if MPI is available. We set the vector's stochastic style to IsDynamicSemistochastic, which improves statistics and reduces the sign problem.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails. Setting save_if=is_mpi_root() will ensure only the root MPI rank will write to the file. The chunk_size parameter determines how often the data is saved to the file. Progress messages are suppressed with io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    save_if=is_mpi_root(),\n    reporting_interval=1,\n    chunk_size=1000,\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10_000 walkers. We will also compute the projected energy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"s_strat = DoubleLogUpdate(targetwalkers=10_000)\npost_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ProjectedEnergy{HubbardMom1D{Float64, 10, BoseFS{10, 10, BitString{19, 1, UInt32}}, 6.0, 1.0}, Rimu.DictVectors.FrozenPDVec{BoseFS{10, 10, BitString{19, 1, UInt32}}, Float64, 1}, Rimu.DictVectors.FrozenPDVec{BoseFS{10, 10, BitString{19, 1, UInt32}}, Float64, 1}}(:vproj, :hproj, HubbardMom1D(BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0); u=6.0, t=1.0), Rimu.DictVectors.FrozenPDVec{BoseFS{10, 10, BitString{19, 1, UInt32}}, Float64, 1}(([BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0) => 1.0],)), Rimu.DictVectors.FrozenPDVec{BoseFS{10, 10, BitString{19, 1, UInt32}}, Float64, 1}(([BoseFS{10,10}(1, 0, 0, 0, 8, 0, 0, 0, 1, 0) => 5.692099788303083, BoseFS{10,10}(0, 0, 0, 0, 8, 0, 0, 0, 0, 2) => 4.024922359499621, BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0) => 7.0, BoseFS{10,10}(0, 0, 1, 0, 8, 0, 1, 0, 0, 0) => 5.692099788303083, BoseFS{10,10}(0, 0, 0, 1, 8, 1, 0, 0, 0, 0) => 5.692099788303083, BoseFS{10,10}(0, 1, 0, 0, 8, 0, 0, 1, 0, 0) => 5.692099788303083],)))","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"lomc!(H, initial_vector; reporting_strategy, s_strat, post_step_strategy, dτ=1e-4, laststep=10_000);\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. lomc!.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main lomc!() computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI for use in lomc!() is enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary. Additional MPI-related functionality is provided by the module RMPI.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with lomc! and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with lomc! and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and PointToPoint when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> map!(x -> -x, values(pv)); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\nIf dv is an MPIData, synchronize its contents among the ranks first.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(md::MPIData)\n\nCompute the walkernumber of the distributed data on every MPI rank with MPI.Allreduce. MPI syncronizing.\n\n\n\n\n\nwalkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.dot_from_right","page":"Dict vectors","title":"Rimu.DictVectors.dot_from_right","text":"dot_from_right(w, op::AbstractHamiltonian, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in lomc!.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in lomc!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in lomc!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in lomc!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in lomc!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.MainSegmentIterator","page":"Dict vectors","title":"Rimu.DictVectors.MainSegmentIterator","text":"MainSegmentIterator{W,D} <: AbstractVector{D}\n\nIterates the main segments of a specified rank. See remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured in a series of columns, where each has a number of segments (see PDVec) equal to the number of segments across all MPI ranks. The purpose of this organisation is to allow spawning in parallel without using locks or atomic operations.\n\nThe steps performed on a PDWorkingMemory during a typical operation are perform_spawns!, collect_local!, synchronize_remote!, and move_and_compress!.\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports deposit! and StochasticStyle and acts as a target for spawning.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nCollect each row in w into its main segment. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the main segments on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.main_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.main_column","text":"main_column(::PDWorkingMemory) -> PDVec\n\nReturn the \"main\" column of the working memory wrapped in a PDVec.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local rank.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all ranks.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, t::PDVec, ham, boost)\n\nPerform spawns from t through ham to w.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the main segments that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!(w::PDWorkingMemory)\n\nSynchronize non-local segments across MPI. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, two implementations are provided, NotDistributed, and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint <: Communicator\n\nCommunicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer\n\nMultiple vectors stored in a simple buffer with MPI communication.\n\nSee replace_collections!, mpi_send, mpi_recv_any!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_comm","page":"Dict vectors","title":"Rimu.DictVectors.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_rank","page":"Dict vectors","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm)\n\nSend the buffers to dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_size","page":"Dict vectors","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into buffers.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] ::PDWorkingMemory)\n\nCopy pairs from remote ranks to the local part of the PDWorkingMemory.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored.\n\nIf the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"}]
}
