var documenterSearchIndex = {"docs":
[{"location":"mpi.html#Working-with-MPI","page":"Using MPI","title":"Working with MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If you are using PDVecs to store your vectors, working with MPI should be fairly straightforward. Generally, PDVec will work with MPI automatically, as long as MPI is set up correctly and a few common pitfalls are avoided.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Rimu includes an unexported module RMPI, which must be imported to access additional MPI-related functionality.","category":"page"},{"location":"mpi.html#Configuring-MPI","page":"Using MPI","title":"Configuring MPI","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When running on a cluster, ensure that MPI.jl is using the system binary. See the MPI.jl documentation for more information.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"It is always a good idea to start your script with a quick test that ensures the MPI is set up correctly. One way to do this is to open with","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"using Rimu.RMPI\nmpi_allprintln(\"hello\")","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"which should print something like","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"[ rank 0: hello\n[ rank 1: hello\n[ rank 2: hello\n[ rank 3: hello","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"If it prints rank 0 several times, the code will run, but ranks will not communicate.","category":"page"},{"location":"mpi.html#Using-Slurm","page":"Using MPI","title":"Using Slurm","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using PDVec, the recommended setup is to use threads to parallelise the computation within a node, and to only use MPI for inter-node communication. In a slurm script, this is done as follows:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"...\n#SBATCH --ntasks-per-node=1\n#SBATCH --nodes=4            # replace 4 with the desired number of nodes\n#SBATCH --cpus-per-task=28   # replace 28 with the number of cores available in a node\n#SBATCH --hint=nomultithread # don't use hyperthreading\n...\n\nsrun julia --project -tauto script.jl","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"On some clusters, additional settings must be used with srun, for example the CTCP cluster requires the following.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"srun mpi=pmi2 julia --project -tauto script.jl","category":"page"},{"location":"mpi.html#Common-pitfalls-with-reducing-functions","page":"Using MPI","title":"Common pitfalls with reducing functions","text":"","category":"section"},{"location":"mpi.html#Using-@mpi_root","page":"Using MPI","title":"Using @mpi_root","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Take care to not use reducing functions (such as length, sum, norm, ...) inside @mpi_root blocks. Doing so will only initiate the distributed reduction on one rank only, which will cause the code to go out of sync and freeze. As an example, to report the current length of a vector, calculate the length before the @mpi_root block:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\n@mpi_root println(\"vector length is $len\")","category":"page"},{"location":"mpi.html#Threaded-operations-and-reductions","page":"Using MPI","title":"Threaded operations and reductions","text":"","category":"section"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"When using functions that take anonymous functions, such as map(!), sum, or mapreduce, it is important that the anonymous functions passed to them do not perform any MPI-reducing operations (length, norm, sum, etc.). These anonymous functions are executed on multiple threads and initiating MPI communication from multiple threads may cause issues.","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"As an example, suppose we want to scale a vector by its length by using map!. The correct way to write this code is as","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"len = length(pdvec)\nmap!(values(pdvec)) do x\n\tx / len\nend","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"Similar to the previous example, len is calculated first and not within the body of map!. In this specific case, an even better option is to use the scale! function from VectorInterface.jl:","category":"page"},{"location":"mpi.html","page":"Using MPI","title":"Using MPI","text":"scale!(pdvec, 1 / length(pdvec))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"EditURL = \"../../../scripts/G2-example.jl\"","category":"page"},{"location":"generated/G2-example.html#Example-3:-Calculating-observables","page":"Calculating observables","title":"Example 3: Calculating observables","text":"","category":"section"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is an example calculation of the two-body correlation function G_2.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"A runnable script for this example is located here. Run it with julia G2-example.jl.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"First, we load the reqired packages. Rimu for FCIQMC calculation, and DataFrames for maniplating the output.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"using Rimu\nusing Random\nusing DataFrames","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the same Hamiltonian as the first example, a Bose-Hubbard model with 6 particles in 6 sites, with strong interactions (we expect a Mott insulating state).","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"m = n = 6\ninitial_address = near_uniform(BoseFS{n,m})\nH = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"HubbardReal1D(BoseFS{6,6}(1, 1, 1, 1, 1, 1); u=6.0, t=1.0)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we define the operators for the observables we wish to calculate.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"dvals = 0:m-1\nG2list = ((G2RealCorrelator(d) for d in dvals)...,)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"(G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This is a tuple of G2RealCorrelators, subtypes of AbstractHamiltonian. It calculates the density-density correlation function on a lattice","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"with normalisation","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Observables that are defined by expectation values are calculated using the \"replica trick\". Thereby several independent copies or \"replicas\" of the state vector are propagated simultaneously. The reason is to have two (or more) stochastically independent copies of the state vector available such that we can calculate bias-free overlaps. We enable this by defining a ReplicaStrategy. Each replica has its own state and FCIQMC is effectively performed independently on each one.  For calculating observables, we use AllOverlaps for the ReplicaStrategy. At each timestep, after the FCIQMC step is performed on, this strategy calculates the overlaps of every operator with the wavefunctions from each pair of replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"To obtain an unbiased result, at least two replicas should be used. One can also use more than two to improve the statistics. This is particularly helpful when the walker number is low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"num_replicas = 3\nreplica_strategy = AllOverlaps(num_replicas; operator = G2list)","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"AllOverlaps{3, 6, Tuple{G2RealCorrelator{0}, G2RealCorrelator{1}, G2RealCorrelator{2}, G2RealCorrelator{3}, G2RealCorrelator{4}, G2RealCorrelator{5}}, true}((G2RealCorrelator(0), G2RealCorrelator(1), G2RealCorrelator(2), G2RealCorrelator(3), G2RealCorrelator(4), G2RealCorrelator(5)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Other FCIQMC parameters and strategies can be set in the same way as before.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"steps_equilibrate = 1_000\nsteps_measure = 5_000\ntargetwalkers = 100;\ndτ = 0.001\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we run FCIQMC. Note that passing an initial vector is optional - if we only pass the style, a vector with the appropriate style is created automatically.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"df, state = lomc!(\n    H; style=IsDynamicSemistochastic(),\n    dτ,\n    laststep = steps_equilibrate + steps_measure,\n    targetwalkers,\n    replica_strategy,\n);","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The output DataFrame has FCIQMC statistics for each replica (e.g. shift, norm),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(startswith(\"shift_\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"shift_1\", \"shift_2\", \"shift_3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"as well as vector-vector overlaps (e.g. c1_dot_c2),","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"dot\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_dot_c2\", \"c1_dot_c3\", \"c2_dot_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"and operator overlaps (e.g. c1_Op1_c2) between the replicas.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(filter(contains(\"Op\"), names(df)))","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"[\"c1_Op1_c2\", \"c1_Op2_c2\", \"c1_Op3_c2\", \"c1_Op4_c2\", \"c1_Op5_c2\", \"c1_Op6_c2\", \"c1_Op1_c3\", \"c1_Op2_c3\", \"c1_Op3_c3\", \"c1_Op4_c3\", \"c1_Op5_c3\", \"c1_Op6_c3\", \"c2_Op1_c3\", \"c2_Op2_c3\", \"c2_Op3_c3\", \"c2_Op4_c3\", \"c2_Op5_c3\", \"c2_Op6_c3\"]\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The vector-vector and operator overlaps go into calculating the Rayleigh quotient for an observable","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"    langle hatG^(2)(d) rangle = fracsum_ab mathbfc_a^dagger cdot hatG^(2)(d) cdot mathbfc_bsum_ab mathbfc_a^dagger cdot mathbfc_b ","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"The sum over all replica pairs (a,b), especially in the denominator, helps to avoid errors from poor sampling if the number of walkers is too low.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"We use the function rayleigh_replica_estimator to calculate the Rayleigh quotient using all replicas in df, returning a RatioBlockingResult. Using the keyword skip will ignore the initial equilibration steps.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Now, we can calculate the correlation function for each value of d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Two-body correlator from $num_replicas replicas:\")\nfor d in dvals\n    r = rayleigh_replica_estimator(df; op_name = \"Op$(d+1)\", skip=steps_equilibrate)\n    println(\"   G2($d) = $(r.f) ± $(r.σ_f)\")\nend","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Two-body correlator from 3 replicas:\n   G2(0) = 0.210397630724869 ± 0.002945411560125692\n   G2(1) = 0.9179375998196901 ± 0.0014487882545570095\n   G2(2) = 0.9824618365485462 ± 0.0008078855891765099\n   G2(3) = 0.9888034965386578 ± 0.0012000192916385307\n   G2(4) = 0.9824618365485462 ± 0.0008078855891765099\n   G2(5) = 0.9179375998196901 ± 0.0014487882545570095\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"As expected, the onsite correlation at d=0 is low since this is a Mott insulating state with unit filling fraction, and is close to 10 for all other values of the displacement d.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Since we ran multiple independent replicas, we also have multiple estimates of the shift energy.","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"println(\"Shift energy from $num_replicas replicas:\")\nfor i in 1:num_replicas\n    se = shift_estimator(df; shift=\"shift_$i\", skip=steps_equilibrate)\n    println(\"   Replica $i: $(se.mean) ± $(se.err)\")\nend\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"Shift energy from 3 replicas:\n   Replica 1: -3.982824328882403 ± 0.13748856752861724\n   Replica 2: -3.974753826250174 ± 0.12466355058904417\n   Replica 3: -4.011054302602586 ± 0.12438161612595747\n","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"","category":"page"},{"location":"generated/G2-example.html","page":"Calculating observables","title":"Calculating observables","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"EditURL = \"../../../scripts/BHM-example.jl\"","category":"page"},{"location":"generated/BHM-example.html#Example-1:-1D-Bose-Hubbard-Model","page":"1D Bose-Hubbard Model","title":"Example 1: 1D Bose-Hubbard Model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is an example calculation finding the ground state of a 1D Bose-Hubbard chain with 6 particles in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"A runnable script for this example is located here. Run it with julia BHM-example.jl.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"First, we load Rimu and Plots.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"using Rimu\nusing Plots","category":"page"},{"location":"generated/BHM-example.html#Setting-up-the-model","page":"1D Bose-Hubbard Model","title":"Setting up the model","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We start by defining the physical problem. First, we generate an initial configuration which will be used as a starting point of our computation. In this example, we use a bosonic Fock state with 6 particles evenly distributed in 6 lattice sites.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_address = near_uniform(BoseFS{6,6})","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BoseFS{6,6}(1, 1, 1, 1, 1, 1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The Hamiltonian is constructed by initializing a struct with an initial address and model parameters. Here, we use the Bose Hubbard model in one-dimensional real space.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"H = HubbardReal1D(initial_address; u = 6.0, t = 1.0)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"HubbardReal1D(BoseFS{6,6}(1, 1, 1, 1, 1, 1); u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example.html#Parameters-of-the-calculation","page":"1D Bose-Hubbard Model","title":"Parameters of the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's setup the Monte Carlo calculation. We need to decide the number of walkers to use in this Monte Carlo run, which is equivalent to the average one-norm of the coefficient vector. Higher values will result in better statistics, but require more memory and computing power.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"targetwalkers = 1_000;","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"FCIQMC takes a certain number of steps to equllibrate, after which the observables will fluctuate around a mean value. In this example, we will devote 1000 steps to equilibration and take an additional 2000 steps for measurement.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"steps_equilibrate = 1_000;\nsteps_measure = 2_000;\nlast_step = steps_equilibrate + steps_measure","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"3000","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Next, we pick a time step size. FCIQMC does not have a time step error, but the time step needs to be small enough, or the computation might diverge. If the time step is too small, however, the computation might take a long time to equilibrate. The appropriate time step size is problem-dependent and is best determined through experimentation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"time_step = 0.001;","category":"page"},{"location":"generated/BHM-example.html#Defining-an-observable","page":"1D Bose-Hubbard Model","title":"Defining an observable","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's set up an observable to measure. Here we will measure the projected energy. In additon to the shift, the projected energy is a second estimator for the energy. It usually produces better statistics than the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We first need to define a projector. Here, we use the function default_starting_vector to generate a vector with only a single occupied configuration. We will use the same vector as the starting vector for the FCIQMC calculation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"initial_vector = default_starting_vector(initial_address; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"DVec{BoseFS{6, 6, BitString{11, 1, UInt16}},Float64} with 1 entry, style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|1 1 1 1 1 1⟩\" => 10.0","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The choice of the style argument already determines the FCIQMC algorithm to use. IsDynamicSemistochastic is usually the best choice as it reduces noise and improves the sign problem.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Observables that can be calculated by projection of the fluctuating quantum state onto a constant vector are passed into the ProjectorMonteCarloProblem with the post_step_strategy keyword argument.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"post_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"ProjectedEnergy{HubbardReal1D{Float64, BoseFS{6, 6, BitString{11, 1, UInt16}}, 6.0, 1.0}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}, Rimu.DictVectors.FrozenDVec{BoseFS{6, 6, BitString{11, 1, UInt16}}, Float64}}(:vproj, :hproj, HubbardReal1D(BoseFS{6,6}(1, 1, 1, 1, 1, 1); u=6.0, t=1.0), Rimu.FrozenDVec([fs\"|1 1 1 1 1 1⟩\"=>10.0]), Rimu.FrozenDVec([fs\"|1 1 1 1 2 0⟩\"=>-14.1421, fs\"|0 2 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 1 0 2⟩\"=>-14.1421, fs\"|1 2 0 1 1 1⟩\"=>-14.1421, fs\"|2 0 1 1 1 1⟩\"=>-14.1421, fs\"|1 1 1 2 0 1⟩\"=>-14.1421, fs\"|1 1 2 0 1 1⟩\"=>-14.1421, fs\"|1 1 0 2 1 1⟩\"=>-14.1421, fs\"|1 1 1 0 2 1⟩\"=>-14.1421, fs\"|1 0 2 1 1 1⟩\"=>-14.1421, fs\"|2 1 1 1 1 0⟩\"=>-14.1421, fs\"|0 1 1 1 1 2⟩\"=>-14.1421]))","category":"page"},{"location":"generated/BHM-example.html#Running-the-calculation","page":"1D Bose-Hubbard Model","title":"Running the calculation","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This is a two-step process: First we define a ProjectorMonteCarloProblem with all the parameters needed for the simulation","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"problem = ProjectorMonteCarloProblem(\n    H;\n    start_at = initial_vector,\n    last_step,\n    time_step,\n    targetwalkers,\n    post_step_strategy\n);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"To run the simulation we simply call solve on the problem","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"simulation = solve(problem);","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The simulation object contains the results of the simulation as well as state vectors and strategies. We can extract the time series data for further analysis:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"df = DataFrame(simulation);","category":"page"},{"location":"generated/BHM-example.html#Analysing-the-results","page":"1D Bose-Hubbard Model","title":"Analysing the results","text":"","category":"section"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We can plot the norm of the coefficient vector as a function of the number of steps.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"hline(\n    [targetwalkers];\n    label=\"targetwalkers\", xlabel=\"steps\", ylabel=\"norm\",\n    color=2, linestyle=:dash, margin = 1Plots.cm\n)\nplot!(df.steps, df.norm, label=\"norm\", color=1)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip660\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip660)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip661\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip660)\" d=\"M404.284 1281.45 L2211.02 1281.45 L2211.02 188.976 L404.284 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip662\">\n    <rect x=\"404\" y=\"188\" width=\"1808\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip662)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"454.849,1281.45 454.849,188.976 \"/>\n<polyline clip-path=\"url(#clip662)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1023.2,1281.45 1023.2,188.976 \"/>\n<polyline clip-path=\"url(#clip662)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1591.54,1281.45 1591.54,188.976 \"/>\n<polyline clip-path=\"url(#clip662)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2159.89,1281.45 2159.89,188.976 \"/>\n<polyline clip-path=\"url(#clip660)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip660)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"454.849,1281.45 454.849,1262.55 \"/>\n<polyline clip-path=\"url(#clip660)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1023.2,1281.45 1023.2,1262.55 \"/>\n<polyline clip-path=\"url(#clip660)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1591.54,1281.45 1591.54,1262.55 \"/>\n<polyline clip-path=\"url(#clip660)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2159.89,1281.45 2159.89,1262.55 \"/>\n<path clip-path=\"url(#clip660)\" d=\"M454.849 1312.37 Q451.238 1312.37 449.41 1315.93 Q447.604 1319.47 447.604 1326.6 Q447.604 1333.71 449.41 1337.27 Q451.238 1340.82 454.849 1340.82 Q458.484 1340.82 460.289 1337.27 Q462.118 1333.71 462.118 1326.6 Q462.118 1319.47 460.289 1315.93 Q458.484 1312.37 454.849 1312.37 M454.849 1308.66 Q460.659 1308.66 463.715 1313.27 Q466.794 1317.85 466.794 1326.6 Q466.794 1335.33 463.715 1339.94 Q460.659 1344.52 454.849 1344.52 Q449.039 1344.52 445.96 1339.94 Q442.905 1335.33 442.905 1326.6 Q442.905 1317.85 445.96 1313.27 Q449.039 1308.66 454.849 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip660)\" d=\"M967.722 1339.91 L975.361 1339.91 L975.361 1313.55 L967.05 1315.21 L967.05 1310.95 L975.314 1309.29 L979.99 1309.29 L979.99 1339.91 L987.629 1339.91 L987.629 1343.85 L967.722 1343.85 L967.722 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip660)\" d=\"M1007.07 1312.37 Q1003.46 1312.37 1001.63 1315.93 Q999.828 1319.47 999.828 1326.6 Q999.828 1333.71 1001.63 1337.27 Q1003.46 1340.82 1007.07 1340.82 Q1010.71 1340.82 1012.51 1337.27 Q1014.34 1333.71 1014.34 1326.6 Q1014.34 1319.47 1012.51 1315.93 Q1010.71 1312.37 1007.07 1312.37 M1007.07 1308.66 Q1012.88 1308.66 1015.94 1313.27 Q1019.02 1317.85 1019.02 1326.6 Q1019.02 1335.33 1015.94 1339.94 Q1012.88 1344.52 1007.07 1344.52 Q1001.26 1344.52 998.185 1339.94 Q995.129 1335.33 995.129 1326.6 Q995.129 1317.85 998.185 1313.27 Q1001.26 1308.66 1007.07 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip660)\" d=\"M1037.24 1312.37 Q1033.62 1312.37 1031.8 1315.93 Q1029.99 1319.47 1029.99 1326.6 Q1029.99 1333.71 1031.8 1337.27 Q1033.62 1340.82 1037.24 1340.82 Q1040.87 1340.82 1042.68 1337.27 Q1044.5 1333.71 1044.5 1326.6 Q1044.5 1319.47 1042.68 1315.93 Q1040.87 1312.37 1037.24 1312.37 M1037.24 1308.66 Q1043.05 1308.66 1046.1 1313.27 Q1049.18 1317.85 1049.18 1326.6 Q1049.18 1335.33 1046.1 1339.94 Q1043.05 1344.52 1037.24 1344.52 Q1031.43 1344.52 1028.35 1339.94 Q1025.29 1335.33 1025.29 1326.6 Q1025.29 1317.85 1028.35 1313.27 Q1031.43 1308.66 1037.24 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip660)\" d=\"M1067.4 1312.37 Q1063.79 1312.37 1061.96 1315.93 Q1060.15 1319.47 1060.15 1326.6 Q1060.15 1333.71 1061.96 1337.27 Q1063.79 1340.82 1067.4 1340.82 Q1071.03 1340.82 1072.84 1337.27 Q1074.67 1333.71 1074.67 1326.6 Q1074.67 1319.47 1072.84 1315.93 Q1071.03 1312.37 1067.4 1312.37 M1067.4 1308.66 Q1073.21 1308.66 1076.26 1313.27 Q1079.34 1317.85 1079.34 1326.6 Q1079.34 1335.33 1076.26 1339.94 Q1073.21 1344.52 1067.4 1344.52 Q1061.59 1344.52 1058.51 1339.94 Q1055.45 1335.33 1055.45 1326.6 Q1055.45 1317.85 1058.51 1313.27 Q1061.59 1308.66 1067.4 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip660)\" d=\"M1540.15 1339.91 L1556.47 1339.91 L1556.47 1343.85 L1534.53 1343.85 L1534.53 1339.91 Q1537.19 1337.16 1541.77 1332.53 Q1546.38 1327.88 1547.56 1326.53 Q1549.81 1324.01 1550.69 1322.27 Q1551.59 1320.51 1551.59 1318.82 Q1551.59 1316.07 1549.64 1314.33 Q1547.72 1312.6 1544.62 1312.6 Q1542.42 1312.6 1539.97 1313.36 Q1537.54 1314.13 1534.76 1315.68 L1534.76 1310.95 Q1537.58 1309.82 1540.04 1309.24 Q1542.49 1308.66 1544.53 1308.66 Q1549.9 1308.66 1553.09 1311.35 Q1556.29 1314.03 1556.29 1318.52 Q1556.29 1320.65 1555.48 1322.57 Q1554.69 1324.47 1552.58 1327.07 Q1552.01 1327.74 1548.9 1330.95 Q1545.8 1334.15 1540.15 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip660)\" d=\"M1576.29 1312.37 Q1572.68 1312.37 1570.85 1315.93 Q1569.04 1319.47 1569.04 1326.6 Q1569.04 1333.71 1570.85 1337.27 Q1572.68 1340.82 1576.29 1340.82 Q1579.92 1340.82 1581.73 1337.27 Q1583.56 1333.71 1583.56 1326.6 Q1583.56 1319.47 1581.73 1315.93 Q1579.92 1312.37 1576.29 1312.37 M1576.29 1308.66 Q1582.1 1308.66 1585.15 1313.27 Q1588.23 1317.85 1588.23 1326.6 Q1588.23 1335.33 1585.15 1339.94 Q1582.1 1344.52 1576.29 1344.52 Q1570.48 1344.52 1567.4 1339.94 Q1564.34 1335.33 1564.34 1326.6 Q1564.34 1317.85 1567.4 1313.27 Q1570.48 1308.66 1576.29 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip660)\" d=\"M1606.45 1312.37 Q1602.84 1312.37 1601.01 1315.93 Q1599.2 1319.47 1599.2 1326.6 Q1599.2 1333.71 1601.01 1337.27 Q1602.84 1340.82 1606.45 1340.82 Q1610.08 1340.82 1611.89 1337.27 Q1613.72 1333.71 1613.72 1326.6 Q1613.72 1319.47 1611.89 1315.93 Q1610.08 1312.37 1606.45 1312.37 M1606.45 1308.66 Q1612.26 1308.66 1615.32 1313.27 Q1618.39 1317.85 1618.39 1326.6 Q1618.39 1335.33 1615.32 1339.94 Q1612.26 1344.52 1606.45 1344.52 Q1600.64 1344.52 1597.56 1339.94 Q1594.51 1335.33 1594.51 1326.6 Q1594.51 1317.85 1597.56 1313.27 Q1600.64 1308.66 1606.45 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip660)\" d=\"M1636.61 1312.37 Q1633 1312.37 1631.17 1315.93 Q1629.37 1319.47 1629.37 1326.6 Q1629.37 1333.71 1631.17 1337.27 Q1633 1340.82 1636.61 1340.82 Q1640.25 1340.82 1642.05 1337.27 Q1643.88 1333.71 1643.88 1326.6 Q1643.88 1319.47 1642.05 1315.93 Q1640.25 1312.37 1636.61 1312.37 M1636.61 1308.66 Q1642.42 1308.66 1645.48 1313.27 Q1648.56 1317.85 1648.56 1326.6 Q1648.56 1335.33 1645.48 1339.94 Q1642.42 1344.52 1636.61 1344.52 Q1630.8 1344.52 1627.72 1339.94 Q1624.67 1335.33 1624.67 1326.6 Q1624.67 1317.85 1627.72 1313.27 Q1630.8 1308.66 1636.61 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip660)\" d=\"M2118.57 1325.21 Q2121.93 1325.93 2123.8 1328.2 Q2125.7 1330.47 2125.7 1333.8 Q2125.7 1338.92 2122.18 1341.72 Q2118.66 1344.52 2112.18 1344.52 Q2110.01 1344.52 2107.69 1344.08 Q2105.4 1343.66 2102.95 1342.81 L2102.95 1338.29 Q2104.89 1339.43 2107.2 1340 Q2109.52 1340.58 2112.04 1340.58 Q2116.44 1340.58 2118.73 1338.85 Q2121.05 1337.11 2121.05 1333.8 Q2121.05 1330.75 2118.89 1329.03 Q2116.76 1327.3 2112.95 1327.3 L2108.92 1327.3 L2108.92 1323.45 L2113.13 1323.45 Q2116.58 1323.45 2118.41 1322.09 Q2120.24 1320.7 2120.24 1318.11 Q2120.24 1315.44 2118.34 1314.03 Q2116.46 1312.6 2112.95 1312.6 Q2111.02 1312.6 2108.82 1313.01 Q2106.63 1313.43 2103.99 1314.31 L2103.99 1310.14 Q2106.65 1309.4 2108.96 1309.03 Q2111.3 1308.66 2113.36 1308.66 Q2118.69 1308.66 2121.79 1311.09 Q2124.89 1313.5 2124.89 1317.62 Q2124.89 1320.49 2123.25 1322.48 Q2121.6 1324.45 2118.57 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip660)\" d=\"M2144.57 1312.37 Q2140.95 1312.37 2139.13 1315.93 Q2137.32 1319.47 2137.32 1326.6 Q2137.32 1333.71 2139.13 1337.27 Q2140.95 1340.82 2144.57 1340.82 Q2148.2 1340.82 2150.01 1337.27 Q2151.83 1333.71 2151.83 1326.6 Q2151.83 1319.47 2150.01 1315.93 Q2148.2 1312.37 2144.57 1312.37 M2144.57 1308.66 Q2150.38 1308.66 2153.43 1313.27 Q2156.51 1317.85 2156.51 1326.6 Q2156.51 1335.33 2153.43 1339.94 Q2150.38 1344.52 2144.57 1344.52 Q2138.76 1344.52 2135.68 1339.94 Q2132.62 1335.33 2132.62 1326.6 Q2132.62 1317.85 2135.68 1313.27 Q2138.76 1308.66 2144.57 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip660)\" d=\"M2174.73 1312.37 Q2171.12 1312.37 2169.29 1315.93 Q2167.48 1319.47 2167.48 1326.6 Q2167.48 1333.71 2169.29 1337.27 Q2171.12 1340.82 2174.73 1340.82 Q2178.36 1340.82 2180.17 1337.27 Q2182 1333.71 2182 1326.6 Q2182 1319.47 2180.17 1315.93 Q2178.36 1312.37 2174.73 1312.37 M2174.73 1308.66 Q2180.54 1308.66 2183.59 1313.27 Q2186.67 1317.85 2186.67 1326.6 Q2186.67 1335.33 2183.59 1339.94 Q2180.54 1344.52 2174.73 1344.52 Q2168.92 1344.52 2165.84 1339.94 Q2162.78 1335.33 2162.78 1326.6 Q2162.78 1317.85 2165.84 1313.27 Q2168.92 1308.66 2174.73 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip660)\" d=\"M2204.89 1312.37 Q2201.28 1312.37 2199.45 1315.93 Q2197.64 1319.47 2197.64 1326.6 Q2197.64 1333.71 2199.45 1337.27 Q2201.28 1340.82 2204.89 1340.82 Q2208.52 1340.82 2210.33 1337.27 Q2212.16 1333.71 2212.16 1326.6 Q2212.16 1319.47 2210.33 1315.93 Q2208.52 1312.37 2204.89 1312.37 M2204.89 1308.66 Q2210.7 1308.66 2213.75 1313.27 Q2216.83 1317.85 2216.83 1326.6 Q2216.83 1335.33 2213.75 1339.94 Q2210.7 1344.52 2204.89 1344.52 Q2199.08 1344.52 2196 1339.94 Q2192.94 1335.33 2192.94 1326.6 Q2192.94 1317.85 2196 1313.27 Q2199.08 1308.66 2204.89 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip660)\" d=\"M1248.87 1391.71 L1248.87 1397.25 Q1246.38 1395.98 1243.71 1395.34 Q1241.04 1394.71 1238.17 1394.71 Q1233.81 1394.71 1231.62 1396.04 Q1229.45 1397.38 1229.45 1400.05 Q1229.45 1402.09 1231.01 1403.27 Q1232.57 1404.41 1237.28 1405.46 L1239.29 1405.91 Q1245.52 1407.25 1248.13 1409.7 Q1250.78 1412.12 1250.78 1416.48 Q1250.78 1421.44 1246.83 1424.34 Q1242.91 1427.23 1236.04 1427.23 Q1233.17 1427.23 1230.06 1426.66 Q1226.97 1426.12 1223.53 1425.01 L1223.53 1418.96 Q1226.78 1420.65 1229.93 1421.51 Q1233.08 1422.33 1236.17 1422.33 Q1240.3 1422.33 1242.53 1420.93 Q1244.76 1419.5 1244.76 1416.92 Q1244.76 1414.54 1243.14 1413.26 Q1241.55 1411.99 1236.1 1410.81 L1234.07 1410.33 Q1228.62 1409.19 1226.2 1406.83 Q1223.79 1404.45 1223.79 1400.31 Q1223.79 1395.28 1227.35 1392.54 Q1230.91 1389.8 1237.47 1389.8 Q1240.72 1389.8 1243.58 1390.28 Q1246.45 1390.76 1248.87 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip660)\" d=\"M1265.89 1380.54 L1265.89 1390.66 L1277.96 1390.66 L1277.96 1395.22 L1265.89 1395.22 L1265.89 1414.57 Q1265.89 1418.93 1267.07 1420.17 Q1268.28 1421.41 1271.94 1421.41 L1277.96 1421.41 L1277.96 1426.31 L1271.94 1426.31 Q1265.16 1426.31 1262.58 1423.8 Q1260.01 1421.25 1260.01 1414.57 L1260.01 1395.22 L1255.71 1395.22 L1255.71 1390.66 L1260.01 1390.66 L1260.01 1380.54 L1265.89 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip660)\" d=\"M1316.15 1407.02 L1316.15 1409.89 L1289.22 1409.89 Q1289.61 1415.94 1292.85 1419.12 Q1296.13 1422.27 1301.96 1422.27 Q1305.33 1422.27 1308.48 1421.44 Q1311.66 1420.61 1314.78 1418.96 L1314.78 1424.5 Q1311.63 1425.83 1308.32 1426.53 Q1305.01 1427.23 1301.61 1427.23 Q1293.08 1427.23 1288.08 1422.27 Q1283.11 1417.3 1283.11 1408.84 Q1283.11 1400.08 1287.82 1394.96 Q1292.57 1389.8 1300.59 1389.8 Q1307.78 1389.8 1311.95 1394.45 Q1316.15 1399.07 1316.15 1407.02 M1310.3 1405.3 Q1310.23 1400.5 1307.59 1397.63 Q1304.98 1394.77 1300.65 1394.77 Q1295.75 1394.77 1292.79 1397.54 Q1289.86 1400.31 1289.42 1405.34 L1310.3 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip660)\" d=\"M1331.43 1420.96 L1331.43 1439.87 L1325.54 1439.87 L1325.54 1390.66 L1331.43 1390.66 L1331.43 1396.07 Q1333.28 1392.89 1336.08 1391.36 Q1338.91 1389.8 1342.82 1389.8 Q1349.32 1389.8 1353.36 1394.96 Q1357.43 1400.12 1357.43 1408.52 Q1357.43 1416.92 1353.36 1422.08 Q1349.32 1427.23 1342.82 1427.23 Q1338.91 1427.23 1336.08 1425.71 Q1333.28 1424.15 1331.43 1420.96 M1351.35 1408.52 Q1351.35 1402.06 1348.68 1398.4 Q1346.04 1394.71 1341.39 1394.71 Q1336.74 1394.71 1334.07 1398.4 Q1331.43 1402.06 1331.43 1408.52 Q1331.43 1414.98 1334.07 1418.67 Q1336.74 1422.33 1341.39 1422.33 Q1346.04 1422.33 1348.68 1418.67 Q1351.35 1414.98 1351.35 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip660)\" d=\"M1389.87 1391.71 L1389.87 1397.25 Q1387.38 1395.98 1384.71 1395.34 Q1382.04 1394.71 1379.17 1394.71 Q1374.81 1394.71 1372.62 1396.04 Q1370.45 1397.38 1370.45 1400.05 Q1370.45 1402.09 1372.01 1403.27 Q1373.57 1404.41 1378.28 1405.46 L1380.29 1405.91 Q1386.52 1407.25 1389.13 1409.7 Q1391.78 1412.12 1391.78 1416.48 Q1391.78 1421.44 1387.83 1424.34 Q1383.91 1427.23 1377.04 1427.23 Q1374.18 1427.23 1371.06 1426.66 Q1367.97 1426.12 1364.53 1425.01 L1364.53 1418.96 Q1367.78 1420.65 1370.93 1421.51 Q1374.08 1422.33 1377.17 1422.33 Q1381.3 1422.33 1383.53 1420.93 Q1385.76 1419.5 1385.76 1416.92 Q1385.76 1414.54 1384.14 1413.26 Q1382.55 1411.99 1377.1 1410.81 L1375.07 1410.33 Q1369.62 1409.19 1367.2 1406.83 Q1364.79 1404.45 1364.79 1400.31 Q1364.79 1395.28 1368.35 1392.54 Q1371.92 1389.8 1378.47 1389.8 Q1381.72 1389.8 1384.58 1390.28 Q1387.45 1390.76 1389.87 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip662)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1260.83 2211.02,1260.83 \"/>\n<polyline clip-path=\"url(#clip662)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,1003.39 2211.02,1003.39 \"/>\n<polyline clip-path=\"url(#clip662)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,745.963 2211.02,745.963 \"/>\n<polyline clip-path=\"url(#clip662)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,488.531 2211.02,488.531 \"/>\n<polyline clip-path=\"url(#clip662)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"404.284,231.099 2211.02,231.099 \"/>\n<polyline clip-path=\"url(#clip660)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1281.45 404.284,188.976 \"/>\n<polyline clip-path=\"url(#clip660)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1260.83 423.181,1260.83 \"/>\n<polyline clip-path=\"url(#clip660)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,1003.39 423.181,1003.39 \"/>\n<polyline clip-path=\"url(#clip660)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,745.963 423.181,745.963 \"/>\n<polyline clip-path=\"url(#clip660)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,488.531 423.181,488.531 \"/>\n<polyline clip-path=\"url(#clip660)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"404.284,231.099 423.181,231.099 \"/>\n<path clip-path=\"url(#clip660)\" d=\"M356.339 1246.62 Q352.728 1246.62 350.899 1250.19 Q349.094 1253.73 349.094 1260.86 Q349.094 1267.97 350.899 1271.53 Q352.728 1275.07 356.339 1275.07 Q359.973 1275.07 361.779 1271.53 Q363.608 1267.97 363.608 1260.86 Q363.608 1253.73 361.779 1250.19 Q359.973 1246.62 356.339 1246.62 M356.339 1242.92 Q362.149 1242.92 365.205 1247.53 Q368.284 1252.11 368.284 1260.86 Q368.284 1269.59 365.205 1274.19 Q362.149 1278.78 356.339 1278.78 Q350.529 1278.78 347.45 1274.19 Q344.395 1269.59 344.395 1260.86 Q344.395 1252.11 347.45 1247.53 Q350.529 1242.92 356.339 1242.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip660)\" d=\"M290.043 1016.74 L306.363 1016.74 L306.363 1020.67 L284.418 1020.67 L284.418 1016.74 Q287.08 1013.98 291.664 1009.35 Q296.27 1004.7 297.451 1003.36 Q299.696 1000.84 300.576 999.1 Q301.478 997.341 301.478 995.651 Q301.478 992.897 299.534 991.16 Q297.613 989.424 294.511 989.424 Q292.312 989.424 289.858 990.188 Q287.427 990.952 284.65 992.503 L284.65 987.781 Q287.474 986.647 289.927 986.068 Q292.381 985.489 294.418 985.489 Q299.789 985.489 302.983 988.174 Q306.177 990.86 306.177 995.35 Q306.177 997.48 305.367 999.401 Q304.58 1001.3 302.474 1003.89 Q301.895 1004.56 298.793 1007.78 Q295.691 1010.98 290.043 1016.74 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip660)\" d=\"M316.224 986.114 L334.58 986.114 L334.58 990.049 L320.506 990.049 L320.506 998.522 Q321.524 998.174 322.543 998.012 Q323.562 997.827 324.58 997.827 Q330.367 997.827 333.747 1001 Q337.126 1004.17 337.126 1009.59 Q337.126 1015.16 333.654 1018.27 Q330.182 1021.35 323.862 1021.35 Q321.687 1021.35 319.418 1020.98 Q317.173 1020.6 314.765 1019.86 L314.765 1015.16 Q316.849 1016.3 319.071 1016.85 Q321.293 1017.41 323.77 1017.41 Q327.774 1017.41 330.112 1015.3 Q332.45 1013.2 332.45 1009.59 Q332.45 1005.98 330.112 1003.87 Q327.774 1001.76 323.77 1001.76 Q321.895 1001.76 320.02 1002.18 Q318.168 1002.6 316.224 1003.48 L316.224 986.114 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip660)\" d=\"M356.339 989.193 Q352.728 989.193 350.899 992.758 Q349.094 996.299 349.094 1003.43 Q349.094 1010.54 350.899 1014.1 Q352.728 1017.64 356.339 1017.64 Q359.973 1017.64 361.779 1014.1 Q363.608 1010.54 363.608 1003.43 Q363.608 996.299 361.779 992.758 Q359.973 989.193 356.339 989.193 M356.339 985.489 Q362.149 985.489 365.205 990.096 Q368.284 994.679 368.284 1003.43 Q368.284 1012.16 365.205 1016.76 Q362.149 1021.35 356.339 1021.35 Q350.529 1021.35 347.45 1016.76 Q344.395 1012.16 344.395 1003.43 Q344.395 994.679 347.45 990.096 Q350.529 985.489 356.339 985.489 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip660)\" d=\"M286.062 728.683 L304.418 728.683 L304.418 732.618 L290.344 732.618 L290.344 741.09 Q291.363 740.743 292.381 740.581 Q293.4 740.395 294.418 740.395 Q300.205 740.395 303.585 743.567 Q306.964 746.738 306.964 752.155 Q306.964 757.733 303.492 760.835 Q300.02 763.914 293.701 763.914 Q291.525 763.914 289.256 763.543 Q287.011 763.173 284.603 762.432 L284.603 757.733 Q286.687 758.868 288.909 759.423 Q291.131 759.979 293.608 759.979 Q297.613 759.979 299.951 757.872 Q302.288 755.766 302.288 752.155 Q302.288 748.544 299.951 746.437 Q297.613 744.331 293.608 744.331 Q291.733 744.331 289.858 744.747 Q288.006 745.164 286.062 746.044 L286.062 728.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip660)\" d=\"M326.177 731.761 Q322.566 731.761 320.737 735.326 Q318.932 738.868 318.932 745.997 Q318.932 753.104 320.737 756.669 Q322.566 760.21 326.177 760.21 Q329.811 760.21 331.617 756.669 Q333.446 753.104 333.446 745.997 Q333.446 738.868 331.617 735.326 Q329.811 731.761 326.177 731.761 M326.177 728.058 Q331.987 728.058 335.043 732.664 Q338.122 737.247 338.122 745.997 Q338.122 754.724 335.043 759.331 Q331.987 763.914 326.177 763.914 Q320.367 763.914 317.288 759.331 Q314.233 754.724 314.233 745.997 Q314.233 737.247 317.288 732.664 Q320.367 728.058 326.177 728.058 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip660)\" d=\"M356.339 731.761 Q352.728 731.761 350.899 735.326 Q349.094 738.868 349.094 745.997 Q349.094 753.104 350.899 756.669 Q352.728 760.21 356.339 760.21 Q359.973 760.21 361.779 756.669 Q363.608 753.104 363.608 745.997 Q363.608 738.868 361.779 735.326 Q359.973 731.761 356.339 731.761 M356.339 728.058 Q362.149 728.058 365.205 732.664 Q368.284 737.247 368.284 745.997 Q368.284 754.724 365.205 759.331 Q362.149 763.914 356.339 763.914 Q350.529 763.914 347.45 759.331 Q344.395 754.724 344.395 745.997 Q344.395 737.247 347.45 732.664 Q350.529 728.058 356.339 728.058 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip660)\" d=\"M284.835 471.251 L307.057 471.251 L307.057 473.242 L294.511 505.811 L289.627 505.811 L301.432 475.186 L284.835 475.186 L284.835 471.251 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip660)\" d=\"M316.224 471.251 L334.58 471.251 L334.58 475.186 L320.506 475.186 L320.506 483.658 Q321.524 483.311 322.543 483.149 Q323.562 482.964 324.58 482.964 Q330.367 482.964 333.747 486.135 Q337.126 489.306 337.126 494.723 Q337.126 500.302 333.654 503.404 Q330.182 506.482 323.862 506.482 Q321.687 506.482 319.418 506.112 Q317.173 505.741 314.765 505.001 L314.765 500.302 Q316.849 501.436 319.071 501.991 Q321.293 502.547 323.77 502.547 Q327.774 502.547 330.112 500.441 Q332.45 498.334 332.45 494.723 Q332.45 491.112 330.112 489.005 Q327.774 486.899 323.77 486.899 Q321.895 486.899 320.02 487.316 Q318.168 487.732 316.224 488.612 L316.224 471.251 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip660)\" d=\"M356.339 474.33 Q352.728 474.33 350.899 477.894 Q349.094 481.436 349.094 488.566 Q349.094 495.672 350.899 499.237 Q352.728 502.779 356.339 502.779 Q359.973 502.779 361.779 499.237 Q363.608 495.672 363.608 488.566 Q363.608 481.436 361.779 477.894 Q359.973 474.33 356.339 474.33 M356.339 470.626 Q362.149 470.626 365.205 475.232 Q368.284 479.816 368.284 488.566 Q368.284 497.292 365.205 501.899 Q362.149 506.482 356.339 506.482 Q350.529 506.482 347.45 501.899 Q344.395 497.292 344.395 488.566 Q344.395 479.816 347.45 475.232 Q350.529 470.626 356.339 470.626 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip660)\" d=\"M256.664 244.444 L264.303 244.444 L264.303 218.079 L255.992 219.745 L255.992 215.486 L264.256 213.819 L268.932 213.819 L268.932 244.444 L276.571 244.444 L276.571 248.379 L256.664 248.379 L256.664 244.444 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip660)\" d=\"M296.015 216.898 Q292.404 216.898 290.576 220.463 Q288.77 224.004 288.77 231.134 Q288.77 238.24 290.576 241.805 Q292.404 245.347 296.015 245.347 Q299.65 245.347 301.455 241.805 Q303.284 238.24 303.284 231.134 Q303.284 224.004 301.455 220.463 Q299.65 216.898 296.015 216.898 M296.015 213.194 Q301.826 213.194 304.881 217.801 Q307.96 222.384 307.96 231.134 Q307.96 239.861 304.881 244.467 Q301.826 249.051 296.015 249.051 Q290.205 249.051 287.127 244.467 Q284.071 239.861 284.071 231.134 Q284.071 222.384 287.127 217.801 Q290.205 213.194 296.015 213.194 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip660)\" d=\"M326.177 216.898 Q322.566 216.898 320.737 220.463 Q318.932 224.004 318.932 231.134 Q318.932 238.24 320.737 241.805 Q322.566 245.347 326.177 245.347 Q329.811 245.347 331.617 241.805 Q333.446 238.24 333.446 231.134 Q333.446 224.004 331.617 220.463 Q329.811 216.898 326.177 216.898 M326.177 213.194 Q331.987 213.194 335.043 217.801 Q338.122 222.384 338.122 231.134 Q338.122 239.861 335.043 244.467 Q331.987 249.051 326.177 249.051 Q320.367 249.051 317.288 244.467 Q314.233 239.861 314.233 231.134 Q314.233 222.384 317.288 217.801 Q320.367 213.194 326.177 213.194 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip660)\" d=\"M356.339 216.898 Q352.728 216.898 350.899 220.463 Q349.094 224.004 349.094 231.134 Q349.094 238.24 350.899 241.805 Q352.728 245.347 356.339 245.347 Q359.973 245.347 361.779 241.805 Q363.608 238.24 363.608 231.134 Q363.608 224.004 361.779 220.463 Q359.973 216.898 356.339 216.898 M356.339 213.194 Q362.149 213.194 365.205 217.801 Q368.284 222.384 368.284 231.134 Q368.284 239.861 365.205 244.467 Q362.149 249.051 356.339 249.051 Q350.529 249.051 347.45 244.467 Q344.395 239.861 344.395 231.134 Q344.395 222.384 347.45 217.801 Q350.529 213.194 356.339 213.194 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip660)\" d=\"M184.22 784.801 L205.736 784.801 L205.736 790.657 L184.411 790.657 Q179.351 790.657 176.836 792.631 Q174.322 794.604 174.322 798.551 Q174.322 803.293 177.345 806.03 Q180.369 808.768 185.589 808.768 L205.736 808.768 L205.736 814.656 L170.088 814.656 L170.088 808.768 L175.627 808.768 Q172.412 806.667 170.821 803.834 Q169.229 800.97 169.229 797.246 Q169.229 791.103 173.049 787.952 Q176.836 784.801 184.22 784.801 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip660)\" d=\"M174.194 759.306 Q174.194 764.017 177.886 766.754 Q181.547 769.491 187.944 769.491 Q194.342 769.491 198.034 766.786 Q201.694 764.049 201.694 759.306 Q201.694 754.627 198.002 751.89 Q194.31 749.153 187.944 749.153 Q181.61 749.153 177.918 751.89 Q174.194 754.627 174.194 759.306 M169.229 759.306 Q169.229 751.667 174.194 747.307 Q179.16 742.946 187.944 742.946 Q196.697 742.946 201.694 747.307 Q206.659 751.667 206.659 759.306 Q206.659 766.977 201.694 771.337 Q196.697 775.666 187.944 775.666 Q179.16 775.666 174.194 771.337 Q169.229 766.977 169.229 759.306 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip660)\" d=\"M175.563 712.582 Q174.99 713.569 174.735 714.746 Q174.449 715.892 174.449 717.293 Q174.449 722.258 177.696 724.931 Q180.91 727.573 186.958 727.573 L205.736 727.573 L205.736 733.461 L170.088 733.461 L170.088 727.573 L175.627 727.573 Q172.38 725.727 170.821 722.767 Q169.229 719.807 169.229 715.574 Q169.229 714.969 169.325 714.237 Q169.388 713.505 169.547 712.614 L175.563 712.582 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip660)\" d=\"M176.932 679.83 Q172.985 677.634 171.107 674.579 Q169.229 671.523 169.229 667.385 Q169.229 661.815 173.144 658.792 Q177.027 655.768 184.22 655.768 L205.736 655.768 L205.736 661.656 L184.411 661.656 Q179.287 661.656 176.804 663.47 Q174.322 665.285 174.322 669.009 Q174.322 673.56 177.345 676.202 Q180.369 678.844 185.589 678.844 L205.736 678.844 L205.736 684.732 L184.411 684.732 Q179.255 684.732 176.804 686.546 Q174.322 688.36 174.322 692.148 Q174.322 696.636 177.377 699.278 Q180.401 701.919 185.589 701.919 L205.736 701.919 L205.736 707.808 L170.088 707.808 L170.088 701.919 L175.627 701.919 Q172.348 699.914 170.789 697.113 Q169.229 694.312 169.229 690.461 Q169.229 686.578 171.202 683.873 Q173.176 681.135 176.932 679.83 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip662)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"-1402.46,231.099 4017.76,231.099 \"/>\n<polyline clip-path=\"url(#clip662)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"455.418,1250.53 455.986,1250.45 456.554,1250.31 457.123,1250.09 457.691,1249.81 458.259,1249.47 458.828,1249.06 459.396,1248.59 459.964,1248.04 460.533,1247.43 461.101,1246.75 461.669,1245.99 462.238,1244.12 462.806,1242.17 463.375,1240.15 463.943,1239.08 464.511,1236.88 465.08,1235.61 465.648,1234.23 466.216,1231.7 466.785,1229.07 467.353,1227.34 467.921,1225.48 468.49,1223.48 469.058,1219.27 469.626,1214.92 470.195,1212.46 470.763,1209.81 471.331,1207.02 471.9,1203.02 472.468,1199.83 473.036,1196.49 473.605,1191.92 474.173,1187.14 474.741,1183.29 475.31,1179.29 475.878,1173.99 476.446,1169.54 477.015,1163.84 477.583,1158.99 478.152,1152.9 478.72,1146.61 479.288,1141.06 479.857,1135.39 480.425,1127.34 480.993,1120.24 481.562,1113.91 482.13,1107.3 482.698,1099.52 483.267,1090.56 483.835,1082.5 484.403,1073.19 484.972,1065.81 485.54,1057.2 486.108,1048.48 486.677,1037.54 487.245,1027.73 487.813,1017.71 488.382,1009.71 488.95,1001.51 489.518,989.099 490.087,980.789 490.655,972.235 491.224,961.561 491.792,952.793 492.36,943.868 492.929,932.746 493.497,922.75 494.065,912.57 494.634,903.595 495.202,892.342 495.77,877.949 496.339,866.925 496.907,855.803 497.475,844.645 498.044,834.516 498.612,823.364 499.18,813.349 499.749,799.242 500.317,789.635 500.885,778.893 501.454,769.285 502.022,757.652 502.59,748.18 503.159,737.752 503.727,726.303 504.295,718.093 504.864,708.9 505.432,698.73 506.001,689.681 506.569,680.866 507.137,672.12 507.706,663.248 508.274,653.576 508.842,645.155 509.411,636.789 509.979,626.333 510.547,619.204 511.116,612.119 511.684,604.127 512.252,595.885 512.821,586.982 513.389,579.148 513.957,571.453 514.526,562.762 515.094,557.345 515.662,548.703 516.231,540.469 516.799,533.333 517.367,526.371 517.936,518.342 518.504,511.499 519.072,506.972 519.641,497.119 520.209,493.717 520.778,487.215 521.346,479.81 521.914,473.637 522.483,467.629 523.051,461.671 523.619,454.791 524.188,451.19 524.756,446.688 525.324,441.132 525.893,435.646 526.461,428.396 527.029,424.498 527.598,419.285 528.166,413.254 528.734,409.785 529.303,406.159 529.871,401.686 530.439,398.334 531.008,393.922 531.576,388.56 532.144,383.471 532.713,379.421 533.281,373.549 533.85,370.906 534.418,366.083 534.986,361.586 535.555,358.631 536.123,357.428 536.691,352.959 537.26,349.886 537.828,347.621 538.396,343.51 538.965,341.705 539.533,337.846 540.101,335.047 540.67,334.353 541.238,332.43 541.806,330.478 542.375,326.617 542.943,324.963 543.511,322.378 544.08,319.715 544.648,316.416 545.216,314.019 545.785,310.904 546.353,310.756 546.921,309.635 547.49,309.197 548.058,306.861 548.627,302.696 549.195,301.737 549.763,301.829 550.332,299.873 550.9,298.761 551.468,296.641 552.037,297.672 552.605,296.614 553.173,294.494 553.742,293.407 554.31,292.467 554.878,289.557 555.447,289.818 556.015,288.876 556.583,286.834 557.152,283.812 557.72,282.331 558.288,278.756 558.857,275.429 559.425,275.49 559.993,275.231 560.562,273.916 561.13,272.602 561.698,269.314 562.267,268.305 562.835,266.169 563.404,267.368 563.972,267.281 564.54,265.181 565.109,265.5 565.677,264.451 566.245,264.471 566.814,264.512 567.382,262.267 567.95,260.066 568.519,261.371 569.087,263.672 569.655,261.537 570.224,263.587 570.792,263.316 571.36,264.145 571.929,262.808 572.497,261.531 573.065,260.36 573.634,259.261 574.202,259.305 574.77,260.351 575.339,260.212 575.907,259.933 576.476,258.605 577.044,258.343 577.612,260.279 578.181,258.868 578.749,257.298 579.317,255.949 579.886,255.774 580.454,257.658 581.022,255.326 581.591,254.228 582.159,255.085 582.727,255.921 583.296,254.675 583.864,255.499 584.432,253.111 585.001,254.119 585.569,253.778 586.137,255.331 586.706,255.836 587.274,256.381 587.842,254.912 588.411,253.404 588.979,252.812 589.547,252.549 590.116,251.481 590.684,249.284 591.253,247.885 591.821,249.155 592.389,247.031 592.958,247.11 593.526,247.128 594.094,247.196 594.663,247.09 595.231,246.844 595.799,244.698 596.368,241.606 596.936,242.855 597.504,242.903 598.073,242.874 598.641,242.094 599.209,241.424 599.778,242.493 600.346,241.718 600.914,242.058 601.483,242.312 602.051,244.421 602.619,244.605 603.188,243.62 603.756,243.455 604.325,241.485 604.893,241.647 605.461,237.622 606.03,237.293 606.598,236.821 607.166,237.418 607.735,233.867 608.303,233.604 608.871,234.487 609.44,235.32 610.008,234.887 610.576,236.603 611.145,235.959 611.713,236.427 612.281,238.026 612.85,235.402 613.418,236.092 613.986,237.646 614.555,238.94 615.123,240.267 615.691,241.719 616.26,241.747 616.828,239.694 617.396,239.961 617.965,239.01 618.533,237.131 619.102,239.55 619.67,241.869 620.238,243.043 620.807,242.055 621.375,244.226 621.943,245.082 622.512,244.102 623.08,248.836 623.648,250.392 624.217,248.958 624.785,248.557 625.353,248.05 625.922,249.518 626.49,247.799 627.058,247.289 627.627,246.814 628.195,247.356 628.763,247.199 629.332,246.686 629.9,244.267 630.468,244.897 631.037,242.389 631.605,240.951 632.173,239.522 632.742,238.434 633.31,238.424 633.879,238.53 634.447,237.388 635.015,235.447 635.584,233.792 636.152,233.012 636.72,232.416 637.289,231.706 637.857,233.287 638.425,232.457 638.994,230.646 639.562,230.337 640.13,230.727 640.699,231.417 641.267,230.906 641.835,229.63 642.404,230.521 642.972,228.129 643.54,225.754 644.109,226.747 644.677,228.648 645.245,229.261 645.814,228.97 646.382,230.836 646.951,229.364 647.519,229.038 648.087,230.882 648.656,233.544 649.224,235.17 649.792,236.578 650.361,237.643 650.929,237.997 651.497,238.113 652.066,235.095 652.634,235.254 653.202,236.56 653.771,237.758 654.339,238.712 654.907,237.91 655.476,238.2 656.044,239.344 656.612,240.167 657.181,241.286 657.749,239.917 658.317,241.804 658.886,241.728 659.454,240.423 660.022,241.203 660.591,240.002 661.159,241.946 661.728,241.505 662.296,239.255 662.864,237.952 663.433,236.916 664.001,237.122 664.569,237.211 665.138,237.246 665.706,239.361 666.274,240.098 666.843,239.91 667.411,238.58 667.979,238.585 668.548,239.51 669.116,238.092 669.684,232.908 670.253,233.242 670.821,231.501 671.389,231.926 671.958,234.253 672.526,234.443 673.094,230.717 673.663,231.011 674.231,231.486 674.799,231.053 675.368,232.36 675.936,233.625 676.505,230.96 677.073,231.338 677.641,229.683 678.21,229.032 678.778,230.547 679.346,231.95 679.915,234.204 680.483,234.372 681.051,233.443 681.62,233.748 682.188,235.016 682.756,233.124 683.325,234.435 683.893,232.488 684.461,231.507 685.03,230.854 685.598,228.42 686.166,228.913 686.735,229.342 687.303,231.166 687.871,231.457 688.44,231.734 689.008,229.936 689.577,231.521 690.145,234.084 690.713,236.365 691.282,236.393 691.85,235.407 692.418,237.64 692.987,236.483 693.555,237.665 694.123,239.63 694.692,237.258 695.26,237.203 695.828,238.726 696.397,239.563 696.965,240.163 697.533,238.668 698.102,238.505 698.67,237.548 699.238,236.474 699.807,238.531 700.375,237.617 700.943,236.268 701.512,236.05 702.08,238.273 702.648,239.085 703.217,238.851 703.785,238.543 704.354,240.326 704.922,238.98 705.49,236.703 706.059,236.569 706.627,237.512 707.195,237.298 707.764,237.04 708.332,237.012 708.9,232.885 709.469,229.949 710.037,230.468 710.605,231.856 711.174,232.102 711.742,233.43 712.31,235.511 712.879,235.458 713.447,235.348 714.015,236.069 714.584,233.786 715.152,231.956 715.72,229.987 716.289,231.394 716.857,234.696 717.425,233.354 717.994,232.31 718.562,232.303 719.131,233.273 719.699,232.199 720.267,232.359 720.836,232.468 721.404,231.631 721.972,231.925 722.541,235.108 723.109,235.988 723.677,231.76 724.246,229.764 724.814,229.04 725.382,229.348 725.951,231.728 726.519,231.887 727.087,230.829 727.656,230.221 728.224,231.473 728.792,230.693 729.361,231.066 729.929,231.233 730.497,232.402 731.066,233.651 731.634,233.602 732.203,232.611 732.771,232.724 733.339,232.988 733.908,232.145 734.476,233.279 735.044,232.375 735.613,228.516 736.181,231.167 736.749,232.278 737.318,232.539 737.886,233.622 738.454,234.741 739.023,232.58 739.591,233.78 740.159,233.987 740.728,232.759 741.296,231.72 741.864,231.133 742.433,233.6 743.001,236.878 743.569,235.768 744.138,233.811 744.706,232.848 745.274,233.622 745.843,233.753 746.411,232.816 746.98,233.889 747.548,236.162 748.116,236.09 748.685,234.123 749.253,235.04 749.821,235.073 750.39,240.113 750.958,240.734 751.526,243.205 752.095,242.525 752.663,244.034 753.231,243.383 753.8,243.476 754.368,242.983 754.936,242.204 755.505,241.35 756.073,240.789 756.641,242.014 757.21,241.195 757.778,241.514 758.346,239.819 758.915,238.33 759.483,237.696 760.052,238.214 760.62,237.77 761.188,235.354 761.757,237.163 762.325,236.719 762.893,235.396 763.462,234.979 764.03,234.944 764.598,233.559 765.167,231.533 765.735,231.484 766.303,230.451 766.872,231.482 767.44,231.434 768.008,230.261 768.577,232.243 769.145,232.012 769.713,231.807 770.282,232.775 770.85,230.826 771.418,230.871 771.987,230.703 772.555,230.664 773.123,231.628 773.692,231.728 774.26,230.719 774.829,230.611 775.397,228.757 775.965,230.794 776.534,229.864 777.102,227.654 777.67,228.765 778.239,227.055 778.807,229.442 779.375,227.536 779.944,228.968 780.512,229.131 781.08,227.185 781.649,227.491 782.217,226.857 782.785,226.24 783.354,225.528 783.922,226 784.49,225.364 785.059,226.011 785.627,226.429 786.195,227.991 786.764,228.471 787.332,228.731 787.9,227.963 788.469,228.246 789.037,228.636 789.606,226.902 790.174,227.592 790.742,229.043 791.311,228.297 791.879,227.402 792.447,228.998 793.016,229.348 793.584,231.652 794.152,233.048 794.721,231.952 795.289,231.942 795.857,231.115 796.426,230.291 796.994,231.437 797.562,233.623 798.131,232.613 798.699,232.527 799.267,232.654 799.836,231.746 800.404,231.684 800.972,230.491 801.541,228.612 802.109,227.834 802.678,228.075 803.246,229.192 803.814,230.297 804.383,230.478 804.951,232.746 805.519,234.019 806.088,232.91 806.656,232.914 807.224,232.04 807.793,232.09 808.361,231.927 808.929,233.089 809.498,236.16 810.066,236.098 810.634,233.923 811.203,231.765 811.771,235.837 812.339,236.596 812.908,235.108 813.476,235.038 814.044,232.78 814.613,233.045 815.181,233.085 815.749,233.164 816.318,233.276 816.886,231.116 817.455,232.3 818.023,230.183 818.591,230.238 819.16,229.469 819.728,229.799 820.296,229.857 820.865,229.937 821.433,231.059 822.001,231.007 822.57,231.098 823.138,231.351 823.706,230.281 824.275,230.617 824.843,232.885 825.411,232.876 825.98,232.804 826.548,231.749 827.116,229.828 827.685,230.094 828.253,229.392 828.821,228.307 829.39,227.712 829.958,227.942 830.526,229.567 831.095,229.483 831.663,228.685 832.232,230.905 832.8,231.117 833.368,230.35 833.937,230.378 834.505,231.444 835.073,231.622 835.642,231.736 836.21,232.686 836.778,231.735 837.347,232.042 837.915,233.083 838.483,234.222 839.052,231.923 839.62,232.101 840.188,230.12 840.757,230.341 841.325,230.808 841.893,232.03 842.462,233.171 843.03,233.982 843.598,234.96 844.167,235.768 844.735,236.362 845.304,236.083 845.872,237.746 846.44,237.425 847.009,235.896 847.577,236.441 848.145,236.976 848.714,235.718 849.282,233.375 849.85,233.095 850.419,229.799 850.987,233.199 851.555,234.383 852.124,235.45 852.692,234.102 853.26,233.955 853.829,232.788 854.397,231.802 854.965,232.018 855.534,230.986 856.102,231.131 856.67,231.394 857.239,232.261 857.807,231.169 858.375,232.257 858.944,233.107 859.512,231.987 860.081,229.762 860.649,229.753 861.217,229.769 861.786,231.957 862.354,231.795 862.922,233.892 863.491,234.834 864.059,234.658 864.627,236.506 865.196,236.188 865.764,235.783 866.332,233.574 866.901,232.284 867.469,234.271 868.037,234.187 868.606,232.95 869.174,232.885 869.742,232.488 870.311,233.457 870.879,232.406 871.447,230.933 872.016,230.242 872.584,231.241 873.152,230.126 873.721,231.323 874.289,229.116 874.858,228.463 875.426,228.632 875.994,226.812 876.563,226.993 877.131,227.423 877.699,228.893 878.268,229.061 878.836,229.163 879.404,229.191 879.973,228.55 880.541,227.5 881.109,224.766 881.678,225.494 882.246,228.042 882.814,230.582 883.383,230.781 883.951,232.759 884.519,231.829 885.088,231.925 885.656,231.771 886.224,232.838 886.793,232.904 887.361,233.94 887.93,232.739 888.498,233.88 889.066,233.774 889.635,232.495 890.203,234.554 890.771,235.301 891.34,233.04 891.908,232.95 892.476,232.795 893.045,234.878 893.613,236.623 894.181,236.151 894.75,233.976 895.318,234.645 895.886,235.31 896.455,234.073 897.023,232.929 897.591,231.941 898.16,227.816 898.728,227.063 899.296,226.287 899.865,226.927 900.433,224.001 901.001,223.405 901.57,224.957 902.138,225.158 902.707,226.557 903.275,225.921 903.843,226.243 904.412,226.771 904.98,227.159 905.548,225.267 906.117,227.85 906.685,229.223 907.253,229.416 907.822,231.8 908.39,233.898 908.958,232.618 909.527,232.682 910.095,232.705 910.663,233.917 911.232,232.606 911.8,232.676 912.368,230.652 912.937,228.004 913.505,228.398 914.073,228.652 914.642,228.911 915.21,229.441 915.779,226.43 916.347,225.98 916.915,223.079 917.484,223.927 918.052,229.997 918.62,233.179 919.189,230.434 919.757,230.67 920.325,230.784 920.894,230.056 921.462,232.452 922.03,233.465 922.599,233.074 923.167,230.964 923.735,231.229 924.304,233.55 924.872,234.716 925.44,232.352 926.009,232.462 926.577,232.67 927.145,234.449 927.714,235.505 928.282,234.198 928.85,232.989 929.419,233.92 929.987,231.609 930.556,230.505 931.124,230.575 931.692,231.686 932.261,229.719 932.829,228.993 933.397,228.317 933.966,228.537 934.534,230.789 935.102,232.013 935.671,233.002 936.239,231.974 936.807,233.033 937.376,232.978 937.944,233.809 938.512,236.8 939.081,236.705 939.649,237.192 940.217,236.773 940.786,238.348 941.354,238.954 941.922,239.513 942.491,238.846 943.059,238.378 943.627,236.722 944.196,236.37 944.764,234.973 945.333,235.47 945.901,234.027 946.469,235.094 947.038,235.751 947.606,235.483 948.174,236.079 948.743,237.827 949.311,238.366 949.879,236.873 950.448,235.399 951.016,235.126 951.584,233.801 952.153,231.465 952.721,231.21 953.289,231.051 953.858,230.944 954.426,226.969 954.994,227.403 955.563,227.537 956.131,228.948 956.699,229.298 957.268,230.439 957.836,231.413 958.405,229.171 958.973,228.438 959.541,228.576 960.11,227.669 960.678,228.131 961.246,231.551 961.815,231.582 962.383,232.526 962.951,232.278 963.52,231.226 964.088,231.428 964.656,231.294 965.225,231.268 965.793,231.268 966.361,232.204 966.93,232.289 967.498,230.856 968.066,228.719 968.635,227.052 969.203,229.442 969.771,231.619 970.34,230.532 970.908,227.584 971.476,228.017 972.045,230.266 972.613,232.363 973.182,231.503 973.75,232.35 974.318,232.31 974.887,234.238 975.455,234.078 976.023,233.855 976.592,233.847 977.16,232.695 977.728,231.424 978.297,233.623 978.865,236.699 979.433,235.596 980.002,236.31 980.57,236.163 981.138,235.861 981.707,235.571 982.275,234.126 982.843,232.72 983.412,229.599 983.98,231.694 984.548,228.507 985.117,228.834 985.685,229.112 986.253,230.372 986.822,231.181 987.39,230.346 987.959,233.291 988.527,233.174 989.095,233.951 989.664,232.851 990.232,231.719 990.8,231.716 991.369,231.709 991.937,231.613 992.505,229.509 993.074,230.427 993.642,227.497 994.21,231.63 994.779,232.55 995.347,232.504 995.915,232.228 996.484,232.037 997.052,230.813 997.62,233.922 998.189,232.614 998.757,232.479 999.325,232.274 999.894,233.17 1000.46,230.767 1001.03,230.879 1001.6,229.781 1002.17,228.658 1002.74,227.89 1003.3,227.013 1003.87,229.122 1004.44,228.193 1005.01,229.361 1005.58,228.538 1006.15,230 1006.71,229.98 1007.28,228.986 1007.85,230.04 1008.42,231.12 1008.99,230.077 1009.56,230.286 1010.12,229.252 1010.69,229.573 1011.26,229.613 1011.83,229.64 1012.4,231.799 1012.97,230.514 1013.53,232.438 1014.1,233.568 1014.67,232.067 1015.24,230.735 1015.81,231.737 1016.38,231.881 1016.94,232.789 1017.51,233.686 1018.08,233.516 1018.65,232.33 1019.22,232.403 1019.79,231.264 1020.35,230.049 1020.92,230.04 1021.49,232.227 1022.06,232.049 1022.63,231.864 1023.2,229.669 1023.76,226.57 1024.33,225.928 1024.9,225.133 1025.47,224.332 1026.04,224.602 1026.61,224.057 1027.17,222.627 1027.74,224.162 1028.31,227.801 1028.88,226.966 1029.45,226.345 1030.02,226.767 1030.58,228.064 1031.15,228.431 1031.72,229.693 1032.29,229.7 1032.86,230.803 1033.43,230.985 1033.99,230.919 1034.56,232.069 1035.13,229.955 1035.7,230.224 1036.27,228.413 1036.84,225.514 1037.4,227.143 1037.97,229.588 1038.54,228.832 1039.11,227.973 1039.68,227.362 1040.25,226.669 1040.81,227.179 1041.38,229.664 1041.95,228.652 1042.52,231.864 1043.09,233.861 1043.66,233.713 1044.22,232.46 1044.79,232.258 1045.36,232.33 1045.93,232.383 1046.5,231.644 1047.07,232.88 1047.63,232.746 1048.2,232.796 1048.77,232.936 1049.34,234.013 1049.91,233.703 1050.48,233.543 1051.05,232.496 1051.61,232.63 1052.18,235.582 1052.75,234.306 1053.32,233.057 1053.89,235.011 1054.46,233.853 1055.02,233.604 1055.59,234.382 1056.16,235.304 1056.73,232.975 1057.3,233.962 1057.87,234.865 1058.43,232.773 1059,232.656 1059.57,234.565 1060.14,234.32 1060.71,235.389 1061.28,235.013 1061.84,237.209 1062.41,235.664 1062.98,236.273 1063.55,236.836 1064.12,235.247 1064.69,232.976 1065.25,233.957 1065.82,233.673 1066.39,234.46 1066.96,234.164 1067.53,233.849 1068.1,234.779 1068.66,232.595 1069.23,231.235 1069.8,233.215 1070.37,232.01 1070.94,234.862 1071.51,235.718 1072.07,236.533 1072.64,236.36 1073.21,236.228 1073.78,235.711 1074.35,235.092 1074.92,233.499 1075.48,232.348 1076.05,232.198 1076.62,233.146 1077.19,230.831 1077.76,229.617 1078.33,228.388 1078.89,227.289 1079.46,227.366 1080.03,227.503 1080.6,226.867 1081.17,225.203 1081.74,225.552 1082.3,227.95 1082.87,230.401 1083.44,231.814 1084.01,230.664 1084.58,230.661 1085.15,228.607 1085.71,228.781 1086.28,226.101 1086.85,226.359 1087.42,227.673 1087.99,227.886 1088.56,227.063 1089.12,229.32 1089.69,229.424 1090.26,230.36 1090.83,231.589 1091.4,229.621 1091.97,229.848 1092.53,227.998 1093.1,229.44 1093.67,228.448 1094.24,227.561 1094.81,228.946 1095.38,229.024 1095.94,228.987 1096.51,229.198 1097.08,229.328 1097.65,228.31 1098.22,228.472 1098.79,229.57 1099.35,230.711 1099.92,231.892 1100.49,233.783 1101.06,233.687 1101.63,235.783 1102.2,235.34 1102.76,236.215 1103.33,236.964 1103.9,235.594 1104.47,236.175 1105.04,234.84 1105.61,236.662 1106.17,238.294 1106.74,237.824 1107.31,236.243 1107.88,234.877 1108.45,235.64 1109.02,234.271 1109.58,231.889 1110.15,232.732 1110.72,229.663 1111.29,230.974 1111.86,230.962 1112.43,230.769 1112.99,228.877 1113.56,228.104 1114.13,228.48 1114.7,227.508 1115.27,225.661 1115.84,227.204 1116.4,226.372 1116.97,224.366 1117.54,225.835 1118.11,225.999 1118.68,226.242 1119.25,224.469 1119.81,227.912 1120.38,228.191 1120.95,228.262 1121.52,228.606 1122.09,227.733 1122.66,229.094 1123.23,230.237 1123.79,230.38 1124.36,230.457 1124.93,229.528 1125.5,229.594 1126.07,226.471 1126.64,225.687 1127.2,225.984 1127.77,227.533 1128.34,228.981 1128.91,227.05 1129.48,226.352 1130.05,224.869 1130.61,225.548 1131.18,229.135 1131.75,230.365 1132.32,232.393 1132.89,233.315 1133.46,233.235 1134.02,235.338 1134.59,235.095 1135.16,234.843 1135.73,234.387 1136.3,233.125 1136.87,232.955 1137.43,229.896 1138,226.929 1138.57,228.672 1139.14,227.924 1139.71,229.311 1140.28,229.554 1140.84,230.058 1141.41,230.234 1141.98,228.249 1142.55,227.686 1143.12,228.893 1143.69,230.303 1144.25,230.255 1144.82,232.526 1145.39,232.59 1145.96,231.673 1146.53,233.768 1147.1,232.579 1147.66,232.828 1148.23,235.822 1148.8,236.896 1149.37,237.531 1149.94,238.36 1150.51,237.829 1151.07,237.509 1151.64,235.012 1152.21,234.716 1152.78,235.436 1153.35,232.173 1153.92,231.191 1154.48,231.365 1155.05,232.495 1155.62,232.34 1156.19,230.109 1156.76,231.187 1157.33,230.2 1157.89,230.374 1158.46,232.514 1159.03,231.544 1159.6,231.413 1160.17,232.494 1160.74,231.326 1161.3,232.196 1161.87,232.32 1162.44,233.288 1163.01,235.177 1163.58,236.121 1164.15,235.688 1164.71,234.139 1165.28,234.113 1165.85,234.066 1166.42,234.814 1166.99,235.489 1167.56,233.135 1168.12,230.889 1168.69,230.689 1169.26,231.652 1169.83,232.479 1170.4,232.336 1170.97,232.171 1171.53,231.045 1172.1,231.968 1172.67,231.821 1173.24,232.764 1173.81,229.472 1174.38,230.561 1174.94,229.523 1175.51,228.436 1176.08,228.503 1176.65,228.501 1177.22,228.609 1177.79,228.71 1178.35,228.804 1178.92,227.912 1179.49,230.146 1180.06,229.187 1180.63,229.551 1181.2,229.685 1181.76,230.898 1182.33,231.03 1182.9,231.982 1183.47,232.855 1184.04,232.716 1184.61,232.824 1185.17,233.665 1185.74,233.515 1186.31,234.454 1186.88,235.165 1187.45,235.092 1188.02,236.766 1188.58,237.329 1189.15,236.79 1189.72,237.319 1190.29,236.916 1190.86,235.282 1191.43,233.899 1192,238.003 1192.56,237.487 1193.13,236.867 1193.7,234.308 1194.27,232.796 1194.84,231.439 1195.41,230.692 1195.97,229.476 1196.54,230.552 1197.11,231.554 1197.68,229.392 1198.25,230.726 1198.82,231.842 1199.38,227.712 1199.95,227.006 1200.52,228.256 1201.09,226.179 1201.66,224.502 1202.23,222.925 1202.79,222.367 1203.36,222.154 1203.93,222.85 1204.5,226.424 1205.07,226.812 1205.64,226.212 1206.2,225.737 1206.77,226.048 1207.34,226.301 1207.91,225.552 1208.48,224.134 1209.05,222.668 1209.61,223.123 1210.18,222.673 1210.75,224.274 1211.32,224.58 1211.89,224.128 1212.46,223.596 1213.02,225.299 1213.59,225.906 1214.16,225.359 1214.73,223.756 1215.3,227.457 1215.87,228.772 1216.43,230.11 1217,229.411 1217.57,231.919 1218.14,231.941 1218.71,231.905 1219.28,232.96 1219.84,233.92 1220.41,234.601 1220.98,238.321 1221.55,237.83 1222.12,238.318 1222.69,235.907 1223.25,235.855 1223.82,236.547 1224.39,236.194 1224.96,237.052 1225.53,239.606 1226.1,239.086 1226.66,239.788 1227.23,239.128 1227.8,237.516 1228.37,236.958 1228.94,234.337 1229.51,233.083 1230.07,231.058 1230.64,230.155 1231.21,231.345 1231.78,231.447 1232.35,232.547 1232.92,231.288 1233.48,232.325 1234.05,232.239 1234.62,232.149 1235.19,234.06 1235.76,234.916 1236.33,233.723 1236.89,232.462 1237.46,232.324 1238.03,228.328 1238.6,229.479 1239.17,228.683 1239.74,230.866 1240.3,232.177 1240.87,230.185 1241.44,229.241 1242.01,228.506 1242.58,229.598 1243.15,229.891 1243.71,231.019 1244.28,232.134 1244.85,233.774 1245.42,233.618 1245.99,235.64 1246.56,235.365 1247.12,235.065 1247.69,236.476 1248.26,234.836 1248.83,234.369 1249.4,235.815 1249.97,236.28 1250.53,235.812 1251.1,236.352 1251.67,234.797 1252.24,232.431 1252.81,232.085 1253.38,231.001 1253.94,230.947 1254.51,230.171 1255.08,230.116 1255.65,231.069 1256.22,232.072 1256.79,231.921 1257.35,230.743 1257.92,231.956 1258.49,231.93 1259.06,233.9 1259.63,232.632 1260.2,230.291 1260.76,232.296 1261.33,233.256 1261.9,231.707 1262.47,232.631 1263.04,232.148 1263.61,229.844 1264.18,229.881 1264.74,228.856 1265.31,229.193 1265.88,228.295 1266.45,228.411 1267.02,228.444 1267.59,230.657 1268.15,231.386 1268.72,231.326 1269.29,231.46 1269.86,232.387 1270.43,232.258 1271,233.332 1271.56,233.138 1272.13,235.116 1272.7,234.606 1273.27,234.319 1273.84,235.078 1274.41,232.555 1274.97,231.035 1275.54,228.973 1276.11,227.993 1276.68,226.037 1277.25,227.303 1277.82,228.577 1278.38,229.793 1278.95,230.853 1279.52,230.722 1280.09,229.605 1280.66,230.698 1281.23,230.657 1281.79,230.543 1282.36,227.451 1282.93,226.711 1283.5,226.832 1284.07,229.259 1284.64,230.615 1285.2,230.697 1285.77,231.81 1286.34,229.802 1286.91,231.011 1287.48,230.829 1288.05,233.967 1288.61,233.729 1289.18,233.36 1289.75,234.146 1290.32,234.686 1290.89,233.422 1291.46,231.916 1292.02,233.644 1292.59,237.392 1293.16,235.894 1293.73,237.341 1294.3,236.552 1294.87,235.934 1295.43,235.681 1296,234.113 1296.57,233.702 1297.14,233.46 1297.71,231.369 1298.28,230.048 1298.84,230.896 1299.41,229.638 1299.98,228.587 1300.55,227.693 1301.12,227.923 1301.69,228.147 1302.25,227.154 1302.82,228.198 1303.39,226.209 1303.96,225.503 1304.53,227.737 1305.1,228.069 1305.66,223.176 1306.23,222.747 1306.8,222.272 1307.37,220.966 1307.94,220.785 1308.51,222.588 1309.07,223.078 1309.64,223.932 1310.21,224.607 1310.78,224.956 1311.35,225.3 1311.92,225.512 1312.48,223.676 1313.05,224.366 1313.62,224.675 1314.19,225.157 1314.76,226.782 1315.33,227.437 1315.89,227.512 1316.46,228.796 1317.03,229.918 1317.6,231.138 1318.17,231.145 1318.74,231.128 1319.3,235.339 1319.87,234.107 1320.44,232.739 1321.01,234.584 1321.58,234.419 1322.15,232.01 1322.71,231.131 1323.28,232.193 1323.85,230.412 1324.42,229.673 1324.99,231.137 1325.56,233.471 1326.12,234.447 1326.69,235.367 1327.26,234.181 1327.83,231.23 1328.4,234.262 1328.97,233.979 1329.53,231.609 1330.1,228.768 1330.67,231.102 1331.24,231.074 1331.81,230.05 1332.38,230.207 1332.94,230.37 1333.51,231.468 1334.08,232.374 1334.65,233.242 1335.22,233.025 1335.79,232.956 1336.36,233.797 1336.92,232.608 1337.49,233.752 1338.06,234.674 1338.63,233.467 1339.2,233.144 1339.77,234.242 1340.33,236.915 1340.9,234.398 1341.47,233.902 1342.04,232.757 1342.61,230.658 1343.18,232.86 1343.74,237.788 1344.31,237.247 1344.88,235.726 1345.45,236.256 1346.02,234.92 1346.59,235.59 1347.15,236.353 1347.72,235.901 1348.29,233.602 1348.86,233.501 1349.43,231.246 1350,230.058 1350.56,227.932 1351.13,227.107 1351.7,227.273 1352.27,227.436 1352.84,228.68 1353.41,227.77 1353.97,227.844 1354.54,228.165 1355.11,227.317 1355.68,225.494 1356.25,226.98 1356.82,227.421 1357.38,228.716 1357.95,226.974 1358.52,228.172 1359.09,226.356 1359.66,225.686 1360.23,225.824 1360.79,228.33 1361.36,226.446 1361.93,224.811 1362.5,224.218 1363.07,223.649 1363.64,225.435 1364.2,225.866 1364.77,226.398 1365.34,227.74 1365.91,227.975 1366.48,226.404 1367.05,226.824 1367.61,226.276 1368.18,226.986 1368.75,228.409 1369.32,228.872 1369.89,229.318 1370.46,227.515 1371.02,228.129 1371.59,230.531 1372.16,232.727 1372.73,233.942 1373.3,234.83 1373.87,234.791 1374.43,235.523 1375,233.326 1375.57,233.186 1376.14,233.245 1376.71,236.306 1377.28,236.225 1377.84,236.257 1378.41,235.84 1378.98,235.728 1379.55,235.405 1380.12,235.211 1380.69,233.959 1381.25,233.831 1381.82,232.682 1382.39,232.566 1382.96,232.423 1383.53,232.214 1384.1,231.165 1384.66,234.315 1385.23,234.416 1385.8,235.24 1386.37,234.055 1386.94,233.666 1387.51,231.507 1388.07,232.455 1388.64,234.31 1389.21,236.236 1389.78,234.751 1390.35,236.787 1390.92,236.397 1391.48,234.192 1392.05,233.929 1392.62,237.041 1393.19,234.422 1393.76,232.04 1394.33,231.033 1394.89,230.997 1395.46,232.941 1396.03,233.878 1396.6,232.744 1397.17,231.402 1397.74,231.37 1398.3,233.505 1398.87,233.484 1399.44,234.494 1400.01,235.19 1400.58,234.727 1401.15,233.269 1401.71,236.22 1402.28,233.499 1402.85,233.24 1403.42,232.219 1403.99,232.04 1404.56,231.777 1405.13,231.904 1405.69,232.654 1406.26,237.735 1406.83,237.066 1407.4,231.503 1407.97,230.524 1408.54,230.536 1409.1,228.414 1409.67,227.455 1410.24,225.869 1410.81,227.31 1411.38,226.497 1411.95,226.841 1412.51,227.124 1413.08,229.373 1413.65,232.653 1414.22,231.387 1414.79,231.025 1415.36,229.807 1415.92,226.833 1416.49,225.111 1417.06,223.471 1417.63,226.125 1418.2,228.549 1418.77,229.643 1419.33,233.914 1419.9,231.737 1420.47,230.713 1421.04,232.645 1421.61,232.643 1422.18,231.505 1422.74,230.59 1423.31,231.656 1423.88,230.49 1424.45,229.655 1425.02,229.558 1425.59,228.791 1426.15,233.234 1426.72,234.061 1427.29,232.998 1427.86,233.752 1428.43,233.735 1429,233.357 1429.56,234.026 1430.13,233.835 1430.7,234.826 1431.27,236.561 1431.84,237.315 1432.41,233.553 1432.97,233.083 1433.54,233.977 1434.11,235.785 1434.68,234.289 1435.25,234.029 1435.82,228.772 1436.38,226.974 1436.95,226.194 1437.52,227.831 1438.09,226.077 1438.66,227.4 1439.23,229.686 1439.79,231.04 1440.36,230.924 1440.93,231.002 1441.5,230.03 1442.07,234.048 1442.64,233.792 1443.2,233.575 1443.77,234.174 1444.34,233.929 1444.91,231.629 1445.48,231.567 1446.05,231.43 1446.61,233.598 1447.18,232.399 1447.75,232.099 1448.32,230.657 1448.89,231.706 1449.46,231.611 1450.02,232.697 1450.59,231.655 1451.16,231.368 1451.73,231.325 1452.3,232.137 1452.87,229.026 1453.43,229.07 1454,225.108 1454.57,225.53 1455.14,225.681 1455.71,226.955 1456.28,227.226 1456.84,226.27 1457.41,227.75 1457.98,230.909 1458.55,232.145 1459.12,231.839 1459.69,232.08 1460.25,232.045 1460.82,231.095 1461.39,231.255 1461.96,233.158 1462.53,231.896 1463.1,230.87 1463.66,230.839 1464.23,232.79 1464.8,230.806 1465.37,229.8 1465.94,230.955 1466.51,228.967 1467.07,225.996 1467.64,225.481 1468.21,222.755 1468.78,224.088 1469.35,224.554 1469.92,225.23 1470.48,227.94 1471.05,228.236 1471.62,224.156 1472.19,224.611 1472.76,225.939 1473.33,225.443 1473.89,225.895 1474.46,225.453 1475.03,224.96 1475.6,227.419 1476.17,228.704 1476.74,230.061 1477.31,230.512 1477.87,229.577 1478.44,230.874 1479.01,232.06 1479.58,230.193 1480.15,231.455 1480.72,232.449 1481.28,234.496 1481.85,234.443 1482.42,235.22 1482.99,231.712 1483.56,232.654 1484.13,232.826 1484.69,230.807 1485.26,231.847 1485.83,233.045 1486.4,235.013 1486.97,231.698 1487.54,232.836 1488.1,233.942 1488.67,233.868 1489.24,234.824 1489.81,233.638 1490.38,237.75 1490.95,236.342 1491.51,236.146 1492.08,235.682 1492.65,236.405 1493.22,234.961 1493.79,233.397 1494.36,233.168 1494.92,228.811 1495.49,226.97 1496.06,229.375 1496.63,229.665 1497.2,227.698 1497.77,228.758 1498.33,226.911 1498.9,226.225 1499.47,224.565 1500.04,226.055 1500.61,228.326 1501.18,228.359 1501.74,229.556 1502.31,228.502 1502.88,229.65 1503.45,229.614 1504.02,230.856 1504.59,231.853 1505.15,231.704 1505.72,231.056 1506.29,231.173 1506.86,234.153 1507.43,234.033 1508,233.927 1508.56,234.858 1509.13,235.517 1509.7,235.351 1510.27,234.232 1510.84,233.917 1511.41,235.769 1511.97,236.334 1512.54,235.724 1513.11,234.444 1513.68,230.956 1514.25,231.811 1514.82,230.748 1515.38,229.753 1515.95,230.951 1516.52,229.962 1517.09,229.046 1517.66,229.23 1518.23,229.32 1518.79,228.587 1519.36,228.765 1519.93,230.017 1520.5,227.091 1521.07,229.635 1521.64,229.559 1522.2,234.853 1522.77,239.785 1523.34,239.191 1523.91,237.749 1524.48,237.128 1525.05,236.527 1525.61,236.155 1526.18,236.83 1526.75,237.32 1527.32,237.66 1527.89,234.151 1528.46,234.832 1529.02,236.672 1529.59,237.354 1530.16,235.792 1530.73,234.338 1531.3,234.262 1531.87,232.949 1532.43,233.659 1533,234.425 1533.57,234.29 1534.14,235.046 1534.71,232.452 1535.28,231.244 1535.84,231.143 1536.41,234.305 1536.98,234.132 1537.55,230.486 1538.12,230.258 1538.69,230.283 1539.25,228.162 1539.82,225.019 1540.39,224.237 1540.96,225.485 1541.53,226.754 1542.1,226.74 1542.66,225.064 1543.23,226.389 1543.8,225.572 1544.37,226.104 1544.94,224.287 1545.51,225.719 1546.08,225.922 1546.64,225.186 1547.21,228.507 1547.78,229.629 1548.35,231.584 1548.92,230.702 1549.49,227.718 1550.05,226.178 1550.62,224.36 1551.19,223.63 1551.76,223.059 1552.33,224.668 1552.9,225.168 1553.46,224.572 1554.03,226.203 1554.6,224.575 1555.17,226.215 1555.74,227.802 1556.31,229.126 1556.87,229.402 1557.44,228.476 1558.01,228.98 1558.58,230.397 1559.15,228.294 1559.72,229.741 1560.28,229.089 1560.85,230.218 1561.42,231.166 1561.99,233.17 1562.56,236.471 1563.13,236.209 1563.69,237.974 1564.26,235.732 1564.83,232.459 1565.4,233.313 1565.97,232.146 1566.54,232.318 1567.1,231.171 1567.67,228.076 1568.24,230.594 1568.81,230.664 1569.38,230.386 1569.95,229.338 1570.51,229.391 1571.08,229.771 1571.65,231.067 1572.22,229.978 1572.79,229.208 1573.36,230.411 1573.92,228.358 1574.49,229.676 1575.06,230.898 1575.63,230.781 1576.2,231.936 1576.77,232.122 1577.33,233.096 1577.9,232.261 1578.47,232.084 1579.04,230.103 1579.61,231.126 1580.18,230.116 1580.74,229.126 1581.31,229.119 1581.88,230.397 1582.45,231.622 1583.02,232.724 1583.59,231.844 1584.15,230.788 1584.72,229.701 1585.29,229.775 1585.86,232.138 1586.43,232.277 1587,231.487 1587.56,232.749 1588.13,232.746 1588.7,231.556 1589.27,231.513 1589.84,231.463 1590.41,233.602 1590.97,235.712 1591.54,234.52 1592.11,237.404 1592.68,235.787 1593.25,236.716 1593.82,237.309 1594.38,236.751 1594.95,235.391 1595.52,237 1596.09,236.591 1596.66,235.335 1597.23,233.91 1597.79,232.734 1598.36,233.488 1598.93,234.44 1599.5,237.35 1600.07,237.842 1600.64,238.463 1601.2,236.8 1601.77,237.262 1602.34,235.537 1602.91,235.111 1603.48,234.71 1604.05,238.401 1604.61,237.704 1605.18,238.254 1605.75,236.916 1606.32,237.259 1606.89,235.682 1607.46,234.265 1608.02,233.821 1608.59,233.536 1609.16,236.14 1609.73,237.865 1610.3,237.252 1610.87,235.686 1611.43,234.174 1612,233.181 1612.57,229.828 1613.14,225.684 1613.71,226.751 1614.28,228.886 1614.84,229.075 1615.41,229.082 1615.98,228.056 1616.55,228.173 1617.12,228.574 1617.69,228.772 1618.26,229.684 1618.82,231.844 1619.39,231.56 1619.96,232.379 1620.53,232.221 1621.1,232.16 1621.67,231.994 1622.23,232.676 1622.8,233.629 1623.37,233.505 1623.94,231.238 1624.51,231.255 1625.08,232.1 1625.64,231.037 1626.21,230.923 1626.78,228.584 1627.35,225.501 1627.92,225.953 1628.49,226.398 1629.05,227.637 1629.62,229.816 1630.19,229.83 1630.76,232.062 1631.33,231.942 1631.9,234.02 1632.46,233.535 1633.03,233.049 1633.6,231.788 1634.17,229.365 1634.74,230.59 1635.31,228.277 1635.87,230.503 1636.44,229.562 1637.01,229.398 1637.58,228.508 1638.15,228.274 1638.72,227.566 1639.28,226.573 1639.85,223.776 1640.42,222.912 1640.99,223.302 1641.56,224.968 1642.13,225.139 1642.69,225.449 1643.26,224.64 1643.83,220.996 1644.4,221.709 1644.97,222.496 1645.54,222.112 1646.1,223.676 1646.67,224.257 1647.24,222.897 1647.81,223.74 1648.38,225.437 1648.95,225.884 1649.51,227.429 1650.08,230.596 1650.65,230.816 1651.22,228.908 1651.79,227.144 1652.36,226.597 1652.92,229.17 1653.49,231.431 1654.06,233.395 1654.63,234.258 1655.2,233.108 1655.77,234.129 1656.33,234.145 1656.9,233.945 1657.47,235.797 1658.04,234.293 1658.61,231.902 1659.18,232.823 1659.74,231.646 1660.31,232.941 1660.88,233.632 1661.45,231.333 1662.02,230.347 1662.59,230.049 1663.15,230.078 1663.72,230.28 1664.29,230.392 1664.86,230.547 1665.43,231.681 1666,232.797 1666.56,234.654 1667.13,234.304 1667.7,233.926 1668.27,232.969 1668.84,233.868 1669.41,233.762 1669.97,233.526 1670.54,232.384 1671.11,234.448 1671.68,234.397 1672.25,234.064 1672.82,232.944 1673.38,231.594 1673.95,230.663 1674.52,229.838 1675.09,229.792 1675.66,229.18 1676.23,227.134 1676.79,227.348 1677.36,224.619 1677.93,225.98 1678.5,227.472 1679.07,230.719 1679.64,231.724 1680.2,230.666 1680.77,231.563 1681.34,231.518 1681.91,230.496 1682.48,232.709 1683.05,233.751 1683.61,234.674 1684.18,234.403 1684.75,235.294 1685.32,235.968 1685.89,237.531 1686.46,236.197 1687.02,235.657 1687.59,235.325 1688.16,236.199 1688.73,234.748 1689.3,232.246 1689.87,232.179 1690.44,233.303 1691,234.115 1691.57,233.576 1692.14,234.402 1692.71,234.278 1693.28,234.118 1693.85,234.009 1694.41,233.841 1694.98,233.61 1695.55,235.501 1696.12,231.865 1696.69,230.678 1697.26,229.502 1697.82,232.554 1698.39,232.051 1698.96,231.081 1699.53,232.137 1700.1,232.312 1700.67,232.239 1701.23,232.108 1701.8,230.8 1702.37,231.745 1702.94,231.635 1703.51,231.218 1704.08,231.003 1704.64,229.805 1705.21,228.704 1705.78,228.49 1706.35,228.617 1706.92,227.631 1707.49,228.095 1708.05,225.324 1708.62,224.622 1709.19,226.37 1709.76,225.738 1710.33,226.885 1710.9,228.133 1711.46,228.295 1712.03,227.471 1712.6,228.708 1713.17,227.874 1713.74,226.957 1714.31,228.601 1714.87,227.743 1715.44,229.046 1716.01,230.522 1716.58,229.642 1717.15,230.776 1717.72,229.563 1718.28,228.691 1718.85,228.755 1719.42,230.891 1719.99,229.958 1720.56,232.358 1721.13,232.367 1721.69,230.129 1722.26,231.102 1722.83,231.182 1723.4,231.04 1723.97,231.037 1724.54,233.221 1725.1,231.924 1725.67,233.902 1726.24,232.608 1726.81,234.657 1727.38,232.487 1727.95,231.504 1728.51,232.412 1729.08,232.406 1729.65,230.383 1730.22,229.395 1730.79,227.463 1731.36,228.914 1731.92,227.169 1732.49,227.41 1733.06,226.805 1733.63,227.119 1734.2,228.54 1734.77,223.535 1735.33,223.114 1735.9,223.733 1736.47,221.308 1737.04,221.149 1737.61,223.988 1738.18,225.393 1738.74,227.119 1739.31,228.52 1739.88,227.775 1740.45,227.058 1741.02,227.469 1741.59,229.087 1742.15,229.376 1742.72,230.686 1743.29,230.845 1743.86,229.797 1744.43,231.181 1745,231.203 1745.56,231.241 1746.13,231.268 1746.7,232.386 1747.27,231.454 1747.84,232.426 1748.41,232.247 1748.97,232.255 1749.54,231.423 1750.11,232.515 1750.68,231.581 1751.25,232.873 1751.82,231.766 1752.38,232.808 1752.95,233.935 1753.52,235.9 1754.09,235.777 1754.66,235.712 1755.23,238.815 1755.79,238.438 1756.36,238.055 1756.93,237.719 1757.5,240.43 1758.07,239.779 1758.64,240.185 1759.21,240.59 1759.77,238.997 1760.34,237.424 1760.91,236.822 1761.48,237.149 1762.05,235.435 1762.62,238.418 1763.18,236.706 1763.75,236.281 1764.32,234.805 1764.89,234.311 1765.46,234.032 1766.03,233.773 1766.59,234.511 1767.16,234.214 1767.73,234.828 1768.3,233.298 1768.87,234.273 1769.44,231.835 1770,231.099 1770.57,230.944 1771.14,232.826 1771.71,232.544 1772.28,230.35 1772.85,230.417 1773.41,228.382 1773.98,228.518 1774.55,227.459 1775.12,225.564 1775.69,224.098 1776.26,224.517 1776.82,222.952 1777.39,221.438 1777.96,224.263 1778.53,225.838 1779.1,229.257 1779.67,228.369 1780.23,228.585 1780.8,228.57 1781.37,231.476 1781.94,229.185 1782.51,230.315 1783.08,231.386 1783.64,231.188 1784.21,231.347 1784.78,230.246 1785.35,231.3 1785.92,230.664 1786.49,230.614 1787.05,229.666 1787.62,228.823 1788.19,230.318 1788.76,228.344 1789.33,226.53 1789.9,228.628 1790.46,229.729 1791.03,230.747 1791.6,229.572 1792.17,227.59 1792.74,227.75 1793.31,227.88 1793.87,228.046 1794.44,226.187 1795.01,224.395 1795.58,222.774 1796.15,223.407 1796.72,226.905 1797.28,229.399 1797.85,229.619 1798.42,228.704 1798.99,227.936 1799.56,228.319 1800.13,227.479 1800.69,229.855 1801.26,229.064 1801.83,229.013 1802.4,227.357 1802.97,227.721 1803.54,229.249 1804.1,228.386 1804.67,230.849 1805.24,234.171 1805.81,234.04 1806.38,233.92 1806.95,236.237 1807.51,238.459 1808.08,235.046 1808.65,234.704 1809.22,234.565 1809.79,233.271 1810.36,234.244 1810.92,231.943 1811.49,232.106 1812.06,233.078 1812.63,232.97 1813.2,233.027 1813.77,230.824 1814.33,231.183 1814.9,230.947 1815.47,231.168 1816.04,231.33 1816.61,232.563 1817.18,230.558 1817.74,231.644 1818.31,229.503 1818.88,230.735 1819.45,231.948 1820.02,230.874 1820.59,230.959 1821.15,232.082 1821.72,230.861 1822.29,227.997 1822.86,225.272 1823.43,227.73 1824,225.938 1824.56,228.475 1825.13,228.686 1825.7,229.977 1826.27,231.459 1826.84,231.515 1827.41,231.688 1827.97,231.605 1828.54,233.669 1829.11,231.515 1829.68,232.576 1830.25,231.52 1830.82,228.394 1831.39,227.537 1831.95,226.802 1832.52,227.186 1833.09,228.609 1833.66,226.825 1834.23,227.396 1834.8,229.79 1835.36,230.013 1835.93,229.933 1836.5,230.228 1837.07,230.35 1837.64,229.629 1838.21,229.081 1838.77,228.453 1839.34,228.801 1839.91,230.01 1840.48,230.178 1841.05,235.637 1841.62,237.427 1842.18,237.129 1842.75,235.902 1843.32,237.712 1843.89,239.469 1844.46,239.694 1845.03,239.129 1845.59,240.715 1846.16,242.319 1846.73,242.636 1847.3,243.067 1847.87,241.272 1848.44,242.378 1849,240.73 1849.57,240.057 1850.14,240.523 1850.71,239.962 1851.28,240.429 1851.85,241.633 1852.41,242.767 1852.98,240.766 1853.55,239.978 1854.12,240.236 1854.69,240.743 1855.26,239.83 1855.82,238.986 1856.39,236.989 1856.96,237.484 1857.53,237.957 1858.1,237.209 1858.67,235.736 1859.23,234.292 1859.8,234.98 1860.37,234.493 1860.94,233.066 1861.51,233.886 1862.08,234.46 1862.64,234.031 1863.21,233.703 1863.78,234.031 1864.35,231.498 1864.92,231.202 1865.49,232.001 1866.05,232.787 1866.62,231.364 1867.19,230.324 1867.76,228.044 1868.33,226.922 1868.9,227.978 1869.46,228.135 1870.03,228.131 1870.6,229.174 1871.17,226.952 1871.74,228.029 1872.31,229.182 1872.87,230.18 1873.44,228.667 1874.01,227.522 1874.58,228.684 1875.15,226.449 1875.72,229.347 1876.28,229.306 1876.85,228.241 1877.42,228.246 1877.99,229.402 1878.56,228.614 1879.13,229.612 1879.69,227.589 1880.26,225.592 1880.83,228.836 1881.4,229.843 1881.97,229.675 1882.54,229.747 1883.1,231.781 1883.67,232.563 1884.24,233.445 1884.81,232.156 1885.38,232.836 1885.95,233.72 1886.51,236.582 1887.08,234.887 1887.65,235.433 1888.22,234.069 1888.79,232.649 1889.36,230.243 1889.92,229.182 1890.49,227.388 1891.06,228.508 1891.63,228.372 1892.2,228.443 1892.77,228.261 1893.33,226.251 1893.9,229.445 1894.47,229.326 1895.04,229.136 1895.61,229.166 1896.18,229.123 1896.74,227.159 1897.31,227.23 1897.88,228.131 1898.45,228.95 1899.02,228.724 1899.59,227.701 1900.16,228.767 1900.72,226.679 1901.29,224.851 1901.86,223.123 1902.43,224.525 1903,224.922 1903.57,223.227 1904.13,222.81 1904.7,220.235 1905.27,219.895 1905.84,221.626 1906.41,221.367 1906.98,222.077 1907.54,222.662 1908.11,224.347 1908.68,225.089 1909.25,223.542 1909.82,225.019 1910.39,226.432 1910.95,226.957 1911.52,225.111 1912.09,224.497 1912.66,223.911 1913.23,222.606 1913.8,223.297 1914.36,225.116 1914.93,226.684 1915.5,226.973 1916.07,225.345 1916.64,227.966 1917.21,229.454 1917.77,230.888 1918.34,231.094 1918.91,229.231 1919.48,229.518 1920.05,230.793 1920.62,231.127 1921.18,231.275 1921.75,231.414 1922.32,229.429 1922.89,230.848 1923.46,230.956 1924.03,230.246 1924.59,230.273 1925.16,230.577 1925.73,229.62 1926.3,229.932 1926.87,233.057 1927.44,234.922 1928,232.402 1928.57,233.483 1929.14,236.578 1929.71,237.639 1930.28,237.39 1930.85,238.242 1931.41,236.866 1931.98,236.461 1932.55,236.083 1933.12,234.686 1933.69,234.4 1934.26,235.346 1934.82,232.112 1935.39,232.15 1935.96,232.94 1936.53,236.205 1937.1,234.871 1937.67,234.423 1938.23,232.104 1938.8,233.116 1939.37,231.069 1939.94,232.129 1940.51,232.108 1941.08,232.079 1941.64,229.874 1942.21,231.236 1942.78,231.006 1943.35,227.878 1943.92,228.136 1944.49,228.179 1945.05,228.402 1945.62,228.437 1946.19,229.749 1946.76,231.944 1947.33,231.158 1947.9,231.145 1948.46,232.147 1949.03,234.294 1949.6,233.176 1950.17,232.852 1950.74,230.746 1951.31,230.978 1951.87,229.996 1952.44,230.249 1953.01,232.516 1953.58,231.507 1954.15,231.628 1954.72,230.736 1955.28,228.981 1955.85,230.203 1956.42,230.286 1956.99,229.483 1957.56,229.635 1958.13,229.957 1958.69,230.116 1959.26,231.381 1959.83,229.598 1960.4,228.779 1960.97,229.066 1961.54,229.298 1962.1,230.354 1962.67,230.321 1963.24,232.552 1963.81,231.266 1964.38,231.184 1964.95,232.248 1965.51,233.191 1966.08,232.123 1966.65,233.51 1967.22,234.661 1967.79,233.586 1968.36,233.509 1968.92,234.588 1969.49,233.202 1970.06,233.07 1970.63,235.21 1971.2,236.275 1971.77,235.992 1972.34,235.607 1972.9,234.356 1973.47,234.988 1974.04,235.921 1974.61,235.685 1975.18,233.386 1975.75,233.987 1976.31,234.864 1976.88,232.652 1977.45,232.402 1978.02,233.284 1978.59,233.928 1979.16,234.902 1979.72,236.826 1980.29,233.224 1980.86,234.075 1981.43,234.859 1982,230.686 1982.57,227.71 1983.13,225.967 1983.7,227.353 1984.27,227.467 1984.84,229.836 1985.41,229.698 1985.98,229.656 1986.54,231.627 1987.11,232.525 1987.68,231.191 1988.25,231.246 1988.82,232.282 1989.39,233.389 1989.95,234.312 1990.52,235.039 1991.09,235.843 1991.66,235.487 1992.23,236.248 1992.8,236.8 1993.36,235.431 1993.93,235.24 1994.5,234.952 1995.07,233.428 1995.64,234.44 1996.21,234.176 1996.77,234.735 1997.34,234.327 1997.91,233.053 1998.48,233.67 1999.05,235.242 1999.62,234.006 2000.18,233.666 2000.75,233.457 2001.32,232.301 2001.89,231.123 2002.46,229.867 2003.03,230.755 2003.59,229.573 2004.16,232.73 2004.73,232.725 2005.3,230.313 2005.87,229.086 2006.44,228.063 2007,228.379 2007.57,227.377 2008.14,227.703 2008.71,228.949 2009.28,229.01 2009.85,226.912 2010.41,229.027 2010.98,228.157 2011.55,229.339 2012.12,229.451 2012.69,227.442 2013.26,227.804 2013.82,228.844 2014.39,229.105 2014.96,228.91 2015.53,229.934 2016.1,228.912 2016.67,228.022 2017.23,226.372 2017.8,226.606 2018.37,227.592 2018.94,227.749 2019.51,228.087 2020.08,228.264 2020.64,227.569 2021.21,225.81 2021.78,226.959 2022.35,227.401 2022.92,226.738 2023.49,225.28 2024.05,226.609 2024.62,227.905 2025.19,228.319 2025.76,228.662 2026.33,228.961 2026.9,230.299 2027.46,231.367 2028.03,231.37 2028.6,229.294 2029.17,229.413 2029.74,230.598 2030.31,230.593 2030.87,229.579 2031.44,227.555 2032.01,224.724 2032.58,229.365 2033.15,228.487 2033.72,230.847 2034.28,231.295 2034.85,231.354 2035.42,232.29 2035.99,230.189 2036.56,229.315 2037.13,230.73 2037.69,228.862 2038.26,232.078 2038.83,230.236 2039.4,233.338 2039.97,234.218 2040.54,232.958 2041.11,231.687 2041.67,232.597 2042.24,233.471 2042.81,234.436 2043.38,234.386 2043.95,234.354 2044.52,234.036 2045.08,234.714 2045.65,234.522 2046.22,232.177 2046.79,232.275 2047.36,233.265 2047.93,232.147 2048.49,235.02 2049.06,234.725 2049.63,235.506 2050.2,232.082 2050.77,231.11 2051.34,232.113 2051.9,233.89 2052.47,231.473 2053.04,231.468 2053.61,228.482 2054.18,227.621 2054.75,225.738 2055.31,227.278 2055.88,230.834 2056.45,231.847 2057.02,231.623 2057.59,230.747 2058.16,230.871 2058.72,230.865 2059.29,230.651 2059.86,229.465 2060.43,228.513 2061,230.814 2061.57,230.847 2062.13,229.852 2062.7,232.263 2063.27,233.289 2063.84,231.957 2064.41,230.784 2064.98,230.92 2065.54,231.784 2066.11,231.688 2066.68,229.519 2067.25,229.654 2067.82,229.632 2068.39,230.746 2068.95,229.916 2069.52,229.114 2070.09,230.273 2070.66,229.219 2071.23,230.606 2071.8,230.758 2072.36,232.793 2072.93,233.783 2073.5,231.384 2074.07,232.379 2074.64,234.584 2075.21,235.416 2075.77,234.08 2076.34,233.796 2076.91,235.44 2077.48,236.162 2078.05,236.687 2078.62,234.112 2079.18,233.575 2079.75,233.386 2080.32,233.184 2080.89,232.974 2081.46,231.82 2082.03,231.88 2082.59,231.962 2083.16,232.802 2083.73,231.575 2084.3,229.516 2084.87,227.537 2085.44,228.441 2086,227.551 2086.57,225.796 2087.14,226.166 2087.71,228.522 2088.28,230.798 2088.85,232.651 2089.41,232.498 2089.98,230.533 2090.55,231.57 2091.12,233.885 2091.69,234.815 2092.26,236.538 2092.82,236.086 2093.39,235.79 2093.96,235.504 2094.53,237.153 2095.1,235.642 2095.67,235.256 2096.23,235.062 2096.8,233.702 2097.37,235.329 2097.94,234.84 2098.51,232.532 2099.08,230.173 2099.64,230.093 2100.21,229.112 2100.78,227.967 2101.35,229.145 2101.92,230.221 2102.49,229.064 2103.05,229.089 2103.62,228.806 2104.19,229.071 2104.76,228.326 2105.33,229.568 2105.9,228.699 2106.46,227.777 2107.03,226.542 2107.6,227.827 2108.17,229.3 2108.74,230.218 2109.31,230.471 2109.87,231.397 2110.44,232.415 2111.01,232.531 2111.58,231.482 2112.15,230.271 2112.72,232.503 2113.29,232.321 2113.85,232.296 2114.42,231.235 2114.99,230.093 2115.56,229.137 2116.13,230.014 2116.7,229.03 2117.26,228.945 2117.83,229.08 2118.4,229.24 2118.97,229.406 2119.54,229.501 2120.11,228.518 2120.67,228.764 2121.24,227.804 2121.81,228.996 2122.38,227.161 2122.95,230.392 2123.52,229.489 2124.08,230.639 2124.65,230.769 2125.22,229.816 2125.79,228.673 2126.36,228.991 2126.93,230.323 2127.49,231.458 2128.06,228.305 2128.63,227.36 2129.2,227.575 2129.77,227.003 2130.34,226.301 2130.9,227.955 2131.47,227.256 2132.04,227.668 2132.61,229.169 2133.18,229.463 2133.75,229.65 2134.31,229.659 2134.88,228.685 2135.45,228.934 2136.02,227.151 2136.59,229.487 2137.16,230.729 2137.72,230.821 2138.29,232.013 2138.86,232.85 2139.43,231.795 2140,233.011 2140.57,237.1 2141.13,236.715 2141.7,236.423 2142.27,235.27 2142.84,237.142 2143.41,237.922 2143.98,238.366 2144.54,236.867 2145.11,236.625 2145.68,235.193 2146.25,234.126 2146.82,232.991 2147.39,233.017 2147.95,233.02 2148.52,233.873 2149.09,232.407 2149.66,232.256 2150.23,234.443 2150.8,234.196 2151.36,234.937 2151.93,233.591 2152.5,233.294 2153.07,233.138 2153.64,232.794 2154.21,232.522 2154.77,234.439 2155.34,234.148 2155.91,233.87 2156.48,233.688 2157.05,232.31 2157.62,232.271 2158.18,231.761 2158.75,230.584 2159.32,231.669 2159.89,227.411 \"/>\n<path clip-path=\"url(#clip660)\" d=\"M1649.46 1245.03 L2150.8 1245.03 L2150.8 1089.51 L1649.46 1089.51  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip660)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1649.46,1245.03 2150.8,1245.03 2150.8,1089.51 1649.46,1089.51 1649.46,1245.03 \"/>\n<polyline clip-path=\"url(#clip660)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" stroke-dasharray=\"16, 10\" points=\"1669.53,1141.35 1789.98,1141.35 \"/>\n<path clip-path=\"url(#clip660)\" d=\"M1817.46 1125.34 L1817.46 1132.71 L1826.23 1132.71 L1826.23 1136.02 L1817.46 1136.02 L1817.46 1150.09 Q1817.46 1153.26 1818.32 1154.16 Q1819.2 1155.07 1821.86 1155.07 L1826.23 1155.07 L1826.23 1158.63 L1821.86 1158.63 Q1816.93 1158.63 1815.05 1156.8 Q1813.18 1154.95 1813.18 1150.09 L1813.18 1136.02 L1810.05 1136.02 L1810.05 1132.71 L1813.18 1132.71 L1813.18 1125.34 L1817.46 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip660)\" d=\"M1843.62 1145.6 Q1838.46 1145.6 1836.47 1146.78 Q1834.48 1147.96 1834.48 1150.81 Q1834.48 1153.08 1835.96 1154.42 Q1837.46 1155.74 1840.03 1155.74 Q1843.57 1155.74 1845.7 1153.24 Q1847.86 1150.72 1847.86 1146.55 L1847.86 1145.6 L1843.62 1145.6 M1852.11 1143.84 L1852.11 1158.63 L1847.86 1158.63 L1847.86 1154.7 Q1846.4 1157.06 1844.22 1158.19 Q1842.05 1159.3 1838.9 1159.3 Q1834.92 1159.3 1832.55 1157.08 Q1830.22 1154.84 1830.22 1151.09 Q1830.22 1146.71 1833.13 1144.49 Q1836.07 1142.27 1841.88 1142.27 L1847.86 1142.27 L1847.86 1141.85 Q1847.86 1138.91 1845.91 1137.31 Q1843.99 1135.69 1840.49 1135.69 Q1838.27 1135.69 1836.17 1136.22 Q1834.06 1136.76 1832.11 1137.82 L1832.11 1133.89 Q1834.45 1132.98 1836.65 1132.54 Q1838.85 1132.08 1840.93 1132.08 Q1846.56 1132.08 1849.34 1135 Q1852.11 1137.91 1852.11 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip660)\" d=\"M1875.91 1136.69 Q1875.19 1136.27 1874.34 1136.09 Q1873.5 1135.88 1872.48 1135.88 Q1868.87 1135.88 1866.93 1138.24 Q1865.01 1140.58 1865.01 1144.97 L1865.01 1158.63 L1860.73 1158.63 L1860.73 1132.71 L1865.01 1132.71 L1865.01 1136.73 Q1866.35 1134.37 1868.5 1133.24 Q1870.66 1132.08 1873.73 1132.08 Q1874.17 1132.08 1874.71 1132.15 Q1875.24 1132.2 1875.89 1132.31 L1875.91 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip660)\" d=\"M1896.6 1145.37 Q1896.6 1140.74 1894.68 1138.19 Q1892.79 1135.65 1889.34 1135.65 Q1885.91 1135.65 1883.99 1138.19 Q1882.09 1140.74 1882.09 1145.37 Q1882.09 1149.97 1883.99 1152.52 Q1885.91 1155.07 1889.34 1155.07 Q1892.79 1155.07 1894.68 1152.52 Q1896.6 1149.97 1896.6 1145.37 M1900.86 1155.41 Q1900.86 1162.03 1897.92 1165.25 Q1894.98 1168.49 1888.92 1168.49 Q1886.67 1168.49 1884.68 1168.15 Q1882.69 1167.82 1880.82 1167.13 L1880.82 1162.98 Q1882.69 1164 1884.52 1164.49 Q1886.35 1164.97 1888.25 1164.97 Q1892.44 1164.97 1894.52 1162.78 Q1896.6 1160.6 1896.6 1156.18 L1896.6 1154.07 Q1895.29 1156.36 1893.23 1157.5 Q1891.17 1158.63 1888.29 1158.63 Q1883.53 1158.63 1880.61 1155 Q1877.69 1151.36 1877.69 1145.37 Q1877.69 1139.35 1880.61 1135.72 Q1883.53 1132.08 1888.29 1132.08 Q1891.17 1132.08 1893.23 1133.22 Q1895.29 1134.35 1896.6 1136.64 L1896.6 1132.71 L1900.86 1132.71 L1900.86 1155.41 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip660)\" d=\"M1931.81 1144.6 L1931.81 1146.69 L1912.23 1146.69 Q1912.51 1151.09 1914.87 1153.4 Q1917.25 1155.69 1921.49 1155.69 Q1923.94 1155.69 1926.23 1155.09 Q1928.55 1154.49 1930.82 1153.28 L1930.82 1157.31 Q1928.53 1158.28 1926.12 1158.79 Q1923.71 1159.3 1921.23 1159.3 Q1915.03 1159.3 1911.4 1155.69 Q1907.79 1152.08 1907.79 1145.92 Q1907.79 1139.56 1911.21 1135.83 Q1914.66 1132.08 1920.49 1132.08 Q1925.73 1132.08 1928.76 1135.46 Q1931.81 1138.82 1931.81 1144.6 M1927.55 1143.35 Q1927.51 1139.86 1925.59 1137.78 Q1923.69 1135.69 1920.54 1135.69 Q1916.98 1135.69 1914.82 1137.71 Q1912.69 1139.72 1912.37 1143.38 L1927.55 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip660)\" d=\"M1943.02 1125.34 L1943.02 1132.71 L1951.79 1132.71 L1951.79 1136.02 L1943.02 1136.02 L1943.02 1150.09 Q1943.02 1153.26 1943.87 1154.16 Q1944.75 1155.07 1947.41 1155.07 L1951.79 1155.07 L1951.79 1158.63 L1947.41 1158.63 Q1942.48 1158.63 1940.61 1156.8 Q1938.73 1154.95 1938.73 1150.09 L1938.73 1136.02 L1935.61 1136.02 L1935.61 1132.71 L1938.73 1132.71 L1938.73 1125.34 L1943.02 1125.34 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip660)\" d=\"M1954.91 1132.71 L1959.17 1132.71 L1964.5 1152.94 L1969.8 1132.71 L1974.82 1132.71 L1980.15 1152.94 L1985.45 1132.71 L1989.71 1132.71 L1982.92 1158.63 L1977.9 1158.63 L1972.32 1137.38 L1966.72 1158.63 L1961.7 1158.63 L1954.91 1132.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip660)\" d=\"M2007.95 1145.6 Q2002.78 1145.6 2000.79 1146.78 Q1998.8 1147.96 1998.8 1150.81 Q1998.8 1153.08 2000.28 1154.42 Q2001.79 1155.74 2004.36 1155.74 Q2007.9 1155.74 2010.03 1153.24 Q2012.18 1150.72 2012.18 1146.55 L2012.18 1145.6 L2007.95 1145.6 M2016.44 1143.84 L2016.44 1158.63 L2012.18 1158.63 L2012.18 1154.7 Q2010.72 1157.06 2008.55 1158.19 Q2006.37 1159.3 2003.22 1159.3 Q1999.24 1159.3 1996.88 1157.08 Q1994.54 1154.84 1994.54 1151.09 Q1994.54 1146.71 1997.46 1144.49 Q2000.4 1142.27 2006.21 1142.27 L2012.18 1142.27 L2012.18 1141.85 Q2012.18 1138.91 2010.24 1137.31 Q2008.32 1135.69 2004.82 1135.69 Q2002.6 1135.69 2000.49 1136.22 Q1998.39 1136.76 1996.44 1137.82 L1996.44 1133.89 Q1998.78 1132.98 2000.98 1132.54 Q2003.18 1132.08 2005.26 1132.08 Q2010.89 1132.08 2013.66 1135 Q2016.44 1137.91 2016.44 1143.84 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip660)\" d=\"M2025.22 1122.61 L2029.47 1122.61 L2029.47 1158.63 L2025.22 1158.63 L2025.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip660)\" d=\"M2038.22 1122.61 L2042.51 1122.61 L2042.51 1143.89 L2055.22 1132.71 L2060.65 1132.71 L2046.91 1144.84 L2061.23 1158.63 L2055.68 1158.63 L2042.51 1145.97 L2042.51 1158.63 L2038.22 1158.63 L2038.22 1122.61 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip660)\" d=\"M2086.33 1144.6 L2086.33 1146.69 L2066.74 1146.69 Q2067.02 1151.09 2069.38 1153.4 Q2071.77 1155.69 2076 1155.69 Q2078.46 1155.69 2080.75 1155.09 Q2083.06 1154.49 2085.33 1153.28 L2085.33 1157.31 Q2083.04 1158.28 2080.63 1158.79 Q2078.22 1159.3 2075.75 1159.3 Q2069.54 1159.3 2065.91 1155.69 Q2062.3 1152.08 2062.3 1145.92 Q2062.3 1139.56 2065.72 1135.83 Q2069.17 1132.08 2075.01 1132.08 Q2080.24 1132.08 2083.27 1135.46 Q2086.33 1138.82 2086.33 1144.6 M2082.07 1143.35 Q2082.02 1139.86 2080.1 1137.78 Q2078.2 1135.69 2075.05 1135.69 Q2071.49 1135.69 2069.34 1137.71 Q2067.21 1139.72 2066.88 1143.38 L2082.07 1143.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip660)\" d=\"M2108.34 1136.69 Q2107.62 1136.27 2106.77 1136.09 Q2105.93 1135.88 2104.91 1135.88 Q2101.3 1135.88 2099.36 1138.24 Q2097.44 1140.58 2097.44 1144.97 L2097.44 1158.63 L2093.15 1158.63 L2093.15 1132.71 L2097.44 1132.71 L2097.44 1136.73 Q2098.78 1134.37 2100.93 1133.24 Q2103.09 1132.08 2106.16 1132.08 Q2106.6 1132.08 2107.14 1132.15 Q2107.67 1132.2 2108.32 1132.31 L2108.34 1136.69 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip660)\" d=\"M2129.34 1133.47 L2129.34 1137.5 Q2127.53 1136.57 2125.59 1136.11 Q2123.64 1135.65 2121.56 1135.65 Q2118.39 1135.65 2116.79 1136.62 Q2115.21 1137.59 2115.21 1139.53 Q2115.21 1141.02 2116.35 1141.87 Q2117.48 1142.71 2120.91 1143.47 L2122.37 1143.79 Q2126.9 1144.77 2128.8 1146.55 Q2130.72 1148.31 2130.72 1151.48 Q2130.72 1155.09 2127.85 1157.2 Q2125.01 1159.3 2120.01 1159.3 Q2117.92 1159.3 2115.65 1158.89 Q2113.41 1158.49 2110.91 1157.68 L2110.91 1153.28 Q2113.27 1154.51 2115.56 1155.14 Q2117.85 1155.74 2120.1 1155.74 Q2123.11 1155.74 2124.73 1154.72 Q2126.35 1153.68 2126.35 1151.8 Q2126.35 1150.07 2125.17 1149.14 Q2124.01 1148.22 2120.05 1147.36 L2118.57 1147.01 Q2114.61 1146.18 2112.85 1144.47 Q2111.09 1142.73 2111.09 1139.72 Q2111.09 1136.06 2113.69 1134.07 Q2116.28 1132.08 2121.05 1132.08 Q2123.41 1132.08 2125.49 1132.43 Q2127.58 1132.78 2129.34 1133.47 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip660)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1669.53,1193.19 1789.98,1193.19 \"/>\n<path clip-path=\"url(#clip660)\" d=\"M1831.77 1194.82 L1831.77 1210.47 L1827.51 1210.47 L1827.51 1194.96 Q1827.51 1191.28 1826.07 1189.45 Q1824.64 1187.62 1821.77 1187.62 Q1818.32 1187.62 1816.33 1189.82 Q1814.34 1192.02 1814.34 1195.82 L1814.34 1210.47 L1810.05 1210.47 L1810.05 1184.55 L1814.34 1184.55 L1814.34 1188.57 Q1815.86 1186.24 1817.92 1185.08 Q1820.01 1183.92 1822.72 1183.92 Q1827.18 1183.92 1829.48 1186.7 Q1831.77 1189.45 1831.77 1194.82 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip660)\" d=\"M1850.31 1187.53 Q1846.88 1187.53 1844.89 1190.22 Q1842.9 1192.88 1842.9 1197.53 Q1842.9 1202.18 1844.87 1204.87 Q1846.86 1207.53 1850.31 1207.53 Q1853.71 1207.53 1855.7 1204.85 Q1857.69 1202.16 1857.69 1197.53 Q1857.69 1192.93 1855.7 1190.24 Q1853.71 1187.53 1850.31 1187.53 M1850.31 1183.92 Q1855.86 1183.92 1859.04 1187.53 Q1862.21 1191.14 1862.21 1197.53 Q1862.21 1203.9 1859.04 1207.53 Q1855.86 1211.14 1850.31 1211.14 Q1844.73 1211.14 1841.56 1207.53 Q1838.41 1203.9 1838.41 1197.53 Q1838.41 1191.14 1841.56 1187.53 Q1844.73 1183.92 1850.31 1183.92 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip660)\" d=\"M1884.29 1188.53 Q1883.57 1188.11 1882.72 1187.93 Q1881.88 1187.72 1880.86 1187.72 Q1877.25 1187.72 1875.31 1190.08 Q1873.39 1192.42 1873.39 1196.81 L1873.39 1210.47 L1869.11 1210.47 L1869.11 1184.55 L1873.39 1184.55 L1873.39 1188.57 Q1874.73 1186.21 1876.88 1185.08 Q1879.04 1183.92 1882.11 1183.92 Q1882.55 1183.92 1883.09 1183.99 Q1883.62 1184.04 1884.27 1184.15 L1884.29 1188.53 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip660)\" d=\"M1908.11 1189.52 Q1909.71 1186.65 1911.93 1185.29 Q1914.15 1183.92 1917.16 1183.92 Q1921.21 1183.92 1923.41 1186.77 Q1925.61 1189.59 1925.61 1194.82 L1925.61 1210.47 L1921.33 1210.47 L1921.33 1194.96 Q1921.33 1191.24 1920.01 1189.43 Q1918.69 1187.62 1915.98 1187.62 Q1912.67 1187.62 1910.75 1189.82 Q1908.83 1192.02 1908.83 1195.82 L1908.83 1210.47 L1904.54 1210.47 L1904.54 1194.96 Q1904.54 1191.21 1903.23 1189.43 Q1901.91 1187.62 1899.15 1187.62 Q1895.89 1187.62 1893.97 1189.85 Q1892.04 1192.05 1892.04 1195.82 L1892.04 1210.47 L1887.76 1210.47 L1887.76 1184.55 L1892.04 1184.55 L1892.04 1188.57 Q1893.5 1186.19 1895.54 1185.06 Q1897.58 1183.92 1900.38 1183.92 Q1903.2 1183.92 1905.17 1185.36 Q1907.16 1186.79 1908.11 1189.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /></svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"After an initial equilibriation period, the norm fluctuates around the target number of walkers.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Now, let's look at using the shift to estimate the ground state energy of H. The mean of the shift is a useful estimator of the energy. Calculating the error bars is a bit more involved as autocorrelations have to be removed from the time series. This can be done with the function shift_estimator, which performs a blocking analysis on the shift column of the dataframe.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"se = shift_estimator(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"BlockingResult{Float64}\n  mean = -4.028 ± 0.028\n  with uncertainty of ± 0.0024923764105504284\n  from 62 blocks after 5 transformations (k = 6).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Here, se contains the calculated mean and standard errors of the shift, as well as some additional information related to the blocking analysis.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Computing the error of the projected energy is a bit more complicated, as it's a ratio of fluctuating variables contained in the hproj and vproj columns in the dataframe. Thankfully, the complications are handled by the function projected_energy.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"pe = projected_energy(df; skip=steps_equilibrate)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"RatioBlockingResult{Float64,MonteCarloMeasurements.Particles{Float64, 2000}}\n  ratio = -4.0148 ± (0.00192233, 0.00176043) (MC)\n  95% confidence interval: [-4.01859, -4.01104]) (MC)\n  linear error propagation: -4.01472 ± 0.00190941\n  |δ_y| = |0.00123148| (≤ 0.1 for normal approx)\n  Blocking successful with 31 blocks after 6 transformations (k = 7).\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The result is a ratio distribution. We extract its median and the edges of the 95% confidence interval.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"v = val_and_errs(pe; p=0.95)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"(val = -4.014801052826478, val_l = 0.003793596100079455, val_u = 0.0037640395254978642)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Let's visualise these estimators together with the time series of the shift.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"plot(df.steps, df.shift, ylabel=\"energy\", xlabel=\"steps\", label=\"shift\", margin = 1Plots.cm)\n\nplot!(x->se.mean, df.steps[steps_equilibrate+1:end], ribbon=se.err, label=\"shift mean\")\nplot!(\n    x -> v.val, df.steps[steps_equilibrate+1:end], ribbon=(v.val_l,v.val_u),\n    label=\"projected energy\",\n)\nlens!([steps_equilibrate, last_step], [-5.1, -2.9]; inset=(1, bbox(0.2, 0.25, 0.6, 0.4)))","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"600\" height=\"400\" viewBox=\"0 0 2400 1600\">\n<defs>\n  <clipPath id=\"clip690\">\n    <rect x=\"0\" y=\"0\" width=\"2400\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip690)\" d=\"M0 1600 L2400 1600 L2400 0 L0 0  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip691\">\n    <rect x=\"480\" y=\"0\" width=\"1681\" height=\"1600\"/>\n  </clipPath>\n</defs>\n<path clip-path=\"url(#clip690)\" d=\"M346.853 1281.45 L2211.02 1281.45 L2211.02 188.976 L346.853 188.976  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip692\">\n    <rect x=\"346\" y=\"188\" width=\"1865\" height=\"1093\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip692)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"399.026,1281.45 399.026,188.976 \"/>\n<polyline clip-path=\"url(#clip692)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"985.439,1281.45 985.439,188.976 \"/>\n<polyline clip-path=\"url(#clip692)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1571.85,1281.45 1571.85,188.976 \"/>\n<polyline clip-path=\"url(#clip692)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"2158.26,1281.45 2158.26,188.976 \"/>\n<polyline clip-path=\"url(#clip690)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 2211.02,1281.45 \"/>\n<polyline clip-path=\"url(#clip690)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.026,1281.45 399.026,1262.55 \"/>\n<polyline clip-path=\"url(#clip690)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1281.45 985.439,1262.55 \"/>\n<polyline clip-path=\"url(#clip690)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1571.85,1281.45 1571.85,1262.55 \"/>\n<polyline clip-path=\"url(#clip690)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"2158.26,1281.45 2158.26,1262.55 \"/>\n<path clip-path=\"url(#clip690)\" d=\"M399.026 1312.37 Q395.415 1312.37 393.587 1315.93 Q391.781 1319.47 391.781 1326.6 Q391.781 1333.71 393.587 1337.27 Q395.415 1340.82 399.026 1340.82 Q402.661 1340.82 404.466 1337.27 Q406.295 1333.71 406.295 1326.6 Q406.295 1319.47 404.466 1315.93 Q402.661 1312.37 399.026 1312.37 M399.026 1308.66 Q404.837 1308.66 407.892 1313.27 Q410.971 1317.85 410.971 1326.6 Q410.971 1335.33 407.892 1339.94 Q404.837 1344.52 399.026 1344.52 Q393.216 1344.52 390.138 1339.94 Q387.082 1335.33 387.082 1326.6 Q387.082 1317.85 390.138 1313.27 Q393.216 1308.66 399.026 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M929.965 1339.91 L937.604 1339.91 L937.604 1313.55 L929.293 1315.21 L929.293 1310.95 L937.557 1309.29 L942.233 1309.29 L942.233 1339.91 L949.872 1339.91 L949.872 1343.85 L929.965 1343.85 L929.965 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M969.316 1312.37 Q965.705 1312.37 963.877 1315.93 Q962.071 1319.47 962.071 1326.6 Q962.071 1333.71 963.877 1337.27 Q965.705 1340.82 969.316 1340.82 Q972.951 1340.82 974.756 1337.27 Q976.585 1333.71 976.585 1326.6 Q976.585 1319.47 974.756 1315.93 Q972.951 1312.37 969.316 1312.37 M969.316 1308.66 Q975.127 1308.66 978.182 1313.27 Q981.261 1317.85 981.261 1326.6 Q981.261 1335.33 978.182 1339.94 Q975.127 1344.52 969.316 1344.52 Q963.506 1344.52 960.428 1339.94 Q957.372 1335.33 957.372 1326.6 Q957.372 1317.85 960.428 1313.27 Q963.506 1308.66 969.316 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M999.478 1312.37 Q995.867 1312.37 994.038 1315.93 Q992.233 1319.47 992.233 1326.6 Q992.233 1333.71 994.038 1337.27 Q995.867 1340.82 999.478 1340.82 Q1003.11 1340.82 1004.92 1337.27 Q1006.75 1333.71 1006.75 1326.6 Q1006.75 1319.47 1004.92 1315.93 Q1003.11 1312.37 999.478 1312.37 M999.478 1308.66 Q1005.29 1308.66 1008.34 1313.27 Q1011.42 1317.85 1011.42 1326.6 Q1011.42 1335.33 1008.34 1339.94 Q1005.29 1344.52 999.478 1344.52 Q993.668 1344.52 990.589 1339.94 Q987.534 1335.33 987.534 1326.6 Q987.534 1317.85 990.589 1313.27 Q993.668 1308.66 999.478 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M1029.64 1312.37 Q1026.03 1312.37 1024.2 1315.93 Q1022.39 1319.47 1022.39 1326.6 Q1022.39 1333.71 1024.2 1337.27 Q1026.03 1340.82 1029.64 1340.82 Q1033.27 1340.82 1035.08 1337.27 Q1036.91 1333.71 1036.91 1326.6 Q1036.91 1319.47 1035.08 1315.93 Q1033.27 1312.37 1029.64 1312.37 M1029.64 1308.66 Q1035.45 1308.66 1038.51 1313.27 Q1041.58 1317.85 1041.58 1326.6 Q1041.58 1335.33 1038.51 1339.94 Q1035.45 1344.52 1029.64 1344.52 Q1023.83 1344.52 1020.75 1339.94 Q1017.7 1335.33 1017.7 1326.6 Q1017.7 1317.85 1020.75 1313.27 Q1023.83 1308.66 1029.64 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M1520.46 1339.91 L1536.78 1339.91 L1536.78 1343.85 L1514.84 1343.85 L1514.84 1339.91 Q1517.5 1337.16 1522.08 1332.53 Q1526.69 1327.88 1527.87 1326.53 Q1530.12 1324.01 1531 1322.27 Q1531.9 1320.51 1531.9 1318.82 Q1531.9 1316.07 1529.95 1314.33 Q1528.03 1312.6 1524.93 1312.6 Q1522.73 1312.6 1520.28 1313.36 Q1517.85 1314.13 1515.07 1315.68 L1515.07 1310.95 Q1517.89 1309.82 1520.35 1309.24 Q1522.8 1308.66 1524.84 1308.66 Q1530.21 1308.66 1533.4 1311.35 Q1536.6 1314.03 1536.6 1318.52 Q1536.6 1320.65 1535.79 1322.57 Q1535 1324.47 1532.89 1327.07 Q1532.31 1327.74 1529.21 1330.95 Q1526.11 1334.15 1520.46 1339.91 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M1556.6 1312.37 Q1552.99 1312.37 1551.16 1315.93 Q1549.35 1319.47 1549.35 1326.6 Q1549.35 1333.71 1551.16 1337.27 Q1552.99 1340.82 1556.6 1340.82 Q1560.23 1340.82 1562.04 1337.27 Q1563.87 1333.71 1563.87 1326.6 Q1563.87 1319.47 1562.04 1315.93 Q1560.23 1312.37 1556.6 1312.37 M1556.6 1308.66 Q1562.41 1308.66 1565.46 1313.27 Q1568.54 1317.85 1568.54 1326.6 Q1568.54 1335.33 1565.46 1339.94 Q1562.41 1344.52 1556.6 1344.52 Q1550.79 1344.52 1547.71 1339.94 Q1544.65 1335.33 1544.65 1326.6 Q1544.65 1317.85 1547.71 1313.27 Q1550.79 1308.66 1556.6 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M1586.76 1312.37 Q1583.15 1312.37 1581.32 1315.93 Q1579.51 1319.47 1579.51 1326.6 Q1579.51 1333.71 1581.32 1337.27 Q1583.15 1340.82 1586.76 1340.82 Q1590.39 1340.82 1592.2 1337.27 Q1594.03 1333.71 1594.03 1326.6 Q1594.03 1319.47 1592.2 1315.93 Q1590.39 1312.37 1586.76 1312.37 M1586.76 1308.66 Q1592.57 1308.66 1595.62 1313.27 Q1598.7 1317.85 1598.7 1326.6 Q1598.7 1335.33 1595.62 1339.94 Q1592.57 1344.52 1586.76 1344.52 Q1580.95 1344.52 1577.87 1339.94 Q1574.81 1335.33 1574.81 1326.6 Q1574.81 1317.85 1577.87 1313.27 Q1580.95 1308.66 1586.76 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M1616.92 1312.37 Q1613.31 1312.37 1611.48 1315.93 Q1609.68 1319.47 1609.68 1326.6 Q1609.68 1333.71 1611.48 1337.27 Q1613.31 1340.82 1616.92 1340.82 Q1620.55 1340.82 1622.36 1337.27 Q1624.19 1333.71 1624.19 1326.6 Q1624.19 1319.47 1622.36 1315.93 Q1620.55 1312.37 1616.92 1312.37 M1616.92 1308.66 Q1622.73 1308.66 1625.79 1313.27 Q1628.87 1317.85 1628.87 1326.6 Q1628.87 1335.33 1625.79 1339.94 Q1622.73 1344.52 1616.92 1344.52 Q1611.11 1344.52 1608.03 1339.94 Q1604.98 1335.33 1604.98 1326.6 Q1604.98 1317.85 1608.03 1313.27 Q1611.11 1308.66 1616.92 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M2116.94 1325.21 Q2120.3 1325.93 2122.18 1328.2 Q2124.07 1330.47 2124.07 1333.8 Q2124.07 1338.92 2120.56 1341.72 Q2117.04 1344.52 2110.56 1344.52 Q2108.38 1344.52 2106.07 1344.08 Q2103.77 1343.66 2101.32 1342.81 L2101.32 1338.29 Q2103.26 1339.43 2105.58 1340 Q2107.89 1340.58 2110.42 1340.58 Q2114.82 1340.58 2117.11 1338.85 Q2119.42 1337.11 2119.42 1333.8 Q2119.42 1330.75 2117.27 1329.03 Q2115.14 1327.3 2111.32 1327.3 L2107.29 1327.3 L2107.29 1323.45 L2111.51 1323.45 Q2114.95 1323.45 2116.78 1322.09 Q2118.61 1320.7 2118.61 1318.11 Q2118.61 1315.44 2116.71 1314.03 Q2114.84 1312.6 2111.32 1312.6 Q2109.4 1312.6 2107.2 1313.01 Q2105 1313.43 2102.36 1314.31 L2102.36 1310.14 Q2105.02 1309.4 2107.34 1309.03 Q2109.68 1308.66 2111.74 1308.66 Q2117.06 1308.66 2120.16 1311.09 Q2123.26 1313.5 2123.26 1317.62 Q2123.26 1320.49 2121.62 1322.48 Q2119.98 1324.45 2116.94 1325.21 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M2142.94 1312.37 Q2139.33 1312.37 2137.5 1315.93 Q2135.69 1319.47 2135.69 1326.6 Q2135.69 1333.71 2137.5 1337.27 Q2139.33 1340.82 2142.94 1340.82 Q2146.57 1340.82 2148.38 1337.27 Q2150.21 1333.71 2150.21 1326.6 Q2150.21 1319.47 2148.38 1315.93 Q2146.57 1312.37 2142.94 1312.37 M2142.94 1308.66 Q2148.75 1308.66 2151.81 1313.27 Q2154.88 1317.85 2154.88 1326.6 Q2154.88 1335.33 2151.81 1339.94 Q2148.75 1344.52 2142.94 1344.52 Q2137.13 1344.52 2134.05 1339.94 Q2131 1335.33 2131 1326.6 Q2131 1317.85 2134.05 1313.27 Q2137.13 1308.66 2142.94 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M2173.1 1312.37 Q2169.49 1312.37 2167.66 1315.93 Q2165.86 1319.47 2165.86 1326.6 Q2165.86 1333.71 2167.66 1337.27 Q2169.49 1340.82 2173.1 1340.82 Q2176.74 1340.82 2178.54 1337.27 Q2180.37 1333.71 2180.37 1326.6 Q2180.37 1319.47 2178.54 1315.93 Q2176.74 1312.37 2173.1 1312.37 M2173.1 1308.66 Q2178.91 1308.66 2181.97 1313.27 Q2185.05 1317.85 2185.05 1326.6 Q2185.05 1335.33 2181.97 1339.94 Q2178.91 1344.52 2173.1 1344.52 Q2167.29 1344.52 2164.21 1339.94 Q2161.16 1335.33 2161.16 1326.6 Q2161.16 1317.85 2164.21 1313.27 Q2167.29 1308.66 2173.1 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M2203.26 1312.37 Q2199.65 1312.37 2197.82 1315.93 Q2196.02 1319.47 2196.02 1326.6 Q2196.02 1333.71 2197.82 1337.27 Q2199.65 1340.82 2203.26 1340.82 Q2206.9 1340.82 2208.7 1337.27 Q2210.53 1333.71 2210.53 1326.6 Q2210.53 1319.47 2208.7 1315.93 Q2206.9 1312.37 2203.26 1312.37 M2203.26 1308.66 Q2209.07 1308.66 2212.13 1313.27 Q2215.21 1317.85 2215.21 1326.6 Q2215.21 1335.33 2212.13 1339.94 Q2209.07 1344.52 2203.26 1344.52 Q2197.45 1344.52 2194.38 1339.94 Q2191.32 1335.33 2191.32 1326.6 Q2191.32 1317.85 2194.38 1313.27 Q2197.45 1308.66 2203.26 1308.66 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M1220.15 1391.71 L1220.15 1397.25 Q1217.67 1395.98 1214.99 1395.34 Q1212.32 1394.71 1209.46 1394.71 Q1205.1 1394.71 1202.9 1396.04 Q1200.74 1397.38 1200.74 1400.05 Q1200.74 1402.09 1202.3 1403.27 Q1203.85 1404.41 1208.57 1405.46 L1210.57 1405.91 Q1216.81 1407.25 1219.42 1409.7 Q1222.06 1412.12 1222.06 1416.48 Q1222.06 1421.44 1218.11 1424.34 Q1214.2 1427.23 1207.32 1427.23 Q1204.46 1427.23 1201.34 1426.66 Q1198.25 1426.12 1194.82 1425.01 L1194.82 1418.96 Q1198.06 1420.65 1201.21 1421.51 Q1204.36 1422.33 1207.45 1422.33 Q1211.59 1422.33 1213.82 1420.93 Q1216.05 1419.5 1216.05 1416.92 Q1216.05 1414.54 1214.42 1413.26 Q1212.83 1411.99 1207.39 1410.81 L1205.35 1410.33 Q1199.91 1409.19 1197.49 1406.83 Q1195.07 1404.45 1195.07 1400.31 Q1195.07 1395.28 1198.64 1392.54 Q1202.2 1389.8 1208.76 1389.8 Q1212 1389.8 1214.87 1390.28 Q1217.73 1390.76 1220.15 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M1237.18 1380.54 L1237.18 1390.66 L1249.24 1390.66 L1249.24 1395.22 L1237.18 1395.22 L1237.18 1414.57 Q1237.18 1418.93 1238.36 1420.17 Q1239.57 1421.41 1243.23 1421.41 L1249.24 1421.41 L1249.24 1426.31 L1243.23 1426.31 Q1236.45 1426.31 1233.87 1423.8 Q1231.29 1421.25 1231.29 1414.57 L1231.29 1395.22 L1226.99 1395.22 L1226.99 1390.66 L1231.29 1390.66 L1231.29 1380.54 L1237.18 1380.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M1287.44 1407.02 L1287.44 1409.89 L1260.51 1409.89 Q1260.89 1415.94 1264.14 1419.12 Q1267.42 1422.27 1273.24 1422.27 Q1276.61 1422.27 1279.77 1421.44 Q1282.95 1420.61 1286.07 1418.96 L1286.07 1424.5 Q1282.92 1425.83 1279.61 1426.53 Q1276.3 1427.23 1272.89 1427.23 Q1264.36 1427.23 1259.36 1422.27 Q1254.4 1417.3 1254.4 1408.84 Q1254.4 1400.08 1259.11 1394.96 Q1263.85 1389.8 1271.87 1389.8 Q1279.07 1389.8 1283.24 1394.45 Q1287.44 1399.07 1287.44 1407.02 M1281.58 1405.3 Q1281.52 1400.5 1278.87 1397.63 Q1276.26 1394.77 1271.94 1394.77 Q1267.03 1394.77 1264.07 1397.54 Q1261.15 1400.31 1260.7 1405.34 L1281.58 1405.3 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M1302.71 1420.96 L1302.71 1439.87 L1296.83 1439.87 L1296.83 1390.66 L1302.71 1390.66 L1302.71 1396.07 Q1304.56 1392.89 1307.36 1391.36 Q1310.19 1389.8 1314.11 1389.8 Q1320.6 1389.8 1324.64 1394.96 Q1328.72 1400.12 1328.72 1408.52 Q1328.72 1416.92 1324.64 1422.08 Q1320.6 1427.23 1314.11 1427.23 Q1310.19 1427.23 1307.36 1425.71 Q1304.56 1424.15 1302.71 1420.96 M1322.64 1408.52 Q1322.64 1402.06 1319.97 1398.4 Q1317.32 1394.71 1312.68 1394.71 Q1308.03 1394.71 1305.36 1398.4 Q1302.71 1402.06 1302.71 1408.52 Q1302.71 1414.98 1305.36 1418.67 Q1308.03 1422.33 1312.68 1422.33 Q1317.32 1422.33 1319.97 1418.67 Q1322.64 1414.98 1322.64 1408.52 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M1361.15 1391.71 L1361.15 1397.25 Q1358.67 1395.98 1356 1395.34 Q1353.32 1394.71 1350.46 1394.71 Q1346.1 1394.71 1343.9 1396.04 Q1341.74 1397.38 1341.74 1400.05 Q1341.74 1402.09 1343.3 1403.27 Q1344.86 1404.41 1349.57 1405.46 L1351.57 1405.91 Q1357.81 1407.25 1360.42 1409.7 Q1363.06 1412.12 1363.06 1416.48 Q1363.06 1421.44 1359.11 1424.34 Q1355.2 1427.23 1348.32 1427.23 Q1345.46 1427.23 1342.34 1426.66 Q1339.25 1426.12 1335.82 1425.01 L1335.82 1418.96 Q1339.06 1420.65 1342.21 1421.51 Q1345.36 1422.33 1348.45 1422.33 Q1352.59 1422.33 1354.82 1420.93 Q1357.05 1419.5 1357.05 1416.92 Q1357.05 1414.54 1355.42 1413.26 Q1353.83 1411.99 1348.39 1410.81 L1346.35 1410.33 Q1340.91 1409.19 1338.49 1406.83 Q1336.07 1404.45 1336.07 1400.31 Q1336.07 1395.28 1339.64 1392.54 Q1343.2 1389.8 1349.76 1389.8 Q1353 1389.8 1355.87 1390.28 Q1358.73 1390.76 1361.15 1391.71 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip692)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,1146.72 2211.02,1146.72 \"/>\n<polyline clip-path=\"url(#clip692)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,982.65 2211.02,982.65 \"/>\n<polyline clip-path=\"url(#clip692)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,818.581 2211.02,818.581 \"/>\n<polyline clip-path=\"url(#clip692)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,654.513 2211.02,654.513 \"/>\n<polyline clip-path=\"url(#clip692)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,490.445 2211.02,490.445 \"/>\n<polyline clip-path=\"url(#clip692)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"346.853,326.376 2211.02,326.376 \"/>\n<polyline clip-path=\"url(#clip690)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1281.45 346.853,188.976 \"/>\n<polyline clip-path=\"url(#clip690)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,1146.72 365.751,1146.72 \"/>\n<polyline clip-path=\"url(#clip690)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,982.65 365.751,982.65 \"/>\n<polyline clip-path=\"url(#clip690)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,818.581 365.751,818.581 \"/>\n<polyline clip-path=\"url(#clip690)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,654.513 365.751,654.513 \"/>\n<polyline clip-path=\"url(#clip690)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,490.445 365.751,490.445 \"/>\n<polyline clip-path=\"url(#clip690)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"346.853,326.376 365.751,326.376 \"/>\n<path clip-path=\"url(#clip690)\" d=\"M298.909 1132.52 Q295.298 1132.52 293.469 1136.08 Q291.664 1139.62 291.664 1146.75 Q291.664 1153.86 293.469 1157.42 Q295.298 1160.97 298.909 1160.97 Q302.543 1160.97 304.349 1157.42 Q306.177 1153.86 306.177 1146.75 Q306.177 1139.62 304.349 1136.08 Q302.543 1132.52 298.909 1132.52 M298.909 1128.81 Q304.719 1128.81 307.775 1133.42 Q310.853 1138 310.853 1146.75 Q310.853 1155.48 307.775 1160.09 Q304.719 1164.67 298.909 1164.67 Q293.099 1164.67 290.02 1160.09 Q286.964 1155.48 286.964 1146.75 Q286.964 1138 290.02 1133.42 Q293.099 1128.81 298.909 1128.81 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M259.557 995.995 L267.196 995.995 L267.196 969.629 L258.886 971.296 L258.886 967.036 L267.15 965.37 L271.826 965.37 L271.826 995.995 L279.465 995.995 L279.465 999.93 L259.557 999.93 L259.557 995.995 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M298.909 968.448 Q295.298 968.448 293.469 972.013 Q291.664 975.555 291.664 982.684 Q291.664 989.791 293.469 993.356 Q295.298 996.897 298.909 996.897 Q302.543 996.897 304.349 993.356 Q306.177 989.791 306.177 982.684 Q306.177 975.555 304.349 972.013 Q302.543 968.448 298.909 968.448 M298.909 964.745 Q304.719 964.745 307.775 969.351 Q310.853 973.934 310.853 982.684 Q310.853 991.411 307.775 996.018 Q304.719 1000.6 298.909 1000.6 Q293.099 1000.6 290.02 996.018 Q286.964 991.411 286.964 982.684 Q286.964 973.934 290.02 969.351 Q293.099 964.745 298.909 964.745 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M262.775 831.926 L279.094 831.926 L279.094 835.861 L257.15 835.861 L257.15 831.926 Q259.812 829.172 264.395 824.542 Q269.002 819.889 270.182 818.547 Q272.428 816.024 273.307 814.287 Q274.21 812.528 274.21 810.838 Q274.21 808.084 272.266 806.348 Q270.344 804.612 267.242 804.612 Q265.043 804.612 262.59 805.375 Q260.159 806.139 257.381 807.69 L257.381 802.968 Q260.205 801.834 262.659 801.255 Q265.113 800.676 267.15 800.676 Q272.52 800.676 275.715 803.362 Q278.909 806.047 278.909 810.537 Q278.909 812.667 278.099 814.588 Q277.312 816.486 275.205 819.079 Q274.627 819.75 271.525 822.968 Q268.423 826.162 262.775 831.926 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M298.909 804.38 Q295.298 804.38 293.469 807.945 Q291.664 811.486 291.664 818.616 Q291.664 825.723 293.469 829.287 Q295.298 832.829 298.909 832.829 Q302.543 832.829 304.349 829.287 Q306.177 825.723 306.177 818.616 Q306.177 811.486 304.349 807.945 Q302.543 804.38 298.909 804.38 M298.909 800.676 Q304.719 800.676 307.775 805.283 Q310.853 809.866 310.853 818.616 Q310.853 827.343 307.775 831.949 Q304.719 836.533 298.909 836.533 Q293.099 836.533 290.02 831.949 Q286.964 827.343 286.964 818.616 Q286.964 809.866 290.02 805.283 Q293.099 800.676 298.909 800.676 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M272.914 653.159 Q276.27 653.876 278.145 656.145 Q280.043 658.414 280.043 661.747 Q280.043 666.863 276.525 669.663 Q273.006 672.464 266.525 672.464 Q264.349 672.464 262.034 672.025 Q259.742 671.608 257.289 670.751 L257.289 666.238 Q259.233 667.372 261.548 667.95 Q263.863 668.529 266.386 668.529 Q270.784 668.529 273.076 666.793 Q275.39 665.057 275.39 661.747 Q275.39 658.691 273.238 656.978 Q271.108 655.242 267.289 655.242 L263.261 655.242 L263.261 651.4 L267.474 651.4 Q270.923 651.4 272.752 650.034 Q274.58 648.645 274.58 646.052 Q274.58 643.39 272.682 641.978 Q270.807 640.543 267.289 640.543 Q265.367 640.543 263.168 640.96 Q260.969 641.377 258.33 642.256 L258.33 638.09 Q260.992 637.349 263.307 636.978 Q265.645 636.608 267.705 636.608 Q273.029 636.608 276.131 639.039 Q279.233 641.446 279.233 645.566 Q279.233 648.437 277.59 650.427 Q275.946 652.395 272.914 653.159 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M298.909 640.312 Q295.298 640.312 293.469 643.877 Q291.664 647.418 291.664 654.548 Q291.664 661.654 293.469 665.219 Q295.298 668.761 298.909 668.761 Q302.543 668.761 304.349 665.219 Q306.177 661.654 306.177 654.548 Q306.177 647.418 304.349 643.877 Q302.543 640.312 298.909 640.312 M298.909 636.608 Q304.719 636.608 307.775 641.215 Q310.853 645.798 310.853 654.548 Q310.853 663.275 307.775 667.881 Q304.719 672.464 298.909 672.464 Q293.099 672.464 290.02 667.881 Q286.964 663.275 286.964 654.548 Q286.964 645.798 290.02 641.215 Q293.099 636.608 298.909 636.608 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M271.594 477.239 L259.789 495.688 L271.594 495.688 L271.594 477.239 M270.367 473.165 L276.247 473.165 L276.247 495.688 L281.177 495.688 L281.177 499.577 L276.247 499.577 L276.247 507.725 L271.594 507.725 L271.594 499.577 L255.992 499.577 L255.992 495.063 L270.367 473.165 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M298.909 476.243 Q295.298 476.243 293.469 479.808 Q291.664 483.35 291.664 490.479 Q291.664 497.586 293.469 501.151 Q295.298 504.692 298.909 504.692 Q302.543 504.692 304.349 501.151 Q306.177 497.586 306.177 490.479 Q306.177 483.35 304.349 479.808 Q302.543 476.243 298.909 476.243 M298.909 472.54 Q304.719 472.54 307.775 477.146 Q310.853 481.73 310.853 490.479 Q310.853 499.206 307.775 503.813 Q304.719 508.396 298.909 508.396 Q293.099 508.396 290.02 503.813 Q286.964 499.206 286.964 490.479 Q286.964 481.73 290.02 477.146 Q293.099 472.54 298.909 472.54 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M258.793 309.096 L277.15 309.096 L277.15 313.032 L263.076 313.032 L263.076 321.504 Q264.094 321.157 265.113 320.995 Q266.131 320.809 267.15 320.809 Q272.937 320.809 276.316 323.981 Q279.696 327.152 279.696 332.569 Q279.696 338.147 276.224 341.249 Q272.752 344.328 266.432 344.328 Q264.256 344.328 261.988 343.957 Q259.742 343.587 257.335 342.846 L257.335 338.147 Q259.418 339.281 261.641 339.837 Q263.863 340.393 266.34 340.393 Q270.344 340.393 272.682 338.286 Q275.02 336.18 275.02 332.569 Q275.02 328.957 272.682 326.851 Q270.344 324.745 266.34 324.745 Q264.465 324.745 262.59 325.161 Q260.738 325.578 258.793 326.457 L258.793 309.096 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M298.909 312.175 Q295.298 312.175 293.469 315.74 Q291.664 319.282 291.664 326.411 Q291.664 333.518 293.469 337.082 Q295.298 340.624 298.909 340.624 Q302.543 340.624 304.349 337.082 Q306.177 333.518 306.177 326.411 Q306.177 319.282 304.349 315.74 Q302.543 312.175 298.909 312.175 M298.909 308.471 Q304.719 308.471 307.775 313.078 Q310.853 317.661 310.853 326.411 Q310.853 335.138 307.775 339.744 Q304.719 344.328 298.909 344.328 Q293.099 344.328 290.02 339.744 Q286.964 335.138 286.964 326.411 Q286.964 317.661 290.02 313.078 Q293.099 308.471 298.909 308.471 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M186.448 812.969 L189.313 812.969 L189.313 839.896 Q195.36 839.514 198.543 836.268 Q201.694 832.989 201.694 827.165 Q201.694 823.791 200.867 820.64 Q200.039 817.457 198.384 814.338 L203.922 814.338 Q205.259 817.489 205.959 820.799 Q206.659 824.109 206.659 827.515 Q206.659 836.045 201.694 841.042 Q196.729 846.007 188.263 846.007 Q179.51 846.007 174.385 841.296 Q169.229 836.554 169.229 828.533 Q169.229 821.34 173.876 817.17 Q178.491 812.969 186.448 812.969 M184.73 818.826 Q179.924 818.889 177.059 821.531 Q174.194 824.141 174.194 828.47 Q174.194 833.371 176.963 836.331 Q179.733 839.259 184.761 839.705 L184.73 818.826 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M184.22 773.724 L205.736 773.724 L205.736 779.581 L184.411 779.581 Q179.351 779.581 176.836 781.554 Q174.322 783.528 174.322 787.474 Q174.322 792.217 177.345 794.954 Q180.369 797.691 185.589 797.691 L205.736 797.691 L205.736 803.58 L170.088 803.58 L170.088 797.691 L175.627 797.691 Q172.412 795.591 170.821 792.758 Q169.229 789.893 169.229 786.169 Q169.229 780.027 173.049 776.876 Q176.836 773.724 184.22 773.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M186.448 731.552 L189.313 731.552 L189.313 758.479 Q195.36 758.097 198.543 754.85 Q201.694 751.572 201.694 745.747 Q201.694 742.373 200.867 739.222 Q200.039 736.04 198.384 732.92 L203.922 732.92 Q205.259 736.071 205.959 739.382 Q206.659 742.692 206.659 746.097 Q206.659 754.627 201.694 759.624 Q196.729 764.59 188.263 764.59 Q179.51 764.59 174.385 759.879 Q169.229 755.137 169.229 747.116 Q169.229 739.923 173.876 735.753 Q178.491 731.552 186.448 731.552 M184.73 737.408 Q179.924 737.472 177.059 740.114 Q174.194 742.724 174.194 747.052 Q174.194 751.954 176.963 754.914 Q179.733 757.842 184.761 758.288 L184.73 737.408 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M175.563 701.283 Q174.99 702.269 174.735 703.447 Q174.449 704.593 174.449 705.993 Q174.449 710.959 177.696 713.632 Q180.91 716.274 186.958 716.274 L205.736 716.274 L205.736 722.162 L170.088 722.162 L170.088 716.274 L175.627 716.274 Q172.38 714.428 170.821 711.468 Q169.229 708.508 169.229 704.275 Q169.229 703.67 169.325 702.938 Q169.388 702.206 169.547 701.315 L175.563 701.283 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M187.499 672.828 Q181.133 672.828 177.632 675.47 Q174.131 678.08 174.131 682.822 Q174.131 687.533 177.632 690.175 Q181.133 692.785 187.499 692.785 Q193.833 692.785 197.334 690.175 Q200.835 687.533 200.835 682.822 Q200.835 678.08 197.334 675.47 Q193.833 672.828 187.499 672.828 M201.312 666.972 Q210.415 666.972 214.839 671.014 Q219.295 675.056 219.295 683.395 Q219.295 686.482 218.818 689.22 Q218.372 691.957 217.418 694.535 L211.72 694.535 Q213.121 691.957 213.789 689.443 Q214.457 686.928 214.457 684.318 Q214.457 678.557 211.434 675.693 Q208.442 672.828 202.363 672.828 L199.466 672.828 Q202.617 674.642 204.177 677.475 Q205.736 680.308 205.736 684.254 Q205.736 690.811 200.739 694.822 Q195.742 698.832 187.499 698.832 Q179.223 698.832 174.226 694.822 Q169.229 690.811 169.229 684.254 Q169.229 680.308 170.789 677.475 Q172.348 674.642 175.499 672.828 L170.088 672.828 L170.088 666.972 L201.312 666.972 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M209.047 640.076 Q215.412 642.559 217.354 644.914 Q219.295 647.27 219.295 651.216 L219.295 655.895 L214.394 655.895 L214.394 652.458 Q214.394 650.039 213.248 648.702 Q212.102 647.365 207.837 645.742 L205.164 644.692 L170.088 659.11 L170.088 652.903 L197.97 641.763 L170.088 630.623 L170.088 624.417 L209.047 640.076 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip692)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"399.613,1025.83 400.199,914.766 400.786,812.864 401.372,719.504 401.958,634.119 402.545,556.182 403.131,485.205 403.718,420.735 404.304,362.35 404.891,309.657 405.477,262.287 406.063,219.895 406.65,267.349 407.236,307.38 407.823,339.597 408.409,304.621 408.995,332.49 409.582,302.841 410.168,276.804 410.755,302.332 411.341,324.428 411.927,304.358 412.514,286.779 413.1,271.848 413.687,327.603 414.273,376.603 414.86,365.101 415.446,356.21 416.032,348.402 416.619,367.031 417.205,363.241 417.792,360.588 418.378,379.589 418.964,398.446 419.551,397.329 420.137,396.877 420.724,414.593 421.31,416.61 421.896,434.028 422.483,437.404 423.069,454.398 423.656,470.958 424.242,476.734 424.829,482.284 425.415,510.23 426.001,525.994 426.588,532.651 427.174,540.448 427.761,556.703 428.347,580.427 428.933,595.093 429.52,617.226 430.106,624.167 430.693,638.319 431.279,651.892 431.865,677.716 432.452,695.129 433.038,712.523 433.625,717.94 434.211,723.909 434.798,750.32 435.384,755.676 435.97,761.775 436.557,777.008 437.143,783.233 437.73,789.789 438.316,805.031 438.902,815.187 439.489,825.669 440.075,831.276 440.662,845.006 441.248,869.327 441.835,881.361 442.421,893.411 443.007,905.299 443.594,913.712 444.18,925.133 444.767,932.965 445.353,952.642 445.939,959.156 446.526,968.815 447.112,975.31 447.699,987.215 448.285,993.384 448.871,1002.03 449.458,1013.24 450.044,1016.44 450.631,1022.11 451.217,1030.18 451.804,1035.67 452.39,1040.71 452.976,1045.68 453.563,1051.02 454.149,1058.23 454.736,1062.81 455.322,1067.38 455.908,1076.47 456.495,1078.72 457.081,1081.01 457.668,1085.27 458.254,1090.16 458.84,1096.49 459.427,1100.83 460.013,1105.03 460.6,1111.27 461.186,1111.41 461.773,1117.76 462.359,1123.47 462.945,1127.28 463.532,1130.91 464.118,1136.6 464.705,1140.3 465.291,1140.02 465.877,1149.22 466.464,1147.32 467.05,1150.89 467.637,1156.14 468.223,1159.42 468.809,1162.55 469.396,1165.72 469.982,1170.54 470.569,1170.08 471.155,1171.19 471.742,1174.13 472.328,1177.07 472.914,1182.97 473.501,1183.64 474.087,1186.5 474.674,1190.76 475.26,1191.12 475.846,1191.81 476.433,1193.9 477.019,1194.36 477.606,1196.54 478.192,1200.28 478.778,1203.71 479.365,1205.67 479.951,1210.48 480.538,1210.55 481.124,1213.96 481.711,1216.98 482.297,1217.82 482.883,1216.13 483.47,1219.3 484.056,1220.52 484.643,1220.62 485.229,1223.49 485.815,1223.08 486.402,1225.71 486.988,1226.89 487.575,1225.1 488.161,1225.1 488.748,1225.19 489.334,1228.08 489.92,1227.89 490.507,1229.07 491.093,1230.43 491.68,1232.75 492.266,1233.88 492.852,1236.07 493.439,1234.16 494.025,1233.62 494.612,1232.16 495.198,1233.37 495.784,1237.2 496.371,1236.64 496.957,1234.65 497.544,1235.51 498.13,1235.24 498.717,1236.41 499.303,1233.25 499.889,1232.96 500.476,1234.18 501.062,1234.01 501.649,1233.68 502.235,1236.08 502.821,1234.19 503.408,1233.94 503.994,1235.24 504.581,1237.92 505.167,1238.57 505.753,1242.12 506.34,1245.4 506.926,1244.16 507.513,1243.36 508.099,1243.99 508.686,1244.66 509.272,1248.03 509.858,1248.39 510.445,1250.31 511.031,1247.78 511.618,1246.96 512.204,1248.85 512.79,1247.53 513.377,1248.05 513.963,1247.16 514.55,1246.24 515.136,1248.39 515.722,1250.53 516.309,1248.03 516.895,1244.16 517.482,1246.18 518.068,1242.65 518.655,1242.17 519.241,1240.22 519.827,1241.16 520.414,1242.05 521,1242.83 521.587,1243.54 522.173,1242.76 522.759,1240.63 523.346,1240.06 523.932,1239.68 524.519,1240.71 525.105,1240.35 525.691,1237.06 526.278,1238.19 526.864,1239.57 527.451,1240.69 528.037,1240.28 528.624,1237.13 529.21,1239.55 529.796,1240.39 530.383,1238.65 530.969,1236.92 531.556,1237.94 532.142,1236.23 532.728,1238.78 533.315,1236.87 533.901,1236.73 534.488,1234.08 535.074,1232.79 535.661,1231.42 536.247,1232.73 536.833,1234.12 537.42,1234.33 538.006,1234.12 538.593,1234.98 539.179,1237.37 539.765,1238.75 540.352,1236.64 540.938,1238.98 541.525,1238.47 542.111,1238.04 542.697,1237.53 543.284,1237.26 543.87,1237.17 544.457,1239.6 545.043,1243.32 545.63,1241.41 546.216,1241.04 546.802,1240.78 547.389,1241.5 547.975,1242.1 548.562,1240.43 549.148,1241.16 549.734,1240.44 550.321,1239.82 550.907,1236.76 551.494,1236.18 552.08,1237.13 552.666,1237.02 553.253,1239.3 553.839,1238.82 554.426,1243.83 555.012,1244.09 555.599,1244.55 556.185,1243.62 556.771,1248.1 557.358,1248.37 557.944,1247.15 558.531,1245.98 559.117,1246.44 559.703,1244.1 560.29,1244.8 560.876,1244.06 561.463,1241.84 562.049,1245.09 562.635,1244.08 563.222,1241.92 563.808,1240.06 564.395,1238.12 564.981,1235.98 565.568,1235.67 566.154,1238.09 566.74,1237.52 567.327,1238.54 567.913,1240.8 568.5,1237.47 569.086,1234.21 569.672,1232.39 570.259,1233.39 570.845,1230.25 571.432,1228.79 572.018,1229.72 572.605,1223.14 573.191,1220.62 573.777,1222.02 574.364,1222.09 574.95,1222.32 575.537,1219.94 576.123,1221.74 576.709,1221.98 577.296,1222.19 577.882,1221.07 578.469,1220.86 579.055,1221.13 579.641,1223.92 580.228,1222.75 580.814,1225.7 581.401,1227.29 581.987,1228.92 582.574,1230.13 583.16,1229.95 583.746,1229.63 584.333,1230.93 584.919,1233.31 585.506,1235.36 586.092,1236.3 586.678,1237.03 587.265,1237.92 587.851,1235.85 588.438,1236.87 589.024,1239.19 589.61,1239.61 590.197,1239.12 590.783,1238.23 591.37,1238.89 591.956,1240.55 592.543,1239.43 593.129,1242.55 593.715,1245.7 594.302,1244.55 594.888,1242.2 595.475,1241.47 596.061,1241.89 596.647,1239.52 597.234,1241.44 597.82,1241.91 598.407,1239.56 598.993,1236.11 599.579,1233.92 600.166,1231.98 600.752,1230.45 601.339,1229.82 601.925,1229.49 602.512,1233.25 603.098,1232.94 603.684,1231.13 604.271,1229.43 604.857,1228.01 605.444,1228.86 606.03,1228.31 606.616,1226.63 607.203,1225.34 607.789,1223.64 608.376,1225.17 608.962,1222.47 609.548,1222.29 610.135,1223.74 610.721,1222.47 611.308,1223.79 611.894,1221.01 612.481,1221.31 613.067,1224 613.653,1225.49 614.24,1226.67 614.826,1226.26 615.413,1225.99 615.999,1225.78 616.585,1222.86 617.172,1221.68 617.758,1221.7 618.345,1223.21 618.931,1223.02 619.518,1221.61 620.104,1223.25 620.69,1229.84 621.277,1229.36 621.863,1231.57 622.45,1231.01 623.036,1227.96 623.622,1227.63 624.209,1232.4 624.795,1232.02 625.382,1231.41 625.968,1231.96 626.554,1230.26 627.141,1228.58 627.727,1231.99 628.314,1231.5 628.9,1233.64 629.487,1234.53 630.073,1232.61 630.659,1230.8 631.246,1227.84 631.832,1227.54 632.419,1228.67 633.005,1228.21 633.591,1226.49 634.178,1228.86 634.764,1227.1 635.351,1229.55 635.937,1230.79 636.523,1231.63 637.11,1234.8 637.696,1234.23 638.283,1233.72 638.869,1231.4 639.456,1231.02 640.042,1230.65 640.628,1232.97 641.215,1230.94 641.801,1227.59 642.388,1224.54 642.974,1224.37 643.56,1225.52 644.147,1222.49 644.733,1223.84 645.32,1222.15 645.906,1219.41 646.492,1222.3 647.079,1222.22 647.665,1220.07 648.252,1218.77 648.838,1217.77 649.425,1219.5 650.011,1219.52 650.597,1220.58 651.184,1221.82 651.77,1218.99 652.357,1220 652.943,1221.59 653.529,1221.75 654.116,1218.71 654.702,1217.47 655.289,1217.57 655.875,1217.77 656.462,1215.25 657.048,1216.78 657.634,1219.55 658.221,1219.59 658.807,1218.21 659.394,1218.33 659.98,1218.51 660.566,1218.39 661.153,1223.63 661.739,1227.4 662.326,1226.75 662.912,1224.97 663.498,1224.63 664.085,1222.87 664.671,1220.1 665.258,1220.05 665.844,1220.09 666.431,1219.04 667.017,1221.89 667.603,1224.2 668.19,1226.74 668.776,1224.94 669.363,1220.63 669.949,1222.29 670.535,1223.59 671.122,1223.57 671.708,1222.28 672.295,1223.62 672.881,1223.38 673.467,1223.21 674.054,1224.26 674.64,1223.87 675.227,1219.7 675.813,1218.45 676.4,1223.83 676.986,1226.41 677.572,1227.38 678.159,1227.04 678.745,1223.99 679.332,1223.77 679.918,1225.12 680.504,1225.92 681.091,1224.31 681.677,1225.32 682.264,1224.84 682.85,1224.63 683.436,1223.1 684.023,1221.44 684.609,1221.44 685.196,1222.67 685.782,1222.48 686.369,1222.1 686.955,1223.15 687.541,1221.64 688.128,1222.77 688.714,1227.75 689.301,1224.37 689.887,1222.92 690.473,1222.55 691.06,1221.11 691.646,1219.58 692.233,1222.31 692.819,1220.71 693.405,1220.37 693.992,1221.89 694.578,1223.2 695.165,1223.95 695.751,1220.74 696.338,1216.4 696.924,1217.7 697.51,1220.13 698.097,1221.32 698.683,1220.27 699.27,1220.03 699.856,1221.18 700.442,1219.74 701.029,1216.7 701.615,1216.67 702.202,1219.11 702.788,1217.83 703.375,1217.69 703.961,1211 704.547,1209.95 705.134,1206.46 705.72,1207.04 706.307,1204.76 706.893,1205.29 707.479,1204.85 708.066,1205.18 708.652,1205.9 709.239,1206.74 709.825,1207.21 710.411,1205.35 710.998,1206.15 711.584,1205.47 712.171,1207.43 712.757,1209.16 713.344,1209.8 713.93,1208.96 714.516,1209.36 715.103,1212.34 715.689,1209.87 716.276,1210.3 716.862,1211.88 717.448,1212.31 718.035,1212.26 718.621,1213.97 719.208,1216.54 719.794,1216.6 720.38,1217.93 720.967,1216.61 721.553,1216.66 722.14,1218.18 722.726,1215.62 723.313,1215.89 723.899,1216.13 724.485,1214.86 725.072,1217.35 725.658,1217.3 726.245,1217.52 726.831,1217.58 727.417,1216.34 728.004,1216.2 728.59,1217.49 729.177,1217.64 729.763,1220.06 730.349,1217.48 730.936,1218.69 731.522,1221.59 732.109,1220.24 732.695,1222.51 733.282,1219.52 733.868,1222.04 734.454,1220.27 735.041,1220.11 735.627,1222.69 736.214,1222.39 736.8,1223.3 737.386,1224.21 737.973,1225.25 738.559,1224.78 739.146,1225.74 739.732,1225.05 740.318,1224.63 740.905,1222.73 741.491,1222.19 742.078,1221.92 742.664,1222.97 743.251,1222.69 743.837,1222.25 744.423,1224.56 745.01,1223.78 745.596,1221.98 746.183,1223 746.769,1224.24 747.355,1222.26 747.942,1221.86 748.528,1218.91 749.115,1217.08 749.701,1218.45 750.288,1218.45 750.874,1219.5 751.46,1220.57 752.047,1219.1 752.633,1216.25 753.22,1217.5 753.806,1217.57 754.392,1217.37 754.979,1218.51 755.565,1218.58 756.152,1220.11 756.738,1222.57 757.324,1223.64 757.911,1223.41 758.497,1222.04 759.084,1220.65 759.67,1220.44 760.257,1217.5 760.843,1215.8 761.429,1217.17 762.016,1217.12 762.602,1218.21 763.189,1218.13 763.775,1218.31 764.361,1216.78 764.948,1212.72 765.534,1212.67 766.121,1215.38 766.707,1218.12 767.293,1212.8 767.88,1211.68 768.466,1213.49 769.053,1213.48 769.639,1216.32 770.226,1215.93 770.812,1215.83 771.398,1215.67 771.985,1215.48 772.571,1218.23 773.158,1216.69 773.744,1219.41 774.33,1219.37 774.917,1220.39 775.503,1220 776.09,1219.96 776.676,1219.89 777.262,1218.46 777.849,1218.53 778.435,1218.41 779.022,1218.08 779.608,1219.46 780.195,1219.05 780.781,1216.11 781.367,1216.08 781.954,1216.13 782.54,1217.46 783.127,1219.93 783.713,1219.62 784.299,1220.56 784.886,1222.01 785.472,1222.85 786.059,1222.64 786.645,1220.61 787.232,1220.76 787.818,1221.84 788.404,1219.02 788.991,1218.75 789.577,1219.74 790.164,1219.72 790.75,1218.36 791.336,1218.12 791.923,1217.96 792.509,1216.7 793.096,1217.9 793.682,1217.49 794.268,1216.11 794.855,1214.57 795.441,1217.49 796.028,1217.23 796.614,1219.78 797.201,1219.52 797.787,1218.93 798.373,1217.35 798.96,1215.84 799.546,1214.73 800.133,1213.38 800.719,1212.23 801.305,1211.33 801.892,1211.56 802.478,1209.26 803.065,1209.51 803.651,1211.35 804.237,1210.51 804.824,1209.68 805.41,1211.17 805.997,1214.11 806.583,1214.42 807.17,1218.65 807.756,1214.26 808.342,1212.67 808.929,1211.19 809.515,1212.84 810.102,1212.95 810.688,1214.4 811.274,1215.64 811.861,1215.34 812.447,1216.66 813.034,1216.48 813.62,1216.13 814.206,1215 814.793,1216.39 815.379,1214.97 815.966,1213.83 816.552,1215.24 817.139,1218.11 817.725,1218.16 818.311,1218.17 818.898,1215.36 819.484,1215.55 820.071,1212.8 820.657,1211.5 821.243,1211.64 821.83,1209.13 822.416,1209.41 823.003,1209.81 823.589,1212.57 824.175,1214.19 824.762,1211.57 825.348,1211.6 825.935,1213.13 826.521,1213.17 827.108,1213.64 827.694,1212.34 828.28,1213.65 828.867,1215.53 829.453,1216.44 830.04,1215.16 830.626,1216.6 831.212,1215.07 831.799,1217.93 832.385,1218.83 832.972,1218.68 833.558,1221.1 834.145,1220.98 834.731,1220.52 835.317,1218.71 835.904,1218.55 836.49,1218.47 837.077,1218.48 837.663,1219.36 838.249,1220.79 838.836,1224.42 839.422,1223.64 840.009,1220.48 840.595,1217.26 841.181,1217.02 841.768,1214.45 842.354,1215.62 842.941,1215.48 843.527,1215.66 844.114,1214.25 844.7,1214.12 845.286,1212.72 845.873,1214.21 846.459,1212.69 847.046,1212.75 847.632,1214.35 848.218,1211.63 848.805,1210.57 849.391,1213.41 849.978,1213.48 850.564,1213.63 851.15,1210.87 851.737,1208.5 852.323,1208.97 852.91,1211.68 853.496,1210.74 854.083,1209.78 854.669,1211.29 855.255,1212.7 855.842,1213.94 856.428,1219.28 857.015,1220.34 857.601,1221.44 858.187,1220.74 858.774,1224.63 859.36,1225.58 859.947,1223.77 860.533,1223.66 861.119,1222 861.706,1222.94 862.292,1222.66 862.879,1222.1 863.465,1221.71 864.052,1224.25 864.638,1221.06 865.224,1219.36 865.811,1219.16 866.397,1216.1 866.984,1213.35 867.57,1214.95 868.156,1214.83 868.743,1214.76 869.329,1213.14 869.916,1214.77 870.502,1214.64 871.089,1217.24 871.675,1220.68 872.261,1220.25 872.848,1219.99 873.434,1219.72 874.021,1219.09 874.607,1223.03 875.193,1223.73 875.78,1227.61 876.366,1226.72 876.953,1219.04 877.539,1214.93 878.125,1218.45 878.712,1218.16 879.298,1218.02 879.885,1218.98 880.471,1215.89 881.058,1214.53 881.644,1214.98 882.23,1217.68 882.817,1217.33 883.403,1214.31 883.99,1212.73 884.576,1215.72 885.162,1215.54 885.749,1215.24 886.335,1212.88 886.922,1211.41 887.508,1213.01 888.094,1214.5 888.681,1213.24 889.267,1216.18 889.854,1217.6 890.44,1217.53 891.027,1216.09 891.613,1218.63 892.199,1219.61 892.786,1220.54 893.372,1220.33 893.959,1217.47 894.545,1215.89 895.131,1214.58 895.718,1215.86 896.304,1214.46 896.891,1214.49 897.477,1213.36 898.063,1209.38 898.65,1209.36 899.236,1208.58 899.823,1208.97 900.409,1206.77 900.996,1205.79 901.582,1204.85 902.168,1205.51 902.755,1205.93 903.341,1207.91 903.928,1208.22 904.514,1209.91 905.1,1209.17 905.687,1210.94 906.273,1209.47 906.86,1208.51 907.446,1208.74 908.032,1207.85 908.619,1205.44 909.205,1204.56 909.792,1206.33 910.378,1208.11 910.965,1208.35 911.551,1209.98 912.137,1212.95 912.724,1213.27 913.31,1213.48 913.897,1213.62 914.483,1218.78 915.069,1218.32 915.656,1218.24 916.242,1216.5 916.829,1216.1 917.415,1214.67 918.002,1213.42 918.588,1216.32 919.174,1217.32 919.761,1217.21 920.347,1218.45 920.934,1217.94 921.52,1213.58 922.106,1213.52 922.693,1212.28 923.279,1212.57 923.866,1213.91 924.452,1213.64 925.038,1213.81 925.625,1213.84 926.211,1213.83 926.798,1212.61 927.384,1212.47 927.971,1214.31 928.557,1217.09 929.143,1219.31 929.73,1216.31 930.316,1213.53 930.903,1214.93 931.489,1218.76 932.075,1218.29 932.662,1215.45 933.248,1212.75 933.835,1213.83 934.421,1212.72 935.007,1212.74 935.594,1210.2 936.18,1210.33 936.767,1210.54 937.353,1210.48 937.94,1211.91 938.526,1213.53 939.112,1210.66 939.699,1206.58 940.285,1207.87 940.872,1206.83 941.458,1206.89 942.044,1207.15 942.631,1207.41 943.217,1209.18 943.804,1210.93 944.39,1214.95 944.976,1212.27 945.563,1216.39 946.149,1216.03 946.736,1215.73 947.322,1214.14 947.909,1213.11 948.495,1214.19 949.081,1210.38 949.668,1210.48 950.254,1209.41 950.841,1210.77 951.427,1212.2 952.013,1212.19 952.6,1212.18 953.186,1212.29 953.773,1215.01 954.359,1213.86 954.945,1217.68 955.532,1212.41 956.118,1211.2 956.705,1211.22 957.291,1211.54 957.878,1211.76 958.464,1213.33 959.05,1209.29 959.637,1210.92 960.223,1211.06 960.81,1211.29 961.396,1210.09 961.982,1213.17 962.569,1213.03 963.155,1214.46 963.742,1215.95 964.328,1217.01 964.915,1218.23 965.501,1215.6 966.087,1216.86 966.674,1215.41 967.26,1216.53 967.847,1214.69 968.433,1214.75 969.019,1216.07 969.606,1214.75 970.192,1213.38 970.779,1214.73 971.365,1214.49 971.951,1215.85 972.538,1215.48 973.124,1215.47 973.711,1215.47 974.297,1212.7 974.884,1214.35 975.47,1211.87 976.056,1210.36 976.643,1212.25 977.229,1213.96 977.816,1212.67 978.402,1212.46 978.988,1211.26 979.575,1210.05 980.161,1210.2 980.748,1211.69 981.334,1211.56 981.92,1213.01 982.507,1214.58 983.093,1214.62 983.68,1211.81 984.266,1212.01 984.853,1212.23 985.439,1215.06 986.025,1219.11 986.612,1220.06 987.198,1221.22 987.785,1222.4 988.371,1222.23 988.957,1223.1 989.544,1225.12 990.13,1223.36 990.717,1218.82 991.303,1219.99 991.889,1220.9 992.476,1220.47 993.062,1218.9 993.649,1218.5 994.235,1216.94 994.822,1216.96 995.408,1215.57 995.994,1215.34 996.581,1215.42 997.167,1213.93 997.754,1216.66 998.34,1216.34 998.926,1218.71 999.513,1222.53 1000.1,1220.57 1000.69,1217.5 1001.27,1218.51 1001.86,1219.69 1002.44,1220.56 1003.03,1221.55 1003.62,1221 1004.2,1217.88 1004.79,1219.23 1005.38,1215.12 1005.96,1212.5 1006.55,1212.62 1007.14,1214.19 1007.72,1214.42 1008.31,1214.29 1008.9,1214.19 1009.48,1215.12 1010.07,1213.5 1010.65,1213.63 1011.24,1213.52 1011.83,1213.29 1012.41,1211.84 1013,1212.17 1013.59,1212.32 1014.17,1213.62 1014.76,1213.41 1015.35,1209.52 1015.93,1211.07 1016.52,1212.62 1017.11,1210.02 1017.69,1211.43 1018.28,1211.68 1018.86,1210.6 1019.45,1209.32 1020.04,1212.25 1020.62,1210.91 1021.21,1209.66 1021.8,1212.29 1022.38,1212.4 1022.97,1209.87 1023.56,1210.11 1024.14,1208.63 1024.73,1209.01 1025.32,1206.04 1025.9,1207.9 1026.49,1206.99 1027.07,1206.12 1027.66,1208.05 1028.25,1210.91 1028.83,1209.58 1029.42,1209.88 1030.01,1208.79 1030.59,1209.09 1031.18,1209.42 1031.77,1208.14 1032.35,1210.89 1032.94,1212.62 1033.52,1210.04 1034.11,1211.56 1034.7,1207.82 1035.28,1206.6 1035.87,1205.42 1036.46,1205.51 1037.04,1205.54 1037.63,1206.09 1038.22,1206.78 1038.8,1208.75 1039.39,1210.19 1039.98,1210.36 1040.56,1209.09 1041.15,1212.05 1041.73,1213.64 1042.32,1215.27 1042.91,1216.76 1043.49,1216.76 1044.08,1216.68 1044.67,1217.59 1045.25,1219.85 1045.84,1219.55 1046.43,1216.59 1047.01,1213.49 1047.6,1211.67 1048.19,1213.15 1048.77,1213.16 1049.36,1215.84 1049.94,1215.68 1050.53,1219.21 1051.12,1219 1051.7,1217.42 1052.29,1217.23 1052.88,1218.38 1053.46,1215.56 1054.05,1215.47 1054.64,1214.29 1055.22,1212.71 1055.81,1215.26 1056.39,1215 1056.98,1217.43 1057.57,1215.64 1058.15,1216.97 1058.74,1218.19 1059.33,1216.48 1059.91,1216.44 1060.5,1216.54 1061.09,1216.32 1061.67,1216.2 1062.26,1217.56 1062.85,1217.43 1063.43,1216.07 1064.02,1214.62 1064.6,1213.1 1065.19,1210.62 1065.78,1210.67 1066.36,1207.87 1066.95,1208.33 1067.54,1207.08 1068.12,1205.97 1068.71,1207.61 1069.3,1206.74 1069.88,1208.35 1070.47,1205.87 1071.06,1203.6 1071.64,1204.03 1072.23,1205.92 1072.81,1207.58 1073.4,1206.48 1073.99,1208.15 1074.57,1211.17 1075.16,1210.06 1075.75,1214.01 1076.33,1212.34 1076.92,1212.36 1077.51,1212.61 1078.09,1215.08 1078.68,1216.14 1079.26,1215.73 1079.85,1217.05 1080.44,1219.54 1081.02,1217.68 1081.61,1218.85 1082.2,1221.57 1082.78,1219.84 1083.37,1219.76 1083.96,1219.58 1084.54,1221.99 1085.13,1217.71 1085.72,1217.42 1086.3,1217.41 1086.89,1217.03 1087.47,1218.23 1088.06,1216.55 1088.65,1215.12 1089.23,1214.95 1089.82,1214.87 1090.41,1216.09 1090.99,1216.05 1091.58,1220.13 1092.17,1221.27 1092.75,1221.02 1093.34,1219.14 1093.93,1217.36 1094.51,1219.91 1095.1,1220.92 1095.68,1222.96 1096.27,1222.24 1096.86,1217.73 1097.44,1216.19 1098.03,1213.57 1098.62,1212.34 1099.2,1212.38 1099.79,1209.59 1100.38,1209.79 1100.96,1210.02 1101.55,1210.52 1102.14,1212.08 1102.72,1212.25 1103.31,1216.18 1103.89,1220.06 1104.48,1217.91 1105.07,1218.94 1105.65,1217.22 1106.24,1216.95 1106.83,1216.34 1107.41,1216.13 1108,1218.73 1108.59,1219.54 1109.17,1218.06 1109.76,1216.28 1110.34,1216.36 1110.93,1213.43 1111.52,1213.31 1112.1,1214.47 1112.69,1211.73 1113.28,1213.21 1113.86,1212.84 1114.45,1208.9 1115.04,1207.37 1115.62,1206.39 1116.21,1205.14 1116.8,1205.65 1117.38,1205.9 1117.97,1209 1118.55,1209.29 1119.14,1208.25 1119.73,1212.4 1120.31,1213.65 1120.9,1213.42 1121.49,1211.94 1122.07,1212.11 1122.66,1214.98 1123.25,1213.6 1123.83,1214.88 1124.42,1214.68 1125.01,1211.91 1125.59,1213.14 1126.18,1213.3 1126.76,1211.88 1127.35,1213.37 1127.94,1212.23 1128.52,1212.04 1129.11,1210.75 1129.7,1208.23 1130.28,1206.89 1130.87,1207.33 1131.46,1209.23 1132.04,1209.19 1132.63,1209.17 1133.21,1208.12 1133.8,1207.15 1134.39,1210.1 1134.97,1212.98 1135.56,1213.24 1136.15,1212 1136.73,1210.91 1137.32,1211.06 1137.91,1211.24 1138.49,1212.68 1139.08,1211.48 1139.67,1211.65 1140.25,1210.4 1140.84,1214.64 1141.42,1213.27 1142.01,1214.63 1142.6,1216.08 1143.18,1216.06 1143.77,1216.13 1144.36,1216.06 1144.94,1215.99 1145.53,1215.93 1146.12,1217.14 1146.7,1214.33 1147.29,1215.6 1147.88,1215.17 1148.46,1215.04 1149.05,1213.5 1149.63,1213.33 1150.22,1212.09 1150.81,1210.94 1151.39,1211.07 1151.98,1210.89 1152.57,1209.75 1153.15,1209.88 1153.74,1208.59 1154.33,1207.58 1154.91,1207.57 1155.5,1205.28 1156.09,1204.4 1156.67,1204.95 1157.26,1204.11 1157.84,1204.48 1158.43,1206.47 1159.02,1208.16 1159.6,1202.73 1160.19,1203.23 1160.78,1203.88 1161.36,1207.07 1161.95,1208.96 1162.54,1210.68 1163.12,1211.64 1163.71,1213.23 1164.29,1211.88 1164.88,1210.59 1165.47,1213.39 1166.05,1211.7 1166.64,1210.26 1167.23,1215.6 1167.81,1216.6 1168.4,1215.09 1168.99,1217.85 1169.57,1220.14 1170.16,1222.34 1170.75,1223.27 1171.33,1223.77 1171.92,1223.1 1172.5,1218.69 1173.09,1218.31 1173.68,1219.19 1174.26,1219.93 1174.85,1219.66 1175.44,1219.47 1176.02,1220.56 1176.61,1222.53 1177.2,1224.6 1177.78,1224.23 1178.37,1225.01 1178.96,1223.16 1179.54,1222.93 1180.13,1223.68 1180.71,1224.55 1181.3,1222.54 1181.89,1221.9 1182.47,1222.74 1183.06,1224.96 1183.65,1220.36 1184.23,1218.75 1184.82,1217.07 1185.41,1218 1185.99,1214.78 1186.58,1214.74 1187.16,1214.76 1187.75,1213.37 1188.34,1212.07 1188.92,1211.11 1189.51,1206.16 1190.1,1206.62 1190.68,1205.8 1191.27,1208.77 1191.86,1208.72 1192.44,1207.69 1193.03,1208.01 1193.62,1206.76 1194.2,1203.26 1194.79,1203.73 1195.37,1202.61 1195.96,1203.25 1196.55,1205.15 1197.13,1205.72 1197.72,1208.99 1198.31,1210.54 1198.89,1213.13 1199.48,1214.3 1200.07,1212.78 1200.65,1212.64 1201.24,1211.2 1201.83,1212.8 1202.41,1211.45 1203,1211.53 1203.58,1211.62 1204.17,1209.1 1204.76,1207.91 1205.34,1209.37 1205.93,1210.94 1206.52,1211.09 1207.1,1216.25 1207.69,1214.82 1208.28,1215.9 1208.86,1213.13 1209.45,1211.43 1210.03,1213.99 1210.62,1215.24 1211.21,1216.24 1211.79,1214.89 1212.38,1214.55 1212.97,1213.11 1213.55,1211.66 1214.14,1209.5 1214.73,1209.64 1215.31,1206.93 1215.9,1207.18 1216.49,1207.46 1217.07,1205.51 1217.66,1207.52 1218.24,1208.03 1218.83,1206.06 1219.42,1205.33 1220,1205.81 1220.59,1204.99 1221.18,1206.88 1221.76,1209.87 1222.35,1210.29 1222.94,1211.67 1223.52,1211.75 1224.11,1212.76 1224.7,1212.85 1225.28,1211.64 1225.87,1210.34 1226.45,1210.51 1227.04,1212.02 1227.63,1210.45 1228.21,1210.46 1228.8,1207.88 1229.39,1209.46 1229.97,1212.46 1230.56,1209.88 1231.15,1208.59 1231.73,1210.56 1232.32,1209.34 1232.91,1209.93 1233.49,1212.9 1234.08,1212.88 1234.66,1214.24 1235.25,1213.86 1235.84,1215.07 1236.42,1215 1237.01,1215.02 1237.6,1212.22 1238.18,1211.28 1238.77,1211.35 1239.36,1211.17 1239.94,1209.96 1240.53,1210.09 1241.11,1208.66 1241.7,1208.86 1242.29,1206.23 1242.87,1206.79 1243.46,1207.07 1244.05,1206 1244.63,1209.19 1245.22,1211.13 1245.81,1213.81 1246.39,1215.13 1246.98,1217.75 1247.57,1216.24 1248.15,1214.68 1248.74,1213.17 1249.32,1211.82 1249.91,1212 1250.5,1213.46 1251.08,1212.08 1251.67,1212.14 1252.26,1212.3 1252.84,1216.33 1253.43,1217.38 1254.02,1217.34 1254.6,1214.3 1255.19,1212.58 1255.78,1212.49 1256.36,1211.05 1256.95,1213.64 1257.53,1212.11 1258.12,1212.34 1258.71,1208.27 1259.29,1208.5 1259.88,1208.92 1260.47,1207.83 1261.05,1207.05 1261.64,1208.61 1262.23,1210.51 1262.81,1208.24 1263.4,1203.28 1263.98,1205.08 1264.57,1203.06 1265.16,1203.94 1265.74,1204.6 1266.33,1204.81 1266.92,1206.74 1267.5,1207.2 1268.09,1207.45 1268.68,1210.11 1269.26,1211.82 1269.85,1210.75 1270.44,1212.38 1271.02,1213.79 1271.61,1215.01 1272.19,1214.8 1272.78,1214.59 1273.37,1215.95 1273.95,1214.7 1274.54,1217.35 1275.13,1218.38 1275.71,1215.64 1276.3,1215.29 1276.89,1221.7 1277.47,1222.45 1278.06,1223.28 1278.65,1225.18 1279.23,1225.67 1279.82,1223.61 1280.4,1223.19 1280.99,1222.29 1281.58,1221.61 1282.16,1221.32 1282.75,1221.03 1283.34,1220.9 1283.92,1223.42 1284.51,1222.72 1285.1,1222.49 1285.68,1222.03 1286.27,1220.08 1286.86,1219.34 1287.44,1219.33 1288.03,1217.76 1288.61,1216.36 1289.2,1214.81 1289.79,1214.8 1290.37,1214.82 1290.96,1209.33 1291.55,1210.83 1292.13,1212.54 1292.72,1210.09 1293.31,1210.22 1293.89,1213.27 1294.48,1214.39 1295.06,1213.01 1295.65,1215.3 1296.24,1216.27 1296.82,1214.41 1297.41,1211.37 1298,1210.04 1298.58,1208.75 1299.17,1210.19 1299.76,1213.95 1300.34,1210 1300.93,1210.29 1301.52,1213.3 1302.1,1216.98 1302.69,1214.01 1303.27,1214.04 1303.86,1215.38 1304.45,1215.2 1305.03,1215.01 1305.62,1213.6 1306.21,1212.41 1306.79,1211.25 1307.38,1211.48 1307.97,1211.52 1308.55,1210.37 1309.14,1211.85 1309.73,1210.33 1310.31,1209.06 1310.9,1210.54 1311.48,1210.9 1312.07,1209.42 1312.66,1205.85 1313.24,1208.98 1313.83,1209.55 1314.42,1210.97 1315,1213.65 1315.59,1210.8 1316.18,1204.32 1316.76,1204.86 1317.35,1206.69 1317.93,1205.88 1318.52,1207.49 1319.11,1206.52 1319.69,1205.41 1320.28,1205.86 1320.87,1208.74 1321.45,1208.81 1322.04,1211.68 1322.63,1213.22 1323.21,1216.01 1323.8,1217.16 1324.39,1217.05 1324.97,1216.93 1325.56,1215.41 1326.14,1216.65 1326.73,1216.64 1327.32,1216.31 1327.9,1217.48 1328.49,1219.94 1329.08,1218.16 1329.66,1217.69 1330.25,1216.11 1330.84,1218.43 1331.42,1216.98 1332.01,1219.4 1332.6,1220.39 1333.18,1220.35 1333.77,1217.24 1334.35,1219.75 1334.94,1221.98 1335.53,1222.91 1336.11,1223.82 1336.7,1221.7 1337.29,1221.29 1337.87,1220.73 1338.46,1219.11 1339.05,1218.9 1339.63,1221.01 1340.22,1220.59 1340.8,1221.4 1341.39,1220.61 1341.98,1218.87 1342.56,1218.34 1343.15,1217.81 1343.74,1220.2 1344.32,1219.49 1344.91,1216.45 1345.5,1213.61 1346.08,1211.98 1346.67,1210.75 1347.26,1210.71 1347.84,1209.66 1348.43,1212.41 1349.01,1212.54 1349.6,1212.41 1350.19,1208.36 1350.77,1208.33 1351.36,1208.16 1351.95,1208.57 1352.53,1208.6 1353.12,1208.9 1353.71,1209.04 1354.29,1210.57 1354.88,1210.66 1355.47,1212.09 1356.05,1212.2 1356.64,1212.35 1357.22,1212.59 1357.81,1213.93 1358.4,1209.82 1358.98,1209.61 1359.57,1208.45 1360.16,1209.89 1360.74,1210.32 1361.33,1213.07 1361.92,1211.82 1362.5,1209.37 1363.09,1206.77 1363.68,1208.58 1364.26,1205.83 1364.85,1206.19 1365.43,1208.94 1366.02,1209.2 1366.61,1205.06 1367.19,1208.33 1367.78,1211.35 1368.37,1212.64 1368.95,1212.69 1369.54,1210.16 1370.13,1208.89 1370.71,1210.3 1371.3,1212 1371.88,1212.04 1372.47,1209.25 1373.06,1209.22 1373.64,1207.84 1374.23,1206.84 1374.82,1207.34 1375.4,1209.15 1375.99,1205.25 1376.58,1208.67 1377.16,1208.94 1377.75,1210.22 1378.34,1210.42 1378.92,1210.74 1379.51,1210.56 1380.09,1209.56 1380.68,1202.89 1381.27,1203.59 1381.85,1210.7 1382.44,1211.96 1383.03,1211.96 1383.61,1214.73 1384.2,1216.04 1384.79,1218.18 1385.37,1216.45 1385.96,1217.6 1386.55,1217.27 1387.13,1217.01 1387.72,1214.2 1388.3,1209.98 1388.89,1211.59 1389.48,1212.05 1390.06,1213.63 1390.65,1217.52 1391.24,1219.86 1391.82,1222.13 1392.41,1218.89 1393,1215.88 1393.58,1214.53 1394.17,1209.01 1394.75,1211.77 1395.34,1213.09 1395.93,1210.58 1396.51,1210.55 1397.1,1211.99 1397.69,1213.17 1398.27,1211.79 1398.86,1213.3 1399.45,1214.4 1400.03,1214.56 1400.62,1215.59 1401.21,1209.88 1401.79,1208.74 1402.38,1210.05 1402.96,1209.02 1403.55,1208.98 1404.14,1209.4 1404.72,1208.47 1405.31,1208.65 1405.9,1207.28 1406.48,1204.92 1407.07,1203.8 1407.66,1208.55 1408.24,1209.1 1408.83,1207.88 1409.42,1205.45 1410,1207.28 1410.59,1207.54 1411.17,1214.3 1411.76,1216.69 1412.35,1217.81 1412.93,1215.81 1413.52,1218.17 1414.11,1216.58 1414.69,1213.71 1415.28,1211.99 1415.87,1212.14 1416.45,1212.04 1417.04,1213.31 1417.63,1208.11 1418.21,1208.37 1418.8,1208.58 1419.38,1207.74 1419.97,1207.98 1420.56,1210.9 1421.14,1210.97 1421.73,1211.13 1422.32,1208.3 1422.9,1209.8 1423.49,1210.16 1424.08,1212.01 1424.66,1210.65 1425.25,1210.76 1425.83,1209.34 1426.42,1210.65 1427.01,1211.01 1427.59,1211.06 1428.18,1210 1428.77,1214.02 1429.35,1214.01 1429.94,1219.19 1430.53,1218.8 1431.11,1218.75 1431.7,1217.24 1432.29,1216.99 1432.87,1218.33 1433.46,1216.53 1434.04,1212.52 1434.63,1210.91 1435.22,1211.29 1435.8,1210.95 1436.39,1210.97 1436.98,1212.19 1437.56,1211.98 1438.15,1209.5 1438.74,1211.09 1439.32,1212.4 1439.91,1212.45 1440.5,1209.92 1441.08,1212.45 1441.67,1213.77 1442.25,1212.3 1442.84,1214.89 1443.43,1218.79 1444.01,1219.59 1444.6,1223.25 1445.19,1221.74 1445.77,1221.32 1446.36,1220.61 1446.95,1217.25 1447.53,1216.95 1448.12,1222.3 1448.7,1221.89 1449.29,1220.34 1449.88,1221.11 1450.46,1220.67 1451.05,1221.37 1451.64,1222.15 1452.22,1219.13 1452.81,1217.56 1453.4,1215.86 1453.98,1215.3 1454.57,1216.52 1455.16,1214.88 1455.74,1213.34 1456.33,1215.75 1456.91,1214.13 1457.5,1212.83 1458.09,1210.12 1458.67,1210.11 1459.26,1209.01 1459.85,1213.47 1460.43,1212.23 1461.02,1211.97 1461.61,1214.55 1462.19,1213.21 1462.78,1211.63 1463.37,1209.01 1463.95,1213.23 1464.54,1211.73 1465.12,1210.25 1465.71,1210.27 1466.3,1208.96 1466.88,1210.41 1467.47,1204.97 1468.06,1206.64 1468.64,1206.76 1469.23,1207.24 1469.82,1206.18 1470.4,1207.93 1470.99,1209.87 1471.57,1210.11 1472.16,1215.72 1472.75,1218.17 1473.33,1215.15 1473.92,1214.82 1474.51,1217.41 1475.09,1216.12 1475.68,1218.57 1476.27,1219.57 1476.85,1221.84 1477.44,1220.08 1478.03,1217.27 1478.61,1217.29 1479.2,1215.81 1479.78,1217.22 1480.37,1215.79 1480.96,1215.88 1481.54,1214.3 1482.13,1213.01 1482.72,1213.19 1483.3,1214.01 1483.89,1213.86 1484.48,1209.98 1485.06,1210.06 1485.65,1210.12 1486.24,1208.84 1486.82,1207.88 1487.41,1207.98 1487.99,1209.34 1488.58,1209.67 1489.17,1207.18 1489.75,1206.32 1490.34,1206.98 1490.93,1208.54 1491.51,1212.99 1492.1,1211.88 1492.69,1213.25 1493.27,1214.55 1493.86,1213.03 1494.45,1214.32 1495.03,1215.53 1495.62,1215.35 1496.2,1215.28 1496.79,1216.27 1497.38,1216.11 1497.96,1214.54 1498.55,1218.36 1499.14,1215.17 1499.72,1215.3 1500.31,1208.45 1500.9,1201.9 1501.48,1202.46 1502.07,1204.14 1502.65,1204.78 1503.24,1205.42 1503.83,1205.76 1504.41,1204.75 1505,1203.97 1505.59,1203.36 1506.17,1207.78 1506.76,1206.81 1507.35,1204.31 1507.93,1203.28 1508.52,1205.16 1509.11,1206.94 1509.69,1206.95 1510.28,1208.58 1510.86,1207.61 1511.45,1206.55 1512.04,1206.64 1512.62,1205.57 1513.21,1208.85 1513.8,1210.39 1514.38,1210.52 1514.97,1206.4 1515.56,1206.54 1516.14,1211.21 1516.73,1211.52 1517.32,1211.51 1517.9,1214.29 1518.49,1218.43 1519.07,1219.59 1519.66,1218.15 1520.25,1216.66 1520.83,1216.78 1521.42,1219.06 1522.01,1217.5 1522.59,1218.68 1523.18,1218.13 1523.77,1220.61 1524.35,1218.93 1524.94,1218.8 1525.52,1219.89 1526.11,1215.74 1526.7,1214.35 1527.28,1211.84 1527.87,1212.98 1528.46,1216.86 1529.04,1218.94 1529.63,1221.42 1530.22,1222.53 1530.8,1223.46 1531.39,1221.59 1531.98,1221.1 1532.56,1222.02 1533.15,1220.08 1533.73,1222.31 1534.32,1220.36 1534.91,1218.42 1535.49,1216.79 1536.08,1216.48 1536.67,1217.73 1537.25,1217.14 1537.84,1215.35 1538.43,1218.1 1539.01,1216.3 1539.6,1217.18 1540.19,1215.76 1540.77,1214.55 1541.36,1211.94 1541.94,1207.58 1542.53,1207.79 1543.12,1205.35 1543.7,1208.1 1544.29,1212.25 1544.88,1211.11 1545.46,1212.57 1546.05,1212.32 1546.64,1213.78 1547.22,1217.8 1547.81,1214.61 1548.4,1214.53 1548.98,1214.9 1549.57,1216.28 1550.15,1216.26 1550.74,1215.81 1551.33,1214.16 1551.91,1215.57 1552.5,1216.6 1553.09,1215.09 1553.67,1217.77 1554.26,1216.13 1554.85,1214.58 1555.43,1214.73 1556.02,1213.24 1556.6,1212.98 1557.19,1211.68 1557.78,1212.72 1558.36,1212.92 1558.95,1215.47 1559.54,1214.17 1560.12,1215.48 1560.71,1216.79 1561.3,1216.85 1561.88,1215.24 1562.47,1213.66 1563.06,1212.22 1563.64,1213.32 1564.23,1214.67 1564.81,1216.09 1565.4,1216.03 1565.99,1213 1566.57,1212.79 1567.16,1213.79 1567.75,1212.13 1568.33,1212.1 1568.92,1213.6 1569.51,1213.65 1570.09,1213.7 1570.68,1210.91 1571.27,1208.09 1571.85,1209.53 1572.44,1205.67 1573.02,1207.63 1573.61,1206.29 1574.2,1205.37 1574.78,1205.94 1575.37,1207.58 1575.96,1205.36 1576.54,1205.75 1577.13,1207.25 1577.72,1209 1578.3,1210.46 1578.89,1209.44 1579.47,1208.13 1580.06,1204.25 1580.65,1203.44 1581.23,1202.46 1581.82,1204.45 1582.41,1203.7 1582.99,1205.79 1583.58,1206.24 1584.17,1206.66 1584.75,1201.74 1585.34,1202.47 1585.93,1201.58 1586.51,1203.14 1587.1,1202.55 1587.68,1204.45 1588.27,1206.18 1588.86,1206.68 1589.44,1206.98 1590.03,1203.52 1590.62,1201.14 1591.2,1201.77 1591.79,1203.66 1592.38,1205.51 1592.96,1206.73 1593.55,1211.04 1594.14,1216.44 1594.72,1215.2 1595.31,1212.54 1595.89,1212.35 1596.48,1212.39 1597.07,1213.78 1597.65,1213.7 1598.24,1213.26 1598.83,1213.06 1599.41,1211.94 1600,1209.17 1600.59,1209.52 1601.17,1208.44 1601.76,1208.61 1602.34,1208.66 1602.93,1208.85 1603.52,1207.94 1604.1,1206.66 1604.69,1206.76 1605.28,1209.65 1605.86,1209.62 1606.45,1208.52 1607.04,1209.88 1607.62,1210.03 1608.21,1213.07 1608.8,1217.12 1609.38,1216.68 1609.97,1216.24 1610.55,1214.75 1611.14,1212.01 1611.73,1212.03 1612.31,1209.16 1612.9,1209.29 1613.49,1206.56 1614.07,1207.12 1614.66,1207.69 1615.25,1209.28 1615.83,1212.41 1616.42,1210.87 1617.01,1213.88 1617.59,1211.06 1618.18,1212.3 1618.76,1212.55 1619.35,1213.75 1619.94,1214.12 1620.52,1215.11 1621.11,1216.49 1621.7,1220.22 1622.28,1221.52 1622.87,1221.22 1623.46,1219.27 1624.04,1219.2 1624.63,1218.96 1625.22,1220.15 1625.8,1225.01 1626.39,1224.35 1626.97,1223.57 1627.56,1224.29 1628.15,1222.5 1628.73,1221.93 1629.32,1223.86 1629.91,1222.98 1630.49,1220.98 1631.08,1220.54 1631.67,1218.68 1632.25,1214.66 1632.84,1214.39 1633.42,1216.87 1634.01,1219.21 1634.6,1220.02 1635.18,1216.8 1635.77,1213.91 1636.36,1211.35 1636.94,1210.17 1637.53,1211.58 1638.12,1210.2 1638.7,1210.1 1639.29,1210.29 1639.88,1207.8 1640.46,1209.64 1641.05,1212.67 1641.63,1211.45 1642.22,1212.94 1642.81,1211.24 1643.39,1210.3 1643.98,1213.22 1644.57,1214.5 1645.15,1214.91 1645.74,1214.89 1646.33,1214.66 1646.91,1214.53 1647.5,1214.35 1648.09,1212.89 1648.67,1211.42 1649.26,1208.96 1649.84,1209.32 1650.43,1209.74 1651.02,1210.91 1651.6,1209.69 1652.19,1209.76 1652.78,1210 1653.36,1211.42 1653.95,1208.7 1654.54,1208.68 1655.12,1209.03 1655.71,1210.42 1656.29,1212.13 1656.88,1213.33 1657.47,1214.41 1658.05,1214.5 1658.64,1215.33 1659.23,1218.03 1659.81,1217.85 1660.4,1221.48 1660.99,1219.88 1661.57,1218.08 1662.16,1213.96 1662.75,1212.66 1663.33,1214.02 1663.92,1212.87 1664.5,1212.92 1665.09,1214.23 1665.68,1211.37 1666.26,1209.97 1666.85,1208.7 1667.44,1208.96 1668.02,1207.72 1668.61,1206.73 1669.2,1204.56 1669.78,1206.14 1670.37,1206.72 1670.96,1207.03 1671.54,1205.78 1672.13,1207.55 1672.71,1210.71 1673.3,1210.77 1673.89,1209.28 1674.47,1208.17 1675.06,1208.79 1675.65,1207.65 1676.23,1207.73 1676.82,1207.86 1677.41,1207.92 1677.99,1208.07 1678.58,1208.3 1679.17,1205.77 1679.75,1210.39 1680.34,1211.92 1680.92,1213.46 1681.51,1209.53 1682.1,1210.15 1682.68,1211.38 1683.27,1210.01 1683.86,1209.76 1684.44,1209.82 1685.03,1209.96 1685.62,1211.64 1686.2,1210.42 1686.79,1210.54 1687.37,1211.07 1687.96,1211.35 1688.55,1212.91 1689.13,1214.37 1689.72,1214.71 1690.31,1214.61 1690.89,1215.95 1691.48,1215.44 1692.07,1219.1 1692.65,1220.16 1693.24,1218.06 1693.83,1219 1694.41,1217.65 1695,1216.14 1695.58,1216.01 1696.17,1217.15 1696.76,1215.63 1697.34,1216.78 1697.93,1218.05 1698.52,1216.02 1699.1,1217.2 1699.69,1215.59 1700.28,1213.73 1700.86,1214.89 1701.45,1213.45 1702.04,1215.03 1702.62,1216.2 1703.21,1216.18 1703.79,1213.47 1704.38,1214.69 1704.97,1211.6 1705.55,1211.55 1706.14,1214.43 1706.73,1213.19 1707.31,1213.09 1707.9,1213.27 1708.49,1213.27 1709.07,1210.43 1709.66,1212.07 1710.24,1209.47 1710.83,1211.08 1711.42,1208.37 1712,1211.11 1712.59,1212.36 1713.18,1211.16 1713.76,1211.14 1714.35,1213.74 1714.94,1215.04 1715.52,1217.59 1716.11,1215.8 1716.7,1218.12 1717.28,1217.9 1717.87,1218.78 1718.45,1218.48 1719.04,1216.74 1719.63,1223.28 1720.21,1224.02 1720.8,1223.42 1721.39,1226.74 1721.97,1227.19 1722.56,1223.78 1723.15,1222.15 1723.73,1220.06 1724.32,1218.34 1724.91,1219.38 1725.49,1220.39 1726.08,1219.96 1726.66,1217.95 1727.25,1217.63 1727.84,1215.97 1728.42,1215.78 1729.01,1217.14 1729.6,1215.38 1730.18,1215.35 1730.77,1215.3 1731.36,1215.26 1731.94,1213.8 1732.53,1214.98 1733.11,1213.7 1733.7,1213.9 1734.29,1213.86 1734.87,1214.92 1735.46,1213.49 1736.05,1214.67 1736.63,1212.97 1737.22,1214.37 1737.81,1213 1738.39,1211.48 1738.98,1208.85 1739.57,1208.88 1740.15,1208.85 1740.74,1204.67 1741.32,1204.97 1741.91,1205.28 1742.5,1205.55 1743.08,1201.82 1743.67,1202.44 1744.26,1201.68 1744.84,1200.92 1745.43,1202.77 1746.02,1204.62 1746.6,1205.25 1747.19,1204.68 1747.78,1206.76 1748.36,1202.75 1748.95,1204.8 1749.53,1205.21 1750.12,1207.01 1750.71,1207.56 1751.29,1207.84 1751.88,1208.1 1752.47,1207.07 1753.05,1207.37 1753.64,1206.49 1754.23,1208.39 1754.81,1207.06 1755.4,1210.16 1755.99,1211.1 1756.57,1211.3 1757.16,1208.86 1757.74,1209.18 1758.33,1211.99 1758.92,1211.93 1759.5,1214.58 1760.09,1214.48 1760.68,1215.92 1761.26,1218.46 1761.85,1220.5 1762.44,1220.13 1763.02,1222.32 1763.61,1224.48 1764.19,1221.08 1764.78,1219.22 1765.37,1214.92 1765.95,1216.12 1766.54,1215.91 1767.13,1215.99 1767.71,1212.29 1768.3,1215.25 1768.89,1213.83 1769.47,1212.46 1770.06,1212.71 1770.65,1212.5 1771.23,1213.93 1771.82,1212.58 1772.4,1213.4 1772.99,1213.48 1773.58,1214.72 1774.16,1215.85 1774.75,1213.97 1775.34,1216.55 1775.92,1218.97 1776.51,1216.37 1777.1,1215 1777.68,1213.72 1778.27,1215.25 1778.86,1217.86 1779.44,1217.74 1780.03,1217.66 1780.61,1217.52 1781.2,1220.01 1781.79,1222.45 1782.37,1224.71 1782.96,1224.11 1783.55,1219.78 1784.13,1216.66 1784.72,1216.41 1785.31,1217.64 1785.89,1218.7 1786.48,1218.28 1787.06,1219.44 1787.65,1216.45 1788.24,1217.51 1788.82,1217.63 1789.41,1219.83 1790,1219.45 1790.58,1217.55 1791.17,1218.72 1791.76,1215.59 1792.34,1211.27 1792.93,1211.37 1793.52,1211.45 1794.1,1208.35 1794.69,1205.31 1795.27,1209.59 1795.86,1209.93 1796.45,1210.02 1797.03,1211.62 1797.62,1210.3 1798.21,1213.21 1798.79,1212.98 1799.38,1211.69 1799.97,1211.78 1800.55,1211.66 1801.14,1214.47 1801.73,1214.01 1802.31,1214.32 1802.9,1214.04 1803.48,1213.82 1804.07,1212.21 1804.66,1214.78 1805.24,1213.39 1805.83,1216.15 1806.42,1214.6 1807,1213.03 1807.59,1214.4 1808.18,1214.3 1808.76,1212.84 1809.35,1214.4 1809.94,1218.13 1810.52,1221.73 1811.11,1218.7 1811.69,1221.11 1812.28,1217.95 1812.87,1217.74 1813.45,1216.13 1814.04,1214.23 1814.63,1214.15 1815.21,1213.91 1815.8,1214.01 1816.39,1211.31 1816.97,1214.05 1817.56,1212.65 1818.14,1213.99 1818.73,1218.04 1819.32,1219.22 1819.9,1220.26 1820.49,1219.87 1821.08,1218.13 1821.66,1220.5 1822.25,1219.87 1822.84,1216.86 1823.42,1216.61 1824.01,1216.74 1824.6,1216.39 1825.18,1216.25 1825.77,1217.21 1826.35,1217.95 1826.94,1218.82 1827.53,1218.44 1828.11,1216.93 1828.7,1216.73 1829.29,1209.65 1829.87,1207.19 1830.46,1207.42 1831.05,1208.87 1831.63,1206.38 1832.22,1203.91 1832.81,1203.4 1833.39,1203.92 1833.98,1201.64 1834.56,1199.28 1835.15,1198.58 1835.74,1197.72 1836.32,1199.77 1836.91,1198.06 1837.5,1199.93 1838.08,1200.57 1838.67,1199.73 1839.26,1200.22 1839.84,1199.38 1840.43,1197.56 1841.01,1195.8 1841.6,1198.13 1842.19,1198.92 1842.77,1198.35 1843.36,1197.45 1843.95,1198.4 1844.53,1199.29 1845.12,1201.7 1845.71,1200.9 1846.29,1200.12 1846.88,1200.92 1847.47,1202.69 1848.05,1204.46 1848.64,1203.48 1849.22,1204.01 1849.81,1205.79 1850.4,1204.67 1850.98,1203.85 1851.57,1204.32 1852.16,1204.67 1852.74,1204.18 1853.33,1207.4 1853.92,1207.78 1854.5,1206.74 1855.09,1205.69 1855.68,1207.5 1856.26,1208.85 1856.85,1211.82 1857.43,1213.36 1858.02,1212.09 1858.61,1211.97 1859.19,1212.05 1859.78,1210.77 1860.37,1213.7 1860.95,1212.41 1861.54,1210.99 1862.13,1209.75 1862.71,1211.73 1863.3,1213.28 1863.88,1211.87 1864.47,1214.82 1865.06,1211.19 1865.64,1211.28 1866.23,1212.71 1866.82,1212.78 1867.4,1211.35 1867.99,1212.42 1868.58,1211.18 1869.16,1213.85 1869.75,1216.52 1870.34,1212.46 1870.92,1211.21 1871.51,1211.46 1872.09,1211.4 1872.68,1208.79 1873.27,1207.76 1873.85,1206.57 1874.44,1208.19 1875.03,1207.28 1875.61,1206.08 1876.2,1202.28 1876.79,1204.35 1877.37,1203.54 1877.96,1205.21 1878.55,1206.99 1879.13,1210.08 1879.72,1211.48 1880.3,1213.85 1880.89,1212.49 1881.48,1212.74 1882.06,1212.71 1882.65,1213.02 1883.24,1215.69 1883.82,1211.68 1884.41,1211.87 1885,1212.16 1885.58,1212.18 1886.17,1212.28 1886.76,1214.88 1887.34,1214.89 1887.93,1213.82 1888.51,1212.83 1889.1,1213.18 1889.69,1214.56 1890.27,1213.27 1890.86,1216.03 1891.45,1218.51 1892.03,1220.9 1892.62,1219.29 1893.21,1218.95 1893.79,1221.29 1894.38,1222.03 1894.96,1225.56 1895.55,1226.27 1896.14,1224.33 1896.72,1224.9 1897.31,1224.23 1897.9,1223.71 1898.48,1221.75 1899.07,1220.96 1899.66,1223.11 1900.24,1221.4 1900.83,1219.72 1901.42,1219.16 1902,1221.66 1902.59,1222.6 1903.17,1223.53 1903.76,1225.39 1904.35,1224.72 1904.93,1222.57 1905.52,1220.69 1906.11,1220.43 1906.69,1222.64 1907.28,1219.39 1907.87,1217.54 1908.45,1215.72 1909.04,1215.46 1909.63,1217.88 1910.21,1217.55 1910.8,1215.94 1911.38,1215.51 1911.97,1215.32 1912.56,1215.13 1913.14,1217.7 1913.73,1215.9 1914.32,1215.77 1914.9,1216.7 1915.49,1216.68 1916.08,1216.31 1916.66,1217.57 1917.25,1217.2 1917.83,1213.16 1918.42,1210.68 1919.01,1213.87 1919.59,1212.43 1920.18,1208.33 1920.77,1206.8 1921.35,1206.96 1921.94,1205.68 1922.53,1207.3 1923.11,1207.68 1923.7,1208.04 1924.29,1209.73 1924.87,1210.02 1925.46,1208.7 1926.04,1212.8 1926.63,1212.73 1927.22,1211.67 1927.8,1207.37 1928.39,1208.98 1928.98,1209.47 1929.56,1212.4 1930.15,1211.06 1930.74,1213.67 1931.32,1212.29 1931.91,1212.3 1932.5,1212.31 1933.08,1215.15 1933.67,1213.41 1934.25,1213.71 1934.84,1217.77 1935.43,1217.52 1936.01,1217.54 1936.6,1217.32 1937.19,1217.35 1937.77,1215.71 1938.36,1212.89 1938.95,1213.89 1939.53,1213.91 1940.12,1212.6 1940.71,1209.78 1941.29,1211.16 1941.88,1211.52 1942.46,1214.22 1943.05,1213.93 1943.64,1215.21 1944.22,1214.91 1944.81,1211.98 1945.4,1213.26 1945.98,1213.09 1946.57,1214.23 1947.16,1216.52 1947.74,1214.99 1948.33,1214.9 1948.91,1215.97 1949.5,1215.81 1950.09,1215.43 1950.67,1215.25 1951.26,1213.63 1951.85,1215.94 1952.43,1217.05 1953.02,1216.73 1953.61,1216.48 1954.19,1215.16 1954.78,1215.22 1955.37,1212.34 1955.95,1213.97 1956.54,1214.08 1957.12,1212.69 1957.71,1211.43 1958.3,1212.77 1958.88,1210.94 1959.47,1209.37 1960.06,1210.69 1960.64,1210.72 1961.23,1209.25 1961.82,1210.97 1962.4,1211.09 1962.99,1208.25 1963.58,1206.75 1964.16,1206.99 1964.75,1207.37 1965.33,1208.89 1965.92,1207.98 1966.51,1206.66 1967.09,1206.85 1967.68,1209.73 1968.27,1208.89 1968.85,1207.67 1969.44,1210.46 1970.03,1210.74 1970.61,1209.56 1971.2,1208.67 1971.78,1207.32 1972.37,1204.71 1972.96,1209.27 1973.54,1208.1 1974.13,1207.01 1974.72,1212.34 1975.3,1216.22 1975.89,1218.56 1976.48,1216.9 1977.06,1216.84 1977.65,1213.86 1978.24,1214.07 1978.82,1214.16 1979.41,1211.64 1979.99,1210.46 1980.58,1212.16 1981.17,1212.08 1981.75,1210.73 1982.34,1209.26 1982.93,1208 1983.51,1206.97 1984.1,1205.82 1984.69,1206.16 1985.27,1205.05 1985.86,1204.2 1986.45,1205.84 1987.03,1205.98 1987.62,1206.25 1988.2,1208.14 1988.79,1206.76 1989.38,1207.02 1989.96,1206.21 1990.55,1206.65 1991.14,1208.23 1991.72,1207.38 1992.31,1205.26 1992.9,1206.77 1993.48,1207.14 1994.07,1207.34 1994.65,1208.79 1995.24,1210.29 1995.83,1211.92 1996.41,1210.8 1997,1212.35 1997.59,1208.28 1998.17,1208.24 1998.76,1211.34 1999.35,1212.95 1999.93,1214.33 2000.52,1214 2001.11,1215.37 2001.69,1215.04 2002.28,1213.51 2002.86,1213.49 2003.45,1216.26 2004.04,1213.62 2004.62,1214.8 2005.21,1213.35 2005.8,1213.24 2006.38,1215.89 2006.97,1215.52 2007.56,1214.25 2008.14,1213.97 2008.73,1214.27 2009.32,1213 2009.9,1214.36 2010.49,1215.57 2011.07,1217.78 2011.66,1217.6 2012.25,1216.44 2012.83,1216.32 2013.42,1215.97 2014.01,1215.82 2014.59,1216.79 2015.18,1219.16 2015.77,1217.81 2016.35,1217.34 2016.94,1218.29 2017.53,1220.29 2018.11,1218.72 2018.7,1217.15 2019.28,1216.7 2019.87,1216.32 2020.46,1216 2021.04,1214.31 2021.63,1212.95 2022.22,1212.94 2022.8,1215.63 2023.39,1215.52 2023.98,1214.02 2024.56,1214.04 2025.15,1215.37 2025.73,1218.03 2026.32,1221.79 2026.91,1215.94 2027.49,1217.12 2028.08,1214.12 2028.67,1213.55 2029.25,1213.47 2029.84,1212.24 2030.43,1214.94 2031.01,1216.1 2031.6,1214.31 2032.19,1216.74 2032.77,1212.62 2033.36,1214.99 2033.94,1210.98 2034.53,1209.78 2035.12,1211.34 2035.7,1212.94 2036.29,1211.75 2036.88,1210.57 2037.46,1209.25 2038.05,1209.23 2038.64,1209.19 2039.22,1209.52 2039.81,1208.56 2040.4,1208.72 2040.98,1211.69 2041.57,1211.53 2042.15,1210.21 2042.74,1211.61 2043.33,1207.84 2043.91,1208.13 2044.5,1207.02 2045.09,1211.37 2045.67,1212.61 2046.26,1211.3 2046.85,1208.96 2047.43,1212.04 2048.02,1212.03 2048.6,1215.9 2049.19,1217.08 2049.78,1219.61 2050.36,1217.75 2050.95,1213.24 2051.54,1211.93 2052.12,1212.2 2052.71,1213.32 2053.3,1213.17 2053.88,1213.18 2054.47,1213.47 2055.06,1215.02 2055.64,1216.3 2056.23,1213.38 2056.81,1213.34 2057.4,1214.64 2057.99,1211.54 2058.57,1210.17 2059.16,1211.85 2059.75,1213.35 2060.33,1213.18 2060.92,1212.07 2061.51,1212.17 2062.09,1214.98 2062.68,1214.84 2063.27,1214.91 2063.85,1213.5 2064.44,1214.58 2065.02,1215.66 2065.61,1214.2 2066.2,1215.59 2066.78,1213.84 2067.37,1213.65 2067.96,1211.01 2068.54,1209.68 2069.13,1212.74 2069.72,1211.43 2070.3,1208.53 2070.89,1207.35 2071.48,1208.99 2072.06,1209.28 2072.65,1207.07 2073.23,1206.01 2073.82,1205.2 2074.41,1208.42 2074.99,1209.04 2075.58,1209.22 2076.17,1209.43 2076.75,1209.65 2077.34,1211.1 2077.93,1211.01 2078.51,1210.88 2079.1,1209.76 2079.68,1211.32 2080.27,1213.98 2080.86,1216.59 2081.44,1215.51 2082.03,1216.73 2082.62,1219.09 2083.2,1218.75 2083.79,1215.82 2084.38,1212.93 2084.96,1210.53 2085.55,1210.69 2086.14,1213.21 2086.72,1211.87 2087.31,1208.85 2087.89,1207.56 2088.48,1205.22 2089.07,1205.67 2089.65,1205.93 2090.24,1206.18 2090.83,1203.91 2091.41,1205.73 2092,1206.12 2092.59,1206.27 2093.17,1207.94 2093.76,1205.75 2094.35,1206.28 2094.93,1209.2 2095.52,1212.23 2096.1,1212.35 2096.69,1213.65 2097.28,1215.19 2097.86,1213.74 2098.45,1212.39 2099.04,1213.92 2099.62,1213.94 2100.21,1214.36 2100.8,1214.07 2101.38,1215.09 2101.97,1213.55 2102.55,1214.72 2103.14,1215.97 2103.73,1217.66 2104.31,1216.11 2104.9,1214.28 2105.49,1213.13 2106.07,1212.83 2106.66,1211.64 2107.25,1210.31 2107.83,1210.12 2108.42,1211.45 2109.01,1213.02 2109.59,1210.13 2110.18,1210.34 2110.76,1210.34 2111.35,1211.69 2111.94,1213.17 2112.52,1214.43 2113.11,1213.35 2113.7,1214.65 2114.28,1214.81 2114.87,1214.69 2115.46,1214.54 2116.04,1214.37 2116.63,1214.29 2117.22,1215.61 2117.8,1215.35 2118.39,1216.66 2118.97,1215.19 2119.56,1217.63 2120.15,1213.54 2120.73,1214.73 2121.32,1213.27 2121.91,1213.12 2122.49,1214.36 2123.08,1215.88 2123.67,1215.53 2124.25,1213.85 2124.84,1212.4 2125.42,1216.48 2126.01,1217.78 2126.6,1217.6 2127.18,1218.43 2127.77,1219.44 2128.36,1217.42 2128.94,1218.4 2129.53,1217.97 2130.12,1216.11 2130.7,1215.78 2131.29,1215.58 2131.88,1215.6 2132.46,1216.9 2133.05,1216.64 2133.63,1219.01 2134.22,1216.08 2134.81,1214.51 2135.39,1214.39 2135.98,1212.85 2136.57,1211.74 2137.15,1213.07 2137.74,1211.47 2138.33,1206.08 2138.91,1206.43 2139.5,1206.67 2140.09,1208.04 2140.67,1205.49 2141.26,1204.31 2141.84,1203.56 2142.43,1205.33 2143.02,1205.5 2143.6,1207.23 2144.19,1208.52 2144.78,1209.92 2145.36,1209.84 2145.95,1209.78 2146.54,1208.62 2147.12,1210.46 2147.71,1210.63 2148.3,1207.75 2148.88,1207.98 2149.47,1206.94 2150.05,1208.59 2150.64,1208.92 2151.23,1209.07 2151.81,1209.46 2152.4,1209.77 2152.99,1207.24 2153.57,1207.53 2154.16,1207.82 2154.75,1207.98 2155.33,1209.71 2155.92,1209.73 2156.5,1210.37 2157.09,1211.88 2157.68,1210.48 2158.26,1216 \"/>\n<path clip-path=\"url(#clip692)\" d=\"M986.025 1213.25 L986.612 1213.25 L987.198 1213.25 L987.785 1213.25 L988.371 1213.25 L988.957 1213.25 L989.544 1213.25 L990.13 1213.25 L990.717 1213.25 L991.303 1213.25 L991.889 1213.25 L992.476 1213.25 L993.062 1213.25 L993.649 1213.25 L994.235 1213.25 L994.822 1213.25 L995.408 1213.25 L995.994 1213.25 L996.581 1213.25 L997.167 1213.25 L997.754 1213.25 L998.34 1213.25 L998.926 1213.25 L999.513 1213.25 L1000.1 1213.25 L1000.69 1213.25 L1001.27 1213.25 L1001.86 1213.25 L1002.44 1213.25 L1003.03 1213.25 L1003.62 1213.25 L1004.2 1213.25 L1004.79 1213.25 L1005.38 1213.25 L1005.96 1213.25 L1006.55 1213.25 L1007.14 1213.25 L1007.72 1213.25 L1008.31 1213.25 L1008.9 1213.25 L1009.48 1213.25 L1010.07 1213.25 L1010.65 1213.25 L1011.24 1213.25 L1011.83 1213.25 L1012.41 1213.25 L1013 1213.25 L1013.59 1213.25 L1014.17 1213.25 L1014.76 1213.25 L1015.35 1213.25 L1015.93 1213.25 L1016.52 1213.25 L1017.11 1213.25 L1017.69 1213.25 L1018.28 1213.25 L1018.86 1213.25 L1019.45 1213.25 L1020.04 1213.25 L1020.62 1213.25 L1021.21 1213.25 L1021.8 1213.25 L1022.38 1213.25 L1022.97 1213.25 L1023.56 1213.25 L1024.14 1213.25 L1024.73 1213.25 L1025.32 1213.25 L1025.9 1213.25 L1026.49 1213.25 L1027.07 1213.25 L1027.66 1213.25 L1028.25 1213.25 L1028.83 1213.25 L1029.42 1213.25 L1030.01 1213.25 L1030.59 1213.25 L1031.18 1213.25 L1031.77 1213.25 L1032.35 1213.25 L1032.94 1213.25 L1033.52 1213.25 L1034.11 1213.25 L1034.7 1213.25 L1035.28 1213.25 L1035.87 1213.25 L1036.46 1213.25 L1037.04 1213.25 L1037.63 1213.25 L1038.22 1213.25 L1038.8 1213.25 L1039.39 1213.25 L1039.98 1213.25 L1040.56 1213.25 L1041.15 1213.25 L1041.73 1213.25 L1042.32 1213.25 L1042.91 1213.25 L1043.49 1213.25 L1044.08 1213.25 L1044.67 1213.25 L1045.25 1213.25 L1045.84 1213.25 L1046.43 1213.25 L1047.01 1213.25 L1047.6 1213.25 L1048.19 1213.25 L1048.77 1213.25 L1049.36 1213.25 L1049.94 1213.25 L1050.53 1213.25 L1051.12 1213.25 L1051.7 1213.25 L1052.29 1213.25 L1052.88 1213.25 L1053.46 1213.25 L1054.05 1213.25 L1054.64 1213.25 L1055.22 1213.25 L1055.81 1213.25 L1056.39 1213.25 L1056.98 1213.25 L1057.57 1213.25 L1058.15 1213.25 L1058.74 1213.25 L1059.33 1213.25 L1059.91 1213.25 L1060.5 1213.25 L1061.09 1213.25 L1061.67 1213.25 L1062.26 1213.25 L1062.85 1213.25 L1063.43 1213.25 L1064.02 1213.25 L1064.6 1213.25 L1065.19 1213.25 L1065.78 1213.25 L1066.36 1213.25 L1066.95 1213.25 L1067.54 1213.25 L1068.12 1213.25 L1068.71 1213.25 L1069.3 1213.25 L1069.88 1213.25 L1070.47 1213.25 L1071.06 1213.25 L1071.64 1213.25 L1072.23 1213.25 L1072.81 1213.25 L1073.4 1213.25 L1073.99 1213.25 L1074.57 1213.25 L1075.16 1213.25 L1075.75 1213.25 L1076.33 1213.25 L1076.92 1213.25 L1077.51 1213.25 L1078.09 1213.25 L1078.68 1213.25 L1079.26 1213.25 L1079.85 1213.25 L1080.44 1213.25 L1081.02 1213.25 L1081.61 1213.25 L1082.2 1213.25 L1082.78 1213.25 L1083.37 1213.25 L1083.96 1213.25 L1084.54 1213.25 L1085.13 1213.25 L1085.72 1213.25 L1086.3 1213.25 L1086.89 1213.25 L1087.47 1213.25 L1088.06 1213.25 L1088.65 1213.25 L1089.23 1213.25 L1089.82 1213.25 L1090.41 1213.25 L1090.99 1213.25 L1091.58 1213.25 L1092.17 1213.25 L1092.75 1213.25 L1093.34 1213.25 L1093.93 1213.25 L1094.51 1213.25 L1095.1 1213.25 L1095.68 1213.25 L1096.27 1213.25 L1096.86 1213.25 L1097.44 1213.25 L1098.03 1213.25 L1098.62 1213.25 L1099.2 1213.25 L1099.79 1213.25 L1100.38 1213.25 L1100.96 1213.25 L1101.55 1213.25 L1102.14 1213.25 L1102.72 1213.25 L1103.31 1213.25 L1103.89 1213.25 L1104.48 1213.25 L1105.07 1213.25 L1105.65 1213.25 L1106.24 1213.25 L1106.83 1213.25 L1107.41 1213.25 L1108 1213.25 L1108.59 1213.25 L1109.17 1213.25 L1109.76 1213.25 L1110.34 1213.25 L1110.93 1213.25 L1111.52 1213.25 L1112.1 1213.25 L1112.69 1213.25 L1113.28 1213.25 L1113.86 1213.25 L1114.45 1213.25 L1115.04 1213.25 L1115.62 1213.25 L1116.21 1213.25 L1116.8 1213.25 L1117.38 1213.25 L1117.97 1213.25 L1118.55 1213.25 L1119.14 1213.25 L1119.73 1213.25 L1120.31 1213.25 L1120.9 1213.25 L1121.49 1213.25 L1122.07 1213.25 L1122.66 1213.25 L1123.25 1213.25 L1123.83 1213.25 L1124.42 1213.25 L1125.01 1213.25 L1125.59 1213.25 L1126.18 1213.25 L1126.76 1213.25 L1127.35 1213.25 L1127.94 1213.25 L1128.52 1213.25 L1129.11 1213.25 L1129.7 1213.25 L1130.28 1213.25 L1130.87 1213.25 L1131.46 1213.25 L1132.04 1213.25 L1132.63 1213.25 L1133.21 1213.25 L1133.8 1213.25 L1134.39 1213.25 L1134.97 1213.25 L1135.56 1213.25 L1136.15 1213.25 L1136.73 1213.25 L1137.32 1213.25 L1137.91 1213.25 L1138.49 1213.25 L1139.08 1213.25 L1139.67 1213.25 L1140.25 1213.25 L1140.84 1213.25 L1141.42 1213.25 L1142.01 1213.25 L1142.6 1213.25 L1143.18 1213.25 L1143.77 1213.25 L1144.36 1213.25 L1144.94 1213.25 L1145.53 1213.25 L1146.12 1213.25 L1146.7 1213.25 L1147.29 1213.25 L1147.88 1213.25 L1148.46 1213.25 L1149.05 1213.25 L1149.63 1213.25 L1150.22 1213.25 L1150.81 1213.25 L1151.39 1213.25 L1151.98 1213.25 L1152.57 1213.25 L1153.15 1213.25 L1153.74 1213.25 L1154.33 1213.25 L1154.91 1213.25 L1155.5 1213.25 L1156.09 1213.25 L1156.67 1213.25 L1157.26 1213.25 L1157.84 1213.25 L1158.43 1213.25 L1159.02 1213.25 L1159.6 1213.25 L1160.19 1213.25 L1160.78 1213.25 L1161.36 1213.25 L1161.95 1213.25 L1162.54 1213.25 L1163.12 1213.25 L1163.71 1213.25 L1164.29 1213.25 L1164.88 1213.25 L1165.47 1213.25 L1166.05 1213.25 L1166.64 1213.25 L1167.23 1213.25 L1167.81 1213.25 L1168.4 1213.25 L1168.99 1213.25 L1169.57 1213.25 L1170.16 1213.25 L1170.75 1213.25 L1171.33 1213.25 L1171.92 1213.25 L1172.5 1213.25 L1173.09 1213.25 L1173.68 1213.25 L1174.26 1213.25 L1174.85 1213.25 L1175.44 1213.25 L1176.02 1213.25 L1176.61 1213.25 L1177.2 1213.25 L1177.78 1213.25 L1178.37 1213.25 L1178.96 1213.25 L1179.54 1213.25 L1180.13 1213.25 L1180.71 1213.25 L1181.3 1213.25 L1181.89 1213.25 L1182.47 1213.25 L1183.06 1213.25 L1183.65 1213.25 L1184.23 1213.25 L1184.82 1213.25 L1185.41 1213.25 L1185.99 1213.25 L1186.58 1213.25 L1187.16 1213.25 L1187.75 1213.25 L1188.34 1213.25 L1188.92 1213.25 L1189.51 1213.25 L1190.1 1213.25 L1190.68 1213.25 L1191.27 1213.25 L1191.86 1213.25 L1192.44 1213.25 L1193.03 1213.25 L1193.62 1213.25 L1194.2 1213.25 L1194.79 1213.25 L1195.37 1213.25 L1195.96 1213.25 L1196.55 1213.25 L1197.13 1213.25 L1197.72 1213.25 L1198.31 1213.25 L1198.89 1213.25 L1199.48 1213.25 L1200.07 1213.25 L1200.65 1213.25 L1201.24 1213.25 L1201.83 1213.25 L1202.41 1213.25 L1203 1213.25 L1203.58 1213.25 L1204.17 1213.25 L1204.76 1213.25 L1205.34 1213.25 L1205.93 1213.25 L1206.52 1213.25 L1207.1 1213.25 L1207.69 1213.25 L1208.28 1213.25 L1208.86 1213.25 L1209.45 1213.25 L1210.03 1213.25 L1210.62 1213.25 L1211.21 1213.25 L1211.79 1213.25 L1212.38 1213.25 L1212.97 1213.25 L1213.55 1213.25 L1214.14 1213.25 L1214.73 1213.25 L1215.31 1213.25 L1215.9 1213.25 L1216.49 1213.25 L1217.07 1213.25 L1217.66 1213.25 L1218.24 1213.25 L1218.83 1213.25 L1219.42 1213.25 L1220 1213.25 L1220.59 1213.25 L1221.18 1213.25 L1221.76 1213.25 L1222.35 1213.25 L1222.94 1213.25 L1223.52 1213.25 L1224.11 1213.25 L1224.7 1213.25 L1225.28 1213.25 L1225.87 1213.25 L1226.45 1213.25 L1227.04 1213.25 L1227.63 1213.25 L1228.21 1213.25 L1228.8 1213.25 L1229.39 1213.25 L1229.97 1213.25 L1230.56 1213.25 L1231.15 1213.25 L1231.73 1213.25 L1232.32 1213.25 L1232.91 1213.25 L1233.49 1213.25 L1234.08 1213.25 L1234.66 1213.25 L1235.25 1213.25 L1235.84 1213.25 L1236.42 1213.25 L1237.01 1213.25 L1237.6 1213.25 L1238.18 1213.25 L1238.77 1213.25 L1239.36 1213.25 L1239.94 1213.25 L1240.53 1213.25 L1241.11 1213.25 L1241.7 1213.25 L1242.29 1213.25 L1242.87 1213.25 L1243.46 1213.25 L1244.05 1213.25 L1244.63 1213.25 L1245.22 1213.25 L1245.81 1213.25 L1246.39 1213.25 L1246.98 1213.25 L1247.57 1213.25 L1248.15 1213.25 L1248.74 1213.25 L1249.32 1213.25 L1249.91 1213.25 L1250.5 1213.25 L1251.08 1213.25 L1251.67 1213.25 L1252.26 1213.25 L1252.84 1213.25 L1253.43 1213.25 L1254.02 1213.25 L1254.6 1213.25 L1255.19 1213.25 L1255.78 1213.25 L1256.36 1213.25 L1256.95 1213.25 L1257.53 1213.25 L1258.12 1213.25 L1258.71 1213.25 L1259.29 1213.25 L1259.88 1213.25 L1260.47 1213.25 L1261.05 1213.25 L1261.64 1213.25 L1262.23 1213.25 L1262.81 1213.25 L1263.4 1213.25 L1263.98 1213.25 L1264.57 1213.25 L1265.16 1213.25 L1265.74 1213.25 L1266.33 1213.25 L1266.92 1213.25 L1267.5 1213.25 L1268.09 1213.25 L1268.68 1213.25 L1269.26 1213.25 L1269.85 1213.25 L1270.44 1213.25 L1271.02 1213.25 L1271.61 1213.25 L1272.19 1213.25 L1272.78 1213.25 L1273.37 1213.25 L1273.95 1213.25 L1274.54 1213.25 L1275.13 1213.25 L1275.71 1213.25 L1276.3 1213.25 L1276.89 1213.25 L1277.47 1213.25 L1278.06 1213.25 L1278.65 1213.25 L1279.23 1213.25 L1279.82 1213.25 L1280.4 1213.25 L1280.99 1213.25 L1281.58 1213.25 L1282.16 1213.25 L1282.75 1213.25 L1283.34 1213.25 L1283.92 1213.25 L1284.51 1213.25 L1285.1 1213.25 L1285.68 1213.25 L1286.27 1213.25 L1286.86 1213.25 L1287.44 1213.25 L1288.03 1213.25 L1288.61 1213.25 L1289.2 1213.25 L1289.79 1213.25 L1290.37 1213.25 L1290.96 1213.25 L1291.55 1213.25 L1292.13 1213.25 L1292.72 1213.25 L1293.31 1213.25 L1293.89 1213.25 L1294.48 1213.25 L1295.06 1213.25 L1295.65 1213.25 L1296.24 1213.25 L1296.82 1213.25 L1297.41 1213.25 L1298 1213.25 L1298.58 1213.25 L1299.17 1213.25 L1299.76 1213.25 L1300.34 1213.25 L1300.93 1213.25 L1301.52 1213.25 L1302.1 1213.25 L1302.69 1213.25 L1303.27 1213.25 L1303.86 1213.25 L1304.45 1213.25 L1305.03 1213.25 L1305.62 1213.25 L1306.21 1213.25 L1306.79 1213.25 L1307.38 1213.25 L1307.97 1213.25 L1308.55 1213.25 L1309.14 1213.25 L1309.73 1213.25 L1310.31 1213.25 L1310.9 1213.25 L1311.48 1213.25 L1312.07 1213.25 L1312.66 1213.25 L1313.24 1213.25 L1313.83 1213.25 L1314.42 1213.25 L1315 1213.25 L1315.59 1213.25 L1316.18 1213.25 L1316.76 1213.25 L1317.35 1213.25 L1317.93 1213.25 L1318.52 1213.25 L1319.11 1213.25 L1319.69 1213.25 L1320.28 1213.25 L1320.87 1213.25 L1321.45 1213.25 L1322.04 1213.25 L1322.63 1213.25 L1323.21 1213.25 L1323.8 1213.25 L1324.39 1213.25 L1324.97 1213.25 L1325.56 1213.25 L1326.14 1213.25 L1326.73 1213.25 L1327.32 1213.25 L1327.9 1213.25 L1328.49 1213.25 L1329.08 1213.25 L1329.66 1213.25 L1330.25 1213.25 L1330.84 1213.25 L1331.42 1213.25 L1332.01 1213.25 L1332.6 1213.25 L1333.18 1213.25 L1333.77 1213.25 L1334.35 1213.25 L1334.94 1213.25 L1335.53 1213.25 L1336.11 1213.25 L1336.7 1213.25 L1337.29 1213.25 L1337.87 1213.25 L1338.46 1213.25 L1339.05 1213.25 L1339.63 1213.25 L1340.22 1213.25 L1340.8 1213.25 L1341.39 1213.25 L1341.98 1213.25 L1342.56 1213.25 L1343.15 1213.25 L1343.74 1213.25 L1344.32 1213.25 L1344.91 1213.25 L1345.5 1213.25 L1346.08 1213.25 L1346.67 1213.25 L1347.26 1213.25 L1347.84 1213.25 L1348.43 1213.25 L1349.01 1213.25 L1349.6 1213.25 L1350.19 1213.25 L1350.77 1213.25 L1351.36 1213.25 L1351.95 1213.25 L1352.53 1213.25 L1353.12 1213.25 L1353.71 1213.25 L1354.29 1213.25 L1354.88 1213.25 L1355.47 1213.25 L1356.05 1213.25 L1356.64 1213.25 L1357.22 1213.25 L1357.81 1213.25 L1358.4 1213.25 L1358.98 1213.25 L1359.57 1213.25 L1360.16 1213.25 L1360.74 1213.25 L1361.33 1213.25 L1361.92 1213.25 L1362.5 1213.25 L1363.09 1213.25 L1363.68 1213.25 L1364.26 1213.25 L1364.85 1213.25 L1365.43 1213.25 L1366.02 1213.25 L1366.61 1213.25 L1367.19 1213.25 L1367.78 1213.25 L1368.37 1213.25 L1368.95 1213.25 L1369.54 1213.25 L1370.13 1213.25 L1370.71 1213.25 L1371.3 1213.25 L1371.88 1213.25 L1372.47 1213.25 L1373.06 1213.25 L1373.64 1213.25 L1374.23 1213.25 L1374.82 1213.25 L1375.4 1213.25 L1375.99 1213.25 L1376.58 1213.25 L1377.16 1213.25 L1377.75 1213.25 L1378.34 1213.25 L1378.92 1213.25 L1379.51 1213.25 L1380.09 1213.25 L1380.68 1213.25 L1381.27 1213.25 L1381.85 1213.25 L1382.44 1213.25 L1383.03 1213.25 L1383.61 1213.25 L1384.2 1213.25 L1384.79 1213.25 L1385.37 1213.25 L1385.96 1213.25 L1386.55 1213.25 L1387.13 1213.25 L1387.72 1213.25 L1388.3 1213.25 L1388.89 1213.25 L1389.48 1213.25 L1390.06 1213.25 L1390.65 1213.25 L1391.24 1213.25 L1391.82 1213.25 L1392.41 1213.25 L1393 1213.25 L1393.58 1213.25 L1394.17 1213.25 L1394.75 1213.25 L1395.34 1213.25 L1395.93 1213.25 L1396.51 1213.25 L1397.1 1213.25 L1397.69 1213.25 L1398.27 1213.25 L1398.86 1213.25 L1399.45 1213.25 L1400.03 1213.25 L1400.62 1213.25 L1401.21 1213.25 L1401.79 1213.25 L1402.38 1213.25 L1402.96 1213.25 L1403.55 1213.25 L1404.14 1213.25 L1404.72 1213.25 L1405.31 1213.25 L1405.9 1213.25 L1406.48 1213.25 L1407.07 1213.25 L1407.66 1213.25 L1408.24 1213.25 L1408.83 1213.25 L1409.42 1213.25 L1410 1213.25 L1410.59 1213.25 L1411.17 1213.25 L1411.76 1213.25 L1412.35 1213.25 L1412.93 1213.25 L1413.52 1213.25 L1414.11 1213.25 L1414.69 1213.25 L1415.28 1213.25 L1415.87 1213.25 L1416.45 1213.25 L1417.04 1213.25 L1417.63 1213.25 L1418.21 1213.25 L1418.8 1213.25 L1419.38 1213.25 L1419.97 1213.25 L1420.56 1213.25 L1421.14 1213.25 L1421.73 1213.25 L1422.32 1213.25 L1422.9 1213.25 L1423.49 1213.25 L1424.08 1213.25 L1424.66 1213.25 L1425.25 1213.25 L1425.83 1213.25 L1426.42 1213.25 L1427.01 1213.25 L1427.59 1213.25 L1428.18 1213.25 L1428.77 1213.25 L1429.35 1213.25 L1429.94 1213.25 L1430.53 1213.25 L1431.11 1213.25 L1431.7 1213.25 L1432.29 1213.25 L1432.87 1213.25 L1433.46 1213.25 L1434.04 1213.25 L1434.63 1213.25 L1435.22 1213.25 L1435.8 1213.25 L1436.39 1213.25 L1436.98 1213.25 L1437.56 1213.25 L1438.15 1213.25 L1438.74 1213.25 L1439.32 1213.25 L1439.91 1213.25 L1440.5 1213.25 L1441.08 1213.25 L1441.67 1213.25 L1442.25 1213.25 L1442.84 1213.25 L1443.43 1213.25 L1444.01 1213.25 L1444.6 1213.25 L1445.19 1213.25 L1445.77 1213.25 L1446.36 1213.25 L1446.95 1213.25 L1447.53 1213.25 L1448.12 1213.25 L1448.7 1213.25 L1449.29 1213.25 L1449.88 1213.25 L1450.46 1213.25 L1451.05 1213.25 L1451.64 1213.25 L1452.22 1213.25 L1452.81 1213.25 L1453.4 1213.25 L1453.98 1213.25 L1454.57 1213.25 L1455.16 1213.25 L1455.74 1213.25 L1456.33 1213.25 L1456.91 1213.25 L1457.5 1213.25 L1458.09 1213.25 L1458.67 1213.25 L1459.26 1213.25 L1459.85 1213.25 L1460.43 1213.25 L1461.02 1213.25 L1461.61 1213.25 L1462.19 1213.25 L1462.78 1213.25 L1463.37 1213.25 L1463.95 1213.25 L1464.54 1213.25 L1465.12 1213.25 L1465.71 1213.25 L1466.3 1213.25 L1466.88 1213.25 L1467.47 1213.25 L1468.06 1213.25 L1468.64 1213.25 L1469.23 1213.25 L1469.82 1213.25 L1470.4 1213.25 L1470.99 1213.25 L1471.57 1213.25 L1472.16 1213.25 L1472.75 1213.25 L1473.33 1213.25 L1473.92 1213.25 L1474.51 1213.25 L1475.09 1213.25 L1475.68 1213.25 L1476.27 1213.25 L1476.85 1213.25 L1477.44 1213.25 L1478.03 1213.25 L1478.61 1213.25 L1479.2 1213.25 L1479.78 1213.25 L1480.37 1213.25 L1480.96 1213.25 L1481.54 1213.25 L1482.13 1213.25 L1482.72 1213.25 L1483.3 1213.25 L1483.89 1213.25 L1484.48 1213.25 L1485.06 1213.25 L1485.65 1213.25 L1486.24 1213.25 L1486.82 1213.25 L1487.41 1213.25 L1487.99 1213.25 L1488.58 1213.25 L1489.17 1213.25 L1489.75 1213.25 L1490.34 1213.25 L1490.93 1213.25 L1491.51 1213.25 L1492.1 1213.25 L1492.69 1213.25 L1493.27 1213.25 L1493.86 1213.25 L1494.45 1213.25 L1495.03 1213.25 L1495.62 1213.25 L1496.2 1213.25 L1496.79 1213.25 L1497.38 1213.25 L1497.96 1213.25 L1498.55 1213.25 L1499.14 1213.25 L1499.72 1213.25 L1500.31 1213.25 L1500.9 1213.25 L1501.48 1213.25 L1502.07 1213.25 L1502.65 1213.25 L1503.24 1213.25 L1503.83 1213.25 L1504.41 1213.25 L1505 1213.25 L1505.59 1213.25 L1506.17 1213.25 L1506.76 1213.25 L1507.35 1213.25 L1507.93 1213.25 L1508.52 1213.25 L1509.11 1213.25 L1509.69 1213.25 L1510.28 1213.25 L1510.86 1213.25 L1511.45 1213.25 L1512.04 1213.25 L1512.62 1213.25 L1513.21 1213.25 L1513.8 1213.25 L1514.38 1213.25 L1514.97 1213.25 L1515.56 1213.25 L1516.14 1213.25 L1516.73 1213.25 L1517.32 1213.25 L1517.9 1213.25 L1518.49 1213.25 L1519.07 1213.25 L1519.66 1213.25 L1520.25 1213.25 L1520.83 1213.25 L1521.42 1213.25 L1522.01 1213.25 L1522.59 1213.25 L1523.18 1213.25 L1523.77 1213.25 L1524.35 1213.25 L1524.94 1213.25 L1525.52 1213.25 L1526.11 1213.25 L1526.7 1213.25 L1527.28 1213.25 L1527.87 1213.25 L1528.46 1213.25 L1529.04 1213.25 L1529.63 1213.25 L1530.22 1213.25 L1530.8 1213.25 L1531.39 1213.25 L1531.98 1213.25 L1532.56 1213.25 L1533.15 1213.25 L1533.73 1213.25 L1534.32 1213.25 L1534.91 1213.25 L1535.49 1213.25 L1536.08 1213.25 L1536.67 1213.25 L1537.25 1213.25 L1537.84 1213.25 L1538.43 1213.25 L1539.01 1213.25 L1539.6 1213.25 L1540.19 1213.25 L1540.77 1213.25 L1541.36 1213.25 L1541.94 1213.25 L1542.53 1213.25 L1543.12 1213.25 L1543.7 1213.25 L1544.29 1213.25 L1544.88 1213.25 L1545.46 1213.25 L1546.05 1213.25 L1546.64 1213.25 L1547.22 1213.25 L1547.81 1213.25 L1548.4 1213.25 L1548.98 1213.25 L1549.57 1213.25 L1550.15 1213.25 L1550.74 1213.25 L1551.33 1213.25 L1551.91 1213.25 L1552.5 1213.25 L1553.09 1213.25 L1553.67 1213.25 L1554.26 1213.25 L1554.85 1213.25 L1555.43 1213.25 L1556.02 1213.25 L1556.6 1213.25 L1557.19 1213.25 L1557.78 1213.25 L1558.36 1213.25 L1558.95 1213.25 L1559.54 1213.25 L1560.12 1213.25 L1560.71 1213.25 L1561.3 1213.25 L1561.88 1213.25 L1562.47 1213.25 L1563.06 1213.25 L1563.64 1213.25 L1564.23 1213.25 L1564.81 1213.25 L1565.4 1213.25 L1565.99 1213.25 L1566.57 1213.25 L1567.16 1213.25 L1567.75 1213.25 L1568.33 1213.25 L1568.92 1213.25 L1569.51 1213.25 L1570.09 1213.25 L1570.68 1213.25 L1571.27 1213.25 L1571.85 1213.25 L1572.44 1213.25 L1573.02 1213.25 L1573.61 1213.25 L1574.2 1213.25 L1574.78 1213.25 L1575.37 1213.25 L1575.96 1213.25 L1576.54 1213.25 L1577.13 1213.25 L1577.72 1213.25 L1578.3 1213.25 L1578.89 1213.25 L1579.47 1213.25 L1580.06 1213.25 L1580.65 1213.25 L1581.23 1213.25 L1581.82 1213.25 L1582.41 1213.25 L1582.99 1213.25 L1583.58 1213.25 L1584.17 1213.25 L1584.75 1213.25 L1585.34 1213.25 L1585.93 1213.25 L1586.51 1213.25 L1587.1 1213.25 L1587.68 1213.25 L1588.27 1213.25 L1588.86 1213.25 L1589.44 1213.25 L1590.03 1213.25 L1590.62 1213.25 L1591.2 1213.25 L1591.79 1213.25 L1592.38 1213.25 L1592.96 1213.25 L1593.55 1213.25 L1594.14 1213.25 L1594.72 1213.25 L1595.31 1213.25 L1595.89 1213.25 L1596.48 1213.25 L1597.07 1213.25 L1597.65 1213.25 L1598.24 1213.25 L1598.83 1213.25 L1599.41 1213.25 L1600 1213.25 L1600.59 1213.25 L1601.17 1213.25 L1601.76 1213.25 L1602.34 1213.25 L1602.93 1213.25 L1603.52 1213.25 L1604.1 1213.25 L1604.69 1213.25 L1605.28 1213.25 L1605.86 1213.25 L1606.45 1213.25 L1607.04 1213.25 L1607.62 1213.25 L1608.21 1213.25 L1608.8 1213.25 L1609.38 1213.25 L1609.97 1213.25 L1610.55 1213.25 L1611.14 1213.25 L1611.73 1213.25 L1612.31 1213.25 L1612.9 1213.25 L1613.49 1213.25 L1614.07 1213.25 L1614.66 1213.25 L1615.25 1213.25 L1615.83 1213.25 L1616.42 1213.25 L1617.01 1213.25 L1617.59 1213.25 L1618.18 1213.25 L1618.76 1213.25 L1619.35 1213.25 L1619.94 1213.25 L1620.52 1213.25 L1621.11 1213.25 L1621.7 1213.25 L1622.28 1213.25 L1622.87 1213.25 L1623.46 1213.25 L1624.04 1213.25 L1624.63 1213.25 L1625.22 1213.25 L1625.8 1213.25 L1626.39 1213.25 L1626.97 1213.25 L1627.56 1213.25 L1628.15 1213.25 L1628.73 1213.25 L1629.32 1213.25 L1629.91 1213.25 L1630.49 1213.25 L1631.08 1213.25 L1631.67 1213.25 L1632.25 1213.25 L1632.84 1213.25 L1633.42 1213.25 L1634.01 1213.25 L1634.6 1213.25 L1635.18 1213.25 L1635.77 1213.25 L1636.36 1213.25 L1636.94 1213.25 L1637.53 1213.25 L1638.12 1213.25 L1638.7 1213.25 L1639.29 1213.25 L1639.88 1213.25 L1640.46 1213.25 L1641.05 1213.25 L1641.63 1213.25 L1642.22 1213.25 L1642.81 1213.25 L1643.39 1213.25 L1643.98 1213.25 L1644.57 1213.25 L1645.15 1213.25 L1645.74 1213.25 L1646.33 1213.25 L1646.91 1213.25 L1647.5 1213.25 L1648.09 1213.25 L1648.67 1213.25 L1649.26 1213.25 L1649.84 1213.25 L1650.43 1213.25 L1651.02 1213.25 L1651.6 1213.25 L1652.19 1213.25 L1652.78 1213.25 L1653.36 1213.25 L1653.95 1213.25 L1654.54 1213.25 L1655.12 1213.25 L1655.71 1213.25 L1656.29 1213.25 L1656.88 1213.25 L1657.47 1213.25 L1658.05 1213.25 L1658.64 1213.25 L1659.23 1213.25 L1659.81 1213.25 L1660.4 1213.25 L1660.99 1213.25 L1661.57 1213.25 L1662.16 1213.25 L1662.75 1213.25 L1663.33 1213.25 L1663.92 1213.25 L1664.5 1213.25 L1665.09 1213.25 L1665.68 1213.25 L1666.26 1213.25 L1666.85 1213.25 L1667.44 1213.25 L1668.02 1213.25 L1668.61 1213.25 L1669.2 1213.25 L1669.78 1213.25 L1670.37 1213.25 L1670.96 1213.25 L1671.54 1213.25 L1672.13 1213.25 L1672.71 1213.25 L1673.3 1213.25 L1673.89 1213.25 L1674.47 1213.25 L1675.06 1213.25 L1675.65 1213.25 L1676.23 1213.25 L1676.82 1213.25 L1677.41 1213.25 L1677.99 1213.25 L1678.58 1213.25 L1679.17 1213.25 L1679.75 1213.25 L1680.34 1213.25 L1680.92 1213.25 L1681.51 1213.25 L1682.1 1213.25 L1682.68 1213.25 L1683.27 1213.25 L1683.86 1213.25 L1684.44 1213.25 L1685.03 1213.25 L1685.62 1213.25 L1686.2 1213.25 L1686.79 1213.25 L1687.37 1213.25 L1687.96 1213.25 L1688.55 1213.25 L1689.13 1213.25 L1689.72 1213.25 L1690.31 1213.25 L1690.89 1213.25 L1691.48 1213.25 L1692.07 1213.25 L1692.65 1213.25 L1693.24 1213.25 L1693.83 1213.25 L1694.41 1213.25 L1695 1213.25 L1695.58 1213.25 L1696.17 1213.25 L1696.76 1213.25 L1697.34 1213.25 L1697.93 1213.25 L1698.52 1213.25 L1699.1 1213.25 L1699.69 1213.25 L1700.28 1213.25 L1700.86 1213.25 L1701.45 1213.25 L1702.04 1213.25 L1702.62 1213.25 L1703.21 1213.25 L1703.79 1213.25 L1704.38 1213.25 L1704.97 1213.25 L1705.55 1213.25 L1706.14 1213.25 L1706.73 1213.25 L1707.31 1213.25 L1707.9 1213.25 L1708.49 1213.25 L1709.07 1213.25 L1709.66 1213.25 L1710.24 1213.25 L1710.83 1213.25 L1711.42 1213.25 L1712 1213.25 L1712.59 1213.25 L1713.18 1213.25 L1713.76 1213.25 L1714.35 1213.25 L1714.94 1213.25 L1715.52 1213.25 L1716.11 1213.25 L1716.7 1213.25 L1717.28 1213.25 L1717.87 1213.25 L1718.45 1213.25 L1719.04 1213.25 L1719.63 1213.25 L1720.21 1213.25 L1720.8 1213.25 L1721.39 1213.25 L1721.97 1213.25 L1722.56 1213.25 L1723.15 1213.25 L1723.73 1213.25 L1724.32 1213.25 L1724.91 1213.25 L1725.49 1213.25 L1726.08 1213.25 L1726.66 1213.25 L1727.25 1213.25 L1727.84 1213.25 L1728.42 1213.25 L1729.01 1213.25 L1729.6 1213.25 L1730.18 1213.25 L1730.77 1213.25 L1731.36 1213.25 L1731.94 1213.25 L1732.53 1213.25 L1733.11 1213.25 L1733.7 1213.25 L1734.29 1213.25 L1734.87 1213.25 L1735.46 1213.25 L1736.05 1213.25 L1736.63 1213.25 L1737.22 1213.25 L1737.81 1213.25 L1738.39 1213.25 L1738.98 1213.25 L1739.57 1213.25 L1740.15 1213.25 L1740.74 1213.25 L1741.32 1213.25 L1741.91 1213.25 L1742.5 1213.25 L1743.08 1213.25 L1743.67 1213.25 L1744.26 1213.25 L1744.84 1213.25 L1745.43 1213.25 L1746.02 1213.25 L1746.6 1213.25 L1747.19 1213.25 L1747.78 1213.25 L1748.36 1213.25 L1748.95 1213.25 L1749.53 1213.25 L1750.12 1213.25 L1750.71 1213.25 L1751.29 1213.25 L1751.88 1213.25 L1752.47 1213.25 L1753.05 1213.25 L1753.64 1213.25 L1754.23 1213.25 L1754.81 1213.25 L1755.4 1213.25 L1755.99 1213.25 L1756.57 1213.25 L1757.16 1213.25 L1757.74 1213.25 L1758.33 1213.25 L1758.92 1213.25 L1759.5 1213.25 L1760.09 1213.25 L1760.68 1213.25 L1761.26 1213.25 L1761.85 1213.25 L1762.44 1213.25 L1763.02 1213.25 L1763.61 1213.25 L1764.19 1213.25 L1764.78 1213.25 L1765.37 1213.25 L1765.95 1213.25 L1766.54 1213.25 L1767.13 1213.25 L1767.71 1213.25 L1768.3 1213.25 L1768.89 1213.25 L1769.47 1213.25 L1770.06 1213.25 L1770.65 1213.25 L1771.23 1213.25 L1771.82 1213.25 L1772.4 1213.25 L1772.99 1213.25 L1773.58 1213.25 L1774.16 1213.25 L1774.75 1213.25 L1775.34 1213.25 L1775.92 1213.25 L1776.51 1213.25 L1777.1 1213.25 L1777.68 1213.25 L1778.27 1213.25 L1778.86 1213.25 L1779.44 1213.25 L1780.03 1213.25 L1780.61 1213.25 L1781.2 1213.25 L1781.79 1213.25 L1782.37 1213.25 L1782.96 1213.25 L1783.55 1213.25 L1784.13 1213.25 L1784.72 1213.25 L1785.31 1213.25 L1785.89 1213.25 L1786.48 1213.25 L1787.06 1213.25 L1787.65 1213.25 L1788.24 1213.25 L1788.82 1213.25 L1789.41 1213.25 L1790 1213.25 L1790.58 1213.25 L1791.17 1213.25 L1791.76 1213.25 L1792.34 1213.25 L1792.93 1213.25 L1793.52 1213.25 L1794.1 1213.25 L1794.69 1213.25 L1795.27 1213.25 L1795.86 1213.25 L1796.45 1213.25 L1797.03 1213.25 L1797.62 1213.25 L1798.21 1213.25 L1798.79 1213.25 L1799.38 1213.25 L1799.97 1213.25 L1800.55 1213.25 L1801.14 1213.25 L1801.73 1213.25 L1802.31 1213.25 L1802.9 1213.25 L1803.48 1213.25 L1804.07 1213.25 L1804.66 1213.25 L1805.24 1213.25 L1805.83 1213.25 L1806.42 1213.25 L1807 1213.25 L1807.59 1213.25 L1808.18 1213.25 L1808.76 1213.25 L1809.35 1213.25 L1809.94 1213.25 L1810.52 1213.25 L1811.11 1213.25 L1811.69 1213.25 L1812.28 1213.25 L1812.87 1213.25 L1813.45 1213.25 L1814.04 1213.25 L1814.63 1213.25 L1815.21 1213.25 L1815.8 1213.25 L1816.39 1213.25 L1816.97 1213.25 L1817.56 1213.25 L1818.14 1213.25 L1818.73 1213.25 L1819.32 1213.25 L1819.9 1213.25 L1820.49 1213.25 L1821.08 1213.25 L1821.66 1213.25 L1822.25 1213.25 L1822.84 1213.25 L1823.42 1213.25 L1824.01 1213.25 L1824.6 1213.25 L1825.18 1213.25 L1825.77 1213.25 L1826.35 1213.25 L1826.94 1213.25 L1827.53 1213.25 L1828.11 1213.25 L1828.7 1213.25 L1829.29 1213.25 L1829.87 1213.25 L1830.46 1213.25 L1831.05 1213.25 L1831.63 1213.25 L1832.22 1213.25 L1832.81 1213.25 L1833.39 1213.25 L1833.98 1213.25 L1834.56 1213.25 L1835.15 1213.25 L1835.74 1213.25 L1836.32 1213.25 L1836.91 1213.25 L1837.5 1213.25 L1838.08 1213.25 L1838.67 1213.25 L1839.26 1213.25 L1839.84 1213.25 L1840.43 1213.25 L1841.01 1213.25 L1841.6 1213.25 L1842.19 1213.25 L1842.77 1213.25 L1843.36 1213.25 L1843.95 1213.25 L1844.53 1213.25 L1845.12 1213.25 L1845.71 1213.25 L1846.29 1213.25 L1846.88 1213.25 L1847.47 1213.25 L1848.05 1213.25 L1848.64 1213.25 L1849.22 1213.25 L1849.81 1213.25 L1850.4 1213.25 L1850.98 1213.25 L1851.57 1213.25 L1852.16 1213.25 L1852.74 1213.25 L1853.33 1213.25 L1853.92 1213.25 L1854.5 1213.25 L1855.09 1213.25 L1855.68 1213.25 L1856.26 1213.25 L1856.85 1213.25 L1857.43 1213.25 L1858.02 1213.25 L1858.61 1213.25 L1859.19 1213.25 L1859.78 1213.25 L1860.37 1213.25 L1860.95 1213.25 L1861.54 1213.25 L1862.13 1213.25 L1862.71 1213.25 L1863.3 1213.25 L1863.88 1213.25 L1864.47 1213.25 L1865.06 1213.25 L1865.64 1213.25 L1866.23 1213.25 L1866.82 1213.25 L1867.4 1213.25 L1867.99 1213.25 L1868.58 1213.25 L1869.16 1213.25 L1869.75 1213.25 L1870.34 1213.25 L1870.92 1213.25 L1871.51 1213.25 L1872.09 1213.25 L1872.68 1213.25 L1873.27 1213.25 L1873.85 1213.25 L1874.44 1213.25 L1875.03 1213.25 L1875.61 1213.25 L1876.2 1213.25 L1876.79 1213.25 L1877.37 1213.25 L1877.96 1213.25 L1878.55 1213.25 L1879.13 1213.25 L1879.72 1213.25 L1880.3 1213.25 L1880.89 1213.25 L1881.48 1213.25 L1882.06 1213.25 L1882.65 1213.25 L1883.24 1213.25 L1883.82 1213.25 L1884.41 1213.25 L1885 1213.25 L1885.58 1213.25 L1886.17 1213.25 L1886.76 1213.25 L1887.34 1213.25 L1887.93 1213.25 L1888.51 1213.25 L1889.1 1213.25 L1889.69 1213.25 L1890.27 1213.25 L1890.86 1213.25 L1891.45 1213.25 L1892.03 1213.25 L1892.62 1213.25 L1893.21 1213.25 L1893.79 1213.25 L1894.38 1213.25 L1894.96 1213.25 L1895.55 1213.25 L1896.14 1213.25 L1896.72 1213.25 L1897.31 1213.25 L1897.9 1213.25 L1898.48 1213.25 L1899.07 1213.25 L1899.66 1213.25 L1900.24 1213.25 L1900.83 1213.25 L1901.42 1213.25 L1902 1213.25 L1902.59 1213.25 L1903.17 1213.25 L1903.76 1213.25 L1904.35 1213.25 L1904.93 1213.25 L1905.52 1213.25 L1906.11 1213.25 L1906.69 1213.25 L1907.28 1213.25 L1907.87 1213.25 L1908.45 1213.25 L1909.04 1213.25 L1909.63 1213.25 L1910.21 1213.25 L1910.8 1213.25 L1911.38 1213.25 L1911.97 1213.25 L1912.56 1213.25 L1913.14 1213.25 L1913.73 1213.25 L1914.32 1213.25 L1914.9 1213.25 L1915.49 1213.25 L1916.08 1213.25 L1916.66 1213.25 L1917.25 1213.25 L1917.83 1213.25 L1918.42 1213.25 L1919.01 1213.25 L1919.59 1213.25 L1920.18 1213.25 L1920.77 1213.25 L1921.35 1213.25 L1921.94 1213.25 L1922.53 1213.25 L1923.11 1213.25 L1923.7 1213.25 L1924.29 1213.25 L1924.87 1213.25 L1925.46 1213.25 L1926.04 1213.25 L1926.63 1213.25 L1927.22 1213.25 L1927.8 1213.25 L1928.39 1213.25 L1928.98 1213.25 L1929.56 1213.25 L1930.15 1213.25 L1930.74 1213.25 L1931.32 1213.25 L1931.91 1213.25 L1932.5 1213.25 L1933.08 1213.25 L1933.67 1213.25 L1934.25 1213.25 L1934.84 1213.25 L1935.43 1213.25 L1936.01 1213.25 L1936.6 1213.25 L1937.19 1213.25 L1937.77 1213.25 L1938.36 1213.25 L1938.95 1213.25 L1939.53 1213.25 L1940.12 1213.25 L1940.71 1213.25 L1941.29 1213.25 L1941.88 1213.25 L1942.46 1213.25 L1943.05 1213.25 L1943.64 1213.25 L1944.22 1213.25 L1944.81 1213.25 L1945.4 1213.25 L1945.98 1213.25 L1946.57 1213.25 L1947.16 1213.25 L1947.74 1213.25 L1948.33 1213.25 L1948.91 1213.25 L1949.5 1213.25 L1950.09 1213.25 L1950.67 1213.25 L1951.26 1213.25 L1951.85 1213.25 L1952.43 1213.25 L1953.02 1213.25 L1953.61 1213.25 L1954.19 1213.25 L1954.78 1213.25 L1955.37 1213.25 L1955.95 1213.25 L1956.54 1213.25 L1957.12 1213.25 L1957.71 1213.25 L1958.3 1213.25 L1958.88 1213.25 L1959.47 1213.25 L1960.06 1213.25 L1960.64 1213.25 L1961.23 1213.25 L1961.82 1213.25 L1962.4 1213.25 L1962.99 1213.25 L1963.58 1213.25 L1964.16 1213.25 L1964.75 1213.25 L1965.33 1213.25 L1965.92 1213.25 L1966.51 1213.25 L1967.09 1213.25 L1967.68 1213.25 L1968.27 1213.25 L1968.85 1213.25 L1969.44 1213.25 L1970.03 1213.25 L1970.61 1213.25 L1971.2 1213.25 L1971.78 1213.25 L1972.37 1213.25 L1972.96 1213.25 L1973.54 1213.25 L1974.13 1213.25 L1974.72 1213.25 L1975.3 1213.25 L1975.89 1213.25 L1976.48 1213.25 L1977.06 1213.25 L1977.65 1213.25 L1978.24 1213.25 L1978.82 1213.25 L1979.41 1213.25 L1979.99 1213.25 L1980.58 1213.25 L1981.17 1213.25 L1981.75 1213.25 L1982.34 1213.25 L1982.93 1213.25 L1983.51 1213.25 L1984.1 1213.25 L1984.69 1213.25 L1985.27 1213.25 L1985.86 1213.25 L1986.45 1213.25 L1987.03 1213.25 L1987.62 1213.25 L1988.2 1213.25 L1988.79 1213.25 L1989.38 1213.25 L1989.96 1213.25 L1990.55 1213.25 L1991.14 1213.25 L1991.72 1213.25 L1992.31 1213.25 L1992.9 1213.25 L1993.48 1213.25 L1994.07 1213.25 L1994.65 1213.25 L1995.24 1213.25 L1995.83 1213.25 L1996.41 1213.25 L1997 1213.25 L1997.59 1213.25 L1998.17 1213.25 L1998.76 1213.25 L1999.35 1213.25 L1999.93 1213.25 L2000.52 1213.25 L2001.11 1213.25 L2001.69 1213.25 L2002.28 1213.25 L2002.86 1213.25 L2003.45 1213.25 L2004.04 1213.25 L2004.62 1213.25 L2005.21 1213.25 L2005.8 1213.25 L2006.38 1213.25 L2006.97 1213.25 L2007.56 1213.25 L2008.14 1213.25 L2008.73 1213.25 L2009.32 1213.25 L2009.9 1213.25 L2010.49 1213.25 L2011.07 1213.25 L2011.66 1213.25 L2012.25 1213.25 L2012.83 1213.25 L2013.42 1213.25 L2014.01 1213.25 L2014.59 1213.25 L2015.18 1213.25 L2015.77 1213.25 L2016.35 1213.25 L2016.94 1213.25 L2017.53 1213.25 L2018.11 1213.25 L2018.7 1213.25 L2019.28 1213.25 L2019.87 1213.25 L2020.46 1213.25 L2021.04 1213.25 L2021.63 1213.25 L2022.22 1213.25 L2022.8 1213.25 L2023.39 1213.25 L2023.98 1213.25 L2024.56 1213.25 L2025.15 1213.25 L2025.73 1213.25 L2026.32 1213.25 L2026.91 1213.25 L2027.49 1213.25 L2028.08 1213.25 L2028.67 1213.25 L2029.25 1213.25 L2029.84 1213.25 L2030.43 1213.25 L2031.01 1213.25 L2031.6 1213.25 L2032.19 1213.25 L2032.77 1213.25 L2033.36 1213.25 L2033.94 1213.25 L2034.53 1213.25 L2035.12 1213.25 L2035.7 1213.25 L2036.29 1213.25 L2036.88 1213.25 L2037.46 1213.25 L2038.05 1213.25 L2038.64 1213.25 L2039.22 1213.25 L2039.81 1213.25 L2040.4 1213.25 L2040.98 1213.25 L2041.57 1213.25 L2042.15 1213.25 L2042.74 1213.25 L2043.33 1213.25 L2043.91 1213.25 L2044.5 1213.25 L2045.09 1213.25 L2045.67 1213.25 L2046.26 1213.25 L2046.85 1213.25 L2047.43 1213.25 L2048.02 1213.25 L2048.6 1213.25 L2049.19 1213.25 L2049.78 1213.25 L2050.36 1213.25 L2050.95 1213.25 L2051.54 1213.25 L2052.12 1213.25 L2052.71 1213.25 L2053.3 1213.25 L2053.88 1213.25 L2054.47 1213.25 L2055.06 1213.25 L2055.64 1213.25 L2056.23 1213.25 L2056.81 1213.25 L2057.4 1213.25 L2057.99 1213.25 L2058.57 1213.25 L2059.16 1213.25 L2059.75 1213.25 L2060.33 1213.25 L2060.92 1213.25 L2061.51 1213.25 L2062.09 1213.25 L2062.68 1213.25 L2063.27 1213.25 L2063.85 1213.25 L2064.44 1213.25 L2065.02 1213.25 L2065.61 1213.25 L2066.2 1213.25 L2066.78 1213.25 L2067.37 1213.25 L2067.96 1213.25 L2068.54 1213.25 L2069.13 1213.25 L2069.72 1213.25 L2070.3 1213.25 L2070.89 1213.25 L2071.48 1213.25 L2072.06 1213.25 L2072.65 1213.25 L2073.23 1213.25 L2073.82 1213.25 L2074.41 1213.25 L2074.99 1213.25 L2075.58 1213.25 L2076.17 1213.25 L2076.75 1213.25 L2077.34 1213.25 L2077.93 1213.25 L2078.51 1213.25 L2079.1 1213.25 L2079.68 1213.25 L2080.27 1213.25 L2080.86 1213.25 L2081.44 1213.25 L2082.03 1213.25 L2082.62 1213.25 L2083.2 1213.25 L2083.79 1213.25 L2084.38 1213.25 L2084.96 1213.25 L2085.55 1213.25 L2086.14 1213.25 L2086.72 1213.25 L2087.31 1213.25 L2087.89 1213.25 L2088.48 1213.25 L2089.07 1213.25 L2089.65 1213.25 L2090.24 1213.25 L2090.83 1213.25 L2091.41 1213.25 L2092 1213.25 L2092.59 1213.25 L2093.17 1213.25 L2093.76 1213.25 L2094.35 1213.25 L2094.93 1213.25 L2095.52 1213.25 L2096.1 1213.25 L2096.69 1213.25 L2097.28 1213.25 L2097.86 1213.25 L2098.45 1213.25 L2099.04 1213.25 L2099.62 1213.25 L2100.21 1213.25 L2100.8 1213.25 L2101.38 1213.25 L2101.97 1213.25 L2102.55 1213.25 L2103.14 1213.25 L2103.73 1213.25 L2104.31 1213.25 L2104.9 1213.25 L2105.49 1213.25 L2106.07 1213.25 L2106.66 1213.25 L2107.25 1213.25 L2107.83 1213.25 L2108.42 1213.25 L2109.01 1213.25 L2109.59 1213.25 L2110.18 1213.25 L2110.76 1213.25 L2111.35 1213.25 L2111.94 1213.25 L2112.52 1213.25 L2113.11 1213.25 L2113.7 1213.25 L2114.28 1213.25 L2114.87 1213.25 L2115.46 1213.25 L2116.04 1213.25 L2116.63 1213.25 L2117.22 1213.25 L2117.8 1213.25 L2118.39 1213.25 L2118.97 1213.25 L2119.56 1213.25 L2120.15 1213.25 L2120.73 1213.25 L2121.32 1213.25 L2121.91 1213.25 L2122.49 1213.25 L2123.08 1213.25 L2123.67 1213.25 L2124.25 1213.25 L2124.84 1213.25 L2125.42 1213.25 L2126.01 1213.25 L2126.6 1213.25 L2127.18 1213.25 L2127.77 1213.25 L2128.36 1213.25 L2128.94 1213.25 L2129.53 1213.25 L2130.12 1213.25 L2130.7 1213.25 L2131.29 1213.25 L2131.88 1213.25 L2132.46 1213.25 L2133.05 1213.25 L2133.63 1213.25 L2134.22 1213.25 L2134.81 1213.25 L2135.39 1213.25 L2135.98 1213.25 L2136.57 1213.25 L2137.15 1213.25 L2137.74 1213.25 L2138.33 1213.25 L2138.91 1213.25 L2139.5 1213.25 L2140.09 1213.25 L2140.67 1213.25 L2141.26 1213.25 L2141.84 1213.25 L2142.43 1213.25 L2143.02 1213.25 L2143.6 1213.25 L2144.19 1213.25 L2144.78 1213.25 L2145.36 1213.25 L2145.95 1213.25 L2146.54 1213.25 L2147.12 1213.25 L2147.71 1213.25 L2148.3 1213.25 L2148.88 1213.25 L2149.47 1213.25 L2150.05 1213.25 L2150.64 1213.25 L2151.23 1213.25 L2151.81 1213.25 L2152.4 1213.25 L2152.99 1213.25 L2153.57 1213.25 L2154.16 1213.25 L2154.75 1213.25 L2155.33 1213.25 L2155.92 1213.25 L2156.5 1213.25 L2157.09 1213.25 L2157.68 1213.25 L2158.26 1213.25 L2158.26 1212.35 L2157.68 1212.35 L2157.09 1212.35 L2156.5 1212.35 L2155.92 1212.35 L2155.33 1212.35 L2154.75 1212.35 L2154.16 1212.35 L2153.57 1212.35 L2152.99 1212.35 L2152.4 1212.35 L2151.81 1212.35 L2151.23 1212.35 L2150.64 1212.35 L2150.05 1212.35 L2149.47 1212.35 L2148.88 1212.35 L2148.3 1212.35 L2147.71 1212.35 L2147.12 1212.35 L2146.54 1212.35 L2145.95 1212.35 L2145.36 1212.35 L2144.78 1212.35 L2144.19 1212.35 L2143.6 1212.35 L2143.02 1212.35 L2142.43 1212.35 L2141.84 1212.35 L2141.26 1212.35 L2140.67 1212.35 L2140.09 1212.35 L2139.5 1212.35 L2138.91 1212.35 L2138.33 1212.35 L2137.74 1212.35 L2137.15 1212.35 L2136.57 1212.35 L2135.98 1212.35 L2135.39 1212.35 L2134.81 1212.35 L2134.22 1212.35 L2133.63 1212.35 L2133.05 1212.35 L2132.46 1212.35 L2131.88 1212.35 L2131.29 1212.35 L2130.7 1212.35 L2130.12 1212.35 L2129.53 1212.35 L2128.94 1212.35 L2128.36 1212.35 L2127.77 1212.35 L2127.18 1212.35 L2126.6 1212.35 L2126.01 1212.35 L2125.42 1212.35 L2124.84 1212.35 L2124.25 1212.35 L2123.67 1212.35 L2123.08 1212.35 L2122.49 1212.35 L2121.91 1212.35 L2121.32 1212.35 L2120.73 1212.35 L2120.15 1212.35 L2119.56 1212.35 L2118.97 1212.35 L2118.39 1212.35 L2117.8 1212.35 L2117.22 1212.35 L2116.63 1212.35 L2116.04 1212.35 L2115.46 1212.35 L2114.87 1212.35 L2114.28 1212.35 L2113.7 1212.35 L2113.11 1212.35 L2112.52 1212.35 L2111.94 1212.35 L2111.35 1212.35 L2110.76 1212.35 L2110.18 1212.35 L2109.59 1212.35 L2109.01 1212.35 L2108.42 1212.35 L2107.83 1212.35 L2107.25 1212.35 L2106.66 1212.35 L2106.07 1212.35 L2105.49 1212.35 L2104.9 1212.35 L2104.31 1212.35 L2103.73 1212.35 L2103.14 1212.35 L2102.55 1212.35 L2101.97 1212.35 L2101.38 1212.35 L2100.8 1212.35 L2100.21 1212.35 L2099.62 1212.35 L2099.04 1212.35 L2098.45 1212.35 L2097.86 1212.35 L2097.28 1212.35 L2096.69 1212.35 L2096.1 1212.35 L2095.52 1212.35 L2094.93 1212.35 L2094.35 1212.35 L2093.76 1212.35 L2093.17 1212.35 L2092.59 1212.35 L2092 1212.35 L2091.41 1212.35 L2090.83 1212.35 L2090.24 1212.35 L2089.65 1212.35 L2089.07 1212.35 L2088.48 1212.35 L2087.89 1212.35 L2087.31 1212.35 L2086.72 1212.35 L2086.14 1212.35 L2085.55 1212.35 L2084.96 1212.35 L2084.38 1212.35 L2083.79 1212.35 L2083.2 1212.35 L2082.62 1212.35 L2082.03 1212.35 L2081.44 1212.35 L2080.86 1212.35 L2080.27 1212.35 L2079.68 1212.35 L2079.1 1212.35 L2078.51 1212.35 L2077.93 1212.35 L2077.34 1212.35 L2076.75 1212.35 L2076.17 1212.35 L2075.58 1212.35 L2074.99 1212.35 L2074.41 1212.35 L2073.82 1212.35 L2073.23 1212.35 L2072.65 1212.35 L2072.06 1212.35 L2071.48 1212.35 L2070.89 1212.35 L2070.3 1212.35 L2069.72 1212.35 L2069.13 1212.35 L2068.54 1212.35 L2067.96 1212.35 L2067.37 1212.35 L2066.78 1212.35 L2066.2 1212.35 L2065.61 1212.35 L2065.02 1212.35 L2064.44 1212.35 L2063.85 1212.35 L2063.27 1212.35 L2062.68 1212.35 L2062.09 1212.35 L2061.51 1212.35 L2060.92 1212.35 L2060.33 1212.35 L2059.75 1212.35 L2059.16 1212.35 L2058.57 1212.35 L2057.99 1212.35 L2057.4 1212.35 L2056.81 1212.35 L2056.23 1212.35 L2055.64 1212.35 L2055.06 1212.35 L2054.47 1212.35 L2053.88 1212.35 L2053.3 1212.35 L2052.71 1212.35 L2052.12 1212.35 L2051.54 1212.35 L2050.95 1212.35 L2050.36 1212.35 L2049.78 1212.35 L2049.19 1212.35 L2048.6 1212.35 L2048.02 1212.35 L2047.43 1212.35 L2046.85 1212.35 L2046.26 1212.35 L2045.67 1212.35 L2045.09 1212.35 L2044.5 1212.35 L2043.91 1212.35 L2043.33 1212.35 L2042.74 1212.35 L2042.15 1212.35 L2041.57 1212.35 L2040.98 1212.35 L2040.4 1212.35 L2039.81 1212.35 L2039.22 1212.35 L2038.64 1212.35 L2038.05 1212.35 L2037.46 1212.35 L2036.88 1212.35 L2036.29 1212.35 L2035.7 1212.35 L2035.12 1212.35 L2034.53 1212.35 L2033.94 1212.35 L2033.36 1212.35 L2032.77 1212.35 L2032.19 1212.35 L2031.6 1212.35 L2031.01 1212.35 L2030.43 1212.35 L2029.84 1212.35 L2029.25 1212.35 L2028.67 1212.35 L2028.08 1212.35 L2027.49 1212.35 L2026.91 1212.35 L2026.32 1212.35 L2025.73 1212.35 L2025.15 1212.35 L2024.56 1212.35 L2023.98 1212.35 L2023.39 1212.35 L2022.8 1212.35 L2022.22 1212.35 L2021.63 1212.35 L2021.04 1212.35 L2020.46 1212.35 L2019.87 1212.35 L2019.28 1212.35 L2018.7 1212.35 L2018.11 1212.35 L2017.53 1212.35 L2016.94 1212.35 L2016.35 1212.35 L2015.77 1212.35 L2015.18 1212.35 L2014.59 1212.35 L2014.01 1212.35 L2013.42 1212.35 L2012.83 1212.35 L2012.25 1212.35 L2011.66 1212.35 L2011.07 1212.35 L2010.49 1212.35 L2009.9 1212.35 L2009.32 1212.35 L2008.73 1212.35 L2008.14 1212.35 L2007.56 1212.35 L2006.97 1212.35 L2006.38 1212.35 L2005.8 1212.35 L2005.21 1212.35 L2004.62 1212.35 L2004.04 1212.35 L2003.45 1212.35 L2002.86 1212.35 L2002.28 1212.35 L2001.69 1212.35 L2001.11 1212.35 L2000.52 1212.35 L1999.93 1212.35 L1999.35 1212.35 L1998.76 1212.35 L1998.17 1212.35 L1997.59 1212.35 L1997 1212.35 L1996.41 1212.35 L1995.83 1212.35 L1995.24 1212.35 L1994.65 1212.35 L1994.07 1212.35 L1993.48 1212.35 L1992.9 1212.35 L1992.31 1212.35 L1991.72 1212.35 L1991.14 1212.35 L1990.55 1212.35 L1989.96 1212.35 L1989.38 1212.35 L1988.79 1212.35 L1988.2 1212.35 L1987.62 1212.35 L1987.03 1212.35 L1986.45 1212.35 L1985.86 1212.35 L1985.27 1212.35 L1984.69 1212.35 L1984.1 1212.35 L1983.51 1212.35 L1982.93 1212.35 L1982.34 1212.35 L1981.75 1212.35 L1981.17 1212.35 L1980.58 1212.35 L1979.99 1212.35 L1979.41 1212.35 L1978.82 1212.35 L1978.24 1212.35 L1977.65 1212.35 L1977.06 1212.35 L1976.48 1212.35 L1975.89 1212.35 L1975.3 1212.35 L1974.72 1212.35 L1974.13 1212.35 L1973.54 1212.35 L1972.96 1212.35 L1972.37 1212.35 L1971.78 1212.35 L1971.2 1212.35 L1970.61 1212.35 L1970.03 1212.35 L1969.44 1212.35 L1968.85 1212.35 L1968.27 1212.35 L1967.68 1212.35 L1967.09 1212.35 L1966.51 1212.35 L1965.92 1212.35 L1965.33 1212.35 L1964.75 1212.35 L1964.16 1212.35 L1963.58 1212.35 L1962.99 1212.35 L1962.4 1212.35 L1961.82 1212.35 L1961.23 1212.35 L1960.64 1212.35 L1960.06 1212.35 L1959.47 1212.35 L1958.88 1212.35 L1958.3 1212.35 L1957.71 1212.35 L1957.12 1212.35 L1956.54 1212.35 L1955.95 1212.35 L1955.37 1212.35 L1954.78 1212.35 L1954.19 1212.35 L1953.61 1212.35 L1953.02 1212.35 L1952.43 1212.35 L1951.85 1212.35 L1951.26 1212.35 L1950.67 1212.35 L1950.09 1212.35 L1949.5 1212.35 L1948.91 1212.35 L1948.33 1212.35 L1947.74 1212.35 L1947.16 1212.35 L1946.57 1212.35 L1945.98 1212.35 L1945.4 1212.35 L1944.81 1212.35 L1944.22 1212.35 L1943.64 1212.35 L1943.05 1212.35 L1942.46 1212.35 L1941.88 1212.35 L1941.29 1212.35 L1940.71 1212.35 L1940.12 1212.35 L1939.53 1212.35 L1938.95 1212.35 L1938.36 1212.35 L1937.77 1212.35 L1937.19 1212.35 L1936.6 1212.35 L1936.01 1212.35 L1935.43 1212.35 L1934.84 1212.35 L1934.25 1212.35 L1933.67 1212.35 L1933.08 1212.35 L1932.5 1212.35 L1931.91 1212.35 L1931.32 1212.35 L1930.74 1212.35 L1930.15 1212.35 L1929.56 1212.35 L1928.98 1212.35 L1928.39 1212.35 L1927.8 1212.35 L1927.22 1212.35 L1926.63 1212.35 L1926.04 1212.35 L1925.46 1212.35 L1924.87 1212.35 L1924.29 1212.35 L1923.7 1212.35 L1923.11 1212.35 L1922.53 1212.35 L1921.94 1212.35 L1921.35 1212.35 L1920.77 1212.35 L1920.18 1212.35 L1919.59 1212.35 L1919.01 1212.35 L1918.42 1212.35 L1917.83 1212.35 L1917.25 1212.35 L1916.66 1212.35 L1916.08 1212.35 L1915.49 1212.35 L1914.9 1212.35 L1914.32 1212.35 L1913.73 1212.35 L1913.14 1212.35 L1912.56 1212.35 L1911.97 1212.35 L1911.38 1212.35 L1910.8 1212.35 L1910.21 1212.35 L1909.63 1212.35 L1909.04 1212.35 L1908.45 1212.35 L1907.87 1212.35 L1907.28 1212.35 L1906.69 1212.35 L1906.11 1212.35 L1905.52 1212.35 L1904.93 1212.35 L1904.35 1212.35 L1903.76 1212.35 L1903.17 1212.35 L1902.59 1212.35 L1902 1212.35 L1901.42 1212.35 L1900.83 1212.35 L1900.24 1212.35 L1899.66 1212.35 L1899.07 1212.35 L1898.48 1212.35 L1897.9 1212.35 L1897.31 1212.35 L1896.72 1212.35 L1896.14 1212.35 L1895.55 1212.35 L1894.96 1212.35 L1894.38 1212.35 L1893.79 1212.35 L1893.21 1212.35 L1892.62 1212.35 L1892.03 1212.35 L1891.45 1212.35 L1890.86 1212.35 L1890.27 1212.35 L1889.69 1212.35 L1889.1 1212.35 L1888.51 1212.35 L1887.93 1212.35 L1887.34 1212.35 L1886.76 1212.35 L1886.17 1212.35 L1885.58 1212.35 L1885 1212.35 L1884.41 1212.35 L1883.82 1212.35 L1883.24 1212.35 L1882.65 1212.35 L1882.06 1212.35 L1881.48 1212.35 L1880.89 1212.35 L1880.3 1212.35 L1879.72 1212.35 L1879.13 1212.35 L1878.55 1212.35 L1877.96 1212.35 L1877.37 1212.35 L1876.79 1212.35 L1876.2 1212.35 L1875.61 1212.35 L1875.03 1212.35 L1874.44 1212.35 L1873.85 1212.35 L1873.27 1212.35 L1872.68 1212.35 L1872.09 1212.35 L1871.51 1212.35 L1870.92 1212.35 L1870.34 1212.35 L1869.75 1212.35 L1869.16 1212.35 L1868.58 1212.35 L1867.99 1212.35 L1867.4 1212.35 L1866.82 1212.35 L1866.23 1212.35 L1865.64 1212.35 L1865.06 1212.35 L1864.47 1212.35 L1863.88 1212.35 L1863.3 1212.35 L1862.71 1212.35 L1862.13 1212.35 L1861.54 1212.35 L1860.95 1212.35 L1860.37 1212.35 L1859.78 1212.35 L1859.19 1212.35 L1858.61 1212.35 L1858.02 1212.35 L1857.43 1212.35 L1856.85 1212.35 L1856.26 1212.35 L1855.68 1212.35 L1855.09 1212.35 L1854.5 1212.35 L1853.92 1212.35 L1853.33 1212.35 L1852.74 1212.35 L1852.16 1212.35 L1851.57 1212.35 L1850.98 1212.35 L1850.4 1212.35 L1849.81 1212.35 L1849.22 1212.35 L1848.64 1212.35 L1848.05 1212.35 L1847.47 1212.35 L1846.88 1212.35 L1846.29 1212.35 L1845.71 1212.35 L1845.12 1212.35 L1844.53 1212.35 L1843.95 1212.35 L1843.36 1212.35 L1842.77 1212.35 L1842.19 1212.35 L1841.6 1212.35 L1841.01 1212.35 L1840.43 1212.35 L1839.84 1212.35 L1839.26 1212.35 L1838.67 1212.35 L1838.08 1212.35 L1837.5 1212.35 L1836.91 1212.35 L1836.32 1212.35 L1835.74 1212.35 L1835.15 1212.35 L1834.56 1212.35 L1833.98 1212.35 L1833.39 1212.35 L1832.81 1212.35 L1832.22 1212.35 L1831.63 1212.35 L1831.05 1212.35 L1830.46 1212.35 L1829.87 1212.35 L1829.29 1212.35 L1828.7 1212.35 L1828.11 1212.35 L1827.53 1212.35 L1826.94 1212.35 L1826.35 1212.35 L1825.77 1212.35 L1825.18 1212.35 L1824.6 1212.35 L1824.01 1212.35 L1823.42 1212.35 L1822.84 1212.35 L1822.25 1212.35 L1821.66 1212.35 L1821.08 1212.35 L1820.49 1212.35 L1819.9 1212.35 L1819.32 1212.35 L1818.73 1212.35 L1818.14 1212.35 L1817.56 1212.35 L1816.97 1212.35 L1816.39 1212.35 L1815.8 1212.35 L1815.21 1212.35 L1814.63 1212.35 L1814.04 1212.35 L1813.45 1212.35 L1812.87 1212.35 L1812.28 1212.35 L1811.69 1212.35 L1811.11 1212.35 L1810.52 1212.35 L1809.94 1212.35 L1809.35 1212.35 L1808.76 1212.35 L1808.18 1212.35 L1807.59 1212.35 L1807 1212.35 L1806.42 1212.35 L1805.83 1212.35 L1805.24 1212.35 L1804.66 1212.35 L1804.07 1212.35 L1803.48 1212.35 L1802.9 1212.35 L1802.31 1212.35 L1801.73 1212.35 L1801.14 1212.35 L1800.55 1212.35 L1799.97 1212.35 L1799.38 1212.35 L1798.79 1212.35 L1798.21 1212.35 L1797.62 1212.35 L1797.03 1212.35 L1796.45 1212.35 L1795.86 1212.35 L1795.27 1212.35 L1794.69 1212.35 L1794.1 1212.35 L1793.52 1212.35 L1792.93 1212.35 L1792.34 1212.35 L1791.76 1212.35 L1791.17 1212.35 L1790.58 1212.35 L1790 1212.35 L1789.41 1212.35 L1788.82 1212.35 L1788.24 1212.35 L1787.65 1212.35 L1787.06 1212.35 L1786.48 1212.35 L1785.89 1212.35 L1785.31 1212.35 L1784.72 1212.35 L1784.13 1212.35 L1783.55 1212.35 L1782.96 1212.35 L1782.37 1212.35 L1781.79 1212.35 L1781.2 1212.35 L1780.61 1212.35 L1780.03 1212.35 L1779.44 1212.35 L1778.86 1212.35 L1778.27 1212.35 L1777.68 1212.35 L1777.1 1212.35 L1776.51 1212.35 L1775.92 1212.35 L1775.34 1212.35 L1774.75 1212.35 L1774.16 1212.35 L1773.58 1212.35 L1772.99 1212.35 L1772.4 1212.35 L1771.82 1212.35 L1771.23 1212.35 L1770.65 1212.35 L1770.06 1212.35 L1769.47 1212.35 L1768.89 1212.35 L1768.3 1212.35 L1767.71 1212.35 L1767.13 1212.35 L1766.54 1212.35 L1765.95 1212.35 L1765.37 1212.35 L1764.78 1212.35 L1764.19 1212.35 L1763.61 1212.35 L1763.02 1212.35 L1762.44 1212.35 L1761.85 1212.35 L1761.26 1212.35 L1760.68 1212.35 L1760.09 1212.35 L1759.5 1212.35 L1758.92 1212.35 L1758.33 1212.35 L1757.74 1212.35 L1757.16 1212.35 L1756.57 1212.35 L1755.99 1212.35 L1755.4 1212.35 L1754.81 1212.35 L1754.23 1212.35 L1753.64 1212.35 L1753.05 1212.35 L1752.47 1212.35 L1751.88 1212.35 L1751.29 1212.35 L1750.71 1212.35 L1750.12 1212.35 L1749.53 1212.35 L1748.95 1212.35 L1748.36 1212.35 L1747.78 1212.35 L1747.19 1212.35 L1746.6 1212.35 L1746.02 1212.35 L1745.43 1212.35 L1744.84 1212.35 L1744.26 1212.35 L1743.67 1212.35 L1743.08 1212.35 L1742.5 1212.35 L1741.91 1212.35 L1741.32 1212.35 L1740.74 1212.35 L1740.15 1212.35 L1739.57 1212.35 L1738.98 1212.35 L1738.39 1212.35 L1737.81 1212.35 L1737.22 1212.35 L1736.63 1212.35 L1736.05 1212.35 L1735.46 1212.35 L1734.87 1212.35 L1734.29 1212.35 L1733.7 1212.35 L1733.11 1212.35 L1732.53 1212.35 L1731.94 1212.35 L1731.36 1212.35 L1730.77 1212.35 L1730.18 1212.35 L1729.6 1212.35 L1729.01 1212.35 L1728.42 1212.35 L1727.84 1212.35 L1727.25 1212.35 L1726.66 1212.35 L1726.08 1212.35 L1725.49 1212.35 L1724.91 1212.35 L1724.32 1212.35 L1723.73 1212.35 L1723.15 1212.35 L1722.56 1212.35 L1721.97 1212.35 L1721.39 1212.35 L1720.8 1212.35 L1720.21 1212.35 L1719.63 1212.35 L1719.04 1212.35 L1718.45 1212.35 L1717.87 1212.35 L1717.28 1212.35 L1716.7 1212.35 L1716.11 1212.35 L1715.52 1212.35 L1714.94 1212.35 L1714.35 1212.35 L1713.76 1212.35 L1713.18 1212.35 L1712.59 1212.35 L1712 1212.35 L1711.42 1212.35 L1710.83 1212.35 L1710.24 1212.35 L1709.66 1212.35 L1709.07 1212.35 L1708.49 1212.35 L1707.9 1212.35 L1707.31 1212.35 L1706.73 1212.35 L1706.14 1212.35 L1705.55 1212.35 L1704.97 1212.35 L1704.38 1212.35 L1703.79 1212.35 L1703.21 1212.35 L1702.62 1212.35 L1702.04 1212.35 L1701.45 1212.35 L1700.86 1212.35 L1700.28 1212.35 L1699.69 1212.35 L1699.1 1212.35 L1698.52 1212.35 L1697.93 1212.35 L1697.34 1212.35 L1696.76 1212.35 L1696.17 1212.35 L1695.58 1212.35 L1695 1212.35 L1694.41 1212.35 L1693.83 1212.35 L1693.24 1212.35 L1692.65 1212.35 L1692.07 1212.35 L1691.48 1212.35 L1690.89 1212.35 L1690.31 1212.35 L1689.72 1212.35 L1689.13 1212.35 L1688.55 1212.35 L1687.96 1212.35 L1687.37 1212.35 L1686.79 1212.35 L1686.2 1212.35 L1685.62 1212.35 L1685.03 1212.35 L1684.44 1212.35 L1683.86 1212.35 L1683.27 1212.35 L1682.68 1212.35 L1682.1 1212.35 L1681.51 1212.35 L1680.92 1212.35 L1680.34 1212.35 L1679.75 1212.35 L1679.17 1212.35 L1678.58 1212.35 L1677.99 1212.35 L1677.41 1212.35 L1676.82 1212.35 L1676.23 1212.35 L1675.65 1212.35 L1675.06 1212.35 L1674.47 1212.35 L1673.89 1212.35 L1673.3 1212.35 L1672.71 1212.35 L1672.13 1212.35 L1671.54 1212.35 L1670.96 1212.35 L1670.37 1212.35 L1669.78 1212.35 L1669.2 1212.35 L1668.61 1212.35 L1668.02 1212.35 L1667.44 1212.35 L1666.85 1212.35 L1666.26 1212.35 L1665.68 1212.35 L1665.09 1212.35 L1664.5 1212.35 L1663.92 1212.35 L1663.33 1212.35 L1662.75 1212.35 L1662.16 1212.35 L1661.57 1212.35 L1660.99 1212.35 L1660.4 1212.35 L1659.81 1212.35 L1659.23 1212.35 L1658.64 1212.35 L1658.05 1212.35 L1657.47 1212.35 L1656.88 1212.35 L1656.29 1212.35 L1655.71 1212.35 L1655.12 1212.35 L1654.54 1212.35 L1653.95 1212.35 L1653.36 1212.35 L1652.78 1212.35 L1652.19 1212.35 L1651.6 1212.35 L1651.02 1212.35 L1650.43 1212.35 L1649.84 1212.35 L1649.26 1212.35 L1648.67 1212.35 L1648.09 1212.35 L1647.5 1212.35 L1646.91 1212.35 L1646.33 1212.35 L1645.74 1212.35 L1645.15 1212.35 L1644.57 1212.35 L1643.98 1212.35 L1643.39 1212.35 L1642.81 1212.35 L1642.22 1212.35 L1641.63 1212.35 L1641.05 1212.35 L1640.46 1212.35 L1639.88 1212.35 L1639.29 1212.35 L1638.7 1212.35 L1638.12 1212.35 L1637.53 1212.35 L1636.94 1212.35 L1636.36 1212.35 L1635.77 1212.35 L1635.18 1212.35 L1634.6 1212.35 L1634.01 1212.35 L1633.42 1212.35 L1632.84 1212.35 L1632.25 1212.35 L1631.67 1212.35 L1631.08 1212.35 L1630.49 1212.35 L1629.91 1212.35 L1629.32 1212.35 L1628.73 1212.35 L1628.15 1212.35 L1627.56 1212.35 L1626.97 1212.35 L1626.39 1212.35 L1625.8 1212.35 L1625.22 1212.35 L1624.63 1212.35 L1624.04 1212.35 L1623.46 1212.35 L1622.87 1212.35 L1622.28 1212.35 L1621.7 1212.35 L1621.11 1212.35 L1620.52 1212.35 L1619.94 1212.35 L1619.35 1212.35 L1618.76 1212.35 L1618.18 1212.35 L1617.59 1212.35 L1617.01 1212.35 L1616.42 1212.35 L1615.83 1212.35 L1615.25 1212.35 L1614.66 1212.35 L1614.07 1212.35 L1613.49 1212.35 L1612.9 1212.35 L1612.31 1212.35 L1611.73 1212.35 L1611.14 1212.35 L1610.55 1212.35 L1609.97 1212.35 L1609.38 1212.35 L1608.8 1212.35 L1608.21 1212.35 L1607.62 1212.35 L1607.04 1212.35 L1606.45 1212.35 L1605.86 1212.35 L1605.28 1212.35 L1604.69 1212.35 L1604.1 1212.35 L1603.52 1212.35 L1602.93 1212.35 L1602.34 1212.35 L1601.76 1212.35 L1601.17 1212.35 L1600.59 1212.35 L1600 1212.35 L1599.41 1212.35 L1598.83 1212.35 L1598.24 1212.35 L1597.65 1212.35 L1597.07 1212.35 L1596.48 1212.35 L1595.89 1212.35 L1595.31 1212.35 L1594.72 1212.35 L1594.14 1212.35 L1593.55 1212.35 L1592.96 1212.35 L1592.38 1212.35 L1591.79 1212.35 L1591.2 1212.35 L1590.62 1212.35 L1590.03 1212.35 L1589.44 1212.35 L1588.86 1212.35 L1588.27 1212.35 L1587.68 1212.35 L1587.1 1212.35 L1586.51 1212.35 L1585.93 1212.35 L1585.34 1212.35 L1584.75 1212.35 L1584.17 1212.35 L1583.58 1212.35 L1582.99 1212.35 L1582.41 1212.35 L1581.82 1212.35 L1581.23 1212.35 L1580.65 1212.35 L1580.06 1212.35 L1579.47 1212.35 L1578.89 1212.35 L1578.3 1212.35 L1577.72 1212.35 L1577.13 1212.35 L1576.54 1212.35 L1575.96 1212.35 L1575.37 1212.35 L1574.78 1212.35 L1574.2 1212.35 L1573.61 1212.35 L1573.02 1212.35 L1572.44 1212.35 L1571.85 1212.35 L1571.27 1212.35 L1570.68 1212.35 L1570.09 1212.35 L1569.51 1212.35 L1568.92 1212.35 L1568.33 1212.35 L1567.75 1212.35 L1567.16 1212.35 L1566.57 1212.35 L1565.99 1212.35 L1565.4 1212.35 L1564.81 1212.35 L1564.23 1212.35 L1563.64 1212.35 L1563.06 1212.35 L1562.47 1212.35 L1561.88 1212.35 L1561.3 1212.35 L1560.71 1212.35 L1560.12 1212.35 L1559.54 1212.35 L1558.95 1212.35 L1558.36 1212.35 L1557.78 1212.35 L1557.19 1212.35 L1556.6 1212.35 L1556.02 1212.35 L1555.43 1212.35 L1554.85 1212.35 L1554.26 1212.35 L1553.67 1212.35 L1553.09 1212.35 L1552.5 1212.35 L1551.91 1212.35 L1551.33 1212.35 L1550.74 1212.35 L1550.15 1212.35 L1549.57 1212.35 L1548.98 1212.35 L1548.4 1212.35 L1547.81 1212.35 L1547.22 1212.35 L1546.64 1212.35 L1546.05 1212.35 L1545.46 1212.35 L1544.88 1212.35 L1544.29 1212.35 L1543.7 1212.35 L1543.12 1212.35 L1542.53 1212.35 L1541.94 1212.35 L1541.36 1212.35 L1540.77 1212.35 L1540.19 1212.35 L1539.6 1212.35 L1539.01 1212.35 L1538.43 1212.35 L1537.84 1212.35 L1537.25 1212.35 L1536.67 1212.35 L1536.08 1212.35 L1535.49 1212.35 L1534.91 1212.35 L1534.32 1212.35 L1533.73 1212.35 L1533.15 1212.35 L1532.56 1212.35 L1531.98 1212.35 L1531.39 1212.35 L1530.8 1212.35 L1530.22 1212.35 L1529.63 1212.35 L1529.04 1212.35 L1528.46 1212.35 L1527.87 1212.35 L1527.28 1212.35 L1526.7 1212.35 L1526.11 1212.35 L1525.52 1212.35 L1524.94 1212.35 L1524.35 1212.35 L1523.77 1212.35 L1523.18 1212.35 L1522.59 1212.35 L1522.01 1212.35 L1521.42 1212.35 L1520.83 1212.35 L1520.25 1212.35 L1519.66 1212.35 L1519.07 1212.35 L1518.49 1212.35 L1517.9 1212.35 L1517.32 1212.35 L1516.73 1212.35 L1516.14 1212.35 L1515.56 1212.35 L1514.97 1212.35 L1514.38 1212.35 L1513.8 1212.35 L1513.21 1212.35 L1512.62 1212.35 L1512.04 1212.35 L1511.45 1212.35 L1510.86 1212.35 L1510.28 1212.35 L1509.69 1212.35 L1509.11 1212.35 L1508.52 1212.35 L1507.93 1212.35 L1507.35 1212.35 L1506.76 1212.35 L1506.17 1212.35 L1505.59 1212.35 L1505 1212.35 L1504.41 1212.35 L1503.83 1212.35 L1503.24 1212.35 L1502.65 1212.35 L1502.07 1212.35 L1501.48 1212.35 L1500.9 1212.35 L1500.31 1212.35 L1499.72 1212.35 L1499.14 1212.35 L1498.55 1212.35 L1497.96 1212.35 L1497.38 1212.35 L1496.79 1212.35 L1496.2 1212.35 L1495.62 1212.35 L1495.03 1212.35 L1494.45 1212.35 L1493.86 1212.35 L1493.27 1212.35 L1492.69 1212.35 L1492.1 1212.35 L1491.51 1212.35 L1490.93 1212.35 L1490.34 1212.35 L1489.75 1212.35 L1489.17 1212.35 L1488.58 1212.35 L1487.99 1212.35 L1487.41 1212.35 L1486.82 1212.35 L1486.24 1212.35 L1485.65 1212.35 L1485.06 1212.35 L1484.48 1212.35 L1483.89 1212.35 L1483.3 1212.35 L1482.72 1212.35 L1482.13 1212.35 L1481.54 1212.35 L1480.96 1212.35 L1480.37 1212.35 L1479.78 1212.35 L1479.2 1212.35 L1478.61 1212.35 L1478.03 1212.35 L1477.44 1212.35 L1476.85 1212.35 L1476.27 1212.35 L1475.68 1212.35 L1475.09 1212.35 L1474.51 1212.35 L1473.92 1212.35 L1473.33 1212.35 L1472.75 1212.35 L1472.16 1212.35 L1471.57 1212.35 L1470.99 1212.35 L1470.4 1212.35 L1469.82 1212.35 L1469.23 1212.35 L1468.64 1212.35 L1468.06 1212.35 L1467.47 1212.35 L1466.88 1212.35 L1466.3 1212.35 L1465.71 1212.35 L1465.12 1212.35 L1464.54 1212.35 L1463.95 1212.35 L1463.37 1212.35 L1462.78 1212.35 L1462.19 1212.35 L1461.61 1212.35 L1461.02 1212.35 L1460.43 1212.35 L1459.85 1212.35 L1459.26 1212.35 L1458.67 1212.35 L1458.09 1212.35 L1457.5 1212.35 L1456.91 1212.35 L1456.33 1212.35 L1455.74 1212.35 L1455.16 1212.35 L1454.57 1212.35 L1453.98 1212.35 L1453.4 1212.35 L1452.81 1212.35 L1452.22 1212.35 L1451.64 1212.35 L1451.05 1212.35 L1450.46 1212.35 L1449.88 1212.35 L1449.29 1212.35 L1448.7 1212.35 L1448.12 1212.35 L1447.53 1212.35 L1446.95 1212.35 L1446.36 1212.35 L1445.77 1212.35 L1445.19 1212.35 L1444.6 1212.35 L1444.01 1212.35 L1443.43 1212.35 L1442.84 1212.35 L1442.25 1212.35 L1441.67 1212.35 L1441.08 1212.35 L1440.5 1212.35 L1439.91 1212.35 L1439.32 1212.35 L1438.74 1212.35 L1438.15 1212.35 L1437.56 1212.35 L1436.98 1212.35 L1436.39 1212.35 L1435.8 1212.35 L1435.22 1212.35 L1434.63 1212.35 L1434.04 1212.35 L1433.46 1212.35 L1432.87 1212.35 L1432.29 1212.35 L1431.7 1212.35 L1431.11 1212.35 L1430.53 1212.35 L1429.94 1212.35 L1429.35 1212.35 L1428.77 1212.35 L1428.18 1212.35 L1427.59 1212.35 L1427.01 1212.35 L1426.42 1212.35 L1425.83 1212.35 L1425.25 1212.35 L1424.66 1212.35 L1424.08 1212.35 L1423.49 1212.35 L1422.9 1212.35 L1422.32 1212.35 L1421.73 1212.35 L1421.14 1212.35 L1420.56 1212.35 L1419.97 1212.35 L1419.38 1212.35 L1418.8 1212.35 L1418.21 1212.35 L1417.63 1212.35 L1417.04 1212.35 L1416.45 1212.35 L1415.87 1212.35 L1415.28 1212.35 L1414.69 1212.35 L1414.11 1212.35 L1413.52 1212.35 L1412.93 1212.35 L1412.35 1212.35 L1411.76 1212.35 L1411.17 1212.35 L1410.59 1212.35 L1410 1212.35 L1409.42 1212.35 L1408.83 1212.35 L1408.24 1212.35 L1407.66 1212.35 L1407.07 1212.35 L1406.48 1212.35 L1405.9 1212.35 L1405.31 1212.35 L1404.72 1212.35 L1404.14 1212.35 L1403.55 1212.35 L1402.96 1212.35 L1402.38 1212.35 L1401.79 1212.35 L1401.21 1212.35 L1400.62 1212.35 L1400.03 1212.35 L1399.45 1212.35 L1398.86 1212.35 L1398.27 1212.35 L1397.69 1212.35 L1397.1 1212.35 L1396.51 1212.35 L1395.93 1212.35 L1395.34 1212.35 L1394.75 1212.35 L1394.17 1212.35 L1393.58 1212.35 L1393 1212.35 L1392.41 1212.35 L1391.82 1212.35 L1391.24 1212.35 L1390.65 1212.35 L1390.06 1212.35 L1389.48 1212.35 L1388.89 1212.35 L1388.3 1212.35 L1387.72 1212.35 L1387.13 1212.35 L1386.55 1212.35 L1385.96 1212.35 L1385.37 1212.35 L1384.79 1212.35 L1384.2 1212.35 L1383.61 1212.35 L1383.03 1212.35 L1382.44 1212.35 L1381.85 1212.35 L1381.27 1212.35 L1380.68 1212.35 L1380.09 1212.35 L1379.51 1212.35 L1378.92 1212.35 L1378.34 1212.35 L1377.75 1212.35 L1377.16 1212.35 L1376.58 1212.35 L1375.99 1212.35 L1375.4 1212.35 L1374.82 1212.35 L1374.23 1212.35 L1373.64 1212.35 L1373.06 1212.35 L1372.47 1212.35 L1371.88 1212.35 L1371.3 1212.35 L1370.71 1212.35 L1370.13 1212.35 L1369.54 1212.35 L1368.95 1212.35 L1368.37 1212.35 L1367.78 1212.35 L1367.19 1212.35 L1366.61 1212.35 L1366.02 1212.35 L1365.43 1212.35 L1364.85 1212.35 L1364.26 1212.35 L1363.68 1212.35 L1363.09 1212.35 L1362.5 1212.35 L1361.92 1212.35 L1361.33 1212.35 L1360.74 1212.35 L1360.16 1212.35 L1359.57 1212.35 L1358.98 1212.35 L1358.4 1212.35 L1357.81 1212.35 L1357.22 1212.35 L1356.64 1212.35 L1356.05 1212.35 L1355.47 1212.35 L1354.88 1212.35 L1354.29 1212.35 L1353.71 1212.35 L1353.12 1212.35 L1352.53 1212.35 L1351.95 1212.35 L1351.36 1212.35 L1350.77 1212.35 L1350.19 1212.35 L1349.6 1212.35 L1349.01 1212.35 L1348.43 1212.35 L1347.84 1212.35 L1347.26 1212.35 L1346.67 1212.35 L1346.08 1212.35 L1345.5 1212.35 L1344.91 1212.35 L1344.32 1212.35 L1343.74 1212.35 L1343.15 1212.35 L1342.56 1212.35 L1341.98 1212.35 L1341.39 1212.35 L1340.8 1212.35 L1340.22 1212.35 L1339.63 1212.35 L1339.05 1212.35 L1338.46 1212.35 L1337.87 1212.35 L1337.29 1212.35 L1336.7 1212.35 L1336.11 1212.35 L1335.53 1212.35 L1334.94 1212.35 L1334.35 1212.35 L1333.77 1212.35 L1333.18 1212.35 L1332.6 1212.35 L1332.01 1212.35 L1331.42 1212.35 L1330.84 1212.35 L1330.25 1212.35 L1329.66 1212.35 L1329.08 1212.35 L1328.49 1212.35 L1327.9 1212.35 L1327.32 1212.35 L1326.73 1212.35 L1326.14 1212.35 L1325.56 1212.35 L1324.97 1212.35 L1324.39 1212.35 L1323.8 1212.35 L1323.21 1212.35 L1322.63 1212.35 L1322.04 1212.35 L1321.45 1212.35 L1320.87 1212.35 L1320.28 1212.35 L1319.69 1212.35 L1319.11 1212.35 L1318.52 1212.35 L1317.93 1212.35 L1317.35 1212.35 L1316.76 1212.35 L1316.18 1212.35 L1315.59 1212.35 L1315 1212.35 L1314.42 1212.35 L1313.83 1212.35 L1313.24 1212.35 L1312.66 1212.35 L1312.07 1212.35 L1311.48 1212.35 L1310.9 1212.35 L1310.31 1212.35 L1309.73 1212.35 L1309.14 1212.35 L1308.55 1212.35 L1307.97 1212.35 L1307.38 1212.35 L1306.79 1212.35 L1306.21 1212.35 L1305.62 1212.35 L1305.03 1212.35 L1304.45 1212.35 L1303.86 1212.35 L1303.27 1212.35 L1302.69 1212.35 L1302.1 1212.35 L1301.52 1212.35 L1300.93 1212.35 L1300.34 1212.35 L1299.76 1212.35 L1299.17 1212.35 L1298.58 1212.35 L1298 1212.35 L1297.41 1212.35 L1296.82 1212.35 L1296.24 1212.35 L1295.65 1212.35 L1295.06 1212.35 L1294.48 1212.35 L1293.89 1212.35 L1293.31 1212.35 L1292.72 1212.35 L1292.13 1212.35 L1291.55 1212.35 L1290.96 1212.35 L1290.37 1212.35 L1289.79 1212.35 L1289.2 1212.35 L1288.61 1212.35 L1288.03 1212.35 L1287.44 1212.35 L1286.86 1212.35 L1286.27 1212.35 L1285.68 1212.35 L1285.1 1212.35 L1284.51 1212.35 L1283.92 1212.35 L1283.34 1212.35 L1282.75 1212.35 L1282.16 1212.35 L1281.58 1212.35 L1280.99 1212.35 L1280.4 1212.35 L1279.82 1212.35 L1279.23 1212.35 L1278.65 1212.35 L1278.06 1212.35 L1277.47 1212.35 L1276.89 1212.35 L1276.3 1212.35 L1275.71 1212.35 L1275.13 1212.35 L1274.54 1212.35 L1273.95 1212.35 L1273.37 1212.35 L1272.78 1212.35 L1272.19 1212.35 L1271.61 1212.35 L1271.02 1212.35 L1270.44 1212.35 L1269.85 1212.35 L1269.26 1212.35 L1268.68 1212.35 L1268.09 1212.35 L1267.5 1212.35 L1266.92 1212.35 L1266.33 1212.35 L1265.74 1212.35 L1265.16 1212.35 L1264.57 1212.35 L1263.98 1212.35 L1263.4 1212.35 L1262.81 1212.35 L1262.23 1212.35 L1261.64 1212.35 L1261.05 1212.35 L1260.47 1212.35 L1259.88 1212.35 L1259.29 1212.35 L1258.71 1212.35 L1258.12 1212.35 L1257.53 1212.35 L1256.95 1212.35 L1256.36 1212.35 L1255.78 1212.35 L1255.19 1212.35 L1254.6 1212.35 L1254.02 1212.35 L1253.43 1212.35 L1252.84 1212.35 L1252.26 1212.35 L1251.67 1212.35 L1251.08 1212.35 L1250.5 1212.35 L1249.91 1212.35 L1249.32 1212.35 L1248.74 1212.35 L1248.15 1212.35 L1247.57 1212.35 L1246.98 1212.35 L1246.39 1212.35 L1245.81 1212.35 L1245.22 1212.35 L1244.63 1212.35 L1244.05 1212.35 L1243.46 1212.35 L1242.87 1212.35 L1242.29 1212.35 L1241.7 1212.35 L1241.11 1212.35 L1240.53 1212.35 L1239.94 1212.35 L1239.36 1212.35 L1238.77 1212.35 L1238.18 1212.35 L1237.6 1212.35 L1237.01 1212.35 L1236.42 1212.35 L1235.84 1212.35 L1235.25 1212.35 L1234.66 1212.35 L1234.08 1212.35 L1233.49 1212.35 L1232.91 1212.35 L1232.32 1212.35 L1231.73 1212.35 L1231.15 1212.35 L1230.56 1212.35 L1229.97 1212.35 L1229.39 1212.35 L1228.8 1212.35 L1228.21 1212.35 L1227.63 1212.35 L1227.04 1212.35 L1226.45 1212.35 L1225.87 1212.35 L1225.28 1212.35 L1224.7 1212.35 L1224.11 1212.35 L1223.52 1212.35 L1222.94 1212.35 L1222.35 1212.35 L1221.76 1212.35 L1221.18 1212.35 L1220.59 1212.35 L1220 1212.35 L1219.42 1212.35 L1218.83 1212.35 L1218.24 1212.35 L1217.66 1212.35 L1217.07 1212.35 L1216.49 1212.35 L1215.9 1212.35 L1215.31 1212.35 L1214.73 1212.35 L1214.14 1212.35 L1213.55 1212.35 L1212.97 1212.35 L1212.38 1212.35 L1211.79 1212.35 L1211.21 1212.35 L1210.62 1212.35 L1210.03 1212.35 L1209.45 1212.35 L1208.86 1212.35 L1208.28 1212.35 L1207.69 1212.35 L1207.1 1212.35 L1206.52 1212.35 L1205.93 1212.35 L1205.34 1212.35 L1204.76 1212.35 L1204.17 1212.35 L1203.58 1212.35 L1203 1212.35 L1202.41 1212.35 L1201.83 1212.35 L1201.24 1212.35 L1200.65 1212.35 L1200.07 1212.35 L1199.48 1212.35 L1198.89 1212.35 L1198.31 1212.35 L1197.72 1212.35 L1197.13 1212.35 L1196.55 1212.35 L1195.96 1212.35 L1195.37 1212.35 L1194.79 1212.35 L1194.2 1212.35 L1193.62 1212.35 L1193.03 1212.35 L1192.44 1212.35 L1191.86 1212.35 L1191.27 1212.35 L1190.68 1212.35 L1190.1 1212.35 L1189.51 1212.35 L1188.92 1212.35 L1188.34 1212.35 L1187.75 1212.35 L1187.16 1212.35 L1186.58 1212.35 L1185.99 1212.35 L1185.41 1212.35 L1184.82 1212.35 L1184.23 1212.35 L1183.65 1212.35 L1183.06 1212.35 L1182.47 1212.35 L1181.89 1212.35 L1181.3 1212.35 L1180.71 1212.35 L1180.13 1212.35 L1179.54 1212.35 L1178.96 1212.35 L1178.37 1212.35 L1177.78 1212.35 L1177.2 1212.35 L1176.61 1212.35 L1176.02 1212.35 L1175.44 1212.35 L1174.85 1212.35 L1174.26 1212.35 L1173.68 1212.35 L1173.09 1212.35 L1172.5 1212.35 L1171.92 1212.35 L1171.33 1212.35 L1170.75 1212.35 L1170.16 1212.35 L1169.57 1212.35 L1168.99 1212.35 L1168.4 1212.35 L1167.81 1212.35 L1167.23 1212.35 L1166.64 1212.35 L1166.05 1212.35 L1165.47 1212.35 L1164.88 1212.35 L1164.29 1212.35 L1163.71 1212.35 L1163.12 1212.35 L1162.54 1212.35 L1161.95 1212.35 L1161.36 1212.35 L1160.78 1212.35 L1160.19 1212.35 L1159.6 1212.35 L1159.02 1212.35 L1158.43 1212.35 L1157.84 1212.35 L1157.26 1212.35 L1156.67 1212.35 L1156.09 1212.35 L1155.5 1212.35 L1154.91 1212.35 L1154.33 1212.35 L1153.74 1212.35 L1153.15 1212.35 L1152.57 1212.35 L1151.98 1212.35 L1151.39 1212.35 L1150.81 1212.35 L1150.22 1212.35 L1149.63 1212.35 L1149.05 1212.35 L1148.46 1212.35 L1147.88 1212.35 L1147.29 1212.35 L1146.7 1212.35 L1146.12 1212.35 L1145.53 1212.35 L1144.94 1212.35 L1144.36 1212.35 L1143.77 1212.35 L1143.18 1212.35 L1142.6 1212.35 L1142.01 1212.35 L1141.42 1212.35 L1140.84 1212.35 L1140.25 1212.35 L1139.67 1212.35 L1139.08 1212.35 L1138.49 1212.35 L1137.91 1212.35 L1137.32 1212.35 L1136.73 1212.35 L1136.15 1212.35 L1135.56 1212.35 L1134.97 1212.35 L1134.39 1212.35 L1133.8 1212.35 L1133.21 1212.35 L1132.63 1212.35 L1132.04 1212.35 L1131.46 1212.35 L1130.87 1212.35 L1130.28 1212.35 L1129.7 1212.35 L1129.11 1212.35 L1128.52 1212.35 L1127.94 1212.35 L1127.35 1212.35 L1126.76 1212.35 L1126.18 1212.35 L1125.59 1212.35 L1125.01 1212.35 L1124.42 1212.35 L1123.83 1212.35 L1123.25 1212.35 L1122.66 1212.35 L1122.07 1212.35 L1121.49 1212.35 L1120.9 1212.35 L1120.31 1212.35 L1119.73 1212.35 L1119.14 1212.35 L1118.55 1212.35 L1117.97 1212.35 L1117.38 1212.35 L1116.8 1212.35 L1116.21 1212.35 L1115.62 1212.35 L1115.04 1212.35 L1114.45 1212.35 L1113.86 1212.35 L1113.28 1212.35 L1112.69 1212.35 L1112.1 1212.35 L1111.52 1212.35 L1110.93 1212.35 L1110.34 1212.35 L1109.76 1212.35 L1109.17 1212.35 L1108.59 1212.35 L1108 1212.35 L1107.41 1212.35 L1106.83 1212.35 L1106.24 1212.35 L1105.65 1212.35 L1105.07 1212.35 L1104.48 1212.35 L1103.89 1212.35 L1103.31 1212.35 L1102.72 1212.35 L1102.14 1212.35 L1101.55 1212.35 L1100.96 1212.35 L1100.38 1212.35 L1099.79 1212.35 L1099.2 1212.35 L1098.62 1212.35 L1098.03 1212.35 L1097.44 1212.35 L1096.86 1212.35 L1096.27 1212.35 L1095.68 1212.35 L1095.1 1212.35 L1094.51 1212.35 L1093.93 1212.35 L1093.34 1212.35 L1092.75 1212.35 L1092.17 1212.35 L1091.58 1212.35 L1090.99 1212.35 L1090.41 1212.35 L1089.82 1212.35 L1089.23 1212.35 L1088.65 1212.35 L1088.06 1212.35 L1087.47 1212.35 L1086.89 1212.35 L1086.3 1212.35 L1085.72 1212.35 L1085.13 1212.35 L1084.54 1212.35 L1083.96 1212.35 L1083.37 1212.35 L1082.78 1212.35 L1082.2 1212.35 L1081.61 1212.35 L1081.02 1212.35 L1080.44 1212.35 L1079.85 1212.35 L1079.26 1212.35 L1078.68 1212.35 L1078.09 1212.35 L1077.51 1212.35 L1076.92 1212.35 L1076.33 1212.35 L1075.75 1212.35 L1075.16 1212.35 L1074.57 1212.35 L1073.99 1212.35 L1073.4 1212.35 L1072.81 1212.35 L1072.23 1212.35 L1071.64 1212.35 L1071.06 1212.35 L1070.47 1212.35 L1069.88 1212.35 L1069.3 1212.35 L1068.71 1212.35 L1068.12 1212.35 L1067.54 1212.35 L1066.95 1212.35 L1066.36 1212.35 L1065.78 1212.35 L1065.19 1212.35 L1064.6 1212.35 L1064.02 1212.35 L1063.43 1212.35 L1062.85 1212.35 L1062.26 1212.35 L1061.67 1212.35 L1061.09 1212.35 L1060.5 1212.35 L1059.91 1212.35 L1059.33 1212.35 L1058.74 1212.35 L1058.15 1212.35 L1057.57 1212.35 L1056.98 1212.35 L1056.39 1212.35 L1055.81 1212.35 L1055.22 1212.35 L1054.64 1212.35 L1054.05 1212.35 L1053.46 1212.35 L1052.88 1212.35 L1052.29 1212.35 L1051.7 1212.35 L1051.12 1212.35 L1050.53 1212.35 L1049.94 1212.35 L1049.36 1212.35 L1048.77 1212.35 L1048.19 1212.35 L1047.6 1212.35 L1047.01 1212.35 L1046.43 1212.35 L1045.84 1212.35 L1045.25 1212.35 L1044.67 1212.35 L1044.08 1212.35 L1043.49 1212.35 L1042.91 1212.35 L1042.32 1212.35 L1041.73 1212.35 L1041.15 1212.35 L1040.56 1212.35 L1039.98 1212.35 L1039.39 1212.35 L1038.8 1212.35 L1038.22 1212.35 L1037.63 1212.35 L1037.04 1212.35 L1036.46 1212.35 L1035.87 1212.35 L1035.28 1212.35 L1034.7 1212.35 L1034.11 1212.35 L1033.52 1212.35 L1032.94 1212.35 L1032.35 1212.35 L1031.77 1212.35 L1031.18 1212.35 L1030.59 1212.35 L1030.01 1212.35 L1029.42 1212.35 L1028.83 1212.35 L1028.25 1212.35 L1027.66 1212.35 L1027.07 1212.35 L1026.49 1212.35 L1025.9 1212.35 L1025.32 1212.35 L1024.73 1212.35 L1024.14 1212.35 L1023.56 1212.35 L1022.97 1212.35 L1022.38 1212.35 L1021.8 1212.35 L1021.21 1212.35 L1020.62 1212.35 L1020.04 1212.35 L1019.45 1212.35 L1018.86 1212.35 L1018.28 1212.35 L1017.69 1212.35 L1017.11 1212.35 L1016.52 1212.35 L1015.93 1212.35 L1015.35 1212.35 L1014.76 1212.35 L1014.17 1212.35 L1013.59 1212.35 L1013 1212.35 L1012.41 1212.35 L1011.83 1212.35 L1011.24 1212.35 L1010.65 1212.35 L1010.07 1212.35 L1009.48 1212.35 L1008.9 1212.35 L1008.31 1212.35 L1007.72 1212.35 L1007.14 1212.35 L1006.55 1212.35 L1005.96 1212.35 L1005.38 1212.35 L1004.79 1212.35 L1004.2 1212.35 L1003.62 1212.35 L1003.03 1212.35 L1002.44 1212.35 L1001.86 1212.35 L1001.27 1212.35 L1000.69 1212.35 L1000.1 1212.35 L999.513 1212.35 L998.926 1212.35 L998.34 1212.35 L997.754 1212.35 L997.167 1212.35 L996.581 1212.35 L995.994 1212.35 L995.408 1212.35 L994.822 1212.35 L994.235 1212.35 L993.649 1212.35 L993.062 1212.35 L992.476 1212.35 L991.889 1212.35 L991.303 1212.35 L990.717 1212.35 L990.13 1212.35 L989.544 1212.35 L988.957 1212.35 L988.371 1212.35 L987.785 1212.35 L987.198 1212.35 L986.612 1212.35 L986.025 1212.35  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip692)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1212.8 986.612,1212.8 987.198,1212.8 987.785,1212.8 988.371,1212.8 988.957,1212.8 989.544,1212.8 990.13,1212.8 990.717,1212.8 991.303,1212.8 991.889,1212.8 992.476,1212.8 993.062,1212.8 993.649,1212.8 994.235,1212.8 994.822,1212.8 995.408,1212.8 995.994,1212.8 996.581,1212.8 997.167,1212.8 997.754,1212.8 998.34,1212.8 998.926,1212.8 999.513,1212.8 1000.1,1212.8 1000.69,1212.8 1001.27,1212.8 1001.86,1212.8 1002.44,1212.8 1003.03,1212.8 1003.62,1212.8 1004.2,1212.8 1004.79,1212.8 1005.38,1212.8 1005.96,1212.8 1006.55,1212.8 1007.14,1212.8 1007.72,1212.8 1008.31,1212.8 1008.9,1212.8 1009.48,1212.8 1010.07,1212.8 1010.65,1212.8 1011.24,1212.8 1011.83,1212.8 1012.41,1212.8 1013,1212.8 1013.59,1212.8 1014.17,1212.8 1014.76,1212.8 1015.35,1212.8 1015.93,1212.8 1016.52,1212.8 1017.11,1212.8 1017.69,1212.8 1018.28,1212.8 1018.86,1212.8 1019.45,1212.8 1020.04,1212.8 1020.62,1212.8 1021.21,1212.8 1021.8,1212.8 1022.38,1212.8 1022.97,1212.8 1023.56,1212.8 1024.14,1212.8 1024.73,1212.8 1025.32,1212.8 1025.9,1212.8 1026.49,1212.8 1027.07,1212.8 1027.66,1212.8 1028.25,1212.8 1028.83,1212.8 1029.42,1212.8 1030.01,1212.8 1030.59,1212.8 1031.18,1212.8 1031.77,1212.8 1032.35,1212.8 1032.94,1212.8 1033.52,1212.8 1034.11,1212.8 1034.7,1212.8 1035.28,1212.8 1035.87,1212.8 1036.46,1212.8 1037.04,1212.8 1037.63,1212.8 1038.22,1212.8 1038.8,1212.8 1039.39,1212.8 1039.98,1212.8 1040.56,1212.8 1041.15,1212.8 1041.73,1212.8 1042.32,1212.8 1042.91,1212.8 1043.49,1212.8 1044.08,1212.8 1044.67,1212.8 1045.25,1212.8 1045.84,1212.8 1046.43,1212.8 1047.01,1212.8 1047.6,1212.8 1048.19,1212.8 1048.77,1212.8 1049.36,1212.8 1049.94,1212.8 1050.53,1212.8 1051.12,1212.8 1051.7,1212.8 1052.29,1212.8 1052.88,1212.8 1053.46,1212.8 1054.05,1212.8 1054.64,1212.8 1055.22,1212.8 1055.81,1212.8 1056.39,1212.8 1056.98,1212.8 1057.57,1212.8 1058.15,1212.8 1058.74,1212.8 1059.33,1212.8 1059.91,1212.8 1060.5,1212.8 1061.09,1212.8 1061.67,1212.8 1062.26,1212.8 1062.85,1212.8 1063.43,1212.8 1064.02,1212.8 1064.6,1212.8 1065.19,1212.8 1065.78,1212.8 1066.36,1212.8 1066.95,1212.8 1067.54,1212.8 1068.12,1212.8 1068.71,1212.8 1069.3,1212.8 1069.88,1212.8 1070.47,1212.8 1071.06,1212.8 1071.64,1212.8 1072.23,1212.8 1072.81,1212.8 1073.4,1212.8 1073.99,1212.8 1074.57,1212.8 1075.16,1212.8 1075.75,1212.8 1076.33,1212.8 1076.92,1212.8 1077.51,1212.8 1078.09,1212.8 1078.68,1212.8 1079.26,1212.8 1079.85,1212.8 1080.44,1212.8 1081.02,1212.8 1081.61,1212.8 1082.2,1212.8 1082.78,1212.8 1083.37,1212.8 1083.96,1212.8 1084.54,1212.8 1085.13,1212.8 1085.72,1212.8 1086.3,1212.8 1086.89,1212.8 1087.47,1212.8 1088.06,1212.8 1088.65,1212.8 1089.23,1212.8 1089.82,1212.8 1090.41,1212.8 1090.99,1212.8 1091.58,1212.8 1092.17,1212.8 1092.75,1212.8 1093.34,1212.8 1093.93,1212.8 1094.51,1212.8 1095.1,1212.8 1095.68,1212.8 1096.27,1212.8 1096.86,1212.8 1097.44,1212.8 1098.03,1212.8 1098.62,1212.8 1099.2,1212.8 1099.79,1212.8 1100.38,1212.8 1100.96,1212.8 1101.55,1212.8 1102.14,1212.8 1102.72,1212.8 1103.31,1212.8 1103.89,1212.8 1104.48,1212.8 1105.07,1212.8 1105.65,1212.8 1106.24,1212.8 1106.83,1212.8 1107.41,1212.8 1108,1212.8 1108.59,1212.8 1109.17,1212.8 1109.76,1212.8 1110.34,1212.8 1110.93,1212.8 1111.52,1212.8 1112.1,1212.8 1112.69,1212.8 1113.28,1212.8 1113.86,1212.8 1114.45,1212.8 1115.04,1212.8 1115.62,1212.8 1116.21,1212.8 1116.8,1212.8 1117.38,1212.8 1117.97,1212.8 1118.55,1212.8 1119.14,1212.8 1119.73,1212.8 1120.31,1212.8 1120.9,1212.8 1121.49,1212.8 1122.07,1212.8 1122.66,1212.8 1123.25,1212.8 1123.83,1212.8 1124.42,1212.8 1125.01,1212.8 1125.59,1212.8 1126.18,1212.8 1126.76,1212.8 1127.35,1212.8 1127.94,1212.8 1128.52,1212.8 1129.11,1212.8 1129.7,1212.8 1130.28,1212.8 1130.87,1212.8 1131.46,1212.8 1132.04,1212.8 1132.63,1212.8 1133.21,1212.8 1133.8,1212.8 1134.39,1212.8 1134.97,1212.8 1135.56,1212.8 1136.15,1212.8 1136.73,1212.8 1137.32,1212.8 1137.91,1212.8 1138.49,1212.8 1139.08,1212.8 1139.67,1212.8 1140.25,1212.8 1140.84,1212.8 1141.42,1212.8 1142.01,1212.8 1142.6,1212.8 1143.18,1212.8 1143.77,1212.8 1144.36,1212.8 1144.94,1212.8 1145.53,1212.8 1146.12,1212.8 1146.7,1212.8 1147.29,1212.8 1147.88,1212.8 1148.46,1212.8 1149.05,1212.8 1149.63,1212.8 1150.22,1212.8 1150.81,1212.8 1151.39,1212.8 1151.98,1212.8 1152.57,1212.8 1153.15,1212.8 1153.74,1212.8 1154.33,1212.8 1154.91,1212.8 1155.5,1212.8 1156.09,1212.8 1156.67,1212.8 1157.26,1212.8 1157.84,1212.8 1158.43,1212.8 1159.02,1212.8 1159.6,1212.8 1160.19,1212.8 1160.78,1212.8 1161.36,1212.8 1161.95,1212.8 1162.54,1212.8 1163.12,1212.8 1163.71,1212.8 1164.29,1212.8 1164.88,1212.8 1165.47,1212.8 1166.05,1212.8 1166.64,1212.8 1167.23,1212.8 1167.81,1212.8 1168.4,1212.8 1168.99,1212.8 1169.57,1212.8 1170.16,1212.8 1170.75,1212.8 1171.33,1212.8 1171.92,1212.8 1172.5,1212.8 1173.09,1212.8 1173.68,1212.8 1174.26,1212.8 1174.85,1212.8 1175.44,1212.8 1176.02,1212.8 1176.61,1212.8 1177.2,1212.8 1177.78,1212.8 1178.37,1212.8 1178.96,1212.8 1179.54,1212.8 1180.13,1212.8 1180.71,1212.8 1181.3,1212.8 1181.89,1212.8 1182.47,1212.8 1183.06,1212.8 1183.65,1212.8 1184.23,1212.8 1184.82,1212.8 1185.41,1212.8 1185.99,1212.8 1186.58,1212.8 1187.16,1212.8 1187.75,1212.8 1188.34,1212.8 1188.92,1212.8 1189.51,1212.8 1190.1,1212.8 1190.68,1212.8 1191.27,1212.8 1191.86,1212.8 1192.44,1212.8 1193.03,1212.8 1193.62,1212.8 1194.2,1212.8 1194.79,1212.8 1195.37,1212.8 1195.96,1212.8 1196.55,1212.8 1197.13,1212.8 1197.72,1212.8 1198.31,1212.8 1198.89,1212.8 1199.48,1212.8 1200.07,1212.8 1200.65,1212.8 1201.24,1212.8 1201.83,1212.8 1202.41,1212.8 1203,1212.8 1203.58,1212.8 1204.17,1212.8 1204.76,1212.8 1205.34,1212.8 1205.93,1212.8 1206.52,1212.8 1207.1,1212.8 1207.69,1212.8 1208.28,1212.8 1208.86,1212.8 1209.45,1212.8 1210.03,1212.8 1210.62,1212.8 1211.21,1212.8 1211.79,1212.8 1212.38,1212.8 1212.97,1212.8 1213.55,1212.8 1214.14,1212.8 1214.73,1212.8 1215.31,1212.8 1215.9,1212.8 1216.49,1212.8 1217.07,1212.8 1217.66,1212.8 1218.24,1212.8 1218.83,1212.8 1219.42,1212.8 1220,1212.8 1220.59,1212.8 1221.18,1212.8 1221.76,1212.8 1222.35,1212.8 1222.94,1212.8 1223.52,1212.8 1224.11,1212.8 1224.7,1212.8 1225.28,1212.8 1225.87,1212.8 1226.45,1212.8 1227.04,1212.8 1227.63,1212.8 1228.21,1212.8 1228.8,1212.8 1229.39,1212.8 1229.97,1212.8 1230.56,1212.8 1231.15,1212.8 1231.73,1212.8 1232.32,1212.8 1232.91,1212.8 1233.49,1212.8 1234.08,1212.8 1234.66,1212.8 1235.25,1212.8 1235.84,1212.8 1236.42,1212.8 1237.01,1212.8 1237.6,1212.8 1238.18,1212.8 1238.77,1212.8 1239.36,1212.8 1239.94,1212.8 1240.53,1212.8 1241.11,1212.8 1241.7,1212.8 1242.29,1212.8 1242.87,1212.8 1243.46,1212.8 1244.05,1212.8 1244.63,1212.8 1245.22,1212.8 1245.81,1212.8 1246.39,1212.8 1246.98,1212.8 1247.57,1212.8 1248.15,1212.8 1248.74,1212.8 1249.32,1212.8 1249.91,1212.8 1250.5,1212.8 1251.08,1212.8 1251.67,1212.8 1252.26,1212.8 1252.84,1212.8 1253.43,1212.8 1254.02,1212.8 1254.6,1212.8 1255.19,1212.8 1255.78,1212.8 1256.36,1212.8 1256.95,1212.8 1257.53,1212.8 1258.12,1212.8 1258.71,1212.8 1259.29,1212.8 1259.88,1212.8 1260.47,1212.8 1261.05,1212.8 1261.64,1212.8 1262.23,1212.8 1262.81,1212.8 1263.4,1212.8 1263.98,1212.8 1264.57,1212.8 1265.16,1212.8 1265.74,1212.8 1266.33,1212.8 1266.92,1212.8 1267.5,1212.8 1268.09,1212.8 1268.68,1212.8 1269.26,1212.8 1269.85,1212.8 1270.44,1212.8 1271.02,1212.8 1271.61,1212.8 1272.19,1212.8 1272.78,1212.8 1273.37,1212.8 1273.95,1212.8 1274.54,1212.8 1275.13,1212.8 1275.71,1212.8 1276.3,1212.8 1276.89,1212.8 1277.47,1212.8 1278.06,1212.8 1278.65,1212.8 1279.23,1212.8 1279.82,1212.8 1280.4,1212.8 1280.99,1212.8 1281.58,1212.8 1282.16,1212.8 1282.75,1212.8 1283.34,1212.8 1283.92,1212.8 1284.51,1212.8 1285.1,1212.8 1285.68,1212.8 1286.27,1212.8 1286.86,1212.8 1287.44,1212.8 1288.03,1212.8 1288.61,1212.8 1289.2,1212.8 1289.79,1212.8 1290.37,1212.8 1290.96,1212.8 1291.55,1212.8 1292.13,1212.8 1292.72,1212.8 1293.31,1212.8 1293.89,1212.8 1294.48,1212.8 1295.06,1212.8 1295.65,1212.8 1296.24,1212.8 1296.82,1212.8 1297.41,1212.8 1298,1212.8 1298.58,1212.8 1299.17,1212.8 1299.76,1212.8 1300.34,1212.8 1300.93,1212.8 1301.52,1212.8 1302.1,1212.8 1302.69,1212.8 1303.27,1212.8 1303.86,1212.8 1304.45,1212.8 1305.03,1212.8 1305.62,1212.8 1306.21,1212.8 1306.79,1212.8 1307.38,1212.8 1307.97,1212.8 1308.55,1212.8 1309.14,1212.8 1309.73,1212.8 1310.31,1212.8 1310.9,1212.8 1311.48,1212.8 1312.07,1212.8 1312.66,1212.8 1313.24,1212.8 1313.83,1212.8 1314.42,1212.8 1315,1212.8 1315.59,1212.8 1316.18,1212.8 1316.76,1212.8 1317.35,1212.8 1317.93,1212.8 1318.52,1212.8 1319.11,1212.8 1319.69,1212.8 1320.28,1212.8 1320.87,1212.8 1321.45,1212.8 1322.04,1212.8 1322.63,1212.8 1323.21,1212.8 1323.8,1212.8 1324.39,1212.8 1324.97,1212.8 1325.56,1212.8 1326.14,1212.8 1326.73,1212.8 1327.32,1212.8 1327.9,1212.8 1328.49,1212.8 1329.08,1212.8 1329.66,1212.8 1330.25,1212.8 1330.84,1212.8 1331.42,1212.8 1332.01,1212.8 1332.6,1212.8 1333.18,1212.8 1333.77,1212.8 1334.35,1212.8 1334.94,1212.8 1335.53,1212.8 1336.11,1212.8 1336.7,1212.8 1337.29,1212.8 1337.87,1212.8 1338.46,1212.8 1339.05,1212.8 1339.63,1212.8 1340.22,1212.8 1340.8,1212.8 1341.39,1212.8 1341.98,1212.8 1342.56,1212.8 1343.15,1212.8 1343.74,1212.8 1344.32,1212.8 1344.91,1212.8 1345.5,1212.8 1346.08,1212.8 1346.67,1212.8 1347.26,1212.8 1347.84,1212.8 1348.43,1212.8 1349.01,1212.8 1349.6,1212.8 1350.19,1212.8 1350.77,1212.8 1351.36,1212.8 1351.95,1212.8 1352.53,1212.8 1353.12,1212.8 1353.71,1212.8 1354.29,1212.8 1354.88,1212.8 1355.47,1212.8 1356.05,1212.8 1356.64,1212.8 1357.22,1212.8 1357.81,1212.8 1358.4,1212.8 1358.98,1212.8 1359.57,1212.8 1360.16,1212.8 1360.74,1212.8 1361.33,1212.8 1361.92,1212.8 1362.5,1212.8 1363.09,1212.8 1363.68,1212.8 1364.26,1212.8 1364.85,1212.8 1365.43,1212.8 1366.02,1212.8 1366.61,1212.8 1367.19,1212.8 1367.78,1212.8 1368.37,1212.8 1368.95,1212.8 1369.54,1212.8 1370.13,1212.8 1370.71,1212.8 1371.3,1212.8 1371.88,1212.8 1372.47,1212.8 1373.06,1212.8 1373.64,1212.8 1374.23,1212.8 1374.82,1212.8 1375.4,1212.8 1375.99,1212.8 1376.58,1212.8 1377.16,1212.8 1377.75,1212.8 1378.34,1212.8 1378.92,1212.8 1379.51,1212.8 1380.09,1212.8 1380.68,1212.8 1381.27,1212.8 1381.85,1212.8 1382.44,1212.8 1383.03,1212.8 1383.61,1212.8 1384.2,1212.8 1384.79,1212.8 1385.37,1212.8 1385.96,1212.8 1386.55,1212.8 1387.13,1212.8 1387.72,1212.8 1388.3,1212.8 1388.89,1212.8 1389.48,1212.8 1390.06,1212.8 1390.65,1212.8 1391.24,1212.8 1391.82,1212.8 1392.41,1212.8 1393,1212.8 1393.58,1212.8 1394.17,1212.8 1394.75,1212.8 1395.34,1212.8 1395.93,1212.8 1396.51,1212.8 1397.1,1212.8 1397.69,1212.8 1398.27,1212.8 1398.86,1212.8 1399.45,1212.8 1400.03,1212.8 1400.62,1212.8 1401.21,1212.8 1401.79,1212.8 1402.38,1212.8 1402.96,1212.8 1403.55,1212.8 1404.14,1212.8 1404.72,1212.8 1405.31,1212.8 1405.9,1212.8 1406.48,1212.8 1407.07,1212.8 1407.66,1212.8 1408.24,1212.8 1408.83,1212.8 1409.42,1212.8 1410,1212.8 1410.59,1212.8 1411.17,1212.8 1411.76,1212.8 1412.35,1212.8 1412.93,1212.8 1413.52,1212.8 1414.11,1212.8 1414.69,1212.8 1415.28,1212.8 1415.87,1212.8 1416.45,1212.8 1417.04,1212.8 1417.63,1212.8 1418.21,1212.8 1418.8,1212.8 1419.38,1212.8 1419.97,1212.8 1420.56,1212.8 1421.14,1212.8 1421.73,1212.8 1422.32,1212.8 1422.9,1212.8 1423.49,1212.8 1424.08,1212.8 1424.66,1212.8 1425.25,1212.8 1425.83,1212.8 1426.42,1212.8 1427.01,1212.8 1427.59,1212.8 1428.18,1212.8 1428.77,1212.8 1429.35,1212.8 1429.94,1212.8 1430.53,1212.8 1431.11,1212.8 1431.7,1212.8 1432.29,1212.8 1432.87,1212.8 1433.46,1212.8 1434.04,1212.8 1434.63,1212.8 1435.22,1212.8 1435.8,1212.8 1436.39,1212.8 1436.98,1212.8 1437.56,1212.8 1438.15,1212.8 1438.74,1212.8 1439.32,1212.8 1439.91,1212.8 1440.5,1212.8 1441.08,1212.8 1441.67,1212.8 1442.25,1212.8 1442.84,1212.8 1443.43,1212.8 1444.01,1212.8 1444.6,1212.8 1445.19,1212.8 1445.77,1212.8 1446.36,1212.8 1446.95,1212.8 1447.53,1212.8 1448.12,1212.8 1448.7,1212.8 1449.29,1212.8 1449.88,1212.8 1450.46,1212.8 1451.05,1212.8 1451.64,1212.8 1452.22,1212.8 1452.81,1212.8 1453.4,1212.8 1453.98,1212.8 1454.57,1212.8 1455.16,1212.8 1455.74,1212.8 1456.33,1212.8 1456.91,1212.8 1457.5,1212.8 1458.09,1212.8 1458.67,1212.8 1459.26,1212.8 1459.85,1212.8 1460.43,1212.8 1461.02,1212.8 1461.61,1212.8 1462.19,1212.8 1462.78,1212.8 1463.37,1212.8 1463.95,1212.8 1464.54,1212.8 1465.12,1212.8 1465.71,1212.8 1466.3,1212.8 1466.88,1212.8 1467.47,1212.8 1468.06,1212.8 1468.64,1212.8 1469.23,1212.8 1469.82,1212.8 1470.4,1212.8 1470.99,1212.8 1471.57,1212.8 1472.16,1212.8 1472.75,1212.8 1473.33,1212.8 1473.92,1212.8 1474.51,1212.8 1475.09,1212.8 1475.68,1212.8 1476.27,1212.8 1476.85,1212.8 1477.44,1212.8 1478.03,1212.8 1478.61,1212.8 1479.2,1212.8 1479.78,1212.8 1480.37,1212.8 1480.96,1212.8 1481.54,1212.8 1482.13,1212.8 1482.72,1212.8 1483.3,1212.8 1483.89,1212.8 1484.48,1212.8 1485.06,1212.8 1485.65,1212.8 1486.24,1212.8 1486.82,1212.8 1487.41,1212.8 1487.99,1212.8 1488.58,1212.8 1489.17,1212.8 1489.75,1212.8 1490.34,1212.8 1490.93,1212.8 1491.51,1212.8 1492.1,1212.8 1492.69,1212.8 1493.27,1212.8 1493.86,1212.8 1494.45,1212.8 1495.03,1212.8 1495.62,1212.8 1496.2,1212.8 1496.79,1212.8 1497.38,1212.8 1497.96,1212.8 1498.55,1212.8 1499.14,1212.8 1499.72,1212.8 1500.31,1212.8 1500.9,1212.8 1501.48,1212.8 1502.07,1212.8 1502.65,1212.8 1503.24,1212.8 1503.83,1212.8 1504.41,1212.8 1505,1212.8 1505.59,1212.8 1506.17,1212.8 1506.76,1212.8 1507.35,1212.8 1507.93,1212.8 1508.52,1212.8 1509.11,1212.8 1509.69,1212.8 1510.28,1212.8 1510.86,1212.8 1511.45,1212.8 1512.04,1212.8 1512.62,1212.8 1513.21,1212.8 1513.8,1212.8 1514.38,1212.8 1514.97,1212.8 1515.56,1212.8 1516.14,1212.8 1516.73,1212.8 1517.32,1212.8 1517.9,1212.8 1518.49,1212.8 1519.07,1212.8 1519.66,1212.8 1520.25,1212.8 1520.83,1212.8 1521.42,1212.8 1522.01,1212.8 1522.59,1212.8 1523.18,1212.8 1523.77,1212.8 1524.35,1212.8 1524.94,1212.8 1525.52,1212.8 1526.11,1212.8 1526.7,1212.8 1527.28,1212.8 1527.87,1212.8 1528.46,1212.8 1529.04,1212.8 1529.63,1212.8 1530.22,1212.8 1530.8,1212.8 1531.39,1212.8 1531.98,1212.8 1532.56,1212.8 1533.15,1212.8 1533.73,1212.8 1534.32,1212.8 1534.91,1212.8 1535.49,1212.8 1536.08,1212.8 1536.67,1212.8 1537.25,1212.8 1537.84,1212.8 1538.43,1212.8 1539.01,1212.8 1539.6,1212.8 1540.19,1212.8 1540.77,1212.8 1541.36,1212.8 1541.94,1212.8 1542.53,1212.8 1543.12,1212.8 1543.7,1212.8 1544.29,1212.8 1544.88,1212.8 1545.46,1212.8 1546.05,1212.8 1546.64,1212.8 1547.22,1212.8 1547.81,1212.8 1548.4,1212.8 1548.98,1212.8 1549.57,1212.8 1550.15,1212.8 1550.74,1212.8 1551.33,1212.8 1551.91,1212.8 1552.5,1212.8 1553.09,1212.8 1553.67,1212.8 1554.26,1212.8 1554.85,1212.8 1555.43,1212.8 1556.02,1212.8 1556.6,1212.8 1557.19,1212.8 1557.78,1212.8 1558.36,1212.8 1558.95,1212.8 1559.54,1212.8 1560.12,1212.8 1560.71,1212.8 1561.3,1212.8 1561.88,1212.8 1562.47,1212.8 1563.06,1212.8 1563.64,1212.8 1564.23,1212.8 1564.81,1212.8 1565.4,1212.8 1565.99,1212.8 1566.57,1212.8 1567.16,1212.8 1567.75,1212.8 1568.33,1212.8 1568.92,1212.8 1569.51,1212.8 1570.09,1212.8 1570.68,1212.8 1571.27,1212.8 1571.85,1212.8 1572.44,1212.8 1573.02,1212.8 1573.61,1212.8 1574.2,1212.8 1574.78,1212.8 1575.37,1212.8 1575.96,1212.8 1576.54,1212.8 1577.13,1212.8 1577.72,1212.8 1578.3,1212.8 1578.89,1212.8 1579.47,1212.8 1580.06,1212.8 1580.65,1212.8 1581.23,1212.8 1581.82,1212.8 1582.41,1212.8 1582.99,1212.8 1583.58,1212.8 1584.17,1212.8 1584.75,1212.8 1585.34,1212.8 1585.93,1212.8 1586.51,1212.8 1587.1,1212.8 1587.68,1212.8 1588.27,1212.8 1588.86,1212.8 1589.44,1212.8 1590.03,1212.8 1590.62,1212.8 1591.2,1212.8 1591.79,1212.8 1592.38,1212.8 1592.96,1212.8 1593.55,1212.8 1594.14,1212.8 1594.72,1212.8 1595.31,1212.8 1595.89,1212.8 1596.48,1212.8 1597.07,1212.8 1597.65,1212.8 1598.24,1212.8 1598.83,1212.8 1599.41,1212.8 1600,1212.8 1600.59,1212.8 1601.17,1212.8 1601.76,1212.8 1602.34,1212.8 1602.93,1212.8 1603.52,1212.8 1604.1,1212.8 1604.69,1212.8 1605.28,1212.8 1605.86,1212.8 1606.45,1212.8 1607.04,1212.8 1607.62,1212.8 1608.21,1212.8 1608.8,1212.8 1609.38,1212.8 1609.97,1212.8 1610.55,1212.8 1611.14,1212.8 1611.73,1212.8 1612.31,1212.8 1612.9,1212.8 1613.49,1212.8 1614.07,1212.8 1614.66,1212.8 1615.25,1212.8 1615.83,1212.8 1616.42,1212.8 1617.01,1212.8 1617.59,1212.8 1618.18,1212.8 1618.76,1212.8 1619.35,1212.8 1619.94,1212.8 1620.52,1212.8 1621.11,1212.8 1621.7,1212.8 1622.28,1212.8 1622.87,1212.8 1623.46,1212.8 1624.04,1212.8 1624.63,1212.8 1625.22,1212.8 1625.8,1212.8 1626.39,1212.8 1626.97,1212.8 1627.56,1212.8 1628.15,1212.8 1628.73,1212.8 1629.32,1212.8 1629.91,1212.8 1630.49,1212.8 1631.08,1212.8 1631.67,1212.8 1632.25,1212.8 1632.84,1212.8 1633.42,1212.8 1634.01,1212.8 1634.6,1212.8 1635.18,1212.8 1635.77,1212.8 1636.36,1212.8 1636.94,1212.8 1637.53,1212.8 1638.12,1212.8 1638.7,1212.8 1639.29,1212.8 1639.88,1212.8 1640.46,1212.8 1641.05,1212.8 1641.63,1212.8 1642.22,1212.8 1642.81,1212.8 1643.39,1212.8 1643.98,1212.8 1644.57,1212.8 1645.15,1212.8 1645.74,1212.8 1646.33,1212.8 1646.91,1212.8 1647.5,1212.8 1648.09,1212.8 1648.67,1212.8 1649.26,1212.8 1649.84,1212.8 1650.43,1212.8 1651.02,1212.8 1651.6,1212.8 1652.19,1212.8 1652.78,1212.8 1653.36,1212.8 1653.95,1212.8 1654.54,1212.8 1655.12,1212.8 1655.71,1212.8 1656.29,1212.8 1656.88,1212.8 1657.47,1212.8 1658.05,1212.8 1658.64,1212.8 1659.23,1212.8 1659.81,1212.8 1660.4,1212.8 1660.99,1212.8 1661.57,1212.8 1662.16,1212.8 1662.75,1212.8 1663.33,1212.8 1663.92,1212.8 1664.5,1212.8 1665.09,1212.8 1665.68,1212.8 1666.26,1212.8 1666.85,1212.8 1667.44,1212.8 1668.02,1212.8 1668.61,1212.8 1669.2,1212.8 1669.78,1212.8 1670.37,1212.8 1670.96,1212.8 1671.54,1212.8 1672.13,1212.8 1672.71,1212.8 1673.3,1212.8 1673.89,1212.8 1674.47,1212.8 1675.06,1212.8 1675.65,1212.8 1676.23,1212.8 1676.82,1212.8 1677.41,1212.8 1677.99,1212.8 1678.58,1212.8 1679.17,1212.8 1679.75,1212.8 1680.34,1212.8 1680.92,1212.8 1681.51,1212.8 1682.1,1212.8 1682.68,1212.8 1683.27,1212.8 1683.86,1212.8 1684.44,1212.8 1685.03,1212.8 1685.62,1212.8 1686.2,1212.8 1686.79,1212.8 1687.37,1212.8 1687.96,1212.8 1688.55,1212.8 1689.13,1212.8 1689.72,1212.8 1690.31,1212.8 1690.89,1212.8 1691.48,1212.8 1692.07,1212.8 1692.65,1212.8 1693.24,1212.8 1693.83,1212.8 1694.41,1212.8 1695,1212.8 1695.58,1212.8 1696.17,1212.8 1696.76,1212.8 1697.34,1212.8 1697.93,1212.8 1698.52,1212.8 1699.1,1212.8 1699.69,1212.8 1700.28,1212.8 1700.86,1212.8 1701.45,1212.8 1702.04,1212.8 1702.62,1212.8 1703.21,1212.8 1703.79,1212.8 1704.38,1212.8 1704.97,1212.8 1705.55,1212.8 1706.14,1212.8 1706.73,1212.8 1707.31,1212.8 1707.9,1212.8 1708.49,1212.8 1709.07,1212.8 1709.66,1212.8 1710.24,1212.8 1710.83,1212.8 1711.42,1212.8 1712,1212.8 1712.59,1212.8 1713.18,1212.8 1713.76,1212.8 1714.35,1212.8 1714.94,1212.8 1715.52,1212.8 1716.11,1212.8 1716.7,1212.8 1717.28,1212.8 1717.87,1212.8 1718.45,1212.8 1719.04,1212.8 1719.63,1212.8 1720.21,1212.8 1720.8,1212.8 1721.39,1212.8 1721.97,1212.8 1722.56,1212.8 1723.15,1212.8 1723.73,1212.8 1724.32,1212.8 1724.91,1212.8 1725.49,1212.8 1726.08,1212.8 1726.66,1212.8 1727.25,1212.8 1727.84,1212.8 1728.42,1212.8 1729.01,1212.8 1729.6,1212.8 1730.18,1212.8 1730.77,1212.8 1731.36,1212.8 1731.94,1212.8 1732.53,1212.8 1733.11,1212.8 1733.7,1212.8 1734.29,1212.8 1734.87,1212.8 1735.46,1212.8 1736.05,1212.8 1736.63,1212.8 1737.22,1212.8 1737.81,1212.8 1738.39,1212.8 1738.98,1212.8 1739.57,1212.8 1740.15,1212.8 1740.74,1212.8 1741.32,1212.8 1741.91,1212.8 1742.5,1212.8 1743.08,1212.8 1743.67,1212.8 1744.26,1212.8 1744.84,1212.8 1745.43,1212.8 1746.02,1212.8 1746.6,1212.8 1747.19,1212.8 1747.78,1212.8 1748.36,1212.8 1748.95,1212.8 1749.53,1212.8 1750.12,1212.8 1750.71,1212.8 1751.29,1212.8 1751.88,1212.8 1752.47,1212.8 1753.05,1212.8 1753.64,1212.8 1754.23,1212.8 1754.81,1212.8 1755.4,1212.8 1755.99,1212.8 1756.57,1212.8 1757.16,1212.8 1757.74,1212.8 1758.33,1212.8 1758.92,1212.8 1759.5,1212.8 1760.09,1212.8 1760.68,1212.8 1761.26,1212.8 1761.85,1212.8 1762.44,1212.8 1763.02,1212.8 1763.61,1212.8 1764.19,1212.8 1764.78,1212.8 1765.37,1212.8 1765.95,1212.8 1766.54,1212.8 1767.13,1212.8 1767.71,1212.8 1768.3,1212.8 1768.89,1212.8 1769.47,1212.8 1770.06,1212.8 1770.65,1212.8 1771.23,1212.8 1771.82,1212.8 1772.4,1212.8 1772.99,1212.8 1773.58,1212.8 1774.16,1212.8 1774.75,1212.8 1775.34,1212.8 1775.92,1212.8 1776.51,1212.8 1777.1,1212.8 1777.68,1212.8 1778.27,1212.8 1778.86,1212.8 1779.44,1212.8 1780.03,1212.8 1780.61,1212.8 1781.2,1212.8 1781.79,1212.8 1782.37,1212.8 1782.96,1212.8 1783.55,1212.8 1784.13,1212.8 1784.72,1212.8 1785.31,1212.8 1785.89,1212.8 1786.48,1212.8 1787.06,1212.8 1787.65,1212.8 1788.24,1212.8 1788.82,1212.8 1789.41,1212.8 1790,1212.8 1790.58,1212.8 1791.17,1212.8 1791.76,1212.8 1792.34,1212.8 1792.93,1212.8 1793.52,1212.8 1794.1,1212.8 1794.69,1212.8 1795.27,1212.8 1795.86,1212.8 1796.45,1212.8 1797.03,1212.8 1797.62,1212.8 1798.21,1212.8 1798.79,1212.8 1799.38,1212.8 1799.97,1212.8 1800.55,1212.8 1801.14,1212.8 1801.73,1212.8 1802.31,1212.8 1802.9,1212.8 1803.48,1212.8 1804.07,1212.8 1804.66,1212.8 1805.24,1212.8 1805.83,1212.8 1806.42,1212.8 1807,1212.8 1807.59,1212.8 1808.18,1212.8 1808.76,1212.8 1809.35,1212.8 1809.94,1212.8 1810.52,1212.8 1811.11,1212.8 1811.69,1212.8 1812.28,1212.8 1812.87,1212.8 1813.45,1212.8 1814.04,1212.8 1814.63,1212.8 1815.21,1212.8 1815.8,1212.8 1816.39,1212.8 1816.97,1212.8 1817.56,1212.8 1818.14,1212.8 1818.73,1212.8 1819.32,1212.8 1819.9,1212.8 1820.49,1212.8 1821.08,1212.8 1821.66,1212.8 1822.25,1212.8 1822.84,1212.8 1823.42,1212.8 1824.01,1212.8 1824.6,1212.8 1825.18,1212.8 1825.77,1212.8 1826.35,1212.8 1826.94,1212.8 1827.53,1212.8 1828.11,1212.8 1828.7,1212.8 1829.29,1212.8 1829.87,1212.8 1830.46,1212.8 1831.05,1212.8 1831.63,1212.8 1832.22,1212.8 1832.81,1212.8 1833.39,1212.8 1833.98,1212.8 1834.56,1212.8 1835.15,1212.8 1835.74,1212.8 1836.32,1212.8 1836.91,1212.8 1837.5,1212.8 1838.08,1212.8 1838.67,1212.8 1839.26,1212.8 1839.84,1212.8 1840.43,1212.8 1841.01,1212.8 1841.6,1212.8 1842.19,1212.8 1842.77,1212.8 1843.36,1212.8 1843.95,1212.8 1844.53,1212.8 1845.12,1212.8 1845.71,1212.8 1846.29,1212.8 1846.88,1212.8 1847.47,1212.8 1848.05,1212.8 1848.64,1212.8 1849.22,1212.8 1849.81,1212.8 1850.4,1212.8 1850.98,1212.8 1851.57,1212.8 1852.16,1212.8 1852.74,1212.8 1853.33,1212.8 1853.92,1212.8 1854.5,1212.8 1855.09,1212.8 1855.68,1212.8 1856.26,1212.8 1856.85,1212.8 1857.43,1212.8 1858.02,1212.8 1858.61,1212.8 1859.19,1212.8 1859.78,1212.8 1860.37,1212.8 1860.95,1212.8 1861.54,1212.8 1862.13,1212.8 1862.71,1212.8 1863.3,1212.8 1863.88,1212.8 1864.47,1212.8 1865.06,1212.8 1865.64,1212.8 1866.23,1212.8 1866.82,1212.8 1867.4,1212.8 1867.99,1212.8 1868.58,1212.8 1869.16,1212.8 1869.75,1212.8 1870.34,1212.8 1870.92,1212.8 1871.51,1212.8 1872.09,1212.8 1872.68,1212.8 1873.27,1212.8 1873.85,1212.8 1874.44,1212.8 1875.03,1212.8 1875.61,1212.8 1876.2,1212.8 1876.79,1212.8 1877.37,1212.8 1877.96,1212.8 1878.55,1212.8 1879.13,1212.8 1879.72,1212.8 1880.3,1212.8 1880.89,1212.8 1881.48,1212.8 1882.06,1212.8 1882.65,1212.8 1883.24,1212.8 1883.82,1212.8 1884.41,1212.8 1885,1212.8 1885.58,1212.8 1886.17,1212.8 1886.76,1212.8 1887.34,1212.8 1887.93,1212.8 1888.51,1212.8 1889.1,1212.8 1889.69,1212.8 1890.27,1212.8 1890.86,1212.8 1891.45,1212.8 1892.03,1212.8 1892.62,1212.8 1893.21,1212.8 1893.79,1212.8 1894.38,1212.8 1894.96,1212.8 1895.55,1212.8 1896.14,1212.8 1896.72,1212.8 1897.31,1212.8 1897.9,1212.8 1898.48,1212.8 1899.07,1212.8 1899.66,1212.8 1900.24,1212.8 1900.83,1212.8 1901.42,1212.8 1902,1212.8 1902.59,1212.8 1903.17,1212.8 1903.76,1212.8 1904.35,1212.8 1904.93,1212.8 1905.52,1212.8 1906.11,1212.8 1906.69,1212.8 1907.28,1212.8 1907.87,1212.8 1908.45,1212.8 1909.04,1212.8 1909.63,1212.8 1910.21,1212.8 1910.8,1212.8 1911.38,1212.8 1911.97,1212.8 1912.56,1212.8 1913.14,1212.8 1913.73,1212.8 1914.32,1212.8 1914.9,1212.8 1915.49,1212.8 1916.08,1212.8 1916.66,1212.8 1917.25,1212.8 1917.83,1212.8 1918.42,1212.8 1919.01,1212.8 1919.59,1212.8 1920.18,1212.8 1920.77,1212.8 1921.35,1212.8 1921.94,1212.8 1922.53,1212.8 1923.11,1212.8 1923.7,1212.8 1924.29,1212.8 1924.87,1212.8 1925.46,1212.8 1926.04,1212.8 1926.63,1212.8 1927.22,1212.8 1927.8,1212.8 1928.39,1212.8 1928.98,1212.8 1929.56,1212.8 1930.15,1212.8 1930.74,1212.8 1931.32,1212.8 1931.91,1212.8 1932.5,1212.8 1933.08,1212.8 1933.67,1212.8 1934.25,1212.8 1934.84,1212.8 1935.43,1212.8 1936.01,1212.8 1936.6,1212.8 1937.19,1212.8 1937.77,1212.8 1938.36,1212.8 1938.95,1212.8 1939.53,1212.8 1940.12,1212.8 1940.71,1212.8 1941.29,1212.8 1941.88,1212.8 1942.46,1212.8 1943.05,1212.8 1943.64,1212.8 1944.22,1212.8 1944.81,1212.8 1945.4,1212.8 1945.98,1212.8 1946.57,1212.8 1947.16,1212.8 1947.74,1212.8 1948.33,1212.8 1948.91,1212.8 1949.5,1212.8 1950.09,1212.8 1950.67,1212.8 1951.26,1212.8 1951.85,1212.8 1952.43,1212.8 1953.02,1212.8 1953.61,1212.8 1954.19,1212.8 1954.78,1212.8 1955.37,1212.8 1955.95,1212.8 1956.54,1212.8 1957.12,1212.8 1957.71,1212.8 1958.3,1212.8 1958.88,1212.8 1959.47,1212.8 1960.06,1212.8 1960.64,1212.8 1961.23,1212.8 1961.82,1212.8 1962.4,1212.8 1962.99,1212.8 1963.58,1212.8 1964.16,1212.8 1964.75,1212.8 1965.33,1212.8 1965.92,1212.8 1966.51,1212.8 1967.09,1212.8 1967.68,1212.8 1968.27,1212.8 1968.85,1212.8 1969.44,1212.8 1970.03,1212.8 1970.61,1212.8 1971.2,1212.8 1971.78,1212.8 1972.37,1212.8 1972.96,1212.8 1973.54,1212.8 1974.13,1212.8 1974.72,1212.8 1975.3,1212.8 1975.89,1212.8 1976.48,1212.8 1977.06,1212.8 1977.65,1212.8 1978.24,1212.8 1978.82,1212.8 1979.41,1212.8 1979.99,1212.8 1980.58,1212.8 1981.17,1212.8 1981.75,1212.8 1982.34,1212.8 1982.93,1212.8 1983.51,1212.8 1984.1,1212.8 1984.69,1212.8 1985.27,1212.8 1985.86,1212.8 1986.45,1212.8 1987.03,1212.8 1987.62,1212.8 1988.2,1212.8 1988.79,1212.8 1989.38,1212.8 1989.96,1212.8 1990.55,1212.8 1991.14,1212.8 1991.72,1212.8 1992.31,1212.8 1992.9,1212.8 1993.48,1212.8 1994.07,1212.8 1994.65,1212.8 1995.24,1212.8 1995.83,1212.8 1996.41,1212.8 1997,1212.8 1997.59,1212.8 1998.17,1212.8 1998.76,1212.8 1999.35,1212.8 1999.93,1212.8 2000.52,1212.8 2001.11,1212.8 2001.69,1212.8 2002.28,1212.8 2002.86,1212.8 2003.45,1212.8 2004.04,1212.8 2004.62,1212.8 2005.21,1212.8 2005.8,1212.8 2006.38,1212.8 2006.97,1212.8 2007.56,1212.8 2008.14,1212.8 2008.73,1212.8 2009.32,1212.8 2009.9,1212.8 2010.49,1212.8 2011.07,1212.8 2011.66,1212.8 2012.25,1212.8 2012.83,1212.8 2013.42,1212.8 2014.01,1212.8 2014.59,1212.8 2015.18,1212.8 2015.77,1212.8 2016.35,1212.8 2016.94,1212.8 2017.53,1212.8 2018.11,1212.8 2018.7,1212.8 2019.28,1212.8 2019.87,1212.8 2020.46,1212.8 2021.04,1212.8 2021.63,1212.8 2022.22,1212.8 2022.8,1212.8 2023.39,1212.8 2023.98,1212.8 2024.56,1212.8 2025.15,1212.8 2025.73,1212.8 2026.32,1212.8 2026.91,1212.8 2027.49,1212.8 2028.08,1212.8 2028.67,1212.8 2029.25,1212.8 2029.84,1212.8 2030.43,1212.8 2031.01,1212.8 2031.6,1212.8 2032.19,1212.8 2032.77,1212.8 2033.36,1212.8 2033.94,1212.8 2034.53,1212.8 2035.12,1212.8 2035.7,1212.8 2036.29,1212.8 2036.88,1212.8 2037.46,1212.8 2038.05,1212.8 2038.64,1212.8 2039.22,1212.8 2039.81,1212.8 2040.4,1212.8 2040.98,1212.8 2041.57,1212.8 2042.15,1212.8 2042.74,1212.8 2043.33,1212.8 2043.91,1212.8 2044.5,1212.8 2045.09,1212.8 2045.67,1212.8 2046.26,1212.8 2046.85,1212.8 2047.43,1212.8 2048.02,1212.8 2048.6,1212.8 2049.19,1212.8 2049.78,1212.8 2050.36,1212.8 2050.95,1212.8 2051.54,1212.8 2052.12,1212.8 2052.71,1212.8 2053.3,1212.8 2053.88,1212.8 2054.47,1212.8 2055.06,1212.8 2055.64,1212.8 2056.23,1212.8 2056.81,1212.8 2057.4,1212.8 2057.99,1212.8 2058.57,1212.8 2059.16,1212.8 2059.75,1212.8 2060.33,1212.8 2060.92,1212.8 2061.51,1212.8 2062.09,1212.8 2062.68,1212.8 2063.27,1212.8 2063.85,1212.8 2064.44,1212.8 2065.02,1212.8 2065.61,1212.8 2066.2,1212.8 2066.78,1212.8 2067.37,1212.8 2067.96,1212.8 2068.54,1212.8 2069.13,1212.8 2069.72,1212.8 2070.3,1212.8 2070.89,1212.8 2071.48,1212.8 2072.06,1212.8 2072.65,1212.8 2073.23,1212.8 2073.82,1212.8 2074.41,1212.8 2074.99,1212.8 2075.58,1212.8 2076.17,1212.8 2076.75,1212.8 2077.34,1212.8 2077.93,1212.8 2078.51,1212.8 2079.1,1212.8 2079.68,1212.8 2080.27,1212.8 2080.86,1212.8 2081.44,1212.8 2082.03,1212.8 2082.62,1212.8 2083.2,1212.8 2083.79,1212.8 2084.38,1212.8 2084.96,1212.8 2085.55,1212.8 2086.14,1212.8 2086.72,1212.8 2087.31,1212.8 2087.89,1212.8 2088.48,1212.8 2089.07,1212.8 2089.65,1212.8 2090.24,1212.8 2090.83,1212.8 2091.41,1212.8 2092,1212.8 2092.59,1212.8 2093.17,1212.8 2093.76,1212.8 2094.35,1212.8 2094.93,1212.8 2095.52,1212.8 2096.1,1212.8 2096.69,1212.8 2097.28,1212.8 2097.86,1212.8 2098.45,1212.8 2099.04,1212.8 2099.62,1212.8 2100.21,1212.8 2100.8,1212.8 2101.38,1212.8 2101.97,1212.8 2102.55,1212.8 2103.14,1212.8 2103.73,1212.8 2104.31,1212.8 2104.9,1212.8 2105.49,1212.8 2106.07,1212.8 2106.66,1212.8 2107.25,1212.8 2107.83,1212.8 2108.42,1212.8 2109.01,1212.8 2109.59,1212.8 2110.18,1212.8 2110.76,1212.8 2111.35,1212.8 2111.94,1212.8 2112.52,1212.8 2113.11,1212.8 2113.7,1212.8 2114.28,1212.8 2114.87,1212.8 2115.46,1212.8 2116.04,1212.8 2116.63,1212.8 2117.22,1212.8 2117.8,1212.8 2118.39,1212.8 2118.97,1212.8 2119.56,1212.8 2120.15,1212.8 2120.73,1212.8 2121.32,1212.8 2121.91,1212.8 2122.49,1212.8 2123.08,1212.8 2123.67,1212.8 2124.25,1212.8 2124.84,1212.8 2125.42,1212.8 2126.01,1212.8 2126.6,1212.8 2127.18,1212.8 2127.77,1212.8 2128.36,1212.8 2128.94,1212.8 2129.53,1212.8 2130.12,1212.8 2130.7,1212.8 2131.29,1212.8 2131.88,1212.8 2132.46,1212.8 2133.05,1212.8 2133.63,1212.8 2134.22,1212.8 2134.81,1212.8 2135.39,1212.8 2135.98,1212.8 2136.57,1212.8 2137.15,1212.8 2137.74,1212.8 2138.33,1212.8 2138.91,1212.8 2139.5,1212.8 2140.09,1212.8 2140.67,1212.8 2141.26,1212.8 2141.84,1212.8 2142.43,1212.8 2143.02,1212.8 2143.6,1212.8 2144.19,1212.8 2144.78,1212.8 2145.36,1212.8 2145.95,1212.8 2146.54,1212.8 2147.12,1212.8 2147.71,1212.8 2148.3,1212.8 2148.88,1212.8 2149.47,1212.8 2150.05,1212.8 2150.64,1212.8 2151.23,1212.8 2151.81,1212.8 2152.4,1212.8 2152.99,1212.8 2153.57,1212.8 2154.16,1212.8 2154.75,1212.8 2155.33,1212.8 2155.92,1212.8 2156.5,1212.8 2157.09,1212.8 2157.68,1212.8 2158.26,1212.8 \"/>\n<path clip-path=\"url(#clip692)\" d=\"M986.025 1212.65 L986.612 1212.65 L987.198 1212.65 L987.785 1212.65 L988.371 1212.65 L988.957 1212.65 L989.544 1212.65 L990.13 1212.65 L990.717 1212.65 L991.303 1212.65 L991.889 1212.65 L992.476 1212.65 L993.062 1212.65 L993.649 1212.65 L994.235 1212.65 L994.822 1212.65 L995.408 1212.65 L995.994 1212.65 L996.581 1212.65 L997.167 1212.65 L997.754 1212.65 L998.34 1212.65 L998.926 1212.65 L999.513 1212.65 L1000.1 1212.65 L1000.69 1212.65 L1001.27 1212.65 L1001.86 1212.65 L1002.44 1212.65 L1003.03 1212.65 L1003.62 1212.65 L1004.2 1212.65 L1004.79 1212.65 L1005.38 1212.65 L1005.96 1212.65 L1006.55 1212.65 L1007.14 1212.65 L1007.72 1212.65 L1008.31 1212.65 L1008.9 1212.65 L1009.48 1212.65 L1010.07 1212.65 L1010.65 1212.65 L1011.24 1212.65 L1011.83 1212.65 L1012.41 1212.65 L1013 1212.65 L1013.59 1212.65 L1014.17 1212.65 L1014.76 1212.65 L1015.35 1212.65 L1015.93 1212.65 L1016.52 1212.65 L1017.11 1212.65 L1017.69 1212.65 L1018.28 1212.65 L1018.86 1212.65 L1019.45 1212.65 L1020.04 1212.65 L1020.62 1212.65 L1021.21 1212.65 L1021.8 1212.65 L1022.38 1212.65 L1022.97 1212.65 L1023.56 1212.65 L1024.14 1212.65 L1024.73 1212.65 L1025.32 1212.65 L1025.9 1212.65 L1026.49 1212.65 L1027.07 1212.65 L1027.66 1212.65 L1028.25 1212.65 L1028.83 1212.65 L1029.42 1212.65 L1030.01 1212.65 L1030.59 1212.65 L1031.18 1212.65 L1031.77 1212.65 L1032.35 1212.65 L1032.94 1212.65 L1033.52 1212.65 L1034.11 1212.65 L1034.7 1212.65 L1035.28 1212.65 L1035.87 1212.65 L1036.46 1212.65 L1037.04 1212.65 L1037.63 1212.65 L1038.22 1212.65 L1038.8 1212.65 L1039.39 1212.65 L1039.98 1212.65 L1040.56 1212.65 L1041.15 1212.65 L1041.73 1212.65 L1042.32 1212.65 L1042.91 1212.65 L1043.49 1212.65 L1044.08 1212.65 L1044.67 1212.65 L1045.25 1212.65 L1045.84 1212.65 L1046.43 1212.65 L1047.01 1212.65 L1047.6 1212.65 L1048.19 1212.65 L1048.77 1212.65 L1049.36 1212.65 L1049.94 1212.65 L1050.53 1212.65 L1051.12 1212.65 L1051.7 1212.65 L1052.29 1212.65 L1052.88 1212.65 L1053.46 1212.65 L1054.05 1212.65 L1054.64 1212.65 L1055.22 1212.65 L1055.81 1212.65 L1056.39 1212.65 L1056.98 1212.65 L1057.57 1212.65 L1058.15 1212.65 L1058.74 1212.65 L1059.33 1212.65 L1059.91 1212.65 L1060.5 1212.65 L1061.09 1212.65 L1061.67 1212.65 L1062.26 1212.65 L1062.85 1212.65 L1063.43 1212.65 L1064.02 1212.65 L1064.6 1212.65 L1065.19 1212.65 L1065.78 1212.65 L1066.36 1212.65 L1066.95 1212.65 L1067.54 1212.65 L1068.12 1212.65 L1068.71 1212.65 L1069.3 1212.65 L1069.88 1212.65 L1070.47 1212.65 L1071.06 1212.65 L1071.64 1212.65 L1072.23 1212.65 L1072.81 1212.65 L1073.4 1212.65 L1073.99 1212.65 L1074.57 1212.65 L1075.16 1212.65 L1075.75 1212.65 L1076.33 1212.65 L1076.92 1212.65 L1077.51 1212.65 L1078.09 1212.65 L1078.68 1212.65 L1079.26 1212.65 L1079.85 1212.65 L1080.44 1212.65 L1081.02 1212.65 L1081.61 1212.65 L1082.2 1212.65 L1082.78 1212.65 L1083.37 1212.65 L1083.96 1212.65 L1084.54 1212.65 L1085.13 1212.65 L1085.72 1212.65 L1086.3 1212.65 L1086.89 1212.65 L1087.47 1212.65 L1088.06 1212.65 L1088.65 1212.65 L1089.23 1212.65 L1089.82 1212.65 L1090.41 1212.65 L1090.99 1212.65 L1091.58 1212.65 L1092.17 1212.65 L1092.75 1212.65 L1093.34 1212.65 L1093.93 1212.65 L1094.51 1212.65 L1095.1 1212.65 L1095.68 1212.65 L1096.27 1212.65 L1096.86 1212.65 L1097.44 1212.65 L1098.03 1212.65 L1098.62 1212.65 L1099.2 1212.65 L1099.79 1212.65 L1100.38 1212.65 L1100.96 1212.65 L1101.55 1212.65 L1102.14 1212.65 L1102.72 1212.65 L1103.31 1212.65 L1103.89 1212.65 L1104.48 1212.65 L1105.07 1212.65 L1105.65 1212.65 L1106.24 1212.65 L1106.83 1212.65 L1107.41 1212.65 L1108 1212.65 L1108.59 1212.65 L1109.17 1212.65 L1109.76 1212.65 L1110.34 1212.65 L1110.93 1212.65 L1111.52 1212.65 L1112.1 1212.65 L1112.69 1212.65 L1113.28 1212.65 L1113.86 1212.65 L1114.45 1212.65 L1115.04 1212.65 L1115.62 1212.65 L1116.21 1212.65 L1116.8 1212.65 L1117.38 1212.65 L1117.97 1212.65 L1118.55 1212.65 L1119.14 1212.65 L1119.73 1212.65 L1120.31 1212.65 L1120.9 1212.65 L1121.49 1212.65 L1122.07 1212.65 L1122.66 1212.65 L1123.25 1212.65 L1123.83 1212.65 L1124.42 1212.65 L1125.01 1212.65 L1125.59 1212.65 L1126.18 1212.65 L1126.76 1212.65 L1127.35 1212.65 L1127.94 1212.65 L1128.52 1212.65 L1129.11 1212.65 L1129.7 1212.65 L1130.28 1212.65 L1130.87 1212.65 L1131.46 1212.65 L1132.04 1212.65 L1132.63 1212.65 L1133.21 1212.65 L1133.8 1212.65 L1134.39 1212.65 L1134.97 1212.65 L1135.56 1212.65 L1136.15 1212.65 L1136.73 1212.65 L1137.32 1212.65 L1137.91 1212.65 L1138.49 1212.65 L1139.08 1212.65 L1139.67 1212.65 L1140.25 1212.65 L1140.84 1212.65 L1141.42 1212.65 L1142.01 1212.65 L1142.6 1212.65 L1143.18 1212.65 L1143.77 1212.65 L1144.36 1212.65 L1144.94 1212.65 L1145.53 1212.65 L1146.12 1212.65 L1146.7 1212.65 L1147.29 1212.65 L1147.88 1212.65 L1148.46 1212.65 L1149.05 1212.65 L1149.63 1212.65 L1150.22 1212.65 L1150.81 1212.65 L1151.39 1212.65 L1151.98 1212.65 L1152.57 1212.65 L1153.15 1212.65 L1153.74 1212.65 L1154.33 1212.65 L1154.91 1212.65 L1155.5 1212.65 L1156.09 1212.65 L1156.67 1212.65 L1157.26 1212.65 L1157.84 1212.65 L1158.43 1212.65 L1159.02 1212.65 L1159.6 1212.65 L1160.19 1212.65 L1160.78 1212.65 L1161.36 1212.65 L1161.95 1212.65 L1162.54 1212.65 L1163.12 1212.65 L1163.71 1212.65 L1164.29 1212.65 L1164.88 1212.65 L1165.47 1212.65 L1166.05 1212.65 L1166.64 1212.65 L1167.23 1212.65 L1167.81 1212.65 L1168.4 1212.65 L1168.99 1212.65 L1169.57 1212.65 L1170.16 1212.65 L1170.75 1212.65 L1171.33 1212.65 L1171.92 1212.65 L1172.5 1212.65 L1173.09 1212.65 L1173.68 1212.65 L1174.26 1212.65 L1174.85 1212.65 L1175.44 1212.65 L1176.02 1212.65 L1176.61 1212.65 L1177.2 1212.65 L1177.78 1212.65 L1178.37 1212.65 L1178.96 1212.65 L1179.54 1212.65 L1180.13 1212.65 L1180.71 1212.65 L1181.3 1212.65 L1181.89 1212.65 L1182.47 1212.65 L1183.06 1212.65 L1183.65 1212.65 L1184.23 1212.65 L1184.82 1212.65 L1185.41 1212.65 L1185.99 1212.65 L1186.58 1212.65 L1187.16 1212.65 L1187.75 1212.65 L1188.34 1212.65 L1188.92 1212.65 L1189.51 1212.65 L1190.1 1212.65 L1190.68 1212.65 L1191.27 1212.65 L1191.86 1212.65 L1192.44 1212.65 L1193.03 1212.65 L1193.62 1212.65 L1194.2 1212.65 L1194.79 1212.65 L1195.37 1212.65 L1195.96 1212.65 L1196.55 1212.65 L1197.13 1212.65 L1197.72 1212.65 L1198.31 1212.65 L1198.89 1212.65 L1199.48 1212.65 L1200.07 1212.65 L1200.65 1212.65 L1201.24 1212.65 L1201.83 1212.65 L1202.41 1212.65 L1203 1212.65 L1203.58 1212.65 L1204.17 1212.65 L1204.76 1212.65 L1205.34 1212.65 L1205.93 1212.65 L1206.52 1212.65 L1207.1 1212.65 L1207.69 1212.65 L1208.28 1212.65 L1208.86 1212.65 L1209.45 1212.65 L1210.03 1212.65 L1210.62 1212.65 L1211.21 1212.65 L1211.79 1212.65 L1212.38 1212.65 L1212.97 1212.65 L1213.55 1212.65 L1214.14 1212.65 L1214.73 1212.65 L1215.31 1212.65 L1215.9 1212.65 L1216.49 1212.65 L1217.07 1212.65 L1217.66 1212.65 L1218.24 1212.65 L1218.83 1212.65 L1219.42 1212.65 L1220 1212.65 L1220.59 1212.65 L1221.18 1212.65 L1221.76 1212.65 L1222.35 1212.65 L1222.94 1212.65 L1223.52 1212.65 L1224.11 1212.65 L1224.7 1212.65 L1225.28 1212.65 L1225.87 1212.65 L1226.45 1212.65 L1227.04 1212.65 L1227.63 1212.65 L1228.21 1212.65 L1228.8 1212.65 L1229.39 1212.65 L1229.97 1212.65 L1230.56 1212.65 L1231.15 1212.65 L1231.73 1212.65 L1232.32 1212.65 L1232.91 1212.65 L1233.49 1212.65 L1234.08 1212.65 L1234.66 1212.65 L1235.25 1212.65 L1235.84 1212.65 L1236.42 1212.65 L1237.01 1212.65 L1237.6 1212.65 L1238.18 1212.65 L1238.77 1212.65 L1239.36 1212.65 L1239.94 1212.65 L1240.53 1212.65 L1241.11 1212.65 L1241.7 1212.65 L1242.29 1212.65 L1242.87 1212.65 L1243.46 1212.65 L1244.05 1212.65 L1244.63 1212.65 L1245.22 1212.65 L1245.81 1212.65 L1246.39 1212.65 L1246.98 1212.65 L1247.57 1212.65 L1248.15 1212.65 L1248.74 1212.65 L1249.32 1212.65 L1249.91 1212.65 L1250.5 1212.65 L1251.08 1212.65 L1251.67 1212.65 L1252.26 1212.65 L1252.84 1212.65 L1253.43 1212.65 L1254.02 1212.65 L1254.6 1212.65 L1255.19 1212.65 L1255.78 1212.65 L1256.36 1212.65 L1256.95 1212.65 L1257.53 1212.65 L1258.12 1212.65 L1258.71 1212.65 L1259.29 1212.65 L1259.88 1212.65 L1260.47 1212.65 L1261.05 1212.65 L1261.64 1212.65 L1262.23 1212.65 L1262.81 1212.65 L1263.4 1212.65 L1263.98 1212.65 L1264.57 1212.65 L1265.16 1212.65 L1265.74 1212.65 L1266.33 1212.65 L1266.92 1212.65 L1267.5 1212.65 L1268.09 1212.65 L1268.68 1212.65 L1269.26 1212.65 L1269.85 1212.65 L1270.44 1212.65 L1271.02 1212.65 L1271.61 1212.65 L1272.19 1212.65 L1272.78 1212.65 L1273.37 1212.65 L1273.95 1212.65 L1274.54 1212.65 L1275.13 1212.65 L1275.71 1212.65 L1276.3 1212.65 L1276.89 1212.65 L1277.47 1212.65 L1278.06 1212.65 L1278.65 1212.65 L1279.23 1212.65 L1279.82 1212.65 L1280.4 1212.65 L1280.99 1212.65 L1281.58 1212.65 L1282.16 1212.65 L1282.75 1212.65 L1283.34 1212.65 L1283.92 1212.65 L1284.51 1212.65 L1285.1 1212.65 L1285.68 1212.65 L1286.27 1212.65 L1286.86 1212.65 L1287.44 1212.65 L1288.03 1212.65 L1288.61 1212.65 L1289.2 1212.65 L1289.79 1212.65 L1290.37 1212.65 L1290.96 1212.65 L1291.55 1212.65 L1292.13 1212.65 L1292.72 1212.65 L1293.31 1212.65 L1293.89 1212.65 L1294.48 1212.65 L1295.06 1212.65 L1295.65 1212.65 L1296.24 1212.65 L1296.82 1212.65 L1297.41 1212.65 L1298 1212.65 L1298.58 1212.65 L1299.17 1212.65 L1299.76 1212.65 L1300.34 1212.65 L1300.93 1212.65 L1301.52 1212.65 L1302.1 1212.65 L1302.69 1212.65 L1303.27 1212.65 L1303.86 1212.65 L1304.45 1212.65 L1305.03 1212.65 L1305.62 1212.65 L1306.21 1212.65 L1306.79 1212.65 L1307.38 1212.65 L1307.97 1212.65 L1308.55 1212.65 L1309.14 1212.65 L1309.73 1212.65 L1310.31 1212.65 L1310.9 1212.65 L1311.48 1212.65 L1312.07 1212.65 L1312.66 1212.65 L1313.24 1212.65 L1313.83 1212.65 L1314.42 1212.65 L1315 1212.65 L1315.59 1212.65 L1316.18 1212.65 L1316.76 1212.65 L1317.35 1212.65 L1317.93 1212.65 L1318.52 1212.65 L1319.11 1212.65 L1319.69 1212.65 L1320.28 1212.65 L1320.87 1212.65 L1321.45 1212.65 L1322.04 1212.65 L1322.63 1212.65 L1323.21 1212.65 L1323.8 1212.65 L1324.39 1212.65 L1324.97 1212.65 L1325.56 1212.65 L1326.14 1212.65 L1326.73 1212.65 L1327.32 1212.65 L1327.9 1212.65 L1328.49 1212.65 L1329.08 1212.65 L1329.66 1212.65 L1330.25 1212.65 L1330.84 1212.65 L1331.42 1212.65 L1332.01 1212.65 L1332.6 1212.65 L1333.18 1212.65 L1333.77 1212.65 L1334.35 1212.65 L1334.94 1212.65 L1335.53 1212.65 L1336.11 1212.65 L1336.7 1212.65 L1337.29 1212.65 L1337.87 1212.65 L1338.46 1212.65 L1339.05 1212.65 L1339.63 1212.65 L1340.22 1212.65 L1340.8 1212.65 L1341.39 1212.65 L1341.98 1212.65 L1342.56 1212.65 L1343.15 1212.65 L1343.74 1212.65 L1344.32 1212.65 L1344.91 1212.65 L1345.5 1212.65 L1346.08 1212.65 L1346.67 1212.65 L1347.26 1212.65 L1347.84 1212.65 L1348.43 1212.65 L1349.01 1212.65 L1349.6 1212.65 L1350.19 1212.65 L1350.77 1212.65 L1351.36 1212.65 L1351.95 1212.65 L1352.53 1212.65 L1353.12 1212.65 L1353.71 1212.65 L1354.29 1212.65 L1354.88 1212.65 L1355.47 1212.65 L1356.05 1212.65 L1356.64 1212.65 L1357.22 1212.65 L1357.81 1212.65 L1358.4 1212.65 L1358.98 1212.65 L1359.57 1212.65 L1360.16 1212.65 L1360.74 1212.65 L1361.33 1212.65 L1361.92 1212.65 L1362.5 1212.65 L1363.09 1212.65 L1363.68 1212.65 L1364.26 1212.65 L1364.85 1212.65 L1365.43 1212.65 L1366.02 1212.65 L1366.61 1212.65 L1367.19 1212.65 L1367.78 1212.65 L1368.37 1212.65 L1368.95 1212.65 L1369.54 1212.65 L1370.13 1212.65 L1370.71 1212.65 L1371.3 1212.65 L1371.88 1212.65 L1372.47 1212.65 L1373.06 1212.65 L1373.64 1212.65 L1374.23 1212.65 L1374.82 1212.65 L1375.4 1212.65 L1375.99 1212.65 L1376.58 1212.65 L1377.16 1212.65 L1377.75 1212.65 L1378.34 1212.65 L1378.92 1212.65 L1379.51 1212.65 L1380.09 1212.65 L1380.68 1212.65 L1381.27 1212.65 L1381.85 1212.65 L1382.44 1212.65 L1383.03 1212.65 L1383.61 1212.65 L1384.2 1212.65 L1384.79 1212.65 L1385.37 1212.65 L1385.96 1212.65 L1386.55 1212.65 L1387.13 1212.65 L1387.72 1212.65 L1388.3 1212.65 L1388.89 1212.65 L1389.48 1212.65 L1390.06 1212.65 L1390.65 1212.65 L1391.24 1212.65 L1391.82 1212.65 L1392.41 1212.65 L1393 1212.65 L1393.58 1212.65 L1394.17 1212.65 L1394.75 1212.65 L1395.34 1212.65 L1395.93 1212.65 L1396.51 1212.65 L1397.1 1212.65 L1397.69 1212.65 L1398.27 1212.65 L1398.86 1212.65 L1399.45 1212.65 L1400.03 1212.65 L1400.62 1212.65 L1401.21 1212.65 L1401.79 1212.65 L1402.38 1212.65 L1402.96 1212.65 L1403.55 1212.65 L1404.14 1212.65 L1404.72 1212.65 L1405.31 1212.65 L1405.9 1212.65 L1406.48 1212.65 L1407.07 1212.65 L1407.66 1212.65 L1408.24 1212.65 L1408.83 1212.65 L1409.42 1212.65 L1410 1212.65 L1410.59 1212.65 L1411.17 1212.65 L1411.76 1212.65 L1412.35 1212.65 L1412.93 1212.65 L1413.52 1212.65 L1414.11 1212.65 L1414.69 1212.65 L1415.28 1212.65 L1415.87 1212.65 L1416.45 1212.65 L1417.04 1212.65 L1417.63 1212.65 L1418.21 1212.65 L1418.8 1212.65 L1419.38 1212.65 L1419.97 1212.65 L1420.56 1212.65 L1421.14 1212.65 L1421.73 1212.65 L1422.32 1212.65 L1422.9 1212.65 L1423.49 1212.65 L1424.08 1212.65 L1424.66 1212.65 L1425.25 1212.65 L1425.83 1212.65 L1426.42 1212.65 L1427.01 1212.65 L1427.59 1212.65 L1428.18 1212.65 L1428.77 1212.65 L1429.35 1212.65 L1429.94 1212.65 L1430.53 1212.65 L1431.11 1212.65 L1431.7 1212.65 L1432.29 1212.65 L1432.87 1212.65 L1433.46 1212.65 L1434.04 1212.65 L1434.63 1212.65 L1435.22 1212.65 L1435.8 1212.65 L1436.39 1212.65 L1436.98 1212.65 L1437.56 1212.65 L1438.15 1212.65 L1438.74 1212.65 L1439.32 1212.65 L1439.91 1212.65 L1440.5 1212.65 L1441.08 1212.65 L1441.67 1212.65 L1442.25 1212.65 L1442.84 1212.65 L1443.43 1212.65 L1444.01 1212.65 L1444.6 1212.65 L1445.19 1212.65 L1445.77 1212.65 L1446.36 1212.65 L1446.95 1212.65 L1447.53 1212.65 L1448.12 1212.65 L1448.7 1212.65 L1449.29 1212.65 L1449.88 1212.65 L1450.46 1212.65 L1451.05 1212.65 L1451.64 1212.65 L1452.22 1212.65 L1452.81 1212.65 L1453.4 1212.65 L1453.98 1212.65 L1454.57 1212.65 L1455.16 1212.65 L1455.74 1212.65 L1456.33 1212.65 L1456.91 1212.65 L1457.5 1212.65 L1458.09 1212.65 L1458.67 1212.65 L1459.26 1212.65 L1459.85 1212.65 L1460.43 1212.65 L1461.02 1212.65 L1461.61 1212.65 L1462.19 1212.65 L1462.78 1212.65 L1463.37 1212.65 L1463.95 1212.65 L1464.54 1212.65 L1465.12 1212.65 L1465.71 1212.65 L1466.3 1212.65 L1466.88 1212.65 L1467.47 1212.65 L1468.06 1212.65 L1468.64 1212.65 L1469.23 1212.65 L1469.82 1212.65 L1470.4 1212.65 L1470.99 1212.65 L1471.57 1212.65 L1472.16 1212.65 L1472.75 1212.65 L1473.33 1212.65 L1473.92 1212.65 L1474.51 1212.65 L1475.09 1212.65 L1475.68 1212.65 L1476.27 1212.65 L1476.85 1212.65 L1477.44 1212.65 L1478.03 1212.65 L1478.61 1212.65 L1479.2 1212.65 L1479.78 1212.65 L1480.37 1212.65 L1480.96 1212.65 L1481.54 1212.65 L1482.13 1212.65 L1482.72 1212.65 L1483.3 1212.65 L1483.89 1212.65 L1484.48 1212.65 L1485.06 1212.65 L1485.65 1212.65 L1486.24 1212.65 L1486.82 1212.65 L1487.41 1212.65 L1487.99 1212.65 L1488.58 1212.65 L1489.17 1212.65 L1489.75 1212.65 L1490.34 1212.65 L1490.93 1212.65 L1491.51 1212.65 L1492.1 1212.65 L1492.69 1212.65 L1493.27 1212.65 L1493.86 1212.65 L1494.45 1212.65 L1495.03 1212.65 L1495.62 1212.65 L1496.2 1212.65 L1496.79 1212.65 L1497.38 1212.65 L1497.96 1212.65 L1498.55 1212.65 L1499.14 1212.65 L1499.72 1212.65 L1500.31 1212.65 L1500.9 1212.65 L1501.48 1212.65 L1502.07 1212.65 L1502.65 1212.65 L1503.24 1212.65 L1503.83 1212.65 L1504.41 1212.65 L1505 1212.65 L1505.59 1212.65 L1506.17 1212.65 L1506.76 1212.65 L1507.35 1212.65 L1507.93 1212.65 L1508.52 1212.65 L1509.11 1212.65 L1509.69 1212.65 L1510.28 1212.65 L1510.86 1212.65 L1511.45 1212.65 L1512.04 1212.65 L1512.62 1212.65 L1513.21 1212.65 L1513.8 1212.65 L1514.38 1212.65 L1514.97 1212.65 L1515.56 1212.65 L1516.14 1212.65 L1516.73 1212.65 L1517.32 1212.65 L1517.9 1212.65 L1518.49 1212.65 L1519.07 1212.65 L1519.66 1212.65 L1520.25 1212.65 L1520.83 1212.65 L1521.42 1212.65 L1522.01 1212.65 L1522.59 1212.65 L1523.18 1212.65 L1523.77 1212.65 L1524.35 1212.65 L1524.94 1212.65 L1525.52 1212.65 L1526.11 1212.65 L1526.7 1212.65 L1527.28 1212.65 L1527.87 1212.65 L1528.46 1212.65 L1529.04 1212.65 L1529.63 1212.65 L1530.22 1212.65 L1530.8 1212.65 L1531.39 1212.65 L1531.98 1212.65 L1532.56 1212.65 L1533.15 1212.65 L1533.73 1212.65 L1534.32 1212.65 L1534.91 1212.65 L1535.49 1212.65 L1536.08 1212.65 L1536.67 1212.65 L1537.25 1212.65 L1537.84 1212.65 L1538.43 1212.65 L1539.01 1212.65 L1539.6 1212.65 L1540.19 1212.65 L1540.77 1212.65 L1541.36 1212.65 L1541.94 1212.65 L1542.53 1212.65 L1543.12 1212.65 L1543.7 1212.65 L1544.29 1212.65 L1544.88 1212.65 L1545.46 1212.65 L1546.05 1212.65 L1546.64 1212.65 L1547.22 1212.65 L1547.81 1212.65 L1548.4 1212.65 L1548.98 1212.65 L1549.57 1212.65 L1550.15 1212.65 L1550.74 1212.65 L1551.33 1212.65 L1551.91 1212.65 L1552.5 1212.65 L1553.09 1212.65 L1553.67 1212.65 L1554.26 1212.65 L1554.85 1212.65 L1555.43 1212.65 L1556.02 1212.65 L1556.6 1212.65 L1557.19 1212.65 L1557.78 1212.65 L1558.36 1212.65 L1558.95 1212.65 L1559.54 1212.65 L1560.12 1212.65 L1560.71 1212.65 L1561.3 1212.65 L1561.88 1212.65 L1562.47 1212.65 L1563.06 1212.65 L1563.64 1212.65 L1564.23 1212.65 L1564.81 1212.65 L1565.4 1212.65 L1565.99 1212.65 L1566.57 1212.65 L1567.16 1212.65 L1567.75 1212.65 L1568.33 1212.65 L1568.92 1212.65 L1569.51 1212.65 L1570.09 1212.65 L1570.68 1212.65 L1571.27 1212.65 L1571.85 1212.65 L1572.44 1212.65 L1573.02 1212.65 L1573.61 1212.65 L1574.2 1212.65 L1574.78 1212.65 L1575.37 1212.65 L1575.96 1212.65 L1576.54 1212.65 L1577.13 1212.65 L1577.72 1212.65 L1578.3 1212.65 L1578.89 1212.65 L1579.47 1212.65 L1580.06 1212.65 L1580.65 1212.65 L1581.23 1212.65 L1581.82 1212.65 L1582.41 1212.65 L1582.99 1212.65 L1583.58 1212.65 L1584.17 1212.65 L1584.75 1212.65 L1585.34 1212.65 L1585.93 1212.65 L1586.51 1212.65 L1587.1 1212.65 L1587.68 1212.65 L1588.27 1212.65 L1588.86 1212.65 L1589.44 1212.65 L1590.03 1212.65 L1590.62 1212.65 L1591.2 1212.65 L1591.79 1212.65 L1592.38 1212.65 L1592.96 1212.65 L1593.55 1212.65 L1594.14 1212.65 L1594.72 1212.65 L1595.31 1212.65 L1595.89 1212.65 L1596.48 1212.65 L1597.07 1212.65 L1597.65 1212.65 L1598.24 1212.65 L1598.83 1212.65 L1599.41 1212.65 L1600 1212.65 L1600.59 1212.65 L1601.17 1212.65 L1601.76 1212.65 L1602.34 1212.65 L1602.93 1212.65 L1603.52 1212.65 L1604.1 1212.65 L1604.69 1212.65 L1605.28 1212.65 L1605.86 1212.65 L1606.45 1212.65 L1607.04 1212.65 L1607.62 1212.65 L1608.21 1212.65 L1608.8 1212.65 L1609.38 1212.65 L1609.97 1212.65 L1610.55 1212.65 L1611.14 1212.65 L1611.73 1212.65 L1612.31 1212.65 L1612.9 1212.65 L1613.49 1212.65 L1614.07 1212.65 L1614.66 1212.65 L1615.25 1212.65 L1615.83 1212.65 L1616.42 1212.65 L1617.01 1212.65 L1617.59 1212.65 L1618.18 1212.65 L1618.76 1212.65 L1619.35 1212.65 L1619.94 1212.65 L1620.52 1212.65 L1621.11 1212.65 L1621.7 1212.65 L1622.28 1212.65 L1622.87 1212.65 L1623.46 1212.65 L1624.04 1212.65 L1624.63 1212.65 L1625.22 1212.65 L1625.8 1212.65 L1626.39 1212.65 L1626.97 1212.65 L1627.56 1212.65 L1628.15 1212.65 L1628.73 1212.65 L1629.32 1212.65 L1629.91 1212.65 L1630.49 1212.65 L1631.08 1212.65 L1631.67 1212.65 L1632.25 1212.65 L1632.84 1212.65 L1633.42 1212.65 L1634.01 1212.65 L1634.6 1212.65 L1635.18 1212.65 L1635.77 1212.65 L1636.36 1212.65 L1636.94 1212.65 L1637.53 1212.65 L1638.12 1212.65 L1638.7 1212.65 L1639.29 1212.65 L1639.88 1212.65 L1640.46 1212.65 L1641.05 1212.65 L1641.63 1212.65 L1642.22 1212.65 L1642.81 1212.65 L1643.39 1212.65 L1643.98 1212.65 L1644.57 1212.65 L1645.15 1212.65 L1645.74 1212.65 L1646.33 1212.65 L1646.91 1212.65 L1647.5 1212.65 L1648.09 1212.65 L1648.67 1212.65 L1649.26 1212.65 L1649.84 1212.65 L1650.43 1212.65 L1651.02 1212.65 L1651.6 1212.65 L1652.19 1212.65 L1652.78 1212.65 L1653.36 1212.65 L1653.95 1212.65 L1654.54 1212.65 L1655.12 1212.65 L1655.71 1212.65 L1656.29 1212.65 L1656.88 1212.65 L1657.47 1212.65 L1658.05 1212.65 L1658.64 1212.65 L1659.23 1212.65 L1659.81 1212.65 L1660.4 1212.65 L1660.99 1212.65 L1661.57 1212.65 L1662.16 1212.65 L1662.75 1212.65 L1663.33 1212.65 L1663.92 1212.65 L1664.5 1212.65 L1665.09 1212.65 L1665.68 1212.65 L1666.26 1212.65 L1666.85 1212.65 L1667.44 1212.65 L1668.02 1212.65 L1668.61 1212.65 L1669.2 1212.65 L1669.78 1212.65 L1670.37 1212.65 L1670.96 1212.65 L1671.54 1212.65 L1672.13 1212.65 L1672.71 1212.65 L1673.3 1212.65 L1673.89 1212.65 L1674.47 1212.65 L1675.06 1212.65 L1675.65 1212.65 L1676.23 1212.65 L1676.82 1212.65 L1677.41 1212.65 L1677.99 1212.65 L1678.58 1212.65 L1679.17 1212.65 L1679.75 1212.65 L1680.34 1212.65 L1680.92 1212.65 L1681.51 1212.65 L1682.1 1212.65 L1682.68 1212.65 L1683.27 1212.65 L1683.86 1212.65 L1684.44 1212.65 L1685.03 1212.65 L1685.62 1212.65 L1686.2 1212.65 L1686.79 1212.65 L1687.37 1212.65 L1687.96 1212.65 L1688.55 1212.65 L1689.13 1212.65 L1689.72 1212.65 L1690.31 1212.65 L1690.89 1212.65 L1691.48 1212.65 L1692.07 1212.65 L1692.65 1212.65 L1693.24 1212.65 L1693.83 1212.65 L1694.41 1212.65 L1695 1212.65 L1695.58 1212.65 L1696.17 1212.65 L1696.76 1212.65 L1697.34 1212.65 L1697.93 1212.65 L1698.52 1212.65 L1699.1 1212.65 L1699.69 1212.65 L1700.28 1212.65 L1700.86 1212.65 L1701.45 1212.65 L1702.04 1212.65 L1702.62 1212.65 L1703.21 1212.65 L1703.79 1212.65 L1704.38 1212.65 L1704.97 1212.65 L1705.55 1212.65 L1706.14 1212.65 L1706.73 1212.65 L1707.31 1212.65 L1707.9 1212.65 L1708.49 1212.65 L1709.07 1212.65 L1709.66 1212.65 L1710.24 1212.65 L1710.83 1212.65 L1711.42 1212.65 L1712 1212.65 L1712.59 1212.65 L1713.18 1212.65 L1713.76 1212.65 L1714.35 1212.65 L1714.94 1212.65 L1715.52 1212.65 L1716.11 1212.65 L1716.7 1212.65 L1717.28 1212.65 L1717.87 1212.65 L1718.45 1212.65 L1719.04 1212.65 L1719.63 1212.65 L1720.21 1212.65 L1720.8 1212.65 L1721.39 1212.65 L1721.97 1212.65 L1722.56 1212.65 L1723.15 1212.65 L1723.73 1212.65 L1724.32 1212.65 L1724.91 1212.65 L1725.49 1212.65 L1726.08 1212.65 L1726.66 1212.65 L1727.25 1212.65 L1727.84 1212.65 L1728.42 1212.65 L1729.01 1212.65 L1729.6 1212.65 L1730.18 1212.65 L1730.77 1212.65 L1731.36 1212.65 L1731.94 1212.65 L1732.53 1212.65 L1733.11 1212.65 L1733.7 1212.65 L1734.29 1212.65 L1734.87 1212.65 L1735.46 1212.65 L1736.05 1212.65 L1736.63 1212.65 L1737.22 1212.65 L1737.81 1212.65 L1738.39 1212.65 L1738.98 1212.65 L1739.57 1212.65 L1740.15 1212.65 L1740.74 1212.65 L1741.32 1212.65 L1741.91 1212.65 L1742.5 1212.65 L1743.08 1212.65 L1743.67 1212.65 L1744.26 1212.65 L1744.84 1212.65 L1745.43 1212.65 L1746.02 1212.65 L1746.6 1212.65 L1747.19 1212.65 L1747.78 1212.65 L1748.36 1212.65 L1748.95 1212.65 L1749.53 1212.65 L1750.12 1212.65 L1750.71 1212.65 L1751.29 1212.65 L1751.88 1212.65 L1752.47 1212.65 L1753.05 1212.65 L1753.64 1212.65 L1754.23 1212.65 L1754.81 1212.65 L1755.4 1212.65 L1755.99 1212.65 L1756.57 1212.65 L1757.16 1212.65 L1757.74 1212.65 L1758.33 1212.65 L1758.92 1212.65 L1759.5 1212.65 L1760.09 1212.65 L1760.68 1212.65 L1761.26 1212.65 L1761.85 1212.65 L1762.44 1212.65 L1763.02 1212.65 L1763.61 1212.65 L1764.19 1212.65 L1764.78 1212.65 L1765.37 1212.65 L1765.95 1212.65 L1766.54 1212.65 L1767.13 1212.65 L1767.71 1212.65 L1768.3 1212.65 L1768.89 1212.65 L1769.47 1212.65 L1770.06 1212.65 L1770.65 1212.65 L1771.23 1212.65 L1771.82 1212.65 L1772.4 1212.65 L1772.99 1212.65 L1773.58 1212.65 L1774.16 1212.65 L1774.75 1212.65 L1775.34 1212.65 L1775.92 1212.65 L1776.51 1212.65 L1777.1 1212.65 L1777.68 1212.65 L1778.27 1212.65 L1778.86 1212.65 L1779.44 1212.65 L1780.03 1212.65 L1780.61 1212.65 L1781.2 1212.65 L1781.79 1212.65 L1782.37 1212.65 L1782.96 1212.65 L1783.55 1212.65 L1784.13 1212.65 L1784.72 1212.65 L1785.31 1212.65 L1785.89 1212.65 L1786.48 1212.65 L1787.06 1212.65 L1787.65 1212.65 L1788.24 1212.65 L1788.82 1212.65 L1789.41 1212.65 L1790 1212.65 L1790.58 1212.65 L1791.17 1212.65 L1791.76 1212.65 L1792.34 1212.65 L1792.93 1212.65 L1793.52 1212.65 L1794.1 1212.65 L1794.69 1212.65 L1795.27 1212.65 L1795.86 1212.65 L1796.45 1212.65 L1797.03 1212.65 L1797.62 1212.65 L1798.21 1212.65 L1798.79 1212.65 L1799.38 1212.65 L1799.97 1212.65 L1800.55 1212.65 L1801.14 1212.65 L1801.73 1212.65 L1802.31 1212.65 L1802.9 1212.65 L1803.48 1212.65 L1804.07 1212.65 L1804.66 1212.65 L1805.24 1212.65 L1805.83 1212.65 L1806.42 1212.65 L1807 1212.65 L1807.59 1212.65 L1808.18 1212.65 L1808.76 1212.65 L1809.35 1212.65 L1809.94 1212.65 L1810.52 1212.65 L1811.11 1212.65 L1811.69 1212.65 L1812.28 1212.65 L1812.87 1212.65 L1813.45 1212.65 L1814.04 1212.65 L1814.63 1212.65 L1815.21 1212.65 L1815.8 1212.65 L1816.39 1212.65 L1816.97 1212.65 L1817.56 1212.65 L1818.14 1212.65 L1818.73 1212.65 L1819.32 1212.65 L1819.9 1212.65 L1820.49 1212.65 L1821.08 1212.65 L1821.66 1212.65 L1822.25 1212.65 L1822.84 1212.65 L1823.42 1212.65 L1824.01 1212.65 L1824.6 1212.65 L1825.18 1212.65 L1825.77 1212.65 L1826.35 1212.65 L1826.94 1212.65 L1827.53 1212.65 L1828.11 1212.65 L1828.7 1212.65 L1829.29 1212.65 L1829.87 1212.65 L1830.46 1212.65 L1831.05 1212.65 L1831.63 1212.65 L1832.22 1212.65 L1832.81 1212.65 L1833.39 1212.65 L1833.98 1212.65 L1834.56 1212.65 L1835.15 1212.65 L1835.74 1212.65 L1836.32 1212.65 L1836.91 1212.65 L1837.5 1212.65 L1838.08 1212.65 L1838.67 1212.65 L1839.26 1212.65 L1839.84 1212.65 L1840.43 1212.65 L1841.01 1212.65 L1841.6 1212.65 L1842.19 1212.65 L1842.77 1212.65 L1843.36 1212.65 L1843.95 1212.65 L1844.53 1212.65 L1845.12 1212.65 L1845.71 1212.65 L1846.29 1212.65 L1846.88 1212.65 L1847.47 1212.65 L1848.05 1212.65 L1848.64 1212.65 L1849.22 1212.65 L1849.81 1212.65 L1850.4 1212.65 L1850.98 1212.65 L1851.57 1212.65 L1852.16 1212.65 L1852.74 1212.65 L1853.33 1212.65 L1853.92 1212.65 L1854.5 1212.65 L1855.09 1212.65 L1855.68 1212.65 L1856.26 1212.65 L1856.85 1212.65 L1857.43 1212.65 L1858.02 1212.65 L1858.61 1212.65 L1859.19 1212.65 L1859.78 1212.65 L1860.37 1212.65 L1860.95 1212.65 L1861.54 1212.65 L1862.13 1212.65 L1862.71 1212.65 L1863.3 1212.65 L1863.88 1212.65 L1864.47 1212.65 L1865.06 1212.65 L1865.64 1212.65 L1866.23 1212.65 L1866.82 1212.65 L1867.4 1212.65 L1867.99 1212.65 L1868.58 1212.65 L1869.16 1212.65 L1869.75 1212.65 L1870.34 1212.65 L1870.92 1212.65 L1871.51 1212.65 L1872.09 1212.65 L1872.68 1212.65 L1873.27 1212.65 L1873.85 1212.65 L1874.44 1212.65 L1875.03 1212.65 L1875.61 1212.65 L1876.2 1212.65 L1876.79 1212.65 L1877.37 1212.65 L1877.96 1212.65 L1878.55 1212.65 L1879.13 1212.65 L1879.72 1212.65 L1880.3 1212.65 L1880.89 1212.65 L1881.48 1212.65 L1882.06 1212.65 L1882.65 1212.65 L1883.24 1212.65 L1883.82 1212.65 L1884.41 1212.65 L1885 1212.65 L1885.58 1212.65 L1886.17 1212.65 L1886.76 1212.65 L1887.34 1212.65 L1887.93 1212.65 L1888.51 1212.65 L1889.1 1212.65 L1889.69 1212.65 L1890.27 1212.65 L1890.86 1212.65 L1891.45 1212.65 L1892.03 1212.65 L1892.62 1212.65 L1893.21 1212.65 L1893.79 1212.65 L1894.38 1212.65 L1894.96 1212.65 L1895.55 1212.65 L1896.14 1212.65 L1896.72 1212.65 L1897.31 1212.65 L1897.9 1212.65 L1898.48 1212.65 L1899.07 1212.65 L1899.66 1212.65 L1900.24 1212.65 L1900.83 1212.65 L1901.42 1212.65 L1902 1212.65 L1902.59 1212.65 L1903.17 1212.65 L1903.76 1212.65 L1904.35 1212.65 L1904.93 1212.65 L1905.52 1212.65 L1906.11 1212.65 L1906.69 1212.65 L1907.28 1212.65 L1907.87 1212.65 L1908.45 1212.65 L1909.04 1212.65 L1909.63 1212.65 L1910.21 1212.65 L1910.8 1212.65 L1911.38 1212.65 L1911.97 1212.65 L1912.56 1212.65 L1913.14 1212.65 L1913.73 1212.65 L1914.32 1212.65 L1914.9 1212.65 L1915.49 1212.65 L1916.08 1212.65 L1916.66 1212.65 L1917.25 1212.65 L1917.83 1212.65 L1918.42 1212.65 L1919.01 1212.65 L1919.59 1212.65 L1920.18 1212.65 L1920.77 1212.65 L1921.35 1212.65 L1921.94 1212.65 L1922.53 1212.65 L1923.11 1212.65 L1923.7 1212.65 L1924.29 1212.65 L1924.87 1212.65 L1925.46 1212.65 L1926.04 1212.65 L1926.63 1212.65 L1927.22 1212.65 L1927.8 1212.65 L1928.39 1212.65 L1928.98 1212.65 L1929.56 1212.65 L1930.15 1212.65 L1930.74 1212.65 L1931.32 1212.65 L1931.91 1212.65 L1932.5 1212.65 L1933.08 1212.65 L1933.67 1212.65 L1934.25 1212.65 L1934.84 1212.65 L1935.43 1212.65 L1936.01 1212.65 L1936.6 1212.65 L1937.19 1212.65 L1937.77 1212.65 L1938.36 1212.65 L1938.95 1212.65 L1939.53 1212.65 L1940.12 1212.65 L1940.71 1212.65 L1941.29 1212.65 L1941.88 1212.65 L1942.46 1212.65 L1943.05 1212.65 L1943.64 1212.65 L1944.22 1212.65 L1944.81 1212.65 L1945.4 1212.65 L1945.98 1212.65 L1946.57 1212.65 L1947.16 1212.65 L1947.74 1212.65 L1948.33 1212.65 L1948.91 1212.65 L1949.5 1212.65 L1950.09 1212.65 L1950.67 1212.65 L1951.26 1212.65 L1951.85 1212.65 L1952.43 1212.65 L1953.02 1212.65 L1953.61 1212.65 L1954.19 1212.65 L1954.78 1212.65 L1955.37 1212.65 L1955.95 1212.65 L1956.54 1212.65 L1957.12 1212.65 L1957.71 1212.65 L1958.3 1212.65 L1958.88 1212.65 L1959.47 1212.65 L1960.06 1212.65 L1960.64 1212.65 L1961.23 1212.65 L1961.82 1212.65 L1962.4 1212.65 L1962.99 1212.65 L1963.58 1212.65 L1964.16 1212.65 L1964.75 1212.65 L1965.33 1212.65 L1965.92 1212.65 L1966.51 1212.65 L1967.09 1212.65 L1967.68 1212.65 L1968.27 1212.65 L1968.85 1212.65 L1969.44 1212.65 L1970.03 1212.65 L1970.61 1212.65 L1971.2 1212.65 L1971.78 1212.65 L1972.37 1212.65 L1972.96 1212.65 L1973.54 1212.65 L1974.13 1212.65 L1974.72 1212.65 L1975.3 1212.65 L1975.89 1212.65 L1976.48 1212.65 L1977.06 1212.65 L1977.65 1212.65 L1978.24 1212.65 L1978.82 1212.65 L1979.41 1212.65 L1979.99 1212.65 L1980.58 1212.65 L1981.17 1212.65 L1981.75 1212.65 L1982.34 1212.65 L1982.93 1212.65 L1983.51 1212.65 L1984.1 1212.65 L1984.69 1212.65 L1985.27 1212.65 L1985.86 1212.65 L1986.45 1212.65 L1987.03 1212.65 L1987.62 1212.65 L1988.2 1212.65 L1988.79 1212.65 L1989.38 1212.65 L1989.96 1212.65 L1990.55 1212.65 L1991.14 1212.65 L1991.72 1212.65 L1992.31 1212.65 L1992.9 1212.65 L1993.48 1212.65 L1994.07 1212.65 L1994.65 1212.65 L1995.24 1212.65 L1995.83 1212.65 L1996.41 1212.65 L1997 1212.65 L1997.59 1212.65 L1998.17 1212.65 L1998.76 1212.65 L1999.35 1212.65 L1999.93 1212.65 L2000.52 1212.65 L2001.11 1212.65 L2001.69 1212.65 L2002.28 1212.65 L2002.86 1212.65 L2003.45 1212.65 L2004.04 1212.65 L2004.62 1212.65 L2005.21 1212.65 L2005.8 1212.65 L2006.38 1212.65 L2006.97 1212.65 L2007.56 1212.65 L2008.14 1212.65 L2008.73 1212.65 L2009.32 1212.65 L2009.9 1212.65 L2010.49 1212.65 L2011.07 1212.65 L2011.66 1212.65 L2012.25 1212.65 L2012.83 1212.65 L2013.42 1212.65 L2014.01 1212.65 L2014.59 1212.65 L2015.18 1212.65 L2015.77 1212.65 L2016.35 1212.65 L2016.94 1212.65 L2017.53 1212.65 L2018.11 1212.65 L2018.7 1212.65 L2019.28 1212.65 L2019.87 1212.65 L2020.46 1212.65 L2021.04 1212.65 L2021.63 1212.65 L2022.22 1212.65 L2022.8 1212.65 L2023.39 1212.65 L2023.98 1212.65 L2024.56 1212.65 L2025.15 1212.65 L2025.73 1212.65 L2026.32 1212.65 L2026.91 1212.65 L2027.49 1212.65 L2028.08 1212.65 L2028.67 1212.65 L2029.25 1212.65 L2029.84 1212.65 L2030.43 1212.65 L2031.01 1212.65 L2031.6 1212.65 L2032.19 1212.65 L2032.77 1212.65 L2033.36 1212.65 L2033.94 1212.65 L2034.53 1212.65 L2035.12 1212.65 L2035.7 1212.65 L2036.29 1212.65 L2036.88 1212.65 L2037.46 1212.65 L2038.05 1212.65 L2038.64 1212.65 L2039.22 1212.65 L2039.81 1212.65 L2040.4 1212.65 L2040.98 1212.65 L2041.57 1212.65 L2042.15 1212.65 L2042.74 1212.65 L2043.33 1212.65 L2043.91 1212.65 L2044.5 1212.65 L2045.09 1212.65 L2045.67 1212.65 L2046.26 1212.65 L2046.85 1212.65 L2047.43 1212.65 L2048.02 1212.65 L2048.6 1212.65 L2049.19 1212.65 L2049.78 1212.65 L2050.36 1212.65 L2050.95 1212.65 L2051.54 1212.65 L2052.12 1212.65 L2052.71 1212.65 L2053.3 1212.65 L2053.88 1212.65 L2054.47 1212.65 L2055.06 1212.65 L2055.64 1212.65 L2056.23 1212.65 L2056.81 1212.65 L2057.4 1212.65 L2057.99 1212.65 L2058.57 1212.65 L2059.16 1212.65 L2059.75 1212.65 L2060.33 1212.65 L2060.92 1212.65 L2061.51 1212.65 L2062.09 1212.65 L2062.68 1212.65 L2063.27 1212.65 L2063.85 1212.65 L2064.44 1212.65 L2065.02 1212.65 L2065.61 1212.65 L2066.2 1212.65 L2066.78 1212.65 L2067.37 1212.65 L2067.96 1212.65 L2068.54 1212.65 L2069.13 1212.65 L2069.72 1212.65 L2070.3 1212.65 L2070.89 1212.65 L2071.48 1212.65 L2072.06 1212.65 L2072.65 1212.65 L2073.23 1212.65 L2073.82 1212.65 L2074.41 1212.65 L2074.99 1212.65 L2075.58 1212.65 L2076.17 1212.65 L2076.75 1212.65 L2077.34 1212.65 L2077.93 1212.65 L2078.51 1212.65 L2079.1 1212.65 L2079.68 1212.65 L2080.27 1212.65 L2080.86 1212.65 L2081.44 1212.65 L2082.03 1212.65 L2082.62 1212.65 L2083.2 1212.65 L2083.79 1212.65 L2084.38 1212.65 L2084.96 1212.65 L2085.55 1212.65 L2086.14 1212.65 L2086.72 1212.65 L2087.31 1212.65 L2087.89 1212.65 L2088.48 1212.65 L2089.07 1212.65 L2089.65 1212.65 L2090.24 1212.65 L2090.83 1212.65 L2091.41 1212.65 L2092 1212.65 L2092.59 1212.65 L2093.17 1212.65 L2093.76 1212.65 L2094.35 1212.65 L2094.93 1212.65 L2095.52 1212.65 L2096.1 1212.65 L2096.69 1212.65 L2097.28 1212.65 L2097.86 1212.65 L2098.45 1212.65 L2099.04 1212.65 L2099.62 1212.65 L2100.21 1212.65 L2100.8 1212.65 L2101.38 1212.65 L2101.97 1212.65 L2102.55 1212.65 L2103.14 1212.65 L2103.73 1212.65 L2104.31 1212.65 L2104.9 1212.65 L2105.49 1212.65 L2106.07 1212.65 L2106.66 1212.65 L2107.25 1212.65 L2107.83 1212.65 L2108.42 1212.65 L2109.01 1212.65 L2109.59 1212.65 L2110.18 1212.65 L2110.76 1212.65 L2111.35 1212.65 L2111.94 1212.65 L2112.52 1212.65 L2113.11 1212.65 L2113.7 1212.65 L2114.28 1212.65 L2114.87 1212.65 L2115.46 1212.65 L2116.04 1212.65 L2116.63 1212.65 L2117.22 1212.65 L2117.8 1212.65 L2118.39 1212.65 L2118.97 1212.65 L2119.56 1212.65 L2120.15 1212.65 L2120.73 1212.65 L2121.32 1212.65 L2121.91 1212.65 L2122.49 1212.65 L2123.08 1212.65 L2123.67 1212.65 L2124.25 1212.65 L2124.84 1212.65 L2125.42 1212.65 L2126.01 1212.65 L2126.6 1212.65 L2127.18 1212.65 L2127.77 1212.65 L2128.36 1212.65 L2128.94 1212.65 L2129.53 1212.65 L2130.12 1212.65 L2130.7 1212.65 L2131.29 1212.65 L2131.88 1212.65 L2132.46 1212.65 L2133.05 1212.65 L2133.63 1212.65 L2134.22 1212.65 L2134.81 1212.65 L2135.39 1212.65 L2135.98 1212.65 L2136.57 1212.65 L2137.15 1212.65 L2137.74 1212.65 L2138.33 1212.65 L2138.91 1212.65 L2139.5 1212.65 L2140.09 1212.65 L2140.67 1212.65 L2141.26 1212.65 L2141.84 1212.65 L2142.43 1212.65 L2143.02 1212.65 L2143.6 1212.65 L2144.19 1212.65 L2144.78 1212.65 L2145.36 1212.65 L2145.95 1212.65 L2146.54 1212.65 L2147.12 1212.65 L2147.71 1212.65 L2148.3 1212.65 L2148.88 1212.65 L2149.47 1212.65 L2150.05 1212.65 L2150.64 1212.65 L2151.23 1212.65 L2151.81 1212.65 L2152.4 1212.65 L2152.99 1212.65 L2153.57 1212.65 L2154.16 1212.65 L2154.75 1212.65 L2155.33 1212.65 L2155.92 1212.65 L2156.5 1212.65 L2157.09 1212.65 L2157.68 1212.65 L2158.26 1212.65 L2158.26 1212.53 L2157.68 1212.53 L2157.09 1212.53 L2156.5 1212.53 L2155.92 1212.53 L2155.33 1212.53 L2154.75 1212.53 L2154.16 1212.53 L2153.57 1212.53 L2152.99 1212.53 L2152.4 1212.53 L2151.81 1212.53 L2151.23 1212.53 L2150.64 1212.53 L2150.05 1212.53 L2149.47 1212.53 L2148.88 1212.53 L2148.3 1212.53 L2147.71 1212.53 L2147.12 1212.53 L2146.54 1212.53 L2145.95 1212.53 L2145.36 1212.53 L2144.78 1212.53 L2144.19 1212.53 L2143.6 1212.53 L2143.02 1212.53 L2142.43 1212.53 L2141.84 1212.53 L2141.26 1212.53 L2140.67 1212.53 L2140.09 1212.53 L2139.5 1212.53 L2138.91 1212.53 L2138.33 1212.53 L2137.74 1212.53 L2137.15 1212.53 L2136.57 1212.53 L2135.98 1212.53 L2135.39 1212.53 L2134.81 1212.53 L2134.22 1212.53 L2133.63 1212.53 L2133.05 1212.53 L2132.46 1212.53 L2131.88 1212.53 L2131.29 1212.53 L2130.7 1212.53 L2130.12 1212.53 L2129.53 1212.53 L2128.94 1212.53 L2128.36 1212.53 L2127.77 1212.53 L2127.18 1212.53 L2126.6 1212.53 L2126.01 1212.53 L2125.42 1212.53 L2124.84 1212.53 L2124.25 1212.53 L2123.67 1212.53 L2123.08 1212.53 L2122.49 1212.53 L2121.91 1212.53 L2121.32 1212.53 L2120.73 1212.53 L2120.15 1212.53 L2119.56 1212.53 L2118.97 1212.53 L2118.39 1212.53 L2117.8 1212.53 L2117.22 1212.53 L2116.63 1212.53 L2116.04 1212.53 L2115.46 1212.53 L2114.87 1212.53 L2114.28 1212.53 L2113.7 1212.53 L2113.11 1212.53 L2112.52 1212.53 L2111.94 1212.53 L2111.35 1212.53 L2110.76 1212.53 L2110.18 1212.53 L2109.59 1212.53 L2109.01 1212.53 L2108.42 1212.53 L2107.83 1212.53 L2107.25 1212.53 L2106.66 1212.53 L2106.07 1212.53 L2105.49 1212.53 L2104.9 1212.53 L2104.31 1212.53 L2103.73 1212.53 L2103.14 1212.53 L2102.55 1212.53 L2101.97 1212.53 L2101.38 1212.53 L2100.8 1212.53 L2100.21 1212.53 L2099.62 1212.53 L2099.04 1212.53 L2098.45 1212.53 L2097.86 1212.53 L2097.28 1212.53 L2096.69 1212.53 L2096.1 1212.53 L2095.52 1212.53 L2094.93 1212.53 L2094.35 1212.53 L2093.76 1212.53 L2093.17 1212.53 L2092.59 1212.53 L2092 1212.53 L2091.41 1212.53 L2090.83 1212.53 L2090.24 1212.53 L2089.65 1212.53 L2089.07 1212.53 L2088.48 1212.53 L2087.89 1212.53 L2087.31 1212.53 L2086.72 1212.53 L2086.14 1212.53 L2085.55 1212.53 L2084.96 1212.53 L2084.38 1212.53 L2083.79 1212.53 L2083.2 1212.53 L2082.62 1212.53 L2082.03 1212.53 L2081.44 1212.53 L2080.86 1212.53 L2080.27 1212.53 L2079.68 1212.53 L2079.1 1212.53 L2078.51 1212.53 L2077.93 1212.53 L2077.34 1212.53 L2076.75 1212.53 L2076.17 1212.53 L2075.58 1212.53 L2074.99 1212.53 L2074.41 1212.53 L2073.82 1212.53 L2073.23 1212.53 L2072.65 1212.53 L2072.06 1212.53 L2071.48 1212.53 L2070.89 1212.53 L2070.3 1212.53 L2069.72 1212.53 L2069.13 1212.53 L2068.54 1212.53 L2067.96 1212.53 L2067.37 1212.53 L2066.78 1212.53 L2066.2 1212.53 L2065.61 1212.53 L2065.02 1212.53 L2064.44 1212.53 L2063.85 1212.53 L2063.27 1212.53 L2062.68 1212.53 L2062.09 1212.53 L2061.51 1212.53 L2060.92 1212.53 L2060.33 1212.53 L2059.75 1212.53 L2059.16 1212.53 L2058.57 1212.53 L2057.99 1212.53 L2057.4 1212.53 L2056.81 1212.53 L2056.23 1212.53 L2055.64 1212.53 L2055.06 1212.53 L2054.47 1212.53 L2053.88 1212.53 L2053.3 1212.53 L2052.71 1212.53 L2052.12 1212.53 L2051.54 1212.53 L2050.95 1212.53 L2050.36 1212.53 L2049.78 1212.53 L2049.19 1212.53 L2048.6 1212.53 L2048.02 1212.53 L2047.43 1212.53 L2046.85 1212.53 L2046.26 1212.53 L2045.67 1212.53 L2045.09 1212.53 L2044.5 1212.53 L2043.91 1212.53 L2043.33 1212.53 L2042.74 1212.53 L2042.15 1212.53 L2041.57 1212.53 L2040.98 1212.53 L2040.4 1212.53 L2039.81 1212.53 L2039.22 1212.53 L2038.64 1212.53 L2038.05 1212.53 L2037.46 1212.53 L2036.88 1212.53 L2036.29 1212.53 L2035.7 1212.53 L2035.12 1212.53 L2034.53 1212.53 L2033.94 1212.53 L2033.36 1212.53 L2032.77 1212.53 L2032.19 1212.53 L2031.6 1212.53 L2031.01 1212.53 L2030.43 1212.53 L2029.84 1212.53 L2029.25 1212.53 L2028.67 1212.53 L2028.08 1212.53 L2027.49 1212.53 L2026.91 1212.53 L2026.32 1212.53 L2025.73 1212.53 L2025.15 1212.53 L2024.56 1212.53 L2023.98 1212.53 L2023.39 1212.53 L2022.8 1212.53 L2022.22 1212.53 L2021.63 1212.53 L2021.04 1212.53 L2020.46 1212.53 L2019.87 1212.53 L2019.28 1212.53 L2018.7 1212.53 L2018.11 1212.53 L2017.53 1212.53 L2016.94 1212.53 L2016.35 1212.53 L2015.77 1212.53 L2015.18 1212.53 L2014.59 1212.53 L2014.01 1212.53 L2013.42 1212.53 L2012.83 1212.53 L2012.25 1212.53 L2011.66 1212.53 L2011.07 1212.53 L2010.49 1212.53 L2009.9 1212.53 L2009.32 1212.53 L2008.73 1212.53 L2008.14 1212.53 L2007.56 1212.53 L2006.97 1212.53 L2006.38 1212.53 L2005.8 1212.53 L2005.21 1212.53 L2004.62 1212.53 L2004.04 1212.53 L2003.45 1212.53 L2002.86 1212.53 L2002.28 1212.53 L2001.69 1212.53 L2001.11 1212.53 L2000.52 1212.53 L1999.93 1212.53 L1999.35 1212.53 L1998.76 1212.53 L1998.17 1212.53 L1997.59 1212.53 L1997 1212.53 L1996.41 1212.53 L1995.83 1212.53 L1995.24 1212.53 L1994.65 1212.53 L1994.07 1212.53 L1993.48 1212.53 L1992.9 1212.53 L1992.31 1212.53 L1991.72 1212.53 L1991.14 1212.53 L1990.55 1212.53 L1989.96 1212.53 L1989.38 1212.53 L1988.79 1212.53 L1988.2 1212.53 L1987.62 1212.53 L1987.03 1212.53 L1986.45 1212.53 L1985.86 1212.53 L1985.27 1212.53 L1984.69 1212.53 L1984.1 1212.53 L1983.51 1212.53 L1982.93 1212.53 L1982.34 1212.53 L1981.75 1212.53 L1981.17 1212.53 L1980.58 1212.53 L1979.99 1212.53 L1979.41 1212.53 L1978.82 1212.53 L1978.24 1212.53 L1977.65 1212.53 L1977.06 1212.53 L1976.48 1212.53 L1975.89 1212.53 L1975.3 1212.53 L1974.72 1212.53 L1974.13 1212.53 L1973.54 1212.53 L1972.96 1212.53 L1972.37 1212.53 L1971.78 1212.53 L1971.2 1212.53 L1970.61 1212.53 L1970.03 1212.53 L1969.44 1212.53 L1968.85 1212.53 L1968.27 1212.53 L1967.68 1212.53 L1967.09 1212.53 L1966.51 1212.53 L1965.92 1212.53 L1965.33 1212.53 L1964.75 1212.53 L1964.16 1212.53 L1963.58 1212.53 L1962.99 1212.53 L1962.4 1212.53 L1961.82 1212.53 L1961.23 1212.53 L1960.64 1212.53 L1960.06 1212.53 L1959.47 1212.53 L1958.88 1212.53 L1958.3 1212.53 L1957.71 1212.53 L1957.12 1212.53 L1956.54 1212.53 L1955.95 1212.53 L1955.37 1212.53 L1954.78 1212.53 L1954.19 1212.53 L1953.61 1212.53 L1953.02 1212.53 L1952.43 1212.53 L1951.85 1212.53 L1951.26 1212.53 L1950.67 1212.53 L1950.09 1212.53 L1949.5 1212.53 L1948.91 1212.53 L1948.33 1212.53 L1947.74 1212.53 L1947.16 1212.53 L1946.57 1212.53 L1945.98 1212.53 L1945.4 1212.53 L1944.81 1212.53 L1944.22 1212.53 L1943.64 1212.53 L1943.05 1212.53 L1942.46 1212.53 L1941.88 1212.53 L1941.29 1212.53 L1940.71 1212.53 L1940.12 1212.53 L1939.53 1212.53 L1938.95 1212.53 L1938.36 1212.53 L1937.77 1212.53 L1937.19 1212.53 L1936.6 1212.53 L1936.01 1212.53 L1935.43 1212.53 L1934.84 1212.53 L1934.25 1212.53 L1933.67 1212.53 L1933.08 1212.53 L1932.5 1212.53 L1931.91 1212.53 L1931.32 1212.53 L1930.74 1212.53 L1930.15 1212.53 L1929.56 1212.53 L1928.98 1212.53 L1928.39 1212.53 L1927.8 1212.53 L1927.22 1212.53 L1926.63 1212.53 L1926.04 1212.53 L1925.46 1212.53 L1924.87 1212.53 L1924.29 1212.53 L1923.7 1212.53 L1923.11 1212.53 L1922.53 1212.53 L1921.94 1212.53 L1921.35 1212.53 L1920.77 1212.53 L1920.18 1212.53 L1919.59 1212.53 L1919.01 1212.53 L1918.42 1212.53 L1917.83 1212.53 L1917.25 1212.53 L1916.66 1212.53 L1916.08 1212.53 L1915.49 1212.53 L1914.9 1212.53 L1914.32 1212.53 L1913.73 1212.53 L1913.14 1212.53 L1912.56 1212.53 L1911.97 1212.53 L1911.38 1212.53 L1910.8 1212.53 L1910.21 1212.53 L1909.63 1212.53 L1909.04 1212.53 L1908.45 1212.53 L1907.87 1212.53 L1907.28 1212.53 L1906.69 1212.53 L1906.11 1212.53 L1905.52 1212.53 L1904.93 1212.53 L1904.35 1212.53 L1903.76 1212.53 L1903.17 1212.53 L1902.59 1212.53 L1902 1212.53 L1901.42 1212.53 L1900.83 1212.53 L1900.24 1212.53 L1899.66 1212.53 L1899.07 1212.53 L1898.48 1212.53 L1897.9 1212.53 L1897.31 1212.53 L1896.72 1212.53 L1896.14 1212.53 L1895.55 1212.53 L1894.96 1212.53 L1894.38 1212.53 L1893.79 1212.53 L1893.21 1212.53 L1892.62 1212.53 L1892.03 1212.53 L1891.45 1212.53 L1890.86 1212.53 L1890.27 1212.53 L1889.69 1212.53 L1889.1 1212.53 L1888.51 1212.53 L1887.93 1212.53 L1887.34 1212.53 L1886.76 1212.53 L1886.17 1212.53 L1885.58 1212.53 L1885 1212.53 L1884.41 1212.53 L1883.82 1212.53 L1883.24 1212.53 L1882.65 1212.53 L1882.06 1212.53 L1881.48 1212.53 L1880.89 1212.53 L1880.3 1212.53 L1879.72 1212.53 L1879.13 1212.53 L1878.55 1212.53 L1877.96 1212.53 L1877.37 1212.53 L1876.79 1212.53 L1876.2 1212.53 L1875.61 1212.53 L1875.03 1212.53 L1874.44 1212.53 L1873.85 1212.53 L1873.27 1212.53 L1872.68 1212.53 L1872.09 1212.53 L1871.51 1212.53 L1870.92 1212.53 L1870.34 1212.53 L1869.75 1212.53 L1869.16 1212.53 L1868.58 1212.53 L1867.99 1212.53 L1867.4 1212.53 L1866.82 1212.53 L1866.23 1212.53 L1865.64 1212.53 L1865.06 1212.53 L1864.47 1212.53 L1863.88 1212.53 L1863.3 1212.53 L1862.71 1212.53 L1862.13 1212.53 L1861.54 1212.53 L1860.95 1212.53 L1860.37 1212.53 L1859.78 1212.53 L1859.19 1212.53 L1858.61 1212.53 L1858.02 1212.53 L1857.43 1212.53 L1856.85 1212.53 L1856.26 1212.53 L1855.68 1212.53 L1855.09 1212.53 L1854.5 1212.53 L1853.92 1212.53 L1853.33 1212.53 L1852.74 1212.53 L1852.16 1212.53 L1851.57 1212.53 L1850.98 1212.53 L1850.4 1212.53 L1849.81 1212.53 L1849.22 1212.53 L1848.64 1212.53 L1848.05 1212.53 L1847.47 1212.53 L1846.88 1212.53 L1846.29 1212.53 L1845.71 1212.53 L1845.12 1212.53 L1844.53 1212.53 L1843.95 1212.53 L1843.36 1212.53 L1842.77 1212.53 L1842.19 1212.53 L1841.6 1212.53 L1841.01 1212.53 L1840.43 1212.53 L1839.84 1212.53 L1839.26 1212.53 L1838.67 1212.53 L1838.08 1212.53 L1837.5 1212.53 L1836.91 1212.53 L1836.32 1212.53 L1835.74 1212.53 L1835.15 1212.53 L1834.56 1212.53 L1833.98 1212.53 L1833.39 1212.53 L1832.81 1212.53 L1832.22 1212.53 L1831.63 1212.53 L1831.05 1212.53 L1830.46 1212.53 L1829.87 1212.53 L1829.29 1212.53 L1828.7 1212.53 L1828.11 1212.53 L1827.53 1212.53 L1826.94 1212.53 L1826.35 1212.53 L1825.77 1212.53 L1825.18 1212.53 L1824.6 1212.53 L1824.01 1212.53 L1823.42 1212.53 L1822.84 1212.53 L1822.25 1212.53 L1821.66 1212.53 L1821.08 1212.53 L1820.49 1212.53 L1819.9 1212.53 L1819.32 1212.53 L1818.73 1212.53 L1818.14 1212.53 L1817.56 1212.53 L1816.97 1212.53 L1816.39 1212.53 L1815.8 1212.53 L1815.21 1212.53 L1814.63 1212.53 L1814.04 1212.53 L1813.45 1212.53 L1812.87 1212.53 L1812.28 1212.53 L1811.69 1212.53 L1811.11 1212.53 L1810.52 1212.53 L1809.94 1212.53 L1809.35 1212.53 L1808.76 1212.53 L1808.18 1212.53 L1807.59 1212.53 L1807 1212.53 L1806.42 1212.53 L1805.83 1212.53 L1805.24 1212.53 L1804.66 1212.53 L1804.07 1212.53 L1803.48 1212.53 L1802.9 1212.53 L1802.31 1212.53 L1801.73 1212.53 L1801.14 1212.53 L1800.55 1212.53 L1799.97 1212.53 L1799.38 1212.53 L1798.79 1212.53 L1798.21 1212.53 L1797.62 1212.53 L1797.03 1212.53 L1796.45 1212.53 L1795.86 1212.53 L1795.27 1212.53 L1794.69 1212.53 L1794.1 1212.53 L1793.52 1212.53 L1792.93 1212.53 L1792.34 1212.53 L1791.76 1212.53 L1791.17 1212.53 L1790.58 1212.53 L1790 1212.53 L1789.41 1212.53 L1788.82 1212.53 L1788.24 1212.53 L1787.65 1212.53 L1787.06 1212.53 L1786.48 1212.53 L1785.89 1212.53 L1785.31 1212.53 L1784.72 1212.53 L1784.13 1212.53 L1783.55 1212.53 L1782.96 1212.53 L1782.37 1212.53 L1781.79 1212.53 L1781.2 1212.53 L1780.61 1212.53 L1780.03 1212.53 L1779.44 1212.53 L1778.86 1212.53 L1778.27 1212.53 L1777.68 1212.53 L1777.1 1212.53 L1776.51 1212.53 L1775.92 1212.53 L1775.34 1212.53 L1774.75 1212.53 L1774.16 1212.53 L1773.58 1212.53 L1772.99 1212.53 L1772.4 1212.53 L1771.82 1212.53 L1771.23 1212.53 L1770.65 1212.53 L1770.06 1212.53 L1769.47 1212.53 L1768.89 1212.53 L1768.3 1212.53 L1767.71 1212.53 L1767.13 1212.53 L1766.54 1212.53 L1765.95 1212.53 L1765.37 1212.53 L1764.78 1212.53 L1764.19 1212.53 L1763.61 1212.53 L1763.02 1212.53 L1762.44 1212.53 L1761.85 1212.53 L1761.26 1212.53 L1760.68 1212.53 L1760.09 1212.53 L1759.5 1212.53 L1758.92 1212.53 L1758.33 1212.53 L1757.74 1212.53 L1757.16 1212.53 L1756.57 1212.53 L1755.99 1212.53 L1755.4 1212.53 L1754.81 1212.53 L1754.23 1212.53 L1753.64 1212.53 L1753.05 1212.53 L1752.47 1212.53 L1751.88 1212.53 L1751.29 1212.53 L1750.71 1212.53 L1750.12 1212.53 L1749.53 1212.53 L1748.95 1212.53 L1748.36 1212.53 L1747.78 1212.53 L1747.19 1212.53 L1746.6 1212.53 L1746.02 1212.53 L1745.43 1212.53 L1744.84 1212.53 L1744.26 1212.53 L1743.67 1212.53 L1743.08 1212.53 L1742.5 1212.53 L1741.91 1212.53 L1741.32 1212.53 L1740.74 1212.53 L1740.15 1212.53 L1739.57 1212.53 L1738.98 1212.53 L1738.39 1212.53 L1737.81 1212.53 L1737.22 1212.53 L1736.63 1212.53 L1736.05 1212.53 L1735.46 1212.53 L1734.87 1212.53 L1734.29 1212.53 L1733.7 1212.53 L1733.11 1212.53 L1732.53 1212.53 L1731.94 1212.53 L1731.36 1212.53 L1730.77 1212.53 L1730.18 1212.53 L1729.6 1212.53 L1729.01 1212.53 L1728.42 1212.53 L1727.84 1212.53 L1727.25 1212.53 L1726.66 1212.53 L1726.08 1212.53 L1725.49 1212.53 L1724.91 1212.53 L1724.32 1212.53 L1723.73 1212.53 L1723.15 1212.53 L1722.56 1212.53 L1721.97 1212.53 L1721.39 1212.53 L1720.8 1212.53 L1720.21 1212.53 L1719.63 1212.53 L1719.04 1212.53 L1718.45 1212.53 L1717.87 1212.53 L1717.28 1212.53 L1716.7 1212.53 L1716.11 1212.53 L1715.52 1212.53 L1714.94 1212.53 L1714.35 1212.53 L1713.76 1212.53 L1713.18 1212.53 L1712.59 1212.53 L1712 1212.53 L1711.42 1212.53 L1710.83 1212.53 L1710.24 1212.53 L1709.66 1212.53 L1709.07 1212.53 L1708.49 1212.53 L1707.9 1212.53 L1707.31 1212.53 L1706.73 1212.53 L1706.14 1212.53 L1705.55 1212.53 L1704.97 1212.53 L1704.38 1212.53 L1703.79 1212.53 L1703.21 1212.53 L1702.62 1212.53 L1702.04 1212.53 L1701.45 1212.53 L1700.86 1212.53 L1700.28 1212.53 L1699.69 1212.53 L1699.1 1212.53 L1698.52 1212.53 L1697.93 1212.53 L1697.34 1212.53 L1696.76 1212.53 L1696.17 1212.53 L1695.58 1212.53 L1695 1212.53 L1694.41 1212.53 L1693.83 1212.53 L1693.24 1212.53 L1692.65 1212.53 L1692.07 1212.53 L1691.48 1212.53 L1690.89 1212.53 L1690.31 1212.53 L1689.72 1212.53 L1689.13 1212.53 L1688.55 1212.53 L1687.96 1212.53 L1687.37 1212.53 L1686.79 1212.53 L1686.2 1212.53 L1685.62 1212.53 L1685.03 1212.53 L1684.44 1212.53 L1683.86 1212.53 L1683.27 1212.53 L1682.68 1212.53 L1682.1 1212.53 L1681.51 1212.53 L1680.92 1212.53 L1680.34 1212.53 L1679.75 1212.53 L1679.17 1212.53 L1678.58 1212.53 L1677.99 1212.53 L1677.41 1212.53 L1676.82 1212.53 L1676.23 1212.53 L1675.65 1212.53 L1675.06 1212.53 L1674.47 1212.53 L1673.89 1212.53 L1673.3 1212.53 L1672.71 1212.53 L1672.13 1212.53 L1671.54 1212.53 L1670.96 1212.53 L1670.37 1212.53 L1669.78 1212.53 L1669.2 1212.53 L1668.61 1212.53 L1668.02 1212.53 L1667.44 1212.53 L1666.85 1212.53 L1666.26 1212.53 L1665.68 1212.53 L1665.09 1212.53 L1664.5 1212.53 L1663.92 1212.53 L1663.33 1212.53 L1662.75 1212.53 L1662.16 1212.53 L1661.57 1212.53 L1660.99 1212.53 L1660.4 1212.53 L1659.81 1212.53 L1659.23 1212.53 L1658.64 1212.53 L1658.05 1212.53 L1657.47 1212.53 L1656.88 1212.53 L1656.29 1212.53 L1655.71 1212.53 L1655.12 1212.53 L1654.54 1212.53 L1653.95 1212.53 L1653.36 1212.53 L1652.78 1212.53 L1652.19 1212.53 L1651.6 1212.53 L1651.02 1212.53 L1650.43 1212.53 L1649.84 1212.53 L1649.26 1212.53 L1648.67 1212.53 L1648.09 1212.53 L1647.5 1212.53 L1646.91 1212.53 L1646.33 1212.53 L1645.74 1212.53 L1645.15 1212.53 L1644.57 1212.53 L1643.98 1212.53 L1643.39 1212.53 L1642.81 1212.53 L1642.22 1212.53 L1641.63 1212.53 L1641.05 1212.53 L1640.46 1212.53 L1639.88 1212.53 L1639.29 1212.53 L1638.7 1212.53 L1638.12 1212.53 L1637.53 1212.53 L1636.94 1212.53 L1636.36 1212.53 L1635.77 1212.53 L1635.18 1212.53 L1634.6 1212.53 L1634.01 1212.53 L1633.42 1212.53 L1632.84 1212.53 L1632.25 1212.53 L1631.67 1212.53 L1631.08 1212.53 L1630.49 1212.53 L1629.91 1212.53 L1629.32 1212.53 L1628.73 1212.53 L1628.15 1212.53 L1627.56 1212.53 L1626.97 1212.53 L1626.39 1212.53 L1625.8 1212.53 L1625.22 1212.53 L1624.63 1212.53 L1624.04 1212.53 L1623.46 1212.53 L1622.87 1212.53 L1622.28 1212.53 L1621.7 1212.53 L1621.11 1212.53 L1620.52 1212.53 L1619.94 1212.53 L1619.35 1212.53 L1618.76 1212.53 L1618.18 1212.53 L1617.59 1212.53 L1617.01 1212.53 L1616.42 1212.53 L1615.83 1212.53 L1615.25 1212.53 L1614.66 1212.53 L1614.07 1212.53 L1613.49 1212.53 L1612.9 1212.53 L1612.31 1212.53 L1611.73 1212.53 L1611.14 1212.53 L1610.55 1212.53 L1609.97 1212.53 L1609.38 1212.53 L1608.8 1212.53 L1608.21 1212.53 L1607.62 1212.53 L1607.04 1212.53 L1606.45 1212.53 L1605.86 1212.53 L1605.28 1212.53 L1604.69 1212.53 L1604.1 1212.53 L1603.52 1212.53 L1602.93 1212.53 L1602.34 1212.53 L1601.76 1212.53 L1601.17 1212.53 L1600.59 1212.53 L1600 1212.53 L1599.41 1212.53 L1598.83 1212.53 L1598.24 1212.53 L1597.65 1212.53 L1597.07 1212.53 L1596.48 1212.53 L1595.89 1212.53 L1595.31 1212.53 L1594.72 1212.53 L1594.14 1212.53 L1593.55 1212.53 L1592.96 1212.53 L1592.38 1212.53 L1591.79 1212.53 L1591.2 1212.53 L1590.62 1212.53 L1590.03 1212.53 L1589.44 1212.53 L1588.86 1212.53 L1588.27 1212.53 L1587.68 1212.53 L1587.1 1212.53 L1586.51 1212.53 L1585.93 1212.53 L1585.34 1212.53 L1584.75 1212.53 L1584.17 1212.53 L1583.58 1212.53 L1582.99 1212.53 L1582.41 1212.53 L1581.82 1212.53 L1581.23 1212.53 L1580.65 1212.53 L1580.06 1212.53 L1579.47 1212.53 L1578.89 1212.53 L1578.3 1212.53 L1577.72 1212.53 L1577.13 1212.53 L1576.54 1212.53 L1575.96 1212.53 L1575.37 1212.53 L1574.78 1212.53 L1574.2 1212.53 L1573.61 1212.53 L1573.02 1212.53 L1572.44 1212.53 L1571.85 1212.53 L1571.27 1212.53 L1570.68 1212.53 L1570.09 1212.53 L1569.51 1212.53 L1568.92 1212.53 L1568.33 1212.53 L1567.75 1212.53 L1567.16 1212.53 L1566.57 1212.53 L1565.99 1212.53 L1565.4 1212.53 L1564.81 1212.53 L1564.23 1212.53 L1563.64 1212.53 L1563.06 1212.53 L1562.47 1212.53 L1561.88 1212.53 L1561.3 1212.53 L1560.71 1212.53 L1560.12 1212.53 L1559.54 1212.53 L1558.95 1212.53 L1558.36 1212.53 L1557.78 1212.53 L1557.19 1212.53 L1556.6 1212.53 L1556.02 1212.53 L1555.43 1212.53 L1554.85 1212.53 L1554.26 1212.53 L1553.67 1212.53 L1553.09 1212.53 L1552.5 1212.53 L1551.91 1212.53 L1551.33 1212.53 L1550.74 1212.53 L1550.15 1212.53 L1549.57 1212.53 L1548.98 1212.53 L1548.4 1212.53 L1547.81 1212.53 L1547.22 1212.53 L1546.64 1212.53 L1546.05 1212.53 L1545.46 1212.53 L1544.88 1212.53 L1544.29 1212.53 L1543.7 1212.53 L1543.12 1212.53 L1542.53 1212.53 L1541.94 1212.53 L1541.36 1212.53 L1540.77 1212.53 L1540.19 1212.53 L1539.6 1212.53 L1539.01 1212.53 L1538.43 1212.53 L1537.84 1212.53 L1537.25 1212.53 L1536.67 1212.53 L1536.08 1212.53 L1535.49 1212.53 L1534.91 1212.53 L1534.32 1212.53 L1533.73 1212.53 L1533.15 1212.53 L1532.56 1212.53 L1531.98 1212.53 L1531.39 1212.53 L1530.8 1212.53 L1530.22 1212.53 L1529.63 1212.53 L1529.04 1212.53 L1528.46 1212.53 L1527.87 1212.53 L1527.28 1212.53 L1526.7 1212.53 L1526.11 1212.53 L1525.52 1212.53 L1524.94 1212.53 L1524.35 1212.53 L1523.77 1212.53 L1523.18 1212.53 L1522.59 1212.53 L1522.01 1212.53 L1521.42 1212.53 L1520.83 1212.53 L1520.25 1212.53 L1519.66 1212.53 L1519.07 1212.53 L1518.49 1212.53 L1517.9 1212.53 L1517.32 1212.53 L1516.73 1212.53 L1516.14 1212.53 L1515.56 1212.53 L1514.97 1212.53 L1514.38 1212.53 L1513.8 1212.53 L1513.21 1212.53 L1512.62 1212.53 L1512.04 1212.53 L1511.45 1212.53 L1510.86 1212.53 L1510.28 1212.53 L1509.69 1212.53 L1509.11 1212.53 L1508.52 1212.53 L1507.93 1212.53 L1507.35 1212.53 L1506.76 1212.53 L1506.17 1212.53 L1505.59 1212.53 L1505 1212.53 L1504.41 1212.53 L1503.83 1212.53 L1503.24 1212.53 L1502.65 1212.53 L1502.07 1212.53 L1501.48 1212.53 L1500.9 1212.53 L1500.31 1212.53 L1499.72 1212.53 L1499.14 1212.53 L1498.55 1212.53 L1497.96 1212.53 L1497.38 1212.53 L1496.79 1212.53 L1496.2 1212.53 L1495.62 1212.53 L1495.03 1212.53 L1494.45 1212.53 L1493.86 1212.53 L1493.27 1212.53 L1492.69 1212.53 L1492.1 1212.53 L1491.51 1212.53 L1490.93 1212.53 L1490.34 1212.53 L1489.75 1212.53 L1489.17 1212.53 L1488.58 1212.53 L1487.99 1212.53 L1487.41 1212.53 L1486.82 1212.53 L1486.24 1212.53 L1485.65 1212.53 L1485.06 1212.53 L1484.48 1212.53 L1483.89 1212.53 L1483.3 1212.53 L1482.72 1212.53 L1482.13 1212.53 L1481.54 1212.53 L1480.96 1212.53 L1480.37 1212.53 L1479.78 1212.53 L1479.2 1212.53 L1478.61 1212.53 L1478.03 1212.53 L1477.44 1212.53 L1476.85 1212.53 L1476.27 1212.53 L1475.68 1212.53 L1475.09 1212.53 L1474.51 1212.53 L1473.92 1212.53 L1473.33 1212.53 L1472.75 1212.53 L1472.16 1212.53 L1471.57 1212.53 L1470.99 1212.53 L1470.4 1212.53 L1469.82 1212.53 L1469.23 1212.53 L1468.64 1212.53 L1468.06 1212.53 L1467.47 1212.53 L1466.88 1212.53 L1466.3 1212.53 L1465.71 1212.53 L1465.12 1212.53 L1464.54 1212.53 L1463.95 1212.53 L1463.37 1212.53 L1462.78 1212.53 L1462.19 1212.53 L1461.61 1212.53 L1461.02 1212.53 L1460.43 1212.53 L1459.85 1212.53 L1459.26 1212.53 L1458.67 1212.53 L1458.09 1212.53 L1457.5 1212.53 L1456.91 1212.53 L1456.33 1212.53 L1455.74 1212.53 L1455.16 1212.53 L1454.57 1212.53 L1453.98 1212.53 L1453.4 1212.53 L1452.81 1212.53 L1452.22 1212.53 L1451.64 1212.53 L1451.05 1212.53 L1450.46 1212.53 L1449.88 1212.53 L1449.29 1212.53 L1448.7 1212.53 L1448.12 1212.53 L1447.53 1212.53 L1446.95 1212.53 L1446.36 1212.53 L1445.77 1212.53 L1445.19 1212.53 L1444.6 1212.53 L1444.01 1212.53 L1443.43 1212.53 L1442.84 1212.53 L1442.25 1212.53 L1441.67 1212.53 L1441.08 1212.53 L1440.5 1212.53 L1439.91 1212.53 L1439.32 1212.53 L1438.74 1212.53 L1438.15 1212.53 L1437.56 1212.53 L1436.98 1212.53 L1436.39 1212.53 L1435.8 1212.53 L1435.22 1212.53 L1434.63 1212.53 L1434.04 1212.53 L1433.46 1212.53 L1432.87 1212.53 L1432.29 1212.53 L1431.7 1212.53 L1431.11 1212.53 L1430.53 1212.53 L1429.94 1212.53 L1429.35 1212.53 L1428.77 1212.53 L1428.18 1212.53 L1427.59 1212.53 L1427.01 1212.53 L1426.42 1212.53 L1425.83 1212.53 L1425.25 1212.53 L1424.66 1212.53 L1424.08 1212.53 L1423.49 1212.53 L1422.9 1212.53 L1422.32 1212.53 L1421.73 1212.53 L1421.14 1212.53 L1420.56 1212.53 L1419.97 1212.53 L1419.38 1212.53 L1418.8 1212.53 L1418.21 1212.53 L1417.63 1212.53 L1417.04 1212.53 L1416.45 1212.53 L1415.87 1212.53 L1415.28 1212.53 L1414.69 1212.53 L1414.11 1212.53 L1413.52 1212.53 L1412.93 1212.53 L1412.35 1212.53 L1411.76 1212.53 L1411.17 1212.53 L1410.59 1212.53 L1410 1212.53 L1409.42 1212.53 L1408.83 1212.53 L1408.24 1212.53 L1407.66 1212.53 L1407.07 1212.53 L1406.48 1212.53 L1405.9 1212.53 L1405.31 1212.53 L1404.72 1212.53 L1404.14 1212.53 L1403.55 1212.53 L1402.96 1212.53 L1402.38 1212.53 L1401.79 1212.53 L1401.21 1212.53 L1400.62 1212.53 L1400.03 1212.53 L1399.45 1212.53 L1398.86 1212.53 L1398.27 1212.53 L1397.69 1212.53 L1397.1 1212.53 L1396.51 1212.53 L1395.93 1212.53 L1395.34 1212.53 L1394.75 1212.53 L1394.17 1212.53 L1393.58 1212.53 L1393 1212.53 L1392.41 1212.53 L1391.82 1212.53 L1391.24 1212.53 L1390.65 1212.53 L1390.06 1212.53 L1389.48 1212.53 L1388.89 1212.53 L1388.3 1212.53 L1387.72 1212.53 L1387.13 1212.53 L1386.55 1212.53 L1385.96 1212.53 L1385.37 1212.53 L1384.79 1212.53 L1384.2 1212.53 L1383.61 1212.53 L1383.03 1212.53 L1382.44 1212.53 L1381.85 1212.53 L1381.27 1212.53 L1380.68 1212.53 L1380.09 1212.53 L1379.51 1212.53 L1378.92 1212.53 L1378.34 1212.53 L1377.75 1212.53 L1377.16 1212.53 L1376.58 1212.53 L1375.99 1212.53 L1375.4 1212.53 L1374.82 1212.53 L1374.23 1212.53 L1373.64 1212.53 L1373.06 1212.53 L1372.47 1212.53 L1371.88 1212.53 L1371.3 1212.53 L1370.71 1212.53 L1370.13 1212.53 L1369.54 1212.53 L1368.95 1212.53 L1368.37 1212.53 L1367.78 1212.53 L1367.19 1212.53 L1366.61 1212.53 L1366.02 1212.53 L1365.43 1212.53 L1364.85 1212.53 L1364.26 1212.53 L1363.68 1212.53 L1363.09 1212.53 L1362.5 1212.53 L1361.92 1212.53 L1361.33 1212.53 L1360.74 1212.53 L1360.16 1212.53 L1359.57 1212.53 L1358.98 1212.53 L1358.4 1212.53 L1357.81 1212.53 L1357.22 1212.53 L1356.64 1212.53 L1356.05 1212.53 L1355.47 1212.53 L1354.88 1212.53 L1354.29 1212.53 L1353.71 1212.53 L1353.12 1212.53 L1352.53 1212.53 L1351.95 1212.53 L1351.36 1212.53 L1350.77 1212.53 L1350.19 1212.53 L1349.6 1212.53 L1349.01 1212.53 L1348.43 1212.53 L1347.84 1212.53 L1347.26 1212.53 L1346.67 1212.53 L1346.08 1212.53 L1345.5 1212.53 L1344.91 1212.53 L1344.32 1212.53 L1343.74 1212.53 L1343.15 1212.53 L1342.56 1212.53 L1341.98 1212.53 L1341.39 1212.53 L1340.8 1212.53 L1340.22 1212.53 L1339.63 1212.53 L1339.05 1212.53 L1338.46 1212.53 L1337.87 1212.53 L1337.29 1212.53 L1336.7 1212.53 L1336.11 1212.53 L1335.53 1212.53 L1334.94 1212.53 L1334.35 1212.53 L1333.77 1212.53 L1333.18 1212.53 L1332.6 1212.53 L1332.01 1212.53 L1331.42 1212.53 L1330.84 1212.53 L1330.25 1212.53 L1329.66 1212.53 L1329.08 1212.53 L1328.49 1212.53 L1327.9 1212.53 L1327.32 1212.53 L1326.73 1212.53 L1326.14 1212.53 L1325.56 1212.53 L1324.97 1212.53 L1324.39 1212.53 L1323.8 1212.53 L1323.21 1212.53 L1322.63 1212.53 L1322.04 1212.53 L1321.45 1212.53 L1320.87 1212.53 L1320.28 1212.53 L1319.69 1212.53 L1319.11 1212.53 L1318.52 1212.53 L1317.93 1212.53 L1317.35 1212.53 L1316.76 1212.53 L1316.18 1212.53 L1315.59 1212.53 L1315 1212.53 L1314.42 1212.53 L1313.83 1212.53 L1313.24 1212.53 L1312.66 1212.53 L1312.07 1212.53 L1311.48 1212.53 L1310.9 1212.53 L1310.31 1212.53 L1309.73 1212.53 L1309.14 1212.53 L1308.55 1212.53 L1307.97 1212.53 L1307.38 1212.53 L1306.79 1212.53 L1306.21 1212.53 L1305.62 1212.53 L1305.03 1212.53 L1304.45 1212.53 L1303.86 1212.53 L1303.27 1212.53 L1302.69 1212.53 L1302.1 1212.53 L1301.52 1212.53 L1300.93 1212.53 L1300.34 1212.53 L1299.76 1212.53 L1299.17 1212.53 L1298.58 1212.53 L1298 1212.53 L1297.41 1212.53 L1296.82 1212.53 L1296.24 1212.53 L1295.65 1212.53 L1295.06 1212.53 L1294.48 1212.53 L1293.89 1212.53 L1293.31 1212.53 L1292.72 1212.53 L1292.13 1212.53 L1291.55 1212.53 L1290.96 1212.53 L1290.37 1212.53 L1289.79 1212.53 L1289.2 1212.53 L1288.61 1212.53 L1288.03 1212.53 L1287.44 1212.53 L1286.86 1212.53 L1286.27 1212.53 L1285.68 1212.53 L1285.1 1212.53 L1284.51 1212.53 L1283.92 1212.53 L1283.34 1212.53 L1282.75 1212.53 L1282.16 1212.53 L1281.58 1212.53 L1280.99 1212.53 L1280.4 1212.53 L1279.82 1212.53 L1279.23 1212.53 L1278.65 1212.53 L1278.06 1212.53 L1277.47 1212.53 L1276.89 1212.53 L1276.3 1212.53 L1275.71 1212.53 L1275.13 1212.53 L1274.54 1212.53 L1273.95 1212.53 L1273.37 1212.53 L1272.78 1212.53 L1272.19 1212.53 L1271.61 1212.53 L1271.02 1212.53 L1270.44 1212.53 L1269.85 1212.53 L1269.26 1212.53 L1268.68 1212.53 L1268.09 1212.53 L1267.5 1212.53 L1266.92 1212.53 L1266.33 1212.53 L1265.74 1212.53 L1265.16 1212.53 L1264.57 1212.53 L1263.98 1212.53 L1263.4 1212.53 L1262.81 1212.53 L1262.23 1212.53 L1261.64 1212.53 L1261.05 1212.53 L1260.47 1212.53 L1259.88 1212.53 L1259.29 1212.53 L1258.71 1212.53 L1258.12 1212.53 L1257.53 1212.53 L1256.95 1212.53 L1256.36 1212.53 L1255.78 1212.53 L1255.19 1212.53 L1254.6 1212.53 L1254.02 1212.53 L1253.43 1212.53 L1252.84 1212.53 L1252.26 1212.53 L1251.67 1212.53 L1251.08 1212.53 L1250.5 1212.53 L1249.91 1212.53 L1249.32 1212.53 L1248.74 1212.53 L1248.15 1212.53 L1247.57 1212.53 L1246.98 1212.53 L1246.39 1212.53 L1245.81 1212.53 L1245.22 1212.53 L1244.63 1212.53 L1244.05 1212.53 L1243.46 1212.53 L1242.87 1212.53 L1242.29 1212.53 L1241.7 1212.53 L1241.11 1212.53 L1240.53 1212.53 L1239.94 1212.53 L1239.36 1212.53 L1238.77 1212.53 L1238.18 1212.53 L1237.6 1212.53 L1237.01 1212.53 L1236.42 1212.53 L1235.84 1212.53 L1235.25 1212.53 L1234.66 1212.53 L1234.08 1212.53 L1233.49 1212.53 L1232.91 1212.53 L1232.32 1212.53 L1231.73 1212.53 L1231.15 1212.53 L1230.56 1212.53 L1229.97 1212.53 L1229.39 1212.53 L1228.8 1212.53 L1228.21 1212.53 L1227.63 1212.53 L1227.04 1212.53 L1226.45 1212.53 L1225.87 1212.53 L1225.28 1212.53 L1224.7 1212.53 L1224.11 1212.53 L1223.52 1212.53 L1222.94 1212.53 L1222.35 1212.53 L1221.76 1212.53 L1221.18 1212.53 L1220.59 1212.53 L1220 1212.53 L1219.42 1212.53 L1218.83 1212.53 L1218.24 1212.53 L1217.66 1212.53 L1217.07 1212.53 L1216.49 1212.53 L1215.9 1212.53 L1215.31 1212.53 L1214.73 1212.53 L1214.14 1212.53 L1213.55 1212.53 L1212.97 1212.53 L1212.38 1212.53 L1211.79 1212.53 L1211.21 1212.53 L1210.62 1212.53 L1210.03 1212.53 L1209.45 1212.53 L1208.86 1212.53 L1208.28 1212.53 L1207.69 1212.53 L1207.1 1212.53 L1206.52 1212.53 L1205.93 1212.53 L1205.34 1212.53 L1204.76 1212.53 L1204.17 1212.53 L1203.58 1212.53 L1203 1212.53 L1202.41 1212.53 L1201.83 1212.53 L1201.24 1212.53 L1200.65 1212.53 L1200.07 1212.53 L1199.48 1212.53 L1198.89 1212.53 L1198.31 1212.53 L1197.72 1212.53 L1197.13 1212.53 L1196.55 1212.53 L1195.96 1212.53 L1195.37 1212.53 L1194.79 1212.53 L1194.2 1212.53 L1193.62 1212.53 L1193.03 1212.53 L1192.44 1212.53 L1191.86 1212.53 L1191.27 1212.53 L1190.68 1212.53 L1190.1 1212.53 L1189.51 1212.53 L1188.92 1212.53 L1188.34 1212.53 L1187.75 1212.53 L1187.16 1212.53 L1186.58 1212.53 L1185.99 1212.53 L1185.41 1212.53 L1184.82 1212.53 L1184.23 1212.53 L1183.65 1212.53 L1183.06 1212.53 L1182.47 1212.53 L1181.89 1212.53 L1181.3 1212.53 L1180.71 1212.53 L1180.13 1212.53 L1179.54 1212.53 L1178.96 1212.53 L1178.37 1212.53 L1177.78 1212.53 L1177.2 1212.53 L1176.61 1212.53 L1176.02 1212.53 L1175.44 1212.53 L1174.85 1212.53 L1174.26 1212.53 L1173.68 1212.53 L1173.09 1212.53 L1172.5 1212.53 L1171.92 1212.53 L1171.33 1212.53 L1170.75 1212.53 L1170.16 1212.53 L1169.57 1212.53 L1168.99 1212.53 L1168.4 1212.53 L1167.81 1212.53 L1167.23 1212.53 L1166.64 1212.53 L1166.05 1212.53 L1165.47 1212.53 L1164.88 1212.53 L1164.29 1212.53 L1163.71 1212.53 L1163.12 1212.53 L1162.54 1212.53 L1161.95 1212.53 L1161.36 1212.53 L1160.78 1212.53 L1160.19 1212.53 L1159.6 1212.53 L1159.02 1212.53 L1158.43 1212.53 L1157.84 1212.53 L1157.26 1212.53 L1156.67 1212.53 L1156.09 1212.53 L1155.5 1212.53 L1154.91 1212.53 L1154.33 1212.53 L1153.74 1212.53 L1153.15 1212.53 L1152.57 1212.53 L1151.98 1212.53 L1151.39 1212.53 L1150.81 1212.53 L1150.22 1212.53 L1149.63 1212.53 L1149.05 1212.53 L1148.46 1212.53 L1147.88 1212.53 L1147.29 1212.53 L1146.7 1212.53 L1146.12 1212.53 L1145.53 1212.53 L1144.94 1212.53 L1144.36 1212.53 L1143.77 1212.53 L1143.18 1212.53 L1142.6 1212.53 L1142.01 1212.53 L1141.42 1212.53 L1140.84 1212.53 L1140.25 1212.53 L1139.67 1212.53 L1139.08 1212.53 L1138.49 1212.53 L1137.91 1212.53 L1137.32 1212.53 L1136.73 1212.53 L1136.15 1212.53 L1135.56 1212.53 L1134.97 1212.53 L1134.39 1212.53 L1133.8 1212.53 L1133.21 1212.53 L1132.63 1212.53 L1132.04 1212.53 L1131.46 1212.53 L1130.87 1212.53 L1130.28 1212.53 L1129.7 1212.53 L1129.11 1212.53 L1128.52 1212.53 L1127.94 1212.53 L1127.35 1212.53 L1126.76 1212.53 L1126.18 1212.53 L1125.59 1212.53 L1125.01 1212.53 L1124.42 1212.53 L1123.83 1212.53 L1123.25 1212.53 L1122.66 1212.53 L1122.07 1212.53 L1121.49 1212.53 L1120.9 1212.53 L1120.31 1212.53 L1119.73 1212.53 L1119.14 1212.53 L1118.55 1212.53 L1117.97 1212.53 L1117.38 1212.53 L1116.8 1212.53 L1116.21 1212.53 L1115.62 1212.53 L1115.04 1212.53 L1114.45 1212.53 L1113.86 1212.53 L1113.28 1212.53 L1112.69 1212.53 L1112.1 1212.53 L1111.52 1212.53 L1110.93 1212.53 L1110.34 1212.53 L1109.76 1212.53 L1109.17 1212.53 L1108.59 1212.53 L1108 1212.53 L1107.41 1212.53 L1106.83 1212.53 L1106.24 1212.53 L1105.65 1212.53 L1105.07 1212.53 L1104.48 1212.53 L1103.89 1212.53 L1103.31 1212.53 L1102.72 1212.53 L1102.14 1212.53 L1101.55 1212.53 L1100.96 1212.53 L1100.38 1212.53 L1099.79 1212.53 L1099.2 1212.53 L1098.62 1212.53 L1098.03 1212.53 L1097.44 1212.53 L1096.86 1212.53 L1096.27 1212.53 L1095.68 1212.53 L1095.1 1212.53 L1094.51 1212.53 L1093.93 1212.53 L1093.34 1212.53 L1092.75 1212.53 L1092.17 1212.53 L1091.58 1212.53 L1090.99 1212.53 L1090.41 1212.53 L1089.82 1212.53 L1089.23 1212.53 L1088.65 1212.53 L1088.06 1212.53 L1087.47 1212.53 L1086.89 1212.53 L1086.3 1212.53 L1085.72 1212.53 L1085.13 1212.53 L1084.54 1212.53 L1083.96 1212.53 L1083.37 1212.53 L1082.78 1212.53 L1082.2 1212.53 L1081.61 1212.53 L1081.02 1212.53 L1080.44 1212.53 L1079.85 1212.53 L1079.26 1212.53 L1078.68 1212.53 L1078.09 1212.53 L1077.51 1212.53 L1076.92 1212.53 L1076.33 1212.53 L1075.75 1212.53 L1075.16 1212.53 L1074.57 1212.53 L1073.99 1212.53 L1073.4 1212.53 L1072.81 1212.53 L1072.23 1212.53 L1071.64 1212.53 L1071.06 1212.53 L1070.47 1212.53 L1069.88 1212.53 L1069.3 1212.53 L1068.71 1212.53 L1068.12 1212.53 L1067.54 1212.53 L1066.95 1212.53 L1066.36 1212.53 L1065.78 1212.53 L1065.19 1212.53 L1064.6 1212.53 L1064.02 1212.53 L1063.43 1212.53 L1062.85 1212.53 L1062.26 1212.53 L1061.67 1212.53 L1061.09 1212.53 L1060.5 1212.53 L1059.91 1212.53 L1059.33 1212.53 L1058.74 1212.53 L1058.15 1212.53 L1057.57 1212.53 L1056.98 1212.53 L1056.39 1212.53 L1055.81 1212.53 L1055.22 1212.53 L1054.64 1212.53 L1054.05 1212.53 L1053.46 1212.53 L1052.88 1212.53 L1052.29 1212.53 L1051.7 1212.53 L1051.12 1212.53 L1050.53 1212.53 L1049.94 1212.53 L1049.36 1212.53 L1048.77 1212.53 L1048.19 1212.53 L1047.6 1212.53 L1047.01 1212.53 L1046.43 1212.53 L1045.84 1212.53 L1045.25 1212.53 L1044.67 1212.53 L1044.08 1212.53 L1043.49 1212.53 L1042.91 1212.53 L1042.32 1212.53 L1041.73 1212.53 L1041.15 1212.53 L1040.56 1212.53 L1039.98 1212.53 L1039.39 1212.53 L1038.8 1212.53 L1038.22 1212.53 L1037.63 1212.53 L1037.04 1212.53 L1036.46 1212.53 L1035.87 1212.53 L1035.28 1212.53 L1034.7 1212.53 L1034.11 1212.53 L1033.52 1212.53 L1032.94 1212.53 L1032.35 1212.53 L1031.77 1212.53 L1031.18 1212.53 L1030.59 1212.53 L1030.01 1212.53 L1029.42 1212.53 L1028.83 1212.53 L1028.25 1212.53 L1027.66 1212.53 L1027.07 1212.53 L1026.49 1212.53 L1025.9 1212.53 L1025.32 1212.53 L1024.73 1212.53 L1024.14 1212.53 L1023.56 1212.53 L1022.97 1212.53 L1022.38 1212.53 L1021.8 1212.53 L1021.21 1212.53 L1020.62 1212.53 L1020.04 1212.53 L1019.45 1212.53 L1018.86 1212.53 L1018.28 1212.53 L1017.69 1212.53 L1017.11 1212.53 L1016.52 1212.53 L1015.93 1212.53 L1015.35 1212.53 L1014.76 1212.53 L1014.17 1212.53 L1013.59 1212.53 L1013 1212.53 L1012.41 1212.53 L1011.83 1212.53 L1011.24 1212.53 L1010.65 1212.53 L1010.07 1212.53 L1009.48 1212.53 L1008.9 1212.53 L1008.31 1212.53 L1007.72 1212.53 L1007.14 1212.53 L1006.55 1212.53 L1005.96 1212.53 L1005.38 1212.53 L1004.79 1212.53 L1004.2 1212.53 L1003.62 1212.53 L1003.03 1212.53 L1002.44 1212.53 L1001.86 1212.53 L1001.27 1212.53 L1000.69 1212.53 L1000.1 1212.53 L999.513 1212.53 L998.926 1212.53 L998.34 1212.53 L997.754 1212.53 L997.167 1212.53 L996.581 1212.53 L995.994 1212.53 L995.408 1212.53 L994.822 1212.53 L994.235 1212.53 L993.649 1212.53 L993.062 1212.53 L992.476 1212.53 L991.889 1212.53 L991.303 1212.53 L990.717 1212.53 L990.13 1212.53 L989.544 1212.53 L988.957 1212.53 L988.371 1212.53 L987.785 1212.53 L987.198 1212.53 L986.612 1212.53 L986.025 1212.53  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip692)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"986.025,1212.59 986.612,1212.59 987.198,1212.59 987.785,1212.59 988.371,1212.59 988.957,1212.59 989.544,1212.59 990.13,1212.59 990.717,1212.59 991.303,1212.59 991.889,1212.59 992.476,1212.59 993.062,1212.59 993.649,1212.59 994.235,1212.59 994.822,1212.59 995.408,1212.59 995.994,1212.59 996.581,1212.59 997.167,1212.59 997.754,1212.59 998.34,1212.59 998.926,1212.59 999.513,1212.59 1000.1,1212.59 1000.69,1212.59 1001.27,1212.59 1001.86,1212.59 1002.44,1212.59 1003.03,1212.59 1003.62,1212.59 1004.2,1212.59 1004.79,1212.59 1005.38,1212.59 1005.96,1212.59 1006.55,1212.59 1007.14,1212.59 1007.72,1212.59 1008.31,1212.59 1008.9,1212.59 1009.48,1212.59 1010.07,1212.59 1010.65,1212.59 1011.24,1212.59 1011.83,1212.59 1012.41,1212.59 1013,1212.59 1013.59,1212.59 1014.17,1212.59 1014.76,1212.59 1015.35,1212.59 1015.93,1212.59 1016.52,1212.59 1017.11,1212.59 1017.69,1212.59 1018.28,1212.59 1018.86,1212.59 1019.45,1212.59 1020.04,1212.59 1020.62,1212.59 1021.21,1212.59 1021.8,1212.59 1022.38,1212.59 1022.97,1212.59 1023.56,1212.59 1024.14,1212.59 1024.73,1212.59 1025.32,1212.59 1025.9,1212.59 1026.49,1212.59 1027.07,1212.59 1027.66,1212.59 1028.25,1212.59 1028.83,1212.59 1029.42,1212.59 1030.01,1212.59 1030.59,1212.59 1031.18,1212.59 1031.77,1212.59 1032.35,1212.59 1032.94,1212.59 1033.52,1212.59 1034.11,1212.59 1034.7,1212.59 1035.28,1212.59 1035.87,1212.59 1036.46,1212.59 1037.04,1212.59 1037.63,1212.59 1038.22,1212.59 1038.8,1212.59 1039.39,1212.59 1039.98,1212.59 1040.56,1212.59 1041.15,1212.59 1041.73,1212.59 1042.32,1212.59 1042.91,1212.59 1043.49,1212.59 1044.08,1212.59 1044.67,1212.59 1045.25,1212.59 1045.84,1212.59 1046.43,1212.59 1047.01,1212.59 1047.6,1212.59 1048.19,1212.59 1048.77,1212.59 1049.36,1212.59 1049.94,1212.59 1050.53,1212.59 1051.12,1212.59 1051.7,1212.59 1052.29,1212.59 1052.88,1212.59 1053.46,1212.59 1054.05,1212.59 1054.64,1212.59 1055.22,1212.59 1055.81,1212.59 1056.39,1212.59 1056.98,1212.59 1057.57,1212.59 1058.15,1212.59 1058.74,1212.59 1059.33,1212.59 1059.91,1212.59 1060.5,1212.59 1061.09,1212.59 1061.67,1212.59 1062.26,1212.59 1062.85,1212.59 1063.43,1212.59 1064.02,1212.59 1064.6,1212.59 1065.19,1212.59 1065.78,1212.59 1066.36,1212.59 1066.95,1212.59 1067.54,1212.59 1068.12,1212.59 1068.71,1212.59 1069.3,1212.59 1069.88,1212.59 1070.47,1212.59 1071.06,1212.59 1071.64,1212.59 1072.23,1212.59 1072.81,1212.59 1073.4,1212.59 1073.99,1212.59 1074.57,1212.59 1075.16,1212.59 1075.75,1212.59 1076.33,1212.59 1076.92,1212.59 1077.51,1212.59 1078.09,1212.59 1078.68,1212.59 1079.26,1212.59 1079.85,1212.59 1080.44,1212.59 1081.02,1212.59 1081.61,1212.59 1082.2,1212.59 1082.78,1212.59 1083.37,1212.59 1083.96,1212.59 1084.54,1212.59 1085.13,1212.59 1085.72,1212.59 1086.3,1212.59 1086.89,1212.59 1087.47,1212.59 1088.06,1212.59 1088.65,1212.59 1089.23,1212.59 1089.82,1212.59 1090.41,1212.59 1090.99,1212.59 1091.58,1212.59 1092.17,1212.59 1092.75,1212.59 1093.34,1212.59 1093.93,1212.59 1094.51,1212.59 1095.1,1212.59 1095.68,1212.59 1096.27,1212.59 1096.86,1212.59 1097.44,1212.59 1098.03,1212.59 1098.62,1212.59 1099.2,1212.59 1099.79,1212.59 1100.38,1212.59 1100.96,1212.59 1101.55,1212.59 1102.14,1212.59 1102.72,1212.59 1103.31,1212.59 1103.89,1212.59 1104.48,1212.59 1105.07,1212.59 1105.65,1212.59 1106.24,1212.59 1106.83,1212.59 1107.41,1212.59 1108,1212.59 1108.59,1212.59 1109.17,1212.59 1109.76,1212.59 1110.34,1212.59 1110.93,1212.59 1111.52,1212.59 1112.1,1212.59 1112.69,1212.59 1113.28,1212.59 1113.86,1212.59 1114.45,1212.59 1115.04,1212.59 1115.62,1212.59 1116.21,1212.59 1116.8,1212.59 1117.38,1212.59 1117.97,1212.59 1118.55,1212.59 1119.14,1212.59 1119.73,1212.59 1120.31,1212.59 1120.9,1212.59 1121.49,1212.59 1122.07,1212.59 1122.66,1212.59 1123.25,1212.59 1123.83,1212.59 1124.42,1212.59 1125.01,1212.59 1125.59,1212.59 1126.18,1212.59 1126.76,1212.59 1127.35,1212.59 1127.94,1212.59 1128.52,1212.59 1129.11,1212.59 1129.7,1212.59 1130.28,1212.59 1130.87,1212.59 1131.46,1212.59 1132.04,1212.59 1132.63,1212.59 1133.21,1212.59 1133.8,1212.59 1134.39,1212.59 1134.97,1212.59 1135.56,1212.59 1136.15,1212.59 1136.73,1212.59 1137.32,1212.59 1137.91,1212.59 1138.49,1212.59 1139.08,1212.59 1139.67,1212.59 1140.25,1212.59 1140.84,1212.59 1141.42,1212.59 1142.01,1212.59 1142.6,1212.59 1143.18,1212.59 1143.77,1212.59 1144.36,1212.59 1144.94,1212.59 1145.53,1212.59 1146.12,1212.59 1146.7,1212.59 1147.29,1212.59 1147.88,1212.59 1148.46,1212.59 1149.05,1212.59 1149.63,1212.59 1150.22,1212.59 1150.81,1212.59 1151.39,1212.59 1151.98,1212.59 1152.57,1212.59 1153.15,1212.59 1153.74,1212.59 1154.33,1212.59 1154.91,1212.59 1155.5,1212.59 1156.09,1212.59 1156.67,1212.59 1157.26,1212.59 1157.84,1212.59 1158.43,1212.59 1159.02,1212.59 1159.6,1212.59 1160.19,1212.59 1160.78,1212.59 1161.36,1212.59 1161.95,1212.59 1162.54,1212.59 1163.12,1212.59 1163.71,1212.59 1164.29,1212.59 1164.88,1212.59 1165.47,1212.59 1166.05,1212.59 1166.64,1212.59 1167.23,1212.59 1167.81,1212.59 1168.4,1212.59 1168.99,1212.59 1169.57,1212.59 1170.16,1212.59 1170.75,1212.59 1171.33,1212.59 1171.92,1212.59 1172.5,1212.59 1173.09,1212.59 1173.68,1212.59 1174.26,1212.59 1174.85,1212.59 1175.44,1212.59 1176.02,1212.59 1176.61,1212.59 1177.2,1212.59 1177.78,1212.59 1178.37,1212.59 1178.96,1212.59 1179.54,1212.59 1180.13,1212.59 1180.71,1212.59 1181.3,1212.59 1181.89,1212.59 1182.47,1212.59 1183.06,1212.59 1183.65,1212.59 1184.23,1212.59 1184.82,1212.59 1185.41,1212.59 1185.99,1212.59 1186.58,1212.59 1187.16,1212.59 1187.75,1212.59 1188.34,1212.59 1188.92,1212.59 1189.51,1212.59 1190.1,1212.59 1190.68,1212.59 1191.27,1212.59 1191.86,1212.59 1192.44,1212.59 1193.03,1212.59 1193.62,1212.59 1194.2,1212.59 1194.79,1212.59 1195.37,1212.59 1195.96,1212.59 1196.55,1212.59 1197.13,1212.59 1197.72,1212.59 1198.31,1212.59 1198.89,1212.59 1199.48,1212.59 1200.07,1212.59 1200.65,1212.59 1201.24,1212.59 1201.83,1212.59 1202.41,1212.59 1203,1212.59 1203.58,1212.59 1204.17,1212.59 1204.76,1212.59 1205.34,1212.59 1205.93,1212.59 1206.52,1212.59 1207.1,1212.59 1207.69,1212.59 1208.28,1212.59 1208.86,1212.59 1209.45,1212.59 1210.03,1212.59 1210.62,1212.59 1211.21,1212.59 1211.79,1212.59 1212.38,1212.59 1212.97,1212.59 1213.55,1212.59 1214.14,1212.59 1214.73,1212.59 1215.31,1212.59 1215.9,1212.59 1216.49,1212.59 1217.07,1212.59 1217.66,1212.59 1218.24,1212.59 1218.83,1212.59 1219.42,1212.59 1220,1212.59 1220.59,1212.59 1221.18,1212.59 1221.76,1212.59 1222.35,1212.59 1222.94,1212.59 1223.52,1212.59 1224.11,1212.59 1224.7,1212.59 1225.28,1212.59 1225.87,1212.59 1226.45,1212.59 1227.04,1212.59 1227.63,1212.59 1228.21,1212.59 1228.8,1212.59 1229.39,1212.59 1229.97,1212.59 1230.56,1212.59 1231.15,1212.59 1231.73,1212.59 1232.32,1212.59 1232.91,1212.59 1233.49,1212.59 1234.08,1212.59 1234.66,1212.59 1235.25,1212.59 1235.84,1212.59 1236.42,1212.59 1237.01,1212.59 1237.6,1212.59 1238.18,1212.59 1238.77,1212.59 1239.36,1212.59 1239.94,1212.59 1240.53,1212.59 1241.11,1212.59 1241.7,1212.59 1242.29,1212.59 1242.87,1212.59 1243.46,1212.59 1244.05,1212.59 1244.63,1212.59 1245.22,1212.59 1245.81,1212.59 1246.39,1212.59 1246.98,1212.59 1247.57,1212.59 1248.15,1212.59 1248.74,1212.59 1249.32,1212.59 1249.91,1212.59 1250.5,1212.59 1251.08,1212.59 1251.67,1212.59 1252.26,1212.59 1252.84,1212.59 1253.43,1212.59 1254.02,1212.59 1254.6,1212.59 1255.19,1212.59 1255.78,1212.59 1256.36,1212.59 1256.95,1212.59 1257.53,1212.59 1258.12,1212.59 1258.71,1212.59 1259.29,1212.59 1259.88,1212.59 1260.47,1212.59 1261.05,1212.59 1261.64,1212.59 1262.23,1212.59 1262.81,1212.59 1263.4,1212.59 1263.98,1212.59 1264.57,1212.59 1265.16,1212.59 1265.74,1212.59 1266.33,1212.59 1266.92,1212.59 1267.5,1212.59 1268.09,1212.59 1268.68,1212.59 1269.26,1212.59 1269.85,1212.59 1270.44,1212.59 1271.02,1212.59 1271.61,1212.59 1272.19,1212.59 1272.78,1212.59 1273.37,1212.59 1273.95,1212.59 1274.54,1212.59 1275.13,1212.59 1275.71,1212.59 1276.3,1212.59 1276.89,1212.59 1277.47,1212.59 1278.06,1212.59 1278.65,1212.59 1279.23,1212.59 1279.82,1212.59 1280.4,1212.59 1280.99,1212.59 1281.58,1212.59 1282.16,1212.59 1282.75,1212.59 1283.34,1212.59 1283.92,1212.59 1284.51,1212.59 1285.1,1212.59 1285.68,1212.59 1286.27,1212.59 1286.86,1212.59 1287.44,1212.59 1288.03,1212.59 1288.61,1212.59 1289.2,1212.59 1289.79,1212.59 1290.37,1212.59 1290.96,1212.59 1291.55,1212.59 1292.13,1212.59 1292.72,1212.59 1293.31,1212.59 1293.89,1212.59 1294.48,1212.59 1295.06,1212.59 1295.65,1212.59 1296.24,1212.59 1296.82,1212.59 1297.41,1212.59 1298,1212.59 1298.58,1212.59 1299.17,1212.59 1299.76,1212.59 1300.34,1212.59 1300.93,1212.59 1301.52,1212.59 1302.1,1212.59 1302.69,1212.59 1303.27,1212.59 1303.86,1212.59 1304.45,1212.59 1305.03,1212.59 1305.62,1212.59 1306.21,1212.59 1306.79,1212.59 1307.38,1212.59 1307.97,1212.59 1308.55,1212.59 1309.14,1212.59 1309.73,1212.59 1310.31,1212.59 1310.9,1212.59 1311.48,1212.59 1312.07,1212.59 1312.66,1212.59 1313.24,1212.59 1313.83,1212.59 1314.42,1212.59 1315,1212.59 1315.59,1212.59 1316.18,1212.59 1316.76,1212.59 1317.35,1212.59 1317.93,1212.59 1318.52,1212.59 1319.11,1212.59 1319.69,1212.59 1320.28,1212.59 1320.87,1212.59 1321.45,1212.59 1322.04,1212.59 1322.63,1212.59 1323.21,1212.59 1323.8,1212.59 1324.39,1212.59 1324.97,1212.59 1325.56,1212.59 1326.14,1212.59 1326.73,1212.59 1327.32,1212.59 1327.9,1212.59 1328.49,1212.59 1329.08,1212.59 1329.66,1212.59 1330.25,1212.59 1330.84,1212.59 1331.42,1212.59 1332.01,1212.59 1332.6,1212.59 1333.18,1212.59 1333.77,1212.59 1334.35,1212.59 1334.94,1212.59 1335.53,1212.59 1336.11,1212.59 1336.7,1212.59 1337.29,1212.59 1337.87,1212.59 1338.46,1212.59 1339.05,1212.59 1339.63,1212.59 1340.22,1212.59 1340.8,1212.59 1341.39,1212.59 1341.98,1212.59 1342.56,1212.59 1343.15,1212.59 1343.74,1212.59 1344.32,1212.59 1344.91,1212.59 1345.5,1212.59 1346.08,1212.59 1346.67,1212.59 1347.26,1212.59 1347.84,1212.59 1348.43,1212.59 1349.01,1212.59 1349.6,1212.59 1350.19,1212.59 1350.77,1212.59 1351.36,1212.59 1351.95,1212.59 1352.53,1212.59 1353.12,1212.59 1353.71,1212.59 1354.29,1212.59 1354.88,1212.59 1355.47,1212.59 1356.05,1212.59 1356.64,1212.59 1357.22,1212.59 1357.81,1212.59 1358.4,1212.59 1358.98,1212.59 1359.57,1212.59 1360.16,1212.59 1360.74,1212.59 1361.33,1212.59 1361.92,1212.59 1362.5,1212.59 1363.09,1212.59 1363.68,1212.59 1364.26,1212.59 1364.85,1212.59 1365.43,1212.59 1366.02,1212.59 1366.61,1212.59 1367.19,1212.59 1367.78,1212.59 1368.37,1212.59 1368.95,1212.59 1369.54,1212.59 1370.13,1212.59 1370.71,1212.59 1371.3,1212.59 1371.88,1212.59 1372.47,1212.59 1373.06,1212.59 1373.64,1212.59 1374.23,1212.59 1374.82,1212.59 1375.4,1212.59 1375.99,1212.59 1376.58,1212.59 1377.16,1212.59 1377.75,1212.59 1378.34,1212.59 1378.92,1212.59 1379.51,1212.59 1380.09,1212.59 1380.68,1212.59 1381.27,1212.59 1381.85,1212.59 1382.44,1212.59 1383.03,1212.59 1383.61,1212.59 1384.2,1212.59 1384.79,1212.59 1385.37,1212.59 1385.96,1212.59 1386.55,1212.59 1387.13,1212.59 1387.72,1212.59 1388.3,1212.59 1388.89,1212.59 1389.48,1212.59 1390.06,1212.59 1390.65,1212.59 1391.24,1212.59 1391.82,1212.59 1392.41,1212.59 1393,1212.59 1393.58,1212.59 1394.17,1212.59 1394.75,1212.59 1395.34,1212.59 1395.93,1212.59 1396.51,1212.59 1397.1,1212.59 1397.69,1212.59 1398.27,1212.59 1398.86,1212.59 1399.45,1212.59 1400.03,1212.59 1400.62,1212.59 1401.21,1212.59 1401.79,1212.59 1402.38,1212.59 1402.96,1212.59 1403.55,1212.59 1404.14,1212.59 1404.72,1212.59 1405.31,1212.59 1405.9,1212.59 1406.48,1212.59 1407.07,1212.59 1407.66,1212.59 1408.24,1212.59 1408.83,1212.59 1409.42,1212.59 1410,1212.59 1410.59,1212.59 1411.17,1212.59 1411.76,1212.59 1412.35,1212.59 1412.93,1212.59 1413.52,1212.59 1414.11,1212.59 1414.69,1212.59 1415.28,1212.59 1415.87,1212.59 1416.45,1212.59 1417.04,1212.59 1417.63,1212.59 1418.21,1212.59 1418.8,1212.59 1419.38,1212.59 1419.97,1212.59 1420.56,1212.59 1421.14,1212.59 1421.73,1212.59 1422.32,1212.59 1422.9,1212.59 1423.49,1212.59 1424.08,1212.59 1424.66,1212.59 1425.25,1212.59 1425.83,1212.59 1426.42,1212.59 1427.01,1212.59 1427.59,1212.59 1428.18,1212.59 1428.77,1212.59 1429.35,1212.59 1429.94,1212.59 1430.53,1212.59 1431.11,1212.59 1431.7,1212.59 1432.29,1212.59 1432.87,1212.59 1433.46,1212.59 1434.04,1212.59 1434.63,1212.59 1435.22,1212.59 1435.8,1212.59 1436.39,1212.59 1436.98,1212.59 1437.56,1212.59 1438.15,1212.59 1438.74,1212.59 1439.32,1212.59 1439.91,1212.59 1440.5,1212.59 1441.08,1212.59 1441.67,1212.59 1442.25,1212.59 1442.84,1212.59 1443.43,1212.59 1444.01,1212.59 1444.6,1212.59 1445.19,1212.59 1445.77,1212.59 1446.36,1212.59 1446.95,1212.59 1447.53,1212.59 1448.12,1212.59 1448.7,1212.59 1449.29,1212.59 1449.88,1212.59 1450.46,1212.59 1451.05,1212.59 1451.64,1212.59 1452.22,1212.59 1452.81,1212.59 1453.4,1212.59 1453.98,1212.59 1454.57,1212.59 1455.16,1212.59 1455.74,1212.59 1456.33,1212.59 1456.91,1212.59 1457.5,1212.59 1458.09,1212.59 1458.67,1212.59 1459.26,1212.59 1459.85,1212.59 1460.43,1212.59 1461.02,1212.59 1461.61,1212.59 1462.19,1212.59 1462.78,1212.59 1463.37,1212.59 1463.95,1212.59 1464.54,1212.59 1465.12,1212.59 1465.71,1212.59 1466.3,1212.59 1466.88,1212.59 1467.47,1212.59 1468.06,1212.59 1468.64,1212.59 1469.23,1212.59 1469.82,1212.59 1470.4,1212.59 1470.99,1212.59 1471.57,1212.59 1472.16,1212.59 1472.75,1212.59 1473.33,1212.59 1473.92,1212.59 1474.51,1212.59 1475.09,1212.59 1475.68,1212.59 1476.27,1212.59 1476.85,1212.59 1477.44,1212.59 1478.03,1212.59 1478.61,1212.59 1479.2,1212.59 1479.78,1212.59 1480.37,1212.59 1480.96,1212.59 1481.54,1212.59 1482.13,1212.59 1482.72,1212.59 1483.3,1212.59 1483.89,1212.59 1484.48,1212.59 1485.06,1212.59 1485.65,1212.59 1486.24,1212.59 1486.82,1212.59 1487.41,1212.59 1487.99,1212.59 1488.58,1212.59 1489.17,1212.59 1489.75,1212.59 1490.34,1212.59 1490.93,1212.59 1491.51,1212.59 1492.1,1212.59 1492.69,1212.59 1493.27,1212.59 1493.86,1212.59 1494.45,1212.59 1495.03,1212.59 1495.62,1212.59 1496.2,1212.59 1496.79,1212.59 1497.38,1212.59 1497.96,1212.59 1498.55,1212.59 1499.14,1212.59 1499.72,1212.59 1500.31,1212.59 1500.9,1212.59 1501.48,1212.59 1502.07,1212.59 1502.65,1212.59 1503.24,1212.59 1503.83,1212.59 1504.41,1212.59 1505,1212.59 1505.59,1212.59 1506.17,1212.59 1506.76,1212.59 1507.35,1212.59 1507.93,1212.59 1508.52,1212.59 1509.11,1212.59 1509.69,1212.59 1510.28,1212.59 1510.86,1212.59 1511.45,1212.59 1512.04,1212.59 1512.62,1212.59 1513.21,1212.59 1513.8,1212.59 1514.38,1212.59 1514.97,1212.59 1515.56,1212.59 1516.14,1212.59 1516.73,1212.59 1517.32,1212.59 1517.9,1212.59 1518.49,1212.59 1519.07,1212.59 1519.66,1212.59 1520.25,1212.59 1520.83,1212.59 1521.42,1212.59 1522.01,1212.59 1522.59,1212.59 1523.18,1212.59 1523.77,1212.59 1524.35,1212.59 1524.94,1212.59 1525.52,1212.59 1526.11,1212.59 1526.7,1212.59 1527.28,1212.59 1527.87,1212.59 1528.46,1212.59 1529.04,1212.59 1529.63,1212.59 1530.22,1212.59 1530.8,1212.59 1531.39,1212.59 1531.98,1212.59 1532.56,1212.59 1533.15,1212.59 1533.73,1212.59 1534.32,1212.59 1534.91,1212.59 1535.49,1212.59 1536.08,1212.59 1536.67,1212.59 1537.25,1212.59 1537.84,1212.59 1538.43,1212.59 1539.01,1212.59 1539.6,1212.59 1540.19,1212.59 1540.77,1212.59 1541.36,1212.59 1541.94,1212.59 1542.53,1212.59 1543.12,1212.59 1543.7,1212.59 1544.29,1212.59 1544.88,1212.59 1545.46,1212.59 1546.05,1212.59 1546.64,1212.59 1547.22,1212.59 1547.81,1212.59 1548.4,1212.59 1548.98,1212.59 1549.57,1212.59 1550.15,1212.59 1550.74,1212.59 1551.33,1212.59 1551.91,1212.59 1552.5,1212.59 1553.09,1212.59 1553.67,1212.59 1554.26,1212.59 1554.85,1212.59 1555.43,1212.59 1556.02,1212.59 1556.6,1212.59 1557.19,1212.59 1557.78,1212.59 1558.36,1212.59 1558.95,1212.59 1559.54,1212.59 1560.12,1212.59 1560.71,1212.59 1561.3,1212.59 1561.88,1212.59 1562.47,1212.59 1563.06,1212.59 1563.64,1212.59 1564.23,1212.59 1564.81,1212.59 1565.4,1212.59 1565.99,1212.59 1566.57,1212.59 1567.16,1212.59 1567.75,1212.59 1568.33,1212.59 1568.92,1212.59 1569.51,1212.59 1570.09,1212.59 1570.68,1212.59 1571.27,1212.59 1571.85,1212.59 1572.44,1212.59 1573.02,1212.59 1573.61,1212.59 1574.2,1212.59 1574.78,1212.59 1575.37,1212.59 1575.96,1212.59 1576.54,1212.59 1577.13,1212.59 1577.72,1212.59 1578.3,1212.59 1578.89,1212.59 1579.47,1212.59 1580.06,1212.59 1580.65,1212.59 1581.23,1212.59 1581.82,1212.59 1582.41,1212.59 1582.99,1212.59 1583.58,1212.59 1584.17,1212.59 1584.75,1212.59 1585.34,1212.59 1585.93,1212.59 1586.51,1212.59 1587.1,1212.59 1587.68,1212.59 1588.27,1212.59 1588.86,1212.59 1589.44,1212.59 1590.03,1212.59 1590.62,1212.59 1591.2,1212.59 1591.79,1212.59 1592.38,1212.59 1592.96,1212.59 1593.55,1212.59 1594.14,1212.59 1594.72,1212.59 1595.31,1212.59 1595.89,1212.59 1596.48,1212.59 1597.07,1212.59 1597.65,1212.59 1598.24,1212.59 1598.83,1212.59 1599.41,1212.59 1600,1212.59 1600.59,1212.59 1601.17,1212.59 1601.76,1212.59 1602.34,1212.59 1602.93,1212.59 1603.52,1212.59 1604.1,1212.59 1604.69,1212.59 1605.28,1212.59 1605.86,1212.59 1606.45,1212.59 1607.04,1212.59 1607.62,1212.59 1608.21,1212.59 1608.8,1212.59 1609.38,1212.59 1609.97,1212.59 1610.55,1212.59 1611.14,1212.59 1611.73,1212.59 1612.31,1212.59 1612.9,1212.59 1613.49,1212.59 1614.07,1212.59 1614.66,1212.59 1615.25,1212.59 1615.83,1212.59 1616.42,1212.59 1617.01,1212.59 1617.59,1212.59 1618.18,1212.59 1618.76,1212.59 1619.35,1212.59 1619.94,1212.59 1620.52,1212.59 1621.11,1212.59 1621.7,1212.59 1622.28,1212.59 1622.87,1212.59 1623.46,1212.59 1624.04,1212.59 1624.63,1212.59 1625.22,1212.59 1625.8,1212.59 1626.39,1212.59 1626.97,1212.59 1627.56,1212.59 1628.15,1212.59 1628.73,1212.59 1629.32,1212.59 1629.91,1212.59 1630.49,1212.59 1631.08,1212.59 1631.67,1212.59 1632.25,1212.59 1632.84,1212.59 1633.42,1212.59 1634.01,1212.59 1634.6,1212.59 1635.18,1212.59 1635.77,1212.59 1636.36,1212.59 1636.94,1212.59 1637.53,1212.59 1638.12,1212.59 1638.7,1212.59 1639.29,1212.59 1639.88,1212.59 1640.46,1212.59 1641.05,1212.59 1641.63,1212.59 1642.22,1212.59 1642.81,1212.59 1643.39,1212.59 1643.98,1212.59 1644.57,1212.59 1645.15,1212.59 1645.74,1212.59 1646.33,1212.59 1646.91,1212.59 1647.5,1212.59 1648.09,1212.59 1648.67,1212.59 1649.26,1212.59 1649.84,1212.59 1650.43,1212.59 1651.02,1212.59 1651.6,1212.59 1652.19,1212.59 1652.78,1212.59 1653.36,1212.59 1653.95,1212.59 1654.54,1212.59 1655.12,1212.59 1655.71,1212.59 1656.29,1212.59 1656.88,1212.59 1657.47,1212.59 1658.05,1212.59 1658.64,1212.59 1659.23,1212.59 1659.81,1212.59 1660.4,1212.59 1660.99,1212.59 1661.57,1212.59 1662.16,1212.59 1662.75,1212.59 1663.33,1212.59 1663.92,1212.59 1664.5,1212.59 1665.09,1212.59 1665.68,1212.59 1666.26,1212.59 1666.85,1212.59 1667.44,1212.59 1668.02,1212.59 1668.61,1212.59 1669.2,1212.59 1669.78,1212.59 1670.37,1212.59 1670.96,1212.59 1671.54,1212.59 1672.13,1212.59 1672.71,1212.59 1673.3,1212.59 1673.89,1212.59 1674.47,1212.59 1675.06,1212.59 1675.65,1212.59 1676.23,1212.59 1676.82,1212.59 1677.41,1212.59 1677.99,1212.59 1678.58,1212.59 1679.17,1212.59 1679.75,1212.59 1680.34,1212.59 1680.92,1212.59 1681.51,1212.59 1682.1,1212.59 1682.68,1212.59 1683.27,1212.59 1683.86,1212.59 1684.44,1212.59 1685.03,1212.59 1685.62,1212.59 1686.2,1212.59 1686.79,1212.59 1687.37,1212.59 1687.96,1212.59 1688.55,1212.59 1689.13,1212.59 1689.72,1212.59 1690.31,1212.59 1690.89,1212.59 1691.48,1212.59 1692.07,1212.59 1692.65,1212.59 1693.24,1212.59 1693.83,1212.59 1694.41,1212.59 1695,1212.59 1695.58,1212.59 1696.17,1212.59 1696.76,1212.59 1697.34,1212.59 1697.93,1212.59 1698.52,1212.59 1699.1,1212.59 1699.69,1212.59 1700.28,1212.59 1700.86,1212.59 1701.45,1212.59 1702.04,1212.59 1702.62,1212.59 1703.21,1212.59 1703.79,1212.59 1704.38,1212.59 1704.97,1212.59 1705.55,1212.59 1706.14,1212.59 1706.73,1212.59 1707.31,1212.59 1707.9,1212.59 1708.49,1212.59 1709.07,1212.59 1709.66,1212.59 1710.24,1212.59 1710.83,1212.59 1711.42,1212.59 1712,1212.59 1712.59,1212.59 1713.18,1212.59 1713.76,1212.59 1714.35,1212.59 1714.94,1212.59 1715.52,1212.59 1716.11,1212.59 1716.7,1212.59 1717.28,1212.59 1717.87,1212.59 1718.45,1212.59 1719.04,1212.59 1719.63,1212.59 1720.21,1212.59 1720.8,1212.59 1721.39,1212.59 1721.97,1212.59 1722.56,1212.59 1723.15,1212.59 1723.73,1212.59 1724.32,1212.59 1724.91,1212.59 1725.49,1212.59 1726.08,1212.59 1726.66,1212.59 1727.25,1212.59 1727.84,1212.59 1728.42,1212.59 1729.01,1212.59 1729.6,1212.59 1730.18,1212.59 1730.77,1212.59 1731.36,1212.59 1731.94,1212.59 1732.53,1212.59 1733.11,1212.59 1733.7,1212.59 1734.29,1212.59 1734.87,1212.59 1735.46,1212.59 1736.05,1212.59 1736.63,1212.59 1737.22,1212.59 1737.81,1212.59 1738.39,1212.59 1738.98,1212.59 1739.57,1212.59 1740.15,1212.59 1740.74,1212.59 1741.32,1212.59 1741.91,1212.59 1742.5,1212.59 1743.08,1212.59 1743.67,1212.59 1744.26,1212.59 1744.84,1212.59 1745.43,1212.59 1746.02,1212.59 1746.6,1212.59 1747.19,1212.59 1747.78,1212.59 1748.36,1212.59 1748.95,1212.59 1749.53,1212.59 1750.12,1212.59 1750.71,1212.59 1751.29,1212.59 1751.88,1212.59 1752.47,1212.59 1753.05,1212.59 1753.64,1212.59 1754.23,1212.59 1754.81,1212.59 1755.4,1212.59 1755.99,1212.59 1756.57,1212.59 1757.16,1212.59 1757.74,1212.59 1758.33,1212.59 1758.92,1212.59 1759.5,1212.59 1760.09,1212.59 1760.68,1212.59 1761.26,1212.59 1761.85,1212.59 1762.44,1212.59 1763.02,1212.59 1763.61,1212.59 1764.19,1212.59 1764.78,1212.59 1765.37,1212.59 1765.95,1212.59 1766.54,1212.59 1767.13,1212.59 1767.71,1212.59 1768.3,1212.59 1768.89,1212.59 1769.47,1212.59 1770.06,1212.59 1770.65,1212.59 1771.23,1212.59 1771.82,1212.59 1772.4,1212.59 1772.99,1212.59 1773.58,1212.59 1774.16,1212.59 1774.75,1212.59 1775.34,1212.59 1775.92,1212.59 1776.51,1212.59 1777.1,1212.59 1777.68,1212.59 1778.27,1212.59 1778.86,1212.59 1779.44,1212.59 1780.03,1212.59 1780.61,1212.59 1781.2,1212.59 1781.79,1212.59 1782.37,1212.59 1782.96,1212.59 1783.55,1212.59 1784.13,1212.59 1784.72,1212.59 1785.31,1212.59 1785.89,1212.59 1786.48,1212.59 1787.06,1212.59 1787.65,1212.59 1788.24,1212.59 1788.82,1212.59 1789.41,1212.59 1790,1212.59 1790.58,1212.59 1791.17,1212.59 1791.76,1212.59 1792.34,1212.59 1792.93,1212.59 1793.52,1212.59 1794.1,1212.59 1794.69,1212.59 1795.27,1212.59 1795.86,1212.59 1796.45,1212.59 1797.03,1212.59 1797.62,1212.59 1798.21,1212.59 1798.79,1212.59 1799.38,1212.59 1799.97,1212.59 1800.55,1212.59 1801.14,1212.59 1801.73,1212.59 1802.31,1212.59 1802.9,1212.59 1803.48,1212.59 1804.07,1212.59 1804.66,1212.59 1805.24,1212.59 1805.83,1212.59 1806.42,1212.59 1807,1212.59 1807.59,1212.59 1808.18,1212.59 1808.76,1212.59 1809.35,1212.59 1809.94,1212.59 1810.52,1212.59 1811.11,1212.59 1811.69,1212.59 1812.28,1212.59 1812.87,1212.59 1813.45,1212.59 1814.04,1212.59 1814.63,1212.59 1815.21,1212.59 1815.8,1212.59 1816.39,1212.59 1816.97,1212.59 1817.56,1212.59 1818.14,1212.59 1818.73,1212.59 1819.32,1212.59 1819.9,1212.59 1820.49,1212.59 1821.08,1212.59 1821.66,1212.59 1822.25,1212.59 1822.84,1212.59 1823.42,1212.59 1824.01,1212.59 1824.6,1212.59 1825.18,1212.59 1825.77,1212.59 1826.35,1212.59 1826.94,1212.59 1827.53,1212.59 1828.11,1212.59 1828.7,1212.59 1829.29,1212.59 1829.87,1212.59 1830.46,1212.59 1831.05,1212.59 1831.63,1212.59 1832.22,1212.59 1832.81,1212.59 1833.39,1212.59 1833.98,1212.59 1834.56,1212.59 1835.15,1212.59 1835.74,1212.59 1836.32,1212.59 1836.91,1212.59 1837.5,1212.59 1838.08,1212.59 1838.67,1212.59 1839.26,1212.59 1839.84,1212.59 1840.43,1212.59 1841.01,1212.59 1841.6,1212.59 1842.19,1212.59 1842.77,1212.59 1843.36,1212.59 1843.95,1212.59 1844.53,1212.59 1845.12,1212.59 1845.71,1212.59 1846.29,1212.59 1846.88,1212.59 1847.47,1212.59 1848.05,1212.59 1848.64,1212.59 1849.22,1212.59 1849.81,1212.59 1850.4,1212.59 1850.98,1212.59 1851.57,1212.59 1852.16,1212.59 1852.74,1212.59 1853.33,1212.59 1853.92,1212.59 1854.5,1212.59 1855.09,1212.59 1855.68,1212.59 1856.26,1212.59 1856.85,1212.59 1857.43,1212.59 1858.02,1212.59 1858.61,1212.59 1859.19,1212.59 1859.78,1212.59 1860.37,1212.59 1860.95,1212.59 1861.54,1212.59 1862.13,1212.59 1862.71,1212.59 1863.3,1212.59 1863.88,1212.59 1864.47,1212.59 1865.06,1212.59 1865.64,1212.59 1866.23,1212.59 1866.82,1212.59 1867.4,1212.59 1867.99,1212.59 1868.58,1212.59 1869.16,1212.59 1869.75,1212.59 1870.34,1212.59 1870.92,1212.59 1871.51,1212.59 1872.09,1212.59 1872.68,1212.59 1873.27,1212.59 1873.85,1212.59 1874.44,1212.59 1875.03,1212.59 1875.61,1212.59 1876.2,1212.59 1876.79,1212.59 1877.37,1212.59 1877.96,1212.59 1878.55,1212.59 1879.13,1212.59 1879.72,1212.59 1880.3,1212.59 1880.89,1212.59 1881.48,1212.59 1882.06,1212.59 1882.65,1212.59 1883.24,1212.59 1883.82,1212.59 1884.41,1212.59 1885,1212.59 1885.58,1212.59 1886.17,1212.59 1886.76,1212.59 1887.34,1212.59 1887.93,1212.59 1888.51,1212.59 1889.1,1212.59 1889.69,1212.59 1890.27,1212.59 1890.86,1212.59 1891.45,1212.59 1892.03,1212.59 1892.62,1212.59 1893.21,1212.59 1893.79,1212.59 1894.38,1212.59 1894.96,1212.59 1895.55,1212.59 1896.14,1212.59 1896.72,1212.59 1897.31,1212.59 1897.9,1212.59 1898.48,1212.59 1899.07,1212.59 1899.66,1212.59 1900.24,1212.59 1900.83,1212.59 1901.42,1212.59 1902,1212.59 1902.59,1212.59 1903.17,1212.59 1903.76,1212.59 1904.35,1212.59 1904.93,1212.59 1905.52,1212.59 1906.11,1212.59 1906.69,1212.59 1907.28,1212.59 1907.87,1212.59 1908.45,1212.59 1909.04,1212.59 1909.63,1212.59 1910.21,1212.59 1910.8,1212.59 1911.38,1212.59 1911.97,1212.59 1912.56,1212.59 1913.14,1212.59 1913.73,1212.59 1914.32,1212.59 1914.9,1212.59 1915.49,1212.59 1916.08,1212.59 1916.66,1212.59 1917.25,1212.59 1917.83,1212.59 1918.42,1212.59 1919.01,1212.59 1919.59,1212.59 1920.18,1212.59 1920.77,1212.59 1921.35,1212.59 1921.94,1212.59 1922.53,1212.59 1923.11,1212.59 1923.7,1212.59 1924.29,1212.59 1924.87,1212.59 1925.46,1212.59 1926.04,1212.59 1926.63,1212.59 1927.22,1212.59 1927.8,1212.59 1928.39,1212.59 1928.98,1212.59 1929.56,1212.59 1930.15,1212.59 1930.74,1212.59 1931.32,1212.59 1931.91,1212.59 1932.5,1212.59 1933.08,1212.59 1933.67,1212.59 1934.25,1212.59 1934.84,1212.59 1935.43,1212.59 1936.01,1212.59 1936.6,1212.59 1937.19,1212.59 1937.77,1212.59 1938.36,1212.59 1938.95,1212.59 1939.53,1212.59 1940.12,1212.59 1940.71,1212.59 1941.29,1212.59 1941.88,1212.59 1942.46,1212.59 1943.05,1212.59 1943.64,1212.59 1944.22,1212.59 1944.81,1212.59 1945.4,1212.59 1945.98,1212.59 1946.57,1212.59 1947.16,1212.59 1947.74,1212.59 1948.33,1212.59 1948.91,1212.59 1949.5,1212.59 1950.09,1212.59 1950.67,1212.59 1951.26,1212.59 1951.85,1212.59 1952.43,1212.59 1953.02,1212.59 1953.61,1212.59 1954.19,1212.59 1954.78,1212.59 1955.37,1212.59 1955.95,1212.59 1956.54,1212.59 1957.12,1212.59 1957.71,1212.59 1958.3,1212.59 1958.88,1212.59 1959.47,1212.59 1960.06,1212.59 1960.64,1212.59 1961.23,1212.59 1961.82,1212.59 1962.4,1212.59 1962.99,1212.59 1963.58,1212.59 1964.16,1212.59 1964.75,1212.59 1965.33,1212.59 1965.92,1212.59 1966.51,1212.59 1967.09,1212.59 1967.68,1212.59 1968.27,1212.59 1968.85,1212.59 1969.44,1212.59 1970.03,1212.59 1970.61,1212.59 1971.2,1212.59 1971.78,1212.59 1972.37,1212.59 1972.96,1212.59 1973.54,1212.59 1974.13,1212.59 1974.72,1212.59 1975.3,1212.59 1975.89,1212.59 1976.48,1212.59 1977.06,1212.59 1977.65,1212.59 1978.24,1212.59 1978.82,1212.59 1979.41,1212.59 1979.99,1212.59 1980.58,1212.59 1981.17,1212.59 1981.75,1212.59 1982.34,1212.59 1982.93,1212.59 1983.51,1212.59 1984.1,1212.59 1984.69,1212.59 1985.27,1212.59 1985.86,1212.59 1986.45,1212.59 1987.03,1212.59 1987.62,1212.59 1988.2,1212.59 1988.79,1212.59 1989.38,1212.59 1989.96,1212.59 1990.55,1212.59 1991.14,1212.59 1991.72,1212.59 1992.31,1212.59 1992.9,1212.59 1993.48,1212.59 1994.07,1212.59 1994.65,1212.59 1995.24,1212.59 1995.83,1212.59 1996.41,1212.59 1997,1212.59 1997.59,1212.59 1998.17,1212.59 1998.76,1212.59 1999.35,1212.59 1999.93,1212.59 2000.52,1212.59 2001.11,1212.59 2001.69,1212.59 2002.28,1212.59 2002.86,1212.59 2003.45,1212.59 2004.04,1212.59 2004.62,1212.59 2005.21,1212.59 2005.8,1212.59 2006.38,1212.59 2006.97,1212.59 2007.56,1212.59 2008.14,1212.59 2008.73,1212.59 2009.32,1212.59 2009.9,1212.59 2010.49,1212.59 2011.07,1212.59 2011.66,1212.59 2012.25,1212.59 2012.83,1212.59 2013.42,1212.59 2014.01,1212.59 2014.59,1212.59 2015.18,1212.59 2015.77,1212.59 2016.35,1212.59 2016.94,1212.59 2017.53,1212.59 2018.11,1212.59 2018.7,1212.59 2019.28,1212.59 2019.87,1212.59 2020.46,1212.59 2021.04,1212.59 2021.63,1212.59 2022.22,1212.59 2022.8,1212.59 2023.39,1212.59 2023.98,1212.59 2024.56,1212.59 2025.15,1212.59 2025.73,1212.59 2026.32,1212.59 2026.91,1212.59 2027.49,1212.59 2028.08,1212.59 2028.67,1212.59 2029.25,1212.59 2029.84,1212.59 2030.43,1212.59 2031.01,1212.59 2031.6,1212.59 2032.19,1212.59 2032.77,1212.59 2033.36,1212.59 2033.94,1212.59 2034.53,1212.59 2035.12,1212.59 2035.7,1212.59 2036.29,1212.59 2036.88,1212.59 2037.46,1212.59 2038.05,1212.59 2038.64,1212.59 2039.22,1212.59 2039.81,1212.59 2040.4,1212.59 2040.98,1212.59 2041.57,1212.59 2042.15,1212.59 2042.74,1212.59 2043.33,1212.59 2043.91,1212.59 2044.5,1212.59 2045.09,1212.59 2045.67,1212.59 2046.26,1212.59 2046.85,1212.59 2047.43,1212.59 2048.02,1212.59 2048.6,1212.59 2049.19,1212.59 2049.78,1212.59 2050.36,1212.59 2050.95,1212.59 2051.54,1212.59 2052.12,1212.59 2052.71,1212.59 2053.3,1212.59 2053.88,1212.59 2054.47,1212.59 2055.06,1212.59 2055.64,1212.59 2056.23,1212.59 2056.81,1212.59 2057.4,1212.59 2057.99,1212.59 2058.57,1212.59 2059.16,1212.59 2059.75,1212.59 2060.33,1212.59 2060.92,1212.59 2061.51,1212.59 2062.09,1212.59 2062.68,1212.59 2063.27,1212.59 2063.85,1212.59 2064.44,1212.59 2065.02,1212.59 2065.61,1212.59 2066.2,1212.59 2066.78,1212.59 2067.37,1212.59 2067.96,1212.59 2068.54,1212.59 2069.13,1212.59 2069.72,1212.59 2070.3,1212.59 2070.89,1212.59 2071.48,1212.59 2072.06,1212.59 2072.65,1212.59 2073.23,1212.59 2073.82,1212.59 2074.41,1212.59 2074.99,1212.59 2075.58,1212.59 2076.17,1212.59 2076.75,1212.59 2077.34,1212.59 2077.93,1212.59 2078.51,1212.59 2079.1,1212.59 2079.68,1212.59 2080.27,1212.59 2080.86,1212.59 2081.44,1212.59 2082.03,1212.59 2082.62,1212.59 2083.2,1212.59 2083.79,1212.59 2084.38,1212.59 2084.96,1212.59 2085.55,1212.59 2086.14,1212.59 2086.72,1212.59 2087.31,1212.59 2087.89,1212.59 2088.48,1212.59 2089.07,1212.59 2089.65,1212.59 2090.24,1212.59 2090.83,1212.59 2091.41,1212.59 2092,1212.59 2092.59,1212.59 2093.17,1212.59 2093.76,1212.59 2094.35,1212.59 2094.93,1212.59 2095.52,1212.59 2096.1,1212.59 2096.69,1212.59 2097.28,1212.59 2097.86,1212.59 2098.45,1212.59 2099.04,1212.59 2099.62,1212.59 2100.21,1212.59 2100.8,1212.59 2101.38,1212.59 2101.97,1212.59 2102.55,1212.59 2103.14,1212.59 2103.73,1212.59 2104.31,1212.59 2104.9,1212.59 2105.49,1212.59 2106.07,1212.59 2106.66,1212.59 2107.25,1212.59 2107.83,1212.59 2108.42,1212.59 2109.01,1212.59 2109.59,1212.59 2110.18,1212.59 2110.76,1212.59 2111.35,1212.59 2111.94,1212.59 2112.52,1212.59 2113.11,1212.59 2113.7,1212.59 2114.28,1212.59 2114.87,1212.59 2115.46,1212.59 2116.04,1212.59 2116.63,1212.59 2117.22,1212.59 2117.8,1212.59 2118.39,1212.59 2118.97,1212.59 2119.56,1212.59 2120.15,1212.59 2120.73,1212.59 2121.32,1212.59 2121.91,1212.59 2122.49,1212.59 2123.08,1212.59 2123.67,1212.59 2124.25,1212.59 2124.84,1212.59 2125.42,1212.59 2126.01,1212.59 2126.6,1212.59 2127.18,1212.59 2127.77,1212.59 2128.36,1212.59 2128.94,1212.59 2129.53,1212.59 2130.12,1212.59 2130.7,1212.59 2131.29,1212.59 2131.88,1212.59 2132.46,1212.59 2133.05,1212.59 2133.63,1212.59 2134.22,1212.59 2134.81,1212.59 2135.39,1212.59 2135.98,1212.59 2136.57,1212.59 2137.15,1212.59 2137.74,1212.59 2138.33,1212.59 2138.91,1212.59 2139.5,1212.59 2140.09,1212.59 2140.67,1212.59 2141.26,1212.59 2141.84,1212.59 2142.43,1212.59 2143.02,1212.59 2143.6,1212.59 2144.19,1212.59 2144.78,1212.59 2145.36,1212.59 2145.95,1212.59 2146.54,1212.59 2147.12,1212.59 2147.71,1212.59 2148.3,1212.59 2148.88,1212.59 2149.47,1212.59 2150.05,1212.59 2150.64,1212.59 2151.23,1212.59 2151.81,1212.59 2152.4,1212.59 2152.99,1212.59 2153.57,1212.59 2154.16,1212.59 2154.75,1212.59 2155.33,1212.59 2155.92,1212.59 2156.5,1212.59 2157.09,1212.59 2157.68,1212.59 2158.26,1212.59 \"/>\n<polyline clip-path=\"url(#clip692)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1561.91,1194.3 1399.29,899.083 \"/>\n<polyline clip-path=\"url(#clip692)\" style=\"stroke:#d3d3d3; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"985.439,1230.39 985.439,1194.3 2158.26,1194.3 2158.26,1230.39 985.439,1230.39 \"/>\n<path clip-path=\"url(#clip690)\" d=\"M1564.14 432.752 L2148.88 432.752 L2148.88 225.392 L1564.14 225.392  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<polyline clip-path=\"url(#clip690)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1564.14,432.752 2148.88,432.752 2148.88,225.392 1564.14,225.392 1564.14,432.752 \"/>\n<polyline clip-path=\"url(#clip690)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,277.232 1709.13,277.232 \"/>\n<path clip-path=\"url(#clip690)\" d=\"M1748.27 269.35 L1748.27 273.378 Q1746.46 272.452 1744.52 271.989 Q1742.57 271.526 1740.49 271.526 Q1737.32 271.526 1735.72 272.498 Q1734.15 273.471 1734.15 275.415 Q1734.15 276.896 1735.28 277.753 Q1736.41 278.586 1739.84 279.35 L1741.3 279.674 Q1745.84 280.646 1747.73 282.429 Q1749.66 284.188 1749.66 287.359 Q1749.66 290.97 1746.78 293.077 Q1743.94 295.183 1738.94 295.183 Q1736.85 295.183 1734.59 294.767 Q1732.34 294.373 1729.84 293.563 L1729.84 289.165 Q1732.2 290.392 1734.49 291.017 Q1736.78 291.619 1739.03 291.619 Q1742.04 291.619 1743.66 290.6 Q1745.28 289.558 1745.28 287.683 Q1745.28 285.947 1744.1 285.021 Q1742.94 284.095 1738.98 283.239 L1737.5 282.892 Q1733.54 282.058 1731.78 280.345 Q1730.03 278.609 1730.03 275.6 Q1730.03 271.943 1732.62 269.952 Q1735.21 267.961 1739.98 267.961 Q1742.34 267.961 1744.42 268.309 Q1746.51 268.656 1748.27 269.35 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M1777.99 278.864 L1777.99 294.512 L1773.73 294.512 L1773.73 279.003 Q1773.73 275.322 1772.29 273.494 Q1770.86 271.665 1767.99 271.665 Q1764.54 271.665 1762.55 273.864 Q1760.56 276.063 1760.56 279.859 L1760.56 294.512 L1756.28 294.512 L1756.28 258.494 L1760.56 258.494 L1760.56 272.614 Q1762.09 270.276 1764.15 269.119 Q1766.23 267.961 1768.94 267.961 Q1773.4 267.961 1775.7 270.739 Q1777.99 273.494 1777.99 278.864 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M1786.48 268.586 L1790.74 268.586 L1790.74 294.512 L1786.48 294.512 L1786.48 268.586 M1786.48 258.494 L1790.74 258.494 L1790.74 263.887 L1786.48 263.887 L1786.48 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M1812.78 258.494 L1812.78 262.035 L1808.71 262.035 Q1806.41 262.035 1805.51 262.961 Q1804.63 263.887 1804.63 266.295 L1804.63 268.586 L1811.65 268.586 L1811.65 271.896 L1804.63 271.896 L1804.63 294.512 L1800.35 294.512 L1800.35 271.896 L1796.28 271.896 L1796.28 268.586 L1800.35 268.586 L1800.35 266.781 Q1800.35 262.452 1802.36 260.484 Q1804.38 258.494 1808.75 258.494 L1812.78 258.494 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M1819.72 261.225 L1819.72 268.586 L1828.5 268.586 L1828.5 271.896 L1819.72 271.896 L1819.72 285.97 Q1819.72 289.142 1820.58 290.045 Q1821.46 290.947 1824.12 290.947 L1828.5 290.947 L1828.5 294.512 L1824.12 294.512 Q1819.19 294.512 1817.32 292.683 Q1815.44 290.832 1815.44 285.97 L1815.44 271.896 L1812.32 271.896 L1812.32 268.586 L1815.44 268.586 L1815.44 261.225 L1819.72 261.225 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip690)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,329.072 1709.13,329.072 \"/>\n<path clip-path=\"url(#clip690)\" d=\"M1748.27 321.19 L1748.27 325.218 Q1746.46 324.292 1744.52 323.829 Q1742.57 323.366 1740.49 323.366 Q1737.32 323.366 1735.72 324.338 Q1734.15 325.311 1734.15 327.255 Q1734.15 328.736 1735.28 329.593 Q1736.41 330.426 1739.84 331.19 L1741.3 331.514 Q1745.84 332.486 1747.73 334.269 Q1749.66 336.028 1749.66 339.199 Q1749.66 342.81 1746.78 344.917 Q1743.94 347.023 1738.94 347.023 Q1736.85 347.023 1734.59 346.607 Q1732.34 346.213 1729.84 345.403 L1729.84 341.005 Q1732.2 342.232 1734.49 342.857 Q1736.78 343.459 1739.03 343.459 Q1742.04 343.459 1743.66 342.44 Q1745.28 341.398 1745.28 339.523 Q1745.28 337.787 1744.1 336.861 Q1742.94 335.935 1738.98 335.079 L1737.5 334.732 Q1733.54 333.898 1731.78 332.185 Q1730.03 330.449 1730.03 327.44 Q1730.03 323.783 1732.62 321.792 Q1735.21 319.801 1739.98 319.801 Q1742.34 319.801 1744.42 320.149 Q1746.51 320.496 1748.27 321.19 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M1777.99 330.704 L1777.99 346.352 L1773.73 346.352 L1773.73 330.843 Q1773.73 327.162 1772.29 325.334 Q1770.86 323.505 1767.99 323.505 Q1764.54 323.505 1762.55 325.704 Q1760.56 327.903 1760.56 331.699 L1760.56 346.352 L1756.28 346.352 L1756.28 310.334 L1760.56 310.334 L1760.56 324.454 Q1762.09 322.116 1764.15 320.959 Q1766.23 319.801 1768.94 319.801 Q1773.4 319.801 1775.7 322.579 Q1777.99 325.334 1777.99 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M1786.48 320.426 L1790.74 320.426 L1790.74 346.352 L1786.48 346.352 L1786.48 320.426 M1786.48 310.334 L1790.74 310.334 L1790.74 315.727 L1786.48 315.727 L1786.48 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M1812.78 310.334 L1812.78 313.875 L1808.71 313.875 Q1806.41 313.875 1805.51 314.801 Q1804.63 315.727 1804.63 318.135 L1804.63 320.426 L1811.65 320.426 L1811.65 323.736 L1804.63 323.736 L1804.63 346.352 L1800.35 346.352 L1800.35 323.736 L1796.28 323.736 L1796.28 320.426 L1800.35 320.426 L1800.35 318.621 Q1800.35 314.292 1802.36 312.324 Q1804.38 310.334 1808.75 310.334 L1812.78 310.334 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M1819.72 313.065 L1819.72 320.426 L1828.5 320.426 L1828.5 323.736 L1819.72 323.736 L1819.72 337.81 Q1819.72 340.982 1820.58 341.885 Q1821.46 342.787 1824.12 342.787 L1828.5 342.787 L1828.5 346.352 L1824.12 346.352 Q1819.19 346.352 1817.32 344.523 Q1815.44 342.672 1815.44 337.81 L1815.44 323.736 L1812.32 323.736 L1812.32 320.426 L1815.44 320.426 L1815.44 313.065 L1819.72 313.065 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M1869.35 325.403 Q1870.95 322.533 1873.17 321.167 Q1875.4 319.801 1878.4 319.801 Q1882.46 319.801 1884.65 322.649 Q1886.85 325.473 1886.85 330.704 L1886.85 346.352 L1882.57 346.352 L1882.57 330.843 Q1882.57 327.116 1881.25 325.311 Q1879.93 323.505 1877.22 323.505 Q1873.91 323.505 1871.99 325.704 Q1870.07 327.903 1870.07 331.699 L1870.07 346.352 L1865.79 346.352 L1865.79 330.843 Q1865.79 327.093 1864.47 325.311 Q1863.15 323.505 1860.4 323.505 Q1857.13 323.505 1855.21 325.727 Q1853.29 327.926 1853.29 331.699 L1853.29 346.352 L1849.01 346.352 L1849.01 320.426 L1853.29 320.426 L1853.29 324.454 Q1854.75 322.07 1856.78 320.936 Q1858.82 319.801 1861.62 319.801 Q1864.45 319.801 1866.41 321.236 Q1868.4 322.672 1869.35 325.403 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M1917.52 332.324 L1917.52 334.408 L1897.94 334.408 Q1898.22 338.806 1900.58 341.121 Q1902.96 343.412 1907.2 343.412 Q1909.65 343.412 1911.95 342.81 Q1914.26 342.209 1916.53 341.005 L1916.53 345.033 Q1914.24 346.005 1911.83 346.514 Q1909.42 347.023 1906.95 347.023 Q1900.74 347.023 1897.11 343.412 Q1893.5 339.801 1893.5 333.644 Q1893.5 327.278 1896.92 323.551 Q1900.37 319.801 1906.21 319.801 Q1911.44 319.801 1914.47 323.181 Q1917.52 326.537 1917.52 332.324 M1913.27 331.074 Q1913.22 327.579 1911.3 325.496 Q1909.4 323.412 1906.25 323.412 Q1902.69 323.412 1900.53 325.426 Q1898.4 327.44 1898.08 331.098 L1913.27 331.074 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M1936.3 333.32 Q1931.14 333.32 1929.14 334.5 Q1927.15 335.681 1927.15 338.528 Q1927.15 340.797 1928.64 342.139 Q1930.14 343.459 1932.71 343.459 Q1936.25 343.459 1938.38 340.959 Q1940.53 338.435 1940.53 334.269 L1940.53 333.32 L1936.3 333.32 M1944.79 331.56 L1944.79 346.352 L1940.53 346.352 L1940.53 342.417 Q1939.08 344.778 1936.9 345.912 Q1934.72 347.023 1931.58 347.023 Q1927.59 347.023 1925.23 344.801 Q1922.89 342.556 1922.89 338.806 Q1922.89 334.431 1925.81 332.209 Q1928.75 329.986 1934.56 329.986 L1940.53 329.986 L1940.53 329.57 Q1940.53 326.63 1938.59 325.033 Q1936.67 323.412 1933.17 323.412 Q1930.95 323.412 1928.84 323.945 Q1926.74 324.477 1924.79 325.542 L1924.79 321.607 Q1927.13 320.704 1929.33 320.264 Q1931.53 319.801 1933.61 319.801 Q1939.24 319.801 1942.02 322.718 Q1944.79 325.635 1944.79 331.56 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M1975.12 330.704 L1975.12 346.352 L1970.86 346.352 L1970.86 330.843 Q1970.86 327.162 1969.42 325.334 Q1967.99 323.505 1965.12 323.505 Q1961.67 323.505 1959.68 325.704 Q1957.69 327.903 1957.69 331.699 L1957.69 346.352 L1953.4 346.352 L1953.4 320.426 L1957.69 320.426 L1957.69 324.454 Q1959.21 322.116 1961.27 320.959 Q1963.36 319.801 1966.07 319.801 Q1970.53 319.801 1972.83 322.579 Q1975.12 325.334 1975.12 330.704 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip690)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1584.85,380.912 1709.13,380.912 \"/>\n<path clip-path=\"url(#clip690)\" d=\"M1734.12 394.303 L1734.12 408.053 L1729.84 408.053 L1729.84 372.266 L1734.12 372.266 L1734.12 376.201 Q1735.47 373.887 1737.5 372.776 Q1739.56 371.641 1742.41 371.641 Q1747.13 371.641 1750.07 375.391 Q1753.03 379.141 1753.03 385.252 Q1753.03 391.363 1750.07 395.113 Q1747.13 398.863 1742.41 398.863 Q1739.56 398.863 1737.5 397.752 Q1735.47 396.618 1734.12 394.303 M1748.61 385.252 Q1748.61 380.553 1746.67 377.891 Q1744.75 375.206 1741.37 375.206 Q1737.99 375.206 1736.04 377.891 Q1734.12 380.553 1734.12 385.252 Q1734.12 389.951 1736.04 392.637 Q1737.99 395.299 1741.37 395.299 Q1744.75 395.299 1746.67 392.637 Q1748.61 389.951 1748.61 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M1775.12 376.248 Q1774.4 375.831 1773.54 375.646 Q1772.71 375.438 1771.69 375.438 Q1768.08 375.438 1766.14 377.799 Q1764.22 380.137 1764.22 384.535 L1764.22 398.192 L1759.93 398.192 L1759.93 372.266 L1764.22 372.266 L1764.22 376.294 Q1765.56 373.933 1767.71 372.799 Q1769.86 371.641 1772.94 371.641 Q1773.38 371.641 1773.91 371.711 Q1774.45 371.757 1775.09 371.873 L1775.12 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M1788.59 375.252 Q1785.16 375.252 1783.17 377.938 Q1781.18 380.6 1781.18 385.252 Q1781.18 389.905 1783.15 392.59 Q1785.14 395.252 1788.59 395.252 Q1791.99 395.252 1793.98 392.567 Q1795.97 389.882 1795.97 385.252 Q1795.97 380.646 1793.98 377.961 Q1791.99 375.252 1788.59 375.252 M1788.59 371.641 Q1794.15 371.641 1797.32 375.252 Q1800.49 378.863 1800.49 385.252 Q1800.49 391.618 1797.32 395.252 Q1794.15 398.863 1788.59 398.863 Q1783.01 398.863 1779.84 395.252 Q1776.69 391.618 1776.69 385.252 Q1776.69 378.863 1779.84 375.252 Q1783.01 371.641 1788.59 371.641 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M1807.55 372.266 L1811.81 372.266 L1811.81 398.655 Q1811.81 403.609 1809.91 405.831 Q1808.03 408.053 1803.84 408.053 L1802.22 408.053 L1802.22 404.442 L1803.36 404.442 Q1805.79 404.442 1806.67 403.308 Q1807.55 402.197 1807.55 398.655 L1807.55 372.266 M1807.55 362.174 L1811.81 362.174 L1811.81 367.567 L1807.55 367.567 L1807.55 362.174 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M1842.9 384.164 L1842.9 386.248 L1823.31 386.248 Q1823.59 390.646 1825.95 392.961 Q1828.34 395.252 1832.57 395.252 Q1835.03 395.252 1837.32 394.65 Q1839.63 394.049 1841.9 392.845 L1841.9 396.873 Q1839.61 397.845 1837.2 398.354 Q1834.79 398.863 1832.32 398.863 Q1826.11 398.863 1822.48 395.252 Q1818.87 391.641 1818.87 385.484 Q1818.87 379.118 1822.29 375.391 Q1825.74 371.641 1831.58 371.641 Q1836.81 371.641 1839.84 375.021 Q1842.9 378.377 1842.9 384.164 M1838.64 382.914 Q1838.59 379.419 1836.67 377.336 Q1834.77 375.252 1831.62 375.252 Q1828.06 375.252 1825.9 377.266 Q1823.78 379.28 1823.45 382.938 L1838.64 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M1868.54 373.262 L1868.54 377.243 Q1866.74 376.248 1864.91 375.762 Q1863.1 375.252 1861.25 375.252 Q1857.11 375.252 1854.82 377.891 Q1852.52 380.507 1852.52 385.252 Q1852.52 389.998 1854.82 392.637 Q1857.11 395.252 1861.25 395.252 Q1863.1 395.252 1864.91 394.766 Q1866.74 394.257 1868.54 393.262 L1868.54 397.197 Q1866.76 398.03 1864.84 398.447 Q1862.94 398.863 1860.79 398.863 Q1854.93 398.863 1851.48 395.183 Q1848.03 391.502 1848.03 385.252 Q1848.03 378.91 1851.51 375.276 Q1855 371.641 1861.07 371.641 Q1863.03 371.641 1864.91 372.058 Q1866.78 372.451 1868.54 373.262 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M1880.16 364.905 L1880.16 372.266 L1888.94 372.266 L1888.94 375.576 L1880.16 375.576 L1880.16 389.65 Q1880.16 392.822 1881.02 393.725 Q1881.9 394.627 1884.56 394.627 L1888.94 394.627 L1888.94 398.192 L1884.56 398.192 Q1879.63 398.192 1877.76 396.363 Q1875.88 394.512 1875.88 389.65 L1875.88 375.576 L1872.76 375.576 L1872.76 372.266 L1875.88 372.266 L1875.88 364.905 L1880.16 364.905 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M1916.71 384.164 L1916.71 386.248 L1897.13 386.248 Q1897.41 390.646 1899.77 392.961 Q1902.15 395.252 1906.39 395.252 Q1908.84 395.252 1911.14 394.65 Q1913.45 394.049 1915.72 392.845 L1915.72 396.873 Q1913.43 397.845 1911.02 398.354 Q1908.61 398.863 1906.14 398.863 Q1899.93 398.863 1896.3 395.252 Q1892.69 391.641 1892.69 385.484 Q1892.69 379.118 1896.11 375.391 Q1899.56 371.641 1905.4 371.641 Q1910.63 371.641 1913.66 375.021 Q1916.71 378.377 1916.71 384.164 M1912.46 382.914 Q1912.41 379.419 1910.49 377.336 Q1908.59 375.252 1905.44 375.252 Q1901.88 375.252 1899.72 377.266 Q1897.59 379.28 1897.27 382.938 L1912.46 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M1940.77 376.201 L1940.77 362.174 L1945.02 362.174 L1945.02 398.192 L1940.77 398.192 L1940.77 394.303 Q1939.42 396.618 1937.36 397.752 Q1935.33 398.863 1932.46 398.863 Q1927.76 398.863 1924.79 395.113 Q1921.85 391.363 1921.85 385.252 Q1921.85 379.141 1924.79 375.391 Q1927.76 371.641 1932.46 371.641 Q1935.33 371.641 1937.36 372.776 Q1939.42 373.887 1940.77 376.201 M1926.25 385.252 Q1926.25 389.951 1928.17 392.637 Q1930.12 395.299 1933.5 395.299 Q1936.88 395.299 1938.82 392.637 Q1940.77 389.951 1940.77 385.252 Q1940.77 380.553 1938.82 377.891 Q1936.88 375.206 1933.5 375.206 Q1930.12 375.206 1928.17 377.891 Q1926.25 380.553 1926.25 385.252 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M1991.04 384.164 L1991.04 386.248 L1971.46 386.248 Q1971.74 390.646 1974.1 392.961 Q1976.48 395.252 1980.72 395.252 Q1983.17 395.252 1985.46 394.65 Q1987.78 394.049 1990.05 392.845 L1990.05 396.873 Q1987.76 397.845 1985.35 398.354 Q1982.94 398.863 1980.46 398.863 Q1974.26 398.863 1970.63 395.252 Q1967.02 391.641 1967.02 385.484 Q1967.02 379.118 1970.44 375.391 Q1973.89 371.641 1979.72 371.641 Q1984.95 371.641 1987.99 375.021 Q1991.04 378.377 1991.04 384.164 M1986.78 382.914 Q1986.74 379.419 1984.82 377.336 Q1982.92 375.252 1979.77 375.252 Q1976.2 375.252 1974.05 377.266 Q1971.92 379.28 1971.6 382.938 L1986.78 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M2019.58 382.544 L2019.58 398.192 L2015.32 398.192 L2015.32 382.683 Q2015.32 379.002 2013.89 377.174 Q2012.45 375.345 2009.58 375.345 Q2006.14 375.345 2004.14 377.544 Q2002.15 379.743 2002.15 383.539 L2002.15 398.192 L1997.87 398.192 L1997.87 372.266 L2002.15 372.266 L2002.15 376.294 Q2003.68 373.956 2005.74 372.799 Q2007.83 371.641 2010.53 371.641 Q2015 371.641 2017.29 374.419 Q2019.58 377.174 2019.58 382.544 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M2050.26 384.164 L2050.26 386.248 L2030.67 386.248 Q2030.95 390.646 2033.31 392.961 Q2035.7 395.252 2039.93 395.252 Q2042.39 395.252 2044.68 394.65 Q2046.99 394.049 2049.26 392.845 L2049.26 396.873 Q2046.97 397.845 2044.56 398.354 Q2042.15 398.863 2039.68 398.863 Q2033.47 398.863 2029.84 395.252 Q2026.23 391.641 2026.23 385.484 Q2026.23 379.118 2029.65 375.391 Q2033.1 371.641 2038.94 371.641 Q2044.17 371.641 2047.2 375.021 Q2050.26 378.377 2050.26 384.164 M2046 382.914 Q2045.95 379.419 2044.03 377.336 Q2042.13 375.252 2038.98 375.252 Q2035.42 375.252 2033.26 377.266 Q2031.14 379.28 2030.81 382.938 L2046 382.914 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M2072.27 376.248 Q2071.55 375.831 2070.7 375.646 Q2069.86 375.438 2068.84 375.438 Q2065.23 375.438 2063.29 377.799 Q2061.37 380.137 2061.37 384.535 L2061.37 398.192 L2057.08 398.192 L2057.08 372.266 L2061.37 372.266 L2061.37 376.294 Q2062.71 373.933 2064.86 372.799 Q2067.01 371.641 2070.09 371.641 Q2070.53 371.641 2071.07 371.711 Q2071.6 371.757 2072.25 371.873 L2072.27 376.248 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M2092.96 384.928 Q2092.96 380.299 2091.04 377.752 Q2089.14 375.206 2085.69 375.206 Q2082.27 375.206 2080.35 377.752 Q2078.45 380.299 2078.45 384.928 Q2078.45 389.535 2080.35 392.081 Q2082.27 394.627 2085.69 394.627 Q2089.14 394.627 2091.04 392.081 Q2092.96 389.535 2092.96 384.928 M2097.22 394.975 Q2097.22 401.595 2094.28 404.812 Q2091.34 408.053 2085.28 408.053 Q2083.03 408.053 2081.04 407.706 Q2079.05 407.382 2077.18 406.687 L2077.18 402.544 Q2079.05 403.562 2080.88 404.049 Q2082.71 404.535 2084.61 404.535 Q2088.8 404.535 2090.88 402.336 Q2092.96 400.16 2092.96 395.738 L2092.96 393.632 Q2091.64 395.924 2089.58 397.058 Q2087.52 398.192 2084.65 398.192 Q2079.88 398.192 2076.97 394.558 Q2074.05 390.924 2074.05 384.928 Q2074.05 378.91 2076.97 375.276 Q2079.88 371.641 2084.65 371.641 Q2087.52 371.641 2089.58 372.776 Q2091.64 373.91 2092.96 376.201 L2092.96 372.266 L2097.22 372.266 L2097.22 394.975 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M2116.78 400.599 Q2114.98 405.229 2113.26 406.641 Q2111.55 408.053 2108.68 408.053 L2105.28 408.053 L2105.28 404.488 L2107.78 404.488 Q2109.54 404.488 2110.51 403.655 Q2111.48 402.822 2112.66 399.72 L2113.43 397.775 L2102.94 372.266 L2107.45 372.266 L2115.56 392.544 L2123.66 372.266 L2128.17 372.266 L2116.78 400.599 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M719.687 899.083 L1838.19 899.083 L1838.19 462.094 L719.687 462.094  Z\" fill=\"#ffffff\" fill-rule=\"evenodd\" fill-opacity=\"1\"/>\n<defs>\n  <clipPath id=\"clip693\">\n    <rect x=\"719\" y=\"462\" width=\"1120\" height=\"438\"/>\n  </clipPath>\n</defs>\n<polyline clip-path=\"url(#clip693)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip693)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"999.313,899.083 999.313,462.094 \"/>\n<polyline clip-path=\"url(#clip693)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1278.94,899.083 1278.94,462.094 \"/>\n<polyline clip-path=\"url(#clip693)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1558.56,899.083 1558.56,462.094 \"/>\n<polyline clip-path=\"url(#clip693)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"1838.19,899.083 1838.19,462.094 \"/>\n<polyline clip-path=\"url(#clip690)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 1838.19,899.083 \"/>\n<polyline clip-path=\"url(#clip690)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,880.185 \"/>\n<polyline clip-path=\"url(#clip690)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"999.313,899.083 999.313,880.185 \"/>\n<polyline clip-path=\"url(#clip690)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1278.94,899.083 1278.94,880.185 \"/>\n<polyline clip-path=\"url(#clip690)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1558.56,899.083 1558.56,880.185 \"/>\n<polyline clip-path=\"url(#clip690)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"1838.19,899.083 1838.19,880.185 \"/>\n<path clip-path=\"url(#clip690)\" d=\"M664.213 957.547 L671.852 957.547 L671.852 931.182 L663.542 932.849 L663.542 928.589 L671.806 926.923 L676.482 926.923 L676.482 957.547 L684.12 957.547 L684.12 961.483 L664.213 961.483 L664.213 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M703.565 930.001 Q699.954 930.001 698.125 933.566 Q696.319 937.108 696.319 944.237 Q696.319 951.344 698.125 954.909 Q699.954 958.45 703.565 958.45 Q707.199 958.45 709.005 954.909 Q710.833 951.344 710.833 944.237 Q710.833 937.108 709.005 933.566 Q707.199 930.001 703.565 930.001 M703.565 926.298 Q709.375 926.298 712.43 930.904 Q715.509 935.487 715.509 944.237 Q715.509 952.964 712.43 957.571 Q709.375 962.154 703.565 962.154 Q697.755 962.154 694.676 957.571 Q691.62 952.964 691.62 944.237 Q691.62 935.487 694.676 930.904 Q697.755 926.298 703.565 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M733.727 930.001 Q730.116 930.001 728.287 933.566 Q726.481 937.108 726.481 944.237 Q726.481 951.344 728.287 954.909 Q730.116 958.45 733.727 958.45 Q737.361 958.45 739.166 954.909 Q740.995 951.344 740.995 944.237 Q740.995 937.108 739.166 933.566 Q737.361 930.001 733.727 930.001 M733.727 926.298 Q739.537 926.298 742.592 930.904 Q745.671 935.487 745.671 944.237 Q745.671 952.964 742.592 957.571 Q739.537 962.154 733.727 962.154 Q727.916 962.154 724.838 957.571 Q721.782 952.964 721.782 944.237 Q721.782 935.487 724.838 930.904 Q727.916 926.298 733.727 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M763.888 930.001 Q760.277 930.001 758.449 933.566 Q756.643 937.108 756.643 944.237 Q756.643 951.344 758.449 954.909 Q760.277 958.45 763.888 958.45 Q767.523 958.45 769.328 954.909 Q771.157 951.344 771.157 944.237 Q771.157 937.108 769.328 933.566 Q767.523 930.001 763.888 930.001 M763.888 926.298 Q769.699 926.298 772.754 930.904 Q775.833 935.487 775.833 944.237 Q775.833 952.964 772.754 957.571 Q769.699 962.154 763.888 962.154 Q758.078 962.154 755 957.571 Q751.944 952.964 751.944 944.237 Q751.944 935.487 755 930.904 Q758.078 926.298 763.888 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M943.839 957.547 L951.477 957.547 L951.477 931.182 L943.167 932.849 L943.167 928.589 L951.431 926.923 L956.107 926.923 L956.107 957.547 L963.746 957.547 L963.746 961.483 L943.839 961.483 L943.839 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M973.237 926.923 L991.593 926.923 L991.593 930.858 L977.519 930.858 L977.519 939.33 Q978.538 938.983 979.556 938.821 Q980.575 938.636 981.593 938.636 Q987.38 938.636 990.76 941.807 Q994.139 944.978 994.139 950.395 Q994.139 955.973 990.667 959.075 Q987.195 962.154 980.875 962.154 Q978.7 962.154 976.431 961.784 Q974.186 961.413 971.778 960.672 L971.778 955.973 Q973.862 957.108 976.084 957.663 Q978.306 958.219 980.783 958.219 Q984.788 958.219 987.125 956.112 Q989.463 954.006 989.463 950.395 Q989.463 946.784 987.125 944.677 Q984.788 942.571 980.783 942.571 Q978.908 942.571 977.033 942.987 Q975.181 943.404 973.237 944.284 L973.237 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M1013.35 930.001 Q1009.74 930.001 1007.91 933.566 Q1006.11 937.108 1006.11 944.237 Q1006.11 951.344 1007.91 954.909 Q1009.74 958.45 1013.35 958.45 Q1016.99 958.45 1018.79 954.909 Q1020.62 951.344 1020.62 944.237 Q1020.62 937.108 1018.79 933.566 Q1016.99 930.001 1013.35 930.001 M1013.35 926.298 Q1019.16 926.298 1022.22 930.904 Q1025.3 935.487 1025.3 944.237 Q1025.3 952.964 1022.22 957.571 Q1019.16 962.154 1013.35 962.154 Q1007.54 962.154 1004.46 957.571 Q1001.41 952.964 1001.41 944.237 Q1001.41 935.487 1004.46 930.904 Q1007.54 926.298 1013.35 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M1043.51 930.001 Q1039.9 930.001 1038.07 933.566 Q1036.27 937.108 1036.27 944.237 Q1036.27 951.344 1038.07 954.909 Q1039.9 958.45 1043.51 958.45 Q1047.15 958.45 1048.95 954.909 Q1050.78 951.344 1050.78 944.237 Q1050.78 937.108 1048.95 933.566 Q1047.15 930.001 1043.51 930.001 M1043.51 926.298 Q1049.32 926.298 1052.38 930.904 Q1055.46 935.487 1055.46 944.237 Q1055.46 952.964 1052.38 957.571 Q1049.32 962.154 1043.51 962.154 Q1037.7 962.154 1034.63 957.571 Q1031.57 952.964 1031.57 944.237 Q1031.57 935.487 1034.63 930.904 Q1037.7 926.298 1043.51 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M1227.55 957.547 L1243.87 957.547 L1243.87 961.483 L1221.92 961.483 L1221.92 957.547 Q1224.59 954.793 1229.17 950.163 Q1233.78 945.511 1234.96 944.168 Q1237.2 941.645 1238.08 939.909 Q1238.98 938.149 1238.98 936.46 Q1238.98 933.705 1237.04 931.969 Q1235.12 930.233 1232.02 930.233 Q1229.82 930.233 1227.36 930.997 Q1224.93 931.761 1222.16 933.312 L1222.16 928.589 Q1224.98 927.455 1227.43 926.876 Q1229.89 926.298 1231.92 926.298 Q1237.3 926.298 1240.49 928.983 Q1243.68 931.668 1243.68 936.159 Q1243.68 938.288 1242.87 940.21 Q1242.09 942.108 1239.98 944.7 Q1239.4 945.372 1236.3 948.589 Q1233.2 951.784 1227.55 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M1263.68 930.001 Q1260.07 930.001 1258.24 933.566 Q1256.44 937.108 1256.44 944.237 Q1256.44 951.344 1258.24 954.909 Q1260.07 958.45 1263.68 958.45 Q1267.32 958.45 1269.12 954.909 Q1270.95 951.344 1270.95 944.237 Q1270.95 937.108 1269.12 933.566 Q1267.32 930.001 1263.68 930.001 M1263.68 926.298 Q1269.49 926.298 1272.55 930.904 Q1275.63 935.487 1275.63 944.237 Q1275.63 952.964 1272.55 957.571 Q1269.49 962.154 1263.68 962.154 Q1257.87 962.154 1254.8 957.571 Q1251.74 952.964 1251.74 944.237 Q1251.74 935.487 1254.8 930.904 Q1257.87 926.298 1263.68 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M1293.85 930.001 Q1290.23 930.001 1288.41 933.566 Q1286.6 937.108 1286.6 944.237 Q1286.6 951.344 1288.41 954.909 Q1290.23 958.45 1293.85 958.45 Q1297.48 958.45 1299.29 954.909 Q1301.11 951.344 1301.11 944.237 Q1301.11 937.108 1299.29 933.566 Q1297.48 930.001 1293.85 930.001 M1293.85 926.298 Q1299.66 926.298 1302.71 930.904 Q1305.79 935.487 1305.79 944.237 Q1305.79 952.964 1302.71 957.571 Q1299.66 962.154 1293.85 962.154 Q1288.04 962.154 1284.96 957.571 Q1281.9 952.964 1281.9 944.237 Q1281.9 935.487 1284.96 930.904 Q1288.04 926.298 1293.85 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M1324.01 930.001 Q1320.4 930.001 1318.57 933.566 Q1316.76 937.108 1316.76 944.237 Q1316.76 951.344 1318.57 954.909 Q1320.4 958.45 1324.01 958.45 Q1327.64 958.45 1329.45 954.909 Q1331.28 951.344 1331.28 944.237 Q1331.28 937.108 1329.45 933.566 Q1327.64 930.001 1324.01 930.001 M1324.01 926.298 Q1329.82 926.298 1332.87 930.904 Q1335.95 935.487 1335.95 944.237 Q1335.95 952.964 1332.87 957.571 Q1329.82 962.154 1324.01 962.154 Q1318.2 962.154 1315.12 957.571 Q1312.06 952.964 1312.06 944.237 Q1312.06 935.487 1315.12 930.904 Q1318.2 926.298 1324.01 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M1507.18 957.547 L1523.49 957.547 L1523.49 961.483 L1501.55 961.483 L1501.55 957.547 Q1504.21 954.793 1508.8 950.163 Q1513.4 945.511 1514.58 944.168 Q1516.83 941.645 1517.71 939.909 Q1518.61 938.149 1518.61 936.46 Q1518.61 933.705 1516.67 931.969 Q1514.74 930.233 1511.64 930.233 Q1509.44 930.233 1506.99 930.997 Q1504.56 931.761 1501.78 933.312 L1501.78 928.589 Q1504.61 927.455 1507.06 926.876 Q1509.51 926.298 1511.55 926.298 Q1516.92 926.298 1520.12 928.983 Q1523.31 931.668 1523.31 936.159 Q1523.31 938.288 1522.5 940.21 Q1521.71 942.108 1519.61 944.7 Q1519.03 945.372 1515.93 948.589 Q1512.82 951.784 1507.18 957.547 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M1533.36 926.923 L1551.71 926.923 L1551.71 930.858 L1537.64 930.858 L1537.64 939.33 Q1538.66 938.983 1539.68 938.821 Q1540.69 938.636 1541.71 938.636 Q1547.5 938.636 1550.88 941.807 Q1554.26 944.978 1554.26 950.395 Q1554.26 955.973 1550.79 959.075 Q1547.31 962.154 1540.99 962.154 Q1538.82 962.154 1536.55 961.784 Q1534.3 961.413 1531.9 960.672 L1531.9 955.973 Q1533.98 957.108 1536.2 957.663 Q1538.43 958.219 1540.9 958.219 Q1544.91 958.219 1547.24 956.112 Q1549.58 954.006 1549.58 950.395 Q1549.58 946.784 1547.24 944.677 Q1544.91 942.571 1540.9 942.571 Q1539.03 942.571 1537.15 942.987 Q1535.3 943.404 1533.36 944.284 L1533.36 926.923 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M1573.47 930.001 Q1569.86 930.001 1568.03 933.566 Q1566.23 937.108 1566.23 944.237 Q1566.23 951.344 1568.03 954.909 Q1569.86 958.45 1573.47 958.45 Q1577.11 958.45 1578.91 954.909 Q1580.74 951.344 1580.74 944.237 Q1580.74 937.108 1578.91 933.566 Q1577.11 930.001 1573.47 930.001 M1573.47 926.298 Q1579.28 926.298 1582.34 930.904 Q1585.42 935.487 1585.42 944.237 Q1585.42 952.964 1582.34 957.571 Q1579.28 962.154 1573.47 962.154 Q1567.66 962.154 1564.58 957.571 Q1561.53 952.964 1561.53 944.237 Q1561.53 935.487 1564.58 930.904 Q1567.66 926.298 1573.47 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M1603.63 930.001 Q1600.02 930.001 1598.19 933.566 Q1596.39 937.108 1596.39 944.237 Q1596.39 951.344 1598.19 954.909 Q1600.02 958.45 1603.63 958.45 Q1607.27 958.45 1609.07 954.909 Q1610.9 951.344 1610.9 944.237 Q1610.9 937.108 1609.07 933.566 Q1607.27 930.001 1603.63 930.001 M1603.63 926.298 Q1609.44 926.298 1612.5 930.904 Q1615.58 935.487 1615.58 944.237 Q1615.58 952.964 1612.5 957.571 Q1609.44 962.154 1603.63 962.154 Q1597.82 962.154 1594.74 957.571 Q1591.69 952.964 1591.69 944.237 Q1591.69 935.487 1594.74 930.904 Q1597.82 926.298 1603.63 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M1796.87 942.848 Q1800.23 943.566 1802.1 945.835 Q1804 948.103 1804 951.436 Q1804 956.552 1800.48 959.353 Q1796.96 962.154 1790.48 962.154 Q1788.31 962.154 1785.99 961.714 Q1783.7 961.297 1781.25 960.441 L1781.25 955.927 Q1783.19 957.061 1785.5 957.64 Q1787.82 958.219 1790.34 958.219 Q1794.74 958.219 1797.03 956.483 Q1799.35 954.747 1799.35 951.436 Q1799.35 948.381 1797.19 946.668 Q1795.06 944.932 1791.25 944.932 L1787.22 944.932 L1787.22 941.089 L1791.43 941.089 Q1794.88 941.089 1796.71 939.724 Q1798.54 938.335 1798.54 935.742 Q1798.54 933.08 1796.64 931.668 Q1794.76 930.233 1791.25 930.233 Q1789.32 930.233 1787.13 930.649 Q1784.93 931.066 1782.29 931.946 L1782.29 927.779 Q1784.95 927.038 1787.26 926.668 Q1789.6 926.298 1791.66 926.298 Q1796.99 926.298 1800.09 928.728 Q1803.19 931.136 1803.19 935.256 Q1803.19 938.126 1801.55 940.117 Q1799.9 942.085 1796.87 942.848 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M1822.87 930.001 Q1819.25 930.001 1817.43 933.566 Q1815.62 937.108 1815.62 944.237 Q1815.62 951.344 1817.43 954.909 Q1819.25 958.45 1822.87 958.45 Q1826.5 958.45 1828.31 954.909 Q1830.13 951.344 1830.13 944.237 Q1830.13 937.108 1828.31 933.566 Q1826.5 930.001 1822.87 930.001 M1822.87 926.298 Q1828.68 926.298 1831.73 930.904 Q1834.81 935.487 1834.81 944.237 Q1834.81 952.964 1831.73 957.571 Q1828.68 962.154 1822.87 962.154 Q1817.06 962.154 1813.98 957.571 Q1810.92 952.964 1810.92 944.237 Q1810.92 935.487 1813.98 930.904 Q1817.06 926.298 1822.87 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M1853.03 930.001 Q1849.42 930.001 1847.59 933.566 Q1845.78 937.108 1845.78 944.237 Q1845.78 951.344 1847.59 954.909 Q1849.42 958.45 1853.03 958.45 Q1856.66 958.45 1858.47 954.909 Q1860.3 951.344 1860.3 944.237 Q1860.3 937.108 1858.47 933.566 Q1856.66 930.001 1853.03 930.001 M1853.03 926.298 Q1858.84 926.298 1861.89 930.904 Q1864.97 935.487 1864.97 944.237 Q1864.97 952.964 1861.89 957.571 Q1858.84 962.154 1853.03 962.154 Q1847.22 962.154 1844.14 957.571 Q1841.08 952.964 1841.08 944.237 Q1841.08 935.487 1844.14 930.904 Q1847.22 926.298 1853.03 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M1883.19 930.001 Q1879.58 930.001 1877.75 933.566 Q1875.94 937.108 1875.94 944.237 Q1875.94 951.344 1877.75 954.909 Q1879.58 958.45 1883.19 958.45 Q1886.82 958.45 1888.63 954.909 Q1890.46 951.344 1890.46 944.237 Q1890.46 937.108 1888.63 933.566 Q1886.82 930.001 1883.19 930.001 M1883.19 926.298 Q1889 926.298 1892.06 930.904 Q1895.13 935.487 1895.13 944.237 Q1895.13 952.964 1892.06 957.571 Q1889 962.154 1883.19 962.154 Q1877.38 962.154 1874.3 957.571 Q1871.24 952.964 1871.24 944.237 Q1871.24 935.487 1874.3 930.904 Q1877.38 926.298 1883.19 926.298 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip693)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,879.22 1838.19,879.22 \"/>\n<polyline clip-path=\"url(#clip693)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,779.904 1838.19,779.904 \"/>\n<polyline clip-path=\"url(#clip693)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,680.588 1838.19,680.588 \"/>\n<polyline clip-path=\"url(#clip693)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,581.273 1838.19,581.273 \"/>\n<polyline clip-path=\"url(#clip693)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:2; stroke-opacity:0.1; fill:none\" points=\"719.687,481.957 1838.19,481.957 \"/>\n<polyline clip-path=\"url(#clip690)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,899.083 719.687,462.094 \"/>\n<polyline clip-path=\"url(#clip690)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,879.22 738.585,879.22 \"/>\n<polyline clip-path=\"url(#clip690)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,779.904 738.585,779.904 \"/>\n<polyline clip-path=\"url(#clip690)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,680.588 738.585,680.588 \"/>\n<polyline clip-path=\"url(#clip690)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,581.273 738.585,581.273 \"/>\n<polyline clip-path=\"url(#clip690)\" style=\"stroke:#000000; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"719.687,481.957 738.585,481.957 \"/>\n<path clip-path=\"url(#clip690)\" d=\"M576.743 879.671 L606.419 879.671 L606.419 883.606 L576.743 883.606 L576.743 879.671 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M616.558 861.94 L634.914 861.94 L634.914 865.875 L620.84 865.875 L620.84 874.347 Q621.859 874 622.877 873.838 Q623.896 873.652 624.914 873.652 Q630.702 873.652 634.081 876.824 Q637.461 879.995 637.461 885.412 Q637.461 890.99 633.989 894.092 Q630.516 897.171 624.197 897.171 Q622.021 897.171 619.752 896.8 Q617.507 896.43 615.1 895.689 L615.1 890.99 Q617.183 892.125 619.405 892.68 Q621.627 893.236 624.104 893.236 Q628.109 893.236 630.447 891.129 Q632.785 889.023 632.785 885.412 Q632.785 881.801 630.447 879.694 Q628.109 877.588 624.104 877.588 Q622.229 877.588 620.354 878.004 Q618.502 878.421 616.558 879.301 L616.558 861.94 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M646.674 890.62 L651.558 890.62 L651.558 896.5 L646.674 896.5 L646.674 890.62 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M671.743 865.018 Q668.132 865.018 666.303 868.583 Q664.498 872.125 664.498 879.254 Q664.498 886.361 666.303 889.925 Q668.132 893.467 671.743 893.467 Q675.377 893.467 677.183 889.925 Q679.011 886.361 679.011 879.254 Q679.011 872.125 677.183 868.583 Q675.377 865.018 671.743 865.018 M671.743 861.315 Q677.553 861.315 680.609 865.921 Q683.687 870.504 683.687 879.254 Q683.687 887.981 680.609 892.588 Q677.553 897.171 671.743 897.171 Q665.933 897.171 662.854 892.588 Q659.799 887.981 659.799 879.254 Q659.799 870.504 662.854 865.921 Q665.933 861.315 671.743 861.315 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M577.739 780.355 L607.415 780.355 L607.415 784.291 L577.739 784.291 L577.739 780.355 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M630.354 766.698 L618.549 785.147 L630.354 785.147 L630.354 766.698 M629.127 762.624 L635.007 762.624 L635.007 785.147 L639.938 785.147 L639.938 789.036 L635.007 789.036 L635.007 797.184 L630.354 797.184 L630.354 789.036 L614.753 789.036 L614.753 784.522 L629.127 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M647.669 791.304 L652.553 791.304 L652.553 797.184 L647.669 797.184 L647.669 791.304 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M662.785 762.624 L681.141 762.624 L681.141 766.559 L667.067 766.559 L667.067 775.031 Q668.086 774.684 669.104 774.522 Q670.123 774.337 671.141 774.337 Q676.928 774.337 680.308 777.508 Q683.687 780.679 683.687 786.096 Q683.687 791.675 680.215 794.777 Q676.743 797.855 670.424 797.855 Q668.248 797.855 665.979 797.485 Q663.734 797.115 661.326 796.374 L661.326 791.675 Q663.41 792.809 665.632 793.365 Q667.854 793.92 670.331 793.92 Q674.336 793.92 676.673 791.814 Q679.011 789.707 679.011 786.096 Q679.011 782.485 676.673 780.379 Q674.336 778.272 670.331 778.272 Q668.456 778.272 666.581 778.689 Q664.729 779.105 662.785 779.985 L662.785 762.624 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M576.743 681.04 L606.419 681.04 L606.419 684.975 L576.743 684.975 L576.743 681.04 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M629.359 667.382 L617.553 685.831 L629.359 685.831 L629.359 667.382 M628.132 663.308 L634.012 663.308 L634.012 685.831 L638.942 685.831 L638.942 689.72 L634.012 689.72 L634.012 697.868 L629.359 697.868 L629.359 689.72 L613.757 689.72 L613.757 685.206 L628.132 663.308 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M646.674 691.989 L651.558 691.989 L651.558 697.868 L646.674 697.868 L646.674 691.989 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M671.743 666.387 Q668.132 666.387 666.303 669.952 Q664.498 673.494 664.498 680.623 Q664.498 687.73 666.303 691.294 Q668.132 694.836 671.743 694.836 Q675.377 694.836 677.183 691.294 Q679.011 687.73 679.011 680.623 Q679.011 673.494 677.183 669.952 Q675.377 666.387 671.743 666.387 M671.743 662.683 Q677.553 662.683 680.609 667.29 Q683.687 671.873 683.687 680.623 Q683.687 689.35 680.609 693.956 Q677.553 698.54 671.743 698.54 Q665.933 698.54 662.854 693.956 Q659.799 689.35 659.799 680.623 Q659.799 671.873 662.854 667.29 Q665.933 662.683 671.743 662.683 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M577.739 581.724 L607.415 581.724 L607.415 585.659 L577.739 585.659 L577.739 581.724 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M631.674 579.919 Q635.03 580.636 636.905 582.905 Q638.803 585.173 638.803 588.507 Q638.803 593.622 635.285 596.423 Q631.766 599.224 625.285 599.224 Q623.109 599.224 620.794 598.784 Q618.502 598.368 616.049 597.511 L616.049 592.997 Q617.993 594.132 620.308 594.71 Q622.623 595.289 625.146 595.289 Q629.544 595.289 631.836 593.553 Q634.151 591.817 634.151 588.507 Q634.151 585.451 631.998 583.738 Q629.868 582.002 626.049 582.002 L622.021 582.002 L622.021 578.159 L626.234 578.159 Q629.683 578.159 631.512 576.794 Q633.34 575.405 633.34 572.812 Q633.34 570.15 631.442 568.738 Q629.567 567.303 626.049 567.303 Q624.127 567.303 621.928 567.72 Q619.729 568.136 617.09 569.016 L617.09 564.849 Q619.752 564.109 622.067 563.738 Q624.405 563.368 626.465 563.368 Q631.789 563.368 634.891 565.798 Q637.993 568.206 637.993 572.326 Q637.993 575.196 636.35 577.187 Q634.706 579.155 631.674 579.919 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M647.669 592.673 L652.553 592.673 L652.553 598.553 L647.669 598.553 L647.669 592.673 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M662.785 563.993 L681.141 563.993 L681.141 567.928 L667.067 567.928 L667.067 576.4 Q668.086 576.053 669.104 575.891 Q670.123 575.706 671.141 575.706 Q676.928 575.706 680.308 578.877 Q683.687 582.048 683.687 587.465 Q683.687 593.044 680.215 596.145 Q676.743 599.224 670.424 599.224 Q668.248 599.224 665.979 598.854 Q663.734 598.483 661.326 597.743 L661.326 593.044 Q663.41 594.178 665.632 594.733 Q667.854 595.289 670.331 595.289 Q674.336 595.289 676.673 593.183 Q679.011 591.076 679.011 587.465 Q679.011 583.854 676.673 581.747 Q674.336 579.641 670.331 579.641 Q668.456 579.641 666.581 580.058 Q664.729 580.474 662.785 581.354 L662.785 563.993 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M576.743 482.409 L606.419 482.409 L606.419 486.344 L576.743 486.344 L576.743 482.409 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M630.678 480.603 Q634.035 481.321 635.91 483.589 Q637.808 485.858 637.808 489.191 Q637.808 494.307 634.289 497.108 Q630.771 499.909 624.29 499.909 Q622.114 499.909 619.799 499.469 Q617.507 499.052 615.053 498.196 L615.053 493.682 Q616.998 494.816 619.313 495.395 Q621.627 495.973 624.151 495.973 Q628.549 495.973 630.84 494.237 Q633.155 492.501 633.155 489.191 Q633.155 486.136 631.002 484.423 Q628.873 482.686 625.053 482.686 L621.026 482.686 L621.026 478.844 L625.239 478.844 Q628.688 478.844 630.516 477.478 Q632.345 476.089 632.345 473.497 Q632.345 470.835 630.447 469.423 Q628.572 467.987 625.053 467.987 Q623.132 467.987 620.933 468.404 Q618.734 468.821 616.095 469.7 L616.095 465.534 Q618.757 464.793 621.072 464.423 Q623.41 464.052 625.47 464.052 Q630.794 464.052 633.896 466.483 Q636.998 468.89 636.998 473.011 Q636.998 475.881 635.354 477.872 Q633.711 479.839 630.678 480.603 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M646.674 493.358 L651.558 493.358 L651.558 499.237 L646.674 499.237 L646.674 493.358 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><path clip-path=\"url(#clip690)\" d=\"M671.743 467.756 Q668.132 467.756 666.303 471.321 Q664.498 474.862 664.498 481.992 Q664.498 489.098 666.303 492.663 Q668.132 496.205 671.743 496.205 Q675.377 496.205 677.183 492.663 Q679.011 489.098 679.011 481.992 Q679.011 474.862 677.183 471.321 Q675.377 467.756 671.743 467.756 M671.743 464.052 Q677.553 464.052 680.609 468.659 Q683.687 473.242 683.687 481.992 Q683.687 490.719 680.609 495.325 Q677.553 499.909 671.743 499.909 Q665.933 499.909 662.854 495.325 Q659.799 490.719 659.799 481.992 Q659.799 473.242 662.854 468.659 Q665.933 464.052 671.743 464.052 Z\" fill=\"#000000\" fill-rule=\"nonzero\" fill-opacity=\"1\" /><polyline clip-path=\"url(#clip693)\" style=\"stroke:#009af9; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"160.995,-1577.5 161.555,-2922.08 162.114,-4155.78 162.673,-5286.05 163.232,-6319.78 163.792,-7263.33 164.351,-8122.62 164.91,-8903.13 165.469,-9609.97 166.029,-10247.9 166.588,-10821.4 167.147,-11334.6 167.706,-10760.1 168.266,-10275.5 168.825,-9885.44 169.384,-10308.9 169.943,-9971.48 170.503,-10330.4 171.062,-10645.6 171.621,-10336.6 172.18,-10069.1 172.74,-10312.1 173.299,-10524.9 173.858,-10705.6 174.417,-10030.6 174.977,-9437.42 175.536,-9576.67 176.095,-9684.31 176.655,-9778.84 177.214,-9553.31 177.773,-9599.19 178.332,-9631.3 178.892,-9401.27 179.451,-9172.97 180.01,-9186.49 180.569,-9191.97 181.129,-8977.48 181.688,-8953.06 182.247,-8742.19 182.806,-8701.33 183.366,-8495.59 183.925,-8295.1 184.484,-8225.17 185.043,-8157.98 185.603,-7819.64 186.162,-7628.8 186.721,-7548.21 187.28,-7453.82 187.84,-7257.02 188.399,-6969.81 188.958,-6792.24 189.517,-6524.29 190.077,-6440.26 190.636,-6268.93 191.195,-6104.6 191.754,-5791.96 192.314,-5581.15 192.873,-5370.57 193.432,-5304.98 193.991,-5232.71 194.551,-4912.97 195.11,-4848.13 195.669,-4774.29 196.228,-4589.87 196.788,-4514.5 197.347,-4435.14 197.906,-4250.6 198.465,-4127.65 199.025,-4000.75 199.584,-3932.87 200.143,-3766.64 200.702,-3472.2 201.262,-3326.51 201.821,-3180.63 202.38,-3036.7 202.939,-2934.85 203.499,-2796.58 204.058,-2701.75 204.617,-2463.53 205.176,-2384.67 205.736,-2267.74 206.295,-2189.1 206.854,-2044.98 207.413,-1970.29 207.973,-1865.59 208.532,-1729.88 209.091,-1691.21 209.65,-1622.51 210.21,-1524.76 210.769,-1458.32 211.328,-1397.37 211.887,-1337.22 212.447,-1272.47 213.006,-1185.18 213.565,-1129.79 214.124,-1074.5 214.684,-964.341 215.243,-937.139 215.802,-909.472 216.361,-857.865 216.921,-798.659 217.48,-722.071 218.039,-669.501 218.598,-618.649 219.158,-543.118 219.717,-541.374 220.276,-464.55 220.835,-395.423 221.395,-349.222 221.954,-305.265 222.513,-236.426 223.072,-191.67 223.632,-195.072 224.191,-83.6937 224.75,-106.639 225.309,-63.4085 225.869,0.114248 226.428,39.85 226.987,77.7308 227.546,116.089 228.106,174.459 228.665,168.867 229.224,182.322 229.783,217.905 230.343,253.516 230.902,324.937 231.461,333.054 232.02,367.648 232.58,419.268 233.139,423.594 233.698,431.932 234.257,457.316 234.817,462.875 235.376,489.252 235.935,534.5 236.494,576.05 237.054,599.792 237.613,657.985 238.172,658.889 238.731,700.114 239.291,736.717 239.85,746.824 240.409,726.402 240.968,764.797 241.528,779.536 242.087,780.823 242.646,815.458 243.205,810.587 243.765,842.384 244.324,856.682 244.883,835.006 245.442,835.03 246.002,836.154 246.561,871.024 247.12,868.765 247.679,883.086 248.239,899.526 248.798,927.636 249.357,941.246 249.916,967.793 250.476,944.69 251.035,938.211 251.594,920.46 252.153,935.128 252.713,981.461 253.272,974.767 253.831,950.632 254.39,961.033 254.95,957.819 255.509,971.894 256.068,933.641 256.627,930.206 257.187,944.9 257.746,942.929 258.305,938.839 258.864,967.948 259.424,945.015 259.983,942.07 260.542,957.74 261.101,990.262 261.661,998.113 262.22,1041.01 262.779,1080.76 263.338,1065.77 263.898,1056.03 264.457,1063.72 265.016,1071.79 265.575,1112.56 266.135,1117.02 266.694,1140.17 267.253,1109.6 267.812,1099.64 268.372,1122.49 268.931,1106.6 269.49,1112.87 270.049,1102.08 270.609,1090.94 271.168,1116.94 271.727,1142.86 272.286,1112.64 272.846,1065.79 273.405,1090.24 273.964,1047.44 274.523,1041.64 275.083,1018.07 275.642,1029.43 276.201,1040.21 276.76,1049.67 277.32,1058.29 277.879,1048.77 278.438,1023.01 278.997,1016.1 279.557,1011.51 280.116,1023.96 280.675,1019.61 281.234,979.749 281.794,993.453 282.353,1010.15 282.912,1023.73 283.471,1018.78 284.031,980.667 284.59,1010 285.149,1020.11 285.708,999.084 286.268,978.126 286.827,990.446 287.386,969.806 287.945,1000.64 288.505,977.553 289.064,975.863 289.623,943.769 290.182,928.053 290.742,911.534 291.301,927.323 291.86,944.163 292.419,946.729 292.979,944.181 293.538,954.657 294.097,983.546 294.656,1000.28 295.216,974.723 295.775,1003.09 296.334,996.886 296.893,991.611 297.453,985.531 298.012,982.231 298.571,981.178 299.13,1010.55 299.69,1055.58 300.249,1032.43 300.808,1028.02 301.368,1024.83 301.927,1033.58 302.486,1040.83 303.045,1020.62 303.605,1029.42 304.164,1020.72 304.723,1013.27 305.282,976.191 305.842,969.122 306.401,980.63 306.96,979.371 307.519,1006.89 308.079,1001.09 308.638,1061.7 309.197,1064.89 309.756,1070.45 310.316,1059.22 310.875,1113.41 311.434,1116.71 311.993,1101.99 312.553,1087.79 313.112,1093.32 313.671,1065.02 314.23,1073.51 314.79,1064.6 315.349,1037.63 315.908,1077.01 316.467,1064.77 317.027,1038.63 317.586,1016.08 318.145,992.603 318.704,966.682 319.264,962.945 319.823,992.252 320.382,985.362 320.941,997.703 321.501,1025.02 322.06,984.81 322.619,945.35 323.178,923.318 323.738,935.346 324.297,897.365 324.856,879.635 325.415,890.919 325.975,811.243 326.534,780.77 327.093,797.743 327.652,798.604 328.212,801.298 328.771,772.504 329.33,794.297 329.889,797.266 330.449,799.814 331.008,786.261 331.567,783.711 332.126,786.912 332.686,820.677 333.245,806.544 333.804,842.212 334.363,861.575 334.923,881.227 335.482,895.874 336.041,893.754 336.6,889.813 337.16,905.601 337.719,934.371 338.278,959.166 338.837,970.631 339.397,979.434 339.956,990.216 340.515,965.116 341.074,977.523 341.634,1005.62 342.193,1010.63 342.752,1004.73 343.311,993.981 343.871,1001.92 344.43,1022.05 344.989,1008.5 345.548,1046.26 346.108,1084.4 346.667,1070.49 347.226,1042 347.785,1033.14 348.345,1038.28 348.904,1009.59 349.463,1032.82 350.022,1038.48 350.582,1010.12 351.141,968.243 351.7,941.809 352.259,918.284 352.819,899.736 353.378,892.1 353.937,888.117 354.496,933.714 355.056,929.956 355.615,908.017 356.174,887.372 356.733,870.177 357.293,880.538 357.852,873.833 358.411,853.484 358.97,837.864 359.53,817.282 360.089,835.863 360.648,803.15 361.207,801.04 361.767,818.487 362.326,803.191 362.885,819.144 363.444,785.492 364.004,789.144 364.563,821.651 365.122,839.781 365.681,854.059 366.241,849.009 366.8,845.726 367.359,843.283 367.918,807.862 368.478,793.599 369.037,793.795 369.596,812.172 370.155,809.77 370.715,792.784 371.274,812.665 371.833,892.442 372.392,886.623 372.952,913.394 373.511,906.573 374.07,869.611 374.629,865.651 375.189,923.35 375.748,918.836 376.307,911.385 376.866,918.08 377.426,897.517 377.985,877.168 378.544,918.387 379.103,912.479 379.663,938.437 380.222,949.117 380.781,925.926 381.34,904.022 381.9,868.2 382.459,864.596 383.018,878.239 383.577,872.714 384.137,851.86 384.696,880.528 385.255,859.2 385.814,888.894 386.374,903.924 386.933,914.069 387.492,952.405 388.051,945.486 388.611,939.421 389.17,911.287 389.729,906.676 390.288,902.204 390.848,930.305 391.407,905.717 391.966,865.179 392.525,828.217 393.085,826.146 393.644,840.091 394.203,803.427 394.762,819.718 395.322,799.337 395.881,766.157 396.44,801.109 396.999,800.082 397.559,774.052 398.118,758.415 398.677,746.261 399.236,767.182 399.796,767.417 400.355,780.292 400.914,795.287 401.473,761.051 402.033,773.234 402.592,792.563 403.151,794.42 403.71,757.685 404.27,742.587 404.829,743.822 405.388,746.312 405.947,715.713 406.507,734.218 407.066,767.847 407.625,768.241 408.184,751.607 408.744,753.019 409.303,755.182 409.862,753.795 410.421,817.156 410.981,862.833 411.54,855.036 412.099,833.375 412.658,829.261 413.218,808.015 413.777,774.436 414.336,773.918 414.895,774.298 415.455,761.58 416.014,796.122 416.573,824.142 417.132,854.873 417.692,833.067 418.251,780.908 418.81,800.985 419.369,816.738 419.929,816.477 420.488,800.818 421.047,817.085 421.606,814.216 422.166,812.114 422.725,824.874 423.284,820.081 423.843,769.601 424.403,754.452 424.962,819.669 425.521,850.876 426.08,862.666 426.64,858.466 427.199,821.561 427.758,818.856 428.318,835.271 428.877,844.928 429.436,825.494 429.995,837.646 430.555,831.903 431.114,829.29 431.673,810.84 432.232,790.736 432.792,790.715 433.351,805.582 433.91,803.329 434.469,798.659 435.029,811.364 435.588,793.168 436.147,806.747 436.706,867.064 437.266,826.183 437.825,808.662 438.384,804.186 438.943,786.651 439.503,768.212 440.062,801.184 440.621,781.8 441.18,777.706 441.74,796.187 442.299,812.043 442.858,821.099 443.417,782.197 443.977,729.626 444.536,745.404 445.095,774.871 445.654,789.222 446.214,776.473 446.773,773.623 447.332,787.586 447.891,770.13 448.451,733.356 449.01,732.926 449.569,762.466 450.128,747.042 450.688,745.304 451.247,664.25 451.806,651.577 452.365,609.292 452.925,616.357 453.484,588.771 454.043,595.133 454.602,589.829 455.162,593.85 455.721,602.558 456.28,612.7 456.839,618.426 457.399,595.945 457.958,605.591 458.517,597.379 459.076,621.082 459.636,641.997 460.195,649.809 460.754,639.558 461.313,644.394 461.873,680.547 462.432,650.614 462.991,655.775 463.55,674.959 464.11,680.212 464.669,679.566 465.228,700.246 465.787,731.42 466.347,732.064 466.906,748.208 467.465,732.172 468.024,732.807 468.584,751.171 469.143,720.224 469.702,723.52 470.261,726.463 470.821,710.995 471.38,741.166 471.939,740.551 472.498,743.258 473.058,743.998 473.617,728.958 474.176,727.211 474.735,742.905 475.295,744.723 475.854,774.019 476.413,742.713 476.972,757.437 477.532,792.528 478.091,776.154 478.65,803.698 479.209,767.485 479.769,797.916 480.328,776.538 480.887,774.631 481.446,805.786 482.006,802.184 482.565,813.248 483.124,824.215 483.683,836.863 484.243,831.189 484.802,842.713 485.361,834.346 485.92,829.374 486.48,806.31 487.039,799.74 487.598,796.465 488.157,809.258 488.717,805.774 489.276,800.539 489.835,828.499 490.394,818.976 490.954,797.281 491.513,809.616 492.072,824.535 492.631,800.613 493.191,795.762 493.75,760.056 494.309,737.884 494.868,754.556 495.428,754.452 495.987,767.216 496.546,780.187 497.105,762.4 497.665,727.834 498.224,742.99 498.783,743.877 499.342,741.435 499.902,755.255 500.461,756.029 501.02,774.624 501.579,804.352 502.139,817.335 502.698,814.554 503.257,797.947 503.816,781.167 504.376,778.563 504.935,743.033 505.494,722.444 506.053,739.046 506.613,738.419 507.172,751.63 507.731,750.563 508.29,752.825 508.85,734.242 509.409,685.132 509.968,684.548 510.527,717.356 511.087,750.521 511.646,686.041 512.205,672.569 512.764,694.399 513.324,694.276 513.883,728.69 514.442,723.986 515.001,722.754 515.561,720.897 516.12,718.49 516.679,751.859 517.238,733.212 517.798,766.16 518.357,765.578 518.916,777.934 519.475,773.251 520.035,772.741 520.594,771.873 521.153,754.575 521.712,755.409 522.272,754.003 522.831,750.027 523.39,766.772 523.949,761.742 524.509,726.175 525.068,725.771 525.627,726.348 526.186,742.455 526.746,772.472 527.305,768.69 527.864,780.029 528.423,797.594 528.983,807.79 529.542,805.237 530.101,780.682 530.66,782.484 531.22,795.52 531.779,761.365 532.338,758.074 532.897,770.151 533.457,769.928 534.016,753.377 534.575,750.468 535.134,748.507 535.694,733.356 536.253,747.843 536.812,742.816 537.371,726.117 537.931,707.524 538.49,742.819 539.049,739.759 539.608,770.627 540.168,767.458 540.727,760.342 541.286,741.187 541.845,722.912 542.405,709.489 542.964,693.154 543.523,679.179 544.082,668.339 544.642,671.124 545.201,643.263 545.76,646.292 546.319,668.528 546.879,658.425 547.438,648.311 547.997,666.38 548.556,701.955 549.116,705.678 549.675,756.964 550.234,703.819 550.793,684.489 551.353,666.607 551.912,686.559 552.471,687.959 553.031,705.481 553.59,720.496 554.149,716.871 554.708,732.848 555.268,730.6 555.827,726.449 556.386,712.705 556.945,729.539 557.505,712.384 558.064,698.619 558.623,715.665 559.182,750.405 559.742,750.956 560.301,751.12 560.86,717.091 561.419,719.384 561.979,686.11 562.538,670.372 563.097,671.994 563.656,641.673 564.216,645.038 564.775,649.86 565.334,683.307 565.893,702.89 566.453,671.18 567.012,671.529 567.571,690.088 568.13,690.543 568.69,696.246 569.249,680.531 569.808,696.374 570.367,719.181 570.927,730.104 571.486,714.648 572.045,732.136 572.604,713.615 573.164,748.256 573.723,759.112 574.282,757.273 574.841,786.586 575.401,785.077 575.96,779.596 576.519,757.661 577.078,755.698 577.638,754.727 578.197,754.874 578.756,765.531 579.315,782.804 579.875,826.735 580.434,817.294 580.993,779.075 581.552,740.107 582.112,737.135 582.671,706.074 583.23,720.225 583.789,718.48 584.349,720.665 584.908,703.64 585.467,702.065 586.026,685.164 586.586,703.222 587.145,684.718 587.704,685.539 588.263,704.878 588.823,671.965 589.382,659.084 589.941,693.487 590.5,694.31 591.06,696.182 591.619,662.785 592.178,634.024 592.737,639.777 593.297,672.578 593.856,661.139 594.415,649.529 594.974,667.765 595.534,684.901 596.093,699.906 596.652,764.489 597.211,777.317 597.771,790.723 598.33,782.167 598.889,829.26 599.448,840.758 600.008,818.857 600.567,817.6 601.126,797.53 601.685,808.888 602.245,805.438 602.804,798.664 603.363,793.903 603.922,824.761 604.482,786.082 605.041,765.518 605.6,763.063 606.159,726.079 606.719,692.786 607.278,712.104 607.837,710.631 608.396,709.778 608.956,690.16 609.515,709.972 610.074,708.403 610.633,739.791 611.193,781.536 611.752,776.311 612.311,773.148 612.87,769.842 613.43,762.197 613.989,809.954 614.548,818.445 615.107,865.395 615.667,854.602 616.226,761.652 616.785,711.873 617.344,754.467 617.904,750.971 618.463,749.307 619.022,760.852 619.581,723.448 620.141,707.058 620.7,712.503 621.259,745.134 621.818,740.996 622.378,704.379 622.937,685.22 623.496,721.393 624.055,719.273 624.615,715.576 625.174,687.023 625.733,669.308 626.292,688.581 626.852,706.709 627.411,691.435 627.97,727.003 628.529,744.211 629.089,743.299 629.648,725.974 630.207,756.735 630.766,768.573 631.326,779.836 631.885,777.251 632.444,742.63 633.003,723.463 633.563,707.592 634.122,723.199 634.681,706.243 635.24,706.509 635.8,692.819 636.359,644.707 636.918,644.456 637.477,635.002 638.037,639.761 638.596,613.051 639.155,601.194 639.714,589.895 640.274,597.872 640.833,602.895 641.392,626.866 641.951,630.689 642.511,651.159 643.07,642.095 643.629,663.541 644.188,645.78 644.748,634.167 645.307,636.956 645.866,626.19 646.425,596.97 646.985,586.342 647.544,607.744 648.103,629.279 648.662,632.256 649.222,651.933 649.781,687.92 650.34,691.821 650.899,694.3 651.459,696.002 652.018,758.489 652.577,752.947 653.136,751.982 653.696,730.941 654.255,726.094 654.814,708.722 655.373,693.587 655.933,728.754 656.492,740.867 657.051,739.52 657.61,754.524 658.17,748.337 658.729,695.484 659.288,694.863 659.847,679.844 660.407,683.308 660.966,699.517 661.525,696.293 662.084,698.303 662.644,698.651 663.203,698.602 663.762,683.801 664.321,682.119 664.881,704.319 665.44,737.991 665.999,764.882 666.558,728.606 667.118,694.872 667.677,711.827 668.236,758.309 668.795,752.6 669.355,718.224 669.914,685.464 670.473,698.62 671.032,685.152 671.592,685.4 672.151,654.604 672.71,656.161 673.269,658.767 673.829,658.034 674.388,675.359 674.947,694.889 675.506,660.13 676.066,610.741 676.625,626.461 677.184,613.773 677.743,614.487 678.303,617.688 678.862,620.803 679.421,642.258 679.981,663.495 680.54,712.131 681.099,679.633 681.658,729.556 682.218,725.223 682.777,721.562 683.336,702.369 683.895,689.849 684.455,702.973 685.014,656.819 685.573,657.978 686.132,645.078 686.692,661.547 687.251,678.851 687.81,678.714 688.369,678.625 688.929,679.952 689.488,712.888 690.047,698.942 690.606,745.183 691.166,681.335 691.725,666.673 692.284,666.946 692.843,670.863 693.403,673.522 693.962,692.515 694.521,643.608 695.08,663.357 695.64,665.015 696.199,667.821 696.758,653.339 697.317,690.55 697.877,688.895 698.436,706.23 698.995,724.287 699.554,737.094 700.114,751.828 700.673,719.996 701.232,735.189 701.791,717.744 702.351,731.21 702.91,709.023 703.469,709.686 704.028,725.653 704.588,709.733 705.147,693.065 705.706,709.465 706.265,706.493 706.825,723.012 707.384,718.535 707.943,718.37 708.502,718.409 709.062,684.892 709.621,704.894 710.18,674.776 710.739,656.548 711.299,679.454 711.858,700.119 712.417,684.471 712.976,682.004 713.536,667.454 714.095,652.775 714.654,654.658 715.213,672.611 715.773,671.079 716.332,688.619 716.891,707.682 717.45,708.153 718.01,674.061 718.569,676.511 719.128,679.135 719.687,713.43 720.247,762.508 720.806,773.974 721.365,788.01 721.924,802.375 722.484,800.235 723.043,810.747 723.602,835.257 724.161,813.888 724.721,759.018 725.28,773.14 725.839,784.137 726.398,778.992 726.958,759.978 727.517,755.16 728.076,736.161 728.635,736.477 729.195,719.569 729.754,716.791 730.313,717.867 730.872,699.816 731.432,732.781 731.991,728.9 732.55,757.629 733.109,803.914 733.669,780.109 734.228,742.935 734.787,755.282 735.346,769.468 735.906,780.024 736.465,792.034 737.024,785.405 737.583,747.594 738.143,763.935 738.702,714.185 739.261,682.449 739.82,683.938 740.38,702.895 740.939,705.652 741.498,704.164 742.057,702.951 742.617,714.189 743.176,694.549 743.735,696.11 744.294,694.808 744.854,692.084 745.413,674.521 745.972,678.513 746.531,680.227 747.091,695.986 747.65,693.45 748.209,646.37 748.768,665.146 749.328,683.862 749.887,652.415 750.446,669.484 751.005,672.56 751.565,659.514 752.124,643.932 752.683,679.408 753.242,663.25 753.802,648.098 754.361,679.954 754.92,681.283 755.479,650.676 756.039,653.474 756.598,635.591 757.157,640.208 757.716,604.271 758.276,626.812 758.835,615.772 759.394,605.268 759.953,628.616 760.513,663.197 761.072,647.128 761.631,650.732 762.19,637.518 762.75,641.151 763.309,645.181 763.868,629.64 764.427,662.964 764.987,683.929 765.546,652.683 766.105,671.022 766.664,625.759 767.224,611.06 767.783,596.738 768.342,597.796 768.901,598.254 769.461,604.845 770.02,613.206 770.579,637.115 771.138,654.533 771.698,656.503 772.257,641.222 772.816,677.066 773.375,696.236 773.935,716 774.494,734.086 775.053,734.051 775.612,733.054 776.172,744.135 776.731,771.497 777.29,767.855 777.849,731.963 778.409,694.435 778.968,672.405 779.527,690.281 780.086,690.464 780.646,722.883 781.205,720.921 781.764,763.677 782.323,761.178 782.883,742.027 783.442,739.743 784.001,753.64 784.56,719.46 785.12,718.375 785.679,704.177 786.238,685.063 786.797,715.866 787.357,712.759 787.916,742.201 788.475,720.516 789.034,736.603 789.594,751.342 790.153,730.699 790.712,730.137 791.271,731.355 791.831,728.693 792.39,727.233 792.949,743.771 793.508,742.087 794.068,725.643 794.627,708.183 795.186,689.696 795.745,659.646 796.305,660.322 796.864,626.423 797.423,631.968 797.982,616.826 798.542,603.384 799.101,623.251 799.66,612.673 800.219,632.213 800.779,602.234 801.338,574.672 801.897,579.886 802.456,602.842 803.016,622.837 803.575,609.608 804.134,629.832 804.693,666.418 805.253,652.892 805.812,700.71 806.371,680.522 806.931,680.754 807.49,683.841 808.049,713.681 808.608,726.494 809.168,721.522 809.727,737.579 810.286,767.633 810.845,745.134 811.405,759.378 811.964,792.227 812.523,771.31 813.082,770.366 813.642,768.133 814.201,797.381 814.76,745.482 815.319,742.084 815.879,741.863 816.438,737.337 816.997,751.811 817.556,731.482 818.116,714.138 818.675,712.155 819.234,711.163 819.793,725.96 820.353,725.411 820.912,774.885 821.471,788.589 822.03,785.611 822.59,762.909 823.149,741.275 823.708,772.227 824.267,784.424 824.827,809.103 825.386,800.385 825.945,745.835 826.504,727.109 827.064,695.41 827.623,680.471 828.182,681.055 828.741,647.187 829.301,649.71 829.86,652.46 830.419,658.507 830.978,677.408 831.538,679.464 832.097,727.047 832.656,773.996 833.215,747.94 833.775,760.425 834.334,739.63 834.893,736.36 835.452,728.911 836.012,726.466 836.571,757.918 837.13,767.642 837.689,749.741 838.249,728.252 838.808,729.253 839.367,693.762 839.926,692.313 840.486,706.299 841.045,673.095 841.604,691.024 842.163,686.636 842.723,638.834 843.282,620.385 843.841,608.538 844.4,593.406 844.96,599.569 845.519,602.549 846.078,640.078 846.637,643.543 847.197,631.045 847.756,681.2 848.315,696.338 848.874,693.569 849.434,675.684 849.993,677.697 850.552,712.438 851.111,695.784 851.671,711.274 852.23,708.822 852.789,675.351 853.348,690.191 853.908,692.115 854.467,674.997 855.026,692.955 855.585,679.185 856.145,676.899 856.704,661.253 857.263,630.752 857.822,614.569 858.382,619.87 858.941,642.914 859.5,642.385 860.059,642.205 860.619,629.471 861.178,617.661 861.737,653.466 862.296,688.228 862.856,691.432 863.415,676.404 863.974,663.207 864.533,665.036 865.093,667.241 865.652,684.65 866.211,670.128 866.77,672.185 867.33,657.089 867.889,708.403 868.448,691.78 869.007,708.273 869.567,725.829 870.126,725.591 870.685,726.422 871.244,725.54 871.804,724.707 872.363,723.971 872.922,738.682 873.481,704.571 874.041,719.935 874.6,714.806 875.159,713.189 875.718,694.534 876.278,692.527 876.837,677.549 877.396,663.521 877.955,665.169 878.515,662.972 879.074,649.172 879.633,650.747 880.192,635.181 880.752,622.907 881.311,622.8 881.87,595.102 882.429,584.427 882.989,591.039 883.548,580.895 884.107,585.35 884.666,609.407 885.226,629.956 885.785,564.186 886.344,570.217 886.903,578.058 887.463,616.729 888.022,639.593 888.581,660.445 889.14,672.103 889.7,691.351 890.259,674.925 890.818,659.334 891.377,693.202 891.937,672.754 892.496,655.295 893.055,719.984 893.614,732.108 894.174,713.759 894.733,747.206 895.292,774.971 895.851,801.645 896.411,812.862 896.97,818.873 897.529,810.763 898.088,757.39 898.648,752.742 899.207,763.467 899.766,772.41 900.325,769.199 900.885,766.792 901.444,779.994 902.003,803.888 902.562,828.935 903.122,824.421 903.681,833.897 904.24,811.481 904.799,808.785 905.359,817.87 905.918,828.317 906.477,803.996 907.036,796.286 907.596,806.44 908.155,833.287 908.714,777.588 909.273,758.083 909.833,737.773 910.392,749.055 910.951,710.118 911.51,709.525 912.07,709.83 912.629,692.953 913.188,677.228 913.747,665.606 914.307,605.663 914.866,611.216 915.425,601.392 915.984,637.328 916.544,636.667 917.103,624.252 917.662,628.14 918.221,612.989 918.781,570.656 919.34,576.274 919.899,562.668 920.458,570.439 921.018,593.508 921.577,600.354 922.136,639.977 922.695,658.774 923.255,690.067 923.814,704.275 924.373,685.854 924.932,684.175 925.492,666.728 926.051,686.121 926.61,669.731 927.169,670.701 927.729,671.762 928.288,641.303 928.847,626.869 929.406,644.521 929.966,663.603 930.525,665.365 931.084,727.838 931.644,710.604 932.203,723.604 932.762,690.039 933.321,669.469 933.881,700.493 934.44,715.605 934.999,727.728 935.558,711.374 936.118,707.227 936.677,689.86 937.236,672.331 937.795,646.142 938.355,647.784 938.914,615.059 939.473,618.003 940.032,621.428 940.592,597.888 941.151,622.155 941.71,628.373 942.269,604.513 942.829,595.7 943.388,601.51 943.947,591.501 944.506,614.466 945.066,650.653 945.625,655.695 946.184,672.456 946.743,673.343 947.303,685.602 947.862,686.74 948.421,672.053 948.98,656.276 949.54,658.353 950.099,676.649 950.658,657.657 951.217,657.802 951.777,626.479 952.336,645.612 952.895,682.009 953.454,650.694 954.014,635.184 954.573,658.928 955.132,644.188 955.691,651.327 956.251,687.258 956.81,687.065 957.369,703.548 957.928,698.945 958.488,713.635 959.047,712.681 959.606,712.991 960.165,679.034 960.725,667.698 961.284,668.55 961.843,666.366 962.402,651.66 962.962,653.287 963.521,636.004 964.08,638.367 964.639,606.512 965.199,613.329 965.758,616.767 966.317,603.794 966.876,642.379 967.436,665.865 967.995,698.307 968.554,714.36 969.113,745.974 969.673,727.697 970.232,708.871 970.791,690.546 971.35,674.276 971.91,676.413 972.469,694.099 973.028,677.367 973.587,678.144 974.147,680.069 974.706,728.808 975.265,741.528 975.824,740.997 976.384,704.22 976.943,683.468 977.502,682.329 978.061,664.921 978.621,696.302 979.18,677.688 979.739,680.573 980.298,631.198 980.858,634.07 981.417,639.089 981.976,625.982 982.535,616.512 983.095,635.356 983.654,658.381 984.213,630.884 984.772,570.843 985.332,592.603 985.891,568.218 986.45,578.781 987.009,586.879 987.569,589.38 988.128,612.739 988.687,618.282 989.246,621.295 989.806,653.532 990.365,674.222 990.924,661.218 991.483,681.067 992.043,698.032 992.602,712.831 993.161,710.269 993.72,707.729 994.28,724.22 994.839,709.064 995.398,741.144 995.957,753.707 996.517,720.419 997.076,716.238 997.635,793.792 998.194,802.918 998.754,812.91 999.313,835.988 999.872,841.923 1000.43,816.957 1000.99,811.935 1001.55,801.045 1002.11,792.694 1002.67,789.234 1003.23,785.75 1003.79,784.208 1004.35,814.646 1004.91,806.151 1005.46,803.389 1006.02,797.813 1006.58,774.193 1007.14,765.257 1007.7,765.208 1008.26,746.167 1008.82,729.243 1009.38,710.406 1009.94,710.285 1010.5,710.545 1011.06,644.118 1011.62,662.268 1012.18,682.918 1012.73,653.292 1013.29,654.82 1013.85,691.801 1014.41,705.36 1014.97,688.616 1015.53,716.322 1016.09,728.159 1016.65,705.566 1017.21,668.779 1017.77,652.633 1018.33,637.057 1018.89,654.479 1019.45,700.048 1020.01,652.203 1020.56,655.703 1021.12,692.18 1021.68,736.693 1022.24,700.715 1022.8,701.15 1023.36,717.269 1023.92,715.122 1024.48,712.842 1025.04,695.791 1025.6,681.402 1026.16,667.327 1026.72,670.085 1027.28,670.574 1027.83,656.731 1028.39,674.648 1028.95,656.141 1029.51,640.769 1030.07,658.72 1030.63,663.086 1031.19,645.121 1031.75,601.897 1032.31,639.888 1032.87,646.693 1033.43,663.889 1033.99,696.438 1034.55,661.892 1035.1,583.465 1035.66,589.96 1036.22,612.13 1036.78,602.317 1037.34,621.832 1037.9,610.065 1038.46,596.606 1039.02,602.128 1039.58,636.957 1040.14,637.788 1040.7,672.579 1041.26,691.225 1041.82,724.948 1042.38,738.867 1042.93,737.488 1043.49,736.112 1044.05,717.721 1044.61,732.742 1045.17,732.608 1045.73,728.577 1046.29,742.789 1046.85,772.515 1047.41,750.964 1047.97,745.313 1048.53,726.128 1049.09,754.194 1049.65,736.666 1050.2,766.044 1050.76,778.008 1051.32,777.503 1051.88,739.842 1052.44,770.242 1053,797.28 1053.56,808.486 1054.12,819.502 1054.68,793.85 1055.24,788.854 1055.8,782.131 1056.36,762.537 1056.92,759.885 1057.48,785.481 1058.03,780.343 1058.59,790.251 1059.15,780.611 1059.71,759.546 1060.27,753.11 1060.83,746.789 1061.39,775.644 1061.95,767.111 1062.51,730.275 1063.07,695.877 1063.63,676.205 1064.19,661.302 1064.75,660.767 1065.3,648.063 1065.86,681.38 1066.42,682.901 1066.98,681.329 1067.54,632.305 1068.1,631.986 1068.66,629.882 1069.22,634.895 1069.78,635.191 1070.34,638.875 1070.9,640.601 1071.46,659.112 1072.02,660.237 1072.57,677.528 1073.13,678.868 1073.69,680.66 1074.25,683.554 1074.81,699.726 1075.37,650.044 1075.93,647.451 1076.49,633.41 1077.05,650.852 1077.61,656.074 1078.17,689.305 1078.73,674.254 1079.29,644.565 1079.85,613.142 1080.4,635.026 1080.96,601.696 1081.52,606.107 1082.08,639.329 1082.64,642.519 1083.2,592.443 1083.76,632.027 1084.32,668.566 1084.88,684.136 1085.44,684.725 1086,654.121 1086.56,638.767 1087.12,655.799 1087.67,676.445 1088.23,676.848 1088.79,643.123 1089.35,642.71 1089.91,626.027 1090.47,613.98 1091.03,620.037 1091.59,641.927 1092.15,594.638 1092.71,636.033 1093.27,639.386 1093.83,654.817 1094.39,657.302 1094.94,661.155 1095.5,658.942 1096.06,646.864 1096.62,566.092 1097.18,574.632 1097.74,660.618 1098.3,675.901 1098.86,675.9 1099.42,709.419 1099.98,725.29 1100.54,751.269 1101.1,730.297 1101.66,744.21 1102.22,740.235 1102.77,737.115 1103.33,703.029 1103.89,651.945 1104.45,671.414 1105.01,677.017 1105.57,696.194 1106.13,743.288 1106.69,771.575 1107.25,799.056 1107.81,759.878 1108.37,723.401 1108.93,707.002 1109.49,640.168 1110.04,673.637 1110.6,689.548 1111.16,659.237 1111.72,658.798 1112.28,676.257 1112.84,690.533 1113.4,673.901 1113.96,692.094 1114.52,705.408 1115.08,707.373 1115.64,719.905 1116.2,650.683 1116.76,636.979 1117.31,652.832 1117.87,640.351 1118.43,639.799 1118.99,644.951 1119.55,633.687 1120.11,635.807 1120.67,619.305 1121.23,590.726 1121.79,577.105 1122.35,634.642 1122.91,641.302 1123.47,626.579 1124.03,597.128 1124.59,619.321 1125.14,622.43 1125.7,704.301 1126.26,733.23 1126.82,746.72 1127.38,722.577 1127.94,751.079 1128.5,731.889 1129.06,697.134 1129.62,676.265 1130.18,678.113 1130.74,676.938 1131.3,692.261 1131.86,629.295 1132.41,632.415 1132.97,635.004 1133.53,624.797 1134.09,627.707 1134.65,663.096 1135.21,663.915 1135.77,665.921 1136.33,631.652 1136.89,649.786 1137.45,654.102 1138.01,676.51 1138.57,660.119 1139.13,661.441 1139.68,644.173 1140.24,660.096 1140.8,664.445 1141.36,665.028 1141.92,652.172 1142.48,700.805 1143.04,700.75 1143.6,763.492 1144.16,758.739 1144.72,758.076 1145.28,739.791 1145.84,736.81 1146.4,752.991 1146.96,731.283 1147.51,682.675 1148.07,663.268 1148.63,667.758 1149.19,663.745 1149.75,663.995 1150.31,678.657 1150.87,676.144 1151.43,646.102 1151.99,665.367 1152.55,681.262 1153.11,681.826 1153.67,651.173 1154.23,681.903 1154.78,697.822 1155.34,680.055 1155.9,711.354 1156.46,758.607 1157.02,768.251 1157.58,812.592 1158.14,794.34 1158.7,789.204 1159.26,780.634 1159.82,739.978 1160.38,736.299 1160.94,801.103 1161.5,796.117 1162.05,777.33 1162.61,786.683 1163.17,781.348 1163.73,789.88 1164.29,799.328 1164.85,762.703 1165.41,743.668 1165.97,723.081 1166.53,716.312 1167.09,731.185 1167.65,711.264 1168.21,692.66 1168.77,721.754 1169.33,702.174 1169.88,686.399 1170.44,653.679 1171,653.477 1171.56,640.17 1172.12,694.234 1172.68,679.201 1173.24,676.016 1173.8,707.276 1174.36,690.997 1174.92,671.89 1175.48,640.214 1176.04,691.298 1176.6,673.177 1177.15,655.197 1177.71,655.492 1178.27,639.544 1178.83,657.118 1179.39,591.313 1179.95,611.537 1180.51,613.014 1181.07,618.795 1181.63,605.953 1182.19,627.131 1182.75,650.632 1183.31,653.529 1183.87,721.471 1184.43,751.057 1184.98,714.59 1185.54,710.555 1186.1,741.897 1186.66,726.302 1187.22,755.998 1187.78,768.04 1188.34,795.532 1188.9,774.222 1189.46,740.154 1190.02,740.491 1190.58,722.533 1191.14,739.566 1191.7,722.345 1192.25,723.344 1192.81,704.283 1193.37,688.654 1193.93,690.764 1194.49,700.786 1195.05,698.96 1195.61,651.954 1196.17,652.909 1196.73,653.679 1197.29,638.093 1197.85,626.526 1198.41,627.776 1198.97,644.146 1199.52,648.151 1200.08,618.014 1200.64,607.639 1201.2,615.669 1201.76,634.466 1202.32,688.407 1202.88,674.992 1203.44,691.515 1204,707.261 1204.56,688.839 1205.12,704.441 1205.68,719.183 1206.24,716.932 1206.8,716.1 1207.35,728.158 1207.91,726.138 1208.47,707.173 1209.03,753.455 1209.59,714.761 1210.15,716.396 1210.71,633.464 1211.27,554.186 1211.83,560.925 1212.39,581.286 1212.95,589.055 1213.51,596.706 1214.07,600.917 1214.62,588.665 1215.18,579.134 1215.74,571.818 1216.3,625.286 1216.86,613.593 1217.42,583.342 1217.98,570.823 1218.54,593.604 1219.1,615.116 1219.66,615.328 1220.22,635.055 1220.78,623.287 1221.34,610.402 1221.89,611.515 1222.45,598.582 1223.01,638.301 1223.57,656.913 1224.13,658.462 1224.69,608.595 1225.25,610.338 1225.81,666.854 1226.37,670.63 1226.93,670.498 1227.49,704.074 1228.05,754.237 1228.61,768.332 1229.17,750.921 1229.72,732.777 1230.28,734.328 1230.84,761.914 1231.4,743.032 1231.96,757.275 1232.52,750.645 1233.08,780.622 1233.64,760.302 1234.2,758.786 1234.76,771.896 1235.32,721.663 1235.88,704.83 1236.44,674.524 1236.99,688.262 1237.55,735.269 1238.11,760.456 1238.67,790.429 1239.23,803.905 1239.79,815.129 1240.35,792.453 1240.91,786.602 1241.47,797.751 1242.03,774.239 1242.59,801.223 1243.15,777.564 1243.71,754.191 1244.26,734.409 1244.82,730.683 1245.38,745.759 1245.94,738.649 1246.5,717.025 1247.06,750.281 1247.62,728.421 1248.18,739.092 1248.74,721.96 1249.3,707.322 1249.86,675.722 1250.42,622.93 1250.98,625.41 1251.54,595.896 1252.09,629.245 1252.65,679.482 1253.21,665.598 1253.77,683.312 1254.33,680.276 1254.89,697.967 1255.45,746.589 1256.01,707.963 1256.57,707.022 1257.13,711.526 1257.69,728.226 1258.25,727.924 1258.81,722.484 1259.36,702.506 1259.92,719.641 1260.48,732.092 1261.04,713.774 1261.6,746.233 1262.16,726.384 1262.72,707.601 1263.28,709.498 1263.84,691.415 1264.4,688.229 1264.96,672.559 1265.52,685.099 1266.08,687.531 1266.63,718.411 1267.19,702.629 1267.75,718.508 1268.31,734.371 1268.87,735.092 1269.43,715.608 1269.99,696.543 1270.55,679.024 1271.11,692.393 1271.67,708.788 1272.23,725.973 1272.79,725.241 1273.35,688.464 1273.91,685.958 1274.46,698.039 1275.02,678.022 1275.58,677.569 1276.14,695.803 1276.7,696.341 1277.26,696.997 1277.82,663.169 1278.38,629.07 1278.94,646.48 1279.5,599.811 1280.06,623.447 1280.62,607.309 1281.18,596.186 1281.73,603.085 1282.29,622.858 1282.85,596.071 1283.41,600.714 1283.97,618.882 1284.53,640.075 1285.09,657.759 1285.65,645.373 1286.21,629.608 1286.77,582.547 1287.33,572.822 1287.89,560.89 1288.45,584.95 1289,575.868 1289.56,601.257 1290.12,606.623 1290.68,611.721 1291.24,552.191 1291.8,560.973 1292.36,550.217 1292.92,569.197 1293.48,561.96 1294.04,585.002 1294.6,605.987 1295.16,612.015 1295.72,615.667 1296.28,573.781 1296.83,544.903 1297.39,552.523 1297.95,575.391 1298.51,597.863 1299.07,612.58 1299.63,664.733 1300.19,730.142 1300.75,715.107 1301.31,682.944 1301.87,680.654 1302.43,681.166 1302.99,697.901 1303.55,697.01 1304.1,691.607 1304.66,689.281 1305.22,675.66 1305.78,642.107 1306.34,646.353 1306.9,633.315 1307.46,635.405 1308.02,636.027 1308.58,638.306 1309.14,627.28 1309.7,611.769 1310.26,612.943 1310.82,647.927 1311.38,647.616 1311.93,634.268 1312.49,650.697 1313.05,652.498 1313.61,689.331 1314.17,738.436 1314.73,733.083 1315.29,727.698 1315.85,709.723 1316.41,676.575 1316.97,676.751 1317.53,642.016 1318.09,643.608 1318.65,610.574 1319.2,617.319 1319.76,624.233 1320.32,643.516 1320.88,681.416 1321.44,662.699 1322,699.196 1322.56,665.088 1323.12,680.075 1323.68,683.125 1324.24,697.618 1324.8,702.098 1325.36,714.079 1325.92,730.738 1326.47,775.903 1327.03,791.652 1327.59,788.086 1328.15,764.423 1328.71,763.633 1329.27,760.628 1329.83,775.024 1330.39,833.915 1330.95,825.892 1331.51,816.505 1332.07,825.143 1332.63,803.472 1333.19,796.67 1333.75,820.032 1334.3,809.389 1334.86,785.11 1335.42,779.853 1335.98,757.23 1336.54,708.62 1337.1,705.308 1337.66,735.398 1338.22,763.755 1338.78,773.546 1339.34,734.563 1339.9,699.591 1340.46,668.542 1341.02,654.208 1341.57,671.376 1342.13,654.65 1342.69,653.46 1343.25,655.671 1343.81,625.536 1344.37,647.843 1344.93,684.566 1345.49,669.808 1346.05,687.816 1346.61,667.249 1347.17,655.772 1347.73,691.226 1348.29,706.668 1348.84,711.598 1349.4,711.456 1349.96,708.595 1350.52,707.093 1351.08,704.877 1351.64,687.185 1352.2,669.424 1352.76,639.595 1353.32,644.019 1353.88,649 1354.44,663.221 1355,648.473 1355.56,649.282 1356.12,652.181 1356.67,669.444 1357.23,636.483 1357.79,636.254 1358.35,640.484 1358.91,657.239 1359.47,677.951 1360.03,692.453 1360.59,705.563 1361.15,706.666 1361.71,716.702 1362.27,749.404 1362.83,747.273 1363.39,791.172 1363.94,771.861 1364.5,750.041 1365.06,700.161 1365.62,684.447 1366.18,700.909 1366.74,686.931 1367.3,687.49 1367.86,703.453 1368.42,668.782 1368.98,651.848 1369.54,636.467 1370.1,639.64 1370.66,624.532 1371.21,612.576 1371.77,586.334 1372.33,605.463 1372.89,612.426 1373.45,616.27 1374.01,601.144 1374.57,622.494 1375.13,660.838 1375.69,661.542 1376.25,643.498 1376.81,630.001 1377.37,637.569 1377.93,623.773 1378.49,624.706 1379.04,626.256 1379.6,627.029 1380.16,628.79 1380.72,631.593 1381.28,600.94 1381.84,656.955 1382.4,675.408 1382.96,694.033 1383.52,646.49 1384.08,653.97 1384.64,668.942 1385.2,652.33 1385.76,649.25 1386.31,650.022 1386.87,651.728 1387.43,672.014 1387.99,657.234 1388.55,658.761 1389.11,665.164 1389.67,668.512 1390.23,687.386 1390.79,705.089 1391.35,709.188 1391.91,707.997 1392.47,724.241 1393.03,718.019 1393.58,762.381 1394.14,775.142 1394.7,749.771 1395.26,761.131 1395.82,744.813 1396.38,726.532 1396.94,724.899 1397.5,738.701 1398.06,720.4 1398.62,734.222 1399.18,749.602 1399.74,725.084 1400.3,739.317 1400.86,719.893 1401.41,697.336 1401.97,711.353 1402.53,693.956 1403.09,713.139 1403.65,727.312 1404.21,727.048 1404.77,694.186 1405.33,708.932 1405.89,671.506 1406.45,670.974 1407.01,705.819 1407.57,690.797 1408.13,689.547 1408.68,691.76 1409.24,691.821 1409.8,657.423 1410.36,677.211 1410.92,645.765 1411.48,665.319 1412.04,632.518 1412.6,665.666 1413.16,680.722 1413.72,666.292 1414.28,665.975 1414.84,697.431 1415.4,713.172 1415.95,744.032 1416.51,722.381 1417.07,750.444 1417.63,747.867 1418.19,758.502 1418.75,754.895 1419.31,733.832 1419.87,813.016 1420.43,821.916 1420.99,814.689 1421.55,854.809 1422.11,860.307 1422.67,819.032 1423.23,799.243 1423.78,773.963 1424.34,753.202 1424.9,765.697 1425.46,777.964 1426.02,772.768 1426.58,748.486 1427.14,744.567 1427.7,724.492 1428.26,722.119 1428.82,738.682 1429.38,717.318 1429.94,716.946 1430.5,716.316 1431.05,715.848 1431.61,698.177 1432.17,712.471 1432.73,697.047 1433.29,699.461 1433.85,698.976 1434.41,711.722 1434.97,694.416 1435.53,708.705 1436.09,688.194 1436.65,705.086 1437.21,688.455 1437.77,670.161 1438.33,638.231 1438.88,638.694 1439.44,638.272 1440,587.718 1440.56,591.293 1441.12,595.092 1441.68,598.274 1442.24,553.21 1442.8,560.653 1443.36,551.525 1443.92,542.277 1444.48,564.609 1445.04,587.108 1445.6,594.679 1446.15,587.732 1446.71,612.964 1447.27,564.415 1447.83,589.255 1448.39,594.242 1448.95,615.978 1449.51,622.64 1450.07,626.048 1450.63,629.236 1451.19,616.744 1451.75,620.384 1452.31,609.72 1452.87,632.728 1453.42,616.658 1453.98,654.121 1454.54,665.492 1455.1,667.932 1455.66,638.336 1456.22,642.243 1456.78,676.345 1457.34,675.521 1457.9,707.702 1458.46,706.41 1459.02,723.827 1459.58,754.647 1460.14,779.286 1460.7,774.89 1461.25,801.369 1461.81,827.492 1462.37,786.36 1462.93,763.811 1463.49,711.794 1464.05,726.315 1464.61,723.77 1465.17,724.771 1465.73,679.868 1466.29,715.779 1466.85,698.601 1467.41,681.987 1467.97,685.017 1468.52,682.492 1469.08,699.733 1469.64,683.415 1470.2,693.363 1470.76,694.293 1471.32,709.337 1471.88,723.03 1472.44,700.238 1473,731.488 1473.56,760.791 1474.12,729.293 1474.68,712.762 1475.24,697.177 1475.79,715.764 1476.35,747.345 1476.91,745.92 1477.47,744.913 1478.03,743.295 1478.59,773.384 1479.15,802.95 1479.71,830.336 1480.27,823.018 1480.83,770.644 1481.39,732.79 1481.95,729.857 1482.51,744.679 1483.07,757.475 1483.62,752.438 1484.18,766.482 1484.74,730.28 1485.3,743.09 1485.86,744.522 1486.42,771.165 1486.98,766.609 1487.54,743.659 1488.1,757.785 1488.66,719.909 1489.22,667.625 1489.78,668.736 1490.34,669.727 1490.89,632.234 1491.45,595.456 1492.01,647.202 1492.57,651.389 1493.13,652.456 1493.69,671.823 1494.25,655.783 1494.81,691.102 1495.37,688.275 1495.93,672.638 1496.49,673.732 1497.05,672.259 1497.61,706.369 1498.16,700.801 1498.72,704.499 1499.28,701.055 1499.84,698.49 1500.4,678.998 1500.96,710.119 1501.52,693.182 1502.08,726.697 1502.64,707.828 1503.2,688.83 1503.76,705.482 1504.32,704.214 1504.88,686.572 1505.44,705.498 1505.99,750.581 1506.55,794.238 1507.11,757.515 1507.67,786.654 1508.23,748.458 1508.79,745.956 1509.35,726.411 1509.91,703.442 1510.47,702.439 1511.03,699.584 1511.59,700.721 1512.15,668.016 1512.71,701.186 1513.26,684.335 1513.82,700.513 1514.38,749.541 1514.94,763.819 1515.5,776.451 1516.06,771.743 1516.62,750.619 1517.18,779.374 1517.74,771.745 1518.3,735.291 1518.86,732.19 1519.42,733.778 1519.98,729.498 1520.53,727.856 1521.09,739.43 1521.65,748.48 1522.21,758.968 1522.77,754.316 1523.33,736.04 1523.89,733.729 1524.45,647.929 1525.01,618.198 1525.57,620.965 1526.13,638.513 1526.69,608.383 1527.25,578.472 1527.81,572.308 1528.36,578.611 1528.92,550.94 1529.48,522.456 1530.04,513.932 1530.6,503.477 1531.16,528.335 1531.72,507.586 1532.28,530.291 1532.84,537.998 1533.4,527.82 1533.96,533.801 1534.52,523.646 1535.08,501.611 1535.63,480.292 1536.19,508.509 1536.75,518.029 1537.31,511.173 1537.87,500.288 1538.43,511.789 1538.99,522.482 1539.55,551.685 1540.11,542.016 1540.67,532.556 1541.23,542.275 1541.79,563.688 1542.35,585.081 1542.9,573.227 1543.46,579.714 1544.02,601.181 1544.58,587.641 1545.14,577.721 1545.7,583.453 1546.26,587.716 1546.82,581.735 1547.38,620.77 1547.94,625.307 1548.5,612.692 1549.06,600.032 1549.62,621.932 1550.18,638.218 1550.73,674.265 1551.29,692.815 1551.85,677.542 1552.41,676.039 1552.97,677.015 1553.53,661.544 1554.09,697.006 1554.65,681.39 1555.21,664.24 1555.77,649.14 1556.33,673.198 1556.89,691.927 1557.45,674.793 1558,710.592 1558.56,666.545 1559.12,667.737 1559.68,685.007 1560.24,685.809 1560.8,668.54 1561.36,681.434 1561.92,666.533 1562.48,698.745 1563.04,731.123 1563.6,681.959 1564.16,666.834 1564.72,669.857 1565.28,669.161 1565.83,637.581 1566.39,625.041 1566.95,610.691 1567.51,630.284 1568.07,619.239 1568.63,604.756 1569.19,558.72 1569.75,583.817 1570.31,574.025 1570.87,594.232 1571.43,615.714 1571.99,653.114 1572.55,670.068 1573.1,698.812 1573.66,682.378 1574.22,685.311 1574.78,685.042 1575.34,688.712 1575.9,721.114 1576.46,672.489 1577.02,674.861 1577.58,678.395 1578.14,678.528 1578.7,679.807 1579.26,711.239 1579.82,711.341 1580.37,698.394 1580.93,686.461 1581.49,690.661 1582.05,707.455 1582.61,691.773 1583.17,725.251 1583.73,755.228 1584.29,784.166 1584.85,764.711 1585.41,760.519 1585.97,788.915 1586.53,797.85 1587.09,840.567 1587.65,849.184 1588.2,825.654 1588.76,832.604 1589.32,824.525 1589.88,818.157 1590.44,794.417 1591,784.897 1591.56,810.936 1592.12,790.16 1592.68,769.914 1593.24,763.116 1593.8,793.315 1594.36,804.75 1594.92,815.956 1595.47,838.547 1596.03,830.369 1596.59,804.321 1597.15,781.601 1597.71,778.44 1598.27,805.215 1598.83,765.904 1599.39,743.496 1599.95,721.46 1600.51,718.285 1601.07,747.581 1601.63,743.649 1602.19,724.078 1602.74,718.922 1603.3,716.578 1603.86,714.339 1604.42,745.467 1604.98,723.664 1605.54,722.041 1606.1,733.267 1606.66,733.101 1607.22,728.57 1607.78,743.787 1608.34,739.333 1608.9,690.479 1609.46,660.44 1610.02,699.027 1610.57,681.579 1611.13,631.938 1611.69,613.45 1612.25,615.364 1612.81,599.912 1613.37,619.496 1613.93,624.118 1614.49,628.449 1615.05,648.986 1615.61,652.395 1616.17,636.434 1616.73,686.153 1617.29,685.242 1617.84,672.467 1618.4,620.32 1618.96,639.839 1619.52,645.745 1620.08,681.297 1620.64,665.039 1621.2,696.667 1621.76,679.973 1622.32,679.998 1622.88,680.134 1623.44,714.533 1624,693.492 1624.56,697.064 1625.11,746.251 1625.67,743.194 1626.23,743.428 1626.79,740.828 1627.35,741.118 1627.91,721.33 1628.47,687.192 1629.03,699.311 1629.59,699.51 1630.15,683.71 1630.71,649.527 1631.27,666.182 1631.83,670.642 1632.39,703.275 1632.94,699.736 1633.5,715.22 1634.06,711.58 1634.62,676.156 1635.18,691.61 1635.74,689.579 1636.3,703.455 1636.86,731.156 1637.42,712.597 1637.98,711.574 1638.54,724.445 1639.1,722.563 1639.66,717.954 1640.21,715.803 1640.77,696.197 1641.33,724.161 1641.89,737.499 1642.45,733.7 1643.01,730.676 1643.57,714.634 1644.13,715.391 1644.69,680.501 1645.25,700.299 1645.81,701.541 1646.37,684.757 1646.93,669.547 1647.48,685.731 1648.04,663.552 1648.6,644.625 1649.16,660.499 1649.72,660.944 1650.28,643.172 1650.84,663.972 1651.4,665.4 1651.96,631.01 1652.52,612.894 1653.08,615.769 1653.64,620.338 1654.2,638.716 1654.76,627.734 1655.31,611.777 1655.87,614.019 1656.43,648.9 1656.99,638.722 1657.55,623.977 1658.11,657.719 1658.67,661.181 1659.23,646.869 1659.79,636.036 1660.35,619.774 1660.91,588.179 1661.47,643.326 1662.03,629.228 1662.58,615.936 1663.14,680.56 1663.7,727.44 1664.26,755.814 1664.82,735.677 1665.38,735.043 1665.94,698.953 1666.5,701.521 1667.06,702.605 1667.62,672.044 1668.18,657.734 1668.74,678.31 1669.3,677.407 1669.85,661.045 1670.41,643.23 1670.97,627.957 1671.53,615.479 1672.09,601.551 1672.65,605.718 1673.21,592.32 1673.77,581.986 1674.33,601.886 1674.89,603.559 1675.45,606.838 1676.01,629.695 1676.57,613.001 1677.13,616.137 1677.68,606.367 1678.24,611.688 1678.8,630.785 1679.36,620.456 1679.92,594.837 1680.48,613.068 1681.04,617.539 1681.6,620.042 1682.16,637.55 1682.72,655.732 1683.28,675.478 1683.84,661.897 1684.4,680.594 1684.95,631.368 1685.51,630.932 1686.07,668.417 1686.63,687.95 1687.19,704.625 1687.75,700.613 1688.31,717.161 1688.87,713.203 1689.43,694.685 1689.99,694.388 1690.55,727.962 1691.11,696.059 1691.67,710.361 1692.23,692.695 1692.78,691.479 1693.34,723.533 1693.9,718.979 1694.46,703.676 1695.02,700.265 1695.58,703.945 1696.14,688.525 1696.7,704.953 1697.26,719.593 1697.82,746.419 1698.38,744.215 1698.94,730.133 1699.5,728.743 1700.05,724.481 1700.61,722.634 1701.17,734.415 1701.73,763.06 1702.29,746.695 1702.85,741.028 1703.41,752.576 1703.97,776.747 1704.53,757.717 1705.09,738.785 1705.65,733.267 1706.21,728.748 1706.77,724.789 1707.32,704.423 1707.88,687.858 1708.44,687.732 1709,720.3 1709.56,718.987 1710.12,700.882 1710.68,701.107 1711.24,717.221 1711.8,749.464 1712.36,794.895 1712.92,724.103 1713.48,738.42 1714.04,702.133 1714.6,695.159 1715.15,694.173 1715.71,679.349 1716.27,712.059 1716.83,726.08 1717.39,704.384 1717.95,733.853 1718.51,683.957 1719.07,712.644 1719.63,664.058 1720.19,649.481 1720.75,668.393 1721.31,687.848 1721.87,673.335 1722.42,659.079 1722.98,643.126 1723.54,642.88 1724.1,642.375 1724.66,646.387 1725.22,634.764 1725.78,636.685 1726.34,672.624 1726.9,670.749 1727.46,654.77 1728.02,671.725 1728.58,626.069 1729.14,629.516 1729.69,616.061 1730.25,668.733 1730.81,683.739 1731.37,667.933 1731.93,639.607 1732.49,676.834 1733.05,676.804 1733.61,723.641 1734.17,737.964 1734.73,768.546 1735.29,746.061 1735.85,691.372 1736.41,675.508 1736.97,678.799 1737.52,692.43 1738.08,690.588 1738.64,690.75 1739.2,694.191 1739.76,712.988 1740.32,728.445 1740.88,693.063 1741.44,692.637 1742,708.368 1742.56,670.808 1743.12,654.275 1743.68,674.596 1744.24,692.786 1744.79,690.742 1745.35,677.197 1745.91,678.503 1746.47,712.446 1747.03,710.815 1747.59,711.604 1748.15,694.537 1748.71,707.699 1749.27,720.664 1749.83,703.068 1750.39,719.889 1750.95,698.66 1751.51,696.414 1752.06,664.471 1752.62,648.34 1753.18,685.313 1753.74,669.55 1754.3,634.371 1754.86,620.147 1755.42,639.925 1755.98,643.489 1756.54,616.686 1757.1,603.93 1757.66,594.043 1758.22,633.015 1758.78,640.563 1759.34,642.782 1759.89,645.27 1760.45,647.93 1761.01,665.544 1761.57,664.37 1762.13,662.836 1762.69,649.338 1763.25,668.134 1763.81,700.381 1764.37,731.943 1764.93,718.86 1765.49,733.644 1766.05,762.241 1766.61,758.08 1767.16,722.643 1767.72,687.675 1768.28,658.585 1768.84,660.519 1769.4,691.016 1769.96,674.868 1770.52,638.231 1771.08,622.688 1771.64,594.29 1772.2,599.769 1772.76,602.905 1773.32,605.966 1773.88,578.518 1774.43,600.559 1774.99,605.251 1775.55,607.035 1776.11,627.276 1776.67,600.782 1777.23,607.205 1777.79,642.463 1778.35,679.17 1778.91,680.699 1779.47,696.442 1780.03,715.032 1780.59,697.494 1781.15,681.177 1781.71,699.637 1782.26,699.872 1782.82,704.939 1783.38,701.485 1783.94,713.804 1784.5,695.16 1785.06,709.282 1785.62,724.487 1786.18,744.877 1786.74,726.129 1787.3,704.016 1787.86,690.143 1788.42,686.432 1788.98,672.052 1789.53,655.922 1790.09,653.686 1790.65,669.772 1791.21,688.712 1791.77,653.824 1792.33,656.258 1792.89,656.272 1793.45,672.615 1794.01,690.538 1794.57,705.882 1795.13,692.702 1795.69,708.496 1796.25,710.475 1796.8,709.018 1797.36,707.121 1797.92,705.092 1798.48,704.116 1799.04,720.062 1799.6,716.992 1800.16,732.784 1800.72,715.079 1801.28,744.521 1801.84,695 1802.4,709.417 1802.96,691.82 1803.52,689.926 1804.08,705.019 1804.63,723.368 1805.19,719.124 1805.75,698.841 1806.31,681.22 1806.87,730.676 1807.43,746.358 1807.99,744.145 1808.55,754.201 1809.11,766.459 1809.67,742.008 1810.23,753.94 1810.79,748.658 1811.35,726.16 1811.9,722.125 1812.46,719.69 1813.02,720.006 1813.58,735.743 1814.14,732.574 1814.7,761.235 1815.26,725.769 1815.82,706.736 1816.38,705.403 1816.94,686.723 1817.5,673.245 1818.06,689.342 1818.62,669.962 1819.18,604.761 1819.73,608.989 1820.29,611.874 1820.85,628.464 1821.41,597.559 1821.97,583.33 1822.53,574.185 1823.09,595.682 1823.65,597.723 1824.21,618.658 1824.77,634.241 1825.33,651.226 1825.89,650.229 1826.45,649.586 1827,635.534 1827.56,657.805 1828.12,659.772 1828.68,624.923 1829.24,627.791 1829.8,615.122 1830.36,635.185 1830.92,639.1 1831.48,640.889 1832.04,645.683 1832.6,649.439 1833.16,618.767 1833.72,622.33 1834.27,625.768 1834.83,627.794 1835.39,648.715 1835.95,648.964 1836.51,656.634 1837.07,674.958 1837.63,658.033 1838.19,724.788 \"/>\n<path clip-path=\"url(#clip693)\" d=\"M720.247 691.522 L720.806 691.522 L721.365 691.522 L721.924 691.522 L722.484 691.522 L723.043 691.522 L723.602 691.522 L724.161 691.522 L724.721 691.522 L725.28 691.522 L725.839 691.522 L726.398 691.522 L726.958 691.522 L727.517 691.522 L728.076 691.522 L728.635 691.522 L729.195 691.522 L729.754 691.522 L730.313 691.522 L730.872 691.522 L731.432 691.522 L731.991 691.522 L732.55 691.522 L733.109 691.522 L733.669 691.522 L734.228 691.522 L734.787 691.522 L735.346 691.522 L735.906 691.522 L736.465 691.522 L737.024 691.522 L737.583 691.522 L738.143 691.522 L738.702 691.522 L739.261 691.522 L739.82 691.522 L740.38 691.522 L740.939 691.522 L741.498 691.522 L742.057 691.522 L742.617 691.522 L743.176 691.522 L743.735 691.522 L744.294 691.522 L744.854 691.522 L745.413 691.522 L745.972 691.522 L746.531 691.522 L747.091 691.522 L747.65 691.522 L748.209 691.522 L748.768 691.522 L749.328 691.522 L749.887 691.522 L750.446 691.522 L751.005 691.522 L751.565 691.522 L752.124 691.522 L752.683 691.522 L753.242 691.522 L753.802 691.522 L754.361 691.522 L754.92 691.522 L755.479 691.522 L756.039 691.522 L756.598 691.522 L757.157 691.522 L757.716 691.522 L758.276 691.522 L758.835 691.522 L759.394 691.522 L759.953 691.522 L760.513 691.522 L761.072 691.522 L761.631 691.522 L762.19 691.522 L762.75 691.522 L763.309 691.522 L763.868 691.522 L764.427 691.522 L764.987 691.522 L765.546 691.522 L766.105 691.522 L766.664 691.522 L767.224 691.522 L767.783 691.522 L768.342 691.522 L768.901 691.522 L769.461 691.522 L770.02 691.522 L770.579 691.522 L771.138 691.522 L771.698 691.522 L772.257 691.522 L772.816 691.522 L773.375 691.522 L773.935 691.522 L774.494 691.522 L775.053 691.522 L775.612 691.522 L776.172 691.522 L776.731 691.522 L777.29 691.522 L777.849 691.522 L778.409 691.522 L778.968 691.522 L779.527 691.522 L780.086 691.522 L780.646 691.522 L781.205 691.522 L781.764 691.522 L782.323 691.522 L782.883 691.522 L783.442 691.522 L784.001 691.522 L784.56 691.522 L785.12 691.522 L785.679 691.522 L786.238 691.522 L786.797 691.522 L787.357 691.522 L787.916 691.522 L788.475 691.522 L789.034 691.522 L789.594 691.522 L790.153 691.522 L790.712 691.522 L791.271 691.522 L791.831 691.522 L792.39 691.522 L792.949 691.522 L793.508 691.522 L794.068 691.522 L794.627 691.522 L795.186 691.522 L795.745 691.522 L796.305 691.522 L796.864 691.522 L797.423 691.522 L797.982 691.522 L798.542 691.522 L799.101 691.522 L799.66 691.522 L800.219 691.522 L800.779 691.522 L801.338 691.522 L801.897 691.522 L802.456 691.522 L803.016 691.522 L803.575 691.522 L804.134 691.522 L804.693 691.522 L805.253 691.522 L805.812 691.522 L806.371 691.522 L806.931 691.522 L807.49 691.522 L808.049 691.522 L808.608 691.522 L809.168 691.522 L809.727 691.522 L810.286 691.522 L810.845 691.522 L811.405 691.522 L811.964 691.522 L812.523 691.522 L813.082 691.522 L813.642 691.522 L814.201 691.522 L814.76 691.522 L815.319 691.522 L815.879 691.522 L816.438 691.522 L816.997 691.522 L817.556 691.522 L818.116 691.522 L818.675 691.522 L819.234 691.522 L819.793 691.522 L820.353 691.522 L820.912 691.522 L821.471 691.522 L822.03 691.522 L822.59 691.522 L823.149 691.522 L823.708 691.522 L824.267 691.522 L824.827 691.522 L825.386 691.522 L825.945 691.522 L826.504 691.522 L827.064 691.522 L827.623 691.522 L828.182 691.522 L828.741 691.522 L829.301 691.522 L829.86 691.522 L830.419 691.522 L830.978 691.522 L831.538 691.522 L832.097 691.522 L832.656 691.522 L833.215 691.522 L833.775 691.522 L834.334 691.522 L834.893 691.522 L835.452 691.522 L836.012 691.522 L836.571 691.522 L837.13 691.522 L837.689 691.522 L838.249 691.522 L838.808 691.522 L839.367 691.522 L839.926 691.522 L840.486 691.522 L841.045 691.522 L841.604 691.522 L842.163 691.522 L842.723 691.522 L843.282 691.522 L843.841 691.522 L844.4 691.522 L844.96 691.522 L845.519 691.522 L846.078 691.522 L846.637 691.522 L847.197 691.522 L847.756 691.522 L848.315 691.522 L848.874 691.522 L849.434 691.522 L849.993 691.522 L850.552 691.522 L851.111 691.522 L851.671 691.522 L852.23 691.522 L852.789 691.522 L853.348 691.522 L853.908 691.522 L854.467 691.522 L855.026 691.522 L855.585 691.522 L856.145 691.522 L856.704 691.522 L857.263 691.522 L857.822 691.522 L858.382 691.522 L858.941 691.522 L859.5 691.522 L860.059 691.522 L860.619 691.522 L861.178 691.522 L861.737 691.522 L862.296 691.522 L862.856 691.522 L863.415 691.522 L863.974 691.522 L864.533 691.522 L865.093 691.522 L865.652 691.522 L866.211 691.522 L866.77 691.522 L867.33 691.522 L867.889 691.522 L868.448 691.522 L869.007 691.522 L869.567 691.522 L870.126 691.522 L870.685 691.522 L871.244 691.522 L871.804 691.522 L872.363 691.522 L872.922 691.522 L873.481 691.522 L874.041 691.522 L874.6 691.522 L875.159 691.522 L875.718 691.522 L876.278 691.522 L876.837 691.522 L877.396 691.522 L877.955 691.522 L878.515 691.522 L879.074 691.522 L879.633 691.522 L880.192 691.522 L880.752 691.522 L881.311 691.522 L881.87 691.522 L882.429 691.522 L882.989 691.522 L883.548 691.522 L884.107 691.522 L884.666 691.522 L885.226 691.522 L885.785 691.522 L886.344 691.522 L886.903 691.522 L887.463 691.522 L888.022 691.522 L888.581 691.522 L889.14 691.522 L889.7 691.522 L890.259 691.522 L890.818 691.522 L891.377 691.522 L891.937 691.522 L892.496 691.522 L893.055 691.522 L893.614 691.522 L894.174 691.522 L894.733 691.522 L895.292 691.522 L895.851 691.522 L896.411 691.522 L896.97 691.522 L897.529 691.522 L898.088 691.522 L898.648 691.522 L899.207 691.522 L899.766 691.522 L900.325 691.522 L900.885 691.522 L901.444 691.522 L902.003 691.522 L902.562 691.522 L903.122 691.522 L903.681 691.522 L904.24 691.522 L904.799 691.522 L905.359 691.522 L905.918 691.522 L906.477 691.522 L907.036 691.522 L907.596 691.522 L908.155 691.522 L908.714 691.522 L909.273 691.522 L909.833 691.522 L910.392 691.522 L910.951 691.522 L911.51 691.522 L912.07 691.522 L912.629 691.522 L913.188 691.522 L913.747 691.522 L914.307 691.522 L914.866 691.522 L915.425 691.522 L915.984 691.522 L916.544 691.522 L917.103 691.522 L917.662 691.522 L918.221 691.522 L918.781 691.522 L919.34 691.522 L919.899 691.522 L920.458 691.522 L921.018 691.522 L921.577 691.522 L922.136 691.522 L922.695 691.522 L923.255 691.522 L923.814 691.522 L924.373 691.522 L924.932 691.522 L925.492 691.522 L926.051 691.522 L926.61 691.522 L927.169 691.522 L927.729 691.522 L928.288 691.522 L928.847 691.522 L929.406 691.522 L929.966 691.522 L930.525 691.522 L931.084 691.522 L931.644 691.522 L932.203 691.522 L932.762 691.522 L933.321 691.522 L933.881 691.522 L934.44 691.522 L934.999 691.522 L935.558 691.522 L936.118 691.522 L936.677 691.522 L937.236 691.522 L937.795 691.522 L938.355 691.522 L938.914 691.522 L939.473 691.522 L940.032 691.522 L940.592 691.522 L941.151 691.522 L941.71 691.522 L942.269 691.522 L942.829 691.522 L943.388 691.522 L943.947 691.522 L944.506 691.522 L945.066 691.522 L945.625 691.522 L946.184 691.522 L946.743 691.522 L947.303 691.522 L947.862 691.522 L948.421 691.522 L948.98 691.522 L949.54 691.522 L950.099 691.522 L950.658 691.522 L951.217 691.522 L951.777 691.522 L952.336 691.522 L952.895 691.522 L953.454 691.522 L954.014 691.522 L954.573 691.522 L955.132 691.522 L955.691 691.522 L956.251 691.522 L956.81 691.522 L957.369 691.522 L957.928 691.522 L958.488 691.522 L959.047 691.522 L959.606 691.522 L960.165 691.522 L960.725 691.522 L961.284 691.522 L961.843 691.522 L962.402 691.522 L962.962 691.522 L963.521 691.522 L964.08 691.522 L964.639 691.522 L965.199 691.522 L965.758 691.522 L966.317 691.522 L966.876 691.522 L967.436 691.522 L967.995 691.522 L968.554 691.522 L969.113 691.522 L969.673 691.522 L970.232 691.522 L970.791 691.522 L971.35 691.522 L971.91 691.522 L972.469 691.522 L973.028 691.522 L973.587 691.522 L974.147 691.522 L974.706 691.522 L975.265 691.522 L975.824 691.522 L976.384 691.522 L976.943 691.522 L977.502 691.522 L978.061 691.522 L978.621 691.522 L979.18 691.522 L979.739 691.522 L980.298 691.522 L980.858 691.522 L981.417 691.522 L981.976 691.522 L982.535 691.522 L983.095 691.522 L983.654 691.522 L984.213 691.522 L984.772 691.522 L985.332 691.522 L985.891 691.522 L986.45 691.522 L987.009 691.522 L987.569 691.522 L988.128 691.522 L988.687 691.522 L989.246 691.522 L989.806 691.522 L990.365 691.522 L990.924 691.522 L991.483 691.522 L992.043 691.522 L992.602 691.522 L993.161 691.522 L993.72 691.522 L994.28 691.522 L994.839 691.522 L995.398 691.522 L995.957 691.522 L996.517 691.522 L997.076 691.522 L997.635 691.522 L998.194 691.522 L998.754 691.522 L999.313 691.522 L999.872 691.522 L1000.43 691.522 L1000.99 691.522 L1001.55 691.522 L1002.11 691.522 L1002.67 691.522 L1003.23 691.522 L1003.79 691.522 L1004.35 691.522 L1004.91 691.522 L1005.46 691.522 L1006.02 691.522 L1006.58 691.522 L1007.14 691.522 L1007.7 691.522 L1008.26 691.522 L1008.82 691.522 L1009.38 691.522 L1009.94 691.522 L1010.5 691.522 L1011.06 691.522 L1011.62 691.522 L1012.18 691.522 L1012.73 691.522 L1013.29 691.522 L1013.85 691.522 L1014.41 691.522 L1014.97 691.522 L1015.53 691.522 L1016.09 691.522 L1016.65 691.522 L1017.21 691.522 L1017.77 691.522 L1018.33 691.522 L1018.89 691.522 L1019.45 691.522 L1020.01 691.522 L1020.56 691.522 L1021.12 691.522 L1021.68 691.522 L1022.24 691.522 L1022.8 691.522 L1023.36 691.522 L1023.92 691.522 L1024.48 691.522 L1025.04 691.522 L1025.6 691.522 L1026.16 691.522 L1026.72 691.522 L1027.28 691.522 L1027.83 691.522 L1028.39 691.522 L1028.95 691.522 L1029.51 691.522 L1030.07 691.522 L1030.63 691.522 L1031.19 691.522 L1031.75 691.522 L1032.31 691.522 L1032.87 691.522 L1033.43 691.522 L1033.99 691.522 L1034.55 691.522 L1035.1 691.522 L1035.66 691.522 L1036.22 691.522 L1036.78 691.522 L1037.34 691.522 L1037.9 691.522 L1038.46 691.522 L1039.02 691.522 L1039.58 691.522 L1040.14 691.522 L1040.7 691.522 L1041.26 691.522 L1041.82 691.522 L1042.38 691.522 L1042.93 691.522 L1043.49 691.522 L1044.05 691.522 L1044.61 691.522 L1045.17 691.522 L1045.73 691.522 L1046.29 691.522 L1046.85 691.522 L1047.41 691.522 L1047.97 691.522 L1048.53 691.522 L1049.09 691.522 L1049.65 691.522 L1050.2 691.522 L1050.76 691.522 L1051.32 691.522 L1051.88 691.522 L1052.44 691.522 L1053 691.522 L1053.56 691.522 L1054.12 691.522 L1054.68 691.522 L1055.24 691.522 L1055.8 691.522 L1056.36 691.522 L1056.92 691.522 L1057.48 691.522 L1058.03 691.522 L1058.59 691.522 L1059.15 691.522 L1059.71 691.522 L1060.27 691.522 L1060.83 691.522 L1061.39 691.522 L1061.95 691.522 L1062.51 691.522 L1063.07 691.522 L1063.63 691.522 L1064.19 691.522 L1064.75 691.522 L1065.3 691.522 L1065.86 691.522 L1066.42 691.522 L1066.98 691.522 L1067.54 691.522 L1068.1 691.522 L1068.66 691.522 L1069.22 691.522 L1069.78 691.522 L1070.34 691.522 L1070.9 691.522 L1071.46 691.522 L1072.02 691.522 L1072.57 691.522 L1073.13 691.522 L1073.69 691.522 L1074.25 691.522 L1074.81 691.522 L1075.37 691.522 L1075.93 691.522 L1076.49 691.522 L1077.05 691.522 L1077.61 691.522 L1078.17 691.522 L1078.73 691.522 L1079.29 691.522 L1079.85 691.522 L1080.4 691.522 L1080.96 691.522 L1081.52 691.522 L1082.08 691.522 L1082.64 691.522 L1083.2 691.522 L1083.76 691.522 L1084.32 691.522 L1084.88 691.522 L1085.44 691.522 L1086 691.522 L1086.56 691.522 L1087.12 691.522 L1087.67 691.522 L1088.23 691.522 L1088.79 691.522 L1089.35 691.522 L1089.91 691.522 L1090.47 691.522 L1091.03 691.522 L1091.59 691.522 L1092.15 691.522 L1092.71 691.522 L1093.27 691.522 L1093.83 691.522 L1094.39 691.522 L1094.94 691.522 L1095.5 691.522 L1096.06 691.522 L1096.62 691.522 L1097.18 691.522 L1097.74 691.522 L1098.3 691.522 L1098.86 691.522 L1099.42 691.522 L1099.98 691.522 L1100.54 691.522 L1101.1 691.522 L1101.66 691.522 L1102.22 691.522 L1102.77 691.522 L1103.33 691.522 L1103.89 691.522 L1104.45 691.522 L1105.01 691.522 L1105.57 691.522 L1106.13 691.522 L1106.69 691.522 L1107.25 691.522 L1107.81 691.522 L1108.37 691.522 L1108.93 691.522 L1109.49 691.522 L1110.04 691.522 L1110.6 691.522 L1111.16 691.522 L1111.72 691.522 L1112.28 691.522 L1112.84 691.522 L1113.4 691.522 L1113.96 691.522 L1114.52 691.522 L1115.08 691.522 L1115.64 691.522 L1116.2 691.522 L1116.76 691.522 L1117.31 691.522 L1117.87 691.522 L1118.43 691.522 L1118.99 691.522 L1119.55 691.522 L1120.11 691.522 L1120.67 691.522 L1121.23 691.522 L1121.79 691.522 L1122.35 691.522 L1122.91 691.522 L1123.47 691.522 L1124.03 691.522 L1124.59 691.522 L1125.14 691.522 L1125.7 691.522 L1126.26 691.522 L1126.82 691.522 L1127.38 691.522 L1127.94 691.522 L1128.5 691.522 L1129.06 691.522 L1129.62 691.522 L1130.18 691.522 L1130.74 691.522 L1131.3 691.522 L1131.86 691.522 L1132.41 691.522 L1132.97 691.522 L1133.53 691.522 L1134.09 691.522 L1134.65 691.522 L1135.21 691.522 L1135.77 691.522 L1136.33 691.522 L1136.89 691.522 L1137.45 691.522 L1138.01 691.522 L1138.57 691.522 L1139.13 691.522 L1139.68 691.522 L1140.24 691.522 L1140.8 691.522 L1141.36 691.522 L1141.92 691.522 L1142.48 691.522 L1143.04 691.522 L1143.6 691.522 L1144.16 691.522 L1144.72 691.522 L1145.28 691.522 L1145.84 691.522 L1146.4 691.522 L1146.96 691.522 L1147.51 691.522 L1148.07 691.522 L1148.63 691.522 L1149.19 691.522 L1149.75 691.522 L1150.31 691.522 L1150.87 691.522 L1151.43 691.522 L1151.99 691.522 L1152.55 691.522 L1153.11 691.522 L1153.67 691.522 L1154.23 691.522 L1154.78 691.522 L1155.34 691.522 L1155.9 691.522 L1156.46 691.522 L1157.02 691.522 L1157.58 691.522 L1158.14 691.522 L1158.7 691.522 L1159.26 691.522 L1159.82 691.522 L1160.38 691.522 L1160.94 691.522 L1161.5 691.522 L1162.05 691.522 L1162.61 691.522 L1163.17 691.522 L1163.73 691.522 L1164.29 691.522 L1164.85 691.522 L1165.41 691.522 L1165.97 691.522 L1166.53 691.522 L1167.09 691.522 L1167.65 691.522 L1168.21 691.522 L1168.77 691.522 L1169.33 691.522 L1169.88 691.522 L1170.44 691.522 L1171 691.522 L1171.56 691.522 L1172.12 691.522 L1172.68 691.522 L1173.24 691.522 L1173.8 691.522 L1174.36 691.522 L1174.92 691.522 L1175.48 691.522 L1176.04 691.522 L1176.6 691.522 L1177.15 691.522 L1177.71 691.522 L1178.27 691.522 L1178.83 691.522 L1179.39 691.522 L1179.95 691.522 L1180.51 691.522 L1181.07 691.522 L1181.63 691.522 L1182.19 691.522 L1182.75 691.522 L1183.31 691.522 L1183.87 691.522 L1184.43 691.522 L1184.98 691.522 L1185.54 691.522 L1186.1 691.522 L1186.66 691.522 L1187.22 691.522 L1187.78 691.522 L1188.34 691.522 L1188.9 691.522 L1189.46 691.522 L1190.02 691.522 L1190.58 691.522 L1191.14 691.522 L1191.7 691.522 L1192.25 691.522 L1192.81 691.522 L1193.37 691.522 L1193.93 691.522 L1194.49 691.522 L1195.05 691.522 L1195.61 691.522 L1196.17 691.522 L1196.73 691.522 L1197.29 691.522 L1197.85 691.522 L1198.41 691.522 L1198.97 691.522 L1199.52 691.522 L1200.08 691.522 L1200.64 691.522 L1201.2 691.522 L1201.76 691.522 L1202.32 691.522 L1202.88 691.522 L1203.44 691.522 L1204 691.522 L1204.56 691.522 L1205.12 691.522 L1205.68 691.522 L1206.24 691.522 L1206.8 691.522 L1207.35 691.522 L1207.91 691.522 L1208.47 691.522 L1209.03 691.522 L1209.59 691.522 L1210.15 691.522 L1210.71 691.522 L1211.27 691.522 L1211.83 691.522 L1212.39 691.522 L1212.95 691.522 L1213.51 691.522 L1214.07 691.522 L1214.62 691.522 L1215.18 691.522 L1215.74 691.522 L1216.3 691.522 L1216.86 691.522 L1217.42 691.522 L1217.98 691.522 L1218.54 691.522 L1219.1 691.522 L1219.66 691.522 L1220.22 691.522 L1220.78 691.522 L1221.34 691.522 L1221.89 691.522 L1222.45 691.522 L1223.01 691.522 L1223.57 691.522 L1224.13 691.522 L1224.69 691.522 L1225.25 691.522 L1225.81 691.522 L1226.37 691.522 L1226.93 691.522 L1227.49 691.522 L1228.05 691.522 L1228.61 691.522 L1229.17 691.522 L1229.72 691.522 L1230.28 691.522 L1230.84 691.522 L1231.4 691.522 L1231.96 691.522 L1232.52 691.522 L1233.08 691.522 L1233.64 691.522 L1234.2 691.522 L1234.76 691.522 L1235.32 691.522 L1235.88 691.522 L1236.44 691.522 L1236.99 691.522 L1237.55 691.522 L1238.11 691.522 L1238.67 691.522 L1239.23 691.522 L1239.79 691.522 L1240.35 691.522 L1240.91 691.522 L1241.47 691.522 L1242.03 691.522 L1242.59 691.522 L1243.15 691.522 L1243.71 691.522 L1244.26 691.522 L1244.82 691.522 L1245.38 691.522 L1245.94 691.522 L1246.5 691.522 L1247.06 691.522 L1247.62 691.522 L1248.18 691.522 L1248.74 691.522 L1249.3 691.522 L1249.86 691.522 L1250.42 691.522 L1250.98 691.522 L1251.54 691.522 L1252.09 691.522 L1252.65 691.522 L1253.21 691.522 L1253.77 691.522 L1254.33 691.522 L1254.89 691.522 L1255.45 691.522 L1256.01 691.522 L1256.57 691.522 L1257.13 691.522 L1257.69 691.522 L1258.25 691.522 L1258.81 691.522 L1259.36 691.522 L1259.92 691.522 L1260.48 691.522 L1261.04 691.522 L1261.6 691.522 L1262.16 691.522 L1262.72 691.522 L1263.28 691.522 L1263.84 691.522 L1264.4 691.522 L1264.96 691.522 L1265.52 691.522 L1266.08 691.522 L1266.63 691.522 L1267.19 691.522 L1267.75 691.522 L1268.31 691.522 L1268.87 691.522 L1269.43 691.522 L1269.99 691.522 L1270.55 691.522 L1271.11 691.522 L1271.67 691.522 L1272.23 691.522 L1272.79 691.522 L1273.35 691.522 L1273.91 691.522 L1274.46 691.522 L1275.02 691.522 L1275.58 691.522 L1276.14 691.522 L1276.7 691.522 L1277.26 691.522 L1277.82 691.522 L1278.38 691.522 L1278.94 691.522 L1279.5 691.522 L1280.06 691.522 L1280.62 691.522 L1281.18 691.522 L1281.73 691.522 L1282.29 691.522 L1282.85 691.522 L1283.41 691.522 L1283.97 691.522 L1284.53 691.522 L1285.09 691.522 L1285.65 691.522 L1286.21 691.522 L1286.77 691.522 L1287.33 691.522 L1287.89 691.522 L1288.45 691.522 L1289 691.522 L1289.56 691.522 L1290.12 691.522 L1290.68 691.522 L1291.24 691.522 L1291.8 691.522 L1292.36 691.522 L1292.92 691.522 L1293.48 691.522 L1294.04 691.522 L1294.6 691.522 L1295.16 691.522 L1295.72 691.522 L1296.28 691.522 L1296.83 691.522 L1297.39 691.522 L1297.95 691.522 L1298.51 691.522 L1299.07 691.522 L1299.63 691.522 L1300.19 691.522 L1300.75 691.522 L1301.31 691.522 L1301.87 691.522 L1302.43 691.522 L1302.99 691.522 L1303.55 691.522 L1304.1 691.522 L1304.66 691.522 L1305.22 691.522 L1305.78 691.522 L1306.34 691.522 L1306.9 691.522 L1307.46 691.522 L1308.02 691.522 L1308.58 691.522 L1309.14 691.522 L1309.7 691.522 L1310.26 691.522 L1310.82 691.522 L1311.38 691.522 L1311.93 691.522 L1312.49 691.522 L1313.05 691.522 L1313.61 691.522 L1314.17 691.522 L1314.73 691.522 L1315.29 691.522 L1315.85 691.522 L1316.41 691.522 L1316.97 691.522 L1317.53 691.522 L1318.09 691.522 L1318.65 691.522 L1319.2 691.522 L1319.76 691.522 L1320.32 691.522 L1320.88 691.522 L1321.44 691.522 L1322 691.522 L1322.56 691.522 L1323.12 691.522 L1323.68 691.522 L1324.24 691.522 L1324.8 691.522 L1325.36 691.522 L1325.92 691.522 L1326.47 691.522 L1327.03 691.522 L1327.59 691.522 L1328.15 691.522 L1328.71 691.522 L1329.27 691.522 L1329.83 691.522 L1330.39 691.522 L1330.95 691.522 L1331.51 691.522 L1332.07 691.522 L1332.63 691.522 L1333.19 691.522 L1333.75 691.522 L1334.3 691.522 L1334.86 691.522 L1335.42 691.522 L1335.98 691.522 L1336.54 691.522 L1337.1 691.522 L1337.66 691.522 L1338.22 691.522 L1338.78 691.522 L1339.34 691.522 L1339.9 691.522 L1340.46 691.522 L1341.02 691.522 L1341.57 691.522 L1342.13 691.522 L1342.69 691.522 L1343.25 691.522 L1343.81 691.522 L1344.37 691.522 L1344.93 691.522 L1345.49 691.522 L1346.05 691.522 L1346.61 691.522 L1347.17 691.522 L1347.73 691.522 L1348.29 691.522 L1348.84 691.522 L1349.4 691.522 L1349.96 691.522 L1350.52 691.522 L1351.08 691.522 L1351.64 691.522 L1352.2 691.522 L1352.76 691.522 L1353.32 691.522 L1353.88 691.522 L1354.44 691.522 L1355 691.522 L1355.56 691.522 L1356.12 691.522 L1356.67 691.522 L1357.23 691.522 L1357.79 691.522 L1358.35 691.522 L1358.91 691.522 L1359.47 691.522 L1360.03 691.522 L1360.59 691.522 L1361.15 691.522 L1361.71 691.522 L1362.27 691.522 L1362.83 691.522 L1363.39 691.522 L1363.94 691.522 L1364.5 691.522 L1365.06 691.522 L1365.62 691.522 L1366.18 691.522 L1366.74 691.522 L1367.3 691.522 L1367.86 691.522 L1368.42 691.522 L1368.98 691.522 L1369.54 691.522 L1370.1 691.522 L1370.66 691.522 L1371.21 691.522 L1371.77 691.522 L1372.33 691.522 L1372.89 691.522 L1373.45 691.522 L1374.01 691.522 L1374.57 691.522 L1375.13 691.522 L1375.69 691.522 L1376.25 691.522 L1376.81 691.522 L1377.37 691.522 L1377.93 691.522 L1378.49 691.522 L1379.04 691.522 L1379.6 691.522 L1380.16 691.522 L1380.72 691.522 L1381.28 691.522 L1381.84 691.522 L1382.4 691.522 L1382.96 691.522 L1383.52 691.522 L1384.08 691.522 L1384.64 691.522 L1385.2 691.522 L1385.76 691.522 L1386.31 691.522 L1386.87 691.522 L1387.43 691.522 L1387.99 691.522 L1388.55 691.522 L1389.11 691.522 L1389.67 691.522 L1390.23 691.522 L1390.79 691.522 L1391.35 691.522 L1391.91 691.522 L1392.47 691.522 L1393.03 691.522 L1393.58 691.522 L1394.14 691.522 L1394.7 691.522 L1395.26 691.522 L1395.82 691.522 L1396.38 691.522 L1396.94 691.522 L1397.5 691.522 L1398.06 691.522 L1398.62 691.522 L1399.18 691.522 L1399.74 691.522 L1400.3 691.522 L1400.86 691.522 L1401.41 691.522 L1401.97 691.522 L1402.53 691.522 L1403.09 691.522 L1403.65 691.522 L1404.21 691.522 L1404.77 691.522 L1405.33 691.522 L1405.89 691.522 L1406.45 691.522 L1407.01 691.522 L1407.57 691.522 L1408.13 691.522 L1408.68 691.522 L1409.24 691.522 L1409.8 691.522 L1410.36 691.522 L1410.92 691.522 L1411.48 691.522 L1412.04 691.522 L1412.6 691.522 L1413.16 691.522 L1413.72 691.522 L1414.28 691.522 L1414.84 691.522 L1415.4 691.522 L1415.95 691.522 L1416.51 691.522 L1417.07 691.522 L1417.63 691.522 L1418.19 691.522 L1418.75 691.522 L1419.31 691.522 L1419.87 691.522 L1420.43 691.522 L1420.99 691.522 L1421.55 691.522 L1422.11 691.522 L1422.67 691.522 L1423.23 691.522 L1423.78 691.522 L1424.34 691.522 L1424.9 691.522 L1425.46 691.522 L1426.02 691.522 L1426.58 691.522 L1427.14 691.522 L1427.7 691.522 L1428.26 691.522 L1428.82 691.522 L1429.38 691.522 L1429.94 691.522 L1430.5 691.522 L1431.05 691.522 L1431.61 691.522 L1432.17 691.522 L1432.73 691.522 L1433.29 691.522 L1433.85 691.522 L1434.41 691.522 L1434.97 691.522 L1435.53 691.522 L1436.09 691.522 L1436.65 691.522 L1437.21 691.522 L1437.77 691.522 L1438.33 691.522 L1438.88 691.522 L1439.44 691.522 L1440 691.522 L1440.56 691.522 L1441.12 691.522 L1441.68 691.522 L1442.24 691.522 L1442.8 691.522 L1443.36 691.522 L1443.92 691.522 L1444.48 691.522 L1445.04 691.522 L1445.6 691.522 L1446.15 691.522 L1446.71 691.522 L1447.27 691.522 L1447.83 691.522 L1448.39 691.522 L1448.95 691.522 L1449.51 691.522 L1450.07 691.522 L1450.63 691.522 L1451.19 691.522 L1451.75 691.522 L1452.31 691.522 L1452.87 691.522 L1453.42 691.522 L1453.98 691.522 L1454.54 691.522 L1455.1 691.522 L1455.66 691.522 L1456.22 691.522 L1456.78 691.522 L1457.34 691.522 L1457.9 691.522 L1458.46 691.522 L1459.02 691.522 L1459.58 691.522 L1460.14 691.522 L1460.7 691.522 L1461.25 691.522 L1461.81 691.522 L1462.37 691.522 L1462.93 691.522 L1463.49 691.522 L1464.05 691.522 L1464.61 691.522 L1465.17 691.522 L1465.73 691.522 L1466.29 691.522 L1466.85 691.522 L1467.41 691.522 L1467.97 691.522 L1468.52 691.522 L1469.08 691.522 L1469.64 691.522 L1470.2 691.522 L1470.76 691.522 L1471.32 691.522 L1471.88 691.522 L1472.44 691.522 L1473 691.522 L1473.56 691.522 L1474.12 691.522 L1474.68 691.522 L1475.24 691.522 L1475.79 691.522 L1476.35 691.522 L1476.91 691.522 L1477.47 691.522 L1478.03 691.522 L1478.59 691.522 L1479.15 691.522 L1479.71 691.522 L1480.27 691.522 L1480.83 691.522 L1481.39 691.522 L1481.95 691.522 L1482.51 691.522 L1483.07 691.522 L1483.62 691.522 L1484.18 691.522 L1484.74 691.522 L1485.3 691.522 L1485.86 691.522 L1486.42 691.522 L1486.98 691.522 L1487.54 691.522 L1488.1 691.522 L1488.66 691.522 L1489.22 691.522 L1489.78 691.522 L1490.34 691.522 L1490.89 691.522 L1491.45 691.522 L1492.01 691.522 L1492.57 691.522 L1493.13 691.522 L1493.69 691.522 L1494.25 691.522 L1494.81 691.522 L1495.37 691.522 L1495.93 691.522 L1496.49 691.522 L1497.05 691.522 L1497.61 691.522 L1498.16 691.522 L1498.72 691.522 L1499.28 691.522 L1499.84 691.522 L1500.4 691.522 L1500.96 691.522 L1501.52 691.522 L1502.08 691.522 L1502.64 691.522 L1503.2 691.522 L1503.76 691.522 L1504.32 691.522 L1504.88 691.522 L1505.44 691.522 L1505.99 691.522 L1506.55 691.522 L1507.11 691.522 L1507.67 691.522 L1508.23 691.522 L1508.79 691.522 L1509.35 691.522 L1509.91 691.522 L1510.47 691.522 L1511.03 691.522 L1511.59 691.522 L1512.15 691.522 L1512.71 691.522 L1513.26 691.522 L1513.82 691.522 L1514.38 691.522 L1514.94 691.522 L1515.5 691.522 L1516.06 691.522 L1516.62 691.522 L1517.18 691.522 L1517.74 691.522 L1518.3 691.522 L1518.86 691.522 L1519.42 691.522 L1519.98 691.522 L1520.53 691.522 L1521.09 691.522 L1521.65 691.522 L1522.21 691.522 L1522.77 691.522 L1523.33 691.522 L1523.89 691.522 L1524.45 691.522 L1525.01 691.522 L1525.57 691.522 L1526.13 691.522 L1526.69 691.522 L1527.25 691.522 L1527.81 691.522 L1528.36 691.522 L1528.92 691.522 L1529.48 691.522 L1530.04 691.522 L1530.6 691.522 L1531.16 691.522 L1531.72 691.522 L1532.28 691.522 L1532.84 691.522 L1533.4 691.522 L1533.96 691.522 L1534.52 691.522 L1535.08 691.522 L1535.63 691.522 L1536.19 691.522 L1536.75 691.522 L1537.31 691.522 L1537.87 691.522 L1538.43 691.522 L1538.99 691.522 L1539.55 691.522 L1540.11 691.522 L1540.67 691.522 L1541.23 691.522 L1541.79 691.522 L1542.35 691.522 L1542.9 691.522 L1543.46 691.522 L1544.02 691.522 L1544.58 691.522 L1545.14 691.522 L1545.7 691.522 L1546.26 691.522 L1546.82 691.522 L1547.38 691.522 L1547.94 691.522 L1548.5 691.522 L1549.06 691.522 L1549.62 691.522 L1550.18 691.522 L1550.73 691.522 L1551.29 691.522 L1551.85 691.522 L1552.41 691.522 L1552.97 691.522 L1553.53 691.522 L1554.09 691.522 L1554.65 691.522 L1555.21 691.522 L1555.77 691.522 L1556.33 691.522 L1556.89 691.522 L1557.45 691.522 L1558 691.522 L1558.56 691.522 L1559.12 691.522 L1559.68 691.522 L1560.24 691.522 L1560.8 691.522 L1561.36 691.522 L1561.92 691.522 L1562.48 691.522 L1563.04 691.522 L1563.6 691.522 L1564.16 691.522 L1564.72 691.522 L1565.28 691.522 L1565.83 691.522 L1566.39 691.522 L1566.95 691.522 L1567.51 691.522 L1568.07 691.522 L1568.63 691.522 L1569.19 691.522 L1569.75 691.522 L1570.31 691.522 L1570.87 691.522 L1571.43 691.522 L1571.99 691.522 L1572.55 691.522 L1573.1 691.522 L1573.66 691.522 L1574.22 691.522 L1574.78 691.522 L1575.34 691.522 L1575.9 691.522 L1576.46 691.522 L1577.02 691.522 L1577.58 691.522 L1578.14 691.522 L1578.7 691.522 L1579.26 691.522 L1579.82 691.522 L1580.37 691.522 L1580.93 691.522 L1581.49 691.522 L1582.05 691.522 L1582.61 691.522 L1583.17 691.522 L1583.73 691.522 L1584.29 691.522 L1584.85 691.522 L1585.41 691.522 L1585.97 691.522 L1586.53 691.522 L1587.09 691.522 L1587.65 691.522 L1588.2 691.522 L1588.76 691.522 L1589.32 691.522 L1589.88 691.522 L1590.44 691.522 L1591 691.522 L1591.56 691.522 L1592.12 691.522 L1592.68 691.522 L1593.24 691.522 L1593.8 691.522 L1594.36 691.522 L1594.92 691.522 L1595.47 691.522 L1596.03 691.522 L1596.59 691.522 L1597.15 691.522 L1597.71 691.522 L1598.27 691.522 L1598.83 691.522 L1599.39 691.522 L1599.95 691.522 L1600.51 691.522 L1601.07 691.522 L1601.63 691.522 L1602.19 691.522 L1602.74 691.522 L1603.3 691.522 L1603.86 691.522 L1604.42 691.522 L1604.98 691.522 L1605.54 691.522 L1606.1 691.522 L1606.66 691.522 L1607.22 691.522 L1607.78 691.522 L1608.34 691.522 L1608.9 691.522 L1609.46 691.522 L1610.02 691.522 L1610.57 691.522 L1611.13 691.522 L1611.69 691.522 L1612.25 691.522 L1612.81 691.522 L1613.37 691.522 L1613.93 691.522 L1614.49 691.522 L1615.05 691.522 L1615.61 691.522 L1616.17 691.522 L1616.73 691.522 L1617.29 691.522 L1617.84 691.522 L1618.4 691.522 L1618.96 691.522 L1619.52 691.522 L1620.08 691.522 L1620.64 691.522 L1621.2 691.522 L1621.76 691.522 L1622.32 691.522 L1622.88 691.522 L1623.44 691.522 L1624 691.522 L1624.56 691.522 L1625.11 691.522 L1625.67 691.522 L1626.23 691.522 L1626.79 691.522 L1627.35 691.522 L1627.91 691.522 L1628.47 691.522 L1629.03 691.522 L1629.59 691.522 L1630.15 691.522 L1630.71 691.522 L1631.27 691.522 L1631.83 691.522 L1632.39 691.522 L1632.94 691.522 L1633.5 691.522 L1634.06 691.522 L1634.62 691.522 L1635.18 691.522 L1635.74 691.522 L1636.3 691.522 L1636.86 691.522 L1637.42 691.522 L1637.98 691.522 L1638.54 691.522 L1639.1 691.522 L1639.66 691.522 L1640.21 691.522 L1640.77 691.522 L1641.33 691.522 L1641.89 691.522 L1642.45 691.522 L1643.01 691.522 L1643.57 691.522 L1644.13 691.522 L1644.69 691.522 L1645.25 691.522 L1645.81 691.522 L1646.37 691.522 L1646.93 691.522 L1647.48 691.522 L1648.04 691.522 L1648.6 691.522 L1649.16 691.522 L1649.72 691.522 L1650.28 691.522 L1650.84 691.522 L1651.4 691.522 L1651.96 691.522 L1652.52 691.522 L1653.08 691.522 L1653.64 691.522 L1654.2 691.522 L1654.76 691.522 L1655.31 691.522 L1655.87 691.522 L1656.43 691.522 L1656.99 691.522 L1657.55 691.522 L1658.11 691.522 L1658.67 691.522 L1659.23 691.522 L1659.79 691.522 L1660.35 691.522 L1660.91 691.522 L1661.47 691.522 L1662.03 691.522 L1662.58 691.522 L1663.14 691.522 L1663.7 691.522 L1664.26 691.522 L1664.82 691.522 L1665.38 691.522 L1665.94 691.522 L1666.5 691.522 L1667.06 691.522 L1667.62 691.522 L1668.18 691.522 L1668.74 691.522 L1669.3 691.522 L1669.85 691.522 L1670.41 691.522 L1670.97 691.522 L1671.53 691.522 L1672.09 691.522 L1672.65 691.522 L1673.21 691.522 L1673.77 691.522 L1674.33 691.522 L1674.89 691.522 L1675.45 691.522 L1676.01 691.522 L1676.57 691.522 L1677.13 691.522 L1677.68 691.522 L1678.24 691.522 L1678.8 691.522 L1679.36 691.522 L1679.92 691.522 L1680.48 691.522 L1681.04 691.522 L1681.6 691.522 L1682.16 691.522 L1682.72 691.522 L1683.28 691.522 L1683.84 691.522 L1684.4 691.522 L1684.95 691.522 L1685.51 691.522 L1686.07 691.522 L1686.63 691.522 L1687.19 691.522 L1687.75 691.522 L1688.31 691.522 L1688.87 691.522 L1689.43 691.522 L1689.99 691.522 L1690.55 691.522 L1691.11 691.522 L1691.67 691.522 L1692.23 691.522 L1692.78 691.522 L1693.34 691.522 L1693.9 691.522 L1694.46 691.522 L1695.02 691.522 L1695.58 691.522 L1696.14 691.522 L1696.7 691.522 L1697.26 691.522 L1697.82 691.522 L1698.38 691.522 L1698.94 691.522 L1699.5 691.522 L1700.05 691.522 L1700.61 691.522 L1701.17 691.522 L1701.73 691.522 L1702.29 691.522 L1702.85 691.522 L1703.41 691.522 L1703.97 691.522 L1704.53 691.522 L1705.09 691.522 L1705.65 691.522 L1706.21 691.522 L1706.77 691.522 L1707.32 691.522 L1707.88 691.522 L1708.44 691.522 L1709 691.522 L1709.56 691.522 L1710.12 691.522 L1710.68 691.522 L1711.24 691.522 L1711.8 691.522 L1712.36 691.522 L1712.92 691.522 L1713.48 691.522 L1714.04 691.522 L1714.6 691.522 L1715.15 691.522 L1715.71 691.522 L1716.27 691.522 L1716.83 691.522 L1717.39 691.522 L1717.95 691.522 L1718.51 691.522 L1719.07 691.522 L1719.63 691.522 L1720.19 691.522 L1720.75 691.522 L1721.31 691.522 L1721.87 691.522 L1722.42 691.522 L1722.98 691.522 L1723.54 691.522 L1724.1 691.522 L1724.66 691.522 L1725.22 691.522 L1725.78 691.522 L1726.34 691.522 L1726.9 691.522 L1727.46 691.522 L1728.02 691.522 L1728.58 691.522 L1729.14 691.522 L1729.69 691.522 L1730.25 691.522 L1730.81 691.522 L1731.37 691.522 L1731.93 691.522 L1732.49 691.522 L1733.05 691.522 L1733.61 691.522 L1734.17 691.522 L1734.73 691.522 L1735.29 691.522 L1735.85 691.522 L1736.41 691.522 L1736.97 691.522 L1737.52 691.522 L1738.08 691.522 L1738.64 691.522 L1739.2 691.522 L1739.76 691.522 L1740.32 691.522 L1740.88 691.522 L1741.44 691.522 L1742 691.522 L1742.56 691.522 L1743.12 691.522 L1743.68 691.522 L1744.24 691.522 L1744.79 691.522 L1745.35 691.522 L1745.91 691.522 L1746.47 691.522 L1747.03 691.522 L1747.59 691.522 L1748.15 691.522 L1748.71 691.522 L1749.27 691.522 L1749.83 691.522 L1750.39 691.522 L1750.95 691.522 L1751.51 691.522 L1752.06 691.522 L1752.62 691.522 L1753.18 691.522 L1753.74 691.522 L1754.3 691.522 L1754.86 691.522 L1755.42 691.522 L1755.98 691.522 L1756.54 691.522 L1757.1 691.522 L1757.66 691.522 L1758.22 691.522 L1758.78 691.522 L1759.34 691.522 L1759.89 691.522 L1760.45 691.522 L1761.01 691.522 L1761.57 691.522 L1762.13 691.522 L1762.69 691.522 L1763.25 691.522 L1763.81 691.522 L1764.37 691.522 L1764.93 691.522 L1765.49 691.522 L1766.05 691.522 L1766.61 691.522 L1767.16 691.522 L1767.72 691.522 L1768.28 691.522 L1768.84 691.522 L1769.4 691.522 L1769.96 691.522 L1770.52 691.522 L1771.08 691.522 L1771.64 691.522 L1772.2 691.522 L1772.76 691.522 L1773.32 691.522 L1773.88 691.522 L1774.43 691.522 L1774.99 691.522 L1775.55 691.522 L1776.11 691.522 L1776.67 691.522 L1777.23 691.522 L1777.79 691.522 L1778.35 691.522 L1778.91 691.522 L1779.47 691.522 L1780.03 691.522 L1780.59 691.522 L1781.15 691.522 L1781.71 691.522 L1782.26 691.522 L1782.82 691.522 L1783.38 691.522 L1783.94 691.522 L1784.5 691.522 L1785.06 691.522 L1785.62 691.522 L1786.18 691.522 L1786.74 691.522 L1787.3 691.522 L1787.86 691.522 L1788.42 691.522 L1788.98 691.522 L1789.53 691.522 L1790.09 691.522 L1790.65 691.522 L1791.21 691.522 L1791.77 691.522 L1792.33 691.522 L1792.89 691.522 L1793.45 691.522 L1794.01 691.522 L1794.57 691.522 L1795.13 691.522 L1795.69 691.522 L1796.25 691.522 L1796.8 691.522 L1797.36 691.522 L1797.92 691.522 L1798.48 691.522 L1799.04 691.522 L1799.6 691.522 L1800.16 691.522 L1800.72 691.522 L1801.28 691.522 L1801.84 691.522 L1802.4 691.522 L1802.96 691.522 L1803.52 691.522 L1804.08 691.522 L1804.63 691.522 L1805.19 691.522 L1805.75 691.522 L1806.31 691.522 L1806.87 691.522 L1807.43 691.522 L1807.99 691.522 L1808.55 691.522 L1809.11 691.522 L1809.67 691.522 L1810.23 691.522 L1810.79 691.522 L1811.35 691.522 L1811.9 691.522 L1812.46 691.522 L1813.02 691.522 L1813.58 691.522 L1814.14 691.522 L1814.7 691.522 L1815.26 691.522 L1815.82 691.522 L1816.38 691.522 L1816.94 691.522 L1817.5 691.522 L1818.06 691.522 L1818.62 691.522 L1819.18 691.522 L1819.73 691.522 L1820.29 691.522 L1820.85 691.522 L1821.41 691.522 L1821.97 691.522 L1822.53 691.522 L1823.09 691.522 L1823.65 691.522 L1824.21 691.522 L1824.77 691.522 L1825.33 691.522 L1825.89 691.522 L1826.45 691.522 L1827 691.522 L1827.56 691.522 L1828.12 691.522 L1828.68 691.522 L1829.24 691.522 L1829.8 691.522 L1830.36 691.522 L1830.92 691.522 L1831.48 691.522 L1832.04 691.522 L1832.6 691.522 L1833.16 691.522 L1833.72 691.522 L1834.27 691.522 L1834.83 691.522 L1835.39 691.522 L1835.95 691.522 L1836.51 691.522 L1837.07 691.522 L1837.63 691.522 L1838.19 691.522 L1838.19 680.586 L1837.63 680.586 L1837.07 680.586 L1836.51 680.586 L1835.95 680.586 L1835.39 680.586 L1834.83 680.586 L1834.27 680.586 L1833.72 680.586 L1833.16 680.586 L1832.6 680.586 L1832.04 680.586 L1831.48 680.586 L1830.92 680.586 L1830.36 680.586 L1829.8 680.586 L1829.24 680.586 L1828.68 680.586 L1828.12 680.586 L1827.56 680.586 L1827 680.586 L1826.45 680.586 L1825.89 680.586 L1825.33 680.586 L1824.77 680.586 L1824.21 680.586 L1823.65 680.586 L1823.09 680.586 L1822.53 680.586 L1821.97 680.586 L1821.41 680.586 L1820.85 680.586 L1820.29 680.586 L1819.73 680.586 L1819.18 680.586 L1818.62 680.586 L1818.06 680.586 L1817.5 680.586 L1816.94 680.586 L1816.38 680.586 L1815.82 680.586 L1815.26 680.586 L1814.7 680.586 L1814.14 680.586 L1813.58 680.586 L1813.02 680.586 L1812.46 680.586 L1811.9 680.586 L1811.35 680.586 L1810.79 680.586 L1810.23 680.586 L1809.67 680.586 L1809.11 680.586 L1808.55 680.586 L1807.99 680.586 L1807.43 680.586 L1806.87 680.586 L1806.31 680.586 L1805.75 680.586 L1805.19 680.586 L1804.63 680.586 L1804.08 680.586 L1803.52 680.586 L1802.96 680.586 L1802.4 680.586 L1801.84 680.586 L1801.28 680.586 L1800.72 680.586 L1800.16 680.586 L1799.6 680.586 L1799.04 680.586 L1798.48 680.586 L1797.92 680.586 L1797.36 680.586 L1796.8 680.586 L1796.25 680.586 L1795.69 680.586 L1795.13 680.586 L1794.57 680.586 L1794.01 680.586 L1793.45 680.586 L1792.89 680.586 L1792.33 680.586 L1791.77 680.586 L1791.21 680.586 L1790.65 680.586 L1790.09 680.586 L1789.53 680.586 L1788.98 680.586 L1788.42 680.586 L1787.86 680.586 L1787.3 680.586 L1786.74 680.586 L1786.18 680.586 L1785.62 680.586 L1785.06 680.586 L1784.5 680.586 L1783.94 680.586 L1783.38 680.586 L1782.82 680.586 L1782.26 680.586 L1781.71 680.586 L1781.15 680.586 L1780.59 680.586 L1780.03 680.586 L1779.47 680.586 L1778.91 680.586 L1778.35 680.586 L1777.79 680.586 L1777.23 680.586 L1776.67 680.586 L1776.11 680.586 L1775.55 680.586 L1774.99 680.586 L1774.43 680.586 L1773.88 680.586 L1773.32 680.586 L1772.76 680.586 L1772.2 680.586 L1771.64 680.586 L1771.08 680.586 L1770.52 680.586 L1769.96 680.586 L1769.4 680.586 L1768.84 680.586 L1768.28 680.586 L1767.72 680.586 L1767.16 680.586 L1766.61 680.586 L1766.05 680.586 L1765.49 680.586 L1764.93 680.586 L1764.37 680.586 L1763.81 680.586 L1763.25 680.586 L1762.69 680.586 L1762.13 680.586 L1761.57 680.586 L1761.01 680.586 L1760.45 680.586 L1759.89 680.586 L1759.34 680.586 L1758.78 680.586 L1758.22 680.586 L1757.66 680.586 L1757.1 680.586 L1756.54 680.586 L1755.98 680.586 L1755.42 680.586 L1754.86 680.586 L1754.3 680.586 L1753.74 680.586 L1753.18 680.586 L1752.62 680.586 L1752.06 680.586 L1751.51 680.586 L1750.95 680.586 L1750.39 680.586 L1749.83 680.586 L1749.27 680.586 L1748.71 680.586 L1748.15 680.586 L1747.59 680.586 L1747.03 680.586 L1746.47 680.586 L1745.91 680.586 L1745.35 680.586 L1744.79 680.586 L1744.24 680.586 L1743.68 680.586 L1743.12 680.586 L1742.56 680.586 L1742 680.586 L1741.44 680.586 L1740.88 680.586 L1740.32 680.586 L1739.76 680.586 L1739.2 680.586 L1738.64 680.586 L1738.08 680.586 L1737.52 680.586 L1736.97 680.586 L1736.41 680.586 L1735.85 680.586 L1735.29 680.586 L1734.73 680.586 L1734.17 680.586 L1733.61 680.586 L1733.05 680.586 L1732.49 680.586 L1731.93 680.586 L1731.37 680.586 L1730.81 680.586 L1730.25 680.586 L1729.69 680.586 L1729.14 680.586 L1728.58 680.586 L1728.02 680.586 L1727.46 680.586 L1726.9 680.586 L1726.34 680.586 L1725.78 680.586 L1725.22 680.586 L1724.66 680.586 L1724.1 680.586 L1723.54 680.586 L1722.98 680.586 L1722.42 680.586 L1721.87 680.586 L1721.31 680.586 L1720.75 680.586 L1720.19 680.586 L1719.63 680.586 L1719.07 680.586 L1718.51 680.586 L1717.95 680.586 L1717.39 680.586 L1716.83 680.586 L1716.27 680.586 L1715.71 680.586 L1715.15 680.586 L1714.6 680.586 L1714.04 680.586 L1713.48 680.586 L1712.92 680.586 L1712.36 680.586 L1711.8 680.586 L1711.24 680.586 L1710.68 680.586 L1710.12 680.586 L1709.56 680.586 L1709 680.586 L1708.44 680.586 L1707.88 680.586 L1707.32 680.586 L1706.77 680.586 L1706.21 680.586 L1705.65 680.586 L1705.09 680.586 L1704.53 680.586 L1703.97 680.586 L1703.41 680.586 L1702.85 680.586 L1702.29 680.586 L1701.73 680.586 L1701.17 680.586 L1700.61 680.586 L1700.05 680.586 L1699.5 680.586 L1698.94 680.586 L1698.38 680.586 L1697.82 680.586 L1697.26 680.586 L1696.7 680.586 L1696.14 680.586 L1695.58 680.586 L1695.02 680.586 L1694.46 680.586 L1693.9 680.586 L1693.34 680.586 L1692.78 680.586 L1692.23 680.586 L1691.67 680.586 L1691.11 680.586 L1690.55 680.586 L1689.99 680.586 L1689.43 680.586 L1688.87 680.586 L1688.31 680.586 L1687.75 680.586 L1687.19 680.586 L1686.63 680.586 L1686.07 680.586 L1685.51 680.586 L1684.95 680.586 L1684.4 680.586 L1683.84 680.586 L1683.28 680.586 L1682.72 680.586 L1682.16 680.586 L1681.6 680.586 L1681.04 680.586 L1680.48 680.586 L1679.92 680.586 L1679.36 680.586 L1678.8 680.586 L1678.24 680.586 L1677.68 680.586 L1677.13 680.586 L1676.57 680.586 L1676.01 680.586 L1675.45 680.586 L1674.89 680.586 L1674.33 680.586 L1673.77 680.586 L1673.21 680.586 L1672.65 680.586 L1672.09 680.586 L1671.53 680.586 L1670.97 680.586 L1670.41 680.586 L1669.85 680.586 L1669.3 680.586 L1668.74 680.586 L1668.18 680.586 L1667.62 680.586 L1667.06 680.586 L1666.5 680.586 L1665.94 680.586 L1665.38 680.586 L1664.82 680.586 L1664.26 680.586 L1663.7 680.586 L1663.14 680.586 L1662.58 680.586 L1662.03 680.586 L1661.47 680.586 L1660.91 680.586 L1660.35 680.586 L1659.79 680.586 L1659.23 680.586 L1658.67 680.586 L1658.11 680.586 L1657.55 680.586 L1656.99 680.586 L1656.43 680.586 L1655.87 680.586 L1655.31 680.586 L1654.76 680.586 L1654.2 680.586 L1653.64 680.586 L1653.08 680.586 L1652.52 680.586 L1651.96 680.586 L1651.4 680.586 L1650.84 680.586 L1650.28 680.586 L1649.72 680.586 L1649.16 680.586 L1648.6 680.586 L1648.04 680.586 L1647.48 680.586 L1646.93 680.586 L1646.37 680.586 L1645.81 680.586 L1645.25 680.586 L1644.69 680.586 L1644.13 680.586 L1643.57 680.586 L1643.01 680.586 L1642.45 680.586 L1641.89 680.586 L1641.33 680.586 L1640.77 680.586 L1640.21 680.586 L1639.66 680.586 L1639.1 680.586 L1638.54 680.586 L1637.98 680.586 L1637.42 680.586 L1636.86 680.586 L1636.3 680.586 L1635.74 680.586 L1635.18 680.586 L1634.62 680.586 L1634.06 680.586 L1633.5 680.586 L1632.94 680.586 L1632.39 680.586 L1631.83 680.586 L1631.27 680.586 L1630.71 680.586 L1630.15 680.586 L1629.59 680.586 L1629.03 680.586 L1628.47 680.586 L1627.91 680.586 L1627.35 680.586 L1626.79 680.586 L1626.23 680.586 L1625.67 680.586 L1625.11 680.586 L1624.56 680.586 L1624 680.586 L1623.44 680.586 L1622.88 680.586 L1622.32 680.586 L1621.76 680.586 L1621.2 680.586 L1620.64 680.586 L1620.08 680.586 L1619.52 680.586 L1618.96 680.586 L1618.4 680.586 L1617.84 680.586 L1617.29 680.586 L1616.73 680.586 L1616.17 680.586 L1615.61 680.586 L1615.05 680.586 L1614.49 680.586 L1613.93 680.586 L1613.37 680.586 L1612.81 680.586 L1612.25 680.586 L1611.69 680.586 L1611.13 680.586 L1610.57 680.586 L1610.02 680.586 L1609.46 680.586 L1608.9 680.586 L1608.34 680.586 L1607.78 680.586 L1607.22 680.586 L1606.66 680.586 L1606.1 680.586 L1605.54 680.586 L1604.98 680.586 L1604.42 680.586 L1603.86 680.586 L1603.3 680.586 L1602.74 680.586 L1602.19 680.586 L1601.63 680.586 L1601.07 680.586 L1600.51 680.586 L1599.95 680.586 L1599.39 680.586 L1598.83 680.586 L1598.27 680.586 L1597.71 680.586 L1597.15 680.586 L1596.59 680.586 L1596.03 680.586 L1595.47 680.586 L1594.92 680.586 L1594.36 680.586 L1593.8 680.586 L1593.24 680.586 L1592.68 680.586 L1592.12 680.586 L1591.56 680.586 L1591 680.586 L1590.44 680.586 L1589.88 680.586 L1589.32 680.586 L1588.76 680.586 L1588.2 680.586 L1587.65 680.586 L1587.09 680.586 L1586.53 680.586 L1585.97 680.586 L1585.41 680.586 L1584.85 680.586 L1584.29 680.586 L1583.73 680.586 L1583.17 680.586 L1582.61 680.586 L1582.05 680.586 L1581.49 680.586 L1580.93 680.586 L1580.37 680.586 L1579.82 680.586 L1579.26 680.586 L1578.7 680.586 L1578.14 680.586 L1577.58 680.586 L1577.02 680.586 L1576.46 680.586 L1575.9 680.586 L1575.34 680.586 L1574.78 680.586 L1574.22 680.586 L1573.66 680.586 L1573.1 680.586 L1572.55 680.586 L1571.99 680.586 L1571.43 680.586 L1570.87 680.586 L1570.31 680.586 L1569.75 680.586 L1569.19 680.586 L1568.63 680.586 L1568.07 680.586 L1567.51 680.586 L1566.95 680.586 L1566.39 680.586 L1565.83 680.586 L1565.28 680.586 L1564.72 680.586 L1564.16 680.586 L1563.6 680.586 L1563.04 680.586 L1562.48 680.586 L1561.92 680.586 L1561.36 680.586 L1560.8 680.586 L1560.24 680.586 L1559.68 680.586 L1559.12 680.586 L1558.56 680.586 L1558 680.586 L1557.45 680.586 L1556.89 680.586 L1556.33 680.586 L1555.77 680.586 L1555.21 680.586 L1554.65 680.586 L1554.09 680.586 L1553.53 680.586 L1552.97 680.586 L1552.41 680.586 L1551.85 680.586 L1551.29 680.586 L1550.73 680.586 L1550.18 680.586 L1549.62 680.586 L1549.06 680.586 L1548.5 680.586 L1547.94 680.586 L1547.38 680.586 L1546.82 680.586 L1546.26 680.586 L1545.7 680.586 L1545.14 680.586 L1544.58 680.586 L1544.02 680.586 L1543.46 680.586 L1542.9 680.586 L1542.35 680.586 L1541.79 680.586 L1541.23 680.586 L1540.67 680.586 L1540.11 680.586 L1539.55 680.586 L1538.99 680.586 L1538.43 680.586 L1537.87 680.586 L1537.31 680.586 L1536.75 680.586 L1536.19 680.586 L1535.63 680.586 L1535.08 680.586 L1534.52 680.586 L1533.96 680.586 L1533.4 680.586 L1532.84 680.586 L1532.28 680.586 L1531.72 680.586 L1531.16 680.586 L1530.6 680.586 L1530.04 680.586 L1529.48 680.586 L1528.92 680.586 L1528.36 680.586 L1527.81 680.586 L1527.25 680.586 L1526.69 680.586 L1526.13 680.586 L1525.57 680.586 L1525.01 680.586 L1524.45 680.586 L1523.89 680.586 L1523.33 680.586 L1522.77 680.586 L1522.21 680.586 L1521.65 680.586 L1521.09 680.586 L1520.53 680.586 L1519.98 680.586 L1519.42 680.586 L1518.86 680.586 L1518.3 680.586 L1517.74 680.586 L1517.18 680.586 L1516.62 680.586 L1516.06 680.586 L1515.5 680.586 L1514.94 680.586 L1514.38 680.586 L1513.82 680.586 L1513.26 680.586 L1512.71 680.586 L1512.15 680.586 L1511.59 680.586 L1511.03 680.586 L1510.47 680.586 L1509.91 680.586 L1509.35 680.586 L1508.79 680.586 L1508.23 680.586 L1507.67 680.586 L1507.11 680.586 L1506.55 680.586 L1505.99 680.586 L1505.44 680.586 L1504.88 680.586 L1504.32 680.586 L1503.76 680.586 L1503.2 680.586 L1502.64 680.586 L1502.08 680.586 L1501.52 680.586 L1500.96 680.586 L1500.4 680.586 L1499.84 680.586 L1499.28 680.586 L1498.72 680.586 L1498.16 680.586 L1497.61 680.586 L1497.05 680.586 L1496.49 680.586 L1495.93 680.586 L1495.37 680.586 L1494.81 680.586 L1494.25 680.586 L1493.69 680.586 L1493.13 680.586 L1492.57 680.586 L1492.01 680.586 L1491.45 680.586 L1490.89 680.586 L1490.34 680.586 L1489.78 680.586 L1489.22 680.586 L1488.66 680.586 L1488.1 680.586 L1487.54 680.586 L1486.98 680.586 L1486.42 680.586 L1485.86 680.586 L1485.3 680.586 L1484.74 680.586 L1484.18 680.586 L1483.62 680.586 L1483.07 680.586 L1482.51 680.586 L1481.95 680.586 L1481.39 680.586 L1480.83 680.586 L1480.27 680.586 L1479.71 680.586 L1479.15 680.586 L1478.59 680.586 L1478.03 680.586 L1477.47 680.586 L1476.91 680.586 L1476.35 680.586 L1475.79 680.586 L1475.24 680.586 L1474.68 680.586 L1474.12 680.586 L1473.56 680.586 L1473 680.586 L1472.44 680.586 L1471.88 680.586 L1471.32 680.586 L1470.76 680.586 L1470.2 680.586 L1469.64 680.586 L1469.08 680.586 L1468.52 680.586 L1467.97 680.586 L1467.41 680.586 L1466.85 680.586 L1466.29 680.586 L1465.73 680.586 L1465.17 680.586 L1464.61 680.586 L1464.05 680.586 L1463.49 680.586 L1462.93 680.586 L1462.37 680.586 L1461.81 680.586 L1461.25 680.586 L1460.7 680.586 L1460.14 680.586 L1459.58 680.586 L1459.02 680.586 L1458.46 680.586 L1457.9 680.586 L1457.34 680.586 L1456.78 680.586 L1456.22 680.586 L1455.66 680.586 L1455.1 680.586 L1454.54 680.586 L1453.98 680.586 L1453.42 680.586 L1452.87 680.586 L1452.31 680.586 L1451.75 680.586 L1451.19 680.586 L1450.63 680.586 L1450.07 680.586 L1449.51 680.586 L1448.95 680.586 L1448.39 680.586 L1447.83 680.586 L1447.27 680.586 L1446.71 680.586 L1446.15 680.586 L1445.6 680.586 L1445.04 680.586 L1444.48 680.586 L1443.92 680.586 L1443.36 680.586 L1442.8 680.586 L1442.24 680.586 L1441.68 680.586 L1441.12 680.586 L1440.56 680.586 L1440 680.586 L1439.44 680.586 L1438.88 680.586 L1438.33 680.586 L1437.77 680.586 L1437.21 680.586 L1436.65 680.586 L1436.09 680.586 L1435.53 680.586 L1434.97 680.586 L1434.41 680.586 L1433.85 680.586 L1433.29 680.586 L1432.73 680.586 L1432.17 680.586 L1431.61 680.586 L1431.05 680.586 L1430.5 680.586 L1429.94 680.586 L1429.38 680.586 L1428.82 680.586 L1428.26 680.586 L1427.7 680.586 L1427.14 680.586 L1426.58 680.586 L1426.02 680.586 L1425.46 680.586 L1424.9 680.586 L1424.34 680.586 L1423.78 680.586 L1423.23 680.586 L1422.67 680.586 L1422.11 680.586 L1421.55 680.586 L1420.99 680.586 L1420.43 680.586 L1419.87 680.586 L1419.31 680.586 L1418.75 680.586 L1418.19 680.586 L1417.63 680.586 L1417.07 680.586 L1416.51 680.586 L1415.95 680.586 L1415.4 680.586 L1414.84 680.586 L1414.28 680.586 L1413.72 680.586 L1413.16 680.586 L1412.6 680.586 L1412.04 680.586 L1411.48 680.586 L1410.92 680.586 L1410.36 680.586 L1409.8 680.586 L1409.24 680.586 L1408.68 680.586 L1408.13 680.586 L1407.57 680.586 L1407.01 680.586 L1406.45 680.586 L1405.89 680.586 L1405.33 680.586 L1404.77 680.586 L1404.21 680.586 L1403.65 680.586 L1403.09 680.586 L1402.53 680.586 L1401.97 680.586 L1401.41 680.586 L1400.86 680.586 L1400.3 680.586 L1399.74 680.586 L1399.18 680.586 L1398.62 680.586 L1398.06 680.586 L1397.5 680.586 L1396.94 680.586 L1396.38 680.586 L1395.82 680.586 L1395.26 680.586 L1394.7 680.586 L1394.14 680.586 L1393.58 680.586 L1393.03 680.586 L1392.47 680.586 L1391.91 680.586 L1391.35 680.586 L1390.79 680.586 L1390.23 680.586 L1389.67 680.586 L1389.11 680.586 L1388.55 680.586 L1387.99 680.586 L1387.43 680.586 L1386.87 680.586 L1386.31 680.586 L1385.76 680.586 L1385.2 680.586 L1384.64 680.586 L1384.08 680.586 L1383.52 680.586 L1382.96 680.586 L1382.4 680.586 L1381.84 680.586 L1381.28 680.586 L1380.72 680.586 L1380.16 680.586 L1379.6 680.586 L1379.04 680.586 L1378.49 680.586 L1377.93 680.586 L1377.37 680.586 L1376.81 680.586 L1376.25 680.586 L1375.69 680.586 L1375.13 680.586 L1374.57 680.586 L1374.01 680.586 L1373.45 680.586 L1372.89 680.586 L1372.33 680.586 L1371.77 680.586 L1371.21 680.586 L1370.66 680.586 L1370.1 680.586 L1369.54 680.586 L1368.98 680.586 L1368.42 680.586 L1367.86 680.586 L1367.3 680.586 L1366.74 680.586 L1366.18 680.586 L1365.62 680.586 L1365.06 680.586 L1364.5 680.586 L1363.94 680.586 L1363.39 680.586 L1362.83 680.586 L1362.27 680.586 L1361.71 680.586 L1361.15 680.586 L1360.59 680.586 L1360.03 680.586 L1359.47 680.586 L1358.91 680.586 L1358.35 680.586 L1357.79 680.586 L1357.23 680.586 L1356.67 680.586 L1356.12 680.586 L1355.56 680.586 L1355 680.586 L1354.44 680.586 L1353.88 680.586 L1353.32 680.586 L1352.76 680.586 L1352.2 680.586 L1351.64 680.586 L1351.08 680.586 L1350.52 680.586 L1349.96 680.586 L1349.4 680.586 L1348.84 680.586 L1348.29 680.586 L1347.73 680.586 L1347.17 680.586 L1346.61 680.586 L1346.05 680.586 L1345.49 680.586 L1344.93 680.586 L1344.37 680.586 L1343.81 680.586 L1343.25 680.586 L1342.69 680.586 L1342.13 680.586 L1341.57 680.586 L1341.02 680.586 L1340.46 680.586 L1339.9 680.586 L1339.34 680.586 L1338.78 680.586 L1338.22 680.586 L1337.66 680.586 L1337.1 680.586 L1336.54 680.586 L1335.98 680.586 L1335.42 680.586 L1334.86 680.586 L1334.3 680.586 L1333.75 680.586 L1333.19 680.586 L1332.63 680.586 L1332.07 680.586 L1331.51 680.586 L1330.95 680.586 L1330.39 680.586 L1329.83 680.586 L1329.27 680.586 L1328.71 680.586 L1328.15 680.586 L1327.59 680.586 L1327.03 680.586 L1326.47 680.586 L1325.92 680.586 L1325.36 680.586 L1324.8 680.586 L1324.24 680.586 L1323.68 680.586 L1323.12 680.586 L1322.56 680.586 L1322 680.586 L1321.44 680.586 L1320.88 680.586 L1320.32 680.586 L1319.76 680.586 L1319.2 680.586 L1318.65 680.586 L1318.09 680.586 L1317.53 680.586 L1316.97 680.586 L1316.41 680.586 L1315.85 680.586 L1315.29 680.586 L1314.73 680.586 L1314.17 680.586 L1313.61 680.586 L1313.05 680.586 L1312.49 680.586 L1311.93 680.586 L1311.38 680.586 L1310.82 680.586 L1310.26 680.586 L1309.7 680.586 L1309.14 680.586 L1308.58 680.586 L1308.02 680.586 L1307.46 680.586 L1306.9 680.586 L1306.34 680.586 L1305.78 680.586 L1305.22 680.586 L1304.66 680.586 L1304.1 680.586 L1303.55 680.586 L1302.99 680.586 L1302.43 680.586 L1301.87 680.586 L1301.31 680.586 L1300.75 680.586 L1300.19 680.586 L1299.63 680.586 L1299.07 680.586 L1298.51 680.586 L1297.95 680.586 L1297.39 680.586 L1296.83 680.586 L1296.28 680.586 L1295.72 680.586 L1295.16 680.586 L1294.6 680.586 L1294.04 680.586 L1293.48 680.586 L1292.92 680.586 L1292.36 680.586 L1291.8 680.586 L1291.24 680.586 L1290.68 680.586 L1290.12 680.586 L1289.56 680.586 L1289 680.586 L1288.45 680.586 L1287.89 680.586 L1287.33 680.586 L1286.77 680.586 L1286.21 680.586 L1285.65 680.586 L1285.09 680.586 L1284.53 680.586 L1283.97 680.586 L1283.41 680.586 L1282.85 680.586 L1282.29 680.586 L1281.73 680.586 L1281.18 680.586 L1280.62 680.586 L1280.06 680.586 L1279.5 680.586 L1278.94 680.586 L1278.38 680.586 L1277.82 680.586 L1277.26 680.586 L1276.7 680.586 L1276.14 680.586 L1275.58 680.586 L1275.02 680.586 L1274.46 680.586 L1273.91 680.586 L1273.35 680.586 L1272.79 680.586 L1272.23 680.586 L1271.67 680.586 L1271.11 680.586 L1270.55 680.586 L1269.99 680.586 L1269.43 680.586 L1268.87 680.586 L1268.31 680.586 L1267.75 680.586 L1267.19 680.586 L1266.63 680.586 L1266.08 680.586 L1265.52 680.586 L1264.96 680.586 L1264.4 680.586 L1263.84 680.586 L1263.28 680.586 L1262.72 680.586 L1262.16 680.586 L1261.6 680.586 L1261.04 680.586 L1260.48 680.586 L1259.92 680.586 L1259.36 680.586 L1258.81 680.586 L1258.25 680.586 L1257.69 680.586 L1257.13 680.586 L1256.57 680.586 L1256.01 680.586 L1255.45 680.586 L1254.89 680.586 L1254.33 680.586 L1253.77 680.586 L1253.21 680.586 L1252.65 680.586 L1252.09 680.586 L1251.54 680.586 L1250.98 680.586 L1250.42 680.586 L1249.86 680.586 L1249.3 680.586 L1248.74 680.586 L1248.18 680.586 L1247.62 680.586 L1247.06 680.586 L1246.5 680.586 L1245.94 680.586 L1245.38 680.586 L1244.82 680.586 L1244.26 680.586 L1243.71 680.586 L1243.15 680.586 L1242.59 680.586 L1242.03 680.586 L1241.47 680.586 L1240.91 680.586 L1240.35 680.586 L1239.79 680.586 L1239.23 680.586 L1238.67 680.586 L1238.11 680.586 L1237.55 680.586 L1236.99 680.586 L1236.44 680.586 L1235.88 680.586 L1235.32 680.586 L1234.76 680.586 L1234.2 680.586 L1233.64 680.586 L1233.08 680.586 L1232.52 680.586 L1231.96 680.586 L1231.4 680.586 L1230.84 680.586 L1230.28 680.586 L1229.72 680.586 L1229.17 680.586 L1228.61 680.586 L1228.05 680.586 L1227.49 680.586 L1226.93 680.586 L1226.37 680.586 L1225.81 680.586 L1225.25 680.586 L1224.69 680.586 L1224.13 680.586 L1223.57 680.586 L1223.01 680.586 L1222.45 680.586 L1221.89 680.586 L1221.34 680.586 L1220.78 680.586 L1220.22 680.586 L1219.66 680.586 L1219.1 680.586 L1218.54 680.586 L1217.98 680.586 L1217.42 680.586 L1216.86 680.586 L1216.3 680.586 L1215.74 680.586 L1215.18 680.586 L1214.62 680.586 L1214.07 680.586 L1213.51 680.586 L1212.95 680.586 L1212.39 680.586 L1211.83 680.586 L1211.27 680.586 L1210.71 680.586 L1210.15 680.586 L1209.59 680.586 L1209.03 680.586 L1208.47 680.586 L1207.91 680.586 L1207.35 680.586 L1206.8 680.586 L1206.24 680.586 L1205.68 680.586 L1205.12 680.586 L1204.56 680.586 L1204 680.586 L1203.44 680.586 L1202.88 680.586 L1202.32 680.586 L1201.76 680.586 L1201.2 680.586 L1200.64 680.586 L1200.08 680.586 L1199.52 680.586 L1198.97 680.586 L1198.41 680.586 L1197.85 680.586 L1197.29 680.586 L1196.73 680.586 L1196.17 680.586 L1195.61 680.586 L1195.05 680.586 L1194.49 680.586 L1193.93 680.586 L1193.37 680.586 L1192.81 680.586 L1192.25 680.586 L1191.7 680.586 L1191.14 680.586 L1190.58 680.586 L1190.02 680.586 L1189.46 680.586 L1188.9 680.586 L1188.34 680.586 L1187.78 680.586 L1187.22 680.586 L1186.66 680.586 L1186.1 680.586 L1185.54 680.586 L1184.98 680.586 L1184.43 680.586 L1183.87 680.586 L1183.31 680.586 L1182.75 680.586 L1182.19 680.586 L1181.63 680.586 L1181.07 680.586 L1180.51 680.586 L1179.95 680.586 L1179.39 680.586 L1178.83 680.586 L1178.27 680.586 L1177.71 680.586 L1177.15 680.586 L1176.6 680.586 L1176.04 680.586 L1175.48 680.586 L1174.92 680.586 L1174.36 680.586 L1173.8 680.586 L1173.24 680.586 L1172.68 680.586 L1172.12 680.586 L1171.56 680.586 L1171 680.586 L1170.44 680.586 L1169.88 680.586 L1169.33 680.586 L1168.77 680.586 L1168.21 680.586 L1167.65 680.586 L1167.09 680.586 L1166.53 680.586 L1165.97 680.586 L1165.41 680.586 L1164.85 680.586 L1164.29 680.586 L1163.73 680.586 L1163.17 680.586 L1162.61 680.586 L1162.05 680.586 L1161.5 680.586 L1160.94 680.586 L1160.38 680.586 L1159.82 680.586 L1159.26 680.586 L1158.7 680.586 L1158.14 680.586 L1157.58 680.586 L1157.02 680.586 L1156.46 680.586 L1155.9 680.586 L1155.34 680.586 L1154.78 680.586 L1154.23 680.586 L1153.67 680.586 L1153.11 680.586 L1152.55 680.586 L1151.99 680.586 L1151.43 680.586 L1150.87 680.586 L1150.31 680.586 L1149.75 680.586 L1149.19 680.586 L1148.63 680.586 L1148.07 680.586 L1147.51 680.586 L1146.96 680.586 L1146.4 680.586 L1145.84 680.586 L1145.28 680.586 L1144.72 680.586 L1144.16 680.586 L1143.6 680.586 L1143.04 680.586 L1142.48 680.586 L1141.92 680.586 L1141.36 680.586 L1140.8 680.586 L1140.24 680.586 L1139.68 680.586 L1139.13 680.586 L1138.57 680.586 L1138.01 680.586 L1137.45 680.586 L1136.89 680.586 L1136.33 680.586 L1135.77 680.586 L1135.21 680.586 L1134.65 680.586 L1134.09 680.586 L1133.53 680.586 L1132.97 680.586 L1132.41 680.586 L1131.86 680.586 L1131.3 680.586 L1130.74 680.586 L1130.18 680.586 L1129.62 680.586 L1129.06 680.586 L1128.5 680.586 L1127.94 680.586 L1127.38 680.586 L1126.82 680.586 L1126.26 680.586 L1125.7 680.586 L1125.14 680.586 L1124.59 680.586 L1124.03 680.586 L1123.47 680.586 L1122.91 680.586 L1122.35 680.586 L1121.79 680.586 L1121.23 680.586 L1120.67 680.586 L1120.11 680.586 L1119.55 680.586 L1118.99 680.586 L1118.43 680.586 L1117.87 680.586 L1117.31 680.586 L1116.76 680.586 L1116.2 680.586 L1115.64 680.586 L1115.08 680.586 L1114.52 680.586 L1113.96 680.586 L1113.4 680.586 L1112.84 680.586 L1112.28 680.586 L1111.72 680.586 L1111.16 680.586 L1110.6 680.586 L1110.04 680.586 L1109.49 680.586 L1108.93 680.586 L1108.37 680.586 L1107.81 680.586 L1107.25 680.586 L1106.69 680.586 L1106.13 680.586 L1105.57 680.586 L1105.01 680.586 L1104.45 680.586 L1103.89 680.586 L1103.33 680.586 L1102.77 680.586 L1102.22 680.586 L1101.66 680.586 L1101.1 680.586 L1100.54 680.586 L1099.98 680.586 L1099.42 680.586 L1098.86 680.586 L1098.3 680.586 L1097.74 680.586 L1097.18 680.586 L1096.62 680.586 L1096.06 680.586 L1095.5 680.586 L1094.94 680.586 L1094.39 680.586 L1093.83 680.586 L1093.27 680.586 L1092.71 680.586 L1092.15 680.586 L1091.59 680.586 L1091.03 680.586 L1090.47 680.586 L1089.91 680.586 L1089.35 680.586 L1088.79 680.586 L1088.23 680.586 L1087.67 680.586 L1087.12 680.586 L1086.56 680.586 L1086 680.586 L1085.44 680.586 L1084.88 680.586 L1084.32 680.586 L1083.76 680.586 L1083.2 680.586 L1082.64 680.586 L1082.08 680.586 L1081.52 680.586 L1080.96 680.586 L1080.4 680.586 L1079.85 680.586 L1079.29 680.586 L1078.73 680.586 L1078.17 680.586 L1077.61 680.586 L1077.05 680.586 L1076.49 680.586 L1075.93 680.586 L1075.37 680.586 L1074.81 680.586 L1074.25 680.586 L1073.69 680.586 L1073.13 680.586 L1072.57 680.586 L1072.02 680.586 L1071.46 680.586 L1070.9 680.586 L1070.34 680.586 L1069.78 680.586 L1069.22 680.586 L1068.66 680.586 L1068.1 680.586 L1067.54 680.586 L1066.98 680.586 L1066.42 680.586 L1065.86 680.586 L1065.3 680.586 L1064.75 680.586 L1064.19 680.586 L1063.63 680.586 L1063.07 680.586 L1062.51 680.586 L1061.95 680.586 L1061.39 680.586 L1060.83 680.586 L1060.27 680.586 L1059.71 680.586 L1059.15 680.586 L1058.59 680.586 L1058.03 680.586 L1057.48 680.586 L1056.92 680.586 L1056.36 680.586 L1055.8 680.586 L1055.24 680.586 L1054.68 680.586 L1054.12 680.586 L1053.56 680.586 L1053 680.586 L1052.44 680.586 L1051.88 680.586 L1051.32 680.586 L1050.76 680.586 L1050.2 680.586 L1049.65 680.586 L1049.09 680.586 L1048.53 680.586 L1047.97 680.586 L1047.41 680.586 L1046.85 680.586 L1046.29 680.586 L1045.73 680.586 L1045.17 680.586 L1044.61 680.586 L1044.05 680.586 L1043.49 680.586 L1042.93 680.586 L1042.38 680.586 L1041.82 680.586 L1041.26 680.586 L1040.7 680.586 L1040.14 680.586 L1039.58 680.586 L1039.02 680.586 L1038.46 680.586 L1037.9 680.586 L1037.34 680.586 L1036.78 680.586 L1036.22 680.586 L1035.66 680.586 L1035.1 680.586 L1034.55 680.586 L1033.99 680.586 L1033.43 680.586 L1032.87 680.586 L1032.31 680.586 L1031.75 680.586 L1031.19 680.586 L1030.63 680.586 L1030.07 680.586 L1029.51 680.586 L1028.95 680.586 L1028.39 680.586 L1027.83 680.586 L1027.28 680.586 L1026.72 680.586 L1026.16 680.586 L1025.6 680.586 L1025.04 680.586 L1024.48 680.586 L1023.92 680.586 L1023.36 680.586 L1022.8 680.586 L1022.24 680.586 L1021.68 680.586 L1021.12 680.586 L1020.56 680.586 L1020.01 680.586 L1019.45 680.586 L1018.89 680.586 L1018.33 680.586 L1017.77 680.586 L1017.21 680.586 L1016.65 680.586 L1016.09 680.586 L1015.53 680.586 L1014.97 680.586 L1014.41 680.586 L1013.85 680.586 L1013.29 680.586 L1012.73 680.586 L1012.18 680.586 L1011.62 680.586 L1011.06 680.586 L1010.5 680.586 L1009.94 680.586 L1009.38 680.586 L1008.82 680.586 L1008.26 680.586 L1007.7 680.586 L1007.14 680.586 L1006.58 680.586 L1006.02 680.586 L1005.46 680.586 L1004.91 680.586 L1004.35 680.586 L1003.79 680.586 L1003.23 680.586 L1002.67 680.586 L1002.11 680.586 L1001.55 680.586 L1000.99 680.586 L1000.43 680.586 L999.872 680.586 L999.313 680.586 L998.754 680.586 L998.194 680.586 L997.635 680.586 L997.076 680.586 L996.517 680.586 L995.957 680.586 L995.398 680.586 L994.839 680.586 L994.28 680.586 L993.72 680.586 L993.161 680.586 L992.602 680.586 L992.043 680.586 L991.483 680.586 L990.924 680.586 L990.365 680.586 L989.806 680.586 L989.246 680.586 L988.687 680.586 L988.128 680.586 L987.569 680.586 L987.009 680.586 L986.45 680.586 L985.891 680.586 L985.332 680.586 L984.772 680.586 L984.213 680.586 L983.654 680.586 L983.095 680.586 L982.535 680.586 L981.976 680.586 L981.417 680.586 L980.858 680.586 L980.298 680.586 L979.739 680.586 L979.18 680.586 L978.621 680.586 L978.061 680.586 L977.502 680.586 L976.943 680.586 L976.384 680.586 L975.824 680.586 L975.265 680.586 L974.706 680.586 L974.147 680.586 L973.587 680.586 L973.028 680.586 L972.469 680.586 L971.91 680.586 L971.35 680.586 L970.791 680.586 L970.232 680.586 L969.673 680.586 L969.113 680.586 L968.554 680.586 L967.995 680.586 L967.436 680.586 L966.876 680.586 L966.317 680.586 L965.758 680.586 L965.199 680.586 L964.639 680.586 L964.08 680.586 L963.521 680.586 L962.962 680.586 L962.402 680.586 L961.843 680.586 L961.284 680.586 L960.725 680.586 L960.165 680.586 L959.606 680.586 L959.047 680.586 L958.488 680.586 L957.928 680.586 L957.369 680.586 L956.81 680.586 L956.251 680.586 L955.691 680.586 L955.132 680.586 L954.573 680.586 L954.014 680.586 L953.454 680.586 L952.895 680.586 L952.336 680.586 L951.777 680.586 L951.217 680.586 L950.658 680.586 L950.099 680.586 L949.54 680.586 L948.98 680.586 L948.421 680.586 L947.862 680.586 L947.303 680.586 L946.743 680.586 L946.184 680.586 L945.625 680.586 L945.066 680.586 L944.506 680.586 L943.947 680.586 L943.388 680.586 L942.829 680.586 L942.269 680.586 L941.71 680.586 L941.151 680.586 L940.592 680.586 L940.032 680.586 L939.473 680.586 L938.914 680.586 L938.355 680.586 L937.795 680.586 L937.236 680.586 L936.677 680.586 L936.118 680.586 L935.558 680.586 L934.999 680.586 L934.44 680.586 L933.881 680.586 L933.321 680.586 L932.762 680.586 L932.203 680.586 L931.644 680.586 L931.084 680.586 L930.525 680.586 L929.966 680.586 L929.406 680.586 L928.847 680.586 L928.288 680.586 L927.729 680.586 L927.169 680.586 L926.61 680.586 L926.051 680.586 L925.492 680.586 L924.932 680.586 L924.373 680.586 L923.814 680.586 L923.255 680.586 L922.695 680.586 L922.136 680.586 L921.577 680.586 L921.018 680.586 L920.458 680.586 L919.899 680.586 L919.34 680.586 L918.781 680.586 L918.221 680.586 L917.662 680.586 L917.103 680.586 L916.544 680.586 L915.984 680.586 L915.425 680.586 L914.866 680.586 L914.307 680.586 L913.747 680.586 L913.188 680.586 L912.629 680.586 L912.07 680.586 L911.51 680.586 L910.951 680.586 L910.392 680.586 L909.833 680.586 L909.273 680.586 L908.714 680.586 L908.155 680.586 L907.596 680.586 L907.036 680.586 L906.477 680.586 L905.918 680.586 L905.359 680.586 L904.799 680.586 L904.24 680.586 L903.681 680.586 L903.122 680.586 L902.562 680.586 L902.003 680.586 L901.444 680.586 L900.885 680.586 L900.325 680.586 L899.766 680.586 L899.207 680.586 L898.648 680.586 L898.088 680.586 L897.529 680.586 L896.97 680.586 L896.411 680.586 L895.851 680.586 L895.292 680.586 L894.733 680.586 L894.174 680.586 L893.614 680.586 L893.055 680.586 L892.496 680.586 L891.937 680.586 L891.377 680.586 L890.818 680.586 L890.259 680.586 L889.7 680.586 L889.14 680.586 L888.581 680.586 L888.022 680.586 L887.463 680.586 L886.903 680.586 L886.344 680.586 L885.785 680.586 L885.226 680.586 L884.666 680.586 L884.107 680.586 L883.548 680.586 L882.989 680.586 L882.429 680.586 L881.87 680.586 L881.311 680.586 L880.752 680.586 L880.192 680.586 L879.633 680.586 L879.074 680.586 L878.515 680.586 L877.955 680.586 L877.396 680.586 L876.837 680.586 L876.278 680.586 L875.718 680.586 L875.159 680.586 L874.6 680.586 L874.041 680.586 L873.481 680.586 L872.922 680.586 L872.363 680.586 L871.804 680.586 L871.244 680.586 L870.685 680.586 L870.126 680.586 L869.567 680.586 L869.007 680.586 L868.448 680.586 L867.889 680.586 L867.33 680.586 L866.77 680.586 L866.211 680.586 L865.652 680.586 L865.093 680.586 L864.533 680.586 L863.974 680.586 L863.415 680.586 L862.856 680.586 L862.296 680.586 L861.737 680.586 L861.178 680.586 L860.619 680.586 L860.059 680.586 L859.5 680.586 L858.941 680.586 L858.382 680.586 L857.822 680.586 L857.263 680.586 L856.704 680.586 L856.145 680.586 L855.585 680.586 L855.026 680.586 L854.467 680.586 L853.908 680.586 L853.348 680.586 L852.789 680.586 L852.23 680.586 L851.671 680.586 L851.111 680.586 L850.552 680.586 L849.993 680.586 L849.434 680.586 L848.874 680.586 L848.315 680.586 L847.756 680.586 L847.197 680.586 L846.637 680.586 L846.078 680.586 L845.519 680.586 L844.96 680.586 L844.4 680.586 L843.841 680.586 L843.282 680.586 L842.723 680.586 L842.163 680.586 L841.604 680.586 L841.045 680.586 L840.486 680.586 L839.926 680.586 L839.367 680.586 L838.808 680.586 L838.249 680.586 L837.689 680.586 L837.13 680.586 L836.571 680.586 L836.012 680.586 L835.452 680.586 L834.893 680.586 L834.334 680.586 L833.775 680.586 L833.215 680.586 L832.656 680.586 L832.097 680.586 L831.538 680.586 L830.978 680.586 L830.419 680.586 L829.86 680.586 L829.301 680.586 L828.741 680.586 L828.182 680.586 L827.623 680.586 L827.064 680.586 L826.504 680.586 L825.945 680.586 L825.386 680.586 L824.827 680.586 L824.267 680.586 L823.708 680.586 L823.149 680.586 L822.59 680.586 L822.03 680.586 L821.471 680.586 L820.912 680.586 L820.353 680.586 L819.793 680.586 L819.234 680.586 L818.675 680.586 L818.116 680.586 L817.556 680.586 L816.997 680.586 L816.438 680.586 L815.879 680.586 L815.319 680.586 L814.76 680.586 L814.201 680.586 L813.642 680.586 L813.082 680.586 L812.523 680.586 L811.964 680.586 L811.405 680.586 L810.845 680.586 L810.286 680.586 L809.727 680.586 L809.168 680.586 L808.608 680.586 L808.049 680.586 L807.49 680.586 L806.931 680.586 L806.371 680.586 L805.812 680.586 L805.253 680.586 L804.693 680.586 L804.134 680.586 L803.575 680.586 L803.016 680.586 L802.456 680.586 L801.897 680.586 L801.338 680.586 L800.779 680.586 L800.219 680.586 L799.66 680.586 L799.101 680.586 L798.542 680.586 L797.982 680.586 L797.423 680.586 L796.864 680.586 L796.305 680.586 L795.745 680.586 L795.186 680.586 L794.627 680.586 L794.068 680.586 L793.508 680.586 L792.949 680.586 L792.39 680.586 L791.831 680.586 L791.271 680.586 L790.712 680.586 L790.153 680.586 L789.594 680.586 L789.034 680.586 L788.475 680.586 L787.916 680.586 L787.357 680.586 L786.797 680.586 L786.238 680.586 L785.679 680.586 L785.12 680.586 L784.56 680.586 L784.001 680.586 L783.442 680.586 L782.883 680.586 L782.323 680.586 L781.764 680.586 L781.205 680.586 L780.646 680.586 L780.086 680.586 L779.527 680.586 L778.968 680.586 L778.409 680.586 L777.849 680.586 L777.29 680.586 L776.731 680.586 L776.172 680.586 L775.612 680.586 L775.053 680.586 L774.494 680.586 L773.935 680.586 L773.375 680.586 L772.816 680.586 L772.257 680.586 L771.698 680.586 L771.138 680.586 L770.579 680.586 L770.02 680.586 L769.461 680.586 L768.901 680.586 L768.342 680.586 L767.783 680.586 L767.224 680.586 L766.664 680.586 L766.105 680.586 L765.546 680.586 L764.987 680.586 L764.427 680.586 L763.868 680.586 L763.309 680.586 L762.75 680.586 L762.19 680.586 L761.631 680.586 L761.072 680.586 L760.513 680.586 L759.953 680.586 L759.394 680.586 L758.835 680.586 L758.276 680.586 L757.716 680.586 L757.157 680.586 L756.598 680.586 L756.039 680.586 L755.479 680.586 L754.92 680.586 L754.361 680.586 L753.802 680.586 L753.242 680.586 L752.683 680.586 L752.124 680.586 L751.565 680.586 L751.005 680.586 L750.446 680.586 L749.887 680.586 L749.328 680.586 L748.768 680.586 L748.209 680.586 L747.65 680.586 L747.091 680.586 L746.531 680.586 L745.972 680.586 L745.413 680.586 L744.854 680.586 L744.294 680.586 L743.735 680.586 L743.176 680.586 L742.617 680.586 L742.057 680.586 L741.498 680.586 L740.939 680.586 L740.38 680.586 L739.82 680.586 L739.261 680.586 L738.702 680.586 L738.143 680.586 L737.583 680.586 L737.024 680.586 L736.465 680.586 L735.906 680.586 L735.346 680.586 L734.787 680.586 L734.228 680.586 L733.669 680.586 L733.109 680.586 L732.55 680.586 L731.991 680.586 L731.432 680.586 L730.872 680.586 L730.313 680.586 L729.754 680.586 L729.195 680.586 L728.635 680.586 L728.076 680.586 L727.517 680.586 L726.958 680.586 L726.398 680.586 L725.839 680.586 L725.28 680.586 L724.721 680.586 L724.161 680.586 L723.602 680.586 L723.043 680.586 L722.484 680.586 L721.924 680.586 L721.365 680.586 L720.806 680.586 L720.247 680.586  Z\" fill=\"#e26f46\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip693)\" style=\"stroke:#e26f46; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,686.054 720.806,686.054 721.365,686.054 721.924,686.054 722.484,686.054 723.043,686.054 723.602,686.054 724.161,686.054 724.721,686.054 725.28,686.054 725.839,686.054 726.398,686.054 726.958,686.054 727.517,686.054 728.076,686.054 728.635,686.054 729.195,686.054 729.754,686.054 730.313,686.054 730.872,686.054 731.432,686.054 731.991,686.054 732.55,686.054 733.109,686.054 733.669,686.054 734.228,686.054 734.787,686.054 735.346,686.054 735.906,686.054 736.465,686.054 737.024,686.054 737.583,686.054 738.143,686.054 738.702,686.054 739.261,686.054 739.82,686.054 740.38,686.054 740.939,686.054 741.498,686.054 742.057,686.054 742.617,686.054 743.176,686.054 743.735,686.054 744.294,686.054 744.854,686.054 745.413,686.054 745.972,686.054 746.531,686.054 747.091,686.054 747.65,686.054 748.209,686.054 748.768,686.054 749.328,686.054 749.887,686.054 750.446,686.054 751.005,686.054 751.565,686.054 752.124,686.054 752.683,686.054 753.242,686.054 753.802,686.054 754.361,686.054 754.92,686.054 755.479,686.054 756.039,686.054 756.598,686.054 757.157,686.054 757.716,686.054 758.276,686.054 758.835,686.054 759.394,686.054 759.953,686.054 760.513,686.054 761.072,686.054 761.631,686.054 762.19,686.054 762.75,686.054 763.309,686.054 763.868,686.054 764.427,686.054 764.987,686.054 765.546,686.054 766.105,686.054 766.664,686.054 767.224,686.054 767.783,686.054 768.342,686.054 768.901,686.054 769.461,686.054 770.02,686.054 770.579,686.054 771.138,686.054 771.698,686.054 772.257,686.054 772.816,686.054 773.375,686.054 773.935,686.054 774.494,686.054 775.053,686.054 775.612,686.054 776.172,686.054 776.731,686.054 777.29,686.054 777.849,686.054 778.409,686.054 778.968,686.054 779.527,686.054 780.086,686.054 780.646,686.054 781.205,686.054 781.764,686.054 782.323,686.054 782.883,686.054 783.442,686.054 784.001,686.054 784.56,686.054 785.12,686.054 785.679,686.054 786.238,686.054 786.797,686.054 787.357,686.054 787.916,686.054 788.475,686.054 789.034,686.054 789.594,686.054 790.153,686.054 790.712,686.054 791.271,686.054 791.831,686.054 792.39,686.054 792.949,686.054 793.508,686.054 794.068,686.054 794.627,686.054 795.186,686.054 795.745,686.054 796.305,686.054 796.864,686.054 797.423,686.054 797.982,686.054 798.542,686.054 799.101,686.054 799.66,686.054 800.219,686.054 800.779,686.054 801.338,686.054 801.897,686.054 802.456,686.054 803.016,686.054 803.575,686.054 804.134,686.054 804.693,686.054 805.253,686.054 805.812,686.054 806.371,686.054 806.931,686.054 807.49,686.054 808.049,686.054 808.608,686.054 809.168,686.054 809.727,686.054 810.286,686.054 810.845,686.054 811.405,686.054 811.964,686.054 812.523,686.054 813.082,686.054 813.642,686.054 814.201,686.054 814.76,686.054 815.319,686.054 815.879,686.054 816.438,686.054 816.997,686.054 817.556,686.054 818.116,686.054 818.675,686.054 819.234,686.054 819.793,686.054 820.353,686.054 820.912,686.054 821.471,686.054 822.03,686.054 822.59,686.054 823.149,686.054 823.708,686.054 824.267,686.054 824.827,686.054 825.386,686.054 825.945,686.054 826.504,686.054 827.064,686.054 827.623,686.054 828.182,686.054 828.741,686.054 829.301,686.054 829.86,686.054 830.419,686.054 830.978,686.054 831.538,686.054 832.097,686.054 832.656,686.054 833.215,686.054 833.775,686.054 834.334,686.054 834.893,686.054 835.452,686.054 836.012,686.054 836.571,686.054 837.13,686.054 837.689,686.054 838.249,686.054 838.808,686.054 839.367,686.054 839.926,686.054 840.486,686.054 841.045,686.054 841.604,686.054 842.163,686.054 842.723,686.054 843.282,686.054 843.841,686.054 844.4,686.054 844.96,686.054 845.519,686.054 846.078,686.054 846.637,686.054 847.197,686.054 847.756,686.054 848.315,686.054 848.874,686.054 849.434,686.054 849.993,686.054 850.552,686.054 851.111,686.054 851.671,686.054 852.23,686.054 852.789,686.054 853.348,686.054 853.908,686.054 854.467,686.054 855.026,686.054 855.585,686.054 856.145,686.054 856.704,686.054 857.263,686.054 857.822,686.054 858.382,686.054 858.941,686.054 859.5,686.054 860.059,686.054 860.619,686.054 861.178,686.054 861.737,686.054 862.296,686.054 862.856,686.054 863.415,686.054 863.974,686.054 864.533,686.054 865.093,686.054 865.652,686.054 866.211,686.054 866.77,686.054 867.33,686.054 867.889,686.054 868.448,686.054 869.007,686.054 869.567,686.054 870.126,686.054 870.685,686.054 871.244,686.054 871.804,686.054 872.363,686.054 872.922,686.054 873.481,686.054 874.041,686.054 874.6,686.054 875.159,686.054 875.718,686.054 876.278,686.054 876.837,686.054 877.396,686.054 877.955,686.054 878.515,686.054 879.074,686.054 879.633,686.054 880.192,686.054 880.752,686.054 881.311,686.054 881.87,686.054 882.429,686.054 882.989,686.054 883.548,686.054 884.107,686.054 884.666,686.054 885.226,686.054 885.785,686.054 886.344,686.054 886.903,686.054 887.463,686.054 888.022,686.054 888.581,686.054 889.14,686.054 889.7,686.054 890.259,686.054 890.818,686.054 891.377,686.054 891.937,686.054 892.496,686.054 893.055,686.054 893.614,686.054 894.174,686.054 894.733,686.054 895.292,686.054 895.851,686.054 896.411,686.054 896.97,686.054 897.529,686.054 898.088,686.054 898.648,686.054 899.207,686.054 899.766,686.054 900.325,686.054 900.885,686.054 901.444,686.054 902.003,686.054 902.562,686.054 903.122,686.054 903.681,686.054 904.24,686.054 904.799,686.054 905.359,686.054 905.918,686.054 906.477,686.054 907.036,686.054 907.596,686.054 908.155,686.054 908.714,686.054 909.273,686.054 909.833,686.054 910.392,686.054 910.951,686.054 911.51,686.054 912.07,686.054 912.629,686.054 913.188,686.054 913.747,686.054 914.307,686.054 914.866,686.054 915.425,686.054 915.984,686.054 916.544,686.054 917.103,686.054 917.662,686.054 918.221,686.054 918.781,686.054 919.34,686.054 919.899,686.054 920.458,686.054 921.018,686.054 921.577,686.054 922.136,686.054 922.695,686.054 923.255,686.054 923.814,686.054 924.373,686.054 924.932,686.054 925.492,686.054 926.051,686.054 926.61,686.054 927.169,686.054 927.729,686.054 928.288,686.054 928.847,686.054 929.406,686.054 929.966,686.054 930.525,686.054 931.084,686.054 931.644,686.054 932.203,686.054 932.762,686.054 933.321,686.054 933.881,686.054 934.44,686.054 934.999,686.054 935.558,686.054 936.118,686.054 936.677,686.054 937.236,686.054 937.795,686.054 938.355,686.054 938.914,686.054 939.473,686.054 940.032,686.054 940.592,686.054 941.151,686.054 941.71,686.054 942.269,686.054 942.829,686.054 943.388,686.054 943.947,686.054 944.506,686.054 945.066,686.054 945.625,686.054 946.184,686.054 946.743,686.054 947.303,686.054 947.862,686.054 948.421,686.054 948.98,686.054 949.54,686.054 950.099,686.054 950.658,686.054 951.217,686.054 951.777,686.054 952.336,686.054 952.895,686.054 953.454,686.054 954.014,686.054 954.573,686.054 955.132,686.054 955.691,686.054 956.251,686.054 956.81,686.054 957.369,686.054 957.928,686.054 958.488,686.054 959.047,686.054 959.606,686.054 960.165,686.054 960.725,686.054 961.284,686.054 961.843,686.054 962.402,686.054 962.962,686.054 963.521,686.054 964.08,686.054 964.639,686.054 965.199,686.054 965.758,686.054 966.317,686.054 966.876,686.054 967.436,686.054 967.995,686.054 968.554,686.054 969.113,686.054 969.673,686.054 970.232,686.054 970.791,686.054 971.35,686.054 971.91,686.054 972.469,686.054 973.028,686.054 973.587,686.054 974.147,686.054 974.706,686.054 975.265,686.054 975.824,686.054 976.384,686.054 976.943,686.054 977.502,686.054 978.061,686.054 978.621,686.054 979.18,686.054 979.739,686.054 980.298,686.054 980.858,686.054 981.417,686.054 981.976,686.054 982.535,686.054 983.095,686.054 983.654,686.054 984.213,686.054 984.772,686.054 985.332,686.054 985.891,686.054 986.45,686.054 987.009,686.054 987.569,686.054 988.128,686.054 988.687,686.054 989.246,686.054 989.806,686.054 990.365,686.054 990.924,686.054 991.483,686.054 992.043,686.054 992.602,686.054 993.161,686.054 993.72,686.054 994.28,686.054 994.839,686.054 995.398,686.054 995.957,686.054 996.517,686.054 997.076,686.054 997.635,686.054 998.194,686.054 998.754,686.054 999.313,686.054 999.872,686.054 1000.43,686.054 1000.99,686.054 1001.55,686.054 1002.11,686.054 1002.67,686.054 1003.23,686.054 1003.79,686.054 1004.35,686.054 1004.91,686.054 1005.46,686.054 1006.02,686.054 1006.58,686.054 1007.14,686.054 1007.7,686.054 1008.26,686.054 1008.82,686.054 1009.38,686.054 1009.94,686.054 1010.5,686.054 1011.06,686.054 1011.62,686.054 1012.18,686.054 1012.73,686.054 1013.29,686.054 1013.85,686.054 1014.41,686.054 1014.97,686.054 1015.53,686.054 1016.09,686.054 1016.65,686.054 1017.21,686.054 1017.77,686.054 1018.33,686.054 1018.89,686.054 1019.45,686.054 1020.01,686.054 1020.56,686.054 1021.12,686.054 1021.68,686.054 1022.24,686.054 1022.8,686.054 1023.36,686.054 1023.92,686.054 1024.48,686.054 1025.04,686.054 1025.6,686.054 1026.16,686.054 1026.72,686.054 1027.28,686.054 1027.83,686.054 1028.39,686.054 1028.95,686.054 1029.51,686.054 1030.07,686.054 1030.63,686.054 1031.19,686.054 1031.75,686.054 1032.31,686.054 1032.87,686.054 1033.43,686.054 1033.99,686.054 1034.55,686.054 1035.1,686.054 1035.66,686.054 1036.22,686.054 1036.78,686.054 1037.34,686.054 1037.9,686.054 1038.46,686.054 1039.02,686.054 1039.58,686.054 1040.14,686.054 1040.7,686.054 1041.26,686.054 1041.82,686.054 1042.38,686.054 1042.93,686.054 1043.49,686.054 1044.05,686.054 1044.61,686.054 1045.17,686.054 1045.73,686.054 1046.29,686.054 1046.85,686.054 1047.41,686.054 1047.97,686.054 1048.53,686.054 1049.09,686.054 1049.65,686.054 1050.2,686.054 1050.76,686.054 1051.32,686.054 1051.88,686.054 1052.44,686.054 1053,686.054 1053.56,686.054 1054.12,686.054 1054.68,686.054 1055.24,686.054 1055.8,686.054 1056.36,686.054 1056.92,686.054 1057.48,686.054 1058.03,686.054 1058.59,686.054 1059.15,686.054 1059.71,686.054 1060.27,686.054 1060.83,686.054 1061.39,686.054 1061.95,686.054 1062.51,686.054 1063.07,686.054 1063.63,686.054 1064.19,686.054 1064.75,686.054 1065.3,686.054 1065.86,686.054 1066.42,686.054 1066.98,686.054 1067.54,686.054 1068.1,686.054 1068.66,686.054 1069.22,686.054 1069.78,686.054 1070.34,686.054 1070.9,686.054 1071.46,686.054 1072.02,686.054 1072.57,686.054 1073.13,686.054 1073.69,686.054 1074.25,686.054 1074.81,686.054 1075.37,686.054 1075.93,686.054 1076.49,686.054 1077.05,686.054 1077.61,686.054 1078.17,686.054 1078.73,686.054 1079.29,686.054 1079.85,686.054 1080.4,686.054 1080.96,686.054 1081.52,686.054 1082.08,686.054 1082.64,686.054 1083.2,686.054 1083.76,686.054 1084.32,686.054 1084.88,686.054 1085.44,686.054 1086,686.054 1086.56,686.054 1087.12,686.054 1087.67,686.054 1088.23,686.054 1088.79,686.054 1089.35,686.054 1089.91,686.054 1090.47,686.054 1091.03,686.054 1091.59,686.054 1092.15,686.054 1092.71,686.054 1093.27,686.054 1093.83,686.054 1094.39,686.054 1094.94,686.054 1095.5,686.054 1096.06,686.054 1096.62,686.054 1097.18,686.054 1097.74,686.054 1098.3,686.054 1098.86,686.054 1099.42,686.054 1099.98,686.054 1100.54,686.054 1101.1,686.054 1101.66,686.054 1102.22,686.054 1102.77,686.054 1103.33,686.054 1103.89,686.054 1104.45,686.054 1105.01,686.054 1105.57,686.054 1106.13,686.054 1106.69,686.054 1107.25,686.054 1107.81,686.054 1108.37,686.054 1108.93,686.054 1109.49,686.054 1110.04,686.054 1110.6,686.054 1111.16,686.054 1111.72,686.054 1112.28,686.054 1112.84,686.054 1113.4,686.054 1113.96,686.054 1114.52,686.054 1115.08,686.054 1115.64,686.054 1116.2,686.054 1116.76,686.054 1117.31,686.054 1117.87,686.054 1118.43,686.054 1118.99,686.054 1119.55,686.054 1120.11,686.054 1120.67,686.054 1121.23,686.054 1121.79,686.054 1122.35,686.054 1122.91,686.054 1123.47,686.054 1124.03,686.054 1124.59,686.054 1125.14,686.054 1125.7,686.054 1126.26,686.054 1126.82,686.054 1127.38,686.054 1127.94,686.054 1128.5,686.054 1129.06,686.054 1129.62,686.054 1130.18,686.054 1130.74,686.054 1131.3,686.054 1131.86,686.054 1132.41,686.054 1132.97,686.054 1133.53,686.054 1134.09,686.054 1134.65,686.054 1135.21,686.054 1135.77,686.054 1136.33,686.054 1136.89,686.054 1137.45,686.054 1138.01,686.054 1138.57,686.054 1139.13,686.054 1139.68,686.054 1140.24,686.054 1140.8,686.054 1141.36,686.054 1141.92,686.054 1142.48,686.054 1143.04,686.054 1143.6,686.054 1144.16,686.054 1144.72,686.054 1145.28,686.054 1145.84,686.054 1146.4,686.054 1146.96,686.054 1147.51,686.054 1148.07,686.054 1148.63,686.054 1149.19,686.054 1149.75,686.054 1150.31,686.054 1150.87,686.054 1151.43,686.054 1151.99,686.054 1152.55,686.054 1153.11,686.054 1153.67,686.054 1154.23,686.054 1154.78,686.054 1155.34,686.054 1155.9,686.054 1156.46,686.054 1157.02,686.054 1157.58,686.054 1158.14,686.054 1158.7,686.054 1159.26,686.054 1159.82,686.054 1160.38,686.054 1160.94,686.054 1161.5,686.054 1162.05,686.054 1162.61,686.054 1163.17,686.054 1163.73,686.054 1164.29,686.054 1164.85,686.054 1165.41,686.054 1165.97,686.054 1166.53,686.054 1167.09,686.054 1167.65,686.054 1168.21,686.054 1168.77,686.054 1169.33,686.054 1169.88,686.054 1170.44,686.054 1171,686.054 1171.56,686.054 1172.12,686.054 1172.68,686.054 1173.24,686.054 1173.8,686.054 1174.36,686.054 1174.92,686.054 1175.48,686.054 1176.04,686.054 1176.6,686.054 1177.15,686.054 1177.71,686.054 1178.27,686.054 1178.83,686.054 1179.39,686.054 1179.95,686.054 1180.51,686.054 1181.07,686.054 1181.63,686.054 1182.19,686.054 1182.75,686.054 1183.31,686.054 1183.87,686.054 1184.43,686.054 1184.98,686.054 1185.54,686.054 1186.1,686.054 1186.66,686.054 1187.22,686.054 1187.78,686.054 1188.34,686.054 1188.9,686.054 1189.46,686.054 1190.02,686.054 1190.58,686.054 1191.14,686.054 1191.7,686.054 1192.25,686.054 1192.81,686.054 1193.37,686.054 1193.93,686.054 1194.49,686.054 1195.05,686.054 1195.61,686.054 1196.17,686.054 1196.73,686.054 1197.29,686.054 1197.85,686.054 1198.41,686.054 1198.97,686.054 1199.52,686.054 1200.08,686.054 1200.64,686.054 1201.2,686.054 1201.76,686.054 1202.32,686.054 1202.88,686.054 1203.44,686.054 1204,686.054 1204.56,686.054 1205.12,686.054 1205.68,686.054 1206.24,686.054 1206.8,686.054 1207.35,686.054 1207.91,686.054 1208.47,686.054 1209.03,686.054 1209.59,686.054 1210.15,686.054 1210.71,686.054 1211.27,686.054 1211.83,686.054 1212.39,686.054 1212.95,686.054 1213.51,686.054 1214.07,686.054 1214.62,686.054 1215.18,686.054 1215.74,686.054 1216.3,686.054 1216.86,686.054 1217.42,686.054 1217.98,686.054 1218.54,686.054 1219.1,686.054 1219.66,686.054 1220.22,686.054 1220.78,686.054 1221.34,686.054 1221.89,686.054 1222.45,686.054 1223.01,686.054 1223.57,686.054 1224.13,686.054 1224.69,686.054 1225.25,686.054 1225.81,686.054 1226.37,686.054 1226.93,686.054 1227.49,686.054 1228.05,686.054 1228.61,686.054 1229.17,686.054 1229.72,686.054 1230.28,686.054 1230.84,686.054 1231.4,686.054 1231.96,686.054 1232.52,686.054 1233.08,686.054 1233.64,686.054 1234.2,686.054 1234.76,686.054 1235.32,686.054 1235.88,686.054 1236.44,686.054 1236.99,686.054 1237.55,686.054 1238.11,686.054 1238.67,686.054 1239.23,686.054 1239.79,686.054 1240.35,686.054 1240.91,686.054 1241.47,686.054 1242.03,686.054 1242.59,686.054 1243.15,686.054 1243.71,686.054 1244.26,686.054 1244.82,686.054 1245.38,686.054 1245.94,686.054 1246.5,686.054 1247.06,686.054 1247.62,686.054 1248.18,686.054 1248.74,686.054 1249.3,686.054 1249.86,686.054 1250.42,686.054 1250.98,686.054 1251.54,686.054 1252.09,686.054 1252.65,686.054 1253.21,686.054 1253.77,686.054 1254.33,686.054 1254.89,686.054 1255.45,686.054 1256.01,686.054 1256.57,686.054 1257.13,686.054 1257.69,686.054 1258.25,686.054 1258.81,686.054 1259.36,686.054 1259.92,686.054 1260.48,686.054 1261.04,686.054 1261.6,686.054 1262.16,686.054 1262.72,686.054 1263.28,686.054 1263.84,686.054 1264.4,686.054 1264.96,686.054 1265.52,686.054 1266.08,686.054 1266.63,686.054 1267.19,686.054 1267.75,686.054 1268.31,686.054 1268.87,686.054 1269.43,686.054 1269.99,686.054 1270.55,686.054 1271.11,686.054 1271.67,686.054 1272.23,686.054 1272.79,686.054 1273.35,686.054 1273.91,686.054 1274.46,686.054 1275.02,686.054 1275.58,686.054 1276.14,686.054 1276.7,686.054 1277.26,686.054 1277.82,686.054 1278.38,686.054 1278.94,686.054 1279.5,686.054 1280.06,686.054 1280.62,686.054 1281.18,686.054 1281.73,686.054 1282.29,686.054 1282.85,686.054 1283.41,686.054 1283.97,686.054 1284.53,686.054 1285.09,686.054 1285.65,686.054 1286.21,686.054 1286.77,686.054 1287.33,686.054 1287.89,686.054 1288.45,686.054 1289,686.054 1289.56,686.054 1290.12,686.054 1290.68,686.054 1291.24,686.054 1291.8,686.054 1292.36,686.054 1292.92,686.054 1293.48,686.054 1294.04,686.054 1294.6,686.054 1295.16,686.054 1295.72,686.054 1296.28,686.054 1296.83,686.054 1297.39,686.054 1297.95,686.054 1298.51,686.054 1299.07,686.054 1299.63,686.054 1300.19,686.054 1300.75,686.054 1301.31,686.054 1301.87,686.054 1302.43,686.054 1302.99,686.054 1303.55,686.054 1304.1,686.054 1304.66,686.054 1305.22,686.054 1305.78,686.054 1306.34,686.054 1306.9,686.054 1307.46,686.054 1308.02,686.054 1308.58,686.054 1309.14,686.054 1309.7,686.054 1310.26,686.054 1310.82,686.054 1311.38,686.054 1311.93,686.054 1312.49,686.054 1313.05,686.054 1313.61,686.054 1314.17,686.054 1314.73,686.054 1315.29,686.054 1315.85,686.054 1316.41,686.054 1316.97,686.054 1317.53,686.054 1318.09,686.054 1318.65,686.054 1319.2,686.054 1319.76,686.054 1320.32,686.054 1320.88,686.054 1321.44,686.054 1322,686.054 1322.56,686.054 1323.12,686.054 1323.68,686.054 1324.24,686.054 1324.8,686.054 1325.36,686.054 1325.92,686.054 1326.47,686.054 1327.03,686.054 1327.59,686.054 1328.15,686.054 1328.71,686.054 1329.27,686.054 1329.83,686.054 1330.39,686.054 1330.95,686.054 1331.51,686.054 1332.07,686.054 1332.63,686.054 1333.19,686.054 1333.75,686.054 1334.3,686.054 1334.86,686.054 1335.42,686.054 1335.98,686.054 1336.54,686.054 1337.1,686.054 1337.66,686.054 1338.22,686.054 1338.78,686.054 1339.34,686.054 1339.9,686.054 1340.46,686.054 1341.02,686.054 1341.57,686.054 1342.13,686.054 1342.69,686.054 1343.25,686.054 1343.81,686.054 1344.37,686.054 1344.93,686.054 1345.49,686.054 1346.05,686.054 1346.61,686.054 1347.17,686.054 1347.73,686.054 1348.29,686.054 1348.84,686.054 1349.4,686.054 1349.96,686.054 1350.52,686.054 1351.08,686.054 1351.64,686.054 1352.2,686.054 1352.76,686.054 1353.32,686.054 1353.88,686.054 1354.44,686.054 1355,686.054 1355.56,686.054 1356.12,686.054 1356.67,686.054 1357.23,686.054 1357.79,686.054 1358.35,686.054 1358.91,686.054 1359.47,686.054 1360.03,686.054 1360.59,686.054 1361.15,686.054 1361.71,686.054 1362.27,686.054 1362.83,686.054 1363.39,686.054 1363.94,686.054 1364.5,686.054 1365.06,686.054 1365.62,686.054 1366.18,686.054 1366.74,686.054 1367.3,686.054 1367.86,686.054 1368.42,686.054 1368.98,686.054 1369.54,686.054 1370.1,686.054 1370.66,686.054 1371.21,686.054 1371.77,686.054 1372.33,686.054 1372.89,686.054 1373.45,686.054 1374.01,686.054 1374.57,686.054 1375.13,686.054 1375.69,686.054 1376.25,686.054 1376.81,686.054 1377.37,686.054 1377.93,686.054 1378.49,686.054 1379.04,686.054 1379.6,686.054 1380.16,686.054 1380.72,686.054 1381.28,686.054 1381.84,686.054 1382.4,686.054 1382.96,686.054 1383.52,686.054 1384.08,686.054 1384.64,686.054 1385.2,686.054 1385.76,686.054 1386.31,686.054 1386.87,686.054 1387.43,686.054 1387.99,686.054 1388.55,686.054 1389.11,686.054 1389.67,686.054 1390.23,686.054 1390.79,686.054 1391.35,686.054 1391.91,686.054 1392.47,686.054 1393.03,686.054 1393.58,686.054 1394.14,686.054 1394.7,686.054 1395.26,686.054 1395.82,686.054 1396.38,686.054 1396.94,686.054 1397.5,686.054 1398.06,686.054 1398.62,686.054 1399.18,686.054 1399.74,686.054 1400.3,686.054 1400.86,686.054 1401.41,686.054 1401.97,686.054 1402.53,686.054 1403.09,686.054 1403.65,686.054 1404.21,686.054 1404.77,686.054 1405.33,686.054 1405.89,686.054 1406.45,686.054 1407.01,686.054 1407.57,686.054 1408.13,686.054 1408.68,686.054 1409.24,686.054 1409.8,686.054 1410.36,686.054 1410.92,686.054 1411.48,686.054 1412.04,686.054 1412.6,686.054 1413.16,686.054 1413.72,686.054 1414.28,686.054 1414.84,686.054 1415.4,686.054 1415.95,686.054 1416.51,686.054 1417.07,686.054 1417.63,686.054 1418.19,686.054 1418.75,686.054 1419.31,686.054 1419.87,686.054 1420.43,686.054 1420.99,686.054 1421.55,686.054 1422.11,686.054 1422.67,686.054 1423.23,686.054 1423.78,686.054 1424.34,686.054 1424.9,686.054 1425.46,686.054 1426.02,686.054 1426.58,686.054 1427.14,686.054 1427.7,686.054 1428.26,686.054 1428.82,686.054 1429.38,686.054 1429.94,686.054 1430.5,686.054 1431.05,686.054 1431.61,686.054 1432.17,686.054 1432.73,686.054 1433.29,686.054 1433.85,686.054 1434.41,686.054 1434.97,686.054 1435.53,686.054 1436.09,686.054 1436.65,686.054 1437.21,686.054 1437.77,686.054 1438.33,686.054 1438.88,686.054 1439.44,686.054 1440,686.054 1440.56,686.054 1441.12,686.054 1441.68,686.054 1442.24,686.054 1442.8,686.054 1443.36,686.054 1443.92,686.054 1444.48,686.054 1445.04,686.054 1445.6,686.054 1446.15,686.054 1446.71,686.054 1447.27,686.054 1447.83,686.054 1448.39,686.054 1448.95,686.054 1449.51,686.054 1450.07,686.054 1450.63,686.054 1451.19,686.054 1451.75,686.054 1452.31,686.054 1452.87,686.054 1453.42,686.054 1453.98,686.054 1454.54,686.054 1455.1,686.054 1455.66,686.054 1456.22,686.054 1456.78,686.054 1457.34,686.054 1457.9,686.054 1458.46,686.054 1459.02,686.054 1459.58,686.054 1460.14,686.054 1460.7,686.054 1461.25,686.054 1461.81,686.054 1462.37,686.054 1462.93,686.054 1463.49,686.054 1464.05,686.054 1464.61,686.054 1465.17,686.054 1465.73,686.054 1466.29,686.054 1466.85,686.054 1467.41,686.054 1467.97,686.054 1468.52,686.054 1469.08,686.054 1469.64,686.054 1470.2,686.054 1470.76,686.054 1471.32,686.054 1471.88,686.054 1472.44,686.054 1473,686.054 1473.56,686.054 1474.12,686.054 1474.68,686.054 1475.24,686.054 1475.79,686.054 1476.35,686.054 1476.91,686.054 1477.47,686.054 1478.03,686.054 1478.59,686.054 1479.15,686.054 1479.71,686.054 1480.27,686.054 1480.83,686.054 1481.39,686.054 1481.95,686.054 1482.51,686.054 1483.07,686.054 1483.62,686.054 1484.18,686.054 1484.74,686.054 1485.3,686.054 1485.86,686.054 1486.42,686.054 1486.98,686.054 1487.54,686.054 1488.1,686.054 1488.66,686.054 1489.22,686.054 1489.78,686.054 1490.34,686.054 1490.89,686.054 1491.45,686.054 1492.01,686.054 1492.57,686.054 1493.13,686.054 1493.69,686.054 1494.25,686.054 1494.81,686.054 1495.37,686.054 1495.93,686.054 1496.49,686.054 1497.05,686.054 1497.61,686.054 1498.16,686.054 1498.72,686.054 1499.28,686.054 1499.84,686.054 1500.4,686.054 1500.96,686.054 1501.52,686.054 1502.08,686.054 1502.64,686.054 1503.2,686.054 1503.76,686.054 1504.32,686.054 1504.88,686.054 1505.44,686.054 1505.99,686.054 1506.55,686.054 1507.11,686.054 1507.67,686.054 1508.23,686.054 1508.79,686.054 1509.35,686.054 1509.91,686.054 1510.47,686.054 1511.03,686.054 1511.59,686.054 1512.15,686.054 1512.71,686.054 1513.26,686.054 1513.82,686.054 1514.38,686.054 1514.94,686.054 1515.5,686.054 1516.06,686.054 1516.62,686.054 1517.18,686.054 1517.74,686.054 1518.3,686.054 1518.86,686.054 1519.42,686.054 1519.98,686.054 1520.53,686.054 1521.09,686.054 1521.65,686.054 1522.21,686.054 1522.77,686.054 1523.33,686.054 1523.89,686.054 1524.45,686.054 1525.01,686.054 1525.57,686.054 1526.13,686.054 1526.69,686.054 1527.25,686.054 1527.81,686.054 1528.36,686.054 1528.92,686.054 1529.48,686.054 1530.04,686.054 1530.6,686.054 1531.16,686.054 1531.72,686.054 1532.28,686.054 1532.84,686.054 1533.4,686.054 1533.96,686.054 1534.52,686.054 1535.08,686.054 1535.63,686.054 1536.19,686.054 1536.75,686.054 1537.31,686.054 1537.87,686.054 1538.43,686.054 1538.99,686.054 1539.55,686.054 1540.11,686.054 1540.67,686.054 1541.23,686.054 1541.79,686.054 1542.35,686.054 1542.9,686.054 1543.46,686.054 1544.02,686.054 1544.58,686.054 1545.14,686.054 1545.7,686.054 1546.26,686.054 1546.82,686.054 1547.38,686.054 1547.94,686.054 1548.5,686.054 1549.06,686.054 1549.62,686.054 1550.18,686.054 1550.73,686.054 1551.29,686.054 1551.85,686.054 1552.41,686.054 1552.97,686.054 1553.53,686.054 1554.09,686.054 1554.65,686.054 1555.21,686.054 1555.77,686.054 1556.33,686.054 1556.89,686.054 1557.45,686.054 1558,686.054 1558.56,686.054 1559.12,686.054 1559.68,686.054 1560.24,686.054 1560.8,686.054 1561.36,686.054 1561.92,686.054 1562.48,686.054 1563.04,686.054 1563.6,686.054 1564.16,686.054 1564.72,686.054 1565.28,686.054 1565.83,686.054 1566.39,686.054 1566.95,686.054 1567.51,686.054 1568.07,686.054 1568.63,686.054 1569.19,686.054 1569.75,686.054 1570.31,686.054 1570.87,686.054 1571.43,686.054 1571.99,686.054 1572.55,686.054 1573.1,686.054 1573.66,686.054 1574.22,686.054 1574.78,686.054 1575.34,686.054 1575.9,686.054 1576.46,686.054 1577.02,686.054 1577.58,686.054 1578.14,686.054 1578.7,686.054 1579.26,686.054 1579.82,686.054 1580.37,686.054 1580.93,686.054 1581.49,686.054 1582.05,686.054 1582.61,686.054 1583.17,686.054 1583.73,686.054 1584.29,686.054 1584.85,686.054 1585.41,686.054 1585.97,686.054 1586.53,686.054 1587.09,686.054 1587.65,686.054 1588.2,686.054 1588.76,686.054 1589.32,686.054 1589.88,686.054 1590.44,686.054 1591,686.054 1591.56,686.054 1592.12,686.054 1592.68,686.054 1593.24,686.054 1593.8,686.054 1594.36,686.054 1594.92,686.054 1595.47,686.054 1596.03,686.054 1596.59,686.054 1597.15,686.054 1597.71,686.054 1598.27,686.054 1598.83,686.054 1599.39,686.054 1599.95,686.054 1600.51,686.054 1601.07,686.054 1601.63,686.054 1602.19,686.054 1602.74,686.054 1603.3,686.054 1603.86,686.054 1604.42,686.054 1604.98,686.054 1605.54,686.054 1606.1,686.054 1606.66,686.054 1607.22,686.054 1607.78,686.054 1608.34,686.054 1608.9,686.054 1609.46,686.054 1610.02,686.054 1610.57,686.054 1611.13,686.054 1611.69,686.054 1612.25,686.054 1612.81,686.054 1613.37,686.054 1613.93,686.054 1614.49,686.054 1615.05,686.054 1615.61,686.054 1616.17,686.054 1616.73,686.054 1617.29,686.054 1617.84,686.054 1618.4,686.054 1618.96,686.054 1619.52,686.054 1620.08,686.054 1620.64,686.054 1621.2,686.054 1621.76,686.054 1622.32,686.054 1622.88,686.054 1623.44,686.054 1624,686.054 1624.56,686.054 1625.11,686.054 1625.67,686.054 1626.23,686.054 1626.79,686.054 1627.35,686.054 1627.91,686.054 1628.47,686.054 1629.03,686.054 1629.59,686.054 1630.15,686.054 1630.71,686.054 1631.27,686.054 1631.83,686.054 1632.39,686.054 1632.94,686.054 1633.5,686.054 1634.06,686.054 1634.62,686.054 1635.18,686.054 1635.74,686.054 1636.3,686.054 1636.86,686.054 1637.42,686.054 1637.98,686.054 1638.54,686.054 1639.1,686.054 1639.66,686.054 1640.21,686.054 1640.77,686.054 1641.33,686.054 1641.89,686.054 1642.45,686.054 1643.01,686.054 1643.57,686.054 1644.13,686.054 1644.69,686.054 1645.25,686.054 1645.81,686.054 1646.37,686.054 1646.93,686.054 1647.48,686.054 1648.04,686.054 1648.6,686.054 1649.16,686.054 1649.72,686.054 1650.28,686.054 1650.84,686.054 1651.4,686.054 1651.96,686.054 1652.52,686.054 1653.08,686.054 1653.64,686.054 1654.2,686.054 1654.76,686.054 1655.31,686.054 1655.87,686.054 1656.43,686.054 1656.99,686.054 1657.55,686.054 1658.11,686.054 1658.67,686.054 1659.23,686.054 1659.79,686.054 1660.35,686.054 1660.91,686.054 1661.47,686.054 1662.03,686.054 1662.58,686.054 1663.14,686.054 1663.7,686.054 1664.26,686.054 1664.82,686.054 1665.38,686.054 1665.94,686.054 1666.5,686.054 1667.06,686.054 1667.62,686.054 1668.18,686.054 1668.74,686.054 1669.3,686.054 1669.85,686.054 1670.41,686.054 1670.97,686.054 1671.53,686.054 1672.09,686.054 1672.65,686.054 1673.21,686.054 1673.77,686.054 1674.33,686.054 1674.89,686.054 1675.45,686.054 1676.01,686.054 1676.57,686.054 1677.13,686.054 1677.68,686.054 1678.24,686.054 1678.8,686.054 1679.36,686.054 1679.92,686.054 1680.48,686.054 1681.04,686.054 1681.6,686.054 1682.16,686.054 1682.72,686.054 1683.28,686.054 1683.84,686.054 1684.4,686.054 1684.95,686.054 1685.51,686.054 1686.07,686.054 1686.63,686.054 1687.19,686.054 1687.75,686.054 1688.31,686.054 1688.87,686.054 1689.43,686.054 1689.99,686.054 1690.55,686.054 1691.11,686.054 1691.67,686.054 1692.23,686.054 1692.78,686.054 1693.34,686.054 1693.9,686.054 1694.46,686.054 1695.02,686.054 1695.58,686.054 1696.14,686.054 1696.7,686.054 1697.26,686.054 1697.82,686.054 1698.38,686.054 1698.94,686.054 1699.5,686.054 1700.05,686.054 1700.61,686.054 1701.17,686.054 1701.73,686.054 1702.29,686.054 1702.85,686.054 1703.41,686.054 1703.97,686.054 1704.53,686.054 1705.09,686.054 1705.65,686.054 1706.21,686.054 1706.77,686.054 1707.32,686.054 1707.88,686.054 1708.44,686.054 1709,686.054 1709.56,686.054 1710.12,686.054 1710.68,686.054 1711.24,686.054 1711.8,686.054 1712.36,686.054 1712.92,686.054 1713.48,686.054 1714.04,686.054 1714.6,686.054 1715.15,686.054 1715.71,686.054 1716.27,686.054 1716.83,686.054 1717.39,686.054 1717.95,686.054 1718.51,686.054 1719.07,686.054 1719.63,686.054 1720.19,686.054 1720.75,686.054 1721.31,686.054 1721.87,686.054 1722.42,686.054 1722.98,686.054 1723.54,686.054 1724.1,686.054 1724.66,686.054 1725.22,686.054 1725.78,686.054 1726.34,686.054 1726.9,686.054 1727.46,686.054 1728.02,686.054 1728.58,686.054 1729.14,686.054 1729.69,686.054 1730.25,686.054 1730.81,686.054 1731.37,686.054 1731.93,686.054 1732.49,686.054 1733.05,686.054 1733.61,686.054 1734.17,686.054 1734.73,686.054 1735.29,686.054 1735.85,686.054 1736.41,686.054 1736.97,686.054 1737.52,686.054 1738.08,686.054 1738.64,686.054 1739.2,686.054 1739.76,686.054 1740.32,686.054 1740.88,686.054 1741.44,686.054 1742,686.054 1742.56,686.054 1743.12,686.054 1743.68,686.054 1744.24,686.054 1744.79,686.054 1745.35,686.054 1745.91,686.054 1746.47,686.054 1747.03,686.054 1747.59,686.054 1748.15,686.054 1748.71,686.054 1749.27,686.054 1749.83,686.054 1750.39,686.054 1750.95,686.054 1751.51,686.054 1752.06,686.054 1752.62,686.054 1753.18,686.054 1753.74,686.054 1754.3,686.054 1754.86,686.054 1755.42,686.054 1755.98,686.054 1756.54,686.054 1757.1,686.054 1757.66,686.054 1758.22,686.054 1758.78,686.054 1759.34,686.054 1759.89,686.054 1760.45,686.054 1761.01,686.054 1761.57,686.054 1762.13,686.054 1762.69,686.054 1763.25,686.054 1763.81,686.054 1764.37,686.054 1764.93,686.054 1765.49,686.054 1766.05,686.054 1766.61,686.054 1767.16,686.054 1767.72,686.054 1768.28,686.054 1768.84,686.054 1769.4,686.054 1769.96,686.054 1770.52,686.054 1771.08,686.054 1771.64,686.054 1772.2,686.054 1772.76,686.054 1773.32,686.054 1773.88,686.054 1774.43,686.054 1774.99,686.054 1775.55,686.054 1776.11,686.054 1776.67,686.054 1777.23,686.054 1777.79,686.054 1778.35,686.054 1778.91,686.054 1779.47,686.054 1780.03,686.054 1780.59,686.054 1781.15,686.054 1781.71,686.054 1782.26,686.054 1782.82,686.054 1783.38,686.054 1783.94,686.054 1784.5,686.054 1785.06,686.054 1785.62,686.054 1786.18,686.054 1786.74,686.054 1787.3,686.054 1787.86,686.054 1788.42,686.054 1788.98,686.054 1789.53,686.054 1790.09,686.054 1790.65,686.054 1791.21,686.054 1791.77,686.054 1792.33,686.054 1792.89,686.054 1793.45,686.054 1794.01,686.054 1794.57,686.054 1795.13,686.054 1795.69,686.054 1796.25,686.054 1796.8,686.054 1797.36,686.054 1797.92,686.054 1798.48,686.054 1799.04,686.054 1799.6,686.054 1800.16,686.054 1800.72,686.054 1801.28,686.054 1801.84,686.054 1802.4,686.054 1802.96,686.054 1803.52,686.054 1804.08,686.054 1804.63,686.054 1805.19,686.054 1805.75,686.054 1806.31,686.054 1806.87,686.054 1807.43,686.054 1807.99,686.054 1808.55,686.054 1809.11,686.054 1809.67,686.054 1810.23,686.054 1810.79,686.054 1811.35,686.054 1811.9,686.054 1812.46,686.054 1813.02,686.054 1813.58,686.054 1814.14,686.054 1814.7,686.054 1815.26,686.054 1815.82,686.054 1816.38,686.054 1816.94,686.054 1817.5,686.054 1818.06,686.054 1818.62,686.054 1819.18,686.054 1819.73,686.054 1820.29,686.054 1820.85,686.054 1821.41,686.054 1821.97,686.054 1822.53,686.054 1823.09,686.054 1823.65,686.054 1824.21,686.054 1824.77,686.054 1825.33,686.054 1825.89,686.054 1826.45,686.054 1827,686.054 1827.56,686.054 1828.12,686.054 1828.68,686.054 1829.24,686.054 1829.8,686.054 1830.36,686.054 1830.92,686.054 1831.48,686.054 1832.04,686.054 1832.6,686.054 1833.16,686.054 1833.72,686.054 1834.27,686.054 1834.83,686.054 1835.39,686.054 1835.95,686.054 1836.51,686.054 1837.07,686.054 1837.63,686.054 1838.19,686.054 \"/>\n<path clip-path=\"url(#clip693)\" d=\"M720.247 684.282 L720.806 684.282 L721.365 684.282 L721.924 684.282 L722.484 684.282 L723.043 684.282 L723.602 684.282 L724.161 684.282 L724.721 684.282 L725.28 684.282 L725.839 684.282 L726.398 684.282 L726.958 684.282 L727.517 684.282 L728.076 684.282 L728.635 684.282 L729.195 684.282 L729.754 684.282 L730.313 684.282 L730.872 684.282 L731.432 684.282 L731.991 684.282 L732.55 684.282 L733.109 684.282 L733.669 684.282 L734.228 684.282 L734.787 684.282 L735.346 684.282 L735.906 684.282 L736.465 684.282 L737.024 684.282 L737.583 684.282 L738.143 684.282 L738.702 684.282 L739.261 684.282 L739.82 684.282 L740.38 684.282 L740.939 684.282 L741.498 684.282 L742.057 684.282 L742.617 684.282 L743.176 684.282 L743.735 684.282 L744.294 684.282 L744.854 684.282 L745.413 684.282 L745.972 684.282 L746.531 684.282 L747.091 684.282 L747.65 684.282 L748.209 684.282 L748.768 684.282 L749.328 684.282 L749.887 684.282 L750.446 684.282 L751.005 684.282 L751.565 684.282 L752.124 684.282 L752.683 684.282 L753.242 684.282 L753.802 684.282 L754.361 684.282 L754.92 684.282 L755.479 684.282 L756.039 684.282 L756.598 684.282 L757.157 684.282 L757.716 684.282 L758.276 684.282 L758.835 684.282 L759.394 684.282 L759.953 684.282 L760.513 684.282 L761.072 684.282 L761.631 684.282 L762.19 684.282 L762.75 684.282 L763.309 684.282 L763.868 684.282 L764.427 684.282 L764.987 684.282 L765.546 684.282 L766.105 684.282 L766.664 684.282 L767.224 684.282 L767.783 684.282 L768.342 684.282 L768.901 684.282 L769.461 684.282 L770.02 684.282 L770.579 684.282 L771.138 684.282 L771.698 684.282 L772.257 684.282 L772.816 684.282 L773.375 684.282 L773.935 684.282 L774.494 684.282 L775.053 684.282 L775.612 684.282 L776.172 684.282 L776.731 684.282 L777.29 684.282 L777.849 684.282 L778.409 684.282 L778.968 684.282 L779.527 684.282 L780.086 684.282 L780.646 684.282 L781.205 684.282 L781.764 684.282 L782.323 684.282 L782.883 684.282 L783.442 684.282 L784.001 684.282 L784.56 684.282 L785.12 684.282 L785.679 684.282 L786.238 684.282 L786.797 684.282 L787.357 684.282 L787.916 684.282 L788.475 684.282 L789.034 684.282 L789.594 684.282 L790.153 684.282 L790.712 684.282 L791.271 684.282 L791.831 684.282 L792.39 684.282 L792.949 684.282 L793.508 684.282 L794.068 684.282 L794.627 684.282 L795.186 684.282 L795.745 684.282 L796.305 684.282 L796.864 684.282 L797.423 684.282 L797.982 684.282 L798.542 684.282 L799.101 684.282 L799.66 684.282 L800.219 684.282 L800.779 684.282 L801.338 684.282 L801.897 684.282 L802.456 684.282 L803.016 684.282 L803.575 684.282 L804.134 684.282 L804.693 684.282 L805.253 684.282 L805.812 684.282 L806.371 684.282 L806.931 684.282 L807.49 684.282 L808.049 684.282 L808.608 684.282 L809.168 684.282 L809.727 684.282 L810.286 684.282 L810.845 684.282 L811.405 684.282 L811.964 684.282 L812.523 684.282 L813.082 684.282 L813.642 684.282 L814.201 684.282 L814.76 684.282 L815.319 684.282 L815.879 684.282 L816.438 684.282 L816.997 684.282 L817.556 684.282 L818.116 684.282 L818.675 684.282 L819.234 684.282 L819.793 684.282 L820.353 684.282 L820.912 684.282 L821.471 684.282 L822.03 684.282 L822.59 684.282 L823.149 684.282 L823.708 684.282 L824.267 684.282 L824.827 684.282 L825.386 684.282 L825.945 684.282 L826.504 684.282 L827.064 684.282 L827.623 684.282 L828.182 684.282 L828.741 684.282 L829.301 684.282 L829.86 684.282 L830.419 684.282 L830.978 684.282 L831.538 684.282 L832.097 684.282 L832.656 684.282 L833.215 684.282 L833.775 684.282 L834.334 684.282 L834.893 684.282 L835.452 684.282 L836.012 684.282 L836.571 684.282 L837.13 684.282 L837.689 684.282 L838.249 684.282 L838.808 684.282 L839.367 684.282 L839.926 684.282 L840.486 684.282 L841.045 684.282 L841.604 684.282 L842.163 684.282 L842.723 684.282 L843.282 684.282 L843.841 684.282 L844.4 684.282 L844.96 684.282 L845.519 684.282 L846.078 684.282 L846.637 684.282 L847.197 684.282 L847.756 684.282 L848.315 684.282 L848.874 684.282 L849.434 684.282 L849.993 684.282 L850.552 684.282 L851.111 684.282 L851.671 684.282 L852.23 684.282 L852.789 684.282 L853.348 684.282 L853.908 684.282 L854.467 684.282 L855.026 684.282 L855.585 684.282 L856.145 684.282 L856.704 684.282 L857.263 684.282 L857.822 684.282 L858.382 684.282 L858.941 684.282 L859.5 684.282 L860.059 684.282 L860.619 684.282 L861.178 684.282 L861.737 684.282 L862.296 684.282 L862.856 684.282 L863.415 684.282 L863.974 684.282 L864.533 684.282 L865.093 684.282 L865.652 684.282 L866.211 684.282 L866.77 684.282 L867.33 684.282 L867.889 684.282 L868.448 684.282 L869.007 684.282 L869.567 684.282 L870.126 684.282 L870.685 684.282 L871.244 684.282 L871.804 684.282 L872.363 684.282 L872.922 684.282 L873.481 684.282 L874.041 684.282 L874.6 684.282 L875.159 684.282 L875.718 684.282 L876.278 684.282 L876.837 684.282 L877.396 684.282 L877.955 684.282 L878.515 684.282 L879.074 684.282 L879.633 684.282 L880.192 684.282 L880.752 684.282 L881.311 684.282 L881.87 684.282 L882.429 684.282 L882.989 684.282 L883.548 684.282 L884.107 684.282 L884.666 684.282 L885.226 684.282 L885.785 684.282 L886.344 684.282 L886.903 684.282 L887.463 684.282 L888.022 684.282 L888.581 684.282 L889.14 684.282 L889.7 684.282 L890.259 684.282 L890.818 684.282 L891.377 684.282 L891.937 684.282 L892.496 684.282 L893.055 684.282 L893.614 684.282 L894.174 684.282 L894.733 684.282 L895.292 684.282 L895.851 684.282 L896.411 684.282 L896.97 684.282 L897.529 684.282 L898.088 684.282 L898.648 684.282 L899.207 684.282 L899.766 684.282 L900.325 684.282 L900.885 684.282 L901.444 684.282 L902.003 684.282 L902.562 684.282 L903.122 684.282 L903.681 684.282 L904.24 684.282 L904.799 684.282 L905.359 684.282 L905.918 684.282 L906.477 684.282 L907.036 684.282 L907.596 684.282 L908.155 684.282 L908.714 684.282 L909.273 684.282 L909.833 684.282 L910.392 684.282 L910.951 684.282 L911.51 684.282 L912.07 684.282 L912.629 684.282 L913.188 684.282 L913.747 684.282 L914.307 684.282 L914.866 684.282 L915.425 684.282 L915.984 684.282 L916.544 684.282 L917.103 684.282 L917.662 684.282 L918.221 684.282 L918.781 684.282 L919.34 684.282 L919.899 684.282 L920.458 684.282 L921.018 684.282 L921.577 684.282 L922.136 684.282 L922.695 684.282 L923.255 684.282 L923.814 684.282 L924.373 684.282 L924.932 684.282 L925.492 684.282 L926.051 684.282 L926.61 684.282 L927.169 684.282 L927.729 684.282 L928.288 684.282 L928.847 684.282 L929.406 684.282 L929.966 684.282 L930.525 684.282 L931.084 684.282 L931.644 684.282 L932.203 684.282 L932.762 684.282 L933.321 684.282 L933.881 684.282 L934.44 684.282 L934.999 684.282 L935.558 684.282 L936.118 684.282 L936.677 684.282 L937.236 684.282 L937.795 684.282 L938.355 684.282 L938.914 684.282 L939.473 684.282 L940.032 684.282 L940.592 684.282 L941.151 684.282 L941.71 684.282 L942.269 684.282 L942.829 684.282 L943.388 684.282 L943.947 684.282 L944.506 684.282 L945.066 684.282 L945.625 684.282 L946.184 684.282 L946.743 684.282 L947.303 684.282 L947.862 684.282 L948.421 684.282 L948.98 684.282 L949.54 684.282 L950.099 684.282 L950.658 684.282 L951.217 684.282 L951.777 684.282 L952.336 684.282 L952.895 684.282 L953.454 684.282 L954.014 684.282 L954.573 684.282 L955.132 684.282 L955.691 684.282 L956.251 684.282 L956.81 684.282 L957.369 684.282 L957.928 684.282 L958.488 684.282 L959.047 684.282 L959.606 684.282 L960.165 684.282 L960.725 684.282 L961.284 684.282 L961.843 684.282 L962.402 684.282 L962.962 684.282 L963.521 684.282 L964.08 684.282 L964.639 684.282 L965.199 684.282 L965.758 684.282 L966.317 684.282 L966.876 684.282 L967.436 684.282 L967.995 684.282 L968.554 684.282 L969.113 684.282 L969.673 684.282 L970.232 684.282 L970.791 684.282 L971.35 684.282 L971.91 684.282 L972.469 684.282 L973.028 684.282 L973.587 684.282 L974.147 684.282 L974.706 684.282 L975.265 684.282 L975.824 684.282 L976.384 684.282 L976.943 684.282 L977.502 684.282 L978.061 684.282 L978.621 684.282 L979.18 684.282 L979.739 684.282 L980.298 684.282 L980.858 684.282 L981.417 684.282 L981.976 684.282 L982.535 684.282 L983.095 684.282 L983.654 684.282 L984.213 684.282 L984.772 684.282 L985.332 684.282 L985.891 684.282 L986.45 684.282 L987.009 684.282 L987.569 684.282 L988.128 684.282 L988.687 684.282 L989.246 684.282 L989.806 684.282 L990.365 684.282 L990.924 684.282 L991.483 684.282 L992.043 684.282 L992.602 684.282 L993.161 684.282 L993.72 684.282 L994.28 684.282 L994.839 684.282 L995.398 684.282 L995.957 684.282 L996.517 684.282 L997.076 684.282 L997.635 684.282 L998.194 684.282 L998.754 684.282 L999.313 684.282 L999.872 684.282 L1000.43 684.282 L1000.99 684.282 L1001.55 684.282 L1002.11 684.282 L1002.67 684.282 L1003.23 684.282 L1003.79 684.282 L1004.35 684.282 L1004.91 684.282 L1005.46 684.282 L1006.02 684.282 L1006.58 684.282 L1007.14 684.282 L1007.7 684.282 L1008.26 684.282 L1008.82 684.282 L1009.38 684.282 L1009.94 684.282 L1010.5 684.282 L1011.06 684.282 L1011.62 684.282 L1012.18 684.282 L1012.73 684.282 L1013.29 684.282 L1013.85 684.282 L1014.41 684.282 L1014.97 684.282 L1015.53 684.282 L1016.09 684.282 L1016.65 684.282 L1017.21 684.282 L1017.77 684.282 L1018.33 684.282 L1018.89 684.282 L1019.45 684.282 L1020.01 684.282 L1020.56 684.282 L1021.12 684.282 L1021.68 684.282 L1022.24 684.282 L1022.8 684.282 L1023.36 684.282 L1023.92 684.282 L1024.48 684.282 L1025.04 684.282 L1025.6 684.282 L1026.16 684.282 L1026.72 684.282 L1027.28 684.282 L1027.83 684.282 L1028.39 684.282 L1028.95 684.282 L1029.51 684.282 L1030.07 684.282 L1030.63 684.282 L1031.19 684.282 L1031.75 684.282 L1032.31 684.282 L1032.87 684.282 L1033.43 684.282 L1033.99 684.282 L1034.55 684.282 L1035.1 684.282 L1035.66 684.282 L1036.22 684.282 L1036.78 684.282 L1037.34 684.282 L1037.9 684.282 L1038.46 684.282 L1039.02 684.282 L1039.58 684.282 L1040.14 684.282 L1040.7 684.282 L1041.26 684.282 L1041.82 684.282 L1042.38 684.282 L1042.93 684.282 L1043.49 684.282 L1044.05 684.282 L1044.61 684.282 L1045.17 684.282 L1045.73 684.282 L1046.29 684.282 L1046.85 684.282 L1047.41 684.282 L1047.97 684.282 L1048.53 684.282 L1049.09 684.282 L1049.65 684.282 L1050.2 684.282 L1050.76 684.282 L1051.32 684.282 L1051.88 684.282 L1052.44 684.282 L1053 684.282 L1053.56 684.282 L1054.12 684.282 L1054.68 684.282 L1055.24 684.282 L1055.8 684.282 L1056.36 684.282 L1056.92 684.282 L1057.48 684.282 L1058.03 684.282 L1058.59 684.282 L1059.15 684.282 L1059.71 684.282 L1060.27 684.282 L1060.83 684.282 L1061.39 684.282 L1061.95 684.282 L1062.51 684.282 L1063.07 684.282 L1063.63 684.282 L1064.19 684.282 L1064.75 684.282 L1065.3 684.282 L1065.86 684.282 L1066.42 684.282 L1066.98 684.282 L1067.54 684.282 L1068.1 684.282 L1068.66 684.282 L1069.22 684.282 L1069.78 684.282 L1070.34 684.282 L1070.9 684.282 L1071.46 684.282 L1072.02 684.282 L1072.57 684.282 L1073.13 684.282 L1073.69 684.282 L1074.25 684.282 L1074.81 684.282 L1075.37 684.282 L1075.93 684.282 L1076.49 684.282 L1077.05 684.282 L1077.61 684.282 L1078.17 684.282 L1078.73 684.282 L1079.29 684.282 L1079.85 684.282 L1080.4 684.282 L1080.96 684.282 L1081.52 684.282 L1082.08 684.282 L1082.64 684.282 L1083.2 684.282 L1083.76 684.282 L1084.32 684.282 L1084.88 684.282 L1085.44 684.282 L1086 684.282 L1086.56 684.282 L1087.12 684.282 L1087.67 684.282 L1088.23 684.282 L1088.79 684.282 L1089.35 684.282 L1089.91 684.282 L1090.47 684.282 L1091.03 684.282 L1091.59 684.282 L1092.15 684.282 L1092.71 684.282 L1093.27 684.282 L1093.83 684.282 L1094.39 684.282 L1094.94 684.282 L1095.5 684.282 L1096.06 684.282 L1096.62 684.282 L1097.18 684.282 L1097.74 684.282 L1098.3 684.282 L1098.86 684.282 L1099.42 684.282 L1099.98 684.282 L1100.54 684.282 L1101.1 684.282 L1101.66 684.282 L1102.22 684.282 L1102.77 684.282 L1103.33 684.282 L1103.89 684.282 L1104.45 684.282 L1105.01 684.282 L1105.57 684.282 L1106.13 684.282 L1106.69 684.282 L1107.25 684.282 L1107.81 684.282 L1108.37 684.282 L1108.93 684.282 L1109.49 684.282 L1110.04 684.282 L1110.6 684.282 L1111.16 684.282 L1111.72 684.282 L1112.28 684.282 L1112.84 684.282 L1113.4 684.282 L1113.96 684.282 L1114.52 684.282 L1115.08 684.282 L1115.64 684.282 L1116.2 684.282 L1116.76 684.282 L1117.31 684.282 L1117.87 684.282 L1118.43 684.282 L1118.99 684.282 L1119.55 684.282 L1120.11 684.282 L1120.67 684.282 L1121.23 684.282 L1121.79 684.282 L1122.35 684.282 L1122.91 684.282 L1123.47 684.282 L1124.03 684.282 L1124.59 684.282 L1125.14 684.282 L1125.7 684.282 L1126.26 684.282 L1126.82 684.282 L1127.38 684.282 L1127.94 684.282 L1128.5 684.282 L1129.06 684.282 L1129.62 684.282 L1130.18 684.282 L1130.74 684.282 L1131.3 684.282 L1131.86 684.282 L1132.41 684.282 L1132.97 684.282 L1133.53 684.282 L1134.09 684.282 L1134.65 684.282 L1135.21 684.282 L1135.77 684.282 L1136.33 684.282 L1136.89 684.282 L1137.45 684.282 L1138.01 684.282 L1138.57 684.282 L1139.13 684.282 L1139.68 684.282 L1140.24 684.282 L1140.8 684.282 L1141.36 684.282 L1141.92 684.282 L1142.48 684.282 L1143.04 684.282 L1143.6 684.282 L1144.16 684.282 L1144.72 684.282 L1145.28 684.282 L1145.84 684.282 L1146.4 684.282 L1146.96 684.282 L1147.51 684.282 L1148.07 684.282 L1148.63 684.282 L1149.19 684.282 L1149.75 684.282 L1150.31 684.282 L1150.87 684.282 L1151.43 684.282 L1151.99 684.282 L1152.55 684.282 L1153.11 684.282 L1153.67 684.282 L1154.23 684.282 L1154.78 684.282 L1155.34 684.282 L1155.9 684.282 L1156.46 684.282 L1157.02 684.282 L1157.58 684.282 L1158.14 684.282 L1158.7 684.282 L1159.26 684.282 L1159.82 684.282 L1160.38 684.282 L1160.94 684.282 L1161.5 684.282 L1162.05 684.282 L1162.61 684.282 L1163.17 684.282 L1163.73 684.282 L1164.29 684.282 L1164.85 684.282 L1165.41 684.282 L1165.97 684.282 L1166.53 684.282 L1167.09 684.282 L1167.65 684.282 L1168.21 684.282 L1168.77 684.282 L1169.33 684.282 L1169.88 684.282 L1170.44 684.282 L1171 684.282 L1171.56 684.282 L1172.12 684.282 L1172.68 684.282 L1173.24 684.282 L1173.8 684.282 L1174.36 684.282 L1174.92 684.282 L1175.48 684.282 L1176.04 684.282 L1176.6 684.282 L1177.15 684.282 L1177.71 684.282 L1178.27 684.282 L1178.83 684.282 L1179.39 684.282 L1179.95 684.282 L1180.51 684.282 L1181.07 684.282 L1181.63 684.282 L1182.19 684.282 L1182.75 684.282 L1183.31 684.282 L1183.87 684.282 L1184.43 684.282 L1184.98 684.282 L1185.54 684.282 L1186.1 684.282 L1186.66 684.282 L1187.22 684.282 L1187.78 684.282 L1188.34 684.282 L1188.9 684.282 L1189.46 684.282 L1190.02 684.282 L1190.58 684.282 L1191.14 684.282 L1191.7 684.282 L1192.25 684.282 L1192.81 684.282 L1193.37 684.282 L1193.93 684.282 L1194.49 684.282 L1195.05 684.282 L1195.61 684.282 L1196.17 684.282 L1196.73 684.282 L1197.29 684.282 L1197.85 684.282 L1198.41 684.282 L1198.97 684.282 L1199.52 684.282 L1200.08 684.282 L1200.64 684.282 L1201.2 684.282 L1201.76 684.282 L1202.32 684.282 L1202.88 684.282 L1203.44 684.282 L1204 684.282 L1204.56 684.282 L1205.12 684.282 L1205.68 684.282 L1206.24 684.282 L1206.8 684.282 L1207.35 684.282 L1207.91 684.282 L1208.47 684.282 L1209.03 684.282 L1209.59 684.282 L1210.15 684.282 L1210.71 684.282 L1211.27 684.282 L1211.83 684.282 L1212.39 684.282 L1212.95 684.282 L1213.51 684.282 L1214.07 684.282 L1214.62 684.282 L1215.18 684.282 L1215.74 684.282 L1216.3 684.282 L1216.86 684.282 L1217.42 684.282 L1217.98 684.282 L1218.54 684.282 L1219.1 684.282 L1219.66 684.282 L1220.22 684.282 L1220.78 684.282 L1221.34 684.282 L1221.89 684.282 L1222.45 684.282 L1223.01 684.282 L1223.57 684.282 L1224.13 684.282 L1224.69 684.282 L1225.25 684.282 L1225.81 684.282 L1226.37 684.282 L1226.93 684.282 L1227.49 684.282 L1228.05 684.282 L1228.61 684.282 L1229.17 684.282 L1229.72 684.282 L1230.28 684.282 L1230.84 684.282 L1231.4 684.282 L1231.96 684.282 L1232.52 684.282 L1233.08 684.282 L1233.64 684.282 L1234.2 684.282 L1234.76 684.282 L1235.32 684.282 L1235.88 684.282 L1236.44 684.282 L1236.99 684.282 L1237.55 684.282 L1238.11 684.282 L1238.67 684.282 L1239.23 684.282 L1239.79 684.282 L1240.35 684.282 L1240.91 684.282 L1241.47 684.282 L1242.03 684.282 L1242.59 684.282 L1243.15 684.282 L1243.71 684.282 L1244.26 684.282 L1244.82 684.282 L1245.38 684.282 L1245.94 684.282 L1246.5 684.282 L1247.06 684.282 L1247.62 684.282 L1248.18 684.282 L1248.74 684.282 L1249.3 684.282 L1249.86 684.282 L1250.42 684.282 L1250.98 684.282 L1251.54 684.282 L1252.09 684.282 L1252.65 684.282 L1253.21 684.282 L1253.77 684.282 L1254.33 684.282 L1254.89 684.282 L1255.45 684.282 L1256.01 684.282 L1256.57 684.282 L1257.13 684.282 L1257.69 684.282 L1258.25 684.282 L1258.81 684.282 L1259.36 684.282 L1259.92 684.282 L1260.48 684.282 L1261.04 684.282 L1261.6 684.282 L1262.16 684.282 L1262.72 684.282 L1263.28 684.282 L1263.84 684.282 L1264.4 684.282 L1264.96 684.282 L1265.52 684.282 L1266.08 684.282 L1266.63 684.282 L1267.19 684.282 L1267.75 684.282 L1268.31 684.282 L1268.87 684.282 L1269.43 684.282 L1269.99 684.282 L1270.55 684.282 L1271.11 684.282 L1271.67 684.282 L1272.23 684.282 L1272.79 684.282 L1273.35 684.282 L1273.91 684.282 L1274.46 684.282 L1275.02 684.282 L1275.58 684.282 L1276.14 684.282 L1276.7 684.282 L1277.26 684.282 L1277.82 684.282 L1278.38 684.282 L1278.94 684.282 L1279.5 684.282 L1280.06 684.282 L1280.62 684.282 L1281.18 684.282 L1281.73 684.282 L1282.29 684.282 L1282.85 684.282 L1283.41 684.282 L1283.97 684.282 L1284.53 684.282 L1285.09 684.282 L1285.65 684.282 L1286.21 684.282 L1286.77 684.282 L1287.33 684.282 L1287.89 684.282 L1288.45 684.282 L1289 684.282 L1289.56 684.282 L1290.12 684.282 L1290.68 684.282 L1291.24 684.282 L1291.8 684.282 L1292.36 684.282 L1292.92 684.282 L1293.48 684.282 L1294.04 684.282 L1294.6 684.282 L1295.16 684.282 L1295.72 684.282 L1296.28 684.282 L1296.83 684.282 L1297.39 684.282 L1297.95 684.282 L1298.51 684.282 L1299.07 684.282 L1299.63 684.282 L1300.19 684.282 L1300.75 684.282 L1301.31 684.282 L1301.87 684.282 L1302.43 684.282 L1302.99 684.282 L1303.55 684.282 L1304.1 684.282 L1304.66 684.282 L1305.22 684.282 L1305.78 684.282 L1306.34 684.282 L1306.9 684.282 L1307.46 684.282 L1308.02 684.282 L1308.58 684.282 L1309.14 684.282 L1309.7 684.282 L1310.26 684.282 L1310.82 684.282 L1311.38 684.282 L1311.93 684.282 L1312.49 684.282 L1313.05 684.282 L1313.61 684.282 L1314.17 684.282 L1314.73 684.282 L1315.29 684.282 L1315.85 684.282 L1316.41 684.282 L1316.97 684.282 L1317.53 684.282 L1318.09 684.282 L1318.65 684.282 L1319.2 684.282 L1319.76 684.282 L1320.32 684.282 L1320.88 684.282 L1321.44 684.282 L1322 684.282 L1322.56 684.282 L1323.12 684.282 L1323.68 684.282 L1324.24 684.282 L1324.8 684.282 L1325.36 684.282 L1325.92 684.282 L1326.47 684.282 L1327.03 684.282 L1327.59 684.282 L1328.15 684.282 L1328.71 684.282 L1329.27 684.282 L1329.83 684.282 L1330.39 684.282 L1330.95 684.282 L1331.51 684.282 L1332.07 684.282 L1332.63 684.282 L1333.19 684.282 L1333.75 684.282 L1334.3 684.282 L1334.86 684.282 L1335.42 684.282 L1335.98 684.282 L1336.54 684.282 L1337.1 684.282 L1337.66 684.282 L1338.22 684.282 L1338.78 684.282 L1339.34 684.282 L1339.9 684.282 L1340.46 684.282 L1341.02 684.282 L1341.57 684.282 L1342.13 684.282 L1342.69 684.282 L1343.25 684.282 L1343.81 684.282 L1344.37 684.282 L1344.93 684.282 L1345.49 684.282 L1346.05 684.282 L1346.61 684.282 L1347.17 684.282 L1347.73 684.282 L1348.29 684.282 L1348.84 684.282 L1349.4 684.282 L1349.96 684.282 L1350.52 684.282 L1351.08 684.282 L1351.64 684.282 L1352.2 684.282 L1352.76 684.282 L1353.32 684.282 L1353.88 684.282 L1354.44 684.282 L1355 684.282 L1355.56 684.282 L1356.12 684.282 L1356.67 684.282 L1357.23 684.282 L1357.79 684.282 L1358.35 684.282 L1358.91 684.282 L1359.47 684.282 L1360.03 684.282 L1360.59 684.282 L1361.15 684.282 L1361.71 684.282 L1362.27 684.282 L1362.83 684.282 L1363.39 684.282 L1363.94 684.282 L1364.5 684.282 L1365.06 684.282 L1365.62 684.282 L1366.18 684.282 L1366.74 684.282 L1367.3 684.282 L1367.86 684.282 L1368.42 684.282 L1368.98 684.282 L1369.54 684.282 L1370.1 684.282 L1370.66 684.282 L1371.21 684.282 L1371.77 684.282 L1372.33 684.282 L1372.89 684.282 L1373.45 684.282 L1374.01 684.282 L1374.57 684.282 L1375.13 684.282 L1375.69 684.282 L1376.25 684.282 L1376.81 684.282 L1377.37 684.282 L1377.93 684.282 L1378.49 684.282 L1379.04 684.282 L1379.6 684.282 L1380.16 684.282 L1380.72 684.282 L1381.28 684.282 L1381.84 684.282 L1382.4 684.282 L1382.96 684.282 L1383.52 684.282 L1384.08 684.282 L1384.64 684.282 L1385.2 684.282 L1385.76 684.282 L1386.31 684.282 L1386.87 684.282 L1387.43 684.282 L1387.99 684.282 L1388.55 684.282 L1389.11 684.282 L1389.67 684.282 L1390.23 684.282 L1390.79 684.282 L1391.35 684.282 L1391.91 684.282 L1392.47 684.282 L1393.03 684.282 L1393.58 684.282 L1394.14 684.282 L1394.7 684.282 L1395.26 684.282 L1395.82 684.282 L1396.38 684.282 L1396.94 684.282 L1397.5 684.282 L1398.06 684.282 L1398.62 684.282 L1399.18 684.282 L1399.74 684.282 L1400.3 684.282 L1400.86 684.282 L1401.41 684.282 L1401.97 684.282 L1402.53 684.282 L1403.09 684.282 L1403.65 684.282 L1404.21 684.282 L1404.77 684.282 L1405.33 684.282 L1405.89 684.282 L1406.45 684.282 L1407.01 684.282 L1407.57 684.282 L1408.13 684.282 L1408.68 684.282 L1409.24 684.282 L1409.8 684.282 L1410.36 684.282 L1410.92 684.282 L1411.48 684.282 L1412.04 684.282 L1412.6 684.282 L1413.16 684.282 L1413.72 684.282 L1414.28 684.282 L1414.84 684.282 L1415.4 684.282 L1415.95 684.282 L1416.51 684.282 L1417.07 684.282 L1417.63 684.282 L1418.19 684.282 L1418.75 684.282 L1419.31 684.282 L1419.87 684.282 L1420.43 684.282 L1420.99 684.282 L1421.55 684.282 L1422.11 684.282 L1422.67 684.282 L1423.23 684.282 L1423.78 684.282 L1424.34 684.282 L1424.9 684.282 L1425.46 684.282 L1426.02 684.282 L1426.58 684.282 L1427.14 684.282 L1427.7 684.282 L1428.26 684.282 L1428.82 684.282 L1429.38 684.282 L1429.94 684.282 L1430.5 684.282 L1431.05 684.282 L1431.61 684.282 L1432.17 684.282 L1432.73 684.282 L1433.29 684.282 L1433.85 684.282 L1434.41 684.282 L1434.97 684.282 L1435.53 684.282 L1436.09 684.282 L1436.65 684.282 L1437.21 684.282 L1437.77 684.282 L1438.33 684.282 L1438.88 684.282 L1439.44 684.282 L1440 684.282 L1440.56 684.282 L1441.12 684.282 L1441.68 684.282 L1442.24 684.282 L1442.8 684.282 L1443.36 684.282 L1443.92 684.282 L1444.48 684.282 L1445.04 684.282 L1445.6 684.282 L1446.15 684.282 L1446.71 684.282 L1447.27 684.282 L1447.83 684.282 L1448.39 684.282 L1448.95 684.282 L1449.51 684.282 L1450.07 684.282 L1450.63 684.282 L1451.19 684.282 L1451.75 684.282 L1452.31 684.282 L1452.87 684.282 L1453.42 684.282 L1453.98 684.282 L1454.54 684.282 L1455.1 684.282 L1455.66 684.282 L1456.22 684.282 L1456.78 684.282 L1457.34 684.282 L1457.9 684.282 L1458.46 684.282 L1459.02 684.282 L1459.58 684.282 L1460.14 684.282 L1460.7 684.282 L1461.25 684.282 L1461.81 684.282 L1462.37 684.282 L1462.93 684.282 L1463.49 684.282 L1464.05 684.282 L1464.61 684.282 L1465.17 684.282 L1465.73 684.282 L1466.29 684.282 L1466.85 684.282 L1467.41 684.282 L1467.97 684.282 L1468.52 684.282 L1469.08 684.282 L1469.64 684.282 L1470.2 684.282 L1470.76 684.282 L1471.32 684.282 L1471.88 684.282 L1472.44 684.282 L1473 684.282 L1473.56 684.282 L1474.12 684.282 L1474.68 684.282 L1475.24 684.282 L1475.79 684.282 L1476.35 684.282 L1476.91 684.282 L1477.47 684.282 L1478.03 684.282 L1478.59 684.282 L1479.15 684.282 L1479.71 684.282 L1480.27 684.282 L1480.83 684.282 L1481.39 684.282 L1481.95 684.282 L1482.51 684.282 L1483.07 684.282 L1483.62 684.282 L1484.18 684.282 L1484.74 684.282 L1485.3 684.282 L1485.86 684.282 L1486.42 684.282 L1486.98 684.282 L1487.54 684.282 L1488.1 684.282 L1488.66 684.282 L1489.22 684.282 L1489.78 684.282 L1490.34 684.282 L1490.89 684.282 L1491.45 684.282 L1492.01 684.282 L1492.57 684.282 L1493.13 684.282 L1493.69 684.282 L1494.25 684.282 L1494.81 684.282 L1495.37 684.282 L1495.93 684.282 L1496.49 684.282 L1497.05 684.282 L1497.61 684.282 L1498.16 684.282 L1498.72 684.282 L1499.28 684.282 L1499.84 684.282 L1500.4 684.282 L1500.96 684.282 L1501.52 684.282 L1502.08 684.282 L1502.64 684.282 L1503.2 684.282 L1503.76 684.282 L1504.32 684.282 L1504.88 684.282 L1505.44 684.282 L1505.99 684.282 L1506.55 684.282 L1507.11 684.282 L1507.67 684.282 L1508.23 684.282 L1508.79 684.282 L1509.35 684.282 L1509.91 684.282 L1510.47 684.282 L1511.03 684.282 L1511.59 684.282 L1512.15 684.282 L1512.71 684.282 L1513.26 684.282 L1513.82 684.282 L1514.38 684.282 L1514.94 684.282 L1515.5 684.282 L1516.06 684.282 L1516.62 684.282 L1517.18 684.282 L1517.74 684.282 L1518.3 684.282 L1518.86 684.282 L1519.42 684.282 L1519.98 684.282 L1520.53 684.282 L1521.09 684.282 L1521.65 684.282 L1522.21 684.282 L1522.77 684.282 L1523.33 684.282 L1523.89 684.282 L1524.45 684.282 L1525.01 684.282 L1525.57 684.282 L1526.13 684.282 L1526.69 684.282 L1527.25 684.282 L1527.81 684.282 L1528.36 684.282 L1528.92 684.282 L1529.48 684.282 L1530.04 684.282 L1530.6 684.282 L1531.16 684.282 L1531.72 684.282 L1532.28 684.282 L1532.84 684.282 L1533.4 684.282 L1533.96 684.282 L1534.52 684.282 L1535.08 684.282 L1535.63 684.282 L1536.19 684.282 L1536.75 684.282 L1537.31 684.282 L1537.87 684.282 L1538.43 684.282 L1538.99 684.282 L1539.55 684.282 L1540.11 684.282 L1540.67 684.282 L1541.23 684.282 L1541.79 684.282 L1542.35 684.282 L1542.9 684.282 L1543.46 684.282 L1544.02 684.282 L1544.58 684.282 L1545.14 684.282 L1545.7 684.282 L1546.26 684.282 L1546.82 684.282 L1547.38 684.282 L1547.94 684.282 L1548.5 684.282 L1549.06 684.282 L1549.62 684.282 L1550.18 684.282 L1550.73 684.282 L1551.29 684.282 L1551.85 684.282 L1552.41 684.282 L1552.97 684.282 L1553.53 684.282 L1554.09 684.282 L1554.65 684.282 L1555.21 684.282 L1555.77 684.282 L1556.33 684.282 L1556.89 684.282 L1557.45 684.282 L1558 684.282 L1558.56 684.282 L1559.12 684.282 L1559.68 684.282 L1560.24 684.282 L1560.8 684.282 L1561.36 684.282 L1561.92 684.282 L1562.48 684.282 L1563.04 684.282 L1563.6 684.282 L1564.16 684.282 L1564.72 684.282 L1565.28 684.282 L1565.83 684.282 L1566.39 684.282 L1566.95 684.282 L1567.51 684.282 L1568.07 684.282 L1568.63 684.282 L1569.19 684.282 L1569.75 684.282 L1570.31 684.282 L1570.87 684.282 L1571.43 684.282 L1571.99 684.282 L1572.55 684.282 L1573.1 684.282 L1573.66 684.282 L1574.22 684.282 L1574.78 684.282 L1575.34 684.282 L1575.9 684.282 L1576.46 684.282 L1577.02 684.282 L1577.58 684.282 L1578.14 684.282 L1578.7 684.282 L1579.26 684.282 L1579.82 684.282 L1580.37 684.282 L1580.93 684.282 L1581.49 684.282 L1582.05 684.282 L1582.61 684.282 L1583.17 684.282 L1583.73 684.282 L1584.29 684.282 L1584.85 684.282 L1585.41 684.282 L1585.97 684.282 L1586.53 684.282 L1587.09 684.282 L1587.65 684.282 L1588.2 684.282 L1588.76 684.282 L1589.32 684.282 L1589.88 684.282 L1590.44 684.282 L1591 684.282 L1591.56 684.282 L1592.12 684.282 L1592.68 684.282 L1593.24 684.282 L1593.8 684.282 L1594.36 684.282 L1594.92 684.282 L1595.47 684.282 L1596.03 684.282 L1596.59 684.282 L1597.15 684.282 L1597.71 684.282 L1598.27 684.282 L1598.83 684.282 L1599.39 684.282 L1599.95 684.282 L1600.51 684.282 L1601.07 684.282 L1601.63 684.282 L1602.19 684.282 L1602.74 684.282 L1603.3 684.282 L1603.86 684.282 L1604.42 684.282 L1604.98 684.282 L1605.54 684.282 L1606.1 684.282 L1606.66 684.282 L1607.22 684.282 L1607.78 684.282 L1608.34 684.282 L1608.9 684.282 L1609.46 684.282 L1610.02 684.282 L1610.57 684.282 L1611.13 684.282 L1611.69 684.282 L1612.25 684.282 L1612.81 684.282 L1613.37 684.282 L1613.93 684.282 L1614.49 684.282 L1615.05 684.282 L1615.61 684.282 L1616.17 684.282 L1616.73 684.282 L1617.29 684.282 L1617.84 684.282 L1618.4 684.282 L1618.96 684.282 L1619.52 684.282 L1620.08 684.282 L1620.64 684.282 L1621.2 684.282 L1621.76 684.282 L1622.32 684.282 L1622.88 684.282 L1623.44 684.282 L1624 684.282 L1624.56 684.282 L1625.11 684.282 L1625.67 684.282 L1626.23 684.282 L1626.79 684.282 L1627.35 684.282 L1627.91 684.282 L1628.47 684.282 L1629.03 684.282 L1629.59 684.282 L1630.15 684.282 L1630.71 684.282 L1631.27 684.282 L1631.83 684.282 L1632.39 684.282 L1632.94 684.282 L1633.5 684.282 L1634.06 684.282 L1634.62 684.282 L1635.18 684.282 L1635.74 684.282 L1636.3 684.282 L1636.86 684.282 L1637.42 684.282 L1637.98 684.282 L1638.54 684.282 L1639.1 684.282 L1639.66 684.282 L1640.21 684.282 L1640.77 684.282 L1641.33 684.282 L1641.89 684.282 L1642.45 684.282 L1643.01 684.282 L1643.57 684.282 L1644.13 684.282 L1644.69 684.282 L1645.25 684.282 L1645.81 684.282 L1646.37 684.282 L1646.93 684.282 L1647.48 684.282 L1648.04 684.282 L1648.6 684.282 L1649.16 684.282 L1649.72 684.282 L1650.28 684.282 L1650.84 684.282 L1651.4 684.282 L1651.96 684.282 L1652.52 684.282 L1653.08 684.282 L1653.64 684.282 L1654.2 684.282 L1654.76 684.282 L1655.31 684.282 L1655.87 684.282 L1656.43 684.282 L1656.99 684.282 L1657.55 684.282 L1658.11 684.282 L1658.67 684.282 L1659.23 684.282 L1659.79 684.282 L1660.35 684.282 L1660.91 684.282 L1661.47 684.282 L1662.03 684.282 L1662.58 684.282 L1663.14 684.282 L1663.7 684.282 L1664.26 684.282 L1664.82 684.282 L1665.38 684.282 L1665.94 684.282 L1666.5 684.282 L1667.06 684.282 L1667.62 684.282 L1668.18 684.282 L1668.74 684.282 L1669.3 684.282 L1669.85 684.282 L1670.41 684.282 L1670.97 684.282 L1671.53 684.282 L1672.09 684.282 L1672.65 684.282 L1673.21 684.282 L1673.77 684.282 L1674.33 684.282 L1674.89 684.282 L1675.45 684.282 L1676.01 684.282 L1676.57 684.282 L1677.13 684.282 L1677.68 684.282 L1678.24 684.282 L1678.8 684.282 L1679.36 684.282 L1679.92 684.282 L1680.48 684.282 L1681.04 684.282 L1681.6 684.282 L1682.16 684.282 L1682.72 684.282 L1683.28 684.282 L1683.84 684.282 L1684.4 684.282 L1684.95 684.282 L1685.51 684.282 L1686.07 684.282 L1686.63 684.282 L1687.19 684.282 L1687.75 684.282 L1688.31 684.282 L1688.87 684.282 L1689.43 684.282 L1689.99 684.282 L1690.55 684.282 L1691.11 684.282 L1691.67 684.282 L1692.23 684.282 L1692.78 684.282 L1693.34 684.282 L1693.9 684.282 L1694.46 684.282 L1695.02 684.282 L1695.58 684.282 L1696.14 684.282 L1696.7 684.282 L1697.26 684.282 L1697.82 684.282 L1698.38 684.282 L1698.94 684.282 L1699.5 684.282 L1700.05 684.282 L1700.61 684.282 L1701.17 684.282 L1701.73 684.282 L1702.29 684.282 L1702.85 684.282 L1703.41 684.282 L1703.97 684.282 L1704.53 684.282 L1705.09 684.282 L1705.65 684.282 L1706.21 684.282 L1706.77 684.282 L1707.32 684.282 L1707.88 684.282 L1708.44 684.282 L1709 684.282 L1709.56 684.282 L1710.12 684.282 L1710.68 684.282 L1711.24 684.282 L1711.8 684.282 L1712.36 684.282 L1712.92 684.282 L1713.48 684.282 L1714.04 684.282 L1714.6 684.282 L1715.15 684.282 L1715.71 684.282 L1716.27 684.282 L1716.83 684.282 L1717.39 684.282 L1717.95 684.282 L1718.51 684.282 L1719.07 684.282 L1719.63 684.282 L1720.19 684.282 L1720.75 684.282 L1721.31 684.282 L1721.87 684.282 L1722.42 684.282 L1722.98 684.282 L1723.54 684.282 L1724.1 684.282 L1724.66 684.282 L1725.22 684.282 L1725.78 684.282 L1726.34 684.282 L1726.9 684.282 L1727.46 684.282 L1728.02 684.282 L1728.58 684.282 L1729.14 684.282 L1729.69 684.282 L1730.25 684.282 L1730.81 684.282 L1731.37 684.282 L1731.93 684.282 L1732.49 684.282 L1733.05 684.282 L1733.61 684.282 L1734.17 684.282 L1734.73 684.282 L1735.29 684.282 L1735.85 684.282 L1736.41 684.282 L1736.97 684.282 L1737.52 684.282 L1738.08 684.282 L1738.64 684.282 L1739.2 684.282 L1739.76 684.282 L1740.32 684.282 L1740.88 684.282 L1741.44 684.282 L1742 684.282 L1742.56 684.282 L1743.12 684.282 L1743.68 684.282 L1744.24 684.282 L1744.79 684.282 L1745.35 684.282 L1745.91 684.282 L1746.47 684.282 L1747.03 684.282 L1747.59 684.282 L1748.15 684.282 L1748.71 684.282 L1749.27 684.282 L1749.83 684.282 L1750.39 684.282 L1750.95 684.282 L1751.51 684.282 L1752.06 684.282 L1752.62 684.282 L1753.18 684.282 L1753.74 684.282 L1754.3 684.282 L1754.86 684.282 L1755.42 684.282 L1755.98 684.282 L1756.54 684.282 L1757.1 684.282 L1757.66 684.282 L1758.22 684.282 L1758.78 684.282 L1759.34 684.282 L1759.89 684.282 L1760.45 684.282 L1761.01 684.282 L1761.57 684.282 L1762.13 684.282 L1762.69 684.282 L1763.25 684.282 L1763.81 684.282 L1764.37 684.282 L1764.93 684.282 L1765.49 684.282 L1766.05 684.282 L1766.61 684.282 L1767.16 684.282 L1767.72 684.282 L1768.28 684.282 L1768.84 684.282 L1769.4 684.282 L1769.96 684.282 L1770.52 684.282 L1771.08 684.282 L1771.64 684.282 L1772.2 684.282 L1772.76 684.282 L1773.32 684.282 L1773.88 684.282 L1774.43 684.282 L1774.99 684.282 L1775.55 684.282 L1776.11 684.282 L1776.67 684.282 L1777.23 684.282 L1777.79 684.282 L1778.35 684.282 L1778.91 684.282 L1779.47 684.282 L1780.03 684.282 L1780.59 684.282 L1781.15 684.282 L1781.71 684.282 L1782.26 684.282 L1782.82 684.282 L1783.38 684.282 L1783.94 684.282 L1784.5 684.282 L1785.06 684.282 L1785.62 684.282 L1786.18 684.282 L1786.74 684.282 L1787.3 684.282 L1787.86 684.282 L1788.42 684.282 L1788.98 684.282 L1789.53 684.282 L1790.09 684.282 L1790.65 684.282 L1791.21 684.282 L1791.77 684.282 L1792.33 684.282 L1792.89 684.282 L1793.45 684.282 L1794.01 684.282 L1794.57 684.282 L1795.13 684.282 L1795.69 684.282 L1796.25 684.282 L1796.8 684.282 L1797.36 684.282 L1797.92 684.282 L1798.48 684.282 L1799.04 684.282 L1799.6 684.282 L1800.16 684.282 L1800.72 684.282 L1801.28 684.282 L1801.84 684.282 L1802.4 684.282 L1802.96 684.282 L1803.52 684.282 L1804.08 684.282 L1804.63 684.282 L1805.19 684.282 L1805.75 684.282 L1806.31 684.282 L1806.87 684.282 L1807.43 684.282 L1807.99 684.282 L1808.55 684.282 L1809.11 684.282 L1809.67 684.282 L1810.23 684.282 L1810.79 684.282 L1811.35 684.282 L1811.9 684.282 L1812.46 684.282 L1813.02 684.282 L1813.58 684.282 L1814.14 684.282 L1814.7 684.282 L1815.26 684.282 L1815.82 684.282 L1816.38 684.282 L1816.94 684.282 L1817.5 684.282 L1818.06 684.282 L1818.62 684.282 L1819.18 684.282 L1819.73 684.282 L1820.29 684.282 L1820.85 684.282 L1821.41 684.282 L1821.97 684.282 L1822.53 684.282 L1823.09 684.282 L1823.65 684.282 L1824.21 684.282 L1824.77 684.282 L1825.33 684.282 L1825.89 684.282 L1826.45 684.282 L1827 684.282 L1827.56 684.282 L1828.12 684.282 L1828.68 684.282 L1829.24 684.282 L1829.8 684.282 L1830.36 684.282 L1830.92 684.282 L1831.48 684.282 L1832.04 684.282 L1832.6 684.282 L1833.16 684.282 L1833.72 684.282 L1834.27 684.282 L1834.83 684.282 L1835.39 684.282 L1835.95 684.282 L1836.51 684.282 L1837.07 684.282 L1837.63 684.282 L1838.19 684.282 L1838.19 682.781 L1837.63 682.781 L1837.07 682.781 L1836.51 682.781 L1835.95 682.781 L1835.39 682.781 L1834.83 682.781 L1834.27 682.781 L1833.72 682.781 L1833.16 682.781 L1832.6 682.781 L1832.04 682.781 L1831.48 682.781 L1830.92 682.781 L1830.36 682.781 L1829.8 682.781 L1829.24 682.781 L1828.68 682.781 L1828.12 682.781 L1827.56 682.781 L1827 682.781 L1826.45 682.781 L1825.89 682.781 L1825.33 682.781 L1824.77 682.781 L1824.21 682.781 L1823.65 682.781 L1823.09 682.781 L1822.53 682.781 L1821.97 682.781 L1821.41 682.781 L1820.85 682.781 L1820.29 682.781 L1819.73 682.781 L1819.18 682.781 L1818.62 682.781 L1818.06 682.781 L1817.5 682.781 L1816.94 682.781 L1816.38 682.781 L1815.82 682.781 L1815.26 682.781 L1814.7 682.781 L1814.14 682.781 L1813.58 682.781 L1813.02 682.781 L1812.46 682.781 L1811.9 682.781 L1811.35 682.781 L1810.79 682.781 L1810.23 682.781 L1809.67 682.781 L1809.11 682.781 L1808.55 682.781 L1807.99 682.781 L1807.43 682.781 L1806.87 682.781 L1806.31 682.781 L1805.75 682.781 L1805.19 682.781 L1804.63 682.781 L1804.08 682.781 L1803.52 682.781 L1802.96 682.781 L1802.4 682.781 L1801.84 682.781 L1801.28 682.781 L1800.72 682.781 L1800.16 682.781 L1799.6 682.781 L1799.04 682.781 L1798.48 682.781 L1797.92 682.781 L1797.36 682.781 L1796.8 682.781 L1796.25 682.781 L1795.69 682.781 L1795.13 682.781 L1794.57 682.781 L1794.01 682.781 L1793.45 682.781 L1792.89 682.781 L1792.33 682.781 L1791.77 682.781 L1791.21 682.781 L1790.65 682.781 L1790.09 682.781 L1789.53 682.781 L1788.98 682.781 L1788.42 682.781 L1787.86 682.781 L1787.3 682.781 L1786.74 682.781 L1786.18 682.781 L1785.62 682.781 L1785.06 682.781 L1784.5 682.781 L1783.94 682.781 L1783.38 682.781 L1782.82 682.781 L1782.26 682.781 L1781.71 682.781 L1781.15 682.781 L1780.59 682.781 L1780.03 682.781 L1779.47 682.781 L1778.91 682.781 L1778.35 682.781 L1777.79 682.781 L1777.23 682.781 L1776.67 682.781 L1776.11 682.781 L1775.55 682.781 L1774.99 682.781 L1774.43 682.781 L1773.88 682.781 L1773.32 682.781 L1772.76 682.781 L1772.2 682.781 L1771.64 682.781 L1771.08 682.781 L1770.52 682.781 L1769.96 682.781 L1769.4 682.781 L1768.84 682.781 L1768.28 682.781 L1767.72 682.781 L1767.16 682.781 L1766.61 682.781 L1766.05 682.781 L1765.49 682.781 L1764.93 682.781 L1764.37 682.781 L1763.81 682.781 L1763.25 682.781 L1762.69 682.781 L1762.13 682.781 L1761.57 682.781 L1761.01 682.781 L1760.45 682.781 L1759.89 682.781 L1759.34 682.781 L1758.78 682.781 L1758.22 682.781 L1757.66 682.781 L1757.1 682.781 L1756.54 682.781 L1755.98 682.781 L1755.42 682.781 L1754.86 682.781 L1754.3 682.781 L1753.74 682.781 L1753.18 682.781 L1752.62 682.781 L1752.06 682.781 L1751.51 682.781 L1750.95 682.781 L1750.39 682.781 L1749.83 682.781 L1749.27 682.781 L1748.71 682.781 L1748.15 682.781 L1747.59 682.781 L1747.03 682.781 L1746.47 682.781 L1745.91 682.781 L1745.35 682.781 L1744.79 682.781 L1744.24 682.781 L1743.68 682.781 L1743.12 682.781 L1742.56 682.781 L1742 682.781 L1741.44 682.781 L1740.88 682.781 L1740.32 682.781 L1739.76 682.781 L1739.2 682.781 L1738.64 682.781 L1738.08 682.781 L1737.52 682.781 L1736.97 682.781 L1736.41 682.781 L1735.85 682.781 L1735.29 682.781 L1734.73 682.781 L1734.17 682.781 L1733.61 682.781 L1733.05 682.781 L1732.49 682.781 L1731.93 682.781 L1731.37 682.781 L1730.81 682.781 L1730.25 682.781 L1729.69 682.781 L1729.14 682.781 L1728.58 682.781 L1728.02 682.781 L1727.46 682.781 L1726.9 682.781 L1726.34 682.781 L1725.78 682.781 L1725.22 682.781 L1724.66 682.781 L1724.1 682.781 L1723.54 682.781 L1722.98 682.781 L1722.42 682.781 L1721.87 682.781 L1721.31 682.781 L1720.75 682.781 L1720.19 682.781 L1719.63 682.781 L1719.07 682.781 L1718.51 682.781 L1717.95 682.781 L1717.39 682.781 L1716.83 682.781 L1716.27 682.781 L1715.71 682.781 L1715.15 682.781 L1714.6 682.781 L1714.04 682.781 L1713.48 682.781 L1712.92 682.781 L1712.36 682.781 L1711.8 682.781 L1711.24 682.781 L1710.68 682.781 L1710.12 682.781 L1709.56 682.781 L1709 682.781 L1708.44 682.781 L1707.88 682.781 L1707.32 682.781 L1706.77 682.781 L1706.21 682.781 L1705.65 682.781 L1705.09 682.781 L1704.53 682.781 L1703.97 682.781 L1703.41 682.781 L1702.85 682.781 L1702.29 682.781 L1701.73 682.781 L1701.17 682.781 L1700.61 682.781 L1700.05 682.781 L1699.5 682.781 L1698.94 682.781 L1698.38 682.781 L1697.82 682.781 L1697.26 682.781 L1696.7 682.781 L1696.14 682.781 L1695.58 682.781 L1695.02 682.781 L1694.46 682.781 L1693.9 682.781 L1693.34 682.781 L1692.78 682.781 L1692.23 682.781 L1691.67 682.781 L1691.11 682.781 L1690.55 682.781 L1689.99 682.781 L1689.43 682.781 L1688.87 682.781 L1688.31 682.781 L1687.75 682.781 L1687.19 682.781 L1686.63 682.781 L1686.07 682.781 L1685.51 682.781 L1684.95 682.781 L1684.4 682.781 L1683.84 682.781 L1683.28 682.781 L1682.72 682.781 L1682.16 682.781 L1681.6 682.781 L1681.04 682.781 L1680.48 682.781 L1679.92 682.781 L1679.36 682.781 L1678.8 682.781 L1678.24 682.781 L1677.68 682.781 L1677.13 682.781 L1676.57 682.781 L1676.01 682.781 L1675.45 682.781 L1674.89 682.781 L1674.33 682.781 L1673.77 682.781 L1673.21 682.781 L1672.65 682.781 L1672.09 682.781 L1671.53 682.781 L1670.97 682.781 L1670.41 682.781 L1669.85 682.781 L1669.3 682.781 L1668.74 682.781 L1668.18 682.781 L1667.62 682.781 L1667.06 682.781 L1666.5 682.781 L1665.94 682.781 L1665.38 682.781 L1664.82 682.781 L1664.26 682.781 L1663.7 682.781 L1663.14 682.781 L1662.58 682.781 L1662.03 682.781 L1661.47 682.781 L1660.91 682.781 L1660.35 682.781 L1659.79 682.781 L1659.23 682.781 L1658.67 682.781 L1658.11 682.781 L1657.55 682.781 L1656.99 682.781 L1656.43 682.781 L1655.87 682.781 L1655.31 682.781 L1654.76 682.781 L1654.2 682.781 L1653.64 682.781 L1653.08 682.781 L1652.52 682.781 L1651.96 682.781 L1651.4 682.781 L1650.84 682.781 L1650.28 682.781 L1649.72 682.781 L1649.16 682.781 L1648.6 682.781 L1648.04 682.781 L1647.48 682.781 L1646.93 682.781 L1646.37 682.781 L1645.81 682.781 L1645.25 682.781 L1644.69 682.781 L1644.13 682.781 L1643.57 682.781 L1643.01 682.781 L1642.45 682.781 L1641.89 682.781 L1641.33 682.781 L1640.77 682.781 L1640.21 682.781 L1639.66 682.781 L1639.1 682.781 L1638.54 682.781 L1637.98 682.781 L1637.42 682.781 L1636.86 682.781 L1636.3 682.781 L1635.74 682.781 L1635.18 682.781 L1634.62 682.781 L1634.06 682.781 L1633.5 682.781 L1632.94 682.781 L1632.39 682.781 L1631.83 682.781 L1631.27 682.781 L1630.71 682.781 L1630.15 682.781 L1629.59 682.781 L1629.03 682.781 L1628.47 682.781 L1627.91 682.781 L1627.35 682.781 L1626.79 682.781 L1626.23 682.781 L1625.67 682.781 L1625.11 682.781 L1624.56 682.781 L1624 682.781 L1623.44 682.781 L1622.88 682.781 L1622.32 682.781 L1621.76 682.781 L1621.2 682.781 L1620.64 682.781 L1620.08 682.781 L1619.52 682.781 L1618.96 682.781 L1618.4 682.781 L1617.84 682.781 L1617.29 682.781 L1616.73 682.781 L1616.17 682.781 L1615.61 682.781 L1615.05 682.781 L1614.49 682.781 L1613.93 682.781 L1613.37 682.781 L1612.81 682.781 L1612.25 682.781 L1611.69 682.781 L1611.13 682.781 L1610.57 682.781 L1610.02 682.781 L1609.46 682.781 L1608.9 682.781 L1608.34 682.781 L1607.78 682.781 L1607.22 682.781 L1606.66 682.781 L1606.1 682.781 L1605.54 682.781 L1604.98 682.781 L1604.42 682.781 L1603.86 682.781 L1603.3 682.781 L1602.74 682.781 L1602.19 682.781 L1601.63 682.781 L1601.07 682.781 L1600.51 682.781 L1599.95 682.781 L1599.39 682.781 L1598.83 682.781 L1598.27 682.781 L1597.71 682.781 L1597.15 682.781 L1596.59 682.781 L1596.03 682.781 L1595.47 682.781 L1594.92 682.781 L1594.36 682.781 L1593.8 682.781 L1593.24 682.781 L1592.68 682.781 L1592.12 682.781 L1591.56 682.781 L1591 682.781 L1590.44 682.781 L1589.88 682.781 L1589.32 682.781 L1588.76 682.781 L1588.2 682.781 L1587.65 682.781 L1587.09 682.781 L1586.53 682.781 L1585.97 682.781 L1585.41 682.781 L1584.85 682.781 L1584.29 682.781 L1583.73 682.781 L1583.17 682.781 L1582.61 682.781 L1582.05 682.781 L1581.49 682.781 L1580.93 682.781 L1580.37 682.781 L1579.82 682.781 L1579.26 682.781 L1578.7 682.781 L1578.14 682.781 L1577.58 682.781 L1577.02 682.781 L1576.46 682.781 L1575.9 682.781 L1575.34 682.781 L1574.78 682.781 L1574.22 682.781 L1573.66 682.781 L1573.1 682.781 L1572.55 682.781 L1571.99 682.781 L1571.43 682.781 L1570.87 682.781 L1570.31 682.781 L1569.75 682.781 L1569.19 682.781 L1568.63 682.781 L1568.07 682.781 L1567.51 682.781 L1566.95 682.781 L1566.39 682.781 L1565.83 682.781 L1565.28 682.781 L1564.72 682.781 L1564.16 682.781 L1563.6 682.781 L1563.04 682.781 L1562.48 682.781 L1561.92 682.781 L1561.36 682.781 L1560.8 682.781 L1560.24 682.781 L1559.68 682.781 L1559.12 682.781 L1558.56 682.781 L1558 682.781 L1557.45 682.781 L1556.89 682.781 L1556.33 682.781 L1555.77 682.781 L1555.21 682.781 L1554.65 682.781 L1554.09 682.781 L1553.53 682.781 L1552.97 682.781 L1552.41 682.781 L1551.85 682.781 L1551.29 682.781 L1550.73 682.781 L1550.18 682.781 L1549.62 682.781 L1549.06 682.781 L1548.5 682.781 L1547.94 682.781 L1547.38 682.781 L1546.82 682.781 L1546.26 682.781 L1545.7 682.781 L1545.14 682.781 L1544.58 682.781 L1544.02 682.781 L1543.46 682.781 L1542.9 682.781 L1542.35 682.781 L1541.79 682.781 L1541.23 682.781 L1540.67 682.781 L1540.11 682.781 L1539.55 682.781 L1538.99 682.781 L1538.43 682.781 L1537.87 682.781 L1537.31 682.781 L1536.75 682.781 L1536.19 682.781 L1535.63 682.781 L1535.08 682.781 L1534.52 682.781 L1533.96 682.781 L1533.4 682.781 L1532.84 682.781 L1532.28 682.781 L1531.72 682.781 L1531.16 682.781 L1530.6 682.781 L1530.04 682.781 L1529.48 682.781 L1528.92 682.781 L1528.36 682.781 L1527.81 682.781 L1527.25 682.781 L1526.69 682.781 L1526.13 682.781 L1525.57 682.781 L1525.01 682.781 L1524.45 682.781 L1523.89 682.781 L1523.33 682.781 L1522.77 682.781 L1522.21 682.781 L1521.65 682.781 L1521.09 682.781 L1520.53 682.781 L1519.98 682.781 L1519.42 682.781 L1518.86 682.781 L1518.3 682.781 L1517.74 682.781 L1517.18 682.781 L1516.62 682.781 L1516.06 682.781 L1515.5 682.781 L1514.94 682.781 L1514.38 682.781 L1513.82 682.781 L1513.26 682.781 L1512.71 682.781 L1512.15 682.781 L1511.59 682.781 L1511.03 682.781 L1510.47 682.781 L1509.91 682.781 L1509.35 682.781 L1508.79 682.781 L1508.23 682.781 L1507.67 682.781 L1507.11 682.781 L1506.55 682.781 L1505.99 682.781 L1505.44 682.781 L1504.88 682.781 L1504.32 682.781 L1503.76 682.781 L1503.2 682.781 L1502.64 682.781 L1502.08 682.781 L1501.52 682.781 L1500.96 682.781 L1500.4 682.781 L1499.84 682.781 L1499.28 682.781 L1498.72 682.781 L1498.16 682.781 L1497.61 682.781 L1497.05 682.781 L1496.49 682.781 L1495.93 682.781 L1495.37 682.781 L1494.81 682.781 L1494.25 682.781 L1493.69 682.781 L1493.13 682.781 L1492.57 682.781 L1492.01 682.781 L1491.45 682.781 L1490.89 682.781 L1490.34 682.781 L1489.78 682.781 L1489.22 682.781 L1488.66 682.781 L1488.1 682.781 L1487.54 682.781 L1486.98 682.781 L1486.42 682.781 L1485.86 682.781 L1485.3 682.781 L1484.74 682.781 L1484.18 682.781 L1483.62 682.781 L1483.07 682.781 L1482.51 682.781 L1481.95 682.781 L1481.39 682.781 L1480.83 682.781 L1480.27 682.781 L1479.71 682.781 L1479.15 682.781 L1478.59 682.781 L1478.03 682.781 L1477.47 682.781 L1476.91 682.781 L1476.35 682.781 L1475.79 682.781 L1475.24 682.781 L1474.68 682.781 L1474.12 682.781 L1473.56 682.781 L1473 682.781 L1472.44 682.781 L1471.88 682.781 L1471.32 682.781 L1470.76 682.781 L1470.2 682.781 L1469.64 682.781 L1469.08 682.781 L1468.52 682.781 L1467.97 682.781 L1467.41 682.781 L1466.85 682.781 L1466.29 682.781 L1465.73 682.781 L1465.17 682.781 L1464.61 682.781 L1464.05 682.781 L1463.49 682.781 L1462.93 682.781 L1462.37 682.781 L1461.81 682.781 L1461.25 682.781 L1460.7 682.781 L1460.14 682.781 L1459.58 682.781 L1459.02 682.781 L1458.46 682.781 L1457.9 682.781 L1457.34 682.781 L1456.78 682.781 L1456.22 682.781 L1455.66 682.781 L1455.1 682.781 L1454.54 682.781 L1453.98 682.781 L1453.42 682.781 L1452.87 682.781 L1452.31 682.781 L1451.75 682.781 L1451.19 682.781 L1450.63 682.781 L1450.07 682.781 L1449.51 682.781 L1448.95 682.781 L1448.39 682.781 L1447.83 682.781 L1447.27 682.781 L1446.71 682.781 L1446.15 682.781 L1445.6 682.781 L1445.04 682.781 L1444.48 682.781 L1443.92 682.781 L1443.36 682.781 L1442.8 682.781 L1442.24 682.781 L1441.68 682.781 L1441.12 682.781 L1440.56 682.781 L1440 682.781 L1439.44 682.781 L1438.88 682.781 L1438.33 682.781 L1437.77 682.781 L1437.21 682.781 L1436.65 682.781 L1436.09 682.781 L1435.53 682.781 L1434.97 682.781 L1434.41 682.781 L1433.85 682.781 L1433.29 682.781 L1432.73 682.781 L1432.17 682.781 L1431.61 682.781 L1431.05 682.781 L1430.5 682.781 L1429.94 682.781 L1429.38 682.781 L1428.82 682.781 L1428.26 682.781 L1427.7 682.781 L1427.14 682.781 L1426.58 682.781 L1426.02 682.781 L1425.46 682.781 L1424.9 682.781 L1424.34 682.781 L1423.78 682.781 L1423.23 682.781 L1422.67 682.781 L1422.11 682.781 L1421.55 682.781 L1420.99 682.781 L1420.43 682.781 L1419.87 682.781 L1419.31 682.781 L1418.75 682.781 L1418.19 682.781 L1417.63 682.781 L1417.07 682.781 L1416.51 682.781 L1415.95 682.781 L1415.4 682.781 L1414.84 682.781 L1414.28 682.781 L1413.72 682.781 L1413.16 682.781 L1412.6 682.781 L1412.04 682.781 L1411.48 682.781 L1410.92 682.781 L1410.36 682.781 L1409.8 682.781 L1409.24 682.781 L1408.68 682.781 L1408.13 682.781 L1407.57 682.781 L1407.01 682.781 L1406.45 682.781 L1405.89 682.781 L1405.33 682.781 L1404.77 682.781 L1404.21 682.781 L1403.65 682.781 L1403.09 682.781 L1402.53 682.781 L1401.97 682.781 L1401.41 682.781 L1400.86 682.781 L1400.3 682.781 L1399.74 682.781 L1399.18 682.781 L1398.62 682.781 L1398.06 682.781 L1397.5 682.781 L1396.94 682.781 L1396.38 682.781 L1395.82 682.781 L1395.26 682.781 L1394.7 682.781 L1394.14 682.781 L1393.58 682.781 L1393.03 682.781 L1392.47 682.781 L1391.91 682.781 L1391.35 682.781 L1390.79 682.781 L1390.23 682.781 L1389.67 682.781 L1389.11 682.781 L1388.55 682.781 L1387.99 682.781 L1387.43 682.781 L1386.87 682.781 L1386.31 682.781 L1385.76 682.781 L1385.2 682.781 L1384.64 682.781 L1384.08 682.781 L1383.52 682.781 L1382.96 682.781 L1382.4 682.781 L1381.84 682.781 L1381.28 682.781 L1380.72 682.781 L1380.16 682.781 L1379.6 682.781 L1379.04 682.781 L1378.49 682.781 L1377.93 682.781 L1377.37 682.781 L1376.81 682.781 L1376.25 682.781 L1375.69 682.781 L1375.13 682.781 L1374.57 682.781 L1374.01 682.781 L1373.45 682.781 L1372.89 682.781 L1372.33 682.781 L1371.77 682.781 L1371.21 682.781 L1370.66 682.781 L1370.1 682.781 L1369.54 682.781 L1368.98 682.781 L1368.42 682.781 L1367.86 682.781 L1367.3 682.781 L1366.74 682.781 L1366.18 682.781 L1365.62 682.781 L1365.06 682.781 L1364.5 682.781 L1363.94 682.781 L1363.39 682.781 L1362.83 682.781 L1362.27 682.781 L1361.71 682.781 L1361.15 682.781 L1360.59 682.781 L1360.03 682.781 L1359.47 682.781 L1358.91 682.781 L1358.35 682.781 L1357.79 682.781 L1357.23 682.781 L1356.67 682.781 L1356.12 682.781 L1355.56 682.781 L1355 682.781 L1354.44 682.781 L1353.88 682.781 L1353.32 682.781 L1352.76 682.781 L1352.2 682.781 L1351.64 682.781 L1351.08 682.781 L1350.52 682.781 L1349.96 682.781 L1349.4 682.781 L1348.84 682.781 L1348.29 682.781 L1347.73 682.781 L1347.17 682.781 L1346.61 682.781 L1346.05 682.781 L1345.49 682.781 L1344.93 682.781 L1344.37 682.781 L1343.81 682.781 L1343.25 682.781 L1342.69 682.781 L1342.13 682.781 L1341.57 682.781 L1341.02 682.781 L1340.46 682.781 L1339.9 682.781 L1339.34 682.781 L1338.78 682.781 L1338.22 682.781 L1337.66 682.781 L1337.1 682.781 L1336.54 682.781 L1335.98 682.781 L1335.42 682.781 L1334.86 682.781 L1334.3 682.781 L1333.75 682.781 L1333.19 682.781 L1332.63 682.781 L1332.07 682.781 L1331.51 682.781 L1330.95 682.781 L1330.39 682.781 L1329.83 682.781 L1329.27 682.781 L1328.71 682.781 L1328.15 682.781 L1327.59 682.781 L1327.03 682.781 L1326.47 682.781 L1325.92 682.781 L1325.36 682.781 L1324.8 682.781 L1324.24 682.781 L1323.68 682.781 L1323.12 682.781 L1322.56 682.781 L1322 682.781 L1321.44 682.781 L1320.88 682.781 L1320.32 682.781 L1319.76 682.781 L1319.2 682.781 L1318.65 682.781 L1318.09 682.781 L1317.53 682.781 L1316.97 682.781 L1316.41 682.781 L1315.85 682.781 L1315.29 682.781 L1314.73 682.781 L1314.17 682.781 L1313.61 682.781 L1313.05 682.781 L1312.49 682.781 L1311.93 682.781 L1311.38 682.781 L1310.82 682.781 L1310.26 682.781 L1309.7 682.781 L1309.14 682.781 L1308.58 682.781 L1308.02 682.781 L1307.46 682.781 L1306.9 682.781 L1306.34 682.781 L1305.78 682.781 L1305.22 682.781 L1304.66 682.781 L1304.1 682.781 L1303.55 682.781 L1302.99 682.781 L1302.43 682.781 L1301.87 682.781 L1301.31 682.781 L1300.75 682.781 L1300.19 682.781 L1299.63 682.781 L1299.07 682.781 L1298.51 682.781 L1297.95 682.781 L1297.39 682.781 L1296.83 682.781 L1296.28 682.781 L1295.72 682.781 L1295.16 682.781 L1294.6 682.781 L1294.04 682.781 L1293.48 682.781 L1292.92 682.781 L1292.36 682.781 L1291.8 682.781 L1291.24 682.781 L1290.68 682.781 L1290.12 682.781 L1289.56 682.781 L1289 682.781 L1288.45 682.781 L1287.89 682.781 L1287.33 682.781 L1286.77 682.781 L1286.21 682.781 L1285.65 682.781 L1285.09 682.781 L1284.53 682.781 L1283.97 682.781 L1283.41 682.781 L1282.85 682.781 L1282.29 682.781 L1281.73 682.781 L1281.18 682.781 L1280.62 682.781 L1280.06 682.781 L1279.5 682.781 L1278.94 682.781 L1278.38 682.781 L1277.82 682.781 L1277.26 682.781 L1276.7 682.781 L1276.14 682.781 L1275.58 682.781 L1275.02 682.781 L1274.46 682.781 L1273.91 682.781 L1273.35 682.781 L1272.79 682.781 L1272.23 682.781 L1271.67 682.781 L1271.11 682.781 L1270.55 682.781 L1269.99 682.781 L1269.43 682.781 L1268.87 682.781 L1268.31 682.781 L1267.75 682.781 L1267.19 682.781 L1266.63 682.781 L1266.08 682.781 L1265.52 682.781 L1264.96 682.781 L1264.4 682.781 L1263.84 682.781 L1263.28 682.781 L1262.72 682.781 L1262.16 682.781 L1261.6 682.781 L1261.04 682.781 L1260.48 682.781 L1259.92 682.781 L1259.36 682.781 L1258.81 682.781 L1258.25 682.781 L1257.69 682.781 L1257.13 682.781 L1256.57 682.781 L1256.01 682.781 L1255.45 682.781 L1254.89 682.781 L1254.33 682.781 L1253.77 682.781 L1253.21 682.781 L1252.65 682.781 L1252.09 682.781 L1251.54 682.781 L1250.98 682.781 L1250.42 682.781 L1249.86 682.781 L1249.3 682.781 L1248.74 682.781 L1248.18 682.781 L1247.62 682.781 L1247.06 682.781 L1246.5 682.781 L1245.94 682.781 L1245.38 682.781 L1244.82 682.781 L1244.26 682.781 L1243.71 682.781 L1243.15 682.781 L1242.59 682.781 L1242.03 682.781 L1241.47 682.781 L1240.91 682.781 L1240.35 682.781 L1239.79 682.781 L1239.23 682.781 L1238.67 682.781 L1238.11 682.781 L1237.55 682.781 L1236.99 682.781 L1236.44 682.781 L1235.88 682.781 L1235.32 682.781 L1234.76 682.781 L1234.2 682.781 L1233.64 682.781 L1233.08 682.781 L1232.52 682.781 L1231.96 682.781 L1231.4 682.781 L1230.84 682.781 L1230.28 682.781 L1229.72 682.781 L1229.17 682.781 L1228.61 682.781 L1228.05 682.781 L1227.49 682.781 L1226.93 682.781 L1226.37 682.781 L1225.81 682.781 L1225.25 682.781 L1224.69 682.781 L1224.13 682.781 L1223.57 682.781 L1223.01 682.781 L1222.45 682.781 L1221.89 682.781 L1221.34 682.781 L1220.78 682.781 L1220.22 682.781 L1219.66 682.781 L1219.1 682.781 L1218.54 682.781 L1217.98 682.781 L1217.42 682.781 L1216.86 682.781 L1216.3 682.781 L1215.74 682.781 L1215.18 682.781 L1214.62 682.781 L1214.07 682.781 L1213.51 682.781 L1212.95 682.781 L1212.39 682.781 L1211.83 682.781 L1211.27 682.781 L1210.71 682.781 L1210.15 682.781 L1209.59 682.781 L1209.03 682.781 L1208.47 682.781 L1207.91 682.781 L1207.35 682.781 L1206.8 682.781 L1206.24 682.781 L1205.68 682.781 L1205.12 682.781 L1204.56 682.781 L1204 682.781 L1203.44 682.781 L1202.88 682.781 L1202.32 682.781 L1201.76 682.781 L1201.2 682.781 L1200.64 682.781 L1200.08 682.781 L1199.52 682.781 L1198.97 682.781 L1198.41 682.781 L1197.85 682.781 L1197.29 682.781 L1196.73 682.781 L1196.17 682.781 L1195.61 682.781 L1195.05 682.781 L1194.49 682.781 L1193.93 682.781 L1193.37 682.781 L1192.81 682.781 L1192.25 682.781 L1191.7 682.781 L1191.14 682.781 L1190.58 682.781 L1190.02 682.781 L1189.46 682.781 L1188.9 682.781 L1188.34 682.781 L1187.78 682.781 L1187.22 682.781 L1186.66 682.781 L1186.1 682.781 L1185.54 682.781 L1184.98 682.781 L1184.43 682.781 L1183.87 682.781 L1183.31 682.781 L1182.75 682.781 L1182.19 682.781 L1181.63 682.781 L1181.07 682.781 L1180.51 682.781 L1179.95 682.781 L1179.39 682.781 L1178.83 682.781 L1178.27 682.781 L1177.71 682.781 L1177.15 682.781 L1176.6 682.781 L1176.04 682.781 L1175.48 682.781 L1174.92 682.781 L1174.36 682.781 L1173.8 682.781 L1173.24 682.781 L1172.68 682.781 L1172.12 682.781 L1171.56 682.781 L1171 682.781 L1170.44 682.781 L1169.88 682.781 L1169.33 682.781 L1168.77 682.781 L1168.21 682.781 L1167.65 682.781 L1167.09 682.781 L1166.53 682.781 L1165.97 682.781 L1165.41 682.781 L1164.85 682.781 L1164.29 682.781 L1163.73 682.781 L1163.17 682.781 L1162.61 682.781 L1162.05 682.781 L1161.5 682.781 L1160.94 682.781 L1160.38 682.781 L1159.82 682.781 L1159.26 682.781 L1158.7 682.781 L1158.14 682.781 L1157.58 682.781 L1157.02 682.781 L1156.46 682.781 L1155.9 682.781 L1155.34 682.781 L1154.78 682.781 L1154.23 682.781 L1153.67 682.781 L1153.11 682.781 L1152.55 682.781 L1151.99 682.781 L1151.43 682.781 L1150.87 682.781 L1150.31 682.781 L1149.75 682.781 L1149.19 682.781 L1148.63 682.781 L1148.07 682.781 L1147.51 682.781 L1146.96 682.781 L1146.4 682.781 L1145.84 682.781 L1145.28 682.781 L1144.72 682.781 L1144.16 682.781 L1143.6 682.781 L1143.04 682.781 L1142.48 682.781 L1141.92 682.781 L1141.36 682.781 L1140.8 682.781 L1140.24 682.781 L1139.68 682.781 L1139.13 682.781 L1138.57 682.781 L1138.01 682.781 L1137.45 682.781 L1136.89 682.781 L1136.33 682.781 L1135.77 682.781 L1135.21 682.781 L1134.65 682.781 L1134.09 682.781 L1133.53 682.781 L1132.97 682.781 L1132.41 682.781 L1131.86 682.781 L1131.3 682.781 L1130.74 682.781 L1130.18 682.781 L1129.62 682.781 L1129.06 682.781 L1128.5 682.781 L1127.94 682.781 L1127.38 682.781 L1126.82 682.781 L1126.26 682.781 L1125.7 682.781 L1125.14 682.781 L1124.59 682.781 L1124.03 682.781 L1123.47 682.781 L1122.91 682.781 L1122.35 682.781 L1121.79 682.781 L1121.23 682.781 L1120.67 682.781 L1120.11 682.781 L1119.55 682.781 L1118.99 682.781 L1118.43 682.781 L1117.87 682.781 L1117.31 682.781 L1116.76 682.781 L1116.2 682.781 L1115.64 682.781 L1115.08 682.781 L1114.52 682.781 L1113.96 682.781 L1113.4 682.781 L1112.84 682.781 L1112.28 682.781 L1111.72 682.781 L1111.16 682.781 L1110.6 682.781 L1110.04 682.781 L1109.49 682.781 L1108.93 682.781 L1108.37 682.781 L1107.81 682.781 L1107.25 682.781 L1106.69 682.781 L1106.13 682.781 L1105.57 682.781 L1105.01 682.781 L1104.45 682.781 L1103.89 682.781 L1103.33 682.781 L1102.77 682.781 L1102.22 682.781 L1101.66 682.781 L1101.1 682.781 L1100.54 682.781 L1099.98 682.781 L1099.42 682.781 L1098.86 682.781 L1098.3 682.781 L1097.74 682.781 L1097.18 682.781 L1096.62 682.781 L1096.06 682.781 L1095.5 682.781 L1094.94 682.781 L1094.39 682.781 L1093.83 682.781 L1093.27 682.781 L1092.71 682.781 L1092.15 682.781 L1091.59 682.781 L1091.03 682.781 L1090.47 682.781 L1089.91 682.781 L1089.35 682.781 L1088.79 682.781 L1088.23 682.781 L1087.67 682.781 L1087.12 682.781 L1086.56 682.781 L1086 682.781 L1085.44 682.781 L1084.88 682.781 L1084.32 682.781 L1083.76 682.781 L1083.2 682.781 L1082.64 682.781 L1082.08 682.781 L1081.52 682.781 L1080.96 682.781 L1080.4 682.781 L1079.85 682.781 L1079.29 682.781 L1078.73 682.781 L1078.17 682.781 L1077.61 682.781 L1077.05 682.781 L1076.49 682.781 L1075.93 682.781 L1075.37 682.781 L1074.81 682.781 L1074.25 682.781 L1073.69 682.781 L1073.13 682.781 L1072.57 682.781 L1072.02 682.781 L1071.46 682.781 L1070.9 682.781 L1070.34 682.781 L1069.78 682.781 L1069.22 682.781 L1068.66 682.781 L1068.1 682.781 L1067.54 682.781 L1066.98 682.781 L1066.42 682.781 L1065.86 682.781 L1065.3 682.781 L1064.75 682.781 L1064.19 682.781 L1063.63 682.781 L1063.07 682.781 L1062.51 682.781 L1061.95 682.781 L1061.39 682.781 L1060.83 682.781 L1060.27 682.781 L1059.71 682.781 L1059.15 682.781 L1058.59 682.781 L1058.03 682.781 L1057.48 682.781 L1056.92 682.781 L1056.36 682.781 L1055.8 682.781 L1055.24 682.781 L1054.68 682.781 L1054.12 682.781 L1053.56 682.781 L1053 682.781 L1052.44 682.781 L1051.88 682.781 L1051.32 682.781 L1050.76 682.781 L1050.2 682.781 L1049.65 682.781 L1049.09 682.781 L1048.53 682.781 L1047.97 682.781 L1047.41 682.781 L1046.85 682.781 L1046.29 682.781 L1045.73 682.781 L1045.17 682.781 L1044.61 682.781 L1044.05 682.781 L1043.49 682.781 L1042.93 682.781 L1042.38 682.781 L1041.82 682.781 L1041.26 682.781 L1040.7 682.781 L1040.14 682.781 L1039.58 682.781 L1039.02 682.781 L1038.46 682.781 L1037.9 682.781 L1037.34 682.781 L1036.78 682.781 L1036.22 682.781 L1035.66 682.781 L1035.1 682.781 L1034.55 682.781 L1033.99 682.781 L1033.43 682.781 L1032.87 682.781 L1032.31 682.781 L1031.75 682.781 L1031.19 682.781 L1030.63 682.781 L1030.07 682.781 L1029.51 682.781 L1028.95 682.781 L1028.39 682.781 L1027.83 682.781 L1027.28 682.781 L1026.72 682.781 L1026.16 682.781 L1025.6 682.781 L1025.04 682.781 L1024.48 682.781 L1023.92 682.781 L1023.36 682.781 L1022.8 682.781 L1022.24 682.781 L1021.68 682.781 L1021.12 682.781 L1020.56 682.781 L1020.01 682.781 L1019.45 682.781 L1018.89 682.781 L1018.33 682.781 L1017.77 682.781 L1017.21 682.781 L1016.65 682.781 L1016.09 682.781 L1015.53 682.781 L1014.97 682.781 L1014.41 682.781 L1013.85 682.781 L1013.29 682.781 L1012.73 682.781 L1012.18 682.781 L1011.62 682.781 L1011.06 682.781 L1010.5 682.781 L1009.94 682.781 L1009.38 682.781 L1008.82 682.781 L1008.26 682.781 L1007.7 682.781 L1007.14 682.781 L1006.58 682.781 L1006.02 682.781 L1005.46 682.781 L1004.91 682.781 L1004.35 682.781 L1003.79 682.781 L1003.23 682.781 L1002.67 682.781 L1002.11 682.781 L1001.55 682.781 L1000.99 682.781 L1000.43 682.781 L999.872 682.781 L999.313 682.781 L998.754 682.781 L998.194 682.781 L997.635 682.781 L997.076 682.781 L996.517 682.781 L995.957 682.781 L995.398 682.781 L994.839 682.781 L994.28 682.781 L993.72 682.781 L993.161 682.781 L992.602 682.781 L992.043 682.781 L991.483 682.781 L990.924 682.781 L990.365 682.781 L989.806 682.781 L989.246 682.781 L988.687 682.781 L988.128 682.781 L987.569 682.781 L987.009 682.781 L986.45 682.781 L985.891 682.781 L985.332 682.781 L984.772 682.781 L984.213 682.781 L983.654 682.781 L983.095 682.781 L982.535 682.781 L981.976 682.781 L981.417 682.781 L980.858 682.781 L980.298 682.781 L979.739 682.781 L979.18 682.781 L978.621 682.781 L978.061 682.781 L977.502 682.781 L976.943 682.781 L976.384 682.781 L975.824 682.781 L975.265 682.781 L974.706 682.781 L974.147 682.781 L973.587 682.781 L973.028 682.781 L972.469 682.781 L971.91 682.781 L971.35 682.781 L970.791 682.781 L970.232 682.781 L969.673 682.781 L969.113 682.781 L968.554 682.781 L967.995 682.781 L967.436 682.781 L966.876 682.781 L966.317 682.781 L965.758 682.781 L965.199 682.781 L964.639 682.781 L964.08 682.781 L963.521 682.781 L962.962 682.781 L962.402 682.781 L961.843 682.781 L961.284 682.781 L960.725 682.781 L960.165 682.781 L959.606 682.781 L959.047 682.781 L958.488 682.781 L957.928 682.781 L957.369 682.781 L956.81 682.781 L956.251 682.781 L955.691 682.781 L955.132 682.781 L954.573 682.781 L954.014 682.781 L953.454 682.781 L952.895 682.781 L952.336 682.781 L951.777 682.781 L951.217 682.781 L950.658 682.781 L950.099 682.781 L949.54 682.781 L948.98 682.781 L948.421 682.781 L947.862 682.781 L947.303 682.781 L946.743 682.781 L946.184 682.781 L945.625 682.781 L945.066 682.781 L944.506 682.781 L943.947 682.781 L943.388 682.781 L942.829 682.781 L942.269 682.781 L941.71 682.781 L941.151 682.781 L940.592 682.781 L940.032 682.781 L939.473 682.781 L938.914 682.781 L938.355 682.781 L937.795 682.781 L937.236 682.781 L936.677 682.781 L936.118 682.781 L935.558 682.781 L934.999 682.781 L934.44 682.781 L933.881 682.781 L933.321 682.781 L932.762 682.781 L932.203 682.781 L931.644 682.781 L931.084 682.781 L930.525 682.781 L929.966 682.781 L929.406 682.781 L928.847 682.781 L928.288 682.781 L927.729 682.781 L927.169 682.781 L926.61 682.781 L926.051 682.781 L925.492 682.781 L924.932 682.781 L924.373 682.781 L923.814 682.781 L923.255 682.781 L922.695 682.781 L922.136 682.781 L921.577 682.781 L921.018 682.781 L920.458 682.781 L919.899 682.781 L919.34 682.781 L918.781 682.781 L918.221 682.781 L917.662 682.781 L917.103 682.781 L916.544 682.781 L915.984 682.781 L915.425 682.781 L914.866 682.781 L914.307 682.781 L913.747 682.781 L913.188 682.781 L912.629 682.781 L912.07 682.781 L911.51 682.781 L910.951 682.781 L910.392 682.781 L909.833 682.781 L909.273 682.781 L908.714 682.781 L908.155 682.781 L907.596 682.781 L907.036 682.781 L906.477 682.781 L905.918 682.781 L905.359 682.781 L904.799 682.781 L904.24 682.781 L903.681 682.781 L903.122 682.781 L902.562 682.781 L902.003 682.781 L901.444 682.781 L900.885 682.781 L900.325 682.781 L899.766 682.781 L899.207 682.781 L898.648 682.781 L898.088 682.781 L897.529 682.781 L896.97 682.781 L896.411 682.781 L895.851 682.781 L895.292 682.781 L894.733 682.781 L894.174 682.781 L893.614 682.781 L893.055 682.781 L892.496 682.781 L891.937 682.781 L891.377 682.781 L890.818 682.781 L890.259 682.781 L889.7 682.781 L889.14 682.781 L888.581 682.781 L888.022 682.781 L887.463 682.781 L886.903 682.781 L886.344 682.781 L885.785 682.781 L885.226 682.781 L884.666 682.781 L884.107 682.781 L883.548 682.781 L882.989 682.781 L882.429 682.781 L881.87 682.781 L881.311 682.781 L880.752 682.781 L880.192 682.781 L879.633 682.781 L879.074 682.781 L878.515 682.781 L877.955 682.781 L877.396 682.781 L876.837 682.781 L876.278 682.781 L875.718 682.781 L875.159 682.781 L874.6 682.781 L874.041 682.781 L873.481 682.781 L872.922 682.781 L872.363 682.781 L871.804 682.781 L871.244 682.781 L870.685 682.781 L870.126 682.781 L869.567 682.781 L869.007 682.781 L868.448 682.781 L867.889 682.781 L867.33 682.781 L866.77 682.781 L866.211 682.781 L865.652 682.781 L865.093 682.781 L864.533 682.781 L863.974 682.781 L863.415 682.781 L862.856 682.781 L862.296 682.781 L861.737 682.781 L861.178 682.781 L860.619 682.781 L860.059 682.781 L859.5 682.781 L858.941 682.781 L858.382 682.781 L857.822 682.781 L857.263 682.781 L856.704 682.781 L856.145 682.781 L855.585 682.781 L855.026 682.781 L854.467 682.781 L853.908 682.781 L853.348 682.781 L852.789 682.781 L852.23 682.781 L851.671 682.781 L851.111 682.781 L850.552 682.781 L849.993 682.781 L849.434 682.781 L848.874 682.781 L848.315 682.781 L847.756 682.781 L847.197 682.781 L846.637 682.781 L846.078 682.781 L845.519 682.781 L844.96 682.781 L844.4 682.781 L843.841 682.781 L843.282 682.781 L842.723 682.781 L842.163 682.781 L841.604 682.781 L841.045 682.781 L840.486 682.781 L839.926 682.781 L839.367 682.781 L838.808 682.781 L838.249 682.781 L837.689 682.781 L837.13 682.781 L836.571 682.781 L836.012 682.781 L835.452 682.781 L834.893 682.781 L834.334 682.781 L833.775 682.781 L833.215 682.781 L832.656 682.781 L832.097 682.781 L831.538 682.781 L830.978 682.781 L830.419 682.781 L829.86 682.781 L829.301 682.781 L828.741 682.781 L828.182 682.781 L827.623 682.781 L827.064 682.781 L826.504 682.781 L825.945 682.781 L825.386 682.781 L824.827 682.781 L824.267 682.781 L823.708 682.781 L823.149 682.781 L822.59 682.781 L822.03 682.781 L821.471 682.781 L820.912 682.781 L820.353 682.781 L819.793 682.781 L819.234 682.781 L818.675 682.781 L818.116 682.781 L817.556 682.781 L816.997 682.781 L816.438 682.781 L815.879 682.781 L815.319 682.781 L814.76 682.781 L814.201 682.781 L813.642 682.781 L813.082 682.781 L812.523 682.781 L811.964 682.781 L811.405 682.781 L810.845 682.781 L810.286 682.781 L809.727 682.781 L809.168 682.781 L808.608 682.781 L808.049 682.781 L807.49 682.781 L806.931 682.781 L806.371 682.781 L805.812 682.781 L805.253 682.781 L804.693 682.781 L804.134 682.781 L803.575 682.781 L803.016 682.781 L802.456 682.781 L801.897 682.781 L801.338 682.781 L800.779 682.781 L800.219 682.781 L799.66 682.781 L799.101 682.781 L798.542 682.781 L797.982 682.781 L797.423 682.781 L796.864 682.781 L796.305 682.781 L795.745 682.781 L795.186 682.781 L794.627 682.781 L794.068 682.781 L793.508 682.781 L792.949 682.781 L792.39 682.781 L791.831 682.781 L791.271 682.781 L790.712 682.781 L790.153 682.781 L789.594 682.781 L789.034 682.781 L788.475 682.781 L787.916 682.781 L787.357 682.781 L786.797 682.781 L786.238 682.781 L785.679 682.781 L785.12 682.781 L784.56 682.781 L784.001 682.781 L783.442 682.781 L782.883 682.781 L782.323 682.781 L781.764 682.781 L781.205 682.781 L780.646 682.781 L780.086 682.781 L779.527 682.781 L778.968 682.781 L778.409 682.781 L777.849 682.781 L777.29 682.781 L776.731 682.781 L776.172 682.781 L775.612 682.781 L775.053 682.781 L774.494 682.781 L773.935 682.781 L773.375 682.781 L772.816 682.781 L772.257 682.781 L771.698 682.781 L771.138 682.781 L770.579 682.781 L770.02 682.781 L769.461 682.781 L768.901 682.781 L768.342 682.781 L767.783 682.781 L767.224 682.781 L766.664 682.781 L766.105 682.781 L765.546 682.781 L764.987 682.781 L764.427 682.781 L763.868 682.781 L763.309 682.781 L762.75 682.781 L762.19 682.781 L761.631 682.781 L761.072 682.781 L760.513 682.781 L759.953 682.781 L759.394 682.781 L758.835 682.781 L758.276 682.781 L757.716 682.781 L757.157 682.781 L756.598 682.781 L756.039 682.781 L755.479 682.781 L754.92 682.781 L754.361 682.781 L753.802 682.781 L753.242 682.781 L752.683 682.781 L752.124 682.781 L751.565 682.781 L751.005 682.781 L750.446 682.781 L749.887 682.781 L749.328 682.781 L748.768 682.781 L748.209 682.781 L747.65 682.781 L747.091 682.781 L746.531 682.781 L745.972 682.781 L745.413 682.781 L744.854 682.781 L744.294 682.781 L743.735 682.781 L743.176 682.781 L742.617 682.781 L742.057 682.781 L741.498 682.781 L740.939 682.781 L740.38 682.781 L739.82 682.781 L739.261 682.781 L738.702 682.781 L738.143 682.781 L737.583 682.781 L737.024 682.781 L736.465 682.781 L735.906 682.781 L735.346 682.781 L734.787 682.781 L734.228 682.781 L733.669 682.781 L733.109 682.781 L732.55 682.781 L731.991 682.781 L731.432 682.781 L730.872 682.781 L730.313 682.781 L729.754 682.781 L729.195 682.781 L728.635 682.781 L728.076 682.781 L727.517 682.781 L726.958 682.781 L726.398 682.781 L725.839 682.781 L725.28 682.781 L724.721 682.781 L724.161 682.781 L723.602 682.781 L723.043 682.781 L722.484 682.781 L721.924 682.781 L721.365 682.781 L720.806 682.781 L720.247 682.781  Z\" fill=\"#3da44d\" fill-rule=\"evenodd\" fill-opacity=\"0.5\"/>\n<polyline clip-path=\"url(#clip693)\" style=\"stroke:#3da44d; stroke-linecap:round; stroke-linejoin:round; stroke-width:4; stroke-opacity:1; fill:none\" points=\"720.247,683.528 720.806,683.528 721.365,683.528 721.924,683.528 722.484,683.528 723.043,683.528 723.602,683.528 724.161,683.528 724.721,683.528 725.28,683.528 725.839,683.528 726.398,683.528 726.958,683.528 727.517,683.528 728.076,683.528 728.635,683.528 729.195,683.528 729.754,683.528 730.313,683.528 730.872,683.528 731.432,683.528 731.991,683.528 732.55,683.528 733.109,683.528 733.669,683.528 734.228,683.528 734.787,683.528 735.346,683.528 735.906,683.528 736.465,683.528 737.024,683.528 737.583,683.528 738.143,683.528 738.702,683.528 739.261,683.528 739.82,683.528 740.38,683.528 740.939,683.528 741.498,683.528 742.057,683.528 742.617,683.528 743.176,683.528 743.735,683.528 744.294,683.528 744.854,683.528 745.413,683.528 745.972,683.528 746.531,683.528 747.091,683.528 747.65,683.528 748.209,683.528 748.768,683.528 749.328,683.528 749.887,683.528 750.446,683.528 751.005,683.528 751.565,683.528 752.124,683.528 752.683,683.528 753.242,683.528 753.802,683.528 754.361,683.528 754.92,683.528 755.479,683.528 756.039,683.528 756.598,683.528 757.157,683.528 757.716,683.528 758.276,683.528 758.835,683.528 759.394,683.528 759.953,683.528 760.513,683.528 761.072,683.528 761.631,683.528 762.19,683.528 762.75,683.528 763.309,683.528 763.868,683.528 764.427,683.528 764.987,683.528 765.546,683.528 766.105,683.528 766.664,683.528 767.224,683.528 767.783,683.528 768.342,683.528 768.901,683.528 769.461,683.528 770.02,683.528 770.579,683.528 771.138,683.528 771.698,683.528 772.257,683.528 772.816,683.528 773.375,683.528 773.935,683.528 774.494,683.528 775.053,683.528 775.612,683.528 776.172,683.528 776.731,683.528 777.29,683.528 777.849,683.528 778.409,683.528 778.968,683.528 779.527,683.528 780.086,683.528 780.646,683.528 781.205,683.528 781.764,683.528 782.323,683.528 782.883,683.528 783.442,683.528 784.001,683.528 784.56,683.528 785.12,683.528 785.679,683.528 786.238,683.528 786.797,683.528 787.357,683.528 787.916,683.528 788.475,683.528 789.034,683.528 789.594,683.528 790.153,683.528 790.712,683.528 791.271,683.528 791.831,683.528 792.39,683.528 792.949,683.528 793.508,683.528 794.068,683.528 794.627,683.528 795.186,683.528 795.745,683.528 796.305,683.528 796.864,683.528 797.423,683.528 797.982,683.528 798.542,683.528 799.101,683.528 799.66,683.528 800.219,683.528 800.779,683.528 801.338,683.528 801.897,683.528 802.456,683.528 803.016,683.528 803.575,683.528 804.134,683.528 804.693,683.528 805.253,683.528 805.812,683.528 806.371,683.528 806.931,683.528 807.49,683.528 808.049,683.528 808.608,683.528 809.168,683.528 809.727,683.528 810.286,683.528 810.845,683.528 811.405,683.528 811.964,683.528 812.523,683.528 813.082,683.528 813.642,683.528 814.201,683.528 814.76,683.528 815.319,683.528 815.879,683.528 816.438,683.528 816.997,683.528 817.556,683.528 818.116,683.528 818.675,683.528 819.234,683.528 819.793,683.528 820.353,683.528 820.912,683.528 821.471,683.528 822.03,683.528 822.59,683.528 823.149,683.528 823.708,683.528 824.267,683.528 824.827,683.528 825.386,683.528 825.945,683.528 826.504,683.528 827.064,683.528 827.623,683.528 828.182,683.528 828.741,683.528 829.301,683.528 829.86,683.528 830.419,683.528 830.978,683.528 831.538,683.528 832.097,683.528 832.656,683.528 833.215,683.528 833.775,683.528 834.334,683.528 834.893,683.528 835.452,683.528 836.012,683.528 836.571,683.528 837.13,683.528 837.689,683.528 838.249,683.528 838.808,683.528 839.367,683.528 839.926,683.528 840.486,683.528 841.045,683.528 841.604,683.528 842.163,683.528 842.723,683.528 843.282,683.528 843.841,683.528 844.4,683.528 844.96,683.528 845.519,683.528 846.078,683.528 846.637,683.528 847.197,683.528 847.756,683.528 848.315,683.528 848.874,683.528 849.434,683.528 849.993,683.528 850.552,683.528 851.111,683.528 851.671,683.528 852.23,683.528 852.789,683.528 853.348,683.528 853.908,683.528 854.467,683.528 855.026,683.528 855.585,683.528 856.145,683.528 856.704,683.528 857.263,683.528 857.822,683.528 858.382,683.528 858.941,683.528 859.5,683.528 860.059,683.528 860.619,683.528 861.178,683.528 861.737,683.528 862.296,683.528 862.856,683.528 863.415,683.528 863.974,683.528 864.533,683.528 865.093,683.528 865.652,683.528 866.211,683.528 866.77,683.528 867.33,683.528 867.889,683.528 868.448,683.528 869.007,683.528 869.567,683.528 870.126,683.528 870.685,683.528 871.244,683.528 871.804,683.528 872.363,683.528 872.922,683.528 873.481,683.528 874.041,683.528 874.6,683.528 875.159,683.528 875.718,683.528 876.278,683.528 876.837,683.528 877.396,683.528 877.955,683.528 878.515,683.528 879.074,683.528 879.633,683.528 880.192,683.528 880.752,683.528 881.311,683.528 881.87,683.528 882.429,683.528 882.989,683.528 883.548,683.528 884.107,683.528 884.666,683.528 885.226,683.528 885.785,683.528 886.344,683.528 886.903,683.528 887.463,683.528 888.022,683.528 888.581,683.528 889.14,683.528 889.7,683.528 890.259,683.528 890.818,683.528 891.377,683.528 891.937,683.528 892.496,683.528 893.055,683.528 893.614,683.528 894.174,683.528 894.733,683.528 895.292,683.528 895.851,683.528 896.411,683.528 896.97,683.528 897.529,683.528 898.088,683.528 898.648,683.528 899.207,683.528 899.766,683.528 900.325,683.528 900.885,683.528 901.444,683.528 902.003,683.528 902.562,683.528 903.122,683.528 903.681,683.528 904.24,683.528 904.799,683.528 905.359,683.528 905.918,683.528 906.477,683.528 907.036,683.528 907.596,683.528 908.155,683.528 908.714,683.528 909.273,683.528 909.833,683.528 910.392,683.528 910.951,683.528 911.51,683.528 912.07,683.528 912.629,683.528 913.188,683.528 913.747,683.528 914.307,683.528 914.866,683.528 915.425,683.528 915.984,683.528 916.544,683.528 917.103,683.528 917.662,683.528 918.221,683.528 918.781,683.528 919.34,683.528 919.899,683.528 920.458,683.528 921.018,683.528 921.577,683.528 922.136,683.528 922.695,683.528 923.255,683.528 923.814,683.528 924.373,683.528 924.932,683.528 925.492,683.528 926.051,683.528 926.61,683.528 927.169,683.528 927.729,683.528 928.288,683.528 928.847,683.528 929.406,683.528 929.966,683.528 930.525,683.528 931.084,683.528 931.644,683.528 932.203,683.528 932.762,683.528 933.321,683.528 933.881,683.528 934.44,683.528 934.999,683.528 935.558,683.528 936.118,683.528 936.677,683.528 937.236,683.528 937.795,683.528 938.355,683.528 938.914,683.528 939.473,683.528 940.032,683.528 940.592,683.528 941.151,683.528 941.71,683.528 942.269,683.528 942.829,683.528 943.388,683.528 943.947,683.528 944.506,683.528 945.066,683.528 945.625,683.528 946.184,683.528 946.743,683.528 947.303,683.528 947.862,683.528 948.421,683.528 948.98,683.528 949.54,683.528 950.099,683.528 950.658,683.528 951.217,683.528 951.777,683.528 952.336,683.528 952.895,683.528 953.454,683.528 954.014,683.528 954.573,683.528 955.132,683.528 955.691,683.528 956.251,683.528 956.81,683.528 957.369,683.528 957.928,683.528 958.488,683.528 959.047,683.528 959.606,683.528 960.165,683.528 960.725,683.528 961.284,683.528 961.843,683.528 962.402,683.528 962.962,683.528 963.521,683.528 964.08,683.528 964.639,683.528 965.199,683.528 965.758,683.528 966.317,683.528 966.876,683.528 967.436,683.528 967.995,683.528 968.554,683.528 969.113,683.528 969.673,683.528 970.232,683.528 970.791,683.528 971.35,683.528 971.91,683.528 972.469,683.528 973.028,683.528 973.587,683.528 974.147,683.528 974.706,683.528 975.265,683.528 975.824,683.528 976.384,683.528 976.943,683.528 977.502,683.528 978.061,683.528 978.621,683.528 979.18,683.528 979.739,683.528 980.298,683.528 980.858,683.528 981.417,683.528 981.976,683.528 982.535,683.528 983.095,683.528 983.654,683.528 984.213,683.528 984.772,683.528 985.332,683.528 985.891,683.528 986.45,683.528 987.009,683.528 987.569,683.528 988.128,683.528 988.687,683.528 989.246,683.528 989.806,683.528 990.365,683.528 990.924,683.528 991.483,683.528 992.043,683.528 992.602,683.528 993.161,683.528 993.72,683.528 994.28,683.528 994.839,683.528 995.398,683.528 995.957,683.528 996.517,683.528 997.076,683.528 997.635,683.528 998.194,683.528 998.754,683.528 999.313,683.528 999.872,683.528 1000.43,683.528 1000.99,683.528 1001.55,683.528 1002.11,683.528 1002.67,683.528 1003.23,683.528 1003.79,683.528 1004.35,683.528 1004.91,683.528 1005.46,683.528 1006.02,683.528 1006.58,683.528 1007.14,683.528 1007.7,683.528 1008.26,683.528 1008.82,683.528 1009.38,683.528 1009.94,683.528 1010.5,683.528 1011.06,683.528 1011.62,683.528 1012.18,683.528 1012.73,683.528 1013.29,683.528 1013.85,683.528 1014.41,683.528 1014.97,683.528 1015.53,683.528 1016.09,683.528 1016.65,683.528 1017.21,683.528 1017.77,683.528 1018.33,683.528 1018.89,683.528 1019.45,683.528 1020.01,683.528 1020.56,683.528 1021.12,683.528 1021.68,683.528 1022.24,683.528 1022.8,683.528 1023.36,683.528 1023.92,683.528 1024.48,683.528 1025.04,683.528 1025.6,683.528 1026.16,683.528 1026.72,683.528 1027.28,683.528 1027.83,683.528 1028.39,683.528 1028.95,683.528 1029.51,683.528 1030.07,683.528 1030.63,683.528 1031.19,683.528 1031.75,683.528 1032.31,683.528 1032.87,683.528 1033.43,683.528 1033.99,683.528 1034.55,683.528 1035.1,683.528 1035.66,683.528 1036.22,683.528 1036.78,683.528 1037.34,683.528 1037.9,683.528 1038.46,683.528 1039.02,683.528 1039.58,683.528 1040.14,683.528 1040.7,683.528 1041.26,683.528 1041.82,683.528 1042.38,683.528 1042.93,683.528 1043.49,683.528 1044.05,683.528 1044.61,683.528 1045.17,683.528 1045.73,683.528 1046.29,683.528 1046.85,683.528 1047.41,683.528 1047.97,683.528 1048.53,683.528 1049.09,683.528 1049.65,683.528 1050.2,683.528 1050.76,683.528 1051.32,683.528 1051.88,683.528 1052.44,683.528 1053,683.528 1053.56,683.528 1054.12,683.528 1054.68,683.528 1055.24,683.528 1055.8,683.528 1056.36,683.528 1056.92,683.528 1057.48,683.528 1058.03,683.528 1058.59,683.528 1059.15,683.528 1059.71,683.528 1060.27,683.528 1060.83,683.528 1061.39,683.528 1061.95,683.528 1062.51,683.528 1063.07,683.528 1063.63,683.528 1064.19,683.528 1064.75,683.528 1065.3,683.528 1065.86,683.528 1066.42,683.528 1066.98,683.528 1067.54,683.528 1068.1,683.528 1068.66,683.528 1069.22,683.528 1069.78,683.528 1070.34,683.528 1070.9,683.528 1071.46,683.528 1072.02,683.528 1072.57,683.528 1073.13,683.528 1073.69,683.528 1074.25,683.528 1074.81,683.528 1075.37,683.528 1075.93,683.528 1076.49,683.528 1077.05,683.528 1077.61,683.528 1078.17,683.528 1078.73,683.528 1079.29,683.528 1079.85,683.528 1080.4,683.528 1080.96,683.528 1081.52,683.528 1082.08,683.528 1082.64,683.528 1083.2,683.528 1083.76,683.528 1084.32,683.528 1084.88,683.528 1085.44,683.528 1086,683.528 1086.56,683.528 1087.12,683.528 1087.67,683.528 1088.23,683.528 1088.79,683.528 1089.35,683.528 1089.91,683.528 1090.47,683.528 1091.03,683.528 1091.59,683.528 1092.15,683.528 1092.71,683.528 1093.27,683.528 1093.83,683.528 1094.39,683.528 1094.94,683.528 1095.5,683.528 1096.06,683.528 1096.62,683.528 1097.18,683.528 1097.74,683.528 1098.3,683.528 1098.86,683.528 1099.42,683.528 1099.98,683.528 1100.54,683.528 1101.1,683.528 1101.66,683.528 1102.22,683.528 1102.77,683.528 1103.33,683.528 1103.89,683.528 1104.45,683.528 1105.01,683.528 1105.57,683.528 1106.13,683.528 1106.69,683.528 1107.25,683.528 1107.81,683.528 1108.37,683.528 1108.93,683.528 1109.49,683.528 1110.04,683.528 1110.6,683.528 1111.16,683.528 1111.72,683.528 1112.28,683.528 1112.84,683.528 1113.4,683.528 1113.96,683.528 1114.52,683.528 1115.08,683.528 1115.64,683.528 1116.2,683.528 1116.76,683.528 1117.31,683.528 1117.87,683.528 1118.43,683.528 1118.99,683.528 1119.55,683.528 1120.11,683.528 1120.67,683.528 1121.23,683.528 1121.79,683.528 1122.35,683.528 1122.91,683.528 1123.47,683.528 1124.03,683.528 1124.59,683.528 1125.14,683.528 1125.7,683.528 1126.26,683.528 1126.82,683.528 1127.38,683.528 1127.94,683.528 1128.5,683.528 1129.06,683.528 1129.62,683.528 1130.18,683.528 1130.74,683.528 1131.3,683.528 1131.86,683.528 1132.41,683.528 1132.97,683.528 1133.53,683.528 1134.09,683.528 1134.65,683.528 1135.21,683.528 1135.77,683.528 1136.33,683.528 1136.89,683.528 1137.45,683.528 1138.01,683.528 1138.57,683.528 1139.13,683.528 1139.68,683.528 1140.24,683.528 1140.8,683.528 1141.36,683.528 1141.92,683.528 1142.48,683.528 1143.04,683.528 1143.6,683.528 1144.16,683.528 1144.72,683.528 1145.28,683.528 1145.84,683.528 1146.4,683.528 1146.96,683.528 1147.51,683.528 1148.07,683.528 1148.63,683.528 1149.19,683.528 1149.75,683.528 1150.31,683.528 1150.87,683.528 1151.43,683.528 1151.99,683.528 1152.55,683.528 1153.11,683.528 1153.67,683.528 1154.23,683.528 1154.78,683.528 1155.34,683.528 1155.9,683.528 1156.46,683.528 1157.02,683.528 1157.58,683.528 1158.14,683.528 1158.7,683.528 1159.26,683.528 1159.82,683.528 1160.38,683.528 1160.94,683.528 1161.5,683.528 1162.05,683.528 1162.61,683.528 1163.17,683.528 1163.73,683.528 1164.29,683.528 1164.85,683.528 1165.41,683.528 1165.97,683.528 1166.53,683.528 1167.09,683.528 1167.65,683.528 1168.21,683.528 1168.77,683.528 1169.33,683.528 1169.88,683.528 1170.44,683.528 1171,683.528 1171.56,683.528 1172.12,683.528 1172.68,683.528 1173.24,683.528 1173.8,683.528 1174.36,683.528 1174.92,683.528 1175.48,683.528 1176.04,683.528 1176.6,683.528 1177.15,683.528 1177.71,683.528 1178.27,683.528 1178.83,683.528 1179.39,683.528 1179.95,683.528 1180.51,683.528 1181.07,683.528 1181.63,683.528 1182.19,683.528 1182.75,683.528 1183.31,683.528 1183.87,683.528 1184.43,683.528 1184.98,683.528 1185.54,683.528 1186.1,683.528 1186.66,683.528 1187.22,683.528 1187.78,683.528 1188.34,683.528 1188.9,683.528 1189.46,683.528 1190.02,683.528 1190.58,683.528 1191.14,683.528 1191.7,683.528 1192.25,683.528 1192.81,683.528 1193.37,683.528 1193.93,683.528 1194.49,683.528 1195.05,683.528 1195.61,683.528 1196.17,683.528 1196.73,683.528 1197.29,683.528 1197.85,683.528 1198.41,683.528 1198.97,683.528 1199.52,683.528 1200.08,683.528 1200.64,683.528 1201.2,683.528 1201.76,683.528 1202.32,683.528 1202.88,683.528 1203.44,683.528 1204,683.528 1204.56,683.528 1205.12,683.528 1205.68,683.528 1206.24,683.528 1206.8,683.528 1207.35,683.528 1207.91,683.528 1208.47,683.528 1209.03,683.528 1209.59,683.528 1210.15,683.528 1210.71,683.528 1211.27,683.528 1211.83,683.528 1212.39,683.528 1212.95,683.528 1213.51,683.528 1214.07,683.528 1214.62,683.528 1215.18,683.528 1215.74,683.528 1216.3,683.528 1216.86,683.528 1217.42,683.528 1217.98,683.528 1218.54,683.528 1219.1,683.528 1219.66,683.528 1220.22,683.528 1220.78,683.528 1221.34,683.528 1221.89,683.528 1222.45,683.528 1223.01,683.528 1223.57,683.528 1224.13,683.528 1224.69,683.528 1225.25,683.528 1225.81,683.528 1226.37,683.528 1226.93,683.528 1227.49,683.528 1228.05,683.528 1228.61,683.528 1229.17,683.528 1229.72,683.528 1230.28,683.528 1230.84,683.528 1231.4,683.528 1231.96,683.528 1232.52,683.528 1233.08,683.528 1233.64,683.528 1234.2,683.528 1234.76,683.528 1235.32,683.528 1235.88,683.528 1236.44,683.528 1236.99,683.528 1237.55,683.528 1238.11,683.528 1238.67,683.528 1239.23,683.528 1239.79,683.528 1240.35,683.528 1240.91,683.528 1241.47,683.528 1242.03,683.528 1242.59,683.528 1243.15,683.528 1243.71,683.528 1244.26,683.528 1244.82,683.528 1245.38,683.528 1245.94,683.528 1246.5,683.528 1247.06,683.528 1247.62,683.528 1248.18,683.528 1248.74,683.528 1249.3,683.528 1249.86,683.528 1250.42,683.528 1250.98,683.528 1251.54,683.528 1252.09,683.528 1252.65,683.528 1253.21,683.528 1253.77,683.528 1254.33,683.528 1254.89,683.528 1255.45,683.528 1256.01,683.528 1256.57,683.528 1257.13,683.528 1257.69,683.528 1258.25,683.528 1258.81,683.528 1259.36,683.528 1259.92,683.528 1260.48,683.528 1261.04,683.528 1261.6,683.528 1262.16,683.528 1262.72,683.528 1263.28,683.528 1263.84,683.528 1264.4,683.528 1264.96,683.528 1265.52,683.528 1266.08,683.528 1266.63,683.528 1267.19,683.528 1267.75,683.528 1268.31,683.528 1268.87,683.528 1269.43,683.528 1269.99,683.528 1270.55,683.528 1271.11,683.528 1271.67,683.528 1272.23,683.528 1272.79,683.528 1273.35,683.528 1273.91,683.528 1274.46,683.528 1275.02,683.528 1275.58,683.528 1276.14,683.528 1276.7,683.528 1277.26,683.528 1277.82,683.528 1278.38,683.528 1278.94,683.528 1279.5,683.528 1280.06,683.528 1280.62,683.528 1281.18,683.528 1281.73,683.528 1282.29,683.528 1282.85,683.528 1283.41,683.528 1283.97,683.528 1284.53,683.528 1285.09,683.528 1285.65,683.528 1286.21,683.528 1286.77,683.528 1287.33,683.528 1287.89,683.528 1288.45,683.528 1289,683.528 1289.56,683.528 1290.12,683.528 1290.68,683.528 1291.24,683.528 1291.8,683.528 1292.36,683.528 1292.92,683.528 1293.48,683.528 1294.04,683.528 1294.6,683.528 1295.16,683.528 1295.72,683.528 1296.28,683.528 1296.83,683.528 1297.39,683.528 1297.95,683.528 1298.51,683.528 1299.07,683.528 1299.63,683.528 1300.19,683.528 1300.75,683.528 1301.31,683.528 1301.87,683.528 1302.43,683.528 1302.99,683.528 1303.55,683.528 1304.1,683.528 1304.66,683.528 1305.22,683.528 1305.78,683.528 1306.34,683.528 1306.9,683.528 1307.46,683.528 1308.02,683.528 1308.58,683.528 1309.14,683.528 1309.7,683.528 1310.26,683.528 1310.82,683.528 1311.38,683.528 1311.93,683.528 1312.49,683.528 1313.05,683.528 1313.61,683.528 1314.17,683.528 1314.73,683.528 1315.29,683.528 1315.85,683.528 1316.41,683.528 1316.97,683.528 1317.53,683.528 1318.09,683.528 1318.65,683.528 1319.2,683.528 1319.76,683.528 1320.32,683.528 1320.88,683.528 1321.44,683.528 1322,683.528 1322.56,683.528 1323.12,683.528 1323.68,683.528 1324.24,683.528 1324.8,683.528 1325.36,683.528 1325.92,683.528 1326.47,683.528 1327.03,683.528 1327.59,683.528 1328.15,683.528 1328.71,683.528 1329.27,683.528 1329.83,683.528 1330.39,683.528 1330.95,683.528 1331.51,683.528 1332.07,683.528 1332.63,683.528 1333.19,683.528 1333.75,683.528 1334.3,683.528 1334.86,683.528 1335.42,683.528 1335.98,683.528 1336.54,683.528 1337.1,683.528 1337.66,683.528 1338.22,683.528 1338.78,683.528 1339.34,683.528 1339.9,683.528 1340.46,683.528 1341.02,683.528 1341.57,683.528 1342.13,683.528 1342.69,683.528 1343.25,683.528 1343.81,683.528 1344.37,683.528 1344.93,683.528 1345.49,683.528 1346.05,683.528 1346.61,683.528 1347.17,683.528 1347.73,683.528 1348.29,683.528 1348.84,683.528 1349.4,683.528 1349.96,683.528 1350.52,683.528 1351.08,683.528 1351.64,683.528 1352.2,683.528 1352.76,683.528 1353.32,683.528 1353.88,683.528 1354.44,683.528 1355,683.528 1355.56,683.528 1356.12,683.528 1356.67,683.528 1357.23,683.528 1357.79,683.528 1358.35,683.528 1358.91,683.528 1359.47,683.528 1360.03,683.528 1360.59,683.528 1361.15,683.528 1361.71,683.528 1362.27,683.528 1362.83,683.528 1363.39,683.528 1363.94,683.528 1364.5,683.528 1365.06,683.528 1365.62,683.528 1366.18,683.528 1366.74,683.528 1367.3,683.528 1367.86,683.528 1368.42,683.528 1368.98,683.528 1369.54,683.528 1370.1,683.528 1370.66,683.528 1371.21,683.528 1371.77,683.528 1372.33,683.528 1372.89,683.528 1373.45,683.528 1374.01,683.528 1374.57,683.528 1375.13,683.528 1375.69,683.528 1376.25,683.528 1376.81,683.528 1377.37,683.528 1377.93,683.528 1378.49,683.528 1379.04,683.528 1379.6,683.528 1380.16,683.528 1380.72,683.528 1381.28,683.528 1381.84,683.528 1382.4,683.528 1382.96,683.528 1383.52,683.528 1384.08,683.528 1384.64,683.528 1385.2,683.528 1385.76,683.528 1386.31,683.528 1386.87,683.528 1387.43,683.528 1387.99,683.528 1388.55,683.528 1389.11,683.528 1389.67,683.528 1390.23,683.528 1390.79,683.528 1391.35,683.528 1391.91,683.528 1392.47,683.528 1393.03,683.528 1393.58,683.528 1394.14,683.528 1394.7,683.528 1395.26,683.528 1395.82,683.528 1396.38,683.528 1396.94,683.528 1397.5,683.528 1398.06,683.528 1398.62,683.528 1399.18,683.528 1399.74,683.528 1400.3,683.528 1400.86,683.528 1401.41,683.528 1401.97,683.528 1402.53,683.528 1403.09,683.528 1403.65,683.528 1404.21,683.528 1404.77,683.528 1405.33,683.528 1405.89,683.528 1406.45,683.528 1407.01,683.528 1407.57,683.528 1408.13,683.528 1408.68,683.528 1409.24,683.528 1409.8,683.528 1410.36,683.528 1410.92,683.528 1411.48,683.528 1412.04,683.528 1412.6,683.528 1413.16,683.528 1413.72,683.528 1414.28,683.528 1414.84,683.528 1415.4,683.528 1415.95,683.528 1416.51,683.528 1417.07,683.528 1417.63,683.528 1418.19,683.528 1418.75,683.528 1419.31,683.528 1419.87,683.528 1420.43,683.528 1420.99,683.528 1421.55,683.528 1422.11,683.528 1422.67,683.528 1423.23,683.528 1423.78,683.528 1424.34,683.528 1424.9,683.528 1425.46,683.528 1426.02,683.528 1426.58,683.528 1427.14,683.528 1427.7,683.528 1428.26,683.528 1428.82,683.528 1429.38,683.528 1429.94,683.528 1430.5,683.528 1431.05,683.528 1431.61,683.528 1432.17,683.528 1432.73,683.528 1433.29,683.528 1433.85,683.528 1434.41,683.528 1434.97,683.528 1435.53,683.528 1436.09,683.528 1436.65,683.528 1437.21,683.528 1437.77,683.528 1438.33,683.528 1438.88,683.528 1439.44,683.528 1440,683.528 1440.56,683.528 1441.12,683.528 1441.68,683.528 1442.24,683.528 1442.8,683.528 1443.36,683.528 1443.92,683.528 1444.48,683.528 1445.04,683.528 1445.6,683.528 1446.15,683.528 1446.71,683.528 1447.27,683.528 1447.83,683.528 1448.39,683.528 1448.95,683.528 1449.51,683.528 1450.07,683.528 1450.63,683.528 1451.19,683.528 1451.75,683.528 1452.31,683.528 1452.87,683.528 1453.42,683.528 1453.98,683.528 1454.54,683.528 1455.1,683.528 1455.66,683.528 1456.22,683.528 1456.78,683.528 1457.34,683.528 1457.9,683.528 1458.46,683.528 1459.02,683.528 1459.58,683.528 1460.14,683.528 1460.7,683.528 1461.25,683.528 1461.81,683.528 1462.37,683.528 1462.93,683.528 1463.49,683.528 1464.05,683.528 1464.61,683.528 1465.17,683.528 1465.73,683.528 1466.29,683.528 1466.85,683.528 1467.41,683.528 1467.97,683.528 1468.52,683.528 1469.08,683.528 1469.64,683.528 1470.2,683.528 1470.76,683.528 1471.32,683.528 1471.88,683.528 1472.44,683.528 1473,683.528 1473.56,683.528 1474.12,683.528 1474.68,683.528 1475.24,683.528 1475.79,683.528 1476.35,683.528 1476.91,683.528 1477.47,683.528 1478.03,683.528 1478.59,683.528 1479.15,683.528 1479.71,683.528 1480.27,683.528 1480.83,683.528 1481.39,683.528 1481.95,683.528 1482.51,683.528 1483.07,683.528 1483.62,683.528 1484.18,683.528 1484.74,683.528 1485.3,683.528 1485.86,683.528 1486.42,683.528 1486.98,683.528 1487.54,683.528 1488.1,683.528 1488.66,683.528 1489.22,683.528 1489.78,683.528 1490.34,683.528 1490.89,683.528 1491.45,683.528 1492.01,683.528 1492.57,683.528 1493.13,683.528 1493.69,683.528 1494.25,683.528 1494.81,683.528 1495.37,683.528 1495.93,683.528 1496.49,683.528 1497.05,683.528 1497.61,683.528 1498.16,683.528 1498.72,683.528 1499.28,683.528 1499.84,683.528 1500.4,683.528 1500.96,683.528 1501.52,683.528 1502.08,683.528 1502.64,683.528 1503.2,683.528 1503.76,683.528 1504.32,683.528 1504.88,683.528 1505.44,683.528 1505.99,683.528 1506.55,683.528 1507.11,683.528 1507.67,683.528 1508.23,683.528 1508.79,683.528 1509.35,683.528 1509.91,683.528 1510.47,683.528 1511.03,683.528 1511.59,683.528 1512.15,683.528 1512.71,683.528 1513.26,683.528 1513.82,683.528 1514.38,683.528 1514.94,683.528 1515.5,683.528 1516.06,683.528 1516.62,683.528 1517.18,683.528 1517.74,683.528 1518.3,683.528 1518.86,683.528 1519.42,683.528 1519.98,683.528 1520.53,683.528 1521.09,683.528 1521.65,683.528 1522.21,683.528 1522.77,683.528 1523.33,683.528 1523.89,683.528 1524.45,683.528 1525.01,683.528 1525.57,683.528 1526.13,683.528 1526.69,683.528 1527.25,683.528 1527.81,683.528 1528.36,683.528 1528.92,683.528 1529.48,683.528 1530.04,683.528 1530.6,683.528 1531.16,683.528 1531.72,683.528 1532.28,683.528 1532.84,683.528 1533.4,683.528 1533.96,683.528 1534.52,683.528 1535.08,683.528 1535.63,683.528 1536.19,683.528 1536.75,683.528 1537.31,683.528 1537.87,683.528 1538.43,683.528 1538.99,683.528 1539.55,683.528 1540.11,683.528 1540.67,683.528 1541.23,683.528 1541.79,683.528 1542.35,683.528 1542.9,683.528 1543.46,683.528 1544.02,683.528 1544.58,683.528 1545.14,683.528 1545.7,683.528 1546.26,683.528 1546.82,683.528 1547.38,683.528 1547.94,683.528 1548.5,683.528 1549.06,683.528 1549.62,683.528 1550.18,683.528 1550.73,683.528 1551.29,683.528 1551.85,683.528 1552.41,683.528 1552.97,683.528 1553.53,683.528 1554.09,683.528 1554.65,683.528 1555.21,683.528 1555.77,683.528 1556.33,683.528 1556.89,683.528 1557.45,683.528 1558,683.528 1558.56,683.528 1559.12,683.528 1559.68,683.528 1560.24,683.528 1560.8,683.528 1561.36,683.528 1561.92,683.528 1562.48,683.528 1563.04,683.528 1563.6,683.528 1564.16,683.528 1564.72,683.528 1565.28,683.528 1565.83,683.528 1566.39,683.528 1566.95,683.528 1567.51,683.528 1568.07,683.528 1568.63,683.528 1569.19,683.528 1569.75,683.528 1570.31,683.528 1570.87,683.528 1571.43,683.528 1571.99,683.528 1572.55,683.528 1573.1,683.528 1573.66,683.528 1574.22,683.528 1574.78,683.528 1575.34,683.528 1575.9,683.528 1576.46,683.528 1577.02,683.528 1577.58,683.528 1578.14,683.528 1578.7,683.528 1579.26,683.528 1579.82,683.528 1580.37,683.528 1580.93,683.528 1581.49,683.528 1582.05,683.528 1582.61,683.528 1583.17,683.528 1583.73,683.528 1584.29,683.528 1584.85,683.528 1585.41,683.528 1585.97,683.528 1586.53,683.528 1587.09,683.528 1587.65,683.528 1588.2,683.528 1588.76,683.528 1589.32,683.528 1589.88,683.528 1590.44,683.528 1591,683.528 1591.56,683.528 1592.12,683.528 1592.68,683.528 1593.24,683.528 1593.8,683.528 1594.36,683.528 1594.92,683.528 1595.47,683.528 1596.03,683.528 1596.59,683.528 1597.15,683.528 1597.71,683.528 1598.27,683.528 1598.83,683.528 1599.39,683.528 1599.95,683.528 1600.51,683.528 1601.07,683.528 1601.63,683.528 1602.19,683.528 1602.74,683.528 1603.3,683.528 1603.86,683.528 1604.42,683.528 1604.98,683.528 1605.54,683.528 1606.1,683.528 1606.66,683.528 1607.22,683.528 1607.78,683.528 1608.34,683.528 1608.9,683.528 1609.46,683.528 1610.02,683.528 1610.57,683.528 1611.13,683.528 1611.69,683.528 1612.25,683.528 1612.81,683.528 1613.37,683.528 1613.93,683.528 1614.49,683.528 1615.05,683.528 1615.61,683.528 1616.17,683.528 1616.73,683.528 1617.29,683.528 1617.84,683.528 1618.4,683.528 1618.96,683.528 1619.52,683.528 1620.08,683.528 1620.64,683.528 1621.2,683.528 1621.76,683.528 1622.32,683.528 1622.88,683.528 1623.44,683.528 1624,683.528 1624.56,683.528 1625.11,683.528 1625.67,683.528 1626.23,683.528 1626.79,683.528 1627.35,683.528 1627.91,683.528 1628.47,683.528 1629.03,683.528 1629.59,683.528 1630.15,683.528 1630.71,683.528 1631.27,683.528 1631.83,683.528 1632.39,683.528 1632.94,683.528 1633.5,683.528 1634.06,683.528 1634.62,683.528 1635.18,683.528 1635.74,683.528 1636.3,683.528 1636.86,683.528 1637.42,683.528 1637.98,683.528 1638.54,683.528 1639.1,683.528 1639.66,683.528 1640.21,683.528 1640.77,683.528 1641.33,683.528 1641.89,683.528 1642.45,683.528 1643.01,683.528 1643.57,683.528 1644.13,683.528 1644.69,683.528 1645.25,683.528 1645.81,683.528 1646.37,683.528 1646.93,683.528 1647.48,683.528 1648.04,683.528 1648.6,683.528 1649.16,683.528 1649.72,683.528 1650.28,683.528 1650.84,683.528 1651.4,683.528 1651.96,683.528 1652.52,683.528 1653.08,683.528 1653.64,683.528 1654.2,683.528 1654.76,683.528 1655.31,683.528 1655.87,683.528 1656.43,683.528 1656.99,683.528 1657.55,683.528 1658.11,683.528 1658.67,683.528 1659.23,683.528 1659.79,683.528 1660.35,683.528 1660.91,683.528 1661.47,683.528 1662.03,683.528 1662.58,683.528 1663.14,683.528 1663.7,683.528 1664.26,683.528 1664.82,683.528 1665.38,683.528 1665.94,683.528 1666.5,683.528 1667.06,683.528 1667.62,683.528 1668.18,683.528 1668.74,683.528 1669.3,683.528 1669.85,683.528 1670.41,683.528 1670.97,683.528 1671.53,683.528 1672.09,683.528 1672.65,683.528 1673.21,683.528 1673.77,683.528 1674.33,683.528 1674.89,683.528 1675.45,683.528 1676.01,683.528 1676.57,683.528 1677.13,683.528 1677.68,683.528 1678.24,683.528 1678.8,683.528 1679.36,683.528 1679.92,683.528 1680.48,683.528 1681.04,683.528 1681.6,683.528 1682.16,683.528 1682.72,683.528 1683.28,683.528 1683.84,683.528 1684.4,683.528 1684.95,683.528 1685.51,683.528 1686.07,683.528 1686.63,683.528 1687.19,683.528 1687.75,683.528 1688.31,683.528 1688.87,683.528 1689.43,683.528 1689.99,683.528 1690.55,683.528 1691.11,683.528 1691.67,683.528 1692.23,683.528 1692.78,683.528 1693.34,683.528 1693.9,683.528 1694.46,683.528 1695.02,683.528 1695.58,683.528 1696.14,683.528 1696.7,683.528 1697.26,683.528 1697.82,683.528 1698.38,683.528 1698.94,683.528 1699.5,683.528 1700.05,683.528 1700.61,683.528 1701.17,683.528 1701.73,683.528 1702.29,683.528 1702.85,683.528 1703.41,683.528 1703.97,683.528 1704.53,683.528 1705.09,683.528 1705.65,683.528 1706.21,683.528 1706.77,683.528 1707.32,683.528 1707.88,683.528 1708.44,683.528 1709,683.528 1709.56,683.528 1710.12,683.528 1710.68,683.528 1711.24,683.528 1711.8,683.528 1712.36,683.528 1712.92,683.528 1713.48,683.528 1714.04,683.528 1714.6,683.528 1715.15,683.528 1715.71,683.528 1716.27,683.528 1716.83,683.528 1717.39,683.528 1717.95,683.528 1718.51,683.528 1719.07,683.528 1719.63,683.528 1720.19,683.528 1720.75,683.528 1721.31,683.528 1721.87,683.528 1722.42,683.528 1722.98,683.528 1723.54,683.528 1724.1,683.528 1724.66,683.528 1725.22,683.528 1725.78,683.528 1726.34,683.528 1726.9,683.528 1727.46,683.528 1728.02,683.528 1728.58,683.528 1729.14,683.528 1729.69,683.528 1730.25,683.528 1730.81,683.528 1731.37,683.528 1731.93,683.528 1732.49,683.528 1733.05,683.528 1733.61,683.528 1734.17,683.528 1734.73,683.528 1735.29,683.528 1735.85,683.528 1736.41,683.528 1736.97,683.528 1737.52,683.528 1738.08,683.528 1738.64,683.528 1739.2,683.528 1739.76,683.528 1740.32,683.528 1740.88,683.528 1741.44,683.528 1742,683.528 1742.56,683.528 1743.12,683.528 1743.68,683.528 1744.24,683.528 1744.79,683.528 1745.35,683.528 1745.91,683.528 1746.47,683.528 1747.03,683.528 1747.59,683.528 1748.15,683.528 1748.71,683.528 1749.27,683.528 1749.83,683.528 1750.39,683.528 1750.95,683.528 1751.51,683.528 1752.06,683.528 1752.62,683.528 1753.18,683.528 1753.74,683.528 1754.3,683.528 1754.86,683.528 1755.42,683.528 1755.98,683.528 1756.54,683.528 1757.1,683.528 1757.66,683.528 1758.22,683.528 1758.78,683.528 1759.34,683.528 1759.89,683.528 1760.45,683.528 1761.01,683.528 1761.57,683.528 1762.13,683.528 1762.69,683.528 1763.25,683.528 1763.81,683.528 1764.37,683.528 1764.93,683.528 1765.49,683.528 1766.05,683.528 1766.61,683.528 1767.16,683.528 1767.72,683.528 1768.28,683.528 1768.84,683.528 1769.4,683.528 1769.96,683.528 1770.52,683.528 1771.08,683.528 1771.64,683.528 1772.2,683.528 1772.76,683.528 1773.32,683.528 1773.88,683.528 1774.43,683.528 1774.99,683.528 1775.55,683.528 1776.11,683.528 1776.67,683.528 1777.23,683.528 1777.79,683.528 1778.35,683.528 1778.91,683.528 1779.47,683.528 1780.03,683.528 1780.59,683.528 1781.15,683.528 1781.71,683.528 1782.26,683.528 1782.82,683.528 1783.38,683.528 1783.94,683.528 1784.5,683.528 1785.06,683.528 1785.62,683.528 1786.18,683.528 1786.74,683.528 1787.3,683.528 1787.86,683.528 1788.42,683.528 1788.98,683.528 1789.53,683.528 1790.09,683.528 1790.65,683.528 1791.21,683.528 1791.77,683.528 1792.33,683.528 1792.89,683.528 1793.45,683.528 1794.01,683.528 1794.57,683.528 1795.13,683.528 1795.69,683.528 1796.25,683.528 1796.8,683.528 1797.36,683.528 1797.92,683.528 1798.48,683.528 1799.04,683.528 1799.6,683.528 1800.16,683.528 1800.72,683.528 1801.28,683.528 1801.84,683.528 1802.4,683.528 1802.96,683.528 1803.52,683.528 1804.08,683.528 1804.63,683.528 1805.19,683.528 1805.75,683.528 1806.31,683.528 1806.87,683.528 1807.43,683.528 1807.99,683.528 1808.55,683.528 1809.11,683.528 1809.67,683.528 1810.23,683.528 1810.79,683.528 1811.35,683.528 1811.9,683.528 1812.46,683.528 1813.02,683.528 1813.58,683.528 1814.14,683.528 1814.7,683.528 1815.26,683.528 1815.82,683.528 1816.38,683.528 1816.94,683.528 1817.5,683.528 1818.06,683.528 1818.62,683.528 1819.18,683.528 1819.73,683.528 1820.29,683.528 1820.85,683.528 1821.41,683.528 1821.97,683.528 1822.53,683.528 1823.09,683.528 1823.65,683.528 1824.21,683.528 1824.77,683.528 1825.33,683.528 1825.89,683.528 1826.45,683.528 1827,683.528 1827.56,683.528 1828.12,683.528 1828.68,683.528 1829.24,683.528 1829.8,683.528 1830.36,683.528 1830.92,683.528 1831.48,683.528 1832.04,683.528 1832.6,683.528 1833.16,683.528 1833.72,683.528 1834.27,683.528 1834.83,683.528 1835.39,683.528 1835.95,683.528 1836.51,683.528 1837.07,683.528 1837.63,683.528 1838.19,683.528 \"/>\n</svg>\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case the projected energy and the shift are close to each other and the error bars are hard to see.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"The problem was just a toy example, as the dimension of the Hamiltonian is rather small:","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"dimension(H)","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"462","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"In this case, it's easy (and more efficient) to calculate the exact ground state energy using standard linear algebra. Read more about Rimu's capabilities for exact diagonalization in the example \"Exact diagonalization\".","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"edp = ExactDiagonalizationProblem(H)\nexact_energy = solve(edp).values[1]","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"-4.021502406906472","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"We finish by comparing our FCIQMC results with the exact computation.","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"println(\n    \"\"\"\n    Energy from $steps_measure steps with $targetwalkers walkers:\n    Shift: $(se.mean) ± $(se.err)\n    Projected Energy: $(v.val) ± ($(v.val_l), $(v.val_u))\n    Exact Energy: $exact_energy\n    \"\"\"\n)\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"Energy from 2000 steps with 1000 walkers:\nShift: -4.027514785121598 ± 0.027529197245250814\nProjected Energy: -4.014801052826478 ± (0.003793596100079455, 0.0037640395254978642)\nExact Energy: -4.021502406906472\n\n","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"","category":"page"},{"location":"generated/BHM-example.html","page":"1D Bose-Hubbard Model","title":"1D Bose-Hubbard Model","text":"This page was generated using Literate.jl.","category":"page"},{"location":"statstools.html#Module-StatsTools","page":"StatsTools","title":"Module StatsTools","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"The  module StatsTools contains helper function for analysis and post processing of Monte Carlo data.","category":"page"},{"location":"statstools.html#Blocking-analysis","page":"StatsTools","title":"Blocking analysis","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"After equilibration, FCIQMC produces information about observables through correlated time series. In order to estimate the statistical errors the time series need to be decorrelated. The main workhorse for achieving this is the blocking_analysis, which is based on the paper by Flyvberg and Peterson JCP (1989), and automated with the M test of Jonsson PRE (2018).","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Analysing the stochastic errors of observables obtained from the ratio of sample means is done with ratio_of_means, where error propagation of correlated uncertainties is done with the help of the package MonteCarloMeasurements.","category":"page"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Many convenience functions are implemented for directly analysing data obtained from lomc! as a DataFrame. See, e.g., shift_estimator and projected_energy. Asymptotically unbiased estimators are implemented as mixed_estimator, growth_estimator and rayleigh_replica_estimator.","category":"page"},{"location":"statstools.html#Exported","page":"StatsTools","title":"Exported","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\", \"fidelity.jl\", \"variational_energy_estimator.jl\"\n]\nPrivate = false","category":"page"},{"location":"statstools.html#Rimu.StatsTools","page":"StatsTools","title":"Rimu.StatsTools","text":"Tools for the statistical analysis of Monte Carlo data.\n\nExports:\n\nblocking_analysis\nblocking_analysis_data\nratio_of_means\ngrowth_witness\nsmoothen\nshift_estimator\nprojected_energy\nvariational_energy_estimator\ngrowth_estimator\ngrowth_estimator_analysis\nmixed_estimator\nmixed_estimator_analysis\nrayleigh_replica_estimator\nrayleigh_replica_estimator_analysis\nval_and_errs\nval\nmean_and_se\n\n\n\n\n\n","category":"module"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis","text":"blocking_analysis(v::AbstractVector; α = 0.01, corrected = true, skip=0, warn=true)\n-> BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nCompute the sample mean mean and estimate the standard deviation of the mean (standard error) err of a correlated time series. It uses the blocking algorithm from Flyvberg and Peterson JCP (1989) and the M test of Jonsson PRE (2018) at significance level 1-α.\n\nUse skip to skip the first skip elements in v. corrected controls whether bias correction for variances is used. If decorrelating the time series fails according to the M test, NaN is returned as the standard error and -1 for k. The keyword argument warn controls whether a warning message is logged.\n\nThe summary result is returned as a BlockingResult. k - 1 is the number of blocking transformations required to pass the hypothesis test for an uncorrelated time series and err_err the estimated standard error or err.\n\nThe detailed results from each reblocking step can be obtained with blocking_analysis_data.\n\nSee BlockingResult, shift_estimator, ratio_of_means, blocking_analysis_data.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocking_analysis_data-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.blocking_analysis_data","text":"blocking_analysis_data(v::AbstractVector; kwargs...) ->\n(; br::BlockingResult, df::DataFrame)\n\nPerform a blocking_analysis and return the summary result br as well as a DataFrame df with information about the standard error in each blocking step.\n\nFor a description of the keyword arguments see blocking_analysis.\n\nExample\n\njulia> data = smoothen(rand(10_000), 2^6); # generate correlated data\n\njulia> br, df = blocking_analysis_data(data)\n(br = BlockingResult{Float64}\n  mean = 0.5088 ± 0.0029\n  with uncertainty of ± 0.00023454488294744232\n  from 78 blocks after 7 transformations (k = 8).\n, df = 13×6 DataFrame\n Row │ blocks  mean      std_err      std_err_err  p_cov       mj\n     │ Int64   Float64   Float64      Float64      Float64     Float64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │  10000  0.508806  0.000375044  2.6521e-6    1.40658e-7  9715.08\n   2 │   5000  0.508806  0.000528547  5.28599e-6   2.79361e-7  4778.14\n   3 │   2500  0.508806  0.000743386  1.05152e-5   5.52622e-7  2298.64\n   4 │   1250  0.508806  0.00104064   2.08212e-5   1.08293e-6  1056.24\n   5 │    625  0.508806  0.00144177   4.08121e-5   2.07871e-6   427.949\n   6 │    312  0.508736  0.00194209   7.78707e-5   3.77171e-6   128.711\n   7 │    156  0.508736  0.00247921   0.00014081   6.14647e-6    17.3075\n   8 │     78  0.508736  0.00291063   0.000234545  8.47174e-6     0.731386\n   9 │     39  0.508736  0.00284613   0.000326474  8.10046e-6     0.901054\n  10 │     19  0.508241  0.0026998    0.000449967  7.28892e-6     2.85915\n  11 │      9  0.507939  0.00359907   0.000899766  1.29533e-5     1.08644\n  12 │      4  0.509327  0.00440559   0.00179857   1.94092e-5     0.0370381\n  13 │      2  0.509327  0.00432708   0.00305971   1.87237e-5     0.125)\n\njulia> using StatsPlots; unicodeplots();\n\njulia> plot([br.k,br.k],[0.0,maximum(df.std_err.+df.std_err_err)], label=\"m test\");\n\njulia> @df df plot!(\n           1:length(:std_err), :std_err;\n           err=:std_err_err, xlabel=\"k\", label=\"std err\",\n           title=\"std err vs blocking steps\"\n       )\n               ⠀⠀⠀⠀⠀⠀⠀⠀⠀std err vs blocking steps⠀⠀⠀⠀⠀⠀⠀⠀\n               ┌────────────────────────────────────────┐\n    0.00423501 │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠀⠀⠀⠀│ m test\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⢸⠀⠀⠀⠀│ std err\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀⢸⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⡠⢺⠒⠒⢺⠀⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⡀⠀⠀⡆⣀⠤⡗⠉⠀⢸⠀⠀⢸⡆⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡧⠤⠔⡗⠊⠉⡏⠀⠀⡇⠀⠀⢸⠀⠀⢸⢣⠀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⡇⠀⠀⠁⠀⠀⠁⠀⠀⠁⠀⠀⠀⠀⠀⢸⠸⡀⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠴⠁⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⡇⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠊⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣦⠀│\n               │⠀⠀⠀⠀⠀⠀⠀⠀⡠⠔⠒⠁⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⠀│\n               │⠀⠀⠀⢀⣀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n               │⠀⠒⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⠀│\n   -0.00012335 │⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠧⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤⠤│\n               └────────────────────────────────────────┘\n               ⠀0.64⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀k⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀13.36⠀\n\nA vertical line at k==8 indicates the blocking step identified by hypothesis testing to decorrelate the time series data. The decorrelation length can thus be estimated at 2^k-1 = 2^7 = 128. Note that the data was correlated with a sliding window of 2^6 steps.\n\nSee blocking_analysis, BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mean_and_se-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Rimu.StatsTools.mean_and_se","text":"mean_and_se(v::AbstractVector; α = 0.01, corrected::Bool=true, skip=0) -> mean, err\nmean_and_se(r::BlockingResult) -> mean, err\n\nReturn the mean and standard error (as a tuple) of a time series obtained from blocking_analysis. See also BlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Statistics.cov-Tuple{Rimu.StatsTools.BlockingResult{<:Complex}}","page":"StatsTools","title":"Statistics.cov","text":"cov(r::BlockingResult{<:Complex})\n\nReturn the covariance matrix of the multivariate normal distribution approximating the uncertainty of the blocking result r of a complex time series. See (https://en.wikipedia.org/wiki/Complexnormaldistribution).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_of_means-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.ratio_of_means","text":"ratio_of_means(num, denom; α=0.01, corrected=true, mc_samples=nothing, skip=0, warn=true)\n-> r::RatioBlockingResult\n\nEstimate the ratio of mean(num)/mean(denom) assuming that num and denom are possibly correlated time series, skipping the first skip elements. A blocking analysis with m-test is used to uncorrelate the time series, see blocking_analysis. The remaining standard error and correlation of the means is propagated using MonteCarloMeasurements. The results are reported as a RatioBlockingResult.\n\nRobust estimates for the ratio are obtained from pmedian(r) and confidence intervals from pquantile(), e.g. pquantile(r, [0.025, 0.975]) for the 95% confidence interval.\n\nEstimates from linear uncertainty propagation are returned as r.f and r.σ_f using x_by_y_linear. The standard error estimate r.σ_f should only be trusted when the coefficient of variation std(denom)/mean(denom) is small: abs(r.δ_y) < 0.1. Under this condition can the ratio be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013)\n\nThe keyword mc_samples controls the number of samples used for error propagation by MonteCarloMeasurements. Use nothing for the default and Val(1000) to set the number to 1000 samples in a type-consistent way.\n\nThe keyword warn controls whether warning messages are logged when blocking fails or noisy denominators are encountered.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.errs-Tuple","page":"StatsTools","title":"Rimu.StatsTools.errs","text":"errs(x; n=1, p=nothing, name=:err) -> (; err_l, err_u)\n\nReturn the lower and upper error bar for the uncertain value x.\n\nSee val_and_errs.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.to_measurement-Tuple{MonteCarloMeasurements.Particles}","page":"StatsTools","title":"Rimu.StatsTools.to_measurement","text":"to_measurement(p::MonteCarloMeasurements.Particles) -> ::Measurements.measurement\n\nConvert an uncertain number from MonteCarloMeasurements  to Measurements format  using the median as the central point. The new ± boundaries will include  the 68% quantile around the median.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val","text":"val(x)\n\nReturn the best estimate value for an uncertain x. Defaults to the median for uncertain x represented by a (sampled) distribution. Supports  MonteCarloMeasurements and Measurements.\n\nSee errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.val_and_errs-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.val_and_errs","text":"val_and_errs(x; n=1, p=nothing, name=:val) -> (;val, val_l, val_u)\n\nReturn the median and the lower and upper error bar for the uncertain value x as a NamedTuple. This is useful for plotting scripts. The interval [val - val_l, val + val_u] represents the confidence interval at level n*σ, or at probability p. Setting p overrides n. Supports  MonteCarloMeasurements and Measurements. The  names in the NamedTuple can be changed with name.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> v = val_and_errs.(results, name=\"res\"); # Vector of NamedTuple's with standard errors\n\njulia> DataFrame(v)\n3×3 DataFrame\n Row │ res      res_l    res_u\n     │ Float64  Float64  Float64\n─────┼───────────────────────────\n   1 │    11.5  1.7282   1.7282\n   2 │    13.0  1.7282   1.7282\n   3 │    14.5  1.78885  1.78885\n\nSee NamedTuple, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_witness","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(df::DataFrame, [b]; shift=:shift, norm=:norm, dτ=df.dτ[end], skip=0)\n\nCalculate the growth witness directly from a DataFrame returned by lomc!. The keyword arguments shift and norm can be used to change the names of the relevant columns.\n\n\n\n\n\n","category":"function"},{"location":"statstools.html#Rimu.StatsTools.growth_witness-Tuple{AbstractArray, AbstractArray, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_witness","text":"growth_witness(shift::AbstractArray, norm::AbstractArray, dt, [b]; skip=0)\ngrowth_witness(df::DataFrame, [b]; skip=0)\ngrowth_witness(sim::PMCSimulation, [b]; skip=0)\n\nCompute the growth witness\n\nG^(n) = S^(n) - fracvertmathbfc^(n+1)vert -\n          vertmathbfc^(n)vertvertmathbfc^(n)vert dtau\n\nwhere S is the shift and vertmathbfc^(n)vert == norm[n, 1]. Setting b ≥ 1 a sliding average over b time steps is computed using smoothen(). The first skip time steps are skipped. mean(growth_witness) is approximately the same as growth_estimator with h=0.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.smoothen-Tuple{AbstractVector, Integer}","page":"StatsTools","title":"Rimu.StatsTools.smoothen","text":"smoothen(noisy::AbstractVector, b)\n\nSmoothen the array noisy by averaging over a sliding window of length b and wrapping noisy periodically. The mean(noisy) is preserved.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator-NTuple{4, Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator","text":"growth_estimator(\n    shift, wn, h, dτ;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    change_type = identity,\n    kwargs...\n)\ngrowth_estimator(\n    df::DataFrame, h;\n    shift_name=:shift,\n    norm_name=:norm,\n    dτ=determine_constant_time_step(df),\n    kwargs...\n)\ngrowth_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the growth estimator with reference energy E_r by the reweighting technique described in Umrigar et al. (1993), see Eq. (20). shift and wn are equal length vectors containing the shift and walker number time series, respectively.  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means(). dτ is the time step and weights a function that calulates the weights. See w_exp() and w_lin().\n\nE_gr = E_r - frac1dτln\n    fracsum_n w_h+1^(n+1) N_mathrmw^(n+1)\n        sum_m w_h^(m) N_mathrmw^(m)\n\nWhen h is greater than the autocorrelation time scale of the shift, then E_gr (returned as r.ratio) is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the (biased) shift estimator.  Error propagation is done with MonteCarloMeasurements. Propagation through the logarithm can be modified by setting change_type to to_measurement in order to avoid NaN results from negative outliers.\n\nIf success==true the blocking analysis was successful in k-1 steps, using blocks uncorrelated data points.\n\nThe second method calculates the growth estimator directly from a DataFrame returned by lomc!. The keyword arguments shift_name and norm_name can be used to change the names of the relevant columns.\n\nSee also mixed_estimator and RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.growth_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.growth_estimator_analysis","text":"growth_estimator_analysis(df::DataFrame; kwargs...)\ngrowth_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_ge, correlation_estimate, se, se_l, se_u)\n\nCompute the growth_estimator on a DataFrame df or PMCSimulation sim. repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_ge: DataFrame with reweighting depth and growth_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nnorm_name = :norm name of column in df with walkernumber data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\ndf, _ = lomc!(...)\ndf_ge, correlation_estimate, se, se_l, se_u = growth_estimator_analysis(df; skip=5_000)\n\nusing StatsPlots\n@df df_ge plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_ge plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_gr\") # growth estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: growth_estimator, mixed_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator-Tuple{AbstractVector, AbstractVector, AbstractVector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator","text":"mixed_estimator(\n    hproj, vproj, shift, h, dτ;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nmixed_estimator(\n    df::DataFrame, h;\n    hproj_name=:hproj,\n    vproj_name=:vproj,\n    shift_name=:shift,\n    dτ=df.dτ[end],\n    kwargs...\n)\nmixed_estimator(sim::PMCSimulation, h; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the mixed estimator by the reweighting technique described in Umrigar et al. (1993), Eq. (19)\n\nE_mathrmmix = fracsum_n w_h^(n)  (Hmathbfv)mathbfc^(n)\n        sum_m w_h^(m)  mathbfvmathbfc^(m) \n\nwhere the time series hproj == (Hmathbfv)mathbfc^(n) and vproj == mathbfvmathbfc^(m) have the same length as shift (See ProjectedEnergy on how to set these up).  Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means(). dτ is the time step and weights a function that calulates the weights. See w_exp() and w_lin().  Additional keyword arguments are passed on to ratio_of_means().\n\nWhen h is greater than the autocorrelation time scale of the shift, then r.ratio is an unbiased but approximate estimator for the ground state energy E_0 with an error mathcalO(dτ^2) and potentially increased confidence intervals compared to the unweighted ratio.  Error propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nThe second method calculates the mixed energy estimator directly from a DataFrame returned by lomc!. The keyword arguments hproj_name, vproj_name, and shift_name can be used to change the names of the relevant columns.\n\nSee also growth_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mixed_estimator_analysis-Tuple{DataFrame}","page":"StatsTools","title":"Rimu.StatsTools.mixed_estimator_analysis","text":"mixed_estimator_analysis(df::DataFrame; kwargs...)\nmixed_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_me, correlation_estimate, se, se_l, se_u)\n\nCompute the mixed_estimator on a DataFrame df returned from lomc! repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_me: DataFrame with reweighting depth and mixed_estiamator data. See example below.\ncorrelation_estimate: estimated correlation time from blocking analysis\nse, se_l, se_u: shift_estimator and error\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = :shift name of column in df with shift data\nhproj_name = :hproj name of column in df with operator overlap data\nvproj_name = :vproj name of column in df with projector overlap data\nwarn = true whether to log warning messages when blocking fails or denominators are small\n\nExample\n\ndf, _ = lomc!(...)\ndf_me, correlation_estimate, se, se_l, se_u = mixed_estimator_analysis(df; skip=5_000)\n\nusing StatsPlots\n@df df_me plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_me plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # mixed estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: mixed_estimator, growth_estimator_analysis.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.projected_energy-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.projected_energy","text":"projected_energy(df::DataFrame; skip=0, hproj=:hproj, vproj=:vproj, kwargs...)\nprojected_energy(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the projected energy estimator\n\nE_mathrmp = fracsum_n  mathbfvHmathbfc^(n)\n        sum_m mathbfvmathbfc^(m) \n\nwhere the time series df.hproj == mathbfvHmathbfc^(n) and df.vproj == mathbfvmathbfc^(m) are taken from df, skipping the first skip entries (use post_step_strategy =ProjectedEnergy() to set these up in lomc!()). projected_energy is equivalent to mixed_estimator with h=0.\n\nThe keyword arguments hproj and vproj can be used to change the names of the relevant columns. Other kwargs are passed on to ratio_of_means. Returns a RatioBlockingResult.\n\nSee NamedTuple, val_and_errs, val, errs for processing results.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator-Tuple{Vector, Vector, Vector, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator","text":"rayleigh_replica_estimator(\n    op_ol, vec_ol, shift, h, dτ;\n    skip = 0,\n    E_r = mean(shift[skip+1:end]),\n    weights = w_exp,\n    kwargs...\n)\nrayleigh_replica_estimator(\n    df::DataFrame;\n    shift_name=\"shift\",\n    op_name=\"Op1\",\n    vec_name=\"dot\",\n    h=0,\n    skip=0,\n    Anorm=1,\n    kwargs...\n)\nrayleigh_replica_estimator(sim::PMCSimulation; kwargs...)\n-> r::RatioBlockingResult\n\nCompute the estimator of a Rayleigh quotient of operator hatA with reweighting,\n\nA_mathrmest(h) = fracsum_ab sum_n w_ha^(n) w_hb^(n)\n    mathbfc_a^(n) cdot hatA cdot mathbfc_b^(n)\n    sum_ab sum_n w_ha^(n) w_hb^(n) mathbfc_a^(n) cdot mathbfc_b^(n)\n\nusing data from multiple replicas.\n\nArgument op_ol holds data for the operator overlap mathbfc_a^(n) hatA mathbfc_b^(n) and vec_ol holds data for the vector overlap mathbfc_a^(n) mathbfc_b^(n). They are of type Vector{Vector}, with each element Vector holding the data for a pair of replicas. Argument shift is of type Vector{Vector}, with each element Vector holding the shift data for each individual replica.\n\nThe second method computes the Rayleigh quotient directly from a DataFrame returned by lomc!. The keyword arguments shift_name, op_name and vec_name can be used to change the names of the relevant columns, see AllOverlaps for default formatting. The operator overlap data can be scaled by a prefactor Anorm. A specific reweighting depth can be set with keyword argument h. The default is h = 0 which calculates the Rayleigh quotient without reweighting.\n\nThe reweighting is an extension of the mixed estimator using the reweighting technique described in Umrigar et al. (1993). Reweighting is done over h time steps and length(shift) - skip time steps are used for the blocking analysis done with ratio_of_means(). dτ is the time step and weights a function that calulates the weights. See w_exp() and w_lin(). Additional keyword arguments are passed on to ratio_of_means().\n\nError propagation is done with MonteCarloMeasurements. Results are returned as RatioBlockingResult.\n\nSee also mixed_estimator, growth_estimator().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.rayleigh_replica_estimator_analysis-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.rayleigh_replica_estimator_analysis","text":"rayleigh_replica_estimator_analysis(df::DataFrame; kwargs...)\nrayleigh_replica_estimator_analysis(sim::PMCSimulation; kwargs...)\n-> (; df_rre, df_se)\n\nCompute the rayleigh_replica_estimator on a DataFrame df returned from lomc! repeatedly over a range of reweighting depths.\n\nReturns a NamedTuple with the fields\n\ndf_rre: DataFrame with reweighting depth and rayleigh_replica_estimator data. See example below.\ndf_se: DataFrame with shift_estimator output, one row per replica\n\nKeyword arguments\n\nh_range: The default is about h_values values from 0 to twice the estimated correlation time\nh_values = 100: minimum number of reweighting depths\nskip = 0: initial time steps to exclude from averaging\nthreading = Threads.nthreads() > 1: if false a progress meter is displayed\nshift_name = \"shift\": shift data corresponding to column in df with names <shift>_1, ...\nop_name = \"Op1\": name of operator overlap corresponding to column in df with names c1_<op_ol>_c2, ...\nvec_name = \"dot\": name of vector-vector overlap corresponding to column in df with names c1_<vec_ol>_c2, ...\nAnorm = 1: a scalar prefactor to scale the operator overlap data\nwarn = true: whether to log warning messages when blocking fails or denominators are small\n\nExample\n\ndf, _ = lomc!(...)\ndf_rre, df_se = rayleigh_replica_estimator_analysis(df; skip=5_000)\n\nusing StatsPlots\n@df df_rre plot(_ -> se, :h, ribbon = (se_l, se_u), label = \"⟨S⟩\") # constant line and ribbon for shift estimator\n@df df_rre plot!(:h, :val, ribbon = (:val_l, :val_u), label=\"E_mix\") # Rayleigh quotient estimator as a function of reweighting depth\nxlabel!(\"h\")\n\nSee also: rayleigh_replica_estimator, mixed_estimator_analysis, AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.shift_estimator-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.shift_estimator","text":"shift_estimator(df::DataFrame; shift=:shift, kwargs...)\nshift_estimator(sim::PMCSimulation; kwargs...)\n-> r::BlockingResult\n\nReturn the shift estimator from the data in df.shift. The keyword argument shift can be used to change the name of the relevant column. Other keyword arguments are passed on to blocking_analysis. Returns a BlockingResult.\n\nSee also growth_estimator, projected_energy.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_exp-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_exp","text":"w_exp(shift, h, dτ; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the exponential formula\n\nw_h^(n) = prod_j=1^h exp-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip.\n\nSee also w_lin, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.w_lin-Tuple{Union{SubArray{<:Any, 1, <:Vector, <:Any, true}, Vector}, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.w_lin","text":"w_lin(shift, h, dτ; E_r = mean(shift), skip = 0)\n\nCompute the weights for reweighting over h time steps with reference energy E_r from the linearised formula\n\nw_h^(n) = prod_j=1^h 1-dτ(S^(q+n-j)-E_r) \n\nwhere q = skip.\n\nSee also w_exp, growth_estimator, mixed_estimator.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.replica_fidelity-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.replica_fidelity","text":"replica_fidelity(df::DataFrame; p_field = :hproj, skip = 0)\nreplica_fidelity(sim::PMCSimulation; kwargs...)\n\nCompute the fidelity of the average coefficient vector and the projector defined in p_field from the result of replica lomc! passed as  argument df, using replicas _1 and _2. Calls ratio_of_means() to perform a blocking analysis on a ratio of the means of separate time series and returns a RatioBlockingResult. The first skip steps in the time series are skipped.\n\nThe fidelity of states |ψ⟩ and |ϕ⟩ is defined as\n\nF(ψϕ) = fracψϕ^2ψψϕϕ \n\nSpecifically, replica_fidelity computes\n\nF(mathbfvmathbfc) =\n    frac(mathbfc_1mathbfv)(mathbfvmathbfc_1)\n    mathbfc_1mathbfc_1 \n\nwhere v is the projector specified by p_field, which is assumed to be normalised to unity with the two-norm (i.e. v⋅v == 1), and mathbfc_1 and mathbfc_2 are two replica coefficient vectors.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.variational_energy_estimator-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.variational_energy_estimator","text":"variational_energy_estimator(shifts, overlaps; kwargs...)\nvariational_energy_estimator(df::DataFrame; max_replicas=:all, kwargs...)\n-> r::RatioBlockingResult\n\nCompute the variational energy estimator from the replica time series of the shifts and coefficient vector overlaps by blocking analysis. The keyword argument max_replicas can be used to constrain the number of replicas processed to be smaller than all available in df. Other keyword arguments are passed on to ratio_of_means(). Returns a RatioBlockingResult.\n\nAn estimator for the variational energy\n\nfracmathbfc^ mathbfHmathbfcmathbfc^mathbfc\n\nis calculated from\n\nE_v  =  fracsum_ab^R overline(S_a+S_b) mathbfc_a^ mathbfc_b\n               2sum_ab^R overlinemathbfc_a^ mathbfc_b \n\nwhere the sum goes over distinct pairs out of the R replicas. See arXiv:2103.07800.\n\nThe DataFrame version can extract the relevant information from the result of lomc!. Set up lomc! with the keyword argument replica = AllOverlaps(R) and R ≥ 2. If passing shifts and overlaps, the data has to be arranged in the correct order (as provided in the DataFrame version).\n\nSee AllOverlaps.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Additional-docstrings","page":"StatsTools","title":"Additional docstrings","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Modules = [StatsTools]\nPages = [\"StatsTools.jl\", \"blocking.jl\", \"ratio_of_means.jl\", \"convenience.jl\",\n  \"variances.jl\", \"growth_witness.jl\", \"reweighting.jl\"\n]\nPublic = false","category":"page"},{"location":"statstools.html#MonteCarloMeasurements.Particles-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"MonteCarloMeasurements.Particles","text":"MonteCarloMeasurements.Particles(r::BlockingResult; mc_samples = 2000)\nMonteCarloMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Particles object for nonlinear error propagation with MonteCarloMeasurements.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.BlockingResult","page":"StatsTools","title":"Rimu.StatsTools.BlockingResult","text":"BlockingResult(mean, err, err_err, p_cov, k, blocks)\n\nResult of blocking_analysis.\n\nFields:\n\nmean: sample mean\nerr: standard error (estimated standard deviation of the mean)\nerr_err: estimated uncertainty of err\np_cov: estimated pseudo covariance of mean, relevant for complex time series\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of uncorrelated values after blocking\n\nHas methods for NamedTuple, val_and_errs, val, errs, mean_and_se, Measurements.:±, MonteCarloMeasurements.Particles, and Statistics.cov for Complex data.\n\nExample:\n\njulia> blocking_analysis(smoothen(randn(2^10), 2^5))\nBlockingResult{Float64}\n  mean = -0.026 ± 0.029\n  with uncertainty of ± 0.003638545517264226\n  from 32 blocks after 5 transformations (k = 6).\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Measurements.measurement-Tuple{Rimu.StatsTools.BlockingResult{<:Real}}","page":"StatsTools","title":"Measurements.measurement","text":"measurement(r::BlockingResult)\nMeasurements.±(r::BlockingResult)\n\nConvert a BlockingResult into a Measurement for linear error propagation with Measurements.\n\nLimitation: Does not account for covariance in complex BlockingResult. Consider using MonteCarloMeasurements.Particles(r)!\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocker-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T","page":"StatsTools","title":"Rimu.StatsTools.blocker","text":"blocker(v::Vector) -> new_v::Vector\n\nReblock the data by successively taking the mean of two adjacent data points to form a new vector with a half of the length(v). The last data point will be discarded if length(v) is odd.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.blocks_with_m-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.blocks_with_m","text":"blocks_with_m(v; corrected = true) -> (;blocks, mean, std_err, std_err_err, p_cov, mj)\n\nPerform the blocking algorithm from Flyvberg and Peterson JCP (1989). Returns named tuple with the results from all blocking steps. See mtest().\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.mtest-Tuple{AbstractVector}","page":"StatsTools","title":"Rimu.StatsTools.mtest","text":"mtest(mj::AbstractVector; α = 0.01) -> k\nmtest(table::NamedTuple; α = 0.01) -> k\n\nHypothesis test for decorrelation of a time series after blocking transformations with significance level 1-α after Jonson PRE (2018). mj or table.mj is expected to be a vector with relevant M_j values from a blocking analysis as obtained from blocks_with_m(). Returns the row number k where the M-test is passed. If the M-test has failed mtest() returns the value -1.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.RatioBlockingResult","page":"StatsTools","title":"Rimu.StatsTools.RatioBlockingResult","text":"RatioBlockingResult(ratio, f, σ_f, δ_y, k, success)\n\nResult of ratio_of_means().\n\nFields:\n\nratio::P: ratio with uncertainties propagated by MonteCarloMeasurements\nf::T: ratio of means\nσ_f::T: std from linear propagation\nδ_y::T: coefficient of variation for denominator (≤ 0.1 for normal approx)\nk::Int: k-1 blocking steps were used to uncorrelate time series\nblocks::Int: number of data values after blocking\nsuccess::Bool: false if any of the blocking steps failed\n\nHas methods for NamedTuple, val_and_errs, val, errs.\n\nNote: to compute statistics on the RatioBlockingResult, use functions pmedian, pquantile, pmiddle, piterate, pextrema, pminimum, pmaximum, pmean, and pcov.\n\n\n\n\n\n","category":"type"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, μ, σ)\nparticles(samples, μ::AbstractVector, Σ::AbstractMatrix)\n\nReturn Particles object from MonteCarloMeasurements with single- or multivariate normal distribution. Zero variance parameters are supported.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.particles-Tuple{Any, Distributions.Distribution}","page":"StatsTools","title":"Rimu.StatsTools.particles","text":"particles(samples, d)\nparticles(::Nothing, d)\nparticles(::Val{T}, d) where T\n\nReturn Particles object from  MonteCarloMeasurements using  a type-stable constructor if possible. Pass nothing for the default number of particles or Val(1_000) for using 1000 particles in a type-stable manner. If d is a Particles object it is passed through without re-sampling.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.ratio_estimators-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}}","page":"StatsTools","title":"Rimu.StatsTools.ratio_estimators","text":"ratio_estimators(x, y, [k]; corrected=true, mc_samples=10_000) -> (; r, f, σ_f, δ_y, n)\n\nEstimators for the ratio of means mean(x)/mean(y). If k is given, k-1 blocking steps are performed to remove internal correlations in the time series x and y. Otherwise these are assumed to be free of internal correlations. Correlations between x and y may be present and are taken into account.\n\nReturn values:\n\nr::Particles is the Monte Carlo sampled ratio estimator, see Particles\nf = mean(x)/mean(y)\nσ_f standard deviation of f from linear error propagation (normal approximation)\nδ_y = std(y)/mean(y) coefficient of variation; < 0.1 for normal approximation to work\nn: number of uncorrelated data used for uncertainty estimation\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.x_by_y_linear-NTuple{5, Any}","page":"StatsTools","title":"Rimu.StatsTools.x_by_y_linear","text":"x_by_y_linear(μ_x,μ_y,σ_x,σ_y,ρ) -> f, σ_f\n\nLinear error propagation for ratio f = x/y assuming x and y are correlated normal random variables and assuming the ratio can be approximated as a normal distribution. See wikipedia and Díaz-Francés, Rubio (2013).\n\nσ_f = sqrtfracσ_xμ_y^2 + fracμ_x σ_yμ_y^2^2 - frac2 ρ μ_xμ_y^3\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Core.NamedTuple-Tuple{Rimu.StatsTools.BlockingResult}","page":"StatsTools","title":"Core.NamedTuple","text":"NamedTuple(x::BlockingResult; n=1, p=nothing, name=:val)\nNamedTuple(x::RatioBlockingResult; n=1, p=nothing, name=:val)\n\nReturn a named tuple with value and error bars (see val_and_errs) as well as additional numerical fields relevant for x.\n\nExample:\n\njulia> results = [blocking_analysis(i:0.1:2i+20) for i in 1:3]; # mock results\n\njulia> df = NamedTuple.(results, name=:res)|>DataFrame\n3×7 DataFrame\n Row │ res      res_l    res_u    res_err_err  res_p_cov  res_k  res_blocks\n     │ Float64  Float64  Float64  Float64      Float64    Int64  Int64\n─────┼──────────────────────────────────────────────────────────────────────\n   1 │    11.5  1.7282   1.7282      0.352767    2.98667      5          13\n   2 │    13.0  1.7282   1.7282      0.352767    2.98667      5          13\n   3 │    14.5  1.78885  1.78885     0.350823    3.2          5          14\n\njulia> rbs = ratio_of_means(1 .+sin.(1:0.1:11),2 .+sin.(2:0.1:12)); # more mock results\n\njulia> [NamedTuple(rbs),]|>DataFrame\n1×9 DataFrame\n Row │ val       val_l      val_u      val_f     val_σ_f    val_δ_y    val_k  val_blocks  val_success\n     │ Float64   Float64    Float64    Float64   Float64    Float64    Int64  Int64       Bool\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │ 0.581549  0.0925669  0.0812292  0.560532  0.0875548  0.0875548      4          12         true\n\n\nSee val_and_errs, val, errs, BlockingResult, RatioBlockingResult.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.autocovariance-Tuple{AbstractVector, Int64}","page":"StatsTools","title":"Rimu.StatsTools.autocovariance","text":"autocovariance(v::Vector,h::Int; corrected::Bool=true)\n\nhatgamma(h) =frac1nsum_t=1^n-h(v_t+h-barv)(v_t-barv)^* Calculate the autocovariance of dataset v with a delay h. If corrected is true (the default) then the sum is scaled with n-h, whereas the sum is scaled with n if corrected is false where n = length(v).\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.pseudo_cov-Tuple{Any, Any}","page":"StatsTools","title":"Rimu.StatsTools.pseudo_cov","text":"pseudo_cov(x, y; xmean = mean(x), ymean = mean(y), corrected = true)\n\nCompute the pseudo covariance between collections x and y returning a scalar:\n\nfrac1nsum_i=1^n (x_i - barx)(y_i - bary)\n\nOptionally, precomputed means can be passed as keyword arguments. pseudo_cov(x,y) is functionally equivalent to Statistics.cov(x, conj(y); corrected = false) but it is found to be significantly faster and avoids allocations.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Rimu.StatsTools.determine_constant_time_step-Tuple{Any}","page":"StatsTools","title":"Rimu.StatsTools.determine_constant_time_step","text":"determine_constant_time_step(df) -> dτ\n\nGiven a DataFrame df, determine the time step that was used to compute it. Throw an error if time step is not constant.\n\n\n\n\n\n","category":"method"},{"location":"statstools.html#Index","page":"StatsTools","title":"Index","text":"","category":"section"},{"location":"statstools.html","page":"StatsTools","title":"StatsTools","text":"Pages   = [\"statstools.md\"]","category":"page"},{"location":"interfaces.html#Module-Interfaces","page":"Interfaces","title":"Module Interfaces","text":"","category":"section"},{"location":"interfaces.html","page":"Interfaces","title":"Interfaces","text":"Interfaces","category":"page"},{"location":"interfaces.html#Rimu.Interfaces","page":"Interfaces","title":"Rimu.Interfaces","text":"module Interfaces\n\nThis module contains interfaces that can be used to extend and modify the algorithms and behaviours of Rimu.\n\nInterfaces\n\nFollow the links for the definitions of the interfaces!\n\nAbstractHamiltonian for defining Hamiltonians\nAbstractDVec for defining data structures for Rimu as in DictVectors\nStochasticStyle for controlling the stochastic algorithms used by lomc! as implemented in StochasticStyles\n\nAdditional exports\n\nInterface functions forAbstractHamiltonians:\n\ndiagonal_element\nnum_offdiagonals\nget_offdiagonal\noffdiagonals.\nrandom_offdiagonal\nstarting_address\nLOStructure\nallowed_address_type\n\nworking with  AbstractDVecs and StochasticStyle\n\ndeposit!\ndefault_style\nCompressionStrategy\nThe interface from VectorInterface.jl.\n\nFunctions Rimu.jl uses to do FCIQMC:\n\napply_column!\napply_operator!\nstep_stats\n\n\n\n\n\n","category":"module"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"EditURL = \"../../../scripts/HO-example.jl\"","category":"page"},{"location":"generated/HO-example.html#Example-5:-Degenerate-perturbation-theory-in-a-harmonic-oscillator-basis","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Example 5: Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"section"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu can also handle non-lattice systems. This example looks at weakly-interacting bosonic particles in a harmonic oscillator external potential using a basis of (Cartesian product) single-particle eigenstates of the harmonic oscillator potential. Blocks of degenerate non-interacting states are coupled by a contact interaction in first order degenerate perturbation theory. This example shows how to generate these blocks and find the energy and angular momentum eigenstates.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"A runnable script for this example is located here. Run it with julia HO-example.jl.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, load all needed packages.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"using Rimu\nusing DataFrames\nusing LinearAlgebra","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Define the system size for N=2 particles in a 2D harmonic oscillator allowing M=4 levels in each dimension, including the groundstate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"N = 2\nM = 4;","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Use a tuple S to define the range of harmonic oscillator states in a Cartesian basis, in this isotropic case n_xn_y=01ldotsM-1.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"S = (M, M);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"In Rimu the N-particle states are still stored as Fock states.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"P = prod(S)\naddr = BoseFS(P, M => N)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"BoseFS{2,16}(0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Here, the numbering of the modes folds in the two spatial dimensions.  Use the utility function fock_to_cart to convert a Fock address to human-readable Cartesian quantum numbers for inspection.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"fock_to_cart(addr, S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"2-element StaticArraysCore.SVector{2, Tuple{Int64, Int64}} with indices SOneTo(2):\n (3, 0)\n (3, 0)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The output shows that all N particles are in single-particle state n_x=M-1 n_y=0.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The harmonic oscillator Hamiltonian HOCartesianContactInteractions handles contact interactions with first-order perturbation theory, so the matrix representation will block according to the non-interacting energy of the basis states. The first task is to find all blocks of basis states with the same energy. The strength of the interaction is not relevant at this point, just that it is non-zero. Use an arbitrary N-particle starting address to build the Hamiltonian.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"H = HOCartesianContactInteractions(BoseFS(P, 1 => N); S);","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Then, use the utility function get_all_blocks to find all blocks. The blocks are found by looping over all possible states with N particles in Cartesian states defined by S. Note that this will only work for total energy up to the maximum accessible by a single particle. The N-particle groundstate energy for a 2D harmonic oscillator is E_0 = N hbar omega and the maximum single-particle energy is E = (E_0 + M - 1) hbar omega.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"block_df = get_all_blocks(H; max_energy = N + M - 1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"<div><div style = \"float: left;\"><span>7×6 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">block_id</th><th style = \"text-align: left;\">block_E0</th><th style = \"text-align: left;\">block_size</th><th style = \"text-align: left;\">addr</th><th style = \"text-align: left;\">indices</th><th style = \"text-align: left;\">t_basis</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"BoseFS{2, 16, BitString{17, 1, UInt32}}\" style = \"text-align: left;\">BoseFS…</th><th title = \"Tuple{Int64, Int64}\" style = \"text-align: left;\">Tuple…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: right;\">2.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(1, 1)</td><td style = \"text-align: right;\">0.455116</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 1)</td><td style = \"text-align: right;\">2.2251e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">4</td><td style = \"text-align: left;\">fs&quot;|0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(2, 2)</td><td style = \"text-align: right;\">1.0039e-5</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">4</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(3, 2)</td><td style = \"text-align: right;\">9.066e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">5</td><td style = \"text-align: right;\">3.0</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">fs&quot;|1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 1)</td><td style = \"text-align: right;\">1.403e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">6</td><td style = \"text-align: right;\">4.0</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">fs&quot;|0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 2)</td><td style = \"text-align: right;\">2.595e-6</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">7</td><td style = \"text-align: right;\">7</td><td style = \"text-align: right;\">5.0</td><td style = \"text-align: right;\">5</td><td style = \"text-align: left;\">fs&quot;|0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0⟩&quot;</td><td style = \"text-align: left;\">(5, 3)</td><td style = \"text-align: right;\">8.145e-6</td></tr></tbody></table></div>","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This outputs a list of blocks in H indexed by the noninteracting energy of all states in the block, and a single address that can be used to rebuild the block for further analysis.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr1 = block_df[7,:addr]\nE = block_df[7,:block_E0]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"First, notice that all basis states have the same energy, defined by the block.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"basis1 = build_basis(H, addr1)\nmap(b -> Hamiltonians.noninteracting_energy(H, b), basis1)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"There are two blocks at each energy level (except the groundstate), which are different due to parity conservation, which is the only other symmetry in the Cartesian harmonic oscillator. The basis of this other block is different,","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"addr2 = block_df[4,:addr]\nbasis2 = build_basis(H, addr2);\nbasis1 ≠ basis2","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"true","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"but its basis elements have the same energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"map(b -> Hamiltonians.noninteracting_energy(H, b), basis2)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n 5.0\n 5.0\n 5.0\n 5.0\n 5.0","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"However, since this system is an isotropic harmonic oscillator, it is possible to build simultaneous eigenstates of the angular momentum operator L_z, implemented with AxialAngularMomentumHO.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz = AxialAngularMomentumHO(S)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"AxialAngularMomentumHO((4, 4); z_dim = 3, addr = BoseFS{0,16}(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"L_z does not conserve parity, so both blocks are required. First combine the bases of each block and convert to DVecs.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"dvs = map(b -> DVec(b => 1.0), vcat(basis1, basis2));","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"and then compute overlaps for the matrix elements of L_z.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_mat = [dot(v, Lz, w) for v in dvs, w in dvs]","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"10×10 Matrix{ComplexF64}:\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0-1.41421im  0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im  0.0+0.0im      0.0+0.0im      0.0-2.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.41421im  0.0+1.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+1.73205im\n 0.0-1.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+1.41421im  0.0+1.0im      0.0+0.0im      0.0-1.41421im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+1.41421im  0.0+0.0im      0.0-1.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im\n 0.0+0.0im      0.0+0.0im      0.0+2.0im      0.0+0.0im      0.0-1.73205im  0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im      0.0+0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"By diagonalising this matrix the eigenstate have energy E and well-defined angular momentum.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Diagonalise this matrix to obtain the eigenstates of L_z. The eigenvectors provide the linear combinations of basis states with well-defined angular momentum, within the subspace of energy E.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Lz_vals, Lz_vecs = eigen(Lz_mat)","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Eigen{ComplexF64, Float64, Matrix{ComplexF64}, Vector{Float64}}\nvalues:\n10-element Vector{Float64}:\n -2.9999999999999956\n -2.999999999999991\n -0.9999999999999991\n -0.9999999999999982\n -0.9999999999999973\n  1.0000000000000002\n  1.0000000000000027\n  1.0000000000000027\n  3.0\n  3.0000000000000004\nvectors:\n10×10 Matrix{ComplexF64}:\n       0.0+0.0im       -5.55112e-17-0.353553im         0.534676-0.217841im      2.77556e-17-0.204124im             0.0+0.0im           0.534676+0.217841im      2.77556e-17+0.204124im             0.0+0.0im       -5.55112e-17+0.353553im           0.0+0.0im\n       0.0+0.0im        5.55112e-17-0.5im             -0.378073+0.154037im              0.0-0.288675im             0.0+0.0im          -0.378073-0.154037im     -5.55112e-17+0.288675im             0.0+0.0im                0.0+0.5im                0.0+0.0im\n       0.0+0.612372im           0.0+0.0im          -5.55112e-17+0.0im           -1.2326e-32+2.77556e-17im          0.0+0.353553im           0.0+0.0im                   0.0+2.77556e-17im          0.0+0.353553im           0.0+0.0im                0.0+0.612372im\n       0.0+0.0im                0.0+0.353553im      5.55112e-17+6.93889e-17im           0.0-0.612372im             0.0+0.0im        5.55112e-17-1.38778e-16im           0.0+0.612372im             0.0+0.0im                0.0-0.353553im           0.0+0.0im\n       0.0-0.353553im    1.2326e-32+1.11022e-16im   5.55112e-17-2.77556e-17im  -2.46519e-32-2.77556e-17im          0.0+0.612372im  -1.11022e-16-2.77556e-17im   4.93038e-32-2.77556e-17im          0.0+0.612372im   -1.2326e-32+8.32667e-17im        0.0-0.353553im\n       0.0+0.0im           0.353553+0.0im                   0.0+0.0im              0.612372+0.0im                  0.0+0.0im                0.0+0.0im              0.612372+0.0im                  0.0+0.0im           0.353553+0.0im                0.0+0.0im\n -0.353553+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.612372+0.0im                0.0+0.0im                   0.0+0.0im             0.612372+0.0im                0.0+0.0im           0.353553+0.0im\n       0.0+0.0im               -0.5+7.02973e-17im     -0.154037-0.378073im         0.288675-1.95105e-16im          0.0+0.0im          -0.154037+0.378073im         0.288675+2.29062e-16im          0.0+0.0im               -0.5-7.48398e-17im        0.0+0.0im\n       0.0+0.0im          -0.353553+8.84171e-17im      0.217841+0.534676im         0.204124-1.1389e-16im   8.32667e-17+0.0im           0.217841-0.534676im         0.204124+2.4427e-16im   8.32667e-17+0.0im          -0.353553-8.31718e-17im        0.0+0.0im\n  0.612372+0.0im                0.0+0.0im                   0.0+0.0im                   0.0+0.0im            -0.353553-0.0im                0.0+0.0im                   0.0+0.0im             0.353553+0.0im                0.0+0.0im          -0.612372-0.0im","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Finally, consider the effect of interactions by looking at how states in a single block are perturbed. Only the energy shift due to the interaction is relevant so now rebuild the Hamiltonian without the non-interacting energy.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Hint = HOCartesianContactInteractions(addr1; S, interaction_only = true)\nΔE = eigvals(Matrix(Hint, addr1))","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"5-element Vector{Float64}:\n -1.6810327175633306e-17\n  3.469966302164114e-17\n  0.15915494309189535\n  0.1591549430918954\n  0.1591549430918954","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Two eigenstates in this block are unaffected by the interaction and three have a non-zero energy shift.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"The default strength of the interaction is g = 1.0. Other interactions strengths can be obtained by using keyword argument g in HOCartesianContactInteractions or by rescaling ΔE since the interactions are handled with first-order perturbation theory.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"Rimu also contains HOCartesianEnergyConservedPerDim which is a similar Hamiltonian but with the stricter condition that the contact interaction only connects states that have the same total energy in each dimension, rather than conserving the overall total energy. Both Hamiltonians can handle anisotropic systems by passing a tuple S whose elements are not all the same. This will alter which states are connected by the interaction, but assumes that the harmonic trapping frequencies in each dimension are commensurate.","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"","category":"page"},{"location":"generated/HO-example.html","page":"Degenerate perturbation theory in a harmonic oscillator basis","title":"Degenerate perturbation theory in a harmonic oscillator basis","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"EditURL = \"../../../scripts/exact-example.jl\"","category":"page"},{"location":"generated/exact-example.html#Example-4:-Exact-diagonalization","page":"Exact diagonalization","title":"Example 4: Exact diagonalization","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When working with smaller systems or when multiple eigenvalues of a system are required, one can use an exact diagonalization method. There are a few ways to go about this, each with its pros and cons. The purpose of this tutorial is to show off the methods as well as provide a few tips regarding them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"A runnable script for this example is located here. Run it with julia exact-example.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We start by loading Rimu.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Rimu","category":"page"},{"location":"generated/exact-example.html#Introduction","page":"Exact diagonalization","title":"Introduction","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"We will look at a bosonic system of 4 particles in 5 sites, formulated in momentum space. Let's start by building the Hamiltonian. To create a Fock state where all particles have zero momentum, we put all the particles in the mode at the centre of the address.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"M = 5\nN = 4\nadd = BoseFS(M, cld(M, 2) => N)\nham = HubbardMom1D(add)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"HubbardMom1D(BoseFS{4,5}(0, 0, 4, 0, 0); u=1.0, t=1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Before performing exact diagonalization, it is a good idea to check the dimension of the Hamiltonian.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dimension(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"70","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that this is an estimate of the number of Fock states the Hamiltonian can act on, not the actual matrix size - the matrix size can sometimes be smaller. It can still be used as a guide to decide whether a Hamiltonian is amenable to exact diagonalization and to determine which algorithm would be best suited to diagonalising it.","category":"page"},{"location":"generated/exact-example.html#The-BasisSetRepresentation","page":"Exact diagonalization","title":"The BasisSetRepresentation","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As we'll see later, there are two ways to construct the matrices from Hamiltonians directly, but they both use BasisSetRepresentation under the hood. The BasisSetRepresentation, when called with a Hamiltonian and optionally a starting address, constructs the sparse matrix of the system, as well as its basis. The starting address defaults to the one that was used to initialize the Hamiltonian. BasisSetRepresentation only returns the part of the matrix that is accessible from this starting address through non-zero offdiagonal elements.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr = BasisSetRepresentation(ham);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To access the matrix or basis, access the sparse_matrix and basis fields, respectively.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.sparse_matrix","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"bsr.basis","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{BoseFS{4, 5, BitString{8, 1, UInt8}}}:\n fs\"|0 0 4 0 0⟩\"\n fs\"|0 1 2 1 0⟩\"\n fs\"|1 0 2 0 1⟩\"\n fs\"|1 0 1 2 0⟩\"\n fs\"|0 0 1 1 2⟩\"\n fs\"|0 2 1 0 1⟩\"\n fs\"|2 1 1 0 0⟩\"\n fs\"|0 2 0 2 0⟩\"\n fs\"|1 1 0 1 1⟩\"\n fs\"|2 0 0 0 2⟩\"\n fs\"|0 0 0 3 1⟩\"\n fs\"|3 0 0 1 0⟩\"\n fs\"|0 1 0 0 3⟩\"\n fs\"|1 3 0 0 0⟩\"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"When the basis is not needed, we can use Matrix or sparse directly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Matrix(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -6.8       0.69282   0.69282   0.0       0.0       0.0       0.0        0.0       0.0       0.0       0.0       0.0       0.0       0.0\n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843  0.0       0.0       0.0       0.0       0.0\n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8        0.0       0.282843  0.565685  0.0       0.0       0.0       0.0\n  0.0       0.8       0.4       0.581966  0.4       0.0       0.4        0.282843  0.565685  0.0       0.69282   0.69282   0.0       0.0\n  0.0       0.4       0.8       0.4       2.81803   0.4       0.0        0.0       0.565685  0.282843  0.69282   0.0       0.69282   0.0\n  0.0       0.8       0.4       0.0       0.4       0.581966  0.4        0.282843  0.565685  0.0       0.0       0.0       0.69282   0.69282\n  0.0       0.4       0.8       0.4       0.0       0.4       2.81803    0.0       0.565685  0.282843  0.0       0.69282   0.0       0.69282\n  0.0       0.565685  0.0       0.282843  0.0       0.282843  0.0       -0.472136  0.8       0.0       0.489898  0.0       0.0       0.489898\n  0.0       0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n  0.0       0.0       0.565685  0.0       0.282843  0.0       0.282843   0.0       0.8       8.47214   0.0       0.489898  0.489898  0.0\n  0.0       0.0       0.0       0.69282   0.69282   0.0       0.0        0.489898  0.489898  0.0       1.56393   0.0       0.0       0.0\n  0.0       0.0       0.0       0.69282   0.0       0.0       0.69282    0.0       0.489898  0.489898  0.0       6.03607   0.0       0.0\n  0.0       0.0       0.0       0.0       0.69282   0.69282   0.0        0.0       0.489898  0.489898  0.0       0.0       6.03607   0.0\n  0.0       0.0       0.0       0.0       0.0       0.69282   0.69282    0.489898  0.489898  0.0       0.0       0.0       0.0       1.56393","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sparse(ham)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 SparseArrays.SparseMatrixCSC{Float64, Int64} with 104 stored entries:\n -6.8       0.69282   0.69282    ⋅         ⋅         ⋅         ⋅          ⋅         ⋅         ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282  -3.03607   0.4       0.8       0.4       0.8       0.4        0.565685  0.282843   ⋅         ⋅         ⋅         ⋅         ⋅ \n  0.69282   0.4       1.43607   0.4       0.8       0.4       0.8         ⋅        0.282843  0.565685   ⋅         ⋅         ⋅         ⋅ \n   ⋅        0.8       0.4       0.581966  0.4        ⋅        0.4        0.282843  0.565685   ⋅        0.69282   0.69282    ⋅         ⋅ \n   ⋅        0.4       0.8       0.4       2.81803   0.4        ⋅          ⋅        0.565685  0.282843  0.69282    ⋅        0.69282    ⋅ \n   ⋅        0.8       0.4        ⋅        0.4       0.581966  0.4        0.282843  0.565685   ⋅         ⋅         ⋅        0.69282   0.69282\n   ⋅        0.4       0.8       0.4        ⋅        0.4       2.81803     ⋅        0.565685  0.282843   ⋅        0.69282    ⋅        0.69282\n   ⋅        0.565685   ⋅        0.282843   ⋅        0.282843   ⋅        -0.472136  0.8        ⋅        0.489898   ⋅         ⋅        0.489898\n   ⋅        0.282843  0.282843  0.565685  0.565685  0.565685  0.565685   0.8       4.4       0.8       0.489898  0.489898  0.489898  0.489898\n   ⋅         ⋅        0.565685   ⋅        0.282843   ⋅        0.282843    ⋅        0.8       8.47214    ⋅        0.489898  0.489898   ⋅ \n   ⋅         ⋅         ⋅        0.69282   0.69282    ⋅         ⋅         0.489898  0.489898   ⋅        1.56393    ⋅         ⋅         ⋅ \n   ⋅         ⋅         ⋅        0.69282    ⋅         ⋅        0.69282     ⋅        0.489898  0.489898   ⋅        6.03607    ⋅         ⋅ \n   ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    ⋅          ⋅        0.489898  0.489898   ⋅         ⋅        6.03607    ⋅ \n   ⋅         ⋅         ⋅         ⋅         ⋅        0.69282   0.69282    0.489898  0.489898   ⋅         ⋅         ⋅         ⋅        1.56393","category":"page"},{"location":"generated/exact-example.html#Computing-eigenvalues","page":"Exact diagonalization","title":"Computing eigenvalues","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now that we have a way of constructing matrices from Hamiltonians, we can use standard Julia functionality to diagonalise them.","category":"page"},{"location":"generated/exact-example.html#The-built-in-method","page":"Exact diagonalization","title":"The built-in method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's begin by looking at the eigen, eigvecs, and eigvals functions from the LinearAlgebra standard library. They operate on dense matrices and return the full spectra, hence they are only useful for small systems, or when all eigenvalues are required.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using LinearAlgebra\n\nmat = Matrix(ham)\neig = eigen(mat);","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The values can be accessed like so:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.values","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.9798639983216155\n -3.363124291613371\n -0.7590191922770746\n  0.1358418221962303\n  0.1578999869460933\n  0.8767114411781396\n  1.530592997097333\n  1.5835732611867464\n  3.072870330325867\n  3.125672653951849\n  4.862107221562182\n  6.26069485038059\n  6.402671211183119\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The vectors are stored as columns in eig.vectors:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eig.vectors","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14×14 Matrix{Float64}:\n -0.980348     0.175378     0.0135766   -2.81719e-15  -0.0221221  -0.0697193   1.3739e-15    0.0314466   -2.35922e-16  -0.0360987   -0.0161557  -5.55112e-17   0.00625248  -0.0058099\n  0.177701     0.932229     0.105473     3.01009e-14   0.225254   -0.132826    9.71445e-17  -0.00292026  -2.09555e-15  -0.0861158   -0.0907789  -4.996e-16     0.0591715   -0.0264275\n  0.0768085   -0.0622307    0.0129069   -6.06251e-14  -0.447424   -0.63969     2.05322e-14   0.383444    -6.54338e-15  -0.431051    -0.181167   -6.10623e-16   0.0599783   -0.106852\n -0.0214153   -0.175119    -0.20169      0.616673      0.522017   -0.296818   -0.31234      -0.122119    -0.123629     -0.106455    -0.126661    0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797    0.0693699     0.0495446   0.416847    0.33773       0.0584554   -0.601232     -0.467179    -0.215841   -0.140166      0.190543    -0.114342\n -0.0214153   -0.175119    -0.20169     -0.616673      0.522017   -0.296818    0.31234      -0.122119     0.123629     -0.106455    -0.126661   -0.0829132     0.148347    -0.0574235\n -0.0119687   -0.0373038    0.0678797   -0.0693699     0.0495446   0.416847   -0.33773       0.0584554    0.601232     -0.467179    -0.215841    0.140166      0.190543    -0.114342\n -0.0138439   -0.165902     0.922758     1.00753e-14   0.1111     -0.172508   -1.30521e-14  -0.207974     2.66454e-15   0.0848902   -0.149153   -8.32667e-16   0.0712921   -0.0301968\n -0.00234782   0.00840544  -0.098969    -9.6867e-15   -0.0847116   0.082999    1.51129e-14   0.274424     3.60822e-15   0.575786    -0.61385    -2.72005e-15   0.353775    -0.259338\n -0.00237613   0.00294196   0.00143189   5.56152e-15   0.0427486   0.0110863  -3.72619e-15  -0.0663108    9.50628e-16   0.00167015   0.0832916   2.91434e-15  -0.448519    -0.8863\n  0.00363555   0.0455298   -0.133824    -0.332825     -0.290831   -0.057199   -0.527627     -0.588225    -0.332816     -0.0472302   -0.18528    -0.00844536    0.0915588   -0.0346434\n  0.00195478   0.0150664    0.0206752   -0.0642658    -0.0638689  -0.0250518   0.0999631    -0.012992    -0.111668      0.0393523    0.423534    0.688046      0.513839    -0.222499\n  0.00195478   0.0150664    0.0206752    0.0642658    -0.0638689  -0.0250518  -0.0999631    -0.012992     0.111668      0.0393523    0.423534   -0.688046      0.513839    -0.222499\n  0.00363555   0.0455298   -0.133824     0.332825     -0.290831   -0.057199    0.527627     -0.588225     0.332816     -0.0472302   -0.18528     0.00844536    0.0915588   -0.0346434","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If you need the full spectrum, but would like to use less memory, consider using the in-place eigen!.","category":"page"},{"location":"generated/exact-example.html#Iterative-sparse-solvers","page":"Exact diagonalization","title":"Iterative sparse solvers","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"For larger Hamiltonians, it is better to use an iterative solver. There are several options. We will look at eigs from Arpack.jl and eigsolve from KrylovKit.jl.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Let's start with Arpack's eigs. It is important to set the nev and which keyword arguments. nev sets the number of eigenpairs to find. which should in most cases be set to :SR, which will find the eigenvalues with the smallest real part.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using Arpack\n\nnum_eigvals = 3\n\nsparse_matrix = sparse(ham)\nvals_ar, vecs_ar = eigs(sparse_matrix; which=:SR, nev=num_eigvals)\nvals_ar","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"3-element Vector{Float64}:\n -6.979863998321619\n -3.3631242916133606\n -0.7590191922770747","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Using KrylovKit's eigsolve is similar, but the nev and which are given as positional arguments. Note that KrylovKit may sometimes return more than nev eigenpairs if it happens to find them.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"using KrylovKit\n\nvals_kk, vecs_kk = eigsolve(sparse_matrix, num_eigvals, :SR)\nvals_kk","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element Vector{Float64}:\n -6.979863998321601\n -3.363124291613371\n -0.7590191922770853\n  0.13584182219621077\n  0.15789998694609508\n  0.876711441178136\n  1.530592997097317\n  1.5835732611867481\n  3.0728703303258706\n  3.1256726539518365\n  4.862107221562165\n  6.260694850380596\n  6.4026712111831126\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Both solvers use variants of the Lanczos algorithm for Hermitian matrices and the Arnoldi algorithm for non-Hermitian ones. These may in some cases miss degenerate eigenpairs.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"If diagonalization takes too long, you can reduce the tolerance by setting the tol keyword argument to eigs or eigsolve. Using drastically lower tolerances than the default can still produce good results in practice. This, however, should be checked on a case-by-case basis.","category":"page"},{"location":"generated/exact-example.html#The-matrix-free-method","page":"Exact diagonalization","title":"The matrix-free method","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"KrylovKit's eigsolve function is implemented in a way that does not require the linear operator and vector to be Julia arrays. Rimu leverages this functionality, which allows diagonalising Hamiltonians without ever needing to construct the matrix - all matrix elements are generated on the fly.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"While this method is by far the slowest of the ones discussed, it also uses drastically less memory. This allows us to diagonalise much larger Hamiltonians.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To use this method, you first need a starting vector. It's best to use PDVec here as it leverages threading during the diagonalization.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(add => 1.0)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|0 0 4 0 0⟩\" => 1.0","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Then, pass that vector and the Hamiltonian to eigsolve.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"vals_mf, vecs_mf = eigsolve(ham, dvec, num_eigvals, :SR; issymmetric=true)\nvals_mf","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321612\n -3.3631242916133406\n -0.7590191922770728\n  0.1578999869460862\n  0.8767114411781503\n  1.5835732611867401\n  3.125672653951839\n  4.862107221562172\n  6.402671211183112\n  9.093371706203953","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Keep in mind that if an eigenvector is orthogonal to dvec, KrylovKit will miss it. Consider the following example:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"eigsolve(ham, vecs_mf[2], num_eigvals, :SR, issymmetric=true)[1]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"1-element Vector{Float64}:\n -3.3631242916133606","category":"page"},{"location":"generated/exact-example.html#Reducing-matrix-size-with-symmetries","page":"Exact diagonalization","title":"Reducing matrix size with symmetries","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"As these matrices tend to get large quickly, memory is usually the bottleneck.  There are currently two methods implemented to reduce the matrix size, ParitySymmetry and TimeReversalSymmetry. These symmetries work by performing a unitary transformation on the Hamiltonian which causes it to become block-diagonal. When building a matrix from a block-diagonal Hamiltonian, only the block that contains the starting address is constructed.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"You should only use these where the relevant symmetries actually apply - no checks are performed to make sure they do. There is also currently no way of using both at the same time. Please consult the documentation for a more in-depth description of these options.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The Hamiltonian presented in this example is compatible with ParitySymmetry. Let's see how the matrix size is reduced when applying it.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ham))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(14, 14)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"size(sparse(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"(10, 10)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"In this small example, the size reduction is modest, but for larger systems, you can expect to reduce the dimension of the matrix by about half.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"all_eigs = eigvals(Matrix(ham))\neven_eigs = eigvals(Matrix(ParitySymmetry(ham)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"10-element Vector{Float64}:\n -6.979863998321621\n -3.3631242916133637\n -0.759019192277076\n  0.1578999869460802\n  0.8767114411781437\n  1.5835732611867417\n  3.125672653951844\n  4.862107221562179\n  6.402671211183117\n  9.093371706203957","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvalues of the transformed Hamiltonian are a subset of the full spectrum. To get the other half, we can pass the even=false keyword argument to ParitySymmetry. When doing that, we need to make sure the starting address of the Hamiltonian is not symmetric under reversal:","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"add_odd = BoseFS(M, cld(M, 2) => N - 3, cld(M, 2) - 1 => 2, cld(M, 2) + 2 => 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"BoseFS{4,5}(0, 2, 1, 0, 1)","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"odd_eigs = eigvals(Matrix(ParitySymmetry(HubbardMom1D(add_odd); even=false)))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"4-element Vector{Float64}:\n 0.135841822196218\n 1.530592997097328\n 3.0728703303258613\n 6.260694850380591","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Now, let's check that combining the two sets of eigenvalues indeed recovers the whole spectrum.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"sort([even_eigs; odd_eigs]) ≈ all_eigs","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"true","category":"page"},{"location":"generated/exact-example.html#Computing-observables","page":"Exact diagonalization","title":"Computing observables","text":"","category":"section"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"Since building a matrix from an operator only builds the part that is reachable from the starting address, we need to use a different approach when computing observables.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"To demonstrate this, we will use the DensityMatrixDiagonal operator, which in this case will give the momentum density.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The idea here is to construct a PDVec from the computed eigenvector and use it directly with the operator.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"dvec = PDVec(zip(bsr.basis, eigvecs(Matrix(ham))[:, 1]))","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"14-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 0 1 2 0⟩\" => -0.0214153\n  fs\"|2 0 0 0 2⟩\" => -0.00237613\n  fs\"|0 0 4 0 0⟩\" => -0.980348\n  fs\"|0 0 0 3 1⟩\" => 0.00363555\n  fs\"|2 1 1 0 0⟩\" => -0.0119687\n  fs\"|1 0 2 0 1⟩\" => 0.0768085\n  fs\"|1 3 0 0 0⟩\" => 0.00363555\n  fs\"|0 1 2 1 0⟩\" => 0.177701\n  fs\"|0 0 1 1 2⟩\" => -0.0119687\n  fs\"|3 0 0 1 0⟩\" => 0.00195478\n  fs\"|0 2 0 2 0⟩\" => -0.0138439\n  fs\"|1 1 0 1 1⟩\" => -0.00234782\n  fs\"|0 1 0 0 3⟩\" => 0.00195478\n  fs\"|0 2 1 0 1⟩\" => -0.0214153","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"The eigenvectors these methods produce are normalized, hence we can use the three-argument dot to compute the values of observables. Here we are computing the single particle momentum density distribution, which is just the diagonal of the single-particle density matrix in momentum space.","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"[dot(dvec, DensityMatrixDiagonal(i), dvec) for i in 1:M]","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"5-element Vector{Float64}:\n 0.0066861389450877905\n 0.033070399772041625\n 3.9204869225657406\n 0.03307039977204162\n 0.006686138945087839","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"","category":"page"},{"location":"generated/exact-example.html","page":"Exact diagonalization","title":"Exact diagonalization","text":"This page was generated using Literate.jl.","category":"page"},{"location":"rimuio.html#Module-RimuIO","page":"I/O","title":"Module RimuIO","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Modules = [RimuIO]","category":"page"},{"location":"rimuio.html#Rimu.RimuIO","page":"I/O","title":"Rimu.RimuIO","text":"Module to provide file input and output functionality for Rimu. Provides convenience functions:\n\nRimuIO.save_df(filename, df::DataFrame) Save dataframe in Arrow format.\nRimuIO.load_df(filename) Load Arrow file into dataframe.\n\n\n\n\n\n","category":"module"},{"location":"rimuio.html#Rimu.RimuIO.load_df-Tuple{Any}","page":"I/O","title":"Rimu.RimuIO.load_df","text":"RimuIO.load_df(filename; propagate_metadata = true, add_filename = true) -> DataFrame\n\nLoad Arrow file into DataFrame. Optionally propagate metadata to DataFrame and add the file name as metadata.\n\nSee also RimuIO.save_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Rimu.RimuIO.save_df-Tuple{Any, DataFrame}","page":"I/O","title":"Rimu.RimuIO.save_df","text":"RimuIO.save_df(filename, df::DataFrame; kwargs...)\n\nSave dataframe in Arrow format.\n\nKeyword arguments are passed on to Arrow.write. Compression is enabled by default for large DataFrames (over 10,000 rows).\n\nTable-level metadata of the DataFrame is saved as Arrow metadata (with String value) unless overwritten with the keyword argument metadata.\n\nSee also RimuIO.load_df.\n\n\n\n\n\n","category":"method"},{"location":"rimuio.html#Index","page":"I/O","title":"Index","text":"","category":"section"},{"location":"rimuio.html","page":"I/O","title":"I/O","text":"Pages   = [\"rimuio.md\"]","category":"page"},{"location":"hamiltonians.html#Module-Hamiltonians","page":"Hamiltonians","title":"Module Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This module contains definitions of Hamiltonians, in particular specific physical models of interest. These are organised by means of an interface around the abstract type AbstractHamiltonian, in the spirit of the AbstractArray interface as discussed in the Julia Documentation.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The Hamiltonians can be used for projector quantum Monte Carlo with ProjectorMonteCarloProblem or for exact diagonalization with ExactDiagonalizationProblem, see Exact Diagonalization.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians","page":"Hamiltonians","title":"Rimu.Hamiltonians","text":"The module Rimu.Hamiltonians defines types and functions for working with Hamiltonians.\n\nExported concrete Hamiltonian types\n\nReal space Hubbard models\n\nHubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D\n\nMomentum space Hubbard models\n\nHubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP\n\nHarmonic oscillator models\n\nHOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity\n\nOther\n\nFroehlichPolaron\nMatrixHamiltonian\nTranscorrelated1D\n\nWrappers\n\nGutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic\n\nObservables\n\nParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nDensityMatrixDiagonal\nMomentum\nAxialAngularMomentumHO\n\nInterface for working with Hamiltonians\n\nAbstractHamiltonian: defined in the module Interfaces\n\n\n\n\n\n","category":"module"},{"location":"hamiltonians.html#Model-Hamiltonians","page":"Hamiltonians","title":"Model Hamiltonians","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Here is a list of fully implemented model Hamiltonians. There are several variants of the Hubbard model in real and momentum space, as well as some other models.","category":"page"},{"location":"hamiltonians.html#Real-space-Hubbard-models","page":"Hamiltonians","title":"Real space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardReal1D\nBoseHubbardReal1D2C\nHubbardReal1DEP\nHubbardRealSpace\nExtendedHubbardReal1D","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1D","text":"HubbardReal1D(address; u=1.0, t=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\n\nSee also\n\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardReal1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardReal1D2C","text":"BoseHubbardReal1D2C(address::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0)\n\nImplements a two-component one-dimensional Bose Hubbard chain in real space.\n\nhatH = hatH_a + hatH_b + Vsum_i n_a_in_b_i\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nua: the on-site interaction parameter parameter for Hamiltonian a.\nub: the on-site interaction parameter parameter for Hamiltonian b.\nta: the hopping strength for Hamiltonian a.\ntb: the hopping strength for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nSee also\n\nHubbardReal1D\nBoseHubbardMom1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardReal1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardReal1DEP","text":"HubbardReal1DEP(address; u=1.0, t=1.0, v_ho=1.0)\n\nImplements a one-dimensional Bose Hubbard chain in real space with external potential.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + sum_i ϵ_i n_i\n+ fracu2sum_i n_i (n_i-1)\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\nv_ho: strength of the external harmonic oscillator potential ϵ_i = v_ho i^2.\n\nThe first index is i=0 and the maximum of the potential occurs in the centre of the lattice.\n\nSee also\n\nHubbardReal1D\nHubbardMom1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardRealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardRealSpace","text":"HubbardRealSpace(address; geometry=PeriodicBoundaries(M,), t=ones(C), u=ones(C, C), v=zeros(C, D))\n\nHubbard model in real space. Supports single or multi-component Fock state addresses (with C components) and various (rectangular) lattice geometries in D dimensions.\n\n  hatH = -sum_langle ijrangleσ t_σ a^_iσ a_jσ +\n  frac12sum_iσ u_σσ n_iσ (n_iσ - 1) +\n  sum_iστu_στ n_iσ n_iτ\n\nIf v is nonzero then this calculates hatH + hatV by adding the harmonic trapping potential\n\n    hatV = sum_iσd v_σd x_di^2 n_iσ\n\nwhere x_di is the distance of site i from the centre of the trap along dimension d.\n\nAddress types\n\nBoseFS: Single-component Bose-Hubbard model.\nFermiFS: Single-component Fermi-Hubbard model.\nCompositeFS: For multi-component models.\n\nNote that a single component of fermions cannot interact with itself. A warning is produced if addressis incompatible with the interaction parameters u.\n\nGeometries\n\nImplemented CubicGrids for keyword geometry\n\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries\n\nDefault is geometry=PeriodicBoundaries(M,), i.e. a one-dimensional lattice with the number of sites M inferred from the number of modes in address.\n\nOther parameters\n\nt: the hopping strengths. Must be a vector of length C. The i-th element of the vector corresponds to the hopping strength of the i-th component.\nu: the on-site interaction parameters. Must be a symmetric matrix. u[i, j] corresponds to the interaction between the i-th and j-th component. u[i, i] corresponds to the interaction of a component with itself. Note that u[i,i] must be zero for fermionic components.\nv: the trap potential strengths. Must be a matrix of size C × D. v[i,j] is the strength of the trap for component i in the jth dimension.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ExtendedHubbardReal1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.ExtendedHubbardReal1D","text":"ExtendedHubbardReal1D(address; u=1.0, v=1.0, t=1.0)\n\nImplements the extended Hubbard model on a one-dimensional chain in real space.\n\nhatH = -t sum_langle ijrangle a_i^ a_j + fracu2sum_i n_i (n_i-1) + v sum_langle ijrangle n_i n_j\n\nArguments\n\naddress: the starting address.\nu: on-site interaction parameter\nv: the next-neighbor interaction\nt: the hopping strength\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Momentum-space-Hubbard-models","page":"Hamiltonians","title":"Momentum space Hubbard models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HubbardMom1D\nBoseHubbardMom1D2C\nHubbardMom1DEP","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1D","text":"HubbardMom1D(address; u=1.0, t=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space.\n\nhatH =  sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2t cos(k)\ncontinuum_dispersion: ϵ_k = tk^2\n\nSee also\n\nHubbardReal1D\nExtendedHubbardReal1D\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.BoseHubbardMom1D2C","page":"Hamiltonians","title":"Rimu.Hamiltonians.BoseHubbardMom1D2C","text":"BoseHubbardMom1D2C(add::BoseFS2C; ua=1.0, ub=1.0, ta=1.0, tb=1.0, v=1.0, kwargs...)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with a two-component Bose gas.\n\nhatH = hatH_a + hatH_b + fracVMsum_kpqr b^_r a^_q b_p a_k δ_r+qp+k\n\nArguments\n\nadd: the starting address.\nua: the u parameter for Hamiltonian a.\nub: the u parameter for Hamiltonian b.\nta: the t parameter for Hamiltonian a.\ntb: the t parameter for Hamiltonian b.\nv: the inter-species interaction parameter V.\n\nFurther keyword arguments are passed on to the constructor of HubbardMom1D.\n\nSee also\n\nBoseFS2C\nBoseHubbardReal1D2C\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HubbardMom1DEP","page":"Hamiltonians","title":"Rimu.Hamiltonians.HubbardMom1DEP","text":"HubbardMom1DEP(address; u=1.0, t=1.0, v_ho=1.0, dispersion=hubbard_dispersion)\n\nImplements a one-dimensional Bose Hubbard chain in momentum space with harmonic external potential.\n\nH = sum_k ϵ_k n_k + fracuMsum_kpqr a^_r a^_q a_p a_k δ_r+qp+k\n            + V_mathrmho \n\nwhere\n\nbeginaligned\nV_mathrmho  = frac1M sum_pq  mathrmDFTV_ext_p-q \n                    a^_p a_q \nV_mathrmext(x) = v_mathrmho x^2 \nendaligned\n\nis an external harmonic potential in momentum space, mathrmDFT_k is a discrete Fourier transform performed by fft()[k%M + 1], and M == num_modes(address).\n\nArguments\n\naddress: the starting address, defines number of particles and sites.\nu: the interaction parameter.\nt: the hopping strength.\ndispersion: defines ϵ_k =t*dispersion(k)\nhubbard_dispersion: ϵ_k = -2t cos(k)\ncontinuum_dispersion: ϵ_k = tk^2\nv_ho: strength of the external harmonic oscillator potential v_mathrmho.\n\nSee also HubbardMom1D, HubbardReal1DEP, Transcorrelated1D, Hamiltonians.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Harmonic-oscillator-models","page":"Hamiltonians","title":"Harmonic oscillator models","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"HOCartesianContactInteractions\nHOCartesianEnergyConservedPerDim\nHOCartesianCentralImpurity","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianContactInteractions","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianContactInteractions","text":"HOCartesianContactInteractions(addr; S, η, g = 1.0, interaction_only = false, block_by_level = true)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions \n\nhatH = sum_i epsilon_mathbfi n_mathbfi + fracg2sum_mathbfijkl \n    V_mathbfijkl a^_mathbfi a^_mathbfj a_mathbfk a_mathbfl\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x  so that single particle energies are \n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to  be greater than 1 so that omega_x is the smallest trapping frequency.\n\nBy default the offdiagonal elements due to the interactions are consistent with first-order  degenerate perturbation theory\n\n    V_mathbfijkl = delta_epsilon_mathbfi + epsilon_mathbfj\n        ^epsilon_mathbfk + epsilon_mathbfl \n        prod_d in x yldots mathcalI(i_dj_dk_dl_d)\n\nwhere the delta function indicates that the total noninteracting energy is conserved meaning all states with the same noninteracting energy are connected by this interaction and  the Hamiltonian blocks according to noninteracting energy levels. Setting block_by_level = false will disable this restriction and allow coupling between  basis states of any noninteracting energy level, leading to many more offdiagonals and  fewer but larger blocks (the blocks are still distinguished by parity of basis states). Alternatively, see HOCartesianEnergyConservedPerDim for a model with the stronger  restriction that conserves energy separately per spatial dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator  basis functions, implemented in four_oscillator_integral_general.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. The    allowed couplings between states is defined by the aspect ratio of S .- 1. Defaults    to a 1D spectrum with number of levels matching modes of addr. Will be sorted to make    the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. This will only affect the single particle energy scale and not the    interactions. The values are always scaled relative to the first dimension, which sets    the energy scale of the system, hbaromega_x.\ng: the (isotropic) bare interaction parameter. The value of g is assumed    to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are    ignored. Useful if only energy shifts due to interactions are required.\nblock_by_level: if set to false will allow the interactions to couple all states without    comparing their noninteracting energy.\n\nwarning: Warning\nnum_offdiagonals is a bad estimate for this Hamiltonian. Take care when building  a matrix or using QMC methods. Use get_all_blocks first then pass option col_hint = block_size to BasisSetRep to safely build the matrix.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianEnergyConservedPerDim","text":"HOCartesianEnergyConservedPerDim(addr; S, η, g = 1.0, interaction_only = false)\n\nImplements a bosonic harmonic oscillator in Cartesian basis with contact interactions \n\nhatH = sum_i ϵ_i n_i + fracg2sum_ijkl V_ijkl a^_i a^_j a_k a_l\n\nwith the additional restriction that the interactions only couple states with the same energy in each dimension separately. See HOCartesianContactInteractions for a model that  conserves total energy.\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots  are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x  so that single particle energies are \n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to  be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfijkl are for a contact interaction calculated in this basis using  first-order degenerate perturbation theory.\n\n    V_mathbfijkl = prod_d in x yldots mathcalI(i_dj_dk_dl_d) \n        delta_i_d + j_d^k_d + l_d\n\nwhere the delta-function indicates that the noninteracting energy is conserved along each dimension. The integral mathcalI(abcd) is of four one dimensional harmonic oscillator  basis functions, see four_oscillator_integral_general, with the additional restriction  that energy is conserved in each dimension.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nS: Tuple of the number of levels in each dimension, including the groundstate. Defaults    to a 1D spectrum with number of levels matching modes of addr. Will be sorted to    make the first dimension the largest.\nη: Define a custom aspect ratio for the trapping potential strengths, instead of deriving   from S .- 1. The values are always scaled relative to the first dimension, which sets    the energy scale of the system, hbaromega_x.\ng: the (isotropic) interparticle interaction parameter. The value of g is assumed    to be in trap units.\ninteraction_only: if set to true then the noninteracting single-particle terms are    ignored. Useful if only energy shifts due to interactions are required.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HOCartesianCentralImpurity","page":"Hamiltonians","title":"Rimu.Hamiltonians.HOCartesianCentralImpurity","text":"HOCartesianCentralImpurity(addr; kwargs...)\n\nHamiltonian of non-interacting particles in an arbitrary harmonic trap with a delta-function  potential at the centre, with strength g,\n\nhatH_mathrmrel = sum_mathbfi ϵ_mathbfi n_mathbfi \n    + gsum_mathbfij V_mathbfij a^_mathbfi a_mathbfj\n\nFor a D-dimensional harmonic oscillator indices mathbfi mathbfj ldots  are D-tuples. The energy scale is defined by the first dimension i.e. hbar omega_x  so that single particle energies are \n\n    fracepsilon_mathbfihbar omega_x = (i_x + 12) + eta_y (i_y+12) + ldots\n\nThe factors eta_y ldots allow for anisotropic trapping geometries and are assumed to  be greater than 1 so that omega_x is the smallest trapping frequency.\n\nMatrix elements V_mathbfij are for a delta function potential calculated in this basis\n\n    V_mathbfij = prod_d in x yldots psi_i_d(0) psi_j_d(0)\n\nOnly even parity states feel this impurity, so all i_d are even. Note that the matrix  representation of this Hamiltonian for a single particle is completely dense in the even-parity  subspace.\n\nArguments\n\naddr: the starting address, defines number of particles and total number of modes.\nmax_nx = num_modes(addr) - 1: the maximum harmonic oscillator index number in the x-dimension.   Must be even. Index number for the harmonic oscillator groundstate is 0.\nηs = (): a tuple of aspect ratios for the remaining dimensions (η_y, ...). Should be empty    for a 1D trap or contain values greater than 1.0. The maximum index    in other dimensions will be the largest even number less than M/η_y.\nS = nothing: Instead of max_nx, manually set the number of levels in each dimension,    including the groundstate. Must be a Tuple of Ints.\ng = 1.0: the strength of the delta impurity in (x-dimension) trap units.\nimpurity_only=false: if set to true then the trap energy terms are ignored. Useful if    only energy shifts due to the impurity are required.\n\nwarning: Warning\nDue to use of `SpecialFunctions` with large arguments the matrix representation of \nthis Hamiltonian may not be strictly symmetric, but is approximately symmetric within\nmachine precision.\n\nSee also HOCartesianContactInteractions andHOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Other","page":"Hamiltonians","title":"Other","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"MatrixHamiltonian\nTranscorrelated1D\nFroehlichPolaron","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.MatrixHamiltonian","page":"Hamiltonians","title":"Rimu.Hamiltonians.MatrixHamiltonian","text":"MatrixHamiltonian(\n    mat::AbstractMatrix{T};\n    starting_address::Int = starting_address(mat)\n) <: AbstractHamiltonian{T}\n\nWrap an abstract matrix mat as an AbstractHamiltonian object. Works with stochastic methods of lomc!() and DVec. Optionally, a valid index can be provided as the starting_address.\n\nSpecialised methods are implemented for sparse matrices of type AbstractSparseMatrixCSC. One based indexing is required for the matrix mat.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Transcorrelated1D","page":"Hamiltonians","title":"Rimu.Hamiltonians.Transcorrelated1D","text":"Transcorrelated1D(address; t=1.0, v=1.0, v_ho=0.0, cutoff=1, three_body_term=true)\n\nImplements a transcorrelated Hamiltonian for contact interactions in one dimensional momentum space from Jeszenski et al. (2018). Currently limited to two component fermionic addresses.\n\nbeginaligned\n\ntildeH = t sum_kσk^2 n_kσ \n    quad + sum_pqkσσ T_pqk a^_p-kσ a^_q+kσ a_qσ a_pσ \n    quad + sum_pqskkσσ Q_kka^_p-kσ a^_q+kσ a^_s+k-kσ\n                                       a_sσ a_qσ a_pσ \n    quad + V_mathrmho\nendaligned\n\nwhere\n\nbeginaligned\ntildeu(k) = begincases -frac2k^2 mathrmif  k  k_c\n0  mathrmotherwise\nendcases\n\n\nT_pqk = fracvM + frac2vMleftk^2tildeu(k)\n          - (p - q)ktildeu(k)right + frac2v^2tW(k)\nW(k) = frac1M^2sum_q (k - q)q tildeu(q)tildeu(k - q) \nQ_kl = -fracv^2t M^2k tildeu(k)ltildeu(l)\nendaligned\n\nArguments\n\naddress: The starting address, defines number of particles and sites.\nv: The interaction parameter.\nt: The kinetic energy prefactor.\nv_ho: Strength of the external harmonic oscillator potential V_mathrmho. See HubbardMom1DEP.\ncutoff controls k_c in equations above. Note: skipping generating off-diagonal elements below the cutoff is not implemented - zero-valued elements are returned instead.\nthree_body_term: If set to false, generating three body excitations is skipped. Note: when disabling three body terms, cutoff should be set to a higher value for best results.\n\nSee also\n\nHubbardMom1D\nHubbardMom1DEP\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.FroehlichPolaron","page":"Hamiltonians","title":"Rimu.Hamiltonians.FroehlichPolaron","text":"FroehlichPolaron(address::OccupationNumberFS{M}; kwargs...) <: AbstractHamiltonian\n\nThe Froehlich polaron Hamiltonian for a 1D lattice with M momentum modes is given by\n\nH = (p_f - p)^2m + ωN - v Σₖ(aₖ^ + aₖ)\n\nwhere p is the total momentum, p_f = Σ_k k aₖ^ aₖ is the momentum operator for the bosons, and k part of the momentum lattice with separation 2πl. N is the number operator for the bosons.\n\nKeyword Arguments\n\np=0.0: the total momentum p.\nv=1.0: the coupling strength v.\nmass=1.0: the particle mass m.\nomega=1.0: the oscillation frequency of the phonons ω.\nl=1.0: the box size in real space l. Provides scale parameter of the momentum   lattice.\nmomentum_cutoff=nothing: the maximum boson momentum allowed for an address.\nmode_cutoff: the maximum number of bosons in each momentum mode. Defaults to the maximum   value supported by the address type OccupationNumberFS.\n\nExamples\n\njulia> fs = OccupationNumberFS(0,0,0)\nOccupationNumberFS{3, UInt8}(0, 0, 0)\n\njulia> ham = FroehlichPolaron(fs; v=0.5)\nFroehlichPolaron(fs\"|0 0 0⟩{8}\"; v=0.5, mass=1.0, omega=1.0, l=1.0, p=0.0, mode_cutoff=255)\n\njulia> dimension(ham)\n16777216\n\njulia> dimension(FroehlichPolaron(fs; v=0.5, mode_cutoff=5))\n216\n\nSee also OccupationNumberFS, dimension, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Convenience-functions","page":"Hamiltonians","title":"Convenience functions","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"rayleigh_quotient\nmomentum\nhubbard_dispersion\ncontinuum_dispersion\nshift_lattice\nshift_lattice_inv","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.rayleigh_quotient","page":"Hamiltonians","title":"Rimu.Hamiltonians.rayleigh_quotient","text":"rayleigh_quotient(H, v)\n\nReturn the Rayleigh quotient of the linear operator H and the vector v:\n\nfrac v  H  v  vv \n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.momentum","text":"momentum(ham::AbstractHamiltonian)\n\nMomentum as a linear operator in Fock space. Pass a Hamiltonian ham in order to convey information about the Fock basis. Returns an AbstractHamiltonian that represents the momentum operator.\n\nNote: momentum is currently only defined on HubbardMom1D.\n\nExample\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3));\n\n\njulia> ham = HubbardMom1D(add; u = 2.0, t = 1.0);\n\n\njulia> mom = momentum(ham);\n\n\njulia> diagonal_element(mom, add) # calculate the momentum of a single configuration\n-1.5707963267948966\n\njulia> v = DVec(add => 10; capacity=1000);\n\n\njulia> rayleigh_quotient(mom, v) # momentum expectation value for state vector `v`\n-1.5707963267948966\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.hubbard_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.hubbard_dispersion","text":"hubbard_dispersion(k)\n\nDispersion relation for HubbardMom1D. Returns -2cos(k).\n\nSee also continuum_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.continuum_dispersion","page":"Hamiltonians","title":"Rimu.Hamiltonians.continuum_dispersion","text":"continuum_dispersion(k)\n\nDispersion relation for HubbardMom1D. Returns k^2.\n\nSee also hubbard_dispersion.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice","text":"shift_lattice(is)\n\nCircular shift contiguous indices is in interval [M÷2, M÷2) such that set starts with 0, where M=length(is).\n\nInverse operation: shift_lattice_inv. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.shift_lattice_inv","page":"Hamiltonians","title":"Rimu.Hamiltonians.shift_lattice_inv","text":"shift_lattice_inv(js)\n\nCircular shift indices starting with 0 into a contiguous set in interval [M÷2, M÷2), where M=length(js).\n\nInverse operation of shift_lattice. Used in HubbardReal1DEP and HubbardMom1DEP\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Hamiltonian-wrappers","page":"Hamiltonians","title":"Hamiltonian wrappers","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following Hamiltonians are constructed from an existing Hamiltonian instance and change its behaviour:","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"GutzwillerSampling\nGuidingVectorSampling\nParitySymmetry\nTimeReversalSymmetry\nStoquastic","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GutzwillerSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GutzwillerSampling","text":"GutzwillerSampling(::AbstractHamiltonian; g)\n\nWrapper over any AbstractHamiltonian that implements Gutzwiller sampling. In this importance sampling scheme the Hamiltonian is modified as follows\n\ntildeH_ij = H_ij e^-g(H_ii - H_jj) \n\nThis way off-diagonal spawns to higher-energy configurations are discouraged and spawns to lower-energy configurations encouraged for positive g.\n\nConstructor\n\nGutzwillerSampling(::AbstractHamiltonian, g)\nGutzwillerSampling(::AbstractHamiltonian; g)\n\nAfter construction, we can access the underlying Hamiltonian with G.hamiltonian and the g parameter with G.g.\n\nExample\n\njulia> H = HubbardMom1D(BoseFS(1,1,1); u=6.0, t=1.0)\nHubbardMom1D(BoseFS{3,3}(1, 1, 1); u=6.0, t=1.0)\n\njulia> G = GutzwillerSampling(H, g=0.3)\nGutzwillerSampling(HubbardMom1D(BoseFS{3,3}(1, 1, 1); u=6.0, t=1.0); g=0.3)\n\njulia> get_offdiagonal(H, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 2.0)\n\njulia> get_offdiagonal(G, BoseFS(2, 1, 0), 1)\n(BoseFS{3,3}(1, 0, 2), 0.8131393194811987)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.GuidingVectorSampling","page":"Hamiltonians","title":"Rimu.Hamiltonians.GuidingVectorSampling","text":"GuidingVectorSampling\n\nWrapper over any AbstractHamiltonian that implements guided vector a.k.a. guided wave function sampling. In this importance sampling scheme the Hamiltonian is modified as follows.\n\ntildeH_ij = v_i H_ij v_j^-1\n\nand where v is the guiding vector. v_i and v_j are also thresholded to avoid dividing by zero (see below).\n\nConstructors\n\nGuidingVectorSampling(::AbstractHamiltonian, vector, eps)\nGuidingVectorSampling(::AbstractHamiltonian; vector, eps)\n\neps is a thresholding parameter used to avoid dividing by zero; all values below eps are set to eps. It is recommended that eps is in the same value range as the guiding vector. The default value is set to eps=norm(v, Inf) * 1e-2\n\nAfter construction, we can access the underlying hamiltonian with G.hamiltonian, the eps parameter with G.eps, and the guiding vector with G.vector.\n\nExample\n\njulia> H = HubbardReal1D(BoseFS(1,1,1); u=6.0, t=1.0);\n\njulia> v = DVec(starting_address(H) => 10; capacity=1);\n\njulia> G = GuidingVectorSampling(H, v, 0.1);\n\njulia> get_offdiagonal(H, starting_address(H), 4)\n(BoseFS{3,3}(2, 0, 1), -1.4142135623730951)\n\njulia> get_offdiagonal(G, starting_address(G), 4)\n(BoseFS{3,3}(2, 0, 1), -0.014142135623730952)\n\nObservables\n\nTo calculate observables, pass the transformed Hamiltonian G to AllOverlaps with keyword argument transform=G.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParitySymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParitySymmetry","text":"ParitySymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd parity on all states and the Hamiltonian ham as controlled by the keyword argument even. Parity symmetry of the Hamiltonian is assumed. For some Hamiltonians, ParitySymmetry reduces the size of the Hilbert space by half.\n\nParitySymmetry performs a unitary transformation, leaving the eigenvalues unchanged and preserving the LOStructure. This is achieved by changing the basis set to states with defined parity. Effectively, a non-even address α is replaced by frac12(α  α) for even and odd parity, respectively, where ᾱ == reverse(α).\n\nNotes\n\nThis modifier currently only works on starting_addresss with an odd number of modes.\nFor odd parity, the starting_address of the underlying Hamiltonian cannot be symmetric.\nIf parity is not a symmetry of the Hamiltonian ham then the result is undefined.\nParitySymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardReal1D(BoseFS(0,2,1))\nHubbardReal1D(BoseFS{3,3}(0, 2, 1); u=1.0, t=1.0)\n\njulia> size(Matrix(ham))\n(10, 10)\n\njulia> size(Matrix(ParitySymmetry(ham)))\n(6, 6)\n\njulia> size(Matrix(ParitySymmetry(ham; odd=true)))\n(4, 4)\n\njulia> eigvals(Matrix(ham))[1] ≈ eigvals(Matrix(ParitySymmetry(ham)))[1]\ntrue\n\nSee also TimeReversalSymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.TimeReversalSymmetry","page":"Hamiltonians","title":"Rimu.Hamiltonians.TimeReversalSymmetry","text":"TimeReversalSymmetry(ham::AbstractHamiltonian{T}; even=true) <: AbstractHamiltonian{T}\n\nImpose even or odd time reversal on all states and the Hamiltonian ham as controlled by the keyword argument even. If time reversal is a symmetry of the Hamiltonian it will block (reducing Hilbert space dimension) preserving the eigenvalues and LOStructure.\n\nNotes\n\nThis modifier only works two component starting_addresses.\nFor odd time reversal symmetry, the starting_address of the underlying Hamiltonian must not be symmetric.\nIf time reversal is not a symmetry of the Hamiltonian ham then the result is undefined.\nTimeReversalSymmetry works by modifying the offdiagonals iterator.\n\njulia> ham = HubbardMom1D(FermiFS2C((1,0,1),(0,1,1)));\n\njulia> size(Matrix(ham))\n(3, 3)\n\njulia> size(Matrix(TimeReversalSymmetry(ham)))\n(2, 2)\n\njulia> size(Matrix(TimeReversalSymmetry(ham, even=false)))\n(1, 1)\n\njulia> eigvals(Matrix(TimeReversalSymmetry(ham)))[1] ≈ eigvals(Matrix(ham))[1]\ntrue\n\nSee also ParitySymmetry.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Stoquastic","page":"Hamiltonians","title":"Rimu.Hamiltonians.Stoquastic","text":"Stoquastic(ham <: AbstractHamiltonian) <: AbstractHamiltonian\n\nA wrapper for an AbstractHamiltonian that replaces all off-diagonal matrix elements v by -abs(v), thus making the new Hamiltonian stoquastic.\n\nA stoquastic Hamiltonian does not have a Monte Carlo sign problem. For a hermitian ham the smallest eigenvalue of Stoquastic(ham) is ≤ the smallest eigenvalue of ham.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Observables","page":"Hamiltonians","title":"Observables","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Observables are AbstractHamiltonians that represent a physical observable. Their ground state expectation values can be sampled by passing them into AllOverlaps.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"ParticleNumberOperator\nG2RealCorrelator\nG2RealSpace\nG2MomCorrelator\nSuperfluidCorrelator\nStringCorrelator\nDensityMatrixDiagonal\nMomentum\nAxialAngularMomentumHO","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ParticleNumberOperator","page":"Hamiltonians","title":"Rimu.Hamiltonians.ParticleNumberOperator","text":"ParticleNumberOperator([address]) <: AbstractHamiltonian\n\nThe number operator in Fock space. This operator is diagonal in the Fock basis and returns the number of particles in the Fock state. Passing an address is optional.\n\njulia> h = FroehlichPolaron(fs\"|0 0⟩{}\"; mode_cutoff=5, v=3); bsr = BasisSetRepresentation(h);\n\njulia> gs = DVec(zip(bsr.basis, eigen(Matrix(bsr)).vectors[:,1])); # ground state\n\njulia> dot(gs, ParticleNumberOperator(), gs) # particle number expectation value\n2.8823297252925917\n\nSee also AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealCorrelator","text":"G2RealCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nTwo-body operator for density-density correlation between sites separated by d with 0 ≤ d < M.\n\n    hatG^(2)(d) = frac1M sum_i^M hatn_i (hatn_i+d - delta_0d)\n\nAssumes a one-dimensional lattice with periodic boundary conditions where\n\n    hatG^(2)(-M2 leq d  0) = hatG^(2)(d)\n\n    hatG^(2)(M2  d  M) = hatG^(2)(M - d)\n\nand normalisation\n\n    sum_d=0^M-1 langle hatG^(2)(d) rangle = fracN (N-1)M\n\nFor multicomponent basis, calculates correlations between all particles equally, equivalent to stacking all components into a single Fock state.\n\nArguments\n\nd::Integer: distance between sites.\n\nSee also\n\nHubbardReal1D\nG2RealSpace\nG2MomCorrelator\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2RealSpace","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2RealSpace","text":"G2RealSpace(geometry::CubicGrid, σ=1, τ=1; sum_components=false) <: AbstractHamiltonian{SArray}\n\nTwo-body operator for density-density correlation for all Displacements d in the specified geometry.\n\n    hatG^(2)_στ(d) = frac1M _i n_σi (n_τi+d - δ_0dδ_στ)\n\nFor multicomponent addresses, σ and τ control the components involved. Alternatively, sum_components can be set to true, which treats all particles as belonging to the same component.\n\nExamples\n\njulia> geom = CubicGrid(2, 2);\n\njulia> g2 = G2RealSpace(geom)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,1)\n\njulia> diagonal_element(g2, BoseFS(2,0,1,1))\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\njulia> g2_cross = G2RealSpace(geom, 1, 2)\nG2RealSpace(CubicGrid((2, 2), (true, true)), 1,2)\n\njulia> g2_sum = G2RealSpace(geom, sum_components=true)\nG2RealSpace(CubicGrid((2, 2), (true, true)); sum_components=true)\n\njulia> diagonal_element(g2, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.0  0.0\n 0.0  0.5\n\njulia> diagonal_element(g2_cross, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.25  0.25\n 0.25  0.25\n\njulia> diagonal_element(g2_sum, fs\"|⇅⋅↓↑⟩\")\n2×2 StaticArraysCore.SMatrix{2, 2, Float64, 4} with indices SOneTo(2)×SOneTo(2):\n 0.5  1.0\n 0.5  1.0\n\nSee also\n\nCubicGrid\nHubbardRealSpace\nG2RealCorrelator\nG2MomCorrelator\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.G2MomCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.G2MomCorrelator","text":"G2MomCorrelator(d::Int,c=:cross) <: AbstractHamiltonian{ComplexF64}\n\nTwo-body correlation operator representing the density-density correlation at distance d of a two component system in a momentum-space Fock-state basis. It returns a Complex value.\n\nCorrelation across two components:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s b^_p  b_q a_r δ_s+pq+r\n\nCorrelation within a single component:\n\nhatG^(2)(d) = frac1Msum_spqr=1^M e^-id(p-q)2πM a^_s a^_p  a_q a_r δ_s+pq+r\n\nThe diagonal element, where (p-q)=0, is\n\nfrac1Msum_kp=1^M a^_k b^_p  b_p a_k \n\nArguments\n\nd::Integer: the distance between two particles.\nc: possible instructions: :cross: default instruction, computing correlation between particles across two components; :first: computing correlation between particles within the first component; :second: computing correlation between particles within the second component. These are the only defined instructions, using anything else will produce errors.\n\nTo use on a one-component system\n\nFor a system with only one component, e.g. with BoseFS, the second argument c is irrelevant and can be any of the above instructions, one could simply skip this argument and let it be the default value.\n\nSee also\n\nBoseHubbardMom1D2C\nBoseFS2C\nG2RealCorrelator\nG2RealSpace\nAbstractHamiltonian\nAllOverlaps\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.SuperfluidCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.SuperfluidCorrelator","text":"SuperfluidCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nOperator for extracting superfluid correlation between sites separated by a distance d with 0 ≤ d < M:\n\n    hatC_textSF(d) = frac1M sum_i^M a_i^dagger a_i + d\n\nAssumes a one-dimensional lattice with M sites and periodic boundary conditions. M is also the number of modes in the Fock state address.\n\nUsage\n\nSuperfluid correlations can be extracted from a Monte Carlo calculation by wrapping SuperfluidCorrelator with AllOverlaps and passing into lomc! with the replica keyword argument. For an example with a similar use of G2RealCorrelator see G2 Correlator Example.\n\nSee also HubbardReal1D, G2RealCorrelator, AbstractHamiltonian, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.StringCorrelator","page":"Hamiltonians","title":"Rimu.Hamiltonians.StringCorrelator","text":"StringCorrelator(d::Int) <: AbstractHamiltonian{Float64}\n\nOperator for extracting string correlation between lattice sites on a one-dimensional Hubbard lattice separated by a distance d with 0 ≤ d < M\n\n    hatC_textstring(d) = frac1M sum_j^M delta n_j (e^i pi sum_j leq k  j + d delta n_k) delta n_j+d\n\nHere, delta hatn_j = hatn_j - barn is the boson number deviation from the mean filling number and barn = NM is the mean filling number of lattice sites with N particles and M lattice sites (or modes).\n\nAssumes a one-dimensional lattice with periodic boundary conditions. For usage see SuperfluidCorrelator and AllOverlaps.\n\nSee also HubbardReal1D, G2RealCorrelator, SuperfluidCorrelator, AbstractHamiltonian, and AllOverlaps.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.DensityMatrixDiagonal","page":"Hamiltonians","title":"Rimu.Hamiltonians.DensityMatrixDiagonal","text":"DensityMatrixDiagonal(mode; component=0) <: AbstractHamiltonian\n\nRepresent a diagonal element of the single-particle density:\n\nhatn_iσ = hat a^_iσ hat a_iσ\n\nwhere i is the mode and σ is the component. If component is zero, the sum over all components is computed.\n\nSee also\n\nsingle_particle_density\nSingleParticleDensity\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Momentum","page":"Hamiltonians","title":"Rimu.Hamiltonians.Momentum","text":"Momentum(component=0; fold=true) <: AbstractHamiltonian\n\nThe momentum operator hatp.\n\nThe component argument controls which component of the address is taken into consideration. A value of 0 sums the contributions of all components. If fold is true, the momentum is folded into the Brillouin zone.\n\njulia> add = BoseFS((1, 0, 2, 1, 2, 1, 1, 3))\nBoseFS{11,8}(1, 0, 2, 1, 2, 1, 1, 3)\n\njulia> v = DVec(add => 10);\n\njulia> rayleigh_quotient(Momentum(), DVec(add => 1))\n-2.0\n\njulia> rayleigh_quotient(Momentum(fold=false), DVec(add => 1))\n14.0\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AxialAngularMomentumHO","page":"Hamiltonians","title":"Rimu.Hamiltonians.AxialAngularMomentumHO","text":"AxialAngularMomentumHO(S; z_dim = 3, addr = BoseFS(prod(S))) <: AbstractHamiltonian\n\nAngular momentum operator for application to Cartesian harmonic oscillator basis, see HOCartesianContactInteractions or HOCartesianEnergyConservedPerDim. Represents the projection of angular momentum onto z-axis:\n\nhatL_z = i hbar sum_j=1^N left( b_x b_y^dag - b_y b_x^dag right)\n\nwhere b_x^dag and b_x are raising and lowering (ladder) operators for  a harmonic oscillator in the x dimension, and simlarly for y.\n\nThis is implemented for an N particle Fock space with creation and annihilation operators as\n\nfrac1hbar hatL_z = i sum_n_x=1^M_x sum_n_y=1^M_y\n    left( a_n_x-1n_y+1^dag - a_n_x+1n_y-1^dag right) a_n_x n_y\n\nin units of hbar.\n\nArgument S is a tuple defining the range of Cartesian modes in each dimension and their mapping to Fock space modes in a SingleComponentFockAddress. If S indicates a 3D system the z dimension can be changed by setting z_dim; S should be be isotropic in the remaining x-y plane, i.e. must have S[x_dim] == S[y_dim]. The starting address addr only needs to satisfy num_modes(addr) == prod(S).\n\nExample\n\nCalculate the overlap of two Fock addresses interpreted as harmonic oscillator states in a 2D Cartesian basis\n\njulia> S = (2,2)\n(2, 2)\n\njulia> Lz = AxialAngularMomentumHO(S)\nAxialAngularMomentumHO((2, 2); z_dim = 3, addr = BoseFS{0,4}(0, 0, 0, 0))\n\njulia> v = DVec(BoseFS(prod(S), 2 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 1 0 0⟩\" => 1.0\n\njulia> w = DVec(BoseFS(prod(S), 3 => 1) => 1.0)\nDVec{BoseFS{1, 4, BitString{4, 1, UInt8}},Float64} with 1 entry, style = IsDeterministic{Float64}()\n  fs\"|0 0 1 0⟩\" => 1.0\n\njulia> dot(w, Lz, v)\n0.0 + 1.0im\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Hamiltonians-interface","page":"Hamiltonians","title":"Hamiltonians interface","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Behind the implementation of a particular model is a more abstract interface for defining Hamiltonians. If you want to define a new model you should make use of this interface. The most general form of a model Hamiltonian should subtype to AbstractHamiltonian and implement the relevant methods.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"AbstractHamiltonian\noffdiagonals\ndiagonal_element\nstarting_address","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.AbstractHamiltonian","page":"Hamiltonians","title":"Rimu.Interfaces.AbstractHamiltonian","text":"AbstractHamiltonian{T}\n\nSupertype that provides an interface for linear operators over a linear space with scalar type T that are suitable for FCIQMC (with lomc!). Indexing is done with addresses (typically not integers) from an address space that may be large (and will not need to be completely generated).\n\nAbstractHamiltonian instances operate on vectors of type AbstractDVec from the module DictVectors and work well with addresses of type AbstractFockAddress from the module BitStringAddresses. The type works well with the external package KrylovKit.jl.\n\nFor available implementations see Hamiltonians.\n\nInterface\n\nBasic interface methods to implement:\n\nstarting_address(::AbstractHamiltonian)\ndiagonal_element(::AbstractHamiltonian, address)\nnum_offdiagonals(::AbstractHamiltonian, address)\nget_offdiagonal(::AbstractHamiltonian, address, chosen::Integer) (optional, see   below)\n\nOptional additional methods to implement:\n\nLOStructure(::Type{typeof(lo)}): defaults to AdjointUnknown\ndimension(::AbstractHamiltonian, addr): defaults to dimension of address space\nallowed_address_type(h::AbstractHamiltonian): defaults to typeof(starting_address(h))\nmomentum(::AbstractHamiltonian): no default\n\nProvides the following functions and methods:\n\noffdiagonals: iterator over reachable off-diagonal matrix elements\nrandom_offdiagonal: function to generate random off-diagonal matrix element\n*(H, v): deterministic matrix-vector multiply (allocating)\nH(v): equivalent to H * v.\nmul!(w, H, v): mutating matrix-vector multiply.\ndot(x, H, v): compute x⋅(H*v) minimizing allocations.\nH[address1, address2]: indexing with getindex() - mostly for testing purposes (slow!)\nBasisSetRepresentation: construct a basis set repesentation\nsparse, Matrix: construct a (sparse) matrix representation\n\nAlternatively to the above, offdiagonals can be implemented instead of get_offdiagonal. Sometimes this can be done efficiently. In this case num_offdiagonals should provide an upper bound on the number of elements obtained when iterating offdiagonals.\n\nSee also Hamiltonians, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Interfaces.offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.offdiagonals","text":"offdiagonals(h::AbstractHamiltonian, address)\n\nReturn an iterator over nonzero off-diagonal matrix elements of h in the same column as address. Will iterate over pairs (newaddress, matrixelement).\n\nExample\n\njulia> address = BoseFS(3,2,1);\n\n\njulia> H = HubbardReal1D(address);\n\n\njulia> h = offdiagonals(H, address)\n6-element Rimu.Hamiltonians.Offdiagonals{BoseFS{6, 3, BitString{8, 1, UInt8}}, Float64, HubbardReal1D{Float64, BoseFS{6, 3, BitString{8, 1, UInt8}}, 1.0, 1.0}}:\n (fs\"|2 3 1⟩\", -3.0)\n (fs\"|2 2 2⟩\", -2.449489742783178)\n (fs\"|3 1 2⟩\", -2.0)\n (fs\"|4 1 1⟩\", -2.8284271247461903)\n (fs\"|4 2 0⟩\", -2.0)\n (fs\"|3 3 0⟩\", -1.7320508075688772)\n\nPart of the AbstractHamiltonian interface.\n\nExtemded help\n\noffdiagonals return and iterator of type <:AbstractOffdiagonals. It defaults to returning Offdiagonals(h, a)\n\nSee also Offdiagonals, AbstractOffdiagonals.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.diagonal_element","page":"Hamiltonians","title":"Rimu.Interfaces.diagonal_element","text":"diagonal_element(ham, address)\n\nCompute the diagonal matrix element of the linear operator ham at address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> diagonal_element(H, address)\n8.666666666666664\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.starting_address","page":"Hamiltonians","title":"Rimu.Interfaces.starting_address","text":"starting_address(h)\n\nReturn the starting address for Hamiltonian h. When called on an AbstractMatrix, starting_address returns the index of the lowest diagonal element.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> address == starting_address(H)\ntrue\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions may be implemented instead of offdiagonals.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"num_offdiagonals\nget_offdiagonal","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.num_offdiagonals","page":"Hamiltonians","title":"Rimu.Interfaces.num_offdiagonals","text":"num_offdiagonals(ham, address)\n\nCompute the number of number of reachable configurations from address address.\n\nExample\n\njulia> address = BoseFS((3, 2, 1));\n\n\njulia> H = HubbardMom1D(address);\n\n\njulia> num_offdiagonals(H, address)\n10\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.get_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.get_offdiagonal","text":"newadd, me = get_offdiagonal(ham, add, chosen)\n\nCompute value me and new address newadd of a single (off-diagonal) matrix element in a Hamiltonian ham. The off-diagonal element is in the same column as address add and is indexed by integer index chosen.\n\nExample\n\njulia> addr = BoseFS(3, 2, 1);\n\njulia> H = HubbardMom1D(addr);\n\njulia> get_offdiagonal(H, addr, 3)\n(BoseFS{6,3}(2, 1, 3), 1.0)\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"The following functions come with default implementations, but may be customized.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"random_offdiagonal\nHamiltonians.LOStructure\ndimension\nhas_adjoint\nallowed_address_type","category":"page"},{"location":"hamiltonians.html#Rimu.Interfaces.random_offdiagonal","page":"Hamiltonians","title":"Rimu.Interfaces.random_offdiagonal","text":"random_offdiagonal(offdiagonals::AbstractOffdiagonals)\nrandom_offdiagonal(ham::AbstractHamiltonian, add)\n\nGenerate a single random excitation, i.e. choose from one of the accessible off-diagonal elements in the column corresponding to address add of the Hamiltonian matrix represented by ham. Alternatively, pass as argument an iterator over the accessible matrix elements.\n\nPart of the AbstractHamiltonian interface.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.LOStructure","page":"Hamiltonians","title":"Rimu.Interfaces.LOStructure","text":"LOStructure(op::AbstractHamiltonian)\nLOStructure(typeof(op))\n\nReturn information about the structure of the linear operator op. LOStructure is used as a trait to speficy symmetries or other properties of the linear operator op that may simplify or speed up calculations. Implemented instances are:\n\nIsDiagonal(): The operator is diagonal.\nIsHermitian(): The operator is complex and Hermitian or real and symmetric.\nAdjointKnown(): The operator is not Hermitian, but its   adjoint is implemented.\nAdjointUnknown(): adjoint for this operator is not   implemented.\n\nPart of the AbstractHamiltonian interface.\n\nIn order to define this trait for a new linear operator type, define a method for LOStructure(::Type{<:MyNewLOType}) = ….\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.dimension","text":"dimension(h::AbstractHamiltonian, addr=starting_address(h))\ndimension(addr::AbstractFockAddress)\ndimension(::Type{<:AbstractFockAddress})\n\nReturn the estimated dimension of Hilbert space. May return a BigInt number.\n\nWhen called on an address or address type, the dimension of the linear space spanned by the address type is returned. When called on an AbstractHamiltonian, an upper bound on the dimension of the matrix representing the Hamiltonian is returned.\n\nExamples\n\njulia> dimension(OccupationNumberFS(1,2,3))\n16777216\n\njulia> dimension(HubbardReal1D(OccupationNumberFS(1,2,3)))\n28\n\njulia> dimension(BoseFS{200,100})\n1386083821086188248261127842108801860093488668581216236221011219101585442774669540\n\njulia> Float64(ans)\n1.3860838210861882e81\n\nPart of the AbstractHamiltonian interface. See also BasisSetRep.\n\nExtended Help\n\nThe default fallback for dimension called on an AbstractHamiltonian is to return the dimension of the address space, which provides an upper bound. For new Hamiltonians a tighter bound can be provided by defining a custom method.\n\nWhen extending AbstractHamiltonian, define a method for the two-argument form dimension(h::MyNewHamiltonian, addr). For number-conserving Hamiltonians, the function Hamiltonians.number_conserving_dimension may be useful.\n\nWhen extending AbstractFockAddress, define a method for dimension(::Type{MyNewFockAddress}).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.has_adjoint","page":"Hamiltonians","title":"Rimu.Interfaces.has_adjoint","text":"has_adjoint(op)\n\nReturn true if adjoint is defined on op.\n\nPart of the AbstractHamiltonian interface.\n\nSee also LOStructure.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Interfaces.allowed_address_type","page":"Hamiltonians","title":"Rimu.Interfaces.allowed_address_type","text":"allowed_address_type(h::AbstractHamiltonian)\n\nReturn the type of addresses that can be used with Hamiltonian h.\n\nPart of the AbstractHamiltonian interface.\n\nDefaults to typeof(starting_address(h)). Overload this function if the Hamiltonian can be used with addresses of different types.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"This interface relies on unexported functionality, including","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.adjoint\nHamiltonians.dot\nHamiltonians.AbstractOffdiagonals\nHamiltonians.Offdiagonals\nHamiltonians.check_address_type\nHamiltonians.number_conserving_dimension\nHamiltonians.number_conserving_bose_dimension\nHamiltonians.number_conserving_fermi_dimension","category":"page"},{"location":"hamiltonians.html#Base.adjoint","page":"Hamiltonians","title":"Base.adjoint","text":"adjoint(::LOStructure, op::AbstractHamiltonian)\n\nRepresent the adjoint of an AbstractHamiltonian. Extend this method to define custom adjoints.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#LinearAlgebra.dot","page":"Hamiltonians","title":"LinearAlgebra.dot","text":"dot(map::OccupiedModeMap, vec::AbstractVector)\ndot(map1::OccupiedModeMap, map2::OccupiedModeMap)\n\nDot product extracting mode occupation numbers from an OccupiedModeMap similar to onr.\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> dot(mb, 1:7)\n27\n\njulia> mb⋅(1:7) == onr(b)⋅(1:7)\ntrue\n\nSee also SingleComponentFockAddress.\n\n\n\n\n\ndot(w, op::AbstractHamiltonian, v)\n\nEvaluate w⋅op(v) minimizing memory allocations.\n\n\n\n\n\ndot(y::PDVec, A::AbstractHamiltonian, x::PDVec[, w::PDWorkingMemory])\n\nPerform y ⋅ A ⋅ x. The working memory w is required to facilitate threaded/distributed operations with non-diagonal A. If needed and not passed a new instance will be allocated. A can be replaced with a tuple of operators.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.AbstractOffdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.AbstractOffdiagonals","text":"AbstractOffdiagonals{A,T}<:AbstractVector{Tuple{A,T}}\n\nIterator over new address and matrix elements for reachable off-diagonal matrix elements of a linear operator.\n\nSee Offdiagonals for a default implementation.\n\nMethods to define\n\noffdiagonals(h, a)::AbstractOffdiagonals: This function is used to construct the correct type of offdiagonals for a given combination of Hamiltonian h and Fock address a.\nBase.getindex(::AbstractOffdiagonals, i): should be equivalent to get_offdiagonal(h, a, i).\nBase.size(::AbstractOffdiagonals): should be equivalent to num_offdiagonals(h, a).\n\nSee also offdiagonals, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Offdiagonals","page":"Hamiltonians","title":"Rimu.Hamiltonians.Offdiagonals","text":"Offdiagonals(h, address) <: AbstractOffdiagonals\n\nIterator over new address and matrix element for reachable off-diagonal matrix elements of linear operator h from address address.  Represents an abstract vector containing the non-zero off-diagonal matrix elements of the column of h indexed by address. To construct this iterator use offdiagonals.\n\nThis is the default implementation of AbstractOffdiagonals defined in terms of num_offdiagonals and get_offdiagonal.\n\nSee also offdiagonals, AbstractHamiltonian.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.check_address_type","page":"Hamiltonians","title":"Rimu.Hamiltonians.check_address_type","text":"check_address_type(h::AbstractHamiltonian, addr_or_type)\n\nThrow an ArgumentError if addr_or_type is not compatible with h. Acceptable arguments are either an address or an address type, or a tuple or array thereof.\n\nSee also allowed_address_type.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_dimension","text":"number_conserving_dimension(address <: AbstractFockAddress)\n\nReturn the dimension of the Fock space spanned by the address type assuming particle number conservation.\n\nSee also number_conserving_bose_dimension, number_conserving_fermi_dimension, dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_bose_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_bose_dimension","text":"number_conserving_bose_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n bosons in m modes: binomial(n + m - 1, n).\n\nSee also number_conserving_fermi_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.number_conserving_fermi_dimension","page":"Hamiltonians","title":"Rimu.Hamiltonians.number_conserving_fermi_dimension","text":"number_conserving_fermi_dimension(n, m)\n\nReturn the dimension of the number-conserving Fock space for n fermions in m modes: binomial(m, n).\n\nSee also number_conserving_bose_dimension, number_conserving_dimension.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Geometry","page":"Hamiltonians","title":"Geometry","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Lattices in higher dimensions are defined here for HubbardRealSpace and G2RealSpace.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"CubicGrid\nHamiltonians.Directions\nHamiltonians.Displacements\nHamiltonians.neighbor_site\nPeriodicBoundaries\nHardwallBoundaries\nLadderBoundaries","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.CubicGrid","page":"Hamiltonians","title":"Rimu.Hamiltonians.CubicGrid","text":"CubicGrid(dims::NTuple{D,Int}, fold::NTuple{D,Bool})\n\nRepresents a D-dimensional grid. Used to define a cubic lattice and boundary conditions for some AbstractHamiltonians. The type instance can be used to convert between cartesian vector indices (tuples or SVectors) and linear indices (integers). When indexed with vectors, it folds them back into the grid if the out-of-bounds dimension is periodic and 0 otherwise (see example below).\n\ndims controls the size of the grid in each dimension.\nfold controls whether the boundaries in each dimension are periodic (or folded in the case of momentum space).\n\njulia> geo = CubicGrid((2,3), (true,false))\nCubicGrid{2}((2, 3), (true, false))\n\njulia> geo[1]\n(1, 1)\n\njulia> geo[2]\n(2, 1)\n\njulia> geo[3]\n(1, 2)\n\njulia> geo[(1,2)]\n3\n\njulia> geo[(3,2)] # 3 is folded back into 1\n3\n\njulia> geo[(3,3)]\n5\n\njulia> geo[(3,4)] # returns 0 if out of bounds\n0\n\nSee also PeriodicBoundaries, HardwallBoundaries and LadderBoundaries for special-case constructors.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Directions","page":"Hamiltonians","title":"Rimu.Hamiltonians.Directions","text":"Directions(D) <: AbstractVector{SVector{D,Int}}\nDirections(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nIterate over axis-aligned direction vectors in D dimensions.\n\njulia> Directions(3)\n6-element Directions{3}:\n [1, 0, 0]\n [0, 1, 0]\n [0, 0, 1]\n [-1, 0, 0]\n [0, -1, 0]\n [0, 0, -1]\n\n\nSee also CubicGrid.\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.Displacements","page":"Hamiltonians","title":"Rimu.Hamiltonians.Displacements","text":"Displacements(geometry::CubicGrid) <: AbstractVector{SVector{D,Int}}\n\nReturn all valid offset vectors in a CubicGrid. If center=true the (0,0) displacement is placed at the centre of the array.\n\njulia> geometry = CubicGrid((3,4));\n\njulia> reshape(Displacements(geometry), (3,4))\n3×4 reshape(::Displacements{2}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [0, 0]  [0, 1]  [0, 2]  [0, 3]\n [1, 0]  [1, 1]  [1, 2]  [1, 3]\n [2, 0]  [2, 1]  [2, 2]  [2, 3]\n\njulia> reshape(Displacements(geometry; center=true), (3,4))\n3×4 reshape(::Displacements{2}, 3, 4) with eltype StaticArraysCore.SVector{2, Int64}:\n [-1, -1]  [-1, 0]  [-1, 1]  [-1, 2]\n [0, -1]   [0, 0]   [0, 1]   [0, 2]\n [1, -1]   [1, 0]   [1, 1]   [1, 2]\n\n\n\n\n\n\n","category":"type"},{"location":"hamiltonians.html#Rimu.Hamiltonians.neighbor_site","page":"Hamiltonians","title":"Rimu.Hamiltonians.neighbor_site","text":"neighbor_site(geom::CubicGrid, site, i)\n\nFind the i-th neighbor of site in the geometry. If the move is illegal, return 0.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.PeriodicBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.PeriodicBoundaries","text":"PeriodicBoundaries(dims...) -> CubicGrid\nPeriodicBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions periodic. Equivalent to CubicGrid(dims).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.HardwallBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.HardwallBoundaries","text":"HardwallBoundaries(dims...) -> CubicGrid\nHardwallBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid with all dimensions non-periodic. Equivalent to CubicGrid(dims, (false, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.LadderBoundaries","page":"Hamiltonians","title":"Rimu.Hamiltonians.LadderBoundaries","text":"LadderBoundaries(dims...) -> CubicGrid\nLadderBoundaries(dims) -> CubicGrid\n\nReturn CubicGrid where the first dimension is dimensions non-periodic and the rest are periodic. Equivalent to CubicGrid(dims, (true, false, ...)).\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Harmonic-Oscillator","page":"Hamiltonians","title":"Harmonic Oscillator","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Useful utilities for harmonic oscillator in Cartesian basis, see HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"get_all_blocks\nfock_to_cart","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.get_all_blocks","page":"Hamiltonians","title":"Rimu.Hamiltonians.get_all_blocks","text":"get_all_blocks(h::Union{HOCartesianContactInteractions,HOCartesianEnergyConservedPerDim}; \n    target_energy = nothing, \n    max_energy = nothing, \n    max_blocks = nothing, \n    method = :vertices,\n    kwargs...) -> df\n\nFind all distinct blocks of h. Returns a DataFrame with columns \n\nblock_id: index of block in order found\nblock_E0: noninteracting energy of all elements in the block\nblock_size: number of elements in the block\naddr: first address that generates the block with e.g. BasisSetRep\nindices: tuple of mode indices that allow recreation of the generating address    addr; in this case use e.g. BoseFS(M; indices .=> 1) This is useful when    the DataFrame is loaded from file since Arrow.jl converts custom   types to NamedTuples.\nt_basis: time to generate the basis for each block\n\nKeyword arguments:\n\ntarget_energy: only blocks with this noninteracting energy are found\nmax_energy: only blocks with noninteracting energy less than this are found\nmax_blocks: exit after finding this many blocks\nmethod: Choose between :vertices and :comb for method of enumerating    tuples of quantum numbers\nsave_to_file=nothing: if set then the DataFrame recording blocks is saved    after each new block is found\nadditional kwargs: passed to isapprox for comparing block energies.    Useful for anisotropic traps\n\nNote: If h was constructed with option block_by_level = false then the block seeds  addr are determined by parity. In this case the blocks are not generated; t_basis  will be zero, and block_size will be an estimate. Pass the seed addresses to  BasisSetRep with an appropriate filter to generate the blocks.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.fock_to_cart","page":"Hamiltonians","title":"Rimu.Hamiltonians.fock_to_cart","text":"fock_to_cart(addr, S; zero_index = true)\n\nConvert a Fock state address addr to Cartesian harmonic oscillator basis  indices n_xn_yldots. These indices are bounded by S which is a  tuple of the maximum number of states in each dimension. By default the  groundstate in each dimension is indexed by 0, but this can be changed  by setting zero_index = false.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Underlying integrals for the interaction matrix elements are implemented in the following unexported functions","category":"page"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Hamiltonians.four_oscillator_integral_general\nHamiltonians.ho_delta_potential\nHamiltonians.log_abs_oscillator_zero","category":"page"},{"location":"hamiltonians.html#Rimu.Hamiltonians.four_oscillator_integral_general","page":"Hamiltonians","title":"Rimu.Hamiltonians.four_oscillator_integral_general","text":"four_oscillator_integral_general(i, j, k, l; max_level = typemax(Int))\n\nIntegral of four one-dimensional harmonic oscillator functions, \n\n    mathcalI(ijkl) = int_-infty^infty dx  \n    phi_i(x) phi_j(x) phi_k(x) phi_l(x)\n\nIndices i,j,k,l start at 0 for the groundstate.\n\nThis integral has a closed form in terms of the hypergeometric _3F_2 function,  and is non-zero unless i+j+k+l is odd. See e.g.  Titchmarsh (1948). This is a generalisation of the closed form in  Papenbrock (2002), which is is the special  case where i+j == k+l, but is numerically unstable for large arguments. Used in HOCartesianContactInteractions and HOCartesianEnergyConservedPerDim.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.ho_delta_potential","page":"Hamiltonians","title":"Rimu.Hamiltonians.ho_delta_potential","text":"ho_delta_potential(S, i, j; [vals])\n\nReturns the matrix element of a delta potential at the centre of a trap, i.e. the  product of two harmonic oscillator functions evaluated at the origin, \n\n    v_ij = phi_mathbfn_i(0) phi_mathbfn_j(0)\n\nwhich is only non-zero for even-parity states. The ith single particle state  corresponds to a D-tuple of harmonic oscillator indices mathbfn_i.  S defines the bounds of Cartesian harmonic oscillator indices for each dimension. The optional keyword argument vals allows passing pre-computed values of  phi_i(0) to speed-up the calculation. The values can be calculated with  log_abs_oscillator_zero.\n\nSee also HOCartesianCentralImpurity.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Rimu.Hamiltonians.log_abs_oscillator_zero","page":"Hamiltonians","title":"Rimu.Hamiltonians.log_abs_oscillator_zero","text":"log_abs_oscillator_zero(n)\n\nCompute the logarithm of the absolute value of the n^mathrmth 1D  harmonic oscillator function evaluated at the origin. The overall sign is determined when the matrix element is evaluated in ho_delta_potential.\n\n\n\n\n\n","category":"function"},{"location":"hamiltonians.html#Index","page":"Hamiltonians","title":"Index","text":"","category":"section"},{"location":"hamiltonians.html","page":"Hamiltonians","title":"Hamiltonians","text":"Pages   = [\"hamiltonians.md\"]","category":"page"},{"location":"RMPI.html#Module-RMPI","page":"RMPI","title":"Module RMPI","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI","category":"page"},{"location":"RMPI.html#Rimu.RMPI","page":"RMPI","title":"Rimu.RMPI","text":"Module for providing MPI functionality for Rimu. This module is unexported. To use it, run\n\nusing Rimu.RMPI\n\n\n\n\n\n","category":"module"},{"location":"RMPI.html#MPIData","page":"RMPI","title":"MPIData","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIData","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIData","page":"RMPI","title":"Rimu.RMPI.MPIData","text":"MPIData(data; kwargs...)\n\nWrapper used for signaling that this data is part of a distributed data structure and communication should happen with MPI. MPIData can generally be used where an AbstractDVec would be used otherwise. Unlike AbstractDVecs, MPIData does not support indexing, or iteration over keys, values, and pairs.\n\nKeyword arguments:\n\nsetup = mpi_point_to_point - controls the communication stratgy\nmpi_one_sided uses one-sided communication with remote memory access (RMA), sets MPIOneSided strategy.\nmpi_point_to_point uses MPIPointToPoint strategy.\nmpi_all_to_all uses MPIAllToAll strategy.\nmpi_no_exchange sets MPINoWalkerExchange strategy. Experimental. Use with caution!\ncomm = mpi_comm()\nroot = mpi_root\nThe rest of the keyword arguments are passed to setup.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Setup-functions","page":"RMPI","title":"Setup functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"The following distribute strategies are available. The functions are unexported.","category":"page"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.mpi_point_to_point\nRimu.RMPI.mpi_one_sided\nRimu.RMPI.mpi_all_to_all\nRimu.RMPI.mpi_no_exchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_point_to_point","page":"RMPI","title":"Rimu.RMPI.mpi_point_to_point","text":"mpi_point_to_point(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to point-to-point.\n\nSets up the MPIData structure with MPIPointToPoint strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_one_sided","page":"RMPI","title":"Rimu.RMPI.mpi_one_sided","text":"mpi_one_sided(data, comm = mpi_comm(), root = mpi_root; capacity)\n\nDeclare data as mpi-distributed and set communication strategy to one-sided with remote memory access (RMA). capacity sets the capacity of the RMA windows.\n\nSets up the MPIData structure with MPIOneSided strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_all_to_all","page":"RMPI","title":"Rimu.RMPI.mpi_all_to_all","text":"mpi_all_to_all(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to all-to-all.\n\nSets up the MPIData structure with MPIAllToAll strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_no_exchange","page":"RMPI","title":"Rimu.RMPI.mpi_no_exchange","text":"mpi_no_exchange(data, comm = mpi_comm(), root = mpi_root)\n\nDeclare data as mpi-distributed and set communication strategy to MPINoWalkerExchange. Sets up the MPIData structure with MPINoWalkerExchange strategy.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Strategies","page":"RMPI","title":"Strategies","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Rimu.RMPI.MPIPointToPoint\nRimu.RMPI.MPIOneSided\nRimu.RMPI.MPIAllToAll\nRimu.RMPI.MPINoWalkerExchange","category":"page"},{"location":"RMPI.html#Rimu.RMPI.MPIPointToPoint","page":"RMPI","title":"Rimu.RMPI.MPIPointToPoint","text":"MPIPointToPoint{N,A}\n\nPoint-to-point communication strategy. Uses circular communication using MPI.Send and MPI.Recv!.\n\nConstructor\n\nMPIPointToPoint(::Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIOneSided","page":"RMPI","title":"Rimu.RMPI.MPIOneSided","text":"MPIOneSided(nprocs, myrank, comm, ::Type{T}, capacity)\n\nCommunication buffer for use with MPI one-sided communication (remote memory access). Up to capacity elements of type T can be exchanged between MPI ranks via put. It is important that isbitstype(T) == true. Objects of type MPIOneSided have to be freed manually with a (blocking) call to free().\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPIAllToAll","page":"RMPI","title":"Rimu.RMPI.MPIAllToAll","text":" MPIAllToAll\n\nAll-to-all communication strategy. The communication works in two steps: first MPI.Alltoall! is used to communicate the number of walkers each rank wants to send to other ranks, then MPI.Alltoallv! is used to send the walkers around.\n\nConstructor\n\nMPIAllToAll(Type{P}, np, id, comm): Construct an instance with pair type P on np processes with current rank id.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#Rimu.RMPI.MPINoWalkerExchange","page":"RMPI","title":"Rimu.RMPI.MPINoWalkerExchange","text":"MPINoWalkerExchange(nprocs, my_rank, comm)\n\nStrategy for not exchanging walkers between ranks. Consequently there will be no cross-rank annihilations.\n\n\n\n\n\n","category":"type"},{"location":"RMPI.html#MPI-convenience-functions","page":"RMPI","title":"MPI convenience functions","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Modules = [Rimu.RMPI]\nPages = [\"helpers.jl\"]\nPrivate = true\nPublic = true","category":"page"},{"location":"RMPI.html#Rimu.RMPI.mpi_root","page":"RMPI","title":"Rimu.RMPI.mpi_root","text":"Default MPI root for RMPI.\n\n\n\n\n\n","category":"constant"},{"location":"RMPI.html#Rimu.DictVectors.mpi_comm-Tuple{}","page":"RMPI","title":"Rimu.DictVectors.mpi_comm","text":"Default MPI communicator for RMPI.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.DictVectors.mpi_rank","page":"RMPI","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(comm = mpi_comm())\n\nReturn the current MPI rank.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.DictVectors.mpi_size","page":"RMPI","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(comm = mpi_comm())\n\nSize of MPI communicator.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.is_mpi_root","page":"RMPI","title":"Rimu.RMPI.is_mpi_root","text":"is_mpi_root(root = mpi_root)\n\nReturns true if called from the root rank\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_allprintln-Tuple","page":"RMPI","title":"Rimu.RMPI.mpi_allprintln","text":"mpi_allprintln(args...)\n\nPrint a message to stdout from each rank separately, in order. MPI synchronizing.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_barrier","page":"RMPI","title":"Rimu.RMPI.mpi_barrier","text":"mpi_barrier(comm = mpi_comm())\n\nThe MPI barrier with optional argument. MPI syncronizing.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.mpi_combine_walkers!-Tuple{Rimu.RMPI.MPIData, AbstractDVec}","page":"RMPI","title":"Rimu.RMPI.mpi_combine_walkers!","text":"mpi_combine_walkers!(target, source, [strategy])\n\nDistribute the entries of source to the target data structure such that all entries in the target are on the process with the correct mpi rank as controlled by targetrank(). MPI syncronizing.\n\nNote: the storage of the source is communicated rather than the source itself.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.mpi_seed!","page":"RMPI","title":"Rimu.RMPI.mpi_seed!","text":"mpi_seed!(seed = rand(Random.RandomDevice(), UInt))\n\nRe-seed the random number generators in an MPI-safe way. If seed is provided, the random numbers from rand will follow a deterministic sequence.\n\nIndependence of the random number generators on different MPI ranks is achieved by adding hash(mpi_rank()) to seed.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.next_mpiID","page":"RMPI","title":"Rimu.RMPI.next_mpiID","text":"next_mpiID()\n\nProduce a new ID number for MPI distributed objects. Uses an internal counter.\n\n\n\n\n\n","category":"function"},{"location":"RMPI.html#Rimu.RMPI.targetrank-Tuple{Union{Integer, AbstractFockAddress}, Any}","page":"RMPI","title":"Rimu.RMPI.targetrank","text":"targetrank(key, np)\n\nCompute the rank where the key belongs.\n\n\n\n\n\n","category":"method"},{"location":"RMPI.html#Rimu.RMPI.@mpi_root-Tuple","page":"RMPI","title":"Rimu.RMPI.@mpi_root","text":"@mpi_root expr\n\nEvaluate expression only on the root rank. Extra care needs to be taken as expr must not contain any code that involves syncronising MPI operations, i.e. actions that would require syncronous action of all MPI ranks.\n\nExample:\n\nwn = walkernumber(dv)   # an MPI syncronising function call that gathers\n                        # information from all MPI ranks\n@mpi_root @info \"The current walker number is\" wn # print info message on root only\n\n\n\n\n\n","category":"macro"},{"location":"RMPI.html#Index","page":"RMPI","title":"Index","text":"","category":"section"},{"location":"RMPI.html","page":"RMPI","title":"RMPI","text":"Pages   = [\"RMPI.md\"]","category":"page"},{"location":"testing.html#Code-testing","page":"Code testing","title":"Code testing","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"The script runtest.jl in the test/ folder contains tests of the code. To run the test simply run the script from the Julia REPL or run","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"Rimu$ julia test/runtest.jl","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"from the command line.","category":"page"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"More tests should be added over time to test core functionality of the code. To add new tests, directly edit the file runtest.jl.","category":"page"},{"location":"testing.html#Automated-testing-with-GitHub-Actions","page":"Code testing","title":"Automated testing with GitHub Actions","text":"","category":"section"},{"location":"testing.html","page":"Code testing","title":"Code testing","text":"GitHub Actions are set up to run the test script automatically on the GitHub cloud server every time a new commit to the master branch is pushed to the server. The setup for this to happen is configured in the file actions.yml in the Rimu/.github/workflows folder.","category":"page"},{"location":"exactdiagonalization.html#Exact-Diagonalization","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"The main functionality of Rimu for exact diagonalization is contained in the module ExactDiagonalization.","category":"page"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalization","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization","text":"The module Rimu.ExactDiagonalization provides a framework for exact diagonalization of quantum many-body systems defined by an AbstractHamiltonian type.\n\nThe main usage is through defining an ExactDiagonalizationProblem and solving it with the solve function. The module provides a unified interface for accessing different solver algorithms, which make use of solvers provided by external packages.\n\nExports\n\nExactDiagonalizationProblem\nBasisSetRepresentation\nbuild_basis\nKrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver\n\n\n\n\n\n","category":"module"},{"location":"exactdiagonalization.html#ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"ExactDiagonalizationProblem","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"ExactDiagonalizationProblem\nsolve(::ExactDiagonalizationProblem)\ninit(::ExactDiagonalizationProblem)","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ExactDiagonalizationProblem","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ExactDiagonalizationProblem","text":"ExactDiagonalizationProblem(hamiltonian::AbstractHamiltonian, [v0]; kwargs...)\n\nDefines an exact diagonalization problem with an AbstractHamiltonian hamiltonian. Optionally, a starting vector of type AbstractDVec, or a single address or a collection of addresses can be passed as v0.\n\nExactDiagonalizationProblems can be solved with solve.\n\nKeyword arguments\n\nalgorithm=LinearAlgebraSolver(): The algorithm to use for solving the problem. The   algorithm can also be specified as the second positional argument in the init   function.\nOptional keyword arguments will be passed on to the init and solve functions.\n\nAlgorithms\n\nLinearAlgebraSolver(): An algorithm for solving the problem using the   dense-matrix eigensolver from the LinearAlgebra standard library (eventually using   LAPACK). Only suitable for small matrices.\nKrylovKitSolver(matrix_free=true): An algorithm for finding a few eigenvalues   and vectors. With matrix_free=true the problem is solved without instatiating a   matrix. This is suitable for large dimensions. With matrix_free=false the problem is   solved after instantiating a sparse matrix. This is faster if sufficient memory is   available. Requires using KrylovKit.\nArpackSolver(): An algorithm for solving the problem after instantiating a   sparse matrix and using the Arpack Fortran library. Requires using Arpack.\nLOBPCGSolver(): An algorithm for solving the problem after instantiating a   sparse matrix using the LOBPCG method. Requires using IterativeSolvers.\n\nKeyword arguments for matrix-based algorithms (also accepted by init)\n\nSee BasisSetRepresentation for more information.\n\nsizelim: The maximum size of the basis set representation. The default is 10^6 for   sparse matrices and 10^5 for dense matrices.\ncutoff: A cutoff value for the basis set representation.\nfilter: A filter function for the basis set representation.\nnnzs = 0: The number of non-zero elements in the basis set representation. Setting a   non-zero value can speed up the computation.\ncol_hint = 0: A hint for the number of columns in the basis set representation.\nsort = false: Whether to sort the basis set representation.\n\nKeyword arguments for iterative algorithms (also accepted by solve)\n\nverbose = false: Whether to print additional information.\nabstol = nothing: The absolute tolerance for the solver. If nothing, the solver   chooses a default value.\nhowmany = 1: The minimum number of eigenvalues to compute.\nwhich = :SR: Whether to compute the largest or smallest eigenvalues.\nmaxiters = nothing: The maximum number of iterations for the solver. If nothing, the   solver chooses a default value.\n\nSolving an ExactDiagonalizationProblem\n\nThe solve function can be called directly on an ExactDiagonalizationProblem to solve it. Alternatively, the init function can be used to initialize a solver, which can then be solved with solve. The solve function returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nResult type\n\nThe result type for the solve function is determined by the algorithm used. It has the following fields:\n\nvalues::Vector: The eigenvalues.\nvectors::Vector{<:AbstractDVec}: The eigenvectors.\nsuccess::Bool: A boolean flag indicating whether the solver was successful.\ninfo: Convergence information.\nalgorithm: The algorithm used for the computation.\nproblem: The ExactDiagonalizationProblem that was solved.\nAdditional fields may be present depending on the algorithm used.\n\nIterating the result type will yield the eigenvalues, eigenvectors, and a boolean flag success in that order.\n\nExamples\n\njulia> p = ExactDiagonalizationProblem(HubbardReal1D(BoseFS(1,1,1)))\nExactDiagonalizationProblem(\n  HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  nothing;\n  NamedTuple()...\n)\n\njulia> result = solve(p) # convert to dense matrix and solve with LinearAlgebra.eigen\nEDResult for algorithm LinearAlgebraSolver() with 10 eigenvalue(s),\n  values = [-5.09593, -1.51882, -1.51882, 1.55611, 1.6093, 1.6093, 4.0, 4.53982, 4.90952, 4.90952],\n  and vectors of length 10.\n  Convergence info: \"Dense matrix eigensolver solution from `LinearAlgebra.eigen`\", with howmany = 10 eigenvalues requested.\n  success = true.\n\njulia> using KrylovKit # an external package has to be installed and loaded\n\njulia> s = init(p; algorithm = KrylovKitSolver(true)) # solve without building a matrix\nKrylovKitDirectEDSolver\n with algorithm KrylovKitSolver(matrix_free = true,) for hamiltonian = HubbardReal1D(fs\"|1 1 1⟩\"; u=1.0, t=1.0),\n  v0 = 1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|1 1 1⟩\" => 1.0,\n  kwargs = NamedTuple()\n)\n\njulia> values, vectors, success = solve(s);\n\njulia> result.values[1] ≈ values[1]\ntrue\n\nSee also solve(::ExactDiagonalizationProblem), init(::ExactDiagonalizationProblem), KrylovKitSolver, ArpackSolver, LinearAlgebraSolver.\n\nnote: Note\nUsing the KrylovKitSolver() algorithms requires the KrylovKit.jl package. The package can be loaded with using KrylovKit. Using the ArpackSolver() algorithm requires the Arpack.jl package. The package can be loaded with using Arpack. Using the LOBPCGSolver() algorithm requires the IterativeSolvers.jl package. The package can be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#CommonSolve.solve-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.solve","text":"solve(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nSolve an ExactDiagonalizationProblem p directly. Optionally specify an algorithm. Returns a result type with the eigenvalues, eigenvectors, and convergence information.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\nSee also solve(::ProjectorMonteCarloProblem).\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#CommonSolve.init-Tuple{ExactDiagonalizationProblem}","page":"Exact Diagonalization","title":"CommonSolve.init","text":"init(p::ExactDiagonalizationProblem, [algorithm]; kwargs...)\n\nInitialize a solver for an ExactDiagonalizationProblem p with an optional algorithm. Returns a solver instance that can be solved with solve.\n\nFor a description of the keyword arguments, see the documentation for ExactDiagonalizationProblem.\n\n\n\n\n\n","category":"method"},{"location":"exactdiagonalization.html#Solver-algorithms","page":"Exact Diagonalization","title":"Solver algorithms","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"KrylovKitSolver\nLinearAlgebraSolver\nArpackSolver\nLOBPCGSolver","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.KrylovKitSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.KrylovKitSolver","text":"KrylovKitSolver(matrix_free::Bool; kwargs...)\nKrylovKitSolver(; matrix_free = false, kwargs...)\n\nAlgorithm for solving a large ExactDiagonalizationProblem to find a few eigenvalues and vectors using the KrylovKit.jl package. The Lanczos method is used for hermitian matrices, and the Arnoldi method is used for non-hermitian matrices.\n\nArguments\n\nmatrix_free = false: Whether to use a matrix-free algorithm. If false, a sparse matrix   will be instantiated. This is typically faster and recommended for small matrices,   but requires more memory. If true, the matrix is not instantiated, which is useful for   large matrices that would not fit into memory. The calculation will parallelise using   threading and MPI if available by making use of PDVec.\nkwargs: Additional keyword arguments are passed on to the function   KrylovKit.eigsolve().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the KrylovKit.jl package to be loaded with using KrylovKit.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LinearAlgebraSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LinearAlgebraSolver","text":"LinearAlgebraSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem using the dense-matrix eigensolver from the LinearAlgebra standard library. This is only suitable for small matrices.\n\nThe kwargs are passed on to function LinearAlgebra.eigen.\n\nKeyword arguments\n\npermute = true: Whether to permute the matrix before diagonalization.\nscale = true: Whether to scale the matrix before diagonalization.\nsortby: The sorting order for the eigenvalues.\n\nSee also ExactDiagonalizationProblem, solve.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.ArpackSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.ArpackSolver","text":"ArpackSolver(; kwargs...)\n\nAlgorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix. It uses the Lanzcos method for hermitian problems, and the Arnoldi method for non-hermitian problems, using the Arpack Fortran library. This is faster than KrylovKitSolver(; matrix_free=true), but it requires more memory and will only be useful if the matrix fits into memory.\n\nThe kwargs are passed on to the function Arpack.eigs().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the Arpack.jl package to be loaded with using Arpack.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.LOBPCGSolver","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.LOBPCGSolver","text":"LOBPCGSolver(; kwargs...)\n\nThe Locally Optimal Block Preconditioned Conjugate Gradient Method (LOBPCG). Algorithm for solving an ExactDiagonalizationProblem after instantiating a sparse matrix.\n\nLOBPCG is not suitable for non-hermitian eigenvalue problems.\n\nThe kwargs are passed on to the function IterativeSolvers.lobpcg().\n\nSee also ExactDiagonalizationProblem, solve.\n\nnote: Note\nRequires the IterativeSolvers.jl package to be loaded with using IterativeSolvers.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Converting-a-Hamiltonian-in-to-a-matrix","page":"Exact Diagonalization","title":"Converting a Hamiltonian in to a matrix","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRepresentation\nbuild_basis\nMatrix\nsparse","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRepresentation","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRepresentation","text":"BasisSetRepresentation(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^6, nnzs, cutoff, filter, sort=false, kwargs...\n)\nBasisSetRepresentation(hamiltonian::AbstractHamiltonian, addresses::AbstractVector; kwargs...)\n\nEagerly construct the basis set representation of the operator hamiltonian with all addresses reachable from addr. Instead of a single address, a vector of addresses can be passed.\n\nAn ArgumentError is thrown if dimension(hamiltonian) > sizelim in order to prevent memory overflow. Set sizelim = Inf in order to disable this behaviour.\n\nProviding the number nnzs of expected calculated matrix elements and col_hint for the estimated number of nonzero off-diagonal matrix elements in each matrix column may improve performance.\n\nProviding an energy cutoff will skip the columns and rows with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. To generate the matrix truncated to the subspace spanned by the addresses, use filter = Returns(false).\n\nSetting sort to true will sort the matrix rows and columns. This is useful when the order of the columns matters, e.g. when comparing matrices. Any additional keyword arguments are passed on to Base.sortperm.\n\nFields\n\nsparse_matrix: sparse matrix representing hamiltonian in the basis basis\nbasis: vector of addresses\nhamiltonian: the Hamiltonian hamiltonian\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,0,0));\n\njulia> bsr = BasisSetRepresentation(hamiltonian)\nBasisSetRepresentation(HubbardReal1D(BoseFS{1,3}(1, 0, 0); u=1.0, t=1.0)) with dimension 3 and 9 stored entries:3×3 SparseArrays.SparseMatrixCSC{Float64, Int64} with 9 stored entries:\n  0.0  -1.0  -1.0\n -1.0   0.0  -1.0\n -1.0  -1.0   0.0\n\njulia> BasisSetRepresentation(hamiltonian, bsr.basis[1:2]; filter = Returns(false)) # passing addresses and truncating\nBasisSetRepresentation(HubbardReal1D(BoseFS{1,3}(1, 0, 0); u=1.0, t=1.0)) with dimension 2 and 4 stored entries:2×2 SparseArrays.SparseMatrixCSC{Float64, Int64} with 4 stored entries:\n  0.0  -1.0\n -1.0   0.0\n\njulia> using LinearAlgebra; eigvals(Matrix(bsr)) # eigenvalues\n3-element Vector{Float64}:\n -1.9999999999999996\n  0.9999999999999997\n  1.0000000000000002\n\njulia> ev = eigvecs(Matrix(bsr))[:,1] # ground state eigenvector\n3-element Vector{Float64}:\n -0.5773502691896257\n -0.5773502691896255\n -0.5773502691896257\n\njulia> DVec(zip(bsr.basis,ev)) # ground state as DVec\nDVec{BoseFS{1, 3, BitString{3, 1, UInt8}},Float64} with 3 entries, style = IsDeterministic{Float64}()\n  fs\"|0 0 1⟩\" => -0.57735\n  fs\"|0 1 0⟩\" => -0.57735\n  fs\"|1 0 0⟩\" => -0.57735\n\nHas methods for dimension, sparse, Matrix, starting_address.\n\nPart of the AbstractHamiltonian interface. See also build_basis.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.build_basis","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.build_basis","text":"build_basis(\n    ham, address=starting_address(ham);\n    cutoff, filter, sizelim, sort=false, kwargs...\n) -> basis\nbuild_basis(ham, addresses::AbstractVector; kwargs...)\n\nGet all basis element of a linear operator ham that are reachable (via non-zero matrix elements) from the address address, returned as a vector. Instead of a single address, a vector of addresses can be passed. Does not return the matrix, for that purpose use BasisSetRepresentation.\n\nProviding an energy cutoff will skip addresses with diagonal elements greater than cutoff. Alternatively, an arbitrary filter function can be used instead. Addresses passed as arguments are not filtered. A maximum basis size sizelim can be set which will throw an error if the expected dimension of ham is larger than sizelim. This may be useful when memory may be a concern. These options are disabled by default.\n\nSetting sort to true will sort the basis. Any additional keyword arguments are passed on to Base.sort!.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Base.Matrix","page":"Exact Diagonalization","title":"Base.Matrix","text":"Matrix(\n    hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian);\n    sizelim=10^4, kwargs...\n)\nMatrix(bsr::BasisSetRepresentation)\n\nReturn a dense matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"type"},{"location":"exactdiagonalization.html#SparseArrays.sparse","page":"Exact Diagonalization","title":"SparseArrays.sparse","text":"sparse(hamiltonian::AbstractHamiltonian, addr=starting_address(hamiltonian); kwargs...)\nsparse(bsr::BasisSetRepresentation)\n\nReturn a sparse matrix representation of hamiltonian or bsr. kwargs are passed to BasisSetRepresentation.\n\nSee BasisSetRepresentation.\n\n\n\n\n\n","category":"function"},{"location":"exactdiagonalization.html#Deprecated","page":"Exact Diagonalization","title":"Deprecated","text":"","category":"section"},{"location":"exactdiagonalization.html","page":"Exact Diagonalization","title":"Exact Diagonalization","text":"BasisSetRep","category":"page"},{"location":"exactdiagonalization.html#Rimu.ExactDiagonalization.BasisSetRep","page":"Exact Diagonalization","title":"Rimu.ExactDiagonalization.BasisSetRep","text":"BasisSetRep(args...; kwargs...)\n\nBasisSetRep is deprecated. Use BasisSetRepresentation instead.\n\n\n\n\n\n","category":"function"},{"location":"randomnumbers.html#Random-numbers-in-Rimu","page":"Random numbers","title":"Random numbers in Rimu","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"Rimu uses Julia's built-in random number generator, which currently defaults to Xoshiro256++.","category":"page"},{"location":"randomnumbers.html#Reproducibility","page":"Random numbers","title":"Reproducibility","text":"","category":"section"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"If you want FCIQMC runs to be reproducible, make sure to seed the RNG with Random.seed!.","category":"page"},{"location":"randomnumbers.html","page":"Random numbers","title":"Random numbers","text":"MPI-distributed runs can also be made reproducible by seeding the RNG with Rimu.RMPI.mpi_seed!.","category":"page"},{"location":"documentation.html#Documentation-generation","page":"Documentation generation","title":"Documentation generation","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"We are using Documenter.jl to generate the documentation web site based on markdown files stored in docs/src. Please help keeping the documentation up-to-date by editing the markdown files! For instructions on how to write appropriate documentation please refer to the relevant chapter in the Julia documentation and the Documenter.jl documentation.","category":"page"},{"location":"documentation.html#Generating-the-documentation-web-site","page":"Documentation generation","title":"Generating the documentation web site","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"The documentation pages can be generated by running the build script by typing","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Rimu$ julia --project=docs docs/make.jl","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"on the shell prompt from the Rimu/ folder. A complete image of the static documentation web site will be generated in the folder docs/build/. It can be viewed locally by pointing a web browser to file docs/build/index.html, or by deploying it to the GitHub pages web server.","category":"page"},{"location":"documentation.html#Automatic-documentation-generation-and-deployment","page":"Documentation generation","title":"Automatic documentation generation and deployment","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Our documentation is hosted on GitHub pages. The documentation web site can be built and deployed automatically with GitHub Actions. This needs to be set up with an appropriate script in the file .github/workflows/docs.yml, where triggers for this to happen can be defined. In the current set up, a new documentation web site is generated and deployed whenever someone pushes to the develop branch on the GitHub server. The updated documentation can then be accessed here.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Previews for pull-requests can be accessed by replacing 101 in the following link with the PR number: https://joachimbrand.github.io/Rimu.jl/previews/PR101/","category":"page"},{"location":"documentation.html#Example-scripts","page":"Documentation generation","title":"Example scripts","text":"","category":"section"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Examples should be added to the scripts folder, in the form of .jl files suitable for  parsing by Literate. The process of generating  documentation is automated in the docs/make.jl file and assumes that the following line is  at (or near) the top of the script:","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"# # Example N: Title","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"where the number N and Title will be extracted automatically.","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"Tests for the results and output of specific scripts should be added at the end of each example. The code to run the test should be hidden from the final generated document by appending \"#hide\" to each line of testing code. For example, ","category":"page"},{"location":"documentation.html","page":"Documentation generation","title":"Documentation generation","text":"using Test                          #hide\n@test isfile(\"result.out\")          #hide\n@test result == expected_result     #hide","category":"page"},{"location":"addresses.html#Module-BitStringAddresses","page":"BitString addresses","title":"Module BitStringAddresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"This module contains the implementations of BitString and various Fock addresses. The addresses serve as a basis for a Hamiltonian.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"While there are not restrictions on the type of address a Hamiltonian uses, Rimu provides implementations for Bosonic, Fermionic, and mixed Fock States.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"When implementing a new address type, care must be taken to make them space-efficient and stack-allocated - avoid using (heap-allocated) arrays to represent your addresses at all costs!","category":"page"},{"location":"addresses.html#Fock-addresses","page":"BitString addresses","title":"Fock addresses","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Rimu provides a variety of address implementations that should make it straightforward to implement efficient Hamiltonians. Examples are:","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"BoseFS Single-component bosonic Fock state with fixed particle and mode number.\nFermiFS Single-component fermionic Fock state with fixed particle and mode number.\nCompositeFS Multi-component Fock state composed of the above types.\nOccupationNumberFS Single-component bosonic Fock state with a fixed number of modes. The number of particles is not part of the type and can be changed by operators.","category":"page"},{"location":"addresses.html#Fock-address-API","page":"BitString addresses","title":"Fock address API","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"fockaddress.jl\",\"bosefs.jl\",\"fermifs.jl\",\"multicomponent.jl\",\"occupationnumberfs.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.AbstractFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.AbstractFockAddress","text":"AbstractFockAddress{N,M}\n\nAbstract type representing a Fock state with N particles and M modes.\n\nSee also SingleComponentFockAddress, CompositeFS, BoseFS, FermiFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFSIndex","text":"BoseFSIndex\n\nStruct used for indexing and performing excitations on a BoseFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is the bit offset of the mode when\n\nthe address is represented by a bitstring, and the position in the list when it is  represented by SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFSIndex","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFSIndex","text":"FermiFSIndex\n\nStruct used for indexing and performing excitations on a FermiFS.\n\nFields:\n\noccnum: the occupation number.\nmode: the index of the mode.\noffset: the position of the mode in the address. This is mode - 1 when the address is represented by a bitstring, and the position in the list when using SortedParticleList.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedModeMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedModeMap","text":"OccupiedModeMap(addr) <: AbstractVector\n\nGet a map of occupied modes in address as an AbstractVector of indices compatible with excitation - BoseFSIndex or FermiFSIndex.\n\nOccupiedModeMap(addr)[i] contains the index for the i-th occupied mode. This is useful because repeatedly looking for occupied modes with find_occupied_mode can be time-consuming. OccupiedModeMap(addr) is an eager version of the iterator returned by occupied_modes. It is similar to onr but contains more information.\n\nExample\n\njulia> b = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> mb = OccupiedModeMap(b)\n3-element OccupiedModeMap{7, BoseFSIndex}:\n BoseFSIndex(occnum=10, mode=1, offset=0)\n BoseFSIndex(occnum=2, mode=5, offset=14)\n BoseFSIndex(occnum=1, mode=7, offset=18)\n\njulia> f = FermiFS(1,1,1,1,0,0,1,0,0)\nFermiFS{5,9}(1, 1, 1, 1, 0, 0, 1, 0, 0)\n\njulia> mf = OccupiedModeMap(f)\n5-element OccupiedModeMap{5, FermiFSIndex}:\n FermiFSIndex(occnum=1, mode=1, offset=0)\n FermiFSIndex(occnum=1, mode=2, offset=1)\n FermiFSIndex(occnum=1, mode=3, offset=2)\n FermiFSIndex(occnum=1, mode=4, offset=3)\n FermiFSIndex(occnum=1, mode=7, offset=6)\n\njulia> mf == collect(occupied_modes(f))\ntrue\n\njulia> dot(mf, mb)\n11\n\njulia> dot(mf, 1:20)\n17\n\nSee also dot, SingleComponentFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupiedPairsMap","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupiedPairsMap","text":"OccupiedPairsMap(addr::SingleComponentFockAddress) <: AbstractVector\n\nGet a map of all distinct pairs of indices in addr. Pairs involving multiply-occupied modes are counted once, (including self-pairing). This is useful for cases where identifying pairs of particles for eg. interactions is not well-defined or efficient to do on the fly. This is an eager iterator whose elements are a tuple of particle indices that can be given to excitation\n\nExample\n\njulia> addr = BoseFS(10, 0, 0, 0, 2, 0, 1)\nBoseFS{13,7}(10, 0, 0, 0, 2, 0, 1)\n\njulia> pairs = OccupiedPairsMap(addr)\n5-element OccupiedPairsMap{78, Tuple{BoseFSIndex, BoseFSIndex}}:\n (BoseFSIndex(occnum=10, mode=1, offset=0), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=2, mode=5, offset=14))\n (BoseFSIndex(occnum=2, mode=5, offset=14), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=10, mode=1, offset=0))\n (BoseFSIndex(occnum=1, mode=7, offset=18), BoseFSIndex(occnum=2, mode=5, offset=14))\n\njulia> excitation(addr, pairs[2], pairs[4])\n(BoseFS{13,7}(9, 0, 0, 0, 4, 0, 0), 10.954451150103322)\n\nSee also OccupiedModeMap.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SingleComponentFockAddress","page":"BitString addresses","title":"Rimu.BitStringAddresses.SingleComponentFockAddress","text":"SingleComponentFockAddress{N,M} <: AbstractFockAddress{N,M}\n\nA type representing a single component Fock state with N particles and M modes.\n\nImplemented subtypes: BoseFS, FermiFS.\n\nSupported functionality\n\nfind_mode\nfind_occupied_mode\nnum_occupied_modes\noccupied_modes: Lazy iterator.\nOccupiedModeMap: AbstractVector with eager construction.\nexcitation: Create a new address.\nBoseFSIndex and FermiFSIndex for indexing.\n\nSee also CompositeFS, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::SingleComponentFockAddress, creations::NTuple, destructions::NTuple)\n\nGenerate an excitation on address addr by applying creations and destructions, which are tuples of the appropriate address indices (i.e. BoseFSIndex for bosons, or FermiFSIndex for fermions).\n\na^_c_1 a^_c_2 ldots a_d_1 a_d_2 ldots mathrmaddrrangle to\nαmathrmnaddrrangle\n\nReturns the new address naddr and the factor α. The value of α is given by the square root of the product of mode occupations before destruction and after creation. If the excitation is illegal, returns an arbitrary address and the value 0.0.\n\nExample\n\njulia> f = FermiFS(1,1,0,0,1,1,1,1)\nFermiFS{6,8}(1, 1, 0, 0, 1, 1, 1, 1)\n\njulia> i, j, k, l = find_mode(f, (3,4,2,5))\n(FermiFSIndex(occnum=0, mode=3, offset=2), FermiFSIndex(occnum=0, mode=4, offset=3), FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=5, offset=4))\n\njulia> excitation(f, (i,j), (k,l))\n(FermiFS{6,8}(1, 0, 1, 1, 0, 1, 1, 1), -1.0)\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_mode","text":"find_mode(::SingleComponentFockAddress, i)\n\nFind the i-th mode in address. Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. Can work on a tuple of modes. Does not check bounds.\n\njulia> find_mode(BoseFS(1, 0, 2), 2)\nBoseFSIndex(occnum=0, mode=2, offset=2)\n\njulia> find_mode(FermiFS(1, 1, 1, 0), (2,3))\n(FermiFSIndex(occnum=1, mode=2, offset=1), FermiFSIndex(occnum=1, mode=3, offset=2))\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.find_occupied_mode","page":"BitString addresses","title":"Rimu.BitStringAddresses.find_occupied_mode","text":"find_occupied_mode(::SingleComponentFockAddress, k)\nfind_occupied_mode(::BoseFS, k, [n])\n\nFind the k-th occupied mode in address (with at least n particles). Returns BoseFSIndex for BoseFS, and FermiFSIndex for FermiFS. When unsuccessful it returns a zero index.\n\nExample\n\njulia> find_occupied_mode(FermiFS(1, 1, 1, 0), 2)\nFermiFSIndex(occnum=1, mode=2, offset=1)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1)\nBoseFSIndex(occnum=1, mode=1, offset=0)\n\njulia> find_occupied_mode(BoseFS(1, 0, 2), 1, 2)\nBoseFSIndex(occnum=2, mode=3, offset=3)\n\nSee also occupied_modes, OccupiedModeMap, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_components-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_components","text":"num_components(::Type{<:AbstractFockAddress})\nnum_components(::AbstractFockAddress)\n\nNumber of components in address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_modes-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_modes","text":"num_modes(::Type{<:AbstractFockAddress})\nnum_modes(::AbstractFockAddress)\n\nNumber of modes represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.num_occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_occupied_modes","text":"num_occupied_modes(::SingleComponentFockAddress)\n\nGet the number of occupied modes in address. Equivalent to length(occupied_modes(address)), or the number of non-zeros in its ONR representation.\n\nExample\n\njulia> num_occupied_modes(BoseFS((1, 0, 2)))\n2\njulia> num_occupied_modes(FermiFS((1, 1, 1, 0)))\n3\n\nSee SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.num_particles-Tuple{AbstractFockAddress}","page":"BitString addresses","title":"Rimu.BitStringAddresses.num_particles","text":"num_particles(::Type{<:AbstractFockAddress})\nnum_particles(::AbstractFockAddress)\n\nNumber of particles represented by address.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.occupied_modes","page":"BitString addresses","title":"Rimu.BitStringAddresses.occupied_modes","text":"occupied_modes(::SingleComponentFockAddress)\n\nReturn a lazy iterator over all occupied modes in an address. Iterates over BoseFSIndexs for BoseFS, and over FermiFSIndexs for FermiFS. See OccupiedModeMap for an eager version.\n\nExample\n\njulia> b = BoseFS((1,5,0,4));\n\njulia> foreach(println, occupied_modes(b))\nBoseFSIndex(occnum=1, mode=1, offset=0)\nBoseFSIndex(occnum=5, mode=2, offset=2)\nBoseFSIndex(occnum=4, mode=4, offset=9)\n\njulia> f = FermiFS((1,1,0,1,0,0,1));\n\njulia> foreach(println, occupied_modes(f))\nFermiFSIndex(occnum=1, mode=1, offset=0)\nFermiFSIndex(occnum=1, mode=2, offset=1)\nFermiFSIndex(occnum=1, mode=4, offset=3)\nFermiFSIndex(occnum=1, mode=7, offset=6)\n\nSee also find_occupied_mode, SingleComponentFockAddress.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.onr","page":"BitString addresses","title":"Rimu.BitStringAddresses.onr","text":"occupation_number_representation(fs::SingleComponentFockAddress)\nonr(fs::SingleComponentFockAddress)\n\nCompute and return the occupation number representation of the Fock state fs as an SVector{M}, where M is the number of modes.\n\n\n\n\n\n","category":"function"},{"location":"addresses.html#Rimu.BitStringAddresses.@fs_str-Tuple{Any}","page":"BitString addresses","title":"Rimu.BitStringAddresses.@fs_str","text":"fs\"$(string)\"\n\nParse the compact representation of a Fock state. Useful for copying the printout from a vector to the REPL.\n\nExample\n\njulia> DVec(BoseFS{3,4}(0, 1, 2, 0) => 1)\nDVec{BoseFS{3, 4, BitString{6, 1, UInt8}},Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  fs\"|0 1 2 0⟩\" => 1\n\njulia> fs\"|0 1 2 0⟩\" => 1 # Copied from above printout\nBoseFS{3,4}(0, 1, 2, 0) => 1\n\njulia> fs\"|1 2 3⟩⊗|0 1 0⟩\" # composite bosonic Fock state\nCompositeFS(\n  BoseFS{6,3}(1, 2, 3),\n  BoseFS{1,3}(0, 1, 0),\n)\n\njulia> fs\"|↑↓↑⟩\" # construct a fermionic Fock state\nCompositeFS(\n  FermiFS{2,3}(1, 0, 1),\n  FermiFS{1,3}(0, 1, 0),\n)\n\njulia> s = fs\"|0 1 2 0⟩{}\" # constructing OccupationNumberFS with default UInt8 container\nOccupationNumberFS{4, UInt8}(0, 1, 2, 0)\n\njulia> [s] # prints out with the signifcant number of bits specified in braces\n1-element Vector{OccupationNumberFS{4, UInt8}}:\n fs\"|0 1 2 0⟩{8}\"\n\nSee also FermiFS, BoseFS, CompositeFS, FermiFS2C, OccupationNumberFS.\n\n\n\n\n\n","category":"macro"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS","text":"BoseFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N spinless bosons in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nBoseFS{[N,M]}(val::Integer...): Create BoseFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nBoseFS{[N,M]}(onr): Create BoseFS{N,M} from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple or SVector.\nBoseFS{[N,M]}([M, ]pairs...): Provide the number of modes M and mode => occupation_number pairs. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nBoseFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> BoseFS{6,5}(0, 1, 2, 3, 0)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS([abs(i - 3) ≤ 1 ? i - 1 : 0 for i in 1:5])\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS(5, 2 => 1, 3 => 2, 4 => 3)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> BoseFS{6,5}(i => i - 1 for i in 2:4)\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|0 1 2 3 0⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\njulia> fs\"|b 5: 2 3 3 4 4 4⟩\"\nBoseFS{6,5}(0, 1, 2, 3, 0)\n\nSee also: SingleComponentFockAddress, OccupationNumberFS, FermiFS, CompositeFS, FermiFS2C.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.bose_hubbard_interaction-Union{Tuple{BoseFS{<:Any, <:Any, A}}, Tuple{A}} where A<:BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.bose_hubbard_interaction","text":"bose_hubbard_interaction(address)\n\nReturn Σ_i n_i (n_i-1) for computing the Bose-Hubbard on-site interaction (without the U prefactor.)\n\nExample\n\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((2,1,1,0)))\n2\njulia> Hamiltonians.bose_hubbard_interaction(BoseFS{4,4}((3,0,1,0)))\n6\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.hopnextneighbour-Union{Tuple{A}, Tuple{M}, Tuple{N}, Tuple{BoseFS{N, M, A}, Any}} where {N, M, A<:BitString}","page":"BitString addresses","title":"Rimu.BitStringAddresses.hopnextneighbour","text":"new_address, product = hopnextneighbour(add, chosen)\n\nCompute the new address of a hopping event for the Bose-Hubbard model. Returns the new address and the square root of product of occupation numbers of the involved modes.\n\nThe off-diagonals are indexed as follows:\n\n(chosen + 1) ÷ 2 selects the hopping site.\nEven chosen indicates a hop to the left.\nOdd chosen indicates a hop to the right.\nBoundary conditions are periodic.\n\nExample\n\njulia> using Rimu.Hamiltonians: hopnextneighbour\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 3)\n(BoseFS{2,3}(2, 0, 0), 1.4142135623730951)\n\njulia> hopnextneighbour(BoseFS(1, 0, 1), 4)\n(BoseFS{2,3}(1, 1, 0), 1.0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.near_uniform-Union{Tuple{Type{<:BoseFS{N, M}}}, Tuple{M}, Tuple{N}} where {N, M}","page":"BitString addresses","title":"Rimu.BitStringAddresses.near_uniform","text":"near_uniform(BoseFS{N,M}) -> BoseFS{N,M}\n\nCreate bosonic Fock state with near uniform occupation number of M modes with a total of N particles.\n\nExamples\n\njulia> near_uniform(BoseFS{7,5})\nBoseFS{7,5}(2, 2, 1, 1, 1)\n\njulia> near_uniform(FermiFS{3,5})\nFermiFS{3,5}(1, 1, 1, 0, 0)\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS","text":"FermiFS{N,M,S} <: SingleComponentFockAddress\n\nAddress type that represents a Fock state of N fermions of the same spin in M modes by wrapping a BitString, or a SortedParticleList. Which is wrapped is chosen automatically based on the properties of the address.\n\nConstructors\n\nFermiFS{[N,M]}(val::Integer...): Create FermiFS{N,M} from occupation numbers. This is type-stable if the number of modes M and the number of particles N are provided. Otherwise, M and N are inferred from the arguments.\nFermiFS{[N,M]}(onr): Create FermiFS{N,M}  from occupation number representation, see onr. This is efficient if N and M are provided, and onr is a statically-sized collection, such as a Tuple{M} or SVector{M}.\nFermiFS{[N,M]}([M, ]pairs...): Provide the number of modes M and pairs of the form mode => 1. If M is provided as a type parameter, it should not be provided as the first argument.  Useful for creating sparse addresses. pairs can be multiple arguments or an iterator of pairs.\nFermiFS{N,M,S}(bs::S): Unsafe constructor. Does not check whether the number of particles in bs is equal to N, or whether each mode only contains one particle.\n@fs_str: Addresses are sometimes printed in a compact manner. This representation can also be used as a constructor. See the last example below.\n\nExamples\n\njulia> FermiFS{3,5}(0, 1, 1, 1, 0)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS([abs(i - 3) ≤ 1 for i in 1:5])\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS(5, 2 => 1, 3 => 1, 4 => 1)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> FermiFS{3,5}(i => 1 for i in 2:4)\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|⋅↑↑↑⋅⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\njulia> fs\"|f 5: 2 3 4⟩\"\nFermiFS{3,5}(0, 1, 1, 1, 0)\n\nSee also: SingleComponentFockAddress, BoseFS, CompositeFS, FermiFS2C, BitString, OccupationNumberFS.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.BoseFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.BoseFS2C","text":"BoseFS2C{NA,NB,M,AA,AB} <: AbstractFockAddress\nBoseFS2C(onr_a, onr_b)\n\nAddress type that constructed with two BoseFS{N,M,S}. It represents a Fock state with two components, e.g. two different species of bosons with particle number NA from species S and particle number NB from species B. The number of modes M is expected to be the same for both components.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.CompositeFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.CompositeFS","text":"CompositeFS(addresses::SingleComponentFockAddress...) <: AbstractFockAddress\n\nUsed to encode addresses for multi-component models. All component addresses are expected have the same number of modes.\n\nSee also: BoseFS, FermiFS, SingleComponentFockAddress, num_modes, FermiFS2C, AbstractFockAddress.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.FermiFS2C","page":"BitString addresses","title":"Rimu.BitStringAddresses.FermiFS2C","text":"FermiFS2C <: AbstractFockAddress\nFermiFS2C(onr_a, onr_b)\n\nFock state address with two fermionic (spin) components. Alias for CompositeFS with two FermiFS components. Construct by specifying either two compatible FermiFSs, two onrs, or the number of modes followed by mode => occupation_number pairs, where occupation_number=1 will put a particle in the first component and occupation_number=-1 will put a particle in the second component. See examples below.\n\nExamples\n\njulia> FermiFS2C(FermiFS(1,0,0), FermiFS(0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C((1,0,0), (0,1,1))\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> FermiFS2C(3, 1 => 1, 2 => -1, 3 => -1)\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\njulia> fs\"|↑↓↓⟩\"\nCompositeFS(\n  FermiFS{1,3}(1, 0, 0),\n  FermiFS{2,3}(0, 1, 1),\n)\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.time_reverse-Union{Tuple{CompositeFS{2, N, M, T}}, Tuple{T}, Tuple{M}, Tuple{N}} where {N, M, T<:(Tuple{T, T} where T)}","page":"BitString addresses","title":"Rimu.BitStringAddresses.time_reverse","text":"time_reverse(addr)\n\nApply the time-reversal operation on a two-component Fock address that flips all the spins.\n\nRequires each component address to have the same type.\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Rimu.BitStringAddresses.OccupationNumberFS","page":"BitString addresses","title":"Rimu.BitStringAddresses.OccupationNumberFS","text":"OccupationNumberFS{M,T} <: SingleComponentFockAddress\n\nAddress type that stores the occupation numbers of a single component bosonic Fock state with M modes. The occupation numbers must fit into the type T <: Unsigned. The number of particles is runtime data, and can be retrieved with num_particles(address).\n\nConstructors\n\nOccupationNumberFS(val::Integer...): Construct from occupation numbers. Must be < 256 to fit into UInt8.\nOccupationNumberFS{[M,T]}(onr): Construct from collection onr with M occupation numbers with type T. If unspecified, the type T of the occupation numbers is inferred from the type of the arguments.\nOccupationNumberFS(fs::BoseFS): Construct from BoseFS.\nWith shortform macro @fs_str. Specify the number of significant bits in braces. See example below.\n\nExamples\n\njulia> ofs = OccupationNumberFS(1,2,3)\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> ofs == fs\"|1 2 3⟩{8}\"\ntrue\n\njulia> num_particles(ofs)\n6\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.excitation-Union{Tuple{T}, Tuple{OccupationNumberFS{<:Any, T}, Tuple{Vararg{Int64, var\"#s61\"}} where var\"#s61\", Tuple{Vararg{Int64, var\"#s5\"}} where var\"#s5\"}} where T","page":"BitString addresses","title":"Rimu.BitStringAddresses.excitation","text":"excitation(addr::OccupationNumberFS, c::NTuple, d::NTuple)\n→ (nadd, α)\n\nGenerate an excitation on an OccupationNumberFS by applying the creation and destruction operators specified by the tuples of mode numbers c and d to the Fock state addr. The modes are indexed by integers (starting at 1), or by indices of type BoseFSIndex. The value of α is given by the square root of the product of mode occupations before destruction and after creation.\n\nThe number of particles may change by this type of excitation.\n\nExample\n\njulia> s = fs\"|1 2 3⟩{8}\"\nOccupationNumberFS{3, UInt8}(1, 2, 3)\n\njulia> num_particles(s)\n6\n\njulia> es, α = excitation(s, (1,1), (3,))\n(OccupationNumberFS{3, UInt8}(3, 2, 2), 4.242640687119285)\n\njulia> num_particles(es)\n7\n\n\n\n\n\n","category":"method"},{"location":"addresses.html#Internal-representations","page":"BitString addresses","title":"Internal representations","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"The atomic addresses, BoseFS and FermiFS, are implemented as either bitstrings or sorted lists of particles. Using these approaches over an occupation number representation makes the addresses much more space-efficient.","category":"page"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Therewhile OccupationNumberFS internally uses the occupation number representation,  which allows it to handle excitation operations that change the particle number. This is fast but requires more storage space.","category":"page"},{"location":"addresses.html#Internal-APIs","page":"BitString addresses","title":"Internal APIs","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Modules = [BitStringAddresses]\nPages = [\"bitstring.jl\", \"sortedparticlelist.jl\"]\nPrivate = false","category":"page"},{"location":"addresses.html#Rimu.BitStringAddresses.BitString","page":"BitString addresses","title":"Rimu.BitStringAddresses.BitString","text":"BitString{B,N,T<:Unsigned}\n\nType for storing bitstrings of static size. Holds B bits in N chunks, where each chunk is of type T.\n\nN is chosen automatically to accommodate B bits as efficiently as possible.\n\nConstructors\n\nBitString{B,N,T}(::SVector{N,T}): unsafe constructor. Does not check for ghost bits.\nBitString{B,N,T}(i::T): as above, but sets i as the rightmost chunk.\nBitString{B}(::Integer): Convert integer to BitString. Integer is truncated to the correct number of bits.\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Rimu.BitStringAddresses.SortedParticleList","page":"BitString addresses","title":"Rimu.BitStringAddresses.SortedParticleList","text":"SortedParticleList{N,M,T<:Unsigned}\n\nType for storing sparse fock states. Stores the mode number of each particle as an entry with only its mode stored. The entries are always kept sorted.\n\nIterating over SortedParticleLists yields occupied modes as a tuple of occupation number, mode number, and position in list.\n\nConstructors\n\nSortedParticleList{N,M,T}(::SVector{N,T}): unsafe constructor. Does not sort input.\nSortedParticleList(arr::AbstractVector): convert ONR to SortedParticleList\n\n\n\n\n\n","category":"type"},{"location":"addresses.html#Index","page":"BitString addresses","title":"Index","text":"","category":"section"},{"location":"addresses.html","page":"BitString addresses","title":"BitString addresses","text":"Pages   = [\"addresses.md\"]","category":"page"},{"location":"API.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"API.html#Rimu","page":"API","title":"Rimu","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"Modules = [Rimu]","category":"page"},{"location":"API.html#Rimu.Rimu","page":"API","title":"Rimu.Rimu","text":"Rimu\n\nRandom integrators for many-body quantum systems\n\nWelcome to Rimu version 0.12.0. Read the documentation online.\n\n\n\n\n\n","category":"module"},{"location":"API.html#Rimu.PACKAGE_VERSION","page":"API","title":"Rimu.PACKAGE_VERSION","text":"Rimu.PACKAGE_VERSION\n\nConstant that contains the current VersionNumber of Rimu.\n\n\n\n\n\n","category":"constant"},{"location":"API.html#DataFrames.DataFrame-Tuple{Rimu.Report}","page":"API","title":"DataFrames.DataFrame","text":"DataFrame(report::Report)\n\nConvert the Report to a DataFrame. Metadata is added as metadata to the DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.AllOverlaps","page":"API","title":"Rimu.AllOverlaps","text":"AllOverlaps(num_replicas=2; operator=nothing, transform=nothing, vecnorm=true) <: ReplicaStrategy{num_replicas}\n\nRun num_replicas replicas and report overlaps between all pairs of replica vectors. If operator is not nothing, the overlap dot(c1, operator, c2) is reported as well. If operator is a tuple of operators, the overlaps are computed for all operators.\n\nColumn names in the report are of the form c{i}_dot_c{j} for vector-vector overlaps, and c{i}_Op{k}_c{j} for operator overlaps.\n\nSee lomc!, ReplicaStrategy and AbstractHamiltonian (for an interface for implementing operators).\n\nTransformed Hamiltonians\n\nIf a transformed Hamiltonian G has been passed to lomc! then overlaps can be calculated by passing the same transformed Hamiltonian to AllOverlaps by setting transform=G. A warning is given if these two Hamiltonians do not match.\n\nImplemented transformations are:\n\nGutzwillerSampling\nGuidingVectorSampling\n\nIn the case of a transformed Hamiltonian the overlaps are defined as follows. For a similarity transformation G of the Hamiltonian (see e.g. GutzwillerSampling.)\n\n    hatG = f hatH f^-1\n\nThe expectation value of an operator hatA is\n\n    langle hatA rangle = langle psi  hatA  psi rangle\n        = fraclangle phi  f^-1 hatA f^-1  phi ranglelangle phi  f^-2  phi rangle\n\nwhere\n\n     phi rangle = f  psi rangle\n\nis the (right) eigenvector of hatG and  psi rangle is an eigenvector of hatH.\n\nFor a K-tuple of input operators (hatA_1  hatA_K), overlaps of langle phi  f^-1 hatA f^-1  phi rangle are reported as c{i}_Op{k}_c{j}. The correct vector-vector overlap langle phi  f^-2  phi rangle is reported last as c{i}_Op{K+1}_c{j}. This is in addition to the bare vector-vector overlap langle phi  f^-2  phi rangle that is reported as c{i}_dot_c{j}.\n\nIn either case the c{i}_dot_c{j} overlap can be omitted with the flag vecnorm=false.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ConstantTimeStep","page":"API","title":"Rimu.ConstantTimeStep","text":"ConstantTimeStep <: TimeStepStrategy\n\nKeep dτ constant.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DefaultShiftParameters","page":"API","title":"Rimu.DefaultShiftParameters","text":"DefaultShiftParameters\n\nDefault mutable struct for storing the shift parameters.\n\nSee ShiftStrategy, initialise_shift_parameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DontUpdate","page":"API","title":"Rimu.DontUpdate","text":"DontUpdate(; targetwalkers = 1_000_000) <: ShiftStrategy\n\nDon't update the shift.  Return when targetwalkers is reached.\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogProjected","page":"API","title":"Rimu.DoubleLogProjected","text":"DoubleLogProjected(; target, projector, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ after projecting onto projector.\n\nS^n+1 = S^n -fracζdτlnleft(fracPΨ^(n+1)PΨ^(n)right)-fracξdτlnleft(fracPΨ^(n+1)texttargetright)\n\nNote that adjusting the keyword maxlength in lomc! is advised as the default may not be appropriate.\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogSumUpdate","page":"API","title":"Rimu.DoubleLogSumUpdate","text":"DoubleLogSumUpdate(; targetwalkers = 1000, ζ = 0.08, ξ = ζ^2/4, α = 1/2) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameters ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracN_mathrmw^n+1N_mathrmw^nright)\n- fracξdτlnleft(fracN_mathrmw^n+1N_mathrmw^texttargetright)\n\nwhere N_mathrmw = (1-α)*walkernumber() + α*UniformProjector()⋅ψ computed with walkernumber() and UniformProjector(). When ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdate","page":"API","title":"Rimu.DoubleLogUpdate","text":"DoubleLogUpdate(; targetwalkers = 1000, ζ = 0.08, ξ = ζ^2/4) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ and ξ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)-fracξdτlnleft(fracΨ_1^n+1Ψ_1^texttargetright)\n\nWhen ξ = ζ^2/4 this corresponds to critical damping with a damping time scale T = 2/ζ.\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.DoubleLogUpdateAfterTargetWalkers","page":"API","title":"Rimu.DoubleLogUpdateAfterTargetWalkers","text":"DoubleLogUpdateAfterTargetWalkers(targetwalkers, ζ = 0.08, ξ = 0.0016) <: ShiftStrategy\n\nStrategy for updating the shift: After targetwalkers is reached, update the shift according to the log formula with damping parameter ζ and ξ.\n\nSee DoubleLogUpdate, ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FCIQMC","page":"API","title":"Rimu.FCIQMC","text":"FCIQMC(; kwargs...) <: PMCAlgorithm\n\nAlgorithm for the full configuration interaction quantum Monte Carlo (FCIQMC) method. The default algorithm for ProjectorMonteCarloProblem.\n\nKeyword arguments and defaults:\n\nshift_strategy = DoubleLogUpdate(; targetwalkers = 1_000, ζ = 0.08,   ξ = ζ^2/4): How to update the shift.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not.\n\nSee also ProjectorMonteCarloProblem, ShiftStrategy, TimeStepStrategy, DoubleLogUpdate, ConstantTimeStep.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FciqmcRunStrategy","page":"API","title":"Rimu.FciqmcRunStrategy","text":" FciqmcRunStrategy{T}\n\nAbstract type representing the strategy for running and terminating lomc!(). The type parameter T is relevant for reporting the shift and the norm.\n\nImplemented strategies:\n\nRunTillLastStep\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.FirstOrderTransitionOperator","page":"API","title":"Rimu.FirstOrderTransitionOperator","text":"FirstOrderTransitionOperator(hamiltonian, shift, dτ) <: AbstractHamiltonian\nFirstOrderTransitionOperator(sp::DefaultShiftParameters, hamiltonian)\n\nFirst order transition operator\n\n𝐓 = 1 + dτ(S - 𝐇)\n\nwhere 𝐇 is the hamiltonian and S is the shift.\n\n𝐓 represents the first order expansion of the exponential evolution operator of the imaginary-time Schrödinger equation (Euler step) and repeated application will project out the ground state eigenvector of the hamiltonian.  It is the transition operator used in FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.GramSchmidt","page":"API","title":"Rimu.GramSchmidt","text":"GramSchmidt{S} <: SpectralStrategy{S}\n\nUse the Gram-Schmidt procedure to orthogonalize the excited states. A total of S spectral states are used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdate","page":"API","title":"Rimu.LogUpdate","text":"LogUpdate(ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift according to the log formula with damping parameter ζ.\n\nS^n+1 = S^n -fracζdτlnleft(fracΨ_1^n+1Ψ_1^nright)\n\nSee ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.LogUpdateAfterTargetWalkers","page":"API","title":"Rimu.LogUpdateAfterTargetWalkers","text":"LogUpdateAfterTargetWalkers(targetwalkers, ζ = 0.08) <: ShiftStrategy\n\nStrategy for updating the shift: After targetwalkers is reached, update the shift according to the log formula with damping parameter ζ.\n\nSee LogUpdate, ShiftStrategy, lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.MultiScalar","page":"API","title":"Rimu.MultiScalar","text":"MultiScalar\n\nWrapper over a tuple that supports +, *, min, and max. Used with MPI communication because SVectors are treated as arrays by MPI.Allreduce and Tuples do not support scalar operations.\n\nExample\n\nSuppose you want to compute the sum of a vector dv and also get the number of positive elements it has in a single pass. You can use MultiScalar:\n\njulia> dv = DVec(:a => 1, :b => -2, :c => 1);\n\njulia> s, p = mapreduce(+, values(dv)) do v\n    Rimu.MultiScalar(v, Int(sign(v) == 1))\nend;\n\njulia> s, p\n(0, 2)\n\nThis will work with MPIData.\n\nNote that only MultiScalars with the same types can be operated on. This is a feature, as it forces type stability.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.NoStats","page":"API","title":"Rimu.NoStats","text":"NoStats(N=1) <: ReplicaStrategy{N}\n\nThe default ReplicaStrategy. N replicas are run, but no statistics are collected.\n\nSee also lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCAlgorithm","page":"API","title":"Rimu.PMCAlgorithm","text":"PMCAlgorithm\n\nAbstract type for projector Monte Carlo algorithms.\n\nSee ProjectorMonteCarloProblem, FCIQMC.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PMCSimulation","page":"API","title":"Rimu.PMCSimulation","text":"PMCSimulation\n\nHolds the state and the results of a projector quantum Monte Carlo (PMC) simulation. Is returned by init(::ProjectorMonteCarloProblem) and solved with solve!(::PMCSimulation).\n\nObtain the results of a simulation sm as a DataFrame with DataFrame(sm).\n\nSee also state_vectors, ProjectorMonteCarloProblem, init, solve!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.PostStepStrategy","page":"API","title":"Rimu.PostStepStrategy","text":"PostStepStrategy\n\nSubtypes of PostStepStrategy can be used to perform arbitrary computation on a single state after an FCIQMC step is finished and report the results.\n\nImplemented strategies:\n\nProjectedEnergy\nProjector\nSignCoherence\nWalkerLoneliness\nTimer\n\nNote: A tuple of multiple strategies can be passed to lomc!. In that case, all reported column names must be distinct.\n\nInterface:\n\nA subtype of this type must implement post_step_action(::PostStepStrategy, ::SingleState, step::Int).\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectedEnergy","page":"API","title":"Rimu.ProjectedEnergy","text":"ProjectedEnergy(hamiltonian, projector; hproj=:hproj, vproj=:vproj) <: PostStepStrategy\n\nAfter every step, compute hproj = dot(projector, hamiltonian, dv) and vproj = dot(projector, dv), where dv is the instantaneous coefficient vector.  projector can be an AbstractDVec, or an AbstractProjector.\n\nReports to columns hproj and vproj, which can be used to compute projective energy, e.g. with projected_energy. The keyword arguments hproj and vproj can be used to change the names of these columns. This can be used to make the names unique when computing projected energies with different projectors in the same run.\n\nSee also projected_energy, ratio_of_means, mixed_estimator, and PostStepStrategy.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Projector","page":"API","title":"Rimu.Projector","text":"Projector(name=projector) <: PostStepStrategy\n\nAfter each step, compute dot(projector, dv) and report it in the DataFrame under name. projector can be an AbstractDVec, or an AbstractProjector.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ProjectorMonteCarloProblem","page":"API","title":"Rimu.ProjectorMonteCarloProblem","text":"ProjectorMonteCarloProblem(hamiltonian::AbstractHamiltonian; kwargs...)\n\nDefines a problem to be solved by projector quantum Monte Carlo (QMC) methods, such as the the FCIQMC algorithm.\n\nCommon keyword arguments and defaults:\n\ntime_step = 0.01: Initial time step size.\nlast_step = 100: Controls the number of steps.\ntargetwalkers = 1_000: Target for the 1-norm of the coefficient vector.\nstart_at = starting_address(hamiltonian): Define the initial state vector(s).   An r  s matrix of state vectors can be passed where r is the   number of replicas and s the number of spectral states. See also   default_starting_vector.\nstyle = IsDynamicSemistochastic(): The StochasticStyle of the simulation.\ninitiator = false: Whether to use initiators. Can be true, false, or a valid   InitiatorRule.\nthreading: Default is to use multithreading and/or MPI if available. Set to true to force PDVec for the starting vector, false for serial computation; may be overridden by start_at.\nreporting_strategy = ReportDFAndInfo(): How and when to report results, see ReportingStrategy.\npost_step_strategy = (): Extract observables (e.g. ProjectedEnergy), see PostStepStrategy.\nn_replicas = 1: Number of synchronised independent simulations.\nreplica_strategy = NoStats(n_replicas): Which results to report from replica simulations, see ReplicaStrategy.\n\nExample\n\njulia> hamiltonian = HubbardReal1D(BoseFS(1,2,3));\n\njulia> problem = ProjectorMonteCarloProblem(hamiltonian; targetwalkers = 500, last_step = 100);\n\njulia> simulation = solve(problem);\n\njulia> simulation.success[]\ntrue\n\njulia> size(DataFrame(simulation))\n(100, 10)\n\nFurther keyword arguments:\n\nstarting_step = 1: Starting step of the simulation.\nwalltime = Inf: Maximum time allowed for the simulation.\nsimulation_plan = SimulationPlan(; starting_step, last_step, walltime): Defines the   duration of the simulation. Takes precedence over last_step and walltime.\nζ = 0.08: Damping parameter for the shift update.\nξ = ζ^2/4: Forcing parameter for the shift update.\nshift_strategy = DoubleLogUpdate(; targetwalkers, ζ, ξ): How to update the shift,   see ShiftStrategy.\ntime_step_strategy = ConstantTimeStep(): Adjust time step or not, seeTimeStepStrategy`.\nalgorithm = FCIQMC(; shift_strategy, time_step_strategy): The algorithm to use.   Currenlty only FCIQMC is implemented.\nshift: Initial shift value or collection of shift values. Determined by default from the   Hamiltonian and the starting vectors.\ninitial_shift_parameters: Initial shift parameters or collection of initial shift   parameters. Overrides shift if provided.\nmaxlength = 2 * targetwalkers + 100: Maximum length of the vectors.\ndisplay_name = \"PMCSimulation\": Name displayed in progress bar (via ProgressLogging).\nmetadata: User-supplied metadata to be added to the report. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\nrandom_seed = true: Provide and store a seed for the random number generator. If set to   true, a random seed is generated. If set to number, this number is used as the seed.   The seed is used by solve such that solveing the problem twice will yield identical   results. If set to false, no seed is used and results are not reproducible.\n\nSee also init, solve.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaState","page":"API","title":"Rimu.ReplicaState","text":"ReplicaState <: AbstractMatrix{SingleState}\n\nHolds information about multiple replicas of SpectralStates.\n\nIndexing the ReplicaState state[i, j] returns a SingleState from the ith replica and jth spectral state.\n\nSee also ReplicaStrategy, SpectralState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReplicaStrategy","page":"API","title":"Rimu.ReplicaStrategy","text":"ReplicaStrategy{N}\n\nSupertype for strategies that can be passed to lomc! and control how many replicas are used, and what information is computed and returned. The number of replicas is N.\n\nConcrete implementations\n\nNoStats: run (possibly one) replica(s), but don't report any additional info.\nAllOverlaps: report overlaps between all pairs of replica vectors.\n\nInterface\n\nA subtype of ReplicaStrategy{N} must implement the following function:\n\nRimu.replica_stats - return a tuple of Strings or Symbols of names for replica statistics and a tuple of the values. These will be reported to the DataFrame returned by lomc!.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Report","page":"API","title":"Rimu.Report","text":"Report()\nReport(df::DataFrame)\n\nInternal structure that holds the temporary reported values as well as metadata. It can be converted to a DataFrame with DataFrame(report::Report).\n\nSee report!, report_metadata!, get_metadata.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportDFAndInfo","page":"API","title":"Rimu.ReportDFAndInfo","text":"ReportDFAndInfo(; reporting_interval=1, info_interval=100, io=stdout, writeinfo=false) <: ReportingStrategy\n\nThe default ReportingStrategy. Report every reporting_intervalth step to a DataFrame and write info message to io every info_intervalth reported step (unless writeinfo == false). The flag writeinfo is useful for controlling info messages in MPI codes, e.g. by setting writeinfo =is_mpi_root().\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportToFile","page":"API","title":"Rimu.ReportToFile","text":"ReportToFile(; kwargs...) <: ReportingStrategy\n\nReportingStrategy that writes the report directly to a file in the Arrow format. Useful when dealing with long jobs or large numbers of replicas, when the report can incur a significant memory cost.\n\nThe arrow file can be read back in with load_df(filename) or using Arrow; Arrow.Table(filename).\n\nKeyword arguments\n\nfilename = \"out.arrow\": the file to report to. If the file already exists, a new file is created.\nreporting_interval = 1: interval between simulation steps that are reported.\nchunk_size = 1000: the size of each chunk that is written to the file. A DataFrame of this size is collected in memory and written to disk. When saving, an info message is also printed to io.\nsave_if =is_mpi_root(): if this value is true, save the report, otherwise ignore it.\nreturn_df = false: if this value is true, read the file and return the data frame at the end of computation. Otherwise, an empty DataFrame is returned.\nio = stdout: The IO to print messages to. Set to devnull if you don't want to see messages printed out.\ncompress = :zstd: compression algorithm to use. Can be :zstd, :lz4 or nothing.\n\nSee also load_df and save_df.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ReportingStrategy","page":"API","title":"Rimu.ReportingStrategy","text":"ReportingStrategy\n\nAbstract type for strategies for reporting data in a DataFrame with report!().\n\nImplemented strategies:\n\nReportDFAndInfo\nReportToFile\n\nInterface:\n\nA ReportingStrategy can define any of the following:\n\nrefine_reporting_strategy\nreport!\nreport_after_step!\nfinalize_report!\nreporting_interval\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.RunTillLastStep","page":"API","title":"Rimu.RunTillLastStep","text":"RunTillLastStep(step::Int = 0 # number of current/starting timestep\n             laststep::Int = 100 # number of final timestep\n             shiftMode::Bool = false # whether to adjust shift\n             shift = 0.0 # starting/current value of shift\n             dτ::Float64 = 0.01 # current value of time step\n) <: FciqmcRunStrategy\n\nParameters for running lomc!() for a fixed number of time steps. For alternative strategies, see FciqmcRunStrategy.\n\nwarning: Warning\nThe use of this strategy is deprecated. Pass the relevant arguments directly to ProjectorMonteCarloProblem or to lomc!() instead.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.ShiftStrategy","page":"API","title":"Rimu.ShiftStrategy","text":"ShiftStrategy\n\nAbstract type for defining the strategy for controlling the norm, potentially by updating the shift. Passed as a parameter to lomc!.\n\nImplemented strategies:\n\nDontUpdate\nDoubleLogUpdate - default in lomc!()\nLogUpdate\nLogUpdateAfterTargetWalkers - FCIQMC standard\nDoubleLogUpdateAfterTargetWalkers\n\nExtended help\n\nInternally To implement a custom strategy, define a new subtype of Rimu.ShiftStrategy and implement methods for:\n\nRimu.update_shift_parameters! - to update the shift_parameters\nRimu.initialise_shift_parameters - (optional) to initialise and construct a   custom implementation of the shift_parameters. The default implementation is   Rimu.DefaultShiftParameters.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SignCoherence","page":"API","title":"Rimu.SignCoherence","text":"SignCoherence(reference[; name=:coherence]) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that have the same sign as they do in the reference_dvec. Reports to a column named name, which defaults to coherence.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SimulationPlan","page":"API","title":"Rimu.SimulationPlan","text":"SimulationPlan(; starting_step = 1, last_step = 100, walltime = Inf)\n\nDefines the duration of the simulation. The simulation ends when the last_step is reached or the walltime is exceeded.\n\nSee ProjectorMonteCarloProblem, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleParticleDensity","page":"API","title":"Rimu.SingleParticleDensity","text":"SingleParticleDensity(; save_every=1, component) <: PostStepStrategy\n\nPostStepStrategy  to  compute the diagonal single_particle_density. It records a Tuple with the same eltype as the vector.\n\nComputing the density at every time step can be expensive. This cost can be reduced by setting the save_every argument to a higher value. If the value is set, a vector of zeros is recorded when the saving is skipped.\n\nIf the address type has multiple components, the component argument can be used to compute the density on a per-component basis.\n\nThe density is not normalized, and must be divided by the vector norm(⋅,2) squared.\n\nSee also\n\nsingle_particle_density\nDensityMatrixDiagonal\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SingleState","page":"API","title":"Rimu.SingleState","text":"SingleState(hamiltonian, algorithm, v, wm, pnorm, params, id)\n\nStruct that holds a single state vector and all information needed for an independent run of the algorithm. Can be advanced a step forward with advance!.\n\nSee also SpectralState, SpectralStrategy, ReplicaState, ReplicaStrategy, replica_stats, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralState","page":"API","title":"Rimu.SpectralState","text":"SpectralState <: AbstractVector{SingleState}\n\nHolds one or several SingleStates representing the ground state and excited states of a single replica.\n\nIndexing the SpectralState state[i] returns the ith SingleState.\n\nSee also SpectralStrategy, ReplicaState, SingleState, PMCSimulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.SpectralStrategy","page":"API","title":"Rimu.SpectralStrategy","text":"SpectralStrategy{S}\n\nAbstract type for spectral strategies. The spectral strategy is used to control the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.StateVectors","page":"API","title":"Rimu.StateVectors","text":"StateVectors <: AbstractMatrix{V}\n\nRepresents a matrix of configuration vectors from the state. Construct this object with state_vectors.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.TimeStepStrategy","page":"API","title":"Rimu.TimeStepStrategy","text":"TimeStepStrategy\n\nAbstract type for strategies for updating the time step with update_dτ(). Implemented strategies:\n\nConstantTimeStep\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.Timer","page":"API","title":"Rimu.Timer","text":"Timer <: PostStepStrategy\n\nRecord current time after every step. See Base.Libc.time for information on what time is recorded.\n\n\n\n\n\n","category":"type"},{"location":"API.html#Rimu.WalkerLoneliness","page":"API","title":"Rimu.WalkerLoneliness","text":"WalkerLoneliness(threshold=1) <: PostStepStrategy\n\nAfter each step, compute the proportion of configurations that are occupied by at most threshold walkers. Reports to a column named loneliness.\n\n\n\n\n\n","category":"type"},{"location":"API.html#CommonSolve.init-Tuple{ProjectorMonteCarloProblem}","page":"API","title":"CommonSolve.init","text":"init(problem::ProjectorMonteCarloProblem; copy_vectors=true)::PMCSimulation\n\nInitialise a Rimu.PMCSimulation.\n\nSee also ProjectorMonteCarloProblem, solve!, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.solve","page":"API","title":"CommonSolve.solve","text":"solve(::ProjectorMonteCarloProblem)::PMCSimulation\n\nInitialize and solve a ProjectorMonteCarloProblem until the last step is completed or the walltime limit is reached.\n\nSee also init, solve!, step!, Rimu.PMCSimulation, and solve(::ExactDiagonalizationProblem).\n\n\n\n\n\n","category":"function"},{"location":"API.html#CommonSolve.solve!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.solve!","text":"solve!(sm::PMCSimulation; kwargs...)::PMCSimulation\n\nSolve a Rimu.PMCSimulation until the last step is completed or the walltime limit is reached.\n\nTo continue a previously completed simulation, set a new last_step or walltime using the keyword arguments. Optionally, changes can be made to the replica_strategy, the post_step_strategy, or the reporting_strategy.\n\nOptional keyword arguments:\n\nlast_step = nothing: Set the last step to a new value and continue the simulation.\nwalltime = nothing: Set the allowed walltime to a new value and continue the simulation.\nreset_time = false: Reset the elapsed_time counter and continue the simulation.\nempty_report = false: Empty the report before continuing the simulation.\nreplica_strategy = nothing: Change the replica strategy. Requires the number of replicas   to match the number of replicas in the simulation sm. Implies empty_report = true.\npost_step_strategy = nothing: Change the post-step strategy. Implies   empty_report = true.\nreporting_strategy = nothing: Change the reporting strategy. Implies   empty_report = true.\nmetadata = nothing: Add metadata to the report.\n\nSee also ProjectorMonteCarloProblem, init, solve, step!, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#CommonSolve.step!-Tuple{Rimu.PMCSimulation}","page":"API","title":"CommonSolve.step!","text":"step!(sm::PMCSimulation)::PMCSimulation\n\nAdvance the simulation by one step.\n\nCalling solve! will advance the simulation until the last step or the walltime is exceeded. When completing the simulation without calling solve!, the simulation report needs to be finalised by calling Rimu.finalize_report!.\n\nSee also ProjectorMonteCarloProblem, init, solve!, solve, Rimu.PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu._n_walkers-Tuple{Any, Any}","page":"API","title":"Rimu._n_walkers","text":"_n_walkers(v, shift_strategy)\n\nReturns an estimate of the expected number of walkers as an integer.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.advance!-Tuple{FCIQMC, Any, Rimu.ReplicaState, Rimu.SingleState}","page":"API","title":"Rimu.advance!","text":"advance!(algorithm::PMCAlgorithm, report::Report, state::ReplicaState, s_state::SingleState)\n\nAdvance the s_state by one step according to the algorithm. The state is used only to access the various strategies involved. Steps, stats, and computed quantities are written to the report.\n\nReturns true if the step was successful and calculation should proceed, false when it should terminate.\n\nSee also solve!, step!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.all_overlaps-Union{Tuple{B}, Tuple{N}, Tuple{Tuple, Tuple{Vararg{AbstractDVec, N}}, Any, Val{B}}} where {N, B}","page":"API","title":"Rimu.all_overlaps","text":"all_overlaps(operators, vectors, working_memories, vecnorm=true)\n\nGet all overlaps between vectors and operators. This function is overloaded for MPIData. The flag vecnorm can disable the vector-vector overlap c{i}_dot_c{j}.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.check_transform-Tuple{AllOverlaps, AbstractHamiltonian}","page":"API","title":"Rimu.check_transform","text":"check_transform(r::AllOverlaps, ham)\n\nCheck that the transformation provided to r::AllOverlaps matches the given Hamiltonian ham. Used as a sanity check before starting main lomc! loop.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.clean_and_warn_if_others_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.clean_and_warn_if_others_present","text":"clean_and_warn_if_others_present(nt::NamedTuple{names}, keys) where {names}\n\nRemove keys from a NamedTuple that are not in keys and issue a warning if they are present.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_logger-Tuple","page":"API","title":"Rimu.default_logger","text":"default_logger(args...)\n\nReset the global_logger to Logging.ConsoleLogger. Undoes the effect of smart_logger. Arguments are passed on to Logging.ConsoleLogger.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.default_starting_vector-Tuple{AbstractHamiltonian}","page":"API","title":"Rimu.default_starting_vector","text":"default_starting_vector(hamiltonian::AbstractHamiltonian; kwargs...)\ndefault_starting_vector(\n    address=starting_address(hamiltonian);\n    style=IsDynamicSemistochastic(),\n    initiator=NonInitiator(),\n    threading=nothing,\n    population=10\n)\n\nReturn a default starting vector for ProjectorMonteCarloProblem. The default choice for the starting vector is\n\nv = PDVec(address => population; style, initiator)\n\nif threading is available, or otherwise\n\nv = DVec(address => population; style)\n\nif initiator == NonInitiator(), and\n\nv = InitiatorDVec(address => population; style, initiator)\n\nif not. See PDVec, DVec, InitiatorDVec, StochasticStyle, and InitiatorRule.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.delete_and_warn_if_present-Union{Tuple{names}, Tuple{NamedTuple{names}, Any}} where names","page":"API","title":"Rimu.delete_and_warn_if_present","text":"delete_and_warn_if_present(nt::NamedTuple, keys)\n\nDelete keys from a NamedTuple and issue a warning if they are present. This is useful for removing unused keyword arguments.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.finalize_report!-Tuple{ReportingStrategy, Any}","page":"API","title":"Rimu.finalize_report!","text":"finalize_report!(::ReportingStrategy, report)\n\nFinalize the report. This function is called after all steps in lomc! have finished.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.get_metadata-Tuple{Rimu.Report, Any}","page":"API","title":"Rimu.get_metadata","text":"get_metadata(report::Report, key)\n\nGet metadata key from report. key is converted to a String.\n\nSee also report_metadata!, Report, report!.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.initialise_shift_parameters","page":"API","title":"Rimu.initialise_shift_parameters","text":"initialise_shift_parameters(s::ShiftStrategy, shift, norm, time_step, counter=0, shift_mode=false)\n\nInitiatlise a struct to store the shift parameters.\n\nSee ShiftStrategy, update_shift_parameters!, DefaultShiftParameters.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.lomc!-Tuple{Any, Any}","page":"API","title":"Rimu.lomc!","text":"lomc!(ham::AbstractHamiltonian, [v]; kwargs...) -> df, state\nlomc!(state::ReplicaState, [df]; kwargs...) -> df, state\n\nLinear operator Monte Carlo: Perform a projector quantum Monte Carlo simulation for determining the lowest eigenvalue of ham. The details of the simulation are controlled by the optional keyword arguments and by the type of the optional starting vector v. Alternatively, a ReplicaState can be passed in to continue a previous simulation.\n\nCommon keyword arguments and defaults:\n\nlaststep = 100 - controls the number of steps.\ndτ = 0.01 - time step.\ntargetwalkers = 1000 - target for the 1-norm of the coefficient vector.\naddress = starting_address(ham) - set starting address for default v and shift.\nstyle = IsStochasticInteger() - set StochasticStyle for default v; unused if v is specified.\ninitiator = NonInitiator() - set InitiatorRule for default v; unused if v is specified.\nthreading - default is to use multithreading and MPI if multiple threads are available. Set to true to force PDVec for the starting vector, false for serial computation; unused if v is specified.\nshift = diagonal_element(ham, address) - initial value of shift.\npost_step_strategy::NTuple{N,<:PostStepStrategy} = () - extract observables (e.g. ProjectedEnergy), see PostStepStrategy. (Deprecated: post_step is accepted as an alias for post_step_strategy.)\nreplica_strategy::ReplicaStrategy = NoStats(1) - run several synchronised simulations, see ReplicaStrategy. (Deprecated: replica is accepted as an alias for replica_strategy.)\nreporting_strategy::ReportingStrategy = ReportDFAndInfo() - how and when to report results, see ReportingStrategy. (Deprecated: r_strat is accepted as an alias for reporting_strategy.)\nname = \"lomc!\" - name displayed in progress bar (via ProgressLogging)\nmetadata - user-supplied metadata to be added to the report df. Must be an iterable of pairs or a NamedTuple, e.g. metadata = (\"key1\" => \"value1\", \"key2\" => \"value2\"). All metadata is converted to strings.\n\nSome metadata is automatically added to the report df including Rimu.PACKAGE_VERSION and data from state.\n\nReturn values\n\nlomc! returns a named tuple with the following fields:\n\ndf: a DataFrame with all statistics being reported.\nstate: a ReplicaState that can be used for continuations.\n\nExample\n\njulia> add = BoseFS(1,2,3);\n\njulia> hamiltonian = HubbardReal1D(add);\n\njulia> df1, state = lomc!(hamiltonian; targetwalkers=500, laststep=100);\n\njulia> df2, _ = lomc!(state, df1; laststep=200, metadata=(;info=\"cont\")); # Continuation run\n\njulia> size(df1)\n(100, 10)\n\njulia> size(df2)\n(200, 10)\n\njulia> using DataFrames; metadata(df2, \"info\") # retrieve custom metadata\n\"cont\"\n\njulia> metadata(df2, \"hamiltonian\") # some metadata is automatically added\n\"HubbardReal1D(BoseFS{6,3}(1, 2, 3); u=1.0, t=1.0)\"\n\nFurther keyword arguments and defaults:\n\nτ_strat::TimeStepStrategy = ConstantTimeStep() - adjust time step or not, see TimeStepStrategy\ns_strat::ShiftStrategy = DoubleLogUpdate(; targetwalkers, ζ = 0.08, ξ = ζ^2/4) - how to update the shift, see ShiftStrategy.\nmaxlength = 2 * s_strat.targetwalkers + 100 - upper limit on the length of v; when reached, lomc! will abort\nwm - working memory for re-use in subsequent calculations; is mutated.\ndf = DataFrame() - when called with AbstractHamiltonian argument, a DataFrame can be passed for merging with the report df.\n\nThe default choice for the starting vector is v = default_starting_vector(; address, style, threading, initiator). See default_starting_vector, PDVec, DVec, StochasticStyle, and InitiatorRule.\n\nwarning: Warning\nThe use of this lomc! is deprecated. Use ProjectorMonteCarloProblem and solve instead.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_replicas-Union{Tuple{ReplicaStrategy{N}}, Tuple{N}} where N","page":"API","title":"Rimu.num_replicas","text":"num_replicas(state_or_strategy)\n\nReturn the number of replicas used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.num_spectral_states-Union{Tuple{Rimu.SpectralStrategy{S}}, Tuple{S}} where S","page":"API","title":"Rimu.num_spectral_states","text":"num_spectral_states(state_or_strategy)\n\nReturn the number of spectral states used in the simulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.post_step_action","page":"API","title":"Rimu.post_step_action","text":"post_step_action(::PostStepStrategy, ::SingleState, step) -> kvpairs\n\nCompute statistics after FCIQMC step. Should return a tuple of :key => value pairs. This function is only called every reporting_interval steps, as defined by the ReportingStrategy.\n\nSee also PostStepStrategy, ReportingStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.refine_reporting_strategy-Tuple{ReportingStrategy}","page":"API","title":"Rimu.refine_reporting_strategy","text":"refine_reporting_strategy(reporting_strategy::ReportingStrategy) -> reporting_strategy\n\nInitialize the reporting strategy. This can be used to set up filenames or other attributes that need to be unique for a run of FCIQMC.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replace_keys-Tuple{NamedTuple, Any}","page":"API","title":"Rimu.replace_keys","text":"replace_keys(nt::NamedTuple, (:old1 => :new1, :old2 => :new2, ...))\n\nReplace keys in a NamedTuple with new keys. This is useful for renaming fields in a NamedTuple. Ignores keys that are not present in the NamedTuple.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.replica_stats","page":"API","title":"Rimu.replica_stats","text":"replica_stats(RS::ReplicaStrategy{N}, spectral_states::NTuple{N,SingleState}) -> (names, values)\n\nReturn the names and values of statistics related to N replica states consistent with the ReplicaStrategy RS. names should be a tuple of Symbols or Strings and values should be a tuple of the same length. This function will be called every reporting_interval steps from lomc!, or once per time step if reporting_interval is not defined.\n\nPart of the ReplicaStrategy interface. See also SingleState.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Rimu.report!-Tuple{ReportingStrategy, Any, Vararg{Any}}","page":"API","title":"Rimu.report!","text":" report!(::ReportingStrategy, step, report::Report, keys, values, id=\"\")\n report!(::ReportingStrategy, step, report::Report, nt, id=\"\")\n\nReport keys and values to report, which will be converted to a DataFrame before lomc! exits. Alternatively, a nt::NamedTuple can be passed in place of keys and values. If id is specified, it is appended to all keys. This is used to differentiate between values reported by different replicas.\n\nTo overload this function for a new ReportingStrategy, overload report!(::ReportingStrategy, step, args...) and apply the report by calling report!(args...).\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, DataFrame}","page":"API","title":"Rimu.report!","text":"report!(report::Report, df::DataFrame)\n\nConvert the DataFrame df to a Report. This function does not copy the data.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report!-Tuple{Rimu.Report, Union{AbstractString, Symbol}, Any}","page":"API","title":"Rimu.report!","text":"report!(report, keys, values, id=\"\")\nreport!(report, pairs, id=\"\")\n\nWrite keys, values pairs to report that will be converted to a DataFrame later. Alternatively, a named tuple or a collection of pairs can be passed instead of keys and values.\n\nThe value of id is appended to the name of the column, e.g. report!(report, :key, value, :_1) will report value to a column named :key_1.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_after_step!-Tuple{ReportingStrategy, Any, Any, Vararg{Any}}","page":"API","title":"Rimu.report_after_step!","text":"report_after_step!(::ReportingStrategy, step, report, state) -> report\n\nThis function is called at the very end of a step, after reporting_interval steps. It may modify the report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.report_metadata!-Tuple{Rimu.Report, Any, Any}","page":"API","title":"Rimu.report_metadata!","text":"report_metadata!(report::Report, key, value)\nreport_metadata!(report::Report, kvpairs)\n\nSet metadata key to value in report. key and value are converted to Strings. Alternatively, an iterable of key-value pairs or a NamedTuple can be passed.\n\nSee also get_metadata, report!, Report.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.reporting_interval-Tuple{ReportingStrategy}","page":"API","title":"Rimu.reporting_interval","text":"reporting_interval(::ReportingStrategy)\n\nGet the interval between steps for which non-essential statistics are reported. Defaults to 1 if chosen ReportingStrategy does not specify an interval.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.set_up_initial_shift_parameters-Union{Tuple{R}, Tuple{S}, Tuple{FCIQMC, Any, StaticArraysCore.SMatrix{S, R}, Any, Any}} where {S, R}","page":"API","title":"Rimu.set_up_initial_shift_parameters","text":"set_up_initial_shift_parameters(\n    algorithm::FCIQMC, hamiltonian, starting_vectors, shift, time_step, initial_shift_parameters\n)\n\nSet up the initial shift parameters for the FCIQMC algorithm.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.single_particle_density-Tuple{Any}","page":"API","title":"Rimu.single_particle_density","text":"single_particle_density(dvec; component)\nsingle_particle_density(add; component)\n\nCompute the diagonal single particle density of vector dvec or address add. If the component argument is given, only that component of the addresses is taken into account. The result is always normalized so that sum(result) ≈ num_particles(address).\n\nExamples\n\njulia> v = DVec(fs\"|⋅↑⇅↓⋅⟩\" => 1.0, fs\"|↓↓⋅↑↑⟩\" => 0.5)\nDVec{FermiFS2C{2, 2, 5, 4, FermiFS{2, 5, BitString{5, 1, UInt8}}, FermiFS{2, 5, BitString{5, 1, UInt8}}},Float64} with 2 entries, style = IsDeterministic{Float64}()\n  fs\"|↓↓⋅↑↑⟩\" => 0.5\n  fs\"|⋅↑⇅↓⋅⟩\" => 1.0\n\njulia> single_particle_density(v)\n(0.2, 1.0, 1.6, 1.0, 0.2)\n\njulia> single_particle_density(v; component=1)\n(0.0, 1.6, 1.6, 0.4, 0.4)\n\nSee also\n\nSingleParticleDensity\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.smart_logger-Tuple","page":"API","title":"Rimu.smart_logger","text":"smart_logger(args...)\n\nEnable terminal progress bar during interactive use (i.e. unless running on CI or HPC). Arguments are passed on to the logger. This is run once during Rimu startup. Undo with default_logger or by setting Base.global_logger().\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.state_vectors-Tuple{R} where R<:Rimu.ReplicaState","page":"API","title":"Rimu.state_vectors","text":"state_vectors(state::ReplicaState)\nstate_vectors(sim::PMCSimulation)\n\nReturn an AbstractMatrix of configuration vectors from the state. The vectors can be accessed by indexing the resulting collection, where the row index corresponds to the replica index and the column index corresponds to the spectral state index.\n\nSee also SingleState, ReplicaState, SpectralState, PMCSimulation.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_dτ-Tuple{ConstantTimeStep, Any, Vararg{Any}}","page":"API","title":"Rimu.update_dτ","text":"update_dτ(s<:TimeStepStrategy, dτ, tnorm) -> new dτ\n\nUpdate the time step according to the strategy s.\n\n\n\n\n\n","category":"method"},{"location":"API.html#Rimu.update_shift_parameters!","page":"API","title":"Rimu.update_shift_parameters!","text":"update_shift_parameters!(\n    s <: ShiftStrategy,\n    shift_parameters,\n    tnorm,\n    v_new,\n    v_old,\n    step,\n    report\n) -> shift_stats, proceed\n\nUpdate the shift_parameters according to strategy s. See ShiftStrategy. Returns a named tuple of the shift statistics and a boolean proceed indicating whether the simulation should proceed.\n\nSee initialise_shift_parameters, ShiftStrategy.\n\n\n\n\n\n","category":"function"},{"location":"API.html#Reexported-Submodules","page":"API","title":"Reexported Submodules","text":"","category":"section"},{"location":"API.html#ExactDiagonalization","page":"API","title":"ExactDiagonalization","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Exact Diagonalization","category":"page"},{"location":"API.html#Interfaces","page":"API","title":"Interfaces","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Interfaces","category":"page"},{"location":"API.html#StochasticStyles","page":"API","title":"StochasticStyles","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StochasticStyles","category":"page"},{"location":"API.html#Hamiltonians","page":"API","title":"Hamiltonians","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module Hamiltonians","category":"page"},{"location":"API.html#BitStringAddresses","page":"API","title":"BitStringAddresses","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module BitStringAddresses","category":"page"},{"location":"API.html#DictVectors","page":"API","title":"DictVectors","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module DictVectors","category":"page"},{"location":"API.html#StatsTools","page":"API","title":"StatsTools","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module StatsTools","category":"page"},{"location":"API.html#RMPI","page":"API","title":"RMPI","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"See Module RMPI","category":"page"},{"location":"API.html#Index","page":"API","title":"Index","text":"","category":"section"},{"location":"API.html","page":"API","title":"API","text":"","category":"page"},{"location":"stochasticstyles.html#Module-StochasticStyles","page":"Stochastic styles","title":"Module StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyles","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles","page":"Stochastic styles","title":"Rimu.StochasticStyles","text":"This module provides concrete implementations of StochasticStyles, which specify the algorithm used by lomc! when performing stochastic matrix-vector multiplication.\n\nImplemented stochastic styles:\n\nStochasticStyle: abstract type for stochastic styles\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nThe offdiagonal spawning is defined in spawning.jl and is controlled by setting a SpawningStrategy.\n\nThe vector compression strategies are defined in compression.jl and are controlled by setting a CompressionStrategy.\n\n\n\n\n\n","category":"module"},{"location":"stochasticstyles.html#Available-StochasticStyles","page":"Stochastic styles","title":"Available StochasticStyles","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StyleUnknown","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StyleUnknown","page":"Stochastic styles","title":"Rimu.Interfaces.StyleUnknown","text":"StyleUnknown{T}() <: StochasticStyle\n\nTrait for value types not (currently) compatible with FCIQMC. This style makes it possible to construct dict vectors with unsupported valtypes.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"styles.jl\"]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDeterministic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDeterministic","text":"IsDeterministic{T=Float64}(compression=NoCompression()) <: StochasticStyle{T}\n\nPropagate with deterministic vector matrix multiplications. Stochastic compression of the resultant vector (after annihilations) can be triggered by setting the optional compression argument to a relevant CompressionStrategy.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsDynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsDynamicSemistochastic","text":"IsDynamicSemistochastic{T=Float64}(; kwargs...) <: StochasticStyle{T}\n\nQMC propagation with floating-point walker numbers and reduced noise. All possible spawns (offdiagonal elements in vector-matrix multiplication) are performed deterministically when number of walkers in a configuration is high, as controlled by the rel_spawning_threshold and abs_spawning_threshold keywords. Stochastic selection of spawns is controlled by the spawning keyword.\n\nBy default, a stochastic vector compression is applied after annihilations are completed. This behaviour can be changed to on-the-fly projection (as in IsStochasticInteger or IsStochasticWithThreshold) by setting late_compression=false, or modifying spawning and compression. See parameters below for a more detailed explanation.\n\nParameters:\n\nthreshold = 1.0: Values below this number are stochastically projected to this value or zero. See also ThresholdCompression.\nlate_compression = true: If this is set to true, stochastic vector compression is performed after all the spawns are performed. If it is set to false, values are stochastically projected as they are being spawned. late_compression=true is equivalent to setting compression=ThresholdCompression(threshold) and spawning=WithReplacement().  late_compression=false is equivalent to compression=NoCompression() and spawning=WithReplacement(threshold).\nrel_spawning_threshold = 1.0: If the walker number on a configuration times this threshold is greater than the number of offdiagonals, spawning is done deterministically. Should be set to 1 or more for best performance.\nabs_spawning_threshold = Inf: If the walker number on a configuration is greater than this value, spawning is done deterministically. Can be set to e.g.  abs_spawning_threshold = 0.1 * target_walkers.\nspawning = WithReplacement(): SpawningStrategy to use for the non-exact spawns.\ncompression = ThresholdCompression(threshold): CompressionStrategy used to compress the vector after a step. Overrides threshold.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochastic2Pop","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochastic2Pop","text":"IsStochastic2Pop{T=Complex{Int}}() <: StochasticStyle{T}\n\nStochastic propagation with complex walker numbers representing two populations of integer walkers.\n\nWhen using this style, make sure to set a complex number as target walkers in the ShiftStrategy!\n\nThis style is experimental.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticInteger","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticInteger","text":"IsStochasticInteger{T=Int}() <: StochasticStyle{T}\n\nFCIQMC algorithm with integer walkers as in Booth et al. (2009). During the vector matrix product each individual diagonal and spawning step is rounded stochastically to a nearby integer value.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.IsStochasticWithThreshold","page":"Stochastic styles","title":"Rimu.StochasticStyles.IsStochasticWithThreshold","text":"IsStochasticWithThreshold{T=Float64}(threshold=1.0) <: StochasticStyle{T}\n\nStochastic propagation with floating point walker numbers. During the vector matrix product each individual diagonal and spawning result is rounded stochastically if smaller than threshold (before annihilations). For a more customizable stochastic style, see IsDynamicSemistochastic.\n\nSee also StochasticStyle.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#The-StochasticStyle-interface","page":"Stochastic styles","title":"The StochasticStyle interface","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"StochasticStyle\nstep_stats\napply_column!\ndefault_style","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.StochasticStyle","page":"Stochastic styles","title":"Rimu.Interfaces.StochasticStyle","text":"StochasticStyle(v)\n\nAbstract type. When called as a function it returns the native style of the generalised vector v that determines how simulations are to proceed.\n\nUsage\n\nConcrete StochasticStyles can be used for the style keyword argument of lomc!, DVec and PDVec. The following styles are available:\n\nIsStochasticInteger\nIsDeterministic\nIsStochasticWithThreshold\nIsDynamicSemistochastic\nStyleUnknown\n\nExtended Help\n\nInterface\n\nWhen defining a new StochasticStyle, subtype it as MyStyle<:StochasticStyle{T} where T is the concrete value type the style is designed to work with.\n\nFor it to work with lomc!, a StochasticStyle must define the following:\n\napply_column!(::StochasticStyle, w, H, address, value)\nstep_stats(::StochasticStyle)\n\nand optionally\n\nCompressionStrategy(::StochasticStyle) for vector compression after annihilations,\n\nSee also StochasticStyles, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.step_stats","page":"Stochastic styles","title":"Rimu.Interfaces.step_stats","text":"step_stats(::StochasticStyle)\nstep_stats(::CompressionStrategy)\n\nReturn a tuple of stat names (Symbol or String) and a tuple of zeros of the same length. These will be reported as columns in the DataFrame returned by lomc!.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.apply_column!","page":"Stochastic styles","title":"Rimu.Interfaces.apply_column!","text":"apply_column!(v, op, addr, num, boost=1) -> stats::Tuple\n\nApply the product of column addr of the operator op and the scalar num to the vector v according to the StochasticStyle of v. By expectation value this should be equivalent to\n\nv .+= op[:, add] .* num\n\nThis is used to perform the spawning step in FCIQMC and to implement operator-vector multiplications. Mutates v and reports spawning statistics.\n\nThe boost argument multiplicatively increases the number of spawns to be performed without affecting the expectation value of the procedure.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.Interfaces.default_style","page":"Stochastic styles","title":"Rimu.Interfaces.default_style","text":"default_style(::Type)\n\nPick a StochasticStyle based on the value type. Returns StyleUnknown if no known default style is set.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Compression-strategies","page":"Stochastic styles","title":"Compression strategies","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"CompressionStrategy\nNoCompression\nStochasticStyles.ThresholdCompression\ncompress!","category":"page"},{"location":"stochasticstyles.html#Rimu.Interfaces.CompressionStrategy","page":"Stochastic styles","title":"Rimu.Interfaces.CompressionStrategy","text":"CompressionStrategy\n\nThe CompressionStrategy controls how a vector is compressed after a step.\n\nDefault implementation:\n\nNoCompression: no vector compression\n\nUsage\n\nA subtype of CompressionStrategy can be passed as a keyword argument to the constructors for some StochasticStyles. Calling CompressionStrategy(s::StochasticStyle) returns a relevant subtype. The default is NoCompression.\n\nInterface\n\nWhen defining a new CompressionStrategy, subtype it as MyCompressionStrategy <: CompressionStrategy and define these methods:\n\ncompress!(s::CompressionStrategy, v)\ncompress!(s::CompressionStrategy, w, v)\nstep_stats(s::CompressionStrategy)\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.NoCompression","page":"Stochastic styles","title":"Rimu.Interfaces.NoCompression","text":"NoCompression <: CompressionStrategy end\n\nDefault CompressionStrategy. Leaves the vector intact.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.ThresholdCompression","page":"Stochastic styles","title":"Rimu.StochasticStyles.ThresholdCompression","text":"ThresholdCompression(threshold=1) <: CompressionStrategy\n\nCompressionStrategy that compresses a vector by threshold projection. Every entry in the vector with a value below the threshold is either set to zero, or increased to the threshold. The probabilty of setting it to zero is equal to abs(value) / threshold.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.Interfaces.compress!","page":"Stochastic styles","title":"Rimu.Interfaces.compress!","text":"compress!([::CompressionStrategy,] v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\ncompress!([::CompressionStrategy,] w, v) -> ::NTuple{N,::Symbol}, ::NTuple{N}\n\nCompress the vector v. The one-argument version compresses the vector in-place. The two-argument vector stores the result in w. The CompressionStrategy associated with the StochasticStyle of v is used to determine the type of compression.\n\nReturns two tuples, containing the names and values of statistics that are to be reported.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Spawning-strategies-and-convenience-functions","page":"Stochastic styles","title":"Spawning strategies and convenience functions","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"The following functions and types are unexported, but are useful when defining new styles.","category":"page"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Modules = [StochasticStyles]\nPages = [\"spawning.jl\"]\nOrder = [:function,:method,:type]","category":"page"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.diagonal_step!","page":"Stochastic styles","title":"Rimu.StochasticStyles.diagonal_step!","text":"diagonal_step!(w, op, add, val, threshold=0) -> (clones, deaths, zombies)\n\nPerform diagonal step on a walker add => val. Optional argument threshold sets the projection threshold. If eltype(w) is an Integer, the val is rounded to the nearest integer stochastically.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.projected_deposit!","page":"Stochastic styles","title":"Rimu.StochasticStyles.projected_deposit!","text":"projected_deposit!(w, add, val, parent, threshold=0)\n\nLike deposit!, but performs threshold projection before spawning. If eltype(w) is an Integer, values are stochastically rounded.\n\nReturns the value deposited.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.spawn!","page":"Stochastic styles","title":"Rimu.StochasticStyles.spawn!","text":"spawn!(s::SpawningStrategy, w, op::AbstractHamiltonian, add, val, boost)\nspawn!(s::SpawningStrategy, w, offdiags::AbstractOffdiagonals, add, val, boost)\n\nPerform stochastic spawns to w from address add with val walkers. val * boost controls the number of spawns performed.\n\nThis function should be overloaded in the second form, with offdiags as an argument.\n\nSee SpawningStrategy.\n\n\n\n\n\n","category":"function"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Bernoulli","page":"Stochastic styles","title":"Rimu.StochasticStyles.Bernoulli","text":"Bernoulli(threshold=0.0) <: SpawningStrategy\n\nPerform Bernoulli sampling. A spawn is attempted on each offdiagonal element with a probability that results in an expected number of spawns equal to the number of walkers on the spawning configuration. This is significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.DynamicSemistochastic","page":"Stochastic styles","title":"Rimu.StochasticStyles.DynamicSemistochastic","text":"DynamicSemistochastic(; strat, rel_threshold, abs_threshold) <: SpawningStrategy\n\nSpawningStrategy that behaves like strat when the number of walkers is low, but performs exact steps when it is high. What \"high\" means is controlled by the two thresholds described below.\n\nParameters\n\nstrat = WithReplacement(): a SpawningStrategy to use when the multiplication is not performed exactly. If the strat has a threshold different from zero, all spawns will be projected to that threshold.\nrel_threshold = 1.0: When deciding on whether to perform an exact spawn, this value is multiplied to the number of walkers. Should be set to 1 or more for best performance. This threshold is affected by the boost argument to spawn!.\nabs_threshold = Inf: When deciding on whether to perform an exact spawn, min(abs_threshold, num_offdiagonals) is used. This threshold is not affected by the boost argument to spawn!.\n\nSee e.g. WithoutReplacement for a description of the strat.threshold parameter.\n\nspawn! with this strategy returns the numbers of exact and inexact spawns, the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.Exact","page":"Stochastic styles","title":"Rimu.StochasticStyles.Exact","text":"Exact(threshold=0.0) <: SpawningStrategy\n\nPerform an exact spawning step.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SingleSpawn","page":"Stochastic styles","title":"Rimu.StochasticStyles.SingleSpawn","text":"SingleSpawn(threshold=0.0) <: SpawningStrategy\n\nPerform a single spawn. Useful as a building block for other stochastic styles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts (always 1) and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.SpawningStrategy","page":"Stochastic styles","title":"Rimu.StochasticStyles.SpawningStrategy","text":"SpawningStrategy\n\nA SpawningStrategy is used to control how spawns (multiplies with off-diagonal part of the column vector) are performed and can be passed to some of the StochasticStyles as keyword arguments.\n\nThe following concrete implementations are provided:\n\nExact: Perform exact spawns. Used by IsDeterministic.\nWithReplacement: The default stochastic spawning strategy. Spawns are chosen with replacement.\nDynamicSemistochastic: Behave like Exact when the number of spawns performed is high, and like a different substrategy otherwise. Used by IsDynamicSemistochastic.\nSingleSpawn: Perform a single spawn only. Used as a building block for other strategies.\nWithoutReplacement: Similar to WithReplacement, but ensures each spawn is only performed once. Only to be used as a substrategy of DynamicSemistochastic.\nBernoulli: Each spawn is attempted with a fixed probability. Only to be used as a substrategy of DynamicSemistochastic.\n\nInterface\n\nIn order to implement a new SpawningStrategy, define a method for spawn!.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithReplacement","text":"WithReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled with replacement. This is the default spawning strategy for most of the StochasticStyles.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Rimu.StochasticStyles.WithoutReplacement","page":"Stochastic styles","title":"Rimu.StochasticStyles.WithoutReplacement","text":"WithoutReplacement(threshold=0.0) <: SpawningStrategy\n\nSpawningStrategy where spawn targets are sampled without replacement. This strategy needs to allocate a temporary array during spawning, which makes it significantly less efficient than WithReplacement.\n\nIf the number of spawn attempts is greater than the number of offdiagonals, this functions like Exact, but is less efficient. For best performance, this strategy is to be used as a substrategy of DynamicSemistochastic.\n\nParameters\n\nthreshold sets the projection threshold. If set to zero, no projection is performed.\n\nspawn! with this strategy returns the number of spawn attempts and the number of spawns.\n\n\n\n\n\n","category":"type"},{"location":"stochasticstyles.html#Index","page":"Stochastic styles","title":"Index","text":"","category":"section"},{"location":"stochasticstyles.html","page":"Stochastic styles","title":"Stochastic styles","text":"Pages   = [\"stochasticstyles.md\"]","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"EditURL = \"../../../scripts/BHM-example-mpi.jl\"","category":"page"},{"location":"generated/BHM-example-mpi.html#Example-2:-Rimu-with-MPI","page":"Rimu with MPI","title":"Example 2: Rimu with MPI","text":"","category":"section"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"In this example, we will demonstrate using Rimu with MPI.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"A runnable script for this example is located here. Run it with mpirun julia BHM-example-mpi.jl.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We start by importing Rimu and Rimu.RMPI, which contains MPI-related functionality.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"using Rimu\nusing Rimu.RMPI","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Note that it is not necessary to initialise the MPI library, as this is already done automatically when Rimu is loaded.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will compute the ground state of a Bose-Hubbard model in momentum space with 10 particles in 10 sites.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"First, we define the Hamiltonian. We want to start from an address with zero momentum.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"address = BoseFS(10, 5 => 10)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We will set the interaction strength u to 6.0. The hopping strength t defaults to 1.0.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"H = HubbardMom1D(address; u=6.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"HubbardMom1D(BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0); u=6.0, t=1.0)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Next, we construct the starting vector. We use a PDVec, which is automatically MPI-distributed if MPI is available. We set the vector's stochastic style to IsDynamicSemistochastic, which improves statistics and reduces the sign problem.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"initial_vector = PDVec(address => 1.0; style=IsDynamicSemistochastic())","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"1-element PDVec: style = IsDynamicSemistochastic{Float64,ThresholdCompression,DynamicSemistochastic}()\n  fs\"|0 0 0 0 10 0 0 0 0 0⟩\" => 1.0","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"We set a reporting strategy. We will use ReportToFile, which writes the reports directly to a file. This is useful for reducing memory use in long-running jobs, as we don't need to keep the results in memory. It also allows us to inspect the results before the computation finishes and recover some data if it fails. Setting save_if=is_mpi_root() will ensure only the root MPI rank will write to the file. The chunk_size parameter determines how often the data is saved to the file. Progress messages are suppressed with io=devnull.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"reporting_strategy = ReportToFile(\n    filename=\"result.arrow\",\n    save_if=is_mpi_root(),\n    reporting_interval=1,\n    chunk_size=1000,\n    io=devnull\n)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ReportToFile{Symbol}(\"result.arrow\", 1, 1000, true, false, Base.DevNull(), :zstd, nothing)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Now, we can set other parameters as usual. We will perform the computation with 10_000 walkers. We will also compute the projected energy.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"s_strat = DoubleLogUpdate(targetwalkers=10_000)\npost_step_strategy = ProjectedEnergy(H, initial_vector)","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"ProjectedEnergy{HubbardMom1D{Float64, 10, BoseFS{10, 10, BitString{19, 1, UInt32}}, 6.0, 1.0}, Rimu.DictVectors.FrozenPDVec{BoseFS{10, 10, BitString{19, 1, UInt32}}, Float64, 1}, Rimu.DictVectors.FrozenPDVec{BoseFS{10, 10, BitString{19, 1, UInt32}}, Float64, 1}}(:vproj, :hproj, HubbardMom1D(BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0); u=6.0, t=1.0), Rimu.DictVectors.FrozenPDVec{BoseFS{10, 10, BitString{19, 1, UInt32}}, Float64, 1}(([BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0) => 1.0],)), Rimu.DictVectors.FrozenPDVec{BoseFS{10, 10, BitString{19, 1, UInt32}}, Float64, 1}(([BoseFS{10,10}(1, 0, 0, 0, 8, 0, 0, 0, 1, 0) => 5.692099788303083, BoseFS{10,10}(0, 0, 0, 0, 8, 0, 0, 0, 0, 2) => 4.024922359499621, BoseFS{10,10}(0, 0, 0, 0, 10, 0, 0, 0, 0, 0) => 7.0, BoseFS{10,10}(0, 0, 1, 0, 8, 0, 1, 0, 0, 0) => 5.692099788303083, BoseFS{10,10}(0, 0, 0, 1, 8, 1, 0, 0, 0, 0) => 5.692099788303083, BoseFS{10,10}(0, 1, 0, 0, 8, 0, 0, 1, 0, 0) => 5.692099788303083],)))","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"The @mpi_root macro performs an action on the root rank only, which is useful for printing.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"@mpi_root println(\"Running FCIQMC with \", mpi_size(), \" rank(s).\")","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Running FCIQMC with 1 rank(s).\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"Finally, we can run the computation.","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"lomc!(H, initial_vector; reporting_strategy, s_strat, post_step_strategy, dτ=1e-4, laststep=10_000);\n","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"","category":"page"},{"location":"generated/BHM-example-mpi.html","page":"Rimu with MPI","title":"Rimu with MPI","text":"This page was generated using Literate.jl.","category":"page"},{"location":"index.html#Rimu.jl-Package-Guide","page":"Guide","title":"Rimu.jl Package Guide","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Random Integrators for many-body quantum systems","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The grand aim is to develop a toolbox for many-body quantum systems that can be represented by a Hamiltonian in second quantisation language. Currently supported features include:","category":"page"},{"location":"index.html#Interacting-with-quantum-many-body-models","page":"Guide","title":"Interacting with quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Full configuration interaction quantum Monte Carlo (FCIQMC), a flavour of projector quantum Monte Carlo for stochastically solving the time-independent Schrödinger equation. See References.\nMatrix-free exact diagonalisation of quantum Hamiltonians (with external package KrylovKit.jl).\nSparse matrix representation of quantum Hamiltonians for exact diagonalisation with sparse linear algebra package of your choice (fastest for small systems).","category":"page"},{"location":"index.html#Representing-quantum-many-body-models","page":"Guide","title":"Representing quantum many-body models","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"A composable and efficient type system for representing single- and multi-component Fock states of bosons, fermions, and mixtures thereof, to be used as a basis for representing Hamiltonians.\nAn interface for defining many-body Hamiltonians.\nPre-defined models include:\nHubbard model in real space for bosons and fermions and mixtures in 1, 2, and 3 spatial dimensions.\nHubbard and related lattice models in momentum space for bosons and fermions in one spatial dimension.\nTranscorrelated Hamiltonian for contact interactions in one dimension for fermions, as described in Jeszenski et al. arXiv:1806.11268.","category":"page"},{"location":"index.html#Statistical-analysis-of-Monte-Carlo-data","page":"Guide","title":"Statistical analysis of Monte Carlo data","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Blocking analysis following Flyvberg & Peterson JCP (1989), and automated with hypothesis testing by Jonsson","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"PRE (2018).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Unbiased estimators for the ground state energy by re-reweighting following Nightingale & Blöte PRB (1986) and Umrigar et al. JCP (1993).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code supports parallelisation with MPI (harnessing MPI.jl) as well as native Julia threading (experimental). In the future, we may add tools to solve the time-dependent Schrödinger equation and Master equations for open system time evolution.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Concept: Joachim Brand and Elke Pahl.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Contributors: Joachim Brand, Elke Pahl, Mingrui Yang, Matija Čufar, Chris Bradly.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Discussions, help, and additional contributions are acknowledged by Ali Alavi, Didier Adrien, Chris Scott (NeSI), Alexander Pletzer (NeSI).","category":"page"},{"location":"index.html#Installation","page":"Guide","title":"Installation","text":"","category":"section"},{"location":"index.html#Installing-Rimu-for-usage","page":"Guide","title":"Installing Rimu for usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is a registered package and can be installed with the package manager. Hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> add Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Alternatively, use","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Pkg; Pkg.add(name=\"Rimu\")","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"in order to install Rimu from a script.","category":"page"},{"location":"index.html#Installing-Rimu-for-development","page":"Guide","title":"Installing Rimu for development","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"In order to be able to edit the source code, push changes, change and make new git branches, etc., clone the git repository with git clone to a convenient location, e.g. ~/mygitpackagefolder/. Then hit the ] key at the Julia REPL to get into Pkg mode and type","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"pkg> develop ~/mygitpackagefolder/rimu.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"where the file path has to be adjusted to the location of the cloned git repository.","category":"page"},{"location":"index.html#Usage","page":"Guide","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The package is now installed and can be imported with","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Rimu","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"When planning to edit the code of the package it is advisable to use the Revise package by issuing","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"julia> using Revise","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"before using Rimu. This will track any changes made to the source code of Rimu and the changed package will be available after saving the source code (hopefully, and most of the time, without restarting the Julia REPL).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu offers a number of tools for representing Hamiltonians (see Hamiltonians) and state vectors / wave functions (see DictVectors) as well as algorithms to find the ground state, e.g. lomc!.","category":"page"},{"location":"index.html#Scripts","page":"Guide","title":"Scripts","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"Rimu is written as a Julia package to be imported with using Rimu as described above. It supplies useful functions and types. Performing actual calculations and analysing the results is done with scripts. The folder scripts/ contains a collections of scripts that are either examples for use of the Rimu package or useful scripts for data analysis. In particular:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"scripts/BHM-example.jl is an example script that runs fciqmc on the 1D Bose-Hubbard model. A data frame with results is written to the file fciqmcdata.arrow.\nscripts/BHM-example-mpi.jl demonstrates basic usage of Rimu with MPI.","category":"page"},{"location":"index.html#MPI","page":"Guide","title":"MPI","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The Rimu package can run in parallel on different processes or node and distribute work by making use of MPI, or \"message passing interface\". For example, running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> julia scripts/BHM-example.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"will run on one processor with the main lomc!() computation (i.e. after package loading and compilation) completing in 2.69 seconds.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Running","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"> mpirun -np 4 julia scripts/BHM-example-mpi.jl","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"on the same hardware makes use of 4 cores and the main part completes in 1.04 seconds, a speedup factor of 2.6. This seems reasonable, given that extra work needs to be done for communicating between different processes.","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Using MPI parallelism with Rimu is easy. Enabling MPI for use in lomc!() is enabled automatically if PDVec is used to store a vector. In that case, data will be stored in a distributed fashion among the MPI ranks and only communicated between ranks when necessary. Additional MPI-related functionality is provided by the module RMPI.","category":"page"},{"location":"index.html#Compatibility","page":"Guide","title":"Compatibility","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"We recommend using Rimu with the latest Julia release version. Rimu requires at least julia v1.9.","category":"page"},{"location":"index.html#References","page":"Guide","title":"References","text":"","category":"section"},{"location":"index.html","page":"Guide","title":"Guide","text":"The code implements the FCIQMC algorithm originally described in","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Fermion Monte Carlo without fixed nodes: A game of life, death, and annihilation in Slater determinant space\", G. H. Booth, A. J. W. Thom, A. Alavi, J. Chem. Phys. 131, 054106 (2009).\n\"Communications: Survival of the fittest: accelerating convergence in full configuration-interaction quantum Monte Carlo.\", D. Cleland,  G. H. Booth, A. Alavi, J. Chem. Phys. 132, 041103 (2010).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Scientific papers describing additional features implemented in Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Improved walker population control for full configuration interaction quantum Monte Carlo\", M. Yang, E. Pahl, J. Brand, J. Chem. Phys. 153, 170143 (2020); arXiv:2008.01927.\n\"Stochastic differential equation approach to understanding the population control bias in full configuration interaction quantum Monte Carlo\", J. Brand, M. Yang, E. Pahl, arXiv:2103.07800 (2021).","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"Papers discussing results obtained with Rimu:","category":"page"},{"location":"index.html","page":"Guide","title":"Guide","text":"\"Polaron-Depleton Transition in the Yrast Excitations of a One-Dimensional Bose Gas with a Mobile Impurity\", M. Yang, M. Čufar, E. Pahl, J. Brand, Condens. Matter 7, 15 (2022).\n\"Magnetic impurity in a one-dimensional few-fermion system\", L. Rammelmüller, D. Huber, M. Čufar, J. Brand, A. Volosniev, arXiv:2204.01606 (2022).","category":"page"},{"location":"dictvectors.html#Module-DictVectors","page":"Dict vectors","title":"Module DictVectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DictVectors\nAbstractDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors","page":"Dict vectors","title":"Rimu.DictVectors","text":"Module that provides concrete implementations of the AbstractDVec interface.\n\nDVec: basic AbstractDVec\nPDVec: parallel AbstractDVec with MPI and initiator support\nInitiatorDVec: allows storing information about initiator status\n\nSee Interfaces.\n\n\n\n\n\n","category":"module"},{"location":"dictvectors.html#Rimu.Interfaces.AbstractDVec","page":"Dict vectors","title":"Rimu.Interfaces.AbstractDVec","text":"AbstractDVec{K,V}\n\nAbstract data type for vector-like data structures with sparse storage. While conceptually AbstractDVecs represent elements of a vector space over a scalar type V, they are indexed by an arbitrary type K (could be non-integers) similar to dictionaries. They support the interface from VectorInterface.jl and are designed to work well for quantum Monte Carlo with lomc! and for matrix-free linear algebra with KrylovKit.\n\nConcrete implementations are available as PDVec, DVec, and InitiatorDVec.\n\nAbstractDVecs have a StochasticStyle which selects the spawning algorithm in FCIQMC. Looking up an element that is not stored in the AbstractDVec should return a zero, and setting a value to zero should remove it from the vector. To iterate over an AbstractDVec, use keys, pairs, or values. When possible, use reduction functions such as sum or mapreduce.\n\nInterface\n\nThe interface is similar to the AbstractDict interface, but with the changed behaviour as noted above.  Implement what would be needed for the AbstractDict interface (pairs, keys, values, setindex!, getindex, delete!, length, empty, empty!) and, in addition:\n\nStochasticStyle\nstorage returns an AbstractDict storing the raw data with possibly different valtype than V.\ndeposit!\n\nA default implementation for the VectorInterface.jl interface is provided through the above functions.\n\nSee also DictVectors, Interfaces.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Concrete-implementations","page":"Dict vectors","title":"Concrete implementations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"DVec\nInitiatorDVec\nPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.DVec","page":"Dict vectors","title":"Rimu.DictVectors.DVec","text":"DVec{K,V,D<:AbstractDict{K,V},S}\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot. It has a StochasticStyle that is used to select an appropriate spawning strategy in the FCIQMC algorithm.\n\nSee also: AbstractDVec, InitiatorDVec, PDVec.\n\nConstructors\n\nDVec(dict::AbstractDict[; style, capacity]): create a DVec with dict for storage. Note that the data may or may not be copied.\nDVec(args...[; style, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nDVec{K,V}([; style, capacity]): create an empty DVec{K,V}.\nDVec(dv::AbstractDVec[; style, capacity]): create a DVec with the same contents as  adv. The style is inherited from dv by default.\n\nThe default style is selected based on the DVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\n\nThe capacity argument is optional and sets the initial size of the DVec via Base.sizehint!.\n\nExamples\n\njulia> dv = DVec(:a => 1)\nDVec{Symbol,Int64} with 1 entry, style = IsStochasticInteger{Int64}()\n  :a => 1\n\njulia> dv = DVec(:a => 2, :b => 3; style=IsDeterministic())\nDVec{Symbol,Float64} with 2 entries, style = IsDeterministic{Float64}()\n  :a => 2.0\n  :b => 3.0\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorDVec","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorDVec","text":"InitiatorDVec{K,V} <: AbstractDVec{K,V}\n\nDictionary-based vector-like data structure for use with lomc! and KrylovKit.jl. See AbstractDVec. Functionally identical to DVec, but contains InitiatorValues internally in order to facilitate initiator methods. Initiator methods for controlling the Monte Carlo sign problem were first introduced in J. Chem. Phys. 132, 041103 (2010). How the initiators are handled is controlled by specifying an InitiatorRule with the initiator keyword argument (see below).\n\nSee also: AbstractDVec, DVec, PDVec.\n\nConstructors\n\nInitiatorDVec(dict::AbstractDict[; style, initiator, capacity]): create an InitiatorDVec with dict for storage.  Note that the data may or may not be copied.\nInitiatorDVec(args...[; style, initiator, capacity]): args... are passed to the Dict constructor. The Dict is used for storage.\nInitiatorDVec{K,V}([; style, initiator, capacity]): create an empty InitiatorDVec{K,V}.\nInitiatorDVec(dv::AbstractDVec[; style, initiator, capacity]): create an InitiatorDVec  with the same contents as dv. The style is inherited from dv by default.\n\nKeyword  arguments\n\nstyle: A valid StochasticStyle.  The default is selected based on the InitiatorDVec's valtype (see default_style). If a style is given and the valtype does not match the style's eltype, the values are converted to an appropriate type.\ninitiator = Initiator(1): A valid InitiatorRule. See Initiator.\ncapacity: Indicative size as Int. Optional. Sets the initial size of the InitiatorDVec via Base.sizehint!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDVec","page":"Dict vectors","title":"Rimu.DictVectors.PDVec","text":"PDVec{K,V}(; kwargs...)\nPDVec(iter; kwargs...)\nPDVec(pairs...; kwargs...)\n\nDictionary-based vector-like data structure for use with FCIQMC and KrylovKit.jl. While mostly behaving like a Dict, it supports various linear algebra operations such as norm and dot, and the interface defined in VectorInterface.\n\nThe P in PDVec stands for parallel. PDVecs perform mapreduce, foreach, and various linear algebra operations in a threaded manner. If MPI is available, these operations are automatically distributed as well. As such it is not recommended to iterate over pairs, keys, or values directly unless explicitly performing them on the localpart of the vector.\n\nSee also: AbstractDVec, DVec, InitiatorDVec.\n\nKeyword arguments\n\nstyle =default_style(V): A StochasticStyle that is used to select the spawning strategy in the FCIQMC algorithm.\ninitiator =NonInitiator(): An InitiatorRule, used in FCIQMC to remove the sign problem.\ncommunicator: A Communicator that controls how operations are performed when using MPI. The defaults are NotDistributed when not using MPI and PointToPoint when using MPI.\n\nExtended Help\n\nSegmentation\n\nThe vector is split into Threads.nthreads() subdictionaries called segments. Which dictionary a key-value pair is mapped to is determined by the hash of the key. The purpose of this segmentation is to allow parallel processing - functions such as mapreduce, add! or dot (full list below) process each subdictionary on a separate thread.\n\nExample\n\njulia> add = FermiFS2C((1,1,0,0), (0,0,1,1));\n\njulia> op = HubbardMom1D(add; t=4/π^2, u=4);\n\njulia> pv = PDVec(add => 1.0)\n1-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↑↓↓⟩\" => 1.0\n\njulia> pv = op * pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => 4.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => -1.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => -1.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> map!(x -> -x, values(pv)); pv\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => -1.0\n  fs\"|↑↑↓↓⟩\" => -4.0\n  fs\"|↓↑↓↑⟩\" => -1.0\n  fs\"|↓↑↑↓⟩\" => 1.0\n  fs\"|⇅⋅⋅⇅⟩\" => -1.0\n  fs\"|↑↓↓↑⟩\" => 1.0\n  fs\"|⋅⇅⇅⋅⟩\" => -1.0\n\njulia> dest = similar(pv)\n0-element PDVec: style = IsDeterministic{Float64}()\n\njulia> map!(x -> x + 2, dest, values(pv))\n7-element PDVec: style = IsDeterministic{Float64}()\n  fs\"|↑↓↑↓⟩\" => 1.0\n  fs\"|↑↑↓↓⟩\" => -2.0\n  fs\"|↓↑↓↑⟩\" => 1.0\n  fs\"|↓↑↑↓⟩\" => 3.0\n  fs\"|⇅⋅⋅⇅⟩\" => 1.0\n  fs\"|↑↓↓↑⟩\" => 3.0\n  fs\"|⋅⇅⇅⋅⟩\" => 1.0\n\njulia> sum(values(pv))\n-6.0\n\njulia> dot(dest, pv)\n10.0\n\njulia> dot(dest, op, pv)\n44.0\n\nMPI\n\nWhen MPI is active, all parallel reductions are automatically reduced across MPI ranks with a call to MPI.Allreduce.\n\nIn a distributed setting, PDVec does not support iteration without first making it explicit the iteration is only to be performed on the local segments of the vector. This is done with localpart. In general, even when not using MPI, it is best practice to use localpart when explicit iteration is required.\n\nUse with KrylovKit\n\nPDVec is compatible with eigsolve from KrylovKit.jl. When used, the diagonalisation is performed in a threaded and distributed manner. Using multiple MPI ranks with this method does not distribute the memory load effectively, but does result in significant speedups.\n\nExample\n\njulia> using KrylovKit\n\njulia> add = BoseFS((0,0,5,0,0));\n\njulia> op = HubbardMom1D(add; u=6.0);\n\njulia> pv = PDVec(add => 1.0);\n\njulia> results = eigsolve(op, pv, 4, :SR);\n\njulia> results[1][1:4]\n4-element Vector{Float64}:\n -3.4311156892322234\n  1.1821748602612363\n  3.7377753753082823\n  6.996390417443125\n\nParallel functionality\n\nThe following functions are threaded MPI-compatible:\n\nFrom Base: mapreduce and derivatives (sum, prod, reduce...), all, any,map! (on values only), +, -, *\nFrom LinearAlgebra: rmul!, lmul!, mul!, axpy!, axpby!, dot, norm, normalize, normalize!\nThe full interface defined in VectorInterface\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Interface-functions","page":"Dict vectors","title":"Interface functions","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"deposit!\nstorage\nfreeze\nlocalpart\napply_operator!\nsort_into_targets!\nworking_memory","category":"page"},{"location":"dictvectors.html#Rimu.Interfaces.deposit!","page":"Dict vectors","title":"Rimu.Interfaces.deposit!","text":"deposit!(w::InitiatorDVec, add, val, p_add=>p_val)\n\nAdd val into w at address add as an AbstractInitiatorValue.\n\n\n\n\n\ndeposit!(w::AbstractDVec, add, val, parent::Pair)\n\nAdd val into w at address add, taking into account initiator rules if applicable. parent contains the address => value pair from which the pair add => val was created. InitiatorDVec can intercept this and add its own functionality.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.storage","page":"Dict vectors","title":"Rimu.Interfaces.storage","text":"storage(dvec) -> AbstractDict\n\nReturn the raw storage associated with dvec as an AbstractDict. Used in MPI communication.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#OrderedCollections.freeze","page":"Dict vectors","title":"OrderedCollections.freeze","text":"freeze(dv)\n\nCreate a \"frozen\" version of dv which can no longer be modified or used in the conventional manner, but supports faster dot products.\n\nIf dv is an MPIData, synchronize its contents among the ranks first.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.localpart","page":"Dict vectors","title":"Rimu.Interfaces.localpart","text":"localpart(dv) -> AbstractDVec\n\nGet the part of dv that is located on this MPI rank. Returns dv itself for vectors that can't be MPI distributed (DVecs and InitiatorDVecs).\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.apply_operator!","page":"Dict vectors","title":"Rimu.Interfaces.apply_operator!","text":"apply_operator!(working_memory, target, source, operator, boost=1, compress=Val(true)) ->\n    stat_names, stats, working_memory, target\n\nPerform a single matrix(/operator)-vector multiplication:\n\nv^(n + 1) = hatT v^(n) \n\nwhere hatT is the operator, v^(n+1) is the target and v^(n) is the source. The working_memory can be used as temporary storage.\n\nThe boost argument is passed to apply_column! and increases the number of spawns performed. For the operator to be applied without compressing the vector after, set compress to Val(false).\n\nWhether the operation is performed in a stochastic, semistochastic, or determistic way is controlled by the trait StochasticStyle(target). See StochasticStyle.\n\nReturns the step stats generated by the StochasticStyle, the working memory and the target vector. target and working_memory may be mutated and/or swapped.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.sort_into_targets!","page":"Dict vectors","title":"Rimu.Interfaces.sort_into_targets!","text":"sort_into_targets!(target, source, stats) -> target, source, agg_stats\n\nAggregate coefficients from source to target and from stats to agg_stats according to thread- or MPI-level parallelism.\n\nReturns the new target and source, as the sorting process may involve swapping them.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.Interfaces.working_memory","page":"Dict vectors","title":"Rimu.Interfaces.working_memory","text":"working_memory(dv::AbstractDVec)\n\nCreate a working memory instance compatible with dv. The working memory must be compatible with sort_into_targets! and apply_operator!.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Supported-operations","page":"Dict vectors","title":"Supported operations","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractDVecs generally support most operations that are defined on Vectors and Dicts. This includes the interface from VectorInterface.jl, and many functions from the LinearAlgebra standard library.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"A significant difference between AbstractDVecs, Vectors, and Dicts, is that iteration on them is disabled by default. Iteration must be explicitly performed on keys, values, or pairs, however, it is highly recommended you use mapreduce, reduce, or similar functions when performing reductions, as that will make the operations compatible with MPI.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"In addition, Rimu defines the following function.","category":"page"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"walkernumber\ndot_from_right","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.walkernumber","page":"Dict vectors","title":"Rimu.DictVectors.walkernumber","text":"walkernumber(md::MPIData)\n\nCompute the walkernumber of the distributed data on every MPI rank with MPI.Allreduce. MPI syncronizing.\n\n\n\n\n\nwalkernumber(v)\n\nCompute the number of walkers in v. It is used for updating the shift. Overload this function for modifying population control.\n\nIn most cases walkernumber(v) is identical to norm(v, 1). For AbstractDVecs with complex coefficients it reports the one norm separately for the real and the imaginary part as a ComplexF64. See Norm1ProjectorPPop.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.dot_from_right","page":"Dict vectors","title":"Rimu.DictVectors.dot_from_right","text":"dot_from_right(w, op::AbstractHamiltonian, v)\n\nInternal function evaluates the 3-argument dot() function in order from right to left.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Projectors","page":"Dict vectors","title":"Projectors","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"AbstractProjector\nNormProjector\nNorm2Projector\nUniformProjector\nNorm1ProjectorPPop\nRimu.DictVectors.FrozenDVec\nRimu.DictVectors.FrozenPDVec","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractProjector","page":"Dict vectors","title":"Rimu.DictVectors.AbstractProjector","text":"Abstract supertype for projectors to be used in in lieu of DVecs or Vectors in dot products. Implemented subtypes:\n\nUniformProjector\nNormProjector\nNorm2Projector\nNorm1ProjectorPPop\n\nSee also PostStepStrategy for use of projectors in lomc!.\n\nInterface\n\nDefine a method for LinearAlgebra.dot(projector, v).\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NormProjector","page":"Dict vectors","title":"Rimu.DictVectors.NormProjector","text":"NormProjector() <: AbstractProjector\n\nResults in computing the one-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,1)\n\nNormProjector() thus represents the vector sign.(x).\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in lomc!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm2Projector","page":"Dict vectors","title":"Rimu.DictVectors.Norm2Projector","text":"Norm2Projector() <: AbstractProjector\n\nResults in computing the two-norm when used in dot(). E.g.\n\ndot(NormProjector(),x)\n-> norm(x,2) # with type Float64\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in lomc!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.UniformProjector","page":"Dict vectors","title":"Rimu.DictVectors.UniformProjector","text":"UniformProjector() <: AbstractProjector\n\nRepresents a vector with all elements 1. To be used with dot(). Minimizes memory allocations.\n\nUniformProjector()⋅v == sum(v)\ndot(UniformProjector(), LO, v) == sum(LO*v)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in lomc!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.Norm1ProjectorPPop","page":"Dict vectors","title":"Rimu.DictVectors.Norm1ProjectorPPop","text":"Norm1ProjectorPPop() <: AbstractProjector\n\nResults in computing the one-norm per population when used in dot(). E.g.\n\ndot(Norm1ProjectorPPop(),x)\n-> norm(real.(x),1) + im*norm(imag.(x),1)\n\nSee also PostStepStrategy, and AbstractProjector for use of projectors in lomc!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenDVec","text":"FrozenDVec\n\nA frozen DVec(s) can't be modified or used in the conventional manner, but support faster dot products. See: freeze.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.FrozenPDVec","page":"Dict vectors","title":"Rimu.DictVectors.FrozenPDVec","text":"FrozenPDVec\n\nParallel version of FrozenDVec. See: freeze, PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Initiator-rules","page":"Dict vectors","title":"Initiator rules","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Rimu.DictVectors.InitiatorRule\nRimu.DictVectors.AbstractInitiatorValue\nRimu.DictVectors.InitiatorValue\nRimu.DictVectors.initiator_valtype\nRimu.DictVectors.to_initiator_value\nRimu.DictVectors.from_initiator_value\nRimu.DictVectors.Initiator\nRimu.DictVectors.SimpleInitiator\nRimu.DictVectors.CoherentInitiator\nRimu.DictVectors.NonInitiator\nRimu.DictVectors.NonInitiatorValue","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorRule","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorRule","text":"InitiatorRule{V}\n\nAbstract type for defining initiator rules for InitiatorDVec. Concrete implementations:\n\nInitiator\nSimpleInitiator\nCoherentInitiator\nNonInitiator\n\nExtended Help\n\nInitiatorRules define how to store and retrieve data from associated AbstractInitiatorValues. When defining a new InitiatorRule, also define the following:\n\ninitiator_valtype\nfrom_initiator_value\nto_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.AbstractInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.AbstractInitiatorValue","text":"abstract type AbstractInitiatorValue{V}\n\nA value equipped with additional information that enables a variation of the initiator approximation. To be used with PDVec, InitiatorDVec and InitiatorRules.\n\nMust define:\n\nBase.zero, Base.:+, Base.:-, Base.:*\nfrom_initiator_value and to_initiator_value\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.InitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.InitiatorValue","text":"InitiatorValue{V}(; safe::V, unsafe::V, initiator::V) where V\n\nComposite \"walker\" with three fields. For use with InitiatorDVecs.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.initiator_valtype","page":"Dict vectors","title":"Rimu.DictVectors.initiator_valtype","text":"initiator_valtype(rule::InitiatorRule, T)\n\nReturn the AbstractInitiatorValue{T} that is employed by the rule.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.to_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.to_initiator_value","text":"to_initiator_value(::InitiatorRule, k::K, v::V, parent)\n\nConvert v to an AbstractInitiatorValue, taking the initiator rule and the parent that spawned it into account.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.from_initiator_value","page":"Dict vectors","title":"Rimu.DictVectors.from_initiator_value","text":"from_initiator_value(i::InitiatorRule, v::AbstractInitiatorValue)\n\nConvert the AbstractInitiatorValue v into a scalar value according to the InitiatorRule i.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.Initiator","page":"Dict vectors","title":"Rimu.DictVectors.Initiator","text":"Initiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SimpleInitiator","page":"Dict vectors","title":"Rimu.DictVectors.SimpleInitiator","text":"SimpleInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators cannot spawn.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.CoherentInitiator","page":"Dict vectors","title":"Rimu.DictVectors.CoherentInitiator","text":"CoherentInitiator(threshold = 1.0) <: InitiatorRule\n\nInitiator rule to be passed to PDVec or InitiatorDVec. An initiator is a configuration add with a coefficient with magnitude abs(v[add]) > threshold. The threshold can be passed as a keyword argument. Rules:\n\nInitiators can spawn anywhere.\nNon-initiators can spawn to initiators.\nMultiple non-initiators can spawn to a single non-initiator if their contributions add up to a value greater than the initiator threshold.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiator","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiator","text":"NonInitiator() <: InitiatorRule\n\nInitiator rule that disables the approximation. This is the default setting for PDVec.\n\nSee InitiatorRule.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NonInitiatorValue","page":"Dict vectors","title":"Rimu.DictVectors.NonInitiatorValue","text":"NonInitiatorValue{V}\n\nValue that does not contain any additional information - used with NonInitiator, the default initiator rule for PDVec.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#PDVec-internals","page":"Dict vectors","title":"PDVec internals","text":"","category":"section"},{"location":"dictvectors.html#Working-memory","page":"Dict vectors","title":"Working memory","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"pdworkingmemory.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.MainSegmentIterator","page":"Dict vectors","title":"Rimu.DictVectors.MainSegmentIterator","text":"MainSegmentIterator{W,D} <: AbstractVector{D}\n\nIterates the main segments of a specified rank. See remote_segments and local_segments.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemory","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemory","text":"PDWorkingMemory(t::PDVec)\n\nThe working memory that handles threading and MPI distribution for operations that involve operators, such as FCIQMC propagation, operator-vector multiplication and three-way dot products with PDVecs.\n\nThe working memory is structured in a series of columns, where each has a number of segments (see PDVec) equal to the number of segments across all MPI ranks. The purpose of this organisation is to allow spawning in parallel without using locks or atomic operations.\n\nThe steps performed on a PDWorkingMemory during a typical operation are perform_spawns!, collect_local!, synchronize_remote!, and move_and_compress!.\n\nWhen used with three-argument dot products, a full copy of the left-hand side vector is materialized in the first column of the working memory on all ranks.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PDWorkingMemoryColumn","page":"Dict vectors","title":"Rimu.DictVectors.PDWorkingMemoryColumn","text":"PDWorkingMemoryColumn\n\nA column in PDWorkingMemory. Supports deposit! and StochasticStyle and acts as a target for spawning.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.collect_local!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.collect_local!","text":"collect_local!(w::PDWorkingMemory)\n\nCollect each row in w into its main segment. This step must be performed before using local_segments or remote_segments to move the values elsewhere.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.local_segments-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.local_segments","text":"local_segments(w::PDWorkingMemory)\n\nReturns iterator over the main segments on the current rank. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.main_column-Union{Tuple{PDWorkingMemory{K, V, W, S}}, Tuple{S}, Tuple{W}, Tuple{V}, Tuple{K}} where {K, V, W, S}","page":"Dict vectors","title":"Rimu.DictVectors.main_column","text":"main_column(::PDWorkingMemory) -> PDVec\n\nReturn the \"main\" column of the working memory wrapped in a PDVec.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.move_and_compress!-Tuple{PDVec, PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.move_and_compress!","text":"move_and_compress!(dst::PDVec, src::PDWorkingMemory)\nmove_and_compress!(::CompressionStrategy, dst::PDVec, src::PDWorkingMemory)\n\nMove the values in src to dst, compressing the according to the CompressionStrategy on the way. This step can only be performed after collect_local! and synchronize_remote!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_columns-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_columns","text":"num_columns(w::PDWorkingMemory) -> Int\n\nNumber of columns in the working memory. The number of rows is equal to the number of segments in the local rank.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.num_rows-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.num_rows","text":"num_rows(w::PDWorkingMemory) -> Int\n\nNumber of rows in the working memory. The number of rows is equal to the number of segments accross all ranks.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.perform_spawns!-Tuple{PDWorkingMemory, PDVec, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.perform_spawns!","text":"perform_spawns!(w::PDWorkingMemory, t::PDVec, ham, boost)\n\nPerform spawns from t through ham to w.\n\nSee PDVec and PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.remote_segments-Tuple{PDWorkingMemory, Any}","page":"Dict vectors","title":"Rimu.DictVectors.remote_segments","text":"remote_segments(w::PDWorkingMemory, rank_id)\n\nReturns iterator over the main segments that belong to rank rank_id. Iterates Dicts.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!-Tuple{PDWorkingMemory}","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!(w::PDWorkingMemory)\n\nSynchronize non-local segments across MPI. Controlled by the Communicator. This can only be perfomed after collect_local!.\n\nSee PDWorkingMemory.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Communicators","page":"Dict vectors","title":"Communicators","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Modules = [DictVectors]\nPages = [\"communicators.jl\"]","category":"page"},{"location":"dictvectors.html#Rimu.DictVectors.Communicator","page":"Dict vectors","title":"Rimu.DictVectors.Communicator","text":"abstract type Communicator\n\nCommunicators are used to handle MPI communication when using PDVecs. Currently, two implementations are provided, NotDistributed, and PointToPoint. The communicator is picked automatically according to the number of MPI ranks available.\n\nWhen implementing a communicator, use local_segments and remote_segments.\n\nInterface\n\nsynchronize_remote!\nmpi_rank\nmpi_size\nmpi_comm\n\nOptional interface\n\nis_distributed: defaults to returning true.\nmerge_remote_reductions: defaults to using MPI.Allreduce.\ntotal_num_segments: defaults to n * mpi_size.\ntarget_segment: defaults to selecting using fastrange  to pick the segment.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.LocalPart","page":"Dict vectors","title":"Rimu.DictVectors.LocalPart","text":"LocalPart <: Communicator\n\nWhen localpart is used, the vector's Communicator is replaced with this. This allows iteration and local reductions.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.NotDistributed","page":"Dict vectors","title":"Rimu.DictVectors.NotDistributed","text":"NotDistributed <: Communicator\n\nThis Communicator is used when MPI is not available.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.PointToPoint","page":"Dict vectors","title":"Rimu.DictVectors.PointToPoint","text":"PointToPoint <: Communicator\n\nCommunicator that uses circular communication using MPI.Isend and MPI.Recv!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.SegmentedBuffer","page":"Dict vectors","title":"Rimu.DictVectors.SegmentedBuffer","text":"SegmentedBuffer\n\nMultiple vectors stored in a simple buffer with MPI communication.\n\nSee replace_collections!, mpi_send, mpi_recv_any!.\n\n\n\n\n\n","category":"type"},{"location":"dictvectors.html#Rimu.DictVectors.copy_to_local!","page":"Dict vectors","title":"Rimu.DictVectors.copy_to_local!","text":"copy_to_local!([::Communicator,] w::PDWorkingMemory, t::PDVec) -> PDVec\n\nCopy pairs in t from all ranks and return them as (possibly) new PDVec, possibly using the PDWorkingMemory as temporary storage.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.is_distributed-Tuple{Rimu.DictVectors.Communicator}","page":"Dict vectors","title":"Rimu.DictVectors.is_distributed","text":"is_distributed(::Communicator)\n\nReturn true if communicator operates over MPI.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.merge_remote_reductions-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.merge_remote_reductions","text":"merge_remote_reductions(c::Communicator, op, x)\n\nMerge the results of reductions over MPI. By default, it uses MPI.Allreduce.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_comm","page":"Dict vectors","title":"Rimu.DictVectors.mpi_comm","text":"mpi_comm(::Communicator) -> MPI.Comm\n\nReturn the MPI.Comm that the Communicator operates on.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_rank","page":"Dict vectors","title":"Rimu.DictVectors.mpi_rank","text":"mpi_rank(::Communicator) -> Int\n\nReturn the MPI rank of the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_recv_any!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_recv_any!","text":"mpi_recv_any!(buf::SegmentedBuffer, comm) -> Int\n\nFind a source that is ready to send a buffer and receive from it. Return the rank ID of the sender.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_send-Tuple{Rimu.DictVectors.SegmentedBuffer, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.mpi_send","text":"mpi_send(buf::SegmentedBuffer, dest, comm)\n\nSend the buffers to dest.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.mpi_size","page":"Dict vectors","title":"Rimu.DictVectors.mpi_size","text":"mpi_size(::Communicator) -> Int\n\nReturn the total number of MPI ranks in the Communicator.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.replace_collections!-Tuple{Rimu.DictVectors.SegmentedBuffer, Any}","page":"Dict vectors","title":"Rimu.DictVectors.replace_collections!","text":"replace_collections!(buf::SegmentedBuffer, iters)\n\nInsert collections in iters into buffers.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.synchronize_remote!","page":"Dict vectors","title":"Rimu.DictVectors.synchronize_remote!","text":"synchronize_remote!([::Communicator,] ::PDWorkingMemory)\n\nCopy pairs from remote ranks to the local part of the PDWorkingMemory.\n\n\n\n\n\n","category":"function"},{"location":"dictvectors.html#Rimu.DictVectors.target_segment-Tuple{Rimu.DictVectors.Communicator, Any, Any}","page":"Dict vectors","title":"Rimu.DictVectors.target_segment","text":"target_segment(c::Communicator, k, num_segments) -> target, is_local\n\nThis function is used to determine where in the PDVec a key should be stored.\n\nIf the key is local (stored on the same MPI rank), return its segment index and true. If the key is non-local, return any value and false.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Rimu.DictVectors.total_num_segments-Tuple{Rimu.DictVectors.Communicator, Any}","page":"Dict vectors","title":"Rimu.DictVectors.total_num_segments","text":"total_num_segments(c::Communicator, n) -> Int\n\nReturn the total number of segments, including the remote ones, where n is number of local segments.\n\n\n\n\n\n","category":"method"},{"location":"dictvectors.html#Index","page":"Dict vectors","title":"Index","text":"","category":"section"},{"location":"dictvectors.html","page":"Dict vectors","title":"Dict vectors","text":"Pages   = [\"dictvectors.md\"]","category":"page"}]
}
